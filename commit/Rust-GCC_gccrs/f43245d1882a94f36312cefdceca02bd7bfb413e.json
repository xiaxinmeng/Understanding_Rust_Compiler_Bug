{"sha": "f43245d1882a94f36312cefdceca02bd7bfb413e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQzMjQ1ZDE4ODJhOTRmMzYzMTJjZWZkY2VjYTAyYmQ3YmZiNDEzZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-09-09T15:07:58Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-09-09T15:07:58Z"}, "message": "ipa-prop.c (ipa_modify_call_arguments): Initialize deref_align.\n\n\t* ipa-prop.c (ipa_modify_call_arguments): Initialize deref_align.\n\nFrom-SVN: r202406", "tree": {"sha": "f3bff4526ba94feecd0712b5c06172d46f6ee8cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3bff4526ba94feecd0712b5c06172d46f6ee8cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f43245d1882a94f36312cefdceca02bd7bfb413e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f43245d1882a94f36312cefdceca02bd7bfb413e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f43245d1882a94f36312cefdceca02bd7bfb413e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f43245d1882a94f36312cefdceca02bd7bfb413e/comments", "author": null, "committer": null, "parents": [{"sha": "9420c2c457bd26a733d869fe4de07d374328565f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9420c2c457bd26a733d869fe4de07d374328565f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9420c2c457bd26a733d869fe4de07d374328565f"}], "stats": {"total": 162, "additions": 73, "deletions": 89}, "files": [{"sha": "04a93471a62b15107094d6ea2827556b3b95acf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 72, "deletions": 88, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43245d1882a94f36312cefdceca02bd7bfb413e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43245d1882a94f36312cefdceca02bd7bfb413e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f43245d1882a94f36312cefdceca02bd7bfb413e", "patch": "@@ -1,3 +1,7 @@\n+2013-09-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* ipa-prop.c (ipa_modify_call_arguments): Initialize deref_align.\n+\n 2013-09-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/43452\n@@ -370,10 +374,8 @@\n \n 2013-09-06  James Greenhalgh  <james.greenhalgh@arm.com>\n \n-\t* config/arm/types.md: Add \"no_insn\", \"multiple\" and \"untyped\"\n-\ttypes.\n-\t* config/arm/arm-fixed.md: Add type attribute to all insn\n-\tpatterns.\n+\t* config/arm/types.md: Add \"no_insn\", \"multiple\" and \"untyped\" types.\n+\t* config/arm/arm-fixed.md: Add type attribute to all insn patterns.\n \t(add<mode>3): Add type attribute.\n \t(add<mode>3): Likewise.\n \t(usadd<mode>3): Likewise.\n@@ -723,8 +725,7 @@\n \n 2013-09-06  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n-\t* config/s390/s390.md: Add \"bcr_flush\" value to mnemonic\n-\tattribute.\n+\t* config/s390/s390.md: Add \"bcr_flush\" value to mnemonic attribute.\n \t(\"mem_thread_fence_1\"): Use bcr 14,0 for z196 and later.\n \tSet the mnemonic attribute to \"bcr_flush\".  Set the \"z196prop\"\n \tattribute to \"z196_alone\".\n@@ -740,9 +741,9 @@\n \t(set_control_dependence_map_bit, clear_control_dependence_bitmap,\n \tfind_pdom, find_control_dependence, find_all_control_dependences):\n \tMove to cfganal.c.\n-\t(mark_control_dependent_edges_necessary, find_obviously_necessary_stmts,\n-\tpropagate_necessity, tree_dce_init, tree_dce_done,\n-\tperform_tree_ssa_dce): Adjust.\n+\t(mark_control_dependent_edges_necessary,\n+\tfind_obviously_necessary_stmts, propagate_necessity, tree_dce_init,\n+\ttree_dce_done, perform_tree_ssa_dce): Adjust.\n \t* cfganal.c (set_control_dependence_map_bit,\n \tclear_control_dependence_bitmap, find_pdom, find_control_dependence,\n \tfind_all_control_dependences): Move from tree-ssa-dce.c and\n@@ -789,24 +790,17 @@\n 2013-09-05  James Greenhalgh  <james.greenhalgh@arm.com>\n \t    Sofiane Naci  <sofiane.naci@arm.com>\n \n-\t* config/arm/types.md (define_attr \"type\"):\n-\tExpand \"arlo_imm\"\n+\t* config/arm/types.md (define_attr \"type\"): Expand \"arlo_imm\"\n \tinto \"adr\", \"alu_imm\", \"alus_imm\", \"logic_imm\", \"logics_imm\".\n-\tExpand \"arlo_reg\"\n-\tinto \"adc_reg\", \"adc_imm\", \"adcs_reg\", \"adcs_imm\", \"alu_ext\",\n-\t\"alu_reg\", \"alus_ext\", \"alus_reg\", \"bfm\", \"csel\", \"logic_reg\",\n-\t\"logics_reg\", \"rev\".\n-\tExpand \"arlo_shift\"\n-\tinto \"alu_shift_imm\", \"alus_shift_imm\", \"logic_shift_imm\",\n-\t\"logics_shift_imm\".\n-\tExpand \"arlo_shift_reg\"\n-\tinto \"alu_shift_reg\", \"alus_shift_reg\", \"logic_shift_reg\",\n-\t\"logics_shift_reg\".\n-\tExpand \"clz\" into \"clz, \"rbit\".\n-\tRename \"shift\" to \"shift_imm\".\n+\tExpand \"arlo_reg\" into \"adc_reg\", \"adc_imm\", \"adcs_reg\", \"adcs_imm\",\n+\t\"alu_ext\", \"alu_reg\", \"alus_ext\", \"alus_reg\", \"bfm\", \"csel\",\n+\t\"logic_reg\", \"logics_reg\", \"rev\".  Expand \"arlo_shift\" into\n+\t\"alu_shift_imm\", \"alus_shift_imm\", \"logic_shift_imm\",\n+\t\"logics_shift_imm\".  Expand \"arlo_shift_reg\" into \"alu_shift_reg\",\n+\t\"alus_shift_reg\", \"logic_shift_reg\", \"logics_shift_reg\".  Expand \"clz\"\n+\tinto \"clz, \"rbit\".  Rename \"shift\" to \"shift_imm\".\n \t* config/arm/arm.md (define_attr \"core_cycles\"): Update for attribute\n-\tchanges.\n-\tUpdate for attribute changes all occurrences of arlo_* and\n+\tchanges.  Update for attribute changes all occurrences of arlo_* and\n \tshift* types.\n \t* config/arm/arm-fixed.md: Update for attribute changes\n \tall occurrences of arlo_* types.\n@@ -821,8 +815,7 @@\n \t* config/arm/arm1026ejs.md (alu_op): Update for attribute changes.\n \t(alu_shift_op): Likewise.\n \t(alu_shift_reg_op): Likewise.\n-\t* config/arm/arm1136jfs.md (11_alu_op): Update for\n-\tattribute changes.\n+\t* config/arm/arm1136jfs.md (11_alu_op): Update for attribute changes.\n \t(11_alu_shift_op): Likewise.\n \t(11_alu_shift_reg_op): Likewise.\n \t* config/arm/arm926ejs.md (9_alu_op): Update for attribute changes.\n@@ -834,36 +827,31 @@\n \t* config/arm/cortex-a5.md (cortex_a5_alu): Update for\n \tattribute changes.\n \t(cortex_a5_alu_shift): Likewise.\n-\t* config/arm/cortex-a53.md\n-\t(cortex_a53_alu): Update for attribute changes.\n+\t* config/arm/cortex-a53.md (cortex_a53_alu): Update for\n+\tattribute changes.\n \t(cortex_a53_alu_shift): Likewise.\n-\t* config/arm/cortex-a7.md\n-\t(cortex_a7_alu_imm): Update for attribute changes.\n+\t* config/arm/cortex-a7.md (cortex_a7_alu_imm): Update for\n+\tattribute changes.\n \t(cortex_a7_alu_reg): Likewise.\n \t(cortex_a7_alu_shift): Likewise.\n-\t* config/arm/cortex-a8.md\n-\t(cortex_a8_alu): Update for attribute changes.\n+\t* config/arm/cortex-a8.md (cortex_a8_alu): Update for\n+\tattribute changes.\n \t(cortex_a8_alu_shift): Likewise.\n \t(cortex_a8_alu_shift_reg): Likewise.\n-\t* config/arm/cortex-a9.md\n-\t(cortex_a9_dp): Update for attribute changes.\n+\t* config/arm/cortex-a9.md (cortex_a9_dp): Update for attribute changes.\n \t(cortex_a9_dp_shift): Likewise.\n-\t* config/arm/cortex-m4.md\n-\t(cortex_m4_alu): Update for attribute changes.\n+\t* config/arm/cortex-m4.md (cortex_m4_alu): Update for\n+\tattribute changes.\n \t* config/arm/cortex-r4.md\n \t(cortex_r4_alu): Update for attribute changes.\n \t(cortex_r4_mov): Likewise.\n \t(cortex_r4_alu_shift_reg): Likewise.\n-\t* config/arm/fa526.md\n-\t(526_alu_op): Update for attribute changes.\n+\t* config/arm/fa526.md (526_alu_op): Update for attribute changes.\n \t(526_alu_shift_op): Likewise.\n-\t* config/arm/fa606te.md\n-\t(606te_alu_op): Update for attribute changes.\n-\t* config/arm/fa626te.md\n-\t(626te_alu_op): Update for attribute changes.\n+\t* config/arm/fa606te.md (606te_alu_op): Update for attribute changes.\n+\t* config/arm/fa626te.md (626te_alu_op): Update for attribute changes.\n \t(626te_alu_shift_op): Likewise.\n-\t* config/arm/fa726te.md\n-\t(726te_alu_op): Update for attribute changes.\n+\t* config/arm/fa726te.md (726te_alu_op): Update for attribute changes.\n \t(726te_alu_shift_op): Likewise.\n \t(726te_alu_shift_reg_op): Likewise.\n \t* config/arm/fmp626.md (mp626_alu_op): Update for attribute changes.\n@@ -1272,8 +1260,7 @@\n \t(cortex_a15_store1): Likewise.\n \t(cortex_a15_store3): Likewise.\n \t(cortex_a15_call): Likewise.\n-\t* config/arm/cortex-a5.md (cortex_a5_r2f): Update for attribute\n-\tchange.\n+\t* config/arm/cortex-a5.md (cortex_a5_r2f): Update for attribute change.\n \t(cortex_a5_f2r): Likewise.\n \t* config/arm/cortex-a53.md (cortex_a53_r2f): Update for attribute\n \tchange.\n@@ -1327,8 +1314,8 @@\n \t(cortex_a8_neon_vsma): Likewise.\n \t(cortex_a8_neon_mul_ddd_8_16_qdd_16_8_long_32_16_long): Likewise.\n \t(cortex_a8_neon_mul_qqq_8_16_32_ddd_32): Likewise.\n-\t(cortex_a8_neon_mul_qdd_64_32_long_qqd_16_ddd_32_scalar_64_32_long_scalar):\n-\tLikewise.\n+\t(cortex_a8_neon_mul_qdd_64_32_long_qqd_16_ddd_32_scalar_64_32_\\\n+\tlong_scalar): Likewise.\n \t(cortex_a8_neon_mla_ddd_8_16_qdd_16_8_long_32_16_long): Likewise.\n \t(cortex_a8_neon_mla_qqq_8_16): Likewise.\n \t(cortex_a8_neon_mla_ddd_32_qqd_16_ddd_32_scalar_qdd_64_32_\\\n@@ -1375,8 +1362,7 @@\n \t(cortex_a8_neon_vld3_vld4_all_lanes): Likewise.\n \t(cortex_a8_neon_mcr): Likewise.\n \t(cortex_a8_neon_mcr_2_mcrr): Likewise.\n-\t* config/arm/cortex-a8.md (cortex_a8_alu): Update for attribute\n-\tchange.\n+\t* config/arm/cortex-a8.md (cortex_a8_alu): Update for attribute change.\n \t* config/arm/cortex-a9-neon.md (ca9_neon_mrc): Update for attribute\n \tchange.\n \t(ca9_neon_mrrc): Likewise.\n@@ -1392,8 +1378,8 @@\n \t(cortex_a9_neon_vsma): Likewise.\n \t(cortex_a9_neon_mul_ddd_8_16_qdd_16_8_long_32_16_long): Likewise.\n \t(cortex_a9_neon_mul_qqq_8_16_32_ddd_32): Likewise.\n-\t(cortex_a9_neon_mul_qdd_64_32_long_qqd_16_ddd_32_scalar_64_32_long_scalar):\n-\tLikewise.\n+\t(cortex_a9_neon_mul_qdd_64_32_long_qqd_16_ddd_32_scalar_64_32_\\\n+\tlong_scalar): Likewise.\n \t(cortex_a9_neon_mla_ddd_8_16_qdd_16_8_long_32_16_long): Likewise.\n \t(cortex_a9_neon_mla_qqq_8_16): Likewise.\n \t(cortex_a9_neon_mla_ddd_32_qqd_16_ddd_32_scalar_qdd_64_32_\\\n@@ -1449,11 +1435,10 @@\n \tchange.\n \t(cortex_r4_mrc): Likewise.\n \t* config/arm/iterators.md: Update comment referring to neon_type.\n-\t* config/arm/iwmmxt.md\n-\t(iwmmxt_arm_movdi): Update for attribute change.\n+\t* config/arm/iwmmxt.md (iwmmxt_arm_movdi): Update for attribute change.\n \t(iwmmxt_movsi_insn): Likewise.\n-\t* config/arm/marvell-pj4.md\n-\t(pj4_vfp_to_core): Update for attribute change.\n+\t* config/arm/marvell-pj4.md (pj4_vfp_to_core): Update for\n+\tattribute change.\n \t(pj4_core_to_vfp): Likewise.\n \t* config/arm/neon-schedgen.ml (emit_insn_reservations): Update for\n \tattribute change.\n@@ -1669,19 +1654,20 @@\n \tcgraph_propagate_frequency_1, cgraph_propagate_frequency): Move to\n \tipa-profile.c; replace cgraph_ by ipa_ prefix.\n \t* cgraph.h (cgraph_propagate_frequency): Remove.\n-\t* ipa-inline-analysis.c: Include ipa-utils.h; drop duplicated cfgloop.h.\n+\t* ipa-inline-analysis.c: Include ipa-utils.h;\n+\tdrop duplicated cfgloop.h.\n \t(inline_update_callee_summaries): Update.\n \t* ipa-profile.c: New file.\n \t* ipa-utils.h (ipa_propagate_frequency): Declare.\n \t* ipa.c: Do not include pointer-set.h, hash-table.h, lto-streamer.h,\n-\tdata-streamer.h, value-prof.h\n+\tdata-streamer.h, value-prof.h.\n \t(symtab_remove_unreachable_nodes): Update profile.\n \t(struct histogram_entry, histogram, histogram_pool, histogram_hash,\n \taccount_time_size, cmp_counts, dump_histogram,\n \tipa_profile_generate_summary, ipa_profile_write_summary,\n \tipa_profile_read_summary, ipa_profile, gate_ipa_profile,\n \tpass_data_ipa_profile, pass_ipa_profile, make_pass_ipa_profile):\n-\tMove to ipa-profile.c\n+\tMove to ipa-profile.c.\n \n 2013-09-01  John David Anglin  <danglin@gcc.gnu.org>\n \n@@ -1703,7 +1689,7 @@\n \tvalue range profiling is available.\n \t* passes.def (pass_ipa_devirt): Add.\n \t* timever.def (TV_IPA_DEVIRT): New timevar.\n-\t* tree-pass.h (make_pass_ipa_devirt): \n+\t* tree-pass.h (make_pass_ipa_devirt):\n \n 2013-09-01  Iain Sandoe  <iain@codesourcery.com>\n \n@@ -2466,13 +2452,13 @@\n \n 2013-08-23  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n-\t* gcc/config/i386/predicates.md (ext_sse_reg_operand): New.\n-\t* gcc/config/i386/i386.md (*movti_internal): Use\n+\t* config/i386/predicates.md (ext_sse_reg_operand): New.\n+\t* config/i386/i386.md (*movti_internal): Use\n \tpredicate to determine if EVEX is needed.\n \t(*movsi_internal): Ditto.\n \t(*movdf_internal): Ditto.\n \t(*movsf_internal): Ditto.\n-\t* gcc/config/i386/mmx.md (*mov<mode>_internal): Ditto.\n+\t* config/i386/mmx.md (*mov<mode>_internal): Ditto.\n \n 2013-08-23  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -6420,7 +6406,7 @@\n \t(ix86_save_reg): If the function contains a nonlocal label, save the\n \tPIC base reg.\n \t* config/darwin-protos.h (machopic_should_output_picbase_label): New.\n-\t* gcc/config/darwin.c (emitted_pic_label_num): New GTY.\n+\t* config/darwin.c (emitted_pic_label_num): New GTY.\n \t(update_pic_label_number_if_needed): New.\n \t(machopic_output_function_base_name): Adjust for nonlocal receiver\n \tcase.\n@@ -9779,11 +9765,11 @@\n \n \t* config/i386/driver-i386.c (host_detect_local_cpu): Check movbe.\n \n-\t* gcc/config/i386/i386-c.c (ix86_target_macros_internal):  New case\n+\t* config/i386/i386-c.c (ix86_target_macros_internal):  New case\n \tPROCESSOR_SLM.\n \t(ix86_target_macros_internal): Likewise.\n \n-\t* gcc/config/i386/i386.c (slm_cost): New cost.\n+\t* config/i386/i386.c (slm_cost): New cost.\n \t(m_SLM): New macro flag.\n \t(initial_ix86_tune_features): Set m_SLM.\n \t(x86_accumulate_outgoing_args): Likewise.\n@@ -10617,15 +10603,15 @@\n \tconstraints.md instead of rs6000.h.  Reorder w* constraints.  Add\n \twm, wn, wr documentation.\n \n-\t* gcc/config/rs6000/constraints.md (wm): New constraint for VSX\n+\t* config/rs6000/constraints.md (wm): New constraint for VSX\n \tregisters if direct move instructions are enabled.\n \t(wn): New constraint for no registers.\n \t(wq): New constraint for quad word even GPR registers.\n \t(wr): New constraint if 64-bit instructions are enabled.\n \t(wv): New constraint if power8 vector instructions are enabled.\n \t(wQ): New constraint for quad word memory locations.\n \n-\t* gcc/config/rs6000/predicates.md (const_0_to_15_operand): New\n+\t* config/rs6000/predicates.md (const_0_to_15_operand): New\n \tconstraint for 0..15 for crypto instructions.\n \t(gpc_reg_operand): If VSX allow registers in VSX registers as well\n \tas GPR and floating point registers.\n@@ -10638,26 +10624,25 @@\n \t(quad_memory_operand): New predicate for quad memory operations.\n \t(reg_or_indexed_operand): New predicate for direct move support.\n \n-\t* gcc/config/rs6000/rs6000-cpus.def (ISA_2_5_MASKS_EMBEDDED):\n+\t* config/rs6000/rs6000-cpus.def (ISA_2_5_MASKS_EMBEDDED):\n \tInherit from ISA_2_4_MASKS, not ISA_2_2_MASKS.\n \t(ISA_2_7_MASKS_SERVER): New mask for ISA 2.07 (i.e. power8).\n \t(POWERPC_MASKS): Add power8 options.\n \t(power8 cpu): Use ISA_2_7_MASKS_SERVER instead of specifying the\n \tvarious options.\n \n-\t* gcc/config/rs6000/rs6000-c.c (rs6000_target_modify_macros):\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros):\n \tDefine _ARCH_PWR8 and __POWER8_VECTOR__ for power8.\n \n-\t* gcc/config/rs6000/rs6000.opt (-mvsx-timode): Add documentation.\n+\t* config/rs6000/rs6000.opt (-mvsx-timode): Add documentation.\n \t(-mpower8-fusion): New power8 options.\n \t(-mpower8-fusion-sign): Likewise.\n \t(-mpower8-vector): Likewise.\n \t(-mcrypto): Likewise.\n \t(-mdirect-move): Likewise.\n \t(-mquad-memory): Likewise.\n \n-\t* gcc/config/rs6000/rs6000.c (power8_cost): Initial definition for\n-\tpower8.\n+\t* config/rs6000/rs6000.c (power8_cost): Initial definition for power8.\n \t(rs6000_hard_regno_mode_ok): Make PTImode only match even GPR\n \tregisters.\n \t(rs6000_debug_reg_print): Print the base register class if -mdebug=reg.\n@@ -15780,21 +15765,20 @@\n \n 2013-03-27  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \n-\t* gcc/target.def (TARGET_HAS_IFUNC_P): New target hook.\n-\t* gcc/doc/tm.texi.in (TARGET_HAS_IFUNC_P): New.\n-\t* gcc/doc/tm.texi: Regenerate.\n-\t* gcc/targhooks.h (default_has_ifunc_p): New.\n-\t* gcc/targhooks.c (default_has_ifunc_p): Ditto.\n-\t* gcc/config/linux-protos.h: New file.\n-\t* gcc/config/linux-android.h (TARGET_HAS_IFUNC_P): Using version of\n-\tthis hook for linux which disables support of indirect functions in\n-\tandroid.\n-\t* gcc/config/linux-android.c: New file.\n-\t* gcc/config/t-linux-android.c: Ditto.\n-\t* gcc/config.gcc: Added new object file linux-android.o.\n-\t* gcc/config/i386/i386.c (ix86_get_function_versions_dispatcher):\n+\t* target.def (TARGET_HAS_IFUNC_P): New target hook.\n+\t* doc/tm.texi.in (TARGET_HAS_IFUNC_P): New.\n+\t* doc/tm.texi: Regenerate.\n+\t* targhooks.h (default_has_ifunc_p): New.\n+\t* targhooks.c (default_has_ifunc_p): Ditto.\n+\t* config/linux-protos.h: New file.\n+\t* config/linux-android.h (TARGET_HAS_IFUNC_P): Using version of this\n+\thook for linux which disables support of indirect functions in android.\n+\t* config/linux-android.c: New file.\n+\t* config/t-linux-android.c: Ditto.\n+\t* config.gcc: Added new object file linux-android.o.\n+\t* config/i386/i386.c (ix86_get_function_versions_dispatcher):\n \tUsing TARGET_HAS_IFUNC hook instead of HAVE_GNU_INDIRECT_FUNCTION.\n-\t* gcc/varasm.c (do_assemble_alias): Likewise.\n+\t* varasm.c (do_assemble_alias): Likewise.\n \t* configure.ac: Define HAVE_GNU_INDIRECT_FUNCTION as zero if the target\n \tdoesn't support indirect functions.\n \t* configure: Regenerate."}, {"sha": "ad82d759fce067e378a8106644daeed4f718d1ca", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43245d1882a94f36312cefdceca02bd7bfb413e/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43245d1882a94f36312cefdceca02bd7bfb413e/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=f43245d1882a94f36312cefdceca02bd7bfb413e", "patch": "@@ -3524,7 +3524,7 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gimple stmt,\n \t{\n \t  tree expr, base, off;\n \t  location_t loc;\n-\t  unsigned int deref_align;\n+\t  unsigned int deref_align = 0;\n \t  bool deref_base = false;\n \n \t  /* We create a new parameter out of the value of the old one, we can"}]}