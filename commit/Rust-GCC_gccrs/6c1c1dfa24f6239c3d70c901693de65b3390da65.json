{"sha": "6c1c1dfa24f6239c3d70c901693de65b3390da65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMxYzFkZmEyNGY2MjM5YzNkNzBjOTAxNjkzZGU2NWIzMzkwZGE2NQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2009-09-14T13:05:02Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2009-09-14T13:05:02Z"}, "message": "bfin.c (bfin_expand_builtin, [...]): Force constants to registers for the operands.\n\ngcc/\n\t* config/bfin/bfin.c (bfin_expand_builtin,\n\tcase BFIN_BUILTIN_MULT_1X32X32): Force constants to registers for the\n\toperands.\n\tFrom Jie Zhang <jie.zhang@analog.com>:\n\t* config/bfin/bfin.c (bfin_expand_builtin): Initialize icodes\n\tbefore use in two places.\n\t* config/bfin/bfin.md (AREG): Define mode iterator.\n\t(reload_in, reload_out): Use mode iterator AREG.\n\ngcc/testsuite/\n\t* gcc.target/bfin/20090914-1.c: New test.\n\t* gcc.target/bfin/20090914-2.c: New test.\n\t* gcc.target/bfin/20090914-3.c: New test.\n\nFrom-SVN: r151687", "tree": {"sha": "6a18080c6ddc6b7cdfb8193825cabbd6213eb059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a18080c6ddc6b7cdfb8193825cabbd6213eb059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c1c1dfa24f6239c3d70c901693de65b3390da65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1c1dfa24f6239c3d70c901693de65b3390da65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c1c1dfa24f6239c3d70c901693de65b3390da65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1c1dfa24f6239c3d70c901693de65b3390da65/comments", "author": null, "committer": null, "parents": [{"sha": "8be6ada8faac0f530f03a3694b2c65ce49d8f35d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be6ada8faac0f530f03a3694b2c65ce49d8f35d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8be6ada8faac0f530f03a3694b2c65ce49d8f35d"}], "stats": {"total": 113, "additions": 107, "deletions": 6}, "files": [{"sha": "bd3cc250c9fd6dca9ef38418d8565c2651ee2da3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1c1dfa24f6239c3d70c901693de65b3390da65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1c1dfa24f6239c3d70c901693de65b3390da65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c1c1dfa24f6239c3d70c901693de65b3390da65", "patch": "@@ -9,6 +9,15 @@\n \t(bfin_expand_epilogue): Ask do_unlink to restore FP and RETS\n \twith saveall attribute.\n \n+\t* config/bfin/bfin.c (bfin_expand_builtin,\n+\tcase BFIN_BUILTIN_MULT_1X32X32): Force constants to registers for the\n+\toperands.\n+\tFrom Jie Zhang <jie.zhang@analog.com>:\n+\t* config/bfin/bfin.c (bfin_expand_builtin): Initialize icodes\n+\tbefore use in two places.\n+\t* config/bfin/bfin.md (AREG): Define mode iterator.\n+\t(reload_in, reload_out): Use mode iterator AREG.\n+\n 2009-09-14  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/41350"}, {"sha": "bb679eabd3e06edc5183428cda92011c68992f2a", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1c1dfa24f6239c3d70c901693de65b3390da65/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1c1dfa24f6239c3d70c901693de65b3390da65/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=6c1c1dfa24f6239c3d70c901693de65b3390da65", "patch": "@@ -6342,6 +6342,10 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n       if (! target\n \t  || !register_operand (target, SImode))\n \ttarget = gen_reg_rtx (SImode);\n+      if (! register_operand (op0, SImode))\n+\top0 = copy_to_mode_reg (SImode, op0);\n+      if (! register_operand (op1, SImode))\n+\top1 = copy_to_mode_reg (SImode, op1);\n \n       a1reg = gen_rtx_REG (PDImode, REG_A1);\n       a0reg = gen_rtx_REG (PDImode, REG_A0);\n@@ -6395,6 +6399,7 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n       op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n       op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n       accvec = gen_reg_rtx (V2PDImode);\n+      icode = CODE_FOR_flag_macv2hi_parts;\n \n       if (! target\n \t  || GET_MODE (target) != V2HImode\n@@ -6431,6 +6436,7 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n       op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n       op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n       accvec = gen_reg_rtx (V2PDImode);\n+      icode = CODE_FOR_flag_macv2hi_parts;\n \n       if (! target\n \t  || GET_MODE (target) != V2HImode"}, {"sha": "3fac01ca564669fd77ac7f7856ee54e6aac8459b", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1c1dfa24f6239c3d70c901693de65b3390da65/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1c1dfa24f6239c3d70c901693de65b3390da65/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=6c1c1dfa24f6239c3d70c901693de65b3390da65", "patch": "@@ -1841,9 +1841,11 @@\n   DONE;\n })\n \n-(define_insn \"reload_inpdi\"\n-  [(set (match_operand:PDI 0 \"register_operand\" \"=e\")\n-\t(match_operand:PDI 1 \"memory_operand\" \"m\"))\n+(define_mode_iterator AREG [PDI V2PDI])\n+\n+(define_insn \"reload_in<mode>\"\n+  [(set (match_operand:AREG 0 \"register_operand\" \"=e\")\n+\t(match_operand:AREG 1 \"memory_operand\" \"m\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))]\n   \"\"\n {\n@@ -1861,9 +1863,9 @@\n   (set_attr \"type\" \"mcld\")\n   (set_attr \"length\" \"12\")])\n \n-(define_insn \"reload_outpdi\"\n-  [(set (match_operand:PDI 0 \"memory_operand\" \"=m\")\n-\t(match_operand:PDI 1 \"register_operand\" \"e\"))\n+(define_insn \"reload_out<mode>\"\n+  [(set (match_operand:AREG 0 \"memory_operand\" \"=m\")\n+\t(match_operand:AREG 1 \"register_operand\" \"e\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))]\n   \"\"\n {"}, {"sha": "724d65ee8ca58c832e3a7ce9e298e625317cf622", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1c1dfa24f6239c3d70c901693de65b3390da65/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1c1dfa24f6239c3d70c901693de65b3390da65/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c1c1dfa24f6239c3d70c901693de65b3390da65", "patch": "@@ -2,6 +2,10 @@\n \n \tFrom Jie Zhang <jie.zhang@analog.com>:\n \t* gcc.target/bfin/saveall.c: New test.\n+\t* gcc.target/bfin/20090914-1.c: New test.\n+\t* gcc.target/bfin/20090914-2.c: New test.\n+\n+\t* gcc.target/bfin/20090914-3.c: New test.\n \n 2009-09-14  Andrew Stubbs  <ams@codesourcery.com>\n "}, {"sha": "1044540571023bd35efc3a91dd695a5b2da8eec2", "filename": "gcc/testsuite/gcc.target/bfin/20090914-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1c1dfa24f6239c3d70c901693de65b3390da65/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2F20090914-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1c1dfa24f6239c3d70c901693de65b3390da65/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2F20090914-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2F20090914-1.c?ref=6c1c1dfa24f6239c3d70c901693de65b3390da65", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile { target bfin-*-* } } */\n+\n+typedef short __v2hi __attribute__ ((vector_size (4)));\n+typedef __v2hi raw2x16;\n+typedef raw2x16 fract2x16;\n+\n+typedef short fract16;\n+typedef struct complex_fract16\n+{\n+  fract16 re;\n+  fract16 im;\n+} __attribute__ ((aligned (4))) complex_fract16;\n+\n+typedef union composite_complex_fract16\n+{\n+  struct complex_fract16 x;\n+  long raw;\n+} composite_complex_fract16;\n+\n+__inline__ __attribute__ ((always_inline))\n+static complex_fract16 cmsu_fr16 (complex_fract16 _sum,\n+\t\t\t\t  complex_fract16 _a, complex_fract16 _b)\n+{\n+  complex_fract16 r;\n+  fract2x16 i =\n+    __builtin_bfin_cmplx_msu (__builtin_bfin_compose_2x16\n+\t\t\t      ((_sum).im, (_sum).re),\n+\t\t\t      __builtin_bfin_compose_2x16 ((_a).im, (_a).re),\n+\t\t\t      __builtin_bfin_compose_2x16 ((_b).im, (_b).re));\n+  (r).re = __builtin_bfin_extract_lo (i);\n+  (r).im = __builtin_bfin_extract_hi (i);\n+  return r;\n+}\n+\n+composite_complex_fract16\n+f (complex_fract16 _sum, complex_fract16 _a, complex_fract16 _b)\n+{\n+  return (composite_complex_fract16) cmsu_fr16 (_sum, _a, _b);\n+}"}, {"sha": "55255d7a84711d8b5e28226099b9db2c8d14731b", "filename": "gcc/testsuite/gcc.target/bfin/20090914-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1c1dfa24f6239c3d70c901693de65b3390da65/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2F20090914-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1c1dfa24f6239c3d70c901693de65b3390da65/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2F20090914-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2F20090914-2.c?ref=6c1c1dfa24f6239c3d70c901693de65b3390da65", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile { target bfin-*-* } } */\n+\n+typedef short fract16;\n+typedef short __v2hi __attribute__ ((vector_size (4)));\n+typedef __v2hi raw2x16;\n+typedef raw2x16 fract2x16;\n+typedef struct complex_fract16 {\n+  fract16 re;\n+  fract16 im;\n+} __attribute__((aligned(4))) complex_fract16;\n+\n+\n+__inline__\n+__attribute__ ((always_inline))\n+static complex_fract16 cmlt_fr16 (complex_fract16 _a,\n+\t\t\t\t  complex_fract16 _b)\n+{\n+  complex_fract16 r;\n+  fract2x16 i;\n+\n+  i = __builtin_bfin_cmplx_mul(__builtin_bfin_compose_2x16((_a).im, (_a).re),\n+\t\t\t       __builtin_bfin_compose_2x16((_b).im, (_b).re));\n+  (r).re = __builtin_bfin_extract_lo(i);\n+  (r).im = __builtin_bfin_extract_hi(i);\n+  return r;\n+}\n+\n+\n+complex_fract16 f(complex_fract16 a, complex_fract16 b) {\n+  return cmlt_fr16(a, b);\n+}"}, {"sha": "fb0a9e16c73153b11920dd8b14cc4a6e66d3c22c", "filename": "gcc/testsuite/gcc.target/bfin/20090914-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1c1dfa24f6239c3d70c901693de65b3390da65/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2F20090914-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1c1dfa24f6239c3d70c901693de65b3390da65/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2F20090914-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2F20090914-3.c?ref=6c1c1dfa24f6239c3d70c901693de65b3390da65", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target bfin-*-* } } */\n+typedef long fract32;\n+main() {\n+  fract32 val_tmp;\n+  fract32 val1 = 0x7FFFFFFF;\n+  fract32 val2 = 0x40000000;\n+  val_tmp = __builtin_bfin_mult_fr1x32x32 (0x06666667, val1);\n+  val2 = __builtin_bfin_mult_fr1x32x32 (0x79999999, val2);\n+  val2 = __builtin_bfin_add_fr1x32 (val_tmp, val2);\n+}"}]}