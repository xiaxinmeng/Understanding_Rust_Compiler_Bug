{"sha": "9390c347e9f2ac5dc3a97933f537c1576a310f4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM5MGMzNDdlOWYyYWM1ZGMzYTk3OTMzZjUzN2MxNTc2YTMxMGY0ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-11-29T01:08:41Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-11-29T01:08:41Z"}, "message": "tree-ssa-operands.c (build_ssa_operands, [...]): Ignore a VIEW_CONVERT_EXPR on LHS when deciding if must or may def.\n\n\tPR/18664\n\t* tree-ssa-operands.c (build_ssa_operands, case MODIFY_EXPR):\n\tIgnore a VIEW_CONVERT_EXPR on LHS when deciding if must or may def.\n\t* tree-ssa-ccp.c (visit_assignment): If LHS is a VIEW_CONVERT_EXPR,\n\tadd an inverse VIEW_CONVERT_EXPR to const_val.\n\nFrom-SVN: r91450", "tree": {"sha": "b482d08649ec8d47fb095b9196547e3f66709af8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b482d08649ec8d47fb095b9196547e3f66709af8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9390c347e9f2ac5dc3a97933f537c1576a310f4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9390c347e9f2ac5dc3a97933f537c1576a310f4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9390c347e9f2ac5dc3a97933f537c1576a310f4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9390c347e9f2ac5dc3a97933f537c1576a310f4e/comments", "author": null, "committer": null, "parents": [{"sha": "ab1a8620fc5bef59dec0bb8b7b41cea4132435d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab1a8620fc5bef59dec0bb8b7b41cea4132435d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab1a8620fc5bef59dec0bb8b7b41cea4132435d5"}], "stats": {"total": 78, "additions": 56, "deletions": 22}, "files": [{"sha": "6472431065dac2e59eca992e4e024b73dc0806a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9390c347e9f2ac5dc3a97933f537c1576a310f4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9390c347e9f2ac5dc3a97933f537c1576a310f4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9390c347e9f2ac5dc3a97933f537c1576a310f4e", "patch": "@@ -1,5 +1,12 @@\n 2004-11-28  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\tPR/18664\n+\t* tree-ssa-operands.c (build_ssa_operands, case MODIFY_EXPR):\n+\tIgnore a VIEW_CONVERT_EXPR on LHS when deciding if must or may def.\n+\t* tree-ssa-ccp.c (visit_assignment): If LHS is a VIEW_CONVERT_EXPR,\n+\tadd an inverse VIEW_CONVERT_EXPR to const_val.\n+\n+\tPR/18657\n \t* tree-nested.c (check_for_nested_with_variably_modified): New.\n \t(create_nesting_tree): Call it.\n "}, {"sha": "911e57350adaa95c5eeb2f9111d8f520a5bc182c", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9390c347e9f2ac5dc3a97933f537c1576a310f4e/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9390c347e9f2ac5dc3a97933f537c1576a310f4e/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=9390c347e9f2ac5dc3a97933f537c1576a310f4e", "patch": "@@ -1053,21 +1053,35 @@ visit_assignment (tree stmt, tree *output_p)\n       val = *nval;\n     }\n   else\n-    {\n-      /* Evaluate the statement.  */\n+    /* Evaluate the statement.  */\n       val = evaluate_stmt (stmt);\n-    }\n \n-  /* FIXME: Hack.  If this was a definition of a bitfield, we need to widen\n+  /* If the original LHS was a VIEW_CONVERT_EXPR, modify the constant\n+     value to be a VIEW_CONVERT_EXPR of the old constant value.  This is\n+     valid because a VIEW_CONVERT_EXPR is valid everywhere an operand of\n+     aggregate type is valid.\n+\n+     ??? Also, if this was a definition of a bitfield, we need to widen\n      the constant value into the type of the destination variable.  This\n      should not be necessary if GCC represented bitfields properly.  */\n   {\n-    tree lhs = TREE_OPERAND (stmt, 0);\n+    tree orig_lhs = TREE_OPERAND (stmt, 0);\n+\n+    if (TREE_CODE (orig_lhs) == VIEW_CONVERT_EXPR\n+\t&& val.lattice_val == CONSTANT)\n+      {\n+\tval.const_val = build1 (VIEW_CONVERT_EXPR,\n+\t\t\t\tTREE_TYPE (TREE_OPERAND (orig_lhs, 0)),\n+\t\t\t\tval.const_val);\n+\torig_lhs = TREE_OPERAND (orig_lhs, 1);\n+      }\n+\n     if (val.lattice_val == CONSTANT\n-\t&& TREE_CODE (lhs) == COMPONENT_REF\n-\t&& DECL_BIT_FIELD (TREE_OPERAND (lhs, 1)))\n+\t&& TREE_CODE (orig_lhs) == COMPONENT_REF\n+\t&& DECL_BIT_FIELD (TREE_OPERAND (orig_lhs, 1)))\n       {\n-\ttree w = widen_bitfield (val.const_val, TREE_OPERAND (lhs, 1), lhs);\n+\ttree w = widen_bitfield (val.const_val, TREE_OPERAND (orig_lhs, 1),\n+\t\t\t\t orig_lhs);\n \n \tif (w && is_gimple_min_invariant (w))\n \t  val.const_val = w;"}, {"sha": "f8d70156aba40369b8ffe8a431d943935f20342d", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9390c347e9f2ac5dc3a97933f537c1576a310f4e/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9390c347e9f2ac5dc3a97933f537c1576a310f4e/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=9390c347e9f2ac5dc3a97933f537c1576a310f4e", "patch": "@@ -893,20 +893,33 @@ build_ssa_operands (tree stmt, stmt_ann_t ann, stmt_operands_p old_ops,\n   switch (code)\n     {\n     case MODIFY_EXPR:\n-      get_expr_operands (stmt, &TREE_OPERAND (stmt, 1), opf_none);\n-      if (TREE_CODE (TREE_OPERAND (stmt, 0)) == ARRAY_REF \n-\t  || TREE_CODE (TREE_OPERAND (stmt, 0)) == ARRAY_RANGE_REF\n-\t  || TREE_CODE (TREE_OPERAND (stmt, 0)) == COMPONENT_REF\n-\t  || TREE_CODE (TREE_OPERAND (stmt, 0)) == REALPART_EXPR\n-\t  || TREE_CODE (TREE_OPERAND (stmt, 0)) == IMAGPART_EXPR\n-\t  /* Use a V_MAY_DEF if the RHS might throw, as the LHS won't be\n-\t     modified in that case.  FIXME we should represent somehow\n-\t     that it is killed on the fallthrough path.  */\n-\t  || tree_could_throw_p (TREE_OPERAND (stmt, 1)))\n-        get_expr_operands (stmt, &TREE_OPERAND (stmt, 0), opf_is_def);\n-      else\n-        get_expr_operands (stmt, &TREE_OPERAND (stmt, 0), \n-\t                   opf_is_def | opf_kill_def);\n+      /* First get operands from the RHS.  For the LHS, we use a V_MAY_DEF if\n+\t either only part of LHS is modified or if the RHS might throw,\n+\t otherwise, use V_MUST_DEF.\n+\n+\t ??? If it might throw, we should represent somehow that it is killed\n+\t on the fallthrough path.  */\n+      {\n+\ttree lhs = TREE_OPERAND (stmt, 0);\n+\tint lhs_flags = opf_is_def;\n+\n+\tget_expr_operands (stmt, &TREE_OPERAND (stmt, 1), opf_none);\n+\n+\t/* If the LHS is a VIEW_CONVERT_EXPR, it isn't changing whether\n+\t   or not the entire LHS is modified; that depends on what's\n+\t   inside the VIEW_CONVERT_EXPR.  */\n+\tif (TREE_CODE (lhs) == VIEW_CONVERT_EXPR)\n+\t  lhs = TREE_OPERAND (lhs, 0);\n+\n+\tif (TREE_CODE (lhs) != ARRAY_REF && TREE_CODE (lhs) != ARRAY_RANGE_REF\n+\t    && TREE_CODE (lhs) != COMPONENT_REF\n+\t    && TREE_CODE (lhs) != BIT_FIELD_REF\n+\t    && TREE_CODE (lhs) != REALPART_EXPR\n+\t    && TREE_CODE (lhs) != IMAGPART_EXPR)\n+\t  lhs_flags |= opf_kill_def;\n+\n+        get_expr_operands (stmt, &TREE_OPERAND (stmt, 0), lhs_flags);\n+      }\n       break;\n \n     case COND_EXPR:"}]}