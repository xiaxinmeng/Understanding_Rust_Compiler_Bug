{"sha": "5125d6d5d76fa59b01ccbb83997ce8ca335a0036", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEyNWQ2ZDVkNzZmYTU5YjAxY2NiYjgzOTk3Y2U4Y2EzMzVhMDAzNg==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T23:22:13Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T23:22:13Z"}, "message": "trans-array.c (gfc_set_loop_bounds_from_array_spec): Loop over the parents.\n\n\t* trans-array.c (gfc_set_loop_bounds_from_array_spec): Loop over the\n\tparents.\n\nFrom-SVN: r180890", "tree": {"sha": "621adb1abbed4edeaeafd27140665a17d920f031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/621adb1abbed4edeaeafd27140665a17d920f031"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5125d6d5d76fa59b01ccbb83997ce8ca335a0036", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5125d6d5d76fa59b01ccbb83997ce8ca335a0036", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5125d6d5d76fa59b01ccbb83997ce8ca335a0036", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5125d6d5d76fa59b01ccbb83997ce8ca335a0036/comments", "author": null, "committer": null, "parents": [{"sha": "2eace29ac3f8879577920f6d863e58fa2f281b59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eace29ac3f8879577920f6d863e58fa2f281b59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eace29ac3f8879577920f6d863e58fa2f281b59"}], "stats": {"total": 78, "additions": 48, "deletions": 30}, "files": [{"sha": "7595d359a8eebe696a41bac56e016ab2f73ef6b3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5125d6d5d76fa59b01ccbb83997ce8ca335a0036/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5125d6d5d76fa59b01ccbb83997ce8ca335a0036/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5125d6d5d76fa59b01ccbb83997ce8ca335a0036", "patch": "@@ -1,3 +1,8 @@\n+2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans-array.c (gfc_set_loop_bounds_from_array_spec): Loop over the\n+\tparents.\n+\n 2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans.h (struct gfc_ss): New field parent."}, {"sha": "83542f668111b5e43261782ef91bcb2377bfdd46", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 43, "deletions": 30, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5125d6d5d76fa59b01ccbb83997ce8ca335a0036/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5125d6d5d76fa59b01ccbb83997ce8ca335a0036/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=5125d6d5d76fa59b01ccbb83997ce8ca335a0036", "patch": "@@ -688,41 +688,54 @@ void\n gfc_set_loop_bounds_from_array_spec (gfc_interface_mapping * mapping,\n \t\t\t\t     gfc_se * se, gfc_array_spec * as)\n {\n-  int n, dim;\n+  int n, dim, total_dim;\n   gfc_se tmpse;\n+  gfc_ss *ss;\n   tree lower;\n   tree upper;\n   tree tmp;\n \n-  if (as && as->type == AS_EXPLICIT)\n-    for (n = 0; n < se->loop->dimen; n++)\n-      {\n-\tdim = se->ss->dim[n];\n-\tgcc_assert (dim < as->rank);\n-\tgcc_assert (se->loop->dimen == as->rank);\n-\tif (se->loop->to[n] == NULL_TREE)\n-\t  {\n-\t    /* Evaluate the lower bound.  */\n-\t    gfc_init_se (&tmpse, NULL);\n-\t    gfc_apply_interface_mapping (mapping, &tmpse, as->lower[dim]);\n-\t    gfc_add_block_to_block (&se->pre, &tmpse.pre);\n-\t    gfc_add_block_to_block (&se->post, &tmpse.post);\n-\t    lower = fold_convert (gfc_array_index_type, tmpse.expr);\n-\n-\t    /* ...and the upper bound.  */\n-\t    gfc_init_se (&tmpse, NULL);\n-\t    gfc_apply_interface_mapping (mapping, &tmpse, as->upper[dim]);\n-\t    gfc_add_block_to_block (&se->pre, &tmpse.pre);\n-\t    gfc_add_block_to_block (&se->post, &tmpse.post);\n-\t    upper = fold_convert (gfc_array_index_type, tmpse.expr);\n-\n-\t    /* Set the upper bound of the loop to UPPER - LOWER.  */\n-\t    tmp = fold_build2_loc (input_location, MINUS_EXPR,\n-\t\t\t\t   gfc_array_index_type, upper, lower);\n-\t    tmp = gfc_evaluate_now (tmp, &se->pre);\n-\t    se->loop->to[n] = tmp;\n-\t  }\n-      }\n+  total_dim = 0;\n+\n+  if (!as || as->type != AS_EXPLICIT)\n+    return;\n+\n+  for (ss = se->ss; ss; ss = ss->parent)\n+    {\n+      total_dim += ss->loop->dimen;\n+      for (n = 0; n < ss->loop->dimen; n++)\n+\t{\n+\t  /* The bound is known, nothing to do.  */\n+\t  if (ss->loop->to[n] != NULL_TREE)\n+\t    continue;\n+\n+\t  dim = ss->dim[n];\n+\t  gcc_assert (dim < as->rank);\n+\t  gcc_assert (ss->loop->dimen <= as->rank);\n+\n+\t  /* Evaluate the lower bound.  */\n+\t  gfc_init_se (&tmpse, NULL);\n+\t  gfc_apply_interface_mapping (mapping, &tmpse, as->lower[dim]);\n+\t  gfc_add_block_to_block (&se->pre, &tmpse.pre);\n+\t  gfc_add_block_to_block (&se->post, &tmpse.post);\n+\t  lower = fold_convert (gfc_array_index_type, tmpse.expr);\n+\n+\t  /* ...and the upper bound.  */\n+\t  gfc_init_se (&tmpse, NULL);\n+\t  gfc_apply_interface_mapping (mapping, &tmpse, as->upper[dim]);\n+\t  gfc_add_block_to_block (&se->pre, &tmpse.pre);\n+\t  gfc_add_block_to_block (&se->post, &tmpse.post);\n+\t  upper = fold_convert (gfc_array_index_type, tmpse.expr);\n+\n+\t  /* Set the upper bound of the loop to UPPER - LOWER.  */\n+\t  tmp = fold_build2_loc (input_location, MINUS_EXPR,\n+\t\t\t\t gfc_array_index_type, upper, lower);\n+\t  tmp = gfc_evaluate_now (tmp, &se->pre);\n+\t  ss->loop->to[n] = tmp;\n+\t}\n+    }\n+\n+  gcc_assert (total_dim == as->rank);\n }\n \n "}]}