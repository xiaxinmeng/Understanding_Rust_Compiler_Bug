{"sha": "2935d9941464d64964a1885f5fcabcb0aa5290e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkzNWQ5OTQxNDY0ZDY0OTY0YTE4ODVmNWZjYWJjYjBhYTUyOTBlNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-01-12T08:36:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-01-12T08:36:24Z"}, "message": "re PR tree-optimization/69168 (ICE in vect_analyze_loop_2, at tree-vect-loop.c:2182)\n\n2016-01-12  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69168\n\t* tree-vect-loop.c (vect_analyze_loop_2): Reset both main and\n\tpattern stmt SLP type.\n\t* tree-vect-slp.c (vect_detect_hybrid_slp_stmts): Patterns may\n\tend up unused so cope with that case.\n\n\t* gcc.dg/torture/pr69168.c: New testcase.\n\nFrom-SVN: r232261", "tree": {"sha": "3282a8496433940cabf7c73d8381b6d2766dc370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3282a8496433940cabf7c73d8381b6d2766dc370"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2935d9941464d64964a1885f5fcabcb0aa5290e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2935d9941464d64964a1885f5fcabcb0aa5290e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2935d9941464d64964a1885f5fcabcb0aa5290e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2935d9941464d64964a1885f5fcabcb0aa5290e5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "96a63869a0aec1257c9e240bfd1af79990263368", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2935d9941464d64964a1885f5fcabcb0aa5290e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2935d9941464d64964a1885f5fcabcb0aa5290e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2935d9941464d64964a1885f5fcabcb0aa5290e5", "patch": "@@ -1,3 +1,11 @@\n+2016-01-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69168\n+\t* tree-vect-loop.c (vect_analyze_loop_2): Reset both main and\n+\tpattern stmt SLP type.\n+\t* tree-vect-slp.c (vect_detect_hybrid_slp_stmts): Patterns may\n+\tend up unused so cope with that case.\n+\n 2016-01-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/69157"}, {"sha": "7829a4e45fcd0c44b965c06e59e1e14a2b557b36", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2935d9941464d64964a1885f5fcabcb0aa5290e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2935d9941464d64964a1885f5fcabcb0aa5290e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2935d9941464d64964a1885f5fcabcb0aa5290e5", "patch": "@@ -1,3 +1,8 @@\n+2016-01-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69168\n+\t* gcc.dg/torture/pr69168.c: New testcase.\n+\n 2016-01-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/69157"}, {"sha": "4f49000450b00517f21305fb4767f6e099982e90", "filename": "gcc/testsuite/gcc.dg/torture/pr69168.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2935d9941464d64964a1885f5fcabcb0aa5290e5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69168.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2935d9941464d64964a1885f5fcabcb0aa5290e5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69168.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69168.c?ref=2935d9941464d64964a1885f5fcabcb0aa5290e5", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+long a, b, e;\n+short *c;\n+int *d;\n+void fn1()\n+{\n+  int i;\n+  for (; e; e--)\n+    {\n+      i = 2;\n+      for (; i; i--)\n+\ta = b = *d++ / (1 << 9);\n+      b = b ? 8 : a;\n+      *c++ = *c++ = b;\n+    }\n+}"}, {"sha": "706a25d2d0d65f87c29ef914c5b00b643b474362", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2935d9941464d64964a1885f5fcabcb0aa5290e5/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2935d9941464d64964a1885f5fcabcb0aa5290e5/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=2935d9941464d64964a1885f5fcabcb0aa5290e5", "patch": "@@ -2189,10 +2189,11 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal)\n \t   !gsi_end_p (si); gsi_next (&si))\n \t{\n \t  stmt_vec_info stmt_info = vinfo_for_stmt (gsi_stmt (si));\n+\t  STMT_SLP_TYPE (stmt_info) = loop_vect;\n \t  if (STMT_VINFO_IN_PATTERN_P (stmt_info))\n \t    {\n-\t      gcc_assert (STMT_SLP_TYPE (stmt_info) == loop_vect);\n \t      stmt_info = vinfo_for_stmt (STMT_VINFO_RELATED_STMT (stmt_info));\n+\t      STMT_SLP_TYPE (stmt_info) = loop_vect;\n \t      for (gimple_stmt_iterator pi\n \t\t     = gsi_start (STMT_VINFO_PATTERN_DEF_SEQ (stmt_info));\n \t\t   !gsi_end_p (pi); gsi_next (&pi))\n@@ -2201,7 +2202,6 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal)\n \t\t  STMT_SLP_TYPE (vinfo_for_stmt (pstmt)) = loop_vect;\n \t\t}\n \t    }\n-\t  STMT_SLP_TYPE (stmt_info) = loop_vect;\n \t}\n     }\n   /* Free optimized alias test DDRS.  */"}, {"sha": "7ad7c127bc584d5d018881bc4de76d174ca0bccd", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2935d9941464d64964a1885f5fcabcb0aa5290e5/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2935d9941464d64964a1885f5fcabcb0aa5290e5/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=2935d9941464d64964a1885f5fcabcb0aa5290e5", "patch": "@@ -2016,10 +2016,10 @@ vect_detect_hybrid_slp_stmts (slp_tree node, unsigned i, slp_vect_type stype)\n     {\n       /* Check if a pure SLP stmt has uses in non-SLP stmts.  */\n       gcc_checking_assert (PURE_SLP_STMT (stmt_vinfo));\n-      /* We always get the pattern stmt here, but for immediate\n-\t uses we have to use the LHS of the original stmt.  */\n-      gcc_checking_assert (!STMT_VINFO_IN_PATTERN_P (stmt_vinfo));\n-      if (STMT_VINFO_RELATED_STMT (stmt_vinfo))\n+      /* If we get a pattern stmt here we have to use the LHS of the\n+         original stmt for immediate uses.  */\n+      if (! STMT_VINFO_IN_PATTERN_P (stmt_vinfo)\n+\t  && STMT_VINFO_RELATED_STMT (stmt_vinfo))\n \tstmt = STMT_VINFO_RELATED_STMT (stmt_vinfo);\n       if (TREE_CODE (gimple_op (stmt, 0)) == SSA_NAME)\n \tFOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, gimple_op (stmt, 0))"}]}