{"sha": "f990f89e90aba1a0123aba9b6cc29827202c2adf", "node_id": "C_kwDOANBUbNoAKGY5OTBmODllOTBhYmExYTAxMjNhYmE5YjZjYzI5ODI3MjAyYzJhZGY", "commit": {"author": {"name": "Emanuele Micheletti", "email": "micheletti.emanuele@hotmail.com", "date": "2023-03-31T10:50:36Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-04-02T21:08:56Z"}, "message": "gccrs: Fix bad cast as a char\n\nIn rust cast to char is allowed only from u8 type.\nThis patch handles fix the case when the type is infered from an integer value,\nallowing only the u8 case'\n\nFixes #2027\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-casts.cc (TypeCastRules::cast_rules):\n\tcase INTEGRAL handles TypeKind::CHAR\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/cast5.rs: New test.\n\nSigned-off-by: Emanuele Micheletti <micheletti.emanuele@hotmail.com>", "tree": {"sha": "3e707ff5d3f5a35a2583adf174ca67b4f0d4e2d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e707ff5d3f5a35a2583adf174ca67b4f0d4e2d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f990f89e90aba1a0123aba9b6cc29827202c2adf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f990f89e90aba1a0123aba9b6cc29827202c2adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f990f89e90aba1a0123aba9b6cc29827202c2adf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f990f89e90aba1a0123aba9b6cc29827202c2adf/comments", "author": {"login": "emanuele-em", "id": 100081325, "node_id": "U_kgDOBfcerQ", "avatar_url": "https://avatars.githubusercontent.com/u/100081325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emanuele-em", "html_url": "https://github.com/emanuele-em", "followers_url": "https://api.github.com/users/emanuele-em/followers", "following_url": "https://api.github.com/users/emanuele-em/following{/other_user}", "gists_url": "https://api.github.com/users/emanuele-em/gists{/gist_id}", "starred_url": "https://api.github.com/users/emanuele-em/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emanuele-em/subscriptions", "organizations_url": "https://api.github.com/users/emanuele-em/orgs", "repos_url": "https://api.github.com/users/emanuele-em/repos", "events_url": "https://api.github.com/users/emanuele-em/events{/privacy}", "received_events_url": "https://api.github.com/users/emanuele-em/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ef39479434ce54879e46926d1ac1c12009c5c07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef39479434ce54879e46926d1ac1c12009c5c07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef39479434ce54879e46926d1ac1c12009c5c07"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "4134a7d107468eb5ac331814790c19e3e073358d", "filename": "gcc/rust/typecheck/rust-casts.cc", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f990f89e90aba1a0123aba9b6cc29827202c2adf/gcc%2Frust%2Ftypecheck%2Frust-casts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f990f89e90aba1a0123aba9b6cc29827202c2adf/gcc%2Frust%2Ftypecheck%2Frust-casts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-casts.cc?ref=f990f89e90aba1a0123aba9b6cc29827202c2adf", "patch": "@@ -64,7 +64,6 @@ TypeCastRules::cast_rules ()\n \n   rust_debug (\"cast_rules from={%s} to={%s}\", from_type->debug_str ().c_str (),\n \t      to.get_ty ()->debug_str ().c_str ());\n-\n   switch (from_type->get_kind ())\n     {\n       case TyTy::TypeKind::INFER: {\n@@ -79,7 +78,21 @@ TypeCastRules::cast_rules ()\n \t  case TyTy::InferType::InferTypeKind::INTEGRAL:\n \t    switch (to.get_ty ()->get_kind ())\n \t      {\n-\t      case TyTy::TypeKind::CHAR:\n+\t\tcase TyTy::TypeKind::CHAR: {\n+\t\t  // only u8 and char\n+\t\t  bool was_uint\n+\t\t    = from.get_ty ()->get_kind () == TyTy::TypeKind::UINT;\n+\t\t  bool was_u8\n+\t\t    = was_uint\n+\t\t      && (static_cast<TyTy::UintType *> (from.get_ty ())\n+\t\t\t    ->get_uint_kind ()\n+\t\t\t  == TyTy::UintType::UintKind::U8);\n+\t\t  if (was_u8)\n+\t\t    return TypeCoercionRules::CoercionResult{\n+\t\t      {}, to.get_ty ()->clone ()};\n+\t\t}\n+\t\tbreak;\n+\n \t      case TyTy::TypeKind::USIZE:\n \t      case TyTy::TypeKind::ISIZE:\n \t      case TyTy::TypeKind::UINT:"}, {"sha": "ecc10c1490a68cc21b62607561dd90ee04b9aae7", "filename": "gcc/testsuite/rust/compile/cast5.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f990f89e90aba1a0123aba9b6cc29827202c2adf/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcast5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f990f89e90aba1a0123aba9b6cc29827202c2adf/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcast5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcast5.rs?ref=f990f89e90aba1a0123aba9b6cc29827202c2adf", "patch": "@@ -0,0 +1,12 @@\n+fn main() {\n+    const A: char = 0x1F888 as char;\n+    // { dg-error \"invalid cast .<integer>. to .char.\" \"\" { target *-*-* } .-1 }\n+    const B: char = 129160 as char;\n+    // { dg-error \"invalid cast .<integer>. to .char.\" \"\" { target *-*-* } .-1 }\n+    const C: i32 = 42;\n+    const D: char = C as char;\n+    // { dg-error \"invalid cast .i32. to .char.\" \"\" { target *-*-* } .-1 }\n+    const E: char = '\\u{01F888}';\n+    const F: u8 = 42; \n+    const G: char= F as char;\n+}"}]}