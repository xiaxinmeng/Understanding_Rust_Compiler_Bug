{"sha": "de09c0ddb81e2dc0e35c2e362532e93ca417200c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUwOWMwZGRiODFlMmRjMGUzNWMyZTM2MjUzMmU5M2NhNDE3MjAwYw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-05-11T19:58:48Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-05-11T19:58:48Z"}, "message": "Replace unreachable code with an assert.\n\nResolves:\nPR middle-end/21433 - The COMPONENT_REF case of expand_expr_real_1 is probably wrong\n\ngcc/ChangeLog:\n\n\tPR middle-end/21433\n\t* expr.c (expand_expr_real_1): Replace unreachable code with an assert.", "tree": {"sha": "bb41e2f9afb5bd60a6a7fd1f6608f318dfdf8d9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb41e2f9afb5bd60a6a7fd1f6608f318dfdf8d9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de09c0ddb81e2dc0e35c2e362532e93ca417200c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de09c0ddb81e2dc0e35c2e362532e93ca417200c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de09c0ddb81e2dc0e35c2e362532e93ca417200c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de09c0ddb81e2dc0e35c2e362532e93ca417200c/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e3fdf3d5217e5a2d075ca399b557b2e886dcd18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e3fdf3d5217e5a2d075ca399b557b2e886dcd18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e3fdf3d5217e5a2d075ca399b557b2e886dcd18"}], "stats": {"total": 57, "additions": 2, "deletions": 55}, "files": [{"sha": "d09ee42e262fdcd0795554391f7d93cfa05f157f", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 55, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de09c0ddb81e2dc0e35c2e362532e93ca417200c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de09c0ddb81e2dc0e35c2e362532e93ca417200c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=de09c0ddb81e2dc0e35c2e362532e93ca417200c", "patch": "@@ -10949,61 +10949,8 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n       goto normal_inner_ref;\n \n     case COMPONENT_REF:\n-      /* If the operand is a CONSTRUCTOR, we can just extract the\n-\t appropriate field if it is present.  */\n-      if (TREE_CODE (treeop0) == CONSTRUCTOR)\n-\t{\n-\t  unsigned HOST_WIDE_INT idx;\n-\t  tree field, value;\n-\t  scalar_int_mode field_mode;\n-\n-\t  FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (treeop0),\n-\t\t\t\t    idx, field, value)\n-\t    if (field == treeop1\n-\t\t/* We can normally use the value of the field in the\n-\t\t   CONSTRUCTOR.  However, if this is a bitfield in\n-\t\t   an integral mode that we can fit in a HOST_WIDE_INT,\n-\t\t   we must mask only the number of bits in the bitfield,\n-\t\t   since this is done implicitly by the constructor.  If\n-\t\t   the bitfield does not meet either of those conditions,\n-\t\t   we can't do this optimization.  */\n-\t\t&& (! DECL_BIT_FIELD (field)\n-\t\t    || (is_int_mode (DECL_MODE (field), &field_mode)\n-\t\t\t&& (GET_MODE_PRECISION (field_mode)\n-\t\t\t    <= HOST_BITS_PER_WIDE_INT))))\n-\t      {\n-\t\tif (DECL_BIT_FIELD (field)\n-\t\t    && modifier == EXPAND_STACK_PARM)\n-\t\t  target = 0;\n-\t\top0 = expand_expr (value, target, tmode, modifier);\n-\t\tif (DECL_BIT_FIELD (field))\n-\t\t  {\n-\t\t    HOST_WIDE_INT bitsize = TREE_INT_CST_LOW (DECL_SIZE (field));\n-\t\t    scalar_int_mode imode\n-\t\t      = SCALAR_INT_TYPE_MODE (TREE_TYPE (field));\n-\n-\t\t    if (TYPE_UNSIGNED (TREE_TYPE (field)))\n-\t\t      {\n-\t\t\top1 = gen_int_mode ((HOST_WIDE_INT_1 << bitsize) - 1,\n-\t\t\t\t\t    imode);\n-\t\t\top0 = expand_and (imode, op0, op1, target);\n-\t\t      }\n-\t\t    else\n-\t\t      {\n-\t\t\tint count = GET_MODE_PRECISION (imode) - bitsize;\n-\n-\t\t\top0 = expand_shift (LSHIFT_EXPR, imode, op0, count,\n-\t\t\t\t\t    target, 0);\n-\t\t\top0 = expand_shift (RSHIFT_EXPR, imode, op0, count,\n-\t\t\t\t\t    target, 0);\n-\t\t      }\n-\t\t  }\n-\n-\t\treturn op0;\n-\t      }\n-\t}\n-      goto normal_inner_ref;\n-\n+      gcc_assert (TREE_CODE (treeop0) != CONSTRUCTOR);\n+      /* Fall through.  */\n     case BIT_FIELD_REF:\n     case ARRAY_RANGE_REF:\n     normal_inner_ref:"}]}