{"sha": "6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFiNTg5ZTBjOWU2ZTExNzY4ZDVkZTFlNmM4M2ZkYmM0ZTRjMTllMg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-10-23T00:09:29Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-10-23T00:09:29Z"}, "message": "arm.c (logical_binary_operator): New fucntion.\n\n\n        * arm.c (logical_binary_operator): New fucntion.\n        * arm.h (logical_binary_operator): Declare it.\n        (PREDICATE_CODES): Handle logical_binary_operator.\n        * arm.md (anddi3, anddi_zesidi_di, anddi_sesdi_di): Use \"#\" for\n        output constraints.  Add appropriate splitters.\n        (anddi_notdi_di, anddi_notzesidi_di, anddi_notsesidi_di): Likewise.\n        (iordi3, iordi_zesidi_di, iordi_sesidi_di): Likewise.\n        (xordi3, xordi_zesidi_di, xordi_sesidi_di): Likewise.\n\nFrom-SVN: r30135", "tree": {"sha": "27be171368390d81204ad970ab1069c4306579a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27be171368390d81204ad970ab1069c4306579a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2/comments", "author": null, "committer": null, "parents": [{"sha": "dfac187e9f168cad1dbc73ebe9757589c6bebb58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfac187e9f168cad1dbc73ebe9757589c6bebb58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfac187e9f168cad1dbc73ebe9757589c6bebb58"}], "stats": {"total": 221, "additions": 208, "deletions": 13}, "files": [{"sha": "de9003a73fd1cf3e5104ef9393f72bc416752711", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2", "patch": "@@ -1,3 +1,14 @@\n+Fri Oct 22 18:05:43 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* arm.c (logical_binary_operator): New fucntion.\n+\t* arm.h (logical_binary_operator): Declare it.\n+\t(PREDICATE_CODES): Handle logical_binary_operator.\n+\t* arm.md (anddi3, anddi_zesidi_di, anddi_sesdi_di): Use \"#\" for\n+\toutput constraints.  Add appropriate splitters.\n+\t(anddi_notdi_di, anddi_notzesidi_di, anddi_notsesidi_di): Likewise.\n+\t(iordi3, iordi_zesidi_di, iordi_sesidi_di): Likewise.\n+\t(xordi3, xordi_zesidi_di, xordi_sesidi_di): Likewise.\n+\n Fri Oct 22 23:46:50 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* genoutput.c (struct operand_data): New elt eliminable."}, {"sha": "5b8497e7de95daca6a4d9288528c9566a12846a5", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2", "patch": "@@ -2366,6 +2366,23 @@ shiftable_operator (x, mode)\n     }\n }\n \n+/* Return TRUE for binary logical operators.  */\n+\n+int\n+logical_binary_operator (x, mode)\n+     rtx x;\n+     enum machine_mode mode;\n+{\n+  if (GET_MODE (x) != mode)\n+    return FALSE;\n+  else\n+    {\n+      enum rtx_code code = GET_CODE (x);\n+\n+      return (code == IOR || code == XOR || code == AND);\n+    }\n+}\n+\n /* Return TRUE for shift operators. */\n \n int"}, {"sha": "47df25d49e5fb166b66156c4506893cda8c0795c", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2", "patch": "@@ -1960,6 +1960,7 @@ extern struct rtx_def * arm_compare_op1;\n   {\"reg_or_int_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"multi_register_push\", {PARALLEL}},\t\t\t\t\t\\\n   {\"cc_register\", {REG}},\t\t\t\t\t\t\\\n+  {\"logical_binary_operator\", {AND, IOR, XOR}},\t\t\t\t\\\n   {\"dominant_cc_register\", {REG}},\n \n \f\n@@ -2262,6 +2263,7 @@ int    soft_df_operand PROTO ((Rtx, Mmode));\n int    index_operand PROTO ((Rtx, Mmode));\n int    const_shift_operand PROTO ((Rtx, Mmode));\n int    shiftable_operator PROTO ((Rtx, Mmode));\n+int    logical_binary_operator PROTO ((Rtx, Mmode));\n int    shift_operator PROTO ((Rtx, Mmode));\n int    equality_operator PROTO ((Rtx, Mmode));\n int    minmax_operator PROTO ((Rtx, Mmode));"}, {"sha": "30673bbb4bd0435262c791ab7ae2fd2b8b2128a3", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 178, "deletions": 13, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=6ab589e0c9e6e11768d5de1e6c83fdbc4e4c19e2", "patch": "@@ -1090,12 +1090,177 @@\n \f\n ;; Boolean and,ior,xor insns\n \n+;; Split up double word logical operations\n+\n+;; Split up simple DImode logical operations.  Simply perform the logical\n+;; operation on the upper and lower halves of the registers.\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(match_operator:DI 6 \"logical_binary_operator\"\n+\t  [(match_operand:DI 1 \"s_register_operand\" \"\")\n+\t   (match_operand:DI 2 \"s_register_operand\" \"\")]))]\n+  \"reload_completed\"\n+  [(set (match_dup 0) (match_op_dup:SI 6 [(match_dup 1) (match_dup 2)]))\n+   (set (match_dup 3) (match_op_dup:SI 6 [(match_dup 4) (match_dup 5)]))]\n+  \"\n+{\n+  operands[3] = gen_highpart (SImode, operands[0]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[4] = gen_highpart (SImode, operands[1]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[5] = gen_highpart (SImode, operands[2]);\n+  operands[2] = gen_lowpart (SImode, operands[2]);\n+}\")\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(not:DI (match_operand:DI 1 \"s_register_operand\" \"\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 0) (not:SI (match_dup 1)))\n+   (set (match_dup 2) (not:SI (match_dup 3)))]\n+  \"\n+{\n+  operands[2] = gen_highpart (SImode, operands[0]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[3] = gen_highpart (SImode, operands[1]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+}\")\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(and:DI\n+\t  (not:DI (match_operand:DI 1 \"s_register_operand\" \"\"))\n+\t  (match_operand:DI 2 \"s_register_operand\" \"\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 0) (and:SI (not:SI (match_dup 1)) (match_dup 2)))\n+   (set (match_dup 3) (and:SI (not:SI (match_dup 4)) (match_dup 5)))]\n+  \"\n+{\n+  operands[3] = gen_highpart (SImode, operands[0]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[4] = gen_highpart (SImode, operands[1]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[5] = gen_highpart (SImode, operands[2]);\n+  operands[2] = gen_lowpart (SImode, operands[2]);\n+}\")\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(match_operator:DI 6 \"logical_binary_operator\"\n+\t  [(sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\"))\n+\t   (match_operand:DI 1 \"s_register_operand\" \"\")]))]\n+  \"reload_completed\"\n+  [(set (match_dup 0) (match_op_dup:SI 6 [(match_dup 1) (match_dup 2)]))\n+   (set (match_dup 3) (match_op_dup:SI 6\n+\t\t\t[(ashiftrt:SI (match_dup 2) (const_int 31))\n+\t\t\t (match_dup 4)]))]\n+  \"\n+{\n+  operands[3] = gen_highpart (SImode, operands[0]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[4] = gen_highpart (SImode, operands[1]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[5] = gen_highpart (SImode, operands[2]);\n+  operands[2] = gen_lowpart (SImode, operands[2]);\n+}\")\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(and:DI (not:DI (sign_extend:DI\n+\t\t\t(match_operand:SI 2 \"s_register_operand\" \"\")))\n+\t\t(match_operand:DI 1 \"s_register_operand\" \"\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 0) (and:SI (not:SI (match_dup 1)) (match_dup 2)))\n+   (set (match_dup 3) (and:SI (not:SI\n+\t\t\t\t(ashiftrt:SI (match_dup 2) (const_int 31)))\n+\t\t\t       (match_dup 4)))]\n+  \"\n+{\n+  operands[3] = gen_highpart (SImode, operands[0]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[4] = gen_highpart (SImode, operands[1]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_lowpart (SImode, operands[2]);\n+}\")\n+\n+;; The zero extend of operand 2 clears the high word of the output\n+;; operand.\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(and:DI\n+\t  (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\"))\n+\t  (match_operand:DI 1 \"s_register_operand\" \"\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 0) (and:SI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 3) (const_int 0))]\n+  \"\n+{\n+  operands[3] = gen_highpart (SImode, operands[0]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+}\")\n+\n+;; The zero extend of operand 2 means we can just copy the high part of\n+;; operand1 into operand0.\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(ior:DI\n+\t  (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\"))\n+\t  (match_operand:DI 1 \"s_register_operand\" \"\")))]\n+  \"operands[0] != operands[1] && reload_completed\"\n+  [(set (match_dup 0) (ior:SI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 3) (match_dup 4))]\n+  \"\n+{\n+  operands[4] = gen_highpart (SImode, operands[1]);\n+  operands[3] = gen_highpart (SImode, operands[0]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+}\")\n+\n+;; The zero extend of operand 2 means we can just copy the high part of\n+;; operand1 into operand0.\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(xor:DI\n+\t  (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\"))\n+\t  (match_operand:DI 1 \"s_register_operand\" \"\")))]\n+  \"operands[0] != operands[1] && reload_completed\"\n+  [(set (match_dup 0) (xor:SI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 3) (match_dup 4))]\n+  \"\n+{\n+  operands[4] = gen_highpart (SImode, operands[1]);\n+  operands[3] = gen_highpart (SImode, operands[0]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+}\")\n+\n+;; (not (zero_extend ...)) allows us to just copy the high word from\n+;; operand1 to operand0.\n+(define_split\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+\t(and:DI (not:DI (zero_extend:DI\n+\t\t\t(match_operand:SI 2 \"s_register_operand\" \"\")))\n+\t\t(match_operand:DI 1 \"s_register_operand\" \"\")))]\n+  \"operands[0] != operands[1] && reload_completed\"\n+  [(set (match_dup 0) (and:SI (not:SI (match_dup 1)) (match_dup 2)))\n+   (set (match_dup 3) (match_dup 4))]\n+  \"\n+{\n+  operands[3] = gen_highpart (SImode, operands[0]);\n+  operands[0] = gen_lowpart (SImode, operands[0]);\n+  operands[4] = gen_highpart (SImode, operands[1]);\n+  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[2] = gen_lowpart (SImode, operands[2]);\n+}\")\n+\n (define_insn \"anddi3\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(and:DI (match_operand:DI 1 \"s_register_operand\" \"%0,0\")\n \t\t(match_operand:DI 2 \"s_register_operand\" \"r,0\")))]\n   \"\"\n-  \"and%?\\\\t%Q0, %Q1, %Q2\\;and%?\\\\t%R0, %R1, %R2\"\n+  \"#\"\n [(set_attr \"length\" \"8\")])\n \n (define_insn \"*anddi_zesidi_di\"\n@@ -1104,7 +1269,7 @@\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n \t\t(match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n   \"\"\n-  \"and%?\\\\t%Q0, %Q1, %2\\;mov%?\\\\t%R0, #0\"\n+  \"#\"\n [(set_attr \"length\" \"8\")])\n \n (define_insn \"*anddi_sesdi_di\"\n@@ -1113,7 +1278,7 @@\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n \t\t(match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n   \"\"\n-  \"and%?\\\\t%Q0, %Q1, %2\\;and%?\\\\t%R0, %R1, %2, asr #31\"\n+  \"#\"\n [(set_attr \"length\" \"8\")])\n \n (define_expand \"andsi3\"\n@@ -1374,7 +1539,7 @@\n \t(and:DI (not:DI (match_operand:DI 2 \"s_register_operand\" \"r,0\"))\n \t\t(match_operand:DI 1 \"s_register_operand\" \"0,r\")))]\n   \"\"\n-  \"bic%?\\\\t%Q0, %Q1, %Q2\\;bic%?\\\\t%R0, %R1, %R2\"\n+  \"#\"\n [(set_attr \"length\" \"8\")])\n   \n (define_insn \"*anddi_notzesidi_di\"\n@@ -1385,7 +1550,7 @@\n   \"\"\n   \"@\n    bic%?\\\\t%Q0, %Q1, %2\n-   bic%?\\\\t%Q0, %Q1, %2\\;mov%?\\\\t%R0, %R1\"\n+   #\"\n [(set_attr \"length\" \"4,8\")])\n   \n (define_insn \"*anddi_notsesidi_di\"\n@@ -1394,7 +1559,7 @@\n \t\t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\")))\n \t\t(match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n   \"\"\n-  \"bic%?\\\\t%Q0, %Q1, %2\\;bic%?\\\\t%R0, %R1, %2, asr #31\"\n+  \"#\"\n [(set_attr \"length\" \"8\")])\n   \n (define_insn \"andsi_notsi_si\"\n@@ -1441,7 +1606,7 @@\n \t(ior:DI (match_operand:DI 1 \"s_register_operand\" \"%0\")\n \t\t(match_operand:DI 2 \"s_register_operand\" \"r\")))]\n   \"\"\n-  \"orr%?\\\\t%Q0, %Q1, %Q2\\;orr%?\\\\t%R0, %R1, %R2\"\n+  \"#\"\n [(set_attr \"length\" \"8\")])\n \n (define_insn \"*iordi_zesidi_di\"\n@@ -1452,7 +1617,7 @@\n   \"\"\n   \"@\n    orr%?\\\\t%Q0, %Q1, %2\n-   orr%?\\\\t%Q0, %Q1, %2\\;mov%?\\\\t%R0, %R1\"\n+   #\"\n [(set_attr \"length\" \"4,8\")])\n \n (define_insn \"*iordi_sesidi_di\"\n@@ -1461,7 +1626,7 @@\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n \t\t(match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n   \"\"\n-  \"orr%?\\\\t%Q0, %Q1, %2\\;orr%?\\\\t%R0, %R1, %2, asr #31\"\n+  \"#\"\n [(set_attr \"length\" \"8\")])\n \n (define_expand \"iorsi3\"\n@@ -1528,7 +1693,7 @@\n \t(xor:DI (match_operand:DI 1 \"s_register_operand\" \"%0,0\")\n \t\t(match_operand:DI 2 \"s_register_operand\" \"r,0\")))]\n   \"\"\n-  \"eor%?\\\\t%Q0, %Q1, %Q2\\;eor%?\\\\t%R0, %R1, %R2\"\n+  \"#\"\n [(set_attr \"length\" \"8\")])\n \n (define_insn \"*xordi_zesidi_di\"\n@@ -1539,7 +1704,7 @@\n   \"\"\n   \"@\n    eor%?\\\\t%Q0, %Q1, %2\n-   eor%?\\\\t%Q0, %Q1, %2\\;mov%?\\\\t%R0, %R1\"\n+   #\"\n [(set_attr \"length\" \"4,8\")])\n \n (define_insn \"*xordi_sesidi_di\"\n@@ -1548,7 +1713,7 @@\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n \t\t(match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n   \"\"\n-  \"eor%?\\\\t%Q0, %Q1, %2\\;eor%?\\\\t%R0, %R1, %2, asr #31\"\n+  \"#\"\n [(set_attr \"length\" \"8\")])\n \n (define_insn \"xorsi3\"\n@@ -2035,7 +2200,7 @@\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(not:DI (match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n   \"\"\n-  \"mvn%?\\\\t%Q0, %Q1\\;mvn%?\\\\t%R0, %R1\"\n+  \"#\"\n [(set_attr \"length\" \"8\")])\n \n (define_insn \"one_cmplsi2\""}]}