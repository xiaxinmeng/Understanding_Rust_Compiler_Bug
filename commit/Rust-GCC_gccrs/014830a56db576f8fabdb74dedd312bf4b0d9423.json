{"sha": "014830a56db576f8fabdb74dedd312bf4b0d9423", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE0ODMwYTU2ZGI1NzZmOGZhYmRiNzRkZWRkMzEyYmY0YjBkOTQyMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-10-09T18:13:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-10-09T18:13:13Z"}, "message": "(mark_target_live_regs): Fix bug in last change.\n\nFrom-SVN: r2385", "tree": {"sha": "9e3f79bdda9710fe6e183c8e07c15490391cbbd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e3f79bdda9710fe6e183c8e07c15490391cbbd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/014830a56db576f8fabdb74dedd312bf4b0d9423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/014830a56db576f8fabdb74dedd312bf4b0d9423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/014830a56db576f8fabdb74dedd312bf4b0d9423", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/014830a56db576f8fabdb74dedd312bf4b0d9423/comments", "author": null, "committer": null, "parents": [{"sha": "9d790a4f7376d202702a505f3199d221df73bbcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d790a4f7376d202702a505f3199d221df73bbcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d790a4f7376d202702a505f3199d221df73bbcc"}], "stats": {"total": 16, "additions": 3, "deletions": 13}, "files": [{"sha": "4a87e40b8eb9166e58856a90362679718f44c20a", "filename": "gcc/reorg.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014830a56db576f8fabdb74dedd312bf4b0d9423/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014830a56db576f8fabdb74dedd312bf4b0d9423/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=014830a56db576f8fabdb74dedd312bf4b0d9423", "patch": "@@ -2171,20 +2171,10 @@ mark_target_live_regs (target, res)\n \t  if (GET_CODE (PATTERN (insn)) == USE)\n \t    {\n \t      /* If INSN is a USE made by update_block, we care about the\n-\t\t underlying insn.  Any registers set or referenced by the\n-\t\t underlying insn should be treated as if the insn were\n-\t\t located here without the USE.  */\n+\t\t underlying insn.  Any registers set by the underlying insn\n+\t\t are live since the insn is being done somewhere else.  */\n \t      if (GET_RTX_CLASS (GET_CODE (XEXP (PATTERN (insn), 0))) == 'i')\n-\t\t{\n-\t\t  rtx inner = XEXP (PATTERN (insn), 0);\n-\n-\t\t  mark_referenced_resources (inner, &needed, 1);\n-\t\t  mark_set_resources (inner, &set, 0, 1);\n-\n-\t\t  COPY_HARD_REG_SET (scratch, set.regs);\n-\t\t  AND_COMPL_HARD_REG_SET (scratch, needed.regs);\n-\t\t  AND_COMPL_HARD_REG_SET (res->regs, scratch);\n-\t\t}\n+\t\tmark_set_resources (XEXP (PATTERN (insn), 0), res, 0, 1);\n \n \t      /* All other USE insns are to be ignored.  */\n \t      continue;"}]}