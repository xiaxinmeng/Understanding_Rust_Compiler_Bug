{"sha": "38ef8ebee3938a622889f818d417de171cdb8a77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhlZjhlYmVlMzkzOGE2MjI4ODlmODE4ZDQxN2RlMTcxY2RiOGE3Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-12T12:37:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-12T12:37:50Z"}, "message": "[multiple changes]\n\n2010-10-12  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch6.adb (New_Overloaded_Entity): Add missing decoration of\n\tattribute Overridden_Operation in predefined dispatching primitives. \n\n2010-10-12  Emmanuel Briot  <briot@adacore.com>\n\n\t* g-comlin.adb, g-comlin.ads (Add_Switch): Raise an exception when a\n\tcommand line configuration exists and we specify an invalid section.\n\nFrom-SVN: r165368", "tree": {"sha": "527a9ec026717a6c42fcbc9fe50eab2285462cfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/527a9ec026717a6c42fcbc9fe50eab2285462cfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38ef8ebee3938a622889f818d417de171cdb8a77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38ef8ebee3938a622889f818d417de171cdb8a77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38ef8ebee3938a622889f818d417de171cdb8a77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38ef8ebee3938a622889f818d417de171cdb8a77/comments", "author": null, "committer": null, "parents": [{"sha": "3c971dccec51bcf44a3e18c118ddb975baeb5762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c971dccec51bcf44a3e18c118ddb975baeb5762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c971dccec51bcf44a3e18c118ddb975baeb5762"}], "stats": {"total": 138, "additions": 101, "deletions": 37}, "files": [{"sha": "286312630a0227aa20fd117dad2ff3bfc76a64aa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38ef8ebee3938a622889f818d417de171cdb8a77/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38ef8ebee3938a622889f818d417de171cdb8a77/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=38ef8ebee3938a622889f818d417de171cdb8a77", "patch": "@@ -1,3 +1,13 @@\n+2010-10-12  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch6.adb (New_Overloaded_Entity): Add missing decoration of\n+\tattribute Overridden_Operation in predefined dispatching primitives. \n+\n+2010-10-12  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* g-comlin.adb, g-comlin.ads (Add_Switch): Raise an exception when a\n+\tcommand line configuration exists and we specify an invalid section.\n+\n 2010-10-12  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch6.adb (Process_PPCs): Fix error in inheriting Pre'Class when no"}, {"sha": "1de44178ada44386d25fbd03ceb24627df169fa9", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38ef8ebee3938a622889f818d417de171cdb8a77/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38ef8ebee3938a622889f818d417de171cdb8a77/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=38ef8ebee3938a622889f818d417de171cdb8a77", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1755,7 +1755,21 @@ package body GNAT.Command_Line is\n \n    --  Start of processing for Add_Switch\n \n+      Section_Valid : Boolean := False;\n    begin\n+      if Section /= \"\" and then Cmd.Config /= null then\n+         for S in Cmd.Config.Sections'Range loop\n+            if Section = Cmd.Config.Sections (S).all then\n+               Section_Valid := True;\n+               exit;\n+            end if;\n+         end loop;\n+\n+         if not Section_Valid then\n+            raise Invalid_Section;\n+         end if;\n+      end if;\n+\n       Success := False;\n       Add_Simple_Switches (Cmd, Switch, Parameter);\n       Free (Cmd.Coalesce);\n@@ -2252,7 +2266,7 @@ package body GNAT.Command_Line is\n    procedure Start\n      (Cmd      : in out Command_Line;\n       Iter     : in out Command_Line_Iterator;\n-      Expanded : Boolean)\n+      Expanded : Boolean := False)\n    is\n    begin\n       if Cmd.Expanded = null then"}, {"sha": "d760a8109120e25939d0f6cb265048bd8d8a534e", "filename": "gcc/ada/g-comlin.ads", "status": "modified", "additions": 64, "deletions": 29, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38ef8ebee3938a622889f818d417de171cdb8a77/gcc%2Fada%2Fg-comlin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38ef8ebee3938a622889f818d417de171cdb8a77/gcc%2Fada%2Fg-comlin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.ads?ref=38ef8ebee3938a622889f818d417de171cdb8a77", "patch": "@@ -33,8 +33,9 @@\n \n --  High level package for command line parsing and manipulation\n \n---  Parsing the command line\n---  ========================\n+--------------------------------------\n+--  Simple parsing of the command line\n+--------------------------------------\n \n --  This package provides an interface for parsing command line arguments,\n --  when they are either read from Ada.Command_Line or read from a string list.\n@@ -81,6 +82,10 @@\n --     when Invalid_Parameter => Put_Line (\"No parameter for \" & Full_Switch);\n --  end;\n \n+-------------\n+--  Sections\n+-------------\n+\n --  A more complicated example would involve the use of sections for the\n --  switches, as for instance in gnatmake. The same command line is used to\n --  provide switches for several tools. Each tool recognizes its switches by\n@@ -106,6 +111,10 @@\n --     end loop;\n --  end;\n \n+------------------------------\n+--  Parsing a list of strings\n+------------------------------\n+\n --  The examples above show how to parse the command line when the arguments\n --  are read directly from Ada.Command_Line. However, these arguments can also\n --  be read from a list of strings. This can be useful in several contexts,\n@@ -132,9 +141,10 @@\n --     end loop;\n --     Free (Parser);\n --  end;\n---\n+\n+----------------------------------------------\n --  Creating and manipulating the command line\n---  ===========================================\n+----------------------------------------------\n \n --  This package provides mechanisms to create and modify command lines by\n --  adding or removing arguments from them. The resulting command line is kept\n@@ -204,13 +214,14 @@\n \n --  This is done by passing an extra argument to Add_Switch, as in:\n \n---     Add_Switch (Cmd, \"-foo\", \"arg1\");\n+--     Add_Switch (Cmd, \"-foo\", Parameter => \"arg1\");\n \n --  This ensures that \"arg1\" will always be treated as the argument to -foo,\n --  and will not be grouped with other parts of the command line.\n \n+---------------------------------------------------\n --  Parsing the command line with grouped arguments\n---  ===============================================\n+---------------------------------------------------\n \n --  The command line construction facility can also be used in conjunction with\n --  Getopt to interpret a command line. For example when implementing the tool\n@@ -230,8 +241,10 @@\n \n --      Start (Cmd, Iter, Expanded => True);\n --      while Has_More (Iter) loop\n---        if Current_Switch (Iter) = \"-gnatwu\" then ..\n---        elsif Current_Switch (Iter) = \"-gnatwv\" then ...\n+--        if Current_Switch (Iter) = \"-gnatwu\" then\n+--           ...\n+--        elsif Current_Switch (Iter) = \"-gnatwv\" then\n+--           ...\n --        end if;\n --        Next (Iter);\n --      end loop;\n@@ -444,6 +457,24 @@ package GNAT.Command_Line is\n    --  the parameter were concatenated. A space is returned if the switch and\n    --  its argument were in two separate arguments.\n \n+   Invalid_Section : exception;\n+   --  Raised when an invalid section is selected by Goto_Section\n+\n+   Invalid_Switch : exception;\n+   --  Raised when an invalid switch is detected in the command line\n+\n+   Invalid_Parameter : exception;\n+   --  Raised when a parameter is missing, or an attempt is made to obtain a\n+   --  parameter for a switch that does not allow a parameter\n+\n+   -----------------------------------------\n+   -- Expansion of command line arguments --\n+   -----------------------------------------\n+   --  These subprograms take care of of expanding globbing patterns on the\n+   --  command line. On Unix, such expansion is done by the shell before your\n+   --  application is called. But on Windows you must do this expansion\n+   --  yourself.\n+\n    type Expansion_Iterator is limited private;\n    --  Type used during expansion of file names\n \n@@ -475,19 +506,16 @@ package GNAT.Command_Line is\n    --  If Expansion is called again after an empty string has been returned,\n    --  then the exception GNAT.Directory_Operations.Directory_Error is raised.\n \n-   Invalid_Section : exception;\n-   --  Raised when an invalid section is selected by Goto_Section\n-\n-   Invalid_Switch : exception;\n-   --  Raised when an invalid switch is detected in the command line\n-\n-   Invalid_Parameter : exception;\n-   --  Raised when a parameter is missing, or an attempt is made to obtain a\n-   --  parameter for a switch that does not allow a parameter\n-\n    -----------------\n    -- Configuring --\n    -----------------\n+   --  The following subprograms are used to manipulate a command line\n+   --  represented as a string (for instance \"-g -O2\"), as well as parsing\n+   --  the switches from such a string. They provide high-level configurations\n+   --  to define aliases (a switch is equivalent to one or more other switches)\n+   --  or grouping of switches (\"-gnatyac\" is equivalent to \"-gnatya\" and\n+   --  \"-gnatyc\").\n+   --  See the top of this file for examples on how to use these subprograms\n \n    type Command_Line_Configuration is private;\n \n@@ -499,9 +527,6 @@ package GNAT.Command_Line is\n    --  be expanded as Expanded. For instance, for the GNAT compiler switches,\n    --  we would define \"-gnatwa\" as an alias for \"-gnatwcfijkmopruvz\", ie some\n    --  default warnings to be activated.\n-   --\n-   --  Likewise, in some context you could define \"--verbose\" as an alias for\n-   --  (\"-v\", \"--full\"), ie two switches.\n \n    procedure Define_Prefix\n      (Config   : in out Command_Line_Configuration;\n@@ -537,20 +562,25 @@ package GNAT.Command_Line is\n    procedure Free (Config : in out Command_Line_Configuration);\n    --  Free the memory used by Config\n \n-   -------------\n-   -- Editing --\n-   -------------\n+   ------------------------------\n+   -- Generating command lines --\n+   ------------------------------\n+   --  Once the command line configuration has been created, you can build your\n+   --  own command line. This will be done in general because you need to spawn\n+   --  external tools from your application.\n+   --  Although it could be done by concatenating strings, the following\n+   --  subprograms will properly take care of grouping switches when possible,\n+   --  so as to keep the command line as short as possible. They also provide a\n+   --  way to remove a switch from an existing command line.\n \n    type Command_Line is private;\n \n    procedure Set_Configuration\n      (Cmd    : in out Command_Line;\n       Config : Command_Line_Configuration);\n-   --  Set the configuration for this command line\n-\n    function Get_Configuration\n      (Cmd : Command_Line) return Command_Line_Configuration;\n-   --  Return the configuration used for that command line\n+   --  Set or retrieve the configuration used for that command line\n \n    procedure Set_Command_Line\n      (Cmd                : in out Command_Line;\n@@ -608,7 +638,10 @@ package GNAT.Command_Line is\n    --  If the switch is part of a section, then it should be specified so that\n    --  the switch is correctly placed in the command line, and the section\n    --  added if not already present. For example, to add the -g switch into the\n-   --  -cargs section, you need to pass (Cmd, \"-g\", Section => \"-cargs\").\n+   --  -cargs section, you need to call (Cmd, \"-g\", Section => \"-cargs\").\n+   --\n+   --  Invalid_Section is raised if Section was not defined in the\n+   --  configuration of the command line.\n    --\n    --  Add_Before allows insertion of the switch at the beginning of the\n    --  command line.\n@@ -672,13 +705,15 @@ package GNAT.Command_Line is\n    ---------------\n    -- Iteration --\n    ---------------\n+   --  When a command line was created with the above, you can then iterate\n+   --  over its contents using the following iterator.\n \n    type Command_Line_Iterator is private;\n \n    procedure Start\n      (Cmd      : in out Command_Line;\n       Iter     : in out Command_Line_Iterator;\n-      Expanded : Boolean);\n+      Expanded : Boolean := False);\n    --  Start iterating over the command line arguments. If Expanded is true,\n    --  then the arguments are not grouped and no alias is used. For instance,\n    --  \"-gnatwv\" and \"-gnatwu\" would be returned instead of \"-gnatwuv\"."}, {"sha": "d3e5e56b539104a48f0ba91aca2292c0b850ca64", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38ef8ebee3938a622889f818d417de171cdb8a77/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38ef8ebee3938a622889f818d417de171cdb8a77/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=38ef8ebee3938a622889f818d417de171cdb8a77", "patch": "@@ -8103,12 +8103,13 @@ package body Sem_Ch6 is\n                      Check_Overriding_Indicator (S, E, Is_Primitive => True);\n \n                      --  If S is a user-defined subprogram or a null procedure\n-                     --  expanded to override an inherited null procedure, then\n-                     --  indicate that E overrides the operation from which S\n-                     --  is inherited. It seems odd that Overridden_Operation\n-                     --  isn't set in all cases where Is_Overriding_Operation\n-                     --  is true, but doing so causes infinite loops in the\n-                     --  compiler for implicit overriding subprograms. ???\n+                     --  expanded to override an inherited null procedure, or a\n+                     --  predefined dispatching primitive then indicate that E\n+                     --  overrides the operation from which S is inherited. It\n+                     --  seems odd that Overridden_Operation isn't set in all\n+                     --  cases where Is_Overriding_Operation is true, but doing\n+                     --  so causes infinite loops in the compiler for implicit\n+                     --  overriding subprograms. ???\n \n                      if Comes_From_Source (S)\n                        or else\n@@ -8117,6 +8118,10 @@ package body Sem_Ch6 is\n                              Nkind (Parent (S)) = N_Procedure_Specification\n                            and then\n                              Null_Present (Parent (S)))\n+                       or else\n+                         (Present (Alias (E))\n+                            and then\n+                          Is_Predefined_Dispatching_Operation (Alias (E)))\n                      then\n                         if Present (Alias (E)) then\n                            Set_Overridden_Operation (S, Alias (E));"}]}