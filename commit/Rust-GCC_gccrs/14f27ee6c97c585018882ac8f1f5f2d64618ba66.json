{"sha": "14f27ee6c97c585018882ac8f1f5f2d64618ba66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRmMjdlZTZjOTdjNTg1MDE4ODgyYWM4ZjFmNWYyZDY0NjE4YmE2Ng==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-04-13T09:28:01Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-04-13T09:47:26Z"}, "message": "MSP430: Fix memory offsets used by %C and %D asm output operand modifiers\n\nThe %C and %D operand modifiers are supposed to access the 3rd and 4th\nwords of a 64-bit value, so for memory references they need to offset\nthe given address by 4 and 6 bytes respectively.\n\ngcc/ChangeLog:\n\n2020-04-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* config/msp430/msp430.c (msp430_print_operand): Offset a %C memory\n\treference by 4 bytes, and %D memory reference by 6 bytes.\n\ngcc/testsuite/ChangeLog:\n\n2020-04-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* gcc.target/msp430/operand-modifiers.c: New test.", "tree": {"sha": "d86d20c6c095b1b8aaf3bdce6bd52a04c1c5f490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d86d20c6c095b1b8aaf3bdce6bd52a04c1c5f490"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14f27ee6c97c585018882ac8f1f5f2d64618ba66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f27ee6c97c585018882ac8f1f5f2d64618ba66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14f27ee6c97c585018882ac8f1f5f2d64618ba66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f27ee6c97c585018882ac8f1f5f2d64618ba66/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1ccbae63cdf25b8ff66da18ed0d081cb9411ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ccbae63cdf25b8ff66da18ed0d081cb9411ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1ccbae63cdf25b8ff66da18ed0d081cb9411ccf"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "c0ac32dccf6e11c7994d08272ddd509f492bfdc3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f27ee6c97c585018882ac8f1f5f2d64618ba66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f27ee6c97c585018882ac8f1f5f2d64618ba66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14f27ee6c97c585018882ac8f1f5f2d64618ba66", "patch": "@@ -1,3 +1,8 @@\n+2020-04-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.c (msp430_print_operand): Offset a %C memory\n+\treference by 4 bytes, and %D memory reference by 6 bytes.\n+\n 2020-04-11  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/94494"}, {"sha": "96532740ac15b031a1e42799f0b67396f1be83c0", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f27ee6c97c585018882ac8f1f5f2d64618ba66/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f27ee6c97c585018882ac8f1f5f2d64618ba66/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=14f27ee6c97c585018882ac8f1f5f2d64618ba66", "patch": "@@ -3492,7 +3492,7 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n       switch (GET_CODE (op))\n \t{\n \tcase MEM:\n-\t  op = adjust_address (op, Pmode, 3);\n+\t  op = adjust_address (op, Pmode, 4);\n \t  break;\n \tcase REG:\n \t  op = gen_rtx_REG (Pmode, REGNO (op) + 2);\n@@ -3510,7 +3510,7 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n       switch (GET_CODE (op))\n \t{\n \tcase MEM:\n-\t  op = adjust_address (op, Pmode, 4);\n+\t  op = adjust_address (op, Pmode, 6);\n \t  break;\n \tcase REG:\n \t  op = gen_rtx_REG (Pmode, REGNO (op) + 3);"}, {"sha": "b1f232ec0e623556d10d1ea21f85053ee6bf959e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f27ee6c97c585018882ac8f1f5f2d64618ba66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f27ee6c97c585018882ac8f1f5f2d64618ba66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14f27ee6c97c585018882ac8f1f5f2d64618ba66", "patch": "@@ -1,3 +1,7 @@\n+2020-04-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* gcc.target/msp430/operand-modifiers.c: New test.\n+\n 2020-04-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/94091"}, {"sha": "ad0a53108394e740ecb6d46babfdd55ddc42cde8", "filename": "gcc/testsuite/gcc.target/msp430/operand-modifiers.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f27ee6c97c585018882ac8f1f5f2d64618ba66/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Foperand-modifiers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f27ee6c97c585018882ac8f1f5f2d64618ba66/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Foperand-modifiers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Foperand-modifiers.c?ref=14f27ee6c97c585018882ac8f1f5f2d64618ba66", "patch": "@@ -0,0 +1,30 @@\n+volatile unsigned long si = 0x89abcdef;\n+volatile unsigned long long di = 0xfedcba9876543210;\n+\n+unsigned int a, b, c, d;\n+\n+int\n+main (void)\n+{\n+  /* Check that %A and %B extract the low and high words of a 32-bit value,\n+     respectively.  */\n+  __asm__(\"mov %A1, %0\\n\" : \"=m\" (a) : \"m\" (si));\n+  __asm__(\"mov %B1, %0\\n\" : \"=m\" (b) : \"m\" (si));\n+  if (a != ((unsigned)si)\n+      || b != ((unsigned)(si >> 16)))\n+    return 1;\n+\n+  /* Check that %A, %B, %C and %D extract the 1st, 2nd, 3rd and 4th words of a\n+     64-bit value, respectively.  */\n+  __asm__(\"mov %A1, %0\\n\" : \"=m\" (a) : \"m\" (di));\n+  __asm__(\"mov %B1, %0\\n\" : \"=m\" (b) : \"m\" (di));\n+  __asm__(\"mov %C1, %0\\n\" : \"=m\" (c) : \"m\" (di));\n+  __asm__(\"mov %D1, %0\\n\" : \"=m\" (d) : \"m\" (di));\n+  if (a != ((unsigned)di)\n+      || b != ((unsigned)(di >> 16))\n+      || c != ((unsigned)(di >> 32))\n+      || d != ((unsigned)(di >> 48)))\n+    return 1;\n+\n+  return 0;\n+}"}]}