{"sha": "c457f75178f02049189b3369af3d5ee95adaa166", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ1N2Y3NTE3OGYwMjA0OTE4OWIzMzY5YWYzZDVlZTk1YWRhYTE2Ng==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2015-03-10T08:16:57Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2015-03-10T08:16:57Z"}, "message": "[NDS32] Rename some variables so that we can clearly identify they represent general purpose registers.\n\ngcc/\n\t* config/nds32/nds32.h (callee_saved_regs_size): Rename to ...\n\t(callee_saved_gpr_regs_size): ... this.\n\t(callee_saved_regs_first_regno): Rename to ...\n\t(callee_saved_first_gpr_regno): ... this.\n\t(callee_saved_regs_last_regno) Rename to ...\n\t(callee_saved_last_gpr_regno): ... this.\n\t* config/nds32/nds32.c (nds32_compute_stack_frame): Adjust renamed\n\tvariables.\n\t(nds32_initial_elimination_offset): Likewise.\n\t(nds32_expand_prologue): Likewise.\n\t(nds32_expand_epilogue): Likewise.\n\t(nds32_expand_prologue_v3push): Likewise.\n\t(nds32_expand_epilogue_v3pop): Likewise.\n\t* config/nds32/nds32-md-auxiliary.c (nds32_output_stack_push):\n\tAdjust renamed variables.\n\t(nds32_output_stack_pop): Likewise.\n\nFrom-SVN: r221306", "tree": {"sha": "155d52eab3da1f1c5b9fd3820c80160af9e6cfe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/155d52eab3da1f1c5b9fd3820c80160af9e6cfe7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c457f75178f02049189b3369af3d5ee95adaa166", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c457f75178f02049189b3369af3d5ee95adaa166", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c457f75178f02049189b3369af3d5ee95adaa166", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c457f75178f02049189b3369af3d5ee95adaa166/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cf6683f55b5e1b772d4bfc504c512390846470c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cf6683f55b5e1b772d4bfc504c512390846470c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cf6683f55b5e1b772d4bfc504c512390846470c"}], "stats": {"total": 143, "additions": 82, "deletions": 61}, "files": [{"sha": "f878488e91ab0ee3eff320a9161dc86823697b5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c457f75178f02049189b3369af3d5ee95adaa166/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c457f75178f02049189b3369af3d5ee95adaa166/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c457f75178f02049189b3369af3d5ee95adaa166", "patch": "@@ -1,3 +1,22 @@\n+2015-03-10  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32.h (callee_saved_regs_size): Rename to ...\n+\t(callee_saved_gpr_regs_size): ... this.\n+\t(callee_saved_regs_first_regno): Rename to ...\n+\t(callee_saved_first_gpr_regno): ... this.\n+\t(callee_saved_regs_last_regno) Rename to ...\n+\t(callee_saved_last_gpr_regno): ... this.\n+\t* config/nds32/nds32.c (nds32_compute_stack_frame): Adjust renamed\n+\tvariables.\n+\t(nds32_initial_elimination_offset): Likewise.\n+\t(nds32_expand_prologue): Likewise.\n+\t(nds32_expand_epilogue): Likewise.\n+\t(nds32_expand_prologue_v3push): Likewise.\n+\t(nds32_expand_epilogue_v3pop): Likewise.\n+\t* config/nds32/nds32-md-auxiliary.c (nds32_output_stack_push):\n+\tAdjust renamed variables.\n+\t(nds32_output_stack_pop): Likewise.\n+\n 2015-03-10  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* dominance.c (nearest_common_dominator_for_set): Fix A_Dominated_by_B"}, {"sha": "0a3e773c55f1cafeae73ac5a8a30419fec5d7117", "filename": "gcc/config/nds32/nds32-md-auxiliary.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c457f75178f02049189b3369af3d5ee95adaa166/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c457f75178f02049189b3369af3d5ee95adaa166/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c?ref=c457f75178f02049189b3369af3d5ee95adaa166", "patch": "@@ -604,8 +604,8 @@ nds32_output_stack_push (rtx par_rtx)\n \t\t\t    + NDS32_MAX_GPR_REGS_FOR_ARGS\n \t\t\t    - 1;\n   /* Pick up callee-saved first regno and last regno for further use.  */\n-  int rb_callee_saved = cfun->machine->callee_saved_regs_first_regno;\n-  int re_callee_saved = cfun->machine->callee_saved_regs_last_regno;\n+  int rb_callee_saved = cfun->machine->callee_saved_first_gpr_regno;\n+  int re_callee_saved = cfun->machine->callee_saved_last_gpr_regno;\n \n   /* First we need to check if we are pushing argument registers not used\n      for the named arguments.  If so, we have to create 'smw.adm' (push.s)\n@@ -644,7 +644,7 @@ nds32_output_stack_push (rtx par_rtx)\n          otherwise, generate 'push25 Re,0'.  */\n       sp_adjust = cfun->machine->local_size\n \t\t  + cfun->machine->out_args_size\n-\t\t  + cfun->machine->callee_saved_area_padding_bytes;\n+\t\t  + cfun->machine->callee_saved_area_gpr_padding_bytes;\n       if (satisfies_constraint_Iu08 (GEN_INT (sp_adjust))\n \t  && NDS32_DOUBLE_WORD_ALIGN_P (sp_adjust))\n \toperands[1] = GEN_INT (sp_adjust);\n@@ -712,8 +712,8 @@ nds32_output_stack_pop (rtx par_rtx ATTRIBUTE_UNUSED)\n   /* The operands array which will be used in output_asm_insn().  */\n   rtx operands[3];\n   /* Pick up callee-saved first regno and last regno for further use.  */\n-  int rb_callee_saved = cfun->machine->callee_saved_regs_first_regno;\n-  int re_callee_saved = cfun->machine->callee_saved_regs_last_regno;\n+  int rb_callee_saved = cfun->machine->callee_saved_first_gpr_regno;\n+  int re_callee_saved = cfun->machine->callee_saved_last_gpr_regno;\n \n   /* If we step here, we are going to do v3pop or multiple pop operation.  */\n \n@@ -742,7 +742,7 @@ nds32_output_stack_pop (rtx par_rtx ATTRIBUTE_UNUSED)\n          and then use 'pop25 Re,0'.  */\n       sp_adjust = cfun->machine->local_size\n \t\t  + cfun->machine->out_args_size\n-\t\t  + cfun->machine->callee_saved_area_padding_bytes;\n+\t\t  + cfun->machine->callee_saved_area_gpr_padding_bytes;\n       if (satisfies_constraint_Iu08 (GEN_INT (sp_adjust))\n \t  && NDS32_DOUBLE_WORD_ALIGN_P (sp_adjust)\n \t  && !cfun->calls_alloca)"}, {"sha": "b79e33e873ab1a84ad710de89b439de748d18435", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c457f75178f02049189b3369af3d5ee95adaa166/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c457f75178f02049189b3369af3d5ee95adaa166/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=c457f75178f02049189b3369af3d5ee95adaa166", "patch": "@@ -224,12 +224,12 @@ nds32_compute_stack_frame (void)\n   cfun->machine->lp_size = (df_regs_ever_live_p (LP_REGNUM)) ? 4 : 0;\n \n   /* Initially there is no padding bytes.  */\n-  cfun->machine->callee_saved_area_padding_bytes = 0;\n+  cfun->machine->callee_saved_area_gpr_padding_bytes = 0;\n \n   /* Calculate the bytes of saving callee-saved registers on stack.  */\n-  cfun->machine->callee_saved_regs_size = 0;\n-  cfun->machine->callee_saved_regs_first_regno = SP_REGNUM;\n-  cfun->machine->callee_saved_regs_last_regno  = SP_REGNUM;\n+  cfun->machine->callee_saved_gpr_regs_size = 0;\n+  cfun->machine->callee_saved_first_gpr_regno = SP_REGNUM;\n+  cfun->machine->callee_saved_last_gpr_regno  = SP_REGNUM;\n   /* Currently, there is no need to check $r28~$r31\n      because we will save them in another way.  */\n   for (r = 0; r < 28; r++)\n@@ -240,10 +240,10 @@ nds32_compute_stack_frame (void)\n \t     (only need to set it once).\n \t     If first regno == SP_REGNUM, we can tell that\n \t     it is the first time to be here.  */\n-\t  if (cfun->machine->callee_saved_regs_first_regno == SP_REGNUM)\n-\t    cfun->machine->callee_saved_regs_first_regno = r;\n+\t  if (cfun->machine->callee_saved_first_gpr_regno == SP_REGNUM)\n+\t    cfun->machine->callee_saved_first_gpr_regno = r;\n \t  /* Mark the last required callee-saved register.  */\n-\t  cfun->machine->callee_saved_regs_last_regno = r;\n+\t  cfun->machine->callee_saved_last_gpr_regno = r;\n \t}\n     }\n \n@@ -262,8 +262,8 @@ nds32_compute_stack_frame (void)\n        condition 3: There is no local_size, which means\n                     we do not need to adjust $sp.  */\n   if (lookup_attribute (\"naked\", DECL_ATTRIBUTES (current_function_decl))\n-      || (cfun->machine->callee_saved_regs_first_regno == SP_REGNUM\n-\t  && cfun->machine->callee_saved_regs_last_regno == SP_REGNUM\n+      || (cfun->machine->callee_saved_first_gpr_regno == SP_REGNUM\n+\t  && cfun->machine->callee_saved_last_gpr_regno == SP_REGNUM\n \t  && !df_regs_ever_live_p (FP_REGNUM)\n \t  && !df_regs_ever_live_p (LP_REGNUM)\n \t  && cfun->machine->local_size == 0))\n@@ -315,33 +315,33 @@ nds32_compute_stack_frame (void)\n       cfun->machine->lp_size = 4;\n \n       /* Remember to set Rb = $r6.  */\n-      cfun->machine->callee_saved_regs_first_regno = 6;\n+      cfun->machine->callee_saved_first_gpr_regno = 6;\n \n-      if (cfun->machine->callee_saved_regs_last_regno <= 6)\n+      if (cfun->machine->callee_saved_last_gpr_regno <= 6)\n \t{\n \t  /* Re = $r6 */\n-\t  cfun->machine->callee_saved_regs_last_regno = 6;\n+\t  cfun->machine->callee_saved_last_gpr_regno = 6;\n \t}\n-      else if (cfun->machine->callee_saved_regs_last_regno <= 8)\n+      else if (cfun->machine->callee_saved_last_gpr_regno <= 8)\n \t{\n \t  /* Re = $r8 */\n-\t  cfun->machine->callee_saved_regs_last_regno = 8;\n+\t  cfun->machine->callee_saved_last_gpr_regno = 8;\n \t}\n-      else if (cfun->machine->callee_saved_regs_last_regno <= 10)\n+      else if (cfun->machine->callee_saved_last_gpr_regno <= 10)\n \t{\n \t  /* Re = $r10 */\n-\t  cfun->machine->callee_saved_regs_last_regno = 10;\n+\t  cfun->machine->callee_saved_last_gpr_regno = 10;\n \t}\n-      else if (cfun->machine->callee_saved_regs_last_regno <= 14)\n+      else if (cfun->machine->callee_saved_last_gpr_regno <= 14)\n \t{\n \t  /* Re = $r14 */\n-\t  cfun->machine->callee_saved_regs_last_regno = 14;\n+\t  cfun->machine->callee_saved_last_gpr_regno = 14;\n \t}\n-      else if (cfun->machine->callee_saved_regs_last_regno == SP_REGNUM)\n+      else if (cfun->machine->callee_saved_last_gpr_regno == SP_REGNUM)\n \t{\n \t  /* If last_regno is SP_REGNUM, which means\n \t     it is never changed, so set it to Re = $r6.  */\n-\t  cfun->machine->callee_saved_regs_last_regno = 6;\n+\t  cfun->machine->callee_saved_last_gpr_regno = 6;\n \t}\n       else\n \t{\n@@ -355,12 +355,12 @@ nds32_compute_stack_frame (void)\n      Initially, the callee_saved_regs_size is supposed to be 0.\n      As long as callee_saved_regs_last_regno is not SP_REGNUM,\n      we can update callee_saved_regs_size with new size.  */\n-  if (cfun->machine->callee_saved_regs_last_regno != SP_REGNUM)\n+  if (cfun->machine->callee_saved_last_gpr_regno != SP_REGNUM)\n     {\n       /* Compute pushed size of callee-saved registers.  */\n-      cfun->machine->callee_saved_regs_size\n-\t= 4 * (cfun->machine->callee_saved_regs_last_regno\n-\t       - cfun->machine->callee_saved_regs_first_regno\n+      cfun->machine->callee_saved_gpr_regs_size\n+\t= 4 * (cfun->machine->callee_saved_last_gpr_regno\n+\t       - cfun->machine->callee_saved_first_gpr_regno\n \t       + 1);\n     }\n \n@@ -371,10 +371,10 @@ nds32_compute_stack_frame (void)\n   block_size = cfun->machine->fp_size\n \t       + cfun->machine->gp_size\n \t       + cfun->machine->lp_size\n-\t       + cfun->machine->callee_saved_regs_size;\n+\t       + cfun->machine->callee_saved_gpr_regs_size;\n   if (!NDS32_DOUBLE_WORD_ALIGN_P (block_size))\n     {\n-      cfun->machine->callee_saved_area_padding_bytes\n+      cfun->machine->callee_saved_area_gpr_padding_bytes\n \t= NDS32_ROUND_UP_DOUBLE_WORD (block_size) - block_size;\n     }\n \n@@ -2866,8 +2866,8 @@ nds32_initial_elimination_offset (unsigned int from_reg, unsigned int to_reg)\n       offset = (cfun->machine->fp_size\n \t        + cfun->machine->gp_size\n \t\t+ cfun->machine->lp_size\n-\t\t+ cfun->machine->callee_saved_regs_size\n-\t\t+ cfun->machine->callee_saved_area_padding_bytes\n+\t\t+ cfun->machine->callee_saved_gpr_regs_size\n+\t\t+ cfun->machine->callee_saved_area_gpr_padding_bytes\n \t\t+ cfun->machine->local_size\n \t\t+ cfun->machine->out_args_size);\n     }\n@@ -2887,8 +2887,8 @@ nds32_initial_elimination_offset (unsigned int from_reg, unsigned int to_reg)\n       offset = (-1) * (cfun->machine->fp_size\n \t\t       + cfun->machine->gp_size\n \t\t       + cfun->machine->lp_size\n-\t\t       + cfun->machine->callee_saved_regs_size\n-\t\t       + cfun->machine->callee_saved_area_padding_bytes);\n+\t\t       + cfun->machine->callee_saved_gpr_regs_size\n+\t\t       + cfun->machine->callee_saved_area_gpr_padding_bytes);\n     }\n   else\n     {\n@@ -2965,8 +2965,8 @@ nds32_expand_prologue (void)\n     return;\n \n   /* Get callee_first_regno and callee_last_regno.  */\n-  Rb = gen_rtx_REG (SImode, cfun->machine->callee_saved_regs_first_regno);\n-  Re = gen_rtx_REG (SImode, cfun->machine->callee_saved_regs_last_regno);\n+  Rb = gen_rtx_REG (SImode, cfun->machine->callee_saved_first_gpr_regno);\n+  Re = gen_rtx_REG (SImode, cfun->machine->callee_saved_last_gpr_regno);\n \n   /* nds32_emit_stack_push_multiple(first_regno, last_regno),\n      the pattern 'stack_push_multiple' is implemented in nds32.md.\n@@ -3002,7 +3002,7 @@ nds32_expand_prologue (void)\n       fp_adjust = cfun->machine->fp_size\n \t\t  + cfun->machine->gp_size\n \t\t  + cfun->machine->lp_size\n-\t\t  + cfun->machine->callee_saved_regs_size;\n+\t\t  + cfun->machine->callee_saved_gpr_regs_size;\n       fp_adjust_insn = gen_addsi3 (hard_frame_pointer_rtx,\n \t\t\t\t   stack_pointer_rtx,\n \t\t\t\t   GEN_INT (fp_adjust));\n@@ -3017,7 +3017,7 @@ nds32_expand_prologue (void)\n                       - callee_saved_area_padding_bytes.  */\n   sp_adjust = cfun->machine->local_size\n \t      + cfun->machine->out_args_size\n-\t      + cfun->machine->callee_saved_area_padding_bytes;\n+\t      + cfun->machine->callee_saved_area_gpr_padding_bytes;\n   /* sp_adjust value may be out of range of the addi instruction,\n      create alternative add behavior with TA_REGNUM if necessary,\n      using NEGATIVE value to tell that we are decreasing address.  */\n@@ -3105,7 +3105,7 @@ nds32_expand_epilogue (bool sibcall_p)\n       sp_adjust = cfun->machine->fp_size\n \t\t  + cfun->machine->gp_size\n \t\t  + cfun->machine->lp_size\n-\t\t  + cfun->machine->callee_saved_regs_size;\n+\t\t  + cfun->machine->callee_saved_gpr_regs_size;\n       sp_adjust_insn = gen_addsi3 (stack_pointer_rtx,\n \t\t\t\t   hard_frame_pointer_rtx,\n \t\t\t\t   GEN_INT (-1 * sp_adjust));\n@@ -3128,7 +3128,7 @@ nds32_expand_epilogue (bool sibcall_p)\n                           + callee_saved_area_padding_bytes.  */\n       sp_adjust = cfun->machine->local_size\n \t\t  + cfun->machine->out_args_size\n-\t\t  + cfun->machine->callee_saved_area_padding_bytes;\n+\t\t  + cfun->machine->callee_saved_area_gpr_padding_bytes;\n       /* sp_adjust value may be out of range of the addi instruction,\n          create alternative add behavior with TA_REGNUM if necessary,\n          using POSITIVE value to tell that we are increasing address.  */\n@@ -3149,8 +3149,8 @@ nds32_expand_epilogue (bool sibcall_p)\n     }\n \n   /* Get callee_first_regno and callee_last_regno.  */\n-  Rb = gen_rtx_REG (SImode, cfun->machine->callee_saved_regs_first_regno);\n-  Re = gen_rtx_REG (SImode, cfun->machine->callee_saved_regs_last_regno);\n+  Rb = gen_rtx_REG (SImode, cfun->machine->callee_saved_first_gpr_regno);\n+  Re = gen_rtx_REG (SImode, cfun->machine->callee_saved_last_gpr_regno);\n \n   /* nds32_emit_stack_pop_multiple(first_regno, last_regno),\n      the pattern 'stack_pop_multiple' is implementad in nds32.md.\n@@ -3219,14 +3219,14 @@ nds32_expand_prologue_v3push (void)\n     return;\n \n   /* Get callee_first_regno and callee_last_regno.  */\n-  Rb = gen_rtx_REG (SImode, cfun->machine->callee_saved_regs_first_regno);\n-  Re = gen_rtx_REG (SImode, cfun->machine->callee_saved_regs_last_regno);\n+  Rb = gen_rtx_REG (SImode, cfun->machine->callee_saved_first_gpr_regno);\n+  Re = gen_rtx_REG (SImode, cfun->machine->callee_saved_last_gpr_regno);\n \n   /* Calculate sp_adjust first to test if 'push25 Re,imm8u' is available,\n      where imm8u has to be 8-byte alignment.  */\n   sp_adjust = cfun->machine->local_size\n \t      + cfun->machine->out_args_size\n-\t      + cfun->machine->callee_saved_area_padding_bytes;\n+\t      + cfun->machine->callee_saved_area_gpr_padding_bytes;\n \n   if (satisfies_constraint_Iu08 (GEN_INT (sp_adjust))\n       && NDS32_DOUBLE_WORD_ALIGN_P (sp_adjust))\n@@ -3256,7 +3256,7 @@ nds32_expand_prologue_v3push (void)\n \t  fp_adjust = cfun->machine->fp_size\n \t\t      + cfun->machine->gp_size\n \t\t      + cfun->machine->lp_size\n-\t\t      + cfun->machine->callee_saved_regs_size\n+\t\t      + cfun->machine->callee_saved_gpr_regs_size\n \t\t      + sp_adjust;\n \t  fp_adjust_insn = gen_addsi3 (hard_frame_pointer_rtx,\n \t\t\t\t       stack_pointer_rtx,\n@@ -3291,7 +3291,7 @@ nds32_expand_prologue_v3push (void)\n \t  fp_adjust = cfun->machine->fp_size\n \t\t      + cfun->machine->gp_size\n \t\t      + cfun->machine->lp_size\n-\t\t      + cfun->machine->callee_saved_regs_size;\n+\t\t      + cfun->machine->callee_saved_gpr_regs_size;\n \t  fp_adjust_insn = gen_addsi3 (hard_frame_pointer_rtx,\n \t\t\t\t       stack_pointer_rtx,\n \t\t\t\t       GEN_INT (fp_adjust));\n@@ -3356,14 +3356,14 @@ nds32_expand_epilogue_v3pop (bool sibcall_p)\n     }\n \n   /* Get callee_first_regno and callee_last_regno.  */\n-  Rb = gen_rtx_REG (SImode, cfun->machine->callee_saved_regs_first_regno);\n-  Re = gen_rtx_REG (SImode, cfun->machine->callee_saved_regs_last_regno);\n+  Rb = gen_rtx_REG (SImode, cfun->machine->callee_saved_first_gpr_regno);\n+  Re = gen_rtx_REG (SImode, cfun->machine->callee_saved_last_gpr_regno);\n \n   /* Calculate sp_adjust first to test if 'pop25 Re,imm8u' is available,\n      where imm8u has to be 8-byte alignment.  */\n   sp_adjust = cfun->machine->local_size\n \t      + cfun->machine->out_args_size\n-\t      + cfun->machine->callee_saved_area_padding_bytes;\n+\t      + cfun->machine->callee_saved_area_gpr_padding_bytes;\n \n   /* We have to consider alloca issue as well.\n      If the function does call alloca(), the stack pointer is not fixed.\n@@ -3402,7 +3402,7 @@ nds32_expand_epilogue_v3pop (bool sibcall_p)\n \t  sp_adjust = cfun->machine->fp_size\n \t\t      + cfun->machine->gp_size\n \t\t      + cfun->machine->lp_size\n-\t\t      + cfun->machine->callee_saved_regs_size;\n+\t\t      + cfun->machine->callee_saved_gpr_regs_size;\n \t  sp_adjust_insn = gen_addsi3 (stack_pointer_rtx,\n \t\t\t\t       hard_frame_pointer_rtx,\n \t\t\t\t       GEN_INT (-1 * sp_adjust));\n@@ -3422,7 +3422,7 @@ nds32_expand_epilogue_v3pop (bool sibcall_p)\n \t\t\t      + callee_saved_area_padding_bytes.  */\n \t  sp_adjust = cfun->machine->local_size\n \t\t      + cfun->machine->out_args_size\n-\t\t      + cfun->machine->callee_saved_area_padding_bytes;\n+\t\t      + cfun->machine->callee_saved_area_gpr_padding_bytes;\n \t  /* sp_adjust value may be out of range of the addi instruction,\n \t     create alternative add behavior with TA_REGNUM if necessary,\n \t     using POSITIVE value to tell that we are increasing address.  */"}, {"sha": "3c7a7b3e9f22d454b1b8429b72a1676275228905", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c457f75178f02049189b3369af3d5ee95adaa166/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c457f75178f02049189b3369af3d5ee95adaa166/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=c457f75178f02049189b3369af3d5ee95adaa166", "patch": "@@ -218,15 +218,17 @@ struct GTY(()) machine_function\n   /* Number of bytes on the stack for saving $lp.  */\n   int lp_size;\n \n-  /* Number of bytes on the stack for saving callee-saved registers.  */\n-  int callee_saved_regs_size;\n+  /* Number of bytes on the stack for saving general purpose\n+     callee-saved registers.  */\n+  int callee_saved_gpr_regs_size;\n+\n   /* The padding bytes in callee-saved area may be required.  */\n-  int callee_saved_area_padding_bytes;\n+  int callee_saved_area_gpr_padding_bytes;\n \n-  /* The first required callee-saved register.  */\n-  int callee_saved_regs_first_regno;\n-  /* The last required callee-saved register.  */\n-  int callee_saved_regs_last_regno;\n+  /* The first required general purpose callee-saved register.  */\n+  int callee_saved_first_gpr_regno;\n+  /* The last required general purpose callee-saved register.  */\n+  int callee_saved_last_gpr_regno;\n \n   /* The padding bytes in varargs area may be required.  */\n   int va_args_area_padding_bytes;"}]}