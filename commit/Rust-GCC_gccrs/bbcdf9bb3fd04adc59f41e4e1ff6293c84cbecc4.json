{"sha": "bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJjZGY5YmIzZmQwNGFkYzU5ZjQxZTRlMWZmNjI5M2M4NGNiZWNjNA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-04-03T18:49:10Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-04-03T18:49:29Z"}, "message": "x86: Mark scratch operand in ssse3_pshufbv8qi3 as earlyclobber\n\ncommit 16ed2601ad0a4aa82f11e9df86ea92183f94f979\nAuthor: H.J. Lu <hongjiu.lu@intel.com>\nDate:   Wed May 15 15:26:19 2019 +0000\n\n    i386: Emulate MMX pshufb with SSE version\n\nhas\n\n+(define_insn_and_split \"ssse3_pshufbv8qi3\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=y,x,Yv\")\n+  (unspec:V8QI [(match_operand:V8QI 1 \"register_operand\" \"0,0,Yv\")\n+           (match_operand:V8QI 2 \"register_mmxmem_operand\" \"ym,x,Yv\")]\n+          UNSPEC_PSHUFB))\n+   (clobber (match_scratch:V4SI 3 \"=X,x,Yv\"))]\n                                       ^^^  There are earlyclobber.\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSSE3\"\n+  \"@\n+   pshufb\\t{%2, %0|%0, %2}\n+   #\n+   #\"\n+  \"TARGET_MMX_WITH_SSE && reload_completed\"\n+  [(set (match_dup 3) (match_dup 5))\n+   (set (match_dup 3)\n+  (and:V4SI (match_dup 3) (match_dup 2)))\n+   (set (match_dup 0)\n+  (unspec:V16QI [(match_dup 1) (match_dup 4)] UNSPEC_PSHUFB))]\n\nIf input register operand 2 is dead after this insn, RA may choose it\nas scratch operand.  Since it isn't marked as earlyclobber, operand 2\nbecomes unused after split and then it gets optimized out.  Mark scratch\noperand as earlyclobber fixes the issue.\n\ngcc/\n\n\tPR target/94467\n\t* config/i386/sse.md (ssse3_pshufbv8qi3): Mark scratch operand\n\tas earlyclobber.\n\ngcc/testsuite/\n\n\tPR target/94467\n\t* gcc.target/i386/pr94467-1.c: New test.\n\t* gcc.target/i386/pr94467-2.c: Likewise.", "tree": {"sha": "5c1ef890db487b0e125329f83bdff7c4a856315d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c1ef890db487b0e125329f83bdff7c4a856315d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b949f8e2acb49273b2f08ecaa3bc7128baaad850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b949f8e2acb49273b2f08ecaa3bc7128baaad850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b949f8e2acb49273b2f08ecaa3bc7128baaad850"}], "stats": {"total": 102, "additions": 101, "deletions": 1}, "files": [{"sha": "6317e385cac4b933b59972e018b256e97cfbc16a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4", "patch": "@@ -1,3 +1,9 @@\n+2020-04-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/94467\n+\t* config/i386/sse.md (ssse3_pshufbv8qi3): Mark scratch operand\n+\tas earlyclobber.\n+\n 2020-04-03  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimization/92264"}, {"sha": "fef6065b687911151119c54206a102b14fa899c6", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4", "patch": "@@ -16695,7 +16695,7 @@\n \t(unspec:V8QI [(match_operand:V8QI 1 \"register_operand\" \"0,0,Yv\")\n \t\t      (match_operand:V8QI 2 \"register_mmxmem_operand\" \"ym,x,Yv\")]\n \t\t     UNSPEC_PSHUFB))\n-   (clobber (match_scratch:V4SI 3 \"=X,x,Yv\"))]\n+   (clobber (match_scratch:V4SI 3 \"=X,&x,&Yv\"))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSSE3\"\n   \"@\n    pshufb\\t{%2, %0|%0, %2}"}, {"sha": "aad627d84f3df29a375a6f3bd89397b3656debd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4", "patch": "@@ -1,3 +1,9 @@\n+2020-04-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/94467\n+\t* gcc.target/i386/pr94467-1.c: New test.\n+\t* gcc.target/i386/pr94467-2.c: Likewise.\n+\n 2020-04-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94460"}, {"sha": "a51c3a8f5fe3f01ea489f7e70fc003295ec9b048", "filename": "gcc/testsuite/gcc.target/i386/pr94467-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94467-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94467-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94467-1.c?ref=bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+typedef char __attribute__ ((__vector_size__ (8))) v8qi;\n+typedef short __attribute__ ((__vector_size__ (8))) v4hi;\n+typedef int __attribute__ ((__vector_size__ (8))) v2si;\n+typedef long long __attribute__ ((__vector_size__ (8))) v1di;\n+typedef unsigned long long u64;\n+u64 k, c;\n+\n+v8qi g, h, p, q;\n+v4hi d, e, f, l, n, o;\n+v2si j;\n+\n+u64\n+foo (v4hi r)\n+{\n+  v8qi s;\n+  f = (v4hi) j;\n+  e = __builtin_ia32_psrlwi ((v4hi) k, c);\n+  s = __builtin_ia32_pavgb (h, h);\n+  n = __builtin_ia32_pabsw (f);\n+  o = __builtin_ia32_psubusw (n, l);\n+  p = __builtin_ia32_packsswb (r, o);\n+  q = __builtin_ia32_pshufb (p, s);\n+  g = __builtin_ia32_punpcklbw (q, (v8qi) r);\n+  d = r;\n+  return (u64) g + (u64) h + (u64) j;\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  u64 x = foo ((v4hi) { 5 });\n+  if (x != 0x0005000500050505)\n+    __builtin_abort ();\n+}"}, {"sha": "8128be325e46b51a036eac9b3ade349a8ce0ca2e", "filename": "gcc/testsuite/gcc.target/i386/pr94467-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94467-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94467-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94467-2.c?ref=bbcdf9bb3fd04adc59f41e4e1ff6293c84cbecc4", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target ssse3 } */\n+/* { dg-options \"-O -mssse3\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+\n+typedef char __attribute__ ((__vector_size__ (8))) v8qi;\n+typedef short __attribute__ ((__vector_size__ (8))) v4hi;\n+typedef int __attribute__ ((__vector_size__ (8))) v2si;\n+typedef long long __attribute__ ((__vector_size__ (8))) v1di;\n+typedef unsigned long long u64;\n+u64 k, c;\n+\n+v8qi g, h, p, q;\n+v4hi d, e, f, l, n, o;\n+v2si j;\n+\n+u64\n+foo (v4hi r)\n+{\n+  v8qi s;\n+  f = (v4hi) j;\n+  e = __builtin_ia32_psrlwi ((v4hi) k, c);\n+  s = __builtin_ia32_pavgb (h, h);\n+  n = __builtin_ia32_pabsw (f);\n+  o = __builtin_ia32_psubusw (n, l);\n+  p = __builtin_ia32_packsswb (r, o);\n+  q = __builtin_ia32_pshufb (p, s);\n+  g = __builtin_ia32_punpcklbw (q, (v8qi) r);\n+  d = r;\n+  return (u64) g + (u64) h + (u64) j;\n+}\n+\n+static void\n+ssse3_test (void)\n+{\n+  u64 x = foo ((v4hi) { 5 });\n+  if (x != 0x0005000500050505)\n+    __builtin_abort ();\n+}"}]}