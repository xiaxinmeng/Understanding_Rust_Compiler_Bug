{"sha": "91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFjNWVlNWI0YWM5Yzg1YjZjYmY1OTZkYzc5MTc5MTBiMGQ3YjFiMw==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2013-12-16T18:24:54Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2013-12-16T18:24:54Z"}, "message": "re PR rtl-optimization/59466 (Slow code generation by LRA for memory addresses on PPC)\n\n2013-12-16  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/59466\n\t* emit-rtl.c (change_address_1): Don't validate address for LRA.\n\t* recog.c (general_operand): Accept any memory for LRA.\n\t* lra.c (lra_set_insn_recog_data): Add an assert.\n\nFrom-SVN: r206023", "tree": {"sha": "0b6dfb23c7b9928b9e9fac67fc5ef9b3e1d8ae3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b6dfb23c7b9928b9e9fac67fc5ef9b3e1d8ae3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7670d795d5fe6685c133a43ce15f5842c1d6aa25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7670d795d5fe6685c133a43ce15f5842c1d6aa25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7670d795d5fe6685c133a43ce15f5842c1d6aa25"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "941753aa2b297d5dae9732204ae38556651ca924", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3", "patch": "@@ -1,3 +1,10 @@\n+2013-12-16  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/59466\n+\t* emit-rtl.c (change_address_1): Don't validate address for LRA.\n+\t* recog.c (general_operand): Accept any memory for LRA.\n+\t* lra.c (lra_set_insn_recog_data): Add an assert.\n+\n 2013-12-16  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/driver-arm.c (arm_cpu_table): Add cortex-a12 entry."}, {"sha": "ad63d0b8b994bb61f1f67175ceb5fa8699515f40", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3", "patch": "@@ -1951,7 +1951,9 @@ change_address_1 (rtx memref, enum machine_mode mode, rtx addr, int validate)\n       && (!validate || memory_address_addr_space_p (mode, addr, as)))\n     return memref;\n \n-  if (validate)\n+  /* Don't validate address for LRA.  LRA can make the address valid\n+     by itself in most efficient way.  */\n+  if (validate && !lra_in_progress)\n     {\n       if (reload_in_progress || reload_completed)\n \tgcc_assert (memory_address_addr_space_p (mode, addr, as));"}, {"sha": "ed070c7f556980661a58905c50125814f6b9f2aa", "filename": "gcc/lra.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3", "patch": "@@ -1072,9 +1072,16 @@ lra_set_insn_recog_data (rtx insn)\n       nop = asm_noperands (PATTERN (insn));\n       data->operand_loc = data->dup_loc = NULL;\n       if (nop < 0)\n-\t/* Its is a special insn like USE or CLOBBER.  */\n-\tdata->insn_static_data = insn_static_data\n-\t  = get_static_insn_data (-1, 0, 0, 1);\n+\t{\n+\t  /* Its is a special insn like USE or CLOBBER.  We should\n+\t     recognize any regular insn otherwise LRA can do nothing\n+\t     with this insn.  */\n+\t  gcc_assert (GET_CODE (PATTERN (insn)) == USE\n+\t\t      || GET_CODE (PATTERN (insn)) == CLOBBER\n+\t\t      || GET_CODE (PATTERN (insn)) == ASM_INPUT);\n+\t  data->insn_static_data = insn_static_data\n+\t    = get_static_insn_data (-1, 0, 0, 1);\n+\t}\n       else\n \t{\n \t  /* expand_asm_operands makes sure there aren't too many"}, {"sha": "37e7692ea59e76fe4aa42fa730777f6e958c998d", "filename": "gcc/recog.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=91c5ee5b4ac9c85b6cbf596dc7917910b0d7b1b3", "patch": "@@ -1021,8 +1021,12 @@ general_operand (rtx op, enum machine_mode mode)\n       if (! volatile_ok && MEM_VOLATILE_P (op))\n \treturn 0;\n \n-      /* Use the mem's mode, since it will be reloaded thus.  */\n-      if (memory_address_addr_space_p (GET_MODE (op), y, MEM_ADDR_SPACE (op)))\n+      /* Use the mem's mode, since it will be reloaded thus.  LRA can\n+\t generate move insn with invalid addresses which is made valid\n+\t and efficiently calculated by LRA through further numerous\n+\t transformations.  */\n+      if (lra_in_progress\n+\t  || memory_address_addr_space_p (GET_MODE (op), y, MEM_ADDR_SPACE (op)))\n \treturn 1;\n     }\n "}]}