{"sha": "2a4a2f1da2a8155e26508ed70a45e64bc1e3238a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE0YTJmMWRhMmE4MTU1ZTI2NTA4ZWQ3MGE0NWU2NGJjMWUzMjM4YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-01-31T00:03:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-01-31T00:03:31Z"}, "message": "ostream_inserter_arith.cc (test03_check): Break out from test03 and templatize.\n\n        * testsuite/27_io/ostream_inserter_arith.cc (test03_check): Break\n        out from test03 and templatize.\n        (test03): Use it.\n\nFrom-SVN: r49348", "tree": {"sha": "bf8ae3fd03c7183ca8f55aaf6a6bce7b447f33ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf8ae3fd03c7183ca8f55aaf6a6bce7b447f33ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a4a2f1da2a8155e26508ed70a45e64bc1e3238a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a4a2f1da2a8155e26508ed70a45e64bc1e3238a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a4a2f1da2a8155e26508ed70a45e64bc1e3238a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a4a2f1da2a8155e26508ed70a45e64bc1e3238a/comments", "author": null, "committer": null, "parents": [{"sha": "41ff8055c5caf3e399783c728a6c8a820b2c7a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41ff8055c5caf3e399783c728a6c8a820b2c7a29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41ff8055c5caf3e399783c728a6c8a820b2c7a29"}], "stats": {"total": 70, "additions": 36, "deletions": 34}, "files": [{"sha": "117b12256e0f93c5cc81aa5dd24d036e1b82ccfc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4a2f1da2a8155e26508ed70a45e64bc1e3238a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4a2f1da2a8155e26508ed70a45e64bc1e3238a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2a4a2f1da2a8155e26508ed70a45e64bc1e3238a", "patch": "@@ -1,3 +1,9 @@\n+2002-01-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* testsuite/27_io/ostream_inserter_arith.cc (test03_check): Break\n+\tout from test03 and templatize.\n+\t(test03): Use it.\n+\n 2002-01-30  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* config/locale/numpunct_members_gnu.cc"}, {"sha": "bbe2759106dc48f8209ef1bcf03563ff7ba75c71", "filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_arith.cc", "status": "modified", "additions": 30, "deletions": 34, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4a2f1da2a8155e26508ed70a45e64bc1e3238a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4a2f1da2a8155e26508ed70a45e64bc1e3238a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc?ref=2a4a2f1da2a8155e26508ed70a45e64bc1e3238a", "patch": "@@ -298,6 +298,30 @@ test02()\n   return 0;\n }\n \n+template<typename T>\n+bool\n+test03_check(T n)\n+{\n+  stringbuf strbuf;\n+  ostream o(&strbuf);\n+  const char *expect;\n+  bool test = true;\n+\n+  if (numeric_limits<T>::digits + 1 == 16)\n+    expect = \"177777 ffff\";\n+  else if (numeric_limits<T>::digits + 1 == 32)\n+    expect = \"37777777777 ffffffff\";\n+  else if (numeric_limits<T>::digits + 1 == 64)\n+    expect = \"1777777777777777777777 ffffffffffffffff\";\n+  else\n+    expect = \"wow, you've got some big numbers here\";\n+\n+  o << oct << n << ' ' << hex << n;\n+  VERIFY ( strbuf.str() == expect );\n+\n+  return test;\n+}\n+\n int \n test03()\n {\n@@ -306,41 +330,10 @@ test03()\n   long l = -1;\n   bool test = true;\n \n-  const string str_blank;\n-  string str_tmp;\n-  stringbuf strbuf;\n-  ostream o(&strbuf);\n-\n-  o << oct << s << ' ' << hex << s;\n-  if (numeric_limits<short>::digits + 1 == 16)\n-    VERIFY( strbuf.str() == \"177777 ffff\" );\n-  else\n-    VERIFY( strbuf.str() == \"37777777777 ffffffff\" );\n-  strbuf.str(str_blank);\n-\n-  o << oct << i << ' ' << hex << i;\n-  if (numeric_limits<int>::digits + 1 == 16)\n-    VERIFY( strbuf.str() == \"177777 ffff\" );\n-  else if (numeric_limits<int>::digits + 1 == 32)\n-    VERIFY( strbuf.str() == \"37777777777 ffffffff\" );\n-  else\n-    VERIFY( strbuf.str() == \"1777777777777777777777 \"\n-\t    \"ffffffffffffffff\" );\n-  strbuf.str(str_blank);\n-\n-  o << oct << l << ' ' << hex << l;\n-  if (numeric_limits<long>::digits + 1 == 32)\n-    VERIFY( strbuf.str() == \"37777777777 ffffffff\" );\n-  else\n-    VERIFY( strbuf.str() == \"1777777777777777777777 \"\n-\t    \"ffffffffffffffff\" );\n-  strbuf.str(str_blank);\n+  test &= test03_check (s);\n+  test &= test03_check (i);\n+  test &= test03_check (l);\n \n-  o << showpos << hex << showbase << 11;\n-  VERIFY( strbuf.str() == \"0xb\" );\n-  \n-  VERIFY(test);\n-  \n   return 0;\n }\n \n@@ -350,12 +343,15 @@ test04()\n {\n   stringbuf strbuf1, strbuf2;\n   ostream o1(&strbuf1), o2(&strbuf2);\n+  bool test = true;\n+\n   o1 << hex << showbase << setw(6) << internal << 0xff;\n   VERIFY( strbuf1.str() == \"0x  ff\" );\n   \n   // ... vs internal-adjusted const char*-type objects\n   o2 << hex << showbase << setw(6) << internal << \"0xff\";\n   VERIFY( strbuf2.str() == \"  0xff\" );\n+\n   return 0;\n }\n "}]}