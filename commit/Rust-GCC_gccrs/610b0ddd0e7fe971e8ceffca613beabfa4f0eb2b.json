{"sha": "610b0ddd0e7fe971e8ceffca613beabfa4f0eb2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEwYjBkZGQwZTdmZTk3MWU4Y2VmZmNhNjEzYmVhYmZhNGYwZWIyYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-08-03T07:11:16Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-08-03T07:11:16Z"}, "message": "new_op.cc: Update comments.\n\n\t* libsupc++/new_op.cc: Update comments.\n\t* libsupc++/del_op.cc: Likewise.\n\nFrom-SVN: r85464", "tree": {"sha": "a69884d5943b35283998bcada5435805703a393b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a69884d5943b35283998bcada5435805703a393b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/610b0ddd0e7fe971e8ceffca613beabfa4f0eb2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/610b0ddd0e7fe971e8ceffca613beabfa4f0eb2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/610b0ddd0e7fe971e8ceffca613beabfa4f0eb2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/610b0ddd0e7fe971e8ceffca613beabfa4f0eb2b/comments", "author": null, "committer": null, "parents": [{"sha": "723acbd5fa416ccb925e19ae55e515cb1b9b7a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/723acbd5fa416ccb925e19ae55e515cb1b9b7a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/723acbd5fa416ccb925e19ae55e515cb1b9b7a74"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "f38b706f127ae56bed64a4411d04b26bda499ad2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610b0ddd0e7fe971e8ceffca613beabfa4f0eb2b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610b0ddd0e7fe971e8ceffca613beabfa4f0eb2b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=610b0ddd0e7fe971e8ceffca613beabfa4f0eb2b", "patch": "@@ -1,3 +1,8 @@\n+2004-08-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* libsupc++/new_op.cc: Update comments.\n+\t* libsupc++/del_op.cc: Likewise.\n+\n 2004-08-02  Mark Mitchell  <mark@codesourcery.com>\n \n \t* libsupc++/cxxabi.h: Make all declarations have default"}, {"sha": "e99f5b658d5ab31d09d03674b4a2284af1781645", "filename": "libstdc++-v3/libsupc++/del_op.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610b0ddd0e7fe971e8ceffca613beabfa4f0eb2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610b0ddd0e7fe971e8ceffca613beabfa4f0eb2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc?ref=610b0ddd0e7fe971e8ceffca613beabfa4f0eb2b", "patch": "@@ -34,9 +34,8 @@\n #if _GLIBCXX_HOSTED\n using std::free;\n #else\n-// In a freestanding environment, \"free\" may not be available.  In\n-// that case, it may make sense not to define \"operator delete\" at\n-// all.  For now, we assume that \"free\" will work.\n+// A freestanding C runtime may not provide \"free\" -- but there is no\n+// other reasonable way to implement \"operator delete\".\n extern \"C\" void free(void *);\n #endif\n "}, {"sha": "983ae45420e864ba475a3fea683c76c5a947c4a3", "filename": "libstdc++-v3/libsupc++/new_op.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610b0ddd0e7fe971e8ceffca613beabfa4f0eb2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610b0ddd0e7fe971e8ceffca613beabfa4f0eb2b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc?ref=610b0ddd0e7fe971e8ceffca613beabfa4f0eb2b", "patch": "@@ -36,9 +36,8 @@ using std::bad_alloc;\n #if _GLIBCXX_HOSTED\n using std::malloc;\n #else\n-// In a freestanding environment, \"malloc\" may not be available.  In\n-// that case, it may make sense not to define \"operator new\" at all.\n-// For now, we assume that \"malloc\" will work.\n+// A freestanding C runtime may not provide \"malloc\" -- but there is no\n+// other reasonable way to implement \"operator new\".\n extern \"C\" void *malloc (std::size_t);\n #endif\n "}]}