{"sha": "e4e01495cc04172fbee0bb63a38c555b3e47db42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRlMDE0OTVjYzA0MTcyZmJlZTBiYjYzYTM4YzU1NWIzZTQ3ZGI0Mg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tsaunders@mozilla.com", "date": "2014-07-09T03:07:09Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2014-07-09T03:07:09Z"}, "message": "playcate old gcc\n\ngcc/\n\n\tPR bootstrap/61679\n\t * hash-table.h: use hash_table::value_type instead of\n       \tDescriptor::value_type in the return types of several methods.\n\nFrom-SVN: r212384", "tree": {"sha": "705cd46ee9bca37565811b39db26c8ace8d03b8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/705cd46ee9bca37565811b39db26c8ace8d03b8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4e01495cc04172fbee0bb63a38c555b3e47db42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4e01495cc04172fbee0bb63a38c555b3e47db42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4e01495cc04172fbee0bb63a38c555b3e47db42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4e01495cc04172fbee0bb63a38c555b3e47db42/comments", "author": null, "committer": null, "parents": [{"sha": "558d2559432daceaf2bdb0a627dd02df1090d0e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558d2559432daceaf2bdb0a627dd02df1090d0e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/558d2559432daceaf2bdb0a627dd02df1090d0e4"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "70a834147fda16d8464cb5cab4f6e333da1188ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e01495cc04172fbee0bb63a38c555b3e47db42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e01495cc04172fbee0bb63a38c555b3e47db42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4e01495cc04172fbee0bb63a38c555b3e47db42", "patch": "@@ -1,3 +1,9 @@\n+2014-07-08  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\tPR bootstrap/61679\n+\t * hash-table.h: use hash_table::value_type instead of\n+       \tDescriptor::value_type in the return types of several methods.\n+\n 2014-07-08  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* tree-pass.h (pass_data): Remove has_execute member."}, {"sha": "9c6a34ad70b22ab65f9147f1a19da59654bd633f", "filename": "gcc/hash-table.h", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4e01495cc04172fbee0bb63a38c555b3e47db42/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4e01495cc04172fbee0bb63a38c555b3e47db42/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=e4e01495cc04172fbee0bb63a38c555b3e47db42", "patch": "@@ -663,7 +663,7 @@ hash_table<Descriptor, Allocator, false>::~hash_table ()\n    HASH is the hash value for the element to be inserted.  */\n \n template<typename Descriptor, template<typename Type> class Allocator>\n-typename Descriptor::value_type **\n+typename hash_table<Descriptor, Allocator, false>::value_type **\n hash_table<Descriptor, Allocator, false>\n ::find_empty_slot_for_expand (hashval_t hash)\n {\n@@ -803,7 +803,7 @@ hash_table<Descriptor, Allocator, false>::clear_slot (value_type **slot)\n    be used to insert or delete an element. */\n \n template<typename Descriptor, template<typename Type> class Allocator>\n-typename Descriptor::value_type *\n+typename hash_table<Descriptor, Allocator, false>::value_type *\n hash_table<Descriptor, Allocator, false>\n ::find_with_hash (const compare_type *comparable, hashval_t hash)\n {\n@@ -841,7 +841,7 @@ ::find_with_hash (const compare_type *comparable, hashval_t hash)\n    entry, NULL may be returned if memory allocation fails. */\n \n template<typename Descriptor, template<typename Type> class Allocator>\n-typename Descriptor::value_type **\n+typename hash_table<Descriptor, Allocator, false>::value_type **\n hash_table<Descriptor, Allocator, false>\n ::find_slot_with_hash (const compare_type *comparable, hashval_t hash,\n \t\t       enum insert_option insert)\n@@ -922,7 +922,9 @@ ::remove_elt_with_hash (const compare_type *comparable, hashval_t hash)\n \n template<typename Descriptor, template<typename Type> class Allocator>\n template<typename Argument,\n-\t  int (*Callback) (typename Descriptor::value_type **slot, Argument argument)>\n+\t  int (*Callback) (typename hash_table<Descriptor, Allocator,\n+\t\t\t\t\t       false>::value_type **slot,\n+\t\t\t   Argument argument)>\n void\n hash_table<Descriptor, Allocator, false>::traverse_noresize (Argument argument)\n {\n@@ -946,7 +948,8 @@ hash_table<Descriptor, Allocator, false>::traverse_noresize (Argument argument)\n template <typename Descriptor,\n \t  template <typename Type> class Allocator>\n template <typename Argument,\n-\t  int (*Callback) (typename Descriptor::value_type **slot,\n+\t  int (*Callback) (typename hash_table<Descriptor, Allocator,\n+\t\t\t\t\t       false>::value_type **slot,\n \t\t\t   Argument argument)>\n void\n hash_table<Descriptor, Allocator, false>::traverse (Argument argument)\n@@ -1181,7 +1184,7 @@ hash_table<Descriptor, Allocator, true>::~hash_table ()\n    HASH is the hash value for the element to be inserted.  */\n \n template<typename Descriptor, template<typename Type> class Allocator>\n-typename Descriptor::value_type *\n+typename hash_table<Descriptor, Allocator, true>::value_type *\n hash_table<Descriptor, Allocator, true>\n ::find_empty_slot_for_expand (hashval_t hash)\n {\n@@ -1321,7 +1324,7 @@ hash_table<Descriptor, Allocator, true>::clear_slot (value_type *slot)\n    be used to insert or delete an element. */\n \n template<typename Descriptor, template<typename Type> class Allocator>\n-typename Descriptor::value_type &\n+typename hash_table<Descriptor, Allocator, true>::value_type &\n hash_table<Descriptor, Allocator, true>\n ::find_with_hash (const compare_type &comparable, hashval_t hash)\n {\n@@ -1358,7 +1361,7 @@ ::find_with_hash (const compare_type &comparable, hashval_t hash)\n    entry, NULL may be returned if memory allocation fails. */\n \n template<typename Descriptor, template<typename Type> class Allocator>\n-typename Descriptor::value_type *\n+typename hash_table<Descriptor, Allocator, true>::value_type *\n hash_table<Descriptor, Allocator, true>\n ::find_slot_with_hash (const compare_type &comparable, hashval_t hash,\n \t\t       enum insert_option insert)\n@@ -1440,7 +1443,8 @@ ::remove_elt_with_hash (const compare_type &comparable, hashval_t hash)\n template<typename Descriptor,\n \t  template<typename Type> class Allocator>\n template<typename Argument,\n-\t  int (*Callback) (typename Descriptor::value_type *slot,\n+\t  int (*Callback) (typename hash_table<Descriptor, Allocator,\n+\t\t\t\t\t       true>::value_type *slot,\n \t\t\t   Argument argument)>\n void\n hash_table<Descriptor, Allocator, true>::traverse_noresize (Argument argument)\n@@ -1465,7 +1469,8 @@ hash_table<Descriptor, Allocator, true>::traverse_noresize (Argument argument)\n template <typename Descriptor,\n \t  template <typename Type> class Allocator>\n template <typename Argument,\n-\t  int (*Callback) (typename Descriptor::value_type *slot,\n+\t  int (*Callback) (typename hash_table<Descriptor, Allocator,\n+\t\t\t\t\t       true>::value_type *slot,\n \t\t\t   Argument argument)>\n void\n hash_table<Descriptor, Allocator, true>::traverse (Argument argument)"}]}