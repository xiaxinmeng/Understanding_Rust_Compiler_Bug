{"sha": "7cbe60de258f6d09561d4fe32dac8892b52520fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NiZTYwZGUyNThmNmQwOTU2MWQ0ZmUzMmRhYzg4OTJiNTI1MjBmZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-07-04T08:07:19Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-04T08:07:19Z"}, "message": "[Ada] Clean up support for validity checks in the compiler\n\nThis removes old code in the parser that serves no useful purpose and\nfixes minor issues in the Validsw package.  No functional changes.\n\n2019-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* gnat1drv.adb (Adjust_Global_Switches): Use proper interface to\n\tset the validity settings in CodePeer mode.\n\t* par-load.adb (Load): Remove all code dealing with validity\n\tsettings.\n\t* validsw.ads (Validity_Check_Copies): Alphabetize.\n\t* validsw.adb (Reset_Validity_Check_Options): Set all options to\n\toff.\n\t(Save_Validity_Check_Options): Save all options.\n\nFrom-SVN: r273071", "tree": {"sha": "551af59dfb80446b3ec68ca91ffe686ad68d8838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/551af59dfb80446b3ec68ca91ffe686ad68d8838"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cbe60de258f6d09561d4fe32dac8892b52520fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbe60de258f6d09561d4fe32dac8892b52520fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cbe60de258f6d09561d4fe32dac8892b52520fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbe60de258f6d09561d4fe32dac8892b52520fe/comments", "author": null, "committer": null, "parents": [{"sha": "eedc5882dd635ce9cfaa650c790081b5130749af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eedc5882dd635ce9cfaa650c790081b5130749af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eedc5882dd635ce9cfaa650c790081b5130749af"}], "stats": {"total": 87, "additions": 43, "deletions": 44}, "files": [{"sha": "3ea8e477e8a534c100eeff2d9f645927de8cba22", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbe60de258f6d09561d4fe32dac8892b52520fe/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbe60de258f6d09561d4fe32dac8892b52520fe/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7cbe60de258f6d09561d4fe32dac8892b52520fe", "patch": "@@ -1,3 +1,14 @@\n+2019-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Use proper interface to\n+\tset the validity settings in CodePeer mode.\n+\t* par-load.adb (Load): Remove all code dealing with validity\n+\tsettings.\n+\t* validsw.ads (Validity_Check_Copies): Alphabetize.\n+\t* validsw.adb (Reset_Validity_Check_Options): Set all options to\n+\toff.\n+\t(Save_Validity_Check_Options): Save all options.\n+\n 2019-07-04  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch3.adb, exp_ch4.adb, exp_ch4.ads, exp_ch5.adb,"}, {"sha": "ded754d55ae663917b009c09eb3ce655544f093a", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbe60de258f6d09561d4fe32dac8892b52520fe/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbe60de258f6d09561d4fe32dac8892b52520fe/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=7cbe60de258f6d09561d4fe32dac8892b52520fe", "patch": "@@ -379,8 +379,7 @@ procedure Gnat1drv is\n          --  enough useful info.\n \n          Reset_Validity_Check_Options;\n-         Validity_Check_Default       := True;\n-         Validity_Check_Copies        := True;\n+         Set_Validity_Check_Options (\"dc\");\n          Check_Validity_Of_Parameters := False;\n \n          --  Turn off style check options and ignore any style check pragmas"}, {"sha": "70bc5cb6e4f26426704927e7c2dbc3e11a081460", "filename": "gcc/ada/par-load.adb", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbe60de258f6d09561d4fe32dac8892b52520fe/gcc%2Fada%2Fpar-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbe60de258f6d09561d4fe32dac8892b52520fe/gcc%2Fada%2Fpar-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-load.adb?ref=7cbe60de258f6d09561d4fe32dac8892b52520fe", "patch": "@@ -36,7 +36,6 @@ with Uname;    use Uname;\n with Osint;    use Osint;\n with Sinput.L; use Sinput.L;\n with Stylesw;  use Stylesw;\n-with Validsw;  use Validsw;\n \n with GNAT.Spelling_Checker; use GNAT.Spelling_Checker;\n \n@@ -61,10 +60,6 @@ procedure Load is\n    Save_Style_Checks : Style_Check_Options;\n    --  Save style check so it can be restored later\n \n-   Save_Validity_Check  : Boolean;\n-   Save_Validity_Checks : Validity_Check_Options;\n-   --  Save validity check so it can be restored later\n-\n    With_Cunit : Node_Id;\n    --  Compilation unit node for withed unit\n \n@@ -134,9 +129,6 @@ begin\n    Save_Style_Check_Options (Save_Style_Checks);\n    Save_Style_Check := Opt.Style_Check;\n \n-   Save_Validity_Check_Options (Save_Validity_Checks);\n-   Save_Validity_Check := Opt.Validity_Checks_On;\n-\n    --  If main unit, set Main_Unit_Entity (this will get overwritten if\n    --  the main unit has a separate spec, that happens later on in Load)\n \n@@ -318,11 +310,10 @@ begin\n      or else Nkind (Unit (Curunit)) in N_Generic_Instantiation\n      or else Nkind (Unit (Curunit)) in N_Renaming_Declaration\n    then\n-      --  Turn style and validity checks off for parent unit\n+      --  Turn style checks off for parent unit\n \n       if not GNAT_Mode then\n          Reset_Style_Check_Options;\n-         Reset_Validity_Check_Options;\n       end if;\n \n       Spec_Name := Get_Parent_Spec_Name (Unit_Name (Cur_Unum));\n@@ -356,11 +347,10 @@ begin\n       end if;\n    end if;\n \n-   --  Now we load with'ed units, with style/validity checks turned off\n+   --  Now we load with'ed units, with style checks turned off\n \n    if not GNAT_Mode then\n       Reset_Style_Check_Options;\n-      Reset_Validity_Check_Options;\n    end if;\n \n    --  Load the context items in two rounds: the first round handles normal\n@@ -470,6 +460,4 @@ begin\n \n    Set_Style_Check_Options (Save_Style_Checks);\n    Opt.Style_Check := Save_Style_Check;\n-   Set_Validity_Check_Options (Save_Validity_Checks);\n-   Opt.Validity_Checks_On := Save_Validity_Check;\n end Load;"}, {"sha": "ae155c39f2669f3a3cfb83a289d5a01603c103a0", "filename": "gcc/ada/validsw.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbe60de258f6d09561d4fe32dac8892b52520fe/gcc%2Fada%2Fvalidsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbe60de258f6d09561d4fe32dac8892b52520fe/gcc%2Fada%2Fvalidsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvalidsw.adb?ref=7cbe60de258f6d09561d4fe32dac8892b52520fe", "patch": "@@ -36,11 +36,12 @@ package body Validsw is\n    begin\n       Validity_Check_Components     := False;\n       Validity_Check_Copies         := False;\n-      Validity_Check_Default        := True;\n+      Validity_Check_Default        := False;\n       Validity_Check_Floating_Point := False;\n       Validity_Check_In_Out_Params  := False;\n       Validity_Check_In_Params      := False;\n       Validity_Check_Operands       := False;\n+      Validity_Check_Parameters     := False;\n       Validity_Check_Returns        := False;\n       Validity_Check_Subscripts     := False;\n       Validity_Check_Tests          := False;\n@@ -73,14 +74,14 @@ package body Validsw is\n          Options (K) := ' ';\n       end loop;\n \n-      Add ('n', not Validity_Check_Default);\n-\n-      Add ('c', Validity_Check_Copies);\n       Add ('e', Validity_Check_Components);\n+      Add ('c', Validity_Check_Copies);\n+      Add ('d', Validity_Check_Default);\n       Add ('f', Validity_Check_Floating_Point);\n       Add ('i', Validity_Check_In_Params);\n       Add ('m', Validity_Check_In_Out_Params);\n       Add ('o', Validity_Check_Operands);\n+      Add ('p', Validity_Check_Parameters);\n       Add ('r', Validity_Check_Returns);\n       Add ('s', Validity_Check_Subscripts);\n       Add ('t', Validity_Check_Tests);"}, {"sha": "5197bdf34098ffca06684a98f49ddec0b53382db", "filename": "gcc/ada/validsw.ads", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbe60de258f6d09561d4fe32dac8892b52520fe/gcc%2Fada%2Fvalidsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbe60de258f6d09561d4fe32dac8892b52520fe/gcc%2Fada%2Fvalidsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvalidsw.ads?ref=7cbe60de258f6d09561d4fe32dac8892b52520fe", "patch": "@@ -40,33 +40,33 @@ package Validsw is\n    --  or in the argument of a Validity_Checks pragma to activate the option.\n    --  The corresponding upper case letter deactivates the option.\n \n+   Validity_Check_Components : Boolean := False;\n+   --  Controls validity checking for assignment to elementary components of\n+   --  records. If this switch is set to True using -gnatVe, or an 'e' in the\n+   --  argument of Validity_Checks pragma, then the right-hand side of an\n+   --  assignment to such a component is checked for validity.\n+\n    Validity_Check_Copies : Boolean := False;\n    --  Controls the validity checking of copies. If this switch is set to\n-   --  true using -gnatVc, or a 'c' in the argument of a Validity_Checks\n-   --  pragma, then the right side of assignments and also initializing\n+   --  True using -gnatVc, or a 'c' in the argument of a Validity_Checks\n+   --  pragma, then the right-hand side of assignments and also initializing\n    --  expressions in object declarations are checked for validity.\n \n-   Validity_Check_Components : Boolean := False;\n-   --  Controls validity checking for assignment to elementary components of\n-   --  records. If this switch is set true using -gnatVe, or an 'e' in the\n-   --  argument of Validity_Checks pragma, then the right hand of an assignment\n-   --  to such a component is checked for validity.\n-\n    Validity_Check_Default : Boolean := True;\n    --  Controls default (reference manual) validity checking. If this switch is\n    --  set to True using -gnatVd or a 'd' in the argument of a Validity_Checks\n-   --  pragma (or the initial default value is used, set True), then left side\n-   --  subscripts and case statement arguments are checked for validity. This\n-   --  switch is also set by default if no -gnatV switch is used and no\n+   --  pragma (or the initial default value is used, set True), then left-hand\n+   --  side subscripts and case statement arguments are checked for validity.\n+   --  This switch is also set by default if no -gnatV switch is used and no\n    --  Validity_Checks pragma is processed.\n \n    Validity_Check_Floating_Point : Boolean := False;\n-   --  Normally validity checking applies only to discrete values (integer\n-   --  and enumeration types). If this switch is set to True using -gnatVf\n-   --  or an 'f' in the argument of a Validity_Checks pragma, then floating-\n-   --  point values are also checked. The context in which such checks\n-   --  occur depends on other flags, e.g. if Validity_Check_Copies is also\n-   --  set then floating-point values on the right side of an assignment\n+   --  Normally validity checking applies only to discrete values (integer and\n+   --  enumeration types). If this switch is set to True using -gnatVf or an\n+   --  'f' in the argument of a Validity_Checks pragma, then floating-point\n+   --  values are also checked. If the context in which such checks occur\n+   --  depends on other flags, e.g. if Validity_Check_Copies is also set,\n+   --  then floating-point values on the right-hand side of an assignment\n    --  will be validity checked.\n \n    Validity_Check_In_Out_Params : Boolean := False;\n@@ -103,13 +103,13 @@ package Validsw is\n    --  pragma, then the expression in a RETURN statement is validity checked.\n \n    Validity_Check_Subscripts : Boolean := False;\n-   --  Controls validity checking of subscripts. If this switch is set to\n-   --  True using -gnatVs, or an 's' in the argument of a Validity_Checks\n-   --  pragma, then all subscripts are checked for validity. Note that left\n-   --  side subscript checking is controlled also by Validity_Check_Default.\n-   --  If Validity_Check_Subscripts is True, then all subscripts are checked,\n-   --  otherwise if Validity_Check_Default is True, then left side subscripts\n-   --  are checked, otherwise no subscripts are checked.\n+   --  Controls validity checking of subscripts. If this switch is set to True\n+   --  using -gnatVs, or an 's' in the argument of a Validity_Checks pragma,\n+   --  then all subscripts are checked for validity. Note that left-hand side\n+   --  subscript checking is also controlled by Validity_Check_Default. If\n+   --  Validity_Check_Subscripts is True, then all subscripts are checked,\n+   --  otherwise if Validity_Check_Default is True, then left-hand side\n+   --  subscripts are checked; otherwise no subscripts are checked.\n \n    Validity_Check_Tests : Boolean := False;\n    --  Controls validity checking of tests that occur in conditions (i.e. the"}]}