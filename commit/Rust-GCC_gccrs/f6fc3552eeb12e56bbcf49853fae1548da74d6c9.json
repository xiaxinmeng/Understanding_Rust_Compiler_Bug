{"sha": "f6fc3552eeb12e56bbcf49853fae1548da74d6c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZmYzM1NTJlZWIxMmU1NmJiY2Y0OTg1M2ZhZTE1NDhkYTc0ZDZjOQ==", "commit": {"author": {"name": "Christopher Faylor", "email": "cgf@cygnus.com", "date": "2001-01-30T01:41:27Z"}, "committer": {"name": "Christopher Faylor", "email": "cgf@gcc.gnu.org", "date": "2001-01-30T01:41:27Z"}, "message": "cygwin.h: Add w32api to include search.\n\n* config/i386/cygwin.h: Add w32api to include search.  Search different\ndirectories in a cross-build environment.\n\nFrom-SVN: r39341", "tree": {"sha": "a6b1d5e94942a81b25a345c907243f3186f181e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6b1d5e94942a81b25a345c907243f3186f181e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6fc3552eeb12e56bbcf49853fae1548da74d6c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6fc3552eeb12e56bbcf49853fae1548da74d6c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6fc3552eeb12e56bbcf49853fae1548da74d6c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6fc3552eeb12e56bbcf49853fae1548da74d6c9/comments", "author": null, "committer": null, "parents": [{"sha": "2b5f2501ea98677dd265291c4032d89fe1d1641f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b5f2501ea98677dd265291c4032d89fe1d1641f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b5f2501ea98677dd265291c4032d89fe1d1641f"}], "stats": {"total": 63, "additions": 51, "deletions": 12}, "files": [{"sha": "18a2458b144db9c0b3cdd637a53e8af0b4c087eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fc3552eeb12e56bbcf49853fae1548da74d6c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fc3552eeb12e56bbcf49853fae1548da74d6c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6fc3552eeb12e56bbcf49853fae1548da74d6c9", "patch": "@@ -1,3 +1,8 @@\n+Mon Jan 29 20:38:19 2001  Christopher Faylor <cgf@cygnus.com>\n+\n+\t* config/i386/cygwin.h: Add w32api to include search.  Search different\n+\tdirectories in a cross-build environment.\n+\n 2001-11-29  Tim Josling  <tej@melbpc.org.au>\n \n \t* tree.h (TYPE_STUB_DECL): Add documentation."}, {"sha": "825afb0d6da74a7183cc6e8c3cafbe8b2b7f6ca5", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 46, "deletions": 12, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fc3552eeb12e56bbcf49853fae1548da74d6c9/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fc3552eeb12e56bbcf49853fae1548da74d6c9/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=f6fc3552eeb12e56bbcf49853fae1548da74d6c9", "patch": "@@ -52,6 +52,7 @@ Boston, MA 02111-1307, USA. */\n   N_(\"Use the Mingw32 interface\") },\t\t\t\t\t\\\n { \"windows\",\t\t  MASK_WINDOWS, N_(\"Create GUI application\") },\t\\\n { \"no-win32\",\t\t  -MASK_WIN32, N_(\"Don't set Windows defines\") },\\\n+{ \"win32\",\t\t  0, N_(\"Set Windows defines\") },\t\t\\\n { \"console\",\t\t  -MASK_WINDOWS,\t\t\t\t\\\n   N_(\"Create console application\") }, \t\t\t\t\t\\\n { \"dll\",\t\t  MASK_DLL, N_(\"Generate code for a DLL\") },\t\\\n@@ -78,33 +79,61 @@ Boston, MA 02111-1307, USA. */\n    by calling the init function from the prologue. */\n \n #undef LIBGCC_SPEC\n-#define LIBGCC_SPEC \"%{mno-cygwin: %{mthreads:-lmingwthrd} -lmingw32} -lgcc %{mno-cygwin:-lmoldname -lcrtdll}\"\n+#define LIBGCC_SPEC \"%{mno-cygwin: %{mthreads:-lmingwthrd} -lmingw32} -lgcc %{mno-cygwin:-lmoldname -lmsvcrt}\"\n \n #undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"%{shared|mdll: %{mno-cygwin:dllcrt1%O%s}} \\\n-  %{!shared: %{!mdll: %{!mno-cygwin:crt0%O%s} %{mno-cygwin:crt1%O%s} \\\n+#define STARTFILE_SPEC \"%{shared|mdll: %{mno-cygwin:dllcrt2%O%s}} \\\n+  %{!shared: %{!mdll: %{!mno-cygwin:crt0%O%s} %{mno-cygwin:-L/usr/local/lib/mingw -L/usr/lib/mingw crt2%O%s} \\\n   %{pg:gcrt0%O%s}}}\"\n \n #undef CPP_SPEC\n+#ifdef CROSS_COMPILE\n #define CPP_SPEC \"%(cpp_cpu) %{posix:-D_POSIX_SOURCE} \\\n   -D__stdcall=__attribute__((__stdcall__)) \\\n   -D__cdecl=__attribute__((__cdecl__)) \\\n   %{!ansi:-D_stdcall=__attribute__((__stdcall__)) \\\n     -D_cdecl=__attribute__((__cdecl__))} \\\n   -D__declspec(x)=__attribute__((x)) \\\n   -D__i386__ -D__i386 \\\n-  %{!mno-cygwin:-D__CYGWIN32__ -D__CYGWIN__ -Dunix -D__unix -D__unix__} \\\n+  %{!mno-cygwin:-D__CYGWIN32__ -D__CYGWIN__ -Dunix -D__unix__ -D__unix \\\n+    -isystem /usr/local/native-include \\\n+    -idirafter /usr/native-include} \\\n+  %{mno-win32: %{mno-cygwin: %emno-cygwin and mno-win32 are not compatible}} \\\n   %{!mno-win32:-D_WIN32 -DWINNT -isystem /usr/include/w32api} \\\n+  %{mno-cygwin:-DWIN32 -D__WIN32__ -D__MINGW32__=0.2 \\\n+    %{mthreads:-D_MT} \\\n+    -isystem /usr/local/native-include/mingw \\\n+    -idirafter /usr/native-include/mingw \\\n+    -iwithprefixbefore ../../../../mingw/include/g++-3 \\\n+    -iwithprefixbefore ../../../../mingw/include \\\n+    -iwithprefixbefore ../../../../mingw32/include/g++-3 \\\n+    -iwithprefixbefore ../../../../mingw32/include } \\\n+   %{!mno-win32:-DWIN32 -D_WIN32 -D__WIN32 -D__WIN32__ -DWINNT \\\n+     -idirafter /usr/include/w32api}\"\n+#else\n+#define CPP_SPEC \"%(cpp_cpu) %{posix:-D_POSIX_SOURCE} \\\n+  -D__stdcall=__attribute__((__stdcall__)) \\\n+  -D__cdecl=__attribute__((__cdecl__)) \\\n+  %{!ansi:-D_stdcall=__attribute__((__stdcall__)) \\\n+    -D_cdecl=__attribute__((__cdecl__))} \\\n+  -D__declspec(x)=__attribute__((x)) \\\n+  -D__i386__ -D__i386 \\\n+  %{!mno-cygwin:-D__CYGWIN32__ -D__CYGWIN__ -Dunix -D__unix__ -D__unix \\\n+    -isystem /usr/local/include \\\n+    -idirafter /usr/include} \\\n   %{mno-win32: %{mno-cygwin: %emno-cygwin and mno-win32 are not compatible}} \\\n-  %{mno-cygwin:-DWIN32 -D__WIN32__ -D_WIN32 -D__MINGW32__=0.2 \\\n+  %{mno-cygwin:-DWIN32 -D_WIN32 -D__WIN32 -D__WIN32__ -DWINNT \\\n+    -D__MINGW32__=0.3 -D__MSVCRT__ \\\n     %{mthreads:-D_MT} \\\n-    -isystem /usr/include/mingw32 \\\n-    -isystem /usr/include/mingw \\\n+    -isystem /usr/local/include/mingw \\\n+    -idirafter /usr/include/mingw \\\n     -iwithprefixbefore ../../../../mingw/include/g++-3 \\\n     -iwithprefixbefore ../../../../mingw/include \\\n     -iwithprefixbefore ../../../../mingw32/include/g++-3 \\\n-    -iwithprefixbefore ../../../../mingw32/include }\"\n-\n+    -iwithprefixbefore ../../../../mingw32/include } \\\n+   %{!mno-win32:-DWIN32 -D_WIN32 -D__WIN32 -D__WIN32__ -DWINNT \\\n+     -idirafter /usr/include/w32api}\"\n+#endif\n \n /* This macro defines names of additional specifications to put in the specs\n    that can be used in various specifications like CC1_SPEC.  Its definition\n@@ -559,15 +588,20 @@ extern void i386_pe_record_exported_symbol PARAMS ((char *, int));\n #define INT_ASM_OP \"\\t.long\\t\"\n #endif\n \n-#undef STANDARD_INCLUDE_DIR\n-#define STANDARD_INCLUDE_DIR \"/usr/include\"\n-\n #undef MD_STARTFILE_PREFIX\n #define MD_STARTFILE_PREFIX     \"/usr/lib/\"\n \n #undef STANDARD_STARTFILE_PREFIX\n #define STANDARD_STARTFILE_PREFIX     \"/usr/lib/mingw/\"\n \n+#ifndef CROSS_COMPILE\n+#undef LOCAL_INCLUDE_DIR\n+#undef TOOL_INCLUDE_DIR\n+#undef SYSTEM_INCLUDE_DIR\n+#undef STANDARD_INCLUDE_DIR\n+#define STANDARD_INCLUDE_DIR 0\n+#endif\n+\n #undef TREE\n \n #ifndef BUFSIZ"}]}