{"sha": "71838266e7857381ec1ea9d0cf0066e7992a73c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE4MzgyNjZlNzg1NzM4MWVjMWVhOWQwY2YwMDY2ZTc5OTJhNzNjNQ==", "commit": {"author": {"name": "Liu, Hongtao", "email": "hongtao.liu@intel.com", "date": "2019-01-28T08:05:04Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-10T06:59:30Z"}, "message": "AVX512FP16: Add vaddsh/vsubsh/vmulsh/vdivsh.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm_add_sh): New intrinsic.\n\t(_mm_mask_add_sh): Likewise.\n\t(_mm_maskz_add_sh): Likewise.\n\t(_mm_sub_sh): Likewise.\n\t(_mm_mask_sub_sh): Likewise.\n\t(_mm_maskz_sub_sh): Likewise.\n\t(_mm_mul_sh): Likewise.\n\t(_mm_mask_mul_sh): Likewise.\n\t(_mm_maskz_mul_sh): Likewise.\n\t(_mm_div_sh): Likewise.\n\t(_mm_mask_div_sh): Likewise.\n\t(_mm_maskz_div_sh): Likewise.\n\t(_mm_add_round_sh): Likewise.\n\t(_mm_mask_add_round_sh): Likewise.\n\t(_mm_maskz_add_round_sh): Likewise.\n\t(_mm_sub_round_sh): Likewise.\n\t(_mm_mask_sub_round_sh): Likewise.\n\t(_mm_maskz_sub_round_sh): Likewise.\n\t(_mm_mul_round_sh): Likewise.\n\t(_mm_mask_mul_round_sh): Likewise.\n\t(_mm_maskz_mul_round_sh): Likewise.\n\t(_mm_div_round_sh): Likewise.\n\t(_mm_mask_div_round_sh): Likewise.\n\t(_mm_maskz_div_round_sh): Likewise.\n\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n\t* config/i386/i386-expand.c\n\t(ix86_expand_round_builtin): Handle new builtins.\n\t* config/i386/sse.md (VF_128): Change description.\n\t(<sse>_vm<plusminus_insn><mode>3<mask_scalar_name><round_scalar_name>):\n\tAdjust to support HF vector modes.\n\t(<sse>_vm<multdiv_mnemonic><mode>3<mask_scalar_name><round_scalar_name>):\n\tLikewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "a197992899ae8847aaae86d9cd691cae47239e5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a197992899ae8847aaae86d9cd691cae47239e5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71838266e7857381ec1ea9d0cf0066e7992a73c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71838266e7857381ec1ea9d0cf0066e7992a73c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71838266e7857381ec1ea9d0cf0066e7992a73c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71838266e7857381ec1ea9d0cf0066e7992a73c5/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d959312b429971d69521e91506e304f8fa271a2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d959312b429971d69521e91506e304f8fa271a2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d959312b429971d69521e91506e304f8fa271a2d"}], "stats": {"total": 324, "additions": 313, "deletions": 11}, "files": [{"sha": "6ae12ebf9207a22f2117c4ea38878634ab5573a7", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=71838266e7857381ec1ea9d0cf0066e7992a73c5", "patch": "@@ -468,6 +468,260 @@ _mm512_maskz_div_round_ph (__mmask32 __A, __m512h __B, __m512h __C,\n \t\t\t\t\t\t   (A), (D)))\n #endif  /* __OPTIMIZE__  */\n \n+/* Intrinsics of v[add,sub,mul,div]sh.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_add_sh (__m128h __A, __m128h __B)\n+{\n+  __A[0] += __B[0];\n+  return __A;\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_add_sh (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vaddsh_v8hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_add_sh (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vaddsh_v8hf_mask (__B, __C, _mm_setzero_ph (),\n+\t\t\t\t\t  __A);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sub_sh (__m128h __A, __m128h __B)\n+{\n+  __A[0] -= __B[0];\n+  return __A;\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_sub_sh (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vsubsh_v8hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_sub_sh (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vsubsh_v8hf_mask (__B, __C, _mm_setzero_ph (),\n+\t\t\t\t\t  __A);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mul_sh (__m128h __A, __m128h __B)\n+{\n+  __A[0] *= __B[0];\n+  return __A;\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_mul_sh (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vmulsh_v8hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_mul_sh (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vmulsh_v8hf_mask (__B, __C, _mm_setzero_ph (), __A);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_div_sh (__m128h __A, __m128h __B)\n+{\n+  __A[0] /= __B[0];\n+  return __A;\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_div_sh (__m128h __A, __mmask8 __B, __m128h __C, __m128h __D)\n+{\n+  return __builtin_ia32_vdivsh_v8hf_mask (__C, __D, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_div_sh (__mmask8 __A, __m128h __B, __m128h __C)\n+{\n+  return __builtin_ia32_vdivsh_v8hf_mask (__B, __C, _mm_setzero_ph (),\n+\t\t\t\t\t  __A);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_add_round_sh (__m128h __A, __m128h __B, const int __C)\n+{\n+  return __builtin_ia32_vaddsh_v8hf_mask_round (__A, __B,\n+\t\t\t\t\t\t_mm_setzero_ph (),\n+\t\t\t\t\t\t(__mmask8) -1, __C);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_add_round_sh (__m128h __A, __mmask8 __B, __m128h __C,\n+\t\t       __m128h __D, const int __E)\n+{\n+  return __builtin_ia32_vaddsh_v8hf_mask_round (__C, __D, __A, __B, __E);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_add_round_sh (__mmask8 __A, __m128h __B, __m128h __C,\n+\t\t\tconst int __D)\n+{\n+  return __builtin_ia32_vaddsh_v8hf_mask_round (__B, __C,\n+\t\t\t\t\t\t_mm_setzero_ph (),\n+\t\t\t\t\t\t__A, __D);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sub_round_sh (__m128h __A, __m128h __B, const int __C)\n+{\n+  return __builtin_ia32_vsubsh_v8hf_mask_round (__A, __B,\n+\t\t\t\t\t\t_mm_setzero_ph (),\n+\t\t\t\t\t\t(__mmask8) -1, __C);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_sub_round_sh (__m128h __A, __mmask8 __B, __m128h __C,\n+\t\t       __m128h __D, const int __E)\n+{\n+  return __builtin_ia32_vsubsh_v8hf_mask_round (__C, __D, __A, __B, __E);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_sub_round_sh (__mmask8 __A, __m128h __B, __m128h __C,\n+\t\t\tconst int __D)\n+{\n+  return __builtin_ia32_vsubsh_v8hf_mask_round (__B, __C,\n+\t\t\t\t\t\t_mm_setzero_ph (),\n+\t\t\t\t\t\t__A, __D);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mul_round_sh (__m128h __A, __m128h __B, const int __C)\n+{\n+  return __builtin_ia32_vmulsh_v8hf_mask_round (__A, __B,\n+\t\t\t\t\t\t_mm_setzero_ph (),\n+\t\t\t\t\t\t(__mmask8) -1, __C);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_mul_round_sh (__m128h __A, __mmask8 __B, __m128h __C,\n+\t\t       __m128h __D, const int __E)\n+{\n+  return __builtin_ia32_vmulsh_v8hf_mask_round (__C, __D, __A, __B, __E);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_mul_round_sh (__mmask8 __A, __m128h __B, __m128h __C,\n+\t\t\tconst int __D)\n+{\n+  return __builtin_ia32_vmulsh_v8hf_mask_round (__B, __C,\n+\t\t\t\t\t\t_mm_setzero_ph (),\n+\t\t\t\t\t\t__A, __D);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_div_round_sh (__m128h __A, __m128h __B, const int __C)\n+{\n+  return __builtin_ia32_vdivsh_v8hf_mask_round (__A, __B,\n+\t\t\t\t\t\t_mm_setzero_ph (),\n+\t\t\t\t\t\t(__mmask8) -1, __C);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_div_round_sh (__m128h __A, __mmask8 __B, __m128h __C,\n+\t\t       __m128h __D, const int __E)\n+{\n+  return __builtin_ia32_vdivsh_v8hf_mask_round (__C, __D, __A, __B, __E);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_div_round_sh (__mmask8 __A, __m128h __B, __m128h __C,\n+\t\t\tconst int __D)\n+{\n+  return __builtin_ia32_vdivsh_v8hf_mask_round (__B, __C,\n+\t\t\t\t\t\t_mm_setzero_ph (),\n+\t\t\t\t\t\t__A, __D);\n+}\n+#else\n+#define _mm_add_round_sh(A, B, C)\t\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_vaddsh_v8hf_mask_round ((A), (B),\t\t\\\n+\t\t\t\t\t\t   _mm_setzero_ph (),\t\\\n+\t\t\t\t\t\t   (__mmask8)-1, (C)))\n+\n+#define _mm_mask_add_round_sh(A, B, C, D, E)\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_vaddsh_v8hf_mask_round ((C), (D), (A), (B), (E)))\n+\n+#define _mm_maskz_add_round_sh(A, B, C, D)\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_vaddsh_v8hf_mask_round ((B), (C),\t\t\\\n+\t\t\t\t\t\t   _mm_setzero_ph (),\t\\\n+\t\t\t\t\t\t   (A), (D)))\n+\n+#define _mm_sub_round_sh(A, B, C)\t\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_vsubsh_v8hf_mask_round ((A), (B),\t\t\\\n+\t\t\t\t\t\t   _mm_setzero_ph (),\t\\\n+\t\t\t\t\t\t   (__mmask8)-1, (C)))\n+\n+#define _mm_mask_sub_round_sh(A, B, C, D, E)\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_vsubsh_v8hf_mask_round ((C), (D), (A), (B), (E)))\n+\n+#define _mm_maskz_sub_round_sh(A, B, C, D)\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_vsubsh_v8hf_mask_round ((B), (C),\t\t\\\n+\t\t\t\t\t\t   _mm_setzero_ph (),\t\\\n+\t\t\t\t\t\t   (A), (D)))\n+\n+#define _mm_mul_round_sh(A, B, C)\t\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_vmulsh_v8hf_mask_round ((A), (B),\t\t\\\n+\t\t\t\t\t\t   _mm_setzero_ph (),\t\\\n+\t\t\t\t\t\t   (__mmask8)-1, (C)))\n+\n+#define _mm_mask_mul_round_sh(A, B, C, D, E)\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_vmulsh_v8hf_mask_round ((C), (D), (A), (B), (E)))\n+\n+#define _mm_maskz_mul_round_sh(A, B, C, D)\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_vmulsh_v8hf_mask_round ((B), (C),\t\t\\\n+\t\t\t\t\t\t   _mm_setzero_ph (),\t\\\n+\t\t\t\t\t\t   (A), (D)))\n+\n+#define _mm_div_round_sh(A, B, C)\t\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_vdivsh_v8hf_mask_round ((A), (B),\t\t\\\n+\t\t\t\t\t\t   _mm_setzero_ph (),\t\\\n+\t\t\t\t\t\t   (__mmask8)-1, (C)))\n+\n+#define _mm_mask_div_round_sh(A, B, C, D, E)\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_vdivsh_v8hf_mask_round ((C), (D), (A), (B), (E)))\n+\n+#define _mm_maskz_div_round_sh(A, B, C, D)\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_vdivsh_v8hf_mask_round ((B), (C),\t\t\\\n+\t\t\t\t\t\t   _mm_setzero_ph (),\t\\\n+\t\t\t\t\t\t   (A), (D)))\n+#endif /* __OPTIMIZE__ */\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "86cf8258b05697f461cfaf34dec9ae55f35b5d96", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=71838266e7857381ec1ea9d0cf0066e7992a73c5", "patch": "@@ -1304,7 +1304,9 @@ DEF_FUNCTION_TYPE (UINT8, PV2DI, PCV2DI, PCVOID)\n \n # FP16 builtins\n DEF_FUNCTION_TYPE (V8HF, V8HI)\n+DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, INT)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI)\n+DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI, INT)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF, V16HF, UHI)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, INT)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, USI)"}, {"sha": "85ad235071bf081e09390e72ec9dc87c34f3aea4", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=71838266e7857381ec1ea9d0cf0066e7992a73c5", "patch": "@@ -2787,6 +2787,10 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_mulv32hf3_mask, \"__builtin_ia32_\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_divv8hf3_mask, \"__builtin_ia32_vdivph_v8hf_mask\", IX86_BUILTIN_VDIVPH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_divv16hf3_mask, \"__builtin_ia32_vdivph_v16hf_mask\", IX86_BUILTIN_VDIVPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_V16HF_UHI)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_divv32hf3_mask, \"__builtin_ia32_vdivph_v32hf_mask\", IX86_BUILTIN_VDIVPH_V32HF_MASK, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmaddv8hf3_mask, \"__builtin_ia32_vaddsh_v8hf_mask\", IX86_BUILTIN_VADDSH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsubv8hf3_mask, \"__builtin_ia32_vsubsh_v8hf_mask\", IX86_BUILTIN_VSUBSH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmmulv8hf3_mask, \"__builtin_ia32_vmulsh_v8hf_mask\", IX86_BUILTIN_VMULSH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmdivv8hf3_mask, \"__builtin_ia32_vdivsh_v8hf_mask\", IX86_BUILTIN_VDIVSH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n \n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)\n@@ -2992,6 +2996,10 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_addv32hf3_mask_round, \"__builtin\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_subv32hf3_mask_round, \"__builtin_ia32_vsubph_v32hf_mask_round\", IX86_BUILTIN_VSUBPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_mulv32hf3_mask_round, \"__builtin_ia32_vmulph_v32hf_mask_round\", IX86_BUILTIN_VMULPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_divv32hf3_mask_round, \"__builtin_ia32_vdivph_v32hf_mask_round\", IX86_BUILTIN_VDIVPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmaddv8hf3_mask_round, \"__builtin_ia32_vaddsh_v8hf_mask_round\", IX86_BUILTIN_VADDSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsubv8hf3_mask_round, \"__builtin_ia32_vsubsh_v8hf_mask_round\", IX86_BUILTIN_VSUBSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmmulv8hf3_mask_round, \"__builtin_ia32_vmulsh_v8hf_mask_round\", IX86_BUILTIN_VMULSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmdivv8hf3_mask_round, \"__builtin_ia32_vdivsh_v8hf_mask_round\", IX86_BUILTIN_VDIVSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n \n BDESC_END (ROUND_ARGS, MULTI_ARG)\n "}, {"sha": "29a437446078141568fd480169ad30aa3e014939", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=71838266e7857381ec1ea9d0cf0066e7992a73c5", "patch": "@@ -10646,6 +10646,7 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n       nargs = 2;\n       break;\n     case V32HF_FTYPE_V32HF_V32HF_INT:\n+    case V8HF_FTYPE_V8HF_V8HF_INT:\n     case V4SF_FTYPE_V4SF_UINT_INT:\n     case V4SF_FTYPE_V4SF_UINT64_INT:\n     case V2DF_FTYPE_V2DF_UINT64_INT:\n@@ -10693,6 +10694,7 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V4SF_FTYPE_V4SF_V4SF_V4SF_QI_INT:\n     case V4SF_FTYPE_V4SF_V2DF_V4SF_QI_INT:\n     case V4SF_FTYPE_V4SF_V2DF_V4SF_UQI_INT:\n+    case V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT:\n       nargs = 5;\n       break;\n     case V16SF_FTYPE_V16SF_INT_V16SF_HI_INT:"}, {"sha": "6f2072c32d342f68dbcc11aac9097e35c733d9ef", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=71838266e7857381ec1ea9d0cf0066e7992a73c5", "patch": "@@ -349,7 +349,7 @@\n (define_mode_iterator VF2_512_256VL\n   [V8DF (V4DF \"TARGET_AVX512VL\")])\n \n-;; All 128bit vector float modes\n+;; All 128bit vector SF/DF modes\n (define_mode_iterator VF_128\n   [V4SF (V2DF \"TARGET_SSE2\")])\n \n@@ -2104,11 +2104,11 @@\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_insn \"<sse>_vm<insn><mode>3<mask_scalar_name><round_scalar_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n-\t(vec_merge:VF_128\n-\t  (plusminus:VF_128\n-\t    (match_operand:VF_128 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,<round_scalar_constraint>\"))\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=x,v\")\n+\t(vec_merge:VFH_128\n+\t  (plusminus:VFH_128\n+\t    (match_operand:VFH_128 1 \"register_operand\" \"0,v\")\n+\t    (match_operand:VFH_128 2 \"nonimmediate_operand\" \"xm,<round_scalar_constraint>\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n@@ -2195,11 +2195,11 @@\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_insn \"<sse>_vm<multdiv_mnemonic><mode>3<mask_scalar_name><round_scalar_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n-\t(vec_merge:VF_128\n-\t  (multdiv:VF_128\n-\t    (match_operand:VF_128 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,<round_scalar_constraint>\"))\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=x,v\")\n+\t(vec_merge:VFH_128\n+\t  (multdiv:VFH_128\n+\t    (match_operand:VFH_128 1 \"register_operand\" \"0,v\")\n+\t    (match_operand:VFH_128 2 \"nonimmediate_operand\" \"xm,<round_scalar_constraint>\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_SSE\""}, {"sha": "26ca87ce2f558a5833a6b996f5f0498878367c28", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=71838266e7857381ec1ea9d0cf0066e7992a73c5", "patch": "@@ -690,6 +690,10 @@\n #define __builtin_ia32_vsubph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vsubph_v32hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vmulph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vmulph_v32hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vdivph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vdivph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vaddsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vaddsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vsubsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vsubsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vmulsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vmulsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vdivsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vdivsh_v8hf_mask_round(A, B, C, D, 8)\n \n /* vpclmulqdqintrin.h */\n #define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) "}, {"sha": "ae35adb5ead7a0124b6f392a07c59c482b849c65", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=71838266e7857381ec1ea9d0cf0066e7992a73c5", "patch": "@@ -707,6 +707,10 @@\n #define __builtin_ia32_vsubph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vsubph_v32hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vmulph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vmulph_v32hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vdivph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vdivph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vaddsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vaddsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vsubsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vsubsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vmulsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vmulsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vdivsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vdivsh_v8hf_mask_round(A, B, C, D, 8)\n \n /* vpclmulqdqintrin.h */\n #define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) "}, {"sha": "e79edf0a5bb4796b65a01c61008191b6b8eae2b3", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=71838266e7857381ec1ea9d0cf0066e7992a73c5", "patch": "@@ -672,14 +672,26 @@ test_2 (_mm512_add_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_sub_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_mul_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_div_round_ph, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm_add_round_sh, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm_sub_round_sh, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm_mul_round_sh, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm_div_round_sh, __m128h, __m128h, __m128h, 8)\n test_3 (_mm512_maskz_add_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_sub_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_mul_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_div_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_3 (_mm_maskz_add_round_sh, __m128h, __mmask32, __m128h, __m128h, 8)\n+test_3 (_mm_maskz_sub_round_sh, __m128h, __mmask32, __m128h, __m128h, 8)\n+test_3 (_mm_maskz_mul_round_sh, __m128h, __mmask32, __m128h, __m128h, 8)\n+test_3 (_mm_maskz_div_round_sh, __m128h, __mmask32, __m128h, __m128h, 8)\n test_4 (_mm512_mask_add_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_sub_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_mul_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_div_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_4 (_mm_mask_add_round_sh, __m128h, __m128h, __mmask32, __m128h, __m128h, 8)\n+test_4 (_mm_mask_sub_round_sh, __m128h, __m128h, __mmask32, __m128h, __m128h, 8)\n+test_4 (_mm_mask_mul_round_sh, __m128h, __m128h, __mmask32, __m128h, __m128h, 8)\n+test_4 (_mm_mask_div_round_sh, __m128h, __m128h, __mmask32, __m128h, __m128h, 8)\n \n /* shaintrin.h */\n test_2 (_mm_sha1rnds4_epu32, __m128i, __m128i, __m128i, 1)"}, {"sha": "2c1f27d881aa4103dfa18c355528a04b7f60cf90", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=71838266e7857381ec1ea9d0cf0066e7992a73c5", "patch": "@@ -777,14 +777,26 @@ test_2 (_mm512_add_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_sub_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_mul_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_div_round_ph, __m512h, __m512h, __m512h, 8)\n+test_2 (_mm_add_round_sh, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm_sub_round_sh, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm_mul_round_sh, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm_div_round_sh, __m128h, __m128h, __m128h, 8)\n test_3 (_mm512_maskz_add_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_sub_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_mul_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_div_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_3 (_mm_maskz_add_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_3 (_mm_maskz_sub_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_3 (_mm_maskz_mul_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_3 (_mm_maskz_div_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm512_mask_add_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_sub_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_mul_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_div_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n+test_4 (_mm_mask_add_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm_mask_sub_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm_mask_mul_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_4 (_mm_mask_div_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n \n /* shaintrin.h */\n test_2 (_mm_sha1rnds4_epu32, __m128i, __m128i, __m128i, 1)"}, {"sha": "a89aef2aa8ea0832bd721373200c295fe7906c8b", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71838266e7857381ec1ea9d0cf0066e7992a73c5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=71838266e7857381ec1ea9d0cf0066e7992a73c5", "patch": "@@ -708,6 +708,10 @@\n #define __builtin_ia32_vsubph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vsubph_v32hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vmulph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vmulph_v32hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vdivph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vdivph_v32hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vaddsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vaddsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vsubsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vsubsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vmulsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vmulsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vdivsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vdivsh_v8hf_mask_round(A, B, C, D, 8)\n \n /* vpclmulqdqintrin.h */\n #define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) "}]}