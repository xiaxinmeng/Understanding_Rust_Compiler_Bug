{"sha": "76136f7f0ce8f4e27ac194af6429d378360b7b41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYxMzZmN2YwY2U4ZjRlMjdhYzE5NGFmNjQyOWQzNzgzNjBiN2I0MQ==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-05-13T15:24:12Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-10-07T11:51:51Z"}, "message": "amdgcn: Use scalar instructions for addptrdi3\n\nAllow addptr to use SPGRs as well as VGPRs for pointers.  This ought to\nprevent some unnecessary copying back and forth.\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn.md (unspec): Add UNSPEC_ADDPTR.\n\t(addptrdi3): Add SGPR alternative.", "tree": {"sha": "225eb556673ffaf7d4a9dd23e40020fd2f290219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/225eb556673ffaf7d4a9dd23e40020fd2f290219"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76136f7f0ce8f4e27ac194af6429d378360b7b41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76136f7f0ce8f4e27ac194af6429d378360b7b41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76136f7f0ce8f4e27ac194af6429d378360b7b41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76136f7f0ce8f4e27ac194af6429d378360b7b41/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d22eecf8754cc22c7a19bfab9834f6d918c7838d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d22eecf8754cc22c7a19bfab9834f6d918c7838d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d22eecf8754cc22c7a19bfab9834f6d918c7838d"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "763e77008adc89b9084ede169aa7ae021fae6226", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76136f7f0ce8f4e27ac194af6429d378360b7b41/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76136f7f0ce8f4e27ac194af6429d378360b7b41/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=76136f7f0ce8f4e27ac194af6429d378360b7b41", "patch": "@@ -67,6 +67,7 @@\n   UNSPECV_ICACHE_INV])\n \n (define_c_enum \"unspec\" [\n+  UNSPEC_ADDPTR\n   UNSPEC_VECTOR\n   UNSPEC_BPERMUTE\n   UNSPEC_SGPRBASE\n@@ -1219,29 +1220,47 @@\n \n ; \"addptr\" is the same as \"add\" except that it must not write to VCC or SCC\n ; as a side-effect.  Unfortunately GCN does not have a suitable instruction\n-; for this, so we use a custom VOP3 add with CC_SAVE_REG as a temp.\n-; Note that it is not safe to save/clobber/restore SCC because doing so will\n-; break data-flow analysis, so this must use vector registers.\n+; for this, so we use CC_SAVE_REG as a temp.\n+; Note that it is not safe to save/clobber/restore as separate insns because\n+; doing so will break data-flow analysis, so this must use multiple\n+; instructions in one insn.\n ;\n ; The \"v0\" should be just \"v\", but somehow the \"0\" helps LRA not loop forever\n ; on testcase pr54713-2.c with -O0. It's only an optimization hint anyway.\n+;\n+; The SGPR alternative is preferred as it is typically used with mov_sgprbase.\n \n (define_insn \"addptrdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\"\t\t \"= v\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\"\t \" v0\")\n-\t\t (match_operand:DI 2 \"nonmemory_operand\" \"vDA\")))]\n+  [(set (match_operand:DI 0 \"register_operand\"\t\t \"= v, Sg\")\n+    (unspec:DI [\n+\t(plus:DI (match_operand:DI 1 \"register_operand\"\t \"^v0,Sg0\")\n+\t\t (match_operand:DI 2 \"nonmemory_operand\" \"vDA,SgDB\"))]\n+\tUNSPEC_ADDPTR))]\n   \"\"\n   {\n-    rtx new_operands[4] = { operands[0], operands[1], operands[2],\n-\t\t\t    gen_rtx_REG (DImode, CC_SAVE_REG) };\n+    if (which_alternative == 0)\n+      {\n+\trtx new_operands[4] = { operands[0], operands[1], operands[2],\n+\t\t\t\tgen_rtx_REG (DImode, CC_SAVE_REG) };\n \n-    output_asm_insn (\"v_add%^_u32 %L0, %3, %L2, %L1\", new_operands);\n-    output_asm_insn (\"v_addc%^_u32 %H0, %3, %H2, %H1, %3\", new_operands);\n+\toutput_asm_insn (\"v_add%^_u32\\t%L0, %3, %L2, %L1\", new_operands);\n+\toutput_asm_insn (\"v_addc%^_u32\\t%H0, %3, %H2, %H1, %3\", new_operands);\n+      }\n+    else\n+      {\n+\trtx new_operands[4] = { operands[0], operands[1], operands[2],\n+\t\t\t\tgen_rtx_REG (BImode, CC_SAVE_REG) };\n+\n+\toutput_asm_insn (\"s_mov_b32\\t%3, scc\", new_operands);\n+\toutput_asm_insn (\"s_add_u32\\t%L0, %L1, %L2\", new_operands);\n+\toutput_asm_insn (\"s_addc_u32\\t%H0, %H1, %H2\", new_operands);\n+\toutput_asm_insn (\"s_cmpk_lg_u32\\t%3, 0\", new_operands);\n+      }\n \n     return \"\";\n   }\n-  [(set_attr \"type\" \"vmult\")\n-   (set_attr \"length\" \"16\")])\n+  [(set_attr \"type\" \"vmult,mult\")\n+   (set_attr \"length\" \"16,24\")])\n \n ;; }}}\n ;; {{{ ALU special cases: Minus"}]}