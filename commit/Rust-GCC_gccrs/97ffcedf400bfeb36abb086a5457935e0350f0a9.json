{"sha": "97ffcedf400bfeb36abb086a5457935e0350f0a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdmZmNlZGY0MDBiZmViMzZhYmIwODZhNTQ1NzkzNWUwMzUwZjBhOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-03-15T17:02:16Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-15T17:02:16Z"}, "message": "revert: forward_list.h: Support non-standard pointer types\n\n2010-03-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tRevert:\n\t2008-11-11  Bob Walters  <bob.s.walters@gmail.com>\n\n\t* include/bits/forward_list.h: Support non-standard pointer types\n\t(_Fwd_list_node_base): Add _Alloc template parameter.\n\t(_Fwd_list_node<>): Likewise.\n\t(_Fwd_list_iterator<>): Likewise.\n\t(_Fwd_list_const_iterator<>): Likewise.\n\t(_Fwd_list_node_base::_M_next, _M_transfer_after, _M_reverse_after):\n\tUse _Alloc<_Tp>::pointer.\n\t(_Fwd_list_iterator<>::_M_node): Use _Node_base::_Pointer.\n\t(_Fwd_list_base<>::_M_get_node, _M_create_node, _M_create_node,\n\t_M_insert_after, _M_put_node, _M_erase_after): Likewise.\n\t(_Fwd_list_const_iterator<>::_M_node): use _Node_base::_Const_pointer.\n\t(forward_list<>): Use __static_pointer_cast in place of static_cast,\n\tand __const_pointer_cast in place of const_cast.\n\t* include/bits/forward_list.tcc\n\t(_Fwd_list_node<>::_M_sort_after): Using _Pointer typedefs in place\n\tof standard pointers, __static_pointer_cast in place of static_cast.\n\t(_Fwd_list_base<>::_Fwd_list_base, _M_insert_after, _M_erase_after):\n\tLikewise.\n\t(forward_list<>::_M_initialize_dispatch, _M_fill_initialize,\n\tsplice_after, remove, remove_if, merge): Likewise.\n\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/1.cc: New.\n\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/2.cc:\n\tLikewise.\n\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/3.cc:\n\tLikewise.\n\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/4.cc:\n\tLikewise.\n\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/5.cc:\n\tLikewise.\n\t* testsuite/23_containers/forward_list/ext_pointer/operations/1.cc:\n\tLikewise.\n\t* testsuite/23_containers/forward_list/ext_pointer/operations/2.cc:\n\tLikewise.\n\t* testsuite/23_containers/forward_list/ext_pointer/operations/3.cc:\n\tLikewise.\n\t* testsuite/23_containers/forward_list/ext_pointer/operations/4.cc:\n\tLikewise.\n\t* testsuite/23_containers/forward_list/ext_pointer/operations/5.cc:\n\tLikewise.\n\t* testsuite/23_containers/forward_list/ext_pointer/operations/6.cc:\n\tLikewise.\n\t* testsuite/23_containers/forward_list/ext_pointer/operations/7.cc:\n\tLikewise.\n\t* testsuite/23_containers/forward_list/ext_pointer/requirements/1.cc:\n\tLikewise.\n\t* testsuite/23_containers/forward_list/ext_pointer/requirements/\n\texplicit_instantiation/1.cc: Likewise.\n\t* testsuite/23_containers/forward_list/ext_pointer/requirements/\n\texplicit_instantiation/3.cc: Likewise.\n\t* testsuite/23_containers/forward_list/ext_pointer/1.cc: Likewise.\n\nFrom-SVN: r157462", "tree": {"sha": "6088c364d5feb3cd50dda3d38d76e9a317c845e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6088c364d5feb3cd50dda3d38d76e9a317c845e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97ffcedf400bfeb36abb086a5457935e0350f0a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ffcedf400bfeb36abb086a5457935e0350f0a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97ffcedf400bfeb36abb086a5457935e0350f0a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ffcedf400bfeb36abb086a5457935e0350f0a9/comments", "author": null, "committer": null, "parents": [{"sha": "c21723389538275d17f3892a24c50b035baef829", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21723389538275d17f3892a24c50b035baef829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21723389538275d17f3892a24c50b035baef829"}], "stats": {"total": 1614, "additions": 219, "deletions": 1395}, "files": [{"sha": "794a0bfe7a5f0fb95a193c0b32e8c6c087313029", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ffcedf400bfeb36abb086a5457935e0350f0a9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ffcedf400bfeb36abb086a5457935e0350f0a9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=97ffcedf400bfeb36abb086a5457935e0350f0a9", "patch": "@@ -1,3 +1,59 @@\n+2010-03-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tRevert:\n+\t2008-11-11  Bob Walters  <bob.s.walters@gmail.com>\n+\n+\t* include/bits/forward_list.h: Support non-standard pointer types\n+\t(_Fwd_list_node_base): Add _Alloc template parameter.\n+\t(_Fwd_list_node<>): Likewise.\n+\t(_Fwd_list_iterator<>): Likewise.\n+\t(_Fwd_list_const_iterator<>): Likewise.\n+\t(_Fwd_list_node_base::_M_next, _M_transfer_after, _M_reverse_after):\n+\tUse _Alloc<_Tp>::pointer.\n+\t(_Fwd_list_iterator<>::_M_node): Use _Node_base::_Pointer.\n+\t(_Fwd_list_base<>::_M_get_node, _M_create_node, _M_create_node,\n+\t_M_insert_after, _M_put_node, _M_erase_after): Likewise.\n+\t(_Fwd_list_const_iterator<>::_M_node): use _Node_base::_Const_pointer.\n+\t(forward_list<>): Use __static_pointer_cast in place of static_cast,\n+\tand __const_pointer_cast in place of const_cast.\n+\t* include/bits/forward_list.tcc\n+\t(_Fwd_list_node<>::_M_sort_after): Using _Pointer typedefs in place\n+\tof standard pointers, __static_pointer_cast in place of static_cast.\n+\t(_Fwd_list_base<>::_Fwd_list_base, _M_insert_after, _M_erase_after):\n+\tLikewise.\n+\t(forward_list<>::_M_initialize_dispatch, _M_fill_initialize,\n+\tsplice_after, remove, remove_if, merge): Likewise.\n+\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/1.cc: New.\n+\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/2.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/3.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/4.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/5.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/ext_pointer/operations/1.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/ext_pointer/operations/2.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/ext_pointer/operations/3.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/ext_pointer/operations/4.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/ext_pointer/operations/5.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/ext_pointer/operations/6.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/ext_pointer/operations/7.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/ext_pointer/requirements/1.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/ext_pointer/requirements/\n+\texplicit_instantiation/1.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/ext_pointer/requirements/\n+\texplicit_instantiation/3.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/ext_pointer/1.cc: Likewise.\n+\n 2010-03-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/tr1_impl/array (swap(array<>&, array<>&)): Use member swap."}, {"sha": "1dcbefd221546a84bc5ba4a7ad973f6f60b4f81e", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 114, "deletions": 110, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ffcedf400bfeb36abb086a5457935e0350f0a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ffcedf400bfeb36abb086a5457935e0350f0a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=97ffcedf400bfeb36abb086a5457935e0350f0a9", "patch": "@@ -33,59 +33,76 @@\n \n #include <memory>\n #include <initializer_list>\n-#include <ext/cast.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  using __gnu_cxx::__static_pointer_cast;\n-  using __gnu_cxx::__const_pointer_cast;\n-\n   /**\n    *  @brief  A helper basic node class for %forward_list.\n    *          This is just a linked list with nothing inside it.\n    *          There are purely list shuffling utility methods here.\n    */\n-  template<typename _Alloc>\n-    struct _Fwd_list_node_base\n-    {\n-      // The type allocated by _Alloc cannot be this type, so we rebind\n-      typedef typename _Alloc::template rebind<_Fwd_list_node_base<_Alloc> >\n-        ::other::pointer        _Pointer;\n-      typedef typename _Alloc::template rebind<_Fwd_list_node_base<_Alloc> >\n-        ::other::const_pointer  _Const_pointer;\n-\n-      _Pointer _M_next;\n+  struct _Fwd_list_node_base\n+  {\n+    _Fwd_list_node_base() : _M_next(0) { }\n \n-      _Fwd_list_node_base() : _M_next(0) { }\n-\n-      static void\n-      swap(_Fwd_list_node_base& __x, _Fwd_list_node_base& __y)\n-      { std::swap(__x._M_next, __y._M_next); }\n-\n-      void\n-      _M_transfer_after(_Pointer __bbegin);\n+    _Fwd_list_node_base* _M_next;\n \n-      void\n-      _M_transfer_after(_Pointer __bbegin, _Pointer __bend);\n+    static void\n+    swap(_Fwd_list_node_base& __x, _Fwd_list_node_base& __y)\n+    { std::swap(__x._M_next, __y._M_next); }\n \n-      void\n-      _M_reverse_after();\n-    };\n+    void\n+    _M_transfer_after(_Fwd_list_node_base* __bbegin)\n+    {\n+      _Fwd_list_node_base* __bend = __bbegin;\n+      while (__bend && __bend->_M_next)\n+\t__bend = __bend->_M_next;\n+      _M_transfer_after(__bbegin, __bend);\n+    }\n+\n+    void\n+    _M_transfer_after(_Fwd_list_node_base* __bbegin,\n+\t\t      _Fwd_list_node_base* __bend)\n+    {\n+      _Fwd_list_node_base* __keep = __bbegin->_M_next;\n+      if (__bend)\n+\t{\n+\t  __bbegin->_M_next = __bend->_M_next;\n+\t  __bend->_M_next = _M_next;\n+\t}\n+      else\n+\t__bbegin->_M_next = 0;\n+      _M_next = __keep;\n+    }\n+\n+    void\n+    _M_reverse_after()\n+    {\n+      _Fwd_list_node_base* __tail = _M_next;\n+      if (!__tail)\n+\treturn;\n+      while (_Fwd_list_node_base* __temp = __tail->_M_next)\n+\t{\n+\t  _Fwd_list_node_base* __keep = _M_next;\n+\t  _M_next = __temp;\n+\t  __tail->_M_next = __temp->_M_next;\n+\t  _M_next->_M_next = __keep;\n+\t}\n+    }\n+  };\n \n   /**\n    *  @brief  A helper node class for %forward_list.\n    *          This is just a linked list with a data value in each node.\n    *          There is a sorting utility method.\n    */\n-  template<typename _Tp, typename _Alloc>\n-    struct _Fwd_list_node : public _Fwd_list_node_base<_Alloc>\n+  template<typename _Tp>\n+    struct _Fwd_list_node\n+    : public _Fwd_list_node_base\n     {\n-      typedef typename _Alloc::template rebind<_Fwd_list_node<_Tp, _Alloc> >\n-        ::other::pointer        _Pointer;\n-\n       template<typename... _Args>\n         _Fwd_list_node(_Args&&... __args)\n-        : _Fwd_list_node_base<_Alloc>(), \n+        : _Fwd_list_node_base(), \n           _M_value(std::forward<_Args>(__args)...) { }\n \n       _Tp _M_value;\n@@ -96,32 +113,32 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    * \n    *   All the functions are op overloads.\n    */\n-  template<typename _Tp, typename _Alloc>\n+  template<typename _Tp>\n     struct _Fwd_list_iterator\n     {\n-      typedef _Fwd_list_iterator<_Tp, _Alloc>   _Self;\n-      typedef _Fwd_list_node<_Tp, _Alloc>       _Node;\n-      typedef _Fwd_list_node_base<_Alloc>       _Node_base;\n+      typedef _Fwd_list_iterator<_Tp>            _Self;\n+      typedef _Fwd_list_node<_Tp>                _Node;\n \n-      typedef _Tp                               value_type;\n-      typedef typename _Alloc::pointer          pointer;\n-      typedef typename _Alloc::reference        reference;\n-      typedef typename _Alloc::difference_type  difference_type;\n-      typedef std::forward_iterator_tag         iterator_category;\n+      typedef _Tp                                value_type;\n+      typedef _Tp*                               pointer;\n+      typedef _Tp&                               reference;\n+      typedef ptrdiff_t                          difference_type;\n+      typedef std::forward_iterator_tag          iterator_category;\n \n-      _Fwd_list_iterator() : _M_node() { }\n+      _Fwd_list_iterator()\n+      : _M_node() { }\n \n       explicit\n-      _Fwd_list_iterator(typename _Node_base::_Pointer __n) \n+      _Fwd_list_iterator(_Fwd_list_node_base* __n) \n       : _M_node(__n) { }\n \n       reference\n       operator*() const\n-      { return __static_pointer_cast<_Node*>(_M_node)->_M_value; }\n+      { return static_cast<_Node*>(this->_M_node)->_M_value; }\n \n       pointer\n       operator->() const\n-      { return &__static_pointer_cast<_Node*>(_M_node)->_M_value; }\n+      { return &static_cast<_Node*>(this->_M_node)->_M_value; }\n \n       _Self&\n       operator++()\n@@ -155,44 +172,44 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n           return _Fwd_list_iterator(0);\n       }\n \n-      typename _Node_base::_Pointer _M_node;\n+      _Fwd_list_node_base* _M_node;\n     };\n \n   /**\n    *   @brief A forward_list::const_iterator.\n    * \n    *   All the functions are op overloads.\n    */\n-  template<typename _Tp, typename _Alloc>\n+  template<typename _Tp>\n     struct _Fwd_list_const_iterator\n     {\n-      typedef _Fwd_list_const_iterator<_Tp, _Alloc>   _Self;\n-      typedef const _Fwd_list_node<_Tp, _Alloc>       _Node;\n-      typedef const _Fwd_list_node_base<_Alloc>       _Node_base;\n-      typedef _Fwd_list_iterator<_Tp, _Alloc>         iterator;\n+      typedef _Fwd_list_const_iterator<_Tp>      _Self;\n+      typedef const _Fwd_list_node<_Tp>          _Node;\n+      typedef _Fwd_list_iterator<_Tp>            iterator;\n \n-      typedef _Tp                                     value_type;\n-      typedef typename _Alloc::const_pointer          pointer;\n-      typedef typename _Alloc::const_reference        reference;\n-      typedef typename _Alloc::difference_type        difference_type;\n-      typedef std::forward_iterator_tag               iterator_category;\n+      typedef _Tp                                value_type;\n+      typedef const _Tp*                         pointer;\n+      typedef const _Tp&                         reference;\n+      typedef ptrdiff_t                          difference_type;\n+      typedef std::forward_iterator_tag          iterator_category;\n \n-      _Fwd_list_const_iterator() : _M_node() { }\n+      _Fwd_list_const_iterator()\n+      : _M_node() { }\n \n       explicit\n-      _Fwd_list_const_iterator(typename _Node_base::_Const_pointer __n) \n+      _Fwd_list_const_iterator(const _Fwd_list_node_base* __n) \n       : _M_node(__n) { }\n \n       _Fwd_list_const_iterator(const iterator& __iter)\n       : _M_node(__iter._M_node) { }\n \n       reference\n       operator*() const\n-      { return __static_pointer_cast<_Node*>(_M_node)->_M_value; }\n+      { return static_cast<_Node*>(this->_M_node)->_M_value; }\n \n       pointer\n       operator->() const\n-      { return &__static_pointer_cast<_Node*>(_M_node)->_M_value; }\n+      { return &static_cast<_Node*>(this->_M_node)->_M_value; }\n \n       _Self&\n       operator++()\n@@ -226,25 +243,25 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n           return _Fwd_list_const_iterator(0);\n       }\n \n-      typename _Node_base::_Const_pointer _M_node;\n+      const _Fwd_list_node_base* _M_node;\n     };\n \n   /**\n    *  @brief  Forward list iterator equality comparison.\n    */\n-  template<typename _Tp, typename _Alloc>\n+  template<typename _Tp>\n     inline bool\n-    operator==(const _Fwd_list_iterator<_Tp, _Alloc>& __x,\n-               const _Fwd_list_const_iterator<_Tp, _Alloc>& __y)\n+    operator==(const _Fwd_list_iterator<_Tp>& __x,\n+               const _Fwd_list_const_iterator<_Tp>& __y)\n     { return __x._M_node == __y._M_node; }\n \n   /**\n    *  @brief  Forward list iterator inequality comparison.\n    */\n-  template<typename _Tp, typename _Alloc>\n+  template<typename _Tp>\n     inline bool\n-    operator!=(const _Fwd_list_iterator<_Tp, _Alloc>& __x,\n-               const _Fwd_list_const_iterator<_Tp, _Alloc>& __y)\n+    operator!=(const _Fwd_list_iterator<_Tp>& __x,\n+               const _Fwd_list_const_iterator<_Tp>& __y)\n     { return __x._M_node != __y._M_node; }\n \n   /**\n@@ -257,12 +274,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;\n \n       typedef typename _Alloc::template \n-        rebind<_Fwd_list_node<_Tp, _Tp_alloc_type>>::other _Node_alloc_type;\n+        rebind<_Fwd_list_node<_Tp>>::other _Node_alloc_type;\n \n       struct _Fwd_list_impl \n       : public _Node_alloc_type\n       {\n-        _Fwd_list_node_base<_Tp_alloc_type> _M_head;\n+        _Fwd_list_node_base _M_head;\n \n         _Fwd_list_impl()\n         : _Node_alloc_type(), _M_head()\n@@ -276,11 +293,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Fwd_list_impl _M_impl;\n \n     public:\n-      typedef _Fwd_list_iterator<_Tp, _Tp_alloc_type>        iterator;\n-      typedef _Fwd_list_const_iterator<_Tp, _Tp_alloc_type>  const_iterator;\n-\n-      typedef _Fwd_list_node<_Tp, _Tp_alloc_type>            _Node;\n-      typedef _Fwd_list_node_base<_Tp_alloc_type>            _Node_base;\n+      typedef _Fwd_list_iterator<_Tp>                 iterator;\n+      typedef _Fwd_list_const_iterator<_Tp>           const_iterator;\n+      typedef _Fwd_list_node<_Tp>                     _Node;\n \n       _Node_alloc_type&\n       _M_get_Node_allocator()\n@@ -302,28 +317,28 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       _Fwd_list_base(_Fwd_list_base&& __lst, const _Alloc& __a)\n       : _M_impl(__a)\n-      { _Node_base::swap(this->_M_impl._M_head, \n-                         __lst._M_impl._M_head); }\n+      { _Fwd_list_node_base::swap(this->_M_impl._M_head,\n+\t\t\t\t  __lst._M_impl._M_head); }\n \n       _Fwd_list_base(_Fwd_list_base&& __lst)\n       : _M_impl(__lst._M_get_Node_allocator())\n-      { _Node_base::swap(this->_M_impl._M_head, \n-                         __lst._M_impl._M_head); }\n+      { _Fwd_list_node_base::swap(this->_M_impl._M_head,\n+\t\t\t\t  __lst._M_impl._M_head); }\n \n       ~_Fwd_list_base()\n       { _M_erase_after(&_M_impl._M_head, 0); }\n \n     protected:\n \n-      typename _Node::_Pointer\n+      _Node*\n       _M_get_node()\n       { return _M_get_Node_allocator().allocate(1); }\n \n       template<typename... _Args>\n-        typename _Node::_Pointer\n+        _Node*\n         _M_create_node(_Args&&... __args)\n         {\n-          typename _Node::_Pointer __node = this->_M_get_node();\n+          _Node* __node = this->_M_get_node();\n           __try\n             {\n               _M_get_Node_allocator().construct(__node,\n@@ -339,19 +354,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         }\n \n       template<typename... _Args>\n-        typename _Node_base::_Pointer\n+        _Fwd_list_node_base*\n         _M_insert_after(const_iterator __pos, _Args&&... __args);\n \n       void\n-      _M_put_node(typename _Node::_Pointer __p)\n+      _M_put_node(_Node* __p)\n       { _M_get_Node_allocator().deallocate(__p, 1); }\n \n       void\n-      _M_erase_after(typename _Node_base::_Pointer __pos);\n+      _M_erase_after(_Fwd_list_node_base* __pos);\n \n       void\n-      _M_erase_after(typename _Node_base::_Pointer __pos, \n-                     typename _Node_base::_Pointer __last);\n+      _M_erase_after(_Fwd_list_node_base* __pos, \n+                     _Fwd_list_node_base* __last);\n     };\n \n   /**\n@@ -390,8 +405,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n     private:\n       typedef _Fwd_list_base<_Tp, _Alloc>                  _Base;\n-      typedef typename _Base::_Node                        _Node;\n-      typedef typename _Base::_Node_base                   _Node_base;\n+      typedef _Fwd_list_node<_Tp>                          _Node;\n+      typedef _Fwd_list_node_base                          _Node_base;\n       typedef typename _Base::_Tp_alloc_type               _Tp_alloc_type;\n \n     public:\n@@ -402,8 +417,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename _Tp_alloc_type::reference           reference;\n       typedef typename _Tp_alloc_type::const_reference     const_reference;\n  \n-      typedef typename _Base::iterator                     iterator;\n-      typedef typename _Base::const_iterator               const_iterator;\n+      typedef _Fwd_list_iterator<_Tp>                      iterator;\n+      typedef _Fwd_list_const_iterator<_Tp>                const_iterator;\n       typedef std::size_t                                  size_type;\n       typedef std::ptrdiff_t                               difference_type;\n       typedef _Alloc                                       allocator_type;\n@@ -731,8 +746,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       reference\n       front()\n       {\n-        _Node* __front =\n-\t  __static_pointer_cast<_Node*>(this->_M_impl._M_head._M_next);\n+        _Node* __front = static_cast<_Node*>(this->_M_impl._M_head._M_next);\n         return __front->_M_value;\n       }\n \n@@ -743,8 +757,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const_reference\n       front() const\n       {\n-        _Node* __front =\n-\t  __static_pointer_cast<_Node*>(this->_M_impl._M_head._M_next);\n+        _Node* __front = static_cast<_Node*>(this->_M_impl._M_head._M_next);\n         return __front->_M_value;\n       }\n \n@@ -865,8 +878,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       {\n         forward_list __tmp(__n, __val, this->_M_get_Node_allocator());\n         splice_after(__pos, std::move(__tmp));\n-\treturn iterator(__const_pointer_cast<typename _Node_base::_Pointer>\n-\t\t\t(__pos._M_node));\n+\treturn iterator(const_cast<_Node_base*>(__pos._M_node));\n       }\n \n       /**\n@@ -890,8 +902,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         {\n           forward_list __tmp(__first, __last, this->_M_get_Node_allocator());\n           splice_after(__pos, std::move(__tmp));\n-\t  return iterator(__const_pointer_cast<typename _Node_base::_Pointer>\n-\t\t\t  (__pos._M_node));\n+\t  return iterator(const_cast<_Node_base*>(__pos._M_node));\n         }\n \n       /**\n@@ -913,8 +924,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       {\n         forward_list __tmp(__il, this->_M_get_Node_allocator());\n         splice_after(__pos, std::move(__tmp));\n-\treturn iterator(__const_pointer_cast<typename _Node_base::_Pointer>\n-\t\t\t(__pos._M_node));\n+\treturn iterator(const_cast<_Node_base*>(__pos._M_node));\n       }\n \n       /**\n@@ -934,10 +944,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       void\n       erase_after(const_iterator __pos)\n-      {\n-        _Node_base* __tmp = __const_pointer_cast<_Node_base*>(__pos._M_node);\n-\tthis->_M_erase_after(__tmp);\n-      }\n+      { this->_M_erase_after(const_cast<_Node_base*>(__pos._M_node)); }\n \n       /**\n        *  @brief  Remove a range of elements.\n@@ -958,11 +965,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       void\n       erase_after(const_iterator __pos, const_iterator __last)\n-      {\n-        _Node_base* __tmpp = __const_pointer_cast<_Node_base*>(__pos._M_node);\n-\t_Node_base* __tmpl = __const_pointer_cast<_Node_base*>(__last._M_node);\n-        this->_M_erase_after(__tmpp, __tmpl);\n-      }\n+      { this->_M_erase_after(const_cast<_Node_base*>(__pos._M_node),\n+\t\t\t     const_cast<_Node_base*>(__last._M_node)); }\n \n       /**\n        *  @brief  Swaps data with another %forward_list."}, {"sha": "e3af42e12dd9b948187b9ff185b28b86d0123449", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 43, "deletions": 116, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ffcedf400bfeb36abb086a5457935e0350f0a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ffcedf400bfeb36abb086a5457935e0350f0a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=97ffcedf400bfeb36abb086a5457935e0350f0a9", "patch": "@@ -31,94 +31,43 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  template<typename _Alloc>\n-    void\n-    _Fwd_list_node_base<_Alloc>::\n-    _M_transfer_after(_Pointer __bbegin)\n-    {\n-      _Pointer __bend = __bbegin;\n-      while (__bend && __bend->_M_next)\n-\t__bend = __bend->_M_next;\n-      _M_transfer_after(__bbegin, __bend);\n-    }\n-\n-  template<typename _Alloc>\n-    void\n-    _Fwd_list_node_base<_Alloc>::\n-    _M_transfer_after(_Pointer __bbegin, _Pointer __bend)\n-    {\n-      _Pointer __keep = __bbegin->_M_next;\n-      if (__bend)\n-\t{\n-\t  __bbegin->_M_next = __bend->_M_next;\n-\t  __bend->_M_next = _M_next;\n-\t}\n-      else\n-\t__bbegin->_M_next = 0;\n-      _M_next = __keep;\n-    }\n- \n-  template<typename _Alloc>\n-    void\n-    _Fwd_list_node_base<_Alloc>::\n-    _M_reverse_after()\n-    {\n-      _Pointer __tail = _M_next;\n-      if (!__tail)\n-\treturn;\n-      while (_Pointer __temp = __tail->_M_next)\n-\t{\n-\t  _Pointer __keep = _M_next;\n-\t  _M_next = __temp;\n-\t  __tail->_M_next = __temp->_M_next;\n-\t  _M_next->_M_next = __keep;\n-\t}\n-    }\n-\n   template<typename _Tp, typename _Alloc>\n     _Fwd_list_base<_Tp, _Alloc>::\n     _Fwd_list_base(const _Fwd_list_base& __lst, const _Alloc& __a)\n     : _M_impl(__a)\n     {\n       this->_M_impl._M_head._M_next = 0;\n-      typename _Node_base::_Pointer __to = &this->_M_impl._M_head;\n-      typename _Node::_Pointer __curr \n-        = __static_pointer_cast<typename _Node::_Pointer>\n-                               (__lst._M_impl._M_head._M_next);\n+      _Fwd_list_node_base* __to = &this->_M_impl._M_head;\n+      _Node* __curr = static_cast<_Node*>(__lst._M_impl._M_head._M_next);\n+\n       while (__curr)\n         {\n           __to->_M_next = _M_create_node(__curr->_M_value);\n           __to = __to->_M_next;\n-          __curr = __static_pointer_cast<typename _Node::_Pointer>\n-                                        (__curr->_M_next);\n+          __curr = static_cast<_Node*>(__curr->_M_next);\n         }\n     }\n \n   template<typename _Tp, typename _Alloc>\n     template<typename... _Args>\n-      typename _Fwd_list_base<_Tp, _Alloc>::_Node_base::_Pointer\n+      _Fwd_list_node_base*\n       _Fwd_list_base<_Tp, _Alloc>::\n       _M_insert_after(const_iterator __pos, _Args&&... __args)\n       {\n-        typename _Node_base::_Pointer __to \n-          = __const_pointer_cast<typename _Node_base::_Pointer>\n-                                (__pos._M_node);\n-        typename _Node::_Pointer __thing \n-          = __static_pointer_cast<typename _Node::_Pointer>( \n-                _M_create_node(std::forward<_Args>(__args)...) );\n+        _Fwd_list_node_base* __to\n+\t  = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n+\t_Node* __thing = _M_create_node(std::forward<_Args>(__args)...);\n         __thing->_M_next = __to->_M_next;\n         __to->_M_next = __thing;\n-        return __static_pointer_cast<typename _Node_base::_Pointer>\n-                                    (__to->_M_next);\n+        return __to->_M_next;\n       }\n \n   template<typename _Tp, typename _Alloc>\n     void\n     _Fwd_list_base<_Tp, _Alloc>::\n-    _M_erase_after(typename _Node_base::_Pointer __pos)\n+    _M_erase_after(_Fwd_list_node_base* __pos)\n     {\n-      typename _Node::_Pointer __curr\n-        = __static_pointer_cast<typename _Node::_Pointer>(__pos->_M_next);\n+      _Node* __curr = static_cast<_Node*>(__pos->_M_next);\n       __pos->_M_next = __curr->_M_next;\n       _M_get_Node_allocator().destroy(__curr);\n       _M_put_node(__curr);\n@@ -127,16 +76,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _Tp, typename _Alloc>\n     void\n     _Fwd_list_base<_Tp, _Alloc>::\n-    _M_erase_after(typename _Node_base::_Pointer __pos, \n-                   typename _Node_base::_Pointer __last)\n+    _M_erase_after(_Fwd_list_node_base* __pos, \n+                   _Fwd_list_node_base* __last)\n     {\n-      typename _Node::_Pointer __curr \n-        = __static_pointer_cast<typename _Node::_Pointer>(__pos->_M_next);\n+      _Node* __curr = static_cast<_Node*>(__pos->_M_next);\n       while (__curr != __last)\n         {\n-          typename _Node::_Pointer __temp = __curr;\n-          __curr = __static_pointer_cast<typename _Node::_Pointer>\n-                                        (__curr->_M_next);\n+          _Node* __temp = __curr;\n+          __curr = static_cast<_Node*>(__curr->_M_next);\n           _M_get_Node_allocator().destroy(__temp);\n           _M_put_node(__temp);\n         }\n@@ -151,7 +98,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n                              __false_type)\n       {\n-        typename _Node_base::_Pointer __to = &this->_M_impl._M_head;\n+        _Node_base* __to = &this->_M_impl._M_head;\n         for (; __first != __last; ++__first)\n           {\n             __to->_M_next = this->_M_create_node(*__first);\n@@ -166,7 +113,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     forward_list<_Tp, _Alloc>::\n     _M_fill_initialize(size_type __n, const value_type& __value)\n     {\n-      typename _Node_base::_Pointer __to = &this->_M_impl._M_head;\n+      _Node_base* __to = &this->_M_impl._M_head;\n       for (; __n > 0; --__n)\n         {\n           __to->_M_next = this->_M_create_node(__value);\n@@ -179,7 +126,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     forward_list(size_type __n)\n     : _Base()\n     {\n-      typename _Node_base::_Pointer __to = &this->_M_impl._M_head;\n+      _Node_base* __to = &this->_M_impl._M_head;\n       for (; __n > 0; --__n)\n         {\n           __to->_M_next = this->_M_create_node();\n@@ -262,13 +209,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       if (!__list.empty() && &__list != this)\n         {\n-          typename _Node_base::_Pointer __tmp \n-            = __const_pointer_cast<typename _Node_base::_Pointer>\n-                                  (__pos._M_node);\n+          _Node_base* __tmp = const_cast<_Node_base*>(__pos._M_node);\n           const_iterator __before = __list.cbefore_begin();\n-          __tmp->_M_transfer_after(__const_pointer_cast\n-                                     <typename _Node_base::_Pointer>\n-                                     (__before._M_node));\n+          __tmp->_M_transfer_after(const_cast<_Node_base*>(__before._M_node));\n         }\n     }\n \n@@ -278,32 +221,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     splice_after(const_iterator __pos, forward_list&& __list,\n                  const_iterator __before, const_iterator __last)\n     {\n-      typename _Node_base::_Pointer __tmp \n-        = __const_pointer_cast<typename _Node_base::_Pointer>(__pos._M_node);\n-      __tmp->_M_transfer_after(__const_pointer_cast\n-                                 <typename _Node_base::_Pointer>\n-                                 (__before._M_node),\n-                               __const_pointer_cast\n-                                 <typename _Node_base::_Pointer>\n-                                 (__last._M_node));\n+      _Node_base* __tmp = const_cast<_Node_base*>(__pos._M_node);\n+      __tmp->_M_transfer_after(const_cast<_Node_base*>(__before._M_node),\n+                               const_cast<_Node_base*>(__last._M_node));\n     }\n \n   template<typename _Tp, typename _Alloc>\n     void\n     forward_list<_Tp, _Alloc>::\n     remove(const _Tp& __val)\n     {\n-      typename _Node::_Pointer __curr \n-        = __static_pointer_cast<typename _Node::_Pointer>\n-                               (&this->_M_impl._M_head);\n-      while (typename _Node::_Pointer __temp = \n-             __static_pointer_cast<typename _Node::_Pointer>(__curr->_M_next))\n+      _Node* __curr = static_cast<_Node*>(&this->_M_impl._M_head);\n+      while (_Node* __temp = static_cast<_Node*>(__curr->_M_next))\n         {\n           if (__temp->_M_value == __val)\n             this->_M_erase_after(__curr);\n           else\n-            __curr = __static_pointer_cast<typename _Node::_Pointer>\n-                                          (__curr->_M_next);\n+            __curr = static_cast<_Node*>(__curr->_M_next);\n         }\n     }\n \n@@ -313,17 +247,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       forward_list<_Tp, _Alloc>::\n       remove_if(_Pred __pred)\n       {\n-        typename _Node::_Pointer __curr \n-          = __static_pointer_cast<typename _Node::_Pointer>\n-                                 (&this->_M_impl._M_head);\n-        while (typename _Node::_Pointer __temp = \n-               __static_pointer_cast<typename _Node::_Pointer>(__curr->_M_next))\n+\t_Node* __curr = static_cast<_Node*>(&this->_M_impl._M_head);\n+        while (_Node* __temp = static_cast<_Node*>(__curr->_M_next))\n           {\n             if (__pred(__temp->_M_value))\n               this->_M_erase_after(__curr);\n             else\n-              __curr = __static_pointer_cast<typename _Node::_Pointer>\n-                                            (__curr->_M_next);\n+              __curr = static_cast<_Node*>(__curr->_M_next);\n           }\n       }\n \n@@ -354,12 +284,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       forward_list<_Tp, _Alloc>::\n       merge(forward_list&& __list, _Comp __comp)\n       {\n-        typename _Node_base::_Pointer __node = &this->_M_impl._M_head;\n+        _Node_base* __node = &this->_M_impl._M_head;\n         while (__node->_M_next && __list._M_impl._M_head._M_next)\n           {\n-            if (__comp(__static_pointer_cast<typename _Node::_Pointer>\n+            if (__comp(static_cast<_Node*>\n                        (__list._M_impl._M_head._M_next)->_M_value,\n-                       __static_pointer_cast<typename _Node::_Pointer>\n+                       static_cast<_Node*>\n                        (__node->_M_next)->_M_value))\n               __node->_M_transfer_after(&__list._M_impl._M_head,\n                                         __list._M_impl._M_head._M_next);\n@@ -400,21 +330,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       forward_list<_Tp, _Alloc>::\n       sort(_Comp __comp)\n       {\n-\ttypedef typename _Node::_Pointer _Pointer;\n-\n         // If `next' is 0, return immediately.\n-        _Pointer __list =\n-\t  __static_pointer_cast<_Pointer>(this->_M_impl._M_head._M_next);\n+        _Node* __list = static_cast<_Node*>(this->_M_impl._M_head._M_next);\n         if (!__list)\n           return;\n \n         unsigned long __insize = 1;\n \n         while (1)\n           {\n-            _Pointer __p = __list;\n+            _Node* __p = __list;\n             __list = 0;\n-            _Pointer __tail = 0;\n+            _Node* __tail = 0;\n \n             // Count number of merges we do in this pass.\n             unsigned long __nmerges = 0;\n@@ -424,12 +351,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n                 ++__nmerges;\n                 // There exists a merge to be done.\n                 // Step `insize' places along from p.\n-                _Pointer __q = __p;\n+                _Node* __q = __p;\n                 unsigned long __psize = 0;\n                 for (unsigned long __i = 0; __i < __insize; ++__i)\n                   {\n                     ++__psize;\n-                    __q = __static_pointer_cast<_Pointer>(__q->_M_next);\n+                    __q = static_cast<_Node*>(__q->_M_next);\n                     if (!__q)\n                       break;\n                   }\n@@ -441,33 +368,33 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n                 while (__psize > 0 || (__qsize > 0 && __q))\n                   {\n                     // Decide whether next node of merge comes from p or q.\n-                    _Pointer __e;\n+                    _Node* __e;\n                     if (__psize == 0)\n                       {\n                         // p is empty; e must come from q.\n                         __e = __q;\n-                        __q = __static_pointer_cast<_Pointer>(__q->_M_next);\n+                        __q = static_cast<_Node*>(__q->_M_next);\n                         --__qsize;\n                       }\n                     else if (__qsize == 0 || !__q)\n                       {\n                         // q is empty; e must come from p.\n                         __e = __p;\n-                        __p = __static_pointer_cast<_Pointer>(__p->_M_next);\n+                        __p = static_cast<_Node*>(__p->_M_next);\n                         --__psize;\n                       }\n                     else if (__comp(__p->_M_value, __q->_M_value))\n                       {\n                         // First node of p is lower; e must come from p.\n                         __e = __p;\n-                        __p = __static_pointer_cast<_Pointer>(__p->_M_next);\n+                        __p = static_cast<_Node*>(__p->_M_next);\n                         --__psize;\n                       }\n                     else\n                       {\n                         // First node of q is lower; e must come from q.\n                         __e = __q;\n-                        __q = __static_pointer_cast<_Pointer>(__q->_M_next);\n+                        __q = static_cast<_Node*>(__q->_M_next);\n                         --__qsize;\n                       }\n "}, {"sha": "b9a2ff20b56570537ce807718591086eddcbf829", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/capacity/1.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ffcedf400bfeb36abb086a5457935e0350f0a9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ffcedf400bfeb36abb086a5457935e0350f0a9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcapacity%2F1.cc?ref=97ffcedf400bfeb36abb086a5457935e0350f0a9", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,8 +39,7 @@ test01()\n   VERIFY(fld.empty() == true);\n \n   VERIFY( (fld.max_size()\n-\t   == std::allocator<std::_Fwd_list_node<double,\n-\t                     std::allocator<double> > >().max_size()) );\n+\t   == std::allocator<std::_Fwd_list_node<double> >().max_size()) );\n }\n \n int"}, {"sha": "b530e2ff0ae6d5356127a426dabd742c5fd2a394", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/1.cc", "status": "removed", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2F1.cc?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,98 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 23.2.3.n forward_list capacity [lib.forward_list.capacity]\n-\n-#include <forward_list>\n-#include <ext/extptr_allocator.h>\n-#include <testsuite_hooks.h>\n-\n-bool test __attribute__((unused)) = true;\n-\n-using __gnu_cxx::_ExtPtr_allocator;\n-\n-// This test verifies the following.\n-//\n-void\n-test01()\n-{\n-  std::forward_list<double, _ExtPtr_allocator<double> > fld;\n-\n-  VERIFY(fld.empty() == true);\n-  fld.push_front(1.0);\n-  VERIFY(fld.empty() == false);\n-  fld.resize(0);\n-  VERIFY(fld.empty() == true);\n-}\n-\n-void\n-test02()\n-{\n-  std::forward_list<int, _ExtPtr_allocator<int> > a, b;\n-  a.push_front(1);\n-\n-  b = std::move(a);\n-  VERIFY(b.empty() == false);\n-  VERIFY(*b.begin() == 1);\n-  VERIFY(a.empty() == true);\n-\n-  std::forward_list<int, _ExtPtr_allocator<int> > c(std::move(b));\n-  VERIFY(c.empty() == false);\n-  (*c.begin() == 1 );\n-  VERIFY( b.empty() == true );\n-}\n-\n-// Test various constrcutors \n-void\n-test03()\n-{\n-  const int ni = 10;\n-  int i[ni] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n-\n-  _ExtPtr_allocator<int>  alloc;\n-\n-  std::forward_list<int, _ExtPtr_allocator<int> > flccin(i, i+ni);\n-  std::forward_list<int, _ExtPtr_allocator<int> > flc(flccin);\n-  std::forward_list<int, _ExtPtr_allocator<int> > flm(std::move(flccin));\n-  std::forward_list<int, _ExtPtr_allocator<int> > flcc(flccin, alloc );\n-  std::forward_list<int, _ExtPtr_allocator<int> > flmc(\n-\tstd::forward_list<int, _ExtPtr_allocator<int> >(i, i+ni), alloc);\n-  std::forward_list<double, _ExtPtr_allocator<double> > flil(\n-        {1.0, 2.0, 3.0, 4.0, 5.0});\n-}\n-\n-// Test constrcutors \n-//   Construction from given number of default item\n-//   Construction from given number of given item\n-void\n-test04()\n-{\n-  std::forward_list<double, _ExtPtr_allocator<double> > flvd(10);\n-  std::forward_list<float, _ExtPtr_allocator<float> > flv(10, 5.0F);\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-  return 0;\n-}"}, {"sha": "8ea83f1d8a639160df1ffa3ff929e075e19871a7", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/modifiers/1.cc", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F1.cc?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,75 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 23.2.3.n forward_list xxx [lib.forward_list.xxx]\n-\n-#include <forward_list>\n-#include <ext/extptr_allocator.h>\n-#include <testsuite_hooks.h>\n-\n-#include <array>\n-\n-bool test __attribute__((unused)) = true;\n-\n-using __gnu_cxx::_ExtPtr_allocator;\n-\n-class PathPoint\n-{\n-public:\n-  PathPoint(char t, std::array<double, 3> & c)\n-  : type(t), coord(c) { }\n-  char getType() const { return type; }\n-private:\n-  char type;\n-  std::array<double, 3> coord;\n-};\n-\n-// This test verifies the following.\n-//   emplace_front\n-//   pop_front\n-//   emplace_after\n-void\n-test01()\n-{\n-  std::forward_list<PathPoint, _ExtPtr_allocator<PathPoint> > path;\n-  std::array<double, 3> coord1 = { { 0.0, 1.0, 2.0 } };\n-  path.emplace_front('a', coord1);\n-\n-  std::forward_list<PathPoint, _ExtPtr_allocator<PathPoint> >::const_iterator pos = path.cbegin();\n-\n-  std::array<double, 3> coord2 = { { 3.0, 4.0, 5.0 } };\n-  path.emplace_after(pos, 'b', coord2);\n-\n-  VERIFY(path.front().getType() == 'a');\n-\n-  path.pop_front();\n-\n-  VERIFY(path.front().getType() == 'b');\n-\n-  path.pop_front();\n-\n-  VERIFY(path.empty() == true);\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "d9a437e09e0dc1a3ee9005c30af603842a88d025", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/modifiers/2.cc", "status": "removed", "additions": 0, "deletions": 160, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F2.cc?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,160 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 23.2.3.n forward_list xxx [lib.forward_list.xxx]\n-\n-#include <forward_list>\n-#include <ext/extptr_allocator.h>\n-#include <testsuite_hooks.h>\n-\n-#include <string>\n-\n-bool test __attribute__((unused)) = true;\n-\n-using __gnu_cxx::_ExtPtr_allocator;\n-\n-// This test verifies the following:\n-//   insert_after single item\n-//   before_begin iterator\n-void\n-test01()\n-{\n-  std::forward_list<int, _ExtPtr_allocator<int> > fl(\n-    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n-\n-  std::forward_list<int, _ExtPtr_allocator<int> >::iterator ret\n-    = fl.insert_after(fl.before_begin(), 42);\n-  VERIFY(ret == fl.begin());\n-  VERIFY(fl.front() == 42);\n-}\n-\n-// This test verifies the following:\n-void\n-test02()\n-{\n-  std::forward_list<int, _ExtPtr_allocator<int> > fl(\n-    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n-\n-  std::forward_list<int, _ExtPtr_allocator<int> >::const_iterator pos\n-    = fl.cbegin();\n-\n-  ++pos;\n-  VERIFY(*pos == 1);\n-\n-  // Note: Calling l.insert_after(pos, 5, 42); without the long five\n-  // gets resolved to the iterator range version and fails to compile!\n-  std::forward_list<int, _ExtPtr_allocator<int> >::iterator ret\n-    = fl.insert_after(pos, 5, 42);\n-  VERIFY(ret == pos);\n-  VERIFY(*pos == 1);\n-\n-  ++pos;\n-  VERIFY(*pos == 42);\n-  ++pos;\n-  ++pos;\n-  ++pos;\n-  ++pos;\n-  VERIFY(*pos == 42);\n-}\n-\n-// This test verifies the following:\n-void\n-test03()\n-{\n-  std::forward_list<int, _ExtPtr_allocator<int> > fl(\n-    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n-\n-  std::forward_list<int, _ExtPtr_allocator<int> >::const_iterator pos\n-    = fl.cbegin();\n-\n-  ++pos;\n-  VERIFY(*pos == 1);\n-\n-  int i[3] = {666, 777, 888};\n-  std::forward_list<int, _ExtPtr_allocator<int> >::iterator ret\n-    = fl.insert_after(pos, i, i + 3);\n-  VERIFY(ret == pos);\n-  VERIFY(*pos == 1);\n-\n-  ++pos;\n-  ++pos;\n-  ++pos;\n-  VERIFY(*pos == 888);\n-  ++pos;\n-  VERIFY(*pos == 2);\n-}\n-\n-// This test verifies the following:\n-void\n-test04()\n-{\n-  std::forward_list<int, _ExtPtr_allocator<int> > fl(\n-    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n-\n-  std::forward_list<int, _ExtPtr_allocator<int> >::const_iterator \n-    pos = fl.cbegin();\n-\n-  ++pos;\n-  VERIFY(*pos == 1);\n-\n-  std::forward_list<int, _ExtPtr_allocator<int> >::iterator ret\n-    = fl.insert_after(pos, {-1, -2, -3, -4, -5});\n-  VERIFY(ret == pos);\n-  VERIFY(*pos == 1);\n-\n-  ++pos;\n-  ++pos;\n-  ++pos;\n-  VERIFY(*pos == -3);\n-}\n-\n-// This test verifies the following:\n-void\n-test05()\n-{\n-  std::forward_list<std::string, _ExtPtr_allocator<std::string> > fl(\n-    {\"AAA\", \"BBB\", \"CCC\"});\n-\n-  std::forward_list<std::string, _ExtPtr_allocator<std::string> >::\n-    const_iterator pos = fl.cbegin();\n-\n-  ++pos;\n-  VERIFY(*pos == \"BBB\");\n-\n-  std::string x( \"XXX\" );\n-  std::forward_list<std::string, _ExtPtr_allocator<std::string> >::iterator ret\n-    = fl.insert_after(pos, std::move(x));\n-  VERIFY(*pos == \"BBB\");\n-  ++pos;\n-  VERIFY(ret == pos);\n-  VERIFY(*pos == \"XXX\");\n-  ++pos;\n-  VERIFY(*pos == \"CCC\");\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-  test05();\n-  return 0;\n-}"}, {"sha": "5b43bbb95f9142b1d6dba026c510e9b970d42114", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/modifiers/3.cc", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F3.cc?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,100 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 23.2.3.n forward_list xxx [lib.forward_list.xxx]\n-\n-#include <forward_list>\n-#include <ext/extptr_allocator.h>\n-#include <testsuite_hooks.h>\n-\n-bool test __attribute__((unused)) = true;\n-\n-using __gnu_cxx::_ExtPtr_allocator;\n-\n-// This test verifies the following:\n-//   cbegin\n-//   erase_after one iterator\n-//   pos is useable and points to current element\n-void\n-test01()\n-{\n-  std::forward_list<int, _ExtPtr_allocator<int> > fl(\n-    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n-\n-  std::forward_list<int, _ExtPtr_allocator<int> >::const_iterator \n-    pos = fl.cbegin();\n-\n-  ++pos;\n-  VERIFY(*pos == 1);\n-\n-  fl.erase_after(pos);\n-\n-  VERIFY(*pos == 1);\n-  ++pos;\n-  VERIFY(*pos == 3);\n-}\n-\n-// This test verifies the following:\n-//   cbegin\n-//   erase_after iterator range\n-//   pos is useable and points to current element\n-void\n-test02()\n-{\n-  std::forward_list<int, _ExtPtr_allocator<int> > fl(\n-    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n-\n-  std::forward_list<int, _ExtPtr_allocator<int> >::const_iterator \n-    pos = fl.cbegin();\n-\n-  ++pos;\n-  VERIFY(*pos == 1);\n-\n-  std::forward_list<int, _ExtPtr_allocator<int> >::iterator \n-    stop = fl.begin();\n-\n-  ++stop;\n-  ++stop;\n-  ++stop;\n-  ++stop;\n-  VERIFY(*stop == 4);\n-\n-  fl.erase_after(pos, stop);\n-\n-  VERIFY(*pos == 1);\n-  ++pos;\n-  VERIFY(*pos == 4);\n-  VERIFY(std::distance(fl.begin(), fl.end()) == 8);\n-\n-  fl.erase_after(pos, fl.end());\n-  VERIFY(++pos == fl.end());\n-  VERIFY(std::distance(fl.begin(), fl.end()) == 3);\n-\n-  fl.erase_after(fl.before_begin(), pos);\n-  VERIFY(std::distance(fl.begin(), fl.end()) == 0);\n-  VERIFY(fl.empty());\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-  test02();\n-  return 0;\n-}"}, {"sha": "051ac71ec894d0c255677a30448ae13173b82a7b", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/modifiers/4.cc", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F4.cc?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,48 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 23.2.3.n forward_list xxx [lib.forward_list.xxx]\n-\n-#include <forward_list>\n-#include <ext/extptr_allocator.h>\n-#include <testsuite_hooks.h>\n-\n-bool test __attribute__((unused)) = true;\n-\n-\n-// This test verifies the following:\n-//   swap\n-void\n-test01()\n-{\n-  std::forward_list<int> fl1({0, 1, 2, 3, 4, 5});\n-  std::forward_list<int> fl2({666, 777, 888});\n-\n-  fl1.swap(fl2);\n-\n-  VERIFY(fl1.front() == 666);\n-  VERIFY(fl2.front() == 0);\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "5ddbfe75639e24a2120a32eeaac3c9c8e69d7c6f", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/modifiers/5.cc", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F5.cc?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,48 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 23.2.3.n forward_list xxx [lib.forward_list.xxx]\n-\n-#include <forward_list>\n-#include <ext/extptr_allocator.h>\n-#include <testsuite_hooks.h>\n-\n-bool test __attribute__((unused)) = true;\n-\n-// This test verifies the following:\n-//   clear\n-void\n-test01()\n-{\n-  std::forward_list<int, __gnu_cxx::_ExtPtr_allocator<int> > fl(\n-    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n-\n-  VERIFY(fl.empty() == false);\n-\n-  fl.clear();\n-\n-  VERIFY(fl.empty() == true);\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "8b5afdd980b8da0207f0c6baa5a550b74bef1e02", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/operations/1.cc", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F1.cc?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,115 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 23.2.3.n forward_list xxx [lib.forward_list.xxx]\n-\n-#include <forward_list>\n-#include <testsuite_hooks.h>\n-#include <ext/extptr_allocator.h>\n-\n-using __gnu_cxx::_ExtPtr_allocator;\n-\n-bool test __attribute__((unused)) = true;\n-\n-// This test verifies the following:\n-//   \n-void\n-test01()\n-{\n-  typedef std::forward_list<double, _ExtPtr_allocator<double> > fwd_list_type;\n-\n-  fwd_list_type a = {0.0, 1.0, 2.0, 3.0, 4.0};\n-  fwd_list_type::const_iterator posa = a.cbefore_begin();\n-\n-  fwd_list_type x = {666.0, 777.0, 888.0};\n-\n-  a.splice_after(posa, std::move(x));\n-\n-  ++posa;\n-  VERIFY(*posa == 666.0);\n-\n-  VERIFY(x.empty() == true);\n-}\n-\n-// This test verifies the following:\n-//   \n-void\n-test02()\n-{\n-  typedef std::forward_list<double, _ExtPtr_allocator<double> > fwd_list_type;\n-\n-  fwd_list_type a = {0.0, 1.0, 2.0, 3.0, 4.0};\n-  fwd_list_type::const_iterator posa = a.cbefore_begin();\n-  ++posa;\n-  VERIFY(*posa == 0.0);\n-\n-  fwd_list_type y = {10.0, 11.0, 12.0, 13.0, 14.0, 15.0};\n-  fwd_list_type::const_iterator befy = y.cbefore_begin();\n-  ++befy;\n-  VERIFY(*befy == 10.0);\n-  fwd_list_type::const_iterator endy = befy;\n-  ++endy;\n-  ++endy;\n-  ++endy;\n-  ++endy;\n-  VERIFY(*endy == 14.0);\n-\n-  a.splice_after(posa, std::move(y), befy, endy);\n-  VERIFY(*posa == 0.0);\n-\n-  VERIFY(*befy == 10.0);\n-  ++befy;\n-  VERIFY(*befy == 15.0);\n-}\n-\n-// This test verifies the following:\n-//   \n-void\n-test03()\n-{\n-  typedef std::forward_list<double, _ExtPtr_allocator<double> > fwd_list_type;\n-\n-  fwd_list_type a = {0.0, 1.0, 2.0, 3.0, 4.0};\n-  fwd_list_type::const_iterator posa = a.cbefore_begin();\n-  ++posa;\n-  ++posa;\n-  VERIFY(*posa == 1.0);\n-\n-  fwd_list_type z = {42.0, 43.0, 44.0};\n-  fwd_list_type::const_iterator posz = z.begin();\n-  VERIFY(*posz == 42.0);\n-\n-  a.splice_after(posa, std::move(z), posz);\n-  VERIFY(*posa == 1.0);\n-  ++posa;\n-  VERIFY(*posa == 43.0);\n-\n-  VERIFY(*posz == 42.0);\n-  ++posz;\n-  VERIFY(*posz == 44.0);\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  return 0;\n-}"}, {"sha": "637923fbba0a8fc82ce86aaf7bc10bacff164d36", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/operations/2.cc", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F2.cc?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,56 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 23.2.3.n forward_list xxx [lib.forward_list.xxx]\n-\n-#include <forward_list>\n-#include <testsuite_hooks.h>\n-#include <ext/extptr_allocator.h>\n-\n-using __gnu_cxx::_ExtPtr_allocator;\n-\n-bool test __attribute__((unused)) = true;\n-\n-// This test verifies the following:\n-//   remove\n-void\n-test01()\n-{\n-  std::forward_list<int, _ExtPtr_allocator<int> > fl =\n-    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n-\n-  fl.remove(7);\n-\n-  std::forward_list<int, _ExtPtr_allocator<int> >::const_iterator \n-    pos = fl.cbefore_begin();\n-\n-  for (std::size_t i = 0; i < 7; ++i)\n-    ++pos;\n-  VERIFY(*pos == 6);\n-\n-  ++pos;\n-  VERIFY(*pos == 8);\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "95a89d01eeab9a59497a97dd1d688d2580467cea", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/operations/3.cc", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F3.cc?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,52 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 23.2.3.n forward_list xxx [lib.forward_list.xxx]\n-\n-#include <forward_list>\n-#include <testsuite_hooks.h>\n-#include <ext/extptr_allocator.h>\n-\n-#include <algorithm>\n-\n-bool test __attribute__((unused)) = true;\n-\n-using __gnu_cxx::_ExtPtr_allocator;\n-\n-// This test verifies the following:\n-//   remove_if\n-void\n-test01()\n-{\n-  std::forward_list<int, _ExtPtr_allocator<int> > fl =\n-    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n-\n-  fl.remove_if(std::bind2nd(std::less<int>(),5));\n-\n-  std::forward_list<int, _ExtPtr_allocator<int> >::const_iterator \n-    pos = fl.cbegin();\n-  VERIFY(*pos == 5);\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "5b2e0344889833aaad831def3ebaf80baa436562", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/operations/4.cc", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F4.cc?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,85 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 23.2.3.n forward_list xxx [lib.forward_list.xxx]\n-\n-#include <forward_list>\n-#include <testsuite_hooks.h>\n-#include <ext/extptr_allocator.h>\n-\n-using __gnu_cxx::_ExtPtr_allocator;\n-\n-bool test __attribute__((unused)) = true;\n-\n-// This test verifies the following:\n-//   unique\n-void\n-test01()\n-{\n-  std::forward_list<int, _ExtPtr_allocator<int> > fl = \n-    {99, 5, 99, 6, -5, 666, 777, 888, 42, 42, 42, 42, 42, 7, 0, 0, 0, 9, 9, 9};\n-\n-  fl.unique();\n-\n-  std::forward_list<int, _ExtPtr_allocator<int> > fl2 = \n-    {99, 5, 99, 6, -5, 666, 777, 888, 42, 7, 0, 9};\n-\n-  VERIFY(fl == fl2);\n-}\n-\n-//  Test comparison predicate.\n-template<typename Num>\n-  class Mod\n-  {\n-  public:\n-    Mod(const Num & mod)\n-      {\n-        m = mod;\n-      }\n-    bool operator()(const Num i, const Num j)\n-      {\n-        return i%m == j%m;\n-      }\n-  private:\n-    Num m;\n-  };\n-\n-// This test verifies the following:\n-//   unique with predicate\n-void\n-test02()\n-{\n-  std::forward_list<int, _ExtPtr_allocator<int> > fl = \n-    {99, 5, 99, 6, -5, 666, 777, 888, 42, 7, 0, 9};\n-\n-  fl.unique(Mod<int>(111));\n-\n-  std::forward_list<int, _ExtPtr_allocator<int> > fl2 = \n-    {99, 5, 99, 6, -5, 666, 42, 7, 0, 9};\n-\n-  VERIFY(fl == fl2);\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-  test02();\n-  return 0;\n-}"}, {"sha": "13d15b39d122941328810a21efab2ab32fcd3839", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/operations/5.cc", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F5.cc?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,52 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 23.2.3.n forward_list xxx [lib.forward_list.xxx]\n-\n-#include <forward_list>\n-#include <testsuite_hooks.h>\n-#include <ext/extptr_allocator.h>\n-\n-using __gnu_cxx::_ExtPtr_allocator;\n-\n-bool test __attribute__((unused)) = true;\n-\n-// This test verifies the following:\n-//   \n-void\n-test01()\n-{\n-  typedef std::forward_list<double, _ExtPtr_allocator<double> > fwd_list_type;\n-\n-  fwd_list_type a = {0.0, 1.0, 2.0, 3.0, 4.0};\n-  fwd_list_type b = {1.0, 2.0, 3.0, 4.0, 4.0, 5.0};\n-\n-  a.merge(std::move(b));\n-\n-  fwd_list_type r = {0.0, 1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 4.0, 5.0};\n-\n-  VERIFY(a == r);\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "06eec7d784f9db151f70a3800114e195a6fc7093", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/operations/6.cc", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F6.cc?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,88 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 23.2.3.n forward_list xxx [lib.forward_list.xxx]\n-\n-#include <forward_list>\n-#include <testsuite_hooks.h>\n-#include <ext/extptr_allocator.h>\n-\n-using __gnu_cxx::_ExtPtr_allocator;\n-\n-bool test __attribute__((unused)) = true;\n-\n-//  Comparison functor.\n-template<typename Num>\n-  class Comp\n-  {\n-  public:\n-    Comp(const Num & num)\n-      {\n-        n = num;\n-      }\n-    bool operator()(const Num i, const Num j)\n-      {\n-        return (n * i) < (n * j);\n-      }\n-  private:\n-    Num n;\n-  };\n-\n-// This test verifies the following:\n-//   \n-void\n-test01()\n-{\n-  typedef std::forward_list<int, _ExtPtr_allocator<int> > fwd_list_type;\n-\n-  const unsigned int n = 13;\n-  int order[][n] = {\n-    { 0,1,2,3,4,5,6,7,8,9,10,11,12 },\n-    { 6,2,8,4,11,1,12,7,3,9,5,0,10 },\n-    { 12,11,10,9,8,7,6,5,4,3,2,1,0 },\n-  };\n-  fwd_list_type sorted(order[0], order[0] + n);\n-\n-  for (unsigned int i = 0; i < sizeof(order)/sizeof(*order); ++i)\n-    {\n-      fwd_list_type head(order[i], order[i] + n);\n-\n-      head.sort();\n-\n-      VERIFY(head == sorted);\n-    }\n-\n-  fwd_list_type reversed(order[2], order[2] + n);\n-  for (unsigned int i = 0; i < sizeof(order)/sizeof(*order); ++i)\n-    {\n-      fwd_list_type head(order[i], order[i] + n);\n-\n-      Comp<int> comp(-1);\n-      head.sort( comp );\n-\n-      VERIFY(head == reversed);\n-    }\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "abbbec1b7bc5cac9b04a52cc21efd61f082d112a", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/operations/7.cc", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Foperations%2F7.cc?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,57 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 23.2.3.n forward_list xxx [lib.forward_list.xxx]\n-\n-#include <forward_list>\n-#include <testsuite_hooks.h>\n-#include <ext/extptr_allocator.h>\n-\n-#include <algorithm>\n-\n-using __gnu_cxx::_ExtPtr_allocator;\n-\n-bool test __attribute__((unused)) = true;\n-\n-// This test verifies the following:\n-//   \n-void\n-test01()\n-{\n-  const unsigned int n = 13;\n-  int order[n] = {0,1,2,3,4,5,6,7,8,9,10,11,12};\n-\n-  std::forward_list<int, _ExtPtr_allocator<int> > fl(order, order + n);\n-\n-  std::forward_list<int, _ExtPtr_allocator<int> > fl2;\n-  for (std::size_t i = 0; i < n; ++i)\n-    fl2.push_front(order[i]);\n-\n-  fl.reverse();\n-\n-  VERIFY(std::lexicographical_compare(fl.begin(), fl.end(),\n-                                      fl2.begin(), fl2.end()) == false);\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "f4e9e7205ff6d507b9f3430d21a4cdc7a2c26460", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/requirements/1.cc", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Frequirements%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Frequirements%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Frequirements%2F1.cc?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,72 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 23.2.3.n forward_list xxx [lib.forward_list.xxx]\n-\n-#include <forward_list>\n-#include <ext/extptr_allocator.h>\n-#include <testsuite_hooks.h>\n-\n-using __gnu_cxx::_ExtPtr_allocator;\n-\n-bool test __attribute__((unused)) = true;\n-\n-// A nontrivial type.\n-template<typename T>\n-  struct A { };\n-\n-// Another nontrivial type\n-struct B { };\n-\n-// A nontrivial type convertible from an int\n-struct C\n-{\n-  C(int i) : i_(i) { }\n-  bool operator==(const C& rhs) { return i_ == rhs.i_; }\n-  int i_;\n-};\n-\n-// This test verifies the following.\n-//\n-void\n-test01()\n-{\n-  std::forward_list< A<B>, _ExtPtr_allocator<A<B> > > lst;\n-  VERIFY(lst.begin() == lst.end());\n-  VERIFY(std::distance(lst.begin(), lst.end()) == 0);\n-\n-  // check type definitions -- will fail compile if missing\n-  typedef std::forward_list< A<B> >::reference              reference;\n-  typedef std::forward_list< A<B> >::const_reference        const_reference;\n-  typedef std::forward_list< A<B> >::iterator               iterator;\n-  typedef std::forward_list< A<B> >::const_iterator         const_iterator;\n-  typedef std::forward_list< A<B> >::size_type              size_type;\n-  typedef std::forward_list< A<B> >::difference_type        difference_type;\n-  typedef std::forward_list< A<B> >::value_type             value_type;\n-  typedef std::forward_list< A<B> >::allocator_type         allocator_type;\n-  typedef std::forward_list< A<B> >::pointer                pointer;\n-  typedef std::forward_list< A<B> >::const_pointer          const_pointer;\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "d34cccd503ee39a038f8eefadf1caed1265b34f5", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/requirements/explicit_instantiation/1.cc", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,27 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-\n-// This file tests explicit instantiation of library containers\n-\n-#include <forward_list>\n-#include <ext/extptr_allocator.h>\n-\n-// { dg-do compile }\n-\n-template class std::forward_list<int, __gnu_cxx::_ExtPtr_allocator<int> >;"}, {"sha": "4db7031db9fea5a583855a0e1e209cc064d858c6", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/requirements/explicit_instantiation/3.cc", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21723389538275d17f3892a24c50b035baef829/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=c21723389538275d17f3892a24c50b035baef829", "patch": "@@ -1,29 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-\n-// This file tests explicit instantiation of library containers\n-\n-#include <forward_list>\n-#include <ext/extptr_allocator.h>\n-\n-// { dg-do compile }\n-\n-// libstdc++/21770\n-template class std::forward_list<int, __gnu_cxx::_ExtPtr_allocator<char> >;"}, {"sha": "5351a5b07884987739aa82dcc26a2463ed7df93c", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ffcedf400bfeb36abb086a5457935e0350f0a9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ffcedf400bfeb36abb086a5457935e0350f0a9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=97ffcedf400bfeb36abb086a5457935e0350f0a9", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1197 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1201 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "b624ab2356f0b03fd3b66c2a2d599a3d25a3ef7b", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ffcedf400bfeb36abb086a5457935e0350f0a9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ffcedf400bfeb36abb086a5457935e0350f0a9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=97ffcedf400bfeb36abb086a5457935e0350f0a9", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1197 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1201 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "0a593c83a91b992c019a6399613816ffd7f1f64c", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ffcedf400bfeb36abb086a5457935e0350f0a9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ffcedf400bfeb36abb086a5457935e0350f0a9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=97ffcedf400bfeb36abb086a5457935e0350f0a9", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1197 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1201 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "4739ce77f753da7a7088e8bc5b7953853f10fee7", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ffcedf400bfeb36abb086a5457935e0350f0a9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ffcedf400bfeb36abb086a5457935e0350f0a9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=97ffcedf400bfeb36abb086a5457935e0350f0a9", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1197 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1201 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}]}