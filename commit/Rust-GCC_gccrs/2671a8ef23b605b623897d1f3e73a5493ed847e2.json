{"sha": "2671a8ef23b605b623897d1f3e73a5493ed847e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY3MWE4ZWYyM2I2MDViNjIzODk3ZDFmM2U3M2E1NDkzZWQ4NDdlMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-02-21T21:41:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-02-21T21:41:16Z"}, "message": "re PR c++/60241 (internal compiler error: in finish_member_declaration, at cp/semantics.c:2617)\n\n\tPR c++/60241\n\t* pt.c (lookup_template_class_1): Update DECL_TEMPLATE_INSTANTIATIONS\n\tof the partial instantiation, not the most general template.\n\t(maybe_process_partial_specialization): Reassign everything on\n\tthat list.\n\nFrom-SVN: r208024", "tree": {"sha": "5ec7430392945a3b504f81d5e420aa3e22f231f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ec7430392945a3b504f81d5e420aa3e22f231f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2671a8ef23b605b623897d1f3e73a5493ed847e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2671a8ef23b605b623897d1f3e73a5493ed847e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2671a8ef23b605b623897d1f3e73a5493ed847e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2671a8ef23b605b623897d1f3e73a5493ed847e2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a810ee82077cd312a1d9a9ddecaca0017db91c87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a810ee82077cd312a1d9a9ddecaca0017db91c87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a810ee82077cd312a1d9a9ddecaca0017db91c87"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "01a2569479c1fb710fcd122d95883c90b2ad8e0c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2671a8ef23b605b623897d1f3e73a5493ed847e2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2671a8ef23b605b623897d1f3e73a5493ed847e2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2671a8ef23b605b623897d1f3e73a5493ed847e2", "patch": "@@ -1,5 +1,11 @@\n 2014-02-21  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/60241\n+\t* pt.c (lookup_template_class_1): Update DECL_TEMPLATE_INSTANTIATIONS\n+\tof the partial instantiation, not the most general template.\n+\t(maybe_process_partial_specialization): Reassign everything on\n+\tthat list.\n+\n \tPR c++/60216\n \t* pt.c (register_specialization): Copy DECL_DELETED_FN to clones.\n \t(check_explicit_specialization): Don't clone."}, {"sha": "91a884091759f05cd3c3bab8b88aeea65acaedb0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2671a8ef23b605b623897d1f3e73a5493ed847e2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2671a8ef23b605b623897d1f3e73a5493ed847e2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2671a8ef23b605b623897d1f3e73a5493ed847e2", "patch": "@@ -914,11 +914,13 @@ maybe_process_partial_specialization (tree type)\n \t       t; t = TREE_CHAIN (t))\n \t    {\n \t      tree inst = TREE_VALUE (t);\n-\t      if (CLASSTYPE_TEMPLATE_SPECIALIZATION (inst))\n+\t      if (CLASSTYPE_TEMPLATE_SPECIALIZATION (inst)\n+\t\t  || !COMPLETE_OR_OPEN_TYPE_P (inst))\n \t\t{\n \t\t  /* We already have a full specialization of this partial\n-\t\t     instantiation.  Reassign it to the new member\n-\t\t     specialization template.  */\n+\t\t     instantiation, or a full specialization has been\n+\t\t     looked up but not instantiated.  Reassign it to the\n+\t\t     new member specialization template.  */\n \t\t  spec_entry elt;\n \t\t  spec_entry *entry;\n \t\t  void **slot;\n@@ -937,7 +939,7 @@ maybe_process_partial_specialization (tree type)\n \t\t  *entry = elt;\n \t\t  *slot = entry;\n \t\t}\n-\t      else if (COMPLETE_OR_OPEN_TYPE_P (inst))\n+\t      else\n \t\t/* But if we've had an implicit instantiation, that's a\n \t\t   problem ([temp.expl.spec]/6).  */\n \t\terror (\"specialization %qT after instantiation %qT\",\n@@ -7596,7 +7598,7 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n \t}\n \n       /* Let's consider the explicit specialization of a member\n-         of a class template specialization that is implicitely instantiated,\n+         of a class template specialization that is implicitly instantiated,\n \t e.g.:\n \t     template<class T>\n \t     struct S\n@@ -7694,9 +7696,9 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n \n       /* Note this use of the partial instantiation so we can check it\n \t later in maybe_process_partial_specialization.  */\n-      DECL_TEMPLATE_INSTANTIATIONS (templ)\n+      DECL_TEMPLATE_INSTANTIATIONS (found)\n \t= tree_cons (arglist, t,\n-\t\t     DECL_TEMPLATE_INSTANTIATIONS (templ));\n+\t\t     DECL_TEMPLATE_INSTANTIATIONS (found));\n \n       if (TREE_CODE (template_type) == ENUMERAL_TYPE && !is_dependent_type\n \t  && !DECL_ALIAS_TEMPLATE_P (gen_tmpl))"}, {"sha": "eb32f13c916e7a417d9d02d446cd8bbce2158149", "filename": "gcc/testsuite/g++.dg/template/memclass5.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2671a8ef23b605b623897d1f3e73a5493ed847e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemclass5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2671a8ef23b605b623897d1f3e73a5493ed847e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemclass5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmemclass5.C?ref=2671a8ef23b605b623897d1f3e73a5493ed847e2", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/60241\n+\n+template <typename T>\n+struct x\n+{\n+    template <typename U>\n+    struct y\n+    {\n+        typedef T result2;\n+    };\n+\n+    typedef y<int> zy;\n+};\n+\n+template<>\n+template<class T>\n+struct x<int>::y\n+{\n+    typedef double result2;\n+};\n+\n+int main()\n+{\n+    x<int>::zy::result2 xxx;\n+    x<int>::y<int>::result2 xxx2;\n+}"}]}