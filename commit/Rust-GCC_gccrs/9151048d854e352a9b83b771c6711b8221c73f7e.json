{"sha": "9151048d854e352a9b83b771c6711b8221c73f7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE1MTA0OGQ4NTRlMzUyYTliODNiNzcxYzY3MTFiODIyMWM3M2Y3ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-09-01T11:57:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-09-01T11:57:10Z"}, "message": "re PR middle-end/91623 (-msse4.1 -O3 segfault in /usr/lib/gcc/x86_64-pc-linux-gnu/8.3.0/include/smmintrin.h:270:10)\n\n\tPR middle-end/91623\n\t* optabs.c (expand_vec_cond_expr): If op0 is a VECTOR_CST and only\n\tEQ_EXPR/NE_EXPR is supported, verify that op0 only contains\n\tzeros or negative elements and use NE_EXPR instead of LT_EXPR against\n\tzero vector.\n\n\t* gcc.target/i386/pr91623.c: New test.\n\nFrom-SVN: r275267", "tree": {"sha": "a1001271e1322a0404e480ee7deeeb91ae45159d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1001271e1322a0404e480ee7deeeb91ae45159d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9151048d854e352a9b83b771c6711b8221c73f7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9151048d854e352a9b83b771c6711b8221c73f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9151048d854e352a9b83b771c6711b8221c73f7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9151048d854e352a9b83b771c6711b8221c73f7e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1e2e50a5f4d077eab6d3c93047203d15f16b324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e2e50a5f4d077eab6d3c93047203d15f16b324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1e2e50a5f4d077eab6d3c93047203d15f16b324"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "6c43782b358fbe8b4d105ac88a9ab1e597ae2ad8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9151048d854e352a9b83b771c6711b8221c73f7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9151048d854e352a9b83b771c6711b8221c73f7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9151048d854e352a9b83b771c6711b8221c73f7e", "patch": "@@ -1,5 +1,11 @@\n 2019-09-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/91623\n+\t* optabs.c (expand_vec_cond_expr): If op0 is a VECTOR_CST and only\n+\tEQ_EXPR/NE_EXPR is supported, verify that op0 only contains\n+\tzeros or negative elements and use NE_EXPR instead of LT_EXPR against\n+\tzero vector.\n+\n \tPR lto/91572\n \t* tree.c (find_decls_types_in_node): Also walk TREE_PURPOSE of\n \tGIMPLE_ASM TREE_LIST operands."}, {"sha": "cdd07f3e53fb7334365fcc111c18b9c26a63293f", "filename": "gcc/optabs.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9151048d854e352a9b83b771c6711b8221c73f7e/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9151048d854e352a9b83b771c6711b8221c73f7e/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=9151048d854e352a9b83b771c6711b8221c73f7e", "patch": "@@ -5868,6 +5868,25 @@ expand_vec_cond_expr (tree vec_cond_type, tree op0, tree op1, tree op2,\n   icode = get_vcond_icode (mode, cmp_op_mode, unsignedp);\n   if (icode == CODE_FOR_nothing)\n     {\n+      if (tcode == LT_EXPR\n+\t  && op0a == op0\n+\t  && TREE_CODE (op0) == VECTOR_CST)\n+\t{\n+\t  /* A VEC_COND_EXPR condition could be folded from EQ_EXPR/NE_EXPR\n+\t     into a constant when only get_vcond_eq_icode is supported.\n+\t     Verify < 0 and != 0 behave the same and change it to NE_EXPR.  */\n+\t  unsigned HOST_WIDE_INT nelts;\n+\t  if (!VECTOR_CST_NELTS (op0).is_constant (&nelts))\n+\t    {\n+\t      if (VECTOR_CST_STEPPED_P (op0))\n+\t\treturn 0;\n+\t      nelts = vector_cst_encoded_nelts (op0);\n+\t    }\n+\t  for (unsigned int i = 0; i < nelts; ++i)\n+\t    if (tree_int_cst_sgn (vector_cst_elt (op0, i)) == 1)\n+\t      return 0;\n+\t  tcode = NE_EXPR;\n+\t}\n       if (tcode == EQ_EXPR || tcode == NE_EXPR)\n \ticode = get_vcond_eq_icode (mode, cmp_op_mode);\n       if (icode == CODE_FOR_nothing)"}, {"sha": "aa733125a037a93e8c2c0ece7200d99492d7aa1a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9151048d854e352a9b83b771c6711b8221c73f7e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9151048d854e352a9b83b771c6711b8221c73f7e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9151048d854e352a9b83b771c6711b8221c73f7e", "patch": "@@ -1,5 +1,8 @@\n 2019-09-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/91623\n+\t* gcc.target/i386/pr91623.c: New test.\n+\n \tPR lto/91572\n \t* g++.dg/lto/pr91572_0.C: New test.\n "}, {"sha": "94de4f91c6db8bf710c3cae8a175f5c2d9f01d00", "filename": "gcc/testsuite/gcc.target/i386/pr91623.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9151048d854e352a9b83b771c6711b8221c73f7e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91623.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9151048d854e352a9b83b771c6711b8221c73f7e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91623.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91623.c?ref=9151048d854e352a9b83b771c6711b8221c73f7e", "patch": "@@ -0,0 +1,32 @@\n+/* PR middle-end/91623 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -msse4.1 -mno-sse4.2\" } */\n+\n+typedef long long V __attribute__((__vector_size__(16)));\n+V e, h;\n+int d;\n+const int i;\n+\n+void foo (void);\n+\n+void\n+bar (int k, int l)\n+{\n+  if (d && 0 <= k - 1 && l)\n+    foo ();\n+}\n+\n+void\n+baz (void)\n+{\n+  V n = (V) { 1 };\n+  V g = (V) {};\n+  V o = g;\n+  for (int f = 0; f < i; ++f)\n+    {\n+      V a = o == n;\n+      h = a;\n+      bar (f, i);\n+      o = e;\n+    }\n+}"}]}