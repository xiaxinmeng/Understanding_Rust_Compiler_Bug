{"sha": "2298af0800b292f028298c1eaec42fd3033c4b9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI5OGFmMDgwMGIyOTJmMDI4Mjk4YzFlYWVjNDJmZDMwMzNjNGI5Yg==", "commit": {"author": {"name": "Thomas K\u00f6nig", "email": "tkoenig@gcc.gnu.org", "date": "2020-04-17T17:53:45Z"}, "committer": {"name": "Thomas K\u00f6nig", "email": "tkoenig@gcc.gnu.org", "date": "2020-04-17T17:53:45Z"}, "message": "Fix ICE on invalid, PR94090.\n\nThe attached patch fixes an ICE on invalid: When the return type of\na function was misdeclared with a wrong rank, we issued a warning,\nbut not an error (unless with -pedantic); later on, an ICE ensued.\n\nNothing good can come from wrongly declaring a function type\n(considering the ABI), so I changed that into a hard error.\n\n2020-04-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/94090\n\t* gfortran.dg (gfc_compare_interfaces): Add\n\toptional argument bad_result_characteristics.\n\t* interface.c (gfc_check_result_characteristics): Fix\n\twhitespace.\n\t(gfc_compare_interfaces): Handle new argument; return\n\ttrue if function return values are wrong.\n\t* resolve.c (resolve_global_procedure): Hard error if\n\tthe return value of a function is wrong.\n\n2020-04-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/94090\n\t* gfortran.dg/interface_46.f90: New test.", "tree": {"sha": "95882dce57ad39ffb743d2e56ce95d694cae9cec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95882dce57ad39ffb743d2e56ce95d694cae9cec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2298af0800b292f028298c1eaec42fd3033c4b9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2298af0800b292f028298c1eaec42fd3033c4b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2298af0800b292f028298c1eaec42fd3033c4b9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2298af0800b292f028298c1eaec42fd3033c4b9b/comments", "author": null, "committer": null, "parents": [{"sha": "af557050fd011a03d21dc26b31959033061a0443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af557050fd011a03d21dc26b31959033061a0443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af557050fd011a03d21dc26b31959033061a0443"}], "stats": {"total": 92, "additions": 80, "deletions": 12}, "files": [{"sha": "2f99ce24599fcfe571574860812ab8a13c0fb336", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2298af0800b292f028298c1eaec42fd3033c4b9b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2298af0800b292f028298c1eaec42fd3033c4b9b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2298af0800b292f028298c1eaec42fd3033c4b9b", "patch": "@@ -1,3 +1,15 @@\n+2020-04-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/94090\n+\t* gfortran.dg (gfc_compare_interfaces): Add\n+\toptional argument bad_result_characteristics.\n+\t* interface.c (gfc_check_result_characteristics): Fix\n+\twhitespace.\n+\t(gfc_compare_interfaces): Handle new argument; return\n+\ttrue if function return values are wrong.\n+\t* resolve.c (resolve_global_procedure): Hard error if\n+\tthe return value of a function is wrong.\n+\n 2020-04-15  Fritz Reese  <foreese@gcc.gnu.org>\n \tLinus Koenig <link@sig-st.de>\n "}, {"sha": "4e1da8c88a030750d21c264c37d0e78bf736263b", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2298af0800b292f028298c1eaec42fd3033c4b9b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2298af0800b292f028298c1eaec42fd3033c4b9b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2298af0800b292f028298c1eaec42fd3033c4b9b", "patch": "@@ -3445,7 +3445,8 @@ bool gfc_check_dummy_characteristics (gfc_symbol *, gfc_symbol *,\n bool gfc_check_result_characteristics (gfc_symbol *, gfc_symbol *,\n \t\t\t\t       char *, int);\n bool gfc_compare_interfaces (gfc_symbol*, gfc_symbol*, const char *, int, int,\n-\t\t\t     char *, int, const char *, const char *);\n+\t\t\t     char *, int, const char *, const char *,\n+\t\t\t     bool *bad_result_characteristics = NULL);\n void gfc_check_interfaces (gfc_namespace *);\n bool gfc_procedure_use (gfc_symbol *, gfc_actual_arglist **, locus *);\n void gfc_ppc_use (gfc_component *, gfc_actual_arglist **, locus *);"}, {"sha": "ba1c8bc322eade13caf726aae58b242e375bb02a", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2298af0800b292f028298c1eaec42fd3033c4b9b/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2298af0800b292f028298c1eaec42fd3033c4b9b/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=2298af0800b292f028298c1eaec42fd3033c4b9b", "patch": "@@ -1529,7 +1529,7 @@ gfc_check_dummy_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n \n bool\n gfc_check_result_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n-\t\t\t      char *errmsg, int err_len)\n+\t\t\t\t  char *errmsg, int err_len)\n {\n   gfc_symbol *r1, *r2;\n \n@@ -1695,12 +1695,16 @@ bool\n gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, const char *name2,\n \t\t\tint generic_flag, int strict_flag,\n \t\t\tchar *errmsg, int err_len,\n-\t\t\tconst char *p1, const char *p2)\n+\t\t\tconst char *p1, const char *p2,\n+\t\t\tbool *bad_result_characteristics)\n {\n   gfc_formal_arglist *f1, *f2;\n \n   gcc_assert (name2 != NULL);\n \n+  if (bad_result_characteristics)\n+    *bad_result_characteristics = false;\n+\n   if (s1->attr.function && (s2->attr.subroutine\n       || (!s2->attr.function && s2->ts.type == BT_UNKNOWN\n \t  && gfc_get_default_type (name2, s2->ns)->type == BT_UNKNOWN)))\n@@ -1726,7 +1730,11 @@ gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, const char *name2,\n \t  /* If both are functions, check result characteristics.  */\n \t  if (!gfc_check_result_characteristics (s1, s2, errmsg, err_len)\n \t      || !gfc_check_result_characteristics (s2, s1, errmsg, err_len))\n-\t    return false;\n+\t    {\n+\t      if (bad_result_characteristics)\n+\t\t*bad_result_characteristics = true;\n+\t      return false;\n+\t    }\n \t}\n \n       if (s1->attr.pure && !s2->attr.pure)"}, {"sha": "2371ab23645f5f72a0f2f27506d3d59c67a449ae", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2298af0800b292f028298c1eaec42fd3033c4b9b/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2298af0800b292f028298c1eaec42fd3033c4b9b/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=2298af0800b292f028298c1eaec42fd3033c4b9b", "patch": "@@ -2601,21 +2601,27 @@ resolve_global_procedure (gfc_symbol *sym, locus *where, int sub)\n \t  goto done;\n \t}\n \n-      if (!pedantic && (gfc_option.allow_std & GFC_STD_GNU))\n-\t/* Turn erros into warnings with -std=gnu and -std=legacy.  */\n-\tgfc_errors_to_warnings (true);\n-\n+      bool bad_result_characteristics;\n       if (!gfc_compare_interfaces (sym, def_sym, sym->name, 0, 1,\n-\t\t\t\t   reason, sizeof(reason), NULL, NULL))\n+\t\t\t\t   reason, sizeof(reason), NULL, NULL,\n+\t\t\t\t   &bad_result_characteristics))\n \t{\n-\t  gfc_error_opt (0, \"Interface mismatch in global procedure %qs at %L:\"\n-\t\t\t \" %s\", sym->name, &sym->declared_at, reason);\n+\t  /* Turn erros into warnings with -std=gnu and -std=legacy,\n+\t     unless a function returns a wrong type, which can lead\n+\t     to all kinds of ICEs and wrong code.  */\n+\n+\t  if (!pedantic && (gfc_option.allow_std & GFC_STD_GNU)\n+\t      && !bad_result_characteristics)\n+\t    gfc_errors_to_warnings (true);\n+\n+\t  gfc_error (\"Interface mismatch in global procedure %qs at %L: %s\",\n+\t\t     sym->name, &sym->declared_at, reason);\n+\t  gfc_errors_to_warnings (false);\n \t  goto done;\n \t}\n     }\n \n done:\n-  gfc_errors_to_warnings (false);\n \n   if (gsym->type == GSYM_UNKNOWN)\n     {"}, {"sha": "15f5cb2a6335e8a8da85afc093284e748fc4ffc8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2298af0800b292f028298c1eaec42fd3033c4b9b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2298af0800b292f028298c1eaec42fd3033c4b9b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2298af0800b292f028298c1eaec42fd3033c4b9b", "patch": "@@ -1,3 +1,8 @@\n+2020-04-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/94090\n+\t* gfortran.dg/interface_46.f90: New test.\n+\n 2020-04-17  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/cost_model_2.c: New test."}, {"sha": "c1d87638fbed25054199d9042ea3375fc3901806", "filename": "gcc/testsuite/gfortran.dg/interface_46.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2298af0800b292f028298c1eaec42fd3033c4b9b/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_46.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2298af0800b292f028298c1eaec42fd3033c4b9b/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_46.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_46.f90?ref=2298af0800b292f028298c1eaec42fd3033c4b9b", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+! PR 94090 - this used to cause an ICE.\n+!  Test case by Jos\u00e9 Rui Faustino de Sousa.\n+function cntf(a) result(s)\n+  implicit none\n+\n+  integer, intent(in) :: a(:)\n+  \n+  integer :: s(3)\n+  \n+  s = [1, 2, 3]\n+  return\n+end function cntf\n+\n+program ice_p\n+\n+  implicit none\n+\n+  interface\n+    function cntf(a) result(s)  ! { dg-error \"Rank mismatch in function result\" }\n+      implicit none\n+      integer, intent(in) :: a(:)\n+      integer             :: s ! (3) <- Ups!\n+    end function cntf\n+  end interface\n+\n+  integer, parameter :: n = 9\n+\n+  integer :: arr(n)\n+  \n+  integer :: s(3)\n+\n+  s = cntf(arr)\n+  stop\n+\n+end program ice_p"}]}