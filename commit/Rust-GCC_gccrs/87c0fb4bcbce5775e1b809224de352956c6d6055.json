{"sha": "87c0fb4bcbce5775e1b809224de352956c6d6055", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdjMGZiNGJjYmNlNTc3NWUxYjgwOTIyNGRlMzUyOTU2YzZkNjA1NQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-01-25T11:14:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-01-25T11:14:28Z"}, "message": "tree.h (get_pointer_alignment_1): Declare.\n\n2012-01-25  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.h (get_pointer_alignment_1): Declare.\n\t* builtins.c (get_pointer_alignment_1): New function.\n\t(get_pointer_alignment): Use it.\n\nFrom-SVN: r183514", "tree": {"sha": "14d32f965b080740a952cc5bd5723f2d009cbc5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14d32f965b080740a952cc5bd5723f2d009cbc5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87c0fb4bcbce5775e1b809224de352956c6d6055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c0fb4bcbce5775e1b809224de352956c6d6055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87c0fb4bcbce5775e1b809224de352956c6d6055", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c0fb4bcbce5775e1b809224de352956c6d6055/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fcc82a7a8a9d7dd0cf3ee45846dafeb5b23ec5e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcc82a7a8a9d7dd0cf3ee45846dafeb5b23ec5e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcc82a7a8a9d7dd0cf3ee45846dafeb5b23ec5e5"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "d252a5ab351def904f9b2f2c618067d023619f5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c0fb4bcbce5775e1b809224de352956c6d6055/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c0fb4bcbce5775e1b809224de352956c6d6055/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87c0fb4bcbce5775e1b809224de352956c6d6055", "patch": "@@ -1,3 +1,9 @@\n+2012-01-25  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.h (get_pointer_alignment_1): Declare.\n+\t* builtins.c (get_pointer_alignment_1): New function.\n+\t(get_pointer_alignment): Use it.\n+\n 2012-01-25  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n \tPR rtl-optimization/48308"}, {"sha": "d62b419075a57d25c4f415482d4e6b0513927334", "filename": "gcc/builtins.c", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c0fb4bcbce5775e1b809224de352956c6d6055/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c0fb4bcbce5775e1b809224de352956c6d6055/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=87c0fb4bcbce5775e1b809224de352956c6d6055", "patch": "@@ -477,37 +477,59 @@ get_object_or_type_alignment (tree exp)\n   return align;\n }\n \n-/* Return the alignment in bits of EXP, a pointer valued expression.\n-   The alignment returned is, by default, the alignment of the thing that\n-   EXP points to.  If it is not a POINTER_TYPE, 0 is returned.\n+/* For a pointer valued expression EXP compute values M and N such that\n+   M divides (EXP - N) and such that N < M.  Store N in *BITPOSP and return M.\n \n-   Otherwise, look at the expression to see if we can do better, i.e., if the\n-   expression is actually pointing at an object whose alignment is tighter.  */\n+   If EXP is not a pointer, 0 is returned.  */\n \n unsigned int\n-get_pointer_alignment (tree exp)\n+get_pointer_alignment_1 (tree exp, unsigned HOST_WIDE_INT *bitposp)\n {\n   STRIP_NOPS (exp);\n \n   if (TREE_CODE (exp) == ADDR_EXPR)\n-    return get_object_alignment (TREE_OPERAND (exp, 0));\n+    return get_object_alignment_1 (TREE_OPERAND (exp, 0), bitposp);\n   else if (TREE_CODE (exp) == SSA_NAME\n \t   && POINTER_TYPE_P (TREE_TYPE (exp)))\n     {\n       struct ptr_info_def *pi = SSA_NAME_PTR_INFO (exp);\n-      unsigned align;\n       if (!pi)\n-\treturn BITS_PER_UNIT;\n-      if (pi->misalign != 0)\n-\talign = (pi->misalign & -pi->misalign);\n-      else\n-\talign = pi->align;\n-      return align * BITS_PER_UNIT;\n+\t{\n+\t  *bitposp = 0;\n+\t  return BITS_PER_UNIT;\n+\t}\n+      *bitposp = pi->misalign * BITS_PER_UNIT;\n+      return pi->align * BITS_PER_UNIT;\n     }\n \n+  *bitposp = 0;\n   return POINTER_TYPE_P (TREE_TYPE (exp)) ? BITS_PER_UNIT : 0;\n }\n \n+/* Return the alignment in bits of EXP, a pointer valued expression.\n+   The alignment returned is, by default, the alignment of the thing that\n+   EXP points to.  If it is not a POINTER_TYPE, 0 is returned.\n+\n+   Otherwise, look at the expression to see if we can do better, i.e., if the\n+   expression is actually pointing at an object whose alignment is tighter.  */\n+\n+unsigned int\n+get_pointer_alignment (tree exp)\n+{\n+  unsigned HOST_WIDE_INT bitpos = 0;\n+  unsigned int align;\n+  \n+  align = get_pointer_alignment_1 (exp, &bitpos);\n+\n+  /* align and bitpos now specify known low bits of the pointer.\n+     ptr & (align - 1) == bitpos.  */\n+\n+  if (bitpos != 0)\n+    align = (bitpos & -bitpos);\n+\n+  return align;\n+}\n+\n /* Compute the length of a C string.  TREE_STRING_LENGTH is not the right\n    way, because it could contain a zero byte in the middle.\n    TREE_STRING_LENGTH is the size of the character array, not the string."}, {"sha": "140f23ed29edbed3b1c406007a9bda2864eddf2a", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c0fb4bcbce5775e1b809224de352956c6d6055/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c0fb4bcbce5775e1b809224de352956c6d6055/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=87c0fb4bcbce5775e1b809224de352956c6d6055", "patch": "@@ -5450,6 +5450,7 @@ extern bool is_builtin_fn (tree);\n extern unsigned int get_object_alignment_1 (tree, unsigned HOST_WIDE_INT *);\n extern unsigned int get_object_alignment (tree);\n extern unsigned int get_object_or_type_alignment (tree);\n+extern unsigned int get_pointer_alignment_1 (tree, unsigned HOST_WIDE_INT *);\n extern unsigned int get_pointer_alignment (tree);\n extern tree fold_call_stmt (gimple, bool);\n extern tree gimple_fold_builtin_snprintf_chk (gimple, tree, enum built_in_function);"}]}