{"sha": "d7a3ef9794c7a58d576c563d1610b42ba040c871", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdhM2VmOTc5NGM3YTU4ZDU3NmM1NjNkMTYxMGI0MmJhMDQwYzg3MQ==", "commit": {"author": {"name": "Jonathan Yong", "email": "jon_y@users.sourceforge.net", "date": "2011-10-14T06:57:55Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-10-14T06:57:55Z"}, "message": "configure.host: Use config/os/mingw32-w64 instead of config/os/mingw32 if vendor key is \"w64\".\n\n2011-10-14  Jonathan Yong  <jon_y@users.sourceforge.net>\n\n\t* configure.host: Use config/os/mingw32-w64 instead of\n\tconfig/os/mingw32 if vendor key is \"w64\".\n\t* config/os/mingw32-w64: Duplicate from config/os/mingw32.\n\t* config/os/mingw32-w64/os_defines.h: Enable\n\t_GLIBCXX_FULLY_DYNAMIC_STRING if undefined.\n\t* acinclude.m4: Set fully-dynamic-string to 1 when enabled,\n\t0 when disabled or undefined if unset by user.\n\t* include/bits/basic_string.h: Check if\n\t_GLIBCXX_FULLY_DYNAMIC_STRING is set to 0 instead of undefined.\n\tinclude/bits/basic_string.tcc: Likewise.\n\t* configure: Regenerated.\n\t* config.h.in: Likewise.\n\nFrom-SVN: r179961", "tree": {"sha": "2c78a59a022849cad66111483b72b8263adb7539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c78a59a022849cad66111483b72b8263adb7539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7a3ef9794c7a58d576c563d1610b42ba040c871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7a3ef9794c7a58d576c563d1610b42ba040c871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7a3ef9794c7a58d576c563d1610b42ba040c871", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7a3ef9794c7a58d576c563d1610b42ba040c871/comments", "author": null, "committer": null, "parents": [{"sha": "4fbe3b8a2b1d68aca653e8fea4a7f2ea04775bdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fbe3b8a2b1d68aca653e8fea4a7f2ea04775bdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fbe3b8a2b1d68aca653e8fea4a7f2ea04775bdf"}], "stats": {"total": 661, "additions": 643, "deletions": 18}, "files": [{"sha": "9ffb299d30c086ec22d615bf3a483ae0fd8f1a23", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d7a3ef9794c7a58d576c563d1610b42ba040c871", "patch": "@@ -1,3 +1,18 @@\n+2011-10-14  Jonathan Yong  <jon_y@users.sourceforge.net>\n+\n+\t* configure.host: Use config/os/mingw32-w64 instead of\n+\tconfig/os/mingw32 if vendor key is \"w64\".\n+\t* config/os/mingw32-w64: Duplicate from config/os/mingw32.\n+\t* config/os/mingw32-w64/os_defines.h: Enable\n+\t_GLIBCXX_FULLY_DYNAMIC_STRING if undefined.\n+\t* acinclude.m4: Set fully-dynamic-string to 1 when enabled,\n+\t0 when disabled or undefined if unset by user.\n+\t* include/bits/basic_string.h: Check if\n+\t_GLIBCXX_FULLY_DYNAMIC_STRING is set to 0 instead of undefined.\n+\tinclude/bits/basic_string.tcc: Likewise.\n+\t* configure: Regenerated.\n+\t* config.h.in: Likewise.\n+\n 2011-10-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/50714"}, {"sha": "7196acfc3741de38610148184350d2155800a632", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=d7a3ef9794c7a58d576c563d1610b42ba040c871", "patch": "@@ -564,17 +564,21 @@ dnl be turned on, that does not put empty objects in per-process static\n dnl memory (mostly useful together with shared memory allocators, see PR\n dnl libstdc++/16612 for details).\n dnl\n-dnl --enable-fully-dynamic-string defines _GLIBCXX_FULLY_DYNAMIC_STRING\n-dnl --disable-fully-dynamic-string leaves _GLIBCXX_FULLY_DYNAMIC_STRING undefined\n+dnl --enable-fully-dynamic-string defines _GLIBCXX_FULLY_DYNAMIC_STRING to 1\n+dnl --disable-fully-dynamic-string defines _GLIBCXX_FULLY_DYNAMIC_STRING to 0\n+dnl otherwise undefined\n dnl  +  Usage:  GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.\n dnl\n AC_DEFUN([GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING], [\n   GLIBCXX_ENABLE(fully-dynamic-string,$1,,[do not put empty strings in per-process static memory])\n   if test $enable_fully_dynamic_string = yes; then\n-    AC_DEFINE(_GLIBCXX_FULLY_DYNAMIC_STRING, 1,\n-\t      [Define if a fully dynamic basic_string is wanted.])\n+    enable_fully_dynamic_string_def=1\n+  else\n+    enable_fully_dynamic_string_def=0\n   fi\n+  AC_DEFINE_UNQUOTED([_GLIBCXX_FULLY_DYNAMIC_STRING], [${enable_fully_dynamic_string_def}],\n+\t      [Define to 1 if a fully dynamic basic_string is wanted, 0 to disable, undefined for platform defaults])\n ])\n \n "}, {"sha": "df7effb6a6b586b15e5127faef605e5fbc815d36", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=d7a3ef9794c7a58d576c563d1610b42ba040c871", "patch": "@@ -707,7 +707,8 @@\n /* Define to use concept checking code from the boost libraries. */\n #undef _GLIBCXX_CONCEPT_CHECKS\n \n-/* Define if a fully dynamic basic_string is wanted. */\n+/* Define to 1 if a fully dynamic basic_string is wanted, 0 to disable,\n+   undefined for platform defaults */\n #undef _GLIBCXX_FULLY_DYNAMIC_STRING\n \n /* Define if gthreads library is available. */"}, {"sha": "5fbdff8e7f0cb8e818bfddbc24df3ba397f14ccc", "filename": "libstdc++-v3/config/os/mingw32-w64/ctype_base.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fctype_base.h?ref=d7a3ef9794c7a58d576c563d1610b42ba040c871", "patch": "@@ -0,0 +1,64 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 1997, 1998, 1999, 2007, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+//  We don't use the C-locale masks defined in mingw/include/ctype.h\n+//  because those masks do not conform to the requirements of 22.2.1.\n+//  In particular, a separate 'print' bitmask does not exist (isprint(c)\n+//  relies on a combination of flags) and the  '_ALPHA' mask is also a\n+//  combination of simple bitmasks.  Thus, we define libstdc++-specific\n+//  masks here, based on the generic masks, and the corresponding\n+//  classic_table in ctype_noninline.h.\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /// @brief  Base class for ctype.\n+  struct ctype_base\n+  {\n+    // Non-standard typedefs.\n+    typedef const int* \t\t__to_type;\n+\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef unsigned short \tmask;   \n+    static const mask upper\t= 1 << 0;\n+    static const mask lower\t= 1 << 1;\n+    static const mask alpha\t= 1 << 2;\n+    static const mask digit\t= 1 << 3;\n+    static const mask xdigit\t= 1 << 4;\n+    static const mask space\t= 1 << 5;\n+    static const mask print\t= 1 << 6;\n+    static const mask graph\t= (1 << 2) | (1 << 3) | (1 << 9);  // alnum|punct\n+    static const mask cntrl\t= 1 << 8;\n+    static const mask punct \t= 1 << 9;\n+    static const mask alnum\t= (1 << 2) | (1 << 3);  // alpha|digit\n+  };\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "12184075d776053cfcf5de5ea1a493f4734891d6", "filename": "libstdc++-v3/config/os/mingw32-w64/ctype_configure_char.cc", "status": "added", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fctype_configure_char.cc?ref=d7a3ef9794c7a58d576c563d1610b42ba040c871", "patch": "@@ -0,0 +1,243 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file ctype_configure_char.cc */\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+#include <locale>\n+#include <cstdlib>\n+#include <cstring>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // The classic table used in libstdc++ is *not* the C _ctype table\n+  // used by mscvrt, but is based on the ctype masks defined for libstdc++\n+  // in ctype_base.h.\n+\n+  const ctype_base::mask*\n+  ctype<char>::classic_table() throw()\n+  {\n+    static const ctype_base::mask _S_classic_table[256] =\n+    {\n+      cntrl /* null */,\n+      cntrl /* ^A */,\n+      cntrl /* ^B */,\n+      cntrl /* ^C */,\n+      cntrl /* ^D */,\n+      cntrl /* ^E */,\n+      cntrl /* ^F */,\n+      cntrl /* ^G */,\n+      cntrl /* ^H */,\n+      ctype_base::mask(space | cntrl) /* tab */,\n+      ctype_base::mask(space | cntrl) /* LF */,\n+      ctype_base::mask(space | cntrl) /* ^K */,\n+      ctype_base::mask(space | cntrl) /* FF */,\n+      ctype_base::mask(space | cntrl) /* ^M */,\n+      cntrl /* ^N */,\n+      cntrl /* ^O */,\n+      cntrl /* ^P */,\n+      cntrl /* ^Q */,\n+      cntrl /* ^R */,\n+      cntrl /* ^S */,\n+      cntrl /* ^T */,\n+      cntrl /* ^U */,\n+      cntrl /* ^V */,\n+      cntrl /* ^W */,\n+      cntrl /* ^X */,\n+      cntrl /* ^Y */,\n+      cntrl /* ^Z */,\n+      cntrl /* esc */,\n+      cntrl /* ^\\ */,\n+      cntrl /* ^] */,\n+      cntrl /* ^^ */,\n+      cntrl /* ^_ */,\n+      ctype_base::mask(space | print) /*   */,\n+      ctype_base::mask(punct | print) /* ! */,\n+      ctype_base::mask(punct | print) /* \" */,\n+      ctype_base::mask(punct | print) /* # */,\n+      ctype_base::mask(punct | print) /* $ */,\n+      ctype_base::mask(punct | print) /* % */,\n+      ctype_base::mask(punct | print) /* & */,\n+      ctype_base::mask(punct | print) /* ' */,\n+      ctype_base::mask(punct | print) /* ( */,\n+      ctype_base::mask(punct | print) /* ) */,\n+      ctype_base::mask(punct | print) /* * */,\n+      ctype_base::mask(punct | print) /* + */,\n+      ctype_base::mask(punct | print) /* , */,\n+      ctype_base::mask(punct | print) /* - */,\n+      ctype_base::mask(punct | print) /* . */,\n+      ctype_base::mask(punct | print) /* / */,\n+      ctype_base::mask(digit | xdigit | print) /* 0 */,\n+      ctype_base::mask(digit | xdigit | print) /* 1 */,\n+      ctype_base::mask(digit | xdigit | print) /* 2 */,\n+      ctype_base::mask(digit | xdigit | print) /* 3 */,\n+      ctype_base::mask(digit | xdigit | print) /* 4 */,\n+      ctype_base::mask(digit | xdigit | print) /* 5 */,\n+      ctype_base::mask(digit | xdigit | print) /* 6 */,\n+      ctype_base::mask(digit | xdigit | print) /* 7 */,\n+      ctype_base::mask(digit | xdigit | print) /* 8 */,\n+      ctype_base::mask(digit | xdigit | print) /* 9 */,\n+      ctype_base::mask(punct | print) /* : */,\n+      ctype_base::mask(punct | print) /* ; */,\n+      ctype_base::mask(punct | print) /* < */,\n+      ctype_base::mask(punct | print) /* = */,\n+      ctype_base::mask(punct | print) /* > */,\n+      ctype_base::mask(punct | print) /* ? */,\n+      ctype_base::mask(punct | print) /* ! */,\n+      ctype_base::mask(alpha | upper | xdigit | print) /* A */,\n+      ctype_base::mask(alpha | upper | xdigit | print) /* B */,\n+      ctype_base::mask(alpha | upper | xdigit | print) /* C */,\n+      ctype_base::mask(alpha | upper | xdigit | print) /* D */,\n+      ctype_base::mask(alpha | upper | xdigit | print) /* E */,\n+      ctype_base::mask(alpha | upper | xdigit | print) /* F */,\n+      ctype_base::mask(alpha | upper | print) /* G */,\n+      ctype_base::mask(alpha | upper | print) /* H */,\n+      ctype_base::mask(alpha | upper | print) /* I */,\n+      ctype_base::mask(alpha | upper | print) /* J */,\n+      ctype_base::mask(alpha | upper | print) /* K */,\n+      ctype_base::mask(alpha | upper | print) /* L */,\n+      ctype_base::mask(alpha | upper | print) /* M */,\n+      ctype_base::mask(alpha | upper | print) /* N */,\n+      ctype_base::mask(alpha | upper | print) /* O */,\n+      ctype_base::mask(alpha | upper | print) /* P */,\n+      ctype_base::mask(alpha | upper | print) /* Q */,\n+      ctype_base::mask(alpha | upper | print) /* R */,\n+      ctype_base::mask(alpha | upper | print) /* S */,\n+      ctype_base::mask(alpha | upper | print) /* T */,\n+      ctype_base::mask(alpha | upper | print) /* U */,\n+      ctype_base::mask(alpha | upper | print) /* V */,\n+      ctype_base::mask(alpha | upper | print) /* W */,\n+      ctype_base::mask(alpha | upper | print) /* X */,\n+      ctype_base::mask(alpha | upper | print) /* Y */,\n+      ctype_base::mask(alpha | upper | print) /* Z */,\n+      ctype_base::mask(punct | print) /* [ */,\n+      ctype_base::mask(punct | print) /* \\ */,\n+      ctype_base::mask(punct | print) /* ] */,\n+      ctype_base::mask(punct | print) /* ^ */,\n+      ctype_base::mask(punct | print) /* _ */,\n+      ctype_base::mask(punct | print) /* ` */,\n+      ctype_base::mask(alpha | lower | xdigit | print) /* a */,\n+      ctype_base::mask(alpha | lower | xdigit | print) /* b */,\n+      ctype_base::mask(alpha | lower | xdigit | print) /* c */,\n+      ctype_base::mask(alpha | lower | xdigit | print) /* d */,\n+      ctype_base::mask(alpha | lower | xdigit | print) /* e */,\n+      ctype_base::mask(alpha | lower | xdigit | print) /* f */,\n+      ctype_base::mask(alpha | lower | print) /* g */,\n+      ctype_base::mask(alpha | lower | print) /* h */,\n+      ctype_base::mask(alpha | lower | print) /* i */,\n+      ctype_base::mask(alpha | lower | print) /* j */,\n+      ctype_base::mask(alpha | lower | print) /* k */,\n+      ctype_base::mask(alpha | lower | print) /* l */,\n+      ctype_base::mask(alpha | lower | print) /* m */,\n+      ctype_base::mask(alpha | lower | print) /* n */,\n+      ctype_base::mask(alpha | lower | print) /* o */,\n+      ctype_base::mask(alpha | lower | print) /* p */,\n+      ctype_base::mask(alpha | lower | print) /* q */,\n+      ctype_base::mask(alpha | lower | print) /* r */,\n+      ctype_base::mask(alpha | lower | print) /* s */,\n+      ctype_base::mask(alpha | lower | print) /* t */,\n+      ctype_base::mask(alpha | lower | print) /* u */,\n+      ctype_base::mask(alpha | lower | print) /* v */,\n+      ctype_base::mask(alpha | lower | print) /* w */,\n+      ctype_base::mask(alpha | lower | print) /* x */,\n+      ctype_base::mask(alpha | lower | print) /* y */,\n+      ctype_base::mask(alpha | lower | print) /* x */,\n+      ctype_base::mask(punct | print) /* { */,\n+      ctype_base::mask(punct | print) /* | */,\n+      ctype_base::mask(punct | print) /* } */,\n+      ctype_base::mask(punct | print) /* ~ */,\n+      cntrl /* del (0x7f)*/,\n+      /* The next 128 entries are all 0.   */\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+    };\n+    return _S_classic_table;\n+  }\n+\n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n+\t\t     size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_table(__table ? __table : classic_table())\n+  {\n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n+\n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n+  : facet(__refs), _M_del(__table != 0 && __del),\n+  _M_toupper(NULL), _M_tolower(NULL),\n+  _M_table(__table ? __table : classic_table())\n+  {\n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n+\n+  char\n+  ctype<char>::do_toupper(char __c) const\n+  { return (this->is(ctype_base::lower, __c) ? (__c - 'a' + 'A') : __c); }\n+\n+  const char*\n+  ctype<char>::do_toupper(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = this->do_toupper(*__low);\n+\t++__low;\n+      }\n+    return __high;\n+  }\n+\n+  char\n+  ctype<char>::do_tolower(char __c) const\n+  { return (this->is(ctype_base::upper, __c) ? (__c - 'A' + 'a') : __c); }\n+\n+  const char*\n+  ctype<char>::do_tolower(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = this->do_tolower(*__low);\n+\t++__low;\n+      }\n+    return __high;\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "f1b9f6c6617a2f40d87cdc5963f6243f5e1d87cc", "filename": "libstdc++-v3/config/os/mingw32-w64/ctype_inline.h", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fctype_inline.h?ref=d7a3ef9794c7a58d576c563d1610b42ba040c871", "patch": "@@ -0,0 +1,75 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2000, 2009, 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/ctype_inline.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{locale}\n+ */\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+// ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n+// functions go in ctype.cc\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  bool\n+  ctype<char>::\n+  is(mask __m, char __c) const\n+  { return (_M_table[static_cast<unsigned char>(__c) ] & __m); }\n+\n+\n+  const char*\n+  ctype<char>::\n+  is(const char* __low, const char* __high, mask* __vec) const\n+  {\n+    while (__low < __high)\n+      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];\n+    return __high;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_is(mask __m, const char* __low, const char* __high) const\n+  {\n+    while (__low < __high && !this->is(__m, *__low))\n+      ++__low;\n+    return __low;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_not(mask __m, const char* __low, const char* __high) const\n+  {\n+    while (__low < __high && this->is(__m, *__low) != 0)\n+      ++__low;\n+    return __low;\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "da2d311762cdc4e00a3154400d1716e391b1cb07", "filename": "libstdc++-v3/config/os/mingw32-w64/error_constants.h", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Ferror_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Ferror_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Ferror_constants.h?ref=d7a3ef9794c7a58d576c563d1610b42ba040c871", "patch": "@@ -0,0 +1,142 @@\n+// Specific definitions for mingw32 platform  -*- C++ -*-\n+\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/error_constants.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{system_error}\n+ */\n+\n+#ifndef _GLIBCXX_ERROR_CONSTANTS\n+#  define _GLIBCXX_ERROR_CONSTANTS\n+\n+#include <bits/c++config.h>\n+#include <cerrno>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+// Most of the commented-out error codes are socket-related and could be\n+// replaced by Winsock WSA-prefixed equivalents.\n+  enum class errc\n+    {\n+//    address_family_not_supported = \t\tEAFNOSUPPORT,\n+//    address_in_use = \t\t\t\tEADDRINUSE,\n+//    address_not_available = \t\t\tEADDRNOTAVAIL,\n+//    already_connected = \t\t\tEISCONN,\n+      argument_list_too_long = \t\t\tE2BIG,\n+      argument_out_of_domain = \t\t\tEDOM,\n+      bad_address = \t\t\t\tEFAULT,\n+      bad_file_descriptor = \t\t\tEBADF,\n+//    bad_message = \t\t\t\tEBADMSG,\n+      broken_pipe = \t\t\t\tEPIPE,\n+//    connection_aborted = \t\t\tECONNABORTED,\n+//    connection_already_in_progress = \t\tEALREADY,\n+//    connection_refused = \t\t\tECONNREFUSED,\n+//    connection_reset = \t\t\tECONNRESET,\n+//    cross_device_link = \t\t\tEXDEV,\n+//    destination_address_required = \t\tEDESTADDRREQ,\n+      device_or_resource_busy = \t\tEBUSY,\n+      directory_not_empty = \t\t\tENOTEMPTY,\n+      executable_format_error = \t\tENOEXEC,\n+      file_exists = \t       \t\t\tEEXIST,\n+      file_too_large = \t\t\t\tEFBIG,\n+      filename_too_long = \t\t\tENAMETOOLONG,\n+      function_not_supported = \t\t\tENOSYS,\n+//    host_unreachable = \t\t\tEHOSTUNREACH,\n+//    identifier_removed = \t\t\tEIDRM,\n+      illegal_byte_sequence = \t\t\tEILSEQ,\n+      inappropriate_io_control_operation = \tENOTTY,\n+      interrupted = \t\t\t\tEINTR,\n+      invalid_argument = \t\t\tEINVAL,\n+      invalid_seek = \t\t\t\tESPIPE,\n+      io_error = \t\t\t\tEIO,\n+      is_a_directory = \t\t\t\tEISDIR,\n+//    message_size = \t\t\t\tEMSGSIZE,\n+//    network_down = \t\t\t\tENETDOWN,\n+//    network_reset = \t\t\t\tENETRESET,\n+//    network_unreachable = \t\t\tENETUNREACH,\n+//    no_buffer_space = \t\t\tENOBUFS,\n+#ifdef _GLIBCXX_HAVE_ECHILD\n+      no_child_process = \t\t\tECHILD,\n+#endif\n+//    no_link = \t\t\t\tENOLINK,\n+      no_lock_available = \t\t\tENOLCK,\n+//    no_message_available = \t\t\tENODATA,\n+//    no_message = \t\t\t\tENOMSG,\n+//    no_protocol_option = \t\t\tENOPROTOOPT,\n+#ifdef _GLIBCXX_HAVE_ENOSPC\n+      no_space_on_device = \t\t\tENOSPC,\n+#endif\n+//    no_stream_resources = \t\t\tENOSR,\n+      no_such_device_or_address = \t\tENXIO,\n+      no_such_device = \t\t\t\tENODEV,\n+      no_such_file_or_directory = \t\tENOENT,\n+      no_such_process = \t\t\tESRCH,\n+      not_a_directory = \t\t\tENOTDIR,\n+//    not_a_socket = \t\t\t\tENOTSOCK,\n+//    not_a_stream = \t\t\t\tENOSTR,\n+//    not_connected = \t\t\t\tENOTCONN,\n+      not_enough_memory = \t\t\tENOMEM,\n+#ifdef _GLIBCXX_HAVE_ENOTSUP\n+      not_supported = \t\t\t\tENOTSUP,\n+#endif\n+//    operation_canceled = \t\t\tECANCELED,\n+//    operation_in_progress = \t\t\tEINPROGRESS,\n+#ifdef _GLIBCXX_HAVE_EPERM\n+      operation_not_permitted = \t\tEPERM,\n+#endif\n+//    operation_not_supported = \t\tEOPNOTSUPP,\n+#ifdef _GLIBCXX_HAVE_EWOULDBLOCK\n+      operation_would_block = \t\t\tEWOULDBLOCK,\n+#endif\n+//    owner_dead = \t\t\t\tEOWNERDEAD,\n+      permission_denied = \t\t\tEACCES,\n+//    protocol_error = \t\t\t\tEPROTO,\n+//    protocol_not_supported = \t\t\tEPROTONOSUPPORT,\n+      read_only_file_system = \t\t\tEROFS,\n+      resource_deadlock_would_occur = \t\tEDEADLK,\n+      resource_unavailable_try_again = \t\tEAGAIN,\n+      result_out_of_range = \t\t\tERANGE,\n+//    state_not_recoverable = \t\t\tENOTRECOVERABLE,\n+//    stream_timeout = \t\t\t\tETIME,\n+//    text_file_busy = \t\t\t\tETXTBSY,\n+#ifdef _GLIBCXX_HAVE_ETIMEDOUT\n+      timed_out = \t\t\t\tETIMEDOUT,\n+#endif\n+      too_many_files_open_in_system = \t\tENFILE,\n+      too_many_files_open = \t\t\tEMFILE,\n+      too_many_links = \t\t\t\tEMLINK\n+//    too_many_symbolic_link_levels = \t\tELOOP,\n+#ifdef _GLIBCXX_HAVE_EOVERFLOW\n+\t,\n+      value_too_large = \t\t\tEOVERFLOW\n+#endif\n+//    wrong_protocol_type = \t\t\tEPROTOTYPE\n+   };\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n+#endif"}, {"sha": "c483a92e6daaf0f6a169e7709abf440918783d82", "filename": "libstdc++-v3/config/os/mingw32-w64/os_defines.h", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32-w64%2Fos_defines.h?ref=d7a3ef9794c7a58d576c563d1610b42ba040c871", "patch": "@@ -0,0 +1,68 @@\n+// Specific definitions for generic platforms  -*- C++ -*-\n+\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n+// 2009, 2010  Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/os_defines.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{iosfwd}\n+ */\n+\n+#ifndef _GLIBCXX_OS_DEFINES\n+#  define _GLIBCXX_OS_DEFINES\n+\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n+\n+//  Define as 0, if you want, to enable inlining of gthread functions.\n+//  By default, don't pollute libstdc++ with win32api names.\n+#if !defined (__GTHREAD_HIDE_WIN32API)\n+# define __GTHREAD_HIDE_WIN32API 1\n+#endif\n+\n+// Don't let win32api windef.h define min and max as macros\n+// if included after c++config.h.\n+#undef NOMINMAX\n+#define NOMINMAX 1\n+\n+#if defined (_GLIBCXX_DLL)\n+#define _GLIBCXX_PSEUDO_VISIBILITY_default __attribute__ ((__dllimport__))\n+#else\n+#define _GLIBCXX_PSEUDO_VISIBILITY_default\n+#endif\n+#define _GLIBCXX_PSEUDO_VISIBILITY_hidden\n+\n+#define _GLIBCXX_PSEUDO_VISIBILITY(V) _GLIBCXX_PSEUDO_VISIBILITY_ ## V\n+\n+// See libstdc++/20806.\n+#define _GLIBCXX_HAVE_DOS_BASED_FILESYSTEM 1\n+\n+// See  libstdc++/37522.\n+#define _GLIBCXX_HAVE_BROKEN_VSWPRINTF 1\n+\n+// See libstdc++/43738\n+// On native windows targets there is no ioctl function. And the existing\n+// ioctlsocket function doesn't work for normal file-descriptors.\n+#define _GLIBCXX_NO_IOCTL 1\n+\n+#endif"}, {"sha": "87579d9c7c7dff325b534295f2c59f170acc97f7", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=d7a3ef9794c7a58d576c563d1610b42ba040c871", "patch": "@@ -17240,10 +17240,15 @@ fi\n \n \n   if test $enable_fully_dynamic_string = yes; then\n+    enable_fully_dynamic_string_def=1\n+  else\n+    enable_fully_dynamic_string_def=0\n+  fi\n \n-$as_echo \"#define _GLIBCXX_FULLY_DYNAMIC_STRING 1\" >>confdefs.h\n+cat >>confdefs.h <<_ACEOF\n+#define _GLIBCXX_FULLY_DYNAMIC_STRING ${enable_fully_dynamic_string_def}\n+_ACEOF\n \n-  fi\n \n \n "}, {"sha": "4da4508fa4ff19c07c3529a89567f2e1251f299f", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=d7a3ef9794c7a58d576c563d1610b42ba040c871", "patch": "@@ -260,8 +260,16 @@ case \"${host_os}\" in\n     atomic_word_dir=os/irix\n     ;;\n   mingw32*)\n-    os_include_dir=\"os/mingw32\"\n-    error_constants_dir=\"os/mingw32\"\n+    case \"$host\" in\n+      *-w64-*)\n+        os_include_dir=\"os/mingw32-w64\"\n+        error_constants_dir=\"os/mingw32-w64\"\n+        ;;\n+      *)\n+        os_include_dir=\"os/mingw32\"\n+        error_constants_dir=\"os/mingw32\"\n+        ;;\n+    esac\n     OPT_LDFLAGS=\"${OPT_LDFLAGS} \\$(lt_host_flags)\"\n     ;;\n   netbsd*)"}, {"sha": "5708194bd012f3d9ece6955eee477475892b4fa3", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=d7a3ef9794c7a58d576c563d1610b42ba040c871", "patch": "@@ -201,7 +201,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t_M_set_length_and_sharable(size_type __n)\n \t{\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n \t  if (__builtin_expect(this != &_S_empty_rep(), false))\n #endif\n \t    {\n@@ -231,7 +231,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \t_M_dispose(const _Alloc& __a)\n \t{\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n \t  if (__builtin_expect(this != &_S_empty_rep(), false))\n #endif\n \t    {\n@@ -252,7 +252,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_CharT*\n \t_M_refcopy() throw()\n \t{\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n \t  if (__builtin_expect(this != &_S_empty_rep(), false))\n #endif\n             __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);\n@@ -430,7 +430,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @brief  Default constructor creates an empty string.\n        */\n       basic_string()\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n       : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }\n #else\n       : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()){ }\n@@ -502,7 +502,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       basic_string(basic_string&& __str) noexcept\n       : _M_dataplus(__str._M_dataplus)\n       {\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\t\n+#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n \t__str._M_data(_S_empty_rep()._M_refdata());\n #else\n \t__str._M_data(_S_construct(size_type(), _CharT(), get_allocator()));"}, {"sha": "7eff81819f66b05353a751b04f54716b9a403338", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a3ef9794c7a58d576c563d1610b42ba040c871/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=d7a3ef9794c7a58d576c563d1610b42ba040c871", "patch": "@@ -80,7 +80,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n \t\t   input_iterator_tag)\n       {\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n \tif (__beg == __end && __a == _Alloc())\n \t  return _S_empty_rep()._M_refdata();\n #endif\n@@ -126,7 +126,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n \t\t   forward_iterator_tag)\n       {\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n \tif (__beg == __end && __a == _Alloc())\n \t  return _S_empty_rep()._M_refdata();\n #endif\n@@ -154,7 +154,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     basic_string<_CharT, _Traits, _Alloc>::\n     _S_construct(size_type __n, _CharT __c, const _Alloc& __a)\n     {\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n       if (__n == 0 && __a == _Alloc())\n \treturn _S_empty_rep()._M_refdata();\n #endif\n@@ -456,7 +456,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     basic_string<_CharT, _Traits, _Alloc>::\n     _M_leak_hard()\n     {\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n       if (_M_rep() == &_S_empty_rep())\n \treturn;\n #endif"}]}