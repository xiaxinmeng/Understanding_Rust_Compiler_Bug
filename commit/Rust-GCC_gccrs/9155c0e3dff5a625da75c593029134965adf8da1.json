{"sha": "9155c0e3dff5a625da75c593029134965adf8da1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE1NWMwZTNkZmY1YTYyNWRhNzVjNTkzMDI5MTM0OTY1YWRmOGRhMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-03-10T23:49:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-10T23:49:28Z"}, "message": "hashtable_policy.h (_Rehash_base<_Prime_rehash_policy, [...]): Add, per DR 1189.\n\n2010-03-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/hashtable_policy.h (_Rehash_base<_Prime_rehash_policy,\n\t_Hashtable>::reserve): Add, per DR 1189.\n\t* include/bits/hashtable.h (_Hashtable<>::size_type,\n\t_Hashtable<>::difference_type): Do not typedef from _Allocator.\n\t* testsuite/23_containers/unordered_map/dr1189.cc: New.\n\t* testsuite/23_containers/unordered_set/dr1189.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/dr1189.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/dr1189.cc: Likewise.\n\nFrom-SVN: r157373", "tree": {"sha": "b10cf6bd2959f6c78fae6f83539d42644ef6c288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b10cf6bd2959f6c78fae6f83539d42644ef6c288"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9155c0e3dff5a625da75c593029134965adf8da1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9155c0e3dff5a625da75c593029134965adf8da1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9155c0e3dff5a625da75c593029134965adf8da1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9155c0e3dff5a625da75c593029134965adf8da1/comments", "author": null, "committer": null, "parents": [{"sha": "f37f5bb93a40f2ca4bcf2e002e02878fa7f61dbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f37f5bb93a40f2ca4bcf2e002e02878fa7f61dbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f37f5bb93a40f2ca4bcf2e002e02878fa7f61dbc"}], "stats": {"total": 223, "additions": 218, "deletions": 5}, "files": [{"sha": "0985a7bf4ff0a8458b10f22dca2c54c1b4a00d47", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9155c0e3dff5a625da75c593029134965adf8da1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9155c0e3dff5a625da75c593029134965adf8da1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9155c0e3dff5a625da75c593029134965adf8da1", "patch": "@@ -1,3 +1,14 @@\n+2010-03-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/hashtable_policy.h (_Rehash_base<_Prime_rehash_policy,\n+\t_Hashtable>::reserve): Add, per DR 1189.\n+\t* include/bits/hashtable.h (_Hashtable<>::size_type,\n+\t_Hashtable<>::difference_type): Do not typedef from _Allocator.\n+\t* testsuite/23_containers/unordered_map/dr1189.cc: New.\n+\t* testsuite/23_containers/unordered_set/dr1189.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/dr1189.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/dr1189.cc: Likewise.\n+\n 2010-03-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tRevert:"}, {"sha": "cd7553d5133795f9ccd910a5de1453db3f6a4836", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9155c0e3dff5a625da75c593029134965adf8da1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9155c0e3dff5a625da75c593029134965adf8da1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=9155c0e3dff5a625da75c593029134965adf8da1", "patch": "@@ -127,13 +127,13 @@ namespace std\n       typedef _Equal                                      key_equal;\n       // mapped_type, if present, comes from _Map_base.\n       // hasher, if present, comes from _Hash_code_base.\n-      typedef typename _Allocator::difference_type        difference_type;\n-      typedef typename _Allocator::size_type              size_type;\n       typedef typename _Allocator::pointer                pointer;\n       typedef typename _Allocator::const_pointer          const_pointer;\n       typedef typename _Allocator::reference              reference;\n       typedef typename _Allocator::const_reference        const_reference;\n-      \n+\n+      typedef std::size_t                                 size_type;\n+      typedef std::ptrdiff_t                              difference_type;\n       typedef __detail::_Node_iterator<value_type, __constant_iterators,\n \t\t\t\t       __cache_hash_code>\n                                                           local_iterator;\n@@ -421,7 +421,10 @@ namespace std\n \n       // Set number of buckets to be appropriate for container of n element.\n       void rehash(size_type __n);\n-      \n+\n+      // DR 1189.\n+      // reserve, if present, comes from _Rehash_base.\n+\n     private:\n       // Unconditionally change size of bucket array to n.\n       void _M_rehash(size_type __n);"}, {"sha": "8471dfbf4ea05dc68c8e8675e488fbdf8e096693", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9155c0e3dff5a625da75c593029134965adf8da1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9155c0e3dff5a625da75c593029134965adf8da1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=9155c0e3dff5a625da75c593029134965adf8da1", "patch": "@@ -604,7 +604,7 @@ namespace __detail\n     }\n \n   // class template _Rehash_base.  Give hashtable the max_load_factor\n-  // functions iff the rehash policy is _Prime_rehash_policy.\n+  // functions and reserve iff the rehash policy is _Prime_rehash_policy.\n   template<typename _RehashPolicy, typename _Hashtable>\n     struct _Rehash_base { };\n \n@@ -624,6 +624,13 @@ namespace __detail\n \t_Hashtable* __this = static_cast<_Hashtable*>(this);\n \t__this->__rehash_policy(_Prime_rehash_policy(__z));\n       }\n+\n+      void\n+      reserve(std::size_t __n)\n+      {\n+\t_Hashtable* __this = static_cast<_Hashtable*>(this);\n+\t__this->rehash(__builtin_ceil(__n / max_load_factor()));\n+      }\n     };\n \n   // Class template _Hash_code_base.  Encapsulates two policy issues that"}, {"sha": "f89d5f1995682d957dd4fcad4ea5cb258f98217c", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/dr1189.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9155c0e3dff5a625da75c593029134965adf8da1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdr1189.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9155c0e3dff5a625da75c593029134965adf8da1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdr1189.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdr1189.cc?ref=9155c0e3dff5a625da75c593029134965adf8da1", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2010-03-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+\n+// DR 1189. Awkward interface for changing the number of buckets\n+// in an unordered associative container\n+void test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  \n+  std::unordered_map<int, double> m1;\n+  m1.reserve(10);\n+  VERIFY( m1.bucket_count() >= 10 );\n+\n+  m1.reserve(100);\n+  VERIFY( m1.bucket_count() >= 100 );\n+\n+  std::unordered_map<int, double> m2(100);\n+  VERIFY( m2.bucket_count() >= 100 );\n+\n+  m2.reserve(1000);\n+  VERIFY( m2.bucket_count() >= 1000 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "57e5f7da72591b38630ba14d1f6472eb240f5b6f", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/dr1189.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9155c0e3dff5a625da75c593029134965adf8da1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdr1189.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9155c0e3dff5a625da75c593029134965adf8da1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdr1189.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdr1189.cc?ref=9155c0e3dff5a625da75c593029134965adf8da1", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2010-03-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+\n+// DR 1189. Awkward interface for changing the number of buckets\n+// in an unordered associative container\n+void test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  \n+  std::unordered_multimap<int, double> mm1;\n+  mm1.reserve(10);\n+  VERIFY( mm1.bucket_count() >= 10 );\n+\n+  mm1.reserve(100);\n+  VERIFY( mm1.bucket_count() >= 100 );\n+\n+  std::unordered_map<int, double> mm2(100);\n+  VERIFY( mm2.bucket_count() >= 100 );\n+\n+  mm2.reserve(1000);\n+  VERIFY( mm2.bucket_count() >= 1000 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "59232a35a53880736d285ade0eb54ebcadf58bdd", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/dr1189.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9155c0e3dff5a625da75c593029134965adf8da1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdr1189.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9155c0e3dff5a625da75c593029134965adf8da1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdr1189.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdr1189.cc?ref=9155c0e3dff5a625da75c593029134965adf8da1", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2010-03-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+\n+// DR 1189. Awkward interface for changing the number of buckets\n+// in an unordered associative container\n+void test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  \n+  std::unordered_multiset<int> ms1;\n+  ms1.reserve(10);\n+  VERIFY( ms1.bucket_count() >= 10 );\n+\n+  ms1.reserve(100);\n+  VERIFY( ms1.bucket_count() >= 100 );\n+\n+  std::unordered_multiset<int> ms2(100);\n+  VERIFY( ms2.bucket_count() >= 100 );\n+\n+  ms2.reserve(1000);\n+  VERIFY( ms2.bucket_count() >= 1000 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e7047dbddc0c6e9fcf1382ca8b64f15295c4f8b8", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/dr1189.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9155c0e3dff5a625da75c593029134965adf8da1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdr1189.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9155c0e3dff5a625da75c593029134965adf8da1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdr1189.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdr1189.cc?ref=9155c0e3dff5a625da75c593029134965adf8da1", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2010-03-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+\n+// DR 1189. Awkward interface for changing the number of buckets\n+// in an unordered associative container\n+void test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  \n+  std::unordered_set<int> s1;\n+  s1.reserve(10);\n+  VERIFY( s1.bucket_count() >= 10 );\n+\n+  s1.reserve(100);\n+  VERIFY( s1.bucket_count() >= 100 );\n+\n+  std::unordered_set<int> s2(100);\n+  VERIFY( s2.bucket_count() >= 100 );\n+\n+  s2.reserve(1000);\n+  VERIFY( s2.bucket_count() >= 1000 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}