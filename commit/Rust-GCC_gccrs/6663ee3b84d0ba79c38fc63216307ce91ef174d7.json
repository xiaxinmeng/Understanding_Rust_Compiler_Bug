{"sha": "6663ee3b84d0ba79c38fc63216307ce91ef174d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY2M2VlM2I4NGQwYmE3OWMzOGZjNjMyMTYzMDdjZTkxZWYxNzRkNw==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@redhat.com", "date": "2005-06-29T00:11:36Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2005-06-29T00:11:36Z"}, "message": "re PR c/22052 (redefinition of inline function succeeds)\n\n2005-06-28  Eric Christopher  <echristo@redhat.com>\n\n        PR c/22052\n        PR c/21975\n        * c-decl.c (diagnose_mismatched_decls): Define DECL_EXTERN_INLINE.\n        Use. Fix detection of invalid extern inline redefinition.\n\n2005-06-28  Eric Christopher  <echristo@redhat.com>\n\n        PR c/22052\n        PR c/21975\n        * gcc.dg/inline1.c: New test.\n        * gcc.dg/inline2.c: Ditto.\n        * gcc.dg/inline3.c: Ditto.\n        * gcc.dg/inline4.c: Ditto.\n        * gcc.dg/inline5.c: Ditto.\n\nFrom-SVN: r101400", "tree": {"sha": "0ce5f3b906445d51cf61c96c360c5c7ffdf70cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ce5f3b906445d51cf61c96c360c5c7ffdf70cd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6663ee3b84d0ba79c38fc63216307ce91ef174d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6663ee3b84d0ba79c38fc63216307ce91ef174d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6663ee3b84d0ba79c38fc63216307ce91ef174d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6663ee3b84d0ba79c38fc63216307ce91ef174d7/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38c955ff4425e5ac6d81d23ac3e40cad1177e781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38c955ff4425e5ac6d81d23ac3e40cad1177e781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38c955ff4425e5ac6d81d23ac3e40cad1177e781"}], "stats": {"total": 104, "additions": 69, "deletions": 35}, "files": [{"sha": "2afa66c05568ac57ada2aa751d861c87a4834ce9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6663ee3b84d0ba79c38fc63216307ce91ef174d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6663ee3b84d0ba79c38fc63216307ce91ef174d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6663ee3b84d0ba79c38fc63216307ce91ef174d7", "patch": "@@ -1,3 +1,10 @@\n+2005-06-28  Eric Christopher  <echristo@redhat.com>\n+\n+\tPR c/22052\n+\tPR c/21975\n+\t* c-decl.c (diagnose_mismatched_decls): Define DECL_EXTERN_INLINE.\n+\tUse. Fix detection of invalid extern inline redefinition.\n+\n 2005-06-28  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-optimize.c (init_tree_optimization_passes): Fix typo."}, {"sha": "21248ae7b1d9b3b1a2cbb35a13fc7799ce9e1108", "filename": "gcc/c-decl.c", "status": "modified", "additions": 20, "deletions": 35, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6663ee3b84d0ba79c38fc63216307ce91ef174d7/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6663ee3b84d0ba79c38fc63216307ce91ef174d7/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6663ee3b84d0ba79c38fc63216307ce91ef174d7", "patch": "@@ -1154,6 +1154,9 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n   bool warned = false;\n   bool retval = true;\n \n+#define DECL_EXTERN_INLINE(DECL) (DECL_DECLARED_INLINE_P (DECL)  \\\n+\t\t\t\t  && DECL_EXTERNAL (DECL))\n+\n   /* If we have error_mark_node for either decl or type, just discard\n      the previous decl - we're in an error cascade already.  */\n   if (olddecl == error_mark_node || newdecl == error_mark_node)\n@@ -1282,6 +1285,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n      Multiple definitions are not allowed (6.9p3,5) but GCC permits\n      two definitions if one is 'extern inline' and one is not.  The non-\n      extern-inline definition supersedes the extern-inline definition.  */\n+\n   else if (TREE_CODE (newdecl) == FUNCTION_DECL)\n     {\n       /* If you declare a built-in function name as static, or\n@@ -1304,45 +1308,25 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t{\n \t  if (DECL_INITIAL (olddecl))\n \t    {\n-\t      /* If both decls have extern inline and are in the same TU,\n-\t         reject the new decl.  */\n-\t      if (DECL_DECLARED_INLINE_P (olddecl)\n-\t\t  && DECL_EXTERNAL (olddecl)\n-\t\t  && DECL_DECLARED_INLINE_P (newdecl)\n-\t\t  && DECL_EXTERNAL (newdecl)\n+\t      /* If both decls are in the same TU and the new declaration\n+\t\t isn't overridding an extern inline reject the new decl.\n+\t\t When we handle c99 style inline rules we'll want to reject\n+\t\t the following:\n+\n+\t\t DECL_EXTERN_INLINE (olddecl)\n+\t\t && !DECL_EXTERN_INLINE (newdecl)\n+\n+\t\t if they're in the same translation unit. Until we implement\n+\t\t the full semantics we accept the construct.  */\n+\t      if (!(DECL_EXTERN_INLINE (olddecl)\n+\t\t    && !DECL_EXTERN_INLINE (newdecl))\n \t\t  && same_translation_unit_p (newdecl, olddecl))\n \t\t{\n \t\t  error (\"%Jredefinition of %qD\", newdecl, newdecl);\n \t\t  locate_old_decl (olddecl, error);\n \t\t  return false;\n \t\t}\n-\t      /* If both decls have not extern inline, reject the new decl.  */\n-\t      if (!DECL_DECLARED_INLINE_P (olddecl)\n-\t\t  && !DECL_EXTERNAL (olddecl)\n-\t\t  && !DECL_DECLARED_INLINE_P (newdecl)\n-\t\t  && !DECL_EXTERNAL (newdecl))\n-\t\t{\n-\t\t  error (\"%Jredefinition of %qD\", newdecl, newdecl);\n-\t\t  locate_old_decl (olddecl, error);\n-\t\t  return false;\n-\t\t}\n-\t      /* If the new decl is declared as extern inline, error if they are\n-\t         in the same TU, otherwise retain the old decl.  */\n-\t      if (!DECL_DECLARED_INLINE_P (olddecl)\n-\t\t  && !DECL_EXTERNAL (olddecl)\n-\t\t  && DECL_DECLARED_INLINE_P (newdecl)\n-\t\t  && DECL_EXTERNAL (newdecl))\n-\t\t{\n-\t\t  if (same_translation_unit_p (newdecl, olddecl))\n-\t\t    {\n-\t\t      error (\"%Jredefinition of %qD\", newdecl, newdecl);\n-\t\t      locate_old_decl (olddecl, error);\n-\t\t      return false;\n-\t\t    }\n-\t\t  else\n-\t\t    retval = false;\n-\t\t}\n-\t   }\n+\t    }\n \t}\n       /* If we have a prototype after an old-style function definition,\n \t the argument types must be checked specially.  */\n@@ -1371,8 +1355,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t     occur only in Objective C; see also above.  (FIXME: Make\n \t     Objective C use normal builtins.)  */\n \t  if (!DECL_IS_BUILTIN (olddecl)\n-\t      && !(DECL_EXTERNAL (olddecl)\n-\t\t   && DECL_DECLARED_INLINE_P (olddecl)))\n+\t      && !DECL_EXTERN_INLINE (olddecl))\n \t    {\n \t      error (\"%Jstatic declaration of %qD follows \"\n \t\t     \"non-static declaration\", newdecl, newdecl);\n@@ -1585,6 +1568,8 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n   if (warned || pedwarned)\n     locate_old_decl (olddecl, pedwarned ? pedwarn : warning0);\n \n+#undef DECL_EXTERN_INLINE\n+\n   return retval;\n }\n "}, {"sha": "1634814bffd3db098fd94a4572df1baaab203d7d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6663ee3b84d0ba79c38fc63216307ce91ef174d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6663ee3b84d0ba79c38fc63216307ce91ef174d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6663ee3b84d0ba79c38fc63216307ce91ef174d7", "patch": "@@ -1,3 +1,13 @@\n+2005-06-28  Eric Christopher  <echristo@redhat.com>\n+\n+\tPR c/22052\n+\tPR c/21975\n+\t* gcc.dg/inline1.c: New test.\n+\t* gcc.dg/inline2.c: Ditto.\n+\t* gcc.dg/inline3.c: Ditto.\n+\t* gcc.dg/inline4.c: Ditto.\n+\t* gcc.dg/inline5.c: Ditto.\n+\t\n 2005-06-28  Thomas Koenig  <Thomas.Koenig@online.de>\n \n         PR libfortran/22142"}, {"sha": "f7a7eb4b956a36c31d8041f77ba1edd0871da0d8", "filename": "gcc/testsuite/gcc.dg/inline1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6663ee3b84d0ba79c38fc63216307ce91ef174d7/gcc%2Ftestsuite%2Fgcc.dg%2Finline1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6663ee3b84d0ba79c38fc63216307ce91ef174d7/gcc%2Ftestsuite%2Fgcc.dg%2Finline1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline1.c?ref=6663ee3b84d0ba79c38fc63216307ce91ef174d7", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -std=gnu89\" } */\n+/* This test is expected to fail with an error for the redefinition of foo.\n+   This violates the constraint of 6.9#3 (no more than one external definition\n+   of an identifier with internal linkage in the same translation unit).  */\n+static inline int foo(void) { return 1; } /* { dg-error \"previous definition of\" } */\n+static inline int foo(void) { return 0; } /* { dg-error \"redefinition of\" } */\n+"}, {"sha": "ede41049274bea830b40cdff7aad065616564457", "filename": "gcc/testsuite/gcc.dg/inline2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6663ee3b84d0ba79c38fc63216307ce91ef174d7/gcc%2Ftestsuite%2Fgcc.dg%2Finline2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6663ee3b84d0ba79c38fc63216307ce91ef174d7/gcc%2Ftestsuite%2Fgcc.dg%2Finline2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline2.c?ref=6663ee3b84d0ba79c38fc63216307ce91ef174d7", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -std=gnu89\" } */\n+/* This test should compile successfully.  */\n+extern inline int foo (void) { return 0; }\n+inline int foo (void) { return 1; }"}, {"sha": "bc755e32ed2f4cef9cb6418889edc5c8a71f68ec", "filename": "gcc/testsuite/gcc.dg/inline3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6663ee3b84d0ba79c38fc63216307ce91ef174d7/gcc%2Ftestsuite%2Fgcc.dg%2Finline3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6663ee3b84d0ba79c38fc63216307ce91ef174d7/gcc%2Ftestsuite%2Fgcc.dg%2Finline3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline3.c?ref=6663ee3b84d0ba79c38fc63216307ce91ef174d7", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -std=gnu89\" } */\n+/* This testcase should fail since we're redefining foo in the same\n+   translation unit.  */\n+extern inline int foo(void) { return 0; }\n+inline int foo (void) { return 1; } /* { dg-error \"previous definition of\" } */\n+int foo (void) { return 2; } /* { dg-error \"error: redefinition of\" } */"}, {"sha": "a5c7dda0a02ee6caaf5e790dc186821d899e511c", "filename": "gcc/testsuite/gcc.dg/inline4.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6663ee3b84d0ba79c38fc63216307ce91ef174d7/gcc%2Ftestsuite%2Fgcc.dg%2Finline4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6663ee3b84d0ba79c38fc63216307ce91ef174d7/gcc%2Ftestsuite%2Fgcc.dg%2Finline4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline4.c?ref=6663ee3b84d0ba79c38fc63216307ce91ef174d7", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -std=gnu89\" } */\n+/* This testcase should fail since we're redefining foo in the same\n+   translation unit.  */\n+int foo (void) { return 2; } /* { dg-error \"previous definition of\" } */\n+extern inline int foo (void) { return 1; } /* { dg-error \"redefinition of\" } */"}, {"sha": "86a2776251b10930e787e3e6bef1663ba192c92a", "filename": "gcc/testsuite/gcc.dg/inline5.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6663ee3b84d0ba79c38fc63216307ce91ef174d7/gcc%2Ftestsuite%2Fgcc.dg%2Finline5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6663ee3b84d0ba79c38fc63216307ce91ef174d7/gcc%2Ftestsuite%2Fgcc.dg%2Finline5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline5.c?ref=6663ee3b84d0ba79c38fc63216307ce91ef174d7", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -std=gnu89\" } */\n+/* This testcase should fail since we're redefining foo in the same\n+   translation unit.  */\n+extern inline int foo (void) { return 2; } /* { dg-error \"previous definition of\" } */\n+extern inline int foo (void) { return 1; } /* { dg-error \"redefinition of\" } */"}]}