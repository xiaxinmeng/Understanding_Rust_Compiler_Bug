{"sha": "f28d3046d26b66851e570b4c851a0d856f545926", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI4ZDMwNDZkMjZiNjY4NTFlNTcwYjRjODUxYTBkODU2ZjU0NTkyNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-08-29T08:40:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-08-29T08:40:48Z"}, "message": "re PR middle-end/23484 (__builtin___memcpy_chk miscompilation)\n\n\tPR middle-end/23484\n\t* builtins.c (fold_builtin_memory_chk, fold_builtin_stxcpy_chk,\n\tfold_builtin_strncpy_chk, fold_builtin_snprintf_chk): If len is\n\tnot constant, but maxlen is, don't set len to maxlen, rather\n\tset maxlen to len if len is a constant.\n\n\t* gcc.c-torture/execute/builtins/pr23484-chk.c: New test.\n\t* gcc.c-torture/execute/builtins/pr23484-chk-lib.c: New file.\n\nFrom-SVN: r103594", "tree": {"sha": "3b05ddc14a41f4ae6ef2054dd356f6df933d296e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b05ddc14a41f4ae6ef2054dd356f6df933d296e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f28d3046d26b66851e570b4c851a0d856f545926", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f28d3046d26b66851e570b4c851a0d856f545926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f28d3046d26b66851e570b4c851a0d856f545926", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f28d3046d26b66851e570b4c851a0d856f545926/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37261a5c97f0844da609767d0e5f4dfb748dc6e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37261a5c97f0844da609767d0e5f4dfb748dc6e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37261a5c97f0844da609767d0e5f4dfb748dc6e3"}], "stats": {"total": 98, "additions": 89, "deletions": 9}, "files": [{"sha": "121c889f59d5ef0d2467b9d54f3d0ebebd03c1c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28d3046d26b66851e570b4c851a0d856f545926/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28d3046d26b66851e570b4c851a0d856f545926/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f28d3046d26b66851e570b4c851a0d856f545926", "patch": "@@ -1,3 +1,11 @@\n+2005-08-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/23484\n+\t* builtins.c (fold_builtin_memory_chk, fold_builtin_stxcpy_chk,\n+\tfold_builtin_strncpy_chk, fold_builtin_snprintf_chk): If len is\n+\tnot constant, but maxlen is, don't set len to maxlen, rather\n+\tset maxlen to len if len is a constant.\n+\n 2005-08-29  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/23475"}, {"sha": "16dfc05560e07dc0f7b094d45848d55f337d9342", "filename": "gcc/builtins.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28d3046d26b66851e570b4c851a0d856f545926/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28d3046d26b66851e570b4c851a0d856f545926/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f28d3046d26b66851e570b4c851a0d856f545926", "patch": "@@ -10208,10 +10208,11 @@ fold_builtin_memory_chk (tree fndecl, tree arglist, tree maxlen, bool ignore,\n \t\t}\n \t      return 0;\n \t    }\n-\t  len = maxlen;\n \t}\n+      else\n+\tmaxlen = len;\n \n-      if (tree_int_cst_lt (size, len))\n+      if (tree_int_cst_lt (size, maxlen))\n \treturn 0;\n     }\n \n@@ -10313,10 +10314,11 @@ fold_builtin_stxcpy_chk (tree fndecl, tree arglist, tree maxlen, bool ignore,\n \t      return fold_convert (TREE_TYPE (TREE_TYPE (fndecl)),\n \t\t\t\t   build_function_call_expr (fn, arglist));\n \t    }\n-\t  len = maxlen;\n \t}\n-      \n-      if (! tree_int_cst_lt (len, size))\n+      else\n+\tmaxlen = len;\n+\n+      if (! tree_int_cst_lt (maxlen, size))\n \treturn 0;\n     }\n \n@@ -10361,10 +10363,11 @@ fold_builtin_strncpy_chk (tree arglist, tree maxlen)\n \t     if SIZE is >= MAXLEN, never convert to __ocs_fail ().  */\n \t  if (maxlen == NULL_TREE || ! host_integerp (maxlen, 1))\n \t    return 0;\n-\t  len = maxlen;\n \t}\n+      else\n+\tmaxlen = len;\n \n-      if (tree_int_cst_lt (size, len))\n+      if (tree_int_cst_lt (size, maxlen))\n \treturn 0;\n     }\n \n@@ -10630,10 +10633,11 @@ fold_builtin_snprintf_chk (tree arglist, tree maxlen,\n \t     if SIZE is >= MAXLEN, never convert to __ocs_fail ().  */\n \t  if (maxlen == NULL_TREE || ! host_integerp (maxlen, 1))\n \t    return 0;\n-\t  len = maxlen;\n \t}\n+      else\n+\tmaxlen = len;\n \n-      if (tree_int_cst_lt (size, len))\n+      if (tree_int_cst_lt (size, maxlen))\n \treturn 0;\n     }\n "}, {"sha": "d4de911da7d816f0fe6a4261615ed5cff8fc6c5f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28d3046d26b66851e570b4c851a0d856f545926/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28d3046d26b66851e570b4c851a0d856f545926/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f28d3046d26b66851e570b4c851a0d856f545926", "patch": "@@ -1,3 +1,9 @@\n+2005-08-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/23484\n+\t* gcc.c-torture/execute/builtins/pr23484-chk.c: New test.\n+\t* gcc.c-torture/execute/builtins/pr23484-chk-lib.c: New file.\n+\n 2005-08-29  Andreas Jaeger  <aj@suse.de>\n \n \tPR testsuite/23607"}, {"sha": "9daf13e827b5f757f79552f56c57ed55258d8eb3", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/pr23484-chk-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28d3046d26b66851e570b4c851a0d856f545926/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fpr23484-chk-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28d3046d26b66851e570b4c851a0d856f545926/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fpr23484-chk-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fpr23484-chk-lib.c?ref=f28d3046d26b66851e570b4c851a0d856f545926", "patch": "@@ -0,0 +1 @@\n+#include \"lib/chk.c\""}, {"sha": "58d4db4b21b13ebb2e1d0c05b920c934c72b2263", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/pr23484-chk.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f28d3046d26b66851e570b4c851a0d856f545926/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fpr23484-chk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f28d3046d26b66851e570b4c851a0d856f545926/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fpr23484-chk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fpr23484-chk.c?ref=f28d3046d26b66851e570b4c851a0d856f545926", "patch": "@@ -0,0 +1,61 @@\n+/* PR middle-end/23484 */\n+\n+extern void abort (void);\n+typedef __SIZE_TYPE__ size_t;\n+extern size_t strlen (const char *);\n+extern void *memcpy (void *, const void *, size_t);\n+extern void *mempcpy (void *, const void *, size_t);\n+extern void *memmove (void *, const void *, size_t);\n+extern int snprintf (char *, size_t, const char *, ...);\n+extern int memcmp (const void *, const void *, size_t);\n+\n+#include \"chk.h\"\n+\n+static char data[8] = \"ABCDEFG\";\n+\n+int l1;\n+\n+void\n+__attribute__((noinline))\n+test1 (void)\n+{\n+  char buf[8];\n+\n+  /* All the checking calls in this routine have a maximum length, so\n+     object size checking should be done at compile time if optimizing.  */\n+  chk_calls = 0;\n+\n+  memset (buf, 'I', sizeof (buf));\n+  if (memcpy (buf, data, l1 ? sizeof (buf) : 4) != buf\n+      || memcmp (buf, \"ABCDIIII\", 8))\n+    abort ();\n+\n+  memset (buf, 'J', sizeof (buf));\n+  if (mempcpy (buf, data, l1 ? sizeof (buf) : 4) != buf + 4\n+      || memcmp (buf, \"ABCDJJJJ\", 8))\n+    abort ();\n+\n+  memset (buf, 'K', sizeof (buf));\n+  if (memmove (buf, data, l1 ? sizeof (buf) : 4) != buf\n+      || memcmp (buf, \"ABCDKKKK\", 8))\n+    abort ();\n+\n+  memset (buf, 'L', sizeof (buf));\n+  if (snprintf (buf, l1 ? sizeof (buf) : 4, \"%d\", l1 + 65536) != 5\n+      || memcmp (buf, \"655\\0LLLL\", 8))\n+    abort ();\n+\n+  if (chk_calls)\n+    abort ();\n+}\n+\n+void\n+main_test (void)\n+{\n+#ifndef __OPTIMIZE__\n+  /* Object size checking is only intended for -O[s123].  */\n+  return;\n+#endif\n+  __asm (\"\" : \"=r\" (l1) : \"0\" (l1));\n+  test1 ();\n+}"}]}