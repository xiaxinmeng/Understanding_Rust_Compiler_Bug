{"sha": "ba0db24386107ffa237a2af0d1fdef9030460157", "node_id": "C_kwDOANBUbNoAKGJhMGRiMjQzODYxMDdmZmEyMzdhMmFmMGQxZmRlZjkwMzA0NjAxNTc", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-05T13:28:55Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-05T15:57:25Z"}, "message": "Do not ICE when updating a NAN to a non-NAN.\n\nUpdating a definite NAN to a definitely not NAN was an assertion\nfailure, but it turns out we can have such a scenario while attempting\nto thread an impossible path.  This patch updates the range to\nundefined.\n\nWhat happens in the testcase is that we are trying to thread path that\nstarts like this:\n\n    <bb 5> [local count: 81335936906]:\n    SR.30_3 =  Nan;\n    goto <bb 7>; [100.00%]\n\n    <bb 7> [local count: 108447915740]:\n    # SR.30_25 = PHI <SR.30_3(5), SR.30_12(6)>\n    plus_33 = SR.30_25;\n    w1$value__13 = f_distance$D2421$value__1;\n    w2$value__14 = plus_33;\n    if (w1$value__13 == w2$value__14)\n      goto <bb 8>; [50.00%]\n    else\n      goto <bb 9>; [50.00%]\n\nOn the path, SR.30_25 is NAN, which ultimately makes w2$value__14 a NAN.\n\nThis means that the 7->8 is impossible on the path.\n\nOn the true arm (foperator_equal::op1_range) we are asserting that op1\n(w1$value__13) is a !NAN because for the == conditional to succeed,\nneither operand can be a NAN.  But...we know that operand 2 is a NAN.\nThis is an impossible scenario.\n\nWe are ICEing because frange::set_nan() sees the NAN and the desire to\nset the NAN flag to NO.  The correct thing to do is to set the range\nto undefined, which is basically unreachable, and will cause all the\nright things to happen.  For that matter, the threader will see that\nan UNDEFINED range was calculated in the path and abort trying to\ninvestigate paths in that direction.\n\n\tPR middle-end/106824\n\ngcc/ChangeLog:\n\n\t* value-range.cc (frange::set_nan): Set undefined when updating a\n\tNAN to a non-NAN.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/pr106824.C: New test.", "tree": {"sha": "1c091eccc59e7947cdc847c8e2a1acce0e935f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c091eccc59e7947cdc847c8e2a1acce0e935f19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba0db24386107ffa237a2af0d1fdef9030460157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0db24386107ffa237a2af0d1fdef9030460157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba0db24386107ffa237a2af0d1fdef9030460157", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0db24386107ffa237a2af0d1fdef9030460157/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b3587b3c25d1ff806b43357132af352ea734f9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3587b3c25d1ff806b43357132af352ea734f9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b3587b3c25d1ff806b43357132af352ea734f9c"}], "stats": {"total": 88, "additions": 86, "deletions": 2}, "files": [{"sha": "bd80be0dfaa7a2379797794c59c7726a938d8364", "filename": "gcc/testsuite/g++.dg/pr106824.C", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0db24386107ffa237a2af0d1fdef9030460157/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr106824.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0db24386107ffa237a2af0d1fdef9030460157/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr106824.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr106824.C?ref=ba0db24386107ffa237a2af0d1fdef9030460157", "patch": "@@ -0,0 +1,76 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -w -std=c++11\" }\n+\n+using int32 = int;\n+int ShortestPath_distance;\n+struct FloatWeightTpl {\n+  FloatWeightTpl(float f) : value_(f) {}\n+  float Value() { return value_; }\n+  float value_;\n+};\n+template <class T> bool operator!=(FloatWeightTpl w1, T w2) {\n+  bool __trans_tmp_2;\n+  FloatWeightTpl __trans_tmp_3 = w1;\n+  __trans_tmp_2 = __trans_tmp_3.Value() == w2.Value();\n+  return __trans_tmp_2;\n+}\n+struct TropicalWeightTpl : FloatWeightTpl {\n+  TropicalWeightTpl(float f) : FloatWeightTpl(f) {}\n+  static TropicalWeightTpl Zero();\n+  static TropicalWeightTpl NoWeight() {\n+    float __trans_tmp_5 = __builtin_nanf(\"\");\n+    return __trans_tmp_5;\n+  }\n+  bool Member() { return value_; }\n+};\n+TropicalWeightTpl Plus(TropicalWeightTpl w1, TropicalWeightTpl &w2) {\n+  return w1.Member() || w2.Member() ? TropicalWeightTpl::NoWeight()          : w2.Value()               ? : w2;\n+}\n+TropicalWeightTpl Times();\n+struct ArcTpl {\n+  using Weight = TropicalWeightTpl;\n+};\n+template <class, class, class> struct ShortestPathOptions {\n+  ShortestPathOptions(int, int, int32, bool, bool);\n+};\n+template <class Arc, class Queue, class ArcFilter>\n+void SingleShortestPath(ShortestPathOptions<Arc, Queue, ArcFilter>) {\n+  using Weight = typename Arc::Weight;\n+  auto f_distance = Weight::Zero();\n+  while (!0) {\n+    TropicalWeightTpl __trans_tmp_1 = Times(),\n+                      plus = Plus(f_distance, __trans_tmp_1);\n+    if (f_distance != plus)\n+      f_distance = plus;\n+  }\n+}\n+template <class Arc, class Queue, class ArcFilter>\n+void ShortestPath(int, int *, int *,\n+                  ShortestPathOptions<Arc, Queue, ArcFilter> opts) {\n+  SingleShortestPath(opts);\n+}\n+struct ShortestDistanceOptions {\n+  float delta;\n+};\n+struct Trans_NS_script_ShortestPathOptions : ShortestDistanceOptions {\n+  int32 nshortest;\n+  bool unique;\n+};\n+namespace internal {\n+template <class, class>\n+void ShortestPath(int ifst, int *ofst, int *distance,\n+                  Trans_NS_script_ShortestPathOptions opts) {\n+  using ArcFilter = int;\n+  ShortestPathOptions<ArcTpl, int, ArcFilter> sopts(opts.nshortest, opts.unique,\n+                                                    false, opts.delta, 0);\n+  ShortestPath(ifst, ofst, distance, sopts);\n+}\n+int ShortestPath_ifst;\n+int ShortestPath_ofst;\n+Trans_NS_script_ShortestPathOptions ShortestPath_opts;\n+void ShortestPath() {\n+  using StateId = int;\n+  ShortestPath<ArcTpl, StateId>(ShortestPath_ifst, &ShortestPath_ofst,\n+                                &ShortestPath_distance, ShortestPath_opts);\n+}\n+} // namespace internal"}, {"sha": "c3f668a811ad3f366208d93bc5d91e31f376aa8f", "filename": "gcc/value-range.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0db24386107ffa237a2af0d1fdef9030460157/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0db24386107ffa237a2af0d1fdef9030460157/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=ba0db24386107ffa237a2af0d1fdef9030460157", "patch": "@@ -274,13 +274,21 @@ frange::set_nan (fp_prop::kind k)\n {\n   if (k == fp_prop::YES)\n     {\n+      if (get_nan ().no_p ())\n+\t{\n+\t  set_undefined ();\n+\t  return;\n+\t}\n       gcc_checking_assert (!undefined_p ());\n       *this = frange_nan (m_type);\n       return;\n     }\n \n-  // Setting NO on an obviously NAN range is nonsensical.\n-  gcc_checking_assert (k != fp_prop::NO || !real_isnan (&m_min));\n+  if (k == fp_prop::NO && get_nan ().yes_p ())\n+    {\n+      set_undefined ();\n+      return;\n+    }\n \n   // Setting VARYING on an obviously NAN range is a no-op.\n   if (k == fp_prop::VARYING && real_isnan (&m_min))"}]}