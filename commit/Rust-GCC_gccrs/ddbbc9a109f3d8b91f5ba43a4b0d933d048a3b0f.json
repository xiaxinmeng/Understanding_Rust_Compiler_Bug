{"sha": "ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRiYmM5YTEwOWYzZDhiOTFmNWJhNDNhNGIwZDkzM2QwNDhhM2IwZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-11-02T01:31:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-11-02T01:31:31Z"}, "message": "semantics.c (cxx_eval_constant_expression): Explain unacceptable use of variable better.\n\n\t* semantics.c (cxx_eval_constant_expression): Explain\n\tunacceptable use of variable better.\n\nFrom-SVN: r166168", "tree": {"sha": "82ebd2f5b98a6666636b46ec9382fdf7d0b34886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82ebd2f5b98a6666636b46ec9382fdf7d0b34886"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa2200cbb1ef5a6a7bdb9a5ba708c7400eb6b404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2200cbb1ef5a6a7bdb9a5ba708c7400eb6b404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa2200cbb1ef5a6a7bdb9a5ba708c7400eb6b404"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "93f1b7a7e438c8e60e2c2edc78b4a52a333ae695", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f", "patch": "@@ -1,3 +1,8 @@\n+2010-11-01  Jason Merrill  <jason@redhat.com>\n+\n+\t* semantics.c (cxx_eval_constant_expression): Explain\n+\tunacceptable use of variable better.\n+\n 2010-11-01  Gabriel Dos Reis  <gdr@cse.tamu.edu>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "2b8e9e3f4b473682132bbfd4b523cd09e593a9dc", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f", "patch": "@@ -6513,7 +6513,36 @@ cxx_eval_constant_expression (const constexpr_call *call, tree t,\n       if (DECL_P (r))\n \t{\n \t  if (!allow_non_constant)\n-\t    error (\"%qD cannot appear in a constant expression\", r);\n+\t    {\n+\t      tree type = TREE_TYPE (r);\n+\t      error (\"the value of %qD is not usable in a constant \"\n+\t\t     \"expression\", r);\n+\t      if (INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n+\t\t{\n+\t\t  if (!CP_TYPE_CONST_P (type))\n+\t\t    inform (DECL_SOURCE_LOCATION (r),\n+\t\t\t    \"%q#D is not const\", r);\n+\t\t  else if (CP_TYPE_VOLATILE_P (type))\n+\t\t    inform (DECL_SOURCE_LOCATION (r),\n+\t\t\t    \"%q#D is volatile\", r);\n+\t\t  else if (!DECL_INITIAL (r))\n+\t\t    inform (DECL_SOURCE_LOCATION (r),\n+\t\t\t    \"%qD was not initialized with a constant \"\n+\t\t\t    \"expression\", r);\n+\t\t  else\n+\t\t    gcc_unreachable ();\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (cxx_dialect >= cxx0x && !DECL_DECLARED_CONSTEXPR_P (r))\n+\t\t    inform (DECL_SOURCE_LOCATION (r),\n+\t\t\t    \"%qD was not declared %<constexpr%>\", r);\n+\t\t  else\n+\t\t    inform (DECL_SOURCE_LOCATION (r),\n+\t\t\t    \"%qD does not have integral or enumeration type\",\n+\t\t\t    r);\n+\t\t}\n+\t    }\n \t  *non_constant_p = true;\n \t}\n       break;"}, {"sha": "c7757f4759889abe652e6de27cbef3b81a9b9ae6", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ex1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C?ref=ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f", "patch": "@@ -55,7 +55,7 @@ constexpr complex I(0, 1);  // OK -- literal complex\n \n \n // 2 invoked with non-const args\n-double x5 = 1.0;\n+double x5 = 1.0;\t       // { dg-message \"not declared .constexpr\" }\n constexpr complex unit(x5, 0);\t// { dg-error \"x5|argument\" } error: x5 non-constant\n const complex one(x5, 0);   // OK, \u2018\u2018ordinary const\u2019\u2019 -- dynamic\n                            //   initialization"}, {"sha": "08552cd7de73c83ba719cac774abe6f7b31fa2ad", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ex3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex3.C?ref=ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f", "patch": "@@ -15,7 +15,7 @@ struct B\n   constexpr B(T _t): t(_t) { }\n };\n \n-B<int> b(1);\n+B<int> b(1);\t\t       // { dg-message \"not declared .constexpr\" }\n SA(b.t==1);\t\t\t// { dg-error \"non-constant condition|'b'\" }\n constexpr B<int> b2(1);\n SA(b2.t==1);"}, {"sha": "a902e0e226ccecc139105bc156b418d12dcb58d1", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-function2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-function2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-function2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-function2.C?ref=ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f", "patch": "@@ -17,7 +17,7 @@ inline constexpr double\n squared(double x) { return x * x; }\n \n constexpr int squarei(int x) { return x * x; }\n-extern const int side;\n+extern const int side; // { dg-message \"not initialized with a constant expression\" }\n constexpr int area = squarei(side); // { dg-error \"side|argument\" }\n // error: squarei(side) is not a constant expression\n "}, {"sha": "7637c0a05bc51dfd56e765d83724ab6ab5043626", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-non-const-arg.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-non-const-arg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-non-const-arg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-non-const-arg.C?ref=ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f", "patch": "@@ -7,7 +7,7 @@ struct B {\n   int i;\n };\n \n-int global; // not constant\n+int global;\t\t\t// { dg-message \"not const\" }\n \n struct D : B {\n   constexpr D() : B(global) { }   // { dg-error \"global|argument\" }"}, {"sha": "4d9814fb485563261c65ebfca9211aebd3b06afd", "filename": "gcc/testsuite/g++.dg/parse/constant4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstant4.C?ref=ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f", "patch": "@@ -16,7 +16,7 @@ void Foo ()\n   \n   Y<I> i;\n   \n-  static const unsigned J = X<T>::J;\n+  static const unsigned J = X<T>::J; // { dg-message \"not initialized with a constant expression\" }\n   \n   Y<J> j; // { dg-error \"constant\" \"\" }\n }"}, {"sha": "bbfb51e4ce1be9009a0299783f26b2567464c14b", "filename": "gcc/testsuite/g++.dg/template/qualified-id3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualified-id3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualified-id3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualified-id3.C?ref=ddbbc9a109f3d8b91f5ba43a4b0d933d048a3b0f", "patch": "@@ -2,7 +2,7 @@\n \n template <const int N> struct A { };\n template <class T> struct B {\n-  static const int c;\n+  static const int c; // { dg-message \"not initialized with a constant expression\" }\n   typedef A<B<T>::c> C;\t\t// { dg-error \"constant expression\" }\n };\n template <class T> const int B<T>::c = sizeof (T);"}]}