{"sha": "7bd111573699079b760f18e81439cd7dc5268cca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JkMTExNTczNjk5MDc5Yjc2MGYxOGU4MTQzOWNkN2RjNTI2OGNjYQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2011-01-05T14:51:20Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2011-01-05T14:51:20Z"}, "message": "c-parser.c (c_parser_omp_atomic): Pass location of assignment operator to c_finish_omp_atomic.\n\ngcc\n\t* c-parser.c (c_parser_omp_atomic): Pass location of assignment\n\toperator to c_finish_omp_atomic.\n\t* c-typeck.c (lvalue_or_else): Add 'loc' argument.\n\t(build_unary_op): Update.\n\t(build_modify_expr): Update.\n\t(build_asm_expr): Update.\ngcc/cp\n\t* typeck.c (cp_build_addr_expr_1): Update call to lvalue_error.\n\t(lvalue_or_else): Likewise.\ngcc/c-family\n\t* c-common.h (lvalue_error): Update.\n\t* c-common.c (lvalue_error): Add 'loc' argument.  Call error_at,\n\tnot error.\n\nFrom-SVN: r168514", "tree": {"sha": "c6fc2880160c7b40280f2a22134ddb900dd3730f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6fc2880160c7b40280f2a22134ddb900dd3730f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bd111573699079b760f18e81439cd7dc5268cca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd111573699079b760f18e81439cd7dc5268cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bd111573699079b760f18e81439cd7dc5268cca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd111573699079b760f18e81439cd7dc5268cca/comments", "author": null, "committer": null, "parents": [{"sha": "cd656e236051edd0e84bbadea2d8bd174d604d08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd656e236051edd0e84bbadea2d8bd174d604d08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd656e236051edd0e84bbadea2d8bd174d604d08"}], "stats": {"total": 74, "additions": 50, "deletions": 24}, "files": [{"sha": "1a072a5d9ee8e78b46b82705ae2f354a49e78102", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd111573699079b760f18e81439cd7dc5268cca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd111573699079b760f18e81439cd7dc5268cca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bd111573699079b760f18e81439cd7dc5268cca", "patch": "@@ -1,3 +1,12 @@\n+2011-01-05  Tom Tromey  <tromey@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_atomic): Pass location of assignment\n+\toperator to c_finish_omp_atomic.\n+\t* c-typeck.c (lvalue_or_else): Add 'loc' argument.\n+\t(build_unary_op): Update.\n+\t(build_modify_expr): Update.\n+\t(build_asm_expr): Update.\n+\n 2011-01-05  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/spu.c (emit_nop_for_insn): Set INSN_LOCATOR for"}, {"sha": "668524415b996dca5cde782cf6781a2e68da3499", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd111573699079b760f18e81439cd7dc5268cca/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd111573699079b760f18e81439cd7dc5268cca/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7bd111573699079b760f18e81439cd7dc5268cca", "patch": "@@ -1,3 +1,9 @@\n+2011-01-05  Tom Tromey  <tromey@redhat.com>\n+\n+\t* c-common.h (lvalue_error): Update.\n+\t* c-common.c (lvalue_error): Add 'loc' argument.  Call error_at,\n+\tnot error.\n+\n 2010-12-29  Nicola Pero  <nicola@nicola.brainstorm.co.uk>\n \n \tPR objc/47075"}, {"sha": "4af7ef4ee4e7cee883146a71fee5d7bacc8c5b87", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd111573699079b760f18e81439cd7dc5268cca/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd111573699079b760f18e81439cd7dc5268cca/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=7bd111573699079b760f18e81439cd7dc5268cca", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines shared by all languages that are variants of C.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -8631,27 +8631,28 @@ readonly_error (tree arg, enum lvalue_use use)\n }\n \n /* Print an error message for an invalid lvalue.  USE says\n-   how the lvalue is being used and so selects the error message.  */\n+   how the lvalue is being used and so selects the error message.  LOC\n+   is the location for the error.  */\n \n void\n-lvalue_error (enum lvalue_use use)\n+lvalue_error (location_t loc, enum lvalue_use use)\n {\n   switch (use)\n     {\n     case lv_assign:\n-      error (\"lvalue required as left operand of assignment\");\n+      error_at (loc, \"lvalue required as left operand of assignment\");\n       break;\n     case lv_increment:\n-      error (\"lvalue required as increment operand\");\n+      error_at (loc, \"lvalue required as increment operand\");\n       break;\n     case lv_decrement:\n-      error (\"lvalue required as decrement operand\");\n+      error_at (loc, \"lvalue required as decrement operand\");\n       break;\n     case lv_addressof:\n-      error (\"lvalue required as unary %<&%> operand\");\n+      error_at (loc, \"lvalue required as unary %<&%> operand\");\n       break;\n     case lv_asm:\n-      error (\"lvalue required in asm statement\");\n+      error_at (loc, \"lvalue required in asm statement\");\n       break;\n     default:\n       gcc_unreachable ();"}, {"sha": "05456d33abd50bc067f7bc77e40e344cb95cc7f1", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd111573699079b760f18e81439cd7dc5268cca/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd111573699079b760f18e81439cd7dc5268cca/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=7bd111573699079b760f18e81439cd7dc5268cca", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for c-common.c.\n    Copyright (C) 1987, 1993, 1994, 1995, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -929,7 +929,7 @@ enum lvalue_use {\n };\n \n extern void readonly_error (tree, enum lvalue_use);\n-extern void lvalue_error (enum lvalue_use);\n+extern void lvalue_error (location_t, enum lvalue_use);\n extern void invalid_indirection_error (location_t, tree, ref_operator);\n \n extern int complete_array_type (tree *, tree, bool);"}, {"sha": "1e868afddf6c40836dd57f6125d63ad655e24f42", "filename": "gcc/c-parser.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd111573699079b760f18e81439cd7dc5268cca/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd111573699079b760f18e81439cd7dc5268cca/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=7bd111573699079b760f18e81439cd7dc5268cca", "patch": "@@ -1,6 +1,6 @@\n /* Parser for C and Objective-C.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n    Parser actions based on the old Bison parser; structure somewhat\n@@ -9104,6 +9104,9 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n \t  goto saw_error;\n \t}\n \n+      /* Arrange to pass the location of the assignment operator to\n+\t c_finish_omp_atomic.  */\n+      loc = c_parser_peek_token (parser)->location;\n       c_parser_consume_token (parser);\n       {\n \tlocation_t rhs_loc = c_parser_peek_token (parser)->location;"}, {"sha": "149235a8e775e61cdcbbba7004c2f5de07674e85", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd111573699079b760f18e81439cd7dc5268cca/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd111573699079b760f18e81439cd7dc5268cca/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=7bd111573699079b760f18e81439cd7dc5268cca", "patch": "@@ -1,6 +1,6 @@\n /* Build expressions with type checking for C compiler.\n    Copyright (C) 1987, 1988, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -98,7 +98,7 @@ static void set_nonincremental_init (struct obstack *);\n static void set_nonincremental_init_from_string (tree, struct obstack *);\n static tree find_init_member (tree, struct obstack *);\n static void readonly_warning (tree, enum lvalue_use);\n-static int lvalue_or_else (const_tree, enum lvalue_use);\n+static int lvalue_or_else (location_t, const_tree, enum lvalue_use);\n static void record_maybe_used_decl (tree);\n static int comptypes_internal (const_tree, const_tree, bool *, bool *);\n \f\n@@ -3564,7 +3564,8 @@ build_unary_op (location_t location,\n       /* Complain about anything that is not a true lvalue.  In\n \t Objective-C, skip this check for property_refs.  */\n       if (!objc_is_property_ref (arg) \n-\t  && !lvalue_or_else (arg, ((code == PREINCREMENT_EXPR\n+\t  && !lvalue_or_else (location,\n+\t\t\t      arg, ((code == PREINCREMENT_EXPR\n \t\t\t\t     || code == POSTINCREMENT_EXPR)\n \t\t\t\t    ? lv_increment\n \t\t\t\t    : lv_decrement)))\n@@ -3747,7 +3748,7 @@ build_unary_op (location_t location,\n       /* Anything not already handled and not a true memory reference\n \t or a non-lvalue array is an error.  */\n       else if (typecode != FUNCTION_TYPE && !flag\n-\t       && !lvalue_or_else (arg, lv_addressof))\n+\t       && !lvalue_or_else (location, arg, lv_addressof))\n \treturn error_mark_node;\n \n       /* Move address operations inside C_MAYBE_CONST_EXPR to simplify\n@@ -3905,15 +3906,16 @@ readonly_warning (tree arg, enum lvalue_use use)\n \n /* Return nonzero if REF is an lvalue valid for this language;\n    otherwise, print an error message and return zero.  USE says\n-   how the lvalue is being used and so selects the error message.  */\n+   how the lvalue is being used and so selects the error message.\n+   LOCATION is the location at which any error should be reported.  */\n \n static int\n-lvalue_or_else (const_tree ref, enum lvalue_use use)\n+lvalue_or_else (location_t loc, const_tree ref, enum lvalue_use use)\n {\n   int win = lvalue_p (ref);\n \n   if (!win)\n-    lvalue_error (use);\n+    lvalue_error (loc, use);\n \n   return win;\n }\n@@ -4801,7 +4803,7 @@ build_modify_expr (location_t location, tree lhs, tree lhs_origtype,\n     return error_mark_node;\n \n   /* For ObjC properties, defer this check.  */\n-  if (!objc_is_property_ref (lhs) && !lvalue_or_else (lhs, lv_assign))\n+  if (!objc_is_property_ref (lhs) && !lvalue_or_else (location, lhs, lv_assign))\n     return error_mark_node;\n \n   if (TREE_CODE (rhs) == EXCESS_PRECISION_EXPR)\n@@ -4851,7 +4853,7 @@ build_modify_expr (location_t location, tree lhs, tree lhs_origtype,\n \treturn result;\n \n       /* Else, do the check that we postponed for Objective-C.  */\n-      if (!lvalue_or_else (lhs, lv_assign))\n+      if (!lvalue_or_else (location, lhs, lv_assign))\n \treturn error_mark_node;\n     }\n \n@@ -8479,7 +8481,7 @@ build_asm_expr (location_t loc, tree string, tree outputs, tree inputs,\n \t get an error.  Gross, but ...  */\n       STRIP_NOPS (output);\n \n-      if (!lvalue_or_else (output, lv_asm))\n+      if (!lvalue_or_else (loc, output, lv_asm))\n \toutput = error_mark_node;\n \n       if (output != error_mark_node"}, {"sha": "67411a5fe09e61450ae4cacc21e1c0eb94a06c77", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd111573699079b760f18e81439cd7dc5268cca/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd111573699079b760f18e81439cd7dc5268cca/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7bd111573699079b760f18e81439cd7dc5268cca", "patch": "@@ -1,3 +1,8 @@\n+2011-01-05  Tom Tromey  <tromey@redhat.com>\n+\n+\t* typeck.c (cp_build_addr_expr_1): Update call to lvalue_error.\n+\t(lvalue_or_else): Likewise.\n+\n 2011-01-01  Kai Tietz  <kai.tietz@onevision.com>\n \n \tPR target/38662"}, {"sha": "c062f0fa5e4d005bb753d02df571522b3504f931", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd111573699079b760f18e81439cd7dc5268cca/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd111573699079b760f18e81439cd7dc5268cca/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7bd111573699079b760f18e81439cd7dc5268cca", "patch": "@@ -1,6 +1,6 @@\n /* Build expressions with type checking for C++ compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -4756,7 +4756,7 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n       if (kind == clk_none)\n \t{\n \t  if (complain & tf_error)\n-\t    lvalue_error (lv_addressof);\n+\t    lvalue_error (input_location, lv_addressof);\n \t  return error_mark_node;\n \t}\n       if (strict_lvalue && (kind & (clk_rvalueref|clk_class)))\n@@ -8219,7 +8219,7 @@ lvalue_or_else (tree ref, enum lvalue_use use, tsubst_flags_t complain)\n   if (kind == clk_none)\n     {\n       if (complain & tf_error)\n-\tlvalue_error (use);\n+\tlvalue_error (input_location, use);\n       return 0;\n     }\n   else if (kind & (clk_rvalueref|clk_class))"}]}