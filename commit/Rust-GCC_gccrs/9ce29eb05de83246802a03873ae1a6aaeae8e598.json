{"sha": "9ce29eb05de83246802a03873ae1a6aaeae8e598", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNlMjllYjA1ZGU4MzI0NjgwMmEwMzg3M2FlMWE2YWFlYWU4ZTU5OA==", "commit": {"author": {"name": "Venkataramanan Kumar", "email": "venkataramanan.kumar@amd.com", "date": "2015-10-06T12:48:41Z"}, "committer": {"name": "Venkataramanan Kumar", "email": "vekumar@gcc.gnu.org", "date": "2015-10-06T12:48:41Z"}, "message": "AMD znver1 enablement.\n\n2015-10-06  Venkataramanan Kumar  <Venkataramanan.kumar@amd.com>\n\t\n\tAMD znver1 enablement. \n\t* config.gcc (i[34567]86-*-linux* | ...): Add znver1.\n\t(case ${target}): Add znver1.\n\t* config/i386/cpuid.h(bit_CLZERO):  Define.\n\t* config/i386/driver-i386.c: (host_detect_local_cpu): Let\n\t-march=native recognize znver1 processors. \n\t* config/i386/i386-c.c (ix86_target_macros_internal): Add\n\tznver1, clzero def_and_undef. \n\t* config/i386/i386.c (struct processor_costs znver1_cost): New.\n\t(m_znver1): New definition.\n\t(m_AMD_MULTIPLE): Includes m_znver1.\n\t(processor_target_table): Add znver1 entry.\n\t(ix86_target_string) : Add clzero entry.\n\t(static const char *const cpu_names): Add znver1 entry.\n\t(ix86_option_override_internal): Add znver1 instruction sets.\n\t(PTA_CLZERO) :  New definition.\n\t(ix86_option_override_internal): Handle new clzerooption.\n\t(ix86_issue_rate): Add znver1.\n\t(ix86_adjust_cost): Add znver1.                \n\t(ia32_multipass_dfa_lookahead): Add znver1.\n\t(has_dispatch): Add znver1.       \n\t* config/i386/i386.h (TARGET_znver1): New definition. \n\t(TARGET_CLZERO): Define.\n\t(TARGET_CLZERO_P): Define.\n\t(struct ix86_size_cost): Add TARGET_ZNVER1.\n\t(enum processor_type): Add PROCESSOR_znver1.\n\t* config/i386/i386.md (define_attr \"cpu\"): Add znver1.\n\t(set_attr znver1_decode): New definitions for znver1.\n\t* config/i386/i386.opt (flag_dispatch_scheduler): Add znver1.\n\t(mclzero): New.\n\t* config/i386/mmx.md (set_attr znver1_decode): New definitions\n\tfor znver1.\n\t* config/i386/sse.md (set_attr znver1_decode): Likewise.\n\t* config/i386/x86-tune.def:  Add znver1 tunings.\n\t* config/i386/znver1.md: Introduce znver1 cpu and include new md file.\n\t* gcc/doc/invoke.texi: Add details about znver1\n\nFrom-SVN: r228520", "tree": {"sha": "14b6ecc2d46c8956d8eb05e97480b544af8092d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14b6ecc2d46c8956d8eb05e97480b544af8092d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ce29eb05de83246802a03873ae1a6aaeae8e598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce29eb05de83246802a03873ae1a6aaeae8e598", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ce29eb05de83246802a03873ae1a6aaeae8e598", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce29eb05de83246802a03873ae1a6aaeae8e598/comments", "author": null, "committer": null, "parents": [{"sha": "0580f6a1a8eba90a82c83b8341f94d25529b25e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0580f6a1a8eba90a82c83b8341f94d25529b25e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0580f6a1a8eba90a82c83b8341f94d25529b25e9"}], "stats": {"total": 1268, "additions": 1239, "deletions": 29}, "files": [{"sha": "6b08c7d196abc2ac5e9aa884837653e0ae1ff667", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ce29eb05de83246802a03873ae1a6aaeae8e598", "patch": "@@ -1,3 +1,41 @@\n+2015-10-06  Venkataramanan Kumar  <Venkataramanan.kumar@amd.com>\n+\n+\t* config.gcc (i[34567]86-*-linux* | ...): Add znver1.\n+\t(case ${target}): Add znver1.\n+\t* config/i386/cpuid.h(bit_CLZERO):  Define.\n+\t* config/i386/driver-i386.c: (host_detect_local_cpu): Let\n+\t-march=native recognize znver1 processors. \n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Add\n+\tznver1, clzero def_and_undef. \n+\t* config/i386/i386.c (struct processor_costs znver1_cost): New.\n+\t(m_znver1): New definition.\n+\t(m_AMD_MULTIPLE): Includes m_znver1.\n+\t(processor_target_table): Add znver1 entry.\n+\t(ix86_target_string) : Add clzero entry.\n+\t(static const char *const cpu_names): Add znver1 entry.\n+\t(ix86_option_override_internal): Add znver1 instruction sets.\n+\t(PTA_CLZERO) :  New definition.\n+\t(ix86_option_override_internal): Handle new clzerooption.\n+\t(ix86_issue_rate): Add znver1.\n+\t(ix86_adjust_cost): Add znver1.                \n+\t(ia32_multipass_dfa_lookahead): Add znver1.\n+\t(has_dispatch): Add znver1.       \n+\t* config/i386/i386.h (TARGET_znver1): New definition. \n+\t(TARGET_CLZERO): Define.\n+\t(TARGET_CLZERO_P): Define.\n+\t(struct ix86_size_cost): Add TARGET_ZNVER1.\n+\t(enum processor_type): Add PROCESSOR_znver1.\n+\t* config/i386/i386.md (define_attr \"cpu\"): Add znver1.\n+\t(set_attr znver1_decode): New definitions for znver1.\n+\t* config/i386/i386.opt (flag_dispatch_scheduler): Add znver1.\n+\t(mclzero): New.\n+\t* config/i386/mmx.md (set_attr znver1_decode): New definitions\n+\tfor znver1.\n+\t* config/i386/sse.md (set_attr znver1_decode): Likewise.\n+\t* config/i386/x86-tune.def:  Add znver1 tunings.\n+\t* config/i386/znver1.md: Introduce znver1 cpu and include new md file.\n+\t* gcc/doc/invoke.texi: Add details about znver1\n+\n 2015-10-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/67859"}, {"sha": "b3529a84ea29868babf375c9a6978f6a94cb62fc", "filename": "gcc/config.gcc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9ce29eb05de83246802a03873ae1a6aaeae8e598", "patch": "@@ -592,7 +592,7 @@ pentium4 pentium4m pentiumpro prescott lakemont\"\n # 64-bit x86 processors supported by --with-arch=.  Each processor\n # MUST be separated by exactly one space.\n x86_64_archs=\"amdfam10 athlon64 athlon64-sse3 barcelona bdver1 bdver2 \\\n-bdver3 bdver4 btver1 btver2 k8 k8-sse3 opteron opteron-sse3 nocona \\\n+bdver3 bdver4 znver1 btver1 btver2 k8 k8-sse3 opteron opteron-sse3 nocona \\\n core2 corei7 corei7-avx core-avx-i core-avx2 atom slm nehalem westmere \\\n sandybridge ivybridge haswell broadwell bonnell silvermont knl \\\n skylake-avx512 x86-64 native\"\n@@ -3119,6 +3119,10 @@ case ${target} in\n     ;;\n   i686-*-* | i786-*-*)\n     case ${target_noncanonical} in\n+      znver1-*)\n+\tarch=znver1\n+\tcpu=znver1\n+\t;;\n       bdver4-*)\n         arch=bdver4\n         cpu=bdver4\n@@ -3232,6 +3236,10 @@ case ${target} in\n     ;;\n   x86_64-*-*)\n     case ${target_noncanonical} in\n+      znver1-*)\n+\tarch=znver1\n+\tcpu=znver1\n+\t;;\n       bdver4-*)\n         arch=bdver4\n         cpu=bdver4"}, {"sha": "fccdf1f878271a26f6aab5e6e37ea6d8eee2ffd3", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=9ce29eb05de83246802a03873ae1a6aaeae8e598", "patch": "@@ -65,6 +65,9 @@\n #define bit_3DNOWP\t(1 << 30)\n #define bit_3DNOW\t(1 << 31)\n \n+/* %ebx.  */\n+#define bit_CLZERO\t(1 << 0)\n+\n /* Extended Features (%eax == 7) */\n /* %ebx */\n #define bit_FSGSBASE\t(1 << 0)"}, {"sha": "8ec1e40c2ac6912695f173b413f1db090b5fed90", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=9ce29eb05de83246802a03873ae1a6aaeae8e598", "patch": "@@ -414,6 +414,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_avx512dq = 0, has_avx512bw = 0, has_avx512vl = 0;\n   unsigned int has_avx512vbmi = 0, has_avx512ifma = 0, has_clwb = 0;\n   unsigned int has_pcommit = 0, has_mwaitx = 0;\n+  unsigned int has_clzero = 0;\n \n   bool arch;\n \n@@ -533,6 +534,9 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_3dnowp = edx & bit_3DNOWP;\n       has_3dnow = edx & bit_3DNOW;\n       has_mwaitx = ecx & bit_MWAITX;\n+\n+      __cpuid (0x80000008, eax, ebx, ecx, edx);\n+      has_clzero = ebx & bit_CLZERO;\n     }\n \n   /* Get XCR_XFEATURE_ENABLED_MASK register with xgetbv.  */\n@@ -607,6 +611,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \tprocessor = PROCESSOR_GEODE;\n       else if (has_movbe && family == 22)\n \tprocessor = PROCESSOR_BTVER2;\n+      else if (has_clzero)\n+\tprocessor = PROCESSOR_ZNVER1;\n       else if (has_avx2)\n         processor = PROCESSOR_BDVER4;\n       else if (has_xsaveopt)\n@@ -872,6 +878,9 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n     case PROCESSOR_BDVER4:\n       cpu = \"bdver4\";\n       break;\n+    case PROCESSOR_ZNVER1:\n+      cpu = \"znver1\";\n+      break;\n     case PROCESSOR_BTVER1:\n       cpu = \"btver1\";\n       break;\n@@ -961,7 +970,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *clwb = has_clwb ? \" -mclwb\" : \" -mno-clwb\";\n       const char *pcommit = has_pcommit ? \" -mpcommit\" : \" -mno-pcommit\";\n       const char *mwaitx  = has_mwaitx  ? \" -mmwaitx\"  : \" -mno-mwaitx\"; \n-\n+      const char *clzero  = has_clzero  ? \" -mclzero\"  : \" -mno-clzero\";\n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, bmi2,\n@@ -970,7 +979,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\tfxsr, xsave, xsaveopt, avx512f, avx512er,\n \t\t\tavx512cd, avx512pf, prefetchwt1, clflushopt,\n \t\t\txsavec, xsaves, avx512dq, avx512bw, avx512vl,\n-\t\t\tavx512ifma, avx512vbmi, clwb, pcommit, mwaitx, NULL);\n+\t\t\tavx512ifma, avx512vbmi, clwb, pcommit, mwaitx,\n+\t\t\tclzero, NULL);\n     }\n \n done:"}, {"sha": "9bc063e366e0b2752a6a3b083a79cc4caa56666d", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=9ce29eb05de83246802a03873ae1a6aaeae8e598", "patch": "@@ -123,6 +123,10 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n       def_or_undef (parse_in, \"__bdver4\");\n       def_or_undef (parse_in, \"__bdver4__\");\n       break;\n+    case PROCESSOR_ZNVER1:\n+      def_or_undef (parse_in, \"__znver1\");\n+      def_or_undef (parse_in, \"__znver1__\");\n+      break;\n     case PROCESSOR_BTVER1:\n       def_or_undef (parse_in, \"__btver1\");\n       def_or_undef (parse_in, \"__btver1__\");\n@@ -252,6 +256,9 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     case PROCESSOR_BDVER4:\n       def_or_undef (parse_in, \"__tune_bdver4__\");\n       break;\n+    case PROCESSOR_ZNVER1:\n+      def_or_undef (parse_in, \"__tune_znver1__\");\n+      break;\n     case PROCESSOR_BTVER1:\n       def_or_undef (parse_in, \"__tune_btver1__\");\n       break;\n@@ -424,6 +431,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__SSE2_MATH__\");\n   if (isa_flag & OPTION_MASK_ISA_CLFLUSHOPT)\n     def_or_undef (parse_in, \"__CLFLUSHOPT__\");\n+  if (isa_flag & OPTION_MASK_ISA_CLZERO)\n+    def_or_undef (parse_in, \"__CLZERO__\");\n   if (isa_flag & OPTION_MASK_ISA_XSAVEC)\n     def_or_undef (parse_in, \"__XSAVEC__\");\n   if (isa_flag & OPTION_MASK_ISA_XSAVES)"}, {"sha": "38953ddc4aec4c2ee7b8d847dda725deacc8d367", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 117, "deletions": 8, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9ce29eb05de83246802a03873ae1a6aaeae8e598", "patch": "@@ -1342,6 +1342,96 @@ struct processor_costs bdver4_cost = {\n   2,\t\t\t\t\t/* cond_not_taken_branch_cost.  */\n };\n \n+\n+/*  ZNVER1 has optimized REP instruction for medium sized blocks, but for\n+    very small blocks it is better to use loop.  For large blocks, libcall\n+    can do nontemporary accesses and beat inline considerably.  */\n+static stringop_algs znver1_memcpy[2] = {\n+  {libcall, {{6, loop, false}, {14, unrolled_loop, false},\n+\t     {-1, rep_prefix_4_byte, false}}},\n+  {libcall, {{16, loop, false}, {8192, rep_prefix_8_byte, false},\n+\t     {-1, libcall, false}}}};\n+static stringop_algs znver1_memset[2] = {\n+  {libcall, {{8, loop, false}, {24, unrolled_loop, false},\n+\t     {2048, rep_prefix_4_byte, false}, {-1, libcall, false}}},\n+  {libcall, {{48, unrolled_loop, false}, {8192, rep_prefix_8_byte, false},\n+\t     {-1, libcall, false}}}};\n+struct processor_costs znver1_cost = {\n+  COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of a lea instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* variable shift costs.  */\n+  COSTS_N_INSNS (1),\t\t\t/* constant shift costs.  */\n+  {COSTS_N_INSNS (4),\t\t\t/* cost of starting multiply for QI.  */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t HI.  */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t SI.  */\n+   COSTS_N_INSNS (6),\t\t\t/*\t\t\t\t DI.  */\n+   COSTS_N_INSNS (6)},\t\t\t/*\t\t\t      other.  */\n+  0,\t\t\t\t\t/* cost of multiply per each bit\n+\t\t\t\t\t    set.  */\n+  {COSTS_N_INSNS (19),\t\t\t/* cost of a divide/mod for QI.  */\n+   COSTS_N_INSNS (35),\t\t\t/*\t\t\t    HI.  */\n+   COSTS_N_INSNS (51),\t\t\t/*\t\t\t    SI.  */\n+   COSTS_N_INSNS (83),\t\t\t/*\t\t\t    DI.  */\n+   COSTS_N_INSNS (83)},\t\t\t/*\t\t\t    other.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movsx.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movzx.  */\n+  8,\t\t\t\t\t/* \"large\" insn.  */\n+  9,\t\t\t\t\t/* MOVE_RATIO.  */\n+  4,\t\t\t\t\t/* cost for loading QImode using\n+\t\t\t\t\t   movzbl.  */\n+  {5, 5, 4},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {4, 4, 4},\t\t\t\t/* cost of storing integer\n+\t\t\t\t\t   registers.  */\n+  2,\t\t\t\t\t/* cost of reg,reg fld/fst.  */\n+  {5, 5, 12},\t\t\t\t/* cost of loading fp registers\n+\t\t   \t\t\t   in SFmode, DFmode and XFmode.  */\n+  {4, 4, 8},\t\t\t\t/* cost of storing fp registers\n+ \t\t   \t\t\t   in SFmode, DFmode and XFmode.  */\n+  2,\t\t\t\t\t/* cost of moving MMX register.  */\n+  {4, 4},\t\t\t\t/* cost of loading MMX registers\n+\t\t\t\t\t   in SImode and DImode.  */\n+  {4, 4},\t\t\t\t/* cost of storing MMX registers\n+\t\t\t\t\t   in SImode and DImode.  */\n+  2,\t\t\t\t\t/* cost of moving SSE register.  */\n+  {4, 4, 4},\t\t\t\t/* cost of loading SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode.  */\n+  {4, 4, 4},\t\t\t\t/* cost of storing SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode.  */\n+  2,\t\t\t\t\t/* MMX or SSE register to integer.  */\n+  32,\t\t\t\t\t/* size of l1 cache.  */\n+  512,\t\t\t\t\t/* size of l2 cache.  */\n+  64,\t\t\t\t\t/* size of prefetch block.  */\n+  /* New AMD processors never drop prefetches; if they cannot be performed\n+     immediately, they are queued.  We set number of simultaneous prefetches\n+     to a large constant to reflect this (it probably is not a good idea not\n+     to limit number of prefetches at all, as their execution also takes some\n+     time).  */\n+  100,\t\t\t\t\t/* number of parallel prefetches.  */\n+  2,\t\t\t\t\t/* Branch cost.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of FMUL instruction.  */\n+  COSTS_N_INSNS (42),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n+  COSTS_N_INSNS (52),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  znver1_memcpy,\n+  znver1_memset,\n+  6,\t\t\t\t\t/* scalar_stmt_cost.  */\n+  4,\t\t\t\t\t/* scalar load_cost.  */\n+  4,\t\t\t\t\t/* scalar_store_cost.  */\n+  6,\t\t\t\t\t/* vec_stmt_cost.  */\n+  0,\t\t\t\t\t/* vec_to_scalar_cost.  */\n+  2,\t\t\t\t\t/* scalar_to_vec_cost.  */\n+  4,\t\t\t\t\t/* vec_align_load_cost.  */\n+  4,\t\t\t\t\t/* vec_unalign_load_cost.  */\n+  4,\t\t\t\t\t/* vec_store_cost.  */\n+  4,\t\t\t\t\t/* cond_taken_branch_cost.  */\n+  2,\t\t\t\t\t/* cond_not_taken_branch_cost.  */\n+};\n+\n   /* BTVER1 has optimized REP instruction for medium sized blocks, but for\n      very small blocks it is better to use loop. For large blocks, libcall can\n      do nontemporary accesses and beat inline considerably.  */\n@@ -2113,11 +2203,13 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n #define m_BDVER2 (1<<PROCESSOR_BDVER2)\n #define m_BDVER3 (1<<PROCESSOR_BDVER3)\n #define m_BDVER4 (1<<PROCESSOR_BDVER4)\n+#define m_ZNVER1 (1<<PROCESSOR_ZNVER1)\n #define m_BTVER1 (1<<PROCESSOR_BTVER1)\n #define m_BTVER2 (1<<PROCESSOR_BTVER2)\n #define m_BDVER\t(m_BDVER1 | m_BDVER2 | m_BDVER3 | m_BDVER4)\n #define m_BTVER (m_BTVER1 | m_BTVER2)\n-#define m_AMD_MULTIPLE (m_ATHLON_K8 | m_AMDFAM10 | m_BDVER | m_BTVER)\n+#define m_AMD_MULTIPLE (m_ATHLON_K8 | m_AMDFAM10 | m_BDVER | m_BTVER \\\n+\t\t\t| m_ZNVER1)\n \n #define m_GENERIC (1<<PROCESSOR_GENERIC)\n \n@@ -2580,6 +2672,7 @@ static const struct ptt processor_target_table[PROCESSOR_max] =\n   {\"bdver2\", &bdver2_cost, 16, 10, 16, 7, 11},\n   {\"bdver3\", &bdver3_cost, 16, 10, 16, 7, 11},\n   {\"bdver4\", &bdver4_cost, 16, 10, 16, 7, 11},\n+  {\"znver1\", &znver1_cost, 16, 10, 16, 7, 11},\n   {\"btver1\", &btver1_cost, 16, 10, 16, 7, 11},\n   {\"btver2\", &btver2_cost, 16, 10, 16, 7, 11}\n };\n@@ -3672,6 +3765,7 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n     { \"-mclwb\",\t\tOPTION_MASK_ISA_CLWB },\n     { \"-mpcommit\",\tOPTION_MASK_ISA_PCOMMIT },\n     { \"-mmwaitx\",\tOPTION_MASK_ISA_MWAITX  },\n+    { \"-mclzero\",\tOPTION_MASK_ISA_CLZERO  },\n   };\n \n   /* Flag options.  */\n@@ -4216,6 +4310,7 @@ ix86_option_override_internal (bool main_args_p,\n #define PTA_CLWB\t\t(HOST_WIDE_INT_1 << 55)\n #define PTA_PCOMMIT\t\t(HOST_WIDE_INT_1 << 56)\n #define PTA_MWAITX\t\t(HOST_WIDE_INT_1 << 57)\n+#define PTA_CLZERO\t\t(HOST_WIDE_INT_1 << 58)\n \n #define PTA_CORE2 \\\n   (PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_SSSE3 \\\n@@ -4378,7 +4473,16 @@ ix86_option_override_internal (bool main_args_p,\n \t| PTA_TBM | PTA_F16C | PTA_FMA | PTA_PRFCHW | PTA_FXSR \n \t| PTA_XSAVE | PTA_XSAVEOPT | PTA_FSGSBASE | PTA_RDRND\n \t| PTA_MOVBE | PTA_MWAITX},\n-      {\"btver1\", PROCESSOR_BTVER1, CPU_GENERIC,\n+      {\"znver1\", PROCESSOR_ZNVER1, CPU_ZNVER1,\n+\tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+\t| PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n+\t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_AVX2\n+\t| PTA_BMI | PTA_BMI2 | PTA_F16C | PTA_FMA | PTA_PRFCHW\n+\t| PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT | PTA_FSGSBASE\n+\t| PTA_RDRND | PTA_MOVBE | PTA_MWAITX | PTA_ADX | PTA_RDSEED\n+\t| PTA_CLZERO | PTA_CLFLUSHOPT | PTA_XSAVEC | PTA_XSAVES\n+\t| PTA_SHA | PTA_LZCNT | PTA_POPCNT},\n+     {\"btver1\", PROCESSOR_BTVER1, CPU_GENERIC,\n \tPTA_64BIT | PTA_MMX |  PTA_SSE  | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16 | PTA_PRFCHW\n \t| PTA_FXSR | PTA_XSAVE},\n@@ -4799,6 +4903,9 @@ ix86_option_override_internal (bool main_args_p,\n \tif (processor_alias_table[i].flags & PTA_CLFLUSHOPT\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_CLFLUSHOPT))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_CLFLUSHOPT;\n+\tif (processor_alias_table[i].flags & PTA_CLZERO\n+\t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_CLZERO))\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_CLZERO;\n \tif (processor_alias_table[i].flags & PTA_XSAVEC\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_XSAVEC))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_XSAVEC;\n@@ -27168,6 +27275,7 @@ ix86_issue_rate (void)\n     case PROCESSOR_BDVER2:\n     case PROCESSOR_BDVER3:\n     case PROCESSOR_BDVER4:\n+    case PROCESSOR_ZNVER1:\n     case PROCESSOR_CORE2:\n     case PROCESSOR_NEHALEM:\n     case PROCESSOR_SANDYBRIDGE:\n@@ -27428,6 +27536,7 @@ ix86_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n     case PROCESSOR_BDVER2:\n     case PROCESSOR_BDVER3:\n     case PROCESSOR_BDVER4:\n+    case PROCESSOR_ZNVER1:\n     case PROCESSOR_BTVER1:\n     case PROCESSOR_BTVER2:\n     case PROCESSOR_GENERIC:\n@@ -35708,9 +35817,9 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \t      arg_str = \"bdver4\";\n \t      priority = P_PROC_AVX2;\n \t      break;\n-\t    }  \n-\t}    \n-    \n+\t    }\n+\t}\n+\n       cl_target_option_restore (&global_options, &cur_target);\n \t\n       if (predicate_list && arg_str == NULL)\n@@ -36659,7 +36768,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       {\"bdver2\", M_AMDFAM15H_BDVER2},\n       {\"bdver3\", M_AMDFAM15H_BDVER3},\n       {\"bdver4\", M_AMDFAM15H_BDVER4},\n-      {\"btver2\", M_AMD_BTVER2},      \n+      {\"btver2\", M_AMD_BTVER2},\n     };\n \n   static struct _isa_names_table\n@@ -52714,8 +52823,8 @@ do_dispatch (rtx_insn *insn, int mode)\n static bool\n has_dispatch (rtx_insn *insn, int action)\n {\n-  if ((TARGET_BDVER1 || TARGET_BDVER2 || TARGET_BDVER3 || TARGET_BDVER4)\n-      && flag_dispatch_scheduler)\n+  if ((TARGET_BDVER1 || TARGET_BDVER2 || TARGET_BDVER3\n+      || TARGET_BDVER4 || TARGET_ZNVER1) && flag_dispatch_scheduler)\n     switch (action)\n       {\n       default:"}, {"sha": "a24dea544c676830eca6329ed8889d6df43f335a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9ce29eb05de83246802a03873ae1a6aaeae8e598", "patch": "@@ -116,6 +116,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_SHA_P(x)\tTARGET_ISA_SHA_P(x)\n #define TARGET_CLFLUSHOPT\tTARGET_ISA_CLFLUSHOPT\n #define TARGET_CLFLUSHOPT_P(x)\tTARGET_ISA_CLFLUSHOPT_P(x)\n+#define TARGET_CLZERO\tTARGET_ISA_CLZERO\n+#define TARGET_CLZERO_P(x)\tTARGET_ISA_CLZERO_P(x)\n #define TARGET_XSAVEC\tTARGET_ISA_XSAVEC\n #define TARGET_XSAVEC_P(x)\tTARGET_ISA_XSAVEC_P(x)\n #define TARGET_XSAVES\tTARGET_ISA_XSAVES\n@@ -350,6 +352,7 @@ extern const struct processor_costs ix86_size_cost;\n #define TARGET_BDVER4 (ix86_tune == PROCESSOR_BDVER4)\n #define TARGET_BTVER1 (ix86_tune == PROCESSOR_BTVER1)\n #define TARGET_BTVER2 (ix86_tune == PROCESSOR_BTVER2)\n+#define TARGET_ZNVER1 (ix86_tune == PROCESSOR_ZNVER1)\n \n /* Feature tests against the various tunings.  */\n enum ix86_tune_indices {\n@@ -2303,6 +2306,7 @@ enum processor_type\n   PROCESSOR_BDVER4,\n   PROCESSOR_BTVER1,\n   PROCESSOR_BTVER2,\n+  PROCESSOR_ZNVER1,\n   PROCESSOR_max\n };\n "}, {"sha": "d0c0d23df2835a82b55d27be84cc47d799e430c9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9ce29eb05de83246802a03873ae1a6aaeae8e598", "patch": "@@ -408,7 +408,7 @@\n ;; Processor type.\n (define_attr \"cpu\" \"none,pentium,pentiumpro,geode,k6,athlon,k8,core2,nehalem,\n \t\t    atom,slm,haswell,generic,amdfam10,bdver1,bdver2,bdver3,\n-\t\t    bdver4,btver2\"\n+\t\t    bdver4,btver2,znver1\"\n   (const (symbol_ref \"ix86_schedule\")))\n \n ;; A basic instruction type.  Refinements due to arguments to be\n@@ -1170,6 +1170,7 @@\n (include \"bdver1.md\")\n (include \"bdver3.md\")\n (include \"btver2.md\")\n+(include \"znver1.md\")\n (include \"geode.md\")\n (include \"atom.md\")\n (include \"slm.md\")\n@@ -1673,6 +1674,7 @@\n    (set_attr \"athlon_decode\" \"vector\")\n    (set_attr \"amdfam10_decode\" \"direct\")\n    (set_attr \"bdver1_decode\" \"double\")\n+   (set_attr \"znver1_decode\" \"double\")\n    (set (attr \"enabled\")\n      (cond [(eq_attr \"alternative\" \"0\")\n               (symbol_ref \"TARGET_MIX_SSE_I387\")\n@@ -1692,7 +1694,8 @@\n    (set_attr \"mode\" \"<X87MODEF:MODE>\")\n    (set_attr \"athlon_decode\" \"vector\")\n    (set_attr \"amdfam10_decode\" \"direct\")\n-   (set_attr \"bdver1_decode\" \"double\")])\n+   (set_attr \"bdver1_decode\" \"double\")\n+   (set_attr \"znver1_decode\" \"double\")])\n \f\n ;; Push/pop instructions.\n \n@@ -4013,6 +4016,10 @@\n \t\t\t(eq_attr \"alternative\" \"0\"))\n \t(const_string \"0\")\n \t(const_string \"1\")))\n+   (set (attr \"znver1_decode\")\n+     (if_then_else (eq_attr \"prefix_0f\" \"0\")\n+\t(const_string \"double\")\n+\t(const_string \"direct\")))\n    (set (attr \"modrm\")\n      (if_then_else (eq_attr \"prefix_0f\" \"0\")\n \t(const_string \"0\")\n@@ -4964,6 +4971,7 @@\n   \"fild%Z1\\t%1\"\n   [(set_attr \"type\" \"fmov\")\n    (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"znver1_decode\" \"double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n (define_insn \"float<SWI48x:mode>xf2\"\n@@ -4973,6 +4981,7 @@\n   \"fild%Z1\\t%1\"\n   [(set_attr \"type\" \"fmov\")\n    (set_attr \"mode\" \"XF\")\n+   (set_attr \"znver1_decode\" \"double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n (define_expand \"float<SWI48:mode><MODEF:mode>2\"\n@@ -5022,6 +5031,7 @@\n    (set_attr \"athlon_decode\" \"*,double,direct\")\n    (set_attr \"amdfam10_decode\" \"*,vector,double\")\n    (set_attr \"bdver1_decode\" \"*,double,direct\")\n+   (set_attr \"znver1_decode\" \"double,*,*\")\n    (set_attr \"fp_int_src\" \"true\")\n    (set (attr \"enabled\")\n      (cond [(eq_attr \"alternative\" \"0\")\n@@ -5042,6 +5052,7 @@\n   \"fild%Z1\\t%1\"\n   [(set_attr \"type\" \"fmov\")\n    (set_attr \"mode\" \"<MODEF:MODE>\")\n+   (set_attr \"znver1_decode\" \"double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n ;; Try TARGET_USE_VECTOR_CONVERTS, but not so hard as to require extra memory\n@@ -10810,6 +10821,7 @@\n   \"bts{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"znver1_decode\" \"double\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*btrq\"\n@@ -10822,6 +10834,7 @@\n   \"btr{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"znver1_decode\" \"double\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*btcq\"\n@@ -10834,6 +10847,7 @@\n   \"btc{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"znver1_decode\" \"double\")\n    (set_attr \"mode\" \"DI\")])\n \n ;; Allow Nocona to avoid these instructions if a register is available.\n@@ -12513,6 +12527,7 @@\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n    (set_attr \"btver2_decode\" \"double\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"ctz<mode>2\"\n@@ -12991,6 +13006,7 @@\n   \"bsr{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"bsr\"\n@@ -13002,6 +13018,7 @@\n   \"bsr{l}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*bsrhi\"\n@@ -13013,6 +13030,7 @@\n   \"bsr{w}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"HI\")])\n \n (define_expand \"popcount<mode>2\"\n@@ -14164,6 +14182,7 @@\n    && flag_finite_math_only\"\n   \"fprem\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_expand \"fmodxf3\"\n@@ -14238,6 +14257,7 @@\n    && flag_finite_math_only\"\n   \"fprem1\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_expand \"remainderxf3\"\n@@ -14314,6 +14334,7 @@\n    && flag_unsafe_math_optimizations\"\n   \"f<sincos>\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_insn \"*<sincos>_extend<mode>xf2_i387\"\n@@ -14327,6 +14348,7 @@\n    && flag_unsafe_math_optimizations\"\n   \"f<sincos>\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n ;; When sincos pattern is defined, sin and cos builtin functions will be\n@@ -14345,6 +14367,7 @@\n    && flag_unsafe_math_optimizations\"\n   \"fsincos\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_split\n@@ -14380,6 +14403,7 @@\n    && flag_unsafe_math_optimizations\"\n   \"fsincos\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_split\n@@ -14435,6 +14459,7 @@\n    && standard_80387_constant_p (operands[3]) == 2\"\n   \"fptan\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_insn \"fptan_extend<mode>xf4_i387\"\n@@ -14451,6 +14476,7 @@\n    && standard_80387_constant_p (operands[3]) == 2\"\n   \"fptan\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_expand \"tanxf2\"\n@@ -14495,6 +14521,7 @@\n    && flag_unsafe_math_optimizations\"\n   \"fpatan\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_insn \"fpatan_extend<mode>xf3_i387\"\n@@ -14511,6 +14538,7 @@\n    && flag_unsafe_math_optimizations\"\n   \"fpatan\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_expand \"atan2xf3\"\n@@ -14667,6 +14695,7 @@\n    && flag_unsafe_math_optimizations\"\n   \"fyl2x\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_insn \"fyl2x_extend<mode>xf3_i387\"\n@@ -14682,6 +14711,7 @@\n    && flag_unsafe_math_optimizations\"\n   \"fyl2x\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_expand \"logxf2\"\n@@ -14784,6 +14814,7 @@\n    && flag_unsafe_math_optimizations\"\n   \"fyl2xp1\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_insn \"fyl2xp1_extend<mode>xf3_i387\"\n@@ -14799,6 +14830,7 @@\n    && flag_unsafe_math_optimizations\"\n   \"fyl2xp1\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_expand \"log1pxf2\"\n@@ -14846,6 +14878,7 @@\n    && flag_unsafe_math_optimizations\"\n   \"fxtract\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_insn \"fxtract_extend<mode>xf3_i387\"\n@@ -14861,6 +14894,7 @@\n    && flag_unsafe_math_optimizations\"\n   \"fxtract\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_expand \"logbxf2\"\n@@ -14937,6 +14971,7 @@\n    && flag_unsafe_math_optimizations\"\n   \"f2xm1\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_insn \"fscalexf4_i387\"\n@@ -14951,6 +14986,7 @@\n    && flag_unsafe_math_optimizations\"\n   \"fscale\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_expand \"expNcorexf3\"\n@@ -15294,6 +15330,7 @@\n    && flag_unsafe_math_optimizations\"\n   \"frndint\"\n   [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_expand \"rint<mode>2\""}, {"sha": "687ae0c1b1413dd6a81ff88d6ca2864029eec935", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=9ce29eb05de83246802a03873ae1a6aaeae8e598", "patch": "@@ -574,8 +574,8 @@ computations into a vector ones.\n \n mdispatch-scheduler\n Target RejectNegative Var(flag_dispatch_scheduler)\n-Do dispatch scheduling if processor is bdver1 or bdver2 or bdver3 or bdver4 and Haifa scheduling\n-is selected.\n+Do dispatch scheduling if processor is bdver1, bdver2, bdver3, bdver4\n+or znver1 and Haifa scheduling is selected.\n \n mprefer-avx128\n Target Report Mask(PREFER_AVX128) SAVE\n@@ -751,6 +751,10 @@ mclflushopt\n Target Report Mask(ISA_CLFLUSHOPT) Var(ix86_isa_flags) Save\n Support CLFLUSHOPT instructions\n \n+mclzero\n+Target Report Mask(ISA_CLZERO) Var(ix86_isa_flags) Save\n+Support CLZERO instructions\n+\n mclwb\n Target Report Mask(ISA_CLWB) Var(ix86_isa_flags) Save\n Support CLWB instruction"}, {"sha": "673ed7af123a37a451080b7a7c8d26746c603cde", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=9ce29eb05de83246802a03873ae1a6aaeae8e598", "patch": "@@ -1546,6 +1546,7 @@\n   ;; @@@ check ordering of operands in intel/nonintel syntax\n   \"maskmovq\\t{%2, %1|%1, %2}\"\n   [(set_attr \"type\" \"mmxcvt\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mmx_emms\""}, {"sha": "311bf3fe45ab635821e6c1e5a3118117c6105c64", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=9ce29eb05de83246802a03873ae1a6aaeae8e598", "patch": "@@ -4021,6 +4021,7 @@\n    (set_attr \"amdfam10_decode\" \"vector,double,*\")\n    (set_attr \"bdver1_decode\" \"double,direct,*\")\n    (set_attr \"btver2_decode\" \"double,double,double\")\n+   (set_attr \"znver1_decode\" \"double,double,double\")\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"SF\")])\n \n@@ -4413,6 +4414,7 @@\n    (set_attr \"amdfam10_decode\" \"vector,double,*\")\n    (set_attr \"bdver1_decode\" \"double,direct,*\")\n    (set_attr \"btver2_decode\" \"double,double,double\")\n+   (set_attr \"znver1_decode\" \"double,double,double\")\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"DF\")])\n \n@@ -13404,6 +13406,7 @@\n    (set (attr \"length_vex\")\n      (symbol_ref (\"3 + REX_SSE_REGNO_P (REGNO (operands[2]))\")))\n    (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"znver1_decode\" \"vector\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse_ldmxcsr\"\n@@ -14341,6 +14344,7 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"btver2_decode\" \"vector,vector,vector\")\n+   (set_attr \"znver1_decode\" \"vector,vector,vector\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; Mode attribute used by `vmovntdqa' pattern\n@@ -14376,6 +14380,7 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"btver2_decode\" \"vector,vector,vector\")\n+   (set_attr \"znver1_decode\" \"vector,vector,vector\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<sse4_1_avx2>_packusdw<mask_name>\""}, {"sha": "05f97376d012624e3631e39b01f8071dadd53e83", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=9ce29eb05de83246802a03873ae1a6aaeae8e598", "patch": "@@ -59,7 +59,7 @@ DEF_TUNE (X86_TUNE_PARTIAL_REG_DEPENDENCY, \"partial_reg_dependency\",\n    that can be partly masked by careful scheduling of moves.  */\n DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY, \"sse_partial_reg_dependency\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_AMDFAM10\n-\t  | m_BDVER | m_GENERIC)\n+\t  | m_BDVER | m_ZNVER1 | m_GENERIC)\n \n /* X86_TUNE_SSE_SPLIT_REGS: Set for machines where the type and dependencies\n    are resolved on SSE register parts instead of whole registers, so we may\n@@ -97,19 +97,19 @@ DEF_TUNE (X86_TUNE_MEMORY_MISMATCH_STALL, \"memory_mismatch_stall\",\n    conditional jump instruction for 32 bit TARGET.\n    FIXME: revisit for generic.  */\n DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH_32, \"fuse_cmp_and_branch_32\",\n-          m_CORE_ALL | m_BDVER)\n+\t  m_CORE_ALL | m_BDVER | m_ZNVER1)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_64: Fuse compare with a subsequent\n    conditional jump instruction for TARGET_64BIT.\n    FIXME: revisit for generic.  */\n DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH_64, \"fuse_cmp_and_branch_64\",\n-          m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_BDVER)\n+\t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_BDVER | m_ZNVER1)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS: Fuse compare with a\n    subsequent conditional jump instruction when the condition jump\n    check sign flag (SF) or overflow flag (OF).  */\n DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS, \"fuse_cmp_and_branch_soflags\",\n-          m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_BDVER)\n+\t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_BDVER | m_ZNVER1)\n \n /* X86_TUNE_FUSE_ALU_AND_BRANCH: Fuse alu with a subsequent conditional\n    jump instruction when the alu instruction produces the CCFLAG consumed by\n@@ -126,7 +126,7 @@ DEF_TUNE (X86_TUNE_REASSOC_INT_TO_PARALLEL, \"reassoc_int_to_parallel\",\n    during reassociation of fp computation.  */\n DEF_TUNE (X86_TUNE_REASSOC_FP_TO_PARALLEL, \"reassoc_fp_to_parallel\",\n           m_BONNELL | m_SILVERMONT | m_HASWELL | m_KNL |m_INTEL | m_BDVER1\n-\t  | m_BDVER2 | m_GENERIC)\n+\t  | m_BDVER2 | m_ZNVER1 | m_GENERIC)\n \n /*****************************************************************************/\n /* Function prologue, epilogue and function calling sequences.               */\n@@ -282,7 +282,7 @@ DEF_TUNE (X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES,\n DEF_TUNE (X86_TUNE_USE_SAHF, \"use_sahf\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n \t  | m_KNL | m_INTEL | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER\n-\t  | m_BTVER | m_GENERIC)\n+\t  | m_BTVER | m_ZNVER1 | m_GENERIC)\n \n /* X86_TUNE_USE_CLTD: Controls use of CLTD and CTQO instructions.  */\n DEF_TUNE (X86_TUNE_USE_CLTD, \"use_cltd\",\n@@ -334,19 +334,19 @@ DEF_TUNE (X86_TUNE_GENERAL_REGS_SSE_SPILL, \"general_regs_sse_spill\",\n /* X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL: Use movups for misaligned loads instead\n    of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL, \"sse_unaligned_load_optimal\",\n-          m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_AMDFAM10 | m_BDVER\n-\t  | m_BTVER | m_SILVERMONT | m_KNL | m_INTEL | m_GENERIC)\n+\t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_SILVERMONT | m_KNL\n+\t  | m_INTEL | m_AMDFAM10 | m_BDVER | m_BTVER | m_ZNVER1 | m_GENERIC)\n \n /* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL: Use movups for misaligned stores instead\n    of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL, \"sse_unaligned_store_optimal\",\n-          m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_BDVER | m_SILVERMONT\n-\t  | m_KNL | m_INTEL | m_GENERIC)\n+\t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_SILVERMONT | m_KNL\n+\t  | m_INTEL | m_BDVER | m_ZNVER1 | m_GENERIC)\n \n /* Use packed single precision instructions where posisble.  I.e. movups instead\n    of movupd.  */\n DEF_TUNE (X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL, \"sse_packed_single_insn_optimal\",\n-          m_BDVER)\n+\t  m_BDVER | m_ZNVER1)\n \n /* X86_TUNE_SSE_TYPELESS_STORES: Always movaps/movups for 128bit stores.   */\n DEF_TUNE (X86_TUNE_SSE_TYPELESS_STORES, \"sse_typeless_stores\",\n@@ -355,7 +355,8 @@ DEF_TUNE (X86_TUNE_SSE_TYPELESS_STORES, \"sse_typeless_stores\",\n /* X86_TUNE_SSE_LOAD0_BY_PXOR: Always use pxor to load0 as opposed to\n    xorps/xorpd and other variants.  */\n DEF_TUNE (X86_TUNE_SSE_LOAD0_BY_PXOR, \"sse_load0_by_pxor\",\n-\t  m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BDVER | m_BTVER | m_GENERIC)\n+\t  m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BDVER | m_BTVER | m_ZNVER1\n+\t  | m_GENERIC)\n \n /* X86_TUNE_INTER_UNIT_MOVES_TO_VEC: Enable moves in from integer\n    to SSE registers.  If disabled, the moves will be done by storing\n@@ -415,11 +416,12 @@ DEF_TUNE (X86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL, \"256_unaligned_load_optimal\",\n /* X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL: if false, unaligned stores are\n    split.  */\n DEF_TUNE (X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL, \"256_unaligned_store_optimal\",\n-          ~(m_NEHALEM | m_SANDYBRIDGE | m_BDVER | m_GENERIC))\n+\t  ~(m_NEHALEM | m_SANDYBRIDGE | m_BDVER | m_ZNVER1 | m_GENERIC))\n \n /* X86_TUNE_AVX128_OPTIMAL: Enable 128-bit AVX instruction generation for\n    the auto-vectorizer.  */\n-DEF_TUNE (X86_TUNE_AVX128_OPTIMAL, \"avx128_optimal\", m_BDVER | m_BTVER2)\n+DEF_TUNE (X86_TUNE_AVX128_OPTIMAL, \"avx128_optimal\", m_BDVER | m_BTVER2\n+\t  | m_ZNVER1)\n \n /*****************************************************************************/\n /* Historical relics: tuning flags that helps a specific old CPU designs     */"}, {"sha": "d8c429c08c8893ec2fb0c876919047d063c61e83", "filename": "gcc/config/i386/znver1.md", "status": "added", "additions": 973, "deletions": 0, "changes": 973, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fznver1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fconfig%2Fi386%2Fznver1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fznver1.md?ref=9ce29eb05de83246802a03873ae1a6aaeae8e598", "patch": "@@ -0,0 +1,973 @@\n+;; Copyright (C) 2012-2015 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+;;\n+\n+(define_attr \"znver1_decode\" \"direct,vector,double\"\n+  (const_string \"direct\"))\n+\n+;; AMD znver1 Scheduling\n+;; Modeling automatons for zen decoders, integer execution pipes,\n+;; AGU pipes and floating point execution units.\n+(define_automaton \"znver1, znver1_ieu, znver1_fp, znver1_agu\")\n+\n+;; Decoders unit has 4 decoders and all of them can decode fast path\n+;; and vector type instructions.\n+(define_cpu_unit \"znver1-decode0\" \"znver1\")\n+(define_cpu_unit \"znver1-decode1\" \"znver1\")\n+(define_cpu_unit \"znver1-decode2\" \"znver1\")\n+(define_cpu_unit \"znver1-decode3\" \"znver1\")\n+\n+;; Currently blocking all decoders for vector path instructions as\n+;; they are dispatched separetely as microcode sequence.\n+;; Fix me: Need to revisit this.\n+(define_reservation \"znver1-vector\" \"znver1-decode0+znver1-decode1+znver1-decode2+znver1-decode3\")\n+\n+;; Direct instructions can be issued to any of the four decoders.\n+(define_reservation \"znver1-direct\" \"znver1-decode0|znver1-decode1|znver1-decode2|znver1-decode3\")\n+\n+;; Fix me: Need to revisit this later to simulate fast path double behaviour.\n+(define_reservation \"znver1-double\" \"znver1-direct\")\n+\n+\n+;; Integer unit 4 ALU pipes.\n+(define_cpu_unit \"znver1-ieu0\" \"znver1_ieu\")\n+(define_cpu_unit \"znver1-ieu1\" \"znver1_ieu\")\n+(define_cpu_unit \"znver1-ieu2\" \"znver1_ieu\")\n+(define_cpu_unit \"znver1-ieu3\" \"znver1_ieu\")\n+(define_reservation \"znver1-ieu\" \"znver1-ieu0|znver1-ieu1|znver1-ieu2|znver1-ieu3\")\n+\n+;; 2 AGU pipes.\n+(define_cpu_unit \"znver1-agu0\" \"znver1_agu\")\n+(define_cpu_unit \"znver1-agu1\" \"znver1_agu\")\n+(define_reservation \"znver1-agu-reserve\" \"znver1-agu0|znver1-agu1\")\n+\n+(define_reservation \"znver1-load\" \"znver1-agu-reserve\")\n+(define_reservation \"znver1-store\" \"znver1-agu-reserve\")\n+\n+;; vectorpath (microcoded) instructions are single issue instructions.\n+;; So, they occupy all the integer units.\n+(define_reservation \"znver1-ivector\" \"znver1-ieu0+znver1-ieu1\n+\t\t\t\t      +znver1-ieu2+znver1-ieu3\n+\t\t\t\t      +znver1-agu0+znver1-agu1\")\n+\n+;; Floating point unit 4 FP pipes.\n+(define_cpu_unit \"znver1-fp0\" \"znver1_fp\")\n+(define_cpu_unit \"znver1-fp1\" \"znver1_fp\")\n+(define_cpu_unit \"znver1-fp2\" \"znver1_fp\")\n+(define_cpu_unit \"znver1-fp3\" \"znver1_fp\")\n+\n+(define_reservation \"znver1-fpu\" \"znver1-fp0|znver1-fp1|znver1-fp2|znver1-fp3\")\n+\n+(define_reservation \"znver1-fvector\" \"znver1-fp0+znver1-fp1\n+\t\t\t\t      +znver1-fp2+znver1-fp3\n+\t\t\t\t      +znver1-agu0+znver1-agu1\")\n+\n+;; Call instruction\n+(define_insn_reservation \"znver1_call\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (eq_attr \"type\" \"call,callv\"))\n+\t\t\t \"znver1-double,znver1-store,znver1-ieu0|znver1-ieu3\")\n+\n+;; General instructions\n+(define_insn_reservation \"znver1_push\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"push\")\n+\t\t\t\t   (eq_attr \"memory\" \"none,unknown\")))\n+\t\t\t \"znver1-direct,znver1-store\")\n+\n+(define_insn_reservation \"znver1_push_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"push\")\n+\t\t\t\t   (eq_attr \"memory\" \"store\")))\n+\t\t\t \"znver1-direct,znver1-store\")\n+\n+(define_insn_reservation \"znver1_push_both\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"push\")\n+\t\t\t\t   (eq_attr \"memory\" \"both\")))\n+\t\t\t \"znver1-direct,znver1-load,znver1-store\")\n+\n+;; Leave\n+(define_insn_reservation \"znver1_leave\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (eq_attr \"type\" \"leave\"))\n+\t\t\t \"znver1-double,znver1-ieu, znver1-store\")\n+\n+;; Integer Instructions or General intructions\n+;; Multiplications\n+;; Reg operands\n+(define_insn_reservation \"znver1_imul\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"imul\")\n+\t\t\t\t   (eq_attr \"memory\" \"none\")))\n+\t\t\t \"znver1-direct,znver1-ieu1\")\n+\n+(define_insn_reservation \"znver1_imul_mem\" 7\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"imul\")\n+\t\t\t\t   (eq_attr \"memory\" \"!none\")))\n+\t\t\t \"znver1-direct,znver1-load, znver1-ieu1\")\n+\n+;; Divisions\n+;; Reg operands\n+(define_insn_reservation \"znver1_idiv_DI\" 41\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"idiv\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DI\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,znver1-ieu2*41\")\n+\n+(define_insn_reservation \"znver1_idiv_SI\" 25\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"idiv\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SI\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,znver1-ieu2*25\")\n+\n+(define_insn_reservation \"znver1_idiv_HI\" 17\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"idiv\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"HI\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,znver1-ieu2*17\")\n+\n+(define_insn_reservation \"znver1_idiv_QI\" 12\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"idiv\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"QI\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-direct,znver1-ieu2*12\")\n+\n+;; Mem operands\n+(define_insn_reservation \"znver1_idiv_mem_DI\" 45\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"idiv\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DI\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,znver1-load,znver1-ieu2*41\")\n+\n+(define_insn_reservation \"znver1_idiv_mem_SI\" 29\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"idiv\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SI\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,znver1-load,znver1-ieu2*25\")\n+\n+(define_insn_reservation \"znver1_idiv_mem_HI\" 21\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"idiv\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"HI\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,znver1-load,znver1-ieu2*17\")\n+\n+(define_insn_reservation \"znver1_idiv_mem_QI\" 16\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"idiv\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"QI\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-direct,znver1-load,znver1-ieu2*12\")\n+\n+;; STR ISHIFT which are micro coded.\n+;; Fix me: Latency need to be rechecked.\n+(define_insn_reservation \"znver1_str_ishift\" 6\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"str,ishift\")\n+\t\t\t\t   (eq_attr \"memory\" \"both,store\")))\n+\t\t\t \"znver1-vector,znver1-ivector\")\n+;; MOV - integer moves\n+(define_insn_reservation \"znver1_load_imov_double\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"znver1_decode\" \"double\")\n+\t\t\t\t   (and (eq_attr \"type\" \"imovx\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none,load\"))))\n+\t\t\t \"znver1-double,znver1-ieu\")\n+\n+(define_insn_reservation \"znver1_load_imov_direct\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"imov,imovx\")\n+\t\t\t\t   (eq_attr \"memory\" \"none,load\")))\n+\t\t\t \"znver1-direct,znver1-ieu\")\n+\n+;; INTEGER/GENERAL instructions\n+;; register/imm operands only: ALU, ICMP, NEG, NOT, ROTATE, ISHIFT, TEST\n+(define_insn_reservation \"znver1_insn\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"alu,icmp,negnot,rotate,rotate1,ishift,ishift1,test,setcc,incdec\")\n+\t\t\t\t   (eq_attr \"memory\" \"none,unknown\")))\n+\t\t\t \"znver1-direct,znver1-ieu\")\n+\n+(define_insn_reservation \"znver1_insn_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"alu,icmp,negnot,rotate,rotate1,ishift,ishift1,test,setcc,incdec\")\n+\t\t\t\t   (eq_attr \"memory\" \"load\")))\n+\t\t\t \"znver1-direct,znver1-load,znver1-ieu\")\n+\n+(define_insn_reservation \"znver1_insn_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"alu,icmp,negnot,rotate,rotate1,ishift1,test,setcc,incdec\")\n+\t\t\t\t   (eq_attr \"memory\" \"store\")))\n+\t\t\t \"znver1-direct,znver1-ieu,znver1-store\")\n+\n+(define_insn_reservation \"znver1_insn_both\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"alu,icmp,negnot,rotate,rotate1,ishift1,test,setcc,incdec\")\n+\t\t\t\t   (eq_attr \"memory\" \"both\")))\n+\t\t\t \"znver1-direct,znver1-load,znver1-ieu,znver1-store\")\n+\n+;; Fix me: Other vector type insns keeping latency 6 as of now.\n+(define_insn_reservation \"znver1_ieu_vector\" 6\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (eq_attr \"type\" \"other,str,multi\"))\n+\t\t\t \"znver1-vector,znver1-ivector\")\n+\n+;; ALU1 register operands.\n+(define_insn_reservation \"znver1_alu1_vector\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"znver1_decode\" \"vector\")\n+\t\t\t\t   (and (eq_attr \"type\" \"alu1\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none,unknown\"))))\n+\t\t\t \"znver1-vector,znver1-ivector\")\n+\n+(define_insn_reservation \"znver1_alu1_double\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"znver1_decode\" \"double\")\n+\t\t\t\t   (and (eq_attr \"type\" \"alu1\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none,unknown\"))))\n+\t\t\t \"znver1-double,znver1-ieu\")\n+\n+(define_insn_reservation \"znver1_alu1_direct\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"znver1_decode\" \"direct\")\n+\t\t\t\t   (and (eq_attr \"type\" \"alu1\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none,unknown\"))))\n+\t\t\t \"znver1-direct,znver1-ieu\")\n+\n+;; Branches : Fix me need to model conditional branches.\n+(define_insn_reservation \"znver1_branch\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"ibr\")\n+\t\t\t\t   (eq_attr \"memory\" \"none\")))\n+\t\t\t  \"znver1-direct\")\n+\n+;; Indirect branches check latencies.\n+(define_insn_reservation \"znver1_indirect_branch_mem\" 6\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"ibr\")\n+\t\t\t\t   (eq_attr \"memory\" \"load\")))\n+\t\t\t \"znver1-vector,znver1-ivector\")\n+\n+;; LEA executes in ALU units with 1 cycle latency.\n+(define_insn_reservation \"znver1_lea\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (eq_attr \"type\" \"lea\"))\n+\t\t\t \"znver1-direct,znver1-ieu\")\n+\n+;; Other integer instrucions\n+(define_insn_reservation \"znver1_idirect\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"unit\" \"integer,unknown\")\n+\t\t\t\t   (eq_attr \"memory\" \"none,unknown\")))\n+\t\t\t \"znver1-direct,znver1-ieu\")\n+\n+;;  Floating point\n+(define_insn_reservation \"znver1_fp_cmov\" 6\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (eq_attr \"type\" \"fcmov\"))\n+\t\t\t \"znver1-vector,znver1-fvector\")\n+\n+(define_insn_reservation \"znver1_fp_mov_direct_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"znver1_decode\" \"direct\")\n+\t\t\t\t   (and (eq_attr \"type\" \"fmov\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp3|znver1-fp1\")\n+\n+(define_insn_reservation \"znver1_fp_mov_direct_store\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"znver1_decode\" \"direct\")\n+\t\t\t\t   (and (eq_attr \"type\" \"fmov\")\n+\t\t\t\t\t(eq_attr \"memory\" \"store\"))))\n+\t\t\t \"znver1-direct,znver1-fp2|znver1-fp3,znver1-store\")\n+\n+(define_insn_reservation \"znver1_fp_mov_double\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"znver1_decode\" \"double\")\n+\t\t\t\t   (and (eq_attr \"type\" \"fmov\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_fp_mov_double_load\" 9\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"znver1_decode\" \"double\")\n+\t\t\t\t   (and (eq_attr \"type\" \"fmov\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-double,znver1-load,znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_fp_mov_direct\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (eq_attr \"type\" \"fmov\"))\n+\t\t\t \"znver1-direct,znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_fp_spc_direct\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"fpspc\")\n+\t\t\t\t   (eq_attr \"memory\" \"store\")))\n+\t\t\t \"znver1-direct,znver1-fp3,znver1-fp2\")\n+\n+(define_insn_reservation \"znver1_fp_insn_vector\" 6\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"znver1_decode\" \"vector\")\n+\t\t\t\t   (eq_attr \"type\" \"fpspc,mmxcvt,sselog1,ssemul,ssemov\")))\n+\t\t\t \"znver1-vector,znver1-fvector\")\n+\n+;; FABS\n+(define_insn_reservation \"znver1_fp_fsgn\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (eq_attr \"type\" \"fsgn\"))\n+\t\t\t \"znver1-direct,znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_fp_fcmp\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"znver1_decode\" \"double\")\n+\t\t\t\t\t(eq_attr \"type\" \"fcmp\"))))\n+\t\t\t \"znver1-double,znver1-fp0,znver1-fp2\")\n+\n+(define_insn_reservation \"znver1_fp_fcmp_load\" 6\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"znver1_decode\" \"double\")\n+\t\t\t\t\t(eq_attr \"type\" \"fcmp\"))))\n+\t\t\t \"znver1-double,znver1-load, znver1-fp0,znver1-fp2\")\n+\n+;;FADD FSUB FMUL\n+(define_insn_reservation \"znver1_fp_op_mul\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"fop,fmul\")\n+\t\t\t\t   (eq_attr \"memory\" \"none\")))\n+\t\t\t \"znver1-direct,znver1-fp0*5\")\n+\n+(define_insn_reservation \"znver1_fp_op_mul_load\" 9\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"fop,fmul\")\n+\t\t\t\t   (eq_attr \"memory\" \"load\")))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp0*5\")\n+\n+(define_insn_reservation \"znver1_fp_op_imul_load\" 13\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"fop,fmul\")\n+\t\t\t\t   (and (eq_attr \"fp_int_src\" \"true\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t\"znver1-double,znver1-load,znver1-fp3,znver1-fp0\")\n+\n+(define_insn_reservation \"znver1_fp_op_div\" 15\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"fdiv\")\n+\t\t\t\t   (eq_attr \"memory\" \"none\")))\n+\t\t\t \"znver1-direct,znver1-fp3*15\")\n+\n+(define_insn_reservation \"znver1_fp_op_div_load\" 19\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"fdiv\")\n+\t\t\t\t   (eq_attr \"memory\" \"load\")))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp3*15\")\n+\n+(define_insn_reservation \"znver1_fp_op_idiv_load\" 24\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"fdiv\")\n+\t\t\t\t   (and (eq_attr \"fp_int_src\" \"true\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-double,znver1-load,znver1-fp3*19\")\n+\n+;; MMX, SSE, SSEn.n, AVX, AVX2 instructions\n+(define_insn_reservation \"znver1_fp_insn\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (eq_attr \"type\" \"mmx\"))\n+\t\t\t \"znver1-direct,znver1-fpu\")\n+\n+(define_insn_reservation \"znver1_mmx_add\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"mmxadd\")\n+\t\t\t\t   (eq_attr \"memory\" \"none\")))\n+\t\t\t \"znver1-direct,znver1-fp0|znver1-fp1|znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_mmx_add_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"mmxadd\")\n+\t\t\t\t   (eq_attr \"memory\" \"load\")))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp0|znver1-fp1|znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_mmx_cmp\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"mmxcmp\")\n+\t\t\t\t   (eq_attr \"memory\" \"none\")))\n+\t\t\t \"znver1-direct,znver1-fp0|znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_mmx_cmp_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"mmxcmp\")\n+\t\t\t\t   (eq_attr \"memory\" \"load\")))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp0|znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_mmx_cvt_pck_shuf\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"mmxcvt,sseshuf,sseshuf1\")\n+\t\t\t\t   (eq_attr \"memory\" \"none\")))\n+\t\t\t \"znver1-direct,znver1-fp1|znver1-fp2\")\n+\n+(define_insn_reservation \"znver1_mmx_cvt_pck_shuf_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"mmxcvt,sseshuf,sseshuf1\")\n+\t\t\t\t   (eq_attr \"memory\" \"load\")))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp1|znver1-fp2\")\n+\n+(define_insn_reservation \"znver1_mmx_shift_move\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"mmxshft,mmxmov\")\n+\t\t\t\t   (eq_attr \"memory\" \"none\")))\n+ \t\t\t \"znver1-direct,znver1-fp2\")\n+\n+(define_insn_reservation \"znver1_mmx_shift_move_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"mmxshft,mmxmov\")\n+\t\t\t\t   (eq_attr \"memory\" \"load\")))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp2\")\n+\n+(define_insn_reservation \"znver1_mmx_move_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"mmxshft,mmxmov\")\n+\t\t\t\t   (eq_attr \"memory\" \"store,both\")))\n+\t\t\t  \"znver1-direct,znver1-fp2,znver1-store\")\n+\n+(define_insn_reservation \"znver1_mmx_mul\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"mmxmul\")\n+\t\t\t\t   (eq_attr \"memory\" \"none\")))\n+\t\t\t  \"znver1-direct,znver1-fp0*3\")\n+\n+(define_insn_reservation \"znver1_mmx_load\" 7\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"mmxmul\")\n+\t\t\t\t   (eq_attr \"memory\" \"load\")))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp0*3\")\n+\n+(define_insn_reservation \"znver1_avx256_log\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF,V4DF,OI\")\n+ \t\t\t\t   (and (eq_attr \"type\" \"sselog\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,znver1-fpu\")\n+\n+(define_insn_reservation \"znver1_avx256_log_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF,V4DF,OI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sselog\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-double,znver1-load,znver1-fpu\")\n+\n+(define_insn_reservation \"znver1_sse_log\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"sselog\")\n+\t\t\t\t   (eq_attr \"memory\" \"none\")))\n+\t\t\t \"znver1-direct,znver1-fpu\")\n+\n+(define_insn_reservation \"znver1_sse_log_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"sselog\")\n+\t\t\t\t   (eq_attr \"memory\" \"load\")))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fpu\")\n+\n+(define_insn_reservation \"znver1_avx256_log1\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF,V4DF,OI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sselog1\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,znver1-fp1|znver1-fp2\")\n+\n+(define_insn_reservation \"znver1_avx256_log1_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF,V4DF,OI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sselog1\")\n+\t\t\t\t\t(eq_attr \"memory\" \"!none\"))))\n+\t\t\t \"znver1-double,znver1-load,znver1-fp1|znver1-fp2\")\n+\n+(define_insn_reservation \"znver1_sse_log1\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"sselog1\")\n+\t\t\t\t   (eq_attr \"memory\" \"none\")))\n+\t\t\t \"znver1-direct,znver1-fp1|znver1-fp2\")\n+\n+(define_insn_reservation \"znver1_sse_log1_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"sselog1\")\n+\t\t\t\t   (eq_attr \"memory\" \"!none\")))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp1|znver1-fp2\")\n+\n+(define_insn_reservation \"znver1_sse_comi\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SF,DF,V4SF,V2DF\")\n+\t\t\t\t   (and (eq_attr \"prefix\" \"!vex\")\n+\t\t\t\t\t(and (eq_attr \"prefix_extra\" \"0\")\n+\t\t\t\t\t     (and (eq_attr \"type\" \"ssecomi\")\n+\t\t\t\t\t\t  (eq_attr \"memory\" \"none\"))))))\n+\t\t\t \"znver1-direct,znver1-fp0|znver1-fp1\")\n+\n+(define_insn_reservation \"znver1_sse_comi_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SF,DF,V4SF,V2DF\")\n+\t\t\t\t   (and (eq_attr \"prefix\" \"!vex\")\n+\t\t\t\t\t(and (eq_attr \"prefix_extra\" \"0\")\n+\t\t\t\t\t     (and (eq_attr \"type\" \"ssecomi\")\n+\t\t\t\t\t\t  (eq_attr \"memory\" \"load\"))))))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp0|znver1-fp1\")\n+\n+(define_insn_reservation \"znver1_sse_comi_double\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V4SF,V2DF,TI\")\n+\t\t\t\t   (and (eq_attr \"prefix\" \"vex\")\n+\t\t\t\t\t(and (eq_attr \"prefix_extra\" \"0\")\n+\t\t\t\t\t     (and (eq_attr \"type\" \"ssecomi\")\n+\t\t\t\t\t\t  (eq_attr \"memory\" \"none\"))))))\n+\t\t\t \"znver1-double,znver1-fp0|znver1-fp1\")\n+\n+(define_insn_reservation \"znver1_sse_comi_double_load\" 7\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V4SF,V2DF,TI\")\n+\t\t\t\t   (and (eq_attr \"prefix\" \"vex\")\n+\t\t\t\t\t(and (eq_attr \"prefix_extra\" \"0\")\n+\t\t\t\t\t     (and (eq_attr \"type\" \"ssecomi\")\n+\t\t\t\t\t\t  (eq_attr \"memory\" \"load\"))))))\n+\t\t\t \"znver1-double,znver1-load,znver1-fp0|znver1-fp1\")\n+\n+(define_insn_reservation \"znver1_sse_test\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SF,DF,V4SF,V2DF,TI\")\n+\t\t\t\t   (and (eq_attr \"prefix_extra\" \"1\")\n+\t\t\t\t\t(and (eq_attr \"type\" \"ssecomi\")\n+\t\t\t\t\t     (eq_attr \"memory\" \"none\")))))\n+\t\t\t \"znver1-direct,znver1-fp1|znver1-fp2\")\n+\n+(define_insn_reservation \"znver1_sse_test_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SF,DF,V4SF,V2DF,TI\")\n+\t\t\t\t   (and (eq_attr \"prefix_extra\" \"1\")\n+\t\t\t\t\t(and (eq_attr \"type\" \"ssecomi\")\n+\t\t\t\t\t     (eq_attr \"memory\" \"load\")))))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp1|znver1-fp2\")\n+\n+;; SSE moves\n+;; Fix me:  Need to revist this again some of the moves may be restricted\n+;; to some fpu pipes.\n+(define_insn_reservation \"znver1_sse_mov\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SI\")\n+\t\t\t\t   (and (eq_attr \"isa\" \"avx\")\n+\t\t\t\t\t(and (eq_attr \"type\" \"ssemov\")\n+\t\t\t\t\t     (eq_attr \"memory\" \"none\")))))\n+\t\t\t \"znver1-direct,znver1-ieu0\")\n+\n+(define_insn_reservation \"znver1_avx_mov\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"TI\")\n+\t\t\t\t   (and (eq_attr \"isa\" \"avx\")\n+\t\t\t\t\t(and (eq_attr \"type\" \"ssemov\")\n+\t\t\t\t\t     (and (match_operand:SI 1 \"register_operand\")\n+\t\t\t\t\t\t  (eq_attr \"memory\" \"none\"))))))\n+\t\t\t \"znver1-direct,znver1-ieu2\")\n+\n+(define_insn_reservation \"znver1_sseavx_mov\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SF,DF,V4SF,V2DF,TI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemov\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-direct,znver1-fpu\")\n+\n+(define_insn_reservation \"znver1_sseavx_mov_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SF,DF,V4SF,V2DF,TI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemov\")\n+\t\t\t\t\t(eq_attr \"memory\" \"store\"))))\n+\t\t\t\"znver1-direct,znver1-fpu,znver1-store\")\n+\n+(define_insn_reservation \"znver1_sseavx_mov_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SF,DF,V4SF,V2DF,TI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemov\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fpu\")\n+\n+(define_insn_reservation \"znver1_avx256_mov\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF,V4DF,OI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemov\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,znver1-fpu\")\n+\n+(define_insn_reservation \"znver1_avx256_mov_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF,V4DF,OI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemov\")\n+\t\t\t\t\t(eq_attr \"memory\" \"store\"))))\n+\t\t\t \"znver1-double,znver1-fpu,znver1-store\")\n+\n+(define_insn_reservation \"znver1_avx256_mov_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF,V4DF,OI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemov\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-double,znver1-load,znver1-fpu\")\n+\n+;; SSE add\n+(define_insn_reservation \"znver1_sseavx_add\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SF,DF,V4SF,V2DF,TI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sseadd\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-direct,znver1-fp2|znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_sseavx_add_load\" 7\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SF,DF,V4SF,V2DF,TI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sseadd\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp2|znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_avx256_add\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF,V4DF,OI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sseadd\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,znver1-fp2|znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_avx256_add_load\" 7\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF,V4DF,OI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sseadd\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-double,znver1-load,znver1-fp2|znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_sseavx_fma\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SF,DF,V4SF,V2DF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemuladd\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-direct,(znver1-fp0+znver1-fp3)|(znver1-fp1+znver1-fp3)\")\n+\n+(define_insn_reservation \"znver1_sseavx_fma_load\" 9\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SF,DF,V4SF,V2DF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemuladd\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t\"znver1-direct,znver1-load,(znver1-fp0+znver1-fp3)|(znver1-fp1+znver1-fp3)\")\n+\n+(define_insn_reservation \"znver1_avx256_fma\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF,V4DF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemuladd\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,(znver1-fp0+znver1-fp3)|(znver1-fp1+znver1-fp3)\")\n+\n+(define_insn_reservation \"znver1_avx256_fma_load\" 9\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF,V4DF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemuladd\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-double,znver1-load,(znver1-fp0+znver1-fp3)|(znver1-fp1+znver1-fp3)\")\n+\n+(define_insn_reservation \"znver1_sseavx_iadd\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"DI,TI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sseiadd\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-direct,znver1-fp0|znver1-fp1|znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_sseavx_iadd_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"DI,TI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sseiadd\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp0|znver1-fp1|znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_avx256_iadd\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"OI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sseiadd\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,znver1-fp0|znver1-fp1|znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_avx256_iadd_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"OI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sseiadd\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-double,znver1-load,znver1-fp0|znver1-fp1|znver1-fp3\")\n+\n+;; SSE conversions.\n+(define_insn_reservation \"znver1_ssecvtsf_si_load\" 9\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sseicvt\")\n+\t\t\t\t\t(and (match_operand:SF 1 \"memory_operand\")\n+\t\t\t\t\t     (eq_attr \"memory\" \"load\")))))\n+\t\t\t \"znver1-double,znver1-load,znver1-fp3,znver1-ieu0\")\n+\n+(define_insn_reservation \"znver1_ssecvtdf_si\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SI\")\n+\t\t\t\t   (and (match_operand:DF 1 \"register_operand\")\n+\t\t\t\t\t(and (eq_attr \"type\" \"sseicvt\")\n+\t\t\t\t\t     (eq_attr \"memory\" \"none\")))))\n+\t\t\t \"znver1-double,znver1-fp3,znver1-ieu0\")\n+\n+(define_insn_reservation \"znver1_ssecvtdf_si_load\" 9\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"sseicvt\")\n+\t\t\t\t\t(and (match_operand:DF 1 \"memory_operand\")\n+\t\t\t\t\t     (eq_attr \"memory\" \"load\")))))\n+\t\t\t \"znver1-double,znver1-load,znver1-fp3,znver1-ieu0\")\n+\n+;; All other used ssecvt fp3 pipes\n+;; Check: Need to revisit this again.\n+;; Some SSE converts may use different pipe combinations.\n+(define_insn_reservation \"znver1_ssecvt\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n+\t\t\t\t   (eq_attr \"memory\" \"none\")))\n+\t\t\t \"znver1-direct,znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_ssecvt_load\" 8\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"type\" \"ssecvt\")\n+\t\t\t\t   (eq_attr \"memory\" \"load\")))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp3\")\n+\n+;; SSE div\n+(define_insn_reservation \"znver1_ssediv_ss_ps\" 10\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V4SF,SF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssediv\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-direct,znver1-fp3*10\")\n+\n+(define_insn_reservation \"znver1_ssediv_ss_ps_load\" 14\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V4SF,SF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssediv\")\n+\t\t\t \t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp3*10\")\n+\n+(define_insn_reservation \"znver1_ssediv_sd_pd\" 13\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V2DF,DF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssediv\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-direct,znver1-fp3*13\")\n+\n+(define_insn_reservation \"znver1_ssediv_sd_pd_load\" 17\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V2DF,DF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssediv\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp3*13\")\n+\n+(define_insn_reservation \"znver1_ssediv_avx256_ps\" 12\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF\")\n+\t\t\t\t   (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"znver1-double,znver1-fp3*12\")\n+\n+(define_insn_reservation \"znver1_ssediv_avx256_ps_load\" 16\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssediv\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-double,znver1-load,znver1-fp3*12\")\n+\n+(define_insn_reservation \"znver1_ssediv_avx256_pd\" 15\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V4DF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssediv\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,znver1-fp3*15\")\n+\n+(define_insn_reservation \"znver1_ssediv_avx256_pd_load\" 18\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V4DF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssediv\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-double,znver1-load,znver1-fp3*15\")\n+;; SSE MUL\n+(define_insn_reservation \"znver1_ssemul_ss_ps\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V4SF,SF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemul\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-direct,(znver1-fp0|znver1-fp1)*3\")\n+\n+(define_insn_reservation \"znver1_ssemul_ss_ps_load\" 7\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V4SF,SF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemul\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-direct,znver1-load,(znver1-fp0|znver1-fp1)*3\")\n+\n+(define_insn_reservation \"znver1_ssemul_avx256_ps\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemul\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,(znver1-fp0|znver1-fp1)*3\")\n+\n+(define_insn_reservation \"znver1_ssemul_avx256_ps_load\" 7\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemul\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-double,znver1-load,(znver1-fp0|znver1-fp1)*3\")\n+\n+(define_insn_reservation \"znver1_ssemul_sd_pd\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V2DF,DF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemul\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-direct,(znver1-fp0|znver1-fp1)*4\")\n+\n+(define_insn_reservation \"znver1_ssemul_sd_pd_load\" 8\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V2DF,DF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemul\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-direct,znver1-load,(znver1-fp0|znver1-fp1)*4\")\n+\n+(define_insn_reservation \"znver1_ssemul_avx256_pd\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V4DF\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"V4DF\")\n+\t\t\t\t\t(and (eq_attr \"type\" \"ssemul\")\n+\t\t\t\t\t     (eq_attr \"memory\" \"none\")))))\n+\t\t\t \"znver1-double,(znver1-fp0|znver1-fp1)*4\")\n+\n+(define_insn_reservation \"znver1_ssemul_avx256_pd_load\" 8\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V4DF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemul\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-double,znver1-load,(znver1-fp0|znver1-fp1)*4\")\n+\n+;;SSE imul\n+(define_insn_reservation \"znver1_sseimul\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"TI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemul\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-direct,znver1-fp0*3\")\n+\n+(define_insn_reservation \"znver1_sseimul_avx256\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"OI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemul\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,znver1-fp0*4\")\n+\n+(define_insn_reservation \"znver1_sseimul_load\" 7\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"TI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemul\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp0*3\")\n+\n+(define_insn_reservation \"znver1_sseimul_avx256_load\" 8\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"OI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemul\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-double,znver1-load,znver1-fp0*4\")\n+\n+(define_insn_reservation \"znver1_sseimul_di\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"DI\")\n+\t\t\t\t   (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssemul\"))))\n+\t\t\t \"znver1-direct,znver1-fp0*4\")\n+\n+(define_insn_reservation \"znver1_sseimul_load_di\" 8\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"DI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssemul\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp0*4\")\n+\n+;; SSE compares\n+(define_insn_reservation \"znver1_sse_cmp\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SF,DF,V4SF,V2DF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssecmp\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-direct,znver1-fp0|znver1-fp1\")\n+\n+(define_insn_reservation \"znver1_sse_cmp_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"SF,DF,V4SF,V2DF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssecmp\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp0|znver1-fp1\")\n+\n+(define_insn_reservation \"znver1_sse_cmp_avx256\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF,V4DF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssecmp\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t\"znver1-double,znver1-fp0|znver1-fp1\")\n+\n+(define_insn_reservation \"znver1_sse_cmp_avx256_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF,V4DF\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssecmp\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-double,znver1-load,znver1-fp0|znver1-fp1\")\n+\n+(define_insn_reservation \"znver1_sse_icmp\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"QI,HI,SI,DI,TI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssecmp\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-direct,znver1-fp0|znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_sse_icmp_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"QI,HI,SI,DI,TI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssecmp\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-direct,znver1-load,znver1-fp0|znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_sse_icmp_avx256\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"OI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssecmp\")\n+\t\t\t\t\t(eq_attr \"memory\" \"none\"))))\n+\t\t\t \"znver1-double,znver1-fp0|znver1-fp3\")\n+\n+(define_insn_reservation \"znver1_sse_icmp_avx256_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"znver1\")\n+\t\t\t      (and (eq_attr \"mode\" \"OI\")\n+\t\t\t\t   (and (eq_attr \"type\" \"ssecmp\")\n+\t\t\t\t\t(eq_attr \"memory\" \"load\"))))\n+\t\t\t \"znver1-double,znver1-load,znver1-fp0|znver1-fp3\")\n+"}, {"sha": "0d8d7a5eb570e9fa681fe7c1c92c27be634c99b8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce29eb05de83246802a03873ae1a6aaeae8e598/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9ce29eb05de83246802a03873ae1a6aaeae8e598", "patch": "@@ -22408,6 +22408,13 @@ supersets BMI, BMI2, TBM, F16C, FMA, FMA4, FSGSBASE, AVX, AVX2, XOP, LWP,\n AES, PCL_MUL, CX16, MOVBE, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, \n SSE4.2, ABM and 64-bit instruction set extensions.\n \n+@item znver1\n+AMD Family 17h core based CPUs with x86-64 instruction set support.  (This\n+supersets BMI, BMI2, F16C, FMA, FSGSBASE, AVX, AVX2, ADCX, RDSEED, MWAITX,\n+SHA, CLZERO, AES, PCL_MUL, CX16, MOVBE, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3,\n+SSE4.1, SSE4.2, ABM, XSAVEC, XSAVES, CLFLUSHOPT, POPCNT, and 64-bit\n+instruction set extensions.\n+\n @item btver1\n CPUs based on AMD Family 14h cores with x86-64 instruction set support.  (This\n supersets MMX, SSE, SSE2, SSE3, SSSE3, SSE4A, CX16, ABM and 64-bit"}]}