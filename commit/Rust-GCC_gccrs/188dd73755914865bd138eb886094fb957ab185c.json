{"sha": "188dd73755914865bd138eb886094fb957ab185c", "node_id": "C_kwDOANBUbNoAKDE4OGRkNzM3NTU5MTQ4NjViZDEzOGViODg2MDk0ZmI5NTdhYjE4NWM", "commit": {"author": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-06-07T00:49:42Z"}, "committer": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-06-07T02:34:20Z"}, "message": "rust/intrinsic: add a basic size check for transmute", "tree": {"sha": "fb4378d55dac48d9e2114755fec13c79d7ec1c8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb4378d55dac48d9e2114755fec13c79d7ec1c8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/188dd73755914865bd138eb886094fb957ab185c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE6x/rcKrl3aOwzUVJI9HORTRBlDcFAmKeuS0ACgkQI9HORTRB\nlDe66hAAnDnAt7PxuoucEPM9WGGzhp39qoV46nWYkz6UEUmJgB7mh/hKn5QR28n0\nL4+pd4J9WAlTgdaaIWYXHmEd52iTH2KIshs1+RHnBzqeVKGz/d5c9YdbY3fxzT0q\nb+jo+CGcTAhTFtretmRS6t29K187Ds/v5JnzpBGumW7q9ZoImZ8wz0IQ65tiZmbs\nXIAQCYY+X7i6JWOd8/YPWZHmVPAN0YRs6vVk4DaJt2LifIZA82CfTHcmUmShW61X\nIvsBMl3qnq66Egd9XI9u8ySRX0qyYnig8yGNd1xA4TZ6zBgtWsLrDPyk756uPMhq\nvP7exPliuGSY8Aw1wMexWszrdbDKNAPhzz5Sov+yWaOjgQvO73mm9WDhsK/8l2f3\nuEyjbiWuPw0iBmO1m4Q48mgvxpjPz2Y0HzpZOTWLNtYXcdqqeY0854AfKR8S2oPU\nE3yZ8b4jOLcnp4fVym1BQ4DeXocFl5kUvyEaAKqUrdDD0M2SzDc7Lefe7S6kxbHi\nJzdTVyDSB42SENrZmi3g2IXIFndRGvBRIshaFmpJag/FLgBfmfgvRYx9KJiJ+Sv3\n+XiIC8sDx3QEZO9SawpN766ogs9netrjtcsslZ6AYGp+uePOKcNfZ8K2UsQOfYMd\nwtGkw1HTT8HDxMZIavfJ4C8090x90UbZVd3SxjiXOfDl9FkyvDc=\n=9+ge\n-----END PGP SIGNATURE-----", "payload": "tree fb4378d55dac48d9e2114755fec13c79d7ec1c8e\nparent 957914b4284213b1d72c9c4210892367acaf1419\nauthor liushuyu <liushuyu011@gmail.com> 1654562982 -0600\ncommitter liushuyu <liushuyu011@gmail.com> 1654569260 -0600\n\nrust/intrinsic: add a basic size check for transmute\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188dd73755914865bd138eb886094fb957ab185c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/188dd73755914865bd138eb886094fb957ab185c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188dd73755914865bd138eb886094fb957ab185c/comments", "author": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "957914b4284213b1d72c9c4210892367acaf1419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957914b4284213b1d72c9c4210892367acaf1419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/957914b4284213b1d72c9c4210892367acaf1419"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "e93480db134ebdaa8715ca593cb837a3217d6e0c", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188dd73755914865bd138eb886094fb957ab185c/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188dd73755914865bd138eb886094fb957ab185c/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=188dd73755914865bd138eb886094fb957ab185c", "patch": "@@ -20,6 +20,8 @@\n #include \"rust-compile-context.h\"\n #include \"rust-compile-type.h\"\n #include \"rust-compile-fnparam.h\"\n+#include \"rust-diagnostics.h\"\n+#include \"rust-location.h\"\n #include \"rust-tree.h\"\n #include \"tree-core.h\"\n \n@@ -477,6 +479,7 @@ transmute_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype_tyty)\n \n   // setup the params\n   std::vector<Bvariable *> param_vars;\n+  std::vector<tree_node *> compiled_types;\n   for (auto &parm : fntype->get_params ())\n     {\n       auto &referenced_param = parm.first;\n@@ -489,6 +492,7 @@ transmute_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype_tyty)\n \t\t\t\t   compiled_param_type, param_locus);\n \n       param_vars.push_back (compiled_param_var);\n+      compiled_types.push_back (compiled_param_type);\n     }\n \n   rust_assert (param_vars.size () == 1);\n@@ -500,6 +504,34 @@ transmute_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype_tyty)\n   tree convert_me_expr\n     = ctx->get_backend ()->var_expression (convert_me_param, Location ());\n \n+  // check for transmute pre-conditions\n+  tree target_type_expr = TREE_TYPE (DECL_RESULT (fndecl));\n+  tree source_type_expr = compiled_types.at (0);\n+  tree target_size_expr = TYPE_SIZE (target_type_expr);\n+  tree source_size_expr = TYPE_SIZE (source_type_expr);\n+  // for some reason, unit types and other zero-sized types return NULL for the\n+  // size expressions\n+  unsigned HOST_WIDE_INT target_size\n+    = target_size_expr ? TREE_INT_CST_LOW (target_size_expr) : 0;\n+  unsigned HOST_WIDE_INT source_size\n+    = source_size_expr ? TREE_INT_CST_LOW (source_size_expr) : 0;\n+\n+  // size check for concrete types\n+  // TODO(liushuyu): check alignment for pointers; check for dependently-sized\n+  // types\n+  if (target_size != source_size)\n+    {\n+      rust_error_at (fntype->get_locus (),\n+\t\t     \"cannot transmute between types of different sizes, or \"\n+\t\t     \"dependently-sized types\");\n+      rust_inform (fntype->get_ident ().locus, \"source type: %qs (%lu bits)\",\n+\t\t   fntype->get_params ().at (0).second->as_string ().c_str (),\n+\t\t   source_size);\n+      rust_inform (fntype->get_ident ().locus, \"target type: %qs (%lu bits)\",\n+\t\t   fntype->get_return_type ()->as_string ().c_str (),\n+\t\t   target_size);\n+    }\n+\n   tree enclosing_scope = NULL_TREE;\n   Location start_location = Location ();\n   Location end_location = Location ();"}, {"sha": "c4817ad620c9e42e055a486290fa57ada57403a8", "filename": "gcc/rust/hir/tree/rust-hir-type.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188dd73755914865bd138eb886094fb957ab185c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188dd73755914865bd138eb886094fb957ab185c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h?ref=188dd73755914865bd138eb886094fb957ab185c", "patch": "@@ -582,10 +582,7 @@ class ArrayType : public TypeNoBounds\n   ArrayType (ArrayType const &other)\n     : TypeNoBounds (other.mappings), elem_type (other.elem_type->clone_type ()),\n       size (other.size->clone_expr ()), locus (other.locus)\n-  {\n-    // Untested.\n-    gcc_unreachable ();\n-  }\n+  {}\n \n   // Overload assignment operator to deep copy pointers\n   ArrayType &operator= (ArrayType const &other)"}, {"sha": "1aef4d81929636d8f250031e8e1eac52c883a8b4", "filename": "gcc/testsuite/rust/compile/torture/transmute-size-check-1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188dd73755914865bd138eb886094fb957ab185c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftransmute-size-check-1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188dd73755914865bd138eb886094fb957ab185c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftransmute-size-check-1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftransmute-size-check-1.rs?ref=188dd73755914865bd138eb886094fb957ab185c", "patch": "@@ -0,0 +1,11 @@\n+mod mem {\n+    extern \"rust-intrinsic\" {\n+        fn size_of<T>() -> usize;\n+        fn transmute<U, V>(_: U) -> V; // { dg-error \"cannot transmute between types of different sizes, or dependently-sized types\" }\n+    }\n+}\n+\n+fn main() {\n+    let a = 123;\n+    let _b: [u32; mem::size_of::<i32>()] = mem::transmute(a);\n+}"}]}