{"sha": "4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7", "node_id": "C_kwDOANBUbNoAKDQwNDNmNTNjYjRhMzU0MWY3YTZlNGY0MTMyNDE5Zjc4YWI3ZWM0Zjc", "commit": {"author": {"name": "Marcel Vollweiler", "email": "marcel@codesourcery.com", "date": "2022-05-06T14:28:26Z"}, "committer": {"name": "Marcel Vollweiler", "email": "marcel@codesourcery.com", "date": "2022-05-06T14:28:26Z"}, "message": "OpenMP, libgomp: Add new runtime routine omp_target_is_accessible.\n\ngcc/ChangeLog:\n\n\t* omp-low.cc (omp_runtime_api_call): Added target_is_accessible to\n\tomp_runtime_apis array.\n\nlibgomp/ChangeLog:\n\n\t* libgomp.map: Added omp_target_is_accessible.\n\t* libgomp.texi: Tagged omp_target_is_accessible as supported.\n\t* omp.h.in: Added omp_target_is_accessible.\n\t* omp_lib.f90.in: Added interface for omp_target_is_accessible.\n\t* omp_lib.h.in: Likewise.\n\t* target.c (omp_target_is_accessible): Added implementation of\n\tomp_target_is_accessible.\n\t* testsuite/libgomp.c-c++-common/target-is-accessible-1.c: New test.\n\t* testsuite/libgomp.fortran/target-is-accessible-1.f90: New test.", "tree": {"sha": "9ef3279dec3be0ec7bcfa521b60274ee6dab9814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ef3279dec3be0ec7bcfa521b60274ee6dab9814"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/comments", "author": null, "committer": null, "parents": [{"sha": "aa8bdfee1db818b9a56908ab0197ff02c54bf281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa8bdfee1db818b9a56908ab0197ff02c54bf281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa8bdfee1db818b9a56908ab0197ff02c54bf281"}], "stats": {"total": 142, "additions": 141, "deletions": 1}, "files": [{"sha": "e7818a9af5f8f9e70e225919a9a4f56b2950e7cf", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7", "patch": "@@ -3998,6 +3998,7 @@ omp_runtime_api_call (const_tree fndecl)\n       \"target_associate_ptr\",\n       \"target_disassociate_ptr\",\n       \"target_free\",\n+      \"target_is_accessible\",\n       \"target_is_present\",\n       \"target_memcpy\",\n       \"target_memcpy_rect\","}, {"sha": "d631a777cf15cd26415f8c5ec008b8380d48c582", "filename": "libgomp/libgomp.map", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/libgomp%2Flibgomp.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/libgomp%2Flibgomp.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.map?ref=4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7", "patch": "@@ -229,6 +229,7 @@ OMP_5.1 {\n OMP_5.1.1 {\n   global:\n \tomp_get_mapped_ptr;\n+\tomp_target_is_accessible;\n } OMP_5.1;\n \n GOMP_1.0 {"}, {"sha": "b5e5fbb8ccacdce11339091a4a98459d1c671440", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7", "patch": "@@ -311,7 +311,7 @@ The OpenMP 4.5 specification is fully supported.\n @item @code{omp_set_num_teams}, @code{omp_set_teams_thread_limit},\n       @code{omp_get_max_teams}, @code{omp_get_teams_thread_limit} runtime\n       routines @tab Y @tab\n-@item @code{omp_target_is_accessible} runtime routine @tab N @tab\n+@item @code{omp_target_is_accessible} runtime routine @tab Y @tab\n @item @code{omp_target_memcpy_async} and @code{omp_target_memcpy_rect_async}\n       runtime routines @tab N @tab\n @item @code{omp_get_mapped_ptr} runtime routine @tab Y @tab"}, {"sha": "f427f42850e51ffed35ec4fa6ef9d324802e003a", "filename": "libgomp/omp.h.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/libgomp%2Fomp.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/libgomp%2Fomp.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp.h.in?ref=4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7", "patch": "@@ -283,6 +283,8 @@ extern int omp_target_associate_ptr (const void *, const void *, __SIZE_TYPE__,\n \t\t\t\t     __SIZE_TYPE__, int) __GOMP_NOTHROW;\n extern int omp_target_disassociate_ptr (const void *, int) __GOMP_NOTHROW;\n extern void *omp_get_mapped_ptr (const void *, int) __GOMP_NOTHROW;\n+extern int omp_target_is_accessible (const void *, __SIZE_TYPE__, int)\n+  __GOMP_NOTHROW;\n \n extern void omp_set_affinity_format (const char *) __GOMP_NOTHROW;\n extern __SIZE_TYPE__ omp_get_affinity_format (char *, __SIZE_TYPE__)"}, {"sha": "a2854a6517cdcef16e43b379845eba514ab9b8ca", "filename": "libgomp/omp_lib.f90.in", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/libgomp%2Fomp_lib.f90.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/libgomp%2Fomp_lib.f90.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp_lib.f90.in?ref=4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7", "patch": "@@ -844,6 +844,16 @@\n           end function omp_get_mapped_ptr\n         end interface\n \n+        interface\n+          function omp_target_is_accessible (ptr, size, device_num) bind(c)\n+            use, intrinsic :: iso_c_binding, only : c_ptr, c_size_t, c_int\n+            integer(c_int) :: omp_target_is_accessible\n+            type(c_ptr), value :: ptr\n+            integer(c_size_t), value :: size\n+            integer(c_int), value :: device_num\n+          end function omp_target_is_accessible\n+        end interface\n+\n #if _OPENMP >= 201811\n !GCC$ ATTRIBUTES DEPRECATED :: omp_get_nested, omp_set_nested\n #endif"}, {"sha": "28554331c95854ad75b8d57169643fee238e6537", "filename": "libgomp/omp_lib.h.in", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/libgomp%2Fomp_lib.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/libgomp%2Fomp_lib.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp_lib.h.in?ref=4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7", "patch": "@@ -425,3 +425,14 @@\n           integer(c_int), value :: device_num\n         end function omp_get_mapped_ptr\n       end interface\n+\n+      interface\n+        function omp_target_is_accessible (ptr, size, device_num)          &\n+     &      bind(c)\n+          use, intrinsic :: iso_c_binding, only : c_ptr, c_size_t, c_int\n+          integer(c_int) :: omp_target_is_accessible\n+          type(c_ptr), value :: ptr\n+          integer(c_size_t), value :: size\n+          integer(c_int), value :: device_num\n+        end function omp_target_is_accessible\n+      end interface"}, {"sha": "4d62efdf5267b3f38c8ea8c7abfd7c4f88388d62", "filename": "libgomp/target.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7", "patch": "@@ -3703,6 +3703,24 @@ omp_get_mapped_ptr (const void *ptr, int device_num)\n   return ret;\n }\n \n+int\n+omp_target_is_accessible (const void *ptr, size_t size, int device_num)\n+{\n+  if (device_num < 0 || device_num > gomp_get_num_devices ())\n+    return false;\n+\n+  if (device_num == gomp_get_num_devices ())\n+    return true;\n+\n+  struct gomp_device_descr *devicep = resolve_device (device_num);\n+  if (devicep == NULL)\n+    return false;\n+\n+  /* TODO: Unified shared memory must be handled when available.  */\n+\n+  return devicep->capabilities & GOMP_OFFLOAD_CAP_SHARED_MEM;\n+}\n+\n int\n omp_pause_resource (omp_pause_resource_t kind, int device_num)\n {"}, {"sha": "7c2cf622960e19d8737e05ae5fbd90a7656412b9", "filename": "libgomp/testsuite/libgomp.c-c++-common/target-is-accessible-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-is-accessible-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-is-accessible-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-is-accessible-1.c?ref=4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7", "patch": "@@ -0,0 +1,47 @@\n+#include <omp.h>\n+\n+int\n+main ()\n+{\n+  int d = omp_get_default_device ();\n+  int id = omp_get_initial_device ();\n+  int n = omp_get_num_devices ();\n+  void *p;\n+\n+  if (d < 0 || d >= n)\n+    d = id;\n+\n+  if (!omp_target_is_accessible (p, sizeof (int), n))\n+    __builtin_abort ();\n+\n+  if (!omp_target_is_accessible (p, sizeof (int), id))\n+    __builtin_abort ();\n+\n+  if (omp_target_is_accessible (p, sizeof (int), -1))\n+    __builtin_abort ();\n+\n+  if (omp_target_is_accessible (p, sizeof (int), n + 1))\n+    __builtin_abort ();\n+\n+  /* Currently, a host pointer is accessible if the device supports shared\n+     memory or omp_target_is_accessible is executed on the host. This\n+     test case must be adapted when unified shared memory is avialable.  */\n+  int a[128];\n+  for (int d = 0; d <= omp_get_num_devices (); d++)\n+    {\n+      int shared_mem = 0;\n+      #pragma omp target map (alloc: shared_mem) device (d)\n+\tshared_mem = 1;\n+      if (omp_target_is_accessible (p, sizeof (int), d) != shared_mem)\n+\t__builtin_abort ();\n+\n+      if (omp_target_is_accessible (a, 128 * sizeof (int), d) != shared_mem)\n+\t__builtin_abort ();\n+\n+      for (int i = 0; i < 128; i++)\n+\tif (omp_target_is_accessible (&a[i], sizeof (int), d) != shared_mem)\n+\t  __builtin_abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "26118553f2dbfcfaeb5dd26914d0c6d261f902dc", "filename": "libgomp/testsuite/libgomp.fortran/target-is-accessible-1.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-is-accessible-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-is-accessible-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-is-accessible-1.f90?ref=4043f53cb4a3541f7a6e4f4132419f78ab7ec4f7", "patch": "@@ -0,0 +1,50 @@\n+program main\n+  use omp_lib\n+  use iso_c_binding\n+  implicit none (external, type)\n+  integer :: d, id, n, shared_mem, i\n+  integer, target :: a(1:128)\n+  type(c_ptr) :: p\n+\n+  d = omp_get_default_device ()\n+  id = omp_get_initial_device ()\n+  n = omp_get_num_devices ()\n+\n+  if (d < 0 .or. d >= n) &\n+    d = id\n+\n+  if (omp_target_is_accessible (p, c_sizeof (d), n) /= 1) &\n+    stop 1\n+\n+  if (omp_target_is_accessible (p, c_sizeof (d), id) /= 1) &\n+    stop 2\n+\n+  if (omp_target_is_accessible (p, c_sizeof (d), -1) /= 0) &\n+    stop 3\n+\n+  if (omp_target_is_accessible (p, c_sizeof (d), n + 1) /= 0) &\n+    stop 4\n+\n+  ! Currently, a host pointer is accessible if the device supports shared\n+  ! memory or omp_target_is_accessible is executed on the host. This\n+  ! test case must be adapted when unified shared memory is avialable.\n+  do d = 0, omp_get_num_devices ()\n+    shared_mem = 0;\n+    !$omp target map (alloc: shared_mem) device (d)\n+      shared_mem = 1;\n+    !$omp end target\n+\n+    if (omp_target_is_accessible (p, c_sizeof (d), d) /= shared_mem) &\n+      stop 5;\n+\n+    if (omp_target_is_accessible (c_loc (a), 128 * sizeof (a(1)), d) /= shared_mem) &\n+      stop 6;\n+\n+    do i = 1, 128\n+      if (omp_target_is_accessible (c_loc (a(i)), sizeof (a(i)), d) /= shared_mem) &\n+        stop 7;\n+    end do\n+\n+  end do\n+\n+end program main"}]}