{"sha": "d7ad1e57f7f863ada2c7d51b79c9a83260c128a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdhZDFlNTdmN2Y4NjNhZGEyYzdkNTFiNzljOWE4MzI2MGMxMjhhNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-07-16T07:44:24Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-07-16T07:44:24Z"}, "message": "mips.c (cmp_operands): Renamed from branch_cmp.\n\n\t* config/mips/mips.c (cmp_operands): Renamed from branch_cmp.\n\t(branch_type): Delete.\n\t(gen_conditional_branch, gen_conditional_move)\n\t(mips_gen_conditional_trap): Update after name change.  Get the\n\tcomparison mode from cmp_operands[0].\n\t* config/mips/mips.h (cmp_type, branch_type): Delete.\n\t(cmp_operands): Renamed from branch_cmp.\n\t* config/mips/mips.md (cmpsi, cmpdi, cmpsf, cmpdf): Update after\n\tname change.  Don't set branch_type.\n\t(seq, sne, sgt, sge, slt, sle, sgtu, sgeu, sltu, sleu): Check the\n\tmode class of cmp_operands[0] rather than branch_type.  Update after\n\tname change.\n\nFrom-SVN: r84805", "tree": {"sha": "d0082bdd1b6bab05667ec562399c4cebc4014226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0082bdd1b6bab05667ec562399c4cebc4014226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7ad1e57f7f863ada2c7d51b79c9a83260c128a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ad1e57f7f863ada2c7d51b79c9a83260c128a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ad1e57f7f863ada2c7d51b79c9a83260c128a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ad1e57f7f863ada2c7d51b79c9a83260c128a5/comments", "author": null, "committer": null, "parents": [{"sha": "629198e2662378fe918e4b72e1c3d0ee901a54c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629198e2662378fe918e4b72e1c3d0ee901a54c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/629198e2662378fe918e4b72e1c3d0ee901a54c6"}], "stats": {"total": 149, "additions": 72, "deletions": 77}, "files": [{"sha": "a198d6d59380489592ba15626f36bad947e050dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ad1e57f7f863ada2c7d51b79c9a83260c128a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ad1e57f7f863ada2c7d51b79c9a83260c128a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7ad1e57f7f863ada2c7d51b79c9a83260c128a5", "patch": "@@ -1,3 +1,18 @@\n+2004-07-16  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.c (cmp_operands): Renamed from branch_cmp.\n+\t(branch_type): Delete.\n+\t(gen_conditional_branch, gen_conditional_move)\n+\t(mips_gen_conditional_trap): Update after name change.  Get the\n+\tcomparison mode from cmp_operands[0].\n+\t* config/mips/mips.h (cmp_type, branch_type): Delete.\n+\t(cmp_operands): Renamed from branch_cmp.\n+\t* config/mips/mips.md (cmpsi, cmpdi, cmpsf, cmpdf): Update after\n+\tname change.  Don't set branch_type.\n+\t(seq, sne, sgt, sge, slt, sle, sgtu, sgeu, sltu, sleu): Check the\n+\tmode class of cmp_operands[0] rather than branch_type.  Update after\n+\tname change.\n+\n 2004-07-16  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_rtx_costs): In mips16 code, set the cost"}, {"sha": "aed4d94d19c60c74ebff6a9e67ab874c4f347384", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 26, "deletions": 31, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ad1e57f7f863ada2c7d51b79c9a83260c128a5/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ad1e57f7f863ada2c7d51b79c9a83260c128a5/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d7ad1e57f7f863ada2c7d51b79c9a83260c128a5", "patch": "@@ -467,12 +467,8 @@ int set_volatile;\n /* The next branch instruction is a branch likely, not branch normal.  */\n int mips_branch_likely;\n \n-/* Cached operands, and operator to compare for use in set/branch/trap\n-   on condition codes.  */\n-rtx branch_cmp[2];\n-\n-/* what type of branch to use */\n-enum cmp_type branch_type;\n+/* The operands passed to the last cmpMM expander.  */\n+rtx cmp_operands[2];\n \n /* The target cpu for code generation.  */\n enum processor_type mips_arch;\n@@ -2974,20 +2970,19 @@ get_float_compare_codes (enum rtx_code in_code, enum rtx_code *cmp_code,\n void\n gen_conditional_branch (rtx *operands, enum rtx_code test_code)\n {\n-  enum cmp_type type = branch_type;\n-  rtx cmp0 = branch_cmp[0];\n-  rtx cmp1 = branch_cmp[1];\n+  rtx cmp0 = cmp_operands[0];\n+  rtx cmp1 = cmp_operands[1];\n   enum machine_mode mode;\n   enum rtx_code cmp_code;\n   rtx reg;\n   int invert;\n   rtx label1, label2;\n \n-  switch (type)\n+  switch (GET_MODE (cmp0))\n     {\n-    case CMP_SI:\n-    case CMP_DI:\n-      mode = type == CMP_SI ? SImode : DImode;\n+    case SImode:\n+    case DImode:\n+      mode = GET_MODE (cmp0);\n       invert = 0;\n       reg = gen_int_relational (test_code, NULL_RTX, cmp0, cmp1, &invert);\n \n@@ -3004,8 +2999,8 @@ gen_conditional_branch (rtx *operands, enum rtx_code test_code)\n \n       break;\n \n-    case CMP_SF:\n-    case CMP_DF:\n+    case SFmode:\n+    case DFmode:\n       if (! ISA_HAS_8CC)\n \treg = gen_rtx_REG (CCmode, FPSW_REGNUM);\n       else\n@@ -3051,9 +3046,9 @@ gen_conditional_branch (rtx *operands, enum rtx_code test_code)\n void\n gen_conditional_move (rtx *operands)\n {\n-  rtx op0 = branch_cmp[0];\n-  rtx op1 = branch_cmp[1];\n-  enum machine_mode mode = GET_MODE (branch_cmp[0]);\n+  rtx op0 = cmp_operands[0];\n+  rtx op1 = cmp_operands[1];\n+  enum machine_mode mode = GET_MODE (cmp_operands[0]);\n   enum rtx_code cmp_code = GET_CODE (operands[1]);\n   enum rtx_code move_code = NE;\n   enum machine_mode op_mode = GET_MODE (operands[0]);\n@@ -3079,13 +3074,13 @@ gen_conditional_move (rtx *operands)\n \t  break;\n \tcase GT:\n \t  cmp_code = LT;\n-\t  op0 = force_reg (mode, branch_cmp[1]);\n-\t  op1 = branch_cmp[0];\n+\t  op0 = force_reg (mode, cmp_operands[1]);\n+\t  op1 = cmp_operands[0];\n \t  break;\n \tcase LE:\n \t  cmp_code = LT;\n-\t  op0 = force_reg (mode, branch_cmp[1]);\n-\t  op1 = branch_cmp[0];\n+\t  op0 = force_reg (mode, cmp_operands[1]);\n+\t  op1 = cmp_operands[0];\n \t  move_code = EQ;\n \t  break;\n \tcase LTU:\n@@ -3096,13 +3091,13 @@ gen_conditional_move (rtx *operands)\n \t  break;\n \tcase GTU:\n \t  cmp_code = LTU;\n-\t  op0 = force_reg (mode, branch_cmp[1]);\n-\t  op1 = branch_cmp[0];\n+\t  op0 = force_reg (mode, cmp_operands[1]);\n+\t  op1 = cmp_operands[0];\n \t  break;\n \tcase LEU:\n \t  cmp_code = LTU;\n-\t  op0 = force_reg (mode, branch_cmp[1]);\n-\t  op1 = branch_cmp[0];\n+\t  op0 = force_reg (mode, cmp_operands[1]);\n+\t  op1 = cmp_operands[0];\n \t  move_code = EQ;\n \t  break;\n \tdefault:\n@@ -3140,7 +3135,7 @@ mips_gen_conditional_trap (rtx *operands)\n {\n   rtx op0, op1;\n   enum rtx_code cmp_code = GET_CODE (operands[0]);\n-  enum machine_mode mode = GET_MODE (branch_cmp[0]);\n+  enum machine_mode mode = GET_MODE (cmp_operands[0]);\n \n   /* MIPS conditional trap machine instructions don't have GT or LE\n      flavors, so we must invert the comparison and convert to LT and\n@@ -3155,13 +3150,13 @@ mips_gen_conditional_trap (rtx *operands)\n     }\n   if (cmp_code == GET_CODE (operands[0]))\n     {\n-      op0 = force_reg (mode, branch_cmp[0]);\n-      op1 = branch_cmp[1];\n+      op0 = force_reg (mode, cmp_operands[0]);\n+      op1 = cmp_operands[1];\n     }\n   else\n     {\n-      op0 = force_reg (mode, branch_cmp[1]);\n-      op1 = branch_cmp[0];\n+      op0 = force_reg (mode, cmp_operands[1]);\n+      op1 = cmp_operands[0];\n     }\n   if (GET_CODE (op1) == CONST_INT && ! SMALL_INT (op1))\n     op1 = force_reg (mode, op1);"}, {"sha": "562374ae5297ac8eab674354355afcc54365d984", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ad1e57f7f863ada2c7d51b79c9a83260c128a5/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ad1e57f7f863ada2c7d51b79c9a83260c128a5/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=d7ad1e57f7f863ada2c7d51b79c9a83260c128a5", "patch": "@@ -30,15 +30,6 @@ extern int\ttarget_flags;\n \n /* MIPS external variables defined in mips.c.  */\n \n-/* comparison type */\n-enum cmp_type {\n-  CMP_SI,\t\t\t\t/* compare four byte integers */\n-  CMP_DI,\t\t\t\t/* compare eight byte integers */\n-  CMP_SF,\t\t\t\t/* compare single precision floats */\n-  CMP_DF,\t\t\t\t/* compare double precision floats */\n-  CMP_MAX\t\t\t\t/* max comparison type */\n-};\n-\n /* Which processor to schedule for.  Since there is no difference between\n    a R2000 and R3000 in terms of the scheduler, we collapse them into\n    just an R3000.  The elements of the enumeration must match exactly\n@@ -109,8 +100,7 @@ extern int set_noat;\t\t\t/* # of nested .set noat's  */\n extern int set_volatile;\t\t/* # of nested .set volatile's  */\n extern int mips_branch_likely;\t\t/* emit 'l' after br (branch likely) */\n extern int mips_dbx_regno[];\t\t/* Map register # to debug register # */\n-extern GTY(()) rtx branch_cmp[2];\t/* operands for compare */\n-extern enum cmp_type branch_type;\t/* what type of branch to use */\n+extern GTY(()) rtx cmp_operands[2];\n extern enum processor_type mips_arch;   /* which cpu to codegen for */\n extern enum processor_type mips_tune;   /* which cpu to schedule for */\n extern int mips_isa;\t\t\t/* architectural level */"}, {"sha": "1bfae44aab6acb3f4972ab3837bb73af90ae511a", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 30, "deletions": 35, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ad1e57f7f863ada2c7d51b79c9a83260c128a5/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ad1e57f7f863ada2c7d51b79c9a83260c128a5/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=d7ad1e57f7f863ada2c7d51b79c9a83260c128a5", "patch": "@@ -5456,9 +5456,8 @@ dsrl\\t%3,%3,1\\n\\\n \n ;; Flow here is rather complex:\n ;;\n-;;  1)\tThe cmp{si,di,sf,df} routine is called.  It deposits the\n-;;\targuments into the branch_cmp array, and the type into\n-;;\tbranch_type.  No RTL is generated.\n+;;  1)\tThe cmp{si,di,sf,df} routine is called.  It deposits the arguments\n+;;\tinto cmp_operands[] but generates no RTL.\n ;;\n ;;  2)\tThe appropriate branch define_expand is called, which then\n ;;\tcreates the appropriate RTL for the comparison and branch.\n@@ -5476,9 +5475,8 @@ dsrl\\t%3,%3,1\\n\\\n \t\t    (match_operand:SI 1 \"arith_operand\")))]\n   \"\"\n {\n-  branch_cmp[0] = operands[0];\n-  branch_cmp[1] = operands[1];\n-  branch_type = CMP_SI;\n+  cmp_operands[0] = operands[0];\n+  cmp_operands[1] = operands[1];\n   DONE;\n })\n \n@@ -5488,9 +5486,8 @@ dsrl\\t%3,%3,1\\n\\\n \t\t    (match_operand:DI 1 \"arith_operand\")))]\n   \"TARGET_64BIT\"\n {\n-  branch_cmp[0] = operands[0];\n-  branch_cmp[1] = operands[1];\n-  branch_type = CMP_DI;\n+  cmp_operands[0] = operands[0];\n+  cmp_operands[1] = operands[1];\n   DONE;\n })\n \n@@ -5500,9 +5497,8 @@ dsrl\\t%3,%3,1\\n\\\n \t\t    (match_operand:DF 1 \"register_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n {\n-  branch_cmp[0] = operands[0];\n-  branch_cmp[1] = operands[1];\n-  branch_type = CMP_DF;\n+  cmp_operands[0] = operands[0];\n+  cmp_operands[1] = operands[1];\n   DONE;\n })\n \n@@ -5512,9 +5508,8 @@ dsrl\\t%3,%3,1\\n\\\n \t\t    (match_operand:SF 1 \"register_operand\")))]\n   \"TARGET_HARD_FLOAT\"\n {\n-  branch_cmp[0] = operands[0];\n-  branch_cmp[1] = operands[1];\n-  branch_type = CMP_SF;\n+  cmp_operands[0] = operands[0];\n+  cmp_operands[1] = operands[1];\n   DONE;\n })\n \f\n@@ -6018,10 +6013,10 @@ dsrl\\t%3,%3,1\\n\\\n \t       (match_dup 2)))]\n   \"\"\n {\n-  if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n+  if (GET_MODE_CLASS (GET_MODE (cmp_operands[0])) != MODE_INT)\n     FAIL;\n \n-  gen_int_relational (EQ, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  gen_int_relational (EQ, operands[0], cmp_operands[0], cmp_operands[1], NULL);\n   DONE;\n })\n \n@@ -6070,10 +6065,10 @@ dsrl\\t%3,%3,1\\n\\\n \t       (match_dup 2)))]\n   \"!TARGET_MIPS16\"\n {\n-  if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n+  if (GET_MODE_CLASS (GET_MODE (cmp_operands[0])) != MODE_INT)\n     FAIL;\n \n-  gen_int_relational (NE, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  gen_int_relational (NE, operands[0], cmp_operands[0], cmp_operands[1], NULL);\n   DONE;\n })\n \n@@ -6101,10 +6096,10 @@ dsrl\\t%3,%3,1\\n\\\n \t       (match_dup 2)))]\n   \"\"\n {\n-  if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n+  if (GET_MODE_CLASS (GET_MODE (cmp_operands[0])) != MODE_INT)\n     FAIL;\n \n-  gen_int_relational (GT, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  gen_int_relational (GT, operands[0], cmp_operands[0], cmp_operands[1], NULL);\n   DONE;\n })\n \n@@ -6150,10 +6145,10 @@ dsrl\\t%3,%3,1\\n\\\n \t       (match_dup 2)))]\n   \"\"\n {\n-  if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n+  if (GET_MODE_CLASS (GET_MODE (cmp_operands[0])) != MODE_INT)\n     FAIL;\n \n-  gen_int_relational (GE, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  gen_int_relational (GE, operands[0], cmp_operands[0], cmp_operands[1], NULL);\n   DONE;\n })\n \n@@ -6163,10 +6158,10 @@ dsrl\\t%3,%3,1\\n\\\n \t       (match_dup 2)))]\n   \"\"\n {\n-  if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n+  if (GET_MODE_CLASS (GET_MODE (cmp_operands[0])) != MODE_INT)\n     FAIL;\n \n-  gen_int_relational (LT, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  gen_int_relational (LT, operands[0], cmp_operands[0], cmp_operands[1], NULL);\n   DONE;\n })\n \n@@ -6222,10 +6217,10 @@ dsrl\\t%3,%3,1\\n\\\n \t       (match_dup 2)))]\n   \"\"\n {\n-  if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n+  if (GET_MODE_CLASS (GET_MODE (cmp_operands[0])) != MODE_INT)\n     FAIL;\n \n-  gen_int_relational (LE, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  gen_int_relational (LE, operands[0], cmp_operands[0], cmp_operands[1], NULL);\n   DONE;\n })\n \n@@ -6289,10 +6284,10 @@ dsrl\\t%3,%3,1\\n\\\n \t\t(match_dup 2)))]\n   \"\"\n {\n-  if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n+  if (GET_MODE_CLASS (GET_MODE (cmp_operands[0])) != MODE_INT)\n     FAIL;\n \n-  gen_int_relational (GTU, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  gen_int_relational (GTU, operands[0], cmp_operands[0], cmp_operands[1], NULL);\n   DONE;\n })\n \n@@ -6338,10 +6333,10 @@ dsrl\\t%3,%3,1\\n\\\n                 (match_dup 2)))]\n   \"\"\n {\n-  if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n+  if (GET_MODE_CLASS (GET_MODE (cmp_operands[0])) != MODE_INT)\n     FAIL;\n \n-  gen_int_relational (GEU, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  gen_int_relational (GEU, operands[0], cmp_operands[0], cmp_operands[1], NULL);\n   DONE;\n })\n \n@@ -6351,10 +6346,10 @@ dsrl\\t%3,%3,1\\n\\\n \t\t(match_dup 2)))]\n   \"\"\n {\n-  if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n+  if (GET_MODE_CLASS (GET_MODE (cmp_operands[0])) != MODE_INT)\n     FAIL;\n \n-  gen_int_relational (LTU, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  gen_int_relational (LTU, operands[0], cmp_operands[0], cmp_operands[1], NULL);\n   DONE;\n })\n \n@@ -6410,10 +6405,10 @@ dsrl\\t%3,%3,1\\n\\\n \t\t(match_dup 2)))]\n   \"\"\n {\n-  if (branch_type != CMP_SI && (!TARGET_64BIT || branch_type != CMP_DI))\n+  if (GET_MODE_CLASS (GET_MODE (cmp_operands[0])) != MODE_INT)\n     FAIL;\n \n-  gen_int_relational (LEU, operands[0], branch_cmp[0], branch_cmp[1], NULL);\n+  gen_int_relational (LEU, operands[0], cmp_operands[0], cmp_operands[1], NULL);\n   DONE;\n })\n "}]}