{"sha": "d195b46f39f9244d2b341fcc13e61a4e6040d104", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE5NWI0NmYzOWY5MjQ0ZDJiMzQxZmNjMTNlNjFhNGU2MDQwZDEwNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-08-13T14:32:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-08-13T14:32:06Z"}, "message": "predict.c (dump_prediction): New argument \"USED\".\n\n\t* predict.c (dump_prediction): New argument \"USED\".\n\t(combine_predictions_for_insn): Determine the used heuristics,\n\toutput the case no heuristic applied.\n\t* predict.def (PRED_DS_THEORY, PRED_NO_HEURISTIC): New.\n\nFrom-SVN: r44853", "tree": {"sha": "e59eac6e05b87df267c8abeecdbcfcb5365cb8a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e59eac6e05b87df267c8abeecdbcfcb5365cb8a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d195b46f39f9244d2b341fcc13e61a4e6040d104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d195b46f39f9244d2b341fcc13e61a4e6040d104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d195b46f39f9244d2b341fcc13e61a4e6040d104", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d195b46f39f9244d2b341fcc13e61a4e6040d104/comments", "author": null, "committer": null, "parents": [{"sha": "a60af04ac842393f7197d59cdddf6a128818d563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a60af04ac842393f7197d59cdddf6a128818d563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a60af04ac842393f7197d59cdddf6a128818d563"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "bdb2afc6d2446f9e3c6ed745d69f7350d2559457", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d195b46f39f9244d2b341fcc13e61a4e6040d104/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d195b46f39f9244d2b341fcc13e61a4e6040d104/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d195b46f39f9244d2b341fcc13e61a4e6040d104", "patch": "@@ -1,3 +1,10 @@\n+Mon Aug 13 02:27:39 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* predict.c (dump_prediction): New argument \"USED\".\n+\t(combine_predictions_for_insn): Determine the used heuristics,\n+\toutput the case no heuristic applied.\n+\t* predict.def (PRED_DS_THEORY, PRED_NO_HEURISTIC): New.\n+\n 2001-08-13  Andreas Jaeger  <aj@suse.de>\n \n \t* config/i386/unix.h (ASM_OUTPUT_MI_THUNK): Don't capitalize"}, {"sha": "06829ddb5542fae6da74f99392bccd050d64ea30", "filename": "gcc/predict.c", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d195b46f39f9244d2b341fcc13e61a4e6040d104/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d195b46f39f9244d2b341fcc13e61a4e6040d104/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=d195b46f39f9244d2b341fcc13e61a4e6040d104", "patch": "@@ -59,7 +59,7 @@\n \n static void combine_predictions_for_insn PARAMS ((rtx, basic_block));\n static void dump_prediction\t\t PARAMS ((enum br_predictor, int,\n-\t\t\t\t\t\t  basic_block));\n+\t\t\t\t\t\t  basic_block, bool));\n static void estimate_loops_at_level\t PARAMS ((struct loop *loop));\n static void propagate_freq\t\t PARAMS ((basic_block));\n static void estimate_bb_frequencies\t PARAMS ((struct loops *));\n@@ -178,10 +178,11 @@ invert_br_probabilities (insn)\n \n /* Dump information about the branch prediction to the output file.  */\n static void\n-dump_prediction (predictor, probability, bb)\n+dump_prediction (predictor, probability, bb, used)\n      enum br_predictor predictor;\n      int probability;\n      basic_block bb;\n+     bool used;\n {\n   edge e = bb->succ;\n \n@@ -191,8 +192,9 @@ dump_prediction (predictor, probability, bb)\n   while (e->flags & EDGE_FALLTHRU)\n     e = e->succ_next;\n \n-  fprintf (rtl_dump_file, \"  %s heuristics: %.1f%%\",\n+  fprintf (rtl_dump_file, \"  %s heuristics%s: %.1f%%\",\n \t   predictor_info[predictor].name,\n+\t   used ? \"\" : \" (ignored)\",\n \t   probability * 100.0 / REG_BR_PROB_BASE);\n \n   if (bb->count)\n@@ -218,10 +220,13 @@ combine_predictions_for_insn (insn, bb)\n {\n   rtx prob_note = find_reg_note (insn, REG_BR_PROB, 0);\n   rtx *pnote = &REG_NOTES (insn);\n+  rtx note = REG_NOTES (insn);\n   int best_probability = PROB_EVEN;\n   int best_predictor = END_PREDICTORS;\n   int combined_probability = REG_BR_PROB_BASE / 2;\n   int d;\n+  bool first_match = false;\n+  bool found = false;\n \n   if (rtl_dump_file)\n     fprintf (rtl_dump_file, \"Predictions for insn %i bb %i\\n\", INSN_UID (insn),\n@@ -230,17 +235,16 @@ combine_predictions_for_insn (insn, bb)\n   /* We implement \"first match\" heuristics and use probability guessed\n      by predictor with smallest index.  In the future we will use better\n      probability combination techniques.  */\n-  while (*pnote)\n+  while (note)\n     {\n-      if (REG_NOTE_KIND (*pnote) == REG_BR_PRED)\n+      if (REG_NOTE_KIND (note) == REG_BR_PRED)\n \t{\n-\t  int predictor = INTVAL (XEXP (XEXP (*pnote, 0), 0));\n-\t  int probability = INTVAL (XEXP (XEXP (*pnote, 0), 1));\n+\t  int predictor = INTVAL (XEXP (XEXP (note, 0), 0));\n+\t  int probability = INTVAL (XEXP (XEXP (note, 0), 1));\n \n-\t  dump_prediction (predictor, probability, bb);\n+\t  found = true;\n \t  if (best_predictor > predictor)\n \t    best_probability = probability, best_predictor = predictor;\n-\t  *pnote = XEXP (*pnote, 1);\n \n \t  d = (combined_probability * probability\n \t       + (REG_BR_PROB_BASE - combined_probability)\n@@ -249,13 +253,43 @@ combine_predictions_for_insn (insn, bb)\n \t  combined_probability = (((double)combined_probability) * probability\n \t\t\t\t  * REG_BR_PROB_BASE / d + 0.5);\n \t}\n-      else\n-        pnote = &XEXP (*pnote, 1);\n+      note = XEXP (note, 1);\n     }\n+\n+  /* Decide heuristic to use.  In case we didn't match anything, use\n+     no_prediction heuristic, in case we did match, use either\n+     first match or Dempster-Shaffer theory depending on the flags.  */\n+\n   if (predictor_info [best_predictor].flags & PRED_FLAG_FIRST_MATCH)\n+    first_match = true;\n+\n+  if (!found)\n+    dump_prediction (PRED_NO_PREDICTION, combined_probability, bb, true);\n+  else\n+    {\n+      dump_prediction (PRED_DS_THEORY, combined_probability, bb,\n+\t\t       !first_match);\n+      dump_prediction (PRED_FIRST_MATCH, best_probability, bb, first_match);\n+    }\n+\n+  if (first_match)\n     combined_probability = best_probability;\n-  dump_prediction (PRED_FIRST_MATCH, best_probability, bb);\n-  dump_prediction (PRED_COMBINED, combined_probability, bb);\n+  dump_prediction (PRED_COMBINED, combined_probability, bb, true);\n+\n+  while (*pnote)\n+    {\n+      if (REG_NOTE_KIND (*pnote) == REG_BR_PRED)\n+\t{\n+\t  int predictor = INTVAL (XEXP (XEXP (*pnote, 0), 0));\n+\t  int probability = INTVAL (XEXP (XEXP (*pnote, 0), 1));\n+\n+\t  dump_prediction (predictor, probability, bb,\n+\t\t\t   !first_match || best_predictor == predictor);\n+          *pnote = XEXP (*pnote, 1);\n+\t}\n+      else\n+        pnote = &XEXP (*pnote, 1);\n+    }\n   if (!prob_note)\n     {\n       REG_NOTES (insn)"}, {"sha": "a4f7afb05d57a149404524305e1b78c3e93947e3", "filename": "gcc/predict.def", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d195b46f39f9244d2b341fcc13e61a4e6040d104/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d195b46f39f9244d2b341fcc13e61a4e6040d104/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=d195b46f39f9244d2b341fcc13e61a4e6040d104", "patch": "@@ -36,13 +36,19 @@ Boston, MA 02111-1307, USA.  */\n    REG_BR_PROB_BASE / 2).  */\n    \n \n-/* An combined heuristics using Dempster-Shaffer theory.  */\n+/* A value used as final outcome of all heuristics.  */\n DEF_PREDICTOR (PRED_COMBINED, \"combined\", PROB_ALWAYS, 0)\n \n+/* An outcome estimated by Dempster-Shaffer theory.  */\n+DEF_PREDICTOR (PRED_DS_THEORY, \"DS theory\", PROB_ALWAYS, 0)\n+\n /* An combined heuristics using probability determined by first\n    matching heuristics from this list.  */\n DEF_PREDICTOR (PRED_FIRST_MATCH, \"first match\", PROB_ALWAYS, 0)\n \n+/* Heuristic applying when no heuristic bellow applies.  */\n+DEF_PREDICTOR (PRED_NO_PREDICTION, \"no prediction\", PROB_ALWAYS, 0)\n+\n /* Mark unconditional jump as taken.  */\n DEF_PREDICTOR (PRED_UNCONDITIONAL, \"unconditional jump\", PROB_ALWAYS,\n \t       PRED_FLAG_FIRST_MATCH)"}]}