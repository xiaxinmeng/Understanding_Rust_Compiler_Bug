{"sha": "0b2a73678bb58b1c91ae7ee93e3ddfff1830baf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIyYTczNjc4YmI1OGIxYzkxYWU3ZWU5M2UzZGRmZmYxODMwYmFmOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-03-25T00:52:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-03-25T00:52:34Z"}, "message": "alpha: Remove all big-endian code.\n\nFrom-SVN: r171438", "tree": {"sha": "63d335f5708311f29e9ef813e9660ed7cdd206b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63d335f5708311f29e9ef813e9660ed7cdd206b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b2a73678bb58b1c91ae7ee93e3ddfff1830baf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b2a73678bb58b1c91ae7ee93e3ddfff1830baf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b2a73678bb58b1c91ae7ee93e3ddfff1830baf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b2a73678bb58b1c91ae7ee93e3ddfff1830baf8/comments", "author": null, "committer": null, "parents": [{"sha": "315b2bef11f2ee53ccb209763bdcfce87b9eb43c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315b2bef11f2ee53ccb209763bdcfce87b9eb43c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/315b2bef11f2ee53ccb209763bdcfce87b9eb43c"}], "stats": {"total": 996, "additions": 184, "deletions": 812}, "files": [{"sha": "26187881b26c9de9faf5e612e9ac5446b15012fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2a73678bb58b1c91ae7ee93e3ddfff1830baf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2a73678bb58b1c91ae7ee93e3ddfff1830baf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b2a73678bb58b1c91ae7ee93e3ddfff1830baf8", "patch": "@@ -1,3 +1,27 @@\n+2011-02-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (get_aligned_mem): Don't test WORDS_BIG_ENDIAN.\n+\t(alpha_expand_unaligned_load): Likewise.\n+\t(alpha_expand_unaligned_store): Likewise.\n+\t(alpha_expand_unaligned_load_words): Likewise.\n+\t(alpha_expand_unaligned_store_words): Likewise.\n+\t(emit_insxl, alpha_split_compare_and_swap_12): Likewise.\n+\t(alpha_split_lock_test_and_set_12): Likewise.\n+\t(print_operand, alpha_fold_builtin_extxx): Likewise.\n+\t(alpha_fold_builtin_insxx, alpha_fold_builtin_mskxx): Likewise.\n+\t* config/alpha/alpha.md (bswapsi2, insv, extv, extzv): Likewise.\n+\t(builtin_extwh, builtin_extlh, builtin_extql): Likewise.\n+\t(unaligned_extendqidi_be, unaligned_extendhidi_be, extxl_be): Remove.\n+\t(*extxl_1_be, *extql_2_be, extqh_be, extlh_be, extwh_be): Remove.\n+\t(insbl_be, inswl_be, insll_be, insql_be, mskxl_be): Remove.\n+\t(unaligned_loadqi_be, unaligned_loadhi_be): Remove.\n+\t(unaligned_storeqi_be, unaligned_storehi_be): Remove.\n+\t(extbl): Rename from builtin_extbl; don't test WORDS_BIG_ENDIAN.\n+\t(extwl, extll, extql): Similarly.\n+\t(inswh, inslh, insqh): Similarly.\n+\t(mskbl, mskwl, mskll, mskql): Similarly.\n+\t(mskwh, msklh, mskqh): Similarly.\n+\n 2011-02-24  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.md (attribute isa): Add er, ner."}, {"sha": "4885be6227e3ecaa87a71f48bb471b9c8a8cb23b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 92, "deletions": 255, "changes": 347, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2a73678bb58b1c91ae7ee93e3ddfff1830baf8/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2a73678bb58b1c91ae7ee93e3ddfff1830baf8/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=0b2a73678bb58b1c91ae7ee93e3ddfff1830baf8", "patch": "@@ -1453,10 +1453,7 @@ get_aligned_mem (rtx ref, rtx *paligned_mem, rtx *pbitnum)\n   *paligned_mem = widen_memory_access (ref, SImode, -offset);\n \n   /* Convert the byte offset within the word to a bit offset.  */\n-  if (WORDS_BIG_ENDIAN)\n-    offset = 32 - (GET_MODE_BITSIZE (GET_MODE (ref)) + offset * 8);\n-  else\n-    offset *= 8;\n+  offset *= BITS_PER_UNIT;\n   *pbitnum = GEN_INT (offset);\n }\n \n@@ -3295,8 +3292,6 @@ alpha_expand_unaligned_load (rtx tgt, rtx mem, HOST_WIDE_INT size,\n     {\n       meml = adjust_address (mem, QImode, ofs);\n       memh = adjust_address (mem, QImode, ofs+1);\n-      if (BYTES_BIG_ENDIAN)\n-\ttmp = meml, meml = memh, memh = tmp;\n       extl = gen_reg_rtx (DImode);\n       exth = gen_reg_rtx (DImode);\n       emit_insn (gen_zero_extendqidi2 (extl, meml));\n@@ -3348,23 +3343,12 @@ alpha_expand_unaligned_load (rtx tgt, rtx mem, HOST_WIDE_INT size,\n   set_mem_alias_set (tmp, 0);\n   emit_move_insn (memh, tmp);\n \n-  if (WORDS_BIG_ENDIAN && sign && (size == 2 || size == 4))\n-    {\n-      emit_move_insn (addr, plus_constant (mema, -1));\n-\n-      emit_insn (gen_extqh_be (extl, meml, addr));\n-      emit_insn (gen_extxl_be (exth, memh, GEN_INT (64), addr));\n-\n-      addr = expand_binop (DImode, ior_optab, extl, exth, tgt, 1, OPTAB_WIDEN);\n-      addr = expand_binop (DImode, ashr_optab, addr, GEN_INT (64 - size*8),\n-\t\t\t   addr, 1, OPTAB_WIDEN);\n-    }\n-  else if (sign && size == 2)\n+  if (sign && size == 2)\n     {\n       emit_move_insn (addr, plus_constant (mema, ofs+2));\n \n-      emit_insn (gen_extxl_le (extl, meml, GEN_INT (64), addr));\n-      emit_insn (gen_extqh_le (exth, memh, addr));\n+      emit_insn (gen_extxl (extl, meml, GEN_INT (64), addr));\n+      emit_insn (gen_extqh (exth, memh, addr));\n \n       /* We must use tgt here for the target.  Alpha-vms port fails if we use\n \t addr for the target, because addr is marked as a pointer and combine\n@@ -3375,55 +3359,27 @@ alpha_expand_unaligned_load (rtx tgt, rtx mem, HOST_WIDE_INT size,\n     }\n   else\n     {\n-      if (WORDS_BIG_ENDIAN)\n-\t{\n-\t  emit_move_insn (addr, plus_constant (mema, ofs+size-1));\n-\t  switch ((int) size)\n-\t    {\n-\t    case 2:\n-\t      emit_insn (gen_extwh_be (extl, meml, addr));\n-\t      mode = HImode;\n-\t      break;\n-\n-\t    case 4:\n-\t      emit_insn (gen_extlh_be (extl, meml, addr));\n-\t      mode = SImode;\n-\t      break;\n-\n-\t    case 8:\n-\t      emit_insn (gen_extqh_be (extl, meml, addr));\n-\t      mode = DImode;\n-\t      break;\n-\n-\t    default:\n-\t      gcc_unreachable ();\n-\t    }\n-\t  emit_insn (gen_extxl_be (exth, memh, GEN_INT (size*8), addr));\n-\t}\n-      else\n+      emit_move_insn (addr, plus_constant (mema, ofs));\n+      emit_insn (gen_extxl (extl, meml, GEN_INT (size*8), addr));\n+      switch ((int) size)\n \t{\n-\t  emit_move_insn (addr, plus_constant (mema, ofs));\n-\t  emit_insn (gen_extxl_le (extl, meml, GEN_INT (size*8), addr));\n-\t  switch ((int) size)\n-\t    {\n-\t    case 2:\n-\t      emit_insn (gen_extwh_le (exth, memh, addr));\n-\t      mode = HImode;\n-\t      break;\n+\tcase 2:\n+\t  emit_insn (gen_extwh (exth, memh, addr));\n+\t  mode = HImode;\n+\t  break;\n \n-\t    case 4:\n-\t      emit_insn (gen_extlh_le (exth, memh, addr));\n-\t      mode = SImode;\n-\t      break;\n+\tcase 4:\n+\t  emit_insn (gen_extlh (exth, memh, addr));\n+\t  mode = SImode;\n+\t  break;\n \n-\t    case 8:\n-\t      emit_insn (gen_extqh_le (exth, memh, addr));\n-\t      mode = DImode;\n-\t      break;\n+\tcase 8:\n+\t  emit_insn (gen_extqh (exth, memh, addr));\n+\t  mode = DImode;\n+\t  break;\n \n-\t    default:\n-\t      gcc_unreachable ();\n-\t    }\n+\tdefault:\n+\t  gcc_unreachable ();\n \t}\n \n       addr = expand_binop (mode, ior_optab, gen_lowpart (mode, extl),\n@@ -3457,8 +3413,6 @@ alpha_expand_unaligned_store (rtx dst, rtx src,\n \n       meml = adjust_address (dst, QImode, ofs);\n       memh = adjust_address (dst, QImode, ofs+1);\n-      if (BYTES_BIG_ENDIAN)\n-\taddr = meml, meml = memh, memh = addr;\n \n       emit_move_insn (meml, dstl);\n       emit_move_insn (memh, dsth);\n@@ -3492,86 +3446,48 @@ alpha_expand_unaligned_store (rtx dst, rtx src,\n \n   emit_move_insn (dsth, memh);\n   emit_move_insn (dstl, meml);\n-  if (WORDS_BIG_ENDIAN)\n-    {\n-      addr = copy_addr_to_reg (plus_constant (dsta, ofs+size-1));\n \n-      if (src != const0_rtx)\n-\t{\n-\t  switch ((int) size)\n-\t    {\n-\t    case 2:\n-\t      emit_insn (gen_inswl_be (insh, gen_lowpart (HImode,src), addr));\n-\t      break;\n-\t    case 4:\n-\t      emit_insn (gen_insll_be (insh, gen_lowpart (SImode,src), addr));\n-\t      break;\n-\t    case 8:\n-\t      emit_insn (gen_insql_be (insh, gen_lowpart (DImode,src), addr));\n-\t      break;\n-\t    }\n-\t  emit_insn (gen_insxh (insl, gen_lowpart (DImode, src),\n-\t\t\t\tGEN_INT (size*8), addr));\n-\t}\n+  addr = copy_addr_to_reg (plus_constant (dsta, ofs));\n+\n+  if (src != CONST0_RTX (GET_MODE (src)))\n+    {\n+      emit_insn (gen_insxh (insh, gen_lowpart (DImode, src),\n+\t\t\t    GEN_INT (size*8), addr));\n \n       switch ((int) size)\n \t{\n \tcase 2:\n-\t  emit_insn (gen_mskxl_be (dsth, dsth, GEN_INT (0xffff), addr));\n+\t  emit_insn (gen_inswl (insl, gen_lowpart (HImode, src), addr));\n \t  break;\n \tcase 4:\n-\t  {\n-\t    rtx msk = immed_double_const (0xffffffff, 0, DImode);\n-\t    emit_insn (gen_mskxl_be (dsth, dsth, msk, addr));\n-\t    break;\n-\t  }\n+\t  emit_insn (gen_insll (insl, gen_lowpart (SImode, src), addr));\n+\t  break;\n \tcase 8:\n-\t  emit_insn (gen_mskxl_be (dsth, dsth, constm1_rtx, addr));\n+\t  emit_insn (gen_insql (insl, gen_lowpart (DImode, src), addr));\n \t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n \t}\n-\n-      emit_insn (gen_mskxh (dstl, dstl, GEN_INT (size*8), addr));\n     }\n-  else\n-    {\n-      addr = copy_addr_to_reg (plus_constant (dsta, ofs));\n-\n-      if (src != CONST0_RTX (GET_MODE (src)))\n-\t{\n-\t  emit_insn (gen_insxh (insh, gen_lowpart (DImode, src),\n-\t\t\t\tGEN_INT (size*8), addr));\n-\n-\t  switch ((int) size)\n-\t    {\n-\t    case 2:\n-\t      emit_insn (gen_inswl_le (insl, gen_lowpart (HImode, src), addr));\n-\t      break;\n-\t    case 4:\n-\t      emit_insn (gen_insll_le (insl, gen_lowpart (SImode, src), addr));\n-\t      break;\n-\t    case 8:\n-\t      emit_insn (gen_insql_le (insl, gen_lowpart (DImode, src), addr));\n-\t      break;\n-\t    }\n-\t}\n \n-      emit_insn (gen_mskxh (dsth, dsth, GEN_INT (size*8), addr));\n+  emit_insn (gen_mskxh (dsth, dsth, GEN_INT (size*8), addr));\n \n-      switch ((int) size)\n-\t{\n-\tcase 2:\n-\t  emit_insn (gen_mskxl_le (dstl, dstl, GEN_INT (0xffff), addr));\n-\t  break;\n-\tcase 4:\n-\t  {\n-\t    rtx msk = immed_double_const (0xffffffff, 0, DImode);\n-\t    emit_insn (gen_mskxl_le (dstl, dstl, msk, addr));\n-\t    break;\n-\t  }\n-\tcase 8:\n-\t  emit_insn (gen_mskxl_le (dstl, dstl, constm1_rtx, addr));\n-\t  break;\n-\t}\n+  switch ((int) size)\n+    {\n+    case 2:\n+      emit_insn (gen_mskxl (dstl, dstl, GEN_INT (0xffff), addr));\n+      break;\n+    case 4:\n+      {\n+\trtx msk = immed_double_const (0xffffffff, 0, DImode);\n+\temit_insn (gen_mskxl (dstl, dstl, msk, addr));\n+\tbreak;\n+      }\n+    case 8:\n+      emit_insn (gen_mskxl (dstl, dstl, constm1_rtx, addr));\n+      break;\n+    default:\n+      gcc_unreachable ();\n     }\n \n   if (src != CONST0_RTX (GET_MODE (src)))\n@@ -3580,17 +3496,9 @@ alpha_expand_unaligned_store (rtx dst, rtx src,\n       dstl = expand_binop (DImode, ior_optab, insl, dstl, dstl, 0, OPTAB_WIDEN);\n     }\n \n-  if (WORDS_BIG_ENDIAN)\n-    {\n-      emit_move_insn (meml, dstl);\n-      emit_move_insn (memh, dsth);\n-    }\n-  else\n-    {\n-      /* Must store high before low for degenerate case of aligned.  */\n-      emit_move_insn (memh, dsth);\n-      emit_move_insn (meml, dstl);\n-    }\n+  /* Must store high before low for degenerate case of aligned.  */\n+  emit_move_insn (memh, dsth);\n+  emit_move_insn (meml, dstl);\n }\n \n /* The block move code tries to maximize speed by separating loads and\n@@ -3653,20 +3561,10 @@ alpha_expand_unaligned_load_words (rtx *out_regs, rtx smem,\n   sreg = copy_addr_to_reg (smema);\n   areg = expand_binop (DImode, and_optab, sreg, GEN_INT (7), NULL,\n \t\t       1, OPTAB_WIDEN);\n-  if (WORDS_BIG_ENDIAN)\n-    emit_move_insn (sreg, plus_constant (sreg, 7));\n   for (i = 0; i < words; ++i)\n     {\n-      if (WORDS_BIG_ENDIAN)\n-\t{\n-\t  emit_insn (gen_extqh_be (data_regs[i], data_regs[i], sreg));\n-\t  emit_insn (gen_extxl_be (ext_tmps[i], data_regs[i+1], i64, sreg));\n-\t}\n-      else\n-\t{\n-\t  emit_insn (gen_extxl_le (data_regs[i], data_regs[i], i64, sreg));\n-\t  emit_insn (gen_extqh_le (ext_tmps[i], data_regs[i+1], sreg));\n-\t}\n+      emit_insn (gen_extxl (data_regs[i], data_regs[i], i64, sreg));\n+      emit_insn (gen_extqh (ext_tmps[i], data_regs[i+1], sreg));\n       emit_insn (gen_rtx_SET (VOIDmode, ext_tmps[i],\n \t\t\t      gen_rtx_IF_THEN_ELSE (DImode,\n \t\t\t\t\t\t    gen_rtx_EQ (DImode, areg,\n@@ -3726,22 +3624,12 @@ alpha_expand_unaligned_store_words (rtx *data_regs, rtx dmem,\n \n   /* Shift the input data into place.  */\n   dreg = copy_addr_to_reg (dmema);\n-  if (WORDS_BIG_ENDIAN)\n-    emit_move_insn (dreg, plus_constant (dreg, 7));\n   if (data_regs != NULL)\n     {\n       for (i = words-1; i >= 0; --i)\n \t{\n-\t  if (WORDS_BIG_ENDIAN)\n-\t    {\n-\t      emit_insn (gen_insql_be (ins_tmps[i], data_regs[i], dreg));\n-\t      emit_insn (gen_insxh (data_regs[i], data_regs[i], i64, dreg));\n-\t    }\n-\t  else\n-\t    {\n-\t      emit_insn (gen_insxh (ins_tmps[i], data_regs[i], i64, dreg));\n-\t      emit_insn (gen_insql_le (data_regs[i], data_regs[i], dreg));\n-\t    }\n+\t  emit_insn (gen_insxh (ins_tmps[i], data_regs[i], i64, dreg));\n+\t  emit_insn (gen_insql (data_regs[i], data_regs[i], dreg));\n \t}\n       for (i = words-1; i > 0; --i)\n \t{\n@@ -3752,16 +3640,8 @@ alpha_expand_unaligned_store_words (rtx *data_regs, rtx dmem,\n     }\n \n   /* Split and merge the ends with the destination data.  */\n-  if (WORDS_BIG_ENDIAN)\n-    {\n-      emit_insn (gen_mskxl_be (st_tmp_2, st_tmp_2, constm1_rtx, dreg));\n-      emit_insn (gen_mskxh (st_tmp_1, st_tmp_1, i64, dreg));\n-    }\n-  else\n-    {\n-      emit_insn (gen_mskxh (st_tmp_2, st_tmp_2, i64, dreg));\n-      emit_insn (gen_mskxl_le (st_tmp_1, st_tmp_1, constm1_rtx, dreg));\n-    }\n+  emit_insn (gen_mskxh (st_tmp_2, st_tmp_2, i64, dreg));\n+  emit_insn (gen_mskxl (st_tmp_1, st_tmp_1, constm1_rtx, dreg));\n \n   if (data_regs != NULL)\n     {\n@@ -3772,24 +3652,17 @@ alpha_expand_unaligned_store_words (rtx *data_regs, rtx dmem,\n     }\n \n   /* Store it all.  */\n-  if (WORDS_BIG_ENDIAN)\n-    emit_move_insn (st_addr_1, st_tmp_1);\n-  else\n-    emit_move_insn (st_addr_2, st_tmp_2);\n+  emit_move_insn (st_addr_2, st_tmp_2);\n   for (i = words-1; i > 0; --i)\n     {\n       rtx tmp = change_address (dmem, DImode,\n \t\t\t\tgen_rtx_AND (DImode,\n-\t\t\t\t\t     plus_constant(dmema,\n-\t\t\t\t\t     WORDS_BIG_ENDIAN ? i*8-1 : i*8),\n+\t\t\t\t\t     plus_constant (dmema, i*8),\n \t\t\t\t\t     im8));\n       set_mem_alias_set (tmp, 0);\n       emit_move_insn (tmp, data_regs ? ins_tmps[i-1] : const0_rtx);\n     }\n-  if (WORDS_BIG_ENDIAN)\n-    emit_move_insn (st_addr_2, st_tmp_2);\n-  else\n-    emit_move_insn (st_addr_1, st_tmp_1);\n+  emit_move_insn (st_addr_1, st_tmp_1);\n }\n \n \n@@ -4438,20 +4311,11 @@ emit_insxl (enum machine_mode mode, rtx op1, rtx op2)\n   rtx ret = gen_reg_rtx (DImode);\n   rtx (*fn) (rtx, rtx, rtx);\n \n-  if (WORDS_BIG_ENDIAN)\n-    {\n-      if (mode == QImode)\n-\tfn = gen_insbl_be;\n-      else\n-\tfn = gen_inswl_be;\n-    }\n+  if (mode == QImode)\n+    fn = gen_insbl;\n   else\n-    {\n-      if (mode == QImode)\n-\tfn = gen_insbl_le;\n-      else\n-\tfn = gen_inswl_le;\n-    }\n+    fn = gen_inswl;\n+\n   /* The insbl and inswl patterns require a register operand.  */\n   op1 = force_reg (mode, op1);\n   emit_insn (fn (ret, op1, op2));\n@@ -4584,10 +4448,7 @@ alpha_split_compare_and_swap_12 (enum machine_mode mode, rtx dest, rtx addr,\n   \n   width = GEN_INT (GET_MODE_BITSIZE (mode));\n   mask = GEN_INT (mode == QImode ? 0xff : 0xffff);\n-  if (WORDS_BIG_ENDIAN)\n-    emit_insn (gen_extxl_be (dest, scratch, width, addr));\n-  else\n-    emit_insn (gen_extxl_le (dest, scratch, width, addr));\n+  emit_insn (gen_extxl (dest, scratch, width, addr));\n \n   if (oldval == const0_rtx)\n     x = gen_rtx_NE (DImode, dest, const0_rtx);\n@@ -4599,10 +4460,7 @@ alpha_split_compare_and_swap_12 (enum machine_mode mode, rtx dest, rtx addr,\n     }\n   emit_unlikely_jump (x, label2);\n \n-  if (WORDS_BIG_ENDIAN)\n-    emit_insn (gen_mskxl_be (scratch, scratch, mask, addr));\n-  else\n-    emit_insn (gen_mskxl_le (scratch, scratch, mask, addr));\n+  emit_insn (gen_mskxl (scratch, scratch, mask, addr));\n   emit_insn (gen_iordi3 (scratch, scratch, newval));\n \n   emit_store_conditional (DImode, scratch, mem, scratch);\n@@ -4678,16 +4536,8 @@ alpha_split_lock_test_and_set_12 (enum machine_mode mode, rtx dest, rtx addr,\n   \n   width = GEN_INT (GET_MODE_BITSIZE (mode));\n   mask = GEN_INT (mode == QImode ? 0xff : 0xffff);\n-  if (WORDS_BIG_ENDIAN)\n-    {\n-      emit_insn (gen_extxl_be (dest, scratch, width, addr));\n-      emit_insn (gen_mskxl_be (scratch, scratch, mask, addr));\n-    }\n-  else\n-    {\n-      emit_insn (gen_extxl_le (dest, scratch, width, addr));\n-      emit_insn (gen_mskxl_le (scratch, scratch, mask, addr));\n-    }\n+  emit_insn (gen_extxl (dest, scratch, width, addr));\n+  emit_insn (gen_mskxl (scratch, scratch, mask, addr));\n   emit_insn (gen_iordi3 (scratch, scratch, val));\n \n   emit_store_conditional (DImode, scratch, mem, scratch);\n@@ -5279,20 +5129,13 @@ print_operand (FILE *file, rtx x, int code)\n       break;\n \n     case 's':\n-      /* Write the constant value divided by 8 for little-endian mode or\n-\t (56 - value) / 8 for big-endian mode.  */\n-\n+      /* Write the constant value divided by 8.  */\n       if (!CONST_INT_P (x)\n-\t  || (unsigned HOST_WIDE_INT) INTVAL (x) >= (WORDS_BIG_ENDIAN\n-\t\t\t\t\t\t     ? 56\n-\t\t\t\t\t\t     : 64)\n+\t  || (unsigned HOST_WIDE_INT) INTVAL (x) >= 64\n \t  || (INTVAL (x) & 7) != 0)\n \toutput_operand_lossage (\"invalid %%s value\");\n \n-      fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n-\t       WORDS_BIG_ENDIAN\n-\t       ? (56 - INTVAL (x)) / 8\n-\t       : INTVAL (x) / 8);\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (x) / 8);\n       break;\n \n     case 'S':\n@@ -6391,27 +6234,27 @@ enum alpha_builtin\n \n static enum insn_code const code_for_builtin[ALPHA_BUILTIN_max] = {\n   CODE_FOR_builtin_cmpbge,\n-  CODE_FOR_builtin_extbl,\n-  CODE_FOR_builtin_extwl,\n-  CODE_FOR_builtin_extll,\n-  CODE_FOR_builtin_extql,\n-  CODE_FOR_builtin_extwh,\n-  CODE_FOR_builtin_extlh,\n-  CODE_FOR_builtin_extqh,\n+  CODE_FOR_extbl,\n+  CODE_FOR_extwl,\n+  CODE_FOR_extll,\n+  CODE_FOR_extql,\n+  CODE_FOR_extwh,\n+  CODE_FOR_extlh,\n+  CODE_FOR_extqh,\n   CODE_FOR_builtin_insbl,\n   CODE_FOR_builtin_inswl,\n   CODE_FOR_builtin_insll,\n-  CODE_FOR_builtin_insql,\n-  CODE_FOR_builtin_inswh,\n-  CODE_FOR_builtin_inslh,\n-  CODE_FOR_builtin_insqh,\n-  CODE_FOR_builtin_mskbl,\n-  CODE_FOR_builtin_mskwl,\n-  CODE_FOR_builtin_mskll,\n-  CODE_FOR_builtin_mskql,\n-  CODE_FOR_builtin_mskwh,\n-  CODE_FOR_builtin_msklh,\n-  CODE_FOR_builtin_mskqh,\n+  CODE_FOR_insql,\n+  CODE_FOR_inswh,\n+  CODE_FOR_inslh,\n+  CODE_FOR_insqh,\n+  CODE_FOR_mskbl,\n+  CODE_FOR_mskwl,\n+  CODE_FOR_mskll,\n+  CODE_FOR_mskql,\n+  CODE_FOR_mskwh,\n+  CODE_FOR_msklh,\n+  CODE_FOR_mskqh,\n   CODE_FOR_umuldi3_highpart,\n   CODE_FOR_builtin_zap,\n   CODE_FOR_builtin_zapnot,\n@@ -6779,9 +6622,7 @@ alpha_fold_builtin_extxx (tree op[], unsigned HOST_WIDE_INT opint[],\n       unsigned HOST_WIDE_INT loc;\n \n       loc = opint[1] & 7;\n-      if (BYTES_BIG_ENDIAN)\n-        loc ^= 7;\n-      loc *= 8;\n+      loc *= BITS_PER_UNIT;\n \n       if (loc != 0)\n \t{\n@@ -6820,8 +6661,6 @@ alpha_fold_builtin_insxx (tree op[], unsigned HOST_WIDE_INT opint[],\n       tree *zap_op = NULL;\n \n       loc = opint[1] & 7;\n-      if (BYTES_BIG_ENDIAN)\n-        loc ^= 7;\n       bytemask <<= loc;\n \n       temp = opint[0];\n@@ -6861,8 +6700,6 @@ alpha_fold_builtin_mskxx (tree op[], unsigned HOST_WIDE_INT opint[],\n       unsigned HOST_WIDE_INT loc;\n \n       loc = opint[1] & 7;\n-      if (BYTES_BIG_ENDIAN)\n-        loc ^= 7;\n       bytemask <<= loc;\n \n       if (is_high)"}, {"sha": "2e3ac9e075d111d738195d436a5e1ce135022ef2", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 68, "deletions": 557, "changes": 625, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2a73678bb58b1c91ae7ee93e3ddfff1830baf8/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2a73678bb58b1c91ae7ee93e3ddfff1830baf8/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=0b2a73678bb58b1c91ae7ee93e3ddfff1830baf8", "patch": "@@ -1320,8 +1320,7 @@\n   t0 = gen_reg_rtx (DImode);\n   t1 = gen_reg_rtx (DImode);\n \n-  emit_insn (gen_insxh (t0, gen_lowpart (DImode, operands[1]),\n-\t\t\tGEN_INT (32), GEN_INT (WORDS_BIG_ENDIAN ? 0 : 7)));\n+  emit_insn (gen_inslh (t0, gen_lowpart (DImode, operands[1]), GEN_INT (7)));\n   emit_insn (gen_inswl_const (t1, gen_lowpart (HImode, operands[1]),\n \t\t\t      GEN_INT (24)));\n   emit_insn (gen_iordi3 (t1, t0, t1));\n@@ -1520,106 +1519,45 @@\n ;; the unaligned loads (see below).\n ;;\n ;; Operand 1 is the address, operand 0 is the result.\n-(define_expand \"unaligned_extendqidi\"\n-  [(use (match_operand:QI 0 \"register_operand\" \"\"))\n-   (use (match_operand:DI 1 \"address_operand\" \"\"))]\n-  \"\"\n-{\n-  operands[0] = gen_lowpart (DImode, operands[0]);\n-  if (WORDS_BIG_ENDIAN)\n-    emit_insn (gen_unaligned_extendqidi_be (operands[0], operands[1]));\n-  else\n-    emit_insn (gen_unaligned_extendqidi_le (operands[0], operands[1]));\n-  DONE;\n-})\n \n-(define_expand \"unaligned_extendqidi_le\"\n+(define_expand \"unaligned_extendqidi\"\n   [(set (match_dup 3)\n-\t(mem:DI (and:DI (match_operand:DI 1 \"\" \"\") (const_int -8))))\n+\t(mem:DI (and:DI (match_operand:DI 1 \"address_operand\" \"\") (const_int -8))))\n    (set (match_dup 4)\n \t(ashift:DI (match_dup 3)\n \t\t   (minus:DI (const_int 64)\n \t\t\t     (ashift:DI\n \t\t\t      (and:DI (match_dup 2) (const_int 7))\n \t\t\t      (const_int 3)))))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:QI 0 \"register_operand\" \"\")\n \t(ashiftrt:DI (match_dup 4) (const_int 56)))]\n-  \"! WORDS_BIG_ENDIAN\"\n+  \"\"\n {\n+  operands[0] = gen_lowpart (DImode, operands[0]);\n   operands[2] = get_unaligned_offset (operands[1], 1);\n   operands[3] = gen_reg_rtx (DImode);\n   operands[4] = gen_reg_rtx (DImode);\n })\n \n-(define_expand \"unaligned_extendqidi_be\"\n-  [(set (match_dup 3)\n-\t(mem:DI (and:DI (match_operand:DI 1 \"\" \"\") (const_int -8))))\n-   (set (match_dup 4)\n-\t(ashift:DI (match_dup 3)\n-\t\t   (ashift:DI\n-\t\t     (and:DI\n-\t\t       (plus:DI (match_dup 2) (const_int 1))\n-\t\t       (const_int 7))\n-\t\t     (const_int 3))))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashiftrt:DI (match_dup 4) (const_int 56)))]\n-  \"WORDS_BIG_ENDIAN\"\n-{\n-  operands[2] = get_unaligned_offset (operands[1], -1);\n-  operands[3] = gen_reg_rtx (DImode);\n-  operands[4] = gen_reg_rtx (DImode);\n-})\n-\n (define_expand \"unaligned_extendhidi\"\n-  [(use (match_operand:QI 0 \"register_operand\" \"\"))\n-   (use (match_operand:DI 1 \"address_operand\" \"\"))]\n-  \"\"\n-{\n-  operands[0] = gen_lowpart (DImode, operands[0]);\n-  if (WORDS_BIG_ENDIAN)\n-    emit_insn (gen_unaligned_extendhidi_be (operands[0], operands[1]));\n-  else\n-    emit_insn (gen_unaligned_extendhidi_le (operands[0], operands[1]));\n-  DONE;\n-})\n-\n-(define_expand \"unaligned_extendhidi_le\"\n   [(set (match_dup 3)\n-\t(mem:DI (and:DI (match_operand:DI 1 \"\" \"\") (const_int -8))))\n+\t(mem:DI (and:DI (match_operand:DI 1 \"address_operand\" \"\") (const_int -8))))\n    (set (match_dup 4)\n \t(ashift:DI (match_dup 3)\n \t\t   (minus:DI (const_int 64)\n \t\t\t     (ashift:DI\n \t\t\t      (and:DI (match_dup 2) (const_int 7))\n \t\t\t      (const_int 3)))))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n+   (set (match_operand:HI 0 \"register_operand\" \"\")\n \t(ashiftrt:DI (match_dup 4) (const_int 48)))]\n-  \"! WORDS_BIG_ENDIAN\"\n+  \"\"\n {\n+  operands[0] = gen_lowpart (DImode, operands[0]);\n   operands[2] = get_unaligned_offset (operands[1], 2);\n   operands[3] = gen_reg_rtx (DImode);\n   operands[4] = gen_reg_rtx (DImode);\n })\n \n-(define_expand \"unaligned_extendhidi_be\"\n-  [(set (match_dup 3)\n-\t(mem:DI (and:DI (match_operand:DI 1 \"\" \"\") (const_int -8))))\n-   (set (match_dup 4)\n-\t(ashift:DI (match_dup 3)\n-\t\t   (ashift:DI\n-\t\t     (and:DI\n-\t\t       (plus:DI (match_dup 2) (const_int 1))\n-\t\t       (const_int 7))\n-\t\t     (const_int 3))))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashiftrt:DI (match_dup 4) (const_int 48)))]\n-  \"WORDS_BIG_ENDIAN\"\n-{\n-  operands[2] = get_unaligned_offset (operands[1], -1);\n-  operands[3] = gen_reg_rtx (DImode);\n-  operands[4] = gen_reg_rtx (DImode);\n-})\n-\n (define_insn \"*extxl_const\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extract:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n@@ -1629,77 +1567,40 @@\n   \"ext%M2l %r1,%s3,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"extxl_le\"\n+(define_insn \"extxl\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extract:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n \t\t\t (match_operand:DI 2 \"mode_width_operand\" \"n\")\n \t\t\t (ashift:DI (match_operand:DI 3 \"reg_or_8bit_operand\" \"rI\")\n \t\t\t\t    (const_int 3))))]\n-  \"! WORDS_BIG_ENDIAN\"\n-  \"ext%M2l %r1,%3,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"extxl_be\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extract:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n-\t\t\t (match_operand:DI 2 \"mode_width_operand\" \"n\")\n-\t\t\t (minus:DI\n-\t\t\t   (const_int 56)\n-\t\t\t   (ashift:DI\n-\t\t\t     (match_operand:DI 3 \"reg_or_8bit_operand\" \"rI\")\n-\t\t\t     (const_int 3)))))]\n-  \"WORDS_BIG_ENDIAN\"\n+  \"\"\n   \"ext%M2l %r1,%3,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n ;; Combine has some strange notion of preserving existing undefined behavior\n ;; in shifts larger than a word size.  So capture these patterns that it\n ;; should have turned into zero_extracts.\n \n-(define_insn \"*extxl_1_le\"\n+(define_insn \"*extxl_1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (lshiftrt:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n \t\t  (ashift:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n \t\t\t     (const_int 3)))\n \t     (match_operand:DI 3 \"mode_mask_operand\" \"n\")))]\n-  \"! WORDS_BIG_ENDIAN\"\n-  \"ext%U3l %1,%2,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"*extxl_1_be\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(and:DI (lshiftrt:DI\n-\t\t  (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n-\t\t  (minus:DI (const_int 56)\n-\t\t    (ashift:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n-\t\t\t       (const_int 3))))\n-\t\t(match_operand:DI 3 \"mode_mask_operand\" \"n\")))]\n-  \"WORDS_BIG_ENDIAN\"\n+  \"\"\n   \"ext%U3l %1,%2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"*extql_2_le\"\n+(define_insn \"*extql_2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n \t  (ashift:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n \t\t     (const_int 3))))]\n-  \"! WORDS_BIG_ENDIAN\"\n-  \"extql %1,%2,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"*extql_2_be\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(lshiftrt:DI\n-\t  (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n-\t  (minus:DI (const_int 56)\n-\t\t    (ashift:DI\n-\t\t      (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n-\t\t      (const_int 3)))))]\n-  \"WORDS_BIG_ENDIAN\"\n+  \"\"\n   \"extql %1,%2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"extqh_le\"\n+(define_insn \"extqh\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI\n \t (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n@@ -1709,25 +1610,11 @@\n \t\t      (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n \t\t      (const_int 7))\n \t\t     (const_int 3)))))]\n-  \"! WORDS_BIG_ENDIAN\"\n-  \"extqh %r1,%2,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"extqh_be\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ashift:DI\n-\t  (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n-\t  (ashift:DI\n-\t    (and:DI\n-\t      (plus:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n-\t\t       (const_int 1))\n-\t      (const_int 7))\n-\t    (const_int 3))))]\n-  \"WORDS_BIG_ENDIAN\"\n+  \"\"\n   \"extqh %r1,%2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"extlh_le\"\n+(define_insn \"extlh\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI\n \t (and:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n@@ -1738,28 +1625,11 @@\n \t\t      (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n \t\t      (const_int 7))\n \t\t     (const_int 3)))))]\n-  \"! WORDS_BIG_ENDIAN\"\n-  \"extlh %r1,%2,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"extlh_be\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(and:DI\n-\t  (ashift:DI\n-\t    (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n-\t    (ashift:DI\n-\t      (and:DI\n-\t\t(plus:DI\n-\t\t  (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n-\t\t  (const_int 1))\n-\t\t(const_int 7))\n-\t      (const_int 3)))\n-\t  (const_int 2147483647)))]\n-  \"WORDS_BIG_ENDIAN\"\n+  \"\"\n   \"extlh %r1,%2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"extwh_le\"\n+(define_insn \"extwh\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI\n \t (and:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n@@ -1770,23 +1640,7 @@\n \t\t      (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n \t\t      (const_int 7))\n \t\t     (const_int 3)))))]\n-  \"! WORDS_BIG_ENDIAN\"\n-  \"extwh %r1,%2,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"extwh_be\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(and:DI\n-\t  (ashift:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n-\t\t     (ashift:DI\n-\t\t       (and:DI\n-\t\t\t (plus:DI\n-\t\t\t   (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n-\t\t\t   (const_int 1))\n-\t\t\t (const_int 7))\n-\t\t       (const_int 3)))\n-\t  (const_int 65535)))]\n-  \"WORDS_BIG_ENDIAN\"\n+  \"\"\n   \"extwh %r1,%2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n@@ -1840,79 +1694,39 @@\n   \"insll %1,%s2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"insbl_le\"\n+(define_insn \"insbl\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI (zero_extend:DI (match_operand:QI 1 \"register_operand\" \"r\"))\n \t\t   (ashift:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n \t\t\t      (const_int 3))))]\n-  \"! WORDS_BIG_ENDIAN\"\n-  \"insbl %1,%2,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"insbl_be\"\n- [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-       (ashift:DI (zero_extend:DI (match_operand:QI 1 \"register_operand\" \"r\"))\n-\t (minus:DI (const_int 56)\n-\t   (ashift:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n-\t\t      (const_int 3)))))]\n-  \"WORDS_BIG_ENDIAN\"\n+  \"\"\n   \"insbl %1,%2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"inswl_le\"\n+(define_insn \"inswl\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI (zero_extend:DI (match_operand:HI 1 \"register_operand\" \"r\"))\n \t\t   (ashift:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n \t\t\t      (const_int 3))))]\n-  \"! WORDS_BIG_ENDIAN\"\n-  \"inswl %1,%2,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"inswl_be\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ashift:DI (zero_extend:DI (match_operand:HI 1 \"register_operand\" \"r\"))\n-\t  (minus:DI (const_int 56)\n-\t    (ashift:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n-\t\t       (const_int 3)))))]\n-  \"WORDS_BIG_ENDIAN\"\n+  \"\"\n   \"inswl %1,%2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"insll_le\"\n+(define_insn \"insll\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t   (ashift:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n \t\t\t      (const_int 3))))]\n-  \"! WORDS_BIG_ENDIAN\"\n-  \"insll %1,%2,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"insll_be\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ashift:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t  (minus:DI (const_int 56)\n-\t    (ashift:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n-\t\t       (const_int 3)))))]\n-  \"WORDS_BIG_ENDIAN\"\n+  \"\"\n   \"insll %1,%2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"insql_le\"\n+(define_insn \"insql\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t   (ashift:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n \t\t\t      (const_int 3))))]\n-  \"! WORDS_BIG_ENDIAN\"\n-  \"insql %1,%2,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"insql_be\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t  (minus:DI (const_int 56)\n-\t    (ashift:DI (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")\n-\t\t       (const_int 3)))))]\n-  \"WORDS_BIG_ENDIAN\"\n+  \"\"\n   \"insql %1,%2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n@@ -1963,28 +1777,15 @@\n   \"ins%M2h %1,%3,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"mskxl_le\"\n+(define_insn \"mskxl\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (not:DI (ashift:DI\n \t\t\t (match_operand:DI 2 \"mode_mask_operand\" \"n\")\n \t\t\t (ashift:DI\n \t\t\t  (match_operand:DI 3 \"reg_or_8bit_operand\" \"rI\")\n \t\t\t  (const_int 3))))\n \t\t(match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")))]\n-  \"! WORDS_BIG_ENDIAN\"\n-  \"msk%U2l %r1,%3,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"mskxl_be\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(and:DI (not:DI (ashift:DI\n-\t\t\t  (match_operand:DI 2 \"mode_mask_operand\" \"n\")\n-\t\t\t  (minus:DI (const_int 56)\n-\t\t\t    (ashift:DI\n-\t\t\t      (match_operand:DI 3 \"reg_or_8bit_operand\" \"rI\")\n-\t\t\t      (const_int 3)))))\n-\t\t(match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")))]\n-  \"WORDS_BIG_ENDIAN\"\n+  \"\"\n   \"msk%U2l %r1,%3,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n@@ -5049,22 +4850,6 @@\n ;; operand 3 can overlap the input and output registers.\n \n (define_expand \"unaligned_loadqi\"\n-  [(use (match_operand:DI 0 \"register_operand\" \"\"))\n-   (use (match_operand:DI 1 \"address_operand\" \"\"))\n-   (use (match_operand:DI 2 \"register_operand\" \"\"))\n-   (use (match_operand:DI 3 \"register_operand\" \"\"))]\n-  \"\"\n-{\n-  if (WORDS_BIG_ENDIAN)\n-    emit_insn (gen_unaligned_loadqi_be (operands[0], operands[1],\n-\t\t\t\t\toperands[2], operands[3]));\n-  else\n-    emit_insn (gen_unaligned_loadqi_le (operands[0], operands[1],\n-\t\t\t\t\toperands[2], operands[3]));\n-  DONE;\n-})\n-\n-(define_expand \"unaligned_loadqi_le\"\n   [(set (match_operand:DI 2 \"register_operand\" \"\")\n \t(mem:DI (and:DI (match_operand:DI 1 \"address_operand\" \"\")\n \t\t\t(const_int -8))))\n@@ -5074,41 +4859,10 @@\n \t(zero_extract:DI (match_dup 2)\n \t\t\t (const_int 8)\n \t\t\t (ashift:DI (match_dup 3) (const_int 3))))]\n-  \"! WORDS_BIG_ENDIAN\"\n-  \"\")\n-\n-(define_expand \"unaligned_loadqi_be\"\n-  [(set (match_operand:DI 2 \"register_operand\" \"\")\n-\t(mem:DI (and:DI (match_operand:DI 1 \"address_operand\" \"\")\n-\t\t\t(const_int -8))))\n-   (set (match_operand:DI 3 \"register_operand\" \"\")\n-\t(match_dup 1))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(zero_extract:DI (match_dup 2)\n-\t\t\t (const_int 8)\n-\t\t\t (minus:DI\n-\t\t\t   (const_int 56)\n-\t\t\t   (ashift:DI (match_dup 3) (const_int 3)))))]\n-  \"WORDS_BIG_ENDIAN\"\n+  \"\"\n   \"\")\n \n (define_expand \"unaligned_loadhi\"\n-  [(use (match_operand:DI 0 \"register_operand\" \"\"))\n-   (use (match_operand:DI 1 \"address_operand\" \"\"))\n-   (use (match_operand:DI 2 \"register_operand\" \"\"))\n-   (use (match_operand:DI 3 \"register_operand\" \"\"))]\n-  \"\"\n-{\n-  if (WORDS_BIG_ENDIAN)\n-    emit_insn (gen_unaligned_loadhi_be (operands[0], operands[1],\n-\t\t\t\t\toperands[2], operands[3]));\n-  else\n-    emit_insn (gen_unaligned_loadhi_le (operands[0], operands[1],\n-\t\t\t\t\toperands[2], operands[3]));\n-  DONE;\n-})\n-\n-(define_expand \"unaligned_loadhi_le\"\n   [(set (match_operand:DI 2 \"register_operand\" \"\")\n \t(mem:DI (and:DI (match_operand:DI 1 \"address_operand\" \"\")\n \t\t\t(const_int -8))))\n@@ -5118,22 +4872,7 @@\n \t(zero_extract:DI (match_dup 2)\n \t\t\t (const_int 16)\n \t\t\t (ashift:DI (match_dup 3) (const_int 3))))]\n-  \"! WORDS_BIG_ENDIAN\"\n-  \"\")\n-\n-(define_expand \"unaligned_loadhi_be\"\n-  [(set (match_operand:DI 2 \"register_operand\" \"\")\n-\t(mem:DI (and:DI (match_operand:DI 1 \"address_operand\" \"\")\n-\t\t\t(const_int -8))))\n-   (set (match_operand:DI 3 \"register_operand\" \"\")\n-\t(plus:DI (match_dup 1) (const_int 1)))\n-   (set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(zero_extract:DI (match_dup 2)\n-\t\t\t (const_int 16)\n-\t\t\t (minus:DI\n-\t\t\t   (const_int 56)\n-\t\t\t   (ashift:DI (match_dup 3) (const_int 3)))))]\n-  \"WORDS_BIG_ENDIAN\"\n+  \"\"\n   \"\")\n \n ;; Storing an aligned byte or word requires two temporaries.  Operand 0 is the\n@@ -5166,25 +4905,6 @@\n ;; operand 2 can be that register.\n \n (define_expand \"unaligned_storeqi\"\n-  [(use (match_operand:DI 0 \"address_operand\" \"\"))\n-   (use (match_operand:QI 1 \"register_operand\" \"\"))\n-   (use (match_operand:DI 2 \"register_operand\" \"\"))\n-   (use (match_operand:DI 3 \"register_operand\" \"\"))\n-   (use (match_operand:DI 4 \"register_operand\" \"\"))]\n-  \"\"\n-{\n-  if (WORDS_BIG_ENDIAN)\n-    emit_insn (gen_unaligned_storeqi_be (operands[0], operands[1],\n-\t\t\t\t\t operands[2], operands[3],\n-\t\t\t\t\t operands[4]));\n-  else\n-    emit_insn (gen_unaligned_storeqi_le (operands[0], operands[1],\n-\t\t\t\t\t operands[2], operands[3],\n-\t\t\t\t\t operands[4]));\n-  DONE;\n-})\n-\n-(define_expand \"unaligned_storeqi_le\"\n   [(set (match_operand:DI 3 \"register_operand\" \"\")\n \t(mem:DI (and:DI (match_operand:DI 0 \"address_operand\" \"\")\n \t\t\t(const_int -8))))\n@@ -5200,50 +4920,10 @@\n    (set (match_dup 4) (ior:DI (match_dup 4) (match_dup 3)))\n    (set (mem:DI (and:DI (match_dup 0) (const_int -8)))\n \t(match_dup 4))]\n-  \"! WORDS_BIG_ENDIAN\"\n-  \"\")\n-\n-(define_expand \"unaligned_storeqi_be\"\n-  [(set (match_operand:DI 3 \"register_operand\" \"\")\n-\t(mem:DI (and:DI (match_operand:DI 0 \"address_operand\" \"\")\n-\t\t\t(const_int -8))))\n-   (set (match_operand:DI 2 \"register_operand\" \"\")\n-\t(match_dup 0))\n-   (set (match_dup 3)\n-\t(and:DI (not:DI (ashift:DI (const_int 255)\n-\t\t\t  (minus:DI (const_int 56)\n-\t\t\t\t    (ashift:DI (match_dup 2) (const_int 3)))))\n-\t\t(match_dup 3)))\n-   (set (match_operand:DI 4 \"register_operand\" \"\")\n-\t(ashift:DI (zero_extend:DI (match_operand:QI 1 \"register_operand\" \"\"))\n-\t\t   (minus:DI (const_int 56)\n-\t\t     (ashift:DI (match_dup 2) (const_int 3)))))\n-   (set (match_dup 4) (ior:DI (match_dup 4) (match_dup 3)))\n-   (set (mem:DI (and:DI (match_dup 0) (const_int -8)))\n-\t(match_dup 4))]\n-  \"WORDS_BIG_ENDIAN\"\n+  \"\"\n   \"\")\n \n (define_expand \"unaligned_storehi\"\n-  [(use (match_operand:DI 0 \"address_operand\" \"\"))\n-   (use (match_operand:HI 1 \"register_operand\" \"\"))\n-   (use (match_operand:DI 2 \"register_operand\" \"\"))\n-   (use (match_operand:DI 3 \"register_operand\" \"\"))\n-   (use (match_operand:DI 4 \"register_operand\" \"\"))]\n-  \"\"\n-{\n-  if (WORDS_BIG_ENDIAN)\n-    emit_insn (gen_unaligned_storehi_be (operands[0], operands[1],\n-\t\t\t\t\t operands[2], operands[3],\n-\t\t\t\t\t operands[4]));\n-  else\n-    emit_insn (gen_unaligned_storehi_le (operands[0], operands[1],\n-\t\t\t\t\t operands[2], operands[3],\n-\t\t\t\t\t operands[4]));\n-  DONE;\n-})\n-\n-(define_expand \"unaligned_storehi_le\"\n   [(set (match_operand:DI 3 \"register_operand\" \"\")\n \t(mem:DI (and:DI (match_operand:DI 0 \"address_operand\" \"\")\n \t\t\t(const_int -8))))\n@@ -5259,31 +4939,9 @@\n    (set (match_dup 4) (ior:DI (match_dup 4) (match_dup 3)))\n    (set (mem:DI (and:DI (match_dup 0) (const_int -8)))\n \t(match_dup 4))]\n-  \"! WORDS_BIG_ENDIAN\"\n+  \"\"\n   \"\")\n \n-(define_expand \"unaligned_storehi_be\"\n-  [(set (match_operand:DI 3 \"register_operand\" \"\")\n-\t(mem:DI (and:DI (match_operand:DI 0 \"address_operand\" \"\")\n-\t\t\t(const_int -8))))\n-   (set (match_operand:DI 2 \"register_operand\" \"\")\n-\t(plus:DI (match_dup 5) (const_int 1)))\n-   (set (match_dup 3)\n-\t(and:DI (not:DI (ashift:DI\n-\t\t\t  (const_int 65535)\n-\t\t\t  (minus:DI (const_int 56)\n-\t\t\t\t    (ashift:DI (match_dup 2) (const_int 3)))))\n-\t\t(match_dup 3)))\n-   (set (match_operand:DI 4 \"register_operand\" \"\")\n-\t(ashift:DI (zero_extend:DI (match_operand:HI 1 \"register_operand\" \"\"))\n-\t\t   (minus:DI (const_int 56)\n-\t\t\t     (ashift:DI (match_dup 2) (const_int 3)))))\n-   (set (match_dup 4) (ior:DI (match_dup 4) (match_dup 3)))\n-   (set (mem:DI (and:DI (match_dup 0) (const_int -8)))\n-\t(match_dup 4))]\n-  \"WORDS_BIG_ENDIAN\"\n-  \"operands[5] = force_reg (DImode, operands[0]);\")\n-\n ;; Here are the define_expand's for QI and HI moves that use the above\n ;; patterns.  We have the normal sets, plus the ones that need scratch\n ;; registers for reload.\n@@ -5708,16 +5366,7 @@\n   if (!MEM_P (operands[1]))\n     FAIL;\n \n-  /* The bit number is relative to the mode of operand 1 which is\n-     usually QImode (this might actually be a bug in expmed.c). Note \n-     that the bit number is negative in big-endian mode in this case.\n-     We have to convert that to the offset.  */\n-  if (WORDS_BIG_ENDIAN)\n-    ofs = GET_MODE_BITSIZE (GET_MODE (operands[1]))\n-          - INTVAL (operands[2]) - INTVAL (operands[3]);\n-  else\n-    ofs = INTVAL (operands[3]);\n-\n+  ofs = INTVAL (operands[3]);\n   ofs = ofs / 8;\n \n   alpha_expand_unaligned_load (operands[0], operands[1],\n@@ -5749,16 +5398,7 @@\n       if (INTVAL (operands[2]) == 8)\n \tFAIL;\n \n-      /* The bit number is relative to the mode of operand 1 which is\n-\t usually QImode (this might actually be a bug in expmed.c). Note \n-\t that the bit number is negative in big-endian mode in this case.\n-\t We have to convert that to the offset.  */\n-      if (WORDS_BIG_ENDIAN)\n-\tofs = GET_MODE_BITSIZE (GET_MODE (operands[1]))\n-\t      - INTVAL (operands[2]) - INTVAL (operands[3]);\n-      else\n-\tofs = INTVAL (operands[3]);\n-\n+      ofs = INTVAL (operands[3]);\n       ofs = ofs / 8;\n \n       alpha_expand_unaligned_load (operands[0], operands[1],\n@@ -5789,16 +5429,7 @@\n   if (!MEM_P (operands[0]))\n     FAIL;\n \n-  /* The bit number is relative to the mode of operand 1 which is\n-     usually QImode (this might actually be a bug in expmed.c). Note \n-     that the bit number is negative in big-endian mode in this case.\n-     We have to convert that to the offset.  */\n-  if (WORDS_BIG_ENDIAN)\n-    ofs = GET_MODE_BITSIZE (GET_MODE (operands[0]))\n-          - INTVAL (operands[1]) - INTVAL (operands[2]);\n-  else\n-    ofs = INTVAL (operands[2]);\n-\n+  ofs = INTVAL (operands[2]);\n   ofs = ofs / 8;\n \n   alpha_expand_unaligned_store (operands[0], operands[3],\n@@ -6402,108 +6033,43 @@\n   ;; actually differentiate between ILOG and ICMP in the schedule.\n   [(set_attr \"type\" \"icmp\")])\n \n-(define_expand \"builtin_extbl\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n-  \"\"\n-{\n-  rtx (*gen) (rtx, rtx, rtx, rtx);\n-  if (WORDS_BIG_ENDIAN)\n-    gen = gen_extxl_be;\n-  else\n-    gen = gen_extxl_le;\n-  emit_insn ((*gen) (operands[0], operands[1], GEN_INT (8), operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"builtin_extwl\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n-  \"\"\n-{\n-  rtx (*gen) (rtx, rtx, rtx, rtx);\n-  if (WORDS_BIG_ENDIAN)\n-    gen = gen_extxl_be;\n-  else\n-    gen = gen_extxl_le;\n-  emit_insn ((*gen) (operands[0], operands[1], GEN_INT (16), operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"builtin_extll\"\n+(define_expand \"extbl\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n   \"\"\n {\n-  rtx (*gen) (rtx, rtx, rtx, rtx);\n-  if (WORDS_BIG_ENDIAN)\n-    gen = gen_extxl_be;\n-  else\n-    gen = gen_extxl_le;\n-  emit_insn ((*gen) (operands[0], operands[1], GEN_INT (32), operands[2]));\n+  emit_insn (gen_extxl (operands[0], operands[1], GEN_INT (8), operands[2]));\n   DONE;\n })\n \n-(define_expand \"builtin_extql\"\n+(define_expand \"extwl\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n   \"\"\n {\n-  rtx (*gen) (rtx, rtx, rtx, rtx);\n-  if (WORDS_BIG_ENDIAN)\n-    gen = gen_extxl_be;\n-  else\n-    gen = gen_extxl_le;\n-  emit_insn ((*gen) (operands[0], operands[1], GEN_INT (64), operands[2]));\n+  emit_insn (gen_extxl (operands[0], operands[1], GEN_INT (16), operands[2]));\n   DONE;\n })\n \n-(define_expand \"builtin_extwh\"\n+(define_expand \"extll\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n   \"\"\n {\n-  rtx (*gen) (rtx, rtx, rtx);\n-  if (WORDS_BIG_ENDIAN)\n-    gen = gen_extwh_be;\n-  else\n-    gen = gen_extwh_le;\n-  emit_insn ((*gen) (operands[0], operands[1], operands[2]));\n+  emit_insn (gen_extxl (operands[0], operands[1], GEN_INT (32), operands[2]));\n   DONE;\n })\n \n-(define_expand \"builtin_extlh\"\n+(define_expand \"extql\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n   \"\"\n {\n-  rtx (*gen) (rtx, rtx, rtx);\n-  if (WORDS_BIG_ENDIAN)\n-    gen = gen_extlh_be;\n-  else\n-    gen = gen_extlh_le;\n-  emit_insn ((*gen) (operands[0], operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"builtin_extqh\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n-  \"\"\n-{\n-  rtx (*gen) (rtx, rtx, rtx);\n-  if (WORDS_BIG_ENDIAN)\n-    gen = gen_extqh_be;\n-  else\n-    gen = gen_extqh_le;\n-  emit_insn ((*gen) (operands[0], operands[1], operands[2]));\n+  emit_insn (gen_extxl (operands[0], operands[1], GEN_INT (64), operands[2]));\n   DONE;\n })\n \n@@ -6513,13 +6079,8 @@\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n   \"\"\n {\n-  rtx (*gen) (rtx, rtx, rtx);\n-  if (WORDS_BIG_ENDIAN)\n-    gen = gen_insbl_be;\n-  else\n-    gen = gen_insbl_le;\n   operands[1] = gen_lowpart (QImode, operands[1]);\n-  emit_insn ((*gen) (operands[0], operands[1], operands[2]));\n+  emit_insn (gen_insbl (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n@@ -6529,13 +6090,8 @@\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n   \"\"\n {\n-  rtx (*gen) (rtx, rtx, rtx);\n-  if (WORDS_BIG_ENDIAN)\n-    gen = gen_inswl_be;\n-  else\n-    gen = gen_inswl_le;\n   operands[1] = gen_lowpart (HImode, operands[1]);\n-  emit_insn ((*gen) (operands[0], operands[1], operands[2]));\n+  emit_insn (gen_inswl (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n@@ -6545,33 +6101,12 @@\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n   \"\"\n {\n-  rtx (*gen) (rtx, rtx, rtx);\n-  if (WORDS_BIG_ENDIAN)\n-    gen = gen_insll_be;\n-  else\n-    gen = gen_insll_le;\n   operands[1] = gen_lowpart (SImode, operands[1]);\n-  emit_insn ((*gen) (operands[0], operands[1], operands[2]));\n-  emit_insn ((*gen) (operands[0], operands[1], operands[2]));\n+  emit_insn (gen_insll (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n-(define_expand \"builtin_insql\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n-   (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n-  \"\"\n-{\n-  rtx (*gen) (rtx, rtx, rtx);\n-  if (WORDS_BIG_ENDIAN)\n-    gen = gen_insql_be;\n-  else\n-    gen = gen_insql_le;\n-  emit_insn ((*gen) (operands[0], operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_expand \"builtin_inswh\"\n+(define_expand \"inswh\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"register_operand\" \"\")\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n@@ -6581,7 +6116,7 @@\n   DONE;\n })\n \n-(define_expand \"builtin_inslh\"\n+(define_expand \"inslh\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"register_operand\" \"\")\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n@@ -6591,7 +6126,7 @@\n   DONE;\n })\n \n-(define_expand \"builtin_insqh\"\n+(define_expand \"insqh\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"register_operand\" \"\")\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n@@ -6601,75 +6136,51 @@\n   DONE;\n })\n \n-(define_expand \"builtin_mskbl\"\n+(define_expand \"mskbl\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n   \"\"\n {\n-  rtx (*gen) (rtx, rtx, rtx, rtx);\n-  rtx mask;\n-  if (WORDS_BIG_ENDIAN)\n-    gen = gen_mskxl_be;\n-  else\n-    gen = gen_mskxl_le;\n-  mask = GEN_INT (0xff);\n-  emit_insn ((*gen) (operands[0], operands[1], mask, operands[2]));\n+  rtx mask = GEN_INT (0xff);\n+  emit_insn (gen_mskxl (operands[0], operands[1], mask, operands[2]));\n   DONE;\n })\n \n-(define_expand \"builtin_mskwl\"\n+(define_expand \"mskwl\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n   \"\"\n {\n-  rtx (*gen) (rtx, rtx, rtx, rtx);\n-  rtx mask;\n-  if (WORDS_BIG_ENDIAN)\n-    gen = gen_mskxl_be;\n-  else\n-    gen = gen_mskxl_le;\n-  mask = GEN_INT (0xffff);\n-  emit_insn ((*gen) (operands[0], operands[1], mask, operands[2]));\n+  rtx mask = GEN_INT (0xffff);\n+  emit_insn (gen_mskxl (operands[0], operands[1], mask, operands[2]));\n   DONE;\n })\n \n-(define_expand \"builtin_mskll\"\n+(define_expand \"mskll\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n   \"\"\n {\n-  rtx (*gen) (rtx, rtx, rtx, rtx);\n-  rtx mask;\n-  if (WORDS_BIG_ENDIAN)\n-    gen = gen_mskxl_be;\n-  else\n-    gen = gen_mskxl_le;\n-  mask = immed_double_const (0xffffffff, 0, DImode);\n-  emit_insn ((*gen) (operands[0], operands[1], mask, operands[2]));\n+  rtx mask = immed_double_const (0xffffffff, 0, DImode);\n+  emit_insn (gen_mskxl (operands[0], operands[1], mask, operands[2]));\n   DONE;\n })\n \n-(define_expand \"builtin_mskql\"\n+(define_expand \"mskql\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n   \"\"\n {\n-  rtx (*gen) (rtx, rtx, rtx, rtx);\n-  rtx mask;\n-  if (WORDS_BIG_ENDIAN)\n-    gen = gen_mskxl_be;\n-  else\n-    gen = gen_mskxl_le;\n-  mask = constm1_rtx;\n-  emit_insn ((*gen) (operands[0], operands[1], mask, operands[2]));\n+  rtx mask = constm1_rtx;\n+  emit_insn (gen_mskxl (operands[0], operands[1], mask, operands[2]));\n   DONE;\n })\n \n-(define_expand \"builtin_mskwh\"\n+(define_expand \"mskwh\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"register_operand\" \"\")\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n@@ -6679,7 +6190,7 @@\n   DONE;\n })\n \n-(define_expand \"builtin_msklh\"\n+(define_expand \"msklh\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"register_operand\" \"\")\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]\n@@ -6689,7 +6200,7 @@\n   DONE;\n })\n \n-(define_expand \"builtin_mskqh\"\n+(define_expand \"mskqh\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:DI 1 \"register_operand\" \"\")\n    (match_operand:DI 2 \"reg_or_8bit_operand\" \"\")]"}]}