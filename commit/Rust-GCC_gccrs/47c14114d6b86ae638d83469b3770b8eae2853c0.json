{"sha": "47c14114d6b86ae638d83469b3770b8eae2853c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdjMTQxMTRkNmI4NmFlNjM4ZDgzNDY5YjM3NzBiOGVhZTI4NTNjMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-10T14:50:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-10T14:50:48Z"}, "message": "Minor reformatting.\n\nFrom-SVN: r216093", "tree": {"sha": "4cbef8b1cb7669ae6e3fae161f40c7bebcfe6230", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cbef8b1cb7669ae6e3fae161f40c7bebcfe6230"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47c14114d6b86ae638d83469b3770b8eae2853c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c14114d6b86ae638d83469b3770b8eae2853c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47c14114d6b86ae638d83469b3770b8eae2853c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c14114d6b86ae638d83469b3770b8eae2853c0/comments", "author": null, "committer": null, "parents": [{"sha": "9ceeaf9d16fa143b23e16234a22744c9191213ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ceeaf9d16fa143b23e16234a22744c9191213ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ceeaf9d16fa143b23e16234a22744c9191213ff"}], "stats": {"total": 150, "additions": 62, "deletions": 88}, "files": [{"sha": "a3049ddffed54f4be11d4bc6cf9de1a7ebda1fec", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c14114d6b86ae638d83469b3770b8eae2853c0/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c14114d6b86ae638d83469b3770b8eae2853c0/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=47c14114d6b86ae638d83469b3770b8eae2853c0", "patch": "@@ -856,8 +856,8 @@ package body Exp_Aggr is\n          if not Is_Enumeration_Type (Index_Base) then\n             Expr :=\n               Make_Op_Add (Loc,\n-                           Left_Opnd  => Duplicate_Subexpr (To),\n-                           Right_Opnd => Make_Integer_Literal (Loc, U_Val));\n+                Left_Opnd  => Duplicate_Subexpr (To),\n+                Right_Opnd => Make_Integer_Literal (Loc, U_Val));\n \n          --  If we are dealing with enumeration return\n          --    Index_Base'Val (Index_Base'Pos (To) + Val)\n@@ -872,8 +872,8 @@ package body Exp_Aggr is\n \n             Expr_Pos :=\n               Make_Op_Add (Loc,\n-                           Left_Opnd  => To_Pos,\n-                           Right_Opnd => Make_Integer_Literal (Loc, U_Val));\n+                Left_Opnd  => To_Pos,\n+                Right_Opnd => Make_Integer_Literal (Loc, U_Val));\n \n             Expr :=\n               Make_Attribute_Reference"}, {"sha": "aff566ded28ee494b94041e255180f7ef289572d", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 58, "deletions": 84, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c14114d6b86ae638d83469b3770b8eae2853c0/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c14114d6b86ae638d83469b3770b8eae2853c0/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=47c14114d6b86ae638d83469b3770b8eae2853c0", "patch": "@@ -577,7 +577,6 @@ package body Exp_Ch9 is\n          Expr :=\n            Make_Op_Add (Sloc,\n              Left_Opnd  => Num,\n-\n              Right_Opnd =>\n                Actual_Family_Offset (\n                  Make_Attribute_Reference (Sloc,\n@@ -658,10 +657,8 @@ package body Exp_Ch9 is\n               Left_Opnd  => Expr,\n               Right_Opnd =>\n                 Make_Op_Add (Sloc,\n-                  Left_Opnd  =>\n-                    Actual_Family_Offset (Hi, Lo),\n-                  Right_Opnd =>\n-                    Make_Integer_Literal (Sloc, 1)));\n+                  Left_Opnd  => Actual_Family_Offset (Hi, Lo),\n+                  Right_Opnd => Make_Integer_Literal (Sloc, 1)));\n \n          --  Other components are anonymous types to be ignored\n \n@@ -1293,9 +1290,8 @@ package body Exp_Ch9 is\n           Discriminant_Specifications => Dlist,\n           Type_Definition =>\n             Make_Record_Definition (Loc,\n-              Component_List =>\n-                Make_Component_List (Loc,\n-                  Component_Items => Cdecls),\n+              Component_List  =>\n+                Make_Component_List (Loc, Component_Items => Cdecls),\n               Tagged_Present  =>\n                  Ada_Version >= Ada_2005 and then Is_Tagged_Type (Ctyp),\n               Interface_List  => Interface_List (N),\n@@ -1379,8 +1375,8 @@ package body Exp_Ch9 is\n             Ecount :=\n               Make_Op_Add (Loc,\n                 Left_Opnd  => Ecount,\n-                Right_Opnd => Family_Size\n-                                (Loc, Hi, Lo, Concurrent_Type, Large));\n+                Right_Opnd =>\n+                  Family_Size (Loc, Hi, Lo, Concurrent_Type, Large));\n          end if;\n \n          Next_Entity (Ent);\n@@ -2285,7 +2281,7 @@ package body Exp_Ch9 is\n                Prim := Node (Prim_Elmt);\n \n                if (Ekind (Prim) = E_Function\n-                     or else Ekind (Prim) = E_Procedure)\n+                    or else Ekind (Prim) = E_Procedure)\n                  and then Is_Primitive_Wrapper (Prim)\n                then\n                   Subp := Wrapped_Entity (Prim);\n@@ -2789,9 +2785,7 @@ package body Exp_Ch9 is\n       --  interface. Operations in both the visible and private parts may\n       --  implement progenitor operations.\n \n-      if Present (Interfaces (Rec_Typ))\n-        and then Present (Def)\n-      then\n+      if Present (Interfaces (Rec_Typ)) and then Present (Def) then\n          Scan_Declarations (Visible_Declarations (Def));\n          Scan_Declarations (Private_Declarations (Def));\n       end if;\n@@ -2845,7 +2839,7 @@ package body Exp_Ch9 is\n          else\n             Siz :=\n               Make_Op_Add (Loc,\n-                Left_Opnd => Siz,\n+                Left_Opnd  => Siz,\n                 Right_Opnd => Expr);\n          end if;\n \n@@ -4060,7 +4054,7 @@ package body Exp_Ch9 is\n           In_Present => True,\n           Out_Present =>\n             (Etype (Ident) = Standard_Void_Type\n-               and then not Is_RTE (Obj_Type, RE_Address)),\n+              and then not Is_RTE (Obj_Type, RE_Address)),\n           Parameter_Type =>\n             New_Occurrence_Of (Obj_Type, Loc));\n       Set_Debug_Info_Needed (Defining_Identifier (Decl));\n@@ -4957,7 +4951,7 @@ package body Exp_Ch9 is\n             Set_Assignment_OK (Actual);\n             while Present (Actual) loop\n                if (Is_By_Copy_Type (Etype (Actual))\n-                     or else Is_VM_By_Copy_Actual (Actual))\n+                    or else Is_VM_By_Copy_Actual (Actual))\n                  and then Ekind (Formal) /= E_In_Parameter\n                then\n                   N_Node :=\n@@ -5532,10 +5526,7 @@ package body Exp_Ch9 is\n \n       begin\n          Scop := Current_Scope;\n-         while Present (Scop)\n-           and then Scop /= Standard_Standard\n-         loop\n-\n+         while Present (Scop) and then Scop /= Standard_Standard loop\n             if Scop = T then\n                return True;\n \n@@ -5666,6 +5657,7 @@ package body Exp_Ch9 is\n    begin\n       Decl := First (Decls);\n       while Present (Decl) and then not Comes_From_Source (Decl) loop\n+\n          --  Declaration for concurrent entity _object and its access type,\n          --  along with the entry index subtype:\n          --    type prot_typVP is access prot_typV;\n@@ -5776,17 +5768,16 @@ package body Exp_Ch9 is\n          Expr :=\n            Make_Op_Add (Sloc,\n              Left_Opnd  => Num,\n-\n              Right_Opnd =>\n-               Family_Offset (\n-                 Sloc,\n-                 Make_Attribute_Reference (Sloc,\n-                   Attribute_Name => Name_Pos,\n-                   Prefix         => New_Occurrence_Of (Base_Type (S), Sloc),\n-                   Expressions    => New_List (Relocate_Node (Index))),\n-                 Type_Low_Bound (S),\n-                 Ttyp,\n-                 False));\n+               Family_Offset\n+                 (Sloc,\n+                  Make_Attribute_Reference (Sloc,\n+                    Attribute_Name => Name_Pos,\n+                    Prefix         => New_Occurrence_Of (Base_Type (S), Sloc),\n+                    Expressions    => New_List (Relocate_Node (Index))),\n+                  Type_Low_Bound (S),\n+                  Ttyp,\n+                  False));\n       else\n          Expr := Num;\n       end if;\n@@ -5803,15 +5794,14 @@ package body Exp_Ch9 is\n             Set_Intval (Num, Intval (Num) + 1);\n \n          elsif Ekind (Prev) = E_Entry_Family then\n-            S :=\n-              Etype (Discrete_Subtype_Definition (Declaration_Node (Prev)));\n+            S := Etype (Discrete_Subtype_Definition (Declaration_Node (Prev)));\n             Lo := Type_Low_Bound  (S);\n             Hi := Type_High_Bound (S);\n \n             Expr :=\n               Make_Op_Add (Sloc,\n-              Left_Opnd  => Expr,\n-              Right_Opnd => Family_Size (Sloc, Hi, Lo, Ttyp, False));\n+                Left_Opnd  => Expr,\n+                Right_Opnd => Family_Size (Sloc, Hi, Lo, Ttyp, False));\n \n          --  Other components are anonymous types to be ignored\n \n@@ -5917,8 +5907,7 @@ package body Exp_Ch9 is\n          --  skipped if the trivial accept optimization is permitted.\n \n          if not Trivial_Accept_OK\n-           and then\n-             (No (Stats) or else Null_Statements (Statements (Stats)))\n+           and then (No (Stats) or else Null_Statements (Statements (Stats)))\n          then\n             Set_Handled_Statement_Sequence (N,\n               Make_Handled_Sequence_Of_Statements (Loc,\n@@ -8688,8 +8677,8 @@ package body Exp_Ch9 is\n                      --  interface.\n \n                      if Ada_Version >= Ada_2005\n-                          and then\n-                        Present (Interfaces (Corresponding_Record_Type (Pid)))\n+                       and then\n+                         Present (Interfaces (Corresponding_Record_Type (Pid)))\n                      then\n                         Disp_Op_Body :=\n                           Build_Dispatching_Subprogram_Body\n@@ -10297,9 +10286,7 @@ package body Exp_Ch9 is\n             --  The procedure_or_entry_NAME is guaranteed to be overridden by\n             --  an entry. Create a call to predefined primitive _Disp_Requeue.\n \n-            if Has_Impl\n-              and then Impl_Kind = Name_By_Entry\n-            then\n+            if Has_Impl and then Impl_Kind = Name_By_Entry then\n                Rewrite (N, Build_Dispatching_Requeue);\n                Analyze (N);\n                Insert_After (N, Build_Skip_Statement (N));\n@@ -11297,8 +11284,8 @@ package body Exp_Ch9 is\n             --  Change the value for Accept_Modes. (Else_Mode -> Delay_Mode)\n \n             Parms := Parameter_Associations (Select_Call);\n-            Parm := First (Parms);\n \n+            Parm := First (Parms);\n             while Present (Parm) and then Parm /= Select_Mode loop\n                Next (Parm);\n             end loop;\n@@ -11833,9 +11820,8 @@ package body Exp_Ch9 is\n       --  Declare static stack (that is, created by the expander) if we are\n       --  using the Restricted run time on a bare board configuration.\n \n-      if Restricted_Profile\n-        and then Preallocated_Stacks_On_Target\n-      then\n+      if Restricted_Profile and then Preallocated_Stacks_On_Target then\n+\n          --  First we need to extract the appropriate stack size\n \n          Ent_Stack := Make_Defining_Identifier (Loc, Name_uStack);\n@@ -11921,9 +11907,7 @@ package body Exp_Ch9 is\n \n       --  Add the _Size component if a Storage_Size pragma is present\n \n-      if Present (Taskdef)\n-        and then Has_Storage_Size_Pragma (Taskdef)\n-      then\n+      if Present (Taskdef) and then Has_Storage_Size_Pragma (Taskdef) then\n          Append_To (Cdecls,\n            Make_Component_Declaration (Loc,\n              Defining_Identifier =>\n@@ -12864,9 +12848,7 @@ package body Exp_Ch9 is\n          if Is_Entity_Name (Bound)\n            and then Ekind (Entity (Bound)) = E_Discriminant\n          then\n-            if Is_Task_Type (Ttyp)\n-              and then Has_Completion (Ttyp)\n-            then\n+            if Is_Task_Type (Ttyp) and then Has_Completion (Ttyp) then\n                B := Make_Identifier (Loc, Chars (Entity (Bound)));\n                Find_Direct_Name (B);\n \n@@ -12955,10 +12937,8 @@ package body Exp_Ch9 is\n           Attribute_Name => Name_Max,\n           Expressions    => New_List (\n             Make_Op_Add (Loc,\n-              Left_Opnd  =>\n-                Family_Offset (Loc, Hi, Lo, Ttyp, Cap),\n-              Right_Opnd =>\n-                Make_Integer_Literal (Loc, 1)),\n+              Left_Opnd  => Family_Offset (Loc, Hi, Lo, Ttyp, Cap),\n+              Right_Opnd => Make_Integer_Literal (Loc, 1)),\n             Make_Integer_Literal (Loc, 0)));\n    end Family_Size;\n \n@@ -13367,15 +13347,13 @@ package body Exp_Ch9 is\n       --  Step 5: Add the declaration of the entry index and the associated\n       --  type for barrier functions and entry families.\n \n-      if (Barrier and then Family)\n-        or else Ekind (Spec_Id) = E_Entry_Family\n-      then\n+      if (Barrier and Family) or else Ekind (Spec_Id) = E_Entry_Family then\n          declare\n             E         : constant Entity_Id := Index_Object (Spec_Id);\n             Index     : constant Entity_Id :=\n-                          Defining_Identifier (\n-                            Entry_Index_Specification (\n-                              Entry_Body_Formal_Part (Body_Nod)));\n+                          Defining_Identifier\n+                            (Entry_Index_Specification\n+                               (Entry_Body_Formal_Part (Body_Nod)));\n             Index_Con : constant Entity_Id :=\n                           Make_Defining_Identifier (Loc, Chars (Index));\n             High      : Node_Id;\n@@ -13455,21 +13433,20 @@ package body Exp_Ch9 is\n                       Make_Op_Add (Loc,\n                         Left_Opnd =>\n                           Make_Op_Subtract (Loc,\n-                            Left_Opnd =>\n-                              New_Occurrence_Of (E, Loc),\n+                            Left_Opnd  => New_Occurrence_Of (E, Loc),\n                             Right_Opnd =>\n                               Entry_Index_Expression (Loc,\n                                 Defining_Identifier (Body_Nod),\n                                 Empty, Conc_Typ)),\n \n                         Right_Opnd =>\n                           Make_Attribute_Reference (Loc,\n-                            Prefix =>\n+                            Prefix         =>\n                               New_Occurrence_Of (Index_Typ, Loc),\n                             Attribute_Name => Name_Pos,\n-                            Expressions => New_List (\n+                            Expressions    => New_List (\n                               Make_Attribute_Reference (Loc,\n-                                Prefix =>\n+                                Prefix         =>\n                                   New_Occurrence_Of (Index_Typ, Loc),\n                                 Attribute_Name => Name_First)))))));\n             Add (Decl);\n@@ -13644,14 +13621,14 @@ package body Exp_Ch9 is\n       Loc         : constant Source_Ptr := Sloc (Protect_Rec);\n       P_Arr       : Entity_Id;\n       Pdec        : Node_Id;\n-      Ptyp        : constant Node_Id :=\n+      Ptyp        : constant Node_Id    :=\n                       Corresponding_Concurrent_Type (Protect_Rec);\n       Args        : List_Id;\n-      L           : constant List_Id := New_List;\n-      Has_Entry   : constant Boolean := Has_Entries (Ptyp);\n+      L           : constant List_Id    := New_List;\n+      Has_Entry   : constant Boolean    := Has_Entries (Ptyp);\n       Prio_Type   : Entity_Id;\n-      Prio_Var    : Entity_Id := Empty;\n-      Restricted  : constant Boolean := Restricted_Profile;\n+      Prio_Var    : Entity_Id           := Empty;\n+      Restricted  : constant Boolean    := Restricted_Profile;\n \n    begin\n       --  We may need two calls to properly initialize the object, one to\n@@ -13684,6 +13661,7 @@ package body Exp_Ch9 is\n       --  object.\n \n       if not Uses_Lock_Free (Defining_Identifier (Pdec)) then\n+\n          --  Object parameter. This is a pointer to the object of type\n          --  Protection used by the GNARL to control the protected object.\n \n@@ -14091,9 +14069,7 @@ package body Exp_Ch9 is\n       --  present, then the size is taken from the _Size field of the\n       --  task value record, which was set from the pragma value.\n \n-      if Present (Tdef)\n-        and then Has_Storage_Size_Pragma (Tdef)\n-      then\n+      if Present (Tdef) and then Has_Storage_Size_Pragma (Tdef) then\n          Append_To (Args,\n            Make_Selected_Component (Loc,\n              Prefix        => Make_Identifier (Loc, Name_uInit),\n@@ -14145,9 +14121,7 @@ package body Exp_Ch9 is\n \n          --  Case where pragma Relative_Deadline applies: use given value\n \n-         if Present (Tdef)\n-           and then Has_Relative_Deadline_Pragma (Tdef)\n-         then\n+         if Present (Tdef) and then Has_Relative_Deadline_Pragma (Tdef) then\n             Append_To (Args,\n               Make_Selected_Component (Loc,\n                 Prefix        => Make_Identifier (Loc, Name_uInit),\n@@ -14367,12 +14341,12 @@ package body Exp_Ch9 is\n       Stmt := First (Stats);\n       while Nkind (Stmt) /= N_Empty\n         and then (Nkind_In (Stmt, N_Null_Statement, N_Label)\n-                    or else\n-                      (Nkind (Stmt) = N_Pragma\n-                        and then\n-                          Nam_In (Pragma_Name (Stmt), Name_Unreferenced,\n-                                                      Name_Unmodified,\n-                                                      Name_Warnings)))\n+                   or else\n+                     (Nkind (Stmt) = N_Pragma\n+                       and then\n+                         Nam_In (Pragma_Name (Stmt), Name_Unreferenced,\n+                                                     Name_Unmodified,\n+                                                     Name_Warnings)))\n       loop\n          Next (Stmt);\n       end loop;"}]}