{"sha": "b547484e69ed9725f351b014381f672c94e44cf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0NzQ4NGU2OWVkOTcyNWYzNTFiMDE0MzgxZjY3MmM5NGU0NGNmNg==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-12-27T21:40:53Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-12-27T21:40:53Z"}, "message": "(block_move_loop, block_move_no_loop, block_move_sequence):\n\n\tAlways set MEM_IN_STRUCT_P.  If it wasn't previously set, use BLKmode.\n(output_file_start): Emit `requires_88110' when -m88110\n\tis used with -mversion-04.00.\n\nFrom-SVN: r2929", "tree": {"sha": "164a502418df9ba1d5f49838c1bdb3ec033031a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/164a502418df9ba1d5f49838c1bdb3ec033031a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b547484e69ed9725f351b014381f672c94e44cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b547484e69ed9725f351b014381f672c94e44cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b547484e69ed9725f351b014381f672c94e44cf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b547484e69ed9725f351b014381f672c94e44cf6/comments", "author": null, "committer": null, "parents": [{"sha": "c329c9bbcdb6975c359a26df577ab6d65a6b9263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c329c9bbcdb6975c359a26df577ab6d65a6b9263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c329c9bbcdb6975c359a26df577ab6d65a6b9263"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "aec823a96d4ac95e998c6a593d00e03730cd83c0", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b547484e69ed9725f351b014381f672c94e44cf6/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b547484e69ed9725f351b014381f672c94e44cf6/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=b547484e69ed9725f351b014381f672c94e44cf6", "patch": "@@ -2,7 +2,7 @@\n    Copyright (C) 1988, 1989, 1990, 1991 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@mcc.com)\n    Enhanced by Michael Meissner (meissner@osf.org)\n-   Currently supported by Tom Wood (wood@dg-rtp.dg.com)\n+   Version 2 port by Tom Wood (Tom_Wood@NeXT.com)\n \n This file is part of GNU CC.\n \n@@ -47,7 +47,7 @@ extern char *ctime ();\n extern int flag_traditional;\n extern FILE *asm_out_file;\n \n-static char out_sccs_id[] = \"@(#)m88k.c\t2.2.14.4 10/29/92 05:37:46\";\n+static char out_sccs_id[] = \"@(#)m88k.c\t2.3.3.2 12/16/92 08:26:06\";\n static char tm_sccs_id [] = TM_SCCS_ID;\n \n char *m88k_pound_sign = \"\";\t/* Either # for SVR4 or empty for SVR3 */\n@@ -584,18 +584,18 @@ block_move_loop (dest, dest_mem, src, src_mem, size, align)\n   offset_rtx = gen_rtx (CONST_INT, VOIDmode,\n \t\t\tMOVSTR_LOOP + (1 - units) * align);\n \n-  value_rtx = gen_rtx (MEM, mode,\n+  value_rtx = gen_rtx (MEM, MEM_IN_STRUCT_P (src_mem) ? mode : BLKmode,\n \t\t       gen_rtx (PLUS, Pmode,\n \t\t\t\tgen_rtx (REG, Pmode, 3),\n \t\t\t\toffset_rtx));\n   RTX_UNCHANGING_P (value_rtx) = RTX_UNCHANGING_P (src_mem);\n   MEM_VOLATILE_P (value_rtx) = MEM_VOLATILE_P (src_mem);\n-  MEM_IN_STRUCT_P (value_rtx) = MEM_IN_STRUCT_P (src_mem);\n+  MEM_IN_STRUCT_P (value_rtx) = 1;\n \n   emit_insn (gen_call_movstrsi_loop\n \t     (gen_rtx (SYMBOL_REF, Pmode, IDENTIFIER_POINTER (entry_name)),\n \t      dest, src, offset_rtx, value_rtx,\n-\t      gen_rtx (REG, GET_MODE (value_rtx), ((units & 1) ? 4 : 5)),\n+\t      gen_rtx (REG, mode, ((units & 1) ? 4 : 5)),\n \t      gen_rtx (CONST_INT, VOIDmode, count)));\n \n   if (remainder)\n@@ -641,21 +641,21 @@ block_move_no_loop (dest, dest_mem, src, src_mem, size, align)\n \n   offset_rtx = gen_rtx (CONST_INT, VOIDmode, most - (size - remainder));\n \n-  value_rtx = gen_rtx (MEM, mode,\n+  value_rtx = gen_rtx (MEM, MEM_IN_STRUCT_P (src_mem) ? mode : BLKmode,\n \t\t       gen_rtx (PLUS, Pmode,\n \t\t\t\tgen_rtx (REG, Pmode, 3),\n \t\t\t\toffset_rtx));\n   RTX_UNCHANGING_P (value_rtx) = RTX_UNCHANGING_P (src_mem);\n   MEM_VOLATILE_P (value_rtx) = MEM_VOLATILE_P (src_mem);\n-  MEM_IN_STRUCT_P (value_rtx) = MEM_IN_STRUCT_P (src_mem);\n+  MEM_IN_STRUCT_P (value_rtx) = 1;\n \n   value_reg = ((((most - (size - remainder)) / align) & 1) == 0\n \t       ? (align == 8 ? 6 : 5) : 4);\n \n   emit_insn (gen_call_block_move\n \t     (gen_rtx (SYMBOL_REF, Pmode, IDENTIFIER_POINTER (entry_name)),\n \t      dest, src, offset_rtx, value_rtx,\n-\t      gen_rtx (REG, GET_MODE (value_rtx), value_reg)));\n+\t      gen_rtx (REG, mode, value_reg)));\n \n   if (remainder)\n     block_move_sequence (gen_rtx (REG, Pmode, 2), dest_mem,\n@@ -714,27 +714,29 @@ block_move_sequence (dest, dest_mem, src, src_mem, size, align, offset)\n \t      temp[next] = gen_reg_rtx (mode[next]);\n \t    }\n \t  size -= amount[next];\n-\t  srcp = gen_rtx (MEM, mode[next],\n+\t  srcp = gen_rtx (MEM,\n+\t\t\t  MEM_IN_STRUCT_P (src_mem) ? mode[next] : BLKmode,\n \t\t\t  gen_rtx (PLUS, Pmode, src,\n \t\t\t\t   gen_rtx (CONST_INT, SImode, offset_ld)));\n \t  RTX_UNCHANGING_P (srcp) = RTX_UNCHANGING_P (src_mem);\n \t  MEM_VOLATILE_P (srcp) = MEM_VOLATILE_P (src_mem);\n-\t  MEM_IN_STRUCT_P (srcp) = MEM_IN_STRUCT_P (src_mem);\n-\t  emit_move_insn (temp[next], srcp);\n+\t  MEM_IN_STRUCT_P (srcp) = 1;\n+\t  emit_insn (gen_rtx (SET, VOIDmode, temp[next], srcp));\n \t  offset_ld += amount[next];\n \t  active[next] = TRUE;\n \t}\n \n       if (active[phase])\n \t{\n \t  active[phase] = FALSE;\n-\t  dstp = gen_rtx (MEM, mode[phase],\n+\t  dstp = gen_rtx (MEM,\n+\t\t\t  MEM_IN_STRUCT_P (dest_mem) ? mode[phase] : BLKmode,\n \t\t\t  gen_rtx (PLUS, Pmode, dest,\n \t\t\t\t   gen_rtx (CONST_INT, SImode, offset_st)));\n \t  RTX_UNCHANGING_P (dstp) = RTX_UNCHANGING_P (dest_mem);\n \t  MEM_VOLATILE_P (dstp) = MEM_VOLATILE_P (dest_mem);\n-\t  MEM_IN_STRUCT_P (dstp) = MEM_IN_STRUCT_P (dest_mem);\n-\t  emit_move_insn (dstp, temp[phase]);\n+\t  MEM_IN_STRUCT_P (dstp) = 1;\n+\t  emit_insn (gen_rtx (SET, VOIDmode, dstp, temp[phase]));\n \t  offset_st += amount[phase];\n \t}\n     }\n@@ -1491,6 +1493,9 @@ output_file_start (file, f_options, f_len, W_options, W_len)\n   register int pos;\n \n   ASM_FIRST_LINE (file);\n+  if (TARGET_88110\n+      && m88k_version != 0 && strcmp (m88k_version, \"04.00\") >= 0)\n+    fprintf (file, \"\\t%s\\n\", REQUIRES_88110_ASM_OP);\n   output_file_directive (file, main_input_filename);\n   /* Switch to the data section so that the coffsem symbol and the\n      gcc2_compiled. symbol aren't in the text section.  */"}]}