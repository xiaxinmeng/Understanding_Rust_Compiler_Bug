{"sha": "f3e0577c2a2d3463ec8e05ec187ed7ad4f906159", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNlMDU3N2MyYTJkMzQ2M2VjOGUwNWVjMTg3ZWQ3YWQ0ZjkwNjE1OQ==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2018-12-11T11:10:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-11T11:10:22Z"}, "message": "[Ada] Stubs that complete generic subprogram do have a \"prior declaration\"\n\nThe intuition behind the Is_Subprogram_Stub_Without_Prior_Declaration\nutility routine is to detect stubs that act as subprogram declarations\nand False on stubs that act as completions. This behaviour is now fixed\nfor stubs that correspond to generic subprogram declarations.\n\nThis patch affects a routine that is only used in GNATprove, so no\nfrontend test provided. An example where the result changed from True to\nFalse is:\n\n-----------\n-- p.ads --\n-----------\n\npackage P is\n   generic\n   procedure Proc;\nend P;\n\n-----------\n-- p.adb --\n-----------\n\npackage body P is\n   procedure Proc is separate; -- now we return False for this stub\nend P;\n\n----------------\n-- p-proc.adb --\n----------------\n\nseparate (P)\nprocedure Proc is\nbegin\n   null;\nend;\n\n2018-12-11  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* sem_util.adb (Is_Subprogram_Stub_Without_Prior_Declaration):\n\tReturn False on stubs that complete a generic subprogram.\n\t* sem_util.ads: Update corresponding comment.\n\nFrom-SVN: r266992", "tree": {"sha": "f8bfbc39d5b819fdaa1b66fbc3a8fd298c0eb302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8bfbc39d5b819fdaa1b66fbc3a8fd298c0eb302"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3e0577c2a2d3463ec8e05ec187ed7ad4f906159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3e0577c2a2d3463ec8e05ec187ed7ad4f906159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3e0577c2a2d3463ec8e05ec187ed7ad4f906159", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3e0577c2a2d3463ec8e05ec187ed7ad4f906159/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60c14ec73cb0a9fbff8e49e4a94f8b59236225e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c14ec73cb0a9fbff8e49e4a94f8b59236225e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c14ec73cb0a9fbff8e49e4a94f8b59236225e0"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "8e2f54c0c5fd0a9d01d34ecdc802811ab9a657b2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e0577c2a2d3463ec8e05ec187ed7ad4f906159/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e0577c2a2d3463ec8e05ec187ed7ad4f906159/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f3e0577c2a2d3463ec8e05ec187ed7ad4f906159", "patch": "@@ -1,3 +1,9 @@\n+2018-12-11  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Is_Subprogram_Stub_Without_Prior_Declaration):\n+\tReturn False on stubs that complete a generic subprogram.\n+\t* sem_util.ads: Update corresponding comment.\n+\n 2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch4.adb (Analyze_Allocator): In GNATprove mode build a"}, {"sha": "120f1015bb5ef63263159a0ea6e521bcc6054869", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e0577c2a2d3463ec8e05ec187ed7ad4f906159/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e0577c2a2d3463ec8e05ec187ed7ad4f906159/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f3e0577c2a2d3463ec8e05ec187ed7ad4f906159", "patch": "@@ -17471,12 +17471,30 @@ package body Sem_Util is\n      (N : Node_Id) return Boolean\n    is\n    begin\n-      --  A subprogram stub without prior declaration serves as declaration for\n-      --  the actual subprogram body. As such, it has an attached defining\n-      --  entity of E_[Generic_]Function or E_[Generic_]Procedure.\n+      pragma Assert (Nkind (N) = N_Subprogram_Body_Stub);\n \n-      return Nkind (N) = N_Subprogram_Body_Stub\n-        and then Ekind (Defining_Entity (N)) /= E_Subprogram_Body;\n+      case Ekind (Defining_Entity (N)) is\n+\n+         --  A subprogram stub without prior declaration serves as declaration\n+         --  for the actual subprogram body. As such, it has an attached\n+         --  defining entity of E_Function or E_Procedure.\n+\n+         when E_Function\n+            | E_Procedure\n+         =>\n+            return True;\n+\n+         --  Otherwise, it is completes a [generic] subprogram declaration\n+\n+         when E_Generic_Function\n+            | E_Generic_Procedure\n+            | E_Subprogram_Body\n+         =>\n+            return False;\n+\n+         when others =>\n+            raise Program_Error;\n+      end case;\n    end Is_Subprogram_Stub_Without_Prior_Declaration;\n \n    ---------------------------"}, {"sha": "39bb01fb8380283121520e686db80f8782b35206", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3e0577c2a2d3463ec8e05ec187ed7ad4f906159/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3e0577c2a2d3463ec8e05ec187ed7ad4f906159/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=f3e0577c2a2d3463ec8e05ec187ed7ad4f906159", "patch": "@@ -2001,8 +2001,8 @@ package Sem_Util is\n \n    function Is_Subprogram_Stub_Without_Prior_Declaration\n      (N : Node_Id) return Boolean;\n-   --  Return True if N is a subprogram stub with no prior subprogram\n-   --  declaration.\n+   --  Given an N_Subprogram_Body_Stub node N, return True if N is a subprogram\n+   --  stub with no prior subprogram declaration.\n \n    function Is_Suitable_Primitive (Subp_Id : Entity_Id) return Boolean;\n    --  Determine whether arbitrary subprogram Subp_Id may act as a primitive of"}]}