{"sha": "b0248580b68d970788bb43ac3ab8fe3e21ef71be", "node_id": "C_kwDOANBUbNoAKGIwMjQ4NTgwYjY4ZDk3MDc4OGJiNDNhYzNhYjhmZTNlMjFlZjcxYmU", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2023-04-03T08:34:45Z"}, "committer": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2023-04-03T08:34:45Z"}, "message": "build: Check that -lzstd can be linked\n\nRecent Solaris 11.4 SRUs bundle zstd, but only the 64-bit libraries (no\nidea why).  Because of this, in 32-bit builds cc1 etc. fail to link with\nundefined references to various ZSTD_* functions from lto-compress.o.\nThis happens because currently only the presence of <zstd.h> is\nnecessary to enable zstd support in lto-compress.cc etc.\n\nThis patch checks for libzstd first and disables zstd support if\nmissing.\n\nTested on sparc-sun-solaris2.11 with the system installation of zstd\n(64-bit only) and a locally-compiled one (specified with --with-zstd).\n\n2023-03-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n\n\tgcc:\n\t* configure.ac (ZSTD_LIB): Move before zstd.h check.\n\tUnset gcc_cv_header_zstd_h without libzstd.\n\t* configure: Regenerate.", "tree": {"sha": "59bf6a74cf5374ee04c208c1dba76a6b3d4b54f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59bf6a74cf5374ee04c208c1dba76a6b3d4b54f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0248580b68d970788bb43ac3ab8fe3e21ef71be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0248580b68d970788bb43ac3ab8fe3e21ef71be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0248580b68d970788bb43ac3ab8fe3e21ef71be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0248580b68d970788bb43ac3ab8fe3e21ef71be/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fd6d83a4c90325e3c339ad9a4ffab0c4e5b12f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd6d83a4c90325e3c339ad9a4ffab0c4e5b12f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fd6d83a4c90325e3c339ad9a4ffab0c4e5b12f3"}], "stats": {"total": 100, "additions": 51, "deletions": 49}, "files": [{"sha": "c7b26d1927de62d7b3a49ea9ac0a998979659cf2", "filename": "gcc/configure", "status": "modified", "additions": 43, "deletions": 41, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0248580b68d970788bb43ac3ab8fe3e21ef71be/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0248580b68d970788bb43ac3ab8fe3e21ef71be/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=b0248580b68d970788bb43ac3ab8fe3e21ef71be", "patch": "@@ -10622,45 +10622,6 @@ fi\n CXXFLAGS=\"$CXXFLAGS $ZSTD_CPPFLAGS\"\n LDFLAGS=\"$LDFLAGS $ZSTD_LDFLAGS\"\n \n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for zstd.h\" >&5\n-$as_echo_n \"checking for zstd.h... \" >&6; }\n-if ${gcc_cv_header_zstd_h+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  # We require version 1.3.0 or later.  This is the first version that has\n-# ZSTD_getFrameContentSize.\n-cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include <zstd.h>\n-#if ZSTD_VERSION_NUMBER < 10300\n-#error \"need zstd 1.3.0 or better\"\n-#endif\n-int\n-main ()\n-{\n-\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  gcc_cv_header_zstd_h=yes\n-else\n-  gcc_cv_header_zstd_h=no\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-fi\n-\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_header_zstd_h\" >&5\n-$as_echo \"$gcc_cv_header_zstd_h\" >&6; }\n-if test $gcc_cv_header_zstd_h = yes; then\n-\n-$as_echo \"#define HAVE_ZSTD_H 1\" >>confdefs.h\n-\n-elif test \"x$with_zstd\" != x; then\n-    as_fn_error $? \"Unable to find zstd.h.  See config.log for details.\" \"$LINENO\" 5\n-fi\n-\n # LTO can use zstd compression algorithm\n save_LIBS=\"$LIBS\"\n LIBS=\n@@ -10718,11 +10679,52 @@ ac_res=$ac_cv_search_ZSTD_compress\n if test \"$ac_res\" != no; then :\n   test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n \n+else\n+  gcc_cv_header_zstd_h=no\n fi\n \n ZSTD_LIB=\"$LIBS\"\n LIBS=\"$save_LIBS\"\n \n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for zstd.h\" >&5\n+$as_echo_n \"checking for zstd.h... \" >&6; }\n+if ${gcc_cv_header_zstd_h+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  # We require version 1.3.0 or later.  This is the first version that has\n+# ZSTD_getFrameContentSize.\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <zstd.h>\n+#if ZSTD_VERSION_NUMBER < 10300\n+#error \"need zstd 1.3.0 or better\"\n+#endif\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  gcc_cv_header_zstd_h=yes\n+else\n+  gcc_cv_header_zstd_h=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_header_zstd_h\" >&5\n+$as_echo \"$gcc_cv_header_zstd_h\" >&6; }\n+if test $gcc_cv_header_zstd_h = yes; then\n+\n+$as_echo \"#define HAVE_ZSTD_H 1\" >>confdefs.h\n+\n+elif test \"x$with_zstd\" != x; then\n+    as_fn_error $? \"Unable to find zstd.h.  See config.log for details.\" \"$LINENO\" 5\n+fi\n fi\n \n \n@@ -19823,7 +19825,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19826 \"configure\"\n+#line 19828 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19929,7 +19931,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19932 \"configure\"\n+#line 19934 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "09082e8ccae395b902a3ef79eb4f27a1186a331e", "filename": "gcc/configure.ac", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0248580b68d970788bb43ac3ab8fe3e21ef71be/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0248580b68d970788bb43ac3ab8fe3e21ef71be/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=b0248580b68d970788bb43ac3ab8fe3e21ef71be", "patch": "@@ -1515,6 +1515,14 @@ fi\n CXXFLAGS=\"$CXXFLAGS $ZSTD_CPPFLAGS\"\n LDFLAGS=\"$LDFLAGS $ZSTD_LDFLAGS\"\n \n+# LTO can use zstd compression algorithm\n+save_LIBS=\"$LIBS\"\n+LIBS=\n+AC_SEARCH_LIBS(ZSTD_compress, zstd,, gcc_cv_header_zstd_h=no)\n+ZSTD_LIB=\"$LIBS\"\n+LIBS=\"$save_LIBS\"\n+AC_SUBST(ZSTD_LIB)\n+\n AC_MSG_CHECKING(for zstd.h)\n AC_CACHE_VAL(gcc_cv_header_zstd_h,\n # We require version 1.3.0 or later.  This is the first version that has\n@@ -1533,14 +1541,6 @@ if test $gcc_cv_header_zstd_h = yes; then\n elif test \"x$with_zstd\" != x; then\n     as_fn_error $? \"Unable to find zstd.h.  See config.log for details.\" \"$LINENO\" 5\n fi\n-\n-# LTO can use zstd compression algorithm\n-save_LIBS=\"$LIBS\"\n-LIBS=\n-AC_SEARCH_LIBS(ZSTD_compress, zstd)\n-ZSTD_LIB=\"$LIBS\"\n-LIBS=\"$save_LIBS\"\n-AC_SUBST(ZSTD_LIB)\n fi\n \n dnl Disabled until we have a complete test for buggy enum bitfields."}]}