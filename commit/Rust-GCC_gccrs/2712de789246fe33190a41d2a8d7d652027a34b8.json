{"sha": "2712de789246fe33190a41d2a8d7d652027a34b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcxMmRlNzg5MjQ2ZmUzMzE5MGE0MWQyYThkN2Q2NTIwMjdhMzRiOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-12-09T20:46:33Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-12-09T20:46:33Z"}, "message": "PR jit/63854: Document how to run the jit testsuite under valgrind\n\ngcc/jit/ChangeLog:\n\tPR jit/63854\n\t* docs/internals/index.rst (Running under valgrind): New\n\tsubsection.\n\t(docs/_build/texinfo/libgccjit.texi): Regenerate.\n\nFrom-SVN: r218538", "tree": {"sha": "2f23ec32f2336a46a4dde5fa198dfd67ea65c0be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f23ec32f2336a46a4dde5fa198dfd67ea65c0be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2712de789246fe33190a41d2a8d7d652027a34b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2712de789246fe33190a41d2a8d7d652027a34b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2712de789246fe33190a41d2a8d7d652027a34b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2712de789246fe33190a41d2a8d7d652027a34b8/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07ad57c4012578c7f6475f4f0f9d154b9fdef8ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ad57c4012578c7f6475f4f0f9d154b9fdef8ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07ad57c4012578c7f6475f4f0f9d154b9fdef8ea"}], "stats": {"total": 129, "additions": 119, "deletions": 10}, "files": [{"sha": "a346b642546903120839deeb09a5f5914a8986a0", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2712de789246fe33190a41d2a8d7d652027a34b8/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2712de789246fe33190a41d2a8d7d652027a34b8/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=2712de789246fe33190a41d2a8d7d652027a34b8", "patch": "@@ -1,3 +1,10 @@\n+2014-12-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/63854\n+\t* docs/internals/index.rst (Running under valgrind): New\n+\tsubsection.\n+\t(docs/_build/texinfo/libgccjit.texi): Regenerate.\n+\n 2014-12-09  David Malcolm  <dmalcolm@redhat.com>\n \n         PR jit/64206"}, {"sha": "e2afcb50b2ccf9f7d907b1f989a837f66da62211", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 67, "deletions": 10, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2712de789246fe33190a41d2a8d7d652027a34b8/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2712de789246fe33190a41d2a8d7d652027a34b8/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=2712de789246fe33190a41d2a8d7d652027a34b8", "patch": "@@ -197,6 +197,10 @@ Internals\n * Environment variables:: \n * Overview of code structure:: \n \n+Running the test suite\n+\n+* Running under valgrind:: \n+\n @end detailmenu\n @end menu\n \n@@ -6548,16 +6552,69 @@ and once a test has been compiled, you can debug it directly:\n \n @noindent\n \n+@menu\n+* Running under valgrind:: \n+\n+@end menu\n+\n+@node Running under valgrind,,,Running the test suite\n+@anchor{internals/index running-under-valgrind}@anchor{c9}\n+@subsection Running under valgrind\n+\n+\n+The jit testsuite detects if RUN_UNDER_VALGRIND is present in the\n+environment (with any value).  If it is present, it runs the test client\n+code under valgrind@footnote{http://valgrind.org},\n+specifcally, the default\n+memcheck@footnote{http://valgrind.org/docs/manual/mc-manual.html}\n+tool with\n+--leak-check=full@footnote{http://valgrind.org/docs/manual/mc-manual.html#opt.leak-check}.\n+\n+It automatically parses the output from valgrind, injecting XFAIL results if\n+any issues are found, or PASS results if the output is clean.  The output\n+is saved to @code{TESTNAME.exe.valgrind.txt}.\n+\n+For example, the following invocation verbosely runs the testcase\n+@code{test-sum-of-squares.c} under valgrind, showing an issue:\n+\n+@example\n+$ RUN_UNDER_VALGRIND= \\\n+    make check-jit \\\n+      RUNTESTFLAGS=\"-v -v -v jit.exp=test-sum-of-squares.c\"\n+\n+(...verbose log contains detailed valgrind errors, if any...)\n+\n+                === jit Summary ===\n+\n+# of expected passes            28\n+# of expected failures          2\n+\n+$ less testsuite/jit/jit.sum\n+(...other results...)\n+XFAIL: jit.dg/test-sum-of-squares.c: test-sum-of-squares.exe.valgrind.txt: definitely lost: 8 bytes in 1 blocks\n+XFAIL: jit.dg/test-sum-of-squares.c: test-sum-of-squares.exe.valgrind.txt: unsuppressed errors: 1\n+(...other results...)\n+\n+$ less testsuite/jit/test-sum-of-squares.exe.valgrind.txt\n+(...shows full valgrind report for this test case...)\n+@end example\n+\n+@noindent\n+\n+When running under valgrind, it's best to have configured gcc with\n+@code{--enable-valgrind-annotations}, which automatically suppresses\n+various known false positives.\n+\n @node Environment variables,Overview of code structure,Running the test suite,Internals\n-@anchor{internals/index environment-variables}@anchor{c9}\n+@anchor{internals/index environment-variables}@anchor{ca}\n @section Environment variables\n \n \n When running client code against a locally-built libgccjit, three\n environment variables need to be set up:\n \n @geindex environment variable; LD_LIBRARY_PATH\n-@anchor{internals/index envvar-LD_LIBRARY_PATH}@anchor{ca}\n+@anchor{internals/index envvar-LD_LIBRARY_PATH}@anchor{cb}\n @deffn {Environment Variable} LD_LIBRARY_PATH\n \n @quotation\n@@ -6579,7 +6636,7 @@ libgccjit.so.0.0.1: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux),\n @end deffn\n \n @geindex environment variable; PATH\n-@anchor{internals/index envvar-PATH}@anchor{cb}\n+@anchor{internals/index envvar-PATH}@anchor{cc}\n @deffn {Environment Variable} PATH\n \n The library uses a driver executable for converting from .s assembler\n@@ -6598,7 +6655,7 @@ of development.\n @end deffn\n \n @geindex environment variable; LIBRARY_PATH\n-@anchor{internals/index envvar-LIBRARY_PATH}@anchor{cc}\n+@anchor{internals/index envvar-LIBRARY_PATH}@anchor{cd}\n @deffn {Environment Variable} LIBRARY_PATH\n \n The driver executable invokes the linker, and the latter needs to locate\n@@ -6634,7 +6691,7 @@ hello world\n @noindent\n \n @node Overview of code structure,,Environment variables,Internals\n-@anchor{internals/index overview-of-code-structure}@anchor{cd}\n+@anchor{internals/index overview-of-code-structure}@anchor{ce}\n @section Overview of code structure\n \n \n@@ -6733,11 +6790,11 @@ Client Code   . Generated .            libgccjit.so\n     \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>      .               .\n               .           .    \u2502 start of recording::context::compile ()\n               .           .    \u2502     .               .\n-              .           .    \u2502 ACQUIRE MUTEX       .\n-              .           .    \u2502     .               .\n               .           .    \u2502 start of playback::context::compile ()\n               .           .    \u2502   (create tempdir)  .\n               .           .    \u2502     .               .\n+              .           .    \u2502 ACQUIRE MUTEX       .\n+              .           .    \u2502     .               .\n               .           .    V\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500> toplev::main (for now)\n               .           .          .               .       \u2502\n               .           .          .               .   (various code)\n@@ -6791,6 +6848,8 @@ Client Code   . Generated .            libgccjit.so\n               .           .    \u2502     .               .\n               .           .    \u2502 Load DSO (dlopen \"fake.so\")\n               .           .    \u2502     .               .\n+              .           .    \u2502 RELEASE MUTEX       .\n+              .           .    \u2502     .               .\n               .           .    \u2502 end of playback::context::compile ()\n               .           .    \u2502     .               .\n               .           .    \u2502 playback::context dtor\n@@ -6800,8 +6859,6 @@ Client Code   . Generated .            libgccjit.so\n               .           .       \u2502    filesystem at this point)\n               .           .    <\u2500\u2500   .               .\n               .           .    \u2502     .               .\n-              .           .    \u2502 RELEASE MUTEX       .\n-              .           .    \u2502     .               .\n               .           .    \u2502 end of recording::context::compile ()\n    <\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      .               .\n    \u2502          .           .          .               .\n@@ -6905,7 +6962,7 @@ the APIs are not yet set in stone, and they shouldn't be used in\n production yet.\n \n @node Indices and tables,Index,Internals,Top\n-@anchor{index indices-and-tables}@anchor{ce}\n+@anchor{index indices-and-tables}@anchor{cf}\n @unnumbered Indices and tables\n \n "}, {"sha": "1d46818d3972e6f6c67f08d6d9d906c4e89fe609", "filename": "gcc/jit/docs/internals/index.rst", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2712de789246fe33190a41d2a8d7d652027a34b8/gcc%2Fjit%2Fdocs%2Finternals%2Findex.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2712de789246fe33190a41d2a8d7d652027a34b8/gcc%2Fjit%2Fdocs%2Finternals%2Findex.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Finternals%2Findex.rst?ref=2712de789246fe33190a41d2a8d7d652027a34b8", "patch": "@@ -118,6 +118,51 @@ and once a test has been compiled, you can debug it directly:\n              gdb --args \\\n                testsuite/jit/test-factorial.exe\n \n+Running under valgrind\n+**********************\n+\n+The jit testsuite detects if RUN_UNDER_VALGRIND is present in the\n+environment (with any value).  If it is present, it runs the test client\n+code under `valgrind <http://valgrind.org>`_,\n+specifcally, the default\n+`memcheck <http://valgrind.org/docs/manual/mc-manual.html>`_\n+tool with\n+`--leak-check=full\n+<http://valgrind.org/docs/manual/mc-manual.html#opt.leak-check>`_.\n+\n+It automatically parses the output from valgrind, injecting XFAIL results if\n+any issues are found, or PASS results if the output is clean.  The output\n+is saved to ``TESTNAME.exe.valgrind.txt``.\n+\n+For example, the following invocation verbosely runs the testcase\n+``test-sum-of-squares.c`` under valgrind, showing an issue:\n+\n+.. code-block:: console\n+\n+  $ RUN_UNDER_VALGRIND= \\\n+      make check-jit \\\n+        RUNTESTFLAGS=\"-v -v -v jit.exp=test-sum-of-squares.c\"\n+\n+  (...verbose log contains detailed valgrind errors, if any...)\n+\n+                  === jit Summary ===\n+\n+  # of expected passes            28\n+  # of expected failures          2\n+\n+  $ less testsuite/jit/jit.sum\n+  (...other results...)\n+  XFAIL: jit.dg/test-sum-of-squares.c: test-sum-of-squares.exe.valgrind.txt: definitely lost: 8 bytes in 1 blocks\n+  XFAIL: jit.dg/test-sum-of-squares.c: test-sum-of-squares.exe.valgrind.txt: unsuppressed errors: 1\n+  (...other results...)\n+\n+  $ less testsuite/jit/test-sum-of-squares.exe.valgrind.txt\n+  (...shows full valgrind report for this test case...)\n+\n+When running under valgrind, it's best to have configured gcc with\n+:option:`--enable-valgrind-annotations`, which automatically suppresses\n+various known false positives.\n+\n Environment variables\n ---------------------\n When running client code against a locally-built libgccjit, three"}]}