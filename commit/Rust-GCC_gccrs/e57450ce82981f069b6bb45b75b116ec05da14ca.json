{"sha": "e57450ce82981f069b6bb45b75b116ec05da14ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU3NDUwY2U4Mjk4MWYwNjliNmJiNDViNzViMTE2ZWMwNWRhMTRjYQ==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2004-09-16T23:37:00Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2004-09-16T23:37:00Z"}, "message": "sh.md (call): Extend 32-bit addresses to DImode for 32-bit TARGET_SHMEDIA.\n\n\t* config/sh/sh.md (call): Extend 32-bit addresses to DImode\n\tfor 32-bit TARGET_SHMEDIA.\n\t(call_value): Likewise.\n\nFrom-SVN: r87619", "tree": {"sha": "652a2257c51f6d3d85733280d0a23a511f8ba2fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/652a2257c51f6d3d85733280d0a23a511f8ba2fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e57450ce82981f069b6bb45b75b116ec05da14ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57450ce82981f069b6bb45b75b116ec05da14ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e57450ce82981f069b6bb45b75b116ec05da14ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57450ce82981f069b6bb45b75b116ec05da14ca/comments", "author": null, "committer": null, "parents": [{"sha": "67bcc252247fa1d0e45258c2ce927b666e621321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67bcc252247fa1d0e45258c2ce927b666e621321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67bcc252247fa1d0e45258c2ce927b666e621321"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "31e4df25e35c3601ebcf8145068138d1ba919dc6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57450ce82981f069b6bb45b75b116ec05da14ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57450ce82981f069b6bb45b75b116ec05da14ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e57450ce82981f069b6bb45b75b116ec05da14ca", "patch": "@@ -1,3 +1,9 @@\n+2004-09-16  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.md (call): Extend 32-bit addresses to DImode\n+\tfor 32-bit TARGET_SHMEDIA.\n+\t(call_value): Likewise.\n+\n 2004-09-16  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-ssa-operands.c (add_call_clobber_ops): Make read-only"}, {"sha": "5adcac226646b8edbb9fe47fae7b1c825af08154", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57450ce82981f069b6bb45b75b116ec05da14ca/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57450ce82981f069b6bb45b75b116ec05da14ca/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=e57450ce82981f069b6bb45b75b116ec05da14ca", "patch": "@@ -5800,11 +5800,19 @@\n \t      if (GET_MODE (operands[0]) != DImode)\n \t\toperands[0] = gen_rtx_SUBREG (DImode, operands[0], 0);\n \t    }\n-\t  else\n+\t  else if (TARGET_SHMEDIA64)\n \t    {\n \t      operands[0] = shallow_copy_rtx (operands[0]);\n \t      PUT_MODE (operands[0], DImode);\n \t    }\n+\t  else\n+\t    {\n+\t      rtx reg = gen_reg_rtx (DImode);\n+\n+\t      operands[0] = copy_to_mode_reg (SImode, operands[0]);\n+\t      emit_insn (gen_extendsidi2 (reg, operands[0]));\n+\t      operands[0] = reg;\n+\t    }\n \t}\n       if (! target_reg_operand (operands[0], DImode))\n \toperands[0] = copy_to_mode_reg (DImode, operands[0]);\n@@ -6025,11 +6033,19 @@\n \t      if (GET_MODE (operands[1]) != DImode)\n \t\toperands[1] = gen_rtx_SUBREG (DImode, operands[1], 0);\n \t    }\n-\t  else\n+\t  else if (TARGET_SHMEDIA64)\n \t    {\n \t      operands[1] = shallow_copy_rtx (operands[1]);\n \t      PUT_MODE (operands[1], DImode);\n \t    }\n+\t  else\n+\t    {\n+\t      rtx reg = gen_reg_rtx (DImode);\n+\n+\t      operands[1] = copy_to_mode_reg (SImode, operands[1]);\n+\t      emit_insn (gen_extendsidi2 (reg, operands[1]));\n+\t      operands[1] = reg;\n+\t    }\n \t}\n       if (! target_reg_operand (operands[1], DImode))\n \toperands[1] = copy_to_mode_reg (DImode, operands[1]);"}]}