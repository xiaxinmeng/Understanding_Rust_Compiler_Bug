{"sha": "8d1e67c6c4542d8e9f0b6b509d875a61bca98d66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQxZTY3YzZjNDU0MmQ4ZTlmMGI2YjUwOWQ4NzVhNjFiY2E5OGQ2Ng==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-08-30T18:54:20Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-08-30T18:54:20Z"}, "message": "cp-tree.h (begin_init_stmts): Declare.\n\n\t* cp-tree.h (begin_init_stmts): Declare.\n\t(finish_init_stmts): Likewise.\n\t* cvt.c (build_up_reference): Wrap the declaration of a temporary\n\tin a statement-expression so that we will see it when expanding\n\ttree structure later.\n\t* init.c (begin_init_stmts): Don't make it static.\n\t(finish_init_stmts): Likewise.\n\nFrom-SVN: r28984", "tree": {"sha": "14f516236d17033bb3856363e7c682c523297efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14f516236d17033bb3856363e7c682c523297efa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d1e67c6c4542d8e9f0b6b509d875a61bca98d66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1e67c6c4542d8e9f0b6b509d875a61bca98d66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1e67c6c4542d8e9f0b6b509d875a61bca98d66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1e67c6c4542d8e9f0b6b509d875a61bca98d66/comments", "author": null, "committer": null, "parents": [{"sha": "3c5c0849a9edab2c0c847205d4e9af84376b8240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5c0849a9edab2c0c847205d4e9af84376b8240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5c0849a9edab2c0c847205d4e9af84376b8240"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "a77ca97bc9e18d3578f493524b04fc5572954462", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1e67c6c4542d8e9f0b6b509d875a61bca98d66/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1e67c6c4542d8e9f0b6b509d875a61bca98d66/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d1e67c6c4542d8e9f0b6b509d875a61bca98d66", "patch": "@@ -1,5 +1,13 @@\n 1999-08-30  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (begin_init_stmts): Declare.\n+\t(finish_init_stmts): Likewise.\n+\t* cvt.c (build_up_reference): Wrap the declaration of a temporary\n+\tin a statement-expression so that we will see it when expanding\n+\ttree structure later.\n+\t* init.c (begin_init_stmts): Don't make it static.\n+\t(finish_init_stmts): Likewise.\n+\n \t* cp-tree.h (start_handler_parms): New function.\n \t(expand_start_catch_block): Take only one parameter.\n \t(start_handler_parms): New function."}, {"sha": "82fb68dc399c95c181e1aadd5f4d3c26d98757a4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1e67c6c4542d8e9f0b6b509d875a61bca98d66/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1e67c6c4542d8e9f0b6b509d875a61bca98d66/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8d1e67c6c4542d8e9f0b6b509d875a61bca98d66", "patch": "@@ -3129,6 +3129,8 @@ extern tree build_delete\t\t\tPROTO((tree, tree, tree, int, int));\n extern tree build_vbase_delete\t\t\tPROTO((tree, tree));\n extern tree build_vec_delete\t\t\tPROTO((tree, tree, tree, tree, int));\n extern tree create_temporary_var                PROTO((tree));\n+extern void begin_init_stmts                    PROTO((tree *, tree *));\n+extern tree finish_init_stmts                   PROTO((tree, tree));\n \n /* in input.c */\n "}, {"sha": "73e76dd87ddcf1d8c2fd4684b3bbbfb24a839a4d", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1e67c6c4542d8e9f0b6b509d875a61bca98d66/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1e67c6c4542d8e9f0b6b509d875a61bca98d66/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=8d1e67c6c4542d8e9f0b6b509d875a61bca98d66", "patch": "@@ -339,22 +339,41 @@ build_up_reference (type, arg, flags)\n   tree rval;\n   tree argtype = TREE_TYPE (arg);\n   tree target_type = TREE_TYPE (type);\n+  tree stmt_expr = NULL_TREE;\n \n   my_friendly_assert (TREE_CODE (type) == REFERENCE_TYPE, 187);\n \n   if ((flags & DIRECT_BIND) && ! real_lvalue_p (arg))\n     {\n+      tree compound_stmt;\n+\n+      /* Create a new temporary variable.  */\n       tree targ = arg;\n       if (toplevel_bindings_p ())\n \targ = get_temp_name (argtype, 1);\n       else\n \t{\n \t  arg = pushdecl (build_decl (VAR_DECL, NULL_TREE, argtype));\n \t  DECL_ARTIFICIAL (arg) = 1;\n+\t  /* Generate code to initialize it.  We wrap it in a\n+\t     statement-expression so that when we are building a\n+\t     statement-tree we will have a representation of this\n+\t     declaration.  */\n+\t  begin_init_stmts (&stmt_expr, &compound_stmt);\n \t}\n+\n+      /* Process the initializer for the declaration.  */\n       DECL_INITIAL (arg) = targ;\n       cp_finish_decl (arg, targ, NULL_TREE, 0,\n \t\t      LOOKUP_ONLYCONVERTING|DIRECT_BIND);\n+\n+      /* And wrap up the statement-expression, if necessary.  */\n+      if (!toplevel_bindings_p ())\n+\t{\n+\t  if (building_stmt_tree ())\n+\t    add_decl_stmt (arg);\n+\t  stmt_expr = finish_init_stmts (stmt_expr, compound_stmt);\n+\t}\n     }\n   else if (!(flags & DIRECT_BIND) && ! lvalue_p (arg))\n     {\n@@ -389,6 +408,13 @@ build_up_reference (type, arg, flags)\n       = convert_to_pointer_force (build_pointer_type (target_type), rval);\n   rval = build1 (NOP_EXPR, type, rval);\n   TREE_CONSTANT (rval) = TREE_CONSTANT (TREE_OPERAND (rval, 0));\n+\n+  /* If we created and initialized a new temporary variable, add the\n+     representation of that initialization to the RVAL.  */\n+  if (stmt_expr)\n+    rval = build (COMPOUND_EXPR, TREE_TYPE (rval), stmt_expr, rval);\n+\n+  /* And return the result.  */\n   return rval;\n }\n "}, {"sha": "08eaf0bd86ccfd8b9f38056cd5751826f6f2d6fd", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1e67c6c4542d8e9f0b6b509d875a61bca98d66/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1e67c6c4542d8e9f0b6b509d875a61bca98d66/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=8d1e67c6c4542d8e9f0b6b509d875a61bca98d66", "patch": "@@ -60,8 +60,6 @@ static tree initializing_context PROTO((tree));\n static tree build_java_class_ref PROTO((tree));\n static void expand_cleanup_for_base PROTO((tree, tree));\n static tree get_temp_regvar PROTO((tree, tree));\n-static void begin_init_stmts PROTO((tree *, tree *));\n-static tree finish_init_stmts PROTO((tree, tree));\n \n /* Cache the identifier nodes for the magic field of a new cookie.  */\n static tree nc_nelts_field_id;\n@@ -1007,7 +1005,7 @@ expand_member_init (exp, name, init)\n    pass them back to finish_init_stmts when the expression is\n    complete.  */\n \n-static void\n+void\n begin_init_stmts (stmt_expr_p, compound_stmt_p)\n      tree *stmt_expr_p;\n      tree *compound_stmt_p;\n@@ -1020,7 +1018,7 @@ begin_init_stmts (stmt_expr_p, compound_stmt_p)\n /* Finish out the statement-expression begun by the previous call to\n    begin_init_stmts.  Returns the statement-expression itself.  */\n \n-static tree\n+tree\n finish_init_stmts (stmt_expr, compound_stmt)\n      tree stmt_expr;\n      tree compound_stmt;"}, {"sha": "2324a374e690d798d00bd1e1b81ab45fc8b43f43", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash53.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d1e67c6c4542d8e9f0b6b509d875a61bca98d66/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash53.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d1e67c6c4542d8e9f0b6b509d875a61bca98d66/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash53.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash53.C?ref=8d1e67c6c4542d8e9f0b6b509d875a61bca98d66", "patch": "@@ -0,0 +1,16 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+struct S \n+{\n+};\n+\n+S g ();\n+\n+template <class T>\n+void f ()\n+{\n+  const S& s = g ();\n+}\n+\n+template void f<int>();"}]}