{"sha": "86368122e68f2b697cf898523d408bea831fa6e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYzNjgxMjJlNjhmMmI2OTdjZjg5ODUyM2Q0MDhiZWE4MzFmYTZlNw==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-10-31T23:34:59Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-10-31T23:34:59Z"}, "message": "cpp.texi: Update for new command line assertion syntax.\n\n\t* cpp.texi: Update for new command line assertion syntax.\n\t* cpplib.c (cpp_define): Simplify a bit.\n\t(cpp_assert, cpp_unassert): Use handle_assertion.\n\t(handle_assertion): New function; accept new command line\n\tsyntax with '='.\n\t* testsuite/gcc.dg/cpp/assert3.c: New tests.\n\nFrom-SVN: r37171", "tree": {"sha": "e504a7a4e2c4a7bde207adaf17b32b6b047226da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e504a7a4e2c4a7bde207adaf17b32b6b047226da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86368122e68f2b697cf898523d408bea831fa6e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86368122e68f2b697cf898523d408bea831fa6e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86368122e68f2b697cf898523d408bea831fa6e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86368122e68f2b697cf898523d408bea831fa6e7/comments", "author": null, "committer": null, "parents": [{"sha": "e199824280b56df47f390fbbdc727f9219d4408f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e199824280b56df47f390fbbdc727f9219d4408f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e199824280b56df47f390fbbdc727f9219d4408f"}], "stats": {"total": 85, "additions": 64, "deletions": 21}, "files": [{"sha": "b27a49a110ea60e64d56634b2984e499b9dcbd2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86368122e68f2b697cf898523d408bea831fa6e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86368122e68f2b697cf898523d408bea831fa6e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86368122e68f2b697cf898523d408bea831fa6e7", "patch": "@@ -1,3 +1,12 @@\n+2000-10-31  Neil Booth  <neilb@earthling.net>\n+\n+\t* cpp.texi: Update for new command line assertion syntax.\n+\t* cpplib.c (cpp_define): Simplify a bit.\n+\t(cpp_assert, cpp_unassert): Use handle_assertion.\n+\t(handle_assertion): New function; accept new command line\n+\tsyntax with '='.\n+\t* testsuite/gcc.dg/cpp/assert3.c: New tests.\n+\n 2000-10-31  Neil Booth  <neilb@earthling.net>\n \n \t* cppmacro.c (STDC_0_IN_SYSTEM_HEADERS): Define to 0 if"}, {"sha": "457cbf2d9b61c0c735fd4877f6f21f4e921c4af7", "filename": "gcc/cpp.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86368122e68f2b697cf898523d408bea831fa6e7/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86368122e68f2b697cf898523d408bea831fa6e7/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=86368122e68f2b697cf898523d408bea831fa6e7", "patch": "@@ -3364,12 +3364,14 @@ Define the macros @var{__GNUC__}, @var{__GNUC_MINOR__} and\n @var{__GNUC_PATCHLEVEL__}. These are defined automatically when you use\n @samp{gcc -E}; you can turn them off in that case with @samp{-no-gcc}.\n \n-@item -A @var{predicate}(@var{answer})\n+@item -A @var{predicate}=@var{answer}\n @findex -A\n Make an assertion with the predicate @var{predicate} and answer\n-@var{answer}.  @xref{Assertions}.\n+@var{answer}.  This form is preferred to the older form @samp{-A\n+@var{predicate}(@var{answer})}, which is still supported, because\n+it does not use shell special characters.  @xref{Assertions}.\n \n-@item -A -@var{predicate}(@var{answer})\n+@item -A -@var{predicate}=@var{answer}\n Disable an assertion with the predicate @var{predicate} and answer\n @var{answer}.  Specifying no predicate, by @samp{-A-} or @samp{-A -},\n disables all predefined assertions and all assertions preceding it on"}, {"sha": "cd14ba4e83a21cea036ffc2a2649bd48c90a1fd2", "filename": "gcc/cpplib.c", "status": "modified", "additions": 40, "deletions": 18, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86368122e68f2b697cf898523d408bea831fa6e7/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86368122e68f2b697cf898523d408bea831fa6e7/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=86368122e68f2b697cf898523d408bea831fa6e7", "patch": "@@ -107,6 +107,7 @@ static cpp_hashnode *parse_assertion PARAMS ((cpp_reader *, struct answer **,\n \t\t\t\t\t      int));\n static struct answer ** find_answer PARAMS ((cpp_hashnode *,\n \t\t\t\t\t     const struct answer *));\n+static void handle_assertion\tPARAMS ((cpp_reader *, const char *, int));\n \n /* This is the table of directive handlers.  It is ordered by\n    frequency of occurrence; the numbers at the end are directive\n@@ -1608,29 +1609,25 @@ cpp_define (pfile, str)\n   char *buf, *p;\n   size_t count;\n \n-  p = strchr (str, '=');\n   /* Copy the entire option so we can modify it. \n      Change the first \"=\" in the string to a space.  If there is none,\n-     tack \" 1\" on the end.  Then add a newline and a NUL.  */\n-  \n+     tack \" 1\" on the end.  */\n+\n+  /* Length including the null.  */  \n+  count = strlen (str);\n+  buf = (char *) alloca (count + 2);\n+  memcpy (buf, str, count);\n+\n+  p = strchr (str, '=');\n   if (p)\n-    {\n-      count = strlen (str) + 2;\n-      buf = (char *) alloca (count);\n-      memcpy (buf, str, count - 2);\n-      buf[p - str] = ' ';\n-      buf[count - 2] = '\\n';\n-      buf[count - 1] = '\\0';\n-    }\n+    buf[p - str] = ' ';\n   else\n     {\n-      count = strlen (str) + 4;\n-      buf = (char *) alloca (count);\n-      memcpy (buf, str, count - 4);\n-      strcpy (&buf[count-4], \" 1\\n\");\n+      buf[count++] = ' ';\n+      buf[count++] = '1';\n     }\n \n-  run_directive (pfile, T_DEFINE, buf, count - 1, 0);\n+  run_directive (pfile, T_DEFINE, buf, count, 0);\n }\n \n /* Slight variant of the above for use by initialize_builtins, which (a)\n@@ -1659,7 +1656,7 @@ cpp_assert (pfile, str)\n      cpp_reader *pfile;\n      const char *str;\n {\n-  run_directive (pfile, T_ASSERT, str, strlen (str), 0);\n+  handle_assertion (pfile, str, T_ASSERT);\n }\n \n /* Process STR as if it appeared as the body of an #unassert. */\n@@ -1668,9 +1665,34 @@ cpp_unassert (pfile, str)\n      cpp_reader *pfile;\n      const char *str;\n {\n-  run_directive (pfile, T_UNASSERT, str, strlen (str), 0);\n+  handle_assertion (pfile, str, T_UNASSERT);\n }  \n \n+/* Common code for cpp_assert (-A) and cpp_unassert (-A-).  */\n+static void\n+handle_assertion (pfile, str, type)\n+     cpp_reader *pfile;\n+     const char *str;\n+     int type;\n+{\n+  size_t count = strlen (str);\n+  const char *p = strchr (str, '=');\n+\n+  if (p)\n+    {\n+      /* Copy the entire option so we can modify it.  Change the first\n+\t \"=\" in the string to a '(', and tack a ')' on the end.  */\n+      char *buf = (char *) alloca (count + 1);\n+\n+      memcpy (buf, str, count);\n+      buf[p - str] = '(';\n+      buf[count++] = ')';\n+      str = buf;\n+    }\n+\n+  run_directive (pfile, type, str, count, 0);\n+}\n+\n /* Determine whether the identifier ID, of length LEN, is a defined macro.  */\n int\n cpp_defined (pfile, id, len)"}, {"sha": "df9b19fdaf98f9fadc034d23d1ff5761cde0938e", "filename": "gcc/testsuite/gcc.dg/cpp/assert3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86368122e68f2b697cf898523d408bea831fa6e7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86368122e68f2b697cf898523d408bea831fa6e7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert3.c?ref=86368122e68f2b697cf898523d408bea831fa6e7", "patch": "@@ -0,0 +1,10 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-A abc=def -A abc\\(ghi\\) \\\"-Aabc = jkl\\\" -A abc=mno -A -abc=mno\" } */\n+\n+/* Test -A command line syntax.  Source Neil Booth.  31 Oct 2000.  */\n+\n+#if !#abc (def) || !#abc (ghi) || !#abc (jkl) || #abc(mno)\n+#error Command line -A assertions\n+#endif"}]}