{"sha": "7f067400109efa816d68d13bae1a3d20297ad51b", "node_id": "C_kwDOANBUbNoAKDdmMDY3NDAwMTA5ZWZhODE2ZDY4ZDEzYmFlMWEzZDIwMjk3YWQ1MWI", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-10-29T12:12:04Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-10-29T12:12:04Z"}, "message": "Repair --disable-sjlj-exceptions\n\nIt was broken by:\n\n\t2022-08-31  Martin Liska  <mliska@suse.cz>\n\n\tconfig.build: Remove deprecated ports.\n\tconfig.gcc: Likewise.\n\tconfig.host: Likewise.\n\tconfigure.ac: Likewise.\n\tconfigure: Regenerate.\n\tconfig/pa/pa-hpux10.h: Removed.\n\tconfig/pa/pa-hpux10.opt: Removed.\n\tconfig/pa/t-dce-thr: Removed.\n\ngcc/\n\t* configure.ac (sjlj-exceptions): Restore dropped line.\n\t* configure: Regenerate.", "tree": {"sha": "ada88f2ae84a2f42e734da8775bf6caf6bdb746c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ada88f2ae84a2f42e734da8775bf6caf6bdb746c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f067400109efa816d68d13bae1a3d20297ad51b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f067400109efa816d68d13bae1a3d20297ad51b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f067400109efa816d68d13bae1a3d20297ad51b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f067400109efa816d68d13bae1a3d20297ad51b/comments", "author": null, "committer": null, "parents": [{"sha": "96ba0c369ee86d61b6df2f8fb8364028a113acf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ba0c369ee86d61b6df2f8fb8364028a113acf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ba0c369ee86d61b6df2f8fb8364028a113acf7"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "0ee4be40e5551c7600e9a7050b487d0a01b60818", "filename": "gcc/configure", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f067400109efa816d68d13bae1a3d20297ad51b/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f067400109efa816d68d13bae1a3d20297ad51b/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=7f067400109efa816d68d13bae1a3d20297ad51b", "patch": "@@ -12684,7 +12684,9 @@ objext='.o'\n # With Setjmp/Longjmp based exception handling.\n # Check whether --enable-sjlj-exceptions was given.\n if test \"${enable_sjlj_exceptions+set}\" = set; then :\n-  enableval=$enable_sjlj_exceptions; case $target in\n+  enableval=$enable_sjlj_exceptions; force_sjlj_exceptions=yes\n+else\n+  case $target in\n   lm32*-*-*)\n      force_sjlj_exceptions=yes\n      enableval=yes\n@@ -19718,7 +19720,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19721 \"configure\"\n+#line 19723 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19824,7 +19826,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19827 \"configure\"\n+#line 19829 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "4ecccffc32488a8bdd1301e735c9cc6883efb1b5", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f067400109efa816d68d13bae1a3d20297ad51b/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f067400109efa816d68d13bae1a3d20297ad51b/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=7f067400109efa816d68d13bae1a3d20297ad51b", "patch": "@@ -1805,6 +1805,7 @@ AC_SUBST(objext)\n AC_ARG_ENABLE(sjlj-exceptions,\n [AS_HELP_STRING([--enable-sjlj-exceptions],\n                 [arrange to use setjmp/longjmp exception handling])],\n+[force_sjlj_exceptions=yes],\n [case $target in\n   lm32*-*-*)\n      force_sjlj_exceptions=yes"}]}