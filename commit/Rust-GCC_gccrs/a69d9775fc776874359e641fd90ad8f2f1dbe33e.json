{"sha": "a69d9775fc776874359e641fd90ad8f2f1dbe33e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY5ZDk3NzVmYzc3Njg3NDM1OWU2NDFmZDkwYWQ4ZjJmMWRiZTMzZQ==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2010-09-22T09:26:03Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2010-09-22T09:26:03Z"}, "message": "cplus-dem.c (ada_demangle): Add comments.\n\n2010-09-22 Tristan Gingold  <gingold@adacore.com>\n\n\t* cplus-dem.c (ada_demangle): Add comments.\n\tHandle stream and controlled type operations.\n\tDecoding of some uppercase letters moved before separators.\n\t* testsuite/demangle-expected: Add tests.\n\nFrom-SVN: r164518", "tree": {"sha": "e1c2cf0c37c2d4e57bdeb4106fffcdb0e21bea2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1c2cf0c37c2d4e57bdeb4106fffcdb0e21bea2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a69d9775fc776874359e641fd90ad8f2f1dbe33e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a69d9775fc776874359e641fd90ad8f2f1dbe33e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a69d9775fc776874359e641fd90ad8f2f1dbe33e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a69d9775fc776874359e641fd90ad8f2f1dbe33e/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23c1da7a37b3ecc21b08d8e0817c5aa4518a3ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c1da7a37b3ecc21b08d8e0817c5aa4518a3ee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23c1da7a37b3ecc21b08d8e0817c5aa4518a3ee9"}], "stats": {"total": 263, "additions": 174, "deletions": 89}, "files": [{"sha": "77f7fe34752a7d28ccbfa09cf6d6ce30f778b2eb", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69d9775fc776874359e641fd90ad8f2f1dbe33e/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69d9775fc776874359e641fd90ad8f2f1dbe33e/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=a69d9775fc776874359e641fd90ad8f2f1dbe33e", "patch": "@@ -1,36 +1,17 @@\n+2010-09-22 Tristan Gingold  <gingold@adacore.com>\n+\n+\t* cplus-dem.c (ada_demangle): Add comments.\n+\tHandle stream and controlled type operations.\n+\tDecoding of some uppercase letters moved before separators.\n+\t* testsuite/demangle-expected: Add tests.\n+\n 2010-09-10  James Lyon  <jameslyon0@googlemail.com>\n \n \thttp://sourceware.org/bugzilla/show_bug.cgi?id=11572\n \t* cp-demangle.c (d_find_pack): Add case for\n \tDEMANGLE_COMPONENT_LAMBDA.\n \t* testsuite/demangle-expected: Add regression test.\n \n-diff --git a/libiberty/cp-demangle.c b/libiberty/cp-demangle.c\n-index d2d15e9..39c8cc0 100644\n---- a/libiberty/cp-demangle.c\n-+++ b/libiberty/cp-demangle.c\n-@@ -3480,6 +3480,7 @@ d_find_pack (struct d_print_info *dpi,\n-\tcase DEMANGLE_COMPONENT_PACK_EXPANSION:\n-\treturn NULL;\n-\n-+    case DEMANGLE_COMPONENT_LAMBDA:\n-\tcase DEMANGLE_COMPONENT_NAME:\n-\tcase DEMANGLE_COMPONENT_OPERATOR:\n-\tcase DEMANGLE_COMPONENT_BUILTIN_TYPE:\n-diff --git a/libiberty/testsuite/demangle-expected b/libiberty/testsuite/demangle-expected\n-index 15a0fe7..0085564 100644\n---- a/libiberty/testsuite/demangle-expected\n-+++ b/libiberty/testsuite/demangle-expected\n-@@ -4052,3 +4052,8 @@ prot.lock.update\n-\t--format=gnu-v3\n-\tDFA\n-\tDFA\n-+#\n-+# http://sourceware.org/bugzilla/show_bug.cgi?id=11572\n-+--format=auto\n-+_ZN3Psi7VariantIIcPKcEE5visitIIRZN11VariantTest9TestVisit11test_methodEvEUlS2_E0_RZNS6_11test_methodEvEUlcE1_RZNS6_11test_methodEvEUlNS_4NoneEE_EEENS_13VariantDetail19SelectVisitorResultIIDpT_EE4typeEDpOSG_\n-+Psi::VariantDetail::SelectVisitorResult<VariantTest::TestVisit::test_method()::{lambda(char const*)#2}&, VariantTest::TestVisit::test_method()::{lambda(char)#3}&, VariantTest::TestVisit::test_method()::{lambda(Psi::None)#1}&>::type Psi::Variant<char, char const*>::visit<VariantTest::TestVisit::test_method()::{lambda(char const*)#2}&, VariantTest::TestVisit::test_method()::{lambda(char)#3}&, VariantTest::TestVisit::test_method()::{lambda(Psi::None)#1}&>((VariantTest::TestVisit::test_method()::{lambda(Psi::None)#1}&&&)...)\n-\n 2010-09-08  Tristan Gingold  <gingold@adacore.com>\n \n \tPR 44001"}, {"sha": "0d812d5ef83e2f2d200098c43b2481e16e94e3d2", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 137, "deletions": 63, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69d9775fc776874359e641fd90ad8f2f1dbe33e/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69d9775fc776874359e641fd90ad8f2f1dbe33e/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=a69d9775fc776874359e641fd90ad8f2f1dbe33e", "patch": "@@ -895,25 +895,28 @@ ada_demangle (const char *mangled, int option ATTRIBUTE_UNUSED)\n \n   /* Most of the demangling will trivially remove chars.  Operator names\n      may add one char but because they are always preceeded by '__' which is\n-     replaced by '.', they eventually never expand the size.  '___elabs' and\n-     '___elabb' add only 2 chars, but they occur only once.  */\n-  len0 = strlen (mangled) + 2 + 1;\n+     replaced by '.', they eventually never expand the size.\n+     A few special names such as '___elabs' add a few chars (at most 7), but\n+     they occur only once.  */\n+  len0 = strlen (mangled) + 7 + 1;\n   demangled = XNEWVEC (char, len0);\n   \n   d = demangled;\n   p = mangled;\n   while (1)\n     {\n-      /* Convert name, which is always lower-case.  */\n+      /* An entity names is expected.  */\n       if (ISLOWER (*p))\n         {\n+          /* An identifier, which is always lower case.  */\n           do\n             *d++ = *p++;\n           while (ISLOWER(*p) || ISDIGIT (*p)\n                  || (p[0] == '_' && (ISLOWER (p[1]) || ISDIGIT (p[1]))));\n         }\n       else if (p[0] == 'O')\n         {\n+          /* An operator name.  */\n           static const char * const operators[][2] =\n             {{\"Oabs\", \"abs\"},  {\"Oand\", \"and\"},    {\"Omod\", \"mod\"},\n              {\"Onot\", \"not\"},  {\"Oor\", \"or\"},      {\"Orem\", \"rem\"},\n@@ -924,22 +927,22 @@ ada_demangle (const char *mangled, int option ATTRIBUTE_UNUSED)\n              {\"Oexpon\", \"**\"}, {NULL, NULL}};\n           int k;\n \n-          for (k = 0; operators[k][0]; k++)\n+          for (k = 0; operators[k][0] != NULL; k++)\n             {\n-              int l = strlen (operators[k][0]);\n-              if (!strncmp (p, operators[k][0], l))\n+              size_t slen = strlen (operators[k][0]);\n+              if (strncmp (p, operators[k][0], slen) == 0)\n                 {\n-                  p += l;\n-                  l = strlen (operators[k][1]);\n+                  p += slen;\n+                  slen = strlen (operators[k][1]);\n                   *d++ = '\"';\n-                  memcpy (d, operators[k][1], l);\n-                  d += l;\n+                  memcpy (d, operators[k][1], slen);\n+                  d += slen;\n                   *d++ = '\"';\n                   break;\n                 }\n             }\n           /* Operator not found.  */\n-          if (!operators[k][0])\n+          if (operators[k][0] == NULL)\n             goto unknown;\n         }\n       else\n@@ -948,31 +951,142 @@ ada_demangle (const char *mangled, int option ATTRIBUTE_UNUSED)\n           goto unknown;\n         }\n \n+      /* The name can be directly followed by some uppercase letters.  */\n+      if (p[0] == 'T' && p[1] == 'K')\n+        {\n+          /* Task stuff.  */\n+          if (p[2] == 'B' && p[3] == 0)\n+            {\n+              /* Subprogram for task body.  */\n+              break;\n+            }\n+          else if (p[2] == '_' && p[3] == '_')\n+            {\n+              /* Inner declarations in a task.  */\n+              p += 4;\n+              *d++ = '.';\n+              continue;\n+            }\n+          else\n+            goto unknown;\n+        }\n+      if (p[0] == 'E' && p[1] == 0)\n+        {\n+          /* Exception name.  */\n+          goto unknown;\n+        }\n+      if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)\n+        {\n+          /* Protected type subprogram.  */\n+          break;\n+        }\n+      if ((*p == 'N' || *p == 'S') && p[1] == 0)\n+        {\n+          /* Enumerated type name table.  */\n+          goto unknown;\n+        }\n+      if (p[0] == 'X')\n+        {\n+          /* Body nested.  */\n+          p++;\n+          while (p[0] == 'n' || p[0] == 'b')\n+            p++;\n+        }\n+      if (p[0] == 'S' && p[1] != 0 && (p[2] == '_' || p[2] == 0))\n+        {\n+          /* Stream operations.  */\n+          const char *name;\n+          switch (p[1])\n+            {\n+            case 'R':\n+              name = \"'Read\";\n+              break;\n+            case 'W':\n+              name = \"'Write\";\n+              break;\n+            case 'I':\n+              name = \"'Input\";\n+              break;\n+            case 'O':\n+              name = \"'Output\";\n+              break;\n+            default:\n+              goto unknown;\n+            }\n+          p += 2;\n+          strcpy (d, name);\n+          d += strlen (name);\n+        }\n+      else if (p[0] == 'D')\n+        {\n+          /* Controlled type operation.  */\n+          const char *name;\n+          switch (p[1])\n+            {\n+            case 'F':\n+              name = \".Finalize\";\n+              break;\n+            case 'A':\n+              name = \".Adjust\";\n+              break;\n+            default:\n+              goto unknown;\n+            }\n+          strcpy (d, name);\n+          d += strlen (name);\n+          break;\n+        }\n+\n       if (p[0] == '_')\n         {\n           /* Separator.  */\n           if (p[1] == '_')\n             {\n               /* Standard separator.  Handled first.  */\n               p += 2;\n+\n               if (ISDIGIT (*p))\n                 {\n-                  /* Overloading.  */\n+                  /* Overloading number.  */\n                   do\n                     p++;\n                   while (ISDIGIT (*p) || (p[0] == '_' && ISDIGIT (p[1])));\n+                  if (*p == 'X')\n+                    {\n+                      p++;\n+                      while (p[0] == 'n' || p[0] == 'b')\n+                        p++;\n+                    }\n                 }\n-              else if (*p == '_' && !strcmp (p + 1, \"elabb\"))\n-                {\n-                  memcpy (d, \"'Elab_Body\", 10);\n-                  d += 10;\n-                  break;\n-                }\n-              else if (*p == '_' && !strcmp (p + 1, \"elabs\"))\n+              else if (p[0] == '_' && p[1] != '_')\n                 {\n-                  memcpy (d, \"'Elab_Spec\", 10);\n-                  d += 10;\n-                  break;\n+                  /* Special names.  */\n+                  static const char * const special[][2] = {\n+                    { \"_elabb\", \"'Elab_Body\" },\n+                    { \"_elabs\", \"'Elab_Spec\" },\n+                    { \"_size\", \"'Size\" },\n+                    { \"_alignment\", \"'Alignment\" },\n+                    { \"_assign\", \".\\\":=\\\"\" },\n+                    { NULL, NULL }\n+                  };\n+                  int k;\n+\n+                  for (k = 0; special[k][0] != NULL; k++)\n+                    {\n+                      size_t slen = strlen (special[k][0]);\n+                      if (strncmp (p, special[k][0], slen) == 0)\n+                        {\n+                          p += slen;\n+                          slen = strlen (special[k][1]);\n+                          memcpy (d, special[k][1], slen);\n+                          d += slen;\n+                          break;\n+                        }\n+                    }\n+                  if (special[k][0] != NULL)\n+                    break;\n+                  else\n+                    goto unknown;\n                 }\n               else\n                 {\n@@ -995,46 +1109,6 @@ ada_demangle (const char *mangled, int option ATTRIBUTE_UNUSED)\n             goto unknown;\n         }\n \n-      if (p[0] == 'T' && p[1] == 'K')\n-        {\n-          if (p[2] == 'B' && p[3] == 0)\n-            {\n-              /* Subprogram for task body.  */\n-              break;\n-            }\n-          else if (p[2] == '_' && p[3] == '_')\n-            {\n-              /* Inner declarations in a task.  */\n-              p += 4;\n-              *d++ = '.';\n-              continue;\n-            }\n-          else\n-            goto unknown;\n-        }\n-      if ((p[0] == 'P' || p[0] == 'N') && p[1] == 0)\n-        {\n-          /* Protected type subprogram.  */\n-          break;\n-        }\n-      if (p[0] == 'E' && p[1] == 0)\n-        {\n-          /* Exception name.  */\n-          goto unknown;\n-        }\n-      if (*p == 'N' || *p == 'S')\n-        {\n-          /* Enumerated type name table.  */\n-          goto unknown;\n-        }\n-      if (p[0] == 'X')\n-        {\n-          /* Body nested.  */\n-          if (p[1] == 'n' || p[1] == 'b')\n-            p += 2;\n-          else if (p[1] == 0)\n-            p++;\n-        }\n       if (p[0] == '.' && ISDIGIT (p[1]))\n         {\n           /* Nested subprogram.  */"}, {"sha": "0507ce866513a43b2ee15627bed7157e80be6d97", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69d9775fc776874359e641fd90ad8f2f1dbe33e/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69d9775fc776874359e641fd90ad8f2f1dbe33e/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=a69d9775fc776874359e641fd90ad8f2f1dbe33e", "patch": "@@ -4047,6 +4047,36 @@ prot.lock.update\n --format=gnat\n prot__lock__update_E6s\n prot.lock.update\n+# Controlled types\n+--format=gnat\n+gnat__sockets__sockets_library_controllerDF__2\n+gnat.sockets.sockets_library_controller.Finalize\n+--format=gnat\n+system__partition_interface__racw_stub_typeDA\n+system.partition_interface.racw_stub_type.Adjust\n+# Stream operations\n+--format=gnat\n+gnat__wide_wide_string_split__slice_setSR__2\n+gnat.wide_wide_string_split.slice_set'Read\n+--format=gnat\n+ada__real_time__timing_events__events__listSW__2Xnn\n+ada.real_time.timing_events.events.list'Write\n+--format=gnat\n+system__finalization_root__root_controlledSI\n+system.finalization_root.root_controlled'Input\n+--format=gnat\n+ada__finalization__limited_controlledSO__2\n+ada.finalization.limited_controlled'Output\n+# Tagged types\n+--format=gnat\n+ada__synchronous_task_control___size__2\n+ada.synchronous_task_control'Size\n+--format=gnat\n+ada__real_time__timing_events__events___alignment__2Xnn\n+ada.real_time.timing_events.events'Alignment\n+--format=gnat\n+system__finalization_root___assign__2\n+system.finalization_root.\":=\"\n #\n # Used to crash the demangler.\n --format=gnu-v3"}]}