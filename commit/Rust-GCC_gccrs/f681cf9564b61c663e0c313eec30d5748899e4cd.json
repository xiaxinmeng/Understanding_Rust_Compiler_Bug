{"sha": "f681cf9564b61c663e0c313eec30d5748899e4cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY4MWNmOTU2NGI2MWM2NjNlMGMzMTNlZWMzMGQ1NzQ4ODk5ZTRjZA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2012-11-29T19:00:38Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2012-11-29T19:00:38Z"}, "message": "re PR middle-end/55456 (454.calculix in SPEC CPU 2006 is miscompiled)\n\n2012-11-29  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR middle-end/55456\n\t* lra-int.h (lra_new_regno_start): New external.\n\t* lra.c (lra_new_regno_start): New global.\n\t(lra): Set up lra_new_regno_start.\n\t* lra-constraints.c (match_reload): Sync values only for original\n\tpseudos.\n\nFrom-SVN: r193948", "tree": {"sha": "09b1d973942771fe75b8e6a6e269af1b84644dd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09b1d973942771fe75b8e6a6e269af1b84644dd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f681cf9564b61c663e0c313eec30d5748899e4cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f681cf9564b61c663e0c313eec30d5748899e4cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f681cf9564b61c663e0c313eec30d5748899e4cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f681cf9564b61c663e0c313eec30d5748899e4cd/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e97cae968277a19dda737090e48d85eef270112e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97cae968277a19dda737090e48d85eef270112e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97cae968277a19dda737090e48d85eef270112e"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "24d73d53b607698c8cb8c56c1cef3d8844d0b84e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f681cf9564b61c663e0c313eec30d5748899e4cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f681cf9564b61c663e0c313eec30d5748899e4cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f681cf9564b61c663e0c313eec30d5748899e4cd", "patch": "@@ -1,3 +1,12 @@\n+2012-11-29  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR middle-end/55456\n+\t* lra-int.h (lra_new_regno_start): New external.\n+\t* lra.c (lra_new_regno_start): New global.\n+\t(lra): Set up lra_new_regno_start.\n+\t* lra-constraints.c (match_reload): Sync values only for original\n+\tpseudos.\n+\n 2012-11-29 Kai Tietz  <ktietz@redhat.com>\n \n \tPR target/53912"}, {"sha": "f6d5ac3467422a706b992a486898087bc7af189a", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f681cf9564b61c663e0c313eec30d5748899e4cd/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f681cf9564b61c663e0c313eec30d5748899e4cd/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=f681cf9564b61c663e0c313eec30d5748899e4cd", "patch": "@@ -685,8 +685,10 @@ match_reload (signed char out, signed char *ins, enum reg_class goal_class,\n \t  else\n \t    new_out_reg = gen_rtx_SUBREG (outmode, reg, 0);\n \t  /* If the input reg is dying here, we can use the same hard\n-\t     register for REG and IN_RTX.  */\n-\t  if (REG_P (in_rtx)\n+\t     register for REG and IN_RTX.  We do it only for original\n+\t     pseudos as reload pseudos can die although original\n+\t     pseudos still live where reload pseudos dies.  */\n+\t  if (REG_P (in_rtx) && (int) REGNO (in_rtx) < lra_new_regno_start\n \t      && find_regno_note (curr_insn, REG_DEAD, REGNO (in_rtx)))\n \t    lra_reg_info[REGNO (reg)].val = lra_reg_info[REGNO (in_rtx)].val;\n \t}\n@@ -712,7 +714,9 @@ match_reload (signed char out, signed char *ins, enum reg_class goal_class,\n \t      /* If SUBREG_REG is dying here and sub-registers IN_RTX\n \t\t and NEW_IN_REG are similar, we can use the same hard\n \t\t register for REG and SUBREG_REG.  */\n-\t      if (REG_P (subreg_reg) && GET_MODE (subreg_reg) == outmode\n+\t      if (REG_P (subreg_reg)\n+\t\t  && (int) REGNO (subreg_reg) < lra_new_regno_start\n+\t\t  && GET_MODE (subreg_reg) == outmode\n \t\t  && SUBREG_BYTE (in_rtx) == SUBREG_BYTE (new_in_reg)\n \t\t  && find_regno_note (curr_insn, REG_DEAD, REGNO (subreg_reg)))\n \t\tlra_reg_info[REGNO (reg)].val"}, {"sha": "8e89518bae08164970cc6ae75be16a3a471fc653", "filename": "gcc/lra-int.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f681cf9564b61c663e0c313eec30d5748899e4cd/gcc%2Flra-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f681cf9564b61c663e0c313eec30d5748899e4cd/gcc%2Flra-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-int.h?ref=f681cf9564b61c663e0c313eec30d5748899e4cd", "patch": "@@ -295,6 +295,7 @@ extern lra_copy_t lra_get_copy (int);\n extern bool lra_former_scratch_p (int);\n extern bool lra_former_scratch_operand_p (rtx, int);\n \n+extern int lra_new_regno_start;\n extern int lra_constraint_new_regno_start;\n extern bitmap_head lra_inheritance_pseudos;\n extern bitmap_head lra_split_regs;"}, {"sha": "d89c1d177533ed874e377d9e6e6ec4694bc2108f", "filename": "gcc/lra.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f681cf9564b61c663e0c313eec30d5748899e4cd/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f681cf9564b61c663e0c313eec30d5748899e4cd/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=f681cf9564b61c663e0c313eec30d5748899e4cd", "patch": "@@ -2151,6 +2151,9 @@ update_inc_notes (void)\n /* Set to 1 while in lra.  */\n int lra_in_progress;\n \n+/* Start of pseudo regnos before the LRA.  */\n+int lra_new_regno_start;\n+\n /* Start of reload pseudo regnos before the new spill pass.  */\n int lra_constraint_new_regno_start;\n \n@@ -2235,7 +2238,7 @@ lra (FILE *f)\n      so set up lra_constraint_new_regno_start before its call to\n      permit changing reg classes for pseudos created by this\n      simplification.  */\n-  lra_constraint_new_regno_start = max_reg_num ();\n+  lra_constraint_new_regno_start = lra_new_regno_start = max_reg_num ();\n   remove_scratches ();\n   scratch_p = lra_constraint_new_regno_start != max_reg_num ();\n "}]}