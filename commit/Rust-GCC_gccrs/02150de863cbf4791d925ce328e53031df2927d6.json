{"sha": "02150de863cbf4791d925ce328e53031df2927d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIxNTBkZTg2M2NiZjQ3OTFkOTI1Y2UzMjhlNTMwMzFkZjI5MjdkNg==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2018-08-06T22:13:56Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-08-06T22:13:56Z"}, "message": "[libgomp, nvptx] Handle CUDA_ONE_CALL_MAYBE_NULL\n\nThis patch adds handling of functions that may not be present in the cuda\ndriver.\n\nSuch a function can be declared using CUDA_ONE_CALL_MAYBE_NULL in cuda-lib.def,\nit can be called with the usual convenience macros, but before calling its\npresence needs to be tested using new macro CUDA_CALL_EXISTS.\n\nWhen using the dlopen interface (PLUGIN_NVPTX_DYNAMIC == 1), we allow\nnon-present functions by allowing dlsym to return NULL.  Otherwise\n(PLUGIN_NVPTX_DYNAMIC == 0) we declare the non-present function to be weak.\n\nBuild and reg-tested libgomp on x86_64 with nvidia accelerator, with and without\n--disable-cuda-driver, in combination with a trigger patch that adds a\nnon-existing function foo to cuda-lib.def:\n...\nCUDA_ONE_CALL_MAYBE_NULL (foo)\n...\nand declares it in plugin-nvptx.c:\n...\nCUresult foo (void);\n...\nand then uses it in nvptx_init after the init_cuda_lib call:\n...\n  if (CUDA_CALL_EXISTS (foo))\n    CUDA_CALL (foo);\n...\n\nAlso build and reg-tested on x86_64 with nvidia accelerator, with and without\n--disable-cuda-driver, in combination with a trigger patch that replaces all\nCUDA_ONE_CALLs in cuda-lib.def with CUDA_ONE_CALL_MAYBE_NULL, and guards two\nCUDA_CALLs with CUDA_CALL_EXISTS, one for a regular fn, and one for a fn that is\na define in cuda/cuda.h.\n\n2018-08-07  Tom de Vries  <tdevries@suse.de>\n\n\t* plugin/plugin-nvptx.c (DO_PRAGMA): Define.\n\t(struct cuda_lib_s): Add def/undef of CUDA_ONE_CALL_MAYBE_NULL.\n\t(init_cuda_lib): Add new param to CUDA_ONE_CALL_1.  Add arg to\n\tcorresponding call in CUDA_ONE_CALL.  Add def/undef of\n\tCUDA_ONE_CALL_MAYBE_NULL.\n\t(CUDA_CALL_EXISTS): Define.\n\nFrom-SVN: r263346", "tree": {"sha": "97682252be741eeb7632fe8e7ae42fe1c21dd134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97682252be741eeb7632fe8e7ae42fe1c21dd134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02150de863cbf4791d925ce328e53031df2927d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02150de863cbf4791d925ce328e53031df2927d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02150de863cbf4791d925ce328e53031df2927d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02150de863cbf4791d925ce328e53031df2927d6/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e28b107796b79f09227de541543466a146162be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e28b107796b79f09227de541543466a146162be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e28b107796b79f09227de541543466a146162be"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "e3b92a707df87924207b817b3444b9bde57b9221", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02150de863cbf4791d925ce328e53031df2927d6/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02150de863cbf4791d925ce328e53031df2927d6/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=02150de863cbf4791d925ce328e53031df2927d6", "patch": "@@ -1,3 +1,12 @@\n+2018-08-07  Tom de Vries  <tdevries@suse.de>\n+\n+\t* plugin/plugin-nvptx.c (DO_PRAGMA): Define.\n+\t(struct cuda_lib_s): Add def/undef of CUDA_ONE_CALL_MAYBE_NULL.\n+\t(init_cuda_lib): Add new param to CUDA_ONE_CALL_1.  Add arg to\n+\tcorresponding call in CUDA_ONE_CALL.  Add def/undef of\n+\tCUDA_ONE_CALL_MAYBE_NULL.\n+\t(CUDA_CALL_EXISTS): Define.\n+\n 2018-08-07  Tom de Vries  <tdevries@suse.de>\n \n \t* plugin/plugin-nvptx.c (struct cuda_lib_s, init_cuda_lib): Put"}, {"sha": "825470adce3e6f4370fcc3a110c6b2a8495e199b", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02150de863cbf4791d925ce328e53031df2927d6/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02150de863cbf4791d925ce328e53031df2927d6/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=02150de863cbf4791d925ce328e53031df2927d6", "patch": "@@ -49,15 +49,20 @@\n #include <assert.h>\n #include <errno.h>\n \n+#define DO_PRAGMA(x) _Pragma (#x)\n+\n #if PLUGIN_NVPTX_DYNAMIC\n # include <dlfcn.h>\n \n struct cuda_lib_s {\n \n # define CUDA_ONE_CALL(call)\t\t\t\\\n   __typeof (call) *call;\n+# define CUDA_ONE_CALL_MAYBE_NULL(call)\t\t\\\n+  CUDA_ONE_CALL (call)\n #include \"cuda-lib.def\"\n # undef CUDA_ONE_CALL\n+# undef CUDA_ONE_CALL_MAYBE_NULL\n \n } cuda_lib;\n \n@@ -78,20 +83,29 @@ init_cuda_lib (void)\n   if (h == NULL)\n     return false;\n \n-# define CUDA_ONE_CALL(call) CUDA_ONE_CALL_1 (call)\n-# define CUDA_ONE_CALL_1(call) \\\n+# define CUDA_ONE_CALL(call) CUDA_ONE_CALL_1 (call, false)\n+# define CUDA_ONE_CALL_MAYBE_NULL(call) CUDA_ONE_CALL_1 (call, true)\n+# define CUDA_ONE_CALL_1(call, allow_null)\t\t\\\n   cuda_lib.call = dlsym (h, #call);\t\\\n-  if (cuda_lib.call == NULL)\t\t\\\n+  if (!allow_null && cuda_lib.call == NULL)\t\t\\\n     return false;\n #include \"cuda-lib.def\"\n # undef CUDA_ONE_CALL\n # undef CUDA_ONE_CALL_1\n+# undef CUDA_ONE_CALL_MAYBE_NULL\n \n   cuda_lib_inited = true;\n   return true;\n }\n # define CUDA_CALL_PREFIX cuda_lib.\n #else\n+\n+# define CUDA_ONE_CALL(call)\n+# define CUDA_ONE_CALL_MAYBE_NULL(call) DO_PRAGMA (weak call)\n+#include \"cuda-lib.def\"\n+#undef CUDA_ONE_CALL_MAYBE_NULL\n+#undef CUDA_ONE_CALL\n+\n # define CUDA_CALL_PREFIX\n # define init_cuda_lib() true\n #endif\n@@ -136,6 +150,9 @@ init_cuda_lib (void)\n #define CUDA_CALL_NOCHECK(FN, ...)\t\t\\\n   CUDA_CALL_PREFIX FN (__VA_ARGS__)\n \n+#define CUDA_CALL_EXISTS(FN)\t\t\t\\\n+  CUDA_CALL_PREFIX FN\n+\n static const char *\n cuda_error (CUresult r)\n {"}]}