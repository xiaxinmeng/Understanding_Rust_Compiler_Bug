{"sha": "51b42ffa5ee75a45b9c708f30ed49b33df33a3c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFiNDJmZmE1ZWU3NWE0NWI5YzcwOGYzMGVkNDliMzNkZjMzYTNjMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-20T10:49:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-20T10:49:24Z"}, "message": "[multiple changes]\n\n2016-04-20  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch6.adb (Enter_Overloaded_Entity): Do not warn about\n\thiding unless we're actually hiding something. The previous\n\tcode would (for example) warn about a \"<\" on a record type\n\tbecause it incorrectly thought it was hiding the \"<\" on Boolean\n\tin Standard. We need to check that the homonym S is in fact a\n\thomograph of a predefined operator.\n\n2016-04-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_util.ads, exp_util.adb (Build_Procedure_Form): Moved here\n\tfrom exp_ch6.adb, for use in SPARK_To_C mode when creating the\n\tprocedure equivalent to a function returning an array, when this\n\tconstruction is deferred to the freeze point of the function.\n\t* sem_util.adb (Is_Unchecked_Conversion_Instance): Include a\n\tfunction that renames an instance of Unchecked_Conversion.\n\t* freeze.adb (Freeze_Subprogram): Generate the proper procedure\n\tdeclaration for a function returning an array.\n\t* exp_ch6.adb (Build_Procedure_Form): Moved to exp_util.\n\nFrom-SVN: r235266", "tree": {"sha": "31ec0eb78796a2f1f75d63a7e53c023f2e7cb8a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31ec0eb78796a2f1f75d63a7e53c023f2e7cb8a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3/comments", "author": null, "committer": null, "parents": [{"sha": "f73dc37f756c3839704b24739e875f378edb9db4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f73dc37f756c3839704b24739e875f378edb9db4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f73dc37f756c3839704b24739e875f378edb9db4"}], "stats": {"total": 320, "additions": 241, "deletions": 79}, "files": [{"sha": "e62507ee3a09447617440b7f934cc255b479f84e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=51b42ffa5ee75a45b9c708f30ed49b33df33a3c3", "patch": "@@ -1,3 +1,24 @@\n+2016-04-20  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch6.adb (Enter_Overloaded_Entity): Do not warn about\n+\thiding unless we're actually hiding something. The previous\n+\tcode would (for example) warn about a \"<\" on a record type\n+\tbecause it incorrectly thought it was hiding the \"<\" on Boolean\n+\tin Standard. We need to check that the homonym S is in fact a\n+\thomograph of a predefined operator.\n+\n+2016-04-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.ads, exp_util.adb (Build_Procedure_Form): Moved here\n+\tfrom exp_ch6.adb, for use in SPARK_To_C mode when creating the\n+\tprocedure equivalent to a function returning an array, when this\n+\tconstruction is deferred to the freeze point of the function.\n+\t* sem_util.adb (Is_Unchecked_Conversion_Instance): Include a\n+\tfunction that renames an instance of Unchecked_Conversion.\n+\t* freeze.adb (Freeze_Subprogram): Generate the proper procedure\n+\tdeclaration for a function returning an array.\n+\t* exp_ch6.adb (Build_Procedure_Form): Moved to exp_util.\n+\n 2016-04-20  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_util.ads, sem_util.adb (Is_Expanded_Priority_Attribute):"}, {"sha": "54f4d029a9743c4f9ddb5b2587de1b2fcab01163", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=51b42ffa5ee75a45b9c708f30ed49b33df33a3c3", "patch": "@@ -5557,64 +5557,6 @@ package body Exp_Ch6 is\n       Loc  : constant Source_Ptr := Sloc (N);\n       Subp : constant Entity_Id  := Defining_Entity (N);\n \n-      procedure Build_Procedure_Form;\n-      --  Create a procedure declaration which emulates the behavior of\n-      --  function Subp, for C-compatible generation.\n-\n-      --------------------------\n-      -- Build_Procedure_Form --\n-      --------------------------\n-\n-      procedure Build_Procedure_Form is\n-         Func_Formal  : Entity_Id;\n-         Proc_Formals : List_Id;\n-\n-      begin\n-         Proc_Formals := New_List;\n-\n-         --  Create a list of formal parameters with the same types as the\n-         --  function.\n-\n-         Func_Formal := First_Formal (Subp);\n-         while Present (Func_Formal) loop\n-            Append_To (Proc_Formals,\n-              Make_Parameter_Specification (Loc,\n-                Defining_Identifier =>\n-                  Make_Defining_Identifier (Loc, Chars (Func_Formal)),\n-                Parameter_Type      =>\n-                  New_Occurrence_Of (Etype (Func_Formal), Loc)));\n-\n-            Next_Formal (Func_Formal);\n-         end loop;\n-\n-         --  Add an extra out parameter to carry the function result\n-\n-         Name_Len := 6;\n-         Name_Buffer (1 .. Name_Len) := \"RESULT\";\n-         Append_To (Proc_Formals,\n-           Make_Parameter_Specification (Loc,\n-             Defining_Identifier =>\n-               Make_Defining_Identifier (Loc, Chars => Name_Find),\n-             Out_Present         => True,\n-             Parameter_Type      => New_Occurrence_Of (Etype (Subp), Loc)));\n-\n-         --  The new procedure declaration is inserted immediately after the\n-         --  function declaration. The processing in Build_Procedure_Body_Form\n-         --  relies on this order.\n-\n-         Insert_After_And_Analyze (N,\n-           Make_Subprogram_Declaration (Loc,\n-             Specification =>\n-               Make_Procedure_Specification (Loc,\n-                 Defining_Unit_Name       =>\n-                   Make_Defining_Identifier (Loc, Chars (Subp)),\n-                 Parameter_Specifications => Proc_Formals)));\n-\n-         --  Mark the function as having a procedure form\n-\n-         Set_Rewritten_For_C (Subp);\n-      end Build_Procedure_Form;\n-\n       --  Local variables\n \n       Scop      : constant Entity_Id  := Scope (Subp);\n@@ -5740,7 +5682,7 @@ package body Exp_Ch6 is\n         and then Is_Constrained (Etype (Subp))\n         and then not Is_Unchecked_Conversion_Instance (Subp)\n       then\n-         Build_Procedure_Form;\n+         Build_Procedure_Form (N);\n       end if;\n    end Expand_N_Subprogram_Declaration;\n "}, {"sha": "0c13befd92b6e8c0963f7ee10a0ed29abd71337f", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=51b42ffa5ee75a45b9c708f30ed49b33df33a3c3", "patch": "@@ -919,6 +919,64 @@ package body Exp_Util is\n       end;\n    end Build_Allocate_Deallocate_Proc;\n \n+   --------------------------\n+   -- Build_Procedure_Form --\n+   --------------------------\n+\n+   procedure Build_Procedure_Form (N : Node_Id) is\n+      Loc          : constant Source_Ptr := Sloc (N);\n+      Subp         : constant Entity_Id := Defining_Entity (N);\n+\n+      Func_Formal  : Entity_Id;\n+      Proc_Formals : List_Id;\n+\n+   begin\n+      Proc_Formals := New_List;\n+\n+      --  Create a list of formal parameters with the same types as the\n+      --  function.\n+\n+      Func_Formal := First_Formal (Subp);\n+      while Present (Func_Formal) loop\n+         Append_To (Proc_Formals,\n+           Make_Parameter_Specification (Loc,\n+             Defining_Identifier =>\n+\n+               Make_Defining_Identifier (Loc, Chars (Func_Formal)),\n+             Parameter_Type      =>\n+               New_Occurrence_Of (Etype (Func_Formal), Loc)));\n+\n+         Next_Formal (Func_Formal);\n+      end loop;\n+\n+      --  Add an extra out parameter to carry the function result\n+\n+      Name_Len := 6;\n+      Name_Buffer (1 .. Name_Len) := \"RESULT\";\n+      Append_To (Proc_Formals,\n+        Make_Parameter_Specification (Loc,\n+          Defining_Identifier =>\n+            Make_Defining_Identifier (Loc, Chars => Name_Find),\n+          Out_Present         => True,\n+          Parameter_Type      => New_Occurrence_Of (Etype (Subp), Loc)));\n+\n+      --  The new procedure declaration is inserted immediately after the\n+      --  function declaration. The processing in Build_Procedure_Body_Form\n+      --  relies on this order.\n+\n+      Insert_After_And_Analyze (Unit_Declaration_Node (Subp),\n+        Make_Subprogram_Declaration (Loc,\n+          Specification =>\n+            Make_Procedure_Specification (Loc,\n+              Defining_Unit_Name       =>\n+                Make_Defining_Identifier (Loc, Chars (Subp)),\n+              Parameter_Specifications => Proc_Formals)));\n+\n+      --  Mark the function as having a procedure form\n+\n+      Set_Rewritten_For_C (Subp);\n+   end Build_Procedure_Form;\n+\n    ------------------------\n    -- Build_Runtime_Call --\n    ------------------------"}, {"sha": "5a93ca41b3402028a078d8eea48c42da260882a6", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=51b42ffa5ee75a45b9c708f30ed49b33df33a3c3", "patch": "@@ -238,6 +238,10 @@ package Exp_Util is\n    --  must be a free statement. If flag Is_Allocate is set, the generated\n    --  routine is allocate, deallocate otherwise.\n \n+   procedure Build_Procedure_Form (N : Node_Id);\n+   --  Create a procedure declaration which emulates the behavior of a function\n+   --  that returns an array type, for C-compatible generation.\n+\n    function Build_Runtime_Call (Loc : Source_Ptr; RE : RE_Id) return Node_Id;\n    --  Build an N_Procedure_Call_Statement calling the given runtime entity.\n    --  The call has no parameters. The first argument provides the location"}, {"sha": "0ea2e1fdd823d1e6d452a919b4e101d7214012c6", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=51b42ffa5ee75a45b9c708f30ed49b33df33a3c3", "patch": "@@ -7892,6 +7892,17 @@ package body Freeze is\n       then\n          Check_Overriding_Indicator (E, Empty, Is_Primitive (E));\n       end if;\n+\n+      if Modify_Tree_For_C\n+        and then Nkind (Parent (E)) = N_Function_Specification\n+        and then Is_Array_Type (Etype (E))\n+        and then Is_Constrained (Etype (E))\n+        and then not Is_Unchecked_Conversion_Instance (E)\n+        and then not Rewritten_For_C (E)\n+      then\n+         Build_Procedure_Form (Unit_Declaration_Node (E));\n+      end if;\n+\n    end Freeze_Subprogram;\n \n    ----------------------"}, {"sha": "c2705170ca19a2731927221868175cd8da98b967", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 134, "deletions": 13, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=51b42ffa5ee75a45b9c708f30ed49b33df33a3c3", "patch": "@@ -7120,9 +7120,126 @@ package body Sem_Ch6 is\n    -----------------------------\n \n    procedure Enter_Overloaded_Entity (S : Entity_Id) is\n+      function Matches_Predefined_Op return Boolean;\n+      --  This returns an approximation of whether S matches a predefined\n+      --  operator, based on the operator symbol, and the parameter and result\n+      --  types. The rules are scattered throughout chapter 4 of the Ada RM.\n+\n+      ---------------------------\n+      -- Matches_Predefined_Op --\n+      ---------------------------\n+\n+      function Matches_Predefined_Op return Boolean is\n+         Formal_1    : constant Entity_Id := First_Formal (S);\n+         Formal_2    : constant Entity_Id := Next_Formal (Formal_1);\n+         Op          : constant Name_Id   := Chars (S);\n+         Result_Type : constant Entity_Id := Base_Type (Etype (S));\n+         Type_1      : constant Entity_Id := Base_Type (Etype (Formal_1));\n+\n+      begin\n+         --  Binary operator\n+\n+         if Present (Formal_2) then\n+            declare\n+               Type_2 : constant Entity_Id := Base_Type (Etype (Formal_2));\n+\n+            begin\n+               --  All but \"&\" and \"**\" have same-types parameters\n+\n+               case Op is\n+                  when Name_Op_Concat |\n+                       Name_Op_Expon  =>\n+                     null;\n+\n+                  when others =>\n+                     if Type_1 /= Type_2 then\n+                        return False;\n+                     end if;\n+               end case;\n+\n+               --  Check parameter and result types\n+\n+               case Op is\n+                  when Name_Op_And |\n+                       Name_Op_Or  |\n+                       Name_Op_Xor =>\n+                     return\n+                       Is_Boolean_Type (Result_Type)\n+                         and then Result_Type = Type_1;\n+\n+                  when Name_Op_Mod |\n+                       Name_Op_Rem =>\n+                     return\n+                       Is_Integer_Type (Result_Type)\n+                         and then Result_Type = Type_1;\n+\n+                  when Name_Op_Add      |\n+                       Name_Op_Divide   |\n+                       Name_Op_Multiply |\n+                       Name_Op_Subtract =>\n+                     return\n+                       Is_Numeric_Type (Result_Type)\n+                         and then Result_Type = Type_1;\n+\n+                  when Name_Op_Eq |\n+                       Name_Op_Ne =>\n+                     return\n+                       Is_Boolean_Type (Result_Type)\n+                         and then not Is_Limited_Type (Type_1);\n+\n+                  when Name_Op_Ge |\n+                       Name_Op_Gt |\n+                       Name_Op_Le |\n+                       Name_Op_Lt =>\n+                     return\n+                       Is_Boolean_Type (Result_Type)\n+                         and then (Is_Array_Type (Type_1)\n+                                    or else Is_Scalar_Type (Type_1));\n+\n+                  when Name_Op_Concat =>\n+                     return Is_Array_Type (Result_Type);\n+\n+                  when Name_Op_Expon =>\n+                     return\n+                       (Is_Integer_Type (Result_Type)\n+                           or else Is_Floating_Point_Type (Result_Type))\n+                         and then Result_Type = Type_1\n+                         and then Type_2 = Standard_Integer;\n+\n+                  when others =>\n+                     raise Program_Error;\n+               end case;\n+            end;\n+\n+         --  Unary operator\n+\n+         else\n+            case Op is\n+               when Name_Op_Abs      |\n+                    Name_Op_Add      |\n+                    Name_Op_Subtract =>\n+                  return\n+                    Is_Numeric_Type (Result_Type)\n+                      and then Result_Type = Type_1;\n+\n+               when Name_Op_Not =>\n+                  return\n+                    Is_Boolean_Type (Result_Type)\n+                      and then Result_Type = Type_1;\n+\n+               when others =>\n+                  raise Program_Error;\n+            end case;\n+         end if;\n+      end Matches_Predefined_Op;\n+\n+      --  Local variables\n+\n       E   : Entity_Id := Current_Entity_In_Scope (S);\n       C_E : Entity_Id := Current_Entity (S);\n \n+   --  Start of processing for Enter_Overloaded_Entity\n+\n    begin\n       if Present (E) then\n          Set_Has_Homonym (E);\n@@ -7193,22 +7310,26 @@ package body Sem_Ch6 is\n             --  or S is overriding an implicit inherited subprogram.\n \n             if Scope (E) /= Scope (S)\n-                  and then (not Is_Overloadable (E)\n-                             or else Subtype_Conformant (E, S))\n-                  and then (Is_Immediately_Visible (E)\n-                              or else\n-                            Is_Potentially_Use_Visible (S))\n+              and then (not Is_Overloadable (E)\n+                         or else Subtype_Conformant (E, S))\n+              and then (Is_Immediately_Visible (E)\n+                         or else Is_Potentially_Use_Visible (S))\n             then\n-               if Scope (E) /= Standard_Standard then\n+               if Scope (E) = Standard_Standard then\n+                  if Nkind (S) = N_Defining_Operator_Symbol\n+                    and then Scope (Base_Type (Etype (First_Formal (S)))) /=\n+                               Scope (S)\n+                    and then Matches_Predefined_Op\n+                  then\n+                     Error_Msg_N\n+                       (\"declaration of & hides predefined operator?h?\", S);\n+                  end if;\n+\n+               --  E not immediately within Standard\n+\n+               else\n                   Error_Msg_Sloc := Sloc (E);\n                   Error_Msg_N (\"declaration of & hides one #?h?\", S);\n-\n-               elsif Nkind (S) = N_Defining_Operator_Symbol\n-                 and then\n-                   Scope (Base_Type (Etype (First_Formal (S)))) /= Scope (S)\n-               then\n-                  Error_Msg_N\n-                    (\"declaration of & hides predefined operator?h?\", S);\n                end if;\n             end if;\n          end loop;"}, {"sha": "eb3eed569912220f8b633e8de5a3dfd9bb9c6c89", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b42ffa5ee75a45b9c708f30ed49b33df33a3c3/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=51b42ffa5ee75a45b9c708f30ed49b33df33a3c3", "patch": "@@ -14344,20 +14344,25 @@ package body Sem_Util is\n \n    begin\n       --  Look for a function whose generic parent is the predefined intrinsic\n-      --  function Unchecked_Conversion.\n+      --  function Unchecked_Conversion, or for one that renames such an\n+      --  instance.\n \n       if Ekind (Id) = E_Function then\n          Par := Parent (Id);\n \n          if Nkind (Par) = N_Function_Specification then\n             Par := Generic_Parent (Par);\n \n-            return\n-              Present (Par)\n-                and then Chars (Par) = Name_Unchecked_Conversion\n-                and then Is_Intrinsic_Subprogram (Par)\n-                and then Is_Predefined_File_Name\n-                           (Unit_File_Name (Get_Source_Unit (Par)));\n+            if Present (Par) then\n+               return\n+                 Chars (Par) = Name_Unchecked_Conversion\n+                   and then Is_Intrinsic_Subprogram (Par)\n+                   and then Is_Predefined_File_Name\n+                              (Unit_File_Name (Get_Source_Unit (Par)));\n+            else\n+               return Present (Alias (Id))\n+                 and then Is_Unchecked_Conversion_Instance (Alias (Id));\n+            end if;\n          end if;\n       end if;\n "}]}