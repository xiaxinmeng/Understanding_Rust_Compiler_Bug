{"sha": "38e601118ca88adf0a472750b0da83f0ef1798a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhlNjAxMTE4Y2E4OGFkZjBhNDcyNzUwYjBkYTgzZjBlZjE3OThhNw==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2018-11-14T02:17:35Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2018-11-14T02:17:35Z"}, "message": "re PR rtl-optimization/87507 (IRA unnecessarily uses non-volatile registers during register assignment)\n\ngcc/\n\tPR rtl-optimization/87507\n\t* lower-subreg.c (operand_for_swap_move_operator): New function.\n\t(simple_move): Strip simple operators.\n\t(find_pseudo_copy): Likewise.\n\t(resolve_operand_for_swap_move_operator): New function.\n\t(resolve_simple_move): Strip simple operators and swap operands.\n\ngcc/testsuite/\n\tPR rtl-optimization/87507\n\t* gcc.target/powerpc/pr87507.c: New test.\n\t* gcc.target/powerpc/pr68805.c: Update expected results.\n\nFrom-SVN: r266097", "tree": {"sha": "0fae6ff41c29662d2e5d7dc1d94845b3bc9a4456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fae6ff41c29662d2e5d7dc1d94845b3bc9a4456"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38e601118ca88adf0a472750b0da83f0ef1798a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e601118ca88adf0a472750b0da83f0ef1798a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e601118ca88adf0a472750b0da83f0ef1798a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e601118ca88adf0a472750b0da83f0ef1798a7/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72931dea2b1c27ef70f8b5dce3b12a0db7f44fa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72931dea2b1c27ef70f8b5dce3b12a0db7f44fa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72931dea2b1c27ef70f8b5dce3b12a0db7f44fa4"}], "stats": {"total": 102, "additions": 98, "deletions": 4}, "files": [{"sha": "62f6383195a4b8e75aac682c0a7c89d5ea056a75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e601118ca88adf0a472750b0da83f0ef1798a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e601118ca88adf0a472750b0da83f0ef1798a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38e601118ca88adf0a472750b0da83f0ef1798a7", "patch": "@@ -1,3 +1,12 @@\n+2018-11-13  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR rtl-optimization/87507\n+\t* lower-subreg.c (operand_for_swap_move_operator): New function.\n+\t(simple_move): Strip simple operators.\n+\t(find_pseudo_copy): Likewise.\n+\t(resolve_operand_for_swap_move_operator): New function.\n+\t(resolve_simple_move): Strip simple operators and swap operands.\n+\n 2018-11-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/87898"}, {"sha": "25cb155e384ca25c96548a88a8029ba188cf020a", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e601118ca88adf0a472750b0da83f0ef1798a7/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e601118ca88adf0a472750b0da83f0ef1798a7/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=38e601118ca88adf0a472750b0da83f0ef1798a7", "patch": "@@ -320,6 +320,24 @@ simple_move_operand (rtx x)\n   return true;\n }\n \n+/* If X is an operator that can be treated as a simple move that we\n+   can split, then return the operand that is operated on.  */\n+\n+static rtx\n+operand_for_swap_move_operator (rtx x)\n+{\n+  /* A word sized rotate of a register pair is equivalent to swapping\n+     the registers in the register pair.  */\n+  if (GET_CODE (x) == ROTATE\n+      && GET_MODE (x) == twice_word_mode\n+      && simple_move_operand (XEXP (x, 0))\n+      && CONST_INT_P (XEXP (x, 1))\n+      && INTVAL (XEXP (x, 1)) == BITS_PER_WORD)\n+    return XEXP (x, 0);\n+\n+  return NULL_RTX;\n+}\n+\n /* If INSN is a single set between two objects that we want to split,\n    return the single set.  SPEED_P says whether we are optimizing\n    INSN for speed or size.\n@@ -330,7 +348,7 @@ simple_move_operand (rtx x)\n static rtx\n simple_move (rtx_insn *insn, bool speed_p)\n {\n-  rtx x;\n+  rtx x, op;\n   rtx set;\n   machine_mode mode;\n \n@@ -348,6 +366,9 @@ simple_move (rtx_insn *insn, bool speed_p)\n     return NULL_RTX;\n \n   x = SET_SRC (set);\n+  if ((op = operand_for_swap_move_operator (x)) != NULL_RTX)\n+    x = op;\n+\n   if (x != recog_data.operand[0] && x != recog_data.operand[1])\n     return NULL_RTX;\n   /* For the src we can handle ASM_OPERANDS, and it is beneficial for\n@@ -386,9 +407,13 @@ find_pseudo_copy (rtx set)\n {\n   rtx dest = SET_DEST (set);\n   rtx src = SET_SRC (set);\n+  rtx op;\n   unsigned int rd, rs;\n   bitmap b;\n \n+  if ((op = operand_for_swap_move_operator (src)) != NULL_RTX)\n+    src = op;\n+\n   if (!REG_P (dest) || !REG_P (src))\n     return false;\n \n@@ -846,14 +871,29 @@ can_decompose_p (rtx x)\n   return true;\n }\n \n+/* OPND is a concatn operand this is used with a simple move operator.\n+   Return a new rtx with the concatn's operands swapped.  */\n+\n+static rtx\n+resolve_operand_for_swap_move_operator (rtx opnd)\n+{\n+  gcc_assert (GET_CODE (opnd) == CONCATN);\n+  rtx concatn = copy_rtx (opnd);\n+  rtx op0 = XVECEXP (concatn, 0, 0);\n+  rtx op1 = XVECEXP (concatn, 0, 1);\n+  XVECEXP (concatn, 0, 0) = op1;\n+  XVECEXP (concatn, 0, 1) = op0;\n+  return concatn;\n+}\n+\n /* Decompose the registers used in a simple move SET within INSN.  If\n    we don't change anything, return INSN, otherwise return the start\n    of the sequence of moves.  */\n \n static rtx_insn *\n resolve_simple_move (rtx set, rtx_insn *insn)\n {\n-  rtx src, dest, real_dest;\n+  rtx src, dest, real_dest, src_op;\n   rtx_insn *insns;\n   machine_mode orig_mode, dest_mode;\n   unsigned int orig_size, words;\n@@ -876,6 +916,23 @@ resolve_simple_move (rtx set, rtx_insn *insn)\n \n   real_dest = NULL_RTX;\n \n+  if ((src_op = operand_for_swap_move_operator (src)) != NULL_RTX)\n+    {\n+      if (resolve_reg_p (dest))\n+\t{\n+\t  /* DEST is a CONCATN, so swap its operands and strip\n+\t     SRC's operator.  */\n+\t  dest = resolve_operand_for_swap_move_operator (dest);\n+\t  src = src_op;\n+\t}\n+      else if (resolve_reg_p (src_op))\n+\t{\n+\t  /* SRC is an operation on a CONCATN, so strip the operator and\n+\t     swap the CONCATN's operands.  */\n+\t  src = resolve_operand_for_swap_move_operator (src_op);\n+\t}\n+    }\n+\n   if (GET_CODE (src) == SUBREG\n       && resolve_reg_p (SUBREG_REG (src))\n       && (maybe_ne (SUBREG_BYTE (src), 0)"}, {"sha": "c1c92b1cbc8fa0695d82737e86f6b66f28093e62", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e601118ca88adf0a472750b0da83f0ef1798a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e601118ca88adf0a472750b0da83f0ef1798a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=38e601118ca88adf0a472750b0da83f0ef1798a7", "patch": "@@ -1,3 +1,9 @@\n+2018-11-13  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR rtl-optimization/87507\n+\t* gcc.target/powerpc/pr87507.c: New test.\n+\t* gcc.target/powerpc/pr68805.c: Update expected results.\n+\n 2018-11-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/87898"}, {"sha": "9f76e2bf89ab254e227d2fa8edd1283d50d3f3f7", "filename": "gcc/testsuite/gcc.target/powerpc/pr68805.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e601118ca88adf0a472750b0da83f0ef1798a7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr68805.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e601118ca88adf0a472750b0da83f0ef1798a7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr68805.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr68805.c?ref=38e601118ca88adf0a472750b0da83f0ef1798a7", "patch": "@@ -9,7 +9,7 @@ typedef struct bar {\n \n void foo (TYPE *p, TYPE *q) { *p = *q; }\n \n-/* { dg-final { scan-assembler     \"lxvd2x\"   } } */\n-/* { dg-final { scan-assembler     \"stxvd2x\"  } } */\n+/* { dg-final { scan-assembler-times {\\mld\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mstd\\M} 2 } } */\n /* { dg-final { scan-assembler-not \"xxpermdi\" } } */\n "}, {"sha": "d30a744e649096c0d54ff39468e4daf0698571ce", "filename": "gcc/testsuite/gcc.target/powerpc/pr87507.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e601118ca88adf0a472750b0da83f0ef1798a7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr87507.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e601118ca88adf0a472750b0da83f0ef1798a7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr87507.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr87507.c?ref=38e601118ca88adf0a472750b0da83f0ef1798a7", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile { target powerpc64le-*-* } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-O2 -mcpu=power8\" } */\n+\n+typedef struct\n+{\n+  __int128_t x;\n+  __int128_t y;\n+} foo_t;\n+\n+void\n+foo (long cond, foo_t *dst, __int128_t src)\n+{\n+  if (cond)\n+  {\n+    dst->x = src;\n+    dst->y = src;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mstd\\M} 4 } } */\n+/* { dg-final { scan-assembler-not {\\mld\\M} } } */"}]}