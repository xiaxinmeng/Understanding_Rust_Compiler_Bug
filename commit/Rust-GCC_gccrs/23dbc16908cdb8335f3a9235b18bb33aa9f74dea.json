{"sha": "23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNkYmMxNjkwOGNkYjgzMzVmM2E5MjM1YjE4YmIzM2FhOWY3NGRlYQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-11-06T09:02:33Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-11-06T09:02:33Z"}, "message": "Fix all tests that fail with -sanitize=return.\n\n2017-11-06  Martin Liska  <mliska@suse.cz>\n\n\t* c-c++-common/dfp/call-by-value.c (foo32): Return a default\n\tvalue of change return type to void.\n\t(foo64): Likewise.\n\t(foo128): Likewise.\n\t* g++.dg/bprob/g++-bprob-1.C: Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-template.C (f): Likewise.\n\t* g++.dg/cpp0x/range-for6.C (foo): Likewise.\n\t* g++.dg/cpp0x/udlit-template.C: Likewise.\n\t* g++.dg/cpp1z/eval-order3.C (struct A): Likewise.\n\t(operator>>): Likewise.\n\t* g++.dg/expr/cond12.C (struct X): Likewise.\n\t(X::operator=): Likewise.\n\t* g++.dg/gcov/gcov-1.C: Likewise.\n\t* g++.dg/gcov/gcov-threads-1.C (ContentionNoDeadlock_thread): Likewise.\n\t* g++.dg/ipa/devirt-21.C: Likewise.\n\t* g++.dg/ipa/devirt-23.C: Likewise.\n\t* g++.dg/ipa/devirt-34.C (t): Likewise.\n\t* g++.dg/missing-return.C: New test. Likewise.\n\t* g++.dg/opt/20050511-1.C (bar): Likewise.\n\t* g++.dg/opt/const3.C (A::foo1): Likewise.\n\t(A::foo2): Likewise.\n\t* g++.dg/opt/pr23299.C (E::c): Likewise.\n\t* g++.dg/other/copy2.C (A::operator=): Likewise.\n\t* g++.dg/overload/addr1.C: Likewise.\n\t* g++.dg/pr48484.C: Likewise.\n\t* g++.dg/tls/thread_local3.C (thread_main): Likewise.\n\t* g++.dg/tls/thread_local3g.C (thread_main): Likewise.\n\t* g++.dg/tls/thread_local5.C (thread_main): Likewise.\n\t* g++.dg/tls/thread_local5g.C (thread_main): Likewise.\n\t* g++.dg/tls/thread_local6.C (thread_main): Likewise.\n\t* g++.dg/tls/thread_local6g.C (thread_main): Likewise.\n\t* g++.dg/torture/pr34850.C (OctetString::operator^=): Likewise.\n\t* g++.dg/tree-prof/pr79259.C (fn2): Likewise.\n\t* g++.dg/tree-ssa/pr33604.C (struct Value): Likewise.\n\t* g++.dg/tree-ssa/pr81408.C (struct p): Likewise.\n\t(av): Likewise.\n\t* g++.dg/warn/string1.C (test): Likewise.\n\nFrom-SVN: r254438", "tree": {"sha": "fd48cb5a1501b580b1a14eeb6786e9e09b390bd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd48cb5a1501b580b1a14eeb6786e9e09b390bd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b6fa695ab5e6f6fd57ed9264b336f06f440125b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b6fa695ab5e6f6fd57ed9264b336f06f440125b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b6fa695ab5e6f6fd57ed9264b336f06f440125b"}], "stats": {"total": 137, "additions": 112, "deletions": 25}, "files": [{"sha": "ad7613aa19214463af1394b9a917e3070e13f05f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -1,3 +1,43 @@\n+2017-11-06  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-c++-common/dfp/call-by-value.c (foo32): Return a default\n+\tvalue of change return type to void.\n+\t(foo64): Likewise.\n+\t(foo128): Likewise.\n+\t* g++.dg/bprob/g++-bprob-1.C: Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-template.C (f): Likewise.\n+\t* g++.dg/cpp0x/range-for6.C (foo): Likewise.\n+\t* g++.dg/cpp0x/udlit-template.C: Likewise.\n+\t* g++.dg/cpp1z/eval-order3.C (struct A): Likewise.\n+\t(operator>>): Likewise.\n+\t* g++.dg/expr/cond12.C (struct X): Likewise.\n+\t(X::operator=): Likewise.\n+\t* g++.dg/gcov/gcov-1.C: Likewise.\n+\t* g++.dg/gcov/gcov-threads-1.C (ContentionNoDeadlock_thread): Likewise.\n+\t* g++.dg/ipa/devirt-21.C: Likewise.\n+\t* g++.dg/ipa/devirt-23.C: Likewise.\n+\t* g++.dg/ipa/devirt-34.C (t): Likewise.\n+\t* g++.dg/missing-return.C: New test. Likewise.\n+\t* g++.dg/opt/20050511-1.C (bar): Likewise.\n+\t* g++.dg/opt/const3.C (A::foo1): Likewise.\n+\t(A::foo2): Likewise.\n+\t* g++.dg/opt/pr23299.C (E::c): Likewise.\n+\t* g++.dg/other/copy2.C (A::operator=): Likewise.\n+\t* g++.dg/overload/addr1.C: Likewise.\n+\t* g++.dg/pr48484.C: Likewise.\n+\t* g++.dg/tls/thread_local3.C (thread_main): Likewise.\n+\t* g++.dg/tls/thread_local3g.C (thread_main): Likewise.\n+\t* g++.dg/tls/thread_local5.C (thread_main): Likewise.\n+\t* g++.dg/tls/thread_local5g.C (thread_main): Likewise.\n+\t* g++.dg/tls/thread_local6.C (thread_main): Likewise.\n+\t* g++.dg/tls/thread_local6g.C (thread_main): Likewise.\n+\t* g++.dg/torture/pr34850.C (OctetString::operator^=): Likewise.\n+\t* g++.dg/tree-prof/pr79259.C (fn2): Likewise.\n+\t* g++.dg/tree-ssa/pr33604.C (struct Value): Likewise.\n+\t* g++.dg/tree-ssa/pr81408.C (struct p): Likewise.\n+\t(av): Likewise.\n+\t* g++.dg/warn/string1.C (test): Likewise.\n+\n 2017-11-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/82471"}, {"sha": "e7aea3076cf49c07591458d87fd47207425b33da", "filename": "gcc/testsuite/c-c++-common/dfp/call-by-value.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdfp%2Fcall-by-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdfp%2Fcall-by-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdfp%2Fcall-by-value.c?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -5,17 +5,17 @@\n \n #include \"dfp-dbg.h\"\n \n-int foo32 (_Decimal32 z)\n+void foo32 (_Decimal32 z)\n {\n   z = z + 1.0df;\n }\n \n-int foo64 (_Decimal64 z)\n+void foo64 (_Decimal64 z)\n {\n   z = z + 1.0dd;\n }\n \n-int foo128 (_Decimal128 z)\n+void foo128 (_Decimal128 z)\n {\n   z = z + 1.0dl;\n }"}, {"sha": "3aafc06d51d338a50cc90e77350264d449350f24", "filename": "gcc/testsuite/g++.dg/bprob/g++-bprob-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fg%2B%2B-bprob-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fg%2B%2B-bprob-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fg%2B%2B-bprob-1.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -35,7 +35,7 @@ test_for2 (int m, int n, int o)\n   return for_temp;\t\t\t/* count(6) */\n }\n \n-int\n+void\n call_for ()\n {\n   for_val1 += test_for1 (0);"}, {"sha": "17c6a6e5b52f1bc1c292b9c17ff8505941c4bd73", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-template.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -9,7 +9,7 @@ auto apply (T t) -> decltype (t())\n }\n \n template <class T>\n-T f(T t)\n+void f(T t)\n {\n   T t2 = t;\n   if (t != [=]()->T { return t; }())"}, {"sha": "b4d9dd720ee61f2e374e1978d1cd484ac8404861", "filename": "gcc/testsuite/g++.dg/cpp0x/range-for6.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for6.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -14,6 +14,8 @@ template<typename T> T foo()\n         sum += x;\n     if (sum != T(10))\n         abort();\n+\n+    return sum;\n }\n \n int main()"}, {"sha": "155831992977ea7be3d95a69770c0298c0a259e7", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-template.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-template.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-template.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-template.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -23,7 +23,7 @@ template<>\n   operator\"\" _abc<'6','6','6'>()\n   { return 21; }\n \n-int\n+void\n test1()\n {\n   int i = operator\"\" _abc<'1','2','3'>();"}, {"sha": "b53e96a9f8f01baf4763e71c5c1f1830ba77fbe3", "filename": "gcc/testsuite/g++.dg/cpp1z/eval-order3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order3.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -26,7 +26,7 @@ struct A\n   int _i;\n   A(int i): _i(f(i)) { }\n   A& memfn(int i, int j) { f(j); return *this; }\n-  int operator<<(int i) { }\n+  int operator<<(int i) { return 0; }\n   A& operator=(const A&) { return *this; }\n   A& operator+=(int i) { return *this; }\n };\n@@ -38,7 +38,7 @@ struct B\n   B(int i): _i(f(i)) { }\n };\n \n-int operator>>(A&, int i) { }\n+int operator>>(A&, int i) { return 0; }\n \n A a(0);\n A* afn(int i)"}, {"sha": "90d77dbd708603548db6e8e45d2f055735019859", "filename": "gcc/testsuite/g++.dg/expr/cond12.C", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond12.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -2,10 +2,16 @@\n // { dg-do run }\n \n struct X {\n-    X& operator=(const X&){}\n+    X& operator=(const X&);\n     X& operator=(X&){__builtin_abort();}\n };\n \n+X g;\n+X& X::operator=(const X&)\n+{\n+  return g;\n+}\n+\n int main(int argv,char**) {\n   X a, b;\n   ((argv > 2) ? a : b) = X();"}, {"sha": "9018b9a3a73a44644b65f62f5dd06bcae4385e77", "filename": "gcc/testsuite/g++.dg/gcov/gcov-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-1.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -74,7 +74,7 @@ test_for2 (int m, int n, int o)\n   return for_temp;\t\t\t/* count(6) */\n }\n \n-int\n+void\n call_for ()\n {\n   for_val1 += test_for1 (0);"}, {"sha": "b020dd87d4caf61417386b7d7d0d6f2863dfe7b7", "filename": "gcc/testsuite/g++.dg/gcov/gcov-threads-1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-threads-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-threads-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-threads-1.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -19,6 +19,8 @@ static void *ContentionNoDeadlock_thread(void *start)\n       for (int32_t i = NR - 1; i >= starti; --i)\n \tpthread_mutex_unlock (&cndMs[i]);\n   }\n+\n+  return 0;\n }\n int main(int argc, char **argv) {\n   for (unsigned i = 0; i < NR; i++)"}, {"sha": "440570c8ddbf68699fe5dd5d842e42d7372e147a", "filename": "gcc/testsuite/g++.dg/ipa/devirt-21.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-21.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -12,7 +12,7 @@ class MultiTermDocs : public virtual B {\n protected:\n   A readerTermDocs;\n   A subReaders;\n-  virtual B *m_fn1(int *) {}\n+  virtual B *m_fn1(int *) { return NULL; }\n   virtual inline  ~MultiTermDocs();\n   void wrap(void)\n   {"}, {"sha": "76fc3fde42b317f09c72f41d1c30d1648b8b8828", "filename": "gcc/testsuite/g++.dg/ipa/devirt-23.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-23.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -12,7 +12,7 @@ class MultiTermDocs : public virtual B {\n protected:\n   A readerTermDocs;\n   A subReaders;\n-  virtual B *m_fn1(int *) {}\n+  virtual B *m_fn1(int *) { return NULL; }\n   virtual inline  ~MultiTermDocs();\n   inline void wrap(void)\n   {"}, {"sha": "083c305665fa061610d0cad51e84b165a1ca9af1", "filename": "gcc/testsuite/g++.dg/ipa/devirt-34.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-34.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -10,6 +10,8 @@ t(struct B *b)\n {\n   struct A *a=b;\n   a->t();\n+\n+  return 0;\n }\n \n /* We should guess that the pointer of type B probably points to an instance"}, {"sha": "f7fcfebb2b460f4e5ce2ed2e79e698ac05f461aa", "filename": "gcc/testsuite/g++.dg/missing-return.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmissing-return.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmissing-return.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmissing-return.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wreturn-type -fdump-tree-optimized\" } */\n+\n+int foo(int a)\n+{\n+} /* { dg-warning \"no return statement\" } */\n+\n+/* { dg-final { scan-tree-dump \"__builtin_unreachable\" \"optimized\" } } */"}, {"sha": "a840fb0db8e380d3e6df1799cb86132ba5362782", "filename": "gcc/testsuite/g++.dg/opt/20050511-1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2F20050511-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2F20050511-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2F20050511-1.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -53,6 +53,8 @@ UINT32 bar (const C * sPtr)\n \n   if (a.xy[0] != ((SINT16) 0xffff << 2))\n \tabort ();\n+\n+  return 0;\n }\n \n int main()"}, {"sha": "969df91e6e10e8b7845d8402d3748ca71ffc1c47", "filename": "gcc/testsuite/g++.dg/opt/const3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fconst3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fconst3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fconst3.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -30,8 +30,8 @@ struct A\n \n int i;\n \n-int A::foo1(void *ios, const char *str) { }\n-int A::foo2(int v, const Type t) { i=0; }\n+int A::foo1(void *ios, const char *str) { return 0; }\n+int A::foo2(int v, const Type t) { i=0; return 0; }\n \n int main()\n {"}, {"sha": "b791bf954e891493f4f347e9a8d36a23735d5d0c", "filename": "gcc/testsuite/g++.dg/opt/pr23299.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr23299.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr23299.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr23299.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -50,6 +50,8 @@ E::c ()\n   if (x > 10)\n     throw 1;\n   x |= 2;\n+\n+  return x;\n }\n \n int"}, {"sha": "df480f06ecc5d3823ae5046870f9e24cdbfcffa5", "filename": "gcc/testsuite/g++.dg/other/copy2.C", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcopy2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcopy2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcopy2.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -10,11 +10,15 @@ class A\n {\n public:\n   int i;\n-  A &operator =(const A &i)\n-  {\n+  A &operator =(const A &i);\n+};\n+\n+A a;\n+\n+A& A::operator=(const A &i)  {\n     status = 0;\n+    return a;\n   }\n-};\n \n class B\n {"}, {"sha": "4eb9e2f31ca6e5750e92c1815697373736ca339b", "filename": "gcc/testsuite/g++.dg/overload/addr1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Faddr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Faddr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Faddr1.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -11,7 +11,7 @@ static int flag = 0;\n \n template <typename> struct A\n {\n-  A &active ()  { flag++;}\n+  A &active () { flag++; static A a; return a; }\n   \n   static void foo() {}\n "}, {"sha": "19e9b9a8d0ac7c3920cd02e7a32c14afb5d6d6f7", "filename": "gcc/testsuite/g++.dg/pr48484.C", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr48484.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr48484.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr48484.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -65,6 +65,8 @@ bool\n \tjump = 0;\n       }\n     }\n+\n+  return false;\n }\n \n bool\n@@ -102,4 +104,5 @@ bool\n \t}\n     }\n \n+  return true;\n }"}, {"sha": "d29bda1a000fda6eff47fb029647dc3cff9cbe53", "filename": "gcc/testsuite/g++.dg/tls/thread_local3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local3.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -21,6 +21,7 @@ void f()\n void *thread_main(void *)\n {\n   f(); f(); f();\n+  return 0;\n }\n \n #include <pthread.h>"}, {"sha": "2f9fdee1a73db24a67e92513930bad88e1f98709", "filename": "gcc/testsuite/g++.dg/tls/thread_local3g.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local3g.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local3g.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local3g.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -19,6 +19,7 @@ thread_local A a;\n void *thread_main(void *)\n {\n   A* ap = &a;\n+  return 0;\n }\n \n #include <pthread.h>"}, {"sha": "61fea722dc26fd71c85771557aecfbaa9ab287f4", "filename": "gcc/testsuite/g++.dg/tls/thread_local5.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local5.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -30,6 +30,7 @@ void f()\n void *thread_main(void *)\n {\n   f(); f(); f();\n+  return 0;\n }\n \n int main()"}, {"sha": "596bbbe542fecc4f59aa968d4c88b4deaf914de7", "filename": "gcc/testsuite/g++.dg/tls/thread_local5g.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local5g.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local5g.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local5g.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -28,6 +28,7 @@ thread_local A a;\n void *thread_main(void *)\n {\n   A* ap = &a;\n+  return 0;\n }\n \n int main()"}, {"sha": "0009726626b08a2f9bdcad37216c000bcf8fcd3d", "filename": "gcc/testsuite/g++.dg/tls/thread_local6.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local6.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -22,6 +22,7 @@ void f()\n void *thread_main(void *)\n {\n   f(); f(); f();\n+  return 0;\n }\n \n int main()"}, {"sha": "d357ca4fa1f8bb61c8b1a7bc22e924e668f81173", "filename": "gcc/testsuite/g++.dg/tls/thread_local6g.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local6g.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local6g.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local6g.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -20,6 +20,7 @@ thread_local A a;\n void *thread_main(void *)\n {\n   A* ap = &a;\n+  return 0;\n }\n \n int main()"}, {"sha": "c2538288964d5867bedb3c6cb41d8c40b93ec91b", "filename": "gcc/testsuite/g++.dg/torture/pr34850.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34850.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34850.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34850.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -13,6 +13,8 @@ extern \"C\" {\n     void * memset (void *__dest, int __ch, size_t __len) throw () {\n \tif (__builtin_constant_p (__len) && __len == 0)\n \t    __warn_memset_zero_len (); /* { dg-warning \"declared with attribute warning\" } */\n+\n+\treturn __dest;\n     }\n }\n inline void clear_mem(void* ptr, u32bit n)    {\n@@ -50,11 +52,13 @@ template<typename T> class SecureVector : public MemoryRegion<T>    {\n public:\n     SecureVector<T>& operator=(const MemoryRegion<T>& in)          {\n \tif(this != &in) this->set(in);\n+\treturn *this;\n     }\n };\n class OctetString    {\n public:\n     SecureVector<byte> bits_of() const {\n+\treturn SecureVector<byte> ();\n     }\n     OctetString& operator^=(const OctetString&);\n     void change(const MemoryRegion<byte>& in) {\n@@ -69,6 +73,8 @@ OctetString& OctetString::operator^=(const OctetString& k)    {\n     if(&k == this) {\n \tbits.clear();\n     }\n+\n+    return *this;\n }\n bool __attribute__((flatten))\n operator==(const OctetString& s1, const OctetString& s2)    {"}, {"sha": "6125a179bdc7c48c69dd85a2e6253ae90aca03ae", "filename": "gcc/testsuite/g++.dg/tree-prof/pr79259.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fpr79259.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fpr79259.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fpr79259.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -11,6 +11,8 @@ fn2 ()\n {\n   if (a (c == 0))\n     return 0;\n+\n+  return 0;\n }\n \n int main()"}, {"sha": "668db49d1466772c5e13478c57f2ba6955d5c596", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr33604.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr33604.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr33604.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr33604.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -6,7 +6,7 @@ struct Value\n   double value;\n   Value(double value_) : value (value_) {}\n   operator double() const { return value; }\n-  Value& operator=(double other) { value = other; }\n+  Value& operator=(double other) { value = other; return *this; }\n };\n \n struct Ref"}, {"sha": "60e6e5277d74aa5232fcd7d8852ce86093db7f82", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr81408.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr81408.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr81408.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr81408.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -1,5 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -std=gnu++11 -fopt-info-loop-missed -Wunsafe-loop-optimizations\" } */\n+struct p\n+{\n+  char *ay;\n+};\n \n namespace a {\n void b () __attribute__ ((__noreturn__));\n@@ -19,7 +23,7 @@ template <typename j, typename> class k\n   j l;\n \n public:\n-  typename d<j>::f operator* () {}\n+  typename d<j>::f operator* () { return p(); }\n   void operator++ () { ++l; }\n   j\n   aa ()\n@@ -33,7 +37,6 @@ operator!= (k<m, ab> o, k<n, ab> p2)\n {\n   return o.aa () != p2.aa ();\n }\n-struct p;\n namespace a {\n struct F\n {\n@@ -75,13 +78,10 @@ at\n av (au o)\n {\n   o.aq ('\\n');\n+  return at();\n }\n u ax;\n }\n-struct p\n-{\n-  char *ay;\n-};\n a::H t;\n void\n ShowHelpListCommands ()"}, {"sha": "8f24a78f70901331381eaef058219898d8dd5b1d", "filename": "gcc/testsuite/g++.dg/warn/string1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fstring1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dbc16908cdb8335f3a9235b18bb33aa9f74dea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fstring1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fstring1.C?ref=23dbc16908cdb8335f3a9235b18bb33aa9f74dea", "patch": "@@ -15,4 +15,6 @@ int test() {\n   //\n   std::string s = \"\";\n   s += 'x' + \"y\";\t      // { dg-warning \"bounds of constant string\" }\n+\n+  return 0;\n }"}]}