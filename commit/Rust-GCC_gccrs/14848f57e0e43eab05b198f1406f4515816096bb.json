{"sha": "14848f57e0e43eab05b198f1406f4515816096bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ4NDhmNTdlMGU0M2VhYjA1YjE5OGYxNDA2ZjQ1MTU4MTYwOTZiYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T14:02:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T14:02:26Z"}, "message": "[multiple changes]\n\n2011-08-29  Pascal Obry  <obry@adacore.com>\n\n\t* exp_disp.adb: Minor comment fix.\n\t(Make_Disp_Asynchronous_Select_Body): Properly initialize out parameters\n\tto avoid warnings when compiling with -Wall.\n\t(Make_Disp_Conditional_Select_Body): Likewise.\n\t(Make_Disp_Timed_Select_Body): Likewise.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Formal_Subprogram_Declaration): If default is\n\tan entity name, generate reference for it.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_Iterator_Loop): Uniform handling of \"X of S\"\n\titerator form.\n\t* sem_util.adb (Is_Iterator, Is_Reversible_Iterator): Yield True for\n\tthe class-wide type.\n\t* sem_ch5.adb: Move some rewriting to the expander, where it belongs.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Check_Constrained_Object): Do not create an actual\n\tsubtype for an object whose type is an unconstrained union.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* par-ch3.adb (P_Array_Type_Definiation, P_Component_Items): \"aliased\"\n\tis allowed in a component definition, by AI95-406.\n\n2011-08-29  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-chtgbo.adb (Generic_Iteration): Use correct overloading of Next.\n\n2011-08-29  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* a-except-2005.adb: Alphabetize all routines.\n\t(Triggered_By_Abort): New routine.\n\t* a-except-2005.ads (Triggered_By_Abort): New routine.\n\t* a-except.adb Alphabetize all routines.\n\t(Triggered_By_Abort): New routine.\n\t* a-except.ads (Triggered_By_Abort): New routine.\n\t* exp_ch7.adb: Update all comments involving the detection of aborts in\n\tfinalization code.\n\t(Build_Object_Declarations): Do not generate code to detect the\n\tpresence of an abort at the start of finalization code, use a runtime\n\troutine istead.\n\t* rtsfind.ads: Add RE_Triggered_By_Abort to tables RE_Id and\n\tRE_Unit_Table.\n\t* sem_res.adb (Resolve_Allocator): Emit a warning when attempting to\n\tallocate a task on a subpool.\n\t* s-stposu.adb: Add library-level flag Finalize_Address_Table_In_Use.\n\tThe flag disables all actions related to the maintenance of\n\tFinalize_Address_Table when subpools are not in use.\n\t(Allocate_Any_Controlled): Signal the machinery that subpools are in\n\tuse.\n\t(Deallocate_Any_Controlled): Do not call Delete_Finalize_Address which\n\tperforms costly task locking when subpools are not in use.\n\nFrom-SVN: r178236", "tree": {"sha": "760d18eba47b5549c567cc7fc511563c5d41bf97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/760d18eba47b5549c567cc7fc511563c5d41bf97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14848f57e0e43eab05b198f1406f4515816096bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14848f57e0e43eab05b198f1406f4515816096bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14848f57e0e43eab05b198f1406f4515816096bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14848f57e0e43eab05b198f1406f4515816096bb/comments", "author": null, "committer": null, "parents": [{"sha": "57a8057af4d9cafef111626b162b9ce2b096d63f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a8057af4d9cafef111626b162b9ce2b096d63f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a8057af4d9cafef111626b162b9ce2b096d63f"}], "stats": {"total": 773, "additions": 446, "deletions": 327}, "files": [{"sha": "82b72fec4b17957f5a8a5e38596f68bccedb390d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -1,3 +1,63 @@\n+2011-08-29  Pascal Obry  <obry@adacore.com>\n+\n+\t* exp_disp.adb: Minor comment fix.\n+\t(Make_Disp_Asynchronous_Select_Body): Properly initialize out parameters\n+\tto avoid warnings when compiling with -Wall.\n+\t(Make_Disp_Conditional_Select_Body): Likewise.\n+\t(Make_Disp_Timed_Select_Body): Likewise.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Formal_Subprogram_Declaration): If default is\n+\tan entity name, generate reference for it.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Iterator_Loop): Uniform handling of \"X of S\"\n+\titerator form.\n+\t* sem_util.adb (Is_Iterator, Is_Reversible_Iterator): Yield True for\n+\tthe class-wide type.\n+\t* sem_ch5.adb: Move some rewriting to the expander, where it belongs.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Check_Constrained_Object): Do not create an actual\n+\tsubtype for an object whose type is an unconstrained union.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch3.adb (P_Array_Type_Definiation, P_Component_Items): \"aliased\"\n+\tis allowed in a component definition, by AI95-406.\n+\n+2011-08-29  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-chtgbo.adb (Generic_Iteration): Use correct overloading of Next.\n+\n+2011-08-29  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-except-2005.adb: Alphabetize all routines.\n+\t(Triggered_By_Abort): New routine.\n+\t* a-except-2005.ads (Triggered_By_Abort): New routine.\n+\t* a-except.adb Alphabetize all routines.\n+\t(Triggered_By_Abort): New routine.\n+\t* a-except.ads (Triggered_By_Abort): New routine.\n+\t* exp_ch7.adb: Update all comments involving the detection of aborts in\n+\tfinalization code.\n+\t(Build_Object_Declarations): Do not generate code to detect the\n+\tpresence of an abort at the start of finalization code, use a runtime\n+\troutine istead.\n+\t* rtsfind.ads: Add RE_Triggered_By_Abort to tables RE_Id and\n+\tRE_Unit_Table.\n+\t* sem_res.adb (Resolve_Allocator): Emit a warning when attempting to\n+\tallocate a task on a subpool.\n+\t* s-stposu.adb: Add library-level flag Finalize_Address_Table_In_Use.\n+\tThe flag disables all actions related to the maintenance of\n+\tFinalize_Address_Table when subpools are not in use.\n+\t(Allocate_Any_Controlled): Signal the machinery that subpools are in\n+\tuse.\n+\t(Deallocate_Any_Controlled): Do not call Delete_Finalize_Address which\n+\tperforms costly task locking when subpools are not in use.\n+\n 2011-08-29  Yannick Moy  <moy@adacore.com>\n \n \t* gnat1drv.adb (Adjust_Global_Switches): Restore expansion of tagged"}, {"sha": "a4254697044b2730c358a3415a15963eda6fd370", "filename": "gcc/ada/a-chtgbo.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fa-chtgbo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fa-chtgbo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgbo.adb?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -350,7 +350,7 @@ package body Ada.Containers.Hash_Tables.Generic_Bounded_Operations is\n          Node := HT.Buckets (Indx);\n          while Node /= 0 loop\n             Process (Node);\n-            Node := Next (HT, Node);\n+            Node := Next (HT.Nodes (Node));\n          end loop;\n       end loop;\n    end Generic_Iteration;"}, {"sha": "0196f92187726443e97e6d184a26d8a66e96025d", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 54, "deletions": 42, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -762,6 +762,20 @@ package body Ada.Exceptions is\n    --  in case we do not want any exception tracing support. This is\n    --  why this package is separated.\n \n+   -----------\n+   -- Image --\n+   -----------\n+\n+   function Image (Index : Integer) return String is\n+      Result : constant String := Integer'Image (Index);\n+   begin\n+      if Result (1) = ' ' then\n+         return Result (2 .. Result'Last);\n+      else\n+         return Result;\n+      end if;\n+   end Image;\n+\n    -----------------------\n    -- Stream Attributes --\n    -----------------------\n@@ -848,6 +862,22 @@ package body Ada.Exceptions is\n       Raise_Current_Excep (E);\n    end Raise_Exception_Always;\n \n+   ------------------------------\n+   -- Raise_Exception_No_Defer --\n+   ------------------------------\n+\n+   procedure Raise_Exception_No_Defer\n+     (E       : Exception_Id;\n+      Message : String := \"\")\n+   is\n+   begin\n+      Exception_Data.Set_Exception_Msg (E, Message);\n+\n+      --  Do not call Abort_Defer.all, as specified by the spec\n+\n+      Raise_Current_Excep (E);\n+   end Raise_Exception_No_Defer;\n+\n    -------------------------------------\n    -- Raise_From_Controlled_Operation --\n    -------------------------------------\n@@ -1007,20 +1037,6 @@ package body Ada.Exceptions is\n       Raise_Current_Excep (E);\n    end Raise_With_Msg;\n \n-   -----------\n-   -- Image --\n-   -----------\n-\n-   function Image (Index : Integer) return String is\n-      Result : constant String := Integer'Image (Index);\n-   begin\n-      if Result (1) = ' ' then\n-         return Result (2 .. Result'Last);\n-      else\n-         return Result;\n-      end if;\n-   end Image;\n-\n    --------------------------------------\n    -- Calls to Run-Time Check Routines --\n    --------------------------------------\n@@ -1319,18 +1335,6 @@ package body Ada.Exceptions is\n       return Target;\n    end Save_Occurrence;\n \n-   -------------------------\n-   -- Transfer_Occurrence --\n-   -------------------------\n-\n-   procedure Transfer_Occurrence\n-     (Target : Exception_Occurrence_Access;\n-      Source : Exception_Occurrence)\n-   is\n-   begin\n-      Save_Occurrence (Target.all, Source);\n-   end Transfer_Occurrence;\n-\n    -------------------\n    -- String_To_EId --\n    -------------------\n@@ -1345,22 +1349,6 @@ package body Ada.Exceptions is\n    function String_To_EO (S : String) return Exception_Occurrence\n      renames Stream_Attributes.String_To_EO;\n \n-   ------------------------------\n-   -- Raise_Exception_No_Defer --\n-   ------------------------------\n-\n-   procedure Raise_Exception_No_Defer\n-     (E       : Exception_Id;\n-      Message : String := \"\")\n-   is\n-   begin\n-      Exception_Data.Set_Exception_Msg (E, Message);\n-\n-      --  Do not call Abort_Defer.all, as specified by the spec\n-\n-      Raise_Current_Excep (E);\n-   end Raise_Exception_No_Defer;\n-\n    ---------------\n    -- To_Stderr --\n    ---------------\n@@ -1384,6 +1372,30 @@ package body Ada.Exceptions is\n       end loop;\n    end To_Stderr;\n \n+   -------------------------\n+   -- Transfer_Occurrence --\n+   -------------------------\n+\n+   procedure Transfer_Occurrence\n+     (Target : Exception_Occurrence_Access;\n+      Source : Exception_Occurrence)\n+   is\n+   begin\n+      Save_Occurrence (Target.all, Source);\n+   end Transfer_Occurrence;\n+\n+   ------------------------\n+   -- Triggered_By_Abort --\n+   ------------------------\n+\n+   function Triggered_By_Abort return Boolean is\n+      Ex : constant Exception_Occurrence_Access := Get_Current_Excep.all;\n+\n+   begin\n+      return Ex /= null\n+        and then Exception_Identity (Ex.all) = Standard'Abort_Signal'Identity;\n+   end Triggered_By_Abort;\n+\n    -------------------------\n    -- Wide_Exception_Name --\n    -------------------------"}, {"sha": "8457c031d04245bb635f9d7776fea636da864f57", "filename": "gcc/ada/a-except-2005.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fa-except-2005.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fa-except-2005.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.ads?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -250,6 +250,10 @@ private\n    --  occurrence. This is used in generated code when it is known that abort\n    --  is already deferred.\n \n+   function Triggered_By_Abort return Boolean;\n+   --  Determine whether the current exception (if exists) is an instance of\n+   --  Standard'Abort_Signal.\n+\n    -----------------------\n    -- Polling Interface --\n    -----------------------"}, {"sha": "415267c7733708da68f6affeb4d19977d3c21b3d", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -807,6 +807,22 @@ package body Ada.Exceptions is\n       Raise_Current_Excep (E);\n    end Raise_Exception_Always;\n \n+   ------------------------------\n+   -- Raise_Exception_No_Defer --\n+   ------------------------------\n+\n+   procedure Raise_Exception_No_Defer\n+     (E       : Exception_Id;\n+      Message : String := \"\")\n+   is\n+   begin\n+      Exception_Data.Set_Exception_Msg (E, Message);\n+\n+      --  Do not call Abort_Defer.all, as specified by the spec\n+\n+      Raise_Current_Excep (E);\n+   end Raise_Exception_No_Defer;\n+\n    -------------------------------------\n    -- Raise_From_Controlled_Operation --\n    -------------------------------------\n@@ -1205,18 +1221,6 @@ package body Ada.Exceptions is\n       return Target;\n    end Save_Occurrence;\n \n-   -------------------------\n-   -- Transfer_Occurrence --\n-   -------------------------\n-\n-   procedure Transfer_Occurrence\n-     (Target : Exception_Occurrence_Access;\n-      Source : Exception_Occurrence)\n-   is\n-   begin\n-      Save_Occurrence (Target.all, Source);\n-   end Transfer_Occurrence;\n-\n    -------------------\n    -- String_To_EId --\n    -------------------\n@@ -1231,22 +1235,6 @@ package body Ada.Exceptions is\n    function String_To_EO (S : String) return Exception_Occurrence\n      renames Stream_Attributes.String_To_EO;\n \n-   ------------------------------\n-   -- Raise_Exception_No_Defer --\n-   ------------------------------\n-\n-   procedure Raise_Exception_No_Defer\n-     (E       : Exception_Id;\n-      Message : String := \"\")\n-   is\n-   begin\n-      Exception_Data.Set_Exception_Msg (E, Message);\n-\n-      --  Do not call Abort_Defer.all, as specified by the spec\n-\n-      Raise_Current_Excep (E);\n-   end Raise_Exception_No_Defer;\n-\n    ---------------\n    -- To_Stderr --\n    ---------------\n@@ -1270,4 +1258,28 @@ package body Ada.Exceptions is\n       end loop;\n    end To_Stderr;\n \n+   -------------------------\n+   -- Transfer_Occurrence --\n+   -------------------------\n+\n+   procedure Transfer_Occurrence\n+     (Target : Exception_Occurrence_Access;\n+      Source : Exception_Occurrence)\n+   is\n+   begin\n+      Save_Occurrence (Target.all, Source);\n+   end Transfer_Occurrence;\n+\n+   ------------------------\n+   -- Triggered_By_Abort --\n+   ------------------------\n+\n+   function Triggered_By_Abort return Boolean is\n+      Ex : constant Exception_Occurrence_Access := Get_Current_Excep.all;\n+\n+   begin\n+      return Ex /= null\n+        and then Exception_Identity (Ex.all) = Standard'Abort_Signal'Identity;\n+   end Triggered_By_Abort;\n+\n end Ada.Exceptions;"}, {"sha": "183bb0bf07ccc331f744150e203add2408c7bd05", "filename": "gcc/ada/a-except.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fa-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fa-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.ads?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -221,6 +221,10 @@ private\n    --  occurrence. This is used in generated code when it is known that\n    --  abort is already deferred.\n \n+   function Triggered_By_Abort return Boolean;\n+   --  Determine whether the current exception (if exists) is an instance of\n+   --  Standard'Abort_Signal.\n+\n    -----------------------\n    -- Polling Interface --\n    -----------------------"}, {"sha": "29399d790f8fcb1e35e6f6e00e7f9c36a341fb5d", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 101, "deletions": 69, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -23,6 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Aspects;  use Aspects;\n with Atree;    use Atree;\n with Checks;   use Checks;\n with Debug;    use Debug;\n@@ -2920,12 +2921,21 @@ package body Exp_Ch5 is\n \n          declare\n             Element_Type : constant Entity_Id := Etype (Id);\n+            Iter_Type    : Entity_Id;\n             Pack         : Entity_Id;\n             Decl         : Node_Id;\n             Name_Init    : Name_Id;\n             Name_Step    : Name_Id;\n \n          begin\n+\n+            --  The type of the iterator is the return type of the Iterate\n+            --  function used. For the \"of\" form this is the default iterator\n+            --  for the type, otherwise it is the type of the explicit\n+            --  function used in the loop.\n+\n+            Iter_Type := Etype (Name (I_Spec));\n+\n             if Is_Entity_Name (Container) then\n                Pack := Scope (Etype (Container));\n \n@@ -2934,14 +2944,43 @@ package body Exp_Ch5 is\n             end if;\n \n             --  The \"of\" case uses an internally generated cursor whose type\n-            --  is found in the container package.\n+            --  is found in the container package. The domain of iteration\n+            --  is expanded into a call to the default Iterator function, but\n+            --  this expansion does not take place in a quantifier expressions\n+            --  that are analyzed with expansion disabled, and in that case the\n+            --  type of the iterator must be obtained from the aspect.\n \n             if Of_Present (I_Spec) then\n-               Cursor := Make_Temporary (Loc, 'I');\n-\n                declare\n+                  Default_Iter : constant Entity_Id :=\n+                    Find_Aspect (Etype (Container), Aspect_Default_Iterator);\n                   Ent : Entity_Id;\n+\n                begin\n+                  Cursor := Make_Temporary (Loc, 'I');\n+\n+                  if Is_Iterator (Iter_Type) then\n+                     null;\n+\n+                  else\n+                     Iter_Type :=\n+                        Etype\n+                         (Find_Aspect\n+                              (Etype (Container), Aspect_Default_Iterator));\n+\n+                     --  Rewrite domain of iteration as a call to the default\n+                     --  iterator for the container type.\n+\n+                     Rewrite (Name (I_Spec),\n+                       Make_Function_Call (Loc,\n+                         Name => Default_Iter,\n+                         Parameter_Associations =>\n+                           New_List (Relocate_Node (Name (I_Spec)))));\n+                     Analyze_And_Resolve (Name (I_Spec));\n+                  end if;\n+\n+                  --  Find cursor type in container package.\n+\n                   Ent := First_Entity (Pack);\n                   while Present (Ent) loop\n                      if Chars (Ent) = Name_Cursor then\n@@ -2950,60 +2989,61 @@ package body Exp_Ch5 is\n                      end if;\n                      Next_Entity (Ent);\n                   end loop;\n+\n+                  --  Generate:\n+                  --    Id : Element_Type renames Pack.Element (Cursor);\n+\n+                  Decl :=\n+                    Make_Object_Renaming_Declaration (Loc,\n+                      Defining_Identifier => Id,\n+                         Subtype_Mark =>\n+                        New_Reference_To (Element_Type, Loc),\n+                      Name =>\n+                        Make_Indexed_Component (Loc,\n+                          Prefix => Make_Selected_Component (Loc,\n+                              Prefix        => New_Reference_To (Pack, Loc),\n+                              Selector_Name =>\n+                                Make_Identifier (Loc, Chars => Name_Element)),\n+                          Expressions =>\n+                            New_List (New_Occurrence_Of (Cursor, Loc))));\n+\n+                  --  If the container holds controlled objects, wrap the loop\n+                  --  statements and element renaming declaration with a block.\n+                  --  This ensures that the result of Element (Iterator) is\n+                  --  cleaned up after each iteration of the loop.\n+\n+                  if Needs_Finalization (Element_Type) then\n+\n+                     --  Generate:\n+                     --    declare\n+                     --       Id : Element_Type := Pack.Element (Iterator);\n+                     --    begin\n+                     --       <original loop statements>\n+                     --    end;\n+\n+                     Stats := New_List (\n+                       Make_Block_Statement (Loc,\n+                         Declarations => New_List (Decl),\n+                         Handled_Statement_Sequence =>\n+                           Make_Handled_Sequence_Of_Statements (Loc,\n+                              Statements => Stats)));\n+\n+                  --  Elements do not need finalization\n+\n+                  else\n+                     Prepend_To (Stats, Decl);\n+                  end if;\n                end;\n \n+            --  X in Iterate (S) : type of iterator is type of explicitly\n+            --  given Iterate function.\n+\n             else\n                Cursor := Id;\n             end if;\n \n             Iterator := Make_Temporary (Loc, 'I');\n \n-            if Of_Present (I_Spec) then\n-\n-               --  Generate:\n-               --    Id : Element_Type renames Pack.Element (Cursor);\n-\n-               Decl :=\n-                 Make_Object_Renaming_Declaration (Loc,\n-                   Defining_Identifier => Id,\n-                   Subtype_Mark =>\n-                     New_Reference_To (Element_Type, Loc),\n-                   Name =>\n-                     Make_Indexed_Component (Loc,\n-                       Prefix =>\n-                         Make_Selected_Component (Loc,\n-                           Prefix =>\n-                             New_Reference_To (Pack, Loc),\n-                           Selector_Name =>\n-                             Make_Identifier (Loc, Chars => Name_Element)),\n-                       Expressions => New_List (\n-                          New_Occurrence_Of (Cursor, Loc))));\n-\n-               --  When the container holds controlled objects, wrap the loop\n-               --  statements and element renaming declaration with a block.\n-               --  This ensures that the transient result of Element (Iterator)\n-               --  is cleaned up after each iteration of the loop.\n-\n-               if Needs_Finalization (Element_Type) then\n-\n-                  --  Generate:\n-                  --    declare\n-                  --       Id : Element_Type := Pack.Element (Iterator);\n-                  --    begin\n-                  --       <original loop statements>\n-                  --    end;\n-\n-                  Stats := New_List (\n-                    Make_Block_Statement (Loc,\n-                      Declarations => New_List (Decl),\n-                      Handled_Statement_Sequence =>\n-                        Make_Handled_Sequence_Of_Statements (Loc,\n-                          Statements => Stats)));\n-               else\n-                  Prepend_To (Stats, Decl);\n-               end if;\n-            end if;\n-\n             --  Determine the advancement and initialization steps for the\n             --  cursor.\n \n@@ -3026,23 +3066,16 @@ package body Exp_Ch5 is\n \n             declare\n                Rhs : Node_Id;\n+\n             begin\n-               if Of_Present (I_Spec) then\n-                  Rhs :=\n-                    Make_Function_Call (Loc,\n-                      Name => Make_Identifier (Loc, Name_Step),\n-                      Parameter_Associations =>\n-                        New_List (New_Reference_To (Cursor, Loc)));\n-               else\n-                  Rhs :=\n-                    Make_Function_Call (Loc,\n-                      Name =>\n-                        Make_Selected_Component (Loc,\n-                          Prefix => New_Reference_To (Iterator, Loc),\n-                          Selector_Name => Make_Identifier (Loc, Name_Step)),\n-                      Parameter_Associations => New_List (\n-                         New_Reference_To (Cursor, Loc)));\n-               end if;\n+               Rhs :=\n+                 Make_Function_Call (Loc,\n+                   Name =>\n+                     Make_Selected_Component (Loc,\n+                       Prefix => New_Reference_To (Iterator, Loc),\n+                       Selector_Name => Make_Identifier (Loc, Name_Step)),\n+                   Parameter_Associations => New_List (\n+                      New_Reference_To (Cursor, Loc)));\n \n                Append_To (Stats,\n                  Make_Assignment_Statement (Loc,\n@@ -3082,14 +3115,13 @@ package body Exp_Ch5 is\n             declare\n                Decl1 : Node_Id;\n                Decl2 : Node_Id;\n+\n             begin\n                Decl1 :=\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Iterator,\n-                 Object_Definition =>\n-                   New_Occurrence_Of (Etype (Name (I_Spec)), Loc),\n-\n-                 Expression => Relocate_Node (Name (I_Spec)));\n+                   Object_Definition   => New_Occurrence_Of (Iter_Type, Loc),\n+                   Expression          => Relocate_Node (Name (I_Spec)));\n                Set_Assignment_OK (Decl1);\n \n                Decl2 :="}, {"sha": "34dfdd021e0585646517204c826cb59ee66cf28c", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 19, "deletions": 92, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -1535,9 +1535,7 @@ package body Exp_Ch7 is\n \n          --  Generate:\n          --    procedure Fin_Id is\n-         --       Abort  : constant Boolean :=\n-         --                  Exception_Occurrence (Get_Current_Excep.all.all) =\n-         --                    Standard'Abort_Signal'Identity;\n+         --       Abort  : constant Boolean := Triggered_By_Abort;\n          --         <or>\n          --       Abort  : constant Boolean := False;  --  no abort\n \n@@ -3003,58 +3001,9 @@ package body Exp_Ch7 is\n         and then VM_Target = No_VM\n         and then not For_Package\n       then\n-         declare\n-            Temp_Id : constant Entity_Id := Make_Temporary (Loc, 'E');\n-\n-         begin\n-            --  Generate:\n-            --    Temp : constant Exception_Occurrence_Access :=\n-            --             Get_Current_Excep.all;\n+         A_Expr := New_Reference_To (RTE (RE_Triggered_By_Abort), Loc);\n \n-            Append_To (Result,\n-              Make_Object_Declaration (Loc,\n-                Defining_Identifier => Temp_Id,\n-                Constant_Present    => True,\n-                Object_Definition   =>\n-                  New_Reference_To (RTE (RE_Exception_Occurrence_Access), Loc),\n-                Expression          =>\n-                  Make_Function_Call (Loc,\n-                    Name =>\n-                      Make_Explicit_Dereference (Loc,\n-                        Prefix =>\n-                          New_Reference_To\n-                            (RTE (RE_Get_Current_Excep), Loc)))));\n-\n-            --  Generate:\n-            --    Temp /= null\n-            --      and then Exception_Identity (Temp.all) =\n-            --                 Standard'Abort_Signal'Identity;\n-\n-            A_Expr :=\n-              Make_And_Then (Loc,\n-                Left_Opnd  =>\n-                  Make_Op_Ne (Loc,\n-                    Left_Opnd  => New_Reference_To (Temp_Id, Loc),\n-                    Right_Opnd => Make_Null (Loc)),\n-\n-                Right_Opnd =>\n-                  Make_Op_Eq (Loc,\n-                    Left_Opnd =>\n-                      Make_Function_Call (Loc,\n-                        Name                   =>\n-                          New_Reference_To (RTE (RE_Exception_Identity), Loc),\n-                        Parameter_Associations => New_List (\n-                          Make_Explicit_Dereference (Loc,\n-                            Prefix => New_Reference_To (Temp_Id, Loc)))),\n-\n-                    Right_Opnd =>\n-                      Make_Attribute_Reference (Loc,\n-                        Prefix         =>\n-                          New_Reference_To (Stand.Abort_Signal, Loc),\n-                        Attribute_Name => Name_Identity)));\n-         end;\n-\n-      --  No abort or .NET/JVM\n+      --  No abort, .NET/JVM or library-level finalizers\n \n       else\n          A_Expr := New_Reference_To (Standard_False, Loc);\n@@ -3107,32 +3056,33 @@ package body Exp_Ch7 is\n       Stmt : Node_Id;\n \n    begin\n-      --  Standard run-time, .NET/JVM targets\n-      --  Call Raise_From_Controlled_Operation (E_Id).\n+      --  Standard run-time and .NET/JVM targets use the specialized routine\n+      --  Raise_From_Controlled_Operation.\n \n       if RTE_Available (RE_Raise_From_Controlled_Operation) then\n          Stmt :=\n            Make_Procedure_Call_Statement (Loc,\n-              Name                   =>\n-                New_Reference_To (RTE (RE_Raise_From_Controlled_Operation),\n-                                  Loc),\n+              Name =>\n+                New_Reference_To\n+                  (RTE (RE_Raise_From_Controlled_Operation), Loc),\n               Parameter_Associations =>\n                 New_List (New_Reference_To (E_Id, Loc)));\n \n       --  Restricted runtime: exception messages are not supported and hence\n-      --  Raise_From_Controlled_Operation is not supported.\n-      --  Simply raise Program_Error.\n+      --  Raise_From_Controlled_Operation is not supported. Raise Program_Error\n+      --  instead.\n \n       else\n          Stmt :=\n            Make_Raise_Program_Error (Loc,\n              Reason => PE_Finalize_Raised_Exception);\n-\n       end if;\n \n       --  Generate:\n       --    if Raised_Id and then not Abort_Id then\n       --       Raise_From_Controlled_Operation (E_Id);\n+      --         <or>\n+      --       raise Program_Error;  --  restricted runtime\n       --    end if;\n \n       return\n@@ -4717,12 +4667,7 @@ package body Exp_Ch7 is\n       --  controlled elements. Generate:\n       --\n       --    declare\n-      --       Temp   : constant Exception_Occurrence_Access :=\n-      --                  Get_Current_Excep.all;\n-      --       Abort  : constant Boolean :=\n-      --                  Temp /= null\n-      --                    and then Exception_Identity (Temp_Id.all) =\n-      --                               Standard'Abort_Signal'Identity;\n+      --       Abort  : constant Boolean := Triggered_By_Abort;\n       --         <or>\n       --       Abort  : constant Boolean := False;  --  no abort\n       --\n@@ -4773,12 +4718,7 @@ package body Exp_Ch7 is\n       --             exception\n       --                when others =>\n       --                   declare\n-      --                      Temp   : constant Exception_Occurrence_Access :=\n-      --                                 Get_Current_Excep.all;\n-      --                      Abort  : constant Boolean :=\n-      --                        Temp /= null\n-      --                          and then Exception_Identity (Temp_Id.all) =\n-      --                                     Standard'Abort_Signal'Identity;\n+      --                      Abort  : constant Boolean := Triggered_By_Abort;\n       --                        <or>\n       --                      Abort  : constant Boolean := False; --  no abort\n       --                      E      : Exception_Occurence;\n@@ -4970,9 +4910,7 @@ package body Exp_Ch7 is\n          --  the conditional raise:\n \n          --    declare\n-         --       Abort  : constant Boolean :=\n-         --                  Exception_Occurrence (Get_Current_Excep.all.all) =\n-         --                    Standard'Abort_Signal'Identity;\n+         --       Abort  : constant Boolean := Triggered_By_Abort;\n          --         <or>\n          --       Abort  : constant Boolean := False;  --  no abort\n \n@@ -5257,9 +5195,7 @@ package body Exp_Ch7 is\n          --  raised flag and the conditional raise.\n \n          --    declare\n-         --       Abort  : constant Boolean :=\n-         --                  Exception_Occurrence (Get_Current_Excep.all.all) =\n-         --                    Standard'Abort_Signal'Identity;\n+         --       Abort  : constant Boolean := Triggered_By_Abort;\n          --         <or>\n          --       Abort  : constant Boolean := False;  --  no abort\n \n@@ -5572,12 +5508,7 @@ package body Exp_Ch7 is\n       --  may have discriminants and contain variant parts. Generate:\n       --\n       --    declare\n-      --       Temp   : constant Exception_Occurrence_Access :=\n-      --                  Get_Current_Excep.all;\n-      --       Abort  : constant Boolean :=\n-      --                  Temp /= null\n-      --                    and then Exception_Identity (Temp_Id.all) =\n-      --                               Standard'Abort_Signal'Identity;\n+      --       Abort  : constant Boolean := Triggered_By_Abort;\n       --         <or>\n       --       Abort  : constant Boolean := False;  --  no abort\n       --       E      : Exception_Occurence;\n@@ -6049,9 +5980,7 @@ package body Exp_Ch7 is\n \n          --  Generate:\n          --    declare\n-         --       Abort  : constant Boolean :=\n-         --                  Exception_Occurrence (Get_Current_Excep.all.all) =\n-         --                    Standard'Abort_Signal'Identity;\n+         --       Abort  : constant Boolean := Triggered_By_Abort;\n          --         <or>\n          --       Abort  : constant Boolean := False;  --  no abort\n \n@@ -6633,9 +6562,7 @@ package body Exp_Ch7 is\n \n          --  Generate:\n          --    declare\n-         --       Abort  : constant Boolean :=\n-         --                  Exception_Occurrence (Get_Current_Excep.all.all) =\n-         --                    Standard'Abort_Signal'Identity;\n+         --       Abort  : constant Boolean := Triggered_By_Abort;\n          --         <or>\n          --       Abort  : constant Boolean := False;  --  no abort\n "}, {"sha": "603ea2b461d08680d8c73aa82276546378092a84", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 46, "deletions": 12, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -2051,7 +2051,8 @@ package body Exp_Disp is\n    --        F : out Boolean)\n    --     is\n    --     begin\n-   --        null;\n+   --        F := False;\n+   --        C := Ada.Tags.POK_Function;\n    --     end _Disp_Asynchronous_Select;\n \n    --  For protected types, generate:\n@@ -2122,7 +2123,9 @@ package body Exp_Disp is\n                New_List,\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n-                 New_List (Make_Null_Statement (Loc))));\n+                 New_List (Make_Assignment_Statement (Loc,\n+                   Name => Make_Identifier (Loc, Name_uF),\n+                   Expression => New_Reference_To (Standard_False, Loc)))));\n       end if;\n \n       if Is_Concurrent_Record_Type (Typ) then\n@@ -2262,6 +2265,14 @@ package body Exp_Disp is\n                     Expression =>\n                       New_Reference_To (Com_Block, Loc))));\n \n+            --  Generate:\n+            --    F := False;\n+\n+            Append_To (Stmts,\n+              Make_Assignment_Statement (Loc,\n+                Name => Make_Identifier (Loc, Name_uF),\n+                Expression => New_Reference_To (Standard_False, Loc)));\n+\n          else\n             pragma Assert (Ekind (Conc_Typ) = E_Task_Type);\n \n@@ -2300,7 +2311,10 @@ package body Exp_Disp is\n       else\n          --  Ensure that the statements list is non-empty\n \n-         Append_To (Stmts, Make_Null_Statement (Loc));\n+         Append_To (Stmts,\n+           Make_Assignment_Statement (Loc,\n+             Name => Make_Identifier (Loc, Name_uF),\n+             Expression => New_Reference_To (Standard_False, Loc)));\n       end if;\n \n       return\n@@ -2391,7 +2405,8 @@ package body Exp_Disp is\n    --        F : out Boolean)\n    --     is\n    --     begin\n-   --        null;\n+   --        F := False;\n+   --        C := Ada.Tags.POK_Function;\n    --     end _Disp_Conditional_Select;\n \n    --  For protected types, generate:\n@@ -2474,7 +2489,9 @@ package body Exp_Disp is\n                No_List,\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n-                 New_List (Make_Null_Statement (Loc))));\n+                 New_List (Make_Assignment_Statement (Loc,\n+                   Name => Make_Identifier (Loc, Name_uF),\n+                   Expression => New_Reference_To (Standard_False, Loc)))));\n       end if;\n \n       if Is_Concurrent_Record_Type (Typ) then\n@@ -2675,9 +2692,16 @@ package body Exp_Disp is\n          end if;\n \n       else\n-         --  Ensure that the statements list is non-empty\n+         --  Initialize out parameters\n \n-         Append_To (Stmts, Make_Null_Statement (Loc));\n+         Append_To (Stmts,\n+           Make_Assignment_Statement (Loc,\n+             Name => Make_Identifier (Loc, Name_uF),\n+             Expression => New_Reference_To (Standard_False, Loc)));\n+         Append_To (Stmts,\n+           Make_Assignment_Statement (Loc,\n+             Name => Make_Identifier (Loc, Name_uC),\n+             Expression => New_Reference_To (RTE (RE_POK_Function), Loc)));\n       end if;\n \n       return\n@@ -3235,7 +3259,8 @@ package body Exp_Disp is\n    --        F : out Boolean)\n    --     is\n    --     begin\n-   --        null;\n+   --        F := False;\n+   --        C := Ada.Tags.POK_Function;\n    --     end _Disp_Timed_Select;\n \n    --  For protected types, generate:\n@@ -3294,7 +3319,7 @@ package body Exp_Disp is\n    --           P,\n    --           D,\n    --           M,\n-   --           D);\n+   --           F);\n    --     end _Disp_Time_Select;\n \n    function Make_Disp_Timed_Select_Body\n@@ -3321,7 +3346,9 @@ package body Exp_Disp is\n                New_List,\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n-                 New_List (Make_Null_Statement (Loc))));\n+                 New_List (Make_Assignment_Statement (Loc,\n+                   Name => Make_Identifier (Loc, Name_uF),\n+                   Expression => New_Reference_To (Standard_False, Loc)))));\n       end if;\n \n       if Is_Concurrent_Record_Type (Typ) then\n@@ -3500,9 +3527,16 @@ package body Exp_Disp is\n          end if;\n \n       else\n-         --  Ensure that the statements list is non-empty\n+         --  Initialize out parameters\n \n-         Append_To (Stmts, Make_Null_Statement (Loc));\n+         Append_To (Stmts,\n+           Make_Assignment_Statement (Loc,\n+             Name => Make_Identifier (Loc, Name_uF),\n+             Expression => New_Reference_To (Standard_False, Loc)));\n+         Append_To (Stmts,\n+           Make_Assignment_Statement (Loc,\n+             Name => Make_Identifier (Loc, Name_uC),\n+             Expression => New_Reference_To (RTE (RE_POK_Function), Loc)));\n       end if;\n \n       return"}, {"sha": "aba013d85ae966b9b567f5584a7a70dd751c1712", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -1083,7 +1083,11 @@ package body Ch3 is\n    begin\n       Constr_Node := P_Constraint_Opt;\n \n-      if No (Constr_Node) then\n+      if No (Constr_Node)\n+        or else\n+          (Nkind (Constr_Node) = N_Range_Constraint\n+             and then Nkind (Range_Expression (Constr_Node)) = N_Error)\n+      then\n          return Subtype_Mark;\n       else\n          if Not_Null_Present then\n@@ -2668,9 +2672,11 @@ package body Ch3 is\n             Error_Msg_SP (\"\\unit must be compiled with -gnat05 switch\");\n          end if;\n \n-         if Aliased_Present then\n-            Error_Msg_SP (\"ALIASED not allowed here\");\n-         end if;\n+         --  AI95-406 makes \"aliased\" legal (and useless) in this context.\n+\n+         --  if Aliased_Present then\n+         --     Error_Msg_SP (\"ALIASED not allowed here\");\n+         --  end if;\n \n          Set_Subtype_Indication     (CompDef_Node, Empty);\n          Set_Aliased_Present        (CompDef_Node, False);\n@@ -3443,9 +3449,11 @@ package body Ch3 is\n                   Error_Msg_SP (\"\\unit must be compiled with -gnat05 switch\");\n                end if;\n \n-               if Aliased_Present then\n-                  Error_Msg_SP (\"ALIASED not allowed here\");\n-               end if;\n+               --  AI95-406 makes \"aliased\" legal (and useless) here.\n+\n+               --  if Aliased_Present then\n+               --     Error_Msg_SP (\"ALIASED not allowed here\");\n+               --  end if;\n \n                Set_Subtype_Indication (CompDef_Node, Empty);\n                Set_Aliased_Present    (CompDef_Node, False);"}, {"sha": "d262e86cae1e58efb4be40b4f54165a4ad7ab923", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -520,6 +520,7 @@ package Rtsfind is\n      RE_Reraise_Occurrence_Always,       -- Ada.Exceptions\n      RE_Reraise_Occurrence_No_Defer,     -- Ada.Exceptions\n      RE_Save_Occurrence,                 -- Ada.Exceptions\n+     RE_Triggered_By_Abort,              -- Ada.Exceptions\n \n      RE_Interrupt_ID,                    -- Ada.Interrupts\n      RE_Is_Reserved,                     -- Ada.Interrupts\n@@ -1707,6 +1708,7 @@ package Rtsfind is\n      RE_Reraise_Occurrence_Always        => Ada_Exceptions,\n      RE_Reraise_Occurrence_No_Defer      => Ada_Exceptions,\n      RE_Save_Occurrence                  => Ada_Exceptions,\n+     RE_Triggered_By_Abort               => Ada_Exceptions,\n \n      RE_Interrupt_ID                     => Ada_Interrupts,\n      RE_Is_Reserved                      => Ada_Interrupts,"}, {"sha": "9a6c23109967266dd34e0587931a0d5adfe1b410", "filename": "gcc/ada/s-stposu.adb", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fs-stposu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fs-stposu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stposu.adb?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -39,6 +39,11 @@ with System.Storage_Elements;     use System.Storage_Elements;\n \n package body System.Storage_Pools.Subpools is\n \n+   Finalize_Address_Table_In_Use : Boolean := False;\n+   --  This flag should be set only when a successfull allocation on a subpool\n+   --  has been performed and the associated Finalize_Address has been added to\n+   --  the hash table in System.Finalization_Masters.\n+\n    procedure Attach (N : not null SP_Node_Ptr; L : not null SP_Node_Ptr);\n    --  Attach a subpool node to a pool\n \n@@ -269,6 +274,7 @@ package body System.Storage_Pools.Subpools is\n             pragma Assert (not Master.Is_Homogeneous);\n \n             Set_Finalize_Address (Addr, Fin_Address);\n+            Finalize_Address_Table_In_Use := True;\n \n          --  Normal allocations chain objects on homogeneous collections\n \n@@ -335,12 +341,11 @@ package body System.Storage_Pools.Subpools is\n       if Is_Controlled then\n \n          --  Destroy the relation pair object - Finalize_Address since it is no\n-         --  longer needed. If the object was chained on a homogeneous master,\n-         --  this call does nothing. This is unconditional destruction since we\n-         --  do not want to drag in additional data to determine the master\n-         --  kind.\n+         --  longer needed.\n \n-         Delete_Finalize_Address (Addr);\n+         if Finalize_Address_Table_In_Use then\n+            Delete_Finalize_Address (Addr);\n+         end if;\n \n          --  Account for possible padding space before the header due to a\n          --  larger alignment."}, {"sha": "873e13baf61a8d21b57697b404374db5bcf3a0d8", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -2573,7 +2573,11 @@ package body Sem_Ch12 is\n             end;\n \n             if Subp /= Any_Id then\n+\n+               --  Subprogram found, generate reference to it.\n+\n                Set_Entity (Def, Subp);\n+               Generate_Reference (Subp, Def);\n \n                if Subp = Nam then\n                   Error_Msg_N (\"premature usage of formal subprogram\", Def);"}, {"sha": "5ac99e87790054feab3d1e265b419eb69a8e1286", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 7, "deletions": 32, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -2342,42 +2342,17 @@ package body Sem_Ch5 is\n          Set_Ekind (Def_Id, E_Loop_Parameter);\n \n          if Of_Present (N) then\n-            --  If the container has already been rewritten as a\n-            --  call to the default iterator, nothing to do. This\n-            --  is the case with the expansion of a quantified\n-            --  expression.\n \n-            if Nkind (Name (N)) = N_Function_Call\n-              and then not Comes_From_Source (Name (N))\n-            then\n-               null;\n-\n-            elsif Expander_Active then\n-\n-               --  Find the Iterator_Element and the default_iterator\n-               --   of the container type.\n-\n-               Set_Etype (Def_Id,\n-                 Entity (\n-                   Find_Aspect (Typ, Aspect_Iterator_Element)));\n+            --  The type of the loop variable is the Iterator_Element\n+            --  aspect of the container type.\n \n-               declare\n-                  Default_Iter : constant Entity_Id :=\n-                    Find_Aspect (Typ, Aspect_Default_Iterator);\n-               begin\n-                  Rewrite (Name (N),\n-                    Make_Function_Call (Loc,\n-                      Name => Default_Iter,\n-                      Parameter_Associations =>\n-                        New_List (Relocate_Node (Iter_Name))));\n-                  Analyze_And_Resolve (Name (N));\n-               end;\n-            end if;\n+            Set_Etype (Def_Id,\n+              Entity (Find_Aspect (Typ, Aspect_Iterator_Element)));\n \n          else\n-            --  result type of Iterate function is the classwide\n-            --  type of the interface parent. We need the specific\n-            --  Cursor type defined in the package.\n+            --  The result type of Iterate function is the classwide type\n+            --  of the interface parent. We need the specific Cursor type\n+            --  defined in the container package.\n \n             Ent := First_Entity (Scope (Typ));\n             while Present (Ent) loop"}, {"sha": "5a782f3c20cc07db36803754fb452931cc885af0", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -721,6 +721,12 @@ package body Sem_Ch8 is\n             then\n                null;\n \n+            --  A renaming of an unchecked union does not have an\n+            --  actual subtype.\n+\n+            elsif Is_Unchecked_Union (Etype (Nam)) then\n+               null;\n+\n             else\n                Subt := Make_Temporary (Loc, 'T');\n                Remove_Side_Effects (Nam);"}, {"sha": "15c96c6ba2a21094842b5b0e3e84099f824b66f2", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -4382,19 +4382,30 @@ package body Sem_Res is\n       end if;\n \n       --  Report a simple error:  if the designated object is a local task,\n-      --  its body has not been seen yet, and its activation will fail\n-      --  an elaboration check.\n+      --  its body has not been seen yet, and its activation will fail an\n+      --  elaboration check.\n \n       if Is_Task_Type (Desig_T)\n         and then Scope (Base_Type (Desig_T)) = Current_Scope\n         and then Is_Compilation_Unit (Current_Scope)\n         and then Ekind (Current_Scope) = E_Package\n         and then not In_Package_Body (Current_Scope)\n       then\n-         Error_Msg_N\n-           (\"cannot activate task before body seen?\", N);\n+         Error_Msg_N (\"cannot activate task before body seen?\", N);\n          Error_Msg_N (\"\\Program_Error will be raised at run time?\", N);\n       end if;\n+\n+      --  Ada 2012 (AI05-0111-3): Issue a warning whenever allocating a task\n+      --  or a type containing tasks on a subpool since the deallocation of\n+      --  the subpool may lead to undefined task behavior.\n+\n+      if Ada_Version >= Ada_2012\n+        and then Present (Subpool_Handle_Name (N))\n+        and then Has_Task (Desig_T)\n+      then\n+         Error_Msg_N (\"?allocation of task on subpool may lead to \" &\n+                      \"undefined behavior\", N);\n+      end if;\n    end Resolve_Allocator;\n \n    ---------------------------"}, {"sha": "e855da24ef4f2658ebbc6ddd09b1bc1a4e35f75b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 58, "deletions": 35, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14848f57e0e43eab05b198f1406f4515816096bb/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=14848f57e0e43eab05b198f1406f4515816096bb", "patch": "@@ -7175,7 +7175,19 @@ package body Sem_Util is\n       Iface       : Entity_Id;\n \n    begin\n-      if not Is_Tagged_Type (Typ) or else not Is_Derived_Type (Typ) then\n+      if Is_Class_Wide_Type (Typ)\n+        and then\n+          (Chars (Etype (Typ)) = Name_Forward_Iterator\n+            or else Chars (Etype (Typ)) = Name_Reversible_Iterator)\n+        and then\n+          Is_Predefined_File_Name\n+            (Unit_File_Name (Get_Source_Unit (Etype (Typ))))\n+      then\n+         return True;\n+\n+      elsif not Is_Tagged_Type (Typ)\n+        or else not Is_Derived_Type (Typ)\n+      then\n          return False;\n \n       else\n@@ -7198,6 +7210,51 @@ package body Sem_Util is\n          return False;\n       end if;\n    end Is_Iterator;\n+\n+   ----------------------------\n+   -- Is_Reversible_Iterator --\n+   ----------------------------\n+\n+   function Is_Reversible_Iterator (Typ : Entity_Id) return Boolean is\n+      Ifaces_List : Elist_Id;\n+      Iface_Elmt  : Elmt_Id;\n+      Iface       : Entity_Id;\n+\n+   begin\n+      if Is_Class_Wide_Type (Typ)\n+        and then  Chars (Etype (Typ)) = Name_Reversible_Iterator\n+        and then\n+          Is_Predefined_File_Name\n+            (Unit_File_Name (Get_Source_Unit (Etype (Typ))))\n+      then\n+         return True;\n+\n+      elsif not Is_Tagged_Type (Typ)\n+        or else not Is_Derived_Type (Typ)\n+      then\n+         return False;\n+      else\n+\n+         Collect_Interfaces (Typ, Ifaces_List);\n+\n+         Iface_Elmt := First_Elmt (Ifaces_List);\n+         while Present (Iface_Elmt) loop\n+            Iface := Node (Iface_Elmt);\n+            if Chars (Iface) = Name_Reversible_Iterator\n+              and then\n+                Is_Predefined_File_Name\n+                  (Unit_File_Name (Get_Source_Unit (Iface)))\n+            then\n+               return True;\n+            end if;\n+\n+            Next_Elmt (Iface_Elmt);\n+         end loop;\n+\n+      end if;\n+      return False;\n+   end Is_Reversible_Iterator;\n+\n    ------------\n    -- Is_LHS --\n    ------------\n@@ -7841,40 +7898,6 @@ package body Sem_Util is\n       return False;\n    end Is_Renamed_Entry;\n \n-   ----------------------------\n-   -- Is_Reversible_Iterator --\n-   ----------------------------\n-\n-   function Is_Reversible_Iterator (Typ : Entity_Id) return Boolean is\n-      Ifaces_List : Elist_Id;\n-      Iface_Elmt  : Elmt_Id;\n-      Iface       : Entity_Id;\n-\n-   begin\n-      if not Is_Tagged_Type (Typ) or else not Is_Derived_Type (Typ) then\n-         return False;\n-\n-      else\n-         Collect_Interfaces (Typ, Ifaces_List);\n-\n-         Iface_Elmt := First_Elmt (Ifaces_List);\n-         while Present (Iface_Elmt) loop\n-            Iface := Node (Iface_Elmt);\n-            if Chars (Iface) = Name_Reversible_Iterator\n-              and then\n-                Is_Predefined_File_Name\n-                  (Unit_File_Name (Get_Source_Unit (Iface)))\n-            then\n-               return True;\n-            end if;\n-\n-            Next_Elmt (Iface_Elmt);\n-         end loop;\n-      end if;\n-\n-      return False;\n-   end Is_Reversible_Iterator;\n-\n    ----------------------\n    -- Is_Selector_Name --\n    ----------------------"}]}