{"sha": "8502e23d1f24bc654e2f347d5bed3de49458c3d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUwMmUyM2QxZjI0YmM2NTRlMmYzNDdkNWJlZDNkZTQ5NDU4YzNkMA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-23T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-23T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "00f4463e753a3b31d830c5d950121afb349e8c92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00f4463e753a3b31d830c5d950121afb349e8c92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8502e23d1f24bc654e2f347d5bed3de49458c3d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8502e23d1f24bc654e2f347d5bed3de49458c3d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8502e23d1f24bc654e2f347d5bed3de49458c3d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8502e23d1f24bc654e2f347d5bed3de49458c3d0/comments", "author": null, "committer": null, "parents": [{"sha": "16b7b8a32d430c23c3913aa2c04998fadb7cf273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b7b8a32d430c23c3913aa2c04998fadb7cf273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16b7b8a32d430c23c3913aa2c04998fadb7cf273"}], "stats": {"total": 320, "additions": 319, "deletions": 1}, "files": [{"sha": "184395529e52718807bc6da2e5fbbc2f7a1e3ef8", "filename": "ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8502e23d1f24bc654e2f347d5bed3de49458c3d0/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8502e23d1f24bc654e2f347d5bed3de49458c3d0/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=8502e23d1f24bc654e2f347d5bed3de49458c3d0", "patch": "@@ -1,3 +1,11 @@\n+2021-01-22  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* MAINTAINERS (Write After Approval): Add myself.\n+\n+2021-01-22  Maciej W. Rozycki  <macro@orcam.me.uk>\n+\n+\t* MAINTAINERS (Write After Approval): Update my e-mail address.\n+\n 2021-01-12  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* MAINTAINERS: Fix spacing."}, {"sha": "541621885e93245ef9385bea52325dd181e1bf37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8502e23d1f24bc654e2f347d5bed3de49458c3d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8502e23d1f24bc654e2f347d5bed3de49458c3d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8502e23d1f24bc654e2f347d5bed3de49458c3d0", "patch": "@@ -1,3 +1,138 @@\n+2021-01-22  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add mla builtin\n+\tgenerator macro.\n+\t* config/aarch64/arm_neon.h (vmla_s8): Use RTL builtin rather\n+\tthan asm.\n+\t(vmla_s16): Likewise.\n+\t(vmla_s32): Likewise.\n+\t(vmla_u8): Likewise.\n+\t(vmla_u16): Likewise.\n+\t(vmla_u32): Likewise.\n+\t(vmlaq_s8): Likewise.\n+\t(vmlaq_s16): Likewise.\n+\t(vmlaq_s32): Likewise.\n+\t(vmlaq_u8): Likewise.\n+\t(vmlaq_u16): Likewise.\n+\t(vmlaq_u32): Likewise.\n+\n+2021-01-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/invoke.texi (GCC_EXTRA_DIAGNOSTIC_OUTPUT): Add @findex\n+\tdirective.\n+\n+2021-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/98796\n+\t* dwarf2out.c (output_file_names): For -gdwarf-5, if there are no\n+\tfilenames to emit, still emit the required 0 index directory and\n+\tfilename entries that match DW_AT_comp_dir and DW_AT_name of the\n+\tcompilation unit.\n+\n+2021-01-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98545\n+\t* doc/invoke.texi: Update C++ ABI Version 15 description.\n+\n+2021-01-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR tree-optimization/98766\n+\t* tree-ssa-math-opts.c (convert_mult_to_fma): Use maybe_le when\n+\tcomparing against type size with param_avoid_fma_max_bits.\n+\n+2021-01-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/98793\n+\t* tree.c (vector_element_bits): Key single-bit bool vector on\n+\tinteger mode rather than not vector mode.\n+\n+2021-01-22  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR target/98093\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n+\tGenerate ARRAY_REF(VIEW_CONVERT_EXPR) for P8 and later\n+\tplatforms.\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_set_var): Update\n+\tto call different path for P8 and P9.\n+\t(rs6000_expand_vector_set_var_p9): New function.\n+\t(rs6000_expand_vector_set_var_p8): New function.\n+\n+2021-01-22  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR target/79251\n+\tPR target/98065\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n+\tAjdust variable index vec_insert from address dereference to\n+\tARRAY_REF(VIEW_CONVERT_EXPR) tree expression.\n+\t* config/rs6000/rs6000-protos.h (rs6000_expand_vector_set_var):\n+\tNew declaration.\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_set_var): New function.\n+\n+2021-01-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/98739\n+\t* profile.c (compute_value_histograms): Drop time profile for\n+\t-fprofile-reproducible=multithreaded.\n+\n+2021-01-22  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcc.c (process_command): Don't check OPT_SPECIAL_input_file\n+\texistence here.\n+\n+2021-01-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/98773\n+\t* tree-data-ref.c (initalize_matrix_A): Revert previous\n+\tchange, retaining failing on HOST_WIDE_INT_MIN CHREC_RIGHT.\n+\n+2021-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/90248\n+\t* match.pd (X cmp 0.0 ? 1.0 : -1.0 -> copysign(1, +-X),\n+\tX cmp 0.0 ? -1.0 : +1.0 -> copysign(1, -+X)): Remove\n+\tsimplifications.\n+\t(X * (X cmp 0.0 ? 1.0 : -1.0) -> +-abs(X),\n+\tX * (X cmp 0.0 ? -1.0 : 1.0) -> +-abs(X)): New simplifications.\n+\n+2021-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98255\n+\t* tree-dfa.c (get_ref_base_and_extent): For ARRAY_REFs, sign\n+\textend index - low_bound from sizetype's precision rather than index\n+\tprecision.\n+\t(get_addr_base_and_unit_offset_1): Likewise.\n+\t* tree-ssa-sccvn.c (ao_ref_init_from_vn_reference): Likewise.\n+\t* gimple-fold.c (fold_const_aggregate_ref_1): Likewise.\n+\n+2021-01-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98786\n+\t* tree-ssa-phiopt.c (factor_out_conditional_conversion): Avoid\n+\tadding new uses of abnormals.  Verify we deal with a conditional\n+\tconversion.\n+\n+2021-01-22  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/98636\n+\t* optc-save-gen.awk: Add arm_fp16_format to checked_options.\n+\n+2021-01-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/96891\n+\tPR target/98348\n+\t* config/i386/sse.md (VI_128_256): New mode iterator.\n+\t(*avx_cmp<mode>3_1, *avx_cmp<mode>3_2, *avx_cmp<mode>3_3,\n+\t *avx_cmp<mode>3_4, *avx2_eq<mode>3, *avx2_pcmp<mode>3_1,\n+\t *avx2_pcmp<mode>3_2, *avx2_gt<mode>3): New\n+\tdefine_insn_and_split to lower avx512 vector comparison to avx\n+\tversion when dest is vector.\n+\t(*<avx512>_cmp<mode>3,*<avx512>_cmp<mode>3,*<avx512>_ucmp<mode>3):\n+\tdefine_insn_and_split for negating the comparison result.\n+\t* config/i386/predicates.md (float_vector_all_ones_operand):\n+\tNew predicate.\n+\t* config/i386/i386-expand.c (ix86_expand_sse_movcc): Use\n+\tgeneral NOT operator without UNSPEC_MASKOP.\n+\n 2021-01-21  Vladimir N. Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/98777"}, {"sha": "cd3ab91b01156695c6579f40dce275e9be7d84f3", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8502e23d1f24bc654e2f347d5bed3de49458c3d0/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8502e23d1f24bc654e2f347d5bed3de49458c3d0/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=8502e23d1f24bc654e2f347d5bed3de49458c3d0", "patch": "@@ -1 +1 @@\n-20210122\n+20210123"}, {"sha": "5148fa5f16e1a4e65ace574fc45eb96c71471ccd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8502e23d1f24bc654e2f347d5bed3de49458c3d0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8502e23d1f24bc654e2f347d5bed3de49458c3d0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8502e23d1f24bc654e2f347d5bed3de49458c3d0", "patch": "@@ -1,3 +1,38 @@\n+2021-01-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96623\n+\t* parser.c (inject_parm_decls): Remove a redundant assignment.\n+\t(cp_parser_class_specifier_1): Clear current_class_{ptr,ref}\n+\tbefore calling inject_parm_decls.\n+\n+2021-01-22  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98744\n+\t* call.c (make_base_init_ok): Use DECL_HAS_VTT_PARM_P.\n+\n+2021-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/95693\n+\t* init.c (build_zero_init_1): Revert the 2018-03-06 change to\n+\treturn build_zero_cst for reference types.\n+\t* typeck2.c (process_init_constructor_record): Instead call\n+\tbuild_zero_cst here during error recovery instead of build_zero_init.\n+\n+2021-01-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98545\n+\t* mangle.c (write_member_name): Emit abi_warn_or_compat_version_crosses\n+\twarnings regardless of abi_version_at_least.\n+\t(write_expression): When the expression is a dependent name\n+\tand an operator name, write \"on\" before writing its name.\n+\n+2021-01-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97966\n+\t* pt.c (instantiate_class_template_1): Instantiate members\n+\tmarked with attribute used only after we're done instantiating\n+\tthe class.\n+\n 2021-01-21  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/71879"}, {"sha": "013c137993a39b664689acf3b95d0f5885883b3f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8502e23d1f24bc654e2f347d5bed3de49458c3d0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8502e23d1f24bc654e2f347d5bed3de49458c3d0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8502e23d1f24bc654e2f347d5bed3de49458c3d0", "patch": "@@ -1,3 +1,10 @@\n+2021-01-22  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/98565\n+\t* trans-intrinsic.c (gfc_conv_associated): Do not add a _data\n+\tcomponent for scalar class function targets. Instead, fix the\n+\tfunction result and access the _data from that.\n+\n 2021-01-21  Jorge D'Elia  <jdelia@cimec.unl.edu.ar>\n \n \t* intrinsic.texi (CO_MAX): Fix typo."}, {"sha": "072c2e0b66f481ce14eb2f66d71aa828b7dbf859", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8502e23d1f24bc654e2f347d5bed3de49458c3d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8502e23d1f24bc654e2f347d5bed3de49458c3d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8502e23d1f24bc654e2f347d5bed3de49458c3d0", "patch": "@@ -1,3 +1,136 @@\n+2021-01-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96623\n+\t* g++.dg/cpp0x/noexcept64.C: New test.\n+\n+2021-01-22  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* g++.dg/eh/spbp.C: Remove skip on AIX.\n+\n+2021-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/powerpc/m128-check.h (CHECK_EXP, CHECK_FP_EXP): Fix a\n+\ttypo, UINON_TYPE to UNION_TYPE.\n+\n+2021-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/m128-check.h (CHECK_EXP, CHECK_FP_EXP): Fix a typo,\n+\tUINON_TYPE to UNION_TYPE.\n+\t* gcc.target/i386/m256-check.h (CHECK_FP_EXP): Likewise.\n+\t* gcc.target/i386/m512-check.h (CHECK_ROUGH_EXP): Likewise.\n+\n+2021-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/powerpc/m128-check.h (check_##UINON_TYPE): Add\n+\toptimize (\"no-strict-aliasing\") attribute.\n+\n+2021-01-22  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98744\n+\t* g++.dg/init/elide7.C: New test.\n+\n+2021-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/95693\n+\t* g++.dg/ubsan/pr95693.C: New test.\n+\n+2021-01-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98545\n+\t* g++.dg/abi/mangle76.C: New test.\n+\n+2021-01-22  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/98565\n+\t* gfortran.dg/associated_target_7.f90 : New test.\n+\n+2021-01-22  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/47059\n+\t* gcc.dg/tree-ssa/pr47059.c: New test.\n+\n+2021-01-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR tree-optimization/98766\n+\t* gcc.dg/pr98766.c: New test.\n+\n+2021-01-22  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR testsuite/98795\n+\t* g++.dg/modules/modules.exp (module_cmi_p): Avoid\n+\tembedded absolute paths.\n+\t(module_do_it): Append $std to test name.\n+\n+2021-01-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/98793\n+\t* gcc.dg/pr98793.c: New testcase.\n+\n+2021-01-22  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/pr79251.p8.c: New test.\n+\t* gcc.target/powerpc/fold-vec-insert-char-p8.c: Adjust\n+\tinstruction counts.\n+\t* gcc.target/powerpc/fold-vec-insert-char-p9.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-double.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-float-p8.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-float-p9.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-int-p8.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-int-p9.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-longlong.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-short-p8.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-short-p9.c: Likewise.\n+\t* gcc.target/powerpc/vsx-builtin-7.c: Likewise.\n+\n+2021-01-22  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/pr79251.p9.c: New test.\n+\t* gcc.target/powerpc/pr79251-run.c: New test.\n+\t* gcc.target/powerpc/pr79251.h: New header.\n+\n+2021-01-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/98773\n+\t* gcc.dg/torture/pr98773.c: New testcase.\n+\n+2021-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/90248\n+\t* gcc.dg/tree-ssa/copy-sign-1.c: Don't expect any copysign\n+\tbuiltins.\n+\t* gcc.dg/pr90248.c: New test.\n+\n+2021-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98255\n+\t* gcc.dg/pr98255.c: New test.\n+\n+2021-01-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98786\n+\t* gcc.dg/torture/pr98786.c: New testcase.\n+\n+2021-01-22  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/98636\n+\t* gcc.target/arm/pr98636.c: New test.\n+\n+2021-01-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/96891\n+\tPR target/98348\n+\t* gcc.target/i386/avx512bw-pr96891-1.c: New test.\n+\t* gcc.target/i386/avx512f-pr96891-1.c: New test.\n+\t* gcc.target/i386/avx512f-pr96891-2.c: New test.\n+\t* gcc.target/i386/avx512f-pr96891-3.c: New test.\n+\t* g++.target/i386/avx512f-pr96891-1.C: New test.\n+\t* gcc.target/i386/bitwise_mask_op-3.c: Adjust testcase.\n+\n+2021-01-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97966\n+\t* g++.dg/cpp0x/noexcept63.C: New test.\n+\n 2021-01-21  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* g++.dg/cpp2a/lambda-uneval1.C: Ignore preceding \"l\" and"}]}