{"sha": "ab11fb42c35513a796626d9ddb70c8eaf4d4b037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIxMWZiNDJjMzU1MTNhNzk2NjI2ZDlkZGI3MGM4ZWFmNGQ0YjAzNw==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2012-11-13T00:36:54Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2012-11-13T00:36:54Z"}, "message": "re PR target/55195 (shorten_branches generates incorrect forward branch distances)\n\n\tPR target/55195\n\t* config/pa/pa.md (type): Add sibcall and sh_func_adrs insn types.\n\t(in_branch_delay): Don't allow sibcall or sh_func_adrs insns.\n\t(in_nullified_branch_delay): Likewise.\n\t(in_call_delay): Likewise.\n\tDefine delay for sibcall insns.  Adjust Z3 and Z4 insn reservations for\n\tnew types.  Add opaque cond to mark all calls, sibcalls, dyncalls and\n\tthe $$sh_func_adrs call as variable.  Update type of sibcalls and\n\t$$sh_func_adrs call.\n\t* config/pa/pa.c (pa_adjust_insn_length): Revise to return updated\n\tlength instead of adjustment.  Handle negative and undefined call\n\tadjustments for insn_default_length.  Remove adjustment for millicode\n\tinsn with unfilled delay slot.\n\t(pa_output_millicode_call): Update for revised millicode length.\n\t* config/pa/pa.h (ADJUST_INSN_LENGTH): Revise to set LENGTH.\n\nFrom-SVN: r193464", "tree": {"sha": "3527527cc5944a442f28078158e0c39af0202580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3527527cc5944a442f28078158e0c39af0202580"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab11fb42c35513a796626d9ddb70c8eaf4d4b037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab11fb42c35513a796626d9ddb70c8eaf4d4b037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab11fb42c35513a796626d9ddb70c8eaf4d4b037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab11fb42c35513a796626d9ddb70c8eaf4d4b037/comments", "author": null, "committer": null, "parents": [{"sha": "769b084b1a8e7e14a51249c9791776327dae869d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/769b084b1a8e7e14a51249c9791776327dae869d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/769b084b1a8e7e14a51249c9791776327dae869d"}], "stats": {"total": 231, "additions": 160, "deletions": 71}, "files": [{"sha": "9cad8079d26bca67b1c9becb1322757d10676ce9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab11fb42c35513a796626d9ddb70c8eaf4d4b037/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab11fb42c35513a796626d9ddb70c8eaf4d4b037/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab11fb42c35513a796626d9ddb70c8eaf4d4b037", "patch": "@@ -1,3 +1,21 @@\n+2012-11-12  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR target/55195\n+\t* config/pa/pa.md (attr type): Add sibcall and sh_func_adrs insn types.\n+\t(in_branch_delay): Don't allow sibcall or sh_func_adrs insns.\n+\t(in_nullified_branch_delay): Likewise.\n+\t(in_call_delay): Likewise.\n+\tDefine delay for sibcall insns.  Adjust Z3 and Z4 insn reservations for\n+\tnew types.  Add opaque cond to mark all calls, sibcalls, dyncalls and\n+\tthe $$sh_func_adrs call as variable.  Update type of sibcalls and\n+\t$$sh_func_adrs call.\n+\t* config/pa/pa.c (pa_adjust_insn_length): Revise to return updated\n+\tlength instead of adjustment.  Handle negative and undefined call\n+\tadjustments for insn_default_length.  Remove adjustment for millicode\n+\tinsn with unfilled delay slot.\n+\t(pa_output_millicode_call): Update for revised millicode length.\n+\t* config/pa/pa.h (ADJUST_INSN_LENGTH): Revise to set LENGTH.\n+\n 2012-11-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa-ccp.c (dump_lattice_value) <CONSTANT>: Fix duplication."}, {"sha": "afcfd1a8d22847420804153a9da33507d3cdf5bc", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 44, "deletions": 30, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab11fb42c35513a796626d9ddb70c8eaf4d4b037/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab11fb42c35513a796626d9ddb70c8eaf4d4b037/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=ab11fb42c35513a796626d9ddb70c8eaf4d4b037", "patch": "@@ -4880,12 +4880,9 @@ pa_issue_rate (void)\n \n \n \n-/* Return any length adjustment needed by INSN which already has its length\n-   computed as LENGTH.   Return zero if no adjustment is necessary.\n-\n-   For the PA: function calls, millicode calls, and backwards short\n-   conditional branches with unfilled delay slots need an adjustment by +1\n-   (to account for the NOP which will be inserted into the instruction stream).\n+/* Return any length plus adjustment needed by INSN which already has\n+   its length computed as LENGTH.   Return LENGTH if no adjustment is\n+   necessary.\n \n    Also compute the length of an inline block move here as it is too\n    complicated to express as a length attribute in pa.md.  */\n@@ -4894,19 +4891,40 @@ pa_adjust_insn_length (rtx insn, int length)\n {\n   rtx pat = PATTERN (insn);\n \n+  /* If length is negative or undefined, provide initial length.  */\n+  if ((unsigned int) length >= INT_MAX)\n+    {\n+      if (GET_CODE (pat) == SEQUENCE)\n+\tinsn = XVECEXP (pat, 0, 0);\n+\n+      switch (get_attr_type (insn))\n+\t{\n+\tcase TYPE_MILLI:\n+\t  length = pa_attr_length_millicode_call (insn);\n+\t  break;\n+\tcase TYPE_CALL:\n+\t  length = pa_attr_length_call (insn, 0);\n+\t  break;\n+\tcase TYPE_SIBCALL:\n+\t  length = pa_attr_length_call (insn, 1);\n+\t  break;\n+\tcase TYPE_DYNCALL:\n+\t  length = pa_attr_length_indirect_call (insn);\n+\t  break;\n+\tcase TYPE_SH_FUNC_ADRS:\n+\t  length = pa_attr_length_millicode_call (insn) + 20;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n+\n   /* Jumps inside switch tables which have unfilled delay slots need\n      adjustment.  */\n   if (GET_CODE (insn) == JUMP_INSN\n       && GET_CODE (pat) == PARALLEL\n       && get_attr_type (insn) == TYPE_BTABLE_BRANCH)\n-    return 4;\n-  /* Millicode insn with an unfilled delay slot.  */\n-  else if (GET_CODE (insn) == INSN\n-\t   && GET_CODE (pat) != SEQUENCE\n-\t   && GET_CODE (pat) != USE\n-\t   && GET_CODE (pat) != CLOBBER\n-\t   && get_attr_type (insn) == TYPE_MILLI)\n-    return 4;\n+    length += 4;\n   /* Block move pattern.  */\n   else if (GET_CODE (insn) == INSN\n \t   && GET_CODE (pat) == PARALLEL\n@@ -4915,15 +4933,15 @@ pa_adjust_insn_length (rtx insn, int length)\n \t   && GET_CODE (XEXP (XVECEXP (pat, 0, 0), 1)) == MEM\n \t   && GET_MODE (XEXP (XVECEXP (pat, 0, 0), 0)) == BLKmode\n \t   && GET_MODE (XEXP (XVECEXP (pat, 0, 0), 1)) == BLKmode)\n-    return compute_movmem_length (insn) - 4;\n+    length += compute_movmem_length (insn) - 4;\n   /* Block clear pattern.  */\n   else if (GET_CODE (insn) == INSN\n \t   && GET_CODE (pat) == PARALLEL\n \t   && GET_CODE (XVECEXP (pat, 0, 0)) == SET\n \t   && GET_CODE (XEXP (XVECEXP (pat, 0, 0), 0)) == MEM\n \t   && XEXP (XVECEXP (pat, 0, 0), 1) == const0_rtx\n \t   && GET_MODE (XEXP (XVECEXP (pat, 0, 0), 0)) == BLKmode)\n-    return compute_clrmem_length (insn) - 4;\n+    length += compute_clrmem_length (insn) - 4;\n   /* Conditional branch with an unfilled delay slot.  */\n   else if (GET_CODE (insn) == JUMP_INSN && ! simplejump_p (insn))\n     {\n@@ -4932,11 +4950,11 @@ pa_adjust_insn_length (rtx insn, int length)\n \t  && length == 4\n \t  && JUMP_LABEL (insn) != NULL_RTX\n \t  && ! forward_branch_p (insn))\n-\treturn 4;\n+\tlength += 4;\n       else if (GET_CODE (pat) == PARALLEL\n \t       && get_attr_type (insn) == TYPE_PARALLEL_BRANCH\n \t       && length == 4)\n-\treturn 4;\n+\tlength += 4;\n       /* Adjust dbra insn with short backwards conditional branch with\n \t unfilled delay slot -- only for case where counter is in a\n \t general register register.  */\n@@ -4946,11 +4964,9 @@ pa_adjust_insn_length (rtx insn, int length)\n  \t       && ! FP_REG_P (XEXP (XVECEXP (pat, 0, 1), 0))\n \t       && length == 4\n \t       && ! forward_branch_p (insn))\n-\treturn 4;\n-      else\n-\treturn 0;\n+\tlength += 4;\n     }\n-  return 0;\n+  return length;\n }\n \n /* Implement the TARGET_PRINT_OPERAND_PUNCT_VALID_P hook.  */\n@@ -7511,15 +7527,13 @@ pa_output_millicode_call (rtx insn, rtx call_dest)\n \n   /* Handle the common case where we are sure that the branch will\n      reach the beginning of the $CODE$ subspace.  The within reach\n-     form of the $$sh_func_adrs call has a length of 28.  Because\n-     it has an attribute type of multi, it never has a nonzero\n-     sequence length.  The length of the $$sh_func_adrs is the same\n-     as certain out of reach PIC calls to other routines.  */\n+     form of the $$sh_func_adrs call has a length of 28.  Because it\n+     has an attribute type of sh_func_adrs, it never has a nonzero\n+     sequence length (i.e., the delay slot is never filled).  */\n   if (!TARGET_LONG_CALLS\n-      && ((seq_length == 0\n-\t   && (attr_length == 12\n-\t       || (attr_length == 28 && get_attr_type (insn) == TYPE_MULTI)))\n-\t  || (seq_length != 0 && attr_length == 8)))\n+      && (attr_length == 8\n+\t  || (attr_length == 28\n+\t      && get_attr_type (insn) == TYPE_SH_FUNC_ADRS)))\n     {\n       output_asm_insn (\"{bl|b,l} %0,%2\", xoperands);\n     }"}, {"sha": "89665c1cddc03115252da2f91c34e9bf8a0b4907", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab11fb42c35513a796626d9ddb70c8eaf4d4b037/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab11fb42c35513a796626d9ddb70c8eaf4d4b037/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=ab11fb42c35513a796626d9ddb70c8eaf4d4b037", "patch": "@@ -1273,8 +1273,8 @@ do { \t\t\t\t\t\t\t\t\t\\\n \n /* Handling the special cases is going to get too complicated for a macro,\n    just call `pa_adjust_insn_length' to do the real work.  */\n-#define ADJUST_INSN_LENGTH(INSN, LENGTH)\t\\\n-  LENGTH += pa_adjust_insn_length (INSN, LENGTH);\n+#define ADJUST_INSN_LENGTH(INSN, LENGTH) \\\n+  ((LENGTH) = pa_adjust_insn_length ((INSN), (LENGTH)))\n \n /* Millicode insns are actually function calls with some special\n    constraints on arguments and register usage."}, {"sha": "705d336f3f07192fecd136879b78634e4e08bb6f", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 96, "deletions": 39, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab11fb42c35513a796626d9ddb70c8eaf4d4b037/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab11fb42c35513a796626d9ddb70c8eaf4d4b037/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=ab11fb42c35513a796626d9ddb70c8eaf4d4b037", "patch": "@@ -81,7 +81,7 @@\n ;; type \"binary\" insns have two input operands (1,2) and one output (0)\n \n (define_attr \"type\"\n-  \"move,unary,binary,shift,nullshift,compare,load,store,uncond_branch,btable_branch,branch,cbranch,fbranch,call,dyncall,fpload,fpstore,fpalu,fpcc,fpmulsgl,fpmuldbl,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,multi,milli,parallel_branch,fpstore_load,store_fpload\"\n+  \"move,unary,binary,shift,nullshift,compare,load,store,uncond_branch,btable_branch,branch,cbranch,fbranch,call,sibcall,dyncall,fpload,fpstore,fpalu,fpcc,fpmulsgl,fpmuldbl,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,multi,milli,sh_func_adrs,parallel_branch,fpstore_load,store_fpload\"\n   (const_string \"binary\"))\n \n (define_attr \"pa_combine_type\"\n@@ -124,7 +124,7 @@\n ;; For conditional branches. Frame related instructions are not allowed\n ;; because they confuse the unwind support.\n (define_attr \"in_branch_delay\" \"false,true\"\n-  (if_then_else (and (eq_attr \"type\" \"!uncond_branch,btable_branch,branch,cbranch,fbranch,call,dyncall,multi,milli,parallel_branch\")\n+  (if_then_else (and (eq_attr \"type\" \"!uncond_branch,btable_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,parallel_branch\")\n \t\t     (eq_attr \"length\" \"4\")\n \t\t     (not (match_test \"RTX_FRAME_RELATED_P (insn)\")))\n \t\t(const_string \"true\")\n@@ -133,7 +133,7 @@\n ;; Disallow instructions which use the FPU since they will tie up the FPU\n ;; even if the instruction is nullified.\n (define_attr \"in_nullified_branch_delay\" \"false,true\"\n-  (if_then_else (and (eq_attr \"type\" \"!uncond_branch,btable_branch,branch,cbranch,fbranch,call,dyncall,multi,milli,fpcc,fpalu,fpmulsgl,fpmuldbl,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,parallel_branch\")\n+  (if_then_else (and (eq_attr \"type\" \"!uncond_branch,btable_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,fpcc,fpalu,fpmulsgl,fpmuldbl,fpdivsgl,fpdivdbl,fpsqrtsgl,fpsqrtdbl,parallel_branch\")\n \t\t     (eq_attr \"length\" \"4\")\n \t\t     (not (match_test \"RTX_FRAME_RELATED_P (insn)\")))\n \t\t(const_string \"true\")\n@@ -142,7 +142,7 @@\n ;; For calls and millicode calls.  Allow unconditional branches in the\n ;; delay slot.\n (define_attr \"in_call_delay\" \"false,true\"\n-  (cond [(and (eq_attr \"type\" \"!uncond_branch,btable_branch,branch,cbranch,fbranch,call,dyncall,multi,milli,parallel_branch\")\n+  (cond [(and (eq_attr \"type\" \"!uncond_branch,btable_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,parallel_branch\")\n \t      (eq_attr \"length\" \"4\")\n \t      (not (match_test \"RTX_FRAME_RELATED_P (insn)\")))\n \t   (const_string \"true\")\n@@ -157,6 +157,10 @@\n (define_delay (eq_attr \"type\" \"call\")\n   [(eq_attr \"in_call_delay\" \"true\") (nil) (nil)])\n \n+;; Sibcall delay slot description.\n+(define_delay (eq_attr \"type\" \"sibcall\")\n+  [(eq_attr \"in_call_delay\" \"true\") (nil) (nil)])\n+\n ;; Millicode call delay slot description.\n (define_delay (eq_attr \"type\" \"milli\")\n   [(eq_attr \"in_call_delay\" \"true\") (nil) (nil)])\n@@ -611,15 +615,15 @@\n ;; to assume have zero latency.\n (define_insn_reservation \"Z3\" 0\n   (and\n-    (eq_attr \"type\" \"!load,fpload,store,fpstore,uncond_branch,btable_branch,branch,cbranch,fbranch,call,dyncall,multi,milli,parallel_branch,fpcc,fpalu,fpmulsgl,fpmuldbl,fpsqrtsgl,fpsqrtdbl,fpdivsgl,fpdivdbl,fpstore_load,store_fpload\")\n+    (eq_attr \"type\" \"!load,fpload,store,fpstore,uncond_branch,btable_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,parallel_branch,fpcc,fpalu,fpmulsgl,fpmuldbl,fpsqrtsgl,fpsqrtdbl,fpdivsgl,fpdivdbl,fpstore_load,store_fpload\")\n     (eq_attr \"cpu\" \"8000\"))\n   \"inm_8000,rnm_8000\")\n \n ;; Branches use both slots in the non-memory issue and\n ;; retirement unit.\n (define_insn_reservation \"Z4\" 0\n   (and\n-    (eq_attr \"type\" \"uncond_branch,btable_branch,branch,cbranch,fbranch,call,dyncall,multi,milli,parallel_branch\")\n+    (eq_attr \"type\" \"uncond_branch,btable_branch,branch,cbranch,fbranch,call,sibcall,dyncall,multi,milli,sh_func_adrs,parallel_branch\")\n     (eq_attr \"cpu\" \"8000\"))\n   \"inm0_8000+inm1_8000,rnm0_8000+rnm1_8000\")\n \n@@ -5336,7 +5340,9 @@\n   \"!TARGET_64BIT\"\n   \"* return pa_output_mul_insn (0, insn);\"\n   [(set_attr \"type\" \"milli\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_millicode_call (insn)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_millicode_call (insn)\")))])\n \n (define_insn \"\"\n   [(set (reg:SI 29) (mult:SI (reg:SI 26) (reg:SI 25)))\n@@ -5347,7 +5353,9 @@\n   \"TARGET_64BIT\"\n   \"* return pa_output_mul_insn (0, insn);\"\n   [(set_attr \"type\" \"milli\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_millicode_call (insn)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_millicode_call (insn)\")))])\n \n (define_expand \"muldi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -5438,7 +5446,9 @@\n   \"*\n    return pa_output_div_insn (operands, 0, insn);\"\n   [(set_attr \"type\" \"milli\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_millicode_call (insn)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_millicode_call (insn)\")))])\n \n (define_insn \"\"\n   [(set (reg:SI 29)\n@@ -5452,7 +5462,9 @@\n   \"*\n    return pa_output_div_insn (operands, 0, insn);\"\n   [(set_attr \"type\" \"milli\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_millicode_call (insn)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_millicode_call (insn)\")))])\n \n (define_expand \"udivsi3\"\n   [(set (reg:SI 26) (match_operand:SI 1 \"move_src_operand\" \"\"))\n@@ -5495,7 +5507,9 @@\n   \"*\n    return pa_output_div_insn (operands, 1, insn);\"\n   [(set_attr \"type\" \"milli\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_millicode_call (insn)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_millicode_call (insn)\")))])\n \n (define_insn \"\"\n   [(set (reg:SI 29)\n@@ -5509,7 +5523,9 @@\n   \"*\n    return pa_output_div_insn (operands, 1, insn);\"\n   [(set_attr \"type\" \"milli\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_millicode_call (insn)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_millicode_call (insn)\")))])\n \n (define_expand \"modsi3\"\n   [(set (reg:SI 26) (match_operand:SI 1 \"move_src_operand\" \"\"))\n@@ -5548,7 +5564,9 @@\n   \"*\n   return pa_output_mod_insn (0, insn);\"\n   [(set_attr \"type\" \"milli\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_millicode_call (insn)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_millicode_call (insn)\")))])\n \n (define_insn \"\"\n   [(set (reg:SI 29) (mod:SI (reg:SI 26) (reg:SI 25)))\n@@ -5561,7 +5579,9 @@\n   \"*\n   return pa_output_mod_insn (0, insn);\"\n   [(set_attr \"type\" \"milli\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_millicode_call (insn)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_millicode_call (insn)\")))])\n \n (define_expand \"umodsi3\"\n   [(set (reg:SI 26) (match_operand:SI 1 \"move_src_operand\" \"\"))\n@@ -5600,7 +5620,9 @@\n   \"*\n   return pa_output_mod_insn (1, insn);\"\n   [(set_attr \"type\" \"milli\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_millicode_call (insn)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_millicode_call (insn)\")))])\n \n (define_insn \"\"\n   [(set (reg:SI 29) (umod:SI (reg:SI 26) (reg:SI 25)))\n@@ -5613,7 +5635,9 @@\n   \"*\n   return pa_output_mod_insn (1, insn);\"\n   [(set_attr \"type\" \"milli\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_millicode_call (insn)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_millicode_call (insn)\")))])\n \n ;;- and instructions\n ;; We define DImode `and` so with DImode `not` we can get\n@@ -7141,7 +7165,9 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   return pa_output_call (insn, operands[0], 0);\n }\"\n   [(set_attr \"type\" \"call\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_call (insn, 0)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_call (insn, 0)\")))])\n \n (define_insn \"call_symref_pic\"\n   [(call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n@@ -7215,7 +7241,9 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   return pa_output_call (insn, operands[0], 0);\n }\"\n   [(set_attr \"type\" \"call\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_call (insn, 0)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_call (insn, 0)\")))])\n \n ;; This pattern is split if it is necessary to save and restore the\n ;; PIC register.\n@@ -7297,7 +7325,9 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   return pa_output_call (insn, operands[0], 0);\n }\"\n   [(set_attr \"type\" \"call\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_call (insn, 0)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_call (insn, 0)\")))])\n \n (define_insn \"call_reg\"\n   [(call (mem:SI (reg:SI 22))\n@@ -7311,7 +7341,9 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   return pa_output_indirect_call (insn, gen_rtx_REG (word_mode, 22));\n }\"\n   [(set_attr \"type\" \"dyncall\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_indirect_call (insn)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_indirect_call (insn)\")))])\n \n ;; This pattern is split if it is necessary to save and restore the\n ;; PIC register.\n@@ -7386,7 +7418,9 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   return pa_output_indirect_call (insn, gen_rtx_REG (word_mode, 22));\n }\"\n   [(set_attr \"type\" \"dyncall\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_indirect_call (insn)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_indirect_call (insn)\")))])\n \n ;; This pattern is split if it is necessary to save and restore the\n ;; PIC register.\n@@ -7467,7 +7501,9 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   return pa_output_indirect_call (insn, operands[0]);\n }\"\n   [(set_attr \"type\" \"dyncall\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_indirect_call (insn)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 12)]\n+\t      (symbol_ref \"pa_attr_length_indirect_call (insn)\")))])\n \n (define_expand \"call_value\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n@@ -7593,7 +7629,9 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   return pa_output_call (insn, operands[1], 0);\n }\"\n   [(set_attr \"type\" \"call\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_call (insn, 0)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_call (insn, 0)\")))])\n \n (define_insn \"call_val_symref_pic\"\n   [(set (match_operand 0 \"\" \"\")\n@@ -7673,7 +7711,9 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   return pa_output_call (insn, operands[1], 0);\n }\"\n   [(set_attr \"type\" \"call\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_call (insn, 0)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_call (insn, 0)\")))])\n \n ;; This pattern is split if it is necessary to save and restore the\n ;; PIC register.\n@@ -7761,7 +7801,9 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   return pa_output_call (insn, operands[1], 0);\n }\"\n   [(set_attr \"type\" \"call\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_call (insn, 0)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_call (insn, 0)\")))])\n \n (define_insn \"call_val_reg\"\n   [(set (match_operand 0 \"\" \"\")\n@@ -7776,7 +7818,9 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   return pa_output_indirect_call (insn, gen_rtx_REG (word_mode, 22));\n }\"\n   [(set_attr \"type\" \"dyncall\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_indirect_call (insn)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_indirect_call (insn)\")))])\n \n ;; This pattern is split if it is necessary to save and restore the\n ;; PIC register.\n@@ -7857,7 +7901,9 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   return pa_output_indirect_call (insn, gen_rtx_REG (word_mode, 22));\n }\"\n   [(set_attr \"type\" \"dyncall\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_indirect_call (insn)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_indirect_call (insn)\")))])\n \n ;; This pattern is split if it is necessary to save and restore the\n ;; PIC register.\n@@ -7944,7 +7990,9 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   return pa_output_indirect_call (insn, operands[1]);\n }\"\n   [(set_attr \"type\" \"dyncall\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_indirect_call (insn)\"))])\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 12)]\n+\t      (symbol_ref \"pa_attr_length_indirect_call (insn)\")))])\n \n ;; Call subroutine returning any type.\n \n@@ -8037,8 +8085,10 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   pa_output_arg_descriptor (insn);\n   return pa_output_call (insn, operands[0], 1);\n }\"\n-  [(set_attr \"type\" \"call\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_call (insn, 1)\"))])\n+  [(set_attr \"type\" \"sibcall\")\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_call (insn, 1)\")))])\n \n (define_insn \"sibcall_internal_symref_64bit\"\n   [(call (mem:SI (match_operand 0 \"call_operand_address\" \"\"))\n@@ -8052,8 +8102,10 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   pa_output_arg_descriptor (insn);\n   return pa_output_call (insn, operands[0], 1);\n }\"\n-  [(set_attr \"type\" \"call\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_call (insn, 1)\"))])\n+  [(set_attr \"type\" \"sibcall\")\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_call (insn, 1)\")))])\n \n (define_expand \"sibcall_value\"\n   [(set (match_operand 0 \"\" \"\")\n@@ -8121,8 +8173,10 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   pa_output_arg_descriptor (insn);\n   return pa_output_call (insn, operands[1], 1);\n }\"\n-  [(set_attr \"type\" \"call\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_call (insn, 1)\"))])\n+  [(set_attr \"type\" \"sibcall\")\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_call (insn, 1)\")))])\n \n (define_insn \"sibcall_value_internal_symref_64bit\"\n   [(set (match_operand 0 \"\" \"\")\n@@ -8137,8 +8191,10 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   pa_output_arg_descriptor (insn);\n   return pa_output_call (insn, operands[1], 1);\n }\"\n-  [(set_attr \"type\" \"call\")\n-   (set (attr \"length\") (symbol_ref \"pa_attr_length_call (insn, 1)\"))])\n+  [(set_attr \"type\" \"sibcall\")\n+   (set (attr \"length\")\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 8)]\n+\t      (symbol_ref \"pa_attr_length_call (insn, 1)\")))])\n \n (define_insn \"nop\"\n   [(const_int 0)]\n@@ -9174,10 +9230,11 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n \t\t\t\t   gen_rtx_SYMBOL_REF (SImode,\n \t\t\t\t\t\t       \\\"$$sh_func_adrs\\\"));\n }\"\n-  [(set_attr \"type\" \"multi\")\n+  [(set_attr \"type\" \"sh_func_adrs\")\n    (set (attr \"length\")\n-\t(plus (symbol_ref \"pa_attr_length_millicode_call (insn)\")\n-\t      (const_int 20)))])\n+\t(cond [(and (match_test \"0\") (eq (const_int 0) (pc))) (const_int 28)]\n+\t      (plus (symbol_ref \"pa_attr_length_millicode_call (insn)\")\n+\t\t    (const_int 20))))])\n \n ;; On the PA, the PIC register is call clobbered, so it must\n ;; be saved & restored around calls by the caller.  If the call"}]}