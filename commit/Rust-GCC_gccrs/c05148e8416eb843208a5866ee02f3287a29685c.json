{"sha": "c05148e8416eb843208a5866ee02f3287a29685c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA1MTQ4ZTg0MTZlYjg0MzIwOGE1ODY2ZWUwMmYzMjg3YTI5Njg1Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-28T00:51:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-28T00:51:40Z"}, "message": "m68k.md (sordered, [...]): New patterns.\n\n        * config/m68k/m68k.md (sordered, sordered_1, sunordered, sunordered_1,\n        suneq, suneq_1, sunge, sunge_1, sungt, sungt_1, sunle, sunle_1,\n        sunlt, sunlt_1, sltgt, sltgt_1, fsogt_1, fsoge_1, fsolt_1, fsole_1,\n        bordered, bunordered, buneq, bunge, bungt, bunle, bunlt, bltgt,\n        bordered_rev, bunordered_rev, buneq_rev, bunge_rev, bungt_rev,\n        bunle_rev, bunlt_rev, bltgt_rev): New patterns.\n\nFrom-SVN: r45219", "tree": {"sha": "e9afc3fbcf9b02222c787775026e11c43af26c3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9afc3fbcf9b02222c787775026e11c43af26c3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c05148e8416eb843208a5866ee02f3287a29685c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05148e8416eb843208a5866ee02f3287a29685c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c05148e8416eb843208a5866ee02f3287a29685c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05148e8416eb843208a5866ee02f3287a29685c/comments", "author": null, "committer": null, "parents": [{"sha": "83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83e7315b5fae7fc17b3ddcae2b6b1835620b3bc5"}], "stats": {"total": 437, "additions": 437, "deletions": 0}, "files": [{"sha": "9a0eaa8830bbfb900a94d9b3cca023bf96ce2eed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05148e8416eb843208a5866ee02f3287a29685c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05148e8416eb843208a5866ee02f3287a29685c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c05148e8416eb843208a5866ee02f3287a29685c", "patch": "@@ -1,3 +1,12 @@\n+2001-08-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/m68k/m68k.md (sordered, sordered_1, sunordered, sunordered_1,\n+\tsuneq, suneq_1, sunge, sunge_1, sungt, sungt_1, sunle, sunle_1,\n+\tsunlt, sunlt_1, sltgt, sltgt_1, fsogt_1, fsoge_1, fsolt_1, fsole_1,\n+\tbordered, bunordered, buneq, bunge, bungt, bunle, bunlt, bltgt,\n+\tbordered_rev, bunordered_rev, buneq_rev, bunge_rev, bungt_rev,\n+\tbunle_rev, bunlt_rev, bltgt_rev): New patterns.\n+\t\n 2001-08-27  Roman Zippel  <zippel@linux-m68k.org>\n \n \t* config/m68k/m68k.md (subreghi1ashrdi_const32, bsetmemqi,"}, {"sha": "75645e1c5d665f314745693f653db62c60ccef0e", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 428, "deletions": 0, "changes": 428, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05148e8416eb843208a5866ee02f3287a29685c/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05148e8416eb843208a5866ee02f3287a29685c/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=c05148e8416eb843208a5866ee02f3287a29685c", "patch": "@@ -5885,6 +5885,194 @@\n   \"*\n    cc_status = cc_prev_status;\n    return \\\"sls %0\\\"; \")\n+\n+(define_expand \"sordered\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"\")\n+\t(ordered:QI (cc0) (const_int 0)))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  if (! m68k_last_compare_had_fp_operands)\n+    abort ();\n+  m68k_last_compare_had_fp_operands = 0;\n+})\n+\n+(define_insn \"*sordered_1\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n+\t(ordered:QI (cc0) (const_int 0)))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  cc_status = cc_prev_status;\n+  return \"fsor %0\";\n+})\n+\n+(define_expand \"sunordered\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"\")\n+\t(unordered:QI (cc0) (const_int 0)))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  if (! m68k_last_compare_had_fp_operands)\n+    abort ();\n+  m68k_last_compare_had_fp_operands = 0;\n+})\n+\n+(define_insn \"*sunordered_1\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n+\t(unordered:QI (cc0) (const_int 0)))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  cc_status = cc_prev_status;\n+  return \"fsun %0\";\n+})\n+\n+(define_expand \"suneq\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"\")\n+\t(uneq:QI (cc0) (const_int 0)))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  if (! m68k_last_compare_had_fp_operands)\n+    abort ();\n+  m68k_last_compare_had_fp_operands = 0;\n+})\n+\n+(define_insn \"*suneq_1\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n+\t(uneq:QI (cc0) (const_int 0)))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  cc_status = cc_prev_status;\n+  return \"fsueq %0\";\n+})\n+\n+(define_expand \"sunge\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"\")\n+\t(unge:QI (cc0) (const_int 0)))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  if (! m68k_last_compare_had_fp_operands)\n+    abort ();\n+  m68k_last_compare_had_fp_operands = 0;\n+})\n+\n+(define_insn \"*sunge_1\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n+\t(unge:QI (cc0) (const_int 0)))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  cc_status = cc_prev_status;\n+  return \"fsuge %0\";\n+})\n+\n+(define_expand \"sungt\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"\")\n+\t(ungt:QI (cc0) (const_int 0)))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  if (! m68k_last_compare_had_fp_operands)\n+    abort ();\n+  m68k_last_compare_had_fp_operands = 0;\n+})\n+\n+(define_insn \"*sungt_1\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n+\t(ungt:QI (cc0) (const_int 0)))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  cc_status = cc_prev_status;\n+  return \"fsugt %0\";\n+})\n+\n+(define_expand \"sunle\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"\")\n+\t(unle:QI (cc0) (const_int 0)))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  if (! m68k_last_compare_had_fp_operands)\n+    abort ();\n+  m68k_last_compare_had_fp_operands = 0;\n+})\n+\n+(define_insn \"*sunle_1\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n+\t(unle:QI (cc0) (const_int 0)))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  cc_status = cc_prev_status;\n+  return \"fsule %0\";\n+})\n+\n+(define_expand \"sunlt\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"\")\n+\t(unlt:QI (cc0) (const_int 0)))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  if (! m68k_last_compare_had_fp_operands)\n+    abort ();\n+  m68k_last_compare_had_fp_operands = 0;\n+})\n+\n+(define_insn \"*sunlt_1\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n+\t(unlt:QI (cc0) (const_int 0)))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  cc_status = cc_prev_status;\n+  return \"fsult %0\";\n+})\n+\n+(define_expand \"sltgt\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"\")\n+\t(ltgt:QI (cc0) (const_int 0)))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  if (! m68k_last_compare_had_fp_operands)\n+    abort ();\n+  m68k_last_compare_had_fp_operands = 0;\n+})\n+\n+(define_insn \"*sltgt_1\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n+\t(ltgt:QI (cc0) (const_int 0)))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  cc_status = cc_prev_status;\n+  return \"fsogl %0\";\n+})\n+\n+(define_insn \"*fsogt_1\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n+\t(not:QI (unle:QI (cc0) (const_int 0))))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  cc_status = cc_prev_status;\n+  return \"fsogt %0\";\n+})\n+\n+(define_insn \"*fsoge_1\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n+\t(not:QI (unlt:QI (cc0) (const_int 0))))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  cc_status = cc_prev_status;\n+  return \"fsoge %0\";\n+})\n+\n+(define_insn \"*fsolt_1\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n+\t(not:QI (unge:QI (cc0) (const_int 0))))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  cc_status = cc_prev_status;\n+  return \"fsolt %0\";\n+})\n+\n+(define_insn \"*fsole_1\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n+\t(not:QI (ungt:QI (cc0) (const_int 0))))]\n+  \"TARGET_68881 && !TARGET_68060\"\n+{\n+  cc_status = cc_prev_status;\n+  return \"fsole %0\";\n+})\n \f\n ;; Basic conditional jump instructions.\n \n@@ -6305,6 +6493,134 @@\n   return \\\"jls %l0\\\";\n #endif\n \")\n+\n+(define_insn \"bordered\"\n+  [(set (pc)\n+\t(if_then_else (ordered (cc0) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_68881\"\n+{\n+  if (!(cc_prev_status.flags & CC_IN_68881))\n+    abort ();\n+#ifdef MOTOROLA\n+  return \"fbor %l0\";\n+#else\n+  return \"fjor %l0\";\n+#endif\n+})\n+\n+(define_insn \"bunordered\"\n+  [(set (pc)\n+\t(if_then_else (unordered (cc0) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_68881\"\n+{\n+  if (!(cc_prev_status.flags & CC_IN_68881))\n+    abort ();\n+#ifdef MOTOROLA\n+  return \"fbun %l0\";\n+#else\n+  return \"fjun %l0\";\n+#endif\n+})\n+\n+(define_insn \"buneq\"\n+  [(set (pc)\n+\t(if_then_else (uneq (cc0) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_68881\"\n+{\n+  if (!(cc_prev_status.flags & CC_IN_68881))\n+    abort ();\n+#ifdef MOTOROLA\n+  return \"fbueq %l0\";\n+#else\n+  return \"fjueq %l0\";\n+#endif\n+})\n+\n+(define_insn \"bunge\"\n+  [(set (pc)\n+\t(if_then_else (unge (cc0) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_68881\"\n+{\n+  if (!(cc_prev_status.flags & CC_IN_68881))\n+    abort ();\n+#ifdef MOTOROLA\n+  return \"fbuge %l0\";\n+#else\n+  return \"fjuge %l0\";\n+#endif\n+})\n+\n+(define_insn \"bungt\"\n+  [(set (pc)\n+\t(if_then_else (ungt (cc0) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_68881\"\n+{\n+  if (!(cc_prev_status.flags & CC_IN_68881))\n+    abort ();\n+#ifdef MOTOROLA\n+  return \"fbugt %l0\";\n+#else\n+  return \"fjugt %l0\";\n+#endif\n+})\n+\n+(define_insn \"bunle\"\n+  [(set (pc)\n+\t(if_then_else (unle (cc0) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_68881\"\n+{\n+  if (!(cc_prev_status.flags & CC_IN_68881))\n+    abort ();\n+#ifdef MOTOROLA\n+  return \"fbule %l0\";\n+#else\n+  return \"fjule %l0\";\n+#endif\n+})\n+\n+(define_insn \"bunlt\"\n+  [(set (pc)\n+\t(if_then_else (unlt (cc0) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_68881\"\n+{\n+  if (!(cc_prev_status.flags & CC_IN_68881))\n+    abort ();\n+#ifdef MOTOROLA\n+  return \"fbult %l0\";\n+#else\n+  return \"fjult %l0\";\n+#endif\n+})\n+\n+(define_insn \"bltgt\"\n+  [(set (pc)\n+\t(if_then_else (ltgt (cc0) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_68881\"\n+{\n+  if (!(cc_prev_status.flags & CC_IN_68881))\n+    abort ();\n+#ifdef MOTOROLA\n+  return \"fbogl %l0\";\n+#else\n+  return \"fjogl %l0\";\n+#endif\n+})\n \f\n ;; Negated conditional jump instructions.\n \n@@ -6459,6 +6775,118 @@\n   return \\\"jhi %l0\\\";\n #endif\n \")\n+\n+(define_insn \"*bordered_rev\"\n+  [(set (pc)\n+\t(if_then_else (ordered (cc0) (const_int 0))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n+  \"TARGET_68881\"\n+{\n+  if (!(cc_prev_status.flags & CC_IN_68881))\n+    abort ();\n+#ifdef MOTOROLA\n+  return \"fbun %l0\";\n+#else\n+  return \"fjun %l0\";\n+#endif\n+})\n+\n+(define_insn \"*bunordered_rev\"\n+  [(set (pc)\n+\t(if_then_else (unordered (cc0) (const_int 0))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n+  \"TARGET_68881\"\n+{\n+  if (!(cc_prev_status.flags & CC_IN_68881))\n+    abort ();\n+#ifdef MOTOROLA\n+  return \"fbor %l0\";\n+#else\n+  return \"fjor %l0\";\n+#endif\n+})\n+\n+(define_insn \"*buneq_rev\"\n+  [(set (pc)\n+\t(if_then_else (uneq (cc0) (const_int 0))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n+  \"TARGET_68881\"\n+{\n+  if (!(cc_prev_status.flags & CC_IN_68881))\n+    abort ();\n+#ifdef MOTOROLA\n+  return \"fbogl %l0\";\n+#else\n+  return \"fjogl %l0\";\n+#endif\n+})\n+\n+(define_insn \"*bunge_rev\"\n+  [(set (pc)\n+\t(if_then_else (unge (cc0) (const_int 0))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n+  \"TARGET_68881\"\n+{\n+  if (!(cc_prev_status.flags & CC_IN_68881))\n+    abort ();\n+#ifdef MOTOROLA\n+  return \"fbolt %l0\";\n+#else\n+  return \"fjolt %l0\";\n+#endif\n+})\n+\n+(define_insn \"*bunle_rev\"\n+  [(set (pc)\n+\t(if_then_else (unle (cc0) (const_int 0))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n+  \"TARGET_68881\"\n+{\n+  if (!(cc_prev_status.flags & CC_IN_68881))\n+    abort ();\n+#ifdef MOTOROLA\n+  return \"fbogt %l0\";\n+#else\n+  return \"fjogt %l0\";\n+#endif\n+})\n+\n+(define_insn \"*bunlt_rev\"\n+  [(set (pc)\n+\t(if_then_else (unlt (cc0) (const_int 0))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n+  \"TARGET_68881\"\n+{\n+  if (!(cc_prev_status.flags & CC_IN_68881))\n+    abort ();\n+#ifdef MOTOROLA\n+  return \"fboge %l0\";\n+#else\n+  return \"fjoge %l0\";\n+#endif\n+})\n+\n+(define_insn \"*bltgt_rev\"\n+  [(set (pc)\n+\t(if_then_else (ltgt (cc0) (const_int 0))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n+  \"TARGET_68881\"\n+{\n+  if (!(cc_prev_status.flags & CC_IN_68881))\n+    abort ();\n+#ifdef MOTOROLA\n+  return \"fbueq %l0\";\n+#else\n+  return \"fjueq %l0\";\n+#endif\n+})\n \f\n ;; Unconditional and other jump instructions\n (define_insn \"jump\""}]}