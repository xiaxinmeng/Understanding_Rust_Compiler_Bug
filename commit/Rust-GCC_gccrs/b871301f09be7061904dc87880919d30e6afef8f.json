{"sha": "b871301f09be7061904dc87880919d30e6afef8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg3MTMwMWYwOWJlNzA2MTkwNGRjODc4ODA5MTlkMzBlNmFmZWY4Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-08-14T22:01:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-08-18T20:20:09Z"}, "message": "c++: Rewrite members for all deduction guides. [PR96199]\n\nAfter the last patch, it occurred to me that we could run into the\nspecialization issue with non-alias deduction guides as well, so this patch\nextends the rewriting to C++17 mode.\n\nDoing this revealed that we weren't properly pushing into class scope for\nnormalization.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96199\n\t* pt.c (tsubst_aggr_type): Rewrite in C++17, too.\n\t(maybe_dependent_member_ref): Likewise.\n\t(build_deduction_guide): Re-substitute template parms.\n\t* cp-tree.h (struct push_nested_class_guard): New.\n\t* constraint.cc (get_normalized_constraints_from_decl): Use it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96199\n\t* g++.dg/cpp1z/class-deduction-spec1.C: New test.", "tree": {"sha": "a4cad1e376c3f4c63ca7df8e5bc765687314aa72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4cad1e376c3f4c63ca7df8e5bc765687314aa72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b871301f09be7061904dc87880919d30e6afef8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b871301f09be7061904dc87880919d30e6afef8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b871301f09be7061904dc87880919d30e6afef8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b871301f09be7061904dc87880919d30e6afef8f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9125cf8c33b710c378bfb3c7e67ec2f9f1c523c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9125cf8c33b710c378bfb3c7e67ec2f9f1c523c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9125cf8c33b710c378bfb3c7e67ec2f9f1c523c9"}], "stats": {"total": 75, "additions": 71, "deletions": 4}, "files": [{"sha": "48d52ec5b7acb0265100ff63f0b9964e20b81efb", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b871301f09be7061904dc87880919d30e6afef8f/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b871301f09be7061904dc87880919d30e6afef8f/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=b871301f09be7061904dc87880919d30e6afef8f", "patch": "@@ -840,6 +840,8 @@ get_normalized_constraints_from_decl (tree d, bool diag = false)\n     if (tree *p = hash_map_safe_get (normalized_map, tmpl))\n       return *p;\n \n+  push_nested_class_guard pncs (DECL_CONTEXT (d));\n+\n   tree args = generic_targs_for (tmpl);\n   tree ci = get_constraints (decl);\n   tree norm = get_normalized_constraints_from_info (ci, args, tmpl, diag);"}, {"sha": "5ba82ee60db35c860a2ebd019d112bda4c7121b6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b871301f09be7061904dc87880919d30e6afef8f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b871301f09be7061904dc87880919d30e6afef8f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b871301f09be7061904dc87880919d30e6afef8f", "patch": "@@ -8137,6 +8137,24 @@ is_constrained_auto (const_tree t)\n   return is_auto (t) && PLACEHOLDER_TYPE_CONSTRAINTS (t);\n }\n \n+/* RAII class to push/pop class scope T; if T is not a class, do nothing.  */\n+\n+struct push_nested_class_guard\n+{\n+  bool push;\n+  push_nested_class_guard (tree t)\n+    : push (t && CLASS_TYPE_P (t))\n+  {\n+    if (push)\n+      push_nested_class (t);\n+  }\n+  ~push_nested_class_guard ()\n+  {\n+    if (push)\n+      pop_nested_class ();\n+  }\n+};\n+\n #if CHECKING_P\n namespace selftest {\n   extern void run_cp_tests (void);"}, {"sha": "8ad91b37297a256ffff34ad344be44744725eb38", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b871301f09be7061904dc87880919d30e6afef8f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b871301f09be7061904dc87880919d30e6afef8f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b871301f09be7061904dc87880919d30e6afef8f", "patch": "@@ -13391,7 +13391,7 @@ tsubst_aggr_type (tree t,\n \t\t\t\t\t complain, in_decl);\n \t  if (argvec == error_mark_node)\n \t    r = error_mark_node;\n-\t  else if (cxx_dialect >= cxx20 && dependent_scope_p (context))\n+\t  else if (cxx_dialect >= cxx17 && dependent_scope_p (context))\n \t    {\n \t      /* See maybe_dependent_member_ref.  */\n \t      tree name = TYPE_IDENTIFIER (t);\n@@ -16328,14 +16328,13 @@ tsubst_init (tree init, tree decl, tree args,\n    we are trying to refer to that member in a partial instantiation of C,\n    return a SCOPE_REF; otherwise, return NULL_TREE.\n \n-   This can happen when forming a C++20 alias template deduction guide, as in\n-   PR96199.  */\n+   This can happen when forming a C++17 deduction guide, as in PR96199.  */\n \n static tree\n maybe_dependent_member_ref (tree t, tree args, tsubst_flags_t complain,\n \t\t\t    tree in_decl)\n {\n-  if (cxx_dialect < cxx20)\n+  if (cxx_dialect < cxx17)\n     return NULL_TREE;\n \n   tree ctx = context_for_name_lookup (t);\n@@ -28370,6 +28369,16 @@ build_deduction_guide (tree type, tree ctor, tree outer_args, tsubst_flags_t com\n \t  fargs = tsubst (fargs, tsubst_args, complain, ctor);\n \t  current_template_parms = save_parms;\n \t}\n+      else\n+\t{\n+\t  /* Substitute in the same arguments to rewrite class members into\n+\t     references to members of an unknown specialization.  */\n+\t  cp_evaluated ev;\n+\t  fparms = tsubst_arg_types (fparms, targs, NULL_TREE, complain, ctor);\n+\t  fargs = tsubst (fargs, targs, complain, ctor);\n+\t  if (ci)\n+\t    ci = tsubst_constraint_info (ci, targs, complain, ctor);\n+\t}\n \n       --processing_template_decl;\n       if (!ok)"}, {"sha": "fcdf746134be9d0955ef7f2bacfd1d1425931c50", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction-spec1.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b871301f09be7061904dc87880919d30e6afef8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction-spec1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b871301f09be7061904dc87880919d30e6afef8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction-spec1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction-spec1.C?ref=b871301f09be7061904dc87880919d30e6afef8f", "patch": "@@ -0,0 +1,38 @@\n+// PR c++/96199\n+// { dg-do compile { target c++17 } }\n+\n+template<int> struct A1 { };\n+template<int&> struct A2 { };\n+template<class> struct A3 { };\n+\n+int i;\n+template<typename V> struct B {\n+  enum E { X };\n+  B(A1<X>, V) { }\n+\n+  constexpr static V& ir = i;\n+  B(A2<ir>, V) { }\n+\n+  B(A3<E>, V) { }\n+};\n+\n+// template<class T> B(A1<B<T>::X>,T) -> B<T>;\n+// template<class T> B(A2<B<T>::ir>,T) -> B<T>;\n+// template<class T> B(A3<typename B<T>::E>,T) -> B<T>;\n+\n+int j;\n+template <> struct B<int> {\n+  using V = int;\n+\n+  enum E { X = 1 };\n+  B(A1<X>, V) { }\n+\n+  constexpr static V& ir = j;\n+  B(A2<ir>, V) { }\n+\n+  B(A3<E>, V) { }\n+};\n+\n+B u1 { A1<1>(), 42 };\n+B u2 { A2<j>(), 42 };\n+B u3 { A3<B<int>::E>(), 42 };"}]}