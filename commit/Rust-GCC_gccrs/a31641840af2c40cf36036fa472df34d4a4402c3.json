{"sha": "a31641840af2c40cf36036fa472df34d4a4402c3", "node_id": "C_kwDOANBUbNoAKGEzMTY0MTg0MGFmMmM0MGNmMzYwMzZmYTQ3MmRmMzRkNGE0NDAyYzM", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-29T10:32:57Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-29T10:32:57Z"}, "message": "aarch64: Remove redundant TARGET_* checks\n\nAfter previous patches, it's possible to remove TARGET_*\noptions that are redundant due to (IMO) obvious dependencies.\n\ngcc/\n\t* config/aarch64/aarch64.h (TARGET_CRYPTO, TARGET_SHA3, TARGET_SM4)\n\t(TARGET_DOTPROD): Don't depend on TARGET_SIMD.\n\t(TARGET_AES, TARGET_SHA2): Likewise.  Remove TARGET_CRYPTO test.\n\t(TARGET_FP_F16INST): Don't depend on TARGET_FLOAT.\n\t(TARGET_SVE2, TARGET_SVE_F32MM, TARGET_SVE_F64MM): Don't depend\n\ton TARGET_SVE.\n\t(TARGET_SVE2_AES, TARGET_SVE2_BITPERM, TARGET_SVE2_SHA3)\n\t(TARGET_SVE2_SM4): Don't depend on TARGET_SVE2.\n\t(TARGET_F32MM, TARGET_F64MM): Delete.\n\t* config/aarch64/aarch64-c.cc (aarch64_update_cpp_builtins): Guard\n\tfloat macros with just TARGET_FLOAT rather than TARGET_FLOAT\n\t|| TARGET_SIMD.\n\t* config/aarch64/aarch64-simd.md (copysign<mode>3): Depend\n\tonly on TARGET_SIMD, rather than TARGET_FLOAT && TARGET_SIMD.\n\t(aarch64_crypto_aes<aes_op>v16qi): Depend only on TARGET_AES,\n\trather than TARGET_SIMD && TARGET_AES.\n\t(aarch64_crypto_aes<aesmc_op>v16qi): Likewise.\n\t(*aarch64_crypto_aese_fused): Likewise.\n\t(*aarch64_crypto_aesd_fused): Likewise.\n\t(aarch64_crypto_pmulldi): Likewise.\n\t(aarch64_crypto_pmullv2di): Likewise.\n\t(aarch64_crypto_sha1hsi): Likewise TARGET_SHA2.\n\t(aarch64_crypto_sha1hv4si): Likewise.\n\t(aarch64_be_crypto_sha1hv4si): Likewise.\n\t(aarch64_crypto_sha1su1v4si): Likewise.\n\t(aarch64_crypto_sha1<sha1_op>v4si): Likewise.\n\t(aarch64_crypto_sha1su0v4si): Likewise.\n\t(aarch64_crypto_sha256h<sha256_op>v4si): Likewise.\n\t(aarch64_crypto_sha256su0v4si): Likewise.\n\t(aarch64_crypto_sha256su1v4si): Likewise.\n\t(aarch64_crypto_sha512h<sha512_op>qv2di): Likewise TARGET_SHA3.\n\t(aarch64_crypto_sha512su0qv2di): Likewise.\n\t(aarch64_crypto_sha512su1qv2di, eor3q<mode>4): Likewise.\n\t(aarch64_rax1qv2di, aarch64_xarqv2di, bcaxq<mode>4): Likewise.\n\t(aarch64_sm3ss1qv4si): Likewise TARGET_SM4.\n\t(aarch64_sm3tt<sm3tt_op>qv4si): Likewise.\n\t(aarch64_sm3partw<sm3part_op>qv4si): Likewise.\n\t(aarch64_sm4eqv4si, aarch64_sm4ekeyqv4si): Likewise.\n\t* config/aarch64/aarch64.md (<FLOATUORS:optab>dihf2)\n\t(copysign<GPF:mode>3, copysign<GPF:mode>3_insn)\n\t(xorsign<mode>3): Remove redundant TARGET_FLOAT condition.", "tree": {"sha": "39ce4eba32b6e33ea7b38b193b5dbf6c9097b42a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39ce4eba32b6e33ea7b38b193b5dbf6c9097b42a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a31641840af2c40cf36036fa472df34d4a4402c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a31641840af2c40cf36036fa472df34d4a4402c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a31641840af2c40cf36036fa472df34d4a4402c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a31641840af2c40cf36036fa472df34d4a4402c3/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a269bda9e7b8f9353699d0c965e7e9246500aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a269bda9e7b8f9353699d0c965e7e9246500aa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a269bda9e7b8f9353699d0c965e7e9246500aa0"}], "stats": {"total": 96, "additions": 47, "deletions": 49}, "files": [{"sha": "592af8cd7299be157f74950d1591a4fdb44510de", "filename": "gcc/config/aarch64/aarch64-c.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31641840af2c40cf36036fa472df34d4a4402c3/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31641840af2c40cf36036fa472df34d4a4402c3/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc?ref=a31641840af2c40cf36036fa472df34d4a4402c3", "patch": "@@ -92,7 +92,7 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n \n   aarch64_def_or_undef (TARGET_FLOAT, \"__ARM_FEATURE_FMA\", pfile);\n \n-  if (TARGET_FLOAT || TARGET_SIMD)\n+  if (TARGET_FLOAT)\n     {\n       builtin_define_with_int_value (\"__ARM_FP\", 0x0E);\n       builtin_define (\"__ARM_FP16_FORMAT_IEEE\");"}, {"sha": "5386043739a9b2e328bfb2fc9067da8feeac1a92", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31641840af2c40cf36036fa472df34d4a4402c3/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31641840af2c40cf36036fa472df34d4a4402c3/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=a31641840af2c40cf36036fa472df34d4a4402c3", "patch": "@@ -716,7 +716,7 @@\n   [(match_operand:VHSDF 0 \"register_operand\")\n    (match_operand:VHSDF 1 \"register_operand\")\n    (match_operand:VHSDF 2 \"register_operand\")]\n-  \"TARGET_FLOAT && TARGET_SIMD\"\n+  \"TARGET_SIMD\"\n {\n   rtx v_bitmask = gen_reg_rtx (<V_INT_EQUIV>mode);\n   int bits = GET_MODE_UNIT_BITSIZE (<MODE>mode) - 1;\n@@ -8097,7 +8097,7 @@\n \t\t (match_operand:V16QI 1 \"register_operand\" \"%0\")\n \t\t (match_operand:V16QI 2 \"register_operand\" \"w\"))]\n          CRYPTO_AES))]\n-  \"TARGET_SIMD && TARGET_AES\"\n+  \"TARGET_AES\"\n   \"aes<aes_op>\\\\t%0.16b, %2.16b\"\n   [(set_attr \"type\" \"crypto_aese\")]\n )\n@@ -8106,7 +8106,7 @@\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=w\")\n \t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"w\")]\n \t CRYPTO_AESMC))]\n-  \"TARGET_SIMD && TARGET_AES\"\n+  \"TARGET_AES\"\n   \"aes<aesmc_op>\\\\t%0.16b, %1.16b\"\n   [(set_attr \"type\" \"crypto_aesmc\")]\n )\n@@ -8125,7 +8125,7 @@\n \t\t(match_operand:V16QI 2 \"register_operand\" \"w\"))]\n \t     UNSPEC_AESE)]\n \tUNSPEC_AESMC))]\n-  \"TARGET_SIMD && TARGET_AES\n+  \"TARGET_AES\n    && aarch64_fusion_enabled_p (AARCH64_FUSE_AES_AESMC)\"\n   \"aese\\\\t%0.16b, %2.16b\\;aesmc\\\\t%0.16b, %0.16b\"\n   [(set_attr \"type\" \"crypto_aese\")\n@@ -8146,7 +8146,7 @@\n \t\t\t(match_operand:V16QI 2 \"register_operand\" \"w\"))]\n \t\tUNSPEC_AESD)]\n \t  UNSPEC_AESIMC))]\n-  \"TARGET_SIMD && TARGET_AES\n+  \"TARGET_AES\n    && aarch64_fusion_enabled_p (AARCH64_FUSE_AES_AESMC)\"\n   \"aesd\\\\t%0.16b, %2.16b\\;aesimc\\\\t%0.16b, %0.16b\"\n   [(set_attr \"type\" \"crypto_aese\")\n@@ -8160,7 +8160,7 @@\n         (unspec:SI [(match_operand:SI 1\n                        \"register_operand\" \"w\")]\n          UNSPEC_SHA1H))]\n-  \"TARGET_SIMD && TARGET_SHA2\"\n+  \"TARGET_SHA2\"\n   \"sha1h\\\\t%s0, %s1\"\n   [(set_attr \"type\" \"crypto_sha1_fast\")]\n )\n@@ -8170,7 +8170,7 @@\n \t(unspec:SI [(vec_select:SI (match_operand:V4SI 1 \"register_operand\" \"w\")\n \t\t     (parallel [(const_int 0)]))]\n \t UNSPEC_SHA1H))]\n-  \"TARGET_SIMD && TARGET_SHA2 && !BYTES_BIG_ENDIAN\"\n+  \"TARGET_SHA2 && !BYTES_BIG_ENDIAN\"\n   \"sha1h\\\\t%s0, %s1\"\n   [(set_attr \"type\" \"crypto_sha1_fast\")]\n )\n@@ -8180,7 +8180,7 @@\n \t(unspec:SI [(vec_select:SI (match_operand:V4SI 1 \"register_operand\" \"w\")\n \t\t     (parallel [(const_int 3)]))]\n \t UNSPEC_SHA1H))]\n-  \"TARGET_SIMD && TARGET_SHA2 && BYTES_BIG_ENDIAN\"\n+  \"TARGET_SHA2 && BYTES_BIG_ENDIAN\"\n   \"sha1h\\\\t%s0, %s1\"\n   [(set_attr \"type\" \"crypto_sha1_fast\")]\n )\n@@ -8190,7 +8190,7 @@\n         (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"0\")\n                       (match_operand:V4SI 2 \"register_operand\" \"w\")]\n          UNSPEC_SHA1SU1))]\n-  \"TARGET_SIMD && TARGET_SHA2\"\n+  \"TARGET_SHA2\"\n   \"sha1su1\\\\t%0.4s, %2.4s\"\n   [(set_attr \"type\" \"crypto_sha1_fast\")]\n )\n@@ -8201,7 +8201,7 @@\n                       (match_operand:SI 2 \"register_operand\" \"w\")\n                       (match_operand:V4SI 3 \"register_operand\" \"w\")]\n          CRYPTO_SHA1))]\n-  \"TARGET_SIMD && TARGET_SHA2\"\n+  \"TARGET_SHA2\"\n   \"sha1<sha1_op>\\\\t%q0, %s2, %3.4s\"\n   [(set_attr \"type\" \"crypto_sha1_slow\")]\n )\n@@ -8212,7 +8212,7 @@\n                       (match_operand:V4SI 2 \"register_operand\" \"w\")\n                       (match_operand:V4SI 3 \"register_operand\" \"w\")]\n          UNSPEC_SHA1SU0))]\n-  \"TARGET_SIMD && TARGET_SHA2\"\n+  \"TARGET_SHA2\"\n   \"sha1su0\\\\t%0.4s, %2.4s, %3.4s\"\n   [(set_attr \"type\" \"crypto_sha1_xor\")]\n )\n@@ -8225,7 +8225,7 @@\n                       (match_operand:V4SI 2 \"register_operand\" \"w\")\n                       (match_operand:V4SI 3 \"register_operand\" \"w\")]\n          CRYPTO_SHA256))]\n-  \"TARGET_SIMD && TARGET_SHA2\"\n+  \"TARGET_SHA2\"\n   \"sha256h<sha256_op>\\\\t%q0, %q2, %3.4s\"\n   [(set_attr \"type\" \"crypto_sha256_slow\")]\n )\n@@ -8235,7 +8235,7 @@\n         (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"0\")\n                       (match_operand:V4SI 2 \"register_operand\" \"w\")]\n          UNSPEC_SHA256SU0))]\n-  \"TARGET_SIMD && TARGET_SHA2\"\n+  \"TARGET_SHA2\"\n   \"sha256su0\\\\t%0.4s, %2.4s\"\n   [(set_attr \"type\" \"crypto_sha256_fast\")]\n )\n@@ -8246,7 +8246,7 @@\n                       (match_operand:V4SI 2 \"register_operand\" \"w\")\n                       (match_operand:V4SI 3 \"register_operand\" \"w\")]\n          UNSPEC_SHA256SU1))]\n-  \"TARGET_SIMD && TARGET_SHA2\"\n+  \"TARGET_SHA2\"\n   \"sha256su1\\\\t%0.4s, %2.4s, %3.4s\"\n   [(set_attr \"type\" \"crypto_sha256_slow\")]\n )\n@@ -8259,7 +8259,7 @@\n                       (match_operand:V2DI 2 \"register_operand\" \"w\")\n                       (match_operand:V2DI 3 \"register_operand\" \"w\")]\n          CRYPTO_SHA512))]\n-  \"TARGET_SIMD && TARGET_SHA3\"\n+  \"TARGET_SHA3\"\n   \"sha512h<sha512_op>\\\\t%q0, %q2, %3.2d\"\n   [(set_attr \"type\" \"crypto_sha512\")]\n )\n@@ -8269,7 +8269,7 @@\n         (unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0\")\n                       (match_operand:V2DI 2 \"register_operand\" \"w\")]\n          UNSPEC_SHA512SU0))]\n-  \"TARGET_SIMD && TARGET_SHA3\"\n+  \"TARGET_SHA3\"\n   \"sha512su0\\\\t%0.2d, %2.2d\"\n   [(set_attr \"type\" \"crypto_sha512\")]\n )\n@@ -8280,7 +8280,7 @@\n                       (match_operand:V2DI 2 \"register_operand\" \"w\")\n                       (match_operand:V2DI 3 \"register_operand\" \"w\")]\n          UNSPEC_SHA512SU1))]\n-  \"TARGET_SIMD && TARGET_SHA3\"\n+  \"TARGET_SHA3\"\n   \"sha512su1\\\\t%0.2d, %2.2d, %3.2d\"\n   [(set_attr \"type\" \"crypto_sha512\")]\n )\n@@ -8294,7 +8294,7 @@\n \t  (match_operand:VQ_I 2 \"register_operand\" \"w\")\n \t  (match_operand:VQ_I 3 \"register_operand\" \"w\"))\n \t (match_operand:VQ_I 1 \"register_operand\" \"w\")))]\n-  \"TARGET_SIMD && TARGET_SHA3\"\n+  \"TARGET_SHA3\"\n   \"eor3\\\\t%0.16b, %1.16b, %2.16b, %3.16b\"\n   [(set_attr \"type\" \"crypto_sha3\")]\n )\n@@ -8306,7 +8306,7 @@\n \t  (match_operand:V2DI 2 \"register_operand\" \"w\")\n \t  (const_int 1))\n \t (match_operand:V2DI 1 \"register_operand\" \"w\")))]\n-  \"TARGET_SIMD && TARGET_SHA3\"\n+  \"TARGET_SHA3\"\n   \"rax1\\\\t%0.2d, %1.2d, %2.2d\"\n   [(set_attr \"type\" \"crypto_sha3\")]\n )\n@@ -8318,7 +8318,7 @@\n \t  (match_operand:V2DI 1 \"register_operand\" \"%w\")\n \t  (match_operand:V2DI 2 \"register_operand\" \"w\"))\n \t (match_operand:SI 3 \"aarch64_simd_shift_imm_di\" \"Usd\")))]\n-  \"TARGET_SIMD && TARGET_SHA3\"\n+  \"TARGET_SHA3\"\n   \"xar\\\\t%0.2d, %1.2d, %2.2d, %3\"\n   [(set_attr \"type\" \"crypto_sha3\")]\n )\n@@ -8330,7 +8330,7 @@\n \t  (not:VQ_I (match_operand:VQ_I 3 \"register_operand\" \"w\"))\n \t  (match_operand:VQ_I 2 \"register_operand\" \"w\"))\n \t (match_operand:VQ_I 1 \"register_operand\" \"w\")))]\n-  \"TARGET_SIMD && TARGET_SHA3\"\n+  \"TARGET_SHA3\"\n   \"bcax\\\\t%0.16b, %1.16b, %2.16b, %3.16b\"\n   [(set_attr \"type\" \"crypto_sha3\")]\n )\n@@ -8343,7 +8343,7 @@\n \t\t      (match_operand:V4SI 2 \"register_operand\" \"w\")\n \t\t      (match_operand:V4SI 3 \"register_operand\" \"w\")]\n \t UNSPEC_SM3SS1))]\n-  \"TARGET_SIMD && TARGET_SM4\"\n+  \"TARGET_SM4\"\n   \"sm3ss1\\\\t%0.4s, %1.4s, %2.4s, %3.4s\"\n   [(set_attr \"type\" \"crypto_sm3\")]\n )\n@@ -8356,7 +8356,7 @@\n \t\t      (match_operand:V4SI 3 \"register_operand\" \"w\")\n \t\t      (match_operand:SI 4 \"aarch64_imm2\" \"Ui2\")]\n \t CRYPTO_SM3TT))]\n-  \"TARGET_SIMD && TARGET_SM4\"\n+  \"TARGET_SM4\"\n   \"sm3tt<sm3tt_op>\\\\t%0.4s, %2.4s, %3.4s[%4]\"\n   [(set_attr \"type\" \"crypto_sm3\")]\n )\n@@ -8367,7 +8367,7 @@\n \t\t      (match_operand:V4SI 2 \"register_operand\" \"w\")\n \t\t      (match_operand:V4SI 3 \"register_operand\" \"w\")]\n \t CRYPTO_SM3PART))]\n-  \"TARGET_SIMD && TARGET_SM4\"\n+  \"TARGET_SM4\"\n   \"sm3partw<sm3part_op>\\\\t%0.4s, %2.4s, %3.4s\"\n   [(set_attr \"type\" \"crypto_sm3\")]\n )\n@@ -8379,7 +8379,7 @@\n \t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"0\")\n \t\t      (match_operand:V4SI 2 \"register_operand\" \"w\")]\n \t UNSPEC_SM4E))]\n-  \"TARGET_SIMD && TARGET_SM4\"\n+  \"TARGET_SM4\"\n   \"sm4e\\\\t%0.4s, %2.4s\"\n   [(set_attr \"type\" \"crypto_sm4\")]\n )\n@@ -8389,7 +8389,7 @@\n \t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"w\")\n \t\t      (match_operand:V4SI 2 \"register_operand\" \"w\")]\n \t UNSPEC_SM4EKEY))]\n-  \"TARGET_SIMD && TARGET_SM4\"\n+  \"TARGET_SM4\"\n   \"sm4ekey\\\\t%0.4s, %1.4s, %2.4s\"\n   [(set_attr \"type\" \"crypto_sm4\")]\n )\n@@ -8975,7 +8975,7 @@\n         (unspec:TI  [(match_operand:DI 1 \"register_operand\" \"w\")\n \t\t     (match_operand:DI 2 \"register_operand\" \"w\")]\n \t\t    UNSPEC_PMULL))]\n- \"TARGET_SIMD && TARGET_AES\"\n+ \"TARGET_AES\"\n  \"pmull\\\\t%0.1q, %1.1d, %2.1d\"\n   [(set_attr \"type\" \"crypto_pmull\")]\n )\n@@ -8985,7 +8985,7 @@\n        (unspec:TI [(match_operand:V2DI 1 \"register_operand\" \"w\")\n \t\t   (match_operand:V2DI 2 \"register_operand\" \"w\")]\n \t\t  UNSPEC_PMULL2))]\n-  \"TARGET_SIMD && TARGET_AES\"\n+  \"TARGET_AES\"\n   \"pmull2\\\\t%0.1q, %1.2d, %2.2d\"\n   [(set_attr \"type\" \"crypto_pmull\")]\n )"}, {"sha": "2d6221826bb30e4e57cbae193849823d510fd838", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31641840af2c40cf36036fa472df34d4a4402c3/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31641840af2c40cf36036fa472df34d4a4402c3/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=a31641840af2c40cf36036fa472df34d4a4402c3", "patch": "@@ -222,19 +222,19 @@ enum class aarch64_feature : unsigned char {\n #define AARCH64_ISA_LS64\t   (aarch64_isa_flags & AARCH64_FL_LS64)\n \n /* Crypto is an optional extension to AdvSIMD.  */\n-#define TARGET_CRYPTO (TARGET_SIMD && AARCH64_ISA_CRYPTO)\n+#define TARGET_CRYPTO (AARCH64_ISA_CRYPTO)\n \n /* SHA2 is an optional extension to AdvSIMD.  */\n-#define TARGET_SHA2 ((TARGET_SIMD && AARCH64_ISA_SHA2) || TARGET_CRYPTO)\n+#define TARGET_SHA2 (AARCH64_ISA_SHA2)\n \n /* SHA3 is an optional extension to AdvSIMD.  */\n-#define TARGET_SHA3 (TARGET_SIMD && AARCH64_ISA_SHA3)\n+#define TARGET_SHA3 (AARCH64_ISA_SHA3)\n \n /* AES is an optional extension to AdvSIMD.  */\n-#define TARGET_AES ((TARGET_SIMD && AARCH64_ISA_AES) || TARGET_CRYPTO)\n+#define TARGET_AES (AARCH64_ISA_AES)\n \n /* SM is an optional extension to AdvSIMD.  */\n-#define TARGET_SM4 (TARGET_SIMD && AARCH64_ISA_SM4)\n+#define TARGET_SM4 (AARCH64_ISA_SM4)\n \n /* FP16FML is an optional extension to AdvSIMD.  */\n #define TARGET_F16FML (TARGET_SIMD && AARCH64_ISA_F16FML && TARGET_FP_F16INST)\n@@ -246,29 +246,29 @@ enum class aarch64_feature : unsigned char {\n #define TARGET_LSE (AARCH64_ISA_LSE)\n \n /* ARMv8.2-A FP16 support that can be enabled through the +fp16 extension.  */\n-#define TARGET_FP_F16INST (TARGET_FLOAT && AARCH64_ISA_F16)\n+#define TARGET_FP_F16INST (AARCH64_ISA_F16)\n #define TARGET_SIMD_F16INST (TARGET_SIMD && AARCH64_ISA_F16)\n \n /* Dot Product is an optional extension to AdvSIMD enabled through +dotprod.  */\n-#define TARGET_DOTPROD (TARGET_SIMD && AARCH64_ISA_DOTPROD)\n+#define TARGET_DOTPROD (AARCH64_ISA_DOTPROD)\n \n /* SVE instructions, enabled through +sve.  */\n #define TARGET_SVE (AARCH64_ISA_SVE)\n \n /* SVE2 instructions, enabled through +sve2.  */\n-#define TARGET_SVE2 (TARGET_SVE && AARCH64_ISA_SVE2)\n+#define TARGET_SVE2 (AARCH64_ISA_SVE2)\n \n /* SVE2 AES instructions, enabled through +sve2-aes.  */\n-#define TARGET_SVE2_AES (TARGET_SVE2 && AARCH64_ISA_SVE2_AES)\n+#define TARGET_SVE2_AES (AARCH64_ISA_SVE2_AES)\n \n /* SVE2 BITPERM instructions, enabled through +sve2-bitperm.  */\n-#define TARGET_SVE2_BITPERM (TARGET_SVE2 && AARCH64_ISA_SVE2_BITPERM)\n+#define TARGET_SVE2_BITPERM (AARCH64_ISA_SVE2_BITPERM)\n \n /* SVE2 SHA3 instructions, enabled through +sve2-sha3.  */\n-#define TARGET_SVE2_SHA3 (TARGET_SVE2 && AARCH64_ISA_SVE2_SHA3)\n+#define TARGET_SVE2_SHA3 (AARCH64_ISA_SVE2_SHA3)\n \n /* SVE2 SM4 instructions, enabled through +sve2-sm4.  */\n-#define TARGET_SVE2_SM4 (TARGET_SVE2 && AARCH64_ISA_SVE2_SM4)\n+#define TARGET_SVE2_SM4 (AARCH64_ISA_SVE2_SM4)\n \n /* ARMv8.3-A features.  */\n #define TARGET_ARMV8_3\t(AARCH64_ISA_V8_3A)\n@@ -296,12 +296,10 @@ enum class aarch64_feature : unsigned char {\n #define TARGET_SVE_I8MM (TARGET_SVE && AARCH64_ISA_I8MM)\n \n /* F32MM instructions are enabled through +f32mm.  */\n-#define TARGET_F32MM (AARCH64_ISA_F32MM)\n-#define TARGET_SVE_F32MM (TARGET_SVE && AARCH64_ISA_F32MM)\n+#define TARGET_SVE_F32MM (AARCH64_ISA_F32MM)\n \n /* F64MM instructions are enabled through +f64mm.  */\n-#define TARGET_F64MM (AARCH64_ISA_F64MM)\n-#define TARGET_SVE_F64MM (TARGET_SVE && AARCH64_ISA_F64MM)\n+#define TARGET_SVE_F64MM (AARCH64_ISA_F64MM)\n \n /* BF16 instructions are enabled through +bf16.  */\n #define TARGET_BF16_FP (AARCH64_ISA_BF16)"}, {"sha": "0a7633e5dd6d45282edd7a1088c14b555bc09b40", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31641840af2c40cf36036fa472df34d4a4402c3/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31641840af2c40cf36036fa472df34d4a4402c3/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=a31641840af2c40cf36036fa472df34d4a4402c3", "patch": "@@ -6468,7 +6468,7 @@\n (define_expand \"<optab>dihf2\"\n   [(set (match_operand:HF 0 \"register_operand\")\n \t(FLOATUORS:HF (match_operand:DI 1 \"register_operand\")))]\n-  \"TARGET_FLOAT && (TARGET_FP_F16INST || TARGET_SIMD)\"\n+  \"TARGET_FP_F16INST || TARGET_SIMD\"\n {\n   if (TARGET_FP_F16INST)\n     emit_insn (gen_aarch64_fp16_<optab>dihf2 (operands[0], operands[1]));\n@@ -6727,7 +6727,7 @@\n   [(match_operand:GPF 0 \"register_operand\")\n    (match_operand:GPF 1 \"register_operand\")\n    (match_operand:GPF 2 \"register_operand\")]\n-  \"TARGET_FLOAT && TARGET_SIMD\"\n+  \"TARGET_SIMD\"\n {\n   rtx bitmask = gen_reg_rtx (<V_INT_EQUIV>mode);\n   emit_move_insn (bitmask, GEN_INT (HOST_WIDE_INT_M1U\n@@ -6744,7 +6744,7 @@\n \t\t     (match_operand:GPF 2 \"register_operand\" \"w,w,0,0\")\n \t\t     (match_operand:<V_INT_EQUIV> 3 \"register_operand\" \"0,w,w,X\")]\n \t UNSPEC_COPYSIGN))]\n-  \"TARGET_FLOAT && TARGET_SIMD\"\n+  \"TARGET_SIMD\"\n   \"@\n    bsl\\\\t%0.<Vbtype>, %2.<Vbtype>, %1.<Vbtype>\n    bit\\\\t%0.<Vbtype>, %2.<Vbtype>, %3.<Vbtype>\n@@ -6765,7 +6765,7 @@\n   [(match_operand:GPF 0 \"register_operand\")\n    (match_operand:GPF 1 \"register_operand\")\n    (match_operand:GPF 2 \"register_operand\")]\n-  \"TARGET_FLOAT && TARGET_SIMD\"\n+  \"TARGET_SIMD\"\n {\n \n   machine_mode imode = <V_INT_EQUIV>mode;"}]}