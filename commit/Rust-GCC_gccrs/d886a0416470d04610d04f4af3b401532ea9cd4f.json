{"sha": "d886a0416470d04610d04f4af3b401532ea9cd4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg4NmEwNDE2NDcwZDA0NjEwZDA0ZjRhZjNiNDAxNTMyZWE5Y2Q0Zg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2004-02-09T19:58:18Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-02-09T19:58:18Z"}, "message": "rs6000.c (rs6000_emit_move): Remove splitting slow unaligned loads and stores.\n\n        * config/rs6000/rs6000.c (rs6000_emit_move): Remove splitting slow\n        unaligned loads and stores.\n\nFrom-SVN: r77549", "tree": {"sha": "bcc8ff716a1814b6340ecc5d1221bd8355688816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcc8ff716a1814b6340ecc5d1221bd8355688816"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d886a0416470d04610d04f4af3b401532ea9cd4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d886a0416470d04610d04f4af3b401532ea9cd4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d886a0416470d04610d04f4af3b401532ea9cd4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d886a0416470d04610d04f4af3b401532ea9cd4f/comments", "author": null, "committer": null, "parents": [{"sha": "756f76d0d2ad3b7d99e335d40bf17749550da45d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/756f76d0d2ad3b7d99e335d40bf17749550da45d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/756f76d0d2ad3b7d99e335d40bf17749550da45d"}], "stats": {"total": 45, "additions": 5, "deletions": 40}, "files": [{"sha": "6720079b83ede8664e806ef8d7d490ec7fc489a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d886a0416470d04610d04f4af3b401532ea9cd4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d886a0416470d04610d04f4af3b401532ea9cd4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d886a0416470d04610d04f4af3b401532ea9cd4f", "patch": "@@ -1,3 +1,8 @@\n+2004-02-09  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_move): Remove splitting slow\n+\tunaligned loads and stores.\n+\n 2004-02-09  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* config/mips/iris5.h (BSS_SECTION_ASM_OP): Define."}, {"sha": "f0bdd74b475b4bc42acba9f49347b966d810990c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d886a0416470d04610d04f4af3b401532ea9cd4f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d886a0416470d04610d04f4af3b401532ea9cd4f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d886a0416470d04610d04f4af3b401532ea9cd4f", "patch": "@@ -3422,46 +3422,6 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n \t\t      adjust_address (operands[1], SImode, 4));\n       return;\n     }\n-  else if (mode == DImode && TARGET_POWERPC64\n-\t   && GET_CODE (operands[0]) == REG\n-\t   && GET_CODE (operands[1]) == MEM && optimize > 0\n-\t   && SLOW_UNALIGNED_ACCESS (DImode,\n-\t\t\t\t     MEM_ALIGN (operands[1]) > 32\n-\t\t\t\t     ? 32\n-\t\t\t\t     : MEM_ALIGN (operands[1]))\n-\t   && !no_new_pseudos)\n-    {\n-      rtx reg = gen_reg_rtx (SImode);\n-      emit_insn (gen_rtx_SET (SImode, reg,\n-\t\t\t      adjust_address (operands[1], SImode, 0)));\n-      reg = simplify_gen_subreg (DImode, reg, SImode, 0);\n-      emit_insn (gen_insvdi (operands[0], GEN_INT (32), const0_rtx, reg));\n-      reg = gen_reg_rtx (SImode);\n-      emit_insn (gen_rtx_SET (SImode, reg,\n-\t\t\t      adjust_address (operands[1], SImode, 4)));\n-      reg = simplify_gen_subreg (DImode, reg, SImode, 0);\n-      emit_insn (gen_insvdi (operands[0], GEN_INT (32), GEN_INT (32), reg));\n-      return;\n-    }\n-  else if (mode == DImode && TARGET_POWERPC64\n-\t   && GET_CODE (operands[1]) == REG\n-\t   && GET_CODE (operands[0]) == MEM && optimize > 0\n-\t   && SLOW_UNALIGNED_ACCESS (DImode,\n-\t\t\t\t     MEM_ALIGN (operands[0]) > 32\n-\t\t\t\t     ? 32\n-\t\t\t\t     : MEM_ALIGN (operands[0]))\n-\t   && !no_new_pseudos)\n-      {\n-\trtx reg = gen_reg_rtx (DImode);\n-\temit_move_insn (reg,\n-\t\t\tgen_rtx_LSHIFTRT (DImode, operands[1], GEN_INT (32)));\n-\temit_move_insn (adjust_address (operands[0], SImode, 0),\n-\t\t\tsimplify_gen_subreg (SImode, reg, DImode, 0));\n-\temit_move_insn (reg, operands[1]);\n-\temit_move_insn (adjust_address (operands[0], SImode, 4),\n-\t\t\tsimplify_gen_subreg (SImode, reg, DImode, 0));\n-\treturn;\n-      }\n \n   if (!no_new_pseudos)\n     {"}]}