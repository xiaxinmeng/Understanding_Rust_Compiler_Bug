{"sha": "a3ce4803ea9fff9ae6d8a604f5e9cbe6396ac75d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNjZTQ4MDNlYTlmZmY5YWU2ZDhhNjA0ZjVlOWNiZTYzOTZhYzc1ZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-19T05:34:08Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-19T05:34:08Z"}, "message": "reflect: Fix invalid sharing in valueInterface.\n\nFrom-SVN: r193614", "tree": {"sha": "1750e12378b941560d41e98869d3351ba1390dd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1750e12378b941560d41e98869d3351ba1390dd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3ce4803ea9fff9ae6d8a604f5e9cbe6396ac75d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ce4803ea9fff9ae6d8a604f5e9cbe6396ac75d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ce4803ea9fff9ae6d8a604f5e9cbe6396ac75d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ce4803ea9fff9ae6d8a604f5e9cbe6396ac75d/comments", "author": null, "committer": null, "parents": [{"sha": "822a258a9848094045f3c1603b8b2eb0473ba40c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822a258a9848094045f3c1603b8b2eb0473ba40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/822a258a9848094045f3c1603b8b2eb0473ba40c"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "4e557414d34b01fd17694d1dcdace8d142e0cc70", "filename": "libgo/go/reflect/value.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ce4803ea9fff9ae6d8a604f5e9cbe6396ac75d/libgo%2Fgo%2Freflect%2Fvalue.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ce4803ea9fff9ae6d8a604f5e9cbe6396ac75d/libgo%2Fgo%2Freflect%2Fvalue.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fvalue.go?ref=a3ce4803ea9fff9ae6d8a604f5e9cbe6396ac75d", "patch": "@@ -342,7 +342,7 @@ func (v Value) Call(in []Value) []Value {\n }\n \n // CallSlice calls the variadic function v with the input arguments in,\n-// assigning the slice in[len(in)-1] to v's final variadic argument.  \n+// assigning the slice in[len(in)-1] to v's final variadic argument.\n // For example, if len(in) == 3, v.Call(in) represents the Go call v(in[0], in[1], in[2]...).\n // Call panics if v's Kind is not Func or if v is not variadic.\n // It returns the output results as Values.\n@@ -905,7 +905,7 @@ func valueInterface(v Value, safe bool) interface{} {\n \n \tif safe && v.flag&flagRO != 0 {\n \t\t// Do not allow access to unexported values via Interface,\n-\t\t// because they might be pointers that should not be \n+\t\t// because they might be pointers that should not be\n \t\t// writable or methods or function that should not be callable.\n \t\tpanic(\"reflect.Value.Interface: cannot return value obtained from unexported field or method\")\n \t}\n@@ -928,7 +928,7 @@ func valueInterface(v Value, safe bool) interface{} {\n \teface.typ = v.typ.runtimeType()\n \teface.word = v.iword()\n \n-\tif v.flag&flagIndir != 0 && v.typ.size > ptrSize {\n+\tif v.flag&flagIndir != 0 && v.kind() != Ptr && v.kind() != UnsafePointer {\n \t\t// eface.word is a pointer to the actual data,\n \t\t// which might be changed.  We need to return\n \t\t// a pointer to unchanging data, so make a copy.\n@@ -1777,7 +1777,7 @@ func Select(cases []SelectCase) (chosen int, recv Value, recvOK bool) {\n \t\tdefault:\n \t\t\tpanic(\"reflect.Select: invalid Dir\")\n \n-\t\tcase SelectDefault: // default\t\n+\t\tcase SelectDefault: // default\n \t\t\tif haveDefault {\n \t\t\t\tpanic(\"reflect.Select: multiple default cases\")\n \t\t\t}"}]}