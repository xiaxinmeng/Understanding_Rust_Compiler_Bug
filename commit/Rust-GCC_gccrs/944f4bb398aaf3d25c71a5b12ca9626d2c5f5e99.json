{"sha": "944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ0ZjRiYjM5OGFhZjNkMjVjNzFhNWIxMmNhOTYyNmQyYzVmNWU5OQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-02-14T15:28:00Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-02-14T15:28:00Z"}, "message": "make mcore use constraints.md\n\n\tmake mcore use constraints.md\n\t* config/mcore/constraints.md: New file.\n\t* config/mcore/mcore.md: Include it.\n\t* config/mcore/mcore.c (reg_class_from_letter): Delete.\n\t* config/mcore/mcore.h (reg_class_from_letter): Delete.\n\t(REG_CLASS_FROM_LETTER): Delete.\n\t(CONST_OK_FOR_I, CONST_OK_FOR_J, CONST_OK_FOR_L): Use\n\tinsn_const_int_ok_for_constraint.\n\t(CONST_OK_FOR_K, CONST_OK_FOR_M, CONST_OK_FOR_N): Likewise.\n\t(CONST_OK_FOR_O, CONST_OK_FOR_P): Likewise.\n\t(CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n\t(EXTRA_CONSTRAINT): Delete.\n\nFrom-SVN: r170134", "tree": {"sha": "4cc404af9081a970a9b5d45893fd4be2d0438496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cc404af9081a970a9b5d45893fd4be2d0438496"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99/comments", "author": null, "committer": null, "parents": [{"sha": "53b4d41df8af3027dac1edd7965cb44bf0747494", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b4d41df8af3027dac1edd7965cb44bf0747494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53b4d41df8af3027dac1edd7965cb44bf0747494"}], "stats": {"total": 233, "additions": 144, "deletions": 89}, "files": [{"sha": "a6933212be3d1880b01c385068b2afd5fe643ed7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99", "patch": "@@ -1,3 +1,17 @@\n+2011-02-14  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/mcore/constraints.md: New file.\n+\t* config/mcore/mcore.md: Include it.\n+\t* config/mcore/mcore.c (reg_class_from_letter): Delete.\n+\t* config/mcore/mcore.h (reg_class_from_letter): Delete.\n+\t(REG_CLASS_FROM_LETTER): Delete.\n+\t(CONST_OK_FOR_I, CONST_OK_FOR_J, CONST_OK_FOR_L): Use\n+\tinsn_const_int_ok_for_constraint.\n+\t(CONST_OK_FOR_K, CONST_OK_FOR_M, CONST_OK_FOR_N): Likewise.\n+\t(CONST_OK_FOR_O, CONST_OK_FOR_P): Likewise.\n+\t(CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n+\t(EXTRA_CONSTRAINT): Delete.\n+\n 2011-02-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR ada/41929"}, {"sha": "dee98077579aa260aa2fae7dd663ef71dc3a113d", "filename": "gcc/config/mcore/constraints.md", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99/gcc%2Fconfig%2Fmcore%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99/gcc%2Fconfig%2Fmcore%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fconstraints.md?ref=944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99", "patch": "@@ -0,0 +1,112 @@\n+;; Constraint definitions for the Motorola MCore\n+;; Copyright (C) 2011\n+;; Free Software Foundation, Inc.\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Register constraints.\n+(define_register_constraint \"a\" \"LRW_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"b\" \"ONLYR1_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"c\" \"C_REGS\"\n+  \"@internal\")\n+\n+(define_register_constraint \"x\" \"ALL_REGS\"\n+  \"@internal\")\n+\n+;; Integer constraints.\n+(define_constraint \"I\"\n+  \"An integer in the range 0 to 127.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 0, 127)\")))\n+\n+(define_constraint \"J\"\n+  \"An integer in the range 1 to 32.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 1, 32)\")))\n+\n+(define_constraint \"K\"\n+  \"A shift operand, an integer in the range 0 to 31.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 0, 31)\")))\n+\n+(define_constraint \"L\"\n+  \"A negative arithmetic operand in the range -32 to -1.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -32, -1)\")))\n+\n+(define_constraint \"M\"\n+  \"A constant loadable by bgeni.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"exact_log2 (ival) >= 0 && exact_log2 (ival) <= 30\")))\n+\n+(define_constraint \"N\"\n+  \"A constant loadable by bmaskii, including -1.\"\n+  (and (match_code \"const_int\")\n+       (ior (match_test \"ival == -1\")\n+\t    (and (match_test \"exact_log2 (ival + 1) >= 0\")\n+\t\t (match_test \"exact_log2 (ival + 1) <= 30\")))))\n+\n+(define_constraint \"O\"\n+  \"A constant allowed by cmov with two constants +/- 1 of each other.\"\n+  (and (match_code \"const_int\")\n+       (ior (match_test \"insn_const_int_ok_for_constraint (ival, CONSTRAINT_I)\")\n+\t    (match_test \"insn_const_int_ok_for_constraint (ival, CONSTRAINT_M)\")\n+\t    (match_test \"insn_const_int_ok_for_constraint (ival, CONSTRAINT_N)\")\n+\t    (match_test \"insn_const_int_ok_for_constraint (ival - 1, CONSTRAINT_M)\")\n+\t    (match_test \"insn_const_int_ok_for_constraint (ival + 1, CONSTRAINT_N)\"))))\n+\n+(define_constraint \"P\"\n+  \"A value that can be generated without an lrw instruction.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mcore_const_ok_for_inline (ival)\")))\n+\n+;; Floating-point constraints.\n+(define_constraint \"G\"\n+  \"@internal\"\n+  (and (match_code \"const_double\")\n+       (match_test \"insn_const_int_ok_for_constraint (hval, CONSTRAINT_I)\")\n+       (match_test \"insn_const_int_ok_for_constraint (ival, CONSTRAINT_I)\")))\n+\n+;; Other constraints.\n+(define_constraint \"Q\"\n+  \"The integer constant one.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 1\")))\n+\n+(define_constraint \"R\"\n+  \"@internal\"\n+  (and (match_code \"mem\")\n+       (match_test \"GET_CODE (XEXP (op, 0)) == LABEL_REF\")))\n+\n+(define_constraint \"S\"\n+  \"An integer constant with 0, 1, or 2 bits clear.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mcore_num_zeros (ival) <= 2\")))\n+\n+(define_constraint \"T\"\n+  \"An integer constant with 2 set bits.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mcore_num_ones (ival) == 2\")))\n+\n+(define_constraint \"U\"\n+  \"The integer constant zero.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 0\")))"}, {"sha": "8118276a87bfc5c5c8c2970b26bd571a710c991f", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99", "patch": "@@ -61,19 +61,6 @@ const enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER] =\n   GENERAL_REGS, C_REGS,       NO_REGS,      NO_REGS,\n };\n \n-/* Provide reg_class from a letter such as appears in the machine\n-   description.  */\n-const enum reg_class reg_class_from_letter[] =\n-{\n-  /* a */ LRW_REGS, /* b */ ONLYR1_REGS, /* c */ C_REGS,  /* d */ NO_REGS,\n-  /* e */ NO_REGS, /* f */ NO_REGS, /* g */ NO_REGS, /* h */ NO_REGS,\n-  /* i */ NO_REGS, /* j */ NO_REGS, /* k */ NO_REGS, /* l */ NO_REGS,\n-  /* m */ NO_REGS, /* n */ NO_REGS, /* o */ NO_REGS, /* p */ NO_REGS,\n-  /* q */ NO_REGS, /* r */ GENERAL_REGS, /* s */ NO_REGS, /* t */ NO_REGS,\n-  /* u */ NO_REGS, /* v */ NO_REGS, /* w */ NO_REGS, /* x */ ALL_REGS,\n-  /* y */ NO_REGS, /* z */ NO_REGS\n-};\n-\n struct mcore_frame\n {\n   int arg_size;\t\t\t/* Stdarg spills (bytes).  */"}, {"sha": "54c12ef3dd87011eadf6f822f7d883fa73336261", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 17, "deletions": 76, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99", "patch": "@@ -374,82 +374,23 @@ extern const enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define INDEX_REG_CLASS  NO_REGS\n #define BASE_REG_CLASS\t GENERAL_REGS\n \n-/* Get reg_class from a letter such as appears in the machine \n-   description.  */\n-extern const enum reg_class reg_class_from_letter[];\n-\n-#define REG_CLASS_FROM_LETTER(C) \\\n-   (ISLOWER (C) ? reg_class_from_letter[(C) - 'a'] : NO_REGS)\n-\n-/* The letters I, J, K, L, M, N, O, and P in a register constraint string\n-   can be used to stand for particular ranges of immediate operands.\n-   This macro defines what the ranges are.\n-   C is the letter, and VALUE is a constant value.\n-   Return 1 if VALUE is in the range specified by C.\n-\tI: loadable by movi (0..127)\n-\tJ: arithmetic operand 1..32\n-\tK: shift operand 0..31\n-\tL: negative arithmetic operand -1..-32\n-\tM: powers of two, constants loadable by bgeni\n-\tN: powers of two minus 1, constants loadable by bmaski, including -1\n-        O: allowed by cmov with two constants +/- 1 of each other\n-        P: values we will generate 'inline' -- without an 'lrw'\n-\n-   Others defined for use after reload\n-        Q: constant 1\n-\tR: a label\n-        S: 0/1/2 cleared bits out of 32\t[for bclri's]\n-        T: 2 set bits out of 32\t[for bseti's]\n-        U: constant 0\n-        xxxS: 1 cleared bit out of 32 (complement of power of 2). for bclri\n-        xxxT: 2 cleared bits out of 32. for pairs of bclris.  */\n-#define CONST_OK_FOR_I(VALUE) (((HOST_WIDE_INT)(VALUE)) >= 0 && ((HOST_WIDE_INT)(VALUE)) <= 0x7f)\n-#define CONST_OK_FOR_J(VALUE) (((HOST_WIDE_INT)(VALUE)) >  0 && ((HOST_WIDE_INT)(VALUE)) <= 32)\n-#define CONST_OK_FOR_L(VALUE) (((HOST_WIDE_INT)(VALUE)) <  0 && ((HOST_WIDE_INT)(VALUE)) >= -32)\n-#define CONST_OK_FOR_K(VALUE) (((HOST_WIDE_INT)(VALUE)) >= 0 && ((HOST_WIDE_INT)(VALUE)) <= 31)\n-#define CONST_OK_FOR_M(VALUE) (exact_log2 (VALUE) >= 0 && exact_log2 (VALUE) <= 30)\n-#define CONST_OK_FOR_N(VALUE) (((HOST_WIDE_INT)(VALUE)) == -1 || (exact_log2 ((VALUE) + 1) >= 0 && exact_log2 ((VALUE) + 1) <= 30))\n-#define CONST_OK_FOR_O(VALUE) (CONST_OK_FOR_I(VALUE) || \\\n-                               CONST_OK_FOR_M(VALUE) || \\\n-                               CONST_OK_FOR_N(VALUE) || \\\n-                               CONST_OK_FOR_M((HOST_WIDE_INT)(VALUE) - 1) || \\\n-                               CONST_OK_FOR_N((HOST_WIDE_INT)(VALUE) + 1))\n-\n-#define CONST_OK_FOR_P(VALUE) (mcore_const_ok_for_inline (VALUE)) \n-\n-#define CONST_OK_FOR_LETTER_P(VALUE, C)     \\\n-     ((C) == 'I' ? CONST_OK_FOR_I (VALUE)   \\\n-    : (C) == 'J' ? CONST_OK_FOR_J (VALUE)   \\\n-    : (C) == 'L' ? CONST_OK_FOR_L (VALUE)   \\\n-    : (C) == 'K' ? CONST_OK_FOR_K (VALUE)   \\\n-    : (C) == 'M' ? CONST_OK_FOR_M (VALUE)   \\\n-    : (C) == 'N' ? CONST_OK_FOR_N (VALUE)   \\\n-    : (C) == 'P' ? CONST_OK_FOR_P (VALUE)   \\\n-    : (C) == 'O' ? CONST_OK_FOR_O (VALUE)   \\\n-    : 0)\n-\n-/* Similar, but for floating constants, and defining letters G and H.\n-   Here VALUE is the CONST_DOUBLE rtx itself.  */\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C) \\\n-   ((C) == 'G' ? CONST_OK_FOR_I (CONST_DOUBLE_HIGH (VALUE)) \\\n-\t      && CONST_OK_FOR_I (CONST_DOUBLE_LOW (VALUE))  \\\n-    : 0)\n-\n-/* Letters in the range `Q' through `U' in a register constraint string\n-   may be defined in a machine-dependent fashion to stand for arbitrary\n-   operand types.  */\n-#define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\\\n-  ((C) == 'R' ? (GET_CODE (OP) == MEM\t\t\t\\\n-\t\t && GET_CODE (XEXP (OP, 0)) == LABEL_REF) \\\n-   : (C) == 'S' ? (GET_CODE (OP) == CONST_INT \\\n-                   && mcore_num_zeros (INTVAL (OP)) <= 2) \\\n-   : (C) == 'T' ? (GET_CODE (OP) == CONST_INT \\\n-                   && mcore_num_ones (INTVAL (OP)) == 2) \\\n-   : (C) == 'Q' ? (GET_CODE (OP) == CONST_INT \\\n-                   && INTVAL(OP) == 1) \\\n-   : (C) == 'U' ? (GET_CODE (OP) == CONST_INT \\\n-                   && INTVAL(OP) == 0) \\\n-   : 0)\n+/* Convenience wrappers around insn_const_int_ok_for_constraint.  */\n+#define CONST_OK_FOR_I(VALUE) \\\n+  insn_const_int_ok_for_constraint (VALUE, CONSTRAINT_I)\n+#define CONST_OK_FOR_J(VALUE) \\\n+  insn_const_int_ok_for_constraint (VALUE, CONSTRAINT_J)\n+#define CONST_OK_FOR_L(VALUE) \\\n+  insn_const_int_ok_for_constraint (VALUE, CONSTRAINT_L)\n+#define CONST_OK_FOR_K(VALUE) \\\n+  insn_const_int_ok_for_constraint (VALUE, CONSTRAINT_K)\n+#define CONST_OK_FOR_M(VALUE) \\\n+  insn_const_int_ok_for_constraint (VALUE, CONSTRAINT_M)\n+#define CONST_OK_FOR_N(VALUE) \\\n+  insn_const_int_ok_for_constraint (VALUE, CONSTRAINT_N)\n+#define CONST_OK_FOR_O(VALUE) \\\n+  insn_const_int_ok_for_constraint (VALUE, CONSTRAINT_O)\n+#define CONST_OK_FOR_P(VALUE) \\\n+  insn_const_int_ok_for_constraint (VALUE, CONSTRAINT_P)\n \n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use."}, {"sha": "c56a0c6aea15e5dca39c9bc57b4c5800414037c7", "filename": "gcc/config/mcore/mcore.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99/gcc%2Fconfig%2Fmcore%2Fmcore.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99/gcc%2Fconfig%2Fmcore%2Fmcore.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.md?ref=944f4bb398aaf3d25c71a5b12ca9626d2c5f5e99", "patch": "@@ -54,6 +54,7 @@\n \t\t\t \"nothing\")\n \n (include \"predicates.md\")\n+(include \"constraints.md\")\n \n ;; -------------------------------------------------------------------------\n ;; Test and bit test"}]}