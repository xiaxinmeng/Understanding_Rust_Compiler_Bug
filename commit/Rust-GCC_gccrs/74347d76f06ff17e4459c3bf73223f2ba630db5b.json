{"sha": "74347d76f06ff17e4459c3bf73223f2ba630db5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQzNDdkNzZmMDZmZjE3ZTQ0NTljM2JmNzMyMjNmMmJhNjMwZGI1Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-31T12:30:38Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-31T12:30:38Z"}, "message": "(push_reload): Add case for output reload of a SUBREG of a hard reg when output mode is invalid for that mode.\n\n(push_reload): Add case for output reload of a SUBREG\nof a hard reg when output mode is invalid for that mode.\nIn both that case and existing case for in, don't remove SUBREG.\n\nFrom-SVN: r10294", "tree": {"sha": "7db44ee97307539768d56fb5ce427fb42339b44d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7db44ee97307539768d56fb5ce427fb42339b44d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74347d76f06ff17e4459c3bf73223f2ba630db5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74347d76f06ff17e4459c3bf73223f2ba630db5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74347d76f06ff17e4459c3bf73223f2ba630db5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74347d76f06ff17e4459c3bf73223f2ba630db5b/comments", "author": null, "committer": null, "parents": [{"sha": "1604422ce4cfec62a1870a758cd781bb84b8e7f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1604422ce4cfec62a1870a758cd781bb84b8e7f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1604422ce4cfec62a1870a758cd781bb84b8e7f6"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "620c90d6f0c938a5995ba86e38991f63d2dc7434", "filename": "gcc/reload.c", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74347d76f06ff17e4459c3bf73223f2ba630db5b/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74347d76f06ff17e4459c3bf73223f2ba630db5b/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=74347d76f06ff17e4459c3bf73223f2ba630db5b", "patch": "@@ -734,6 +734,7 @@ push_reload (in, out, inloc, outloc, class,\n {\n   register int i;\n   int dont_share = 0;\n+  int dont_remove_subreg = 0;\n   rtx *in_subreg_loc = 0, *out_subreg_loc = 0;\n   int secondary_in_reload = -1, secondary_out_reload = -1;\n   enum insn_code secondary_in_icode = CODE_FOR_nothing;\n@@ -902,6 +903,7 @@ push_reload (in, out, inloc, outloc, class,\n     {\n       push_reload (SUBREG_REG (in), NULL_RTX, &SUBREG_REG (in), NULL_PTR,\n \t\t   GENERAL_REGS, VOIDmode, VOIDmode, 0, 0, opnum, type);\n+      dont_remove_subreg = 1;\n     }\n \n \n@@ -963,6 +965,35 @@ push_reload (in, out, inloc, outloc, class,\n       outmode = GET_MODE (out);\n     }\n \n+  /* Similar issue for (SUBREG:M1 (REG:M2 ...) ...) for a hard register R where\n+     either M1 is not valid for R or M2 is wider than a word but we only\n+     need one word to store an M2-sized quantity in R.\n+\n+     However, we must reload the inner reg *as well as* the subreg in\n+     that case.  In this case, the inner reg is an in-out reload.  */\n+\n+  if (out != 0 && GET_CODE (out) == SUBREG\n+      && GET_CODE (SUBREG_REG (out)) == REG\n+      && REGNO (SUBREG_REG (out)) < FIRST_PSEUDO_REGISTER\n+      && (! HARD_REGNO_MODE_OK (REGNO (SUBREG_REG (out)), outmode)\n+\t  || (GET_MODE_SIZE (outmode) <= UNITS_PER_WORD\n+\t      && (GET_MODE_SIZE (GET_MODE (SUBREG_REG (out)))\n+\t\t  > UNITS_PER_WORD)\n+\t      && ((GET_MODE_SIZE (GET_MODE (SUBREG_REG (out)))\n+\t\t   / UNITS_PER_WORD)\n+\t\t  != HARD_REGNO_NREGS (REGNO (SUBREG_REG (out)),\n+\t\t\t\t       GET_MODE (SUBREG_REG (out)))))))\n+    {\n+      if (type == RELOAD_OTHER)\n+\tabort ();\n+\n+      dont_remove_subreg = 1;\n+      push_reload (SUBREG_REG (out), SUBREG_REG (out), &SUBREG_REG (out),\n+\t\t   &SUBREG_REG (out), ALL_REGS, VOIDmode, VOIDmode, 0, 0,\n+\t\t   opnum, RELOAD_OTHER);\n+    }\n+\n+\n   /* If IN appears in OUT, we can't share any input-only reload for IN.  */\n   if (in != 0 && out != 0 && GET_CODE (out) == MEM\n       && (GET_CODE (in) == REG || GET_CODE (in) == MEM)\n@@ -973,14 +1004,16 @@ push_reload (in, out, inloc, outloc, class,\n      simplifies some of the cases below.  */\n \n   if (in != 0 && GET_CODE (in) == SUBREG && GET_CODE (SUBREG_REG (in)) == REG\n-      && REGNO (SUBREG_REG (in)) < FIRST_PSEUDO_REGISTER)\n+      && REGNO (SUBREG_REG (in)) < FIRST_PSEUDO_REGISTER\n+      && ! dont_remove_subreg)\n     in = gen_rtx (REG, GET_MODE (in),\n \t\t  REGNO (SUBREG_REG (in)) + SUBREG_WORD (in));\n \n   /* Similarly for OUT.  */\n   if (out != 0 && GET_CODE (out) == SUBREG\n       && GET_CODE (SUBREG_REG (out)) == REG\n-      && REGNO (SUBREG_REG (out)) < FIRST_PSEUDO_REGISTER)\n+      && REGNO (SUBREG_REG (out)) < FIRST_PSEUDO_REGISTER\n+      && ! dont_remove_subreg)\n     out = gen_rtx (REG, GET_MODE (out),\n \t\t  REGNO (SUBREG_REG (out)) + SUBREG_WORD (out));\n "}]}