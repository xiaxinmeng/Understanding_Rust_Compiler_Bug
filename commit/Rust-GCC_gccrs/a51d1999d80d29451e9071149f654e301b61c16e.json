{"sha": "a51d1999d80d29451e9071149f654e301b61c16e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUxZDE5OTlkODBkMjk0NTFlOTA3MTE0OWY2NTRlMzAxYjYxYzE2ZQ==", "commit": {"author": {"name": "Suresh Gumpula", "email": "suresh.gumpula@amd.com", "date": "2010-06-10T14:53:15Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-06-10T14:53:15Z"}, "message": "re PR libstdc++/43918 (gcc 4.5.0 is failing for i586-pc-msdosdjgpp)\n\n2010-06-10  Suresh Gumpula  <suresh.gumpula@amd.com>\n\n\tPR libstdc++/43918\n\t* config/os/djgpp/error_constants.h: New.\n\t* configure.host: Use it.\n\nFrom-SVN: r160551", "tree": {"sha": "815f515d428c4b6c2a43330cf5755cdaff16b3e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/815f515d428c4b6c2a43330cf5755cdaff16b3e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a51d1999d80d29451e9071149f654e301b61c16e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51d1999d80d29451e9071149f654e301b61c16e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a51d1999d80d29451e9071149f654e301b61c16e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51d1999d80d29451e9071149f654e301b61c16e/comments", "author": null, "committer": null, "parents": [{"sha": "03af1e4c73f8e9b0b9fcfd18ca5d3965a6879bbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03af1e4c73f8e9b0b9fcfd18ca5d3965a6879bbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03af1e4c73f8e9b0b9fcfd18ca5d3965a6879bbb"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "b7c97270b70b69176bf0a793f4135e73eb10d38e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51d1999d80d29451e9071149f654e301b61c16e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51d1999d80d29451e9071149f654e301b61c16e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a51d1999d80d29451e9071149f654e301b61c16e", "patch": "@@ -1,3 +1,9 @@\n+2010-06-10  Suresh Gumpula  <suresh.gumpula@amd.com>\n+\n+\tPR libstdc++/43918\n+\t* config/os/djgpp/error_constants.h: New.\n+\t* configure.host: Use it.\n+\n 2010-06-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/tuple (tuple(const tuple&)): Define explicitly-defaulted."}, {"sha": "3efe540d3029762a803933efbe4bc16016d44958", "filename": "libstdc++-v3/config/os/djgpp/error_constants.h", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51d1999d80d29451e9071149f654e301b61c16e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Ferror_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51d1999d80d29451e9071149f654e301b61c16e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Ferror_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Ferror_constants.h?ref=a51d1999d80d29451e9071149f654e301b61c16e", "patch": "@@ -0,0 +1,124 @@\n+// Specific definitions for DJGPP platform  -*- C++ -*-\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file error_constants.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _GLIBCXX_ERROR_CONSTANTS\n+#define _GLIBCXX_ERROR_CONSTANTS 1\n+\n+#include <bits/c++config.h>\n+#include <cerrno>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+// Most of the commented-out error codes are socket-related and could be\n+// replaced by Winsock WSA-prefixed equivalents.\n+  enum class errc\n+    {\n+//    address_family_not_supported = \t\tEAFNOSUPPORT,\n+//    address_in_use = \t\t\t\tEADDRINUSE,\n+//    address_not_available = \t\t\tEADDRNOTAVAIL,\n+//    already_connected = \t\t\tEISCONN,\n+      argument_list_too_long = \t\t\tE2BIG,\n+      argument_out_of_domain = \t\t\tEDOM,\n+      bad_address = \t\t\t\tEFAULT,\n+      bad_file_descriptor = \t\t\tEBADF,\n+//    bad_message = \t\t\t\tEBADMSG,\n+      broken_pipe = \t\t\t\tEPIPE,\n+//    connection_aborted = \t\t\tECONNABORTED,\n+//    connection_already_in_progress = \t\tEALREADY,\n+//    connection_refused = \t\t\tECONNREFUSED,\n+//    connection_reset = \t\t\tECONNRESET,\n+//    cross_device_link = \t\t\tEXDEV,\n+//    destination_address_required = \t\tEDESTADDRREQ,\n+      device_or_resource_busy = \t\tEBUSY,\n+      directory_not_empty = \t\t\tENOTEMPTY,\n+      executable_format_error = \t\tENOEXEC,\n+      file_exists = \t       \t\t\tEEXIST,\n+      file_too_large = \t\t\t\tEFBIG,\n+      filename_too_long = \t\t\tENAMETOOLONG,\n+      function_not_supported = \t\t\tENOSYS,\n+//    host_unreachable = \t\t\tEHOSTUNREACH,\n+//    identifier_removed = \t\t\tEIDRM,\n+      illegal_byte_sequence = \t\t\tEILSEQ,\n+      inappropriate_io_control_operation = \tENOTTY,\n+      interrupted = \t\t\t\tEINTR,\n+      invalid_argument = \t\t\tEINVAL,\n+      invalid_seek = \t\t\t\tESPIPE,\n+      io_error = \t\t\t\tEIO,\n+      is_a_directory = \t\t\t\tEISDIR,\n+//    message_size = \t\t\t\tEMSGSIZE,\n+//    network_down = \t\t\t\tENETDOWN,\n+//    network_reset = \t\t\t\tENETRESET,\n+//    network_unreachable = \t\t\tENETUNREACH,\n+//    no_buffer_space = \t\t\tENOBUFS,\n+//    no_child_process = \t\t\tECHILD,\n+//    no_link = \t\t\t\tENOLINK,\n+      no_lock_available = \t\t\tENOLCK,\n+//    no_message_available = \t\t\tENODATA, \n+//    no_message = \t\t\t\tENOMSG, \n+//    no_protocol_option = \t\t\tENOPROTOOPT,\n+//    no_space_on_device = \t\t\tENOSPC,\n+//    no_stream_resources = \t\t\tENOSR,\n+      no_such_device_or_address = \t\tENXIO,\n+      no_such_device = \t\t\t\tENODEV,\n+      no_such_file_or_directory = \t\tENOENT,\n+      no_such_process = \t\t\tESRCH,\n+      not_a_directory = \t\t\tENOTDIR,\n+//    not_a_socket = \t\t\t\tENOTSOCK,\n+//    not_a_stream = \t\t\t\tENOSTR,\n+//    not_connected = \t\t\t\tENOTCONN,\n+      not_enough_memory = \t\t\tENOMEM,\n+//    not_supported = \t\t\t\tENOTSUP,\n+//    operation_canceled = \t\t\tECANCELED,\n+//    operation_in_progress = \t\t\tEINPROGRESS,\n+//    operation_not_permitted = \t\tEPERM,\n+//    operation_not_supported = \t\tEOPNOTSUPP,\n+//    operation_would_block = \t\t\tEWOULDBLOCK,\n+//    owner_dead = \t\t\t\tEOWNERDEAD,\n+      permission_denied = \t\t\tEACCES,\n+//    protocol_error = \t\t\t\tEPROTO,\n+//    protocol_not_supported = \t\t\tEPROTONOSUPPORT,\n+      read_only_file_system = \t\t\tEROFS,\n+      resource_deadlock_would_occur = \t\tEDEADLK,\n+      resource_unavailable_try_again = \t\tEAGAIN,\n+      result_out_of_range = \t\t\tERANGE,\n+//    state_not_recoverable = \t\t\tENOTRECOVERABLE,\n+//    stream_timeout = \t\t\t\tETIME,\n+//    text_file_busy = \t\t\t\tETXTBSY,\n+//    timed_out = \t\t\t\tETIMEDOUT,\n+      too_many_files_open_in_system = \t\tENFILE,\n+      too_many_files_open = \t\t\tEMFILE,\n+      too_many_links = \t\t\t\tEMLINK\n+ //   too_many_symbolic_link_levels = \t\tELOOP,\n+ //   value_too_large = \t\t\tEOVERFLOW,\n+ //   wrong_protocol_type = \t\t\tEPROTOTYPE\n+   };\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif"}, {"sha": "444f672e7be1f8869c71a66573692bec4e4a7e22", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51d1999d80d29451e9071149f654e301b61c16e/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51d1999d80d29451e9071149f654e301b61c16e/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=a51d1999d80d29451e9071149f654e301b61c16e", "patch": "@@ -231,6 +231,7 @@ case \"${host_os}\" in\n     ;;\n   *djgpp*)      # leading * picks up \"msdosdjgpp\"\n     os_include_dir=\"os/djgpp\"\n+    error_constants_dir=\"os/djgpp\"\n     ;;\n   freebsd*)\n     os_include_dir=\"os/bsd/freebsd\""}]}