{"sha": "66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZjMTZmZDk0ZmUyNmJjZWEzMzRmZmJlOWE0ZjNiOGFhMmUxY2YwMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-01-12T08:30:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-01-12T08:30:44Z"}, "message": "re PR tree-optimization/69157 (ICE in vect_transform_stmt, at tree-vect-stmts.c:8176)\n\n2016-01-12  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69157\n\t* tree-vect-stmts.c (vectorizable_mask_load_store): Check\n\tstmts def type only during analyze phase.\n\t(vectorizable_call): Likewise.\n\t(vectorizable_simd_clone_call): Likewise.\n\t(vectorizable_conversion): Likewise.\n\t(vectorizable_assignment): Likewise.\n\t(vectorizable_shift): Likewise.\n\t(vectorizable_operation): Likewise.\n\t(vectorizable_store): Likewise.\n\t(vectorizable_load): Likewise.\n\n\t* gcc.dg/torture/pr69157.c: New testcase.\n\n2016-01-12  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69174\n\t* tree-vect-stmts.c (vect_mark_relevant): Remove excessive vertical\n\tspace.\n\t(vectorizable_load): Properly compute the number of loads needed\n\tfor permuted strided SLP loads and do not spuriously assign\n\tto SLP_TREE_VEC_STMTS.\n\n\t* gcc.dg/torture/pr69174.c: New testcase.\n\nFrom-SVN: r232260", "tree": {"sha": "776e3bf5ae07bd31016ba46ab84bc75855a12121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/776e3bf5ae07bd31016ba46ab84bc75855a12121"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "723033a6b2ce651e9fded5af3a820ad605cbfed0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/723033a6b2ce651e9fded5af3a820ad605cbfed0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/723033a6b2ce651e9fded5af3a820ad605cbfed0"}], "stats": {"total": 117, "additions": 103, "deletions": 14}, "files": [{"sha": "6ccdbf8ecb8d41e259520adc79d7d7e1ef3e0a24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00", "patch": "@@ -1,3 +1,26 @@\n+2016-01-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69157\n+\t* tree-vect-stmts.c (vectorizable_mask_load_store): Check\n+\tstmts def type only during analyze phase.\n+\t(vectorizable_call): Likewise.\n+\t(vectorizable_simd_clone_call): Likewise.\n+\t(vectorizable_conversion): Likewise.\n+\t(vectorizable_assignment): Likewise.\n+\t(vectorizable_shift): Likewise.\n+\t(vectorizable_operation): Likewise.\n+\t(vectorizable_store): Likewise.\n+\t(vectorizable_load): Likewise.\n+\n+2016-01-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69174\n+\t* tree-vect-stmts.c (vect_mark_relevant): Remove excessive vertical\n+\tspace.\n+\t(vectorizable_load): Properly compute the number of loads needed\n+\tfor permuted strided SLP loads and do not spuriously assign\n+\tto SLP_TREE_VEC_STMTS.\n+\n 2016-01-12  Andris Pavenis <andris.pavenis@iki.fi>\n \n \t* config/i386/djgpp.h (PREFERRED_DEBUGGING_TYPE): Define to DWARF2"}, {"sha": "e19ea3144c771be5909c2d4639ae0bd85977619c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00", "patch": "@@ -1,3 +1,13 @@\n+2016-01-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69157\n+\t* gcc.dg/torture/pr69157.c: New testcase.\n+\n+2016-01-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69174\n+\t* gcc.dg/torture/pr69174.c: New testcase.\n+\n 2016-01-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/66808"}, {"sha": "e85082eda6ac5127e7ddc766491dc28d84c0880b", "filename": "gcc/testsuite/gcc.dg/torture/pr69157.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69157.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69157.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69157.c?ref=66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+typedef struct {\n+    float *data_normal3f;\n+    float *data_texcoordtexture2f;\n+    float *data_texcoordlightmap2f;\n+    float *data_color4f;\n+} dp_model_t;\n+dp_model_t a;\n+float *b;\n+void fn1() {\n+    int c;\n+    a.data_normal3f = b + c * 3;\n+    a.data_texcoordtexture2f = a.data_normal3f + c * 3;\n+    a.data_texcoordlightmap2f = a.data_color4f =\n+\ta.data_texcoordlightmap2f + c * 2;\n+}"}, {"sha": "086633135678406935973ad506644ff613de6e2a", "filename": "gcc/testsuite/gcc.dg/torture/pr69174.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69174.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69174.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69174.c?ref=66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+\n+typedef int pixval;\n+typedef struct { pixval r, g, b; } xel;\n+int convertRow_sample, convertRaster_col;\n+short *convertRow_samplebuf;\n+xel *convertRow_xelrow;\n+short convertRow_spp;\n+void fn1() {\n+    int *alpharow;\n+    for (; convertRaster_col;\n+\t ++convertRaster_col, convertRow_sample += convertRow_spp) {\n+\tconvertRow_xelrow[convertRaster_col].r =\n+\t    convertRow_xelrow[convertRaster_col].g =\n+\t    convertRow_xelrow[convertRaster_col].b =\n+\t    convertRow_samplebuf[convertRow_sample];\n+\talpharow[convertRaster_col] = convertRow_samplebuf[convertRow_sample + 3];\n+    }\n+}"}, {"sha": "872fa07664018862f7505a749fe137ad2fe60536", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=66c16fd94fe26bcea334ffbe9a4f3b8aa2e1cf00", "patch": "@@ -190,8 +190,11 @@ vect_mark_relevant (vec<gimple *> *worklist, gimple *stmt,\n   gimple *pattern_stmt;\n \n   if (dump_enabled_p ())\n-    dump_printf_loc (MSG_NOTE, vect_location,\n-                     \"mark relevant %d, live %d.\\n\", relevant, live_p);\n+    {\n+      dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t       \"mark relevant %d, live %d: \", relevant, live_p);\n+      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt, 0);\n+    }\n \n   /* If this stmt is an original stmt in a pattern, we might need to mark its\n      related pattern stmt instead of the original stmt.  However, such stmts\n@@ -1757,7 +1760,8 @@ vectorizable_mask_load_store (gimple *stmt, gimple_stmt_iterator *gsi,\n   if (!STMT_VINFO_RELEVANT_P (stmt_info))\n     return false;\n \n-  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def)\n+  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def\n+      && ! vec_stmt)\n     return false;\n \n   if (!STMT_VINFO_DATA_REF (stmt_info))\n@@ -2206,7 +2210,8 @@ vectorizable_call (gimple *gs, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n   if (!STMT_VINFO_RELEVANT_P (stmt_info) && !bb_vinfo)\n     return false;\n \n-  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def)\n+  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def\n+      && ! vec_stmt)\n     return false;\n \n   /* Is GS a vectorizable call?   */\n@@ -2811,7 +2816,8 @@ vectorizable_simd_clone_call (gimple *stmt, gimple_stmt_iterator *gsi,\n   if (!STMT_VINFO_RELEVANT_P (stmt_info) && !bb_vinfo)\n     return false;\n \n-  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def)\n+  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def\n+      && ! vec_stmt)\n     return false;\n \n   if (gimple_call_lhs (stmt)\n@@ -3669,7 +3675,8 @@ vectorizable_conversion (gimple *stmt, gimple_stmt_iterator *gsi,\n   if (!STMT_VINFO_RELEVANT_P (stmt_info) && !bb_vinfo)\n     return false;\n \n-  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def)\n+  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def\n+      && ! vec_stmt)\n     return false;\n \n   if (!is_gimple_assign (stmt))\n@@ -4246,7 +4253,8 @@ vectorizable_assignment (gimple *stmt, gimple_stmt_iterator *gsi,\n   if (!STMT_VINFO_RELEVANT_P (stmt_info) && !bb_vinfo)\n     return false;\n \n-  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def)\n+  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def\n+      && ! vec_stmt)\n     return false;\n \n   /* Is vectorizable assignment?  */\n@@ -4462,7 +4470,8 @@ vectorizable_shift (gimple *stmt, gimple_stmt_iterator *gsi,\n   if (!STMT_VINFO_RELEVANT_P (stmt_info) && !bb_vinfo)\n     return false;\n \n-  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def)\n+  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def\n+      && ! vec_stmt)\n     return false;\n \n   /* Is STMT a vectorizable binary/unary operation?   */\n@@ -4823,7 +4832,8 @@ vectorizable_operation (gimple *stmt, gimple_stmt_iterator *gsi,\n   if (!STMT_VINFO_RELEVANT_P (stmt_info) && !bb_vinfo)\n     return false;\n \n-  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def)\n+  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def\n+      && ! vec_stmt)\n     return false;\n \n   /* Is STMT a vectorizable binary/unary operation?   */\n@@ -5248,7 +5258,8 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n   if (!STMT_VINFO_RELEVANT_P (stmt_info) && !bb_vinfo)\n     return false;\n \n-  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def)\n+  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def\n+      && ! vec_stmt)\n     return false;\n \n   /* Is vectorizable store? */\n@@ -6237,7 +6248,8 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n   if (!STMT_VINFO_RELEVANT_P (stmt_info) && !bb_vinfo)\n     return false;\n \n-  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def)\n+  if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_internal_def\n+      && ! vec_stmt)\n     return false;\n \n   /* Is vectorizable load? */\n@@ -6748,9 +6760,16 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t  else\n \t    ltype = vectype;\n \t  ltype = build_aligned_type (ltype, TYPE_ALIGN (TREE_TYPE (vectype)));\n-\t  ncopies = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n+\t  /* For SLP permutation support we need to load the whole group,\n+\t     not only the number of vector stmts the permutation result\n+\t     fits in.  */\n \t  if (slp_perm)\n-\t    dr_chain.create (ncopies);\n+\t    {\n+\t      ncopies = (group_size * vf + nunits - 1) / nunits;\n+\t      dr_chain.create (ncopies);\n+\t    }\n+\t  else\n+\t    ncopies = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n \t}\n       for (j = 0; j < ncopies; j++)\n \t{\n@@ -6798,9 +6817,10 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \n \t  if (slp)\n \t    {\n-\t      SLP_TREE_VEC_STMTS (slp_node).quick_push (new_stmt);\n \t      if (slp_perm)\n \t\tdr_chain.quick_push (gimple_assign_lhs (new_stmt));\n+\t      else\n+\t\tSLP_TREE_VEC_STMTS (slp_node).quick_push (new_stmt);\n \t    }\n \t  else\n \t    {"}]}