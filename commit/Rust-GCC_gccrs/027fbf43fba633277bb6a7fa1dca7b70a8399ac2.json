{"sha": "027fbf43fba633277bb6a7fa1dca7b70a8399ac2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI3ZmJmNDNmYmE2MzMyNzdiYjZhN2ZhMWRjYTdiNzBhODM5OWFjMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2003-03-14T22:58:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2003-03-14T22:58:43Z"}, "message": "rs6000.c (rs6000_emit_load_toc_table): Don't call rs6000_maybe_dead if !fromprolog.\n\n\t* config/rs6000/rs6000.c (rs6000_emit_load_toc_table): Don't call\n\trs6000_maybe_dead if !fromprolog.\n\nFrom-SVN: r64376", "tree": {"sha": "3732972d9dc05773d2c1e4e439d08d75f64cf98c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3732972d9dc05773d2c1e4e439d08d75f64cf98c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/027fbf43fba633277bb6a7fa1dca7b70a8399ac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/027fbf43fba633277bb6a7fa1dca7b70a8399ac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/027fbf43fba633277bb6a7fa1dca7b70a8399ac2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/027fbf43fba633277bb6a7fa1dca7b70a8399ac2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "015cc81832d423c2f6374c0d3fd9c76798c48ba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/015cc81832d423c2f6374c0d3fd9c76798c48ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/015cc81832d423c2f6374c0d3fd9c76798c48ba8"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "646a4bdcecefbd93fbe32910d253ea564e97b31f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027fbf43fba633277bb6a7fa1dca7b70a8399ac2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027fbf43fba633277bb6a7fa1dca7b70a8399ac2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=027fbf43fba633277bb6a7fa1dca7b70a8399ac2", "patch": "@@ -1,3 +1,8 @@\n+2003-03-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_load_toc_table): Don't call\n+\trs6000_maybe_dead if !fromprolog.\n+\n 2003-03-14  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* Makefile.in: Update."}, {"sha": "85730fc23b6d226777c5bacee4d96bc9d7dfd8cc", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027fbf43fba633277bb6a7fa1dca7b70a8399ac2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027fbf43fba633277bb6a7fa1dca7b70a8399ac2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=027fbf43fba633277bb6a7fa1dca7b70a8399ac2", "patch": "@@ -9774,16 +9774,20 @@ void\n rs6000_emit_load_toc_table (fromprolog)\n      int fromprolog;\n {\n-  rtx dest;\n+  rtx dest, insn;\n   dest = gen_rtx_REG (Pmode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n \n   if (TARGET_ELF && DEFAULT_ABI == ABI_V4 && flag_pic == 1)\n     {\n       rtx temp = (fromprolog\n \t\t  ? gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM)\n \t\t  : gen_reg_rtx (Pmode));\n-      rs6000_maybe_dead (emit_insn (gen_load_toc_v4_pic_si (temp)));\n-      rs6000_maybe_dead (emit_move_insn (dest, temp));\n+      insn = emit_insn (gen_load_toc_v4_pic_si (temp));\n+      if (fromprolog)\n+\trs6000_maybe_dead (insn);\n+      insn = emit_move_insn (dest, temp);\n+      if (fromprolog)\n+\trs6000_maybe_dead (insn);\n     }\n   else if (TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2)\n     {\n@@ -9830,14 +9834,13 @@ rs6000_emit_load_toc_table (fromprolog)\n \t  ASM_GENERATE_INTERNAL_LABEL (buf, \"LCG\", reload_toc_labelno++);\n \t  symF = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n \n-\t  rs6000_maybe_dead (emit_insn (gen_load_toc_v4_PIC_1b (tempLR,\n-\t\t\t\t\t\t\t\tsymF,\n-\t\t\t\t\t\t\t\ttocsym)));\n-\t  rs6000_maybe_dead (emit_move_insn (dest, tempLR));\n-\t  rs6000_maybe_dead (emit_move_insn (temp0,\n-\t\t\t\t\t     gen_rtx_MEM (Pmode, dest)));\n+\t  emit_insn (gen_load_toc_v4_PIC_1b (tempLR, symF, tocsym));\n+\t  emit_move_insn (dest, tempLR);\n+\t  emit_move_insn (temp0, gen_rtx_MEM (Pmode, dest));\n \t}\n-      rs6000_maybe_dead (emit_insn (gen_addsi3 (dest, temp0, dest)));\n+      insn = emit_insn (gen_addsi3 (dest, temp0, dest));\n+      if (fromprolog)\n+\trs6000_maybe_dead (insn);\n     }\n   else if (TARGET_ELF && !TARGET_AIX && flag_pic == 0 && TARGET_MINIMAL_TOC)\n     {\n@@ -9847,15 +9850,21 @@ rs6000_emit_load_toc_table (fromprolog)\n       ASM_GENERATE_INTERNAL_LABEL (buf, \"LCTOC\", 1);\n       realsym = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n \n-      rs6000_maybe_dead (emit_insn (gen_elf_high (dest, realsym)));\n-      rs6000_maybe_dead (emit_insn (gen_elf_low (dest, dest, realsym)));\n+      insn = emit_insn (gen_elf_high (dest, realsym));\n+      if (fromprolog)\n+\trs6000_maybe_dead (insn);\n+      insn = emit_insn (gen_elf_low (dest, dest, realsym));\n+      if (fromprolog)\n+\trs6000_maybe_dead (insn);\n     }\n   else if (DEFAULT_ABI == ABI_AIX)\n     {\n       if (TARGET_32BIT)\n-\trs6000_maybe_dead (emit_insn (gen_load_toc_aix_si (dest)));\n+\tinsn = emit_insn (gen_load_toc_aix_si (dest));\n       else\n-\trs6000_maybe_dead (emit_insn (gen_load_toc_aix_di (dest)));\n+\tinsn = emit_insn (gen_load_toc_aix_di (dest));\n+      if (fromprolog)\n+\trs6000_maybe_dead (insn);\n     }\n   else\n     abort ();"}]}