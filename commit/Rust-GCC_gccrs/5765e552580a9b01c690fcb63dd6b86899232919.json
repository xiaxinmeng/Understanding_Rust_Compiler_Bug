{"sha": "5765e552580a9b01c690fcb63dd6b86899232919", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc2NWU1NTI1ODBhOWIwMWM2OTBmY2I2M2RkNmI4Njg5OTIzMjkxOQ==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2005-05-12T03:01:44Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-05-12T03:01:44Z"}, "message": "bitmap.c (bitmap_elmt_to_freelist, [...]): Changed freelist structure.\n\n\n2005-05-11 Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\t* bitmap.c (bitmap_elmt_to_freelist, bitmap_element_allocate,\n\tbitmap_elt_clear_from, bitmap_clear): Changed freelist structure.\n\t* bitmap.h: Fixed comments.\n\nFrom-SVN: r99605", "tree": {"sha": "131aaf5b4cd54ed92924c1eec55336a2d17fde92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/131aaf5b4cd54ed92924c1eec55336a2d17fde92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5765e552580a9b01c690fcb63dd6b86899232919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5765e552580a9b01c690fcb63dd6b86899232919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5765e552580a9b01c690fcb63dd6b86899232919", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5765e552580a9b01c690fcb63dd6b86899232919/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cca1655eabb86897dc2dfd5aa2830d07a1cc83ca"}], "stats": {"total": 92, "additions": 71, "deletions": 21}, "files": [{"sha": "b3f576d86f7de66a2ab244716aab0b5238785987", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5765e552580a9b01c690fcb63dd6b86899232919/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5765e552580a9b01c690fcb63dd6b86899232919/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5765e552580a9b01c690fcb63dd6b86899232919", "patch": "@@ -1,3 +1,9 @@\n+2005-05-11 Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\t* bitmap.c (bitmap_elmt_to_freelist, bitmap_element_allocate,\n+\tbitmap_elt_clear_from, bitmap_clear): Changed freelist structure.\n+\t* bitmap.h: Fixed comments.\n+\n 2005-05-11  Richard Henderson  <rth@redhat.com>\n \n \tPR target/21412"}, {"sha": "dd56bba0877d1b57de5fefb5ed624a1189129562", "filename": "gcc/bitmap.c", "status": "modified", "additions": 55, "deletions": 18, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5765e552580a9b01c690fcb63dd6b86899232919/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5765e552580a9b01c690fcb63dd6b86899232919/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=5765e552580a9b01c690fcb63dd6b86899232919", "patch": "@@ -51,14 +51,15 @@ bitmap_elem_to_freelist (bitmap head, bitmap_element *elt)\n {\n   bitmap_obstack *bit_obstack = head->obstack;\n   \n+  elt->next = NULL;\n   if (bit_obstack)\n     {\n-      elt->next = bit_obstack->elements;\n+      elt->prev = bit_obstack->elements;\n       bit_obstack->elements = elt;\n     }\n   else\n     {\n-      elt->next = bitmap_ggc_free;\n+      elt->prev = bitmap_ggc_free;\n       bitmap_ggc_free = elt;\n     }\n }\n@@ -105,15 +106,33 @@ bitmap_element_allocate (bitmap head)\n       element = bit_obstack->elements;\n       \n       if (element)\n-\tbit_obstack->elements = element->next;\n+\t/* Use up the inner list first before looking at the next\n+\t   element of the outer list.  */\n+\tif (element->next)\n+\t  {\n+\t    bit_obstack->elements = element->next;\n+\t    bit_obstack->elements->prev = element->prev;\n+\t  }\n+\telse\n+\t  /*  Inner list was just a singleton.  */\n+\t  bit_obstack->elements = element->prev;\n       else\n \telement = XOBNEW (&bit_obstack->obstack, bitmap_element);\n     }\n   else\n     {\n       element = bitmap_ggc_free;\n       if (element)\n-\tbitmap_ggc_free = element->next;\n+\t/* Use up the inner list first before looking at the next\n+\t   element of the outer list.  */\n+\tif (element->next)\n+\t  {\n+\t    bitmap_ggc_free = element->next;\n+\t    bitmap_ggc_free->prev = element->prev;\n+\t  }\n+\telse\n+\t  /*  Inner list was just a singleton.  */\n+\t  bitmap_ggc_free = element->prev;\n       else\n \telement = GGC_NEW (bitmap_element);\n     }\n@@ -128,13 +147,38 @@ bitmap_element_allocate (bitmap head)\n void\n bitmap_elt_clear_from (bitmap head, bitmap_element *elt)\n {\n-  bitmap_element *next;\n+  bitmap_element *prev;\n+  bitmap_obstack *bit_obstack = head->obstack;\n+\n+  if (!elt) return;\n \n-  while (elt)\n+  prev = elt->prev;\n+  if (prev)\n     {\n-      next = elt->next;\n-      bitmap_element_free (head, elt);\n-      elt = next;\n+      prev->next = NULL;\n+      if (head->current->indx > prev->indx)\n+\t{\n+\t  head->current = prev;\n+\t  head->indx = prev->indx;\n+\t}\n+    } \n+  else\n+    {\n+      head->first = NULL;\n+      head->current = NULL;\n+      head->indx = 0;\n+    }\n+\n+  /* Put the entire list onto the free list in one operation. */ \n+  if (bit_obstack)\n+    {\n+      elt->prev = bit_obstack->elements; \n+      bit_obstack->elements = elt;\n+    }\n+  else\n+    {\n+      elt->prev = bitmap_ggc_free;\n+      bitmap_ggc_free = elt;\n     }\n }\n \n@@ -143,15 +187,8 @@ bitmap_elt_clear_from (bitmap head, bitmap_element *elt)\n inline void\n bitmap_clear (bitmap head)\n {\n-  bitmap_element *element, *next;\n-\n-  for (element = head->first; element != 0; element = next)\n-    {\n-      next = element->next;\n-      bitmap_elem_to_freelist (head, element);\n-    }\n-\n-  head->first = head->current = 0;\n+  if (head->first)\n+    bitmap_elt_clear_from (head, head->first);\n }\n \f\n /* Initialize a bitmap obstack.  If BIT_OBSTACK is NULL, initialize"}, {"sha": "3c3b3c13f7a44274d69f230de177145c4bbf4417", "filename": "gcc/bitmap.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5765e552580a9b01c690fcb63dd6b86899232919/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5765e552580a9b01c690fcb63dd6b86899232919/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=5765e552580a9b01c690fcb63dd6b86899232919", "patch": "@@ -49,8 +49,15 @@ typedef struct bitmap_obstack GTY (())\n \n /* Bitmap set element.  We use a linked list to hold only the bits that\n    are set.  This allows for use to grow the bitset dynamically without\n-   having to realloc and copy a giant bit array.  The `prev' field is\n-   undefined for an element on the free list.  */\n+   having to realloc and copy a giant bit array.  \n+\n+   The free list is implemented as a list of lists.  There is one\n+   outer list connected together by prev fields.  Each element of that\n+   outer is an inner list (that may consist only of the outer list\n+   element) that are connected by the next fields.  The prev pointer\n+   is undefined for interior elements.  This allows\n+   bitmap_elt_clear_from to be implemented in unit time rather than\n+   linear in the number of elements to be freed.  */\n \n typedef struct bitmap_element_def GTY(())\n {\n@@ -129,7 +136,7 @@ extern void debug_bitmap_file (FILE *, bitmap);\n /* Print a bitmap.  */\n extern void bitmap_print (FILE *, bitmap, const char *, const char *);\n \n-/* Initialize and releas a bitmap obstack.  */\n+/* Initialize and release a bitmap obstack.  */\n extern void bitmap_obstack_initialize (bitmap_obstack *);\n extern void bitmap_obstack_release (bitmap_obstack *);\n "}]}