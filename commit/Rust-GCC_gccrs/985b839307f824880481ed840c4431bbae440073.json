{"sha": "985b839307f824880481ed840c4431bbae440073", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg1YjgzOTMwN2Y4MjQ4ODA0ODFlZDg0MGM0NDMxYmJhZTQ0MDA3Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-04-27T07:13:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-04-27T07:13:10Z"}, "message": "re PR target/77728 (Miscompilation multiple vector iteration on ARM)\n\n\tPR target/77728\n\t* config/aarch64/aarch64.c (struct aarch64_fn_arg_alignment): Remove.\n\t(aarch64_function_arg_alignment): Return unsigned int again, but still\n\tignore TYPE_FIELDS chain decls other than FIELD_DECLs.\n\t(aarch64_layout_arg): Adjust aarch64_function_arg_alignment caller.\n\tDon't emit -Wpsabi note.\n\t(aarch64_function_arg_boundary): Likewise.\n\t(aarch64_gimplify_va_arg_expr): Adjust aarch64_function_arg_alignment\n\tcaller.\ntestsuite/\n\t* g++.dg/abi/pr77728-2.C: Don't expect -Wpsabi notes.\n\nFrom-SVN: r247292", "tree": {"sha": "b0ae763702ee9de1dcb2ab8963ab52ef999a400a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0ae763702ee9de1dcb2ab8963ab52ef999a400a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/985b839307f824880481ed840c4431bbae440073", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985b839307f824880481ed840c4431bbae440073", "html_url": "https://github.com/Rust-GCC/gccrs/commit/985b839307f824880481ed840c4431bbae440073", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985b839307f824880481ed840c4431bbae440073/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db125f9e091a2088fe8d4e6132abe9c7c65edf37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db125f9e091a2088fe8d4e6132abe9c7c65edf37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db125f9e091a2088fe8d4e6132abe9c7c65edf37"}], "stats": {"total": 123, "additions": 43, "deletions": 80}, "files": [{"sha": "f5111d1eb06d3ed6ad3566792d9039be708b0566", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b839307f824880481ed840c4431bbae440073/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b839307f824880481ed840c4431bbae440073/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=985b839307f824880481ed840c4431bbae440073", "patch": "@@ -1,3 +1,15 @@\n+2017-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/77728\n+\t* config/aarch64/aarch64.c (struct aarch64_fn_arg_alignment): Remove.\n+\t(aarch64_function_arg_alignment): Return unsigned int again, but still\n+\tignore TYPE_FIELDS chain decls other than FIELD_DECLs.\n+\t(aarch64_layout_arg): Adjust aarch64_function_arg_alignment caller.\n+\tDon't emit -Wpsabi note.\n+\t(aarch64_function_arg_boundary): Likewise.\n+\t(aarch64_gimplify_va_arg_expr): Adjust aarch64_function_arg_alignment\n+\tcaller.\n+\n 2017-04-26  Nathan Sidwell  <nathan@acm.org>\n \n \t* tree.h (crc32_unsigned_n): Declare."}, {"sha": "5ba081701248852faf54d700177e4ff516555329", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 21, "deletions": 69, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b839307f824880481ed840c4431bbae440073/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b839307f824880481ed840c4431bbae440073/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=985b839307f824880481ed840c4431bbae440073", "patch": "@@ -2256,58 +2256,34 @@ aarch64_vfp_is_call_candidate (cumulative_args_t pcum_v, machine_mode mode,\n \t\t\t\t\t\t  NULL);\n }\n \n-struct aarch64_fn_arg_alignment\n-{\n-  /* Alignment for FIELD_DECLs in function arguments.  */\n-  unsigned int alignment;\n-  /* Alignment for decls other than FIELD_DECLs in function arguments.  */\n-  unsigned int warn_alignment;\n-};\n-\n-/* Given MODE and TYPE of a function argument, return a pair of alignments in\n+/* Given MODE and TYPE of a function argument, return the alignment in\n    bits.  The idea is to suppress any stronger alignment requested by\n    the user and opt for the natural alignment (specified in AAPCS64 \\S 4.1).\n    This is a helper function for local use only.  */\n \n-static struct aarch64_fn_arg_alignment\n+static unsigned int\n aarch64_function_arg_alignment (machine_mode mode, const_tree type)\n {\n-  struct aarch64_fn_arg_alignment aa;\n-  aa.alignment = 0;\n-  aa.warn_alignment = 0;\n-\n   if (!type)\n-    {\n-      aa.alignment = GET_MODE_ALIGNMENT (mode);\n-      return aa;\n-    }\n+    return GET_MODE_ALIGNMENT (mode);\n \n   if (integer_zerop (TYPE_SIZE (type)))\n-    return aa;\n+    return 0;\n \n   gcc_assert (TYPE_MODE (type) == mode);\n \n   if (!AGGREGATE_TYPE_P (type))\n-    {\n-      aa.alignment = TYPE_ALIGN (TYPE_MAIN_VARIANT (type));\n-      return aa;\n-    }\n+    return TYPE_ALIGN (TYPE_MAIN_VARIANT (type));\n \n   if (TREE_CODE (type) == ARRAY_TYPE)\n-    {\n-      aa.alignment = TYPE_ALIGN (TREE_TYPE (type));\n-      return aa;\n-    }\n+    return TYPE_ALIGN (TREE_TYPE (type));\n \n+  unsigned int alignment = 0;\n   for (tree field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n-    {\n-      if (TREE_CODE (field) == FIELD_DECL)\n-\taa.alignment = std::max (aa.alignment, DECL_ALIGN (field));\n-      else\n-\taa.warn_alignment = std::max (aa.warn_alignment, DECL_ALIGN (field));\n-    }\n+    if (TREE_CODE (field) == FIELD_DECL)\n+      alignment = std::max (alignment, DECL_ALIGN (field));\n \n-  return aa;\n+  return alignment;\n }\n \n /* Layout a function argument according to the AAPCS64 rules.  The rule\n@@ -2399,27 +2375,16 @@ aarch64_layout_arg (cumulative_args_t pcum_v, machine_mode mode,\n \n       /* C.8 if the argument has an alignment of 16 then the NGRN is\n          rounded up to the next even number.  */\n-      if (nregs == 2 && ncrn % 2)\n-\t{\n-\t  struct aarch64_fn_arg_alignment aa\n-\t    = aarch64_function_arg_alignment (mode, type);\n-\n+      if (nregs == 2\n+\t  && ncrn % 2\n \t  /* The == 16 * BITS_PER_UNIT instead of >= 16 * BITS_PER_UNIT\n-\t     comparisons are there because for > 16 * BITS_PER_UNIT\n+\t     comparison is there because for > 16 * BITS_PER_UNIT\n \t     alignment nregs should be > 2 and therefore it should be\n \t     passed by reference rather than value.  */\n-\t  if (aa.warn_alignment == 16 * BITS_PER_UNIT\n-\t      && aa.alignment < aa.warn_alignment\n-\t      && warn_psabi\n-\t      && currently_expanding_gimple_stmt)\n-\t    inform (input_location,\n-\t\t    \"parameter passing for argument of type %qT \"\n-\t\t    \"changed in GCC 7.1\", type);\n-\t  else if (aa.alignment == 16 * BITS_PER_UNIT)\n-\t    {\n-\t      ++ncrn;\n-\t      gcc_assert (ncrn + nregs <= NUM_ARG_REGS);\n-\t    }\n+\t  && aarch64_function_arg_alignment (mode, type) == 16 * BITS_PER_UNIT)\n+\t{\n+\t  ++ncrn;\n+\t  gcc_assert (ncrn + nregs <= NUM_ARG_REGS);\n \t}\n \n       /* NREGS can be 0 when e.g. an empty structure is to be passed.\n@@ -2454,10 +2419,8 @@ aarch64_layout_arg (cumulative_args_t pcum_v, machine_mode mode,\n      this argument and align the total size if necessary.  */\n on_stack:\n   pcum->aapcs_stack_words = size / UNITS_PER_WORD;\n-  struct aarch64_fn_arg_alignment aa\n-    = aarch64_function_arg_alignment (mode, type);\n \n-  if (aa.alignment == 16 * BITS_PER_UNIT)\n+  if (aarch64_function_arg_alignment (mode, type) == 16 * BITS_PER_UNIT)\n     pcum->aapcs_stack_size = ROUND_UP (pcum->aapcs_stack_size,\n \t\t\t\t       16 / UNITS_PER_WORD);\n   return;\n@@ -2548,17 +2511,8 @@ aarch64_function_arg_regno_p (unsigned regno)\n static unsigned int\n aarch64_function_arg_boundary (machine_mode mode, const_tree type)\n {\n-  struct aarch64_fn_arg_alignment aa\n-    = aarch64_function_arg_alignment (mode, type);\n-  aa.alignment = MIN (MAX (aa.alignment, PARM_BOUNDARY), STACK_BOUNDARY);\n-  aa.warn_alignment\n-    = MIN (MAX (aa.warn_alignment, PARM_BOUNDARY), STACK_BOUNDARY);\n-\n-  if (warn_psabi && aa.warn_alignment > aa.alignment)\n-    inform (input_location, \"parameter passing for argument of type %qT \"\n-\t    \"changed in GCC 7.1\", type);\n-\n-  return aa.alignment;\n+  unsigned int alignment = aarch64_function_arg_alignment (mode, type);\n+  return MIN (MAX (alignment, PARM_BOUNDARY), STACK_BOUNDARY);\n }\n \n /* For use by FUNCTION_ARG_PADDING (MODE, TYPE).\n@@ -10258,9 +10212,7 @@ aarch64_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   stack = build3 (COMPONENT_REF, TREE_TYPE (f_stack), unshare_expr (valist),\n \t\t  f_stack, NULL_TREE);\n   size = int_size_in_bytes (type);\n-  struct aarch64_fn_arg_alignment aa\n-    = aarch64_function_arg_alignment (mode, type);\n-  align = aa.alignment / BITS_PER_UNIT;\n+  align = aarch64_function_arg_alignment (mode, type) / BITS_PER_UNIT;\n \n   dw_align = false;\n   adjust = 0;"}, {"sha": "fb60df234c6893192c1377f7a1e5d7dd8628ba98", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b839307f824880481ed840c4431bbae440073/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b839307f824880481ed840c4431bbae440073/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=985b839307f824880481ed840c4431bbae440073", "patch": "@@ -1,3 +1,8 @@\n+2017-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/77728\n+\t* g++.dg/abi/pr77728-2.C: Don't expect -Wpsabi notes.\n+\n 2017-04-26  Volker Reichelt  <v.reichelt@netcologne.de>\n \n \t* g++.dg/diagnostic/nested-name-1.C: New test."}, {"sha": "ffe6910bd91d339a9062c67ce367fd17e917985a", "filename": "gcc/testsuite/g++.dg/abi/pr77728-2.C", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985b839307f824880481ed840c4431bbae440073/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr77728-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985b839307f824880481ed840c4431bbae440073/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr77728-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr77728-2.C?ref=985b839307f824880481ed840c4431bbae440073", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile { target { { aarch64-*-* } && c++11 } } }\n-// { dg-options \"-Wpsabi\" }\n+// { dg-options \"\" }\n \n #include <stdarg.h>\n \n@@ -30,7 +30,7 @@ struct K : public D { typedef A<N> T; int i, j; };\n struct L { static int h alignas (16); int i, j, k, l; };\n \n int\n-fn1 (int a, B<0> b)\t// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" }\n+fn1 (int a, B<0> b)\n {\n   return a + b.i;\n }\n@@ -42,14 +42,13 @@ fn2 (int a, B<1> b)\n }\n \n int\n-fn3 (int a, L b)\t// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" }\n+fn3 (int a, L b)\n {\n   return a + b.i;\n }\n \n int\n fn4 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, B<0> n, ...)\n-// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n {\n   va_list ap;\n   va_start (ap, n);\n@@ -110,7 +109,6 @@ fn9 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k\n \n int\n fn10 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, J n, ...)\n-// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n {\n   va_list ap;\n   va_start (ap, n);\n@@ -121,7 +119,6 @@ fn10 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int\n \n int\n fn11 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, K<0> n, ...)\n-// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n {\n   va_list ap;\n   va_start (ap, n);\n@@ -153,19 +150,16 @@ test ()\n   static J j;\n   static K<0> k0;\n   static K<2> k2;\n-  fn1 (1, b0);\t// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" }\n+  fn1 (1, b0);\n   fn2 (1, b1);\n-  fn3 (1, l);\t// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" }\n+  fn3 (1, l);\n   fn4 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, b0, 1, 2, 3, 4);\n-  // { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n   fn5 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, b1, 1, 2, 3, 4);\n   fn6 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, c, 1, 2, 3, 4);\n   fn7 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, e, 1, 2, 3, 4);\n   fn8 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, h, 1, 2, 3, 4);\n   fn9 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, i, 1, 2, 3, 4);\n   fn10 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, j, 1, 2, 3, 4);\n-  // { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n   fn11 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, k0, 1, 2, 3, 4);\n-  // { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n   fn12 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, k2, 1, 2, 3, 4);\n }"}]}