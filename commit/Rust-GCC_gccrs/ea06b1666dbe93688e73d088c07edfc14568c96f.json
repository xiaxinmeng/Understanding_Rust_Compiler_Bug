{"sha": "ea06b1666dbe93688e73d088c07edfc14568c96f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEwNmIxNjY2ZGJlOTM2ODhlNzNkMDg4YzA3ZWRmYzE0NTY4Yzk2Zg==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@develer.com", "date": "2004-07-25T02:50:57Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-07-25T02:50:57Z"}, "message": "c-common.h (c_staticp): Change return type from int to bool.\n\n\t* c-common.h (c_staticp): Change return type from int to bool.\n\t* tree.c (staticp): Likewise.\n\t* langhooks.h (staticp): Likewise.\n\nFrom-SVN: r85137", "tree": {"sha": "f832046097744412da69a434eeed69c6661ac35e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f832046097744412da69a434eeed69c6661ac35e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea06b1666dbe93688e73d088c07edfc14568c96f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea06b1666dbe93688e73d088c07edfc14568c96f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea06b1666dbe93688e73d088c07edfc14568c96f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea06b1666dbe93688e73d088c07edfc14568c96f/comments", "author": {"login": "codewiz", "id": 1184492, "node_id": "MDQ6VXNlcjExODQ0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1184492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codewiz", "html_url": "https://github.com/codewiz", "followers_url": "https://api.github.com/users/codewiz/followers", "following_url": "https://api.github.com/users/codewiz/following{/other_user}", "gists_url": "https://api.github.com/users/codewiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/codewiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codewiz/subscriptions", "organizations_url": "https://api.github.com/users/codewiz/orgs", "repos_url": "https://api.github.com/users/codewiz/repos", "events_url": "https://api.github.com/users/codewiz/events{/privacy}", "received_events_url": "https://api.github.com/users/codewiz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02a0b1f29e8b1eeb52e8f6ea0408b2efdd4bdfa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a0b1f29e8b1eeb52e8f6ea0408b2efdd4bdfa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a0b1f29e8b1eeb52e8f6ea0408b2efdd4bdfa8"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "00ea5ba241aa84fe21cf9b18e2939da012302799", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea06b1666dbe93688e73d088c07edfc14568c96f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea06b1666dbe93688e73d088c07edfc14568c96f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea06b1666dbe93688e73d088c07edfc14568c96f", "patch": "@@ -1,3 +1,9 @@\n+2004-07-25  Bernardo Innocenti  <bernie@develer.com>\n+\n+\t* c-common.h (c_staticp): Change return type from int to bool.\n+\t* tree.c (staticp): Likewise.\n+\t* langhooks.h (staticp): Likewise.\n+\n 2004-07-25  Bernardo Innocenti  <bernie@develer.com>\n \n \t* langhooks-def.h (lhd_staticp): Change return type from int to"}, {"sha": "6df90a4f21556ecbc9e82cedfbb6edfc127c272b", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea06b1666dbe93688e73d088c07edfc14568c96f/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea06b1666dbe93688e73d088c07edfc14568c96f/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ea06b1666dbe93688e73d088c07edfc14568c96f", "patch": "@@ -832,7 +832,7 @@ extern int vector_types_convertible_p (tree t1, tree t2);\n \n extern rtx c_expand_expr (tree, rtx, enum machine_mode, int, rtx *);\n \n-extern int c_staticp (tree);\n+extern bool c_staticp (tree);\n \n extern int c_common_unsafe_for_reeval (tree);\n "}, {"sha": "86774cf8f6d314f97821a5472d634c684939d66f", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea06b1666dbe93688e73d088c07edfc14568c96f/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea06b1666dbe93688e73d088c07edfc14568c96f/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=ea06b1666dbe93688e73d088c07edfc14568c96f", "patch": "@@ -304,7 +304,7 @@ struct lang_hooks\n   bool (*mark_addressable) (tree);\n \n   /* Hook called by staticp for language-specific tree codes.  */\n-  int (*staticp) (tree);\n+  bool (*staticp) (tree);\n \n   /* Replace the DECL_LANG_SPECIFIC data, which may be NULL, of the\n      DECL_NODE with a newly GC-allocated copy.  */"}, {"sha": "6fa13757bb9e3eea6797fefdf294c6cf550ad4df", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea06b1666dbe93688e73d088c07edfc14568c96f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea06b1666dbe93688e73d088c07edfc14568c96f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ea06b1666dbe93688e73d088c07edfc14568c96f", "patch": "@@ -1267,10 +1267,10 @@ array_type_nelts (tree type)\n \t  : fold (build2 (MINUS_EXPR, TREE_TYPE (max), max, min)));\n }\n \f\n-/* Return nonzero if arg is static -- a reference to an object in\n+/* Return true if arg is static -- a reference to an object in\n    static storage.  This is not the same as the C meaning of `static'.  */\n \n-int\n+bool\n staticp (tree arg)\n {\n   switch (TREE_CODE (arg))\n@@ -1291,7 +1291,7 @@ staticp (tree arg)\n \n     case LABEL_DECL:\n     case STRING_CST:\n-      return 1;\n+      return true;\n \n     case COMPONENT_REF:\n       /* If the thing being referenced is not a field, then it is \n@@ -1302,12 +1302,12 @@ staticp (tree arg)\n       /* If we are referencing a bitfield, we can't evaluate an\n \t ADDR_EXPR at compile time and so it isn't a constant.  */\n       if (DECL_BIT_FIELD (TREE_OPERAND (arg, 1)))\n-\treturn 0;\n+\treturn false;\n \n       return staticp (TREE_OPERAND (arg, 0));\n \n     case BIT_FIELD_REF:\n-      return 0;\n+      return false;\n \n #if 0\n        /* This case is technically correct, but results in setting\n@@ -1323,14 +1323,14 @@ staticp (tree arg)\n \t  && TREE_CODE (TREE_OPERAND (arg, 1)) == INTEGER_CST)\n \treturn staticp (TREE_OPERAND (arg, 0));\n       else\n-\treturn 0;\n+\treturn false;\n \n     default:\n       if ((unsigned int) TREE_CODE (arg)\n \t  >= (unsigned int) LAST_AND_UNUSED_TREE_CODE)\n \treturn lang_hooks.staticp (arg);\n       else\n-\treturn 0;\n+\treturn false;\n     }\n }\n \f"}]}