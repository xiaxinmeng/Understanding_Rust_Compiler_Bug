{"sha": "04af98c61b22d4bc647740299ff643d573ee28b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRhZjk4YzYxYjIyZDRiYzY0Nzc0MDI5OWZmNjQzZDU3M2VlMjhiNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-11-07T23:01:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-11-07T23:01:09Z"}, "message": "parser.c (cp_parser_unqualified_id): Handle __func__ here.\n\n\t* parser.c (cp_parser_unqualified_id): Handle __func__ here.\n\t(cp_parser_primary_expression): Not here.\n\nFrom-SVN: r217241", "tree": {"sha": "e6a1800bda06a27a0e17d60c9af6fd73793981a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6a1800bda06a27a0e17d60c9af6fd73793981a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04af98c61b22d4bc647740299ff643d573ee28b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04af98c61b22d4bc647740299ff643d573ee28b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04af98c61b22d4bc647740299ff643d573ee28b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04af98c61b22d4bc647740299ff643d573ee28b6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15babd13d671cb47e92aea313c55ecd240880a7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15babd13d671cb47e92aea313c55ecd240880a7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15babd13d671cb47e92aea313c55ecd240880a7d"}], "stats": {"total": 64, "additions": 27, "deletions": 37}, "files": [{"sha": "132b9e1b8599ad2538e30219bce469aa47c05add", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04af98c61b22d4bc647740299ff643d573ee28b6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04af98c61b22d4bc647740299ff643d573ee28b6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=04af98c61b22d4bc647740299ff643d573ee28b6", "patch": "@@ -1,3 +1,8 @@\n+2014-11-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* parser.c (cp_parser_unqualified_id): Handle __func__ here.\n+\t(cp_parser_primary_expression): Not here.\n+\n 2014-11-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR c++/63366"}, {"sha": "e1b320ab1abc4508c161fbd8c362f8215f754774", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 15, "deletions": 37, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04af98c61b22d4bc647740299ff643d573ee28b6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04af98c61b22d4bc647740299ff643d573ee28b6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=04af98c61b22d4bc647740299ff643d573ee28b6", "patch": "@@ -4502,39 +4502,9 @@ cp_parser_primary_expression (cp_parser *parser,\n \tcase RID_FUNCTION_NAME:\n \tcase RID_PRETTY_FUNCTION_NAME:\n \tcase RID_C99_FUNCTION_NAME:\n-\t  {\n-\t    non_integral_constant name;\n-\n \t    /* The symbols __FUNCTION__, __PRETTY_FUNCTION__, and\n-\t       __func__ are the names of variables -- but they are\n-\t       treated specially.  Therefore, they are handled here,\n-\t       rather than relying on the generic id-expression logic\n-\t       below.  Grammatically, these names are id-expressions.\n-\n-\t       Consume the token.  */\n-\t    token = cp_lexer_consume_token (parser->lexer);\n-\n-\t    switch (token->keyword)\n-\t      {\n-\t      case RID_FUNCTION_NAME:\n-\t\tname = NIC_FUNC_NAME;\n-\t\tbreak;\n-\t      case RID_PRETTY_FUNCTION_NAME:\n-\t\tname = NIC_PRETTY_FUNC;\n-\t\tbreak;\n-\t      case RID_C99_FUNCTION_NAME:\n-\t\tname = NIC_C99_FUNC;\n-\t\tbreak;\n-\t      default:\n-\t\tgcc_unreachable ();\n-\t      }\n-\n-\t    if (cp_parser_non_integral_constant_expression (parser, name))\n-\t      return error_mark_node;\n-\n-\t    /* Look up the name.  */\n-\t    return finish_fname (token->u.value);\n-\t  }\n+\t       __func__ are the names of variables.  */\n+\t  goto id_expression;\n \n \tcase RID_VA_ARG:\n \t  {\n@@ -4955,6 +4925,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t\t\t  bool optional_p)\n {\n   cp_token *token;\n+  tree id;\n \n   /* Peek at the next token.  */\n   token = cp_lexer_peek_token (parser->lexer);\n@@ -4963,8 +4934,6 @@ cp_parser_unqualified_id (cp_parser* parser,\n     {\n     case CPP_NAME:\n       {\n-\ttree id;\n-\n \t/* We don't know yet whether or not this will be a\n \t   template-id.  */\n \tcp_parser_parse_tentatively (parser);\n@@ -5201,10 +5170,9 @@ cp_parser_unqualified_id (cp_parser* parser,\n       }\n \n     case CPP_KEYWORD:\n-      if (token->keyword == RID_OPERATOR)\n+      switch (token->keyword)\n \t{\n-\t  tree id;\n-\n+\tcase RID_OPERATOR:\n \t  /* This could be a template-id, so we try that first.  */\n \t  cp_parser_parse_tentatively (parser);\n \t  /* Try a template-id.  */\n@@ -5234,6 +5202,16 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t    }\n \n \t  return id;\n+\n+\tcase RID_FUNCTION_NAME:\n+\tcase RID_PRETTY_FUNCTION_NAME:\n+\tcase RID_C99_FUNCTION_NAME:\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  finish_fname (token->u.value);\n+\t  return token->u.value;\n+\n+\tdefault:\n+\t  break;\n \t}\n       /* Fall through.  */\n "}, {"sha": "65dd27a87a4b3fae8ca034a924b639b83abf3790", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype-func.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04af98c61b22d4bc647740299ff643d573ee28b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-func.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04af98c61b22d4bc647740299ff643d573ee28b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-func.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-func.C?ref=04af98c61b22d4bc647740299ff643d573ee28b6", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile { target c++11 } }\n+\n+void f() {\n+  typedef decltype(__func__) T;\n+  T x = __func__;\t\t// { dg-error \"array\" }\n+}"}, {"sha": "cb8fdaeec9dc3c31a6aeb8e14970fc96844958e7", "filename": "gcc/testsuite/g++.dg/other/error34.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04af98c61b22d4bc647740299ff643d573ee28b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04af98c61b22d4bc647740299ff643d573ee28b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C?ref=04af98c61b22d4bc647740299ff643d573ee28b6", "patch": "@@ -4,3 +4,4 @@\n \n S () : str(__PRETTY_FUNCTION__) {}\t// { dg-error \"forbids declaration\" \"decl\" }\n // { dg-error \"only constructors\" \"constructor\" { target *-*-* } 5 }\n+// { dg-prune-output \"__PRETTY_FUNCTION__\" }"}]}