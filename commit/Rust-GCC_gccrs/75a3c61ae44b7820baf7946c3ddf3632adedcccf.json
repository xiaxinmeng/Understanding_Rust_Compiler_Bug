{"sha": "75a3c61ae44b7820baf7946c3ddf3632adedcccf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVhM2M2MWFlNDRiNzgyMGJhZjc5NDZjM2RkZjM2MzJhZGVkY2NjZg==", "commit": {"author": {"name": "Louis Krupp", "email": "louis.krupp@zoho.com", "date": "2018-01-16T01:09:11Z"}, "committer": {"name": "Louis Krupp", "email": "lkrupp@gcc.gnu.org", "date": "2018-01-16T01:09:11Z"}, "message": "re PR fortran/82257 (f951: Internal compiler error segmentation fault)\n\n2018-01-15  Louis Krupp  <louis.krupp@zoho.com>\n\n\tPR fortran/82257\n\t* interface.c (compare_rank): Don't try to retrieve CLASS_DATA\n\tfrom symbol marked unlimited polymorphic.\n\t* resolve.c (resolve_structure_cons): Likewise.\n\t* misc.c (gfc_typename): Don't dereference derived->components\n\tif it's NULL.\n\n2018-01-15  Louis Krupp  <louis.krupp@zoho.com>\n\n\tPR fortran/82257\n\t* gfortran.dg/unlimited_polymorphic_28.f90: New test.\n\nFrom-SVN: r256720", "tree": {"sha": "bc36aeb6e8b943718802996c56770e959baf1a07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc36aeb6e8b943718802996c56770e959baf1a07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75a3c61ae44b7820baf7946c3ddf3632adedcccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a3c61ae44b7820baf7946c3ddf3632adedcccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a3c61ae44b7820baf7946c3ddf3632adedcccf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a3c61ae44b7820baf7946c3ddf3632adedcccf/comments", "author": null, "committer": null, "parents": [{"sha": "c662b64cf93dbb8b0ef52acc9cc241afb2d6f221", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c662b64cf93dbb8b0ef52acc9cc241afb2d6f221", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c662b64cf93dbb8b0ef52acc9cc241afb2d6f221"}], "stats": {"total": 80, "additions": 76, "deletions": 4}, "files": [{"sha": "0806ecd2ec76ec734ff11259d4dcfa26fad496b8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a3c61ae44b7820baf7946c3ddf3632adedcccf/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a3c61ae44b7820baf7946c3ddf3632adedcccf/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=75a3c61ae44b7820baf7946c3ddf3632adedcccf", "patch": "@@ -1,3 +1,12 @@\n+2018-01-15  Louis Krupp  <louis.krupp@zoho.com>\n+\n+\tPR fortran/82257\n+\t* interface.c (compare_rank): Don't try to retrieve CLASS_DATA\n+\tfrom symbol marked unlimited polymorphic.\n+\t* resolve.c (resolve_structure_cons): Likewise.\n+\t* misc.c (gfc_typename): Don't dereference derived->components\n+\tif it's NULL.\n+\n 2018-01-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/54613"}, {"sha": "9e55e9dc310a96ac1a6ae289dc219d85ac409f1c", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a3c61ae44b7820baf7946c3ddf3632adedcccf/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a3c61ae44b7820baf7946c3ddf3632adedcccf/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=75a3c61ae44b7820baf7946c3ddf3632adedcccf", "patch": "@@ -754,8 +754,12 @@ compare_rank (gfc_symbol *s1, gfc_symbol *s2)\n   if (s2->attr.ext_attr & (1 << EXT_ATTR_NO_ARG_CHECK))\n     return true;\n \n-  as1 = (s1->ts.type == BT_CLASS) ? CLASS_DATA (s1)->as : s1->as;\n-  as2 = (s2->ts.type == BT_CLASS) ? CLASS_DATA (s2)->as : s2->as;\n+  as1 = (s1->ts.type == BT_CLASS\n+\t && !s1->ts.u.derived->attr.unlimited_polymorphic)\n+\t? CLASS_DATA (s1)->as : s1->as;\n+  as2 = (s2->ts.type == BT_CLASS\n+\t && !s2->ts.u.derived->attr.unlimited_polymorphic)\n+\t? CLASS_DATA (s2)->as : s2->as;\n \n   r1 = as1 ? as1->rank : 0;\n   r2 = as2 ? as2->rank : 0;"}, {"sha": "ec1f548123addd5335bdeae222e5cdf92680609a", "filename": "gcc/fortran/misc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a3c61ae44b7820baf7946c3ddf3632adedcccf/gcc%2Ffortran%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a3c61ae44b7820baf7946c3ddf3632adedcccf/gcc%2Ffortran%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmisc.c?ref=75a3c61ae44b7820baf7946c3ddf3632adedcccf", "patch": "@@ -156,7 +156,8 @@ gfc_typename (gfc_typespec *ts)\n       sprintf (buffer, \"TYPE(%s)\", ts->u.derived->name);\n       break;\n     case BT_CLASS:\n-      ts = &ts->u.derived->components->ts;\n+      if (ts->u.derived->components)\n+\tts = &ts->u.derived->components->ts;\n       if (ts->u.derived->attr.unlimited_polymorphic)\n \tsprintf (buffer, \"CLASS(*)\");\n       else"}, {"sha": "1ecfe05ed797ec7415012ee1c3d9d5c1fb2f8f8d", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a3c61ae44b7820baf7946c3ddf3632adedcccf/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a3c61ae44b7820baf7946c3ddf3632adedcccf/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=75a3c61ae44b7820baf7946c3ddf3632adedcccf", "patch": "@@ -1289,7 +1289,9 @@ resolve_structure_cons (gfc_expr *expr, int init)\n \t}\n \n       rank = comp->as ? comp->as->rank : 0;\n-      if (comp->ts.type == BT_CLASS && CLASS_DATA (comp)->as)\n+      if (comp->ts.type == BT_CLASS\n+\t  && !comp->ts.u.derived->attr.unlimited_polymorphic\n+\t  && CLASS_DATA (comp)->as)\n  \trank = CLASS_DATA (comp)->as->rank;\n \n       if (cons->expr->expr_type != EXPR_NULL && rank != cons->expr->rank"}, {"sha": "2933f83c32f9d5ae2651841063f9327203921187", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a3c61ae44b7820baf7946c3ddf3632adedcccf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a3c61ae44b7820baf7946c3ddf3632adedcccf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75a3c61ae44b7820baf7946c3ddf3632adedcccf", "patch": "@@ -1,3 +1,8 @@\n+2018-01-15  Louis Krupp  <louis.krupp@zoho.com>\n+\n+\tPR fortran/82257\n+\t* gfortran.dg/unlimited_polymorphic_28.f90: New test.\n+\n 2018-01-15  Martin Sebor  <msebor@redhat.com>\n \n \tPR testsuite/83869"}, {"sha": "b474a243233d997a13952c64677037c2d04f605b", "filename": "gcc/testsuite/gfortran.dg/unlimited_polymorphic_28.f90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a3c61ae44b7820baf7946c3ddf3632adedcccf/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_28.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a3c61ae44b7820baf7946c3ddf3632adedcccf/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_28.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_28.f90?ref=75a3c61ae44b7820baf7946c3ddf3632adedcccf", "patch": "@@ -0,0 +1,51 @@\n+! { dg-do compile }\n+!\n+! PR 82257: ICE in gfc_typename(), compare_rank(), resolve_structure_cons()\n+\n+module m1\n+\n+implicit none\n+\n+  type,abstract :: c_base\n+  contains\n+    procedure(i1),private,deferred :: f_base\n+  end type c_base\n+\n+  abstract interface\n+    function i1(this) result(res)\n+      import\n+      class(c_base),intent(IN) :: this\n+      class(c_base), pointer :: res\n+    end function i1\n+  end interface\n+\n+  type,abstract,extends(c_base) :: c_derived\n+  contains\n+    procedure :: f_base => f_derived ! { dg-error \"Type mismatch in function result \\\\(CLASS\\\\(\\\\*\\\\)/CLASS\\\\(c_base\\\\)\\\\)\" }\n+  end type c_derived\n+\n+contains\n+\n+  function f_derived(this) result(res) ! { dg-error \"must be dummy, allocatable or pointer\" }\n+    class(c_derived), intent(IN) :: this\n+    class(*) :: res\n+  end function f_derived\n+\n+end module m1\n+\n+module m2\n+\n+implicit none\n+\n+  type :: t\n+  contains\n+    procedure :: p\n+  end type t\n+\n+contains\n+\n+  class(*) function p(this) ! { dg-error \"must be dummy, allocatable or pointer\" }\n+    class(t), intent(IN) :: this\n+  end function p\n+\n+end module m2"}]}