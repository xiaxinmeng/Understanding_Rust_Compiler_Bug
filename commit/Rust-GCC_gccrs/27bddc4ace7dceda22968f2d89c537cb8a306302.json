{"sha": "27bddc4ace7dceda22968f2d89c537cb8a306302", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdiZGRjNGFjZTdkY2VkYTIyOTY4ZjJkODljNTM3Y2I4YTMwNjMwMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2016-08-07T10:50:16Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-08-07T10:50:16Z"}, "message": "tree-ssa-threadbackward.c: Include tree-inline.h\n\n\n\t* tree-ssa-threadbackward.c: Include tree-inline.h\n\t(profitable_jump_thread_path): Use estimate_num_insns to estimate\n\tsize of copied block; for cold paths reduce duplication.\n\t(find_jump_threads_backwards): Remove redundant tests.\n\t(pass_thread_jumps::gate): Enable for -Os.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Update testcase.\n\nFrom-SVN: r239219", "tree": {"sha": "b29e66caf101d11bc66ce183e3614bd567fca32d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b29e66caf101d11bc66ce183e3614bd567fca32d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27bddc4ace7dceda22968f2d89c537cb8a306302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27bddc4ace7dceda22968f2d89c537cb8a306302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27bddc4ace7dceda22968f2d89c537cb8a306302", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27bddc4ace7dceda22968f2d89c537cb8a306302/comments", "author": null, "committer": null, "parents": [{"sha": "4a9f8a9f7c5a75c266bba5be0c08071d18ed23c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a9f8a9f7c5a75c266bba5be0c08071d18ed23c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a9f8a9f7c5a75c266bba5be0c08071d18ed23c6"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "9f1caad8c02f1e4dce38c38824f14d0c7a4bc97c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bddc4ace7dceda22968f2d89c537cb8a306302/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bddc4ace7dceda22968f2d89c537cb8a306302/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27bddc4ace7dceda22968f2d89c537cb8a306302", "patch": "@@ -1,3 +1,11 @@\n+2016-08-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-ssa-threadbackward.c: Include tree-inline.h\n+\t(profitable_jump_thread_path): Use estimate_num_insns to estimate\n+\tsize of copied block; for cold paths reduce duplication.\n+\t(find_jump_threads_backwards): Remove redundant tests.\n+\t(pass_thread_jumps::gate): Enable for -Os.\n+\n 2016-08-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/72816"}, {"sha": "fece69cab09319f7dd8220300e72fc6739efb7fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bddc4ace7dceda22968f2d89c537cb8a306302/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bddc4ace7dceda22968f2d89c537cb8a306302/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27bddc4ace7dceda22968f2d89c537cb8a306302", "patch": "@@ -1,3 +1,7 @@\n+2016-08-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Update testcase.\n+\n 2016-08-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/72816"}, {"sha": "1a4089fcdfd34e68ff3dfcad270886d174b9a939", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bddc4ace7dceda22968f2d89c537cb8a306302/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bddc4ace7dceda22968f2d89c537cb8a306302/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c?ref=27bddc4ace7dceda22968f2d89c537cb8a306302", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-thread1-stats -fdump-tree-thread2-stats -fdump-tree-thread3-stats -fdump-tree-dom3-stats -fdump-tree-vrp2-stats\" } */\n+/* { dg-options \"-O2 -fdump-tree-thread1-stats -fdump-tree-thread2-stats -fdump-tree-thread3-stats -fdump-tree-dom3-stats -fdump-tree-vrp2-stats -fno-guess-branch-probability\" } */\n /* { dg-final { scan-tree-dump \"Jumps threaded: 16\"  \"thread1\" } } */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 11\" \"thread2\" } } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 6\" \"thread2\" } } */\n /* { dg-final { scan-tree-dump \"Jumps threaded: 3\" \"thread3\" } } */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"dom3\" } } */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"vrp2\" } } */"}, {"sha": "234ce50d10ca175e760c57bf8dcadeb1b2b53893", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27bddc4ace7dceda22968f2d89c537cb8a306302/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27bddc4ace7dceda22968f2d89c537cb8a306302/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=27bddc4ace7dceda22968f2d89c537cb8a306302", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n+#include \"tree-inline.h\"\n \n static int max_threaded_paths;\n \n@@ -223,7 +224,7 @@ profitable_jump_thread_path (vec<basic_block, va_gc> *&path,\n \t\t  && !(gimple_code (stmt) == GIMPLE_ASSIGN\n \t\t       && gimple_assign_rhs_code (stmt) == ASSERT_EXPR)\n \t\t  && !is_gimple_debug (stmt))\n-\t\t++n_insns;\n+\t        n_insns += estimate_num_insns (stmt, &eni_size_weights);\n \t    }\n \n \t  /* We do not look at the block with the threaded branch\n@@ -251,13 +252,15 @@ profitable_jump_thread_path (vec<basic_block, va_gc> *&path,\n \tthreaded_through_latch = true;\n     }\n \n+  gimple *stmt = get_gimple_control_stmt ((*path)[0]);\n+  gcc_assert (stmt);\n+\n   /* We are going to remove the control statement at the end of the\n      last block in the threading path.  So don't count it against our\n      statement count.  */\n-  n_insns--;\n \n-  gimple *stmt = get_gimple_control_stmt ((*path)[0]);\n-  gcc_assert (stmt);\n+  n_insns-= estimate_num_insns (stmt, &eni_size_weights);\n+\n   /* We have found a constant value for ARG.  For GIMPLE_SWITCH\n      and GIMPLE_GOTO, we use it as-is.  However, for a GIMPLE_COND\n      we need to substitute, fold and simplify so we can determine\n@@ -303,12 +306,24 @@ profitable_jump_thread_path (vec<basic_block, va_gc> *&path,\n       return NULL;\n     }\n \n-  if (n_insns >= PARAM_VALUE (PARAM_MAX_FSM_THREAD_PATH_INSNS))\n+  if (optimize_edge_for_speed_p (taken_edge))\n+    {\n+      if (n_insns >= PARAM_VALUE (PARAM_MAX_FSM_THREAD_PATH_INSNS))\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file, \"FSM jump-thread path not considered: \"\n+\t\t     \"the number of instructions on the path \"\n+\t\t     \"exceeds PARAM_MAX_FSM_THREAD_PATH_INSNS.\\n\");\n+\t  path->pop ();\n+\t  return NULL;\n+\t}\n+    }\n+  else if (n_insns > 1)\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"FSM jump-thread path not considered: \"\n-\t\t \"the number of instructions on the path \"\n-\t\t \"exceeds PARAM_MAX_FSM_THREAD_PATH_INSNS.\\n\");\n+\t\t \"duplication of %i insns is needed and optimizing for size.\\n\",\n+\t\t n_insns);\n       path->pop ();\n       return NULL;\n     }\n@@ -612,10 +627,6 @@ fsm_find_control_statement_thread_paths (tree name,\n void  \n find_jump_threads_backwards (basic_block bb)\n {     \n-  if (!flag_expensive_optimizations\n-      || optimize_function_for_size_p (cfun))\n-    return;\n-\n   gimple *stmt = get_gimple_control_stmt (bb);\n   if (!stmt)\n     return;\n@@ -680,8 +691,7 @@ class pass_thread_jumps : public gimple_opt_pass\n bool\n pass_thread_jumps::gate (function *fun ATTRIBUTE_UNUSED)\n {\n-  return (flag_expensive_optimizations\n-\t  && ! optimize_function_for_size_p (cfun));\n+  return flag_expensive_optimizations;\n }\n \n "}]}