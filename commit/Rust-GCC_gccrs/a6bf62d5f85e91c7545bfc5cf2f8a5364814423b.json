{"sha": "a6bf62d5f85e91c7545bfc5cf2f8a5364814423b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZiZjYyZDVmODVlOTFjNzU0NWJmYzVjZjJmOGE1MzY0ODE0NDIzYg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-03-04T11:09:11Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-03-04T11:09:11Z"}, "message": "[AArch64][testsuite] PR target/70004: Remove check using undefined behaviour\n\n\tPR target/70004\n\t* gcc.target/aarch64/scalar_shift_1.c: (test_corners_sisd_di):\n\tDelete.\n\t(test_corners_sisd_si): Likewise.\n\t(main): Remove checks of the above.\n\t* gcc.target/aarch64/shift_wide_invalid_1.c: New test.\n\nFrom-SVN: r233964", "tree": {"sha": "f901b7ea9a33c8cf9a887102b795c44cff2244f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f901b7ea9a33c8cf9a887102b795c44cff2244f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6bf62d5f85e91c7545bfc5cf2f8a5364814423b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6bf62d5f85e91c7545bfc5cf2f8a5364814423b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6bf62d5f85e91c7545bfc5cf2f8a5364814423b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6bf62d5f85e91c7545bfc5cf2f8a5364814423b/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae4cdc6a98b6a5a9b4649cd24f36c36484868b3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae4cdc6a98b6a5a9b4649cd24f36c36484868b3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae4cdc6a98b6a5a9b4649cd24f36c36484868b3c"}], "stats": {"total": 77, "additions": 45, "deletions": 32}, "files": [{"sha": "76c10ed849c90d260975ddcd97c7f6f010be1090", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bf62d5f85e91c7545bfc5cf2f8a5364814423b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bf62d5f85e91c7545bfc5cf2f8a5364814423b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a6bf62d5f85e91c7545bfc5cf2f8a5364814423b", "patch": "@@ -1,3 +1,12 @@\n+2016-03-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/70004\n+\t* gcc.target/aarch64/scalar_shift_1.c: (test_corners_sisd_di):\n+\tDelete.\n+\t(test_corners_sisd_si): Likewise.\n+\t(main): Remove checks of the above.\n+\t* gcc.target/aarch64/shift_wide_invalid_1.c: New test.\n+\n 2016-03-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/Wno-frame-address.c: Skip on IA-64."}, {"sha": "7be1b12a75bf9f201644aef471c5edb99979c0c5", "filename": "gcc/testsuite/gcc.target/aarch64/scalar_shift_1.c", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bf62d5f85e91c7545bfc5cf2f8a5364814423b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_shift_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bf62d5f85e91c7545bfc5cf2f8a5364814423b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_shift_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_shift_1.c?ref=a6bf62d5f85e91c7545bfc5cf2f8a5364814423b", "patch": "@@ -181,34 +181,6 @@ test_ashift_right_int_si (Int32x1 b, Int32x1 c)\n /* { dg-final { scan-assembler \"asr\\tw\\[0-9\\]+,\\ w\\[0-9\\]+,\\ 4\" } } */\n /* { dg-final { scan-assembler \"asr\\tw\\[0-9\\]+,\\ w\\[0-9\\]+,\\ w\\[0-9\\]+\" } } */\n \n-Int64x1\n-test_corners_sisd_di (Int64x1 b)\n-{\n-  force_simd_di (b);\n-  b = b >> 63;\n-  force_simd_di (b);\n-  b = b >> 0;\n-  b += b >> 65; /* { dg-warning \"right shift count >= width of type\" } */\n-\n-  return b;\n-}\n-/* { dg-final { scan-assembler \"sshr\\td\\[0-9\\]+,\\ d\\[0-9\\]+,\\ 63\" } } */\n-\n-Int32x1\n-test_corners_sisd_si (Int32x1 b)\n-{\n-  force_simd_si (b);\n-  b = b >> 31;\n-  force_simd_si (b);\n-  b = b >> 0;\n-  b += b >> 33; /* { dg-warning \"right shift count >= width of type\" } */\n-\n-  return b;\n-}\n-/* { dg-final { scan-assembler \"sshr\\tv\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s,\\ 31\" } } */\n-\n-\n-\n #define CHECK(var,val) \\\n do                     \\\n   {                    \\\n@@ -236,8 +208,6 @@ main ()\n   CHECK (x, 0xffffffff21524110ull);\n   x = test_ashift_right_sisd_di (x, 8);\n   CHECK (x, 0xffffffffffff2152ull);\n-  x = test_corners_sisd_di (x);\n-  CHECK (x, 0xfffffffffffffffeull);\n \n   y = test_lshift_left_sisd_si (y, 4);\n   CHECK (y, 0xadbeef00);\n@@ -252,8 +222,6 @@ main ()\n   CHECK (y, 0xffff5241);\n   y = test_ashift_right_sisd_si (y, 4);\n   CHECK (y, 0xffffff52);\n-  y = test_corners_sisd_si (y);\n-  CHECK (y, 0xfffffffe);\n \n   return 0;\n }"}, {"sha": "6b71cb580924be35d2b9d2283b6262f5d2ce9729", "filename": "gcc/testsuite/gcc.target/aarch64/shift_wide_invalid_1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bf62d5f85e91c7545bfc5cf2f8a5364814423b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshift_wide_invalid_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bf62d5f85e91c7545bfc5cf2f8a5364814423b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshift_wide_invalid_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshift_wide_invalid_1.c?ref=a6bf62d5f85e91c7545bfc5cf2f8a5364814423b", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+/* These contain undefined behavior but may trigger edge cases in the\n+   vector shift patterns.  We don't check for their generation, we only\n+   care about not ICEing.  */\n+\n+typedef long long int Int64x1;\n+typedef int Int32x1;\n+\n+#define force_simd_di(v) asm volatile (\"mov %d0, %1.d[0]\" : \"=w\"(v) : \"w\"(v) :)\n+#define force_simd_si(v) asm volatile (\"mov %s0, %1.s[0]\" : \"=w\"(v) : \"w\"(v) :)\n+\n+Int64x1\n+foo_di (Int64x1 b)\n+{\n+  force_simd_di (b);\n+  b = b >> 63;\n+  force_simd_di (b);\n+  b = b >> 0;\n+  b += b >> 65; /* { dg-warning \"right shift count >= width of type\" } */\n+\n+  return b;\n+}\n+\n+Int32x1\n+foo_si (Int32x1 b)\n+{\n+  force_simd_si (b);\n+  b = b >> 31;\n+  force_simd_si (b);\n+  b = b >> 0;\n+  b += b >> 33; /* { dg-warning \"right shift count >= width of type\" } */\n+\n+  return b;\n+}"}]}