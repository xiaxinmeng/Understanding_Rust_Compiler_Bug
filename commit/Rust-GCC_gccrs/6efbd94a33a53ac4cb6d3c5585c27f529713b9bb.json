{"sha": "6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVmYmQ5NGEzM2E1M2FjNGNiNmQzYzU1ODVjMjdmNTI5NzEzYjliYg==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2008-09-09T03:17:22Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2008-09-09T03:17:22Z"}, "message": "filter2_x.C: Declare abort.\n\n\t* g++.dg/compat/eh/filter2_x.C: Declare abort.\n\t* g++.dg/compat/eh/new1_x.C, g++.dg/compat/eh/new1_y.C: Include\n\tcstddef and use std::size_t.\n\n\t* gcc.dg/compat/compat-common.h: Define SKIP_COMPLEX_INT if\n\tSKIP_COMPLEX.  Honor SKIP_COMPLEX.\n\t* gcc.dg/compat/scalar-by-value-3_x.c,\n\tgcc.dg/compat/scalar-by-value-3_y.c,\n\tgcc.dg/compat/scalar-by-value-4_x.c,\n\tgcc.dg/compat/scalar-by-value-4_y.c,\n\tgcc.dg/compat/scalar-by-value-5.c,\n\tgcc.dg/compat/scalar-by-value-5_main.c,\n\tgcc.dg/compat/scalar-by-value-6.c,\n\tgcc.dg/compat/scalar-by-value-6_main.c,\n\tgcc.dg/compat/scalar-by-value-6_x.c,\n\tgcc.dg/compat/scalar-by-value-6_y.c,\n\tgcc.dg/compat/struct-by-value-16_x.c,\n\tgcc.dg/compat/struct-by-value-16_y.c,\n\tgcc.dg/compat/struct-by-value-16a_x.c,\n\tgcc.dg/compat/struct-by-value-16a_y.c,\n\tgcc.dg/compat/struct-by-value-17_x.c,\n\tgcc.dg/compat/struct-by-value-17_y.c,\n\tgcc.dg/compat/struct-by-value-17a_x.c,\n\tgcc.dg/compat/struct-by-value-17a_y.c,\n\tgcc.dg/compat/struct-by-value-18_x.c,\n\tgcc.dg/compat/struct-by-value-18_y.c,\n\tgcc.dg/compat/struct-by-value-18a_x.c,\n\tgcc.dg/compat/struct-by-value-18a_y.c,\n\tgcc.dg/compat/struct-layout-1.h,\n\tgcc.dg/compat/scalar-return-3_x.c,\n\tgcc.dg/compat/scalar-return-3_y.c,\n\tgcc.dg/compat/scalar-return-4_x.c,\n\tgcc.dg/compat/scalar-return-4_y.c: Honor SKIP_COMPLEX.\n\n\t* gcc.dg/compat/scalar-by-value-y.h: Use stdarg.h for non-GCC\n\tcompilers.\n\n\t* gcc.dg/compat/struct-by-value-22_y.c,\n\tgcc.dg/compat/struct-by-value-22_main.c,\n\tgcc.dg/compat/struct-by-value-22_x.c: Honor SKIP_VLA_IN_STRUCT.\n\n\t* lib/c-compat.exp (compat_setup_dfp): Check the compiler under test\n\tfirst.\n\t* lib/compat.exp: Document COMPLEX and VLA_IN_STRUCT skips.\n\nCo-Authored-By: Mark Mitchell <mark@codesourcery.com>\n\nFrom-SVN: r140137", "tree": {"sha": "39184e658b9c868e9443f3aeb04905a05c71aa37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39184e658b9c868e9443f3aeb04905a05c71aa37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/comments", "author": null, "committer": null, "parents": [{"sha": "fa3f957a2e1e5113b03d07ea9883a9b43971d02f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa3f957a2e1e5113b03d07ea9883a9b43971d02f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa3f957a2e1e5113b03d07ea9883a9b43971d02f"}], "stats": {"total": 244, "additions": 205, "deletions": 39}, "files": [{"sha": "e5ee8233db0a0ff487425868340aa798eada3814", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -1,3 +1,51 @@\n+2008-09-08  Daniel Jacobowitz  <dan@codesourcery.com>\n+\t    Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/compat/eh/filter2_x.C: Declare abort.\n+\t* g++.dg/compat/eh/new1_x.C, g++.dg/compat/eh/new1_y.C: Include\n+\tcstddef and use std::size_t.\n+\n+\t* gcc.dg/compat/compat-common.h: Define SKIP_COMPLEX_INT if\n+\tSKIP_COMPLEX.  Honor SKIP_COMPLEX.\n+\t* gcc.dg/compat/scalar-by-value-3_x.c,\n+\tgcc.dg/compat/scalar-by-value-3_y.c,\n+\tgcc.dg/compat/scalar-by-value-4_x.c,\n+\tgcc.dg/compat/scalar-by-value-4_y.c,\n+\tgcc.dg/compat/scalar-by-value-5.c,\n+\tgcc.dg/compat/scalar-by-value-5_main.c,\n+\tgcc.dg/compat/scalar-by-value-6.c,\n+\tgcc.dg/compat/scalar-by-value-6_main.c,\n+\tgcc.dg/compat/scalar-by-value-6_x.c,\n+\tgcc.dg/compat/scalar-by-value-6_y.c,\n+\tgcc.dg/compat/struct-by-value-16_x.c,\n+\tgcc.dg/compat/struct-by-value-16_y.c,\n+\tgcc.dg/compat/struct-by-value-16a_x.c,\n+\tgcc.dg/compat/struct-by-value-16a_y.c,\n+\tgcc.dg/compat/struct-by-value-17_x.c,\n+\tgcc.dg/compat/struct-by-value-17_y.c,\n+\tgcc.dg/compat/struct-by-value-17a_x.c,\n+\tgcc.dg/compat/struct-by-value-17a_y.c,\n+\tgcc.dg/compat/struct-by-value-18_x.c,\n+\tgcc.dg/compat/struct-by-value-18_y.c,\n+\tgcc.dg/compat/struct-by-value-18a_x.c,\n+\tgcc.dg/compat/struct-by-value-18a_y.c,\n+\tgcc.dg/compat/struct-layout-1.h,\n+\tgcc.dg/compat/scalar-return-3_x.c,\n+\tgcc.dg/compat/scalar-return-3_y.c,\n+\tgcc.dg/compat/scalar-return-4_x.c,\n+\tgcc.dg/compat/scalar-return-4_y.c: Honor SKIP_COMPLEX.\n+\n+\t* gcc.dg/compat/scalar-by-value-y.h: Use stdarg.h for non-GCC\n+\tcompilers.\n+\n+\t* gcc.dg/compat/struct-by-value-22_y.c,\n+\tgcc.dg/compat/struct-by-value-22_main.c,\n+\tgcc.dg/compat/struct-by-value-22_x.c: Honor SKIP_VLA_IN_STRUCT.\n+\n+\t* lib/c-compat.exp (compat_setup_dfp): Check the compiler under test\n+\tfirst.\n+\t* lib/compat.exp: Document COMPLEX and VLA_IN_STRUCT skips.\n+\n 2008-09-08  Andy Hutchinson  <hutchinsonandy@aim.com>\n \n \t* gcc.dg/struct/wo_prof_escape_substr_value.c: Limit allocation"}, {"sha": "287ffc7bd89dbe4983aad87c0271a26fe7697f93", "filename": "gcc/testsuite/g++.dg/compat/eh/filter2_x.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter2_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter2_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Ffilter2_x.C?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -1,6 +1,8 @@\n #include <exception>\n #include <cstdlib>\n \n+extern \"C\" void abort (void);\n+\n extern void my_terminate (void);\n extern void ex_test (void);\n "}, {"sha": "1212871708947472ccc217a0643a42871617e0f7", "filename": "gcc/testsuite/g++.dg/compat/eh/new1_x.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_x.C?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -1,9 +1,10 @@\n #include <new>\n+#include <cstddef>\n \n extern \"C\" void exit (int);\n extern \"C\" void abort (void);\n \n-extern void * operator new[] (size_t s) throw (std::bad_alloc);\n+extern void * operator new[] (std::size_t s) throw (std::bad_alloc);\n extern void operator delete[] (void *p) throw ();\n \n struct A"}, {"sha": "fbe0e214591d91b0134b9ed3cf0a93fb0db33633", "filename": "gcc/testsuite/g++.dg/compat/eh/new1_y.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Feh%2Fnew1_y.C?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -1,9 +1,10 @@\n #include <new>\n+#include <cstddef>\n \n extern int ret;\n \n void *ptr;\n-void * operator new[] (size_t s) throw (std::bad_alloc)\n+void * operator new[] (std::size_t s) throw (std::bad_alloc)\n {\n   ptr = operator new (s);\n   return ptr;"}, {"sha": "40d4e08f9f179c7efaa7767724ba19eae4677bf6", "filename": "gcc/testsuite/gcc.dg/compat/compat-common.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fcompat-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fcompat-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fcompat-common.h?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -24,6 +24,13 @@\n #define DEBUG_FINI\n #endif\n \n+#ifdef SKIP_COMPLEX\n+#ifndef SKIP_COMPLEX_INT\n+#define SKIP_COMPLEX_INT\n+#endif\n+#endif\n+\n+#ifndef SKIP_COMPLEX\n #ifdef __GNUC__\n #define CINT(x, y) (x + y * __extension__ 1i)\n #define CDBL(x, y) (x + y * __extension__ 1i)\n@@ -38,6 +45,7 @@\n #endif\n #define CDBL(x, y) (x + y * _Complex_I)\n #endif\n+#endif\n \n extern void abort (void);\n extern int fails;"}, {"sha": "e63f5fd389f5b32ca98256796e88e728a2704a57", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-3_x.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-3_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-3_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-3_x.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -144,13 +144,15 @@ testit##NAME (void)\t\t\t\t\t\t\\\n   DEBUG_NL;\t\t\t\t\t\t\t\\\n }\n \n+#ifndef SKIP_COMPLEX\n #ifndef SKIP_COMPLEX_INT\n T(ci, _Complex int, CINT (2, 3))\n T(cl, _Complex long, CINT (3, 4))\n T(cll, _Complex long long, CINT (5, 6))\n #endif\n T(cd, _Complex double, CDBL (7.0, 8.0))\n T(cld, _Complex long double, CDBL (8.0, 9.0))\n+#endif\n \n #undef T\n \n@@ -161,13 +163,15 @@ DEBUG_INIT\n \n #define T(NAME) testit##NAME ();\n \n+#ifndef SKIP_COMPLEX\n #ifndef SKIP_COMPLEX_INT\n T(ci)\n T(cl)\n T(cll)\n #endif\n T(cd)\n T(cld)\n+#endif\n \n DEBUG_FINI\n "}, {"sha": "d470ef605dae9dddd59792c2c0d28f3f58507e55", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-3_y.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-3_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-3_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-3_y.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -84,10 +84,12 @@ testva##NAME (int n, ...)\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n \n+#ifndef SKIP_COMPLEX\n #ifndef SKIP_COMPLEX_INT\n T(ci, _Complex int, CINT (2, 3))\n T(cl, _Complex long, CINT (3, 4))\n T(cll, _Complex long long, CINT (5, 6))\n #endif\n T(cd, _Complex double, CDBL (7.0, 8.0))\n T(cld, _Complex long double, CDBL (8.0, 9.0))\n+#endif"}, {"sha": "a4e73c9fdb6267a7793774a405322a6bedc5df8a", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-4_x.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-4_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-4_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-4_x.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -68,11 +68,13 @@ testit##NAME (void)\t\t\t\t\t\t\\\n   DEBUG_NL;\t\t\t\t\t\t\t\\\n }\n \n+#ifndef SKIP_COMPLEX\n #ifndef SKIP_COMPLEX_INT\n T(cc, _Complex char, CINT (0, 1))\n T(cs, _Complex short, CINT (1, 2))\n #endif\n T(cf, _Complex float, CDBL (6.0, 7.0))\n+#endif\n \n #undef T\n \n@@ -83,11 +85,13 @@ DEBUG_INIT\n \n #define T(NAME) testit##NAME ();\n \n+#ifndef SKIP_COMPLEX\n #ifndef SKIP_COMPLEX_INT\n T(cc)\n T(cs)\n #endif\n T(cf)\n+#endif\n \n DEBUG_FINI\n "}, {"sha": "e0fa7053996f6f310f0dbdb8da2281a88e8f373f", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-4_y.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-4_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-4_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-4_y.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -67,8 +67,10 @@ test##NAME (TYPE x01, TYPE x02, TYPE x03, TYPE x04,\t\t\\\n   check##NAME (x16, 16);\t\t\t\t\t\\\n }\n \n+#ifndef SKIP_COMPLEX\n #ifndef SKIP_COMPLEX_INT\n T(cc, _Complex char, CINT (0, 1))\n T(cs, _Complex short, CINT (1, 2))\n #endif\n T(cf, _Complex float, CDBL (6.0, 7.0))\n+#endif"}, {"sha": "1c336d81ab52be098fa3d88f255856187d246dda", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-5.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-5.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -2,15 +2,21 @@ TEST_FUNCS (longlong_i, long long, int,\n \t    1234LL, -987)\n TEST_FUNCS (longlong_d, long long, double,\n \t    1234LL, -987.0)\n+#ifndef SKIP_COMPLEX\n+#ifndef SKIP_COMPLEX_INT\n TEST_FUNCS (complexint_i, _Complex int, int,\n \t    1234 + 567i, -987)\n TEST_FUNCS (complexint_d, _Complex int, double,\n \t    1234 + 567i, -987.0)\n+#endif\n TEST_FUNCS (complexdouble_i, _Complex double, int,\n \t    1234.0 + 567.0i, -987)\n TEST_FUNCS (complexdouble_d, _Complex double, double,\n \t    1234.0 + 567.0i, -987.0)\n+#ifndef SKIP_COMPLEX_INT\n TEST_FUNCS (complexlonglong_i, _Complex long long, int,\n \t    1234LL + 567LLi, -987)\n TEST_FUNCS (complexlonglong_d, _Complex long long, double,\n \t    1234LL + 567LLi, -987.0)\n+#endif\n+#endif"}, {"sha": "d29597e3d04be914fc85745373910057ea9614e9", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-5_main.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-5_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-5_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-5_main.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -16,6 +16,7 @@ int main (void)\n {\n   longlong_i_doit ();\n   longlong_d_doit ();\n+#ifndef SKIP_COMPLEX\n #ifndef SKIP_COMPLEX_INT\n   complexint_i_doit ();\n   complexint_d_doit ();\n@@ -25,6 +26,7 @@ int main (void)\n #ifndef SKIP_COMPLEX_INT\n   complexlonglong_i_doit ();\n   complexlonglong_d_doit ();\n+#endif\n #endif\n   exit (0);\n }"}, {"sha": "af65398f71e4f7d043e2f43618b178b15e529871", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-6.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-6.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -1,4 +1,6 @@\n TEST_FUNCS (longdouble_i, long double, int, d, -987)\n TEST_FUNCS (longdouble_d, long double, double, d, -987.0)\n+#ifndef SKIP_COMPLEX\n TEST_FUNCS (complexlongdouble_i, _Complex long double, int, cd, -987)\n TEST_FUNCS (complexlongdouble_d, _Complex long double, double, cd, -987.0)\n+#endif"}, {"sha": "f6b3c1d8a8ee34d063836e570a527927667f02de", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-6_main.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-6_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-6_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-6_main.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -6,14 +6,18 @@\n extern void exit (int);\n extern void longdouble_i_doit (void);\n extern void longdouble_d_doit (void);\n+#ifndef SKIP_COMPLEX\n extern void complexlongdouble_i_doit (void);\n extern void complexlongdouble_d_doit (void);\n+#endif\n \n int main (void)\n {\n   longdouble_i_doit ();\n   longdouble_d_doit ();\n+#ifndef SKIP_COMPLEX\n   complexlongdouble_i_doit ();\n   complexlongdouble_d_doit ();\n+#endif\n   exit (0);\n }"}, {"sha": "27aa48fbe83199a078f55b4a01800fa080403314", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-6_x.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-6_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-6_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-6_x.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -1,6 +1,8 @@\n #include \"scalar-by-value-x.h\"\n \n extern long double d;\n+#ifndef SKIP_COMPLEX\n extern _Complex long double cd;\n+#endif\n \n #include \"scalar-by-value-6.c\""}, {"sha": "2e9aed2821ffffa0cad92f31590cd83330ce834a", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-6_y.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-6_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-6_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-6_y.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -1,6 +1,8 @@\n #include \"scalar-by-value-y.h\"\n \n long double d = 1234.0L + 0x0.abcdp-70L;\n+#ifndef SKIP_COMPLEX\n _Complex long double cd = 234.0L + 0x0.abcp-70L + 567.0Li +0x0defp-70Li;\n+#endif\n \n #include \"scalar-by-value-6.c\""}, {"sha": "e181a7e34e5d32cb17c2189c4b5031b9e91e7e96", "filename": "gcc/testsuite/gcc.dg/compat/scalar-by-value-y.h", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-y.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-y.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-by-value-y.h?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -1,5 +1,14 @@\n extern void abort (void);\n \n+#ifdef __GNUC__\n+#define va_list __builtin_va_list\n+#define va_start __builtin_va_start\n+#define va_arg __builtin_va_arg\n+#define va_end __builtin_va_end\n+#else\n+#include <stdarg.h>\n+#endif\n+\n #if USE_MEMCMP\n /* For comparing vectors.  */\n #define TEST_FUNCS(NAME, TYPE, PADT, VAL, VAL2) \\\n@@ -115,22 +124,22 @@ void NAME##_f9 (PADT z0, PADT z1, PADT z2, PADT z3, PADT z4, PADT z5,\t\\\n \t\t\t\t\t\t\t\t\t\\\n void NAME##_fv (int n, ...)\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  __builtin_va_list ap;\t\t\t\t\t\t\t\\\n+  va_list ap;\t\t\t\t\t\t\t\t\\\n   TYPE x;\t\t\t\t\t\t\t\t\\\n-  __builtin_va_start (ap, n);\t\t\t\t\t\t\\\n+  va_start (ap, n);\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   while (n-- != 0)\t\t\t\t\t\t\t\\\n-    if (__builtin_va_arg (ap, PADT) != (PADT) 0)\t\t\t\\\n+    if (va_arg (ap, PADT) != (PADT) 0)\t\t\t\t\t\\\n       abort ();\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  x = __builtin_va_arg (ap, TYPE);\t\t\t\t\t\\\n+  x = va_arg (ap, TYPE);\t\t\t\t\t\t\\\n   if (memcmp (&x, &VAL, sizeof (x)) != 0 )\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  if (__builtin_va_arg (ap, PADT) != VAL2)\t\t\t\t\\\n+  if (va_arg (ap, PADT) != VAL2)\t\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  __builtin_va_end (ap);\t\t\t\t\t\t\\\n+  va_end (ap);\t\t\t\t\t\t\t\t\\\n }\n \n #else\n@@ -248,21 +257,21 @@ void NAME##_f9 (PADT z0, PADT z1, PADT z2, PADT z3, PADT z4, PADT z5,\t\\\n \t\t\t\t\t\t\t\t\t\\\n void NAME##_fv (int n, ...)\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  __builtin_va_list ap;\t\t\t\t\t\t\t\\\n+  va_list ap;\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  __builtin_va_start (ap, n);\t\t\t\t\t\t\\\n+  va_start (ap, n);\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   while (n-- != 0)\t\t\t\t\t\t\t\\\n-    if (__builtin_va_arg (ap, PADT) != (PADT) 0)\t\t\t\\\n+    if (va_arg (ap, PADT) != (PADT) 0)\t\t\t\t\t\\\n       abort ();\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  if (__builtin_va_arg (ap, TYPE) != VAL)\t\t\t\t\\\n+  if (va_arg (ap, TYPE) != VAL)\t\t\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  if (__builtin_va_arg (ap, PADT) != VAL2)\t\t\t\t\\\n+  if (va_arg (ap, PADT) != VAL2)\t\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  __builtin_va_end (ap);\t\t\t\t\t\t\\\n+  va_end (ap);\t\t\t\t\t\t\t\t\\\n }\n \n #endif"}, {"sha": "5b33ce880334eba2814fc8eb5aaf7b90022c4533", "filename": "gcc/testsuite/gcc.dg/compat/scalar-return-3_x.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-3_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-3_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-3_x.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -83,13 +83,15 @@ testit##NAME (void)\t\t\t\t\t\t\\\n   DEBUG_NL;\t\t\t\t\t\t\t\\\n }\n \n+#ifndef SKIP_COMPLEX\n #ifndef SKIP_COMPLEX_INT\n T(ci, _Complex int, CINT (2, 3))\n T(cl, _Complex long, CINT (3, 4))\n T(cll, _Complex long long, CINT (4, 5))\n #endif\n T(cd, _Complex double, CDBL (2.0, 3.0))\n T(cld, _Complex long double, CDBL (3.0, 4.0))\n+#endif\n \n #undef T\n \n@@ -100,13 +102,15 @@ DEBUG_INIT\n \n #define T(NAME) testit##NAME ();\n \n+#ifndef SKIP_COMPLEX\n #ifndef SKIP_COMPLEX_INT\n T(ci)\n T(cl)\n T(cll)\n #endif\n T(cd)\n T(cld)\n+#endif\n \n DEBUG_FINI\n "}, {"sha": "245c4c571bc36522c213901c5813e9962a998dfe", "filename": "gcc/testsuite/gcc.dg/compat/scalar-return-3_y.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-3_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-3_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-3_y.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -62,10 +62,12 @@ testva##NAME (int n, ...)\t\t\t\t\t\\\n   return rslt;\t\t\t\t\t\t\t\\\n }\n \n+#ifndef SKIP_COMPLEX\n #ifndef SKIP_COMPLEX_INT\n T(ci, _Complex int, CINT (2, 3))\n T(cl, _Complex long, CINT (3, 4))\n T(cll, _Complex long long, CINT (4, 5))\n #endif\n T(cd, _Complex double, CDBL (2.0, 3.0))\n T(cld, _Complex long double, CDBL (3.0, 4.0))\n+#endif"}, {"sha": "50305be4d351acd6520693efe6eb7cd5080ceca0", "filename": "gcc/testsuite/gcc.dg/compat/scalar-return-4_x.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-4_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-4_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-4_x.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -36,11 +36,13 @@ testit##NAME (void)\t\t\t\t\t\t\\\n   DEBUG_NL;\t\t\t\t\t\t\t\\\n }\n \n+#ifndef SKIP_COMPLEX\n #ifndef SKIP_COMPLEX_INT\n T(cc, _Complex char, CINT (0, 1))\n T(cs, _Complex short, CINT (1 + 2))\n #endif\n T(cf, _Complex float, CDBL (1.0, 2.0))\n+#endif\n \n #undef T\n \n@@ -51,11 +53,13 @@ DEBUG_INIT\n \n #define T(NAME) testit##NAME ();\n \n+#ifndef SKIP_COMPLEX\n #ifndef SKIP_COMPLEX_INT\n T(cc)\n T(cs)\n #endif\n T(cf)\n+#endif\n \n DEBUG_FINI\n "}, {"sha": "3c96856975f24b9d518348de54202b35208e19ae", "filename": "gcc/testsuite/gcc.dg/compat/scalar-return-4_y.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-4_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-4_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fscalar-return-4_y.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -37,8 +37,10 @@ test1##NAME (TYPE x01)\t\t\t\t\t\t\\\n   return x01;\t\t\t\t\t\t\t\\\n }\n \n+#ifndef SKIP_COMPLEX\n #ifndef SKIP_COMPLEX_INT\n T(cc, _Complex char, CINT (0, 1))\n T(cs, _Complex short, CINT (1, 2))\n #endif\n T(cf, _Complex float, CDBL (1.0, 2.0))\n+#endif"}, {"sha": "05e36fe26c0640f4d31e33f3bcb8922e80e7f984", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-16_x.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16_x.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -4,6 +4,7 @@\n #include \"fp-struct-check.h\"\n #include \"fp-struct-test-by-value-x.h\"\n \n+#ifndef SKIP_COMPLEX\n DEFS(cf, _Complex float)\n CHECKS(cf, _Complex float)\n \n@@ -19,7 +20,7 @@ TEST(Scf9, _Complex float)\n TEST(Scf10, _Complex float)\n TEST(Scf11, _Complex float)\n TEST(Scf12, _Complex float)\n-\n+#endif\n \n #undef T\n \n@@ -30,6 +31,7 @@ DEBUG_INIT\n \n #define T(TYPE, MTYPE) testit##TYPE ();\n \n+#ifndef SKIP_COMPLEX\n T(Scf1, _Complex float)\n T(Scf2, _Complex float)\n T(Scf3, _Complex float)\n@@ -42,7 +44,7 @@ T(Scf9, _Complex float)\n T(Scf10, _Complex float)\n T(Scf11, _Complex float)\n T(Scf12, _Complex float)\n-\n+#endif\n \n DEBUG_FINI\n "}, {"sha": "ce99a68a0c86f34d376c1ba41773caa5579ccd77", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-16_y.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16_y.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -12,6 +12,7 @@ const int test_va = 1;\n #include \"fp-struct-init.h\"\n #include \"fp-struct-test-by-value-y.h\"\n \n+#ifndef SKIP_COMPLEX\n DEFS(cf,_Complex float)\n INITS(cf, _Complex float)\n \n@@ -27,4 +28,4 @@ TEST(Scf9, _Complex float)\n TEST(Scf10, _Complex float)\n TEST(Scf11, _Complex float)\n TEST(Scf12, _Complex float)\n-\n+#endif"}, {"sha": "f563f6ea91b480cfba287bf241854f8827b31d6a", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-16a_x.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16a_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16a_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16a_x.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -4,14 +4,15 @@\n #include \"fp-struct-check.h\"\r\n #include \"fp-struct-test-by-value-x.h\"\r\n \r\n+#ifndef SKIP_COMPLEX\r\n DEFS(cf, _Complex float)\r\n CHECKS(cf, _Complex float)\r\n \r\n-\r\n TEST(Scf13, _Complex float)\r\n TEST(Scf14, _Complex float)\r\n TEST(Scf15, _Complex float)\r\n TEST(Scf16, _Complex float)\r\n+#endif\r\n \r\n #undef T\r\n \r\n@@ -22,11 +23,12 @@ DEBUG_INIT\n \r\n #define T(TYPE, MTYPE) testit##TYPE ();\r\n \r\n-\r\n+#ifndef SKIP_COMPLEX\r\n T(Scf13, _Complex float)\r\n T(Scf14, _Complex float)\r\n T(Scf15, _Complex float)\r\n T(Scf16, _Complex float)\r\n+#endif\r\n \r\n DEBUG_FINI\r\n \r"}, {"sha": "0575b3c1d81ebfefde154a4299f4ec44d59ee128", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-16a_y.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16a_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16a_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16a_y.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -12,11 +12,12 @@ const int test_va = 1;\n #include \"fp-struct-init.h\"\r\n #include \"fp-struct-test-by-value-y.h\"\r\n \r\n+#ifndef SKIP_COMPLEX\r\n DEFS(cf,_Complex float)\r\n INITS(cf, _Complex float)\r\n \r\n-\r\n TEST(Scf13, _Complex float)\r\n TEST(Scf14, _Complex float)\r\n TEST(Scf15, _Complex float)\r\n TEST(Scf16, _Complex float)\r\n+#endif\r"}, {"sha": "8c2704522436a6780f1a620a941b8e8379965064", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-17_x.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17_x.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -4,6 +4,7 @@\n #include \"fp-struct-check.h\"\n #include \"fp-struct-test-by-value-x.h\"\n \n+#ifndef SKIP_COMPLEX\n DEFS(cd, _Complex double)\n CHECKS(cd, _Complex double)\n \n@@ -19,7 +20,7 @@ TEST(Scd9, _Complex double)\n TEST(Scd10, _Complex double)\n TEST(Scd11, _Complex double)\n TEST(Scd12, _Complex double)\n-\n+#endif\n \n #undef T\n \n@@ -30,6 +31,7 @@ DEBUG_INIT\n \n #define T(TYPE, MTYPE) testit##TYPE ();\n \n+#ifndef SKIP_COMPLEX\n T(Scd1, _Complex double)\n T(Scd2, _Complex double)\n T(Scd3, _Complex double)\n@@ -42,7 +44,7 @@ T(Scd9, _Complex double)\n T(Scd10, _Complex double)\n T(Scd11, _Complex double)\n T(Scd12, _Complex double)\n-\n+#endif\n \n DEBUG_FINI\n "}, {"sha": "d05ff84075a85dfb2abff0c2f46dab2867d0a4b5", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-17_y.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17_y.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -12,6 +12,7 @@ const int test_va = 1;\n #include \"fp-struct-init.h\"\n #include \"fp-struct-test-by-value-y.h\"\n \n+#ifndef SKIP_COMPLEX\n DEFS(cd,_Complex double)\n INITS(cd, _Complex double)\n \n@@ -27,4 +28,4 @@ TEST(Scd9, _Complex double)\n TEST(Scd10, _Complex double)\n TEST(Scd11, _Complex double)\n TEST(Scd12, _Complex double)\n-\n+#endif"}, {"sha": "804b5c255658c9f15e7936bd3c23d58d5d4b8163", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-17a_x.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17a_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17a_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17a_x.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -4,14 +4,15 @@\n #include \"fp-struct-check.h\"\n #include \"fp-struct-test-by-value-x.h\"\n \n+#ifndef SKIP_COMPLEX\n DEFS(cd, _Complex double)\n CHECKS(cd, _Complex double)\n \n-\n TEST(Scd13, _Complex double)\n TEST(Scd14, _Complex double)\n TEST(Scd15, _Complex double)\n TEST(Scd16, _Complex double)\n+#endif\n \n #undef T\n \n@@ -22,11 +23,12 @@ DEBUG_INIT\n \n #define T(TYPE, MTYPE) testit##TYPE ();\n \n-\n+#ifndef SKIP_COMPLEX\n T(Scd13, _Complex double)\n T(Scd14, _Complex double)\n T(Scd15, _Complex double)\n T(Scd16, _Complex double)\n+#endif\n \n DEBUG_FINI\n "}, {"sha": "3119e54480d0394987346c369a0b587063c896ad", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-17a_y.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17a_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17a_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-17a_y.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -12,11 +12,12 @@ const int test_va = 1;\n #include \"fp-struct-init.h\"\n #include \"fp-struct-test-by-value-y.h\"\n \n+#ifndef SKIP_COMPLEX\n DEFS(cd,_Complex double)\n INITS(cd, _Complex double)\n \n-\n TEST(Scd13, _Complex double)\n TEST(Scd14, _Complex double)\n TEST(Scd15, _Complex double)\n TEST(Scd16, _Complex double)\n+#endif"}, {"sha": "aa10a6e1a1a2d811b4d8a5bb514711b766fd3d21", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-18_x.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18_x.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -4,6 +4,7 @@\n #include \"fp-struct-check.h\"\n #include \"fp-struct-test-by-value-x.h\"\n \n+#ifndef SKIP_COMPLEX\n DEFS(cld, _Complex long double)\n CHECKS(cld, _Complex long double)\n \n@@ -19,7 +20,7 @@ TEST(Scld9, _Complex long double)\n TEST(Scld10, _Complex long double)\n TEST(Scld11, _Complex long double)\n TEST(Scld12, _Complex long double)\n-\n+#endif\n \n #undef T\n \n@@ -30,6 +31,7 @@ DEBUG_INIT\n \n #define T(TYPE, MTYPE) testit##TYPE ();\n \n+#ifndef SKIP_COMPLEX\n T(Scld1, _Complex long double)\n T(Scld2, _Complex long double)\n T(Scld3, _Complex long double)\n@@ -42,7 +44,7 @@ T(Scld9, _Complex long double)\n T(Scld10, _Complex long double)\n T(Scld11, _Complex long double)\n T(Scld12, _Complex long double)\n-\n+#endif\n \n DEBUG_FINI\n "}, {"sha": "d98debb6df7413b5caac70cd872456ac8261ceb7", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-18_y.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18_y.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -12,6 +12,7 @@ const int test_va = 1;\n #include \"fp-struct-init.h\"\n #include \"fp-struct-test-by-value-y.h\"\n \n+#ifndef SKIP_COMPLEX\n DEFS(cld,_Complex long double)\n INITS(cld, _Complex long double)\n \n@@ -27,4 +28,4 @@ TEST(Scld9, _Complex long double)\n TEST(Scld10, _Complex long double)\n TEST(Scld11, _Complex long double)\n TEST(Scld12, _Complex long double)\n-\n+#endif"}, {"sha": "986c4dded093a82220a123cbb934030d78be990b", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-18a_x.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18a_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18a_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18a_x.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -4,14 +4,15 @@\n #include \"fp-struct-check.h\"\r\n #include \"fp-struct-test-by-value-x.h\"\r\n \r\n+#ifndef SKIP_COMPLEX\r\n DEFS(cld, _Complex long double)\r\n CHECKS(cld, _Complex long double)\r\n \r\n-\r\n TEST(Scld13, _Complex long double)\r\n TEST(Scld14, _Complex long double)\r\n TEST(Scld15, _Complex long double)\r\n TEST(Scld16, _Complex long double)\r\n+#endif\r\n \r\n #undef T\r\n \r\n@@ -22,11 +23,12 @@ DEBUG_INIT\n \r\n #define T(TYPE, MTYPE) testit##TYPE ();\r\n \r\n-\r\n+#ifndef SKIP_COMPLEX\r\n T(Scld13, _Complex long double)\r\n T(Scld14, _Complex long double)\r\n T(Scld15, _Complex long double)\r\n T(Scld16, _Complex long double)\r\n+#endif\r\n \r\n DEBUG_FINI\r\n \r"}, {"sha": "12ac5341826a88ab5e2a80be9b6bcd0749f472a4", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-18a_y.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18a_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18a_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-18a_y.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -12,11 +12,12 @@ const int test_va = 1;\n #include \"fp-struct-init.h\"\r\n #include \"fp-struct-test-by-value-y.h\"\r\n \r\n+#ifndef SKIP_COMPLEX\r\n DEFS(cld,_Complex long double)\r\n INITS(cld, _Complex long double)\r\n \r\n-\r\n TEST(Scld13, _Complex long double)\r\n TEST(Scld14, _Complex long double)\r\n TEST(Scld15, _Complex long double)\r\n TEST(Scld16, _Complex long double)\r\n+#endif\r"}, {"sha": "1fd2eba1c7fd8c817b1e8d5c947a5c0e9c118bec", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-22_main.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-22_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-22_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-22_main.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -4,13 +4,17 @@\n    the former doesn't.\n    See http://gcc.gnu.org/ml/gcc-patches/2003-01/msg01830.html */\n \n+#ifndef SKIP_VLA_IN_STRUCT\n extern void struct_by_value_22_x (void);\n+#endif\n extern void exit (int);\n int fails;\n \n int\n main ()\n {\n+#ifndef SKIP_VLA_IN_STRUCT\n   struct_by_value_22_x ();\n+#endif\n   exit (0);\n }"}, {"sha": "6f1cdc86014dc4ef17ba33eacb9537a73c86f22f", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-22_x.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-22_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-22_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-22_x.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -1,3 +1,5 @@\n+#ifndef SKIP_VLA_IN_STRUCT\n+\n #ifndef T\n #include \"compat-common.h\"\n #include \"mixed-struct-defs.h\"\n@@ -77,3 +79,5 @@ U(Sfiifii)\n #undef U\n \n #endif\n+\n+#endif"}, {"sha": "ea5dec2268ea5d33377699abbfe07722ad3424ec", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-22_y.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-22_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-22_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-22_y.c?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -9,6 +9,7 @@ const int test_va = 0;\n const int test_va = 1;\n #endif\n \n+#ifndef SKIP_VLA_IN_STRUCT\n #define T(NAME, FIELDS, TYPE, FIELDINIT, FIELDTEST)\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n testva##NAME (int n, ...)\t\t\t\t\t\t\\\n@@ -37,3 +38,4 @@ testva##NAME (int n, ...)\t\t\t\t\t\t\\\n }\n \n #include \"struct-by-value-22_x.c\"\n+#endif"}, {"sha": "8426787b68f9417a78859b415a8d17d7c6625f3c", "filename": "gcc/testsuite/gcc.dg/compat/struct-layout-1.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1.h?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -214,9 +214,11 @@ typedef _Decimal32 TDecimal32;\n typedef _Decimal64 TDecimal64;\n typedef _Decimal128 TDecimal128;\n #endif\n+#ifndef SKIP_COMPLEX\n typedef _Complex float Tcfloat;\n typedef _Complex double Tcdouble;\n typedef _Complex long double Tcldouble;\n+#endif\n typedef bool Tbool;\n typedef enum E0 TE0;\n typedef enum E1 TE1;\n@@ -263,9 +265,11 @@ typedef _Decimal32 TalDecimal32 atal;\n typedef _Decimal64 TalDecimal64 atal;\n typedef _Decimal128 TalDecimal128 atal;\n #endif\n+#ifndef SKIP_COMPLEX\n typedef _Complex float Talcfloat atal;\n typedef _Complex double Talcdouble atal;\n typedef _Complex long double Talcldouble atal;\n+#endif\n typedef bool Talbool atal;\n typedef enum E0 TalE0 atal;\n typedef enum E1 TalE1 atal;\n@@ -312,9 +316,11 @@ typedef _Decimal32 Tal1Decimal32 atal1;\n typedef _Decimal64 Tal1Decimal64 atal1;\n typedef _Decimal128 Tal1Decimal128 atal1;\n #endif\n+#ifndef SKIP_COMPLEX\n typedef _Complex float Tal1cfloat atal1;\n typedef _Complex double Tal1cdouble atal1;\n typedef _Complex long double Tal1cldouble atal1;\n+#endif\n typedef bool Tal1bool atal1;\n typedef enum E0 Tal1E0 atal1;\n typedef enum E1 Tal1E1 atal1;\n@@ -361,9 +367,11 @@ typedef _Decimal32 Tal2Decimal32 atal2;\n typedef _Decimal64 Tal2Decimal64 atal2;\n typedef _Decimal128 Tal2Decimal128 atal2;\n #endif\n+#ifndef SKIP_COMPLEX\n typedef _Complex float Tal2cfloat atal2;\n typedef _Complex double Tal2cdouble atal2;\n typedef _Complex long double Tal2cldouble atal2;\n+#endif\n typedef bool Tal2bool atal2;\n typedef enum E0 Tal2E0 atal2;\n typedef enum E1 Tal2E1 atal2;\n@@ -410,9 +418,11 @@ typedef _Decimal32 Tal4Decimal32 atal4;\n typedef _Decimal64 Tal4Decimal64 atal4;\n typedef _Decimal128 Tal4Decimal128 atal4;\n #endif\n+#ifndef SKIP_COMPLEX\n typedef _Complex float Tal4cfloat atal4;\n typedef _Complex double Tal4cdouble atal4;\n typedef _Complex long double Tal4cldouble atal4;\n+#endif\n typedef bool Tal4bool atal4;\n typedef enum E0 Tal4E0 atal4;\n typedef enum E1 Tal4E1 atal4;\n@@ -459,9 +469,11 @@ typedef _Decimal32 Tal8Decimal32 atal8;\n typedef _Decimal64 Tal8Decimal64 atal8;\n typedef _Decimal128 Tal8Decimal128 atal8;\n #endif\n+#ifndef SKIP_COMPLEX\n typedef _Complex float Tal8cfloat atal8;\n typedef _Complex double Tal8cdouble atal8;\n typedef _Complex long double Tal8cldouble atal8;\n+#endif\n typedef bool Tal8bool atal8;\n typedef enum E0 Tal8E0 atal8;\n typedef enum E1 Tal8E1 atal8;\n@@ -508,9 +520,11 @@ typedef _Decimal32 Tal16Decimal32 atal16;\n typedef _Decimal64 Tal16Decimal64 atal16;\n typedef _Decimal128 Tal16Decimal128 atal16;\n #endif\n+#ifndef SKIP_COMPLEX\n typedef _Complex float Tal16cfloat atal16;\n typedef _Complex double Tal16cdouble atal16;\n typedef _Complex long double Tal16cldouble atal16;\n+#endif\n typedef bool Tal16bool atal16;\n typedef enum E0 Tal16E0 atal16;\n typedef enum E1 Tal16E1 atal16;\n@@ -557,9 +571,11 @@ typedef _Decimal32 Talx1Decimal32 atalx1;\n typedef _Decimal64 Talx1Decimal64 atalx1;\n typedef _Decimal128 Talx1Decimal128 atalx1;\n #endif\n+#ifndef SKIP_COMPLEX\n typedef _Complex float Talx1cfloat atalx1;\n typedef _Complex double Talx1cdouble atalx1;\n typedef _Complex long double Talx1cldouble atalx1;\n+#endif\n typedef bool Talx1bool atalx1;\n typedef enum E0 Talx1E0 atalx1;\n typedef enum E1 Talx1E1 atalx1;\n@@ -603,9 +619,11 @@ typedef _Decimal32 Talx2Decimal32 atalx2;\n typedef _Decimal64 Talx2Decimal64 atalx2;\n typedef _Decimal128 Talx2Decimal128 atalx2;\n #endif\n+#ifndef SKIP_COMPLEX\n typedef _Complex float Talx2cfloat atalx2;\n typedef _Complex double Talx2cdouble atalx2;\n typedef _Complex long double Talx2cldouble atalx2;\n+#endif\n typedef enum E0 Talx2E0 atalx2;\n typedef enum E1 Talx2E1 atalx2;\n typedef enum E2 Talx2E2 atalx2;\n@@ -643,9 +661,11 @@ typedef _Decimal32 Talx4Decimal32 atalx4;\n typedef _Decimal64 Talx4Decimal64 atalx4;\n typedef _Decimal128 Talx4Decimal128 atalx4;\n #endif\n+#ifndef SKIP_COMPLEX\n typedef _Complex float Talx4cfloat atalx4;\n typedef _Complex double Talx4cdouble atalx4;\n typedef _Complex long double Talx4cldouble atalx4;\n+#endif\n typedef enum E0 Talx4E0 atalx4;\n typedef enum E1 Talx4E1 atalx4;\n typedef enum E2 Talx4E2 atalx4;\n@@ -677,9 +697,11 @@ typedef long double Talx8ldouble atalx8;\n typedef _Decimal64 Talx8Decimal64 atalx8;\n typedef _Decimal128 Talx8Decimal128 atalx8;\n #endif\n+#ifndef SKIP_COMPLEX\n typedef _Complex float Talx8cfloat atalx8;\n typedef _Complex double Talx8cdouble atalx8;\n typedef _Complex long double Talx8cldouble atalx8;\n+#endif\n typedef void *Taly8ptr ataly8;\n typedef char *Taly8cptr ataly8;\n typedef int *Taly8iptr ataly8;\n@@ -689,8 +711,10 @@ typedef _Complex unsigned long int Taly16culong ataly16;\n typedef _Complex long long int Talx16cllong atalx16;\n typedef _Complex unsigned long long int Talx16cullong atalx16;\n #endif\n+#ifndef SKIP_COMPLEX\n typedef _Complex double Talx16cdouble atalx16;\n typedef _Complex long double Talx16cldouble atalx16;\n+#endif\n typedef int (*Tfnptr) (void);\n \n /* Bitfield macros.  In C, it is invalid to use numbers larger"}, {"sha": "53562731b54780458cb0af02accd2e66fea6a60e", "filename": "gcc/testsuite/lib/c-compat.exp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Flib%2Fc-compat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Flib%2Fc-compat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fc-compat.exp?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -65,19 +65,19 @@ proc compat_setup_dfp { } {\n     global compat_have_dfp\n \n     verbose \"compat_setup_dfp: $compat_use_alt $compat_same_alt\" 2\n-    set compat_have_dfp 1\n+\n+    # Does the compiler under test support decimal float types?\n+    compat-use-tst-compiler\n+    set compat_have_dfp [check_effective_target_dfprt_nocache]\n+    verbose \"compat_have_dfp for tst compiler: $compat_have_dfp\" 2\n+\n     # If there is an alternate compiler, does it support decimal float types?\n-    if { $compat_use_alt == 1 && $compat_same_alt == 0 } {\n+    if { $compat_have_dfp == 1 && $compat_use_alt == 1 && $compat_same_alt == 0 } {\n \tcompat-use-alt-compiler\n \tset compat_have_dfp [check_effective_target_dfprt_nocache]\n \tcompat-use-tst-compiler\n \tverbose \"compat_have_dfp for alt compiler: $compat_have_dfp\" 2\n     }\n-    # Does the compiler under test support it?\n-    if { $compat_have_dfp == 1 } {\n-\tset compat_have_dfp [check_effective_target_dfprt_nocache]\n-\tverbose \"compat_have_dfp for tst compiler: $compat_have_dfp\" 2\n-    }\n \n     # If decimal float is not supported, add it to the skip list, which\n     # affects code in the header files."}, {"sha": "e1af1b039e669c1d2a45f41f98a9c601c326f1c6", "filename": "gcc/testsuite/lib/compat.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Flib%2Fcompat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efbd94a33a53ac4cb6d3c5585c27f529713b9bb/gcc%2Ftestsuite%2Flib%2Fcompat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fcompat.exp?ref=6efbd94a33a53ac4cb6d3c5585c27f529713b9bb", "patch": "@@ -51,8 +51,11 @@ set option_list $COMPAT_OPTIONS\n \n # Subsets of tests can be selectively disabled by members of this list:\n #  - ATTRIBUTE: disable all tests using the __attribute__ extension,\n+#  - COMPLEX: disable all tests using the complex types feature,\n #  - COMPLEX_INT: disable all tests using the complex integral types extension,\n #  - VA: disable all tests using the variable number of arguments feature,\n+#  - VLA_IN_STRUCT: disable all tests using the variable-length arrays as\n+#    structure members extension,\n #  - ZERO_ARRAY: disable all tests using the zero-sized arrays extension.\n # The default skip lists can be overriden by\n # COMPAT_SKIPS=\"[list {skip_1}...{skip_n}]\""}]}