{"sha": "4459999864a87462a7dc4a877238eb2cac0d1b3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ1OTk5OTg2NGE4NzQ2MmE3ZGM0YTg3NzIzOGViMmNhYzBkMWIzZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-03-21T12:25:45Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-12T08:29:13Z"}, "message": "[Ada] Small cleanup in handling of Ada 2012 implicit dereferences\n\n2020-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch4.adb (Try_Container_Indexing): Replace call to\n\tFirst_Discriminant by Get_Reference_Discriminant to get the\n\treference discriminant.\n\t* sem_ch13.adb (Check_Indexing_Functions): Likewise.\n\t* sem_ch5.adb (Preanalyze_Range): Call Get_Reference_Discriminant\n\tto get the reference discriminant.\n\t* sem_util.adb (Is_OK_Variable_For_Out_Formal): Treat all\n\tAda 2012 implicit dereferences in only one place.\n\t(Is_Variable): Minor tweak.", "tree": {"sha": "2e3c3687a38d00fe1bed4ceb2cc1f05253f1d1b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e3c3687a38d00fe1bed4ceb2cc1f05253f1d1b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4459999864a87462a7dc4a877238eb2cac0d1b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4459999864a87462a7dc4a877238eb2cac0d1b3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4459999864a87462a7dc4a877238eb2cac0d1b3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4459999864a87462a7dc4a877238eb2cac0d1b3e/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c14b424ec73738165d0031888b534562a7ce6438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14b424ec73738165d0031888b534562a7ce6438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14b424ec73738165d0031888b534562a7ce6438"}], "stats": {"total": 59, "additions": 13, "deletions": 46}, "files": [{"sha": "e9473af1eb245ec28d2228bfb9eb225cf1671070", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459999864a87462a7dc4a877238eb2cac0d1b3e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459999864a87462a7dc4a877238eb2cac0d1b3e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=4459999864a87462a7dc4a877238eb2cac0d1b3e", "patch": "@@ -4759,9 +4759,10 @@ package body Sem_Ch13 is\n                end if;\n \n             else\n-               if  Has_Implicit_Dereference (Ret_Type)\n+               if Has_Implicit_Dereference (Ret_Type)\n                  and then not\n-                   Is_Access_Constant (Etype (First_Discriminant (Ret_Type)))\n+                   Is_Access_Constant\n+                     (Etype (Get_Reference_Discriminant (Ret_Type)))\n                then\n                   Illegal_Indexing\n                     (\"constant indexing must return an access to constant\");"}, {"sha": "7bdb0d10b072cf5611b1237d1a515086b6cc7f78", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459999864a87462a7dc4a877238eb2cac0d1b3e/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459999864a87462a7dc4a877238eb2cac0d1b3e/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=4459999864a87462a7dc4a877238eb2cac0d1b3e", "patch": "@@ -8097,7 +8097,8 @@ package body Sem_Ch4 is\n          --  as such and retry.\n \n          if Has_Implicit_Dereference (Pref_Typ) then\n-            Build_Explicit_Dereference (Prefix, First_Discriminant (Pref_Typ));\n+            Build_Explicit_Dereference\n+              (Prefix, Get_Reference_Discriminant (Pref_Typ));\n             return Try_Container_Indexing (N, Prefix, Exprs);\n \n          --  Otherwise this is definitely not container indexing"}, {"sha": "57939028869a1e65d7221f4252df26d43687a009", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459999864a87462a7dc4a877238eb2cac0d1b3e/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459999864a87462a7dc4a877238eb2cac0d1b3e/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=4459999864a87462a7dc4a877238eb2cac0d1b3e", "patch": "@@ -4375,21 +4375,8 @@ package body Sem_Ch5 is\n          --  visible in the loop.\n \n          elsif Has_Implicit_Dereference (Etype (R_Copy)) then\n-            declare\n-               Disc : Entity_Id;\n-\n-            begin\n-               Disc := First_Discriminant (Typ);\n-               while Present (Disc) loop\n-                  if Has_Implicit_Dereference (Disc) then\n-                     Build_Explicit_Dereference (R_Copy, Disc);\n-                     exit;\n-                  end if;\n-\n-                  Next_Discriminant (Disc);\n-               end loop;\n-            end;\n-\n+            Build_Explicit_Dereference\n+              (R_Copy, Get_Reference_Discriminant (Etype (R_Copy)));\n          end if;\n       end if;\n "}, {"sha": "948ee60d91e40f4eb5159e4be2cdf1ea20035b87", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4459999864a87462a7dc4a877238eb2cac0d1b3e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4459999864a87462a7dc4a877238eb2cac0d1b3e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4459999864a87462a7dc4a877238eb2cac0d1b3e", "patch": "@@ -16915,10 +16915,9 @@ package body Sem_Util is\n       --  check whether the context requires an access_to_variable type.\n \n       elsif Nkind (AV) = N_Explicit_Dereference\n-        and then Ada_Version >= Ada_2012\n-        and then Nkind (Original_Node (AV)) = N_Indexed_Component\n         and then Present (Etype (Original_Node (AV)))\n         and then Has_Implicit_Dereference (Etype (Original_Node (AV)))\n+        and then Ada_Version >= Ada_2012\n       then\n          return not Is_Access_Constant (Etype (Prefix (AV)));\n \n@@ -16976,28 +16975,7 @@ package body Sem_Util is\n       --  but we still want to allow the conversion if it converts a variable).\n \n       elsif Is_Rewrite_Substitution (AV) then\n-\n-         --  In Ada 2012, the explicit dereference may be a rewritten call to a\n-         --  Reference function.\n-\n-         if Ada_Version >= Ada_2012\n-           and then Nkind (Original_Node (AV)) = N_Function_Call\n-           and then\n-             Has_Implicit_Dereference (Etype (Name (Original_Node (AV))))\n-         then\n-\n-            --  Check that this is not a constant reference.\n-\n-            return not Is_Access_Constant (Etype (Prefix (AV)));\n-\n-         elsif Has_Implicit_Dereference (Etype (Original_Node (AV))) then\n-            return\n-              not Is_Access_Constant (Etype\n-                (Get_Reference_Discriminant (Etype (Original_Node (AV)))));\n-\n-         else\n-            return Is_OK_Variable_For_Out_Formal (Original_Node (AV));\n-         end if;\n+         return Is_OK_Variable_For_Out_Formal (Original_Node (AV));\n \n       --  All other non-variables are rejected\n \n@@ -18792,14 +18770,14 @@ package body Sem_Util is\n            or else\n              Is_Variable_Prefix (Original_Node (Prefix (N)));\n \n-      --  in Ada 2012, the dereference may have been added for a type with\n-      --  a declared implicit dereference aspect. Check that it is not an\n-      --  access to constant.\n+      --  Generalized indexing operations are rewritten as explicit\n+      --  dereferences, and it is only during resolution that we can\n+      --  check whether the context requires an access_to_variable type.\n \n       elsif Nkind (N) = N_Explicit_Dereference\n         and then Present (Etype (Orig_Node))\n-        and then Ada_Version >= Ada_2012\n         and then Has_Implicit_Dereference (Etype (Orig_Node))\n+        and then Ada_Version >= Ada_2012\n       then\n          return not Is_Access_Constant (Etype (Prefix (N)));\n "}]}