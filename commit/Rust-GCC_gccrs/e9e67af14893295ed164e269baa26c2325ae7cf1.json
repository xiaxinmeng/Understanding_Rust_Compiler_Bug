{"sha": "e9e67af14893295ed164e269baa26c2325ae7cf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTllNjdhZjE0ODkzMjk1ZWQxNjRlMjY5YmFhMjZjMjMyNWFlN2NmMQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-09-02T16:00:01Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-09-02T16:00:01Z"}, "message": "[2/2] Vectorise lroundf, lfloorf, lceilf using the new ARMv8-A vcvt* instructions.\n\n\tPR target/62275\n\t* config/arm/neon.md\n\t(neon_vcvt<NEON_VCVT:nvrint_variant><su_optab><VCVTF:mode>\n\t<v_cmp_result>): New pattern.\n\t* config/arm/iterators.md (NEON_VCVT): New int iterator.\n\t* config/arm/arm_neon_builtins.def (vcvtav2sf, vcvtav4sf, vcvtauv2sf,\n\tvcvtauv4sf, vcvtpv2sf, vcvtpv4sf, vcvtpuv2sf, vcvtpuv4sf, vcvtmv2sf,\n\tvcvtmv4sf, vcvtmuv2sf, vcvtmuv4sf): New builtin definitions.\n\t* config/arm/arm.c (arm_builtin_vectorized_function): Handle\n\tBUILT_IN_LROUNDF, BUILT_IN_LFLOORF, BUILT_IN_LCEILF.\n\n\tPR target/62275\n\t* gcc.target/arm/vect-lceilf_1.c: New test.\n\t* gcc.target/arm/vect-lfloorf_1.c: Likewise.\n\t* gcc.target/arm/vect-lroundf_1.c: Likewise.\n\nFrom-SVN: r214826", "tree": {"sha": "2d73f5cd3efdee8c2e98c524a7c61ad296688a0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d73f5cd3efdee8c2e98c524a7c61ad296688a0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9e67af14893295ed164e269baa26c2325ae7cf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e67af14893295ed164e269baa26c2325ae7cf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9e67af14893295ed164e269baa26c2325ae7cf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e67af14893295ed164e269baa26c2325ae7cf1/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ababd936266a9d89b5e3bd2d9b63ac149c74733b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ababd936266a9d89b5e3bd2d9b63ac149c74733b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ababd936266a9d89b5e3bd2d9b63ac149c74733b"}], "stats": {"total": 133, "additions": 133, "deletions": 0}, "files": [{"sha": "7bfbd5a310863d0ea7afb3d5ddc2acb1eb05dede", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9e67af14893295ed164e269baa26c2325ae7cf1", "patch": "@@ -1,3 +1,16 @@\n+2014-09-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/62275\n+\t* config/arm/neon.md\n+\t(neon_vcvt<NEON_VCVT:nvrint_variant><su_optab><VCVTF:mode>\n+\t<v_cmp_result>): New pattern.\n+\t* config/arm/iterators.md (NEON_VCVT): New int iterator.\n+\t* config/arm/arm_neon_builtins.def (vcvtav2sf, vcvtav4sf, vcvtauv2sf,\n+\tvcvtauv4sf, vcvtpv2sf, vcvtpv4sf, vcvtpuv2sf, vcvtpuv4sf, vcvtmv2sf,\n+\tvcvtmv4sf, vcvtmuv2sf, vcvtmuv4sf): New builtin definitions.\n+\t* config/arm/arm.c (arm_builtin_vectorized_function): Handle\n+\tBUILT_IN_LROUNDF, BUILT_IN_LFLOORF, BUILT_IN_LCEILF.\n+\n 2014-09-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/62275"}, {"sha": "ba677abd5be31037745c5d50983808571edb476f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e9e67af14893295ed164e269baa26c2325ae7cf1", "patch": "@@ -29946,6 +29946,7 @@ arm_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n {\n   enum machine_mode in_mode, out_mode;\n   int in_n, out_n;\n+  bool out_unsigned_p = TYPE_UNSIGNED (type_out);\n \n   if (TREE_CODE (type_out) != VECTOR_TYPE\n       || TREE_CODE (type_in) != VECTOR_TYPE)\n@@ -29991,6 +29992,36 @@ arm_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n             return ARM_FIND_VRINT_VARIANT (vrintz);\n           case BUILT_IN_ROUNDF:\n             return ARM_FIND_VRINT_VARIANT (vrinta);\n+#undef ARM_CHECK_BUILTIN_MODE_1\n+#define ARM_CHECK_BUILTIN_MODE_1(C) \\\n+  (out_mode == SImode && out_n == C \\\n+   && in_mode == SFmode && in_n == C)\n+\n+#define ARM_FIND_VCVT_VARIANT(N) \\\n+  (ARM_CHECK_BUILTIN_MODE (2) \\\n+   ? arm_builtin_decl(ARM_BUILTIN_NEON_##N##v2sfv2si, false) \\\n+   : (ARM_CHECK_BUILTIN_MODE (4) \\\n+     ? arm_builtin_decl(ARM_BUILTIN_NEON_##N##v4sfv4si, false) \\\n+     : NULL_TREE))\n+\n+#define ARM_FIND_VCVTU_VARIANT(N) \\\n+  (ARM_CHECK_BUILTIN_MODE (2) \\\n+   ? arm_builtin_decl(ARM_BUILTIN_NEON_##N##uv2sfv2si, false) \\\n+   : (ARM_CHECK_BUILTIN_MODE (4) \\\n+     ? arm_builtin_decl(ARM_BUILTIN_NEON_##N##uv4sfv4si, false) \\\n+     : NULL_TREE))\n+          case BUILT_IN_LROUNDF:\n+            return out_unsigned_p\n+                     ? ARM_FIND_VCVTU_VARIANT (vcvta)\n+                     : ARM_FIND_VCVT_VARIANT (vcvta);\n+          case BUILT_IN_LCEILF:\n+            return out_unsigned_p\n+                     ? ARM_FIND_VCVTU_VARIANT (vcvtp)\n+                     : ARM_FIND_VCVT_VARIANT (vcvtp);\n+          case BUILT_IN_LFLOORF:\n+            return out_unsigned_p\n+                     ? ARM_FIND_VCVTU_VARIANT (vcvtm)\n+                     : ARM_FIND_VCVT_VARIANT (vcvtm);\n #undef ARM_CHECK_BUILTIN_MODE\n #define ARM_CHECK_BUILTIN_MODE(C, N) \\\n   (out_mode == N##Imode && out_n == C \\\n@@ -30021,9 +30052,12 @@ arm_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n     }\n   return NULL_TREE;\n }\n+#undef ARM_FIND_VCVT_VARIANT\n+#undef ARM_FIND_VCVTU_VARIANT\n #undef ARM_CHECK_BUILTIN_MODE\n #undef ARM_FIND_VRINT_VARIANT\n \n+\n /* The AAPCS sets the maximum alignment of a vector to 64 bits.  */\n static HOST_WIDE_INT\n arm_vector_alignment (const_tree type)"}, {"sha": "efe5bda965afc1cb1b7583d34db4f4218027ed19", "filename": "gcc/config/arm/arm_neon_builtins.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def?ref=e9e67af14893295ed164e269baa26c2325ae7cf1", "patch": "@@ -141,6 +141,18 @@ VAR2 (RINT, vrintp, v2sf, v4sf),\n VAR2 (RINT, vrintm, v2sf, v4sf),\n VAR2 (RINT, vrintz, v2sf, v4sf),\n VAR2 (RINT, vrintx, v2sf, v4sf),\n+VAR1 (RINT, vcvtav2sf, v2si),\n+VAR1 (RINT, vcvtav4sf, v4si),\n+VAR1 (RINT, vcvtauv2sf, v2si),\n+VAR1 (RINT, vcvtauv4sf, v4si),\n+VAR1 (RINT, vcvtpv2sf, v2si),\n+VAR1 (RINT, vcvtpv4sf, v4si),\n+VAR1 (RINT, vcvtpuv2sf, v2si),\n+VAR1 (RINT, vcvtpuv4sf, v4si),\n+VAR1 (RINT, vcvtmv2sf, v2si),\n+VAR1 (RINT, vcvtmv4sf, v4si),\n+VAR1 (RINT, vcvtmuv2sf, v2si),\n+VAR1 (RINT, vcvtmuv4sf, v4si),\n VAR1 (VTBL, vtbl1, v8qi),\n VAR1 (VTBL, vtbl2, v8qi),\n VAR1 (VTBL, vtbl3, v8qi),"}, {"sha": "021372a107a6deb9cf56abe092805b38ae22be05", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=e9e67af14893295ed164e269baa26c2325ae7cf1", "patch": "@@ -223,6 +223,8 @@\n (define_int_iterator NEON_VRINT [UNSPEC_NVRINTP UNSPEC_NVRINTZ UNSPEC_NVRINTM\n                               UNSPEC_NVRINTX UNSPEC_NVRINTA UNSPEC_NVRINTN])\n \n+(define_int_iterator NEON_VCVT [UNSPEC_NVRINTP UNSPEC_NVRINTM UNSPEC_NVRINTA])\n+\n (define_int_iterator CRC [UNSPEC_CRC32B UNSPEC_CRC32H UNSPEC_CRC32W\n                           UNSPEC_CRC32CB UNSPEC_CRC32CH UNSPEC_CRC32CW])\n "}, {"sha": "354a105ee951866d112eb3a8507495b1ac1b7a56", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=e9e67af14893295ed164e269baa26c2325ae7cf1", "patch": "@@ -629,6 +629,17 @@\n   [(set_attr \"type\" \"neon_fp_round_<V_elem_ch><q>\")]\n )\n \n+(define_insn \"neon_vcvt<NEON_VCVT:nvrint_variant><su_optab><VCVTF:mode><v_cmp_result>\"\n+  [(set (match_operand:<V_cmp_result> 0 \"register_operand\" \"=w\")\n+\t(FIXUORS:<V_cmp_result> (unspec:VCVTF\n+\t\t\t       [(match_operand:VCVTF 1 \"register_operand\" \"w\")]\n+\t\t\t       NEON_VCVT)))]\n+  \"TARGET_NEON && TARGET_FPU_ARMV8\"\n+  \"vcvt<nvrint_variant>.<su>32.f32\\\\t%<V_reg>0, %<V_reg>1\"\n+  [(set_attr \"type\" \"neon_fp_to_int_<V_elem_ch><q>\")\n+   (set_attr \"predicable\" \"no\")]\n+)\n+\n (define_insn \"ior<mode>3\"\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w,w\")\n \t(ior:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"w,0\")"}, {"sha": "97e73f83672cc46b971667c0c3530cf88b27e7d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9e67af14893295ed164e269baa26c2325ae7cf1", "patch": "@@ -1,3 +1,10 @@\n+2014-09-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/62275\n+\t* gcc.target/arm/vect-lceilf_1.c: New test.\n+\t* gcc.target/arm/vect-lfloorf_1.c: Likewise.\n+\t* gcc.target/arm/vect-lroundf_1.c: Likewise.\n+\n 2014-09-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/62275"}, {"sha": "75705aef5d6aebdef4f7b7e3703d2d41ccbb51ec", "filename": "gcc/testsuite/gcc.target/arm/vect-lceilf_1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-lceilf_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-lceilf_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-lceilf_1.c?ref=e9e67af14893295ed164e269baa26c2325ae7cf1", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -fdump-tree-vect-all\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#define N 32\n+\n+void\n+foo (int *output, float *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_lceilf (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "298d54ed8e564c0ada49e0125a5609d4ad15fe8f", "filename": "gcc/testsuite/gcc.target/arm/vect-lfloorf_1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-lfloorf_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-lfloorf_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-lfloorf_1.c?ref=e9e67af14893295ed164e269baa26c2325ae7cf1", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -fdump-tree-vect-all\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#define N 32\n+\n+void\n+foo (int *output, float *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_lfloorf (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "64438214c05fef5dfe9cd239cfdefcf4dcd8e6bc", "filename": "gcc/testsuite/gcc.target/arm/vect-lroundf_1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-lroundf_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e67af14893295ed164e269baa26c2325ae7cf1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-lroundf_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvect-lroundf_1.c?ref=e9e67af14893295ed164e269baa26c2325ae7cf1", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -fdump-tree-vect-all\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#define N 32\n+\n+void\n+foo (int *output, float *input)\n+{\n+  int i = 0;\n+  /* Vectorizable.  */\n+  for (i = 0; i < N; i++)\n+    output[i] = __builtin_lroundf (input[i]);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}]}