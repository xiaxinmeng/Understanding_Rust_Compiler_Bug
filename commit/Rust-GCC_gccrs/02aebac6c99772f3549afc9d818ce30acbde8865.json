{"sha": "02aebac6c99772f3549afc9d818ce30acbde8865", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJhZWJhYzZjOTk3NzJmMzU0OWFmYzlkODE4Y2UzMGFjYmRlODg2NQ==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@debian.org", "date": "2004-07-26T15:11:53Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2004-07-26T15:11:53Z"}, "message": "re PR bootstrap/12804 (zone allocator is broken on 64bit)\n\n\tPR bootstrap/12804\n\t* ggc-zone.c (struct alloc_chunk): Remove attribute packed.\n\t(MAX_FREE_BIN_SIZE): Increase on 64-bit targets.\n\t(ggc_free): Remove incorrect freeing.\n\t(sweep_pages): Advance PP for large pages.  Fix indentation.\n\nFrom-SVN: r85194", "tree": {"sha": "a48454a362fb87e31aee92eb1d395c1260433023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a48454a362fb87e31aee92eb1d395c1260433023"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02aebac6c99772f3549afc9d818ce30acbde8865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02aebac6c99772f3549afc9d818ce30acbde8865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02aebac6c99772f3549afc9d818ce30acbde8865", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02aebac6c99772f3549afc9d818ce30acbde8865/comments", "author": null, "committer": null, "parents": [{"sha": "35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35b6b437aa03e95ab2eb6fa5acaf25e07a9b1433"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "3763470caa56c5487a4ab3878fbee9fd967ed2f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02aebac6c99772f3549afc9d818ce30acbde8865/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02aebac6c99772f3549afc9d818ce30acbde8865/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02aebac6c99772f3549afc9d818ce30acbde8865", "patch": "@@ -1,3 +1,11 @@\n+2004-07-26  Daniel Jacobowitz  <dan@debian.org>\n+\n+\tPR bootstrap/12804\n+\t* ggc-zone.c (struct alloc_chunk): Remove attribute packed.\n+\t(MAX_FREE_BIN_SIZE): Increase on 64-bit targets.\n+\t(ggc_free): Remove incorrect freeing.\n+\t(sweep_pages): Advance PP for large pages.  Fix indentation.\n+\n 2004-07-26  Richard Sandiford  <rsandifo@redhat.com>\n \n \tPR rtl-optimization/16643"}, {"sha": "509ea92bd5b0edd6c981a712302e901f4a7ac0d9", "filename": "gcc/ggc-zone.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02aebac6c99772f3549afc9d818ce30acbde8865/gcc%2Fggc-zone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02aebac6c99772f3549afc9d818ce30acbde8865/gcc%2Fggc-zone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-zone.c?ref=02aebac6c99772f3549afc9d818ce30acbde8865", "patch": "@@ -162,7 +162,7 @@ struct alloc_chunk {\n     double align_d;\n #endif\n   } u;\n-} __attribute__ ((packed));\n+};\n \n #define CHUNK_OVERHEAD\t(offsetof (struct alloc_chunk, u))\n \n@@ -177,7 +177,7 @@ struct alloc_chunk {\n    on a PowerPC G4 7450 - 667 mhz, and a Pentium 4 - 2.8ghz,\n    these were determined to be the optimal values.  */\n #define NUM_FREE_BINS\t\t64\n-#define MAX_FREE_BIN_SIZE\t256\n+#define MAX_FREE_BIN_SIZE\t(64 * sizeof (void *))\n #define FREE_BIN_DELTA\t\t(MAX_FREE_BIN_SIZE / NUM_FREE_BINS)\n #define SIZE_BIN_UP(SIZE)\t(((SIZE) + FREE_BIN_DELTA - 1) / FREE_BIN_DELTA)\n #define SIZE_BIN_DOWN(SIZE)\t((SIZE) / FREE_BIN_DELTA)\n@@ -761,10 +761,6 @@ ggc_free (void *p)\n   \n   /* Poison the chunk.  */\n   poison_chunk (chunk, ggc_get_size (p));\n-\n-  /* XXX: We only deal with explicitly freeing large objects ATM.  */\n-  if (chunk->large)\n-    free (p);\n }\n \n /* If P is not marked, mark it and return false.  Otherwise return true.\n@@ -990,13 +986,14 @@ sweep_pages (struct alloc_zone *zone)\n \t  if (((struct alloc_chunk *)p->page)->mark == 1)\n \t    {\n \t      ((struct alloc_chunk *)p->page)->mark = 0;\n+\t      pp = &p->next;\n \t    }\n \t  else\n \t    {\n \t      *pp = next;\n #ifdef ENABLE_GC_CHECKING\n-\t  /* Poison the page.  */\n-\t  memset (p->page, 0xb5, p->bytes);\n+\t      /* Poison the page.  */\n+\t      memset (p->page, 0xb5, p->bytes);\n #endif\n \t      free_page (p);\n \t    }"}]}