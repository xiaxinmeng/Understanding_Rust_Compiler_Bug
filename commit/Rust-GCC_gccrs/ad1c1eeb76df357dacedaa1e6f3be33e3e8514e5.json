{"sha": "ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQxYzFlZWI3NmRmMzU3ZGFjZWRhYTFlNmYzYmUzM2UzZTg1MTRlNQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-02-15T12:46:51Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-02-15T12:46:51Z"}, "message": "make fr30 use constraints.md\n\n\tmake fr30 use constraints.md\n\t* config/fr30/constraints.md: New file.\n\t* config/fr30/fr30.md: Include it.\n\t* config/fr30/fr30.h (REG_CLASS_FROM_LETTER): Delete.\n\t(CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n\t(EXTRA_CONSTRAINT): Delete.\n\nFrom-SVN: r170172", "tree": {"sha": "a8d8d0db89dc09ae3ebc24b9786f278b68527352", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8d8d0db89dc09ae3ebc24b9786f278b68527352"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5/comments", "author": null, "committer": null, "parents": [{"sha": "49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49ac143dfb97cc28f3dfb3b61eb9724259d3a3a3"}], "stats": {"total": 152, "additions": 81, "deletions": 71}, "files": [{"sha": "600f680217185577f85ae77c4b580a43e2b5d11a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5", "patch": "@@ -1,3 +1,11 @@\n+2011-02-15  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/fr30/constraints.md: New file.\n+\t* config/fr30/fr30.md: Include it.\n+\t* config/fr30/fr30.h (REG_CLASS_FROM_LETTER): Delete.\n+\t(CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n+\t(EXTRA_CONSTRAINT): Delete.\n+\n 2011-02-15  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/frv/constraints.md: New file."}, {"sha": "2fb0491598e018cf818ee84f81b8eee14ae0fb87", "filename": "gcc/config/fr30/constraints.md", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5/gcc%2Fconfig%2Ffr30%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5/gcc%2Fconfig%2Ffr30%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Fconstraints.md?ref=ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5", "patch": "@@ -0,0 +1,72 @@\n+;; Constraint definitions for the FR30.\n+;; Copyright (C) 2011\n+;; Free Software Foundation, Inc.\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Register constraints.\n+(define_register_constraint \"d\" \"MULTIPLY_64_REG\"\n+  \"The MDH,MDL register pair as used by MUL and MULU.\")\n+\n+(define_register_constraint \"e\" \"MULTIPLY_32_REG\"\n+  \"The MDL register as used by MULH and MULUH.\")\n+\n+(define_register_constraint \"h\" \"HIGH_REGS\"\n+  \"Registers 8 through 15.\")\n+\n+(define_register_constraint \"l\" \"LOW_REGS\"\n+  \"Registers 0 through 7.\")\n+\n+(define_register_constraint \"a\" \"ALL_REGS\"\n+  \"@internal\")\n+\n+;; Integer constraints.\n+(define_constraint \"I\"\n+  \"An integer in the range 0 to 15.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 0, 15)\")))\n+\n+(define_constraint \"J\"\n+  \"An integer in the range -16 to -1.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -16, -1)\")))\n+\n+(define_constraint \"K\"\n+  \"An integer in the range 16 to 31.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 16, 31)\")))\n+\n+(define_constraint \"L\"\n+  \"An integer in the range 0 to 255.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 0, 255)\")))\n+\n+(define_constraint \"M\"\n+  \"An integer in the range 0 to 1048575.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 0, 1048575)\")))\n+\n+(define_constraint \"P\"\n+  \"An integer in the range -256 to 255.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -256, 255)\")))\n+\n+;; Extra constraints.\n+(define_constraint \"Q\"\n+  \"@internal\"\n+  (and (match_code \"mem\")\n+       (match_code \"symbol_ref\" \"0\")))"}, {"sha": "d20d7fb79c3a27a0c6e767aa0b065b1bbda4c2c0", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5", "patch": "@@ -350,30 +350,6 @@ enum reg_class\n    (as well as added to a displacement).  */\n #define INDEX_REG_CLASS REAL_REGS\n \n-/* A C expression which defines the machine-dependent operand constraint\n-   letters for register classes.  If CHAR is such a letter, the value should be\n-   the register class corresponding to it.  Otherwise, the value should be\n-   `NO_REGS'.  The register letter `r', corresponding to class `GENERAL_REGS',\n-   will not be passed to this macro; you do not need to handle it.\n-\n-   The following letters are unavailable, due to being used as\n-   constraints:\n-\t'0'..'9'\n-\t'<', '>'\n-\t'E', 'F', 'G', 'H'\n-\t'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P'\n-\t'Q', 'R', 'S', 'T', 'U'\n-\t'V', 'X'\n-\t'g', 'i', 'm', 'n', 'o', 'p', 'r', 's' */\n-\n-#define REG_CLASS_FROM_LETTER(CHAR) \t\\\n-     (  (CHAR) == 'd' ? MULTIPLY_64_REG\t\\\n-      : (CHAR) == 'e' ? MULTIPLY_32_REG\t\\\n-      : (CHAR) == 'h' ? HIGH_REGS\t\\\n-      : (CHAR) == 'l' ? LOW_REGS\t\\\n-      : (CHAR) == 'a' ? ALL_REGS\t\\\n-      : NO_REGS)\n-\n /* A C expression which is nonzero if register number NUM is suitable for use\n    as a base register in operand addresses.  It may be either a suitable hard\n    register or a pseudo register that has been allocated such a hard register.  */\n@@ -403,53 +379,6 @@ enum reg_class\n    the reload pass.  */\n #define CLASS_MAX_NREGS(CLASS, MODE) HARD_REGNO_NREGS (0, MODE)\n \n-/*}}}*/ \f\n-/*{{{  CONSTANTS.  */ \n-\n-/* A C expression that defines the machine-dependent operand constraint letters\n-   (`I', `J', `K', .. 'P') that specify particular ranges of integer values.\n-   If C is one of those letters, the expression should check that VALUE, an\n-   integer, is in the appropriate range and return 1 if so, 0 otherwise.  If C\n-   is not one of those letters, the value should be 0 regardless of VALUE.  */\n-#define CONST_OK_FOR_LETTER_P(VALUE, C) \t\t\t\\\n- (  (C) == 'I' ? IN_RANGE (VALUE,    0,       15)\t\t\\\n-  : (C) == 'J' ? IN_RANGE (VALUE,  -16,       -1)\t\t\\\n-  : (C) == 'K' ? IN_RANGE (VALUE,   16,       31)\t\t\\\n-  : (C) == 'L' ? IN_RANGE (VALUE,    0,       (1 <<  8) - 1)\t\\\n-  : (C) == 'M' ? IN_RANGE (VALUE,    0,       (1 << 20) - 1)\t\\\n-  : (C) == 'P' ? IN_RANGE (VALUE,  -(1 << 8), (1 <<  8) - 1)\t\\\n-  : 0)\n-     \n-/* A C expression that defines the machine-dependent operand constraint letters\n-   (`G', `H') that specify particular ranges of `const_double' values.\n-\n-   If C is one of those letters, the expression should check that VALUE, an RTX\n-   of code `const_double', is in the appropriate range and return 1 if so, 0\n-   otherwise.  If C is not one of those letters, the value should be 0\n-   regardless of VALUE.\n-\n-   `const_double' is used for all floating-point constants and for `DImode'\n-   fixed-point constants.  A given letter can accept either or both kinds of\n-   values.  It can use `GET_MODE' to distinguish between these kinds.  */\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C) 0\n-\n-/* A C expression that defines the optional machine-dependent constraint\n-   letters (`Q', `R', `S', `T', `U') that can be used to segregate specific\n-   types of operands, usually memory references, for the target machine.\n-   Normally this macro will not be defined.  If it is required for a particular\n-   target machine, it should return 1 if VALUE corresponds to the operand type\n-   represented by the constraint letter C.  If C is not defined as an extra\n-   constraint, the value returned should be 0 regardless of VALUE.\n-\n-   For example, on the ROMP, load instructions cannot have their output in r0\n-   if the memory reference contains a symbolic address.  Constraint letter `Q'\n-   is defined as representing a memory address that does *not* contain a\n-   symbolic address.  An alternative is specified with a `Q' constraint on the\n-   input and `r' on the output.  The next alternative specifies `m' on the\n-   input and a register class that does not include r0 on the output.  */\n-#define EXTRA_CONSTRAINT(VALUE, C) \\\n-   ((C) == 'Q' ? (GET_CODE (VALUE) == MEM && GET_CODE (XEXP (VALUE, 0)) == SYMBOL_REF) : 0)\n-\n /*}}}*/ \f\n /*{{{  Basic Stack Layout.  */ \n "}, {"sha": "6b35599837f1813f01fb873b9b3aa10ce16a66a0", "filename": "gcc/config/fr30/fr30.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5/gcc%2Fconfig%2Ffr30%2Ffr30.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5/gcc%2Fconfig%2Ffr30%2Ffr30.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.md?ref=ad1c1eeb76df357dacedaa1e6f3be33e3e8514e5", "patch": "@@ -54,6 +54,7 @@\n )\n \n (include \"predicates.md\")\n+(include \"constraints.md\")\n \n ;;}}}\n ;;{{{ Moves "}]}