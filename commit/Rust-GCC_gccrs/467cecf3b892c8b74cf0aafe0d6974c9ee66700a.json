{"sha": "467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY3Y2VjZjNiODkyYzhiNzRjZjBhYWZlMGQ2OTc0YzllZTY2NzAwYQ==", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@novell.com", "date": "2004-09-03T17:22:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-09-03T17:22:40Z"}, "message": "re PR c/7054 (#pragma pack handled incorrectly)\n\n        PR c/7054\n        * defaults.h (TARGET_DEFAULT_PACK_STRUCT): Provide default.\n        * tree.h (initial_max_fld_align): Declare\n        * stor-layout.c (initial_max_fld_align): Define and initialize.\n        (maximum_field_alignment): Initialize to the same value.\n        * common.opt: Add -fpack-struct= variant of switch.\n        * opts.c: Handle -fpack-struct= variant of switch.\n        * c-pragma.c: Change #pragma pack() handling so that it becomes\n        compatible to other compilers: accept individual 'push' argument,\n        make final pop restore (command line) default, correct interaction\n        of push/pop and sole specification of a new alignment (so that the\n        sequence #pragma pack(push) - #pragma pack(<n>) becomes identical\n        to #pragma pack(push, <n>).\n        * doc/extend.texi: New node \"Structure-Packing Pragmas\" under\n        \"Pragmas\", describing #pragma pack.\n        * doc/invoke.texi: Document -fpack-struct=<n> variant of switch.\n        * doc/tm.texi: Adjust description for HANDLE_PRAGMA_PACK_PUSH_POP.\n        Document new TARGET_DEFAULT_PACK_STRUCT.\ntestsuite:\n        * gcc.dg/pack-test-2.c: Adjust to permit and check #pragma pack(push).\n        * gcc.dg/c99-flex-array-4.c: Add -fpack-struct=8 to provide a\n        deterministic starting point for the alignment of structure fields.\n        * gcc.dg/Wpadded.c: Dito.\n        * g++.dg/abi/vbase10.C: Dito.\n\nFrom-SVN: r87037", "tree": {"sha": "63c3bd6632b4fa9e9fe6de7b0c1e6e63755301d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63c3bd6632b4fa9e9fe6de7b0c1e6e63755301d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/comments", "author": null, "committer": null, "parents": [{"sha": "90300b8ca23bb39af5196a9fa1d5c20f829ae537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90300b8ca23bb39af5196a9fa1d5c20f829ae537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90300b8ca23bb39af5196a9fa1d5c20f829ae537"}], "stats": {"total": 228, "additions": 152, "deletions": 76}, "files": [{"sha": "71218fc1953225252baccbd6f338306ea159cbae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "patch": "@@ -1,3 +1,24 @@\n+2004-09-03  Jan Beulich  <jbeulich@novell.com>\n+\n+\tPR c/7054\n+\t* defaults.h (TARGET_DEFAULT_PACK_STRUCT): Provide default.\n+\t* tree.h (initial_max_fld_align): Declare\n+\t* stor-layout.c (initial_max_fld_align): Define and initialize.\n+\t(maximum_field_alignment): Initialize to the same value.\n+\t* common.opt: Add -fpack-struct= variant of switch.\n+\t* opts.c: Handle -fpack-struct= variant of switch.\n+\t* c-pragma.c: Change #pragma pack() handling so that it becomes\n+\tcompatible to other compilers: accept individual 'push' argument,\n+\tmake final pop restore (command line) default, correct interaction\n+\tof push/pop and sole specification of a new alignment (so that the\n+\tsequence #pragma pack(push) - #pragma pack(<n>) becomes identical\n+\tto #pragma pack(push, <n>).\n+\t* doc/extend.texi: New node \"Structure-Packing Pragmas\" under\n+\t\"Pragmas\", describing #pragma pack.\n+\t* doc/invoke.texi: Document -fpack-struct=<n> variant of switch.\n+\t* doc/tm.texi: Adjust description for HANDLE_PRAGMA_PACK_PUSH_POP.\n+\tDocument new TARGET_DEFAULT_PACK_STRUCT.\n+\n 2004-09-03  Devang Patel  <dpatel@apple.com>\n \n \t* dwarf2out.c (gen_field_die). Equate decl number to die."}, {"sha": "cb518e0347513fd7441593812ce6a4134eb31161", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 44, "deletions": 63, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "patch": "@@ -42,7 +42,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n typedef struct align_stack GTY(())\n {\n   int                  alignment;\n-  unsigned int         num_pushes;\n   tree                 id;\n   struct align_stack * prev;\n } align_stack;\n@@ -59,8 +58,9 @@ static void handle_pragma_pack (cpp_reader *);\n    happens, we restore the value to this, not to a value of 0 for\n    maximum_field_alignment.  Value is in bits.  */\n static int default_alignment;\n-#define SET_GLOBAL_ALIGNMENT(ALIGN) \\\n-  (default_alignment = maximum_field_alignment = (ALIGN))\n+#define SET_GLOBAL_ALIGNMENT(ALIGN) (maximum_field_alignment = *(alignment_stack == NULL \\\n+\t? &default_alignment \\\n+\t: &alignment_stack->alignment) = (ALIGN))\n \n static void push_alignment (int, tree);\n static void pop_alignment (tree);\n@@ -69,31 +69,23 @@ static void pop_alignment (tree);\n static void\n push_alignment (int alignment, tree id)\n {\n-  if (alignment_stack == NULL\n-      || alignment_stack->alignment != alignment\n-      || id != NULL_TREE)\n-    {\n-      align_stack * entry;\n+  align_stack * entry;\n \n-      entry = ggc_alloc (sizeof (* entry));\n+  entry = ggc_alloc (sizeof (* entry));\n \n-      entry->alignment  = alignment;\n-      entry->num_pushes = 1;\n-      entry->id         = id;\n-      entry->prev       = alignment_stack;\n-      \n-      /* The current value of maximum_field_alignment is not necessarily \n-\t 0 since there may be a #pragma pack(<n>) in effect; remember it \n-\t so that we can restore it after the final #pragma pop().  */\n-      if (alignment_stack == NULL)\n-\tdefault_alignment = maximum_field_alignment;\n-      \n-      alignment_stack = entry;\n+  entry->alignment  = alignment;\n+  entry->id         = id;\n+  entry->prev       = alignment_stack;\n+       \n+  /* The current value of maximum_field_alignment is not necessarily \n+     0 since there may be a #pragma pack(<n>) in effect; remember it \n+     so that we can restore it after the final #pragma pop().  */\n+  if (alignment_stack == NULL)\n+    default_alignment = maximum_field_alignment;\n+ \n+  alignment_stack = entry;\n \n-      maximum_field_alignment = alignment;\n-    }\n-  else\n-    alignment_stack->num_pushes ++;\n+  maximum_field_alignment = alignment;\n }\n \n /* Undo a push of an alignment onto the stack.  */\n@@ -103,12 +95,7 @@ pop_alignment (tree id)\n   align_stack * entry;\n       \n   if (alignment_stack == NULL)\n-    {\n-      warning (\"\\\n-#pragma pack (pop) encountered without matching #pragma pack (push, <n>)\"\n-\t       );\n-      return;\n-    }\n+    GCC_BAD(\"#pragma pack (pop) encountered without matching #pragma pack (push)\");\n \n   /* If we got an identifier, strip away everything above the target\n      entry so that the next step will restore the state just below it.  */\n@@ -117,27 +104,20 @@ pop_alignment (tree id)\n       for (entry = alignment_stack; entry; entry = entry->prev)\n \tif (entry->id == id)\n \t  {\n-\t    entry->num_pushes = 1;\n \t    alignment_stack = entry;\n \t    break;\n \t  }\n       if (entry == NULL)\n \twarning (\"\\\n-#pragma pack(pop, %s) encountered without matching #pragma pack(push, %s, <n>)\"\n+#pragma pack(pop, %s) encountered without matching #pragma pack(push, %s)\"\n \t\t , IDENTIFIER_POINTER (id), IDENTIFIER_POINTER (id));\n     }\n \n-  if (-- alignment_stack->num_pushes == 0)\n-    {\n-      entry = alignment_stack->prev;\n+  entry = alignment_stack->prev;\n \n-      if (entry == NULL)\n-\tmaximum_field_alignment = default_alignment;\n-      else\n-\tmaximum_field_alignment = entry->alignment;\n+  maximum_field_alignment = entry ? entry->alignment : default_alignment;\n \n-      alignment_stack = entry;\n-    }\n+  alignment_stack = entry;\n }\n #else  /* not HANDLE_PRAGMA_PACK_PUSH_POP */\n #define SET_GLOBAL_ALIGNMENT(ALIGN) (maximum_field_alignment = (ALIGN))\n@@ -150,7 +130,9 @@ pop_alignment (tree id)\n /* #pragma pack ()\n    #pragma pack (N)\n    \n+   #pragma pack (push)\n    #pragma pack (push, N)\n+   #pragma pack (push, ID)\n    #pragma pack (push, ID, N)\n    #pragma pack (pop)\n    #pragma pack (pop, ID) */\n@@ -169,7 +151,7 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n   if (token == CPP_CLOSE_PAREN)\n     {\n       action = set;\n-      align = 0;\n+      align = initial_max_fld_align;\n     }\n   else if (token == CPP_NUMBER)\n     {\n@@ -180,8 +162,8 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n     }\n   else if (token == CPP_NAME)\n     {\n-#define GCC_BAD_ACTION do { if (action == push) \\\n-\t  GCC_BAD (\"malformed '#pragma pack(push[, id], <n>)' - ignored\"); \\\n+#define GCC_BAD_ACTION do { if (action != pop) \\\n+\t  GCC_BAD (\"malformed '#pragma pack(push[, id][, <n>])' - ignored\"); \\\n \telse \\\n \t  GCC_BAD (\"malformed '#pragma pack(pop[, id])' - ignored\"); \\\n \t} while (0)\n@@ -194,31 +176,21 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n       else\n \tGCC_BAD2 (\"unknown action '%s' for '#pragma pack' - ignored\", op);\n \n-      token = c_lex (&x);\n-      if (token != CPP_COMMA && action == push)\n-\tGCC_BAD_ACTION;\n-\n-      if (token == CPP_COMMA)\n+      while ((token = c_lex (&x)) == CPP_COMMA)\n \t{\n \t  token = c_lex (&x);\n-\t  if (token == CPP_NAME)\n+\t  if (token == CPP_NAME && id == 0)\n \t    {\n \t      id = x;\n-\t      if (action == push && c_lex (&x) != CPP_COMMA)\n-\t\tGCC_BAD_ACTION;\n-\t      token = c_lex (&x);\n \t    }\n-\n-\t  if (action == push)\n+\t  else if (token == CPP_NUMBER && action == push && align == -1)\n \t    {\n-\t      if (token == CPP_NUMBER)\n-\t\t{\n-\t\t  align = TREE_INT_CST_LOW (x);\n-\t\t  token = c_lex (&x);\n-\t\t}\n-\t      else\n-\t\tGCC_BAD_ACTION;\n+\t      align = TREE_INT_CST_LOW (x);\n+\t      if (align == -1)\n+\t\taction = set;\n \t    }\n+\t  else\n+\t    GCC_BAD_ACTION;\n \t}\n \n       if (token != CPP_CLOSE_PAREN)\n@@ -231,6 +203,9 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n   if (c_lex (&x) != CPP_EOF)\n     warning (\"junk at end of '#pragma pack'\");\n \n+  if (flag_pack_struct)\n+    GCC_BAD (\"#pragma pack has no effect with -fpack-struct - ignored\");\n+\n   if (action != pop)\n     switch (align)\n       {\n@@ -242,6 +217,12 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n       case 16:\n \talign *= BITS_PER_UNIT;\n \tbreak;\n+      case -1:\n+\tif (action == push)\n+\t  {\n+\t    align = maximum_field_alignment;\n+\t    break;\n+\t  }\n       default:\n \tGCC_BAD2 (\"alignment must be a small power of two, not %d\", align);\n       }"}, {"sha": "a74921df92a1da224f019a7d8bffd68bed222a4b", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "patch": "@@ -575,6 +575,10 @@ fpack-struct\n Common Report Var(flag_pack_struct)\n Pack structure members together without holes\n \n+fpack-struct=\n+Common RejectNegative Joined UInteger\n+-fpack-struct=<number>\tSet initial maximum structure member alignment\n+\n fpcc-struct-return\n Common Report Var(flag_pcc_struct_return,1) VarExists\n Return small aggregates in memory, not registers"}, {"sha": "dd5c21fe2c1993becb4880f08982d294b7997e09", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "patch": "@@ -476,6 +476,10 @@ do { fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), FILE); \\\n #define PREFERRED_STACK_BOUNDARY STACK_BOUNDARY\n #endif\n \n+#ifndef TARGET_DEFAULT_PACK_STRUCT\n+#define TARGET_DEFAULT_PACK_STRUCT 0\n+#endif\n+\n /* By default, the C++ compiler will use function addresses in the\n    vtable entries.  Setting this nonzero tells the compiler to use\n    function descriptors instead.  The value of this macro says how"}, {"sha": "fe25cd1b0662b7b58bd8bc7724263ba6c2310db6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "patch": "@@ -7672,6 +7672,7 @@ for further explanation.\n * Darwin Pragmas::\n * Solaris Pragmas::\n * Symbol-Renaming Pragmas::\n+* Structure-Packing Pragmas::\n @end menu\n \n @node ARM Pragmas\n@@ -7848,6 +7849,30 @@ labels, but if @code{#pragma extern_prefix} triggers first we have no\n way of knowing that that happened.)\n @end enumerate\n \n+@node Structure-Packing Pragmas\n+@subsection Structure-Packing Pragmas\n+\n+For compatibility with Win32, GCC supports as set of @code{#pragma}\n+directives which change the maximum alignment of members of structures,\n+unions, and classes subsequently defined.  The @var{n} value below always\n+is required to be a small power of two and specifies the new alignment\n+in bytes.\n+\n+@enumerate\n+@item @code{#pragma pack(@var{n})} simply sets the new alignment.\n+@item @code{#pragma pack()} sets the alignment to the one that was in\n+effect when compilation started (see also command line option\n+@option{-fpack-struct[=<n>]} @pxref{Code Gen Options}).\n+@item @code{#pragma pack(push[,@var{n}])} pushes the current alignment\n+setting on an internal stack and then optionally sets the new alignment.\n+@item @code{#pragma pack(pop)} restores the alignment setting to the one\n+saved at the top of the internal stack (and removes that stack entry).\n+Note that @code{#pragma pack([@var{n}])} does not influence this internal\n+stack; thus it is possible to have @code{#pragma pack(push)} followed by\n+multiple @code{#pragma pack(@var{n})} instances and finalized by a single\n+@code{#pragma pack(pop)}.\n+@end enumerate\n+\n @node Unnamed Fields\n @section Unnamed struct/union fields within structs/unions.\n @cindex struct"}, {"sha": "5c0030e141310048ff4f556be0aa0a8f3c595870", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "patch": "@@ -699,7 +699,7 @@ See S/390 and zSeries Options.\n -fpcc-struct-return  -fpic  -fPIC -fpie -fPIE @gol\n -freg-struct-return  -fshared-data  -fshort-enums @gol\n -fshort-double  -fshort-wchar @gol\n--fverbose-asm  -fpack-struct  -fstack-check @gol\n+-fverbose-asm  -fpack-struct[=@var{n}]  -fstack-check @gol\n -fstack-limit-register=@var{reg}  -fstack-limit-symbol=@var{sym} @gol\n -fargument-alias  -fargument-noalias @gol\n -fargument-noalias-global  -fleading-underscore @gol\n@@ -11789,9 +11789,13 @@ a register in which function values may be returned.\n This flag does not have a negative form, because it specifies a\n three-way choice.\n \n-@item -fpack-struct\n+@item -fpack-struct[=@var{n}]\n @opindex fpack-struct\n-Pack all structure members together without holes.\n+Without a value specified, pack all structure members together without\n+holes. When a value is specified (which must be a small power of two), pack\n+structure members according to this value, representing the maximum\n+alignment (that is, objects with default alignment requirements larger than\n+this will be output potentially unaligned at the next fitting location.\n \n @strong{Warning:} the @option{-fpack-struct} switch causes GCC to generate\n code that is not binary compatible with code generated without that switch."}, {"sha": "26724858e9911411aae50921f44465d2e9bb93eb", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "patch": "@@ -9017,16 +9017,23 @@ of specifically named weak labels, optionally with a value.\n @findex pragma\n @defmac HANDLE_PRAGMA_PACK_PUSH_POP\n Define this macro (to a value of 1) if you want to support the Win32\n-style pragmas @samp{#pragma pack(push,@var{n})} and @samp{#pragma\n-pack(pop)}.  The @samp{pack(push,@var{n})} pragma specifies the maximum alignment\n-(in bytes) of fields within a structure, in much the same way as the\n-@samp{__aligned__} and @samp{__packed__} @code{__attribute__}s do.  A\n+style pragmas @samp{#pragma pack(push[,@var{n}])} and @samp{#pragma\n+pack(pop)}.  The @samp{pack(push,[@var{n}])} pragma specifies the maximum\n+alignment (in bytes) of fields within a structure, in much the same way as\n+the @samp{__aligned__} and @samp{__packed__} @code{__attribute__}s do.  A\n pack value of zero resets the behavior to the default.  Successive\n invocations of this pragma cause the previous values to be stacked, so\n that invocations of @samp{#pragma pack(pop)} will return to the previous\n value.\n @end defmac\n \n+@defmac TARGET_DEFAULT_PACK_STRUCT\n+If your target requires a structure packing default other than 0 (meaning\n+the machine default), define this macro the the necessary value (in bytes).\n+This must be a value that would also valid to be used with\n+@samp{#pragma pack()} (that is, a small power of two).\n+@end defmac\n+\n @defmac DOLLARS_IN_IDENTIFIERS\n Define this macro to control use of the character @samp{$} in\n identifier names for the C family of languages.  0 means @samp{$} is"}, {"sha": "e0271287c5edfe4b22702b1827aad793c8cc0651", "filename": "gcc/opts.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "patch": "@@ -810,6 +810,16 @@ common_handle_option (size_t scode, const char *arg, int value)\n       pp_set_line_maximum_length (global_dc->printer, value);\n       break;\n \n+    case OPT_fpack_struct_:\n+      if (value <= 0 || (value & (value - 1)) || value > 16)\n+\terror(\"structure alignment must be a small power of two, not %d\", value);\n+      else\n+\t{\n+\t  initial_max_fld_align = value;\n+\t  maximum_field_alignment = value * BITS_PER_UNIT;\n+\t}\n+      break;\n+\n     case OPT_fpeel_loops:\n       flag_peel_loops_set = true;\n       break;"}, {"sha": "75ff523c6a10b2558dae2280b0313273115e1a16", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "patch": "@@ -43,7 +43,9 @@ tree sizetype_tab[(int) TYPE_KIND_LAST];\n \n /* If nonzero, this is an upper limit on alignment of structure fields.\n    The value is measured in bits.  */\n-unsigned int maximum_field_alignment;\n+unsigned int maximum_field_alignment = TARGET_DEFAULT_PACK_STRUCT * BITS_PER_UNIT;\n+/* ... and its original value in bytes, specified via -fpack-struct=<value>. */\n+unsigned int initial_max_fld_align = TARGET_DEFAULT_PACK_STRUCT;\n \n /* If nonzero, the alignment of a bitstring or (power-)set value, in bits.\n    May be overridden by front-ends.  */"}, {"sha": "c4a03852763041a9324de375940f789901eacd1c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "patch": "@@ -1,3 +1,11 @@\n+2004-09-03  Jan Beulich  <jbeulich@novell.com>\n+\n+\t* gcc.dg/pack-test-2.c: Adjust to permit and check #pragma pack(push).\n+\t* gcc.dg/c99-flex-array-4.c: Add -fpack-struct=8 to provide a\n+\tdeterministic starting point for the alignment of structure fields.\n+\t* gcc.dg/Wpadded.c: Dito.\n+\t* g++.dg/abi/vbase10.C: Dito.\n+\n 2004-09-03  Devang Patel  <dpatel@apple.com>\n \n \t* g++.dg/debug/pr15736.cc: New test."}, {"sha": "b6e7f88fcaa2990a36d62310da1c72617f421dd4", "filename": "gcc/testsuite/g++.dg/abi/vbase10.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase10.C?ref=467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "patch": "@@ -1,5 +1,7 @@\n // { dg-do compile }\n-// { dg-options \"-Wabi -fabi-version=1\" }\n+// -fpack-struct is necessary because the code below assumes the initial\n+// packing is larger than 1, which cannot ge guaranteed for all targets.\n+// { dg-options \"-Wabi -fabi-version=1 -fpack-struct=8\" }\n // On ARM processors, the alignment of B will be 4 even though it\n // contains only a single \"char\".  That would avoids the situation\n // that the warning below is designed to catch.  We therefore"}, {"sha": "e55fd113f7576d67822331ec9f057bb5f22701d1", "filename": "gcc/testsuite/gcc.dg/Wpadded.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Ftestsuite%2Fgcc.dg%2FWpadded.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Ftestsuite%2Fgcc.dg%2FWpadded.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpadded.c?ref=467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "patch": "@@ -1,7 +1,9 @@\n /* Source: EMC.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-Wpadded\" } */\n+/* -fpack-struct is necessary because the warning expected requires the initial\n+   packing to be larger than 1, which cannot ge guaranteed for all targets. */\n+/* { dg-options \"-Wpadded -fpack-struct=8\" } */\n \n struct foo {\n   char bar;"}, {"sha": "c4a0564b59961142146c5d44a299f30b114142f3", "filename": "gcc/testsuite/gcc.dg/c99-flex-array-4.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-4.c?ref=467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "patch": "@@ -5,7 +5,9 @@\n    from Tony Finch <dot@dotat.at>, adapted to a testcase by Joseph Myers\n    <jsm28@cam.ac.uk>.  See also WG14 reflector messages 9571-3.  */\n /* { dg-do compile } */\n-/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+/* -fpack-struct is necessary because the code below assumes the initial\n+   packing is larger than 1, which cannot ge guaranteed for all targets. */\n+/* { dg-options \"-std=iso9899:1999 -fpack-struct=8 -pedantic-errors\" } */\n \n #include <stddef.h>\n "}, {"sha": "974d982c5055320abb20823d1afb5645bdbf7506", "filename": "gcc/testsuite/gcc.dg/pack-test-2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-2.c?ref=467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "patch": "@@ -3,9 +3,11 @@\n \n /* { dg-do compile { target *-*-linux* *-*-cygwin* powerpc*-*-eabi* } } */\n \n-#pragma pack(push)              /* { dg-error \"malformed\" } */\n #pragma pack(pop)               /* { dg-error \"without matching\" } */\n \n+#pragma pack(push)\n+#pragma pack(pop)               /* reset */\n+\n #pragma pack(push, foo, 1)\n #pragma pack(pop, foo, 1)       /* { dg-error \"malformed\" } (/\n #pragma pack(pop)               /* reset */"}, {"sha": "0f619b0c62df305c04bd2a0ccaa3d1e14d5bdb22", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467cecf3b892c8b74cf0aafe0d6974c9ee66700a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=467cecf3b892c8b74cf0aafe0d6974c9ee66700a", "patch": "@@ -3102,8 +3102,10 @@ extern void put_pending_sizes (tree);\n    + (BITS_PER_UNIT > 8) + (BITS_PER_UNIT > 16) + (BITS_PER_UNIT > 32) \\\n    + (BITS_PER_UNIT > 64) + (BITS_PER_UNIT > 128) + (BITS_PER_UNIT > 256))\n \n-/* If nonzero, an upper limit on alignment of structure fields, in bits.  */\n+/* If nonzero, an upper limit on alignment of structure fields, in bits,  */\n extern unsigned int maximum_field_alignment;\n+/* and its original value in bytes, specified via -fpack-struct=<value>. */\n+extern unsigned int initial_max_fld_align;\n \n /* If nonzero, the alignment of a bitstring or (power-)set value, in bits.  */\n extern unsigned int set_alignment;"}]}