{"sha": "5dbcc9c0dcba41a85c67ed82a6198a06edb0b64c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRiY2M5YzBkY2JhNDFhODVjNjdlZDgyYTYxOThhMDZlZGIwYjY0Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-21T22:22:27Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-21T22:22:27Z"}, "message": "(find_barrier): Always use get_attr_length to compute length of instructions.\n\n(find_barrier): Always use get_attr_length to compute length of\ninstructions.  If count_hi or count_si out of range at end, need two\nPREV_INSN calls not one.\n\nFrom-SVN: r10496", "tree": {"sha": "508690a38e308a2a2f09b4e304f1d6afd75edb2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/508690a38e308a2a2f09b4e304f1d6afd75edb2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dbcc9c0dcba41a85c67ed82a6198a06edb0b64c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dbcc9c0dcba41a85c67ed82a6198a06edb0b64c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dbcc9c0dcba41a85c67ed82a6198a06edb0b64c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dbcc9c0dcba41a85c67ed82a6198a06edb0b64c/comments", "author": null, "committer": null, "parents": [{"sha": "00e94d6531c49dd28c277add21bc80831563f540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00e94d6531c49dd28c277add21bc80831563f540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00e94d6531c49dd28c277add21bc80831563f540"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "3a53b868be5045d75cb7fd160f078a8eafcbc3dd", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dbcc9c0dcba41a85c67ed82a6198a06edb0b64c/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dbcc9c0dcba41a85c67ed82a6198a06edb0b64c/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=5dbcc9c0dcba41a85c67ed82a6198a06edb0b64c", "patch": "@@ -1213,14 +1213,11 @@ find_barrier (from)\n      before the table.  This gives 1020.  */\n   while (from && count_si < 1020 && count_hi < 512)\n     {\n-      int inc;\n+      int inc = get_attr_length (from);\n \n       if (GET_CODE (from) == BARRIER)\n \tfound_barrier = from;\n \n-      /* Count the length of this insn - we assume that all moves will\n-\t be 2 bytes long, except the DImode/DFmode movess.  */\n-\n       if (broken_move (from))\n \t{\n \t  rtx src = SET_SRC (PATTERN (from));\n@@ -1237,10 +1234,7 @@ find_barrier (from)\n \t    }\n \t  else\n \t    found_si = 1;\n-\t  inc = (GET_MODE_SIZE (GET_MODE (src)) > 4) ? 4 : 2;\n \t}\n-      else\n-\tinc = get_attr_length (from);\n \n       if (GET_CODE (from) == INSN\n \t  && GET_CODE (PATTERN (from)) == SET\n@@ -1270,8 +1264,14 @@ find_barrier (from)\n \t so we'll make one.  */\n       rtx label = gen_label_rtx ();\n \n-      /* We went one instruction too far above.  */\n-      from = PREV_INSN (from);\n+      /* If we exceeded the range, then we must back up over the last\n+\t instruction we looked at.  Otherwise, we just need to undo the\n+\t NEXT_INSN at the end of the loop.  */\n+      if (count_hi > 512 || count_si > 1020)\n+\tfrom = PREV_INSN (PREV_INSN (from));\n+      else\n+\tfrom = PREV_INSN (from);\n+\n       /* Walk back to be just before any jump or label.\n \t Putting it before a label reduces the number of times the branch\n \t around the constant pool table will be hit.  Putting it before"}]}