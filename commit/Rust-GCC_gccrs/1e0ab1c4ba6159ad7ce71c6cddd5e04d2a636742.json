{"sha": "1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUwYWIxYzRiYTYxNTlhZDdjZTcxYzZjZGRkNWUwNGQyYTYzNjc0Mg==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-07-14T14:21:40Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-07-14T14:21:40Z"}, "message": "middle-end: Add tests middle end generic tests for sign differing dotproduct.\n\nThis adds testcases to test for auto-vect detection of the new sign differing\ndot product.\n\ngcc/ChangeLog:\n\n\t* doc/sourcebuild.texi (arm_v8_2a_i8mm_neon_hw): Document.\n\ngcc/testsuite/ChangeLog:\n\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_v8_2a_imm8_neon_ok_nocache,\n\tcheck_effective_target_arm_v8_2a_i8mm_neon_hw,\n\tcheck_effective_target_vect_usdot_qi): New.\n\t* gcc.dg/vect/vect-reduc-dot-9.c: New test.\n\t* gcc.dg/vect/vect-reduc-dot-10.c: New test.\n\t* gcc.dg/vect/vect-reduc-dot-11.c: New test.\n\t* gcc.dg/vect/vect-reduc-dot-12.c: New test.\n\t* gcc.dg/vect/vect-reduc-dot-13.c: New test.\n\t* gcc.dg/vect/vect-reduc-dot-14.c: New test.\n\t* gcc.dg/vect/vect-reduc-dot-15.c: New test.\n\t* gcc.dg/vect/vect-reduc-dot-16.c: New test.\n\t* gcc.dg/vect/vect-reduc-dot-17.c: New test.\n\t* gcc.dg/vect/vect-reduc-dot-18.c: New test.\n\t* gcc.dg/vect/vect-reduc-dot-19.c: New test.\n\t* gcc.dg/vect/vect-reduc-dot-20.c: New test.\n\t* gcc.dg/vect/vect-reduc-dot-21.c: New test.\n\t* gcc.dg/vect/vect-reduc-dot-22.c: New test.", "tree": {"sha": "1de396e7ff98ac6a3825cb7bd7ba948e751fd503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1de396e7ff98ac6a3825cb7bd7ba948e751fd503"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6412c58c781f64b60e7353e762cd5cec62a863e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6412c58c781f64b60e7353e762cd5cec62a863e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6412c58c781f64b60e7353e762cd5cec62a863e7"}], "stats": {"total": 544, "additions": 544, "deletions": 0}, "files": [{"sha": "b1fffd5e90f8b938a4c50c85f5c9ef0efe440468", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "patch": "@@ -1780,6 +1780,10 @@ Target supports a vector dot-product of @code{signed char}.\n @item vect_udot_qi\n Target supports a vector dot-product of @code{unsigned char}.\n \n+@item vect_usdot_qi\n+Target supports a vector dot-product where one operand of the multiply is\n+@code{signed char} and the other of @code{unsigned char}.\n+\n @item vect_sdot_hi\n Target supports a vector dot-product of @code{signed short}.\n \n@@ -2055,6 +2059,11 @@ ARM target supports executing instructions from ARMv8.2-A with the Dot\n Product extension. Some multilibs may be incompatible with these options.\n Implies arm_v8_2a_dotprod_neon_ok.\n \n+@item arm_v8_2a_i8mm_neon_hw\n+ARM target supports executing instructions from ARMv8.2-A with the 8-bit\n+Matrix Multiply extension.  Some multilibs may be incompatible with these\n+options.  Implies arm_v8_2a_i8mm_ok.\n+\n @item arm_fp16fml_neon_ok\n @anchor{arm_fp16fml_neon_ok}\n ARM target supports extensions to generate the @code{VFMAL} and @code{VFMLS}"}, {"sha": "7ce86965ea97d37c43d96b4d2271df667dcb2aae", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-10.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-10.c?ref=1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+\n+#define SIGNEDNESS_1 unsigned\n+#define SIGNEDNESS_2 unsigned\n+#define SIGNEDNESS_3 unsigned\n+#define SIGNEDNESS_4 signed\n+\n+#include \"vect-reduc-dot-9.c\"\n+\n+/* { dg-final { scan-tree-dump-not \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */"}, {"sha": "5e3cfc925105f576adf332df517727c857a4de0f", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-11.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-11.c?ref=1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+\n+#define SIGNEDNESS_1 unsigned\n+#define SIGNEDNESS_2 signed\n+#define SIGNEDNESS_3 unsigned\n+#define SIGNEDNESS_4 signed\n+\n+#include \"vect-reduc-dot-9.c\"\n+\n+/* { dg-final { scan-tree-dump-not \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */"}, {"sha": "08412614fc67045d3067b5b55ba032d297595237", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-12.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-12.c?ref=1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+\n+#define SIGNEDNESS_1 unsigned\n+#define SIGNEDNESS_2 signed\n+#define SIGNEDNESS_3 signed\n+#define SIGNEDNESS_4 unsigned\n+\n+#include \"vect-reduc-dot-9.c\"\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */"}, {"sha": "7ee0f45f64296442204ee13d5f880f4b7716fb85", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-13.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-13.c?ref=1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+\n+#define SIGNEDNESS_1 signed\n+#define SIGNEDNESS_2 unsigned\n+#define SIGNEDNESS_3 signed\n+#define SIGNEDNESS_4 unsigned\n+\n+#include \"vect-reduc-dot-9.c\"\n+\n+/* { dg-final { scan-tree-dump-not \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */"}, {"sha": "2de1434528b87f0c32c54150b16791f3f2a469b5", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-14.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-14.c?ref=1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+\n+#define SIGNEDNESS_1 signed\n+#define SIGNEDNESS_2 unsigned\n+#define SIGNEDNESS_3 unsigned\n+#define SIGNEDNESS_4 signed\n+\n+#include \"vect-reduc-dot-9.c\"\n+\n+/* { dg-final { scan-tree-dump-not \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */"}, {"sha": "5a6fd1969ce9403cbefb5b55c71bdd40894fc931", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-15.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-15.c?ref=1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+\n+#define SIGNEDNESS_1 signed\n+#define SIGNEDNESS_2 signed\n+#define SIGNEDNESS_3 unsigned\n+#define SIGNEDNESS_4 signed\n+\n+#include \"vect-reduc-dot-9.c\"\n+\n+/* { dg-final { scan-tree-dump-not \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */"}, {"sha": "aec628789366673321aea88c60316a68fe16cbc5", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-16.c?ref=1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+\n+#define SIGNEDNESS_1 signed\n+#define SIGNEDNESS_2 signed\n+#define SIGNEDNESS_3 signed\n+#define SIGNEDNESS_4 unsigned\n+\n+#include \"vect-reduc-dot-9.c\"\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */"}, {"sha": "aa269c4d657f65e07e36df7f3fd0098cf3aaf4d0", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-17.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-17.c?ref=1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 50\n+\n+#ifndef SIGNEDNESS_1\n+#define SIGNEDNESS_1 unsigned\n+#define SIGNEDNESS_2 unsigned\n+#define SIGNEDNESS_3 signed\n+#define SIGNEDNESS_4 unsigned\n+#endif\n+\n+SIGNEDNESS_1 int __attribute__ ((noipa))\n+f (SIGNEDNESS_1 int res, SIGNEDNESS_3 char *restrict a,\n+   SIGNEDNESS_4 char *restrict b)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    {\n+      int av = a[i];\n+      int bv = b[i];\n+      SIGNEDNESS_2 int mult = av * bv;\n+      res += mult;\n+    }\n+  return res;\n+}\n+\n+#define BASE ((SIGNEDNESS_3 int) -1 < 0 ? -126 : 4)\n+#define OFFSET 20\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  SIGNEDNESS_3 char a[N], b[N];\n+  int expected = 0x12345;\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = BASE + i * 5;\n+      b[i] = BASE + OFFSET + i * 4;\n+      asm volatile (\"\" ::: \"memory\");\n+      expected += (SIGNEDNESS_2 int) (a[i] * b[i]);\n+    }\n+  if (f (0x12345, a, b) != expected)\n+    __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */"}, {"sha": "2b1cc0411c3256ccd876d8b4da18ce4881dc0af9", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-18.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-18.c?ref=1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 50\n+\n+#ifndef SIGNEDNESS_1\n+#define SIGNEDNESS_1 unsigned\n+#define SIGNEDNESS_2 signed\n+#define SIGNEDNESS_3 signed\n+#define SIGNEDNESS_4 unsigned\n+#endif\n+\n+SIGNEDNESS_1 int __attribute__ ((noipa))\n+f (SIGNEDNESS_1 int res, SIGNEDNESS_3 char *restrict a,\n+   SIGNEDNESS_4 char *restrict b)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    {\n+      int av = a[i];\n+      int bv = b[i];\n+      SIGNEDNESS_2 int mult = av * bv;\n+      res += mult;\n+    }\n+  return res;\n+}\n+\n+#define BASE ((SIGNEDNESS_3 int) -1 < 0 ? -126 : 4)\n+#define OFFSET 20\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  SIGNEDNESS_3 char a[N], b[N];\n+  int expected = 0x12345;\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = BASE + i * 5;\n+      b[i] = BASE + OFFSET + i * 4;\n+      asm volatile (\"\" ::: \"memory\");\n+      expected += (SIGNEDNESS_2 int) (a[i] * b[i]);\n+    }\n+  if (f (0x12345, a, b) != expected)\n+    __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */"}, {"sha": "962b24ec2047b99ebedc116f68e460c6ab6fc1e7", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-19.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-19.c?ref=1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 50\n+\n+#ifndef SIGNEDNESS_1\n+#define SIGNEDNESS_1 unsigned\n+#define SIGNEDNESS_2 signed\n+#define SIGNEDNESS_3 signed\n+#define SIGNEDNESS_4 unsigned\n+#endif\n+\n+SIGNEDNESS_1 long __attribute__ ((noipa))\n+f (SIGNEDNESS_1 long res, SIGNEDNESS_3 char *restrict a,\n+   SIGNEDNESS_4 short *restrict b)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    {\n+      int av = a[i];\n+      int bv = b[i];\n+      SIGNEDNESS_2 long mult = av * bv;\n+      res += mult;\n+    }\n+  return res;\n+}\n+\n+#define BASE ((SIGNEDNESS_3 int) -1 < 0 ? -126 : 4)\n+#define OFFSET 20\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  SIGNEDNESS_3 char a[N];\n+  SIGNEDNESS_4 short b[N];\n+  int expected = 0x12345;\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = BASE + i * 5;\n+      b[i] = BASE + OFFSET + i * 4;\n+      asm volatile (\"\" ::: \"memory\");\n+      expected += (SIGNEDNESS_2 int) (a[i] * b[i]);\n+    }\n+  if (f (0x12345, a, b) != expected)\n+    __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */"}, {"sha": "d757fb15615ba79dedcbfc44407d3f363274ad26", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-20.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-20.c?ref=1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 50\n+\n+#ifndef SIGNEDNESS_1\n+#define SIGNEDNESS_1 unsigned\n+#define SIGNEDNESS_2 signed\n+#define SIGNEDNESS_3 signed\n+#define SIGNEDNESS_4 unsigned\n+#endif\n+\n+SIGNEDNESS_1 long __attribute__ ((noipa))\n+f (SIGNEDNESS_1 long res, SIGNEDNESS_3 short *restrict a,\n+   SIGNEDNESS_4 char *restrict b)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    {\n+      int av = a[i];\n+      int bv = b[i];\n+      SIGNEDNESS_2 long mult = av * bv;\n+      res += mult;\n+    }\n+  return res;\n+}\n+\n+#define BASE ((SIGNEDNESS_3 int) -1 < 0 ? -126 : 4)\n+#define OFFSET 20\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  SIGNEDNESS_3 short a[N];\n+  SIGNEDNESS_4 char b[N];\n+  int expected = 0x12345;\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = BASE + i * 5;\n+      b[i] = BASE + OFFSET + i * 4;\n+      asm volatile (\"\" ::: \"memory\");\n+      expected += (SIGNEDNESS_2 int) (a[i] * b[i]);\n+    }\n+  if (f (0x12345, a, b) != expected)\n+    __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */"}, {"sha": "b5754bf7dde29b5944bbc72919ea03f65b9bd7ad", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-21.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-21.c?ref=1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 50\n+\n+#ifndef SIGNEDNESS_1\n+#define SIGNEDNESS_1 unsigned\n+#define SIGNEDNESS_2 signed\n+#define SIGNEDNESS_3 signed\n+#define SIGNEDNESS_4 unsigned\n+#endif\n+\n+SIGNEDNESS_1 long __attribute__ ((noipa))\n+f (SIGNEDNESS_1 long res, SIGNEDNESS_3 char *restrict a,\n+   SIGNEDNESS_4 short *restrict b)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    {\n+      int av = a[i];\n+      int bv = b[i];\n+      SIGNEDNESS_2 int mult = av * bv;\n+      res += mult;\n+    }\n+  return res;\n+}\n+\n+#define BASE ((SIGNEDNESS_3 int) -1 < 0 ? -126 : 4)\n+#define OFFSET 20\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  SIGNEDNESS_3 char a[N];\n+  SIGNEDNESS_4 short b[N];\n+  int expected = 0x12345;\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = BASE + i * 5;\n+      b[i] = BASE + OFFSET + i * 4;\n+      asm volatile (\"\" ::: \"memory\");\n+      expected += (SIGNEDNESS_2 int) (a[i] * b[i]);\n+    }\n+  if (f (0x12345, a, b) != expected)\n+    __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */"}, {"sha": "febeb19784c6aaca72dc0871af0d32cc91fa6ea2", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-22.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-22.c?ref=1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 50\n+\n+#ifndef SIGNEDNESS_1\n+#define SIGNEDNESS_1 unsigned\n+#define SIGNEDNESS_2 unsigned\n+#define SIGNEDNESS_3 signed\n+#define SIGNEDNESS_4 unsigned\n+#endif\n+\n+SIGNEDNESS_1 long __attribute__ ((noipa))\n+f (SIGNEDNESS_1 long res, SIGNEDNESS_3 char *restrict a,\n+   SIGNEDNESS_4 short *restrict b)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    {\n+      int av = a[i];\n+      int bv = b[i];\n+      SIGNEDNESS_2 int mult = av * bv;\n+      res += mult;\n+    }\n+  return res;\n+}\n+\n+#define BASE ((SIGNEDNESS_3 int) -1 < 0 ? -126 : 4)\n+#define OFFSET 20\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  SIGNEDNESS_3 char a[N];\n+  SIGNEDNESS_4 short b[N];\n+  int expected = 0x12345;\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = BASE + i * 5;\n+      b[i] = BASE + OFFSET + i * 4;\n+      asm volatile (\"\" ::: \"memory\");\n+      expected += (SIGNEDNESS_2 int) (a[i] * b[i]);\n+    }\n+  if (f (0x12345, a, b) != expected)\n+    __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */"}, {"sha": "cbbeedec3bfd0810a8ce8036e6670585d9334924", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-9.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-9.c?ref=1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target arm_v8_2a_i8mm_neon_hw { target { aarch64*-*-* || arm*-*-* } } } */\n+/* { dg-add-options arm_v8_2a_i8mm }  */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 50\n+\n+#ifndef SIGNEDNESS_1\n+#define SIGNEDNESS_1 unsigned\n+#define SIGNEDNESS_2 unsigned\n+#define SIGNEDNESS_3 signed\n+#define SIGNEDNESS_4 unsigned\n+#endif\n+\n+SIGNEDNESS_1 int __attribute__ ((noipa))\n+f (SIGNEDNESS_1 int res, SIGNEDNESS_3 char *restrict a,\n+   SIGNEDNESS_4 char *restrict b)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    {\n+      int av = a[i];\n+      int bv = b[i];\n+      SIGNEDNESS_2 short mult = av * bv;\n+      res += mult;\n+    }\n+  return res;\n+}\n+\n+#define BASE ((SIGNEDNESS_3 int) -1 < 0 ? -126 : 4)\n+#define OFFSET 20\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  SIGNEDNESS_3 char a[N], b[N];\n+  int expected = 0x12345;\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a[i] = BASE + i * 5;\n+      b[i] = BASE + OFFSET + i * 4;\n+      asm volatile (\"\" ::: \"memory\");\n+      expected += (SIGNEDNESS_2 short) (a[i] * b[i]);\n+    }\n+  if (f (0x12345, a, b) != expected)\n+    __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"vect_recog_dot_prod_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_usdot_qi } } } */"}, {"sha": "12df869990d8ab4269a27283c8cb9d720ef12630", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742", "patch": "@@ -5267,6 +5267,36 @@ proc check_effective_target_arm_v8_2a_dotprod_neon_ok_nocache { } {\n     return 0;\n }\n \n+# Return 1 if the target supports ARMv8.2 Adv.SIMD imm8\n+# instructions, 0 otherwise.  The test is valid for ARM and for AArch64.\n+# Record the command line options needed.\n+\n+proc check_effective_target_arm_v8_2a_imm8_neon_ok_nocache { } {\n+    global et_arm_v8_2a_imm8_neon_flags\n+    set et_arm_v8_2a_imm8_neon_flags \"\"\n+\n+    if { ![istarget arm*-*-*] && ![istarget aarch64*-*-*] } {\n+        return 0;\n+    }\n+\n+    # Iterate through sets of options to find the compiler flags that\n+    # need to be added to the -march option.\n+    foreach flags {\"\" \"-mfloat-abi=softfp -mfpu=neon-fp-armv8\" \"-mfloat-abi=hard -mfpu=neon-fp-armv8\"} {\n+        if { [check_no_compiler_messages_nocache \\\n+                  arm_v8_2a_imm8_neon_ok object {\n+\t    #include <stdint.h>\n+            #if !defined (__ARM_FEATURE_MATMUL_INT8)\n+            #error \"__ARM_FEATURE_MATMUL_INT8 not defined\"\n+            #endif\n+        } \"$flags -march=armv8.2-a+imm8\"] } {\n+            set et_arm_v8_2a_imm8_neon_flags \"$flags -march=armv8.2-a+imm8\"\n+            return 1\n+        }\n+    }\n+\n+    return 0;\n+}\n+\n # Return 1 if the target supports ARMv8.1-M MVE\n # instructions, 0 otherwise.  The test is valid for ARM.\n # Record the command line options needed.\n@@ -5694,6 +5724,43 @@ proc check_effective_target_arm_v8_2a_dotprod_neon_hw { } {\n     } [add_options_for_arm_v8_2a_dotprod_neon \"\"]]\n }\n \n+# Return 1 if the target supports executing AdvSIMD instructions from ARMv8.2\n+# with the i8mm extension, 0 otherwise.  The test is valid for ARM and for\n+# AArch64.\n+\n+proc check_effective_target_arm_v8_2a_i8mm_neon_hw { } {\n+    if { ![check_effective_target_arm_v8_2a_i8mm_ok] } {\n+        return 0;\n+    }\n+    return [check_runtime arm_v8_2a_i8mm_neon_hw_available {\n+        #include \"arm_neon.h\"\n+        int\n+        main (void)\n+        {\n+\n+\t  uint32x2_t results = {0,0};\n+\t  uint8x8_t a = {1,1,1,1,2,2,2,2};\n+\t  int8x8_t b = {2,2,2,2,3,3,3,3};\n+\n+          #ifdef __ARM_ARCH_ISA_A64\n+          asm (\"usdot %0.2s, %1.8b, %2.8b\"\n+               : \"=w\"(results)\n+               : \"w\"(a), \"w\"(b)\n+               : /* No clobbers.  */);\n+\n+\t  #else\n+          asm (\"vusdot.u8 %P0, %P1, %P2\"\n+               : \"=w\"(results)\n+               : \"w\"(a), \"w\"(b)\n+               : /* No clobbers.  */);\n+          #endif\n+\n+          return (vget_lane_u32 (results, 0) == 8\n+\t\t  && vget_lane_u32 (results, 1) == 24) ? 1 : 0;\n+        }\n+    } [add_options_for_arm_v8_2a_i8mm \"\"]]\n+}\n+\n # Return 1 if this is a ARM target with NEON enabled.\n \n proc check_effective_target_arm_neon { } {\n@@ -7059,6 +7126,19 @@ proc check_effective_target_vect_udot_qi { } {\n \t\t && [et-is-effective-target mips_msa]) }}]\n }\n \n+# Return 1 if the target plus current options supports a vector\n+# dot-product where one operand of the multiply is signed char\n+# and the other unsigned chars, 0 otherwise.\n+#\n+# This won't change for different subtargets so cache the result.\n+\n+proc check_effective_target_vect_usdot_qi { } {\n+    return [check_cached_effective_target_indexed vect_usdot_qi {\n+      expr { [istarget aarch64*-*-*]\n+\t     || [istarget arm*-*-*] }}]\n+}\n+\n+\n # Return 1 if the target plus current options supports a vector\n # dot-product of signed shorts, 0 otherwise.\n #"}]}