{"sha": "37d51c754a8c0c2b3216b5574cfcf3e12d786658", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdkNTFjNzU0YThjMGMyYjMyMTZiNTU3NGNmY2YzZTEyZDc4NjY1OA==", "commit": {"author": {"name": "Sebastian Peryt", "email": "sebastian.peryt@intel.com", "date": "2018-04-19T15:08:02Z"}, "committer": {"name": "Sebastian Peryt", "email": "speryt@gcc.gnu.org", "date": "2018-04-19T15:08:02Z"}, "message": "i386-common.c (OPTION_MASK_ISA_MOVDIRI_SET, [...]): New defines.\n\n2018-04-19  Sebastian Peryt  <sebastian.peryt@intel.com>\n\ngcc/\n\n\t* common/config/i386/i386-common.c \n\t(OPTION_MASK_ISA_MOVDIRI_SET, OPTION_MASK_ISA_MOVDIR64B_SET,\n\tOPTION_MASK_ISA_MOVDIRI_UNSET,\n\tOPTION_MASK_ISA_MOVDIR64B_UNSET): New defines.\n\t(ix86_handle_option): Handle -mmovdiri and -mmovdir64b.\n\t* config.gcc (movdirintrin.h): New header.\n\t* config/i386/cpuid.h (bit_MOVDIRI,\n\tbit_MOVDIR64B): New bits.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect -mmovdiri\n\tand -mmvodir64b.\n\t* config/i386/i386-builtin-types.def ((VOID, PUNSIGNED, UNSIGNED),\n\t(VOID, PVOID, PCVOID)): New function types.\n\t* config/i386/i386-builtin.def (__builtin_ia32_directstoreu_u32,\n\t__builtin_ia32_directstoreu_u64,\n\t__builtin_ia32_movdir64b): New builtins.\n\t* config/i386/i386-c.c (__MOVDIRI__, __MOVDIR64B__): New.\n\t* config/i386/i386.c (ix86_target_string): Added -mmovdir64b\n\tand -mmovdiri.\n\t(ix86_valid_target_attribute_inner_p): Ditto.\n\t(ix86_expand_special_args_builtin): Added VOID_FTYPE_PUNSIGNED_UNSIGNED\n\tand VOID_FTYPE_PUNSIGNED_UNSIGNED.\n\t(ix86_expand_builtin): Expand IX86_BUILTIN_MOVDIR64B.\n\t* config/i386/i386.h (TARGET_MOVDIRI, TARGET_MOVDIRI_P,\n\tTARGET_MOVDIR64B, TARGET_MOVDIR64B_P): New.\n\t* config/i386/i386.md (UNSPECV_MOVDIRI, UNSPECV_MOVDIR64B): New.\n\t(movdiri<mode>, movdir64b_<mode>): New.\n\t* config/i386/i386.opt: Add -mmovdiri and -mmovdir64b.\n\t* config/i386/immintrin.h: Include movdirintrin.h.\n\t* config/i386/movdirintrin.h: New file.\n\t* doc/invoke.texi: Added -mmovdiri and -mmovdir64b.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/movdir-1.c: New test.\n\nFrom-SVN: r259495", "tree": {"sha": "7290c8661b7d9588a63f1c05bc4c759df8cbcdc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7290c8661b7d9588a63f1c05bc4c759df8cbcdc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37d51c754a8c0c2b3216b5574cfcf3e12d786658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d51c754a8c0c2b3216b5574cfcf3e12d786658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37d51c754a8c0c2b3216b5574cfcf3e12d786658", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d51c754a8c0c2b3216b5574cfcf3e12d786658/comments", "author": {"login": "speryt", "id": 44768132, "node_id": "MDQ6VXNlcjQ0NzY4MTMy", "avatar_url": "https://avatars.githubusercontent.com/u/44768132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/speryt", "html_url": "https://github.com/speryt", "followers_url": "https://api.github.com/users/speryt/followers", "following_url": "https://api.github.com/users/speryt/following{/other_user}", "gists_url": "https://api.github.com/users/speryt/gists{/gist_id}", "starred_url": "https://api.github.com/users/speryt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/speryt/subscriptions", "organizations_url": "https://api.github.com/users/speryt/orgs", "repos_url": "https://api.github.com/users/speryt/repos", "events_url": "https://api.github.com/users/speryt/events{/privacy}", "received_events_url": "https://api.github.com/users/speryt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca98e4c5d0e87b5305ab30591509ffc64300abd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca98e4c5d0e87b5305ab30591509ffc64300abd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca98e4c5d0e87b5305ab30591509ffc64300abd4"}], "stats": {"total": 272, "additions": 264, "deletions": 8}, "files": [{"sha": "5ea65e79bf0f42d8bb082af5494c2409734480cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -1,3 +1,36 @@\n+2018-04-19  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* common/config/i386/i386-common.c \n+\t(OPTION_MASK_ISA_MOVDIRI_SET, OPTION_MASK_ISA_MOVDIR64B_SET,\n+\tOPTION_MASK_ISA_MOVDIRI_UNSET,\n+\tOPTION_MASK_ISA_MOVDIR64B_UNSET): New defines.\n+\t(ix86_handle_option): Handle -mmovdiri and -mmovdir64b.\n+\t* config.gcc (movdirintrin.h): New header.\n+\t* config/i386/cpuid.h (bit_MOVDIRI,\n+\tbit_MOVDIR64B): New bits.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect -mmovdiri\n+\tand -mmvodir64b.\n+\t* config/i386/i386-builtin-types.def ((VOID, PUNSIGNED, UNSIGNED),\n+\t(VOID, PVOID, PCVOID)): New function types.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_directstoreu_u32,\n+\t__builtin_ia32_directstoreu_u64,\n+\t __builtin_ia32_movdir64b): New builtins.\n+\t* config/i386/i386-c.c (__MOVDIRI__, __MOVDIR64B__): New.\n+\t* config/i386/i386.c (ix86_target_string): Added -mmovdir64b\n+\tand -mmovdiri.\n+\t(ix86_valid_target_attribute_inner_p): Ditto.\n+\t(ix86_expand_special_args_builtin): Added VOID_FTYPE_PUNSIGNED_UNSIGNED\n+\tand VOID_FTYPE_PUNSIGNED_UNSIGNED.\n+\t(ix86_expand_builtin): Expand IX86_BUILTIN_MOVDIR64B.\n+\t* config/i386/i386.h (TARGET_MOVDIRI, TARGET_MOVDIRI_P,\n+\tTARGET_MOVDIR64B, TARGET_MOVDIR64B_P): New.\n+\t* config/i386/i386.md (UNSPECV_MOVDIRI, UNSPECV_MOVDIR64B): New.\n+\t(movdiri<mode>, movdir64b_<mode>): New.\n+\t* config/i386/i386.opt: Add -mmovdiri and -mmovdir64b.\n+\t* config/i386/immintrin.h: Include movdirintrin.h.\n+\t* config/i386/movdirintrin.h: New file.\n+\t* doc/invoke.texi: Added -mmovdiri and -mmovdir64b.\n+\n 2018-04-19  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/85455"}, {"sha": "0bb2783cfabe016ff0c10b6a2f1cad1e095366db", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -151,6 +151,8 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_SHSTK_SET OPTION_MASK_ISA_SHSTK\n #define OPTION_MASK_ISA_VAES_SET OPTION_MASK_ISA_VAES\n #define OPTION_MASK_ISA_VPCLMULQDQ_SET OPTION_MASK_ISA_VPCLMULQDQ\n+#define OPTION_MASK_ISA_MOVDIRI_SET OPTION_MASK_ISA_MOVDIRI\n+#define OPTION_MASK_ISA_MOVDIR64B_SET OPTION_MASK_ISA_MOVDIR64B\n \n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n@@ -226,6 +228,8 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_SHSTK_UNSET OPTION_MASK_ISA_SHSTK\n #define OPTION_MASK_ISA_VAES_UNSET OPTION_MASK_ISA_VAES\n #define OPTION_MASK_ISA_VPCLMULQDQ_UNSET OPTION_MASK_ISA_VPCLMULQDQ\n+#define OPTION_MASK_ISA_MOVDIRI_UNSET OPTION_MASK_ISA_MOVDIRI\n+#define OPTION_MASK_ISA_MOVDIR64B_UNSET OPTION_MASK_ISA_MOVDIR64B\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -596,6 +600,32 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mmovdiri:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MOVDIRI_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_MOVDIRI_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_MOVDIRI_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_MOVDIRI_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mmovdir64b:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_MOVDIR64B_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_MOVDIR64B_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_MOVDIR64B_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_MOVDIR64B_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mavx5124fmaps:\n       if (value)\n \t{"}, {"sha": "e58494c1c1737aa049960b0a15739d84a65416a0", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -383,7 +383,7 @@ i[34567]86-*-*)\n \t\t       avx512vbmi2vlintrin.h avx512vnniintrin.h\n \t\t       avx512vnnivlintrin.h vaesintrin.h vpclmulqdqintrin.h\n \t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\n-\t\t       pconfigintrin.h wbnoinvdintrin.h\"\n+\t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -412,7 +412,7 @@ x86_64-*-*)\n \t\t       avx512vbmi2vlintrin.h avx512vnniintrin.h\n \t\t       avx512vnnivlintrin.h vaesintrin.h vpclmulqdqintrin.h\n \t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\n-\t\t       pconfigintrin.h wbnoinvdintrin.h\"\n+\t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "a26c5e4979509d199dcb256129d86873254432c4", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -107,6 +107,8 @@\n #define bit_AVX512BITALG\t(1 << 12)\n #define bit_AVX512VPOPCNTDQ\t(1 << 14)\n #define bit_RDPID\t(1 << 22)\n+#define bit_MOVDIRI\t(1 << 27)\n+#define bit_MOVDIR64B\t(1 << 28)\n \n /* %edx */\n #define bit_AVX5124VNNIW (1 << 2)"}, {"sha": "19db252dfc08571ccffdb0db69e23c1794ac8376", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -423,6 +423,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_ibt = 0, has_shstk = 0;\n   unsigned int has_avx512vnni = 0, has_vaes = 0;\n   unsigned int has_vpclmulqdq = 0;\n+  unsigned int has_movdiri = 0, has_movdir64b = 0;\n \n   bool arch;\n \n@@ -518,6 +519,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_vaes = ecx & bit_VAES;\n       has_vpclmulqdq = ecx & bit_VPCLMULQDQ;\n       has_avx512bitalg = ecx & bit_AVX512BITALG;\n+      has_movdiri = ecx & bit_MOVDIRI;\n+      has_movdir64b = ecx & bit_MOVDIR64B;\n \n       has_avx5124vnniw = edx & bit_AVX5124VNNIW;\n       has_avx5124fmaps = edx & bit_AVX5124FMAPS;\n@@ -1097,6 +1100,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *vaes = has_vaes ? \" -mvaes\" : \" -mno-vaes\";\n       const char *vpclmulqdq = has_vpclmulqdq ? \" -mvpclmulqdq\" : \" -mno-vpclmulqdq\";\n       const char *avx512bitalg = has_avx512bitalg ? \" -mavx512bitalg\" : \" -mno-avx512bitalg\";\n+      const char *movdiri = has_movdiri ? \" -mmovdiri\" : \" -mno-movdiri\";\n+      const char *movdir64b = has_movdir64b ? \" -mmovdir64b\" : \" -mno-movdir64b\";\n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, sgx, bmi2,\n@@ -1109,7 +1114,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\tavx512ifma, avx512vbmi, avx5124fmaps, avx5124vnniw,\n \t\t\tclwb, mwaitx, clzero, pku, rdpid, gfni, ibt, shstk,\n \t\t\tavx512vbmi2, avx512vnni, vaes, vpclmulqdq,\n-\t\t\tavx512bitalg, NULL);\n+\t\t\tavx512bitalg, movdiri, movdir64b, NULL);\n     }\n \n done:"}, {"sha": "eec01a2b6b9904607201a1d41ab8a795e688f043", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -531,6 +531,8 @@ DEF_FUNCTION_TYPE (VOID, PFLOAT, V4SF)\n DEF_FUNCTION_TYPE (VOID, PFLOAT, V8SF)\n DEF_FUNCTION_TYPE (VOID, PFLOAT, V16SF)\n DEF_FUNCTION_TYPE (VOID, PINT, INT)\n+DEF_FUNCTION_TYPE (VOID, PUNSIGNED, UNSIGNED)\n+DEF_FUNCTION_TYPE (VOID, PVOID, PCVOID)\n DEF_FUNCTION_TYPE (VOID, PLONGLONG, LONGLONG)\n DEF_FUNCTION_TYPE (VOID, PULONGLONG, ULONGLONG)\n DEF_FUNCTION_TYPE (VOID, PV2SI, V2SI)"}, {"sha": "1b9c63a16dbb3d4bd08d09044aa91362537d23c6", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -417,6 +417,10 @@ BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv8\n \n BDESC (0, CODE_FOR_wbinvd, \"__builtin_ia32_wbinvd\", IX86_BUILTIN_WBINVD, UNKNOWN, (int) VOID_FTYPE_VOID)\n \n+/* MOVDIRI.  */\n+BDESC (OPTION_MASK_ISA_MOVDIRI, CODE_FOR_movdirisi, \"__builtin_ia32_directstoreu_u32\", IX86_BUILTIN_MOVDIRISI32, UNKNOWN, (int) VOID_FTYPE_PUNSIGNED_UNSIGNED)\n+BDESC (OPTION_MASK_ISA_MOVDIRI | OPTION_MASK_ISA_64BIT, CODE_FOR_movdiridi, \"__builtin_ia32_directstoreu_u64\", IX86_BUILTIN_MOVDIRIDI64, UNKNOWN, (int) VOID_FTYPE_PULONGLONG_ULONGLONG)\n+\n BDESC_END (SPECIAL_ARGS, ARGS)\n \n /* Builtins with variable number of arguments.  */\n@@ -2841,6 +2845,7 @@ BDESC_END (ARGS2, SPECIAL_ARGS2)\n \n BDESC_FIRST (special_args2, SPECIAL_ARGS2,\n \tOPTION_MASK_ISA_WBNOINVD, CODE_FOR_wbnoinvd, \"__builtin_ia32_wbnoinvd\", IX86_BUILTIN_WBNOINVD, UNKNOWN, (int) VOID_FTYPE_VOID)\n+BDESC (OPTION_MASK_ISA_MOVDIR64B, CODE_FOR_nothing, \"__builtin_ia32_movdir64b\", IX86_BUILTIN_MOVDIR64B, UNKNOWN, (int) VOID_FTYPE_PVOID_PCVOID)\n \n BDESC_END (SPECIAL_ARGS2, MPX)\n "}, {"sha": "b0bdaf8963acbe4508e435c2cdac55785e4ca8ae", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -515,6 +515,10 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__VAES__\");\n   if (isa_flag & OPTION_MASK_ISA_VPCLMULQDQ)\n     def_or_undef (parse_in, \"__VPCLMULQDQ__\");\n+  if (isa_flag & OPTION_MASK_ISA_MOVDIRI)\n+    def_or_undef (parse_in, \"__MOVDIRI__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_MOVDIR64B)\n+    def_or_undef (parse_in, \"__MOVDIR64B__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "ea221d6a36b6c93ca9286775c1477943f2d1288f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -2770,7 +2770,8 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-mhle\",\t\tOPTION_MASK_ISA_HLE },\n     { \"-mmovbe\",\tOPTION_MASK_ISA_MOVBE },\n     { \"-mclzero\",\tOPTION_MASK_ISA_CLZERO },\n-    { \"-mmwaitx\",\tOPTION_MASK_ISA_MWAITX }\n+    { \"-mmwaitx\",\tOPTION_MASK_ISA_MWAITX },\n+    { \"-mmovdir64b\",\tOPTION_MASK_ISA_MOVDIR64B }\n   };\n   static struct ix86_target_opts isa_opts[] =\n   {\n@@ -2833,7 +2834,8 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-mlwp\",\t\tOPTION_MASK_ISA_LWP },\n     { \"-mfxsr\",\t\tOPTION_MASK_ISA_FXSR },\n     { \"-mclwb\",\t\tOPTION_MASK_ISA_CLWB },\n-    { \"-mshstk\",\tOPTION_MASK_ISA_SHSTK }\n+    { \"-mshstk\",\tOPTION_MASK_ISA_SHSTK },\n+    { \"-mmovdiri\",\tOPTION_MASK_ISA_MOVDIRI }\n   };\n \n   /* Flag options.  */\n@@ -5419,6 +5421,8 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"shstk\",\tOPT_mshstk),\n     IX86_ATTR_ISA (\"vaes\",\tOPT_mvaes),\n     IX86_ATTR_ISA (\"vpclmulqdq\", OPT_mvpclmulqdq),\n+    IX86_ATTR_ISA (\"movdiri\", OPT_mmovdiri),\n+    IX86_ATTR_ISA (\"movdir64b\", OPT_mmovdir64b),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -35997,6 +36001,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case VOID_FTYPE_PDOUBLE_V2DF:\n     case VOID_FTYPE_PLONGLONG_LONGLONG:\n     case VOID_FTYPE_PULONGLONG_ULONGLONG:\n+    case VOID_FTYPE_PUNSIGNED_UNSIGNED:\n     case VOID_FTYPE_PINT_INT:\n       nargs = 1;\n       klass = store;\n@@ -36026,6 +36031,12 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \t  break;\n \t}\n       break;\n+    case VOID_FTYPE_PVOID_PCVOID:\n+\tnargs = 1;\n+\tklass = store;\n+\tmemory = 0;\n+\n+\tbreak;\n     case V4SF_FTYPE_V4SF_PCV2SF:\n     case V2DF_FTYPE_V2DF_PCDOUBLE:\n       nargs = 2;\n@@ -37166,6 +37177,24 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       emit_move_insn (target, op0);\n       return target;\n \n+    case IX86_BUILTIN_MOVDIR64B:\n+\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      arg1 = CALL_EXPR_ARG (exp, 1);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+      mode0 = (TARGET_64BIT ? DImode : SImode);\n+\n+      op0 = force_reg (mode0, op0);\n+      if (!memory_operand (op1, mode0))\n+\top1 = gen_rtx_MEM (mode0, op1);\n+\n+      insn = (TARGET_64BIT\n+\t\t? gen_movdir64b_di (op0, op1)\n+\t\t: gen_movdir64b_si (op0, op1));\n+      emit_insn (insn);\n+      return 0;\n+\n     case IX86_BUILTIN_FXSAVE:\n     case IX86_BUILTIN_FXRSTOR:\n     case IX86_BUILTIN_FXSAVE64:"}, {"sha": "0b0f0d21942307c39e2807ae3835a212afdc6405", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -187,6 +187,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_IBT_P(x)\tTARGET_ISA_IBT_P(x)\n #define TARGET_SHSTK\tTARGET_ISA_SHSTK\n #define TARGET_SHSTK_P(x)\tTARGET_ISA_SHSTK_P(x)\n+#define TARGET_MOVDIRI\tTARGET_ISA_MOVDIRI\n+#define TARGET_MOVDIRI_P(x) TARGET_ISA_MOVDIRI_P(x)\n+#define TARGET_MOVDIR64B\tTARGET_ISA_MOVDIR64B\n+#define TARGET_MOVDIR64B_P(x) TARGET_ISA_MOVDIR64B_P(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)"}, {"sha": "fb5dcb8ecfe9956f7f13ac6294585caf390333b2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -289,6 +289,8 @@\n   UNSPECV_WRUSS\n   UNSPECV_SETSSBSY\n   UNSPECV_CLRSSBSY\n+  UNSPECV_MOVDIRI\n+  UNSPECV_MOVDIR64B\n ])\n \n ;; Constants to represent rounding modes in the ROUND instruction\n@@ -20697,6 +20699,22 @@\n   \"wbnoinvd\"\n   [(set_attr \"type\" \"other\")])\n \n+(define_insn \"movdiri<mode>\"\n+  [(unspec_volatile:SWI48[(match_operand:SWI48 0 \"memory_operand\" \"m\")\n+\t(match_operand:SWI48 1 \"register_operand\" \"r\")]\n+\t\t   UNSPECV_MOVDIRI)]\n+  \"TARGET_MOVDIRI\"\n+  \"movdiri\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"other\")])\n+\n+(define_insn \"movdir64b_<mode>\"\n+  [(unspec_volatile:SWI48[(match_operand:SWI48 0 \"register_operand\" \"r\")\n+\t(match_operand:SWI48 1 \"memory_operand\")]\n+\t\t UNSPECV_MOVDIR64B)]\n+  \"TARGET_MOVDIR64B\"\n+  \"movdir64b\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"other\")])\n+\n (include \"mmx.md\")\n (include \"sse.md\")\n (include \"sync.md\")"}, {"sha": "95a52f975c5f1b252858804da22d2a028e02fd6a", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -1057,3 +1057,11 @@ Enum(indirect_branch) String(thunk-extern) Value(indirect_branch_thunk_extern)\n mindirect-branch-register\n Target Report Var(ix86_indirect_branch_register) Init(0)\n Force indirect call and jump via register.\n+\n+mmovdiri\n+Target Report Mask(ISA_MOVDIRI) Var(ix86_isa_flags) Save\n+Support MOVDIRI built-in functions and code generation.\n+\n+mmovdir64b\n+Target Report Mask(ISA_MOVDIR64B) Var(ix86_isa_flags2) Save\n+Support MOVDIR64B built-in functions and code generation."}, {"sha": "63c5e5963ae4596df91f692f073f7def292ce1f6", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -110,6 +110,8 @@\n \n #include <vpclmulqdqintrin.h>\n \n+#include <movdirintrin.h>\n+\n extern __inline void\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _wbinvd (void)"}, {"sha": "8b4d0b35783f5c73b10170f3251744cdaaf9a4ad", "filename": "gcc/config/i386/movdirintrin.h", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fmovdirintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fconfig%2Fi386%2Fmovdirintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmovdirintrin.h?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -0,0 +1,74 @@\n+/* Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _IMMINTRIN_H_INCLUDED\n+# error \"Never use <movdirintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _MOVDIRINTRIN_H_INCLUDED\n+#define _MOVDIRINTRIN_H_INCLUDED\n+\n+#ifndef __MOVDIRI__\n+#pragma GCC push_options\n+#pragma GCC target (\"movdiri\")\n+#define __DISABLE_MOVDIRI__\n+#endif /* __MOVDIRI__ */\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_directstoreu_u32 (void * __P, unsigned int __A)\n+{\n+  __builtin_ia32_directstoreu_u32 ((unsigned int *)__P, __A);\n+}\n+#ifdef __x86_64__\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_directstoreu_u64 (void * __P, unsigned long long __A)\n+{\n+  __builtin_ia32_directstoreu_u64 ((unsigned long long *)__P, __A);\n+}\n+#endif\n+\n+#ifdef __DISABLE_MOVDIRI__\n+#undef __DISABLE_MOVDIRI__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_MOVDIRI__ */\n+\n+#ifndef __MOVDIR64B__\n+#pragma GCC push_options\n+#pragma GCC target (\"movdir64b\")\n+#define __DISABLE_MOVDIR64B__\n+#endif /* __MOVDIR64B__ */\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_movdir64b (void * __P, const void * __Q)\n+{\n+  __builtin_ia32_movdir64b (__P, __Q);\n+}\n+\n+#ifdef __DISABLE_MOVDIR64B__\n+#undef __DISABLE_MOVDIR64B__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_MOVDIR64B__ */\n+#endif /* _MOVDIRINTRIN_H_INCLUDED.  */"}, {"sha": "bf7a2a8bd808c7b447b4ed1bbf14128b768d3693", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -1262,7 +1262,7 @@ See RS/6000 and PowerPC Options.\n -mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt  -mrtm  -mlwp  -mmpx  @gol\n -mmwaitx  -mclzero  -mpku  -mthreads -mgfni  -mvaes  @gol\n -mcet -mibt -mshstk -mforce-indirect-call -mavx512vbmi2 @gol\n--mvpclmulqdq -mavx512bitalg -mavx512vpopcntdq @gol\n+-mvpclmulqdq -mavx512bitalg -mmovdiri -mmovdir64b -mavx512vpopcntdq @gol\n -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mmemcpy-strategy=@var{strategy}  -mmemset-strategy=@var{strategy} @gol\n@@ -27314,15 +27314,21 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mavx512bitalg\n @opindex mavx512bitalg\n @need 200\n+@itemx -mmovdiri\n+@opindex mmovdiri\n+@need 200\n+@itemx -mmovdir64b\n+@opindex mmovdir64b\n+@need 200\n @itemx -mavx512vpopcntdq\n @opindex mavx512vpopcntdq\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AVX512F, AVX512PF, AVX512ER, AVX512CD,\n SHA, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM,\n AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, BMI, BMI2, VAES,\n FXSR, XSAVE, XSAVEOPT, LZCNT, RTM, MPX, MWAITX, PKU, IBT, SHSTK, AVX512VBMI2,\n-GFNI, VPCLMULQDQ, AVX512BITALG, AVX512VPOPCNTDQ3DNow!@: or enhanced 3DNow!@:\n-extended instruction sets.\n+GFNI, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B,\n+AVX512VPOPCNTDQ3DNow!@: or enhanced 3DNow!@: extended instruction sets.\n Each has a corresponding @option{-mno-} option to disable use of these\n instructions.\n "}, {"sha": "0af4982f565abc72c3ba3701f0bf1911b35376ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -1,3 +1,7 @@\n+2018-04-19  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* gcc.target/i386/movdir-1.c: New test.\n+\n 2018-04-19  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/85455"}, {"sha": "ebd3e2d27af4d945268133865e77ed078fd087ef", "filename": "gcc/testsuite/gcc.target/i386/movdir-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovdir-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d51c754a8c0c2b3216b5574cfcf3e12d786658/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovdir-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovdir-1.c?ref=37d51c754a8c0c2b3216b5574cfcf3e12d786658", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mmovdir64b -mmovdiri -O2\" } */\n+/* { dg-final { scan-assembler-times \"movdiri\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movdiri\" 2 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"movdir64b\\[ \\\\t\\]\" } } */\n+\n+#include <x86intrin.h>\n+\n+unsigned int w;\n+void *x;\n+unsigned long long q, *z;\n+\n+int\n+main ()\n+{\n+\n+   unsigned int array[] = {1, 2, 3, 4, 5};\n+   unsigned int *ap = &w;\n+\n+   _directstoreu_u32(x, w);\n+\n+#ifdef __x86_64__\n+   _directstoreu_u64(z, q);\n+#endif\n+\n+   _movdir64b(ap, array);\n+\n+return 0;\n+}\n+"}]}