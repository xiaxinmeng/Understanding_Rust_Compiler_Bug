{"sha": "bfe5f951ce9d7fb205aa08d5a6dad699398417d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZlNWY5NTFjZTlkN2ZiMjA1YWEwOGQ1YTZkYWQ2OTkzOTg0MTdkOQ==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-10-08T21:55:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-24T10:16:07Z"}, "message": "[Ada] Reuse Is_Packed_Array where possible\n\ngcc/ada/\n\n\t* exp_attr.adb, exp_ch4.adb, exp_intr.adb, sem_ch8.adb,\n\tsem_res.adb, sem_type.adb, sem_util.adb: Reuse Is_Packed_Array.", "tree": {"sha": "3c1be01a834c087378917aa27e2804b3102b4fb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c1be01a834c087378917aa27e2804b3102b4fb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfe5f951ce9d7fb205aa08d5a6dad699398417d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfe5f951ce9d7fb205aa08d5a6dad699398417d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfe5f951ce9d7fb205aa08d5a6dad699398417d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfe5f951ce9d7fb205aa08d5a6dad699398417d9/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb9d41eb252c44feeda1b137aca593a521b2b1a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb9d41eb252c44feeda1b137aca593a521b2b1a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb9d41eb252c44feeda1b137aca593a521b2b1a7"}], "stats": {"total": 33, "additions": 12, "deletions": 21}, "files": [{"sha": "cabe891ade0ea8b09a01e513f797b593fa88b50b", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe5f951ce9d7fb205aa08d5a6dad699398417d9/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe5f951ce9d7fb205aa08d5a6dad699398417d9/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=bfe5f951ce9d7fb205aa08d5a6dad699398417d9", "patch": "@@ -4235,7 +4235,7 @@ package body Exp_Attr is\n       begin\n          --  Processing for packed array types\n \n-         if Is_Array_Type (Ptyp) and then Is_Packed (Ptyp) then\n+         if Is_Packed_Array (Ptyp) then\n             Ityp := Get_Index_Subtype (N);\n \n             --  If the index type, Ityp, is an enumeration type with holes,\n@@ -4333,7 +4333,7 @@ package body Exp_Attr is\n                Xtyp : Entity_Id;\n \n             begin\n-               if Is_Array_Type (Dtyp) and then Is_Packed (Dtyp) then\n+               if Is_Packed_Array (Dtyp) then\n                   Xtyp := Get_Index_Subtype (N);\n \n                   Rewrite (N,\n@@ -7869,8 +7869,7 @@ package body Exp_Attr is\n \n          if Is_Entity_Name (Pref)\n            and then Is_Formal (Entity (Pref))\n-           and then Is_Array_Type (Ptyp)\n-           and then Is_Packed (Ptyp)\n+           and then Is_Packed_Array (Ptyp)\n          then\n             Rewrite (N,\n               Make_Attribute_Reference (Loc,\n@@ -7884,9 +7883,8 @@ package body Exp_Attr is\n          --  type, but also a hint to the actual constrained type.\n \n          elsif Nkind (Pref) = N_Explicit_Dereference\n-           and then Is_Array_Type (Ptyp)\n+           and then Is_Packed_Array (Ptyp)\n            and then not Is_Constrained (Ptyp)\n-           and then Is_Packed (Ptyp)\n          then\n             Set_Actual_Designated_Subtype (Pref, Get_Actual_Subtype (Pref));\n "}, {"sha": "102f7ae6bd6625c030bacc73b97ba13312f5f112", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe5f951ce9d7fb205aa08d5a6dad699398417d9/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe5f951ce9d7fb205aa08d5a6dad699398417d9/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=bfe5f951ce9d7fb205aa08d5a6dad699398417d9", "patch": "@@ -1268,9 +1268,8 @@ package body Exp_Ch4 is\n          --  expression with a constrained subtype in order to compute the\n          --  proper size for the allocator.\n \n-         if Is_Array_Type (T)\n+         if Is_Packed_Array (T)\n            and then not Is_Constrained (T)\n-           and then Is_Packed (T)\n          then\n             declare\n                ConstrT      : constant Entity_Id := Make_Temporary (Loc, 'A');"}, {"sha": "7fc00c706f2c7490c3816da3617c5998718c3975", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe5f951ce9d7fb205aa08d5a6dad699398417d9/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe5f951ce9d7fb205aa08d5a6dad699398417d9/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=bfe5f951ce9d7fb205aa08d5a6dad699398417d9", "patch": "@@ -1229,9 +1229,8 @@ package body Exp_Intr is\n \n          if Is_Class_Wide_Type (Desig_Typ)\n            or else\n-            (Is_Array_Type (Desig_Typ)\n-              and then not Is_Constrained (Desig_Typ)\n-              and then Is_Packed (Desig_Typ))\n+            (Is_Packed_Array (Desig_Typ)\n+              and then not Is_Constrained (Desig_Typ))\n          then\n             declare\n                Deref    : constant Node_Id :="}, {"sha": "9404d6884af51079173fbc47d91d0c9a01001f1b", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe5f951ce9d7fb205aa08d5a6dad699398417d9/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe5f951ce9d7fb205aa08d5a6dad699398417d9/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=bfe5f951ce9d7fb205aa08d5a6dad699398417d9", "patch": "@@ -5659,8 +5659,7 @@ package body Sem_Ch8 is\n                --  happens for trees generated from Exp_Pakd, where expressions\n                --  can be deliberately \"mis-typed\" to the packed array type.\n \n-               if Is_Array_Type (Entyp)\n-                 and then Is_Packed (Entyp)\n+               if Is_Packed_Array (Entyp)\n                  and then Present (Etype (N))\n                  and then Etype (N) = Packed_Array_Impl_Type (Entyp)\n                then"}, {"sha": "f522da005b103d2af230f43993b3554e8e3fecdc", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe5f951ce9d7fb205aa08d5a6dad699398417d9/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe5f951ce9d7fb205aa08d5a6dad699398417d9/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=bfe5f951ce9d7fb205aa08d5a6dad699398417d9", "patch": "@@ -8849,8 +8849,7 @@ package body Sem_Res is\n       --  actual subtype. We also exclude generated code (which builds actual\n       --  subtypes directly if they are needed).\n \n-      if Is_Array_Type (Etype (N))\n-        and then Is_Packed (Etype (N))\n+      if Is_Packed_Array (Etype (N))\n         and then not Is_Constrained (Etype (N))\n         and then Nkind (Parent (N)) /= N_Attribute_Reference\n         and then Comes_From_Source (N)"}, {"sha": "8dbfa182923ffa9d26e58f18a6b064502b5bd269", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe5f951ce9d7fb205aa08d5a6dad699398417d9/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe5f951ce9d7fb205aa08d5a6dad699398417d9/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=bfe5f951ce9d7fb205aa08d5a6dad699398417d9", "patch": "@@ -1167,16 +1167,14 @@ package body Sem_Type is\n       --  useless unchecked conversions, and since this can only arise in\n       --  (known correct) expanded code, no harm is done.\n \n-      elsif Is_Array_Type (T2)\n-        and then Is_Packed (T2)\n+      elsif Is_Packed_Array (T2)\n         and then T1 = Packed_Array_Impl_Type (T2)\n       then\n          return True;\n \n       --  Similarly an array type covers its corresponding packed array type\n \n-      elsif Is_Array_Type (T1)\n-        and then Is_Packed (T1)\n+      elsif Is_Packed_Array (T1)\n         and then T2 = Packed_Array_Impl_Type (T1)\n       then\n          return True;"}, {"sha": "db348ec75509278c78511efa8f880b27dde3f432", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe5f951ce9d7fb205aa08d5a6dad699398417d9/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe5f951ce9d7fb205aa08d5a6dad699398417d9/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=bfe5f951ce9d7fb205aa08d5a6dad699398417d9", "patch": "@@ -20450,8 +20450,7 @@ package body Sem_Util is\n \n          elsif Nkind (P) = N_Type_Conversion\n            and then not Comes_From_Source (P)\n-           and then Is_Array_Type (Etype (P))\n-           and then Is_Packed (Etype (P))\n+           and then Is_Packed_Array (Etype (P))\n          then\n             return Is_Variable (Expression (P));\n "}]}