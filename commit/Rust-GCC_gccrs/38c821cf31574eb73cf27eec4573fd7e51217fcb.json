{"sha": "38c821cf31574eb73cf27eec4573fd7e51217fcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhjODIxY2YzMTU3NGViNzNjZjI3ZWVjNDU3M2ZkN2U1MTIxN2ZjYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-05-17T15:22:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-05-17T15:22:24Z"}, "message": "re PR rtl-optimization/57281 (x86_64-linux loop fails to terminate at -O3 -m32)\n\n\tPR rtl-optimization/57281\n\tPR rtl-optimization/57300\n\t* config/i386/i386.md (extendsidi2_1 dead reg splitter): Remove.\n\t(extendsidi2_1 peephole2s): Add instead 2 new peephole2s, that undo\n\twhat the other splitter did if the registers are dead.\n\n\t* gcc.dg/pr57300.c: New test.\n\t* gcc.c-torture/execute/pr57281.c: New test.\n\nFrom-SVN: r199018", "tree": {"sha": "3d0d13cf416543870652063886deb0cba04a770f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d0d13cf416543870652063886deb0cba04a770f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38c821cf31574eb73cf27eec4573fd7e51217fcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38c821cf31574eb73cf27eec4573fd7e51217fcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38c821cf31574eb73cf27eec4573fd7e51217fcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38c821cf31574eb73cf27eec4573fd7e51217fcb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a293391eca5ddea7bc6debb411a605b7cc1ee52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a293391eca5ddea7bc6debb411a605b7cc1ee52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a293391eca5ddea7bc6debb411a605b7cc1ee52"}], "stats": {"total": 117, "additions": 101, "deletions": 16}, "files": [{"sha": "4c406123b5fcfe44b6a0503eb327352f494d723f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38c821cf31574eb73cf27eec4573fd7e51217fcb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38c821cf31574eb73cf27eec4573fd7e51217fcb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38c821cf31574eb73cf27eec4573fd7e51217fcb", "patch": "@@ -1,3 +1,11 @@\n+2013-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/57281\n+\tPR rtl-optimization/57300\n+\t* config/i386/i386.md (extendsidi2_1 dead reg splitter): Remove.\n+\t(extendsidi2_1 peephole2s): Add instead 2 new peephole2s, that undo\n+\twhat the other splitter did if the registers are dead.\n+\n 2013-05-17  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-alias.c (stmt_kills_ref_p_1): Properly compare"}, {"sha": "ce77f15f00923af1863b78fe5e33035c5e65a25f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38c821cf31574eb73cf27eec4573fd7e51217fcb/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38c821cf31574eb73cf27eec4573fd7e51217fcb/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=38c821cf31574eb73cf27eec4573fd7e51217fcb", "patch": "@@ -3332,22 +3332,8 @@\n   \"!TARGET_64BIT\"\n   \"#\")\n \n-;; Extend to memory case when source register does die.\n-(define_split\n-  [(set (match_operand:DI 0 \"memory_operand\")\n-\t(sign_extend:DI (match_operand:SI 1 \"register_operand\")))\n-   (clobber (reg:CC FLAGS_REG))\n-   (clobber (match_operand:SI 2 \"register_operand\"))]\n-  \"(reload_completed\n-    && dead_or_set_p (insn, operands[1])\n-    && !reg_mentioned_p (operands[1], operands[0]))\"\n-  [(set (match_dup 3) (match_dup 1))\n-   (parallel [(set (match_dup 1) (ashiftrt:SI (match_dup 1) (const_int 31)))\n-\t      (clobber (reg:CC FLAGS_REG))])\n-   (set (match_dup 4) (match_dup 1))]\n-  \"split_double_mode (DImode, &operands[0], 1, &operands[3], &operands[4]);\")\n-\n-;; Extend to memory case when source register does not die.\n+;; Split the memory case.  If the source register doesn't die, it will stay\n+;; this way, if it does die, following peephole2s take care of it.\n (define_split\n   [(set (match_operand:DI 0 \"memory_operand\")\n \t(sign_extend:DI (match_operand:SI 1 \"register_operand\")))\n@@ -3376,6 +3362,44 @@\n   DONE;\n })\n \n+;; Peepholes for the case where the source register does die, after\n+;; being split with the above splitter.\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"memory_operand\")\n+\t(match_operand:SI 1 \"register_operand\"))\n+   (set (match_operand:SI 2 \"register_operand\") (match_dup 1))\n+   (parallel [(set (match_dup 2)\n+\t\t   (ashiftrt:SI (match_dup 2) (const_int 31)))\n+\t       (clobber (reg:CC FLAGS_REG))])\n+   (set (match_operand:SI 3 \"memory_operand\") (match_dup 2))]\n+  \"REGNO (operands[1]) != REGNO (operands[2])\n+   && peep2_reg_dead_p (2, operands[1])\n+   && peep2_reg_dead_p (4, operands[2])\n+   && !reg_mentioned_p (operands[2], operands[3])\"\n+  [(set (match_dup 0) (match_dup 1))\n+   (parallel [(set (match_dup 1) (ashiftrt:SI (match_dup 1) (const_int 31)))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (set (match_dup 3) (match_dup 1))])\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"memory_operand\")\n+\t(match_operand:SI 1 \"register_operand\"))\n+   (parallel [(set (match_operand:SI 2 \"register_operand\")\n+\t\t   (ashiftrt:SI (match_dup 1) (const_int 31)))\n+\t       (clobber (reg:CC FLAGS_REG))])\n+   (set (match_operand:SI 3 \"memory_operand\") (match_dup 2))]\n+  \"/* cltd is shorter than sarl $31, %eax */\n+   !optimize_function_for_size_p (cfun)\n+   && true_regnum (operands[1]) == AX_REG\n+   && true_regnum (operands[2]) == DX_REG\n+   && peep2_reg_dead_p (2, operands[1])\n+   && peep2_reg_dead_p (3, operands[2])\n+   && !reg_mentioned_p (operands[2], operands[3])\"\n+  [(set (match_dup 0) (match_dup 1))\n+   (parallel [(set (match_dup 1) (ashiftrt:SI (match_dup 1) (const_int 31)))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (set (match_dup 3) (match_dup 1))])\n+\n ;; Extend to register case.  Optimize case where source and destination\n ;; registers match and cases where we can use cltd.\n (define_split"}, {"sha": "599bcd159a63211ef22d6de681c132be89517936", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38c821cf31574eb73cf27eec4573fd7e51217fcb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38c821cf31574eb73cf27eec4573fd7e51217fcb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=38c821cf31574eb73cf27eec4573fd7e51217fcb", "patch": "@@ -1,3 +1,10 @@\n+2013-05-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/57281\n+\tPR rtl-optimization/57300\n+\t* gcc.dg/pr57300.c: New test.\n+\t* gcc.c-torture/execute/pr57281.c: New test.\n+\n 2013-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/18126"}, {"sha": "db3db10d9e75074069df3dd3710608cb58be7253", "filename": "gcc/testsuite/gcc.c-torture/execute/pr57281.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38c821cf31574eb73cf27eec4573fd7e51217fcb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57281.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38c821cf31574eb73cf27eec4573fd7e51217fcb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57281.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57281.c?ref=38c821cf31574eb73cf27eec4573fd7e51217fcb", "patch": "@@ -0,0 +1,25 @@\n+/* PR rtl-optimization/57281 */\n+\n+int a = 1, b, d, *e = &d;\n+long long c, *g = &c;\n+volatile long long f;\n+\n+int\n+foo (int h)\n+{\n+  int j = *g = b;\n+  return h == 0 ? j : 0;\n+}\n+\n+int\n+main ()\n+{\n+  int h = a;\n+  for (; b != -20; b--)\n+    {\n+      (int) f;\n+      *e = 0;\n+      *e = foo (h);\n+    }\n+  return 0;\n+}"}, {"sha": "13a272de59fe32ce2e8f8ee6b275468e986b4529", "filename": "gcc/testsuite/gcc.dg/pr57300.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38c821cf31574eb73cf27eec4573fd7e51217fcb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38c821cf31574eb73cf27eec4573fd7e51217fcb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57300.c?ref=38c821cf31574eb73cf27eec4573fd7e51217fcb", "patch": "@@ -0,0 +1,21 @@\n+/* PR rtl-optimization/57300 */\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-additional-options \"-msse2\" { target sse2_runtime } } */\n+\n+extern void abort (void);\n+int a, b, d[10];\n+long long c;\n+\n+int\n+main ()\n+{\n+  int e;\n+  for (e = 0; e < 10; e++)\n+    d[e] = 1;\n+  if (d[0])\n+    c = a = (b == 0 || 1 % b);\n+  if (a != 1)\n+    abort ();\n+  return 0;\n+}"}]}