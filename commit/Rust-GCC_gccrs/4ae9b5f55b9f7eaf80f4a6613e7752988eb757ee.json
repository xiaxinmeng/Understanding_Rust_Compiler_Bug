{"sha": "4ae9b5f55b9f7eaf80f4a6613e7752988eb757ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFlOWI1ZjU1YjlmN2VhZjgwZjRhNjYxM2U3NzUyOTg4ZWI3NTdlZQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-07-03T23:05:19Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-07-03T23:05:19Z"}, "message": "formatting tweaks\n\nFrom-SVN: r12393", "tree": {"sha": "33afa2ae3cff7ca09fb3fd13e67c209f1a15842d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33afa2ae3cff7ca09fb3fd13e67c209f1a15842d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ae9b5f55b9f7eaf80f4a6613e7752988eb757ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ae9b5f55b9f7eaf80f4a6613e7752988eb757ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ae9b5f55b9f7eaf80f4a6613e7752988eb757ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ae9b5f55b9f7eaf80f4a6613e7752988eb757ee/comments", "author": null, "committer": null, "parents": [{"sha": "9c51dc9c34b9a21ceb59e1a0a812476c1eafd60f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c51dc9c34b9a21ceb59e1a0a812476c1eafd60f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c51dc9c34b9a21ceb59e1a0a812476c1eafd60f"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "8f98b73dbb90788101e7e83c2909ab60de28d719", "filename": "gcc/alloca.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae9b5f55b9f7eaf80f4a6613e7752988eb757ee/gcc%2Falloca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae9b5f55b9f7eaf80f4a6613e7752988eb757ee/gcc%2Falloca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloca.c?ref=4ae9b5f55b9f7eaf80f4a6613e7752988eb757ee", "patch": "@@ -180,7 +180,7 @@ alloca (size)\n #endif\n \n   /* Reclaim garbage, defined as all alloca'd storage that\n-     was allocated from deeper in the stack than currently. */\n+     was allocated from deeper in the stack than currently.  */\n \n   {\n     register header *hp;\t/* Traverses linked list.  */\n@@ -350,7 +350,7 @@ struct stk_trailer\n \n #ifdef CRAY2\n /* Determine a \"stack measure\" for an arbitrary ADDRESS.\n-   I doubt that \"lint\" will like this much. */\n+   I doubt that \"lint\" will like this much.  */\n \n static long\n i00afunc (long *address)"}, {"sha": "fa513783fed30c2c2d9ceca2954c2f59e5e6b14b", "filename": "gcc/pexecute.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae9b5f55b9f7eaf80f4a6613e7752988eb757ee/gcc%2Fpexecute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae9b5f55b9f7eaf80f4a6613e7752988eb757ee/gcc%2Fpexecute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpexecute.c?ref=4ae9b5f55b9f7eaf80f4a6613e7752988eb757ee", "patch": "@@ -357,7 +357,7 @@ pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n       for (i=1; argv[i]; i++)\n \t{\n \t  fputc ('\\'', stdout);\n-\t  /* See if we have an argument that needs fixing. */\n+\t  /* See if we have an argument that needs fixing.  */\n \t  if (strchr(argv[i], '/'))\n \t    {\n \t      tmpname = xmalloc (256);\n@@ -366,7 +366,7 @@ pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n \t    }\n \t  for (cp = argv[i]; *cp; cp++)\n \t    {\n-\t      /* Write an Option-d escape char in front of special chars. */\n+\t      /* Write an Option-d escape char in front of special chars.  */\n \t      if (strchr(\"'+\", *cp))\n \t\tfputc ('\\266', stdout);\n \t      fputc (*cp, stdout);\n@@ -382,7 +382,7 @@ pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n \n   for (i=1; argv[i]; i++)\n     {\n-      /* See if we have an argument that needs fixing. */\n+      /* See if we have an argument that needs fixing.  */\n       if (strchr(argv[i], '/'))\n \t{\n \t  tmpname = xmalloc (256);\n@@ -393,7 +393,7 @@ pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n \tfputc ('\\'', stdout);\n       for (cp = argv[i]; *cp; cp++)\n \t{\n-\t  /* Write an Option-d escape char in front of special chars. */\n+\t  /* Write an Option-d escape char in front of special chars.  */\n \t  if (strchr(\"'+\", *cp))\n \t    fputc ('\\266', stdout);\n \t  fputc (*cp, stdout);\n@@ -408,14 +408,14 @@ pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n   /* Output commands that arrange to clean up and exit if a failure occurs.\n      We have to be careful to collect the status from the program that was\n      run, rather than some other script command.  Also, we don't exit\n-     immediately, since necessary cleanups are at the end of the script. */\n+     immediately, since necessary cleanups are at the end of the script.  */\n   fputs (\"\\tSet TmpStatus {Status}\\n\", stdout);\n   fputs (\"\\tIf {TmpStatus} != 0\\n\", stdout);\n   fputs (\"\\t\\tSet Failed {TmpStatus}\\n\", stdout);\n   fputs (\"\\tEnd\\n\", stdout);\n   fputs (\"End\\n\", stdout);\n \n-  /* We're just composing a script, can't fail here. */\n+  /* We're just composing a script, can't fail here.  */\n   return 0;\n }\n \n@@ -430,7 +430,7 @@ pwait (pid, status, flags)\n }\n \n /* Write out commands that will exit with the correct error code\n-   if something in the script failed. */\n+   if something in the script failed.  */\n \n void\n pfinish ()"}]}