{"sha": "40858b9dfb72960bff5978b1441d0f2d21ae55ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA4NThiOWRmYjcyOTYwYmZmNTk3OGIxNDQxZDBmMmQyMWFlNTViYQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2019-09-19T16:51:08Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2019-09-19T16:51:08Z"}, "message": "[ARM] Simplify logical DImode iterators\n\nFurther simplify the logical DImode expander using code iterator and\nobtab attributes.  This avoids adding unnecessary code_attr entries.\n\n    gcc/\n\t* config/arm/arm.md (<logical_op>di3): Use <optab> and <CODE>.\n\t* config/arm/iterators.md (optab): Add and, ior, xor entries.\n\t(logical_op): Remove code attribute.\n\t(logical_OP): Likewise.\n\nFrom-SVN: r275970", "tree": {"sha": "60628ffd2360ca154270d186306b7f9d8304b033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60628ffd2360ca154270d186306b7f9d8304b033"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40858b9dfb72960bff5978b1441d0f2d21ae55ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40858b9dfb72960bff5978b1441d0f2d21ae55ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40858b9dfb72960bff5978b1441d0f2d21ae55ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40858b9dfb72960bff5978b1441d0f2d21ae55ba/comments", "author": null, "committer": null, "parents": [{"sha": "9f576d304d65c184572a6f8ce7541196e5da5c1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f576d304d65c184572a6f8ce7541196e5da5c1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f576d304d65c184572a6f8ce7541196e5da5c1c"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "3be2b55523b648d9033541ff20e79e035e31f0d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40858b9dfb72960bff5978b1441d0f2d21ae55ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40858b9dfb72960bff5978b1441d0f2d21ae55ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40858b9dfb72960bff5978b1441d0f2d21ae55ba", "patch": "@@ -1,3 +1,10 @@\n+2019-09-19  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/arm/arm.md (<logical_op>di3): Use <optab> and <CODE>.\n+\t* config/arm/iterators.md (optab): Add and, ior, xor entries.\n+\t(logical_op): Remove code attribute.\n+\t(logical_OP): Likewise.\n+\n 2019-09-19  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-icf.c (sort_congruence_class_groups_by_decl_uid):"}, {"sha": "d607f88cb05ffa9cd8a47b8c8e0c53ea3a5ca411", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40858b9dfb72960bff5978b1441d0f2d21ae55ba/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40858b9dfb72960bff5978b1441d0f2d21ae55ba/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=40858b9dfb72960bff5978b1441d0f2d21ae55ba", "patch": "@@ -2039,16 +2039,16 @@\n ; operands or complex immediates, which leads to fewer LDRD/STRD instructions.\n ; So an explicit expander is needed to generate better code.\n \n-(define_expand \"<logical_op>di3\"\n+(define_expand \"<LOGICAL:optab>di3\"\n   [(set (match_operand:DI\t  0 \"s_register_operand\")\n \t(LOGICAL:DI (match_operand:DI 1 \"s_register_operand\")\n-\t\t    (match_operand:DI 2 \"arm_<logical_op>di_operand\")))]\n+\t\t    (match_operand:DI 2 \"arm_<optab>di_operand\")))]\n   \"TARGET_32BIT\"\n   {\n-      rtx low  = simplify_gen_binary (<logical_OP>, SImode,\n+      rtx low  = simplify_gen_binary (<CODE>, SImode,\n \t\t\t\t      gen_lowpart (SImode, operands[1]),\n \t\t\t\t      gen_lowpart (SImode, operands[2]));\n-      rtx high = simplify_gen_binary (<logical_OP>, SImode,\n+      rtx high = simplify_gen_binary (<CODE>, SImode,\n \t\t\t\t      gen_highpart (SImode, operands[1]),\n \t\t\t\t      gen_highpart_mode (SImode, DImode,\n \t\t\t\t\t\t\t operands[2]));"}, {"sha": "2d8ef3f5fbd5ca1a34c5dc66ddcd8780b138d5e0", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40858b9dfb72960bff5978b1441d0f2d21ae55ba/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40858b9dfb72960bff5978b1441d0f2d21ae55ba/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=40858b9dfb72960bff5978b1441d0f2d21ae55ba", "patch": "@@ -287,9 +287,6 @@\n \n (define_code_attr vfml_op [(plus \"a\") (minus \"s\")])\n \n-(define_code_attr logical_op [(ior \"ior\") (xor \"xor\") (and \"and\")])\n-(define_code_attr logical_OP [(ior \"IOR\") (xor \"XOR\") (and \"AND\")])\n-\n ;;----------------------------------------------------------------------------\n ;; Int iterators\n ;;----------------------------------------------------------------------------\n@@ -797,7 +794,14 @@\n                 (umax \"u\")])\n \n (define_code_attr cnb [(ltu \"CC_C\") (geu \"CC\")])\n-(define_code_attr optab [(ltu \"ltu\") (geu \"geu\")])\n+\n+;; Map rtl operator codes to optab names\n+(define_code_attr optab\n+ [(ltu \"ltu\")\n+  (geu \"geu\")\n+  (and \"and\")\n+  (ior \"ior\")\n+  (xor \"xor\")])\n \n ;; Assembler mnemonics for signedness of widening operations.\n (define_code_attr US [(sign_extend \"s\") (zero_extend \"u\")])"}]}