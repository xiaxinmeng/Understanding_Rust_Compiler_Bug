{"sha": "7fd9012e478d7f759500bfa32ace358227853c2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZkOTAxMmU0NzhkN2Y3NTk1MDBiZmEzMmFjZTM1ODIyNzg1M2MyYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-08-12T14:27:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-08-12T14:27:40Z"}, "message": "tree-ssa-sccvn.c (vn_nary_op_compute_hash): Also canonicalize comparison operand order and commutative ternary op operand order.\n\n2015-08-12  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (vn_nary_op_compute_hash): Also canonicalize\n\tcomparison operand order and commutative ternary op operand order.\n\t(sccvn_dom_walker::cond_stack): New state to track temporary\n\texpressions.\n\t(sccvn_dom_walker::after_dom_children): Remove tempoary expressions\n\tno longer valid.\n\t(sccvn_dom_walker::record_cond): Add a single temporary conditional\n\texpression.\n\t(sccvn_dom_walker::record_conds): Add a temporary conditional\n\texpressions and all related expressions also true/false.\n\t(sccvn_dom_walker::before_dom_children): Record temporary\n\texpressions based on the controlling condition of a single\n\tpredecessor.  When trying to simplify a conditional statement\n\tlookup expressions we might have inserted earlier.\n\n\t* gcc.dg/tree-ssa/ssa-fre-47.c: New testcase.\n\t* gcc.dg/tree-ssa/ssa-fre-48.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-fre-49.c: Likewise.\n\t* g++.dg/tree-ssa/pr61034.C: Adjust.\n\t* gcc.dg/fold-compare-2.c: Likewise.\n\t* gcc.dg/pr50763.c: Likewise.\n\t* gcc.dg/predict-3.c: Likewise.\n\t* gcc.dg/tree-ssa/20030709-2.c: Likewise.\n\t* gcc.dg/tree-ssa/pr19831-3.c: Likewise.\n\t* gcc.dg/tree-ssa/pr20657.c: Likewise.\n\t* gcc.dg/tree-ssa/pr21001.c: Likewise.\n\t* gcc.dg/tree-ssa/pr37508.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp04.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp07.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp09.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp16.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp20.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp25.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp87.c: Likewise.\n\nFrom-SVN: r226814", "tree": {"sha": "aca7b04ebfc6e0072000a94b403cb157edf421d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aca7b04ebfc6e0072000a94b403cb157edf421d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fd9012e478d7f759500bfa32ace358227853c2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fd9012e478d7f759500bfa32ace358227853c2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fd9012e478d7f759500bfa32ace358227853c2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fd9012e478d7f759500bfa32ace358227853c2b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0ba5a8b0cd64aa0d1024756bdf2c095199f289c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ba5a8b0cd64aa0d1024756bdf2c095199f289c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0ba5a8b0cd64aa0d1024756bdf2c095199f289c"}], "stats": {"total": 262, "additions": 223, "deletions": 39}, "files": [{"sha": "6028d26a38bb631eed367c0e92f8f2706e4fcc45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -1,3 +1,20 @@\n+2015-08-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (vn_nary_op_compute_hash): Also canonicalize\n+\tcomparison operand order and commutative ternary op operand order.\n+\t(sccvn_dom_walker::cond_stack): New state to track temporary\n+\texpressions.\n+\t(sccvn_dom_walker::after_dom_children): Remove tempoary expressions\n+\tno longer valid.\n+\t(sccvn_dom_walker::record_cond): Add a single temporary conditional\n+\texpression.\n+\t(sccvn_dom_walker::record_conds): Add a temporary conditional\n+\texpressions and all related expressions also true/false.\n+\t(sccvn_dom_walker::before_dom_children): Record temporary\n+\texpressions based on the controlling condition of a single\n+\tpredecessor.  When trying to simplify a conditional statement\n+\tlookup expressions we might have inserted earlier.\n+\n 2015-08-12  Yvan Roux  <yvan.roux@linaro.org>\n \n \tPR target/67127"}, {"sha": "15b0b41a7b5bec1e54a5ab4359a61a64b9f2422a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -1,3 +1,25 @@\n+2015-08-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-fre-47.c: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-fre-48.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-49.c: Likewise.\n+\t* g++.dg/tree-ssa/pr61034.C: Adjust.\n+\t* gcc.dg/fold-compare-2.c: Likewise.\n+\t* gcc.dg/pr50763.c: Likewise.\n+\t* gcc.dg/predict-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030709-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr19831-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr20657.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr21001.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr37508.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp04.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp07.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp09.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp16.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp20.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp25.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp87.c: Likewise.\n+\n 2015-08-12  Nathan Sidwell  <nathan@acm.org>\n \n \t* gcc.dg/vrp-min-max-1.c: New."}, {"sha": "628eb10278f2ee5a854382b173c4477603556b39", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr61034.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61034.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61034.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61034.C?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -43,5 +43,5 @@ bool f(I a, I b, I c, I d) {\n // This works only if everything is inlined into 'f'.\n \n // { dg-final { scan-tree-dump-times \";; Function\" 1 \"fre2\" } }\n-// { dg-final { scan-tree-dump-times \"free\" 18 \"fre2\" } }\n+// { dg-final { scan-tree-dump-times \"free\" 10 \"fre2\" } }\n // { dg-final { scan-tree-dump-times \"unreachable\" 11 \"fre2\" } }"}, {"sha": "16f0fd9cdc3ce38fd436dd9ba766aa058122b282", "filename": "gcc/testsuite/gcc.dg/fold-compare-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-compare-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-compare-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-compare-2.c?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-tail-merge -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdump-tree-fre1\" } */\n \n extern void abort (void);\n \n@@ -15,5 +15,5 @@ main(void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Removing basic block\" 2 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Removing basic block\" 2 \"fre1\" } } */\n "}, {"sha": "102056f1dcb261ec211a6c81f40c21e3c95b82ff", "filename": "gcc/testsuite/gcc.dg/pr50763.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50763.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50763.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50763.c?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-tail-merge -fno-tree-dominator-opts -fdump-tree-pre\" } */\n+/* { dg-options \"-O2 -ftree-tail-merge -fno-tree-dominator-opts\" } */\n \n int bar (int i);\n \n@@ -11,5 +11,3 @@ foo (int c, int d)\n   d = 33;\n   while (c == d);\n }\n-\n-/* { dg-final { scan-tree-dump-times \"== 33\" 2 \"pre\"} } */"}, {"sha": "e1be7cc3c9540b5ef7ce951260a3ffcb34300135", "filename": "gcc/testsuite/gcc.dg/predict-3.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-3.c?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -12,6 +12,10 @@ void foo (int bound)\n     {\n       if (i < bound - 2)\n \tglobal += bar (i);\n+      /* The following test is redundant with the loop bound check in the\n+         for stmt and thus eliminated by FRE which makes the controlled\n+\t stmt always executed and thus equivalent to 100%.  Thus the\n+\t heuristic only applies three times.  */\n       if (i <= bound)\n \tglobal += bar (i);\n       if (i + 1 < bound)\n@@ -21,4 +25,4 @@ void foo (int bound)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics: 100.0%\" 4 \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump-times \"loop iv compare heuristics: 100.0%\" 3 \"profile_estimate\"} } */"}, {"sha": "d4f42f932f1313d3ffa694855258931a2b17716f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030709-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030709-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030709-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030709-2.c?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-cddce2\" } */\n+/* { dg-options \"-O -fdump-tree-dce2\" } */\n   \n struct rtx_def;\n typedef struct rtx_def *rtx;\n@@ -42,13 +42,13 @@ get_alias_set (t)\n \n /* There should be precisely one load of ->decl.rtl.  If there is\n    more than, then the dominator optimizations failed.  */\n-/* { dg-final { scan-tree-dump-times \"->decl\\\\.rtl\" 1 \"cddce2\"} } */\n+/* { dg-final { scan-tree-dump-times \"->decl\\\\.rtl\" 1 \"dce2\"} } */\n   \n /* There should be no loads of .rtmem since the complex return statement\n    is just \"return 0\".  */\n-/* { dg-final { scan-tree-dump-times \".rtmem\" 0 \"cddce2\"} } */\n+/* { dg-final { scan-tree-dump-times \".rtmem\" 0 \"dce2\"} } */\n   \n /* There should be one IF statement (the complex return statement should\n    collapse down to a simple return 0 without any conditionals).  */\n-/* { dg-final { scan-tree-dump-times \"if \" 1 \"cddce2\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"dce2\"} } */\n "}, {"sha": "f5cb72daa330d4dd8b3155f8cf2f05a6f6edec55", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr19831-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19831-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19831-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr19831-3.c?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fno-ipa-icf -fdump-tree-optimized\" } */\n \n void test2(void)\n {"}, {"sha": "727ca4c116a1179483411cc36667b7b03b7e9297", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20657.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20657.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20657.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20657.c?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -3,7 +3,7 @@\n    statement, which was needed to eliminate the second \"if\" statement.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fno-tree-fre -fdump-tree-vrp1-details\" } */\n \n int\n foo (int a)"}, {"sha": "482d530e9ab7b30aecfb2123977051cefc0ce7d4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21001.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21001.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21001.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21001.c?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -5,7 +5,7 @@\n    range information out of the conditional.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fno-tree-fre -fdump-tree-vrp1-details\" } */\n \n int\n foo (int a)"}, {"sha": "0963cd99281a32d5992562e1b9fec97abe2f9579", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr37508.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr37508.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr37508.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr37508.c?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdump-tree-vrp1\" } */\n \n struct foo1 {\n   int i:1;\n@@ -10,9 +10,10 @@ struct foo2 {\n \n int test1 (struct foo1 *x)\n {\n-  if (x->i == 0)\n+  int i = x->i;\n+  if (i == 0)\n     return 1;\n-  else if (x->i == -1)\n+  else if (i == -1)\n     return 1;\n   return 0;\n }\n@@ -37,9 +38,10 @@ int test3 (struct foo1 *x)\n \n int test4 (struct foo2 *x)\n {\n-  if (x->i == 0)\n+  unsigned int i = x->i;\n+  if (i == 0)\n     return 1;\n-  else if (x->i == 1)\n+  else if (i == 1)\n     return 1;\n   return 0;\n }"}, {"sha": "61b7a47a1945b6a79a5f5c5b854f80c5edb63fdb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp04.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp04.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp04.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp04.c?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdump-tree-vrp1\" } */\n \n int\n foo (int a, int b)"}, {"sha": "a5bd6708d9f9bc0484131cd34f6800e07e2f8bd9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp07.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n \n int\n foo (int i, int *p)"}, {"sha": "d42a566a99f21713724fcee513db4bfbd84bcbf4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp09.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp09.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp09.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp09.c?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -std=gnu89\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdump-tree-vrp1 -std=gnu89\" } */\n \n foo (int *p)\n {"}, {"sha": "8f5d5c85b933b7d55673409dd9be34d760a2aa2e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp16.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp16.c?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdump-tree-vrp1-details\" } */\n \n \n extern void abort (void) __attribute__ ((__noreturn__));\n@@ -12,9 +12,10 @@ struct rtx_def\n int\n nonlocal_mentioned_p (rtx x)\n {\n-  if (x->code == 6 || x->code == 7)\n-    if (x->code == 7)\n-      if (x->code != 7)\n+  int code = x->code;\n+  if (code == 6 || code == 7)\n+    if (code == 7)\n+      if (code != 7)\n \tabort ();\n }\n "}, {"sha": "60d17313152c611876c20d68ee01b312e053ada8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp20.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp20.c?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fwrapv -O1 -ftree-vrp -fdump-tree-vrp1\" } */\n+/* { dg-options \"-fwrapv -O1 -fno-tree-fre -ftree-vrp -fdump-tree-vrp1\" } */\n \n extern void abort ();\n extern void exit (int);"}, {"sha": "cbc4ec354c44fb66b8fda0efba2733c5ad461986", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp25.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp25.c?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdump-tree-vrp1-details\" } */\n \n extern void abort ();\n extern void arf ();"}, {"sha": "e81dd3603b70ebf15c9e419da106d0a751d0478a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp87.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp87.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp87.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp87.c?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -1,8 +1,8 @@\n /* Setting LOGICAL_OP_NON_SHORT_CIRCUIT to 0 leads to two conditional jumps\n-   when evaluating an && condition.  VRP is not able to optimize this.  */\n+   when evaluating an && condition.  */\n /* { dg-do compile { target { ! { logical_op_short_circuit || { m68k*-*-* mmix*-*-* mep*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* } } } } } */\n \n-/* { dg-options \"-O2 -fdump-tree-vrp2-details -fdump-tree-cddce2-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-fre1-details\" } */\n \n struct bitmap_head_def;\n typedef struct bitmap_head_def *bitmap;\n@@ -74,9 +74,6 @@ bitmap_ior_into (bitmap a, const_bitmap b)\n   return changed;\n }\n \n-/* Verify that VRP simplified an \"if\" statement.  */\n-/* { dg-final { scan-tree-dump \"Folded into: if.*\" \"vrp2\"} } */\n-/* Verify that DCE after VRP2 eliminates a dead conversion\n-   to a (Bool).  */\n-/* { dg-final { scan-tree-dump \"Deleting.*_Bool.*;\" \"cddce2\"} } */\n-\n+/* Verify that FRE simplified an if stmt.  */\n+/* { dg-final { scan-tree-dump \"Replaced a_elt_\\[0-9\\]+ != 0B with 1\" \"fre1\" } } */\n+/* { dg-final { scan-tree-dump \"Replaced _\\[0-9\\]+ & _\\[0-9\\]+ with _\\[0-9\\]+\" \"fre1\" } } */"}, {"sha": "003433ccbc77dc4937ed95510e23f6f13b897041", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 146, "deletions": 3, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd9012e478d7f759500bfa32ace358227853c2b/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=7fd9012e478d7f759500bfa32ace358227853c2b", "patch": "@@ -2365,10 +2365,18 @@ vn_nary_op_compute_hash (const vn_nary_op_t vno1)\n     if (TREE_CODE (vno1->op[i]) == SSA_NAME)\n       vno1->op[i] = SSA_VAL (vno1->op[i]);\n \n-  if (vno1->length == 2\n-      && commutative_tree_code (vno1->opcode)\n+  if (((vno1->length == 2\n+\t&& commutative_tree_code (vno1->opcode))\n+       || (vno1->length == 3\n+\t   && commutative_ternary_tree_code (vno1->opcode)))\n       && tree_swap_operands_p (vno1->op[0], vno1->op[1], false))\n     std::swap (vno1->op[0], vno1->op[1]);\n+  else if (TREE_CODE_CLASS (vno1->opcode) == tcc_comparison\n+\t   && tree_swap_operands_p (vno1->op[0], vno1->op[1], false))\n+    {\n+      std::swap (vno1->op[0], vno1->op[1]);\n+      vno1->opcode = swap_tree_comparison  (vno1->opcode);\n+    }\n \n   hstate.add_int (vno1->opcode);\n   for (i = 0; i < vno1->length; ++i)\n@@ -4281,13 +4289,105 @@ set_hashtable_value_ids (void)\n class sccvn_dom_walker : public dom_walker\n {\n public:\n-  sccvn_dom_walker () : dom_walker (CDI_DOMINATORS), fail (false) {}\n+  sccvn_dom_walker ()\n+    : dom_walker (CDI_DOMINATORS), fail (false), cond_stack (vNULL) {}\n \n   virtual void before_dom_children (basic_block);\n+  virtual void after_dom_children (basic_block);\n+\n+  void record_cond (basic_block,\n+\t\t    enum tree_code code, tree lhs, tree rhs, bool value);\n+  void record_conds (basic_block,\n+\t\t     enum tree_code code, tree lhs, tree rhs, bool value);\n \n   bool fail;\n+  vec<std::pair <basic_block, std::pair <vn_nary_op_t, vn_nary_op_t> > >\n+    cond_stack;\n };\n \n+/* Record a temporary condition for the BB and its dominated blocks.  */\n+\n+void\n+sccvn_dom_walker::record_cond (basic_block bb,\n+\t\t\t       enum tree_code code, tree lhs, tree rhs,\n+\t\t\t       bool value)\n+{\n+  tree ops[2] = { lhs, rhs };\n+  vn_nary_op_t old = NULL;\n+  if (vn_nary_op_lookup_pieces (2, code, boolean_type_node, ops, &old))\n+    current_info->nary->remove_elt_with_hash (old, old->hashcode);\n+  vn_nary_op_t cond\n+    = vn_nary_op_insert_pieces (2, code, boolean_type_node, ops,\n+\t\t\t\tvalue\n+\t\t\t\t? boolean_true_node\n+\t\t\t\t: boolean_false_node, 0);\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"Recording temporarily \");\n+      print_generic_expr (dump_file, ops[0], TDF_SLIM);\n+      fprintf (dump_file, \" %s \", get_tree_code_name (code));\n+      print_generic_expr (dump_file, ops[1], TDF_SLIM);\n+      fprintf (dump_file, \" == %s%s\\n\",\n+\t       value ? \"true\" : \"false\",\n+\t       old ? \" (old entry saved)\" : \"\");\n+    }\n+  cond_stack.safe_push (std::make_pair (bb, std::make_pair (cond, old)));\n+}\n+\n+/* Record temporary conditions for the BB and its dominated blocks\n+   according to LHS CODE RHS == VALUE and its dominated conditions.  */\n+\n+void\n+sccvn_dom_walker::record_conds (basic_block bb,\n+\t\t\t\tenum tree_code code, tree lhs, tree rhs,\n+\t\t\t\tbool value)\n+{\n+  /* Record the original condition.  */\n+  record_cond (bb, code, lhs, rhs, value);\n+\n+  if (!value)\n+    return;\n+\n+  /* Record dominated conditions if the condition is true.  Note that\n+     the inversion is already recorded.  */\n+  switch (code)\n+    {\n+    case LT_EXPR:\n+    case GT_EXPR:\n+      record_cond (bb, code == LT_EXPR ? LE_EXPR : GE_EXPR, lhs, rhs, true);\n+      record_cond (bb, NE_EXPR, lhs, rhs, true);\n+      record_cond (bb, EQ_EXPR, lhs, rhs, false);\n+      break;\n+\n+    case EQ_EXPR:\n+      record_cond (bb, LE_EXPR, lhs, rhs, true);\n+      record_cond (bb, GE_EXPR, lhs, rhs, true);\n+      record_cond (bb, LT_EXPR, lhs, rhs, false);\n+      record_cond (bb, GT_EXPR, lhs, rhs, false);\n+      break;\n+\n+    default:\n+      break;\n+    }\n+}\n+ \n+/* Restore expressions and values derived from conditionals.  */\n+\n+void\n+sccvn_dom_walker::after_dom_children (basic_block bb)\n+{\n+  while (!cond_stack.is_empty ()\n+\t && cond_stack.last ().first == bb)\n+    {\n+      vn_nary_op_t cond = cond_stack.last ().second.first;\n+      vn_nary_op_t old = cond_stack.last ().second.second;\n+      current_info->nary->remove_elt_with_hash (cond, cond->hashcode);\n+      if (old)\n+\tvn_nary_op_insert_into (old, current_info->nary, false);\n+      cond_stack.pop ();\n+    }\n+}\n+\n /* Value number all statements in BB.  */\n \n void\n@@ -4320,6 +4420,39 @@ sccvn_dom_walker::before_dom_children (basic_block bb)\n       return;\n     }\n \n+  /* If we have a single predecessor record the equivalence from a\n+     possible condition on the predecessor edge.  */\n+  if (single_pred_p (bb))\n+    {\n+      edge e = single_pred_edge (bb);\n+      /* Check if there are multiple executable successor edges in\n+\t the source block.  Otherwise there is no additional info\n+\t to be recorded.  */\n+      edge e2;\n+      FOR_EACH_EDGE (e2, ei, e->src->succs)\n+\tif (e2 != e\n+\t    && e2->flags & EDGE_EXECUTABLE)\n+\t  break;\n+      if (e2 && (e2->flags & EDGE_EXECUTABLE))\n+\t{\n+\n+\t  gimple stmt = last_stmt (e->src);\n+\t  if (stmt\n+\t      && gimple_code (stmt) == GIMPLE_COND)\n+\t    {\n+\t      enum tree_code code = gimple_cond_code (stmt);\n+\t      tree lhs = gimple_cond_lhs (stmt);\n+\t      tree rhs = gimple_cond_rhs (stmt);\n+\t      record_conds (bb, code, lhs, rhs,\n+\t\t\t    (e->flags & EDGE_TRUE_VALUE) != 0);\n+\t      code = invert_tree_comparison (code, HONOR_NANS (lhs));\n+\t      if (code != ERROR_MARK)\n+\t\trecord_conds (bb, code, lhs, rhs,\n+\t\t\t      (e->flags & EDGE_TRUE_VALUE) == 0);\n+\t    }\n+\t}\n+    }\n+\n   /* Value-number all defs in the basic-block.  */\n   for (gphi_iterator gsi = gsi_start_phis (bb);\n        !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -4389,6 +4522,16 @@ sccvn_dom_walker::before_dom_children (basic_block bb)\n \t  rhs = vn_get_expr_for (rhs);\n \tval = fold_binary (gimple_cond_code (stmt),\n \t\t\t   boolean_type_node, lhs, rhs);\n+\t/* If that didn't simplify to a constant see if we have recorded\n+\t   temporary expressions from taken edges.  */\n+\tif (!val || TREE_CODE (val) != INTEGER_CST)\n+\t  {\n+\t    tree ops[2];\n+\t    ops[0] = gimple_cond_lhs (stmt);\n+\t    ops[1] = gimple_cond_rhs (stmt);\n+\t    val = vn_nary_op_lookup_pieces (2, gimple_cond_code (stmt),\n+\t\t\t\t\t    boolean_type_node, ops, NULL);\n+\t  }\n \tbreak;\n       }\n     case GIMPLE_SWITCH:"}]}