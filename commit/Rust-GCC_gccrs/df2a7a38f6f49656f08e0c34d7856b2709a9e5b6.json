{"sha": "df2a7a38f6f49656f08e0c34d7856b2709a9e5b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYyYTdhMzhmNmY0OTY1NmYwOGUwYzM0ZDc4NTZiMjcwOWE5ZTViNg==", "commit": {"author": {"name": "Mikhail Maltsev", "email": "maltsevm@gmail.com", "date": "2015-07-20T05:30:12Z"}, "committer": {"name": "Mikhail Maltsev", "email": "miyuki@gcc.gnu.org", "date": "2015-07-20T05:30:12Z"}, "message": "Fix partial specialization syntax of wide int traits.\n\ngcc/\n\t* wide-int.h (struct binary_traits): Fix partial specialization syntax.\n\t(struct int_traits): Likewise.\n\nFrom-SVN: r225993", "tree": {"sha": "783a1557a3645ca169e1e54c9b84d93c10b546ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/783a1557a3645ca169e1e54c9b84d93c10b546ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df2a7a38f6f49656f08e0c34d7856b2709a9e5b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2a7a38f6f49656f08e0c34d7856b2709a9e5b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2a7a38f6f49656f08e0c34d7856b2709a9e5b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2a7a38f6f49656f08e0c34d7856b2709a9e5b6/comments", "author": {"login": "miyuki", "id": 4668268, "node_id": "MDQ6VXNlcjQ2NjgyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/4668268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miyuki", "html_url": "https://github.com/miyuki", "followers_url": "https://api.github.com/users/miyuki/followers", "following_url": "https://api.github.com/users/miyuki/following{/other_user}", "gists_url": "https://api.github.com/users/miyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/miyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miyuki/subscriptions", "organizations_url": "https://api.github.com/users/miyuki/orgs", "repos_url": "https://api.github.com/users/miyuki/repos", "events_url": "https://api.github.com/users/miyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/miyuki/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e24aa1bd891be73eeb7531f22175e99401efe59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e24aa1bd891be73eeb7531f22175e99401efe59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e24aa1bd891be73eeb7531f22175e99401efe59"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "c9498114c57f155bd37f61358c02b0278e0ad264", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a7a38f6f49656f08e0c34d7856b2709a9e5b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a7a38f6f49656f08e0c34d7856b2709a9e5b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df2a7a38f6f49656f08e0c34d7856b2709a9e5b6", "patch": "@@ -1,3 +1,8 @@\n+2015-07-20  Mikhail Maltsev  <maltsevm@gmail.com>\n+\n+\t* wide-int.h (struct binary_traits): Fix partial specialization syntax.\n+\t(struct int_traits): Likewise.\n+\n 2015-07-18  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* vmsdbgout.c (vmsdbgout_decl): Change name of prototyped"}, {"sha": "6e0275f58c0a6da1f158f6854ee263eb727323f7", "filename": "gcc/wide-int.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2a7a38f6f49656f08e0c34d7856b2709a9e5b6/gcc%2Fwide-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2a7a38f6f49656f08e0c34d7856b2709a9e5b6/gcc%2Fwide-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.h?ref=df2a7a38f6f49656f08e0c34d7856b2709a9e5b6", "patch": "@@ -360,21 +360,18 @@ namespace wi\n      inputs.  Note that CONST_PRECISION and VAR_PRECISION cannot be\n      mixed, in order to give stronger type checking.  When both inputs\n      are CONST_PRECISION, they must have the same precision.  */\n-  template <>\n   template <typename T1, typename T2>\n   struct binary_traits <T1, T2, FLEXIBLE_PRECISION, FLEXIBLE_PRECISION>\n   {\n     typedef widest_int result_type;\n   };\n \n-  template <>\n   template <typename T1, typename T2>\n   struct binary_traits <T1, T2, FLEXIBLE_PRECISION, VAR_PRECISION>\n   {\n     typedef wide_int result_type;\n   };\n \n-  template <>\n   template <typename T1, typename T2>\n   struct binary_traits <T1, T2, FLEXIBLE_PRECISION, CONST_PRECISION>\n   {\n@@ -384,14 +381,12 @@ namespace wi\n \t\t\t       <int_traits <T2>::precision> > result_type;\n   };\n \n-  template <>\n   template <typename T1, typename T2>\n   struct binary_traits <T1, T2, VAR_PRECISION, FLEXIBLE_PRECISION>\n   {\n     typedef wide_int result_type;\n   };\n \n-  template <>\n   template <typename T1, typename T2>\n   struct binary_traits <T1, T2, CONST_PRECISION, FLEXIBLE_PRECISION>\n   {\n@@ -401,7 +396,6 @@ namespace wi\n \t\t\t       <int_traits <T1>::precision> > result_type;\n   };\n \n-  template <>\n   template <typename T1, typename T2>\n   struct binary_traits <T1, T2, CONST_PRECISION, CONST_PRECISION>\n   {\n@@ -412,7 +406,6 @@ namespace wi\n \t\t\t       <int_traits <T1>::precision> > result_type;\n   };\n \n-  template <>\n   template <typename T1, typename T2>\n   struct binary_traits <T1, T2, VAR_PRECISION, VAR_PRECISION>\n   {\n@@ -876,7 +869,6 @@ generic_wide_int <storage>::dump () const\n \n namespace wi\n {\n-  template <>\n   template <typename storage>\n   struct int_traits < generic_wide_int <storage> >\n     : public wi::int_traits <storage>\n@@ -955,7 +947,6 @@ inline wide_int_ref_storage <SE>::wide_int_ref_storage (const T &x,\n \n namespace wi\n {\n-  template <>\n   template <bool SE>\n   struct int_traits <wide_int_ref_storage <SE> >\n   {\n@@ -1142,7 +1133,6 @@ class GTY(()) fixed_wide_int_storage\n \n namespace wi\n {\n-  template <>\n   template <int N>\n   struct int_traits < fixed_wide_int_storage <N> >\n   {"}]}