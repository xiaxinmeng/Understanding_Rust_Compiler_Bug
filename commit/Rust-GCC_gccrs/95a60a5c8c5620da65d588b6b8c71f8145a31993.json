{"sha": "95a60a5c8c5620da65d588b6b8c71f8145a31993", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVhNjBhNWM4YzU2MjBkYTY1ZDU4OGI2YjhjNzFmODE0NWEzMTk5Mw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-07-19T18:08:53Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-07-19T18:08:53Z"}, "message": "predict.c (propagate_unlikely_bbs_forward): Break out from ...\n\n\t* predict.c (propagate_unlikely_bbs_forward): Break out from ...\n\t(determine_unlikely_bbs): ... here.\n\t* predict.h (propagate_unlikely_bbs_forward): Declare.\n\t* cfgexpand.c (pass_expand::execute): Use it.\n\t* bb-reorder.c (sanitize_hot_paths): Do not consider known to be\n\tunlikely edges.\n\t(find_rarely_executed_basic_blocks_and_crossing_edges): Use\n\tpropagate_unlikely_bbs_forward.\n\nFrom-SVN: r250359", "tree": {"sha": "a76ab832acdfe295d71d6ba8b0f011425fb99cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a76ab832acdfe295d71d6ba8b0f011425fb99cb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95a60a5c8c5620da65d588b6b8c71f8145a31993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95a60a5c8c5620da65d588b6b8c71f8145a31993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95a60a5c8c5620da65d588b6b8c71f8145a31993", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95a60a5c8c5620da65d588b6b8c71f8145a31993/comments", "author": null, "committer": null, "parents": [{"sha": "3fa410c0827461ed141fcfcd93e019e0bba8ddc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa410c0827461ed141fcfcd93e019e0bba8ddc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa410c0827461ed141fcfcd93e019e0bba8ddc1"}], "stats": {"total": 97, "additions": 60, "deletions": 37}, "files": [{"sha": "746b08ecb2d9e4d8468174f879a327af0f9b5304", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a60a5c8c5620da65d588b6b8c71f8145a31993/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a60a5c8c5620da65d588b6b8c71f8145a31993/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95a60a5c8c5620da65d588b6b8c71f8145a31993", "patch": "@@ -1,3 +1,14 @@\n+2017-07-19  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* predict.c (propagate_unlikely_bbs_forward): Break out from ...\n+\t(determine_unlikely_bbs): ... here.\n+\t* predict.h (propagate_unlikely_bbs_forward): Declare.\n+\t* cfgexpand.c (pass_expand::execute): Use it.\n+\t* bb-reorder.c (sanitize_hot_paths): Do not consider known to be\n+\tunlikely edges.\n+\t(find_rarely_executed_basic_blocks_and_crossing_edges): Use\n+\tpropagate_unlikely_bbs_forward.\n+\n 2017-07-19  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR middle-end/81331"}, {"sha": "609c099d7b5cf2d519e7447400cba171475c571b", "filename": "gcc/predict.c", "status": "modified", "additions": 49, "deletions": 37, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a60a5c8c5620da65d588b6b8c71f8145a31993/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a60a5c8c5620da65d588b6b8c71f8145a31993/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=95a60a5c8c5620da65d588b6b8c71f8145a31993", "patch": "@@ -3374,6 +3374,55 @@ expensive_function_p (int threshold)\n   return false;\n }\n \n+/* All basic blocks that are reachable only from unlikely basic blocks are\n+   unlikely.  */\n+\n+void\n+propagate_unlikely_bbs_forward (void)\n+{\n+  auto_vec<basic_block, 64> worklist;\n+  basic_block bb;\n+  edge_iterator ei;\n+  edge e;\n+\n+  if (!(ENTRY_BLOCK_PTR_FOR_FN (cfun)->count == profile_count::zero ()))\n+    {\n+      ENTRY_BLOCK_PTR_FOR_FN (cfun)->aux = (void *)(size_t) 1;\n+      worklist.safe_push (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n+\n+      while (worklist.length () > 0)\n+\t{\n+\t  bb = worklist.pop ();\n+\t  FOR_EACH_EDGE (e, ei, bb->succs)\n+\t    if (!(e->count == profile_count::zero ())\n+\t\t&& !(e->dest->count == profile_count::zero ())\n+\t\t&& !e->dest->aux)\n+\t      {\n+\t\te->dest->aux = (void *)(size_t) 1;\n+\t\tworklist.safe_push (e->dest);\n+\t      }\n+\t}\n+    }\n+\n+  FOR_ALL_BB_FN (bb, cfun)\n+    {\n+      if (!bb->aux)\n+\t{\n+\t  if (!(bb->count == profile_count::zero ())\n+\t      && (dump_file && (dump_flags & TDF_DETAILS)))\n+\t    fprintf (dump_file,\n+\t\t     \"Basic block %i is marked unlikely by forward prop\\n\",\n+\t\t     bb->index);\n+\t  bb->count = profile_count::zero ();\n+\t  bb->frequency = 0;\n+          FOR_EACH_EDGE (e, ei, bb->succs)\n+\t    e->count = profile_count::zero ();\n+\t}\n+      else\n+        bb->aux = NULL;\n+    }\n+}\n+\n /* Determine basic blocks/edges that are known to be unlikely executed and set\n    their counters to zero.\n    This is done with first identifying obviously unlikely BBs/edges and then\n@@ -3418,43 +3467,6 @@ determine_unlikely_bbs ()\n       gcc_checking_assert (!bb->aux);\n     }\n \n-  if (!(ENTRY_BLOCK_PTR_FOR_FN (cfun)->count == profile_count::zero ()))\n-    {\n-      ENTRY_BLOCK_PTR_FOR_FN (cfun)->aux = (void *)(size_t) 1;\n-      worklist.safe_push (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n-\n-      while (worklist.length () > 0)\n-\t{\n-\t  bb = worklist.pop ();\n-\t  FOR_EACH_EDGE (e, ei, bb->succs)\n-\t    if (!(e->count == profile_count::zero ())\n-\t\t&& !(e->dest->count == profile_count::zero ())\n-\t\t&& !e->dest->aux)\n-\t      {\n-\t\te->dest->aux = (void *)(size_t) 1;\n-\t\tworklist.safe_push (e->dest);\n-\t      }\n-\t}\n-    }\n-\n-  FOR_ALL_BB_FN (bb, cfun)\n-    {\n-      if (!bb->aux)\n-\t{\n-\t  if (!(bb->count == profile_count::zero ())\n-\t      && (dump_file && (dump_flags & TDF_DETAILS)))\n-\t    fprintf (dump_file,\n-\t\t     \"Basic block %i is marked unlikely by forward prop\\n\",\n-\t\t     bb->index);\n-\t  bb->count = profile_count::zero ();\n-\t  bb->frequency = 0;\n-          FOR_EACH_EDGE (e, ei, bb->succs)\n-\t    e->count = profile_count::zero ();\n-\t}\n-      else\n-        bb->aux = NULL;\n-    }\n-\n   auto_vec<int, 64> nsuccs;\n   nsuccs.safe_grow_cleared (last_basic_block_for_fn (cfun));\n   FOR_ALL_BB_FN (bb, cfun)"}]}