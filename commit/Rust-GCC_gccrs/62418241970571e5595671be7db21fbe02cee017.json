{"sha": "62418241970571e5595671be7db21fbe02cee017", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI0MTgyNDE5NzA1NzFlNTU5NTY3MWJlN2RiMjFmYmUwMmNlZTAxNw==", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "dkm@kataplop.net", "date": "2021-03-27T20:03:58Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-29T19:09:23Z"}, "message": "Minor change in README.md\n\nAdd some details that can help during debugging.\nfixes #309", "tree": {"sha": "ed32b1be00dcd20dded3fdc6f3eaa497b4fb4004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed32b1be00dcd20dded3fdc6f3eaa497b4fb4004"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62418241970571e5595671be7db21fbe02cee017", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62418241970571e5595671be7db21fbe02cee017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62418241970571e5595671be7db21fbe02cee017", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62418241970571e5595671be7db21fbe02cee017/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff1eca9a578bb8ff5d35a64e96f6b17fb5f6f81e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff1eca9a578bb8ff5d35a64e96f6b17fb5f6f81e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff1eca9a578bb8ff5d35a64e96f6b17fb5f6f81e"}], "stats": {"total": 70, "additions": 62, "deletions": 8}, "files": [{"sha": "0ba3f6332903a7be4e4ea50026fda7544dff9cce", "filename": "README.md", "status": "modified", "additions": 62, "deletions": 8, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62418241970571e5595671be7db21fbe02cee017/README.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62418241970571e5595671be7db21fbe02cee017/README.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/README.md?ref=62418241970571e5595671be7db21fbe02cee017", "patch": "@@ -22,6 +22,8 @@ Please find the answers to frequently asked questions over on: https://github.co\n \n ## Development Environment\n \n+### Building\n+\n Fetch dependencies for Ubuntu:\n \n ```bash\n@@ -34,7 +36,7 @@ Clone the repository\n $ git clone git@github.com:Rust-GCC/gccrs.git\n ```\n \n-Compilation script. It is important to remember that GNU toolchain projects are designed to be built outside of their source directory\n+It is important to remember that GNU toolchain projects are designed to be built outside of their source directory\n which is why a build directory is created.\n \n ```bash\n@@ -47,7 +49,7 @@ $ make\n Running the compiler itself without make install we can simply invoke the compiler proper:\n \n ```bash\n-$ gdb --args ./gcc/rust1 test.rs -frust-dump-parse -Warray-bounds -dumpbase test.rs -mtune=generic -march=x86-64 -O0 -version -fdump-tree-gimple -o test.s -L/lib/x86_64-linux-gnu -L/lib/../lib64 -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib64\n+$ ./gcc/rust1 test.rs -frust-dump-parse -Warray-bounds -dumpbase test.rs -mtune=generic -march=x86-64 -O0 -version -fdump-tree-gimple -o test.s -L/lib/x86_64-linux-gnu -L/lib/../lib64 -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib64\n ```\n \n To invoke the compiler driver (gccrs) we need to:\n@@ -56,28 +58,80 @@ To invoke the compiler driver (gccrs) we need to:\n $ make install\n ```\n \n-Then invoke the compiler as expected:\n+Then invoke the compiler from the installation directory:\n \n ```bash\n-$ gccrs -g -O2 -c test.rs -o test.o\n-$ gccrs -o test test.o\n+$ $HOME/gccrs-install/gccrs -g -O2 -c test.rs -o test.o\n+$ $HOME/gccrs-install/gccrs -o test test.o\n ```\n-If the driver of gccrs is not found , try run this export :\n+\n+You can also setup your shell to automatically find the installed compiler. For example for `bash`, add the following in your `$HOME/.bashrc`:\n+\n ```bash\n-$ export PATH=$HOME/gccrs-install/bin:$PATH\n+export PATH=$HOME/gccrs-install/bin:$PATH\n+\n ```\n \n ## Testsuite\n \n-Invoke the test suite via:\n+Invoke the full testsuite from the build directory (`gcc/gccrs-build` in the previous commands):\n \n ```bash\n $ make check-rust\n ```\n \n+Invoke a subset of the testsuite. For example, to only execute the tests that are expected to fail:\n+\n+```bash\n+$ make check-rust  RUNTESTFLAGS=\"xfail_compile.exp\"\n+```\n+The project currently has 3 sets of tests:\n+- `execute.exp` : execution tests\n+- `compile.exp` : compilation only tests, using combination of options\n+- `xfail_compile.exp` : compilation only tests expected to fail\n+\n+Or execute a specific test :\n+\n+```bash\n+$ make check-rust  RUNTESTFLAGS=\"xfail_compile.exp=continue1.rs\"\n+```\n+\n+Logs (with corresponding commands) can be found in : `gccrs-build/gcc/testsuite/rust/rust.log`.\n+\n+See [GCC Testing documentation](https://gcc.gnu.org/install/test.html) for more details.\n+\n Test cases are located within [gcc/testsuite/rust.test](gcc/testsuite/rust.test) please feel free to contribute your specific\n test cases referencing any issues on Github.\n \n+## Debugging\n+\n+### Enabling internal checks\n+\n+GCC has several internal checks that can be enabled during configuration. In the case of `gccrs`, you can enable the following:\n+```bash\n+$ ../gccrs/configure --prefix=$HOME/gccrs-install --disable-bootstrap --enable-multilib --enable-languages=rust --enable-checking=gimple,tree,types\n+```\n+\n+### GDB\n+You can directly invoke `gdb` on the `rust1` compiler process (you can find the\n+exact command adding `--verbose` to your `gccrs` invocation):\n+```bash\n+$ gccrs test.rs -O0 -S -o arithmetic_expressions1.s --verbose\n+...\n+ /some/path/../../rust1 test.rs -quiet -dumpbase arithmetic_expressions1.rs -dumpbase-ext .rs\n+ -mtune=generic -march=x86-64 -O0 -w -version -fdiagnostics-color=never -fno-diagnostics-show-caret -fno-diagnostics-show-line-numbers -fdiagnostics-urls=never -fdiagnostics-path-format=separate-events -o test.s -L/lib/x86_64-linux-gnu -L/lib/../lib64 -L/usr/lib/x86_64-linux-gnu\n+...\n+$ gdb --args  /some/path/../../rust1 test.rs -quiet -dumpbase arithmetic_expressions1.rs -dumpbase-ext .rs\n+ -mtune=generic -march=x86-64 -O0 -w -version -fdiagnostics-color=never -fno-diagnostics-show-caret -fno-diagnostics-show-line-numbers -fdiagnostics-urls=never -fdiagnostics-path-format=separate-events -o test.s -L/lib/x86_64-linux-gnu -L/lib/../lib64 -L/usr/lib/x86_64-linux-gnu\n+```\n+\n+Or simply add the `-wrapper gdb,--args` option. This will call each subcommand in `gdb` and you simply have to break/debug in `rust1`:\n+```bash\n+```bash\n+$ gccrs test.rs -O0 -S -o arithmetic_expressions1.s -wrapper gdb,--args\n+\n+```\n+\n ## Docker image\n \n There is a docker image hosted over on: "}]}