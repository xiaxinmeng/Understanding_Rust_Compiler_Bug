{"sha": "b74f5ff2bd0793d863acf42138a5547ee59dde51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc0ZjVmZjJiZDA3OTNkODYzYWNmNDIxMzhhNTU0N2VlNTlkZGU1MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-02T01:23:04Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-02T01:23:04Z"}, "message": "(expand_expr, case COMPONENT_REF): If getting component of union of\nvariable size, propagate TARGET.\n\nFrom-SVN: r10415", "tree": {"sha": "9c7c0aef3245256b621b7400c0e872d0a92d0fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c7c0aef3245256b621b7400c0e872d0a92d0fa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b74f5ff2bd0793d863acf42138a5547ee59dde51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74f5ff2bd0793d863acf42138a5547ee59dde51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74f5ff2bd0793d863acf42138a5547ee59dde51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74f5ff2bd0793d863acf42138a5547ee59dde51/comments", "author": null, "committer": null, "parents": [{"sha": "f29369b9f2b1d1d7bc55ba044076860b7a636231", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f29369b9f2b1d1d7bc55ba044076860b7a636231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f29369b9f2b1d1d7bc55ba044076860b7a636231"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "d2de924b6aee26e44e9032529eb71583ec79d7b8", "filename": "gcc/expr.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74f5ff2bd0793d863acf42138a5547ee59dde51/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74f5ff2bd0793d863acf42138a5547ee59dde51/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b74f5ff2bd0793d863acf42138a5547ee59dde51", "patch": "@@ -4762,8 +4762,18 @@ expand_expr (exp, target, tmode, modifier)\n \n \t/* In some cases, we will be offsetting OP0's address by a constant.\n \t   So get it as a sum, if possible.  If we will be using it\n-\t   directly in an insn, we validate it.  */\n-\top0 = expand_expr (tem, NULL_RTX, VOIDmode, EXPAND_SUM);\n+\t   directly in an insn, we validate it. \n+\n+\t   If TEM's type is a union of variable size, pass TARGET to the inner\n+\t   computation, since it will need a temporary and TARGET is known\n+\t   to have to do.  This occurs in unchecked conversion in Ada.  */\n+  \n+\top0 = expand_expr (tem,\n+\t\t\t   (TREE_CODE (TREE_TYPE (tem)) == UNION_TYPE\n+\t\t\t    && (TREE_CODE (TYPE_SIZE (TREE_TYPE (tem)))\n+\t\t\t\t!= INTEGER_CST)\n+\t\t\t    ? target : NULL_RTX),\n+\t\t\t   VOIDmode, EXPAND_SUM);\n \n \t/* If this is a constant, put it into a register if it is a\n \t   legitimate constant and memory if it isn't.  */"}]}