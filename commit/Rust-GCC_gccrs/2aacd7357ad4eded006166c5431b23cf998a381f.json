{"sha": "2aacd7357ad4eded006166c5431b23cf998a381f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFhY2Q3MzU3YWQ0ZWRlZDAwNjE2NmM1NDMxYjIzY2Y5OThhMzgxZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-04-28T17:15:03Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-04-28T17:15:03Z"}, "message": "[multiple changes]\n\n\n2003-04-28  Petur Runolfsson  <peturr02@ru.is>\n\n        PR libstdc++/9523\n        * include/bits/ios_base.h (Init::_S_ios_create,\n        Init::_S_ios_destroy):  Remove declarations.\n        (Init::_S_create_buffers,\n        Init::_S_destroy_buffers):  Declare\n        * src/ios.cc (Init::_S_ios_create):  Remove\n        (Init::_S_create_buffers):  Create buffers and add to streams.\n        (Init::_S_ios_destroy):  Rename to...\n        (Init::_S_destroy_buffers):  this.\n        (Init::Init):  Only construct streams once.\n        (Init::~Init):  Flush streams, don't destroy them.\n        (ios_base::sync_with_stdio):  Don't destroy streams, only buffers.\n        * testsuite/27_io/ios_base/sync_with_stdio/9523.cc:  New test.\n        * testsuite/27_io/objects/char/5.cc:  New test.\n        * testsuite/27_io/objects/char/5268.cc:  Avoid undefined behavior.\n        * testsuite/27_io/objects/char/6.cc:  New test.\n        * testsuite/27_io/objects/char/7.cc:  New test.\n\n2003-04-28  Benjamin Kosnik  <bkoz@redhat.com>\n\n        * testsuite/27_io/objects/char/8.cc:  New test.\n\nFrom-SVN: r66177", "tree": {"sha": "4a1cc92b2ffd9b17f90a5ca3efc07f400bdc081a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a1cc92b2ffd9b17f90a5ca3efc07f400bdc081a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aacd7357ad4eded006166c5431b23cf998a381f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aacd7357ad4eded006166c5431b23cf998a381f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aacd7357ad4eded006166c5431b23cf998a381f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aacd7357ad4eded006166c5431b23cf998a381f/comments", "author": null, "committer": null, "parents": [{"sha": "ff4cb2e75b5f471edc5c1fc46d4bdebac58b6c7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff4cb2e75b5f471edc5c1fc46d4bdebac58b6c7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff4cb2e75b5f471edc5c1fc46d4bdebac58b6c7a"}], "stats": {"total": 419, "additions": 394, "deletions": 25}, "files": [{"sha": "fa1adb1353a45b2209c51a7003613e2e062fd06d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2aacd7357ad4eded006166c5431b23cf998a381f", "patch": "@@ -1,3 +1,27 @@\n+2003-04-28  Petur Runolfsson  <peturr02@ru.is>\n+ \n+        PR libstdc++/9523\n+        * include/bits/ios_base.h (Init::_S_ios_create,\n+        Init::_S_ios_destroy):  Remove declarations.\n+        (Init::_S_create_buffers,\n+        Init::_S_destroy_buffers):  Declare\n+        * src/ios.cc (Init::_S_ios_create):  Remove\n+        (Init::_S_create_buffers):  Create buffers and add to streams.\n+        (Init::_S_ios_destroy):  Rename to...\n+        (Init::_S_destroy_buffers):  this.\n+        (Init::Init):  Only construct streams once.\n+        (Init::~Init):  Flush streams, don't destroy them.\n+        (ios_base::sync_with_stdio):  Don't destroy streams, only buffers.\n+        * testsuite/27_io/ios_base/sync_with_stdio/9523.cc:  New test.\n+        * testsuite/27_io/objects/char/5.cc:  New test.\n+        * testsuite/27_io/objects/char/5268.cc:  Avoid undefined behavior.\n+        * testsuite/27_io/objects/char/6.cc:  New test.\n+        * testsuite/27_io/objects/char/7.cc:  New test.\n+\n+2003-04-28  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+        * testsuite/27_io/objects/char/8.cc:  New test.\n+\t\n 2003-04-28  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/22_locale/codecvt/unicode/char.cc: Remove bom usage."}, {"sha": "618c903147a36bb992df6a25ebe801b3b9f0b204", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=2aacd7357ad4eded006166c5431b23cf998a381f", "patch": "@@ -453,10 +453,10 @@ namespace std\n       ~Init();\n       \n       static void\n-      _S_ios_create(bool __sync);\n+      _S_create_buffers(bool __sync);\n       \n       static void\n-      _S_ios_destroy();\n+      _S_destroy_buffers();\n \n       // NB: Allows debugger applications use of the standard streams\n       // from operator new. _S_ios_base_init must be incremented in"}, {"sha": "7ce3339ccb356f8f01c00ae9fe0bbb2b1393456d", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 55, "deletions": 23, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=2aacd7357ad4eded006166c5431b23cf998a381f", "patch": "@@ -154,39 +154,34 @@ namespace std\n   { return _M_name; }\n \n   void\n-  ios_base::Init::_S_ios_create(bool __sync)\n+  ios_base::Init::_S_create_buffers(bool __sync)\n   {\n     size_t __out_size = __sync ? 0 : static_cast<size_t>(BUFSIZ);\n     size_t __in_size = __sync ? 1 : static_cast<size_t>(BUFSIZ);\n \n-    // NB: The file globals.cc creates the four standard files\n-    // with NULL buffers. At this point, we swap out the dummy NULL\n-    // [io]stream objects and buffers with the real deal.\n+    // Create stream buffers for the standard streams and use those\n+    // buffers without destroying and recreating the streams.\n     new (&buf_cout) stdio_filebuf<char>(stdout, ios_base::out, __out_size);\n     new (&buf_cin) stdio_filebuf<char>(stdin, ios_base::in, __in_size);\n     new (&buf_cerr) stdio_filebuf<char>(stderr, ios_base::out, __out_size);\n-    new (&cout) ostream(&buf_cout);\n-    new (&cin) istream(&buf_cin);\n-    new (&cerr) ostream(&buf_cerr);\n-    new (&clog) ostream(&buf_cerr);\n-    cin.tie(&cout);\n-    cerr.flags(ios_base::unitbuf);\n+    cout.rdbuf(&buf_cout);\n+    cin.rdbuf(&buf_cin);\n+    cerr.rdbuf(&buf_cerr);\n+    clog.rdbuf(&buf_cerr);\n     \n #ifdef _GLIBCPP_USE_WCHAR_T\n     new (&buf_wcout) stdio_filebuf<wchar_t>(stdout, ios_base::out, __out_size);\n     new (&buf_wcin) stdio_filebuf<wchar_t>(stdin, ios_base::in, __in_size);\n     new (&buf_wcerr) stdio_filebuf<wchar_t>(stderr, ios_base::out, __out_size);\n-    new (&wcout) wostream(&buf_wcout);\n-    new (&wcin) wistream(&buf_wcin);\n-    new (&wcerr) wostream(&buf_wcerr);\n-    new (&wclog) wostream(&buf_wcerr);\n-    wcin.tie(&wcout);\n-    wcerr.flags(ios_base::unitbuf);\n+    wcout.rdbuf(&buf_wcout);\n+    wcin.rdbuf(&buf_wcin);\n+    wcerr.rdbuf(&buf_wcerr);\n+    wclog.rdbuf(&buf_wcerr);\n #endif\n   }\n \n   void\n-  ios_base::Init::_S_ios_destroy()\n+  ios_base::Init::_S_destroy_buffers()\n   {\n     // Explicitly call dtors to free any memory that is dynamically\n     // allocated by filebuf ctor or member functions, but don't\n@@ -208,15 +203,52 @@ namespace std\n       {\n \t// Standard streams default to synced with \"C\" operations.\n \tios_base::Init::_S_synced_with_stdio = true;\n-\t_S_ios_create(ios_base::Init::_S_synced_with_stdio);\n+\n+\t// The standard streams are constructed once only and never destroyed.\n+\t// The stream buffers are set in _S_create_buffers below.\n+\tnew (&cout) ostream(NULL);\n+\tnew (&cin) istream(NULL);\n+\tnew (&cerr) ostream(NULL);\n+\tnew (&clog) ostream(NULL);\n+\tcin.tie(&cout);\n+\tcerr.flags(ios_base::unitbuf);\n+\t\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+\tnew (&wcout) wostream(NULL);\n+\tnew (&wcin) wistream(NULL);\n+\tnew (&wcerr) wostream(NULL);\n+\tnew (&wclog) wostream(NULL);\n+\twcin.tie(&wcout);\n+\twcerr.flags(ios_base::unitbuf);\n+#endif\n+\n+\t_S_create_buffers(ios_base::Init::_S_synced_with_stdio);\n+\t_S_ios_base_init = 1;\n       }\n     ++_S_ios_base_init;\n   }\n \n   ios_base::Init::~Init()\n   {\n-    if (--_S_ios_base_init == 0)\n-      _S_ios_destroy();\n+    if (--_S_ios_base_init == 1)\n+      {\n+\t// Catch any exceptions thrown by basic_ostream::flush()\n+\ttry\n+\t  { \n+\t    // Flush standard output streams as required by 27.4.2.1.6\n+\t    cout.flush();\n+\t    cerr.flush();\n+\t    clog.flush();\n+    \n+#ifdef _GLIBCPP_USE_WCHAR_T\n+\t    wcout.flush();\n+\t    wcerr.flush();\n+\t    wclog.flush();    \n+#endif\n+\t  }\n+\tcatch (...)\n+\t  { }\n+      }\n   } \n \n   // 27.4.2.5  ios_base storage functions\n@@ -355,9 +387,9 @@ namespace std\n     // currently synchronized.\n     if (!__sync && __ret)\n       {\n-\tios_base::Init::_S_synced_with_stdio = false;\n-\tios_base::Init::_S_ios_destroy();\n-\tios_base::Init::_S_ios_create(ios_base::Init::_S_synced_with_stdio);\n+\tios_base::Init::_S_synced_with_stdio = __sync;\n+\tios_base::Init::_S_destroy_buffers();\n+\tios_base::Init::_S_create_buffers(__sync);\n       }\n     return __ret; \n   }"}, {"sha": "f0b3f83b825d98bcfcfcff54d7aab664b865fef5", "filename": "libstdc++-v3/testsuite/27_io/ios_base/sync_with_stdio/9523.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fsync_with_stdio%2F9523.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fsync_with_stdio%2F9523.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fsync_with_stdio%2F9523.cc?ref=2aacd7357ad4eded006166c5431b23cf998a381f", "patch": "@@ -0,0 +1,51 @@\n+// 2003-04-26 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.4.2.4 ios_base static members\n+\n+#include <testsuite_hooks.h>\n+#include <iostream>\n+\n+// libstdc++/9523\n+void test01()\n+{\n+  using namespace std;\n+\n+  int index = ios_base::xalloc();\n+\n+  cin.iword(index) = 5;\n+  cout.iword(index) = 6;\n+  cerr.iword(index) = 7;\n+  clog.iword(index) = 8;\n+\n+  ios_base::sync_with_stdio(false);\n+\n+  VERIFY( cin.iword(index) == 5 );\n+  VERIFY( cout.iword(index) == 6 );\n+  VERIFY( cerr.iword(index) == 7 );\n+  VERIFY( clog.iword(index) == 8 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "aa15e936363c5124b4deaace41be4f3a0561bdcd", "filename": "libstdc++-v3/testsuite/27_io/objects/char/5.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5.cc?ref=2aacd7357ad4eded006166c5431b23cf998a381f", "patch": "@@ -0,0 +1,85 @@\n+// 2003-04-26 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.3 Standard iostream objects\n+\n+// Check that standard streams can be used from constructors and\n+// destructors of static objects, provided that an instance of \n+// ios_base::Init has been constructed.\n+\n+void init_standard_streams();\n+int use_standard_streams();\n+\n+struct Strange\n+{\n+  int i;\n+\n+  Strange()\n+  {\n+    init_standard_streams();\n+    i = use_standard_streams();\n+  }\n+\n+  ~Strange()\n+  {\n+    use_standard_streams();\n+    init_standard_streams();\n+  }\n+};\n+\n+static Strange static_ob;\n+\n+#include <testsuite_hooks.h>\n+#include <iostream>\n+\n+void init_standard_streams()\n+{\n+  std::ios_base::Init init;\n+}\n+\n+int use_standard_streams()\n+{\n+  std::cout << \"Hello, world!\" << std::endl;\n+  std::cerr << \"World, hello!\" << std::endl;\n+\n+  int ret = std::ios_base::xalloc();\n+  std::cin.iword(ret) = ret + 1;\n+  std::cout.iword(ret) = ret + 2;\n+  std::cerr.iword(ret) = ret + 3;\n+  std::clog.iword(ret) = ret + 4;\n+  return ret;\n+}\n+\n+void test05()\n+{\n+  bool test = true;\n+  int i = static_ob.i;\n+\n+  VERIFY( std::cin.iword(i) == i + 1 );\n+  VERIFY( std::cout.iword(i) == i + 2 );\n+  VERIFY( std::cerr.iword(i) == i + 3 );\n+  VERIFY( std::clog.iword(i) == i + 4 );\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "53641725a0c9a285561ca8ceb3a8afc3f5692565", "filename": "libstdc++-v3/testsuite/27_io/objects/char/5268.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5268.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5268.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F5268.cc?ref=2aacd7357ad4eded006166c5431b23cf998a381f", "patch": "@@ -36,6 +36,7 @@ void test04()\n   std::stringbuf b1;\n   std::cout.rdbuf( &b1 );\n   std::cout << \"hello\\n\";\n+  std::cout.rdbuf(NULL);\n }\n \n int main()"}, {"sha": "c7ecbc664176c4a5eed62386afdbdffcde5f5765", "filename": "libstdc++-v3/testsuite/27_io/objects/char/6.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F6.cc?ref=2aacd7357ad4eded006166c5431b23cf998a381f", "patch": "@@ -0,0 +1,50 @@\n+// 2003-04-26 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.3 Standard iostream objects\n+\n+// ios_base::Init::~Init() calls cout.flush(), which may call\n+// cout.setstate(badbit), which may throw an exception. Check that\n+// the exception doesn't escape from the destructor.\n+\n+#include <iostream>\n+#include <streambuf>\n+\n+class Badbuf : public std::streambuf\n+{\n+protected:\n+  virtual int sync()\n+  {\n+    return -1;\n+  }\n+};\n+\n+void test06()\n+{\n+  std::ios_base::Init init;\n+  std::cout.rdbuf(new Badbuf);\n+  std::cout.exceptions(std::ios_base::badbit);\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "c6f353e0a55febb3a59ad11fc6d123590d9c366f", "filename": "libstdc++-v3/testsuite/27_io/objects/char/7.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F7.cc?ref=2aacd7357ad4eded006166c5431b23cf998a381f", "patch": "@@ -0,0 +1,75 @@\n+// 2003-04-26 Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.3 Standard iostream objects\n+\n+#include <fstream>\n+#include <iostream>\n+#include <unistd.h>\n+#include <signal.h>\n+#include <fcntl.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <testsuite_hooks.h>\n+\n+// Check that cout.flush() is called when last ios_base::Init is destroyed.\n+void test07()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  const char* name = \"tmp_fifo4\";\n+\n+  signal(SIGPIPE, SIG_IGN);\n+\n+  unlink(name);  \n+  mkfifo(name, S_IRWXU);\n+  \n+  int child = fork();\n+  VERIFY( child != -1 );\n+\n+  if (child == 0)\n+    {\n+      filebuf fbout;\n+      sleep(1);\n+      fbout.open(name, ios_base::out);\n+      cout.rdbuf(&fbout);\n+      fbout.sputc('a');\n+      sleep(2);\n+      // NB: fbout is *not* destroyed here!\n+      exit(0);\n+    }\n+  \n+  filebuf fbin;\n+  fbin.open(name, ios_base::in);\n+  sleep(2);\n+  filebuf::int_type c = fbin.sbumpc();\n+  VERIFY( c != filebuf::traits_type::eof() );\n+  VERIFY( c == filebuf::traits_type::to_int_type('a') );\n+\n+  fbin.close();\n+}\n+\n+int\n+main()\n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "28a06a10ad3959ad920f607e4f1f3d18dac256ee", "filename": "libstdc++-v3/testsuite/27_io/objects/char/8.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aacd7357ad4eded006166c5431b23cf998a381f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F8.cc?ref=2aacd7357ad4eded006166c5431b23cf998a381f", "patch": "@@ -0,0 +1,51 @@\n+// 2003-04-28 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+  // 27.3 - Standard iostream objects p 2\n+\n+#include <iostream>\n+#include <testsuite_hooks.h>\n+\n+void test02() \n+{\n+  bool test = true;\n+  \n+  // 27.3 - Standard iostream objects p 2\n+  // The objects are not destroyed during program execution.\n+  void* p1 = &std::cout;\n+  void* p2 = &std::cin;\n+  void* p3 = &std::cerr;\n+  void* p4 = &std::clog;\n+  std::ios_base::sync_with_stdio(false); \n+  void* p1s = &std::cout;\n+  void* p2s = &std::cin;\n+  void* p3s = &std::cerr;\n+  void* p4s = &std::clog;\n+  VERIFY( p1 == p1s );\n+  VERIFY( p2 == p2s );\n+  VERIFY( p3 == p3s );\n+  VERIFY( p4 == p4s );\n+}\n+\n+int main(void)\n+{\n+  test02();\n+  return 0;\n+}"}]}