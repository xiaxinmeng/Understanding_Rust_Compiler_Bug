{"sha": "8fc68cba0989f9b8cf382858ef89b0aa1785cfa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZjNjhjYmEwOTg5ZjliOGNmMzgyODU4ZWY4OWIwYWExNzg1Y2ZhOQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2009-09-02T02:41:47Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2009-09-02T02:41:47Z"}, "message": "invoke.texi (-fvar-tracking-assignments): New.\n\ngcc/ChangeLog:\n* doc/invoke.texi (-fvar-tracking-assignments): New.\n(-fvar-tracking-assignments-toggle): New.\n(-fdump-final-insns=file): Mark filename as optional.\n(--param min-nondebug-insn-uid): New.\n(-gdwarf-@{version}): Mention version 4.\n* opts.c (common_handle_option): Accept it.\n* tree-vrp.c (find_assert_locations_1): Skip debug stmts.\n* regrename.c (regrename_optimize): Drop last.  Don't count debug\ninsns as uses.  Don't reject change because of debug insn.\n(do_replace): Reject DEBUG_INSN as chain starter.  Take base_regno\nfrom the chain starter, and check for inexact matches in\nDEBUG_INSNS.\n(scan_rtx_reg): Accept inexact matches in DEBUG_INSNs.\n(build_def_use): Simplify and fix the marking of DEBUG_INSNs.\n* sched-ebb.c (schedule_ebbs): Skip boundary debug insns.\n* fwprop.c (forward_propagate_and_simplify): ...into debug insns.\n* doc/gimple.texi (is_gimple_debug): New.\n(gimple_debug_bind_p): New.\n(is_gimple_call, gimple_assign_cast_p): End sentence with period.\n* doc/install.texi (bootstrap-debug): More details.\n(bootstrap-debug-big, bootstrap-debug-lean): Document.\n(bootstrap-debug-lib): More details.\n(bootstrap-debug-ckovw): Update.\n(bootstrap-time): New.\n* tree-into-ssa.c (mark_def_sites): Skip debug stmts.\n(insert_phi_nodes_for): Insert debug stmts.\n(rewrite_stmt): Take iterator.  Insert debug stmts.\n(rewrite_enter_block): Adjust.\n(maybe_replace_use_in_debug_stmt): New.\n(rewrite_update_stmt): Use it.\n(mark_use_interesting): Return early for debug stmts.\n* tree-ssa-loop-im.c (rewrite_bittest): Propagate DEFs into debug\nstmts before replacing stmt.\n(move_computations_stmt): Likewise.\n* ira-conflicts.c (add_copies): Skip debug insns.\n* regstat.c (regstat_init_n_sets_and_refs): Discount debug insns.\n(regstat_bb_compute_ri): Skip debug insns.\n* tree-ssa-threadupdate.c (redirection_block_p): Skip debug stmts.\n* tree-ssa-loop-manip.c (find_uses_to_rename_stmt,\ncheck_loop_closed_ssa_stmt): Skip debug stmts.\n* tree-tailcall.c (find_tail_calls): Likewise.\n* tree-ssa-loop-ch.c (should_duplicate_loop_header_p): Likewise.\n* tree.h (MAY_HAVE_DEBUG_STMTS): New.\n(build_var_debug_value_stat): Declare.\n(build_var_debug_value): Define.\n(target_for_debug_bind): Declare.\n* reload.c (find_equiv_reg): Skip debug insns.\n* rtlanal.c (reg_used_between_p): Skip debug insns.\n(side_effects_p): Likewise.\n(canonicalize_condition): Likewise.\n* ddg.c (create_ddg_dep_from_intra_loop_link): Check that non-debug\ninsns never depend on debug insns.\n(create_ddg_dep_no_link): Likewise.\n(add_cross_iteration_register_deps): Use ANTI_DEP for debug insns.\nDon't add inter-loop dependencies for debug insns.\n(build_intra_loop_deps): Likewise.\n(create_ddg): Count debug insns.\n* ddg.h (struct ddg::num_debug): New.\n(num_backargs): Pair up with previous int field.\n* diagnostic.c (diagnostic_report_diagnostic): Skip notes on\n-fcompare-debug-second.\n* final.c (get_attr_length_1): Skip debug insns.\n(rest_of_clean-state): Don't dump CFA_RESTORE_STATE.\n* gcc.c (invoke_as): Call compare-debug-dump-opt.\n(driver_self_specs): Map -fdump-final-insns to\n-fdump-final-insns=..\n(get_local_tick): New.\n(compare_debug_dump_opt_spec_function): Test for . argument and\ncompute output name.  Compute temp output spec without flag name.\nCompute -frandom-seed.\n(OPT): Undef after use.\n* cfgloopanal.c (num_loop_insns): Skip debug insns.\n(average_num_loop_insns): Likewise.\n* params.h (MIN_NONDEBUG_INSN_UID): New.\n* gimple.def (GIMPLE_DEBUG): New.\n* ipa-reference.c (scan_stmt_for_static_refs): Skip debug stmts.\n* auto-inc-dec.c (merge_in_block): Skip debug insns.\n(merge_in_block): Fix whitespace.\n* toplev.c (flag_var_tracking): Update comment.\n(flag_var_tracking_assignments): New.\n(flag_var_tracking_assignments_toggle): New.\n(process_options): Don't open final insns dump file if we're not\ngoing to write to it.  Compute defaults for var_tracking.\n* df-scan.c (df_insn_rescan_debug_internal): New.\n(df_uses_record): Handle debug insns.\n* haifa-sched.c (ready): Initialize n_debug.\n(contributes_to_priority): Skip debug insns.\n(dep_list_size): New.\n(priority): Use it.\n(rank_for_schedule): Likewise.  Schedule debug insns as soon as\nthey're ready.  Disregard previous debug insns to make decisions.\n(queue_insn): Never queue debug insns.\n(ready_add, ready_remove_first, ready_remove): Count debug insns.\n(schedule_insn): Don't reject debug insns because of issue rate.\n(get_ebb_head_tail, no_real_insns_p): Skip boundary debug insns.\n(queue_to_ready): Skip and discount debug insns.\n(choose_ready): Let debug insns through.\n(schedule_block): Check boundary debug insns.  Discount debug\ninsns, schedule them early.  Adjust whitespace.\n(set_priorities): Check for boundary debug insns.\n(add_jump_dependencies): Use dep_list_size.\n(prev_non_location_insn): New.\n(check_cfg): Use it.\n* tree-ssa-loop-ivopts.c (find-interesting_users): Skip debug\nstmts.\n(remove_unused_ivs): Reset debug stmts.\n* modulo-sched.c (const_iteration_count): Skip debug insns.\n(res_MII): Discount debug insns.\n(loop_single_full_bb_p): Skip debug insns.\n(sms_schedule): Likewise.\n(sms_schedule_by_order): Likewise.\n(ps_has_conflicts): Likewise.\n* caller-save.c (refmarker_fn): New.\n(save_call_clobbered_regs): Replace regs with saved mem in\ndebug insns.\n(mark_referenced_regs): Take pointer, mark and arg.  Adjust.\nCall refmarker_fn mark for hardregnos.\n(mark_reg_as_referenced): New.\n(replace_reg_with_saved_mem): New.\n* ipa-pure-const.c (check_stmt): Skip debug stmts.\n* cse.c (cse_insn): Canonicalize debug insns.  Skip them when\nsearching back.\n(cse_extended_basic_block): Skip debug insns.\n(count_reg_usage): Likewise.\n(is_dead_reg): New, split out of...\n(set_live_p): ... here.\n(insn_live_p): Use it for debug insns.\n* tree-stdarg.c (check_all_va_list_escapes): Skip debug stmts.\n(execute_optimize_stdarg): Likewise.\n* tree-ssa-dom.c (propagate_rhs_into_lhs): Likewise.\n* tree-ssa-propagate.c (substitute_and_fold): Don't regard\nchanges in debug stmts as changes.\n* sel-sched.c (moving_insn_creates_bookkeeping_block_p): New.\n(moveup_expr): Don't move across debug insns.  Don't move\ndebug insn if it would create a bookkeeping block.\n(moveup_expr_cached): Don't use cache for debug insns that\nare heads of blocks.\n(compute_av_set_inside_bb): Skip debug insns.\n(sel_rank_for_schedule): Schedule debug insns first.  Remove\ndead code.\n(block_valid_for_bookkeeping_p); Support lax searches.\n(create_block_for_bookkeeping): Adjust block numbers when\nencountering debug-only blocks.\n(find_place_for_bookkeeping): Deal with debug-only blocks.\n(generate_bookkeeping_insn): Accept no place to insert.\n(remove_temp_moveop_nops): New argument full_tidying.\n(prepare_place_to_insert): Deal with debug insns.\n(advance_state_on_fence): Debug insns don't start cycles.\n(update_boundaries): Take fence as argument.  Deal with\ndebug insns.\n(schedule_expr_on_boundary): No full_tidying on debug insns.\n(fill_insns): Deal with debug insns.\n(track_scheduled_insns_and_blocks): Don't count debug insns.\n(need_nop_to_preserve_insn_bb): New, split out of...\n(remove_insn_from_stream): ... this.\n(fur_orig_expr_not_found): Skip debug insns.\n* rtl.def (VALUE): Move up.\n(DEBUG_INSN): New.\n* tree-ssa-sink.c (all_immediate_uses_same_place): Skip debug\nstmts.\n(nearest_common_dominator_of_uses): Take debug_stmts argument.\nSet it if debug stmts are found.\n(statement_sink_location): Skip debug stmts.  Propagate\nmoving defs into debug stmts.\n* ifcvt.c (first_active_insn): Skip debug insns.\n(last_active_insns): Likewise.\n(cond_exec_process_insns): Likewise.\n(noce_process_if_block): Likewise.\n(check_cond_move_block): Likewise.\n(cond_move_convert_if_block): Likewise.\n(block_jumps_and_fallthru_p): Likewise.\n(dead_or_predicable): Likewise.\n* dwarf2out.c (debug_str_hash_forced): New.\n(find_AT_string): Add comment.\n(gen_label_for_indirect_string): New.\n(get_debug_string_label): New.\n(AT_string_form): Use it.\n(mem_loc_descriptor): Handle non-TLS symbols.  Handle MINUS , DIV,\nMOD, AND, IOR, XOR, NOT, ABS, NEG, and CONST_STRING.  Accept but\ndiscard COMPARE, IF_THEN_ELSE, ROTATE, ROTATERT, TRUNCATE and\nseveral operations that cannot be represented with DWARF opcodes.\n(loc_descriptor): Ignore SIGN_EXTEND and ZERO_EXTEND.  Require\ndwarf_version 4 for DW_OP_implicit_value and DW_OP_stack_value.\n(dwarf2out_var_location): Take during-call mark into account.\n(output_indirect_string): Update comment.  Output if there are\nlabel and references.\n(prune_indirect_string): New.\n(prune_unused_types): Call it if debug_str_hash_forced.\nMore in dwarf2out.c, from Jakub Jelinek <jakub@redhat.com>:\n(dw_long_long_const): Remove.\n(struct dw_val_struct): Change val_long_long type to rtx.\n(print_die, attr_checksum, same_dw_val_p, loc_descriptor): Adjust for\nval_long_long change to CONST_DOUBLE rtx from a long hi/lo pair.\n(output_die): Likewise.  Use HOST_BITS_PER_WIDE_INT size of each\ncomponent instead of HOST_BITS_PER_LONG.\n(output_loc_operands): Likewise.   For const8* assert\nHOST_BITS_PER_WIDE_INT rather than HOST_BITS_PER_LONG is >= 64.\n(output_loc_operands_raw): For const8* assert HOST_BITS_PER_WIDE_INT\nrather than HOST_BITS_PER_LONG is >= 64.\n(add_AT_long_long): Remove val_hi and val_lo arguments, add\nval_const_double.\n(size_of_die): Use HOST_BITS_PER_WIDE_INT size multiplier instead of\nHOST_BITS_PER_LONG for dw_val_class_long_long.\n(add_const_value_attribute): Adjust add_AT_long_long caller.  Don't\nhandle TLS SYMBOL_REFs.  If CONST wraps a constant, tail recurse.\n(dwarf_stack_op_name): Handle DW_OP_implicit_value and\nDW_OP_stack_value.\n(size_of_loc_descr, output_loc_operands, output_loc_operands_raw):\nHandle DW_OP_implicit_value.\n(extract_int): Move prototype earlier.\n(mem_loc_descriptor): For SUBREG punt if inner\nmode size is wider than DWARF2_ADDR_SIZE.  Handle SIGN_EXTEND\nand ZERO_EXTEND by DW_OP_shl and DW_OP_shr{a,}.  Handle\nEQ, NE, GT, GE, LT, LE, GTU, GEU, LTU, LEU, SMIN, SMAX, UMIN,\nUMAX, SIGN_EXTRACT, ZERO_EXTRACT.\n(loc_descriptor): Compare mode size with DWARF2_ADDR_SIZE\ninstead of Pmode size.\n(loc_descriptor): Add MODE argument.  Handle CONST_INT, CONST_DOUBLE,\nCONST_VECTOR, CONST, LABEL_REF and SYMBOL_REF if mode != VOIDmode,\nattempt to handle other expressions.  Don't handle TLS SYMBOL_REFs.\n(concat_loc_descriptor, concatn_loc_descriptor,\nloc_descriptor_from_tree_1): Adjust loc_descriptor callers.\n(add_location_or_const_value_attribute): Likewise.  For single\nlocation loc_lists attempt to use add_const_value_attribute\nfor constant decls.  Add DW_AT_const_value even if\nNOTE_VAR_LOCATION is VAR_LOCATION with CONSTANT_P or CONST_STRING\nin its expression.\n* cfgbuild.c (inside_basic_block_p): Handle debug insns.\n(control_flow_insn_p): Likewise.\n* tree-parloops.c (eliminate_local_variables_stmt): Handle debug\nstmt.\n(separate_decls_in_region_debug_bind): New.\n(separate_decls_in_region): Process debug bind stmts afterwards.\n* recog.c (verify_changes): Handle debug insns.\n(extract_insn): Likewise.\n(peephole2_optimize): Skip debug insns.\n* dse.c (scan_insn): Skip debug insns.\n* sel-sched-ir.c (return_nop_to_pool): Take full_tidying argument.\nPass it on.\n(setup_id_for_insn): Handle debug insns.\n(maybe_tidy_empty_bb): Adjust whitespace.\n(tidy_control_flow): Skip debug insns.\n(sel_remove_insn): Adjust for debug insns.\n(sel_estimate_number_of_insns): Skip debug insns.\n(create_insn_rtx_from_pattern): Handle debug insns.\n(create_copy_of_insn_rtx): Likewise.\n* sel-sched-.h (sel_bb_end): Declare.\n(sel_bb_empty_or_nop_p): New.\n(get_all_loop_exits): Use it.\n(_eligible_successor_edge_p): Likewise.\n(return_nop_to_pool): Adjust.\n* tree-eh.c (tre_empty_eh_handler_p): Skip debug stmts.\n* ira-lives.c (process_bb_node_lives): Skip debug insns.\n* gimple-pretty-print.c (dump_gimple_debug): New.\n(dump_gimple_stmt): Use it.\n(dump_bb_header): Skip gimple debug stmts.\n* regmove.c (optimize_reg_copy_1): Discount debug insns.\n(fixup_match_2): Likewise.\n(regmove_backward_pass): Likewise.  Simplify combined\nreplacement.  Handle debug insns.\n* function.c (instantiate_virtual_regs): Handle debug insns.\n* function.h (struct emit_status): Add x_cur_debug_insn_uid.\n* print-rtl.h: Include cselib.h.\n(print_rtx): Print VALUEs.  Split out and recurse for\nVAR_LOCATIONs.\n* df.h (df_inns_rescan_debug_internal): Declare.\n* gcse.c (alloc_hash_table): Estimate n_insns.\n(cprop_insn): Don't regard debug insns as changes.\n(bypass_conditional_jumps): Skip debug insns.\n(one_pre_gcse_pass): Adjust.\n(one_code_hoisting_pass): Likewise.\n(compute_ld_motion_mems): Skip debug insns.\n(one_cprop_pass): Adjust.\n* tree-if-conv.c (tree_if_convert_stmt): Reset debug stmts.\n(if_convertible_stmt_p): Handle debug stmts.\n* init-regs.c (initialize_uninitialized_regs): Skip debug insns.\n* tree-vect-loop.c (vect_is_simple_reduction): Skip debug stmts.\n* ira-build.c (create_bb_allocnos): Skip debug insns.\n* tree-flow-inline.h (has_zero_uses): Discount debug stmts.\n(has_single_use): Likewise.\n(single_imm_use): Likewise.\n(num_imm_uses): Likewise.\n* tree-ssa-phiopt.c (empty_block_p): Skip debug stmts.\n* tree-ssa-coalesce.c (build_ssa_conflict_graph): Skip debug stmts.\n(create_outofssa_var_map): Likewise.\n* lower-subreg.c (adjust_decomposed_uses): New.\n(resolve_debug): New.\n(decompose_multiword_subregs): Use it.\n* tree-dfa.c (find_referenced_vars): Skip debug stmts.\n* emit-rtl.c: Include params.h.\n(cur_debug_insn_uid): Define.\n(set_new_first_and_last_insn): Set cur_debug_insn_uid too.\n(copy_rtx_if_shared_1): Handle debug insns.\n(reset_used_flags): Likewise.\n(set_used_flags): LIkewise.\n(get_max_insn_count): New.\n(next_nondebug_insn): New.\n(prev_nondebug_insn): New.\n(make_debug_insn_raw): New.\n(emit_insn_before_noloc): Handle debug insns.\n(emit_jump_insn_before_noloc): Likewise.\n(emit_call_insn_before_noloc): Likewise.\n(emit_debug_insn_before_noloc): New.\n(emit_insn_after_noloc): Handle debug insns.\n(emit_jump_insn_after_noloc): Likewise.\n(emit_call_insn_after_noloc): Likewise.\n(emit_debug_insn_after_noloc): Likewise.\n(emit_insn_after): Take loc from earlier non-debug insn.\n(emit_jump_insn_after): Likewise.\n(emit_call_insn_after): Likewise.\n(emit_debug_insn_after_setloc): New.\n(emit_debug_insn_after): New.\n(emit_insn_before): Take loc from later non-debug insn.\n(emit_jump_insn_before): Likewise.\n(emit_call_insn_before): Likewise.\n(emit_debug_insn_before_setloc): New.\n(emit_debug_insn_before): New.\n(emit_insn): Handle debug insns.\n(emit_debug_insn): New.\n(emit_jump_insn): Handle debug insns.\n(emit_call_insn): Likewise.\n(emit): Likewise.\n(init_emit): Take min-nondebug-insn-uid into account.\nInitialize cur_debug_insn_uid.\n(emit_copy_of_insn_after): Handle debug insns.\n* cfgexpand.c (gimple_assign_rhs_to_tree): Do not overwrite\nlocation of single rhs in place.\n(maybe_dump_rtl_for_gimple_stmt): Dump lineno.\n(floor_sdiv_adjust): New.\n(cell_sdiv_adjust): New.\n(cell_udiv_adjust): New.\n(round_sdiv_adjust): New.\n(round_udiv_adjust): New.\n(wrap_constant): Moved from cselib.\n(unwrap_constant): New.\n(expand_debug_expr): New.\n(expand_debug_locations): New.\n(expand_gimple_basic_block): Drop hiding redeclaration.  Expand\ndebug bind stmts.\n(gimple_expand_cfg): Expand debug locations.\n* cselib.c: Include tree-pass.h.\n(struct expand_value_data): New.\n(cselib_record_sets_hook): New.\n(PRESERVED_VALUE_P, LONG_TERM_PRESERVED_VALUE_P): New.\n(cselib_clear_table): Move, and implemnet in terms of...\n(cselib_reset_table_with_next_value): ... this.\n(cselib_get_next_unknown_value): New.\n(discard_useless_locs): Don't discard preserved values.\n(cselib_preserve_value): New.\n(cselib_preserved_value_p): New.\n(cselib_preserve_definitely): New.\n(cselib_clear_preserve): New.\n(cselib_preserve_only_values): New.\n(new_cselib_val): Take rtx argument.  Dump it in details.\n(cselib_lookup_mem): Adjust.\n(expand_loc): Take regs_active in struct.  Adjust.  Silence\ndumps unless details are requested.\n(cselib_expand_value_rtx_cb): New.\n(cselib_expand_value_rtx): Rename and reimplment in terms of...\n(cselib_expand_value_rtx_1): ... this.  Adjust.  Silence dumps\nwithout details.  Copy more subregs.  Try to resolve values\nusing a callback.  Wrap constants.\n(cselib_subst_to_values): Adjust.\n(cselib_log_lookup): New.\n(cselib_lookup): Call it.\n(cselib_invalidate_regno): Don't count preserved values as\nuseless.\n(cselib_invalidate_mem): Likewise.\n(cselib_record_set): Likewise.\n(struct set): Renamed to cselib_set, moved to cselib.h.\n(cselib_record_sets): Adjust.  Call hook.\n(cselib_process_insn): Reset table when it would be cleared.\n(dump_cselib_val): New.\n(dump_cselib_table): New.\n* tree-cfgcleanup.c (tree_forwarded_block_p): Skip debug stmts.\n(remove_forwarder_block): Support moving debug stmts.\n* cselib.h (cselib_record_sets_hook): Declare.\n(cselib_expand_callback): New type.\n(cselib_expand_value_rtx_cb): Declare.\n(cselib_reset_table_with_next_value): Declare.\n(cselib_get_next_unknown_value): Declare.\n(cselib_preserve_value): Declare.\n(cselib_preserved_value_p): Declare.\n(cselib_preserve_only_values): Declare.\n(dump_cselib_table): Declare.\n* cfgcleanup.c (flow_find_cross_jump): Skip debug insns.\n(try_crossjump_to_edge): Likewise.\n(delete_unreachable_blocks): Remove dominant GIMPLE blocks after\ndominated blocks when debug stmts are present.\n* simplify-rtx.c (delegitimize_mem_from_attrs): New.\n* tree-ssa-live.c (remove_unused_locals): Skip debug stmts.\n(set_var_live_on_entry): Likewise.\n* loop-invariant.c (find_invariants_bb): Skip debug insns.\n* cfglayout.c (curr_location, last_location): Make static.\n(set_curr_insn_source_location): Don't avoid bouncing.\n(get_curr_insn_source_location): New.\n(get_curr_insn_block): New.\n(duplicate_insn_chain): Handle debug insns.\n* tree-ssa-forwprop.c (forward_propagate_addr_expr): Propagate\ninto debug stmts.\n* common.opt (fcompare-debug): Move to sort order.\n(fdump-unnumbered-links): Likewise.\n(fvar-tracking-assignments): New.\n(fvar-tracking-assignments-toggle): New.\n* tree-ssa-dce.c (mark_stmt_necessary): Don't mark blocks\nbecause of debug stmts.\n(mark_stmt_if_obviously_necessary): Mark debug stmts.\n(eliminate_unnecessary_stmts): Walk dominated blocks before\ndominators.\n* tree-ssa-ter.c (find_replaceable_in_bb): Skip debug stmts.\n* ira.c (memref_used_between_p): Skip debug insns.\n(update_equiv_regs): Likewise.\n* sched-deps.c (sd_lists_size): Accept empty list.\n(sd_init_insn): Mark debug insns.\n(sd_finish_insn): Unmark them.\n(sd_add_dep): Reject non-debug deps on debug insns.\n(fixup_sched_groups): Give debug insns group treatment.\nSkip debug insns.\n(sched_analyze_reg): Don't mark debug insns for sched before call.\n(sched_analyze_2): Handle debug insns.\n(sched_analyze_insn): Compute next non-debug insn.  Handle debug\ninsns.\n(deps_analyze_insn): Handle debug insns.\n(deps_start_bb): Skip debug insns.\n(init_deps): Initialize last_debug_insn.\n* tree-ssa.c (target_for_debug_bind): New.\n(find_released_ssa_name): New.\n(propagate_var_def_into_debug_stmts): New.\n(propagate_defs_into_debug_stmts): New.\n(verify_ssa): Skip debug bind stmts without values.\n(warn_uninialized_vars): Skip debug stmts.\n* target-def.h (TARGET_DELEGITIMIZE_ADDRESS): Set default.\n* rtl.c (rtx_equal_p_cb): Handle VALUEs.\n(rtx_equal_p): Likewise.\n* ira-costs.c (scan_one_insn): Skip debug insns.\n(process_bb_node_for_hard_reg_moves): Likewise.\n* rtl.h (DEBUG_INSN_P): New.\n(NONDEBUG_INSN_P): New.\n(MAY_HAVE_DEBUG_INSNS): New.\n(INSN_P): Accept debug insns.\n(RTX_FRAME_RELATED_P): Likewise.\n(INSN_DELETED_P): Likewise\n(PAT_VAR_LOCATION_DECL): New.\n(PAT_VAR_LOCATION_LOC): New.\n(PAT_VAR_OCATION_STATUS): New.\n(NOTE_VAR_LOCATION_DECL): Reimplement.\n(NOTE_VAR_LOCATION_LOC): Likewise.\n(NOTE_VAR_LOCATION_STATUS): Likewise.\n(INSN_VAR_LOCATION): New.\n(INSN_VAR_LOCATION_DECL): New.\n(INSN_VAR_LOCATION_LOC): New.\n(INSN_VAR_LOCATION_STATUS): New.\n(gen_rtx_UNKNOWN_VAR_LOC): New.\n(VAR_LOC_UNKNOWN_P): New.\n(NOTE_DURING_CALL_P): New.\n(SCHED_GROUP_P): Accept debug insns.\n(emit_debug_insn_before): Declare.\n(emit_debug_insn_before_noloc): Declare.\n(emit_debug_insn_beore_setloc): Declare.\n(emit_debug_insn_after): Declare.\n(emit_debug_insn_after_noloc): Declare.\n(emit_debug_insn_after_setloc): Declare.\n(emit_debug_insn): Declare.\n(make_debug_insn_raw): Declare.\n(prev_nondebug_insn): Declare.\n(next_nondebug_insn): Declare.\n(delegitimize_mem_from_attrs): Declare.\n(get_max_insn_count): Declare.\n(wrap_constant): Declare.\n(unwrap_constant): Declare.\n(get_curr_insn_source_location): Declare.\n(get_curr_insn_block): Declare.\n* tree-inline.c (insert_debug_decl_map): New.\n(processing_debug_stmt): New.\n(remap_decl): Don't create new mappings in debug stmts.\n(remap_gimple_op_r): Don't add references in debug stmts.\n(copy_tree_body_r): Likewise.\n(remap_gimple_stmt): Handle debug bind stmts.\n(copy_bb): Skip debug stmts.\n(copy_edges_for_bb): Likewise.\n(copy_debug_stmt): New.\n(copy_debug_stmts): New.\n(copy_body): Copy debug stmts at the end.\n(insert_init_debug_bind): New.\n(insert_init_stmt): Take id.  Skip and emit debug stmts.\n(setup_one_parameter): Remap variable earlier, register debug\nmapping.\n(estimate_num_insns): Skip debug stmts.\n(expand_call_inline): Preserve debug_map.\n(optimize_inline_calls): Check for no debug_stmts left-overs.\n(unsave_expr_now): Preserve debug_map.\n(copy_gimple_seq_and_replace_locals): Likewise.\n(tree_function_versioning): Check for no debug_stmts left-overs.\nInit and destroy debug_map as needed.  Split edges unconditionally.\n(build_duplicate_type): Init and destroy debug_map as needed.\n* tree-inline.h: Include gimple.h instead of pointer-set.h.\n(struct copy_body_data): Add debug_stmts and debug_map.\n* sched-int.h (struct ready_list): Add n_debug.\n(struct deps): Add last_debug_insn.\n(DEBUG_INSN_SCHED_P): New.\n(BOUNDARY_DEBUG_INSN_P): New.\n(SCHEDULE_DEBUG_INSN_P): New.\n(sd_iterator_cond): Accept empty list.\n* combine.c (create_log_links): Skip debug insns.\n(combine_instructions): Likewise.\n(cleanup_auto_inc_dec): New.  From Jakub Jelinek: Make sure the\nreturn value is always unshared.\n(struct rtx_subst_pair): New.\n(auto_adjust_pair): New.\n(propagate_for_debug_subst): New.\n(propagate_for_debug): New.\n(try_combine): Skip debug insns.  Propagate removed defs into\ndebug insns.\n(next_nonnote_nondebug_insn): New.\n(distribute_notes): Use it.  Skip debug insns.\n(distribute_links): Skip debug insns.\n* tree-outof-ssa.c (set_location_for_edge): Likewise.\n* resource.c (mark_target_live_regs): Likewise.\n* var-tracking.c: Include cselib.h and target.h.\n(enum micro_operation_type): Add MO_VAL_USE, MO_VAL_LOC, and\nMO_VAL_SET.\n(micro_operation_type_name): New.\n(enum emit_note_where): Add EMIT_NOTE_AFTER_CALL_INSN.\n(struct micro_operation_def): Update comments.\n(decl_or_value): New type.  Use instead of decls.\n(struct emit_note_data_def): Add vars.\n(struct attrs_def): Use decl_or_value.\n(struct variable_tracking_info_def): Add permp, flooded.\n(struct location_chain_def): Update comment.\n(struct variable_part_def): Use decl_or_value.\n(struct variable_def): Make var_part a variable length array.\n(valvar_pool): New.\n(scratch_regs): New.\n(cselib_hook_called): New.\n(dv_is_decl_p): New.\n(dv_is_value_p): New.\n(dv_as_decl): New.\n(dv_as_value): New.\n(dv_as_opaque): New.\n(dv_onepart_p): New.\n(dv_pool): New.\n(IS_DECL_CODE): New.\n(check_value_is_not_decl): New.\n(dv_from_decl): New.\n(dv_from_value): New.\n(dv_htab_hash): New.\n(variable_htab_hash): Use it.\n(variable_htab_eq): Support values.\n(variable_htab_free): Free from the right pool.\n(attrs_list_member, attrs_list_insert): Use decl_or_value.\n(attrs_list_union): Adjust.\n(attrs_list_mpdv_union): New.\n(tie_break_pointers): New.\n(canon_value_cmp): New.\n(unshare_variable): Return possibly-modified slot.\n(vars_copy_1): Adjust.\n(var_reg_decl_set): Adjust.  Split out of...\n(var_reg_set): ... this.\n(get_init_value): Adjust.\n(var_reg_delete_and_set): Adjust.\n(var_reg_delete): Adjust.\n(var_regno_delete): Adjust.\n(var_mem_decl_set): Split out of...\n(var_mem_set): ... this.\n(var_mem_delete_and_set): Adjust.\n(var_mem_delete): Adjust.\n(val_store): New.\n(val_reset): New.\n(val_resolve): New.\n(variable_union): Adjust.  Speed up merge of 1-part vars.\n(variable_canonicalize): Use unshared slot.\n(VALUED_RECURSED_INTO): New.\n(find_loc_in_1pdv): New.\n(struct dfset_merge): New.\n(insert_into_intersection): New.\n(intersect_loc_chains): New.\n(loc_cmp): New.\n(canonicalize_loc_order_check): New.\n(canonicalize_values_mark): New.\n(canonicalize_values_star): New.\n(variable_merge_over_cur): New.\n(variable_merge_over_src): New.\n(dataflow_set_merge): New.\n(dataflow_set_equiv_regs): New.\n(remove_duplicate_values): New.\n(struct dfset_post_merge): New.\n(variable_post_merge_new_vals): New.\n(variable_post_merge_perm_vals): New.\n(dataflow_post_merge_adjust): New.\n(find_mem_expr_in_1pdv): New.\n(dataflow_set_preserve_mem_locs): New.\n(dataflow_set_remove_mem_locs): New.\n(dataflow_set_clear_at_call): New.\n(onepart_variable_different_p): New.\n(variable_different_p): Use it.\n(dataflow_set_different_1): Adjust.  Make detailed dump\nmore verbose.\n(track_expr_p): Add need_rtl parameter.  Don't generate rtl\nif not needed.\n(track_loc_p): Pass it true.\n(struct count_use_info): New.\n(find_use_val): New.\n(replace_expr_with_values): New.\n(log_op_type): New.\n(use_type): New, partially split out of...\n(count_uses): ... this.  Count new micro-ops.\n(count_uses_1): Adjust.\n(count_stores): Adjust.\n(count_with_sets): New.\n(VAL_NEEDS_RESOLUTION): New.\n(VAL_HOLDS_TRACK_EXPR): New.\n(VAL_EXPR_IS_COPIED): New.\n(VAL_EXPR_IS_CLOBBERED): New.\n(add_uses): Adjust.  Generate new micro-ops.\n(add_uses_1): Adjust.\n(add_stores): Generate new micro-ops.\n(add_with_sets): New.\n(find_src_status): Adjust.\n(find_src_set_src): Adjust.\n(compute_bb_dataflow): Use dataflow_set_clear_at_call.\nHandle new micro-ops.  Canonicalize value equivalances.\n(vt_find_locations): Compute total size of hash tables for\ndumping.  Perform merge for var-tracking-assignments.  Don't\ndisregard single-block loops.\n(dump_attrs_list): Handle decl_or_value.\n(dump_variable): Take variable.  Deal with decl_or_value.\n(dump_variable_slot): New.\n(dump_vars): Use it.\n(dump_dataflow_sets): Adjust.\n(set_slot_part): New, extended to support one-part variables\nafter splitting out of...\n(set_variable_part): ... this.\n(clobber_slot_part): New, split out of...\n(clobber_variable_part): ... this.\n(delete_slot_part): New, split out of...\n(delete_variable_part): .... this.\n(check_wrap_constant): New.\n(vt_expand_loc_callback): New.\n(vt_expand_loc): New.\n(emit_note_insn_var_location): Adjust.  Handle values.  Handle\nEMIT_NOTE_AFTER_CALL_INSN.\n(emit_notes_for_differences_1): Adjust.  Handle values.\n(emit_notes_for_differences_2): Likewise.\n(emit_notes_for_differences): Adjust.\n(emit_notes_in_bb): Take pointer to set.  Emit AFTER_CALL_INSN\nnotes.  Adjust.  Handle new micro-ops.\n(vt_add_function_parameters): Adjust.  Create and bind values.\n(vt_initialize): Adjust.  Initialize scratch_regs and\nvalvar_pool, flooded and perm..  Initialize and use cselib.  Log\noperations.  Move some code to count_with_sets and add_with_sets.\n(delete_debug_insns): New.\n(vt_debug_insns_local): New.\n(vt_finalize): Release permp, valvar_pool, scratch_regs.  Finish\ncselib.\n(var_tracking_main): If var-tracking-assignments is enabled\nbut var-tracking isn't, delete debug insns and leave.  Likewise\nif we exceed limits or fail the stack adjustments tests, and\nafter all var-tracking processing.\nMore in var-tracking, from Jakub Jelinek <jakub@redhat.com>:\n(dataflow_set): Add traversed_vars.\n(value_chain, const_value_chain): New typedefs.\n(value_chain_pool, value_chains): New variables.\n(value_chain_htab_hash, value_chain_htab_eq, add_value_chain,\nadd_value_chains, add_cselib_value_chains, remove_value_chain,\nremove_value_chains, remove_cselib_value_chains): New functions.\n(shared_hash_find_slot_unshare_1, shared_hash_find_slot_1,\nshared_hash_find_slot_noinsert_1, shared_hash_find_1): New\nstatic inlines.\n(shared_hash_find_slot_unshare, shared_hash_find_slot,\nshared_hash_find_slot_noinsert, shared_hash_find): Update.\n(dst_can_be_shared): New variable.\n(unshare_variable): Unshare set->vars if shared, use shared_hash_*.\nClear dst_can_be_shared.  If set->traversed_vars is non-NULL and\ndifferent from set->vars, look up slot again instead of using the\npassed in slot.\n(dataflow_set_init): Initialize traversed_vars.\n(variable_union): Use shared_hash_*.  Use initially NO_INSERT\nlookup if set->vars is shared.  Don't keep slot cleared before\ncalling unshare_variable.  Unshare set->vars if needed.  Adjust\nunshare_variable callers.  Clear dst_can_be_shared if needed.\nEven ->refcount == 1 vars must be unshared if set->vars is shared\nand var needs to be modified.\n(dataflow_set_union): Set traversed_vars during canonicalization.\n(VALUE_CHANGED, DECL_CHANGED): Define.\n(set_dv_changed, dv_changed_p): New static inlines.\n(track_expr_p): Clear DECL_CHANGED.\n(dump_dataflow_sets): Set it.\n(variable_was_changed): Call set_dv_changed.\n(emit_note_insn_var_location): Likewise.\n(changed_variables_stack): New variable.\n(check_changed_vars_1, check_changed_vars_2): New functions.\n(emit_notes_for_changes): Do nothing if changed_variables is\nempty.  Traverse changed_variables with check_changed_vars_1,\ncall check_changed_vars_2 on each changed_variables_stack entry.\n(emit_notes_in_bb): Add SET argument.  Just clear it at the\nbeginning, use it instead of local &set, don't destroy it at the\nend.\n(vt_emit_notes): Call dataflow_set_clear early on all\nVTI(bb)->out sets, never use them, instead use emit_notes_in_bb\ncomputed set, dataflow_set_clear also VTI(bb)->in when we are\ndone with the basic block.  Initialize changed_variables_stack,\nfree it afterwards.  If ENABLE_CHECKING verify that after noting\ndifferences to an empty set value_chains hash table is empty.\n(vt_initialize): Initialize value_chains and value_chain_pool.\n(vt_finalize): Delete value_chains htab, free value_chain_pool.\n(variable_tracking_main): Call dump_dataflow_sets before calling\nvt_emit_notes, not after it.\n* tree-flow.h (propagate_defs_into_debug_stmts): Declare.\n(propagate_var_def_into_debug_stmts): Declare.\n* df-problems.c (df_lr_bb_local_compute): Skip debug insns.\n(df_set_note): Reject debug insns.\n(df_whole_mw_reg_dead_p): Take added_notes_p argument.  Don't\nadd notes to debug insns.\n(df_note_bb_compute): Adjust.  Likewise.\n(df_simulate_uses): Skip debug insns.\n(df_simulate_initialize_backwards): Likewise.\n* reg-stack.c (subst_stack_regs_in_debug_insn): New.\n(subst_stack_regs_pat): Reject debug insns.\n(convert_regs_1): Handle debug insns.\n* Makefile.in (TREE_INLINE_H): Take pointer-set.h from GIMPLE_H.\n(print-rtl.o): Depend on cselib.h.\n(cselib.o): Depend on TREE_PASS_H.\n(var-tracking.o): Depend on cselib.h and TARGET_H.\n* sched-rgn.c (rgn_estimate_number_of_insns): Discount\ndebug insns.\n(init_ready_list): Skip boundary debug insns.\n(add_branch_dependences): Skip debug insns.\n(free_block_dependencies): Check for blocks with only debug\ninsns.\n(compute_priorities): Likewise.\n* gimple.c (gss_for_code): Handle GIMPLE_DEBUG.\n(gimple_build_with_ops_stat): Take subcode as unsigned.  Adjust\nall callers.\n(gimple_build_debug_bind_stat): New.\n(empty_body_p): Skip debug stmts.\n(gimple_has_side_effects): Likewise.\n(gimple_rhs_has_side_effects): Likewise.\n* gimple.h (enum gimple_debug_subcode, GIMPLE_DEBUG_BIND): New.\n(gimple_build_debug_bind_stat): Declare.\n(gimple_build_debug_bind): Define.\n(is_gimple_debug): New.\n(gimple_debug_bind_p): New.\n(gimple_debug_bind_get_var): New.\n(gimple_debug_bind_get_value): New.\n(gimple_debug_bind_get_value_ptr): New.\n(gimple_debug_bind_set_var): New.\n(gimple_debug_bind_set_value): New.\n(GIMPLE_DEBUG_BIND_NOVALUE): New internal temporary macro.\n(gimple_debug_bind_reset_value): New.\n(gimple_debug_bind_has_value_p): New.\n(gsi_next_nondebug): New.\n(gsi_prev_nondebug): New.\n(gsi_start_nondebug_bb): New.\n(gsi_last_nondebug_bb): New.\n* sched-vis.c (print_pattern): Handle VAR_LOCATION.\n(print_insn): Handle DEBUG_INSN.\n* tree-cfg.c (remove_bb): Walk stmts backwards.  Let loc\nof first insn prevail.\n(first_stmt): Skip debug stmts.\n(first_non_label_stmt): Likewise.\n(last_stmt): Likewise.\n(has_zero_uses_1): New.\n(single_imm_use_1): New.\n(verify_gimple_debug): New.\n(verify_types_in_gimple_stmt): Handle debug stmts.\n(verify_stmt): Likewise.\n(debug_loop_num): Skip debug stmts.\n(remove_edge_and_dominated_blocks): Remove dominators last.\n* tree-ssa-reasssoc.c (rewrite_expr_tree): Propagate into\ndebug stmts.\n(linearize_expr): Likewise.\n* config/i386/i386.c (ix86_delegitimize_address): Call\ndefault implementation.\n* config/ia64/ia64.c (ia64_safe_itanium_class): Handle debug\ninsns.\n(group_barrier_needed): Skip debug insns.\n(emit_insn_group_barriers): Likewise.\n(emit_all_insn_group_barriers): Likewise.\n(ia64_variable_issue): Handle debug insns.\n(ia64_dfa_new_cycle): Likewise.\n(final_emit_insn_group_barriers): Skip debug insns.\n(ia64_dwarf2out_def_steady_cfa): Take frame argument.  Don't\ndef cfa without frame.\n(process_set): Likewise.\n(process_for_unwind_directive): Pass frame on.\n* config/rs6000/rs6000.c (TARGET_DELEGITIMIZE_ADDRESS): Define.\n(rs6000_delegitimize_address): New.\n(rs6000_debug_adjust_cost): Handle debug insns.\n(is_microcoded_insn): Likewise.\n(is_cracked_insn): Likewise.\n(is_nonpipeline_insn): Likewise.\n(insn_must_be_first_in_group): Likewise.\n(insn_must_be_last_in_group): Likewise.\n(force_new_group): Likewise.\n* cfgrtl.c (rtl_split_block): Emit INSN_DELETED note if block\ncontains only debug insns.\n(rtl_merge_blocks): Skip debug insns.\n(purge_dead_edges): Likewise.\n(rtl_block_ends_with_call_p): Skip debug insns.\n* dce.c (deletable_insn_p): Handle VAR_LOCATION.\n(mark_reg_dependencies): Skip debug insns.\n* params.def (PARAM_MIN_NONDEBUG_INSN_UID): New.\n* tree-ssanames.c (release_ssa_name): Propagate def into\ndebug stmts.\n* tree-ssa-threadedge.c\n(record_temporary_equivalences_from_stmts): Skip debug stmts.\n* regcprop.c (replace_oldest_value_addr): Skip debug insns.\n(replace_oldest_value_mem): Use ALL_REGS for debug insns.\n(copyprop_hardreg_forward_1): Handle debug insns.\n* reload1.c (reload): Skip debug insns.  Replace unassigned\npseudos in debug insns with their equivalences.\n(eliminate_regs_in_insn): Skip debug insns.\n(emit_input_reload_insns): Skip debug insns at first, adjust\nthem later.\n* tree-ssa-operands.c (add_virtual_operand): Reject debug stmts.\n(get_indirect_ref_operands): Pass opf_no_vops on.\n(get_expr_operands): Likewise.  Skip debug stmts.\n(parse_ssa_operands): Scan debug insns with opf_no_vops.\ngcc/testsuite/ChangeLog:\n* gcc.dg/guality/guality.c: New.\n* gcc.dg/guality/guality.h: New.\n* gcc.dg/guality/guality.exp: New.\n* gcc.dg/guality/example.c: New.\n* lib/gcc-dg.exp (cleanup-dump): Remove .gk files.\n(cleanup-saved-temps): Likewise, .gkd files too.\ngcc/cp/ChangeLog:\n* cp-tree.h (TFF_NO_OMIT_DEFAULT_TEMPLATE_ARGUMENTS): New.\n* cp-lang.c (cxx_dwarf_name): Pass it.\n* error.c (count_non_default_template_args): Take flags as\nargument.  Adjust all callers.  Skip counting of default\narguments if the new flag is given.\nChangeLog:\n* Makefile.tpl (BUILD_CONFIG): Default to bootstrap-debug.\n* Makefile.in: Rebuilt.\ncontrib/ChangeLog:\n* compare-debug: Look for .gkd files and compare them.\nconfig/ChangeLog:\n* bootstrap-debug.mk: Add comments.\n* bootstrap-debug-big.mk: New.\n* bootstrap-debug-lean.mk: New.\n* bootstrap-debug-ckovw.mk: Add comments.\n* bootstrap-debug-lib.mk: Drop CFLAGS for stages.  Use -g0\nfor TFLAGS in stage1.  Drop -fvar-tracking-assignments-toggle.\n\nFrom-SVN: r151311", "tree": {"sha": "c63195d1630a42653bb86a41ddece428f54707ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c63195d1630a42653bb86a41ddece428f54707ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fc68cba0989f9b8cf382858ef89b0aa1785cfa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc68cba0989f9b8cf382858ef89b0aa1785cfa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc68cba0989f9b8cf382858ef89b0aa1785cfa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc68cba0989f9b8cf382858ef89b0aa1785cfa9/comments", "author": null, "committer": null, "parents": [{"sha": "44cb38cf56e4e605bbab98a617d0687614026dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44cb38cf56e4e605bbab98a617d0687614026dc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44cb38cf56e4e605bbab98a617d0687614026dc5"}], "stats": {"total": 856, "additions": 856, "deletions": 0}, "files": [{"sha": "f7df4b8b542a8ff26e6af7c78ff06ff629e0c478", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc68cba0989f9b8cf382858ef89b0aa1785cfa9/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc68cba0989f9b8cf382858ef89b0aa1785cfa9/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=8fc68cba0989f9b8cf382858ef89b0aa1785cfa9", "patch": "@@ -1,3 +1,8 @@\n+2009-09-01  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* Makefile.tpl (BUILD_CONFIG): Default to bootstrap-debug.\n+\t* Makefile.in: Rebuilt.\n+\n 2009-09-01  Chris Demetriou  <cgd@google.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "031b50936c7e8d2c72643482ab485a6c276c669b", "filename": "config/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc68cba0989f9b8cf382858ef89b0aa1785cfa9/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc68cba0989f9b8cf382858ef89b0aa1785cfa9/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=8fc68cba0989f9b8cf382858ef89b0aa1785cfa9", "patch": "@@ -1,3 +1,12 @@\n+2009-09-01  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* bootstrap-debug.mk: Add comments.\n+\t* bootstrap-debug-big.mk: New.\n+\t* bootstrap-debug-lean.mk: New.\n+\t* bootstrap-debug-ckovw.mk: Add comments.\n+\t* bootstrap-debug-lib.mk: Drop CFLAGS for stages.  Use -g0\n+\tfor TFLAGS in stage1.  Drop -fvar-tracking-assignments-toggle.\n+\n 2009-08-22  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* override.m4 (_GCC_AUTOCONF_VERSION): Bump to 2.64."}, {"sha": "77d7170046465c96f0529cd23d17f481e641ccb4", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc68cba0989f9b8cf382858ef89b0aa1785cfa9/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc68cba0989f9b8cf382858ef89b0aa1785cfa9/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=8fc68cba0989f9b8cf382858ef89b0aa1785cfa9", "patch": "@@ -1,3 +1,7 @@\n+2009-09-01  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* compare-debug: Look for .gkd files and compare them.\n+\n 2009-08-27  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \tPR testsuite/41166"}, {"sha": "a949848baf8a8e31b5c19217fca327460a918955", "filename": "gcc/ChangeLog", "status": "modified", "additions": 821, "deletions": 0, "changes": 821, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc68cba0989f9b8cf382858ef89b0aa1785cfa9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc68cba0989f9b8cf382858ef89b0aa1785cfa9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fc68cba0989f9b8cf382858ef89b0aa1785cfa9", "patch": "@@ -1,3 +1,824 @@\n+2009-09-01  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* doc/invoke.texi (-fvar-tracking-assignments): New.\n+\t(-fvar-tracking-assignments-toggle): New.\n+\t(-fdump-final-insns=file): Mark filename as optional.\n+\t(--param min-nondebug-insn-uid): New.\n+\t(-gdwarf-@{version}): Mention version 4.\n+\t* opts.c (common_handle_option): Accept it.\n+\t* tree-vrp.c (find_assert_locations_1): Skip debug stmts.\n+\t* regrename.c (regrename_optimize): Drop last.  Don't count debug\n+\tinsns as uses.  Don't reject change because of debug insn.\n+\t(do_replace): Reject DEBUG_INSN as chain starter.  Take base_regno\n+\tfrom the chain starter, and check for inexact matches in\n+\tDEBUG_INSNS.\n+\t(scan_rtx_reg): Accept inexact matches in DEBUG_INSNs.\n+\t(build_def_use): Simplify and fix the marking of DEBUG_INSNs.\n+\t* sched-ebb.c (schedule_ebbs): Skip boundary debug insns.\n+\t* fwprop.c (forward_propagate_and_simplify): ...into debug insns.\n+\t* doc/gimple.texi (is_gimple_debug): New.\n+\t(gimple_debug_bind_p): New.\n+\t(is_gimple_call, gimple_assign_cast_p): End sentence with period.\n+\t* doc/install.texi (bootstrap-debug): More details.\n+\t(bootstrap-debug-big, bootstrap-debug-lean): Document.\n+\t(bootstrap-debug-lib): More details.\n+\t(bootstrap-debug-ckovw): Update.\n+\t(bootstrap-time): New.\n+\t* tree-into-ssa.c (mark_def_sites): Skip debug stmts.\n+\t(insert_phi_nodes_for): Insert debug stmts.\n+\t(rewrite_stmt): Take iterator.  Insert debug stmts.\n+\t(rewrite_enter_block): Adjust.\n+\t(maybe_replace_use_in_debug_stmt): New.\n+\t(rewrite_update_stmt): Use it.\n+\t(mark_use_interesting): Return early for debug stmts.\n+\t* tree-ssa-loop-im.c (rewrite_bittest): Propagate DEFs into debug\n+\tstmts before replacing stmt.\n+\t(move_computations_stmt): Likewise.\n+\t* ira-conflicts.c (add_copies): Skip debug insns.\n+\t* regstat.c (regstat_init_n_sets_and_refs): Discount debug insns.\n+\t(regstat_bb_compute_ri): Skip debug insns.\n+\t* tree-ssa-threadupdate.c (redirection_block_p): Skip debug stmts.\n+\t* tree-ssa-loop-manip.c (find_uses_to_rename_stmt,\n+\tcheck_loop_closed_ssa_stmt): Skip debug stmts.\n+\t* tree-tailcall.c (find_tail_calls): Likewise.\n+\t* tree-ssa-loop-ch.c (should_duplicate_loop_header_p): Likewise.\n+\t* tree.h (MAY_HAVE_DEBUG_STMTS): New.\n+\t(build_var_debug_value_stat): Declare.\n+\t(build_var_debug_value): Define.\n+\t(target_for_debug_bind): Declare.\n+\t* reload.c (find_equiv_reg): Skip debug insns.\n+\t* rtlanal.c (reg_used_between_p): Skip debug insns.\n+\t(side_effects_p): Likewise.\n+\t(canonicalize_condition): Likewise.\n+\t* ddg.c (create_ddg_dep_from_intra_loop_link): Check that non-debug \n+\tinsns never depend on debug insns.\n+\t(create_ddg_dep_no_link): Likewise.\n+\t(add_cross_iteration_register_deps): Use ANTI_DEP for debug insns.\n+\tDon't add inter-loop dependencies for debug insns.\n+\t(build_intra_loop_deps): Likewise.\n+\t(create_ddg): Count debug insns.\n+\t* ddg.h (struct ddg::num_debug): New.\n+\t(num_backargs): Pair up with previous int field.\n+\t* diagnostic.c (diagnostic_report_diagnostic): Skip notes on\n+\t-fcompare-debug-second.\n+\t* final.c (get_attr_length_1): Skip debug insns.\n+\t(rest_of_clean-state): Don't dump CFA_RESTORE_STATE.\n+\t* gcc.c (invoke_as): Call compare-debug-dump-opt.\n+\t(driver_self_specs): Map -fdump-final-insns to\n+\t-fdump-final-insns=..\n+\t(get_local_tick): New.\n+\t(compare_debug_dump_opt_spec_function): Test for . argument and\n+\tcompute output name.  Compute temp output spec without flag name.\n+\tCompute -frandom-seed.\n+\t(OPT): Undef after use.\n+\t* cfgloopanal.c (num_loop_insns): Skip debug insns.\n+\t(average_num_loop_insns): Likewise.\n+\t* params.h (MIN_NONDEBUG_INSN_UID): New.\n+\t* gimple.def (GIMPLE_DEBUG): New.\n+\t* ipa-reference.c (scan_stmt_for_static_refs): Skip debug stmts.\n+\t* auto-inc-dec.c (merge_in_block): Skip debug insns.\n+\t(merge_in_block): Fix whitespace.\n+\t* toplev.c (flag_var_tracking): Update comment.\n+\t(flag_var_tracking_assignments): New.\n+\t(flag_var_tracking_assignments_toggle): New.\n+\t(process_options): Don't open final insns dump file if we're not\n+\tgoing to write to it.  Compute defaults for var_tracking.\n+\t* df-scan.c (df_insn_rescan_debug_internal): New.\n+\t(df_uses_record): Handle debug insns.\n+\t* haifa-sched.c (ready): Initialize n_debug.\n+\t(contributes_to_priority): Skip debug insns.\n+\t(dep_list_size): New.\n+\t(priority): Use it.\n+\t(rank_for_schedule): Likewise.  Schedule debug insns as soon as \n+\tthey're ready.  Disregard previous debug insns to make decisions.\n+\t(queue_insn): Never queue debug insns.\n+\t(ready_add, ready_remove_first, ready_remove): Count debug insns.\n+\t(schedule_insn): Don't reject debug insns because of issue rate.\n+\t(get_ebb_head_tail, no_real_insns_p): Skip boundary debug insns.\n+\t(queue_to_ready): Skip and discount debug insns.\n+\t(choose_ready): Let debug insns through.\n+\t(schedule_block): Check boundary debug insns.  Discount debug\n+\tinsns, schedule them early.  Adjust whitespace.\n+\t(set_priorities): Check for boundary debug insns.\n+\t(add_jump_dependencies): Use dep_list_size.\n+\t(prev_non_location_insn): New.\n+\t(check_cfg): Use it.\n+\t* tree-ssa-loop-ivopts.c (find-interesting_users): Skip debug\n+\tstmts.\n+\t(remove_unused_ivs): Reset debug stmts.\n+\t* modulo-sched.c (const_iteration_count): Skip debug insns.\n+\t(res_MII): Discount debug insns.\n+\t(loop_single_full_bb_p): Skip debug insns.\n+\t(sms_schedule): Likewise.\n+\t(sms_schedule_by_order): Likewise.\n+\t(ps_has_conflicts): Likewise.\n+\t* caller-save.c (refmarker_fn): New.\n+\t(save_call_clobbered_regs): Replace regs with saved mem in\n+\tdebug insns.\n+\t(mark_referenced_regs): Take pointer, mark and arg.  Adjust.\n+\tCall refmarker_fn mark for hardregnos.\n+\t(mark_reg_as_referenced): New.\n+\t(replace_reg_with_saved_mem): New.\n+\t* ipa-pure-const.c (check_stmt): Skip debug stmts.\n+\t* cse.c (cse_insn): Canonicalize debug insns.  Skip them when\n+\tsearching back.\n+\t(cse_extended_basic_block): Skip debug insns.\n+\t(count_reg_usage): Likewise.\n+\t(is_dead_reg): New, split out of...\n+\t(set_live_p): ... here.\n+\t(insn_live_p): Use it for debug insns.\n+\t* tree-stdarg.c (check_all_va_list_escapes): Skip debug stmts.\n+\t(execute_optimize_stdarg): Likewise.\n+\t* tree-ssa-dom.c (propagate_rhs_into_lhs): Likewise.\n+\t* tree-ssa-propagate.c (substitute_and_fold): Don't regard\n+\tchanges in debug stmts as changes.\n+\t* sel-sched.c (moving_insn_creates_bookkeeping_block_p): New.\n+\t(moveup_expr): Don't move across debug insns.  Don't move\n+\tdebug insn if it would create a bookkeeping block.\n+\t(moveup_expr_cached): Don't use cache for debug insns that\n+\tare heads of blocks.\n+\t(compute_av_set_inside_bb): Skip debug insns.\n+\t(sel_rank_for_schedule): Schedule debug insns first.  Remove\n+\tdead code.\n+\t(block_valid_for_bookkeeping_p); Support lax searches.\n+\t(create_block_for_bookkeeping): Adjust block numbers when\n+\tencountering debug-only blocks.\n+\t(find_place_for_bookkeeping): Deal with debug-only blocks.\n+\t(generate_bookkeeping_insn): Accept no place to insert.\n+\t(remove_temp_moveop_nops): New argument full_tidying.\n+\t(prepare_place_to_insert): Deal with debug insns.\n+\t(advance_state_on_fence): Debug insns don't start cycles.\n+\t(update_boundaries): Take fence as argument.  Deal with\n+\tdebug insns.\n+\t(schedule_expr_on_boundary): No full_tidying on debug insns.\n+\t(fill_insns): Deal with debug insns.\n+\t(track_scheduled_insns_and_blocks): Don't count debug insns.\n+\t(need_nop_to_preserve_insn_bb): New, split out of...\n+\t(remove_insn_from_stream): ... this.\n+\t(fur_orig_expr_not_found): Skip debug insns.\n+\t* rtl.def (VALUE): Move up.\n+\t(DEBUG_INSN): New.\n+\t* tree-ssa-sink.c (all_immediate_uses_same_place): Skip debug\n+\tstmts.\n+\t(nearest_common_dominator_of_uses): Take debug_stmts argument.\n+\tSet it if debug stmts are found.\n+\t(statement_sink_location): Skip debug stmts.  Propagate\n+\tmoving defs into debug stmts.\n+\t* ifcvt.c (first_active_insn): Skip debug insns.\n+\t(last_active_insns): Likewise.\n+\t(cond_exec_process_insns): Likewise.\n+\t(noce_process_if_block): Likewise.\n+\t(check_cond_move_block): Likewise.\n+\t(cond_move_convert_if_block): Likewise.\n+\t(block_jumps_and_fallthru_p): Likewise.\n+\t(dead_or_predicable): Likewise.\n+\t* dwarf2out.c (debug_str_hash_forced): New.\n+\t(find_AT_string): Add comment.\n+\t(gen_label_for_indirect_string): New.\n+\t(get_debug_string_label): New.\n+\t(AT_string_form): Use it.\n+\t(mem_loc_descriptor): Handle non-TLS symbols.  Handle MINUS , DIV,\n+\tMOD, AND, IOR, XOR, NOT, ABS, NEG, and CONST_STRING.  Accept but\n+\tdiscard COMPARE, IF_THEN_ELSE, ROTATE, ROTATERT, TRUNCATE and\n+\tseveral operations that cannot be represented with DWARF opcodes.\n+\t(loc_descriptor): Ignore SIGN_EXTEND and ZERO_EXTEND.  Require\n+\tdwarf_version 4 for DW_OP_implicit_value and DW_OP_stack_value.\n+\t(dwarf2out_var_location): Take during-call mark into account.\n+\t(output_indirect_string): Update comment.  Output if there are\n+\tlabel and references.\n+\t(prune_indirect_string): New.\n+\t(prune_unused_types): Call it if debug_str_hash_forced.\n+\tMore in dwarf2out.c, from Jakub Jelinek <jakub@redhat.com>:\n+\t(dw_long_long_const): Remove.\n+\t(struct dw_val_struct): Change val_long_long type to rtx.\n+\t(print_die, attr_checksum, same_dw_val_p, loc_descriptor): Adjust for\n+\tval_long_long change to CONST_DOUBLE rtx from a long hi/lo pair.\n+\t(output_die): Likewise.  Use HOST_BITS_PER_WIDE_INT size of each\n+\tcomponent instead of HOST_BITS_PER_LONG.\n+\t(output_loc_operands): Likewise.   For const8* assert\n+\tHOST_BITS_PER_WIDE_INT rather than HOST_BITS_PER_LONG is >= 64.\n+\t(output_loc_operands_raw): For const8* assert HOST_BITS_PER_WIDE_INT\n+\trather than HOST_BITS_PER_LONG is >= 64.\n+\t(add_AT_long_long): Remove val_hi and val_lo arguments, add\n+\tval_const_double.\n+\t(size_of_die): Use HOST_BITS_PER_WIDE_INT size multiplier instead of\n+\tHOST_BITS_PER_LONG for dw_val_class_long_long.\n+\t(add_const_value_attribute): Adjust add_AT_long_long caller.  Don't\n+\thandle TLS SYMBOL_REFs.  If CONST wraps a constant, tail recurse.\n+\t(dwarf_stack_op_name): Handle DW_OP_implicit_value and\n+\tDW_OP_stack_value.\n+\t(size_of_loc_descr, output_loc_operands, output_loc_operands_raw):\n+\tHandle DW_OP_implicit_value.\n+\t(extract_int): Move prototype earlier.\n+\t(mem_loc_descriptor): For SUBREG punt if inner\n+\tmode size is wider than DWARF2_ADDR_SIZE.  Handle SIGN_EXTEND\n+\tand ZERO_EXTEND by DW_OP_shl and DW_OP_shr{a,}.  Handle\n+\tEQ, NE, GT, GE, LT, LE, GTU, GEU, LTU, LEU, SMIN, SMAX, UMIN,\n+\tUMAX, SIGN_EXTRACT, ZERO_EXTRACT.\n+\t(loc_descriptor): Compare mode size with DWARF2_ADDR_SIZE\n+\tinstead of Pmode size.\n+\t(loc_descriptor): Add MODE argument.  Handle CONST_INT, CONST_DOUBLE,\n+\tCONST_VECTOR, CONST, LABEL_REF and SYMBOL_REF if mode != VOIDmode,\n+\tattempt to handle other expressions.  Don't handle TLS SYMBOL_REFs.\n+\t(concat_loc_descriptor, concatn_loc_descriptor,\n+\tloc_descriptor_from_tree_1): Adjust loc_descriptor callers.\n+\t(add_location_or_const_value_attribute): Likewise.  For single\n+\tlocation loc_lists attempt to use add_const_value_attribute\n+\tfor constant decls.  Add DW_AT_const_value even if\n+\tNOTE_VAR_LOCATION is VAR_LOCATION with CONSTANT_P or CONST_STRING\n+\tin its expression.\n+\t* cfgbuild.c (inside_basic_block_p): Handle debug insns.\n+\t(control_flow_insn_p): Likewise.\n+\t* tree-parloops.c (eliminate_local_variables_stmt): Handle debug\n+\tstmt.\n+\t(separate_decls_in_region_debug_bind): New.\n+\t(separate_decls_in_region): Process debug bind stmts afterwards.\n+\t* recog.c (verify_changes): Handle debug insns.\n+\t(extract_insn): Likewise.\n+\t(peephole2_optimize): Skip debug insns.\n+\t* dse.c (scan_insn): Skip debug insns.\n+\t* sel-sched-ir.c (return_nop_to_pool): Take full_tidying argument.\n+\tPass it on.\n+\t(setup_id_for_insn): Handle debug insns.\n+\t(maybe_tidy_empty_bb): Adjust whitespace.\n+\t(tidy_control_flow): Skip debug insns.\n+\t(sel_remove_insn): Adjust for debug insns.\n+\t(sel_estimate_number_of_insns): Skip debug insns.\n+\t(create_insn_rtx_from_pattern): Handle debug insns.\n+\t(create_copy_of_insn_rtx): Likewise.\n+\t* sel-sched-.h (sel_bb_end): Declare.\n+\t(sel_bb_empty_or_nop_p): New.\n+\t(get_all_loop_exits): Use it.\n+\t(_eligible_successor_edge_p): Likewise.\n+\t(return_nop_to_pool): Adjust.\n+\t* tree-eh.c (tre_empty_eh_handler_p): Skip debug stmts.\n+\t* ira-lives.c (process_bb_node_lives): Skip debug insns.\n+\t* gimple-pretty-print.c (dump_gimple_debug): New.\n+\t(dump_gimple_stmt): Use it.\n+\t(dump_bb_header): Skip gimple debug stmts.\n+\t* regmove.c (optimize_reg_copy_1): Discount debug insns.\n+\t(fixup_match_2): Likewise.\n+\t(regmove_backward_pass): Likewise.  Simplify combined\n+\treplacement.  Handle debug insns.\n+\t* function.c (instantiate_virtual_regs): Handle debug insns.\n+\t* function.h (struct emit_status): Add x_cur_debug_insn_uid.\n+\t* print-rtl.h: Include cselib.h.\n+\t(print_rtx): Print VALUEs.  Split out and recurse for\n+\tVAR_LOCATIONs.\n+\t* df.h (df_inns_rescan_debug_internal): Declare.\n+\t* gcse.c (alloc_hash_table): Estimate n_insns.\n+\t(cprop_insn): Don't regard debug insns as changes.\n+\t(bypass_conditional_jumps): Skip debug insns.\n+\t(one_pre_gcse_pass): Adjust.\n+\t(one_code_hoisting_pass): Likewise.\n+\t(compute_ld_motion_mems): Skip debug insns.\n+\t(one_cprop_pass): Adjust.\n+\t* tree-if-conv.c (tree_if_convert_stmt): Reset debug stmts.\n+\t(if_convertible_stmt_p): Handle debug stmts.\n+\t* init-regs.c (initialize_uninitialized_regs): Skip debug insns.\n+\t* tree-vect-loop.c (vect_is_simple_reduction): Skip debug stmts.\n+\t* ira-build.c (create_bb_allocnos): Skip debug insns.\n+\t* tree-flow-inline.h (has_zero_uses): Discount debug stmts.\n+\t(has_single_use): Likewise.\n+\t(single_imm_use): Likewise.\n+\t(num_imm_uses): Likewise.\n+\t* tree-ssa-phiopt.c (empty_block_p): Skip debug stmts.\n+\t* tree-ssa-coalesce.c (build_ssa_conflict_graph): Skip debug stmts.\n+\t(create_outofssa_var_map): Likewise.\n+\t* lower-subreg.c (adjust_decomposed_uses): New.\n+\t(resolve_debug): New.\n+\t(decompose_multiword_subregs): Use it.\n+\t* tree-dfa.c (find_referenced_vars): Skip debug stmts.\n+\t* emit-rtl.c: Include params.h.\n+\t(cur_debug_insn_uid): Define.\n+\t(set_new_first_and_last_insn): Set cur_debug_insn_uid too.\n+\t(copy_rtx_if_shared_1): Handle debug insns.\n+\t(reset_used_flags): Likewise.\n+\t(set_used_flags): LIkewise.\n+\t(get_max_insn_count): New.\n+\t(next_nondebug_insn): New.\n+\t(prev_nondebug_insn): New.\n+\t(make_debug_insn_raw): New.\n+\t(emit_insn_before_noloc): Handle debug insns.\n+\t(emit_jump_insn_before_noloc): Likewise.\n+\t(emit_call_insn_before_noloc): Likewise.\n+\t(emit_debug_insn_before_noloc): New.\n+\t(emit_insn_after_noloc): Handle debug insns.\n+\t(emit_jump_insn_after_noloc): Likewise.\n+\t(emit_call_insn_after_noloc): Likewise.\n+\t(emit_debug_insn_after_noloc): Likewise.\n+\t(emit_insn_after): Take loc from earlier non-debug insn.\n+\t(emit_jump_insn_after): Likewise.\n+\t(emit_call_insn_after): Likewise.\n+\t(emit_debug_insn_after_setloc): New.\n+\t(emit_debug_insn_after): New.\n+\t(emit_insn_before): Take loc from later non-debug insn.\n+\t(emit_jump_insn_before): Likewise.\n+\t(emit_call_insn_before): Likewise.\n+\t(emit_debug_insn_before_setloc): New.\n+\t(emit_debug_insn_before): New.\n+\t(emit_insn): Handle debug insns.\n+\t(emit_debug_insn): New.\n+\t(emit_jump_insn): Handle debug insns.\n+\t(emit_call_insn): Likewise.\n+\t(emit): Likewise.\n+\t(init_emit): Take min-nondebug-insn-uid into account.\n+\tInitialize cur_debug_insn_uid.\n+\t(emit_copy_of_insn_after): Handle debug insns.\n+\t* cfgexpand.c (gimple_assign_rhs_to_tree): Do not overwrite\n+\tlocation of single rhs in place.\n+\t(maybe_dump_rtl_for_gimple_stmt): Dump lineno.\n+\t(floor_sdiv_adjust): New.\n+\t(cell_sdiv_adjust): New.\n+\t(cell_udiv_adjust): New.\n+\t(round_sdiv_adjust): New.\n+\t(round_udiv_adjust): New.\n+\t(wrap_constant): Moved from cselib.\n+\t(unwrap_constant): New.\n+\t(expand_debug_expr): New.\n+\t(expand_debug_locations): New.\n+\t(expand_gimple_basic_block): Drop hiding redeclaration.  Expand\n+\tdebug bind stmts.\n+\t(gimple_expand_cfg): Expand debug locations.\n+\t* cselib.c: Include tree-pass.h.\n+\t(struct expand_value_data): New.\n+\t(cselib_record_sets_hook): New.\n+\t(PRESERVED_VALUE_P, LONG_TERM_PRESERVED_VALUE_P): New.\n+\t(cselib_clear_table): Move, and implemnet in terms of...\n+\t(cselib_reset_table_with_next_value): ... this.\n+\t(cselib_get_next_unknown_value): New.\n+\t(discard_useless_locs): Don't discard preserved values.\n+\t(cselib_preserve_value): New.\n+\t(cselib_preserved_value_p): New.\n+\t(cselib_preserve_definitely): New.\n+\t(cselib_clear_preserve): New.\n+\t(cselib_preserve_only_values): New.\n+\t(new_cselib_val): Take rtx argument.  Dump it in details.\n+\t(cselib_lookup_mem): Adjust.\n+\t(expand_loc): Take regs_active in struct.  Adjust.  Silence\n+\tdumps unless details are requested.\n+\t(cselib_expand_value_rtx_cb): New.\n+\t(cselib_expand_value_rtx): Rename and reimplment in terms of...\n+\t(cselib_expand_value_rtx_1): ... this.  Adjust.  Silence dumps\n+\twithout details.  Copy more subregs.  Try to resolve values\n+\tusing a callback.  Wrap constants.\n+\t(cselib_subst_to_values): Adjust.\n+\t(cselib_log_lookup): New.\n+\t(cselib_lookup): Call it.\n+\t(cselib_invalidate_regno): Don't count preserved values as\n+\tuseless.\n+\t(cselib_invalidate_mem): Likewise.\n+\t(cselib_record_set): Likewise.\n+\t(struct set): Renamed to cselib_set, moved to cselib.h.\n+\t(cselib_record_sets): Adjust.  Call hook.\n+\t(cselib_process_insn): Reset table when it would be cleared.\n+\t(dump_cselib_val): New.\n+\t(dump_cselib_table): New.\n+\t* tree-cfgcleanup.c (tree_forwarded_block_p): Skip debug stmts.\n+\t(remove_forwarder_block): Support moving debug stmts.\n+\t* cselib.h (cselib_record_sets_hook): Declare.\n+\t(cselib_expand_callback): New type.\n+\t(cselib_expand_value_rtx_cb): Declare.\n+\t(cselib_reset_table_with_next_value): Declare.\n+\t(cselib_get_next_unknown_value): Declare.\n+\t(cselib_preserve_value): Declare.\n+\t(cselib_preserved_value_p): Declare.\n+\t(cselib_preserve_only_values): Declare.\n+\t(dump_cselib_table): Declare.\n+\t* cfgcleanup.c (flow_find_cross_jump): Skip debug insns.\n+\t(try_crossjump_to_edge): Likewise.\n+\t(delete_unreachable_blocks): Remove dominant GIMPLE blocks after\n+\tdominated blocks when debug stmts are present.\n+\t* simplify-rtx.c (delegitimize_mem_from_attrs): New.\n+\t* tree-ssa-live.c (remove_unused_locals): Skip debug stmts.\n+\t(set_var_live_on_entry): Likewise.\n+\t* loop-invariant.c (find_invariants_bb): Skip debug insns.\n+\t* cfglayout.c (curr_location, last_location): Make static.\n+\t(set_curr_insn_source_location): Don't avoid bouncing.\n+\t(get_curr_insn_source_location): New.\n+\t(get_curr_insn_block): New.\n+\t(duplicate_insn_chain): Handle debug insns.\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr): Propagate\n+\tinto debug stmts.\n+\t* common.opt (fcompare-debug): Move to sort order.\n+\t(fdump-unnumbered-links): Likewise.\n+\t(fvar-tracking-assignments): New.\n+\t(fvar-tracking-assignments-toggle): New.\n+\t* tree-ssa-dce.c (mark_stmt_necessary): Don't mark blocks\n+\tbecause of debug stmts.\n+\t(mark_stmt_if_obviously_necessary): Mark debug stmts.\n+\t(eliminate_unnecessary_stmts): Walk dominated blocks before\n+\tdominators.\n+\t* tree-ssa-ter.c (find_replaceable_in_bb): Skip debug stmts.\n+\t* ira.c (memref_used_between_p): Skip debug insns.\n+\t(update_equiv_regs): Likewise.\n+\t* sched-deps.c (sd_lists_size): Accept empty list.\n+\t(sd_init_insn): Mark debug insns.\n+\t(sd_finish_insn): Unmark them.\n+\t(sd_add_dep): Reject non-debug deps on debug insns.\n+\t(fixup_sched_groups): Give debug insns group treatment.\n+\tSkip debug insns.\n+\t(sched_analyze_reg): Don't mark debug insns for sched before call.\n+\t(sched_analyze_2): Handle debug insns.\n+\t(sched_analyze_insn): Compute next non-debug insn.  Handle debug\n+\tinsns.\n+\t(deps_analyze_insn): Handle debug insns.\n+\t(deps_start_bb): Skip debug insns.\n+\t(init_deps): Initialize last_debug_insn.\n+\t* tree-ssa.c (target_for_debug_bind): New.\n+\t(find_released_ssa_name): New.\n+\t(propagate_var_def_into_debug_stmts): New.\n+\t(propagate_defs_into_debug_stmts): New.\n+\t(verify_ssa): Skip debug bind stmts without values.\n+\t(warn_uninialized_vars): Skip debug stmts.\n+\t* target-def.h (TARGET_DELEGITIMIZE_ADDRESS): Set default.\n+\t* rtl.c (rtx_equal_p_cb): Handle VALUEs.\n+\t(rtx_equal_p): Likewise.\n+\t* ira-costs.c (scan_one_insn): Skip debug insns.\n+\t(process_bb_node_for_hard_reg_moves): Likewise.\n+\t* rtl.h (DEBUG_INSN_P): New.\n+\t(NONDEBUG_INSN_P): New.\n+\t(MAY_HAVE_DEBUG_INSNS): New.\n+\t(INSN_P): Accept debug insns.\n+\t(RTX_FRAME_RELATED_P): Likewise.\n+\t(INSN_DELETED_P): Likewise\n+\t(PAT_VAR_LOCATION_DECL): New.\n+\t(PAT_VAR_LOCATION_LOC): New.\n+\t(PAT_VAR_OCATION_STATUS): New.\n+\t(NOTE_VAR_LOCATION_DECL): Reimplement.\n+\t(NOTE_VAR_LOCATION_LOC): Likewise.\n+\t(NOTE_VAR_LOCATION_STATUS): Likewise.\n+\t(INSN_VAR_LOCATION): New.\n+\t(INSN_VAR_LOCATION_DECL): New.\n+\t(INSN_VAR_LOCATION_LOC): New.\n+\t(INSN_VAR_LOCATION_STATUS): New.\n+\t(gen_rtx_UNKNOWN_VAR_LOC): New.\n+\t(VAR_LOC_UNKNOWN_P): New.\n+\t(NOTE_DURING_CALL_P): New.\n+\t(SCHED_GROUP_P): Accept debug insns.\n+\t(emit_debug_insn_before): Declare.\n+\t(emit_debug_insn_before_noloc): Declare.\n+\t(emit_debug_insn_beore_setloc): Declare.\n+\t(emit_debug_insn_after): Declare.\n+\t(emit_debug_insn_after_noloc): Declare.\n+\t(emit_debug_insn_after_setloc): Declare.\n+\t(emit_debug_insn): Declare.\n+\t(make_debug_insn_raw): Declare.\n+\t(prev_nondebug_insn): Declare.\n+\t(next_nondebug_insn): Declare.\n+\t(delegitimize_mem_from_attrs): Declare.\n+\t(get_max_insn_count): Declare.\n+\t(wrap_constant): Declare.\n+\t(unwrap_constant): Declare.\n+\t(get_curr_insn_source_location): Declare.\n+\t(get_curr_insn_block): Declare.\n+\t* tree-inline.c (insert_debug_decl_map): New.\n+\t(processing_debug_stmt): New.\n+\t(remap_decl): Don't create new mappings in debug stmts.\n+\t(remap_gimple_op_r): Don't add references in debug stmts.\n+\t(copy_tree_body_r): Likewise.\n+\t(remap_gimple_stmt): Handle debug bind stmts.\n+\t(copy_bb): Skip debug stmts.\n+\t(copy_edges_for_bb): Likewise.\n+\t(copy_debug_stmt): New.\n+\t(copy_debug_stmts): New.\n+\t(copy_body): Copy debug stmts at the end.\n+\t(insert_init_debug_bind): New.\n+\t(insert_init_stmt): Take id.  Skip and emit debug stmts.\n+\t(setup_one_parameter): Remap variable earlier, register debug\n+\tmapping.\n+\t(estimate_num_insns): Skip debug stmts.\n+\t(expand_call_inline): Preserve debug_map.\n+\t(optimize_inline_calls): Check for no debug_stmts left-overs.\n+\t(unsave_expr_now): Preserve debug_map.\n+\t(copy_gimple_seq_and_replace_locals): Likewise.\n+\t(tree_function_versioning): Check for no debug_stmts left-overs.\n+\tInit and destroy debug_map as needed.  Split edges unconditionally.\n+\t(build_duplicate_type): Init and destroy debug_map as needed.\n+\t* tree-inline.h: Include gimple.h instead of pointer-set.h.\n+\t(struct copy_body_data): Add debug_stmts and debug_map.\n+\t* sched-int.h (struct ready_list): Add n_debug.\n+\t(struct deps): Add last_debug_insn.\n+\t(DEBUG_INSN_SCHED_P): New.\n+\t(BOUNDARY_DEBUG_INSN_P): New.\n+\t(SCHEDULE_DEBUG_INSN_P): New.\n+\t(sd_iterator_cond): Accept empty list.\n+\t* combine.c (create_log_links): Skip debug insns.\n+\t(combine_instructions): Likewise.\n+\t(cleanup_auto_inc_dec): New.  From Jakub Jelinek: Make sure the\n+\treturn value is always unshared.\n+\t(struct rtx_subst_pair): New.\n+\t(auto_adjust_pair): New.\n+\t(propagate_for_debug_subst): New.\n+\t(propagate_for_debug): New.\n+\t(try_combine): Skip debug insns.  Propagate removed defs into\n+\tdebug insns.\n+\t(next_nonnote_nondebug_insn): New.\n+\t(distribute_notes): Use it.  Skip debug insns.\n+\t(distribute_links): Skip debug insns.\n+\t* tree-outof-ssa.c (set_location_for_edge): Likewise.\n+\t* resource.c (mark_target_live_regs): Likewise.\n+\t* var-tracking.c: Include cselib.h and target.h.\n+\t(enum micro_operation_type): Add MO_VAL_USE, MO_VAL_LOC, and\n+\tMO_VAL_SET.\n+\t(micro_operation_type_name): New.\n+\t(enum emit_note_where): Add EMIT_NOTE_AFTER_CALL_INSN.\n+\t(struct micro_operation_def): Update comments.\n+\t(decl_or_value): New type.  Use instead of decls.\n+\t(struct emit_note_data_def): Add vars.\n+\t(struct attrs_def): Use decl_or_value.\n+\t(struct variable_tracking_info_def): Add permp, flooded.\n+\t(struct location_chain_def): Update comment.\n+\t(struct variable_part_def): Use decl_or_value.\n+\t(struct variable_def): Make var_part a variable length array.\n+\t(valvar_pool): New.\n+\t(scratch_regs): New.\n+\t(cselib_hook_called): New.\n+\t(dv_is_decl_p): New.\n+\t(dv_is_value_p): New.\n+\t(dv_as_decl): New.\n+\t(dv_as_value): New.\n+\t(dv_as_opaque): New.\n+\t(dv_onepart_p): New.\n+\t(dv_pool): New.\n+\t(IS_DECL_CODE): New.\n+\t(check_value_is_not_decl): New.\n+\t(dv_from_decl): New.\n+\t(dv_from_value): New.\n+\t(dv_htab_hash): New.\n+\t(variable_htab_hash): Use it.\n+\t(variable_htab_eq): Support values.\n+\t(variable_htab_free): Free from the right pool.\n+\t(attrs_list_member, attrs_list_insert): Use decl_or_value.\n+\t(attrs_list_union): Adjust.\n+\t(attrs_list_mpdv_union): New.\n+\t(tie_break_pointers): New.\n+\t(canon_value_cmp): New.\n+\t(unshare_variable): Return possibly-modified slot.\n+\t(vars_copy_1): Adjust.\n+\t(var_reg_decl_set): Adjust.  Split out of...\n+\t(var_reg_set): ... this.\n+\t(get_init_value): Adjust.\n+\t(var_reg_delete_and_set): Adjust.\n+\t(var_reg_delete): Adjust.\n+\t(var_regno_delete): Adjust.\n+\t(var_mem_decl_set): Split out of...\n+\t(var_mem_set): ... this.\n+\t(var_mem_delete_and_set): Adjust.\n+\t(var_mem_delete): Adjust.\n+\t(val_store): New.\n+\t(val_reset): New.\n+\t(val_resolve): New.\n+\t(variable_union): Adjust.  Speed up merge of 1-part vars.\n+\t(variable_canonicalize): Use unshared slot.\n+\t(VALUED_RECURSED_INTO): New.\n+\t(find_loc_in_1pdv): New.\n+\t(struct dfset_merge): New.\n+\t(insert_into_intersection): New.\n+\t(intersect_loc_chains): New.\n+\t(loc_cmp): New.\n+\t(canonicalize_loc_order_check): New.\n+\t(canonicalize_values_mark): New.\n+\t(canonicalize_values_star): New.\n+\t(variable_merge_over_cur): New.\n+\t(variable_merge_over_src): New.\n+\t(dataflow_set_merge): New.\n+\t(dataflow_set_equiv_regs): New.\n+\t(remove_duplicate_values): New.\n+\t(struct dfset_post_merge): New.\n+\t(variable_post_merge_new_vals): New.\n+\t(variable_post_merge_perm_vals): New.\n+\t(dataflow_post_merge_adjust): New.\n+\t(find_mem_expr_in_1pdv): New.\n+\t(dataflow_set_preserve_mem_locs): New.\n+\t(dataflow_set_remove_mem_locs): New.\n+\t(dataflow_set_clear_at_call): New.\n+\t(onepart_variable_different_p): New.\n+\t(variable_different_p): Use it.\n+\t(dataflow_set_different_1): Adjust.  Make detailed dump\n+\tmore verbose.\n+\t(track_expr_p): Add need_rtl parameter.  Don't generate rtl\n+\tif not needed.\n+\t(track_loc_p): Pass it true.\n+\t(struct count_use_info): New.\n+\t(find_use_val): New.\n+\t(replace_expr_with_values): New.\n+\t(log_op_type): New.\n+\t(use_type): New, partially split out of...\n+\t(count_uses): ... this.  Count new micro-ops.\n+\t(count_uses_1): Adjust.\n+\t(count_stores): Adjust.\n+\t(count_with_sets): New.\n+\t(VAL_NEEDS_RESOLUTION): New.\n+\t(VAL_HOLDS_TRACK_EXPR): New.\n+\t(VAL_EXPR_IS_COPIED): New.\n+\t(VAL_EXPR_IS_CLOBBERED): New.\n+\t(add_uses): Adjust.  Generate new micro-ops.\n+\t(add_uses_1): Adjust.\n+\t(add_stores): Generate new micro-ops.\n+\t(add_with_sets): New.\n+\t(find_src_status): Adjust.\n+\t(find_src_set_src): Adjust.\n+\t(compute_bb_dataflow): Use dataflow_set_clear_at_call.\n+\tHandle new micro-ops.  Canonicalize value equivalances.\n+\t(vt_find_locations): Compute total size of hash tables for\n+\tdumping.  Perform merge for var-tracking-assignments.  Don't\n+\tdisregard single-block loops.\n+\t(dump_attrs_list): Handle decl_or_value.\n+\t(dump_variable): Take variable.  Deal with decl_or_value.\n+\t(dump_variable_slot): New.\n+\t(dump_vars): Use it.\n+\t(dump_dataflow_sets): Adjust.\n+\t(set_slot_part): New, extended to support one-part variables\n+\tafter splitting out of...\n+\t(set_variable_part): ... this.\n+\t(clobber_slot_part): New, split out of...\n+\t(clobber_variable_part): ... this.\n+\t(delete_slot_part): New, split out of...\n+\t(delete_variable_part): .... this.\n+\t(check_wrap_constant): New.\n+\t(vt_expand_loc_callback): New.\n+\t(vt_expand_loc): New.\n+\t(emit_note_insn_var_location): Adjust.  Handle values.  Handle\n+\tEMIT_NOTE_AFTER_CALL_INSN.\n+\t(emit_notes_for_differences_1): Adjust.  Handle values.\n+\t(emit_notes_for_differences_2): Likewise.\n+\t(emit_notes_for_differences): Adjust.\n+\t(emit_notes_in_bb): Take pointer to set.  Emit AFTER_CALL_INSN\n+\tnotes.  Adjust.  Handle new micro-ops.\n+\t(vt_add_function_parameters): Adjust.  Create and bind values.\n+\t(vt_initialize): Adjust.  Initialize scratch_regs and\n+\tvalvar_pool, flooded and perm..  Initialize and use cselib.  Log\n+\toperations.  Move some code to count_with_sets and add_with_sets.\n+\t(delete_debug_insns): New.\n+\t(vt_debug_insns_local): New.\n+\t(vt_finalize): Release permp, valvar_pool, scratch_regs.  Finish\n+\tcselib.\n+\t(var_tracking_main): If var-tracking-assignments is enabled\n+\tbut var-tracking isn't, delete debug insns and leave.  Likewise\n+\tif we exceed limits or fail the stack adjustments tests, and\n+\tafter all var-tracking processing.\n+\tMore in var-tracking, from Jakub Jelinek <jakub@redhat.com>:\n+\t(dataflow_set): Add traversed_vars.\n+\t(value_chain, const_value_chain): New typedefs.\n+\t(value_chain_pool, value_chains): New variables.\n+\t(value_chain_htab_hash, value_chain_htab_eq, add_value_chain,\n+\tadd_value_chains, add_cselib_value_chains, remove_value_chain,\n+\tremove_value_chains, remove_cselib_value_chains): New functions.\n+\t(shared_hash_find_slot_unshare_1, shared_hash_find_slot_1,\n+\tshared_hash_find_slot_noinsert_1, shared_hash_find_1): New\n+\tstatic inlines.\n+\t(shared_hash_find_slot_unshare, shared_hash_find_slot,\n+\tshared_hash_find_slot_noinsert, shared_hash_find): Update.\n+\t(dst_can_be_shared): New variable.\n+\t(unshare_variable): Unshare set->vars if shared, use shared_hash_*.\n+\tClear dst_can_be_shared.  If set->traversed_vars is non-NULL and\n+\tdifferent from set->vars, look up slot again instead of using the\n+\tpassed in slot.\n+\t(dataflow_set_init): Initialize traversed_vars.\n+\t(variable_union): Use shared_hash_*.  Use initially NO_INSERT\n+\tlookup if set->vars is shared.  Don't keep slot cleared before\n+\tcalling unshare_variable.  Unshare set->vars if needed.  Adjust\n+\tunshare_variable callers.  Clear dst_can_be_shared if needed.\n+\tEven ->refcount == 1 vars must be unshared if set->vars is shared\n+\tand var needs to be modified.\n+\t(dataflow_set_union): Set traversed_vars during canonicalization.\n+\t(VALUE_CHANGED, DECL_CHANGED): Define.\n+\t(set_dv_changed, dv_changed_p): New static inlines.\t\n+\t(track_expr_p): Clear DECL_CHANGED.\n+\t(dump_dataflow_sets): Set it.\n+\t(variable_was_changed): Call set_dv_changed.\n+\t(emit_note_insn_var_location): Likewise.\n+\t(changed_variables_stack): New variable.\n+\t(check_changed_vars_1, check_changed_vars_2): New functions.\n+\t(emit_notes_for_changes): Do nothing if changed_variables is\n+\tempty.  Traverse changed_variables with check_changed_vars_1,\n+\tcall check_changed_vars_2 on each changed_variables_stack entry.\n+\t(emit_notes_in_bb): Add SET argument.  Just clear it at the\n+\tbeginning, use it instead of local &set, don't destroy it at the\n+\tend.\n+\t(vt_emit_notes): Call dataflow_set_clear early on all\n+\tVTI(bb)->out sets, never use them, instead use emit_notes_in_bb\n+\tcomputed set, dataflow_set_clear also VTI(bb)->in when we are\n+\tdone with the basic block.  Initialize changed_variables_stack,\n+\tfree it afterwards.  If ENABLE_CHECKING verify that after noting\n+\tdifferences to an empty set value_chains hash table is empty.\n+\t(vt_initialize): Initialize value_chains and value_chain_pool.\n+\t(vt_finalize): Delete value_chains htab, free value_chain_pool.\n+\t(variable_tracking_main): Call dump_dataflow_sets before calling\n+\tvt_emit_notes, not after it.\n+\t* tree-flow.h (propagate_defs_into_debug_stmts): Declare.\n+\t(propagate_var_def_into_debug_stmts): Declare.\n+\t* df-problems.c (df_lr_bb_local_compute): Skip debug insns.\n+\t(df_set_note): Reject debug insns.\n+\t(df_whole_mw_reg_dead_p): Take added_notes_p argument.  Don't\n+\tadd notes to debug insns.\n+\t(df_note_bb_compute): Adjust.  Likewise.\n+\t(df_simulate_uses): Skip debug insns.\n+\t(df_simulate_initialize_backwards): Likewise.\n+\t* reg-stack.c (subst_stack_regs_in_debug_insn): New.\n+\t(subst_stack_regs_pat): Reject debug insns.\n+\t(convert_regs_1): Handle debug insns.\n+\t* Makefile.in (TREE_INLINE_H): Take pointer-set.h from GIMPLE_H.\n+\t(print-rtl.o): Depend on cselib.h.\n+\t(cselib.o): Depend on TREE_PASS_H.\n+\t(var-tracking.o): Depend on cselib.h and TARGET_H.\n+\t* sched-rgn.c (rgn_estimate_number_of_insns): Discount\n+\tdebug insns.\n+\t(init_ready_list): Skip boundary debug insns.\n+\t(add_branch_dependences): Skip debug insns.\n+\t(free_block_dependencies): Check for blocks with only debug\n+\tinsns.\n+\t(compute_priorities): Likewise.\n+\t* gimple.c (gss_for_code): Handle GIMPLE_DEBUG.\n+\t(gimple_build_with_ops_stat): Take subcode as unsigned.  Adjust\n+\tall callers.\n+\t(gimple_build_debug_bind_stat): New.\n+\t(empty_body_p): Skip debug stmts.\n+\t(gimple_has_side_effects): Likewise.\n+\t(gimple_rhs_has_side_effects): Likewise.\n+\t* gimple.h (enum gimple_debug_subcode, GIMPLE_DEBUG_BIND): New.\n+\t(gimple_build_debug_bind_stat): Declare.\n+\t(gimple_build_debug_bind): Define.\n+\t(is_gimple_debug): New.\n+\t(gimple_debug_bind_p): New.\n+\t(gimple_debug_bind_get_var): New.\n+\t(gimple_debug_bind_get_value): New.\n+\t(gimple_debug_bind_get_value_ptr): New.\n+\t(gimple_debug_bind_set_var): New.\n+\t(gimple_debug_bind_set_value): New.\n+\t(GIMPLE_DEBUG_BIND_NOVALUE): New internal temporary macro.\n+\t(gimple_debug_bind_reset_value): New.\n+\t(gimple_debug_bind_has_value_p): New.\n+\t(gsi_next_nondebug): New.\n+\t(gsi_prev_nondebug): New.\n+\t(gsi_start_nondebug_bb): New.\n+\t(gsi_last_nondebug_bb): New.\n+\t* sched-vis.c (print_pattern): Handle VAR_LOCATION.\n+\t(print_insn): Handle DEBUG_INSN.\n+\t* tree-cfg.c (remove_bb): Walk stmts backwards.  Let loc\n+\tof first insn prevail.\n+\t(first_stmt): Skip debug stmts.\n+\t(first_non_label_stmt): Likewise.\n+\t(last_stmt): Likewise.\n+\t(has_zero_uses_1): New.\n+\t(single_imm_use_1): New.\n+\t(verify_gimple_debug): New.\n+\t(verify_types_in_gimple_stmt): Handle debug stmts.\n+\t(verify_stmt): Likewise.\n+\t(debug_loop_num): Skip debug stmts.\n+\t(remove_edge_and_dominated_blocks): Remove dominators last.\n+\t* tree-ssa-reasssoc.c (rewrite_expr_tree): Propagate into\n+\tdebug stmts.\n+\t(linearize_expr): Likewise.\n+\t* config/i386/i386.c (ix86_delegitimize_address): Call\n+\tdefault implementation.\n+\t* config/ia64/ia64.c (ia64_safe_itanium_class): Handle debug\n+\tinsns.\n+\t(group_barrier_needed): Skip debug insns.\n+\t(emit_insn_group_barriers): Likewise.\n+\t(emit_all_insn_group_barriers): Likewise.\n+\t(ia64_variable_issue): Handle debug insns.\n+\t(ia64_dfa_new_cycle): Likewise.\n+\t(final_emit_insn_group_barriers): Skip debug insns.\n+\t(ia64_dwarf2out_def_steady_cfa): Take frame argument.  Don't\n+\tdef cfa without frame.\n+\t(process_set): Likewise.\n+\t(process_for_unwind_directive): Pass frame on.\n+\t* config/rs6000/rs6000.c (TARGET_DELEGITIMIZE_ADDRESS): Define.\n+\t(rs6000_delegitimize_address): New.\n+\t(rs6000_debug_adjust_cost): Handle debug insns.\n+\t(is_microcoded_insn): Likewise.\n+\t(is_cracked_insn): Likewise.\n+\t(is_nonpipeline_insn): Likewise.\n+\t(insn_must_be_first_in_group): Likewise.\n+\t(insn_must_be_last_in_group): Likewise.\n+\t(force_new_group): Likewise.\n+\t* cfgrtl.c (rtl_split_block): Emit INSN_DELETED note if block\n+\tcontains only debug insns.\n+\t(rtl_merge_blocks): Skip debug insns.\n+\t(purge_dead_edges): Likewise.\n+\t(rtl_block_ends_with_call_p): Skip debug insns.\n+\t* dce.c (deletable_insn_p): Handle VAR_LOCATION.\n+\t(mark_reg_dependencies): Skip debug insns.\n+\t* params.def (PARAM_MIN_NONDEBUG_INSN_UID): New.\n+\t* tree-ssanames.c (release_ssa_name): Propagate def into\n+\tdebug stmts.\n+\t* tree-ssa-threadedge.c\n+\t(record_temporary_equivalences_from_stmts): Skip debug stmts.\n+\t* regcprop.c (replace_oldest_value_addr): Skip debug insns.\n+\t(replace_oldest_value_mem): Use ALL_REGS for debug insns.\n+\t(copyprop_hardreg_forward_1): Handle debug insns.\n+\t* reload1.c (reload): Skip debug insns.  Replace unassigned\n+\tpseudos in debug insns with their equivalences.\n+\t(eliminate_regs_in_insn): Skip debug insns.\n+\t(emit_input_reload_insns): Skip debug insns at first, adjust\n+\tthem later.\n+\t* tree-ssa-operands.c (add_virtual_operand): Reject debug stmts.\n+\t(get_indirect_ref_operands): Pass opf_no_vops on.\n+\t(get_expr_operands): Likewise.  Skip debug stmts.\n+\t(parse_ssa_operands): Scan debug insns with opf_no_vops.\n+\n 2009-09-01  Richard Henderson  <rth@redhat.com>\n \n \t* tree-ssa-ccp.c (ccp_initialize): Make sure to simulate "}, {"sha": "2a88d6347b43a2d7f6dde599ff3212af710233a7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc68cba0989f9b8cf382858ef89b0aa1785cfa9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc68cba0989f9b8cf382858ef89b0aa1785cfa9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8fc68cba0989f9b8cf382858ef89b0aa1785cfa9", "patch": "@@ -1,3 +1,11 @@\n+2009-09-01  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* cp-tree.h (TFF_NO_OMIT_DEFAULT_TEMPLATE_ARGUMENTS): New.\n+\t* cp-lang.c (cxx_dwarf_name): Pass it.\n+\t* error.c (count_non_default_template_args): Take flags as\n+\targument.  Adjust all callers.  Skip counting of default\n+\targuments if the new flag is given.\n+\n 2009-09-01  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR bootstrap/41205"}, {"sha": "c4633393cbb535a78fd51da037d97dfc058ce8ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc68cba0989f9b8cf382858ef89b0aa1785cfa9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc68cba0989f9b8cf382858ef89b0aa1785cfa9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8fc68cba0989f9b8cf382858ef89b0aa1785cfa9", "patch": "@@ -1,3 +1,12 @@\n+2009-09-01  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* gcc.dg/guality/guality.c: New.\n+\t* gcc.dg/guality/guality.h: New.\n+\t* gcc.dg/guality/guality.exp: New.\n+\t* gcc.dg/guality/example.c: New.\n+\t* lib/gcc-dg.exp (cleanup-dump): Remove .gk files.\n+\t(cleanup-saved-temps): Likewise, .gkd files too.\n+\n 2009-09-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/39229"}]}