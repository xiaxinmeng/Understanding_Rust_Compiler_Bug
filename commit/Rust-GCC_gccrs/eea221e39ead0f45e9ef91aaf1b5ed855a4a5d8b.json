{"sha": "eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVhMjIxZTM5ZWFkMGY0NWU5ZWY5MWFhZjFiNWVkODU1YTRhNWQ4Yg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-16T14:57:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-16T14:57:55Z"}, "message": "Merge #572\n\n572: Cleanup and add const modifiers to equlity interface r=philberty a=philberty\n\nAs part of an effort to cleanup some of the interfaces within the TyTy module\r\nthis PR adds a const visitor for accessing each type and updates the can_eq\r\ninterface to also be const as it should not require mutability.\r\n\r\nThese changes fell out of a branch for optional trait items support.\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "a0eb9997e6add34e1040f8454965cdb0f3db6410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0eb9997e6add34e1040f8454965cdb0f3db6410"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg8Z5zCRBK7hj4Ov3rIwAA6sUIAGGU6/1O9ENtV0xNj0XIL754\ncfk2EdcCvwovZfABcmUrUyMfQv+Ey16Q/oeFbUX0Q7EnNcDxYh3lxh/1bvD4AsU9\negUBcWMIAFihezBcg6Qez8DvIeH5gM4P0F59DBYSJrHM3JaxJZ9X1AX35Fim03HV\n55yOvAsh0ss6JoKdPUE5Vyi3Gc/jPkNyE6AfNyeF6KxQRKXBIYUcGo1cRyh0C/uq\n/RptWtAr7AGKaCBwKq1uTWQcAfX8xfv85Pv7Dm0yWAkA6tvdWIYRiXYYBL8FsMw9\npx5uyNWYO0s0ADOU5NgskmxDJz7U/DqlGR/zxqIqogTVZzrMZ2kFE6Z9ujz+dg8=\n=dvlO\n-----END PGP SIGNATURE-----\n", "payload": "tree a0eb9997e6add34e1040f8454965cdb0f3db6410\nparent d57f3b8af1498c7bb4b1eaea372270119e9845fd\nparent 40ab687d56597abc6d2ead6dc4e5a051923aca45\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626447475 +0000\ncommitter GitHub <noreply@github.com> 1626447475 +0000\n\nMerge #572\n\n572: Cleanup and add const modifiers to equlity interface r=philberty a=philberty\n\nAs part of an effort to cleanup some of the interfaces within the TyTy module\r\nthis PR adds a const visitor for accessing each type and updates the can_eq\r\ninterface to also be const as it should not require mutability.\r\n\r\nThese changes fell out of a branch for optional trait items support.\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d57f3b8af1498c7bb4b1eaea372270119e9845fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d57f3b8af1498c7bb4b1eaea372270119e9845fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d57f3b8af1498c7bb4b1eaea372270119e9845fd"}, {"sha": "40ab687d56597abc6d2ead6dc4e5a051923aca45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40ab687d56597abc6d2ead6dc4e5a051923aca45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40ab687d56597abc6d2ead6dc4e5a051923aca45"}], "stats": {"total": 617, "additions": 408, "deletions": 209}, "files": [{"sha": "5ba591831794e67714b51bda525c83e9bdb15b69", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b", "patch": "@@ -396,6 +396,8 @@ class ASTLoweringItem : public ASTLoweringBase\n     mappings->insert_defid_mapping (mapping.get_defid (), translated);\n     mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n \t\t\t       translated);\n+    mappings->insert_hir_impl_block (mapping.get_crate_num (),\n+\t\t\t\t     mapping.get_hirid (), hir_impl_block);\n     mappings->insert_location (crate_num, mapping.get_hirid (),\n \t\t\t       impl_block.get_locus ());\n \n@@ -540,6 +542,8 @@ class ASTLoweringItem : public ASTLoweringBase\n     mappings->insert_defid_mapping (mapping.get_defid (), translated);\n     mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n \t\t\t       translated);\n+    mappings->insert_hir_impl_block (mapping.get_crate_num (),\n+\t\t\t\t     mapping.get_hirid (), hir_impl_block);\n     mappings->insert_location (crate_num, mapping.get_hirid (),\n \t\t\t       impl_block.get_locus ());\n "}, {"sha": "1b7aa4dcf80f362f0bf5f818616c38f5f8f3897a", "filename": "gcc/rust/typecheck/rust-hir-path-probe.h", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h?ref=eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b", "patch": "@@ -29,8 +29,17 @@ namespace Resolver {\n \n struct PathProbeCandidate\n {\n+  enum CandidateType\n+  {\n+    IMPL_CONST,\n+    IMPL_TYPE_ALIAS,\n+    IMPL_FUNC,\n+  };\n+\n+  CandidateType type;\n   HIR::ImplItem *impl_item;\n   TyTy::BaseType *ty;\n+  HIR::ImplBlock *parent;\n };\n \n class PathProbeType : public TypeCheckBase\n@@ -48,11 +57,13 @@ class PathProbeType : public TypeCheckBase\n \tprobe.process_candidate (id, item, impl);\n \treturn true;\n       });\n+\n     return probe.candidates;\n   }\n \n   void process_candidate (HirId id, HIR::ImplItem *item, HIR::ImplBlock *impl)\n   {\n+    current_impl = impl;\n     HirId impl_ty_id = impl->get_type ()->get_mappings ().get_hirid ();\n     TyTy::BaseType *impl_block_ty = nullptr;\n     bool ok = context->lookup_type (impl_ty_id, &impl_block_ty);\n@@ -75,7 +86,9 @@ class PathProbeType : public TypeCheckBase\n \tbool ok = context->lookup_type (tyid, &ty);\n \trust_assert (ok);\n \n-\tPathProbeCandidate candidate{&alias, ty};\n+\tPathProbeCandidate candidate{\n+\t  PathProbeCandidate::CandidateType::IMPL_TYPE_ALIAS, &alias, ty,\n+\t  current_impl};\n \tcandidates.push_back (std::move (candidate));\n       }\n   }\n@@ -90,7 +103,9 @@ class PathProbeType : public TypeCheckBase\n \tbool ok = context->lookup_type (tyid, &ty);\n \trust_assert (ok);\n \n-\tPathProbeCandidate candidate{&constant, ty};\n+\tPathProbeCandidate candidate{\n+\t  PathProbeCandidate::CandidateType::IMPL_CONST, &constant, ty,\n+\t  current_impl};\n \tcandidates.push_back (std::move (candidate));\n       }\n   }\n@@ -105,19 +120,23 @@ class PathProbeType : public TypeCheckBase\n \tbool ok = context->lookup_type (tyid, &ty);\n \trust_assert (ok);\n \n-\tPathProbeCandidate candidate{&function, ty};\n+\tPathProbeCandidate candidate{\n+\t  PathProbeCandidate::CandidateType::IMPL_FUNC, &function, ty,\n+\t  current_impl};\n \tcandidates.push_back (std::move (candidate));\n       }\n   }\n \n private:\n   PathProbeType (TyTy::BaseType *receiver, const HIR::PathIdentSegment &query)\n-    : TypeCheckBase (), receiver (receiver), search (query)\n+    : TypeCheckBase (), receiver (receiver), search (query),\n+      current_impl (nullptr)\n   {}\n \n   TyTy::BaseType *receiver;\n   const HIR::PathIdentSegment &search;\n   std::vector<PathProbeCandidate> candidates;\n+  HIR::ImplBlock *current_impl;\n };\n \n class ReportMultipleCandidateError : private TypeCheckBase"}, {"sha": "e856c41e61257f73212177294e086b5aff72326f", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 148, "deletions": 165, "changes": 313, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b", "patch": "@@ -28,25 +28,27 @@\n namespace Rust {\n namespace TyTy {\n \n-class BaseCmp : public TyVisitor\n+class BaseCmp : public TyConstVisitor\n {\n public:\n-  virtual bool can_eq (BaseType *other)\n+  virtual bool can_eq (const BaseType *other)\n   {\n     if (other->get_kind () == TypeKind::PARAM)\n       {\n-\tParamType *p = static_cast<ParamType *> (other);\n+\tconst ParamType *p = static_cast<const ParamType *> (other);\n \tif (p->can_resolve ())\n \t  {\n-\t    other = p->resolve ();\n+\t    const BaseType *resolved = p->resolve ();\n+\t    resolved->accept_vis (*this);\n+\t    return ok;\n \t  }\n       }\n \n     other->accept_vis (*this);\n     return ok;\n   }\n \n-  virtual void visit (TupleType &type) override\n+  virtual void visit (const TupleType &type) override\n   {\n     ok = false;\n \n@@ -63,7 +65,7 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (ADTType &type) override\n+  virtual void visit (const ADTType &type) override\n   {\n     ok = false;\n     if (emit_error_flag)\n@@ -79,7 +81,7 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (InferType &type) override\n+  virtual void visit (const InferType &type) override\n   {\n     ok = false;\n     if (emit_error_flag)\n@@ -95,7 +97,7 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (FnType &type) override\n+  virtual void visit (const FnType &type) override\n   {\n     ok = false;\n     if (emit_error_flag)\n@@ -111,7 +113,7 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (FnPtr &type) override\n+  virtual void visit (const FnPtr &type) override\n   {\n     ok = false;\n     if (emit_error_flag)\n@@ -127,7 +129,7 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (ArrayType &type) override\n+  virtual void visit (const ArrayType &type) override\n   {\n     ok = false;\n     if (emit_error_flag)\n@@ -143,7 +145,7 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (BoolType &type) override\n+  virtual void visit (const BoolType &type) override\n   {\n     ok = false;\n     if (emit_error_flag)\n@@ -159,7 +161,7 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (IntType &type) override\n+  virtual void visit (const IntType &type) override\n   {\n     ok = false;\n     if (emit_error_flag)\n@@ -175,7 +177,7 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (UintType &type) override\n+  virtual void visit (const UintType &type) override\n   {\n     ok = false;\n     if (emit_error_flag)\n@@ -191,7 +193,7 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (USizeType &type) override\n+  virtual void visit (const USizeType &type) override\n   {\n     ok = false;\n     if (emit_error_flag)\n@@ -207,7 +209,7 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (ISizeType &type) override\n+  virtual void visit (const ISizeType &type) override\n   {\n     ok = false;\n     if (emit_error_flag)\n@@ -223,7 +225,7 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (FloatType &type) override\n+  virtual void visit (const FloatType &type) override\n   {\n     ok = false;\n     if (emit_error_flag)\n@@ -239,7 +241,7 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (ErrorType &type) override\n+  virtual void visit (const ErrorType &type) override\n   {\n     ok = false;\n     if (emit_error_flag)\n@@ -255,7 +257,7 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (CharType &type) override\n+  virtual void visit (const CharType &type) override\n   {\n     ok = false;\n     if (emit_error_flag)\n@@ -271,7 +273,7 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (ReferenceType &type) override\n+  virtual void visit (const ReferenceType &type) override\n   {\n     ok = false;\n     if (emit_error_flag)\n@@ -287,7 +289,7 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (StrType &type) override\n+  virtual void visit (const StrType &type) override\n   {\n     ok = false;\n     if (emit_error_flag)\n@@ -303,7 +305,7 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (NeverType &type) override\n+  virtual void visit (const NeverType &type) override\n   {\n     ok = false;\n     if (emit_error_flag)\n@@ -319,20 +321,20 @@ class BaseCmp : public TyVisitor\n       }\n   }\n \n-  virtual void visit (PlaceholderType &type) override\n+  virtual void visit (const PlaceholderType &type) override\n   {\n     // it is ok for types to can eq to a placeholder\n     ok = true;\n   }\n \n-  virtual void visit (ParamType &type) override\n+  virtual void visit (const ParamType &type) override\n   {\n     // it is ok for types to can eq to a ParamType\n     ok = true;\n   }\n \n protected:\n-  BaseCmp (BaseType *base, bool emit_errors)\n+  BaseCmp (const BaseType *base, bool emit_errors)\n     : mappings (Analysis::Mappings::get ()),\n       context (Resolver::TypeCheckContext::get ()), ok (false),\n       emit_error_flag (emit_errors)\n@@ -346,19 +348,19 @@ class BaseCmp : public TyVisitor\n \n private:\n   /* Returns a pointer to the ty that created this rule. */\n-  virtual BaseType *get_base () = 0;\n+  virtual const BaseType *get_base () const = 0;\n };\n \n class InferCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  InferCmp (InferType *base, bool emit_errors)\n+  InferCmp (const InferType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (BoolType &type) override\n+  void visit (const BoolType &type) override\n   {\n     bool is_valid\n       = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n@@ -371,7 +373,7 @@ class InferCmp : public BaseCmp\n     BaseCmp::visit (type);\n   }\n \n-  void visit (IntType &type) override\n+  void visit (const IntType &type) override\n   {\n     bool is_valid\n       = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL)\n@@ -386,7 +388,7 @@ class InferCmp : public BaseCmp\n     BaseCmp::visit (type);\n   }\n \n-  void visit (UintType &type) override\n+  void visit (const UintType &type) override\n   {\n     bool is_valid\n       = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL)\n@@ -401,7 +403,7 @@ class InferCmp : public BaseCmp\n     BaseCmp::visit (type);\n   }\n \n-  void visit (USizeType &type) override\n+  void visit (const USizeType &type) override\n   {\n     bool is_valid\n       = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL)\n@@ -416,7 +418,7 @@ class InferCmp : public BaseCmp\n     BaseCmp::visit (type);\n   }\n \n-  void visit (ISizeType &type) override\n+  void visit (const ISizeType &type) override\n   {\n     bool is_valid\n       = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL)\n@@ -431,7 +433,7 @@ class InferCmp : public BaseCmp\n     BaseCmp::visit (type);\n   }\n \n-  void visit (FloatType &type) override\n+  void visit (const FloatType &type) override\n   {\n     bool is_valid\n       = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL)\n@@ -445,7 +447,7 @@ class InferCmp : public BaseCmp\n     BaseCmp::visit (type);\n   }\n \n-  void visit (ArrayType &type) override\n+  void visit (const ArrayType &type) override\n   {\n     bool is_valid\n       = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n@@ -458,7 +460,7 @@ class InferCmp : public BaseCmp\n     BaseCmp::visit (type);\n   }\n \n-  void visit (ADTType &type) override\n+  void visit (const ADTType &type) override\n   {\n     bool is_valid\n       = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n@@ -471,7 +473,7 @@ class InferCmp : public BaseCmp\n     BaseCmp::visit (type);\n   }\n \n-  void visit (TupleType &type) override\n+  void visit (const TupleType &type) override\n   {\n     bool is_valid\n       = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n@@ -484,7 +486,7 @@ class InferCmp : public BaseCmp\n     BaseCmp::visit (type);\n   }\n \n-  void visit (InferType &type) override\n+  void visit (const InferType &type) override\n   {\n     switch (base->get_infer_kind ())\n       {\n@@ -524,7 +526,7 @@ class InferCmp : public BaseCmp\n     BaseCmp::visit (type);\n   }\n \n-  void visit (CharType &type) override\n+  void visit (const CharType &type) override\n   {\n     {\n       bool is_valid\n@@ -539,7 +541,7 @@ class InferCmp : public BaseCmp\n     }\n   }\n \n-  void visit (ReferenceType &type) override\n+  void visit (const ReferenceType &type) override\n \n   {\n     bool is_valid\n@@ -553,7 +555,7 @@ class InferCmp : public BaseCmp\n     BaseCmp::visit (type);\n   }\n \n-  void visit (ParamType &type) override\n+  void visit (const ParamType &type) override\n   {\n     bool is_valid\n       = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n@@ -567,26 +569,25 @@ class InferCmp : public BaseCmp\n   }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  InferType *base;\n+  const BaseType *get_base () const override { return base; }\n+  const InferType *base;\n };\n \n class FnCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  FnCmp (FnType *base, bool emit_errors)\n+  FnCmp (const FnType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (InferType &type) override\n+  void visit (const InferType &type) override\n   {\n     ok = type.get_infer_kind () == InferType::InferTypeKind::GENERAL;\n   }\n \n-  void visit (FnType &type) override\n+  void visit (const FnType &type) override\n   {\n     if (base->num_params () != type.num_params ())\n       {\n@@ -619,21 +620,20 @@ class FnCmp : public BaseCmp\n   }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  FnType *base;\n+  const BaseType *get_base () const override { return base; }\n+  const FnType *base;\n };\n \n class FnptrCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  FnptrCmp (FnPtr *base, bool emit_errors)\n+  FnptrCmp (const FnPtr *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (InferType &type) override\n+  void visit (const InferType &type) override\n   {\n     if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n       {\n@@ -644,7 +644,7 @@ class FnptrCmp : public BaseCmp\n     ok = true;\n   }\n \n-  void visit (FnPtr &type) override\n+  void visit (const FnPtr &type) override\n   {\n     if (base->num_params () != type.num_params ())\n       {\n@@ -674,7 +674,7 @@ class FnptrCmp : public BaseCmp\n     ok = true;\n   }\n \n-  void visit (FnType &type) override\n+  void visit (const FnType &type) override\n   {\n     if (base->num_params () != type.num_params ())\n       {\n@@ -705,36 +705,33 @@ class FnptrCmp : public BaseCmp\n   }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  FnPtr *base;\n+  const BaseType *get_base () const override { return base; }\n+  const FnPtr *base;\n };\n \n class ArrayCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  ArrayCmp (ArrayType *base, bool emit_errors)\n+  ArrayCmp (const ArrayType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (ArrayType &type) override\n+  void visit (const ArrayType &type) override\n   {\n-    // check base type\n-    auto base_resolved\n-      = base->get_element_type ()->unify (type.get_element_type ());\n-    if (base_resolved->get_kind () == TypeKind::ERROR)\n+    // need to check the base types and capacity\n+    if (type.get_capacity () != base->get_capacity ())\n       {\n \tBaseCmp::visit (type);\n \treturn;\n       }\n \n-    // need to check the base types and capacity\n-    if (type.get_capacity () != base->get_capacity ())\n+    // check base type\n+    const BaseType *base_element = base->get_element_type ();\n+    const BaseType *other_element = type.get_element_type ();\n+    if (!base_element->can_eq (other_element, emit_error_flag))\n       {\n-\tLocation locus = mappings->lookup_location (type.get_ref ());\n-\trust_error_at (locus, \"mismatch in array capacity\");\n \tBaseCmp::visit (type);\n \treturn;\n       }\n@@ -743,118 +740,113 @@ class ArrayCmp : public BaseCmp\n   }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  ArrayType *base;\n+  const BaseType *get_base () const override { return base; }\n+  const ArrayType *base;\n };\n \n class BoolCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  BoolCmp (BoolType *base, bool emit_errors)\n+  BoolCmp (const BoolType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (BoolType &type) override { ok = true; }\n+  void visit (const BoolType &type) override { ok = true; }\n \n-  void visit (InferType &type) override\n+  void visit (const InferType &type) override\n   {\n     ok = type.get_infer_kind () == InferType::InferTypeKind::GENERAL;\n   }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  BoolType *base;\n+  const BaseType *get_base () const override { return base; }\n+  const BoolType *base;\n };\n \n class IntCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  IntCmp (IntType *base, bool emit_errors)\n+  IntCmp (const IntType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (InferType &type) override\n+  void visit (const InferType &type) override\n   {\n     ok = type.get_infer_kind () != InferType::InferTypeKind::FLOAT;\n   }\n \n-  void visit (IntType &type) override\n+  void visit (const IntType &type) override\n   {\n     ok = type.get_int_kind () == base->get_int_kind ();\n   }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  IntType *base;\n+  const BaseType *get_base () const override { return base; }\n+  const IntType *base;\n };\n \n class UintCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  UintCmp (UintType *base, bool emit_errors)\n+  UintCmp (const UintType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (InferType &type) override\n+  void visit (const InferType &type) override\n   {\n     ok = type.get_infer_kind () != InferType::InferTypeKind::FLOAT;\n   }\n \n-  void visit (UintType &type) override\n+  void visit (const UintType &type) override\n   {\n     ok = type.get_uint_kind () == base->get_uint_kind ();\n   }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  UintType *base;\n+  const BaseType *get_base () const override { return base; }\n+  const UintType *base;\n };\n \n class FloatCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  FloatCmp (FloatType *base, bool emit_errors)\n+  FloatCmp (const FloatType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (InferType &type) override\n+  void visit (const InferType &type) override\n   {\n     ok = type.get_infer_kind () != InferType::InferTypeKind::INTEGRAL;\n   }\n \n-  void visit (FloatType &type) override\n+  void visit (const FloatType &type) override\n   {\n     ok = type.get_float_kind () == base->get_float_kind ();\n   }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  FloatType *base;\n+  const BaseType *get_base () const override { return base; }\n+  const FloatType *base;\n };\n \n class ADTCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  ADTCmp (ADTType *base, bool emit_errors)\n+  ADTCmp (const ADTType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (ADTType &type) override\n+  void visit (const ADTType &type) override\n   {\n     if (base->get_identifier ().compare (type.get_identifier ()) != 0)\n       {\n@@ -870,8 +862,8 @@ class ADTCmp : public BaseCmp\n \n     for (size_t i = 0; i < type.num_fields (); ++i)\n       {\n-\tTyTy::StructFieldType *base_field = base->get_field (i);\n-\tTyTy::StructFieldType *other_field = type.get_field (i);\n+\tconst TyTy::StructFieldType *base_field = base->get_imm_field (i);\n+\tconst TyTy::StructFieldType *other_field = type.get_imm_field (i);\n \n \tTyTy::BaseType *this_field_ty = base_field->get_field_type ();\n \tTyTy::BaseType *other_field_ty = other_field->get_field_type ();\n@@ -887,21 +879,20 @@ class ADTCmp : public BaseCmp\n   }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  ADTType *base;\n+  const BaseType *get_base () const override { return base; }\n+  const ADTType *base;\n };\n \n class TupleCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  TupleCmp (TupleType *base, bool emit_errors)\n+  TupleCmp (const TupleType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (TupleType &type) override\n+  void visit (const TupleType &type) override\n   {\n     if (base->num_fields () != type.num_fields ())\n       {\n@@ -925,87 +916,83 @@ class TupleCmp : public BaseCmp\n   }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  TupleType *base;\n+  const BaseType *get_base () const override { return base; }\n+  const TupleType *base;\n };\n \n class USizeCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  USizeCmp (USizeType *base, bool emit_errors)\n+  USizeCmp (const USizeType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (InferType &type) override\n+  void visit (const InferType &type) override\n   {\n     ok = type.get_infer_kind () != InferType::InferTypeKind::FLOAT;\n   }\n \n-  void visit (USizeType &type) override { ok = true; }\n+  void visit (const USizeType &type) override { ok = true; }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  USizeType *base;\n+  const BaseType *get_base () const override { return base; }\n+  const USizeType *base;\n };\n \n class ISizeCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  ISizeCmp (ISizeType *base, bool emit_errors)\n+  ISizeCmp (const ISizeType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (InferType &type) override\n+  void visit (const InferType &type) override\n   {\n     ok = type.get_infer_kind () != InferType::InferTypeKind::FLOAT;\n   }\n \n-  void visit (ISizeType &type) override { ok = true; }\n+  void visit (const ISizeType &type) override { ok = true; }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  ISizeType *base;\n+  const BaseType *get_base () const override { return base; }\n+  const ISizeType *base;\n };\n \n class CharCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  CharCmp (CharType *base, bool emit_errors)\n+  CharCmp (const CharType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (InferType &type) override\n+  void visit (const InferType &type) override\n   {\n     ok = type.get_infer_kind () == InferType::InferTypeKind::GENERAL;\n   }\n \n-  void visit (CharType &type) override { ok = true; }\n+  void visit (const CharType &type) override { ok = true; }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  CharType *base;\n+  const BaseType *get_base () const override { return base; }\n+  const CharType *base;\n };\n \n class ReferenceCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  ReferenceCmp (ReferenceType *base, bool emit_errors)\n+  ReferenceCmp (const ReferenceType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (ReferenceType &type) override\n+  void visit (const ReferenceType &type) override\n   {\n     auto base_type = base->get_base ();\n     auto other_base_type = type.get_base ();\n@@ -1014,17 +1001,16 @@ class ReferenceCmp : public BaseCmp\n   }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  ReferenceType *base;\n+  const BaseType *get_base () const override { return base; }\n+  const ReferenceType *base;\n };\n \n class ParamCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  ParamCmp (ParamType *base, bool emit_errors)\n+  ParamCmp (const ParamType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n@@ -1037,7 +1023,7 @@ class ParamCmp : public BaseCmp\n   //\n   // rust also allows for a = foo{a:123}; Where we can use an Inference Variable\n   // to handle the typing of the struct\n-  bool can_eq (BaseType *other) override final\n+  bool can_eq (const BaseType *other) override\n   {\n     if (base->get_ref () == base->get_ty_ref ())\n       return BaseCmp::can_eq (other);\n@@ -1062,12 +1048,11 @@ class ParamCmp : public BaseCmp\n   // impl <X>Foo<X> { ... }\n   // both of these types are compatible so we mostly care about the number of\n   // generic arguments\n-  void visit (ParamType &type) override { ok = true; }\n+  void visit (const ParamType &type) override { ok = true; }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  ParamType *base;\n+  const BaseType *get_base () const override { return base; }\n+  const ParamType *base;\n };\n \n class StrCmp : public BaseCmp\n@@ -1076,86 +1061,84 @@ class StrCmp : public BaseCmp\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  StrCmp (StrType *base, bool emit_errors)\n+  StrCmp (const StrType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (StrType &type) override { ok = true; }\n+  void visit (const StrType &type) override { ok = true; }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  StrType *base;\n+  const BaseType *get_base () const override { return base; }\n+  const StrType *base;\n };\n \n class NeverCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  NeverCmp (NeverType *base, bool emit_errors)\n+  NeverCmp (const NeverType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  void visit (NeverType &type) override { ok = true; }\n+  void visit (const NeverType &type) override { ok = true; }\n \n private:\n-  BaseType *get_base () override { return base; }\n-\n-  NeverType *base;\n+  const BaseType *get_base () const override { return base; }\n+  const NeverType *base;\n };\n \n class PlaceholderCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n \n public:\n-  PlaceholderCmp (PlaceholderType *base, bool emit_errors)\n+  PlaceholderCmp (const PlaceholderType *base, bool emit_errors)\n     : BaseCmp (base, emit_errors), base (base)\n   {}\n \n-  virtual void visit (TupleType &) override { ok = true; }\n+  virtual void visit (const TupleType &) override { ok = true; }\n \n-  virtual void visit (ADTType &) override { ok = true; }\n+  virtual void visit (const ADTType &) override { ok = true; }\n \n-  virtual void visit (InferType &) override { ok = true; }\n+  virtual void visit (const InferType &) override { ok = true; }\n \n-  virtual void visit (FnType &) override { ok = true; }\n+  virtual void visit (const FnType &) override { ok = true; }\n \n-  virtual void visit (FnPtr &) override { ok = true; }\n+  virtual void visit (const FnPtr &) override { ok = true; }\n \n-  virtual void visit (ArrayType &) override { ok = true; }\n+  virtual void visit (const ArrayType &) override { ok = true; }\n \n-  virtual void visit (BoolType &) override { ok = true; }\n+  virtual void visit (const BoolType &) override { ok = true; }\n \n-  virtual void visit (IntType &) override { ok = true; }\n+  virtual void visit (const IntType &) override { ok = true; }\n \n-  virtual void visit (UintType &) override { ok = true; }\n+  virtual void visit (const UintType &) override { ok = true; }\n \n-  virtual void visit (USizeType &) override { ok = true; }\n+  virtual void visit (const USizeType &) override { ok = true; }\n \n-  virtual void visit (ISizeType &) override { ok = true; }\n+  virtual void visit (const ISizeType &) override { ok = true; }\n \n-  virtual void visit (FloatType &) override { ok = true; }\n+  virtual void visit (const FloatType &) override { ok = true; }\n \n-  virtual void visit (ErrorType &) override { ok = true; }\n+  virtual void visit (const ErrorType &) override { ok = true; }\n \n-  virtual void visit (CharType &) override { ok = true; }\n+  virtual void visit (const CharType &) override { ok = true; }\n \n-  virtual void visit (ReferenceType &) override { ok = true; }\n+  virtual void visit (const ReferenceType &) override { ok = true; }\n \n-  virtual void visit (ParamType &) override { ok = true; }\n+  virtual void visit (const ParamType &) override { ok = true; }\n \n-  virtual void visit (StrType &) override { ok = true; }\n+  virtual void visit (const StrType &) override { ok = true; }\n \n-  virtual void visit (NeverType &) override { ok = true; }\n+  virtual void visit (const NeverType &) override { ok = true; }\n \n-  virtual void visit (PlaceholderType &) override { ok = true; }\n+  virtual void visit (const PlaceholderType &) override { ok = true; }\n \n private:\n-  BaseType *get_base () override { return base; }\n+  const BaseType *get_base () const override { return base; }\n \n-  PlaceholderType *base;\n+  const PlaceholderType *base;\n };\n \n } // namespace TyTy"}, {"sha": "2dd97b817dc3f12d8f8d9db3de3d2508d394826e", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b", "patch": "@@ -48,6 +48,30 @@ class TyVisitor\n   virtual void visit (PlaceholderType &type) = 0;\n };\n \n+class TyConstVisitor\n+{\n+public:\n+  virtual void visit (const InferType &type) = 0;\n+  virtual void visit (const ADTType &type) = 0;\n+  virtual void visit (const TupleType &type) = 0;\n+  virtual void visit (const FnType &type) = 0;\n+  virtual void visit (const FnPtr &type) = 0;\n+  virtual void visit (const ArrayType &type) = 0;\n+  virtual void visit (const BoolType &type) = 0;\n+  virtual void visit (const IntType &type) = 0;\n+  virtual void visit (const UintType &type) = 0;\n+  virtual void visit (const FloatType &type) = 0;\n+  virtual void visit (const USizeType &type) = 0;\n+  virtual void visit (const ISizeType &type) = 0;\n+  virtual void visit (const ErrorType &type) = 0;\n+  virtual void visit (const CharType &type) = 0;\n+  virtual void visit (const ReferenceType &type) = 0;\n+  virtual void visit (const ParamType &type) = 0;\n+  virtual void visit (const StrType &type) = 0;\n+  virtual void visit (const NeverType &type) = 0;\n+  virtual void visit (const PlaceholderType &type) = 0;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "e2c5f717f734b1a3e91295586b20df8bbf0ba72b", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 133, "deletions": 19, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b", "patch": "@@ -75,6 +75,12 @@ InferType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+InferType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n InferType::as_string () const\n {\n@@ -98,7 +104,7 @@ InferType::unify (BaseType *other)\n }\n \n bool\n-InferType::can_eq (BaseType *other, bool emit_errors)\n+InferType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   InferCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -142,6 +148,12 @@ ErrorType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+ErrorType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n ErrorType::as_string () const\n {\n@@ -155,7 +167,7 @@ ErrorType::unify (BaseType *other)\n }\n \n bool\n-ErrorType::can_eq (BaseType *other, bool emit_errors)\n+ErrorType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   return get_kind () == other->get_kind ();\n }\n@@ -379,6 +391,12 @@ ADTType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+ADTType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n ADTType::as_string () const\n {\n@@ -421,7 +439,7 @@ ADTType::unify (BaseType *other)\n }\n \n bool\n-ADTType::can_eq (BaseType *other, bool emit_errors)\n+ADTType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   ADTCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -556,6 +574,12 @@ TupleType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+TupleType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n TupleType::as_string () const\n {\n@@ -582,7 +606,7 @@ TupleType::unify (BaseType *other)\n }\n \n bool\n-TupleType::can_eq (BaseType *other, bool emit_errors)\n+TupleType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   TupleCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -642,6 +666,12 @@ FnType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+FnType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n FnType::as_string () const\n {\n@@ -666,7 +696,7 @@ FnType::unify (BaseType *other)\n }\n \n bool\n-FnType::can_eq (BaseType *other, bool emit_errors)\n+FnType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   FnCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -842,6 +872,12 @@ FnPtr::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+FnPtr::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n FnPtr::as_string () const\n {\n@@ -861,7 +897,7 @@ FnPtr::unify (BaseType *other)\n }\n \n bool\n-FnPtr::can_eq (BaseType *other, bool emit_errors)\n+FnPtr::can_eq (const BaseType *other, bool emit_errors) const\n {\n   FnptrCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -907,6 +943,12 @@ ArrayType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+ArrayType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n ArrayType::as_string () const\n {\n@@ -928,7 +970,7 @@ ArrayType::unify (BaseType *other)\n }\n \n bool\n-ArrayType::can_eq (BaseType *other, bool emit_errors)\n+ArrayType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   ArrayCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -969,6 +1011,12 @@ BoolType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+BoolType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n BoolType::as_string () const\n {\n@@ -983,7 +1031,7 @@ BoolType::unify (BaseType *other)\n }\n \n bool\n-BoolType::can_eq (BaseType *other, bool emit_errors)\n+BoolType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   BoolCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -1001,6 +1049,12 @@ IntType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+IntType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n IntType::as_string () const\n {\n@@ -1029,7 +1083,7 @@ IntType::unify (BaseType *other)\n }\n \n bool\n-IntType::can_eq (BaseType *other, bool emit_errors)\n+IntType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   IntCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -1058,6 +1112,12 @@ UintType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+UintType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n UintType::as_string () const\n {\n@@ -1086,7 +1146,7 @@ UintType::unify (BaseType *other)\n }\n \n bool\n-UintType::can_eq (BaseType *other, bool emit_errors)\n+UintType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   UintCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -1115,6 +1175,12 @@ FloatType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+FloatType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n FloatType::as_string () const\n {\n@@ -1137,7 +1203,7 @@ FloatType::unify (BaseType *other)\n }\n \n bool\n-FloatType::can_eq (BaseType *other, bool emit_errors)\n+FloatType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   FloatCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -1166,6 +1232,12 @@ USizeType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+USizeType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n USizeType::as_string () const\n {\n@@ -1180,7 +1252,7 @@ USizeType::unify (BaseType *other)\n }\n \n bool\n-USizeType::can_eq (BaseType *other, bool emit_errors)\n+USizeType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   USizeCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -1198,6 +1270,12 @@ ISizeType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+ISizeType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n ISizeType::as_string () const\n {\n@@ -1212,7 +1290,7 @@ ISizeType::unify (BaseType *other)\n }\n \n bool\n-ISizeType::can_eq (BaseType *other, bool emit_errors)\n+ISizeType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   ISizeCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -1230,6 +1308,12 @@ CharType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+CharType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n CharType::as_string () const\n {\n@@ -1244,7 +1328,7 @@ CharType::unify (BaseType *other)\n }\n \n bool\n-CharType::can_eq (BaseType *other, bool emit_errors)\n+CharType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   CharCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -1262,6 +1346,12 @@ ReferenceType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+ReferenceType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n ReferenceType::as_string () const\n {\n@@ -1276,7 +1366,7 @@ ReferenceType::unify (BaseType *other)\n }\n \n bool\n-ReferenceType::can_eq (BaseType *other, bool emit_errors)\n+ReferenceType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   ReferenceCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -1327,6 +1417,12 @@ ParamType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+ParamType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n ParamType::as_string () const\n {\n@@ -1351,7 +1447,7 @@ ParamType::unify (BaseType *other)\n }\n \n bool\n-ParamType::can_eq (BaseType *other, bool emit_errors)\n+ParamType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   ParamCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -1437,6 +1533,12 @@ StrType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+StrType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n StrType::as_string () const\n {\n@@ -1451,7 +1553,7 @@ StrType::unify (BaseType *other)\n }\n \n bool\n-StrType::can_eq (BaseType *other, bool emit_errors)\n+StrType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   StrCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -1469,6 +1571,12 @@ NeverType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+NeverType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n NeverType::as_string () const\n {\n@@ -1483,7 +1591,7 @@ NeverType::unify (BaseType *other)\n }\n \n bool\n-NeverType::can_eq (BaseType *other, bool emit_errors)\n+NeverType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   NeverCmp r (this, emit_errors);\n   return r.can_eq (other);\n@@ -1501,6 +1609,12 @@ PlaceholderType::accept_vis (TyVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+PlaceholderType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n std::string\n PlaceholderType::as_string () const\n {\n@@ -1515,7 +1629,7 @@ PlaceholderType::unify (BaseType *other)\n }\n \n bool\n-PlaceholderType::can_eq (BaseType *other, bool emit_errors)\n+PlaceholderType::can_eq (const BaseType *other, bool emit_errors) const\n {\n   PlaceholderCmp r (this, emit_errors);\n   return r.can_eq (other);"}, {"sha": "935b9434c14af798c5baab37aac8824129476e09", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 47, "deletions": 21, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b", "patch": "@@ -122,6 +122,7 @@ class TypeKindFormat\n };\n \n class TyVisitor;\n+class TyConstVisitor;\n class BaseType\n {\n public:\n@@ -140,9 +141,10 @@ class BaseType\n \n   void set_ty_ref (HirId id) { ty_ref = id; }\n \n-  /* Visitor pattern for double dispatch. BaseRules implements TyVisitor. */\n   virtual void accept_vis (TyVisitor &vis) = 0;\n \n+  virtual void accept_vis (TyConstVisitor &vis) const = 0;\n+\n   virtual std::string as_string () const = 0;\n \n   virtual std::string get_name () const = 0;\n@@ -155,7 +157,7 @@ class BaseType\n \n   // similar to unify but does not actually perform type unification but\n   // determines whether they are compatible\n-  virtual bool can_eq (BaseType *other, bool emit_errors) = 0;\n+  virtual bool can_eq (const BaseType *other, bool emit_errors) const = 0;\n \n   // Check value equality between two ty. Type inference rules are ignored. Two\n   //   ty are considered equal if they're of the same kind, and\n@@ -269,12 +271,13 @@ class InferType : public BaseType\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n \n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () final override;\n \n@@ -302,13 +305,14 @@ class ErrorType : public BaseType\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   bool is_unit () const override { return true; }\n \n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () final override;\n \n@@ -332,11 +336,12 @@ class ParamType : public BaseType\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () final override;\n \n@@ -415,13 +420,14 @@ class TupleType : public BaseType\n   static TupleType *get_unit_type (HirId ref) { return new TupleType (ref); }\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   bool is_unit () const override { return this->fields.empty (); }\n \n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -849,11 +855,12 @@ class ADTType : public BaseType, public SubstitutionRef\n   bool is_unit () const override { return this->fields.empty (); }\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -874,6 +881,11 @@ class ADTType : public BaseType, public SubstitutionRef\n \n   StructFieldType *get_field (size_t index) { return fields.at (index); }\n \n+  const StructFieldType *get_imm_field (size_t index) const\n+  {\n+    return fields.at (index);\n+  }\n+\n   StructFieldType *get_field (const std::string &lookup,\n \t\t\t      size_t *index = nullptr) const\n   {\n@@ -959,6 +971,7 @@ class FnType : public BaseType, public SubstitutionRef\n   }\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n@@ -967,7 +980,7 @@ class FnType : public BaseType, public SubstitutionRef\n   std::string get_identifier () const { return identifier; }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -1062,11 +1075,12 @@ class FnPtr : public BaseType\n   BaseType *param_at (size_t idx) const { return params.at (idx).get_tyty (); }\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -1102,13 +1116,14 @@ class ArrayType : public BaseType\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -1141,13 +1156,14 @@ class BoolType : public BaseType\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () final override;\n };\n@@ -1174,13 +1190,14 @@ class IntType : public BaseType\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   IntKind get_int_kind () const { return int_kind; }\n \n@@ -1214,13 +1231,14 @@ class UintType : public BaseType\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   UintKind get_uint_kind () const { return uint_kind; }\n \n@@ -1252,13 +1270,14 @@ class FloatType : public BaseType\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   FloatKind get_float_kind () const { return float_kind; }\n \n@@ -1292,13 +1311,14 @@ class USizeType : public BaseType\n   }\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () final override;\n };\n@@ -1325,13 +1345,14 @@ class ISizeType : public BaseType\n   }\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () final override;\n };\n@@ -1358,13 +1379,14 @@ class CharType : public BaseType\n   }\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () final override;\n };\n@@ -1395,13 +1417,14 @@ class ReferenceType : public BaseType\n   BaseType *get_base () const;\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n   std::string get_name () const override final { return as_string (); }\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -1442,11 +1465,12 @@ class StrType : public BaseType\n   std::string get_name () const override final { return as_string (); }\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   bool is_equal (const BaseType &other) const override;\n \n@@ -1475,11 +1499,12 @@ class NeverType : public BaseType\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () final override;\n \n@@ -1503,11 +1528,12 @@ class PlaceholderType : public BaseType\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n \n   std::string as_string () const override;\n \n   BaseType *unify (BaseType *other) override;\n-  bool can_eq (BaseType *other, bool emit_errors) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n \n   BaseType *clone () final override;\n "}, {"sha": "33ba8d0da30a26ecf6d71e1d84efa785f01b768f", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b", "patch": "@@ -259,6 +259,30 @@ Mappings::lookup_hir_item (CrateNum crateNum, HirId id)\n   return iy->second;\n }\n \n+void\n+Mappings::insert_hir_impl_block (CrateNum crateNum, HirId id,\n+\t\t\t\t HIR::ImplBlock *item)\n+{\n+  rust_assert (lookup_hir_impl_block (crateNum, id) == nullptr);\n+\n+  hirImplBlockMappings[crateNum][id] = item;\n+  nodeIdToHirMappings[crateNum][item->get_mappings ().get_nodeid ()] = id;\n+}\n+\n+HIR::ImplBlock *\n+Mappings::lookup_hir_impl_block (CrateNum crateNum, HirId id)\n+{\n+  auto it = hirImplBlockMappings.find (crateNum);\n+  if (it == hirImplBlockMappings.end ())\n+    return nullptr;\n+\n+  auto iy = it->second.find (id);\n+  if (iy == it->second.end ())\n+    return nullptr;\n+\n+  return iy->second;\n+}\n+\n void\n Mappings::insert_hir_implitem (CrateNum crateNum, HirId id,\n \t\t\t       HirId parent_impl_id, HIR::ImplItem *item)"}, {"sha": "98c15a233a66ef4ba6be30d8531304c1473b8901", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b", "patch": "@@ -128,6 +128,10 @@ class Mappings\n   void insert_hir_item (CrateNum crateNum, HirId id, HIR::Item *item);\n   HIR::Item *lookup_hir_item (CrateNum crateNum, HirId id);\n \n+  void insert_hir_impl_block (CrateNum crateNum, HirId id,\n+\t\t\t      HIR::ImplBlock *item);\n+  HIR::ImplBlock *lookup_hir_impl_block (CrateNum crateNum, HirId id);\n+\n   void insert_hir_implitem (CrateNum crateNum, HirId id, HirId parent_impl_id,\n \t\t\t    HIR::ImplItem *item);\n   HIR::ImplItem *lookup_hir_implitem (CrateNum crateNum, HirId id,\n@@ -227,6 +231,7 @@ class Mappings\n     hirImplItemMappings;\n   std::map<CrateNum, std::map<HirId, HIR::SelfParam *> > hirSelfParamMappings;\n   std::map<HirId, HIR::ImplBlock *> hirImplItemsToImplMappings;\n+  std::map<CrateNum, std::map<HirId, HIR::ImplBlock *> > hirImplBlockMappings;\n \n   // location info\n   std::map<CrateNum, std::map<NodeId, Location> > locations;"}]}