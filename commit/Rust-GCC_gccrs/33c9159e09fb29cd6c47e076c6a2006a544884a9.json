{"sha": "33c9159e09fb29cd6c47e076c6a2006a544884a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNjOTE1OWUwOWZiMjljZDZjNDdlMDc2YzZhMjAwNmE1NDQ4ODRhOQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2006-04-11T01:36:50Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2006-04-11T01:36:50Z"}, "message": "20060410.c: New.\n\n\tPR/21391\n\t* testsuite/gcc.dg/20060410.c: New.\n\t* dwarf2out.c (struct die_struct): Add die_perennial_p field.\n\t(premark_used_types_helper): New.\n\t(premark_used_types): New.\n\t(gen_subprogram_die): Call premark_used_types.\n\t(prune_unused_types_walk): Do not prune perennial dies.\n\t* function.c (used_types_insert): New.\n\t* function.h (struct function): Add used_types_hash field.\n\t(used_types_insert): Add prototype.\n\t* Makefile.in (FUNCTION_H): Depend on HASHTAB_H.\n\t* c-parser.c (c_parser_cast_expression): Save casted types in used\n\ttypes hash table.\n\nFrom-SVN: r112845", "tree": {"sha": "7d93c2f41a91db2797e82ea2593a73f5c5b9cda7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d93c2f41a91db2797e82ea2593a73f5c5b9cda7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33c9159e09fb29cd6c47e076c6a2006a544884a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33c9159e09fb29cd6c47e076c6a2006a544884a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33c9159e09fb29cd6c47e076c6a2006a544884a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33c9159e09fb29cd6c47e076c6a2006a544884a9/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab9260ac48d4f7dad156eae570df7ab4f826af7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab9260ac48d4f7dad156eae570df7ab4f826af7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab9260ac48d4f7dad156eae570df7ab4f826af7c"}], "stats": {"total": 100, "additions": 99, "deletions": 1}, "files": [{"sha": "209b378d34d86fa9c0896d200fc9fb0aa86749ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c9159e09fb29cd6c47e076c6a2006a544884a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c9159e09fb29cd6c47e076c6a2006a544884a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33c9159e09fb29cd6c47e076c6a2006a544884a9", "patch": "@@ -1,3 +1,18 @@\n+2006-04-10  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR/21391\n+\t* dwarf2out.c (struct die_struct): Add die_perennial_p field.\n+\t(premark_used_types_helper): New.\n+\t(premark_used_types): New.\n+\t(gen_subprogram_die): Call premark_used_types.\n+\t(prune_unused_types_walk): Do not prune perennial dies.\n+\t* function.c (used_types_insert): New.\n+\t* function.h (struct function): Add used_types_hash field.\n+\t(used_types_insert): Add prototype.\n+\t* Makefile.in (FUNCTION_H): Depend on HASHTAB_H.\n+\t* c-parser.c (c_parser_cast_expression): Save casted types in used\n+\ttypes hash table.\n+\n 2006-04-11  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR target/26459"}, {"sha": "d29fcaa961d9a604afb1cbfd7216614b344d7506", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c9159e09fb29cd6c47e076c6a2006a544884a9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c9159e09fb29cd6c47e076c6a2006a544884a9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=33c9159e09fb29cd6c47e076c6a2006a544884a9", "patch": "@@ -751,7 +751,7 @@ RECOG_H = recog.h\n ALIAS_H = alias.h\n EMIT_RTL_H = emit-rtl.h\n FLAGS_H = flags.h options.h\n-FUNCTION_H = function.h $(TREE_H)\n+FUNCTION_H = function.h $(TREE_H) $(HASHTAB_H)\n EXPR_H = expr.h insn-config.h $(FUNCTION_H) $(RTL_H) $(FLAGS_H) $(TREE_H) $(MACHMODE_H) $(EMIT_RTL_H)\n OPTABS_H = optabs.h insn-codes.h\n REGS_H = regs.h varray.h $(MACHMODE_H) $(OBSTACK_H) $(BASIC_BLOCK_H) $(FUNCTION_H)"}, {"sha": "0c90fa84bd875c75796b86c2258246451a7af4cd", "filename": "gcc/c-parser.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c9159e09fb29cd6c47e076c6a2006a544884a9/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c9159e09fb29cd6c47e076c6a2006a544884a9/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=33c9159e09fb29cd6c47e076c6a2006a544884a9", "patch": "@@ -4660,6 +4660,11 @@ c_parser_cast_expression (c_parser *parser, struct c_expr *after)\n \t  ret.original_code = ERROR_MARK;\n \t  return ret;\n \t}\n+\n+      /* Save casted types in the function's used types hash table.  */\n+      if (debug_info_level > DINFO_LEVEL_NONE)\n+\tused_types_insert (type_name->specs->type, cfun);\n+\n       if (c_parser_next_token_is (parser, CPP_OPEN_BRACE))\n \treturn c_parser_postfix_expression_after_paren_type (parser,\n \t\t\t\t\t\t\t     type_name);"}, {"sha": "f7de3d7cfde756794745e79d9e322dd9df4cffd2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c9159e09fb29cd6c47e076c6a2006a544884a9/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c9159e09fb29cd6c47e076c6a2006a544884a9/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=33c9159e09fb29cd6c47e076c6a2006a544884a9", "patch": "@@ -354,6 +354,7 @@ static void dwarf2out_stack_adjust (rtx, bool);\n static void flush_queued_reg_saves (void);\n static bool clobbers_queued_reg_save (rtx);\n static void dwarf2out_frame_debug_expr (rtx, const char *);\n+static void premark_used_types (void);\n \n /* Support for complex CFA locations.  */\n static void output_cfa_loc (dw_cfi_ref);\n@@ -3697,6 +3698,8 @@ typedef struct die_struct GTY(())\n   dw_offset die_offset;\n   unsigned long die_abbrev;\n   int die_mark;\n+  /* Die is used and must not be pruned as unused.  */\n+  int die_perennial_p;\n   unsigned int decl_id;\n }\n die_node;\n@@ -11511,6 +11514,32 @@ dwarf2out_abstract_function (tree decl)\n   current_function_decl = save_fn;\n }\n \n+/* Helper function of premark_used_types() which gets called through\n+   htab_traverse_resize().\n+\n+   Marks the DIE of a given type in *SLOT as perennial, so it never gets\n+   marked as unused by prune_unused_types.  */\n+static int\n+premark_used_types_helper (void **slot, void *data ATTRIBUTE_UNUSED)\n+{\n+  tree type;\n+  dw_die_ref die;\n+\n+  type = *slot;\n+  die = lookup_type_die (type);\n+  if (die != NULL)\n+    die->die_perennial_p = 1;\n+  return 1;\n+}\n+\n+/* Mark all members of used_types_hash as perennial.  */\n+static void\n+premark_used_types (void)\n+{\n+  if (cfun && cfun->used_types_hash)\n+    htab_traverse (cfun->used_types_hash, premark_used_types_helper, NULL);\n+}\n+\n /* Generate a DIE to represent a declared function (either file-scope or\n    block-local).  */\n \n@@ -11526,6 +11555,8 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n   int declaration = (current_function_decl != decl\n \t\t     || class_or_namespace_scope_p (context_die));\n \n+  premark_used_types();\n+\n   /* It is possible to have both DECL_ABSTRACT and DECLARATION be true if we\n      started to generate the abstract instance of an inline, decided to output\n      its containing class, and proceeded to emit the declaration of the inline\n@@ -13965,6 +13996,9 @@ prune_unused_types_walk (dw_die_ref die)\n   case DW_TAG_subrange_type:\n   case DW_TAG_ptr_to_member_type:\n   case DW_TAG_file_type:\n+    if (die->die_perennial_p)\n+      break;\n+\n     /* It's a type node --- don't mark it.  */\n     return;\n "}, {"sha": "ecdf28232b5bb01981584f222d9b9ef2caafe420", "filename": "gcc/function.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c9159e09fb29cd6c47e076c6a2006a544884a9/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c9159e09fb29cd6c47e076c6a2006a544884a9/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=33c9159e09fb29cd6c47e076c6a2006a544884a9", "patch": "@@ -5587,6 +5587,23 @@ rest_of_handle_check_leaf_regs (void)\n   return 0;\n }\n \n+/* Insert a type into the used types hash table.  */\n+void\n+used_types_insert (tree t, struct function *func)\n+{\n+  if (t != NULL && func != NULL)\n+    {\n+      void **slot;\n+\n+      if (func->used_types_hash == NULL)\n+\tfunc->used_types_hash = htab_create_ggc (37, htab_hash_pointer,\n+\t\t\t\t\t     htab_eq_pointer, NULL);\n+      slot = htab_find_slot (func->used_types_hash, t, INSERT);\n+      if (*slot == NULL)\n+\t*slot = t;\n+    }\n+}\n+\n struct tree_opt_pass pass_leaf_regs =\n {\n   NULL,                                 /* name */"}, {"sha": "282e04c1047249889751bff1a47ec8a8b0f3e4b8", "filename": "gcc/function.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c9159e09fb29cd6c47e076c6a2006a544884a9/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c9159e09fb29cd6c47e076c6a2006a544884a9/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=33c9159e09fb29cd6c47e076c6a2006a544884a9", "patch": "@@ -23,6 +23,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #define GCC_FUNCTION_H\n \n #include \"tree.h\"\n+#include \"hashtab.h\"\n \n struct var_refs_queue GTY(())\n {\n@@ -312,6 +313,9 @@ struct function GTY(())\n   /* Language-specific code can use this to store whatever it likes.  */\n   struct language_function * language;\n \n+  /* Used types hash table.  */\n+  htab_t GTY ((param_is (union tree_node))) used_types_hash;\n+\n   /* For reorg.  */\n \n   /* If some insns can be deferred to the delay slots of the epilogue, the\n@@ -566,4 +570,6 @@ extern bool pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n extern bool reference_callee_copied (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t     tree, bool);\n \n+extern void used_types_insert (tree, struct function *);\n+\n #endif  /* GCC_FUNCTION_H */"}, {"sha": "237a690b657802794b959f3ad25e5045cd3620b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c9159e09fb29cd6c47e076c6a2006a544884a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c9159e09fb29cd6c47e076c6a2006a544884a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=33c9159e09fb29cd6c47e076c6a2006a544884a9", "patch": "@@ -1,3 +1,8 @@\n+2006-04-10  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR/21391\n+\t* gcc.dg/20060410.c: New.\n+\n 2006-04-10  Matthias Klose  <doko@debian.org>\n \n \t* testsuite/lib/gcc-defs.exp (gcc-set-multilib-library-path):"}, {"sha": "88253bb43f3e4441793944d2f071dd9f24ed0d35", "filename": "gcc/testsuite/gcc.dg/20060410.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33c9159e09fb29cd6c47e076c6a2006a544884a9/gcc%2Ftestsuite%2Fgcc.dg%2F20060410.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33c9159e09fb29cd6c47e076c6a2006a544884a9/gcc%2Ftestsuite%2Fgcc.dg%2F20060410.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20060410.c?ref=33c9159e09fb29cd6c47e076c6a2006a544884a9", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-g\" } */\n+\n+/* Make sure we didn't eliminate foo because we thought it was unused.  */\n+\n+struct foo \n+{\n+    int i;\n+};\n+\n+int bar (void)\n+{\n+    return ((struct foo *)0x1234)->i;\n+}\n+\n+/* { dg-final { scan-assembler \"foo\" } } */"}]}