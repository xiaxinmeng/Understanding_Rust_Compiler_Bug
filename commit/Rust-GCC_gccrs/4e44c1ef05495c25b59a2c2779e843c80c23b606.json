{"sha": "4e44c1ef05495c25b59a2c2779e843c80c23b606", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU0NGMxZWYwNTQ5NWMyNWI1OWEyYzI3NzllODQzYzgwYzIzYjYwNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2004-01-29T08:05:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2004-01-29T08:05:47Z"}, "message": "re PR rtl-optimization/13424 (gcc.dg/20031202-1.c is miscompiled)\n\n\tPR optimization/13424\n\t* expr.c (store_constructor): Revert 2003-12-03 change.\n\n\t* emit-rtl.c (change_address): Check also if MEM_ATTRS is set as\n\texpected before returning early.  Avoid sharing RTL if they\n\tneed to be changed.\n\n\t* config/i386/i386.c (ix86_expand_movstr): Rework rep_mov and strmov\n\thandling so that memory attributes are preserved.  Don't call\n\tix86_set_move_mem_attrs.\n\t(ix86_set_move_mem_attrs_1, ix86_set_move_mem_attrs): Removed.\n\t(ix86_expand_clrstr): Rename src argument to\n\tdst.  Rework rep_stos and strset handling so that memory attributes\n\tare preserved.\n\t(ix86_expand_strlen): Pass src argument to\n\tix86_expand_strlensi_unroll_1.  Rework strlenqi_1 handling so that\n\tmemory attributes are preserved.\n\t(ix86_expand_strlensi_unroll_1): Add src argument.  Use\n\tchange_address instead of gen_rtx_MEM.\n\t* config/i386/i386.md (strmov, strmov_singleop, rep_mov): New\n\texpanders.\n\t(strmovdi_rex64, strmovsi, strmovsi_rex64, strmovhi, strmovhi_rex64,\n\tstrmovqi, strmovqi_rex64): Remove.\n\t(rep_mov*, strmov*): Prefix insn names with *.\n\t(strset, strset_singleop, rep_stos): New expanders.\n\t(strsetdi_rex64, strsetsi, strsetsi_rex64, strsethi, strsethi_rex64,\n\tstrsetqi, strsetqi_rex64): Remove.\n\t(rep_stos*, strset*): Prefix insn names with *.\n\t(rep_stosqi_rex64): Likewise.  Fix mode of dirflag reg from DImode\n\tto SImode.\n\t(cmpstrsi): Rework cmpstrqi_1 handling so that memory attributes\n\tare preserved.\n\t(cmpstrqi_nz_1, cmpstrqi_nz_rex_1, cmpstrqi_1, cmpstrqi_rex_1):\n\tPrefix insn names with *.\n\t(cmpstrqi_nz_1, cmpstrqi_1): New expanders.\n\t(strlenqi_1, strlenqi_rex_1): Prefix insn names with *.\n\t(strlenqi_1): New expander.\n\t* config/i386/i386.h (ix86_set_move_mem_attrs): Remove prototype.\n\nFrom-SVN: r76852", "tree": {"sha": "3850dbb336a34d41f22a4d5c00512ef7204ac372", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3850dbb336a34d41f22a4d5c00512ef7204ac372"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e44c1ef05495c25b59a2c2779e843c80c23b606", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e44c1ef05495c25b59a2c2779e843c80c23b606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e44c1ef05495c25b59a2c2779e843c80c23b606", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e44c1ef05495c25b59a2c2779e843c80c23b606/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f470c378ac3e1ee9261034709851f4c6ef068fef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f470c378ac3e1ee9261034709851f4c6ef068fef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f470c378ac3e1ee9261034709851f4c6ef068fef"}], "stats": {"total": 833, "additions": 370, "deletions": 463}, "files": [{"sha": "25fdc65cd000e678362d5324b9ea5ed65486392f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e44c1ef05495c25b59a2c2779e843c80c23b606/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e44c1ef05495c25b59a2c2779e843c80c23b606/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e44c1ef05495c25b59a2c2779e843c80c23b606", "patch": "@@ -1,3 +1,44 @@\n+2004-01-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR optimization/13424\n+\t* expr.c (store_constructor): Revert 2003-12-03 change.\n+\n+\t* emit-rtl.c (change_address): Check also if MEM_ATTRS is set as\n+\texpected before returning early.  Avoid sharing RTL if they\n+\tneed to be changed.\n+\n+\t* config/i386/i386.c (ix86_expand_movstr): Rework rep_mov and strmov\n+\thandling so that memory attributes are preserved.  Don't call\n+\tix86_set_move_mem_attrs.\n+\t(ix86_set_move_mem_attrs_1, ix86_set_move_mem_attrs): Removed.\n+\t(ix86_expand_clrstr): Rename src argument to\n+\tdst.  Rework rep_stos and strset handling so that memory attributes\n+\tare preserved.\n+\t(ix86_expand_strlen): Pass src argument to\n+\tix86_expand_strlensi_unroll_1.  Rework strlenqi_1 handling so that\n+\tmemory attributes are preserved.\n+\t(ix86_expand_strlensi_unroll_1): Add src argument.  Use\n+\tchange_address instead of gen_rtx_MEM.\n+\t* config/i386/i386.md (strmov, strmov_singleop, rep_mov): New\n+\texpanders.\n+\t(strmovdi_rex64, strmovsi, strmovsi_rex64, strmovhi, strmovhi_rex64,\n+\tstrmovqi, strmovqi_rex64): Remove.\n+\t(rep_mov*, strmov*): Prefix insn names with *.\n+\t(strset, strset_singleop, rep_stos): New expanders.\n+\t(strsetdi_rex64, strsetsi, strsetsi_rex64, strsethi, strsethi_rex64,\n+\tstrsetqi, strsetqi_rex64): Remove.\n+\t(rep_stos*, strset*): Prefix insn names with *.\n+\t(rep_stosqi_rex64): Likewise.  Fix mode of dirflag reg from DImode\n+\tto SImode.\n+\t(cmpstrsi): Rework cmpstrqi_1 handling so that memory attributes\n+\tare preserved.\n+\t(cmpstrqi_nz_1, cmpstrqi_nz_rex_1, cmpstrqi_1, cmpstrqi_rex_1):\n+\tPrefix insn names with *.\n+\t(cmpstrqi_nz_1, cmpstrqi_1): New expanders.\n+\t(strlenqi_1, strlenqi_rex_1): Prefix insn names with *.\n+\t(strlenqi_1): New expander.\n+\t* config/i386/i386.h (ix86_set_move_mem_attrs): Remove prototype.\n+\n 2004-01-29  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* Makefile.in (cfghooks.o): Add TIMEVAR_H and toplev.h dependency."}, {"sha": "24d7d6a0292b991b49f9f1f6af693fa2d9e18a59", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e44c1ef05495c25b59a2c2779e843c80c23b606/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e44c1ef05495c25b59a2c2779e843c80c23b606/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=4e44c1ef05495c25b59a2c2779e843c80c23b606", "patch": "@@ -178,7 +178,6 @@ extern int ix86_secondary_memory_needed (enum reg_class, enum reg_class,\n \t\t\t\t\t enum machine_mode, int);\n extern enum reg_class ix86_preferred_reload_class (rtx, enum reg_class);\n extern int ix86_memory_move_cost (enum machine_mode, enum reg_class, int);\n-extern void ix86_set_move_mem_attrs (rtx, rtx, rtx, rtx, rtx);\n extern void emit_i387_cw_initialization (rtx, rtx);\n extern bool ix86_fp_jump_nontrivial_p (enum rtx_code);\n extern void x86_order_regs_for_local_alloc (void);"}, {"sha": "9e6f9b3d2f4704baf965bddfc9fb8d6ca9765d1f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 162, "deletions": 152, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e44c1ef05495c25b59a2c2779e843c80c23b606/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e44c1ef05495c25b59a2c2779e843c80c23b606/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4e44c1ef05495c25b59a2c2779e843c80c23b606", "patch": "@@ -813,12 +813,11 @@ static void ix86_emit_save_regs (void);\n static void ix86_emit_save_regs_using_mov (rtx, HOST_WIDE_INT);\n static void ix86_emit_restore_regs_using_mov (rtx, HOST_WIDE_INT, int);\n static void ix86_output_function_epilogue (FILE *, HOST_WIDE_INT);\n-static void ix86_set_move_mem_attrs_1 (rtx, rtx, rtx, rtx, rtx);\n static void ix86_sched_reorder_ppro (rtx *, rtx *);\n static HOST_WIDE_INT ix86_GOT_alias_set (void);\n static void ix86_adjust_counter (rtx, HOST_WIDE_INT);\n static rtx ix86_expand_aligntest (rtx, int);\n-static void ix86_expand_strlensi_unroll_1 (rtx, rtx);\n+static void ix86_expand_strlensi_unroll_1 (rtx, rtx, rtx);\n static int ix86_issue_rate (void);\n static int ix86_adjust_cost (rtx, rtx, rtx, int);\n static void ix86_sched_init (FILE *, int, int);\n@@ -11020,11 +11019,10 @@ ix86_zero_extend_to_Pmode (rtx exp)\n int\n ix86_expand_movstr (rtx dst, rtx src, rtx count_exp, rtx align_exp)\n {\n-  rtx srcreg, destreg, countreg;\n+  rtx srcreg, destreg, countreg, srcexp, destexp;\n   enum machine_mode counter_mode;\n   HOST_WIDE_INT align = 0;\n   unsigned HOST_WIDE_INT count = 0;\n-  rtx insns;\n \n   if (GET_CODE (align_exp) == CONST_INT)\n     align = INTVAL (align_exp);\n@@ -11053,28 +11051,27 @@ ix86_expand_movstr (rtx dst, rtx src, rtx count_exp, rtx align_exp)\n   else\n     counter_mode = DImode;\n \n-  start_sequence ();\n-\n   if (counter_mode != SImode && counter_mode != DImode)\n     abort ();\n \n   destreg = copy_to_mode_reg (Pmode, XEXP (dst, 0));\n+  if (destreg != XEXP (dst, 0))\n+    dst = replace_equiv_address_nv (dst, destreg);\n   srcreg = copy_to_mode_reg (Pmode, XEXP (src, 0));\n-\n-  emit_insn (gen_cld ());\n+  if (srcreg != XEXP (src, 0))\n+    src = replace_equiv_address_nv (src, srcreg);\n \n   /* When optimizing for size emit simple rep ; movsb instruction for\n      counts not divisible by 4.  */\n \n   if ((!optimize || optimize_size) && (count == 0 || (count & 0x03)))\n     {\n+      emit_insn (gen_cld ());\n       countreg = ix86_zero_extend_to_Pmode (count_exp);\n-      if (TARGET_64BIT)\n-\temit_insn (gen_rep_movqi_rex64 (destreg, srcreg, countreg,\n-\t\t\t\t        destreg, srcreg, countreg));\n-      else\n-\temit_insn (gen_rep_movqi (destreg, srcreg, countreg,\n-\t\t\t\t  destreg, srcreg, countreg));\n+      destexp = gen_rtx_PLUS (Pmode, destreg, countreg);\n+      srcexp = gen_rtx_PLUS (Pmode, srcreg, countreg);\n+      emit_insn (gen_rep_mov (destreg, dst, srcreg, src, countreg,\n+\t\t\t      destexp, srcexp));\n     }\n \n   /* For constant aligned (or small unaligned) copies use rep movsl\n@@ -11086,32 +11083,53 @@ ix86_expand_movstr (rtx dst, rtx src, rtx count_exp, rtx align_exp)\n \t       || (!TARGET_PENTIUMPRO && !TARGET_64BIT && align >= 4)\n \t       || optimize_size || count < (unsigned int) 64))\n     {\n+      unsigned HOST_WIDE_INT offset = 0;\n       int size = TARGET_64BIT && !optimize_size ? 8 : 4;\n+      rtx srcmem, dstmem;\n+\n+      emit_insn (gen_cld ());\n       if (count & ~(size - 1))\n \t{\n \t  countreg = copy_to_mode_reg (counter_mode,\n \t\t\t\t       GEN_INT ((count >> (size == 4 ? 2 : 3))\n \t\t\t\t\t\t& (TARGET_64BIT ? -1 : 0x3fffffff)));\n \t  countreg = ix86_zero_extend_to_Pmode (countreg);\n-\t  if (size == 4)\n-\t    {\n-\t      if (TARGET_64BIT)\n-\t\temit_insn (gen_rep_movsi_rex64 (destreg, srcreg, countreg,\n-\t\t\t\t\t        destreg, srcreg, countreg));\n-\t      else\n-\t\temit_insn (gen_rep_movsi (destreg, srcreg, countreg,\n-\t\t\t\t\t  destreg, srcreg, countreg));\n-\t    }\n-\t  else\n-\t    emit_insn (gen_rep_movdi_rex64 (destreg, srcreg, countreg,\n-\t\t\t\t\t    destreg, srcreg, countreg));\n+\t  \n+\t  destexp = gen_rtx_ASHIFT (Pmode, countreg,\n+\t\t\t\t    GEN_INT (size == 4 ? 2 : 3));\n+\t  srcexp = gen_rtx_PLUS (Pmode, destexp, srcreg);\n+\t  destexp = gen_rtx_PLUS (Pmode, destexp, destreg);\n+\n+\t  emit_insn (gen_rep_mov (destreg, dst, srcreg, src,\n+\t\t\t\t  countreg, destexp, srcexp));\n+\t  offset = count & ~(size - 1);\n \t}\n       if (size == 8 && (count & 0x04))\n-\temit_insn (gen_strmovsi (destreg, srcreg));\n+\t{\n+\t  srcmem = adjust_automodify_address_nv (src, SImode, srcreg,\n+\t\t\t\t\t\t offset);\n+\t  dstmem = adjust_automodify_address_nv (dst, SImode, destreg,\n+\t\t\t\t\t\t offset);\n+\t  emit_insn (gen_strmov (destreg, dstmem, srcreg, srcmem));\n+\t  offset += 4;\n+\t}\n       if (count & 0x02)\n-\temit_insn (gen_strmovhi (destreg, srcreg));\n+\t{\n+\t  srcmem = adjust_automodify_address_nv (src, HImode, srcreg,\n+\t\t\t\t\t\t offset);\n+\t  dstmem = adjust_automodify_address_nv (dst, HImode, destreg,\n+\t\t\t\t\t\t offset);\n+\t  emit_insn (gen_strmov (destreg, dstmem, srcreg, srcmem));\n+\t  offset += 2;\n+\t}\n       if (count & 0x01)\n-\temit_insn (gen_strmovqi (destreg, srcreg));\n+\t{\n+\t  srcmem = adjust_automodify_address_nv (src, QImode, srcreg,\n+\t\t\t\t\t\t offset);\n+\t  dstmem = adjust_automodify_address_nv (dst, QImode, destreg,\n+\t\t\t\t\t\t offset);\n+\t  emit_insn (gen_strmov (destreg, dstmem, srcreg, srcmem));\n+\t}\n     }\n   /* The generic code based on the glibc implementation:\n      - align destination to 4 bytes (8 byte alignment is used for PentiumPro\n@@ -11122,9 +11140,13 @@ ix86_expand_movstr (rtx dst, rtx src, rtx count_exp, rtx align_exp)\n     {\n       rtx countreg2;\n       rtx label = NULL;\n+      rtx srcmem, dstmem;\n       int desired_alignment = (TARGET_PENTIUMPRO\n \t\t\t       && (count == 0 || count >= (unsigned int) 260)\n \t\t\t       ? 8 : UNITS_PER_WORD);\n+      /* Get rid of MEM_OFFSETs, they won't be accurate.  */\n+      dst = change_address (dst, BLKmode, destreg);\n+      src = change_address (src, BLKmode, srcreg);\n \n       /* In case we don't know anything about the alignment, default to\n          library version, since it is usually equally fast and result in\n@@ -11134,10 +11156,7 @@ ix86_expand_movstr (rtx dst, rtx src, rtx count_exp, rtx align_exp)\n \t will not be important.  */\n       if (!TARGET_INLINE_ALL_STRINGOPS\n \t  && (align < UNITS_PER_WORD || !TARGET_REP_MOVL_OPTIMAL))\n-\t{\n-\t  end_sequence ();\n-\t  return 0;\n-\t}\n+\treturn 0;\n \n       if (TARGET_SINGLE_STRINGOP)\n \temit_insn (gen_cld ());\n@@ -11167,23 +11186,29 @@ ix86_expand_movstr (rtx dst, rtx src, rtx count_exp, rtx align_exp)\n       if (align <= 1)\n \t{\n \t  rtx label = ix86_expand_aligntest (destreg, 1);\n-\t  emit_insn (gen_strmovqi (destreg, srcreg));\n+\t  srcmem = change_address (src, QImode, srcreg);\n+\t  dstmem = change_address (dst, QImode, destreg);\n+\t  emit_insn (gen_strmov (destreg, dstmem, srcreg, srcmem));\n \t  ix86_adjust_counter (countreg, 1);\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n \t}\n       if (align <= 2)\n \t{\n \t  rtx label = ix86_expand_aligntest (destreg, 2);\n-\t  emit_insn (gen_strmovhi (destreg, srcreg));\n+\t  srcmem = change_address (src, HImode, srcreg);\n+\t  dstmem = change_address (dst, HImode, destreg);\n+\t  emit_insn (gen_strmov (destreg, dstmem, srcreg, srcmem));\n \t  ix86_adjust_counter (countreg, 2);\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n \t}\n       if (align <= 4 && desired_alignment > 4)\n \t{\n \t  rtx label = ix86_expand_aligntest (destreg, 4);\n-\t  emit_insn (gen_strmovsi (destreg, srcreg));\n+\t  srcmem = change_address (src, SImode, srcreg);\n+\t  dstmem = change_address (dst, SImode, destreg);\n+\t  emit_insn (gen_strmov (destreg, dstmem, srcreg, srcmem));\n \t  ix86_adjust_counter (countreg, 4);\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n@@ -11201,64 +11226,79 @@ ix86_expand_movstr (rtx dst, rtx src, rtx count_exp, rtx align_exp)\n \t{\n \t  emit_insn (gen_lshrdi3 (countreg2, ix86_zero_extend_to_Pmode (countreg),\n \t\t\t\t  GEN_INT (3)));\n-\t  emit_insn (gen_rep_movdi_rex64 (destreg, srcreg, countreg2,\n-\t\t\t\t\t  destreg, srcreg, countreg2));\n+\t  destexp = gen_rtx_ASHIFT (Pmode, countreg2, GEN_INT (3));\n \t}\n       else\n \t{\n-\t  emit_insn (gen_lshrsi3 (countreg2, countreg, GEN_INT (2)));\n-\t  emit_insn (gen_rep_movsi (destreg, srcreg, countreg2,\n-\t\t\t\t    destreg, srcreg, countreg2));\n+\t  emit_insn (gen_lshrsi3 (countreg2, countreg, const2_rtx));\n+\t  destexp = gen_rtx_ASHIFT (Pmode, countreg2, const2_rtx);\n \t}\n+      srcexp = gen_rtx_PLUS (Pmode, destexp, srcreg);\n+      destexp = gen_rtx_PLUS (Pmode, destexp, destreg);\n+      emit_insn (gen_rep_mov (destreg, dst, srcreg, src,\n+\t\t\t      countreg2, destexp, srcexp));\n \n       if (label)\n \t{\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n \t}\n       if (TARGET_64BIT && align > 4 && count != 0 && (count & 4))\n-\temit_insn (gen_strmovsi (destreg, srcreg));\n+\t{\n+\t  srcmem = change_address (src, SImode, srcreg);\n+\t  dstmem = change_address (dst, SImode, destreg);\n+\t  emit_insn (gen_strmov (destreg, dstmem, srcreg, srcmem));\n+\t}\n       if ((align <= 4 || count == 0) && TARGET_64BIT)\n \t{\n \t  rtx label = ix86_expand_aligntest (countreg, 4);\n-\t  emit_insn (gen_strmovsi (destreg, srcreg));\n+\t  srcmem = change_address (src, SImode, srcreg);\n+\t  dstmem = change_address (dst, SImode, destreg);\n+\t  emit_insn (gen_strmov (destreg, dstmem, srcreg, srcmem));\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n \t}\n       if (align > 2 && count != 0 && (count & 2))\n-\temit_insn (gen_strmovhi (destreg, srcreg));\n+\t{\n+\t  srcmem = change_address (src, HImode, srcreg);\n+\t  dstmem = change_address (dst, HImode, destreg);\n+\t  emit_insn (gen_strmov (destreg, dstmem, srcreg, srcmem));\n+\t}\n       if (align <= 2 || count == 0)\n \t{\n \t  rtx label = ix86_expand_aligntest (countreg, 2);\n-\t  emit_insn (gen_strmovhi (destreg, srcreg));\n+\t  srcmem = change_address (src, HImode, srcreg);\n+\t  dstmem = change_address (dst, HImode, destreg);\n+\t  emit_insn (gen_strmov (destreg, dstmem, srcreg, srcmem));\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n \t}\n       if (align > 1 && count != 0 && (count & 1))\n-\temit_insn (gen_strmovqi (destreg, srcreg));\n+\t{\n+\t  srcmem = change_address (src, QImode, srcreg);\n+\t  dstmem = change_address (dst, QImode, destreg);\n+\t  emit_insn (gen_strmov (destreg, dstmem, srcreg, srcmem));\n+\t}\n       if (align <= 1 || count == 0)\n \t{\n \t  rtx label = ix86_expand_aligntest (countreg, 1);\n-\t  emit_insn (gen_strmovqi (destreg, srcreg));\n+\t  srcmem = change_address (src, QImode, srcreg);\n+\t  dstmem = change_address (dst, QImode, destreg);\n+\t  emit_insn (gen_strmov (destreg, dstmem, srcreg, srcmem));\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n \t}\n     }\n \n-  insns = get_insns ();\n-  end_sequence ();\n-\n-  ix86_set_move_mem_attrs (insns, dst, src, destreg, srcreg);\n-  emit_insn (insns);\n   return 1;\n }\n \n /* Expand string clear operation (bzero).  Use i386 string operations when\n    profitable.  expand_movstr contains similar code.  */\n int\n-ix86_expand_clrstr (rtx src, rtx count_exp, rtx align_exp)\n+ix86_expand_clrstr (rtx dst, rtx count_exp, rtx align_exp)\n {\n-  rtx destreg, zeroreg, countreg;\n+  rtx destreg, zeroreg, countreg, destexp;\n   enum machine_mode counter_mode;\n   HOST_WIDE_INT align = 0;\n   unsigned HOST_WIDE_INT count = 0;\n@@ -11289,7 +11329,9 @@ ix86_expand_clrstr (rtx src, rtx count_exp, rtx align_exp)\n   else\n     counter_mode = DImode;\n \n-  destreg = copy_to_mode_reg (Pmode, XEXP (src, 0));\n+  destreg = copy_to_mode_reg (Pmode, XEXP (dst, 0));\n+  if (destreg != XEXP (dst, 0))\n+    dst = replace_equiv_address_nv (dst, destreg);\n \n   emit_insn (gen_cld ());\n \n@@ -11300,48 +11342,52 @@ ix86_expand_clrstr (rtx src, rtx count_exp, rtx align_exp)\n     {\n       countreg = ix86_zero_extend_to_Pmode (count_exp);\n       zeroreg = copy_to_mode_reg (QImode, const0_rtx);\n-      if (TARGET_64BIT)\n-\temit_insn (gen_rep_stosqi_rex64 (destreg, countreg, zeroreg,\n-\t\t\t\t         destreg, countreg));\n-      else\n-\temit_insn (gen_rep_stosqi (destreg, countreg, zeroreg,\n-\t\t\t\t   destreg, countreg));\n+      destexp = gen_rtx_PLUS (Pmode, destreg, countreg);\n+      emit_insn (gen_rep_stos (destreg, countreg, dst, zeroreg, destexp));\n     }\n   else if (count != 0\n \t   && (align >= 8\n \t       || (!TARGET_PENTIUMPRO && !TARGET_64BIT && align >= 4)\n \t       || optimize_size || count < (unsigned int) 64))\n     {\n       int size = TARGET_64BIT && !optimize_size ? 8 : 4;\n+      unsigned HOST_WIDE_INT offset = 0;\n+\n       zeroreg = copy_to_mode_reg (size == 4 ? SImode : DImode, const0_rtx);\n       if (count & ~(size - 1))\n \t{\n \t  countreg = copy_to_mode_reg (counter_mode,\n \t\t\t\t       GEN_INT ((count >> (size == 4 ? 2 : 3))\n \t\t\t\t\t\t& (TARGET_64BIT ? -1 : 0x3fffffff)));\n \t  countreg = ix86_zero_extend_to_Pmode (countreg);\n-\t  if (size == 4)\n-\t    {\n-\t      if (TARGET_64BIT)\n-\t\temit_insn (gen_rep_stossi_rex64 (destreg, countreg, zeroreg,\n-\t\t\t\t\t         destreg, countreg));\n-\t      else\n-\t\temit_insn (gen_rep_stossi (destreg, countreg, zeroreg,\n-\t\t\t\t\t   destreg, countreg));\n-\t    }\n-\t  else\n-\t    emit_insn (gen_rep_stosdi_rex64 (destreg, countreg, zeroreg,\n-\t\t\t\t\t     destreg, countreg));\n+\t  destexp = gen_rtx_ASHIFT (Pmode, countreg, GEN_INT (size == 4 ? 2 : 3));\n+\t  destexp = gen_rtx_PLUS (Pmode, destexp, destreg);\n+\t  emit_insn (gen_rep_stos (destreg, countreg, dst, zeroreg, destexp));\n+\t  offset = count & ~(size - 1);\n \t}\n       if (size == 8 && (count & 0x04))\n-\temit_insn (gen_strsetsi (destreg,\n+\t{\n+\t  rtx mem = adjust_automodify_address_nv (dst, SImode, destreg,\n+\t\t\t\t\t\t  offset);\n+\t  emit_insn (gen_strset (destreg, mem,\n \t\t\t\t gen_rtx_SUBREG (SImode, zeroreg, 0)));\n+\t  offset += 4;\n+\t}\n       if (count & 0x02)\n-\temit_insn (gen_strsethi (destreg,\n+\t{\n+\t  rtx mem = adjust_automodify_address_nv (dst, HImode, destreg,\n+\t\t\t\t\t\t  offset);\n+\t  emit_insn (gen_strset (destreg, mem,\n \t\t\t\t gen_rtx_SUBREG (HImode, zeroreg, 0)));\n+\t  offset += 2;\n+\t}\n       if (count & 0x01)\n-\temit_insn (gen_strsetqi (destreg,\n+\t{\n+\t  rtx mem = adjust_automodify_address_nv (dst, QImode, destreg,\n+\t\t\t\t\t\t  offset);\n+\t  emit_insn (gen_strset (destreg, mem,\n \t\t\t\t gen_rtx_SUBREG (QImode, zeroreg, 0)));\n+\t}\n     }\n   else\n     {\n@@ -11368,6 +11414,8 @@ ix86_expand_clrstr (rtx src, rtx count_exp, rtx align_exp)\n       countreg2 = gen_reg_rtx (Pmode);\n       countreg = copy_to_mode_reg (counter_mode, count_exp);\n       zeroreg = copy_to_mode_reg (Pmode, const0_rtx);\n+      /* Get rid of MEM_OFFSET, it won't be accurate.  */\n+      dst = change_address (dst, BLKmode, destreg);\n \n       if (count == 0 && align < desired_alignment)\n \t{\n@@ -11378,27 +11426,28 @@ ix86_expand_clrstr (rtx src, rtx count_exp, rtx align_exp)\n       if (align <= 1)\n \t{\n \t  rtx label = ix86_expand_aligntest (destreg, 1);\n-\t  emit_insn (gen_strsetqi (destreg,\n-\t\t\t\t   gen_rtx_SUBREG (QImode, zeroreg, 0)));\n+\t  emit_insn (gen_strset (destreg, dst,\n+\t\t\t\t gen_rtx_SUBREG (QImode, zeroreg, 0)));\n \t  ix86_adjust_counter (countreg, 1);\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n \t}\n       if (align <= 2)\n \t{\n \t  rtx label = ix86_expand_aligntest (destreg, 2);\n-\t  emit_insn (gen_strsethi (destreg,\n-\t\t\t\t   gen_rtx_SUBREG (HImode, zeroreg, 0)));\n+\t  emit_insn (gen_strset (destreg, dst,\n+\t\t\t\t gen_rtx_SUBREG (HImode, zeroreg, 0)));\n \t  ix86_adjust_counter (countreg, 2);\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n \t}\n       if (align <= 4 && desired_alignment > 4)\n \t{\n \t  rtx label = ix86_expand_aligntest (destreg, 4);\n-\t  emit_insn (gen_strsetsi (destreg, (TARGET_64BIT\n-\t\t\t\t\t     ? gen_rtx_SUBREG (SImode, zeroreg, 0)\n-\t\t\t\t\t     : zeroreg)));\n+\t  emit_insn (gen_strset (destreg, dst,\n+\t\t\t\t (TARGET_64BIT\n+\t\t\t\t  ? gen_rtx_SUBREG (SImode, zeroreg, 0)\n+\t\t\t\t  : zeroreg)));\n \t  ix86_adjust_counter (countreg, 4);\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n@@ -11417,57 +11466,59 @@ ix86_expand_clrstr (rtx src, rtx count_exp, rtx align_exp)\n \t{\n \t  emit_insn (gen_lshrdi3 (countreg2, ix86_zero_extend_to_Pmode (countreg),\n \t\t\t\t  GEN_INT (3)));\n-\t  emit_insn (gen_rep_stosdi_rex64 (destreg, countreg2, zeroreg,\n-\t\t\t\t\t   destreg, countreg2));\n+\t  destexp = gen_rtx_ASHIFT (Pmode, countreg2, GEN_INT (3));\n \t}\n       else\n \t{\n-\t  emit_insn (gen_lshrsi3 (countreg2, countreg, GEN_INT (2)));\n-\t  emit_insn (gen_rep_stossi (destreg, countreg2, zeroreg,\n-\t\t\t\t     destreg, countreg2));\n+\t  emit_insn (gen_lshrsi3 (countreg2, countreg, const2_rtx));\n+\t  destexp = gen_rtx_ASHIFT (Pmode, countreg2, const2_rtx);\n \t}\n+      destexp = gen_rtx_PLUS (Pmode, destexp, destreg);\n+      emit_insn (gen_rep_stos (destreg, countreg2, dst, zeroreg, destexp));\n+\n       if (label)\n \t{\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n \t}\n \n       if (TARGET_64BIT && align > 4 && count != 0 && (count & 4))\n-\temit_insn (gen_strsetsi (destreg,\n-\t\t\t\t gen_rtx_SUBREG (SImode, zeroreg, 0)));\n+\temit_insn (gen_strset (destreg, dst,\n+\t\t\t       gen_rtx_SUBREG (SImode, zeroreg, 0)));\n       if (TARGET_64BIT && (align <= 4 || count == 0))\n \t{\n \t  rtx label = ix86_expand_aligntest (countreg, 4);\n-\t  emit_insn (gen_strsetsi (destreg,\n-\t\t\t\t   gen_rtx_SUBREG (SImode, zeroreg, 0)));\n+\t  emit_insn (gen_strset (destreg, dst,\n+\t\t\t\t gen_rtx_SUBREG (SImode, zeroreg, 0)));\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n \t}\n       if (align > 2 && count != 0 && (count & 2))\n-\temit_insn (gen_strsethi (destreg,\n-\t\t\t\t gen_rtx_SUBREG (HImode, zeroreg, 0)));\n+\temit_insn (gen_strset (destreg, dst,\n+\t\t\t       gen_rtx_SUBREG (HImode, zeroreg, 0)));\n       if (align <= 2 || count == 0)\n \t{\n \t  rtx label = ix86_expand_aligntest (countreg, 2);\n-\t  emit_insn (gen_strsethi (destreg,\n-\t\t\t\t   gen_rtx_SUBREG (HImode, zeroreg, 0)));\n+\t  emit_insn (gen_strset (destreg, dst,\n+\t\t\t\t gen_rtx_SUBREG (HImode, zeroreg, 0)));\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n \t}\n       if (align > 1 && count != 0 && (count & 1))\n-\temit_insn (gen_strsetqi (destreg,\n-\t\t\t\t gen_rtx_SUBREG (QImode, zeroreg, 0)));\n+\temit_insn (gen_strset (destreg, dst,\n+\t\t\t       gen_rtx_SUBREG (QImode, zeroreg, 0)));\n       if (align <= 1 || count == 0)\n \t{\n \t  rtx label = ix86_expand_aligntest (countreg, 1);\n-\t  emit_insn (gen_strsetqi (destreg,\n-\t\t\t\t   gen_rtx_SUBREG (QImode, zeroreg, 0)));\n+\t  emit_insn (gen_strset (destreg, dst,\n+\t\t\t\t gen_rtx_SUBREG (QImode, zeroreg, 0)));\n \t  emit_label (label);\n \t  LABEL_NUSES (label) = 1;\n \t}\n     }\n   return 1;\n }\n+\n /* Expand strlen.  */\n int\n ix86_expand_strlen (rtx out, rtx src, rtx eoschar, rtx align)\n@@ -11499,7 +11550,7 @@ ix86_expand_strlen (rtx out, rtx src, rtx eoschar, rtx align)\n \n       emit_move_insn (out, addr);\n \n-      ix86_expand_strlensi_unroll_1 (out, align);\n+      ix86_expand_strlensi_unroll_1 (out, src, align);\n \n       /* strlensi_unroll_1 returns the address of the zero at the end of\n          the string, like memchr(), so compute the length by subtracting\n@@ -11511,6 +11562,7 @@ ix86_expand_strlen (rtx out, rtx src, rtx eoschar, rtx align)\n     }\n   else\n     {\n+      rtx unspec;\n       scratch2 = gen_reg_rtx (Pmode);\n       scratch3 = gen_reg_rtx (Pmode);\n       scratch4 = force_reg (Pmode, constm1_rtx);\n@@ -11519,17 +11571,19 @@ ix86_expand_strlen (rtx out, rtx src, rtx eoschar, rtx align)\n       eoschar = force_reg (QImode, eoschar);\n \n       emit_insn (gen_cld ());\n+      src = replace_equiv_address_nv (src, scratch3);\n+\n+      /* If .md starts supporting :P, this can be done in .md.  */\n+      unspec = gen_rtx_UNSPEC (Pmode, gen_rtvec (4, src, eoschar, align,\n+\t\t\t\t\t\t scratch4), UNSPEC_SCAS);\n+      emit_insn (gen_strlenqi_1 (scratch1, scratch3, unspec));\n       if (TARGET_64BIT)\n \t{\n-\t  emit_insn (gen_strlenqi_rex_1 (scratch1, scratch3, eoschar,\n-\t\t\t\t\t align, scratch4, scratch3));\n \t  emit_insn (gen_one_cmpldi2 (scratch2, scratch1));\n \t  emit_insn (gen_adddi3 (out, scratch2, constm1_rtx));\n \t}\n       else\n \t{\n-\t  emit_insn (gen_strlenqi_1 (scratch1, scratch3, eoschar,\n-\t\t\t\t     align, scratch4, scratch3));\n \t  emit_insn (gen_one_cmplsi2 (scratch2, scratch1));\n \t  emit_insn (gen_addsi3 (out, scratch2, constm1_rtx));\n \t}\n@@ -11549,7 +11603,7 @@ ix86_expand_strlen (rtx out, rtx src, rtx eoschar, rtx align)\n    some address computing at the end.  These things are done in i386.md.  */\n \n static void\n-ix86_expand_strlensi_unroll_1 (rtx out, rtx align_rtx)\n+ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n {\n   int align;\n   rtx tmp;\n@@ -11602,7 +11656,7 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx align_rtx)\n \t\t\t\t   Pmode, 1, align_4_label);\n         }\n \n-      mem = gen_rtx_MEM (QImode, out);\n+      mem = change_address (src, QImode, out);\n \n       /* Now compare the bytes.  */\n \n@@ -11646,7 +11700,7 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx align_rtx)\n      speed up.  */\n   emit_label (align_4_label);\n \n-  mem = gen_rtx_MEM (SImode, out);\n+  mem = change_address (src, SImode, out);\n   emit_move_insn (scratch, mem);\n   if (TARGET_64BIT)\n     emit_insn (gen_adddi3 (out, out, GEN_INT (4)));\n@@ -12510,50 +12564,6 @@ ia32_multipass_dfa_lookahead (void)\n    return 0;\n }\n \n-\f\n-/* Walk through INSNS and look for MEM references whose address is DSTREG or\n-   SRCREG and set the memory attribute to those of DSTREF and SRCREF, as\n-   appropriate.  */\n-\n-void\n-ix86_set_move_mem_attrs (rtx insns, rtx dstref, rtx srcref, rtx dstreg,\n-\t\t\t rtx srcreg)\n-{\n-  rtx insn;\n-\n-  for (insn = insns; insn != 0 ; insn = NEXT_INSN (insn))\n-    if (INSN_P (insn))\n-      ix86_set_move_mem_attrs_1 (PATTERN (insn), dstref, srcref,\n-\t\t\t\t dstreg, srcreg);\n-}\n-\n-/* Subroutine of above to actually do the updating by recursively walking\n-   the rtx.  */\n-\n-static void\n-ix86_set_move_mem_attrs_1 (rtx x, rtx dstref, rtx srcref, rtx dstreg,\n-\t\t\t   rtx srcreg)\n-{\n-  enum rtx_code code = GET_CODE (x);\n-  const char *format_ptr = GET_RTX_FORMAT (code);\n-  int i, j;\n-\n-  if (code == MEM && XEXP (x, 0) == dstreg)\n-    MEM_COPY_ATTRIBUTES (x, dstref);\n-  else if (code == MEM && XEXP (x, 0) == srcreg)\n-    MEM_COPY_ATTRIBUTES (x, srcref);\n-\n-  for (i = 0; i < GET_RTX_LENGTH (code); i++, format_ptr++)\n-    {\n-      if (*format_ptr == 'e')\n-\tix86_set_move_mem_attrs_1 (XEXP (x, i), dstref, srcref,\n-\t\t\t\t   dstreg, srcreg);\n-      else if (*format_ptr == 'E')\n-\tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n-\t  ix86_set_move_mem_attrs_1 (XVECEXP (x, i, j), dstref, srcref,\n-\t\t\t\t     dstreg, srcreg);\n-    }\n-}\n \f\n /* Compute the alignment given to a constant that is being placed in memory.\n    EXP is the constant and ALIGN is the alignment that the object would"}, {"sha": "aa2e6230cf9e37e998908c67850d535edbbe2a30", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 149, "deletions": 299, "changes": 448, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e44c1ef05495c25b59a2c2779e843c80c23b606/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e44c1ef05495c25b59a2c2779e843c80c23b606/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4e44c1ef05495c25b59a2c2779e843c80c23b606", "patch": "@@ -15357,170 +15357,45 @@\n ;; Most CPUs don't like single string operations\n ;; Handle this case here to simplify previous expander.\n \n-(define_expand \"strmovdi_rex64\"\n-  [(set (match_dup 2)\n-  \t(mem:DI (match_operand:DI 1 \"register_operand\" \"\")))\n-   (set (mem:DI (match_operand:DI 0 \"register_operand\" \"\"))\n-        (match_dup 2))\n-   (parallel [(set (match_dup 0) (plus:DI (match_dup 0) (const_int 8)))\n+(define_expand \"strmov\"\n+  [(set (match_dup 4) (match_operand 3 \"memory_operand\" \"\"))\n+   (set (match_operand 1 \"memory_operand\" \"\") (match_dup 4))\n+   (parallel [(set (match_operand 0 \"register_operand\" \"\") (match_dup 5))\n \t      (clobber (reg:CC 17))])\n-   (parallel [(set (match_dup 1) (plus:DI (match_dup 1) (const_int 8)))\n-\t      (clobber (reg:CC 17))])]\n-  \"TARGET_64BIT\"\n-{\n-  if (TARGET_SINGLE_STRINGOP || optimize_size)\n-    {\n-      emit_insn (gen_strmovdi_rex_1 (operands[0], operands[1], operands[0],\n-\t\t\t\t     operands[1]));\n-      DONE;\n-    }\n-  else \n-    operands[2] = gen_reg_rtx (DImode);\n-})\n-\n-\n-(define_expand \"strmovsi\"\n-  [(set (match_dup 2)\n-  \t(mem:SI (match_operand:SI 1 \"register_operand\" \"\")))\n-   (set (mem:SI (match_operand:SI 0 \"register_operand\" \"\"))\n-        (match_dup 2))\n-   (parallel [(set (match_dup 0) (plus:SI (match_dup 0) (const_int 4)))\n-\t      (clobber (reg:CC 17))])\n-   (parallel [(set (match_dup 1) (plus:SI (match_dup 1) (const_int 4)))\n+   (parallel [(set (match_operand 2 \"register_operand\" \"\") (match_dup 6))\n \t      (clobber (reg:CC 17))])]\n   \"\"\n {\n-  if (TARGET_64BIT)\n-    {\n-      emit_insn (gen_strmovsi_rex64 (operands[0], operands[1]));\n-      DONE;\n-    }\n-  if (TARGET_SINGLE_STRINGOP || optimize_size)\n-    {\n-      emit_insn (gen_strmovsi_1 (operands[0], operands[1], operands[0],\n-\t\t\t\toperands[1]));\n-      DONE;\n-    }\n-  else \n-    operands[2] = gen_reg_rtx (SImode);\n-})\n+  rtx adjust = GEN_INT (GET_MODE_SIZE (GET_MODE (operands[1])));\n \n-(define_expand \"strmovsi_rex64\"\n-  [(set (match_dup 2)\n-  \t(mem:SI (match_operand:DI 1 \"register_operand\" \"\")))\n-   (set (mem:SI (match_operand:DI 0 \"register_operand\" \"\"))\n-        (match_dup 2))\n-   (parallel [(set (match_dup 0) (plus:DI (match_dup 0) (const_int 4)))\n-\t      (clobber (reg:CC 17))])\n-   (parallel [(set (match_dup 1) (plus:DI (match_dup 1) (const_int 4)))\n-\t      (clobber (reg:CC 17))])]\n-  \"TARGET_64BIT\"\n-{\n-  if (TARGET_SINGLE_STRINGOP || optimize_size)\n-    {\n-      emit_insn (gen_strmovsi_rex_1 (operands[0], operands[1], operands[0],\n-\t\t\t\t     operands[1]));\n-      DONE;\n-    }\n-  else \n-    operands[2] = gen_reg_rtx (SImode);\n-})\n+  /* If .md ever supports :P for Pmode, these can be directly\n+     in the pattern above.  */\n+  operands[5] = gen_rtx_PLUS (Pmode, operands[0], adjust);\n+  operands[6] = gen_rtx_PLUS (Pmode, operands[2], adjust);\n \n-(define_expand \"strmovhi\"\n-  [(set (match_dup 2)\n-  \t(mem:HI (match_operand:SI 1 \"register_operand\" \"\")))\n-   (set (mem:HI (match_operand:SI 0 \"register_operand\" \"\"))\n-        (match_dup 2))\n-   (parallel [(set (match_dup 0) (plus:SI (match_dup 0) (const_int 2)))\n-\t      (clobber (reg:CC 17))])\n-   (parallel [(set (match_dup 1) (plus:SI (match_dup 1) (const_int 2)))\n-\t      (clobber (reg:CC 17))])]\n-  \"\"\n-{\n-  if (TARGET_64BIT)\n-    {\n-      emit_insn (gen_strmovhi_rex64 (operands[0], operands[1]));\n-      DONE;\n-    }\n   if (TARGET_SINGLE_STRINGOP || optimize_size)\n     {\n-      emit_insn (gen_strmovhi_1 (operands[0], operands[1], operands[0],\n-\t\t\t\toperands[1]));\n+      emit_insn (gen_strmov_singleop (operands[0], operands[1],\n+\t\t\t\t      operands[2], operands[3],\n+\t\t\t\t      operands[5], operands[6]));\n       DONE;\n     }\n-  else \n-    operands[2] = gen_reg_rtx (HImode);\n-})\n-\n-(define_expand \"strmovhi_rex64\"\n-  [(set (match_dup 2)\n-  \t(mem:HI (match_operand:DI 1 \"register_operand\" \"\")))\n-   (set (mem:HI (match_operand:DI 0 \"register_operand\" \"\"))\n-        (match_dup 2))\n-   (parallel [(set (match_dup 0) (plus:DI (match_dup 0) (const_int 2)))\n-\t      (clobber (reg:CC 17))])\n-   (parallel [(set (match_dup 1) (plus:DI (match_dup 1) (const_int 2)))\n-\t      (clobber (reg:CC 17))])]\n-  \"TARGET_64BIT\"\n-{\n-  if (TARGET_SINGLE_STRINGOP || optimize_size)\n-    {\n-      emit_insn (gen_strmovhi_rex_1 (operands[0], operands[1], operands[0],\n-\t\t\t\t     operands[1]));\n-      DONE;\n-    }\n-  else \n-    operands[2] = gen_reg_rtx (HImode);\n-})\n \n-(define_expand \"strmovqi\"\n-  [(set (match_dup 2)\n-  \t(mem:QI (match_operand:SI 1 \"register_operand\" \"\")))\n-   (set (mem:QI (match_operand:SI 0 \"register_operand\" \"\"))\n-        (match_dup 2))\n-   (parallel [(set (match_dup 0) (plus:SI (match_dup 0) (const_int 1)))\n-\t      (clobber (reg:CC 17))])\n-   (parallel [(set (match_dup 1) (plus:SI (match_dup 1) (const_int 1)))\n-\t      (clobber (reg:CC 17))])]\n-  \"\"\n-{\n-  if (TARGET_64BIT)\n-    {\n-      emit_insn (gen_strmovqi_rex64 (operands[0], operands[1]));\n-      DONE;\n-    }\n-  if (TARGET_SINGLE_STRINGOP || optimize_size)\n-    {\n-      emit_insn (gen_strmovqi_1 (operands[0], operands[1], operands[0],\n-\t\t\t\toperands[1]));\n-      DONE;\n-    }\n-  else \n-    operands[2] = gen_reg_rtx (QImode);\n+  operands[4] = gen_reg_rtx (GET_MODE (operands[1]));\n })\n \n-(define_expand \"strmovqi_rex64\"\n-  [(set (match_dup 2)\n-  \t(mem:QI (match_operand:DI 1 \"register_operand\" \"\")))\n-   (set (mem:QI (match_operand:DI 0 \"register_operand\" \"\"))\n-        (match_dup 2))\n-   (parallel [(set (match_dup 0) (plus:DI (match_dup 0) (const_int 1)))\n-\t      (clobber (reg:CC 17))])\n-   (parallel [(set (match_dup 1) (plus:DI (match_dup 1) (const_int 1)))\n-\t      (clobber (reg:CC 17))])]\n-  \"TARGET_64BIT\"\n-{\n-  if (TARGET_SINGLE_STRINGOP || optimize_size)\n-    {\n-      emit_insn (gen_strmovqi_rex_1 (operands[0], operands[1], operands[0],\n-\t\t\t\t     operands[1]));\n-      DONE;\n-    }\n-  else \n-    operands[2] = gen_reg_rtx (QImode);\n-})\n+(define_expand \"strmov_singleop\"\n+  [(parallel [(set (match_operand 1 \"memory_operand\" \"\")\n+\t\t   (match_operand 3 \"memory_operand\" \"\"))\n+\t      (set (match_operand 0 \"register_operand\" \"\")\n+\t\t   (match_operand 4 \"\" \"\"))\n+\t      (set (match_operand 2 \"register_operand\" \"\")\n+\t\t   (match_operand 5 \"\" \"\"))\n+\t      (use (reg:SI 19))])]\n+  \"TARGET_SINGLE_STRINGOP || optimize_size\"\n+  \"\")\n \n-(define_insn \"strmovdi_rex_1\"\n+(define_insn \"*strmovdi_rex_1\"\n   [(set (mem:DI (match_operand:DI 2 \"register_operand\" \"0\"))\n \t(mem:DI (match_operand:DI 3 \"register_operand\" \"1\")))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n@@ -15536,7 +15411,7 @@\n    (set_attr \"mode\" \"DI\")\n    (set_attr \"memory\" \"both\")])\n \n-(define_insn \"strmovsi_1\"\n+(define_insn \"*strmovsi_1\"\n   [(set (mem:SI (match_operand:SI 2 \"register_operand\" \"0\"))\n \t(mem:SI (match_operand:SI 3 \"register_operand\" \"1\")))\n    (set (match_operand:SI 0 \"register_operand\" \"=D\")\n@@ -15552,7 +15427,7 @@\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"memory\" \"both\")])\n \n-(define_insn \"strmovsi_rex_1\"\n+(define_insn \"*strmovsi_rex_1\"\n   [(set (mem:SI (match_operand:DI 2 \"register_operand\" \"0\"))\n \t(mem:SI (match_operand:DI 3 \"register_operand\" \"1\")))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n@@ -15568,7 +15443,7 @@\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"memory\" \"both\")])\n \n-(define_insn \"strmovhi_1\"\n+(define_insn \"*strmovhi_1\"\n   [(set (mem:HI (match_operand:SI 2 \"register_operand\" \"0\"))\n \t(mem:HI (match_operand:SI 3 \"register_operand\" \"1\")))\n    (set (match_operand:SI 0 \"register_operand\" \"=D\")\n@@ -15584,7 +15459,7 @@\n    (set_attr \"memory\" \"both\")\n    (set_attr \"mode\" \"HI\")])\n \n-(define_insn \"strmovhi_rex_1\"\n+(define_insn \"*strmovhi_rex_1\"\n   [(set (mem:HI (match_operand:DI 2 \"register_operand\" \"0\"))\n \t(mem:HI (match_operand:DI 3 \"register_operand\" \"1\")))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n@@ -15600,7 +15475,7 @@\n    (set_attr \"memory\" \"both\")\n    (set_attr \"mode\" \"HI\")])\n \n-(define_insn \"strmovqi_1\"\n+(define_insn \"*strmovqi_1\"\n   [(set (mem:QI (match_operand:SI 2 \"register_operand\" \"0\"))\n \t(mem:QI (match_operand:SI 3 \"register_operand\" \"1\")))\n    (set (match_operand:SI 0 \"register_operand\" \"=D\")\n@@ -15616,7 +15491,7 @@\n    (set_attr \"memory\" \"both\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"strmovqi_rex_1\"\n+(define_insn \"*strmovqi_rex_1\"\n   [(set (mem:QI (match_operand:DI 2 \"register_operand\" \"0\"))\n \t(mem:QI (match_operand:DI 3 \"register_operand\" \"1\")))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n@@ -15632,7 +15507,20 @@\n    (set_attr \"memory\" \"both\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"rep_movdi_rex64\"\n+(define_expand \"rep_mov\"\n+  [(parallel [(set (match_operand 4 \"register_operand\" \"\") (const_int 0))\n+\t      (set (match_operand 0 \"register_operand\" \"\")\n+\t\t   (match_operand 5 \"\" \"\"))\n+\t      (set (match_operand 2 \"register_operand\" \"\")\n+\t\t   (match_operand 6 \"\" \"\"))\n+\t      (set (match_operand 1 \"memory_operand\" \"\")\n+\t\t   (match_operand 3 \"memory_operand\" \"\"))\n+\t      (use (match_dup 4))\n+\t      (use (reg:SI 19))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*rep_movdi_rex64\"\n   [(set (match_operand:DI 2 \"register_operand\" \"=c\") (const_int 0))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\") \n         (plus:DI (ashift:DI (match_operand:DI 5 \"register_operand\" \"2\")\n@@ -15652,7 +15540,7 @@\n    (set_attr \"memory\" \"both\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"rep_movsi\"\n+(define_insn \"*rep_movsi\"\n   [(set (match_operand:SI 2 \"register_operand\" \"=c\") (const_int 0))\n    (set (match_operand:SI 0 \"register_operand\" \"=D\") \n         (plus:SI (ashift:SI (match_operand:SI 5 \"register_operand\" \"2\")\n@@ -15672,7 +15560,7 @@\n    (set_attr \"memory\" \"both\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"rep_movsi_rex64\"\n+(define_insn \"*rep_movsi_rex64\"\n   [(set (match_operand:DI 2 \"register_operand\" \"=c\") (const_int 0))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\") \n         (plus:DI (ashift:DI (match_operand:DI 5 \"register_operand\" \"2\")\n@@ -15692,7 +15580,7 @@\n    (set_attr \"memory\" \"both\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"rep_movqi\"\n+(define_insn \"*rep_movqi\"\n   [(set (match_operand:SI 2 \"register_operand\" \"=c\") (const_int 0))\n    (set (match_operand:SI 0 \"register_operand\" \"=D\") \n         (plus:SI (match_operand:SI 3 \"register_operand\" \"0\")\n@@ -15710,7 +15598,7 @@\n    (set_attr \"memory\" \"both\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"rep_movqi_rex64\"\n+(define_insn \"*rep_movqi_rex64\"\n   [(set (match_operand:DI 2 \"register_operand\" \"=c\") (const_int 0))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\") \n         (plus:DI (match_operand:DI 3 \"register_operand\" \"0\")\n@@ -15755,120 +15643,40 @@\n ;; Most CPUs don't like single string operations\n ;; Handle this case here to simplify previous expander.\n \n-(define_expand \"strsetdi_rex64\"\n-  [(set (mem:DI (match_operand:DI 0 \"register_operand\" \"\"))\n-\t(match_operand:DI 1 \"register_operand\" \"\"))\n-   (parallel [(set (match_dup 0) (plus:DI (match_dup 0) (const_int 8)))\n-\t      (clobber (reg:CC 17))])]\n-  \"TARGET_64BIT\"\n-{\n-  if (TARGET_SINGLE_STRINGOP || optimize_size)\n-    {\n-      emit_insn (gen_strsetdi_rex_1 (operands[0], operands[0], operands[1]));\n-      DONE;\n-    }\n-})\n-\n-(define_expand \"strsetsi\"\n-  [(set (mem:SI (match_operand:SI 0 \"register_operand\" \"\"))\n-\t(match_operand:SI 1 \"register_operand\" \"\"))\n-   (parallel [(set (match_dup 0) (plus:SI (match_dup 0) (const_int 4)))\n-\t      (clobber (reg:CC 17))])]\n-  \"\"\n-{\n-  if (TARGET_64BIT)\n-    {\n-      emit_insn (gen_strsetsi_rex64 (operands[0], operands[1]));\n-      DONE;\n-    }\n-  else if (TARGET_SINGLE_STRINGOP || optimize_size)\n-    {\n-      emit_insn (gen_strsetsi_1 (operands[0], operands[0], operands[1]));\n-      DONE;\n-    }\n-})\n-\n-(define_expand \"strsetsi_rex64\"\n-  [(set (mem:SI (match_operand:DI 0 \"register_operand\" \"\"))\n-\t(match_operand:SI 1 \"register_operand\" \"\"))\n-   (parallel [(set (match_dup 0) (plus:DI (match_dup 0) (const_int 4)))\n-\t      (clobber (reg:CC 17))])]\n-  \"TARGET_64BIT\"\n-{\n-  if (TARGET_SINGLE_STRINGOP || optimize_size)\n-    {\n-      emit_insn (gen_strsetsi_rex_1 (operands[0], operands[0], operands[1]));\n-      DONE;\n-    }\n-})\n-\n-(define_expand \"strsethi\"\n-  [(set (mem:HI (match_operand:SI 0 \"register_operand\" \"\"))\n-\t(match_operand:HI 1 \"register_operand\" \"\"))\n-   (parallel [(set (match_dup 0) (plus:SI (match_dup 0) (const_int 2)))\n+(define_expand \"strset\"\n+  [(set (match_operand 1 \"memory_operand\" \"\")\n+\t(match_operand 2 \"register_operand\" \"\"))\n+   (parallel [(set (match_operand 0 \"register_operand\" \"\")\n+\t\t   (match_dup 3))\n \t      (clobber (reg:CC 17))])]\n   \"\"\n {\n-  if (TARGET_64BIT)\n-    {\n-      emit_insn (gen_strsethi_rex64 (operands[0], operands[1]));\n-      DONE;\n-    }\n-  else if (TARGET_SINGLE_STRINGOP || optimize_size)\n-    {\n-      emit_insn (gen_strsethi_1 (operands[0], operands[0], operands[1]));\n-      DONE;\n-    }\n-})\n+  if (GET_MODE (operands[1]) != GET_MODE (operands[2]))\n+    operands[1] = adjust_address_nv (operands[1], GET_MODE (operands[2]), 0);\n \n-(define_expand \"strsethi_rex64\"\n-  [(set (mem:HI (match_operand:DI 0 \"register_operand\" \"\"))\n-\t(match_operand:HI 1 \"register_operand\" \"\"))\n-   (parallel [(set (match_dup 0) (plus:DI (match_dup 0) (const_int 2)))\n-\t      (clobber (reg:CC 17))])]\n-  \"TARGET_64BIT\"\n-{\n+  /* If .md ever supports :P for Pmode, this can be directly\n+     in the pattern above.  */\n+  operands[3] = gen_rtx_PLUS (Pmode, operands[0],\n+\t\t\t      GEN_INT (GET_MODE_SIZE (GET_MODE\n+\t\t\t\t\t\t      (operands[2]))));\n   if (TARGET_SINGLE_STRINGOP || optimize_size)\n     {\n-      emit_insn (gen_strsethi_rex_1 (operands[0], operands[0], operands[1]));\n-      DONE;\n-    }\n-})\n-\n-(define_expand \"strsetqi\"\n-  [(set (mem:QI (match_operand:SI 0 \"register_operand\" \"\"))\n-\t(match_operand:QI 1 \"register_operand\" \"\"))\n-   (parallel [(set (match_dup 0) (plus:SI (match_dup 0) (const_int 1)))\n-\t      (clobber (reg:CC 17))])]\n-  \"\"\n-{\n-  if (TARGET_64BIT)\n-    {\n-      emit_insn (gen_strsetqi_rex64 (operands[0], operands[1]));\n-      DONE;\n-    }\n-  else if (TARGET_SINGLE_STRINGOP || optimize_size)\n-    {\n-      emit_insn (gen_strsetqi_1 (operands[0], operands[0], operands[1]));\n+      emit_insn (gen_strset_singleop (operands[0], operands[1], operands[2],\n+\t\t\t\t      operands[3]));\n       DONE;\n     }\n })\n \n-(define_expand \"strsetqi_rex64\"\n-  [(set (mem:QI (match_operand:DI 0 \"register_operand\" \"\"))\n-\t(match_operand:QI 1 \"register_operand\" \"\"))\n-   (parallel [(set (match_dup 0) (plus:DI (match_dup 0) (const_int 1)))\n-\t      (clobber (reg:CC 17))])]\n-  \"TARGET_64BIT\"\n-{\n-  if (TARGET_SINGLE_STRINGOP || optimize_size)\n-    {\n-      emit_insn (gen_strsetqi_rex_1 (operands[0], operands[0], operands[1]));\n-      DONE;\n-    }\n-})\n+(define_expand \"strset_singleop\"\n+  [(parallel [(set (match_operand 1 \"memory_operand\" \"\")\n+\t\t   (match_operand 2 \"register_operand\" \"\"))\n+\t      (set (match_operand 0 \"register_operand\" \"\")\n+\t\t   (match_operand 3 \"\" \"\"))\n+\t      (use (reg:SI 19))])]\n+  \"TARGET_SINGLE_STRINGOP || optimize_size\"\n+  \"\")\n \n-(define_insn \"strsetdi_rex_1\"\n+(define_insn \"*strsetdi_rex_1\"\n   [(set (mem:SI (match_operand:DI 1 \"register_operand\" \"0\"))\n \t(match_operand:SI 2 \"register_operand\" \"a\"))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n@@ -15881,7 +15689,7 @@\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"strsetsi_1\"\n+(define_insn \"*strsetsi_1\"\n   [(set (mem:SI (match_operand:SI 1 \"register_operand\" \"0\"))\n \t(match_operand:SI 2 \"register_operand\" \"a\"))\n    (set (match_operand:SI 0 \"register_operand\" \"=D\")\n@@ -15894,7 +15702,7 @@\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"strsetsi_rex_1\"\n+(define_insn \"*strsetsi_rex_1\"\n   [(set (mem:SI (match_operand:DI 1 \"register_operand\" \"0\"))\n \t(match_operand:SI 2 \"register_operand\" \"a\"))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n@@ -15907,7 +15715,7 @@\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"strsethi_1\"\n+(define_insn \"*strsethi_1\"\n   [(set (mem:HI (match_operand:SI 1 \"register_operand\" \"0\"))\n \t(match_operand:HI 2 \"register_operand\" \"a\"))\n    (set (match_operand:SI 0 \"register_operand\" \"=D\")\n@@ -15920,7 +15728,7 @@\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"HI\")])\n \n-(define_insn \"strsethi_rex_1\"\n+(define_insn \"*strsethi_rex_1\"\n   [(set (mem:HI (match_operand:DI 1 \"register_operand\" \"0\"))\n \t(match_operand:HI 2 \"register_operand\" \"a\"))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n@@ -15933,7 +15741,7 @@\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"HI\")])\n \n-(define_insn \"strsetqi_1\"\n+(define_insn \"*strsetqi_1\"\n   [(set (mem:QI (match_operand:SI 1 \"register_operand\" \"0\"))\n \t(match_operand:QI 2 \"register_operand\" \"a\"))\n    (set (match_operand:SI 0 \"register_operand\" \"=D\")\n@@ -15946,7 +15754,7 @@\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"strsetqi_rex_1\"\n+(define_insn \"*strsetqi_rex_1\"\n   [(set (mem:QI (match_operand:DI 1 \"register_operand\" \"0\"))\n \t(match_operand:QI 2 \"register_operand\" \"a\"))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\")\n@@ -15959,7 +15767,18 @@\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"rep_stosdi_rex64\"\n+(define_expand \"rep_stos\"\n+  [(parallel [(set (match_operand 1 \"register_operand\" \"\") (const_int 0))\n+\t      (set (match_operand 0 \"register_operand\" \"\")\n+\t\t   (match_operand 4 \"\" \"\"))\n+\t      (set (match_operand 2 \"memory_operand\" \"\") (const_int 0))\n+\t      (use (match_operand 3 \"register_operand\" \"\"))\n+\t      (use (match_dup 1))\n+\t      (use (reg:SI 19))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*rep_stosdi_rex64\"\n   [(set (match_operand:DI 1 \"register_operand\" \"=c\") (const_int 0))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\") \n         (plus:DI (ashift:DI (match_operand:DI 4 \"register_operand\" \"1\")\n@@ -15977,7 +15796,7 @@\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"rep_stossi\"\n+(define_insn \"*rep_stossi\"\n   [(set (match_operand:SI 1 \"register_operand\" \"=c\") (const_int 0))\n    (set (match_operand:SI 0 \"register_operand\" \"=D\") \n         (plus:SI (ashift:SI (match_operand:SI 4 \"register_operand\" \"1\")\n@@ -15995,7 +15814,7 @@\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"rep_stossi_rex64\"\n+(define_insn \"*rep_stossi_rex64\"\n   [(set (match_operand:DI 1 \"register_operand\" \"=c\") (const_int 0))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\") \n         (plus:DI (ashift:DI (match_operand:DI 4 \"register_operand\" \"1\")\n@@ -16013,7 +15832,7 @@\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"rep_stosqi\"\n+(define_insn \"*rep_stosqi\"\n   [(set (match_operand:SI 1 \"register_operand\" \"=c\") (const_int 0))\n    (set (match_operand:SI 0 \"register_operand\" \"=D\") \n         (plus:SI (match_operand:SI 3 \"register_operand\" \"0\")\n@@ -16030,7 +15849,7 @@\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"rep_stosqi_rex64\"\n+(define_insn \"*rep_stosqi_rex64\"\n   [(set (match_operand:DI 1 \"register_operand\" \"=c\") (const_int 0))\n    (set (match_operand:DI 0 \"register_operand\" \"=D\") \n         (plus:DI (match_operand:DI 3 \"register_operand\" \"0\")\n@@ -16039,7 +15858,7 @@\n \t(const_int 0))\n    (use (match_operand:QI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))\n-   (use (reg:DI 19))]\n+   (use (reg:SI 19))]\n   \"TARGET_64BIT\"\n   \"{rep\\;stosb|rep stosb}\"\n   [(set_attr \"type\" \"str\")\n@@ -16067,7 +15886,11 @@\n \n   addr1 = copy_to_mode_reg (Pmode, XEXP (operands[1], 0));\n   addr2 = copy_to_mode_reg (Pmode, XEXP (operands[2], 0));\n-  \n+  if (addr1 != XEXP (operands[1], 0))\n+    operands[1] = replace_equiv_address_nv (operands[1], addr1);\n+  if (addr2 != XEXP (operands[2], 0))\n+    operands[2] = replace_equiv_address_nv (operands[2], addr2);\n+\n   count = operands[3];\n   countreg = ix86_zero_extend_to_Pmode (count);\n \n@@ -16084,27 +15907,17 @@\n \t  emit_move_insn (operands[0], const0_rtx);\n \t  DONE;\n \t}\n-      if (TARGET_64BIT)\n-\temit_insn (gen_cmpstrqi_nz_rex_1 (addr1, addr2, countreg, align,\n-\t\t\t\t\t  addr1, addr2, countreg));\n-      else\n-\temit_insn (gen_cmpstrqi_nz_1 (addr1, addr2, countreg, align,\n-\t\t\t\t      addr1, addr2, countreg));\n+      emit_insn (gen_cmpstrqi_nz_1 (addr1, addr2, countreg, align,\n+\t\t\t\t    operands[1], operands[2]));\n     }\n   else\n     {\n       if (TARGET_64BIT)\n-\t{\n-\t  emit_insn (gen_cmpdi_1_rex64 (countreg, countreg));\n-\t  emit_insn (gen_cmpstrqi_rex_1 (addr1, addr2, countreg, align,\n-\t\t\t\t\t addr1, addr2, countreg));\n-\t}\n+\temit_insn (gen_cmpdi_1_rex64 (countreg, countreg));\n       else\n-\t{\n-\t  emit_insn (gen_cmpsi_1 (countreg, countreg));\n-\t  emit_insn (gen_cmpstrqi_1 (addr1, addr2, countreg, align,\n-\t\t\t\t     addr1, addr2, countreg));\n-\t}\n+\temit_insn (gen_cmpsi_1 (countreg, countreg));\n+      emit_insn (gen_cmpstrqi_1 (addr1, addr2, countreg, align,\n+\t\t\t\t operands[1], operands[2]));\n     }\n \n   outlow = gen_lowpart (QImode, out);\n@@ -16135,7 +15948,20 @@\n ;; memcmp recognizers.  The `cmpsb' opcode does nothing if the count is\n ;; zero.  Emit extra code to make sure that a zero-length compare is EQ.\n \n-(define_insn \"cmpstrqi_nz_1\"\n+(define_expand \"cmpstrqi_nz_1\"\n+  [(parallel [(set (reg:CC 17)\n+\t\t   (compare:CC (match_operand 4 \"memory_operand\" \"\")\n+\t\t\t       (match_operand 5 \"memory_operand\" \"\")))\n+\t      (use (match_operand 2 \"register_operand\" \"\"))\n+\t      (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n+\t      (use (reg:SI 19))\n+\t      (clobber (match_operand 0 \"register_operand\" \"\"))\n+\t      (clobber (match_operand 1 \"register_operand\" \"\"))\n+\t      (clobber (match_dup 2))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*cmpstrqi_nz_1\"\n   [(set (reg:CC 17)\n \t(compare:CC (mem:BLK (match_operand:SI 4 \"register_operand\" \"0\"))\n \t\t    (mem:BLK (match_operand:SI 5 \"register_operand\" \"1\"))))\n@@ -16151,7 +15977,7 @@\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"prefix_rep\" \"1\")])\n \n-(define_insn \"cmpstrqi_nz_rex_1\"\n+(define_insn \"*cmpstrqi_nz_rex_1\"\n   [(set (reg:CC 17)\n \t(compare:CC (mem:BLK (match_operand:DI 4 \"register_operand\" \"0\"))\n \t\t    (mem:BLK (match_operand:DI 5 \"register_operand\" \"1\"))))\n@@ -16169,7 +15995,23 @@\n \n ;; The same, but the count is not known to not be zero.\n \n-(define_insn \"cmpstrqi_1\"\n+(define_expand \"cmpstrqi_1\"\n+  [(parallel [(set (reg:CC 17)\n+\t\t(if_then_else:CC (ne (match_operand 2 \"register_operand\" \"\")\n+\t\t\t\t     (const_int 0))\n+\t\t  (compare:CC (match_operand 4 \"memory_operand\" \"\")\n+\t\t\t      (match_operand 5 \"memory_operand\" \"\"))\n+\t\t  (const_int 0)))\n+\t      (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n+\t      (use (reg:CC 17))\n+\t      (use (reg:SI 19))\n+\t      (clobber (match_operand 0 \"register_operand\" \"\"))\n+\t      (clobber (match_operand 1 \"register_operand\" \"\"))\n+\t      (clobber (match_dup 2))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*cmpstrqi_1\"\n   [(set (reg:CC 17)\n \t(if_then_else:CC (ne (match_operand:SI 6 \"register_operand\" \"2\")\n \t\t\t     (const_int 0))\n@@ -16188,7 +16030,7 @@\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"prefix_rep\" \"1\")])\n \n-(define_insn \"cmpstrqi_rex_1\"\n+(define_insn \"*cmpstrqi_rex_1\"\n   [(set (reg:CC 17)\n \t(if_then_else:CC (ne (match_operand:DI 6 \"register_operand\" \"2\")\n \t\t\t     (const_int 0))\n@@ -16233,7 +16075,15 @@\n    FAIL;\n })\n \n-(define_insn \"strlenqi_1\"\n+(define_expand \"strlenqi_1\"\n+  [(parallel [(set (match_operand 0 \"register_operand\" \"\") (match_operand 2 \"\" \"\"))\n+\t      (use (reg:SI 19))\n+\t      (clobber (match_operand 1 \"register_operand\" \"\"))\n+\t      (clobber (reg:CC 17))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*strlenqi_1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&c\")\n \t(unspec:SI [(mem:BLK (match_operand:SI 5 \"register_operand\" \"1\"))\n \t\t    (match_operand:QI 2 \"register_operand\" \"a\")\n@@ -16248,7 +16098,7 @@\n    (set_attr \"mode\" \"QI\")\n    (set_attr \"prefix_rep\" \"1\")])\n \n-(define_insn \"strlenqi_rex_1\"\n+(define_insn \"*strlenqi_rex_1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&c\")\n \t(unspec:DI [(mem:BLK (match_operand:DI 5 \"register_operand\" \"1\"))\n \t\t    (match_operand:QI 2 \"register_operand\" \"a\")"}, {"sha": "b1429da2e5790206d641a8fe9f24e1f22ad611e9", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e44c1ef05495c25b59a2c2779e843c80c23b606/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e44c1ef05495c25b59a2c2779e843c80c23b606/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=4e44c1ef05495c25b59a2c2779e843c80c23b606", "patch": "@@ -1869,19 +1869,29 @@ change_address_1 (rtx memref, enum machine_mode mode, rtx addr, int validate)\n rtx\n change_address (rtx memref, enum machine_mode mode, rtx addr)\n {\n-  rtx new = change_address_1 (memref, mode, addr, 1);\n+  rtx new = change_address_1 (memref, mode, addr, 1), size;\n   enum machine_mode mmode = GET_MODE (new);\n+  unsigned int align;\n+\n+  size = mmode == BLKmode ? 0 : GEN_INT (GET_MODE_SIZE (mmode));\n+  align = mmode == BLKmode ? BITS_PER_UNIT : GET_MODE_ALIGNMENT (mmode);\n \n   /* If there are no changes, just return the original memory reference.  */\n   if (new == memref)\n-    return new;\n+    {\n+      if (MEM_ATTRS (memref) == 0\n+\t  || (MEM_EXPR (memref) == NULL\n+\t      && MEM_OFFSET (memref) == NULL\n+\t      && MEM_SIZE (memref) == size\n+\t      && MEM_ALIGN (memref) == align))\n+\treturn new;\n+\n+      new = gen_rtx_MEM (mmode, addr);\n+      MEM_COPY_ATTRIBUTES (new, memref);\n+    }\n \n   MEM_ATTRS (new)\n-    = get_mem_attrs (MEM_ALIAS_SET (memref), 0, 0,\n-\t\t     mmode == BLKmode ? 0 : GEN_INT (GET_MODE_SIZE (mmode)),\n-\t\t     (mmode == BLKmode ? BITS_PER_UNIT\n-\t\t      : GET_MODE_ALIGNMENT (mmode)),\n-\t\t     mmode);\n+    = get_mem_attrs (MEM_ALIAS_SET (memref), 0, 0, size, align, mmode);\n \n   return new;\n }"}, {"sha": "8bf073252e2dfc6c0a1f691d5ed1d5a30c074472", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e44c1ef05495c25b59a2c2779e843c80c23b606/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e44c1ef05495c25b59a2c2779e843c80c23b606/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4e44c1ef05495c25b59a2c2779e843c80c23b606", "patch": "@@ -4619,10 +4619,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t\t\t       highest_pow2_factor (offset));\n \t    }\n \n-\t  /* If the constructor has been cleared, setting RTX_UNCHANGING_P\n-\t     on the MEM might lead to scheduling the clearing after the\n-\t     store.  */\n-\t  if (TREE_READONLY (field) && !cleared)\n+\t  if (TREE_READONLY (field))\n \t    {\n \t      if (GET_CODE (to_rtx) == MEM)\n \t\tto_rtx = copy_rtx (to_rtx);"}]}