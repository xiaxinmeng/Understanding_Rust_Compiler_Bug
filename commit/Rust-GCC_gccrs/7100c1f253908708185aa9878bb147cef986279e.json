{"sha": "7100c1f253908708185aa9878bb147cef986279e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEwMGMxZjI1MzkwODcwODE4NWFhOTg3OGJiMTQ3Y2VmOTg2Mjc5ZQ==", "commit": {"author": {"name": "Eric Gallager", "email": "egall@gwmail.gwu.edu", "date": "2016-09-07T15:05:56Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-09-07T15:05:56Z"}, "message": "i386.c: Add 'U' suffix to processor feature bits to avoid -Wnarrowing warning.\n\n\t* config/i386/i386.c: Add 'U' suffix to processor feature bits\n\tto avoid -Wnarrowing warning.\n\t* config/i386/x86-tune.def: Likewise for DEF_TUNE selector bitmasks.\n\t* opts.c: Likewise for SANITIZER_OPT bitmasks.\n\nFrom-SVN: r240027", "tree": {"sha": "7eab280eeb6cf9e7f2f0736dd7b69614e10deae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eab280eeb6cf9e7f2f0736dd7b69614e10deae3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7100c1f253908708185aa9878bb147cef986279e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7100c1f253908708185aa9878bb147cef986279e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7100c1f253908708185aa9878bb147cef986279e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7100c1f253908708185aa9878bb147cef986279e/comments", "author": {"login": "cooljeanius", "id": 1388660, "node_id": "MDQ6VXNlcjEzODg2NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/1388660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cooljeanius", "html_url": "https://github.com/cooljeanius", "followers_url": "https://api.github.com/users/cooljeanius/followers", "following_url": "https://api.github.com/users/cooljeanius/following{/other_user}", "gists_url": "https://api.github.com/users/cooljeanius/gists{/gist_id}", "starred_url": "https://api.github.com/users/cooljeanius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cooljeanius/subscriptions", "organizations_url": "https://api.github.com/users/cooljeanius/orgs", "repos_url": "https://api.github.com/users/cooljeanius/repos", "events_url": "https://api.github.com/users/cooljeanius/events{/privacy}", "received_events_url": "https://api.github.com/users/cooljeanius/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff0f3f1cb56ae7ee030fb9e66cdd583733a056b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff0f3f1cb56ae7ee030fb9e66cdd583733a056b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff0f3f1cb56ae7ee030fb9e66cdd583733a056b8"}], "stats": {"total": 77, "additions": 42, "deletions": 35}, "files": [{"sha": "752fac022d663e96f0cebfd1b06a3ed5655b2e70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7100c1f253908708185aa9878bb147cef986279e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7100c1f253908708185aa9878bb147cef986279e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7100c1f253908708185aa9878bb147cef986279e", "patch": "@@ -1,3 +1,10 @@\n+2016-09-07  Eric Gallager  <egall@gwmail.gwu.edu>\n+\n+\t* config/i386/i386.c: Add 'U' suffix to processor feature bits\n+\tto avoid -Wnarrowing warning.\n+\t* config/i386/x86-tune.def: Likewise for DEF_TUNE selector bitmasks.\n+\t* opts.c: Likewise for SANITIZER_OPT bitmasks.\n+\n 2016-09-07  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_legitimize_address):"}, {"sha": "1190dabd388f5ad75210f2186fafc72ffd052e72", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7100c1f253908708185aa9878bb147cef986279e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7100c1f253908708185aa9878bb147cef986279e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7100c1f253908708185aa9878bb147cef986279e", "patch": "@@ -2162,45 +2162,45 @@ const struct processor_costs *ix86_tune_cost = &pentium_cost;\n const struct processor_costs *ix86_cost = &pentium_cost;\n \n /* Processor feature/optimization bitmasks.  */\n-#define m_386 (1<<PROCESSOR_I386)\n-#define m_486 (1<<PROCESSOR_I486)\n-#define m_PENT (1<<PROCESSOR_PENTIUM)\n-#define m_LAKEMONT (1<<PROCESSOR_LAKEMONT)\n-#define m_PPRO (1<<PROCESSOR_PENTIUMPRO)\n-#define m_PENT4 (1<<PROCESSOR_PENTIUM4)\n-#define m_NOCONA (1<<PROCESSOR_NOCONA)\n+#define m_386 (1U<<PROCESSOR_I386)\n+#define m_486 (1U<<PROCESSOR_I486)\n+#define m_PENT (1U<<PROCESSOR_PENTIUM)\n+#define m_LAKEMONT (1U<<PROCESSOR_LAKEMONT)\n+#define m_PPRO (1U<<PROCESSOR_PENTIUMPRO)\n+#define m_PENT4 (1U<<PROCESSOR_PENTIUM4)\n+#define m_NOCONA (1U<<PROCESSOR_NOCONA)\n #define m_P4_NOCONA (m_PENT4 | m_NOCONA)\n-#define m_CORE2 (1<<PROCESSOR_CORE2)\n-#define m_NEHALEM (1<<PROCESSOR_NEHALEM)\n-#define m_SANDYBRIDGE (1<<PROCESSOR_SANDYBRIDGE)\n-#define m_HASWELL (1<<PROCESSOR_HASWELL)\n+#define m_CORE2 (1U<<PROCESSOR_CORE2)\n+#define m_NEHALEM (1U<<PROCESSOR_NEHALEM)\n+#define m_SANDYBRIDGE (1U<<PROCESSOR_SANDYBRIDGE)\n+#define m_HASWELL (1U<<PROCESSOR_HASWELL)\n #define m_CORE_ALL (m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE | m_HASWELL)\n-#define m_BONNELL (1<<PROCESSOR_BONNELL)\n-#define m_SILVERMONT (1<<PROCESSOR_SILVERMONT)\n-#define m_KNL (1<<PROCESSOR_KNL)\n-#define m_SKYLAKE_AVX512 (1<<PROCESSOR_SKYLAKE_AVX512)\n-#define m_INTEL (1<<PROCESSOR_INTEL)\n-\n-#define m_GEODE (1<<PROCESSOR_GEODE)\n-#define m_K6 (1<<PROCESSOR_K6)\n+#define m_BONNELL (1U<<PROCESSOR_BONNELL)\n+#define m_SILVERMONT (1U<<PROCESSOR_SILVERMONT)\n+#define m_KNL (1U<<PROCESSOR_KNL)\n+#define m_SKYLAKE_AVX512 (1U<<PROCESSOR_SKYLAKE_AVX512)\n+#define m_INTEL (1U<<PROCESSOR_INTEL)\n+\n+#define m_GEODE (1U<<PROCESSOR_GEODE)\n+#define m_K6 (1U<<PROCESSOR_K6)\n #define m_K6_GEODE (m_K6 | m_GEODE)\n-#define m_K8 (1<<PROCESSOR_K8)\n-#define m_ATHLON (1<<PROCESSOR_ATHLON)\n+#define m_K8 (1U<<PROCESSOR_K8)\n+#define m_ATHLON (1U<<PROCESSOR_ATHLON)\n #define m_ATHLON_K8 (m_K8 | m_ATHLON)\n-#define m_AMDFAM10 (1<<PROCESSOR_AMDFAM10)\n-#define m_BDVER1 (1<<PROCESSOR_BDVER1)\n-#define m_BDVER2 (1<<PROCESSOR_BDVER2)\n-#define m_BDVER3 (1<<PROCESSOR_BDVER3)\n-#define m_BDVER4 (1<<PROCESSOR_BDVER4)\n-#define m_ZNVER1 (1<<PROCESSOR_ZNVER1)\n-#define m_BTVER1 (1<<PROCESSOR_BTVER1)\n-#define m_BTVER2 (1<<PROCESSOR_BTVER2)\n+#define m_AMDFAM10 (1U<<PROCESSOR_AMDFAM10)\n+#define m_BDVER1 (1U<<PROCESSOR_BDVER1)\n+#define m_BDVER2 (1U<<PROCESSOR_BDVER2)\n+#define m_BDVER3 (1U<<PROCESSOR_BDVER3)\n+#define m_BDVER4 (1U<<PROCESSOR_BDVER4)\n+#define m_ZNVER1 (1U<<PROCESSOR_ZNVER1)\n+#define m_BTVER1 (1U<<PROCESSOR_BTVER1)\n+#define m_BTVER2 (1U<<PROCESSOR_BTVER2)\n #define m_BDVER\t(m_BDVER1 | m_BDVER2 | m_BDVER3 | m_BDVER4)\n #define m_BTVER (m_BTVER1 | m_BTVER2)\n #define m_AMD_MULTIPLE (m_ATHLON_K8 | m_AMDFAM10 | m_BDVER | m_BTVER \\\n \t\t\t| m_ZNVER1)\n \n-#define m_GENERIC (1<<PROCESSOR_GENERIC)\n+#define m_GENERIC (1U<<PROCESSOR_GENERIC)\n \n const char* ix86_tune_feature_names[X86_TUNE_LAST] = {\n #undef DEF_TUNE"}, {"sha": "8c7a14d9022401bf321ca23524723a60d246a0b4", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7100c1f253908708185aa9878bb147cef986279e/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7100c1f253908708185aa9878bb147cef986279e/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=7100c1f253908708185aa9878bb147cef986279e", "patch": "@@ -535,15 +535,15 @@ DEF_TUNE (X86_TUNE_AVOID_FALSE_DEP_FOR_BMI, \"avoid_false_dep_for_bmi\",\n    on simulation result. But after P4 was made, no performance benefit\n    was observed with branch hints.  It also increases the code size.\n    As a result, icc never generates branch hints.  */\n-DEF_TUNE (X86_TUNE_BRANCH_PREDICTION_HINTS, \"branch_prediction_hints\", 0)\n+DEF_TUNE (X86_TUNE_BRANCH_PREDICTION_HINTS, \"branch_prediction_hints\", 0U)\n \n /* X86_TUNE_QIMODE_MATH: Enable use of 8bit arithmetic.  */\n-DEF_TUNE (X86_TUNE_QIMODE_MATH, \"qimode_math\", ~0)\n+DEF_TUNE (X86_TUNE_QIMODE_MATH, \"qimode_math\", ~0U)\n \n /* X86_TUNE_PROMOTE_QI_REGS: This enables generic code that promotes all 8bit\n    arithmetic to 32bit via PROMOTE_MODE macro.  This code generation scheme\n    is usually used for RISC targets.  */\n-DEF_TUNE (X86_TUNE_PROMOTE_QI_REGS, \"promote_qi_regs\", 0)\n+DEF_TUNE (X86_TUNE_PROMOTE_QI_REGS, \"promote_qi_regs\", 0U)\n \n /* X86_TUNE_ADJUST_UNROLL: This enables adjusting the unroll factor based\n    on hardware capabilities. Bdver3 hardware has a loop buffer which makes"}, {"sha": "86b422a706f8c128b465c3ef49ad05d4a5771567", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7100c1f253908708185aa9878bb147cef986279e/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7100c1f253908708185aa9878bb147cef986279e/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=7100c1f253908708185aa9878bb147cef986279e", "patch": "@@ -1471,9 +1471,9 @@ const struct sanitizer_opts_s sanitizer_opts[] =\n   SANITIZER_OPT (returns-nonnull-attribute, SANITIZE_RETURNS_NONNULL_ATTRIBUTE),\n   SANITIZER_OPT (object-size, SANITIZE_OBJECT_SIZE),\n   SANITIZER_OPT (vptr, SANITIZE_VPTR),\n-  SANITIZER_OPT (all, ~0),\n+  SANITIZER_OPT (all, ~0U),\n #undef SANITIZER_OPT\n-  { NULL, 0, 0 }\n+  { NULL, 0U, 0UL }\n };\n \n /* Parse comma separated sanitizer suboptions from P for option SCODE,"}]}