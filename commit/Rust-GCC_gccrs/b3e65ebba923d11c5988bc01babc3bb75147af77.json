{"sha": "b3e65ebba923d11c5988bc01babc3bb75147af77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNlNjVlYmJhOTIzZDExYzU5ODhiYzAxYmFiYzNiYjc1MTQ3YWY3Nw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-04-11T21:18:40Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-04-11T21:18:40Z"}, "message": "fold-const.c (fold_binary_op_with_conditional_arg): Tweak calling convention to allow a NULL_TREE to be returned.\n\n\n\t* fold-const.c (fold_binary_op_with_conditional_arg):  Tweak\n\tcalling convention to allow a NULL_TREE to be returned.  Factor\n\tsanity checks from callers, return NULL_TREE when appropriate.\n\t(fold): Handle COMPOUND_EXPR operands of binary expressions\n\tbefore COND_EXPR operands.  Use reorder_operands_p(a,b) to check\n\twhether a op (b,c) can be rewritten as (b, a op c).  Simplify\n\tcalls to fold_binary_op_with_conditional_arg.\n\nFrom-SVN: r80609", "tree": {"sha": "2c08eedba3d2c19905334e4142402a18798acf01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c08eedba3d2c19905334e4142402a18798acf01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3e65ebba923d11c5988bc01babc3bb75147af77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3e65ebba923d11c5988bc01babc3bb75147af77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3e65ebba923d11c5988bc01babc3bb75147af77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3e65ebba923d11c5988bc01babc3bb75147af77/comments", "author": null, "committer": null, "parents": [{"sha": "19d33948f22884d8dbd4ac9cffbbb84768b2e498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d33948f22884d8dbd4ac9cffbbb84768b2e498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19d33948f22884d8dbd4ac9cffbbb84768b2e498"}], "stats": {"total": 75, "additions": 47, "deletions": 28}, "files": [{"sha": "a387b9a39577f0a9739a1330dd40a48464a81cf5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3e65ebba923d11c5988bc01babc3bb75147af77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3e65ebba923d11c5988bc01babc3bb75147af77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3e65ebba923d11c5988bc01babc3bb75147af77", "patch": "@@ -1,3 +1,13 @@\n+2004-04-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold_binary_op_with_conditional_arg):  Tweak\n+\tcalling convention to allow a NULL_TREE to be returned.  Factor\n+\tsanity checks from callers, return NULL_TREE when appropriate.\n+\t(fold): Handle COMPOUND_EXPR operands of binary expressions\n+\tbefore COND_EXPR operands.  Use reorder_operands_p(a,b) to check\n+\twhether a op (b,c) can be rewritten as (b, a op c).  Simplify\n+\tcalls to fold_binary_op_with_conditional_arg.\n+\n 2004-04-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* config/mips/iris5.h (current_section_flags):  Add"}, {"sha": "75ef65c1363f4ed1d62c9c65654df1a9c35776a2", "filename": "gcc/fold-const.c", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3e65ebba923d11c5988bc01babc3bb75147af77/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3e65ebba923d11c5988bc01babc3bb75147af77/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b3e65ebba923d11c5988bc01babc3bb75147af77", "patch": "@@ -4807,7 +4807,8 @@ count_cond (tree expr, int lim)\n    expression, and ARG to `a'.  If COND_FIRST_P is nonzero, then the\n    COND is the first argument to CODE; otherwise (as in the example\n    given here), it is the second argument.  TYPE is the type of the\n-   original expression.  */\n+   original expression.  Return NULL_TREE if no simplication is\n+   possible.  */\n \n static tree\n fold_binary_op_with_conditional_arg (enum tree_code code, tree type,\n@@ -4837,6 +4838,19 @@ fold_binary_op_with_conditional_arg (enum tree_code code, tree type,\n   tree rhs_type = type;\n   int save = 0;\n \n+  if (TREE_CODE (cond) != COND_EXPR\n+      && TREE_CODE_CLASS (code) == '<')\n+    return NULL_TREE;\n+\n+  if (TREE_CODE (arg) == COND_EXPR\n+      && count_cond (cond, 25) + count_cond (arg, 25) > 25)\n+    return NULL_TREE;\n+\n+  if (TREE_SIDE_EFFECTS (arg)\n+      && (lang_hooks.decls.global_bindings_p () != 0\n+\t  || CONTAINS_PLACEHOLDER_P (arg)))\n+    return NULL_TREE;\n+\n   if (cond_first_p)\n     {\n       true_rhs = false_rhs = &arg;\n@@ -5578,37 +5592,32 @@ fold (tree expr)\n   else if (TREE_CODE_CLASS (code) == '2'\n \t   || TREE_CODE_CLASS (code) == '<')\n     {\n+      if (TREE_CODE (arg0) == COMPOUND_EXPR)\n+\treturn build (COMPOUND_EXPR, type, TREE_OPERAND (arg0, 0),\n+\t\t      fold (build (code, type, TREE_OPERAND (arg0, 1), arg1)));\n       if (TREE_CODE (arg1) == COMPOUND_EXPR\n-\t  && ! TREE_SIDE_EFFECTS (TREE_OPERAND (arg1, 0))\n-\t  && ! TREE_SIDE_EFFECTS (arg0))\n+\t  && reorder_operands_p (arg0, TREE_OPERAND (arg1, 0)))\n \treturn build (COMPOUND_EXPR, type, TREE_OPERAND (arg1, 0),\n \t\t      fold (build (code, type,\n \t\t\t\t   arg0, TREE_OPERAND (arg1, 1))));\n-      else if ((TREE_CODE (arg1) == COND_EXPR\n-\t\t|| (TREE_CODE_CLASS (TREE_CODE (arg1)) == '<'\n-\t\t    && TREE_CODE_CLASS (code) != '<'))\n-\t       && (TREE_CODE (arg0) != COND_EXPR\n-\t\t   || count_cond (arg0, 25) + count_cond (arg1, 25) <= 25)\n-\t       && (! TREE_SIDE_EFFECTS (arg0)\n-\t\t   || (lang_hooks.decls.global_bindings_p () == 0\n-\t\t       && ! CONTAINS_PLACEHOLDER_P (arg0))))\n-\treturn\n-\t  fold_binary_op_with_conditional_arg (code, type, arg1, arg0,\n-\t\t\t\t\t       /*cond_first_p=*/0);\n-      else if (TREE_CODE (arg0) == COMPOUND_EXPR)\n-\treturn build (COMPOUND_EXPR, type, TREE_OPERAND (arg0, 0),\n-\t\t      fold (build (code, type, TREE_OPERAND (arg0, 1), arg1)));\n-      else if ((TREE_CODE (arg0) == COND_EXPR\n-\t\t|| (TREE_CODE_CLASS (TREE_CODE (arg0)) == '<'\n-\t\t    && TREE_CODE_CLASS (code) != '<'))\n-\t       && (TREE_CODE (arg1) != COND_EXPR\n-\t\t   || count_cond (arg0, 25) + count_cond (arg1, 25) <= 25)\n-\t       && (! TREE_SIDE_EFFECTS (arg1)\n-\t\t   || (lang_hooks.decls.global_bindings_p () == 0\n-\t\t       && ! CONTAINS_PLACEHOLDER_P (arg1))))\n-\treturn\n-\t  fold_binary_op_with_conditional_arg (code, type, arg0, arg1,\n-\t\t\t\t\t       /*cond_first_p=*/1);\n+\n+      if (TREE_CODE (arg0) == COND_EXPR\n+\t  || TREE_CODE_CLASS (TREE_CODE (arg0)) == '<')\n+\t{\n+\t  tem = fold_binary_op_with_conditional_arg (code, type, arg0, arg1,\n+\t\t\t\t\t\t     /*cond_first_p=*/1);\n+\t  if (tem != NULL_TREE)\n+\t    return tem;\n+\t}\n+\n+      if (TREE_CODE (arg1) == COND_EXPR\n+\t  || TREE_CODE_CLASS (TREE_CODE (arg1)) == '<')\n+\t{\n+\t  tem = fold_binary_op_with_conditional_arg (code, type, arg1, arg0,\n+\t\t\t\t\t\t     /*cond_first_p=*/0);\n+\t  if (tem != NULL_TREE)\n+\t    return tem;\n+\t}\n     }\n \n   switch (code)"}]}