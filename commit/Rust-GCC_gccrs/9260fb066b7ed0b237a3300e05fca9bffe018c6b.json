{"sha": "9260fb066b7ed0b237a3300e05fca9bffe018c6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI2MGZiMDY2YjdlZDBiMjM3YTMzMDBlMDVmY2E5YmZmZTAxOGM2Yg==", "commit": {"author": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2019-12-20T15:52:39Z"}, "committer": {"name": "Stam Markianos-Wright", "email": "stammark@gcc.gnu.org", "date": "2019-12-20T15:52:39Z"}, "message": "gcc/testsuite/ChangeLog:\n\n2019-12-20  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\n\t* lib/target-supports.exp \n\t(check_effective_target_arm_v8_2a_i8mm_ok_nocache): New.\n\t(check_effective_target_arm_v8_2a_i8mm_ok): New.\n\t(add_options_for_arm_v8_2a_i8mm): New.\n\t(check_effective_target_arm_v8_2a_bf16_neon_ok_nocache): New.\n\t(check_effective_target_arm_v8_2a_bf16_neon_ok): New.\n\t(add_options_for_arm_v8_2a_bf16_neon): New.\n\ngcc/Changelog:\n\n2019-12-20  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\n\t* doc/sourcebuild.texi\n\t(arm_v8_2a_bf16_neon_ok): Document new target supports option.\n\t(arm_v8_2a_i8mm_ok): Likewise.\n\nFrom-SVN: r279648", "tree": {"sha": "19c6fe2d9028dbf1bd3f4524ae33292c940d9a5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19c6fe2d9028dbf1bd3f4524ae33292c940d9a5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9260fb066b7ed0b237a3300e05fca9bffe018c6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9260fb066b7ed0b237a3300e05fca9bffe018c6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9260fb066b7ed0b237a3300e05fca9bffe018c6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9260fb066b7ed0b237a3300e05fca9bffe018c6b/comments", "author": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f6a7c12714057170e2c4b746d6a5a60ceaaf015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6a7c12714057170e2c4b746d6a5a60ceaaf015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f6a7c12714057170e2c4b746d6a5a60ceaaf015"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "5ac079a6dd2d12a1cfa8bd2019459bbb7f6a5a42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9260fb066b7ed0b237a3300e05fca9bffe018c6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9260fb066b7ed0b237a3300e05fca9bffe018c6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9260fb066b7ed0b237a3300e05fca9bffe018c6b", "patch": "@@ -1,3 +1,9 @@\n+2019-12-20  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\t* doc/sourcebuild.texi\n+\t(arm_v8_2a_bf16_neon_ok): Document new target supports option.\n+\t(arm_v8_2a_i8mm_ok): Likewise.\n+\n 2019-12-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/92841"}, {"sha": "fdfd9dcde6b23e68fe0587d583ea50b366e5e87e", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9260fb066b7ed0b237a3300e05fca9bffe018c6b/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9260fb066b7ed0b237a3300e05fca9bffe018c6b/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=9260fb066b7ed0b237a3300e05fca9bffe018c6b", "patch": "@@ -1877,6 +1877,16 @@ ARM target supports extensions to generate the @code{VFMAL} and @code{VFMLS}\n half-precision floating-point instructions available from ARMv8.2-A and\n onwards.  Some multilibs may be incompatible with these options.\n \n+@item arm_v8_2a_bf16_neon_ok\n+ARM target supports options to generate instructions from ARMv8.2-A with\n+the BFloat16 extension (bf16). Some multilibs may be incompatible with these\n+options.\n+\n+@item arm_v8_2a_i8mm_ok\n+ARM target supports options to generate instructions from ARMv8.2-A with\n+the 8-Bit Integer Matrix Multiply extension (i8mm). Some multilibs may be\n+incompatible with these options.\n+\n @item arm_prefer_ldrd_strd\n ARM target prefers @code{LDRD} and @code{STRD} instructions over\n @code{LDM} and @code{STM} instructions."}, {"sha": "a6de3e6f8ce39fe624c4b6bc900465577089d0cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9260fb066b7ed0b237a3300e05fca9bffe018c6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9260fb066b7ed0b237a3300e05fca9bffe018c6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9260fb066b7ed0b237a3300e05fca9bffe018c6b", "patch": "@@ -1,3 +1,13 @@\n+2019-12-20  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\t* lib/target-supports.exp \n+\t(check_effective_target_arm_v8_2a_i8mm_ok_nocache): New.\n+\t(check_effective_target_arm_v8_2a_i8mm_ok): New.\n+\t(add_options_for_arm_v8_2a_i8mm): New.\n+\t(check_effective_target_arm_v8_2a_bf16_neon_ok_nocache): New.\n+\t(check_effective_target_arm_v8_2a_bf16_neon_ok): New.\n+\t(add_options_for_arm_v8_2a_bf16_neon): New.\n+\n 2019-12-20  Roman Zhuykov  <zhroma@ispras.ru>\n \n \t* gcc.dg/pr92951-1.c: Rename to ..."}, {"sha": "cbd97b2ce5cce9c48816aa30eb147b46113f49df", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9260fb066b7ed0b237a3300e05fca9bffe018c6b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9260fb066b7ed0b237a3300e05fca9bffe018c6b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=9260fb066b7ed0b237a3300e05fca9bffe018c6b", "patch": "@@ -4781,6 +4781,49 @@ proc add_options_for_arm_v8_2a_dotprod_neon { flags } {\n     return \"$flags $et_arm_v8_2a_dotprod_neon_flags\"\n }\n \n+# Return 1 if the target supports ARMv8.2+i8mm Adv.SIMD Dot Product\n+# instructions, 0 otherwise.  The test is valid for ARM and for AArch64.\n+# Record the command line options needed.\n+\n+proc check_effective_target_arm_v8_2a_i8mm_ok_nocache { } {\n+    global et_arm_v8_2a_i8mm_flags\n+    set et_arm_v8_2a_i8mm_flags \"\"\n+\n+    if { ![istarget arm*-*-*] && ![istarget aarch64*-*-*] } {\n+        return 0;\n+    }\n+\n+    # Iterate through sets of options to find the compiler flags that\n+    # need to be added to the -march option.\n+    foreach flags {\"\" \"-mfloat-abi=hard -mfpu=neon-fp-armv8\" \"-mfloat-abi=softfp -mfpu=neon-fp-armv8\" } {\n+        if { [check_no_compiler_messages_nocache \\\n+                  arm_v8_2a_i8mm_ok object {\n+            #include <arm_neon.h>\n+            #if !defined (__ARM_FEATURE_MATMUL_INT8)\n+            #error \"__ARM_FEATURE_MATMUL_INT8 not defined\"\n+            #endif\n+        } \"$flags -march=armv8.2-a+i8mm\"] } {\n+            set et_arm_v8_2a_i8mm_flags \"$flags -march=armv8.2-a+i8mm\"\n+            return 1\n+        }\n+    }\n+\n+    return 0;\n+}\n+\n+proc check_effective_target_arm_v8_2a_i8mm_ok { } {\n+    return [check_cached_effective_target arm_v8_2a_i8mm_ok \\\n+                check_effective_target_arm_v8_2a_i8mm_ok_nocache]\n+}\n+\n+proc add_options_for_arm_v8_2a_i8mm { flags } {\n+    if { ! [check_effective_target_arm_v8_2a_i8mm_ok] } {\n+        return \"$flags\"\n+    }\n+    global et_arm_v8_2a_i8mm_flags\n+    return \"$flags $et_arm_v8_2a_i8mm_flags\"\n+}\n+\n # Return 1 if the target supports FP16 VFMAL and VFMSL\n # instructions, 0 otherwise.\n # Record the command line options needed.\n@@ -4826,6 +4869,45 @@ proc add_options_for_arm_fp16fml_neon { flags } {\n     return \"$flags $et_arm_fp16fml_neon_flags\"\n }\n \n+# Return 1 if the target supports BFloat16 SIMD instructions, 0 otherwise.\n+# The test is valid for ARM and for AArch64.\n+\n+proc check_effective_target_arm_v8_2a_bf16_neon_ok_nocache { } {\n+    global et_arm_v8_2a_bf16_neon_flags\n+    set et_arm_v8_2a_bf16_neon_flags \"\"\n+\n+    if { ![istarget arm*-*-*] && ![istarget aarch64*-*-*] } {\n+        return 0;\n+    }\n+\n+    foreach flags {\"\" \"-mfloat-abi=hard -mfpu=neon-fp-armv8\" \"-mfloat-abi=softfp -mfpu=neon-fp-armv8\" } {\n+        if { [check_no_compiler_messages_nocache arm_v8_2a_bf16_neon_ok object {\n+            #include <arm_neon.h>\n+            #if !defined (__ARM_FEATURE_BF16_VECTOR_ARITHMETIC)\n+            #error \"__ARM_FEATURE_BF16_VECTOR_ARITHMETIC not defined\"\n+            #endif\n+        } \"$flags -march=armv8.2-a+bf16\"] } {\n+            set et_arm_v8_2a_bf16_neon_flags \"$flags -march=armv8.2-a+bf16\"\n+            return 1\n+        }\n+    }\n+\n+    return 0;\n+}\n+\n+proc check_effective_target_arm_v8_2a_bf16_neon_ok { } {\n+    return [check_cached_effective_target arm_v8_2a_bf16_neon_ok \\\n+                check_effective_target_arm_v8_2a_bf16_neon_ok_nocache]\n+}\n+\n+proc add_options_for_arm_v8_2a_bf16_neon { flags } {\n+    if { ! [check_effective_target_arm_v8_2a_bf16_neon_ok] } {\n+        return \"$flags\"\n+    }\n+    global et_arm_v8_2a_bf16_neon_flags\n+    return \"$flags $et_arm_v8_2a_bf16_neon_flags\"\n+}\n+\n # Return 1 if the target supports executing ARMv8 NEON instructions, 0\n # otherwise.\n "}]}