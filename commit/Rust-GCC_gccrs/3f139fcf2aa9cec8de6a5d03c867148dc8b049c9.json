{"sha": "3f139fcf2aa9cec8de6a5d03c867148dc8b049c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YxMzlmY2YyYWE5Y2VjOGRlNmE1ZDAzYzg2NzE0OGRjOGIwNDljOQ==", "commit": {"author": {"name": "Brooks Moses", "email": "brooks.moses@codesourcery.com", "date": "2006-11-09T06:53:05Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2006-11-09T06:53:05Z"}, "message": "lang.opt: Add -fmax-errors= option.\n\n* lang.opt: Add -fmax-errors= option.\n* gfortran.h (gfc_option_t): Add max_errors element.\n* options.c (gfc_init_options): Set max_errors default value\nto 25.\n(gfc_handle_options): Assign -fmax_errors value to\ngfc_option.max_errors.\n* error.c (gfc_increment_error_count): New function, which\nalso checks whether the error count exceeds max_errors.\n(gfc_warning): Use it.\n(gfc_warning_now): Use it.\n(gfc_notify_std): Use it.\n(gfc_error): Use it.\n(gfc_error_now): Use it.\n(gfc_error_check): Use it.\n\nFrom-SVN: r118615", "tree": {"sha": "af8c557eb4fa405e1872a03c58213c649a3c9621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af8c557eb4fa405e1872a03c58213c649a3c9621"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f139fcf2aa9cec8de6a5d03c867148dc8b049c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f139fcf2aa9cec8de6a5d03c867148dc8b049c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f139fcf2aa9cec8de6a5d03c867148dc8b049c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f139fcf2aa9cec8de6a5d03c867148dc8b049c9/comments", "author": null, "committer": null, "parents": [{"sha": "350ff03fa9c59261d4cc901454e367a6c77cb1c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/350ff03fa9c59261d4cc901454e367a6c77cb1c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/350ff03fa9c59261d4cc901454e367a6c77cb1c1"}], "stats": {"total": 81, "additions": 63, "deletions": 18}, "files": [{"sha": "7acfbd932fa3cce27656ee12322a7150aa5e271e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f139fcf2aa9cec8de6a5d03c867148dc8b049c9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f139fcf2aa9cec8de6a5d03c867148dc8b049c9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3f139fcf2aa9cec8de6a5d03c867148dc8b049c9", "patch": "@@ -1,3 +1,20 @@\n+2006-11-08  Brooks Moses  <brooks.moses@codesourcery.com>\n+\n+\t* lang.opt: Add -fmax-errors= option.\n+\t* gfortran.h (gfc_option_t): Add max_errors element.\n+\t* options.c (gfc_init_options): Set max_errors default value\n+\tto 25.\n+\t(gfc_handle_options): Assign -fmax_errors value to\n+\tgfc_option.max_errors.\n+\t* error.c (gfc_increment_error_count): New function, which\n+\talso checks whether the error count exceeds max_errors.\n+\t(gfc_warning): Use it.\n+\t(gfc_warning_now): Use it.\n+\t(gfc_notify_std): Use it.\n+\t(gfc_error): Use it.\n+\t(gfc_error_now): Use it.\n+\t(gfc_error_check): Use it.\n+\n 2006-11-08  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* lang.opt: Remove non-working -qkind= option."}, {"sha": "223fb599ab82a1b84520ba406db6a3001628e179", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f139fcf2aa9cec8de6a5d03c867148dc8b049c9/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f139fcf2aa9cec8de6a5d03c867148dc8b049c9/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=3f139fcf2aa9cec8de6a5d03c867148dc8b049c9", "patch": "@@ -460,6 +460,18 @@ error_printf (const char *nocmsgid, ...)\n }\n \n \n+/* Increment the number of errors, and check whether too many have \n+   been printed.  */\n+\n+static void\n+gfc_increment_error_count (void)\n+{\n+  errors++;\n+  if ((gfc_option.max_errors != 0) && (errors >= gfc_option.max_errors))\n+    gfc_fatal_error (\"Error count reached limit of %d.\", gfc_option.max_errors);\n+}\n+\n+\n /* Issue a warning.  */\n \n void\n@@ -475,17 +487,17 @@ gfc_warning (const char *nocmsgid, ...)\n   cur_error_buffer = &warning_buffer;\n \n   va_start (argp, nocmsgid);\n+  error_print (_(\"Warning:\"), _(nocmsgid), argp);\n+  va_end (argp);\n+\n+  error_char ('\\0');\n+\n   if (buffer_flag == 0)\n   {\n     warnings++;\n     if (warnings_are_errors)\n-      errors++;\n+      gfc_increment_error_count();\n   }\n-\n-  error_print (_(\"Warning:\"), _(nocmsgid), argp);\n-  va_end (argp);\n-\n-  error_char ('\\0');\n }\n \n \n@@ -530,13 +542,6 @@ gfc_notify_std (int std, const char *nocmsgid, ...)\n   cur_error_buffer->flag = 1;\n   cur_error_buffer->index = 0;\n \n-  if (buffer_flag == 0)\n-    {\n-      if (warning && !warnings_are_errors)\n-\twarnings++;\n-      else\n-\terrors++;\n-    }\n   va_start (argp, nocmsgid);\n   if (warning)\n     error_print (_(\"Warning:\"), _(nocmsgid), argp);\n@@ -545,6 +550,15 @@ gfc_notify_std (int std, const char *nocmsgid, ...)\n   va_end (argp);\n \n   error_char ('\\0');\n+\n+  if (buffer_flag == 0)\n+    {\n+      if (warning && !warnings_are_errors)\n+\twarnings++;\n+      else\n+\tgfc_increment_error_count();\n+    }\n+\n   return (warning && !warnings_are_errors) ? SUCCESS : FAILURE;\n }\n \n@@ -564,7 +578,7 @@ gfc_warning_now (const char *nocmsgid, ...)\n   buffer_flag = 0;\n   warnings++;\n   if (warnings_are_errors)\n-    errors++;\n+    gfc_increment_error_count();\n \n   va_start (argp, nocmsgid);\n   error_print (_(\"Warning:\"), _(nocmsgid), argp);\n@@ -615,12 +629,13 @@ gfc_error (const char *nocmsgid, ...)\n   cur_error_buffer = &error_buffer;\n \n   va_start (argp, nocmsgid);\n-  if (buffer_flag == 0)\n-    errors++;\n   error_print (_(\"Error:\"), _(nocmsgid), argp);\n   va_end (argp);\n \n   error_char ('\\0');\n+\n+  if (buffer_flag == 0)\n+    gfc_increment_error_count();\n }\n \n \n@@ -638,13 +653,15 @@ gfc_error_now (const char *nocmsgid, ...)\n \n   i = buffer_flag;\n   buffer_flag = 0;\n-  errors++;\n \n   va_start (argp, nocmsgid);\n   error_print (_(\"Error:\"), _(nocmsgid), argp);\n   va_end (argp);\n \n   error_char ('\\0');\n+\n+  gfc_increment_error_count();\n+\n   buffer_flag = i;\n \n   if (flag_fatal_errors)\n@@ -720,11 +737,12 @@ gfc_error_check (void)\n \n   if (error_buffer.flag)\n     {\n-      errors++;\n       if (error_buffer.message != NULL)\n \tfputs (error_buffer.message, stderr);\n       error_buffer.flag = 0;\n \n+      gfc_increment_error_count();\n+\n       if (flag_fatal_errors)\n \texit (1);\n     }"}, {"sha": "40dbbe1ad276e3a6973d94cb703dfcdeb623e1ff", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f139fcf2aa9cec8de6a5d03c867148dc8b049c9/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f139fcf2aa9cec8de6a5d03c867148dc8b049c9/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=3f139fcf2aa9cec8de6a5d03c867148dc8b049c9", "patch": "@@ -1629,6 +1629,7 @@ typedef struct\n   int warn_surprising;\n   int warn_tabs;\n   int warn_underflow;\n+  int max_errors;\n \n   int flag_all_intrinsics;\n   int flag_default_double;"}, {"sha": "c055f14a4b37871d900369f44da31fdb253de50a", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f139fcf2aa9cec8de6a5d03c867148dc8b049c9/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f139fcf2aa9cec8de6a5d03c867148dc8b049c9/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=3f139fcf2aa9cec8de6a5d03c867148dc8b049c9", "patch": "@@ -169,6 +169,10 @@ ffree-line-length-\n Fortran RejectNegative Joined UInteger\n -ffree-line-length-<n>\t\tUse n as character line width in free mode\n \n+fmax-errors=\n+Fortran RejectNegative Joined UInteger\n+-fmax-errors=<n>\tMaximum number of errors to report\n+\n fmax-identifier-length=\n Fortran RejectNegative Joined UInteger\n -fmax-identifier-length=<n>\tMaximum identifier length"}, {"sha": "ef44ae5132449ef5c86c99b2a9cc70c5b294c19a", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f139fcf2aa9cec8de6a5d03c867148dc8b049c9/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f139fcf2aa9cec8de6a5d03c867148dc8b049c9/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=3f139fcf2aa9cec8de6a5d03c867148dc8b049c9", "patch": "@@ -61,6 +61,7 @@ gfc_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n   gfc_option.warn_surprising = 0;\n   gfc_option.warn_tabs = 1;\n   gfc_option.warn_underflow = 1;\n+  gfc_option.max_errors = 25;\n \n   gfc_option.flag_all_intrinsics = 0;\n   gfc_option.flag_default_double = 0;\n@@ -512,6 +513,10 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_option.flag_implicit_none = value;\n       break;\n \n+    case OPT_fmax_errors_:\n+      gfc_option.max_errors = value;\n+      break;\n+\n     case OPT_fmax_stack_var_size_:\n       gfc_option.flag_max_stack_var_size = value;\n       break;"}]}