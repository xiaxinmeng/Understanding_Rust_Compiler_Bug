{"sha": "7e4aae92f2dab0434634b62934df54c2bddc343c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U0YWFlOTJmMmRhYjA0MzQ2MzRiNjI5MzRkZjU0YzJiZGRjMzQzYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-10-15T19:19:05Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-10-15T19:19:05Z"}, "message": "target.def (target_option.init_struct): New hook.\n\n\t* target.def (target_option.init_struct): New hook.\n\t* doc/tm.texi.in (TARGET_OPTION_INIT_STRUCT): New @hook.\n\t* doc/tm.texi: Regenerate.\n\t* hooks.c (hook_void_gcc_optionsp): New.\n\t* hooks.h (hook_void_gcc_optionsp): Declare.\n\t* langhooks-def.h (lhd_init_options_struct): Remove.\n\t(LANG_HOOKS_INIT_OPTIONS_STRUCT): Define to\n\thook_void_gcc_optionsp.\n\t* langhooks.c (lhd_init_options_struct): Remove.\n\t* opts.c (init_options_struct): Also call\n\ttargetm.target_option.init_struct.\n\t* config/i386/i386.c (ix86_option_init_struct,\n\tTARGET_OPTION_INIT_STRUCT): New.\n\t(ix86_option_optimization): Move some settings to\n\tix86_option_init_struct.\n\t* config/pdp11/pdp11.c (pdp11_option_init_struct,\n\tTARGET_OPTION_INIT_STRUCT): New.\n\t(pdp11_option_optimization): Move some settings to\n\tpdp11_option_init_struct.\n\t* config/rs6000/rs6000.c (rs6000_option_optimization): Replace by\n\trs6000_option_init_struct.  Use options structure pointer.\n\t(TARGET_OPTION_OPTIMIZATION): Replace by\n\tTARGET_OPTION_INIT_STRUCT.\n\t* config/s390/s390.c (s390_option_init_struct,\n\tTARGET_OPTION_INIT_STRUCT): New.\n\t(s390_option_optimization): Don't set\n\tflag_asynchronous_unwind_tables here.\n\t* config/sh/sh.c (sh_option_init_struct,\n\tTARGET_OPTION_INIT_STRUCT): New.\n\t(sh_option_optimization): Don't set flag_finite_math_only here.\n\t* config/spu/spu.c (spu_option_optimization): Replace by\n\tspu_option_optimization.  Use options structure pointer.\n\t(TARGET_OPTION_OPTIMIZATION): Replace by\n\tTARGET_OPTION_INIT_STRUCT.\n\nFrom-SVN: r165519", "tree": {"sha": "1f752e7fb5a31733398e03579f85eb3c38e1a24a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f752e7fb5a31733398e03579f85eb3c38e1a24a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e4aae92f2dab0434634b62934df54c2bddc343c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e4aae92f2dab0434634b62934df54c2bddc343c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e4aae92f2dab0434634b62934df54c2bddc343c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e4aae92f2dab0434634b62934df54c2bddc343c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae422ccd65c72f713ffb33319a8bc5436d8bc858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae422ccd65c72f713ffb33319a8bc5436d8bc858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae422ccd65c72f713ffb33319a8bc5436d8bc858"}], "stats": {"total": 171, "additions": 131, "deletions": 40}, "files": [{"sha": "d702bf0775eeb241713769200391a6309552f18a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e4aae92f2dab0434634b62934df54c2bddc343c", "patch": "@@ -1,3 +1,40 @@\n+2010-10-15  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* target.def (target_option.init_struct): New hook.\n+\t* doc/tm.texi.in (TARGET_OPTION_INIT_STRUCT): New @hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* hooks.c (hook_void_gcc_optionsp): New.\n+\t* hooks.h (hook_void_gcc_optionsp): Declare.\n+\t* langhooks-def.h (lhd_init_options_struct): Remove.\n+\t(LANG_HOOKS_INIT_OPTIONS_STRUCT): Define to\n+\thook_void_gcc_optionsp.\n+\t* langhooks.c (lhd_init_options_struct): Remove.\n+\t* opts.c (init_options_struct): Also call\n+\ttargetm.target_option.init_struct.\n+\t* config/i386/i386.c (ix86_option_init_struct,\n+\tTARGET_OPTION_INIT_STRUCT): New.\n+\t(ix86_option_optimization): Move some settings to\n+\tix86_option_init_struct.\n+\t* config/pdp11/pdp11.c (pdp11_option_init_struct,\n+\tTARGET_OPTION_INIT_STRUCT): New.\n+\t(pdp11_option_optimization): Move some settings to\n+\tpdp11_option_init_struct.\n+\t* config/rs6000/rs6000.c (rs6000_option_optimization): Replace by\n+\trs6000_option_init_struct.  Use options structure pointer.\n+\t(TARGET_OPTION_OPTIMIZATION): Replace by\n+\tTARGET_OPTION_INIT_STRUCT.\n+\t* config/s390/s390.c (s390_option_init_struct,\n+\tTARGET_OPTION_INIT_STRUCT): New.\n+\t(s390_option_optimization): Don't set\n+\tflag_asynchronous_unwind_tables here.\n+\t* config/sh/sh.c (sh_option_init_struct,\n+\tTARGET_OPTION_INIT_STRUCT): New.\n+\t(sh_option_optimization): Don't set flag_finite_math_only here.\n+\t* config/spu/spu.c (spu_option_optimization): Replace by\n+\tspu_option_optimization.  Use options structure pointer.\n+\t(TARGET_OPTION_OPTIMIZATION): Replace by\n+\tTARGET_OPTION_INIT_STRUCT.\n+\n 2010-10-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* doc/md.texi (Standard Names): Add fma@var{m}4 documentation."}, {"sha": "4536ef22ea8211b21e0030c50e191c5ecfb45107", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7e4aae92f2dab0434634b62934df54c2bddc343c", "patch": "@@ -4537,11 +4537,6 @@ ix86_option_optimization (int level, int size ATTRIBUTE_UNUSED)\n     flag_schedule_insns = 0;\n #endif\n \n-  if (TARGET_MACHO)\n-    /* The Darwin libraries never set errno, so we might as well\n-       avoid calling them when that's the only reason we would.  */\n-    flag_errno_math = 0;\n-\n   /* The default values of these switches depend on the TARGET_64BIT\n      that is not known at this moment.  Mark these values with 2 and\n      let user the to override these.  In case there is no command line\n@@ -4554,14 +4549,26 @@ ix86_option_optimization (int level, int size ATTRIBUTE_UNUSED)\n   if (level > 1)\n     flag_zee = 2;\n \n-  flag_pcc_struct_return = 2;\n-  flag_asynchronous_unwind_tables = 2;\n-  flag_vect_cost_model = 1;\n #ifdef SUBTARGET_OPTIMIZATION_OPTIONS\n   SUBTARGET_OPTIMIZATION_OPTIONS;\n #endif\n }\n \n+/* Implement TARGET_OPTION_INIT_STRUCT.  */\n+\n+static void\n+ix86_option_init_struct (struct gcc_options *opts)\n+{\n+  if (TARGET_MACHO)\n+    /* The Darwin libraries never set errno, so we might as well\n+       avoid calling them when that's the only reason we would.  */\n+    opts->x_flag_errno_math = 0;\n+\n+  opts->x_flag_pcc_struct_return = 2;\n+  opts->x_flag_asynchronous_unwind_tables = 2;\n+  opts->x_flag_vect_cost_model = 1;\n+}\n+\n /* Decide whether we must probe the stack before any space allocation\n    on this target.  It's essentially TARGET_STACK_PROBE except when\n    -fstack-check causes the stack to be already probed differently.  */\n@@ -33269,6 +33276,8 @@ ix86_autovectorize_vector_sizes (void)\n #define TARGET_OPTION_OVERRIDE ix86_option_override\n #undef TARGET_OPTION_OPTIMIZATION\n #define TARGET_OPTION_OPTIMIZATION ix86_option_optimization\n+#undef TARGET_OPTION_INIT_STRUCT\n+#define TARGET_OPTION_INIT_STRUCT ix86_option_init_struct\n \n #undef TARGET_REGISTER_MOVE_COST\n #define TARGET_REGISTER_MOVE_COST ix86_register_move_cost"}, {"sha": "e6b41596c13b3d7037aef0da6f6196cc20abd633", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=7e4aae92f2dab0434634b62934df54c2bddc343c", "patch": "@@ -146,6 +146,7 @@ decode_pdp11_d (const struct real_format *fmt ATTRIBUTE_UNUSED,\n \n static bool pdp11_handle_option (size_t, const char *, int);\n static void pdp11_option_optimization (int, int);\n+static void pdp11_option_init_struct (struct gcc_options *);\n static rtx find_addr_reg (rtx); \n static const char *singlemove_string (rtx *);\n static bool pdp11_assemble_integer (rtx, unsigned int, int);\n@@ -189,6 +190,8 @@ static void pdp11_function_arg_advance (CUMULATIVE_ARGS *,\n #define TARGET_HANDLE_OPTION pdp11_handle_option\n #undef TARGET_OPTION_OPTIMIZATION\n #define TARGET_OPTION_OPTIMIZATION pdp11_option_optimization\n+#undef TARGET_OPTION_INIT_STRUCT\n+#define TARGET_OPTION_INIT_STRUCT pdp11_option_init_struct\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS pdp11_rtx_costs\n@@ -235,16 +238,23 @@ pdp11_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED,\n static void\n pdp11_option_optimization (int level, int size ATTRIBUTE_UNUSED)\n {\n-  flag_finite_math_only = 0;\n-  flag_trapping_math = 0;\n-  flag_signaling_nans = 0;\n   if (level >= 3)\n     {\n       flag_omit_frame_pointer = 1;\n       /* flag_unroll_loops = 1; */\n     }\n }\n \n+/* Implement TARGET_OPTION_INIT_STRUCT.  */\n+\n+static void\n+pdp11_option_init_struct (struct gcc_options *opts)\n+{\n+  opts->x_flag_finite_math_only = 0;\n+  opts->x_flag_trapping_math = 0;\n+  opts->x_flag_signaling_nans = 0;\n+}\n+\n /* Nonzero if OP is a valid second operand for an arithmetic insn.  */\n \n int"}, {"sha": "a1baa592fa9b1498db8759e7596d01ec943341e4", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7e4aae92f2dab0434634b62934df54c2bddc343c", "patch": "@@ -1136,7 +1136,7 @@ static rtx altivec_expand_vec_set_builtin (tree);\n static rtx altivec_expand_vec_ext_builtin (tree, rtx);\n static int get_element_number (tree, tree);\n static void rs6000_option_override (void);\n-static void rs6000_option_optimization (int, int);\n+static void rs6000_option_init_struct (struct gcc_options *);\n static void rs6000_option_default_params (void);\n static bool rs6000_handle_option (size_t, const char *, int);\n static void rs6000_parse_tls_size_option (void);\n@@ -1602,8 +1602,8 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE rs6000_option_override\n \n-#undef TARGET_OPTION_OPTIMIZATION\n-#define TARGET_OPTION_OPTIMIZATION rs6000_option_optimization\n+#undef TARGET_OPTION_INIT_STRUCT\n+#define TARGET_OPTION_INIT_STRUCT rs6000_option_init_struct\n \n #undef TARGET_OPTION_DEFAULT_PARAMS\n #define TARGET_OPTION_DEFAULT_PARAMS rs6000_option_default_params\n@@ -3681,18 +3681,19 @@ rs6000_parse_tls_size_option (void)\n     error (\"bad value %qs for -mtls-size switch\", rs6000_tls_size_string);\n }\n \n+/* Implement TARGET_OPTION_INIT_STRUCT.  */\n+\n static void\n-rs6000_option_optimization (int level ATTRIBUTE_UNUSED,\n-\t\t\t    int size ATTRIBUTE_UNUSED)\n+rs6000_option_init_struct (struct gcc_options *opts)\n {\n   if (DEFAULT_ABI == ABI_DARWIN)\n     /* The Darwin libraries never set errno, so we might as well\n        avoid calling them when that's the only reason we would.  */\n-    flag_errno_math = 0;\n+    opts->x_flag_errno_math = 0;\n \n   /* Enable section anchors by default.  */\n   if (!TARGET_MACHO)\n-    flag_section_anchors = 2;\n+    opts->x_flag_section_anchors = 2;\n }\n \n /* Implement TARGET_OPTION_DEFAULT_PARAMS.  */"}, {"sha": "be26fbd6073c2436da1e42768230d1742dbe9239", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=7e4aae92f2dab0434634b62934df54c2bddc343c", "patch": "@@ -1503,15 +1503,21 @@ s390_option_optimization (int level ATTRIBUTE_UNUSED, int size)\n   /* ??? There are apparently still problems with -fcaller-saves.  */\n   flag_caller_saves = 0;\n \n-  /* By default, always emit DWARF-2 unwind info.  This allows debugging\n-     without maintaining a stack frame back-chain.  */\n-  flag_asynchronous_unwind_tables = 1;\n-\n   /* Use MVCLE instructions to decrease code size if requested.  */\n   if (size != 0)\n     target_flags |= MASK_MVCLE;\n }\n \n+/* Implement TARGET_OPTION_INIT_STRUCT.  */\n+\n+static void\n+s390_option_init_struct (struct gcc_options *opts)\n+{\n+  /* By default, always emit DWARF-2 unwind info.  This allows debugging\n+     without maintaining a stack frame back-chain.  */\n+  opts->x_flag_asynchronous_unwind_tables = 1;\n+}\n+\n /* Return true if ARG is the name of a processor.  Set *TYPE and *FLAGS\n    to the associated processor_type and processor_flags if so.  */\n \n@@ -10507,6 +10513,9 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n #undef TARGET_OPTION_OPTIMIZATION\n #define TARGET_OPTION_OPTIMIZATION s390_option_optimization\n \n+#undef TARGET_OPTION_INIT_STRUCT\n+#define TARGET_OPTION_INIT_STRUCT s390_option_init_struct\n+\n #undef\tTARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO s390_encode_section_info\n "}, {"sha": "41cc8b7a8a681b4ecefb94b7c80a829dc288439c", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=7e4aae92f2dab0434634b62934df54c2bddc343c", "patch": "@@ -184,6 +184,7 @@ static rtx gen_block_redirect (rtx, int, int);\n static void sh_reorg (void);\n static void sh_option_override (void);\n static void sh_option_optimization (int, int);\n+static void sh_option_init_struct (struct gcc_options *);\n static void sh_option_default_params (void);\n static void output_stack_adjust (int, rtx, int, HARD_REG_SET *, bool);\n static rtx frame_insn (rtx);\n@@ -343,6 +344,8 @@ static const struct attribute_spec sh_attribute_table[] =\n #define TARGET_OPTION_OVERRIDE sh_option_override\n #undef TARGET_OPTION_OPTIMIZATION\n #define TARGET_OPTION_OPTIMIZATION sh_option_optimization\n+#undef TARGET_OPTION_INIT_STRUCT\n+#define TARGET_OPTION_INIT_STRUCT sh_option_init_struct\n #undef TARGET_OPTION_DEFAULT_PARAMS\n #define TARGET_OPTION_DEFAULT_PARAMS sh_option_default_params\n \n@@ -725,17 +728,23 @@ sh_option_optimization (int level, int size)\n       if (!size)\n \ttarget_flags |= MASK_SAVE_ALL_TARGET_REGS;\n     }\n-  /* Likewise, we can't meaningfully test TARGET_SH2E / TARGET_IEEE\n-     here, so leave it to TARGET_OPTION_OVERRIDE to set\n-    flag_finite_math_only.  We set it to 2 here so we know if the user\n-    explicitly requested this to be on or off.  */\n-  flag_finite_math_only = 2;\n   /* If flag_schedule_insns is 1, we set it to 2 here so we know if\n      the user explicitly requested this to be on or off.  */\n   if (flag_schedule_insns > 0)\n     flag_schedule_insns = 2;\n }\n \n+/* Implement TARGET_OPTION_INIT_STRUCT.  */\n+static void\n+sh_option_init_struct (struct gcc_options *opts)\n+{\n+  /* We can't meaningfully test TARGET_SH2E / TARGET_IEEE\n+     here, so leave it to TARGET_OPTION_OVERRIDE to set\n+     flag_finite_math_only.  We set it to 2 here so we know if the user\n+     explicitly requested this to be on or off.  */\n+  opts->x_flag_finite_math_only = 2;\n+}\n+\n /* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n static void\n sh_option_default_params (void)"}, {"sha": "254bd652bb08aa33517550752b0609f4d80fdcd4", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=7e4aae92f2dab0434634b62934df54c2bddc343c", "patch": "@@ -150,7 +150,7 @@ char regs_ever_allocated[FIRST_PSEUDO_REGISTER];\n \n /*  Prototypes and external defs.  */\n static void spu_option_override (void);\n-static void spu_option_optimization (int, int);\n+static void spu_option_init_struct (struct gcc_options *opts);\n static void spu_option_default_params (void);\n static void spu_init_builtins (void);\n static tree spu_builtin_decl (unsigned, bool);\n@@ -480,8 +480,8 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE spu_option_override\n \n-#undef TARGET_OPTION_OPTIMIZATION\n-#define TARGET_OPTION_OPTIMIZATION spu_option_optimization\n+#undef TARGET_OPTION_INIT_STRUCT\n+#define TARGET_OPTION_INIT_STRUCT spu_option_init_struct\n \n #undef TARGET_OPTION_DEFAULT_PARAMS\n #define TARGET_OPTION_DEFAULT_PARAMS spu_option_default_params\n@@ -492,10 +492,10 @@ static const struct attribute_spec spu_attribute_table[] =\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n static void\n-spu_option_optimization (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n+spu_option_init_struct (struct gcc_options *opts)\n {\n   /* With so many registers this is better on by default. */\n-  flag_rename_registers = 1;\n+  opts->x_flag_rename_registers = 1;\n }\n \n /* Implement TARGET_OPTION_DEFAULT_PARAMS.  */"}, {"sha": "7c15d95f6beb25b2feed2a5d17e915a00f460150", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7e4aae92f2dab0434634b62934df54c2bddc343c", "patch": "@@ -812,6 +812,10 @@ this hook!}  The debugging options are not supposed to alter the\n generated code.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_OPTION_INIT_STRUCT (struct gcc_options *@var{opts})\n+Set target-dependent initial values of fields in @var{opts}.\n+@end deftypefn\n+\n @deftypefn {Target Hook} void TARGET_OPTION_DEFAULT_PARAMS (void)\n Set target-dependent default values for @option{--param} settings, using calls to @code{set_default_param_value}.\n @end deftypefn"}, {"sha": "938ff6aeba1a5410d57613a0b0bf5d29383c284e", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=7e4aae92f2dab0434634b62934df54c2bddc343c", "patch": "@@ -812,6 +812,8 @@ this hook!}  The debugging options are not supposed to alter the\n generated code.\n @end deftypefn\n \n+@hook TARGET_OPTION_INIT_STRUCT\n+\n @hook TARGET_OPTION_DEFAULT_PARAMS\n \n @hook TARGET_HELP"}, {"sha": "19e294fcbd2b9c5508524af614c9a9deed355504", "filename": "gcc/hooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=7e4aae92f2dab0434634b62934df54c2bddc343c", "patch": "@@ -360,3 +360,10 @@ void\n hook_void_rtx_int (rtx insn ATTRIBUTE_UNUSED, int mode ATTRIBUTE_UNUSED)\n {\n }\n+\n+/* Generic hook that takes a struct gcc_options * and returns void.  */\n+\n+void\n+hook_void_gcc_optionsp (struct gcc_options *opts ATTRIBUTE_UNUSED)\n+{\n+}"}, {"sha": "5bfa1ad047eea3595f7433d6c5e79b710d2a2284", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=7e4aae92f2dab0434634b62934df54c2bddc343c", "patch": "@@ -61,6 +61,7 @@ extern void hook_void_FILEptr_constcharptr (FILE *, const char *);\n extern void hook_void_tree (tree);\n extern void hook_void_tree_treeptr (tree, tree *);\n extern void hook_void_int_int (int, int);\n+extern void hook_void_gcc_optionsp (struct gcc_options *);\n \n extern int hook_int_const_tree_0 (const_tree);\n extern int hook_int_const_tree_const_tree_1 (const_tree, const_tree);"}, {"sha": "ceff0b92c257c1c14f3f79416aac1eb56c3a93c3", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=7e4aae92f2dab0434634b62934df54c2bddc343c", "patch": "@@ -65,7 +65,6 @@ extern tree lhd_builtin_function (tree);\n \n /* Declarations of default tree inlining hooks.  */\n extern void lhd_initialize_diagnostics (diagnostic_context *);\n-extern void lhd_init_options_struct (struct gcc_options *);\n extern void lhd_init_options (unsigned int,\n \t\t\t      struct cl_decoded_option *);\n extern bool lhd_complain_wrong_lang_p (const struct cl_option *);\n@@ -88,7 +87,7 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_FINISH\t\tlhd_do_nothing\n #define LANG_HOOKS_PARSE_FILE\t\tlhd_do_nothing_i\n #define LANG_HOOKS_OPTION_LANG_MASK\thook_uint_void_0\n-#define LANG_HOOKS_INIT_OPTIONS_STRUCT\tlhd_init_options_struct\n+#define LANG_HOOKS_INIT_OPTIONS_STRUCT\thook_void_gcc_optionsp\n #define LANG_HOOKS_INIT_OPTIONS\t\tlhd_init_options\n #define LANG_HOOKS_INITIALIZE_DIAGNOSTICS lhd_initialize_diagnostics\n #define LANG_HOOKS_COMPLAIN_WRONG_LANG_P lhd_complain_wrong_lang_p"}, {"sha": "76c066bfaa3793ec1044e7ce50fadc3353e32c44", "filename": "gcc/langhooks.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=7e4aae92f2dab0434634b62934df54c2bddc343c", "patch": "@@ -337,12 +337,6 @@ lhd_initialize_diagnostics (diagnostic_context *ctx ATTRIBUTE_UNUSED)\n {\n }\n \n-/* Called to perform language-specific options initialization of OPTS.  */\n-void\n-lhd_init_options_struct (struct gcc_options *opts ATTRIBUTE_UNUSED)\n-{\n-}\n-\n /* Called to perform language-specific options initialization.  */\n void\n lhd_init_options (unsigned int decoded_options_count ATTRIBUTE_UNUSED,"}, {"sha": "81514ba7075bd0180e9bfa1c7e21eee97820e127", "filename": "gcc/opts.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=7e4aae92f2dab0434634b62934df54c2bddc343c", "patch": "@@ -695,6 +695,9 @@ init_options_struct (struct gcc_options *opts, struct gcc_options *opts_set)\n \n   /* Some targets have ABI-specified unwind tables.  */\n   opts->x_flag_unwind_tables = targetm.unwind_tables_default;\n+\n+  /* Some targets have other target-specific initialization.  */\n+  targetm.target_option.init_struct (opts);\n }\n \n /* Decode command-line options to an array, like"}, {"sha": "186950ec2eddb6cdd804ca0eb1243fe9f0ec8f88", "filename": "gcc/target.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e4aae92f2dab0434634b62934df54c2bddc343c/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=7e4aae92f2dab0434634b62934df54c2bddc343c", "patch": "@@ -2356,6 +2356,12 @@ DEFHOOK\n  void, (void),\n  hook_void_void)\n \n+DEFHOOK\n+(init_struct,\n+\"Set target-dependent initial values of fields in @var{opts}.\",\n+ void, (struct gcc_options *opts),\n+ hook_void_gcc_optionsp)\n+\n /* Function to determine if one function can inline another function.  */\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_\""}]}