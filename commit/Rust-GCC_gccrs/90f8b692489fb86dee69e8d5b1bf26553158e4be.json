{"sha": "90f8b692489fb86dee69e8d5b1bf26553158e4be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBmOGI2OTI0ODlmYjg2ZGVlNjllOGQ1YjFiZjI2NTUzMTU4ZTRiZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-02-02T12:39:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-02-02T12:39:55Z"}, "message": "re PR libstdc++/13976 (ext/new_allocator.h:81: warning: unused parameter '__h')\n\n2004-02-02  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/13976\n\t* include/ext/malloc_allocator.h (malloc_allocator::allocate):\n\tMake the second parameter unnamed, to void unused parameter\n\twarnings.\n\t* include/ext/mt_allocator.h (__mt_alloc::allocate): Ditto.\n\t* include/ext/new_allocator.h (new_allocator::allocate): Ditto.\n\nFrom-SVN: r77111", "tree": {"sha": "23b519194e7dbc03a2097329ee8f018df59fa39e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23b519194e7dbc03a2097329ee8f018df59fa39e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90f8b692489fb86dee69e8d5b1bf26553158e4be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f8b692489fb86dee69e8d5b1bf26553158e4be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90f8b692489fb86dee69e8d5b1bf26553158e4be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f8b692489fb86dee69e8d5b1bf26553158e4be/comments", "author": null, "committer": null, "parents": [{"sha": "6e937c1c5c91aa000bbb549e2dcd8290fcc20a7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e937c1c5c91aa000bbb549e2dcd8290fcc20a7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e937c1c5c91aa000bbb549e2dcd8290fcc20a7d"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "7b3df025412b16c6a9c0590445adef55b768c9e9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f8b692489fb86dee69e8d5b1bf26553158e4be/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f8b692489fb86dee69e8d5b1bf26553158e4be/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=90f8b692489fb86dee69e8d5b1bf26553158e4be", "patch": "@@ -1,3 +1,12 @@\n+2004-02-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/13976\n+\t* include/ext/malloc_allocator.h (malloc_allocator::allocate):\n+\tMake the second parameter unnamed, to void unused parameter\n+\twarnings.\n+\t* include/ext/mt_allocator.h (__mt_alloc::allocate): Ditto.\n+\t* include/ext/new_allocator.h (new_allocator::allocate): Ditto.\n+\n 2004-02-01  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_algo.h: Additional minor tweaks."}, {"sha": "6939e56411a36f95a736f3a3b12c7352a3e45358", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f8b692489fb86dee69e8d5b1bf26553158e4be/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f8b692489fb86dee69e8d5b1bf26553158e4be/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=90f8b692489fb86dee69e8d5b1bf26553158e4be", "patch": "@@ -77,7 +77,7 @@ namespace __gnu_cxx\n       // NB: __n is permitted to be 0.  The C++ standard says nothing\n       // about what the return value is when __n == 0.\n       pointer\n-      allocate(size_type __n, const void* __h = 0)\n+      allocate(size_type __n, const void* = 0)\n       { return static_cast<_Tp*>(malloc(__n * sizeof(_Tp))); }\n \n       // __p is not permitted to be a null pointer."}, {"sha": "25c9cd21fd76b0fdb993d6a2c0a36b7783ed757b", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f8b692489fb86dee69e8d5b1bf26553158e4be/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f8b692489fb86dee69e8d5b1bf26553158e4be/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=90f8b692489fb86dee69e8d5b1bf26553158e4be", "patch": "@@ -228,7 +228,7 @@ namespace __gnu_cxx\n \n     public:\n       pointer\n-      allocate(size_t __n, const void* __h = 0)\n+      allocate(size_t __n, const void* = 0)\n       {\n         /*\n          * Although the test in __gthread_once() would suffice, we"}, {"sha": "6ac41e577a9cae04cc5c4d7aa6a65efd2e84e013", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f8b692489fb86dee69e8d5b1bf26553158e4be/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f8b692489fb86dee69e8d5b1bf26553158e4be/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=90f8b692489fb86dee69e8d5b1bf26553158e4be", "patch": "@@ -77,7 +77,7 @@ namespace __gnu_cxx\n       // NB: __n is permitted to be 0.  The C++ standard says nothing\n       // about what the return value is when __n == 0.\n       pointer\n-      allocate(size_type __n, const void* __h = 0)\n+      allocate(size_type __n, const void* = 0)\n       { return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp))); }\n \n       // __p is not permitted to be a null pointer."}]}