{"sha": "39c39be99b7ef0e1d8256eea34bd6133a21f9ee1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzljMzliZTk5YjdlZjBlMWQ4MjU2ZWVhMzRiZDYxMzNhMjFmOWVlMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-12-05T07:58:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-12-05T07:58:18Z"}, "message": "flow.c (calculate_global_regs_live): Only force stack pointer live before reload.\n\n        * flow.c (calculate_global_regs_live): Only force stack pointer\n        live before reload.  Force pic register live before reload.\n        (insn_dead_p): Don't protect pic references from deletion.\n\nFrom-SVN: r38027", "tree": {"sha": "954cdaa896e51c920dda107800c6236e82eb6186", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/954cdaa896e51c920dda107800c6236e82eb6186"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39c39be99b7ef0e1d8256eea34bd6133a21f9ee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39c39be99b7ef0e1d8256eea34bd6133a21f9ee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39c39be99b7ef0e1d8256eea34bd6133a21f9ee1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39c39be99b7ef0e1d8256eea34bd6133a21f9ee1/comments", "author": null, "committer": null, "parents": [{"sha": "f8b93ea75d7fa70c34eca646c56ec34be2e13c00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b93ea75d7fa70c34eca646c56ec34be2e13c00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8b93ea75d7fa70c34eca646c56ec34be2e13c00"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "0d55ea845009966aa6ddfda10cb572e07a9444ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39c39be99b7ef0e1d8256eea34bd6133a21f9ee1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39c39be99b7ef0e1d8256eea34bd6133a21f9ee1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39c39be99b7ef0e1d8256eea34bd6133a21f9ee1", "patch": "@@ -1,3 +1,9 @@\n+2000-12-05  Richard Henderson  <rth@redhat.com>\n+\n+\t* flow.c (calculate_global_regs_live): Only force stack pointer\n+\tlive before reload.  Force pic register live before reload.\n+\t(insn_dead_p): Don't protect pic references from deletion.\n+\n 2000-12-05  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* invoke.texi: Add support for using texi2pod.pl.  Don't use"}, {"sha": "1e51d20038bf604c0bd4c1b6fd94388a226b0863", "filename": "gcc/flow.c", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39c39be99b7ef0e1d8256eea34bd6133a21f9ee1/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39c39be99b7ef0e1d8256eea34bd6133a21f9ee1/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=39c39be99b7ef0e1d8256eea34bd6133a21f9ee1", "patch": "@@ -3368,15 +3368,32 @@ calculate_global_regs_live (blocks_in, blocks_out, flags)\n \t  IOR_REG_SET (new_live_at_end, sb->global_live_at_start);\n \t}\n \n-      /* Force the stack pointer to be live -- which might not already be\n-\t the case for blocks within infinite loops.  */\n-      SET_REGNO_REG_SET (new_live_at_end, STACK_POINTER_REGNUM);\n-\n-      /* Similarly for the frame pointer before reload.  Any reference\n-\t to any pseudo before reload is a potential reference of the\n-\t frame pointer.  */\n+      /* Before reload, there are a few registers that must be forced\n+\t live everywhere -- which might not already be the case for \n+\t blocks within infinite loops.  */\n       if (! reload_completed)\n-\tSET_REGNO_REG_SET (new_live_at_end, FRAME_POINTER_REGNUM);\n+\t{\n+\t  /* The all-important stack pointer.  */\n+\t  SET_REGNO_REG_SET (new_live_at_end, STACK_POINTER_REGNUM);\n+\n+\t  /* Any reference to any pseudo before reload is a potential\n+\t     reference of the frame pointer.  */\n+\t  SET_REGNO_REG_SET (new_live_at_end, FRAME_POINTER_REGNUM);\n+\n+#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n+\t  /* Pseudos with argument area equivalences may require\n+\t     reloading via the argument pointer.  */\n+\t  if (fixed_regs[ARG_POINTER_REGNUM])\n+\t    SET_REGNO_REG_SET (new_live_at_end, ARG_POINTER_REGNUM);\n+#endif\n+\n+#ifdef PIC_OFFSET_TABLE_REGNUM\n+\t  /* Any constant, or pseudo with constant equivalences, may\n+\t     require reloading from memory using the pic register.  */\n+\t  if (fixed_regs[PIC_OFFSET_TABLE_REGNUM])\n+\t    SET_REGNO_REG_SET (new_live_at_end, PIC_OFFSET_TABLE_REGNUM);\n+#endif\n+\t}\n \n       /* Regs used in phi nodes are not included in\n \t global_live_at_start, since they are live only along a\n@@ -4219,6 +4236,10 @@ insn_dead_p (pbi, x, call_ok, notes)\n \t      if (regno == STACK_POINTER_REGNUM)\n \t\treturn 0;\n \n+\t      /* ??? These bits might be redundant with the force live bits\n+\t\t in calculate_global_regs_live.  We would delete from\n+\t\t sequential sets; whether this actually affects real code\n+\t\t for anything but the stack pointer I don't know.  */\n \t      /* Make sure insns to set the frame pointer aren't deleted.  */\n \t      if (regno == FRAME_POINTER_REGNUM\n \t\t  && (! reload_completed || frame_pointer_needed))\n@@ -4237,16 +4258,6 @@ insn_dead_p (pbi, x, call_ok, notes)\n \t\treturn 0;\n #endif\n \n-#ifdef PIC_OFFSET_TABLE_REGNUM\n-\t      /* Before reload, do not allow sets of the pic register\n-\t\t to be deleted.  Reload can insert references to\n-\t\t constant pool memory anywhere in the function, making\n-\t\t the PIC register live where it wasn't before.  */\n-\t      if (regno == PIC_OFFSET_TABLE_REGNUM && fixed_regs[regno]\n-\t\t  && ! reload_completed)\n-\t\treturn 0;\n-#endif\n-\n \t      /* Otherwise, the set is dead.  */\n \t      return 1;\n \t    }"}]}