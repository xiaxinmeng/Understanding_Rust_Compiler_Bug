{"sha": "298707b8ceaed91921b322356bde6bf986901ed8", "node_id": "C_kwDOANBUbNoAKDI5ODcwN2I4Y2VhZWQ5MTkyMWIzMjIzNTZiZGU2YmY5ODY5MDFlZDg", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-11-15T04:35:57Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-11-15T04:37:34Z"}, "message": "Remove documentation for MeP\n\nMeP support was removed in r7-1614-g0609abdad81e26\nbut it looks like the documentation for the target\nwas missed.\n\nCommitted as obvious after doing \"make html\" to\nmake sure the documentation is fine.\n\nThanks,\nAndrew Pinski\n\ngcc/ChangeLog:\n\n\t* doc/extend.texi: Remove MeP documentation.\n\t* doc/invoke.texi: Remove MeP Options documentation.", "tree": {"sha": "926bb00772bf2c4aef778361971f6980fe0f7c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/926bb00772bf2c4aef778361971f6980fe0f7c54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/298707b8ceaed91921b322356bde6bf986901ed8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298707b8ceaed91921b322356bde6bf986901ed8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/298707b8ceaed91921b322356bde6bf986901ed8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298707b8ceaed91921b322356bde6bf986901ed8/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7971cf7625547eafdeb39b856716b7745d0aee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7971cf7625547eafdeb39b856716b7745d0aee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7971cf7625547eafdeb39b856716b7745d0aee7"}], "stats": {"total": 361, "additions": 0, "deletions": 361}, "files": [{"sha": "ca84f3a884b2acac7a7eefe2ccec43778adeb683", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 0, "deletions": 190, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298707b8ceaed91921b322356bde6bf986901ed8/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298707b8ceaed91921b322356bde6bf986901ed8/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=298707b8ceaed91921b322356bde6bf986901ed8", "patch": "@@ -2542,7 +2542,6 @@ GCC plugins may provide their own attributes.\n * M32R/D Function Attributes::\n * m68k Function Attributes::\n * MCORE Function Attributes::\n-* MeP Function Attributes::\n * MicroBlaze Function Attributes::\n * Microsoft Windows Function Attributes::\n * MIPS Function Attributes::\n@@ -5392,45 +5391,6 @@ basic @code{asm} and C code may appear to work, they cannot be\n depended upon to work reliably and are not supported.\n @end table\n \n-@node MeP Function Attributes\n-@subsection MeP Function Attributes\n-\n-These function attributes are supported by the MeP back end:\n-\n-@table @code\n-@item disinterrupt\n-@cindex @code{disinterrupt} function attribute, MeP\n-On MeP targets, this attribute causes the compiler to emit\n-instructions to disable interrupts for the duration of the given\n-function.\n-\n-@item interrupt\n-@cindex @code{interrupt} function attribute, MeP\n-Use this attribute to indicate\n-that the specified function is an interrupt handler.  The compiler generates\n-function entry and exit sequences suitable for use in an interrupt handler\n-when this attribute is present.\n-\n-@item near\n-@cindex @code{near} function attribute, MeP\n-This attribute causes the compiler to assume the called\n-function is close enough to use the normal calling convention,\n-overriding the @option{-mtf} command-line option.\n-\n-@item far\n-@cindex @code{far} function attribute, MeP\n-On MeP targets this causes the compiler to use a calling convention\n-that assumes the called function is too far away for the built-in\n-addressing modes.\n-\n-@item vliw\n-@cindex @code{vliw} function attribute, MeP\n-The @code{vliw} attribute tells the compiler to emit\n-instructions in VLIW mode instead of core mode.  Note that this\n-attribute is not allowed unless a VLIW coprocessor has been configured\n-and enabled through command-line options.\n-@end table\n-\n @node MicroBlaze Function Attributes\n @subsection MicroBlaze Function Attributes\n \n@@ -7336,7 +7296,6 @@ attributes.\n * IA-64 Variable Attributes::\n * LoongArch Variable Attributes::\n * M32R/D Variable Attributes::\n-* MeP Variable Attributes::\n * Microsoft Windows Variable Attributes::\n * MSP430 Variable Attributes::\n * Nvidia PTX Variable Attributes::\n@@ -8182,70 +8141,6 @@ Medium and large model objects may live anywhere in the 32-bit address space\n addresses).\n @end table\n \n-@node MeP Variable Attributes\n-@subsection MeP Variable Attributes\n-\n-The MeP target has a number of addressing modes and busses.  The\n-@code{near} space spans the standard memory space's first 16 megabytes\n-(24 bits).  The @code{far} space spans the entire 32-bit memory space.\n-The @code{based} space is a 128-byte region in the memory space that\n-is addressed relative to the @code{$tp} register.  The @code{tiny}\n-space is a 65536-byte region relative to the @code{$gp} register.  In\n-addition to these memory regions, the MeP target has a separate 16-bit\n-control bus which is specified with @code{cb} attributes.\n-\n-@table @code\n-\n-@item based\n-@cindex @code{based} variable attribute, MeP\n-Any variable with the @code{based} attribute is assigned to the\n-@code{.based} section, and is accessed with relative to the\n-@code{$tp} register.\n-\n-@item tiny\n-@cindex @code{tiny} variable attribute, MeP\n-Likewise, the @code{tiny} attribute assigned variables to the\n-@code{.tiny} section, relative to the @code{$gp} register.\n-\n-@item near\n-@cindex @code{near} variable attribute, MeP\n-Variables with the @code{near} attribute are assumed to have addresses\n-that fit in a 24-bit addressing mode.  This is the default for large\n-variables (@code{-mtiny=4} is the default) but this attribute can\n-override @code{-mtiny=} for small variables, or override @code{-ml}.\n-\n-@item far\n-@cindex @code{far} variable attribute, MeP\n-Variables with the @code{far} attribute are addressed using a full\n-32-bit address.  Since this covers the entire memory space, this\n-allows modules to make no assumptions about where variables might be\n-stored.\n-\n-@item io\n-@cindex @code{io} variable attribute, MeP\n-@itemx io (@var{addr})\n-Variables with the @code{io} attribute are used to address\n-memory-mapped peripherals.  If an address is specified, the variable\n-is assigned that address, else it is not assigned an address (it is\n-assumed some other module assigns an address).  Example:\n-\n-@smallexample\n-int timer_count __attribute__((io(0x123)));\n-@end smallexample\n-\n-@item cb\n-@itemx cb (@var{addr})\n-@cindex @code{cb} variable attribute, MeP\n-Variables with the @code{cb} attribute are used to access the control\n-bus, using special instructions.  @code{addr} indicates the control bus\n-address.  Example:\n-\n-@smallexample\n-int cpu_clock __attribute__((cb(0x123)));\n-@end smallexample\n-\n-@end table\n-\n @node Microsoft Windows Variable Attributes\n @subsection Microsoft Windows Variable Attributes\n \n@@ -8484,7 +8379,6 @@ attributes.\n * ARC Type Attributes::\n * ARM Type Attributes::\n * BPF Type Attributes::\n-* MeP Type Attributes::\n * PowerPC Type Attributes::\n * x86 Type Attributes::\n @end menu\n@@ -9069,18 +8963,6 @@ of that type. The behavior is equivalent to the programmer manually\n wrapping every such access with @code{__builtin_preserve_access_index}.\n \n \n-@node MeP Type Attributes\n-@subsection MeP Type Attributes\n-\n-@cindex @code{based} type attribute, MeP\n-@cindex @code{tiny} type attribute, MeP\n-@cindex @code{near} type attribute, MeP\n-@cindex @code{far} type attribute, MeP\n-Many of the MeP variable attributes may be applied to types as well.\n-Specifically, the @code{based}, @code{tiny}, @code{near}, and\n-@code{far} attributes may be applied to either.  The @code{io} and\n-@code{cb} attributes may not be applied to types.\n-\n @node PowerPC Type Attributes\n @subsection PowerPC Type Attributes\n \n@@ -23599,7 +23481,6 @@ information.\n * AArch64 Pragmas::\n * ARM Pragmas::\n * M32C Pragmas::\n-* MeP Pragmas::\n * PRU Pragmas::\n * RS/6000 and PowerPC Pragmas::\n * S/390 Pragmas::\n@@ -23681,77 +23562,6 @@ char port3;\n \n @end table\n \n-@node MeP Pragmas\n-@subsection MeP Pragmas\n-\n-@table @code\n-\n-@item custom io_volatile (on|off)\n-@cindex pragma, custom io_volatile\n-Overrides the command-line option @code{-mio-volatile} for the current\n-file.  Note that for compatibility with future GCC releases, this\n-option should only be used once before any @code{io} variables in each\n-file.\n-\n-@item GCC coprocessor available @var{registers}\n-@cindex pragma, coprocessor available\n-Specifies which coprocessor registers are available to the register\n-allocator.  @var{registers} may be a single register, register range\n-separated by ellipses, or comma-separated list of those.  Example:\n-\n-@smallexample\n-#pragma GCC coprocessor available $c0...$c10, $c28\n-@end smallexample\n-\n-@item GCC coprocessor call_saved @var{registers}\n-@cindex pragma, coprocessor call_saved\n-Specifies which coprocessor registers are to be saved and restored by\n-any function using them.  @var{registers} may be a single register,\n-register range separated by ellipses, or comma-separated list of\n-those.  Example:\n-\n-@smallexample\n-#pragma GCC coprocessor call_saved $c4...$c6, $c31\n-@end smallexample\n-\n-@item GCC coprocessor subclass '(A|B|C|D)' = @var{registers}\n-@cindex pragma, coprocessor subclass\n-Creates and defines a register class.  These register classes can be\n-used by inline @code{asm} constructs.  @var{registers} may be a single\n-register, register range separated by ellipses, or comma-separated\n-list of those.  Example:\n-\n-@smallexample\n-#pragma GCC coprocessor subclass 'B' = $c2, $c4, $c6\n-\n-asm (\"cpfoo %0\" : \"=B\" (x));\n-@end smallexample\n-\n-@item GCC disinterrupt @var{name} , @var{name} @dots{}\n-@cindex pragma, disinterrupt\n-For the named functions, the compiler adds code to disable interrupts\n-for the duration of those functions.  If any functions so named \n-are not encountered in the source, a warning is emitted that the pragma is\n-not used.  Examples:\n-\n-@smallexample\n-#pragma disinterrupt foo\n-#pragma disinterrupt bar, grill\n-int foo () @{ @dots{} @}\n-@end smallexample\n-\n-@item GCC call @var{name} , @var{name} @dots{}\n-@cindex pragma, call\n-For the named functions, the compiler always uses a register-indirect\n-call model when calling the named functions.  Examples:\n-\n-@smallexample\n-extern int foo ();\n-#pragma call foo\n-@end smallexample\n-\n-@end table\n-\n @node PRU Pragmas\n @subsection PRU Pragmas\n "}, {"sha": "12be55f026ad844c3a9f4e0c1c2b41a3c124e7a3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 171, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298707b8ceaed91921b322356bde6bf986901ed8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298707b8ceaed91921b322356bde6bf986901ed8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=298707b8ceaed91921b322356bde6bf986901ed8", "patch": "@@ -1058,13 +1058,6 @@ Objective-C and Objective-C++ Dialects}.\n -mno-callgraph-data  -mslow-bytes  -mno-slow-bytes  -mno-lsim @gol\n -mlittle-endian  -mbig-endian  -m210  -m340  -mstack-increment}\n \n-@emph{MeP Options}\n-@gccoptlist{-mabsdiff  -mall-opts  -maverage  -mbased=@var{n}  -mbitops @gol\n--mc=@var{n}  -mclip  -mconfig=@var{name}  -mcop  -mcop32  -mcop64  -mivc2 @gol\n--mdc  -mdiv  -meb  -mel  -mio-volatile  -ml  -mleadz  -mm  -mminmax @gol\n--mmult  -mno-opts  -mrepeat  -ms  -msatur  -msdram  -msim  -msimnovec  -mtf @gol\n--mtiny=@var{n}}\n-\n @emph{MicroBlaze Options}\n @gccoptlist{-msoft-float  -mhard-float  -msmall-divides  -mcpu=@var{cpu} @gol\n -mmemcpy  -mxl-soft-mul  -mxl-soft-div  -mxl-barrel-shift @gol\n@@ -19719,7 +19712,6 @@ platform.\n * M32R/D Options::\n * M680x0 Options::\n * MCore Options::\n-* MeP Options::\n * MicroBlaze Options::\n * MIPS Options::\n * MMIX Options::\n@@ -26015,169 +26007,6 @@ value is 0x1000.\n \n @end table\n \n-@node MeP Options\n-@subsection MeP Options\n-@cindex MeP options\n-\n-@table @gcctabopt\n-\n-@item -mabsdiff\n-@opindex mabsdiff\n-Enables the @code{abs} instruction, which is the absolute difference\n-between two registers.\n-\n-@item -mall-opts\n-@opindex mall-opts\n-Enables all the optional instructions---average, multiply, divide, bit\n-operations, leading zero, absolute difference, min/max, clip, and\n-saturation.\n-\n-\n-@item -maverage\n-@opindex maverage\n-Enables the @code{ave} instruction, which computes the average of two\n-registers.\n-\n-@item -mbased=@var{n}\n-@opindex mbased=\n-Variables of size @var{n} bytes or smaller are placed in the\n-@code{.based} section by default.  Based variables use the @code{$tp}\n-register as a base register, and there is a 128-byte limit to the\n-@code{.based} section.\n-\n-@item -mbitops\n-@opindex mbitops\n-Enables the bit operation instructions---bit test (@code{btstm}), set\n-(@code{bsetm}), clear (@code{bclrm}), invert (@code{bnotm}), and\n-test-and-set (@code{tas}).\n-\n-@item -mc=@var{name}\n-@opindex mc=\n-Selects which section constant data is placed in.  @var{name} may\n-be @samp{tiny}, @samp{near}, or @samp{far}.\n-\n-@item -mclip\n-@opindex mclip\n-Enables the @code{clip} instruction.  Note that @option{-mclip} is not\n-useful unless you also provide @option{-mminmax}.\n-\n-@item -mconfig=@var{name}\n-@opindex mconfig=\n-Selects one of the built-in core configurations.  Each MeP chip has\n-one or more modules in it; each module has a core CPU and a variety of\n-coprocessors, optional instructions, and peripherals.  The\n-@code{MeP-Integrator} tool, not part of GCC, provides these\n-configurations through this option; using this option is the same as\n-using all the corresponding command-line options.  The default\n-configuration is @samp{default}.\n-\n-@item -mcop\n-@opindex mcop\n-Enables the coprocessor instructions.  By default, this is a 32-bit\n-coprocessor.  Note that the coprocessor is normally enabled via the\n-@option{-mconfig=} option.\n-\n-@item -mcop32\n-@opindex mcop32\n-Enables the 32-bit coprocessor's instructions.\n-\n-@item -mcop64\n-@opindex mcop64\n-Enables the 64-bit coprocessor's instructions.\n-\n-@item -mivc2\n-@opindex mivc2\n-Enables IVC2 scheduling.  IVC2 is a 64-bit VLIW coprocessor.\n-\n-@item -mdc\n-@opindex mdc\n-Causes constant variables to be placed in the @code{.near} section.\n-\n-@item -mdiv\n-@opindex mdiv\n-Enables the @code{div} and @code{divu} instructions.\n-\n-@item -meb\n-@opindex meb\n-Generate big-endian code.\n-\n-@item -mel\n-@opindex mel\n-Generate little-endian code.\n-\n-@item -mio-volatile\n-@opindex mio-volatile\n-Tells the compiler that any variable marked with the @code{io}\n-attribute is to be considered volatile.\n-\n-@item -ml\n-@opindex ml\n-Causes variables to be assigned to the @code{.far} section by default.\n-\n-@item -mleadz\n-@opindex mleadz\n-Enables the @code{leadz} (leading zero) instruction.\n-\n-@item -mm\n-@opindex mm\n-Causes variables to be assigned to the @code{.near} section by default.\n-\n-@item -mminmax\n-@opindex mminmax\n-Enables the @code{min} and @code{max} instructions.\n-\n-@item -mmult\n-@opindex mmult\n-Enables the multiplication and multiply-accumulate instructions.\n-\n-@item -mno-opts\n-@opindex mno-opts\n-Disables all the optional instructions enabled by @option{-mall-opts}.\n-\n-@item -mrepeat\n-@opindex mrepeat\n-Enables the @code{repeat} and @code{erepeat} instructions, used for\n-low-overhead looping.\n-\n-@item -ms\n-@opindex ms\n-Causes all variables to default to the @code{.tiny} section.  Note\n-that there is a 65536-byte limit to this section.  Accesses to these\n-variables use the @code{%gp} base register.\n-\n-@item -msatur\n-@opindex msatur\n-Enables the saturation instructions.  Note that the compiler does not\n-currently generate these itself, but this option is included for\n-compatibility with other tools, like @code{as}.\n-\n-@item -msdram\n-@opindex msdram\n-Link the SDRAM-based runtime instead of the default ROM-based runtime.\n-\n-@item -msim\n-@opindex msim\n-Link the simulator run-time libraries.\n-\n-@item -msimnovec\n-@opindex msimnovec\n-Link the simulator runtime libraries, excluding built-in support\n-for reset and exception vectors and tables.\n-\n-@item -mtf\n-@opindex mtf\n-Causes all functions to default to the @code{.far} section.  Without\n-this option, functions default to the @code{.near} section.\n-\n-@item -mtiny=@var{n}\n-@opindex mtiny=\n-Variables that are @var{n} bytes or smaller are allocated to the\n-@code{.tiny} section.  These variables use the @code{$gp} base\n-register.  The default for this option is 4, but note that there's a\n-65536-byte limit to the @code{.tiny} section.\n-\n-@end table\n-\n @node MicroBlaze Options\n @subsection MicroBlaze Options\n @cindex MicroBlaze Options"}]}