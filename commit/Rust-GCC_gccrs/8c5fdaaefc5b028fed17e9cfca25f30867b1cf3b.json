{"sha": "8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM1ZmRhYWVmYzViMDI4ZmVkMTdlOWNmY2EyNWYzMDg2N2IxY2YzYg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2011-05-24T16:28:38Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2011-05-24T16:28:38Z"}, "message": "[multiple changes]\n\n2011-05-24  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/48633\n\t* ira-build.c (loop_with_eh_edge_p): New function.\n\t(mark_loops_for_removal): Use it.\n\n2011-05-24  Michael Matz  <matz@gcc.gnu.org>\n\n\tPR rtl-optimization/48633\n\t* g++.dg/pr48633.C: New test.\n\nFrom-SVN: r174124", "tree": {"sha": "4fb4b54df96d20c8e00030ffa6393278042fcecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fb4b54df96d20c8e00030ffa6393278042fcecf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b/comments", "author": null, "committer": null, "parents": [{"sha": "113a5be6a925073c43ccc1bbe2df98d5dade330a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113a5be6a925073c43ccc1bbe2df98d5dade330a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113a5be6a925073c43ccc1bbe2df98d5dade330a"}], "stats": {"total": 73, "additions": 68, "deletions": 5}, "files": [{"sha": "91e550ae3be59c6d17dfa3c1deabc4a430e404a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b", "patch": "@@ -1,4 +1,10 @@\n-2011-05-13  Vladimir Makarov  <vmakarov@redhat.com>\n+2011-05-24  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/48633\n+\t* ira-build.c (loop_with_eh_edge_p): New function.\n+\t(mark_loops_for_removal): Use it.\n+\n+2011-05-24  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/48971\n \t* ira.c (setup_pressure_classes): Don't check register move cost"}, {"sha": "31d0199791ae02d212641e2d11ae1eaeb05ac376", "filename": "gcc/ira-build.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b", "patch": "@@ -1806,6 +1806,25 @@ low_pressure_loop_node_p (ira_loop_tree_node_t node)\n   return true;\n }\n \n+/* Return TRUE if LOOP has a EH enter or exit edge.  */\n+static bool\n+loop_with_eh_edge_p (struct loop *loop)\n+{\n+  int i;\n+  edge_iterator ei;\n+  edge e;\n+  VEC (edge, heap) *edges;\n+\n+  FOR_EACH_EDGE (e, ei, loop->header->preds)\n+    if (e->flags & EDGE_EH)\n+      return true;\n+  edges = get_loop_exit_edges (loop);\n+  FOR_EACH_VEC_ELT (edge, edges, i, e)\n+    if (e->flags & EDGE_EH)\n+      return true;\n+  return false;\n+}\n+\n /* Sort loops for marking them for removal.  We put already marked\n    loops first, then less frequent loops next, and then outer loops\n    next.  */\n@@ -1829,14 +1848,18 @@ loop_compare_func (const void *v1p, const void *v2p)\n   return l1->loop->num - l2->loop->num;\n }\n \n-\n /* Mark loops which should be removed from regional allocation.  We\n    remove a loop with low register pressure inside another loop with\n    register pressure.  In this case a separate allocation of the loop\n    hardly helps (for irregular register file architecture it could\n    help by choosing a better hard register in the loop but we prefer\n    faster allocation even in this case).  We also remove cheap loops\n-   if there are more than IRA_MAX_LOOPS_NUM of them.  */\n+   if there are more than IRA_MAX_LOOPS_NUM of them.  Loop with EH\n+   exit or enter edges are removed too because the allocation might\n+   require put pseudo moves on the EH edges (we could still do this\n+   for pseudos with caller saved hard registers in some cases but it\n+   is impossible to say here or during top-down allocation pass what\n+   hard register the pseudos get finally).  */\n static void\n mark_loops_for_removal (void)\n {\n@@ -1859,8 +1882,9 @@ mark_loops_for_removal (void)\n \t  }\n \tsorted_loops[n++] = &ira_loop_nodes[i];\n \tira_loop_nodes[i].to_remove_p\n-\t  = (low_pressure_loop_node_p (ira_loop_nodes[i].parent)\n-\t     && low_pressure_loop_node_p (&ira_loop_nodes[i]));\n+\t  = ((low_pressure_loop_node_p (ira_loop_nodes[i].parent)\n+\t      && low_pressure_loop_node_p (&ira_loop_nodes[i]))\n+\t     || loop_with_eh_edge_p (ira_loop_nodes[i].loop));\n       }\n   qsort (sorted_loops, n, sizeof (ira_loop_tree_node_t), loop_compare_func);\n   for (i = 0; n - i + 1 > IRA_MAX_LOOPS_NUM; i++)"}, {"sha": "beee8a6fbd6b9d8038952689aa72f7191752e4a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b", "patch": "@@ -1,3 +1,8 @@\n+2011-05-24  Michael Matz  <matz@gcc.gnu.org>\n+\n+\tPR rtl-optimization/48633\n+\t* g++.dg/pr48633.C: New test.\n+\n 2011-05-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/49133"}, {"sha": "90f053a74c88a5c6fe5310dec5b113dbf0c8b5ae", "filename": "gcc/testsuite/g++.dg/pr48633.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr48633.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr48633.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr48633.C?ref=8c5fdaaefc5b028fed17e9cfca25f30867b1cf3b", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile} */\n+/* { dg-options \"-O2 -fira-region=all -fnon-call-exceptions\" } */\n+extern long double getme (void);\n+extern void useme (long double);\n+struct Frame {\n+    long double tmp;\n+};\n+void bugme (int n, long double ld1, long double ld2, long double ld3,\n+            long double ld4, long double ld5)\n+{\n+  Frame f;\n+  int i;\n+  f.tmp = getme();\n+  try {\n+    for (i = 0; i < n; i++)\n+      {\n+        f.tmp += 1.0;\n+      }\n+  } catch (...) {\n+    f.tmp += 1.0;\n+  }\n+  ld1++;\n+  ld2++;\n+  ld3++;\n+  ld4++;\n+  ld5++;\n+  useme (f.tmp);\n+}"}]}