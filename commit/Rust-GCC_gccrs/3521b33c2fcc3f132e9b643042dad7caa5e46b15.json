{"sha": "3521b33c2fcc3f132e9b643042dad7caa5e46b15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUyMWIzM2MyZmNjM2YxMzJlOWI2NDMwNDJkYWQ3Y2FhNWU0NmIxNQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-02-23T21:43:18Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-23T21:43:18Z"}, "message": "Remove -fwritable-strings.\n\ngcc/\n\tRemove -fwritable-strings.\n\t* c-common.c (fix_string_type): Don't check\n\tflag_writable_strings.\n\t(fix_string_type): Likewise.\n\t* c-opts.c (set_std_c89): Don't initialize\n\tflag_writable_strings.\n\t(set_std_c99): Likewise.\n\t* common.opt (fwritable-strings): Remove.\n\t* flags.h: Remove the external declaration of\n\tflag_writable_strings.\n\t* opts.c (common_handle_option) <OPT_fwritable_strings>:\n\tRemove.\n\t* toplev.c (flag_writable_strings): Remove.\n\t(f_options): Remove an entry for writable-strings.\n\t* varasm.c (const_hash_1) <STRING_CST>: Don't check\n\tflag_writable_strings.\n\t(compare_constant) <STRING_CST>: Likewise.\n\t(build_constant_desc): Likewise.\n\t* config/darwin.c (machopic_select_section): Likewise.\n\t* config/arm/arm.c (AOF_ASSEMBLER): Likewise.\n\t* config/arm/pe.c (arm_pe_encode_section_info): Likewise.\n\t* config/iq2000/iq2000.c (iq2000_select_section): Likewise.\n\t* config/mips/mips.c (mips_select_section): Likewise.\n\t(mips_encode_section_info): Likewise.\n\t* config/pa/pa.c (pa_select_section): Likewise.\n\t* config/pa/pa.h (TEXT_SPACE_P): Likewise.\n\t* config/v850/v850.c (v850_select_section): Likewise.\n\t* doc/invoke.texi (-fwritable-strings): Remove.\n\t(-fno-const-strings): Don't mention -fwritable-strings.\n\t* doc/trouble.texi: Don't mention -fwritable-strings.\n\ngcc/cp/\n\t* decl.c (cxx_init_decl_processing): Don't check\n\tflag_writable_strings.\n\ngcc/testsuite/\n\t* gcc.dg/fwritable-strings-1.c: Remove.\n\nCo-Authored-By: Kazu Hirata <kazu@cs.umass.edu>\n\nFrom-SVN: r78333", "tree": {"sha": "796f91d81523d174b9d97e4a2c0bf9200c831f94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/796f91d81523d174b9d97e4a2c0bf9200c831f94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3521b33c2fcc3f132e9b643042dad7caa5e46b15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3521b33c2fcc3f132e9b643042dad7caa5e46b15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3521b33c2fcc3f132e9b643042dad7caa5e46b15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3521b33c2fcc3f132e9b643042dad7caa5e46b15/comments", "author": null, "committer": null, "parents": [{"sha": "eac8a696d5418a3bd48d41980b2dc3095f711778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eac8a696d5418a3bd48d41980b2dc3095f711778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eac8a696d5418a3bd48d41980b2dc3095f711778"}], "stats": {"total": 219, "additions": 83, "deletions": 136}, "files": [{"sha": "79cf6b0ebf892e62709095c4762ee6a7fbc83307", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -1,3 +1,37 @@\n+2004-02-23  Zack Weinberg  <zack@codesourcery.com>\n+\t    Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\tRemove -fwritable-strings.\n+\t* c-common.c (fix_string_type): Don't check\n+\tflag_writable_strings.\n+\t(fix_string_type): Likewise.\n+\t* c-opts.c (set_std_c89): Don't initialize\n+\tflag_writable_strings.\n+\t(set_std_c99): Likewise.\n+\t* common.opt (fwritable-strings): Remove.\n+\t* flags.h: Remove the external declaration of\n+\tflag_writable_strings.\n+\t* opts.c (common_handle_option) <OPT_fwritable_strings>:\n+\tRemove.\n+\t* toplev.c (flag_writable_strings): Remove.\n+\t(f_options): Remove an entry for writable-strings.\n+\t* varasm.c (const_hash_1) <STRING_CST>: Don't check\n+\tflag_writable_strings.\n+\t(compare_constant) <STRING_CST>: Likewise.\n+\t(build_constant_desc): Likewise.\n+\t* config/darwin.c (machopic_select_section): Likewise.\n+\t* config/arm/arm.c (AOF_ASSEMBLER): Likewise.\n+\t* config/arm/pe.c (arm_pe_encode_section_info): Likewise.\n+\t* config/iq2000/iq2000.c (iq2000_select_section): Likewise.\n+\t* config/mips/mips.c (mips_select_section): Likewise.\n+\t(mips_encode_section_info): Likewise.\n+\t* config/pa/pa.c (pa_select_section): Likewise.\n+\t* config/pa/pa.h (TEXT_SPACE_P): Likewise.\n+\t* config/v850/v850.c (v850_select_section): Likewise.\n+\t* doc/invoke.texi (-fwritable-strings): Remove.\n+\t(-fno-const-strings): Don't mention -fwritable-strings.\n+\t* doc/trouble.texi: Don't mention -fwritable-strings.\n+\n 2003-02-23  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* doc/install.texi: Update for switch of boehm-gc to autoconf 2.57."}, {"sha": "3d9dbfa3297b374661ec810bb2309d9b5677a35b", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -1164,7 +1164,7 @@ fix_string_type (tree value)\n      -Wwrite-strings says make the string constant an array of const char\n      so that copying it to a non-const pointer will get a warning.\n      For C++, this is the standard behavior.  */\n-  if (flag_const_strings && ! flag_writable_strings)\n+  if (flag_const_strings)\n     {\n       tree elements\n \t= build_type_variant (wide_flag ? wchar_type_node : char_type_node,\n@@ -1179,7 +1179,7 @@ fix_string_type (tree value)\n \t\t\t  build_index_type (build_int_2 (nchars - 1, 0)));\n \n   TREE_CONSTANT (value) = 1;\n-  TREE_READONLY (value) = ! flag_writable_strings;\n+  TREE_READONLY (value) = 1;\n   TREE_STATIC (value) = 1;\n   return value;\n }"}, {"sha": "b4f3851786380a04223936e6320818d7c9ebfdb6", "filename": "gcc/c-opts.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -1521,7 +1521,6 @@ set_std_c89 (int c94, int iso)\n   flag_no_nonansi_builtin = iso;\n   flag_isoc94 = c94;\n   flag_isoc99 = 0;\n-  flag_writable_strings = 0;\n }\n \n /* Set the C 99 standard (without GNU extensions if ISO).  */\n@@ -1534,7 +1533,6 @@ set_std_c99 (int iso)\n   flag_iso = iso;\n   flag_isoc99 = 1;\n   flag_isoc94 = 1;\n-  flag_writable_strings = 0;\n }\n \n /* Set the C++ 98 standard (without GNU extensions if ISO).  */"}, {"sha": "cc7f218426cfe312d1c130c0c0733eb0a80ca39b", "filename": "gcc/common.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -738,10 +738,6 @@ fwrapv\n Common\n Assume signed arithmetic overflow wraps around\n \n-fwritable-strings\n-Common\n-Store strings in writable data section\n-\n fzero-initialized-in-bss\n Common\n Put zero initialized data in the bss section"}, {"sha": "c774f19b75773d7b7f146dd4826f262ed945384d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -13948,8 +13948,7 @@ arm_encode_section_info (tree decl, rtx rtl, int first)\n   /* This doesn't work with AOF syntax, since the string table may be in\n      a different AREA.  */\n #ifndef AOF_ASSEMBLER\n-  if (optimize > 0 && TREE_CONSTANT (decl)\n-      && (!flag_writable_strings || TREE_CODE (decl) != STRING_CST))\n+  if (optimize > 0 && TREE_CONSTANT (decl))\n     SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n #endif\n "}, {"sha": "702ea3e43fa691ee49ec09b075a6b3b4c0b6abb8", "filename": "gcc/config/arm/pe.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fconfig%2Farm%2Fpe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fconfig%2Farm%2Fpe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.c?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -213,8 +213,7 @@ arm_pe_encode_section_info (decl, rtl, first)\n      int first ATTRIBUTE_UNUSED;\n {\n   /* This bit is copied from arm_encode_section_info.  */\n-  if (optimize > 0 && TREE_CONSTANT (decl)\n-      && (!flag_writable_strings || TREE_CODE (decl) != STRING_CST))\n+  if (optimize > 0 && TREE_CONSTANT (decl))\n     SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n \n   /* Mark the decl so we can tell from the rtl whether the object is"}, {"sha": "667c21e9b8760329294fd025914899b799496987", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -1215,8 +1215,7 @@ machopic_select_section (tree exp, int reloc,\n \n   if (TREE_CODE (exp) == STRING_CST\n       && ((size_t) TREE_STRING_LENGTH (exp)\n-\t  == strlen (TREE_STRING_POINTER (exp)) + 1)\n-      && ! flag_writable_strings)\n+\t  == strlen (TREE_STRING_POINTER (exp)) + 1))\n     cstring_section ();\n   else if ((TREE_CODE (exp) == INTEGER_CST || TREE_CODE (exp) == REAL_CST)\n \t   && flag_merge_constants)"}, {"sha": "55bda5fdf4c3b48949ca75f57ff01ef0481e3457", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -2623,15 +2623,13 @@ iq2000_select_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n     {\n       /* For embedded applications, always put an object in read-only data\n \t if possible, in order to reduce RAM usage.  */\n-      if (((TREE_CODE (decl) == VAR_DECL\n-\t    && TREE_READONLY (decl) && !TREE_SIDE_EFFECTS (decl)\n-\t    && DECL_INITIAL (decl)\n-\t    && (DECL_INITIAL (decl) == error_mark_node\n-\t\t|| TREE_CONSTANT (DECL_INITIAL (decl))))\n-\t   /* Deal with calls from output_constant_def_contents.  */\n-\t   || (TREE_CODE (decl) != VAR_DECL\n-\t       && (TREE_CODE (decl) != STRING_CST\n-\t\t   || !flag_writable_strings))))\n+      if ((TREE_CODE (decl) == VAR_DECL\n+\t   && TREE_READONLY (decl) && !TREE_SIDE_EFFECTS (decl)\n+\t   && DECL_INITIAL (decl)\n+\t   && (DECL_INITIAL (decl) == error_mark_node\n+\t       || TREE_CONSTANT (DECL_INITIAL (decl))))\n+\t  /* Deal with calls from output_constant_def_contents.  */\n+\t  || TREE_CODE (decl) != VAR_DECL)\n \treadonly_data_section ();\n       else\n \tdata_section ();\n@@ -2640,15 +2638,13 @@ iq2000_select_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n     {\n       /* For hosted applications, always put an object in small data if\n \t possible, as this gives the best performance.  */\n-      if (((TREE_CODE (decl) == VAR_DECL\n-\t\t && TREE_READONLY (decl) && !TREE_SIDE_EFFECTS (decl)\n-\t\t && DECL_INITIAL (decl)\n-\t\t && (DECL_INITIAL (decl) == error_mark_node\n-\t\t     || TREE_CONSTANT (DECL_INITIAL (decl))))\n-\t\t/* Deal with calls from output_constant_def_contents.  */\n-\t\t|| (TREE_CODE (decl) != VAR_DECL\n-\t\t    && (TREE_CODE (decl) != STRING_CST\n-\t\t\t|| !flag_writable_strings))))\n+      if ((TREE_CODE (decl) == VAR_DECL\n+\t   && TREE_READONLY (decl) && !TREE_SIDE_EFFECTS (decl)\n+\t   && DECL_INITIAL (decl)\n+\t   && (DECL_INITIAL (decl) == error_mark_node\n+\t       || TREE_CONSTANT (DECL_INITIAL (decl))))\n+\t  /* Deal with calls from output_constant_def_contents.  */\n+\t  || TREE_CODE (decl) != VAR_DECL)\n \treadonly_data_section ();\n       else\n \tdata_section ();"}, {"sha": "aba66399611178f6f7de3cefdb887ed9bb3eed93", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -7283,8 +7283,7 @@ mips_select_section (tree decl, int reloc,\n \t\t     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED)\n {\n   if ((TARGET_EMBEDDED_PIC || TARGET_MIPS16)\n-      && TREE_CODE (decl) == STRING_CST\n-      && !flag_writable_strings)\n+      && TREE_CODE (decl) == STRING_CST)\n     /* For embedded position independent code, put constant strings in the\n        text section, because the data section is limited to 64K in size.\n        For mips16 code, put strings in the text section so that a PC\n@@ -7366,7 +7365,6 @@ mips_encode_section_info (tree decl, rtx rtl, int first)\n   if (TARGET_MIPS16)\n     {\n       if (first && TREE_CODE (decl) == STRING_CST\n-          && ! flag_writable_strings\n           /* If this string is from a function, and the function will\n              go in a gnu linkonce section, then we can't directly\n              access the string.  This gets an assembler error\n@@ -7393,8 +7391,7 @@ mips_encode_section_info (tree decl, rtx rtl, int first)\n         SYMBOL_REF_FLAG (symbol) = 1;\n       else if (TREE_CODE (decl) == FUNCTION_DECL)\n         SYMBOL_REF_FLAG (symbol) = 0;\n-      else if (TREE_CODE (decl) == STRING_CST\n-               && ! flag_writable_strings)\n+      else if (TREE_CODE (decl) == STRING_CST)\n         SYMBOL_REF_FLAG (symbol) = 0;\n       else\n         SYMBOL_REF_FLAG (symbol) = 1;"}, {"sha": "e2074a13bcbd38051f69cfc7b53d6e02993e576b", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -9076,7 +9076,6 @@ pa_select_section (tree exp, int reloc,\n       && !reloc)\n     readonly_data_section ();\n   else if (TREE_CODE_CLASS (TREE_CODE (exp)) == 'c'\n-\t   && !(TREE_CODE (exp) == STRING_CST && flag_writable_strings)\n \t   && !reloc)\n     readonly_data_section ();\n   else"}, {"sha": "b83acbce8a69ca38d44e12aab105659206318f77", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -1666,8 +1666,7 @@ do { \t\t\t\t\t\t\t\t\t\\\n        && TREE_READONLY (DECL) && ! TREE_SIDE_EFFECTS (DECL)\t\t\\\n        && (! DECL_INITIAL (DECL) || ! reloc_needed (DECL_INITIAL (DECL))) \\\n        && !flag_pic)\t\t\t\t\t\t\t\\\n-   || (TREE_CODE_CLASS (TREE_CODE (DECL)) == 'c'\t\t\t\\\n-       && !(TREE_CODE (DECL) == STRING_CST && flag_writable_strings)))\n+   || (TREE_CODE_CLASS (TREE_CODE (DECL)) == 'c'))\n \n #define FUNCTION_NAME_P(NAME)  (*(NAME) == '@')\n "}, {"sha": "83372624309152916eb827837376746be846f425", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -3399,13 +3399,6 @@ v850_select_section (tree exp,\n \t  break;\n         }\n     }\n-  else if (TREE_CODE (exp) == STRING_CST)\n-    {\n-      if (! flag_writable_strings)\n-\treadonly_data_section ();\n-      else\n-\tdata_section ();\n-    }\n   else\n     readonly_data_section ();\n }"}, {"sha": "875f7a57bcc15a1d03352c36b1c2baa91b4e6ecc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -1,3 +1,9 @@\n+2004-02-23  Zack Weinberg  <zack@codesourcery.com>\n+\t    Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* decl.c (cxx_init_decl_processing): Don't check\n+\tflag_writable_strings.\n+\n 2004-02-23  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c++/14156"}, {"sha": "6a4d6efe80a446d5b8e74c23e19250791573b428", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -3104,11 +3104,6 @@ cxx_init_decl_processing (void)\n \n   /* Show we use EH for cleanups.  */\n   using_eh_for_cleanups ();\n-\n-  /* Maintain consistency.  Perhaps we should just complain if they\n-     say -fwritable-strings?  */\n-  if (flag_writable_strings)\n-    flag_const_strings = 0;\n }\n \n /* Generate an initializer for a function naming variable from"}, {"sha": "b703dc39b99d62397a2122f8e9aea2dfcbdfcc32", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -166,8 +166,7 @@ in the following sections.\n -trigraphs  -no-integrated-cpp  -traditional  -traditional-cpp @gol\n -fallow-single-precision  -fcond-mismatch @gol\n -fsigned-bitfields  -fsigned-char @gol\n--funsigned-bitfields  -funsigned-char @gol\n--fwritable-strings}\n+-funsigned-bitfields  -funsigned-char}\n \n @item C++ Language Options\n @xref{C++ Dialect Options,,Options Controlling C++ Dialect}.\n@@ -1210,17 +1209,6 @@ These options control whether a bit-field is signed or unsigned, when the\n declaration does not use either @code{signed} or @code{unsigned}.  By\n default, such a bit-field is signed, because this is consistent: the\n basic integer types such as @code{int} are signed types.\n-\n-@item -fwritable-strings\n-@opindex fwritable-strings\n-Store string constants in the writable data segment and don't uniquize\n-them.  This is for compatibility with old programs which assume they can\n-write into string constants.\n-\n-Writing into string constants is a very bad idea; ``constants'' should\n-be constant.\n-\n-This option is deprecated.\n @end table\n \n @node C++ Dialect Options\n@@ -1292,8 +1280,7 @@ been added for putting variables into BSS without making them common.\n Give string constants type @code{char *} instead of type @code{const\n char *}.  By default, G++ uses type @code{const char *} as required by\n the standard.  Even if you use @option{-fno-const-strings}, you cannot\n-actually modify the value of a string constant, unless you also use\n-@option{-fwritable-strings}.\n+actually modify the value of a string constant.\n \n This option might be removed in a future release of G++.  For maximum\n portability, you should structure your code so that it works with"}, {"sha": "2af4525ac11e58fb21f672a3b3af8f7212378bee", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -431,17 +431,14 @@ string its argument points to.\n @cindex @code{sscanf}, and constant strings\n @cindex @code{fscanf}, and constant strings\n @cindex @code{scanf}, and constant strings\n-Another consequence is that @code{sscanf} does not work on some systems\n-when passed a string constant as its format control string or input.\n-This is because @code{sscanf} incorrectly tries to write into the string\n-constant.  Likewise @code{fscanf} and @code{scanf}.\n+Another consequence is that @code{sscanf} does not work on some very\n+old systems when passed a string constant as its format control string\n+or input.  This is because @code{sscanf} incorrectly tries to write\n+into the string constant.  Likewise @code{fscanf} and @code{scanf}.\n \n-@opindex fwritable-strings\n-The best solution to these problems is to change the program to use\n+The solution to these problems is to change the program to use\n @code{char}-array variables with initialization strings for these\n-purposes instead of string constants.  But if this is not possible,\n-you can use the @option{-fwritable-strings} flag, which directs GCC\n-to handle string constants the same way most C compilers do.\n+purposes instead of string constants.\n \n @item\n @code{-2147483648} is positive."}, {"sha": "81793a8e78e56cb7b27f8a62f2547e0c94374606", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -317,11 +317,6 @@ extern int flag_cse_skip_blocks;\n    perform miscellaneous relatively-expensive optimizations.  */\n extern int flag_expensive_optimizations;\n \n-/* Nonzero for -fwritable-strings:\n-   store string constants in data segment and don't uniquize them.  */\n-\n-extern int flag_writable_strings;\n-\n /* Nonzero means don't put addresses of constant functions in registers.\n    Used for compiling the Unix kernel, where strange substitutions are\n    done on the assembly output.  */"}, {"sha": "a4267f8772394ef0dc228e6ec78ebdbc3081b640", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -1455,10 +1455,6 @@ common_handle_option (size_t scode, const char *arg,\n       flag_wrapv = value;\n       break;\n \n-    case OPT_fwritable_strings:\n-      flag_writable_strings = value;\n-      break;\n-\n     case OPT_fzero_initialized_in_bss:\n       flag_zero_initialized_in_bss = value;\n       break;"}, {"sha": "f6089196ad99ac57e2d33a047caa156115acc252", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -1,3 +1,8 @@\n+2004-02-23  Zack Weinberg  <zack@codesourcery.com>\n+\t    Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* gcc.dg/fwritable-strings-1.c: Remove.\n+\n 2004-02-23  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c/14156"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/testsuite/gcc.dg/fwritable-strings-1.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Ftestsuite%2Fgcc.dg%2Ffwritable-strings-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Ftestsuite%2Fgcc.dg%2Ffwritable-strings-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffwritable-strings-1.c?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -1,18 +0,0 @@\n-/* PR c/12818 */\n-/* Origin: <fnf@ninemoons.com> */\n-\n-/* { dg-do run } */\n-/* { dg-options \"-fwritable-strings\" } */\n-/* { dg-error \"-fwritable-strings is deprecated\" \"\" { target *-*-* } 0 } */\n-\n-extern void abort(void);\n-\n-char *names[] = {\"alice\", \"bob\", \"john\"};\n-\n-int main (void)\n-{\n-  if (names[1][0] != 'b')\n-    abort();\n-\n-  return 0;\n-}"}, {"sha": "9e10d01d52ffba98bc89b3d65918dc945088ad6b", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -582,11 +582,6 @@ int flag_reduce_all_givs = 0;\n \n int flag_regmove = 0;\n \n-/* Nonzero for -fwritable-strings:\n-   store string constants in data segment and don't uniquize them.  */\n-\n-int flag_writable_strings = 0;\n-\n /* Nonzero means don't put addresses of constant functions in registers.\n    Used for compiling the Unix kernel, where strange substitutions are\n    done on the assembly output.  */\n@@ -1076,7 +1071,6 @@ static const lang_independent_options f_options[] =\n   {\"prefetch-loop-arrays\", &flag_prefetch_loop_arrays, 1 },\n   {\"move-all-movables\", &flag_move_all_movables, 1 },\n   {\"reduce-all-givs\", &flag_reduce_all_givs, 1 },\n-  {\"writable-strings\", &flag_writable_strings, 1 },\n   {\"peephole\", &flag_no_peephole, 0 },\n   {\"force-mem\", &flag_force_mem, 1 },\n   {\"force-addr\", &flag_force_addr, 1 },"}, {"sha": "061cbcac3ef32e6cd0a7d35dfe5a9a7e4e0b66c5", "filename": "gcc/varasm.c", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3521b33c2fcc3f132e9b643042dad7caa5e46b15/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=3521b33c2fcc3f132e9b643042dad7caa5e46b15", "patch": "@@ -2029,16 +2029,8 @@ const_hash_1 (const tree exp)\n       return real_hash (TREE_REAL_CST_PTR (exp));\n \n     case STRING_CST:\n-      if (flag_writable_strings)\n-\t{\n-\t  p = (char *) &exp;\n-\t  len = sizeof exp;\n-\t}\n-      else\n-\t{\n-\t  p = TREE_STRING_POINTER (exp);\n-\t  len = TREE_STRING_LENGTH (exp);\n-\t}\n+      p = TREE_STRING_POINTER (exp);\n+      len = TREE_STRING_LENGTH (exp);\n       break;\n \n     case COMPLEX_CST:\n@@ -2154,9 +2146,6 @@ compare_constant (const tree t1, const tree t2)\n       return REAL_VALUES_IDENTICAL (TREE_REAL_CST (t1), TREE_REAL_CST (t2));\n \n     case STRING_CST:\n-      if (flag_writable_strings)\n-\treturn t1 == t2;\n-\n       if (TYPE_MODE (TREE_TYPE (t1)) != TYPE_MODE (TREE_TYPE (t2)))\n \treturn 0;\n \n@@ -2359,10 +2348,7 @@ build_constant_desc (tree exp)\n   struct constant_descriptor_tree *desc;\n \n   desc = ggc_alloc (sizeof (*desc));\n-  if (flag_writable_strings && TREE_CODE (exp) == STRING_CST)\n-    desc->value = exp;\n-  else\n-    desc->value = copy_constant (exp);\n+  desc->value = copy_constant (exp);\n \n   /* Create a string containing the label name, in LABEL.  */\n   labelno = const_labelno++;\n@@ -2444,9 +2430,9 @@ maybe_output_constant_def_contents (struct constant_descriptor_tree *desc,\n     /* Already output; don't do it again.  */\n     return;\n \n-  /* The only constants that cannot safely be deferred, assuming the\n-     context allows it, are strings under flag_writable_strings.  */\n-  if (defer && (TREE_CODE (exp) != STRING_CST || !flag_writable_strings))\n+  /* We can always defer constants as long as the context allows\n+     doing so.  */\n+  if (defer)\n     {\n       /* Increment n_deferred_constants if it exists.  It needs to be at\n \t least as large as the number of constants actually referred to\n@@ -4486,7 +4472,7 @@ default_select_section (tree decl, int reloc,\n \treadonly = true;\n     }\n   else if (TREE_CODE (decl) == STRING_CST)\n-    readonly = !flag_writable_strings;\n+    readonly = true;\n   else if (! (flag_pic && reloc))\n     readonly = true;\n \n@@ -4544,12 +4530,7 @@ categorize_decl_for_section (tree decl, int reloc, int shlib)\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     return SECCAT_TEXT;\n   else if (TREE_CODE (decl) == STRING_CST)\n-    {\n-      if (flag_writable_strings)\n-\treturn SECCAT_DATA;\n-      else\n-\treturn SECCAT_RODATA_MERGE_STR;\n-    }\n+    return SECCAT_RODATA_MERGE_STR;\n   else if (TREE_CODE (decl) == VAR_DECL)\n     {\n       if (DECL_INITIAL (decl) == NULL"}]}