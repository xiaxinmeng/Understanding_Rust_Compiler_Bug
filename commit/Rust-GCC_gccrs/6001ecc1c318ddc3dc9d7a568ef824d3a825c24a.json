{"sha": "6001ecc1c318ddc3dc9d7a568ef824d3a825c24a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAwMWVjYzFjMzE4ZGRjM2RjOWQ3YTU2OGVmODI0ZDNhODI1YzI0YQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-04-24T17:07:25Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-04-24T17:07:25Z"}, "message": "Add Solaris support\n\nFrom-SVN: r11875", "tree": {"sha": "50640d548a40b37fd183530df860fbafc1dfde4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50640d548a40b37fd183530df860fbafc1dfde4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6001ecc1c318ddc3dc9d7a568ef824d3a825c24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6001ecc1c318ddc3dc9d7a568ef824d3a825c24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6001ecc1c318ddc3dc9d7a568ef824d3a825c24a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6001ecc1c318ddc3dc9d7a568ef824d3a825c24a/comments", "author": null, "committer": null, "parents": [{"sha": "c81bebd76d3fffc12823fb01a2bf7fc934d7b97e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c81bebd76d3fffc12823fb01a2bf7fc934d7b97e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c81bebd76d3fffc12823fb01a2bf7fc934d7b97e"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "57730b076f1f6abd9f73815fd933f72a6fc6d9e2", "filename": "gcc/ginclude/va-ppc.h", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6001ecc1c318ddc3dc9d7a568ef824d3a825c24a/gcc%2Fginclude%2Fva-ppc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6001ecc1c318ddc3dc9d7a568ef824d3a825c24a/gcc%2Fginclude%2Fva-ppc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-ppc.h?ref=6001ecc1c318ddc3dc9d7a568ef824d3a825c24a", "patch": "@@ -5,9 +5,16 @@\n #ifndef __GNUC_VA_LIST\n #define __GNUC_VA_LIST\n \n+#ifndef _SYS_VA_LIST_H\n+#define _SYS_VA_LIST_H\t\t/* Solaris sys/va_list.h */\n+\n+/* Solaris decided to rename overflow_arg_area to input_arg_area,\n+   so handle it via a macro.  */\n+#define __va_overflow(AP) (AP)->overflow_arg_area\n+\n /* Note that the names in this structure are in the user's namespace, but\n    that the V.4 abi explicitly states that these names should be used.  */\n-typedef struct {\n+typedef struct __va_list_tag {\n   char gpr;\t\t\t/* index into the array of 8 GPRs stored in the\n \t\t\t\t   register save area gpr=0 corresponds to r3,\n \t\t\t\t   gpr=1 to r4, etc. */\n@@ -17,7 +24,14 @@ typedef struct {\n   char *overflow_arg_area;\t/* location on stack that holds the next\n \t\t\t\t   overflow argument */\n   char *reg_save_area;\t\t/* where r3:r10 and f1:f8, if saved are stored */\n-} __gnuc_va_list[1];\n+} __va_list[1], __gnuc_va_list[1];\n+\n+#else /* _SYS_VA_LIST */\n+\n+typedef __va_list __gnuc_va_list;\n+#define __va_overflow(AP) (AP)->input_arg_area\n+\n+#endif /* not _SYS_VA_LIST */\n #endif /* not __GNUC_VA_LIST */\n \n /* If this is for internal libc use, don't define anything but\n@@ -64,9 +78,9 @@ __extension__ ({\t\t\t\t\t\t\t\\\n    (AP)->fpr = __va_fregno - 33;\t\t\t\t\t\\\n    (AP)->reg_save_area = (((char *) __builtin_frame_address (0))\t\\\n \t\t\t  + __va_varargs_offset);\t\t\t\\\n-   (AP)->overflow_arg_area = ((char *)__builtin_saveregs ()\t\t\\\n-\t\t\t      + (((__words >= 8) ? __words - 8 : 0)\t\\\n-\t\t\t\t * sizeof (long)));\t\t\t\\\n+   __va_overflow(AP) = ((char *)__builtin_saveregs ()\t\t\t\\\n+\t\t\t+ (((__words >= 8) ? __words - 8 : 0)\t\t\\\n+\t\t\t   * sizeof (long)));\t\t\t\t\\\n    (void)0;\t\t\t\t\t\t\t\t\\\n })\n \n@@ -129,22 +143,22 @@ __extension__ (*({\t\t\t\t\t\t\t\\\n \t   && (AP)->gpr < 8)\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       (AP)->gpr = 8;\t\t\t\t\t\t\t\\\n-      __ptr = (TYPE *) (void *) ((AP)->overflow_arg_area);\t\t\\\n-      (AP)->overflow_arg_area += __va_size (TYPE) * sizeof (long);\t\\\n+      __ptr = (TYPE *) (void *) (__va_overflow(AP));\t\t\t\\\n+      __va_overflow(AP) += __va_size (TYPE) * sizeof (long);\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   else if (__va_aggregate_p (TYPE))\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      __ptr = * (TYPE **) (void *) ((AP)->overflow_arg_area);\t\t\\\n-      (AP)->overflow_arg_area += sizeof (TYPE *);\t\t\t\\\n+      __ptr = * (TYPE **) (void *) (__va_overflow(AP));\t\t\t\\\n+      __va_overflow(AP) += sizeof (TYPE *);\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      if (__va_longlong_p(TYPE) && ((long)(AP)->overflow_arg_area & 4) != 0) \\\n-\t(AP)->overflow_arg_area += 4;\t\t\t\t\t\\\n+      if (__va_longlong_p(TYPE) && ((long)__va_overflow(AP) & 4) != 0)\t\\\n+\t__va_overflow(AP) += 4;\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      __ptr = (TYPE *) (void *) ((AP)->overflow_arg_area);\t\t\\\n-      (AP)->overflow_arg_area += __va_size (TYPE) * sizeof (long);\t\\\n+      __ptr = (TYPE *) (void *) (__va_overflow(AP));\t\t\t\\\n+      __va_overflow(AP) += __va_size (TYPE) * sizeof (long);\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   __ptr;\t\t\t\t\t\t\t\t\\"}]}