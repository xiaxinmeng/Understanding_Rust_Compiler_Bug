{"sha": "4f0baa737f2e56b78f81f07efb9c2a55111edfe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYwYmFhNzM3ZjJlNTZiNzhmODFmMDdlZmI5YzJhNTUxMTFlZGZlMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-04-21T22:39:26Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-04-21T22:39:26Z"}, "message": "Refine last change.\n\nFrom-SVN: r65915", "tree": {"sha": "1a7ef7004f56679e0eb185be64a8213b136e90a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a7ef7004f56679e0eb185be64a8213b136e90a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f0baa737f2e56b78f81f07efb9c2a55111edfe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0baa737f2e56b78f81f07efb9c2a55111edfe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0baa737f2e56b78f81f07efb9c2a55111edfe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0baa737f2e56b78f81f07efb9c2a55111edfe3/comments", "author": null, "committer": null, "parents": [{"sha": "3cd58fd7cee9dc559cd8deb125bd40ca4ef584af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd58fd7cee9dc559cd8deb125bd40ca4ef584af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd58fd7cee9dc559cd8deb125bd40ca4ef584af"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "8368b49f39c642e20e5a371c2316ea33680d467a", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0baa737f2e56b78f81f07efb9c2a55111edfe3/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0baa737f2e56b78f81f07efb9c2a55111edfe3/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=4f0baa737f2e56b78f81f07efb9c2a55111edfe3", "patch": "@@ -725,10 +725,21 @@ Stored in the @code{integrated} field and printed as @samp{/i}.\n @item RTX_UNCHANGING_P (@var{x})\n Nonzero in a @code{reg}, @code{mem}, or @code{concat} if the register or\n memory is set at most once, anywhere.  This does not mean that it is\n-function invariant.  This flag is used to determine whether two\n-references conflict.  See @code{tree_dependence} in @file{alias.c} for\n-more details.  Stored in the @code{unchanging} field and printed as\n-@samp{/u}.\n+function invariant.\n+\n+GCC uses this flag to determine whether two references conflict.  As\n+implemented by @code{true_dependence} in @file{alias.c} for memory\n+references, unchanging memory can't conflict with non-unchanging memory;\n+a non-unchanging read can conflict with a non-unchanging write; an\n+unchanging read can conflict with an unchanging write (since there may\n+be a single store to this address to initialize it); and an unchanging\n+store can conflict with a non-unchanging read.  This means we must make\n+conservative assumptions when chosing the value of this flag for a\n+memory reference to an object containing both unchanging and\n+non-unchanging fields: we must set the flag when writing to the object\n+and clear it when reading from the object.\n+\n+Stored in the @code{unchanging} field and printed as @samp{/u}.\n \n @findex SCHED_GROUP_P\n @cindex @code{insn} and @samp{/s}"}]}