{"sha": "3fc22eedb033cbff1bf5a70c6a032d3c5ce2d867", "node_id": "C_kwDOANBUbNoAKDNmYzIyZWVkYjAzM2NiZmYxYmY1YTcwYzZhMDMyZDNjNWNlMmQ4Njc", "commit": {"author": {"name": "Palmer Dabbelt", "email": "palmer@rivosinc.com", "date": "2022-04-14T16:22:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-04-14T16:31:15Z"}, "message": "libstdc++: Default to mutex-based atomics on RISC-V\n\nThe RISC-V port requires libatomic to be linked in order to resolve\nvarious atomic functions, which results in builds that have\n\"--with-libstdcxx-lock-policy=auto\" defaulting to mutex-based locks.\nChanging this to direct atomics breaks the ABI, this forces the auto\ndetection mutex-based atomics on RISC-V in order to avoid a silent ABI\nbreak for users.\n\nSee Bug 84568 for more discussion.  In the long run there may be a way\nto get the higher-performance atomics without an ABI flag day, but\nthat's going to be a much more complicated operation.  We don't even\nhave support for the inline atomics yet, but given that some folks have\nbeen discussing hacks to make these libatomic routines appear implicitly\nit seems prudent to just turn off the automatic detection for RISC-V.\n\nlibstdc++-v3/ChangeLog:\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_LOCK_POLICY): Force auto to mutex\n\tfor RISC-V.\n\t* configure: Regenerate.", "tree": {"sha": "b13889f1043ceeb1463917dfb1d26446dbd46ec0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b13889f1043ceeb1463917dfb1d26446dbd46ec0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fc22eedb033cbff1bf5a70c6a032d3c5ce2d867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc22eedb033cbff1bf5a70c6a032d3c5ce2d867", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fc22eedb033cbff1bf5a70c6a032d3c5ce2d867", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc22eedb033cbff1bf5a70c6a032d3c5ce2d867/comments", "author": {"login": "palmer-dabbelt", "id": 1383006, "node_id": "MDQ6VXNlcjEzODMwMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1383006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/palmer-dabbelt", "html_url": "https://github.com/palmer-dabbelt", "followers_url": "https://api.github.com/users/palmer-dabbelt/followers", "following_url": "https://api.github.com/users/palmer-dabbelt/following{/other_user}", "gists_url": "https://api.github.com/users/palmer-dabbelt/gists{/gist_id}", "starred_url": "https://api.github.com/users/palmer-dabbelt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/palmer-dabbelt/subscriptions", "organizations_url": "https://api.github.com/users/palmer-dabbelt/orgs", "repos_url": "https://api.github.com/users/palmer-dabbelt/repos", "events_url": "https://api.github.com/users/palmer-dabbelt/events{/privacy}", "received_events_url": "https://api.github.com/users/palmer-dabbelt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "832fcbbc7311c706f81e85043b5721e5f16b0a16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/832fcbbc7311c706f81e85043b5721e5f16b0a16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/832fcbbc7311c706f81e85043b5721e5f16b0a16"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "6aece2adff889008b4500d1cf4fce452672454f8", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc22eedb033cbff1bf5a70c6a032d3c5ce2d867/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc22eedb033cbff1bf5a70c6a032d3c5ce2d867/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=3fc22eedb033cbff1bf5a70c6a032d3c5ce2d867", "patch": "@@ -3612,6 +3612,9 @@ AC_DEFUN([GLIBCXX_ENABLE_LOCK_POLICY], [\n     dnl Why don't we check 8-byte CAS for sparc64, where _Atomic_word is long?!\n     dnl New targets should only check for CAS for the _Atomic_word type.\n     AC_TRY_COMPILE([\n+    #if defined __riscv\n+    # error \"Defaulting to mutex-based locks for ABI compatibility\"\n+    #endif\n     #if ! defined __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2\n     # error \"No 2-byte compare-and-swap\"\n     #elif ! defined __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4"}, {"sha": "7a0ac40533159658b6c6d69f3f729034b662f684", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc22eedb033cbff1bf5a70c6a032d3c5ce2d867/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc22eedb033cbff1bf5a70c6a032d3c5ce2d867/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=3fc22eedb033cbff1bf5a70c6a032d3c5ce2d867", "patch": "@@ -16193,6 +16193,9 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n                 cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n+    #if defined __riscv\n+    # error \"Defaulting to mutex-based locks for ABI compatibility\"\n+    #endif\n     #if ! defined __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2\n     # error \"No 2-byte compare-and-swap\"\n     #elif ! defined __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\n@@ -16240,7 +16243,7 @@ $as_echo \"mutex\" >&6; }\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16243 \"configure\"\n+#line 16246 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -16282,7 +16285,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n   cat > conftest.$ac_ext << EOF\n-#line 16285 \"configure\"\n+#line 16288 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };"}]}