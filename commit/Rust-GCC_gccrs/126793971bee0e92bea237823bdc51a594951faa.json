{"sha": "126793971bee0e92bea237823bdc51a594951faa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI2NzkzOTcxYmVlMGU5MmJlYTIzNzgyM2JkYzUxYTU5NDk1MWZhYQ==", "commit": {"author": {"name": "Cassio Neri", "email": "cassio.neri@gmail.com", "date": "2021-02-24T17:37:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-24T18:25:18Z"}, "message": "libstdc++: More efficient is_leap\n\nThis patch reimplements std::chrono::year::is_leap().  Leap year check is\nubiquitously implemented (including here) as:\n\n    y % 4 == 0 && (y % 100 != 0 || y % 400 == 0).\n\nThe rationale being that testing divisibility by 4 first implies an earlier\nreturn for 75% of the cases, therefore, avoiding the needless calculations of\ny % 100 and y % 400. Although this fact is true, it does not take into account\nthe cost of branching.  This patch, instead, tests divisibility by 100 first:\n\n    (y % 100 != 0 || y % 400 == 0) && y % 4 == 0.\n\nIt is certainly counterintuitive that this could be more efficient since among\nthe three divisibility tests (4, 100 and 400) the one by 100 is the only one\nthat can never provide a definitive answer and a second divisibility test (by 4\nor 400) is always required. However, measurements [1] in x86_64 suggest this is\n3x more efficient!  A possible explanation is that checking divisibility by 100\nfirst implies a split in the execution path with probabilities of (1%, 99%)\nrather than (25%, 75%) when divisibility by 4 is checked first.  This decreases\nthe entropy of the branching distribution which seems to help prediction.\n\nGiven that y belongs to [-32767, 32767] [time.cal.year.members], a more\nefficient algorithm [2] to check divisibility by 100 is used (instead of\ny % 100 != 0).  Measurements suggest that this optimization improves performance\nby 20%.\n\nThe patch adds a test that exhaustively compares the result of this\nimplementation with the ubiquitous one for all y in [-32767, 32767]. Although\nits completeness, the test completes in a matter of seconds.\n\nReferences:\n[1] https://stackoverflow.com/a/60646967/1137388\n[2] https://accu.org/journals/overload/28/155/overload155.pdf#page=16\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/chrono (year::is_leap): New implementation.\n\t* testsuite/std/time/year/2.cc: New test.", "tree": {"sha": "b0619694d101400ad60ac129a529eb74f2288c35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0619694d101400ad60ac129a529eb74f2288c35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/126793971bee0e92bea237823bdc51a594951faa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/126793971bee0e92bea237823bdc51a594951faa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/126793971bee0e92bea237823bdc51a594951faa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/126793971bee0e92bea237823bdc51a594951faa/comments", "author": {"login": "cassioneri", "id": 2662854, "node_id": "MDQ6VXNlcjI2NjI4NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2662854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassioneri", "html_url": "https://github.com/cassioneri", "followers_url": "https://api.github.com/users/cassioneri/followers", "following_url": "https://api.github.com/users/cassioneri/following{/other_user}", "gists_url": "https://api.github.com/users/cassioneri/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassioneri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassioneri/subscriptions", "organizations_url": "https://api.github.com/users/cassioneri/orgs", "repos_url": "https://api.github.com/users/cassioneri/repos", "events_url": "https://api.github.com/users/cassioneri/events{/privacy}", "received_events_url": "https://api.github.com/users/cassioneri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97d6161f6a7fa712622fc4e384fcb07e2ff5a127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d6161f6a7fa712622fc4e384fcb07e2ff5a127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97d6161f6a7fa712622fc4e384fcb07e2ff5a127"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "3ba35a5bc86c5b5b37ac3a2498d46f44a5eef3d9", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126793971bee0e92bea237823bdc51a594951faa/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126793971bee0e92bea237823bdc51a594951faa/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=126793971bee0e92bea237823bdc51a594951faa", "patch": "@@ -1597,7 +1597,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr bool\n       is_leap() const noexcept\n-      { return _M_y % 4 == 0 && (_M_y % 100 != 0 || _M_y % 400 == 0); }\n+      {\n+\t// Testing divisibility by 100 first gives better performance, that is,\n+\t// return (_M_y % 100 != 0 || _M_y % 400 == 0) && _M_y % 4 == 0;\n+\n+\t// It gets even faster if _M_y is in [-536870800, 536870999]\n+\t// (which is the case here) and _M_y % 100 is replaced by\n+\t// __is_multiple_of_100 below.\n+\n+\t// References:\n+\t// [1] https://github.com/cassioneri/calendar\n+\t// [2] https://accu.org/journals/overload/28/155/overload155.pdf#page=16\n+\n+\tconstexpr uint32_t __multiplier   = 42949673;\n+\tconstexpr uint32_t __bound        = 42949669;\n+\tconstexpr uint32_t __max_dividend = 1073741799;\n+\tconstexpr uint32_t __offset       = __max_dividend / 2 / 100 * 100;\n+\tconst bool __is_multiple_of_100\n+\t  = __multiplier * (_M_y + __offset) < __bound;\n+\treturn (!__is_multiple_of_100 || _M_y % 400 == 0) && _M_y % 4 == 0;\n+      }\n \n       explicit constexpr\n       operator int() const noexcept"}, {"sha": "57fab24d647f931a483047865850aa59e17c073b", "filename": "libstdc++-v3/testsuite/std/time/year/2.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/126793971bee0e92bea237823bdc51a594951faa/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/126793971bee0e92bea237823bdc51a594951faa/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear%2F2.cc?ref=126793971bee0e92bea237823bdc51a594951faa", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Class year [time.cal.year_month_day]\n+\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+// Slow but clear test for leap year.\n+constexpr bool\n+is_leap_year(const std::chrono::year& y) noexcept\n+{\n+  const int n = static_cast<int>(y);\n+  return n % 4 == 0 && (n % 100 != 0 || n % 400 == 0);\n+}\n+\n+void test01()\n+{\n+  using namespace std::chrono;\n+\n+  year y{-32767};\n+  while (y < year{32767}) {\n+    VERIFY( y.is_leap() ==  is_leap_year(y) );\n+    ++y;\n+  }\n+\n+  // One more for y = 32767.\n+  VERIFY( year{32767}.is_leap() == is_leap_year(year{32767}) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}