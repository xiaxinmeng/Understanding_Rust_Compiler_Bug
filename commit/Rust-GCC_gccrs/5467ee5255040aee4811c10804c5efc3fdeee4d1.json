{"sha": "5467ee5255040aee4811c10804c5efc3fdeee4d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ2N2VlNTI1NTA0MGFlZTQ4MTFjMTA4MDRjNWVmYzNmZGVlZTRkMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-26T14:13:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-26T14:13:35Z"}, "message": "re PR tree-optimization/52721 (segfault in vect_init_vector)\n\n2012-03-26  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/52721\n\t* tree-vect-stmts.c (vect_init_vector): Handle scalars.\n\nFrom-SVN: r185799", "tree": {"sha": "2f767d40e3eb4f25b25b92c508d91971c9a524bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f767d40e3eb4f25b25b92c508d91971c9a524bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5467ee5255040aee4811c10804c5efc3fdeee4d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5467ee5255040aee4811c10804c5efc3fdeee4d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5467ee5255040aee4811c10804c5efc3fdeee4d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5467ee5255040aee4811c10804c5efc3fdeee4d1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39f3fed69d96a818c388450e5141d179ffe310d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f3fed69d96a818c388450e5141d179ffe310d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f3fed69d96a818c388450e5141d179ffe310d2"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "636ef21de2193b5af2dbb801e283a134d99deffa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5467ee5255040aee4811c10804c5efc3fdeee4d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5467ee5255040aee4811c10804c5efc3fdeee4d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5467ee5255040aee4811c10804c5efc3fdeee4d1", "patch": "@@ -1,3 +1,8 @@\n+2012-03-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52721\n+\t* tree-vect-stmts.c (vect_init_vector): Handle scalars.\n+\n 2012-03-26  Ulrich Weigand  <ulrich.weigand@linaro.org>\n \n \tPR tree-optimization/52686"}, {"sha": "acaf6757a7817e4236fa8069971490060ec14ab2", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5467ee5255040aee4811c10804c5efc3fdeee4d1/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5467ee5255040aee4811c10804c5efc3fdeee4d1/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=5467ee5255040aee4811c10804c5efc3fdeee4d1", "patch": "@@ -1142,7 +1142,6 @@ vect_get_load_cost (struct data_reference *dr, int ncopies,\n static void\n vect_init_vector_1 (gimple stmt, gimple new_stmt, gimple_stmt_iterator *gsi)\n {\n-\n   if (gsi)\n     vect_finish_stmt_generation (stmt, new_stmt, gsi);\n   else\n@@ -1185,48 +1184,48 @@ vect_init_vector_1 (gimple stmt, gimple new_stmt, gimple_stmt_iterator *gsi)\n \n /* Function vect_init_vector.\n \n-   Insert a new stmt (INIT_STMT) that initializes a new vector variable with\n-   the vector elements of VECTOR_VAR.  Place the initialization at BSI if it\n-   is not NULL.  Otherwise, place the initialization at the loop preheader.\n+   Insert a new stmt (INIT_STMT) that initializes a new variable of type\n+   TYPE with the value VAL.  If TYPE is a vector type and VAL does not have\n+   vector type a vector with all elements equal to VAL is created first.\n+   Place the initialization at BSI if it is not NULL.  Otherwise, place the\n+   initialization at the loop preheader.\n    Return the DEF of INIT_STMT.\n    It will be used in the vectorization of STMT.  */\n \n tree\n-vect_init_vector (gimple stmt, tree vector_var, tree vector_type,\n-\t\t  gimple_stmt_iterator *gsi)\n+vect_init_vector (gimple stmt, tree val, tree type, gimple_stmt_iterator *gsi)\n {\n   tree new_var;\n   gimple init_stmt;\n   tree vec_oprnd;\n   tree new_temp;\n \n-  if (TREE_CODE (TREE_TYPE (vector_var)) != VECTOR_TYPE)\n+  if (TREE_CODE (type) == VECTOR_TYPE\n+      && TREE_CODE (TREE_TYPE (val)) != VECTOR_TYPE)\n     {\n-      if (!types_compatible_p (TREE_TYPE (vector_type),\n-\t\t\t       TREE_TYPE (vector_var)))\n+      if (!types_compatible_p (TREE_TYPE (type), TREE_TYPE (val)))\n \t{\n-\t  if (CONSTANT_CLASS_P (vector_var))\n-\t    vector_var = fold_unary (VIEW_CONVERT_EXPR, TREE_TYPE (vector_type),\n-\t\t\t\t     vector_var);\n+\t  if (CONSTANT_CLASS_P (val))\n+\t    val = fold_unary (VIEW_CONVERT_EXPR, TREE_TYPE (type), val);\n \t  else\n \t    {\n-\t      new_var = create_tmp_reg (TREE_TYPE (vector_type), NULL);\n+\t      new_var = create_tmp_reg (TREE_TYPE (type), NULL);\n \t      add_referenced_var (new_var);\n \t      init_stmt = gimple_build_assign_with_ops (NOP_EXPR,\n-\t\t\t\t\t\t\tnew_var, vector_var,\n+\t\t\t\t\t\t\tnew_var, val,\n \t\t\t\t\t\t\tNULL_TREE);\n \t      new_temp = make_ssa_name (new_var, init_stmt);\n \t      gimple_assign_set_lhs (init_stmt, new_temp);\n \t      vect_init_vector_1 (stmt, init_stmt, gsi);\n-\t      vector_var = new_temp;\n+\t      val = new_temp;\n \t    }\n \t}\n-      vector_var = build_vector_from_val (vector_type, vector_var);\n+      val = build_vector_from_val (type, val);\n     }\n \n-  new_var = vect_get_new_vect_var (vector_type, vect_simple_var, \"cst_\");\n+  new_var = vect_get_new_vect_var (type, vect_simple_var, \"cst_\");\n   add_referenced_var (new_var);\n-  init_stmt = gimple_build_assign  (new_var, vector_var);\n+  init_stmt = gimple_build_assign  (new_var, val);\n   new_temp = make_ssa_name (new_var, init_stmt);\n   gimple_assign_set_lhs (init_stmt, new_temp);\n   vect_init_vector_1 (stmt, init_stmt, gsi);"}]}