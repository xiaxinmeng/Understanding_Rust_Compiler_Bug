{"sha": "6fb708633d529fafe3626c2b1b4d39a9dffe36bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZiNzA4NjMzZDUyOWZhZmUzNjI2YzJiMWI0ZDM5YTlkZmZlMzZiZA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@mckinlay.net.nz", "date": "2003-09-28T04:23:29Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2003-09-28T04:23:29Z"}, "message": "DateFormat.java (format): Throw IllegalArgumentException if j' is not a Number or Date instance.\n\n\t* java/text/DateFormat.java (format): Throw IllegalArgumentException\n\tif j' is not a Number or Date instance.\n\t* java/text/SimpleDateFormat.java (tokens): Make it an ArrayList\n\tinstead of Vector.\n\nFrom-SVN: r71871", "tree": {"sha": "3728a1144a17c242c61fd422cdafe0f0074f4cc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3728a1144a17c242c61fd422cdafe0f0074f4cc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fb708633d529fafe3626c2b1b4d39a9dffe36bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb708633d529fafe3626c2b1b4d39a9dffe36bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fb708633d529fafe3626c2b1b4d39a9dffe36bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb708633d529fafe3626c2b1b4d39a9dffe36bd/comments", "author": null, "committer": null, "parents": [{"sha": "f6b17867e4343c45c23e2fba3cb731bb5c54a540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b17867e4343c45c23e2fba3cb731bb5c54a540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b17867e4343c45c23e2fba3cb731bb5c54a540"}], "stats": {"total": 57, "additions": 33, "deletions": 24}, "files": [{"sha": "b8e67b6d1224813bfe5a85db66a3ba84df81fc5e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb708633d529fafe3626c2b1b4d39a9dffe36bd/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb708633d529fafe3626c2b1b4d39a9dffe36bd/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6fb708633d529fafe3626c2b1b4d39a9dffe36bd", "patch": "@@ -1,6 +1,13 @@\n 2003-09-28  Bryce McKinlay  <bryce@mckinlay.net.nz>\n \n-\t* java/text/SimpleDateFormat (parse): Revert patch of 2003-09-25.\n+\t* java/text/DateFormat.java (format): Throw IllegalArgumentException\n+\tif `obj' is not a Number or Date instance.\n+\t* java/text/SimpleDateFormat.java (tokens): Make it an ArrayList\n+\tinstead of Vector.\n+\n+2003-09-28  Bryce McKinlay  <bryce@mckinlay.net.nz>\n+\n+\t* java/text/SimpleDateFormat.java (parse): Revert patch of 2003-09-25.\n \tDon't call setTimeZone on calendar.\n \n 2003-09-27  Michael Koch  <konqueror@gmx.de>"}, {"sha": "76bf535577a6cb483c73b6706e4779c1eb2baba3", "filename": "libjava/java/text/DateFormat.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb708633d529fafe3626c2b1b4d39a9dffe36bd/libjava%2Fjava%2Ftext%2FDateFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb708633d529fafe3626c2b1b4d39a9dffe36bd/libjava%2Fjava%2Ftext%2FDateFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FDateFormat.java?ref=6fb708633d529fafe3626c2b1b4d39a9dffe36bd", "patch": "@@ -151,6 +151,8 @@ public final StringBuffer format (Object obj,\n   {\n     if (obj instanceof Number)\n       obj = new Date(((Number) obj).longValue());\n+    else if (! (obj instanceof Date))\n+      throw new IllegalArgumentException (\"Cannot format given Object as a Date\");\n     return format ((Date) obj, buf, pos);\n   }\n "}, {"sha": "804234f78a25c13b1aab81ccd889296c6d075417", "filename": "libjava/java/text/SimpleDateFormat.java", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb708633d529fafe3626c2b1b4d39a9dffe36bd/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb708633d529fafe3626c2b1b4d39a9dffe36bd/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java?ref=6fb708633d529fafe3626c2b1b4d39a9dffe36bd", "patch": "@@ -39,14 +39,14 @@\n \n package java.text;\n \n+import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Date;\n-import java.util.Enumeration;\n import java.util.GregorianCalendar;\n+import java.util.Iterator;\n import java.util.Locale;\n import java.util.TimeZone;\n import java.util.SimpleTimeZone;\n-import java.util.Vector;\n import java.io.ObjectInputStream;\n import java.io.IOException;\n \n@@ -71,7 +71,7 @@ public FieldSizePair(int f, int s) {\n     }\n   }\n \n-  private transient Vector tokens;\n+  private transient ArrayList tokens;\n   private DateFormatSymbols formatData;  // formatData\n   private Date defaultCenturyStart;\n   private transient int defaultCentury;\n@@ -98,7 +98,7 @@ private void readObject(ObjectInputStream stream)\n       set2DigitYearStart(defaultCenturyStart);\n \n     // Set up items normally taken care of by the constructor.\n-    tokens = new Vector();\n+    tokens = new ArrayList();\n     compileFormat(pattern);\n   }\n \n@@ -119,47 +119,47 @@ private void compileFormat(String pattern)\n \tcurrent = null;\n \tif (Character.isLetter(thisChar)) {\n \t  // Not a valid letter\n-\t  tokens.addElement(new FieldSizePair(-1,0));\n+\t  tokens.add(new FieldSizePair(-1,0));\n \t} else if (thisChar == '\\'') {\n \t  // Quoted text section; skip to next single quote\n \t  pos = pattern.indexOf('\\'',i+1);\n \t  if (pos == -1) {\n \t    // This ought to be an exception, but spec does not\n \t    // let us throw one.\n-\t    tokens.addElement(new FieldSizePair(-1,0));\n+\t    tokens.add(new FieldSizePair(-1,0));\n \t  }\n \t  if ((pos+1 < pattern.length()) && (pattern.charAt(pos+1) == '\\'')) {\n-\t    tokens.addElement(pattern.substring(i+1,pos+1));\n+\t    tokens.add(pattern.substring(i+1,pos+1));\n \t  } else {\n-\t    tokens.addElement(pattern.substring(i+1,pos));\n+\t    tokens.add(pattern.substring(i+1,pos));\n \t  }\n \t  i = pos;\n \t} else {\n \t  // A special character\n-\t  tokens.addElement(new Character(thisChar));\n+\t  tokens.add(new Character(thisChar));\n \t}\n       } else {\n \t// A valid field\n \tif ((current != null) && (field == current.field)) {\n \t  current.size++;\n \t} else {\n \t  current = new FieldSizePair(field,1);\n-\t  tokens.addElement(current);\n+\t  tokens.add(current);\n \t}\n       }\n     }\n   }\n-    \n+\n   public String toString() \n   {\n     StringBuffer output = new StringBuffer();\n-    Enumeration e = tokens.elements();\n-    while (e.hasMoreElements()) {\n-      output.append(e.nextElement().toString());\n+    Iterator i = tokens.iterator();\n+    while (i.hasNext()) {\n+      output.append(i.next().toString());\n     }\n     return output.toString();\n   }\n-      \n+\n   /**\n    * Constructs a SimpleDateFormat using the default pattern for\n    * the default locale.\n@@ -175,7 +175,7 @@ public SimpleDateFormat()\n     Locale locale = Locale.getDefault();\n     calendar = new GregorianCalendar(locale);\n     computeCenturyStart();\n-    tokens = new Vector();\n+    tokens = new ArrayList();\n     formatData = new DateFormatSymbols(locale);\n     pattern = (formatData.dateFormats[DEFAULT] + ' '\n \t       + formatData.timeFormats[DEFAULT]);\n@@ -203,7 +203,7 @@ public SimpleDateFormat(String pattern, Locale locale)\n     super();\n     calendar = new GregorianCalendar(locale);\n     computeCenturyStart();\n-    tokens = new Vector();\n+    tokens = new ArrayList();\n     formatData = new DateFormatSymbols(locale);\n     compileFormat(pattern);\n     this.pattern = pattern;\n@@ -221,7 +221,7 @@ public SimpleDateFormat(String pattern, DateFormatSymbols formatData)\n     super();\n     calendar = new GregorianCalendar();\n     computeCenturyStart ();\n-    tokens = new Vector();\n+    tokens = new ArrayList();\n     this.formatData = formatData;\n     compileFormat(pattern);\n     this.pattern = pattern;\n@@ -264,7 +264,7 @@ public String toLocalizedPattern()\n    */\n   public void applyPattern(String pattern)\n   {\n-    tokens = new Vector();\n+    tokens = new ArrayList();\n     compileFormat(pattern);\n     this.pattern = pattern;\n   }\n@@ -418,10 +418,10 @@ public StringBuffer format(Date date, StringBuffer buffer, FieldPosition pos)\n     String temp;\n     calendar.setTime(date);\n     \n-    // go through vector, filling in fields where applicable, else toString\n-    Enumeration e = tokens.elements();\n-    while (e.hasMoreElements()) {\n-      Object o = e.nextElement();\n+    // go through ArrayList, filling in fields where applicable, else toString\n+    Iterator i = tokens.iterator();\n+    while (i.hasNext()) {\n+      Object o = i.next();\n       if (o instanceof FieldSizePair) {\n \tFieldSizePair p = (FieldSizePair) o;\n \tint beginIndex = buffer.length();"}]}