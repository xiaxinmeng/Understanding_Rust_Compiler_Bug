{"sha": "3d709ff063605677945823394a0d6748c3206e95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q3MDlmZjA2MzYwNTY3Nzk0NTgyMzM5NGEwZDY3NDhjMzIwNmU5NQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-15T01:55:03Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-15T01:55:03Z"}, "message": "(store_split_bit_field): Properly load a constant VALUE\ninto a WORD_MODE pseudo.\n\nFrom-SVN: r6092", "tree": {"sha": "1eccd3d0d94065f592745f13138aa55252379dda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eccd3d0d94065f592745f13138aa55252379dda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d709ff063605677945823394a0d6748c3206e95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d709ff063605677945823394a0d6748c3206e95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d709ff063605677945823394a0d6748c3206e95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d709ff063605677945823394a0d6748c3206e95/comments", "author": null, "committer": null, "parents": [{"sha": "ba83886f6e93fe5152c8f5d2df7e8ba845609bfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba83886f6e93fe5152c8f5d2df7e8ba845609bfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba83886f6e93fe5152c8f5d2df7e8ba845609bfd"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "69c08d5f597b514ff059c115587bf090613dcb59", "filename": "gcc/expmed.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d709ff063605677945823394a0d6748c3206e95/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d709ff063605677945823394a0d6748c3206e95/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=3d709ff063605677945823394a0d6748c3206e95", "patch": "@@ -682,15 +682,21 @@ store_split_bit_field (op0, bitsize, bitpos, value, align)\n   /* Make sure UNIT isn't larger than BITS_PER_WORD, we can only handle that\n      much at a time.  */\n   int unit = MIN (align * BITS_PER_UNIT, BITS_PER_WORD);\n-  rtx word;\n   int bitsdone = 0;\n \n-  if (GET_CODE (value) == CONST_DOUBLE\n-      && (word = gen_lowpart_common (word_mode, value)) != 0)\n-    value = word;\n-\n+  /* If VALUE is a constant other than a CONST_INT, get it into a register in\n+     WORD_MODE.  If we can do this using gen_lowpart_common, do so.  Note\n+     that VALUE might be a floating-point constant.  */\n   if (CONSTANT_P (value) && GET_CODE (value) != CONST_INT)\n-    value = copy_to_mode_reg (word_mode, value);\n+    {\n+      rtx word = gen_lowpart_common (word_mode, value);\n+\n+      if (word)\n+\tvalue = word;\n+      else\n+\tvalue = gen_lowpart_common (word_mode,\n+\t\t\t\t    force_reg (GET_MODE (value), value));\n+    }\n \n   while (bitsdone < bitsize)\n     {"}]}