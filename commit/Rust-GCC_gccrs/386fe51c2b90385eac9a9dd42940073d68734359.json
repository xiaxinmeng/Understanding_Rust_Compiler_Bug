{"sha": "386fe51c2b90385eac9a9dd42940073d68734359", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg2ZmU1MWMyYjkwMzg1ZWFjOWE5ZGQ0Mjk0MDA3M2Q2ODczNDM1OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-01-22T19:36:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-01-22T19:36:57Z"}, "message": "re PR fortran/79154 (omp declare simd in pure function?)\n\n\tPR fortran/79154\n\t* parse.c (matchs, matcho, matchds, matchdo): Replace return st;\n\twith { ret = st; goto finish; }.\n\t(decode_omp_directive): Allow declare simd, declare target and\n\tsimd directives in PURE/ELEMENTAL procedures.  Only call\n\tgfc_unset_implicit_pure on successful match of other procedures.\n\n\t* gfortran.dg/gomp/pr79154-1.f90: New test.\n\t* gfortran.dg/gomp/pr79154-2.f90: New test.\n\nFrom-SVN: r244763", "tree": {"sha": "3a078e1a007c2b0228aece9ccc07a907c1fb6242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a078e1a007c2b0228aece9ccc07a907c1fb6242"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/386fe51c2b90385eac9a9dd42940073d68734359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386fe51c2b90385eac9a9dd42940073d68734359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/386fe51c2b90385eac9a9dd42940073d68734359", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386fe51c2b90385eac9a9dd42940073d68734359/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f314c78c2f6802622820248641e4f4bdf97e816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f314c78c2f6802622820248641e4f4bdf97e816", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f314c78c2f6802622820248641e4f4bdf97e816"}], "stats": {"total": 172, "additions": 153, "deletions": 19}, "files": [{"sha": "b3b883fdf430c8c7330962c78bc910aa751c2b62", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386fe51c2b90385eac9a9dd42940073d68734359/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386fe51c2b90385eac9a9dd42940073d68734359/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=386fe51c2b90385eac9a9dd42940073d68734359", "patch": "@@ -1,3 +1,12 @@\n+2017-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/79154\n+\t* parse.c (matchs, matcho, matchds, matchdo): Replace return st;\n+\twith { ret = st; goto finish; }.\n+\t(decode_omp_directive): Allow declare simd, declare target and\n+\tsimd directives in PURE/ELEMENTAL procedures.  Only call\n+\tgfc_unset_implicit_pure on successful match of other procedures.\n+\n 2017-01-21  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* gfc-internals.texi (Symbol Versioning): Change references"}, {"sha": "c9f8da46ed3d04fee0481b44c668761d07ad5ae1", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 62, "deletions": 19, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386fe51c2b90385eac9a9dd42940073d68734359/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386fe51c2b90385eac9a9dd42940073d68734359/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=386fe51c2b90385eac9a9dd42940073d68734359", "patch": "@@ -721,7 +721,10 @@ decode_oacc_directive (void)\n \tgoto do_spec_only;\t\t\t\t\t\\\n       if (match_word_omp_simd (keyword, subr, &old_locus,\t\\\n \t\t\t       &simd_matched) == MATCH_YES)\t\\\n-\treturn st;\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  ret = st;\t\t\t\t\t\t\\\n+\t  goto finish;\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\\\n \tundo_new_statement ();\t\t\t\t  \t\\\n     } while (0);\n@@ -736,7 +739,10 @@ decode_oacc_directive (void)\n \tgoto do_spec_only;\t\t\t\t\t\\\n       else if (match_word (keyword, subr, &old_locus)\t\t\\\n \t       == MATCH_YES)\t\t\t\t\t\\\n-\treturn st;\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  ret = st;\t\t\t\t\t\t\\\n+\t  goto finish;\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\\\n \tundo_new_statement ();\t\t\t\t  \t\\\n     } while (0);\n@@ -746,7 +752,10 @@ decode_oacc_directive (void)\n     do {\t\t\t\t\t\t\t\\\n       if (match_word_omp_simd (keyword, subr, &old_locus,\t\\\n \t\t\t       &simd_matched) == MATCH_YES)\t\\\n-\treturn st;\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  ret = st;\t\t\t\t\t\t\\\n+\t  goto finish;\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\\\n \tundo_new_statement ();\t\t\t\t  \t\\\n     } while (0);\n@@ -758,7 +767,10 @@ decode_oacc_directive (void)\n \t;\t\t\t\t\t\t\t\\\n       else if (match_word (keyword, subr, &old_locus)\t\t\\\n \t       == MATCH_YES)\t\t\t\t\t\\\n-\treturn st;\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  ret = st;\t\t\t\t\t\t\\\n+\t  goto finish;\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\\\n \tundo_new_statement ();\t\t\t\t  \t\\\n     } while (0);\n@@ -770,26 +782,18 @@ decode_omp_directive (void)\n   char c;\n   bool simd_matched = false;\n   bool spec_only = false;\n+  gfc_statement ret = ST_NONE;\n+  bool pure_ok = true;\n \n   gfc_enforce_clean_symbol_state ();\n \n   gfc_clear_error ();\t/* Clear any pending errors.  */\n   gfc_clear_warning ();\t/* Clear any pending warnings.  */\n \n-  if (gfc_pure (NULL))\n-    {\n-      gfc_error_now (\"OpenMP directives at %C may not appear in PURE \"\n-\t\t     \"or ELEMENTAL procedures\");\n-      gfc_error_recovery ();\n-      return ST_NONE;\n-    }\n-\n   if (gfc_current_state () == COMP_FUNCTION\n       && gfc_current_block ()->result->ts.kind == -1)\n     spec_only = true;\n \n-  gfc_unset_implicit_pure (NULL);\n-\n   old_locus = gfc_current_locus;\n \n   /* General OpenMP directive matching: Instead of testing every possible\n@@ -798,6 +802,33 @@ decode_omp_directive (void)\n \n   c = gfc_peek_ascii_char ();\n \n+  /* match is for directives that should be recognized only if\n+     -fopenmp, matchs for directives that should be recognized\n+     if either -fopenmp or -fopenmp-simd.\n+     Handle only the directives allowed in PURE/ELEMENTAL procedures\n+     first (those also shall not turn off implicit pure).  */\n+  switch (c)\n+    {\n+    case 'd':\n+      matchds (\"declare simd\", gfc_match_omp_declare_simd,\n+\t       ST_OMP_DECLARE_SIMD);\n+      matchdo (\"declare target\", gfc_match_omp_declare_target,\n+\t       ST_OMP_DECLARE_TARGET);\n+      break;\n+    case 's':\n+      matchs (\"simd\", gfc_match_omp_simd, ST_OMP_SIMD);\n+      break;\n+    }\n+\n+  pure_ok = false;\n+  if (flag_openmp && gfc_pure (NULL))\n+    {\n+      gfc_error_now (\"OpenMP directives other than SIMD or DECLARE TARGET \"\n+\t\t     \"at %C may not appear in PURE or ELEMENTAL procedures\");\n+      gfc_error_recovery ();\n+      return ST_NONE;\n+    }\n+\n   /* match is for directives that should be recognized only if\n      -fopenmp, matchs for directives that should be recognized\n      if either -fopenmp or -fopenmp-simd.  */\n@@ -818,10 +849,6 @@ decode_omp_directive (void)\n     case 'd':\n       matchds (\"declare reduction\", gfc_match_omp_declare_reduction,\n \t       ST_OMP_DECLARE_REDUCTION);\n-      matchds (\"declare simd\", gfc_match_omp_declare_simd,\n-\t       ST_OMP_DECLARE_SIMD);\n-      matchdo (\"declare target\", gfc_match_omp_declare_target,\n-\t       ST_OMP_DECLARE_TARGET);\n       matchs (\"distribute parallel do simd\",\n \t      gfc_match_omp_distribute_parallel_do_simd,\n \t      ST_OMP_DISTRIBUTE_PARALLEL_DO_SIMD);\n@@ -923,7 +950,6 @@ decode_omp_directive (void)\n     case 's':\n       matcho (\"sections\", gfc_match_omp_sections, ST_OMP_SECTIONS);\n       matcho (\"section\", gfc_match_omp_eos, ST_OMP_SECTION);\n-      matchs (\"simd\", gfc_match_omp_simd, ST_OMP_SIMD);\n       matcho (\"single\", gfc_match_omp_single, ST_OMP_SINGLE);\n       break;\n     case 't':\n@@ -997,6 +1023,23 @@ decode_omp_directive (void)\n \n   return ST_NONE;\n \n+ finish:\n+  if (!pure_ok)\n+    {\n+      gfc_unset_implicit_pure (NULL);\n+\n+      if (!flag_openmp && gfc_pure (NULL))\n+\t{\n+\t  gfc_error_now (\"OpenMP directives other than SIMD or DECLARE TARGET \"\n+\t\t\t \"at %C may not appear in PURE or ELEMENTAL \"\n+\t\t\t \"procedures\");\n+\t  reject_statement ();\n+\t  gfc_error_recovery ();\n+\t  return ST_NONE;\n+\t}\n+    }\n+  return ret;\n+\n  do_spec_only:\n   reject_statement ();\n   gfc_clear_error ();"}, {"sha": "d758476b53c72964d552e207be8af086c9ec8967", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386fe51c2b90385eac9a9dd42940073d68734359/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386fe51c2b90385eac9a9dd42940073d68734359/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=386fe51c2b90385eac9a9dd42940073d68734359", "patch": "@@ -1,3 +1,9 @@\n+2017-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/79154\n+\t* gfortran.dg/gomp/pr79154-1.f90: New test.\n+\t* gfortran.dg/gomp/pr79154-2.f90: New test.\n+\n 2017-01-22  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* gcc.dg/tree-ssa/pr77445-2.c: Quote brackets."}, {"sha": "6c86dedfaccb207b7fb68af22ee9d92b670a8766", "filename": "gcc/testsuite/gfortran.dg/gomp/pr79154-1.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386fe51c2b90385eac9a9dd42940073d68734359/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr79154-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386fe51c2b90385eac9a9dd42940073d68734359/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr79154-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr79154-1.f90?ref=386fe51c2b90385eac9a9dd42940073d68734359", "patch": "@@ -0,0 +1,32 @@\n+! PR fortran/79154\n+! { dg-do compile }\n+\n+pure real function foo (a, b)\n+!$omp declare simd(foo)\t\t\t! { dg-bogus \"may not appear in PURE or ELEMENTAL\" }\n+  real, intent(in) :: a, b\n+  foo = a + b\n+end function foo\n+pure function bar (a, b)\n+  real, intent(in) :: a(8), b(8)\n+  real :: bar(8)\n+  integer :: i\n+!$omp simd\t\t\t\t! { dg-bogus \"may not appear in PURE or ELEMENTAL\" }\n+  do i = 1, 8\n+    bar(i) = a(i) + b(i)\n+  end do\n+end function bar\n+pure real function baz (a, b)\n+!$omp declare target\t\t\t! { dg-bogus \"may not appear in PURE or ELEMENTAL\" }\n+  real, intent(in) :: a, b\n+  baz = a + b\n+end function baz\n+elemental real function fooe (a, b)\n+!$omp declare simd(fooe)\t\t! { dg-bogus \"may not appear in PURE or ELEMENTAL\" }\n+  real, intent(in) :: a, b\n+  fooe = a + b\n+end function fooe\n+elemental real function baze (a, b)\n+!$omp declare target\t\t\t! { dg-bogus \"may not appear in PURE or ELEMENTAL\" }\n+  real, intent(in) :: a, b\n+  baze = a + b\n+end function baze"}, {"sha": "67344f0c028df2db1a29aaa917a9046175426bd7", "filename": "gcc/testsuite/gfortran.dg/gomp/pr79154-2.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386fe51c2b90385eac9a9dd42940073d68734359/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr79154-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386fe51c2b90385eac9a9dd42940073d68734359/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr79154-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr79154-2.f90?ref=386fe51c2b90385eac9a9dd42940073d68734359", "patch": "@@ -0,0 +1,44 @@\n+! PR fortran/79154\n+! { dg-do compile }\n+\n+pure real function foo (a, b)\n+  real, intent(in) :: a, b\n+!$omp taskwait\t\t\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+  foo = a + b\n+end function foo\n+pure function bar (a, b)\n+  real, intent(in) :: a(8), b(8)\n+  real :: bar(8)\n+  integer :: i\n+!$omp do simd\t\t\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+  do i = 1, 8\n+    bar(i) = a(i) + b(i)\n+  end do\n+end function bar\n+pure function baz (a, b)\n+  real, intent(in) :: a(8), b(8)\n+  real :: baz(8)\n+  integer :: i\n+!$omp do\t\t\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+  do i = 1, 8\n+    baz(i) = a(i) + b(i)\n+  end do\n+!$omp end do\t\t\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+end function baz\n+pure real function baz2 (a, b)\n+  real, intent(in) :: a, b\n+!$omp target map(from:baz2)\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+  baz2 = a + b\n+!$omp end target\t\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+end function baz2\n+elemental real function fooe (a, b)\n+  real, intent(in) :: a, b\n+!$omp taskyield\t\t\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+  fooe = a + b\n+end function fooe\n+elemental real function baze (a, b)\n+  real, intent(in) :: a, b\n+!$omp target map(from:baz)\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+  baze = a + b\n+!$omp end target\t\t\t! { dg-error \"may not appear in PURE or ELEMENTAL\" }\n+end function baze"}]}