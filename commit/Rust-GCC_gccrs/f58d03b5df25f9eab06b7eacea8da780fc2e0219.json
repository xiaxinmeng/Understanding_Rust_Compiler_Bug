{"sha": "f58d03b5df25f9eab06b7eacea8da780fc2e0219", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU4ZDAzYjVkZjI1ZjllYWIwNmI3ZWFjZWE4ZGE3ODBmYzJlMDIxOQ==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2021-06-18T12:21:51Z"}, "committer": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2021-06-18T12:22:02Z"}, "message": "arm: Fix multilib mapping for CDE extensions [PR100856].\n\nOn passing +cdecp[0-7] extension to the -march string in command line options,\nmultilib linking is failing as mentioned in PR100856. This patch fixes this issue by\ngenerating a separate canonical string by removing compiler options which are not\nrequired for multilib linking from march string and assign the new string to mlibarch\noption. This mlibarch string is used for multilib comparison.\n\ngcc/ChangeLog:\n\n2021-06-10  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\tPR target/100856\n\t* common/config/arm/arm-common.c (arm_canon_arch_option_1): New function\n\tderived from arm_canon_arch.\n\t(arm_canon_arch_option): Call it.\n\t(arm_canon_arch_multilib_option): New function.\n\t* config/arm/arm-cpus.in (IGNORE_FOR_MULTILIB): New fgroup.\n\t* config/arm/arm.h (arm_canon_arch_multilib_option): New prototype.\n\t(CANON_ARCH_MULTILIB_SPEC_FUNCTION): New macro.\n\t(MULTILIB_ARCH_CANONICAL_SPECS): New macro.\n\t(DRIVER_SELF_SPECS): Add MULTILIB_ARCH_CANONICAL_SPECS.\n\t* config/arm/arm.opt (mlibarch): New option.\n\t* config/arm/t-rmprofile (MULTILIB_MATCHES): For armv8*-m, replace use\n\tof march on RHS with mlibarch.\n\ngcc/testsuite/ChangeLog:\n\n2021-06-10  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\tPR target/100856\n\t* gcc.target/arm/acle/pr100856.c: New test.\n\t* gcc.target/arm/multilib.exp: Add tests for cde options.", "tree": {"sha": "3f9215230806ed15b6bb3ee2c17ef9dc4a8cc954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f9215230806ed15b6bb3ee2c17ef9dc4a8cc954"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f58d03b5df25f9eab06b7eacea8da780fc2e0219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f58d03b5df25f9eab06b7eacea8da780fc2e0219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f58d03b5df25f9eab06b7eacea8da780fc2e0219", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f58d03b5df25f9eab06b7eacea8da780fc2e0219/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfa1f8226f275447015e2cb3fb0d876133e6509b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfa1f8226f275447015e2cb3fb0d876133e6509b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfa1f8226f275447015e2cb3fb0d876133e6509b"}], "stats": {"total": 218, "additions": 205, "deletions": 13}, "files": [{"sha": "481aa9e43d9c73e464e1e992ad7d94c30d2db001", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f58d03b5df25f9eab06b7eacea8da780fc2e0219/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f58d03b5df25f9eab06b7eacea8da780fc2e0219/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=f58d03b5df25f9eab06b7eacea8da780fc2e0219", "patch": "@@ -627,9 +627,15 @@ class candidate_extension\n    The options array consists of couplets of information where the\n    first item in each couplet is the string describing which option\n    name was selected (arch, cpu, fpu) and the second is the value\n-   passed for that option.  */\n-const char *\n-arm_canon_arch_option (int argc, const char **argv)\n+   passed for that option.\n+\n+   arch_for_multilib is boolean variable taking value true or false.\n+   arch_for_multilib is false when the canonical representation is for -march\n+   option and it is true when canonical representation is for -mlibarch option.\n+   On passing arch_for_multilib true the canonical string generated will be\n+   without the compiler options which are not required for multilib linking.  */\n+static const char *\n+arm_canon_arch_option_1 (int argc, const char **argv, bool arch_for_multilib)\n {\n   const char *arch = NULL;\n   const char *cpu = NULL;\n@@ -694,15 +700,24 @@ arm_canon_arch_option (int argc, const char **argv)\n   /* First build up a bitmap describing the target architecture.  */\n   if (arch)\n     {\n-      selected_arch = arm_parse_arch_option_name (all_architectures,\n-\t\t\t\t\t\t  \"-march\", arch);\n+      selected_arch = arm_parse_arch_option_name (all_architectures, \"-march\",\n+\t\t\t\t\t\t  arch, !arch_for_multilib);\n \n       if (selected_arch == NULL)\n \treturn \"\";\n \n       arm_initialize_isa (target_isa, selected_arch->common.isa_bits);\n       arm_parse_option_features (target_isa, &selected_arch->common,\n \t\t\t\t strchr (arch, '+'));\n+      if (arch_for_multilib)\n+\t{\n+\t  const enum isa_feature removable_bits[] = {ISA_IGNORE_FOR_MULTILIB,\n+\t\t\t\t\t\t     isa_nobit};\n+\t  sbitmap isa_bits = sbitmap_alloc (isa_num_bits);\n+\t  arm_initialize_isa (isa_bits, removable_bits);\n+\t  bitmap_and_compl (target_isa, target_isa, isa_bits);\n+\t}\n+\n       if (fpu && strcmp (fpu, \"auto\") != 0)\n \t{\n \t  /* We assume that architectures do not have any FPU bits\n@@ -719,7 +734,8 @@ arm_canon_arch_option (int argc, const char **argv)\n   else if (cpu)\n     {\n       const cpu_option *selected_cpu\n-\t= arm_parse_cpu_option_name (all_cores, \"-mcpu\", cpu);\n+\t= arm_parse_cpu_option_name (all_cores, \"-mcpu\", cpu,\n+\t\t\t\t     !arch_for_multilib);\n \n       if (selected_cpu == NULL)\n \treturn \"\";\n@@ -1069,3 +1085,22 @@ arm_asm_auto_mfpu (int argc, const char **argv)\n #define TARGET_EXCEPT_UNWIND_INFO  arm_except_unwind_info\n \n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;\n+\n+/* Returns a canonical representation of the -march option from the current\n+   -march string (if given) and other options on the command line that might\n+   affect the architecture.  */\n+const char *\n+arm_canon_arch_option (int argc, const char **argv)\n+{\n+  return arm_canon_arch_option_1 (argc, argv, false);\n+}\n+\n+/* Returns a canonical representation of the -mlibarch option from the current\n+   -march string (if given) and other options on the command line that might\n+   affect the architecture after removing the compiler extension options which\n+   are not required for multilib linking.  */\n+const char *\n+arm_canon_arch_multilib_option (int argc, const char **argv)\n+{\n+  return arm_canon_arch_option_1 (argc, argv, true);\n+}"}, {"sha": "ab4b6acf5ea47b1c788dea8f7878141f2a4018cc", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f58d03b5df25f9eab06b7eacea8da780fc2e0219/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f58d03b5df25f9eab06b7eacea8da780fc2e0219/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=f58d03b5df25f9eab06b7eacea8da780fc2e0219", "patch": "@@ -324,6 +324,8 @@ define implied vfp_base MVE MVE_FP ALL_FP\n # need to ignore it for matching purposes.\n define fgroup ALL_QUIRKS   quirk_no_volatile_ce quirk_armv6kz quirk_cm3_ldrd xscale quirk_no_asmcpu\n \n+define fgroup IGNORE_FOR_MULTILIB cdecp0 cdecp1 cdecp2 cdecp3 cdecp4 cdecp5 cdecp6 cdecp7\n+\n # Architecture entries\n # format:\n # begin arch <name>"}, {"sha": "015299c15346f1bea59d70fdcb1d19545473b23b", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f58d03b5df25f9eab06b7eacea8da780fc2e0219/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f58d03b5df25f9eab06b7eacea8da780fc2e0219/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=f58d03b5df25f9eab06b7eacea8da780fc2e0219", "patch": "@@ -2444,10 +2444,14 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #endif\n \n const char *arm_canon_arch_option (int argc, const char **argv);\n+const char *arm_canon_arch_multilib_option (int argc, const char **argv);\n \n #define CANON_ARCH_SPEC_FUNCTION\t\t\\\n   { \"canon_arch\", arm_canon_arch_option },\n \n+#define CANON_ARCH_MULTILIB_SPEC_FUNCTION\t\t\\\n+  { \"canon_arch_multilib\", arm_canon_arch_multilib_option },\n+\n const char *arm_be8_option (int argc, const char **argv);\n #define BE8_SPEC_FUNCTION\t\t\t\\\n   { \"be8_linkopt\", arm_be8_option },\n@@ -2456,6 +2460,7 @@ const char *arm_be8_option (int argc, const char **argv);\n   MCPU_MTUNE_NATIVE_FUNCTIONS\t\t\t\\\n   ASM_CPU_SPEC_FUNCTIONS\t\t\t\\\n   CANON_ARCH_SPEC_FUNCTION\t\t\t\\\n+  CANON_ARCH_MULTILIB_SPEC_FUNCTION\t\t\\\n   TARGET_MODE_SPEC_FUNCTIONS\t\t\t\\\n   BE8_SPEC_FUNCTION\n \n@@ -2476,12 +2481,22 @@ const char *arm_be8_option (int argc, const char **argv);\n   \"                     %{mfloat-abi=*: abi %*}\"\t\\\n   \"                     %<march=*) \"\n \n+/* Generate a canonical string to represent the architecture selected ignoring\n+   the options not required for multilib linking.  */\n+#define MULTILIB_ARCH_CANONICAL_SPECS\t\t\t\t\\\n+  \"-mlibarch=%:canon_arch_multilib(%{mcpu=*: cpu %*} \"\t\t\\\n+  \"\t\t\t\t   %{march=*: arch %*} \"\t\\\n+  \"\t\t\t\t   %{mfpu=*: fpu %*} \"\t\t\\\n+  \"\t\t\t\t   %{mfloat-abi=*: abi %*}\"\t\\\n+  \"\t\t\t\t   %<mlibarch=*) \"\n+\n /* Complete set of specs for the driver.  Commas separate the\n    individual rules so that any option suppression (%<opt...)is\n    completed before starting subsequent rules.  */\n #define DRIVER_SELF_SPECS\t\t\t\\\n   MCPU_MTUNE_NATIVE_SPECS,\t\t\t\\\n   TARGET_MODE_SPECS,\t\t\t\t\\\n+  MULTILIB_ARCH_CANONICAL_SPECS,\t\t\\\n   ARCH_CANONICAL_SPECS\n \n #define TARGET_SUPPORTS_WIDE_INT 1"}, {"sha": "af478a946b2e9c2b51d0272df7b5fab5cbb971ef", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f58d03b5df25f9eab06b7eacea8da780fc2e0219/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f58d03b5df25f9eab06b7eacea8da780fc2e0219/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=f58d03b5df25f9eab06b7eacea8da780fc2e0219", "patch": "@@ -81,6 +81,12 @@ Specify the name of the target architecture.\n EnumValue\n Enum(arm_arch) String(native) Value(-1) DriverOnly\n \n+; Set to the name of target architecture which is required for\n+; multilib linking.  This option is undocumented becuase it\n+; should not be used by the users.\n+mlibarch=\n+Target RejectNegative JoinedOrMissing NoDWARFRecord DriverOnly Undocumented\n+\n marm\n Target RejectNegative Negative(mthumb) InverseMask(THUMB)\n Generate code in 32 bit ARM state."}, {"sha": "3e75fcc9635a19f313aa6bef00fd99d7190bb2e9", "filename": "gcc/config/arm/t-rmprofile", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f58d03b5df25f9eab06b7eacea8da780fc2e0219/gcc%2Fconfig%2Farm%2Ft-rmprofile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f58d03b5df25f9eab06b7eacea8da780fc2e0219/gcc%2Fconfig%2Farm%2Ft-rmprofile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-rmprofile?ref=f58d03b5df25f9eab06b7eacea8da780fc2e0219", "patch": "@@ -53,10 +53,15 @@ MULTILIB_REQUIRED\t+= mthumb/march=armv8.1-m.main+mve/mfloat-abi=hard\n # Arch Matches\n MULTILIB_MATCHES\t+= march?armv6s-m=march?armv6-m\n \n+# For all MULITIB_MATCHES for v8-m and above add mlibarch? on the right hand side\n+# of = in the variant string instead of march?.  This is needed becuase all the\n+# MULITIB_MATCHES variant strings are compared with mlibarch option for multilib\n+# linking.\n+\n # Map all v8-m.main+dsp FP variants down to the variant without DSP.\n-MULTILIB_MATCHES\t+= march?armv8-m.main=march?armv8-m.main+dsp \\\n+MULTILIB_MATCHES\t+= march?armv8-m.main=mlibarch?armv8-m.main+dsp \\\n \t\t\t   $(foreach FP, +fp +fp.dp, \\\n-\t\t\t     march?armv8-m.main$(FP)=march?armv8-m.main+dsp$(FP))\n+\t\t\t     march?armv8-m.main$(FP)=mlibarch?armv8-m.main+dsp$(FP))\n \n # For single-precision only fpv5, use the base fp libraries\n MULTILIB_MATCHES\t+= march?armv7e-m+fp=march?armv7e-m+fpv5\n@@ -65,10 +70,9 @@ MULTILIB_MATCHES\t+= march?armv7e-m+fp=march?armv7e-m+fpv5\n MULTILIB_REUSE\t\t+= $(foreach ARCH, armv6s-m armv7-m armv7e-m armv8-m\\.base armv8-m\\.main, \\\n \t\t\t     mthumb/march.$(ARCH)/mfloat-abi.soft=mthumb/march.$(ARCH)/mfloat-abi.softfp)\n \n-\n # Map v8.1-M to v8-M.\n-MULTILIB_MATCHES\t+= march?armv8-m.main=march?armv8.1-m.main\n-MULTILIB_MATCHES\t+= march?armv8-m.main=march?armv8.1-m.main+dsp\n+MULTILIB_MATCHES\t+= march?armv8-m.main=mlibarch?armv8.1-m.main\n+MULTILIB_MATCHES\t+= march?armv8-m.main=mlibarch?armv8.1-m.main+dsp\n MULTILIB_REUSE\t\t+= mthumb/march.armv8-m\\.main/mfloat-abi.soft=mthumb/march.armv8\\.1-m\\.main+mve/mfloat-abi.soft\n MULTILIB_REUSE\t\t+= mthumb/march.armv8-m\\.main/mfloat-abi.soft=mthumb/march.armv8\\.1-m\\.main+mve/mfloat-abi.softfp\n \n@@ -77,8 +81,15 @@ v8_1m_dp_variants = +fp.dp +dsp+fp.dp +fp.dp+mve +fp.dp+mve.fp\n \n # Map all v8.1-m.main FP sp variants down to v8-m.\n MULTILIB_MATCHES += $(foreach FP, $(v8_1m_sp_variants), \\\n-\t\t\t     march?armv8-m.main+fp=march?armv8.1-m.main$(FP))\n+\t\t\t     march?armv8-m.main+fp=mlibarch?armv8.1-m.main$(FP))\n \n # Map all v8.1-m.main FP dp variants down to v8-m.\n MULTILIB_MATCHES += $(foreach FP, $(v8_1m_dp_variants), \\\n-\t\t\t     march?armv8-m.main+fp.dp=march?armv8.1-m.main$(FP))\n+\t\t\t     march?armv8-m.main+fp.dp=mlibarch?armv8.1-m.main$(FP))\n+\n+# For all the MULTILIB_REQUIRED for v8-m and above, add MULTILIB_MATCHES which\n+# maps mlibarch with march for multilib linking.\n+MULTILIB_MATCHES\t+= march?armv8-m.main=mlibarch?armv8-m.main\n+MULTILIB_MATCHES\t+= march?armv8-m.main+fp=mlibarch?armv8-m.main+fp\n+MULTILIB_MATCHES\t+= march?armv8-m.main+fp.dp=mlibarch?armv8-m.main+fp.dp\n+MULTILIB_MATCHES\t+= march?armv8.1-m.main+mve=mlibarch?armv8.1-m.main+mve"}, {"sha": "5bc030e2e46bf89dfe7f3b9d0dab1e07947e8d5e", "filename": "gcc/testsuite/gcc.target/arm/acle/pr100856.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f58d03b5df25f9eab06b7eacea8da780fc2e0219/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fpr100856.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f58d03b5df25f9eab06b7eacea8da780fc2e0219/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fpr100856.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fpr100856.c?ref=f58d03b5df25f9eab06b7eacea8da780fc2e0219", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_1m_main_cde_mve_ok } */\n+/* { dg-add-options arm_v8_1m_main_cde_mve } */\n+\n+#include \"arm_cde.h\"\n+\n+int main()\n+{\n+  return 0;\n+}"}, {"sha": "4b30025db8cbdcd37bbb3a0be6c345b9d48818c4", "filename": "gcc/testsuite/gcc.target/arm/multilib.exp", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f58d03b5df25f9eab06b7eacea8da780fc2e0219/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f58d03b5df25f9eab06b7eacea8da780fc2e0219/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp?ref=f58d03b5df25f9eab06b7eacea8da780fc2e0219", "patch": "@@ -840,6 +840,119 @@ if {[multilib_config \"rmprofile\"] } {\n \t{-mcpu=cortex-m55+nomve+nofp -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main/nofp\"\n \t{-mcpu=cortex-m55+nodsp+nofp -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n \t{-mcpu=cortex-m55+nodsp+nofp -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=vfpv3xd -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=vfpv3xd -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=vfpv3xd -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=vfpv3xd -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=vfpv3xd -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=vfpv3xd-fp16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=vfpv3xd-fp16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=vfpv3xd-fp16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=vfpv3xd-fp16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=vfpv3xd-fp16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=fpv4-sp-d16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=fpv4-sp-d16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=fpv4-sp-d16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=fpv4-sp-d16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=fpv4-sp-d16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=fpv5-sp-d16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=fpv5-sp-d16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=fpv5-sp-d16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=fpv5-sp-d16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=fpv5-sp-d16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=fpv5-d16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=fpv5-d16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=fpv5-d16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=fpv5-d16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=fpv5-d16 -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=auto -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=auto -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=auto -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=auto -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=vfpv3xd -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=vfpv3xd -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=vfpv3xd -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=vfpv3xd -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=vfpv3xd -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=vfpv3xd-fp16 -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=vfpv3xd-fp16 -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=vfpv3xd-fp16 -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=vfpv3xd-fp16 -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=vfpv3xd-fp16 -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=fpv4-sp-d16 -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=fpv4-sp-d16 -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=fpv4-sp-d16 -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=fpv4-sp-d16 -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=fpv4-sp-d16 -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=fpv5-sp-d16 -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=fpv5-sp-d16 -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=fpv5-sp-d16 -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=fpv5-sp-d16 -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=fpv5-sp-d16 -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=fpv5-d16 -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=fpv5-d16 -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=fpv5-d16 -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=fpv5-d16 -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=fpv5-d16 -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=vfpv3xd -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=vfpv3xd -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=vfpv3xd -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=vfpv3xd -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=vfpv3xd -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=vfpv3xd-fp16 -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=vfpv3xd-fp16 -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=vfpv3xd-fp16 -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=vfpv3xd-fp16 -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=vfpv3xd-fp16 -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=fpv4-sp-d16 -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=fpv4-sp-d16 -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=fpv4-sp-d16 -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=fpv4-sp-d16 -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=fpv4-sp-d16 -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=fpv5-sp-d16 -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=fpv5-sp-d16 -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=fpv5-sp-d16 -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=fpv5-sp-d16 -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=fpv5-sp-d16 -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8-m.main+cdecp0 -mfpu=fpv5-d16 -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8-m.main+fp+cdecp0 -mfpu=fpv5-d16 -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8-m.main+fp.dp+cdecp0 -mfpu=fpv5-d16 -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8-m.main+fp+dsp+cdecp0 -mfpu=fpv5-d16 -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8-m.main+fp.dp+dsp+cdecp0 -mfpu=fpv5-d16 -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8.1-m.main+cdecp0 -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8.1-m.main+dsp+cdecp0 -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8.1-m.main+dsp+fp+cdecp0 -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8.1-m.main+dsp+fp.dp+cdecp0 -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8.1-m.main+cdecp0 -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8.1-m.main+dsp+cdecp0 -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8.1-m.main+dsp+fp+cdecp0 -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8.1-m.main+dsp+fp.dp+cdecp0 -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8.1-m.main+dsp+fp+cdecp0 -mfpu=auto -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8.1-m.main+dsp+fp.dp+cdecp0 -mfpu=auto -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8.1-m.main+mve+cdecp0 -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8.1-m.main+mve.fp+cdecp0 -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8.1-m.main+mve+cdecp0 -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8.1-m.main+mve.fp+cdecp0 -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8.1-m.main+mve+cdecp0 -mfpu=auto -mfloat-abi=hard} \"thumb/v8.1-m.main+mve/hard\"\n+\t{-march=armv8.1-m.main+mve+fp+cdecp0 -mfpu=auto -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8.1-m.main+mve+fp+cdecp0 -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main+fp/softfp\"\n+\t{-march=armv8.1-m.main+mve.fp+cdecp0 -mfpu=auto -mfloat-abi=hard} \"thumb/v8-m.main+fp/hard\"\n+\t{-march=armv8.1-m.main+mve+fp.dp+cdecp0 -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8.1-m.main+mve.fp+fp.dp+cdecp0 -mfpu=auto -mfloat-abi=soft} \"thumb/v8-m.main/nofp\"\n+\t{-march=armv8.1-m.main+mve+fp.dp+cdecp0 -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8.1-m.main+mve.fp+fp.dp+cdecp0 -mfpu=auto -mfloat-abi=softfp} \"thumb/v8-m.main+dp/softfp\"\n+\t{-march=armv8.1-m.main+mve+fp.dp+cdecp0 -mfpu=auto -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n+\t{-march=armv8.1-m.main+mve.fp+fp.dp+cdecp0 -mfpu=auto -mfloat-abi=hard} \"thumb/v8-m.main+dp/hard\"\n     } {\n \tcheck_multi_dir $opts $dir\n     }"}]}