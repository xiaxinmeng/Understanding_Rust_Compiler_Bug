{"sha": "5a257872da307ca14edb7f1090a8da96f4010de6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEyNTc4NzJkYTMwN2NhMTRlZGI3ZjEwOTBhOGRhOTZmNDAxMGRlNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-07-15T13:02:21Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-07-15T13:02:21Z"}, "message": "re PR rtl-optimization/11320 (Scheduler bug)\n\n\tPR optimization/11320\n\t* sched-int.h (struct deps) [reg_conditional_sets]: New field.\n\t(struct sched_info) [compute_jump_reg_dependencies]: New prototype.\n\t* sched-deps.c (sched_analyze_insn) [JUMP_INSN]: Update call to\n\tcurrent_sched_info->compute_jump_reg_dependencies. Record which\n\tregisters are used and which registers are set by the jump.\n\tClear deps->reg_conditional_sets after a barrier.\n\tSet deps->reg_conditional_sets if the insn is a COND_EXEC.\n\tClear deps->reg_conditional_sets if the insn is not a COND_EXEC.\n\t(init_deps): Initialize reg_conditional_sets.\n\t(free_deps): Clear reg_conditional_sets.\n\t* sched-ebb.c (compute_jump_reg_dependencies): New prototype.\n\tMark registers live on entry of the fallthrough block and conditionally\n\tset as set by the jump. Mark registers live on entry of non-fallthrough\n\tblocks as used by the jump.\n\t* sched-rgn.c (compute_jump_reg_dependencies): New prototype.\n\tMark new parameters as unused.\n\nFrom-SVN: r69401", "tree": {"sha": "f85f39b6c5e76b8a6d89255e1b1725f9a067548d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f85f39b6c5e76b8a6d89255e1b1725f9a067548d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a257872da307ca14edb7f1090a8da96f4010de6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a257872da307ca14edb7f1090a8da96f4010de6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a257872da307ca14edb7f1090a8da96f4010de6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a257872da307ca14edb7f1090a8da96f4010de6/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9fa0903819a6687830aa1e7e70f631ca3eeb3a78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa0903819a6687830aa1e7e70f631ca3eeb3a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa0903819a6687830aa1e7e70f631ca3eeb3a78"}], "stats": {"total": 121, "additions": 103, "deletions": 18}, "files": [{"sha": "7eaa150e0284d75c54ee396bed8cbea86b1558df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a257872da307ca14edb7f1090a8da96f4010de6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a257872da307ca14edb7f1090a8da96f4010de6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a257872da307ca14edb7f1090a8da96f4010de6", "patch": "@@ -1,3 +1,23 @@\n+2003-07-15  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR optimization/11320\n+\t* sched-int.h (struct deps) [reg_conditional_sets]: New field.\n+\t(struct sched_info) [compute_jump_reg_dependencies]: New prototype.\n+\t* sched-deps.c (sched_analyze_insn) [JUMP_INSN]: Update call to\n+\tcurrent_sched_info->compute_jump_reg_dependencies. Record which\n+\tregisters are used and which registers are set by the jump.\n+\tClear deps->reg_conditional_sets after a barrier.\n+\tSet deps->reg_conditional_sets if the insn is a COND_EXEC.\n+\tClear deps->reg_conditional_sets if the insn is not a COND_EXEC.\n+\t(init_deps): Initialize reg_conditional_sets.\n+\t(free_deps): Clear reg_conditional_sets.\n+\t* sched-ebb.c (compute_jump_reg_dependencies): New prototype.\n+\tMark registers live on entry of the fallthrough block and conditionally\n+\tset as set by the jump. Mark registers live on entry of non-fallthrough\n+\tblocks as used by the jump.\n+\t* sched-rgn.c (compute_jump_reg_dependencies): New prototype.\n+\tMark new parameters as unused.\n+\n 2003-07-15  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* doc/invoke.texi: Resync MIPS -march documentation."}, {"sha": "f2d4fe6cbc6f0f1eb118f87c8b6ebb832438bd15", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a257872da307ca14edb7f1090a8da96f4010de6/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a257872da307ca14edb7f1090a8da96f4010de6/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=5a257872da307ca14edb7f1090a8da96f4010de6", "patch": "@@ -864,20 +864,25 @@ sched_analyze_insn (struct deps *deps, rtx x, rtx insn, rtx loop_notes)\n       else\n \t{\n \t  rtx pending, pending_mem;\n-\t  regset_head tmp;\n-\t  INIT_REG_SET (&tmp);\n+\t  regset_head tmp_uses, tmp_sets;\n+\t  INIT_REG_SET (&tmp_uses);\n+\t  INIT_REG_SET (&tmp_sets);\n \n-\t  (*current_sched_info->compute_jump_reg_dependencies) (insn, &tmp);\n+\t  (*current_sched_info->compute_jump_reg_dependencies)\n+\t    (insn, &deps->reg_conditional_sets, &tmp_uses, &tmp_sets);\n \t  /* Make latency of jump equal to 0 by using anti-dependence.  */\n-\t  EXECUTE_IF_SET_IN_REG_SET (&tmp, 0, i,\n+\t  EXECUTE_IF_SET_IN_REG_SET (&tmp_uses, 0, i,\n \t    {\n \t      struct deps_reg *reg_last = &deps->reg_last[i];\n \t      add_dependence_list (insn, reg_last->sets, REG_DEP_ANTI);\n \t      add_dependence_list (insn, reg_last->clobbers, REG_DEP_ANTI);\n \t      reg_last->uses_length++;\n \t      reg_last->uses = alloc_INSN_LIST (insn, reg_last->uses);\n \t    });\n-\t  CLEAR_REG_SET (&tmp);\n+\t  IOR_REG_SET (reg_pending_sets, &tmp_sets);\n+\n+\t  CLEAR_REG_SET (&tmp_uses);\n+\t  CLEAR_REG_SET (&tmp_sets);\n \n \t  /* All memory writes and volatile reads must happen before the\n \t     jump.  Non-volatile reads must happen before the jump iff\n@@ -984,6 +989,7 @@ sched_analyze_insn (struct deps *deps, rtx x, rtx insn, rtx loop_notes)\n \t}\n \n       flush_pending_lists (deps, insn, true, true);\n+      CLEAR_REG_SET (&deps->reg_conditional_sets);\n       reg_pending_barrier = NOT_A_BARRIER;\n     }\n   else\n@@ -1015,6 +1021,7 @@ sched_analyze_insn (struct deps *deps, rtx x, rtx insn, rtx loop_notes)\n \t      add_dependence_list (insn, reg_last->clobbers, REG_DEP_OUTPUT);\n \t      add_dependence_list (insn, reg_last->uses, REG_DEP_ANTI);\n \t      reg_last->sets = alloc_INSN_LIST (insn, reg_last->sets);\n+\t      SET_REGNO_REG_SET (&deps->reg_conditional_sets, i);\n \t    });\n \t}\n       else\n@@ -1063,6 +1070,7 @@ sched_analyze_insn (struct deps *deps, rtx x, rtx insn, rtx loop_notes)\n \t      reg_last->sets = alloc_INSN_LIST (insn, reg_last->sets);\n \t      reg_last->uses_length = 0;\n \t      reg_last->clobbers_length = 0;\n+\t      CLEAR_REGNO_REG_SET (&deps->reg_conditional_sets, i);\n \t    });\n \t}\n \n@@ -1385,6 +1393,7 @@ init_deps (struct deps *deps)\n   deps->reg_last = (struct deps_reg *)\n     xcalloc (max_reg, sizeof (struct deps_reg));\n   INIT_REG_SET (&deps->reg_last_in_use);\n+  INIT_REG_SET (&deps->reg_conditional_sets);\n \n   deps->pending_read_insns = 0;\n   deps->pending_read_mems = 0;\n@@ -1426,6 +1435,7 @@ free_deps (struct deps *deps)\n \tfree_INSN_LIST_list (&reg_last->clobbers);\n     });\n   CLEAR_REG_SET (&deps->reg_last_in_use);\n+  CLEAR_REG_SET (&deps->reg_conditional_sets);\n \n   free (deps->reg_last);\n }"}, {"sha": "dd9ec63e7b9b0444f2f64fcf2635ac9038a505c1", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a257872da307ca14edb7f1090a8da96f4010de6/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a257872da307ca14edb7f1090a8da96f4010de6/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=5a257872da307ca14edb7f1090a8da96f4010de6", "patch": "@@ -55,7 +55,7 @@ static int schedule_more_p (void);\n static const char *ebb_print_insn (rtx, int);\n static int rank (rtx, rtx);\n static int contributes_to_priority (rtx, rtx);\n-static void compute_jump_reg_dependencies (rtx, regset);\n+static void compute_jump_reg_dependencies (rtx, regset, regset, regset);\n static basic_block earliest_block_with_similiar_load (basic_block, rtx);\n static void add_deps_for_risky_insns (rtx, rtx);\n static basic_block schedule_ebb (rtx, rtx);\n@@ -163,20 +163,29 @@ contributes_to_priority (rtx next ATTRIBUTE_UNUSED,\n   return 1;\n }\n \n-/* INSN is a JUMP_INSN.  Store the set of registers that must be considered\n-   to be set by this jump in SET.  */\n+ /* INSN is a JUMP_INSN, COND_SET is the set of registers that are\n+    conditionally set before INSN.  Store the set of registers that\n+    must be considered as used by this jump in USED and that of\n+    registers that must be considered as set in SET.  */\n \n static void\n-compute_jump_reg_dependencies (rtx insn, regset set)\n+compute_jump_reg_dependencies (rtx insn, regset cond_set, regset used,\n+\t\t\t       regset set)\n {\n   basic_block b = BLOCK_FOR_INSN (insn);\n   edge e;\n   for (e = b->succ; e; e = e->succ_next)\n-    if ((e->flags & EDGE_FALLTHRU) == 0)\n-      {\n-\tbitmap_operation (set, set, e->dest->global_live_at_start,\n-\t\t\t  BITMAP_IOR);\n-      }\n+    if (e->flags & EDGE_FALLTHRU)\n+      /* The jump may be a by-product of a branch that has been merged\n+\t in the main codepath after being conditionalized.  Therefore\n+\t it may guard the fallthrough block from using a value that has\n+\t conditionally overwritten that of the main codepath.  So we\n+\t consider that it restores the value of the main codepath.  */\n+      bitmap_operation (set, e->dest->global_live_at_start, cond_set,\n+\t\t\tBITMAP_AND);\n+    else\n+      bitmap_operation (used, used, e->dest->global_live_at_start,\n+\t\t\tBITMAP_IOR);\n }\n \n /* Used in schedule_insns to initialize current_sched_info for scheduling"}, {"sha": "8c3a4056342a83d577a1b15ba3ac655c6f7b2374", "filename": "gcc/sched-int.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a257872da307ca14edb7f1090a8da96f4010de6/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a257872da307ca14edb7f1090a8da96f4010de6/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=5a257872da307ca14edb7f1090a8da96f4010de6", "patch": "@@ -112,6 +112,9 @@ struct deps\n   /* Element N is set for each register that has any nonzero element\n      in reg_last[N].{uses,sets,clobbers}.  */\n   regset_head reg_last_in_use;\n+\n+  /* Element N is set for each register that is conditionally set.  */\n+  regset_head reg_conditional_sets;\n };\n \n /* This structure holds some state of the current scheduling pass, and\n@@ -148,7 +151,7 @@ struct sched_info\n   /* Called when computing dependencies for a JUMP_INSN.  This function\n      should store the set of registers that must be considered as set by\n      the jump in the regset.  */\n-  void (*compute_jump_reg_dependencies) (rtx, regset);\n+  void (*compute_jump_reg_dependencies) (rtx, regset, regset, regset);\n \n   /* The boundaries of the set of insns to be scheduled.  */\n   rtx prev_head, next_tail;"}, {"sha": "61ab0565dbe20c4b728bf915d69f91ca35bb7bd5", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a257872da307ca14edb7f1090a8da96f4010de6/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a257872da307ca14edb7f1090a8da96f4010de6/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=5a257872da307ca14edb7f1090a8da96f4010de6", "patch": "@@ -1701,7 +1701,7 @@ static int schedule_more_p (void);\n static const char *rgn_print_insn (rtx, int);\n static int rgn_rank (rtx, rtx);\n static int contributes_to_priority (rtx, rtx);\n-static void compute_jump_reg_dependencies (rtx, regset);\n+static void compute_jump_reg_dependencies (rtx, regset, regset, regset);\n \n /* Return nonzero if there are more insns that should be scheduled.  */\n \n@@ -1951,11 +1951,15 @@ contributes_to_priority (rtx next, rtx insn)\n   return BLOCK_NUM (next) == BLOCK_NUM (insn);\n }\n \n-/* INSN is a JUMP_INSN.  Store the set of registers that must be considered\n-   to be set by this jump in SET.  */\n+/* INSN is a JUMP_INSN, COND_SET is the set of registers that are\n+   conditionally set before INSN.  Store the set of registers that\n+   must be considered as used by this jump in USED and that of\n+   registers that must be considered as set in SET.  */\n \n static void\n compute_jump_reg_dependencies (rtx insn ATTRIBUTE_UNUSED,\n+\t\t\t       regset cond_exec ATTRIBUTE_UNUSED,\n+\t\t\t       regset used ATTRIBUTE_UNUSED,\n \t\t\t       regset set ATTRIBUTE_UNUSED)\n {\n   /* Nothing to do here, since we postprocess jumps in"}, {"sha": "d13c5707a45ed5d8b2cdf609880b4e1d73f01fc1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a257872da307ca14edb7f1090a8da96f4010de6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a257872da307ca14edb7f1090a8da96f4010de6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a257872da307ca14edb7f1090a8da96f4010de6", "patch": "@@ -1,3 +1,7 @@\n+2003-07-15  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.c-torture/execute/20030715-1.c: New test.\n+\n 2003-07-14  Geoffrey Keating  <geoffk@apple.com>\n \n \t* gcc.dg/pch/inline-3.c: New file."}, {"sha": "a2a28ce962c87a215d7c54bc6acb7cb3e13d503c", "filename": "gcc/testsuite/gcc.c-torture/execute/20030715-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a257872da307ca14edb7f1090a8da96f4010de6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030715-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a257872da307ca14edb7f1090a8da96f4010de6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030715-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030715-1.c?ref=5a257872da307ca14edb7f1090a8da96f4010de6", "patch": "@@ -0,0 +1,35 @@\n+/* PR optimization/11320 */\n+/* Origin: Andreas Schwab <schwab@suse.de> */\n+\n+/* Verify that the scheduler correctly computes the dependencies\n+   in the presence of conditional instructions.  */\n+\n+int strcmp (const char *, const char *);\n+int ap_standalone;\n+\n+const char *ap_check_cmd_context (void *a, int b)\n+{\n+  return 0;\n+}\n+\n+const char *server_type (void *a, void *b, char *arg)\n+{\n+  const char *err = ap_check_cmd_context (a, 0x01|0x02|0x04|0x08|0x10);\n+  if (err)\n+    return err;\n+\n+  if (!strcmp (arg, \"inetd\"))\n+    ap_standalone = 0;\n+  else if (!strcmp (arg, \"standalone\"))\n+      ap_standalone = 1;\n+  else\n+    return \"ServerType must be either 'inetd' or 'standalone'\";\n+\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  server_type (0, 0, \"standalone\");\n+  return 0;\n+}"}]}