{"sha": "a23e6f1c59191c2c455650f04053c9c760fd07a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIzZTZmMWM1OTE5MWMyYzQ1NTY1MGYwNDA1M2M5Yzc2MGZkMDdhNQ==", "commit": {"author": {"name": "Bill Seurer", "email": "seurer@linux.vnet.ibm.com", "date": "2016-06-07T20:18:09Z"}, "committer": {"name": "Bill Seurer", "email": "seurer@gcc.gnu.org", "date": "2016-06-07T20:18:09Z"}, "message": "This patch adds support for the missing versions of the vec_mul altivec...\n\nThis patch adds support for the missing versions of the vec_mul altivec\nbuiltins from the Power Architecture 64-Bit ELF V2 ABI OpenPOWER ABI for\nLinux Supplement (16 July 2015 Version 1.1). There are many of the builtins\nthat are missing and this is part of a series of patches to add them.\n\nThere aren't instructions for the {un}signed char, {un}signed short, and\n{un}signed int versions of vec_mul so the output code is built from other\nbuilt-ins and operations that do have instructions.\n\nThe new test case is an executable test which verifies that the generated\ncode produces expected values. C macros were used so that the same\ntest case could be used for all the various supported types.\n\nBootstrapped and tested on powerpc64le-unknown-linux-gnu and\npowerpc64-unknown-linux-gnu with no regressions. Is this ok for trunk?\n\n[gcc]\n\n2016-06-07  Bill Seurer  <seurer@linux.vnet.ibm.com>\n\n\t* config/rs6000/altivec.h: Add __builtin_vec_mul.\n\t* config/rs6000/rs6000-builtin.def (vec_mul): Change vec_mul to a\n\tspecial case Altivec builtin.\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Remove\n\tVSX_BUILTIN_VEC_MUL (replaced with special case code).\n\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin): Add\n\tcode for ALTIVEC_BUILTIN_VEC_MUL.\n\t* config/rs6000/rs6000.c (altivec_init_builtins): Add definition\n\tfor __builtin_vec_mul.\n\n[gcc/testsuite]\n\n2016-06-07  Bill Seurer  <seurer@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/vec-mul.c: New test.\n\nFrom-SVN: r237183", "tree": {"sha": "8e0cb3d373371dbec0b9123e50f43271387dd214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e0cb3d373371dbec0b9123e50f43271387dd214"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a23e6f1c59191c2c455650f04053c9c760fd07a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23e6f1c59191c2c455650f04053c9c760fd07a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23e6f1c59191c2c455650f04053c9c760fd07a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23e6f1c59191c2c455650f04053c9c760fd07a5/comments", "author": {"login": "BillSeurer", "id": 8561221, "node_id": "MDQ6VXNlcjg1NjEyMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/8561221?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BillSeurer", "html_url": "https://github.com/BillSeurer", "followers_url": "https://api.github.com/users/BillSeurer/followers", "following_url": "https://api.github.com/users/BillSeurer/following{/other_user}", "gists_url": "https://api.github.com/users/BillSeurer/gists{/gist_id}", "starred_url": "https://api.github.com/users/BillSeurer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BillSeurer/subscriptions", "organizations_url": "https://api.github.com/users/BillSeurer/orgs", "repos_url": "https://api.github.com/users/BillSeurer/repos", "events_url": "https://api.github.com/users/BillSeurer/events{/privacy}", "received_events_url": "https://api.github.com/users/BillSeurer/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca51b2afc6bd5f4c484a183e5e7644db6f14607e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca51b2afc6bd5f4c484a183e5e7644db6f14607e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca51b2afc6bd5f4c484a183e5e7644db6f14607e"}], "stats": {"total": 166, "additions": 157, "deletions": 9}, "files": [{"sha": "917669ffceea4435ea2990d792ec7d7feaffcb1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e6f1c59191c2c455650f04053c9c760fd07a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e6f1c59191c2c455650f04053c9c760fd07a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a23e6f1c59191c2c455650f04053c9c760fd07a5", "patch": "@@ -1,3 +1,15 @@\n+2016-06-07  Bill Seurer  <seurer@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/altivec.h: Add __builtin_vec_mul.\n+\t* config/rs6000/rs6000-builtin.def (vec_mul): Change vec_mul to a\n+\tspecial case Altivec builtin.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Remove\n+\tVSX_BUILTIN_VEC_MUL (replaced with special case code).\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin): Add\n+\tcode for ALTIVEC_BUILTIN_VEC_MUL.\n+\t* config/rs6000/rs6000.c (altivec_init_builtins): Add definition\n+\tfor __builtin_vec_mul.\n+\n 2016-06-07  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* doc/invoke.texi (RS/6000 and PowerPC Options): Document -mhtm and"}, {"sha": "3ce74ab91440bf17dc5b9df74f3b7883846625ac", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e6f1c59191c2c455650f04053c9c760fd07a5/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e6f1c59191c2c455650f04053c9c760fd07a5/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=a23e6f1c59191c2c455650f04053c9c760fd07a5", "patch": "@@ -229,6 +229,7 @@\n #define vec_mladd __builtin_vec_mladd\n #define vec_msum __builtin_vec_msum\n #define vec_msums __builtin_vec_msums\n+#define vec_mul __builtin_vec_mul\n #define vec_mule __builtin_vec_mule\n #define vec_mulo __builtin_vec_mulo\n #define vec_nor __builtin_vec_nor"}, {"sha": "606d7ae28409ddb5783f023d5ed65e51296918ee", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e6f1c59191c2c455650f04053c9c760fd07a5/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e6f1c59191c2c455650f04053c9c760fd07a5/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=a23e6f1c59191c2c455650f04053c9c760fd07a5", "patch": "@@ -1300,6 +1300,7 @@ BU_ALTIVEC_OVERLOAD_X (LVRX,\t   \"lvrx\")\n BU_ALTIVEC_OVERLOAD_X (LVRXL,\t   \"lvrxl\")\n BU_ALTIVEC_OVERLOAD_X (LVSL,\t   \"lvsl\")\n BU_ALTIVEC_OVERLOAD_X (LVSR,\t   \"lvsr\")\n+BU_ALTIVEC_OVERLOAD_X (MUL,\t   \"mul\")\n BU_ALTIVEC_OVERLOAD_X (PROMOTE,\t   \"promote\")\n BU_ALTIVEC_OVERLOAD_X (SLD,\t   \"sld\")\n BU_ALTIVEC_OVERLOAD_X (SPLAT,\t   \"splat\")\n@@ -1600,7 +1601,6 @@ BU_VSX_OVERLOAD_3V (XXPERMDI, \"xxpermdi\")\n BU_VSX_OVERLOAD_3V (XXSLDWI,  \"xxsldwi\")\n \n /* 2 argument VSX overloaded builtin functions.  */\n-BU_VSX_OVERLOAD_2 (MUL,\t     \"mul\")\n BU_VSX_OVERLOAD_2 (DIV,\t     \"div\")\n BU_VSX_OVERLOAD_2 (XXMRGHW,  \"xxmrghw\")\n BU_VSX_OVERLOAD_2 (XXMRGLW,  \"xxmrglw\")"}, {"sha": "d313e9b20fba4f42eb3ab17e0b24009c2658eeb4", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 51, "deletions": 8, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e6f1c59191c2c455650f04053c9c760fd07a5/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e6f1c59191c2c455650f04053c9c760fd07a5/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=a23e6f1c59191c2c455650f04053c9c760fd07a5", "patch": "@@ -1941,14 +1941,6 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VMINUB, ALTIVEC_BUILTIN_VMINUB,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_bool_V16QI, 0 },\n-  { VSX_BUILTIN_VEC_MUL, VSX_BUILTIN_XVMULSP,\n-    RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n-  { VSX_BUILTIN_VEC_MUL, VSX_BUILTIN_XVMULDP,\n-    RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n-  { VSX_BUILTIN_VEC_MUL, VSX_BUILTIN_MUL_V2DI,\n-    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n-  { VSX_BUILTIN_VEC_MUL, VSX_BUILTIN_MUL_V2DI,\n-    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_MULE, ALTIVEC_BUILTIN_VMULEUB,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_MULE, ALTIVEC_BUILTIN_VMULESB,\n@@ -4683,6 +4675,57 @@ assignment for unaligned loads and stores\");\n     warning (OPT_Wdeprecated, \"vec_lvsr is deprecated for little endian; use \\\n assignment for unaligned loads and stores\");\n \n+  if (fcode == ALTIVEC_BUILTIN_VEC_MUL)\n+    {\n+      /* vec_mul needs to be special cased because there are no instructions\n+\t for it for the {un}signed char, {un}signed short, and {un}signed int\n+\t types.  */\n+      if (nargs != 2)\n+\t{\n+\t  error (\"vec_mul only accepts 2 arguments\");\n+\t  return error_mark_node;\n+\t}\n+\n+      tree arg0 = (*arglist)[0];\n+      tree arg0_type = TREE_TYPE (arg0);\n+      tree arg1 = (*arglist)[1];\n+      tree arg1_type = TREE_TYPE (arg1);\n+\n+      /* Both arguments must be vectors and the types must match.  */\n+      if (arg0_type != arg1_type)\n+\tgoto bad;\n+      if (TREE_CODE (arg0_type) != VECTOR_TYPE)\n+\tgoto bad;\n+\n+      switch (TYPE_MODE (TREE_TYPE (arg0_type)))\n+\t{\n+\t  case QImode:\n+\t  case HImode:\n+\t  case SImode:\n+\t  case DImode:\n+\t  case TImode:\n+\t    {\n+\t      /* For scalar types just use a multiply expression.  */\n+\t      return fold_build2_loc (loc, MULT_EXPR, TREE_TYPE (arg0),\n+\t\t\t\t\targ0, arg1);\n+\t    }\n+\t  case SFmode:\n+\t    {\n+\t      /* For floats use the xvmulsp instruction directly.  */\n+\t      tree call = rs6000_builtin_decls[VSX_BUILTIN_XVMULSP];\n+\t      return build_call_expr (call, 2, arg0, arg1);\n+\t    }\n+\t  case DFmode:\n+\t    {\n+\t      /* For doubles use the xvmuldp instruction directly.  */\n+\t      tree call = rs6000_builtin_decls[VSX_BUILTIN_XVMULDP];\n+\t      return build_call_expr (call, 2, arg0, arg1);\n+\t    }\n+\t  /* Other types are errors.  */\n+\t  default:\n+\t    goto bad;\n+\t}\n+    }\n \n   if (fcode == ALTIVEC_BUILTIN_VEC_CMPNE)\n     {"}, {"sha": "2d7df6b3b7c53ceadfb22bc439932fa574c52999", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e6f1c59191c2c455650f04053c9c760fd07a5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e6f1c59191c2c455650f04053c9c760fd07a5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a23e6f1c59191c2c455650f04053c9c760fd07a5", "patch": "@@ -16573,6 +16573,8 @@ altivec_init_builtins (void)\n \t\tALTIVEC_BUILTIN_VEC_ADDEC);\n   def_builtin (\"__builtin_vec_cmpne\", opaque_ftype_opaque_opaque,\n \t\tALTIVEC_BUILTIN_VEC_CMPNE);\n+  def_builtin (\"__builtin_vec_mul\", opaque_ftype_opaque_opaque,\n+\t\tALTIVEC_BUILTIN_VEC_MUL);\n \n   /* Cell builtins.  */\n   def_builtin (\"__builtin_altivec_lvlx\",  v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVLX);"}, {"sha": "837d408b4ccc0913a9d8cfe75b9089581c7151dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e6f1c59191c2c455650f04053c9c760fd07a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e6f1c59191c2c455650f04053c9c760fd07a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a23e6f1c59191c2c455650f04053c9c760fd07a5", "patch": "@@ -1,3 +1,7 @@\n+2016-06-07  Bill Seurer  <seurer@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-mul.c: New test.\n+\n 2016-06-07  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/spellcheck-fields-2.c: New test case."}, {"sha": "db573287da9ae485bf5948d467c4f9d502381546", "filename": "gcc/testsuite/gcc.target/powerpc/vec-mul.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23e6f1c59191c2c455650f04053c9c760fd07a5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-mul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23e6f1c59191c2c455650f04053c9c760fd07a5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-mul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-mul.c?ref=a23e6f1c59191c2c455650f04053c9c760fd07a5", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do run { target { powerpc64*-*-* } } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O3\" } */\n+\n+/* Test that the vec_mul builtin works as expected.  */\n+\n+#include \"altivec.h\"\n+\n+#define N 4096\n+\n+void abort ();\n+\n+#define define_test_functions(STYPE, NAMESUFFIX) \\\n+\\\n+STYPE result_##NAMESUFFIX[N]; \\\n+STYPE operand1_##NAMESUFFIX[N]; \\\n+STYPE operand2_##NAMESUFFIX[N]; \\\n+STYPE expected_##NAMESUFFIX[N]; \\\n+\\\n+__attribute__((noinline)) void vector_tests_##NAMESUFFIX () \\\n+{ \\\n+  int i; \\\n+  vector STYPE v1, v2, tmp; \\\n+  for (i = 0; i < N; i+=16/sizeof (STYPE)) \\\n+    { \\\n+      /* result=operand1*operand2.  */ \\\n+      v1 = vec_vsx_ld (0, &operand1_##NAMESUFFIX[i]); \\\n+      v2 = vec_vsx_ld (0, &operand2_##NAMESUFFIX[i]); \\\n+\\\n+      tmp = vec_mul (v1, v2); \\\n+      vec_vsx_st (tmp, 0, &result_##NAMESUFFIX[i]); \\\n+    } \\\n+} \\\n+\\\n+__attribute__((noinline)) void init_##NAMESUFFIX () \\\n+{ \\\n+  int i; \\\n+  for (i = 0; i < N; ++i) \\\n+    { \\\n+      result_##NAMESUFFIX[i] = 0; \\\n+      operand1_##NAMESUFFIX[i] = (i+1) % 31; \\\n+      operand2_##NAMESUFFIX[i] = (i*2) % 15; \\\n+      expected_##NAMESUFFIX[i] = operand1_##NAMESUFFIX[i] * \\\n+\t\t\t\t operand2_##NAMESUFFIX[i]; \\\n+    } \\\n+} \\\n+\\\n+__attribute__((noinline)) void verify_results_##NAMESUFFIX () \\\n+{ \\\n+  int i; \\\n+  for (i = 0; i < N; ++i) \\\n+    { \\\n+      if (result_##NAMESUFFIX[i] != expected_##NAMESUFFIX[i]) \\\n+\tabort (); \\\n+    } \\\n+}\n+\n+\n+#define execute_test_functions(STYPE, NAMESUFFIX) \\\n+{ \\\n+  init_##NAMESUFFIX (); \\\n+  vector_tests_##NAMESUFFIX (); \\\n+  verify_results_##NAMESUFFIX (); \\\n+}\n+\n+\n+define_test_functions (signed int, si);\n+define_test_functions (unsigned int, ui);\n+define_test_functions (signed short, ss);\n+define_test_functions (unsigned short, us);\n+define_test_functions (signed char, sc);\n+define_test_functions (unsigned char, uc);\n+define_test_functions (float, f);\n+\n+int main ()\n+{\n+  execute_test_functions (signed int, si);\n+  execute_test_functions (unsigned int, ui);\n+  execute_test_functions (signed short, ss);\n+  execute_test_functions (unsigned short, us);\n+  execute_test_functions (signed char, sc);\n+  execute_test_functions (unsigned char, uc);\n+  execute_test_functions (float, f);\n+\n+  return 0;\n+}"}]}