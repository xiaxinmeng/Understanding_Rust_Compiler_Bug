{"sha": "81284a6ad220981f2d6a0e13ce3dade55c10cab8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEyODRhNmFkMjIwOTgxZjJkNmEwZTEzY2UzZGFkZTU1YzEwY2FiOA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-02-28T00:52:03Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-02-28T00:52:03Z"}, "message": "(subreg_realpart_p): New function.\n\nFrom-SVN: r6667", "tree": {"sha": "3cc15517958b9a32fe3348ba11113f326eb313a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cc15517958b9a32fe3348ba11113f326eb313a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81284a6ad220981f2d6a0e13ce3dade55c10cab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81284a6ad220981f2d6a0e13ce3dade55c10cab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81284a6ad220981f2d6a0e13ce3dade55c10cab8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81284a6ad220981f2d6a0e13ce3dade55c10cab8/comments", "author": null, "committer": null, "parents": [{"sha": "340aa7f68ed9e212bb054a04d02a9177f9b98673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340aa7f68ed9e212bb054a04d02a9177f9b98673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/340aa7f68ed9e212bb054a04d02a9177f9b98673"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "b1d285f13875d10d9765560a94c547c4cd2840d8", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81284a6ad220981f2d6a0e13ce3dade55c10cab8/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81284a6ad220981f2d6a0e13ce3dade55c10cab8/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=81284a6ad220981f2d6a0e13ce3dade55c10cab8", "patch": "@@ -822,6 +822,21 @@ gen_imagpart (mode, x)\n   else\n     return gen_highpart (mode, x);\n }\n+\n+/* Return 1 iff X, assumed to be a SUBREG,\n+   refers to the real part of the complex value in its containing reg.\n+   Complex values are always stored with the real part in the first word,\n+   regardless of WORDS_BIG_ENDIAN.  */\n+\n+int\n+subreg_realpart_p (x)\n+     rtx x;\n+{\n+  if (GET_CODE (x) != SUBREG)\n+    abort ();\n+\n+  return SUBREG_WORD (x) == 0;\n+}\n \f\n /* Assuming that X is an rtx (e.g., MEM, REG or SUBREG) for a value,\n    return an rtx (MEM, SUBREG, or CONST_INT) that refers to the"}]}