{"sha": "3039874b15c391cc2a793abcfa3c2ef1f73844c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAzOTg3NGIxNWMzOTFjYzJhNzkzYWJjZmEzYzJlZjFmNzM4NDRjOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-03-18T23:11:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2002-03-18T23:11:57Z"}, "message": "locale_facets.tcc (money_put::do_put(long double)): Fix dimensioning of temporary buffers to avoid risk of overruns.\n\n2002-03-18  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/locale_facets.tcc\n\t(money_put::do_put(long double)): Fix dimensioning of\n\ttemporary buffers to avoid risk of overruns.\n\t(money_put::do_put(string)): Same for the buffer used to\n\tadd the grouping chars.\n\t* testsuite/22_locale/money_put_members_char.cc: Add test06.\n\t* testsuite/22_locale/money_put_members_wchar_t.cc: Ditto.\n\n\t* include/bits/locale_facets.tcc\n\t(collate::do_transform): Simplify.\n\nFrom-SVN: r51012", "tree": {"sha": "94358cd6d79a6d009431d334b34e26e50b85c8d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94358cd6d79a6d009431d334b34e26e50b85c8d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3039874b15c391cc2a793abcfa3c2ef1f73844c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3039874b15c391cc2a793abcfa3c2ef1f73844c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3039874b15c391cc2a793abcfa3c2ef1f73844c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3039874b15c391cc2a793abcfa3c2ef1f73844c9/comments", "author": null, "committer": null, "parents": [{"sha": "1929c971b93d72d109d796c9977f3943a64e1d7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1929c971b93d72d109d796c9977f3943a64e1d7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1929c971b93d72d109d796c9977f3943a64e1d7a"}], "stats": {"total": 89, "additions": 80, "deletions": 9}, "files": [{"sha": "0377185a2ef38fd6272175ccababf9e0448666b4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3039874b15c391cc2a793abcfa3c2ef1f73844c9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3039874b15c391cc2a793abcfa3c2ef1f73844c9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3039874b15c391cc2a793abcfa3c2ef1f73844c9", "patch": "@@ -1,3 +1,16 @@\n+2002-03-18  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/locale_facets.tcc\n+\t(money_put::do_put(long double)): Fix dimensioning of\n+\ttemporary buffers to avoid risk of overruns.\n+\t(money_put::do_put(string)): Same for the buffer used to\n+\tadd the grouping chars.\n+\t* testsuite/22_locale/money_put_members_char.cc: Add test06.\n+\t* testsuite/22_locale/money_put_members_wchar_t.cc: Ditto.\n+\n+\t* include/bits/locale_facets.tcc\n+\t(collate::do_transform): Simplify.\n+\n 2002-03-18  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* acinclude.m4 (GLIBCPP_CONFIGURE):  Make indentation/spacing uniform."}, {"sha": "f2a1789f6e165723d8fd0237f67bbcf6dd2846a2", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3039874b15c391cc2a793abcfa3c2ef1f73844c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3039874b15c391cc2a793abcfa3c2ef1f73844c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=3039874b15c391cc2a793abcfa3c2ef1f73844c9", "patch": "@@ -1110,8 +1110,10 @@ namespace std\n \t   long double __units) const\n     { \n       const locale __loc = __io.getloc();\n-      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc); \n-      const int __n = numeric_limits<long double>::digits10;\n+      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n+      // max_exponent10 + 1 for the integer part, + 4 for sign, decimal point,\n+      // decimal digit, '\\0'. \n+      const int __n = numeric_limits<long double>::max_exponent10 + 5;\n       char* __cs = static_cast<char*>(__builtin_alloca(sizeof(char) * __n));\n       _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __n));\n       int __len = __convert_from_v(__cs, \"%.01Lf\", __units, _S_c_locale);\n@@ -1206,8 +1208,9 @@ namespace std\n \t\t    \t\t\t         : __mpf.thousands_sep();\n \t\t  const char* __gbeg = __grouping.c_str();\n \t\t  const char* __gend = __gbeg + __grouping.size();\n-\t\t  const int __n = numeric_limits<long double>::digits10 * 2;\n-\t\t  _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __n));\n+\t\t  const int __n = (__end - __beg) * 2;\n+\t\t  _CharT* __ws2 =\n+\t\t    static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __n));\n \t\t  _CharT* __ws_end = __add_grouping(__ws2, __sep, __gbeg, \n \t\t\t\t\t\t    __gend, __beg, __end);\n \t\t  __value.insert(0, __ws2, __ws_end - __ws2);\n@@ -1863,10 +1866,9 @@ namespace std\n       // If the buffer was not large enough, try again with the correct size.\n       if (__res >= __len)\n \t{\n-\t  _CharT* __c2 =\n+\t  __c =\n \t    static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * (__res + 1)));\n-\t  _M_transform_helper(__c2, __lo, __res + 1);\n-\t  return string_type(__c2);\n+\t  _M_transform_helper(__c, __lo, __res + 1);\n \t}\n       return string_type(__c);\n     }"}, {"sha": "a97f78fc8d6d91f3e1631b62c6d9503d7ebc550c", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_char.cc", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3039874b15c391cc2a793abcfa3c2ef1f73844c9/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3039874b15c391cc2a793abcfa3c2ef1f73844c9/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc?ref=3039874b15c391cc2a793abcfa3c2ef1f73844c9", "patch": "@@ -226,7 +226,7 @@ void test02()\n   oss.setf(ios_base::showbase);\n \n   oss.str(empty);\n- iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n+  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n   string result3 = oss.str();\n   VERIFY( result3 == \"7.200.000.000,00 DEM \");\n \n@@ -341,12 +341,40 @@ void test05()\n   VERIFY( fmt.str() == \"*(1,234.56)\" );\n }\n \n+struct My_money_io_2 : public std::moneypunct<char,false>\n+{\n+  char_type do_thousands_sep() const { return ','; }\n+  std::string do_grouping() const { return \"\\001\"; }\n+};\n+\n+// Make sure we can output a very big amount of money (with grouping too).\n+void test06()\n+{\n+  using namespace std;\n+  typedef ostreambuf_iterator<char> OutIt;\n+\n+  locale loc(locale::classic(), new My_money_io_2);\n+\n+  bool intl = false;\n+\n+  long double val = 1e50L;\n+  const money_put<char,OutIt>& mp  =\n+    use_facet<money_put<char, OutIt> >(loc);\n+\n+  ostringstream fmt;\n+  fmt.imbue(loc);\n+  OutIt out(fmt);\n+  mp.put(out,intl,fmt,'*',val);\n+  VERIFY( fmt );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n   test05();\n+  test06();\n   return 0;\n }"}, {"sha": "dc77d0a05044e8c5599f9295742364ff470bac26", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_wchar_t.cc", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3039874b15c391cc2a793abcfa3c2ef1f73844c9/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3039874b15c391cc2a793abcfa3c2ef1f73844c9/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc?ref=3039874b15c391cc2a793abcfa3c2ef1f73844c9", "patch": "@@ -226,7 +226,7 @@ void test02()\n   oss.setf(ios_base::showbase);\n \n   oss.str(empty);\n- iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n+  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n   wstring result3 = oss.str();\n   VERIFY( result3 == L\"7.200.000.000,00 DEM \");\n \n@@ -340,6 +340,33 @@ void test05()\n   mp.put(out,intl,fmt,L'*',val);\n   VERIFY( fmt.str() == L\"*(1,234.56)\" );\n }\n+\n+struct My_money_io_2 : public std::moneypunct<wchar_t,false>\n+{\n+  char_type do_thousands_sep() const { return L','; }\n+  std::string do_grouping() const { return \"\\001\"; }\n+};\n+\n+// Make sure we can output a very big amount of money (with grouping too).\n+void test06()\n+{\n+  using namespace std;\n+  typedef ostreambuf_iterator<wchar_t> OutIt;\n+\n+  locale loc(locale::classic(), new My_money_io_2);\n+\n+  bool intl = false;\n+\n+  long double val = 1e50L;\n+  const money_put<wchar_t,OutIt>& mp  =\n+    use_facet<money_put<wchar_t, OutIt> >(loc);\n+\n+  wostringstream fmt;\n+  fmt.imbue(loc);\n+  OutIt out(fmt);\n+  mp.put(out,intl,fmt,'*',val);\n+  VERIFY( fmt );\n+}\n #endif\n \n int main()\n@@ -350,6 +377,7 @@ int main()\n   test03();\n   test04();\n   test05();\n+  test06();\n #endif\n   return 0;\n }"}]}