{"sha": "dfa6e5b43b9a801973f5c8be21e158586beb8056", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZhNmU1YjQzYjlhODAxOTczZjVjOGJlMjFlMTU4NTg2YmViODA1Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-07-17T07:13:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-07-17T07:13:52Z"}, "message": "gimple.h (enum gf_mask): Remove GF_OMP_FOR_SIMD...\n\n\t* gimple.h (enum gf_mask): Remove GF_OMP_FOR_SIMD, change\n\tGF_OMP_FOR_KIND_SIMD to a value serially after other kinds,\n\tdivide GF_OMP_FOR_KIND_MASK, GF_OMP_FOR_COMBINED,\n\tGF_OMP_FOR_COMBINED_INTO, GF_OMP_FOR_GRID_PHONY,\n\tGF_OMP_FOR_GRID_INTRA_GROUP and GF_OMP_FOR_GRID_GROUP_ITER by two.\n\t* omp-grid.c (grid_process_grid_body,\n\tgrid_eliminate_combined_simd_part): Use GF_OMP_FOR_KIND_SIMD instead\n\tof GF_OMP_FOR_SIMD, don't test & GF_OMP_FOR_SIMD but\n\t== GF_OMP_FOR_KIND_SIMD.\n\t* omp-low.c (build_outer_var_ref, scan_sharing_clauses,\n\tcheck_omp_nesting_restrictions, scan_omp_1_stmt,\n\tlower_rec_input_clauses, lower_lastprivate_conditional_clauses,\n\tlower_lastprivate_clauses, lower_reduction_clauses, lower_omp_scan,\n\tomp_find_scan): Likewise.\n\t* omp-expand.c (expand_omp_for): Likewise.\n\t* omp-general.c (omp_extract_for_data): Likewise.\n\nFrom-SVN: r273544", "tree": {"sha": "4d2e3b172e075283f702e5c5aa65409c28b3101c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d2e3b172e075283f702e5c5aa65409c28b3101c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfa6e5b43b9a801973f5c8be21e158586beb8056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa6e5b43b9a801973f5c8be21e158586beb8056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfa6e5b43b9a801973f5c8be21e158586beb8056", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa6e5b43b9a801973f5c8be21e158586beb8056/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63"}], "stats": {"total": 65, "additions": 40, "deletions": 25}, "files": [{"sha": "0c1c133d0ad3a378e28ad28f5df7730035fe8a66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa6e5b43b9a801973f5c8be21e158586beb8056/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa6e5b43b9a801973f5c8be21e158586beb8056/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfa6e5b43b9a801973f5c8be21e158586beb8056", "patch": "@@ -1,5 +1,22 @@\n 2019-07-17  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gimple.h (enum gf_mask): Remove GF_OMP_FOR_SIMD, change\n+\tGF_OMP_FOR_KIND_SIMD to a value serially after other kinds,\n+\tdivide GF_OMP_FOR_KIND_MASK, GF_OMP_FOR_COMBINED,\n+\tGF_OMP_FOR_COMBINED_INTO, GF_OMP_FOR_GRID_PHONY,\n+\tGF_OMP_FOR_GRID_INTRA_GROUP and GF_OMP_FOR_GRID_GROUP_ITER by two.\n+\t* omp-grid.c (grid_process_grid_body,\n+\tgrid_eliminate_combined_simd_part): Use GF_OMP_FOR_KIND_SIMD instead\n+\tof GF_OMP_FOR_SIMD, don't test & GF_OMP_FOR_SIMD but\n+\t== GF_OMP_FOR_KIND_SIMD.\n+\t* omp-low.c (build_outer_var_ref, scan_sharing_clauses,\n+\tcheck_omp_nesting_restrictions, scan_omp_1_stmt,\n+\tlower_rec_input_clauses, lower_lastprivate_conditional_clauses,\n+\tlower_lastprivate_clauses, lower_reduction_clauses, lower_omp_scan,\n+\tomp_find_scan): Likewise.\n+\t* omp-expand.c (expand_omp_for): Likewise.\n+\t* omp-general.c (omp_extract_for_data): Likewise.\n+\n \tPR tree-optimization/91157\n \t* tree-vect-generic.c (expand_vector_comparison): Handle lhs being\n \ta vector boolean with scalar mode."}, {"sha": "442a121819e40fa5ef0d3e653f050966f70145d2", "filename": "gcc/gimple.h", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa6e5b43b9a801973f5c8be21e158586beb8056/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa6e5b43b9a801973f5c8be21e158586beb8056/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=dfa6e5b43b9a801973f5c8be21e158586beb8056", "patch": "@@ -153,24 +153,22 @@ enum gf_mask {\n     GF_OMP_PARALLEL_GRID_PHONY = 1 << 1,\n     GF_OMP_TASK_TASKLOOP\t= 1 << 0,\n     GF_OMP_TASK_TASKWAIT\t= 1 << 1,\n-    GF_OMP_FOR_KIND_MASK\t= (1 << 4) - 1,\n+    GF_OMP_FOR_KIND_MASK\t= (1 << 3) - 1,\n     GF_OMP_FOR_KIND_FOR\t\t= 0,\n     GF_OMP_FOR_KIND_DISTRIBUTE\t= 1,\n     GF_OMP_FOR_KIND_TASKLOOP\t= 2,\n     GF_OMP_FOR_KIND_OACC_LOOP\t= 4,\n-    GF_OMP_FOR_KIND_GRID_LOOP = 5,\n-    /* Flag for SIMD variants of OMP_FOR kinds.  */\n-    GF_OMP_FOR_SIMD\t\t= 1 << 3,\n-    GF_OMP_FOR_KIND_SIMD\t= GF_OMP_FOR_SIMD | 0,\n-    GF_OMP_FOR_COMBINED\t\t= 1 << 4,\n-    GF_OMP_FOR_COMBINED_INTO\t= 1 << 5,\n+    GF_OMP_FOR_KIND_GRID_LOOP\t= 5,\n+    GF_OMP_FOR_KIND_SIMD\t= 6,\n+    GF_OMP_FOR_COMBINED\t\t= 1 << 3,\n+    GF_OMP_FOR_COMBINED_INTO\t= 1 << 4,\n     /* The following flag must not be used on GF_OMP_FOR_KIND_GRID_LOOP loop\n        statements.  */\n-    GF_OMP_FOR_GRID_PHONY\t= 1 << 6,\n+    GF_OMP_FOR_GRID_PHONY\t= 1 << 5,\n     /* The following two flags should only be set on GF_OMP_FOR_KIND_GRID_LOOP\n        loop statements.  */\n-    GF_OMP_FOR_GRID_INTRA_GROUP\t= 1 << 6,\n-    GF_OMP_FOR_GRID_GROUP_ITER  = 1 << 7,\n+    GF_OMP_FOR_GRID_INTRA_GROUP\t= 1 << 5,\n+    GF_OMP_FOR_GRID_GROUP_ITER  = 1 << 6,\n     GF_OMP_TARGET_KIND_MASK\t= (1 << 4) - 1,\n     GF_OMP_TARGET_KIND_REGION\t= 0,\n     GF_OMP_TARGET_KIND_DATA\t= 1,"}, {"sha": "94543de62031bde1760860d0503372107ea0145c", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa6e5b43b9a801973f5c8be21e158586beb8056/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa6e5b43b9a801973f5c8be21e158586beb8056/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=dfa6e5b43b9a801973f5c8be21e158586beb8056", "patch": "@@ -6532,7 +6532,7 @@ expand_omp_for (struct omp_region *region, gimple *inner_stmt)\n        original loops from being detected.  Fix that up.  */\n     loops_state_set (LOOPS_NEED_FIXUP);\n \n-  if (gimple_omp_for_kind (fd.for_stmt) & GF_OMP_FOR_SIMD)\n+  if (gimple_omp_for_kind (fd.for_stmt) == GF_OMP_FOR_KIND_SIMD)\n     expand_omp_simd (region, &fd);\n   else if (gimple_omp_for_kind (fd.for_stmt) == GF_OMP_FOR_KIND_OACC_LOOP)\n     {"}, {"sha": "66be94f6ff929df8475b83d325a1c2a66a29c019", "filename": "gcc/omp-general.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa6e5b43b9a801973f5c8be21e158586beb8056/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa6e5b43b9a801973f5c8be21e158586beb8056/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=dfa6e5b43b9a801973f5c8be21e158586beb8056", "patch": "@@ -156,7 +156,7 @@ omp_extract_for_data (gomp_for *for_stmt, struct omp_for_data *fd,\n   int i;\n   struct omp_for_data_loop dummy_loop;\n   location_t loc = gimple_location (for_stmt);\n-  bool simd = gimple_omp_for_kind (for_stmt) & GF_OMP_FOR_SIMD;\n+  bool simd = gimple_omp_for_kind (for_stmt) == GF_OMP_FOR_KIND_SIMD;\n   bool distribute = gimple_omp_for_kind (for_stmt)\n \t\t    == GF_OMP_FOR_KIND_DISTRIBUTE;\n   bool taskloop = gimple_omp_for_kind (for_stmt)"}, {"sha": "e7e18aaa2e1e4f4acfcd250773d9e7da09f5e0ab", "filename": "gcc/omp-grid.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa6e5b43b9a801973f5c8be21e158586beb8056/gcc%2Fomp-grid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa6e5b43b9a801973f5c8be21e158586beb8056/gcc%2Fomp-grid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-grid.c?ref=dfa6e5b43b9a801973f5c8be21e158586beb8056", "patch": "@@ -1002,7 +1002,7 @@ grid_process_grid_body (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n   *handled_ops_p = false;\n   gimple *stmt = gsi_stmt (*gsi);\n   if (gimple_code (stmt) == GIMPLE_OMP_FOR\n-      && (gimple_omp_for_kind (stmt) & GF_OMP_FOR_SIMD))\n+      && gimple_omp_for_kind (stmt) == GF_OMP_FOR_KIND_SIMD)\n   {\n     gomp_for *loop = as_a <gomp_for *> (stmt);\n     tree clauses = gimple_omp_for_clauses (loop);\n@@ -1030,14 +1030,14 @@ grid_eliminate_combined_simd_part (gomp_for *parloop)\n \n   memset (&wi, 0, sizeof (wi));\n   wi.val_only = true;\n-  enum gf_mask msk = GF_OMP_FOR_SIMD;\n+  enum gf_mask msk = GF_OMP_FOR_KIND_SIMD;\n   wi.info = (void *) &msk;\n   walk_gimple_seq (gimple_omp_body (parloop), omp_find_combined_for, NULL, &wi);\n   gimple *stmt = (gimple *) wi.info;\n   /* We expect that the SIMD id the only statement in the parallel loop.  */\n   gcc_assert (stmt\n \t      && gimple_code (stmt) == GIMPLE_OMP_FOR\n-\t      && (gimple_omp_for_kind (stmt) == GF_OMP_FOR_SIMD)\n+\t      && (gimple_omp_for_kind (stmt) == GF_OMP_FOR_KIND_SIMD)\n \t      && gimple_omp_for_combined_into_p (stmt)\n \t      && !gimple_omp_for_combined_p (stmt));\n   gomp_for *simd = as_a <gomp_for *> (stmt);"}, {"sha": "a18f24c7f96198f15c2aad4fe1366d5a5a786f53", "filename": "gcc/omp-low.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa6e5b43b9a801973f5c8be21e158586beb8056/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa6e5b43b9a801973f5c8be21e158586beb8056/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=dfa6e5b43b9a801973f5c8be21e158586beb8056", "patch": "@@ -580,7 +580,7 @@ build_outer_var_ref (tree var, omp_context *ctx,\n       x = build_receiver_ref (var, by_ref, ctx);\n     }\n   else if ((gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n-\t    && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_SIMD)\n+\t    && gimple_omp_for_kind (ctx->stmt) == GF_OMP_FOR_KIND_SIMD)\n \t   || (code == OMP_CLAUSE_PRIVATE\n \t       && (gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n \t\t   || gimple_code (ctx->stmt) == GIMPLE_OMP_SECTIONS\n@@ -1441,7 +1441,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t      install_var_local (decl, ctx);\n \t    }\n \t  else if (gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n-\t\t   && (gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_SIMD)\n+\t\t   && gimple_omp_for_kind (ctx->stmt) == GF_OMP_FOR_KIND_SIMD\n \t\t   && !OMP_CLAUSE__CONDTEMP__ITER (c))\n \t    install_var_local (decl, ctx);\n \t  break;\n@@ -2750,7 +2750,7 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n   switch (gimple_code (stmt))\n     {\n     case GIMPLE_OMP_FOR:\n-      if (gimple_omp_for_kind (stmt) & GF_OMP_FOR_SIMD)\n+      if (gimple_omp_for_kind (stmt) == GF_OMP_FOR_KIND_SIMD)\n \treturn true;\n       if (gimple_omp_for_kind (stmt) == GF_OMP_FOR_KIND_DISTRIBUTE)\n \t{\n@@ -3496,7 +3496,7 @@ scan_omp_1_stmt (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n \t{\n \t  if (ctx\n \t      && gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n-\t      && gimple_omp_for_kind (ctx->stmt) == GF_OMP_FOR_SIMD\n+\t      && gimple_omp_for_kind (ctx->stmt) == GF_OMP_FOR_KIND_SIMD\n \t      && setjmp_or_longjmp_p (fndecl))\n \t    {\n \t      remove = true;\n@@ -4118,7 +4118,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n   bool reduction_omp_orig_ref = false;\n   int pass;\n   bool is_simd = (gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n-\t\t  && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_SIMD);\n+\t\t  && gimple_omp_for_kind (ctx->stmt) == GF_OMP_FOR_KIND_SIMD);\n   omplow_simd_context sctx = omplow_simd_context ();\n   tree simt_lane = NULL_TREE, simtrec = NULL_TREE;\n   tree ivar = NULL_TREE, lvar = NULL_TREE, uid = NULL_TREE;\n@@ -6093,7 +6093,7 @@ lower_lastprivate_conditional_clauses (tree *clauses, omp_context *ctx)\n   tree cond_ptr = NULL_TREE;\n   tree iter_var = NULL_TREE;\n   bool is_simd = (gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n-\t\t  && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_SIMD);\n+\t\t  && gimple_omp_for_kind (ctx->stmt) == GF_OMP_FOR_KIND_SIMD);\n   tree next = *clauses;\n   for (tree c = *clauses; c; c = OMP_CLAUSE_CHAIN (c))\n     if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LASTPRIVATE\n@@ -6225,7 +6225,7 @@ lower_lastprivate_clauses (tree clauses, tree predicate, gimple_seq *body_p,\n \n   bool maybe_simt = false;\n   if (gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n-      && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_SIMD)\n+      && gimple_omp_for_kind (ctx->stmt) == GF_OMP_FOR_KIND_SIMD)\n     {\n       maybe_simt = omp_find_clause (orig_clauses, OMP_CLAUSE__SIMT_);\n       simduid = omp_find_clause (orig_clauses, OMP_CLAUSE__SIMDUID_);\n@@ -6707,7 +6707,7 @@ lower_reduction_clauses (tree clauses, gimple_seq *stmt_seqp,\n \n   /* SIMD reductions are handled in lower_rec_input_clauses.  */\n   if (gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n-      && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_SIMD)\n+      && gimple_omp_for_kind (ctx->stmt) == GF_OMP_FOR_KIND_SIMD)\n     return;\n \n   /* inscan reductions are handled elsewhere.  */\n@@ -8923,7 +8923,7 @@ lower_omp_scan (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \n   bool input_phase = has_clauses ^ octx->scan_inclusive;\n   bool is_simd = (gimple_code (octx->stmt) == GIMPLE_OMP_FOR\n-\t\t  && (gimple_omp_for_kind (octx->stmt) & GF_OMP_FOR_SIMD));\n+\t\t  && gimple_omp_for_kind (octx->stmt) == GF_OMP_FOR_KIND_SIMD);\n   bool is_for = (gimple_code (octx->stmt) == GIMPLE_OMP_FOR\n \t\t && gimple_omp_for_kind (octx->stmt) == GF_OMP_FOR_KIND_FOR\n \t\t && !gimple_omp_for_combined_p (octx->stmt));\n@@ -9409,7 +9409,7 @@ omp_find_scan (gimple_stmt_iterator *gsi_p, bool *handled_ops_p,\n     WALK_SUBSTMTS;\n \n     case GIMPLE_OMP_FOR:\n-      if ((gimple_omp_for_kind (stmt) & GF_OMP_FOR_SIMD)\n+      if (gimple_omp_for_kind (stmt) == GF_OMP_FOR_KIND_SIMD\n \t  && gimple_omp_for_combined_into_p (stmt))\n \t*handled_ops_p = false;\n       break;"}]}