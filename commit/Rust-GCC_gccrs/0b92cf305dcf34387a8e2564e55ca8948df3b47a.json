{"sha": "0b92cf305dcf34387a8e2564e55ca8948df3b47a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI5MmNmMzA1ZGNmMzQzODdhOGUyNTY0ZTU1Y2E4OTQ4ZGYzYjQ3YQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-10-01T16:58:35Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-10-01T16:58:35Z"}, "message": "invoke.texi (early-inlining-insns-O2): Document.\n\n\n\t* doc/invoke.texi (early-inlining-insns-O2): Document.\n\t(early-inlining-insns): Update.\n\t* params.def (early-inlining-insns-O2): New bound.\n\t(early-inlining-insns): Update docs.\n\t* ipa-inline.c (want_early_inline_function_p): Use new bound.\n\n\t* g++.dg/tree-ssa/pr61034.C: Set early-inlining-insns-O2=14.\n\t* g++.dg/tree-ssa/pr8781.C: Likewise.\n\t* g++.dg/warn/Wstringop-truncation-1.C: Likewise.\n\t* gcc.dg/ipa/pr63416.c: likewise.\n\t* gcc.dg/vect/pr66142.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-thread-12.c: Mark compure_idf inline.\n\nFrom-SVN: r276416", "tree": {"sha": "1158f5583f8db80f0e72fac426c41a28d1013694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1158f5583f8db80f0e72fac426c41a28d1013694"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b92cf305dcf34387a8e2564e55ca8948df3b47a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b92cf305dcf34387a8e2564e55ca8948df3b47a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b92cf305dcf34387a8e2564e55ca8948df3b47a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b92cf305dcf34387a8e2564e55ca8948df3b47a/comments", "author": null, "committer": null, "parents": [{"sha": "7552c36afa1f9058bb39f336ae84f019621885a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7552c36afa1f9058bb39f336ae84f019621885a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7552c36afa1f9058bb39f336ae84f019621885a0"}], "stats": {"total": 65, "additions": 50, "deletions": 15}, "files": [{"sha": "b4c4292c299abbb712bd461169ad59e2d604faae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b92cf305dcf34387a8e2564e55ca8948df3b47a", "patch": "@@ -1,3 +1,11 @@\n+2019-10-01  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* doc/invoke.texi (early-inlining-insns-O2): Document.\n+\t(early-inlining-insns): Update.\n+\t* params.def (early-inlining-insns-O2): New bound.\n+\t(early-inlining-insns): Update docs.\n+\t* ipa-inline.c (want_early_inline_function_p): Use new bound.\n+\n 2019-10-01  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/88562"}, {"sha": "4281ee7c61428f5c9bb62f7cb986bbe12b5576aa", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0b92cf305dcf34387a8e2564e55ca8948df3b47a", "patch": "@@ -11291,9 +11291,17 @@ recursion depth can be guessed from the probability that function recurses\n via a given call expression.  This parameter limits inlining only to call\n expressions whose probability exceeds the given threshold (in percents).\n \n+@item early-inlining-insns-O2\n+Specify growth that the early inliner can make.  In effect it increases\n+the amount of inlining for code having a large abstraction penalty.\n+This is applied to functions compiled with @option{-O1} or @option{-O2}\n+optimization levels.\n+\n @item early-inlining-insns\n Specify growth that the early inliner can make.  In effect it increases\n the amount of inlining for code having a large abstraction penalty.\n+This is applied to functions compiled with @option{-O3} or @option{-Ofast}\n+optimization levels.\n \n @item max-early-inliner-iterations\n Limit of iterations of the early inliner.  This basically bounds"}, {"sha": "c8689c7d9a8b494ad4aeea637329120cb5ac4398", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=0b92cf305dcf34387a8e2564e55ca8948df3b47a", "patch": "@@ -641,6 +641,10 @@ want_early_inline_function_p (struct cgraph_edge *e)\n     {\n       int growth = estimate_edge_growth (e);\n       int n;\n+      int early_inlining_insns = opt_for_fn (e->caller->decl, optimize) >= 3\n+\t\t\t\t ? PARAM_VALUE (PARAM_EARLY_INLINING_INSNS)\n+\t\t\t\t : PARAM_VALUE (PARAM_EARLY_INLINING_INSNS_O2);\n+\n \n       if (growth <= PARAM_VALUE (PARAM_MAX_INLINE_INSNS_SIZE))\n \t;\n@@ -654,26 +658,28 @@ want_early_inline_function_p (struct cgraph_edge *e)\n \t\t\t     growth);\n \t  want_inline = false;\n \t}\n-      else if (growth > PARAM_VALUE (PARAM_EARLY_INLINING_INSNS))\n+      else if (growth > early_inlining_insns)\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, e->call_stmt,\n \t\t\t     \"  will not early inline: %C->%C, \"\n-\t\t\t     \"growth %i exceeds --param early-inlining-insns\\n\",\n-\t\t\t     e->caller, callee,\n-\t\t\t     growth);\n+\t\t\t     \"growth %i exceeds --param early-inlining-insns%s\\n\",\n+\t\t\t     e->caller, callee, growth,\n+\t\t\t     opt_for_fn (e->caller->decl, optimize) >= 3\n+\t\t\t     ? \"\" : \"-O2\");\n \t  want_inline = false;\n \t}\n       else if ((n = num_calls (callee)) != 0\n-\t       && growth * (n + 1) > PARAM_VALUE (PARAM_EARLY_INLINING_INSNS))\n+\t       && growth * (n + 1) > early_inlining_insns)\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, e->call_stmt,\n \t\t\t     \"  will not early inline: %C->%C, \"\n-\t\t\t     \"growth %i exceeds --param early-inlining-insns \"\n+\t\t\t     \"growth %i exceeds --param early-inlining-insns%s \"\n \t\t\t     \"divided by number of calls\\n\",\n-\t\t\t     e->caller, callee,\n-\t\t\t     growth);\n+\t\t\t     e->caller, callee, growth,\n+\t\t\t     opt_for_fn (e->caller->decl, optimize) >= 3\n+\t\t\t     ? \"\" : \"-O2\");\n \t  want_inline = false;\n \t}\n     }"}, {"sha": "0acf29b6c4dac55f96cfd2db4e8e3ca644fc5479", "filename": "gcc/params.def", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=0b92cf305dcf34387a8e2564e55ca8948df3b47a", "patch": "@@ -233,8 +233,12 @@ DEFPARAM(PARAM_IPCP_UNIT_GROWTH,\n \t 10, 0, 0)\n DEFPARAM(PARAM_EARLY_INLINING_INSNS,\n \t \"early-inlining-insns\",\n-\t \"Maximal estimated growth of function body caused by early inlining of single call.\",\n+\t \"Maximal estimated growth of function body caused by early inlining of single call with -O3 and -Ofast.\",\n \t 14, 0, 0)\n+DEFPARAM(PARAM_EARLY_INLINING_INSNS_O2,\n+\t \"early-inlining-insns-O2\",\n+\t \"Maximal estimated growth of function body caused by early inlining of single call with -O1 and -O2.\",\n+\t 6, 0, 0)\n DEFPARAM(PARAM_LARGE_STACK_FRAME,\n \t \"large-stack-frame\",\n \t \"The size of stack frame to be considered large.\","}, {"sha": "0dcaf4b62925ec975af4d416cad366719b76e610", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b92cf305dcf34387a8e2564e55ca8948df3b47a", "patch": "@@ -1,3 +1,12 @@\n+2019-10-01  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/tree-ssa/pr61034.C: Set early-inlining-insns-O2=14.\n+\t* g++.dg/tree-ssa/pr8781.C: Likewise.\n+\t* g++.dg/warn/Wstringop-truncation-1.C: Likewise.\n+\t* gcc.dg/ipa/pr63416.c: likewise.\n+\t* gcc.dg/vect/pr66142.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-thread-12.c: Mark compure_idf inline.\n+\n 2019-10-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/91925"}, {"sha": "2e3dfecacb4a06daa713b4017c895528fb1634d3", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr61034.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61034.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61034.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61034.C?ref=0b92cf305dcf34387a8e2564e55ca8948df3b47a", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-O2 -fdump-tree-fre3 -fdump-tree-optimized -fdelete-null-pointer-checks\" }\n+// { dg-options \"-O2 -fdump-tree-fre3 -fdump-tree-optimized -fdelete-null-pointer-checks --param early-inlining-insns-O2=14\" }\n \n #define assume(x) if(!(x))__builtin_unreachable()\n "}, {"sha": "5bc1ef0352052a41b962f36765983af0686bd2ef", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr8781.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr8781.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr8781.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr8781.C?ref=0b92cf305dcf34387a8e2564e55ca8948df3b47a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fno-tree-sra -fdump-tree-fre1\" } */\n+/* { dg-options \"-O -fno-tree-sra -fdump-tree-fre1 --param early-inlining-insns-O2=14\" } */\n \n int f();\n "}, {"sha": "49dde0a65ba669fccefe295f19952d6b8cf5373d", "filename": "gcc/testsuite/g++.dg/warn/Wstringop-truncation-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-truncation-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-truncation-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-truncation-1.C?ref=0b92cf305dcf34387a8e2564e55ca8948df3b47a", "patch": "@@ -1,7 +1,7 @@\n /* PR/tree-optimization/84480 - bogus -Wstringop-truncation despite\n    assignment with an inlined string literal\n    { dg-do compile }\n-   { dg-options \"-O2 -Wstringop-truncation\" }  */\n+   { dg-options \"-O2 -Wstringop-truncation --param early-inlining-insns-O2=14\" }  */\n \n #include <string.h>\n "}, {"sha": "5873954fba302173fa72728af503379dfe1abdef", "filename": "gcc/testsuite/gcc.dg/ipa/pr63416.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr63416.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr63416.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr63416.c?ref=0b92cf305dcf34387a8e2564e55ca8948df3b47a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-optimized\"  } */\n+/* { dg-options \"-O2 -fdump-tree-optimized --param early-inlining-insns-O2=14\"  } */\n #define _UNUSED_ __attribute__((__unused__))\n \n typedef int TEST_F30 (int *v);"}, {"sha": "216de23d791b93e257f80c97e6736a305a86970d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c?ref=0b92cf305dcf34387a8e2564e55ca8948df3b47a", "patch": "@@ -56,7 +56,7 @@ bmp_iter_and_compl (bitmap_iterator * bi, unsigned *bit_no)\n }\n \n extern int VEC_int_base_length (VEC_int_base *);\n-bitmap\n+inline bitmap\n compute_idf (bitmap def_blocks, bitmap_head * dfs)\n {\n   bitmap_iterator bi;"}, {"sha": "a0316f1f01ec002dd92e1d614ab8ee9ff2fc01d4", "filename": "gcc/testsuite/gcc.dg/vect/pr66142.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr66142.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b92cf305dcf34387a8e2564e55ca8948df3b47a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr66142.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr66142.c?ref=0b92cf305dcf34387a8e2564e55ca8948df3b47a", "patch": "@@ -1,6 +1,6 @@\n /* PR middle-end/66142 */\n /* { dg-do compile } */\n-/* { dg-additional-options \"-ffast-math -fopenmp-simd\" } */\n+/* { dg-additional-options \"-ffast-math -fopenmp-simd --param early-inlining-insns-O2=14\" } */\n /* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n \n struct A { float x, y; };"}]}