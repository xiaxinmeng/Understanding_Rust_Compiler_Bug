{"sha": "3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU3MTkyNWViNWUwZDM5ZjFhMWNmM2RlNjRlM2U5NjQ4MzI5Y2I4MQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-05-18T12:00:20Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-05-18T12:00:20Z"}, "message": "select.c: Moved content to select_inc.c.\n\n        * runtime/select.c: Moved content to select_inc.c. Include it. \n        Add macros for different character types.\n        * runtime/select_inc.c: New file.\n        * runtime/convert_char.c: New file.\n        * intrinsics/pack_generic.c (pack_char4, pack_s_char4): New\n        functions.\n        * intrinsics/transpose_generic.c (transpose_char4): New function.\n        * intrinsics/spread_generic.c (spread_char4, spread_char4_scalar):\n        New functions.\n        * intrinsics/unpack_generic.c (unpack1_char4, unpack0_char4): \n        New functions.\n        * intrinsics/reshape_generic.c (reshape_char): Use\n        gfc_charlen_type as type for length variables.\n        (reshape_char4): New function.\n        * gfortran.map (GFORTRAN_1.1): Add _gfortran_select_string_char4,\n        _gfortran_convert_char1_to_char4, _gfortran_convert_char4_to_char1,\n        _gfortran_transpose_char4, _gfortran_spread_char4,\n        _gfortran_spread_char4_scalar, _gfortran_reshape_char4,\n        _gfortran_pack_char4, _gfortran_pack_s_char4,\n        _gfortran_unpack0_char4 and _gfortran_unpack1_char4.\n        * Makefile.am: Add runtime/convert_char.c.\n        * Makefile.in: Regenerate.\n\nFrom-SVN: r135496", "tree": {"sha": "3ff478ceec1d56183aae95bb81a5d30776bd1ff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ff478ceec1d56183aae95bb81a5d30776bd1ff4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7bff0d1d5a2ca472ab99eba22e006a34ad37c56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7bff0d1d5a2ca472ab99eba22e006a34ad37c56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7bff0d1d5a2ca472ab99eba22e006a34ad37c56"}], "stats": {"total": 574, "additions": 449, "deletions": 125}, "files": [{"sha": "a384e6aea6ad4f167d859a2a85227da6590740af", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "patch": "@@ -1,3 +1,28 @@\n+2008-05-18  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* runtime/select.c: Moved content to select_inc.c. Include it. \n+\tAdd macros for different character types.\n+\t* runtime/select_inc.c: New file.\n+\t* runtime/convert_char.c: New file.\n+\t* intrinsics/pack_generic.c (pack_char4, pack_s_char4): New\n+\tfunctions.\n+\t* intrinsics/transpose_generic.c (transpose_char4): New function.\n+\t* intrinsics/spread_generic.c (spread_char4, spread_char4_scalar):\n+\tNew functions.\n+\t* intrinsics/unpack_generic.c (unpack1_char4, unpack0_char4): \n+\tNew functions.\n+\t* intrinsics/reshape_generic.c (reshape_char): Use\n+\tgfc_charlen_type as type for length variables.\n+\t(reshape_char4): New function.\n+\t* gfortran.map (GFORTRAN_1.1): Add _gfortran_select_string_char4,\n+\t_gfortran_convert_char1_to_char4, _gfortran_convert_char4_to_char1,\n+\t_gfortran_transpose_char4, _gfortran_spread_char4,\n+\t_gfortran_spread_char4_scalar, _gfortran_reshape_char4,\n+\t_gfortran_pack_char4, _gfortran_pack_s_char4,\n+\t_gfortran_unpack0_char4 and _gfortran_unpack1_char4.\n+\t* Makefile.am: Add runtime/convert_char.c.\n+\t* Makefile.in: Regenerate.\n+\n 2008-05-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* io/list_read.c (list_formatted_read_scalar):  Declare"}, {"sha": "65a307af4bc60d3e3dd35d2d6ed3284e56e403c1", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "patch": "@@ -118,6 +118,7 @@ runtime/in_unpack_generic.c\n gfor_src= \\\n runtime/backtrace.c \\\n runtime/compile_options.c \\\n+runtime/convert_char.c \\\n runtime/environ.c \\\n runtime/error.c \\\n runtime/fpu.c \\"}, {"sha": "594d22863c8f6f705fcefcdabd81bc8eb0c56d8e", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "patch": "@@ -79,15 +79,15 @@ toolexeclibLTLIBRARIES_INSTALL = $(INSTALL)\n LTLIBRARIES = $(myexeclib_LTLIBRARIES) $(toolexeclib_LTLIBRARIES)\n libgfortran_la_LIBADD =\n am__libgfortran_la_SOURCES_DIST = runtime/backtrace.c \\\n-\truntime/compile_options.c runtime/environ.c runtime/error.c \\\n-\truntime/fpu.c runtime/main.c runtime/memory.c runtime/pause.c \\\n-\truntime/stop.c runtime/string.c runtime/select.c \\\n-\t$(srcdir)/generated/all_l1.c $(srcdir)/generated/all_l2.c \\\n-\t$(srcdir)/generated/all_l4.c $(srcdir)/generated/all_l8.c \\\n-\t$(srcdir)/generated/all_l16.c $(srcdir)/generated/any_l1.c \\\n-\t$(srcdir)/generated/any_l2.c $(srcdir)/generated/any_l4.c \\\n-\t$(srcdir)/generated/any_l8.c $(srcdir)/generated/any_l16.c \\\n-\t$(srcdir)/generated/count_1_l.c \\\n+\truntime/compile_options.c runtime/convert_char.c \\\n+\truntime/environ.c runtime/error.c runtime/fpu.c runtime/main.c \\\n+\truntime/memory.c runtime/pause.c runtime/stop.c \\\n+\truntime/string.c runtime/select.c $(srcdir)/generated/all_l1.c \\\n+\t$(srcdir)/generated/all_l2.c $(srcdir)/generated/all_l4.c \\\n+\t$(srcdir)/generated/all_l8.c $(srcdir)/generated/all_l16.c \\\n+\t$(srcdir)/generated/any_l1.c $(srcdir)/generated/any_l2.c \\\n+\t$(srcdir)/generated/any_l4.c $(srcdir)/generated/any_l8.c \\\n+\t$(srcdir)/generated/any_l16.c $(srcdir)/generated/count_1_l.c \\\n \t$(srcdir)/generated/count_2_l.c \\\n \t$(srcdir)/generated/count_4_l.c \\\n \t$(srcdir)/generated/count_8_l.c \\\n@@ -567,8 +567,9 @@ am__libgfortran_la_SOURCES_DIST = runtime/backtrace.c \\\n \t$(srcdir)/generated/misc_specifics.F90 intrinsics/dprod_r8.f90 \\\n \tintrinsics/f2c_specifics.F90 libgfortran_c.c $(filter-out \\\n \t%.c,$(prereq_SRC))\n-am__objects_1 = backtrace.lo compile_options.lo environ.lo error.lo \\\n-\tfpu.lo main.lo memory.lo pause.lo stop.lo string.lo select.lo\n+am__objects_1 = backtrace.lo compile_options.lo convert_char.lo \\\n+\tenviron.lo error.lo fpu.lo main.lo memory.lo pause.lo stop.lo \\\n+\tstring.lo select.lo\n am__objects_2 = all_l1.lo all_l2.lo all_l4.lo all_l8.lo all_l16.lo\n am__objects_3 = any_l1.lo any_l2.lo any_l4.lo any_l8.lo any_l16.lo\n am__objects_4 = count_1_l.lo count_2_l.lo count_4_l.lo count_8_l.lo \\\n@@ -1017,6 +1018,7 @@ runtime/in_unpack_generic.c\n gfor_src = \\\n runtime/backtrace.c \\\n runtime/compile_options.c \\\n+runtime/convert_char.c \\\n runtime/environ.c \\\n runtime/error.c \\\n runtime/fpu.c \\\n@@ -1761,6 +1763,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clock.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/close.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/compile_options.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/convert_char.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/count_16_l.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/count_1_l.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/count_2_l.Plo@am__quote@\n@@ -2620,6 +2623,13 @@ compile_options.lo: runtime/compile_options.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o compile_options.lo `test -f 'runtime/compile_options.c' || echo '$(srcdir)/'`runtime/compile_options.c\n \n+convert_char.lo: runtime/convert_char.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT convert_char.lo -MD -MP -MF \"$(DEPDIR)/convert_char.Tpo\" -c -o convert_char.lo `test -f 'runtime/convert_char.c' || echo '$(srcdir)/'`runtime/convert_char.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/convert_char.Tpo\" \"$(DEPDIR)/convert_char.Plo\"; else rm -f \"$(DEPDIR)/convert_char.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/convert_char.c' object='convert_char.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o convert_char.lo `test -f 'runtime/convert_char.c' || echo '$(srcdir)/'`runtime/convert_char.c\n+\n environ.lo: runtime/environ.c\n @am__fastdepCC_TRUE@\tif $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT environ.lo -MD -MP -MF \"$(DEPDIR)/environ.Tpo\" -c -o environ.lo `test -f 'runtime/environ.c' || echo '$(srcdir)/'`runtime/environ.c; \\\n @am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/environ.Tpo\" \"$(DEPDIR)/environ.Plo\"; else rm -f \"$(DEPDIR)/environ.Tpo\"; exit 1; fi"}, {"sha": "deac160423c2e285b14b48e242e2ef6ea40109aa", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "patch": "@@ -1049,6 +1049,17 @@ GFORTRAN_1.1 {\n     _gfortran_string_scan_char4;\n     _gfortran_string_trim_char4;\n     _gfortran_string_verify_char4;\n+    _gfortran_select_string_char4;\n+    _gfortran_convert_char1_to_char4;\n+    _gfortran_convert_char4_to_char1;\n+    _gfortran_transpose_char4;\n+    _gfortran_spread_char4;\n+    _gfortran_spread_char4_scalar;\n+    _gfortran_reshape_char4;\n+    _gfortran_pack_char4;\n+    _gfortran_pack_s_char4;\n+    _gfortran_unpack0_char4;\n+    _gfortran_unpack1_char4;\n } GFORTRAN_1.0; \n \n F2C_1.0 {"}, {"sha": "8f1e08cc2df507052096f85e7afe6895c71d95f2", "filename": "libgfortran/intrinsics/pack_generic.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fintrinsics%2Fpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fintrinsics%2Fpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fpack_generic.c?ref=3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "patch": "@@ -457,6 +457,7 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n   pack_internal (ret, array, mask, vector, size);\n }\n \n+\n extern void pack_char (gfc_array_char *, GFC_INTEGER_4, const gfc_array_char *,\n \t\t       const gfc_array_l1 *, const gfc_array_char *,\n \t\t       GFC_INTEGER_4, GFC_INTEGER_4);\n@@ -472,6 +473,23 @@ pack_char (gfc_array_char *ret,\n   pack_internal (ret, array, mask, vector, array_length);\n }\n \n+\n+extern void pack_char4 (gfc_array_char *, GFC_INTEGER_4, const gfc_array_char *,\n+\t\t\tconst gfc_array_l1 *, const gfc_array_char *,\n+\t\t\tGFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(pack_char4);\n+\n+void\n+pack_char4 (gfc_array_char *ret,\n+\t    GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t    const gfc_array_char *array, const gfc_array_l1 *mask,\n+\t    const gfc_array_char *vector, GFC_INTEGER_4 array_length,\n+\t    GFC_INTEGER_4 vector_length __attribute__((unused)))\n+{\n+  pack_internal (ret, array, mask, vector, array_length * sizeof (gfc_char4_t));\n+}\n+\n+\n static void\n pack_s_internal (gfc_array_char *ret, const gfc_array_char *array,\n \t\t const GFC_LOGICAL_4 *mask, const gfc_array_char *vector,\n@@ -641,6 +659,7 @@ pack_s (gfc_array_char *ret, const gfc_array_char *array,\n   pack_s_internal (ret, array, mask, vector, GFC_DESCRIPTOR_SIZE (array));\n }\n \n+\n extern void pack_s_char (gfc_array_char *ret, GFC_INTEGER_4,\n \t\t\t const gfc_array_char *array, const GFC_LOGICAL_4 *,\n \t\t\t const gfc_array_char *, GFC_INTEGER_4,\n@@ -656,3 +675,21 @@ pack_s_char (gfc_array_char *ret,\n {\n   pack_s_internal (ret, array, mask, vector, array_length);\n }\n+\n+\n+extern void pack_s_char4 (gfc_array_char *ret, GFC_INTEGER_4,\n+\t\t\t  const gfc_array_char *array, const GFC_LOGICAL_4 *,\n+\t\t\t  const gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t  GFC_INTEGER_4);\n+export_proto(pack_s_char4);\n+\n+void\n+pack_s_char4 (gfc_array_char *ret,\n+\t      GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t      const gfc_array_char *array, const GFC_LOGICAL_4 *mask,\n+\t      const gfc_array_char *vector, GFC_INTEGER_4 array_length,\n+\t      GFC_INTEGER_4 vector_length __attribute__((unused)))\n+{\n+  pack_s_internal (ret, array, mask, vector,\n+\t\t   array_length * sizeof (gfc_char4_t));\n+}"}, {"sha": "ad823513ec4f4f721bc8589650c2eefa4de1545e", "filename": "libgfortran/intrinsics/reshape_generic.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fintrinsics%2Freshape_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fintrinsics%2Freshape_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Freshape_generic.c?ref=3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "patch": "@@ -298,16 +298,33 @@ reshape (parray *ret, parray *source, shape_type *shape, parray *pad,\n \t\t    GFC_DESCRIPTOR_SIZE (source));\n }\n \n-extern void reshape_char (parray *, GFC_INTEGER_4, parray *, shape_type *,\n-\t\t\t  parray *, shape_type *, GFC_INTEGER_4,\n-\t\t\t  GFC_INTEGER_4);\n+\n+extern void reshape_char (parray *, gfc_charlen_type, parray *, shape_type *,\n+\t\t\t  parray *, shape_type *, gfc_charlen_type,\n+\t\t\t  gfc_charlen_type);\n export_proto(reshape_char);\n \n void\n-reshape_char (parray *ret, GFC_INTEGER_4 ret_length __attribute__((unused)),\n+reshape_char (parray *ret, gfc_charlen_type ret_length __attribute__((unused)),\n \t      parray *source, shape_type *shape, parray *pad,\n-\t      shape_type *order, GFC_INTEGER_4 source_length,\n-\t      GFC_INTEGER_4 pad_length __attribute__((unused)))\n+\t      shape_type *order, gfc_charlen_type source_length,\n+\t      gfc_charlen_type pad_length __attribute__((unused)))\n {\n   reshape_internal (ret, source, shape, pad, order, source_length);\n }\n+\n+\n+extern void reshape_char4 (parray *, gfc_charlen_type, parray *, shape_type *,\n+\t\t\t   parray *, shape_type *, gfc_charlen_type,\n+\t\t\t   gfc_charlen_type);\n+export_proto(reshape_char4);\n+\n+void\n+reshape_char4 (parray *ret, gfc_charlen_type ret_length __attribute__((unused)),\n+\t       parray *source, shape_type *shape, parray *pad,\n+\t       shape_type *order, gfc_charlen_type source_length,\n+\t       gfc_charlen_type pad_length __attribute__((unused)))\n+{\n+  reshape_internal (ret, source, shape, pad, order,\n+\t\t    source_length * sizeof (gfc_char4_t));\n+}"}, {"sha": "68ea6b169c49645acd58d9b67b8555305fc1ae11", "filename": "libgfortran/intrinsics/spread_generic.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fintrinsics%2Fspread_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fintrinsics%2Fspread_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fspread_generic.c?ref=3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "patch": "@@ -408,6 +408,7 @@ spread (gfc_array_char *ret, const gfc_array_char *source,\n   spread_internal (ret, source, along, pncopies, GFC_DESCRIPTOR_SIZE (source));\n }\n \n+\n extern void spread_char (gfc_array_char *, GFC_INTEGER_4,\n \t\t\t const gfc_array_char *, const index_type *,\n \t\t\t const index_type *, GFC_INTEGER_4);\n@@ -422,6 +423,23 @@ spread_char (gfc_array_char *ret,\n   spread_internal (ret, source, along, pncopies, source_length);\n }\n \n+\n+extern void spread_char4 (gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t  const gfc_array_char *, const index_type *,\n+\t\t\t  const index_type *, GFC_INTEGER_4);\n+export_proto(spread_char4);\n+\n+void\n+spread_char4 (gfc_array_char *ret,\n+\t      GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t      const gfc_array_char *source, const index_type *along,\n+\t      const index_type *pncopies, GFC_INTEGER_4 source_length)\n+{\n+  spread_internal (ret, source, along, pncopies,\n+\t\t   source_length * sizeof (gfc_char4_t));\n+}\n+\n+\n /* The following are the prototypes for the versions of spread with a\n    scalar source.  */\n \n@@ -584,3 +602,21 @@ spread_char_scalar (gfc_array_char *ret,\n   spread_internal_scalar (ret, source, along, pncopies, source_length);\n }\n \n+\n+extern void spread_char4_scalar (gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t\t const char *, const index_type *,\n+\t\t\t\t const index_type *, GFC_INTEGER_4);\n+export_proto(spread_char4_scalar);\n+\n+void\n+spread_char4_scalar (gfc_array_char *ret,\n+\t\t     GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t\t     const char *source, const index_type *along,\n+\t\t     const index_type *pncopies, GFC_INTEGER_4 source_length)\n+{\n+  if (!ret->dtype)\n+    runtime_error (\"return array missing descriptor in spread()\");\n+  spread_internal_scalar (ret, source, along, pncopies,\n+\t\t\t  source_length * sizeof (gfc_char4_t));\n+}\n+"}, {"sha": "5b1929ca55ddac21e488fec8c5b8d5a901c30a19", "filename": "libgfortran/intrinsics/transpose_generic.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fintrinsics%2Ftranspose_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fintrinsics%2Ftranspose_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ftranspose_generic.c?ref=3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "patch": "@@ -94,6 +94,7 @@ transpose_internal (gfc_array_char *ret, gfc_array_char *source,\n     }\n }\n \n+\n extern void transpose (gfc_array_char *, gfc_array_char *);\n export_proto(transpose);\n \n@@ -103,6 +104,7 @@ transpose (gfc_array_char *ret, gfc_array_char *source)\n   transpose_internal (ret, source, GFC_DESCRIPTOR_SIZE (source));\n }\n \n+\n extern void transpose_char (gfc_array_char *, GFC_INTEGER_4,\n \t\t\t    gfc_array_char *, GFC_INTEGER_4);\n export_proto(transpose_char);\n@@ -114,3 +116,16 @@ transpose_char (gfc_array_char *ret,\n {\n   transpose_internal (ret, source, source_length);\n }\n+\n+\n+extern void transpose_char4 (gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t     gfc_array_char *, GFC_INTEGER_4);\n+export_proto(transpose_char4);\n+\n+void\n+transpose_char4 (gfc_array_char *ret,\n+\t\t GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t\t gfc_array_char *source, GFC_INTEGER_4 source_length)\n+{\n+  transpose_internal (ret, source, source_length * sizeof (gfc_char4_t));\n+}"}, {"sha": "86cef6725d298c75ba3bb8011316acbccc7a33b1", "filename": "libgfortran/intrinsics/unpack_generic.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fintrinsics%2Funpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fintrinsics%2Funpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Funpack_generic.c?ref=3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "patch": "@@ -335,6 +335,7 @@ unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n \t\t   GFC_DESCRIPTOR_SIZE (field));\n }\n \n+\n extern void unpack1_char (gfc_array_char *, GFC_INTEGER_4,\n \t\t\t  const gfc_array_char *, const gfc_array_l1 *,\n \t\t\t  const gfc_array_char *, GFC_INTEGER_4,\n@@ -351,6 +352,26 @@ unpack1_char (gfc_array_char *ret,\n   unpack_internal (ret, vector, mask, field, vector_length, field_length);\n }\n \n+\n+extern void unpack1_char4 (gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t   const gfc_array_char *, const gfc_array_l1 *,\n+\t\t\t   const gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t   GFC_INTEGER_4);\n+export_proto(unpack1_char4);\n+\n+void\n+unpack1_char4 (gfc_array_char *ret,\n+\t       GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t       const gfc_array_char *vector, const gfc_array_l1 *mask,\n+\t       const gfc_array_char *field, GFC_INTEGER_4 vector_length,\n+\t       GFC_INTEGER_4 field_length)\n+{\n+  unpack_internal (ret, vector, mask, field,\n+\t\t   vector_length * sizeof (gfc_char4_t),\n+\t\t   field_length * sizeof (gfc_char4_t));\n+}\n+\n+\n extern void unpack0 (gfc_array_char *, const gfc_array_char *,\n \t\t     const gfc_array_l1 *, char *);\n export_proto(unpack0);\n@@ -500,6 +521,7 @@ unpack0 (gfc_array_char *ret, const gfc_array_char *vector,\n   unpack_internal (ret, vector, mask, &tmp, GFC_DESCRIPTOR_SIZE (vector), 0);\n }\n \n+\n extern void unpack0_char (gfc_array_char *, GFC_INTEGER_4,\n \t\t\t  const gfc_array_char *, const gfc_array_l1 *,\n \t\t\t  char *, GFC_INTEGER_4, GFC_INTEGER_4);\n@@ -519,3 +541,25 @@ unpack0_char (gfc_array_char *ret,\n   tmp.data = field;\n   unpack_internal (ret, vector, mask, &tmp, vector_length, 0);\n }\n+\n+\n+extern void unpack0_char4 (gfc_array_char *, GFC_INTEGER_4,\n+\t\t\t   const gfc_array_char *, const gfc_array_l1 *,\n+\t\t\t   char *, GFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(unpack0_char4);\n+\n+void\n+unpack0_char4 (gfc_array_char *ret,\n+\t       GFC_INTEGER_4 ret_length __attribute__((unused)),\n+\t       const gfc_array_char *vector, const gfc_array_l1 *mask,\n+\t       char *field, GFC_INTEGER_4 vector_length,\n+\t       GFC_INTEGER_4 field_length __attribute__((unused)))\n+{\n+  gfc_array_char tmp;\n+\n+  memset (&tmp, 0, sizeof (tmp));\n+  tmp.dtype = 0;\n+  tmp.data = field;\n+  unpack_internal (ret, vector, mask, &tmp,\n+\t\t   vector_length * sizeof (gfc_char4_t), 0);\n+}"}, {"sha": "aa500bb6c8b392245b1970ac5b1f33e0d9dab79b", "filename": "libgfortran/runtime/convert_char.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fruntime%2Fconvert_char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fruntime%2Fconvert_char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fconvert_char.c?ref=3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "patch": "@@ -0,0 +1,74 @@\n+/* Runtime conversion of strings from one character kind to another.\n+   Copyright 2008 Free Software Foundation, Inc.\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"libgfortran.h\"\n+\n+#include <stdlib.h>\n+#include <string.h>\n+\n+\n+extern void convert_char1_to_char4 (gfc_char4_t **, gfc_charlen_type,\n+\t\t\t\t    const unsigned char *);\n+export_proto(convert_char1_to_char4);\n+\n+extern void convert_char4_to_char1 (unsigned char **, gfc_charlen_type,\n+\t\t\t\t    const gfc_char4_t *);\n+export_proto(convert_char4_to_char1);\n+\n+\n+void\n+convert_char1_to_char4 (gfc_char4_t **dst, gfc_charlen_type len,\n+\t\t\tconst unsigned char *src)\n+{\n+  gfc_charlen_type i, l;\n+\n+  l = len > 0 ? len : 0;\n+  *dst = get_mem ((l + 1) * sizeof (gfc_char4_t));\n+\n+  for (i = 0; i < l; i++)\n+    (*dst)[i] = src[i];\n+\n+  (*dst)[l] = '\\0';\n+}\n+\n+\n+void\n+convert_char4_to_char1 (unsigned char **dst, gfc_charlen_type len,\n+\t\t\tconst gfc_char4_t *src)\n+{\n+  gfc_charlen_type i, l;\n+\n+  l = len > 0 ? len : 0;\n+  *dst = get_mem ((l + 1) * sizeof (unsigned char));\n+\n+  for (i = 0; i < l; i++)\n+    (*dst)[i] = src[i];\n+\n+  (*dst)[l] = '\\0';\n+}"}, {"sha": "688acfc3852ecef2206069f4d9313146b7de8d4a", "filename": "libgfortran/runtime/select.c", "status": "modified", "additions": 23, "deletions": 108, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fruntime%2Fselect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fruntime%2Fselect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fselect.c?ref=3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "patch": "@@ -1,12 +1,12 @@\n /* Implement the SELECT statement for character variables.\n-   Contributed by Andy Vaught\n+   Copyright 2008 Free Software Foundation, Inc.\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n-Libgfortran is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n \n In addition to the permissions in the GNU General Public License, the\n Free Software Foundation gives you unlimited permission to link the\n@@ -22,116 +22,31 @@ but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n \n-You should have received a copy of the GNU General Public License\n-along with libgfortran; see the file COPYING.  If not, write to\n-the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n Boston, MA 02110-1301, USA.  */\n \n-#include \"libgfortran.h\"\n-\n-typedef struct\n-{\n-  char *low;\n-  int low_len;\n-  char *high;\n-  int high_len;\n-  int address;\n-}\n-select_struct;\n-\n-extern int select_string (select_struct *table, int table_len,\n-\t\t\t  const char *selector, int selector_len);\n-export_proto(select_string);\n-\n-\n-/* select_string()-- Given a selector string and a table of\n- * select_struct structures, return the address to jump to. */\n-\n-int\n-select_string (select_struct *table, int table_len, const char *selector,\n-\t       int selector_len)\n-{\n-  select_struct *t;\n-  int i, low, high, mid;\n-  int default_jump = -1;\n-\n-  if (table_len == 0)\n-    return -1;\n-\n-  /* Record the default address if present */\n-\n-  if (table->low == NULL && table->high == NULL)\n-    {\n-      default_jump = table->address;\n \n-      table++;\n-      table_len--;\n-      if (table_len == 0)\n-        return default_jump;\n-    }\n-\n-  /* Try the high and low bounds if present. */\n-\n-  if (table->low == NULL)\n-    {\n-      if (compare_string (table->high_len, table->high,\n-\t\t\t        selector_len, selector) >= 0)\n-        return table->address;\n-\n-      table++;\n-      table_len--;\n-      if (table_len == 0)\n-        return default_jump;\n-    }\n-\n-  t = table + table_len - 1;\n-\n-  if (t->high == NULL)\n-    {\n-      if (compare_string (t->low_len, t->low,\n-\t\t\t        selector_len, selector) <= 0)\n-        return t->address;\n-\n-      table_len--;\n-      if (table_len == 0)\n-        return default_jump;\n-    }\n-\n-  /* At this point, the only table entries are bounded entries.  Find\n-     the right entry with a binary chop. */\n-\n-  low = -1;\n-  high = table_len;\n+#include \"libgfortran.h\"\n \n-  while (low + 1 < high)\n-    {\n-      mid = (low + high) / 2;\n \n-      t = table + mid;\n-      i = compare_string (t->low_len, t->low, selector_len, selector);\n+/* The string selection function is defined using a few generic macros\n+   in select_inc.c, so we avoid code duplication between the various\n+   character type kinds.  */\n \n-      if (i == 0)\n-        return t->address;\n+#undef  CHARTYPE\n+#define CHARTYPE char\n+#undef  SUFFIX\n+#define SUFFIX(x) x\n \n-      if (i < 0)\n-        low = mid;\n-      else\n-        high = mid;\n-    }\n+#include \"select_inc.c\"\n \n-  /* The string now lies between the low indeces of the now-adjacent\n-     high and low entries.  Because it is less than the low entry of\n-     'high', it can't be that one.  If low is still -1, then no\n-     entries match.  Otherwise, we have to check the high entry of\n-     'low'. */\n \n-  if (low == -1)\n-    return default_jump;\n+#undef  CHARTYPE\n+#define CHARTYPE gfc_char4_t\n+#undef  SUFFIX\n+#define SUFFIX(x) x ## _char4\n \n-  t = table + low;\n-  if (compare_string (selector_len, selector,\n-\t\t\t    t->high_len, t->high) <= 0)\n-    return t->address;\n+#include \"select_inc.c\"\n \n-  return default_jump;\n-}"}, {"sha": "81a8dabf7399281cbe0c0cdc428a0ae20b40ada2", "filename": "libgfortran/runtime/select_inc.c", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fruntime%2Fselect_inc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3571925eb5e0d39f1a1cf3de64e3e9648329cb81/libgfortran%2Fruntime%2Fselect_inc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fselect_inc.c?ref=3571925eb5e0d39f1a1cf3de64e3e9648329cb81", "patch": "@@ -0,0 +1,139 @@\n+/* Implement the SELECT statement for character variables.\n+   Copyright 2008 Free Software Foundation, Inc.\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with libgfortran; see the file COPYING.  If not, write to\n+the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+\n+#define select_string SUFFIX(select_string)\n+#define select_struct SUFFIX(select_struct)\n+#define compare_string SUFFIX(compare_string)\n+\n+typedef struct\n+{\n+  CHARTYPE *low;\n+  gfc_charlen_type low_len;\n+  CHARTYPE *high;\n+  gfc_charlen_type high_len;\n+  int address;\n+}\n+select_struct;\n+\n+extern int select_string (select_struct *table, int table_len,\n+\t\t\t  const CHARTYPE *selector,\n+\t\t\t  gfc_charlen_type selector_len);\n+export_proto(select_string);\n+\n+\n+/* select_string()-- Given a selector string and a table of\n+ * select_struct structures, return the address to jump to. */\n+\n+int\n+select_string (select_struct *table, int table_len, const CHARTYPE *selector,\n+\t       gfc_charlen_type selector_len)\n+{\n+  select_struct *t;\n+  int i, low, high, mid;\n+  int default_jump = -1;\n+\n+  if (table_len == 0)\n+    return -1;\n+\n+  /* Record the default address if present */\n+\n+  if (table->low == NULL && table->high == NULL)\n+    {\n+      default_jump = table->address;\n+\n+      table++;\n+      table_len--;\n+      if (table_len == 0)\n+        return default_jump;\n+    }\n+\n+  /* Try the high and low bounds if present. */\n+\n+  if (table->low == NULL)\n+    {\n+      if (compare_string (table->high_len, table->high,\n+\t\t\t  selector_len, selector) >= 0)\n+        return table->address;\n+\n+      table++;\n+      table_len--;\n+      if (table_len == 0)\n+        return default_jump;\n+    }\n+\n+  t = table + table_len - 1;\n+\n+  if (t->high == NULL)\n+    {\n+      if (compare_string (t->low_len, t->low, selector_len, selector) <= 0)\n+        return t->address;\n+\n+      table_len--;\n+      if (table_len == 0)\n+        return default_jump;\n+    }\n+\n+  /* At this point, the only table entries are bounded entries.  Find\n+     the right entry with a binary chop. */\n+\n+  low = -1;\n+  high = table_len;\n+\n+  while (low + 1 < high)\n+    {\n+      mid = (low + high) / 2;\n+\n+      t = table + mid;\n+      i = compare_string (t->low_len, t->low, selector_len, selector);\n+\n+      if (i == 0)\n+        return t->address;\n+\n+      if (i < 0)\n+        low = mid;\n+      else\n+        high = mid;\n+    }\n+\n+  /* The string now lies between the low indeces of the now-adjacent\n+     high and low entries.  Because it is less than the low entry of\n+     'high', it can't be that one.  If low is still -1, then no\n+     entries match.  Otherwise, we have to check the high entry of\n+     'low'. */\n+\n+  if (low == -1)\n+    return default_jump;\n+\n+  t = table + low;\n+  if (compare_string (selector_len, selector, t->high_len, t->high) <= 0)\n+    return t->address;\n+\n+  return default_jump;\n+}"}]}