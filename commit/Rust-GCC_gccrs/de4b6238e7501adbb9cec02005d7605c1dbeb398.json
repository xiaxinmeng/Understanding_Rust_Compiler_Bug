{"sha": "de4b6238e7501adbb9cec02005d7605c1dbeb398", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU0YjYyMzhlNzUwMWFkYmI5Y2VjMDIwMDVkNzYwNWMxZGJlYjM5OA==", "commit": {"author": {"name": "Sujoy Saraswati", "email": "sujoy.saraswati@hpe.com", "date": "2015-12-21T07:59:30Z"}, "committer": {"name": "Sujoy Saraswati", "email": "ssaraswati@gcc.gnu.org", "date": "2015-12-21T07:59:30Z"}, "message": "This series of patches fix PR61441.\n\nThis series of patches fix PR61441. This patch makes resulting NaN values\nto be quiet NaN for real value operations, irrespective of the flag_signaling_nans\nflag. The caller has the responsibility to avoid the operation if flag_signaling_nans\nis on.\n\ngcc/\n\t* real.c (do_add): Make resulting NaN value to be qNaN.\n\t(do_multiply, do_divide, do_fix_trunc): Same.\n\t(real_arithmetic, real_ldexp, real_convert): Same.\n\t(real_isinteger): Updated comment stating it returns false for sNaN.\n\nFrom-SVN: r231872", "tree": {"sha": "2ae5b93663443cbd3ea9fa77209ebb5f59d51e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ae5b93663443cbd3ea9fa77209ebb5f59d51e99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de4b6238e7501adbb9cec02005d7605c1dbeb398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4b6238e7501adbb9cec02005d7605c1dbeb398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de4b6238e7501adbb9cec02005d7605c1dbeb398", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4b6238e7501adbb9cec02005d7605c1dbeb398/comments", "author": null, "committer": null, "parents": [{"sha": "091534a9f44229b2643d84a0bfe0f07e678a3772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091534a9f44229b2643d84a0bfe0f07e678a3772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/091534a9f44229b2643d84a0bfe0f07e678a3772"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "44da7a6d38bda33bb1d5003b287566bfb4777824", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4b6238e7501adbb9cec02005d7605c1dbeb398/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4b6238e7501adbb9cec02005d7605c1dbeb398/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de4b6238e7501adbb9cec02005d7605c1dbeb398", "patch": "@@ -1,3 +1,11 @@\n+2015-12-21  Sujoy Saraswati  <sujoy.saraswati@hpe.com>\n+\n+\tPR tree-optimization/61441\n+\t* real.c (do_add): Make resulting NaN value to be qNaN.\n+\t(do_multiply, do_divide, do_fix_trunc): Same.\n+\t(real_arithmetic, real_ldexp, real_convert): Same.\n+\t(real_isinteger): Updated comment stating it returns false for sNaN.\n+\n 2015-12-20  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/64910"}, {"sha": "8c9aefe0698584d041d46f82fa9c929bcf82e8e9", "filename": "gcc/real.c", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4b6238e7501adbb9cec02005d7605c1dbeb398/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4b6238e7501adbb9cec02005d7605c1dbeb398/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=de4b6238e7501adbb9cec02005d7605c1dbeb398", "patch": "@@ -541,6 +541,10 @@ do_add (REAL_VALUE_TYPE *r, const REAL_VALUE_TYPE *a,\n     case CLASS2 (rvc_normal, rvc_inf):\n       /* R + Inf = Inf.  */\n       *r = *b;\n+      /* Make resulting NaN value to be qNaN. The caller has the\n+         responsibility to avoid the operation if flag_signaling_nans\n+         is on.  */\n+      r->signalling = 0;\n       r->sign = sign ^ subtract_p;\n       return false;\n \n@@ -554,6 +558,10 @@ do_add (REAL_VALUE_TYPE *r, const REAL_VALUE_TYPE *a,\n     case CLASS2 (rvc_inf, rvc_normal):\n       /* Inf + R = Inf.  */\n       *r = *a;\n+      /* Make resulting NaN value to be qNaN. The caller has the\n+         responsibility to avoid the operation if flag_signaling_nans\n+         is on.  */\n+      r->signalling = 0;\n       return false;\n \n     case CLASS2 (rvc_inf, rvc_inf):\n@@ -676,6 +684,10 @@ do_multiply (REAL_VALUE_TYPE *r, const REAL_VALUE_TYPE *a,\n     case CLASS2 (rvc_nan, rvc_nan):\n       /* ANY * NaN = NaN.  */\n       *r = *b;\n+      /* Make resulting NaN value to be qNaN. The caller has the\n+         responsibility to avoid the operation if flag_signaling_nans\n+         is on.  */\n+      r->signalling = 0;\n       r->sign = sign;\n       return false;\n \n@@ -684,6 +696,10 @@ do_multiply (REAL_VALUE_TYPE *r, const REAL_VALUE_TYPE *a,\n     case CLASS2 (rvc_nan, rvc_inf):\n       /* NaN * ANY = NaN.  */\n       *r = *a;\n+      /* Make resulting NaN value to be qNaN. The caller has the\n+         responsibility to avoid the operation if flag_signaling_nans\n+         is on.  */\n+      r->signalling = 0;\n       r->sign = sign;\n       return false;\n \n@@ -826,6 +842,10 @@ do_divide (REAL_VALUE_TYPE *r, const REAL_VALUE_TYPE *a,\n     case CLASS2 (rvc_nan, rvc_nan):\n       /* ANY / NaN = NaN.  */\n       *r = *b;\n+      /* Make resulting NaN value to be qNaN. The caller has the\n+         responsibility to avoid the operation if flag_signaling_nans\n+         is on.  */\n+      r->signalling = 0;\n       r->sign = sign;\n       return false;\n \n@@ -834,6 +854,10 @@ do_divide (REAL_VALUE_TYPE *r, const REAL_VALUE_TYPE *a,\n     case CLASS2 (rvc_nan, rvc_inf):\n       /* NaN / ANY = NaN.  */\n       *r = *a;\n+      /* Make resulting NaN value to be qNaN. The caller has the\n+         responsibility to avoid the operation if flag_signaling_nans\n+         is on.  */\n+      r->signalling = 0;\n       r->sign = sign;\n       return false;\n \n@@ -964,6 +988,10 @@ do_fix_trunc (REAL_VALUE_TYPE *r, const REAL_VALUE_TYPE *a)\n     case rvc_zero:\n     case rvc_inf:\n     case rvc_nan:\n+      /* Make resulting NaN value to be qNaN. The caller has the\n+         responsibility to avoid the operation if flag_signaling_nans\n+         is on.  */\n+      r->signalling = 0;\n       break;\n \n     case rvc_normal:\n@@ -1022,7 +1050,13 @@ real_arithmetic (REAL_VALUE_TYPE *r, int icode, const REAL_VALUE_TYPE *op0,\n \n     case MIN_EXPR:\n       if (op1->cl == rvc_nan)\n+      {\n \t*r = *op1;\n+\t/* Make resulting NaN value to be qNaN. The caller has the\n+\t   responsibility to avoid the operation if flag_signaling_nans\n+           is on.  */\n+\tr->signalling = 0;\n+      }\n       else if (do_compare (op0, op1, -1) < 0)\n \t*r = *op0;\n       else\n@@ -1031,7 +1065,13 @@ real_arithmetic (REAL_VALUE_TYPE *r, int icode, const REAL_VALUE_TYPE *op0,\n \n     case MAX_EXPR:\n       if (op1->cl == rvc_nan)\n+      {\n \t*r = *op1;\n+\t/* Make resulting NaN value to be qNaN. The caller has the\n+\t   responsibility to avoid the operation if flag_signaling_nans\n+           is on.  */\n+\tr->signalling = 0;\n+      }\n       else if (do_compare (op0, op1, 1) < 0)\n \t*r = *op1;\n       else\n@@ -1162,6 +1202,10 @@ real_ldexp (REAL_VALUE_TYPE *r, const REAL_VALUE_TYPE *op0, int exp)\n     case rvc_zero:\n     case rvc_inf:\n     case rvc_nan:\n+      /* Make resulting NaN value to be qNaN. The caller has the\n+         responsibility to avoid the operation if flag_signaling_nans\n+         is on.  */\n+      r->signalling = 0;\n       break;\n \n     case rvc_normal:\n@@ -2527,7 +2571,7 @@ real_nan (REAL_VALUE_TYPE *r, const char *str, int quiet,\n       /* Our MSB is always unset for NaNs.  */\n       r->sig[SIGSZ-1] &= ~SIG_MSB;\n \n-      /* Force quiet or signalling NaN.  */\n+      /* Force quiet or signaling NaN.  */\n       r->signalling = !quiet;\n     }\n \n@@ -2730,6 +2774,12 @@ real_convert (REAL_VALUE_TYPE *r, format_helper fmt,\n \n   round_for_format (fmt, r);\n \n+  /* Make resulting NaN value to be qNaN. The caller has the\n+     responsibility to avoid the operation if flag_signaling_nans\n+     is on.  */\n+  if (r->cl == rvc_nan)\n+    r->signalling = 0;\n+\n   /* round_for_format de-normalizes denormals.  Undo just that part.  */\n   if (r->cl == rvc_normal)\n     normalize (r);\n@@ -4943,7 +4993,8 @@ real_copysign (REAL_VALUE_TYPE *r, const REAL_VALUE_TYPE *x)\n   r->sign = x->sign;\n }\n \n-/* Check whether the real constant value given is an integer.  */\n+/* Check whether the real constant value given is an integer.\n+   Returns false for signaling NaN.  */\n \n bool\n real_isinteger (const REAL_VALUE_TYPE *c, format_helper fmt)"}]}