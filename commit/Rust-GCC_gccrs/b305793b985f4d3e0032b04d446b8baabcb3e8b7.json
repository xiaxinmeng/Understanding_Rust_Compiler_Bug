{"sha": "b305793b985f4d3e0032b04d446b8baabcb3e8b7", "node_id": "C_kwDOANBUbNoAKGIzMDU3OTNiOTg1ZjRkM2UwMDMyYjA0ZDQ0NmI4YmFhYmNiM2U4Yjc", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-10-28T17:39:40Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-11-09T02:34:55Z"}, "message": "c++: Tweaks for -Wredundant-move [PR107363]\n\nTwo things here:\n\n1) when we're pointing out that std::move on a constant object is\n   redundant, don't say \"in return statement\" when we aren't in a\n   return statement;\n2) suppress the warning when the std::move call was dependent, because\n   removing the std::move may not be correct for a different\n   instantiation of the original template.\n\n\tPR c++/107363\n\ngcc/cp/ChangeLog:\n\n\t* semantics.cc (finish_call_expr): Suppress OPT_Wpessimizing_move.\n\t* typeck.cc (maybe_warn_pessimizing_move): Check warn_redundant_move\n\tand warning_suppressed_p.  Adjust a message depending on return_p.\n\t(check_return_expr): Don't suppress OPT_Wpessimizing_move here.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/Wredundant-move13.C: New test.", "tree": {"sha": "79711c34a349bd96e8a20274d774894bfbcd3d81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79711c34a349bd96e8a20274d774894bfbcd3d81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b305793b985f4d3e0032b04d446b8baabcb3e8b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b305793b985f4d3e0032b04d446b8baabcb3e8b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b305793b985f4d3e0032b04d446b8baabcb3e8b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b305793b985f4d3e0032b04d446b8baabcb3e8b7/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "916bec9a05ea522c81381e0c93590d46965d9c7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/916bec9a05ea522c81381e0c93590d46965d9c7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/916bec9a05ea522c81381e0c93590d46965d9c7b"}], "stats": {"total": 81, "additions": 73, "deletions": 8}, "files": [{"sha": "3c37d75bee6a3602654227dbfeec70aadfe0765b", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b305793b985f4d3e0032b04d446b8baabcb3e8b7/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b305793b985f4d3e0032b04d446b8baabcb3e8b7/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=b305793b985f4d3e0032b04d446b8baabcb3e8b7", "patch": "@@ -2737,6 +2737,10 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n \t  result = build_min_nt_call_vec (orig_fn, *args);\n \t  SET_EXPR_LOCATION (result, cp_expr_loc_or_input_loc (fn));\n \t  KOENIG_LOOKUP_P (result) = koenig_p;\n+\t  /* Disable the std::move warnings since this call was dependent\n+\t     (c++/89780, c++/107363).  This also suppresses the\n+\t     -Wredundant-move warning.  */\n+\t  suppress_warning (result, OPT_Wpessimizing_move);\n \t  if (is_overloaded_fn (fn))\n \t    fn = get_fns (fn);\n "}, {"sha": "5f5fb2a212bd6df4e3b08e5ba1f4ef72fcea33b6", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b305793b985f4d3e0032b04d446b8baabcb3e8b7/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b305793b985f4d3e0032b04d446b8baabcb3e8b7/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=b305793b985f4d3e0032b04d446b8baabcb3e8b7", "patch": "@@ -10885,7 +10885,9 @@ maybe_warn_pessimizing_move (tree expr, tree type, bool return_p)\n      and where the std::move does nothing if T does not have a T(const T&&)\n      constructor, because the argument is const.  It will not use T(T&&)\n      because that would mean losing the const.  */\n-  else if (TYPE_REF_P (TREE_TYPE (arg))\n+  else if (warn_redundant_move\n+\t   && !warning_suppressed_p (expr, OPT_Wredundant_move)\n+\t   && TYPE_REF_P (TREE_TYPE (arg))\n \t   && CP_TYPE_CONST_P (TREE_TYPE (TREE_TYPE (arg))))\n     {\n       tree rtype = TREE_TYPE (TREE_TYPE (arg));\n@@ -10901,8 +10903,11 @@ maybe_warn_pessimizing_move (tree expr, tree type, bool return_p)\n \t      return;\n \t  }\n       auto_diagnostic_group d;\n-      if (warning_at (loc, OPT_Wredundant_move,\n-\t\t      \"redundant move in return statement\"))\n+      if (return_p\n+\t  ? warning_at (loc, OPT_Wredundant_move,\n+\t\t\t\"redundant move in return statement\")\n+\t  : warning_at (loc, OPT_Wredundant_move,\n+\t\t\t\"redundant move in initialization\"))\n \tinform (loc, \"remove %<std::move%> call\");\n     }\n }\n@@ -11126,11 +11131,6 @@ check_return_expr (tree retval, bool *no_warning)\n       /* We don't know if this is an lvalue or rvalue use, but\n \t either way we can mark it as read.  */\n       mark_exp_read (retval);\n-      /* Disable our std::move warnings when we're returning\n-\t a dependent expression (c++/89780).  */\n-      if (retval && TREE_CODE (retval) == CALL_EXPR)\n-\t/* This also suppresses -Wredundant-move.  */\n-\tsuppress_warning (retval, OPT_Wpessimizing_move);\n       return retval;\n     }\n "}, {"sha": "80e7d80cd029a4fb4e01c6ff66dd289c760f9ccf", "filename": "gcc/testsuite/g++.dg/cpp0x/Wredundant-move13.C", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b305793b985f4d3e0032b04d446b8baabcb3e8b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b305793b985f4d3e0032b04d446b8baabcb3e8b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move13.C?ref=b305793b985f4d3e0032b04d446b8baabcb3e8b7", "patch": "@@ -0,0 +1,61 @@\n+// PR c++/107363\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wredundant-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+template <typename T, typename U>\n+struct Optional {\n+  U &value();\n+  T release_value() {\n+    T t = std::move (value ());\n+    return t;\n+  }\n+};\n+\n+struct Foo {};\n+void test(Optional<const Foo, const Foo> o) { o.release_value(); }\n+\n+struct F {\n+  F(const F&);\n+  F(F&&) = delete;\n+};\n+\n+struct Z {\n+  Z(const Z&) = delete;\n+  Z(Z&&) = delete;\n+  Z(const Z&&);\n+};\n+\n+const F& constfref();\n+const Z& constzref();\n+\n+void\n+g ()\n+{\n+  // Will call F::F(const F&) w/ and w/o std::move.  So it's redundant.\n+  F f = std::move (constfref()); // { dg-warning \"redundant move in initialization\" }\n+  (void) f;\n+  // Will call Z::Z(const Z&&) w/ std::move, and Z::Z(const Z&) w/o.\n+  // So it's not redundant.\n+  Z z = std::move (constzref());\n+  (void) z;\n+}"}]}