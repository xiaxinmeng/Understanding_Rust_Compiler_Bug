{"sha": "b6b3661a2e308bc611b50930165661b130d50706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZiMzY2MWEyZTMwOGJjNjExYjUwOTMwMTY1NjYxYjEzMGQ1MDcwNg==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2015-11-24T18:46:07Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2015-11-24T18:46:07Z"}, "message": "rs6000.md (UNSPEC_XSRDPI): New unspec.\n\n2015-11-24  David Edelsohn  <dje.gcc@gmail.com>\n\t    Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.md (UNSPEC_XSRDPI): New unspec.\n\t(Fv2): New mode attribute to be used when ISA 2.06 instructions\n\tare used on SF/DF values.\n\t(abs<mode>2_fpr): Use <Fv2> instead of <Fv>.\n\t(nabs<mode>2_fpr): Likewise.\n\t(neg<mode>2_fpr): Likewise.\n\t(copysign<mode>3_fcpsgn): Likewise.\n\t(smax<mode>3_vsx): Likewise.\n\t(smin<mode>3_vsx): Likewise.\n\t(floatsi<mode>2_lfiwax): Likewise.\n\t(floatunssi<mode>2_lfiwz): Likewise.\n\t(fctiwz_<mode>): Likewise.\n\t(fctiwuz_<mode>): Likewise.\n\t(btrunc<mode>2): Likewise.\n\t(ceil<mode>2): Likewise.\n\t(floor<mode>2): Likewise.\n\t(xsrdpi<mode>): Add support for the lround function.\n\t(lround<mode>2): Likewise.\n\n\nCo-Authored-By: Michael Meissner <meissner@linux.vnet.ibm.com>\n\nFrom-SVN: r230829", "tree": {"sha": "fd2db6ffd9268ca7529ce5f177fcc6eb023cc9ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd2db6ffd9268ca7529ce5f177fcc6eb023cc9ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6b3661a2e308bc611b50930165661b130d50706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b3661a2e308bc611b50930165661b130d50706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6b3661a2e308bc611b50930165661b130d50706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b3661a2e308bc611b50930165661b130d50706/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ade0d6913012f0ff8ef31aee18005a5c7a11761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ade0d6913012f0ff8ef31aee18005a5c7a11761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ade0d6913012f0ff8ef31aee18005a5c7a11761"}], "stats": {"total": 128, "additions": 90, "deletions": 38}, "files": [{"sha": "2f990dbad8d950b3413fca2731f656615525a455", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b3661a2e308bc611b50930165661b130d50706/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b3661a2e308bc611b50930165661b130d50706/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6b3661a2e308bc611b50930165661b130d50706", "patch": "@@ -1,3 +1,25 @@\n+2015-11-24  David Edelsohn  <dje.gcc@gmail.com>\n+\t    Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.md (UNSPEC_XSRDPI): New unspec.\n+\t(Fv2): New mode attribute to be used when ISA 2.06 instructions\n+\tare used on SF/DF values.\n+\t(abs<mode>2_fpr): Use <Fv2> instead of <Fv>.\n+\t(nabs<mode>2_fpr): Likewise.\n+\t(neg<mode>2_fpr): Likewise.\n+\t(copysign<mode>3_fcpsgn): Likewise.\n+\t(smax<mode>3_vsx): Likewise.\n+\t(smin<mode>3_vsx): Likewise.\n+\t(floatsi<mode>2_lfiwax): Likewise.\n+\t(floatunssi<mode>2_lfiwz): Likewise.\n+\t(fctiwz_<mode>): Likewise.\n+\t(fctiwuz_<mode>): Likewise.\n+\t(btrunc<mode>2): Likewise.\n+\t(ceil<mode>2): Likewise.\n+\t(floor<mode>2): Likewise.\n+\t(xsrdpi<mode>): Add support for the lround function.\n+\t(lround<mode>2): Likewise.\n+\n 2015-11-24  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "9d3a5b29c3ff712d48cb8f5a09264bf53aa8d562", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 68, "deletions": 38, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b3661a2e308bc611b50930165661b130d50706/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b3661a2e308bc611b50930165661b130d50706/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=b6b3661a2e308bc611b50930165661b130d50706", "patch": "@@ -77,6 +77,7 @@\n    UNSPEC_FRIN\n    UNSPEC_FRIP\n    UNSPEC_FRIZ\n+   UNSPEC_XSRDPI\n    UNSPEC_LD_MPIC\t\t; load_macho_picbase\n    UNSPEC_RELD_MPIC\t\t; re-load_macho_picbase\n    UNSPEC_MPIC_CORRECT\t\t; macho_correct_pic\n@@ -491,8 +492,16 @@\n ; SF/DF constraint for arithmetic on traditional floating point registers\n (define_mode_attr Ff\t\t[(SF \"f\") (DF \"d\") (DI \"d\")])\n \n-; SF/DF constraint for arithmetic on VSX registers\n-(define_mode_attr Fv\t\t[(SF \"wy\") (DF \"ws\") (DI \"wi\")])\n+; SF/DF constraint for arithmetic on VSX registers using instructions added in\n+; ISA 2.06 (power7).  This includes instructions that normally target DF mode,\n+; but are used on SFmode, since internally SFmode values are kept in the DFmode\n+; format.\n+(define_mode_attr Fv\t\t[(SF \"ww\") (DF \"ws\") (DI \"wi\")])\n+\n+; SF/DF constraint for arithmetic on VSX registers.  This is intended to be\n+; used for DFmode instructions added in ISA 2.06 (power7) and SFmode\n+; instructions added in ISA 2.07 (power8)\n+(define_mode_attr Fv2\t\t[(SF \"wy\") (DF \"ws\") (DI \"wi\")])\n \n ; SF/DF constraint for arithmetic on altivec registers\n (define_mode_attr Fa\t\t[(SF \"wu\") (DF \"wv\")])\n@@ -4344,9 +4353,9 @@\n   \"\")\n \n (define_insn \"*add<mode>3_fpr\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv>\")\n-\t(plus:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"%<Ff>,<Fv>\")\n-\t\t   (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv>\")))]\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv2>\")\n+\t(plus:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"%<Ff>,<Fv2>\")\n+\t\t   (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv2>\")))]\n   \"TARGET_<MODE>_FPR\"\n   \"@\n    fadd<Ftrad> %0,%1,%2\n@@ -4362,9 +4371,9 @@\n   \"\")\n \n (define_insn \"*sub<mode>3_fpr\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv>\")\n-\t(minus:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv>\")\n-\t\t    (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv>\")))]\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv2>\")\n+\t(minus:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv2>\")\n+\t\t    (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv2>\")))]\n   \"TARGET_<MODE>_FPR\"\n   \"@\n    fsub<Ftrad> %0,%1,%2\n@@ -4380,9 +4389,9 @@\n   \"\")\n \n (define_insn \"*mul<mode>3_fpr\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv>\")\n-\t(mult:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"%<Ff>,<Fv>\")\n-\t\t   (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv>\")))]\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv2>\")\n+\t(mult:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"%<Ff>,<Fv2>\")\n+\t\t   (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv2>\")))]\n   \"TARGET_<MODE>_FPR\"\n   \"@\n    fmul<Ftrad> %0,%1,%2\n@@ -4398,9 +4407,9 @@\n   \"\")\n \n (define_insn \"*div<mode>3_fpr\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv>\")\n-\t(div:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv>\")\n-\t\t  (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv>\")))]\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv2>\")\n+\t(div:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv2>\")\n+\t\t  (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv2>\")))]\n   \"TARGET_<MODE>_FPR && !TARGET_SIMPLE_FPU\"\n   \"@\n    fdiv<Ftrad> %0,%1,%2\n@@ -4409,8 +4418,8 @@\n    (set_attr \"fp_type\" \"fp_div_<Fs>\")])\n \n (define_insn \"sqrt<mode>2\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv>\")\n-\t(sqrt:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv>\")))]\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv2>\")\n+\t(sqrt:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv2>\")))]\n   \"TARGET_<MODE>_FPR && !TARGET_SIMPLE_FPU\n    && (TARGET_PPC_GPOPT || (<MODE>mode == SFmode && TARGET_XILINX_FPU))\"\n   \"@\n@@ -4421,8 +4430,8 @@\n \n ;; Floating point reciprocal approximation\n (define_insn \"fre<Fs>\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv>\")\n-\t(unspec:SFDF [(match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv>\")]\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv2>\")\n+\t(unspec:SFDF [(match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv2>\")]\n \t\t     UNSPEC_FRES))]\n   \"TARGET_<FFRE>\"\n   \"@\n@@ -4431,8 +4440,8 @@\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"*rsqrt<mode>2\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv>\")\n-\t(unspec:SFDF [(match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv>\")]\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv2>\")\n+\t(unspec:SFDF [(match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv2>\")]\n \t\t     UNSPEC_RSQRT))]\n   \"RS6000_RECIP_HAVE_RSQRTE_P (<MODE>mode)\"\n   \"@\n@@ -4443,8 +4452,8 @@\n ;; Floating point comparisons\n (define_insn \"*cmp<mode>_fpr\"\n   [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y,y\")\n-\t(compare:CCFP (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv>\")\n-\t\t      (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv>\")))]\n+\t(compare:CCFP (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv2>\")\n+\t\t      (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv2>\")))]\n   \"TARGET_<MODE>_FPR\"\n   \"@\n    fcmpu %0,%1,%2\n@@ -5500,6 +5509,27 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_addsub_<Fs>\")])\n \n+(define_insn \"*xsrdpi<mode>2\"\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Fv>\")\n+\t(unspec:SFDF [(match_operand:SFDF 1 \"gpc_reg_operand\" \"<Fv>\")]\n+\t\t     UNSPEC_XSRDPI))]\n+  \"TARGET_<MODE>_FPR && TARGET_VSX\"\n+  \"xsrdpi %x0,%x1\"\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_type\" \"fp_addsub_<Fs>\")])\n+\n+(define_expand \"lround<mode>di2\"\n+  [(set (match_dup 2)\n+\t(unspec:SFDF [(match_operand:SFDF 1 \"gpc_reg_operand\" \"wa\")]\n+\t\t     UNSPEC_XSRDPI))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=d\")\n+\t(unspec:DI [(match_dup 2)]\n+\t\t   UNSPEC_FCTID))]\n+  \"TARGET_<MODE>_FPR && TARGET_VSX\"\n+{\n+  operands[2] = gen_reg_rtx (<MODE>mode);\n+})\n+\n ; An UNSPEC is used so we don't have to support SImode in FP registers.\n (define_insn \"stfiwx\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=Z\")\n@@ -12468,11 +12498,11 @@\n   \"\")\n \n (define_insn \"*fma<mode>4_fpr\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv>,<Fv>\")\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv2>,<Fv2>\")\n \t(fma:SFDF\n-\t  (match_operand:SFDF 1 \"gpc_reg_operand\" \"%<Ff>,<Fv>,<Fv>\")\n-\t  (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv>,0\")\n-\t  (match_operand:SFDF 3 \"gpc_reg_operand\" \"<Ff>,0,<Fv>\")))]\n+\t  (match_operand:SFDF 1 \"gpc_reg_operand\" \"%<Ff>,<Fv2>,<Fv2>\")\n+\t  (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv2>,0\")\n+\t  (match_operand:SFDF 3 \"gpc_reg_operand\" \"<Ff>,0,<Fv2>\")))]\n   \"TARGET_<MODE>_FPR\"\n   \"@\n    fmadd<Ftrad> %0,%1,%2,%3\n@@ -12492,11 +12522,11 @@\n   \"\")\n \n (define_insn \"*fms<mode>4_fpr\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv>,<Fv>\")\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv2>,<Fv2>\")\n \t(fma:SFDF\n-\t (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv>,<Fv>\")\n-\t (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv>,0\")\n-\t (neg:SFDF (match_operand:SFDF 3 \"gpc_reg_operand\" \"<Ff>,0,<Fv>\"))))]\n+\t (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv2>,<Fv2>\")\n+\t (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv2>,0\")\n+\t (neg:SFDF (match_operand:SFDF 3 \"gpc_reg_operand\" \"<Ff>,0,<Fv2>\"))))]\n   \"TARGET_<MODE>_FPR\"\n   \"@\n    fmsub<Ftrad> %0,%1,%2,%3\n@@ -12539,12 +12569,12 @@\n   \"\")\n \n (define_insn \"*nfma<mode>4_fpr\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv>,<Fv>\")\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv2>,<Fv2>\")\n \t(neg:SFDF\n \t (fma:SFDF\n-\t  (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv>,<Fv>\")\n-\t  (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv>,0\")\n-\t  (match_operand:SFDF 3 \"gpc_reg_operand\" \"<Ff>,0,<Fv>\"))))]\n+\t  (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv2>,<Fv2>\")\n+\t  (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv2>,0\")\n+\t  (match_operand:SFDF 3 \"gpc_reg_operand\" \"<Ff>,0,<Fv2>\"))))]\n   \"TARGET_<MODE>_FPR\"\n   \"@\n    fnmadd<Ftrad> %0,%1,%2,%3\n@@ -12565,13 +12595,13 @@\n   \"\")\n \n (define_insn \"*nfmssf4_fpr\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv>,<Fv>\")\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv2>,<Fv2>\")\n \t(neg:SFDF\n \t (fma:SFDF\n-\t  (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv>,<Fv>\")\n-\t  (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv>,0\")\n+\t  (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv2>,<Fv2>\")\n+\t  (match_operand:SFDF 2 \"gpc_reg_operand\" \"<Ff>,<Fv2>,0\")\n \t  (neg:SFDF\n-\t   (match_operand:SFDF 3 \"gpc_reg_operand\" \"<Ff>,0,<Fv>\")))))]\n+\t   (match_operand:SFDF 3 \"gpc_reg_operand\" \"<Ff>,0,<Fv2>\")))))]\n   \"TARGET_<MODE>_FPR\"\n   \"@\n    fnmsub<Ftrad> %0,%1,%2,%3"}]}