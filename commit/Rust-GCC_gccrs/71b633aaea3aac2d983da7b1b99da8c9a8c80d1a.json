{"sha": "71b633aaea3aac2d983da7b1b99da8c9a8c80d1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFiNjMzYWFlYTNhYWMyZDk4M2RhN2IxYjk5ZGE4YzlhOGM4MGQxYQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-26T21:32:16Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-27T02:05:43Z"}, "message": "analyzer: fix ICE with -Wanalyzer-null-dereference [PR 93950]\n\nPR analyzer/93950 reports an ICE when pruning the path of a\n-Wanalyzer-null-dereference diagnostic.\n\nThe root cause is a bug in the state-tracking code, in which the\nvariable of interest is tracked from the callee to a \"nullptr\" param\nat the caller, whereupon we have an INTEGER_CST \"variable\", and\nthe attempt to look up its lvalue fails.\n\nThis code could use a rewrite; in the meantime this patch extends\nthe bulletproofing from g:8525d1f5f57b11fe04a97674cc2fc2b7727621d0\nfor PR analyzer/93544 to all of the various places where var can\nbe updated, fixing the ICE.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93950\n\t* diagnostic-manager.cc\n\t(diagnostic_manager::prune_for_sm_diagnostic): Assert that var is\n\teither NULL or not a constant.  When updating var, bulletproof\n\tagainst constant values.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93950\n\t* g++.dg/analyzer/pr93950.C: New test.", "tree": {"sha": "e484d6136446da15527183412fc23ab35b0b8e03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e484d6136446da15527183412fc23ab35b0b8e03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71b633aaea3aac2d983da7b1b99da8c9a8c80d1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b633aaea3aac2d983da7b1b99da8c9a8c80d1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71b633aaea3aac2d983da7b1b99da8c9a8c80d1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b633aaea3aac2d983da7b1b99da8c9a8c80d1a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ba70d1b5ae8df6406a880b2d23e4710b393e8c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba70d1b5ae8df6406a880b2d23e4710b393e8c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ba70d1b5ae8df6406a880b2d23e4710b393e8c9"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "5fbaec389aa98bba4516788b945f1271ef4e9181", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b633aaea3aac2d983da7b1b99da8c9a8c80d1a/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b633aaea3aac2d983da7b1b99da8c9a8c80d1a/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=71b633aaea3aac2d983da7b1b99da8c9a8c80d1a", "patch": "@@ -1,3 +1,11 @@\n+2020-02-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93950\n+\t* diagnostic-manager.cc\n+\t(diagnostic_manager::prune_for_sm_diagnostic): Assert that var is\n+\teither NULL or not a constant.  When updating var, bulletproof\n+\tagainst constant values.\n+\n 2020-02-26  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93947"}, {"sha": "b8e5933437495b1bc050762609219962daf190ba", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b633aaea3aac2d983da7b1b99da8c9a8c80d1a/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b633aaea3aac2d983da7b1b99da8c9a8c80d1a/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=71b633aaea3aac2d983da7b1b99da8c9a8c80d1a", "patch": "@@ -1105,6 +1105,7 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t  else\n \t    log (\"considering event %i\", idx);\n \t}\n+      gcc_assert (var == NULL || !CONSTANT_CLASS_P (var));\n       switch (base_event->m_kind)\n \t{\n \tdefault:\n@@ -1164,6 +1165,11 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t    log (\"event %i: switching var of interest from %qE to %qE\",\n \t\t\t idx, var, state_change->m_origin);\n \t\t    var = state_change->m_origin;\n+\t\t    if (var && CONSTANT_CLASS_P (var))\n+\t\t      {\n+\t\t\tlog (\"new var is a constant; setting var to NULL\");\n+\t\t\tvar = NULL_TREE;\n+\t\t      }\n \t\t  }\n \t\tlog (\"event %i: switching state of interest from %qs to %qs\",\n \t\t     idx, sm->get_state_name (state_change->m_to),\n@@ -1260,6 +1266,11 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\tvar = caller_var;\n \t\tif (expr.param_p ())\n \t\t  event->record_critical_state (var, state);\n+\t\tif (var && CONSTANT_CLASS_P (var))\n+\t\t  {\n+\t\t    log (\"new var is a constant; setting var to NULL\");\n+\t\t    var = NULL_TREE;\n+\t\t  }\n \t      }\n \t  }\n \t  break;\n@@ -1285,6 +1296,11 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t\t    var = callee_var;\n \t\t    if (expr.return_value_p ())\n \t\t      event->record_critical_state (var, state);\n+\t\t    if (var && CONSTANT_CLASS_P (var))\n+\t\t      {\n+\t\t\tlog (\"new var is a constant; setting var to NULL\");\n+\t\t\tvar = NULL_TREE;\n+\t\t      }\n \t\t  }\n \t      }\n \t  }"}, {"sha": "d8a403e5139dd236f05c017d859eecdf9a0ede1b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b633aaea3aac2d983da7b1b99da8c9a8c80d1a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b633aaea3aac2d983da7b1b99da8c9a8c80d1a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71b633aaea3aac2d983da7b1b99da8c9a8c80d1a", "patch": "@@ -1,3 +1,8 @@\n+2020-02-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93950\n+\t* g++.dg/analyzer/pr93950.C: New test.\n+\n 2020-02-26  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93947"}, {"sha": "e2808173407be3ffcb51b92b312ca1320d3c38c8", "filename": "gcc/testsuite/g++.dg/analyzer/pr93950.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b633aaea3aac2d983da7b1b99da8c9a8c80d1a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr93950.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b633aaea3aac2d983da7b1b99da8c9a8c80d1a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr93950.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr93950.C?ref=71b633aaea3aac2d983da7b1b99da8c9a8c80d1a", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile { target c++11 } }\n+\n+struct d\n+{\n+  struct e\n+  {\n+    int f;\n+    int *g;\n+  };\n+  void h (e * i)\n+  {\n+    void *j = nullptr; // { dg-bogus \"NULL\" \"\" { xfail *-*-* } }\n+    // TODO(xfail): we report \"'i' is NULL\" above, which is the wrong location\n+    \n+    i->f = *i->g; // { dg-warning \"dereference of NULL 'i'\" }\n+  }\n+  virtual void c (int, int)\n+  {\n+    int *j = nullptr;\n+    h (nullptr);\n+  }\n+};\n+\n+void\n+foo ()\n+{\n+  d ();\n+}"}]}