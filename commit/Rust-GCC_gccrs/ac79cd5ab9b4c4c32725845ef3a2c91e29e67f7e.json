{"sha": "ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM3OWNkNWFiOWI0YzRjMzI3MjU4NDVlZjNhMmM5MWUyOWU2N2Y3ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-11-27T14:31:29Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-11-27T14:31:29Z"}, "message": "Makefile.in (c-lang.o): Depends on langhooks-def.h.\n\n\t* Makefile.in (c-lang.o): Depends on langhooks-def.h.\n\t(expr.o, varasm.o): Depends on langhooks.h.\n\t* c-common.c (c_safe_from_p): Always declare.\n\t(c_expand_expr): Refine when declared.\n\t* c-lang.c (c-common.h): Now include.\n\t(LANG_HOOKS_SAFE_FROM_P): Define new hook.\n\t(c_init): Don't set lang_safe_from_expr.\n\t* expr.c (langhooks.h): Now include.\n\t(lang_safe_from_p): No longer define.\n\t(safe_from_p): Use lang hook.\n\t(expand_expr): Set IGNORE if VOID_TYPE result of VIEW_CONVERT_EXPR too.\n\t(expand_expr, case VIEW_CONVERT_EXPR): Pass ro_modifier down.\n\t* expr.h (lang_expand_constant, lang_safe_from_p): Delete.\n\t* langhooks-def.h (lhd_return_tree, lhd_safe_from_p): New decls.\n\t(LANG_HOOKS_EXPAND_CONSTANT, LANG_HOOKS_SAFE_FROM_P): New hooks.\n\t* langhooks.c (lhd_return_tree, lhd_safe_from_p): New functions.\n\t* langhooks.h (struct lang_hooks): New fields expand_constant\n\tand safe_from_p.\n\t* output.h (output_constant): Size arg is HOST_WIDE_INT.\n\t* stmt.c (expand_decl_init): No longer need to expand constant\n\tfor CONST_DECL.\n\t* stor-layout.c (put_pending_size): Don't check for SAVE_EXPR.\n\t* toplev.c (lang_expand_constant): Delete var.\n\t* tree.c (save_expr): Don't put another SAVE_EXPR around simple\n\toperations on SAVE_EXPR.\n\t* varasm.c (langhooks.h): Now include.\n\t(compare_constant_1): Use lang_hooks, not lang_expand_constant.\n\t(record_constant_1, output_addressed_constants): Likewise.\n\t(initializer_constant_valid_p, output_constant): Likewise.\n\t(output_constant_def): Process no-defer of string constant.\n\t(output_addressed_constants, case ADDR_EXPR): Use handled_component_p.\n\t(output_constant): Strip more conversions.\n\tTrack our size and pad for the rest.\n\t(array_size_for_constructor): Remove code for non-byte STRING_CST.\n\t(output_constructor): SIZE now HOST_WIDE_INT.\n\t* cp/Make-lang.in (cp-lang.o): Depends on c-common.h.\n\t* cp/cp-lang.c (c-common.h): Include.\n\t(LANG_HOOKS_EXPAND_CONSTANT, LANG_HOOKS_SAFE_FROM_P): New hooks.\n\t* cp/decl.c (cxx_init_decl_processing): Don't set lang_safe_from_p.\n\t* cp/expr.c (init_cplus_expand): Don't set lang_expand_constant.\n\nFrom-SVN: r47376", "tree": {"sha": "df8e146fbd8a8ed512495c0e24ff0baaa409303d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df8e146fbd8a8ed512495c0e24ff0baaa409303d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/comments", "author": null, "committer": null, "parents": [{"sha": "188235dff14c855c929b8a52378deaf452637e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188235dff14c855c929b8a52378deaf452637e1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/188235dff14c855c929b8a52378deaf452637e1a"}], "stats": {"total": 359, "additions": 205, "deletions": 154}, "files": [{"sha": "e8a377c3108d428eb06350ce01ea90845a59e52f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -1,3 +1,41 @@\n+Tue Nov 27 08:21:47 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* Makefile.in (c-lang.o): Depends on langhooks-def.h.\n+\t(expr.o, varasm.o): Depends on langhooks.h.\n+\t* c-common.c (c_safe_from_p): Always declare.\n+\t(c_expand_expr): Refine when declared.\n+\t* c-lang.c (c-common.h): Now include.\n+\t(LANG_HOOKS_SAFE_FROM_P): Define new hook.\n+\t(c_init): Don't set lang_safe_from_expr.\n+\t* expr.c (langhooks.h): Now include.\n+\t(lang_safe_from_p): No longer define.\n+\t(safe_from_p): Use lang hook.\n+\t(expand_expr): Set IGNORE if VOID_TYPE result of VIEW_CONVERT_EXPR too.\n+\t(expand_expr, case VIEW_CONVERT_EXPR): Pass ro_modifier down.\n+\t* expr.h (lang_expand_constant, lang_safe_from_p): Delete.\n+\t* langhooks-def.h (lhd_return_tree, lhd_safe_from_p): New decls.\n+\t(LANG_HOOKS_EXPAND_CONSTANT, LANG_HOOKS_SAFE_FROM_P): New hooks.\n+\t* langhooks.c (lhd_return_tree, lhd_safe_from_p): New functions.\n+\t* langhooks.h (struct lang_hooks): New fields expand_constant\n+\tand safe_from_p.\n+\t* output.h (output_constant): Size arg is HOST_WIDE_INT.\n+\t* stmt.c (expand_decl_init): No longer need to expand constant\n+\tfor CONST_DECL.\n+\t* stor-layout.c (put_pending_size): Don't check for SAVE_EXPR.\n+\t* toplev.c (lang_expand_constant): Delete var.\n+\t* tree.c (save_expr): Don't put another SAVE_EXPR around simple\n+\toperations on SAVE_EXPR.\n+\t* varasm.c (langhooks.h): Now include.\n+\t(compare_constant_1): Use lang_hooks, not lang_expand_constant.\n+\t(record_constant_1, output_addressed_constants): Likewise.\n+\t(initializer_constant_valid_p, output_constant): Likewise.\n+\t(output_constant_def): Process no-defer of string constant.\n+\t(output_addressed_constants, case ADDR_EXPR): Use handled_component_p.\n+\t(output_constant): Strip more conversions.\n+\tTrack our size and pad for the rest.\n+\t(array_size_for_constructor): Remove code for non-byte STRING_CST.\n+\t(output_constructor): SIZE now HOST_WIDE_INT.\n+\n 2001-11-27  Richard Henderson  <rth@redhat.com>\n \n \t* ifcvt.c (noce_try_store_flag_constants): Test for overflow"}, {"sha": "80b7f108b0b7f30ced6398d42403f98b36794fcc", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -1173,7 +1173,7 @@ c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n     $(GGC_H) c-lex.h toplev.h diagnostic.h output.h function.h $(VARRAY_H) \\\n     $(RTL_H) $(EXPR_H) tree-inline.h insn-config.h integrate.h langhooks.h \\\n-    langhooks-def.h\n+    langhooks-def.h c-common.h\n c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) c-lex.h \\\n     debug.h $(C_TREE_H) \\\n     c-pragma.h input.h intl.h flags.h toplev.h output.h \\\n@@ -1394,7 +1394,7 @@ errors.o : errors.c $(GCONFIG_H) $(SYSTEM_H) errors.h\n varasm.o : varasm.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\\n    function.h $(EXPR_H) hard-reg-set.h $(REGS_H) $(OBSTACK_H) \\\n    output.h c-pragma.h toplev.h xcoffout.h debug.h $(GGC_H) $(TM_P_H) \\\n-   $(HASHTAB_H) $(TARGET_H)\n+   $(HASHTAB_H) $(TARGET_H) langhooks.h\n function.o : function.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    function.h $(EXPR_H) libfuncs.h $(REGS_H) hard-reg-set.h \\\n    insn-config.h $(RECOG_H) output.h toplev.h except.h hash.h $(GGC_H) $(TM_P_H)\n@@ -1408,7 +1408,7 @@ except.o : except.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n expr.o : expr.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h function.h \\\n    $(REGS_H) $(EXPR_H) $(OPTABS_H) libfuncs.h insn-attr.h insn-config.h \\\n    $(RECOG_H) output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h \\\n-   except.h reload.h $(GGC_H) intl.h $(TM_P_H)\n+   except.h reload.h $(GGC_H) langhooks.h intl.h $(TM_P_H)\n builtins.o : builtins.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    $(TARGET_H) function.h $(REGS_H) $(EXPR_H) $(OPTABS_H) insn-config.h \\\n    $(RECOG_H) output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h \\"}, {"sha": "1d87cf45cbb7494177f2163f3ecad96812ae4ad2", "filename": "gcc/c-common.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -802,14 +802,14 @@ extern tree lookup_label\t\t\tPARAMS ((tree));\n    in C.  */\n extern void (*back_end_hook) PARAMS ((tree));\n \n-#ifdef RTX_CODE\n+/* enum expand_modified is in expr.h, as is the macro below.  */\n \n-extern struct rtx_def *c_expand_expr            PARAMS ((tree, rtx,\n-\t\t\t\t\t\t\t enum machine_mode,\n-\t\t\t\t\t\t\t enum expand_modifier));\n+#ifdef QUEUED_VAR\n+extern rtx c_expand_expr            PARAMS ((tree, rtx, enum machine_mode,\n+\t\t\t\t\t     enum expand_modifier));\n+#endif\n \n extern int c_safe_from_p                        PARAMS ((rtx, tree));\n-#endif\n \n extern int c_unsafe_for_reeval\t\t\tPARAMS ((tree));\n "}, {"sha": "0578cb24ef79f9b35162b8d829c32ed1c242d650", "filename": "gcc/c-lang.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -34,6 +34,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"rtl.h\"\n #include \"expr.h\"\n #include \"c-tree.h\"\n+#include \"c-common.h\"\n #include \"c-lex.h\"\n #include \"cpplib.h\"\n #include \"insn-config.h\"\n@@ -64,6 +65,8 @@ static int c_cannot_inline_tree_fn PARAMS ((tree *));\n #define LANG_HOOKS_POST_OPTIONS c_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET\n #define LANG_HOOKS_GET_ALIAS_SET c_common_get_alias_set\n+#undef LANG_HOOKS_SAFE_FROM_P\n+#define LANG_HOOKS_SAFE_FROM_P c_safe_from_p\n #undef LANG_HOOKS_PRINT_IDENTIFIER\n #define LANG_HOOKS_PRINT_IDENTIFIER c_print_identifier\n #undef LANG_HOOKS_SET_YYDEBUG\n@@ -121,7 +124,6 @@ c_init (filename)\n   restore_lang_status = &pop_c_function_context;\n   mark_lang_status = &mark_c_function_context;\n   lang_expand_expr = &c_expand_expr;\n-  lang_safe_from_p = &c_safe_from_p;\n   diagnostic_format_decoder (global_dc) = &c_tree_printer;\n   lang_expand_decl_stmt = &c_expand_decl_stmt;\n   lang_missing_noreturn_ok_p = &c_missing_noreturn_ok_p;"}, {"sha": "ea6353bea8702cced64c4d16f0cf87d2e9088892", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -1,3 +1,11 @@\n+Tue Nov 27 09:03:47 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* Make-lang.in (cp-lang.o): Depends on c-common.h.\n+\t* cp-lang.c (c-common.h): Include.\n+\t(LANG_HOOKS_EXPAND_CONSTANT, LANG_HOOKS_SAFE_FROM_P): New hooks.\n+\t* decl.c (cxx_init_decl_processing): Don't set lang_safe_from_p.\n+\t* expr.c (init_cplus_expand): Don't set lang_expand_constant.\n+\n 2001-11-26  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* decl2.c (c_language): Move to c-common.c."}, {"sha": "f9700ba8d5297ad83c007dcef13bb0884e70bd88", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -243,7 +243,8 @@ cp/spew.o: cp/spew.c $(CXX_TREE_H) cp/parse.h flags.h cp/lex.h toplev.h\n cp/lex.o: cp/lex.c $(CXX_TREE_H) cp/parse.h flags.h cp/lex.h c-pragma.h \\\n   toplev.h output.h mbchar.h $(GGC_H) input.h diagnostic.h cp/operators.def \\\n   $(TM_P_H)\n-cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) toplev.h langhooks.h langhooks-def.h\n+cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) toplev.h langhooks.h langhooks-def.h \\\n+  c-common.h\n cp/decl.o: cp/decl.c $(CXX_TREE_H) flags.h cp/lex.h cp/decl.h stack.h \\\n   output.h $(EXPR_H) except.h toplev.h hash.h $(GGC_H) $(RTL_H) \\\n   cp/operators.def $(TM_P_H) tree-inline.h"}, {"sha": "598c3fc5c7452ad6e882f87744b0874589cd2c2e", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -23,6 +23,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"tree.h\"\n #include \"cp-tree.h\"\n+#include \"c-common.h\"\n #include \"toplev.h\"\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n@@ -45,6 +46,10 @@ static HOST_WIDE_INT cxx_get_alias_set PARAMS ((tree));\n #define LANG_HOOKS_POST_OPTIONS cxx_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET\n #define LANG_HOOKS_GET_ALIAS_SET cxx_get_alias_set\n+#undef LANG_HOOKS_EXPAND_CONSTANT\n+#define LANG_HOOKS_EXPAND_CONSTANT cplus_expand_constant\n+#undef LANG_HOOKS_SAFE_FROM_P\n+#define LANG_HOOKS_SAFE_FROM_P c_safe_from_p\n #undef LANG_HOOKS_PRINT_STATISTICS\n #define LANG_HOOKS_PRINT_STATISTICS cxx_print_statistics\n #undef LANG_HOOKS_PRINT_XNODE"}, {"sha": "9f4d82d8bd630d4ed51c8c3a6ba092c1a1b86aa7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -6407,7 +6407,6 @@ cxx_init_decl_processing ()\n   init_lang_status = &push_cp_function_context;\n   free_lang_status = &pop_cp_function_context;\n   mark_lang_status = &mark_cp_function_context;\n-  lang_safe_from_p = &c_safe_from_p;\n   lang_missing_noreturn_ok_p = &cp_missing_noreturn_ok_p;\n \n   cp_parse_init ();"}, {"sha": "57099dcde3f22b9893f87cfba9772fb8983b6188", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -135,7 +135,6 @@ void\n init_cplus_expand ()\n {\n   lang_expand_expr = cplus_expand_expr;\n-  lang_expand_constant = cplus_expand_constant;\n }\n \n int"}, {"sha": "240fb8b60328d6f84622613ad51a4fb601c1bdf2", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -42,6 +42,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"typeclass.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n+#include \"langhooks.h\"\n #include \"intl.h\"\n #include \"tm_p.h\"\n \n@@ -72,15 +73,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define CASE_VECTOR_PC_RELATIVE 0\n #endif\n \n-/* Hook called by safe_from_p for language-specific tree codes.  It is\n-   up to the language front-end to install a hook if it has any such\n-   codes that safe_from_p needs to know about.  Since same_from_p will\n-   recursively explore the TREE_OPERANDs of an expression, this hook\n-   should not reexamine those pieces.  This routine may recursively\n-   call safe_from_p; it should always pass `0' as the TOP_P\n-   parameter.  */\n-int (*lang_safe_from_p) PARAMS ((rtx, tree));\n-\n /* If this is nonzero, we do not bother generating VOLATILE\n    around volatile memory references, and we are willing to\n    output indirect addresses.  If cse is to follow, we reject\n@@ -5854,8 +5846,7 @@ safe_from_p (x, exp, top_p)\n \t special handling.  */\n       if ((unsigned int) TREE_CODE (exp)\n \t  >= (unsigned int) LAST_AND_UNUSED_TREE_CODE\n-\t  && lang_safe_from_p\n-\t  && !(*lang_safe_from_p) (x, exp))\n+\t  && !(*lang_hooks.safe_from_p) (x, exp))\n \treturn 0;\n     }\n \n@@ -6148,7 +6139,7 @@ expand_expr (exp, target, tmode, modifier)\n   ignore = (target == const0_rtx\n \t    || ((code == NON_LVALUE_EXPR || code == NOP_EXPR\n \t\t || code == CONVERT_EXPR || code == REFERENCE_EXPR\n-\t\t || code == COND_EXPR)\n+\t\t || code == COND_EXPR || code == VIEW_CONVERT_EXPR)\n \t\t&& TREE_CODE (type) == VOID_TYPE));\n \n   /* Make a read-only version of the modifier.  */\n@@ -7536,7 +7527,7 @@ expand_expr (exp, target, tmode, modifier)\n       return target;\n \n     case VIEW_CONVERT_EXPR:\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, mode, 0);\n+      op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, mode, ro_modifier);\n \n       /* If the input and output modes are both the same, we are done.\n \t Otherwise, if neither mode is BLKmode and both are within a word, we"}, {"sha": "4275b8129533591445c34c48d3c082a4a9b5bdd0", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -775,25 +775,8 @@ extern rtx (*lang_expand_expr) PARAMS ((union tree_node *, rtx,\n \t\t\t\t\tenum machine_mode,\n \t\t\t\t\tenum expand_modifier modifier));\n \n-#ifdef TREE_CODE\n-/* Hook called by output_constant for language-specific tree codes.\n-   It is up to the language front-end to install a hook if it has any\n-   such codes that output_constant needs to know about.  Returns a\n-   language-independent constant equivalent to its input.  */\n-extern tree (*lang_expand_constant) PARAMS ((tree));\n-\n extern int safe_from_p PARAMS ((rtx, tree, int));\n \n-/* Hook called by safe_from_p for language-specific tree codes.  It is\n-   up to the language front-end to install a hook if it has any such\n-   codes that safe_from_p needs to know about.  Since same_from_p will\n-   recursively explore the TREE_OPERANDs of an expression, this hook\n-   should not reexamine those pieces.  This routine may recursively\n-   call safe_from_p; it should always pass `0' as the TOP_P\n-   parameter.  */\n-extern int (*lang_safe_from_p) PARAMS ((rtx, tree));\n-#endif\n-\n /* Call this once to initialize the contents of the optabs\n    appropriately for the current target machine.  */\n extern void init_optabs\t\t\t\tPARAMS ((void));"}, {"sha": "1ee631b1e759ba2ce08607d7678ab2a0f296853a", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -40,6 +40,8 @@ extern HOST_WIDE_INT hook_get_alias_set_0\tPARAMS ((tree));\n extern void lhd_do_nothing PARAMS ((void));\n extern int lhd_decode_option PARAMS ((int, char **));\n extern HOST_WIDE_INT lhd_get_alias_set PARAMS ((tree));\n+extern tree lhd_return_tree PARAMS ((tree));\n+extern int lhd_safe_from_p PARAMS ((rtx, tree));\n extern void lhd_clear_binding_stack PARAMS ((void));\n extern void lhd_print_tree_nothing PARAMS ((FILE *, tree, int));\n extern void lhd_set_yydebug PARAMS ((int));\n@@ -67,6 +69,8 @@ int lhd_tree_inlining_anon_aggr_type_p\t\tPARAMS ((tree));\n #define LANG_HOOKS_DECODE_OPTION\tlhd_decode_option\n #define LANG_HOOKS_POST_OPTIONS\t\tlhd_do_nothing\n #define LANG_HOOKS_GET_ALIAS_SET\tlhd_get_alias_set\n+#define LANG_HOOKS_EXPAND_CONSTANT\tlhd_return_tree\n+#define LANG_HOOKS_SAFE_FROM_P\t\tlhd_safe_from_p\n #define LANG_HOOKS_HONOR_READONLY\tfalse\n #define LANG_HOOKS_PRINT_STATISTICS\tlhd_do_nothing\n #define LANG_HOOKS_PRINT_XNODE\t\tlhd_print_tree_nothing\n@@ -126,6 +130,8 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_FINISH, \\\n   LANG_HOOKS_CLEAR_BINDING_STACK, \\\n   LANG_HOOKS_GET_ALIAS_SET, \\\n+  LANG_HOOKS_EXPAND_CONSTANT, \\\n+  LANG_HOOKS_SAFE_FROM_P, \\\n   LANG_HOOKS_HONOR_READONLY, \\\n   LANG_HOOKS_PRINT_STATISTICS, \\\n   LANG_HOOKS_PRINT_XNODE, \\"}, {"sha": "3054ee7130ce925513268883fdc9fe191dd7d39e", "filename": "gcc/langhooks.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -38,6 +38,15 @@ lhd_do_nothing ()\n {\n }\n \n+/* Do nothing (return the tree node passed).  */\n+\n+tree\n+lhd_return_tree (t)\n+     tree t;\n+{\n+  return t;\n+}\n+\n /* Do nothing; the default hook to decode an option.  */\n \n int\n@@ -58,6 +67,16 @@ lhd_print_tree_nothing (file, node, indent)\n {\n }\n \n+/* Called from safe_from_p.  */\n+\n+int\n+lhd_safe_from_p (x, exp)\n+     rtx x;\n+     tree exp;\n+{\n+  return 1;\n+}\n+\n /* Called when -dy is given on the command line.  */\n \n void"}, {"sha": "0519d21bbfe8b4a82bfa997af0ca99d8ba392639", "filename": "gcc/langhooks.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -109,6 +109,20 @@ struct lang_hooks\n      Returns -1 if the language does nothing special for it.  */\n   HOST_WIDE_INT (*get_alias_set) PARAMS ((tree));\n \n+  /* Called with an expression that is to be processed as a constant.\n+     Returns either the same expression or a language-independent\n+     constant equivalent to its input.  */\n+  tree (*expand_constant) PARAMS ((tree));\n+\n+  /* Hook called by safe_from_p for language-specific tree codes.  It is\n+     up to the language front-end to install a hook if it has any such\n+     codes that safe_from_p needs to know about.  Since same_from_p will\n+     recursively explore the TREE_OPERANDs of an expression, this hook\n+     should not reexamine those pieces.  This routine may recursively\n+     call safe_from_p; it should always pass `0' as the TOP_P\n+     parameter.  */\n+  int (*safe_from_p) PARAMS ((rtx, tree));\n+\n   /* Nonzero if TYPE_READONLY and TREE_READONLY should always be honored.  */\n   bool honor_readonly;\n "}, {"sha": "6d67032d51f46a6206e0401eb9c2137e8b1320fe", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -368,7 +368,8 @@ extern tree initializer_constant_valid_p\tPARAMS ((tree, tree));\n    with zeros if necessary.  SIZE must always be specified.\n \n    ALIGN is the alignment in bits that may be assumed for the data.  */\n-extern void output_constant\t\tPARAMS ((tree, int, unsigned));\n+extern void output_constant\t\tPARAMS ((tree, HOST_WIDE_INT,\n+\t\t\t\t\t\t unsigned int));\n #endif\n \n #ifdef RTX_CODE"}, {"sha": "2615df09a2431ddd0250390c96b5ec819290ee34", "filename": "gcc/stmt.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -4108,21 +4108,10 @@ expand_decl_init (decl)\n {\n   int was_used = TREE_USED (decl);\n \n-  /* If this is a CONST_DECL, we don't have to generate any code, but\n-     if DECL_INITIAL is a constant, call expand_expr to force TREE_CST_RTL\n-     to be set while in the obstack containing the constant.  If we don't\n-     do this, we can lose if we have functions nested three deep and the middle\n-     function makes a CONST_DECL whose DECL_INITIAL is a STRING_CST while\n-     the innermost function is the first to expand that STRING_CST.  */\n-  if (TREE_CODE (decl) == CONST_DECL)\n-    {\n-      if (DECL_INITIAL (decl) && TREE_CONSTANT (DECL_INITIAL (decl)))\n-\texpand_expr (DECL_INITIAL (decl), NULL_RTX, VOIDmode,\n-\t\t     EXPAND_INITIALIZER);\n-      return;\n-    }\n-\n-  if (TREE_STATIC (decl))\n+  /* If this is a CONST_DECL, we don't have to generate any code.  Likewise\n+     for static decls.  */\n+  if (TREE_CODE (decl) == CONST_DECL\n+      || TREE_STATIC (decl))\n     return;\n \n   /* Compute and store the initial value now.  */"}, {"sha": "e16045f1f5a1fab77b8171f796a47585a167d0ee", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -114,8 +114,7 @@ void\n put_pending_size (expr)\n      tree expr;\n {\n-  if (TREE_CODE (expr) == SAVE_EXPR)\n-    pending_sizes = tree_cons (NULL_TREE, expr, pending_sizes);\n+  pending_sizes = tree_cons (NULL_TREE, expr, pending_sizes);\n }\n \n /* Put a chain of objects into the pending sizes list, which must be\n@@ -140,7 +139,8 @@ variable_size (size)\n {\n   /* If the language-processor is to take responsibility for variable-sized\n      items (e.g., languages which have elaboration procedures like Ada),\n-     just return SIZE unchanged.  Likewise for self-referential sizes.  */\n+     just return SIZE unchanged.  Likewise for self-referential sizes and\n+     constant sizes.  */\n   if (TREE_CONSTANT (size)\n       || global_bindings_p () < 0 || contains_placeholder_p (size))\n     return size;"}, {"sha": "e0e8a963144add175e1df98a4af1ea1ea0b5e219", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -395,8 +395,6 @@ typedef rtx (*lang_expand_expr_t)\n \n lang_expand_expr_t lang_expand_expr = 0;\n \n-tree (*lang_expand_constant) PARAMS ((tree)) = 0;\n-\n /* Pointer to function to finish handling an incomplete decl at the\n    end of compilation.  */\n "}, {"sha": "b86a339fe5c58df07eb62bc497f7076cd0d47287", "filename": "gcc/tree.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -1549,20 +1549,33 @@ save_expr (expr)\n      tree expr;\n {\n   tree t = fold (expr);\n+  tree inner;\n \n   /* We don't care about whether this can be used as an lvalue in this\n      context.  */\n   while (TREE_CODE (t) == NON_LVALUE_EXPR)\n     t = TREE_OPERAND (t, 0);\n \n+\n+  /* If we have simple operations applied to a SAVE_EXPR or to a SAVE_EXPR and\n+     a constant, it will be more efficient to not make another SAVE_EXPR since\n+     it will allow better simplification and GCSE will be able to merge the\n+     computations if they actualy occur.  */\n+  for (inner = t;\n+       (TREE_CODE_CLASS (TREE_CODE (inner)) == '1'\n+\t|| (TREE_CODE_CLASS (TREE_CODE (inner)) == '2'\n+\t    && TREE_CONSTANT (TREE_OPERAND (inner, 1))));\n+       inner = TREE_OPERAND (inner, 0))\n+    ;\n+\n   /* If the tree evaluates to a constant, then we don't want to hide that\n      fact (i.e. this allows further folding, and direct checks for constants).\n      However, a read-only object that has side effects cannot be bypassed.\n      Since it is no problem to reevaluate literals, we just return the\n      literal node.  */\n-\n-  if (TREE_CONSTANT (t) || (TREE_READONLY (t) && ! TREE_SIDE_EFFECTS (t))\n-      || TREE_CODE (t) == SAVE_EXPR || TREE_CODE (t) == ERROR_MARK)\n+  if (TREE_CONSTANT (inner)\n+      || (TREE_READONLY (inner) && ! TREE_SIDE_EFFECTS (inner))\n+      || TREE_CODE (inner) == SAVE_EXPR || TREE_CODE (inner) == ERROR_MARK)\n     return t;\n \n   /* If T contains a PLACEHOLDER_EXPR, we must evaluate it each time, since"}, {"sha": "b7bd9c320e024d6db2de064a4d6249d9cc7f5ffc", "filename": "gcc/varasm.c", "status": "modified", "additions": 73, "deletions": 88, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=ac79cd5ab9b4c4c32725845ef3a2c91e29e67f7e", "patch": "@@ -43,6 +43,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"hashtab.h\"\n #include \"c-pragma.h\"\n #include \"ggc.h\"\n+#include \"langhooks.h\"\n #include \"tm_p.h\"\n #include \"debug.h\"\n #include \"target.h\"\n@@ -168,7 +169,8 @@ static int output_addressed_constants\tPARAMS ((tree));\n static void output_after_function_constants PARAMS ((void));\n static unsigned HOST_WIDE_INT array_size_for_constructor PARAMS ((tree));\n static unsigned min_align\t\tPARAMS ((unsigned, unsigned));\n-static void output_constructor\t\tPARAMS ((tree, int, unsigned));\n+static void output_constructor\t\tPARAMS ((tree, HOST_WIDE_INT,\n+\t\t\t\t\t\t unsigned int));\n #ifdef ASM_WEAKEN_LABEL\n static void remove_from_pending_weak_list\tPARAMS ((const char *));\n #endif\n@@ -2477,6 +2479,11 @@ struct constant_descriptor\n #define MAX_HASH_TABLE 1009\n static struct constant_descriptor *const_hash_table[MAX_HASH_TABLE];\n \n+/* We maintain a hash table of STRING_CST values.  Unless we are asked to force\n+   out a string constant, we defer output of the constants until we know\n+   they are actually used.  This will be if something takes its address or if\n+   there is a usage of the string in the RTL of a function.  */\n+\n #define STRHASH(x) ((hashval_t)((long)(x) >> 3))\n \n struct deferred_string\n@@ -2739,7 +2746,7 @@ compare_constant_1 (exp, p)\n       strp = (const unsigned char *)TREE_STRING_POINTER (exp);\n       len = TREE_STRING_LENGTH (exp);\n       if (memcmp ((char *) &TREE_STRING_LENGTH (exp), p,\n-\t\tsizeof TREE_STRING_LENGTH (exp)))\n+\t\t  sizeof TREE_STRING_LENGTH (exp)))\n \treturn 0;\n \n       p += sizeof TREE_STRING_LENGTH (exp);\n@@ -2899,12 +2906,14 @@ compare_constant_1 (exp, p)\n       return compare_constant_1 (TREE_OPERAND (exp, 0), p);\n \n     default:\n-      if (lang_expand_constant)\n-        {\n-          exp = (*lang_expand_constant) (exp);\n-          return compare_constant_1 (exp, p);\n-        }\n-      return 0;\n+      {\n+\ttree new = (*lang_hooks.expand_constant) (exp);\n+\n+\tif (new != exp)\n+          return compare_constant_1 (new, p);\n+\telse\n+\t  return 0;\n+      }\n     }\n \n   /* Compare constant contents.  */\n@@ -3111,12 +3120,13 @@ record_constant_1 (exp)\n       return;\n \n     default:\n-      if (lang_expand_constant)\n-        {\n-          exp = (*lang_expand_constant) (exp);\n+      {\n+\ttree new = (*lang_hooks.expand_constant) (exp);\n+\n+\tif (new != exp)\n           record_constant_1 (exp);\n-        }\n-      return;\n+\treturn;\n+      }\n     }\n \n   /* Record constant contents.  */\n@@ -3283,7 +3293,10 @@ output_constant_def (exp, defer)\n   int labelno = -1;\n   rtx rtl;\n \n-  if (TREE_CODE (exp) != INTEGER_CST && TREE_CST_RTL (exp))\n+  /* We can't just use the saved RTL if this is a defererred string constant\n+     and we are not to defer anymode.  */\n+  if (TREE_CODE (exp) != INTEGER_CST && TREE_CST_RTL (exp)\n+      && (defer || !STRING_POOL_ADDRESS_P (XEXP (TREE_CST_RTL (exp), 0))))\n     return TREE_CST_RTL (exp);\n \n   /* Make sure any other constants whose addresses appear in EXP\n@@ -4192,29 +4205,26 @@ output_addressed_constants (exp)\n      tree exp;\n {\n   int reloc = 0;\n+  tree tem;\n \n   /* Give the front-end a chance to convert VALUE to something that\n      looks more like a constant to the back-end.  */\n-  if (lang_expand_constant)\n-    exp = (*lang_expand_constant) (exp);\n+  exp = (*lang_hooks.expand_constant) (exp);\n \n   switch (TREE_CODE (exp))\n     {\n     case ADDR_EXPR:\n-      {\n-\ttree constant = TREE_OPERAND (exp, 0);\n+      /* Go inside any operations that get_inner_reference can handle and see\n+\t if what's inside is a constant: no need to do anything here for\n+\t addresses of variables or functions.  */\n+      for (tem = TREE_OPERAND (exp, 0); handled_component_p (tem);\n+\t   tem = TREE_OPERAND (tem, 0))\n+\t;\n \n-\twhile (TREE_CODE (constant) == COMPONENT_REF)\n-\t  {\n-\t    constant = TREE_OPERAND (constant, 0);\n-\t  }\n+      if (TREE_CODE_CLASS (TREE_CODE (tem)) == 'c'\n+\t    || TREE_CODE (tem) == CONSTRUCTOR)\n+\t  output_constant_def (tem, 0);\n \n-\tif (TREE_CODE_CLASS (TREE_CODE (constant)) == 'c'\n-\t    || TREE_CODE (constant) == CONSTRUCTOR)\n-\t  /* No need to do anything here\n-\t     for addresses of variables or functions.  */\n-\t  output_constant_def (constant, 0);\n-      }\n       reloc = 1;\n       break;\n \n@@ -4231,12 +4241,10 @@ output_addressed_constants (exp)\n       break;\n \n     case CONSTRUCTOR:\n-      {\n-\ttree link;\n-\tfor (link = CONSTRUCTOR_ELTS (exp); link; link = TREE_CHAIN (link))\n-\t  if (TREE_VALUE (link) != 0)\n-\t    reloc |= output_addressed_constants (TREE_VALUE (link));\n-      }\n+      for (tem = CONSTRUCTOR_ELTS (exp); tem; tem = TREE_CHAIN (tem))\n+\tif (TREE_VALUE (tem) != 0)\n+\t    reloc |= output_addressed_constants (TREE_VALUE (tem));\n+\n       break;\n \n     default:\n@@ -4262,8 +4270,7 @@ initializer_constant_valid_p (value, endtype)\n {\n   /* Give the front-end a chance to convert VALUE to something that\n      looks more like a constant to the back-end.  */\n-  if (lang_expand_constant)\n-    value = (*lang_expand_constant) (value);\n+  value = (*lang_hooks.expand_constant) (value);\n \n   switch (TREE_CODE (value))\n     {\n@@ -4438,37 +4445,29 @@ initializer_constant_valid_p (value, endtype)\n void\n output_constant (exp, size, align)\n      tree exp;\n-     int size;\n+     HOST_WIDE_INT size;\n      unsigned int align;\n {\n-  enum tree_code code = TREE_CODE (TREE_TYPE (exp));\n+  enum tree_code code;\n+  HOST_WIDE_INT thissize;\n \n   /* Some front-ends use constants other than the standard language-indepdent\n      varieties, but which may still be output directly.  Give the front-end a\n      chance to convert EXP to a language-independent representation.  */\n-  if (lang_expand_constant)\n-    {\n-      exp = (*lang_expand_constant) (exp);\n-      code = TREE_CODE (TREE_TYPE (exp));\n-    }\n+  exp = (*lang_hooks.expand_constant) (exp);\n \n   if (size == 0 || flag_syntax_only)\n     return;\n \n-  /* Eliminate the NON_LVALUE_EXPR_EXPR that makes a cast not be an lvalue.\n-     That way we get the constant (we hope) inside it.  Also, strip off any\n-     NOP_EXPR that converts between two record, union, array, or set types\n-     or a CONVERT_EXPR that converts to a union TYPE.  */\n-  while ((TREE_CODE (exp) == NOP_EXPR\n-\t  && (TREE_TYPE (exp) == TREE_TYPE (TREE_OPERAND (exp, 0))\n-\t      || AGGREGATE_TYPE_P (TREE_TYPE (exp))))\n-\t || (TREE_CODE (exp) == CONVERT_EXPR && code == UNION_TYPE)\n+  /* Eliminate any conversions since we'll be outputting the underlying\n+     constant.  */\n+  while (TREE_CODE (exp) == NOP_EXPR || TREE_CODE (exp) == CONVERT_EXPR\n \t || TREE_CODE (exp) == NON_LVALUE_EXPR\n \t || TREE_CODE (exp) == VIEW_CONVERT_EXPR)\n-    {\n-      exp = TREE_OPERAND (exp, 0);\n-      code = TREE_CODE (TREE_TYPE (exp));\n-    }\n+    exp = TREE_OPERAND (exp, 0);\n+\n+  code = TREE_CODE (TREE_TYPE (exp));\n+  thissize = int_size_in_bytes (TREE_TYPE (exp));\n \n   /* Allow a constructor with no elements for any data type.\n      This means to fill the space with zeros.  */\n@@ -4490,6 +4489,8 @@ output_constant (exp, size, align)\n       return;\n     }\n \n+  /* Now output the underlying data.  If we've handling the padding, return.\n+     Otherwise, break and ensure THISSIZE is the size written.  */\n   switch (code)\n     {\n     case CHAR_TYPE:\n@@ -4498,16 +4499,10 @@ output_constant (exp, size, align)\n     case ENUMERAL_TYPE:\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n-      /* ??? What about       (int)((float)(int)&foo + 4)    */\n-      while (TREE_CODE (exp) == NOP_EXPR || TREE_CODE (exp) == CONVERT_EXPR\n-\t     || TREE_CODE (exp) == NON_LVALUE_EXPR)\n-\texp = TREE_OPERAND (exp, 0);\n-\n       if (! assemble_integer (expand_expr (exp, NULL_RTX, VOIDmode,\n \t\t\t\t\t   EXPAND_INITIALIZER),\n \t\t\t      size, align, 0))\n \terror (\"initializer for integer value is too complicated\");\n-      size = 0;\n       break;\n \n     case REAL_TYPE:\n@@ -4517,14 +4512,12 @@ output_constant (exp, size, align)\n       assemble_real (TREE_REAL_CST (exp),\n \t\t     mode_for_size (size * BITS_PER_UNIT, MODE_FLOAT, 0),\n \t\t     align);\n-      size = 0;\n       break;\n \n     case COMPLEX_TYPE:\n-      output_constant (TREE_REALPART (exp), size / 2, align);\n-      output_constant (TREE_IMAGPART (exp), size / 2,\n-\t\t       min_align (align, BITS_PER_UNIT * (size / 2)));\n-      size -= (size / 2) * 2;\n+      output_constant (TREE_REALPART (exp), thissize / 2, align);\n+      output_constant (TREE_IMAGPART (exp), thissize / 2,\n+\t\t       min_align (align, BITS_PER_UNIT * (thissize / 2)));\n       break;\n \n     case ARRAY_TYPE:\n@@ -4535,16 +4528,8 @@ output_constant (exp, size, align)\n \t}\n       else if (TREE_CODE (exp) == STRING_CST)\n \t{\n-\t  int excess = 0;\n-\n-\t  if (size > TREE_STRING_LENGTH (exp))\n-\t    {\n-\t      excess = size - TREE_STRING_LENGTH (exp);\n-\t      size = TREE_STRING_LENGTH (exp);\n-\t    }\n-\n-\t  assemble_string (TREE_STRING_POINTER (exp), size);\n-\t  size = excess;\n+\t  thissize = MIN (TREE_STRING_LENGTH (exp), size);\n+\t  assemble_string (TREE_STRING_POINTER (exp), thissize);\n \t}\n       else\n \tabort ();\n@@ -4562,22 +4547,23 @@ output_constant (exp, size, align)\n       if (TREE_CODE (exp) == INTEGER_CST)\n \tassemble_integer (expand_expr (exp, NULL_RTX,\n \t\t\t\t       VOIDmode, EXPAND_INITIALIZER),\n-\t\t\t  size, align, 1);\n+\t\t\t thissize, align, 1);\n       else if (TREE_CODE (exp) == CONSTRUCTOR)\n \t{\n-\t  unsigned char *buffer = (unsigned char *) alloca (size);\n-\t  if (get_set_constructor_bytes (exp, buffer, size))\n+\t  unsigned char *buffer = (unsigned char *) alloca (thissize);\n+\t  if (get_set_constructor_bytes (exp, buffer, thissize))\n \t    abort ();\n-\t  assemble_string ((char *) buffer, size);\n+\t  assemble_string ((char *) buffer, thissize);\n \t}\n       else\n \terror (\"unknown set constructor type\");\n       return;\n \n     default:\n-      break; /* ??? */\n+      abort ();\n     }\n \n+  size -= thissize;\n   if (size > 0)\n     assemble_zeros (size);\n }\n@@ -4593,13 +4579,12 @@ array_size_for_constructor (val)\n {\n   tree max_index, i;\n \n+  /* This code used to attempt to handle string constants that are not\n+     arrays of single-bytes, but nothing else does, so there's no point in\n+     doing it here.  */\n   if (TREE_CODE (val) == STRING_CST)\n-    {\n-      HOST_WIDE_INT len = TREE_STRING_LENGTH(val);\n-      HOST_WIDE_INT esz = int_size_in_bytes (TREE_TYPE (TREE_TYPE (val)));\n-      HOST_WIDE_INT tsz = len * esz;\n-      return tsz;\n-    }\n+    return TREE_STRING_LENGTH (val);\n+\n   max_index = NULL_TREE;\n   for (i = CONSTRUCTOR_ELTS (val); i ; i = TREE_CHAIN (i))\n     {\n@@ -4632,7 +4617,7 @@ array_size_for_constructor (val)\n static void\n output_constructor (exp, size, align)\n      tree exp;\n-     int size;\n+     HOST_WIDE_INT size;\n      unsigned int align;\n {\n   tree type = TREE_TYPE (exp);"}]}