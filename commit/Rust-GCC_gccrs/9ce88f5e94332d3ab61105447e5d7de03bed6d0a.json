{"sha": "9ce88f5e94332d3ab61105447e5d7de03bed6d0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNlODhmNWU5NDMzMmQzYWI2MTEwNTQ0N2U1ZDdkZTAzYmVkNmQwYQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2004-08-02T10:29:26Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2004-08-02T10:29:26Z"}, "message": "rtl.h (union rtunion_def): Have all members start with the prefix \"rt_\".\n\n        * rtl.h (union rtunion_def): Have all members  start with the\n        prefix \"rt_\".\n        (XINT, XSTR, XEXP, XVEC, XMODE, XBITMAP, XTREE, XBBDEF, XTMPL,\n        X0INT, X0UINT, X0STR, X0EXP, X0VEC, X0MODE, X0BITMAP, X0TREE,\n        X0MEMATTR, X0BBDEF, X0REGATTR, XCINT, XCUINT, XCSTR, XCEXP,\n        XCVEC, XCMODE, XCBITMAP, XCTREE, XCBBDEF, XC2EXP): Adjust\n        members\n        access.\n        * gengtype.c (adjust_field_rtx_def): Likewise.\n        * rtlanal.c (loc_mentioned_in_p): Likewise.\n\nFrom-SVN: r85434", "tree": {"sha": "5b5b42547f04a02a29bd3f4b2f1af33600174959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b5b42547f04a02a29bd3f4b2f1af33600174959"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ce88f5e94332d3ab61105447e5d7de03bed6d0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce88f5e94332d3ab61105447e5d7de03bed6d0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ce88f5e94332d3ab61105447e5d7de03bed6d0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce88f5e94332d3ab61105447e5d7de03bed6d0a/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1cc95ce4c15c335589c5e0077c29c06c739e730", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1cc95ce4c15c335589c5e0077c29c06c739e730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1cc95ce4c15c335589c5e0077c29c06c739e730"}], "stats": {"total": 150, "additions": 81, "deletions": 69}, "files": [{"sha": "e7805e87fa9de1ed665422f4ff76133752bdf415", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce88f5e94332d3ab61105447e5d7de03bed6d0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce88f5e94332d3ab61105447e5d7de03bed6d0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ce88f5e94332d3ab61105447e5d7de03bed6d0a", "patch": "@@ -1,3 +1,15 @@\n+2004-08-02  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* rtl.h (union rtunion_def): Have all members  start with the\n+\tprefix \"rt_\".\n+\t(XINT, XSTR, XEXP, XVEC, XMODE, XBITMAP, XTREE, XBBDEF, XTMPL,\n+\tX0INT, X0UINT, X0STR, X0EXP, X0VEC, X0MODE, X0BITMAP, X0TREE, \n+\tX0MEMATTR, X0BBDEF, X0REGATTR, XCINT, XCUINT, XCSTR, XCEXP,\n+\tXCVEC, XCMODE, XCBITMAP, XCTREE, XCBBDEF, XC2EXP): Adjust members\n+\taccess. \n+\t* gengtype.c (adjust_field_rtx_def): Likewise.\n+\t* rtlanal.c (loc_mentioned_in_p): Likewise.\n+\n 2004-08-02  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config.gcc (mips*-*-elf*, mips*-*-rtems*): Add elfos.h to tm_file."}, {"sha": "1afe0c1ec71e06c05e0c2e225c8794373b5d85d1", "filename": "gcc/gengtype.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce88f5e94332d3ab61105447e5d7de03bed6d0a/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce88f5e94332d3ab61105447e5d7de03bed6d0a/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=9ce88f5e94332d3ab61105447e5d7de03bed6d0a", "patch": "@@ -449,24 +449,24 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t       number notes.  */\n \t  case NOTE_INSN_MAX:\n \t    note_flds->opt->name = \"default\";\n-\t    note_flds->name = \"rtstr\";\n+\t    note_flds->name = \"rt_str\";\n \t    note_flds->type = &string_type;\n \t    break;\n \n \t  case NOTE_INSN_BLOCK_BEG:\n \t  case NOTE_INSN_BLOCK_END:\n-\t    note_flds->name = \"rttree\";\n+\t    note_flds->name = \"rt_tree\";\n \t    note_flds->type = tree_tp;\n \t    break;\n \n \t  case NOTE_INSN_EXPECTED_VALUE:\n \t  case NOTE_INSN_VAR_LOCATION:\n-\t    note_flds->name = \"rtx\";\n+\t    note_flds->name = \"rt_rtx\";\n \t    note_flds->type = rtx_tp;\n \t    break;\n \n \t  default:\n-\t    note_flds->name = \"rtint\";\n+\t    note_flds->name = \"rt_int\";\n \t    note_flds->type = scalar_tp;\n \t    break;\n \t  }\n@@ -497,83 +497,83 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t    case 'n':\n \t    case 'w':\n \t      t = scalar_tp;\n-\t      subname = \"rtint\";\n+\t      subname = \"rt_int\";\n \t      break;\n \n \t    case '0':\n \t      if (i == MEM && aindex == 1)\n-\t\tt = mem_attrs_tp, subname = \"rtmem\";\n+\t\tt = mem_attrs_tp, subname = \"rt_mem\";\n \t      else if (i == JUMP_INSN && aindex == 9)\n-\t\tt = rtx_tp, subname = \"rtx\";\n+\t\tt = rtx_tp, subname = \"rt_rtx\";\n \t      else if (i == CODE_LABEL && aindex == 4)\n-\t\tt = scalar_tp, subname = \"rtint\";\n+\t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == CODE_LABEL && aindex == 5)\n-\t\tt = rtx_tp, subname = \"rtx\";\n+\t\tt = rtx_tp, subname = \"rt_rtx\";\n \t      else if (i == LABEL_REF\n \t\t       && (aindex == 1 || aindex == 2))\n-\t\tt = rtx_tp, subname = \"rtx\";\n+\t\tt = rtx_tp, subname = \"rt_rtx\";\n \t      else if (i == NOTE && aindex == 4)\n \t\tt = note_union_tp, subname = \"\";\n \t      else if (i == NOTE && aindex >= 7)\n-\t\tt = scalar_tp, subname = \"rtint\";\n+\t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == ADDR_DIFF_VEC && aindex == 4)\n-\t\tt = scalar_tp, subname = \"rtint\";\n+\t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == VALUE && aindex == 0)\n-\t\tt = scalar_tp, subname = \"rtint\";\n+\t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == REG && aindex == 1)\n-\t\tt = scalar_tp, subname = \"rtint\";\n+\t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == REG && aindex == 2)\n-\t\tt = reg_attrs_tp, subname = \"rtreg\";\n+\t\tt = reg_attrs_tp, subname = \"rt_reg\";\n \t      else if (i == SCRATCH && aindex == 0)\n-\t\tt = scalar_tp, subname = \"rtint\";\n+\t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == SYMBOL_REF && aindex == 1)\n-\t\tt = scalar_tp, subname = \"rtint\";\n+\t\tt = scalar_tp, subname = \"rt_int\";\n \t      else if (i == SYMBOL_REF && aindex == 2)\n-\t\tt = tree_tp, subname = \"rttree\";\n+\t\tt = tree_tp, subname = \"rt_tree\";\n \t      else if (i == BARRIER && aindex >= 3)\n-\t\tt = scalar_tp, subname = \"rtint\";\n+\t\tt = scalar_tp, subname = \"rt_int\";\n \t      else\n \t\t{\n \t\t  error_at_line (&lexer_line,\n \t\t\t\"rtx type `%s' has `0' in position %lu, can't handle\",\n \t\t\t\t rtx_name[i], (unsigned long) aindex);\n \t\t  t = &string_type;\n-\t\t  subname = \"rtint\";\n+\t\t  subname = \"rt_int\";\n \t\t}\n \t      break;\n \n \t    case 's':\n \t    case 'S':\n \t    case 'T':\n \t      t = &string_type;\n-\t      subname = \"rtstr\";\n+\t      subname = \"rt_str\";\n \t      break;\n \n \t    case 'e':\n \t    case 'u':\n \t      t = rtx_tp;\n-\t      subname = \"rtx\";\n+\t      subname = \"rt_rtx\";\n \t      break;\n \n \t    case 'E':\n \t    case 'V':\n \t      t = rtvec_tp;\n-\t      subname = \"rtvec\";\n+\t      subname = \"rt_rtvec\";\n \t      break;\n \n \t    case 't':\n \t      t = tree_tp;\n-\t      subname = \"rttree\";\n+\t      subname = \"rt_tree\";\n \t      break;\n \n \t    case 'b':\n \t      t = bitmap_tp;\n-\t      subname = \"rtbit\";\n+\t      subname = \"rt_bit\";\n \t      break;\n \n \t    case 'B':\n \t      t = basic_block_tp;\n-\t      subname = \"bb\";\n+\t      subname = \"rt_bb\";\n \t      break;\n \n \t    default:\n@@ -582,7 +582,7 @@ adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n \t\t\t     rtx_name[i], rtx_format[i][aindex],\n \t\t\t     (unsigned long)aindex);\n \t      t = &string_type;\n-\t      subname = \"rtint\";\n+\t      subname = \"rt_int\";\n \t      break;\n \t    }\n "}, {"sha": "f0ad10e73332fac2820346211620cac1ab1933ce", "filename": "gcc/rtl.h", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce88f5e94332d3ab61105447e5d7de03bed6d0a/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce88f5e94332d3ab61105447e5d7de03bed6d0a/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=9ce88f5e94332d3ab61105447e5d7de03bed6d0a", "patch": "@@ -161,19 +161,19 @@ typedef struct reg_attrs GTY(())\n \n union rtunion_def\n {\n-  int rtint;\n-  unsigned int rtuint;\n-  const char *rtstr;\n-  rtx rtx;\n-  rtvec rtvec;\n-  enum machine_mode rttype;\n+  int rt_int;\n+  unsigned int rt_uint;\n+  const char *rt_str;\n+  rtx rt_rtx;\n+  rtvec rt_rtvec;\n+  enum machine_mode rt_type;\n   addr_diff_vec_flags rt_addr_diff_vec_flags;\n   struct cselib_val_struct *rt_cselib;\n-  struct bitmap_head_def *rtbit;\n-  tree rttree;\n-  struct basic_block_def *bb;\n-  mem_attrs *rtmem;\n-  reg_attrs *rtreg;\n+  struct bitmap_head_def *rt_bit;\n+  tree rt_tree;\n+  struct basic_block_def *rt_bb;\n+  mem_attrs *rt_mem;\n+  reg_attrs *rt_reg;\n };\n typedef union rtunion_def rtunion;\n \n@@ -602,55 +602,55 @@ do {\t\t\t\t\\\n   _rtx->return_val = 0;\t\t\\\n } while (0)\n \n-#define XINT(RTX, N)\t(RTL_CHECK2 (RTX, N, 'i', 'n').rtint)\n-#define XSTR(RTX, N)\t(RTL_CHECK2 (RTX, N, 's', 'S').rtstr)\n-#define XEXP(RTX, N)\t(RTL_CHECK2 (RTX, N, 'e', 'u').rtx)\n-#define XVEC(RTX, N)\t(RTL_CHECK2 (RTX, N, 'E', 'V').rtvec)\n-#define XMODE(RTX, N)\t(RTL_CHECK1 (RTX, N, 'M').rttype)\n-#define XBITMAP(RTX, N) (RTL_CHECK1 (RTX, N, 'b').rtbit)\n-#define XTREE(RTX, N)   (RTL_CHECK1 (RTX, N, 't').rttree)\n-#define XBBDEF(RTX, N)\t(RTL_CHECK1 (RTX, N, 'B').bb)\n-#define XTMPL(RTX, N)\t(RTL_CHECK1 (RTX, N, 'T').rtstr)\n+#define XINT(RTX, N)\t(RTL_CHECK2 (RTX, N, 'i', 'n').rt_int)\n+#define XSTR(RTX, N)\t(RTL_CHECK2 (RTX, N, 's', 'S').rt_str)\n+#define XEXP(RTX, N)\t(RTL_CHECK2 (RTX, N, 'e', 'u').rt_rtx)\n+#define XVEC(RTX, N)\t(RTL_CHECK2 (RTX, N, 'E', 'V').rt_rtvec)\n+#define XMODE(RTX, N)\t(RTL_CHECK1 (RTX, N, 'M').rt_type)\n+#define XBITMAP(RTX, N) (RTL_CHECK1 (RTX, N, 'b').rt_bit)\n+#define XTREE(RTX, N)   (RTL_CHECK1 (RTX, N, 't').rt_tree)\n+#define XBBDEF(RTX, N)\t(RTL_CHECK1 (RTX, N, 'B').rt_bb)\n+#define XTMPL(RTX, N)\t(RTL_CHECK1 (RTX, N, 'T').rt_str)\n \n #define XVECEXP(RTX, N, M)\tRTVEC_ELT (XVEC (RTX, N), M)\n #define XVECLEN(RTX, N)\t\tGET_NUM_ELEM (XVEC (RTX, N))\n \n /* These are like XINT, etc. except that they expect a '0' field instead\n    of the normal type code.  */\n \n-#define X0INT(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rtint)\n-#define X0UINT(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rtuint)\n-#define X0STR(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rtstr)\n-#define X0EXP(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rtx)\n-#define X0VEC(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rtvec)\n-#define X0MODE(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rttype)\n-#define X0BITMAP(RTX, N)   (RTL_CHECK1 (RTX, N, '0').rtbit)\n-#define X0TREE(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rttree)\n-#define X0BBDEF(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').bb)\n+#define X0INT(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rt_int)\n+#define X0UINT(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rt_uint)\n+#define X0STR(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rt_str)\n+#define X0EXP(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rt_rtx)\n+#define X0VEC(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rt_rtvec)\n+#define X0MODE(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rt_type)\n+#define X0BITMAP(RTX, N)   (RTL_CHECK1 (RTX, N, '0').rt_bit)\n+#define X0TREE(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rt_tree)\n+#define X0BBDEF(RTX, N)\t   (RTL_CHECK1 (RTX, N, '0').rt_bb)\n #define X0ADVFLAGS(RTX, N) (RTL_CHECK1 (RTX, N, '0').rt_addr_diff_vec_flags)\n #define X0CSELIB(RTX, N)   (RTL_CHECK1 (RTX, N, '0').rt_cselib)\n-#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rtmem)\n-#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rtreg)\n+#define X0MEMATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, MEM).rt_mem)\n+#define X0REGATTR(RTX, N)  (RTL_CHECKC1 (RTX, N, REG).rt_reg)\n \n /* Access a '0' field with any type.  */\n #define X0ANY(RTX, N)\t   RTL_CHECK1 (RTX, N, '0')\n \n-#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rtint)\n-#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rtuint)\n-#define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rtstr)\n-#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rtx)\n-#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rtvec)\n-#define XCMODE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rttype)\n-#define XCBITMAP(RTX, N, C)   (RTL_CHECKC1 (RTX, N, C).rtbit)\n-#define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rttree)\n-#define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).bb)\n+#define XCINT(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_int)\n+#define XCUINT(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_uint)\n+#define XCSTR(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_str)\n+#define XCEXP(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtx)\n+#define XCVEC(RTX, N, C)      (RTL_CHECKC1 (RTX, N, C).rt_rtvec)\n+#define XCMODE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_type)\n+#define XCBITMAP(RTX, N, C)   (RTL_CHECKC1 (RTX, N, C).rt_bit)\n+#define XCTREE(RTX, N, C)     (RTL_CHECKC1 (RTX, N, C).rt_tree)\n+#define XCBBDEF(RTX, N, C)    (RTL_CHECKC1 (RTX, N, C).rt_bb)\n #define XCADVFLAGS(RTX, N, C) (RTL_CHECKC1 (RTX, N, C).rt_addr_diff_vec_flags)\n #define XCCSELIB(RTX, N, C)   (RTL_CHECKC1 (RTX, N, C).rt_cselib)\n \n #define XCVECEXP(RTX, N, M, C)\tRTVEC_ELT (XCVEC (RTX, N, C), M)\n #define XCVECLEN(RTX, N, C)\tGET_NUM_ELEM (XCVEC (RTX, N, C))\n \n-#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rtx)\n+#define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)\n \f\n /* ACCESS MACROS for particular fields of insns.  */\n "}, {"sha": "82eccf433b307914d7bc5626014ed8d6b5eb9f50", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ce88f5e94332d3ab61105447e5d7de03bed6d0a/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ce88f5e94332d3ab61105447e5d7de03bed6d0a/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=9ce88f5e94332d3ab61105447e5d7de03bed6d0a", "patch": "@@ -3155,7 +3155,7 @@ loc_mentioned_in_p (rtx *loc, rtx in)\n \n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n     {\n-      if (loc == &in->u.fld[i].rtx)\n+      if (loc == &in->u.fld[i].rt_rtx)\n \treturn 1;\n       if (fmt[i] == 'e')\n \t{"}]}