{"sha": "3eaec285927dd8a5ab5f92d90ba5ad45be1f08a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VhZWMyODU5MjdkZDhhNWFiNWY5MmQ5MGJhNWFkNDViZTFmMDhhNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-05-02T07:38:37Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-05-02T07:38:37Z"}, "message": "trans.c (Range_to_gnu): New static function.\n\n\t* gcc-interface/trans.c (Range_to_gnu): New static function.\n\t(Raise_Error_to_gnu) <N_In>: Call it to translate the range.\n\t(gnat_to_gnu) <N_In>: Likewise.\n\nFrom-SVN: r235699", "tree": {"sha": "81af4ecb89e58a6881b13eb74818fe3922c1ed2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81af4ecb89e58a6881b13eb74818fe3922c1ed2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eaec285927dd8a5ab5f92d90ba5ad45be1f08a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eaec285927dd8a5ab5f92d90ba5ad45be1f08a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eaec285927dd8a5ab5f92d90ba5ad45be1f08a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eaec285927dd8a5ab5f92d90ba5ad45be1f08a4/comments", "author": null, "committer": null, "parents": [{"sha": "40d848c7145f2dda3b8871362b1cd640adf158fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40d848c7145f2dda3b8871362b1cd640adf158fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40d848c7145f2dda3b8871362b1cd640adf158fe"}], "stats": {"total": 69, "additions": 42, "deletions": 27}, "files": [{"sha": "d512f0b7978a92d1c0ae414c168a09e00f2e7887", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eaec285927dd8a5ab5f92d90ba5ad45be1f08a4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eaec285927dd8a5ab5f92d90ba5ad45be1f08a4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3eaec285927dd8a5ab5f92d90ba5ad45be1f08a4", "patch": "@@ -1,3 +1,9 @@\n+2016-05-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Range_to_gnu): New static function.\n+\t(Raise_Error_to_gnu) <N_In>: Call it to translate the range.\n+\t(gnat_to_gnu) <N_In>: Likewise.\n+\n 2016-04-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/Make-lang.in (ACATSCMD): New variable."}, {"sha": "d20b46603eeaa251330665e2b3d014c9b531a6be", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eaec285927dd8a5ab5f92d90ba5ad45be1f08a4/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eaec285927dd8a5ab5f92d90ba5ad45be1f08a4/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=3eaec285927dd8a5ab5f92d90ba5ad45be1f08a4", "patch": "@@ -5439,6 +5439,38 @@ build_noreturn_cond (tree cond)\n   return build1 (NOP_EXPR, boolean_type_node, t);\n }\n \n+/* Subroutine of gnat_to_gnu to translate GNAT_RANGE, a node representing a\n+   range of values, into GNU_LOW and GNU_HIGH bounds.  */\n+\n+static void\n+Range_to_gnu (Node_Id gnat_range, tree *gnu_low, tree *gnu_high)\n+{\n+  /* GNAT_RANGE is either an N_Range or an identifier denoting a subtype.  */\n+  switch (Nkind (gnat_range))\n+    {\n+    case N_Range:\n+      *gnu_low = gnat_to_gnu (Low_Bound (gnat_range));\n+      *gnu_high = gnat_to_gnu (High_Bound (gnat_range));\n+      break;\n+\n+    case N_Expanded_Name:\n+    case N_Identifier:\n+      {\n+\ttree gnu_range_type = get_unpadded_type (Entity (gnat_range));\n+\ttree gnu_range_base_type = get_base_type (gnu_range_type);\n+\n+\t*gnu_low\n+\t  = convert (gnu_range_base_type, TYPE_MIN_VALUE (gnu_range_type));\n+\t*gnu_high\n+\t  = convert (gnu_range_base_type, TYPE_MAX_VALUE (gnu_range_type));\n+      }\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* Subroutine of gnat_to_gnu to translate GNAT_NODE, an N_Raise_xxx_Error,\n    to a GCC tree and return it.  GNU_RESULT_TYPE_P is a pointer to where\n    we should place the result type.  */\n@@ -5469,18 +5501,16 @@ Raise_Error_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n     case CE_Invalid_Data:\n       if (Present (gnat_cond) && Nkind (gnat_cond) == N_Op_Not)\n \t{\n-\t  Node_Id gnat_range, gnat_index, gnat_type;\n+\t  Node_Id gnat_index, gnat_type;\n \t  tree gnu_type, gnu_index, gnu_low_bound, gnu_high_bound, disp;\n \t  bool neg_p;\n \t  struct loop_info_d *loop;\n \n \t  switch (Nkind (Right_Opnd (gnat_cond)))\n \t    {\n \t    case N_In:\n-\t      gnat_range = Right_Opnd (Right_Opnd (gnat_cond));\n-\t      gcc_assert (Nkind (gnat_range) == N_Range);\n-\t      gnu_low_bound = gnat_to_gnu (Low_Bound (gnat_range));\n-\t      gnu_high_bound = gnat_to_gnu (High_Bound (gnat_range));\n+\t      Range_to_gnu (Right_Opnd (Right_Opnd (gnat_cond)),\n+\t\t\t    &gnu_low_bound, &gnu_high_bound);\n \t      break;\n \n \t    case N_Op_Ge:\n@@ -6458,30 +6488,9 @@ gnat_to_gnu (Node_Id gnat_node)\n     case N_Not_In:\n       {\n \ttree gnu_obj = gnat_to_gnu (Left_Opnd (gnat_node));\n-\tNode_Id gnat_range = Right_Opnd (gnat_node);\n \ttree gnu_low, gnu_high;\n \n-\t/* GNAT_RANGE is either an N_Range node or an identifier denoting a\n-\t   subtype.  */\n-\tif (Nkind (gnat_range) == N_Range)\n-\t  {\n-\t    gnu_low = gnat_to_gnu (Low_Bound (gnat_range));\n-\t    gnu_high = gnat_to_gnu (High_Bound (gnat_range));\n-\t  }\n-\telse if (Nkind (gnat_range) == N_Identifier\n-\t\t || Nkind (gnat_range) == N_Expanded_Name)\n-\t  {\n-\t    tree gnu_range_type = get_unpadded_type (Entity (gnat_range));\n-\t    tree gnu_range_base_type = get_base_type (gnu_range_type);\n-\n-\t    gnu_low\n-\t      = convert (gnu_range_base_type, TYPE_MIN_VALUE (gnu_range_type));\n-\t    gnu_high\n-\t      = convert (gnu_range_base_type, TYPE_MAX_VALUE (gnu_range_type));\n-\t  }\n-\telse\n-\t  gcc_unreachable ();\n-\n+\tRange_to_gnu (Right_Opnd (gnat_node), &gnu_low, &gnu_high);\n \tgnu_result_type = get_unpadded_type (Etype (gnat_node));\n \n \ttree gnu_op_type = maybe_character_type (TREE_TYPE (gnu_obj));"}]}