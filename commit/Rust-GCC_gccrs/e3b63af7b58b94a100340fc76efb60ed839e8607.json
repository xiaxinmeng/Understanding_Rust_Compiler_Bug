{"sha": "e3b63af7b58b94a100340fc76efb60ed839e8607", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNiNjNhZjdiNThiOTRhMTAwMzQwZmM3NmVmYjYwZWQ4MzllODYwNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-01T08:23:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-01T08:23:29Z"}, "message": "function.c (identify_blocks, [...]): Remove.\n\n        * function.c (identify_blocks, identify_blocks_1): Remove.\n        * function.h (identify_blocks): Remove.\n        * rtl.h (NOTE_INSN_BLOCK_BEG): Update comment.\n\nFrom-SVN: r83961", "tree": {"sha": "e8014b7a09c50ec3af65c876371601d6dcfb1c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8014b7a09c50ec3af65c876371601d6dcfb1c6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3b63af7b58b94a100340fc76efb60ed839e8607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b63af7b58b94a100340fc76efb60ed839e8607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b63af7b58b94a100340fc76efb60ed839e8607", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b63af7b58b94a100340fc76efb60ed839e8607/comments", "author": null, "committer": null, "parents": [{"sha": "64a9295a723890c67026c3ccc42005e305beca66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a9295a723890c67026c3ccc42005e305beca66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a9295a723890c67026c3ccc42005e305beca66"}], "stats": {"total": 99, "additions": 7, "deletions": 92}, "files": [{"sha": "ae10f5125c6e79a3d16aa97977d46d727b75fbcd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b63af7b58b94a100340fc76efb60ed839e8607/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b63af7b58b94a100340fc76efb60ed839e8607/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3b63af7b58b94a100340fc76efb60ed839e8607", "patch": "@@ -1,3 +1,9 @@\n+2004-07-01  Richard Henderson  <rth@redhat.com>\n+\n+\t* function.c (identify_blocks, identify_blocks_1): Remove.\n+\t* function.h (identify_blocks): Remove.\n+\t* rtl.h (NOTE_INSN_BLOCK_BEG): Update comment.\n+\n 2004-07-01  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* builtins.c (fold_builtin_classify): New."}, {"sha": "7cfb1aaae87a9efa1aee7e373e3c8683e4d424ce", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b63af7b58b94a100340fc76efb60ed839e8607/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b63af7b58b94a100340fc76efb60ed839e8607/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=e3b63af7b58b94a100340fc76efb60ed839e8607", "patch": "@@ -252,7 +252,6 @@ static rtx instantiate_new_reg (rtx, HOST_WIDE_INT *);\n static int instantiate_virtual_regs_1 (rtx *, rtx, int);\n static void pad_to_arg_alignment (struct args_size *, int, struct args_size *);\n static void pad_below (struct args_size *, enum machine_mode, tree);\n-static tree *identify_blocks_1 (rtx, tree *, tree *, tree *);\n static void reorder_blocks_1 (rtx, tree, varray_type *);\n static void reorder_fix_fragments (tree);\n static int all_blocks (tree, tree *);\n@@ -5823,93 +5822,6 @@ fix_lexical_addr (rtx addr, tree var)\n   return plus_constant (base, displacement);\n }\n \f\n-/* Put all this function's BLOCK nodes including those that are chained\n-   onto the first block into a vector, and return it.\n-   Also store in each NOTE for the beginning or end of a block\n-   the index of that block in the vector.\n-   The arguments are BLOCK, the chain of top-level blocks of the function,\n-   and INSNS, the insn chain of the function.  */\n-\n-void\n-identify_blocks (void)\n-{\n-  int n_blocks;\n-  tree *block_vector, *last_block_vector;\n-  tree *block_stack;\n-  tree block = DECL_INITIAL (current_function_decl);\n-\n-  if (block == 0)\n-    return;\n-\n-  /* Fill the BLOCK_VECTOR with all of the BLOCKs in this function, in\n-     depth-first order.  */\n-  block_vector = get_block_vector (block, &n_blocks);\n-  block_stack = xmalloc (n_blocks * sizeof (tree));\n-\n-  last_block_vector = identify_blocks_1 (get_insns (),\n-\t\t\t\t\t block_vector + 1,\n-\t\t\t\t\t block_vector + n_blocks,\n-\t\t\t\t\t block_stack);\n-\n-  /* If we didn't use all of the subblocks, we've misplaced block notes.  */\n-  /* ??? This appears to happen all the time.  Latent bugs elsewhere?  */\n-  if (0 && last_block_vector != block_vector + n_blocks)\n-    abort ();\n-\n-  free (block_vector);\n-  free (block_stack);\n-}\n-\n-/* Subroutine of identify_blocks.  Do the block substitution on the\n-   insn chain beginning with INSNS.\n-\n-   BLOCK_STACK is pushed and popped for each BLOCK_BEGIN/BLOCK_END pair.\n-   BLOCK_VECTOR is incremented for each block seen.  */\n-\n-static tree *\n-identify_blocks_1 (rtx insns, tree *block_vector, tree *end_block_vector,\n-\t\t   tree *orig_block_stack)\n-{\n-  rtx insn;\n-  tree *block_stack = orig_block_stack;\n-\n-  for (insn = insns; insn; insn = NEXT_INSN (insn))\n-    {\n-      if (GET_CODE (insn) == NOTE)\n-\t{\n-\t  if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_BEG)\n-\t    {\n-\t      tree b;\n-\n-\t      /* If there are more block notes than BLOCKs, something\n-\t\t is badly wrong.  */\n-\t      if (block_vector == end_block_vector)\n-\t\tabort ();\n-\n-\t      b = *block_vector++;\n-\t      NOTE_BLOCK (insn) = b;\n-\t      *block_stack++ = b;\n-\t    }\n-\t  else if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_END)\n-\t    {\n-\t      /* If there are more NOTE_INSN_BLOCK_ENDs than\n-\t\t NOTE_INSN_BLOCK_BEGs, something is badly wrong.  */\n-\t      if (block_stack == orig_block_stack)\n-\t\tabort ();\n-\n-\t      NOTE_BLOCK (insn) = *--block_stack;\n-\t    }\n-\t}\n-    }\n-\n-  /* If there are more NOTE_INSN_BLOCK_BEGINs than NOTE_INSN_BLOCK_ENDs,\n-     something is badly wrong.  */\n-  if (block_stack != orig_block_stack)\n-    abort ();\n-\n-  return block_vector;\n-}\n-\n /* Identify BLOCKs referenced by more than one NOTE_INSN_BLOCK_{BEG,END},\n    and create duplicate blocks.  */\n /* ??? Need an option to either create block fragments or to create"}, {"sha": "ca15492bd861f0c304a281bca53cc1d40933ca15", "filename": "gcc/function.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b63af7b58b94a100340fc76efb60ed839e8607/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b63af7b58b94a100340fc76efb60ed839e8607/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=e3b63af7b58b94a100340fc76efb60ed839e8607", "patch": "@@ -546,9 +546,6 @@ extern int trampolines_created;\n    return the `struct function' for it.  */\n struct function *find_function_data (tree);\n \n-/* Set NOTE_BLOCK for each block note in the current function.  */\n-extern void identify_blocks (void);\n-\n /* Identify BLOCKs referenced by more than one NOTE_INSN_BLOCK_{BEG,END},\n    and create duplicate blocks.  */\n extern void reorder_blocks (void);"}, {"sha": "53db375e26bd5c1f9c540b332cf23924df6ad54a", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b63af7b58b94a100340fc76efb60ed839e8607/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b63af7b58b94a100340fc76efb60ed839e8607/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=e3b63af7b58b94a100340fc76efb60ed839e8607", "patch": "@@ -981,7 +981,7 @@ enum insn_note\n   NOTE_INSN_DELETED,\n \n   /* These are used to mark the beginning and end of a lexical block.\n-     See NOTE_BLOCK, identify_blocks and reorder_blocks.  */\n+     See NOTE_BLOCK and reorder_blocks.  */\n   NOTE_INSN_BLOCK_BEG,\n   NOTE_INSN_BLOCK_END,\n "}]}