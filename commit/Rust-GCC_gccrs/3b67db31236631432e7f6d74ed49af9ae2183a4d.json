{"sha": "3b67db31236631432e7f6d74ed49af9ae2183a4d", "node_id": "C_kwDOANBUbNoAKDNiNjdkYjMxMjM2NjMxNDMyZTdmNmQ3NGVkNDlhZjlhZTIxODNhNGQ", "commit": {"author": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2023-03-24T02:45:52Z"}, "committer": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2023-03-24T02:47:13Z"}, "message": "Fortran: Escalate failure when Hollerith constant to real conversion fails\n\ngcc/fortran/\n\tPR target/103628\n\t* target-memory.cc (gfc_interpret_float): Return FAIL when\n\tnative_interpret_expr gets a NULL tree.\n\t* arith.cc (gfc_hollerith2real): Return NULL when\n\tgfc_interpret_float fails.\n\t* error.cc (gfc_buffered_p): Define.\n\t* gfortran.h (gfc_buffered_p): Declare.\n\t* intrinsic.cc: Add diagnostic.h to include list.\n\t(do_simplify): Save errorcount and check it at finish.  Report a\n\t\"Cannot simplify expression\" error on a bad result if error count\n\tdoesn't change and no other errors buffered.\n\ngcc/testsuite/\n\tPR target/103628\n\t* gfortran.dg/assumed_size_refs_2.f90: Check \"Cannot simplify\n\texpression\" error.\n\t* gfortran.dg/unpack_field_1.f90: Likewise.\n\t* gfortran.dg/pr103628.f90: New.\n\nCo-Authored-By: Tobias Burnus <tobias@codesourcery.com>", "tree": {"sha": "8bce8ec5e48fcd55fa984121d1b690206356e297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bce8ec5e48fcd55fa984121d1b690206356e297"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b67db31236631432e7f6d74ed49af9ae2183a4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b67db31236631432e7f6d74ed49af9ae2183a4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b67db31236631432e7f6d74ed49af9ae2183a4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b67db31236631432e7f6d74ed49af9ae2183a4d/comments", "author": null, "committer": null, "parents": [{"sha": "08ef17c75777ef9e4e7ead132ccd7a6d03ae6020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08ef17c75777ef9e4e7ead132ccd7a6d03ae6020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08ef17c75777ef9e4e7ead132ccd7a6d03ae6020"}], "stats": {"total": 56, "additions": 47, "deletions": 9}, "files": [{"sha": "ddf9874671cd25cb8dd3e248a24cafcd1eefa8e4", "filename": "gcc/fortran/arith.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b67db31236631432e7f6d74ed49af9ae2183a4d/gcc%2Ffortran%2Farith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b67db31236631432e7f6d74ed49af9ae2183a4d/gcc%2Ffortran%2Farith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.cc?ref=3b67db31236631432e7f6d74ed49af9ae2183a4d", "patch": "@@ -2753,10 +2753,12 @@ gfc_hollerith2real (gfc_expr *src, int kind)\n   result = gfc_get_constant_expr (BT_REAL, kind, &src->where);\n \n   hollerith2representation (result, src);\n-  gfc_interpret_float (kind, (unsigned char *) result->representation.string,\n-\t\t       result->representation.length, result->value.real);\n-\n-  return result;\n+  if (gfc_interpret_float (kind,\n+\t\t\t   (unsigned char *) result->representation.string,\n+\t\t\t   result->representation.length, result->value.real))\n+    return result;\n+  else\n+    return NULL;\n }\n \n /* Convert character to real.  The constant will be padded or truncated.  */"}, {"sha": "6cae6726f91c5fd0bbffc89ffbc48e1b074d202a", "filename": "gcc/fortran/error.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b67db31236631432e7f6d74ed49af9ae2183a4d/gcc%2Ffortran%2Ferror.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b67db31236631432e7f6d74ed49af9ae2183a4d/gcc%2Ffortran%2Ferror.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.cc?ref=3b67db31236631432e7f6d74ed49af9ae2183a4d", "patch": "@@ -49,6 +49,13 @@ static gfc_error_buffer error_buffer;\n static output_buffer *pp_error_buffer, *pp_warning_buffer;\n static int warningcount_buffered, werrorcount_buffered;\n \n+/* Return buffered_p.  */\n+bool\n+gfc_buffered_p (void)\n+{\n+  return buffered_p;\n+}\n+\n /* Return true if there output_buffer is empty.  */\n \n static bool"}, {"sha": "130d5d7e5b743a322ef0111e8b2084004304b963", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b67db31236631432e7f6d74ed49af9ae2183a4d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b67db31236631432e7f6d74ed49af9ae2183a4d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=3b67db31236631432e7f6d74ed49af9ae2183a4d", "patch": "@@ -3331,6 +3331,7 @@ void gfc_internal_error (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_GCC_GFC\n void gfc_clear_error (void);\n bool gfc_error_check (void);\n bool gfc_error_flag_test (void);\n+bool gfc_buffered_p (void);\n \n notification gfc_notification_std (int);\n bool gfc_notify_std (int, const char *, ...) ATTRIBUTE_GCC_GFC(2,3);"}, {"sha": "1a26b7a571ff5203eb9965f11c256c0085224fa3", "filename": "gcc/fortran/intrinsic.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b67db31236631432e7f6d74ed49af9ae2183a4d/gcc%2Ffortran%2Fintrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b67db31236631432e7f6d74ed49af9ae2183a4d/gcc%2Ffortran%2Fintrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.cc?ref=3b67db31236631432e7f6d74ed49af9ae2183a4d", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"options.h\"\n #include \"gfortran.h\"\n #include \"intrinsic.h\"\n+#include \"diagnostic.h\" /* For errorcount.  */\n \n /* Namespace to hold the resolved symbols for intrinsic subroutines.  */\n static gfc_namespace *gfc_intrinsic_namespace;\n@@ -4620,6 +4621,7 @@ do_simplify (gfc_intrinsic_sym *specific, gfc_expr *e)\n {\n   gfc_expr *result, *a1, *a2, *a3, *a4, *a5, *a6;\n   gfc_actual_arglist *arg;\n+  int old_errorcount = errorcount;\n \n   /* Max and min require special handling due to the variable number\n      of args.  */\n@@ -4708,7 +4710,12 @@ do_simplify (gfc_intrinsic_sym *specific, gfc_expr *e)\n \n finish:\n   if (result == &gfc_bad_expr)\n-    return false;\n+    {\n+      if (errorcount == old_errorcount\n+\t  && (!gfc_buffered_p () || !gfc_error_flag_test ()))\n+       gfc_error (\"Cannot simplify expression at %L\", &e->where);\n+      return false;\n+    }\n \n   if (result == NULL)\n     resolve_intrinsic (specific, e);\t/* Must call at run-time */"}, {"sha": "edc30bddb52940e67de719401567339cfa8c6c28", "filename": "gcc/fortran/target-memory.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b67db31236631432e7f6d74ed49af9ae2183a4d/gcc%2Ffortran%2Ftarget-memory.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b67db31236631432e7f6d74ed49af9ae2183a4d/gcc%2Ffortran%2Ftarget-memory.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.cc?ref=3b67db31236631432e7f6d74ed49af9ae2183a4d", "patch": "@@ -416,11 +416,14 @@ gfc_interpret_float (int kind, unsigned char *buffer, size_t buffer_size,\n \t\t     mpfr_t real)\n {\n   gfc_set_model_kind (kind);\n-  mpfr_init (real);\n-  gfc_conv_tree_to_mpfr (real,\n-\t\t\t native_interpret_expr (gfc_get_real_type (kind),\n-\t\t\t\t\t\tbuffer, buffer_size));\n \n+  tree source = native_interpret_expr (gfc_get_real_type (kind), buffer,\n+\t\t\t\t       buffer_size);\n+  if (!source)\n+    return 0;\n+\n+  mpfr_init (real);\n+  gfc_conv_tree_to_mpfr (real, source);\n   return size_float (kind);\n }\n "}, {"sha": "632b1085548bb977e2b9b3be0ba958ae7b805a94", "filename": "gcc/testsuite/gfortran.dg/assumed_size_refs_2.f90", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b67db31236631432e7f6d74ed49af9ae2183a4d/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_size_refs_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b67db31236631432e7f6d74ed49af9ae2183a4d/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_size_refs_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_size_refs_2.f90?ref=3b67db31236631432e7f6d74ed49af9ae2183a4d", "patch": "@@ -42,3 +42,5 @@ subroutine foo(m)\n   end subroutine foo\n \n end program assumed_size_test_2\n+\n+! { dg-error \"Cannot simplify expression\" \" \" { target *-*-* } 29 }"}, {"sha": "255d5bdd73e399f8b20160b414a6f339cabd577b", "filename": "gcc/testsuite/gfortran.dg/pr103628.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b67db31236631432e7f6d74ed49af9ae2183a4d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103628.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b67db31236631432e7f6d74ed49af9ae2183a4d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103628.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103628.f90?ref=3b67db31236631432e7f6d74ed49af9ae2183a4d", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile { target powerpc*-*-* } }\n+! { dg-options \"-O2 -mabi=ibmlongdouble\" }\n+\n+! Test to ensure that it reports an \"Cannot simplify expression\" error\n+! instead of throwing an ICE when the memory represent of the HOLLERITH\n+! string is not unique with ibm long double encoding.\n+\n+program main\n+  integer, parameter :: k = 16\n+  real(kind = k):: b = 4h1234\n+end program main\n+\n+! { dg-warning \"Conversion from HOLLERITH\" \"warning\" { target powerpc*-*-* } 10 }\n+! { dg-error \"Cannot simplify expression\" \"error\" { target powerpc*-*-* } 10 }"}, {"sha": "1951484f14743f03323bc6200e88a16b4830a386", "filename": "gcc/testsuite/gfortran.dg/unpack_field_1.f90", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b67db31236631432e7f6d74ed49af9ae2183a4d/gcc%2Ftestsuite%2Fgfortran.dg%2Funpack_field_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b67db31236631432e7f6d74ed49af9ae2183a4d/gcc%2Ftestsuite%2Fgfortran.dg%2Funpack_field_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funpack_field_1.f90?ref=3b67db31236631432e7f6d74ed49af9ae2183a4d", "patch": "@@ -13,3 +13,5 @@ program p\n   print *, unpack(a,mask,d) ! OK\n   print *, unpack(a,mask,3) ! OK\n end\n+\n+! { dg-error \"Cannot simplify expression\" \" \" { target *-*-* } 12 }"}]}