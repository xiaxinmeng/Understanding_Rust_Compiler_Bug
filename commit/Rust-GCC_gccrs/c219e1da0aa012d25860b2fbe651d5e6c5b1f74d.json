{"sha": "c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIxOWUxZGEwYWEwMTJkMjU4NjBiMmZiZTY1MWQ1ZTZjNWIxZjc0ZA==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2002-09-22T19:23:20Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2002-09-22T19:23:20Z"}, "message": "c-common.c (preprocessing_trad_p): Define.\n\n\t* c-common.c (preprocessing_trad_p): Define.\n\t* pa-hiux.h, pa-hpux.h, pa-hpux7.h (CPP_PREDEFINES): Delete.\n\t(TARGET_OS_CPP_BUILTINS, SUBTARGET_SWITCHES): Define.\n\t* pa-hpux10.h (TARGET_OS_CPP_BUILTINS, CPP_SPEC): Define.\n\t* pa-hpux11.h (TARGET_OS_CPP_BUILTINS): Define.\n\t* pa-linux.h (CPP_PREDEFINES): Delete.\n\t(TARGET_OS_CPP_BUILTINS, CPP_SPEC): Define.\n\t* pa32-linux.h, pa64-linux.h (CPP_SPEC): Delete.\n\t* pa-osf.h, pa-pro-end.h, rtems.h (CPP_PREDEFINES): Delete.\n\t(TARGET_OS_CPP_BUILTINS): Define.\n\t* pa.h (MASK_SIO, TARGET_SIO, TARGET_PA_10): Define.\n\t(TARGET_SWITCHES): Reformat.  Use N_() macro.  Add SUBTARGET_SWITCHES.\n\t(SUBTARGET_SWITCHES): Provide default definition.\n\t(TARGET_OPTIONS): Reformat.  Use N_() macro.\n\t(CPP_PA10_SPEC, CPP_PA11_SPEC, CPP_PA20_SPEC, CPP_64BIT_SPEC,\n\tCPP_CPU_DEFAULT_SPEC, CPP_64BIT_DEFAULT_SPEC, SUBTARGET_EXTRA_SPECS,\n\tEXTRA_SPECS, CPP_SPEC, CPLUSPLUS_CPP_SPEC, CPP_PREDEFINES): Delete.\n\t(TARGET_CPU_CPP_BUILTINS): Define.\n\t(TARGET_OS_CPP_BUILTINS): Define for BSD-like systems.\n\t* doc/invoke.texi (msio, mwsio): Document new hppa options.\n\t* doc/tm.texi (TARGET_CPU_CPP_BUILTINS): Document macro\n\tpreprocessing_trad_p().\n\nFrom-SVN: r57416", "tree": {"sha": "de93cfb0e906c2e489661d1488858c505399696c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de93cfb0e906c2e489661d1488858c505399696c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/comments", "author": null, "committer": null, "parents": [{"sha": "490ed84645eec878d19fa33886894d3579566011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/490ed84645eec878d19fa33886894d3579566011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/490ed84645eec878d19fa33886894d3579566011"}], "stats": {"total": 655, "additions": 497, "deletions": 158}, "files": [{"sha": "df74a29a637e6d854a0b2f2af69d1c83b9e04e33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "patch": "@@ -1,3 +1,28 @@\n+2002-09-22  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* c-common.c (preprocessing_trad_p): Define.\n+\t* pa-hiux.h, pa-hpux.h, pa-hpux7.h (CPP_PREDEFINES): Delete.\n+\t(TARGET_OS_CPP_BUILTINS, SUBTARGET_SWITCHES): Define.\n+\t* pa-hpux10.h (TARGET_OS_CPP_BUILTINS, CPP_SPEC): Define.\n+\t* pa-hpux11.h (TARGET_OS_CPP_BUILTINS): Define.\n+\t* pa-linux.h (CPP_PREDEFINES): Delete.\n+\t(TARGET_OS_CPP_BUILTINS, CPP_SPEC): Define.\n+\t* pa32-linux.h, pa64-linux.h (CPP_SPEC): Delete.\n+\t* pa-osf.h, pa-pro-end.h, rtems.h (CPP_PREDEFINES): Delete.\n+\t(TARGET_OS_CPP_BUILTINS): Define.\n+\t* pa.h (MASK_SIO, TARGET_SIO, TARGET_PA_10): Define.\n+\t(TARGET_SWITCHES): Reformat.  Use N_() macro.  Add SUBTARGET_SWITCHES.\n+\t(SUBTARGET_SWITCHES): Provide default definition.\n+\t(TARGET_OPTIONS): Reformat.  Use N_() macro.\n+\t(CPP_PA10_SPEC, CPP_PA11_SPEC, CPP_PA20_SPEC, CPP_64BIT_SPEC,\n+\tCPP_CPU_DEFAULT_SPEC, CPP_64BIT_DEFAULT_SPEC, SUBTARGET_EXTRA_SPECS,\n+\tEXTRA_SPECS, CPP_SPEC, CPLUSPLUS_CPP_SPEC, CPP_PREDEFINES): Delete.\n+\t(TARGET_CPU_CPP_BUILTINS): Define.\n+\t(TARGET_OS_CPP_BUILTINS): Define for BSD-like systems.\n+\t* doc/invoke.texi (msio, mwsio): Document new hppa options.\n+\t* doc/tm.texi (TARGET_CPU_CPP_BUILTINS): Document macro\n+\tpreprocessing_trad_p().\n+\n 2002-09-22  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* doc/install.texi: Document behavior of --with-headers and"}, {"sha": "c85c23c8eca46cf7d99e052df0d65a9d4972856c", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "patch": "@@ -5007,6 +5007,7 @@ cb_register_builtins (pfile)\n   /* A straightforward target hook doesn't work, because of problems\n      linking that hook's body when part of non-C front ends.  */\n # define preprocessing_asm_p() (cpp_get_options (pfile)->lang == CLK_ASM)\n+# define preprocessing_trad_p() (cpp_get_options (pfile)->traditional)\n # define builtin_define(TXT) cpp_define (pfile, TXT)\n # define builtin_assert(TXT) cpp_assert (pfile, TXT)\n   TARGET_CPU_CPP_BUILTINS ();"}, {"sha": "c1d945c6daa63dcf4207e1c092df1f9094b9bd68", "filename": "gcc/config/pa/pa-hiux.h", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa-hiux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa-hiux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hiux.h?ref=c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for HI-UX.\n-   Copyright (C) 1993, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -21,6 +21,56 @@ Boston, MA 02111-1307, USA.  */\n /* HIUX is just a HPUX variant.  We can simply use the HPUX configuration\n    for just about everything.  */\n \n-/* Predefines are the one noteworthy difference between HPUX and HIUX.  */\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dhppa -DPWB -Dunix -D__H3050R -D__H3050RX -Asystem=unix -Asystem=hiux -Acpu=hppa -Amachine=hppa\"\n+/* OS cpp builtins are the one noteworthy difference between HPUX and HIUX.\n+   The following defines are similar to those for hpux10 with the addition\n+   of __H3050R and __H3050RX.  */\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+\tbuiltin_assert (\"system=hiux\");\t\t\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\t\t\\\n+\tbuiltin_define (\"__hp9000s800\");\t\t\t\\\n+\tbuiltin_define (\"__hp9000s800__\");\t\t\t\\\n+\tbuiltin_define (\"__hiux\");\t\t\t\t\\\n+\tbuiltin_define (\"__hiux__\");\t\t\t\t\\\n+\tbuiltin_define (\"__unix\");\t\t\t\t\\\n+\tbuiltin_define (\"__unix__\");\t\t\t\t\\\n+\tbuiltin_define (\"__H3050R\");\t\t\t\t\\\n+\tbuiltin_define (\"__H3050RX\");\t\t\t\t\\\n+\tif (c_language == clk_cplusplus)\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"_HIUX_SOURCE\");\t\t\t\\\n+\t    builtin_define (\"_INCLUDE_LONGLONG\");\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+\telse if (!flag_iso)\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"_HIUX_SOURCE\");\t\t\t\\\n+\t    if (preprocessing_trad_p ())\t\t\t\\\n+\t      {\t\t\t\t\t\t\t\\\n+\t\tbuiltin_define (\"hp9000s800\");\t\t\t\\\n+\t\tbuiltin_define (\"hppa\");\t\t\t\\\n+\t\tbuiltin_define (\"hiux\");\t\t\t\\\n+\t\tbuiltin_define (\"unix\");\t\t\t\\\n+\t\tbuiltin_define (\"__CLASSIC_C__\");\t\t\\\n+\t\tbuiltin_define (\"_PWB\");\t\t\t\\\n+\t\tbuiltin_define (\"PWB\");\t\t\t\t\\\n+\t      }\t\t\t\t\t\t\t\\\n+\t    else\t\t\t\t\t\t\\\n+\t      builtin_define (\"__STDC_EXT__\");\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+\tif (TARGET_SIO)\t\t\t\t\t\t\\\n+\t  builtin_define (\"_SIO\");\t\t\t\t\\\n+\telse\t\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"__hp9000s700\");\t\t\t\\\n+\t    builtin_define (\"__hp9000s700__\");\t\t\t\\\n+\t    builtin_define (\"_WSIO\");\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES \\\n+  { \"sio\",\t MASK_SIO,\tN_(\"Generate cpp defines for server IO\") }, \\\n+  { \"wsio\",\t-MASK_SIO,\tN_(\"Generate cpp defines for workstation IO\") },"}, {"sha": "b9d563e09be25a6feeff4d836f20338b6c548ea1", "filename": "gcc/config/pa/pa-hpux.h", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux.h?ref=c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for HP-UX.\n-   Copyright (C) 1991, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1995, 1996, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -28,13 +28,62 @@ Boston, MA 02111-1307, USA.  */\n #define SIZE_TYPE \"unsigned int\"\n #define PTRDIFF_TYPE \"int\"\n \n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+\tbuiltin_assert (\"system=hpux\");\t\t\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\t\t\\\n+\tbuiltin_define (\"__hp9000s800\");\t\t\t\\\n+\tbuiltin_define (\"__hp9000s800__\");\t\t\t\\\n+\tbuiltin_define (\"__hp9k8\");\t\t\t\t\\\n+\tbuiltin_define (\"__hp9k8__\");\t\t\t\t\\\n+\tbuiltin_define (\"__hpux\");\t\t\t\t\\\n+\tbuiltin_define (\"__hpux__\");\t\t\t\t\\\n+\tbuiltin_define (\"__unix\");\t\t\t\t\\\n+\tbuiltin_define (\"__unix__\");\t\t\t\t\\\n+\tif (c_language == clk_cplusplus)\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"_HPUX_SOURCE\");\t\t\t\\\n+\t    builtin_define (\"_INCLUDE_LONGLONG\");\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+\telse if (!flag_iso)\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"_HPUX_SOURCE\");\t\t\t\\\n+\t    if (preprocessing_trad_p ())\t\t\t\\\n+\t      {\t\t\t\t\t\t\t\\\n+\t\tbuiltin_define (\"hp9000s800\");\t\t\t\\\n+\t\tbuiltin_define (\"hp9k8\");\t\t\t\\\n+\t\tbuiltin_define (\"hppa\");\t\t\t\\\n+\t\tbuiltin_define (\"hpux\");\t\t\t\\\n+\t\tbuiltin_define (\"unix\");\t\t\t\\\n+\t\tbuiltin_define (\"__CLASSIC_C__\");\t\t\\\n+\t\tbuiltin_define (\"_PWB\");\t\t\t\\\n+\t\tbuiltin_define (\"PWB\");\t\t\t\t\\\n+\t      }\t\t\t\t\t\t\t\\\n+\t    else\t\t\t\t\t\t\\\n+\t      builtin_define (\"__STDC_EXT__\");\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+\tif (TARGET_SIO)\t\t\t\t\t\t\\\n+\t  builtin_define (\"_SIO\");\t\t\t\t\\\n+\telse\t\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"__hp9000s700\");\t\t\t\\\n+\t    builtin_define (\"__hp9000s700__\");\t\t\t\\\n+\t    builtin_define (\"_WSIO\");\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES \\\n+  { \"sio\",\t MASK_SIO,\tN_(\"Generate cpp defines for server IO\") }, \\\n+  { \"wsio\",\t-MASK_SIO,\tN_(\"Generate cpp defines for workstation IO\") },\n+\n /* Like the default, except no -lg.  */\n #undef LIB_SPEC\n #define LIB_SPEC \"%{!shared:%{!p:%{!pg:-lc}}%{p: -L/lib/libp/ -lc}%{pg: -L/lib/libp/ -lc}}\"\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -DPWB -Dhpux -Dunix -Asystem=unix -Asystem=hpux -Acpu=hppa -Amachine=hppa\"\n-\n #undef LINK_SPEC\n #if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_PA_11)\n #define LINK_SPEC \\"}, {"sha": "0354543e3d0928c6f225d5eb1055136f674f2349", "filename": "gcc/config/pa/pa-hpux10.h", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h?ref=c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "patch": "@@ -1,5 +1,6 @@\n-/* Definitions of target machine for GNU compiler, for HP PA-RISC 1.1\n-   Copyright (C) 1995, 1996, 1997, 2000, 2001 Free Software Foundation, Inc.\n+/* Definitions of target machine for GNU compiler, for HP PA-RISC\n+   Copyright (C) 1995, 1996, 1997, 2000, 2001, 2002\n+   Free Software Foundation, Inc.\n    Contributed by Tim Moore (moore@defmacro.cs.utah.edu)\n \n This file is part of GNU CC.\n@@ -19,6 +20,52 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+\tbuiltin_assert (\"system=hpux\");\t\t\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\t\t\\\n+\tbuiltin_define (\"__hp9000s800\");\t\t\t\\\n+\tbuiltin_define (\"__hp9000s800__\");\t\t\t\\\n+\tbuiltin_define (\"__hpux\");\t\t\t\t\\\n+\tbuiltin_define (\"__hpux__\");\t\t\t\t\\\n+\tbuiltin_define (\"__unix\");\t\t\t\t\\\n+\tbuiltin_define (\"__unix__\");\t\t\t\t\\\n+\tif (c_language == clk_cplusplus)\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"_HPUX_SOURCE\");\t\t\t\\\n+\t    builtin_define (\"_INCLUDE_LONGLONG\");\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+\telse if (!flag_iso)\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"_HPUX_SOURCE\");\t\t\t\\\n+\t    if (preprocessing_trad_p ())\t\t\t\\\n+\t      {\t\t\t\t\t\t\t\\\n+\t\tbuiltin_define (\"hp9000s800\");\t\t\t\\\n+\t\tbuiltin_define (\"hppa\");\t\t\t\\\n+\t\tbuiltin_define (\"hpux\");\t\t\t\\\n+\t\tbuiltin_define (\"unix\");\t\t\t\\\n+\t\tbuiltin_define (\"__CLASSIC_C__\");\t\t\\\n+\t\tbuiltin_define (\"_PWB\");\t\t\t\\\n+\t\tbuiltin_define (\"PWB\");\t\t\t\t\\\n+\t      }\t\t\t\t\t\t\t\\\n+\t    else\t\t\t\t\t\t\\\n+\t      builtin_define (\"__STDC_EXT__\");\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+\tif (TARGET_SIO)\t\t\t\t\t\t\\\n+\t  builtin_define (\"_SIO\");\t\t\t\t\\\n+\telse\t\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"__hp9000s700\");\t\t\t\\\n+\t    builtin_define (\"__hp9000s700__\");\t\t\t\\\n+\t    builtin_define (\"_WSIO\");\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define CPP_SPEC \"%{threads: -D_REENTRANT -D_DCE_THREADS}\"\n+\n /* We can debug dynamically linked executables on hpux9; we also want\n    dereferencing of a NULL pointer to cause a SEGV.  */\n #undef LINK_SPEC"}, {"sha": "0bc7f1010a5e88bfb326b2e772ceaaca3e4878ed", "filename": "gcc/config/pa/pa-hpux11.h", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h?ref=c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "patch": "@@ -1,5 +1,5 @@\n-/* Definitions of target machine for GNU compiler, for HP PA-RISC 1.1\n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+/* Definitions of target machine for GNU compiler, for HP PA-RISC\n+   Copyright (C) 1998, 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,6 +18,55 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+\tbuiltin_assert (\"system=hpux\");\t\t\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\t\t\\\n+\tbuiltin_define (\"__hp9000s800\");\t\t\t\\\n+\tbuiltin_define (\"__hp9000s800__\");\t\t\t\\\n+\tbuiltin_define (\"__hpux\");\t\t\t\t\\\n+\tbuiltin_define (\"__hpux__\");\t\t\t\t\\\n+\tbuiltin_define (\"__unix\");\t\t\t\t\\\n+\tbuiltin_define (\"__unix__\");\t\t\t\t\\\n+\tif (c_language == clk_cplusplus)\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"_HPUX_SOURCE\");\t\t\t\\\n+\t    builtin_define (\"_INCLUDE_LONGLONG\");\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+\telse\t\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    if (!flag_iso)\t\t\t\t\t\\\n+\t      {\t\t\t\t\t\t\t\\\n+\t\tbuiltin_define (\"_HPUX_SOURCE\");\t\t\\\n+\t\tif (preprocessing_trad_p ())\t\t\t\\\n+\t\t  {\t\t\t\t\t\t\\\n+\t\t    builtin_define (\"hp9000s800\");\t\t\\\n+\t\t    builtin_define (\"hppa\");\t\t\t\\\n+\t\t    builtin_define (\"hpux\");\t\t\t\\\n+\t\t    builtin_define (\"unix\");\t\t\t\\\n+\t\t    builtin_define (\"__CLASSIC_C__\");\t\t\\\n+\t\t    builtin_define (\"_PWB\");\t\t\t\\\n+\t\t    builtin_define (\"PWB\");\t\t\t\\\n+\t\t  }\t\t\t\t\t\t\\\n+\t\telse\t\t\t\t\t\t\\\n+\t\t  builtin_define (\"__STDC_EXT__\");\t\t\\\n+\t      }\t\t\t\t\t\t\t\\\n+\t    if (!TARGET_64BIT)\t\t\t\t\t\\\n+\t      builtin_define (\"_ILP32\");\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+\tif (TARGET_SIO)\t\t\t\t\t\t\\\n+\t  builtin_define (\"_SIO\");\t\t\t\t\\\n+\telse\t\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"__hp9000s700\");\t\t\t\\\n+\t    builtin_define (\"__hp9000s700__\");\t\t\t\\\n+\t    builtin_define (\"_WSIO\");\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n /* We can debug dynamically linked executables on hpux11; we also\n    want dereferencing of a NULL pointer to cause a SEGV.  */\n #undef LINK_SPEC"}, {"sha": "0239e038cf8c87d3c5e85f0bce7e2df600aaa7fb", "filename": "gcc/config/pa/pa-hpux7.h", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa-hpux7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa-hpux7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux7.h?ref=c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for HP-UX.\n-   Copyright (C) 1991, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1995, 1996, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -29,9 +29,58 @@ Boston, MA 02111-1307, USA.  */\n #define SIZE_TYPE \"unsigned int\"\n #define PTRDIFF_TYPE \"int\"\n \n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+\tbuiltin_assert (\"system=hpux\");\t\t\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\t\t\\\n+\tbuiltin_define (\"__hp9000s800\");\t\t\t\\\n+\tbuiltin_define (\"__hp9000s800__\");\t\t\t\\\n+\tbuiltin_define (\"__hp9k8\");\t\t\t\t\\\n+\tbuiltin_define (\"__hp9k8__\");\t\t\t\t\\\n+\tbuiltin_define (\"__hpux\");\t\t\t\t\\\n+\tbuiltin_define (\"__hpux__\");\t\t\t\t\\\n+\tbuiltin_define (\"__unix\");\t\t\t\t\\\n+\tbuiltin_define (\"__unix__\");\t\t\t\t\\\n+\tif (c_language == clk_cplusplus)\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"_HPUX_SOURCE\");\t\t\t\\\n+\t    builtin_define (\"_INCLUDE_LONGLONG\");\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+\telse if (!flag_iso)\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"_HPUX_SOURCE\");\t\t\t\\\n+\t    if (preprocessing_trad_p ())\t\t\t\\\n+\t      {\t\t\t\t\t\t\t\\\n+\t\tbuiltin_define (\"hp9000s800\");\t\t\t\\\n+\t\tbuiltin_define (\"hp9k8\");\t\t\t\\\n+\t\tbuiltin_define (\"hppa\");\t\t\t\\\n+\t\tbuiltin_define (\"hpux\");\t\t\t\\\n+\t\tbuiltin_define (\"unix\");\t\t\t\\\n+\t\tbuiltin_define (\"__CLASSIC_C__\");\t\t\\\n+\t\tbuiltin_define (\"_PWB\");\t\t\t\\\n+\t\tbuiltin_define (\"PWB\");\t\t\t\t\\\n+\t      }\t\t\t\t\t\t\t\\\n+\t    else\t\t\t\t\t\t\\\n+\t      builtin_define (\"__STDC_EXT__\");\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+\tif (TARGET_SIO)\t\t\t\t\t\t\\\n+\t  builtin_define (\"_SIO\");\t\t\t\t\\\n+\telse\t\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"__hp9000s700\");\t\t\t\\\n+\t    builtin_define (\"__hp9000s700__\");\t\t\t\\\n+\t    builtin_define (\"_WSIO\");\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES \\\n+  { \"sio\",\t MASK_SIO,\tN_(\"Generate cpp defines for server IO\") }, \\\n+  { \"wsio\",\t-MASK_SIO,\tN_(\"Generate cpp defines for workstation IO\") },\n+\n /* Like the default, except no -lg.  */\n #undef LIB_SPEC\n #define LIB_SPEC \"%{!p:%{!pg:-lc}}%{p: -L/lib/libp/ -lc}%{pg: -L/lib/libp/ -lc}\"\n-\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -DPWB -Dhpux -Dunix -Asystem=unix -Asystem=hpux -Acpu=hppa -Amachine=hppa\""}, {"sha": "86dfabc77b79d8485c2262813c3118a24becd23a", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "patch": "@@ -56,8 +56,22 @@ Boston, MA 02111-1307, USA.  */\n       }\t\t\t\t\t\t\t\t\t\\\n     } while (0)\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-D__ELF__ -Dunix -D__hppa__ -D__gnu_linux__ -Dlinux -Asystem=unix -Asystem=posix -Acpu=hppa -Amachine=hppa -Amachine=bigendian\"\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__ELF__\");\t\t\\\n+\tbuiltin_define (\"__gnu_linux__\");\t\\\n+\tbuiltin_define_std (\"linux\");\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\\\n+\tbuiltin_assert (\"machine=bigendian\");\t\\\n+\tbuiltin_assert (\"system=posix\");\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE}\"\n \n #undef\tLIB_SPEC\n #define LIB_SPEC \\"}, {"sha": "74a6e588505510ce816e508bc101ca291cea82e1", "filename": "gcc/config/pa/pa-osf.h", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa-osf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa-osf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-osf.h?ref=c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for HP PA-RISC 1.1\n-   Copyright (C) 1991, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1995, 1996, 2002 Free Software Foundation, Inc.\n    Contributed by Tim Moore (moore@defmacro.cs.utah.edu)\n \n This file is part of GNU CC.\n@@ -19,12 +19,34 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#undef CPP_PREDEFINES\n-#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_PA_11)\n-#define CPP_PREDEFINES \"-Dhppa -Dunix -Dhp9000 -Dspectrum -DREVARGV -Dhp700 -DHP700 -Dparisc -D__pa_risc -DPARISC -DBYTE_MSF -DBIT_MSF -Asystem=unix -Asystem=mach -Acpu=hppa -Amachine=hppa\"\n-#else\n-#define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -Dunix -Dhp9000 -Dhp800 -Dspectrum -DREVARGV -Dparisc -D__pa_risc -DPARISC -DBYTE_MSF -DBIT_MSF -Asystem=unix -Asystem=mach -Acpu=hppa -Amachine=hppa\"\n-#endif\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+\tif (TARGET_PA_11)\t\t\t\\\n+\t  {\t\t\t\t\t\\\n+\t    builtin_define_std (\"hp700\");\t\\\n+\t    builtin_define_std (\"HP700\");\t\\\n+\t  }\t\t\t\t\t\\\n+\telse\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\\\n+\t    builtin_define_std (\"hp800\");\t\\\n+\t    builtin_define_std (\"hp9k8\");\t\\\n+\t    builtin_define_std (\"hp9000s800\");\t\\\n+\t  }\t\t\t\t\t\\\n+\tbuiltin_define_std (\"BIT_MSF\");\t\t\\\n+\tbuiltin_define_std (\"BYTE_MSF\");\t\\\n+\tbuiltin_define_std (\"PARISC\");\t\t\\\n+\tbuiltin_define_std (\"REVARGV\");\t\t\\\n+\tbuiltin_define_std (\"hp9000\");\t\t\\\n+\tbuiltin_define (\"__pa_risc\");\t\t\\\n+\tbuiltin_define_std (\"parisc\");\t\t\\\n+\tbuiltin_define_std (\"spectrum\");\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\\\n+\tbuiltin_assert (\"system=mach\");\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n \n /* Don't default to pcc-struct-return, because gcc is the only compiler, and\n    we want to retain compatibility with older gcc versions.  */"}, {"sha": "a1bd30dc65d3f4dbe9272ebbe65854b2e04aad76", "filename": "gcc/config/pa/pa-pro-end.h", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa-pro-end.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa-pro-end.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-pro-end.h?ref=c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for PRO.\n-   Copyright (C) 1996, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -25,13 +25,25 @@ Boston, MA 02111-1307, USA.  */\n #define SIZE_TYPE \"unsigned int\"\n #define PTRDIFF_TYPE \"int\"\n \n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+\tif (c_language != clk_cplusplus\t\t\\\n+\t    && !flag_iso)\t\t\t\\\n+\t  {\t\t\t\t\t\\\n+\t    builtin_define (\"hppa\");\t\t\\\n+\t    builtin_define_std (\"PWB\");\t\t\\\n+\t  }\t\t\t\t\t\\\n+\tbuiltin_define (\"__pro__\");\t\t\\\n+\tbuiltin_assert (\"system=pro\");\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n /* Like the default, except no -lg.  */\n #undef LIB_SPEC\n #define LIB_SPEC \"%{!p:%{!pg:-lc}}%{p: -L/lib/libp/ -lc}%{pg: -L/lib/libp/ -lc}\"\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dhppa -DPWB -Acpu=hppa -D__pro__ -Amachine=hppa\"\n-\n /* hpux8 and later have C++ compatible include files, so do not\n    pretend they are `extern \"C\"'.  */\n #define NO_IMPLICIT_EXTERN_C"}, {"sha": "7813d7c5e64a51d788288e781d3ad2dc97909d09", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 120, "deletions": 113, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "patch": "@@ -74,14 +74,10 @@ extern enum architecture_type pa_arch;\n \n extern int target_flags;\n \n-/* compile code for HP-PA 1.1 (\"Snake\") */\n+/* compile code for HP-PA 1.1 (\"Snake\").  */\n \n #define MASK_PA_11 1\n \n-#ifndef TARGET_PA_11\n-#define TARGET_PA_11 (target_flags & MASK_PA_11)\n-#endif\n-\n /* Disable all FP registers (they all become fixed).  This may be necessary\n    for compiling kernels which perform lazy context switching of FP regs.\n    Note if you use this option and try to perform floating point operations\n@@ -142,10 +138,22 @@ extern int target_flags;\n #define MASK_BIG_SWITCH 2048\n #define TARGET_BIG_SWITCH (target_flags & MASK_BIG_SWITCH)\n \n-\n /* Generate code for the HPPA 2.0 architecture.  TARGET_PA_11 should also be\n    true when this is true.  */\n #define MASK_PA_20 4096\n+\n+/* Generate cpp defines for server I/O.  */\n+#define MASK_SIO 8192\n+#define TARGET_SIO (target_flags & MASK_SIO)\n+\n+#ifndef TARGET_PA_10\n+#define TARGET_PA_10 (target_flags & (MASK_PA_11 | MASK_PA_20) == 0)\n+#endif\n+\n+#ifndef TARGET_PA_11\n+#define TARGET_PA_11 (target_flags & MASK_PA_11)\n+#endif\n+\n #ifndef TARGET_PA_20\n #define TARGET_PA_20 (target_flags & MASK_PA_20)\n #endif\n@@ -165,40 +173,69 @@ extern int target_flags;\n #define TARGET_SOM 0\n #endif\n \n-/* Macro to define tables used to set the flags.\n-   This is a list in braces of pairs in braces,\n-   each pair being { \"NAME\", VALUE }\n-   where VALUE is the bits to set or minus the bits to clear.\n-   An empty string NAME is used to identify the default VALUE.  */\n+/* Macro to define tables used to set the flags.  This is a\n+   list in braces of target switches with each switch being\n+   { \"NAME\", VALUE, \"HELP_STRING\" }.  VALUE is the bits to set,\n+   or minus the bits to clear.  An empty string NAME is used to\n+   identify the default VALUE.  Do not mark empty strings for\n+   translation.  */\n \n #define TARGET_SWITCHES \\\n-  {{\"snake\", MASK_PA_11, \"Generate PA1.1 code\"},\t\t\t\\\n-   {\"nosnake\", -(MASK_PA_11 | MASK_PA_20), \"Generate PA1.0 code\"},\t\t\\\n-   {\"pa-risc-1-0\", -(MASK_PA_11 | MASK_PA_20), \"Generate PA1.0 code\"},\t\t\\\n-   {\"pa-risc-1-1\", MASK_PA_11, \"Generate PA1.1 code\"},\t\t\t\\\n-   {\"pa-risc-2-0\", MASK_PA_20, \"Generate PA2.0 code.  This option requires binutils 2.10 or later\"},\t\t\t\\\n-   {\"disable-fpregs\", MASK_DISABLE_FPREGS, \"Disable FP regs\"},\t\t\\\n-   {\"no-disable-fpregs\", -MASK_DISABLE_FPREGS, \"Do not disable FP regs\"},\\\n-   {\"no-space-regs\", MASK_NO_SPACE_REGS, \"Disable space regs\"},\t\t\\\n-   {\"space-regs\", -MASK_NO_SPACE_REGS, \"Do not disable space regs\"},\t\\\n-   {\"jump-in-delay\", MASK_JUMP_IN_DELAY, \"Put jumps in call delay slots\"},\\\n-   {\"no-jump-in-delay\", -MASK_JUMP_IN_DELAY, \"Do not put jumps in call delay slots\"},\t\\\n-   {\"disable-indexing\", MASK_DISABLE_INDEXING, \"Disable indexed addressing\"},\\\n-   {\"no-disable-indexing\", -MASK_DISABLE_INDEXING, \"Do not disable indexed addressing\"},\\\n-   {\"portable-runtime\", MASK_PORTABLE_RUNTIME, \"Use portable calling conventions\"},\t\\\n-   {\"no-portable-runtime\", -MASK_PORTABLE_RUNTIME, \"Do not use portable calling conventions\"},\\\n-   {\"gas\", MASK_GAS, \"Assume code will be assembled by GAS\"},\t\t\\\n-   {\"no-gas\", -MASK_GAS, \"Do not assume code will be assembled by GAS\"},\t\t\\\n-   {\"soft-float\", MASK_SOFT_FLOAT, \"Use software floating point\"},\t\t\\\n-   {\"no-soft-float\", -MASK_SOFT_FLOAT, \"Do not use software floating point\"},\t\\\n-   {\"long-load-store\", MASK_LONG_LOAD_STORE, \"Emit long load/store sequences\"},\t\\\n-   {\"no-long-load-store\", -MASK_LONG_LOAD_STORE, \"Do not emit long load/store sequences\"},\\\n-   {\"fast-indirect-calls\", MASK_FAST_INDIRECT_CALLS, \"Generate fast indirect calls\"},\\\n-   {\"no-fast-indirect-calls\", -MASK_FAST_INDIRECT_CALLS, \"Do not generate fast indirect calls\"},\\\n-   {\"big-switch\", MASK_BIG_SWITCH, \"Generate code for huge switch statements\"},\t\\\n-   {\"no-big-switch\", -MASK_BIG_SWITCH, \"Do not generate code for huge switch statements\"},\t\\\n-   {\"linker-opt\", 0, \"Enable linker optimizations\"},\t\t\\\n-   { \"\", TARGET_DEFAULT | TARGET_CPU_DEFAULT, NULL}}\n+  {{ \"snake\",\t\t\t MASK_PA_11,\t\t\t\t\\\n+     N_(\"Generate PA1.1 code\") },\t\t\t\t\t\\\n+   { \"nosnake\",\t\t\t-(MASK_PA_11 | MASK_PA_20),\t\t\\\n+     N_(\"Generate PA1.0 code\") },\t\t\t\t\t\\\n+   { \"pa-risc-1-0\",\t\t-(MASK_PA_11 | MASK_PA_20),\t\t\\\n+     N_(\"Generate PA1.0 code\") },\t\t\t\t\t\\\n+   { \"pa-risc-1-1\",\t\t MASK_PA_11,\t\t\t\t\\\n+     N_(\"Generate PA1.1 code\") },\t\t\t\t\t\\\n+   { \"pa-risc-2-0\",\t\t MASK_PA_20,\t\t\t\t\\\n+     N_(\"Generate PA2.0 code (requires binutils 2.10 or later)\") },\t\\\n+   { \"disable-fpregs\",\t\t MASK_DISABLE_FPREGS,\t\t\t\\\n+     N_(\"Disable FP regs\") },\t\t\t\t\t\t\\\n+   { \"no-disable-fpregs\",\t-MASK_DISABLE_FPREGS,\t\t\t\\\n+     N_(\"Do not disable FP regs\") },\t\t\t\t\t\\\n+   { \"no-space-regs\",\t\t MASK_NO_SPACE_REGS,\t\t\t\\\n+     N_(\"Disable space regs\") },\t\t\t\t\t\\\n+   { \"space-regs\",\t\t-MASK_NO_SPACE_REGS,\t\t\t\\\n+     N_(\"Do not disable space regs\") },\t\t\t\t\t\\\n+   { \"jump-in-delay\",\t\t MASK_JUMP_IN_DELAY,\t\t\t\\\n+     N_(\"Put jumps in call delay slots\") },\t\t\t\t\\\n+   { \"no-jump-in-delay\",\t-MASK_JUMP_IN_DELAY,\t\t\t\\\n+     N_(\"Do not put jumps in call delay slots\") },\t\t\t\\\n+   { \"disable-indexing\",\t MASK_DISABLE_INDEXING,\t\t\t\\\n+     N_(\"Disable indexed addressing\") },\t\t\t\t\\\n+   { \"no-disable-indexing\",\t-MASK_DISABLE_INDEXING,\t\t\t\\\n+     N_(\"Do not disable indexed addressing\") },\t\t\t\t\\\n+   { \"portable-runtime\",\t MASK_PORTABLE_RUNTIME,\t\t\t\\\n+     N_(\"Use portable calling conventions\") },\t\t\t\t\\\n+   { \"no-portable-runtime\",\t-MASK_PORTABLE_RUNTIME,\t\t\t\\\n+     N_(\"Do not use portable calling conventions\") },\t\t\t\\\n+   { \"gas\",\t\t\t MASK_GAS,\t\t\t\t\\\n+     N_(\"Assume code will be assembled by GAS\") },\t\t\t\\\n+   { \"no-gas\",\t\t\t-MASK_GAS,\t\t\t\t\\\n+     N_(\"Do not assume code will be assembled by GAS\") },\t\t\\\n+   { \"soft-float\",\t\t MASK_SOFT_FLOAT,\t\t\t\\\n+     N_(\"Use software floating point\") },\t\t\t\t\\\n+   { \"no-soft-float\",\t\t-MASK_SOFT_FLOAT,\t\t\t\\\n+     N_(\"Do not use software floating point\") },\t\t\t\\\n+   { \"long-load-store\",\t\t MASK_LONG_LOAD_STORE,\t\t\t\\\n+     N_(\"Emit long load/store sequences\") },\t\t\t\t\\\n+   { \"no-long-load-store\",\t-MASK_LONG_LOAD_STORE,\t\t\t\\\n+     N_(\"Do not emit long load/store sequences\") },\t\t\t\\\n+   { \"fast-indirect-calls\",\t MASK_FAST_INDIRECT_CALLS,\t\t\\\n+     N_(\"Generate fast indirect calls\") },\t\t\t\t\\\n+   { \"no-fast-indirect-calls\",\t-MASK_FAST_INDIRECT_CALLS,\t\t\\\n+     N_(\"Do not generate fast indirect calls\") },\t\t\t\\\n+   { \"big-switch\",\t\t MASK_BIG_SWITCH,\t\t\t\\\n+     N_(\"Generate code for huge switch statements\") },\t\t\t\\\n+   { \"no-big-switch\",\t\t-MASK_BIG_SWITCH,\t\t\t\\\n+     N_(\"Do not generate code for huge switch statements\") },\t\t\\\n+   { \"linker-opt\",\t\t 0,\t\t\t\t\t\\\n+     N_(\"Enable linker optimizations\") },\t\t\t\t\\\n+   SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n+   { \"\",\t\t\t TARGET_DEFAULT | TARGET_CPU_DEFAULT,\t\\\n+     NULL }}\n \n #ifndef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_GAS | MASK_JUMP_IN_DELAY)\n@@ -208,14 +245,20 @@ extern int target_flags;\n #define TARGET_CPU_DEFAULT 0\n #endif\n \n+#ifndef SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES\n+#endif\n+\n #ifndef TARGET_SCHED_DEFAULT\n #define TARGET_SCHED_DEFAULT \"8000\"\n #endif\n \n-#define TARGET_OPTIONS\t\t\t\\\n-{\t\t\t\t\t\\\n-  { \"schedule=\",\t&pa_cpu_string, \"Specify CPU for scheduling purposes\" },\\\n-  { \"arch=\",\t\t&pa_arch_string, \"Specify architecture for code generation.  Values are 1.0, 1.1, and 2.0.  2.0 requires gas snapshot 19990413 or later.\" }\\\n+#define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  { \"schedule=\",\t\t&pa_cpu_string,\t\t\t\t\\\n+    N_(\"Specify CPU for scheduling purposes\") },\t\t\t\\\n+  { \"arch=\",\t\t\t&pa_arch_string,\t\t\t\\\n+    N_(\"Specify architecture for code generation.  Values are 1.0, 1.1, and 2.0.  2.0 requires gas snapshot 19990413 or later.\") }\\\n }\n \n /* Specify the dialect of assembler to use.  New mnemonics is dialect one\n@@ -265,75 +308,42 @@ extern int target_flags;\n   ((GET_CODE (X) == PLUS ? OFFSET : 0) \\\n     + (frame_pointer_needed ? 0 : compute_frame_size (get_frame_size (), 0)))\n \n-#define CPP_PA10_SPEC \"\"\n-#define CPP_PA11_SPEC \"-D_PA_RISC1_1 -D__hp9000s700\"\n-#define CPP_PA20_SPEC \"-D_PA_RISC2_0 -D__hp9000s800\"\n-#define CPP_64BIT_SPEC \"-D__LP64__\"\n-\n-#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_PA_11) == 0\n-#define CPP_CPU_DEFAULT_SPEC \"%(cpp_pa10)\"\n-#endif\n-\n-#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_PA_11) != 0\n-#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_PA_20) != 0\n-#define CPP_CPU_DEFAULT_SPEC \"%(cpp_pa11) %(cpp_pa20)\"\n-#else\n-#define CPP_CPU_DEFAULT_SPEC \"%(cpp_pa11)\"\n-#endif\n-#endif\n-\n-#if TARGET_64BIT\n-#define CPP_64BIT_DEFAULT_SPEC \"%(cpp_64bit)\"\n-#else\n-#define CPP_64BIT_DEFAULT_SPEC \"\"\n-#endif\n-\n-/* This macro defines names of additional specifications to put in the\n-   specs that can be used in various specifications like CC1_SPEC.  Its\n-   definition is an initializer with a subgrouping for each command option.\n-\n-   Each subgrouping contains a string constant, that defines the\n-   specification name, and a string constant that used by the GNU CC driver\n-   program.\n-\n-   Do not define this macro if it does not need to do anything.  */\n-\n-#ifndef SUBTARGET_EXTRA_SPECS\n-#define SUBTARGET_EXTRA_SPECS\n-#endif\n+#define TARGET_CPU_CPP_BUILTINS()\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+     builtin_assert(\"cpu=hppa\");\t\t\t\t\\\n+     builtin_assert(\"machine=hppa\");\t\t\t\t\\\n+     builtin_define(\"__hppa\");\t\t\t\t\t\\\n+     builtin_define(\"__hppa__\");\t\t\t\t\\\n+     if (TARGET_64BIT)\t\t\t\t\t\t\\\n+       {\t\t\t\t\t\t\t\\\n+\t builtin_define(\"_LP64\");\t\t\t\t\\\n+\t builtin_define(\"__LP64__\");\t\t\t\t\\\n+       }\t\t\t\t\t\t\t\\\n+     if (TARGET_PA_20)\t\t\t\t\t\t\\\n+       builtin_define(\"_PA_RISC2_0\");\t\t\t\t\\\n+     else if (TARGET_PA_11)\t\t\t\t\t\\\n+       builtin_define(\"_PA_RISC1_1\");\t\t\t\t\\\n+     else\t\t\t\t\t\t\t\\\n+       builtin_define(\"_PA_RISC1_0\");\t\t\t\t\\\n+} while (0)\n \n-#define EXTRA_SPECS\t\t\t\t\t\t\t\\\n-  { \"cpp_pa10\", CPP_PA10_SPEC},\t\t\t\t\t\t\\\n-  { \"cpp_pa11\", CPP_PA11_SPEC},\t\t\t\t\t\t\\\n-  { \"cpp_pa20\", CPP_PA20_SPEC},\t\t\t\t\t\t\\\n-  { \"cpp_64bit\", CPP_64BIT_SPEC},\t\t\t\t\t\\\n-  { \"cpp_cpu_default\",\tCPP_CPU_DEFAULT_SPEC },\t\t\t\t\\\n-  { \"cpp_64bit_default\", CPP_64BIT_DEFAULT_SPEC },\t\t\t\\\n-  SUBTARGET_EXTRA_SPECS\n-\n-#define CPP_SPEC \"\\\n-%{mpa-risc-1-0:%(cpp_pa10)} \\\n-%{mpa-risc-1-1:%(cpp_pa11)} \\\n-%{msnake:%(cpp_pa11)} \\\n-%{mpa-risc-2-0:%(cpp_pa20)} \\\n-%{!mpa-risc-1-0:%{!mpa-risc-1-1:%{!mpa-risc-2-0:%{!msnake:%(cpp_cpu_default)}}}} \\\n-%{m64bit:%(cpp_64bit)} \\\n-%{!m64bit:%(cpp_64bit_default)} \\\n-%{!ansi: -D_HPUX_SOURCE -D_HIUX_SOURCE -D__STDC_EXT__ -D_INCLUDE_LONGLONG} \\\n-%{threads: -D_REENTRANT -D_DCE_THREADS}\"\n-\n-#define CPLUSPLUS_CPP_SPEC \"\\\n--D_HPUX_SOURCE -D_HIUX_SOURCE -D__STDC_EXT__ -D_INCLUDE_LONGLONG \\\n-%{mpa-risc-1-0:%(cpp_pa10)} \\\n-%{mpa-risc-1-1:%(cpp_pa11)} \\\n-%{msnake:%(cpp_pa11)} \\\n-%{mpa-risc-2-0:%(cpp_pa20)} \\\n-%{!mpa-risc-1-0:%{!mpa-risc-1-1:%{!mpa-risc-2-0:%{!msnake:%(cpp_cpu_default)}}}} \\\n-%{m64bit:%(cpp_64bit)} \\\n-%{!m64bit:%(cpp_64bit_default)} \\\n-%{threads: -D_REENTRANT -D_DCE_THREADS}\"\n-\n-/* Defines for a K&R CC */\n+/* An old set of OS defines for various BSD-like systems.  */\n+#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+\tbuiltin_define_std (\"REVARGV\");\t\t\t\t\\\n+\tbuiltin_define_std (\"hp800\");\t\t\t\t\\\n+\tbuiltin_define_std (\"hp9000\");\t\t\t\t\\\n+\tbuiltin_define_std (\"hp9k8\");\t\t\t\t\\\n+\tif (c_language != clk_cplusplus\t\t\t\t\\\n+\t    && !flag_iso)\t\t\t\t\t\\\n+\t  builtin_define (\"hppa\");\t\t\t\t\\\n+\tbuiltin_define_std (\"spectrum\");\t\t\t\\\n+\tbuiltin_define_std (\"unix\");\t\t\t\t\\\n+\tbuiltin_assert (\"system=bsd\");\t\t\t\t\\\n+\tbuiltin_assert (\"system=unix\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n #define CC1_SPEC \"%{pg:} %{p:}\"\n \n@@ -366,9 +376,6 @@ extern int target_flags;\n /* Machine dependent reorg pass.  */\n #define MACHINE_DEPENDENT_REORG(X) pa_reorg(X)\n \n-/* Names to predefine in the preprocessor for this target machine.  */\n-\n-#define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -Dunix -Dhp9000 -Dhp800 -Dspectrum -DREVARGV -Asystem=unix -Asystem=bsd -Acpu=hppa -Amachine=hppa\"\n \f\n /* target machine storage layout */\n "}, {"sha": "a5c1da2fa6269b8a0ef747e63c1538206f2d69af", "filename": "gcc/config/pa/pa32-linux.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa32-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa32-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa32-linux.h?ref=c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "patch": "@@ -21,6 +21,3 @@ Boston, MA 02111-1307, USA.  */\n /* Turn off various SOM crap we don't want.  */\n #undef TARGET_ELF32\n #define TARGET_ELF32 1\n-\n-#undef CPP_SPEC\n-#define CPP_SPEC \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{mhppa:-D__hppa__} %{posix:-D_POSIX_SOURCE} -D_PA_RISC1_1\""}, {"sha": "82a2b05005b9ebcee32e23eb7857a3fcab8df567", "filename": "gcc/config/pa/pa64-linux.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa64-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Fpa64-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-linux.h?ref=c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for PA_RISC with ELF format on 64-bit Linux\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -18,9 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#undef CPP_SPEC\n-#define CPP_SPEC \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{mhppa:-D__hppa__} %{posix:-D_POSIX_SOURCE} -D_PA_RISC2_0 -D__LP64__\"\n-\n #if 0 /* needs some work :-( */\n /* If defined, this macro specifies a table of register pairs used to\n    eliminate unneeded registers that point into the stack frame.  */"}, {"sha": "b03b5c802c3407ac42d5293476de9e59a2c5b247", "filename": "gcc/config/pa/rtems.h", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fconfig%2Fpa%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Frtems.h?ref=c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "patch": "@@ -21,6 +21,17 @@ Boston, MA 02111-1307, USA.  */\n \n /* Specify predefined symbols in preprocessor.  */\n \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dhppa -DPWB -Acpu=hppa -Amachine=hppa \\\n-   -D__rtems__ -Asystem=rtems\"\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+\tif (c_language != clk_cplusplus\t\t\\\n+\t    && !flag_iso)\t\t\t\\\n+\t  {\t\t\t\t\t\\\n+\t    builtin_define (\"hppa\");\t\t\\\n+\t    builtin_define_std (\"PWB\");\t\t\\\n+\t  }\t\t\t\t\t\\\n+\tbuiltin_define (\"__rtems__\");\t\t\\\n+\tbuiltin_assert (\"system=rtems\");\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)"}, {"sha": "f1ddd5d68c4b35baa9696f42cd3dc526f55a7c88", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "patch": "@@ -508,7 +508,7 @@ in the following sections.\n -mno-portable-runtime  -mno-soft-float @gol\n -mno-space-regs  -msoft-float  -mpa-risc-1-0 @gol\n -mpa-risc-1-1  -mpa-risc-2-0  -mportable-runtime @gol\n--mschedule=@var{cpu-type}  -mspace-regs}\n+-mschedule=@var{cpu-type}  -mspace-regs -msio -mwsio}\n \n @emph{Intel 960 Options}\n @gccoptlist{\n@@ -7901,9 +7901,9 @@ proper scheduling option for your machine.  The default scheduling is\n \n @item -mlinker-opt\n @opindex mlinker-opt\n-Enable the optimization pass in the HPUX linker.  Note this makes symbolic\n-debugging impossible.  It also triggers a bug in the HPUX 8 and HPUX 9 linkers\n-in which they give bogus error messages when linking some programs.\n+Enable the optimization pass in the HP-UX linker.  Note this makes symbolic\n+debugging impossible.  It also triggers a bug in the HP-UX 8 and HP-UX 9\n+linkers in which they give bogus error messages when linking some programs.\n \n @item -msoft-float\n @opindex msoft-float\n@@ -7920,6 +7920,13 @@ therefore, it is only useful if you compile @emph{all} of a program with\n this option.  In particular, you need to compile @file{libgcc.a}, the\n library that comes with GCC, with @option{-msoft-float} in order for\n this to work.\n+\n+@item -msio\n+@opindex msio\n+Generate the predefine, @code{_SIO}, for server IO.  The default is\n+@option{-mwsio}.  This generates the predefines, @code{__hp9000s700},\n+@code{__hp9000s700__} and @code{_WSIO}, for workstation IO.  These\n+options are available under HP-UX and HI-UX.\n @end table\n \n @node Intel 960 Options\n@@ -9125,7 +9132,7 @@ These are the @samp{-m} options defined for the Intel IA-64 architecture.\n @table @gcctabopt\n @item -mbig-endian\n @opindex mbig-endian\n-Generate code for a big endian target.  This is the default for HPUX@.\n+Generate code for a big endian target.  This is the default for HP-UX@.\n \n @item -mlittle-endian\n @opindex mlittle-endian"}, {"sha": "4cbaeb70542b13ce08c7ad71a63562412c028b6e", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c219e1da0aa012d25860b2fbe651d5e6c5b1f74d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c219e1da0aa012d25860b2fbe651d5e6c5b1f74d", "patch": "@@ -615,7 +615,9 @@ or @code{clk_objective_c}.  Note that if we are preprocessing\n assembler, this variable will be @code{clk_c} but the function-like\n macro @code{preprocessing_asm_p()} will return true, so you might want\n to check for that first.  If you need to check for strict ANSI, the\n-variable @code{flag_iso} can be used.\n+variable @code{flag_iso} can be used.  The function-like macro\n+@code{preprocessing_trad_p()} can be used to check for traditional\n+preprocessing.\n \n With @code{TARGET_OS_CPP_BUILTINS} this macro obsoletes the\n @code{CPP_PREDEFINES} target macro."}]}