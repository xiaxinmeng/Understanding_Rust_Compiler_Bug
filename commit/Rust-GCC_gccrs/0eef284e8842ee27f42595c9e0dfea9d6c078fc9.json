{"sha": "0eef284e8842ee27f42595c9e0dfea9d6c078fc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVlZjI4NGU4ODQyZWUyN2Y0MjU5NWM5ZTBkZmVhOWQ2YzA3OGZjOQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2015-03-03T00:59:56Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2015-03-03T00:59:56Z"}, "message": "PR 65138/target\n\n2015-03-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR 65138/target\n\t* config/rs6000/rs6000-cpus.def (powerpc64le): Add new generic\n\tprocessor type for 64-bit little endian PowerPC.\n\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): If\n\t-mdebug=reg, print TARGET_DEFAULT.  Fix logic to use\n\tTARGET_DEFAULT if there is no default cpu.  Fix -mdebug=reg\n\tprinting built-in mask so it does not pass NULL pointers.\n\n\t* doc/invoke.texi (IBM RS/6000 and PowerPC options): Document\n\t-mcpu=powerpc64le.\n\nFrom-SVN: r221132", "tree": {"sha": "1d92bd9c4ab9004fc0eb4467dd25b32ebaa2f193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d92bd9c4ab9004fc0eb4467dd25b32ebaa2f193"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0eef284e8842ee27f42595c9e0dfea9d6c078fc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eef284e8842ee27f42595c9e0dfea9d6c078fc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eef284e8842ee27f42595c9e0dfea9d6c078fc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eef284e8842ee27f42595c9e0dfea9d6c078fc9/comments", "author": null, "committer": null, "parents": [{"sha": "a0d620699bbbcb07c80886cfd41c5a8912912fdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d620699bbbcb07c80886cfd41c5a8912912fdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0d620699bbbcb07c80886cfd41c5a8912912fdb"}], "stats": {"total": 67, "additions": 46, "deletions": 21}, "files": [{"sha": "64d86ccdbc6e21be0caa50d67065eed333d9926b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eef284e8842ee27f42595c9e0dfea9d6c078fc9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eef284e8842ee27f42595c9e0dfea9d6c078fc9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0eef284e8842ee27f42595c9e0dfea9d6c078fc9", "patch": "@@ -1,3 +1,17 @@\n+2015-03-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR 65138/target\n+\t* config/rs6000/rs6000-cpus.def (powerpc64le): Add new generic\n+\tprocessor type for 64-bit little endian PowerPC.\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): If\n+\t-mdebug=reg, print TARGET_DEFAULT.  Fix logic to use\n+\tTARGET_DEFAULT if there is no default cpu.  Fix -mdebug=reg\n+\tprinting built-in mask so it does not pass NULL pointers.\n+\n+\t* doc/invoke.texi (IBM RS/6000 and PowerPC options): Document\n+\t-mcpu=powerpc64le.\n+\n 2015-03-02  Steve Ellcey  <sellcey@imgtec.com>\n \n \tPR target/58158\n@@ -13,7 +27,7 @@\n \n \t* doc/invoke.texi (Options for Code Generation Conventions):\n \tFix URL of DSO paper.\n-\t\t\n+\n 2015-03-02  Jan Hubicka   <hubicka@ucw.cz>\n \n \tPR ipa/65130"}, {"sha": "9fd565286f2517b8cdef923b95a9c79941fa6563", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eef284e8842ee27f42595c9e0dfea9d6c078fc9/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eef284e8842ee27f42595c9e0dfea9d6c078fc9/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=0eef284e8842ee27f42595c9e0dfea9d6c078fc9", "patch": "@@ -193,4 +193,5 @@ RS6000_CPU (\"power7\", PROCESSOR_POWER7,   /* Don't add MASK_ISEL by default */\n RS6000_CPU (\"power8\", PROCESSOR_POWER8, MASK_POWERPC64 | ISA_2_7_MASKS_SERVER)\n RS6000_CPU (\"powerpc\", PROCESSOR_POWERPC, 0)\n RS6000_CPU (\"powerpc64\", PROCESSOR_POWERPC64, MASK_PPC_GFXOPT | MASK_POWERPC64)\n+RS6000_CPU (\"powerpc64le\", PROCESSOR_POWER8, MASK_POWERPC64 | ISA_2_7_MASKS_SERVER)\n RS6000_CPU (\"rs64\", PROCESSOR_RS64A, MASK_PPC_GFXOPT | MASK_POWERPC64)"}, {"sha": "3171eef23232baf546aaecdf220ae2771cf944fd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eef284e8842ee27f42595c9e0dfea9d6c078fc9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eef284e8842ee27f42595c9e0dfea9d6c078fc9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0eef284e8842ee27f42595c9e0dfea9d6c078fc9", "patch": "@@ -3211,6 +3211,10 @@ rs6000_option_override_internal (bool global_init_p)\n     = ((global_init_p || target_option_default_node == NULL)\n        ? NULL : TREE_TARGET_OPTION (target_option_default_node));\n \n+  /* Print defaults.  */\n+  if ((TARGET_DEBUG_REG || TARGET_DEBUG_TARGET) && global_init_p)\n+    rs6000_print_isa_options (stderr, 0, \"TARGET_DEFAULT\", TARGET_DEFAULT);\n+\n   /* Remember the explicit arguments.  */\n   if (global_init_p)\n     rs6000_isa_flags_explicit = global_options_set.x_rs6000_isa_flags;\n@@ -3287,7 +3291,13 @@ rs6000_option_override_internal (bool global_init_p)\n     }\n   else\n     {\n-      const char *default_cpu = (TARGET_POWERPC64 ? \"powerpc64\" : \"powerpc\");\n+      /* PowerPC 64-bit LE requires at least ISA 2.07.  */\n+      const char *default_cpu = ((!TARGET_POWERPC64)\n+\t\t\t\t ? \"powerpc\"\n+\t\t\t\t : ((BYTES_BIG_ENDIAN)\n+\t\t\t\t    ? \"powerpc64\"\n+\t\t\t\t    : \"powerpc64le\"));\n+\n       rs6000_cpu_index = cpu_index = rs6000_cpu_name_lookup (default_cpu);\n       have_cpu = false;\n     }\n@@ -3306,15 +3316,18 @@ rs6000_option_override_internal (bool global_init_p)\n \t\t\t   & set_masks);\n     }\n   else\n-    rs6000_isa_flags |= (processor_target_table[cpu_index].target_enable\n-\t\t\t & ~rs6000_isa_flags_explicit);\n+    {\n+      /* If no -mcpu=<xxx>, inherit any default options that were cleared via\n+\t POWERPC_MASKS.  Originally, TARGET_DEFAULT was used to initialize\n+\t target_flags via the TARGET_DEFAULT_TARGET_FLAGS hook.  When we switched\n+\t to using rs6000_isa_flags, we need to do the initialization here.\n \n-  /* If no -mcpu=<xxx>, inherit any default options that were cleared via\n-     POWERPC_MASKS.  Originally, TARGET_DEFAULT was used to initialize\n-     target_flags via the TARGET_DEFAULT_TARGET_FLAGS hook.  When we switched\n-     to using rs6000_isa_flags, we need to do the initialization here.  */\n-  if (!have_cpu)\n-    rs6000_isa_flags |= (TARGET_DEFAULT & ~rs6000_isa_flags_explicit);\n+\t If there is a TARGET_DEFAULT, use that.  Otherwise fall back to using\n+\t -mcpu=powerpc, -mcpu=powerpc64, or -mcpu=powerpc64le defaults.  */\n+      HOST_WIDE_INT flags = ((TARGET_DEFAULT) ? TARGET_DEFAULT\n+\t\t\t     : processor_target_table[cpu_index].target_enable);\n+      rs6000_isa_flags |= (flags & ~rs6000_isa_flags_explicit);\n+    }\n \n   if (rs6000_tune_index >= 0)\n     tune_index = rs6000_tune_index;\n@@ -4214,12 +4227,8 @@ rs6000_option_override_internal (bool global_init_p)\n      target_flags.  */\n   rs6000_builtin_mask = rs6000_builtin_mask_calculate ();\n   if (TARGET_DEBUG_BUILTIN || TARGET_DEBUG_TARGET)\n-    {\n-      fprintf (stderr,\n-\t       \"new builtin mask = \" HOST_WIDE_INT_PRINT_HEX \", \",\n-\t       rs6000_builtin_mask);\n-      rs6000_print_builtin_options (stderr, 0, NULL, rs6000_builtin_mask);\n-    }\n+    rs6000_print_builtin_options (stderr, 0, \"builtin mask\",\n+\t\t\t\t  rs6000_builtin_mask);\n \n   /* Initialize all of the registers.  */\n   rs6000_init_hard_regno_mode_ok (global_init_p);"}, {"sha": "006a852af190fd294a30dfdc5d8e735f9ff4f1ec", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eef284e8842ee27f42595c9e0dfea9d6c078fc9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eef284e8842ee27f42595c9e0dfea9d6c078fc9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0eef284e8842ee27f42595c9e0dfea9d6c078fc9", "patch": "@@ -18628,12 +18628,13 @@ Supported values for @var{cpu_type} are @samp{401}, @samp{403},\n @samp{e6500}, @samp{ec603e}, @samp{G3}, @samp{G4}, @samp{G5},\n @samp{titan}, @samp{power3}, @samp{power4}, @samp{power5}, @samp{power5+},\n @samp{power6}, @samp{power6x}, @samp{power7}, @samp{power8}, @samp{powerpc},\n-@samp{powerpc64}, and @samp{rs64}.\n+@samp{powerpc64}, @samp{powerpc64le}, and @samp{rs64}.\n \n-@option{-mcpu=powerpc}, and @option{-mcpu=powerpc64} specify pure 32-bit\n-PowerPC and 64-bit PowerPC architecture machine\n-types, with an appropriate, generic processor model assumed for\n-scheduling purposes.\n+@option{-mcpu=powerpc}, @option{-mcpu=powerpc64}, and\n+@option{-mcpu=powerpc64le} specify pure 32-bit PowerPC (either\n+endian), 64-bit big endian PowerPC and 64-bit little endian PowerPC\n+architecture machine types, with an appropriate, generic processor\n+model assumed for scheduling purposes.\n \n The other options specify a specific processor.  Code generated under\n those options runs best on that processor, and may not run at all on"}]}