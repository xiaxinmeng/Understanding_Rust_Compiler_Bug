{"sha": "6412c58c781f64b60e7353e762cd5cec62a863e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQxMmM1OGM3ODFmNjRiNjBlNzM1M2U3NjJjZDVjZWM2MmE4NjNlNw==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-07-14T14:20:45Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-07-14T14:20:45Z"}, "message": "AArch32: Add support for sign differing dot-product usdot for NEON.\n\nThis adds optabs implementing usdot_prod.\n\nThe following testcase:\n\n#define N 480\n#define SIGNEDNESS_1 unsigned\n#define SIGNEDNESS_2 signed\n#define SIGNEDNESS_3 signed\n#define SIGNEDNESS_4 unsigned\n\nSIGNEDNESS_1 int __attribute__ ((noipa))\nf (SIGNEDNESS_1 int res, SIGNEDNESS_3 char *restrict a,\n   SIGNEDNESS_4 char *restrict b)\n{\n  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n    {\n      int av = a[i];\n      int bv = b[i];\n      SIGNEDNESS_2 short mult = av * bv;\n      res += mult;\n    }\n  return res;\n}\n\nGenerates\n\nf:\n        vmov.i32        q8, #0  @ v4si\n        add     r3, r2, #480\n.L2:\n        vld1.8  {q10}, [r2]!\n        vld1.8  {q9}, [r1]!\n        vusdot.s8       q8, q9, q10\n        cmp     r3, r2\n        bne     .L2\n        vadd.i32        d16, d16, d17\n        vpadd.i32       d16, d16, d16\n        vmov.32 r3, d16[0]\n        add     r0, r0, r3\n        bx      lr\n\ninstead of\n\nf:\n        vmov.i32        q8, #0  @ v4si\n        add     r3, r2, #480\n.L2:\n        vld1.8  {q9}, [r2]!\n        vld1.8  {q11}, [r1]!\n        cmp     r3, r2\n        vmull.s8 q10, d18, d22\n        vmull.s8 q9, d19, d23\n        vaddw.s16       q8, q8, d20\n        vaddw.s16       q8, q8, d21\n        vaddw.s16       q8, q8, d18\n        vaddw.s16       q8, q8, d19\n        bne     .L2\n        vadd.i32        d16, d16, d17\n        vpadd.i32       d16, d16, d16\n        vmov.32 r3, d16[0]\n        add     r0, r0, r3\n        bx      lr\n\nFor NEON.  I couldn't figure out if the MVE instruction vmlaldav.s16 could be\nused to emulate this.  Because it would require additional widening to work I\nleft MVE out of this patch set but perhaps someone should take a look.\n\ngcc/ChangeLog:\n\n\t* config/arm/neon.md (usdot_prod<vsi2qi>): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/simd/vusdot-autovec.c: New test.", "tree": {"sha": "99440fc19492cfd9556e536ce27f5d2e4a332332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99440fc19492cfd9556e536ce27f5d2e4a332332"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6412c58c781f64b60e7353e762cd5cec62a863e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6412c58c781f64b60e7353e762cd5cec62a863e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6412c58c781f64b60e7353e762cd5cec62a863e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6412c58c781f64b60e7353e762cd5cec62a863e7/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "752045ed1eea0eddc48923df78999dab7f2827ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/752045ed1eea0eddc48923df78999dab7f2827ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/752045ed1eea0eddc48923df78999dab7f2827ba"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "8b0a396947cc8e7345f178b926128d7224fb218a", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6412c58c781f64b60e7353e762cd5cec62a863e7/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6412c58c781f64b60e7353e762cd5cec62a863e7/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=6412c58c781f64b60e7353e762cd5cec62a863e7", "patch": "@@ -2969,6 +2969,18 @@\n   DONE;\n })\n \n+;; Auto-vectorizer pattern for usdot\n+(define_expand \"usdot_prod<vsi2qi>\"\n+  [(set (match_operand:VCVTI 0 \"register_operand\")\n+\t(plus:VCVTI (unspec:VCVTI [(match_operand:<VSI2QI> 1\n+\t\t\t\t\t\t\t\"register_operand\")\n+\t\t\t\t   (match_operand:<VSI2QI> 2\n+\t\t\t\t\t\t\t\"register_operand\")]\n+\t\t     UNSPEC_DOT_US)\n+\t\t    (match_operand:VCVTI 3 \"register_operand\")))]\n+  \"TARGET_I8MM\"\n+)\n+\n (define_expand \"neon_copysignf<mode>\"\n   [(match_operand:VCVTF 0 \"register_operand\")\n    (match_operand:VCVTF 1 \"register_operand\")"}, {"sha": "7cc56f68817d77d6950df0ab372d6fbaad6b3813", "filename": "gcc/testsuite/gcc.target/arm/simd/vusdot-autovec.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6412c58c781f64b60e7353e762cd5cec62a863e7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvusdot-autovec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6412c58c781f64b60e7353e762cd5cec62a863e7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvusdot-autovec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvusdot-autovec.c?ref=6412c58c781f64b60e7353e762cd5cec62a863e7", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=armv8.2-a+i8mm\" } */\n+\n+#define N 480\n+#define SIGNEDNESS_1 unsigned\n+#define SIGNEDNESS_2 signed\n+#define SIGNEDNESS_3 signed\n+#define SIGNEDNESS_4 unsigned\n+\n+SIGNEDNESS_1 int __attribute__ ((noipa))\n+f (SIGNEDNESS_1 int res, SIGNEDNESS_3 char *restrict a,\n+   SIGNEDNESS_4 char *restrict b)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    {\n+      int av = a[i];\n+      int bv = b[i];\n+      SIGNEDNESS_2 short mult = av * bv;\n+      res += mult;\n+    }\n+  return res;\n+}\n+\n+SIGNEDNESS_1 int __attribute__ ((noipa))\n+g (SIGNEDNESS_1 int res, SIGNEDNESS_3 char *restrict b,\n+   SIGNEDNESS_4 char *restrict a)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < N; ++i)\n+    {\n+      int av = a[i];\n+      int bv = b[i];\n+      SIGNEDNESS_2 short mult = av * bv;\n+      res += mult;\n+    }\n+  return res;\n+}\n+\n+/* { dg-final { scan-assembler-times {vusdot.s8} 2 { target { arm-*-*-gnueabihf } } } } */"}]}