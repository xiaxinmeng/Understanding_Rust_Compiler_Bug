{"sha": "ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "node_id": "C_kwDOANBUbNoAKGFiMzlmYThjOGZkNzJjYzc3ZjEzZWNlM2Q2MTI5NzYwZWRmY2ZiOGE", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-19T06:07:49Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-27T12:44:37Z"}, "message": "RISC-V: Add vlm/vsm C/C++ API intrinsics support\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vector-builtins-bases.cc (BASE): Add vlm/vsm support.\n\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n\t* config/riscv/riscv-vector-builtins-functions.def (vlm): New define.\n\t(vsm): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.cc (struct loadstore_def): Add vlm/vsm support.\n\t* config/riscv/riscv-vector-builtins-types.def (DEF_RVV_B_OPS): Ditto.\n\t(vbool64_t): Ditto.\n\t(vbool32_t): Ditto.\n\t(vbool16_t): Ditto.\n\t(vbool8_t): Ditto.\n\t(vbool4_t): Ditto.\n\t(vbool2_t): Ditto.\n\t(vbool1_t): Ditto.\n\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_B_OPS): Ditto.\n\t(rvv_arg_type_info::get_tree_type): Ditto.\n\t(function_expander::use_contiguous_load_insn): Ditto.\n\t* config/riscv/vector.md (@pred_store<mode>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vsm-1.C: New test.\n\t* g++.target/riscv/rvv/rvv.exp: New test.\n\t* gcc.target/riscv/rvv/base/vlm_vsm-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vlm_vsm-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vlm_vsm-3.c: New test.", "tree": {"sha": "352f93c7e41cb479f1ca79a356392475612c26f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/352f93c7e41cb479f1ca79a356392475612c26f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d324d56221d68bd965ac5fc2c3e0eba48076bf60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d324d56221d68bd965ac5fc2c3e0eba48076bf60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d324d56221d68bd965ac5fc2c3e0eba48076bf60"}], "stats": {"total": 403, "additions": 395, "deletions": 8}, "files": [{"sha": "cf6a060ddfb178eea4f995284ae360db1a630abe", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "patch": "@@ -84,7 +84,7 @@ class vsetvl : public function_base\n   }\n };\n \n-/* Implements vle.v/vse.v codegen.  */\n+/* Implements vle.v/vse.v/vlm.v/vsm.v codegen.  */\n template <bool STORE_P>\n class loadstore : public function_base\n {\n@@ -116,6 +116,8 @@ static CONSTEXPR const vsetvl<false> vsetvl_obj;\n static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n static CONSTEXPR const loadstore<false> vle_obj;\n static CONSTEXPR const loadstore<true> vse_obj;\n+static CONSTEXPR const loadstore<false> vlm_obj;\n+static CONSTEXPR const loadstore<true> vsm_obj;\n \n /* Declare the function base NAME, pointing it to an instance\n    of class <NAME>_obj.  */\n@@ -126,5 +128,7 @@ BASE (vsetvl)\n BASE (vsetvlmax)\n BASE (vle)\n BASE (vse)\n+BASE (vlm)\n+BASE (vsm)\n \n } // end namespace riscv_vector"}, {"sha": "7af462b95302787483d4e14b57a25fbd526b3379", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "patch": "@@ -28,6 +28,8 @@ extern const function_base *const vsetvl;\n extern const function_base *const vsetvlmax;\n extern const function_base *const vle;\n extern const function_base *const vse;\n+extern const function_base *const vlm;\n+extern const function_base *const vsm;\n }\n \n } // end namespace riscv_vector"}, {"sha": "8bcaf2e32677b0cad2b209d5137d052e1920efec", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "patch": "@@ -42,5 +42,7 @@ DEF_RVV_FUNCTION (vsetvlmax, vsetvlmax, none_preds, i_none_size_void_ops)\n /* 7. Vector Loads and Stores. */\n DEF_RVV_FUNCTION (vle, loadstore, full_preds, all_v_scalar_const_ptr_ops)\n DEF_RVV_FUNCTION (vse, loadstore, none_m_preds, all_v_scalar_ptr_ops)\n+DEF_RVV_FUNCTION (vlm, loadstore, none_preds, b_v_scalar_const_ptr_ops)\n+DEF_RVV_FUNCTION (vsm, loadstore, none_preds, b_v_scalar_ptr_ops)\n \n #undef DEF_RVV_FUNCTION"}, {"sha": "896704b827f4fee59d34eac1bd36e119f0986488", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc?ref=ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "patch": "@@ -116,7 +116,8 @@ struct loadstore_def : public build_base\n     machine_mode mode = TYPE_MODE (type);\n     int sew = GET_MODE_BITSIZE (GET_MODE_INNER (mode));\n     /* vop --> vop<sew>.  */\n-    b.append_sew (sew);\n+    if (GET_MODE_CLASS (mode) != MODE_VECTOR_BOOL)\n+      b.append_sew (sew);\n \n     /* vop<sew>_v --> vop<sew>_v_<type>.  */\n     if (!overloaded_p)"}, {"sha": "a95fad031bedc0dee6edd5ac4bbcb27556f734cc", "filename": "gcc/config/riscv/riscv-vector-builtins-types.def", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-types.def?ref=ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "patch": "@@ -36,6 +36,12 @@ along with GCC; see the file COPYING3. If not see\n #define DEF_RVV_F_OPS(TYPE, REQUIRE)\n #endif\n \n+/* Use \"DEF_RVV_B_OPS\" macro include all bool value which will be\n+   iterated and registered as intrinsic functions.  */\n+#ifndef DEF_RVV_B_OPS\n+#define DEF_RVV_B_OPS(TYPE, REQUIRE)\n+#endif\n+\n DEF_RVV_I_OPS (vint8mf8_t, RVV_REQUIRE_ZVE64)\n DEF_RVV_I_OPS (vint8mf4_t, 0)\n DEF_RVV_I_OPS (vint8mf2_t, 0)\n@@ -92,6 +98,15 @@ DEF_RVV_F_OPS (vfloat64m2_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_F_OPS (vfloat64m4_t, RVV_REQUIRE_ELEN_FP_64)\n DEF_RVV_F_OPS (vfloat64m8_t, RVV_REQUIRE_ELEN_FP_64)\n \n+DEF_RVV_B_OPS (vbool64_t, RVV_REQUIRE_ZVE64)\n+DEF_RVV_B_OPS (vbool32_t, 0)\n+DEF_RVV_B_OPS (vbool16_t, 0)\n+DEF_RVV_B_OPS (vbool8_t, 0)\n+DEF_RVV_B_OPS (vbool4_t, 0)\n+DEF_RVV_B_OPS (vbool2_t, 0)\n+DEF_RVV_B_OPS (vbool1_t, 0)\n+\n #undef DEF_RVV_I_OPS\n #undef DEF_RVV_U_OPS\n #undef DEF_RVV_F_OPS\n+#undef DEF_RVV_B_OPS"}, {"sha": "9023930560ceb36de7e0e7c90fcf42b65c6260ed", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "patch": "@@ -141,6 +141,12 @@ static const rvv_type_info all_ops[] = {\n #include \"riscv-vector-builtins-types.def\"\n   {NUM_VECTOR_TYPES, 0}};\n \n+/* A list of all bool will be registered for intrinsic functions.  */\n+static const rvv_type_info b_ops[] = {\n+#define DEF_RVV_B_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n static CONSTEXPR const rvv_arg_type_info rvv_arg_type_info_end\n   = rvv_arg_type_info (NUM_BASE_TYPES);\n \n@@ -205,6 +211,22 @@ static CONSTEXPR const rvv_op_info all_v_scalar_ptr_ops\n      rvv_arg_type_info (RVV_BASE_void), /* Return type */\n      scalar_ptr_args /* Args */};\n \n+/* A static operand information for vector_type func (const scalar_type *)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info b_v_scalar_const_ptr_ops\n+  = {b_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_v,\t\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     scalar_const_ptr_args /* Args */};\n+\n+/* A static operand information for void func (scalar_type *, vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info b_v_scalar_ptr_ops\n+  = {b_ops,\t\t\t\t/* Types */\n+     OP_TYPE_v,\t\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_void), /* Return type */\n+     scalar_ptr_args /* Args */};\n+\n /* A list of all RVV intrinsic functions.  */\n static function_group_info function_groups[] = {\n #define DEF_RVV_FUNCTION(NAME, SHAPE, PREDS, OPS_INFO)                         \\\n@@ -463,9 +485,19 @@ rvv_arg_type_info::get_tree_type (vector_type_index type_idx) const\n     case RVV_BASE_vector_ptr:\n       return builtin_types[type_idx].vector_ptr;\n     case RVV_BASE_scalar_ptr:\n-      return builtin_types[type_idx].scalar_ptr;\n+      /* According to the latest rvv-intrinsic-doc, it defines vsm.v intrinsic:\n+\t __riscv_vsm (uint8_t *base, vbool1_t value, size_t vl).  */\n+      if (type_idx >= VECTOR_TYPE_vbool64_t && type_idx <= VECTOR_TYPE_vbool1_t)\n+\treturn builtin_types[VECTOR_TYPE_vuint8mf8_t].scalar_ptr;\n+      else\n+\treturn builtin_types[type_idx].scalar_ptr;\n     case RVV_BASE_scalar_const_ptr:\n-      return builtin_types[type_idx].scalar_const_ptr;\n+      /* According to the latest rvv-intrinsic-doc, it defines vlm.v intrinsic:\n+\t __riscv_vlm_v_b1 (const uint8_t *base, size_t vl).  */\n+      if (type_idx >= VECTOR_TYPE_vbool64_t && type_idx <= VECTOR_TYPE_vbool1_t)\n+\treturn builtin_types[VECTOR_TYPE_vuint8mf8_t].scalar_const_ptr;\n+      else\n+\treturn builtin_types[type_idx].scalar_const_ptr;\n     case RVV_BASE_void:\n       return void_type_node;\n     case RVV_BASE_size:\n@@ -884,8 +916,11 @@ function_expander::use_contiguous_load_insn (insn_code icode)\n   for (int argno = arg_offset; argno < call_expr_nargs (exp); argno++)\n     add_input_operand (argno);\n \n-  add_input_operand (Pmode, get_tail_policy_for_pred (pred));\n-  add_input_operand (Pmode, get_mask_policy_for_pred (pred));\n+  if (GET_MODE_CLASS (mode) != MODE_VECTOR_BOOL)\n+    {\n+      add_input_operand (Pmode, get_tail_policy_for_pred (pred));\n+      add_input_operand (Pmode, get_mask_policy_for_pred (pred));\n+    }\n   add_input_operand (Pmode, get_avl_type_rtx (avl_type::NONVLMAX));\n \n   return generate_insn (icode);"}, {"sha": "8c60eb20d722b69aee17b0dcda65225ad44e4855", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "patch": "@@ -198,7 +198,7 @@\n \n ;; The index of operand[] to get the merge op.\n (define_attr \"merge_op_idx\" \"\"\n-\t(cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vldm,vstm,vlds,vmalu\")\n+\t(cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vldm,vlds,vmalu\")\n \t (const_int 2)]\n \t(const_int INVALID_ATTRIBUTE)))\n \n@@ -715,7 +715,7 @@\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operand:VB 3 \"vector_move_operand\"      \"  m,  vr,  vr, Wc0, Wc1\")\n-\t  (match_operand:VB 2 \"vector_merge_operand\"     \" vu, vu0,  vu,  vu,  vu\")))]\n+\t  (match_operand:VB 2 \"vector_merge_operand\"     \" vu,  vu,  vu,  vu,  vu\")))]\n   \"TARGET_VECTOR\"\n   \"@\n    vlm.v\\t%0,%3\n@@ -730,6 +730,25 @@\n   [(set_attr \"type\" \"vldm,vstm,vimov,vmalu,vmalu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; Dedicated pattern for vsm.v instruction since we can't reuse pred_mov pattern to include\n+;; memory operand as input which will produce inferior codegen.\n+(define_insn \"@pred_store<mode>\"\n+  [(set (match_operand:VB 0 \"memory_operand\"            \"+m\")\n+\t(if_then_else:VB\n+\t  (unspec:VB\n+\t    [(match_operand:VB 1 \"vector_mask_operand\" \"Wc1\")\n+\t     (match_operand 3 \"vector_length_operand\"  \" rK\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (match_operand:VB 2 \"register_operand\"       \" vr\")\n+\t  (match_dup 0)))]\n+  \"TARGET_VECTOR\"\n+  \"vsm.v\\t%2,%0\"\n+  [(set_attr \"type\" \"vstm\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set (attr \"avl_type\") (symbol_ref \"riscv_vector::NONVLMAX\"))\n+   (set_attr \"vl_op_idx\" \"3\")])\n+\n ;; -------------------------------------------------------------------------------\n ;; ---- Predicated Broadcast\n ;; -------------------------------------------------------------------------------"}, {"sha": "60656cc353f4e1f79d9e5b6f08aad266791b2ebf", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsm-1.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsm-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsm-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsm-1.C?ref=ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void test___riscv_vsm_v_b1_vl(uint8_t *base, vbool1_t value, size_t vl) {\n+  __riscv_vsm(base, value, vl);\n+}\n+\n+void test___riscv_vsm_v_b2_vl(uint8_t *base, vbool2_t value, size_t vl) {\n+  __riscv_vsm(base, value, vl);\n+}\n+\n+void test___riscv_vsm_v_b4_vl(uint8_t *base, vbool4_t value, size_t vl) {\n+  __riscv_vsm(base, value, vl);\n+}\n+\n+void test___riscv_vsm_v_b8_vl(uint8_t *base, vbool8_t value, size_t vl) {\n+  __riscv_vsm(base, value, vl);\n+}\n+\n+void test___riscv_vsm_v_b16_vl(uint8_t *base, vbool16_t value, size_t vl) {\n+  __riscv_vsm(base, value, vl);\n+}\n+\n+void test___riscv_vsm_v_b32_vl(uint8_t *base, vbool32_t value, size_t vl) {\n+  __riscv_vsm(base, value, vl);\n+}\n+\n+void test___riscv_vsm_v_b64_vl(uint8_t *base, vbool64_t value, size_t vl) {\n+  __riscv_vsm(base, value, vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */"}, {"sha": "249530580d701625dec1f40b6a314eab2a4df18c", "filename": "gcc/testsuite/g++.target/riscv/rvv/rvv.exp", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Frvv.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Frvv.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Frvv.exp?ref=ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "patch": "@@ -0,0 +1,44 @@\n+# Copyright (C) 2023-2023 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Test the front-end for C++.\n+# We don't need to test back-end code-gen in RV32 system for C++\n+# Because it is already tested in C.\n+# Exit immediately if this isn't a RISC-V target.\n+if ![istarget riscv*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+\n+set gcc_march \"rv64gcv_zfh\"\n+if [istarget riscv32-*-*] then {\n+  set gcc_march \"rv32gcv_zfh\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+set CFLAGS \"-march=$gcc_march -O3\"\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/base/*.C]] \\\n+\t\"\" $CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "f2f4cc97e1bab757bf7e6d1b82e5476e1a16cd69", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlm_vsm-1.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlm_vsm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlm_vsm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlm_vsm-1.c?ref=ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool1_t test___riscv_vlm_v_b1_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b1(base, vl);\n+}\n+\n+void test___riscv_vsm_v_b1_vl(uint8_t *base, vbool1_t value, size_t vl) {\n+  __riscv_vsm_v_b1(base, value, vl);\n+}\n+\n+vbool2_t test___riscv_vlm_v_b2_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b2(base, vl);\n+}\n+\n+void test___riscv_vsm_v_b2_vl(uint8_t *base, vbool2_t value, size_t vl) {\n+  __riscv_vsm_v_b2(base, value, vl);\n+}\n+\n+vbool4_t test___riscv_vlm_v_b4_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b4(base, vl);\n+}\n+\n+void test___riscv_vsm_v_b4_vl(uint8_t *base, vbool4_t value, size_t vl) {\n+  __riscv_vsm_v_b4(base, value, vl);\n+}\n+\n+vbool8_t test___riscv_vlm_v_b8_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b8(base, vl);\n+}\n+\n+void test___riscv_vsm_v_b8_vl(uint8_t *base, vbool8_t value, size_t vl) {\n+  __riscv_vsm_v_b8(base, value, vl);\n+}\n+\n+vbool16_t test___riscv_vlm_v_b16_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b16(base, vl);\n+}\n+\n+void test___riscv_vsm_v_b16_vl(uint8_t *base, vbool16_t value, size_t vl) {\n+  __riscv_vsm_v_b16(base, value, vl);\n+}\n+\n+vbool32_t test___riscv_vlm_v_b32_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b32(base, vl);\n+}\n+\n+void test___riscv_vsm_v_b32_vl(uint8_t *base, vbool32_t value, size_t vl) {\n+  __riscv_vsm_v_b32(base, value, vl);\n+}\n+\n+vbool64_t test___riscv_vlm_v_b64_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b64(base, vl);\n+}\n+\n+void test___riscv_vsm_v_b64_vl(uint8_t *base, vbool64_t value, size_t vl) {\n+  __riscv_vsm_v_b64(base, value, vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */"}, {"sha": "66e687fd8bfd3c047068d8c93758f98c2ff43b8e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlm_vsm-2.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlm_vsm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlm_vsm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlm_vsm-2.c?ref=ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool1_t test___riscv_vlm_v_b1_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b1(base, 31);\n+}\n+\n+void test___riscv_vsm_v_b1_vl(uint8_t *base, vbool1_t value, size_t vl) {\n+  __riscv_vsm_v_b1(base, value, 31);\n+}\n+\n+vbool2_t test___riscv_vlm_v_b2_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b2(base, 31);\n+}\n+\n+void test___riscv_vsm_v_b2_vl(uint8_t *base, vbool2_t value, size_t vl) {\n+  __riscv_vsm_v_b2(base, value, 31);\n+}\n+\n+vbool4_t test___riscv_vlm_v_b4_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b4(base, 31);\n+}\n+\n+void test___riscv_vsm_v_b4_vl(uint8_t *base, vbool4_t value, size_t vl) {\n+  __riscv_vsm_v_b4(base, value, 31);\n+}\n+\n+vbool8_t test___riscv_vlm_v_b8_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b8(base, 31);\n+}\n+\n+void test___riscv_vsm_v_b8_vl(uint8_t *base, vbool8_t value, size_t vl) {\n+  __riscv_vsm_v_b8(base, value, 31);\n+}\n+\n+vbool16_t test___riscv_vlm_v_b16_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b16(base, 31);\n+}\n+\n+void test___riscv_vsm_v_b16_vl(uint8_t *base, vbool16_t value, size_t vl) {\n+  __riscv_vsm_v_b16(base, value, 31);\n+}\n+\n+vbool32_t test___riscv_vlm_v_b32_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b32(base, 31);\n+}\n+\n+void test___riscv_vsm_v_b32_vl(uint8_t *base, vbool32_t value, size_t vl) {\n+  __riscv_vsm_v_b32(base, value, 31);\n+}\n+\n+vbool64_t test___riscv_vlm_v_b64_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b64(base, 31);\n+}\n+\n+void test___riscv_vsm_v_b64_vl(uint8_t *base, vbool64_t value, size_t vl) {\n+  __riscv_vsm_v_b64(base, value, 31);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */"}, {"sha": "58ca73c10a2e5eeb94aad7217f3491cacb6f008e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vlm_vsm-3.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlm_vsm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlm_vsm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvlm_vsm-3.c?ref=ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool1_t test___riscv_vlm_v_b1_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b1(base, 32);\n+}\n+\n+void test___riscv_vsm_v_b1_vl(uint8_t *base, vbool1_t value, size_t vl) {\n+  __riscv_vsm_v_b1(base, value, 32);\n+}\n+\n+vbool2_t test___riscv_vlm_v_b2_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b2(base, 32);\n+}\n+\n+void test___riscv_vsm_v_b2_vl(uint8_t *base, vbool2_t value, size_t vl) {\n+  __riscv_vsm_v_b2(base, value, 32);\n+}\n+\n+vbool4_t test___riscv_vlm_v_b4_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b4(base, 32);\n+}\n+\n+void test___riscv_vsm_v_b4_vl(uint8_t *base, vbool4_t value, size_t vl) {\n+  __riscv_vsm_v_b4(base, value, 32);\n+}\n+\n+vbool8_t test___riscv_vlm_v_b8_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b8(base, 32);\n+}\n+\n+void test___riscv_vsm_v_b8_vl(uint8_t *base, vbool8_t value, size_t vl) {\n+  __riscv_vsm_v_b8(base, value, 32);\n+}\n+\n+vbool16_t test___riscv_vlm_v_b16_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b16(base, 32);\n+}\n+\n+void test___riscv_vsm_v_b16_vl(uint8_t *base, vbool16_t value, size_t vl) {\n+  __riscv_vsm_v_b16(base, value, 32);\n+}\n+\n+vbool32_t test___riscv_vlm_v_b32_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b32(base, 32);\n+}\n+\n+void test___riscv_vsm_v_b32_vl(uint8_t *base, vbool32_t value, size_t vl) {\n+  __riscv_vsm_v_b32(base, value, 32);\n+}\n+\n+vbool64_t test___riscv_vlm_v_b64_vl(const uint8_t *base, size_t vl) {\n+  return __riscv_vlm_v_b64(base, 32);\n+}\n+\n+void test___riscv_vsm_v_b64_vl(uint8_t *base, vbool64_t value, size_t vl) {\n+  __riscv_vsm_v_b64(base, value, 32);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 1 } } */"}]}