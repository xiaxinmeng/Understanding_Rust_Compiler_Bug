{"sha": "076d86f3d2c8df6678b65fca53e1910e3a6c87bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc2ZDg2ZjNkMmM4ZGY2Njc4YjY1ZmNhNTNlMTkxMGUzYTZjODdiYw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2015-03-17T10:34:11Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2015-03-17T10:34:11Z"}, "message": "re PR target/65296 ([avr] fix various issues with specs file generation)\n\n\tPR target/65296\n\t* config/avr/avr.opt (-nodevicelib): New option.\n\t* doc/invoke.texi (AVR Options): Document it.\n\t* config/avr/avrlibc.h (LIB_SPEC, LIBGCC_SPEC) [avr1]: Don't link\n\tlibgcc.a, libc.a, libm.a.\n\t* config/avr/specs.h: Same.\n\t* config/avr/gen-avr-mmcu-specs.c (print_mcu): Don't print specs\n\twhich don't (directly) depend on the device.  Print more help.\n\t(*avrlibc_devicelib) [-nodevicelib]: Don't link libdev.a.\n\t(*cpp): Don't define __AVR_DEV_LIB_NAME__.\n\t* config/avr/driver-avr.c: Remove -nodevicelib from option list in\n\tcase of an error.\n\t(avr_devicespecs_file): Use suffix \"%s\" instead of absolute path\n\tfor specs file name.\n\t* config/avr/avr-arch.h (avr_mcu_t) [.library_name]: Remove.\n\t* config/avr/avr-mcus.def: Adjust initializers and comments.\n\nFrom-SVN: r221475", "tree": {"sha": "d37338680255aa292a376c6ba8f54c47bf242943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d37338680255aa292a376c6ba8f54c47bf242943"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/076d86f3d2c8df6678b65fca53e1910e3a6c87bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076d86f3d2c8df6678b65fca53e1910e3a6c87bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/076d86f3d2c8df6678b65fca53e1910e3a6c87bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebd63afa68237d05f4f5dfeb847d341a76239b68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd63afa68237d05f4f5dfeb847d341a76239b68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebd63afa68237d05f4f5dfeb847d341a76239b68"}], "stats": {"total": 766, "additions": 416, "deletions": 350}, "files": [{"sha": "7120cc363e47b54dffb9cb2d75a00ffcb3fdb66d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=076d86f3d2c8df6678b65fca53e1910e3a6c87bc", "patch": "@@ -1,3 +1,22 @@\n+2015-03-16  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/65296\n+\t* config/avr/avr.opt (-nodevicelib): New option.\n+\t* doc/invoke.texi (AVR Options): Document it.\n+\t* config/avr/avrlibc.h (LIB_SPEC, LIBGCC_SPEC) [avr1]: Don't link\n+\tlibgcc.a, libc.a, libm.a.\n+\t* config/avr/specs.h: Same.\n+\t* config/avr/gen-avr-mmcu-specs.c (print_mcu): Don't print specs\n+\twhich don't (directly) depend on the device.  Print more help.\n+\t(*avrlibc_devicelib) [-nodevicelib]: Don't link libdev.a.\n+\t(*cpp): Don't define __AVR_DEV_LIB_NAME__.\n+\t* config/avr/driver-avr.c: Remove -nodevicelib from option list in\n+\tcase of an error.\n+\t(avr_devicespecs_file): Use suffix \"%s\" instead of absolute path\n+\tfor specs file name.\n+\t* config/avr/avr-arch.h (avr_mcu_t) [.library_name]: Remove.\n+\t* config/avr/avr-mcus.def: Adjust initializers and comments.\n+\n 2015-03-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-sra.c (ipa_sra_preliminary_function_checks): Use"}, {"sha": "080b0b86dc4c4fce45d875bbcae44c05c780a6e8", "filename": "gcc/config/avr/avr-arch.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fconfig%2Favr%2Favr-arch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fconfig%2Favr%2Favr-arch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-arch.h?ref=076d86f3d2c8df6678b65fca53e1910e3a6c87bc", "patch": "@@ -122,9 +122,6 @@ typedef struct\n \n   /* Number of 64k segments in the flash.  */\n   int n_flash;\n-\n-  /* Old name of device library.  */\n-  const char *const library_name;\n } avr_mcu_t;\n \n /* AVR device specific features."}, {"sha": "23c9da1b98578868f13df2f5c08812976ce5d52e", "filename": "gcc/config/avr/avr-devices.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fconfig%2Favr%2Favr-devices.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fconfig%2Favr%2Favr-devices.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-devices.c?ref=076d86f3d2c8df6678b65fca53e1910e3a6c87bc", "patch": "@@ -111,12 +111,12 @@ avr_texinfo[] =\n const avr_mcu_t\n avr_mcu_types[] =\n {\n-#define AVR_MCU(NAME, ARCH, DEV_ATTRIBUTE, MACRO, DATA_SEC, TEXT_SEC, N_FLASH, LIBNAME)\\\n-  { NAME, ARCH, DEV_ATTRIBUTE, MACRO, DATA_SEC, TEXT_SEC, N_FLASH, LIBNAME },\n+#define AVR_MCU(NAME, ARCH, DEV_ATTRIBUTE, MACRO, DATA_SEC, TEXT_SEC, N_FLASH)\\\n+  { NAME, ARCH, DEV_ATTRIBUTE, MACRO, DATA_SEC, TEXT_SEC, N_FLASH },\n #include \"avr-mcus.def\"\n #undef AVR_MCU\n     /* End of list.  */\n-  { NULL, ARCH_UNKNOWN, AVR_ISA_NONE, NULL, 0, 0, 0, NULL }\n+  { NULL, ARCH_UNKNOWN, AVR_ISA_NONE, NULL, 0, 0, 0 }\n };\n \n "}, {"sha": "ce4b78261008b7ef09543822fe893e2eaea3385d", "filename": "gcc/config/avr/avr-mcus.def", "status": "modified", "additions": 283, "deletions": 275, "changes": 558, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fconfig%2Favr%2Favr-mcus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fconfig%2Favr%2Favr-mcus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-mcus.def?ref=076d86f3d2c8df6678b65fca53e1910e3a6c87bc", "patch": "@@ -29,313 +29,321 @@\n    After that, rebuild everything and check-in the new sources to the repo.\n    The device list below should be kept in sync with AVR-LibC.\n \n+   Device info is used during compiler build when the device specific\n+   spec files device-specs/specs-<NAME> are being built.  The compiler proper\n+   does not use the device info, it only uses info for the core architecture,\n+   i.e. for entries with MACRO = NULL.\n \n    Before including this file, define a macro:\n \n-   AVR_MCU (NAME, ARCH, DEV_ATTRIBUTE, MACRO, DATA_SEC, N_FLASH, LIBRARY_NAME)\n+   AVR_MCU (NAME, ARCH, DEV_ATTRIBUTE, MACRO, DATA_SEC, N_FLASH)\n \n    where the arguments are the fields of avr_mcu_t:\n    \n-       NAME          Accept -mmcu=<NAME>\n+       NAME          Name of the device as specified by -mmcu=<NAME>.  Also\n+                     used by DRIVER_SELF_SPECS and gen-avr-mmcu-specs.c for\n+                     - the name of the device specific specs file\n+                       in -specs=device-specs/spec-<NAME>\n+                     - the name of the startup file dev/<NAME>/crt1.o\n+                     - the name of the device library dev/<NAME>/libdev.a\n \n-       ARCH          Specifies the multilib variant together with SHORT_SP\n+       ARCH          Specifies the multilib variant together with AVR_SHORT_SP\n \n        DEV_ATTRIBUTE Specifies the device specific features\n                      - additional ISA, short SP, errata skip etc.,\n \n        MACRO         If NULL, this is a core and not a device.  If non-NULL,\n                      supply respective built-in macro.\n \n-       DATA_SEC      First address of SRAM, used in  -Tdata=  by the driver.\n+       DATA_START    First address of SRAM, used in  -Tdata=<DATA_START>.\n \n-       TEXT_SEC      First address of Flash, used in -Ttext= by the driver.\n+       TEXT_START    First address of Flash, used in -Ttext=<TEXT_START>.\n \n-       N_FLASH       Number of 64 KiB flash segments, rounded up.\n-\n-       LIBRARY_NAME  Used to define __AVR_DEV_LIB_NAME__.\n+       N_FLASH       Number of 64 KiB flash segments, rounded up.  The default\n+                     value for -mn-flash=<N_FLASH>.\n \n    \"avr2\" must be first for the \"0\" default to work as intended.  */\n \n /* Classic, <= 8K.  */\n-AVR_MCU (\"avr2\",                 ARCH_AVR2, AVR_ERRATA_SKIP, NULL,                     0x0060, 0x0, 6, \"s8515\")\n-AVR_MCU (\"at90s2313\",            ARCH_AVR2, AVR_SHORT_SP, \"__AVR_AT90S2313__\",         0x0060, 0x0, 1, \"s2313\")\n-AVR_MCU (\"at90s2323\",            ARCH_AVR2, AVR_SHORT_SP, \"__AVR_AT90S2323__\",         0x0060, 0x0, 1, \"s2323\")\n-AVR_MCU (\"at90s2333\",            ARCH_AVR2, AVR_SHORT_SP, \"__AVR_AT90S2333__\",         0x0060, 0x0, 1, \"s2333\")\n-AVR_MCU (\"at90s2343\",            ARCH_AVR2, AVR_SHORT_SP, \"__AVR_AT90S2343__\",         0x0060, 0x0, 1, \"s2343\")\n-AVR_MCU (\"attiny22\",             ARCH_AVR2, AVR_SHORT_SP, \"__AVR_ATtiny22__\",          0x0060, 0x0, 1, \"tn22\")\n-AVR_MCU (\"attiny26\",             ARCH_AVR2, AVR_SHORT_SP, \"__AVR_ATtiny26__\",          0x0060, 0x0, 1, \"tn26\")\n-AVR_MCU (\"at90s4414\",            ARCH_AVR2, AVR_ISA_NONE, \"__AVR_AT90S4414__\",         0x0060, 0x0, 1, \"s4414\")\n-AVR_MCU (\"at90s4433\",            ARCH_AVR2, AVR_SHORT_SP, \"__AVR_AT90S4433__\",         0x0060, 0x0, 1, \"s4433\")\n-AVR_MCU (\"at90s4434\",            ARCH_AVR2, AVR_ISA_NONE, \"__AVR_AT90S4434__\",         0x0060, 0x0, 1, \"s4434\")\n-AVR_MCU (\"at90s8515\",            ARCH_AVR2, AVR_ERRATA_SKIP, \"__AVR_AT90S8515__\",      0x0060, 0x0, 1, \"s8515\")\n-AVR_MCU (\"at90c8534\",            ARCH_AVR2, AVR_ISA_NONE, \"__AVR_AT90C8534__\",         0x0060, 0x0, 1, \"c8534\")\n-AVR_MCU (\"at90s8535\",            ARCH_AVR2, AVR_ISA_NONE, \"__AVR_AT90S8535__\",         0x0060, 0x0, 1, \"s8535\")\n+AVR_MCU (\"avr2\",             ARCH_AVR2, AVR_ERRATA_SKIP, NULL,                     0x0060, 0x0, 6)\n+AVR_MCU (\"at90s2313\",        ARCH_AVR2, AVR_SHORT_SP, \"__AVR_AT90S2313__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"at90s2323\",        ARCH_AVR2, AVR_SHORT_SP, \"__AVR_AT90S2323__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"at90s2333\",        ARCH_AVR2, AVR_SHORT_SP, \"__AVR_AT90S2333__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"at90s2343\",        ARCH_AVR2, AVR_SHORT_SP, \"__AVR_AT90S2343__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"attiny22\",         ARCH_AVR2, AVR_SHORT_SP, \"__AVR_ATtiny22__\",          0x0060, 0x0, 1)\n+AVR_MCU (\"attiny26\",         ARCH_AVR2, AVR_SHORT_SP, \"__AVR_ATtiny26__\",          0x0060, 0x0, 1)\n+AVR_MCU (\"at90s4414\",        ARCH_AVR2, AVR_ISA_NONE, \"__AVR_AT90S4414__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"at90s4433\",        ARCH_AVR2, AVR_SHORT_SP, \"__AVR_AT90S4433__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"at90s4434\",        ARCH_AVR2, AVR_ISA_NONE, \"__AVR_AT90S4434__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"at90s8515\",        ARCH_AVR2, AVR_ERRATA_SKIP, \"__AVR_AT90S8515__\",      0x0060, 0x0, 1)\n+AVR_MCU (\"at90c8534\",        ARCH_AVR2, AVR_ISA_NONE, \"__AVR_AT90C8534__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"at90s8535\",        ARCH_AVR2, AVR_ISA_NONE, \"__AVR_AT90S8535__\",         0x0060, 0x0, 1)\n /* Classic + MOVW, <= 8K.  */\n-AVR_MCU (\"avr25\",                ARCH_AVR25, AVR_ISA_NONE, NULL,                       0x0060, 0x0, 1, \"tn85\")\n-AVR_MCU (\"ata5272\",              ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATA5272__\",          0x0100, 0x0, 1, \"a5272\")\n-AVR_MCU (\"ata6616c\",             ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATA6616C__\",         0x0100, 0x0, 1, \"a6616c\")\n-AVR_MCU (\"attiny13\",             ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny13__\",         0x0060, 0x0, 1, \"tn13\")\n-AVR_MCU (\"attiny13a\",            ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny13A__\",        0x0060, 0x0, 1, \"tn13a\")\n-AVR_MCU (\"attiny2313\",           ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny2313__\",       0x0060, 0x0, 1, \"tn2313\")\n-AVR_MCU (\"attiny2313a\",          ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny2313A__\",      0x0060, 0x0, 1, \"tn2313a\")\n-AVR_MCU (\"attiny24\",             ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny24__\",         0x0060, 0x0, 1, \"tn24\")\n-AVR_MCU (\"attiny24a\",            ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny24A__\",        0x0060, 0x0, 1, \"tn24a\")\n-AVR_MCU (\"attiny4313\",           ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny4313__\",       0x0060, 0x0, 1, \"tn4313\")\n-AVR_MCU (\"attiny44\",             ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny44__\",         0x0060, 0x0, 1, \"tn44\")\n-AVR_MCU (\"attiny44a\",            ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny44A__\",        0x0060, 0x0, 1, \"tn44a\")\n-AVR_MCU (\"attiny441\",            ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny441__\",        0x0100, 0x0, 1, \"tn441\")\n-AVR_MCU (\"attiny84\",             ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny84__\",         0x0060, 0x0, 1, \"tn84\")\n-AVR_MCU (\"attiny84a\",            ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny84A__\",        0x0060, 0x0, 1, \"tn84\")\n-AVR_MCU (\"attiny25\",             ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny25__\",         0x0060, 0x0, 1, \"tn25\")\n-AVR_MCU (\"attiny45\",             ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny45__\",         0x0060, 0x0, 1, \"tn45\")\n-AVR_MCU (\"attiny85\",             ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny85__\",         0x0060, 0x0, 1, \"tn85\")\n-AVR_MCU (\"attiny261\",            ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny261__\",        0x0060, 0x0, 1, \"tn261\")\n-AVR_MCU (\"attiny261a\",           ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny261A__\",       0x0060, 0x0, 1, \"tn261a\")\n-AVR_MCU (\"attiny461\",            ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny461__\",        0x0060, 0x0, 1, \"tn461\")\n-AVR_MCU (\"attiny461a\",           ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny461A__\",       0x0060, 0x0, 1, \"tn461a\")\n-AVR_MCU (\"attiny861\",            ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny861__\",        0x0060, 0x0, 1, \"tn861\")\n-AVR_MCU (\"attiny861a\",           ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny861A__\",       0x0060, 0x0, 1, \"tn861a\")\n-AVR_MCU (\"attiny43u\",            ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny43U__\",        0x0060, 0x0, 1, \"tn43u\")\n-AVR_MCU (\"attiny87\",             ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny87__\",         0x0100, 0x0, 1, \"tn87\")\n-AVR_MCU (\"attiny48\",             ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny48__\",         0x0100, 0x0, 1, \"tn48\")\n-AVR_MCU (\"attiny88\",             ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny88__\",         0x0100, 0x0, 1, \"tn88\")\n-AVR_MCU (\"attiny828\",            ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny828__\",        0x0100, 0x0, 1, \"tn828\")\n-AVR_MCU (\"attiny841\",            ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny841__\",        0x0100, 0x0, 1, \"tn841\")\n-AVR_MCU (\"at86rf401\",            ARCH_AVR25, AVR_ISA_NONE, \"__AVR_AT86RF401__\",        0x0060, 0x0, 1, \"86401\")\n+AVR_MCU (\"avr25\",            ARCH_AVR25, AVR_ISA_NONE, NULL,                       0x0060, 0x0, 1)\n+AVR_MCU (\"ata5272\",          ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATA5272__\",          0x0100, 0x0, 1)\n+AVR_MCU (\"ata6616c\",         ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATA6616C__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"attiny13\",         ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny13__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"attiny13a\",        ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny13A__\",        0x0060, 0x0, 1)\n+AVR_MCU (\"attiny2313\",       ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny2313__\",       0x0060, 0x0, 1)\n+AVR_MCU (\"attiny2313a\",      ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny2313A__\",      0x0060, 0x0, 1)\n+AVR_MCU (\"attiny24\",         ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny24__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"attiny24a\",        ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny24A__\",        0x0060, 0x0, 1)\n+AVR_MCU (\"attiny4313\",       ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny4313__\",       0x0060, 0x0, 1)\n+AVR_MCU (\"attiny44\",         ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny44__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"attiny44a\",        ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny44A__\",        0x0060, 0x0, 1)\n+AVR_MCU (\"attiny441\",        ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny441__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"attiny84\",         ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny84__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"attiny84a\",        ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny84A__\",        0x0060, 0x0, 1)\n+AVR_MCU (\"attiny25\",         ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny25__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"attiny45\",         ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny45__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"attiny85\",         ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny85__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"attiny261\",        ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny261__\",        0x0060, 0x0, 1)\n+AVR_MCU (\"attiny261a\",       ARCH_AVR25, AVR_SHORT_SP, \"__AVR_ATtiny261A__\",       0x0060, 0x0, 1)\n+AVR_MCU (\"attiny461\",        ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny461__\",        0x0060, 0x0, 1)\n+AVR_MCU (\"attiny461a\",       ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny461A__\",       0x0060, 0x0, 1)\n+AVR_MCU (\"attiny861\",        ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny861__\",        0x0060, 0x0, 1)\n+AVR_MCU (\"attiny861a\",       ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny861A__\",       0x0060, 0x0, 1)\n+AVR_MCU (\"attiny43u\",        ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny43U__\",        0x0060, 0x0, 1)\n+AVR_MCU (\"attiny87\",         ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny87__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"attiny48\",         ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny48__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"attiny88\",         ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny88__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"attiny828\",        ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny828__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"attiny841\",        ARCH_AVR25, AVR_ISA_NONE, \"__AVR_ATtiny841__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"at86rf401\",        ARCH_AVR25, AVR_ISA_NONE, \"__AVR_AT86RF401__\",        0x0060, 0x0, 1)\n /* Classic, > 8K, <= 64K.  */\n-AVR_MCU (\"avr3\",                 ARCH_AVR3, AVR_ISA_NONE, NULL,                        0x0060, 0x0, 1, \"43355\")\n-AVR_MCU (\"at43usb355\",           ARCH_AVR3, AVR_ISA_NONE, \"__AVR_AT43USB355__\",        0x0060, 0x0, 1, \"43355\")\n-AVR_MCU (\"at76c711\",             ARCH_AVR3, AVR_ISA_NONE, \"__AVR_AT76C711__\",          0x0060, 0x0, 1, \"76711\")\n+AVR_MCU (\"avr3\",             ARCH_AVR3, AVR_ISA_NONE, NULL,                        0x0060, 0x0, 1)\n+AVR_MCU (\"at43usb355\",       ARCH_AVR3, AVR_ISA_NONE, \"__AVR_AT43USB355__\",        0x0060, 0x0, 1)\n+AVR_MCU (\"at76c711\",         ARCH_AVR3, AVR_ISA_NONE, \"__AVR_AT76C711__\",          0x0060, 0x0, 1)\n /* Classic, == 128K.  */\n-AVR_MCU (\"avr31\",                ARCH_AVR31, AVR_ERRATA_SKIP, NULL,                    0x0060, 0x0, 2, \"m103\")\n-AVR_MCU (\"atmega103\",            ARCH_AVR31, AVR_ERRATA_SKIP, \"__AVR_ATmega103__\",     0x0060, 0x0, 2, \"m103\")\n-AVR_MCU (\"at43usb320\",           ARCH_AVR31, AVR_ISA_NONE, \"__AVR_AT43USB320__\",       0x0060, 0x0, 2, \"43320\")\n+AVR_MCU (\"avr31\",            ARCH_AVR31, AVR_ERRATA_SKIP, NULL,                    0x0060, 0x0, 2)\n+AVR_MCU (\"atmega103\",        ARCH_AVR31, AVR_ERRATA_SKIP, \"__AVR_ATmega103__\",     0x0060, 0x0, 2)\n+AVR_MCU (\"at43usb320\",       ARCH_AVR31, AVR_ISA_NONE, \"__AVR_AT43USB320__\",       0x0060, 0x0, 2)\n /* Classic + MOVW + JMP/CALL.  */\n-AVR_MCU (\"avr35\",                ARCH_AVR35, AVR_ISA_NONE, NULL,                       0x0100, 0x0, 1, \"usb162\")\n-AVR_MCU (\"ata5505\",              ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATA5505__\",          0x0100, 0x0, 1, \"a5505\")\n-AVR_MCU (\"ata6617c\",             ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATA6617C__\",         0x0100, 0x0, 1, \"a6617c\")\n-AVR_MCU (\"ata664251\",            ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATA664251__\",        0x0100, 0x0, 1, \"a664251\")\n-AVR_MCU (\"at90usb82\",            ARCH_AVR35, AVR_ISA_NONE, \"__AVR_AT90USB82__\",        0x0100, 0x0, 1, \"usb82\")\n-AVR_MCU (\"at90usb162\",           ARCH_AVR35, AVR_ISA_NONE, \"__AVR_AT90USB162__\",       0x0100, 0x0, 1, \"usb162\")\n-AVR_MCU (\"atmega8u2\",            ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATmega8U2__\",        0x0100, 0x0, 1, \"m8u2\")\n-AVR_MCU (\"atmega16u2\",           ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATmega16U2__\",       0x0100, 0x0, 1, \"m16u2\")\n-AVR_MCU (\"atmega32u2\",           ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATmega32U2__\",       0x0100, 0x0, 1, \"m32u2\")\n-AVR_MCU (\"attiny167\",            ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATtiny167__\",        0x0100, 0x0, 1, \"tn167\")\n-AVR_MCU (\"attiny1634\",           ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATtiny1634__\",       0x0100, 0x0, 1, \"tn1634\")\n+AVR_MCU (\"avr35\",            ARCH_AVR35, AVR_ISA_NONE, NULL,                       0x0100, 0x0, 1)\n+AVR_MCU (\"ata5505\",          ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATA5505__\",          0x0100, 0x0, 1)\n+AVR_MCU (\"ata6617c\",         ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATA6617C__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"ata664251\",        ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATA664251__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"at90usb82\",        ARCH_AVR35, AVR_ISA_NONE, \"__AVR_AT90USB82__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"at90usb162\",       ARCH_AVR35, AVR_ISA_NONE, \"__AVR_AT90USB162__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega8u2\",        ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATmega8U2__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega16u2\",       ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATmega16U2__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega32u2\",       ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATmega32U2__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"attiny167\",        ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATtiny167__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"attiny1634\",       ARCH_AVR35, AVR_ISA_NONE, \"__AVR_ATtiny1634__\",       0x0100, 0x0, 1)\n /* Enhanced, <= 8K.  */\n-AVR_MCU (\"avr4\",                 ARCH_AVR4, AVR_ISA_NONE,  NULL,                       0x0060, 0x0, 1, \"m8\")\n-AVR_MCU (\"ata6285\",              ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATA6285__\",          0x0100, 0x0, 1, \"a6285\")\n-AVR_MCU (\"ata6286\",              ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATA6286__\",          0x0100, 0x0, 1, \"a6286\")\n-AVR_MCU (\"ata6289\",              ARCH_AVR4, AVR_ISA_NONE, \"__AVR_ATA6289__\",           0x0100, 0x0, 1, \"a6289\")\n-AVR_MCU (\"ata6612c\",             ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATA6612C__\",         0x0100, 0x0, 1, \"a6612c\")\n-AVR_MCU (\"atmega8\",              ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega8__\",          0x0060, 0x0, 1, \"m8\")\n-AVR_MCU (\"atmega8a\",             ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega8A__\",         0x0060, 0x0, 1, \"m8a\")\n-AVR_MCU (\"atmega48\",             ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega48__\",         0x0100, 0x0, 1, \"m48\")\n-AVR_MCU (\"atmega48a\",            ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega48A__\",        0x0100, 0x0, 1, \"m48a\")\n-AVR_MCU (\"atmega48p\",            ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega48P__\",        0x0100, 0x0, 1, \"m48p\")\n-AVR_MCU (\"atmega48pa\",           ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega48PA__\",       0x0100, 0x0, 1, \"m48pa\")\n-AVR_MCU (\"atmega88\",             ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega88__\",         0x0100, 0x0, 1, \"m88\")\n-AVR_MCU (\"atmega88a\",            ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega88A__\",        0x0100, 0x0, 1, \"m88a\")\n-AVR_MCU (\"atmega88p\",            ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega88P__\",        0x0100, 0x0, 1, \"m88p\")\n-AVR_MCU (\"atmega88pa\",           ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega88PA__\",       0x0100, 0x0, 1, \"m88pa\")\n-AVR_MCU (\"atmega8515\",           ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega8515__\",       0x0060, 0x0, 1, \"m8515\")\n-AVR_MCU (\"atmega8535\",           ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega8535__\",       0x0060, 0x0, 1, \"m8535\")\n-AVR_MCU (\"atmega8hva\",           ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega8HVA__\",       0x0100, 0x0, 1, \"m8hva\")\n-AVR_MCU (\"at90pwm1\",             ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM1__\",         0x0100, 0x0, 1, \"90pwm1\")\n-AVR_MCU (\"at90pwm2\",             ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM2__\",         0x0100, 0x0, 1, \"90pwm2\")\n-AVR_MCU (\"at90pwm2b\",            ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM2B__\",        0x0100, 0x0, 1, \"90pwm2b\")\n-AVR_MCU (\"at90pwm3\",             ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM3__\",         0x0100, 0x0, 1, \"90pwm3\")\n-AVR_MCU (\"at90pwm3b\",            ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM3B__\",        0x0100, 0x0, 1, \"90pwm3b\")\n-AVR_MCU (\"at90pwm81\",            ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM81__\",        0x0100, 0x0, 1, \"90pwm81\")\n+AVR_MCU (\"avr4\",             ARCH_AVR4, AVR_ISA_NONE,  NULL,                       0x0060, 0x0, 1)\n+AVR_MCU (\"ata6285\",          ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATA6285__\",          0x0100, 0x0, 1)\n+AVR_MCU (\"ata6286\",          ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATA6286__\",          0x0100, 0x0, 1)\n+AVR_MCU (\"ata6289\",          ARCH_AVR4, AVR_ISA_NONE, \"__AVR_ATA6289__\",           0x0100, 0x0, 1)\n+AVR_MCU (\"ata6612c\",         ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATA6612C__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"atmega8\",          ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega8__\",          0x0060, 0x0, 1)\n+AVR_MCU (\"atmega8a\",         ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega8A__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"atmega48\",         ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega48__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"atmega48a\",        ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega48A__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega48p\",        ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega48P__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega48pa\",       ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega48PA__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega88\",         ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega88__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"atmega88a\",        ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega88A__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega88p\",        ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega88P__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega88pa\",       ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega88PA__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega8515\",       ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega8515__\",       0x0060, 0x0, 1)\n+AVR_MCU (\"atmega8535\",       ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega8535__\",       0x0060, 0x0, 1)\n+AVR_MCU (\"atmega8hva\",       ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_ATmega8HVA__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"at90pwm1\",         ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM1__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"at90pwm2\",         ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM2__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"at90pwm2b\",        ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM2B__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"at90pwm3\",         ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM3__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"at90pwm3b\",        ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM3B__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"at90pwm81\",        ARCH_AVR4, AVR_ISA_NONE,  \"__AVR_AT90PWM81__\",        0x0100, 0x0, 1)\n /* Enhanced, > 8K, <= 64K.  */\n-AVR_MCU (\"avr5\",                 ARCH_AVR5, AVR_ISA_NONE, NULL,                        0x0060, 0x0, 1, \"m16\")\n-AVR_MCU (\"ata5702m322\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA5702M322__\",       0x0200, 0x0, 1, \"a5702m322\")\n-AVR_MCU (\"ata5782\",              ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA5782__\",           0x0200, 0x8000, 1, \"a5782\")\n-AVR_MCU (\"ata5790\",              ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA5790__\",           0x0100, 0x0, 1, \"a5790\")\n-AVR_MCU (\"ata5790n\",             ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA5790N__\",          0x0100, 0x0, 1, \"a5790n\")\n-AVR_MCU (\"ata5795\",              ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA5795__\",           0x0100, 0x0, 1, \"a5795\")\n-AVR_MCU (\"ata5831\",              ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA5831__\",           0x0200, 0x8000, 1, \"a5831\")\n-AVR_MCU (\"ata6613c\",             ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA6613C__\",          0x0100, 0x0, 1, \"a6613c\")\n-AVR_MCU (\"ata6614q\",             ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA6614Q__\",          0x0100, 0x0, 1, \"a6614q\")\n-AVR_MCU (\"atmega16\",             ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16__\",          0x0060, 0x0, 1, \"m16\")\n-AVR_MCU (\"atmega16a\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16A__\",         0x0060, 0x0, 1, \"m16a\")\n-AVR_MCU (\"atmega161\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega161__\",         0x0060, 0x0, 1, \"m161\")\n-AVR_MCU (\"atmega162\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega162__\",         0x0100, 0x0, 1, \"m162\")\n-AVR_MCU (\"atmega163\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega163__\",         0x0060, 0x0, 1, \"m163\")\n-AVR_MCU (\"atmega164a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega164A__\",        0x0100, 0x0, 1, \"m164a\")\n-AVR_MCU (\"atmega164p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega164P__\",        0x0100, 0x0, 1, \"m164p\")\n-AVR_MCU (\"atmega164pa\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega164PA__\",       0x0100, 0x0, 1, \"m164pa\")\n-AVR_MCU (\"atmega165\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega165__\",         0x0100, 0x0, 1, \"m165\")\n-AVR_MCU (\"atmega165a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega165A__\",        0x0100, 0x0, 1, \"m165a\")\n-AVR_MCU (\"atmega165p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega165P__\",        0x0100, 0x0, 1, \"m165p\")\n-AVR_MCU (\"atmega165pa\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega165PA__\",       0x0100, 0x0, 1, \"m165pa\")\n-AVR_MCU (\"atmega168\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega168__\",         0x0100, 0x0, 1, \"m168\")\n-AVR_MCU (\"atmega168a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega168A__\",        0x0100, 0x0, 1, \"m168a\")\n-AVR_MCU (\"atmega168p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega168P__\",        0x0100, 0x0, 1, \"m168p\")\n-AVR_MCU (\"atmega168pa\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega168PA__\",       0x0100, 0x0, 1, \"m168pa\")\n-AVR_MCU (\"atmega169\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega169__\",         0x0100, 0x0, 1, \"m169\")\n-AVR_MCU (\"atmega169a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega169A__\",        0x0100, 0x0, 1, \"m169a\")\n-AVR_MCU (\"atmega169p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega169P__\",        0x0100, 0x0, 1, \"m169p\")\n-AVR_MCU (\"atmega169pa\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega169PA__\",       0x0100, 0x0, 1, \"m169pa\")\n-AVR_MCU (\"atmega16hvb\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16HVB__\",       0x0100, 0x0, 1, \"m16hvb\")\n-AVR_MCU (\"atmega16hvbrevb\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16HVBREVB__\",   0x0100, 0x0, 1, \"m16hvbrevb\")\n-AVR_MCU (\"atmega16m1\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16M1__\",        0x0100, 0x0, 1, \"m16m1\")\n-AVR_MCU (\"atmega16u4\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16U4__\",        0x0100, 0x0, 1, \"m16u4\")\n-AVR_MCU (\"atmega32a\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32A__\",         0x0060, 0x0, 1, \"m32a\")\n-AVR_MCU (\"atmega32\",             ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32__\",          0x0060, 0x0, 1, \"m32\")\n-AVR_MCU (\"atmega323\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega323__\",         0x0060, 0x0, 1, \"m323\")\n-AVR_MCU (\"atmega324a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega324A__\",        0x0100, 0x0, 1, \"m324a\")\n-AVR_MCU (\"atmega324p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega324P__\",        0x0100, 0x0, 1, \"m324p\")\n-AVR_MCU (\"atmega324pa\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega324PA__\",       0x0100, 0x0, 1, \"m324pa\")\n-AVR_MCU (\"atmega325\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega325__\",         0x0100, 0x0, 1, \"m325\")\n-AVR_MCU (\"atmega325a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega325A__\",        0x0100, 0x0, 1, \"m325a\")\n-AVR_MCU (\"atmega325p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega325P__\",        0x0100, 0x0, 1, \"m325p\")\n-AVR_MCU (\"atmega325pa\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega325PA__\",       0x0100, 0x0, 1, \"m325pa\")\n-AVR_MCU (\"atmega3250\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3250__\",        0x0100, 0x0, 1, \"m3250\")\n-AVR_MCU (\"atmega3250a\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3250A__\",       0x0100, 0x0, 1, \"m3250a\")\n-AVR_MCU (\"atmega3250p\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3250P__\",       0x0100, 0x0, 1, \"m3250p\")\n-AVR_MCU (\"atmega3250pa\",         ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3250PA__\",      0x0100, 0x0, 1, \"m3250pa\")\n-AVR_MCU (\"atmega328\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega328__\",         0x0100, 0x0, 1, \"m328\")\n-AVR_MCU (\"atmega328p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega328P__\",        0x0100, 0x0, 1, \"m328p\")\n-AVR_MCU (\"atmega329\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega329__\",         0x0100, 0x0, 1, \"m329\")\n-AVR_MCU (\"atmega329a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega329A__\",        0x0100, 0x0, 1, \"m329a\")\n-AVR_MCU (\"atmega329p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega329P__\",        0x0100, 0x0, 1, \"m329p\")\n-AVR_MCU (\"atmega329pa\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega329PA__\",       0x0100, 0x0, 1, \"m329pa\")\n-AVR_MCU (\"atmega3290\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3290__\",        0x0100, 0x0, 1, \"m3290\")\n-AVR_MCU (\"atmega3290a\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3290A__\",       0x0100, 0x0, 1, \"m3290a\")\n-AVR_MCU (\"atmega3290p\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3290P__\",       0x0100, 0x0, 1, \"m3290p\")\n-AVR_MCU (\"atmega3290pa\",         ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3290PA__\",      0x0100, 0x0, 1, \"m3290pa\")\n-AVR_MCU (\"atmega32c1\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32C1__\",        0x0100, 0x0, 1, \"m32c1\")\n-AVR_MCU (\"atmega32m1\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32M1__\",        0x0100, 0x0, 1, \"m32m1\")\n-AVR_MCU (\"atmega32u4\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32U4__\",        0x0100, 0x0, 1, \"m32u4\")\n-AVR_MCU (\"atmega32u6\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32U6__\",        0x0100, 0x0, 1, \"m32u6\")\n-AVR_MCU (\"atmega406\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega406__\",         0x0100, 0x0, 1, \"m406\")\n-AVR_MCU (\"atmega64\",             ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64__\",          0x0100, 0x0, 1, \"m64\")\n-AVR_MCU (\"atmega64a\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64A__\",         0x0100, 0x0, 1, \"m64a\")\n-AVR_MCU (\"atmega640\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega640__\",         0x0200, 0x0, 1, \"m640\")\n-AVR_MCU (\"atmega644\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega644__\",         0x0100, 0x0, 1, \"m644\")\n-AVR_MCU (\"atmega644a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega644A__\",        0x0100, 0x0, 1, \"m644a\")\n-AVR_MCU (\"atmega644p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega644P__\",        0x0100, 0x0, 1, \"m644p\")\n-AVR_MCU (\"atmega644pa\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega644PA__\",       0x0100, 0x0, 1, \"m644pa\")\n-AVR_MCU (\"atmega645\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega645__\",         0x0100, 0x0, 1, \"m645\")\n-AVR_MCU (\"atmega645a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega645A__\",        0x0100, 0x0, 1, \"m645a\")\n-AVR_MCU (\"atmega645p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega645P__\",        0x0100, 0x0, 1, \"m645p\")\n-AVR_MCU (\"atmega6450\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6450__\",        0x0100, 0x0, 1, \"m6450\")\n-AVR_MCU (\"atmega6450a\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6450A__\",       0x0100, 0x0, 1, \"m6450a\")\n-AVR_MCU (\"atmega6450p\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6450P__\",       0x0100, 0x0, 1, \"m6450p\")\n-AVR_MCU (\"atmega649\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega649__\",         0x0100, 0x0, 1, \"m649\")\n-AVR_MCU (\"atmega649a\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega649A__\",        0x0100, 0x0, 1, \"m649a\")\n-AVR_MCU (\"atmega649p\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega649P__\",        0x0100, 0x0, 1, \"m649p\")\n-AVR_MCU (\"atmega6490\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6490__\",        0x0100, 0x0, 1, \"m6490\")\n-AVR_MCU (\"atmega16hva\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16HVA__\",       0x0100, 0x0, 1, \"m16hva\")\n-AVR_MCU (\"atmega16hva2\",         ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16HVA2__\",      0x0100, 0x0, 1, \"m16hva2\")\n-AVR_MCU (\"atmega32hvb\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32HVB__\",       0x0100, 0x0, 1, \"m32hvb\")\n-AVR_MCU (\"atmega6490a\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6490A__\",       0x0100, 0x0, 1, \"m6490a\")\n-AVR_MCU (\"atmega6490p\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6490P__\",       0x0100, 0x0, 1, \"m6490p\")\n-AVR_MCU (\"atmega64c1\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64C1__\",        0x0100, 0x0, 1, \"m64c1\")\n-AVR_MCU (\"atmega64m1\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64M1__\",        0x0100, 0x0, 1, \"m64m1\")\n-AVR_MCU (\"atmega64hve\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64HVE__\",       0x0100, 0x0, 1, \"m64hve\")\n-AVR_MCU (\"atmega64hve2\",         ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64HVE2__\",      0x0100, 0x0, 1, \"m64hve2\")\n-AVR_MCU (\"atmega64rfr2\",         ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64RFR2__\",      0x0200, 0x0, 1, \"m64rfr2\")\n-AVR_MCU (\"atmega644rfr2\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega644RFR2__\",     0x0200, 0x0, 1, \"m644rfr2\")\n-AVR_MCU (\"atmega32hvbrevb\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32HVBREVB__\",   0x0100, 0x0, 1, \"m32hvbrevb\")\n-AVR_MCU (\"at90can32\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90CAN32__\",         0x0100, 0x0, 1, \"can32\")\n-AVR_MCU (\"at90can64\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90CAN64__\",         0x0100, 0x0, 1, \"can64\")\n-AVR_MCU (\"at90pwm161\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90PWM161__\",        0x0100, 0x0, 1, \"90pwm161\")\n-AVR_MCU (\"at90pwm216\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90PWM216__\",        0x0100, 0x0, 1, \"90pwm216\")\n-AVR_MCU (\"at90pwm316\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90PWM316__\",        0x0100, 0x0, 1, \"90pwm316\")\n-AVR_MCU (\"at90scr100\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90SCR100__\",        0x0100, 0x0, 1, \"90scr100\")\n-AVR_MCU (\"at90usb646\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90USB646__\",        0x0100, 0x0, 1, \"usb646\")\n-AVR_MCU (\"at90usb647\",           ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90USB647__\",        0x0100, 0x0, 1, \"usb647\")\n-AVR_MCU (\"at94k\",                ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT94K__\",             0x0060, 0x0, 1, \"at94k\")\n-AVR_MCU (\"m3000\",                ARCH_AVR5, AVR_ISA_NONE, \"__AVR_M3000__\",             0x1000, 0x0, 1, \"m3000\")\n+AVR_MCU (\"avr5\",             ARCH_AVR5, AVR_ISA_NONE, NULL,                        0x0060, 0x0, 1)\n+AVR_MCU (\"ata5702m322\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA5702M322__\",       0x0200, 0x0, 1)\n+AVR_MCU (\"ata5782\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA5782__\",           0x0200, 0x8000, 1)\n+AVR_MCU (\"ata5790\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA5790__\",           0x0100, 0x0, 1)\n+AVR_MCU (\"ata5790n\",         ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA5790N__\",          0x0100, 0x0, 1)\n+AVR_MCU (\"ata5795\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA5795__\",           0x0100, 0x0, 1)\n+AVR_MCU (\"ata5831\",          ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA5831__\",           0x0200, 0x8000, 1)\n+AVR_MCU (\"ata6613c\",         ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA6613C__\",          0x0100, 0x0, 1)\n+AVR_MCU (\"ata6614q\",         ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATA6614Q__\",          0x0100, 0x0, 1)\n+AVR_MCU (\"atmega16\",         ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16__\",          0x0060, 0x0, 1)\n+AVR_MCU (\"atmega16a\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16A__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"atmega161\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega161__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"atmega162\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega162__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"atmega163\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega163__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"atmega164a\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega164A__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega164p\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega164P__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega164pa\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega164PA__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega165\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega165__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"atmega165a\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega165A__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega165p\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega165P__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega165pa\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega165PA__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega168\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega168__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"atmega168a\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega168A__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega168p\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega168P__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega168pa\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega168PA__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega169\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega169__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"atmega169a\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega169A__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega169p\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega169P__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega169pa\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega169PA__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega16hvb\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16HVB__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega16hvbrevb\",  ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16HVBREVB__\",   0x0100, 0x0, 1)\n+AVR_MCU (\"atmega16m1\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16M1__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega16u4\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16U4__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega32a\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32A__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"atmega32\",         ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32__\",          0x0060, 0x0, 1)\n+AVR_MCU (\"atmega323\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega323__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"atmega324a\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega324A__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega324p\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega324P__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega324pa\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega324PA__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega325\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega325__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"atmega325a\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega325A__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega325p\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega325P__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega325pa\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega325PA__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega3250\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3250__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega3250a\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3250A__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega3250p\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3250P__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega3250pa\",     ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3250PA__\",      0x0100, 0x0, 1)\n+AVR_MCU (\"atmega328\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega328__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"atmega328p\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega328P__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega329\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega329__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"atmega329a\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega329A__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega329p\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega329P__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega329pa\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega329PA__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega3290\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3290__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega3290a\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3290A__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega3290p\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3290P__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega3290pa\",     ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega3290PA__\",      0x0100, 0x0, 1)\n+AVR_MCU (\"atmega32c1\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32C1__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega32m1\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32M1__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega32u4\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32U4__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega32u6\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32U6__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega406\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega406__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"atmega64\",         ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64__\",          0x0100, 0x0, 1)\n+AVR_MCU (\"atmega64a\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64A__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"atmega640\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega640__\",         0x0200, 0x0, 1)\n+AVR_MCU (\"atmega644\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega644__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"atmega644a\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega644A__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega644p\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega644P__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega644pa\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega644PA__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega645\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega645__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"atmega645a\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega645A__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega645p\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega645P__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega6450\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6450__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega6450a\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6450A__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega6450p\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6450P__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega649\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega649__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"atmega649a\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega649A__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega649p\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega649P__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega6490\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6490__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega16hva\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16HVA__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega16hva2\",     ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega16HVA2__\",      0x0100, 0x0, 1)\n+AVR_MCU (\"atmega32hvb\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32HVB__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega6490a\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6490A__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega6490p\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega6490P__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega64c1\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64C1__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega64m1\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64M1__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"atmega64hve\",      ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64HVE__\",       0x0100, 0x0, 1)\n+AVR_MCU (\"atmega64hve2\",     ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64HVE2__\",      0x0100, 0x0, 1)\n+AVR_MCU (\"atmega64rfr2\",     ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega64RFR2__\",      0x0200, 0x0, 1)\n+AVR_MCU (\"atmega644rfr2\",    ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega644RFR2__\",     0x0200, 0x0, 1)\n+AVR_MCU (\"atmega32hvbrevb\",  ARCH_AVR5, AVR_ISA_NONE, \"__AVR_ATmega32HVBREVB__\",   0x0100, 0x0, 1)\n+AVR_MCU (\"at90can32\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90CAN32__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"at90can64\",        ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90CAN64__\",         0x0100, 0x0, 1)\n+AVR_MCU (\"at90pwm161\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90PWM161__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"at90pwm216\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90PWM216__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"at90pwm316\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90PWM316__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"at90scr100\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90SCR100__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"at90usb646\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90USB646__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"at90usb647\",       ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT90USB647__\",        0x0100, 0x0, 1)\n+AVR_MCU (\"at94k\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_AT94K__\",             0x0060, 0x0, 1)\n+AVR_MCU (\"m3000\",            ARCH_AVR5, AVR_ISA_NONE, \"__AVR_M3000__\",             0x1000, 0x0, 1)\n /* Enhanced, == 128K.  */\n-AVR_MCU (\"avr51\",                ARCH_AVR51, AVR_ISA_NONE, NULL,                       0x0100, 0x0, 2, \"m128\")\n-AVR_MCU (\"atmega128\",            ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega128__\",        0x0100, 0x0, 2, \"m128\")\n-AVR_MCU (\"atmega128a\",           ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega128A__\",       0x0100, 0x0, 2, \"m128a\")\n-AVR_MCU (\"atmega1280\",           ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega1280__\",       0x0200, 0x0, 2, \"m1280\")\n-AVR_MCU (\"atmega1281\",           ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega1281__\",       0x0200, 0x0, 2, \"m1281\")\n-AVR_MCU (\"atmega1284\",           ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega1284__\",       0x0100, 0x0, 2, \"m1284\")\n-AVR_MCU (\"atmega1284p\",          ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega1284P__\",      0x0100, 0x0, 2, \"m1284p\")\n-AVR_MCU (\"atmega128rfa1\",        ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega128RFA1__\",    0x0200, 0x0, 2, \"m128rfa1\")\n-AVR_MCU (\"atmega128rfr2\",        ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega128RFR2__\",    0x0200, 0x0, 2, \"m128rfr2\")\n-AVR_MCU (\"atmega1284rfr2\",       ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega1284RFR2__\",   0x0200, 0x0, 2, \"m1284rfr2\")\n-AVR_MCU (\"at90can128\",           ARCH_AVR51, AVR_ISA_NONE, \"__AVR_AT90CAN128__\",       0x0100, 0x0, 2, \"can128\")\n-AVR_MCU (\"at90usb1286\",          ARCH_AVR51, AVR_ISA_NONE, \"__AVR_AT90USB1286__\",      0x0100, 0x0, 2, \"usb1286\")\n-AVR_MCU (\"at90usb1287\",          ARCH_AVR51, AVR_ISA_NONE, \"__AVR_AT90USB1287__\",      0x0100, 0x0, 2, \"usb1287\")\n+AVR_MCU (\"avr51\",            ARCH_AVR51, AVR_ISA_NONE, NULL,                       0x0100, 0x0, 2)\n+AVR_MCU (\"atmega128\",        ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega128__\",        0x0100, 0x0, 2)\n+AVR_MCU (\"atmega128a\",       ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega128A__\",       0x0100, 0x0, 2)\n+AVR_MCU (\"atmega1280\",       ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega1280__\",       0x0200, 0x0, 2)\n+AVR_MCU (\"atmega1281\",       ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega1281__\",       0x0200, 0x0, 2)\n+AVR_MCU (\"atmega1284\",       ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega1284__\",       0x0100, 0x0, 2)\n+AVR_MCU (\"atmega1284p\",      ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega1284P__\",      0x0100, 0x0, 2)\n+AVR_MCU (\"atmega128rfa1\",    ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega128RFA1__\",    0x0200, 0x0, 2)\n+AVR_MCU (\"atmega128rfr2\",    ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega128RFR2__\",    0x0200, 0x0, 2)\n+AVR_MCU (\"atmega1284rfr2\",   ARCH_AVR51, AVR_ISA_NONE, \"__AVR_ATmega1284RFR2__\",   0x0200, 0x0, 2)\n+AVR_MCU (\"at90can128\",       ARCH_AVR51, AVR_ISA_NONE, \"__AVR_AT90CAN128__\",       0x0100, 0x0, 2)\n+AVR_MCU (\"at90usb1286\",      ARCH_AVR51, AVR_ISA_NONE, \"__AVR_AT90USB1286__\",      0x0100, 0x0, 2)\n+AVR_MCU (\"at90usb1287\",      ARCH_AVR51, AVR_ISA_NONE, \"__AVR_AT90USB1287__\",      0x0100, 0x0, 2)\n /* 3-Byte PC.  */\n-AVR_MCU (\"avr6\",                 ARCH_AVR6, AVR_ISA_NONE, NULL,                        0x0200, 0x0, 4, \"m2561\")\n-AVR_MCU (\"atmega2560\",           ARCH_AVR6, AVR_ISA_NONE, \"__AVR_ATmega2560__\",        0x0200, 0x0, 4, \"m2560\")\n-AVR_MCU (\"atmega2561\",           ARCH_AVR6, AVR_ISA_NONE, \"__AVR_ATmega2561__\",        0x0200, 0x0, 4, \"m2561\")\n-AVR_MCU (\"atmega256rfr2\",        ARCH_AVR6, AVR_ISA_NONE, \"__AVR_ATmega256RFR2__\",     0x0200, 0x0, 4, \"m256rfr2\")\n-AVR_MCU (\"atmega2564rfr2\",       ARCH_AVR6, AVR_ISA_NONE, \"__AVR_ATmega2564RFR2__\",    0x0200, 0x0, 4, \"m2564rfr2\")\n+AVR_MCU (\"avr6\",             ARCH_AVR6, AVR_ISA_NONE, NULL,                        0x0200, 0x0, 4)\n+AVR_MCU (\"atmega2560\",       ARCH_AVR6, AVR_ISA_NONE, \"__AVR_ATmega2560__\",        0x0200, 0x0, 4)\n+AVR_MCU (\"atmega2561\",       ARCH_AVR6, AVR_ISA_NONE, \"__AVR_ATmega2561__\",        0x0200, 0x0, 4)\n+AVR_MCU (\"atmega256rfr2\",    ARCH_AVR6, AVR_ISA_NONE, \"__AVR_ATmega256RFR2__\",     0x0200, 0x0, 4)\n+AVR_MCU (\"atmega2564rfr2\",   ARCH_AVR6, AVR_ISA_NONE, \"__AVR_ATmega2564RFR2__\",    0x0200, 0x0, 4)\n /* Xmega, 16K <= Flash < 64K, RAM <= 64K */\n-AVR_MCU (\"avrxmega2\",        ARCH_AVRXMEGA2, AVR_ISA_NONE, NULL,                       0x2000, 0x0, 1, \"x32a4\")\n-AVR_MCU (\"atxmega8e5\",       ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega8E5__\",       0x2000, 0x0, 1, \"x8e5\")\n-AVR_MCU (\"atxmega16a4\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega16A4__\",      0x2000, 0x0, 1, \"x16a4\")\n-AVR_MCU (\"atxmega16d4\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega16D4__\",      0x2000, 0x0, 1, \"x16d4\")\n-AVR_MCU (\"atxmega16e5\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega16E5__\",      0x2000, 0x0, 1, \"x16e5\")\n-AVR_MCU (\"atxmega32a4\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega32A4__\",      0x2000, 0x0, 1, \"x32a4\")\n-AVR_MCU (\"atxmega32c3\",      ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega32C3__\",      0x2000, 0x0, 1, \"x32c3\")\n-AVR_MCU (\"atxmega32d3\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega32D3__\",      0x2000, 0x0, 1, \"x32d3\")\n-AVR_MCU (\"atxmega32d4\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega32D4__\",      0x2000, 0x0, 1, \"x32d4\")\n-AVR_MCU (\"atxmega16a4u\",     ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega16A4U__\",     0x2000, 0x0, 1, \"x16a4u\")\n-AVR_MCU (\"atxmega16c4\",      ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega16C4__\",      0x2000, 0x0, 1, \"x16c4\")\n-AVR_MCU (\"atxmega32a4u\",     ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega32A4U__\",     0x2000, 0x0, 1, \"x32a4u\")\n-AVR_MCU (\"atxmega32c4\",      ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega32C4__\",      0x2000, 0x0, 1, \"x32c4\")\n-AVR_MCU (\"atxmega32e5\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega32E5__\",      0x2000, 0x0, 1, \"x32e5\")\n+AVR_MCU (\"avrxmega2\",        ARCH_AVRXMEGA2, AVR_ISA_NONE, NULL,                   0x2000, 0x0, 1)\n+AVR_MCU (\"atxmega8e5\",       ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega8E5__\",   0x2000, 0x0, 1)\n+AVR_MCU (\"atxmega16a4\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega16A4__\",  0x2000, 0x0, 1)\n+AVR_MCU (\"atxmega16d4\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega16D4__\",  0x2000, 0x0, 1)\n+AVR_MCU (\"atxmega16e5\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega16E5__\",  0x2000, 0x0, 1)\n+AVR_MCU (\"atxmega32a4\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega32A4__\",  0x2000, 0x0, 1)\n+AVR_MCU (\"atxmega32c3\",      ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega32C3__\",  0x2000, 0x0, 1)\n+AVR_MCU (\"atxmega32d3\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega32D3__\",  0x2000, 0x0, 1)\n+AVR_MCU (\"atxmega32d4\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega32D4__\",  0x2000, 0x0, 1)\n+AVR_MCU (\"atxmega16a4u\",     ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega16A4U__\", 0x2000, 0x0, 1)\n+AVR_MCU (\"atxmega16c4\",      ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega16C4__\",  0x2000, 0x0, 1)\n+AVR_MCU (\"atxmega32a4u\",     ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega32A4U__\", 0x2000, 0x0, 1)\n+AVR_MCU (\"atxmega32c4\",      ARCH_AVRXMEGA2, AVR_ISA_RMW,  \"__AVR_ATxmega32C4__\",  0x2000, 0x0, 1)\n+AVR_MCU (\"atxmega32e5\",      ARCH_AVRXMEGA2, AVR_ISA_NONE, \"__AVR_ATxmega32E5__\",  0x2000, 0x0, 1)\n /* Xmega, 64K < Flash <= 128K, RAM <= 64K */\n-AVR_MCU (\"avrxmega4\",        ARCH_AVRXMEGA4, AVR_ISA_NONE, NULL,                       0x2000, 0x0, 2, \"x64a4\")\n-AVR_MCU (\"atxmega64a3\",      ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_ATxmega64A3__\",      0x2000, 0x0, 2, \"x64a3\")\n-AVR_MCU (\"atxmega64d3\",      ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_ATxmega64D3__\",      0x2000, 0x0, 2, \"x64d3\")\n-AVR_MCU (\"atxmega64a3u\",     ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64A3U__\",     0x2000, 0x0, 2, \"x64a3u\")\n-AVR_MCU (\"atxmega64a4u\",     ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64A4U__\",     0x2000, 0x0, 2, \"x64a4u\")\n-AVR_MCU (\"atxmega64b1\",      ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64B1__\",      0x2000, 0x0, 2, \"x64b1\")\n-AVR_MCU (\"atxmega64b3\",      ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64B3__\",      0x2000, 0x0, 2, \"x64b3\")\n-AVR_MCU (\"atxmega64c3\",      ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64C3__\",      0x2000, 0x0, 2, \"x64c3\")\n-AVR_MCU (\"atxmega64d4\",      ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_ATxmega64D4__\",      0x2000, 0x0, 2, \"x64d4\")\n+AVR_MCU (\"avrxmega4\",        ARCH_AVRXMEGA4, AVR_ISA_NONE, NULL,                   0x2000, 0x0, 2)\n+AVR_MCU (\"atxmega64a3\",      ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_ATxmega64A3__\",  0x2000, 0x0, 2)\n+AVR_MCU (\"atxmega64d3\",      ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_ATxmega64D3__\",  0x2000, 0x0, 2)\n+AVR_MCU (\"atxmega64a3u\",     ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64A3U__\", 0x2000, 0x0, 2)\n+AVR_MCU (\"atxmega64a4u\",     ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64A4U__\", 0x2000, 0x0, 2)\n+AVR_MCU (\"atxmega64b1\",      ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64B1__\",  0x2000, 0x0, 2)\n+AVR_MCU (\"atxmega64b3\",      ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64B3__\",  0x2000, 0x0, 2)\n+AVR_MCU (\"atxmega64c3\",      ARCH_AVRXMEGA4, AVR_ISA_RMW,  \"__AVR_ATxmega64C3__\",  0x2000, 0x0, 2)\n+AVR_MCU (\"atxmega64d4\",      ARCH_AVRXMEGA4, AVR_ISA_NONE, \"__AVR_ATxmega64D4__\",  0x2000, 0x0, 2)\n /* Xmega, 64K < Flash <= 128K, RAM > 64K */\n-AVR_MCU (\"avrxmega5\",        ARCH_AVRXMEGA5, AVR_ISA_NONE, NULL,                       0x2000, 0x0, 2, \"x64a1\")\n-AVR_MCU (\"atxmega64a1\",      ARCH_AVRXMEGA5, AVR_ISA_NONE, \"__AVR_ATxmega64A1__\",      0x2000, 0x0, 2, \"x64a1\")\n-AVR_MCU (\"atxmega64a1u\",     ARCH_AVRXMEGA5, AVR_ISA_RMW,  \"__AVR_ATxmega64A1U__\",     0x2000, 0x0, 2, \"x64a1u\")\n+AVR_MCU (\"avrxmega5\",        ARCH_AVRXMEGA5, AVR_ISA_NONE, NULL,                   0x2000, 0x0, 2)\n+AVR_MCU (\"atxmega64a1\",      ARCH_AVRXMEGA5, AVR_ISA_NONE, \"__AVR_ATxmega64A1__\",  0x2000, 0x0, 2)\n+AVR_MCU (\"atxmega64a1u\",     ARCH_AVRXMEGA5, AVR_ISA_RMW,  \"__AVR_ATxmega64A1U__\", 0x2000, 0x0, 2)\n /* Xmega, 128K < Flash, RAM <= 64K */\n-AVR_MCU (\"avrxmega6\",        ARCH_AVRXMEGA6, AVR_ISA_NONE, NULL,                       0x2000, 0x0, 6, \"x128a3\")\n-AVR_MCU (\"atxmega128a3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega128A3__\",     0x2000, 0x0, 3, \"x128a3\")\n-AVR_MCU (\"atxmega128d3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega128D3__\",     0x2000, 0x0, 3, \"x128d3\")\n-AVR_MCU (\"atxmega192a3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega192A3__\",     0x2000, 0x0, 4, \"x192a3\")\n-AVR_MCU (\"atxmega192d3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega192D3__\",     0x2000, 0x0, 4, \"x192d3\")\n-AVR_MCU (\"atxmega256a3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega256A3__\",     0x2000, 0x0, 5, \"x256a3\")\n-AVR_MCU (\"atxmega256a3b\",    ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega256A3B__\",    0x2000, 0x0, 5, \"x256a3b\")\n-AVR_MCU (\"atxmega256a3bu\",   ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega256A3BU__\",   0x2000, 0x0, 5, \"x256a3bu\")\n-AVR_MCU (\"atxmega256d3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega256D3__\",     0x2000, 0x0, 5, \"x256d3\")\n-AVR_MCU (\"atxmega128a3u\",    ARCH_AVRXMEGA6, AVR_ISA_RMW, \"__AVR_ATxmega128A3U__\",    0x2000, 0x0, 3, \"x128a3u\")\n-AVR_MCU (\"atxmega128b1\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega128B1__\",     0x2000, 0x0, 3, \"x128b1\")\n-AVR_MCU (\"atxmega128b3\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega128B3__\",     0x2000, 0x0, 3, \"x128b3\")\n-AVR_MCU (\"atxmega128c3\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega128C3__\",     0x2000, 0x0, 3, \"x128c3\")\n-AVR_MCU (\"atxmega128d4\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega128D4__\",     0x2000, 0x0, 3, \"x128d4\")\n-AVR_MCU (\"atxmega192a3u\",    ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega192A3U__\",    0x2000, 0x0, 4, \"x192a3u\")\n-AVR_MCU (\"atxmega192c3\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega192C3__\",     0x2000, 0x0, 4, \"x192c3\")\n-AVR_MCU (\"atxmega256a3u\",    ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega256A3U__\",    0x2000, 0x0, 5, \"x256a3u\")\n-AVR_MCU (\"atxmega256c3\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega256C3__\",     0x2000, 0x0, 5, \"x256c3\")\n-AVR_MCU (\"atxmega384c3\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega384C3__\",     0x2000, 0x0, 6, \"x384c3\")\n-AVR_MCU (\"atxmega384d3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega384D3__\",     0x2000, 0x0, 6, \"x384d3\")\n+AVR_MCU (\"avrxmega6\",        ARCH_AVRXMEGA6, AVR_ISA_NONE, NULL,                       0x2000, 0x0, 6)\n+AVR_MCU (\"atxmega128a3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega128A3__\",     0x2000, 0x0, 3)\n+AVR_MCU (\"atxmega128d3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega128D3__\",     0x2000, 0x0, 3)\n+AVR_MCU (\"atxmega192a3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega192A3__\",     0x2000, 0x0, 4)\n+AVR_MCU (\"atxmega192d3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega192D3__\",     0x2000, 0x0, 4)\n+AVR_MCU (\"atxmega256a3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega256A3__\",     0x2000, 0x0, 5)\n+AVR_MCU (\"atxmega256a3b\",    ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega256A3B__\",    0x2000, 0x0, 5)\n+AVR_MCU (\"atxmega256a3bu\",   ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega256A3BU__\",   0x2000, 0x0, 5)\n+AVR_MCU (\"atxmega256d3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega256D3__\",     0x2000, 0x0, 5)\n+AVR_MCU (\"atxmega128a3u\",    ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega128A3U__\",    0x2000, 0x0, 3)\n+AVR_MCU (\"atxmega128b1\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega128B1__\",     0x2000, 0x0, 3)\n+AVR_MCU (\"atxmega128b3\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega128B3__\",     0x2000, 0x0, 3)\n+AVR_MCU (\"atxmega128c3\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega128C3__\",     0x2000, 0x0, 3)\n+AVR_MCU (\"atxmega128d4\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega128D4__\",     0x2000, 0x0, 3)\n+AVR_MCU (\"atxmega192a3u\",    ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega192A3U__\",    0x2000, 0x0, 4)\n+AVR_MCU (\"atxmega192c3\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega192C3__\",     0x2000, 0x0, 4)\n+AVR_MCU (\"atxmega256a3u\",    ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega256A3U__\",    0x2000, 0x0, 5)\n+AVR_MCU (\"atxmega256c3\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega256C3__\",     0x2000, 0x0, 5)\n+AVR_MCU (\"atxmega384c3\",     ARCH_AVRXMEGA6, AVR_ISA_RMW,  \"__AVR_ATxmega384C3__\",     0x2000, 0x0, 6)\n+AVR_MCU (\"atxmega384d3\",     ARCH_AVRXMEGA6, AVR_ISA_NONE, \"__AVR_ATxmega384D3__\",     0x2000, 0x0, 6)\n /* Xmega, 128K < Flash, RAM > 64K RAM.  */\n-AVR_MCU (\"avrxmega7\",        ARCH_AVRXMEGA7, AVR_ISA_NONE, NULL,                       0x2000, 0x0, 3, \"x128a1\")\n-AVR_MCU (\"atxmega128a1\",     ARCH_AVRXMEGA7, AVR_ISA_NONE, \"__AVR_ATxmega128A1__\",     0x2000, 0x0, 3, \"x128a1\")\n-AVR_MCU (\"atxmega128a1u\",    ARCH_AVRXMEGA7, AVR_ISA_RMW,  \"__AVR_ATxmega128A1U__\",    0x2000, 0x0, 3, \"x128a1u\")\n-AVR_MCU (\"atxmega128a4u\",    ARCH_AVRXMEGA7, AVR_ISA_RMW,  \"__AVR_ATxmega128A4U__\",    0x2000, 0x0, 3, \"x128a4u\")\n+AVR_MCU (\"avrxmega7\",        ARCH_AVRXMEGA7, AVR_ISA_NONE, NULL,                       0x2000, 0x0, 3)\n+AVR_MCU (\"atxmega128a1\",     ARCH_AVRXMEGA7, AVR_ISA_NONE, \"__AVR_ATxmega128A1__\",     0x2000, 0x0, 3)\n+AVR_MCU (\"atxmega128a1u\",    ARCH_AVRXMEGA7, AVR_ISA_RMW,  \"__AVR_ATxmega128A1U__\",    0x2000, 0x0, 3)\n+AVR_MCU (\"atxmega128a4u\",    ARCH_AVRXMEGA7, AVR_ISA_RMW,  \"__AVR_ATxmega128A4U__\",    0x2000, 0x0, 3)\n /* Tiny family */\n-AVR_MCU (\"avrtiny\",          ARCH_AVRTINY,   AVR_ISA_NONE, NULL,                       0x0040, 0x0, 1, \"tn10\")\n-AVR_MCU (\"attiny4\",          ARCH_AVRTINY,   AVR_ISA_NONE, \"__AVR_ATtiny4__\",          0x0040, 0x0, 1, \"tn4\")\n-AVR_MCU (\"attiny5\",          ARCH_AVRTINY,   AVR_ISA_NONE, \"__AVR_ATtiny5__\",          0x0040, 0x0, 1, \"tn5\")\n-AVR_MCU (\"attiny9\",          ARCH_AVRTINY,   AVR_ISA_NONE, \"__AVR_ATtiny9__\",          0x0040, 0x0, 1, \"tn9\") \n-AVR_MCU (\"attiny10\",         ARCH_AVRTINY,   AVR_ISA_NONE, \"__AVR_ATtiny10__\",         0x0040, 0x0, 1, \"tn10\")\n-AVR_MCU (\"attiny20\",         ARCH_AVRTINY,   AVR_ISA_NONE, \"__AVR_ATtiny20__\",         0x0040, 0x0, 1, \"tn20\")\n-AVR_MCU (\"attiny40\",         ARCH_AVRTINY,   AVR_ISA_NONE, \"__AVR_ATtiny40__\",         0x0040, 0x0, 1, \"tn40\")\n+AVR_MCU (\"avrtiny\",          ARCH_AVRTINY, AVR_ISA_NONE, NULL,                     0x0040, 0x0, 1)\n+AVR_MCU (\"attiny4\",          ARCH_AVRTINY, AVR_ISA_NONE, \"__AVR_ATtiny4__\",        0x0040, 0x0, 1)\n+AVR_MCU (\"attiny5\",          ARCH_AVRTINY, AVR_ISA_NONE, \"__AVR_ATtiny5__\",        0x0040, 0x0, 1)\n+AVR_MCU (\"attiny9\",          ARCH_AVRTINY, AVR_ISA_NONE, \"__AVR_ATtiny9__\",        0x0040, 0x0, 1) \n+AVR_MCU (\"attiny10\",         ARCH_AVRTINY, AVR_ISA_NONE, \"__AVR_ATtiny10__\",       0x0040, 0x0, 1)\n+AVR_MCU (\"attiny20\",         ARCH_AVRTINY, AVR_ISA_NONE, \"__AVR_ATtiny20__\",       0x0040, 0x0, 1)\n+AVR_MCU (\"attiny40\",         ARCH_AVRTINY, AVR_ISA_NONE, \"__AVR_ATtiny40__\",       0x0040, 0x0, 1)\n /* Assembler only.  */\n-AVR_MCU (\"avr1\",                 ARCH_AVR1, AVR_ISA_NONE, NULL,                        0x0060, 0x0, 1, \"s1200\")\n-AVR_MCU (\"at90s1200\",            ARCH_AVR1, AVR_ISA_NONE, \"__AVR_AT90S1200__\",         0x0060, 0x0, 1, \"s1200\")\n-AVR_MCU (\"attiny11\",             ARCH_AVR1, AVR_ISA_NONE, \"__AVR_ATtiny11__\",          0x0060, 0x0, 1, \"tn11\")\n-AVR_MCU (\"attiny12\",             ARCH_AVR1, AVR_ISA_NONE, \"__AVR_ATtiny12__\",          0x0060, 0x0, 1, \"tn12\")\n-AVR_MCU (\"attiny15\",             ARCH_AVR1, AVR_ISA_NONE, \"__AVR_ATtiny15__\",          0x0060, 0x0, 1, \"tn15\")\n-AVR_MCU (\"attiny28\",             ARCH_AVR1, AVR_ISA_NONE, \"__AVR_ATtiny28__\",          0x0060, 0x0, 1, \"tn28\")\n+AVR_MCU (\"avr1\",             ARCH_AVR1, AVR_ISA_NONE, NULL,                        0x0060, 0x0, 1)\n+AVR_MCU (\"at90s1200\",        ARCH_AVR1, AVR_ISA_NONE, \"__AVR_AT90S1200__\",         0x0060, 0x0, 1)\n+AVR_MCU (\"attiny11\",         ARCH_AVR1, AVR_ISA_NONE, \"__AVR_ATtiny11__\",          0x0060, 0x0, 1)\n+AVR_MCU (\"attiny12\",         ARCH_AVR1, AVR_ISA_NONE, \"__AVR_ATtiny12__\",          0x0060, 0x0, 1)\n+AVR_MCU (\"attiny15\",         ARCH_AVR1, AVR_ISA_NONE, \"__AVR_ATtiny15__\",          0x0060, 0x0, 1)\n+AVR_MCU (\"attiny28\",         ARCH_AVR1, AVR_ISA_NONE, \"__AVR_ATtiny28__\",          0x0060, 0x0, 1)"}, {"sha": "5de5f90439df1f20e0380409b5c7d8c2ee13f842", "filename": "gcc/config/avr/avr.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fconfig%2Favr%2Favr.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fconfig%2Favr%2Favr.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.opt?ref=076d86f3d2c8df6678b65fca53e1910e3a6c87bc", "patch": "@@ -94,3 +94,7 @@ Warn if the address space of an address is changed.\n mfract-convert-truncate\n Target Report Mask(FRACT_CONV_TRUNC)\n Allow to use truncation instead of rounding towards 0 for fractional int types\n+\n+nodevicelib\n+Driver Target Report RejectNegative\n+Do not link against the device-specific library libdev.a"}, {"sha": "59e64850b24f375de1706f5636f9f45bc59ea181", "filename": "gcc/config/avr/avrlibc.h", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fconfig%2Favr%2Favrlibc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fconfig%2Favr%2Favrlibc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favrlibc.h?ref=076d86f3d2c8df6678b65fca53e1910e3a6c87bc", "patch": "@@ -19,21 +19,17 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* AVR-Libc implements functions from libgcc.a in libm.a, see PR54461.\n-   More AVR-Libc specific specs originate from gen-avr-mmcu-specs.c:\n-\n-   - LIBGCC_SPEC (*libgcc)\n-   - LIB_SPEC (*lib)\n-   \n-*/\n-\n #undef  LIB_SPEC\n #define LIB_SPEC                                \\\n-  \" -lc %(avrlibc_devicelib) \"\n+  \"%{!mmcu=avr1:-lc} %(avrlibc_devicelib)\"\n+\n+// AVR-Libc implements functions from libgcc.a in libm.a, see PR54461.\n+// For a list of functions which are provided by libm.a and are\n+// omitted from libgcc.a see libgcc's t-avrlibc.\n \n #undef  LIBGCC_SPEC\n #define LIBGCC_SPEC                             \\\n-  \" -lgcc -lm \"\n+  \"%{!mmcu=avr1:-lgcc -lm}\"\n \n #undef  STARTFILE_SPEC\n #define STARTFILE_SPEC                          \\"}, {"sha": "dbc5043d99667ce472fb9f40a0b4b7d5fe6c9a7d", "filename": "gcc/config/avr/driver-avr.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fconfig%2Favr%2Fdriver-avr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fconfig%2Favr%2Fdriver-avr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fdriver-avr.c?ref=076d86f3d2c8df6678b65fca53e1910e3a6c87bc", "patch": "@@ -24,6 +24,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"tm.h\"\n \n+// Remove -nodevicelib from the command line if not needed\n+#define X_NODEVLIB \"%<nodevicelib\"\n+\n static const char dir_separator_str[] = { DIR_SEPARATOR, 0 };\n \n static const char specfiles_doc_url[] =\n@@ -46,7 +49,7 @@ avr_diagnose_devicespecs_error (const char *mcu, const char *filename)\n   inform (input_location, \"you can provide your own specs files, \"\n           \"see <%s> for details\", specfiles_doc_url);\n \n-  return \"\";\n+  return X_NODEVLIB;\n }\n \n \n@@ -73,7 +76,7 @@ avr_devicespecs_file (int argc, const char **argv)\n     case 0:\n       fatal_error (input_location,\n                    \"bad usage of spec function %qs\", \"device-specs-file\");\n-      return \"\";\n+      return X_NODEVLIB;\n \n     case 1:\n       mmcu = AVR_MMCU_DEFAULT;\n@@ -85,7 +88,7 @@ avr_devicespecs_file (int argc, const char **argv)\n \n     default:\n       error (\"specified option %qs more than once\", \"-mmcu=\");\n-      return \"\";\n+      return X_NODEVLIB;\n     }\n \n   specfile_name = concat (argv[0], dir_separator_str, \"specs-\", mmcu, NULL);\n@@ -105,7 +108,7 @@ avr_devicespecs_file (int argc, const char **argv)\n       {\n         error (\"strange device name %qs after %qs: bad character %qc\",\n                mmcu, \"-mmcu=\", *s);\n-        return \"\";\n+        return X_NODEVLIB;\n       }\n \n   if (/* When building / configuring the compiler we might get a relative path\n@@ -117,7 +120,16 @@ avr_devicespecs_file (int argc, const char **argv)\n       || (IS_ABSOLUTE_PATH (specfile_name)\n           && !access (specfile_name, R_OK)))\n     {\n-      return concat (\"-specs=\", specfile_name, NULL);\n+      return concat (\"-specs=device-specs\", dir_separator_str, \"specs-\", mmcu,\n+                     // Use '%s' instead of the expanded specfile_name.  This\n+                     // is the easiest way to handle pathes containing spaces.\n+                     \"%s\",\n+#if defined (WITH_AVRLIBC)\n+                     \" %{mmcu=avr*:\" X_NODEVLIB \"} %{!mmcu=*:\" X_NODEVLIB \"}\",\n+#else\n+                     \" \" X_NODEVLIB,\n+#endif\n+                     NULL);\n     }\n \n   return avr_diagnose_devicespecs_error (mmcu, specfile_name);"}, {"sha": "3594d8a77126dc443f3e056c1173b0621f569c26", "filename": "gcc/config/avr/gen-avr-mmcu-specs.c", "status": "modified", "additions": 77, "deletions": 51, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.c?ref=076d86f3d2c8df6678b65fca53e1910e3a6c87bc", "patch": "@@ -78,6 +78,40 @@ static const char header[] =\n   \"# for a documentation of spec files.\\n\"\n   \"\\n\";\n \n+static const char help_copy_paste[] =\n+  \"# If you intend to use an existing device specs file as a starting point\\n\"\n+  \"# for a new device spec file, make sure you are copying from a specs\\n\"\n+  \"# file for a device from the same core architecture and SP width.\\n\";\n+\n+#if defined (WITH_AVRLIBC)\n+static const char help_dev_lib_name[] =\n+  \"# AVR-LibC's avr/io.h uses the device specifying macro to determine\\n\"\n+  \"# the name of the device header.  For example, -mmcu=atmega8a triggers\\n\"\n+  \"# the definition of __AVR_ATmega8A__ and avr/io.h includes the device\\n\"\n+  \"# header 'iom8a.h' by means of:\\n\"\n+  \"#\\n\"\n+  \"#     ...\\n\"\n+  \"#     #elif defined (__AVR_ATmega8A__)\\n\"\n+  \"#     #  include <avr/iom8a.h>\\n\"\n+  \"#     #elif ...\\n\"\n+  \"# \\n\"\n+  \"# If no device macro is defined, AVR-LibC uses __AVR_DEV_LIB_NAME__\\n\"\n+  \"# as fallback to determine the name of the device header as\\n\"\n+  \"#\\n\"\n+  \"#     \\\"avr/io\\\" + __AVR_DEV_LIB_NAME__ + \\\".h\\\"\\n\"\n+  \"#\\n\"\n+  \"# If you provide your own specs file for a device not yet known to\\n\"\n+  \"# AVR-LibC, you can now define the hook macro __AVR_DEV_LIB_NAME__\\n\"\n+  \"# as needed so that\\n\"\n+  \"#\\n\"\n+  \"#     #include <avr/io.h>\\n\"\n+  \"#\\n\"\n+  \"# will include the desired device header.  For ATmega8A the supplement\\n\"\n+  \"# to *cpp would read\\n\"\n+  \"#\\n\"\n+  \"#     -D__AVR_DEV_LIB_NAME__=m8a\\n\"\n+  \"\\n\";\n+#endif // WITH_AVRLIBC\n \n static void\n print_mcu (const avr_mcu_t *mcu)\n@@ -128,19 +162,25 @@ print_mcu (const avr_mcu_t *mcu)\n              mcu->name, arch->name, sp8 ? 8 : 16);\n   fprintf (f, \"%s\\n\", header);\n \n-  // avrlibc-specific specs for linking / thelinker.\n-\n-  fprintf (f, \"*avrlibc_startfile:\\n\");\n   if (is_device)\n-    fprintf (f, \"\\tdev/%s/crt1.o%%s\", mcu->name);\n-  fprintf (f, \"\\n\\n\");\n+    fprintf (f, \"%s\\n\", help_copy_paste);\n+\n+#if defined (WITH_AVRLIBC)\n+  // AVR-LibC specific.  See avrlibc.h for the specs using them as subspecs.\n \n-  fprintf (f, \"*avrlibc_devicelib:\\n\");\n   if (is_device)\n-    fprintf (f, \"\\tdev/%s/libdev.a%%s\", mcu->name);\n-  fprintf (f, \"\\n\\n\");\n+    {\n+      fprintf (f, \"*avrlibc_startfile:\\n\");\n+      fprintf (f, \"\\tdev/%s/crt1.o%%s\", mcu->name);\n+      fprintf (f, \"\\n\\n\");\n+\n+      fprintf (f, \"*avrlibc_devicelib:\\n\");\n+      fprintf (f, \"\\t%%{!nodevicelib:dev/%s/libdev.a%%s}\", mcu->name);\n+      fprintf (f, \"\\n\\n\");\n+    }\n+#endif  // WITH_AVRLIBC\n \n-  // avr-specific specs for the compilation / the compiler proper.\n+  // avr-gcc specific specs for the compilation / the compiler proper.\n \n   fprintf (f, \"*cc1_n_flash:\\n\"\n            \"\\t%%{!mn-flash=*:-mn-flash=%d}\\n\\n\", mcu->n_flash);\n@@ -153,19 +193,19 @@ print_mcu (const avr_mcu_t *mcu)\n            ? \"\\t%{!mno-skip-bug: -mskip-bug}\"\n            : \"\\t%{!mskip-bug: -mno-skip-bug}\");\n \n-  // avr-specific specs for assembling / the assembler.\n+  // avr-gcc specific specs for assembling / the assembler.\n \n   fprintf (f, \"*asm_arch:\\n\\t-mmcu=%s\\n\\n\", arch->name);\n \n #ifdef HAVE_AS_AVR_MLINK_RELAX_OPTION\n   fprintf (f, \"*asm_relax:\\n\\t%s\\n\\n\", ASM_RELAX_SPEC);\n-#endif // have as --mlink-relax\n+#endif // have avr-as --mlink-relax\n \n #ifdef HAVE_AS_AVR_MRMW_OPTION\n   fprintf (f, \"*asm_rmw:\\n%s\\n\\n\", rmw\n            ? \"\\t%{!mno-rmw: -mrmw}\"\n            : \"\\t%{mrmw}\");\n-#endif // have as -mrmw\n+#endif // have avr-as -mrmw\n \n   fprintf (f, \"*asm_errata_skip:\\n%s\\n\\n\", errata_skip\n            ? \"\\t%{mno-skip-bug}\"\n@@ -192,50 +232,36 @@ print_mcu (const avr_mcu_t *mcu)\n \n   fprintf (f, \"*link_arch:\\n\\t%s\\n\\n\", LINK_ARCH_SPEC);\n \n-  fprintf (f, \"*link_data_start:\\n\");\n-  if (mcu->data_section_start\n-      != arch->default_data_section_start)\n-    fprintf (f, \"\\t-Tdata 0x%lX\", 0x800000UL + mcu->data_section_start);\n-  fprintf (f, \"\\n\\n\");\n-\n-  fprintf (f, \"*link_text_start:\\n\");\n-  if (mcu->text_section_start != 0x0)\n-    fprintf (f, \"\\t-Ttext 0x%lX\", 0UL + mcu->text_section_start);\n-  fprintf (f, \"\\n\\n\");\n-\n-  // Default specs.  Rewritten to the device-specific specs file so\n-  // they can be adjusted as needed.\n-     \n-  bool has_libs = arch_id != ARCH_AVR1;\n-\n-  fprintf (f, \"*self_spec:\\n\");\n   if (is_device)\n-    fprintf (f, \"\\t%%{!mmcu=avr*: %%<mmcu=* -mmcu=%s} \", arch->name);\n-  fprintf (f, \"%s\\n\\n\", sp8_spec);\n-\n-  fprintf (f, \"*cpp:\\n\");\n-  if (is_device)\n-    fprintf (f,\"\\t-D__AVR_DEV_LIB_NAME__=%s\"\n-             \" -D%s\"\n-\t     \" -D__AVR_DEVICE_NAME__=%s\",\n-\t     mcu->library_name, mcu->macro, mcu->name);\n-  fprintf (f, \"\\n\\n\");\n-\n-  fprintf (f, \"*cc1:\\n\\t%s\\n\\n\", CC1_SPEC);\n-\n-  fprintf (f, \"*cc1plus:\\n\\t%s\\n\\n\", CC1PLUS_SPEC);\n-\n-  fprintf (f, \"*asm:\\n\\t%s\\n\\n\", ASM_SPEC);\n-\n-  fprintf (f, \"*link:\\n\\t%s\\n\\n\", LINK_SPEC);\n+    {\n+      fprintf (f, \"*link_data_start:\\n\");\n+      if (mcu->data_section_start\n+          != arch->default_data_section_start)\n+        fprintf (f, \"\\t-Tdata 0x%lX\", 0x800000UL + mcu->data_section_start);\n+      fprintf (f, \"\\n\\n\");\n+\n+      fprintf (f, \"*link_text_start:\\n\");\n+      if (mcu->text_section_start != 0x0)\n+        fprintf (f, \"\\t-Ttext 0x%lX\", 0UL + mcu->text_section_start);\n+      fprintf (f, \"\\n\\n\");\n+    }\n \n-  fprintf (f, \"*lib:\\n\\t%s\\n\\n\", has_libs ? LIB_SPEC : \"\");\n+  // Specs known to GCC.\n \n-  fprintf (f, \"*libgcc:\\n\\t%s\\n\\n\", has_libs ? LIBGCC_SPEC : \"\");\n+  if (is_device)\n+    {\n+      fprintf (f, \"*self_spec:\\n\");\n+      fprintf (f, \"\\t%%{!mmcu=avr*: %%<mmcu=* -mmcu=%s} \", arch->name);\n+      fprintf (f, \"%s\\n\\n\", sp8_spec);\n \n-  fprintf (f, \"*startfile:\\n\\t%s\\n\\n\", STARTFILE_SPEC);\n+#if defined (WITH_AVRLIBC)\n+      fprintf (f, \"%s\\n\", help_dev_lib_name);\n+#endif // WITH_AVRLIBC\n \n-  fprintf (f, \"*endfile:\\n%s\\n\\n\", ENDFILE_SPEC);\n+      fprintf (f, \"*cpp:\\n\");\n+      fprintf (f, \"\\t-D%s -D__AVR_DEVICE_NAME__=%s\", mcu->macro, mcu->name);\n+      fprintf (f, \"\\n\\n\");\n+    }\n \n   fprintf (f, \"# End of file\\n\");\n }"}, {"sha": "e685ca244f8ceeadcb9ecae6b67d75e34d2e20d3", "filename": "gcc/config/avr/specs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fconfig%2Favr%2Fspecs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fconfig%2Favr%2Fspecs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fspecs.h?ref=076d86f3d2c8df6678b65fca53e1910e3a6c87bc", "patch": "@@ -68,10 +68,10 @@ along with GCC; see the file COPYING3.  If not see\n   \"%{shared:%eshared is not supported} \"\n \n #undef  LIB_SPEC\n-#define LIB_SPEC \" -lc \"\n+#define LIB_SPEC \" %{!mmcu=avr1:-lc} \"\n \n #undef  LIBGCC_SPEC\n-#define LIBGCC_SPEC \" -lgcc \"\n+#define LIBGCC_SPEC \" %{!mmcu=avr1:-lgcc} \"\n \n #define STARTFILE_SPEC \"\"\n #define ENDFILE_SPEC \"\""}, {"sha": "337d921532603d0ef04209065b3bc80c2310edd5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/076d86f3d2c8df6678b65fca53e1910e3a6c87bc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=076d86f3d2c8df6678b65fca53e1910e3a6c87bc", "patch": "@@ -572,7 +572,7 @@ Objective-C and Objective-C++ Dialects}.\n @emph{AVR Options}\n @gccoptlist{-mmcu=@var{mcu} -maccumulate-args -mbranch-cost=@var{cost} @gol\n -mcall-prologues -mint8 -mn_flash=@var{size} -mno-interrupts @gol\n--mrelax -mrmw -mstrict-X -mtiny-stack -Waddr-space-convert}\n+-mrelax -mrmw -mstrict-X -mtiny-stack -nodevicelib -Waddr-space-convert}\n \n @emph{Blackfin Options}\n @gccoptlist{-mcpu=@var{cpu}@r{[}-@var{sirevision}@r{]} @gol\n@@ -13572,6 +13572,10 @@ sbiw r26, const   ; X -= const\n @opindex mtiny-stack\n Only change the lower 8@tie{}bits of the stack pointer.\n \n+@item -nodevicelib\n+@opindex nodevicelib\n+Don't link against AVR-LibC's device specific library @code{libdev.a}.\n+\n @item -Waddr-space-convert\n @opindex Waddr-space-convert\n Warn about conversions between address spaces in the case where the"}]}