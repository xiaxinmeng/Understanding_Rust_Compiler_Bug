{"sha": "706c4bb76caf0bf9cef5f12d94c9b52d9594e433", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA2YzRiYjc2Y2FmMGJmOWNlZjVmMTJkOTRjOWI1MmQ5NTk0ZTQzMw==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2006-10-06T09:12:09Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2006-10-06T09:12:09Z"}, "message": "gimplify.c (gimplify_type_sizes): Don't recurse on the pointed-to type.\n\n\t* gimplify.c (gimplify_type_sizes) [POINTER_TYPE, REFERENCE_TYPE]:\n\tDon't recurse on the pointed-to type.\n\t* c-decl.c (grokdeclarator) [cdk_pointer]: If we are in a NORMAL or\n\tDECL context, attach an artificial TYPE_DECL to anonymous pointed-to\n\ttypes with components of variable size.\n\n\t* testsuite/gcc.dg/typename-vla-1.c: New case.\n\t* testsuite/gnat.dg/forward_vla.adb: New case.\n\nFrom-SVN: r117493", "tree": {"sha": "27fdba5cec2529f809c49eb8024849092cb5d4d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27fdba5cec2529f809c49eb8024849092cb5d4d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/706c4bb76caf0bf9cef5f12d94c9b52d9594e433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/706c4bb76caf0bf9cef5f12d94c9b52d9594e433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/706c4bb76caf0bf9cef5f12d94c9b52d9594e433", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/706c4bb76caf0bf9cef5f12d94c9b52d9594e433/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d51dc9ec6c2b5e94031936baca7763d9c3b4f1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d51dc9ec6c2b5e94031936baca7763d9c3b4f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d51dc9ec6c2b5e94031936baca7763d9c3b4f1c"}], "stats": {"total": 97, "additions": 96, "deletions": 1}, "files": [{"sha": "f9596e82c321cb1fb9999833965908c2a6421476", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706c4bb76caf0bf9cef5f12d94c9b52d9594e433/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706c4bb76caf0bf9cef5f12d94c9b52d9594e433/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=706c4bb76caf0bf9cef5f12d94c9b52d9594e433", "patch": "@@ -1,3 +1,11 @@\n+2006-10-06  Olivier Hainque  <hainque@adacore.com>\n+\t\n+\t* gimplify.c (gimplify_type_sizes) [POINTER_TYPE, REFERENCE_TYPE]:\n+\tDon't recurse on the pointed-to type.\n+\t* c-decl.c (grokdeclarator) [cdk_pointer]: If we are in a NORMAL or\n+\tDECL context, attach an artificial TYPE_DECL to anonymous pointed-to\n+\ttypes with components of variable size.\n+\n 2006-10-06  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \tconfig/i386/mingw32.h (GOMP_SELF_SPECS): Add -mthreads for openmp."}, {"sha": "6379a1e29740210e151e2fb1dfcdfd2efa0dd6db", "filename": "gcc/c-decl.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706c4bb76caf0bf9cef5f12d94c9b52d9594e433/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706c4bb76caf0bf9cef5f12d94c9b52d9594e433/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=706c4bb76caf0bf9cef5f12d94c9b52d9594e433", "patch": "@@ -4471,6 +4471,40 @@ grokdeclarator (const struct c_declarator *declarator,\n \t      type = c_build_qualified_type (type, type_quals);\n \t    size_varies = 0;\n \n+\t    /* When the pointed-to type involves components of variable size,\n+\t       care must be taken to ensure that the size evaluation code is\n+\t       emitted early enough to dominate all the possible later uses\n+\t       and late enough for the variables on which it depends to have\n+\t       been assigned.\n+\n+\t       This is expected to happen automatically when the pointed-to\n+\t       type has a name/declaration of it's own, but special attention\n+\t       is required if the type is anonymous.\n+\n+\t       We handle the NORMAL and FIELD contexts here by attaching an\n+\t       artificial TYPE_DECL to such pointed-to type.  This forces the\n+\t       sizes evaluation at a safe point and ensures it is not deferred\n+\t       until e.g. within a deeper conditional context.\n+\n+\t       We expect nothing to be needed here for PARM or TYPENAME.\n+\t       Pushing a TYPE_DECL at this point for TYPENAME would actually\n+\t       be incorrect, as we might be in the middle of an expression\n+\t       with side effects on the pointed-to type size \"arguments\" prior\n+\t       to the pointer declaration point and the fake TYPE_DECL in the\n+\t       enclosing context would force the size evaluation prior to the\n+\t       side effects.  */\n+\n+\t    if (!TYPE_NAME (type)\n+\t\t&& (decl_context == NORMAL || decl_context == FIELD)\n+\t\t&& variably_modified_type_p (type, NULL_TREE))\n+\t      {\n+\t\ttree decl = build_decl (TYPE_DECL, NULL_TREE, type);\n+\t\tDECL_ARTIFICIAL (decl) = 1;\n+\t\tpushdecl (decl);\n+\t\tfinish_decl (decl, NULL_TREE, NULL_TREE);\n+\t\tTYPE_NAME (type) = decl;\n+\t      }\n+\n \t    type = build_pointer_type (type);\n \n \t    /* Process type qualifiers (such as const or volatile)"}, {"sha": "faa5b48baad953c4875f40312f818915b2437f05", "filename": "gcc/gimplify.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706c4bb76caf0bf9cef5f12d94c9b52d9594e433/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706c4bb76caf0bf9cef5f12d94c9b52d9594e433/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=706c4bb76caf0bf9cef5f12d94c9b52d9594e433", "patch": "@@ -6043,7 +6043,18 @@ gimplify_type_sizes (tree type, tree *list_p)\n \n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n-      gimplify_type_sizes (TREE_TYPE (type), list_p);\n+\t/* We used to recurse on the pointed-to type here, which turned out to\n+\t   be incorrect because its definition might refer to variables not\n+\t   yet initialized at this point if a forward declaration is involved.\n+\n+\t   It was actually useful for anonymous pointed-to types to ensure\n+\t   that the sizes evaluation dominates every possible later use of the\n+\t   values.  Restricting to such types here would be safe since there\n+\t   is no possible forward declaration around, but would introduce a\n+\t   undesireable middle-end semantic to anonymity.  We then defer to\n+\t   front-ends the responsibilty of ensuring that the sizes are\n+\t   evaluated both early and late enough, e.g. by attaching artifical\n+\t   type declarations to the tree.  */\n       break;\n \n     default:"}, {"sha": "43988d7250e2c07aafb90b842542bde6964616a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706c4bb76caf0bf9cef5f12d94c9b52d9594e433/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706c4bb76caf0bf9cef5f12d94c9b52d9594e433/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=706c4bb76caf0bf9cef5f12d94c9b52d9594e433", "patch": "@@ -1,3 +1,8 @@\n+2006-10-06  Olivier Hainque  <hainque@adacore.com>\n+\t\n+\t* gcc.dg/typename-vla-1.c: New case.\n+\t* gnat.dg/forward_vla.adb: New case.\n+\n 2006-10-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/29290"}, {"sha": "16165131287d11342da68c0f2496393325f4ec2e", "filename": "gcc/testsuite/gcc.dg/typename-vla-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706c4bb76caf0bf9cef5f12d94c9b52d9594e433/gcc%2Ftestsuite%2Fgcc.dg%2Ftypename-vla-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706c4bb76caf0bf9cef5f12d94c9b52d9594e433/gcc%2Ftestsuite%2Fgcc.dg%2Ftypename-vla-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftypename-vla-1.c?ref=706c4bb76caf0bf9cef5f12d94c9b52d9594e433", "patch": "@@ -0,0 +1,17 @@\n+/* PR c/21536 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -Wuninitialized\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  int a = 1;\n+  if (sizeof (*(++a, (char (*)[a])0)) != 2)\n+    abort ();\n+  exit (0);\n+}\n+\n+"}, {"sha": "515112b83e347cf89530fdd50d733f53ff42f841", "filename": "gcc/testsuite/gnat.dg/forward_vla.adb", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/706c4bb76caf0bf9cef5f12d94c9b52d9594e433/gcc%2Ftestsuite%2Fgnat.dg%2Fforward_vla.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/706c4bb76caf0bf9cef5f12d94c9b52d9594e433/gcc%2Ftestsuite%2Fgnat.dg%2Fforward_vla.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fforward_vla.adb?ref=706c4bb76caf0bf9cef5f12d94c9b52d9594e433", "patch": "@@ -0,0 +1,20 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2 -gnatp -Wuninitialized\" }\n+\n+procedure Forward_Vla is\n+\n+   function N return Natural is begin return 1; end;\n+\n+   type Sequence;\n+   type Sequence_Access is access all Sequence;\n+\n+   Ptr : Sequence_Access := null;  -- freeze access type\n+\n+   Sequence_Length : Natural := N;\n+   type Sequence is array (1 .. Sequence_Length) of Natural;\n+\n+   Seq : Sequence;\n+begin\n+   Seq (1) := 0;\n+end;\n+"}]}