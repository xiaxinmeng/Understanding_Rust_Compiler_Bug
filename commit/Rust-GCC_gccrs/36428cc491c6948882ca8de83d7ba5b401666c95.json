{"sha": "36428cc491c6948882ca8de83d7ba5b401666c95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY0MjhjYzQ5MWM2OTQ4ODgyY2E4ZGU4M2Q3YmE1YjQwMTY2NmM5NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T12:56:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T12:56:13Z"}, "message": "[multiple changes]\n\n2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* inline.adb (Expand_Inlined_Call): Use a renaming declaration\n\tto capture the value of actuals of a limited type rather than\n\tan object declaration, to prevent spurious errors when analyzing\n\tthe inlined body.\n\n2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Type_Conversion): Treat an inlined body\n\tas an instance, and inhibit semantic checks on already analyzed\n\tcode to prevent spurious errors.\n\n2014-07-30  Arnaud Charlet  <charlet@adacore.com>\n\n\t* a-exctra.ads (\"=\"): New function, to restore compatibility.\n\n2014-07-30  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c (__gnat_to_os_time): Set isdst to -1 for the mktime\n\troutine to use the OS dst setting.\n\n2014-07-30  Pat Rogers  <rogers@adacore.com>\n\n\t* gnat_ugn.texi: Minor correction to description of -gnatw.K.\n\n2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Wrong_Type): Disable some checks equally within\n\tinstances and within inlined bodies, to suppress spurious type\n\terrors on already analyzed code.\n\t* sem_aggr.adb (Check_Expr_OK_In_Limited_Aggregate): Expression\n\tis legal in an inlined body, juts as it is in an instance body.\n\n2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Unchecked_Conversion): Within an inlined\n\tbody the operand of an unchecked conversion may be a literal, in\n\twhich case its type is the target type of the conversion. This\n\tis in contrast to conversions in other contexts, where the\n\toperand cannot be a literal and must be resolvable independent\n\tof the context.\n\nFrom-SVN: r213260", "tree": {"sha": "d6eb28907b5a7cb7bdfdd571cc89682faacb27c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6eb28907b5a7cb7bdfdd571cc89682faacb27c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36428cc491c6948882ca8de83d7ba5b401666c95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36428cc491c6948882ca8de83d7ba5b401666c95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36428cc491c6948882ca8de83d7ba5b401666c95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36428cc491c6948882ca8de83d7ba5b401666c95/comments", "author": null, "committer": null, "parents": [{"sha": "7c02f27b32f60d5dba1ad24df229f4db81c5682a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c02f27b32f60d5dba1ad24df229f4db81c5682a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c02f27b32f60d5dba1ad24df229f4db81c5682a"}], "stats": {"total": 99, "additions": 91, "deletions": 8}, "files": [{"sha": "2f3bd34d8b9dc68df9d2320ad01eed1e0cd7dad6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=36428cc491c6948882ca8de83d7ba5b401666c95", "patch": "@@ -1,3 +1,46 @@\n+2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* inline.adb (Expand_Inlined_Call): Use a renaming declaration\n+\tto capture the value of actuals of a limited type rather than\n+\tan object declaration, to prevent spurious errors when analyzing\n+\tthe inlined body.\n+\n+2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Type_Conversion): Treat an inlined body\n+\tas an instance, and inhibit semantic checks on already analyzed\n+\tcode to prevent spurious errors.\n+\n+2014-07-30  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-exctra.ads (\"=\"): New function, to restore compatibility.\n+\n+2014-07-30  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.c (__gnat_to_os_time): Set isdst to -1 for the mktime\n+\troutine to use the OS dst setting.\n+\n+2014-07-30  Pat Rogers  <rogers@adacore.com>\n+\n+\t* gnat_ugn.texi: Minor correction to description of -gnatw.K.\n+\n+2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Wrong_Type): Disable some checks equally within\n+\tinstances and within inlined bodies, to suppress spurious type\n+\terrors on already analyzed code.\n+\t* sem_aggr.adb (Check_Expr_OK_In_Limited_Aggregate): Expression\n+\tis legal in an inlined body, juts as it is in an instance body.\n+\n+2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Unchecked_Conversion): Within an inlined\n+\tbody the operand of an unchecked conversion may be a literal, in\n+\twhich case its type is the target type of the conversion. This\n+\tis in contrast to conversions in other contexts, where the\n+\toperand cannot be a literal and must be resolvable independent\n+\tof the context.\n+\n 2014-07-30  Pierre-Marie Derodat  <derodat@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Create a"}, {"sha": "664bd75221f1aa907e3ca9b56b850b5159a147fc", "filename": "gcc/ada/a-exctra.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2Fa-exctra.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2Fa-exctra.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exctra.ads?ref=36428cc491c6948882ca8de83d7ba5b401666c95", "patch": "@@ -52,6 +52,9 @@ package Ada.Exceptions.Traceback is\n    --  occurrence, and returns it formatted in the manner required for\n    --  processing in GNAT.Traceback. See g-traceb.ads for further details.\n \n+   function \"=\" (A, B : Tracebacks_Array) return Boolean renames STBE.\"=\";\n+   --  Make \"=\" operator visible directly\n+\n    function Get_PC (TBE : STBE.Traceback_Entry) return Code_Loc\n      renames STBE.PC_For;\n    --  Returns the code address held by a given traceback entry, typically the"}, {"sha": "96dedfeb447ddcebf276063353ea60525be0a515", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=36428cc491c6948882ca8de83d7ba5b401666c95", "patch": "@@ -516,7 +516,7 @@ __gnat_to_os_time (OS_Time *p_time, int year, int month, int day,\n   v.tm_hour  = hours;\n   v.tm_min   = mins;\n   v.tm_sec   = secs;\n-  v.tm_isdst = 0;\n+  v.tm_isdst = -1;\n \n   /* returns -1 of failing, this is s-os_lib Invalid_Time */\n "}, {"sha": "cc1f7fd47b163df898d44d63ce1a307063162fc0", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=36428cc491c6948882ca8de83d7ba5b401666c95", "patch": "@@ -5415,7 +5415,7 @@ work as expected. Names of discriminants and components in records are\n not included in this check.\n \n @item -gnatw.K\n-@emph{Suppress warnings on variables that could be constants.}\n+@emph{Suppress warnings on redefinition of names in standard.}\n @cindex @option{-gnatwK} (@command{gcc})\n This switch activates warnings for declarations that declare a name that\n is defined in package Standard."}, {"sha": "86704dc052a4b109e308d6899c810904f96d961a", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=36428cc491c6948882ca8de83d7ba5b401666c95", "patch": "@@ -3834,8 +3834,12 @@ package body Inline is\n             --  call will pass the parameter by reference, and thus the inlined\n             --  code will have the same semantics.\n \n+            --  Finally, we need a renaming declaration in the case of limited\n+            --  types for which initialization cannot be by copy either.\n+\n             if Ekind (F) = E_In_Parameter\n               and then not Is_By_Reference_Type (Etype (A))\n+              and then not Is_Limited_Type (Etype (A))\n               and then\n                 (not Is_Array_Type (Etype (A))\n                   or else not Is_Object_Reference (A)"}, {"sha": "3e71ebe0de520c106a63aa8023d0be4ead46e9f7", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=36428cc491c6948882ca8de83d7ba5b401666c95", "patch": "@@ -111,6 +111,7 @@ package body Sem_Aggr is\n    --  Check that Expr is either not limited or else is one of the cases of\n    --  expressions allowed for a limited component association (namely, an\n    --  aggregate, function call, or <> notation). Report error for violations.\n+   --  Expression is also OK in an instance or inlining context.\n \n    procedure Check_Qualified_Aggregate (Level : Nat; Expr : Node_Id);\n    --  Given aggregate Expr, check that sub-aggregates of Expr that are nested\n@@ -687,10 +688,13 @@ package body Sem_Aggr is\n    begin\n       if Is_Limited_Type (Etype (Expr))\n          and then Comes_From_Source (Expr)\n-         and then not In_Instance_Body\n       then\n-         if not OK_For_Limited_Init (Etype (Expr), Expr) then\n-            Error_Msg_N (\"initialization not allowed for limited types\", Expr);\n+         if In_Instance_Body or else In_Inlined_Body then\n+            null;\n+\n+         elsif not OK_For_Limited_Init (Etype (Expr), Expr) then\n+            Error_Msg_N\n+              (\"initialization not allowed for limited types\", Expr);\n             Explain_Limited_Type (Etype (Expr), Expr);\n          end if;\n       end if;"}, {"sha": "b78b06a05e049325d778657dd72e73e5c17ef67f", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=36428cc491c6948882ca8de83d7ba5b401666c95", "patch": "@@ -4934,9 +4934,9 @@ package body Sem_Ch4 is\n       --  error message. Conversely, constant-folding in the generic may\n       --  transform the argument of a conversion into a string literal, which\n       --  is legal. Therefore the following tests are not performed in an\n-      --  instance.\n+      --  instance. The same applies to an inlined body.\n \n-      elsif In_Instance then\n+      elsif In_Instance or In_Inlined_Body then\n          return;\n \n       elsif Nkind (Expr) = N_Null then"}, {"sha": "52b717e0593df5ce16cafe5a8b1d2460fc4820c0", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=36428cc491c6948882ca8de83d7ba5b401666c95", "patch": "@@ -10680,6 +10680,20 @@ package body Sem_Res is\n       --  Resolve operand using its own type\n \n       Resolve (Operand, Opnd_Type);\n+\n+      --  In an inlined context, the unchecked conversion may be applied\n+      --  to a literal, in which case its type is the type of the context.\n+      --  (In other contexts conversions cannot apply to literals).\n+\n+      if In_Inlined_Body\n+        and then\n+          (Opnd_Type = Any_Character or else\n+           Opnd_Type = Any_Integer   or else\n+           Opnd_Type = Any_Real)\n+      then\n+         Set_Etype (Operand, Typ);\n+      end if;\n+\n       Analyze_Dimension (N);\n       Eval_Unchecked_Conversion (N);\n    end Resolve_Unchecked_Type_Conversion;"}, {"sha": "5aa63a9558596ea441cf242639c3b1c4cdc54f30", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36428cc491c6948882ca8de83d7ba5b401666c95/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=36428cc491c6948882ca8de83d7ba5b401666c95", "patch": "@@ -17254,14 +17254,29 @@ package body Sem_Util is\n       --  Similarly, full and partial views may be incorrect in the instance.\n       --  There is no simple way to insure that it is consistent ???\n \n-      elsif In_Instance then\n+      --  A similar view discrepancy can happen in an inlined body, for the\n+      --  same reason: inserted body may be outside of the original package\n+      --  and only partial views are visible at the point of insertion.\n+\n+      elsif In_Instance or else In_Inlined_Body then\n          if Etype (Etype (Expr)) = Etype (Expected_Type)\n            and then\n              (Has_Private_Declaration (Expected_Type)\n                or else Has_Private_Declaration (Etype (Expr)))\n            and then No (Parent (Expected_Type))\n          then\n             return;\n+\n+         elsif Nkind (Parent (Expr)) = N_Qualified_Expression\n+           and then Entity (Subtype_Mark (Parent (Expr))) = Expected_Type\n+         then\n+            return;\n+\n+         elsif Is_Private_Type (Expected_Type)\n+           and then Present (Full_View (Expected_Type))\n+           and then Covers (Full_View (Expected_Type), Etype (Expr))\n+         then\n+            return;\n          end if;\n       end if;\n "}]}