{"sha": "f06f5f6bd618153d66a028f7be4dbecc22913ac1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA2ZjVmNmJkNjE4MTUzZDY2YTAyOGY3YmU0ZGJlY2MyMjkxM2FjMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T09:45:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T09:45:29Z"}, "message": "[multiple changes]\n\n2015-10-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* types.ads: Minor reformatting.\n\n2015-10-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb (Get_Pragma): Minor reformatting. Rename local constant\n\tIs_CDG to Is_CLS. Add pragma Constant_After_Elaboration to the list of\n\tclassification pragmas.\n\n2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Declarations); At the of the visible part,\n\tperform name resolution on the expressions in aspects of visible\n\tentities.\n\t* sem_ch13.ads, sem_ch13.adb (Resolve_Aspect_Expressions): Resolve\n\texpressions in aspects independently of whether corresponding\n\tentity is frozen. Used to complete name resolution of aspect\n\texpressions for entities declared in the visible part of a\n\tpackage or generic package declaration.\n\nFrom-SVN: r229028", "tree": {"sha": "1b4e5dc7c01c98b0bc9be8ab527f168ad66cd160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b4e5dc7c01c98b0bc9be8ab527f168ad66cd160"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f06f5f6bd618153d66a028f7be4dbecc22913ac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f06f5f6bd618153d66a028f7be4dbecc22913ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f06f5f6bd618153d66a028f7be4dbecc22913ac1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f06f5f6bd618153d66a028f7be4dbecc22913ac1/comments", "author": null, "committer": null, "parents": [{"sha": "40417de8ab869572f58b96b987ad4fca4f0cd783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40417de8ab869572f58b96b987ad4fca4f0cd783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40417de8ab869572f58b96b987ad4fca4f0cd783"}], "stats": {"total": 172, "additions": 151, "deletions": 21}, "files": [{"sha": "1ecd52f9131c628267b2c598b5cecf8d7d48cb7e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06f5f6bd618153d66a028f7be4dbecc22913ac1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06f5f6bd618153d66a028f7be4dbecc22913ac1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f06f5f6bd618153d66a028f7be4dbecc22913ac1", "patch": "@@ -1,3 +1,24 @@\n+2015-10-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* types.ads: Minor reformatting.\n+\n+2015-10-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb (Get_Pragma): Minor reformatting. Rename local constant\n+\tIs_CDG to Is_CLS. Add pragma Constant_After_Elaboration to the list of\n+\tclassification pragmas.\n+\n+2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Declarations); At the of the visible part,\n+\tperform name resolution on the expressions in aspects of visible\n+\tentities.\n+\t* sem_ch13.ads, sem_ch13.adb (Resolve_Aspect_Expressions): Resolve\n+\texpressions in aspects independently of whether corresponding\n+\tentity is frozen. Used to complete name resolution of aspect\n+\texpressions for entities declared in the visible part of a\n+\tpackage or generic package declaration.\n+\n 2015-10-20  Vincent Celier  <celier@adacore.com>\n \n \t* prj-attr.adb: Add package Codepeer and its attributes."}, {"sha": "8888d772d516ff6de4b7530a80e1b9d0726ebe08", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06f5f6bd618153d66a028f7be4dbecc22913ac1/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06f5f6bd618153d66a028f7be4dbecc22913ac1/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=f06f5f6bd618153d66a028f7be4dbecc22913ac1", "patch": "@@ -6980,30 +6980,40 @@ package body Einfo is\n    ----------------\n \n    function Get_Pragma (E : Entity_Id; Id : Pragma_Id) return Node_Id is\n-      Is_CDG  : constant Boolean :=\n-                  Id = Pragma_Abstract_State     or else\n-                  Id = Pragma_Async_Readers      or else\n-                  Id = Pragma_Async_Writers      or else\n-                  Id = Pragma_Depends            or else\n-                  Id = Pragma_Effective_Reads    or else\n-                  Id = Pragma_Effective_Writes   or else\n-                  Id = Pragma_Extensions_Visible or else\n-                  Id = Pragma_Global             or else\n-                  Id = Pragma_Initial_Condition  or else\n-                  Id = Pragma_Initializes        or else\n-                  Id = Pragma_Part_Of            or else\n-                  Id = Pragma_Refined_Depends    or else\n-                  Id = Pragma_Refined_Global     or else\n-                  Id = Pragma_Refined_State;\n+\n+      --  Classification pragmas\n+\n+      Is_CLS : constant Boolean :=\n+                 Id = Pragma_Abstract_State             or else\n+                 Id = Pragma_Async_Readers              or else\n+                 Id = Pragma_Async_Writers              or else\n+                 Id = Pragma_Constant_After_Elaboration or else\n+                 Id = Pragma_Depends                    or else\n+                 Id = Pragma_Effective_Reads            or else\n+                 Id = Pragma_Effective_Writes           or else\n+                 Id = Pragma_Extensions_Visible         or else\n+                 Id = Pragma_Global                     or else\n+                 Id = Pragma_Initial_Condition          or else\n+                 Id = Pragma_Initializes                or else\n+                 Id = Pragma_Part_Of                    or else\n+                 Id = Pragma_Refined_Depends            or else\n+                 Id = Pragma_Refined_Global             or else\n+                 Id = Pragma_Refined_State;\n+\n+      --  Contract / test case pragmas\n+\n       Is_CTC : constant Boolean :=\n-                  Id = Pragma_Contract_Cases     or else\n+                  Id = Pragma_Contract_Cases            or else\n                   Id = Pragma_Test_Case;\n+\n+      --  Pre / postcondition pragmas\n+\n       Is_PPC : constant Boolean :=\n-                  Id = Pragma_Precondition       or else\n-                  Id = Pragma_Postcondition      or else\n+                  Id = Pragma_Precondition              or else\n+                  Id = Pragma_Postcondition             or else\n                   Id = Pragma_Refined_Post;\n \n-      In_Contract : constant Boolean := Is_CDG or Is_CTC or Is_PPC;\n+      In_Contract : constant Boolean := Is_CLS or Is_CTC or Is_PPC;\n \n       Item  : Node_Id;\n       Items : Node_Id;\n@@ -7018,7 +7028,7 @@ package body Einfo is\n          if No (Items) then\n             return Empty;\n \n-         elsif Is_CDG then\n+         elsif Is_CLS then\n             Item := Classifications (Items);\n \n          elsif Is_CTC then"}, {"sha": "59c6e949d301cbd5f7d1a05a86594917687c2c9f", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06f5f6bd618153d66a028f7be4dbecc22913ac1/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06f5f6bd618153d66a028f7be4dbecc22913ac1/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f06f5f6bd618153d66a028f7be4dbecc22913ac1", "patch": "@@ -12382,6 +12382,75 @@ package body Sem_Ch13 is\n       Replace_Type_Refs (N);\n    end Replace_Type_References_Generic;\n \n+   --------------------------------\n+   -- Resolve_Aspect_Expressions --\n+   --------------------------------\n+\n+   procedure Resolve_Aspect_Expressions (E : Entity_Id) is\n+      ASN  : Node_Id;\n+      A_Id : Aspect_Id;\n+      Expr : Node_Id;\n+\n+   begin\n+      ASN := First_Rep_Item (E);\n+      while Present (ASN) loop\n+         if Nkind (ASN) = N_Aspect_Specification and then Entity (ASN) = E then\n+            A_Id := Get_Aspect_Id (ASN);\n+            Expr := Expression (ASN);\n+\n+            case A_Id is\n+               --  For now we only deal with aspects that do not generate\n+               --  subprograms, or that may mention current instances of\n+               --  types. These will require special handling (TBD).\n+\n+               when Aspect_Predicate |\n+                    Aspect_Invariant |\n+                    Aspect_Static_Predicate |\n+                    Aspect_Dynamic_Predicate =>\n+                  null;\n+\n+               when Pre_Post_Aspects =>\n+                  null;\n+\n+               when Aspect_Iterable =>\n+                  if Nkind (Expr) = N_Aggregate then\n+                     declare\n+                        Assoc : Node_Id;\n+\n+                     begin\n+                        Assoc := First (Component_Associations (Expr));\n+                        while Present (Assoc) loop\n+                           Find_Direct_Name (Expression (Assoc));\n+                           Next (Assoc);\n+                        end loop;\n+                     end;\n+                  end if;\n+\n+               when others =>\n+                  if Present (Expr) then\n+                     case Aspect_Argument (A_Id) is\n+                        when Expression | Optional_Expression  =>\n+                           Analyze_And_Resolve (Expression (ASN));\n+\n+                        when Name | Optional_Name =>\n+                           if Nkind (Expr) = N_Identifier then\n+                              Find_Direct_Name (Expr);\n+\n+                           elsif Nkind (Expr) = N_Selected_Component then\n+                              Find_Selected_Component (Expr);\n+\n+                           else\n+                              null;\n+                           end if;\n+                     end case;\n+                  end if;\n+            end case;\n+         end if;\n+\n+         Next (ASN);\n+      end loop;\n+   end Resolve_Aspect_Expressions;\n+\n    -------------------------\n    -- Same_Representation --\n    -------------------------"}, {"sha": "8ae929410996016645d24b21c550950714bff5a1", "filename": "gcc/ada/sem_ch13.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06f5f6bd618153d66a028f7be4dbecc22913ac1/gcc%2Fada%2Fsem_ch13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06f5f6bd618153d66a028f7be4dbecc22913ac1/gcc%2Fada%2Fsem_ch13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.ads?ref=f06f5f6bd618153d66a028f7be4dbecc22913ac1", "patch": "@@ -347,6 +347,13 @@ package Sem_Ch13 is\n    --  Given an entity Typ that denotes a derived type or a subtype, this\n    --  routine performs the inheritance of aspects at the freeze point.\n \n+   procedure Resolve_Aspect_Expressions (E : Entity_Id);\n+   --  Name resolution of an aspect expression happens at the end of the\n+   --  current declarative part or at the freeze point for the entity,\n+   --  whichever comes first. For declarations in the visible part of a\n+   --  package, name resolution takes place before analysis of the private\n+   --  part even though the freeze point of the entity may appear later.\n+\n    procedure Validate_Iterable_Aspect (Typ : Entity_Id; ASN : Node_Id);\n    --  For SPARK 2014 formal containers. The expression has the form of an\n    --  aggregate, and each entry must denote a function with the proper syntax"}, {"sha": "b8f901da512ebb40c34cfcdda04cd0f6953263f0", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06f5f6bd618153d66a028f7be4dbecc22913ac1/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06f5f6bd618153d66a028f7be4dbecc22913ac1/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f06f5f6bd618153d66a028f7be4dbecc22913ac1", "patch": "@@ -2391,6 +2391,29 @@ package body Sem_Ch3 is\n                Adjust_Decl;\n                Freeze_All (First_Entity (Current_Scope), Decl);\n                Freeze_From := Last_Entity (Current_Scope);\n+\n+            --  At the end of the visible declarations the expressions in\n+            --  aspects of all entities declared so far must be resolved.\n+            --  The entities themselves might be frozen later, and the\n+            --  generated pragmas and attribute definition clauses analyzed\n+            --  in full at that point, but name resolution must take place\n+            --  now.\n+            --  In addition to being the proper semantics, this is mandatory\n+            --  within generic units, because global name capture requires\n+            --  those expressions to be analyzed, given that the generated\n+            --  pragmas do not appear in the original generic tree.\n+\n+            elsif Serious_Errors_Detected = 0 then\n+               declare\n+                  E : Entity_Id;\n+\n+               begin\n+                  E := First_Entity (Current_Scope);\n+                  while Present (E) loop\n+                     Resolve_Aspect_Expressions (E);\n+                     Next_Entity (E);\n+                  end loop;\n+               end;\n             end if;\n \n          --  If next node is a body then freeze all types before the body."}, {"sha": "af772fa70fc45a09dc2a4e61d15f90afe76fc21c", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06f5f6bd618153d66a028f7be4dbecc22913ac1/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06f5f6bd618153d66a028f7be4dbecc22913ac1/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=f06f5f6bd618153d66a028f7be4dbecc22913ac1", "patch": "@@ -629,7 +629,7 @@ package Types is\n    --  copying operations during installation. We have particularly noticed\n    --  that WinNT seems susceptible to such changes.\n    --\n-   --  Note : the Empty_Time_Stamp value looks equal to itself, and less than\n+   --  Note: the Empty_Time_Stamp value looks equal to itself, and less than\n    --  any non-empty time stamp value.\n \n    procedure Split_Time_Stamp"}]}