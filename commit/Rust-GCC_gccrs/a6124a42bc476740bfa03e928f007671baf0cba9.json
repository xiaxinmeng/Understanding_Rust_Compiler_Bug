{"sha": "a6124a42bc476740bfa03e928f007671baf0cba9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYxMjRhNDJiYzQ3Njc0MGJmYTAzZTkyOGYwMDc2NzFiYWYwY2JhOQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1997-11-12T03:17:41Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1997-11-12T03:17:41Z"}, "message": "glimits.h (SHRT_MIN): Define in a way suitable for 16 bit hosts.\n\n        * glimits.h (SHRT_MIN): Define in a way suitable for 16 bit hosts.\n\n        * c-lex.c (whitespace_cr, skip_white_space_on_line): New functions.\n        (skip_white_space): Use whitespace_cr.\n        (check_newline): Handle whitespace more consistently.\n\nFrom-SVN: r16433", "tree": {"sha": "25156243197cc222baf5efaf2bcafe5bb7dfa719", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25156243197cc222baf5efaf2bcafe5bb7dfa719"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6124a42bc476740bfa03e928f007671baf0cba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6124a42bc476740bfa03e928f007671baf0cba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6124a42bc476740bfa03e928f007671baf0cba9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6124a42bc476740bfa03e928f007671baf0cba9/comments", "author": null, "committer": null, "parents": [{"sha": "8f3189a48b529402c7d9d64a60bc0a1c0431c48d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f3189a48b529402c7d9d64a60bc0a1c0431c48d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f3189a48b529402c7d9d64a60bc0a1c0431c48d"}], "stats": {"total": 108, "additions": 79, "deletions": 29}, "files": [{"sha": "52a5c470a5c5fa97876a853e97b308d361c9ac99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6124a42bc476740bfa03e928f007671baf0cba9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6124a42bc476740bfa03e928f007671baf0cba9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6124a42bc476740bfa03e928f007671baf0cba9", "patch": "@@ -1,3 +1,11 @@\n+Tue Nov 11 21:47:27 1997  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* glimits.h (SHRT_MIN): Define in a way suitable for 16 bit hosts.\n+\n+\t* c-lex.c (whitespace_cr, skip_white_space_on_line): New functions.\n+\t(skip_white_space): Use whitespace_cr.\n+\t(check_newline): Handle whitespace more consistently.\n+\n Tue Nov 11 16:25:49 1997  Jim Wilson  <wilson@cygnus.com>\n \n \t* i386/cygwin32.h (CPP_PREDEFINES): Delete -DPOSIX."}, {"sha": "30a49aea43ec7148084ff724a28e836180182c03", "filename": "gcc/c-lex.c", "status": "modified", "additions": 69, "deletions": 28, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6124a42bc476740bfa03e928f007671baf0cba9/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6124a42bc476740bfa03e928f007671baf0cba9/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=a6124a42bc476740bfa03e928f007671baf0cba9", "patch": "@@ -332,15 +332,36 @@ yyprint (file, yychar, yylval)\n }\n \n \f\n+/* Iff C is a carriage return, warn about it - if appropriate -\n+   and return nonzero.  */\n+int\n+whitespace_cr (c)\n+     int c;\n+{\n+  static int newline_warning = 0;\n+\n+  if (c == '\\r')\n+    {\n+      /* ANSI C says the effects of a carriage return in a source file\n+\t are undefined.  */\n+      if (pedantic && !newline_warning)\n+\t{\n+\t  warning (\"carriage return in source file\");\n+\t  warning (\"(we only warn about the first carriage return)\");\n+\t  newline_warning = 1;\n+\t}\n+      return 1;\n+    }\n+  return 0;\n+}\n+\n /* If C is not whitespace, return C.\n    Otherwise skip whitespace and return first nonwhite char read.  */\n \n static int\n skip_white_space (c)\n      register int c;\n {\n-  static int newline_warning = 0;\n-\n   for (;;)\n     {\n       switch (c)\n@@ -362,14 +383,7 @@ skip_white_space (c)\n \t  break;\n \n \tcase '\\r':\n-\t  /* ANSI C says the effects of a carriage return in a source file\n-\t     are undefined.  */\n-\t  if (pedantic && !newline_warning)\n-\t    {\n-\t      warning (\"carriage return in source file\");\n-\t      warning (\"(we only warn about the first carriage return)\");\n-\t      newline_warning = 1;\n-\t    }\n+\t  whitespace_cr (c);\n \t  c = GETC();\n \t  break;\n \n@@ -406,6 +420,38 @@ position_after_white_space ()\n   UNGETC (skip_white_space (c));\n }\n \n+/* Like skip_white_space, but don't advance beyond the end of line.\n+   Moreover, we don't get passed a character to start with.  */\n+static int\n+skip_white_space_on_line ()\n+{\n+  register int c;\n+\n+  while (1)\n+    {\n+      c = GETC();\n+      switch (c)\n+\t{\n+\tcase '\\n':\n+\tdefault:\n+\t  break;\n+\n+\tcase ' ':\n+\tcase '\\t':\n+\tcase '\\f':\n+\tcase '\\v':\n+\tcase '\\b':\n+\t  continue;\n+\n+\tcase '\\r':\n+\t  whitespace_cr (c);\n+\t  continue;\n+\t}\n+      break;\n+    }\n+  return c;\n+}\n+\n /* Make the token buffer longer, preserving the data in it.\n    P should point to just beyond the last valid character in the old buffer.\n    The value we return is a pointer to the new buffer\n@@ -550,9 +596,10 @@ check_newline ()\n \t      && GETC() == 'g'\n \t      && GETC() == 'm'\n \t      && GETC() == 'a'\n-\t      && ((c = GETC()) == ' ' || c == '\\t' || c == '\\n'))\n+\t      && ((c = GETC()) == ' ' || c == '\\t' || c == '\\n'\n+\t\t   || whitespace_cr (c) ))\n \t    {\n-\t      while (c == ' ' || c == '\\t')\n+\t      while (c == ' ' || c == '\\t' || whitespace_cr (c))\n \t\tc = GETC ();\n \t      if (c == '\\n')\n \t\treturn c;\n@@ -631,8 +678,7 @@ check_newline ()\n \t      /* Here we have just seen `#ident '.\n \t\t A string constant should follow.  */\n \n-\t      while (c == ' ' || c == '\\t')\n-\t\tc = GETC();\n+\t      c = skip_white_space_on_line ();\n \n \t      /* If no argument, ignore the line.  */\n \t      if (c == '\\n')\n@@ -667,8 +713,11 @@ check_newline ()\n   /* Here we have either `#line' or `# <nonletter>'.\n      In either case, it should be a line number; a digit should follow.  */\n \n-  while (c == ' ' || c == '\\t')\n-    c = GETC();\n+  /* Can't use skip_white_space here, but must handle all whitespace\n+     that is not '\\n', lest we get a recursion for '\\r' '\\n' when\n+     calling yylex.  */\n+  UNGETC (c);\n+  c = skip_white_space_on_line ();\n \n   /* If the # is the only nonwhite char on the line,\n      just ignore it.  Check the new newline.  */\n@@ -691,9 +740,7 @@ check_newline ()\n       int l = TREE_INT_CST_LOW (yylval.ttype) - 1;\n \n       /* Is this the last nonwhite stuff on the line?  */\n-      c = GETC();\n-      while (c == ' ' || c == '\\t')\n-\tc = GETC();\n+      c = skip_white_space_on_line ();\n       if (c == '\\n')\n \t{\n \t  /* No more: store the line number and check following line.  */\n@@ -726,9 +773,7 @@ check_newline ()\n \tmain_input_filename = input_filename;\n \n       /* Is this the last nonwhite stuff on the line?  */\n-      c = GETC();\n-      while (c == ' ' || c == '\\t')\n-\tc = GETC();\n+      c = skip_white_space_on_line ();\n       if (c == '\\n')\n \t{\n \t  /* Update the name in the top element of input_file_stack.  */\n@@ -798,9 +843,7 @@ check_newline ()\n       if (used_up)\n \t{\n \t  /* Is this the last nonwhite stuff on the line?  */\n-\t  c = GETC();\n-\t  while (c == ' ' || c == '\\t')\n-\t    c = GETC();\n+\t  c = skip_white_space_on_line ();\n \t  if (c == '\\n')\n \t    return c;\n \t  UNGETC (c);\n@@ -819,9 +862,7 @@ check_newline ()\n       if (used_up)\n \t{\n \t  /* Is this the last nonwhite stuff on the line?  */\n-\t  c = GETC();\n-\t  while (c == ' ' || c == '\\t')\n-\t    c = GETC();\n+\t  c = skip_white_space_on_line ();\n \t  if (c == '\\n')\n \t    return c;\n \t  UNGETC (c);"}, {"sha": "0e3228bab6271451f322fb2b3944326fe2f6dc39", "filename": "gcc/glimits.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6124a42bc476740bfa03e928f007671baf0cba9/gcc%2Fglimits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6124a42bc476740bfa03e928f007671baf0cba9/gcc%2Fglimits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglimits.h?ref=a6124a42bc476740bfa03e928f007671baf0cba9", "patch": "@@ -39,7 +39,8 @@\n \n /* Minimum and maximum values a `signed short int' can hold.  */\n #undef SHRT_MIN\n-#define SHRT_MIN (-32768)\n+/* For the sake of 16 bit hosts, we may not use -32768 */\n+#define SHRT_MIN (-32767-1)\n #undef SHRT_MAX\n #define SHRT_MAX 32767\n "}]}