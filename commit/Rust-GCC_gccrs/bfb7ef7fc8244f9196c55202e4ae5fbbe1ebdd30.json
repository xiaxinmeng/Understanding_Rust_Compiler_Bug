{"sha": "bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30", "node_id": "C_kwDOANBUbNoAKGJmYjdlZjdmYzgyNDRmOTE5NmM1NTIwMmU0YWU1ZmJiZTFlYmRkMzA", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-01-03T12:19:44Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-01-03T12:19:44Z"}, "message": "HIR::ImplBlock items should mangle based from their canonical path's\n\nLegacy mangling converts the '<', '>' from their canonical paths into '..'\nthis means we can simply reuse our normal mangle_item code for all types\nof symbol. So we can now remove the mangle_impl_item code prior to having\nthe canonical path code in place.\n\nFixes #845", "tree": {"sha": "9cd5c52d621fa0b99d42c1257cde20dbb5b64ac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cd5c52d621fa0b99d42c1257cde20dbb5b64ac8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63"}], "stats": {"total": 134, "additions": 53, "deletions": 81}, "files": [{"sha": "43c23ddeb33d6db91f065a0ba14ff20813e86d64", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30", "patch": "@@ -310,14 +310,6 @@ class Context\n     return mangler.mangle_item (ty, path, mappings->get_current_crate_name ());\n   }\n \n-  std::string mangle_impl_item (const TyTy::BaseType *self,\n-\t\t\t\tconst TyTy::BaseType *ty,\n-\t\t\t\tconst std::string &name) const\n-  {\n-    return mangler.mangle_impl_item (self, ty, name,\n-\t\t\t\t     mappings->get_current_crate_name ());\n-  }\n-\n private:\n   ::Backend *backend;\n   Resolver::Resolver *resolver;"}, {"sha": "1da607a2e20701c6a7eb5c8f7de9204a77b26180", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30", "patch": "@@ -153,8 +153,7 @@ class CompileInherentImplItem : public HIRCompileBase\n \n     std::string ir_symbol_name\n       = canonical_path->get () + fntype->subst_as_string ();\n-    std::string asm_name\n-      = ctx->mangle_impl_item (self, fntype, function.get_function_name ());\n+    std::string asm_name = ctx->mangle_item (fntype, *canonical_path);\n \n     tree fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,"}, {"sha": "26c760ea3ccfe209df48fd1bc468e3730474410a", "filename": "gcc/rust/backend/rust-mangle.cc", "status": "modified", "additions": 2, "deletions": 66, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30/gcc%2Frust%2Fbackend%2Frust-mangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30/gcc%2Frust%2Fbackend%2Frust-mangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-mangle.cc?ref=bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30", "patch": "@@ -31,6 +31,8 @@ legacy_mangle_name (const std::string &name)\n \tm = \"$\";\n       else if (c == '&')\n \tm = \"RF\";\n+      else if (c == '<' || c == '>')\n+\tm = \"..\";\n       else\n \tm.push_back (c);\n \n@@ -70,36 +72,6 @@ legacy_hash (const std::string &fingerprint)\n   return \"h\" + std::string (hex, sizeof (hex) - 1);\n }\n \n-static std::string\n-legacy_mangle_self (const TyTy::BaseType *self)\n-{\n-  if (self->get_kind () != TyTy::TypeKind::ADT)\n-    return legacy_mangle_name (self->get_name ());\n-\n-  const TyTy::ADTType *s = static_cast<const TyTy::ADTType *> (self);\n-  std::string buf = s->get_identifier ();\n-\n-  if (s->has_subsititions_defined ())\n-    {\n-      buf += kMangledSubstBegin;\n-\n-      const std::vector<TyTy::SubstitutionParamMapping> &params\n-\t= s->get_substs ();\n-      for (size_t i = 0; i < params.size (); i++)\n-\t{\n-\t  const TyTy::SubstitutionParamMapping &sub = params.at (i);\n-\t  buf += sub.as_string ();\n-\n-\t  if ((i + 1) < params.size ())\n-\t    buf += kMangledGenericDelim;\n-\t}\n-\n-      buf += kMangledSubstEnd;\n-    }\n-\n-  return legacy_mangle_name (buf);\n-}\n-\n static std::string\n v0_tuple_prefix (const TyTy::BaseType *ty)\n {\n@@ -255,19 +227,6 @@ legacy_mangle_item (const TyTy::BaseType *ty,\n \t + legacy_mangle_canonical_path (path) + hash_sig + kMangledSymbolDelim;\n }\n \n-// FIXME this is a wee bit broken\n-static std::string\n-legacy_mangle_impl_item (const TyTy::BaseType *self, const TyTy::BaseType *ty,\n-\t\t\t const std::string &name, const std::string &crate_name)\n-{\n-  const std::string hash = legacy_hash (ty->as_string ());\n-  const std::string hash_sig = legacy_mangle_name (hash);\n-\n-  return kMangledSymbolPrefix + legacy_mangle_name (crate_name)\n-\t + legacy_mangle_self (self) + legacy_mangle_name (name) + hash_sig\n-\t + kMangledSymbolDelim;\n-}\n-\n static std::string\n v0_mangle_item (const TyTy::BaseType *ty, const Resolver::CanonicalPath &path,\n \t\tconst std::string &crate_name)\n@@ -282,13 +241,6 @@ v0_mangle_item (const TyTy::BaseType *ty, const Resolver::CanonicalPath &path,\n   gcc_unreachable ();\n }\n \n-static std::string\n-v0_mangle_impl_item (const TyTy::BaseType *self, const TyTy::BaseType *ty,\n-\t\t     const std::string &name, const std::string &crate_name)\n-{\n-  gcc_unreachable ();\n-}\n-\n std::string\n Mangler::mangle_item (const TyTy::BaseType *ty,\n \t\t      const Resolver::CanonicalPath &path,\n@@ -305,21 +257,5 @@ Mangler::mangle_item (const TyTy::BaseType *ty,\n     }\n }\n \n-std::string\n-Mangler::mangle_impl_item (const TyTy::BaseType *self, const TyTy::BaseType *ty,\n-\t\t\t   const std::string &name,\n-\t\t\t   const std::string &crate_name) const\n-{\n-  switch (version)\n-    {\n-    case Mangler::MangleVersion::LEGACY:\n-      return legacy_mangle_impl_item (self, ty, name, crate_name);\n-    case Mangler::MangleVersion::V0:\n-      return v0_mangle_impl_item (self, ty, name, crate_name);\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-\n } // namespace Compile\n } // namespace Rust"}, {"sha": "0cc7f766e7b88c8f002abe02bff55fca685f16af", "filename": "gcc/rust/backend/rust-mangle.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30/gcc%2Frust%2Fbackend%2Frust-mangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30/gcc%2Frust%2Fbackend%2Frust-mangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-mangle.h?ref=bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30", "patch": "@@ -21,6 +21,7 @@\n \n namespace Rust {\n namespace Compile {\n+\n class Mangler\n {\n public:\n@@ -36,11 +37,6 @@ class Mangler\n \t\t\t   const Resolver::CanonicalPath &path,\n \t\t\t   const std::string &crate_name) const;\n \n-  std::string mangle_impl_item (const TyTy::BaseType *self,\n-\t\t\t\tconst TyTy::BaseType *ty,\n-\t\t\t\tconst std::string &name,\n-\t\t\t\tconst std::string &crate_name) const;\n-\n   static void set_mangling (int frust_mangling_value)\n   {\n     version = static_cast<MangleVersion> (frust_mangling_value);\n@@ -49,6 +45,8 @@ class Mangler\n private:\n   static enum MangleVersion version;\n };\n+\n } // namespace Compile\n } // namespace Rust\n+\n #endif // RUST_MANGLE_H"}, {"sha": "4c689e3b6c8efbadd8b324cb3631ba40f24ea7e9", "filename": "gcc/testsuite/rust/execute/torture/issue-845.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-845.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-845.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-845.rs?ref=bfb7ef7fc8244f9196c55202e4ae5fbbe1ebdd30", "patch": "@@ -0,0 +1,47 @@\n+// { dg-output \"Foo::bar\\n\" }\n+// { dg-additional-options \"-w\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo {}\n+\n+trait Bar {\n+    fn bar(&self) {\n+        unsafe {\n+            let _a = \"Bar::bar\\n\\0\";\n+            let _b = _a as *const str;\n+            let _c = _b as *const i8;\n+            printf(_c);\n+        }\n+    }\n+}\n+\n+impl Foo {\n+    fn bar(&self) {\n+        unsafe {\n+            let _a = \"Foo::bar\\n\\0\";\n+            let _b = _a as *const str;\n+            let _c = _b as *const i8;\n+            printf(_c);\n+        }\n+    }\n+}\n+\n+impl Bar for Foo {\n+    fn bar(&self) {\n+        unsafe {\n+            let _a = \"<Bar as Foo>::bar\\n\\0\";\n+            let _b = _a as *const str;\n+            let _c = _b as *const i8;\n+            printf(_c);\n+        }\n+    }\n+}\n+\n+pub fn main() -> i32 {\n+    let mut f = Foo {};\n+    f.bar();\n+\n+    0\n+}"}]}