{"sha": "a4d51bfbc600be2acc90dc413c14602ec9cb3edc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRkNTFiZmJjNjAwYmUyYWNjOTBkYzQxM2MxNDYwMmVjOWNiM2VkYw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2017-05-14T00:38:24Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2017-05-14T00:38:24Z"}, "message": "store the bitmap_head within the auto_bitmap\n\nThis gets rid of one allocation per bitmap.  Often the bitmap_head is\nnow on the stack, when it isn't its part of some other struct on the\nheap instead of being refered to by that struct.  On 64 bit platforms\nthis will increase the size of such structs by 24 bytes, but its an over\nall win since we don't need an 8 byte pointer pointing at the\nbitmap_head.  Given that the auto_bitmap owns the bitmap_head anyway we\nknow there would never be a place where two auto_bitmaps would refer to\nthe same bitmap_head object.\n\ngcc/ChangeLog:\n\n2017-05-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* bitmap.h (class auto_bitmap): Change type of m_bits to\n\tbitmap_head, and adjust ctor / dtor and member operators.\n\nFrom-SVN: r248017", "tree": {"sha": "9557f465098de3e0946bb81ac68286e0a754c524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9557f465098de3e0946bb81ac68286e0a754c524"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4d51bfbc600be2acc90dc413c14602ec9cb3edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d51bfbc600be2acc90dc413c14602ec9cb3edc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4d51bfbc600be2acc90dc413c14602ec9cb3edc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d51bfbc600be2acc90dc413c14602ec9cb3edc/comments", "author": null, "committer": null, "parents": [{"sha": "470e7e5650dd440822f71133baf799a3f9fd84f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/470e7e5650dd440822f71133baf799a3f9fd84f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/470e7e5650dd440822f71133baf799a3f9fd84f3"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "1edc553523f0c282929c8414d1cc990517e59a74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d51bfbc600be2acc90dc413c14602ec9cb3edc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d51bfbc600be2acc90dc413c14602ec9cb3edc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4d51bfbc600be2acc90dc413c14602ec9cb3edc", "patch": "@@ -1,3 +1,8 @@\n+2017-05-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* bitmap.h (class auto_bitmap): Change type of m_bits to\n+\tbitmap_head, and adjust ctor / dtor and member operators.\n+\n 2017-05-13  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* compare-elim.c (equivalent_reg_at_start): Return NULL_RTX"}, {"sha": "99a954445833e57b7e1a9af4ab5083fe5f14bf46", "filename": "gcc/bitmap.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d51bfbc600be2acc90dc413c14602ec9cb3edc/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d51bfbc600be2acc90dc413c14602ec9cb3edc/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=a4d51bfbc600be2acc90dc413c14602ec9cb3edc", "patch": "@@ -806,10 +806,10 @@ bmp_iter_and_compl (bitmap_iterator *bi, unsigned *bit_no)\n class auto_bitmap\n {\n  public:\n-  auto_bitmap () { bits = BITMAP_ALLOC (NULL); }\n-  ~auto_bitmap () { BITMAP_FREE (bits); }\n+  auto_bitmap () { bitmap_initialize (&m_bits, &bitmap_default_obstack); }\n+  ~auto_bitmap () { bitmap_clear (&m_bits); }\n   // Allow calling bitmap functions on our bitmap.\n-  operator bitmap () { return bits; }\n+  operator bitmap () { return &m_bits; }\n \n  private:\n   // Prevent making a copy that references our bitmap.\n@@ -820,7 +820,7 @@ class auto_bitmap\n   auto_bitmap &operator = (auto_bitmap &&);\n #endif\n \n-  bitmap bits;\n+  bitmap_head m_bits;\n };\n \n #endif /* GCC_BITMAP_H */"}]}