{"sha": "fa7b3a2f07f56ba7c36d854989b52183027db04e", "node_id": "C_kwDOANBUbNoAKGZhN2IzYTJmMDdmNTZiYTdjMzZkODU0OTg5YjUyMTgzMDI3ZGIwNGU", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-02-04T05:02:22Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:21Z"}, "message": "gccrs: Add support for TuplePattern in let statements\n\ngcc/rust/ChangeLog:\n\n\t* hir/tree/rust-hir-pattern.h\n\t(TuplePatternItemsRanged::get_lower_patterns): Add method.\n\t(TuplePatternItemsRanged::get_upper_patterns): Add method.\n\t* backend/rust-compile-pattern.cc\n\t(CompilePatternLet::visit): Implement TuplePattern visitor.\n\t* backend/rust-compile-pattern.h\n\t(CompilePatternLet::visit): Move TuplePattern visitor out of header file.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/execute/torture/let-pattern-1.rs: New test.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "22e6bcb265bf4476806d2a0ebe30432ace90e63a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22e6bcb265bf4476806d2a0ebe30432ace90e63a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa7b3a2f07f56ba7c36d854989b52183027db04e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa7b3a2f07f56ba7c36d854989b52183027db04e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa7b3a2f07f56ba7c36d854989b52183027db04e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa7b3a2f07f56ba7c36d854989b52183027db04e/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb4a61ac1babffaa03d837d32a1107ea93e85e48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb4a61ac1babffaa03d837d32a1107ea93e85e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb4a61ac1babffaa03d837d32a1107ea93e85e48"}], "stats": {"total": 116, "additions": 110, "deletions": 6}, "files": [{"sha": "cb4b082f9c8deb91261cca2e26256ca346d77848", "filename": "gcc/rust/backend/rust-compile-pattern.cc", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7b3a2f07f56ba7c36d854989b52183027db04e/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7b3a2f07f56ba7c36d854989b52183027db04e/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.cc?ref=fa7b3a2f07f56ba7c36d854989b52183027db04e", "patch": "@@ -387,5 +387,92 @@ CompilePatternLet::visit (HIR::WildcardPattern &pattern)\n     }\n }\n \n+void\n+CompilePatternLet::visit (HIR::TuplePattern &pattern)\n+{\n+  rust_assert (pattern.has_tuple_pattern_items ());\n+\n+  tree tuple_type = TyTyResolveCompile::compile (ctx, ty);\n+  tree init_stmt;\n+  Bvariable *tmp_var\n+    = ctx->get_backend ()->temporary_variable (ctx->peek_fn ().fndecl,\n+\t\t\t\t\t       NULL_TREE, tuple_type, init_expr,\n+\t\t\t\t\t       false, pattern.get_locus (),\n+\t\t\t\t\t       &init_stmt);\n+  tree access_expr\n+    = ctx->get_backend ()->var_expression (tmp_var, pattern.get_locus ());\n+  ctx->add_statement (init_stmt);\n+\n+  switch (pattern.get_items ()->get_pattern_type ())\n+    {\n+      case HIR::TuplePatternItems::TuplePatternItemType::RANGED: {\n+\tsize_t tuple_idx = 0;\n+\tauto &items\n+\t  = static_cast<HIR::TuplePatternItemsRanged &> (*pattern.get_items ());\n+\n+\tauto &items_lower = items.get_lower_patterns ();\n+\tauto &items_upper = items.get_upper_patterns ();\n+\n+\tfor (auto &sub : items_lower)\n+\t  {\n+\t    TyTy::BaseType *ty_sub = nullptr;\n+\t    HirId pattern_id = pattern.get_pattern_mappings ().get_hirid ();\n+\t    bool ok = ctx->get_tyctx ()->lookup_type (pattern_id, &ty_sub);\n+\t    rust_assert (ok);\n+\n+\t    tree sub_init = ctx->get_backend ()->struct_field_expression (\n+\t      access_expr, tuple_idx, sub->get_locus ());\n+\t    CompilePatternLet::Compile (sub.get (), sub_init, ty_sub,\n+\t\t\t\t\trval_locus, ctx);\n+\t    tuple_idx++;\n+\t  }\n+\n+\trust_assert (ty->get_kind () == TyTy::TypeKind::TUPLE);\n+\ttuple_idx = static_cast<TyTy::TupleType &> (*ty).num_fields ()\n+\t\t    - items_upper.size ();\n+\n+\tfor (auto &sub : items_upper)\n+\t  {\n+\t    TyTy::BaseType *ty_sub = nullptr;\n+\t    HirId pattern_id = pattern.get_pattern_mappings ().get_hirid ();\n+\t    bool ok = ctx->get_tyctx ()->lookup_type (pattern_id, &ty_sub);\n+\t    rust_assert (ok);\n+\n+\t    tree sub_init = ctx->get_backend ()->struct_field_expression (\n+\t      access_expr, tuple_idx, sub->get_locus ());\n+\t    CompilePatternLet::Compile (sub.get (), sub_init, ty_sub,\n+\t\t\t\t\trval_locus, ctx);\n+\t    tuple_idx++;\n+\t  }\n+\n+\treturn;\n+      }\n+      case HIR::TuplePatternItems::TuplePatternItemType::MULTIPLE: {\n+\tsize_t tuple_idx = 0;\n+\tauto &items = static_cast<HIR::TuplePatternItemsMultiple &> (\n+\t  *pattern.get_items ());\n+\n+\tfor (auto &sub : items.get_patterns ())\n+\t  {\n+\t    TyTy::BaseType *ty_sub = nullptr;\n+\t    HirId pattern_id = pattern.get_pattern_mappings ().get_hirid ();\n+\t    bool ok = ctx->get_tyctx ()->lookup_type (pattern_id, &ty_sub);\n+\t    rust_assert (ok);\n+\n+\t    tree sub_init = ctx->get_backend ()->struct_field_expression (\n+\t      access_expr, tuple_idx, sub->get_locus ());\n+\t    CompilePatternLet::Compile (sub.get (), sub_init, ty_sub,\n+\t\t\t\t\trval_locus, ctx);\n+\t    tuple_idx++;\n+\t  }\n+\n+\treturn;\n+      }\n+      default: {\n+\tgcc_unreachable ();\n+      }\n+    }\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "8f44b7b5dbbe31a38a50ab663f31224aac8bb742", "filename": "gcc/rust/backend/rust-compile-pattern.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7b3a2f07f56ba7c36d854989b52183027db04e/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7b3a2f07f56ba7c36d854989b52183027db04e/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h?ref=fa7b3a2f07f56ba7c36d854989b52183027db04e", "patch": "@@ -101,6 +101,7 @@ class CompilePatternLet : public HIRCompileBase, public HIR::HIRPatternVisitor\n \n   void visit (HIR::IdentifierPattern &) override;\n   void visit (HIR::WildcardPattern &) override;\n+  void visit (HIR::TuplePattern &) override;\n \n   // check for unimplemented Pattern HIR nodes.\n   void visit (HIR::LiteralPattern &pattern) override\n@@ -146,12 +147,6 @@ class CompilePatternLet : public HIRCompileBase, public HIR::HIRPatternVisitor\n \t\t   \"struct pattern let statements not supported\");\n   }\n \n-  void visit (HIR::TuplePattern &pattern) override\n-  {\n-    rust_sorry_at (pattern.get_locus (),\n-\t\t   \"tuple pattern let statements not supported\");\n-  }\n-\n   void visit (HIR::TupleStructPattern &pattern) override\n   {\n     rust_sorry_at (pattern.get_locus (),"}, {"sha": "1b08ab88a34c127a306667968a4cf501d1847cf8", "filename": "gcc/rust/hir/tree/rust-hir-pattern.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7b3a2f07f56ba7c36d854989b52183027db04e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7b3a2f07f56ba7c36d854989b52183027db04e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h?ref=fa7b3a2f07f56ba7c36d854989b52183027db04e", "patch": "@@ -1142,6 +1142,24 @@ class TuplePatternItemsRanged : public TuplePatternItems\n     return TuplePatternItemType::RANGED;\n   }\n \n+  std::vector<std::unique_ptr<Pattern> > &get_lower_patterns ()\n+  {\n+    return lower_patterns;\n+  }\n+  const std::vector<std::unique_ptr<Pattern> > &get_lower_patterns () const\n+  {\n+    return lower_patterns;\n+  }\n+\n+  std::vector<std::unique_ptr<Pattern> > &get_upper_patterns ()\n+  {\n+    return upper_patterns;\n+  }\n+  const std::vector<std::unique_ptr<Pattern> > &get_upper_patterns () const\n+  {\n+    return upper_patterns;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "107d819a69f23c9bb3d70adedaf4de0d124a38b1", "filename": "gcc/testsuite/rust/execute/torture/let-pattern-1.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7b3a2f07f56ba7c36d854989b52183027db04e/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Flet-pattern-1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7b3a2f07f56ba7c36d854989b52183027db04e/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Flet-pattern-1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Flet-pattern-1.rs?ref=fa7b3a2f07f56ba7c36d854989b52183027db04e", "patch": "@@ -0,0 +1,4 @@\n+fn main() -> i32 {\n+    let (x, y, z) = (2, 3, 6);\n+    x * y - z\n+}"}]}