{"sha": "b993039f5bb3870d3c6fcb61f9554067e76141a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk5MzAzOWY1YmIzODcwZDNjNmZjYjYxZjk1NTQwNjdlNzYxNDFhOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-05-25T09:24:08Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-05-25T09:24:08Z"}, "message": "re PR ada/52362 (gnat.dg/lto8.adb FAILs with gas/gld)\n\n\tPR ada/52362\n\t* config.gcc (i[34567]86-*-mingw* | x86_64-*-mingw*): Set gas and\n\tgnu_ld variables to yes.\n\t* configure.ac (HAVE_GNU_LD): Move to after config.gcc inclusion.\n\t(HAVE_GNU_AS): Likewise.\n\t* config.in: Regenerate.\n\t* configure: Likewise.\nada/\n\t* link.c (__gnat_object_file_option): Set to \"-Wl,@\" for GNU linker.\n\t(__gnat_using_gnu_linker): Delete.\n\t* gnatlink.adb (Gnatlink): Declare Object_File_Option_Ptr here...\n\tDeclare Object_File_Option string constant and Using_GNU_response_file\n\tboolean constant.\n\t(Process_Binder_File): ...instead of here. \u00a0Delete Using_GNU_Linker,\n\tOpening and Closing local variables. \u00a0Do not handle the GNU linker\n\tspecially.\n\t(Write_RF): New procedure to write into the response file. \u00a0Escape some\n\tcharacters if a GNU response file is used. \u00a0Keep track of error status.\n\tInvoke Write_RF to write into the response file. \u00a0Delete the file only\n\tif the link was successful.\n\t* mlib-utl.adb: Do not `with' package System.\n\t(Gcc): Likewise. \u00a0Declare Object_File_Option string constant and\n\tUsing_GNU_response_file boolean constant.\n\t(Write_RF): Take a string instead of address and length. \u00a0Escape some\n\tcharacters if a GNU response file is used.\n\tInvoke Write_RF to write into the response file. \u00a0Delete the file only\n\tif the link was successful. \u00a0Do not warn if it cannot be deleted.\n\nFrom-SVN: r187874", "tree": {"sha": "046da996c3e8398f97233d73b99d4888fb28c026", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/046da996c3e8398f97233d73b99d4888fb28c026"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b993039f5bb3870d3c6fcb61f9554067e76141a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b993039f5bb3870d3c6fcb61f9554067e76141a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b993039f5bb3870d3c6fcb61f9554067e76141a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b993039f5bb3870d3c6fcb61f9554067e76141a9/comments", "author": null, "committer": null, "parents": [{"sha": "4aa820fec744198ccdd2d0c4680a1c95c3cdc518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa820fec744198ccdd2d0c4680a1c95c3cdc518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aa820fec744198ccdd2d0c4680a1c95c3cdc518"}], "stats": {"total": 389, "additions": 190, "deletions": 199}, "files": [{"sha": "772d897f4baa7cf443ffe43d9c5a6d4fd21f3560", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b993039f5bb3870d3c6fcb61f9554067e76141a9", "patch": "@@ -1,3 +1,13 @@\n+2012-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/52362\n+\t* config.gcc (i[34567]86-*-mingw* | x86_64-*-mingw*): Set gas and\n+\tgnu_ld variables to yes.\n+\t* configure.ac (HAVE_GNU_LD): Move to after config.gcc inclusion.\n+\t(HAVE_GNU_AS): Likewise.\n+\t* config.in: Regenerate.\n+\t* configure: Likewise.\n+\n 2012-05-25  Tristan Gingold  <gingold@adacore.com>\n \n \t* config/i386/i386.c (struct ix86_frame): Remove unused frame field."}, {"sha": "1c5d7f7c4a56cf8a8b90c9502adbcb5a6945280b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b993039f5bb3870d3c6fcb61f9554067e76141a9", "patch": "@@ -1,3 +1,26 @@\n+2012-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/52362\n+\t* link.c (__gnat_object_file_option): Set to \"-Wl,@\" for GNU linker.\n+\t(__gnat_using_gnu_linker): Delete.\n+\t* gnatlink.adb (Gnatlink): Declare Object_File_Option_Ptr here...\n+\tDeclare Object_File_Option string constant and Using_GNU_response_file\n+\tboolean constant.\n+\t(Process_Binder_File): ...instead of here. \ufffdDelete Using_GNU_Linker,\n+\tOpening and Closing local variables. \ufffdDo not handle the GNU linker\n+\tspecially.\n+\t(Write_RF): New procedure to write into the response file. \ufffdEscape some\n+\tcharacters if a GNU response file is used. \ufffdKeep track of error status.\n+\tInvoke Write_RF to write into the response file. \ufffdDelete the file only\n+\tif the link was successful.\n+\t* mlib-utl.adb: Do not `with' package System.\n+\t(Gcc): Likewise. \ufffdDeclare Object_File_Option string constant and\n+\tUsing_GNU_response_file boolean constant.\n+\t(Write_RF): Take a string instead of address and length. \ufffdEscape some\n+\tcharacters if a GNU response file is used.\n+\tInvoke Write_RF to write into the response file. \ufffdDelete the file only\n+\tif the link was successful. \ufffdDo not warn if it cannot be deleted.\n+\n 2012-05-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (gnat_write_global_declarations): Put a name"}, {"sha": "d6834ab5ae232c0483284c346b4956033ae25e9d", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 66, "deletions": 71, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=b993039f5bb3870d3c6fcb61f9554067e76141a9", "patch": "@@ -178,6 +178,19 @@ procedure Gnatlink is\n    --  Predicate indicating whether the linker has an option whereby the\n    --  names of object files can be passed to the linker in a file.\n \n+   Object_File_Option_Ptr : Interfaces.C.Strings.chars_ptr;\n+   pragma Import (C, Object_File_Option_Ptr, \"__gnat_object_file_option\");\n+   --  Pointer to a string representing the linker option which specifies\n+   --  the response file.\n+\n+   Object_File_Option : constant String := Value (Object_File_Option_Ptr);\n+   --  The linker option which specifies the response file as a string\n+\n+   Using_GNU_response_file : constant Boolean :=\n+     Object_File_Option'Length > 0\n+       and then Object_File_Option (Object_File_Option'Last) = '@';\n+   --  Whether a GNU response file is used\n+\n    Object_List_File_Required : Boolean := False;\n    --  Set to True to force generation of a response file\n \n@@ -760,28 +773,12 @@ procedure Gnatlink is\n       --  Pointer to string specifying the default extension for\n       --  object libraries, e.g. Unix uses \".a\", VMS uses \".olb\".\n \n-      Object_File_Option_Ptr : Interfaces.C.Strings.chars_ptr;\n-      pragma Import (C, Object_File_Option_Ptr, \"__gnat_object_file_option\");\n-      --  Pointer to a string representing the linker option which specifies\n-      --  the response file.\n-\n-      Using_GNU_Linker : Boolean;\n-      for Using_GNU_Linker'Size use Character'Size;\n-      pragma Import (C, Using_GNU_Linker, \"__gnat_using_gnu_linker\");\n-      --  Predicate indicating whether this target uses the GNU linker. In\n-      --  this case we must output a GNU linker compatible response file.\n-\n       Separate_Run_Path_Options : Boolean;\n       for Separate_Run_Path_Options'Size use Character'Size;\n       pragma Import\n         (C, Separate_Run_Path_Options, \"__gnat_separate_run_path_options\");\n       --  Whether separate rpath options should be emitted for each directory\n \n-      Opening : aliased constant String := \"\"\"\";\n-      Closing : aliased constant String := '\"' & ASCII.LF;\n-      --  Needed to quote object paths in object list files when GNU linker\n-      --  is used.\n-\n       procedure Get_Next_Line;\n       --  Read the next line from the binder file without the line\n       --  terminator.\n@@ -804,6 +801,10 @@ procedure Gnatlink is\n       --  after Store_File_Context. The binder file context will be restored\n       --  with the data stored by the last Store_File_Context call.\n \n+      procedure Write_RF (S : String);\n+      --  Write a string to the response file and check if it was successful.\n+      --  Fail the program if it was not successful (disk full).\n+\n       -------------------\n       -- Get_Next_Line --\n       -------------------\n@@ -897,6 +898,46 @@ procedure Gnatlink is\n          end if;\n       end Store_File_Context;\n \n+      --------------\n+      -- Write_RF --\n+      --------------\n+\n+      procedure Write_RF (S : String) is\n+         Success : Boolean := True;\n+      begin\n+         --  If a GNU response file is used, space and backslash need to be\n+         --  escaped because they are interpreted as a string separator and\n+         --  an escape character respectively by the underlying mechanism.\n+         --  On the other hand, quote and double-quote are not escaped since\n+         --  they are interpreted as string delimiters on both sides.\n+\n+         if Using_GNU_response_file then\n+            for I in S'Range loop\n+               if S (I) = ' ' or else S (I) = '\\' then\n+                  if Write (Tname_FD, ASCII.BACK_SLASH'Address, 1) /= 1 then\n+                     Success := False;\n+                  end if;\n+               end if;\n+\n+               if Write (Tname_FD, S (I)'Address, 1) /= 1 then\n+                  Success := False;\n+               end if;\n+            end loop;\n+         else\n+            if Write (Tname_FD, S'Address, S'Length) /= S'Length then\n+               Success := False;\n+            end if;\n+         end if;\n+\n+         if Write (Tname_FD, ASCII.LF'Address, 1) /= 1 then\n+            Success := False;\n+         end if;\n+\n+         if not Success then\n+            Exit_With_Error (\"Error generating response file: disk full\");\n+         end if;\n+      end Write_RF;\n+\n    --  Start of processing for Process_Binder_File\n \n    begin\n@@ -985,69 +1026,22 @@ procedure Gnatlink is\n          --  ??? Status of Write and Close operations should be checked, and\n          --  failure should occur if a status is wrong.\n \n-         --  If target is using the GNU linker we must add a special header\n-         --  and footer in the response file.\n-\n-         --  The syntax is : INPUT (object1.o object2.o ... )\n-\n-         --  Because the GNU linker does not like name with characters such\n-         --  as '!', we must put the object paths between double quotes.\n-\n-         if Using_GNU_Linker then\n-            declare\n-               GNU_Header : aliased constant String := \"INPUT (\";\n-\n-            begin\n-               Status := Write (Tname_FD, GNU_Header'Address,\n-                 GNU_Header'Length);\n-            end;\n-         end if;\n-\n          for J in Objs_Begin .. Objs_End loop\n-\n-            --  Opening quote for GNU linker\n-\n-            if Using_GNU_Linker then\n-               Status := Write (Tname_FD, Opening'Address, 1);\n-            end if;\n-\n-            Status := Write (Tname_FD, Linker_Objects.Table (J).all'Address,\n-                             Linker_Objects.Table (J).all'Length);\n-\n-            --  Closing quote for GNU linker\n-\n-            if Using_GNU_Linker then\n-               Status := Write (Tname_FD, Closing'Address, 2);\n-\n-            else\n-               Status := Write (Tname_FD, ASCII.LF'Address, 1);\n-            end if;\n+            Write_RF (Linker_Objects.Table (J).all);\n \n             Response_File_Objects.Increment_Last;\n             Response_File_Objects.Table (Response_File_Objects.Last) :=\n               Linker_Objects.Table (J);\n          end loop;\n \n-         --  Handle GNU linker response file footer\n-\n-         if Using_GNU_Linker then\n-            declare\n-               GNU_Footer : aliased constant String := \")\";\n-\n-            begin\n-               Status := Write (Tname_FD, GNU_Footer'Address,\n-                 GNU_Footer'Length);\n-            end;\n-         end if;\n-\n          Close (Tname_FD, Closing_Status);\n \n          --  Add the special objects list file option together with the name\n          --  of the temporary file (removing the null character) to the objects\n          --  file table.\n \n          Linker_Objects.Table (Objs_Begin) :=\n-           new String'(Value (Object_File_Option_Ptr) &\n+           new String'(Object_File_Option &\n                        Tname (Tname'First .. Tname'Last - 1));\n \n          --  The slots containing these object file names are then removed\n@@ -2213,14 +2207,15 @@ begin\n \n             System.OS_Lib.Spawn (Linker_Path.all, Args, Success);\n \n-            --  Delete the temporary file used in conjunction with linking if\n-            --  one was created. See Process_Bind_File for details.\n+            if Success then\n+               --  Delete the temporary file used in conjunction with linking\n+               --  if one was created. See Process_Bind_File for details.\n \n-            if Tname_FD /= Invalid_FD then\n-               Delete (Tname);\n-            end if;\n+               if Tname_FD /= Invalid_FD then\n+                  Delete (Tname);\n+               end if;\n \n-            if not Success then\n+            else\n                Error_Msg (\"error when calling \" & Linker_Path.all);\n                Exit_Program (E_Fatal);\n             end if;"}, {"sha": "8a8e12033d74a9d699977198e6a6fc7b3b3c8b60", "filename": "gcc/ada/link.c", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Fada%2Flink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Fada%2Flink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flink.c?ref=b993039f5bb3870d3c6fcb61f9554067e76141a9", "patch": "@@ -72,38 +72,22 @@ extern \"C\" {\n /*  shared_libgcc_default gives the system dependent link method that       */\n /*  be used by default for linking libgcc (shared or static)                */\n \n-/*  using_gnu_linker is set to 1 when the GNU linker is used under this     */\n-/*  target.                                                                 */\n-\n /*  separate_run_path_options is set to 1 when separate \"rpath\" arguments   */\n /*  must be passed to the linker for each directory in the rpath.           */\n \n /*  default_libgcc_subdir is the subdirectory name (from the installation   */\n /*  root) where we may find a shared libgcc to use by default.              */\n \n-/*  RESPONSE FILE & GNU LINKER                                              */\n-/*  --------------------------                                              */\n-/*  objlist_file_supported and using_gnu_link used together tell gnatlink   */\n-/*  to generate a GNU style response file. Note that object_file_option     */\n-/*  must be set to \"\" in this case, since no option is required for a       */\n-/*  response file to be passed to GNU ld. With a GNU linker we use the      */\n-/*  linker script to implement the response file feature. Any file passed   */\n-/*  in the GNU ld command line with an unknown extension is supposed to be  */\n-/*  a linker script. Each linker script augment the current configuration.  */\n-/*  The format of such response file is as follow :                         */\n-/*  INPUT (obj1.p obj2.o ...)                                               */\n-\n #define SHARED 'H'\n #define STATIC 'T'\n \n #if defined (__WIN32)\n-const char *__gnat_object_file_option = \"\";\n+const char *__gnat_object_file_option = \"-Wl,@\";\n const char *__gnat_run_path_option = \"\";\n int __gnat_link_max = 30000;\n unsigned char __gnat_objlist_file_supported = 1;\n char __gnat_shared_libgnat_default = STATIC;\n char __gnat_shared_libgcc_default = STATIC;\n-unsigned char __gnat_using_gnu_linker = 1;\n const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_default_libgcc_subdir = \"lib\";\n@@ -115,19 +99,17 @@ int __gnat_link_max = 5000;\n unsigned char __gnat_objlist_file_supported = 1;\n char __gnat_shared_libgnat_default = STATIC;\n char __gnat_shared_libgcc_default = STATIC;\n-unsigned char __gnat_using_gnu_linker = 0;\n const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_default_libgcc_subdir = \"lib\";\n \n #elif defined (__FreeBSD__)\n-const char *__gnat_object_file_option = \"\";\n+const char *__gnat_object_file_option = \"-Wl,@\";\n const char *__gnat_run_path_option = \"-Wl,-rpath,\";\n char __gnat_shared_libgnat_default = STATIC;\n char __gnat_shared_libgcc_default = STATIC;\n int __gnat_link_max = 8192;\n unsigned char __gnat_objlist_file_supported = 1;\n-unsigned char __gnat_using_gnu_linker = 1;\n const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_default_libgcc_subdir = \"lib\";\n@@ -139,19 +121,17 @@ char __gnat_shared_libgnat_default = STATIC;\n char __gnat_shared_libgcc_default = SHARED;\n int __gnat_link_max = 262144;\n unsigned char __gnat_objlist_file_supported = 1;\n-unsigned char __gnat_using_gnu_linker = 0;\n const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 1;\n const char *__gnat_default_libgcc_subdir = \"lib\";\n \n #elif defined (linux) || defined(__GLIBC__)\n-const char *__gnat_object_file_option = \"\";\n+const char *__gnat_object_file_option = \"-Wl,@\";\n const char *__gnat_run_path_option = \"-Wl,-rpath,\";\n char __gnat_shared_libgnat_default = STATIC;\n char __gnat_shared_libgcc_default = STATIC;\n int __gnat_link_max = 8192;\n unsigned char __gnat_objlist_file_supported = 1;\n-unsigned char __gnat_using_gnu_linker = 1;\n const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n #if defined (__x86_64)\n@@ -174,7 +154,6 @@ char __gnat_shared_libgnat_default = STATIC;\n char __gnat_shared_libgcc_default = STATIC;\n int __gnat_link_max = 15000;\n const unsigned char __gnat_objlist_file_supported = 1;\n-unsigned char __gnat_using_gnu_linker = 0;\n const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_default_libgcc_subdir = \"lib\";\n@@ -183,13 +162,12 @@ const char *__gnat_default_libgcc_subdir = \"lib\";\n /*  These are the settings for all systems that use gnu ld. GNU style response\n     file is supported, the shared library default is STATIC.  */\n \n-const char *__gnat_object_file_option = \"\";\n+const char *__gnat_object_file_option = \"-Wl,@\";\n const char *__gnat_run_path_option = \"\";\n char __gnat_shared_libgnat_default = STATIC;\n char __gnat_shared_libgcc_default = STATIC;\n int __gnat_link_max = 8192;\n unsigned char __gnat_objlist_file_supported = 1;\n-unsigned char __gnat_using_gnu_linker = 1;\n const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_default_libgcc_subdir = \"lib\";\n@@ -201,7 +179,6 @@ char __gnat_shared_libgnat_default = STATIC;\n char __gnat_shared_libgcc_default = STATIC;\n int __gnat_link_max = 2147483647;\n unsigned char __gnat_objlist_file_supported = 0;\n-unsigned char __gnat_using_gnu_linker = 0;\n const char *__gnat_object_library_extension = \".olb\";\n unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_default_libgcc_subdir = \"lib\";\n@@ -213,7 +190,6 @@ char __gnat_shared_libgnat_default = STATIC;\n char __gnat_shared_libgcc_default = STATIC;\n int __gnat_link_max = 2147483647;\n unsigned char __gnat_objlist_file_supported = 0;\n-unsigned char __gnat_using_gnu_linker = 0;\n const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n #if defined (__sparc_v9__) || defined (__sparcv9)\n@@ -231,7 +207,6 @@ char __gnat_shared_libgnat_default = STATIC;\n char __gnat_shared_libgcc_default = STATIC;\n int __gnat_link_max = 2147483647;\n unsigned char __gnat_objlist_file_supported = 0;\n-unsigned char __gnat_using_gnu_linker = 0;\n const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_default_libgcc_subdir = \"lib\";\n@@ -246,7 +221,6 @@ char __gnat_shared_libgnat_default = STATIC;\n char __gnat_shared_libgcc_default = STATIC;\n int __gnat_link_max = 2147483647;\n unsigned char __gnat_objlist_file_supported = 0;\n-unsigned char __gnat_using_gnu_linker = 0;\n const char *__gnat_object_library_extension = \".a\";\n unsigned char __gnat_separate_run_path_options = 0;\n const char *__gnat_default_libgcc_subdir = \"lib\";"}, {"sha": "2e3f0c0c10804d48fc3bfec2a1a8567875907c96", "filename": "gcc/ada/mlib-utl.adb", "status": "modified", "additions": 46, "deletions": 71, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Fada%2Fmlib-utl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Fada%2Fmlib-utl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmlib-utl.adb?ref=b993039f5bb3870d3c6fcb61f9554067e76141a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2011, AdaCore                     --\n+--                     Copyright (C) 2002-2012, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,8 +31,6 @@ with Output;   use Output;\n \n with Interfaces.C.Strings; use Interfaces.C.Strings;\n \n-with System;\n-\n package body MLib.Utl is\n \n    Adalib_Path : String_Access := null;\n@@ -353,16 +351,13 @@ package body MLib.Utl is\n       --  Pointer to a string representing the linker option which specifies\n       --  the response file.\n \n-      Using_GNU_Linker : Boolean;\n-      for Using_GNU_Linker'Size use Character'Size;\n-      pragma Import (C, Using_GNU_Linker, \"__gnat_using_gnu_linker\");\n-      --  Predicate indicating whether this target uses the GNU linker. In\n-      --  this case we must output a GNU linker compatible response file.\n+      Object_File_Option : constant String := Value (Object_File_Option_Ptr);\n+      --  The linker option which specifies the response file as a string\n \n-      Opening : aliased constant String := \"\"\"\";\n-      Closing : aliased constant String := '\"' & ASCII.LF;\n-      --  Needed to quote object paths in object list files when GNU linker\n-      --  is used.\n+      Using_GNU_response_file : constant Boolean :=\n+        Object_File_Option'Length > 0\n+          and then Object_File_Option (Object_File_Option'Last) = '@';\n+      --  Whether a GNU response file is used\n \n       Tname    : String_Access;\n       Tname_FD : File_Descriptor := Invalid_FD;\n@@ -390,20 +385,46 @@ package body MLib.Utl is\n \n       Position : Object_Position;\n \n-      procedure Write_RF (A : System.Address; N : Integer);\n+      procedure Write_RF (S : String);\n       --  Write a string to the response file and check if it was successful.\n       --  Fail the program if it was not successful (disk full).\n \n       --------------\n       -- Write_RF --\n       --------------\n \n-      procedure Write_RF (A : System.Address; N : Integer) is\n-         Status : Integer;\n+      procedure Write_RF (S : String) is\n+         Success : Boolean := True;\n       begin\n-         Status := Write (Tname_FD, A, N);\n+         --  If a GNU response file is used, space and backslash need to be\n+         --  escaped because they are interpreted as a string separator and\n+         --  an escape character respectively by the underlying mechanism.\n+         --  On the other hand, quote and double-quote are not escaped since\n+         --  they are interpreted as string delimiters on both sides.\n+\n+         if Using_GNU_response_file then\n+            for I in S'Range loop\n+               if S (I) = ' ' or else S (I) = '\\' then\n+                  if Write (Tname_FD, ASCII.BACK_SLASH'Address, 1) /= 1 then\n+                     Success := False;\n+                  end if;\n+               end if;\n \n-         if Status /= N then\n+               if Write (Tname_FD, S (I)'Address, 1) /= 1 then\n+                  Success := False;\n+               end if;\n+            end loop;\n+         else\n+            if Write (Tname_FD, S'Address, S'Length) /= S'Length then\n+               Success := False;\n+            end if;\n+         end if;\n+\n+         if Write (Tname_FD, ASCII.LF'Address, 1) /= 1 then\n+            Success := False;\n+         end if;\n+\n+         if not Success then\n             Fail (\"cannot generate response file to link library: disk full\");\n          end if;\n       end Write_RF;\n@@ -529,62 +550,18 @@ package body MLib.Utl is\n \n          Create_Temp_File (Tname_FD, Tname);\n \n-         --  If target is using the GNU linker we must add a special header\n-         --  and footer in the response file.\n-\n-         --  The syntax is : INPUT (object1.o object2.o ... )\n-\n-         --  Because the GNU linker does not like name with characters such\n-         --  as '!', we must put the object paths between double quotes.\n-\n-         if Using_GNU_Linker then\n-            declare\n-               GNU_Header : aliased constant String := \"INPUT (\";\n-\n-            begin\n-               Write_RF (GNU_Header'Address, GNU_Header'Length);\n-            end;\n-         end if;\n-\n          for J in Objects'Range loop\n-            --  Opening quote for GNU linker\n-\n-            if Using_GNU_Linker then\n-               Write_RF (Opening'Address, 1);\n-            end if;\n-\n-            Write_RF (Objects (J).all'Address, Objects (J).all'Length);\n-\n-            --  Closing quote for GNU linker\n-\n-            if Using_GNU_Linker then\n-               Write_RF (Closing'Address, 2);\n-\n-            else\n-               Write_RF (ASCII.LF'Address, 1);\n-            end if;\n+            Write_RF (Objects (J).all);\n          end loop;\n \n-         --  Handle GNU linker response file footer\n-\n-         if Using_GNU_Linker then\n-            declare\n-               GNU_Footer : aliased constant String := \")\";\n-\n-            begin\n-               Write_RF (GNU_Footer'Address, GNU_Footer'Length);\n-            end;\n-         end if;\n-\n          Close (Tname_FD, Closing_Status);\n \n          if not Closing_Status then\n             Fail (\"cannot generate response file to link library: disk full\");\n          end if;\n \n          A := A + 1;\n-         Arguments (A) :=\n-           new String'(Value (Object_File_Option_Ptr) & Tname.all);\n+         Arguments (A) := new String'(Object_File_Option & Tname.all);\n \n       else\n          A := A + Objects'Length;\n@@ -596,17 +573,15 @@ package body MLib.Utl is\n \n       Spawn (Driver.all, Arguments (1 .. A), Success);\n \n-      if Tname /= null then\n-         Delete_File (Tname.all, Closing_Status);\n+      if Success then\n+         --  Delete the temporary file used in conjunction with linking\n+         --  if one was created.\n \n-         if not Closing_Status then\n-            Write_Str (\"warning: could not delete response file \"\"\");\n-            Write_Str (Tname.all);\n-            Write_Line (\"\"\" to link library\");\n+         if Tname_FD /= Invalid_FD then\n+            Delete_File (Tname.all);\n          end if;\n-      end if;\n \n-      if not Success then\n+      else\n          if Driver_Name = No_Name then\n             Fail (Gcc_Name.all & \" execution error\");\n          else"}, {"sha": "7ec184cd96472fbd7eb48190af57159e786ffe0a", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b993039f5bb3870d3c6fcb61f9554067e76141a9", "patch": "@@ -1470,6 +1470,8 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \textra_objs=\"winnt.o winnt-stubs.o\"\n \tc_target_objs=\"${c_target_objs} msformat-c.o\"\n \tcxx_target_objs=\"${cxx_target_objs} winnt-cxx.o msformat-c.o\"\n+\tgas=yes\n+\tgnu_ld=yes\n \tdefault_use_cxa_atexit=yes\n \tuse_gcc_stdint=wrap\n \tcase ${enable_threads} in"}, {"sha": "7b12b4bd3c7b58424c1fc7a24c0c892408e601a6", "filename": "gcc/config.in", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=b993039f5bb3870d3c6fcb61f9554067e76141a9", "patch": "@@ -333,6 +333,12 @@\n #endif\n \n \n+/* Define if your assembler supports HLE prefixes. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_IX86_HLE\n+#endif\n+\n+\n /* Define if your assembler supports the .quad directive. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_IX86_QUAD\n@@ -350,11 +356,6 @@\n #undef HAVE_AS_IX86_SAHF\n #endif\n \n-/* Define if your assembler supports HLE prefixes. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_AS_IX86_HLE\n-#endif\n-\n \n /* Define if your assembler supports the swap suffix. */\n #ifndef USED_FOR_TARGET\n@@ -1096,7 +1097,7 @@\n #endif\n \n \n-/* Define if using GNU as. */\n+/* Define to 1 if using GNU as. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_GNU_AS\n #endif\n@@ -1108,7 +1109,7 @@\n #endif\n \n \n-/* Define if using GNU ld. */\n+/* Define to 1 if using GNU ld. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_GNU_LD\n #endif"}, {"sha": "1cd61344511a5fccd56fb7535e0c958f11212f7a", "filename": "gcc/configure", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=b993039f5bb3870d3c6fcb61f9554067e76141a9", "patch": "@@ -3393,13 +3393,6 @@ _ACEOF\n \n fi\n \n-gnu_ld=`if test x\"$gnu_ld_flag\" = x\"yes\"; then echo 1; else echo 0; fi`\n-\n-cat >>confdefs.h <<_ACEOF\n-#define HAVE_GNU_LD $gnu_ld\n-_ACEOF\n-\n-\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether a default linker was specified\" >&5\n $as_echo_n \"checking whether a default linker was specified... \" >&6; }\n if test x\"${DEFAULT_LINKER+set}\" = x\"set\"; then\n@@ -3458,13 +3451,6 @@ _ACEOF\n \n fi\n \n-gnu_as=`if test x\"$gas_flag\" = x\"yes\"; then echo 1; else echo 0; fi`\n-\n-cat >>confdefs.h <<_ACEOF\n-#define HAVE_GNU_AS $gnu_as\n-_ACEOF\n-\n-\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether a default assembler was specified\" >&5\n $as_echo_n \"checking whether a default assembler was specified... \" >&6; }\n if test x\"${DEFAULT_ASSEMBLER+set}\" = x\"set\"; then\n@@ -11165,6 +11151,20 @@ $as_echo \"#define USE_LONG_LONG_FOR_WIDEST_FAST_INT 1\" >>confdefs.h\n \n fi\n \n+gnu_ld_bool=`if test x\"$gnu_ld\" = x\"yes\"; then echo 1; else echo 0; fi`\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_GNU_LD $gnu_ld_bool\n+_ACEOF\n+\n+\n+gnu_as_bool=`if test x\"$gas\" = x\"yes\"; then echo 1; else echo 0; fi`\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_GNU_AS $gnu_as_bool\n+_ACEOF\n+\n+\n count=a\n for f in $host_xm_file; do\n \tcount=${count}x"}, {"sha": "a3a40389a3c2a3407954e27522a2e97a98e5f71e", "filename": "gcc/configure.ac", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=b993039f5bb3870d3c6fcb61f9554067e76141a9", "patch": "@@ -213,9 +213,6 @@ if test x\"${DEFAULT_LINKER+set}\" = x\"set\"; then\n \t[Define to enable the use of a default linker.])\n fi\n \n-gnu_ld=`if test x\"$gnu_ld_flag\" = x\"yes\"; then echo 1; else echo 0; fi`\n-AC_DEFINE_UNQUOTED(HAVE_GNU_LD, $gnu_ld, [Define if using GNU ld.])\n-\n AC_MSG_CHECKING([whether a default linker was specified])\n if test x\"${DEFAULT_LINKER+set}\" = x\"set\"; then\n   if test x\"$gnu_ld_flag\" = x\"no\"; then\n@@ -256,9 +253,6 @@ if test x\"${DEFAULT_ASSEMBLER+set}\" = x\"set\"; then\n \t[Define to enable the use of a default assembler.])\n fi\n \n-gnu_as=`if test x\"$gas_flag\" = x\"yes\"; then echo 1; else echo 0; fi`\n-AC_DEFINE_UNQUOTED(HAVE_GNU_AS, $gnu_as, [Define if using GNU as.])\n-\n AC_MSG_CHECKING([whether a default assembler was specified])\n if test x\"${DEFAULT_ASSEMBLER+set}\" = x\"set\"; then\n   if test x\"$gas_flag\" = x\"no\"; then\n@@ -1328,6 +1322,12 @@ if test x$use_long_long_for_widest_fast_int = xyes; then\n efficiently supported by the host hardware.])\n fi\n \n+gnu_ld_bool=`if test x\"$gnu_ld\" = x\"yes\"; then echo 1; else echo 0; fi`\n+AC_DEFINE_UNQUOTED(HAVE_GNU_LD, $gnu_ld_bool, [Define to 1 if using GNU ld.])\n+\n+gnu_as_bool=`if test x\"$gas\" = x\"yes\"; then echo 1; else echo 0; fi`\n+AC_DEFINE_UNQUOTED(HAVE_GNU_AS, $gnu_as_bool, [Define to 1 if using GNU as.])\n+\n count=a\n for f in $host_xm_file; do\n \tcount=${count}x"}, {"sha": "22a29b83a21b5dc939d82a47afc8d7e1fbb625f5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b993039f5bb3870d3c6fcb61f9554067e76141a9", "patch": "@@ -1,3 +1,7 @@\n+2012-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/lto14.adb: New test.\n+\n 2012-05-25  Tristan Gingold  <gingold@adacore.com>\n \n \t* gcc.target/i386/large-frame.c: New."}, {"sha": "d81db7af325aea07914b7ff31d1d0d55a46b7922", "filename": "gcc/testsuite/gnat.dg/lto14.adb", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Ftestsuite%2Fgnat.dg%2Flto14.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b993039f5bb3870d3c6fcb61f9554067e76141a9/gcc%2Ftestsuite%2Fgnat.dg%2Flto14.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flto14.adb?ref=b993039f5bb3870d3c6fcb61f9554067e76141a9", "patch": "@@ -0,0 +1,7 @@\n+-- { dg-do link }\n+-- { dg-options \"-largs -f -margs -flto\" { target lto } }\n+\n+procedure Lto14 is\n+begin\n+  null;\n+end;"}]}