{"sha": "07ac6d8aadae834c20493def3c38ce6b67383c6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdhYzZkOGFhZGFlODM0YzIwNDkzZGVmM2MzOGNlNmI2NzM4M2M2YQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2020-05-06T16:03:27Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-06T11:35:03Z"}, "message": "[Ada] Visibility error with aggregate in Declare_Expression\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Declare_Expression): New subprogram, to\n\tinstall the scope holding local declarations of the expression,\n\tbefore completing its resolution.\n\t(Resolve): For an Expression_With_Actions that comes from a\n\tsource occurrence of a Declare_Expression, call new subprogram.", "tree": {"sha": "38d477a761ba30084926d5c902f61f18e52d4785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38d477a761ba30084926d5c902f61f18e52d4785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07ac6d8aadae834c20493def3c38ce6b67383c6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ac6d8aadae834c20493def3c38ce6b67383c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07ac6d8aadae834c20493def3c38ce6b67383c6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ac6d8aadae834c20493def3c38ce6b67383c6a/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "114efadf43a21f1c56b2b79cdabc0bea91ca68d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114efadf43a21f1c56b2b79cdabc0bea91ca68d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/114efadf43a21f1c56b2b79cdabc0bea91ca68d5"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "eabde9176ccbab55bb9a7dc8a7625c5d48da425b", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ac6d8aadae834c20493def3c38ce6b67383c6a/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ac6d8aadae834c20493def3c38ce6b67383c6a/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=07ac6d8aadae834c20493def3c38ce6b67383c6a", "patch": "@@ -178,6 +178,7 @@ package body Sem_Res is\n    procedure Resolve_Case_Expression           (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Character_Literal         (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Comparison_Op             (N : Node_Id; Typ : Entity_Id);\n+   procedure Resolve_Declare_Expression        (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Entity_Name               (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Equality_Op               (N : Node_Id; Typ : Entity_Id);\n    procedure Resolve_Explicit_Dereference      (N : Node_Id; Typ : Entity_Id);\n@@ -2285,10 +2286,18 @@ package body Sem_Res is\n       Check_Parameterless_Call (N);\n \n       --  The resolution of an Expression_With_Actions is determined by\n-      --  its Expression.\n+      --  its Expression, but if the node comes from source it is a\n+      --  Declare_Expression and requires scope management.\n \n       if Nkind (N) = N_Expression_With_Actions then\n-         Resolve (Expression (N), Typ);\n+         if Comes_From_Source (N)\n+            and then N = Original_Node (N)\n+         then\n+            Resolve_Declare_Expression (N, Typ);\n+\n+         else\n+            Resolve (Expression (N), Typ);\n+         end if;\n \n          Found := True;\n          Expr_Type := Etype (Expression (N));\n@@ -7399,6 +7408,49 @@ package body Sem_Res is\n       end if;\n    end Resolve_Comparison_Op;\n \n+   --------------------------------\n+   -- Resolve_Declare_Expression --\n+   --------------------------------\n+\n+   procedure Resolve_Declare_Expression\n+     (N   : Node_Id;\n+      Typ : Entity_Id)\n+   is\n+      Decl : Node_Id;\n+   begin\n+      --  Install the scope created for local declarations, if\n+      --  any. The syntax allows a Declare_Expression with no\n+      --  declarations, in analogy with block statements.\n+\n+      Decl := First (Actions (N));\n+\n+      while Present (Decl) loop\n+         exit when Nkind (Decl) = N_Object_Declaration;\n+         Next (Decl);\n+      end loop;\n+\n+      if Present (Decl) then\n+         Push_Scope (Scope (Defining_Identifier (Decl)));\n+\n+         declare\n+            E : Entity_Id := First_Entity (Current_Scope);\n+\n+         begin\n+            while Present (E) loop\n+               Set_Current_Entity (E);\n+               Set_Is_Immediately_Visible (E);\n+               Next_Entity (E);\n+            end loop;\n+         end;\n+\n+         Resolve (Expression (N), Typ);\n+         End_Scope;\n+\n+      else\n+         Resolve (Expression (N), Typ);\n+      end if;\n+   end Resolve_Declare_Expression;\n+\n    -----------------------------------------\n    -- Resolve_Discrete_Subtype_Indication --\n    -----------------------------------------"}]}