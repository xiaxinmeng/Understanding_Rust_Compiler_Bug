{"sha": "8c2f568c9a8375927efede4bfc83d6553da7f9a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMyZjU2OGM5YTgzNzU5MjdlZmVkZTRiZmM4M2Q2NTUzZGE3ZjlhMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-08-24T13:06:09Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-08-24T13:06:09Z"}, "message": "Avoid is_constant calls in vectorizable_bswap\n\nThe \"new\" VEC_PERM_EXPR handling makes it easy to support bswap\nfor variable-length vectors.\n\n2018-08-24  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-stmts.c (vectorizable_bswap): Handle variable-length\n\tvectors.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/bswap_1.c: New test.\n\t* gcc.target/aarch64/sve/bswap_2.c: Likewise.\n\t* gcc.target/aarch64/sve/bswap_3.c: Likewise.\n\nFrom-SVN: r263833", "tree": {"sha": "1199c644ada18f8864e7a19909236e5647c67382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1199c644ada18f8864e7a19909236e5647c67382"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c2f568c9a8375927efede4bfc83d6553da7f9a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2f568c9a8375927efede4bfc83d6553da7f9a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c2f568c9a8375927efede4bfc83d6553da7f9a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2f568c9a8375927efede4bfc83d6553da7f9a2/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab7e60cec1a6f4185b0428f3a2b3e71df0bae533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab7e60cec1a6f4185b0428f3a2b3e71df0bae533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab7e60cec1a6f4185b0428f3a2b3e71df0bae533"}], "stats": {"total": 61, "additions": 54, "deletions": 7}, "files": [{"sha": "aa8f392ef46013a9cb3951674ad003e746c0ceaa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2f568c9a8375927efede4bfc83d6553da7f9a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2f568c9a8375927efede4bfc83d6553da7f9a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c2f568c9a8375927efede4bfc83d6553da7f9a2", "patch": "@@ -1,3 +1,8 @@\n+2018-08-24  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-stmts.c (vectorizable_bswap): Handle variable-length\n+\tvectors.\n+\n 2018-08-24  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-slp.c (vect_transform_slp_perm_load): Separate out"}, {"sha": "6520f46362a790092b99c16c18424e8d2ee1db2a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2f568c9a8375927efede4bfc83d6553da7f9a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2f568c9a8375927efede4bfc83d6553da7f9a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c2f568c9a8375927efede4bfc83d6553da7f9a2", "patch": "@@ -1,3 +1,9 @@\n+2018-08-24  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/bswap_1.c: New test.\n+\t* gcc.target/aarch64/sve/bswap_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/bswap_3.c: Likewise.\n+\n 2018-08-24  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/slp_perm_1.c: New test."}, {"sha": "aa4c033a9e09168bd65f0578ec78fbdffd86c3d6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/bswap_1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2f568c9a8375927efede4bfc83d6553da7f9a2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fbswap_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2f568c9a8375927efede4bfc83d6553da7f9a2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fbswap_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fbswap_1.c?ref=8c2f568c9a8375927efede4bfc83d6553da7f9a2", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f (uint16_t *a, uint16_t *b)\n+{\n+  for (int i = 0; i < 100; ++i)\n+    a[i] = __builtin_bswap16 (b[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\trevb\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 1 { xfail aarch64_big_endian } } } */"}, {"sha": "442c65e89838ed51be00bea79e783c8d2b89803d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/bswap_2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2f568c9a8375927efede4bfc83d6553da7f9a2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fbswap_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2f568c9a8375927efede4bfc83d6553da7f9a2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fbswap_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fbswap_2.c?ref=8c2f568c9a8375927efede4bfc83d6553da7f9a2", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f (uint32_t *a, uint32_t *b)\n+{\n+  for (int i = 0; i < 100; ++i)\n+    a[i] = __builtin_bswap32 (b[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\trevb\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 { xfail aarch64_big_endian } } } */"}, {"sha": "75acc64e09d53a17a678df00c82735d8ead416b2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/bswap_3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2f568c9a8375927efede4bfc83d6553da7f9a2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fbswap_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2f568c9a8375927efede4bfc83d6553da7f9a2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fbswap_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fbswap_3.c?ref=8c2f568c9a8375927efede4bfc83d6553da7f9a2", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f (uint64_t *a, uint64_t *b)\n+{\n+  for (int i = 0; i < 100; ++i)\n+    a[i] = __builtin_bswap64 (b[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\trevb\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 { xfail aarch64_big_endian } } } */"}, {"sha": "8d94fcae04ef6b31e24acf64ca559aa506675283", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2f568c9a8375927efede4bfc83d6553da7f9a2/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2f568c9a8375927efede4bfc83d6553da7f9a2/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=8c2f568c9a8375927efede4bfc83d6553da7f9a2", "patch": "@@ -2961,13 +2961,10 @@ vectorizable_bswap (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   vec_info *vinfo = stmt_info->vinfo;\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_info);\n   unsigned ncopies;\n-  unsigned HOST_WIDE_INT nunits, num_bytes;\n \n   op = gimple_call_arg (stmt, 0);\n   vectype = STMT_VINFO_VECTYPE (stmt_info);\n-\n-  if (!TYPE_VECTOR_SUBPARTS (vectype).is_constant (&nunits))\n-    return false;\n+  poly_uint64 nunits = TYPE_VECTOR_SUBPARTS (vectype);\n \n   /* Multiple types in SLP are handled by creating the appropriate number of\n      vectorized stmts for each SLP node.  Hence, NCOPIES is always 1 in\n@@ -2983,11 +2980,11 @@ vectorizable_bswap (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   if (! char_vectype)\n     return false;\n \n-  if (!TYPE_VECTOR_SUBPARTS (char_vectype).is_constant (&num_bytes))\n+  poly_uint64 num_bytes = TYPE_VECTOR_SUBPARTS (char_vectype);\n+  unsigned word_bytes;\n+  if (!constant_multiple_p (num_bytes, nunits, &word_bytes))\n     return false;\n \n-  unsigned word_bytes = num_bytes / nunits;\n-\n   /* The encoding uses one stepped pattern for each byte in the word.  */\n   vec_perm_builder elts (num_bytes, word_bytes, 3);\n   for (unsigned i = 0; i < 3; ++i)"}]}