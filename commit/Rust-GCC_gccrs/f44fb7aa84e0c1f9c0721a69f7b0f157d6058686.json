{"sha": "f44fb7aa84e0c1f9c0721a69f7b0f157d6058686", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ0ZmI3YWE4NGUwYzFmOWMwNzIxYTY5ZjdiMGYxNTdkNjA1ODY4Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-07-31T14:25:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-07-31T14:25:56Z"}, "message": "[37/46] dr_aux tweaks\n\nThis patch makes dr_aux link back to both the scalar data_reference\nand the containing stmt_vec_info, so that it becomes a suitable key\nfor a vectorisable reference.\n\nThe data_reference link is just STMT_VINFO_DATA_REF, moved here\nfrom _stmt_vec_info.  The stmt pointer is a new field and always\ntracks the current stmt_vec_info for the reference (which might\nbe a pattern stmt or the original stmt).\n\nThe patch also makes the dr_aux in this current stmt be the one\nthat counts, rather than have the information stay with the DR_STMT.\nA new macro (STMT_VINFO_DR_INFO) gives this information for a given\nstmt_info.\n\nIn future we could make dr_aux a separate structure, which would\nbe useful if we want to support multiple data references per stmt.\nThat seems too much of a diversion for this series though.\n\n2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (vec_info::move_dr): New member function.\n\t(dataref_aux): Rename to...\n\t(dr_vec_info): ...this and add \"dr\" and \"stmt\" fields.\n\t(_stmt_vec_info::dr_aux): Update accordingly.\n\t(_stmt_vec_info::data_ref_info): Delete.\n\t(STMT_VINFO_GROUPED_ACCESS, DR_GROUP_FIRST_ELEMENT)\n\t(DR_GROUP_NEXT_ELEMENT, DR_GROUP_SIZE, DR_GROUP_STORE_COUNT)\n\t(DR_GROUP_GAP, DR_GROUP_SAME_DR_STMT, REDUC_GROUP_FIRST_ELEMENT):\n\t(REDUC_GROUP_NEXT_ELEMENT, REDUC_GROUP_SIZE): Use dr_aux.dr instead\n\tof data_ref.\n\t(STMT_VINFO_DATA_REF): Likewise.  Turn into an lvalue.\n\t(STMT_VINFO_DR_INFO): New macro.\n\t(DR_VECT_AUX): Use STMT_VINFO_DR_INKFO and vect_dr_stmt.\n\t(set_dr_misalignment): Update after rename of dataref_aux.\n\t(vect_dr_stmt): Move earlier in file.  Return dr_aux.stmt.\n\t* tree-vect-stmts.c (new_stmt_vec_info): Remove redundant\n\tinitialization of STMT_VINFO_DATA_REF.\n\t* tree-vectorizer.c (vec_info::move_dr): New function.\n\t* tree-vect-patterns.c (vect_recog_bool_pattern)\n\t(vect_recog_mask_conversion_pattern)\n\t(vect_recog_gather_scatter_pattern): Use it.\n\t* tree-vect-data-refs.c (vect_analyze_data_refs): Initialize\n\tthe \"dr\" and \"stmt\" fields of dr_vec_info instead of\n\tSTMT_VINFO_DATA_REF.\n\nFrom-SVN: r263152", "tree": {"sha": "e9f486becfeab0c0cdcdbefa678e6470f968fd88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9f486becfeab0c0cdcdbefa678e6470f968fd88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f44fb7aa84e0c1f9c0721a69f7b0f157d6058686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44fb7aa84e0c1f9c0721a69f7b0f157d6058686", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f44fb7aa84e0c1f9c0721a69f7b0f157d6058686", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44fb7aa84e0c1f9c0721a69f7b0f157d6058686/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "634e7150449157267db1a1152370b11446acb6d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/634e7150449157267db1a1152370b11446acb6d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/634e7150449157267db1a1152370b11446acb6d0"}], "stats": {"total": 156, "additions": 97, "deletions": 59}, "files": [{"sha": "51ceaef619b2f5cc6d96b6bc98829ba3fe2ce6d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44fb7aa84e0c1f9c0721a69f7b0f157d6058686/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44fb7aa84e0c1f9c0721a69f7b0f157d6058686/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f44fb7aa84e0c1f9c0721a69f7b0f157d6058686", "patch": "@@ -1,3 +1,30 @@\n+2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (vec_info::move_dr): New member function.\n+\t(dataref_aux): Rename to...\n+\t(dr_vec_info): ...this and add \"dr\" and \"stmt\" fields.\n+\t(_stmt_vec_info::dr_aux): Update accordingly.\n+\t(_stmt_vec_info::data_ref_info): Delete.\n+\t(STMT_VINFO_GROUPED_ACCESS, DR_GROUP_FIRST_ELEMENT)\n+\t(DR_GROUP_NEXT_ELEMENT, DR_GROUP_SIZE, DR_GROUP_STORE_COUNT)\n+\t(DR_GROUP_GAP, DR_GROUP_SAME_DR_STMT, REDUC_GROUP_FIRST_ELEMENT):\n+\t(REDUC_GROUP_NEXT_ELEMENT, REDUC_GROUP_SIZE): Use dr_aux.dr instead\n+\tof data_ref.\n+\t(STMT_VINFO_DATA_REF): Likewise.  Turn into an lvalue.\n+\t(STMT_VINFO_DR_INFO): New macro.\n+\t(DR_VECT_AUX): Use STMT_VINFO_DR_INKFO and vect_dr_stmt.\n+\t(set_dr_misalignment): Update after rename of dataref_aux.\n+\t(vect_dr_stmt): Move earlier in file.  Return dr_aux.stmt.\n+\t* tree-vect-stmts.c (new_stmt_vec_info): Remove redundant\n+\tinitialization of STMT_VINFO_DATA_REF.\n+\t* tree-vectorizer.c (vec_info::move_dr): New function.\n+\t* tree-vect-patterns.c (vect_recog_bool_pattern)\n+\t(vect_recog_mask_conversion_pattern)\n+\t(vect_recog_gather_scatter_pattern): Use it.\n+\t* tree-vect-data-refs.c (vect_analyze_data_refs): Initialize\n+\tthe \"dr\" and \"stmt\" fields of dr_vec_info instead of\n+\tSTMT_VINFO_DATA_REF.\n+\n 2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (_stmt_vec_info::pattern_stmt_p): New field."}, {"sha": "f1f80a8a4ea78ed599ab4e990c4e1439b8f6b2da", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44fb7aa84e0c1f9c0721a69f7b0f157d6058686/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44fb7aa84e0c1f9c0721a69f7b0f157d6058686/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=f44fb7aa84e0c1f9c0721a69f7b0f157d6058686", "patch": "@@ -4120,7 +4120,10 @@ vect_analyze_data_refs (vec_info *vinfo, poly_uint64 *min_vf)\n       poly_uint64 vf;\n \n       gcc_assert (DR_REF (dr));\n-      stmt_vec_info stmt_info = vect_dr_stmt (dr);\n+      stmt_vec_info stmt_info = vinfo->lookup_stmt (DR_STMT (dr));\n+      gcc_assert (!stmt_info->dr_aux.dr);\n+      stmt_info->dr_aux.dr = dr;\n+      stmt_info->dr_aux.stmt = stmt_info;\n \n       /* Check that analysis of the data-ref succeeded.  */\n       if (!DR_BASE_ADDRESS (dr) || !DR_OFFSET (dr) || !DR_INIT (dr)\n@@ -4292,9 +4295,6 @@ vect_analyze_data_refs (vec_info *vinfo, poly_uint64 *min_vf)\n \t    }\n \t}\n \n-      gcc_assert (!STMT_VINFO_DATA_REF (stmt_info));\n-      STMT_VINFO_DATA_REF (stmt_info) = dr;\n-\n       /* Set vectype for STMT.  */\n       scalar_type = TREE_TYPE (DR_REF (dr));\n       STMT_VINFO_VECTYPE (stmt_info)"}, {"sha": "6adc41375f432c0f60be0cd86f0e1f854c3862fb", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44fb7aa84e0c1f9c0721a69f7b0f157d6058686/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44fb7aa84e0c1f9c0721a69f7b0f157d6058686/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=f44fb7aa84e0c1f9c0721a69f7b0f157d6058686", "patch": "@@ -3828,10 +3828,7 @@ vect_recog_bool_pattern (stmt_vec_info stmt_vinfo, tree *type_out)\n \t}\n       pattern_stmt = gimple_build_assign (lhs, SSA_NAME, rhs);\n       pattern_stmt_info = vinfo->add_stmt (pattern_stmt);\n-      STMT_VINFO_DATA_REF (pattern_stmt_info)\n-\t= STMT_VINFO_DATA_REF (stmt_vinfo);\n-      STMT_VINFO_DR_WRT_VEC_LOOP (pattern_stmt_info)\n-\t= STMT_VINFO_DR_WRT_VEC_LOOP (stmt_vinfo);\n+      vinfo->move_dr (pattern_stmt_info, stmt_vinfo);\n       *type_out = vectype;\n       vect_pattern_detected (\"vect_recog_bool_pattern\", last_stmt);\n \n@@ -3954,14 +3951,7 @@ vect_recog_mask_conversion_pattern (stmt_vec_info stmt_vinfo, tree *type_out)\n \n       pattern_stmt_info = vinfo->add_stmt (pattern_stmt);\n       if (STMT_VINFO_DATA_REF (stmt_vinfo))\n-\t{\n-\t  STMT_VINFO_DATA_REF (pattern_stmt_info)\n-\t    = STMT_VINFO_DATA_REF (stmt_vinfo);\n-\t  STMT_VINFO_DR_WRT_VEC_LOOP (pattern_stmt_info)\n-\t    = STMT_VINFO_DR_WRT_VEC_LOOP (stmt_vinfo);\n-\t  STMT_VINFO_GATHER_SCATTER_P (pattern_stmt_info)\n-\t    = STMT_VINFO_GATHER_SCATTER_P (stmt_vinfo);\n-\t}\n+\tvinfo->move_dr (pattern_stmt_info, stmt_vinfo);\n \n       *type_out = vectype1;\n       vect_pattern_detected (\"vect_recog_mask_conversion_pattern\", last_stmt);\n@@ -4283,11 +4273,7 @@ vect_recog_gather_scatter_pattern (stmt_vec_info stmt_info, tree *type_out)\n   /* Copy across relevant vectorization info and associate DR with the\n      new pattern statement instead of the original statement.  */\n   stmt_vec_info pattern_stmt_info = loop_vinfo->add_stmt (pattern_stmt);\n-  STMT_VINFO_DATA_REF (pattern_stmt_info) = dr;\n-  STMT_VINFO_DR_WRT_VEC_LOOP (pattern_stmt_info)\n-    = STMT_VINFO_DR_WRT_VEC_LOOP (stmt_info);\n-  STMT_VINFO_GATHER_SCATTER_P (pattern_stmt_info)\n-    = STMT_VINFO_GATHER_SCATTER_P (stmt_info);\n+  loop_vinfo->move_dr (pattern_stmt_info, stmt_info);\n \n   tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n   *type_out = vectype;"}, {"sha": "76ae8519d3c21ddc67a97d281566907e054ae2ae", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44fb7aa84e0c1f9c0721a69f7b0f157d6058686/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44fb7aa84e0c1f9c0721a69f7b0f157d6058686/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=f44fb7aa84e0c1f9c0721a69f7b0f157d6058686", "patch": "@@ -9872,7 +9872,6 @@ new_stmt_vec_info (gimple *stmt, vec_info *vinfo)\n   STMT_VINFO_VECTORIZABLE (res) = true;\n   STMT_VINFO_IN_PATTERN_P (res) = false;\n   STMT_VINFO_PATTERN_DEF_SEQ (res) = NULL;\n-  STMT_VINFO_DATA_REF (res) = NULL;\n   STMT_VINFO_VEC_REDUCTION_TYPE (res) = TREE_CODE_REDUCTION;\n   STMT_VINFO_VEC_CONST_COND_REDUC_CODE (res) = ERROR_MARK;\n "}, {"sha": "edf139d87abe2351b37ae038078a38bf51647ecc", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44fb7aa84e0c1f9c0721a69f7b0f157d6058686/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44fb7aa84e0c1f9c0721a69f7b0f157d6058686/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=f44fb7aa84e0c1f9c0721a69f7b0f157d6058686", "patch": "@@ -562,6 +562,21 @@ vec_info::lookup_single_use (tree lhs)\n   return NULL;\n }\n \n+/* Record that NEW_STMT_INFO now implements the same data reference\n+   as OLD_STMT_INFO.  */\n+\n+void\n+vec_info::move_dr (stmt_vec_info new_stmt_info, stmt_vec_info old_stmt_info)\n+{\n+  gcc_assert (!is_pattern_stmt_p (old_stmt_info));\n+  STMT_VINFO_DR_INFO (old_stmt_info)->stmt = new_stmt_info;\n+  new_stmt_info->dr_aux = old_stmt_info->dr_aux;\n+  STMT_VINFO_DR_WRT_VEC_LOOP (new_stmt_info)\n+    = STMT_VINFO_DR_WRT_VEC_LOOP (old_stmt_info);\n+  STMT_VINFO_GATHER_SCATTER_P (new_stmt_info)\n+    = STMT_VINFO_GATHER_SCATTER_P (old_stmt_info);\n+}\n+\n /* A helper function to free scev and LOOP niter information, as well as\n    clear loop constraint LOOP_C_FINITE.  */\n "}, {"sha": "2de9548d29fd5cbc0babe04212eb6f8d73705d83", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 48, "deletions": 37, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44fb7aa84e0c1f9c0721a69f7b0f157d6058686/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44fb7aa84e0c1f9c0721a69f7b0f157d6058686/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=f44fb7aa84e0c1f9c0721a69f7b0f157d6058686", "patch": "@@ -240,6 +240,7 @@ struct vec_info {\n   stmt_vec_info lookup_stmt (gimple *);\n   stmt_vec_info lookup_def (tree);\n   stmt_vec_info lookup_single_use (tree);\n+  void move_dr (stmt_vec_info, stmt_vec_info);\n \n   /* The type of vectorization.  */\n   vec_kind kind;\n@@ -767,7 +768,11 @@ enum vect_memory_access_type {\n   VMAT_GATHER_SCATTER\n };\n \n-struct dataref_aux {\n+struct dr_vec_info {\n+  /* The data reference itself.  */\n+  data_reference *dr;\n+  /* The statement that contains the data reference.  */\n+  stmt_vec_info stmt;\n   /* The misalignment in bytes of the reference, or -1 if not known.  */\n   int misalignment;\n   /* The byte alignment that we'd ideally like the reference to have,\n@@ -818,11 +823,7 @@ struct _stmt_vec_info {\n      data-ref (array/pointer/struct access). A GIMPLE stmt is expected to have\n      at most one such data-ref.  */\n \n-  /* Information about the data-ref (access function, etc),\n-     relative to the inner-most containing loop.  */\n-  struct data_reference *data_ref_info;\n-\n-  dataref_aux dr_aux;\n+  dr_vec_info dr_aux;\n \n   /* Information about the data-ref relative to this loop\n      nest (the loop that is being considered for vectorization).  */\n@@ -996,7 +997,7 @@ STMT_VINFO_BB_VINFO (stmt_vec_info stmt_vinfo)\n #define STMT_VINFO_VECTYPE(S)              (S)->vectype\n #define STMT_VINFO_VEC_STMT(S)             (S)->vectorized_stmt\n #define STMT_VINFO_VECTORIZABLE(S)         (S)->vectorizable\n-#define STMT_VINFO_DATA_REF(S)             (S)->data_ref_info\n+#define STMT_VINFO_DATA_REF(S)             ((S)->dr_aux.dr + 0)\n #define STMT_VINFO_GATHER_SCATTER_P(S)\t   (S)->gather_scatter_p\n #define STMT_VINFO_STRIDED_P(S)\t   \t   (S)->strided_p\n #define STMT_VINFO_MEMORY_ACCESS_TYPE(S)   (S)->memory_access_type\n@@ -1017,38 +1018,51 @@ STMT_VINFO_BB_VINFO (stmt_vec_info stmt_vinfo)\n #define STMT_VINFO_DR_STEP_ALIGNMENT(S) \\\n   (S)->dr_wrt_vec_loop.step_alignment\n \n+#define STMT_VINFO_DR_INFO(S) \\\n+  (gcc_checking_assert ((S)->dr_aux.stmt == (S)), &(S)->dr_aux)\n+\n #define STMT_VINFO_IN_PATTERN_P(S)         (S)->in_pattern_p\n #define STMT_VINFO_RELATED_STMT(S)         (S)->related_stmt\n #define STMT_VINFO_PATTERN_DEF_SEQ(S)      (S)->pattern_def_seq\n #define STMT_VINFO_SAME_ALIGN_REFS(S)      (S)->same_align_refs\n #define STMT_VINFO_SIMD_CLONE_INFO(S)\t   (S)->simd_clone_info\n #define STMT_VINFO_DEF_TYPE(S)             (S)->def_type\n-#define STMT_VINFO_GROUPED_ACCESS(S)      ((S)->data_ref_info && DR_GROUP_FIRST_ELEMENT(S))\n+#define STMT_VINFO_GROUPED_ACCESS(S) \\\n+  ((S)->dr_aux.dr && DR_GROUP_FIRST_ELEMENT(S))\n #define STMT_VINFO_LOOP_PHI_EVOLUTION_BASE_UNCHANGED(S) (S)->loop_phi_evolution_base_unchanged\n #define STMT_VINFO_LOOP_PHI_EVOLUTION_PART(S) (S)->loop_phi_evolution_part\n #define STMT_VINFO_MIN_NEG_DIST(S)\t(S)->min_neg_dist\n #define STMT_VINFO_NUM_SLP_USES(S)\t(S)->num_slp_uses\n #define STMT_VINFO_REDUC_TYPE(S)\t(S)->reduc_type\n #define STMT_VINFO_REDUC_DEF(S)\t\t(S)->reduc_def\n \n-#define DR_GROUP_FIRST_ELEMENT(S)  (gcc_checking_assert ((S)->data_ref_info), (S)->first_element)\n-#define DR_GROUP_NEXT_ELEMENT(S)   (gcc_checking_assert ((S)->data_ref_info), (S)->next_element)\n-#define DR_GROUP_SIZE(S)           (gcc_checking_assert ((S)->data_ref_info), (S)->size)\n-#define DR_GROUP_STORE_COUNT(S)    (gcc_checking_assert ((S)->data_ref_info), (S)->store_count)\n-#define DR_GROUP_GAP(S)            (gcc_checking_assert ((S)->data_ref_info), (S)->gap)\n-#define DR_GROUP_SAME_DR_STMT(S)   (gcc_checking_assert ((S)->data_ref_info), (S)->same_dr_stmt)\n-\n-#define REDUC_GROUP_FIRST_ELEMENT(S)\t(gcc_checking_assert (!(S)->data_ref_info), (S)->first_element)\n-#define REDUC_GROUP_NEXT_ELEMENT(S)\t(gcc_checking_assert (!(S)->data_ref_info), (S)->next_element)\n-#define REDUC_GROUP_SIZE(S)\t\t(gcc_checking_assert (!(S)->data_ref_info), (S)->size)\n+#define DR_GROUP_FIRST_ELEMENT(S) \\\n+  (gcc_checking_assert ((S)->dr_aux.dr), (S)->first_element)\n+#define DR_GROUP_NEXT_ELEMENT(S) \\\n+  (gcc_checking_assert ((S)->dr_aux.dr), (S)->next_element)\n+#define DR_GROUP_SIZE(S) \\\n+  (gcc_checking_assert ((S)->dr_aux.dr), (S)->size)\n+#define DR_GROUP_STORE_COUNT(S) \\\n+  (gcc_checking_assert ((S)->dr_aux.dr), (S)->store_count)\n+#define DR_GROUP_GAP(S) \\\n+  (gcc_checking_assert ((S)->dr_aux.dr), (S)->gap)\n+#define DR_GROUP_SAME_DR_STMT(S) \\\n+  (gcc_checking_assert ((S)->dr_aux.dr), (S)->same_dr_stmt)\n+\n+#define REDUC_GROUP_FIRST_ELEMENT(S) \\\n+  (gcc_checking_assert (!(S)->dr_aux.dr), (S)->first_element)\n+#define REDUC_GROUP_NEXT_ELEMENT(S) \\\n+  (gcc_checking_assert (!(S)->dr_aux.dr), (S)->next_element)\n+#define REDUC_GROUP_SIZE(S) \\\n+  (gcc_checking_assert (!(S)->dr_aux.dr), (S)->size)\n \n #define STMT_VINFO_RELEVANT_P(S)          ((S)->relevant != vect_unused_in_scope)\n \n #define HYBRID_SLP_STMT(S)                ((S)->slp_type == hybrid)\n #define PURE_SLP_STMT(S)                  ((S)->slp_type == pure_slp)\n #define STMT_SLP_TYPE(S)                   (S)->slp_type\n \n-#define DR_VECT_AUX(dr) (&vinfo_for_stmt (DR_STMT (dr))->dr_aux)\n+#define DR_VECT_AUX(dr) (STMT_VINFO_DR_INFO (vect_dr_stmt (dr)))\n \n #define VECT_MAX_COST 1000\n \n@@ -1259,6 +1273,20 @@ add_stmt_costs (void *data, stmt_vector_for_cost *cost_vec)\n \t\t   cost->misalign, cost->where);\n }\n \n+/* Return the stmt DR is in.  For DR_STMT that have been replaced by\n+   a pattern this returns the corresponding pattern stmt.  Otherwise\n+   DR_STMT is returned.  */\n+\n+inline stmt_vec_info\n+vect_dr_stmt (data_reference *dr)\n+{\n+  gimple *stmt = DR_STMT (dr);\n+  stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n+  /* DR_STMT should never refer to a stmt in a pattern replacement.  */\n+  gcc_checking_assert (!is_pattern_stmt_p (stmt_info));\n+  return stmt_info->dr_aux.stmt;\n+}\n+\n /*-----------------------------------------------------------------*/\n /* Info on data references alignment.                              */\n /*-----------------------------------------------------------------*/\n@@ -1268,8 +1296,7 @@ add_stmt_costs (void *data, stmt_vector_for_cost *cost_vec)\n inline void\n set_dr_misalignment (struct data_reference *dr, int val)\n {\n-  dataref_aux *data_aux = DR_VECT_AUX (dr);\n-  data_aux->misalignment = val;\n+  DR_VECT_AUX (dr)->misalignment = val;\n }\n \n inline int\n@@ -1336,22 +1363,6 @@ vect_dr_behavior (data_reference *dr)\n     return &STMT_VINFO_DR_WRT_VEC_LOOP (stmt_info);\n }\n \n-/* Return the stmt DR is in.  For DR_STMT that have been replaced by\n-   a pattern this returns the corresponding pattern stmt.  Otherwise\n-   DR_STMT is returned.  */\n-\n-inline stmt_vec_info\n-vect_dr_stmt (data_reference *dr)\n-{\n-  gimple *stmt = DR_STMT (dr);\n-  stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n-  if (STMT_VINFO_IN_PATTERN_P (stmt_info))\n-    return STMT_VINFO_RELATED_STMT (stmt_info);\n-  /* DR_STMT should never refer to a stmt in a pattern replacement.  */\n-  gcc_checking_assert (!STMT_VINFO_RELATED_STMT (stmt_info));\n-  return stmt_info;\n-}\n-\n /* Return true if the vect cost model is unlimited.  */\n static inline bool\n unlimited_cost_model (loop_p loop)"}]}