{"sha": "c819ed29b303e42538112e20232de09714bb2a2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgxOWVkMjliMzAzZTQyNTM4MTEyZTIwMjMyZGUwOTcxNGJiMmEyZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-05-20T09:13:19Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-05-20T09:13:19Z"}, "message": "libcpp: Eliminate most of the non-const/reference-returning inline fns\n\ngcc/java/ChangeLog:\n\t* jcf-parse.c (set_source_filename): Replace write through\n\tORDINARY_MAP_FILE_NAME with direct access to \"to_file\".\n\nlibcpp/ChangeLog:\n\t* include/line-map.h (MAP_START_LOCATION): Eliminate the non-const\n\tvariant, and tweak comment for the const variant.\n\t(ORDINARY_MAP_STARTING_LINE_NUMBER): Drop the non-const variant.\n\t(ORDINARY_MAP_INCLUDER_FILE_INDEX): Likewise.\n\t(ORDINARY_MAP_IN_SYSTEM_HEADER_P): Likewise.\n\t(SET_ORDINARY_MAP_NUMBER_OF_COLUMN_BITS): Delete.\n\t(ORDINARY_MAP_FILE_NAME): Drop the non-const variant.\n\t(MACRO_MAP_MACRO): Likewise.\n\t(MACRO_MAP_NUM_MACRO_TOKENS): Likewise.\n\t(MACRO_MAP_LOCATIONS): Likewise.\n\t(MACRO_MAP_EXPANSION_POINT_LOCATION): Likewise.\n\t* line-map.c (linemap_add): Replace writes through macros with\n\tdirect field accesses.\n\t(linemap_enter_macro): Likewise.\n\t(linemap_line_start): Likewise.\n\nFrom-SVN: r223435", "tree": {"sha": "0ca4cd222d162638e55f407eb20c49fcdfb17528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ca4cd222d162638e55f407eb20c49fcdfb17528"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c819ed29b303e42538112e20232de09714bb2a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c819ed29b303e42538112e20232de09714bb2a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c819ed29b303e42538112e20232de09714bb2a2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c819ed29b303e42538112e20232de09714bb2a2f/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ff4ddeb5907968165ef1ef729a8d79f57cf980b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ff4ddeb5907968165ef1ef729a8d79f57cf980b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ff4ddeb5907968165ef1ef729a8d79f57cf980b"}], "stats": {"total": 140, "additions": 39, "deletions": 101}, "files": [{"sha": "4e26aef7ebdfdd2f7189a45a7d36ddbe88328ec0", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c819ed29b303e42538112e20232de09714bb2a2f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c819ed29b303e42538112e20232de09714bb2a2f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c819ed29b303e42538112e20232de09714bb2a2f", "patch": "@@ -1,3 +1,8 @@\n+2015-05-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jcf-parse.c (set_source_filename): Replace write through\n+\tORDINARY_MAP_FILE_NAME with direct access to \"to_file\".\n+\n 2015-04-18  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* jcf-io.c: Adjust for hash_table changes."}, {"sha": "d1c9fc45fc42acb4dea37f66301548c3fba7937a", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c819ed29b303e42538112e20232de09714bb2a2f/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c819ed29b303e42538112e20232de09714bb2a2f/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=c819ed29b303e42538112e20232de09714bb2a2f", "patch": "@@ -374,7 +374,7 @@ set_source_filename (JCF *jcf, int index)\n     }\n       \n   sfname = find_sourcefile (sfname);\n-  ORDINARY_MAP_FILE_NAME (LINEMAPS_LAST_ORDINARY_MAP (line_table)) = sfname;\n+  LINEMAPS_LAST_ORDINARY_MAP (line_table)->to_file = sfname;\n   if (current_class == main_class) main_input_filename = sfname;\n }\n "}, {"sha": "32ace00ccb0fd58721aa7ef355c2f46eb88cc848", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c819ed29b303e42538112e20232de09714bb2a2f/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c819ed29b303e42538112e20232de09714bb2a2f/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c819ed29b303e42538112e20232de09714bb2a2f", "patch": "@@ -1,3 +1,21 @@\n+2015-05-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* include/line-map.h (MAP_START_LOCATION): Eliminate the non-const\n+\tvariant, and tweak comment for the const variant.\n+\t(ORDINARY_MAP_STARTING_LINE_NUMBER): Drop the non-const variant.\n+\t(ORDINARY_MAP_INCLUDER_FILE_INDEX): Likewise.\n+\t(ORDINARY_MAP_IN_SYSTEM_HEADER_P): Likewise.\n+\t(SET_ORDINARY_MAP_NUMBER_OF_COLUMN_BITS): Delete.\n+\t(ORDINARY_MAP_FILE_NAME): Drop the non-const variant.\n+\t(MACRO_MAP_MACRO): Likewise.\n+\t(MACRO_MAP_NUM_MACRO_TOKENS): Likewise.\n+\t(MACRO_MAP_LOCATIONS): Likewise.\n+\t(MACRO_MAP_EXPANSION_POINT_LOCATION): Likewise.\n+\t* line-map.c (linemap_add): Replace writes through macros with\n+\tdirect field accesses.\n+\t(linemap_enter_macro): Likewise.\n+\t(linemap_line_start): Likewise.\n+\n 2015-05-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* directives.c (do_line): Strengthen local \"map\" from"}, {"sha": "41551563868a307ed1621f1445e763c2b721382d", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 1, "deletions": 85, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c819ed29b303e42538112e20232de09714bb2a2f/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c819ed29b303e42538112e20232de09714bb2a2f/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=c819ed29b303e42538112e20232de09714bb2a2f", "patch": "@@ -343,23 +343,14 @@ linemap_check_macro (const line_map *map)\n   return (const line_map_macro *)map;\n }\n \n-/* Read the start location of MAP, as an rvalue.  */\n+/* Read the start location of MAP.  */\n \n inline source_location\n MAP_START_LOCATION (const line_map *map)\n {\n   return map->start_location;\n }\n \n-/* Access the start location of MAP as a reference\n-   (e.g. as an lvalue).  */\n-\n-inline source_location&\n-MAP_START_LOCATION (line_map *map)\n-{\n-  return map->start_location;\n-}\n-\n /* Get the starting line number of ordinary map MAP.  */\n \n inline linenum_type\n@@ -368,15 +359,6 @@ ORDINARY_MAP_STARTING_LINE_NUMBER (const line_map_ordinary *ord_map)\n   return ord_map->to_line;\n }\n \n-/* Access the starting line number of ordinary map MAP by\n-   reference (e.g. as an lvalue).  */\n-\n-inline linenum_type&\n-ORDINARY_MAP_STARTING_LINE_NUMBER (line_map_ordinary *ord_map)\n-{\n-  return ord_map->to_line;\n-}\n-\n /* Get the index of the ordinary map at whose end\n    ordinary map MAP was included.\n \n@@ -388,14 +370,6 @@ ORDINARY_MAP_INCLUDER_FILE_INDEX (const line_map_ordinary *ord_map)\n   return ord_map->included_from;\n }\n \n-/* As above, but by reference (e.g. as an lvalue).  */\n-\n-inline int&\n-ORDINARY_MAP_INCLUDER_FILE_INDEX (line_map_ordinary *ord_map)\n-{\n-  return ord_map->included_from;\n-}\n-\n /* Return a positive value if map encodes locations from a system\n    header, 0 otherwise. Returns 1 if ordinary map MAP encodes locations\n    in a system header and 2 if it encodes locations in a C system header\n@@ -407,14 +381,6 @@ ORDINARY_MAP_IN_SYSTEM_HEADER_P (const line_map_ordinary *ord_map)\n   return ord_map->sysp;\n }\n \n-/* As above, but by reference (e.g. as an lvalue).  */\n-\n-inline unsigned char &\n-ORDINARY_MAP_IN_SYSTEM_HEADER_P (line_map_ordinary *ord_map)\n-{\n-  return ord_map->sysp;\n-}\n-\n /* Get the number of the low-order source_location bits used for a\n    column number within ordinary map MAP.  */\n \n@@ -424,16 +390,6 @@ ORDINARY_MAP_NUMBER_OF_COLUMN_BITS (const line_map_ordinary *ord_map)\n   return ord_map->column_bits;\n }\n \n-/* Set the number of the low-order source_location bits used for a\n-   column number within ordinary map MAP.  */\n-\n-inline void\n-SET_ORDINARY_MAP_NUMBER_OF_COLUMN_BITS (line_map_ordinary *ord_map,\n-\t\t\t\t\tint col_bits)\n-{\n-  ord_map->column_bits = col_bits;\n-}\n-\n /* Get the filename of ordinary map MAP.  */\n \n inline const char *\n@@ -442,14 +398,6 @@ ORDINARY_MAP_FILE_NAME (const line_map_ordinary *ord_map)\n   return ord_map->to_file;\n }\n \n-/* As above, but by reference (e.g. as an lvalue).  */\n-\n-inline const char * &\n-ORDINARY_MAP_FILE_NAME (line_map_ordinary *ord_map)\n-{\n-  return ord_map->to_file;\n-}\n-\n /* Get the cpp macro whose expansion gave birth to macro map MAP.  */\n \n inline cpp_hashnode *\n@@ -458,14 +406,6 @@ MACRO_MAP_MACRO (const line_map_macro *macro_map)\n   return macro_map->macro;\n }\n \n-/* As above, but by reference (e.g. as an lvalue).  */\n-\n-inline cpp_hashnode * &\n-MACRO_MAP_MACRO (line_map_macro *macro_map)\n-{\n-  return macro_map->macro;\n-}\n-\n /* Get the number of tokens inside the replacement-list of the macro\n    that led to macro map MAP.  */\n \n@@ -475,14 +415,6 @@ MACRO_MAP_NUM_MACRO_TOKENS (const line_map_macro *macro_map)\n   return macro_map->n_tokens;\n }\n \n-/* As above, but by reference (e.g. as an lvalue).  */\n-\n-inline unsigned int &\n-MACRO_MAP_NUM_MACRO_TOKENS (line_map_macro *macro_map)\n-{\n-  return macro_map->n_tokens;\n-}\n-\n /* Get the array of pairs of locations within macro map MAP.\n    See the declaration of line_map_macro for more information.  */\n \n@@ -492,14 +424,6 @@ MACRO_MAP_LOCATIONS (const line_map_macro *macro_map)\n   return macro_map->macro_locations;\n }\n \n-/* As above, but by reference (e.g. as an lvalue).  */\n-\n-inline source_location * &\n-MACRO_MAP_LOCATIONS (line_map_macro *macro_map)\n-{\n-  return macro_map->macro_locations;\n-}\n-\n /* Get the location of the expansion point of the macro map MAP.  */\n \n inline source_location\n@@ -508,14 +432,6 @@ MACRO_MAP_EXPANSION_POINT_LOCATION (const line_map_macro *macro_map)\n   return macro_map->expansion;\n }\n \n-/* As above, but by reference (e.g. as an lvalue).  */\n-\n-inline source_location &\n-MACRO_MAP_EXPANSION_POINT_LOCATION (line_map_macro *macro_map)\n-{\n-  return macro_map->expansion;\n-}\n-\n /* The abstraction of a set of location maps. There can be several\n    types of location maps. This abstraction contains the attributes\n    that are independent from the type of the map."}, {"sha": "a5e45e47dd3a790708cd44cf15008e3110a80401", "filename": "libcpp/line-map.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c819ed29b303e42538112e20232de09714bb2a2f/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c819ed29b303e42538112e20232de09714bb2a2f/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=c819ed29b303e42538112e20232de09714bb2a2f", "patch": "@@ -381,31 +381,30 @@ linemap_add (struct line_maps *set, enum lc_reason reason,\n \t}\n     }\n \n-  ORDINARY_MAP_IN_SYSTEM_HEADER_P (map) = sysp;\n-  MAP_START_LOCATION (map) = start_location;\n-  ORDINARY_MAP_FILE_NAME (map) = to_file;\n-  ORDINARY_MAP_STARTING_LINE_NUMBER (map) = to_line;\n+  map->sysp = sysp;\n+  map->start_location = start_location;\n+  map->to_file = to_file;\n+  map->to_line = to_line;\n   LINEMAPS_ORDINARY_CACHE (set) = LINEMAPS_ORDINARY_USED (set) - 1;\n-  SET_ORDINARY_MAP_NUMBER_OF_COLUMN_BITS (map, 0);\n+  map->column_bits = 0;\n   set->highest_location = start_location;\n   set->highest_line = start_location;\n   set->max_column_hint = 0;\n \n   if (reason == LC_ENTER)\n     {\n-      ORDINARY_MAP_INCLUDER_FILE_INDEX (map) = \n+      map->included_from =\n \tset->depth == 0 ? -1 : (int) (LINEMAPS_ORDINARY_USED (set) - 2);\n       set->depth++;\n       if (set->trace_includes)\n \ttrace_include (set, map);\n     }\n   else if (reason == LC_RENAME)\n-    ORDINARY_MAP_INCLUDER_FILE_INDEX (map) =\n-      ORDINARY_MAP_INCLUDER_FILE_INDEX (&map[-1]);\n+    map->included_from = ORDINARY_MAP_INCLUDER_FILE_INDEX (&map[-1]);\n   else if (reason == LC_LEAVE)\n     {\n       set->depth--;\n-      ORDINARY_MAP_INCLUDER_FILE_INDEX (map) =\n+      map->included_from =\n \tORDINARY_MAP_INCLUDER_FILE_INDEX (INCLUDED_FROM (set, map - 1));\n     }\n \n@@ -464,14 +463,14 @@ linemap_enter_macro (struct line_maps *set, struct cpp_hashnode *macro_node,\n \n   map = linemap_check_macro (new_linemap (set, LC_ENTER_MACRO));\n \n-  MAP_START_LOCATION (map) = start_location;\n-  MACRO_MAP_MACRO (map) = macro_node;\n-  MACRO_MAP_NUM_MACRO_TOKENS (map) = num_tokens;\n-  MACRO_MAP_LOCATIONS (map)\n+  map->start_location = start_location;\n+  map->macro = macro_node;\n+  map->n_tokens = num_tokens;\n+  map->macro_locations\n     = (source_location*) reallocator (NULL,\n \t\t\t\t      2 * num_tokens\n \t\t\t\t      * sizeof (source_location));\n-  MACRO_MAP_EXPANSION_POINT_LOCATION (map) = expansion;\n+  map->expansion = expansion;\n   memset (MACRO_MAP_LOCATIONS (map), 0,\n \t  num_tokens * sizeof (source_location));\n \n@@ -580,7 +579,7 @@ linemap_line_start (struct line_maps *set, linenum_type to_line,\n \t\t\t\tORDINARY_MAP_IN_SYSTEM_HEADER_P (map),\n \t\t\t\tORDINARY_MAP_FILE_NAME (map),\n \t\t\t\tto_line)));\n-      SET_ORDINARY_MAP_NUMBER_OF_COLUMN_BITS (map, column_bits);\n+      map->column_bits = column_bits;\n       r = (MAP_START_LOCATION (map)\n \t   + ((to_line - ORDINARY_MAP_STARTING_LINE_NUMBER (map))\n \t      << column_bits));"}]}