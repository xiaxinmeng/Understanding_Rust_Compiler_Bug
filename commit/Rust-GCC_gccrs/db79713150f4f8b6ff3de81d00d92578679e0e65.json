{"sha": "db79713150f4f8b6ff3de81d00d92578679e0e65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI3OTcxMzE1MGY0ZjhiNmZmM2RlODFkMDBkOTI1Nzg2NzllMGU2NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-05-26T21:38:42Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-05-27T17:41:18Z"}, "message": "c++: argument pack with expansion [PR86355]\n\nThis testcase revealed that we were using PACK_EXPANSION_EXTRA_ARGS a lot\nmore than necessary; use_pack_expansion_extra_args_p meant to use it in the\ncase of corresponding arguments in different argument packs differing in\nwhether they are pack expansions, but it was mistakenly also returning true\nfor the case of a single argument pack containing both expansion and\nnon-expansion elements.\n\nSurprisingly, just disabling that didn't lead to any regressions in the\ntestsuite; it seems other changes have prevented us getting to this point\nfor code that used to exercise it.  So this patch limits the check to\narguments in the same position in the packs, and asserts that we never\nactually see a mismatch.\n\n\tPR c++/86355\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (use_pack_expansion_extra_args_p): Don't compare\n\targs from the same argument pack.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/alias-decl-variadic2.C: New test.", "tree": {"sha": "199e2598f3d6aa3d68e4403607c10dca2e86aac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/199e2598f3d6aa3d68e4403607c10dca2e86aac8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db79713150f4f8b6ff3de81d00d92578679e0e65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db79713150f4f8b6ff3de81d00d92578679e0e65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db79713150f4f8b6ff3de81d00d92578679e0e65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db79713150f4f8b6ff3de81d00d92578679e0e65/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b94785dedb08b006419bec1a402614d9241317a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b94785dedb08b006419bec1a402614d9241317a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b94785dedb08b006419bec1a402614d9241317a"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "bb22d685617e2bc61b64ca2d35cf76afafc0dcd0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db79713150f4f8b6ff3de81d00d92578679e0e65/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db79713150f4f8b6ff3de81d00d92578679e0e65/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=db79713150f4f8b6ff3de81d00d92578679e0e65", "patch": "@@ -12422,9 +12422,9 @@ use_pack_expansion_extra_args_p (tree parm_packs,\n       return false;\n     }\n \n-  bool has_expansion_arg = false;\n   for (int i = 0 ; i < arg_pack_len; ++i)\n     {\n+      bool has_expansion_arg = false;\n       bool has_non_expansion_arg = false;\n       for (tree parm_pack = parm_packs;\n \t   parm_pack;\n@@ -12444,7 +12444,10 @@ use_pack_expansion_extra_args_p (tree parm_packs,\n \t}\n \n       if (has_expansion_arg && has_non_expansion_arg)\n-\treturn true;\n+\t{\n+\t  gcc_checking_assert (false);\n+\t  return true;\n+\t}\n     }\n   return false;\n }"}, {"sha": "4299c7e88dc5728829e226ca39dd23f6c529a7b7", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-variadic2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db79713150f4f8b6ff3de81d00d92578679e0e65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-variadic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db79713150f4f8b6ff3de81d00d92578679e0e65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-variadic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-variadic2.C?ref=db79713150f4f8b6ff3de81d00d92578679e0e65", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/86355\n+// { dg-do compile { target c++11 } }\n+\n+template <int...> struct integral_constant {\n+  static const int value = 1;\n+};\n+template <class... T> using mp_all = integral_constant<T::value...>;\n+template <class... T> using check2 = mp_all<mp_all<T..., integral_constant<0>>>;\n+check2<> x;\n+\n+template <class T, class U> struct assert_same;\n+template <class T> struct assert_same<T,T> { };\n+assert_same<decltype(x),integral_constant<1>> a;"}]}