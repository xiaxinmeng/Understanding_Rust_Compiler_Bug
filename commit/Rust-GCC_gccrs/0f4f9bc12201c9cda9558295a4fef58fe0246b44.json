{"sha": "0f4f9bc12201c9cda9558295a4fef58fe0246b44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY0ZjliYzEyMjAxYzljZGE5NTU4Mjk1YTRmZWY1OGZlMDI0NmI0NA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-08-04T16:24:02Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-08-04T16:32:18Z"}, "message": "c++: fix template parm count leak\n\nI noticed that we could leak parser->num_template_parameter_lists with\nerroneous specializations.  We'd increment, notice a problem and then\nbail out.  This refactors cp_parser_explicit_specialization to avoid\nthat code path.  A couple of tests get different diagnostics because\nof the fix.  pr39425 then goes to unbounded template instantiation\nand exceeds the implementation limit.\n\n\tgcc/cp/\n\t* parser.c (cp_parser_explicit_specialization): Refactor\n\tto avoid leak of num_template_parameter_lists value.\n\tgcc/testsuite/\n\t* g++.dg/template/pr39425.C: Adjust errors, (unbounded\n\ttemplate recursion).\n\t* g++.old-deja/g++.pt/spec20.C: Remove fallout diagnostics.", "tree": {"sha": "0fe04fa020cb1b07bb207d25f0ceaac11bec9ef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fe04fa020cb1b07bb207d25f0ceaac11bec9ef9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f4f9bc12201c9cda9558295a4fef58fe0246b44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f4f9bc12201c9cda9558295a4fef58fe0246b44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f4f9bc12201c9cda9558295a4fef58fe0246b44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f4f9bc12201c9cda9558295a4fef58fe0246b44/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35ffd4d16d7e3dbba297da788414a673530b7817", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35ffd4d16d7e3dbba297da788414a673530b7817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35ffd4d16d7e3dbba297da788414a673530b7817"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "1e7cd1963a1fb816f46edfb252c35aae08f7905c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4f9bc12201c9cda9558295a4fef58fe0246b44/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4f9bc12201c9cda9558295a4fef58fe0246b44/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0f4f9bc12201c9cda9558295a4fef58fe0246b44", "patch": "@@ -17653,7 +17653,6 @@ cp_parser_explicit_instantiation (cp_parser* parser)\n static void\n cp_parser_explicit_specialization (cp_parser* parser)\n {\n-  bool need_lang_pop;\n   cp_token *token = cp_lexer_peek_token (parser->lexer);\n \n   /* Look for the `template' keyword.  */\n@@ -17664,52 +17663,54 @@ cp_parser_explicit_specialization (cp_parser* parser)\n   cp_parser_require (parser, CPP_GREATER, RT_GREATER);\n   /* We have processed another parameter list.  */\n   ++parser->num_template_parameter_lists;\n+\n   /* [temp]\n \n      A template ... explicit specialization ... shall not have C\n      linkage.  */\n-  if (current_lang_name == lang_name_c)\n+  bool need_lang_pop = current_lang_name == lang_name_c;\n+  if (need_lang_pop)\n     {\n       error_at (token->location, \"template specialization with C linkage\");\n       maybe_show_extern_c_location ();\n+\n       /* Give it C++ linkage to avoid confusing other parts of the\n \t front end.  */\n       push_lang_context (lang_name_cplusplus);\n       need_lang_pop = true;\n     }\n-  else\n-    need_lang_pop = false;\n-  /* Let the front end know that we are beginning a specialization.  */\n-  if (!begin_specialization ())\n-    {\n-      end_specialization ();\n-      return;\n-    }\n \n-  /* If the next keyword is `template', we need to figure out whether\n-     or not we're looking a template-declaration.  */\n-  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TEMPLATE))\n+  /* Let the front end know that we are beginning a specialization.  */\n+  if (begin_specialization ())\n     {\n-      if (cp_lexer_peek_nth_token (parser->lexer, 2)->type == CPP_LESS\n-\t  && cp_lexer_peek_nth_token (parser->lexer, 3)->type != CPP_GREATER)\n-\tcp_parser_template_declaration_after_export (parser,\n-\t\t\t\t\t\t     /*member_p=*/false);\n+      /* If the next keyword is `template', we need to figure out\n+\t whether or not we're looking a template-declaration.  */\n+      if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TEMPLATE))\n+\t{\n+\t  if (cp_lexer_peek_nth_token (parser->lexer, 2)->type == CPP_LESS\n+\t      && cp_lexer_peek_nth_token (parser->lexer, 3)->type != CPP_GREATER)\n+\t    cp_parser_template_declaration_after_export (parser,\n+\t\t\t\t\t\t\t /*member_p=*/false);\n+\t  else\n+\t    cp_parser_explicit_specialization (parser);\n+\t}\n       else\n-\tcp_parser_explicit_specialization (parser);\n+\t/* Parse the dependent declaration.  */\n+\tcp_parser_single_declaration (parser,\n+\t\t\t\t      /*checks=*/NULL,\n+\t\t\t\t      /*member_p=*/false,\n+\t\t\t\t      /*explicit_specialization_p=*/true,\n+\t\t\t\t      /*friend_p=*/NULL);\n     }\n-  else\n-    /* Parse the dependent declaration.  */\n-    cp_parser_single_declaration (parser,\n-\t\t\t\t  /*checks=*/NULL,\n-\t\t\t\t  /*member_p=*/false,\n-\t\t\t\t  /*explicit_specialization_p=*/true,\n-\t\t\t\t  /*friend_p=*/NULL);\n+\n   /* We're done with the specialization.  */\n   end_specialization ();\n+\n   /* For the erroneous case of a template with C linkage, we pushed an\n      implicit C++ linkage scope; exit that scope now.  */\n   if (need_lang_pop)\n     pop_lang_context ();\n+\n   /* We're done with this parameter list.  */\n   --parser->num_template_parameter_lists;\n }"}, {"sha": "cd304896a616cba160c77bdd6cc172aa7543aef2", "filename": "gcc/testsuite/g++.dg/template/pr39425.C", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4f9bc12201c9cda9558295a4fef58fe0246b44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr39425.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4f9bc12201c9cda9558295a4fef58fe0246b44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr39425.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr39425.C?ref=0f4f9bc12201c9cda9558295a4fef58fe0246b44", "patch": "@@ -5,14 +5,16 @@ class a {\n \n   template<unsigned int s>\n     struct _rec {\n-      static const char size = _rec< (s >> 1) >::size;\n+    static const char size = _rec< (s >> 1) >::size; // { dg-error \"depth\" }\n     };\n \n   template<>\t// { dg-error \"explicit\" }\n-  struct _rec <0> {\n+  struct _rec <0> { // { dg-error \"too few\" }\n     static const char size = 0;\n   };\n \n   static const unsigned int value = _rec < 1 >::size;\n \n-} // { dg-error \"after class definition\" }\n+};\n+\n+// { dg-prune-output \"compilation terminated\" }"}, {"sha": "51bc26906eb72019dcd2db4f169c0250d4017d5c", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec20.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4f9bc12201c9cda9558295a4fef58fe0246b44/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4f9bc12201c9cda9558295a4fef58fe0246b44/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec20.C?ref=0f4f9bc12201c9cda9558295a4fef58fe0246b44", "patch": "@@ -10,7 +10,8 @@ struct S {\n   template <class U> void f(U);\n   template <> void f<int>(int); // { dg-error \"20:template-id .f<int>. in declaration|explicit specialization\" }\n \n-  template <class V> struct I {};      // { dg-error \"template\" }\n-  template <class V> struct I<V*> {};  // { dg-error \"template\" }\n+  template <class V> struct I {};\n+  template <class V> struct I<V*> {};\n+\n   template <> struct I<int>; // { dg-error \"\" } invalid specialization\n };"}]}