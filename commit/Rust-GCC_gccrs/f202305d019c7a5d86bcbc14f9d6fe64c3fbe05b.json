{"sha": "f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIwMjMwNWQwMTljN2E1ZDg2YmNiYzE0ZjlkNmZlNjRjM2ZiZTA1Yg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2007-09-04T18:00:31Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2007-09-04T18:00:31Z"}, "message": "[multiple changes]\n\n2007-09-04  Andrew Haley  <aph@redhat.com>\n\n\tPR java/27908\n\t* testsuite/libjava.lang/PR27908.java\n\t({run1,run2,run3}.isRunning): New Method.\n\t(main): Fix race condition.\n\n2007-08-29  Andrew Haley  <aph@redhat.com>\n\n\t* gnu/classpath/natVMStackWalker.cc (VMStackWalker::getCallingClass):\n\tMake sure we're not sibcalled.\n\t(GET_CALLING_CLASS): Define for ARM EABI.\n\n2007-08-22  Andrew Haley  <aph@redhat.com>\n\n\t* configure.host (BACKTRACESPEC): Add arm*-linux*.\n\n2007-08-22  Andrew Haley  <aph@redhat.com>\n\n\t* configure.ac (LIBSTDCXXSPEC): New.\n\t* configure.host: Add arm*-linux* to pthread test.\n\t* configure.ac (LIBGCJTESTSPEC): Add path to libstdc++ for ARM\n\tEABI.\n\t* testsuite/libjava.jni/jni.exp (gcj_jni_compile_c_to_so): Use\n\t-fexceptions for ARM EABI.\n\t* testsuite/lib/libjava.exp (libjava_arguments): Add libgcj-test.spec.\n\t(libjava_invoke): Log the invocation.\n\n2007-08-15  Andrew Haley  <aph@redhat.com>\n\n\t* configure.ac (extra_ldflags): Define.\n\t* Makefile.am: Use extra_ldflags for all executables.\n\n2007-08-14  Andrew Haley  <aph@redhat.com>\n\n\t* sysdep/arm/backtrace.h: Remove stubs for _Unwind_GetIPInfo,\n\t_Unwind_GetRegionStart, and _Unwind_Backtrace.\n\n2007-07-27  Andrew Haley  <aph@redhat.com>\n\n\t* gnu/classpath/natVMStackWalker.cc (GET_CALLING_CLASS): Stub for\n\tARM EABI.\n\t* exception.cc (get_exception_header_from_ue): New.\n\t(get_ttype_entry): ARM EABI version.\n\t(PERSONALITY_FUNCTION): Add ARM EABI code.\n\t* sysdep/arm/backtrace.h: New file.\n\t* stacktrace.cc (_URC_NORMAL_STOP): New.\n\t* configure.ac (extra_ldflags_libjava): Add libsupc++.la for ARM\n\tEABI.\n\t* configure.host (BACKTRACESPEC): Add arm/backtrace.h.\n\nFrom-SVN: r128098", "tree": {"sha": "09a5f1f5bb8173c991287a709677d9c9cb1925ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09a5f1f5bb8173c991287a709677d9c9cb1925ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/comments", "author": null, "committer": null, "parents": [{"sha": "da6c9e40179629b60f3559b42eca8fa95f8a2a3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da6c9e40179629b60f3559b42eca8fa95f8a2a3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da6c9e40179629b60f3559b42eca8fa95f8a2a3a"}], "stats": {"total": 365, "additions": 285, "deletions": 80}, "files": [{"sha": "83a20e4897a21a0c00e59366280b9cac4bcf1708", "filename": "libjava/Makefile.am", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "patch": "@@ -100,6 +100,7 @@ endif\n GCJ_WITH_FLAGS = $(GCJ) --encoding=UTF-8 -Wno-deprecated\n \n extra_ldflags_libjava = @extra_ldflags_libjava@\n+extra_ldflags = @extra_ldflags@\n \n if ANONVERSCRIPT\n extra_ldflags_libjava += -Wl,--version-script=$(srcdir)/libgcj.ver\n@@ -110,7 +111,7 @@ GCJLINK = $(LIBTOOL) --tag=GCJ --mode=link $(GCJ) -L$(here) $(JC1FLAGS) \\\n GCJ_FOR_ECJX = @GCJ_FOR_ECJX@\n GCJ_FOR_ECJX_LINK = $(GCJ_FOR_ECJX) -o $@\n LIBLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXX) -L$(here) $(JC1FLAGS) \\\n-          $(LDFLAGS) $(extra_ldflags_libjava) -o $@\n+          $(LDFLAGS) $(extra_ldflags_libjava) $(extra_ldflags) -o $@\n \n GCC_UNWIND_INCLUDE = @GCC_UNWIND_INCLUDE@\n \n@@ -238,7 +239,7 @@ xlib_nat_files = $(xlib_nat_source_files:.cc=.lo)\n # Include THREADLIBS here to ensure that the correct version of\n # certain linuxthread functions get linked:\n ## The mysterious backslash in the grep pattern is consumed by make.\n-libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) $(THREADLDFLAGS) $(THREADLIBS) \\\n+libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) $(THREADLDFLAGS) $(extra_ldflags) $(THREADLIBS) \\\n \t$(LIBLTDL) $(SYS_ZLIBS) \\\n \t-version-info `grep -v '^\\#' $(srcdir)/libtool-version` \\\n \t$(LIBGCJ_LD_SYMBOLIC_FUNCTIONS)\n@@ -620,7 +621,7 @@ jv_convert_SOURCES =\n ## need this because we are explicitly using libtool to link using the\n ## `.la' file.\n jv_convert_LDFLAGS = --main=gnu.gcj.convert.Convert \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n jv_convert_LINK = $(GCJLINK)\n ## We don't explicitly link in the libraries we need; libgcj.la brings\n ## in all dependencies.  We need the -L so that gcj can find libgcj\n@@ -641,7 +642,7 @@ gnu/gcj/tools/gcj_dbtool/natMain.cc\n ## need this because we are explicitly using libtool to link using the\n ## `.la' file.\n gcj_dbtool_LDFLAGS = --main=gnu.gcj.tools.gcj_dbtool.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n gcj_dbtool_LINK = $(GCJLINK)\n ## We don't explicitly link in the libraries we need; libgcj.la brings\n ## in all dependencies.  We need the -L so that gcj can find libgcj\n@@ -661,7 +662,7 @@ gc_analyze_SOURCES =\n ## need this because we are explicitly using libtool to link using the\n ## `.la' file.\n gc_analyze_LDFLAGS = --main=gnu.gcj.tools.gc_analyze.MemoryAnalyze \\\n-        -rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+        -rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n gc_analyze_LINK = $(GCJLINK)\n ## See jv_convert_LDADD.\n gc_analyze_LDADD = -L$(here)/.libs libgcj-tools.la libgcj.la\n@@ -674,7 +675,7 @@ gij_SOURCES =\n ## need this because we are explicitly using libtool to link using the\n ## `.la' file.\n gij_LDFLAGS = -rpath $(dbexecdir) -rpath $(toolexeclibdir) \\\n-\t-shared-libgcc $(THREADLDFLAGS)\n+\t-shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n gij_LINK = $(GCJLINK)\n ## See jv_convert_LDADD.\n gij_LDADD = -L$(here)/.libs libgij.la\n@@ -721,7 +722,7 @@ endif !NATIVE\n ## This is a dummy definition.\n gappletviewer_SOURCES =\n gappletviewer_LDFLAGS = --main=gnu.classpath.tools.appletviewer.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n gappletviewer_LINK = $(GCJLINK)\n ## See jv_convert_LDADD.\n gappletviewer_LDADD = -L$(here)/.libs libgcj-tools.la\n@@ -730,7 +731,7 @@ gappletviewer_DEPENDENCIES = libgcj-tools.la\n ## This is a dummy definition.\n gjarsigner_SOURCES =\n gjarsigner_LDFLAGS = --main=gnu.classpath.tools.jarsigner.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n gjarsigner_LINK = $(GCJLINK)\n ## See jv_convert_LDADD.\n gjarsigner_LDADD = -L$(here)/.libs libgcj-tools.la\n@@ -739,7 +740,7 @@ gjarsigner_DEPENDENCIES = libgcj-tools.la\n ## This is a dummy definition.\n gkeytool_SOURCES =\n gkeytool_LDFLAGS = --main=gnu.classpath.tools.keytool.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n gkeytool_LINK = $(GCJLINK)\n ## See jv_convert_LDADD.\n gkeytool_LDADD = -L$(here)/.libs libgcj-tools.la\n@@ -748,7 +749,7 @@ gkeytool_DEPENDENCIES = libgcj-tools.la\n ## This is a dummy definition.\n gjar_SOURCES =\n gjar_LDFLAGS = --main=gnu.classpath.tools.jar.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n gjar_LINK = $(GCJLINK)\n ## See jv_convert_LDADD.\n gjar_LDADD = -L$(here)/.libs libgcj-tools.la\n@@ -757,7 +758,7 @@ gjar_DEPENDENCIES = libgcj-tools.la\n ## This is a dummy definition.\n gjavah_SOURCES =\n gjavah_LDFLAGS = --main=gnu.classpath.tools.javah.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n gjavah_LINK = $(GCJLINK)\n ## See jv_convert_LDADD.\n gjavah_LDADD = -L$(here)/.libs libgcj-tools.la\n@@ -766,7 +767,7 @@ gjavah_DEPENDENCIES = libgcj-tools.la\n ## This is a dummy definition.\n gcjh_SOURCES =\n gcjh_LDFLAGS = --main=gnu.classpath.tools.javah.GcjhMain \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n gcjh_LINK = $(GCJLINK)\n ## See jv_convert_LDADD.\n gcjh_LDADD = -L$(here)/.libs libgcj-tools.la\n@@ -775,7 +776,7 @@ gcjh_DEPENDENCIES = libgcj-tools.la\n ## This is a dummy definition.\n gnative2ascii_SOURCES =\n gnative2ascii_LDFLAGS = --main=gnu.classpath.tools.native2ascii.Native2ASCII \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n gnative2ascii_LINK = $(GCJLINK)\n ## See jv_convert_LDADD.\n gnative2ascii_LDADD = -L$(here)/.libs libgcj-tools.la\n@@ -784,7 +785,7 @@ gnative2ascii_DEPENDENCIES = libgcj-tools.la\n ## This is a dummy definition.\n gorbd_SOURCES =\n gorbd_LDFLAGS = --main=gnu.classpath.tools.orbd.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n gorbd_LINK = $(GCJLINK)\n ## See jv_convert_LDADD.\n gorbd_LDADD = -L$(here)/.libs libgcj-tools.la\n@@ -793,7 +794,7 @@ gorbd_DEPENDENCIES = libgcj-tools.la\n ## This is a dummy definition.\n grmid_SOURCES =\n grmid_LDFLAGS = --main=gnu.classpath.tools.rmid.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n grmid_LINK = $(GCJLINK)\n ## See jv_convert_LDADD.\n grmid_LDADD = -L$(here)/.libs libgcj-tools.la\n@@ -802,7 +803,7 @@ grmid_DEPENDENCIES = libgcj-tools.la\n ## This is a dummy definition.\n gserialver_SOURCES =\n gserialver_LDFLAGS = --main=gnu.classpath.tools.serialver.SerialVer \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n gserialver_LINK = $(GCJLINK)\n ## See jv_convert_LDADD.\n gserialver_LDADD = -L$(here)/.libs libgcj-tools.la\n@@ -811,7 +812,7 @@ gserialver_DEPENDENCIES = libgcj-tools.la\n ## This is a dummy definition.\n gtnameserv_SOURCES =\n gtnameserv_LDFLAGS = --main=gnu.classpath.tools.tnameserv.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n gtnameserv_LINK = $(GCJLINK)\n ## See jv_convert_LDADD.\n gtnameserv_LDADD = -L$(here)/.libs libgcj-tools.la\n@@ -820,7 +821,7 @@ gtnameserv_DEPENDENCIES = libgcj-tools.la\n ## This is a dummy definition.\n grmic_SOURCES =\n grmic_LDFLAGS = --main=gnu.classpath.tools.rmic.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n grmic_LINK = $(GCJLINK)\n ## See jv_convert_LDADD.\n grmic_LDADD = -L$(here)/.libs libgcj-tools.la\n@@ -829,7 +830,7 @@ grmic_DEPENDENCIES = libgcj-tools.la\n ## This is a dummy definition.\n grmiregistry_SOURCES =\n grmiregistry_LDFLAGS = --main=gnu.classpath.tools.rmiregistry.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n grmiregistry_LINK = $(GCJLINK)\n ## See jv_convert_LDADD.\n grmiregistry_LDADD = -L$(here)/.libs libgcj-tools.la"}, {"sha": "febbe5c6c65114397c6ef2c555fe46f882126357", "filename": "libjava/Makefile.in", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "patch": "@@ -81,7 +81,6 @@ subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/libltdl/acinclude.m4 \\\n \t$(top_srcdir)/../config/acx.m4 \\\n-\t$(top_srcdir)/../config/confsubdir.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/gxx-include-dir.m4 \\\n@@ -659,6 +658,7 @@ LIBICONV = @LIBICONV@\n LIBLTDL = @LIBLTDL@\n LIBOBJS = @LIBOBJS@\n LIBS = @LIBS@\n+LIBSTDCXXSPEC = @LIBSTDCXXSPEC@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n LTLIBICONV = @LTLIBICONV@\n@@ -725,6 +725,7 @@ USING_WIN32_THREADS_TRUE = @USING_WIN32_THREADS_TRUE@\n VERSION = @VERSION@\n XLIB_AWT_FALSE = @XLIB_AWT_FALSE@\n XLIB_AWT_TRUE = @XLIB_AWT_TRUE@\n+XMKMF = @XMKMF@\n X_AWT_FALSE = @X_AWT_FALSE@\n X_AWT_TRUE = @X_AWT_TRUE@\n X_CFLAGS = @X_CFLAGS@\n@@ -736,14 +737,9 @@ ZIP = @ZIP@\n ZLIBS = @ZLIBS@\n ZLIBSPEC = @ZLIBSPEC@\n ZLIBTESTSPEC = @ZLIBTESTSPEC@\n-ac_ct_AR = @ac_ct_AR@\n-ac_ct_AS = @ac_ct_AS@\n ac_ct_CC = @ac_ct_CC@\n ac_ct_CXX = @ac_ct_CXX@\n ac_ct_DUMPBIN = @ac_ct_DUMPBIN@\n-ac_ct_LD = @ac_ct_LD@\n-ac_ct_RANLIB = @ac_ct_RANLIB@\n-ac_ct_STRIP = @ac_ct_STRIP@\n am__fastdepCC_FALSE = @am__fastdepCC_FALSE@\n am__fastdepCC_TRUE = @am__fastdepCC_TRUE@\n am__fastdepCXX_FALSE = @am__fastdepCXX_FALSE@\n@@ -764,8 +760,12 @@ build_os = @build_os@\n build_subdir = @build_subdir@\n build_vendor = @build_vendor@\n datadir = @datadir@\n+datarootdir = @datarootdir@\n dbexecdir = @dbexecdir@\n+docdir = @docdir@\n+dvidir = @dvidir@\n exec_prefix = @exec_prefix@\n+extra_ldflags = @extra_ldflags@\n extra_ldflags_libjava = @extra_ldflags_libjava@ $(am__append_5)\n gxx_include_dir = @gxx_include_dir@\n here = @here@\n@@ -776,21 +776,25 @@ host_exeext = @host_exeext@\n host_os = @host_os@\n host_subdir = @host_subdir@\n host_vendor = @host_vendor@\n+htmldir = @htmldir@\n includedir = @includedir@\n infodir = @infodir@\n install_sh = @install_sh@\n libdir = @libdir@\n libexecdir = @libexecdir@\n libstdcxx_incdir = @libstdcxx_incdir@\n+localedir = @localedir@\n localstatedir = @localstatedir@\n lt_ECHO = @lt_ECHO@\n mandir = @mandir@\n mkdir_p = @mkdir_p@\n mkinstalldirs = @mkinstalldirs@\n multi_basedir = @multi_basedir@\n oldincludedir = @oldincludedir@\n+pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n+psdir = @psdir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n subdirs = @subdirs@\n@@ -848,7 +852,7 @@ GCJLINK = $(LIBTOOL) --tag=GCJ --mode=link $(GCJ) -L$(here) $(JC1FLAGS) \\\n \n GCJ_FOR_ECJX_LINK = $(GCJ_FOR_ECJX) -o $@\n LIBLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXX) -L$(here) $(JC1FLAGS) \\\n-          $(LDFLAGS) $(extra_ldflags_libjava) -o $@\n+          $(LDFLAGS) $(extra_ldflags_libjava) $(extra_ldflags) -o $@\n \n WARNINGS = -Wextra -Wall\n AM_CXXFLAGS = \\\n@@ -910,7 +914,7 @@ xlib_nat_files = $(xlib_nat_source_files:.cc=.lo)\n \n # Include THREADLIBS here to ensure that the correct version of\n # certain linuxthread functions get linked:\n-libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) $(THREADLDFLAGS) $(THREADLIBS) \\\n+libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) $(THREADLDFLAGS) $(extra_ldflags) $(THREADLIBS) \\\n \t$(LIBLTDL) $(SYS_ZLIBS) \\\n \t-version-info `grep -v '^\\#' $(srcdir)/libtool-version` \\\n \t$(LIBGCJ_LD_SYMBOLIC_FUNCTIONS)\n@@ -7946,7 +7950,7 @@ extra_headers = java/lang/Object.h java/lang/Class.h\n \n jv_convert_SOURCES = \n jv_convert_LDFLAGS = --main=gnu.gcj.convert.Convert \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n jv_convert_LINK = $(GCJLINK)\n jv_convert_LDADD = -L$(here)/.libs libgcj.la\n@@ -7955,21 +7959,21 @@ gcj_dbtool_SOURCES = \\\n gnu/gcj/tools/gcj_dbtool/natMain.cc\n \n gcj_dbtool_LDFLAGS = --main=gnu.gcj.tools.gcj_dbtool.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n gcj_dbtool_LINK = $(GCJLINK)\n gcj_dbtool_LDADD = gnu/gcj/tools/gcj_dbtool.lo -L$(here)/.libs libgcj.la\n gcj_dbtool_DEPENDENCIES = gnu/gcj/tools/gcj_dbtool.lo libgcj.la libgcj.spec\n gc_analyze_SOURCES = \n gc_analyze_LDFLAGS = --main=gnu.gcj.tools.gc_analyze.MemoryAnalyze \\\n-        -rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+        -rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n gc_analyze_LINK = $(GCJLINK)\n gc_analyze_LDADD = -L$(here)/.libs libgcj-tools.la libgcj.la\n gc_analyze_DEPENDENCIES = libgcj-tools.la libgcj.la libgcj.spec\n gij_SOURCES = \n gij_LDFLAGS = -rpath $(dbexecdir) -rpath $(toolexeclibdir) \\\n-\t-shared-libgcc $(THREADLDFLAGS)\n+\t-shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n gij_LINK = $(GCJLINK)\n gij_LDADD = -L$(here)/.libs libgij.la\n@@ -7990,91 +7994,91 @@ ECJX_BASE_FLAGS = -findirect-dispatch \\\n @NATIVE_TRUE@\t$(am__append_16)\n gappletviewer_SOURCES = \n gappletviewer_LDFLAGS = --main=gnu.classpath.tools.appletviewer.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n gappletviewer_LINK = $(GCJLINK)\n gappletviewer_LDADD = -L$(here)/.libs libgcj-tools.la\n gappletviewer_DEPENDENCIES = libgcj-tools.la\n gjarsigner_SOURCES = \n gjarsigner_LDFLAGS = --main=gnu.classpath.tools.jarsigner.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n gjarsigner_LINK = $(GCJLINK)\n gjarsigner_LDADD = -L$(here)/.libs libgcj-tools.la\n gjarsigner_DEPENDENCIES = libgcj-tools.la\n gkeytool_SOURCES = \n gkeytool_LDFLAGS = --main=gnu.classpath.tools.keytool.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n gkeytool_LINK = $(GCJLINK)\n gkeytool_LDADD = -L$(here)/.libs libgcj-tools.la\n gkeytool_DEPENDENCIES = libgcj-tools.la\n gjar_SOURCES = \n gjar_LDFLAGS = --main=gnu.classpath.tools.jar.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n gjar_LINK = $(GCJLINK)\n gjar_LDADD = -L$(here)/.libs libgcj-tools.la\n gjar_DEPENDENCIES = libgcj-tools.la\n gjavah_SOURCES = \n gjavah_LDFLAGS = --main=gnu.classpath.tools.javah.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n gjavah_LINK = $(GCJLINK)\n gjavah_LDADD = -L$(here)/.libs libgcj-tools.la\n gjavah_DEPENDENCIES = libgcj-tools.la\n gcjh_SOURCES = \n gcjh_LDFLAGS = --main=gnu.classpath.tools.javah.GcjhMain \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n gcjh_LINK = $(GCJLINK)\n gcjh_LDADD = -L$(here)/.libs libgcj-tools.la\n gcjh_DEPENDENCIES = libgcj-tools.la\n gnative2ascii_SOURCES = \n gnative2ascii_LDFLAGS = --main=gnu.classpath.tools.native2ascii.Native2ASCII \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n gnative2ascii_LINK = $(GCJLINK)\n gnative2ascii_LDADD = -L$(here)/.libs libgcj-tools.la\n gnative2ascii_DEPENDENCIES = libgcj-tools.la\n gorbd_SOURCES = \n gorbd_LDFLAGS = --main=gnu.classpath.tools.orbd.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n gorbd_LINK = $(GCJLINK)\n gorbd_LDADD = -L$(here)/.libs libgcj-tools.la\n gorbd_DEPENDENCIES = libgcj-tools.la\n grmid_SOURCES = \n grmid_LDFLAGS = --main=gnu.classpath.tools.rmid.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n grmid_LINK = $(GCJLINK)\n grmid_LDADD = -L$(here)/.libs libgcj-tools.la\n grmid_DEPENDENCIES = libgcj-tools.la\n gserialver_SOURCES = \n gserialver_LDFLAGS = --main=gnu.classpath.tools.serialver.SerialVer \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n gserialver_LINK = $(GCJLINK)\n gserialver_LDADD = -L$(here)/.libs libgcj-tools.la\n gserialver_DEPENDENCIES = libgcj-tools.la\n gtnameserv_SOURCES = \n gtnameserv_LDFLAGS = --main=gnu.classpath.tools.tnameserv.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n gtnameserv_LINK = $(GCJLINK)\n gtnameserv_LDADD = -L$(here)/.libs libgcj-tools.la\n gtnameserv_DEPENDENCIES = libgcj-tools.la\n grmic_SOURCES = \n grmic_LDFLAGS = --main=gnu.classpath.tools.rmic.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n grmic_LINK = $(GCJLINK)\n grmic_LDADD = -L$(here)/.libs libgcj-tools.la\n grmic_DEPENDENCIES = libgcj-tools.la\n grmiregistry_SOURCES = \n grmiregistry_LDFLAGS = --main=gnu.classpath.tools.rmiregistry.Main \\\n-\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)\n+\t-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS) $(extra_ldflags)\n \n grmiregistry_LINK = $(GCJLINK)\n grmiregistry_LDADD = -L$(here)/.libs libgcj-tools.la"}, {"sha": "2a147242b48f17b2fd7fe22387150b1e158dbfa3", "filename": "libjava/configure", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "patch": "@@ -459,7 +459,7 @@ ac_includes_default=\"\\\n #endif\"\n \n ac_subdirs_all=\"$ac_subdirs_all classpath libltdl\"\n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os build_libsubdir build_subdir host_subdir target_subdir multi_basedir host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical LN_S mkinstalldirs JAVA_MAINTAINER_MODE_TRUE JAVA_MAINTAINER_MODE_FALSE CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LDFLAGS INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CCDEPMODE am__fastdepCC_TRUE am__fastdepCC_FALSE CXXDEPMODE am__fastdepCXX_TRUE am__fastdepCXX_FALSE AS ac_ct_AS LD ac_ct_LD AR ac_ct_AR RANLIB ac_ct_RANLIB JAR ZIP UNZIP MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBGCJ_CFLAGS LIBGCJ_CXXFLAGS LIBGCJ_JAVAFLAGS LIBGCJ_LD_SYMBOLIC LIBGCJ_LD_SYMBOLIC_FUNCTIONS LIBGCJDEBUG TOOLKIT XLIB_AWT_TRUE XLIB_AWT_FALSE X_AWT_TRUE X_AWT_FALSE GCJ_FOR_ECJX GCJH host_exeext INCLTDL LIBLTDL DIRLTDL LIBTOOL SED EGREP FGREP GREP DUMPBIN ac_ct_DUMPBIN NM lt_ECHO CPP CPPFLAGS CXXCPP GCJ GCJFLAGS GCJDEPMODE am__fastdepGCJ_TRUE am__fastdepGCJ_FALSE subdirs TESTSUBDIR_TRUE TESTSUBDIR_FALSE ECJ_BUILD_JAR ECJ_JAR BUILD_ECJ1_TRUE BUILD_ECJ1_FALSE INSTALL_ECJ_JAR_TRUE INSTALL_ECJ_JAR_FALSE JAVA_HOME_SET_TRUE JAVA_HOME_SET_FALSE JAVA_HOME INTERPRETER INTERPRETER_TRUE INTERPRETER_FALSE LIBFFI LIBFFIINCS PLATFORM USING_WIN32_PLATFORM_TRUE USING_WIN32_PLATFORM_FALSE USING_POSIX_PLATFORM_TRUE USING_POSIX_PLATFORM_FALSE USING_DARWIN_CRT_TRUE USING_DARWIN_CRT_FALSE SYSTEMSPEC LIBGCJTESTSPEC ZLIBSPEC ZLIBTESTSPEC X_CFLAGS X_PRE_LIBS X_LIBS X_EXTRA_LIBS extra_ldflags_libjava GCLIBS GCINCS GCDEPS GCSPEC JC1GCSPEC GCTESTSPEC USING_BOEHMGC_TRUE USING_BOEHMGC_FALSE USING_NOGC_TRUE USING_NOGC_FALSE THREADLIBS THREADINCS THREADDEPS THREADSPEC THREADSTARTFILESPEC THREADLDFLAGS THREADCXXFLAGS USING_POSIX_THREADS_TRUE USING_POSIX_THREADS_FALSE USING_WIN32_THREADS_TRUE USING_WIN32_THREADS_FALSE USING_NO_THREADS_TRUE USING_NO_THREADS_FALSE USE_LIBGCJ_BC_TRUE USE_LIBGCJ_BC_FALSE LIBGCJ_SPEC HASH_SYNC_SPEC USING_GCC_TRUE USING_GCC_FALSE LIBICONV LTLIBICONV PKG_CONFIG GTK_CFLAGS GTK_LIBS GLIB_CFLAGS GLIB_LIBS LIBART_CFLAGS LIBART_LIBS CLASSPATH_SEPARATOR ZLIBS SYS_ZLIBS ZINCS DIVIDESPEC CHECKREFSPEC EXCEPTIONSPEC BACKTRACESPEC IEEESPEC NATIVE_TRUE NATIVE_FALSE ENABLE_SHARED_TRUE ENABLE_SHARED_FALSE NEEDS_DATA_START_TRUE NEEDS_DATA_START_FALSE GCC_UNWIND_INCLUDE toolexecdir toolexecmainlibdir toolexeclibdir GCJVERSION dbexecdir gxx_include_dir libstdcxx_incdir PERL SYSDEP_SOURCES ANONVERSCRIPT_TRUE ANONVERSCRIPT_FALSE LD_START_STATIC_SPEC LD_FINISH_STATIC_SPEC here LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os build_libsubdir build_subdir host_subdir target_subdir multi_basedir host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical LN_S mkinstalldirs JAVA_MAINTAINER_MODE_TRUE JAVA_MAINTAINER_MODE_FALSE CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LDFLAGS INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CCDEPMODE am__fastdepCC_TRUE am__fastdepCC_FALSE CXXDEPMODE am__fastdepCXX_TRUE am__fastdepCXX_FALSE AS ac_ct_AS LD ac_ct_LD AR ac_ct_AR RANLIB ac_ct_RANLIB JAR ZIP UNZIP MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBGCJ_CFLAGS LIBGCJ_CXXFLAGS LIBGCJ_JAVAFLAGS LIBGCJ_LD_SYMBOLIC LIBGCJ_LD_SYMBOLIC_FUNCTIONS LIBGCJDEBUG TOOLKIT XLIB_AWT_TRUE XLIB_AWT_FALSE X_AWT_TRUE X_AWT_FALSE GCJ_FOR_ECJX GCJH host_exeext INCLTDL LIBLTDL DIRLTDL LIBTOOL SED EGREP FGREP GREP DUMPBIN ac_ct_DUMPBIN NM lt_ECHO CPP CPPFLAGS CXXCPP GCJ GCJFLAGS GCJDEPMODE am__fastdepGCJ_TRUE am__fastdepGCJ_FALSE subdirs TESTSUBDIR_TRUE TESTSUBDIR_FALSE ECJ_BUILD_JAR ECJ_JAR BUILD_ECJ1_TRUE BUILD_ECJ1_FALSE INSTALL_ECJ_JAR_TRUE INSTALL_ECJ_JAR_FALSE JAVA_HOME_SET_TRUE JAVA_HOME_SET_FALSE JAVA_HOME INTERPRETER INTERPRETER_TRUE INTERPRETER_FALSE LIBFFI LIBFFIINCS PLATFORM USING_WIN32_PLATFORM_TRUE USING_WIN32_PLATFORM_FALSE USING_POSIX_PLATFORM_TRUE USING_POSIX_PLATFORM_FALSE USING_DARWIN_CRT_TRUE USING_DARWIN_CRT_FALSE SYSTEMSPEC ZLIBSPEC ZLIBTESTSPEC X_CFLAGS X_PRE_LIBS X_LIBS X_EXTRA_LIBS extra_ldflags_libjava extra_ldflags LIBSTDCXXSPEC LIBGCJTESTSPEC GCLIBS GCINCS GCDEPS GCSPEC JC1GCSPEC GCTESTSPEC USING_BOEHMGC_TRUE USING_BOEHMGC_FALSE USING_NOGC_TRUE USING_NOGC_FALSE THREADLIBS THREADINCS THREADDEPS THREADSPEC THREADSTARTFILESPEC THREADLDFLAGS THREADCXXFLAGS USING_POSIX_THREADS_TRUE USING_POSIX_THREADS_FALSE USING_WIN32_THREADS_TRUE USING_WIN32_THREADS_FALSE USING_NO_THREADS_TRUE USING_NO_THREADS_FALSE USE_LIBGCJ_BC_TRUE USE_LIBGCJ_BC_FALSE LIBGCJ_SPEC HASH_SYNC_SPEC USING_GCC_TRUE USING_GCC_FALSE LIBICONV LTLIBICONV PKG_CONFIG GTK_CFLAGS GTK_LIBS GLIB_CFLAGS GLIB_LIBS LIBART_CFLAGS LIBART_LIBS CLASSPATH_SEPARATOR ZLIBS SYS_ZLIBS ZINCS DIVIDESPEC CHECKREFSPEC EXCEPTIONSPEC BACKTRACESPEC IEEESPEC NATIVE_TRUE NATIVE_FALSE ENABLE_SHARED_TRUE ENABLE_SHARED_FALSE NEEDS_DATA_START_TRUE NEEDS_DATA_START_FALSE GCC_UNWIND_INCLUDE toolexecdir toolexecmainlibdir toolexeclibdir GCJVERSION dbexecdir gxx_include_dir libstdcxx_incdir PERL SYSDEP_SOURCES ANONVERSCRIPT_TRUE ANONVERSCRIPT_FALSE LD_START_STATIC_SPEC LD_FINISH_STATIC_SPEC here LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -18886,9 +18886,6 @@ case \"${host}\" in\n esac\n \n \n-LIBGCJTESTSPEC=\"-L`${PWDCMD-pwd}`/.libs -rpath `${PWDCMD-pwd}`/.libs\"\n-\n-\n \n # Check whether --with-system-zlib or --without-system-zlib was given.\n if test \"${with_system_zlib+set}\" = set; then\n@@ -20372,6 +20369,9 @@ fi\n # FIXME: this should be _libs on some hosts.\n libsubdir=.libs\n \n+LIBGCJTESTSPEC=\"-L`${PWDCMD-pwd}`/.libs -rpath `${PWDCMD-pwd}`/.libs\"\n+\n+LIBSTDCXXSPEC=\n # extra LD Flags which are required for targets\n case \"${host}\" in\n *-*-darwin[0-7].*)\n@@ -20380,9 +20380,21 @@ case \"${host}\" in\n     # on Darwin -single_module speeds up loading of the dynamic libraries.\n     extra_ldflags_libjava=-Wl,-single_module\n     ;;\n+arm*linux*eabi)\n+    # Some of the ARM unwinder code is actually in libstdc++.  We\n+    # could in principle replicate it in libgcj, but it's better to\n+    # have a dependency on libstdc++.\n+    extra_ldflags='-L$(here)/../libstdc++-v3/src/.libs -lstdc++'\n+    LIBSTDCXXSPEC=-lstdc++\n+    LIBGCJTESTSPEC=\"-L`${PWDCMD-pwd}`/.libs -L`${PWDCMD-pwd}`/../libstdc++-v3/src/.libs -rpath `${PWDCMD-pwd}`/.libs:`${PWDCMD-pwd}`/../libstdc++-v3/src/.libs -lstdc++\"\n+    ;;\n esac\n \n \n+\n+\n+\n+\n # Allow the GC to be disabled.  Can be useful when debugging.\n echo \"$as_me:$LINENO: checking for garbage collector to use\" >&5\n echo $ECHO_N \"checking for garbage collector to use... $ECHO_C\" >&6\n@@ -29209,14 +29221,16 @@ s,@USING_POSIX_PLATFORM_FALSE@,$USING_POSIX_PLATFORM_FALSE,;t t\n s,@USING_DARWIN_CRT_TRUE@,$USING_DARWIN_CRT_TRUE,;t t\n s,@USING_DARWIN_CRT_FALSE@,$USING_DARWIN_CRT_FALSE,;t t\n s,@SYSTEMSPEC@,$SYSTEMSPEC,;t t\n-s,@LIBGCJTESTSPEC@,$LIBGCJTESTSPEC,;t t\n s,@ZLIBSPEC@,$ZLIBSPEC,;t t\n s,@ZLIBTESTSPEC@,$ZLIBTESTSPEC,;t t\n s,@X_CFLAGS@,$X_CFLAGS,;t t\n s,@X_PRE_LIBS@,$X_PRE_LIBS,;t t\n s,@X_LIBS@,$X_LIBS,;t t\n s,@X_EXTRA_LIBS@,$X_EXTRA_LIBS,;t t\n s,@extra_ldflags_libjava@,$extra_ldflags_libjava,;t t\n+s,@extra_ldflags@,$extra_ldflags,;t t\n+s,@LIBSTDCXXSPEC@,$LIBSTDCXXSPEC,;t t\n+s,@LIBGCJTESTSPEC@,$LIBGCJTESTSPEC,;t t\n s,@GCLIBS@,$GCLIBS,;t t\n s,@GCINCS@,$GCINCS,;t t\n s,@GCDEPS@,$GCDEPS,;t t"}, {"sha": "134c054815b568ebd57298f2d2112b8e22be21be", "filename": "libjava/configure.ac", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "patch": "@@ -764,9 +764,6 @@ case \"${host}\" in\n esac\n AC_SUBST(SYSTEMSPEC)\n \n-LIBGCJTESTSPEC=\"-L`${PWDCMD-pwd}`/.libs -rpath `${PWDCMD-pwd}`/.libs\"\n-AC_SUBST(LIBGCJTESTSPEC)\n-\n AC_ARG_WITH(system-zlib,\n   AS_HELP_STRING([--with-system-zlib],\n                  [use installed libz]))\n@@ -780,6 +777,9 @@ AC_PATH_XTRA\n # FIXME: this should be _libs on some hosts.\n libsubdir=.libs\n \n+LIBGCJTESTSPEC=\"-L`${PWDCMD-pwd}`/.libs -rpath `${PWDCMD-pwd}`/.libs\"\n+\n+LIBSTDCXXSPEC=\n # extra LD Flags which are required for targets\n case \"${host}\" in\n *-*-darwin[[0-7]].*)\n@@ -788,8 +788,20 @@ case \"${host}\" in\n     # on Darwin -single_module speeds up loading of the dynamic libraries.\n     extra_ldflags_libjava=-Wl,-single_module\n     ;;\n+arm*linux*eabi)\n+    # Some of the ARM unwinder code is actually in libstdc++.  We\n+    # could in principle replicate it in libgcj, but it's better to\n+    # have a dependency on libstdc++.\n+    extra_ldflags='-L$(here)/../libstdc++-v3/src/.libs -lstdc++'\n+    LIBSTDCXXSPEC=-lstdc++\n+    LIBGCJTESTSPEC=\"-L`${PWDCMD-pwd}`/.libs -L`${PWDCMD-pwd}`/../libstdc++-v3/src/.libs -rpath `${PWDCMD-pwd}`/.libs:`${PWDCMD-pwd}`/../libstdc++-v3/src/.libs -lstdc++\"\n+    ;;\n esac\n AC_SUBST(extra_ldflags_libjava)\n+AC_SUBST(extra_ldflags)\n+AC_SUBST(LIBSTDCXXSPEC)\n+\n+AC_SUBST(LIBGCJTESTSPEC)\n \n # Allow the GC to be disabled.  Can be useful when debugging.\n AC_MSG_CHECKING([for garbage collector to use])"}, {"sha": "8725eebf3a54920362e36128150e6eab96a8192e", "filename": "libjava/configure.host", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "patch": "@@ -86,6 +86,7 @@ case \"${host}\" in\n   arm*-linux*)\n \tlibgcj_interpreter=yes\n \tsysdeps_dir=arm\n+\tfallback_backtrace_h=sysdep/arm/backtrace.h\n \t;;\n   mips-tx39-*|mipstx39-unknown-*)\n \tlibgcj_flags=\"${libgcj_flags} -G 0\"\n@@ -267,6 +268,12 @@ EOF\n \t# disable interpreter, no closure support for N32 and N64 ABIs\n \tlibgcj_interpreter=no\n \t;;\n+  arm*-linux* )\n+\tslow_pthread_self=no\n+\tcan_unwind_signal=no\n+\tCHECKREFSPEC=-fcheck-references\n+\tDIVIDESPEC=-fuse-divide-subroutine\n+\t;;\n   mips*-*-linux* )\n   \tsysdeps_dir=mips\n   \tcan_unwind_signal=yes"}, {"sha": "3a8fe46d57d7b6ed645bf1da99161ae9d15246b5", "filename": "libjava/exception.cc", "status": "modified", "additions": 108, "deletions": 10, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fexception.cc?ref=f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "patch": "@@ -58,6 +58,21 @@ struct java_exception_header\n   _Unwind_Exception unwindHeader;\n };\n \n+#ifdef __ARM_EABI_UNWINDER__\n+// This is the exception class we report -- \"GNUCJAVA\".\n+\n+const _Unwind_Exception_Class __gcj_exception_class\n+  = {'G', 'N', 'U', 'C', 'J', 'A', 'V', 'A'};\n+\n+static inline java_exception_header *\n+get_exception_header_from_ue (_Unwind_Exception *exc)\n+{\n+  return reinterpret_cast<java_exception_header *>(exc + 1) - 1;\n+}\n+\n+extern \"C\" void __cxa_begin_cleanup (_Unwind_Exception*);\n+\n+#else // !__ARM_EABI_UNWINDER__\n // This is the exception class we report -- \"GNUCJAVA\".\n const _Unwind_Exception_Class __gcj_exception_class\n = ((((((((_Unwind_Exception_Class) 'G' \n@@ -75,6 +90,7 @@ get_exception_header_from_ue (_Unwind_Exception *exc)\n {\n   return reinterpret_cast<java_exception_header *>(exc + 1) - 1;\n }\n+#endif // !__ARM_EABI_UNWINDER__\n \n /* Perform a throw, Java style. Throw will unwind through this call,\n    so there better not be any handlers or exception thrown here. */\n@@ -89,7 +105,8 @@ _Jv_Throw (jthrowable value)\n     value = new java::lang::NullPointerException ();\n   xh->value = value;\n \n-  xh->unwindHeader.exception_class = __gcj_exception_class;\n+  memcpy (&xh->unwindHeader.exception_class, &__gcj_exception_class,\n+\t  sizeof xh->unwindHeader.exception_class);\n   xh->unwindHeader.exception_cleanup = NULL;\n \n   /* We're happy with setjmp/longjmp exceptions or region-based\n@@ -159,6 +176,21 @@ parse_lsda_header (_Unwind_Context *context, const unsigned char *p,\n   return p;\n }\n \n+#ifdef __ARM_EABI_UNWINDER__\n+\n+static void **\n+get_ttype_entry(_Unwind_Context *, lsda_header_info* info, _uleb128_t i)\n+{\n+  _Unwind_Ptr ptr;\n+\n+  ptr = (_Unwind_Ptr) (info->TType - (i * 4));\n+  ptr = _Unwind_decode_target2(ptr);\n+  \n+  return reinterpret_cast<void **>(ptr);\n+}\n+\n+#else\n+\n static void **\n get_ttype_entry (_Unwind_Context *context, lsda_header_info *info, long i)\n {\n@@ -170,6 +202,7 @@ get_ttype_entry (_Unwind_Context *context, lsda_header_info *info, long i)\n   return reinterpret_cast<void **>(ptr);\n }\n \n+#endif\n \n // Using a different personality function name causes link failures\n // when trying to mix code using different exception handling models.\n@@ -180,12 +213,33 @@ get_ttype_entry (_Unwind_Context *context, lsda_header_info *info, long i)\n #define PERSONALITY_FUNCTION\t__gcj_personality_v0\n #endif\n \n+#ifdef __ARM_EABI_UNWINDER__\n+\n+#define CONTINUE_UNWINDING \\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (__gnu_unwind_frame(ue_header, context) != _URC_OK)\t\\\n+\treturn _URC_FAILURE;\t\t\t\t\t\\\n+      return _URC_CONTINUE_UNWIND;\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+extern \"C\" _Unwind_Reason_Code\n+PERSONALITY_FUNCTION (_Unwind_State state,\n+\t\t      struct _Unwind_Exception* ue_header,\n+\t\t      struct _Unwind_Context* context)\n+#else\n+\n+#define CONTINUE_UNWINDING return _URC_CONTINUE_UNWIND\n+\n extern \"C\" _Unwind_Reason_Code\n PERSONALITY_FUNCTION (int version,\n \t\t      _Unwind_Action actions,\n \t\t      _Unwind_Exception_Class exception_class,\n \t\t      struct _Unwind_Exception *ue_header,\n \t\t      struct _Unwind_Context *context)\n+\n+#endif\n {\n   java_exception_header *xh = get_exception_header_from_ue (ue_header);\n \n@@ -197,16 +251,56 @@ PERSONALITY_FUNCTION (int version,\n   int handler_switch_value;\n   bool saw_cleanup;\n   bool saw_handler;\n+  bool foreign_exception;\n   int ip_before_insn = 0;\n \n+#ifdef __ARM_EABI_UNWINDER__\n+  _Unwind_Action actions;\n+\n+  switch (state & _US_ACTION_MASK)\n+    {\n+    case _US_VIRTUAL_UNWIND_FRAME:\n+      actions = _UA_SEARCH_PHASE;\n+      break;\n+\n+    case _US_UNWIND_FRAME_STARTING:\n+      actions = _UA_CLEANUP_PHASE;\n+      if (!(state & _US_FORCE_UNWIND)\n+\t  && ue_header->barrier_cache.sp == _Unwind_GetGR(context, 13))\n+\tactions |= _UA_HANDLER_FRAME;\n+      break;\n+\n+    case _US_UNWIND_FRAME_RESUME:\n+      CONTINUE_UNWINDING;\n+      break;\n+\n+    default:\n+      std::abort();\n+    }\n+  actions |= state & _US_FORCE_UNWIND;\n+\n+  // We don't know which runtime we're working with, so can't check this.\n+  // However the ABI routines hide this from us, and we don't actually need\n+  // to know.\n+  foreign_exception = false;\n+\n+  // The dwarf unwinder assumes the context structure holds things like the\n+  // function and LSDA pointers.  The ARM implementation caches these in\n+  // the exception header (UCB).  To avoid rewriting everything we make the\n+  // virtual IP register point at the UCB.\n+  ip = (_Unwind_Ptr) ue_header;\n+  _Unwind_SetGR(context, 12, ip);\n \n+#else\n   // Interface version check.\n   if (version != 1)\n     return _URC_FATAL_PHASE1_ERROR;\n+  foreign_exception = exception_class != __gcj_exception_class;\n+#endif\n \n   // Shortcut for phase 2 found handler for domestic exception.\n   if (actions == (_UA_CLEANUP_PHASE | _UA_HANDLER_FRAME)\n-      && exception_class == __gcj_exception_class)\n+      && !foreign_exception)\n     {\n       handler_switch_value = xh->handlerSwitchValue;\n       landing_pad = xh->landingPad;\n@@ -227,17 +321,17 @@ PERSONALITY_FUNCTION (int version,\n \n   // If no LSDA, then there are no handlers or cleanups.\n   if (! language_specific_data)\n-    return _URC_CONTINUE_UNWIND;\n+    CONTINUE_UNWINDING;\n \n   // Parse the LSDA header.\n   p = parse_lsda_header (context, language_specific_data, &info);\n #ifdef HAVE_GETIPINFO\n   ip = _Unwind_GetIPInfo (context, &ip_before_insn);\n-  if (! ip_before_insn)\n-    --ip;\n #else\n   ip = _Unwind_GetIP (context) - 1;\n #endif\n+  if (! ip_before_insn)\n+    --ip;\n   landing_pad = 0;\n   action_record = 0;\n   handler_switch_value = 0;\n@@ -296,7 +390,7 @@ PERSONALITY_FUNCTION (int version,\n   // If ip is not present in the table, C++ would call terminate.\n   // ??? It is perhaps better to tweek the LSDA so that no-action\n   // is mapped to no-entry for Java.\n-  return _URC_CONTINUE_UNWIND;\n+  CONTINUE_UNWINDING;\n \n  found_something:\n   saw_cleanup = false;\n@@ -334,7 +428,7 @@ PERSONALITY_FUNCTION (int version,\n \t  // During forced unwinding, we only run cleanups.  With a\n \t  // foreign exception class, we have no class info to match.\n \t  else if ((actions & _UA_FORCE_UNWIND)\n-\t      || exception_class != __gcj_exception_class)\n+\t\t   || foreign_exception)\n \t    ;\n \n \t  else if (ar_filter > 0)\n@@ -374,15 +468,15 @@ PERSONALITY_FUNCTION (int version,\n     }\n \n   if (! saw_handler && ! saw_cleanup)\n-    return _URC_CONTINUE_UNWIND;\n+\tCONTINUE_UNWINDING;\n \n   if (actions & _UA_SEARCH_PHASE)\n     {\n       if (! saw_handler)\n-\treturn _URC_CONTINUE_UNWIND;\n+\tCONTINUE_UNWINDING;\n \n       // For domestic exceptions, we cache data from phase 1 for phase 2.\n-      if (exception_class == __gcj_exception_class)\n+      if (! foreign_exception)\n         {\n           xh->handlerSwitchValue = handler_switch_value;\n           xh->landingPad = landing_pad;\n@@ -396,5 +490,9 @@ PERSONALITY_FUNCTION (int version,\n   _Unwind_SetGR (context, __builtin_eh_return_data_regno (1),\n \t\t handler_switch_value);\n   _Unwind_SetIP (context, landing_pad);\n+#ifdef __ARM_EABI_UNWINDER__\n+  if (saw_cleanup)\n+    __cxa_begin_cleanup(ue_header);\n+#endif\n   return _URC_INSTALL_CONTEXT;\n }"}, {"sha": "e9f9b8eca8729e62160bb57a591bf8d6d0ba1fd7", "filename": "libjava/gcj/Makefile.in", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Fgcj%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Fgcj%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2FMakefile.in?ref=f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "patch": "@@ -182,6 +182,7 @@ LIBICONV = @LIBICONV@\n LIBLTDL = @LIBLTDL@\n LIBOBJS = @LIBOBJS@\n LIBS = @LIBS@\n+LIBSTDCXXSPEC = @LIBSTDCXXSPEC@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n LTLIBICONV = @LTLIBICONV@\n@@ -248,6 +249,7 @@ USING_WIN32_THREADS_TRUE = @USING_WIN32_THREADS_TRUE@\n VERSION = @VERSION@\n XLIB_AWT_FALSE = @XLIB_AWT_FALSE@\n XLIB_AWT_TRUE = @XLIB_AWT_TRUE@\n+XMKMF = @XMKMF@\n X_AWT_FALSE = @X_AWT_FALSE@\n X_AWT_TRUE = @X_AWT_TRUE@\n X_CFLAGS = @X_CFLAGS@\n@@ -259,14 +261,9 @@ ZIP = @ZIP@\n ZLIBS = @ZLIBS@\n ZLIBSPEC = @ZLIBSPEC@\n ZLIBTESTSPEC = @ZLIBTESTSPEC@\n-ac_ct_AR = @ac_ct_AR@\n-ac_ct_AS = @ac_ct_AS@\n ac_ct_CC = @ac_ct_CC@\n ac_ct_CXX = @ac_ct_CXX@\n ac_ct_DUMPBIN = @ac_ct_DUMPBIN@\n-ac_ct_LD = @ac_ct_LD@\n-ac_ct_RANLIB = @ac_ct_RANLIB@\n-ac_ct_STRIP = @ac_ct_STRIP@\n am__fastdepCC_FALSE = @am__fastdepCC_FALSE@\n am__fastdepCC_TRUE = @am__fastdepCC_TRUE@\n am__fastdepCXX_FALSE = @am__fastdepCXX_FALSE@\n@@ -287,8 +284,12 @@ build_os = @build_os@\n build_subdir = @build_subdir@\n build_vendor = @build_vendor@\n datadir = @datadir@\n+datarootdir = @datarootdir@\n dbexecdir = @dbexecdir@\n+docdir = @docdir@\n+dvidir = @dvidir@\n exec_prefix = @exec_prefix@\n+extra_ldflags = @extra_ldflags@\n extra_ldflags_libjava = @extra_ldflags_libjava@\n gxx_include_dir = @gxx_include_dir@\n here = @here@\n@@ -299,21 +300,25 @@ host_exeext = @host_exeext@\n host_os = @host_os@\n host_subdir = @host_subdir@\n host_vendor = @host_vendor@\n+htmldir = @htmldir@\n includedir = @includedir@\n infodir = @infodir@\n install_sh = @install_sh@\n libdir = @libdir@\n libexecdir = @libexecdir@\n libstdcxx_incdir = @libstdcxx_incdir@\n+localedir = @localedir@\n localstatedir = @localstatedir@\n lt_ECHO = @lt_ECHO@\n mandir = @mandir@\n mkdir_p = @mkdir_p@\n mkinstalldirs = @mkinstalldirs@\n multi_basedir = @multi_basedir@\n oldincludedir = @oldincludedir@\n+pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n+psdir = @psdir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n subdirs = @subdirs@"}, {"sha": "2f068ca994791f376840a39a8b8fc5fac478d082", "filename": "libjava/gnu/classpath/natVMStackWalker.cc", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Fgnu%2Fclasspath%2FnatVMStackWalker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Fgnu%2Fclasspath%2FnatVMStackWalker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2FnatVMStackWalker.cc?ref=f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "patch": "@@ -19,6 +19,7 @@ details.  */\n #include <java/lang/ClassLoader.h>\n #include <java/lang/Class.h>\n \n+#ifndef __ARM_EABI_UNWINDER__\n // Return the class of the method that contains PC.\n // This is a macro not a function, since defining it as one would\n // introduce an extra frame on the stack.  */\n@@ -44,6 +45,11 @@ details.  */\n \t\t\t\t\t\t\t\t\t\\\n   klass;\t\t\t\t\t\t\t\t\\\n  })\n+#else // __ARM_EABI_UNWINDER__\n+// ARM EABI doesn't support _Unwind_FindEnclosingFunction.\n+#define GET_CALLING_CLASS(PC)\t\t\t\t\\\n+  (_Jv_StackTrace::GetStackWalkerCallingClass ())\n+#endif\n \n JArray<jclass> *\n gnu::classpath::VMStackWalker::getClassContext(void)\n@@ -59,14 +65,18 @@ jclass\n gnu::classpath::VMStackWalker::getCallingClass(void)\n {\n   _Jv_InitClass (&::gnu::classpath::VMStackWalker::class$);\n-  return _Jv_StackTrace::GetStackWalkerCallingClass ();\n+  jclass result = _Jv_StackTrace::GetStackWalkerCallingClass ();\n+  __asm__ __volatile__ (\"\" : : \"g\" (result));\n+  return result;\n }\n \n jclass\n gnu::classpath::VMStackWalker::getCallingClass(::gnu::gcj::RawData *pc)\n {\n   _Jv_InitClass (&::gnu::classpath::VMStackWalker::class$);\n-  return GET_CALLING_CLASS(pc);\n+  jclass result = GET_CALLING_CLASS(pc);\n+  __asm__ __volatile__ (\"\" : : \"g\" (result));\n+  return result;\n }\n \n ::java::lang::ClassLoader *"}, {"sha": "16f8f40474676e75e869280271e62ac186682743", "filename": "libjava/include/Makefile.in", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2FMakefile.in?ref=f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "patch": "@@ -181,6 +181,7 @@ LIBICONV = @LIBICONV@\n LIBLTDL = @LIBLTDL@\n LIBOBJS = @LIBOBJS@\n LIBS = @LIBS@\n+LIBSTDCXXSPEC = @LIBSTDCXXSPEC@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n LTLIBICONV = @LTLIBICONV@\n@@ -247,6 +248,7 @@ USING_WIN32_THREADS_TRUE = @USING_WIN32_THREADS_TRUE@\n VERSION = @VERSION@\n XLIB_AWT_FALSE = @XLIB_AWT_FALSE@\n XLIB_AWT_TRUE = @XLIB_AWT_TRUE@\n+XMKMF = @XMKMF@\n X_AWT_FALSE = @X_AWT_FALSE@\n X_AWT_TRUE = @X_AWT_TRUE@\n X_CFLAGS = @X_CFLAGS@\n@@ -258,14 +260,9 @@ ZIP = @ZIP@\n ZLIBS = @ZLIBS@\n ZLIBSPEC = @ZLIBSPEC@\n ZLIBTESTSPEC = @ZLIBTESTSPEC@\n-ac_ct_AR = @ac_ct_AR@\n-ac_ct_AS = @ac_ct_AS@\n ac_ct_CC = @ac_ct_CC@\n ac_ct_CXX = @ac_ct_CXX@\n ac_ct_DUMPBIN = @ac_ct_DUMPBIN@\n-ac_ct_LD = @ac_ct_LD@\n-ac_ct_RANLIB = @ac_ct_RANLIB@\n-ac_ct_STRIP = @ac_ct_STRIP@\n am__fastdepCC_FALSE = @am__fastdepCC_FALSE@\n am__fastdepCC_TRUE = @am__fastdepCC_TRUE@\n am__fastdepCXX_FALSE = @am__fastdepCXX_FALSE@\n@@ -286,8 +283,12 @@ build_os = @build_os@\n build_subdir = @build_subdir@\n build_vendor = @build_vendor@\n datadir = @datadir@\n+datarootdir = @datarootdir@\n dbexecdir = @dbexecdir@\n+docdir = @docdir@\n+dvidir = @dvidir@\n exec_prefix = @exec_prefix@\n+extra_ldflags = @extra_ldflags@\n extra_ldflags_libjava = @extra_ldflags_libjava@\n gxx_include_dir = @gxx_include_dir@\n here = @here@\n@@ -298,21 +299,25 @@ host_exeext = @host_exeext@\n host_os = @host_os@\n host_subdir = @host_subdir@\n host_vendor = @host_vendor@\n+htmldir = @htmldir@\n includedir = @includedir@\n infodir = @infodir@\n install_sh = @install_sh@\n libdir = @libdir@\n libexecdir = @libexecdir@\n libstdcxx_incdir = @libstdcxx_incdir@\n+localedir = @localedir@\n localstatedir = @localstatedir@\n lt_ECHO = @lt_ECHO@\n mandir = @mandir@\n mkdir_p = @mkdir_p@\n mkinstalldirs = @mkinstalldirs@\n multi_basedir = @multi_basedir@\n oldincludedir = @oldincludedir@\n+pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n+psdir = @psdir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n subdirs = @subdirs@"}, {"sha": "72d715f5acdedb958785db9d451543aec252f780", "filename": "libjava/libgcj.spec.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Flibgcj.spec.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Flibgcj.spec.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flibgcj.spec.in?ref=f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "patch": "@@ -7,6 +7,6 @@\n *startfile: @THREADSTARTFILESPEC@ %(startfileorig)\n \n %rename lib liborig\n-*lib: @LD_START_STATIC_SPEC@ @LIBGCJ_SPEC@ @LD_FINISH_STATIC_SPEC@ -lm @LIBICONV@ @GCSPEC@ @THREADSPEC@ @ZLIBSPEC@ @SYSTEMSPEC@ %(libgcc) %(liborig)\n+*lib: @LD_START_STATIC_SPEC@ @LIBGCJ_SPEC@ @LD_FINISH_STATIC_SPEC@ -lm @LIBICONV@ @GCSPEC@ @THREADSPEC@ @ZLIBSPEC@ @SYSTEMSPEC@ %(libgcc) @LIBSTDCXXSPEC@ %(liborig)\n \n *jc1: @HASH_SYNC_SPEC@ @DIVIDESPEC@ @CHECKREFSPEC@ @JC1GCSPEC@ @EXCEPTIONSPEC@ @BACKTRACESPEC@ @IEEESPEC@ -fkeep-inline-functions"}, {"sha": "d8d1f38ae6c8b2be22a2258727f51dfb202881a4", "filename": "libjava/stacktrace.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Fstacktrace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Fstacktrace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fstacktrace.cc?ref=f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "patch": "@@ -39,6 +39,10 @@ using namespace java::lang::reflect;\n using namespace java::util;\n using namespace gnu::gcj::runtime;\n \n+#ifdef __ARM_EABI_UNWINDER__\n+#define _URC_NORMAL_STOP _URC_FAILURE\n+#endif\n+\n // Maps ncode values to their containing native class.\n // NOTE: Currently this Map contradicts class GC for native classes. This map\n // (and the \"new class stack\") will need to use WeakReferences in order to "}, {"sha": "ee1bd99f89ada017f8b3a275372e6a679ede229c", "filename": "libjava/sysdep/arm/backtrace.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Fsysdep%2Farm%2Fbacktrace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Fsysdep%2Farm%2Fbacktrace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Farm%2Fbacktrace.h?ref=f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "patch": "@@ -0,0 +1,35 @@\n+// backtrace.h - Fallback backtrace implementation. ARM implementation.\n+\n+/* Copyright (C) 2005, 2006  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#ifndef __SYSDEP_BACKTRACE_H__\n+#define __SYSDEP_BACKTRACE_H__\n+\n+#include <java-stack.h>\n+\n+extern \"C\"\n+{\n+/* Unwind through the call stack calling TRACE_FN with STATE for every stack\n+   frame.  Returns the reason why the unwinding was stopped.  */\n+#ifdef __ARM_EABI_UNWINDER__\n+\n+#define _Unwind_FindEnclosingFunction(PC) \\\n+  (PC)\n+\n+_Unwind_Reason_Code\n+fallback_backtrace (_Unwind_Reason_Code (*)(struct _Unwind_Context*, void*), _Jv_UnwindState *)\n+#else\n+_Unwind_Reason_Code\n+fallback_backtrace (_Unwind_Trace_Fn, _Jv_UnwindState *)\n+#endif\n+{\n+  return _URC_NO_REASON;\n+}\n+}\n+#endif"}, {"sha": "321d05d316c3446d6ea8ac468ae840256498d64d", "filename": "libjava/testsuite/Makefile.in", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FMakefile.in?ref=f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "patch": "@@ -170,6 +170,7 @@ LIBICONV = @LIBICONV@\n LIBLTDL = @LIBLTDL@\n LIBOBJS = @LIBOBJS@\n LIBS = @LIBS@\n+LIBSTDCXXSPEC = @LIBSTDCXXSPEC@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n LTLIBICONV = @LTLIBICONV@\n@@ -236,6 +237,7 @@ USING_WIN32_THREADS_TRUE = @USING_WIN32_THREADS_TRUE@\n VERSION = @VERSION@\n XLIB_AWT_FALSE = @XLIB_AWT_FALSE@\n XLIB_AWT_TRUE = @XLIB_AWT_TRUE@\n+XMKMF = @XMKMF@\n X_AWT_FALSE = @X_AWT_FALSE@\n X_AWT_TRUE = @X_AWT_TRUE@\n X_CFLAGS = @X_CFLAGS@\n@@ -247,14 +249,9 @@ ZIP = @ZIP@\n ZLIBS = @ZLIBS@\n ZLIBSPEC = @ZLIBSPEC@\n ZLIBTESTSPEC = @ZLIBTESTSPEC@\n-ac_ct_AR = @ac_ct_AR@\n-ac_ct_AS = @ac_ct_AS@\n ac_ct_CC = @ac_ct_CC@\n ac_ct_CXX = @ac_ct_CXX@\n ac_ct_DUMPBIN = @ac_ct_DUMPBIN@\n-ac_ct_LD = @ac_ct_LD@\n-ac_ct_RANLIB = @ac_ct_RANLIB@\n-ac_ct_STRIP = @ac_ct_STRIP@\n am__fastdepCC_FALSE = @am__fastdepCC_FALSE@\n am__fastdepCC_TRUE = @am__fastdepCC_TRUE@\n am__fastdepCXX_FALSE = @am__fastdepCXX_FALSE@\n@@ -275,8 +272,12 @@ build_os = @build_os@\n build_subdir = @build_subdir@\n build_vendor = @build_vendor@\n datadir = @datadir@\n+datarootdir = @datarootdir@\n dbexecdir = @dbexecdir@\n+docdir = @docdir@\n+dvidir = @dvidir@\n exec_prefix = @exec_prefix@\n+extra_ldflags = @extra_ldflags@\n extra_ldflags_libjava = @extra_ldflags_libjava@\n gxx_include_dir = @gxx_include_dir@\n here = @here@\n@@ -287,21 +288,25 @@ host_exeext = @host_exeext@\n host_os = @host_os@\n host_subdir = @host_subdir@\n host_vendor = @host_vendor@\n+htmldir = @htmldir@\n includedir = @includedir@\n infodir = @infodir@\n install_sh = @install_sh@\n libdir = @libdir@\n libexecdir = @libexecdir@\n libstdcxx_incdir = @libstdcxx_incdir@\n+localedir = @localedir@\n localstatedir = @localstatedir@\n lt_ECHO = @lt_ECHO@\n mandir = @mandir@\n mkdir_p = @mkdir_p@\n mkinstalldirs = @mkinstalldirs@\n multi_basedir = @multi_basedir@\n oldincludedir = @oldincludedir@\n+pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n+psdir = @psdir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n subdirs = @subdirs@"}, {"sha": "2a3ee0bee4e93718cc21c8161cfdd197045d67ea", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "patch": "@@ -379,6 +379,7 @@ proc libjava_arguments {{mode compile}} {\n     if {$mode == \"link\"} {\n \tglobal wrapper_file wrap_compile_flags\n \tlappend args \"additional_flags=$wrap_compile_flags\"\n+\tlappend args \"additional_flags=-specs=libgcj-test.spec\"\n \tlappend args \"libs=$wrapper_file\"\n \tlappend args \"libs=$libjava\"\n \tlappend args debug"}, {"sha": "623597c36e98302f09b9f7ae1377cbf29676e349", "filename": "libjava/testsuite/libjava.jni/jni.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp?ref=f202305d019c7a5d86bcbc14f9d6fe64c3fbe05b", "patch": "@@ -29,6 +29,10 @@ proc gcj_jni_compile_c_to_so {file {options {}}} {\n   set name [file rootname $filename]\n   set soname lib${name}.${so_extension}\n \n+  if { [istarget \"*arm-*eabi*\"] } {\n+      lappend options \"additional_flags=-fexceptions\"\n+  }\n+\n   lappend options \"additional_flags=${so_flag} -fPIC\"\n   # Find the generated header.\n   lappend options \"additional_flags=-I. -I.. -I$srcdir/$subdir -fdollars-in-identifiers\""}]}