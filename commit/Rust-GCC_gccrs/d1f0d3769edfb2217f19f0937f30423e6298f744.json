{"sha": "d1f0d3769edfb2217f19f0937f30423e6298f744", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFmMGQzNzY5ZWRmYjIyMTdmMTlmMDkzN2YzMDQyM2U2Mjk4Zjc0NA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2015-11-09T16:56:22Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2015-11-09T16:56:22Z"}, "message": "rs6000.opt (-mpower9-fusion): Add new switches for ISA 3.0 (power9).\n\n2015-11-09  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.opt (-mpower9-fusion): Add new switches for\n\tISA 3.0 (power9).\n\t(-mpower9-vector): Likewise.\n\t(-mpower9-dform): Likewise.\n\t(-mpower9-minmax): Likewise.\n\t(-mtoc-fusion): Likewise.\n\t(-mmodulo): Likewise.\n\t(-mfloat128-hardware): Likewise.\n\n\t* config/rs6000/rs6000-cpus.def (ISA_3_0_MASKS_SERVER): Add option\n\tmask for ISA 3.0 (power9).\n\t(POWERPC_MASKS): Add new ISA 3.0 switches.\n\t(power9 cpu): Add power9 cpu.\n\n\t* config/rs6000/rs6000.h (ASM_CPU_POWER9_SPEC): Add support for\n\tpower9.\n\t(ASM_CPU_SPEC): Likewise.\n\t(EXTRA_SPECS): Likewise.\n\n\t* config/rs6000/rs6000-opts.h (enum processor_type): Add\n\tPROCESSOR_POWER9.\n\n\t* config/rs6000/rs6000.c (power9_cost): Initial cost setup for\n\tpower9.\n\t(rs6000_debug_reg_global): Add support for power9 fusion.\n\t(rs6000_setup_reg_addr_masks): Cache mode size.\n\t(rs6000_option_override_internal): Until real power9 tuning is\n\tadded, use -mtune=power8 for -mcpu=power9.\n\t(rs6000_setup_reg_addr_masks): Do not allow pre-increment,\n\tpre-decrement, or pre-modify on SFmode/DFmode if we allow the use\n\tof Altivec registers.\n\t(rs6000_option_override_internal): Add support for ISA 3.0\n\tswitches.\n\t(rs6000_loop_align): Add support for power9 cpu.\n\t(rs6000_file_start): Likewise.\n\t(rs6000_adjust_cost): Likewise.\n\t(rs6000_issue_rate): Likewise.\n\t(insn_must_be_first_in_group): Likewise.\n\t(insn_must_be_last_in_group): Likewise.\n\t(force_new_group): Likewise.\n\t(rs6000_register_move_cost): Likewise.\n\t(rs6000_opt_masks): Likewise.\n\n\t* config/rs6000/rs6000.md (cpu attribute): Add power9.\n\t* config/rs6000/rs6000-tables.opt: Regenerate.\n\n\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Define\n\t_ARCH_PWR9 if power9 support is available.\n\n\t* config/rs6000/aix61.h (ASM_CPU_SPEC): Add power9.\n\t* config/rs6000/aix53.h (ASM_CPU_SPEC): Likewise.\n\n\t* configure.ac: Determine if the assembler supports the ISA 3.0\n\tinstructions.\n\t* config.in (HAVE_AS_POWER9): Likewise.\n\t* configure: Regenerate.\n\n\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document ISA 3.0\n\tswitches.\n\nFrom-SVN: r230031", "tree": {"sha": "67a2fb9cb34958ba57d1f290473f158c57978d91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67a2fb9cb34958ba57d1f290473f158c57978d91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1f0d3769edfb2217f19f0937f30423e6298f744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f0d3769edfb2217f19f0937f30423e6298f744", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1f0d3769edfb2217f19f0937f30423e6298f744", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f0d3769edfb2217f19f0937f30423e6298f744/comments", "author": null, "committer": null, "parents": [{"sha": "ee78df47b1543f412622ae05601f7ee6f6862820", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee78df47b1543f412622ae05601f7ee6f6862820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee78df47b1543f412622ae05601f7ee6f6862820"}], "stats": {"total": 453, "additions": 427, "deletions": 26}, "files": [{"sha": "791180455b432a4f1ac3d9aca242bdf70d1f452e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1f0d3769edfb2217f19f0937f30423e6298f744", "patch": "@@ -1,3 +1,65 @@\n+2015-11-09  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.opt (-mpower9-fusion): Add new switches for\n+\tISA 3.0 (power9).\n+\t(-mpower9-vector): Likewise.\n+\t(-mpower9-dform): Likewise.\n+\t(-mpower9-minmax): Likewise.\n+\t(-mtoc-fusion): Likewise.\n+\t(-mmodulo): Likewise.\n+\t(-mfloat128-hardware): Likewise.\n+\n+\t* config/rs6000/rs6000-cpus.def (ISA_3_0_MASKS_SERVER): Add option\n+\tmask for ISA 3.0 (power9).\n+\t(POWERPC_MASKS): Add new ISA 3.0 switches.\n+\t(power9 cpu): Add power9 cpu.\n+\n+\t* config/rs6000/rs6000.h (ASM_CPU_POWER9_SPEC): Add support for\n+\tpower9.\n+\t(ASM_CPU_SPEC): Likewise.\n+\t(EXTRA_SPECS): Likewise.\n+\n+\t* config/rs6000/rs6000-opts.h (enum processor_type): Add\n+\tPROCESSOR_POWER9.\n+\n+\t* config/rs6000/rs6000.c (power9_cost): Initial cost setup for\n+\tpower9.\n+\t(rs6000_debug_reg_global): Add support for power9 fusion.\n+\t(rs6000_setup_reg_addr_masks): Cache mode size.\n+\t(rs6000_option_override_internal): Until real power9 tuning is\n+\tadded, use -mtune=power8 for -mcpu=power9.\n+\t(rs6000_setup_reg_addr_masks): Do not allow pre-increment,\n+\tpre-decrement, or pre-modify on SFmode/DFmode if we allow the use\n+\tof Altivec registers.\n+\t(rs6000_option_override_internal): Add support for ISA 3.0\n+\tswitches.\n+\t(rs6000_loop_align): Add support for power9 cpu.\n+\t(rs6000_file_start): Likewise.\n+\t(rs6000_adjust_cost): Likewise.\n+\t(rs6000_issue_rate): Likewise.\n+\t(insn_must_be_first_in_group): Likewise.\n+\t(insn_must_be_last_in_group): Likewise.\n+\t(force_new_group): Likewise.\n+\t(rs6000_register_move_cost): Likewise.\n+\t(rs6000_opt_masks): Likewise.\n+\n+\t* config/rs6000/rs6000.md (cpu attribute): Add power9.\n+\t* config/rs6000/rs6000-tables.opt: Regenerate.\n+\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Define\n+\t_ARCH_PWR9 if power9 support is available.\n+\n+\t* config/rs6000/aix61.h (ASM_CPU_SPEC): Add power9.\n+\t* config/rs6000/aix53.h (ASM_CPU_SPEC): Likewise.\n+\n+\t* configure.ac: Determine if the assembler supports the ISA 3.0\n+\tinstructions.\n+\t* config.in (HAVE_AS_POWER9): Likewise.\n+\t* configure: Regenerate.\n+\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document ISA 3.0\n+\tswitches.\n+\n 2015-11-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_simd_valid_immediate):"}, {"sha": "bb0d22053e9b73b1469f7bd32f5bb9cfe1207699", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=d1f0d3769edfb2217f19f0937f30423e6298f744", "patch": "@@ -556,6 +556,12 @@\n #endif\n \n \n+/* Define if your assembler supports POWER9 instructions. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_POWER9\n+#endif\n+\n+\n /* Define if your assembler supports .ref */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_REF"}, {"sha": "d9aa3c20f75d2ed1219dad428eeff5fe1f97b6c1", "filename": "gcc/config/rs6000/aix53.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Faix53.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Faix53.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix53.h?ref=d1f0d3769edfb2217f19f0937f30423e6298f744", "patch": "@@ -63,6 +63,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{mcpu=power6x: -mpwr6} \\\n %{mcpu=power7: -mpwr7} \\\n %{mcpu=power8: -mpwr8} \\\n+%{mcpu=power9: -mpwr9} \\\n %{mcpu=powerpc: -mppc} \\\n %{mcpu=rs64a: -mppc} \\\n %{mcpu=603: -m603} \\"}, {"sha": "46bdcf50035c01a1b2de4ce51571fc7306430616", "filename": "gcc/config/rs6000/aix61.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Faix61.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Faix61.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix61.h?ref=d1f0d3769edfb2217f19f0937f30423e6298f744", "patch": "@@ -80,6 +80,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{mcpu=power6x: -mpwr6} \\\n %{mcpu=power7: -mpwr7} \\\n %{mcpu=power8: -mpwr8} \\\n+%{mcpu=power9: -mpwr9} \\\n %{mcpu=powerpc: -mppc} \\\n %{mcpu=rs64a: -mppc} \\\n %{mcpu=603: -m603} \\"}, {"sha": "a1b4fd4d17e98d8add5d41abd33d57abd0fee291", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=d1f0d3769edfb2217f19f0937f30423e6298f744", "patch": "@@ -349,6 +349,8 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR7\");\n   if ((flags & OPTION_MASK_DIRECT_MOVE) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR8\");\n+  if ((flags & OPTION_MASK_MODULO) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR9\");\n   if ((flags & OPTION_MASK_SOFT_FLOAT) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_SOFT_FLOAT\");\n   if ((flags & OPTION_MASK_RECIP_PRECISION) != 0)"}, {"sha": "fc2b0f11353d3fe22cb93f8f4f89c452f0f563c9", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=d1f0d3769edfb2217f19f0937f30423e6298f744", "patch": "@@ -60,6 +60,15 @@\n   \t\t\t\t | OPTION_MASK_QUAD_MEMORY_ATOMIC\t\\\n \t\t\t\t | OPTION_MASK_UPPER_REGS_SF)\n \n+/* Add ISEL back into ISA 3.0, since it is supposed to be a win.  Do not add\n+   P9_DFORM or P9_MINMAX until they are fully debugged.  */\n+#define ISA_3_0_MASKS_SERVER\t(ISA_2_7_MASKS_SERVER\t\t\t\\\n+\t\t\t\t | OPTION_MASK_FLOAT128_HW\t\t\\\n+\t\t\t\t | OPTION_MASK_ISEL\t\t\t\\\n+\t\t\t\t | OPTION_MASK_MODULO\t\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_FUSION\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_VECTOR)\n+\n #define POWERPC_7400_MASK\t(OPTION_MASK_PPC_GFXOPT | OPTION_MASK_ALTIVEC)\n \n /* Deal with ports that do not have -mstrict-align.  */\n@@ -87,10 +96,15 @@\n \t\t\t\t | OPTION_MASK_ISEL\t\t\t\\\n \t\t\t\t | OPTION_MASK_MFCRF\t\t\t\\\n \t\t\t\t | OPTION_MASK_MFPGPR\t\t\t\\\n+\t\t\t\t | OPTION_MASK_MODULO\t\t\t\\\n \t\t\t\t | OPTION_MASK_MULHW\t\t\t\\\n \t\t\t\t | OPTION_MASK_NO_UPDATE\t\t\\\n \t\t\t\t | OPTION_MASK_P8_FUSION\t\t\\\n \t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_DFORM\t\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_FUSION\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_MINMAX\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_VECTOR\t\t\\\n \t\t\t\t | OPTION_MASK_POPCNTB\t\t\t\\\n \t\t\t\t | OPTION_MASK_POPCNTD\t\t\t\\\n \t\t\t\t | OPTION_MASK_POWERPC64\t\t\\\n@@ -101,6 +115,7 @@\n \t\t\t\t | OPTION_MASK_RECIP_PRECISION\t\t\\\n \t\t\t\t | OPTION_MASK_SOFT_FLOAT\t\t\\\n \t\t\t\t | OPTION_MASK_STRICT_ALIGN_OPTIONAL\t\\\n+\t\t\t\t | OPTION_MASK_TOC_FUSION\t\t\\\n \t\t\t\t | OPTION_MASK_UPPER_REGS_DF\t\t\\\n \t\t\t\t | OPTION_MASK_UPPER_REGS_SF\t\t\\\n \t\t\t\t | OPTION_MASK_VSX\t\t\t\\\n@@ -195,6 +210,7 @@ RS6000_CPU (\"power7\", PROCESSOR_POWER7,   /* Don't add MASK_ISEL by default */\n \t    | MASK_POPCNTB | MASK_FPRND | MASK_CMPB | MASK_DFP | MASK_POPCNTD\n \t    | MASK_VSX | MASK_RECIP_PRECISION | OPTION_MASK_UPPER_REGS_DF)\n RS6000_CPU (\"power8\", PROCESSOR_POWER8, MASK_POWERPC64 | ISA_2_7_MASKS_SERVER)\n+RS6000_CPU (\"power9\", PROCESSOR_POWER9, MASK_POWERPC64 | ISA_3_0_MASKS_SERVER)\n RS6000_CPU (\"powerpc\", PROCESSOR_POWERPC, 0)\n RS6000_CPU (\"powerpc64\", PROCESSOR_POWERPC64, MASK_PPC_GFXOPT | MASK_POWERPC64)\n RS6000_CPU (\"powerpc64le\", PROCESSOR_POWER8, MASK_POWERPC64 | ISA_2_7_MASKS_SERVER)"}, {"sha": "012c0db42fc721217e5e2254d5b9fa5f7e44af81", "filename": "gcc/config/rs6000/rs6000-opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h?ref=d1f0d3769edfb2217f19f0937f30423e6298f744", "patch": "@@ -60,6 +60,7 @@ enum processor_type\n    PROCESSOR_POWER6,\n    PROCESSOR_POWER7,\n    PROCESSOR_POWER8,\n+   PROCESSOR_POWER9,\n \n    PROCESSOR_RS64A,\n    PROCESSOR_MPCCORE,"}, {"sha": "2529ff1ca91d1597e84e0795f30eea5b6b48255e", "filename": "gcc/config/rs6000/rs6000-tables.opt", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt?ref=d1f0d3769edfb2217f19f0937f30423e6298f744", "patch": "@@ -180,14 +180,17 @@ EnumValue\n Enum(rs6000_cpu_opt_value) String(power8) Value(50)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(powerpc) Value(51)\n+Enum(rs6000_cpu_opt_value) String(power9) Value(51)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(powerpc64) Value(52)\n+Enum(rs6000_cpu_opt_value) String(powerpc) Value(52)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(powerpc64le) Value(53)\n+Enum(rs6000_cpu_opt_value) String(powerpc64) Value(53)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(rs64) Value(54)\n+Enum(rs6000_cpu_opt_value) String(powerpc64le) Value(54)\n+\n+EnumValue\n+Enum(rs6000_cpu_opt_value) String(rs64) Value(55)\n "}, {"sha": "2adf79b13150e9fcf36be9a089d09a67f4a022f5", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 197, "deletions": 15, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d1f0d3769edfb2217f19f0937f30423e6298f744", "patch": "@@ -985,6 +985,26 @@ struct processor_costs power8_cost = {\n   COSTS_N_INSNS (3),\t/* SF->DF convert */\n };\n \n+/* Instruction costs on POWER9 processors.  */\n+static const\n+struct processor_costs power9_cost = {\n+  COSTS_N_INSNS (3),\t/* mulsi */\n+  COSTS_N_INSNS (3),\t/* mulsi_const */\n+  COSTS_N_INSNS (3),\t/* mulsi_const9 */\n+  COSTS_N_INSNS (3),\t/* muldi */\n+  COSTS_N_INSNS (19),\t/* divsi */\n+  COSTS_N_INSNS (35),\t/* divdi */\n+  COSTS_N_INSNS (3),\t/* fp */\n+  COSTS_N_INSNS (3),\t/* dmul */\n+  COSTS_N_INSNS (14),\t/* sdiv */\n+  COSTS_N_INSNS (17),\t/* ddiv */\n+  128,\t\t\t/* cache line size */\n+  32,\t\t\t/* l1 cache */\n+  256,\t\t\t/* l2 cache */\n+  12,\t\t\t/* prefetch streams */\n+  COSTS_N_INSNS (3),\t/* SF->DF convert */\n+};\n+\n /* Instruction costs on POWER A2 processors.  */\n static const\n struct processor_costs ppca2_cost = {\n@@ -2423,8 +2443,18 @@ rs6000_debug_reg_global (void)\n     fprintf (stderr, DEBUG_FMT_S, \"lra\", \"true\");\n \n   if (TARGET_P8_FUSION)\n-    fprintf (stderr, DEBUG_FMT_S, \"p8 fusion\",\n-\t     (TARGET_P8_FUSION_SIGN) ? \"zero+sign\" : \"zero\");\n+    {\n+      char options[80];\n+\n+      strcpy (options, (TARGET_P9_FUSION) ? \"power9\" : \"power8\");\n+      if (TARGET_TOC_FUSION)\n+\tstrcat (options, \", toc\");\n+\n+      if (TARGET_P8_FUSION_SIGN)\n+\tstrcat (options, \", sign\");\n+\n+      fprintf (stderr, DEBUG_FMT_S, \"fusion\", options);\n+    }\n \n   fprintf (stderr, DEBUG_FMT_S, \"plt-format\",\n \t   TARGET_SECURE_PLT ? \"secure\" : \"bss\");\n@@ -2463,6 +2493,7 @@ rs6000_setup_reg_addr_masks (void)\n   for (m = 0; m < NUM_MACHINE_MODES; ++m)\n     {\n       machine_mode m2 = (machine_mode)m;\n+      unsigned short msize = GET_MODE_SIZE (m2);\n \n       /* SDmode is special in that we want to access it only via REG+REG\n \t addressing on power7 and above, since we want to use the LFIWZX and\n@@ -2492,16 +2523,18 @@ rs6000_setup_reg_addr_masks (void)\n \t      /* Figure out if we can do PRE_INC, PRE_DEC, or PRE_MODIFY\n \t\t addressing.  Restrict addressing on SPE for 64-bit types\n \t\t because of the SUBREG hackery used to address 64-bit floats in\n-\t\t '32-bit' GPRs.  */\n+\t\t '32-bit' GPRs.  If we allow scalars into Altivec registers,\n+\t\t don't allow PRE_INC, PRE_DEC, or PRE_MODIFY.  */\n \n \t      if (TARGET_UPDATE\n \t\t  && (rc == RELOAD_REG_GPR || rc == RELOAD_REG_FPR)\n-\t\t  && GET_MODE_SIZE (m2) <= 8\n+\t\t  && msize <= 8\n \t\t  && !VECTOR_MODE_P (m2)\n \t\t  && !FLOAT128_VECTOR_P (m2)\n \t\t  && !COMPLEX_MODE_P (m2)\n-\t\t  && !indexed_only_p\n-\t\t  && !(TARGET_E500_DOUBLE && GET_MODE_SIZE (m2) == 8))\n+\t\t  && (m2 != DFmode || !TARGET_UPPER_REGS_DF)\n+\t\t  && (m2 != SFmode || !TARGET_UPPER_REGS_SF)\n+\t\t  && !(TARGET_E500_DOUBLE && msize == 8))\n \t\t{\n \t\t  addr_mask |= RELOAD_REG_PRE_INCDEC;\n \n@@ -2536,7 +2569,7 @@ rs6000_setup_reg_addr_masks (void)\n \n \t  /* VMX registers can do (REG & -16) and ((REG+REG) & -16)\n \t     addressing on 128-bit types.  */\n-\t  if (rc == RELOAD_REG_VMX && GET_MODE_SIZE (m2) == 16\n+\t  if (rc == RELOAD_REG_VMX && msize == 16\n \t      && (addr_mask & RELOAD_REG_VALID) != 0)\n \t    addr_mask |= RELOAD_REG_AND_M16;\n \n@@ -3382,7 +3415,22 @@ rs6000_option_override_internal (bool global_init_p)\n   if (rs6000_tune_index >= 0)\n     tune_index = rs6000_tune_index;\n   else if (have_cpu)\n-    rs6000_tune_index = tune_index = cpu_index;\n+    {\n+      /* Until power9 tuning is available, use power8 tuning if -mcpu=power9.  */\n+      if (processor_target_table[cpu_index].processor != PROCESSOR_POWER9)\n+\trs6000_tune_index = tune_index = cpu_index;\n+      else\n+\t{\n+\t  size_t i;\n+\t  tune_index = -1;\n+\t  for (i = 0; i < ARRAY_SIZE (processor_target_table); i++)\n+\t    if (processor_target_table[i].processor == PROCESSOR_POWER8)\n+\t      {\n+\t\trs6000_tune_index = tune_index = i;\n+\t\tbreak;\n+\t      }\n+\t}\n+    }\n   else\n     {\n       size_t i;\n@@ -3557,7 +3605,9 @@ rs6000_option_override_internal (bool global_init_p)\n \n   /* For the newer switches (vsx, dfp, etc.) set some of the older options,\n      unless the user explicitly used the -mno-<option> to disable the code.  */\n-  if (TARGET_P8_VECTOR || TARGET_DIRECT_MOVE || TARGET_CRYPTO)\n+  if (TARGET_P9_VECTOR || TARGET_MODULO || TARGET_P9_DFORM || TARGET_P9_MINMAX)\n+    rs6000_isa_flags |= (ISA_3_0_MASKS_SERVER & ~rs6000_isa_flags_explicit);\n+  else if (TARGET_P8_VECTOR || TARGET_DIRECT_MOVE || TARGET_CRYPTO)\n     rs6000_isa_flags |= (ISA_2_7_MASKS_SERVER & ~rs6000_isa_flags_explicit);\n   else if (TARGET_VSX)\n     rs6000_isa_flags |= (ISA_2_6_MASKS_SERVER & ~rs6000_isa_flags_explicit);\n@@ -3703,6 +3753,41 @@ rs6000_option_override_internal (bool global_init_p)\n     rs6000_isa_flags |= (processor_target_table[tune_index].target_enable\n \t\t\t & OPTION_MASK_P8_FUSION);\n \n+  /* Setting additional fusion flags turns on base fusion.  */\n+  if (!TARGET_P8_FUSION && (TARGET_P8_FUSION_SIGN || TARGET_TOC_FUSION))\n+    {\n+      if (rs6000_isa_flags_explicit & OPTION_MASK_P8_FUSION)\n+\t{\n+\t  if (TARGET_P8_FUSION_SIGN)\n+\t    error (\"-mpower8-fusion-sign requires -mpower8-fusion\");\n+\n+\t  if (TARGET_TOC_FUSION)\n+\t    error (\"-mtoc-fusion requires -mpower8-fusion\");\n+\n+\t  rs6000_isa_flags &= ~OPTION_MASK_P8_FUSION;\n+\t}\n+      else\n+\trs6000_isa_flags |= OPTION_MASK_P8_FUSION;\n+    }\n+\n+  /* Power9 fusion is a superset over power8 fusion.  */\n+  if (TARGET_P9_FUSION && !TARGET_P8_FUSION)\n+    {\n+      if (rs6000_isa_flags_explicit & OPTION_MASK_P8_FUSION)\n+\t{\n+\t  error (\"-mpower9-fusion requires -mpower8-fusion\");\n+\t  rs6000_isa_flags &= ~OPTION_MASK_P9_FUSION;\n+\t}\n+      else\n+\trs6000_isa_flags |= OPTION_MASK_P8_FUSION;\n+    }\n+\n+  /* Enable power9 fusion if we are tuning for power9, even if we aren't\n+     generating power9 instructions.  */\n+  if (!(rs6000_isa_flags_explicit & OPTION_MASK_P9_FUSION))\n+    rs6000_isa_flags |= (processor_target_table[tune_index].target_enable\n+\t\t\t & OPTION_MASK_P9_FUSION);\n+\n   /* Power8 does not fuse sign extended loads with the addis.  If we are\n      optimizing at high levels for speed, convert a sign extended load into a\n      zero extending load, and an explicit sign extension.  */\n@@ -3712,6 +3797,58 @@ rs6000_option_override_internal (bool global_init_p)\n       && optimize >= 3)\n     rs6000_isa_flags |= OPTION_MASK_P8_FUSION_SIGN;\n \n+  /* TOC fusion requires 64-bit and medium/large code model.  */\n+  if (TARGET_TOC_FUSION && !TARGET_POWERPC64)\n+    {\n+      rs6000_isa_flags &= ~OPTION_MASK_TOC_FUSION;\n+      if ((rs6000_isa_flags_explicit & OPTION_MASK_TOC_FUSION) != 0)\n+\twarning (0, N_(\"-mtoc-fusion requires 64-bit\"));\n+    }\n+\n+  if (TARGET_TOC_FUSION && (TARGET_CMODEL == CMODEL_SMALL))\n+    {\n+      rs6000_isa_flags &= ~OPTION_MASK_TOC_FUSION;\n+      if ((rs6000_isa_flags_explicit & OPTION_MASK_TOC_FUSION) != 0)\n+\twarning (0, N_(\"-mtoc-fusion requires medium/large code model\"));\n+    }\n+\n+  /* Turn on -mtoc-fusion by default if p8-fusion and 64-bit medium/large code\n+     model.  */\n+  if (TARGET_P8_FUSION && !TARGET_TOC_FUSION && TARGET_POWERPC64\n+      && (TARGET_CMODEL != CMODEL_SMALL)\n+      && !(rs6000_isa_flags_explicit & OPTION_MASK_TOC_FUSION))\n+    rs6000_isa_flags |= OPTION_MASK_TOC_FUSION;\n+\n+  /* ISA 3.0 D-form instructions require p9-vector and upper-regs.  */\n+  if (TARGET_P9_DFORM && !TARGET_P9_VECTOR)\n+    {\n+      if (rs6000_isa_flags_explicit & OPTION_MASK_P9_VECTOR)\n+\terror (\"-mpower9-dform requires -mpower9-vector\");\n+      rs6000_isa_flags &= ~OPTION_MASK_P9_DFORM;\n+    }\n+\n+  if (TARGET_P9_DFORM && !TARGET_UPPER_REGS_DF)\n+    {\n+      if (rs6000_isa_flags_explicit & OPTION_MASK_UPPER_REGS_DF)\n+\terror (\"-mpower9-dform requires -mupper-regs-df\");\n+      rs6000_isa_flags &= ~OPTION_MASK_P9_DFORM;\n+    }\n+\n+  if (TARGET_P9_DFORM && !TARGET_UPPER_REGS_SF)\n+    {\n+      if (rs6000_isa_flags_explicit & OPTION_MASK_UPPER_REGS_SF)\n+\terror (\"-mpower9-dform requires -mupper-regs-sf\");\n+      rs6000_isa_flags &= ~OPTION_MASK_P9_DFORM;\n+    }\n+\n+  /* ISA 3.0 vector instructions include ISA 2.07.  */\n+  if (TARGET_P9_VECTOR && !TARGET_P8_VECTOR)\n+    {\n+      if (rs6000_isa_flags_explicit & OPTION_MASK_P8_VECTOR)\n+\terror (\"-mpower9-vector requires -mpower8-vector\");\n+      rs6000_isa_flags &= ~OPTION_MASK_P9_VECTOR;\n+    }\n+\n   /* Set -mallow-movmisalign to explicitly on if we have full ISA 2.07\n      support. If we only have ISA 2.06 support, and the user did not specify\n      the switch, leave it set to -1 so the movmisalign patterns are enabled,\n@@ -3757,9 +3894,32 @@ rs6000_option_override_internal (bool global_init_p)\n       if ((rs6000_isa_flags_explicit & OPTION_MASK_FLOAT128) != 0)\n \terror (\"-mfloat128 requires VSX support\");\n \n-      rs6000_isa_flags &= ~OPTION_MASK_FLOAT128;\n+      rs6000_isa_flags &= ~(OPTION_MASK_FLOAT128 | OPTION_MASK_FLOAT128_HW);\n+    }\n+\n+  /* IEEE 128-bit floating point hardware instructions imply enabling\n+     __float128.  */\n+  if (TARGET_FLOAT128_HW\n+      && (rs6000_isa_flags & (OPTION_MASK_P9_VECTOR\n+\t\t\t      | OPTION_MASK_DIRECT_MOVE\n+\t\t\t      | OPTION_MASK_UPPER_REGS_DF\n+\t\t\t      | OPTION_MASK_UPPER_REGS_SF)) == 0)\n+    {\n+      if ((rs6000_isa_flags_explicit & OPTION_MASK_FLOAT128_HW) != 0)\n+\terror (\"-mfloat128-hardware requires full ISA 3.0 support\");\n+\n+      rs6000_isa_flags &= ~OPTION_MASK_FLOAT128_HW;\n     }\n \n+  else if (TARGET_P9_VECTOR && !TARGET_FLOAT128_HW\n+\t   && (rs6000_isa_flags_explicit & OPTION_MASK_FLOAT128_HW) == 0)\n+    rs6000_isa_flags |= OPTION_MASK_FLOAT128_HW;\n+\n+  if (TARGET_FLOAT128_HW\n+      && (rs6000_isa_flags_explicit & OPTION_MASK_FLOAT128) == 0)\n+    rs6000_isa_flags |= OPTION_MASK_FLOAT128;\n+\n+  /* Print the options after updating the defaults.  */\n   if (TARGET_DEBUG_REG || TARGET_DEBUG_TARGET)\n     rs6000_print_isa_options (stderr, 0, \"after defaults\", rs6000_isa_flags);\n \n@@ -3957,18 +4117,21 @@ rs6000_option_override_internal (bool global_init_p)\n \t\t\t&& rs6000_cpu != PROCESSOR_POWER6\n \t\t\t&& rs6000_cpu != PROCESSOR_POWER7\n \t\t\t&& rs6000_cpu != PROCESSOR_POWER8\n+\t\t\t&& rs6000_cpu != PROCESSOR_POWER9\n \t\t\t&& rs6000_cpu != PROCESSOR_PPCA2\n \t\t\t&& rs6000_cpu != PROCESSOR_CELL\n \t\t\t&& rs6000_cpu != PROCESSOR_PPC476);\n   rs6000_sched_groups = (rs6000_cpu == PROCESSOR_POWER4\n \t\t\t || rs6000_cpu == PROCESSOR_POWER5\n \t\t\t || rs6000_cpu == PROCESSOR_POWER7\n-\t\t\t || rs6000_cpu == PROCESSOR_POWER8);\n+\t\t\t || rs6000_cpu == PROCESSOR_POWER8\n+\t\t\t || rs6000_cpu == PROCESSOR_POWER9);\n   rs6000_align_branch_targets = (rs6000_cpu == PROCESSOR_POWER4\n \t\t\t\t || rs6000_cpu == PROCESSOR_POWER5\n \t\t\t\t || rs6000_cpu == PROCESSOR_POWER6\n \t\t\t\t || rs6000_cpu == PROCESSOR_POWER7\n \t\t\t\t || rs6000_cpu == PROCESSOR_POWER8\n+\t\t\t\t || rs6000_cpu == PROCESSOR_POWER9\n \t\t\t\t || rs6000_cpu == PROCESSOR_PPCE500MC\n \t\t\t\t || rs6000_cpu == PROCESSOR_PPCE500MC64\n \t\t\t\t || rs6000_cpu == PROCESSOR_PPCE5500\n@@ -4216,6 +4379,10 @@ rs6000_option_override_internal (bool global_init_p)\n \trs6000_cost = &power8_cost;\n \tbreak;\n \n+      case PROCESSOR_POWER9:\n+\trs6000_cost = &power9_cost;\n+\tbreak;\n+\n       case PROCESSOR_PPCA2:\n \trs6000_cost = &ppca2_cost;\n \tbreak;\n@@ -4396,7 +4563,8 @@ rs6000_loop_align (rtx label)\n \t  || rs6000_cpu == PROCESSOR_POWER5\n \t  || rs6000_cpu == PROCESSOR_POWER6\n \t  || rs6000_cpu == PROCESSOR_POWER7\n-\t  || rs6000_cpu == PROCESSOR_POWER8))\n+\t  || rs6000_cpu == PROCESSOR_POWER8\n+\t  || rs6000_cpu == PROCESSOR_POWER9))\n     return 5;\n   else\n     return align_loops_log;\n@@ -5213,7 +5381,9 @@ rs6000_file_start (void)\n       || !global_options_set.x_rs6000_cpu_index)\n     {\n       fputs (\"\\t.machine \", asm_out_file);\n-      if ((rs6000_isa_flags & OPTION_MASK_DIRECT_MOVE) != 0)\n+      if ((rs6000_isa_flags & OPTION_MASK_MODULO) != 0)\n+\tfputs (\"power9\\n\", asm_out_file);\n+      else if ((rs6000_isa_flags & OPTION_MASK_DIRECT_MOVE) != 0)\n \tfputs (\"power8\\n\", asm_out_file);\n       else if ((rs6000_isa_flags & OPTION_MASK_POPCNTD) != 0)\n \tfputs (\"power7\\n\", asm_out_file);\n@@ -28013,6 +28183,7 @@ rs6000_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n                  || rs6000_cpu_attr == CPU_POWER5\n \t\t || rs6000_cpu_attr == CPU_POWER7\n \t\t || rs6000_cpu_attr == CPU_POWER8\n+\t\t || rs6000_cpu_attr == CPU_POWER9\n                  || rs6000_cpu_attr == CPU_CELL)\n                 && recog_memoized (dep_insn)\n                 && (INSN_CODE (dep_insn) >= 0))\n@@ -28585,6 +28756,7 @@ rs6000_issue_rate (void)\n   case CPU_POWER7:\n     return 5;\n   case CPU_POWER8:\n+  case CPU_POWER9:\n     return 7;\n   default:\n     return 1;\n@@ -29218,6 +29390,7 @@ insn_must_be_first_in_group (rtx_insn *insn)\n         }\n       break;\n     case PROCESSOR_POWER8:\n+    case PROCESSOR_POWER9:\n       type = get_attr_type (insn);\n \n       switch (type)\n@@ -29348,6 +29521,7 @@ insn_must_be_last_in_group (rtx_insn *insn)\n     }\n     break;\n   case PROCESSOR_POWER8:\n+  case PROCESSOR_POWER9:\n     type = get_attr_type (insn);\n \n     switch (type)\n@@ -29466,7 +29640,7 @@ force_new_group (int sched_verbose, FILE *dump, rtx *group_insns,\n \n       /* Do we have a special group ending nop? */\n       if (rs6000_cpu_attr == CPU_POWER6 || rs6000_cpu_attr == CPU_POWER7\n-\t  || rs6000_cpu_attr == CPU_POWER8)\n+\t  || rs6000_cpu_attr == CPU_POWER8 || rs6000_cpu_attr == CPU_POWER9)\n \t{\n \t  nop = gen_group_ending_nop ();\n \t  emit_insn_before (nop, next_insn);\n@@ -31966,7 +32140,8 @@ rs6000_register_move_cost (machine_mode mode,\n          expensive than memory in order to bias spills to memory .*/\n       else if ((rs6000_cpu == PROCESSOR_POWER6\n \t\t|| rs6000_cpu == PROCESSOR_POWER7\n-\t\t|| rs6000_cpu == PROCESSOR_POWER8)\n+\t\t|| rs6000_cpu == PROCESSOR_POWER8\n+\t\t|| rs6000_cpu == PROCESSOR_POWER9)\n \t       && reg_classes_intersect_p (rclass, LINK_OR_CTR_REGS))\n         ret = 6 * hard_regno_nregs[0][mode];\n \n@@ -33496,26 +33671,33 @@ static struct rs6000_opt_mask const rs6000_opt_masks[] =\n   { \"efficient-unaligned-vsx\",\tOPTION_MASK_EFFICIENT_UNALIGNED_VSX,\n \t\t\t\t\t\t\t\tfalse, true  },\n   { \"float128\",\t\t\tOPTION_MASK_FLOAT128,\t\tfalse, true  },\n+  { \"float128-hardware\",\tOPTION_MASK_FLOAT128_HW,\tfalse, true  },\n   { \"fprnd\",\t\t\tOPTION_MASK_FPRND,\t\tfalse, true  },\n   { \"hard-dfp\",\t\t\tOPTION_MASK_DFP,\t\tfalse, true  },\n   { \"htm\",\t\t\tOPTION_MASK_HTM,\t\tfalse, true  },\n   { \"isel\",\t\t\tOPTION_MASK_ISEL,\t\tfalse, true  },\n   { \"mfcrf\",\t\t\tOPTION_MASK_MFCRF,\t\tfalse, true  },\n   { \"mfpgpr\",\t\t\tOPTION_MASK_MFPGPR,\t\tfalse, true  },\n+  { \"modulo\",\t\t\tOPTION_MASK_MODULO,\t\tfalse, true  },\n   { \"mulhw\",\t\t\tOPTION_MASK_MULHW,\t\tfalse, true  },\n   { \"multiple\",\t\t\tOPTION_MASK_MULTIPLE,\t\tfalse, true  },\n   { \"popcntb\",\t\t\tOPTION_MASK_POPCNTB,\t\tfalse, true  },\n   { \"popcntd\",\t\t\tOPTION_MASK_POPCNTD,\t\tfalse, true  },\n   { \"power8-fusion\",\t\tOPTION_MASK_P8_FUSION,\t\tfalse, true  },\n   { \"power8-fusion-sign\",\tOPTION_MASK_P8_FUSION_SIGN,\tfalse, true  },\n   { \"power8-vector\",\t\tOPTION_MASK_P8_VECTOR,\t\tfalse, true  },\n+  { \"power9-dform\",\t\tOPTION_MASK_P9_DFORM,\t\tfalse, true  },\n+  { \"power9-fusion\",\t\tOPTION_MASK_P9_FUSION,\t\tfalse, true  },\n+  { \"power9-minmax\",\t\tOPTION_MASK_P9_MINMAX,\t\tfalse, true  },\n+  { \"power9-vector\",\t\tOPTION_MASK_P9_VECTOR,\t\tfalse, true  },\n   { \"powerpc-gfxopt\",\t\tOPTION_MASK_PPC_GFXOPT,\t\tfalse, true  },\n   { \"powerpc-gpopt\",\t\tOPTION_MASK_PPC_GPOPT,\t\tfalse, true  },\n   { \"quad-memory\",\t\tOPTION_MASK_QUAD_MEMORY,\tfalse, true  },\n   { \"quad-memory-atomic\",\tOPTION_MASK_QUAD_MEMORY_ATOMIC,\tfalse, true  },\n   { \"recip-precision\",\t\tOPTION_MASK_RECIP_PRECISION,\tfalse, true  },\n   { \"save-toc-indirect\",\tOPTION_MASK_SAVE_TOC_INDIRECT,\tfalse, true  },\n   { \"string\",\t\t\tOPTION_MASK_STRING,\t\tfalse, true  },\n+  { \"toc-fusion\",\t\tOPTION_MASK_TOC_FUSION,\t\tfalse, true  },\n   { \"update\",\t\t\tOPTION_MASK_NO_UPDATE,\t\ttrue , true  },\n   { \"upper-regs-df\",\t\tOPTION_MASK_UPPER_REGS_DF,\tfalse, true  },\n   { \"upper-regs-sf\",\t\tOPTION_MASK_UPPER_REGS_SF,\tfalse, true  },"}, {"sha": "223ba699ce5b56be80a51c55584f42ff63bde75d", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=d1f0d3769edfb2217f19f0937f30423e6298f744", "patch": "@@ -95,6 +95,12 @@\n #define ASM_CPU_POWER8_SPEC ASM_CPU_POWER7_SPEC\n #endif\n \n+#ifdef HAVE_AS_POWER9\n+#define ASM_CPU_POWER9_SPEC \"-mpower9\"\n+#else\n+#define ASM_CPU_POWER9_SPEC ASM_CPU_POWER8_SPEC\n+#endif\n+\n #ifdef HAVE_AS_DCI\n #define ASM_CPU_476_SPEC \"-m476\"\n #else\n@@ -119,6 +125,7 @@\n %{mcpu=power6x: %(asm_cpu_power6) -maltivec} \\\n %{mcpu=power7: %(asm_cpu_power7)} \\\n %{mcpu=power8: %(asm_cpu_power8)} \\\n+%{mcpu=power9: %(asm_cpu_power9)} \\\n %{mcpu=a2: -ma2} \\\n %{mcpu=powerpc: -mppc} \\\n %{mcpu=rs64a: -mppc64} \\\n@@ -193,6 +200,7 @@\n   { \"asm_cpu_power6\",\t\tASM_CPU_POWER6_SPEC },\t\t\t\\\n   { \"asm_cpu_power7\",\t\tASM_CPU_POWER7_SPEC },\t\t\t\\\n   { \"asm_cpu_power8\",\t\tASM_CPU_POWER8_SPEC },\t\t\t\\\n+  { \"asm_cpu_power9\",\t\tASM_CPU_POWER9_SPEC },\t\t\t\\\n   { \"asm_cpu_476\",\t\tASM_CPU_476_SPEC },\t\t\t\\\n   SUBTARGET_EXTRA_SPECS\n "}, {"sha": "79e0271ff3c71a94d538e826cd39c13bd2b6b8e8", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=d1f0d3769edfb2217f19f0937f30423e6298f744", "patch": "@@ -252,7 +252,7 @@\n    ppc750,ppc7400,ppc7450,\n    ppc403,ppc405,ppc440,ppc476,\n    ppc8540,ppc8548,ppce300c2,ppce300c3,ppce500mc,ppce500mc64,ppce5500,ppce6500,\n-   power4,power5,power6,power7,power8,\n+   power4,power5,power6,power7,power8,power9,\n    rs64a,mpccore,cell,ppca2,titan\"\n   (const (symbol_ref \"rs6000_cpu_attr\")))\n "}, {"sha": "61e3c8a323eaf2ffe31cceae4236fffabe68065e", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=d1f0d3769edfb2217f19f0937f30423e6298f744", "patch": "@@ -601,6 +601,34 @@ moptimize-swaps\n Target Undocumented Var(rs6000_optimize_swaps) Init(1) Save\n Analyze and remove doubleword swaps from VSX computations.\n \n+mpower9-fusion\n+Target Report Mask(P9_FUSION) Var(rs6000_isa_flags)\n+Fuse certain operations together for better performance on power9.\n+\n+mpower9-vector\n+Target Report Mask(P9_VECTOR) Var(rs6000_isa_flags)\n+Use/do not use vector and scalar instructions added in ISA 3.0.\n+\n+mpower9-dform\n+Target Undocumented Mask(P9_DFORM) Var(rs6000_isa_flags)\n+Use/do not use vector and scalar instructions added in ISA 3.0.\n+\n+mpower9-minmax\n+Target Undocumented Mask(P9_MINMAX) Var(rs6000_isa_flags)\n+Use/do not use the new min/max instructions defined in ISA 3.0.\n+\n+mtoc-fusion\n+Target Undocumented Mask(TOC_FUSION) Var(rs6000_isa_flags)\n+Fuse medium/large code model toc references with the memory instruction.\n+\n+mmodulo\n+Target Report Mask(MODULO) Var(rs6000_isa_flags)\n+Generate the integer modulo instructions.\n+\n mfloat128\n Target Report Mask(FLOAT128) Var(rs6000_isa_flags)\n Enable/disable IEEE 128-bit floating point via the __float128 keyword.\n+\n+mfloat128-hardware\n+Target Report Mask(FLOAT128_HW) Var(rs6000_isa_flags)\n+Enable/disable using IEEE 128-bit floating point instructions."}, {"sha": "0cd85fb8646baa8c26ed71ad3ddadf4ba8843206", "filename": "gcc/configure", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=d1f0d3769edfb2217f19f0937f30423e6298f744", "patch": "@@ -26330,6 +26330,48 @@ if test $gcc_cv_as_powerpc_power8 = yes; then\n \n $as_echo \"#define HAVE_AS_POWER8 1\" >>confdefs.h\n \n+fi\n+\n+    case $target in\n+      *-*-aix*) conftest_s='\t.machine \"pwr9\"\n+\t.csect .text[PR]';;\n+      *) conftest_s='\t.machine power9\n+\t.text';;\n+    esac\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for power9 support\" >&5\n+$as_echo_n \"checking assembler for power9 support... \" >&6; }\n+if test \"${gcc_cv_as_powerpc_power9+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_powerpc_power9=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 19 \\) \\* 1000 + 2`\n+  then gcc_cv_as_powerpc_power9=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    $as_echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -a32 -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_powerpc_power9=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_powerpc_power9\" >&5\n+$as_echo \"$gcc_cv_as_powerpc_power9\" >&6; }\n+if test $gcc_cv_as_powerpc_power9 = yes; then\n+\n+$as_echo \"#define HAVE_AS_POWER9 1\" >>confdefs.h\n+\n fi\n \n     case $target in"}, {"sha": "ed2e665b40c06565079bd2670207dee6b82d20da", "filename": "gcc/configure.ac", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=d1f0d3769edfb2217f19f0937f30423e6298f744", "patch": "@@ -4315,6 +4315,19 @@ LCF0:\n       [AC_DEFINE(HAVE_AS_POWER8, 1,\n \t  [Define if your assembler supports POWER8 instructions.])])\n \n+    case $target in\n+      *-*-aix*) conftest_s='\t.machine \"pwr9\"\n+\t.csect .text[[PR]]';;\n+      *) conftest_s='\t.machine power9\n+\t.text';;\n+    esac\n+\n+    gcc_GAS_CHECK_FEATURE([power9 support],\n+      gcc_cv_as_powerpc_power9, [2,19,2], -a32,\n+      [$conftest_s],,\n+      [AC_DEFINE(HAVE_AS_POWER9, 1,\n+\t  [Define if your assembler supports POWER9 instructions.])])\n+\n     case $target in\n       *-*-aix*) conftest_s='\t.csect .text[[PR]]\n \tlwsync';;"}, {"sha": "2198db0c13e6c37ecc19de682b219395c16f55fe", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f0d3769edfb2217f19f0937f30423e6298f744/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d1f0d3769edfb2217f19f0937f30423e6298f744", "patch": "@@ -949,8 +949,9 @@ See RS/6000 and PowerPC Options.\n -mquad-memory-atomic -mno-quad-memory-atomic @gol\n -mcompat-align-parm -mno-compat-align-parm @gol\n -mupper-regs-df -mno-upper-regs-df -mupper-regs-sf -mno-upper-regs-sf @gol\n--mupper-regs -mno-upper-regs @gol\n--mfloat128 -mno-float128}\n+-mupper-regs -mno-upper-regs -mmodulo -mno-modulo @gol\n+-mfloat128 -mno-float128 -mfloat128-hardware -mno-float128-hardware @gol\n+-mpower9-fusion -mno-mpower9-fusion -mpower9-vector -mno-power9-vector}\n \n @emph{RX Options}\n @gccoptlist{-m64bit-doubles  -m32bit-doubles  -fpu  -nofpu@gol\n@@ -19311,8 +19312,9 @@ Supported values for @var{cpu_type} are @samp{401}, @samp{403},\n @samp{e300c3}, @samp{e500mc}, @samp{e500mc64}, @samp{e5500},\n @samp{e6500}, @samp{ec603e}, @samp{G3}, @samp{G4}, @samp{G5},\n @samp{titan}, @samp{power3}, @samp{power4}, @samp{power5}, @samp{power5+},\n-@samp{power6}, @samp{power6x}, @samp{power7}, @samp{power8}, @samp{powerpc},\n-@samp{powerpc64}, @samp{powerpc64le}, and @samp{rs64}.\n+@samp{power6}, @samp{power6x}, @samp{power7}, @samp{power8},\n+@samp{power9}, @samp{powerpc}, @samp{powerpc64}, @samp{powerpc64le},\n+and @samp{rs64}.\n \n @option{-mcpu=powerpc}, @option{-mcpu=powerpc64}, and\n @option{-mcpu=powerpc64le} specify pure 32-bit PowerPC (either\n@@ -19332,7 +19334,8 @@ following options:\n -mpowerpc-gpopt  -mpowerpc-gfxopt  -msingle-float -mdouble-float @gol\n -msimple-fpu -mstring  -mmulhw  -mdlmzb  -mmfpgpr -mvsx @gol\n -mcrypto -mdirect-move -mpower8-fusion -mpower8-vector @gol\n--mquad-memory -mquad-memory-atomic}\n+-mquad-memory -mquad-memory-atomic -mmodulo -mfloat128 -mfloat128-hardware @gol\n+-mpower9-fusion -mpower9-vector}\n \n The particular options set for any particular CPU varies between\n compiler versions, depending on what setting seems to produce optimal\n@@ -19569,12 +19572,45 @@ If the @option{-mno-upper-regs} option is used, it turns off both\n @opindex mfloat128\n @opindex mno-float128\n Enable/disable the @var{__float128} keyword for IEEE 128-bit floating point\n-and use software emulation for IEEE 128-bit floating point.\n+and use either software emulation for IEEE 128-bit floating point or\n+hardware instructions.\n \n The VSX instruction set (@option{-mvsx}, @option{-mcpu=power7}, or\n @option{-mcpu=power8}) must be enabled to use the @option{-mfloat128}\n option.\n \n+@item -mfloat128-hardware\n+@itemx -mno-float128-hardware\n+@opindex mfloat128-hardware\n+@opindex mno-float128-hardware\n+Enable/disable using ISA 3.0 hardware instructions to support the\n+@var{__float128} data type.\n+\n+@item -mmodulo\n+@itemx -mno-modulo\n+@opindex mmodulo\n+@opindex mno-module\n+Generate code that uses (does not use) the ISA 3.0 integer modulo\n+instructions.  The @option{-mmodulo} option is enabled by default\n+with the @option{-mcpu=power9} option.\n+\n+@item -mpower9-fusion\n+@itemx -mno-power9-fusion\n+@opindex mpower9-fusion\n+@opindex mno-power9-fusion\n+Generate code that keeps (does not keeps) some operations adjacent so\n+that the instructions can be fused together on power9 and later\n+processors.\n+\n+@item -mpower9-vector\n+@itemx -mno-power9-vector\n+@opindex mpower9-vector\n+@opindex mno-power9-vector\n+Generate code that uses (does not use) the vector and scalar\n+instructions that were added in version 2.07 of the PowerPC ISA.  Also\n+enable the use of built-in functions that allow more direct access to\n+the vector instructions.\n+\n @item -mfloat-gprs=@var{yes/single/double/no}\n @itemx -mfloat-gprs\n @opindex mfloat-gprs"}]}