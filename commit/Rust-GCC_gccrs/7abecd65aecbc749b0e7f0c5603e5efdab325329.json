{"sha": "7abecd65aecbc749b0e7f0c5603e5efdab325329", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FiZWNkNjVhZWNiYzc0OWIwZTdmMGM1NjAzZTVlZmRhYjMyNTMyOQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-06-10T18:45:06Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-06-10T18:45:06Z"}, "message": "re PR java/2299 (Use of += for String arrays produces Segfault during compilation)\n\n2001-03-20  Tom Tromey  <tromey@redhat.com>\n\t    Alexandre Petit-Bianco <apbianco@redhat.com>\n\n\t* parse.y (patch_assignment): Handle the case of a SAVE_EXPR\n\tinside an array reference. Insertion of the array store check\n\trewritten. Fixes PR java/2299.\n\n(http://gcc.gnu.org/ml/gcc-patches/2001-06/msg00611.html )\n\nCo-Authored-By: Alexandre Petit-Bianco <apbianco@redhat.com>\n\nFrom-SVN: r43146", "tree": {"sha": "ce1093577a4b6abfd4fdfb26bd79660d9374a086", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce1093577a4b6abfd4fdfb26bd79660d9374a086"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7abecd65aecbc749b0e7f0c5603e5efdab325329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7abecd65aecbc749b0e7f0c5603e5efdab325329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7abecd65aecbc749b0e7f0c5603e5efdab325329", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7abecd65aecbc749b0e7f0c5603e5efdab325329/comments", "author": null, "committer": null, "parents": [{"sha": "21a6bb3c452ae6e24c3cc5e346ccbb866f5f6d04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a6bb3c452ae6e24c3cc5e346ccbb866f5f6d04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21a6bb3c452ae6e24c3cc5e346ccbb866f5f6d04"}], "stats": {"total": 53, "additions": 39, "deletions": 14}, "files": [{"sha": "f55ad6cf1682d29acc761f8224458e0bcf166ba9", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abecd65aecbc749b0e7f0c5603e5efdab325329/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abecd65aecbc749b0e7f0c5603e5efdab325329/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=7abecd65aecbc749b0e7f0c5603e5efdab325329", "patch": "@@ -474,6 +474,13 @@\n \t(jdep_resolve_class): Reset TYPE_SIZE if `error_mark_node', it's\n \ttoo early to lay innerclasses out.\n \n+2001-03-20  Tom Tromey  <tromey@redhat.com>\n+\t    Alexandre Petit-Bianco <apbianco@redhat.com>\n+\n+\t* parse.y (patch_assignment): Handle the case of a SAVE_EXPR\n+\tinside an array reference. Insertion of the array store check\n+\trewritten. Fixes PR java/2299.\n+\n 2001-03-20  Tom Tromey  <tromey@redhat.com>\n \n \t* lex.c (java_read_unicode): Only accept leading `u's."}, {"sha": "2ea7af0c672523b28d1db8761b9c6addc4b22e1e", "filename": "gcc/java/parse.y", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abecd65aecbc749b0e7f0c5603e5efdab325329/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abecd65aecbc749b0e7f0c5603e5efdab325329/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=7abecd65aecbc749b0e7f0c5603e5efdab325329", "patch": "@@ -12568,12 +12568,15 @@ patch_assignment (node, wfl_op1, wfl_op2)\n \tbase = TREE_OPERAND (lvalue, 0);\n       else\n \t{\n-\t  base = TREE_OPERAND (base, 0);\n-\t  if (flag_bounds_check)\n-\t    base = TREE_OPERAND (base, 1);\n-\t  if (flag_check_references)\n-\t    base = TREE_OPERAND (base, 1);\n-\t  base = TREE_OPERAND (base, 0);\t\n+          tree op = TREE_OPERAND (base, 0);\n+\t  \n+          /* We can have a SAVE_EXPR here when doing String +=.  */\n+          if (TREE_CODE (op) == SAVE_EXPR)\n+            op = TREE_OPERAND (op, 0);\n+          if (flag_bounds_check)\n+            base = TREE_OPERAND (TREE_OPERAND (op, 1), 0);\n+          else\n+            base = TREE_OPERAND (op, 0);\n \t}\n \n       /* Build the invocation of _Jv_CheckArrayStore */\n@@ -12599,16 +12602,31 @@ patch_assignment (node, wfl_op1, wfl_op2)\n \t    TREE_OPERAND (lvalue, 1) = build (COMPOUND_EXPR, lhs_type,\n \t\t\t\t\t      check, TREE_OPERAND (lvalue, 1));\n \t}\n-      else \n+      else if (flag_bounds_check)\n \t{\n+          tree hook = lvalue;\n+          tree compound = TREE_OPERAND (lvalue, 0);\n+          tree bound_check, new_compound;\n+\n+          if (TREE_CODE (compound) == SAVE_EXPR)\n+            {\n+              compound = TREE_OPERAND (compound, 0);\n+              hook = TREE_OPERAND (hook, 0);\n+            }\n+\n+          /* Find the array bound check, hook the original array access. */\n+          bound_check = TREE_OPERAND (compound, 0);\n+          TREE_OPERAND (hook, 0) = TREE_OPERAND (compound, 1);\n+\n \t  /* Make sure the bound check will happen before the store check */\n-\t  if (flag_bounds_check)\n-\t    TREE_OPERAND (TREE_OPERAND (lvalue, 0), 0) =\n-\t      build (COMPOUND_EXPR, void_type_node,\n-\t\t     TREE_OPERAND (TREE_OPERAND (lvalue, 0), 0), check);\n-\t  else\n-\t    lvalue = build (COMPOUND_EXPR, lhs_type, check, lvalue);\n-\t}\n+          new_compound =\n+            build (COMPOUND_EXPR, void_type_node, bound_check, check);\n+\n+          /* Re-assemble the augmented array access. */\n+          lvalue = build (COMPOUND_EXPR, lhs_type, new_compound, lvalue);\n+        }\n+      else\n+        lvalue = build (COMPOUND_EXPR, lhs_type, check, lvalue);\n     }\n \n   /* Final locals can be used as case values in switch"}]}