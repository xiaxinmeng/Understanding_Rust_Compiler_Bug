{"sha": "2960be837a8b9b479615f41802e235b84ac294e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk2MGJlODM3YThiOWI0Nzk2MTVmNDE4MDJlMjM1Yjg0YWMyOTRlNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-09-20T13:24:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-09-20T13:24:23Z"}, "message": "re PR rtl-optimization/45695 (-O1 wrong-code by cmove)\n\n\tPR rtl-optimization/45695\n\t* combine.c (try_combine): When splitting a two set pattern,\n\tmake sure the pattern which will be put into i2 doesn't use REGs\n\tor MEMs set by insns in between i2 and i3.\n\n\t* gcc.c-torture/execute/pr45695.c: New test.\n\nFrom-SVN: r164431", "tree": {"sha": "7aedca29d29b239ad944ac6078ec7f0e0235c62a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aedca29d29b239ad944ac6078ec7f0e0235c62a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2960be837a8b9b479615f41802e235b84ac294e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2960be837a8b9b479615f41802e235b84ac294e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2960be837a8b9b479615f41802e235b84ac294e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2960be837a8b9b479615f41802e235b84ac294e7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ee472e528bdbbbafc3a16b6573220f8aa265eba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ee472e528bdbbbafc3a16b6573220f8aa265eba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ee472e528bdbbbafc3a16b6573220f8aa265eba"}], "stats": {"total": 120, "additions": 68, "deletions": 52}, "files": [{"sha": "9b35e7462866e40c6eac43423ff1835fe8aea77f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2960be837a8b9b479615f41802e235b84ac294e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2960be837a8b9b479615f41802e235b84ac294e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2960be837a8b9b479615f41802e235b84ac294e7", "patch": "@@ -1,3 +1,10 @@\n+2010-09-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/45695\n+\t* combine.c (try_combine): When splitting a two set pattern,\n+\tmake sure the pattern which will be put into i2 doesn't use REGs\n+\tor MEMs set by insns in between i2 and i3.\n+\n 2010-09-19  Jan Hubicka  <jh@suse.cz>\n \n \tPR lto/44246"}, {"sha": "6131b413d1d9bc4f46191e38349ed6297c0326aa", "filename": "gcc/combine.c", "status": "modified", "additions": 24, "deletions": 52, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2960be837a8b9b479615f41802e235b84ac294e7/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2960be837a8b9b479615f41802e235b84ac294e7/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=2960be837a8b9b479615f41802e235b84ac294e7", "patch": "@@ -3690,36 +3690,41 @@ try_combine (rtx i3, rtx i2, rtx i1, rtx i0, int *new_direct_jump_p)\n \t   && GET_CODE (XVECEXP (newpat, 0, 1)) == SET\n \t   && GET_CODE (SET_DEST (XVECEXP (newpat, 0, 1))) != ZERO_EXTRACT\n \t   && GET_CODE (SET_DEST (XVECEXP (newpat, 0, 1))) != STRICT_LOW_PART\n-\t   && ! use_crosses_set_p (SET_SRC (XVECEXP (newpat, 0, 1)),\n-\t\t\t\t   DF_INSN_LUID (i2))\n \t   && ! reg_referenced_p (SET_DEST (XVECEXP (newpat, 0, 1)),\n \t\t\t\t  XVECEXP (newpat, 0, 0))\n \t   && ! reg_referenced_p (SET_DEST (XVECEXP (newpat, 0, 0)),\n \t\t\t\t  XVECEXP (newpat, 0, 1))\n \t   && ! (contains_muldiv (SET_SRC (XVECEXP (newpat, 0, 0)))\n-\t\t && contains_muldiv (SET_SRC (XVECEXP (newpat, 0, 1))))\n-#ifdef HAVE_cc0\n-\t   /* We cannot split the parallel into two sets if both sets\n-\t      reference cc0.  */\n-\t   && ! (reg_referenced_p (cc0_rtx, XVECEXP (newpat, 0, 0))\n-\t\t && reg_referenced_p (cc0_rtx, XVECEXP (newpat, 0, 1)))\n-#endif\n-\t   )\n+\t\t && contains_muldiv (SET_SRC (XVECEXP (newpat, 0, 1)))))\n     {\n       /* Normally, it doesn't matter which of the two is done first,\n-\t but it does if one references cc0.  In that case, it has to\n+\t but the one that references cc0 can't be the second, and\n+\t one which uses any regs/memory set in between i2 and i3 can't\n \t be first.  */\n+      if (!use_crosses_set_p (SET_SRC (XVECEXP (newpat, 0, 1)),\n+\t\t\t      DF_INSN_LUID (i2))\n+#ifdef HAVE_cc0\n+\t  && !reg_referenced_p (cc0_rtx, XVECEXP (newpat, 0, 0))\n+#endif\n+\t )\n+\t{\n+\t  newi2pat = XVECEXP (newpat, 0, 1);\n+\t  newpat = XVECEXP (newpat, 0, 0);\n+\t}\n+      else if (!use_crosses_set_p (SET_SRC (XVECEXP (newpat, 0, 0)),\n+\t\t\t\t   DF_INSN_LUID (i2))\n #ifdef HAVE_cc0\n-      if (reg_referenced_p (cc0_rtx, XVECEXP (newpat, 0, 0)))\n+\t       && !reg_referenced_p (cc0_rtx, XVECEXP (newpat, 0, 1))\n+#endif\n+\t      )\n \t{\n \t  newi2pat = XVECEXP (newpat, 0, 0);\n \t  newpat = XVECEXP (newpat, 0, 1);\n \t}\n       else\n-#endif\n \t{\n-\t  newi2pat = XVECEXP (newpat, 0, 1);\n-\t  newpat = XVECEXP (newpat, 0, 0);\n+\t  undo_all ();\n+\t  return 0;\n \t}\n \n       i2_code_number = recog_for_combine (&newi2pat, i2, &new_i2_notes);\n@@ -3735,44 +3740,11 @@ try_combine (rtx i3, rtx i2, rtx i1, rtx i0, int *new_direct_jump_p)\n \t\t  {\n \t\t    rtx reg = XEXP (XVECEXP (newi2pat, 0, i), 0);\n \t\t    if (reg_overlap_mentioned_p (reg, newpat))\n-\t\t      break;\n+\t\t      {\n+\t\t\tundo_all ();\n+\t\t\treturn 0;\n+\t\t      }\n \t\t  }\n-\n-\t      if (i >= 0)\n-\t\t{\n-\t\t  /* CLOBBERs on newi2pat prevent it going first.\n-\t\t     Try the other order of the insns if possible.  */\n-\t\t  temp = newpat;\n-\t\t  newpat = XVECEXP (newi2pat, 0, 0);\n-\t\t  newi2pat = temp;\n-#ifdef HAVE_cc0\n-\t\t  if (reg_referenced_p (cc0_rtx, newpat))\n-\t\t    {\n-\t\t      undo_all ();\n-\t\t      return 0;\n-\t\t    }\n-#endif\n-\n-\t\t  i2_code_number = recog_for_combine (&newi2pat, i2,\n-\t\t\t\t\t\t      &new_i2_notes);\n-\t\t  if (i2_code_number < 0)\n-\t\t    {\n-\t\t      undo_all ();\n-\t\t      return 0;\n-\t\t    }\n-\n-\t\t  if (GET_CODE (newi2pat) == PARALLEL)\n-\t\t    for (i = XVECLEN (newi2pat, 0) - 1; i >= 0; i--)\n-\t\t      if (GET_CODE (XVECEXP (newi2pat, 0, i)) == CLOBBER)\n-\t\t\t{\n-\t\t\t  rtx reg = XEXP (XVECEXP (newi2pat, 0, i), 0);\n-\t\t\t  if (reg_overlap_mentioned_p (reg, newpat))\n-\t\t\t    {\n-\t\t\t      undo_all ();\n-\t\t\t      return 0;\n-\t\t\t    }\n-\t\t\t}\n-\t\t}\n \t    }\n \n \t  insn_code_number = recog_for_combine (&newpat, i3, &new_i3_notes);"}, {"sha": "4c8c62c9f21946f2776596a154ebecedebb0b4a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2960be837a8b9b479615f41802e235b84ac294e7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2960be837a8b9b479615f41802e235b84ac294e7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2960be837a8b9b479615f41802e235b84ac294e7", "patch": "@@ -1,3 +1,8 @@\n+2010-09-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/45695\n+\t* gcc.c-torture/execute/pr45695.c: New test.\n+\n 2010-09-19  Jan Hubicka  <jh@suse.cz>\n \n \tPR lto/44246"}, {"sha": "eb1e4c788ab35d7321f517403b967bd7d188f096", "filename": "gcc/testsuite/gcc.c-torture/execute/pr45695.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2960be837a8b9b479615f41802e235b84ac294e7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr45695.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2960be837a8b9b479615f41802e235b84ac294e7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr45695.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr45695.c?ref=2960be837a8b9b479615f41802e235b84ac294e7", "patch": "@@ -0,0 +1,32 @@\n+/* PR rtl-optimization/45695 */\n+\n+extern void abort (void);\n+\n+__attribute__((noinline)) void\n+g (int x)\n+{\n+  asm volatile (\"\" : \"+r\" (x));\n+}\n+\n+__attribute__((noinline)) int\n+f (int a, int b, int d)\n+{\n+  int r = -1;\n+  b += d;\n+  if (d == a)\n+    r = b - d;\n+  g (b);\n+  return r;\n+}\n+\n+int\n+main (void)\n+{\n+  int l;\n+  asm (\"\" : \"=r\" (l) : \"0\" (0));\n+  if (f (l + 0, l + 1, l + 4) != -1)\n+    abort ();\n+  if (f (l + 4, l + 1, l + 4) != 1)\n+    abort ();\n+  return 0;\n+}"}]}