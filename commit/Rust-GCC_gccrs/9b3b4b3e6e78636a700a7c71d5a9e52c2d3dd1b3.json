{"sha": "9b3b4b3e6e78636a700a7c71d5a9e52c2d3dd1b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIzYjRiM2U2ZTc4NjM2YTcwMGE3YzcxZDVhOWU1MmMyZDNkZDFiMw==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-06-24T04:16:49Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-06-24T04:16:49Z"}, "message": "entered into RCS\n\nFrom-SVN: r1269", "tree": {"sha": "4544f6d11bc7090ae2e6d0fc4a4159726384e25b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4544f6d11bc7090ae2e6d0fc4a4159726384e25b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b3b4b3e6e78636a700a7c71d5a9e52c2d3dd1b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b3b4b3e6e78636a700a7c71d5a9e52c2d3dd1b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b3b4b3e6e78636a700a7c71d5a9e52c2d3dd1b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b3b4b3e6e78636a700a7c71d5a9e52c2d3dd1b3/comments", "author": null, "committer": null, "parents": [{"sha": "9b8fbdeca1c7c0f384a31ad42296a6a4861afdf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8fbdeca1c7c0f384a31ad42296a6a4861afdf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b8fbdeca1c7c0f384a31ad42296a6a4861afdf3"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "6bfbce9c2f19fbe62785ece0fb3da413e17dd9c5", "filename": "gcc/config/m88k/xm-sysv3.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3b4b3e6e78636a700a7c71d5a9e52c2d3dd1b3/gcc%2Fconfig%2Fm88k%2Fxm-sysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3b4b3e6e78636a700a7c71d5a9e52c2d3dd1b3/gcc%2Fconfig%2Fm88k%2Fxm-sysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fxm-sysv3.h?ref=9b3b4b3e6e78636a700a7c71d5a9e52c2d3dd1b3", "patch": "@@ -0,0 +1,29 @@\n+/* Configuration for GNU C-compiler.\n+   Motorola m88100 running the AT&T/Unisoft/Motorola V.3 reference port.\n+   Copyright (C) 1990 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"xm-m88k.h\"\n+\n+#define R_OK 4\n+#define W_OK 2\n+#define X_OK 1\n+#define F_OK 0\n+\n+/* for the emacs version of alloca */\n+#define STACK_DIRECTION -1"}, {"sha": "4a58c7dea3196674308494fff0323047055840db", "filename": "gcc/config/tahoe/tahoe.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3b4b3e6e78636a700a7c71d5a9e52c2d3dd1b3/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3b4b3e6e78636a700a7c71d5a9e52c2d3dd1b3/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Ftahoe.h?ref=9b3b4b3e6e78636a700a7c71d5a9e52c2d3dd1b3", "patch": "@@ -256,11 +256,11 @@ enum reg_class {NO_REGS,GENERAL_REGS,FPP_REG,ALL_REGS,LIM_REG_CLASSES};\n \n #define REGNO_REG_CLASS(REGNO) (REGNO == 16 ? FPP_REG : GENERAL_REGS)\n \n-/* only gereral registers can be used as a base reg */\n+/* only general registers can be used as a base reg */\n \n #define BASE_REG_CLASS GENERAL_REGS\n \n-/* only gereral registers can be used to index */\n+/* only general registers can be used to index */\n \n #define INDEX_REG_CLASS GENERAL_REGS\n \n@@ -513,7 +513,7 @@ enum reg_class {NO_REGS,GENERAL_REGS,FPP_REG,ALL_REGS,LIM_REG_CLASSES};\n \t      INDEX_TERM_P (xfooa, MODE)))\t\t\t\t\\\n \tgoto ADDR; } }\n \n-/* Is the rtx X a valid memoy address for operand of mode MODE? */\n+/* Is the rtx X a valid memory address for operand of mode MODE? */\n /* If it is, go to ADDR */\n \n #define GO_IF_LEGITIMATE_ADDRESS(MODE, X, ADDR)  \\"}]}