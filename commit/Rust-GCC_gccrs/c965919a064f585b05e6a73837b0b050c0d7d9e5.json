{"sha": "c965919a064f585b05e6a73837b0b050c0d7d9e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk2NTkxOWEwNjRmNTg1YjA1ZTZhNzM4MzdiMGIwNTBjMGQ3ZDllNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-12-06T21:42:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-12-06T21:42:02Z"}, "message": "PR c++/82115 - ICE with variable initialized with its own address.\n\n\t* pt.c (value_dependent_expression_p): Add lval parameter.  Don't\n\tconsider DECL_INITIAL if it's true.\n\nFrom-SVN: r255454", "tree": {"sha": "f1c88f260bc201fb11496ac44eb9ea812b082a79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1c88f260bc201fb11496ac44eb9ea812b082a79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c965919a064f585b05e6a73837b0b050c0d7d9e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c965919a064f585b05e6a73837b0b050c0d7d9e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c965919a064f585b05e6a73837b0b050c0d7d9e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c965919a064f585b05e6a73837b0b050c0d7d9e5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c79144f8353af3292903c9c8e508f1de986eb6b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79144f8353af3292903c9c8e508f1de986eb6b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c79144f8353af3292903c9c8e508f1de986eb6b0"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "1620b0762a58fcb03a05d48b093442945ca477c3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c965919a064f585b05e6a73837b0b050c0d7d9e5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c965919a064f585b05e6a73837b0b050c0d7d9e5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c965919a064f585b05e6a73837b0b050c0d7d9e5", "patch": "@@ -1,3 +1,9 @@\n+2017-12-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/82115 - ICE with variable initialized with its own address.\n+\t* pt.c (value_dependent_expression_p): Add lval parameter.  Don't\n+\tconsider DECL_INITIAL if it's true.\n+\n 2017-12-06  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/83236"}, {"sha": "575255d64e70c7a5f002369b2aad02749d05b020", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c965919a064f585b05e6a73837b0b050c0d7d9e5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c965919a064f585b05e6a73837b0b050c0d7d9e5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c965919a064f585b05e6a73837b0b050c0d7d9e5", "patch": "@@ -6542,7 +6542,7 @@ extern bool type_dependent_object_expression_p\t(tree);\n extern bool any_type_dependent_arguments_p      (const vec<tree, va_gc> *);\n extern bool any_type_dependent_elements_p       (const_tree);\n extern bool type_dependent_expression_p_push\t(tree);\n-extern bool value_dependent_expression_p\t(tree);\n+extern bool value_dependent_expression_p\t(tree, bool = false);\n extern bool instantiation_dependent_expression_p (tree);\n extern bool instantiation_dependent_uneval_expression_p (tree);\n extern bool any_value_dependent_elements_p      (const_tree);"}, {"sha": "252712e80f240bbd37e72668f68aa7383e9b4648", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c965919a064f585b05e6a73837b0b050c0d7d9e5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c965919a064f585b05e6a73837b0b050c0d7d9e5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c965919a064f585b05e6a73837b0b050c0d7d9e5", "patch": "@@ -23916,7 +23916,7 @@ instantiation_dependent_scope_ref_p (tree t)\n    can be tested for value dependence.  */\n \n bool\n-value_dependent_expression_p (tree expression)\n+value_dependent_expression_p (tree expression, bool lval /* = false */)\n {\n   if (!processing_template_decl || expression == NULL_TREE)\n     return false;\n@@ -23950,6 +23950,7 @@ value_dependent_expression_p (tree expression)\n       /* A non-type template parm.  */\n       if (DECL_TEMPLATE_PARM_P (expression))\n \treturn true;\n+      gcc_checking_assert (!lval);\n       return value_dependent_expression_p (DECL_INITIAL (expression));\n \n     case VAR_DECL:\n@@ -23959,7 +23960,8 @@ value_dependent_expression_p (tree expression)\n           Note that a non-dependent parenthesized initializer will have\n           already been replaced with its constant value, so if we see\n           a TREE_LIST it must be dependent.  */\n-      if (DECL_INITIAL (expression)\n+      if (!lval\n+\t  && DECL_INITIAL (expression)\n \t  && decl_constant_var_p (expression)\n \t  && (TREE_CODE (DECL_INITIAL (expression)) == TREE_LIST\n \t      /* cp_finish_decl doesn't fold reference initializers.  */\n@@ -23969,7 +23971,7 @@ value_dependent_expression_p (tree expression)\n       if (DECL_HAS_VALUE_EXPR_P (expression))\n \t{\n \t  tree value_expr = DECL_VALUE_EXPR (expression);\n-\t  if (value_dependent_expression_p (value_expr))\n+\t  if (value_dependent_expression_p (value_expr, lval))\n \t    return true;\n \t}\n       return false;\n@@ -24005,7 +24007,7 @@ value_dependent_expression_p (tree expression)\n \tif (TREE_CODE (expression) == TREE_LIST)\n \t  return any_value_dependent_elements_p (expression);\n \n-\treturn value_dependent_expression_p (expression);\n+\treturn value_dependent_expression_p (expression, lval);\n       }\n \n     case SIZEOF_EXPR:\n@@ -24039,7 +24041,7 @@ value_dependent_expression_p (tree expression)\n       return instantiation_dependent_scope_ref_p (expression);\n \n     case COMPONENT_REF:\n-      return (value_dependent_expression_p (TREE_OPERAND (expression, 0))\n+      return (value_dependent_expression_p (TREE_OPERAND (expression, 0), lval)\n \t      || value_dependent_expression_p (TREE_OPERAND (expression, 1)));\n \n     case NONTYPE_ARGUMENT_PACK:\n@@ -24087,7 +24089,7 @@ value_dependent_expression_p (tree expression)\n     case ADDR_EXPR:\n       {\n \ttree op = TREE_OPERAND (expression, 0);\n-\treturn (value_dependent_expression_p (op)\n+\treturn (value_dependent_expression_p (op, true)\n \t\t|| has_value_dependent_address (op));\n       }\n "}, {"sha": "96f1d18146a94a11d60bfe9e18af18e242f6ce23", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-self1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c965919a064f585b05e6a73837b0b050c0d7d9e5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-self1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c965919a064f585b05e6a73837b0b050c0d7d9e5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-self1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-self1.C?ref=c965919a064f585b05e6a73837b0b050c0d7d9e5", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/82115\n+// { dg-do compile { target c++11 } }\n+\n+struct A { int const u = 0; };\n+\n+struct B : A\n+{ \n+  constexpr B (int const *p) : v (p) {}\n+  int const *v;\n+};\n+\n+constexpr B b (&b.u);\n+\n+template < typename > void foo () { b; }"}]}