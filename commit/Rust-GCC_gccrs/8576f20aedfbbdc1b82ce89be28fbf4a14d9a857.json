{"sha": "8576f20aedfbbdc1b82ce89be28fbf4a14d9a857", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU3NmYyMGFlZGZiYmRjMWI4MmNlODliZTI4ZmJmNGExNGQ5YTg1Nw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-28T09:11:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-28T09:11:17Z"}, "message": "tree-ssa-structalias.c (dump_constraint): Don't end the line.\n\n2011-04-28  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-structalias.c (dump_constraint): Don't end the line.\n\t(debug_constraint): Do it here.\n\t(dump_constraints): And here.\n\t(rewrite_constraints): And here.\n\t(dump_constraint_edge): Remove.\n\t(dump_constraint_graph): Rewrite to produce DOT output.\n\t(solve_constraints): Build succ graph as late as possible.\n\tDump constraint graphs before and after solving.\n\nFrom-SVN: r173061", "tree": {"sha": "da058d64b7263d6afd01fd6844417abe68c8201a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da058d64b7263d6afd01fd6844417abe68c8201a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8576f20aedfbbdc1b82ce89be28fbf4a14d9a857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8576f20aedfbbdc1b82ce89be28fbf4a14d9a857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8576f20aedfbbdc1b82ce89be28fbf4a14d9a857", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8576f20aedfbbdc1b82ce89be28fbf4a14d9a857/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e38811ce28249cd1074c7f96ad1c5c14eb6e9c01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e38811ce28249cd1074c7f96ad1c5c14eb6e9c01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e38811ce28249cd1074c7f96ad1c5c14eb6e9c01"}], "stats": {"total": 158, "additions": 90, "deletions": 68}, "files": [{"sha": "e8ff75e8be189c004292ab401e50892796d56120", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8576f20aedfbbdc1b82ce89be28fbf4a14d9a857/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8576f20aedfbbdc1b82ce89be28fbf4a14d9a857/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8576f20aedfbbdc1b82ce89be28fbf4a14d9a857", "patch": "@@ -1,3 +1,14 @@\n+2011-04-28  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-structalias.c (dump_constraint): Don't end the line.\n+\t(debug_constraint): Do it here.\n+\t(dump_constraints): And here.\n+\t(rewrite_constraints): And here.\n+\t(dump_constraint_edge): Remove.\n+\t(dump_constraint_graph): Rewrite to produce DOT output.\n+\t(solve_constraints): Build succ graph as late as possible.\n+\tDump constraint graphs before and after solving.\n+\n 2011-04-28  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call):"}, {"sha": "0d6e098028b29335c0436093f29b7891a34c1587", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 79, "deletions": 68, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8576f20aedfbbdc1b82ce89be28fbf4a14d9a857/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8576f20aedfbbdc1b82ce89be28fbf4a14d9a857/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=8576f20aedfbbdc1b82ce89be28fbf4a14d9a857", "patch": "@@ -650,7 +650,6 @@ dump_constraint (FILE *file, constraint_t c)\n     fprintf (file, \" + UNKNOWN\");\n   else if (c->rhs.offset != 0)\n     fprintf (file, \" + \" HOST_WIDE_INT_PRINT_DEC, c->rhs.offset);\n-  fprintf (file, \"\\n\");\n }\n \n \n@@ -666,6 +665,7 @@ DEBUG_FUNCTION void\n debug_constraint (constraint_t c)\n {\n   dump_constraint (stderr, c);\n+  fprintf (stderr, \"\\n\");\n }\n \n /* Print out all constraints to FILE */\n@@ -676,7 +676,11 @@ dump_constraints (FILE *file, int from)\n   int i;\n   constraint_t c;\n   for (i = from; VEC_iterate (constraint_t, constraints, i, c); i++)\n-    dump_constraint (file, c);\n+    if (c)\n+      {\n+\tdump_constraint (file, c);\n+\tfprintf (file, \"\\n\");\n+      }\n }\n \n /* Print out all constraints to stderr.  */\n@@ -687,86 +691,77 @@ debug_constraints (void)\n   dump_constraints (stderr, 0);\n }\n \n-/* Print out to FILE the edge in the constraint graph that is created by\n-   constraint c. The edge may have a label, depending on the type of\n-   constraint that it represents. If complex1, e.g: a = *b, then the label\n-   is \"=*\", if complex2, e.g: *a = b, then the label is \"*=\", if\n-   complex with an offset, e.g: a = b + 8, then the label is \"+\".\n-   Otherwise the edge has no label.  */\n-\n-static void\n-dump_constraint_edge (FILE *file, constraint_t c)\n-{\n-  if (c->rhs.type != ADDRESSOF)\n-    {\n-      const char *src = get_varinfo (c->rhs.var)->name;\n-      const char *dst = get_varinfo (c->lhs.var)->name;\n-      fprintf (file, \"  \\\"%s\\\" -> \\\"%s\\\" \", src, dst);\n-      /* Due to preprocessing of constraints, instructions like *a = *b are\n-         illegal; thus, we do not have to handle such cases.  */\n-      if (c->lhs.type == DEREF)\n-        fprintf (file, \" [ label=\\\"*=\\\" ] ;\\n\");\n-      else if (c->rhs.type == DEREF)\n-        fprintf (file, \" [ label=\\\"=*\\\" ] ;\\n\");\n-      else\n-        {\n-          /* We must check the case where the constraint is an offset.\n-             In this case, it is treated as a complex constraint.  */\n-          if (c->rhs.offset != c->lhs.offset)\n-            fprintf (file, \" [ label=\\\"+\\\" ] ;\\n\");\n-          else\n-            fprintf (file, \" ;\\n\");\n-        }\n-    }\n-}\n-\n /* Print the constraint graph in dot format.  */\n \n static void\n dump_constraint_graph (FILE *file)\n {\n-  unsigned int i=0, size;\n-  constraint_t c;\n+  unsigned int i;\n \n   /* Only print the graph if it has already been initialized:  */\n   if (!graph)\n     return;\n \n-  /* Print the constraints used to produce the constraint graph. The\n-     constraints will be printed as comments in the dot file:  */\n-  fprintf (file, \"\\n\\n/* Constraints used in the constraint graph:\\n\");\n-  dump_constraints (file, 0);\n-  fprintf (file, \"*/\\n\");\n-\n   /* Prints the header of the dot file:  */\n-  fprintf (file, \"\\n\\n// The constraint graph in dot format:\\n\");\n   fprintf (file, \"strict digraph {\\n\");\n   fprintf (file, \"  node [\\n    shape = box\\n  ]\\n\");\n   fprintf (file, \"  edge [\\n    fontsize = \\\"12\\\"\\n  ]\\n\");\n-  fprintf (file, \"\\n  // List of nodes in the constraint graph:\\n\");\n-\n-  /* The next lines print the nodes in the graph. In order to get the\n-     number of nodes in the graph, we must choose the minimum between the\n-     vector VEC (varinfo_t, varmap) and graph->size. If the graph has not\n-     yet been initialized, then graph->size == 0, otherwise we must only\n-     read nodes that have an entry in VEC (varinfo_t, varmap).  */\n-  size = VEC_length (varinfo_t, varmap);\n-  size = size < graph->size ? size : graph->size;\n-  for (i = 0; i < size; i++)\n+  fprintf (file, \"\\n  // List of nodes and complex constraints in \"\n+\t   \"the constraint graph:\\n\");\n+\n+  /* The next lines print the nodes in the graph together with the\n+     complex constraints attached to them.  */\n+  for (i = 0; i < graph->size; i++)\n     {\n-      const char *name = get_varinfo (graph->rep[i])->name;\n-      fprintf (file, \"  \\\"%s\\\" ;\\n\", name);\n+      if (find (i) != i)\n+\tcontinue;\n+      if (i < FIRST_REF_NODE)\n+\tfprintf (file, \"\\\"%s\\\"\", get_varinfo (i)->name);\n+      else\n+\tfprintf (file, \"\\\"*%s\\\"\", get_varinfo (i - FIRST_REF_NODE)->name);\n+      if (graph->complex[i])\n+\t{\n+\t  unsigned j;\n+\t  constraint_t c;\n+\t  fprintf (file, \" [label=\\\"\\\\N\\\\n\");\n+\t  for (j = 0; VEC_iterate (constraint_t, graph->complex[i], j, c); ++j)\n+\t    {\n+\t      dump_constraint (file, c);\n+\t      fprintf (file, \"\\\\l\");\n+\t    }\n+\t  fprintf (file, \"\\\"]\");\n+\t}\n+      fprintf (file, \";\\n\");\n     }\n \n-  /* Go over the list of constraints printing the edges in the constraint\n-     graph.  */\n-  fprintf (file, \"\\n  // The constraint edges:\\n\");\n-  FOR_EACH_VEC_ELT (constraint_t, constraints, i, c)\n-    if (c)\n-      dump_constraint_edge (file, c);\n+  /* Go over the edges.  */\n+  fprintf (file, \"\\n  // Edges in the constraint graph:\\n\");\n+  for (i = 0; i < graph->size; i++)\n+    {\n+      unsigned j;\n+      bitmap_iterator bi;\n+      if (find (i) != i)\n+\tcontinue;\n+      EXECUTE_IF_IN_NONNULL_BITMAP (graph->succs[i], 0, j, bi)\n+\t{\n+\t  unsigned to = find (j);\n+\t  if (i == to)\n+\t    continue;\n+\t  if (i < FIRST_REF_NODE)\n+\t    fprintf (file, \"\\\"%s\\\"\", get_varinfo (i)->name);\n+\t  else\n+\t    fprintf (file, \"\\\"*%s\\\"\", get_varinfo (i - FIRST_REF_NODE)->name);\n+\t  fprintf (file, \" -> \");\n+\t  if (to < FIRST_REF_NODE)\n+\t    fprintf (file, \"\\\"%s\\\"\", get_varinfo (to)->name);\n+\t  else\n+\t    fprintf (file, \"\\\"*%s\\\"\", get_varinfo (to - FIRST_REF_NODE)->name);\n+\t  fprintf (file, \";\\n\");\n+\t}\n+    }\n \n-  /* Prints the tail of the dot file. By now, only the closing bracket.  */\n-  fprintf (file, \"}\\n\\n\\n\");\n+  /* Prints the tail of the dot file.  */\n+  fprintf (file, \"}\\n\");\n }\n \n /* Print out the constraint graph to stderr.  */\n@@ -2419,6 +2414,7 @@ rewrite_constraints (constraint_graph_t graph,\n \t\t       \"ignoring constraint:\",\n \t\t       get_varinfo (lhs.var)->name);\n \t      dump_constraint (dump_file, c);\n+\t      fprintf (dump_file, \"\\n\");\n \t    }\n \t  VEC_replace (constraint_t, constraints, i, NULL);\n \t  continue;\n@@ -2433,6 +2429,7 @@ rewrite_constraints (constraint_graph_t graph,\n \t\t       \"ignoring constraint:\",\n \t\t       get_varinfo (rhs.var)->name);\n \t      dump_constraint (dump_file, c);\n+\t      fprintf (dump_file, \"\\n\");\n \t    }\n \t  VEC_replace (constraint_t, constraints, i, NULL);\n \t  continue;\n@@ -6362,13 +6359,11 @@ solve_constraints (void)\n     fprintf (dump_file, \"Rewriting constraints and unifying \"\n \t     \"variables\\n\");\n   rewrite_constraints (graph, si);\n-\n-  build_succ_graph ();\n   free_var_substitution_info (si);\n \n-  if (dump_file && (dump_flags & TDF_GRAPH))\n-    dump_constraint_graph (dump_file);\n+  build_succ_graph ();\n \n+  /* Attach complex constraints to graph nodes.  */\n   move_complex_constraints (graph);\n \n   if (dump_file)\n@@ -6384,11 +6379,27 @@ solve_constraints (void)\n      point. */\n   remove_preds_and_fake_succs (graph);\n \n+  if (dump_file && (dump_flags & TDF_GRAPH))\n+    {\n+      fprintf (dump_file, \"\\n\\n// The constraint graph before solve-graph \"\n+\t       \"in dot format:\\n\");\n+      dump_constraint_graph (dump_file);\n+      fprintf (dump_file, \"\\n\\n\");\n+    }\n+\n   if (dump_file)\n     fprintf (dump_file, \"Solving graph\\n\");\n \n   solve_graph (graph);\n \n+  if (dump_file && (dump_flags & TDF_GRAPH))\n+    {\n+      fprintf (dump_file, \"\\n\\n// The constraint graph after solve-graph \"\n+\t       \"in dot format:\\n\");\n+      dump_constraint_graph (dump_file);\n+      fprintf (dump_file, \"\\n\\n\");\n+    }\n+\n   if (dump_file)\n     dump_sa_points_to_info (dump_file);\n }"}]}