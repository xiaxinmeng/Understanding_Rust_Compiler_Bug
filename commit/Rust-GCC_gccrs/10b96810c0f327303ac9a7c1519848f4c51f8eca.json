{"sha": "10b96810c0f327303ac9a7c1519848f4c51f8eca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBiOTY4MTBjMGYzMjczMDNhYzlhN2MxNTE5ODQ4ZjRjNTFmOGVjYQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2006-09-06T06:06:55Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2006-09-06T06:06:55Z"}, "message": "re PR tree-optimization/28952 (tree check: expected class 'expression', have 'exceptional' (ssa_name) in vectorizable_condition, at tree-vect-transform.c:2122)\n\n2006-09-05  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR tree-opt/28952\n        * tree-vect-transform.c (vectorizable_condition): Move the check\n        for the type after the check for simple condition.\n2006-09-05  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR tree-opt/28952\n        * gcc.dg/vect/pr28952.c: New test.\n\nFrom-SVN: r116716", "tree": {"sha": "d0ab6874f5a35f9ba3a0dc3879031098441b3d8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0ab6874f5a35f9ba3a0dc3879031098441b3d8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10b96810c0f327303ac9a7c1519848f4c51f8eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b96810c0f327303ac9a7c1519848f4c51f8eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10b96810c0f327303ac9a7c1519848f4c51f8eca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b96810c0f327303ac9a7c1519848f4c51f8eca/comments", "author": null, "committer": null, "parents": [{"sha": "5df1740de4c12ae9b6d6305069106683f8f82694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5df1740de4c12ae9b6d6305069106683f8f82694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5df1740de4c12ae9b6d6305069106683f8f82694"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "1724238cbdd4bd293a9bce92eeb72b1f15f28415", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10b96810c0f327303ac9a7c1519848f4c51f8eca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10b96810c0f327303ac9a7c1519848f4c51f8eca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10b96810c0f327303ac9a7c1519848f4c51f8eca", "patch": "@@ -1,3 +1,9 @@\n+2006-09-05  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR tree-opt/28952\n+\t* tree-vect-transform.c (vectorizable_condition): Move the check\n+\tfor the type after the check for simple condition.\n+\n 2006-09-05  J\"orn Rennecke  <joern.rennecke@st.com>\n \t    Kaz Kojima  <kkojima@gcc.gnu.org>\n \n@@ -20,10 +26,10 @@\n \n 2006-09-05  Anatoly Sokolov <aesok@post.ru>\n \n-        * config/avr/avr.c (avr_mcu_types): Add support for at90pwm1 device.\n-        * config/avr/t-avr (MULTILIB_MATCHES): (Ditto.).\n-        * config/avr/avr.h (LINK_SPEC, CRT_BINUTILS_SPECS): (Ditto.).\n-        (avr_rtx_costs): Mark 'outer_code' argument with ATTRIBUTE_UNUSED.\n+\t* config/avr/avr.c (avr_mcu_types): Add support for at90pwm1 device.\n+\t* config/avr/t-avr (MULTILIB_MATCHES): (Ditto.).\n+\t* config/avr/avr.h (LINK_SPEC, CRT_BINUTILS_SPECS): (Ditto.).\n+\t(avr_rtx_costs): Mark 'outer_code' argument with ATTRIBUTE_UNUSED.\n \n 2006-09-05  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "5488b9df4cf0cdd085592d072e0d2f66bb580fd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10b96810c0f327303ac9a7c1519848f4c51f8eca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10b96810c0f327303ac9a7c1519848f4c51f8eca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10b96810c0f327303ac9a7c1519848f4c51f8eca", "patch": "@@ -1,3 +1,8 @@\n+2006-09-05  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR tree-opt/28952\n+\t* gcc.dg/vect/pr28952.c: New test.\n+\n 2006-09-05  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/28900"}, {"sha": "c5ef65cb21f8cd8583b50ddb6582b52a131d50da", "filename": "gcc/testsuite/gcc.dg/vect/pr28952.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10b96810c0f327303ac9a7c1519848f4c51f8eca/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr28952.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10b96810c0f327303ac9a7c1519848f4c51f8eca/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr28952.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr28952.c?ref=10b96810c0f327303ac9a7c1519848f4c51f8eca", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+\n+/* We were  ICE because we wanted to check the type of the\n+   elements of a conditional before we knew it was a conditional.  */\n+\n+struct player_spaceship\n+{\n+  _Bool structure[32];\n+};\n+struct player\n+{\n+  struct player_spaceship spaceship;\n+};\n+struct packet_spaceship_info\n+{\n+  char structure[32 + 1];\n+};\n+send_spaceship_info (void)\n+{\n+  int j;\n+  struct player *pplayer;\n+  struct packet_spaceship_info info;\n+  struct player_spaceship *ship = &pplayer->spaceship;\n+  for (j = 0; j < 32; j++)\n+  {\n+    info.structure[j] = ship->structure[j] ? '1' : '0';\n+  }\n+  lsend_packet_spaceship_info (&info);\n+}\n+\n+"}, {"sha": "33fdaf757466e22d1cbf16b93f14fb3edc93ce6f", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10b96810c0f327303ac9a7c1519848f4c51f8eca/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10b96810c0f327303ac9a7c1519848f4c51f8eca/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=10b96810c0f327303ac9a7c1519848f4c51f8eca", "patch": "@@ -2117,14 +2117,14 @@ vectorizable_condition (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt)\n   then_clause = TREE_OPERAND (op, 1);\n   else_clause = TREE_OPERAND (op, 2);\n \n+  if (!vect_is_simple_cond (cond_expr, loop_vinfo))\n+    return false;\n+\n   /* We do not handle two different vector types for the condition\n      and the values.  */\n   if (TREE_TYPE (TREE_OPERAND (cond_expr, 0)) != TREE_TYPE (vectype))\n     return false;\n \n-  if (!vect_is_simple_cond (cond_expr, loop_vinfo))\n-    return false;\n-\n   if (TREE_CODE (then_clause) == SSA_NAME)\n     {\n       tree then_def_stmt = SSA_NAME_DEF_STMT (then_clause);"}]}