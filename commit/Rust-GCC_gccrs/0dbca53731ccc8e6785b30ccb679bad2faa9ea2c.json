{"sha": "0dbca53731ccc8e6785b30ccb679bad2faa9ea2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRiY2E1MzczMWNjYzhlNjc4NWIzMGNjYjY3OWJhZDJmYWE5ZWEyYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-08-24T17:11:13Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-08-24T17:11:13Z"}, "message": "ipa-cp.c (ipcp_analyze_node): New function.\n\n\t* ipa-cp.c (ipcp_analyze_node): New function.\n\t(ipcp_update_cloned_node): Use it.\n\t(ipcp_init_stage): Likewise.\n\t* ipa-inline.c (function_insertion_hook_holder): New static var.\n\t(analyze_function): Break out from ....\n\t(inline_generate_summary): Here; register insertion hook.\n\t(cgraph_decide_inlining): Remove hook.\n\t(add_new_function): New function.\n\nFrom-SVN: r139536", "tree": {"sha": "e4ad7a1bdbd2155344888e32eac895842bc01109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4ad7a1bdbd2155344888e32eac895842bc01109"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dbca53731ccc8e6785b30ccb679bad2faa9ea2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dbca53731ccc8e6785b30ccb679bad2faa9ea2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dbca53731ccc8e6785b30ccb679bad2faa9ea2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dbca53731ccc8e6785b30ccb679bad2faa9ea2c/comments", "author": null, "committer": null, "parents": [{"sha": "30b608eb7c0432299ade3b19200315bf5e147d31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b608eb7c0432299ade3b19200315bf5e147d31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30b608eb7c0432299ade3b19200315bf5e147d31"}], "stats": {"total": 107, "additions": 66, "deletions": 41}, "files": [{"sha": "7813bdacd982d3ef764002fcc01ab897837de706", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbca53731ccc8e6785b30ccb679bad2faa9ea2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbca53731ccc8e6785b30ccb679bad2faa9ea2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0dbca53731ccc8e6785b30ccb679bad2faa9ea2c", "patch": "@@ -1,3 +1,14 @@\n+2008-08-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-cp.c (ipcp_analyze_node): New function.\n+\t(ipcp_update_cloned_node): Use it.\n+\t(ipcp_init_stage): Likewise.\n+\t* ipa-inline.c (function_insertion_hook_holder): New static var.\n+\t(analyze_function): Break out from ....\n+\t(inline_generate_summary): Here; register insertion hook.\n+\t(cgraph_decide_inlining): Remove hook.\n+\t(add_new_function): New function.\n+\n 2008-08-23  Jan Hubicka  <jh@suse.cz>\n \n \t* opts.c (decode_options): Revert accidental change enabling ipa-cp."}, {"sha": "ad43298ae4e99fcde8b98d693b279ef4dfe796cd", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbca53731ccc8e6785b30ccb679bad2faa9ea2c/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbca53731ccc8e6785b30ccb679bad2faa9ea2c/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=0dbca53731ccc8e6785b30ccb679bad2faa9ea2c", "patch": "@@ -159,6 +159,18 @@ ipcp_init_cloned_node (struct cgraph_node *orig_node,\n   ipa_create_param_decls_array (new_node);\n }\n \n+/* Perform intraprocedrual analysis needed for ipcp.  */\n+static void\n+ipcp_analyze_node (struct cgraph_node *node)\n+{\n+  /* Unreachable nodes should have been eliminated before ipcp.  */\n+  gcc_assert (node->needed || node->reachable);\n+\n+  ipa_count_formal_params (node);\n+  ipa_create_param_decls_array (node);\n+  ipa_detect_param_modifications (node);\n+}\n+\n /* Recompute all local information since node might've got new\n    direct calls after clonning.  */\n static void\n@@ -169,15 +181,13 @@ ipcp_update_cloned_node (struct cgraph_node *new_node)\n   current_function_decl = new_node->decl;\n   rebuild_cgraph_edges ();\n \n+  /* Indirect inlinng rely on fact that we've already analyzed\n+     the body..  */\n   if (flag_indirect_inlining)\n     {\n       struct cgraph_edge *cs;\n \n-      ipa_check_create_node_params ();\n-      ipa_count_formal_params (new_node);\n-      ipa_create_param_decls_array (new_node);\n-      ipa_detect_param_modifications (new_node);\n-      ipa_analyze_params_uses (new_node);\n+      ipcp_analyze_node (new_node);\n \n       for (cs = new_node->callees; cs; cs = cs->next_callee)\n \t{\n@@ -418,18 +428,12 @@ ipcp_init_stage (void)\n   struct cgraph_edge *cs;\n \n   for (node = cgraph_nodes; node; node = node->next)\n-    {\n-      if (!node->analyzed)\n-\tcontinue;\n-      /* Unreachable nodes should have been eliminated before ipcp.  */\n-      gcc_assert (node->needed || node->reachable);\n-\n-      ipa_count_formal_params (node);\n-      ipa_create_param_decls_array (node);\n-      ipcp_initialize_node_lattices (node);\n-      ipa_detect_param_modifications (node);\n-      ipcp_compute_node_scale (node);\n-    }\n+    if (node->analyzed)\n+      {\n+        ipcp_analyze_node (node);\n+        ipcp_initialize_node_lattices (node);\n+        ipcp_compute_node_scale (node);\n+      }\n   for (node = cgraph_nodes; node; node = node->next)\n     {\n       if (!node->analyzed)"}, {"sha": "3f44d2fca522c1e9ff15926a8857ace9be3af42c", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbca53731ccc8e6785b30ccb679bad2faa9ea2c/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbca53731ccc8e6785b30ccb679bad2faa9ea2c/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=0dbca53731ccc8e6785b30ccb679bad2faa9ea2c", "patch": "@@ -166,6 +166,9 @@ static int nfunctions_inlined;\n static int overall_insns;\n static gcov_type max_count;\n \n+/* Holders of ipa cgraph hooks: */\n+static struct cgraph_node_hook_list *function_insertion_hook_holder;\n+\n static inline struct inline_summary *\n inline_summary (struct cgraph_node *node)\n {\n@@ -1073,6 +1076,8 @@ cgraph_decide_inlining (void)\n   int i;\n   int initial_insns = 0;\n \n+  cgraph_remove_function_insertion_hook (function_insertion_hook_holder);\n+\n   max_count = 0;\n   for (node = cgraph_nodes; node; node = node->next)\n     if (node->analyzed && (node->needed || node->reachable))\n@@ -1655,14 +1660,36 @@ inline_indirect_intraprocedural_analysis (struct cgraph_node *node)\n     ipa_print_node_jump_functions (dump_file, node);\n }\n \n+/* Note function body size.  */\n+static void\n+analyze_function (struct cgraph_node *node)\n+{\n+  push_cfun (DECL_STRUCT_FUNCTION (node->decl));\n+  current_function_decl = node->decl;\n+\n+  compute_inline_parameters (node);\n+  if (flag_indirect_inlining)\n+    inline_indirect_intraprocedural_analysis (node);\n+\n+  current_function_decl = NULL;\n+  pop_cfun ();\n+}\n+\n+/* Called when new function is inserted to callgraph late.  */\n+static void\n+add_new_function (struct cgraph_node *node, void *data ATTRIBUTE_UNUSED)\n+{\n+  analyze_function (node);\n+}\n+\n /* Note function body size.  */\n static void\n inline_generate_summary (void)\n {\n-  struct cgraph_node **order =\n-    XCNEWVEC (struct cgraph_node *, cgraph_n_nodes);\n-  int nnodes = cgraph_postorder (order);\n-  int i;\n+  struct cgraph_node *node;\n+\n+  function_insertion_hook_holder =\n+      cgraph_add_function_insertion_hook (&add_new_function, NULL);\n \n   if (flag_indirect_inlining)\n     {\n@@ -1671,27 +1698,10 @@ inline_generate_summary (void)\n       ipa_check_create_edge_args ();\n     }\n \n-  for (i = nnodes - 1; i >= 0; i--)\n-    {\n-      struct cgraph_node *node = order[i];\n-      \n-      /* Allow possibly removed nodes to be garbage collected.  */\n-      order[i] = NULL;\n-      if (node->analyzed && (node->needed || node->reachable))\n-\t{\n-\t  push_cfun (DECL_STRUCT_FUNCTION (node->decl));\n-\t  current_function_decl = node->decl;\n-\t  compute_inline_parameters (node);\n-\n-\t  if (flag_indirect_inlining)\n-\t    inline_indirect_intraprocedural_analysis (node);\n-\n-\t  pop_cfun ();\n-\t}\n-    }\n+  for (node = cgraph_nodes; node; node = node->next)\n+    if (node->analyzed)\n+      analyze_function (node);\n   \n-  current_function_decl = NULL;\n-  free (order);\n   return;\n }\n "}]}