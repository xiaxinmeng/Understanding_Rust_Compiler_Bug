{"sha": "1fbb509aacf96e6d4d344ea41fadca74cad7ee99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZiYjUwOWFhY2Y5NmU2ZDRkMzQ0ZWE0MWZhZGNhNzRjYWQ3ZWU5OQ==", "commit": {"author": {"name": "Changpeng Fang", "email": "changpeng.fang@amd.com", "date": "2010-06-25T18:25:00Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-06-25T18:25:00Z"}, "message": "Enable prefetching at -O3 for AMD cpus.\n\n2010-06-25  Changpeng Fang  <changpeng.fang@amd.com>\n\n\t* common.opt (fprefetch-loop-arrays): Re-define\n\t-fprefetch-loop-arrays as a tri-state option with the initial\n\tvalue of -1.\n\t* tree-ssa-loop.c (gate_tree_ssa_loop_prefetch): Invoke prefetch\n\tpass only when flag_prefetch_loop_arrays > 0.\n\t* toplev.c (process_options): Note that, with tri-states,\n\tflag_prefetch_loop_arrays>0 means prefetching is enabled.\n\t* config/i386/i386.c (override_options): Enable prefetching at -O3\n\tfor a set of CPUs that sw prefetching is helpful.\n\t(software_prefetching_beneficial_p): New.  Return TRUE if software\n\tprefetching is beneficial for the given CPU.\n\nFrom-SVN: r161391", "tree": {"sha": "30ce2860b1afc7397546e4427a13dcdcc2f04f2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30ce2860b1afc7397546e4427a13dcdcc2f04f2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fbb509aacf96e6d4d344ea41fadca74cad7ee99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fbb509aacf96e6d4d344ea41fadca74cad7ee99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fbb509aacf96e6d4d344ea41fadca74cad7ee99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fbb509aacf96e6d4d344ea41fadca74cad7ee99/comments", "author": {"login": "changpeng", "id": 4239661, "node_id": "MDQ6VXNlcjQyMzk2NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4239661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/changpeng", "html_url": "https://github.com/changpeng", "followers_url": "https://api.github.com/users/changpeng/followers", "following_url": "https://api.github.com/users/changpeng/following{/other_user}", "gists_url": "https://api.github.com/users/changpeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/changpeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/changpeng/subscriptions", "organizations_url": "https://api.github.com/users/changpeng/orgs", "repos_url": "https://api.github.com/users/changpeng/repos", "events_url": "https://api.github.com/users/changpeng/events{/privacy}", "received_events_url": "https://api.github.com/users/changpeng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c14420e17389ea8cae7a847c7d1733c77b227399", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14420e17389ea8cae7a847c7d1733c77b227399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14420e17389ea8cae7a847c7d1733c77b227399"}], "stats": {"total": 51, "additions": 46, "deletions": 5}, "files": [{"sha": "23818d9e57e54deb32d277a858a327b7bf9759d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fbb509aacf96e6d4d344ea41fadca74cad7ee99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fbb509aacf96e6d4d344ea41fadca74cad7ee99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1fbb509aacf96e6d4d344ea41fadca74cad7ee99", "patch": "@@ -1,3 +1,17 @@\n+2010-06-25  Changpeng Fang  <changpeng.fang@amd.com>\n+\n+\t* common.opt (fprefetch-loop-arrays): Re-define\n+\t-fprefetch-loop-arrays as a tri-state option with the initial\n+\tvalue of -1.\n+\t* tree-ssa-loop.c (gate_tree_ssa_loop_prefetch): Invoke prefetch\n+\tpass only when flag_prefetch_loop_arrays > 0.\n+\t* toplev.c (process_options): Note that, with tri-states,\n+\tflag_prefetch_loop_arrays>0 means prefetching is enabled.\n+\t* config/i386/i386.c (override_options): Enable prefetching at -O3\n+\tfor a set of CPUs that sw prefetching is helpful.\n+\t(software_prefetching_beneficial_p): New.  Return TRUE if software\n+\tprefetching is beneficial for the given CPU.\n+\n 2010-06-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR rtl-optimization/44326"}, {"sha": "6ca787a4b5f53d52ad2b5c72fd9b63409b2b9e9f", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fbb509aacf96e6d4d344ea41fadca74cad7ee99/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fbb509aacf96e6d4d344ea41fadca74cad7ee99/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=1fbb509aacf96e6d4d344ea41fadca74cad7ee99", "patch": "@@ -949,7 +949,7 @@ Common Report Var(flag_predictive_commoning) Optimization\n Run predictive commoning optimization.\n \n fprefetch-loop-arrays\n-Common Report Var(flag_prefetch_loop_arrays) Optimization\n+Common Report Var(flag_prefetch_loop_arrays) Init(-1) Optimization\n Generate prefetch instructions, if available, for arrays in loops\n \n fprofile"}, {"sha": "e0d8dc4937c5020dbcecfc3b6d9bc36353b5fe47", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fbb509aacf96e6d4d344ea41fadca74cad7ee99/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fbb509aacf96e6d4d344ea41fadca74cad7ee99/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1fbb509aacf96e6d4d344ea41fadca74cad7ee99", "patch": "@@ -2691,6 +2691,26 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n   return ret;\n }\n \n+/* Return TRUE if software prefetching is beneficial for the\n+   given CPU. */\n+\n+static bool\n+software_prefetching_beneficial_p (void)\n+{\n+  switch (ix86_tune)\n+    {\n+    case PROCESSOR_GEODE:\n+    case PROCESSOR_K6:\n+    case PROCESSOR_ATHLON:\n+    case PROCESSOR_K8:\n+    case PROCESSOR_AMDFAM10:\n+      return true;\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Function that is callable from the debugger to print the current\n    options.  */\n void\n@@ -3535,6 +3555,13 @@ override_options (bool main_args_p)\n   if (!PARAM_SET_P (PARAM_L2_CACHE_SIZE))\n     set_param_value (\"l2-cache-size\", ix86_cost->l2_cache_size);\n \n+  /* Enable sw prefetching at -O3 for CPUS that prefetching is helpful.  */\n+  if (flag_prefetch_loop_arrays < 0\n+      && HAVE_prefetch\n+      && optimize >= 3\n+      && software_prefetching_beneficial_p ())\n+    flag_prefetch_loop_arrays = 1;\n+\n   /* If using typedef char *va_list, signal that __builtin_va_start (&ap, 0)\n      can be optimized to ap = __builtin_next_arg (0).  */\n   if (!TARGET_64BIT)"}, {"sha": "c22cb98fd62d1e29e72015af2e4fab94af10e355", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fbb509aacf96e6d4d344ea41fadca74cad7ee99/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fbb509aacf96e6d4d344ea41fadca74cad7ee99/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=1fbb509aacf96e6d4d344ea41fadca74cad7ee99", "patch": "@@ -2013,13 +2013,13 @@ process_options (void)\n     }\n \n #ifndef HAVE_prefetch\n-  if (flag_prefetch_loop_arrays)\n+  if (flag_prefetch_loop_arrays > 0)\n     {\n       warning (0, \"-fprefetch-loop-arrays not supported for this target\");\n       flag_prefetch_loop_arrays = 0;\n     }\n #else\n-  if (flag_prefetch_loop_arrays && !HAVE_prefetch)\n+  if (flag_prefetch_loop_arrays > 0 && !HAVE_prefetch)\n     {\n       warning (0, \"-fprefetch-loop-arrays not supported for this target (try -march switches)\");\n       flag_prefetch_loop_arrays = 0;\n@@ -2028,7 +2028,7 @@ process_options (void)\n \n   /* This combination of options isn't handled for i386 targets and doesn't\n      make much sense anyway, so don't allow it.  */\n-  if (flag_prefetch_loop_arrays && optimize_size)\n+  if (flag_prefetch_loop_arrays > 0 && optimize_size)\n     {\n       warning (0, \"-fprefetch-loop-arrays is not supported with -Os\");\n       flag_prefetch_loop_arrays = 0;"}, {"sha": "c9c5bbd0f0c4a6cec5f855ae8b42b288f498e2fc", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fbb509aacf96e6d4d344ea41fadca74cad7ee99/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fbb509aacf96e6d4d344ea41fadca74cad7ee99/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=1fbb509aacf96e6d4d344ea41fadca74cad7ee99", "patch": "@@ -600,7 +600,7 @@ tree_ssa_loop_prefetch (void)\n static bool\n gate_tree_ssa_loop_prefetch (void)\n {\n-  return flag_prefetch_loop_arrays != 0;\n+  return flag_prefetch_loop_arrays > 0;\n }\n \n struct gimple_opt_pass pass_loop_prefetch ="}]}