{"sha": "3f165ff29a1aec939b43a498b1899b21bc50366b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YxNjVmZjI5YTFhZWM5MzliNDNhNDk4YjE4OTliMjFiYzUwMzY2Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-16T16:22:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-16T16:22:44Z"}, "message": "[multiple changes]\n\n2010-06-16  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.adb (Expand_Dispatching_Call): Adjust the decoration of the\n\tnode referenced by the SCIL node of dispatching \"=\" to skip the tags\n\tcomparison.\n\n2010-06-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Exit_Statement): Return if no enclosing loop,\n\tto prevent cascaded errors and compilation aborts.\n\n2010-06-16  Robert Dewar  <dewar@adacore.com>\n\n\t* back_end.adb (Switch_Subsequently_Cancelled): New function\n\tMove declarations to package body level to support this change\n\t* back_end.ads (Switch_Subsequently_Cancelled): New function\n\t* gnat_ugn.texi: Document -gnat-p switch\n\t* switch-c.adb (Scan_Front_End_Switches): Implement -gnat-p switch\n\t* ug_words: Add entry for -gnat-p (UNSUPPRESS_ALL)\n\t* usage.adb: Add line for -gnat-p switch\n\t* vms_data.ads: Add entry for UNSUPPRESS_ALL (-gnat-p)\n\n2010-06-16  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_warn.adb (Check_Infinite_Loop_Warning): Declaration counts as\n\tmodification.\n\nFrom-SVN: r160847", "tree": {"sha": "7cdb6c0c44a144335a51c7b24e7cbbc5e60d9fad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cdb6c0c44a144335a51c7b24e7cbbc5e60d9fad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f165ff29a1aec939b43a498b1899b21bc50366b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f165ff29a1aec939b43a498b1899b21bc50366b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f165ff29a1aec939b43a498b1899b21bc50366b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f165ff29a1aec939b43a498b1899b21bc50366b/comments", "author": null, "committer": null, "parents": [{"sha": "c249a7bc843dc407280d91a448d2e3f2e16370d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c249a7bc843dc407280d91a448d2e3f2e16370d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c249a7bc843dc407280d91a448d2e3f2e16370d7"}], "stats": {"total": 375, "additions": 258, "deletions": 117}, "files": [{"sha": "83f82c61c33a51e493c43be4e2df92c26af66bcd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3f165ff29a1aec939b43a498b1899b21bc50366b", "patch": "@@ -1,3 +1,34 @@\n+2010-06-16  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Expand_Dispatching_Call): Adjust the decoration of the\n+\tnode referenced by the SCIL node of dispatching \"=\" to skip the tags\n+\tcomparison.\n+\n+2010-06-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Exit_Statement): Return if no enclosing loop,\n+\tto prevent cascaded errors and compilation aborts.\n+\n+2010-06-16  Robert Dewar  <dewar@adacore.com>\n+\n+\t* back_end.adb (Switch_Subsequently_Cancelled): New function\n+\tMove declarations to package body level to support this change\n+\t* back_end.ads (Switch_Subsequently_Cancelled): New function\n+\t* gnat_ugn.texi: Document -gnat-p switch\n+\t* switch-c.adb (Scan_Front_End_Switches): Implement -gnat-p switch\n+\t* ug_words: Add entry for -gnat-p (UNSUPPRESS_ALL)\n+\t* usage.adb: Add line for -gnat-p switch\n+\t* vms_data.ads: Add entry for UNSUPPRESS_ALL (-gnat-p)\n+\n+2010-06-16  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_warn.adb (Check_Infinite_Loop_Warning): Declaration counts as\n+\tmodification.\n+\n+2010-06-16  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_disp.adb: Minor reformatting\n+\n 2010-06-16  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch3.adb (Complete_Private_Subtype): Inherit class_wide type from"}, {"sha": "47836cbb98f202455e9c09b5dd926d5beb88a6c0", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 65, "deletions": 37, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=3f165ff29a1aec939b43a498b1899b21bc50366b", "patch": "@@ -42,6 +42,29 @@ with Types;     use Types;\n \n package body Back_End is\n \n+   type Arg_Array is array (Nat) of Big_String_Ptr;\n+   type Arg_Array_Ptr is access Arg_Array;\n+   --  Types to access compiler arguments\n+\n+   Next_Arg : Pos := 1;\n+   --  Next argument to be scanned by Scan_Compiler_Arguments. We make this\n+   --  global so that it can be accessed by Switch_Subsequently_Cancelled.\n+\n+   flag_stack_check : Int;\n+   pragma Import (C, flag_stack_check);\n+   --  Indicates if stack checking is enabled, imported from toplev.c\n+\n+   save_argc : Nat;\n+   pragma Import (C, save_argc);\n+   --  Saved value of argc (number of arguments), imported from toplev.c\n+\n+   save_argv : Arg_Array_Ptr;\n+   pragma Import (C, save_argv);\n+   --  Saved value of argv (argument pointers), imported from toplev.c\n+\n+   function Len_Arg (Arg : Pos) return Nat;\n+   --  Determine length of argument number Arg on original gnat1 command line\n+\n    -------------------\n    -- Call_Back_End --\n    -------------------\n@@ -122,37 +145,30 @@ package body Back_End is\n          gigi_operating_mode           => Mode);\n    end Call_Back_End;\n \n+   -------------\n+   -- Len_Arg --\n+   -------------\n+\n+   function Len_Arg (Arg : Pos) return Nat is\n+   begin\n+      for J in 1 .. Nat'Last loop\n+         if save_argv (Arg).all (Natural (J)) = ASCII.NUL then\n+            return J - 1;\n+         end if;\n+      end loop;\n+\n+      raise Program_Error;\n+   end Len_Arg;\n+\n    -----------------------------\n    -- Scan_Compiler_Arguments --\n    -----------------------------\n \n    procedure Scan_Compiler_Arguments is\n-      Next_Arg : Pos := 1;\n-\n-      type Arg_Array is array (Nat) of Big_String_Ptr;\n-      type Arg_Array_Ptr is access Arg_Array;\n-\n-      flag_stack_check : Int;\n-      pragma Import (C, flag_stack_check);\n-      --  Import from toplev.c\n-\n-      save_argc : Nat;\n-      pragma Import (C, save_argc);\n-      --  Import from toplev.c\n-\n-      save_argv : Arg_Array_Ptr;\n-      pragma Import (C, save_argv);\n-      --  Import from toplev.c\n \n       Output_File_Name_Seen : Boolean := False;\n       --  Set to True after having scanned file_name for switch \"-gnatO file\"\n \n-      --  Local functions\n-\n-      function Len_Arg (Arg : Pos) return Nat;\n-      --  Determine length of argument number Arg on the original command line\n-      --  from gnat1.\n-\n       procedure Scan_Back_End_Switches (Switch_Chars : String);\n       --  Procedure to scan out switches stored in Switch_Chars. The first\n       --  character is known to be a valid switch character, and there are no\n@@ -165,21 +181,6 @@ package body Back_End is\n       --  switches must still be scanned to skip \"-o\" or internal GCC switches\n       --  with their argument.\n \n-      -------------\n-      -- Len_Arg --\n-      -------------\n-\n-      function Len_Arg (Arg : Pos) return Nat is\n-      begin\n-         for J in 1 .. Nat'Last loop\n-            if save_argv (Arg).all (Natural (J)) = ASCII.NUL then\n-               return J - 1;\n-            end if;\n-         end loop;\n-\n-         raise Program_Error;\n-      end Len_Arg;\n-\n       ----------------------------\n       -- Scan_Back_End_Switches --\n       ----------------------------\n@@ -296,4 +297,31 @@ package body Back_End is\n       end loop;\n    end Scan_Compiler_Arguments;\n \n+   -----------------------------------\n+   -- Switch_Subsequently_Cancelled --\n+   -----------------------------------\n+\n+   function Switch_Subsequently_Cancelled (C : String) return Boolean is\n+      Arg : Pos;\n+\n+   begin\n+      Arg := Next_Arg + 1;\n+      while Arg < save_argc loop\n+         declare\n+            Argv_Ptr : constant Big_String_Ptr := save_argv (Arg);\n+            Argv_Len : constant Nat            := Len_Arg (Arg);\n+            Argv     : constant String         :=\n+                         Argv_Ptr (1 .. Natural (Argv_Len));\n+         begin\n+            if Argv = \"-gnat-\" & C then\n+               return True;\n+            end if;\n+         end;\n+\n+         Arg := Arg + 1;\n+      end loop;\n+\n+      return False;\n+   end Switch_Subsequently_Cancelled;\n+\n end Back_End;"}, {"sha": "a9108f5494ec4e669aaefd07c9fc172c59eb2123", "filename": "gcc/ada/back_end.ads", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fback_end.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fback_end.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.ads?ref=3f165ff29a1aec939b43a498b1899b21bc50366b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -61,4 +61,11 @@ package Back_End is\n    --  Any processed switches that influence the result of a compilation must\n    --  be added to the Compilation_Arguments table.\n \n+   function Switch_Subsequently_Cancelled (C : String) return Boolean;\n+   --  This function is called from Scan_Front_End_Switches. It determines if\n+   --  the switch currently being scanned is followed by a switch of the form\n+   --  \"-gnat-\" & C, where C is the argument. If so, then True is returned,\n+   --  and Scan_Front_End_Switches will cancel the effect of the switch. If\n+   --  no such switch is found, False is returned.\n+\n end Back_End;"}, {"sha": "72127e1cbf7fd3c10dc555659ffe2bd1dfc2d63b", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=3f165ff29a1aec939b43a498b1899b21bc50366b", "patch": "@@ -922,6 +922,15 @@ package body Exp_Disp is\n          --  we generate: x.tag = y.tag and then x = y\n \n          if Subp = Eq_Prim_Op then\n+\n+            --  Adjust the node referenced by the SCIL node to skip the tags\n+            --  comparison because it is the information needed by the SCIL\n+            --  backend to process this dispatching call\n+\n+            if Generate_SCIL then\n+               Set_SCIL_Related_Node (SCIL_Node, New_Call);\n+            end if;\n+\n             Param := First_Actual (Call_Node);\n             New_Call :=\n               Make_And_Then (Loc,"}, {"sha": "3fee1ba500701977d6724bd124b8dacf0c2b905a", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=3f165ff29a1aec939b43a498b1899b21bc50366b", "patch": "@@ -4294,7 +4294,12 @@ controlled by this switch (division by zero checking is on by default).\n \n @item -gnatp\n @cindex @option{-gnatp} (@command{gcc})\n-Suppress all checks. See @ref{Run-Time Checks} for details.\n+Suppress all checks. See @ref{Run-Time Checks} for details. This switch\n+has no effect if cancelled by a subsequent @option{-gnat-p} switch.\n+\n+@item -gnat-p\n+@cindex @option{-gnat-p} (@command{gcc})\n+Cancel effect of previous @option{-gnatp} switch.\n \n @item -gnatP\n @cindex @option{-gnatP} (@command{gcc})\n@@ -4591,6 +4596,9 @@ The switches\n @option{-gnatzc} and @option{-gnatzr} may not be combined with any other\n switches, and only one of them may appear in the command line.\n \n+@item\n+The switch @option{-gnat-p} may not be combined with any other switch.\n+\n @ifclear vms\n @item\n Once a ``y'' appears in the string (that is a use of the @option{-gnaty}\n@@ -6622,6 +6630,16 @@ year). The compiler will generate code based on the assumption that\n the condition being checked is true, which can result in disaster if\n that assumption is wrong.\n \n+The @option{-gnatp} switch has no effect if a subsequent\n+@option{-gnat-p} switch appears.\n+\n+@item -gnat-p\n+@cindex @option{-gnat-p} (@command{gcc})\n+@cindex Suppressing checks\n+@cindex Checks, suppressing\n+@findex Suppress\n+This switch cancels the effect of a previous @option{gnatp} switch.\n+\n @item -gnato\n @cindex @option{-gnato} (@command{gcc})\n @cindex Overflow checks"}, {"sha": "57bd1b44c90323dbd2cbd6e62ddef6feebc09bbb", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=3f165ff29a1aec939b43a498b1899b21bc50366b", "patch": "@@ -1198,7 +1198,7 @@ package body Sem_Ch5 is\n          else\n             Error_Msg_N\n               (\"cannot exit from program unit or accept statement\", N);\n-            exit;\n+            return;\n          end if;\n       end loop;\n "}, {"sha": "7a5414fe879e80732ffee6cb282d5cde557f4c37", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=3f165ff29a1aec939b43a498b1899b21bc50366b", "patch": "@@ -538,6 +538,13 @@ package body Sem_Warn is\n             then\n                return Abandon;\n             end if;\n+\n+         --  Declaration of the variable in question\n+\n+         elsif Nkind (N) = N_Object_Declaration\n+           and then Defining_Identifier (N) = Var\n+         then\n+            return Abandon;\n          end if;\n \n          --  All OK, continue scan\n@@ -554,24 +561,34 @@ package body Sem_Warn is\n          return;\n       end if;\n \n-      --  Case of WHILE loop\n+      --  Deal with Iteration scheme present\n \n       declare\n          Iter : constant Node_Id := Iteration_Scheme (Loop_Statement);\n \n       begin\n-         if Present (Iter) and then Present (Condition (Iter)) then\n+         if Present (Iter) then\n \n-            --  Skip processing for while iteration with conditions actions,\n-            --  since they make it too complicated to get the warning right.\n+            --  While iteration\n \n-            if Present (Condition_Actions (Iter)) then\n-               return;\n-            end if;\n+            if Present (Condition (Iter)) then\n+\n+               --  Skip processing for while iteration with conditions actions,\n+               --  since they make it too complicated to get the warning right.\n \n-            --  Capture WHILE condition\n+               if Present (Condition_Actions (Iter)) then\n+                  return;\n+               end if;\n \n-            Expression := Condition (Iter);\n+               --  Capture WHILE condition\n+\n+               Expression := Condition (Iter);\n+\n+            --  For iteration, do not process, since loop will always terminate\n+\n+            elsif Present (Loop_Parameter_Specification (Iter)) then\n+               return;\n+            end if;\n          end if;\n       end;\n \n@@ -3490,26 +3507,16 @@ package body Sem_Warn is\n         and then Is_Known_Branch\n       then\n          declare\n-            Start : Source_Ptr;\n-            Dummy : Source_Ptr;\n-            Typ   : Character;\n             Atrue : Boolean;\n \n          begin\n-            Sloc_Range (Orig, Start, Dummy);\n             Atrue := Test_Result;\n \n             if Present (Parent (C)) and then Nkind (Parent (C)) = N_Op_Not then\n                Atrue := not Atrue;\n             end if;\n \n-            if Atrue then\n-               Typ := 't';\n-            else\n-               Typ := 'f';\n-            end if;\n-\n-            Set_SCO_Condition (Start, Typ);\n+            Set_SCO_Condition (Orig, Atrue);\n          end;\n       end if;\n "}, {"sha": "8beaec8482f9844aef8b244b2721a675aaa891af", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 45, "deletions": 15, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=3f165ff29a1aec939b43a498b1899b21bc50366b", "patch": "@@ -23,6 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Back_End; use Back_End;\n with Debug;    use Debug;\n with Lib;      use Lib;\n with Osint;    use Osint;\n@@ -662,20 +663,27 @@ package body Switch.C is\n             when 'p' =>\n                Ptr := Ptr + 1;\n \n-               --  Set all specific options as well as All_Checks in the\n-               --  Suppress_Options array, excluding Elaboration_Check, since\n-               --  this is treated specially because we do not want -gnatp to\n-               --  disable static elaboration processing.\n+               --  Skip processing if cancelled by subsequent -gnat-p\n \n-               for J in Suppress_Options'Range loop\n-                  if J /= Elaboration_Check then\n-                     Suppress_Options (J) := True;\n-                  end if;\n-               end loop;\n+               if Switch_Subsequently_Cancelled (\"p\") then\n+                  Store_Switch := False;\n+\n+               else\n+                  --  Set all specific options as well as All_Checks in the\n+                  --  Suppress_Options array, excluding Elaboration_Check,\n+                  --  since this is treated specially because we do not want\n+                  --  -gnatp to disable static elaboration processing.\n+\n+                  for J in Suppress_Options'Range loop\n+                     if J /= Elaboration_Check then\n+                        Suppress_Options (J) := True;\n+                     end if;\n+                  end loop;\n \n-               Validity_Checks_On         := False;\n-               Opt.Suppress_Checks        := True;\n-               Opt.Enable_Overflow_Checks := False;\n+                  Validity_Checks_On         := False;\n+                  Opt.Suppress_Checks        := True;\n+                  Opt.Enable_Overflow_Checks := False;\n+               end if;\n \n             --  Processing for P switch\n \n@@ -933,6 +941,7 @@ package body Switch.C is\n             --  Processing for z switch\n \n             when 'z' =>\n+\n                --  -gnatz must be the first and only switch in Switch_Chars,\n                --  and is a two-letter switch.\n \n@@ -1027,10 +1036,31 @@ package body Switch.C is\n                   Ada_Version_Explicit := Ada_Version;\n                end if;\n \n-            --  Ignore extra switch character\n+            --  Switch cancellation, currently only -gnat-p is allowed.\n+            --  All we do here is the error checking, since the actual\n+            --  processing for switch cancellation is done by calls to\n+            --  Switch_Subsequently_Cancelled at the appropriate point.\n \n-            when '/' | '-' =>\n-               Ptr := Ptr + 1;\n+            when '-' =>\n+\n+               --  Simple ignore -gnat-p\n+\n+               if Switch_Chars = \"-gnat-p\" then\n+                  return;\n+\n+               --  Any other occurrence of minus is ignored. This is for\n+               --  maximum compatibility with previous version which ignored\n+               --  all occurrences of minus.\n+\n+               else\n+                  Store_Switch := False;\n+                  Ptr := Ptr + 1;\n+               end if;\n+\n+            --  We ignore '/' in switches, this is historical, still needed???\n+\n+            when '/' =>\n+               Store_Switch := False;\n \n             --  Anything else is an error (illegal switch character)\n "}, {"sha": "efa5356dff32d2dbf0d37403461335ac89fe9e37", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=3f165ff29a1aec939b43a498b1899b21bc50366b", "patch": "@@ -85,6 +85,7 @@ gcc -c          ^ GNAT COMPILE\n -gnatN          ^ /INLINE=FULL\n -gnato          ^ /CHECKS=OVERFLOW\n -gnatp          ^ /CHECKS=SUPPRESS_ALL\n+-gnat-p         ^ /CHECKS=UNSUPPRESS_ALL\n -gnatP          ^ /POLLING\n -gnatR          ^ /REPRESENTATION_INFO\n -gnatR0         ^ /REPRESENTATION_INFO=NONE"}, {"sha": "87d2735e61e2792eba7882e55ccc65bbcbe4cf93", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=3f165ff29a1aec939b43a498b1899b21bc50366b", "patch": "@@ -598,4 +598,9 @@ begin\n       Write_Line (\"Allow Ada 2005 extensions\");\n    end if;\n \n+   --  Line for -gnat-p switch\n+\n+   Write_Switch_Char (\"-p\");\n+   Write_Line (\"Cancel effect of previous -gnatp switch\");\n+\n end Usage;"}, {"sha": "7a87c4a53ff7dfa7870803141f0a08c9b46dcc01", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 47, "deletions": 42, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f165ff29a1aec939b43a498b1899b21bc50366b/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=3f165ff29a1aec939b43a498b1899b21bc50366b", "patch": "@@ -1253,7 +1253,9 @@ package VMS_Data is\n                                              \"STACK \"                      &\n                                                 \"-fstack-check \"           &\n                                              \"SUPPRESS_ALL \"               &\n-                                                \"-gnatp\";\n+                                                \"-gnatp \"                  &\n+                                             \"UNSUPPRESS_ALL \"             &\n+                                                \"-gnat-p\";\n    --        /NOCHECKS\n    --        /CHECKS[=(keyword[,...])]\n    --\n@@ -1267,47 +1269,50 @@ package VMS_Data is\n    --   You may specify one or more of the following keywords to the /CHECKS\n    --   qualifier to modify this behavior:\n    --\n-   --     DEFAULT       The behavior described above. This is the default\n-   --                   if the /CHECKS qualifier is not present on the\n-   --                   command line. Same as /NOCHECKS.\n-   --\n-   --     OVERFLOW      Enables overflow checking for integer operations and\n-   --                   checks for access before elaboration on subprogram\n-   --                   calls. This causes GNAT to generate slower and larger\n-   --                   executable programs by adding code to check for both\n-   --                   overflow and division by zero (resulting in raising\n-   --                   \"Constraint_Error\" as required by Ada semantics).\n-   --                   Similarly, GNAT does not generate elaboration check\n-   --                   by default, and you must specify this keyword to\n-   --                   enable them.\n-   --\n-   --                   Note that this keyword does not affect the code\n-   --                   generated for any floating-point operations; it\n-   --                   applies only to integer operations. For floating-point,\n-   --                   GNAT has the \"Machine_Overflows\" attribute set to\n-   --                   \"False\" and the normal mode of operation is to generate\n-   --                   IEEE NaN and infinite values on overflow or invalid\n-   --                   operations (such as dividing 0.0 by 0.0).\n-   --\n-   --     ELABORATION   Enables dynamic checks for access-before-elaboration\n-   --                   on subprogram calls and generic instantiations.\n-   --\n-   --     ASSERTIONS    The pragmas \"Assert\" and \"Debug\" normally have no\n-   --                   effect and are ignored. This keyword causes \"Assert\"\n-   --                   and \"Debug\" pragmas to be activated, as well as\n-   --                   \"Check\", \"Precondition\" and \"Postcondition\" pragmas.\n-   --\n-   --     SUPPRESS_ALL  Suppress all runtime checks as though you have \"pragma\n-   --                   Suppress (all_checks)\" in your source. Use this switch\n-   --                   to improve the performance of the code at the expense\n-   --                   of safety in the presence of invalid data or program\n-   --                   bugs.\n-   --\n-   --     DEFAULT       Suppress the effect of any option OVERFLOW or\n-   --                   ASSERTIONS.\n-   --\n-   --     FULL (D)      Similar to OVERFLOW, but suppress the effect of any\n-   --                   option ELABORATION or SUPPRESS_ALL.\n+   --     DEFAULT          The behavior described above. This is the default\n+   --                      if the /CHECKS qualifier is not present on the\n+   --                      command line. Same as /NOCHECKS.\n+   --\n+   --     OVERFLOW        Enables overflow checking for integer operations and\n+   --                     checks for access before elaboration on subprogram\n+   --                     calls. This causes GNAT to generate slower and larger\n+   --                     executable programs by adding code to check for both\n+   --                     overflow and division by zero (resulting in raising\n+   --                     \"Constraint_Error\" as required by Ada semantics).\n+   --                     Similarly, GNAT does not generate elaboration check\n+   --                     by default, and you must specify this keyword to\n+   --                     enable them.\n+   --\n+   --                     Note that this keyword does not affect the code\n+   --                     generated for any floating-point operations; it\n+   --                     applies only to integer operations. For the case of\n+   --                     floating-point, GNAT has the \"Machine_Overflows\"\n+   --                     attribute set to \"False\" and the normal mode of\n+   --                     operation is to generate IEEE NaN and infinite values\n+   --                     on overflow or invalid operations (such as dividing\n+   --                     0.0 by 0.0).\n+   --\n+   --     ELABORATION     Enables dynamic checks for access-before-elaboration\n+   --                     on subprogram calls and generic instantiations.\n+   --\n+   --     ASSERTIONS      The pragmas \"Assert\" and \"Debug\" normally have no\n+   --                     effect and are ignored. This keyword causes \"Assert\"\n+   --                     and \"Debug\" pragmas to be activated, as well as\n+   --                     \"Check\", \"Precondition\" and \"Postcondition\" pragmas.\n+   --\n+   --     SUPPRESS_ALL    Suppress all runtime checks as though you have\n+   --                     \"pragma Suppress (all_checks)\" in your source. Use\n+   --                     this switch to improve the performance of the code at\n+   --                     the expense of safety in the presence of invalid data\n+   --                     or program bugs.\n+   --\n+   --     UNSUPPRESS_ALL  Cancels effect of previous SUPPRESS_ALL.\n+   --\n+   --     DEFAULT         Suppress the effect of any option OVERFLOW or\n+   --                     ASSERTIONS.\n+   --\n+   --     FULL (D)        Similar to OVERFLOW, but suppress the effect of any\n+   --                     option ELABORATION or SUPPRESS_ALL.\n    --\n    --   These keywords only control the default setting of the checks.  You\n    --   may modify them using either \"Suppress\" (to remove checks) or"}]}