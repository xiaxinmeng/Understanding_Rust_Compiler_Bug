{"sha": "d0cf395a999499cfdc785cdb920bfdf401a628aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBjZjM5NWE5OTk0OTljZmRjNzg1Y2RiOTIwYmZkZjQwMWE2MjhhYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-07-08T20:25:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-07-08T20:25:31Z"}, "message": "P0145: Refining Expression Order for C++ (-fstrong-eval-order).\n\ngcc/c-family/\n\t* c.opts (-fargs-in-order): Rename to -fstrong-eval-order.\n\t* c-opts.c: Adjust.\ngcc/cp/\n\t* call.c (op_is_ordered, build_over_call): Adjust for\n\t-fargs-in-order renaming to -fstrong-eval-order.\n\t* cp-gimplify.c (cp_gimplify_expr): Likewise.\n\nFrom-SVN: r238176", "tree": {"sha": "f26032d4656084707e134821ce7a0fc9c5c21ae5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f26032d4656084707e134821ce7a0fc9c5c21ae5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0cf395a999499cfdc785cdb920bfdf401a628aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0cf395a999499cfdc785cdb920bfdf401a628aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0cf395a999499cfdc785cdb920bfdf401a628aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0cf395a999499cfdc785cdb920bfdf401a628aa/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a1b7b7fd75a38474a335a98ac97d674b4c38b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a1b7b7fd75a38474a335a98ac97d674b4c38b20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a1b7b7fd75a38474a335a98ac97d674b4c38b20"}], "stats": {"total": 113, "additions": 58, "deletions": 55}, "files": [{"sha": "9c002f61fc610d69e3fc3eb12a9a51f80295fab0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0cf395a999499cfdc785cdb920bfdf401a628aa/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0cf395a999499cfdc785cdb920bfdf401a628aa/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d0cf395a999499cfdc785cdb920bfdf401a628aa", "patch": "@@ -1,3 +1,9 @@\n+2016-07-08  Jason Merrill  <jason@redhat.com>\n+\n+\tP0145: Refining Expression Order for C++.\n+\t* c.opts (-fargs-in-order): Rename to -fstrong-eval-order.\n+\t* c-opts.c: Adjust.\n+\n 2016-07-05  Markus Trippelsdorf  <markus@trippelsdorf.de>\n \n \tPR c++/71214"}, {"sha": "d945825cc64b0aad7a5389b2f08fe52c95d6b7f0", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0cf395a999499cfdc785cdb920bfdf401a628aa/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0cf395a999499cfdc785cdb920bfdf401a628aa/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=d0cf395a999499cfdc785cdb920bfdf401a628aa", "patch": "@@ -910,11 +910,11 @@ c_common_post_options (const char **pfilename)\n   else if (warn_narrowing == -1)\n     warn_narrowing = 0;\n \n-  /* C++17 requires that function arguments be evaluated left-to-right even on\n-     PUSH_ARGS_REVERSED targets.  */\n+  /* C++17 has stricter evaluation order requirements; let's use some of them\n+     for earlier C++ as well, so chaining works as expected.  */\n   if (c_dialect_cxx ()\n-      && flag_args_in_order == -1)\n-    flag_args_in_order = 2 /*(cxx_dialect >= cxx1z) ? 2 : 0*/;\n+      && flag_strong_eval_order == -1)\n+    flag_strong_eval_order = (cxx_dialect >= cxx1z ? 2 : 1);\n \n   /* Global sized deallocation is new in C++14.  */\n   if (flag_sized_deallocation == -1)"}, {"sha": "8c701523c3871ebd5c35ba1690bd0d1a9302804d", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0cf395a999499cfdc785cdb920bfdf401a628aa/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0cf395a999499cfdc785cdb920bfdf401a628aa/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=d0cf395a999499cfdc785cdb920bfdf401a628aa", "patch": "@@ -1043,14 +1043,6 @@ falt-external-templates\n C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n No longer supported.\n \n-fargs-in-order\n-C++ ObjC++ Alias(fargs-in-order=, 2, 0)\n-Always evaluate function arguments in left-to-right order.\n-\n-fargs-in-order=\n-C++ ObjC++ Var(flag_args_in_order) Joined UInteger Init(-1)\n-Always evaluate function arguments in left-to-right order.\n-\n fasm\n C ObjC C++ ObjC++ Var(flag_no_asm, 0)\n Recognize the \\\"asm\\\" keyword.\n@@ -1518,6 +1510,28 @@ Assume that values of enumeration type are always within the minimum range of th\n fstrict-prototype\n C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n+fstrong-eval-order\n+C++ ObjC++ Common Alias(fstrong-eval-order=, all, none)\n+Follow the C++17 evaluation order requirements for assignment expressions,\n+shift, member function calls, etc.\n+\n+fstrong-eval-order=\n+C++ ObjC++ Common Var(flag_strong_eval_order) Joined Enum(strong_eval_order) Init(-1)\n+Follow the C++17 evaluation order requirements for assignment expressions,\n+shift, member function calls, etc.\n+\n+Enum\n+Name(strong_eval_order) Type(int)\n+\n+EnumValue\n+Enum(strong_eval_order) String(none) Value(0)\n+\n+EnumValue\n+Enum(strong_eval_order) String(some) Value(1)\n+\n+EnumValue\n+Enum(strong_eval_order) String(all) Value(2)\n+\n ftabstop=\n C ObjC C++ ObjC++ Joined RejectNegative UInteger\n -ftabstop=<number>\tDistance between tab stops for column reporting."}, {"sha": "13f80f9103f1c134229c954f0fa57ce4322f28ff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0cf395a999499cfdc785cdb920bfdf401a628aa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0cf395a999499cfdc785cdb920bfdf401a628aa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d0cf395a999499cfdc785cdb920bfdf401a628aa", "patch": "@@ -1,3 +1,10 @@\n+2016-07-08  Jason Merrill  <jason@redhat.com>\n+\n+\tP0145R2: Refining Expression Order for C++.\n+\t* call.c (op_is_ordered, build_over_call): Adjust for\n+\t-fargs-in-order renaming to -fstrong-eval-order.\n+\t* cp-gimplify.c (cp_gimplify_expr): Likewise.\n+\n 2016-07-07  Jakub Jelinek  <jakub@redhat.com>\n \t    Kai Tietz  <ktietz70@googlemail.com>\n "}, {"sha": "8b93c61a6db83382ff8ef957e6ec97c5dbb35ab1", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0cf395a999499cfdc785cdb920bfdf401a628aa/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0cf395a999499cfdc785cdb920bfdf401a628aa/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d0cf395a999499cfdc785cdb920bfdf401a628aa", "patch": "@@ -5378,28 +5378,27 @@ add_candidates (tree fns, tree first_arg, const vec<tree, va_gc> *args,\n static int\n op_is_ordered (tree_code code)\n {\n-  if (!flag_args_in_order)\n-    return 0;\n-\n   switch (code)\n     {\n       // 5. b @= a\n     case MODIFY_EXPR:\n-      return -1;\n+      return (flag_strong_eval_order > 1 ? -1 : 0);\n+\n+      // 6. a[b]\n+    case ARRAY_REF:\n+      return (flag_strong_eval_order > 1 ? 1 : 0);\n \n       // 1. a.b\n       // Not overloadable (yet).\n       // 2. a->b\n       // Only one argument.\n       // 3. a->*b\n     case MEMBER_REF:\n-      // 6. a[b]\n-    case ARRAY_REF:\n       // 7. a << b\n     case LSHIFT_EXPR:\n       // 8. a >> b\n     case RSHIFT_EXPR:\n-      return 1;\n+      return (flag_strong_eval_order ? 1 : 0);\n \n     default:\n       return 0;\n@@ -7830,9 +7829,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \n   tree call = build_cxx_call (fn, nargs, argarray, complain|decltype_flag);\n   if (call != error_mark_node\n-      && !magic\n-      && (flag_args_in_order > 1\n-\t  || (cand->flags & LOOKUP_LIST_INIT_CTOR)))\n+      && cand->flags & LOOKUP_LIST_INIT_CTOR)\n     {\n       tree c = extract_call_expr (call);\n       /* build_new_op_1 will clear this when appropriate.  */"}, {"sha": "c04368fc189cbf853bee0331cf11d71d236c7909", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0cf395a999499cfdc785cdb920bfdf401a628aa/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0cf395a999499cfdc785cdb920bfdf401a628aa/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=d0cf395a999499cfdc785cdb920bfdf401a628aa", "patch": "@@ -780,11 +780,10 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t\tret = GS_ERROR;\n \t    }\n \t}\n-      else if (flag_args_in_order == 1\n+      else if (flag_strong_eval_order\n \t       && !CALL_EXPR_OPERATOR_SYNTAX (*expr_p))\n \t{\n-\t  /* If flag_args_in_order == 1, we don't force an order on all\n-\t     function arguments, but do evaluate the object argument first.  */\n+\t  /* If flag_strong_eval_order, evaluate the object argument first.  */\n \t  tree fntype = TREE_TYPE (CALL_EXPR_FN (*expr_p));\n \t  if (POINTER_TYPE_P (fntype))\n \t    fntype = TREE_TYPE (fntype);"}, {"sha": "b7e9d2d1109a90c27f39f69c848133f8afa0e34d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0cf395a999499cfdc785cdb920bfdf401a628aa/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0cf395a999499cfdc785cdb920bfdf401a628aa/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d0cf395a999499cfdc785cdb920bfdf401a628aa", "patch": "@@ -2237,14 +2237,6 @@ option is used for the warning.\n Turn off all access checking.  This switch is mainly useful for working\n around bugs in the access control code.\n \n-@item -fargs-in-order\n-@opindex fargs-in-order\n-Evaluate function arguments and operands of some binary expressions in\n-left-to-right order, and evaluate the right side of an assignment\n-before the left side, as proposed in P0145R2.  Enabled by default with\n-@option{-std=c++1z}.  @option{-fargs-in-order=1} implements all of the\n-ordering requirements except function arguments.\n-\n @item -fcheck-new\n @opindex fcheck-new\n Check that the pointer returned by @code{operator new} is non-null\n@@ -2483,6 +2475,15 @@ represented in the minimum number of bits needed to represent all the\n enumerators).  This assumption may not be valid if the program uses a\n cast to convert an arbitrary integer value to the enumerated type.\n \n+@item -fstrong-eval-order\n+@opindex fstrong-eval-order\n+Evaluate member access, array subscripting, and shift expressions in\n+left-to-right order, and evaluate assignment in right-to-left order,\n+as adopted for C++17.  Enabled by default with @option{-std=c++1z}.\n+@option{-fstrong-eval-order=some} enables just the ordering of member\n+access and shift expressions, and is the default without\n+@option{-std=c++1z}.\n+\n @item -ftemplate-backtrace-limit=@var{n}\n @opindex ftemplate-backtrace-limit\n Set the maximum number of template instantiation notes for a single"}, {"sha": "278990d6f8e16a6f29a947a9fe16a333c55ad9f3", "filename": "gcc/testsuite/g++.dg/cpp1z/eval-order1.C", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a1b7b7fd75a38474a335a98ac97d674b4c38b20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a1b7b7fd75a38474a335a98ac97d674b4c38b20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order1.C?ref=8a1b7b7fd75a38474a335a98ac97d674b4c38b20", "patch": "@@ -1,21 +0,0 @@\n-// P0145R2: Refining Expression Order for C++\n-// { dg-do run }\n-// { dg-options \"-std=c++1z\" }\n-\n-extern \"C\" int printf (const char *, ...);\n-void sink(...) { }\n-\n-int last = 0;\n-int f(int i)\n-{\n-  if (i < last)\n-    __builtin_abort ();\n-  last = i;\n-  return i;\n-}\n-\n-int main()\n-{\n-  sink(f(1), f(2));\n-  sink(f(3), f(4), f(5));\n-}"}, {"sha": "d382d073aa6cdb85b3c5a39db4951548e38cca6c", "filename": "gcc/testsuite/g++.dg/cpp1z/eval-order3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0cf395a999499cfdc785cdb920bfdf401a628aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0cf395a999499cfdc785cdb920bfdf401a628aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order3.C?ref=d0cf395a999499cfdc785cdb920bfdf401a628aa", "patch": "@@ -1,6 +1,6 @@\n // P0145R2: Refining Expression Order for C++\n // { dg-do run }\n-// { dg-options \"-std=c++1z -fargs-in-order=1\" }\n+// { dg-options \"-std=c++1z\" }\n \n extern \"C\" int printf (const char *, ...);\n void sink(...) { }"}]}