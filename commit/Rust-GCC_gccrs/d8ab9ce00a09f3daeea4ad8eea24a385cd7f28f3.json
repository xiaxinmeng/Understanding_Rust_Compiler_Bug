{"sha": "d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhhYjljZTAwYTA5ZjNkYWVlYTRhZDhlZWEyNGEzODVjZDdmMjhmMw==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2018-04-06T13:16:39Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2018-04-06T13:16:39Z"}, "message": "Reverted commit r254862\n\nFrom-SVN: r259169", "tree": {"sha": "3d79f7c9853eb55d8a31b31e27cd78f473a08bba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d79f7c9853eb55d8a31b31e27cd78f473a08bba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222"}], "stats": {"total": 99, "additions": 12, "deletions": 87}, "files": [{"sha": "36e775ddf1ca781bbe81e13450b97a9bd98af3d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3", "patch": "@@ -1,3 +1,8 @@\n+2018-04-06  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* expr.c (copy_blkmode_to_reg): Revert 254862.\n+\t* doc/sourcebuild.texi (word_mode_no_slow_unalign): Likewise.\n+\n 2018-04-06  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/85244"}, {"sha": "a1a6c9dc384fc1c41e3a21c7756b24c695526319", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3", "patch": "@@ -2297,15 +2297,8 @@ Target supports @code{wchar_t} that is compatible with @code{char32_t}.\n \n @item comdat_group\n Target uses comdat groups.\n-\n-@item weak_undefined\n-Target supports weak undefined symbols.\n-\n-@item word_mode_no_slow_unalign\n-Target does not have slow unaligned access when doing word size accesses.\n @end table\n \n-\n @subsubsection Local to tests in @code{gcc.target/i386}\n \n @table @code"}, {"sha": "5e3d9a5bdfb696c50ee38ec1b155d5a9091e026e", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3", "patch": "@@ -2782,9 +2782,7 @@ copy_blkmode_to_reg (machine_mode mode_in, tree src)\n \n   n_regs = (bytes + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n   dst_words = XALLOCAVEC (rtx, n_regs);\n-  bitsize = BITS_PER_WORD;\n-  if (targetm.slow_unaligned_access (word_mode, TYPE_ALIGN (TREE_TYPE (src))))\n-    bitsize = MIN (TYPE_ALIGN (TREE_TYPE (src)), BITS_PER_WORD);\n+  bitsize = MIN (TYPE_ALIGN (TREE_TYPE (src)), BITS_PER_WORD);\n \n   /* Copy the structure BITSIZE bits at a time.  */\n   for (bitpos = 0, xbitpos = padding_correction;"}, {"sha": "0ea9f6475171b68c3c7e1d82533bd1ef407d9b78", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3", "patch": "@@ -1,3 +1,9 @@\n+2018-04-06  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.dg/struct-simple.c: Revert r254862.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_word_mode_no_slow_unalign): Likewise.\n+\n 2018-04-06  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/85244"}, {"sha": "17b956022e4efb37044c7a74cc8baa9fb779221a", "filename": "gcc/testsuite/gcc.dg/struct-simple.c", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-simple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-simple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-simple.c?ref=ef2e5ec2d4dbcd865bd62fd887b89e7a42f66222", "patch": "@@ -1,52 +0,0 @@\n-/* { dg-do-run } */\n-/* { dg-require-effective-target word_mode_no_slow_unalign } */\n-/* { dg-additional-options \"-fdump-rtl-final\" } */\n-\n-/* Copyright 1996, 1999, 2007 Free Software Foundation, Inc.\n-\n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3 of the License, or\n-   (at your option) any later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.\n-\n-   Please email any bugs, comments, and/or additions to this file to:\n-   bug-gdb@prep.ai.mit.edu  */\n-\n-#include <stdio.h>\n-\n-struct struct3 { char a, b, c; };\n-struct struct3 foo3 = { 'A', 'B', 'C'},  L3;\n-\n-struct struct3  fun3()\n-{\n-  return foo3;\n-}\n-\n-#ifdef PROTOTYPES\n-void Fun3(struct struct3 foo3)\n-#else\n-void Fun3(foo3)\n-     struct struct3 foo3;\n-#endif\n-{\n-  L3 = foo3;\n-}\n-\n-int main()\n-{\n-  struct struct3 x = fun3();\n-\n-  printf(\"a:%c, b:%c, c:%c\\n\", x.a, x.b, x.c);\n-}\n-\n-/* { dg-final { scan-rtl-dump-not {zero_extract:.+\\[\\s*foo3\\s*\\]} \"final\" } } */\n-"}, {"sha": "50665dfd30e164023031d469f8386c9d321c8556", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=d8ab9ce00a09f3daeea4ad8eea24a385cd7f28f3", "patch": "@@ -6364,31 +6364,6 @@ proc check_effective_target_unaligned_stack { } {\n     return $et_unaligned_stack_saved\n }\n \n-# Return 1 if the target plus current options does not have\n-# slow unaligned access when using word size accesses.\n-#\n-# This won't change for different subtargets so cache the result.\n-\n-proc check_effective_target_word_mode_no_slow_unalign { } {\n-    global et_word_mode_no_slow_unalign_saved\n-    global et_index\n-\n-    if [info exists et_word_mode_no_slow_unalign_saved($et_index)] {\n-        verbose \"check_effective_target_word_mode_no_slow_unalign: \\\n-                 using cached result\" 2\n-    } else {\n-        set et_word_mode_no_slow_unalign_saved($et_index) 0\n-        if { [is-effective-target non_strict_align]\n-\t     && !([istarget arm*-*-*])\n-           } {\n-            set et_word_mode_no_slow_unalign_saved($et_index) 1\n-        }\n-    }\n-    verbose \"check_effective_target_word_mode_no_slow_unalign:\\\n-             returning $et_word_mode_no_slow_unalign_saved($et_index)\" 2\n-    return $et_word_mode_no_slow_unalign_saved($et_index)\n-}\n-\n # Return 1 if the target plus current options does not support a vector\n # alignment mechanism, 0 otherwise.\n #"}]}