{"sha": "c0f39947f8683a23223c85277cd4766b48f0db2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBmMzk5NDdmODY4M2EyMzIyM2M4NTI3N2NkNDc2NmI0OGYwZGIyZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-11-16T12:17:51Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-11-16T12:17:51Z"}, "message": "rs6000.c (rs6000_emit_probe_stack_rang): Adjust.\n\n\t* config/rs6000/rs6000.c (rs6000_emit_probe_stack_rang): Adjust.\n\t(output_probe_stack_range): Rotate the loop and simplify.\n\nFrom-SVN: r230413", "tree": {"sha": "c92c5dedb4292b972e908762801483ceeab67240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c92c5dedb4292b972e908762801483ceeab67240"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0f39947f8683a23223c85277cd4766b48f0db2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f39947f8683a23223c85277cd4766b48f0db2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0f39947f8683a23223c85277cd4766b48f0db2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f39947f8683a23223c85277cd4766b48f0db2d/comments", "author": null, "committer": null, "parents": [{"sha": "16c6f54ffa4bcb6321f998723d2ef1da73b44499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c6f54ffa4bcb6321f998723d2ef1da73b44499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c6f54ffa4bcb6321f998723d2ef1da73b44499"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "04c4d5e5fc11528fc77852334e482ad932264efe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0f39947f8683a23223c85277cd4766b48f0db2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0f39947f8683a23223c85277cd4766b48f0db2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0f39947f8683a23223c85277cd4766b48f0db2d", "patch": "@@ -1,3 +1,8 @@\n+2015-11-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_probe_stack_rang): Adjust.\n+\t(output_probe_stack_range): Rotate the loop and simplify.\n+\n 2015-11-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/i386/i386.c (ix86_adjust_stack_and_probe): Adjust and use"}, {"sha": "5d0a022aab407bb43a13f43bd7c1808a95f2dc30", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0f39947f8683a23223c85277cd4766b48f0db2d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0f39947f8683a23223c85277cd4766b48f0db2d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c0f39947f8683a23223c85277cd4766b48f0db2d", "patch": "@@ -24233,11 +24233,12 @@ rs6000_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n \n       /* Step 3: the loop\n \n-\t while (TEST_ADDR != LAST_ADDR)\n+\t do\n \t   {\n \t     TEST_ADDR = TEST_ADDR + PROBE_INTERVAL\n \t     probe at TEST_ADDR\n \t   }\n+\t while (TEST_ADDR != LAST_ADDR)\n \n \t probes at FIRST + N * PROBE_INTERVAL for values of N from 1\n \t until it is equal to ROUNDED_SIZE.  */\n@@ -24263,39 +24264,35 @@ const char *\n output_probe_stack_range (rtx reg1, rtx reg2)\n {\n   static int labelno = 0;\n-  char loop_lab[32], end_lab[32];\n+  char loop_lab[32];\n   rtx xops[2];\n \n-  ASM_GENERATE_INTERNAL_LABEL (loop_lab, \"LPSRL\", labelno);\n-  ASM_GENERATE_INTERNAL_LABEL (end_lab, \"LPSRE\", labelno++);\n+  ASM_GENERATE_INTERNAL_LABEL (loop_lab, \"LPSRL\", labelno++);\n \n+  /* Loop.  */\n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, loop_lab);\n \n-  /* Jump to END_LAB if TEST_ADDR == LAST_ADDR.  */\n+  /* TEST_ADDR = TEST_ADDR + PROBE_INTERVAL.  */\n   xops[0] = reg1;\n+  xops[1] = GEN_INT (-PROBE_INTERVAL);\n+  output_asm_insn (\"addi %0,%0,%1\", xops);\n+\n+  /* Probe at TEST_ADDR.  */\n+  xops[1] = gen_rtx_REG (Pmode, 0);\n+  output_asm_insn (\"stw %1,0(%0)\", xops);\n+\n+  /* Test if TEST_ADDR == LAST_ADDR.  */\n   xops[1] = reg2;\n   if (TARGET_64BIT)\n     output_asm_insn (\"cmpd 0,%0,%1\", xops);\n   else\n     output_asm_insn (\"cmpw 0,%0,%1\", xops);\n \n-  fputs (\"\\tbeq 0,\", asm_out_file);\n-  assemble_name_raw (asm_out_file, end_lab);\n-  fputc ('\\n', asm_out_file);\n-\n-  /* TEST_ADDR = TEST_ADDR + PROBE_INTERVAL.  */\n-  xops[1] = GEN_INT (-PROBE_INTERVAL);\n-  output_asm_insn (\"addi %0,%0,%1\", xops);\n-\n-  /* Probe at TEST_ADDR and branch.  */\n-  xops[1] = gen_rtx_REG (Pmode, 0);\n-  output_asm_insn (\"stw %1,0(%0)\", xops);\n-  fprintf (asm_out_file, \"\\tb \");\n+  /* Branch.  */\n+  fputs (\"\\tbne 0,\", asm_out_file);\n   assemble_name_raw (asm_out_file, loop_lab);\n   fputc ('\\n', asm_out_file);\n \n-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, end_lab);\n-\n   return \"\";\n }\n "}]}