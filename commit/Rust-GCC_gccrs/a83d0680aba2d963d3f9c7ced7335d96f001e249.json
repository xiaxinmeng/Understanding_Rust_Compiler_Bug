{"sha": "a83d0680aba2d963d3f9c7ced7335d96f001e249", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgzZDA2ODBhYmEyZDk2M2QzZjljN2NlZDczMzVkOTZmMDAxZTI0OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-11T12:40:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-11T12:40:38Z"}, "message": "[multiple changes]\n\n2017-09-11  Arnaud Charlet  <charlet@adacore.com>\n\n\t* doc/gnat_ugn/the_gnat_compilation_model.rst: Fix sphinx warning.\n\t* doc/gnat_ugn/platform_specific_information.rst: Remove doc\n\tfor no longer supported platforms.\n\t* doc/gnat_ugn/gnat_and_program_execution.rst: Added detailed\n\tdescription of the semantics for dimensionality analysis.\n\t* gnat_ugn.texi: Regenerated.\n\n2017-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* freeze.adb (Has_Incomplete_Compoent): Delete.\n\t(Freeze_Profile):\n\tDo not inhibit the freezing of the profile of an expression\n\tfunction here.\n\t(Freeze_Subprogram): Do not re-create extra formals.\n\t* sem_ch6.adb (Analyze_Expression_Function): Always\n\tpre-analyze the expression if the function is not a completion.\n\t(Analyze_Subprogram_Body_Helper): For the body generated\n\tfrom an expression function that is not a completion, do\n\tnot freeze the profile and temporary mask the types declared\n\toutside the expression that are not yet frozen.\n\t* sem_res.adb (Rewrite_Renamed_Operator): Also bail out if invoked\n\tduring the pre-analysis of an expression function.\n\nFrom-SVN: r251978", "tree": {"sha": "b5277776b097c13cdc007ad8160ab1bccf70e584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5277776b097c13cdc007ad8160ab1bccf70e584"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a83d0680aba2d963d3f9c7ced7335d96f001e249", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a83d0680aba2d963d3f9c7ced7335d96f001e249", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a83d0680aba2d963d3f9c7ced7335d96f001e249", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a83d0680aba2d963d3f9c7ced7335d96f001e249/comments", "author": null, "committer": null, "parents": [{"sha": "c65e7627be6a3b5c214c10add5214971c8ddf0ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65e7627be6a3b5c214c10add5214971c8ddf0ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c65e7627be6a3b5c214c10add5214971c8ddf0ef"}], "stats": {"total": 1221, "additions": 596, "deletions": 625}, "files": [{"sha": "0e89c840cfc62fdae53ea872e504e5630aed9f57", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83d0680aba2d963d3f9c7ced7335d96f001e249/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83d0680aba2d963d3f9c7ced7335d96f001e249/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a83d0680aba2d963d3f9c7ced7335d96f001e249", "patch": "@@ -1,3 +1,28 @@\n+2017-09-11  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* doc/gnat_ugn/the_gnat_compilation_model.rst: Fix sphinx warning.\n+\t* doc/gnat_ugn/platform_specific_information.rst: Remove doc\n+\tfor no longer supported platforms.\n+\t* doc/gnat_ugn/gnat_and_program_execution.rst: Added detailed\n+\tdescription of the semantics for dimensionality analysis.\n+\t* gnat_ugn.texi: Regenerated.\n+\n+2017-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.adb (Has_Incomplete_Compoent): Delete.\n+\t(Freeze_Profile):\n+\tDo not inhibit the freezing of the profile of an expression\n+\tfunction here.\n+\t(Freeze_Subprogram): Do not re-create extra formals.\n+\t* sem_ch6.adb (Analyze_Expression_Function): Always\n+\tpre-analyze the expression if the function is not a completion.\n+\t(Analyze_Subprogram_Body_Helper): For the body generated\n+\tfrom an expression function that is not a completion, do\n+\tnot freeze the profile and temporary mask the types declared\n+\toutside the expression that are not yet frozen.\n+\t* sem_res.adb (Rewrite_Renamed_Operator): Also bail out if invoked\n+\tduring the pre-analysis of an expression function.\n+\n 2017-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (enum standard_datatypes): Minor tweak."}, {"sha": "952cc3d803c41ef2f37ccccadb4baa12e346338a", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83d0680aba2d963d3f9c7ced7335d96f001e249/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83d0680aba2d963d3f9c7ced7335d96f001e249/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=a83d0680aba2d963d3f9c7ced7335d96f001e249", "patch": "@@ -3545,6 +3545,134 @@ then the output includes:\n        Final velocity: 98.10 m.s**(-1)\n \n \n+  .. index:: Dimensionable type\n+  .. index:: Dimensioned subtype\n+\n+The type ``Mks_Type`` is said to be a *dimensionable type* since it has a\n+``Dimension_System`` aspect, and the subtypes ``Length``, ``Mass``, etc.,\n+are said to be *dimensioned subtypes* since each one has a ``Dimension``\n+aspect.\n+\n+  .. index:: Dimension Vector (for a dimensioned subtype)\n+  .. index:: Dimension aspect\n+  .. index:: Dimension_System aspect\n+  \n+The ``Dimension`` aspect of a dimensioned subtype ``S`` defines a mapping\n+from the base type's Unit_Names to integer (or, more generally, rational)\n+values. This mapping is the *dimension vector* (also referred to as the\n+*dimensionality*) for that subtype, denoted by ``DV(S)``, and thus for each\n+object of that subtype. Intuitively, the value specified for each\n+``Unit_Name`` is the exponent associated with that unit; a zero value\n+means that the unit is not used. For example:\n+\n+   .. code-block:: ada\n+\n+      declare\n+         Acc : Acceleration;\n+         ...\n+      begin\n+         ...\n+      end;\n+\n+Here ``DV(Acc)`` = ``DV(Acceleration)`` =\n+``(Meter=>1, Kilogram=>0, Second => -2, Ampere=>0, Kelvin=>0, Mole=>0, Candela => 0)``.\n+Symbolically, we can express this as ``Meter / Second**2``. \n+\n+The dimension vector of an arithmetic expression is synthesized from the\n+dimension vectors of its components, with compile-time dimensionality checks\n+that help prevent mismatches such as using an ``Acceleration`` where a\n+``Length`` is required.\n+\n+The dimension vector of the result of an arithmetic expression *expr*, or\n+:samp:`DV({expr})`, is defined as follows, assuming conventional\n+mathematical definitions for the vector operations that are used:\n+\n+* If *expr* is of the type *universal_real*, or is not of a dimensioned subtype,\n+  then *expr* is dimensionless; :samp:`DV({expr})` is the empty vector.\n+\n+* :samp:`DV({op expr})`, where *op* is a unary operator, is :samp:`DV({expr})`\n+\n+* :samp:`DV({expr1 op expr2})` where *op* is \"+\" or \"-\" is :samp:`DV({expr1})`\n+  provided that :samp:`DV({expr1})` = :samp:`DV({expr2})`. \n+  If this condition is not met then the construct is illegal.\n+\n+* :samp:`DV({expr1} * {expr2})` is :samp:`DV({expr1})` + :samp:`DV({expr2})`,\n+  and :samp:`DV({expr1} / {expr2})` = :samp:`DV({expr1})` - :samp:`DV({expr2})`.\n+  In this context if one of the *expr*\\ s is dimensionless then its empty\n+  dimension vector is treated as ``(others => 0)``.\n+\n+* :samp:`DV({expr} ** {power})` is *power* * :samp:`DV({expr})`,\n+  provided that *power* is a static rational value. If this condition is not\n+  met then the construct is illegal.\n+\n+Note that, by the above rules, it is illegal to use binary \"+\" or \"-\" to\n+combine a dimensioned and dimensionless value.  Thus an expression such as\n+``acc-10.0`` is illegal, where ``acc`` is an object of subtype\n+``Acceleration``.\n+\n+The dimensionality checks for relationals use the same rules as\n+for \"+\" and \"-\"; thus\n+\n+  .. code-block:: ada\n+\n+        acc > 10.0\n+\n+is equivalent to\n+\n+  .. code-block:: ada\n+\n+       acc-10.0 > 0.0\n+\n+and is thus illegal. Analogously a conditional expression\n+requires the same dimension vector for each branch.  \n+\n+The dimension vector of a type conversion :samp:`T({expr})` is defined\n+as follows, based on the nature of ``T``:\n+\n+* If ``T`` is a dimensioned subtype then :samp:`DV(T({expr}))` is ``DV(T)``\n+  provided that either *expr* is dimensionless or\n+  :samp:`DV(T)` = :samp:`DV({expr})`. The conversion is illegal\n+  if *expr* is dimensioned and :samp:`DV({expr})` /= ``DV(T)``.\n+  Note that vector equality does not require that the corresponding\n+  Unit_Names be the same.\n+\n+  As a consequence of the above rule, it is possible to convert between\n+  different dimension systems that follow the same international system\n+  of units, with the seven physical components given in the standard order\n+  (length, mass, time, etc.). Thus a length in meters can be converted to\n+  a length in inches (with a suitable conversion factor) but cannot be\n+  converted, for example, to a mass in pounds.\n+\n+* If ``T`` is the base type for *expr* (and the dimensionless root type of\n+  the dimension system), then :samp:`DV(T({expr}))` is ``DV(expr)``.\n+  Thus, if *expr* is of a dimensioned subtype of ``T``, the conversion may\n+  be regarded as a \"view conversion\" that preserves dimensionality.\n+\n+  This rule makes it possible to write generic code that can be instantiated \n+  with compatible dimensioned subtypes.  The generic unit will contain\n+  conversions that will consequently be present in instantiations, but\n+  conversions to the base type will preserve dimensionality and make it\n+  possible to write generic code that is correct with respect to\n+  dimensionality.\n+\n+* Otherwise (i.e., ``T`` is neither a dimensioned subtype nor a dimensionable\n+  base type), :samp:`DV(T({expr}))` is the empty vector. Thus a dimensioned\n+  value can be explicitly converted to a non-dimensioned subtype, which\n+  of course then escapes dimensionality analysis.\n+\n+The dimension vector for a type qualification :samp:`T'({expr})` is the same\n+as for the type conversion :samp:`T({expr})`.\n+\n+An assignment statement \n+\n+   .. code-block:: ada\n+   \n+         Source := Target;\n+\n+requires ``DV(Source)`` = ``DV(Target)``, and analogously for parameter\n+passing (the dimension vector for the actual parameter must be equal to the\n+dimension vector for the formal parameter).\n+\n \n .. _Stack_Related_Facilities:\n "}, {"sha": "49c14b3114975274b87f660aa1530f118e56804d", "filename": "gcc/ada/doc/gnat_ugn/platform_specific_information.rst", "status": "modified", "additions": 13, "deletions": 134, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83d0680aba2d963d3f9c7ced7335d96f001e249/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83d0680aba2d963d3f9c7ced7335d96f001e249/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst?ref=a83d0680aba2d963d3f9c7ced7335d96f001e249", "patch": "@@ -26,14 +26,9 @@ Run-Time Libraries\n .. index:: Run-time libraries (platform-specific information)\n \n The GNAT run-time implementation may vary with respect to both the\n-underlying threads library and the exception handling scheme.\n-For threads support, one or more of the following are supplied:\n-\n-* **native threads library**, a binding to the thread package from\n-  the underlying operating system\n-\n-* **pthreads library** (Sparc Solaris only), a binding to the Solaris\n-  POSIX thread package\n+underlying threads library and the exception-handling scheme.\n+For threads support, the default run-time will bind to the thread\n+package of the underlying operating system.\n \n For exception handling, either or both of two models are supplied:\n \n@@ -72,45 +67,17 @@ Summary of Run-Time Configurations\n +-----------------+--------------+-------------------------+------------+\n | Platform        | Run-Time     | Tasking                 | Exceptions |\n +=================+==============+=========================+============+\n-| ppc-aix         | rts-native   | native AIX threads      | ZCX        |\n-|                 | (default)    |                         |            |\n-|                 +--------------+-------------------------+------------+\n-|                 | rts-sjlj     | native AIX threads      | SJLJ       |\n-+-----------------+--------------+-------------------------+------------+\n-| sparc-solaris   | rts-native   | native Solaris          | ZCX        |\n-|                 | (default)    | threads library         |            |\n-|                 +--------------+-------------------------+------------+\n-|                 | rts-pthread  | pthread library         | ZCX        |\n-|                 +--------------+-------------------------+------------+\n-|                 | rts-sjlj     | native Solaris          | SJLJ       |\n-|                 |              | threads library         |            |\n-+-----------------+--------------+-------------------------+------------+\n-| sparc64-solaris | rts-native   | native Solaris          | ZCX        |\n-|                 | (default)    | threads library         |            |\n-+-----------------+--------------+-------------------------+------------+\n-| x86-linux       | rts-native   | pthread library         | ZCX        |\n+| GNU/Linux       | rts-native   | pthread library         | ZCX        |\n |                 | (default)    |                         |            |\n |                 +--------------+-------------------------+------------+\n |                 | rts-sjlj     | pthread library         | SJLJ       |\n +-----------------+--------------+-------------------------+------------+\n-| x86-lynx        | rts-native   | native LynxOS threads   | SJLJ       |\n-|                 | (default)    |                         |            |\n-+-----------------+--------------+-------------------------+------------+\n-| x86-solaris     | rts-native   | native Solaris          | ZCX        |\n-|                 | (default)    | threads library         |            |\n-|                 +--------------+-------------------------+------------+\n-|                 | rts-sjlj     | native Solaris          | SJLJ       |\n-|                 |              | threads library         |            |\n-+-----------------+--------------+-------------------------+------------+\n-| x86-windows     | rts-native   | native Win32 threads    | ZCX        |\n+| Windows         | rts-native   | native Win32 threads    | ZCX        |\n |                 | (default)    |                         |            |\n |                 +--------------+-------------------------+------------+\n |                 | rts-sjlj     | native Win32 threads    | SJLJ       |\n +-----------------+--------------+-------------------------+------------+\n-| x86_64-linux    | rts-native   | pthread library         | ZCX        |\n-|                 | (default)    |                         |            |\n-|                 +--------------+-------------------------+------------+\n-|                 | rts-sjlj     | pthread library         | SJLJ       |\n+| Mac OS          | rts-native   | pthread library         | ZCX        |\n +-----------------+--------------+-------------------------+------------+\n \n \n@@ -136,7 +103,7 @@ below explains the differences between the different libraries in terms of\n their thread support.\n \n The default run-time library (when GNAT is installed) is *rts-native*.\n-This default run time is selected by the means of soft links.\n+This default run-time is selected by the means of soft links.\n For example on x86-linux::\n \n    --\n@@ -252,95 +219,7 @@ this in a library package body in your application:\n It gets the effective user id, and if it's not 0 (i.e. root), it raises\n Program_Error.\n \n-\n-.. index:: Solaris Sparc threads libraries\n-\n-.. _Solaris-Specific_Considerations:\n-\n-Solaris-Specific Considerations\n--------------------------------\n-\n-This section addresses some topics related to the various threads libraries\n-on Sparc Solaris.\n-\n-.. index:: rts-pthread threads library\n-\n-.. _Solaris_Threads_Issues:\n-\n-Solaris Threads Issues\n-----------------------\n-\n-GNAT under Solaris/Sparc 32 bits comes with an alternate tasking run-time\n-library based on POSIX threads --- *rts-pthread*.\n-\n-.. index:: PTHREAD_PRIO_INHERIT policy (under rts-pthread)\n-.. index:: PTHREAD_PRIO_PROTECT policy (under rts-pthread)\n-.. index:: pragma Locking_Policy (under rts-pthread)\n-.. index:: Inheritance_Locking (under rts-pthread)\n-.. index:: Ceiling_Locking (under rts-pthread)\n-\n-This run-time library has the advantage of being mostly shared across all\n-POSIX-compliant thread implementations, and it also provides under\n-Solaris |nbsp| 8 the ``PTHREAD_PRIO_INHERIT``\n-and ``PTHREAD_PRIO_PROTECT``\n-semantics that can be selected using the predefined pragma\n-``Locking_Policy``\n-with respectively\n-``Inheritance_Locking`` and ``Ceiling_Locking`` as the policy.\n-\n-As explained above, the native run-time library is based on the Solaris thread\n-library (``libthread``) and is the default library.\n-\n-.. index:: GNAT_PROCESSOR environment variable (on Sparc Solaris)\n-\n-When the Solaris threads library is used (this is the default), programs\n-compiled with GNAT can automatically take advantage of\n-and can thus execute on multiple processors.\n-The user can alternatively specify a processor on which the program should run\n-to emulate a single-processor system. The multiprocessor / uniprocessor choice\n-is made by\n-setting the environment variable :envvar:`GNAT_PROCESSOR`\n-to one of the following:\n-\n-  ========================= ===================================================================\n-  ``GNAT_PROCESSOR`` Value             Effect\n-  ========================= ===================================================================\n-  ``-2``                    Use the default configuration (run the program on all\n-                            available processors) - this is the same as having ``GNAT_PROCESSOR``\n-                            unset\n-  ``-1``                    Let the run-time implementation choose one processor and run the\n-                            program on that processor\n-  ``0 .. Last_Proc``        Run the program on the specified processor.\n-                            ``Last_Proc`` is equal to ``_SC_NPROCESSORS_CONF - 1``\n-                            (where ``_SC_NPROCESSORS_CONF`` is a system variable).\n-  ========================= ===================================================================\n-\n-\n-.. _AIX-Specific_Considerations:\n-\n-AIX-Specific Considerations\n----------------------------\n-\n-.. index:: AIX resolver library\n-\n-On AIX, the resolver library initializes some internal structure on\n-the first call to ``get*by*`` functions, which are used to implement\n-``GNAT.Sockets.Get_Host_By_Name`` and\n-``GNAT.Sockets.Get_Host_By_Address``.\n-If such initialization occurs within an Ada task, and the stack size for\n-the task is the default size, a stack overflow may occur.\n-\n-To avoid this overflow, the user should either ensure that the first call\n-to ``GNAT.Sockets.Get_Host_By_Name`` or\n-``GNAT.Sockets.Get_Host_By_Addrss``\n-occurs in the environment task, or use ``pragma Storage_Size`` to\n-specify a sufficiently large size for the stack of the task that contains\n-this call.\n-\n-\n-.. index:: Windows NT\n-.. index:: Windows 95\n-.. index:: Windows 98\n+.. index:: Windows\n \n .. _Microsoft_Windows_Topics:\n \n@@ -1252,11 +1131,11 @@ Limitations When Using Ada DLLs from Ada\n \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n \n When using Ada DLLs from Ada applications there is a limitation users\n-should be aware of. Because on Windows the GNAT run time is not in a DLL of\n-its own, each Ada DLL includes a part of the GNAT run time. Specifically,\n-each Ada DLL includes the services of the GNAT run time that are necessary\n+should be aware of. Because on Windows the GNAT run-time is not in a DLL of\n+its own, each Ada DLL includes a part of the GNAT run-time. Specifically,\n+each Ada DLL includes the services of the GNAT run-time that are necessary\n to the Ada code inside the DLL. As a result, when an Ada program uses an\n-Ada DLL there are two independent GNAT run times: one in the Ada DLL and\n+Ada DLL there are two independent GNAT run-times: one in the Ada DLL and\n one in the main program.\n \n It is therefore not possible to exchange GNAT run-time objects between the\n@@ -1395,7 +1274,7 @@ initialization routine. Unfortunately, it is not possible to call\n ``adainit`` from the ``DllMain`` if your program has library level\n tasks because access to the ``DllMain`` entry point is serialized by\n the system (that is, only a single thread can execute 'through' it at a\n-time), which means that the GNAT run time will deadlock waiting for the\n+time), which means that the GNAT run-time will deadlock waiting for the\n newly created task to complete its initialization.\n \n "}, {"sha": "8c3b074ec8ddb90b39d1c63031fc590d86389f2a", "filename": "gcc/ada/doc/gnat_ugn/the_gnat_compilation_model.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83d0680aba2d963d3f9c7ced7335d96f001e249/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83d0680aba2d963d3f9c7ced7335d96f001e249/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst?ref=a83d0680aba2d963d3f9c7ced7335d96f001e249", "patch": "@@ -3117,13 +3117,13 @@ Note that although the substitution of strings within a string literal\n is not possible, it is possible to have a symbol whose defined value is\n a string literal. So instead of setting XYZ to ``hello`` and writing:\n \n-.. code-block:: c\n+.. code-block:: ada\n \n      Header : String := \"$XYZ\";\n \n you should set XYZ to ``\"hello\"`` and write:\n \n-.. code-block:: c\n+.. code-block:: ada\n \n      Header : String := $XYZ;\n "}, {"sha": "7ed6ccd8b0751f0c4a3289c1801afea0b630dc68", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 69, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83d0680aba2d963d3f9c7ced7335d96f001e249/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83d0680aba2d963d3f9c7ced7335d96f001e249/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=a83d0680aba2d963d3f9c7ced7335d96f001e249", "patch": "@@ -3423,72 +3423,10 @@ package body Freeze is\n       --------------------\n \n       function Freeze_Profile (E : Entity_Id) return Boolean is\n-         function Has_Incomplete_Component (T : Entity_Id) return Boolean;\n-         --  If a type includes a private component from an enclosing scope it\n-         --  cannot be frozen yet. This can happen in a package nested within\n-         --  another, when freezing an expression function whose profile\n-         --  depends on a type in some outer scope. Those types will be frozen\n-         --  at a later time in the enclosing unit.\n-\n-         ------------------------------\n-         -- Has_Incomplete_Component --\n-         ------------------------------\n-\n-         function Has_Incomplete_Component (T : Entity_Id) return Boolean is\n-            Comp     : Entity_Id;\n-            Comp_Typ : Entity_Id;\n-\n-         begin\n-            if Nkind (N) /= N_Subprogram_Body\n-              or else not Was_Expression_Function (N)\n-            then\n-               return False;\n-\n-            elsif In_Instance then\n-               return False;\n-\n-            elsif Is_Record_Type (T) then\n-               Comp := First_Entity (T);\n-\n-               while Present (Comp) loop\n-                  Comp_Typ := Etype (Comp);\n-\n-                  if Ekind_In (Comp, E_Component, E_Discriminant)\n-                    and then Is_Private_Type (Comp_Typ)\n-                    and then No (Full_View (Comp_Typ))\n-                    and then In_Open_Scopes (Scope (Comp_Typ))\n-                    and then Scope (Comp_Typ) /= Current_Scope\n-                  then\n-                     return True;\n-                  end if;\n-\n-                  Comp := Next_Entity (Comp);\n-               end loop;\n-\n-               return False;\n-\n-            elsif Is_Array_Type (T) then\n-               Comp_Typ := Component_Type (T);\n-\n-               return\n-                 Is_Private_Type (Comp_Typ)\n-                   and then No (Full_View (Comp_Typ))\n-                   and then In_Open_Scopes (Scope (Comp_Typ))\n-                   and then Scope (Comp_Typ) /= Current_Scope;\n-\n-            else\n-               return False;\n-            end if;\n-         end Has_Incomplete_Component;\n-\n-         --  Local variables\n-\n          F_Type    : Entity_Id;\n          R_Type    : Entity_Id;\n          Warn_Node : Node_Id;\n \n-      --  Start of processing for Freeze_Profile\n-\n       begin\n          --  Loop through formals\n \n@@ -3508,12 +3446,6 @@ package body Freeze is\n                Set_Etype (Formal, F_Type);\n             end if;\n \n-            if Has_Incomplete_Component (F_Type) then\n-               Set_Is_Frozen (E, False);\n-               Result := No_List;\n-               return False;\n-            end if;\n-\n             if not From_Limited_With (F_Type) then\n                Freeze_And_Append (F_Type, N, Result);\n             end if;\n@@ -8302,7 +8234,9 @@ package body Freeze is\n       --  that we know the convention.\n \n       if not Has_Foreign_Convention (E) then\n-         Create_Extra_Formals (E);\n+         if No (Extra_Formals (E)) then\n+            Create_Extra_Formals (E);\n+         end if;\n          Set_Mechanisms (E);\n \n          --  If this is convention Ada and a Valued_Procedure, that's odd"}, {"sha": "97f461a5acea4b2c06e45b4bd19736dd2694d80e", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 295, "deletions": 413, "changes": 708, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83d0680aba2d963d3f9c7ced7335d96f001e249/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83d0680aba2d963d3f9c7ced7335d96f001e249/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=a83d0680aba2d963d3f9c7ced7335d96f001e249", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , Sep 08, 2017\n+GNAT User's Guide for Native Platforms , Sep 11, 2017\n \n AdaCore\n \n@@ -456,9 +456,6 @@ Run-Time Libraries\n Specifying a Run-Time Library\n \n * Choosing the Scheduling Policy:: \n-* Solaris-Specific Considerations:: \n-* Solaris Threads Issues:: \n-* AIX-Specific Considerations:: \n \n Microsoft Windows Topics\n \n@@ -5086,9 +5083,23 @@ preprocessing in a file, either run @code{gnatprep}\n in standalone mode or else supply the @code{-gnateG} switch\n (described below) to the compiler.\n \n-The @code{gnatmake} switch @code{-s} should be used with integrated\n-preprocessing; otherwise the use of a different preprocessor data file\n-without changing the sources will not cause recompilation.\n+When using project files:\n+\n+@quotation\n+\n+\n+@itemize *\n+\n+@item \n+the builder switch @code{-x} should be used if any Ada source is\n+compiled with @code{gnatep=}, so that the compiler finds the\n+@emph{preprocessor data file}.\n+\n+@item \n+the preprocessing data file and the symbol definition files should be\n+located in the source directories of the project.\n+@end itemize\n+@end quotation\n \n Note that the @code{gnatmake} switch @code{-m} will almost\n always trigger recompilation for sources that are preprocessed,\n@@ -22811,8 +22822,170 @@ then the output includes:\n @example\n Final velocity: 98.10 m.s**(-1)\n @end example\n+\n+@geindex Dimensionable type\n+\n+@geindex Dimensioned subtype\n+@end quotation\n+\n+The type @code{Mks_Type} is said to be a @emph{dimensionable type} since it has a\n+@code{Dimension_System} aspect, and the subtypes @code{Length}, @code{Mass}, etc.,\n+are said to be @emph{dimensioned subtypes} since each one has a @code{Dimension}\n+aspect.\n+\n+@quotation\n+\n+@geindex Dimension Vector (for a dimensioned subtype)\n+\n+@geindex Dimension aspect\n+\n+@geindex Dimension_System aspect\n+@end quotation\n+\n+The @code{Dimension} aspect of a dimensioned subtype @code{S} defines a mapping\n+from the base type's Unit_Names to integer (or, more generally, rational)\n+values. This mapping is the @emph{dimension vector} (also referred to as the\n+@emph{dimensionality}) for that subtype, denoted by @code{DV(S)}, and thus for each\n+object of that subtype. Intuitively, the value specified for each\n+@code{Unit_Name} is the exponent associated with that unit; a zero value\n+means that the unit is not used. For example:\n+\n+@quotation\n+\n+@example\n+declare\n+   Acc : Acceleration;\n+   ...\n+begin\n+   ...\n+end;\n+@end example\n+@end quotation\n+\n+Here @code{DV(Acc)} = @code{DV(Acceleration)} =\n+@code{(Meter=>1, Kilogram=>0, Second => -2, Ampere=>0, Kelvin=>0, Mole=>0, Candela => 0)}.\n+Symbolically, we can express this as @code{Meter / Second**2}.\n+\n+The dimension vector of an arithmetic expression is synthesized from the\n+dimension vectors of its components, with compile-time dimensionality checks\n+that help prevent mismatches such as using an @code{Acceleration} where a\n+@code{Length} is required.\n+\n+The dimension vector of the result of an arithmetic expression @emph{expr}, or\n+@code{DV(@emph{expr})}, is defined as follows, assuming conventional\n+mathematical definitions for the vector operations that are used:\n+\n+\n+@itemize *\n+\n+@item \n+If @emph{expr} is of the type @emph{universal_real}, or is not of a dimensioned subtype,\n+then @emph{expr} is dimensionless; @code{DV(@emph{expr})} is the empty vector.\n+\n+@item \n+@code{DV(@emph{op expr})}, where @emph{op} is a unary operator, is @code{DV(@emph{expr})}\n+\n+@item \n+@code{DV(@emph{expr1 op expr2})} where @emph{op} is \"+\" or \"-\" is @code{DV(@emph{expr1})}\n+provided that @code{DV(@emph{expr1})} = @code{DV(@emph{expr2})}.\n+If this condition is not met then the construct is illegal.\n+\n+@item \n+@code{DV(@emph{expr1} * @emph{expr2})} is @code{DV(@emph{expr1})} + @code{DV(@emph{expr2})},\n+and @code{DV(@emph{expr1} / @emph{expr2})} = @code{DV(@emph{expr1})} - @code{DV(@emph{expr2})}.\n+In this context if one of the @emph{expr}s is dimensionless then its empty\n+dimension vector is treated as @code{(others => 0)}.\n+\n+@item \n+@code{DV(@emph{expr} ** @emph{power})} is @emph{power} * @code{DV(@emph{expr})},\n+provided that @emph{power} is a static rational value. If this condition is not\n+met then the construct is illegal.\n+@end itemize\n+\n+Note that, by the above rules, it is illegal to use binary \"+\" or \"-\" to\n+combine a dimensioned and dimensionless value.  Thus an expression such as\n+@code{acc-10.0} is illegal, where @code{acc} is an object of subtype\n+@code{Acceleration}.\n+\n+The dimensionality checks for relationals use the same rules as\n+for \"+\" and \"-\"; thus\n+\n+@quotation\n+\n+@example\n+acc > 10.0\n+@end example\n+@end quotation\n+\n+is equivalent to\n+\n+@quotation\n+\n+@example\n+acc-10.0 > 0.0\n+@end example\n @end quotation\n \n+and is thus illegal. Analogously a conditional expression\n+requires the same dimension vector for each branch.\n+\n+The dimension vector of a type conversion @code{T(@emph{expr})} is defined\n+as follows, based on the nature of @code{T}:\n+\n+\n+@itemize *\n+\n+@item \n+If @code{T} is a dimensioned subtype then @code{DV(T(@emph{expr}))} is @code{DV(T)}\n+provided that either @emph{expr} is dimensionless or\n+@code{DV(T)} = @code{DV(@emph{expr})}. The conversion is illegal\n+if @emph{expr} is dimensioned and @code{DV(@emph{expr})} /= @code{DV(T)}.\n+Note that vector equality does not require that the corresponding\n+Unit_Names be the same.\n+\n+As a consequence of the above rule, it is possible to convert between\n+different dimension systems that follow the same international system\n+of units, with the seven physical components given in the standard order\n+(length, mass, time, etc.). Thus a length in meters can be converted to\n+a length in inches (with a suitable conversion factor) but cannot be\n+converted, for example, to a mass in pounds.\n+\n+@item \n+If @code{T} is the base type for @emph{expr} (and the dimensionless root type of\n+the dimension system), then @code{DV(T(@emph{expr}))} is @code{DV(expr)}.\n+Thus, if @emph{expr} is of a dimensioned subtype of @code{T}, the conversion may\n+be regarded as a \"view conversion\" that preserves dimensionality.\n+\n+This rule makes it possible to write generic code that can be instantiated\n+with compatible dimensioned subtypes.  The generic unit will contain\n+conversions that will consequently be present in instantiations, but\n+conversions to the base type will preserve dimensionality and make it\n+possible to write generic code that is correct with respect to\n+dimensionality.\n+\n+@item \n+Otherwise (i.e., @code{T} is neither a dimensioned subtype nor a dimensionable\n+base type), @code{DV(T(@emph{expr}))} is the empty vector. Thus a dimensioned\n+value can be explicitly converted to a non-dimensioned subtype, which\n+of course then escapes dimensionality analysis.\n+@end itemize\n+\n+The dimension vector for a type qualification @code{T'(@emph{expr})} is the same\n+as for the type conversion @code{T(@emph{expr})}.\n+\n+An assignment statement\n+\n+@quotation\n+\n+@example\n+Source := Target;\n+@end example\n+@end quotation\n+\n+requires @code{DV(Source)} = @code{DV(Target)}, and analogously for parameter\n+passing (the dimension vector for the actual parameter must be equal to the\n+dimension vector for the formal parameter).\n+\n @node Stack Related Facilities,Memory Management Issues,Performing Dimensionality Analysis in GNAT,GNAT and Program Execution\n @anchor{gnat_ugn/gnat_and_program_execution stack-related-facilities}@anchor{29}@anchor{gnat_ugn/gnat_and_program_execution id62}@anchor{16c}\n @section Stack Related Facilities\n@@ -23303,20 +23476,9 @@ topics related to the GNAT implementation on Windows and Mac OS.\n @geindex Run-time libraries (platform-specific information)\n \n The GNAT run-time implementation may vary with respect to both the\n-underlying threads library and the exception handling scheme.\n-For threads support, one or more of the following are supplied:\n-\n-\n-@itemize *\n-\n-@item \n-@strong{native threads library}, a binding to the thread package from\n-the underlying operating system\n-\n-@item \n-@strong{pthreads library} (Sparc Solaris only), a binding to the Solaris\n-POSIX thread package\n-@end itemize\n+underlying threads library and the exception-handling scheme.\n+For threads support, the default run-time will bind to the thread\n+package of the underlying operating system.\n \n For exception handling, either or both of two models are supplied:\n \n@@ -23388,97 +23550,7 @@ Exceptions\n \n @item\n \n-ppc-aix\n-\n-@tab\n-\n-rts-native\n-(default)\n-\n-@tab\n-\n-native AIX threads\n-\n-@tab\n-\n-ZCX\n-\n-@item\n-\n-rts-sjlj\n-\n-@tab\n-\n-native AIX threads\n-\n-@tab\n-\n-SJLJ\n-\n-@item\n-\n-sparc-solaris\n-\n-@tab\n-\n-rts-native\n-(default)\n-\n-@tab\n-\n-native Solaris\n-threads library\n-\n-@tab\n-\n-ZCX\n-\n-@item\n-\n-rts-pthread\n-\n-@tab\n-\n-pthread library\n-\n-@tab\n-\n-ZCX\n-\n-@item\n-\n-rts-sjlj\n-\n-@tab\n-\n-native Solaris\n-threads library\n-\n-@tab\n-\n-SJLJ\n-\n-@item\n-\n-sparc64-solaris\n-\n-@tab\n-\n-rts-native\n-(default)\n-\n-@tab\n-\n-native Solaris\n-threads library\n-\n-@tab\n-\n-ZCX\n-\n-@item\n-\n-x86-linux\n+GNU/Linux\n \n @tab\n \n@@ -23507,55 +23579,7 @@ SJLJ\n \n @item\n \n-x86-lynx\n-\n-@tab\n-\n-rts-native\n-(default)\n-\n-@tab\n-\n-native LynxOS threads\n-\n-@tab\n-\n-SJLJ\n-\n-@item\n-\n-x86-solaris\n-\n-@tab\n-\n-rts-native\n-(default)\n-\n-@tab\n-\n-native Solaris\n-threads library\n-\n-@tab\n-\n-ZCX\n-\n-@item\n-\n-rts-sjlj\n-\n-@tab\n-\n-native Solaris\n-threads library\n-\n-@tab\n-\n-SJLJ\n-\n-@item\n-\n-x86-windows\n+Windows\n \n @tab\n \n@@ -23584,12 +23608,11 @@ SJLJ\n \n @item\n \n-x86_64-linux\n+Mac OS\n \n @tab\n \n rts-native\n-(default)\n \n @tab\n \n@@ -23599,18 +23622,6 @@ pthread library\n \n ZCX\n \n-@item\n-\n-rts-sjlj\n-\n-@tab\n-\n-pthread library\n-\n-@tab\n-\n-SJLJ\n-\n @end multitable\n \n \n@@ -23638,7 +23649,7 @@ below explains the differences between the different libraries in terms of\n their thread support.\n \n The default run-time library (when GNAT is installed) is @emph{rts-native}.\n-This default run time is selected by the means of soft links.\n+This default run-time is selected by the means of soft links.\n For example on x86-linux:\n \n @example\n@@ -23713,13 +23724,10 @@ achieved by using the @code{--RTS} switch, e.g., @code{--RTS=sjlj}\n \n @menu\n * Choosing the Scheduling Policy:: \n-* Solaris-Specific Considerations:: \n-* Solaris Threads Issues:: \n-* AIX-Specific Considerations:: \n \n @end menu\n \n-@node Choosing the Scheduling Policy,Solaris-Specific Considerations,,Specifying a Run-Time Library\n+@node Choosing the Scheduling Policy,,,Specifying a Run-Time Library\n @anchor{gnat_ugn/platform_specific_information id5}@anchor{1d9}\n @subsection Choosing the Scheduling Policy\n \n@@ -23774,136 +23782,10 @@ Ignore : constant Boolean :=\n It gets the effective user id, and if it's not 0 (i.e. root), it raises\n Program_Error.\n \n-@geindex Solaris Sparc threads libraries\n-\n-@node Solaris-Specific Considerations,Solaris Threads Issues,Choosing the Scheduling Policy,Specifying a Run-Time Library\n-@anchor{gnat_ugn/platform_specific_information id6}@anchor{1da}@anchor{gnat_ugn/platform_specific_information solaris-specific-considerations}@anchor{1db}\n-@subsection Solaris-Specific Considerations\n-\n-\n-This section addresses some topics related to the various threads libraries\n-on Sparc Solaris.\n-\n-@geindex rts-pthread threads library\n-\n-@node Solaris Threads Issues,AIX-Specific Considerations,Solaris-Specific Considerations,Specifying a Run-Time Library\n-@anchor{gnat_ugn/platform_specific_information id7}@anchor{1dc}@anchor{gnat_ugn/platform_specific_information solaris-threads-issues}@anchor{1dd}\n-@subsection Solaris Threads Issues\n-\n-\n-GNAT under Solaris/Sparc 32 bits comes with an alternate tasking run-time\n-library based on POSIX threads --- @emph{rts-pthread}.\n-\n-@geindex PTHREAD_PRIO_INHERIT policy (under rts-pthread)\n-\n-@geindex PTHREAD_PRIO_PROTECT policy (under rts-pthread)\n-\n-@geindex pragma Locking_Policy (under rts-pthread)\n-\n-@geindex Inheritance_Locking (under rts-pthread)\n-\n-@geindex Ceiling_Locking (under rts-pthread)\n-\n-This run-time library has the advantage of being mostly shared across all\n-POSIX-compliant thread implementations, and it also provides under\n-Solaris\u00a08 the @code{PTHREAD_PRIO_INHERIT}\n-and @code{PTHREAD_PRIO_PROTECT}\n-semantics that can be selected using the predefined pragma\n-@code{Locking_Policy}\n-with respectively\n-@code{Inheritance_Locking} and @code{Ceiling_Locking} as the policy.\n-\n-As explained above, the native run-time library is based on the Solaris thread\n-library (@code{libthread}) and is the default library.\n-\n-@geindex GNAT_PROCESSOR environment variable (on Sparc Solaris)\n-\n-When the Solaris threads library is used (this is the default), programs\n-compiled with GNAT can automatically take advantage of\n-and can thus execute on multiple processors.\n-The user can alternatively specify a processor on which the program should run\n-to emulate a single-processor system. The multiprocessor / uniprocessor choice\n-is made by\n-setting the environment variable \n-@geindex GNAT_PROCESSOR\n-@geindex environment variable; GNAT_PROCESSOR\n-@code{GNAT_PROCESSOR}\n-to one of the following:\n-\n-@quotation\n-\n-\n-@multitable {xxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} \n-@headitem\n-\n-@code{GNAT_PROCESSOR} Value\n-\n-@tab\n-\n-Effect\n-\n-@item\n-\n-@code{-2}\n-\n-@tab\n-\n-Use the default configuration (run the program on all\n-available processors) - this is the same as having @code{GNAT_PROCESSOR}\n-unset\n-\n-@item\n-\n-@code{-1}\n-\n-@tab\n-\n-Let the run-time implementation choose one processor and run the\n-program on that processor\n-\n-@item\n-\n-@code{0 .. Last_Proc}\n-\n-@tab\n-\n-Run the program on the specified processor.\n-@code{Last_Proc} is equal to @code{_SC_NPROCESSORS_CONF - 1}\n-(where @code{_SC_NPROCESSORS_CONF} is a system variable).\n-\n-@end multitable\n-\n-@end quotation\n-\n-@node AIX-Specific Considerations,,Solaris Threads Issues,Specifying a Run-Time Library\n-@anchor{gnat_ugn/platform_specific_information aix-specific-considerations}@anchor{1de}@anchor{gnat_ugn/platform_specific_information id8}@anchor{1df}\n-@subsection AIX-Specific Considerations\n-\n-\n-@geindex AIX resolver library\n-\n-On AIX, the resolver library initializes some internal structure on\n-the first call to @code{get*by*} functions, which are used to implement\n-@code{GNAT.Sockets.Get_Host_By_Name} and\n-@code{GNAT.Sockets.Get_Host_By_Address}.\n-If such initialization occurs within an Ada task, and the stack size for\n-the task is the default size, a stack overflow may occur.\n-\n-To avoid this overflow, the user should either ensure that the first call\n-to @code{GNAT.Sockets.Get_Host_By_Name} or\n-@code{GNAT.Sockets.Get_Host_By_Addrss}\n-occurs in the environment task, or use @code{pragma Storage_Size} to\n-specify a sufficiently large size for the stack of the task that contains\n-this call.\n-\n-@geindex Windows NT\n-\n-@geindex Windows 95\n-\n-@geindex Windows 98\n+@geindex Windows\n \n @node Microsoft Windows Topics,Mac OS Topics,Specifying a Run-Time Library,Platform-Specific Information\n-@anchor{gnat_ugn/platform_specific_information microsoft-windows-topics}@anchor{2c}@anchor{gnat_ugn/platform_specific_information id9}@anchor{1e0}\n+@anchor{gnat_ugn/platform_specific_information id6}@anchor{1da}@anchor{gnat_ugn/platform_specific_information microsoft-windows-topics}@anchor{2c}\n @section Microsoft Windows Topics\n \n \n@@ -23926,7 +23808,7 @@ platforms.\n @end menu\n \n @node Using GNAT on Windows,Using a network installation of GNAT,,Microsoft Windows Topics\n-@anchor{gnat_ugn/platform_specific_information using-gnat-on-windows}@anchor{1e1}@anchor{gnat_ugn/platform_specific_information id10}@anchor{1e2}\n+@anchor{gnat_ugn/platform_specific_information using-gnat-on-windows}@anchor{1db}@anchor{gnat_ugn/platform_specific_information id7}@anchor{1dc}\n @subsection Using GNAT on Windows\n \n \n@@ -24003,7 +23885,7 @@ uninstall or integrate different GNAT products.\n @end itemize\n \n @node Using a network installation of GNAT,CONSOLE and WINDOWS subsystems,Using GNAT on Windows,Microsoft Windows Topics\n-@anchor{gnat_ugn/platform_specific_information id11}@anchor{1e3}@anchor{gnat_ugn/platform_specific_information using-a-network-installation-of-gnat}@anchor{1e4}\n+@anchor{gnat_ugn/platform_specific_information id8}@anchor{1dd}@anchor{gnat_ugn/platform_specific_information using-a-network-installation-of-gnat}@anchor{1de}\n @subsection Using a network installation of GNAT\n \n \n@@ -24030,7 +23912,7 @@ transfer of large amounts of data across the network and will likely cause\n serious performance penalty.\n \n @node CONSOLE and WINDOWS subsystems,Temporary Files,Using a network installation of GNAT,Microsoft Windows Topics\n-@anchor{gnat_ugn/platform_specific_information id12}@anchor{1e5}@anchor{gnat_ugn/platform_specific_information console-and-windows-subsystems}@anchor{1e6}\n+@anchor{gnat_ugn/platform_specific_information console-and-windows-subsystems}@anchor{1df}@anchor{gnat_ugn/platform_specific_information id9}@anchor{1e0}\n @subsection CONSOLE and WINDOWS subsystems\n \n \n@@ -24055,7 +23937,7 @@ $ gnatmake winprog -largs -mwindows\n @end quotation\n \n @node Temporary Files,Disabling Command Line Argument Expansion,CONSOLE and WINDOWS subsystems,Microsoft Windows Topics\n-@anchor{gnat_ugn/platform_specific_information id13}@anchor{1e7}@anchor{gnat_ugn/platform_specific_information temporary-files}@anchor{1e8}\n+@anchor{gnat_ugn/platform_specific_information id10}@anchor{1e1}@anchor{gnat_ugn/platform_specific_information temporary-files}@anchor{1e2}\n @subsection Temporary Files\n \n \n@@ -24094,7 +23976,7 @@ environments where you may not have write access to some\n directories.\n \n @node Disabling Command Line Argument Expansion,Mixed-Language Programming on Windows,Temporary Files,Microsoft Windows Topics\n-@anchor{gnat_ugn/platform_specific_information disabling-command-line-argument-expansion}@anchor{1e9}\n+@anchor{gnat_ugn/platform_specific_information disabling-command-line-argument-expansion}@anchor{1e3}\n @subsection Disabling Command Line Argument Expansion\n \n \n@@ -24165,7 +24047,7 @@ Ada.Command_Line.Argument (1) -> \"'*.txt'\"\n @end example\n \n @node Mixed-Language Programming on Windows,Windows Specific Add-Ons,Disabling Command Line Argument Expansion,Microsoft Windows Topics\n-@anchor{gnat_ugn/platform_specific_information mixed-language-programming-on-windows}@anchor{1ea}@anchor{gnat_ugn/platform_specific_information id14}@anchor{1eb}\n+@anchor{gnat_ugn/platform_specific_information id11}@anchor{1e4}@anchor{gnat_ugn/platform_specific_information mixed-language-programming-on-windows}@anchor{1e5}\n @subsection Mixed-Language Programming on Windows\n \n \n@@ -24187,12 +24069,12 @@ to use the Microsoft tools for your C++ code, you have two choices:\n Encapsulate your C++ code in a DLL to be linked with your Ada\n application. In this case, use the Microsoft or whatever environment to\n build the DLL and use GNAT to build your executable\n-(@ref{1ec,,Using DLLs with GNAT}).\n+(@ref{1e6,,Using DLLs with GNAT}).\n \n @item \n Or you can encapsulate your Ada code in a DLL to be linked with the\n other part of your application. In this case, use GNAT to build the DLL\n-(@ref{1ed,,Building DLLs with GNAT Project files}) and use the Microsoft\n+(@ref{1e7,,Building DLLs with GNAT Project files}) and use the Microsoft\n or whatever environment to build your executable.\n @end itemize\n \n@@ -24249,7 +24131,7 @@ native SEH support is used.\n @end menu\n \n @node Windows Calling Conventions,Introduction to Dynamic Link Libraries DLLs,,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information windows-calling-conventions}@anchor{1ee}@anchor{gnat_ugn/platform_specific_information id15}@anchor{1ef}\n+@anchor{gnat_ugn/platform_specific_information windows-calling-conventions}@anchor{1e8}@anchor{gnat_ugn/platform_specific_information id12}@anchor{1e9}\n @subsubsection Windows Calling Conventions\n \n \n@@ -24294,7 +24176,7 @@ are available for Windows:\n @end menu\n \n @node C Calling Convention,Stdcall Calling Convention,,Windows Calling Conventions\n-@anchor{gnat_ugn/platform_specific_information c-calling-convention}@anchor{1f0}@anchor{gnat_ugn/platform_specific_information id16}@anchor{1f1}\n+@anchor{gnat_ugn/platform_specific_information c-calling-convention}@anchor{1ea}@anchor{gnat_ugn/platform_specific_information id13}@anchor{1eb}\n @subsubsection @code{C} Calling Convention\n \n \n@@ -24336,10 +24218,10 @@ is missing, as in the above example, this parameter is set to be the\n When importing a variable defined in C, you should always use the @code{C}\n calling convention unless the object containing the variable is part of a\n DLL (in which case you should use the @code{Stdcall} calling\n-convention, @ref{1f2,,Stdcall Calling Convention}).\n+convention, @ref{1ec,,Stdcall Calling Convention}).\n \n @node Stdcall Calling Convention,Win32 Calling Convention,C Calling Convention,Windows Calling Conventions\n-@anchor{gnat_ugn/platform_specific_information stdcall-calling-convention}@anchor{1f2}@anchor{gnat_ugn/platform_specific_information id17}@anchor{1f3}\n+@anchor{gnat_ugn/platform_specific_information stdcall-calling-convention}@anchor{1ec}@anchor{gnat_ugn/platform_specific_information id14}@anchor{1ed}\n @subsubsection @code{Stdcall} Calling Convention\n \n \n@@ -24436,23 +24318,23 @@ Note that to ease building cross-platform bindings this convention\n will be handled as a @code{C} calling convention on non-Windows platforms.\n \n @node Win32 Calling Convention,DLL Calling Convention,Stdcall Calling Convention,Windows Calling Conventions\n-@anchor{gnat_ugn/platform_specific_information id18}@anchor{1f4}@anchor{gnat_ugn/platform_specific_information win32-calling-convention}@anchor{1f5}\n+@anchor{gnat_ugn/platform_specific_information win32-calling-convention}@anchor{1ee}@anchor{gnat_ugn/platform_specific_information id15}@anchor{1ef}\n @subsubsection @code{Win32} Calling Convention\n \n \n This convention, which is GNAT-specific is fully equivalent to the\n @code{Stdcall} calling convention described above.\n \n @node DLL Calling Convention,,Win32 Calling Convention,Windows Calling Conventions\n-@anchor{gnat_ugn/platform_specific_information id19}@anchor{1f6}@anchor{gnat_ugn/platform_specific_information dll-calling-convention}@anchor{1f7}\n+@anchor{gnat_ugn/platform_specific_information dll-calling-convention}@anchor{1f0}@anchor{gnat_ugn/platform_specific_information id16}@anchor{1f1}\n @subsubsection @code{DLL} Calling Convention\n \n \n This convention, which is GNAT-specific is fully equivalent to the\n @code{Stdcall} calling convention described above.\n \n @node Introduction to Dynamic Link Libraries DLLs,Using DLLs with GNAT,Windows Calling Conventions,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information id20}@anchor{1f8}@anchor{gnat_ugn/platform_specific_information introduction-to-dynamic-link-libraries-dlls}@anchor{1f9}\n+@anchor{gnat_ugn/platform_specific_information introduction-to-dynamic-link-libraries-dlls}@anchor{1f2}@anchor{gnat_ugn/platform_specific_information id17}@anchor{1f3}\n @subsubsection Introduction to Dynamic Link Libraries (DLLs)\n \n \n@@ -24536,10 +24418,10 @@ As a side note, an interesting difference between Microsoft DLLs and\n Unix shared libraries, is the fact that on most Unix systems all public\n routines are exported by default in a Unix shared library, while under\n Windows it is possible (but not required) to list exported routines in\n-a definition file (see @ref{1fa,,The Definition File}).\n+a definition file (see @ref{1f4,,The Definition File}).\n \n @node Using DLLs with GNAT,Building DLLs with GNAT Project files,Introduction to Dynamic Link Libraries DLLs,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information id21}@anchor{1fb}@anchor{gnat_ugn/platform_specific_information using-dlls-with-gnat}@anchor{1ec}\n+@anchor{gnat_ugn/platform_specific_information id18}@anchor{1f5}@anchor{gnat_ugn/platform_specific_information using-dlls-with-gnat}@anchor{1e6}\n @subsubsection Using DLLs with GNAT\n \n \n@@ -24630,7 +24512,7 @@ example a fictitious DLL called @code{API.dll}.\n @end menu\n \n @node Creating an Ada Spec for the DLL Services,Creating an Import Library,,Using DLLs with GNAT\n-@anchor{gnat_ugn/platform_specific_information creating-an-ada-spec-for-the-dll-services}@anchor{1fc}@anchor{gnat_ugn/platform_specific_information id22}@anchor{1fd}\n+@anchor{gnat_ugn/platform_specific_information creating-an-ada-spec-for-the-dll-services}@anchor{1f6}@anchor{gnat_ugn/platform_specific_information id19}@anchor{1f7}\n @subsubsection Creating an Ada Spec for the DLL Services\n \n \n@@ -24670,7 +24552,7 @@ end API;\n @end quotation\n \n @node Creating an Import Library,,Creating an Ada Spec for the DLL Services,Using DLLs with GNAT\n-@anchor{gnat_ugn/platform_specific_information id23}@anchor{1fe}@anchor{gnat_ugn/platform_specific_information creating-an-import-library}@anchor{1ff}\n+@anchor{gnat_ugn/platform_specific_information id20}@anchor{1f8}@anchor{gnat_ugn/platform_specific_information creating-an-import-library}@anchor{1f9}\n @subsubsection Creating an Import Library\n \n \n@@ -24684,7 +24566,7 @@ as in this case it is possible to link directly against the\n DLL. Otherwise read on.\n \n @geindex Definition file\n-@anchor{gnat_ugn/platform_specific_information the-definition-file}@anchor{1fa}\n+@anchor{gnat_ugn/platform_specific_information the-definition-file}@anchor{1f4}\n @subsubheading The Definition File\n \n \n@@ -24732,17 +24614,17 @@ EXPORTS\n @end table\n \n Note that you must specify the correct suffix (@code{@@@emph{nn}})\n-(see @ref{1ee,,Windows Calling Conventions}) for a Stdcall\n+(see @ref{1e8,,Windows Calling Conventions}) for a Stdcall\n calling convention function in the exported symbols list.\n \n There can actually be other sections in a definition file, but these\n sections are not relevant to the discussion at hand.\n-@anchor{gnat_ugn/platform_specific_information create-def-file-automatically}@anchor{200}\n+@anchor{gnat_ugn/platform_specific_information create-def-file-automatically}@anchor{1fa}\n @subsubheading Creating a Definition File Automatically\n \n \n You can automatically create the definition file @code{API.def}\n-(see @ref{1fa,,The Definition File}) from a DLL.\n+(see @ref{1f4,,The Definition File}) from a DLL.\n For that use the @code{dlltool} program as follows:\n \n @quotation\n@@ -24752,7 +24634,7 @@ $ dlltool API.dll -z API.def --export-all-symbols\n @end example\n \n Note that if some routines in the DLL have the @code{Stdcall} convention\n-(@ref{1ee,,Windows Calling Conventions}) with stripped @code{@@@emph{nn}}\n+(@ref{1e8,,Windows Calling Conventions}) with stripped @code{@@@emph{nn}}\n suffix then you'll have to edit @code{api.def} to add it, and specify\n @code{-k} to @code{gnatdll} when creating the import library.\n \n@@ -24776,13 +24658,13 @@ tells you what symbol is expected. You just have to go back to the\n definition file and add the right suffix.\n @end itemize\n @end quotation\n-@anchor{gnat_ugn/platform_specific_information gnat-style-import-library}@anchor{201}\n+@anchor{gnat_ugn/platform_specific_information gnat-style-import-library}@anchor{1fb}\n @subsubheading GNAT-Style Import Library\n \n \n To create a static import library from @code{API.dll} with the GNAT tools\n you should create the .def file, then use @code{gnatdll} tool\n-(see @ref{202,,Using gnatdll}) as follows:\n+(see @ref{1fc,,Using gnatdll}) as follows:\n \n @quotation\n \n@@ -24798,15 +24680,15 @@ definition file name is @code{xyz.def}, the import library name will\n be @code{libxyz.a}. Note that in the previous example option\n @code{-e} could have been removed because the name of the definition\n file (before the @code{.def} suffix) is the same as the name of the\n-DLL (@ref{202,,Using gnatdll} for more information about @code{gnatdll}).\n+DLL (@ref{1fc,,Using gnatdll} for more information about @code{gnatdll}).\n @end quotation\n-@anchor{gnat_ugn/platform_specific_information msvs-style-import-library}@anchor{203}\n+@anchor{gnat_ugn/platform_specific_information msvs-style-import-library}@anchor{1fd}\n @subsubheading Microsoft-Style Import Library\n \n \n A Microsoft import library is needed only if you plan to make an\n Ada DLL available to applications developed with Microsoft\n-tools (@ref{1ea,,Mixed-Language Programming on Windows}).\n+tools (@ref{1e5,,Mixed-Language Programming on Windows}).\n \n To create a Microsoft-style import library for @code{API.dll} you\n should create the .def file, then build the actual import library using\n@@ -24830,7 +24712,7 @@ See the Microsoft documentation for further details about the usage of\n @end quotation\n \n @node Building DLLs with GNAT Project files,Building DLLs with GNAT,Using DLLs with GNAT,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information id24}@anchor{204}@anchor{gnat_ugn/platform_specific_information building-dlls-with-gnat-project-files}@anchor{1ed}\n+@anchor{gnat_ugn/platform_specific_information id21}@anchor{1fe}@anchor{gnat_ugn/platform_specific_information building-dlls-with-gnat-project-files}@anchor{1e7}\n @subsubsection Building DLLs with GNAT Project files\n \n \n@@ -24846,7 +24728,7 @@ when inside the @code{DllMain} routine which is used for auto-initialization\n of shared libraries, so it is not possible to have library level tasks in SALs.\n \n @node Building DLLs with GNAT,Building DLLs with gnatdll,Building DLLs with GNAT Project files,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information building-dlls-with-gnat}@anchor{205}@anchor{gnat_ugn/platform_specific_information id25}@anchor{206}\n+@anchor{gnat_ugn/platform_specific_information building-dlls-with-gnat}@anchor{1ff}@anchor{gnat_ugn/platform_specific_information id22}@anchor{200}\n @subsubsection Building DLLs with GNAT\n \n \n@@ -24877,7 +24759,7 @@ $ gcc -shared -shared-libgcc -o api.dll obj1.o obj2.o ...\n It is important to note that in this case all symbols found in the\n object files are automatically exported. It is possible to restrict\n the set of symbols to export by passing to @code{gcc} a definition\n-file (see @ref{1fa,,The Definition File}).\n+file (see @ref{1f4,,The Definition File}).\n For example:\n \n @example\n@@ -24915,16 +24797,16 @@ $ gnatmake main -Iapilib -bargs -shared -largs -Lapilib -lAPI\n @end quotation\n \n @node Building DLLs with gnatdll,Ada DLLs and Finalization,Building DLLs with GNAT,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information building-dlls-with-gnatdll}@anchor{207}@anchor{gnat_ugn/platform_specific_information id26}@anchor{208}\n+@anchor{gnat_ugn/platform_specific_information building-dlls-with-gnatdll}@anchor{201}@anchor{gnat_ugn/platform_specific_information id23}@anchor{202}\n @subsubsection Building DLLs with gnatdll\n \n \n @geindex DLLs\n @geindex building\n \n Note that it is preferred to use GNAT Project files\n-(@ref{1ed,,Building DLLs with GNAT Project files}) or the built-in GNAT\n-DLL support (@ref{205,,Building DLLs with GNAT}) or to build DLLs.\n+(@ref{1e7,,Building DLLs with GNAT Project files}) or the built-in GNAT\n+DLL support (@ref{1ff,,Building DLLs with GNAT}) or to build DLLs.\n \n This section explains how to build DLLs containing Ada code using\n @code{gnatdll}. These DLLs will be referred to as Ada DLLs in the\n@@ -24940,20 +24822,20 @@ non-Ada applications are as follows:\n You need to mark each Ada entity exported by the DLL with a @code{C} or\n @code{Stdcall} calling convention to avoid any Ada name mangling for the\n entities exported by the DLL\n-(see @ref{209,,Exporting Ada Entities}). You can\n+(see @ref{203,,Exporting Ada Entities}). You can\n skip this step if you plan to use the Ada DLL only from Ada applications.\n \n @item \n Your Ada code must export an initialization routine which calls the routine\n @code{adainit} generated by @code{gnatbind} to perform the elaboration of\n-the Ada code in the DLL (@ref{20a,,Ada DLLs and Elaboration}). The initialization\n+the Ada code in the DLL (@ref{204,,Ada DLLs and Elaboration}). The initialization\n routine exported by the Ada DLL must be invoked by the clients of the DLL\n to initialize the DLL.\n \n @item \n When useful, the DLL should also export a finalization routine which calls\n routine @code{adafinal} generated by @code{gnatbind} to perform the\n-finalization of the Ada code in the DLL (@ref{20b,,Ada DLLs and Finalization}).\n+finalization of the Ada code in the DLL (@ref{205,,Ada DLLs and Finalization}).\n The finalization routine exported by the Ada DLL must be invoked by the\n clients of the DLL when the DLL services are no further needed.\n \n@@ -24963,11 +24845,11 @@ of the programming languages to which you plan to make the DLL available.\n \n @item \n You must provide a definition file listing the exported entities\n-(@ref{1fa,,The Definition File}).\n+(@ref{1f4,,The Definition File}).\n \n @item \n Finally you must use @code{gnatdll} to produce the DLL and the import\n-library (@ref{202,,Using gnatdll}).\n+library (@ref{1fc,,Using gnatdll}).\n @end itemize\n \n Note that a relocatable DLL stripped using the @code{strip}\n@@ -24987,16 +24869,16 @@ chapter of the @emph{GPRbuild User's Guide}.\n @end menu\n \n @node Limitations When Using Ada DLLs from Ada,Exporting Ada Entities,,Building DLLs with gnatdll\n-@anchor{gnat_ugn/platform_specific_information limitations-when-using-ada-dlls-from-ada}@anchor{20c}\n+@anchor{gnat_ugn/platform_specific_information limitations-when-using-ada-dlls-from-ada}@anchor{206}\n @subsubsection Limitations When Using Ada DLLs from Ada\n \n \n When using Ada DLLs from Ada applications there is a limitation users\n-should be aware of. Because on Windows the GNAT run time is not in a DLL of\n-its own, each Ada DLL includes a part of the GNAT run time. Specifically,\n-each Ada DLL includes the services of the GNAT run time that are necessary\n+should be aware of. Because on Windows the GNAT run-time is not in a DLL of\n+its own, each Ada DLL includes a part of the GNAT run-time. Specifically,\n+each Ada DLL includes the services of the GNAT run-time that are necessary\n to the Ada code inside the DLL. As a result, when an Ada program uses an\n-Ada DLL there are two independent GNAT run times: one in the Ada DLL and\n+Ada DLL there are two independent GNAT run-times: one in the Ada DLL and\n one in the main program.\n \n It is therefore not possible to exchange GNAT run-time objects between the\n@@ -25008,7 +24890,7 @@ It is completely safe to exchange plain elementary, array or record types,\n Windows object handles, etc.\n \n @node Exporting Ada Entities,Ada DLLs and Elaboration,Limitations When Using Ada DLLs from Ada,Building DLLs with gnatdll\n-@anchor{gnat_ugn/platform_specific_information exporting-ada-entities}@anchor{209}@anchor{gnat_ugn/platform_specific_information id27}@anchor{20d}\n+@anchor{gnat_ugn/platform_specific_information exporting-ada-entities}@anchor{203}@anchor{gnat_ugn/platform_specific_information id24}@anchor{207}\n @subsubsection Exporting Ada Entities\n \n \n@@ -25108,10 +24990,10 @@ end API;\n Note that if you do not export the Ada entities with a @code{C} or\n @code{Stdcall} convention you will have to provide the mangled Ada names\n in the definition file of the Ada DLL\n-(@ref{20e,,Creating the Definition File}).\n+(@ref{208,,Creating the Definition File}).\n \n @node Ada DLLs and Elaboration,,Exporting Ada Entities,Building DLLs with gnatdll\n-@anchor{gnat_ugn/platform_specific_information ada-dlls-and-elaboration}@anchor{20a}@anchor{gnat_ugn/platform_specific_information id28}@anchor{20f}\n+@anchor{gnat_ugn/platform_specific_information ada-dlls-and-elaboration}@anchor{204}@anchor{gnat_ugn/platform_specific_information id25}@anchor{209}\n @subsubsection Ada DLLs and Elaboration\n \n \n@@ -25129,7 +25011,7 @@ the Ada elaboration routine @code{adainit} generated by the GNAT binder\n (@ref{b4,,Binding with Non-Ada Main Programs}). See the body of\n @code{Initialize_Api} for an example. Note that the GNAT binder is\n automatically invoked during the DLL build process by the @code{gnatdll}\n-tool (@ref{202,,Using gnatdll}).\n+tool (@ref{1fc,,Using gnatdll}).\n \n When a DLL is loaded, Windows systematically invokes a routine called\n @code{DllMain}. It would therefore be possible to call @code{adainit}\n@@ -25138,11 +25020,11 @@ initialization routine. Unfortunately, it is not possible to call\n @code{adainit} from the @code{DllMain} if your program has library level\n tasks because access to the @code{DllMain} entry point is serialized by\n the system (that is, only a single thread can execute 'through' it at a\n-time), which means that the GNAT run time will deadlock waiting for the\n+time), which means that the GNAT run-time will deadlock waiting for the\n newly created task to complete its initialization.\n \n @node Ada DLLs and Finalization,Creating a Spec for Ada DLLs,Building DLLs with gnatdll,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information id29}@anchor{210}@anchor{gnat_ugn/platform_specific_information ada-dlls-and-finalization}@anchor{20b}\n+@anchor{gnat_ugn/platform_specific_information ada-dlls-and-finalization}@anchor{205}@anchor{gnat_ugn/platform_specific_information id26}@anchor{20a}\n @subsubsection Ada DLLs and Finalization\n \n \n@@ -25157,10 +25039,10 @@ routine @code{adafinal} generated by the GNAT binder\n See the body of @code{Finalize_Api} for an\n example. As already pointed out the GNAT binder is automatically invoked\n during the DLL build process by the @code{gnatdll} tool\n-(@ref{202,,Using gnatdll}).\n+(@ref{1fc,,Using gnatdll}).\n \n @node Creating a Spec for Ada DLLs,GNAT and Windows Resources,Ada DLLs and Finalization,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information id30}@anchor{211}@anchor{gnat_ugn/platform_specific_information creating-a-spec-for-ada-dlls}@anchor{212}\n+@anchor{gnat_ugn/platform_specific_information id27}@anchor{20b}@anchor{gnat_ugn/platform_specific_information creating-a-spec-for-ada-dlls}@anchor{20c}\n @subsubsection Creating a Spec for Ada DLLs\n \n \n@@ -25218,7 +25100,7 @@ end API;\n @end menu\n \n @node Creating the Definition File,Using gnatdll,,Creating a Spec for Ada DLLs\n-@anchor{gnat_ugn/platform_specific_information creating-the-definition-file}@anchor{20e}@anchor{gnat_ugn/platform_specific_information id31}@anchor{213}\n+@anchor{gnat_ugn/platform_specific_information id28}@anchor{20d}@anchor{gnat_ugn/platform_specific_information creating-the-definition-file}@anchor{208}\n @subsubsection Creating the Definition File\n \n \n@@ -25254,7 +25136,7 @@ EXPORTS\n @end quotation\n \n @node Using gnatdll,,Creating the Definition File,Creating a Spec for Ada DLLs\n-@anchor{gnat_ugn/platform_specific_information using-gnatdll}@anchor{202}@anchor{gnat_ugn/platform_specific_information id32}@anchor{214}\n+@anchor{gnat_ugn/platform_specific_information id29}@anchor{20e}@anchor{gnat_ugn/platform_specific_information using-gnatdll}@anchor{1fc}\n @subsubsection Using @code{gnatdll}\n \n \n@@ -25465,7 +25347,7 @@ asks @code{gnatlink} to generate the routines @code{DllMain} and\n is loaded into memory.\n \n @item \n-@code{gnatdll} uses @code{dlltool} (see @ref{215,,Using dlltool}) to build the\n+@code{gnatdll} uses @code{dlltool} (see @ref{20f,,Using dlltool}) to build the\n export table (@code{api.exp}). The export table contains the relocation\n information in a form which can be used during the final link to ensure\n that the Windows loader is able to place the DLL anywhere in memory.\n@@ -25504,7 +25386,7 @@ $ gnatbind -n api\n $ gnatlink api api.exp -o api.dll -mdll\n @end example\n @end itemize\n-@anchor{gnat_ugn/platform_specific_information using-dlltool}@anchor{215}\n+@anchor{gnat_ugn/platform_specific_information using-dlltool}@anchor{20f}\n @subsubheading Using @code{dlltool}\n \n \n@@ -25563,7 +25445,7 @@ DLL in the static import library generated by @code{dlltool} with switch\n @item @code{-k}\n \n Kill @code{@@@emph{nn}} from exported names\n-(@ref{1ee,,Windows Calling Conventions}\n+(@ref{1e8,,Windows Calling Conventions}\n for a discussion about @code{Stdcall}-style symbols.\n @end table\n \n@@ -25619,7 +25501,7 @@ Use @code{assembler-name} as the assembler. The default is @code{as}.\n @end table\n \n @node GNAT and Windows Resources,Using GNAT DLLs from Microsoft Visual Studio Applications,Creating a Spec for Ada DLLs,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information gnat-and-windows-resources}@anchor{216}@anchor{gnat_ugn/platform_specific_information id33}@anchor{217}\n+@anchor{gnat_ugn/platform_specific_information gnat-and-windows-resources}@anchor{210}@anchor{gnat_ugn/platform_specific_information id30}@anchor{211}\n @subsubsection GNAT and Windows Resources\n \n \n@@ -25714,7 +25596,7 @@ the corresponding Microsoft documentation.\n @end menu\n \n @node Building Resources,Compiling Resources,,GNAT and Windows Resources\n-@anchor{gnat_ugn/platform_specific_information building-resources}@anchor{218}@anchor{gnat_ugn/platform_specific_information id34}@anchor{219}\n+@anchor{gnat_ugn/platform_specific_information building-resources}@anchor{212}@anchor{gnat_ugn/platform_specific_information id31}@anchor{213}\n @subsubsection Building Resources\n \n \n@@ -25734,7 +25616,7 @@ complete description of the resource script language can be found in the\n Microsoft documentation.\n \n @node Compiling Resources,Using Resources,Building Resources,GNAT and Windows Resources\n-@anchor{gnat_ugn/platform_specific_information compiling-resources}@anchor{21a}@anchor{gnat_ugn/platform_specific_information id35}@anchor{21b}\n+@anchor{gnat_ugn/platform_specific_information compiling-resources}@anchor{214}@anchor{gnat_ugn/platform_specific_information id32}@anchor{215}\n @subsubsection Compiling Resources\n \n \n@@ -25776,7 +25658,7 @@ $ windres -i myres.res -o myres.o\n @end quotation\n \n @node Using Resources,,Compiling Resources,GNAT and Windows Resources\n-@anchor{gnat_ugn/platform_specific_information id36}@anchor{21c}@anchor{gnat_ugn/platform_specific_information using-resources}@anchor{21d}\n+@anchor{gnat_ugn/platform_specific_information using-resources}@anchor{216}@anchor{gnat_ugn/platform_specific_information id33}@anchor{217}\n @subsubsection Using Resources\n \n \n@@ -25796,7 +25678,7 @@ $ gnatmake myprog -largs myres.o\n @end quotation\n \n @node Using GNAT DLLs from Microsoft Visual Studio Applications,Debugging a DLL,GNAT and Windows Resources,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information using-gnat-dll-from-msvs}@anchor{21e}@anchor{gnat_ugn/platform_specific_information using-gnat-dlls-from-microsoft-visual-studio-applications}@anchor{21f}\n+@anchor{gnat_ugn/platform_specific_information using-gnat-dll-from-msvs}@anchor{218}@anchor{gnat_ugn/platform_specific_information using-gnat-dlls-from-microsoft-visual-studio-applications}@anchor{219}\n @subsubsection Using GNAT DLLs from Microsoft Visual Studio Applications\n \n \n@@ -25830,7 +25712,7 @@ $ gprbuild -p mylib.gpr\n @item \n Produce a .def file for the symbols you need to interface with, either by\n hand or automatically with possibly some manual adjustments\n-(see @ref{200,,Creating Definition File Automatically}):\n+(see @ref{1fa,,Creating Definition File Automatically}):\n @end enumerate\n \n @quotation\n@@ -25847,7 +25729,7 @@ $ dlltool libmylib.dll -z libmylib.def --export-all-symbols\n Make sure that MSVS command-line tools are accessible on the path.\n \n @item \n-Create the Microsoft-style import library (see @ref{203,,MSVS-Style Import Library}):\n+Create the Microsoft-style import library (see @ref{1fd,,MSVS-Style Import Library}):\n @end enumerate\n \n @quotation\n@@ -25889,7 +25771,7 @@ or copy the DLL into into the directory containing the .exe.\n @end enumerate\n \n @node Debugging a DLL,Setting Stack Size from gnatlink,Using GNAT DLLs from Microsoft Visual Studio Applications,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information id37}@anchor{220}@anchor{gnat_ugn/platform_specific_information debugging-a-dll}@anchor{221}\n+@anchor{gnat_ugn/platform_specific_information id34}@anchor{21a}@anchor{gnat_ugn/platform_specific_information debugging-a-dll}@anchor{21b}\n @subsubsection Debugging a DLL\n \n \n@@ -25927,7 +25809,7 @@ tools suite used to build the DLL.\n @end menu\n \n @node Program and DLL Both Built with GCC/GNAT,Program Built with Foreign Tools and DLL Built with GCC/GNAT,,Debugging a DLL\n-@anchor{gnat_ugn/platform_specific_information program-and-dll-both-built-with-gcc-gnat}@anchor{222}@anchor{gnat_ugn/platform_specific_information id38}@anchor{223}\n+@anchor{gnat_ugn/platform_specific_information program-and-dll-both-built-with-gcc-gnat}@anchor{21c}@anchor{gnat_ugn/platform_specific_information id35}@anchor{21d}\n @subsubsection Program and DLL Both Built with GCC/GNAT\n \n \n@@ -25937,7 +25819,7 @@ the process. Let's suppose here that the main procedure is named\n @code{ada_main} and that in the DLL there is an entry point named\n @code{ada_dll}.\n \n-The DLL (@ref{1f9,,Introduction to Dynamic Link Libraries (DLLs)}) and\n+The DLL (@ref{1f2,,Introduction to Dynamic Link Libraries (DLLs)}) and\n program must have been built with the debugging information (see GNAT -g\n switch). Here are the step-by-step instructions for debugging it:\n \n@@ -25977,7 +25859,7 @@ you can use the standard approach to debug the whole program\n (@ref{24,,Running and Debugging Ada Programs}).\n \n @node Program Built with Foreign Tools and DLL Built with GCC/GNAT,,Program and DLL Both Built with GCC/GNAT,Debugging a DLL\n-@anchor{gnat_ugn/platform_specific_information program-built-with-foreign-tools-and-dll-built-with-gcc-gnat}@anchor{224}@anchor{gnat_ugn/platform_specific_information id39}@anchor{225}\n+@anchor{gnat_ugn/platform_specific_information id36}@anchor{21e}@anchor{gnat_ugn/platform_specific_information program-built-with-foreign-tools-and-dll-built-with-gcc-gnat}@anchor{21f}\n @subsubsection Program Built with Foreign Tools and DLL Built with GCC/GNAT\n \n \n@@ -25994,7 +25876,7 @@ example some C code built with Microsoft Visual C) and that there is a\n DLL named @code{test.dll} containing an Ada entry point named\n @code{ada_dll}.\n \n-The DLL (see @ref{1f9,,Introduction to Dynamic Link Libraries (DLLs)}) must have\n+The DLL (see @ref{1f2,,Introduction to Dynamic Link Libraries (DLLs)}) must have\n been built with debugging information (see the GNAT @code{-g} option).\n \n @subsubheading Debugging the DLL Directly\n@@ -26133,7 +26015,7 @@ approach to debug a program as described in\n @ref{24,,Running and Debugging Ada Programs}.\n \n @node Setting Stack Size from gnatlink,Setting Heap Size from gnatlink,Debugging a DLL,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information setting-stack-size-from-gnatlink}@anchor{136}@anchor{gnat_ugn/platform_specific_information id40}@anchor{226}\n+@anchor{gnat_ugn/platform_specific_information id37}@anchor{220}@anchor{gnat_ugn/platform_specific_information setting-stack-size-from-gnatlink}@anchor{136}\n @subsubsection Setting Stack Size from @code{gnatlink}\n \n \n@@ -26176,7 +26058,7 @@ because the comma is a separator for this option.\n @end itemize\n \n @node Setting Heap Size from gnatlink,,Setting Stack Size from gnatlink,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information setting-heap-size-from-gnatlink}@anchor{137}@anchor{gnat_ugn/platform_specific_information id41}@anchor{227}\n+@anchor{gnat_ugn/platform_specific_information setting-heap-size-from-gnatlink}@anchor{137}@anchor{gnat_ugn/platform_specific_information id38}@anchor{221}\n @subsubsection Setting Heap Size from @code{gnatlink}\n \n \n@@ -26209,7 +26091,7 @@ because the comma is a separator for this option.\n @end itemize\n \n @node Windows Specific Add-Ons,,Mixed-Language Programming on Windows,Microsoft Windows Topics\n-@anchor{gnat_ugn/platform_specific_information windows-specific-add-ons}@anchor{228}@anchor{gnat_ugn/platform_specific_information win32-specific-addons}@anchor{229}\n+@anchor{gnat_ugn/platform_specific_information windows-specific-add-ons}@anchor{222}@anchor{gnat_ugn/platform_specific_information win32-specific-addons}@anchor{223}\n @subsection Windows Specific Add-Ons\n \n \n@@ -26222,7 +26104,7 @@ This section describes the Windows specific add-ons.\n @end menu\n \n @node Win32Ada,wPOSIX,,Windows Specific Add-Ons\n-@anchor{gnat_ugn/platform_specific_information win32ada}@anchor{22a}@anchor{gnat_ugn/platform_specific_information id42}@anchor{22b}\n+@anchor{gnat_ugn/platform_specific_information win32ada}@anchor{224}@anchor{gnat_ugn/platform_specific_information id39}@anchor{225}\n @subsubsection Win32Ada\n \n \n@@ -26253,7 +26135,7 @@ gprbuild p.gpr\n @end quotation\n \n @node wPOSIX,,Win32Ada,Windows Specific Add-Ons\n-@anchor{gnat_ugn/platform_specific_information id43}@anchor{22c}@anchor{gnat_ugn/platform_specific_information wposix}@anchor{22d}\n+@anchor{gnat_ugn/platform_specific_information wposix}@anchor{226}@anchor{gnat_ugn/platform_specific_information id40}@anchor{227}\n @subsubsection wPOSIX\n \n \n@@ -26286,7 +26168,7 @@ gprbuild p.gpr\n @end quotation\n \n @node Mac OS Topics,,Microsoft Windows Topics,Platform-Specific Information\n-@anchor{gnat_ugn/platform_specific_information mac-os-topics}@anchor{2d}@anchor{gnat_ugn/platform_specific_information id44}@anchor{22e}\n+@anchor{gnat_ugn/platform_specific_information mac-os-topics}@anchor{2d}@anchor{gnat_ugn/platform_specific_information id41}@anchor{228}\n @section Mac OS Topics\n \n \n@@ -26301,7 +26183,7 @@ platform.\n @end menu\n \n @node Codesigning the Debugger,,,Mac OS Topics\n-@anchor{gnat_ugn/platform_specific_information codesigning-the-debugger}@anchor{22f}\n+@anchor{gnat_ugn/platform_specific_information codesigning-the-debugger}@anchor{229}\n @subsection Codesigning the Debugger\n \n \n@@ -26382,7 +26264,7 @@ the location where you installed GNAT.  Also, be sure that users are\n in the Unix group @code{_developer}.\n \n @node Example of Binder Output File,Elaboration Order Handling in GNAT,Platform-Specific Information,Top\n-@anchor{gnat_ugn/example_of_binder_output example-of-binder-output-file}@anchor{e}@anchor{gnat_ugn/example_of_binder_output doc}@anchor{230}@anchor{gnat_ugn/example_of_binder_output id1}@anchor{231}\n+@anchor{gnat_ugn/example_of_binder_output example-of-binder-output-file}@anchor{e}@anchor{gnat_ugn/example_of_binder_output doc}@anchor{22a}@anchor{gnat_ugn/example_of_binder_output id1}@anchor{22b}\n @chapter Example of Binder Output File\n \n \n@@ -27134,7 +27016,7 @@ elaboration code in your own application).\n @c -- Example: A |withing| unit has a |with| clause, it |withs| a |withed| unit\n \n @node Elaboration Order Handling in GNAT,Inline Assembler,Example of Binder Output File,Top\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-order-handling-in-gnat}@anchor{f}@anchor{gnat_ugn/elaboration_order_handling_in_gnat doc}@anchor{232}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id1}@anchor{233}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-order-handling-in-gnat}@anchor{f}@anchor{gnat_ugn/elaboration_order_handling_in_gnat doc}@anchor{22c}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id1}@anchor{22d}\n @chapter Elaboration Order Handling in GNAT\n \n \n@@ -27166,7 +27048,7 @@ features.\n @end menu\n \n @node Elaboration Code,Checking the Elaboration Order,,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-code}@anchor{234}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id2}@anchor{235}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-code}@anchor{22e}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id2}@anchor{22f}\n @section Elaboration Code\n \n \n@@ -27316,7 +27198,7 @@ to figure out which of these expressions will be true, and hence it\n is impossible to guarantee a safe order of elaboration at run time.\n \n @node Checking the Elaboration Order,Controlling the Elaboration Order,Elaboration Code,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat checking-the-elaboration-order}@anchor{236}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id3}@anchor{237}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat checking-the-elaboration-order}@anchor{230}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id3}@anchor{231}\n @section Checking the Elaboration Order\n \n \n@@ -27420,7 +27302,7 @@ does such optimizations, but still the easiest conceptual model is to\n think of there being one variable per subprogram.\n \n @node Controlling the Elaboration Order,Controlling Elaboration in GNAT - Internal Calls,Checking the Elaboration Order,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id4}@anchor{238}@anchor{gnat_ugn/elaboration_order_handling_in_gnat controlling-the-elaboration-order}@anchor{239}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id4}@anchor{232}@anchor{gnat_ugn/elaboration_order_handling_in_gnat controlling-the-elaboration-order}@anchor{233}\n @section Controlling the Elaboration Order\n \n \n@@ -27679,7 +27561,7 @@ code in the body makes calls to some other unit, so it is still necessary\n to use @code{Elaborate_All} on such units.\n \n @node Controlling Elaboration in GNAT - Internal Calls,Controlling Elaboration in GNAT - External Calls,Controlling the Elaboration Order,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id5}@anchor{23a}@anchor{gnat_ugn/elaboration_order_handling_in_gnat controlling-elaboration-in-gnat-internal-calls}@anchor{23b}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id5}@anchor{234}@anchor{gnat_ugn/elaboration_order_handling_in_gnat controlling-elaboration-in-gnat-internal-calls}@anchor{235}\n @section Controlling Elaboration in GNAT - Internal Calls\n \n \n@@ -27859,7 +27741,7 @@ guaranteed) for a program to be able to call a subprogram whose body\n is not yet elaborated, without raising a @code{Program_Error} exception.\n \n @node Controlling Elaboration in GNAT - External Calls,Default Behavior in GNAT - Ensuring Safety,Controlling Elaboration in GNAT - Internal Calls,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id6}@anchor{23c}@anchor{gnat_ugn/elaboration_order_handling_in_gnat controlling-elaboration-in-gnat-external-calls}@anchor{23d}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id6}@anchor{236}@anchor{gnat_ugn/elaboration_order_handling_in_gnat controlling-elaboration-in-gnat-external-calls}@anchor{237}\n @section Controlling Elaboration in GNAT - External Calls\n \n \n@@ -27967,7 +27849,7 @@ provides a number of facilities for assisting the programmer in\n developing programs that are robust with respect to elaboration order.\n \n @node Default Behavior in GNAT - Ensuring Safety,Treatment of Pragma Elaborate,Controlling Elaboration in GNAT - External Calls,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id7}@anchor{23e}@anchor{gnat_ugn/elaboration_order_handling_in_gnat default-behavior-in-gnat-ensuring-safety}@anchor{23f}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id7}@anchor{238}@anchor{gnat_ugn/elaboration_order_handling_in_gnat default-behavior-in-gnat-ensuring-safety}@anchor{239}\n @section Default Behavior in GNAT - Ensuring Safety\n \n \n@@ -28069,7 +27951,7 @@ is clearly safer to rely on compile and link time checks rather than\n run-time checks. However, in the case of legacy code, it may be\n difficult to meet the requirements of the static model. This\n issue is further discussed in\n-@ref{240,,What to Do If the Default Elaboration Behavior Fails}.\n+@ref{23a,,What to Do If the Default Elaboration Behavior Fails}.\n \n Note that the static model provides a strict subset of the allowed\n behavior and programs of the Ada Reference Manual, so if you do\n@@ -28079,7 +27961,7 @@ work using the dynamic model, providing that you remove any\n pragma Elaborate statements from the source.\n \n @node Treatment of Pragma Elaborate,Elaboration Issues for Library Tasks,Default Behavior in GNAT - Ensuring Safety,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat treatment-of-pragma-elaborate}@anchor{241}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id8}@anchor{242}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat treatment-of-pragma-elaborate}@anchor{23b}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id8}@anchor{23c}\n @section Treatment of Pragma Elaborate\n \n \n@@ -28118,7 +28000,7 @@ When using the static mode with @code{-gnatwl}, any use of\n problems.\n \n @node Elaboration Issues for Library Tasks,Mixing Elaboration Models,Treatment of Pragma Elaborate,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-issues-for-library-tasks}@anchor{243}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id9}@anchor{244}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-issues-for-library-tasks}@anchor{23d}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id9}@anchor{23e}\n @section Elaboration Issues for Library Tasks\n \n \n@@ -28481,7 +28363,7 @@ no task receives an entry call before elaboration of all units is completed.\n @end itemize\n \n @node Mixing Elaboration Models,What to Do If the Default Elaboration Behavior Fails,Elaboration Issues for Library Tasks,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id10}@anchor{245}@anchor{gnat_ugn/elaboration_order_handling_in_gnat mixing-elaboration-models}@anchor{246}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id10}@anchor{23f}@anchor{gnat_ugn/elaboration_order_handling_in_gnat mixing-elaboration-models}@anchor{240}\n @section Mixing Elaboration Models\n \n \n@@ -28546,7 +28428,7 @@ allowing the main application that uses this subsystem to be compiled\n using the more reliable default static model.\n \n @node What to Do If the Default Elaboration Behavior Fails,Elaboration for Indirect Calls,Mixing Elaboration Models,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id11}@anchor{247}@anchor{gnat_ugn/elaboration_order_handling_in_gnat what-to-do-if-the-default-elaboration-behavior-fails}@anchor{240}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id11}@anchor{241}@anchor{gnat_ugn/elaboration_order_handling_in_gnat what-to-do-if-the-default-elaboration-behavior-fails}@anchor{23a}\n @section What to Do If the Default Elaboration Behavior Fails\n \n \n@@ -28657,7 +28539,7 @@ all subprograms declared in this spec.\n @item \n Use Pragma Elaborate.\n \n-As previously described in section @ref{241,,Treatment of Pragma Elaborate},\n+As previously described in section @ref{23b,,Treatment of Pragma Elaborate},\n GNAT in static mode assumes that a @code{pragma} Elaborate indicates correctly\n that no elaboration checks are required on calls to the designated unit.\n There may be cases in which the caller knows that no transitive calls\n@@ -28790,7 +28672,7 @@ C-tests are indeed correct (it is less efficient, but efficiency is\n not a factor in running the ACATS tests.)\n \n @node Elaboration for Indirect Calls,Summary of Procedures for Elaboration Control,What to Do If the Default Elaboration Behavior Fails,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id12}@anchor{248}@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-for-indirect-calls}@anchor{249}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id12}@anchor{242}@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-for-indirect-calls}@anchor{243}\n @section Elaboration for Indirect Calls\n \n \n@@ -28824,7 +28706,7 @@ switch.\n See @code{debug.adb} for documentation on the @code{-gnatd...} debug switches.\n \n @node Summary of Procedures for Elaboration Control,Other Elaboration Order Considerations,Elaboration for Indirect Calls,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id13}@anchor{24a}@anchor{gnat_ugn/elaboration_order_handling_in_gnat summary-of-procedures-for-elaboration-control}@anchor{24b}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id13}@anchor{244}@anchor{gnat_ugn/elaboration_order_handling_in_gnat summary-of-procedures-for-elaboration-control}@anchor{245}\n @section Summary of Procedures for Elaboration Control\n \n \n@@ -28848,7 +28730,7 @@ and, if you are sure there really are no elaboration problems,\n use a global pragma @code{Suppress (Elaboration_Check)}.\n \n @node Other Elaboration Order Considerations,Determining the Chosen Elaboration Order,Summary of Procedures for Elaboration Control,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id14}@anchor{24c}@anchor{gnat_ugn/elaboration_order_handling_in_gnat other-elaboration-order-considerations}@anchor{24d}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id14}@anchor{246}@anchor{gnat_ugn/elaboration_order_handling_in_gnat other-elaboration-order-considerations}@anchor{247}\n @section Other Elaboration Order Considerations\n \n \n@@ -28995,7 +28877,7 @@ and figuring out which is correct, and then adding the necessary\n @code{Elaborate} or @code{Elaborate_All} pragmas to ensure the desired order.\n \n @node Determining the Chosen Elaboration Order,,Other Elaboration Order Considerations,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat determining-the-chosen-elaboration-order}@anchor{24e}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id15}@anchor{24f}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat determining-the-chosen-elaboration-order}@anchor{248}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id15}@anchor{249}\n @section Determining the Chosen Elaboration Order\n \n \n@@ -29135,7 +29017,7 @@ gdbstr (body)\n @end example\n \n @node Inline Assembler,GNU Free Documentation License,Elaboration Order Handling in GNAT,Top\n-@anchor{gnat_ugn/inline_assembler inline-assembler}@anchor{10}@anchor{gnat_ugn/inline_assembler doc}@anchor{250}@anchor{gnat_ugn/inline_assembler id1}@anchor{251}\n+@anchor{gnat_ugn/inline_assembler inline-assembler}@anchor{10}@anchor{gnat_ugn/inline_assembler doc}@anchor{24a}@anchor{gnat_ugn/inline_assembler id1}@anchor{24b}\n @chapter Inline Assembler\n \n \n@@ -29194,7 +29076,7 @@ and with assembly language programming.\n @end menu\n \n @node Basic Assembler Syntax,A Simple Example of Inline Assembler,,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler id2}@anchor{252}@anchor{gnat_ugn/inline_assembler basic-assembler-syntax}@anchor{253}\n+@anchor{gnat_ugn/inline_assembler id2}@anchor{24c}@anchor{gnat_ugn/inline_assembler basic-assembler-syntax}@anchor{24d}\n @section Basic Assembler Syntax\n \n \n@@ -29310,7 +29192,7 @@ Intel: Destination first; for example @code{mov eax, 4}@w{ }\n \n \n @node A Simple Example of Inline Assembler,Output Variables in Inline Assembler,Basic Assembler Syntax,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler a-simple-example-of-inline-assembler}@anchor{254}@anchor{gnat_ugn/inline_assembler id3}@anchor{255}\n+@anchor{gnat_ugn/inline_assembler a-simple-example-of-inline-assembler}@anchor{24e}@anchor{gnat_ugn/inline_assembler id3}@anchor{24f}\n @section A Simple Example of Inline Assembler\n \n \n@@ -29459,7 +29341,7 @@ If there are no errors, @code{as} will generate an object file\n @code{nothing.out}.\n \n @node Output Variables in Inline Assembler,Input Variables in Inline Assembler,A Simple Example of Inline Assembler,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler id4}@anchor{256}@anchor{gnat_ugn/inline_assembler output-variables-in-inline-assembler}@anchor{257}\n+@anchor{gnat_ugn/inline_assembler id4}@anchor{250}@anchor{gnat_ugn/inline_assembler output-variables-in-inline-assembler}@anchor{251}\n @section Output Variables in Inline Assembler\n \n \n@@ -29826,7 +29708,7 @@ end Get_Flags_3;\n @end quotation\n \n @node Input Variables in Inline Assembler,Inlining Inline Assembler Code,Output Variables in Inline Assembler,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler id5}@anchor{258}@anchor{gnat_ugn/inline_assembler input-variables-in-inline-assembler}@anchor{259}\n+@anchor{gnat_ugn/inline_assembler id5}@anchor{252}@anchor{gnat_ugn/inline_assembler input-variables-in-inline-assembler}@anchor{253}\n @section Input Variables in Inline Assembler\n \n \n@@ -29915,7 +29797,7 @@ _increment__incr.1:\n @end quotation\n \n @node Inlining Inline Assembler Code,Other Asm Functionality,Input Variables in Inline Assembler,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler id6}@anchor{25a}@anchor{gnat_ugn/inline_assembler inlining-inline-assembler-code}@anchor{25b}\n+@anchor{gnat_ugn/inline_assembler id6}@anchor{254}@anchor{gnat_ugn/inline_assembler inlining-inline-assembler-code}@anchor{255}\n @section Inlining Inline Assembler Code\n \n \n@@ -29986,7 +29868,7 @@ movl %esi,%eax\n thus saving the overhead of stack frame setup and an out-of-line call.\n \n @node Other Asm Functionality,,Inlining Inline Assembler Code,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler other-asm-functionality}@anchor{25c}@anchor{gnat_ugn/inline_assembler id7}@anchor{25d}\n+@anchor{gnat_ugn/inline_assembler other-asm-functionality}@anchor{256}@anchor{gnat_ugn/inline_assembler id7}@anchor{257}\n @section Other @code{Asm} Functionality\n \n \n@@ -30001,7 +29883,7 @@ and @code{Volatile}, which inhibits unwanted optimizations.\n @end menu\n \n @node The Clobber Parameter,The Volatile Parameter,,Other Asm Functionality\n-@anchor{gnat_ugn/inline_assembler the-clobber-parameter}@anchor{25e}@anchor{gnat_ugn/inline_assembler id8}@anchor{25f}\n+@anchor{gnat_ugn/inline_assembler the-clobber-parameter}@anchor{258}@anchor{gnat_ugn/inline_assembler id8}@anchor{259}\n @subsection The @code{Clobber} Parameter\n \n \n@@ -30065,7 +29947,7 @@ Use 'register' name @code{memory} if you changed a memory location\n @end itemize\n \n @node The Volatile Parameter,,The Clobber Parameter,Other Asm Functionality\n-@anchor{gnat_ugn/inline_assembler the-volatile-parameter}@anchor{260}@anchor{gnat_ugn/inline_assembler id9}@anchor{261}\n+@anchor{gnat_ugn/inline_assembler the-volatile-parameter}@anchor{25a}@anchor{gnat_ugn/inline_assembler id9}@anchor{25b}\n @subsection The @code{Volatile} Parameter\n \n \n@@ -30101,7 +29983,7 @@ to @code{True} only if the compiler's optimizations have created\n problems.\n \n @node GNU Free Documentation License,Index,Inline Assembler,Top\n-@anchor{share/gnu_free_documentation_license gnu-fdl}@anchor{1}@anchor{share/gnu_free_documentation_license doc}@anchor{262}@anchor{share/gnu_free_documentation_license gnu-free-documentation-license}@anchor{263}\n+@anchor{share/gnu_free_documentation_license gnu-fdl}@anchor{1}@anchor{share/gnu_free_documentation_license doc}@anchor{25c}@anchor{share/gnu_free_documentation_license gnu-free-documentation-license}@anchor{25d}\n @chapter GNU Free Documentation License\n \n "}, {"sha": "b016193c099c3944616e76b4917f227031340966", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 113, "deletions": 6, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83d0680aba2d963d3f9c7ced7335d96f001e249/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83d0680aba2d963d3f9c7ced7335d96f001e249/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a83d0680aba2d963d3f9c7ced7335d96f001e249", "patch": "@@ -728,11 +728,9 @@ package body Sem_Ch6 is\n \n                Insert_After (Last (Decls), New_Body);\n \n-               --  Preanalyze the expression for name capture, except in an\n-               --  instance, where this has been done during generic analysis,\n-               --  and will be redone when analyzing the body.\n+               --  Preanalyze the expression if not already done above\n \n-               if not In_Instance then\n+               if not Inside_A_Generic then\n                   Push_Scope (Def_Id);\n                   Install_Formals (Def_Id);\n                   Preanalyze_Spec_Expression (Expr, Typ);\n@@ -2367,6 +2365,7 @@ package body Sem_Ch6 is\n       Desig_View : Entity_Id := Empty;\n       Exch_Views : Elist_Id  := No_Elist;\n       HSS        : Node_Id;\n+      Mask_Types : Elist_Id  := No_Elist;\n       Prot_Typ   : Entity_Id := Empty;\n       Spec_Decl  : Node_Id   := Empty;\n       Spec_Id    : Entity_Id;\n@@ -2442,6 +2441,12 @@ package body Sem_Ch6 is\n       --  Determine whether subprogram Subp_Id is a primitive of a concurrent\n       --  type that implements an interface and has a private view.\n \n+      function Mask_Unfrozen_Types (Spec_Id : Entity_Id) return Elist_Id;\n+      --  N is the body generated for an expression function that is not a\n+      --  completion and Spec_Id the defining entity of its spec. Mark all\n+      --  the not-yet-frozen types referenced by the simple return statement\n+      --  of the function as formally frozen.\n+\n       procedure Restore_Limited_Views (Restore_List : Elist_Id);\n       --  Undo the transformation done by Exchange_Limited_Views.\n \n@@ -2452,6 +2457,9 @@ package body Sem_Ch6 is\n       --  of an entity, we mark the entity as set in source to suppress any\n       --  warning on the stylized use of function stubs with a dummy return.\n \n+      procedure Unmask_Unfrozen_Types (Unmask_List : Elist_Id);\n+      --  Undo the transformation done by Mask_Unfrozen_Types\n+\n       procedure Verify_Overriding_Indicator;\n       --  If there was a previous spec, the entity has been entered in the\n       --  current scope previously. If the body itself carries an overriding\n@@ -3195,6 +3203,73 @@ package body Sem_Ch6 is\n          return False;\n       end Is_Private_Concurrent_Primitive;\n \n+      -------------------------\n+      -- Mask_Unfrozen_Types --\n+      -------------------------\n+\n+      function Mask_Unfrozen_Types (Spec_Id : Entity_Id) return Elist_Id is\n+         Result : Elist_Id := No_Elist;\n+\n+         function Mask_Type_Refs (Node : Node_Id) return Traverse_Result;\n+         --  Mask all types referenced in the subtree rooted at Node\n+\n+         --------------------\n+         -- Mask_Type_Refs --\n+         --------------------\n+\n+         function Mask_Type_Refs (Node : Node_Id) return Traverse_Result is\n+\n+            procedure Mask_Type (Typ : Entity_Id);\n+\n+            ---------------\n+            -- Mask_Type --\n+            ---------------\n+\n+            procedure Mask_Type (Typ : Entity_Id) is\n+            begin\n+               --  Skip Itypes created by the preanalysis\n+\n+               if Is_Itype (Typ)\n+                 and then Scope_Within_Or_Same (Scope (Typ), Spec_Id)\n+               then\n+                  return;\n+               end if;\n+\n+               if not Is_Frozen (Typ) then\n+                  Set_Is_Frozen (Typ);\n+                  Append_New_Elmt (Typ, Result);\n+               end if;\n+            end Mask_Type;\n+\n+         begin\n+            if Is_Entity_Name (Node) and then Present (Entity (Node)) then\n+               Mask_Type (Etype (Entity (Node)));\n+\n+               if Ekind_In (Entity (Node), E_Component, E_Discriminant) then\n+                  Mask_Type (Scope (Entity (Node)));\n+               end if;\n+\n+            elsif Nkind_In (Node, N_Aggregate, N_Null, N_Type_Conversion)\n+              and then Present (Etype (Node))\n+            then\n+               Mask_Type (Etype (Node));\n+            end if;\n+\n+            return OK;\n+         end Mask_Type_Refs;\n+\n+         procedure Mask_References is new Traverse_Proc (Mask_Type_Refs);\n+\n+         Return_Stmt : constant Node_Id :=\n+                         First (Statements (Handled_Statement_Sequence (N)));\n+      begin\n+         pragma Assert (Nkind (Return_Stmt) = N_Simple_Return_Statement);\n+\n+         Mask_References (Expression (Return_Stmt));\n+\n+         return Result;\n+      end Mask_Unfrozen_Types;\n+\n       ---------------------------\n       -- Restore_Limited_Views --\n       ---------------------------\n@@ -3236,6 +3311,20 @@ package body Sem_Ch6 is\n          end if;\n       end Set_Trivial_Subprogram;\n \n+      ---------------------------\n+      -- Unmask_Unfrozen_Types --\n+      ---------------------------\n+\n+      procedure Unmask_Unfrozen_Types (Unmask_List : Elist_Id) is\n+         Elmt : Elmt_Id := First_Elmt (Unmask_List);\n+\n+      begin\n+         while Present (Elmt) loop\n+            Set_Is_Frozen (Node (Elmt), False);\n+            Next_Elmt (Elmt);\n+         end loop;\n+      end Unmask_Unfrozen_Types;\n+\n       ---------------------------------\n       -- Verify_Overriding_Indicator --\n       ---------------------------------\n@@ -3610,8 +3699,22 @@ package body Sem_Ch6 is\n                        or else (Operating_Mode = Check_Semantics\n                                   and then Serious_Errors_Detected = 0))\n          then\n-            Set_Has_Delayed_Freeze (Spec_Id);\n-            Freeze_Before (N, Spec_Id);\n+            --  The body generated for an expression function that is not a\n+            --  completion is a freeze point neither for the profile nor for\n+            --  anything else. That's why, in order to prevent any freezing\n+            --  during analysis, we need to mask types declared outside the\n+            --  expression that are not yet frozen.\n+\n+            if Nkind (N) = N_Subprogram_Body\n+              and then Was_Expression_Function (N)\n+              and then not Has_Completion (Spec_Id)\n+            then\n+               Set_Is_Frozen (Spec_Id);\n+               Mask_Types := Mask_Unfrozen_Types (Spec_Id);\n+            else\n+               Set_Has_Delayed_Freeze (Spec_Id);\n+               Freeze_Before (N, Spec_Id);\n+            end if;\n          end if;\n       end if;\n \n@@ -4455,6 +4558,10 @@ package body Sem_Ch6 is\n          Restore_Limited_Views (Exch_Views);\n       end if;\n \n+      if Mask_Types /= No_Elist then\n+         Unmask_Unfrozen_Types (Mask_Types);\n+      end if;\n+\n       if Present (Desig_View) then\n          Set_Directly_Designated_Type (Etype (Spec_Id), Desig_View);\n       end if;"}, {"sha": "af1a4e7b32e0f1469086eace199009180b772614", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83d0680aba2d963d3f9c7ced7335d96f001e249/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83d0680aba2d963d3f9c7ced7335d96f001e249/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=a83d0680aba2d963d3f9c7ced7335d96f001e249", "patch": "@@ -11450,7 +11450,7 @@ package body Sem_Res is\n \n    begin\n       --  Do not perform this transformation within a pre/postcondition,\n-      --  because the expression will be re-analyzed, and the transformation\n+      --  because the expression will be reanalyzed, and the transformation\n       --  might affect the visibility of the operator, e.g. in an instance.\n       --  Note that fully analyzed and expanded pre/postconditions appear as\n       --  pragma Check equivalents.\n@@ -11459,6 +11459,22 @@ package body Sem_Res is\n          return;\n       end if;\n \n+      --  Likewise when an expression function is being preanalyzed, since the\n+      --  expression will be reanalyzed as part of the generated body.\n+\n+      if In_Spec_Expression then\n+         declare\n+            S : constant Entity_Id := Current_Scope_No_Loops;\n+         begin\n+            if Ekind (S) = E_Function\n+              and then Nkind (Original_Node (Unit_Declaration_Node (S)))\n+                                                        = N_Expression_Function\n+            then\n+               return;\n+            end if;\n+         end;\n+      end if;\n+\n       --  Rewrite the operator node using the real operator, not its renaming.\n       --  Exclude user-defined intrinsic operations of the same name, which are\n       --  treated separately and rewritten as calls."}]}