{"sha": "1cde5d85bec20877bed063fc0046b9885231a0ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNkZTVkODViZWMyMDg3N2JlZDA2M2ZjMDA0NmI5ODg1MjMxYTBhZQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2020-10-09T08:46:50Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-10-09T08:57:51Z"}, "message": "Fix for PR97317.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/97317\n\t* range-op.cc (operator_cast::op1_range): Handle casts where the precision\n\tof the RHS is only 1 greater than the precision of the LHS.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/pr97317.c: New test.", "tree": {"sha": "b9c68e4d5a6df39394df2f5df72b1da31fad180f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9c68e4d5a6df39394df2f5df72b1da31fad180f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cde5d85bec20877bed063fc0046b9885231a0ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cde5d85bec20877bed063fc0046b9885231a0ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cde5d85bec20877bed063fc0046b9885231a0ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cde5d85bec20877bed063fc0046b9885231a0ae/comments", "author": null, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0e6e49ddedb05e2e112e5c19a2228efd016e871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e6e49ddedb05e2e112e5c19a2228efd016e871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e6e49ddedb05e2e112e5c19a2228efd016e871"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "d1a11b34894e9410cf43d2744b2d348f219e0576", "filename": "gcc/range-op.cc", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cde5d85bec20877bed063fc0046b9885231a0ae/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cde5d85bec20877bed063fc0046b9885231a0ae/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=1cde5d85bec20877bed063fc0046b9885231a0ae", "patch": "@@ -1849,14 +1849,25 @@ operator_cast::op1_range (irange &r, tree type,\n \t\t\t\t\t\t\t  type,\n \t\t\t\t\t\t\t  converted_lhs,\n \t\t\t\t\t\t\t  lim_range);\n-\t  // And union this with the entire outer types negative range.\n-\t  int_range_max neg (type,\n-\t\t\t     wi::min_value (TYPE_PRECISION (type),\n-\t\t\t\t\t    SIGNED),\n-\t\t\t     lim - 1);\n-\t  neg.union_ (lhs_neg);\n+\t  // lhs_neg now has all the negative versions of the LHS.\n+\t  // Now union in all the values from SIGNED MIN (0x80000) to\n+\t  // lim-1 in order to fill in all the ranges with the upper\n+\t  // bits set.\n+\n+\t  // PR 97317.  If the lhs has only 1 bit less precision than the rhs,\n+\t  // we don't need to create a range from min to lim-1\n+\t  // calculate neg range traps trying to create [lim, lim - 1].\n+\t  wide_int min_val = wi::min_value (TYPE_PRECISION (type), SIGNED);\n+\t  if (lim != min_val)\n+\t    {\n+\t      int_range_max neg (type,\n+\t\t\t\t wi::min_value (TYPE_PRECISION (type),\n+\t\t\t\t\t\tSIGNED),\n+\t\t\t\t lim - 1);\n+\t      lhs_neg.union_ (neg);\n+\t    }\n \t  // And finally, munge the signed and unsigned portions.\n-\t  r.union_ (neg);\n+\t  r.union_ (lhs_neg);\n \t}\n       // And intersect with any known value passed in the extra operand.\n       r.intersect (op2);"}, {"sha": "f07327ac9a2a89f4c681ffc3b6a4ab7c0f1ea4d8", "filename": "gcc/testsuite/gcc.dg/pr97317.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cde5d85bec20877bed063fc0046b9885231a0ae/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97317.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cde5d85bec20877bed063fc0046b9885231a0ae/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97317.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97317.c?ref=1cde5d85bec20877bed063fc0046b9885231a0ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+struct a {\n+  unsigned c : 17;\n+};\n+struct a b;\n+int d(void) {\n+  short e = b.c;\n+  return e ? 0 : b.c;\n+}"}]}