{"sha": "f2f48b68a6a586f40dd8ae0e6d391b7f88756eec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJmNDhiNjhhNmE1ODZmNDBkZDhhZTBlNmQzOTFiN2Y4ODc1NmVlYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-28T22:41:13Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-28T22:41:13Z"}, "message": "libstdc++: Fix common_type specializations for duration\n\nMy recent change to implement P0548 (\"common_type and duration\") was not\ncorrect. The result of common_type_t<duration<R,P>, duration<R,P>>\nshould be duration<common_type_t<R>, P::type>, not duration<R, P::type>.\nThe common_type specialization for two different duration types was\ncorrect, but the specializations for a single duration type (which only\nexist to optimize compilation time) were wrong.\n\nThis fixes the partial specializations of common_type for a single\nduration type, and also the return types of duration::operator+ and\nduration::operator- which are supposed to use common_type_t<duration>.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/chrono (common_type): Fix partial specializations\n\tfor a single duration type to use the common_type of the rep.\n\t(duration::operator+, duration::operator-): Fix return types\n\tto also use the common_type of the rep.\n\t* testsuite/20_util/duration/requirements/reduced_period.cc:\n\tCheck duration using a rep that has common_type specialized.", "tree": {"sha": "8fcc850276bf8a3648a74a78f4d9fb4a71a95a1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fcc850276bf8a3648a74a78f4d9fb4a71a95a1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2f48b68a6a586f40dd8ae0e6d391b7f88756eec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f48b68a6a586f40dd8ae0e6d391b7f88756eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2f48b68a6a586f40dd8ae0e6d391b7f88756eec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f48b68a6a586f40dd8ae0e6d391b7f88756eec/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82db1a42e9254c9009bbf8ac01366da4d1ab6df5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82db1a42e9254c9009bbf8ac01366da4d1ab6df5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82db1a42e9254c9009bbf8ac01366da4d1ab6df5"}], "stats": {"total": 70, "additions": 64, "deletions": 6}, "files": [{"sha": "524d23ea6a78535cef775d5efd6a5106820d2a35", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f48b68a6a586f40dd8ae0e6d391b7f88756eec/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f48b68a6a586f40dd8ae0e6d391b7f88756eec/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=f2f48b68a6a586f40dd8ae0e6d391b7f88756eec", "patch": "@@ -114,13 +114,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Rep, typename _Period>\n     struct common_type<chrono::duration<_Rep, _Period>,\n \t\t       chrono::duration<_Rep, _Period>>\n-    { using type = chrono::duration<_Rep, typename _Period::type>; };\n+    {\n+      using type = chrono::duration<typename common_type<_Rep>::type,\n+\t\t\t\t    typename _Period::type>;\n+    };\n \n   /// Specialization of common_type for one chrono::duration type.\n   /// @relates duration\n   template<typename _Rep, typename _Period>\n     struct common_type<chrono::duration<_Rep, _Period>>\n-    { using type = chrono::duration<_Rep, typename _Period::type>; };\n+    {\n+      using type = chrono::duration<typename common_type<_Rep>::type,\n+\t\t\t\t    typename _Period::type>;\n+    };\n \n   // 20.11.4.3 specialization of common_type (for time_point, sfinae-friendly)\n \n@@ -463,13 +469,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \t// 20.11.5.3 arithmetic\n \n-\tconstexpr duration<rep, period>\n+\tconstexpr duration<typename common_type<rep>::type, period>\n \toperator+() const\n-\t{ return *this; }\n+\t{ return duration<typename common_type<rep>::type, period>(__r); }\n \n-\tconstexpr duration<rep, period>\n+\tconstexpr duration<typename common_type<rep>::type, period>\n \toperator-() const\n-\t{ return duration(-__r); }\n+\t{ return duration<typename common_type<rep>::type, period>(-__r); }\n \n \t_GLIBCXX17_CONSTEXPR duration&\n \toperator++()"}, {"sha": "4c7472699d21d90e16daa8b6c3e9f786e2b5e2b7", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/reduced_period.cc", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2f48b68a6a586f40dd8ae0e6d391b7f88756eec/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Freduced_period.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2f48b68a6a586f40dd8ae0e6d391b7f88756eec/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Freduced_period.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Freduced_period.cc?ref=f2f48b68a6a586f40dd8ae0e6d391b7f88756eec", "patch": "@@ -129,3 +129,55 @@ test02()\n   static_assert( is_same<decltype(-d3), common_type<D3>::type>::value,\n       \"unary - returns the reduced duration\" );\n }\n+\n+template<typename T>\n+struct Number\n+{\n+  explicit\n+  Number(T t = 0) : i(t)\n+  { }\n+\n+  template<typename U, bool B = std::is_convertible<U, T>::value,\n+\t   typename = typename std::enable_if<B>::type>\n+    explicit\n+    Number(Number<U> n) : i(n.i)\n+    { }\n+\n+  T i = 0;\n+\n+  Number& operator+=(Number n) { i += n.i; return *this; }\n+  Number& operator-=(Number n) { i -= n.i; return *this; }\n+  Number& operator*=(Number n) { i *= n.i; return *this; }\n+  Number& operator/=(Number n) { i /= n.i; return *this; }\n+  Number& operator%=(Number n) { i %= n.i; return *this; }\n+\n+  Number operator+(Number n) { return { i + n.i }; }\n+  Number operator-(Number n) { return { i - n.i }; }\n+  Number operator*(Number n) { return { i * n.i }; }\n+  Number operator/(Number n) { return { i / n.i }; }\n+  Number operator%(Number n) { return { i % n.i }; }\n+};\n+\n+namespace std\n+{\n+  // Specialise common_type to give a different type\n+  template<>\n+    struct common_type<Number<int>, Number<int>>\n+    { using type = Number<long>; };\n+}\n+\n+void\n+test03()\n+{\n+\n+  using D4 = duration<Number<int>, ratio<49, 21>>;\n+  static_assert( is_same<common_type<D4>::type,\n+\t\t\t duration<Number<long>, ratio<7, 3>>>::value,\n+      \"common_type_t<duration<R,P>> uses common_type_t<R>\" );\n+\n+  D4 d4;\n+  static_assert( is_same<decltype(+d4), common_type<D4>::type>::value,\n+      \"unary + returns type with common_type_t<D4::rep> as rep\" );\n+  static_assert( is_same<decltype(-d4), common_type<D4>::type>::value,\n+      \"unary - returns type with common_type_t<D4::rep> as rep\" );\n+}"}]}