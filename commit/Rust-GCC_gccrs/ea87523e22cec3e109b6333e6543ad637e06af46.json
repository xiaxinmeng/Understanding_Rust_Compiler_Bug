{"sha": "ea87523e22cec3e109b6333e6543ad637e06af46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE4NzUyM2UyMmNlYzNlMTA5YjYzMzNlNjU0M2FkNjM3ZTA2YWY0Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-23T22:14:26Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-23T22:14:26Z"}, "message": "(expand_expr, case MINUS_EXPR): When expanding an initializer, use\nplus_constant as appropriate.\n\nFrom-SVN: r6283", "tree": {"sha": "3c73c55bd80d0aa62519c6ccc2aee12eb9f93e8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c73c55bd80d0aa62519c6ccc2aee12eb9f93e8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea87523e22cec3e109b6333e6543ad637e06af46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea87523e22cec3e109b6333e6543ad637e06af46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea87523e22cec3e109b6333e6543ad637e06af46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea87523e22cec3e109b6333e6543ad637e06af46/comments", "author": null, "committer": null, "parents": [{"sha": "5d49bd0cf28aa922b54efce5e1ecfcebc971d457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d49bd0cf28aa922b54efce5e1ecfcebc971d457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d49bd0cf28aa922b54efce5e1ecfcebc971d457"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "ed9f6eb288250e6f6b949ad34332f81fa305b8e8", "filename": "gcc/expr.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea87523e22cec3e109b6333e6543ad637e06af46/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea87523e22cec3e109b6333e6543ad637e06af46/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ea87523e22cec3e109b6333e6543ad637e06af46", "patch": "@@ -4870,6 +4870,9 @@ expand_expr (exp, target, tmode, modifier)\n       return temp ? temp : gen_rtx (PLUS, mode, op0, op1);\n \n     case MINUS_EXPR:\n+      /* For initializers, we are allowed to return a MINUS of two\n+\t symbolic constants.  Here we handle all cases when both operands\n+\t are constant.  */\n       /* Handle difference of two symbolic constants,\n \t for the sake of an initializer.  */\n       if ((modifier == EXPAND_SUM || modifier == EXPAND_INITIALIZER)\n@@ -4880,7 +4883,17 @@ expand_expr (exp, target, tmode, modifier)\n \t\t\t\t VOIDmode, modifier);\n \t  rtx op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX,\n \t\t\t\t VOIDmode, modifier);\n-\t  return gen_rtx (MINUS, mode, op0, op1);\n+\n+\t  /* If one operand is a CONST_INT, put it last.  */\n+\t  if (GET_CODE (op0) == CONST_INT)\n+\t    temp = op0, op0 = op1, op1 = temp;\n+\n+\t  /* If the last operand is a CONST_INT, use plus_constant of\n+\t     the negated constant.  Else make the MINUS.  */\n+\t  if (GET_CODE (op1) == CONST_INT)\n+\t    return plus_constant (op0, - INTVAL (op1));\n+\t  else\n+\t    return gen_rtx (MINUS, mode, op0, op1);\n \t}\n       /* Convert A - const to A + (-const).  */\n       if (TREE_CODE (TREE_OPERAND (exp, 1)) == INTEGER_CST)"}]}