{"sha": "cfd719e7769fd43fbfecfc0c8f69d5f05e54169b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZkNzE5ZTc3NjlmZDQzZmJmZWNmYzBjOGY2OWQ1ZjA1ZTU0MTY5Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-01-05T21:14:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-01-05T21:14:19Z"}, "message": "re PR tree-optimization/71016 (Redundant sign extension with conditional __builtin_clzl)\n\n\tPR tree-optimization/71016\n\t* tree-ssa-phiopt.c (tree_ssa_phiopt_worker): Pass cond_stmt to\n\tfactor_out_conditional_conversion.  Formatting fix.\n\t(factor_out_conditional_conversion): Add cond_stmt argument.\n\tIf arg1 is INTEGER_CST, punt if new_arg0 is not any operand of\n\tcond_stmt and if arg0_def_stmt is not the only stmt in its bb.\n\tFormatting fix.\n\n\t* gcc.target/i386/pr71016.c: New test.\n\t* gcc.target/aarch64/pr71016.c: New test.\n\t* gcc.dg/tree-ssa/pr66726-3.c: New test.\n\nFrom-SVN: r244114", "tree": {"sha": "b56fb744d9f892b66b366fb97ea74b0afeb48d32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b56fb744d9f892b66b366fb97ea74b0afeb48d32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfd719e7769fd43fbfecfc0c8f69d5f05e54169b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfd719e7769fd43fbfecfc0c8f69d5f05e54169b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfd719e7769fd43fbfecfc0c8f69d5f05e54169b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfd719e7769fd43fbfecfc0c8f69d5f05e54169b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26f203712b9a90913473a1a75ce6f96783a6ec65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f203712b9a90913473a1a75ce6f96783a6ec65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f203712b9a90913473a1a75ce6f96783a6ec65"}], "stats": {"total": 92, "additions": 85, "deletions": 7}, "files": [{"sha": "8e51cee930bf77991fa1de3520d8b3138cc99551", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfd719e7769fd43fbfecfc0c8f69d5f05e54169b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfd719e7769fd43fbfecfc0c8f69d5f05e54169b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfd719e7769fd43fbfecfc0c8f69d5f05e54169b", "patch": "@@ -1,3 +1,13 @@\n+2017-01-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/71016\n+\t* tree-ssa-phiopt.c (tree_ssa_phiopt_worker): Pass cond_stmt to\n+\tfactor_out_conditional_conversion.  Formatting fix.\n+\t(factor_out_conditional_conversion): Add cond_stmt argument.\n+\tIf arg1 is INTEGER_CST, punt if new_arg0 is not any operand of\n+\tcond_stmt and if arg0_def_stmt is not the only stmt in its bb.\n+\tFormatting fix.\n+\n 2017-01-05  David Malcolm  <dmalcolm@redhat.com>\n \n \t* Makefile.in (OBJS): Add read-md.o, read-rtl.o,"}, {"sha": "e99e399278d9e5c031684383f791c7838625b2ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfd719e7769fd43fbfecfc0c8f69d5f05e54169b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfd719e7769fd43fbfecfc0c8f69d5f05e54169b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cfd719e7769fd43fbfecfc0c8f69d5f05e54169b", "patch": "@@ -1,5 +1,10 @@\n 2017-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/71016\n+\t* gcc.target/i386/pr71016.c: New test.\n+\t* gcc.target/aarch64/pr71016.c: New test.\n+\t* gcc.dg/tree-ssa/pr66726-3.c: New test.\n+\n \tPR c++/78931\n \t* g++.dg/cpp1z/decomp19.C: New test.\n "}, {"sha": "55c7a14ad193c3437d6be85888d45a5e0578614d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr66726-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfd719e7769fd43fbfecfc0c8f69d5f05e54169b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66726-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfd719e7769fd43fbfecfc0c8f69d5f05e54169b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66726-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66726-3.c?ref=cfd719e7769fd43fbfecfc0c8f69d5f05e54169b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"MIN_EXPR\" 1 \"optimized\" } } */\n+\n+extern unsigned short mode_size[];\n+\n+int\n+oof (int mode)\n+{\n+  int tem;\n+  if (64 < mode_size[mode])\n+    tem = 64;\n+  else\n+    tem = mode_size[mode];\n+  return tem;\n+}"}, {"sha": "f50d69395ce2a37ffce51409f0b77e60066faed2", "filename": "gcc/testsuite/gcc.target/aarch64/pr71016.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfd719e7769fd43fbfecfc0c8f69d5f05e54169b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr71016.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfd719e7769fd43fbfecfc0c8f69d5f05e54169b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr71016.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr71016.c?ref=cfd719e7769fd43fbfecfc0c8f69d5f05e54169b", "patch": "@@ -0,0 +1,10 @@\n+/* PR tree-optimization/71016 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"sxtw\" } } */\n+\n+long int\n+foo (long int i)\n+{\n+  return i == 0 ? 17 : __builtin_clzl (i);\n+}"}, {"sha": "d5a89ebd39358910c64cd4380a10ab511fe65ba5", "filename": "gcc/testsuite/gcc.target/i386/pr71016.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfd719e7769fd43fbfecfc0c8f69d5f05e54169b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71016.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfd719e7769fd43fbfecfc0c8f69d5f05e54169b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71016.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71016.c?ref=cfd719e7769fd43fbfecfc0c8f69d5f05e54169b", "patch": "@@ -0,0 +1,10 @@\n+/* PR tree-optimization/71016 */\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O2 -mlzcnt\" } */\n+/* { dg-final { scan-assembler-not \"cltq\" } } */\n+\n+long int\n+foo (long int i)\n+{\n+  return i == 0 ? 17 : __builtin_clzl (i);\n+}"}, {"sha": "07a226e149c48f9bd61a4ec733156c32c6138879", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfd719e7769fd43fbfecfc0c8f69d5f05e54169b/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfd719e7769fd43fbfecfc0c8f69d5f05e54169b/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=cfd719e7769fd43fbfecfc0c8f69d5f05e54169b", "patch": "@@ -49,7 +49,8 @@ along with GCC; see the file COPYING3.  If not see\n static unsigned int tree_ssa_phiopt_worker (bool, bool);\n static bool conditional_replacement (basic_block, basic_block,\n \t\t\t\t     edge, edge, gphi *, tree, tree);\n-static gphi *factor_out_conditional_conversion (edge, edge, gphi *, tree, tree);\n+static gphi *factor_out_conditional_conversion (edge, edge, gphi *, tree, tree,\n+\t\t\t\t\t\tgimple *);\n static int value_replacement (basic_block, basic_block,\n \t\t\t      edge, edge, gimple *, tree, tree);\n static bool minmax_replacement (basic_block, basic_block,\n@@ -233,7 +234,7 @@ tree_ssa_phiopt_worker (bool do_store_elim, bool do_hoist_loads)\n \t  continue;\n \t}\n       else if (do_hoist_loads\n-\t\t && EDGE_SUCC (bb1, 0)->dest == EDGE_SUCC (bb2, 0)->dest)\n+\t       && EDGE_SUCC (bb1, 0)->dest == EDGE_SUCC (bb2, 0)->dest)\n \t{\n \t  basic_block bb3 = EDGE_SUCC (bb1, 0)->dest;\n \n@@ -313,7 +314,8 @@ tree_ssa_phiopt_worker (bool do_store_elim, bool do_hoist_loads)\n \t  gcc_assert (arg0 != NULL_TREE && arg1 != NULL_TREE);\n \n \t  gphi *newphi = factor_out_conditional_conversion (e1, e2, phi,\n-\t\t\t\t\t\t\t    arg0, arg1);\n+\t\t\t\t\t\t\t    arg0, arg1,\n+\t\t\t\t\t\t\t    cond_stmt);\n \t  if (newphi != NULL)\n \t    {\n \t      phi = newphi;\n@@ -402,11 +404,12 @@ replace_phi_edge_with_variable (basic_block cond_block,\n \n /* PR66726: Factor conversion out of COND_EXPR.  If the arguments of the PHI\n    stmt are CONVERT_STMT, factor out the conversion and perform the conversion\n-   to the result of PHI stmt.  Return the newly-created PHI, if any.  */\n+   to the result of PHI stmt.  COND_STMT is the controlling predicate.\n+   Return the newly-created PHI, if any.  */\n \n static gphi *\n factor_out_conditional_conversion (edge e0, edge e1, gphi *phi,\n-\t\t\t\t   tree arg0, tree arg1)\n+\t\t\t\t   tree arg0, tree arg1, gimple *cond_stmt)\n {\n   gimple *arg0_def_stmt = NULL, *arg1_def_stmt = NULL, *new_stmt;\n   tree new_arg0 = NULL_TREE, new_arg1 = NULL_TREE;\n@@ -472,7 +475,31 @@ factor_out_conditional_conversion (edge e0, edge e1, gphi *phi,\n \t  && int_fits_type_p (arg1, TREE_TYPE (new_arg0)))\n \t{\n \t  if (gimple_assign_cast_p (arg0_def_stmt))\n-\t    new_arg1 = fold_convert (TREE_TYPE (new_arg0), arg1);\n+\t    {\n+\t      /* For the INTEGER_CST case, we are just moving the\n+\t\t conversion from one place to another, which can often\n+\t\t hurt as the conversion moves further away from the\n+\t\t statement that computes the value.  So, perform this\n+\t\t only if new_arg0 is an operand of COND_STMT, or\n+\t\t if arg0_def_stmt is the only non-debug stmt in\n+\t\t its basic block, because then it is possible this\n+\t\t could enable further optimizations (minmax replacement\n+\t\t etc.).  See PR71016.  */\n+\t      if (new_arg0 != gimple_cond_lhs (cond_stmt)\n+\t\t  && new_arg0 != gimple_cond_rhs (cond_stmt)\n+\t\t  && gimple_bb (arg0_def_stmt) == e0->src)\n+\t\t{\n+\t\t  gsi = gsi_for_stmt (arg0_def_stmt);\n+\t\t  gsi_prev_nondebug (&gsi);\n+\t\t  if (!gsi_end_p (gsi))\n+\t\t    return NULL;\n+\t\t  gsi = gsi_for_stmt (arg0_def_stmt);\n+\t\t  gsi_next_nondebug (&gsi);\n+\t\t  if (!gsi_end_p (gsi))\n+\t\t    return NULL;\n+\t\t}\n+\t      new_arg1 = fold_convert (TREE_TYPE (new_arg0), arg1);\n+\t    }\n \t  else\n \t    return NULL;\n \t}\n@@ -524,7 +551,7 @@ factor_out_conditional_conversion (edge e0, edge e1, gphi *phi,\n   /* Create the conversion stmt and insert it.  */\n   if (convert_code == VIEW_CONVERT_EXPR)\n     temp = fold_build1 (VIEW_CONVERT_EXPR, TREE_TYPE (result), temp);\n-  new_stmt = gimple_build_assign (result,  convert_code, temp);\n+  new_stmt = gimple_build_assign (result, convert_code, temp);\n   gsi = gsi_after_labels (gimple_bb (phi));\n   gsi_insert_before (&gsi, new_stmt, GSI_SAME_STMT);\n "}]}