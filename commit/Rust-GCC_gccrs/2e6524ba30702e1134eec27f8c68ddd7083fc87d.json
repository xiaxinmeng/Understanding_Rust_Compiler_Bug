{"sha": "2e6524ba30702e1134eec27f8c68ddd7083fc87d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU2NTI0YmEzMDcwMmUxMTM0ZWVjMjdmOGM2OGRkZDcwODNmYzg3ZA==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2007-02-03T01:01:06Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2007-02-03T01:01:06Z"}, "message": "re PR fortran/30683 ([4.2 only] internal compiler error: Segmentation fault)\n\n2007-02-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/30683\n\t* resolve.c (resolve_generic_f): Check for non-NULL sym.\n\t* gfortran.dg/interface_10.f90: New test.\n\nFrom-SVN: r121531", "tree": {"sha": "657d740d12e0c9e7f9311224caa3792a23c186b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/657d740d12e0c9e7f9311224caa3792a23c186b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e6524ba30702e1134eec27f8c68ddd7083fc87d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6524ba30702e1134eec27f8c68ddd7083fc87d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e6524ba30702e1134eec27f8c68ddd7083fc87d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6524ba30702e1134eec27f8c68ddd7083fc87d/comments", "author": null, "committer": null, "parents": [{"sha": "86ad1da0d37954a467a6045b82fb4ba30ef39e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ad1da0d37954a467a6045b82fb4ba30ef39e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86ad1da0d37954a467a6045b82fb4ba30ef39e23"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "0b256742474c9c70e14f28d42a0f735bd16329b7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6524ba30702e1134eec27f8c68ddd7083fc87d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6524ba30702e1134eec27f8c68ddd7083fc87d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2e6524ba30702e1134eec27f8c68ddd7083fc87d", "patch": "@@ -1,3 +1,8 @@\n+2007-02-02  Steven G. Kargl <kargl@gcc.gnu.org>\n+\n+\tPR fortran/30683\n+\t* resolve.c (resolve_generic_f): Check for non-NULL sym.\n+\n 2007-02-02  Roger Sayle  <roger@eyesopen.com>\n \n \t* trans.c (gfc_build_array_ref): Use STRIP_TYPE_NOPS to eliminate"}, {"sha": "41e13b0928f7c65d5ced0eb6bd0f176a89008af2", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6524ba30702e1134eec27f8c68ddd7083fc87d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6524ba30702e1134eec27f8c68ddd7083fc87d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=2e6524ba30702e1134eec27f8c68ddd7083fc87d", "patch": "@@ -1315,7 +1315,7 @@ resolve_generic_f (gfc_expr *expr)\n \n   /* Last ditch attempt.  See if the reference is to an intrinsic\n      that possesses a matching interface.  14.1.2.4  */\n-  if (!gfc_intrinsic_name (sym->name, 0))\n+  if (sym && !gfc_intrinsic_name (sym->name, 0))\n     {\n       gfc_error (\"There is no specific function for the generic '%s' at %L\",\n \t\t expr->symtree->n.sym->name, &expr->where);"}, {"sha": "67b1ae96d691be2fb9bf2e03ccf0240b0c8677c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6524ba30702e1134eec27f8c68ddd7083fc87d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6524ba30702e1134eec27f8c68ddd7083fc87d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e6524ba30702e1134eec27f8c68ddd7083fc87d", "patch": "@@ -1,3 +1,8 @@\n+2007-02-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/30683\n+\t* gfortran.dg/interface_10.f90: New test.\n+\n 2007-02-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/builtins-20.c: Add more cases."}, {"sha": "0da59a3b1850c1dc2a2fd3e63d47473d22be05dc", "filename": "gcc/testsuite/gfortran.dg/interface_10.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6524ba30702e1134eec27f8c68ddd7083fc87d/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6524ba30702e1134eec27f8c68ddd7083fc87d/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_10.f90?ref=2e6524ba30702e1134eec27f8c68ddd7083fc87d", "patch": "@@ -0,0 +1,57 @@\n+! { dg-do compile }\n+! PR fortran/30683\n+! Code contributed by Salvatore Filippone.\n+!\n+module class_fld\n+   integer, parameter :: int_ = 1\n+  integer, parameter :: bnd_ = 2\n+  type fld\n+     integer                 :: size(2)\n+  end type fld\n+  !\n+  !  This interface is renaming the SIZE intrinsic procedure,  \n+  !  which led to a segmentation fault when trying to resolve\n+  !  the intrinsic symbol name.\n+  !\n+  interface size\n+     module procedure get_fld_size\n+  end interface\n+contains\n+  function get_fld_size(f)\n+    integer :: get_fld_size(2)\n+    type(fld), intent(in) :: f\n+    get_fld_size(int_) = f%size(int_)\n+    get_fld_size(bnd_) = f%size(bnd_)\n+  end function get_fld_size\n+end module class_fld\n+\n+module class_s_fld\n+  use class_fld\n+  type s_fld\n+     type(fld) :: base\n+     real(kind(1.d0)), pointer :: x(:)  => null()\n+  end type s_fld\n+  interface x_\n+     module procedure get_s_fld_x\n+  end interface\n+contains\n+  function get_s_fld_x(fld)\n+    real(kind(1.d0)), pointer :: get_s_fld_x(:)\n+    type(s_fld), intent(in) :: fld\n+    get_s_fld_x => fld%x\n+  end function get_s_fld_x\n+end module class_s_fld\n+\n+module class_s_foo\n+contains\n+  subroutine solve_s_foo(phi,var)\n+    use class_s_fld\n+    type(s_fld), intent(inout) :: phi\n+    real(kind(1.d0)), intent(out), optional :: var\n+    integer :: nsz\n+    real(kind(1.d0)), pointer :: x(:)\n+    x => x_(phi)\n+    nsz=size(x)\n+  end subroutine solve_s_foo\n+end module class_s_foo\n+! { dg-final { cleanup-modules \"class_s_fld class_fld class_s_foo\" } }"}]}