{"sha": "a300121e62712fdafb2b508f8a392cffccf075c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMwMDEyMWU2MjcxMmZkYWZiMmI1MDhmOGEzOTJjZmZjY2YwNzVjOA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-04-28T05:48:18Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-04-28T05:48:18Z"}, "message": "re PR fortran/48112 (generic interface to external function in module)\n\n2011-04-28  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/48112\n        * resolve.c (resolve_fl_var_and_proc): Print diagnostic of\n        function results only once.\n        (resolve_symbol): Always resolve function results.\n\n        PR fortran/48279\n        * expr.c (gfc_check_vardef_context): Fix handling of generic\n        EXPR_FUNCTION.\n        * interface.c (check_interface0): Reject internal functions\n        in generic interfaces, unless -std=gnu.\n\n2011-04-28  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/48112\n        PR fortran/48279\n        * gfortran.dg/interface_35.f90: New.\n        * gfortran.dg/erfc_scaled_1.f90: Don't compile with -pedantic.\n        * gfortran.dg/func_result_6.f90: Add dg-warning.\n        * gfortran.dg/bessel_1.f90: Ditto.\n        * gfortran.dg/hypot_1.f90: Ditto.\n        * gfortran.dg/proc_ptr_comp_20.f90: Ditto.\n        * gfortran.dg/proc_ptr_comp_21.f90: Ditto.\n        * gfortran.dg/interface_assignment_4.f90: Ditto.\n\nFrom-SVN: r173059", "tree": {"sha": "31b49be6d13c3e57672ee9ca8ef933d27ecce92c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31b49be6d13c3e57672ee9ca8ef933d27ecce92c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a300121e62712fdafb2b508f8a392cffccf075c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a300121e62712fdafb2b508f8a392cffccf075c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a300121e62712fdafb2b508f8a392cffccf075c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a300121e62712fdafb2b508f8a392cffccf075c8/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77a30e9a5f8ffbf06702de86d9b58e075d1ddc71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a30e9a5f8ffbf06702de86d9b58e075d1ddc71"}], "stats": {"total": 161, "additions": 142, "deletions": 19}, "files": [{"sha": "7f797b4acf93725b6be973a98ac60caf41264da5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a300121e62712fdafb2b508f8a392cffccf075c8", "patch": "@@ -1,3 +1,16 @@\n+2011-04-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48112\n+\t* resolve.c (resolve_fl_var_and_proc): Print diagnostic of\n+\tfunction results only once.\n+\t(resolve_symbol): Always resolve function results.\n+\n+\tPR fortran/48279\n+\t* expr.c (gfc_check_vardef_context): Fix handling of generic\n+\tEXPR_FUNCTION.\n+\t* interface.c (check_interface0): Reject internal functions\n+\tin generic interfaces, unless -std=gnu.\n+\n 2011-04-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48788"}, {"sha": "3d519db4df25b4c3db34c240236de06b7d58cdb3", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=a300121e62712fdafb2b508f8a392cffccf075c8", "patch": "@@ -4371,15 +4371,26 @@ gfc_build_intrinsic_call (const char* name, locus where, unsigned numarg, ...)\n gfc_try\n gfc_check_vardef_context (gfc_expr* e, bool pointer, const char* context)\n {\n-  gfc_symbol* sym;\n+  gfc_symbol* sym = NULL;\n   bool is_pointer;\n   bool check_intentin;\n   bool ptr_component;\n   symbol_attribute attr;\n   gfc_ref* ref;\n \n+  if (e->expr_type == EXPR_VARIABLE)\n+    {\n+      gcc_assert (e->symtree);\n+      sym = e->symtree->n.sym;\n+    }\n+  else if (e->expr_type == EXPR_FUNCTION)\n+    {\n+      gcc_assert (e->symtree);\n+      sym = e->value.function.esym ? e->value.function.esym : e->symtree->n.sym;\n+    }\n+\n   if (!pointer && e->expr_type == EXPR_FUNCTION\n-      && e->symtree->n.sym->result->attr.pointer)\n+      && sym->result->attr.pointer)\n     {\n       if (!(gfc_option.allow_std & GFC_STD_F2008))\n \t{\n@@ -4397,9 +4408,6 @@ gfc_check_vardef_context (gfc_expr* e, bool pointer, const char* context)\n       return FAILURE;\n     }\n \n-  gcc_assert (e->symtree);\n-  sym = e->symtree->n.sym;\n-\n   if (!pointer && sym->attr.flavor == FL_PARAMETER)\n     {\n       if (context)"}, {"sha": "1f757247a99c81c2bc6ad74f94c4f70440df9594", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=a300121e62712fdafb2b508f8a392cffccf075c8", "patch": "@@ -1128,6 +1128,12 @@ check_interface0 (gfc_interface *p, const char *interface_name)\n \t\t     \" or all FUNCTIONs\", interface_name, &p->sym->declared_at);\n \t  return 1;\n \t}\n+\n+      if (p->sym->attr.proc == PROC_INTERNAL\n+\t  && gfc_notify_std (GFC_STD_GNU, \"Extension: Internal procedure '%s' \"\n+\t\t\t     \"in %s at %L\", p->sym->name, interface_name,\n+\t\t\t     &p->sym->declared_at) == FAILURE)\n+\treturn 1;\n     }\n   p = psave;\n "}, {"sha": "7fed7a5396184534704aefbc0f223e85b6b3255e", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=a300121e62712fdafb2b508f8a392cffccf075c8", "patch": "@@ -9886,6 +9886,11 @@ apply_default_init_local (gfc_symbol *sym)\n static gfc_try\n resolve_fl_var_and_proc (gfc_symbol *sym, int mp_flag)\n {\n+  /* Avoid double diagnostics for function result symbols.  */\n+  if ((sym->result || sym->attr.result) && !sym->attr.dummy\n+      && (sym->ns != gfc_current_ns))\n+    return SUCCESS;\n+\n   /* Constraints on deferred shape variable.  */\n   if (sym->as == NULL || sym->as->type != AS_DEFERRED)\n     {\n@@ -11974,11 +11979,6 @@ resolve_symbol (gfc_symbol *sym)\n   gfc_namespace *ns;\n   gfc_component *c;\n \n-  /* Avoid double resolution of function result symbols.  */\n-  if ((sym->result || sym->attr.result) && !sym->attr.dummy\n-      && (sym->ns != gfc_current_ns))\n-    return;\n-  \n   if (sym->attr.flavor == FL_UNKNOWN)\n     {\n "}, {"sha": "cbad463803d52fdf16ebb02df612d90d92a44e17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a300121e62712fdafb2b508f8a392cffccf075c8", "patch": "@@ -1,3 +1,16 @@\n+2011-04-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48112\n+\tPR fortran/48279\n+\t* gfortran.dg/interface_35.f90: New.\n+\t* gfortran.dg/erfc_scaled_1.f90: Don't compile with -pedantic.\n+\t* gfortran.dg/func_result_6.f90: Add dg-warning.\n+\t* gfortran.dg/bessel_1.f90: Ditto.\n+\t* gfortran.dg/hypot_1.f90: Ditto.\n+\t* gfortran.dg/proc_ptr_comp_20.f90: Ditto.\n+\t* gfortran.dg/proc_ptr_comp_21.f90: Ditto.\n+\t* gfortran.dg/interface_assignment_4.f90: Ditto.\n+\n 2011-04-27  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/ext/complex8.C: New."}, {"sha": "fb1e19beef54818ec1fc95e715ec75566bd51c70", "filename": "gcc/testsuite/gfortran.dg/bessel_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_1.f90?ref=a300121e62712fdafb2b508f8a392cffccf075c8", "patch": "@@ -26,11 +26,11 @@ program test\n   call check(bessel_yn (3,x4), bessel_yn (3,1.9_4))\n \n contains\n-  subroutine check_r4 (a, b)\n+  subroutine check_r4 (a, b) ! { dg-warning \"Extension: Internal procedure\" }\n     real(kind=4), intent(in) :: a, b\n     if (abs(a - b) > 1.e-5 * abs(b)) call abort\n   end subroutine\n-  subroutine check_r8 (a, b)\n+  subroutine check_r8 (a, b) ! { dg-warning \"Extension: Internal procedure\" }\n     real(kind=8), intent(in) :: a, b\n     if (abs(a - b) > 1.e-7 * abs(b)) call abort\n   end subroutine"}, {"sha": "eeb54c829dcaff995936c3853d9e406964df8397", "filename": "gcc/testsuite/gfortran.dg/erfc_scaled_1.f90", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2Fgfortran.dg%2Ferfc_scaled_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2Fgfortran.dg%2Ferfc_scaled_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ferfc_scaled_1.f90?ref=a300121e62712fdafb2b508f8a392cffccf075c8", "patch": "@@ -1,4 +1,8 @@\n ! { dg-do run }\n+!\n+! { dg-options \"\" }\n+! Do not run with -pedantic checks enabled as \"check\"\n+! contains internal procedures which is a vendor extension\n \n program test\n   implicit none"}, {"sha": "e8347be587d592a2aad3a112aad9b1b0cf97553f", "filename": "gcc/testsuite/gfortran.dg/func_result_6.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_result_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_result_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_result_6.f90?ref=a300121e62712fdafb2b508f8a392cffccf075c8", "patch": "@@ -63,7 +63,7 @@ subroutine test\n bar = gen()\n if (ptr /= 77) call abort()\n contains\n-  function foo()\n+  function foo() ! { dg-warning \"Extension: Internal procedure .foo. in generic interface\" }\n     integer, allocatable :: foo(:)\n     allocate(foo(2))\n     foo = [33, 77]"}, {"sha": "0c1c6e2ae17e3c850d32a4a8ee1fe76d21c72c43", "filename": "gcc/testsuite/gfortran.dg/hypot_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2Fgfortran.dg%2Fhypot_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2Fgfortran.dg%2Fhypot_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhypot_1.f90?ref=a300121e62712fdafb2b508f8a392cffccf075c8", "patch": "@@ -18,11 +18,11 @@ program test\n   call check(hypot(x4,y4), hypot(1.9_4,-2.1_4))\n \n contains\n-  subroutine check_r4 (a, b)\n+  subroutine check_r4 (a, b) ! { dg-warning \"Extension: Internal procedure\" }\n     real(kind=4), intent(in) :: a, b\n     if (abs(a - b) > 1.e-5 * abs(b)) call abort\n   end subroutine\n-  subroutine check_r8 (a, b)\n+  subroutine check_r8 (a, b) ! { dg-warning \"Extension: Internal procedure\" }\n     real(kind=8), intent(in) :: a, b\n     if (abs(a - b) > 1.e-7 * abs(b)) call abort\n   end subroutine"}, {"sha": "20aa4af786d2bbac44baddb61f69980da9ae4a08", "filename": "gcc/testsuite/gfortran.dg/interface_35.f90", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_35.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_35.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_35.f90?ref=a300121e62712fdafb2b508f8a392cffccf075c8", "patch": "@@ -0,0 +1,79 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2008\" }\n+!\n+! PR fortran/48112 (module_m)\n+! PR fortran/48279 (sidl_string_array, s_Hard)\n+!\n+! Contributed by mhp77@gmx.at (module_m)\n+! and Adrian Prantl (sidl_string_array, s_Hard)\n+!\n+\n+module module_m\n+  interface test\n+     function test1( )  result( test )\n+       integer ::  test\n+     end function test1\n+  end interface test\n+end module module_m\n+\n+! -----\n+\n+module sidl_string_array\n+  type sidl_string_1d\n+  end type sidl_string_1d\n+  interface set\n+    module procedure &\n+      setg1_p\n+  end interface\n+contains\n+  subroutine setg1_p(array, index, val)\n+    type(sidl_string_1d), intent(inout) :: array\n+  end subroutine setg1_p\n+end module sidl_string_array\n+\n+module s_Hard\n+  use sidl_string_array\n+  type :: s_Hard_t\n+     integer(8) :: dummy\n+  end type s_Hard_t\n+  interface set_d_interface\n+  end interface \n+  interface get_d_string\n+    module procedure get_d_string_p\n+  end interface \n+  contains ! Derived type member access functions\n+    type(sidl_string_1d) function get_d_string_p(s)\n+      type(s_Hard_t), intent(in) :: s\n+    end function get_d_string_p\n+    subroutine set_d_objectArray_p(s, d_objectArray)\n+    end subroutine set_d_objectArray_p\n+end module s_Hard\n+\n+subroutine initHard(h, ex)\n+  use s_Hard\n+  type(s_Hard_t), intent(inout) :: h\n+  call set(get_d_string(h), 0, 'Three') ! { dg-error \"There is no specific subroutine for the generic\" }\n+end subroutine initHard\n+\n+! -----\n+\n+  interface get\n+    procedure get1\n+  end interface\n+\n+  integer :: h\n+  call set1 (get (h))\n+\n+contains\n+\n+  subroutine set1 (a)\n+    integer, intent(in) :: a\n+  end subroutine\n+\n+  integer function get1 (s) ! { dg-error \"Extension: Internal procedure .get1. in generic interface .get.\" }\n+    integer :: s\n+  end function\n+\n+end\n+\n+! { dg-final { cleanup-modules \"module_m module_m2 s_hard sidl_string_array\" } }"}, {"sha": "d55af2905d50d98330f1629939a662f8e760f45f", "filename": "gcc/testsuite/gfortran.dg/interface_assignment_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_assignment_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_assignment_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_assignment_4.f90?ref=a300121e62712fdafb2b508f8a392cffccf075c8", "patch": "@@ -16,7 +16,7 @@\n \n contains\n \n-  subroutine op_assign_VS_CH (var, exp)\n+  subroutine op_assign_VS_CH (var, exp) ! { dg-warning \"Extension: Internal procedure\" }\n     type(varying_string), intent(out) :: var\n     character(LEN=*), intent(in)      :: exp\n   end subroutine"}, {"sha": "57660c7b70e7660251007231e27f0c07ade346e3", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_20.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_20.f90?ref=a300121e62712fdafb2b508f8a392cffccf075c8", "patch": "@@ -35,12 +35,12 @@\n \n contains\n \n-  real function f1(a,b)\n+  real function f1(a,b) ! { dg-warning \"Extension: Internal procedure\" }\n     real,intent(in) :: a,b\n     f1 = a + b\n   end function\n \n-  integer function f2(a,b)\n+  integer function f2(a,b) ! { dg-warning \"Extension: Internal procedure\" }\n     real,intent(in) :: a,b\n     f2 = a - b\n   end function"}, {"sha": "a21916bc844cc8fecfa3cce69498ed5bfca165ad", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_21.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_21.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a300121e62712fdafb2b508f8a392cffccf075c8/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_21.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_21.f90?ref=a300121e62712fdafb2b508f8a392cffccf075c8", "patch": "@@ -19,7 +19,7 @@\n \n contains\n \n-  elemental subroutine op_assign (str, ch)\n+  elemental subroutine op_assign (str, ch) ! { dg-warning \"Extension: Internal procedure\" }\n     type(nf_t), intent(out) :: str\n     character(len=*), intent(in) :: ch\n   end subroutine"}]}