{"sha": "d555040fc4c7e7b023c23e5c0f4889936a154ca9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU1NTA0MGZjNGM3ZTdiMDIzYzIzZTVjMGY0ODg5OTM2YTE1NGNhOQ==", "commit": {"author": {"name": "Volker Reichelt", "email": "v.reichelt@netcologne.de", "date": "2018-03-27T17:21:20Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2018-03-27T17:21:20Z"}, "message": "search.c (check_final_overrider): Use inform instead of error for the diagnostics of the overridden functions.\n\n2018-03-27  Volker Reichelt  <v.reichelt@netcologne.de>\n\n        * search.c (check_final_overrider): Use inform instead of error\n        for the diagnostics of the overridden functions.  Tweak wording.\n\n        * g++.dg/cpp0x/defaulted2.C: Use dg-message instead of dg-error\n        for the diagnostics of overridden functions.  Adjust for new wording.\n        * g++.dg/cpp0x/implicit1.C: Likewise.\n        * g++.dg/cpp0x/override1.C: Likewise.\n        * g++.dg/cpp1y/auto-fn18.C: Likewise.\n        * g++.dg/eh/shadow1.C: Likewise.\n        * g++.dg/inherit/covariant12.C: Likewise.\n        * g++.dg/inherit/covariant14.C: Likewise.\n        * g++.dg/inherit/covariant15.C: Likewise.\n        * g++.dg/inherit/covariant16.C: Likewise.\n        * g++.dg/inherit/covariant22.C: Likewise.\n        * g++.dg/inherit/crash3.C: Likewise.\n        * g++.dg/inherit/error2.C: Likewise.\n        * g++.dg/template/crash100.C: Likewise.\n        * g++.old-deja/g++.eh/spec6.C: Likewise.\n        * g++.old-deja/g++.mike/p811.C: Likewise.\n        * g++.old-deja/g++.other/virtual11.C: Likewise.\n        * g++.old-deja/g++.other/virtual4.C: Likewise.\n\nFrom-SVN: r258898", "tree": {"sha": "abdf829e4eda328dd634d7c97be460d488d34323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abdf829e4eda328dd634d7c97be460d488d34323"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d555040fc4c7e7b023c23e5c0f4889936a154ca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d555040fc4c7e7b023c23e5c0f4889936a154ca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d555040fc4c7e7b023c23e5c0f4889936a154ca9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d555040fc4c7e7b023c23e5c0f4889936a154ca9/comments", "author": {"login": "VReichelt", "id": 85767072, "node_id": "MDQ6VXNlcjg1NzY3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/85767072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VReichelt", "html_url": "https://github.com/VReichelt", "followers_url": "https://api.github.com/users/VReichelt/followers", "following_url": "https://api.github.com/users/VReichelt/following{/other_user}", "gists_url": "https://api.github.com/users/VReichelt/gists{/gist_id}", "starred_url": "https://api.github.com/users/VReichelt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VReichelt/subscriptions", "organizations_url": "https://api.github.com/users/VReichelt/orgs", "repos_url": "https://api.github.com/users/VReichelt/repos", "events_url": "https://api.github.com/users/VReichelt/events{/privacy}", "received_events_url": "https://api.github.com/users/VReichelt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6514899f3110f618f60066dca796c327ef20e9fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6514899f3110f618f60066dca796c327ef20e9fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6514899f3110f618f60066dca796c327ef20e9fa"}], "stats": {"total": 111, "additions": 73, "deletions": 38}, "files": [{"sha": "f7f48879b6f7fdd916d49208bb2c55648f6bdf4b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -1,3 +1,8 @@\n+2018-03-27  Volker Reichelt  <v.reichelt@netcologne.de>\n+\n+\t* search.c (check_final_overrider): Use inform instead of error\n+\tfor the diagnostics of the overridden functions.  Tweak wording.\n+\n 2018-03-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/85068"}, {"sha": "6bf8b0e70dcb935a0f247df45d936dfc8813fd1c", "filename": "gcc/cp/search.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -1904,7 +1904,7 @@ check_final_overrider (tree overrider, tree basefn)\n \t  if (pedwarn (DECL_SOURCE_LOCATION (overrider), 0,\n \t\t       \"invalid covariant return type for %q#D\", overrider))\n \t    inform (DECL_SOURCE_LOCATION (basefn),\n-\t\t    \"  overriding %q#D\", basefn);\n+\t\t    \"overridden function is %q#D\", basefn);\n \t}\n       else\n \tfail = 2;\n@@ -1918,12 +1918,14 @@ check_final_overrider (tree overrider, tree basefn)\n       if (fail == 1)\n \t{\n \t  error (\"invalid covariant return type for %q+#D\", overrider);\n-\t  error (\"  overriding %q+#D\", basefn);\n+\t  inform (DECL_SOURCE_LOCATION (basefn),\n+\t\t  \"overridden function is %q#D\", basefn);\n \t}\n       else\n \t{\n \t  error (\"conflicting return type specified for %q+#D\", overrider);\n-\t  error (\"  overriding %q+#D\", basefn);\n+\t  inform (DECL_SOURCE_LOCATION (basefn),\n+\t\t  \"overridden function is %q#D\", basefn);\n \t}\n       DECL_INVALID_OVERRIDER_P (overrider) = 1;\n       return 0;\n@@ -1938,7 +1940,8 @@ check_final_overrider (tree overrider, tree basefn)\n   if (!comp_except_specs (base_throw, over_throw, ce_derived))\n     {\n       error (\"looser throw specifier for %q+#F\", overrider);\n-      error (\"  overriding %q+#F\", basefn);\n+      inform (DECL_SOURCE_LOCATION (basefn),\n+\t      \"overridden function is %q#F\", basefn);\n       DECL_INVALID_OVERRIDER_P (overrider) = 1;\n       return 0;\n     }\n@@ -1950,7 +1953,8 @@ check_final_overrider (tree overrider, tree basefn)\n       && !tx_safe_fn_type_p (over_type))\n     {\n       error (\"conflicting type attributes specified for %q+#D\", overrider);\n-      error (\"  overriding %q+#D\", basefn);\n+      inform (DECL_SOURCE_LOCATION (basefn),\n+\t      \"overridden function is %q#D\", basefn);\n       DECL_INVALID_OVERRIDER_P (overrider) = 1;\n       return 0;\n     }\n@@ -1974,21 +1978,26 @@ check_final_overrider (tree overrider, tree basefn)\n     {\n       if (DECL_DELETED_FN (overrider))\n \t{\n-\t  error (\"deleted function %q+D\", overrider);\n-\t  error (\"overriding non-deleted function %q+D\", basefn);\n+\t  error (\"deleted function %q+D overriding non-deleted function\",\n+\t\t overrider);\n+\t  inform (DECL_SOURCE_LOCATION (basefn),\n+\t\t  \"overridden function is %qD\", basefn);\n \t  maybe_explain_implicit_delete (overrider);\n \t}\n       else\n \t{\n-\t  error (\"non-deleted function %q+D\", overrider);\n-\t  error (\"overriding deleted function %q+D\", basefn);\n+\t  error (\"non-deleted function %q+D overriding deleted function\",\n+\t\t overrider);\n+\t  inform (DECL_SOURCE_LOCATION (basefn),\n+\t\t  \"overridden function is %qD\", basefn);\n \t}\n       return 0;\n     }\n   if (DECL_FINAL_P (basefn))\n     {\n-      error (\"virtual function %q+D\", overrider);\n-      error (\"overriding final function %q+D\", basefn);\n+      error (\"virtual function %q+D overriding final function\", overrider);\n+      inform (DECL_SOURCE_LOCATION (basefn),\n+\t      \"overridden function is %qD\", basefn);\n       return 0;\n     }\n   return 1;"}, {"sha": "292cfedac1e5fa5272ca9abde124a9160431179d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -1,3 +1,24 @@\n+2018-03-27  Volker Reichelt  <v.reichelt@netcologne.de>\n+\n+\t* g++.dg/cpp0x/defaulted2.C: Use dg-message instead of dg-error\n+\tfor the diagnostics of overridden functions.  Adjust for new wording.\n+\t* g++.dg/cpp0x/implicit1.C: Likewise.\n+\t* g++.dg/cpp0x/override1.C: Likewise.\n+\t* g++.dg/cpp1y/auto-fn18.C: Likewise.\n+\t* g++.dg/eh/shadow1.C: Likewise.\n+\t* g++.dg/inherit/covariant12.C: Likewise.\n+\t* g++.dg/inherit/covariant14.C: Likewise.\n+\t* g++.dg/inherit/covariant15.C: Likewise.\n+\t* g++.dg/inherit/covariant16.C: Likewise.\n+\t* g++.dg/inherit/covariant22.C: Likewise.\n+\t* g++.dg/inherit/crash3.C: Likewise.\n+\t* g++.dg/inherit/error2.C: Likewise.\n+\t* g++.dg/template/crash100.C: Likewise.\n+\t* g++.old-deja/g++.eh/spec6.C: Likewise.\n+\t* g++.old-deja/g++.mike/p811.C: Likewise.\n+\t* g++.old-deja/g++.other/virtual11.C: Likewise.\n+\t* g++.old-deja/g++.other/virtual4.C: Likewise.\n+\n 2018-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/85044"}, {"sha": "45b09c178120e39cbd39d255dec79b0d1fd7785c", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted2.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -25,7 +25,7 @@ const B b;\t\t\t// { dg-error \"uninitialized const\" }\n \n struct C\n {\n-  virtual void f() = delete;\t// { dg-error \"overriding deleted\" }\n+  virtual void f() = delete;\t// { dg-message \"overridden\" }\n };\n \n struct D: public C"}, {"sha": "7fdd262dc58e159a2f8a09ec80bcb5dfdc4c3962", "filename": "gcc/testsuite/g++.dg/cpp0x/implicit1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit1.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -7,7 +7,7 @@ class C\n {\n   void operator delete (void *); // { dg-message \"private\" }\n public:\n-  virtual ~C();\t\t\t// { dg-error \"overriding\" }\n+  virtual ~C();\t\t\t// { dg-message \"overridden\" }\n };\n \n struct D: C { };\t\t// { dg-error \"deleted\" }\n@@ -20,7 +20,7 @@ struct E\n \n struct F\n {\n-  virtual ~F();\t\t\t// { dg-error \"overriding\" }\n+  virtual ~F();\t\t\t// { dg-message \"overridden\" }\n };\n \n struct G: E, F { };\t\t// { dg-error \"deleted\" }"}, {"sha": "543ac840cf221af560eb6161d24f62c93ea15a7a", "filename": "gcc/testsuite/g++.dg/cpp0x/override1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride1.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -7,7 +7,7 @@ struct B\n   virtual void y() final;\n };\n \n-void B::y() {} // { dg-error \"overriding\" }\n+void B::y() {} // { dg-message \"overridden\" }\n \n struct B2\n {\n@@ -16,7 +16,7 @@ struct B2\n \n struct D : B\n {\n-  virtual void g() override final {} // { dg-error \"overriding\" }\n+  virtual void g() override final {} // { dg-message \"overridden\" }\n   virtual void y() override final {} // { dg-error \"virtual\" }\n };\n "}, {"sha": "1a9296459da28ca78154b863e58af21fafc5e171", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn18.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -2,7 +2,7 @@\n \n struct A\n {\n-  virtual int f() { return 1; }\t // { dg-message \"overriding\" }\n+  virtual int f() { return 1; }\t // { dg-message \"overridden\" }\n   virtual auto g() { return 1; } // { dg-error \"virtual\" }\n };\n "}, {"sha": "0ba6145ef0c608173070b9a5739625bf11ac72f4", "filename": "gcc/testsuite/g++.dg/eh/shadow1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fshadow1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fshadow1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fshadow1.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -13,7 +13,7 @@ struct D : private B\n   friend class E;\n   \n   static B *baz (D *);\n-  virtual void V () throw (B);  // { dg-error \"overriding\" \"\" { target { ! c++17 } } }\n+  virtual void V () throw (B);  // { dg-message \"overridden\" \"\" { target { ! c++17 } } }\n };\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++17 } .-1 }\n \t\t\t\t// { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++17 } } } .-2 }\n struct E : public D"}, {"sha": "a340dc9f8873b9ae759163a628124bbed05fb76b", "filename": "gcc/testsuite/g++.dg/inherit/covariant12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant12.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -9,7 +9,7 @@ struct S;\n \n struct B\n {\n-  virtual T *Foo (); // { dg-error \"overriding\" }\n+  virtual T *Foo (); // { dg-message \"overridden\" }\n };\n \n struct D : B"}, {"sha": "ce500bf04594e7911dea9bcbeaca8dc4289e4e8f", "filename": "gcc/testsuite/g++.dg/inherit/covariant14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant14.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -8,7 +8,7 @@ struct A;\n \n struct B\n {\n-  virtual A* foo();  // { dg-error \"overriding\" }\n+  virtual A* foo();  // { dg-message \"overridden\" }\n };\n \n namespace N"}, {"sha": "ab97ad1b4e344194c8a456c58411da39e6a7577b", "filename": "gcc/testsuite/g++.dg/inherit/covariant15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant15.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -5,7 +5,7 @@ struct A {};\n \n class B : A\n {\n-    virtual A* foo(); /* { dg-error \"overriding\" } */\n+    virtual A* foo(); /* { dg-message \"overridden\" } */\n };\n \n struct C : virtual B"}, {"sha": "e9cb769e2cf55a7ed9df03a2bc049f4309b5e9da", "filename": "gcc/testsuite/g++.dg/inherit/covariant16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant16.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -8,7 +8,7 @@ struct A\n \n struct B : virtual A\n {\n-  virtual B* foo(); /* { dg-error \"overriding\" } */\n+  virtual B* foo(); /* { dg-message \"overridden\" } */\n };\n \n struct C : B"}, {"sha": "9826f9d01285e51cbbb0106cc43b1e9fc0a6007a", "filename": "gcc/testsuite/g++.dg/inherit/covariant22.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant22.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -5,7 +5,7 @@ struct A;\n \n struct B\n {\n-  virtual A *foo ();\t// { dg-error \"overriding\" }\n+  virtual A *foo ();\t// { dg-message \"overridden\" }\n };\n \n struct C : virtual B"}, {"sha": "62b9e21f5dd22cb3593a34beb45af0daed589a6b", "filename": "gcc/testsuite/g++.dg/inherit/crash3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcrash3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcrash3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcrash3.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -2,7 +2,7 @@\n \n struct A\n {\n-  virtual int& foo(); // { dg-error \"overriding\" }\n+  virtual int& foo(); // { dg-message \"overridden\" }\n };\n \n struct B : A"}, {"sha": "a19c48fc1f948f11a54d5be8db160d9406d3886e", "filename": "gcc/testsuite/g++.dg/inherit/error2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Ferror2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Ferror2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Ferror2.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -3,7 +3,7 @@\n \n struct A\n {\n-  virtual A* foo();    // { dg-error \"overriding\" }\n+  virtual A* foo();    // { dg-message \"overridden\" }\n };\n \n struct B : virtual A;  // { dg-error \"before\" }"}, {"sha": "a85948caf9aba66b765693c745b59b0048baf137", "filename": "gcc/testsuite/g++.dg/template/crash100.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash100.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash100.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash100.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -7,7 +7,7 @@ class Temp\n   public:\n   operator T&(void)  { return Val; }\n \n-  virtual T& operator=(T a ) // { dg-error \"overriding\" }\n+  virtual T& operator=(T a ) // { dg-message \"overridden\" }\n   {\n     Val = a;\n     return Val;"}, {"sha": "587eb323992608226db96b31cd7d9fd80b7f8b58", "filename": "gcc/testsuite/g++.old-deja/g++.eh/spec6.C", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec6.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -81,19 +81,19 @@ struct G : public F, F1 {};\n struct H : private E {};\n struct A\n {\n-  virtual void foo() throw();             // { dg-error \"\" } overriding \n+  virtual void foo() throw();             // { dg-message \"\" } overridden\n   virtual void baz() throw(double, int);\n   virtual void bar();\n   virtual void qux() throw(E);\n-  virtual void qux(int) throw(E const *); // { dg-error \"\" } overriding (pedantically)\n-  virtual void quux() throw(F);           // { dg-error \"\" } overriding \n-  virtual void quux(int) throw(F *);      // { dg-error \"\" } overriding \n-  virtual void wibble() throw(E);         // { dg-error \"\" } overriding \n-  virtual void wobble() throw(E *);       // { dg-error \"\" } overriding \n-  virtual void wobble(int) throw(E *);    // { dg-error \"\" } overriding \n+  virtual void qux(int) throw(E const *); // { dg-message \"\" } overridden (pedantically)\n+  virtual void quux() throw(F);           // { dg-message \"\" } overridden\n+  virtual void quux(int) throw(F *);      // { dg-message \"\" } overridden\n+  virtual void wibble() throw(E);         // { dg-message \"\" } overridden\n+  virtual void wobble() throw(E *);       // { dg-message \"\" } overridden\n+  virtual void wobble(int) throw(E *);    // { dg-message \"\" } overridden\n   virtual void wabble(int) throw(E *);\n   virtual void wubble(int) throw(E *, H *);\n-  virtual ~A() throw();                   // { dg-error \"\" } overriding\n+  virtual ~A() throw();                   // { dg-message \"\" } overriding\n };\n \n struct B : A\n@@ -115,7 +115,7 @@ struct B : A\n struct A1\n {\n   virtual void foo() throw(int);\n-  virtual void bar() throw();       // { dg-error \"\" } overriding \n+  virtual void bar() throw();       // { dg-message \"\" } overridden\n   virtual ~A1() throw(int);\n };\n "}, {"sha": "174b16e1eee65ad003f322f395a88e97dd44e6d5", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p811.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp811.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp811.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp811.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -512,7 +512,7 @@ class Y {\n public:\n     Y() {}\n   virtual const char *stringify() = 0;\n-    virtual char *stringify2() const = 0; // { dg-error \"overriding\" } \n+    virtual char *stringify2() const = 0; // { dg-message \"overridden\" } \n };\n \n class X: public Y { // { dg-message \"defined here\" }"}, {"sha": "172216abc1db5ec017413c9970cda15c17bb0653", "filename": "gcc/testsuite/g++.old-deja/g++.other/virtual11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvirtual11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvirtual11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvirtual11.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -12,7 +12,7 @@ struct A\n \n struct B\n {\n-  virtual void foo ();  // { dg-error \"\" } of this function\n+  virtual void foo ();  // { dg-message \"\" } of this function\n };\n \n struct C : A , B"}, {"sha": "8056f26e47305eba54b4f2607ecc22b6f7a0b9a9", "filename": "gcc/testsuite/g++.old-deja/g++.other/virtual4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvirtual4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d555040fc4c7e7b023c23e5c0f4889936a154ca9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvirtual4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvirtual4.C?ref=d555040fc4c7e7b023c23e5c0f4889936a154ca9", "patch": "@@ -2,7 +2,7 @@\n \n class A {\n public:\n-  virtual int foo() = 0; // { dg-error \"\" } original definition\n+  virtual int foo() = 0; // { dg-message \"\" } original definition\n };\n \n class B {"}]}