{"sha": "bfe8701346baf04c53d1fe784eea755c5bda60bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZlODcwMTM0NmJhZjA0YzUzZDFmZTc4NGVlYTc1NWM1YmRhNjBiYw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-09-23T18:41:47Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-09-23T18:41:47Z"}, "message": "New files for sparc64-linux port.\n\nFrom-SVN: r15679", "tree": {"sha": "47a91b0bbc0809798e82a5dbc2b49d7e98774ce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47a91b0bbc0809798e82a5dbc2b49d7e98774ce1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfe8701346baf04c53d1fe784eea755c5bda60bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfe8701346baf04c53d1fe784eea755c5bda60bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfe8701346baf04c53d1fe784eea755c5bda60bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfe8701346baf04c53d1fe784eea755c5bda60bc/comments", "author": null, "committer": null, "parents": [{"sha": "ce2157a1a98c1f01e18b0aaa4a50efd51fff8d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2157a1a98c1f01e18b0aaa4a50efd51fff8d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce2157a1a98c1f01e18b0aaa4a50efd51fff8d5b"}], "stats": {"total": 238, "additions": 238, "deletions": 0}, "files": [{"sha": "cf6015d3adb1e7180a59515bfbceabcdc6ecceb6", "filename": "gcc/config/sparc/linux64.h", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe8701346baf04c53d1fe784eea755c5bda60bc/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe8701346baf04c53d1fe784eea755c5bda60bc/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=bfe8701346baf04c53d1fe784eea755c5bda60bc", "patch": "@@ -0,0 +1,238 @@\n+/* Definitions for 64-bit SPARC running Linux with ELF\n+   Copyright 1996, 1997 Free Software Foundation, Inc.\n+   Contributed by David S. Miller (davem@caip.rutgers.edu)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#define LINUX_DEFAULT_ELF\n+\n+/* This is a v9 only compiler.  -mv8 is not expected to work.  If you want\n+   a v8/v9 compiler, this isn't the place to do it.  */\n+\n+#define SPARC_V9 1\t/* See sparc.h.  */\n+#define SPARC_ARCH64 1\n+\n+/* Don't assume anything about the header files. */\n+#define NO_IMPLICIT_EXTERN_C\n+\n+#undef HAVE_ATEXIT\n+#define HAVE_ATEXIT\n+\n+#include <sparc/sysv4.h>\n+\n+#undef MD_EXEC_PREFIX\n+#undef MD_STARTFILE_PREFIX\n+\n+/* Output at beginning of assembler file.  */\n+/* The .file command should always begin the output.  */\n+#undef ASM_FILE_START\n+#define ASM_FILE_START(FILE)                                            \\\n+  do {                                                                  \\\n+        output_file_directive (FILE, main_input_filename);              \\\n+        fprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");                      \\\n+  } while (0)\n+  \n+#undef ASM_DEFAULT_SPEC\n+#define ASM_DEFAULT_SPEC \"-Av9a\"\n+\n+#undef  LIBGCC_SPEC\n+#define LIBGCC_SPEC \\\n+  \"%{!shared:-lgcc}\"\n+\n+/* Provide a STARTFILE_SPEC appropriate for Linux.  Here we add\n+   the Linux magical crtbegin.o file (see crtstuff.c) which\n+   provides part of the support for getting C++ file-scope static\n+   object constructed before entering `main'. */\n+   \n+#undef  STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  \"%{!shared: \\\n+     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} %{!p:crt1.o%s}}}\\\n+   crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+\n+/* Provide a ENDFILE_SPEC appropriate for Linux.  Here we tack on\n+   the Linux magical crtend.o file (see crtstuff.c) which\n+   provides part of the support for getting C++ file-scope static\n+   object constructed before entering `main', followed by a normal\n+   Linux \"finalizer\" file, `crtn.o'.  */\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (sparc64 Linux/ELF)\");\n+\n+/* A v9 compiler with stack-bias, 32 bit integers, 64 bit longs and\n+   64 bit pointers, in a Medium/Anywhere code model environment.  */\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT \\\n+  (MASK_V9 + MASK_ARCH64 + MASK_LONG64 + MASK_PTR64 /* + MASK_HARD_QUAD */ \\\n+   + MASK_STACK_BIAS + MASK_MEDANY + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU)\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"long long unsigned int\"\n+ \n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long long int\"\n+  \n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"long int\"\n+   \n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+    \n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-D__sparc__ -D__sparc__ -D__sparc_v9__ -D__arch64__ -D__ELF__ -Dunix -Dsparc -Dlinux -Asystem(unix) -Asystem(posix) -Acpu(sparc) -Amachine(sparc)\"\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"\\\n+%{fPIC:-D__PIC__ -D__pic__} \\\n+%{fpic:-D__PIC__ -D__pic__} \\\n+%{mint64:-D__INT_MAX__=9223372036854775807LL -D__LONG_MAX__=9223372036854775807LL} \\\n+%{mlong64:-D__LONG_MAX__=9223372036854775807LL} \\\n+%{mlittle-endian:-D__LITTLE_ENDIAN__} \\\n+%{msparclite:-D__sparclite__} \\\n+%{mv8:-D__sparc_v8__} \\\n+%{msupersparc:-D__supersparc__ -D__sparc_v8__} \\\n+%{posix:-D_POSIX_SOURCE} \\\n+\"\n+/* We no longer link with libc_p.a or libg.a by default. If you\n+ * want to profile or debug the Linux C library, please add\n+ * -lc_p or -ggdb to LDFLAGS at the link time, respectively.\n+ */\n+#undef LIB_SPEC\n+#define LIB_SPEC \\\n+  \"%{!shared: %{mieee-fp:-lieee} %{p:-lgmon} %{pg:-lgmon} \\\n+     %{!ggdb:-lc} %{ggdb:-lg}}\"\n+\n+/* Provide a LINK_SPEC appropriate for Linux.  Here we provide support\n+   for the special GCC options -static and -shared, which allow us to\n+   link things in one of these three modes by applying the appropriate\n+   combinations of options at link-time. We like to support here for\n+   as many of the other GNU linker options as possible. But I don't\n+   have the time to search for those flags. I am sure how to add\n+   support for -soname shared_object_name. H.J.\n+\n+   I took out %{v:%{!V:-V}}. It is too much :-(. They can use\n+   -Wl,-V.\n+\n+   When the -shared link option is used a final link is not being\n+   done.  */\n+\n+/* If ELF is the default format, we should not use /lib/elf. */\n+\n+#undef  LINK_SPEC\n+#define LINK_SPEC \"-m elf64_sparc -Y P,/usr/lib %{shared:-shared} \\\n+  %{!shared: \\\n+    %{!ibcs: \\\n+      %{!static: \\\n+        %{rdynamic:-export-dynamic} \\\n+        %{!dynamic-linker:-dynamic-linker /lib/ld-linux.so.1}} \\\n+        %{static:-static}}} \\\n+%{mlittle-endian:-EL} \\\n+\"\n+\n+/* The sun bundled assembler doesn't accept -Yd, (and neither does gas).\n+   It's safe to pass -s always, even if -g is not used. */\n+#undef ASM_SPEC\n+#define ASM_SPEC \"\\\n+%{V} \\\n+%{v:%{!V:-V}} \\\n+%{!Qn:-Qy} \\\n+%{n} \\\n+%{T} \\\n+%{Ym,*} \\\n+%{Wa,*:%*} \\\n+-s %{fpic:-K PIC} %{fPIC:-K PIC} \\\n+%{mlittle-endian:-EL} \\\n+%(asm_cpu) \\\n+\"\n+\n+/* Same as sparc.h */\n+#undef DBX_REGISTER_NUMBER\n+#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n+\n+/* System V Release 4 uses DWARF debugging info.  Buf DWARF1 doesn't do\n+   64-bit anything, so we use DWARF2.  */\n+\n+#undef DWARF2_DEBUGGING_INFO\n+#undef DWARF_DEBUGGING_INFO\n+#undef DBX_DEBUGGING_INFO\n+#define DWARF2_DEBUGGING_INFO\n+#define DBX_DEBUGGING_INFO\n+\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n+\n+#undef ASM_OUTPUT_ALIGNED_LOCAL\n+#define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  fputs (\"\\t.local\\t\", (FILE));\t\t\\\n+  assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n+  putc ('\\n', (FILE));\t\t\t\t\t\t\t\\\n+  ASM_OUTPUT_ALIGNED_COMMON (FILE, NAME, SIZE, ALIGN);\t\t\t\\\n+} while (0)\n+\n+#undef COMMON_ASM_OP\n+#define COMMON_ASM_OP \"\\t.common\"\n+\n+/* This is how to output a definition of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.  */\n+\n+#undef  ASM_OUTPUT_INTERNAL_LABEL\n+#define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n+  fprintf (FILE, \".L%s%d:\\n\", PREFIX, NUM)\n+\n+/* This is how to output a reference to an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.  */\n+\n+#undef  ASM_OUTPUT_INTERNAL_LABELREF\n+#define ASM_OUTPUT_INTERNAL_LABELREF(FILE,PREFIX,NUM)\t\\\n+  fprintf (FILE, \".L%s%d\", PREFIX, NUM)\n+\n+/* This is how to store into the string LABEL\n+   the symbol_ref name of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.\n+   This is suitable for output with `assemble_name'.  */\n+\n+#undef  ASM_GENERATE_INTERNAL_LABEL\n+#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n+  sprintf (LABEL, \"*.L%s%d\", PREFIX, NUM)\n+\n+/* Stabs doesn't use this, and it confuses a simulator.  */\n+/* ??? Need to see what DWARF needs, if anything.  */\n+#undef ASM_IDENTIFY_GCC\n+#define ASM_IDENTIFY_GCC(FILE)\n+\n+/* Define the names of various pseudo-ops used by the Sparc/svr4 assembler.\n+   ??? If ints are 64 bits then UNALIGNED_INT_ASM_OP (defined elsewhere) is\n+   misnamed.  These should all refer to explicit sizes (half/word/xword?),\n+   anything other than short/int/long/etc.  */\n+\n+#define UNALIGNED_DOUBLE_INT_ASM_OP\t\".uaxword\"\n+\n+/* DWARF bits.  */\n+\n+/* Follow Irix 6 and not the Dwarf2 draft in using 64-bit offsets. \n+   Obviously the Dwarf2 folks havn't tried to actually build systems\n+   with their spec.  On a 64-bit system, only 64-bit relocs become\n+   RELATIVE relocations.  */\n+\n+/* #define DWARF_OFFSET_SIZE PTR_SIZE */"}]}