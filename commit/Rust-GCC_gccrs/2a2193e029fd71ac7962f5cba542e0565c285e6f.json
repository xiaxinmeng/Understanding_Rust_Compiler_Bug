{"sha": "2a2193e029fd71ac7962f5cba542e0565c285e6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEyMTkzZTAyOWZkNzFhYzc5NjJmNWNiYTU0MmUwNTY1YzI4NWU2Zg==", "commit": {"author": {"name": "Simon Martin", "email": "simartin@users.sourceforge.net", "date": "2007-03-04T19:50:54Z"}, "committer": {"name": "Simon Martin", "email": "simartin@gcc.gnu.org", "date": "2007-03-04T19:50:54Z"}, "message": "re PR c++/30895 (ICE with complex values in template parameter)\n\n2007-03-04  Simon Martin  <simartin@users.sourceforge.net>\n\n\tPR c++/30895\n\t* tree.c (cp_tree_equal): Properly handle COMPLEX_CST trees.\n\nFrom-SVN: r122532", "tree": {"sha": "981594d884c68c44b2891e4dea8293bb08740dde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/981594d884c68c44b2891e4dea8293bb08740dde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a2193e029fd71ac7962f5cba542e0565c285e6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2193e029fd71ac7962f5cba542e0565c285e6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a2193e029fd71ac7962f5cba542e0565c285e6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2193e029fd71ac7962f5cba542e0565c285e6f/comments", "author": {"login": "simartin", "id": 935202, "node_id": "MDQ6VXNlcjkzNTIwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/935202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simartin", "html_url": "https://github.com/simartin", "followers_url": "https://api.github.com/users/simartin/followers", "following_url": "https://api.github.com/users/simartin/following{/other_user}", "gists_url": "https://api.github.com/users/simartin/gists{/gist_id}", "starred_url": "https://api.github.com/users/simartin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simartin/subscriptions", "organizations_url": "https://api.github.com/users/simartin/orgs", "repos_url": "https://api.github.com/users/simartin/repos", "events_url": "https://api.github.com/users/simartin/events{/privacy}", "received_events_url": "https://api.github.com/users/simartin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "270d43bf1ef449e769758eed4fd3c8e02ddac1ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/270d43bf1ef449e769758eed4fd3c8e02ddac1ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/270d43bf1ef449e769758eed4fd3c8e02ddac1ec"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "8f6d6deb40c828a3bb9db96bddb8a81cfa85de68", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2193e029fd71ac7962f5cba542e0565c285e6f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2193e029fd71ac7962f5cba542e0565c285e6f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2a2193e029fd71ac7962f5cba542e0565c285e6f", "patch": "@@ -1,3 +1,8 @@\n+2007-03-04  Simon Martin  <simartin@users.sourceforge.net>\n+\n+\tPR c++/30895\n+\t* tree.c (cp_tree_equal): Properly handle COMPLEX_CST trees.\n+\n 2007-03-03  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/15787"}, {"sha": "b7e1d0f7dcca70a5e44c7e3926031451193e73b0", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2193e029fd71ac7962f5cba542e0565c285e6f/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2193e029fd71ac7962f5cba542e0565c285e6f/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=2a2193e029fd71ac7962f5cba542e0565c285e6f", "patch": "@@ -1670,6 +1670,10 @@ cp_tree_equal (tree t1, tree t2)\n \t&& !memcmp (TREE_STRING_POINTER (t1), TREE_STRING_POINTER (t2),\n \t\t    TREE_STRING_LENGTH (t1));\n \n+    case COMPLEX_CST:\n+      return cp_tree_equal (TREE_REALPART (t1), TREE_REALPART (t2))\n+\t&& cp_tree_equal (TREE_IMAGPART (t1), TREE_IMAGPART (t2));\n+\n     case CONSTRUCTOR:\n       /* We need to do this when determining whether or not two\n \t non-type pointer to member function template arguments"}, {"sha": "258f2f2cfa0c5d31c50604ef9c73e7656985d430", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2193e029fd71ac7962f5cba542e0565c285e6f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2193e029fd71ac7962f5cba542e0565c285e6f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a2193e029fd71ac7962f5cba542e0565c285e6f", "patch": "@@ -1,3 +1,8 @@\n+2007-03-04  Simon Martin  <simartin@users.sourceforge.net>\n+\n+\tPR c++/30895\n+\t* g++.dg/parse/template23.C: New test.\n+\n 2007-03-04  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/30744"}, {"sha": "795457b68daa74ee0d586c82158d362c31173753", "filename": "gcc/testsuite/g++.dg/parse/template23.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2193e029fd71ac7962f5cba542e0565c285e6f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2193e029fd71ac7962f5cba542e0565c285e6f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate23.C?ref=2a2193e029fd71ac7962f5cba542e0565c285e6f", "patch": "@@ -0,0 +1,10 @@\n+/* PR c++/30895 This used to ICE.  */\n+/* { dg-do \"compile\" } */\n+\n+template<int> struct A {};\n+\n+template<typename T> struct B\n+{\n+  A<T(0i)> a1; /* { dg-error \"imaginary constants are a GCC extension\" } */\n+  A<T(0i)> a2; /* { dg-error \"imaginary constants are a GCC extension\" } */\n+};"}]}