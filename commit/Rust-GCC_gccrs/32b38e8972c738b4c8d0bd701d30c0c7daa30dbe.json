{"sha": "32b38e8972c738b4c8d0bd701d30c0c7daa30dbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJiMzhlODk3MmM3MzhiNGM4ZDBiZDcwMWQzMGMwYzdkYWEzMGRiZQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2014-12-18T20:49:44Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2014-12-18T20:49:44Z"}, "message": "re PR rtl-optimization/64291 (Miscompile t-div in GMP's testsuite)\n\n2014-12-18  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/64291\n\t* lra-remat.c (bad_for_rematerialization_p): Add UNPSEC_VLOATILE.\n\t(create_cands): Process only output reload insn with potential\n\tcands.\n\n2014-12-18  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/64291\n\t* testsuite/gcc.target/i386/pr64291-[12].c: New tests.\n\nFrom-SVN: r218874", "tree": {"sha": "20525ea20c15df06786c4027bb588dff9b59f300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20525ea20c15df06786c4027bb588dff9b59f300"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32b38e8972c738b4c8d0bd701d30c0c7daa30dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b38e8972c738b4c8d0bd701d30c0c7daa30dbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32b38e8972c738b4c8d0bd701d30c0c7daa30dbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b38e8972c738b4c8d0bd701d30c0c7daa30dbe/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e4992ca7811bcb1d3ebe587d06e346c09d72cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4992ca7811bcb1d3ebe587d06e346c09d72cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e4992ca7811bcb1d3ebe587d06e346c09d72cc1"}], "stats": {"total": 88, "additions": 79, "deletions": 9}, "files": [{"sha": "8c3a610dae3ebaa805eef0efb45405c29316ab46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b38e8972c738b4c8d0bd701d30c0c7daa30dbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b38e8972c738b4c8d0bd701d30c0c7daa30dbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32b38e8972c738b4c8d0bd701d30c0c7daa30dbe", "patch": "@@ -1,3 +1,10 @@\n+2014-12-18  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/64291\n+\t* lra-remat.c (bad_for_rematerialization_p): Add UNPSEC_VLOATILE.\n+\t(create_cands): Process only output reload insn with potential\n+\tcands.\n+\n 2014-12-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_expand_call): Skip setting up RAX"}, {"sha": "95ed01573fb4ae62cd4784f4cf14b5fbfa63cd5a", "filename": "gcc/lra-remat.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b38e8972c738b4c8d0bd701d30c0c7daa30dbe/gcc%2Flra-remat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b38e8972c738b4c8d0bd701d30c0c7daa30dbe/gcc%2Flra-remat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-remat.c?ref=32b38e8972c738b4c8d0bd701d30c0c7daa30dbe", "patch": "@@ -350,20 +350,20 @@ finish_cand_table (void)\n \n \f\n \n-/* Return true if X contains memory or UNSPEC.  We can not just check\n-   insn operands as memory or unspec might be not an operand itself\n-   but contain an operand.  Insn with memory access is not profitable\n-   for rematerialization.  Rematerialization of UNSPEC might result in\n-   wrong code generation as the UNPEC effect is unknown\n-   (e.g. generating a label).  */\n+/* Return true if X contains memory or some UNSPEC.  We can not just\n+   check insn operands as memory or unspec might be not an operand\n+   itself but contain an operand.  Insn with memory access is not\n+   profitable for rematerialization.  Rematerialization of UNSPEC\n+   might result in wrong code generation as the UNPEC effect is\n+   unknown (e.g. generating a label).  */\n static bool\n bad_for_rematerialization_p (rtx x)\n {\n   int i, j;\n   const char *fmt;\n   enum rtx_code code;\n \n-  if (MEM_P (x) || GET_CODE (x) == UNSPEC)\n+  if (MEM_P (x) || GET_CODE (x) == UNSPEC || GET_CODE (x) == UNSPEC_VOLATILE)\n     return true;\n   code = GET_CODE (x);\n   fmt = GET_RTX_FORMAT (code);\n@@ -406,7 +406,7 @@ operand_to_remat (rtx_insn *insn)\n     if (reg->regno == STACK_POINTER_REGNUM && frame_pointer_needed)\n       return -1;\n     else if (reg->type == OP_OUT && ! reg->subreg_p\n-\t&& find_regno_note (insn, REG_UNUSED, reg->regno) == NULL)\n+\t     && find_regno_note (insn, REG_UNUSED, reg->regno) == NULL)\n       {\n \t/* We permits only one spilled reg.  */\n \tif (found_reg != NULL)\n@@ -508,11 +508,14 @@ create_cands (void)\n \n \tif ((set = single_set (insn)) != NULL\n \t    && REG_P (SET_SRC (set)) && REG_P (SET_DEST (set))\n-\t    && (src_regno = REGNO (SET_SRC (set))) >= FIRST_PSEUDO_REGISTER\n+\t    && ((src_regno = REGNO (SET_SRC (set)))\n+\t\t>= lra_constraint_new_regno_start)\n \t    && (dst_regno = REGNO (SET_DEST (set))) >= FIRST_PSEUDO_REGISTER\n \t    && reg_renumber[dst_regno] < 0\n \t    && (insn2 = regno_potential_cand[src_regno].insn) != NULL\n \t    && BLOCK_FOR_INSN (insn2) == BLOCK_FOR_INSN (insn))\n+\t  /* It is an output reload insn after insn can be\n+\t     rematerialized (potential candidate).  */\n \t  create_cand (insn2, regno_potential_cand[src_regno].nop, dst_regno);\n \tif (nop < 0)\n \t  goto fail;"}, {"sha": "24696e0e67c9a5b3ce2d792bd266d709e2aea1cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b38e8972c738b4c8d0bd701d30c0c7daa30dbe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b38e8972c738b4c8d0bd701d30c0c7daa30dbe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32b38e8972c738b4c8d0bd701d30c0c7daa30dbe", "patch": "@@ -1,3 +1,8 @@\n+2014-12-18  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/64291\n+\t* testsuite/gcc.target/i386/pr64291-[12].c: New tests.\n+\n 2014-12-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/60955"}, {"sha": "85253c0151a3f954a7343b4ca88728b95be785ef", "filename": "gcc/testsuite/gcc.target/i386/pr64291-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b38e8972c738b4c8d0bd701d30c0c7daa30dbe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64291-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b38e8972c738b4c8d0bd701d30c0c7daa30dbe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64291-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64291-1.c?ref=32b38e8972c738b4c8d0bd701d30c0c7daa30dbe", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-sources pr64291-2.c } */\n+/* { dg-do run } */\n+void f(void*,...);\n+void g(void*,long,long);\n+int nnn=0;\n+long test=0;\n+\n+typedef struct\n+{\n+  int _mp_size;\n+  unsigned long *_mp_d;\n+} __mpz_struct;\n+typedef __mpz_struct mpz_t[1];\n+\n+int main ()\n+{\n+  mpz_t n, d;\n+  long nn, dn;\n+  unsigned long *np, *dup, *dnp, *qp;\n+  long alloc, itch;\n+\n+  f (n);\n+  f (d);\n+  qp = (unsigned long*)__builtin_alloca(4099*8) + 1;\n+  dnp = (unsigned long*)__builtin_alloca (2049*8);\n+  alloc = 1;\n+  for (test = 0; test < 1; test++)\n+    {\n+      dn = d->_mp_size;\n+      dup = d->_mp_d;\n+      f (dnp, dup, dn);\n+      dnp[dn - 1] |= 1UL<<63;\n+      f (0);\n+      nn = nnn;\n+      np = n->_mp_d;\n+      qp[-1] = -757136820;\n+      qp[nn - dn + 1] = 14883681;\n+      f (0);\n+      if (dn >= 6)\n+\tf (0);\n+      itch = nn + 1;\n+      if (itch + 1> alloc)\n+\t{\n+\t  g(0,alloc*8,(itch+1)*8);\n+\t  alloc = itch + 1;\n+\t}\n+      f (np, nn);\n+    }\n+  return 0;\n+}"}, {"sha": "2f3f9293cfbeded7ae0152491ddde343ebf608ae", "filename": "gcc/testsuite/gcc.target/i386/pr64291-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b38e8972c738b4c8d0bd701d30c0c7daa30dbe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64291-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b38e8972c738b4c8d0bd701d30c0c7daa30dbe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64291-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64291-2.c?ref=32b38e8972c738b4c8d0bd701d30c0c7daa30dbe", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+extern void abort (void);\n+void f(void*p,...){}\n+void g(void*p,long a,long b){if (a!=8) abort();}"}]}