{"sha": "0ca7178c8462ce29e086db3cb8f0a080fc7f80f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNhNzE3OGM4NDYyY2UyOWUwODZkYjNjYjhmMGEwODBmYzdmODBmMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-12-19T17:16:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-12-19T17:16:26Z"}, "message": "Handle anonymous unions at the tree level.\n\n        C++ ABI change: Mangle anonymous unions using the name of their\n        first named field (by depth-first search).  Should not cause\n        binary compatibility problems, though, as the compiler previously\n        didn't emit anything for affected unions.\n        * cp-tree.def (ALIAS_DECL): New tree code.\n        * decl2.c (build_anon_union_vars): Build ALIAS_DECLs.  Return the\n        first field, not the largest.\n        (finish_anon_union): Don't mess with RTL.  Do set DECL_ASSEMBLER_NAME,\n        push the decl, and write it out at namespace scope.\n        * decl.c (lookup_name_real): See through an ALIAS_DECL.\n        (pushdecl): Add namespace bindings for ALIAS_DECLs.\n        * rtti.c (unemitted_tinfo_decl_p): Don't try to look at the name\n        of a decl which doesn't have one.\n        * typeck.c (build_class_member_access_expr): Don't recurse if\n        we already have the type we want.\n\nFrom-SVN: r60314", "tree": {"sha": "c90067e66827d3f202e02db04548102a5067ac8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c90067e66827d3f202e02db04548102a5067ac8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e54b4cae03726bbceb7c25c8fdcf94bfcb549504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e54b4cae03726bbceb7c25c8fdcf94bfcb549504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e54b4cae03726bbceb7c25c8fdcf94bfcb549504"}], "stats": {"total": 149, "additions": 70, "deletions": 79}, "files": [{"sha": "b19003eccd5436bbf0b2da29e6641d769960ac38", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0ca7178c8462ce29e086db3cb8f0a080fc7f80f2", "patch": "@@ -1,3 +1,22 @@\n+2002-12-18  Jason Merrill  <jason@redhat.com>\n+\n+\tHandle anonymous unions at the tree level.\n+\tC++ ABI change: Mangle anonymous unions using the name of their\n+\tfirst named field (by depth-first search).  Should not cause\n+\tbinary compatibility problems, though, as the compiler previously\n+\tdidn't emit anything for affected unions.\n+\t* cp-tree.def (ALIAS_DECL): New tree code.\n+\t* decl2.c (build_anon_union_vars): Build ALIAS_DECLs.  Return the\n+\tfirst field, not the largest.\n+\t(finish_anon_union): Don't mess with RTL.  Do set DECL_ASSEMBLER_NAME,\n+\tpush the decl, and write it out at namespace scope.\n+\t* decl.c (lookup_name_real): See through an ALIAS_DECL.\n+\t(pushdecl): Add namespace bindings for ALIAS_DECLs.\n+\t* rtti.c (unemitted_tinfo_decl_p): Don't try to look at the name\n+\tof a decl which doesn't have one.\n+\t* typeck.c (build_class_member_access_expr): Don't recurse if\n+\twe already have the type we want.\n+\n 2002-12-18  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/8099"}, {"sha": "436f840697377ee8b9dbd7c35dee90efb202a147", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=0ca7178c8462ce29e086db3cb8f0a080fc7f80f2", "patch": "@@ -89,6 +89,10 @@ DEFTREECODE (THROW_EXPR, \"throw_expr\", 'e', 1)\n    these to avoid actually creating instances of the empty classes.  */\n DEFTREECODE (EMPTY_CLASS_EXPR, \"empty_class_expr\", 'e', 0)\n \n+/* A DECL which is really just a placeholder for an expression.  Used to\n+   implement non-class scope anonymous unions.  */\n+DEFTREECODE (ALIAS_DECL, \"alias_decl\", 'd', 0)\n+\n /* A reference to a member function or member functions from a base\n    class.  BASELINK_FUNCTIONS gives the FUNCTION_DECL,\n    TEMPLATE_DECL, OVERLOAD, or TEMPLATE_ID_EXPR corresponding to the"}, {"sha": "0209e344be14e9ee860b55d9fbe6b0856cb17339", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0ca7178c8462ce29e086db3cb8f0a080fc7f80f2", "patch": "@@ -4051,6 +4051,7 @@ pushdecl (x)\n   \t\t&& t != NULL_TREE)\n  \t      && (TREE_CODE (x) == TYPE_DECL\n  \t\t  || TREE_CODE (x) == VAR_DECL\n+ \t\t  || TREE_CODE (x) == ALIAS_DECL\n  \t\t  || TREE_CODE (x) == NAMESPACE_DECL\n  \t\t  || TREE_CODE (x) == CONST_DECL\n  \t\t  || TREE_CODE (x) == TEMPLATE_DECL))\n@@ -6228,6 +6229,9 @@ does not match lookup in the current scope (`%#D')\",\n   else if (from_obj)\n     val = from_obj;\n \n+  if (val && TREE_CODE (val) == ALIAS_DECL)\n+    val = DECL_INITIAL (val);\n+\n   return val;\n }\n "}, {"sha": "f33ba8d211b2f3129e046ee4007f1360d85ed756", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 38, "deletions": 77, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=0ca7178c8462ce29e086db3cb8f0a080fc7f80f2", "patch": "@@ -66,7 +66,7 @@ static int maybe_emit_vtables (tree);\n static int is_namespace_ancestor PARAMS ((tree, tree));\n static void add_using_namespace PARAMS ((tree, tree, int));\n static tree ambiguous_decl PARAMS ((tree, tree, tree,int));\n-static tree build_anon_union_vars PARAMS ((tree, tree*, int, int));\n+static tree build_anon_union_vars PARAMS ((tree));\n static int acceptable_java_type PARAMS ((tree));\n static void output_vtable_inherit PARAMS ((tree));\n static tree start_objects PARAMS ((int, int));\n@@ -1269,22 +1269,15 @@ defer_fn (fn)\n   VARRAY_PUSH_TREE (deferred_fns, fn);\n }\n \n-/* Hunts through the global anonymous union ANON_DECL, building\n-   appropriate VAR_DECLs.  Stores cleanups on the list of ELEMS, and\n-   returns a VAR_DECL whose size is the same as the size of the\n-   ANON_DECL, if one is available.\n+/* Walks through the namespace- or function-scope anonymous union OBJECT,\n+   building appropriate ALIAS_DECLs.  Returns one of the fields for use in\n+   the mangled name.  */\n \n-   FIXME: we should really handle anonymous unions by binding the names\n-   of the members to COMPONENT_REFs rather than this kludge.  */\n-\n-static tree \n-build_anon_union_vars (anon_decl, elems, static_p, external_p)\n-     tree anon_decl;\n-     tree* elems;\n-     int static_p;\n-     int external_p;\n+static tree\n+build_anon_union_vars (object)\n+     tree object;\n {\n-  tree type = TREE_TYPE (anon_decl);\n+  tree type = TREE_TYPE (object);\n   tree main_decl = NULL_TREE;\n   tree field;\n \n@@ -1298,12 +1291,14 @@ build_anon_union_vars (anon_decl, elems, static_p, external_p)\n        field = TREE_CHAIN (field))\n     {\n       tree decl;\n+      tree ref;\n \n       if (DECL_ARTIFICIAL (field))\n \tcontinue;\n       if (TREE_CODE (field) != FIELD_DECL)\n \t{\n-\t  cp_pedwarn_at (\"`%#D' invalid; an anonymous union can only have non-static data members\",\n+\t  cp_pedwarn_at (\"\\\n+`%#D' invalid; an anonymous union can only have non-static data members\",\n \t\t\t field);\n \t  continue;\n \t}\n@@ -1313,55 +1308,25 @@ build_anon_union_vars (anon_decl, elems, static_p, external_p)\n       else if (TREE_PROTECTED (field))\n \tcp_pedwarn_at (\"protected member `%#D' in anonymous union\", field);\n \n-      if (DECL_NAME (field) == NULL_TREE\n-\t  && ANON_AGGR_TYPE_P (TREE_TYPE (field)))\n-\t{\n-\t  decl = build_anon_union_vars (field, elems, static_p, external_p);\n-\t  if (!decl)\n-\t    continue;\n-\t}\n-      else if (DECL_NAME (field) == NULL_TREE)\n-\tcontinue;\n-      else\n+      ref = build_class_member_access_expr (object, field, NULL_TREE,\n+\t\t\t\t\t    false);\n+\n+      if (DECL_NAME (field))\n \t{\n-\t  decl = build_decl (VAR_DECL, DECL_NAME (field), TREE_TYPE (field));\n-\t  /* tell `pushdecl' that this is not tentative.  */\n-\t  DECL_INITIAL (decl) = error_mark_node;\n+\t  decl = build_decl (ALIAS_DECL, DECL_NAME (field), TREE_TYPE (field));\n+\t  DECL_INITIAL (decl) = ref;\t    \n \t  TREE_PUBLIC (decl) = 0;\n-\t  TREE_STATIC (decl) = static_p;\n-\t  DECL_EXTERNAL (decl) = external_p;\n+\t  TREE_STATIC (decl) = 0;\n+\t  DECL_EXTERNAL (decl) = 1;\n \t  decl = pushdecl (decl);\n-\t  DECL_INITIAL (decl) = NULL_TREE;\n-\t}\n-\n-      /* Only write out one anon union element--choose the largest\n-\t one.  We used to try to find one the same size as the union,\n-\t but that fails if the ABI forces us to align the union more\n-\t strictly.  */\n-      if (main_decl == NULL_TREE\n-\t  || tree_int_cst_lt (DECL_SIZE (main_decl), DECL_SIZE (decl)))\n-\t{\n-\t  if (main_decl)\n-\t    TREE_ASM_WRITTEN (main_decl) = 1;\n-\t  main_decl = decl;\n \t}\n-      else \n-\t/* ??? This causes there to be no debug info written out\n-\t   about this decl.  */\n-\tTREE_ASM_WRITTEN (decl) = 1;\n-      \n-      if (DECL_NAME (field) == NULL_TREE\n-\t  && ANON_AGGR_TYPE_P (TREE_TYPE (field)))\n-\t/* The remainder of the processing was already done in the\n-\t   recursive call.  */\n-\tcontinue;\n+      else if (ANON_AGGR_TYPE_P (TREE_TYPE (field)))\n+\tdecl = build_anon_union_vars (ref);\n \n-      /* If there's a cleanup to do, it belongs in the\n-\t TREE_PURPOSE of the following TREE_LIST.  */\n-      *elems = tree_cons (NULL_TREE, decl, *elems);\n-      TREE_TYPE (*elems) = type;\n+      if (main_decl == NULL_TREE)\n+\tmain_decl = decl;\n     }\n-  \n+\n   return main_decl;\n }\n \n@@ -1376,8 +1341,6 @@ finish_anon_union (anon_union_decl)\n   tree type = TREE_TYPE (anon_union_decl);\n   tree main_decl;\n   int public_p = TREE_PUBLIC (anon_union_decl);\n-  int static_p = TREE_STATIC (anon_union_decl);\n-  int external_p = DECL_EXTERNAL (anon_union_decl);\n \n   /* The VAR_DECL's context is the same as the TYPE's context.  */\n   DECL_CONTEXT (anon_union_decl) = DECL_CONTEXT (TYPE_NAME (type));\n@@ -1393,29 +1356,27 @@ finish_anon_union (anon_union_decl)\n \n   if (!processing_template_decl)\n     {\n-      main_decl \n-\t= build_anon_union_vars (anon_union_decl,\n-\t\t\t\t &DECL_ANON_UNION_ELEMS (anon_union_decl),\n-\t\t\t\t static_p, external_p);\n-      \n+      main_decl = build_anon_union_vars (anon_union_decl);\n+\n       if (main_decl == NULL_TREE)\n \t{\n-\t  warning (\"anonymous aggregate with no members\");\n+\t  warning (\"anonymous union with no members\");\n \t  return;\n \t}\n \n-      if (static_p)\n-\t{\n-\t  make_decl_rtl (main_decl, 0);\n-\t  COPY_DECL_RTL (main_decl, anon_union_decl);\n-\t  expand_anon_union_decl (anon_union_decl, \n-\t\t\t\t  NULL_TREE,\n-\t\t\t\t  DECL_ANON_UNION_ELEMS (anon_union_decl));\n-\t  return;\n-\t}\n+      /* Use main_decl to set the mangled name.  */\n+      DECL_NAME (anon_union_decl) = DECL_NAME (main_decl);\n+      mangle_decl (anon_union_decl);\n+      DECL_NAME (anon_union_decl) = NULL_TREE;\n     }\n \n-  add_decl_stmt (anon_union_decl);\n+  pushdecl (anon_union_decl);\n+  if (building_stmt_tree ()\n+      && at_function_scope_p ())\n+    add_decl_stmt (anon_union_decl);\n+  else if (!processing_template_decl)\n+    rest_of_decl_compilation (anon_union_decl, NULL,\n+\t\t\t      toplevel_bindings_p (), at_eof);\n }\n \f\n /* Auxiliary functions to make type signatures for"}, {"sha": "495e0d4576a552adb479590f92dfa5a9035b0eb7", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=0ca7178c8462ce29e086db3cb8f0a080fc7f80f2", "patch": "@@ -1444,7 +1444,9 @@ unemitted_tinfo_decl_p (t, data)\n {\n   if (/* It's a var decl */\n       TREE_CODE (t) == VAR_DECL\n-      /* whos name points back to itself */\n+      /* which has a name */\n+      && DECL_NAME (t)\n+      /* whose name points back to itself */\n       && IDENTIFIER_GLOBAL_VALUE (DECL_NAME (t)) == t\n       /* whose name's type is non-null */\n       && TREE_TYPE (DECL_NAME (t))"}, {"sha": "9285ec016867d7b594e6a05f99262064206c61ce", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0ca7178c8462ce29e086db3cb8f0a080fc7f80f2", "patch": "@@ -1987,7 +1987,8 @@ build_class_member_access_expr (tree object, tree member,\n \t OBJECT so that it refers to the class containing the\n \t anonymous union.  Generate a reference to the anonymous union\n \t itself, and recur to find MEMBER.  */\n-      if (ANON_AGGR_TYPE_P (DECL_CONTEXT (member)))\n+      if (ANON_AGGR_TYPE_P (DECL_CONTEXT (member))\n+\t  && !same_type_p (object_type, DECL_CONTEXT (member)))\n \t{\n \t  tree anonymous_union;\n "}]}