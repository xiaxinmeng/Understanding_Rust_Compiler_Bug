{"sha": "9c19597c0d9181f0bd4e8c535f12fb5d46d08afc", "node_id": "C_kwDOANBUbNoAKDljMTk1OTdjMGQ5MTgxZjBiZDRlOGM1MzVmMTJmYjVkNDZkMDhhZmM", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-11-14T15:02:10Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-11-14T15:02:10Z"}, "message": "Fix some @opindex with - in the front\n\nI noticed this during the conversion of the docs\nto sphinx that some options in the option index had a -\nin the front of it for the texinfo docs. When the sphinx\nconversion was reverted, I thought I would fix the texinfo\ndocumentation for these options.\n\nCommitted as obvious after doing \"make html\" to check\nthe resulting option index page.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: Remove the front - from\n\tsome @opindex.", "tree": {"sha": "a4d0261bae2f783d7665baf02f7e77806b68423a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4d0261bae2f783d7665baf02f7e77806b68423a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c19597c0d9181f0bd4e8c535f12fb5d46d08afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c19597c0d9181f0bd4e8c535f12fb5d46d08afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c19597c0d9181f0bd4e8c535f12fb5d46d08afc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c19597c0d9181f0bd4e8c535f12fb5d46d08afc/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "590a06afbf0e96813b5879742f38f3665512c854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/590a06afbf0e96813b5879742f38f3665512c854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/590a06afbf0e96813b5879742f38f3665512c854"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "80365d8cd15b45c55dae17e1805f5255b7a09206", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c19597c0d9181f0bd4e8c535f12fb5d46d08afc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c19597c0d9181f0bd4e8c535f12fb5d46d08afc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9c19597c0d9181f0bd4e8c535f12fb5d46d08afc", "patch": "@@ -17032,7 +17032,7 @@ routines generate output or allocate memory).\n @xref{Common Function Attributes}.\n \n @item -finstrument-functions-once\n-@opindex -finstrument-functions-once\n+@opindex finstrument-functions-once\n This is similar to @option{-finstrument-functions}, but the profiling\n functions are called only once per instrumented function, i.e. the first\n profiling function is called after the first entry into the instrumented\n@@ -25215,7 +25215,7 @@ These command-line options are defined for LoongArch targets:\n \n @table @gcctabopt\n @item -march=@var{cpu-type}\n-@opindex -march\n+@opindex march\n Generate instructions for the machine type @var{cpu-type}.  In contrast to\n @option{-mtune=@var{cpu-type}}, which merely tunes the generated code\n for the specified @var{cpu-type}, @option{-march=@var{cpu-type}} allows GCC\n@@ -25285,43 +25285,43 @@ registers for parameter passing.  This option may change the target\n ABI.\n \n @item -msingle-float\n-@opindex -msingle-float\n+@opindex msingle-float\n Force @option{-mfpu=32} and allow the use of 32-bit floating-point\n registers for parameter passing.  This option may change the target\n ABI.\n \n @item -mdouble-float\n-@opindex -mdouble-float\n+@opindex mdouble-float\n Force @option{-mfpu=64} and allow the use of 32/64-bit floating-point\n registers for parameter passing.  This option may change the target\n ABI.\n \n @item -mbranch-cost=@var{n}\n-@opindex -mbranch-cost\n+@opindex mbranch-cost\n Set the cost of branches to roughly @var{n} instructions.\n \n @item -mcheck-zero-division\n @itemx -mno-check-zero-divison\n-@opindex -mcheck-zero-division\n+@opindex mcheck-zero-division\n Trap (do not trap) on integer division by zero.  The default is\n @option{-mcheck-zero-division} for @option{-O0} or @option{-Og}, and\n @option{-mno-check-zero-division} for other optimization levels.\n \n @item -mcond-move-int\n @itemx -mno-cond-move-int\n-@opindex -mcond-move-int\n+@opindex mcond-move-int\n Conditional moves for integral data in general-purpose registers\n are enabled (disabled).  The default is @option{-mcond-move-int}.\n \n @item -mcond-move-float\n @itemx -mno-cond-move-float\n-@opindex -mcond-move-float\n+@opindex mcond-move-float\n Conditional moves for floating-point registers are enabled (disabled).\n The default is @option{-mcond-move-float}.\n \n @item -mmemcpy\n @itemx -mno-memcpy\n-@opindex -mmemcpy\n+@opindex mmemcpy\n Force (do not force) the use of @code{memcpy} for non-trivial block moves.\n The default is @option{-mno-memcpy}, which allows GCC to inline most\n constant-sized copies.  Setting optimization level to @option{-Os} also\n@@ -25331,18 +25331,18 @@ the command line.\n \n @item -mstrict-align\n @itemx -mno-strict-align\n-@opindex -mstrict-align\n+@opindex mstrict-align\n Avoid or allow generating memory accesses that may not be aligned on a natural\n object boundary as described in the architecture specification. The default is\n @option{-mno-strict-align}.\n \n @item -msmall-data-limit=@var{number}\n-@opindex -msmall-data-limit\n+@opindex msmall-data-limit\n Put global and static data smaller than @var{number} bytes into a special\n section (on some targets).  The default value is 0.\n \n @item -mmax-inline-memcpy-size=@var{n}\n-@opindex -mmax-inline-memcpy-size\n+@opindex mmax-inline-memcpy-size\n Inline all block moves (such as calls to @code{memcpy} or structure copies)\n less than or equal to @var{n} bytes.  The default value of @var{n} is 1024.\n "}]}