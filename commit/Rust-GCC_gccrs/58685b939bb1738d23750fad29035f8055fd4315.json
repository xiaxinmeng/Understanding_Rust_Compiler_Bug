{"sha": "58685b939bb1738d23750fad29035f8055fd4315", "node_id": "C_kwDOANBUbNoAKDU4Njg1YjkzOWJiMTczOGQyMzc1MGZhZDI5MDM1ZjgwNTVmZDQzMTU", "commit": {"author": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2022-10-31T06:39:18Z"}, "committer": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2022-10-31T06:39:34Z"}, "message": "Support Intel AVX-NE-CONVERT\n\ngcc/ChangeLog:\n\n\t* common/config/i386/i386-common.cc\n\t(OPTION_MASK_ISA2_AVXNECONVERT_SET,\n\tOPTION_MASK_ISA2_AVXNECONVERT_UNSET): New.\n\t(ix86_handle_option): Handle -mavxneconvert, unset\n\tavxneconvert when avx2 is disabled.\n\t* common/config/i386/i386-cpuinfo.h (processor_types): Add\n\tFEATURE_AVXNECONVERT.\n\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY for\n\tavxneconvert.\n\t* common/config/i386/cpuinfo.h (get_available_features):\n\tDetect avxneconvert.\n\t* config.gcc: Add avxneconvertintrin.h\n\t* config/i386/avxneconvertintrin.h: New.\n\t* config/i386/avx512bf16vlintrin.h (_mm256_cvtneps_pbh):\n\tUnified builtin with avxneconvert.\n\t(_mm_cvtneps_pbh): Ditto.\n\t* config/i386/cpuid.h (bit_AVXNECONVERT): New.\n\t* config/i386/i386-builtin-types.def: Add\n\tDEF_POINTER_TYPE (PCV8HF, V8HF, CONST),\n\tDEF_POINTER_TYPE (PCV8BF, V8BF, CONST),\n\tDEF_POINTER_TYPE (PCV16HF, V16HF, CONST),\n\tDEF_POINTER_TYPE (PCV16BF, V16BF, CONST),\n\tDEF_FUNCTION_TYPE (V4SF, PCBFLOAT16),\n\tDEF_FUNCTION_TYPE (V4SF, PCFLOAT16),\n\tDEF_FUNCTION_TYPE (V8SF, PCBFLOAT16),\n\tDEF_FUNCTION_TYPE (V8SF, PCFLOAT16),\n\tDEF_FUNCTION_TYPE (V4SF, PCV8BF),\n\tDEF_FUNCTION_TYPE (V4SF, PCV8HF),\n\tDEF_FUNCTION_TYPE (V8SF, PCV16HF),\n\tDEF_FUNCTION_TYPE (V8SF, PCV16BF),\n\t* config/i386/i386-builtin.def: Add new builtins.\n\t* config/i386/i386-c.cc (ix86_target_macros_internal): Define\n\t__AVXNECONVERT__.\n\t* config/i386/i386-expand.cc (ix86_expand_special_args_builtin):\n\tHandle V4SF_FTYPE_PCBFLOAT16,V8SF_FTYPE_PCBFLOAT16, V4SF_FTYPE_PCFLOAT16,\n\tV8SF_FTYPE_PCFLOAT16,V4SF_FTYPE_PCV8BF,\n\tV4SF_FTYPE_PCV8HF,V8SF_FTYPE_PCV16BF,V8SF_FTYPE_PCV16HF.\n\t* config/i386/i386-isa.def : Add DEF_PTA(AVXNECONVERT) New.\n\t* config/i386/i386-options.cc (isa2_opts): Add -mavxneconvert.\n\t(ix86_valid_target_attribute_inner_p): Handle avxneconvert.\n\t* config/i386/i386.md: Add attr avx512bf16vl and avxneconvert.\n\t* config/i386/i386.opt: Add option -mavxneconvert.\n\t* config/i386/immintrin.h: Inculde avxneconvertintrin.h.\n\t* config/i386/sse.md (vbcstnebf162ps_<mode>): New define_insn.\n\t(vbcstnesh2ps_<mode>): Ditto.\n\t(vcvtnee<bf16_ph>2ps_<mode>):Ditto.\n\t(vcvtneo<bf16_ph>2ps_<mode>):Ditto.\n\t(vcvtneps2bf16_v4sf): Ditto.\n\t(*vcvtneps2bf16_v4sf): Ditto.\n\t(vcvtneps2bf16_v8sf): Ditto.\n\t* doc/invoke.texi: Document -mavxneconvert.\n\t* doc/extend.texi: Document avxneconvert.\n\t* doc/sourcebuild.texi: Document target avxneconvert.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-check.h: Add avxneconvert check.\n\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n\t* gcc.target/i386/sse-12.c: Add -mavxneconvert.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* g++.dg/other/i386-2.C: Ditto.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* lib/target-supports.exp:add check_effective_target_avxneconvert.\n\t* gcc.target/i386/avx-ne-convert-1.c: New test.\n\t* gcc.target/i386/avx-ne-convert-vbcstnebf162ps-2.c: Ditto.\n\t* gcc.target/i386/avx-ne-convert-vbcstnesh2ps-2.c: Ditto.\n\t* gcc.target/i386/avx-ne-convert-vcvtneebf162ps-2.c: Ditto.\n\t* gcc.target/i386/avx-ne-convert-vcvtneeph2ps-2.c: Ditto.\n\t* gcc.target/i386/avx-ne-convert-vcvtneobf162ps-2.c: Ditto.\n\t* gcc.target/i386/avx-ne-convert-vcvtneoph2ps-2.c: Ditto.\n\t* gcc.target/i386/avx-ne-convert-vcvtneps2bf16-2.c: Ditto.\n\t* gcc.target/i386/avx512bf16vl-vcvtneps2bf16-1.c: Rename..\n\t* gcc.target/i386/avx512bf16vl-vcvtneps2bf16-1a.c: To this.\n\t* gcc.target/i386/avx512bf16vl-vcvtneps2bf16-1b.c: New test.", "tree": {"sha": "616fd821ab034f4e40ed823c023e201219f28225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/616fd821ab034f4e40ed823c023e201219f28225"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58685b939bb1738d23750fad29035f8055fd4315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58685b939bb1738d23750fad29035f8055fd4315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58685b939bb1738d23750fad29035f8055fd4315", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58685b939bb1738d23750fad29035f8055fd4315/comments", "author": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "committer": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87235f1e5c740de9c6f72a5dd7d7eb9cb7df2e1d"}], "stats": {"total": 925, "additions": 887, "deletions": 38}, "files": [{"sha": "62c3d1b6b0013bc7152441f935e3048a64586c1f", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -839,6 +839,8 @@ get_available_features (struct __processor_model *cpu_model,\n \t    set_feature (FEATURE_AVXIFMA);\n \t  if (edx & bit_AVXVNNIINT8)\n \t    set_feature (FEATURE_AVXVNNIINT8);\n+\t  if (edx & bit_AVXNECONVERT)\n+\t    set_feature (FEATURE_AVXNECONVERT);\n \t}\n       if (avx512_usable)\n \t{"}, {"sha": "cd6ad2c477b6b8e837940d01938978976015d71f", "filename": "gcc/common/config/i386/i386-common.cc", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -109,6 +109,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AMX_INT8_SET OPTION_MASK_ISA2_AMX_INT8\n #define OPTION_MASK_ISA2_AMX_BF16_SET OPTION_MASK_ISA2_AMX_BF16\n #define OPTION_MASK_ISA2_AVXVNNIINT8_SET OPTION_MASK_ISA2_AVXVNNIINT8\n+#define OPTION_MASK_ISA2_AVXNECONVERT_SET OPTION_MASK_ISA2_AVXNECONVERT\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -215,7 +216,8 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_AVX2 | OPTION_MASK_ISA_AVX512F_UNSET)\n #define OPTION_MASK_ISA2_AVX2_UNSET \\\n   (OPTION_MASK_ISA2_AVXIFMA_UNSET | OPTION_MASK_ISA2_AVXVNNI_UNSET \\\n-   | OPTION_MASK_ISA2_AVXVNNIINT8_UNSET | OPTION_MASK_ISA2_AVX512F_UNSET)\n+   | OPTION_MASK_ISA2_AVXVNNIINT8_UNSET | OPTION_MASK_ISA2_AVXNECONVERT_UNSET \\\n+   | OPTION_MASK_ISA2_AVX512F_UNSET)\n #define OPTION_MASK_ISA_AVX512F_UNSET \\\n   (OPTION_MASK_ISA_AVX512F | OPTION_MASK_ISA_AVX512CD_UNSET \\\n    | OPTION_MASK_ISA_AVX512PF_UNSET | OPTION_MASK_ISA_AVX512ER_UNSET \\\n@@ -280,6 +282,7 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA2_KL | OPTION_MASK_ISA2_WIDEKL_UNSET)\n #define OPTION_MASK_ISA2_WIDEKL_UNSET OPTION_MASK_ISA2_WIDEKL\n #define OPTION_MASK_ISA2_AVXVNNIINT8_UNSET OPTION_MASK_ISA2_AVXVNNIINT8\n+#define OPTION_MASK_ISA2_AVXNECONVERT_UNSET OPTION_MASK_ISA2_AVXNECONVERT\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -1162,6 +1165,22 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mavxneconvert:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AVXNECONVERT_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVXNECONVERT_SET;\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX2_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX2_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVXNECONVERT_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit\n+\t    |= OPTION_MASK_ISA2_AVXNECONVERT_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mfma:\n       if (value)\n \t{"}, {"sha": "4fbbfa5b701c7a4b4028504c41a18af73b0817a1", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -245,6 +245,7 @@ enum processor_features\n   FEATURE_X86_64_V4,\n   FEATURE_AVXIFMA,\n   FEATURE_AVXVNNIINT8,\n+  FEATURE_AVXNECONVERT,\n   CPU_FEATURE_MAX\n };\n "}, {"sha": "bceaee589ee3c3a1ee36c7ec22929f3b7c0815a6", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -178,4 +178,6 @@ ISA_NAMES_TABLE_START\n   ISA_NAMES_TABLE_ENTRY(\"avxifma\", FEATURE_AVXIFMA, P_NONE, \"-mavxifma\")\n   ISA_NAMES_TABLE_ENTRY(\"avxvnniint8\", FEATURE_AVXVNNIINT8,\n \t\t\tP_NONE, \"-mavxvnniint8\")\n+  ISA_NAMES_TABLE_ENTRY(\"avxneconvert\", FEATURE_AVXNECONVERT,\n+\t\t\tP_NONE, \"-mavxneconvert\")\n ISA_NAMES_TABLE_END"}, {"sha": "c2f8aab04db0a7b66589459e8a727a1ceb30a6ea", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -422,7 +422,7 @@ i[34567]86-*-* | x86_64-*-*)\n \t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\n \t\t       hresetintrin.h keylockerintrin.h avxvnniintrin.h\n \t\t       mwaitintrin.h avx512fp16intrin.h avx512fp16vlintrin.h\n-\t\t       avxifmaintrin.h avxvnniint8intrin.h\"\n+\t\t       avxifmaintrin.h avxvnniint8intrin.h avxneconvertintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "e70690342cf5a4ee575fe949fb0caa26800bc2c5", "filename": "gcc/config/i386/avx512bf16vlintrin.h", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Favx512bf16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Favx512bf16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bf16vlintrin.h?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -45,6 +45,11 @@ typedef __bf16 __m128bh __attribute__ ((__vector_size__ (16), __may_alias__));\n \n typedef __bf16 __bfloat16;\n \n+#define _mm256_cvtneps_pbh(A) \\\n+  (__m128bh) __builtin_ia32_cvtneps2bf16_v8sf (A)\n+#define _mm_cvtneps_pbh(A) \\\n+  (__m128bh) __builtin_ia32_cvtneps2bf16_v4sf (A)\n+\n /* vcvtne2ps2bf16 */\n \n extern __inline __m256bh\n@@ -91,13 +96,6 @@ _mm_maskz_cvtne2ps_pbh (__mmask8 __A, __m128 __B, __m128 __C)\n \n /* vcvtneps2bf16 */\n \n-extern __inline __m128bh\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_cvtneps_pbh (__m256 __A)\n-{\n-  return (__m128bh)__builtin_ia32_cvtneps2bf16_v8sf(__A);\n-}\n-\n extern __inline __m128bh\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cvtneps_pbh (__m128bh __A, __mmask8 __B, __m256 __C)\n@@ -112,13 +110,6 @@ _mm256_maskz_cvtneps_pbh (__mmask8 __A, __m256 __B)\n   return (__m128bh)__builtin_ia32_cvtneps2bf16_v8sf_maskz(__B, __A);\n }\n \n-extern __inline __m128bh\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_cvtneps_pbh (__m128 __A)\n-{\n-  return (__m128bh)__builtin_ia32_cvtneps2bf16_v4sf(__A);\n-}\n-\n extern __inline __m128bh\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtneps_pbh (__m128bh __A, __mmask8 __B, __m128 __C)"}, {"sha": "916f00a6676914e97b331d25871b42d832471a7a", "filename": "gcc/config/i386/avxneconvertintrin.h", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Favxneconvertintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Favxneconvertintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxneconvertintrin.h?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -0,0 +1,140 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avxneconvertintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVXNECONVERTINTRIN_H_INCLUDED\n+#define _AVXNECONVERTINTRIN_H_INCLUDED\n+\n+#ifndef __AVXNECONVERT__\n+#pragma GCC push_options\n+#pragma GCC target (\"avxneconvert\")\n+#define __DISABLE_AVXNECONVERT__\n+#endif /* __AVXNECONVERT__ */\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_bcstnebf16_ps (const void *__P)\n+{\n+  return (__m128) __builtin_ia32_vbcstnebf162ps128 ((const __bf16 *) __P);\n+}\n+\n+extern __inline __m256\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_bcstnebf16_ps (const void *__P)\n+{\n+  return (__m256) __builtin_ia32_vbcstnebf162ps256 ((const __bf16 *) __P);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_bcstnesh_ps (const void *__P)\n+{\n+  return (__m128) __builtin_ia32_vbcstnesh2ps128 ((const _Float16 *) __P);\n+}\n+\n+extern __inline __m256\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_bcstnesh_ps (const void *__P)\n+{\n+  return (__m256) __builtin_ia32_vbcstnesh2ps256 ((const _Float16 *) __P);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtneebf16_ps (const __m128bh *__A)\n+{\n+  return (__m128) __builtin_ia32_vcvtneebf162ps128 ((const __v8bf *) __A);\n+}\n+\n+extern __inline __m256\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtneebf16_ps (const __m256bh *__A)\n+{\n+  return (__m256) __builtin_ia32_vcvtneebf162ps256 ((const __v16bf *) __A);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtneeph_ps (const __m128h *__A)\n+{\n+  return (__m128) __builtin_ia32_vcvtneeph2ps128 ((const __v8hf *) __A);\n+}\n+\n+extern __inline __m256\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtneeph_ps (const __m256h *__A)\n+{\n+  return (__m256) __builtin_ia32_vcvtneeph2ps256 ((const __v16hf *) __A);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtneobf16_ps (const __m128bh *__A)\n+{\n+  return (__m128) __builtin_ia32_vcvtneobf162ps128 ((const __v8bf *) __A);\n+}\n+\n+extern __inline __m256\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtneobf16_ps (const __m256bh *__A)\n+{\n+  return (__m256) __builtin_ia32_vcvtneobf162ps256 ((const __v16bf *) __A);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtneoph_ps (const __m128h *__A)\n+{\n+  return (__m128) __builtin_ia32_vcvtneoph2ps128 ((const __v8hf *) __A);\n+}\n+\n+extern __inline __m256\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtneoph_ps (const __m256h *__A)\n+{\n+  return (__m256) __builtin_ia32_vcvtneoph2ps256 ((const __v16hf *) __A);\n+}\n+\n+extern __inline __m128bh\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtneps_avx_pbh (__m128 __A)\n+{\n+  return (__m128bh) __builtin_ia32_cvtneps2bf16_v4sf (__A);\n+}\n+\n+extern __inline __m128bh\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtneps_avx_pbh (__m256 __A)\n+{\n+  return (__m128bh) __builtin_ia32_cvtneps2bf16_v8sf (__A);\n+}\n+\n+#ifdef __DISABLE_AVXNECONVERT__\n+#undef __DISABLE_AVXNECONVERT__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVXNECONVERT__ */\n+\n+#endif /* _AVXNECONVERTINTRIN_H_INCLUDED */"}, {"sha": "18bbc0cb7bed7e9862deaa0672c9f8391a01109a", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -50,6 +50,7 @@\n \n /* %edx */\n #define bit_AVXVNNIINT8 (1 << 4)\n+#define bit_AVXNECONVERT (1 << 5)\n #define bit_CMPXCHG8B\t(1 << 8)\n #define bit_CMOV\t(1 << 15)\n #define bit_MMX\t\t(1 << 23)"}, {"sha": "abbb50b1192ea6710756f7c1e9beec1f6c1a36d6", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -139,6 +139,7 @@ DEF_POINTER_TYPE (PVOID, VOID)\n DEF_POINTER_TYPE (PDOUBLE, DOUBLE)\n DEF_POINTER_TYPE (PFLOAT, FLOAT)\n DEF_POINTER_TYPE (PCFLOAT16, FLOAT16, CONST)\n+DEF_POINTER_TYPE (PCBFLOAT16, BFLOAT16, CONST)\n DEF_POINTER_TYPE (PSHORT, SHORT)\n DEF_POINTER_TYPE (PUSHORT, USHORT)\n DEF_POINTER_TYPE (PINT, INT)\n@@ -182,6 +183,10 @@ DEF_POINTER_TYPE (PCV4DF, V4DF, CONST)\n DEF_POINTER_TYPE (PCV4SF, V4SF, CONST)\n DEF_POINTER_TYPE (PCV8DF, V8DF, CONST)\n DEF_POINTER_TYPE (PCV8SF, V8SF, CONST)\n+DEF_POINTER_TYPE (PCV8HF, V8HF, CONST)\n+DEF_POINTER_TYPE (PCV8BF, V8BF, CONST)\n+DEF_POINTER_TYPE (PCV16HF, V16HF, CONST)\n+DEF_POINTER_TYPE (PCV16BF, V16BF, CONST)\n DEF_POINTER_TYPE (PCV16SF, V16SF, CONST)\n \n DEF_POINTER_TYPE (PCV2DI, V2DI, CONST)\n@@ -1392,3 +1397,13 @@ DEF_FUNCTION_TYPE (V32HF, V32HF)\n DEF_FUNCTION_TYPE_ALIAS (V8HF_FTYPE_V8HF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V16HF_FTYPE_V16HF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V32HF_FTYPE_V32HF, ROUND)\n+\n+# AVXNECONVERT builtins\n+DEF_FUNCTION_TYPE (V4SF, PCBFLOAT16)\n+DEF_FUNCTION_TYPE (V8SF, PCBFLOAT16)\n+DEF_FUNCTION_TYPE (V4SF, PCFLOAT16)\n+DEF_FUNCTION_TYPE (V8SF, PCFLOAT16)\n+DEF_FUNCTION_TYPE (V4SF, PCV8HF)\n+DEF_FUNCTION_TYPE (V8SF, PCV16HF)\n+DEF_FUNCTION_TYPE (V4SF, PCV8BF)\n+DEF_FUNCTION_TYPE (V8SF, PCV16BF)"}, {"sha": "9345b8c5d6944f2ef64d78cf1b3e64f946ec07a8", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -274,6 +274,20 @@ BDESC (OPTION_MASK_ISA_RTM, 0, CODE_FOR_xbegin, \"__builtin_ia32_xbegin\", IX86_BU\n BDESC (OPTION_MASK_ISA_RTM, 0, CODE_FOR_xend, \"__builtin_ia32_xend\", IX86_BUILTIN_XEND, UNKNOWN, (int) VOID_FTYPE_VOID)\n BDESC (OPTION_MASK_ISA_RTM, 0, CODE_FOR_xtest, \"__builtin_ia32_xtest\", IX86_BUILTIN_XTEST, UNKNOWN, (int) INT_FTYPE_VOID)\n \n+/* AVX-NE-CONVERT */\n+BDESC (0, OPTION_MASK_ISA2_AVXNECONVERT, CODE_FOR_vbcstnebf162ps_v4sf, \"__builtin_ia32_vbcstnebf162ps128\", IX86_BUILTIN_VBCSTNEBF162PS128, UNKNOWN, (int) V4SF_FTYPE_PCBFLOAT16)\n+BDESC (0, OPTION_MASK_ISA2_AVXNECONVERT, CODE_FOR_vbcstnebf162ps_v8sf, \"__builtin_ia32_vbcstnebf162ps256\", IX86_BUILTIN_VBCSTNEBF162PS256, UNKNOWN, (int) V8SF_FTYPE_PCBFLOAT16)\n+BDESC (0, OPTION_MASK_ISA2_AVXNECONVERT, CODE_FOR_vbcstnesh2ps_v4sf, \"__builtin_ia32_vbcstnesh2ps128\", IX86_BUILTIN_VBCSTNESH2PS128, UNKNOWN, (int) V4SF_FTYPE_PCFLOAT16)\n+BDESC (0, OPTION_MASK_ISA2_AVXNECONVERT, CODE_FOR_vbcstnesh2ps_v8sf, \"__builtin_ia32_vbcstnesh2ps256\", IX86_BUILTIN_VBCSTNESH2PS256, UNKNOWN, (int) V8SF_FTYPE_PCFLOAT16)\n+BDESC (0, OPTION_MASK_ISA2_AVXNECONVERT, CODE_FOR_vcvtneebf162ps_v8bf, \"__builtin_ia32_vcvtneebf162ps128\", IX86_BUILTIN_VCVTNEEBF162PS128, UNKNOWN, (int) V4SF_FTYPE_PCV8BF)\n+BDESC (0, OPTION_MASK_ISA2_AVXNECONVERT, CODE_FOR_vcvtneebf162ps_v16bf, \"__builtin_ia32_vcvtneebf162ps256\", IX86_BUILTIN_VCVTNEEBF162PS256, UNKNOWN, (int) V8SF_FTYPE_PCV16BF)\n+BDESC (0, OPTION_MASK_ISA2_AVXNECONVERT, CODE_FOR_vcvtneeph2ps_v8hf, \"__builtin_ia32_vcvtneeph2ps128\", IX86_BUILTIN_VCVTNEEPH2PS128, UNKNOWN, (int) V4SF_FTYPE_PCV8HF)\n+BDESC (0, OPTION_MASK_ISA2_AVXNECONVERT, CODE_FOR_vcvtneeph2ps_v16hf, \"__builtin_ia32_vcvtneeph2ps256\", IX86_BUILTIN_VCVTNEEPH2PS256, UNKNOWN, (int) V8SF_FTYPE_PCV16HF)\n+BDESC (0, OPTION_MASK_ISA2_AVXNECONVERT, CODE_FOR_vcvtneobf162ps_v8bf, \"__builtin_ia32_vcvtneobf162ps128\", IX86_BUILTIN_VCVTNEOBF162PS128, UNKNOWN, (int) V4SF_FTYPE_PCV8BF)\n+BDESC (0, OPTION_MASK_ISA2_AVXNECONVERT, CODE_FOR_vcvtneobf162ps_v16bf, \"__builtin_ia32_vcvtneobf162ps256\", IX86_BUILTIN_VCVTNEOBF162PS256, UNKNOWN, (int) V8SF_FTYPE_PCV16BF)\n+BDESC (0, OPTION_MASK_ISA2_AVXNECONVERT, CODE_FOR_vcvtneoph2ps_v8hf, \"__builtin_ia32_vcvtneoph2ps128\", IX86_BUILTIN_VCVTNEOPH2PS128, UNKNOWN, (int) V4SF_FTYPE_PCV8HF)\n+BDESC (0, OPTION_MASK_ISA2_AVXNECONVERT, CODE_FOR_vcvtneoph2ps_v16hf, \"__builtin_ia32_vcvtneoph2ps256\", IX86_BUILTIN_VCVTNEOPH2PS256, UNKNOWN, (int) V8SF_FTYPE_PCV16HF)\n+\n /* AVX512BW */\n BDESC (OPTION_MASK_ISA_AVX512BW, 0, CODE_FOR_avx512bw_loadv32hi_mask, \"__builtin_ia32_loaddquhi512_mask\", IX86_BUILTIN_LOADDQUHI512_MASK, UNKNOWN, (int) V32HI_FTYPE_PCSHORT_V32HI_USI)\n BDESC (OPTION_MASK_ISA_AVX512BW, 0, CODE_FOR_avx512bw_loadv64qi_mask, \"__builtin_ia32_loaddquqi512_mask\", IX86_BUILTIN_LOADDQUQI512_MASK, UNKNOWN, (int) V64QI_FTYPE_PCCHAR_V64QI_UDI)\n@@ -2791,10 +2805,10 @@ BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtne2ps2bf16_v8bf_maskz\n BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v16sf, \"__builtin_ia32_cvtneps2bf16_v16sf\", IX86_BUILTIN_CVTNEPS2BF16_V16SF, UNKNOWN, (int) V16BF_FTYPE_V16SF)\n BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v16sf_mask, \"__builtin_ia32_cvtneps2bf16_v16sf_mask\", IX86_BUILTIN_CVTNEPS2BF16_V16SF_MASK, UNKNOWN, (int) V16BF_FTYPE_V16SF_V16BF_UHI)\n BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v16sf_maskz, \"__builtin_ia32_cvtneps2bf16_v16sf_maskz\", IX86_BUILTIN_CVTNE2PS2BF16_V16SF_MASKZ, UNKNOWN, (int) V16BF_FTYPE_V16SF_UHI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v8sf, \"__builtin_ia32_cvtneps2bf16_v8sf\", IX86_BUILTIN_CVTNEPS2BF16_V8SF, UNKNOWN, (int) V8BF_FTYPE_V8SF)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVXNECONVERT | OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_vcvtneps2bf16_v8sf, \"__builtin_ia32_cvtneps2bf16_v8sf\", IX86_BUILTIN_CVTNEPS2BF16_V8SF, UNKNOWN, (int) V8BF_FTYPE_V8SF)\n BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v8sf_mask, \"__builtin_ia32_cvtneps2bf16_v8sf_mask\", IX86_BUILTIN_CVTNEPS2BF16_V8SF_MASK, UNKNOWN, (int) V8BF_FTYPE_V8SF_V8BF_UQI)\n BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v8sf_maskz, \"__builtin_ia32_cvtneps2bf16_v8sf_maskz\", IX86_BUILTIN_CVTNE2PS2BF16_V8SF_MASKZ, UNKNOWN, (int) V8BF_FTYPE_V8SF_UQI)\n-BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v4sf, \"__builtin_ia32_cvtneps2bf16_v4sf\", IX86_BUILTIN_CVTNEPS2BF16_V4SF, UNKNOWN, (int) V8BF_FTYPE_V4SF)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVXNECONVERT | OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_vcvtneps2bf16_v4sf, \"__builtin_ia32_cvtneps2bf16_v4sf\", IX86_BUILTIN_CVTNEPS2BF16_V4SF, UNKNOWN, (int) V8BF_FTYPE_V4SF)\n BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v4sf_mask, \"__builtin_ia32_cvtneps2bf16_v4sf_mask\", IX86_BUILTIN_CVTNEPS2BF16_V4SF_MASK, UNKNOWN, (int) V8BF_FTYPE_V4SF_V8BF_UQI)\n BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_cvtneps2bf16_v4sf_maskz, \"__builtin_ia32_cvtneps2bf16_v4sf_maskz\", IX86_BUILTIN_CVTNE2PS2BF16_V4SF_MASKZ, UNKNOWN, (int) V8BF_FTYPE_V4SF_UQI)\n BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v16sf, \"__builtin_ia32_dpbf16ps_v16sf\", IX86_BUILTIN_DPBF16PS_V16SF, UNKNOWN, (int) V16SF_FTYPE_V16SF_V32BF_V32BF)"}, {"sha": "fa195e739a6434ffbf6969b45ab1eda0777f483b", "filename": "gcc/config/i386/i386-c.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.cc?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -644,6 +644,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__AVXIFMA__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_AVXVNNIINT8)\n     def_or_undef (parse_in, \"__AVXVNNIINT8__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_AVXNECONVERT)\n+    def_or_undef (parse_in, \"__AVXNECONVERT__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "7d17bfeadeacc4576d5e903e1b31874203ad6349", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -11897,6 +11897,14 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case V8SF_FTYPE_PCV4SF:\n     case V8SF_FTYPE_PCFLOAT:\n     case V4SF_FTYPE_PCFLOAT:\n+    case V4SF_FTYPE_PCFLOAT16:\n+    case V4SF_FTYPE_PCBFLOAT16:\n+    case V4SF_FTYPE_PCV8BF:\n+    case V4SF_FTYPE_PCV8HF:\n+    case V8SF_FTYPE_PCFLOAT16:\n+    case V8SF_FTYPE_PCBFLOAT16:\n+    case V8SF_FTYPE_PCV16HF:\n+    case V8SF_FTYPE_PCV16BF:\n     case V4DF_FTYPE_PCV2DF:\n     case V4DF_FTYPE_PCDOUBLE:\n     case V2DF_FTYPE_PCDOUBLE:\n@@ -12406,6 +12414,8 @@ ix86_check_builtin_isa_match (unsigned int fcode,\n        OPTION_MASK_ISA2_AVXVNNI\n      (OPTION_MASK_ISA_AVX512IFMA | OPTION_MASK_ISA_AVX512IFMA) or\n        OPTION_MASK_ISA2_AVXIFMA\n+     (OPTION_MASK_ISA_AVXNECONVERT | OPTION_MASK_ISA2_AVX512BF16) or\n+       OPTION_MASK_ISA2_AVXNECONVERT\n      where for each such pair it is sufficient if either of the ISAs is\n      enabled, plus if it is ored with other options also those others.\n      OPTION_MASK_ISA_MMX in bisa is satisfied also if TARGET_MMX_WITH_SSE.  */\n@@ -12446,6 +12456,17 @@ ix86_check_builtin_isa_match (unsigned int fcode,\n       isa2 |= OPTION_MASK_ISA2_AVXIFMA;\n     }\n \n+  if ((((bisa & OPTION_MASK_ISA_AVX512VL) != 0\n+\t && (bisa2 & OPTION_MASK_ISA2_AVX512BF16) != 0)\n+\t&& (bisa2 & OPTION_MASK_ISA2_AVXNECONVERT) != 0)\n+       && (((isa & OPTION_MASK_ISA_AVX512VL) != 0\n+\t    && (isa2 & OPTION_MASK_ISA2_AVX512BF16) != 0)\n+\t   || (isa2 & OPTION_MASK_ISA2_AVXNECONVERT) != 0))\n+    {\n+      isa |= OPTION_MASK_ISA_AVX512VL;\n+      isa2 |= OPTION_MASK_ISA2_AVXNECONVERT | OPTION_MASK_ISA2_AVX512BF16;\n+    }\n+\n   if ((bisa & OPTION_MASK_ISA_MMX) && !TARGET_MMX && TARGET_MMX_WITH_SSE\n       /* __builtin_ia32_maskmovq requires MMX registers.  */\n       && fcode != IX86_BUILTIN_MASKMOVQ)"}, {"sha": "4ea3f96f69fb4434c9732c2e077f79c8345c6154", "filename": "gcc/config/i386/i386-isa.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-isa.def?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -111,3 +111,4 @@ DEF_PTA(AVXVNNI)\n DEF_PTA(AVX512FP16)\n DEF_PTA(AVXIFMA)\n DEF_PTA(AVXVNNIINT8)\n+DEF_PTA(AVXNECONVERT)"}, {"sha": "ef9c888980c0c88a5df870865717d4d1eefd146c", "filename": "gcc/config/i386/i386-options.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.cc?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -229,7 +229,8 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mavxvnni\",\tOPTION_MASK_ISA2_AVXVNNI },\n   { \"-mavx512fp16\",\tOPTION_MASK_ISA2_AVX512FP16 },\n   { \"-mavxifma\",\tOPTION_MASK_ISA2_AVXIFMA },\n-  { \"-mavxvnniint8\",\tOPTION_MASK_ISA2_AVXVNNIINT8 }\n+  { \"-mavxvnniint8\",\tOPTION_MASK_ISA2_AVXVNNIINT8 },\n+  { \"-mavxneconvert\",   OPTION_MASK_ISA2_AVXNECONVERT }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1078,6 +1079,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"avx512fp16\", OPT_mavx512fp16),\n     IX86_ATTR_ISA (\"avxifma\", OPT_mavxifma),\n     IX86_ATTR_ISA (\"avxvnniint8\", OPT_mavxvnniint8),\n+    IX86_ATTR_ISA (\"avxneconvert\", OPT_mavxneconvert),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "f28c2a171d71a088f023bbc7266cd76b177762e9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -837,7 +837,7 @@\n \t\t    avx,noavx,avx2,noavx2,bmi,bmi2,fma4,fma,avx512f,noavx512f,\n \t\t    avx512bw,noavx512bw,avx512dq,noavx512dq,fma_or_avx512vl,\n \t\t    avx512vl,noavx512vl,avxvnni,avx512vnnivl,avx512fp16,avxifma,\n-\t\t    avx512ifmavl\"\n+\t\t    avx512ifmavl,avxneconvert,avx512bf16vl\"\n   (const_string \"base\"))\n \n ;; Define instruction set of MMX instructions\n@@ -896,6 +896,9 @@\n \t (eq_attr \"isa\" \"avxifma\") (symbol_ref \"TARGET_AVXIFMA\")\n \t (eq_attr \"isa\" \"avx512ifmavl\")\n \t   (symbol_ref \"TARGET_AVX512IFMA && TARGET_AVX512VL\")\n+\t (eq_attr \"isa\" \"avxneconvert\") (symbol_ref \"TARGET_AVXNECONVERT\")\n+\t (eq_attr \"isa\" \"avx512bf16vl\")\n+\t   (symbol_ref \"TARGET_AVX512BF16 && TARGET_AVX512VL\")\n \n \t (eq_attr \"mmx_isa\" \"native\")\n \t   (symbol_ref \"!TARGET_MMX_WITH_SSE\")"}, {"sha": "6e07b89ac4c86fd2214860eb49c6faad0d7cccdb", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -1224,3 +1224,8 @@ mavxvnniint8\n Target Mask(ISA2_AVXVNNIINT8) Var(ix86_isa_flags2) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and\n AVXVNNIINT8 built-in functions and code generation.\n+\n+mavxneconvert\n+Target Mask(ISA2_AVXNECONVERT) Var(ix86_isa_flags2) Save\n+Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, and\n+AVXNECONVERT build-in functions and code generation."}, {"sha": "8629abaf30c2cd3d41fd045bd102a74c273ed7cb", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -122,6 +122,8 @@\n #include <avx512bf16vlintrin.h>\n \n #include <avx512bf16intrin.h>\n+\n+#include <avxneconvertintrin.h>\n #endif\n \n #include <amxtileintrin.h>"}, {"sha": "3df9e07e2ca6264bc1569deea19a1e4cf6bf5915", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 101, "deletions": 7, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -28950,23 +28950,27 @@\n   \"TARGET_AVX512BF16\"\n   \"vcvtne2ps2bf16\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\")\n \n-(define_expand \"avx512f_cvtneps2bf16_v4sf\"\n+(define_expand \"vcvtneps2bf16_v4sf\"\n   [(set (match_operand:V8BF 0 \"register_operand\")\n \t(vec_concat:V8BF\n \t  (float_truncate:V4BF\n \t    (match_operand:V4SF 1 \"nonimmediate_operand\"))\n \t  (match_dup 2)))]\n-  \"TARGET_AVX512BF16 && TARGET_AVX512VL\"\n+  \"TARGET_AVXNECONVERT || (TARGET_AVX512BF16 && TARGET_AVX512VL)\"\n   \"operands[2] = CONST0_RTX (V4BFmode);\")\n \n-(define_insn \"*avx512f_cvtneps2bf16_v4sf\"\n-  [(set (match_operand:V8BF 0 \"register_operand\" \"=v\")\n+(define_insn \"*vcvtneps2bf16_v4sf\"\n+  [(set (match_operand:V8BF 0 \"register_operand\" \"=x,v\")\n \t(vec_concat:V8BF\n \t  (float_truncate:V4BF\n-\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\"))\n+\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"xm,vm\"))\n \t  (match_operand:V4BF 2 \"const0_operand\")))]\n-  \"TARGET_AVX512BF16 && TARGET_AVX512VL\"\n-  \"vcvtneps2bf16{x}\\t{%1, %0|%0, %1}\")\n+  \"TARGET_AVXNECONVERT || (TARGET_AVX512BF16 && TARGET_AVX512VL)\"\n+  \"@\n+  %{vex%} vcvtneps2bf16{x}\\t{%1, %0|%0, %1}\n+  vcvtneps2bf16{x}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"isa\" \"avxneconvert,avx512bf16vl\")\n+   (set_attr \"prefix\" \"vex,evex\")])\n \n (define_expand \"avx512f_cvtneps2bf16_v4sf_maskz\"\n   [(match_operand:V8BF 0 \"register_operand\")\n@@ -29019,6 +29023,18 @@\n   DONE;\n })\n \n+(define_insn \"vcvtneps2bf16_v8sf\"\n+  [(set (match_operand:V8BF 0 \"register_operand\" \"=x,v\")\n+\t(float_truncate:V8BF\n+\t  (match_operand:V8SF 1 \"nonimmediate_operand\" \"xm,vm\")))]\n+  \"TARGET_AVXNECONVERT || (TARGET_AVX512BF16 && TARGET_AVX512VL)\"\n+  \"@\n+  %{vex%} vcvtneps2bf16{y}\\t{%1, %0|%0, %1}\n+  vcvtneps2bf16{y}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"isa\" \"avxneconvert,avx512bf16vl\")\n+   (set_attr \"prefix\" \"vex,evex\")])\n+\n+\n (define_insn \"avx512f_cvtneps2bf16_<mode><mask_name>\"\n   [(set (match_operand:<sf_cvt_bf16> 0 \"register_operand\" \"=v\")\n \t(float_truncate:<sf_cvt_bf16>\n@@ -29362,3 +29378,81 @@\n   \"TARGET_AVXVNNIINT8\"\n   \"vpdp<vpdotprodtype>\\t{%3, %2, %0|%0, %2, %3}\"\n    [(set_attr \"prefix\" \"vex\")])\n+\n+(define_insn \"vbcstnebf162ps_<mode>\"\n+  [(set (match_operand:VF1_128_256 0 \"register_operand\" \"=x\")\n+\t(vec_duplicate:VF1_128_256\n+\t  (float_extend:SF\n+\t    (match_operand:BF 1 \"memory_operand\" \"m\"))))]\n+  \"TARGET_AVXNECONVERT\"\n+  \"vbcstnebf162ps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"vbcstnesh2ps_<mode>\"\n+  [(set (match_operand:VF1_128_256 0 \"register_operand\" \"=x\")\n+\t(vec_duplicate:VF1_128_256\n+\t  (float_extend:SF\n+\t    (match_operand:HF 1 \"memory_operand\" \"m\"))))]\n+  \"TARGET_AVXNECONVERT\"\n+  \"vbcstnesh2ps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_mode_iterator V16BFH_256 [V16HF V16BF])\n+\n+(define_mode_attr bf16_ph\n+  [(V8HF \"ph\") (V16HF \"ph\")\n+   (V8BF \"bf16\") (V16BF \"bf16\")])\n+\n+(define_insn \"vcvtnee<bf16_ph>2ps_<mode>\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+\t(float_extend:V4SF\n+\t  (vec_select:<ssehalfvecmode>\n+\t    (match_operand:V8BFH_128 1 \"memory_operand\" \"m\")\n+\t    (parallel [(const_int 0) (const_int 2)\n+\t\t       (const_int 4) (const_int 6)]))))]\n+  \"TARGET_AVXNECONVERT\"\n+  \"vcvtnee<bf16_ph>2ps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"vcvtnee<bf16_ph>2ps_<mode>\"\n+  [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n+\t(float_extend:V8SF\n+\t  (vec_select:<ssehalfvecmode>\n+\t    (match_operand:V16BFH_256 1 \"memory_operand\" \"m\")\n+\t    (parallel [(const_int 0) (const_int 2)\n+\t\t       (const_int 4) (const_int 6)\n+\t\t       (const_int 8) (const_int 10)\n+\t\t       (const_int 12) (const_int 14)]))))]\n+  \"TARGET_AVXNECONVERT\"\n+  \"vcvtnee<bf16_ph>2ps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"vcvtneo<bf16_ph>2ps_<mode>\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+\t(float_extend:V4SF\n+\t  (vec_select:<ssehalfvecmode>\n+\t    (match_operand:V8BFH_128 1 \"memory_operand\" \"m\")\n+\t    (parallel [(const_int 1) (const_int 3)\n+\t\t       (const_int 5) (const_int 7)]))))]\n+  \"TARGET_AVXNECONVERT\"\n+  \"vcvtneo<bf16_ph>2ps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"vcvtneo<bf16_ph>2ps_<mode>\"\n+  [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n+\t(float_extend:V8SF\n+\t  (vec_select:<ssehalfvecmode>\n+\t    (match_operand:V16BFH_256 1 \"memory_operand\" \"m\")\n+\t    (parallel [(const_int 1) (const_int 3)\n+\t\t       (const_int 5) (const_int 7)\n+\t\t       (const_int 9) (const_int 11)\n+\t\t       (const_int 13) (const_int 15)]))))]\n+  \"TARGET_AVXNECONVERT\"\n+  \"vcvtneo<bf16_ph>2ps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])"}, {"sha": "53478b7c4d7131f0b43114fb62cb31f5469f7e49", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -7070,6 +7070,11 @@ Enable/disable the generation of the AVXIFMA instructions.\n @cindex @code{target(\"avxvnniint8\")} function attribute, x86\n Enable/disable the generation of the AVXVNNIINT8 instructions.\n \n+@item avxneconvert\n+@itemx no-avxneconvert\n+@cindex @code{target(\"avxneconvert\")} function attribute, x86\n+Enable/disable the generation of the AVXNECONVERT instructions.\n+\n @item cld\n @itemx no-cld\n @cindex @code{target(\"cld\")} function attribute, x86"}, {"sha": "c6323a53ad279e9e0e7547fcfc95c674846eefdf", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -1437,7 +1437,7 @@ See RS/6000 and PowerPC Options.\n -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid @gol\n -mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk@gol\n -mamx-tile  -mamx-int8  -mamx-bf16 -muintr -mhreset -mavxvnni@gol\n--mavx512fp16 -mavxifma -mavxvnniint8 @gol\n+-mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert @gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mkl -mwidekl @gol\n@@ -32967,6 +32967,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mavxvnniint8\n @opindex mavxvnniint8\n+@need 200\n+@itemx -mavxneconvert\n+@opindex mavxneconvert\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4, SSE4A, SSE4.1, SSE4.2, AVX, AVX2, AVX512F, AVX512PF,\n AVX512ER, AVX512CD, AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, SHA,\n@@ -32977,8 +32980,8 @@ XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16,\n ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE,\n UINTR, HRESET, AMXTILE, AMXINT8, AMXBF16, KL, WIDEKL, AVXVNNI, AVX512FP16,\n-AVXIFMA, AVXVNNIINT8 or CLDEMOTE extended instruction sets. Each has a\n-corresponding @option{-mno-} option to disable use of these instructions.\n+AVXIFMA, AVXVNNIINT8, AVXNECONVERT or CLDEMOTE extended instruction sets. Each\n+has a corresponding @option{-mno-} option to disable use of these instructions.\n \n These extensions are also available as built-in functions: see\n @ref{x86 Built-in Functions}, for details of the functions enabled and"}, {"sha": "a12175b649848c7dd7802ae960f1360cd9261b88", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -2493,6 +2493,9 @@ Target supports the execution of @code{avx512vp2intersect} instructions.\n @item avxifma\n Target supports the execution of @code{avxifma} instructions.\n \n+@item avxneconvert\n+Target supports the execution of @code{avxneconvert} instructions.\n+\n @item avxvnniint8\n Target supports the execution of @code{avxvnniint8} instructions.\n "}, {"sha": "dd3e71f25edbec9a8a21e1d0bc81ff0eb57639a1", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "cd7045cc4e4350cab397c2d8850c4f80ef6d178c", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "666eff507800e57c65fd846ee2e521e338097898", "filename": "gcc/testsuite/gcc.target/i386/avx-check.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-check.h?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -28,6 +28,9 @@ main ()\n #endif\n #ifdef AVXVNNIINT8\n       && __builtin_cpu_supports (\"avxvnniint8\")\n+#endif\n+#ifdef AVXNECONVERT\n+      && __builtin_cpu_supports (\"avxneconvert\")\n #endif\n       )\n     {"}, {"sha": "27188a65fa95d664d77ea6b59afbcf5ec5e36d0c", "filename": "gcc/testsuite/gcc.target/i386/avx-ne-convert-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-1.c?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavxneconvert -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbcstnebf162ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbcstnebf162ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbcstnesh2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbcstnesh2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneebf162ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneebf162ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneeph2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneeph2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneobf162ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneobf162ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneoph2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneoph2ps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vcvtneps2bf16x\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vcvtneps2bf16y\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+#include <immintrin.h>\n+\n+volatile __m128 x1;\n+volatile __m256 x2;\n+volatile __m128bh res1, res2;\n+const void *a;\n+__m128bh *b;\n+__m256bh *c;\n+__m128h *d;\n+__m256h *e;\n+\n+void extern\n+avx_ne_convert_test (void)\n+{\n+  x1 = _mm_bcstnebf16_ps (a);\n+  x2 = _mm256_bcstnebf16_ps (a);\n+  x1 = _mm_bcstnesh_ps (a);\n+  x2 = _mm256_bcstnesh_ps (a);\n+  x1 = _mm_cvtneebf16_ps (b);\n+  x2 = _mm256_cvtneebf16_ps (c);\n+  x1 = _mm_cvtneeph_ps (d);\n+  x2 = _mm256_cvtneeph_ps (e);\n+  x1 = _mm_cvtneobf16_ps (b);\n+  x2 = _mm256_cvtneobf16_ps (c);\n+  x1 = _mm_cvtneoph_ps (d);\n+  x2 = _mm256_cvtneoph_ps (e);\n+  res1 = _mm_cvtneps_avx_pbh (x1);\n+  res2 = _mm256_cvtneps_avx_pbh (x2);\n+}"}, {"sha": "2707c58f7cded37b5e7649464fb7b595dee84a9f", "filename": "gcc/testsuite/gcc.target/i386/avx-ne-convert-vbcstnebf162ps-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vbcstnebf162ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vbcstnebf162ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vbcstnebf162ps-2.c?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavxneconvert -O2\" } */\n+/* { dg-require-effective-target avxneconvert } */\n+#define AVXNECONVERT\n+#include <stdint.h>\n+\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+typedef union\n+{\n+  uint32_t int32;\n+  float flt;\n+} float_int_t;\n+\n+static uint16_t convert_fp32_to_bf16 (float fp)\n+{\n+  float_int_t fi;\n+  fi.flt = fp;\n+  return ((fi.int32 >> 16) & 0xffff);\n+}\n+\n+void TEST (void)\n+{\n+  union128 dst_128;\n+  union256 dst_256;\n+  float res_ref_128[4], res_ref_256[8], fp32;\n+  uint16_t var;\n+  fp32 = (float) 3 * 2 + 5.5;\n+  for (int i = 0; i < 4; i++)\n+  {\n+    res_ref_128[i] = fp32;\n+    dst_128.a[i] = 117;\n+  }\n+  for (int i = 0; i < 8; i++)\n+  {\n+    res_ref_256[i] = fp32;\n+    dst_256.a[i] = 117;\n+  }\n+  var = convert_fp32_to_bf16 (fp32);\n+  dst_128.x = _mm_bcstnebf16_ps (&var);\n+  dst_256.x = _mm256_bcstnebf16_ps (&var);\n+  if (check_union128 (dst_128, res_ref_128))\n+    abort();\n+  if (check_union256 (dst_256, res_ref_256))\n+    abort();\n+}"}, {"sha": "0e6f38334b80a0595b37245880423d0257eded00", "filename": "gcc/testsuite/gcc.target/i386/avx-ne-convert-vbcstnesh2ps-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vbcstnesh2ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vbcstnesh2ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vbcstnesh2ps-2.c?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavxneconvert -mf16c -O2\" } */\n+/* { dg-require-effective-target avxneconvert } */\n+#define AVXNECONVERT\n+#include <stdint.h>\n+#include <immintrin.h>\n+\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+void TEST (void)\n+{\n+  union128 dst_128;\n+  union256 dst_256;\n+  float res_ref_128[4], res_ref_256[8], fp32;\n+  uint16_t var;\n+  fp32 = (float) 3 * 2 + 8.5;\n+  for (int i = 0; i < 4; i++)\n+  {\n+    res_ref_128[i] = fp32;\n+    dst_128.a[i] = 117;\n+  }\n+  for (int i = 0; i < 8; i++)\n+  {\n+    res_ref_256[i] = fp32;\n+    dst_256.a[i] = 117;\n+  }\n+  var = _cvtss_sh (fp32, 0);\n+  dst_128.x = _mm_bcstnesh_ps (&var);\n+  dst_256.x = _mm256_bcstnesh_ps (&var);\n+  if (check_union128 (dst_128, res_ref_128))\n+    abort();\n+  if (check_union256 (dst_256, res_ref_256))\n+    abort();\n+}"}, {"sha": "bd026167b7016fbc3d1d656a1cc45c212b835f20", "filename": "gcc/testsuite/gcc.target/i386/avx-ne-convert-vcvtneebf162ps-2.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vcvtneebf162ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vcvtneebf162ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vcvtneebf162ps-2.c?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavxneconvert -O2\" } */\n+/* { dg-require-effective-target avxneconvert } */\n+#define AVXNECONVERT\n+#include <stdint.h>\n+\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+typedef union\n+{\n+  uint32_t int32;\n+  float flt;\n+} float_int_t;\n+\n+typedef union\n+{\n+  __m128bh x;\n+  uint32_t a[4];\n+} union128bf16_i;\n+\n+typedef union\n+{\n+  __m256bh x;\n+  uint32_t a[8];\n+} union256bf16_i;\n+\n+static uint16_t convert_fp32_to_bf16 (float fp)\n+{\n+  float_int_t fi;\n+  fi.flt = fp;\n+  return ((fi.int32 >> 16) & 0xffff);\n+}\n+\n+void TEST (void)\n+{\n+  union128 dst_128;\n+  union256 dst_256;\n+  float res_ref_128[4], res_ref_256[8], fp32;\n+  uint16_t bf16;\n+  union128bf16_i src_128bh;\n+  union256bf16_i src_256bh;\n+\n+  for (int i = 0; i < 4; i++)\n+  {\n+    fp32 = (float) 3 * i + 5 + i * 0.5;\n+    bf16 = convert_fp32_to_bf16 (fp32);\n+    src_128bh.a[i] = bf16; // store bf16 at the lower part of the dword\n+    res_ref_128[i] = fp32;\n+    dst_128.a[i] = 117;\n+  }\n+  for (int i = 0; i < 8; i++)\n+  {\n+    fp32 = (float) 3 * i + 5 + i * 0.5;\n+    bf16 = convert_fp32_to_bf16 (fp32);\n+    src_256bh.a[i] = bf16; // store bf16 at the lower part of the dword\n+    res_ref_256[i] = fp32;\n+    dst_256.a[i] = 117;\n+  }\n+  dst_128.x = _mm_cvtneebf16_ps (&src_128bh.x);\n+  dst_256.x = _mm256_cvtneebf16_ps (&src_256bh.x);\n+  if (check_union128 (dst_128, res_ref_128))\n+    abort();\n+  if (check_union256 (dst_256, res_ref_256))\n+    abort();\n+}"}, {"sha": "a862894746d76f88d69d7b6dc94f425a175eb29f", "filename": "gcc/testsuite/gcc.target/i386/avx-ne-convert-vcvtneeph2ps-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vcvtneeph2ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vcvtneeph2ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vcvtneeph2ps-2.c?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavxneconvert -mf16c -O2\" } */\n+/* { dg-require-effective-target avxneconvert } */\n+#define AVXNECONVERT\n+#include <stdint.h>\n+\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+typedef union\n+{\n+  uint32_t int32;\n+  float flt;\n+} float_int_t;\n+\n+typedef union\n+{\n+  __m128h x;\n+  uint32_t a[4];\n+} union128h;\n+\n+typedef union\n+{\n+  __m256h x;\n+  uint32_t a[8];\n+} union256h;\n+\n+void TEST (void)\n+{\n+  union128 dst_128;\n+  union256 dst_256;\n+  float res_ref_128[4], res_ref_256[8], fp32;\n+  uint16_t fp16;\n+  union128h src_128h;\n+  union256h src_256h;\n+\n+  for (int i = 0; i < 4; i++)\n+  {\n+    fp32 = (float) 3 * i + 5 + i * 0.5;\n+    fp16 = _cvtss_sh (fp32, 0);\n+    src_128h.a[i] = fp16;\n+    res_ref_128[i] = fp32;\n+    dst_128.a[i] = 117;\n+  }\n+  for (int i = 0; i < 8; i++)\n+  {\n+    fp32 = (float) 3 * i + 5 + i * 0.5;\n+    fp16 = _cvtss_sh (fp32, 0);\n+    src_256h.a[i] = fp16;\n+    res_ref_256[i] = fp32;\n+    dst_256.a[i] = 117;\n+  }\n+  dst_128.x = _mm_cvtneeph_ps (&src_128h.x);\n+  dst_256.x = _mm256_cvtneeph_ps (&src_256h.x);\n+  if (check_union128 (dst_128, res_ref_128))\n+    abort();\n+  if (check_union256 (dst_256, res_ref_256))\n+    abort();\n+}"}, {"sha": "a6f722e14ef4471318fb829d67e55f651c67dfd0", "filename": "gcc/testsuite/gcc.target/i386/avx-ne-convert-vcvtneobf162ps-2.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vcvtneobf162ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vcvtneobf162ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vcvtneobf162ps-2.c?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavxneconvert -O2\" } */\n+/* { dg-require-effective-target avxneconvert } */\n+#define AVXNECONVERT\n+#include <stdint.h>\n+\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+typedef union\n+{\n+  uint32_t int32;\n+  float flt;\n+} float_int_t;\n+\n+typedef union\n+{\n+  __m128bh x;\n+  uint32_t a[4];\n+} union128bf16_i;\n+\n+typedef union\n+{\n+  __m256bh x;\n+  uint32_t a[8];\n+} union256bf16_i;\n+\n+static uint16_t convert_fp32_to_bf16 (float fp)\n+{\n+  float_int_t fi;\n+  fi.flt = fp;\n+  return ((fi.int32 >> 16) & 0xffff);\n+}\n+\n+void TEST (void)\n+{\n+  union128 dst_128;\n+  union256 dst_256;\n+  float res_ref_128[4], res_ref_256[8], fp32;\n+  uint16_t bf16;\n+  union128bf16_i src_128bh;\n+  union256bf16_i src_256bh;\n+\n+  for (int i = 0; i < 4; i++)\n+  {\n+    fp32 = (float) 3 * i + 5 + i * 0.5;\n+    bf16 = convert_fp32_to_bf16 (fp32);\n+    // store bf16 at the upper part of the dword\n+    src_128bh.a[i] = (bf16 << 16) & 0xffff0000;\n+    res_ref_128[i] = fp32;\n+    dst_128.a[i] = 117;\n+  }\n+  for (int i = 0; i < 8; i++)\n+  {\n+    fp32 = (float) 3 * i + 5 + i * 0.5;\n+    bf16 = convert_fp32_to_bf16 (fp32);\n+    // store bf16 at the upper part of the dword\n+    src_256bh.a[i] = (bf16 << 16) & 0xffff0000;\n+    res_ref_256[i] = fp32;\n+    dst_256.a[i] = 117;\n+  }\n+  dst_128.x = _mm_cvtneobf16_ps (&src_128bh.x);\n+  dst_256.x = _mm256_cvtneobf16_ps (&src_256bh.x);\n+  if (check_union128 (dst_128, res_ref_128))\n+    abort();\n+  if (check_union256 (dst_256, res_ref_256))\n+    abort();\n+}"}, {"sha": "95eb5d7476587b375e34c141354b9e8cc2cc4596", "filename": "gcc/testsuite/gcc.target/i386/avx-ne-convert-vcvtneoph2ps-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vcvtneoph2ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vcvtneoph2ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vcvtneoph2ps-2.c?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavxneconvert -mf16c -O2\" } */\n+/* { dg-require-effective-target avxneconvert } */\n+#define AVXNECONVERT\n+#include <stdint.h>\n+\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+typedef union\n+{\n+  uint32_t int32;\n+  float flt;\n+} float_int_t;\n+\n+typedef union\n+{\n+  __m128h x;\n+  uint32_t a[4];\n+} union128h;\n+\n+typedef union\n+{\n+  __m256h x;\n+  uint32_t a[8];\n+} union256h;\n+\n+void TEST (void)\n+{\n+  union128 dst_128;\n+  union256 dst_256;\n+  float res_ref_128[4], res_ref_256[8], fp32;\n+  uint16_t fp16;\n+  union128h src_128h;\n+  union256h src_256h;\n+\n+  for (int i = 0; i < 4; i++)\n+  {\n+    fp32 = (float) 3 * i + 5 + i * 0.5;\n+    fp16 = _cvtss_sh (fp32, 0);\n+    src_128h.a[i] = fp16 << 16;\n+    res_ref_128[i] = fp32;\n+    dst_128.a[i] = 117;\n+  }\n+  for (int i = 0; i < 8; i++)\n+  {\n+    fp32 = (float) 3 * i + 5 + i * 0.5;\n+    fp16 = _cvtss_sh (fp32, 0);\n+    src_256h.a[i] = fp16 << 16;\n+    res_ref_256[i] = fp32;\n+    dst_256.a[i] = 117;\n+  }\n+  dst_128.x = _mm_cvtneoph_ps (&src_128h.x);\n+  dst_256.x = _mm256_cvtneoph_ps (&src_256h.x);\n+  if (check_union128 (dst_128, res_ref_128))\n+    abort();\n+  if (check_union256 (dst_256, res_ref_256))\n+    abort();\n+}"}, {"sha": "e67312338acb39cfd3a596fffdc1610f5d727d12", "filename": "gcc/testsuite/gcc.target/i386/avx-ne-convert-vcvtneps2bf16-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vcvtneps2bf16-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vcvtneps2bf16-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ne-convert-vcvtneps2bf16-2.c?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavxneconvert -O2\" } */\n+/* { dg-require-effective-target avxneconvert } */\n+#define AVXNECONVERT\n+#include <stdint.h>\n+\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+typedef union\n+{\n+  uint32_t int32;\n+  float flt;\n+} float_int_t;\n+\n+typedef union\n+{\n+  __m128bh  x;\n+  unsigned short a[8];\n+} union128bf16;\n+\n+void TEST (void)\n+{\n+  union128 src_128;\n+  union256 src_256;\n+  union128bf16 dst_128, dst_256;\n+  uint16_t res_ref_128[8] = {0}, res_ref_256[8];\n+  float_int_t fp32;\n+  for (int i = 0; i < 4; i++)\n+  {\n+    fp32.flt = (float) 2 * i + 7 + i * 0.25;\n+    src_128.a[i] = fp32.flt;\n+    res_ref_128[i] = fp32.int32 >> 16;\n+    dst_128.a[i] = 117;\n+  }\n+\n+  for (int i = 0; i < 8; i++)\n+  {\n+    fp32.flt = (float) 2 * i + 7 + i * 0.25;\n+    src_256.a[i] = fp32.flt;\n+    res_ref_256[i] = fp32.int32 >> 16;\n+    dst_256.a[i] = 117;\n+  }\n+  dst_128.x = _mm_cvtneps_avx_pbh (src_128.x);\n+  dst_256.x = _mm256_cvtneps_avx_pbh (src_256.x);\n+\n+  if (checkVus (dst_128.a, res_ref_128, 8))\n+    abort();\n+  if (checkVus (dst_128.a, res_ref_128, 8))\n+    abort();\n+}"}, {"sha": "d3a9bdf8c347ca8769b04073fcca1bdf41b4c692", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16vl-vcvtneps2bf16-1a.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtneps2bf16-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtneps2bf16-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtneps2bf16-1a.c?ref=58685b939bb1738d23750fad29035f8055fd4315", "previous_filename": "gcc/testsuite/gcc.target/i386/avx512bf16vl-vcvtneps2bf16-1.c"}, {"sha": "e0687fa41a14beaeca5d5bae17d58ee5efa987ff", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16vl-vcvtneps2bf16-1b.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtneps2bf16-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtneps2bf16-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtneps2bf16-1b.c?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bf16 -mavx512vl -mavxneconvert -O2\" } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vcvtneps2bf16y\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16y\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16y\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\{vex\\} vcvtneps2bf16x\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16x\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16x\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128bh res1, res2;\n+volatile __m128 x1;\n+volatile __m256 x2;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512bf16_test (void)\n+{\n+  res2 = _mm256_cvtneps_pbh (x2);\n+  res2 = _mm256_mask_cvtneps_pbh (res2, m8, x2);\n+  res2 = _mm256_maskz_cvtneps_pbh (m8, x2);\n+\n+  res1 = _mm_cvtneps_pbh (x1);\n+  res1 = _mm_mask_cvtneps_pbh (res1, m8, x1);\n+  res1 = _mm_maskz_cvtneps_pbh (m8, x1);\n+}"}, {"sha": "5655c5b191945e394114430fbf8a50bc7affddec", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -82,6 +82,7 @@ extern void test_avxvnni (void)\t\t\t__attribute__((__target__(\"avxvnni\")));\n extern void test_avx512fp16 (void)\t\t__attribute__((__target__(\"avx512fp16\")));\n extern void test_avxifma (void)\t\t\t__attribute__((__target__(\"avxifma\")));\n extern void test_avxvnniint8 (void)\t\t__attribute__((__target__(\"avxvnniint8\")));\n+extern void test_avxneconvert (void)\t\t__attribute__((__target__(\"avxneconvert\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -165,6 +166,7 @@ extern void test_no_avxvnni (void)\t\t__attribute__((__target__(\"no-avxvnni\")));\n extern void test_no_avx512fp16 (void)\t\t__attribute__((__target__(\"no-avx512fp16\")));\n extern void test_no_avxifma (void)\t\t__attribute__((__target__(\"no-avxifma\")));\n extern void test_no_avxvnniint8 (void)\t\t__attribute__((__target__(\"no-avxvnniint8\")));\n+extern void test_no_avxneconvert (void)\t\t__attribute__((__target__(\"no-avxneconvert\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "3eabc49a6abd8ff8fe5083a4df1b764e695d28e5", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavxifma -mavxvnniint8\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavxifma -mavxvnniint8 -mavxneconvert\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "b9cdfb690d1c2e148900157f03229cdadcccd70e", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "b6ee3806dcc53db77734e546623fac6b15329a49", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "71ac0f3da1986d43b8c0854d0e1aa0d48540639a", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -103,7 +103,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -220,7 +220,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "898dde80c8ff6e1b5fd27e6a2b826be6011ca2b4", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -843,6 +843,6 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert\")\n \n #include <x86intrin.h>"}, {"sha": "750897d085480d791010c593b81e6910df246169", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58685b939bb1738d23750fad29035f8055fd4315/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=58685b939bb1738d23750fad29035f8055fd4315", "patch": "@@ -9549,6 +9549,18 @@ proc check_effective_target_avxvnniint8 { } {\n     } \"-O0 -mavxvnniint8\" ]\n }\n \n+# Return 1 if avxneconvert instructions can be compiled.\n+proc check_effective_target_avxneconvert { } {\n+    return [check_no_compiler_messages avxneconvert object {\n+\ttypedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n+\t__m128\n+\t_mm_bcstnebf16_ps (const void *__P)\n+\t{\n+\t   return (__m128) __builtin_ia32_vbcstnebf162ps128 ((const __bf16 *) __P);\n+\t}\n+    } \"-O0 -mavxneconvert\" ]\n+}\n+\n # Return 1 if sse instructions can be compiled.\n proc check_effective_target_sse { } {\n     return [check_no_compiler_messages sse object {"}]}