{"sha": "028fc6e76056429c0f6e3c28d45a558ed2c961d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI4ZmM2ZTc2MDU2NDI5YzBmNmUzYzI4ZDQ1YTU1OGVkMmM5NjFkNA==", "commit": {"author": {"name": "Michael Hayes", "email": "mhayes@cygnus.com", "date": "2000-08-25T10:01:51Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2000-08-25T10:01:51Z"}, "message": "loop.c (count_loop_regs_set): Replace start and end arguments with loop argument.\n\n\t* loop.c (count_loop_regs_set): Replace start and end arguments\n\twith loop argument.  All callers udated.\n\nFrom-SVN: r35978", "tree": {"sha": "4f4dfdf3f0f6b19032a451e5e421bead8ee06b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f4dfdf3f0f6b19032a451e5e421bead8ee06b9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/028fc6e76056429c0f6e3c28d45a558ed2c961d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/028fc6e76056429c0f6e3c28d45a558ed2c961d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/028fc6e76056429c0f6e3c28d45a558ed2c961d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/028fc6e76056429c0f6e3c28d45a558ed2c961d4/comments", "author": null, "committer": null, "parents": [{"sha": "371502a8d2b4940db74ba498ae3949d340acc887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/371502a8d2b4940db74ba498ae3949d340acc887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/371502a8d2b4940db74ba498ae3949d340acc887"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "ac38c703bb90e167c078327bcb4535e1c948e1da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/028fc6e76056429c0f6e3c28d45a558ed2c961d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/028fc6e76056429c0f6e3c28d45a558ed2c961d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=028fc6e76056429c0f6e3c28d45a558ed2c961d4", "patch": "@@ -1,3 +1,8 @@\n+2000-08-26  Michael Hayes  <mhayes@cygnus.com>\n+\n+\t* loop.c (count_loop_regs_set): Replace start and end arguments\n+\twith loop argument.  All callers udated.\n+\t\n 2000-08-26  Michael Hayes  <mhayes@cygnus.com>\n \t\n \t* loop.c (constant_high_bytes): Delete."}, {"sha": "a24a72bc5b9fe3804505699331a50837efe38d00", "filename": "gcc/loop.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/028fc6e76056429c0f6e3c28d45a558ed2c961d4/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/028fc6e76056429c0f6e3c28d45a558ed2c961d4/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=028fc6e76056429c0f6e3c28d45a558ed2c961d4", "patch": "@@ -240,7 +240,8 @@ static int consec_sets_invariant_p PARAMS ((const struct loop *,\n static int labels_in_range_p PARAMS ((rtx, int));\n static void count_one_set PARAMS ((rtx, rtx, varray_type, rtx *));\n \n-static void count_loop_regs_set PARAMS ((rtx, rtx, varray_type, varray_type,\n+static void count_loop_regs_set PARAMS ((const struct loop*,\n+\t\t\t\t\t varray_type, varray_type,\n \t\t\t\t\t int *, int));\n static void note_addr_stored PARAMS ((rtx, rtx, void *));\n static void note_set_pseudo_multiple_uses PARAMS ((rtx, rtx, void *));\n@@ -706,8 +707,8 @@ scan_loop (loop, flags)\n   VARRAY_CHAR_INIT (may_not_optimize, nregs, \"may_not_optimize\");\n   VARRAY_RTX_INIT (reg_single_usage, nregs, \"reg_single_usage\");\n \n-  count_loop_regs_set (loop->top ? loop->top : loop->start, loop->end,\n-\t\t       may_not_optimize, reg_single_usage, &insn_count, nregs);\n+  count_loop_regs_set (loop, may_not_optimize, reg_single_usage, \n+\t\t       &insn_count, nregs);\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     {\n@@ -3479,8 +3480,8 @@ count_one_set (insn, x, may_not_move, last_set)\n    In that case, it is the insn that last set reg n.  */\n \n static void\n-count_loop_regs_set (from, to, may_not_move, single_usage, count_ptr, nregs)\n-     register rtx from, to;\n+count_loop_regs_set (loop, may_not_move, single_usage, count_ptr, nregs)\n+     const struct loop *loop;\n      varray_type may_not_move;\n      varray_type single_usage;\n      int *count_ptr;\n@@ -3490,7 +3491,8 @@ count_loop_regs_set (from, to, may_not_move, single_usage, count_ptr, nregs)\n   register rtx insn;\n   register int count = 0;\n \n-  for (insn = from; insn != to; insn = NEXT_INSN (insn))\n+  for (insn = loop->top ? loop->top : loop->start; insn != loop->end;\n+       insn = NEXT_INSN (insn))\n     {\n       if (INSN_P (insn))\n \t{\n@@ -9311,8 +9313,7 @@ load_mems_and_recount_loop_regs_set (loop, insn_count)\n       bzero ((char *) &may_not_optimize->data, nregs * sizeof (char));\n       bzero ((char *) &reg_single_usage->data, nregs * sizeof (rtx));\n \n-      count_loop_regs_set (loop->top ? loop->top : loop->start, loop->end,\n-\t\t\t   may_not_optimize, reg_single_usage,\n+      count_loop_regs_set (loop, may_not_optimize, reg_single_usage,\n \t\t\t   insn_count, nregs);\n \n       for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)"}]}