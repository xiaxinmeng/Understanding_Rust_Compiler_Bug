{"sha": "3f26f054872c375e7f9a80ede7a56036d9b57597", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YyNmYwNTQ4NzJjMzc1ZTdmOWE4MGVkZTdhNTYwMzZkOWI1NzU5Nw==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2018-02-08T12:32:51Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2018-02-08T12:32:51Z"}, "message": "[AArch64] Use more LDP/STP in shrinkwrapping\n\nThe shrinkwrap optimization added in GCC 7 allows each callee-save to\nbe delayed and done only across blocks which need a particular callee-save.\nAlthough this reduces unnecessary memory traffic on code paths that need\nfew callee-saves, it typically uses LDR/STR rather than LDP/STP.  This\nmeans more memory accesses and increased codesize, ~1.0% on average.\n\nTo improve this, if a particular callee-save must be saved/restored, also\nadd the adjacent callee-save to allow use of LDP/STP.  This significantly\nreduces codesize (for example gcc_r, povray_r, parest_r, xalancbmk_r are\n1% smaller).  This is a simple fix which can be backported.  A more advanced\napproach would scan blocks for pairs of callee-saves, but that requires a\nfull rewrite of all the callee-save code which is too late at this stage.\n\nAn example epilog in a shrinkwrapped function before:\n\nldp    x21, x22, [sp,#16]\nldr    x23, [sp,#32]\nldr    x24, [sp,#40]\nldp    x25, x26, [sp,#48]\nldr    x27, [sp,#64]\nldr    x28, [sp,#72]\nldr    x30, [sp,#80]\nldr    d8, [sp,#88]\nldp    x19, x20, [sp],#96\nret\n\nAnd after this patch:\n\nldr    d8, [sp,#88]\nldp    x21, x22, [sp,#16]\nldp    x23, x24, [sp,#32]\nldp    x25, x26, [sp,#48]\nldp    x27, x28, [sp,#64]\nldr    x30, [sp,#80]\nldp    x19, x20, [sp],#96\nret\n\n    gcc/\n\t* config/aarch64/aarch64.c (aarch64_components_for_bb):\n\tIncrease LDP/STP opportunities by adding adjacent callee-saves.\n\nFrom-SVN: r257482", "tree": {"sha": "ddeddc6ae38f34532a1bc37c7d1e137dc788ad01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddeddc6ae38f34532a1bc37c7d1e137dc788ad01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f26f054872c375e7f9a80ede7a56036d9b57597", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f26f054872c375e7f9a80ede7a56036d9b57597", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f26f054872c375e7f9a80ede7a56036d9b57597", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f26f054872c375e7f9a80ede7a56036d9b57597/comments", "author": null, "committer": null, "parents": [{"sha": "18fbe394d62371bedaa41ed32c89c659109ae8f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18fbe394d62371bedaa41ed32c89c659109ae8f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18fbe394d62371bedaa41ed32c89c659109ae8f5"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "ef2f46ef0d75c50777203dafa75efa05cef8add9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f26f054872c375e7f9a80ede7a56036d9b57597/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f26f054872c375e7f9a80ede7a56036d9b57597/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f26f054872c375e7f9a80ede7a56036d9b57597", "patch": "@@ -1,3 +1,8 @@\n+2018-02-08  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_components_for_bb):\n+\tIncrease LDP/STP opportunities by adding adjacent callee-saves.\n+\n 2018-02-08  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tPR rtl-optimization/84068"}, {"sha": "228fd1b908d4826f830727c69aa3d4f064598853", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f26f054872c375e7f9a80ede7a56036d9b57597/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f26f054872c375e7f9a80ede7a56036d9b57597/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=3f26f054872c375e7f9a80ede7a56036d9b57597", "patch": "@@ -4552,7 +4552,22 @@ aarch64_components_for_bb (basic_block bb)\n        && (bitmap_bit_p (in, regno)\n \t   || bitmap_bit_p (gen, regno)\n \t   || bitmap_bit_p (kill, regno)))\n-\t  bitmap_set_bit (components, regno);\n+      {\n+\tunsigned regno2, offset, offset2;\n+\tbitmap_set_bit (components, regno);\n+\n+\t/* If there is a callee-save at an adjacent offset, add it too\n+\t   to increase the use of LDP/STP.  */\n+\toffset = cfun->machine->frame.reg_offset[regno];\n+\tregno2 = ((offset & 8) == 0) ? regno + 1 : regno - 1;\n+\n+\tif (regno2 <= LAST_SAVED_REGNUM)\n+\t  {\n+\t    offset2 = cfun->machine->frame.reg_offset[regno2];\n+\t    if ((offset & ~8) == (offset2 & ~8))\n+\t      bitmap_set_bit (components, regno2);\n+\t  }\n+      }\n \n   return components;\n }"}]}