{"sha": "3cee1a378eb019e80042bab12de44c21978091d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NlZTFhMzc4ZWIwMTllODAwNDJiYWIxMmRlNDRjMjE5NzgwOTFkOA==", "commit": {"author": {"name": "John Wroclawski", "email": "jtw@gnu.org", "date": "1992-05-06T21:27:24Z"}, "committer": {"name": "John Wroclawski", "email": "jtw@gnu.org", "date": "1992-05-06T21:27:24Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r918", "tree": {"sha": "ae7c97412f349ef0ee4019a64372226d51b97969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae7c97412f349ef0ee4019a64372226d51b97969"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cee1a378eb019e80042bab12de44c21978091d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cee1a378eb019e80042bab12de44c21978091d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cee1a378eb019e80042bab12de44c21978091d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cee1a378eb019e80042bab12de44c21978091d8/comments", "author": null, "committer": null, "parents": [{"sha": "177048466ae899abbbbd3b000445634390b88ee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177048466ae899abbbbd3b000445634390b88ee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/177048466ae899abbbbd3b000445634390b88ee6"}], "stats": {"total": 61, "additions": 7, "deletions": 54}, "files": [{"sha": "a8ffb559805e48ff41dd5e681dda6e13b8643d86", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 7, "deletions": 54, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cee1a378eb019e80042bab12de44c21978091d8/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cee1a378eb019e80042bab12de44c21978091d8/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=3cee1a378eb019e80042bab12de44c21978091d8", "patch": "@@ -1717,59 +1717,13 @@ STATIC void\t  free_scope\t\t__proto((scope_t *));\n STATIC void\t  free_tag\t\t__proto((tag_t *));\n STATIC void\t  free_thead\t\t__proto((thead_t *));\n \n-/* rms: The following is a very bad idea.\n-   It's easy for these to conflict with definitions on certain systems.\n-   All system calls and library functions\n-   for which an implicit definition will work\n-   should be left implicit.\n-   I deleted the declarations for open and fstat.  */\n-/* Prototypes for library functions used.  */\n-#if !defined(NO_LIB_PROTOTYPE) && !defined(_OSF_SOURCE) && !defined(_STDIO_H_)\n-extern char  *strchr\t\t__proto((const char *, int));\n-extern char  *strrchr\t\t__proto((const char *, int));\n-extern int    strcmp\t\t__proto((const char *, const char *));\n-extern long   strtol\t\t__proto((const char *, char **, int));\n-extern int    memcmp\t\t__proto((CPTR_T, CPTR_T, Size_t));\n-extern time_t time\t\t__proto((time_t *));\n-extern int    fputc\t\t__proto((int, FILE *));\n-extern int    vprintf\t\t__proto((const char *, va_list));\n-extern int    vfprintf\t\t__proto((FILE *, const char *, va_list));\n-extern int    vsprintf\t\t__proto((char *, const char *, va_list));\n-extern int    fclose\t\t__proto((FILE *));\n-extern int    fseek\t\t__proto((FILE *, long, int));\n-extern long   ftell\t\t__proto((FILE *));\n-extern FILE  *fopen\t\t__proto((const char *, const char *));\n-extern FILE  *freopen\t\t__proto((const char *, const char *, FILE *));\n-extern int    fflush\t\t__proto((FILE *));\n-extern void   perror\t\t__proto((const char *));\n-extern void   exit\t\t__proto((int));\n-extern int    rename\t\t__proto((const char *, const char *));\n-\n-#ifndef sgi\n-extern int    setvbuf\t\t__proto((FILE *, char *, int, int));\n-extern int    fputs\t\t__proto((char *, FILE *));\n-#endif\n-#endif\n-\n-extern char  *sbrk\t\t__proto((int));\n-\n-#ifndef HAS_STDLIB_H\n-extern PTR_T  malloc\t\t__proto((Size_t));\n-extern PTR_T  calloc\t\t__proto((Size_t, Size_t));\n-extern PTR_T  realloc\t\t__proto((PTR_T, Size_t));\n-extern void   free\t\t__proto((PTR_T));\n-extern int    getopt\t\t__proto((int, char **, const char *));\n-#endif\n-\n-#ifndef HAS_UNISTD_H\n-extern int    close\t\t__proto((int));\n-extern int    write\t\t__proto((int, CPTR_T, Size_t));\n-extern int    read\t\t__proto((int, PTR_T, Size_t));\n-extern long   lseek\t\t__proto((int, long, int));\n-extern int    ftruncate\t\t__proto((int, long));\n-#endif\n-\n-extern char  *mktemp\t\t__proto((char *));\n+extern char  *sbrk\t\t\t__proto((int));\n+extern PTR_T  malloc\t\t\t__proto((Size_t));\n+extern PTR_T  calloc\t\t\t__proto((Size_t, Size_t));\n+extern PTR_T  realloc\t\t\t__proto((PTR_T, Size_t));\n+extern void   free\t\t\t__proto((PTR_T));\n+extern char  *mktemp\t\t\t__proto((char *));\n+extern long   strtol\t\t\t__proto((const char *, char **, int));\n \n extern char *optarg;\n extern int   optind;\n@@ -2512,7 +2466,6 @@ add_procedure (func_start, func_end_p1)\n     {\n       register PDR *old_proc_ptr = shash_ptr->proc_ptr;\n       register SYMR *sym_ptr = shash_ptr->sym_ptr;\n-      register FDR *orig_fdr = file_ptr->orig_fdr;\n \n       if (old_proc_ptr != (PDR *)0\n \t  && sym_ptr != (SYMR *)0"}]}