{"sha": "8eedc3ebe72acf248e30b328368a3ca2d11b0466", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVlZGMzZWJlNzJhY2YyNDhlMzBiMzI4MzY4YTNjYTJkMTFiMDQ2Ng==", "commit": {"author": {"name": "David Holsgrove", "email": "david.holsgrove@xilinx.com", "date": "2013-06-26T23:55:52Z"}, "committer": {"name": "Michael Eager", "email": "eager@gcc.gnu.org", "date": "2013-06-26T23:55:52Z"}, "message": "Add sync_compare_and_swapsi and sync_test_and_setsi.\n\n2013-06-16  David Holsgrove <david.holsgrove@xilinx.com>\n\n\tAdd sync_compare_and_swapsi and sync_test_and_setsi.\n\n\t* gcc/config/microblaze/sync.md: New file.\n\t* gcc/config/microblaze/microblaze.md: Add UNSPEC_SYNC_CAS,\n\tUNSPEC_SYNC_XCHG and include sync.md.\n\t* gcc/config/microblaze/microblaze.c: Add print_operand 'y'.\n\t* gcc/config/microblaze/constraints.md: Add memory_contraint\n\t'Q' which is a single register.\n\nFrom-SVN: r200443", "tree": {"sha": "688170d21085526bea13feec1e99508d973652d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/688170d21085526bea13feec1e99508d973652d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8eedc3ebe72acf248e30b328368a3ca2d11b0466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eedc3ebe72acf248e30b328368a3ca2d11b0466", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eedc3ebe72acf248e30b328368a3ca2d11b0466", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eedc3ebe72acf248e30b328368a3ca2d11b0466/comments", "author": {"login": "davidholsgrove", "id": 4031547, "node_id": "MDQ6VXNlcjQwMzE1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4031547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidholsgrove", "html_url": "https://github.com/davidholsgrove", "followers_url": "https://api.github.com/users/davidholsgrove/followers", "following_url": "https://api.github.com/users/davidholsgrove/following{/other_user}", "gists_url": "https://api.github.com/users/davidholsgrove/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidholsgrove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidholsgrove/subscriptions", "organizations_url": "https://api.github.com/users/davidholsgrove/orgs", "repos_url": "https://api.github.com/users/davidholsgrove/repos", "events_url": "https://api.github.com/users/davidholsgrove/events{/privacy}", "received_events_url": "https://api.github.com/users/davidholsgrove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "33e84ed46b1dd6330abdfe8bcec9444a1f5d2397", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e84ed46b1dd6330abdfe8bcec9444a1f5d2397", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33e84ed46b1dd6330abdfe8bcec9444a1f5d2397"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "de980128eb6b4e691b444aa00a5ecafbe9053687", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eedc3ebe72acf248e30b328368a3ca2d11b0466/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eedc3ebe72acf248e30b328368a3ca2d11b0466/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8eedc3ebe72acf248e30b328368a3ca2d11b0466", "patch": "@@ -1,3 +1,12 @@\n+2013-06-16  David Holsgrove <david.holsgrove@xilinx.com>\n+\n+\t* gcc/config/microblaze/sync.md: New file.\n+\t* gcc/config/microblaze/microblaze.md: Add UNSPEC_SYNC_CAS,\n+\tUNSPEC_SYNC_XCHG and include sync.md.\n+\t* gcc/config/microblaze/microblaze.c: Add print_operand 'y'.\n+\t* gcc/config/microblaze/constraints.md: Add memory_contraint\n+\t'Q' which is a single register.\n+\n 2013-06-26  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* config/i386/gnu.h [TARGET_LIBC_PROVIDES_SSP]"}, {"sha": "c9c164962cd6d761f089f76b812013c9fdec8186", "filename": "gcc/config/microblaze/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eedc3ebe72acf248e30b328368a3ca2d11b0466/gcc%2Fconfig%2Fmicroblaze%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eedc3ebe72acf248e30b328368a3ca2d11b0466/gcc%2Fconfig%2Fmicroblaze%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fconstraints.md?ref=8eedc3ebe72acf248e30b328368a3ca2d11b0466", "patch": "@@ -70,3 +70,8 @@\n   \"Double word operand.\"\n   (and (match_code \"mem\")\n        (match_test \"double_memory_operand (op, GET_MODE (op))\")))\n+\n+(define_memory_constraint \"Q\"\n+  \"Memory operand which is a single register.\"\n+  (and (match_code \"mem\")\n+       (match_test \"GET_CODE ( XEXP (op, 0)) == REG\")))"}, {"sha": "ea2b033becb1e293c6779be05225adf48f901e19", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eedc3ebe72acf248e30b328368a3ca2d11b0466/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eedc3ebe72acf248e30b328368a3ca2d11b0466/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=8eedc3ebe72acf248e30b328368a3ca2d11b0466", "patch": "@@ -2118,6 +2118,7 @@ microblaze_initial_elimination_offset (int from, int to)\n    't'  print 't' for EQ, 'f' for NE\n    'm'  Print 1<<operand.\n    'i'  Print 'i' if MEM operand has immediate value\n+   'y'  Print 'y' if MEM operand is single register\n    'o'\tPrint operand address+4\n    '?'\tPrint 'd' if we use a branch with delay slot instead of normal branch.\n    'h'  Print high word of const_double (int or float) value as hex\n@@ -2288,6 +2289,15 @@ print_operand (FILE * file, rtx op, int letter)\n \trtx op4 = adjust_address (op, GET_MODE (op), 4);\n \toutput_address (XEXP (op4, 0));\n       }\n+    else if (letter == 'y')\n+      {\n+        rtx mem_reg = XEXP (op, 0);\n+        if (GET_CODE (mem_reg) == REG)\n+        {\n+            register int regnum = REGNO (mem_reg);\n+            fprintf (file, \"%s\", reg_names[regnum]);\n+        }\n+      }\n     else\n       output_address (XEXP (op, 0));\n "}, {"sha": "6e7b72d22670ceabb820e4b2aa7e8c4fd4225f92", "filename": "gcc/config/microblaze/microblaze.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eedc3ebe72acf248e30b328368a3ca2d11b0466/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eedc3ebe72acf248e30b328368a3ca2d11b0466/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md?ref=8eedc3ebe72acf248e30b328368a3ca2d11b0466", "patch": "@@ -41,6 +41,8 @@\n   (UNSPEC_CMP\t\t104)    ;; signed compare\n   (UNSPEC_CMPU\t\t105)    ;; unsigned compare\n   (UNSPEC_TLS           106)    ;; jump table\n+  (UNSPEC_SYNC_CAS      107)    ;; Represent atomic compare swap.\n+  (UNSPEC_SYNC_XCHG     108)    ;; Represent atomic exchange.\n ])\n \n \n@@ -2221,3 +2223,5 @@\n   [(set_attr \"type\"     \"arith\")\n   (set_attr \"mode\"      \"SI\")\n   (set_attr \"length\"    \"4\")])\n+\n+(include \"sync.md\")"}, {"sha": "3be95b4d0afa63a451441906b8036b9feb9a728a", "filename": "gcc/config/microblaze/sync.md", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eedc3ebe72acf248e30b328368a3ca2d11b0466/gcc%2Fconfig%2Fmicroblaze%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eedc3ebe72acf248e30b328368a3ca2d11b0466/gcc%2Fconfig%2Fmicroblaze%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fsync.md?ref=8eedc3ebe72acf248e30b328368a3ca2d11b0466", "patch": "@@ -0,0 +1,65 @@\n+;; Machine description for Xilinx MicroBlaze synchronization instructions.\n+;; Copyright (C) 2011-2013\n+;; Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+\n+(define_insn \"sync_compare_and_swapsi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")          \t;; retval\n+        (match_operand:SI 1 \"nonimmediate_operand\" \"+Q\"))      \t;; mem\n+    (set (match_dup 1)\n+\t(unspec\n+\t    [(match_operand:SI 2 \"register_operand\" \"d\")\t;; oldval\n+\t     (match_operand:SI 3 \"register_operand\" \"d\")]\t;; newval\n+\t\t\t     UNSPEC_SYNC_CAS))\n+   (clobber (match_scratch:SI 4 \"=&d\"))]\t\t\t;; scratch\n+  \"\"\n+  {\n+    output_asm_insn (\"addc \\tr0,r0,r0\", operands);\n+    output_asm_insn (\"lwx  \\t%0,%y1,r0\", operands);\n+    output_asm_insn (\"addic\\t%4,r0,0\", operands);\n+    output_asm_insn (\"bnei \\t%4,.-8\", operands);\n+    output_asm_insn (\"cmp  \\t%4,%0,%2\", operands);\n+    output_asm_insn (\"bnei \\t%4,.+16\", operands);\n+    output_asm_insn (\"swx  \\t%3,%y1,r0\", operands);\n+    output_asm_insn (\"addic\\t%4,r0,0\", operands);\n+    output_asm_insn (\"bnei \\t%4,.-28\", operands);\n+    return \"\";\n+  }\n+)\n+\n+(define_insn \"sync_test_and_setsi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")        \t;; retval\n+\t(match_operand:SI 1 \"nonimmediate_operand\" \"+Q\"))\t;; mem\n+   (set (match_dup 1)\n+\t(unspec\n+\t  [(match_operand:SI 2 \"register_operand\" \"d\")]\t\t;; value\n+\t  UNSPEC_SYNC_XCHG))\n+   (clobber (match_scratch:SI 3 \"=&d\"))]\t\t\t;; scratch\n+  \"\"\n+  {\n+    output_asm_insn (\"addc \\tr0,r0,r0\", operands);\n+    output_asm_insn (\"lwx  \\t%0,%y1,r0\", operands);\n+    output_asm_insn (\"addic\\t%3,r0,0\", operands);\n+    output_asm_insn (\"bnei \\t%3,.-8\", operands);\n+    output_asm_insn (\"swx  \\t%2,%y1,r0\", operands);\n+    output_asm_insn (\"addic\\t%3,r0,0\", operands);\n+    output_asm_insn (\"bnei \\t%3,.-20\", operands);\n+    return \"\";\n+  }\n+)"}]}