{"sha": "ef50b972e10238a1ac20f23ce3bb32187ae4cb84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY1MGI5NzJlMTAyMzhhMWFjMjBmMjNjZTNiYjMyMTg3YWU0Y2I4NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-18T09:44:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-18T09:44:52Z"}, "message": "re PR target/92462 ([arm32] -ftree-pre makes a variable to be wrongly hoisted out)\n\n2019-11-18  Richard Biener  <rguenther@suse.de>\n\n\tPR rtl-optimization/92462\n\t* alias.c (find_base_term): Restrict the look through ANDs.\n\t(find_base_value): Likewise.\n\nFrom-SVN: r278391", "tree": {"sha": "46e52f480e72e1e9fab0cf6bba96afa267f25dfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46e52f480e72e1e9fab0cf6bba96afa267f25dfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef50b972e10238a1ac20f23ce3bb32187ae4cb84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef50b972e10238a1ac20f23ce3bb32187ae4cb84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef50b972e10238a1ac20f23ce3bb32187ae4cb84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef50b972e10238a1ac20f23ce3bb32187ae4cb84/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "762ff5b304c70c05ec0b98ef3bc458f6e31de514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762ff5b304c70c05ec0b98ef3bc458f6e31de514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/762ff5b304c70c05ec0b98ef3bc458f6e31de514"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "f5d4d770fe1017b6b3124da5d9b6961d0e675295", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef50b972e10238a1ac20f23ce3bb32187ae4cb84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef50b972e10238a1ac20f23ce3bb32187ae4cb84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef50b972e10238a1ac20f23ce3bb32187ae4cb84", "patch": "@@ -1,3 +1,9 @@\n+2019-11-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/92462\n+\t* alias.c (find_base_term): Restrict the look through ANDs.\n+\t(find_base_value): Likewise.\n+\n 2019-11-18  Georg-Johann Lay  <avr@gjlay.de>\n \n \tAdd support for AVR devices from the 0-series."}, {"sha": "800b71902d5584f4ff5e3121c0bef8e4448354ea", "filename": "gcc/alias.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef50b972e10238a1ac20f23ce3bb32187ae4cb84/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef50b972e10238a1ac20f23ce3bb32187ae4cb84/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=ef50b972e10238a1ac20f23ce3bb32187ae4cb84", "patch": "@@ -1464,9 +1464,11 @@ find_base_value (rtx src)\n       return find_base_value (XEXP (src, 1));\n \n     case AND:\n-      /* If the second operand is constant set the base\n-\t address to the first operand.  */\n-      if (CONST_INT_P (XEXP (src, 1)) && INTVAL (XEXP (src, 1)) != 0)\n+      /* Look through aligning ANDs.  And AND with zero or one with\n+         the LSB set isn't one (see for example PR92462).  */\n+      if (CONST_INT_P (XEXP (src, 1))\n+\t  && INTVAL (XEXP (src, 1)) != 0\n+\t  && (INTVAL (XEXP (src, 1)) & 1) == 0)\n \treturn find_base_value (XEXP (src, 0));\n       return 0;\n \n@@ -2024,7 +2026,11 @@ find_base_term (rtx x, vec<std::pair<cselib_val *,\n       }\n \n     case AND:\n-      if (CONST_INT_P (XEXP (x, 1)) && INTVAL (XEXP (x, 1)) != 0)\n+      /* Look through aligning ANDs.  And AND with zero or one with\n+         the LSB set isn't one (see for example PR92462).  */\n+      if (CONST_INT_P (XEXP (x, 1))\n+\t  && INTVAL (XEXP (x, 1)) != 0\n+\t  && (INTVAL (XEXP (x, 1)) & 1) == 0)\n \treturn find_base_term (XEXP (x, 0), visited_vals);\n       return 0;\n "}]}