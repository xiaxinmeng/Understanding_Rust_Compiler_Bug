{"sha": "b9840366b6e4f2bba8f3c67a4ee805d9f4f3c1c5", "node_id": "C_kwDOANBUbNoAKGI5ODQwMzY2YjZlNGYyYmJhOGYzYzY3YTRlZTgwNWQ5ZjRmM2MxYzU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-08T16:07:42Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-08T16:23:27Z"}, "message": "Unify generic substitutions on unit-structs\n\nWhen we have generic unit-structs there are no fields to unify the generic.\nThis adds a case to ensure we iterate and check these. We might end up\nmaking it always do this for all structs always.\n\nAddresses #1447", "tree": {"sha": "73013bb20f735e00f271da63e57a908e7f1148be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73013bb20f735e00f271da63e57a908e7f1148be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9840366b6e4f2bba8f3c67a4ee805d9f4f3c1c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9840366b6e4f2bba8f3c67a4ee805d9f4f3c1c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9840366b6e4f2bba8f3c67a4ee805d9f4f3c1c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9840366b6e4f2bba8f3c67a4ee805d9f4f3c1c5/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0a14f483979aea48f7588656b4269e1b9dbee34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a14f483979aea48f7588656b4269e1b9dbee34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0a14f483979aea48f7588656b4269e1b9dbee34"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "ed1636593c53059e71fc5da4d16522e407a3319c", "filename": "gcc/rust/typecheck/rust-tyty-coercion.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9840366b6e4f2bba8f3c67a4ee805d9f4f3c1c5/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9840366b6e4f2bba8f3c67a4ee805d9f4f3c1c5/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h?ref=b9840366b6e4f2bba8f3c67a4ee805d9f4f3c1c5", "patch": "@@ -1130,6 +1130,28 @@ class ADTCoercionRules : public BaseCoercionRules\n \t  }\n       }\n \n+    // generic args for the unit-struct case\n+    if (type.is_unit () && base->is_unit ())\n+      {\n+\trust_assert (type.get_num_substitutions ()\n+\t\t     == base->get_num_substitutions ());\n+\n+\tfor (size_t i = 0; i < type.get_num_substitutions (); i++)\n+\t  {\n+\t    auto &a = base->get_substs ().at (i);\n+\t    auto &b = type.get_substs ().at (i);\n+\n+\t    auto pa = a.get_param_ty ();\n+\t    auto pb = b.get_param_ty ();\n+\n+\t    auto res = pa->unify (pb);\n+\t    if (res->get_kind () == TyTy::TypeKind::ERROR)\n+\t      {\n+\t\treturn;\n+\t      }\n+\t  }\n+      }\n+\n     resolved = type.clone ();\n   }\n "}, {"sha": "77d912a592108272091fb39a13ce1833351821e5", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9840366b6e4f2bba8f3c67a4ee805d9f4f3c1c5/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9840366b6e4f2bba8f3c67a4ee805d9f4f3c1c5/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=b9840366b6e4f2bba8f3c67a4ee805d9f4f3c1c5", "patch": "@@ -1128,6 +1128,28 @@ class ADTRules : public BaseRules\n \t  }\n       }\n \n+    // generic args for the unit-struct case\n+    if (type.is_unit () && base->is_unit ())\n+      {\n+\trust_assert (type.get_num_substitutions ()\n+\t\t     == base->get_num_substitutions ());\n+\n+\tfor (size_t i = 0; i < type.get_num_substitutions (); i++)\n+\t  {\n+\t    auto &a = base->get_substs ().at (i);\n+\t    auto &b = type.get_substs ().at (i);\n+\n+\t    auto pa = a.get_param_ty ();\n+\t    auto pb = b.get_param_ty ();\n+\n+\t    auto res = pa->unify (pb);\n+\t    if (res->get_kind () == TyTy::TypeKind::ERROR)\n+\t      {\n+\t\treturn;\n+\t      }\n+\t  }\n+      }\n+\n     resolved = type.clone ();\n   }\n "}]}