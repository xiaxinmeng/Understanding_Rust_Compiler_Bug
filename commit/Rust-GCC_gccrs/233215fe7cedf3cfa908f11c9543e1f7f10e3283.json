{"sha": "233215fe7cedf3cfa908f11c9543e1f7f10e3283", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMzMjE1ZmU3Y2VkZjNjZmE5MDhmMTFjOTU0M2UxZjdmMTBlMzI4Mw==", "commit": {"author": {"name": "Dave Korn", "email": "dave.korn.cygwin@gmail.com", "date": "2009-05-28T10:48:35Z"}, "committer": {"name": "Dave Korn", "email": "davek@gcc.gnu.org", "date": "2009-05-28T10:48:35Z"}, "message": "re PR target/37216 ([cygming] Invalid alignment for SSE store to .comm data generated with -O3)\n\ngcc/ChangeLog:\n\n2009-05-28  Dave Korn  <dave.korn.cygwin@gmail.com>\n\n\tPR target/37216\n\n\t* configure.ac (HAVE_GAS_ALIGNED_COMM):  Add autoconf test and\n\tmacro definition for support of three-operand format aligned\n\t.comm directive in assembler on cygwin/pe/mingw target OS.\n\t* configure:  Regenerate.\n\t* config.in:  Regenerate.\n\n\t* config/i386/winnt.c (i386_pe_asm_output_aligned_decl_common):  Use\n\taligned form of .comm directive if -mpe-aligned-commons is in effect.\n\t* config/i386/cygming.opt (-mpe-aligned-commons):  Add new option.\n\n\t* doc/invoke.texi (-mpe-aligned-commons):  Document new target option.\n\t* doc/tm.texi (ASM_OUTPUT_COMMON):  Document zero size commons.\n\ngcc/testsuite/ChangeLog:\n\n2009-05-28  Dave Korn  <dave.korn.cygwin@gmail.com>\n            Uros Bizjak  <ubizjak@gmail.com>\n            Danny Smith  <dansmister@gmail.com>\n\n\tPR target/37216\n\n\t* lib/target-supports.exp (check_effective_target_pe_aligned_commons):\n\tNew function.\n\t* gcc.target/i386/pr37216.c:  New test source file.\n\t* gcc.dg/compat/struct-layout-1_generate.c (dg_options[]):  No longer\n\tuse -fno-common for testing Cygwin and MinGW targets.\n\n\n\nCo-Authored-By: Danny Smith <dansmister@gmail.com>\nCo-Authored-By: Uros Bizjak <ubizjak@gmail.com>\n\nFrom-SVN: r147950", "tree": {"sha": "2b465942c117a52260a5dba92c2e0be1abe405aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b465942c117a52260a5dba92c2e0be1abe405aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/233215fe7cedf3cfa908f11c9543e1f7f10e3283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/233215fe7cedf3cfa908f11c9543e1f7f10e3283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/233215fe7cedf3cfa908f11c9543e1f7f10e3283", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/233215fe7cedf3cfa908f11c9543e1f7f10e3283/comments", "author": {"login": "davek-cygwin", "id": 530057, "node_id": "MDQ6VXNlcjUzMDA1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/530057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davek-cygwin", "html_url": "https://github.com/davek-cygwin", "followers_url": "https://api.github.com/users/davek-cygwin/followers", "following_url": "https://api.github.com/users/davek-cygwin/following{/other_user}", "gists_url": "https://api.github.com/users/davek-cygwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/davek-cygwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davek-cygwin/subscriptions", "organizations_url": "https://api.github.com/users/davek-cygwin/orgs", "repos_url": "https://api.github.com/users/davek-cygwin/repos", "events_url": "https://api.github.com/users/davek-cygwin/events{/privacy}", "received_events_url": "https://api.github.com/users/davek-cygwin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b10ca522327a88f62bdbf6b0ee587498d2bab8a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10ca522327a88f62bdbf6b0ee587498d2bab8a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b10ca522327a88f62bdbf6b0ee587498d2bab8a1"}], "stats": {"total": 153, "additions": 146, "deletions": 7}, "files": [{"sha": "cbbeee49a33080c6d9e915abb60f728407ba40d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=233215fe7cedf3cfa908f11c9543e1f7f10e3283", "patch": "@@ -1,3 +1,20 @@\n+2009-05-28  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\tPR target/37216\n+\n+\t* configure.ac (HAVE_GAS_ALIGNED_COMM):  Add autoconf test and\n+\tmacro definition for support of three-operand format aligned\n+\t.comm directive in assembler on cygwin/pe/mingw target OS.\n+\t* configure:  Regenerate.\n+\t* config.h:  Regenerate.\n+\n+\t* config/i386/winnt.c (i386_pe_asm_output_aligned_decl_common):  Use\n+\taligned form of .comm directive if -mpe-aligned-commons is in effect.\n+\t* config/i386/cygming.opt (-mpe-aligned-commons):  Add new option.\n+\n+\t* doc/invoke.texi (-mpe-aligned-commons):  Document new target option.\n+\t* doc/tm.texi (ASM_OUTPUT_COMMON):  Document zero size commons.\n+\n 2009-05-28  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/40254"}, {"sha": "9f53173e7c9d83622d62735b46937a7d1e339746", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=233215fe7cedf3cfa908f11c9543e1f7f10e3283", "patch": "@@ -844,6 +844,13 @@\n #endif\n \n \n+/* Define if your assembler supports specifying the alignment of objects\n+   allocated using the GAS .comm command. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_GAS_ALIGNED_COMM\n+#endif\n+\n+\n /* Define if your assembler supports .balign and .p2align. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_GAS_BALIGN_AND_P2ALIGN"}, {"sha": "e845a0d58276abb22d35066ca3991022a9f0fa53", "filename": "gcc/config/i386/cygming.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Fconfig%2Fi386%2Fcygming.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Fconfig%2Fi386%2Fcygming.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.opt?ref=233215fe7cedf3cfa908f11c9543e1f7f10e3283", "patch": "@@ -45,3 +45,7 @@ Set Windows defines\n mwindows\n Target\n Create GUI application\n+\n+mpe-aligned-commons\n+Target Var(use_pe_aligned_common) Init(HAVE_GAS_ALIGNED_COMM)\n+Use the GNU extension to the PE format for aligned common data"}, {"sha": "812cf798f7671465c01229168cd47e3cf2f96039", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=233215fe7cedf3cfa908f11c9543e1f7f10e3283", "patch": "@@ -499,8 +499,11 @@ i386_pe_asm_output_aligned_decl_common (FILE *stream, tree decl,\n {\n   HOST_WIDE_INT rounded;\n \n-  /* Compute as in assemble_noswitch_variable, since we don't actually\n-     support aligned common.  */\n+  /* Compute as in assemble_noswitch_variable, since we don't have\n+     support for aligned common on older binutils.  We must also\n+     avoid emitting a common symbol of size zero, as this is the\n+     overloaded representation that indicates an undefined external\n+     symbol in the PE object file format.  */\n   rounded = size ? size : 1;\n   rounded += (BIGGEST_ALIGNMENT / BITS_PER_UNIT) - 1;\n   rounded = (rounded / (BIGGEST_ALIGNMENT / BITS_PER_UNIT)\n@@ -510,9 +513,13 @@ i386_pe_asm_output_aligned_decl_common (FILE *stream, tree decl,\n \n   fprintf (stream, \"\\t.comm\\t\");\n   assemble_name (stream, name);\n-  fprintf (stream, \", \" HOST_WIDE_INT_PRINT_DEC \"\\t\" ASM_COMMENT_START\n-\t   \" \" HOST_WIDE_INT_PRINT_DEC \"\\n\",\n-\t   rounded, size);\n+  if (use_pe_aligned_common)\n+    fprintf (stream, \", \" HOST_WIDE_INT_PRINT_DEC \", %d\\n\",\n+\t   size ? size : (HOST_WIDE_INT) 1,\n+\t   exact_log2 (align) - exact_log2 (CHAR_BIT));\n+  else\n+    fprintf (stream, \", \" HOST_WIDE_INT_PRINT_DEC \"\\t\" ASM_COMMENT_START\n+\t   \" \" HOST_WIDE_INT_PRINT_DEC \"\\n\", rounded, size);\n }\n \f\n /* The Microsoft linker requires that every function be marked as"}, {"sha": "8a4f2c91d786621f0c6c962a404b735aa9af9120", "filename": "gcc/configure", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=233215fe7cedf3cfa908f11c9543e1f7f10e3283", "patch": "@@ -22631,6 +22631,44 @@ fi\n   i[34567]86-*-* | x86_64-*-*)\n     case $target_os in\n       cygwin* | pe | mingw32*)\n+\t# Recent binutils allows the three-operand form of \".comm\" on PE.  This\n+\t# definition is used unconditionally to initialise the default state of\n+\t# the target option variable that governs usage of the feature.\n+\techo \"$as_me:$LINENO: checking assembler for .comm with alignment\" >&5\n+echo $ECHO_N \"checking assembler for .comm with alignment... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_comm_has_align+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_comm_has_align=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 19 \\) \\* 1000 + 52`\n+  then gcc_cv_as_comm_has_align=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    echo '.comm foo,1,32' > conftest.s\n+    if { ac_try='$gcc_cv_as  -o conftest.o conftest.s >&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }\n+    then\n+\tgcc_cv_as_comm_has_align=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_comm_has_align\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_comm_has_align\" >&6\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_GAS_ALIGNED_COMM `if test $gcc_cv_as_comm_has_align = yes; then echo 1; else echo 0; fi`\n+_ACEOF\n+\n \t# Used for DWARF 2 in PE\n \techo \"$as_me:$LINENO: checking assembler for .secrel32 relocs\" >&5\n echo $ECHO_N \"checking assembler for .secrel32 relocs... $ECHO_C\" >&6"}, {"sha": "b5a1f7e75321115c0d61d40c7ee2622748dfe688", "filename": "gcc/configure.ac", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=233215fe7cedf3cfa908f11c9543e1f7f10e3283", "patch": "@@ -2954,6 +2954,15 @@ changequote(,)dnl\n changequote([,])dnl\n     case $target_os in\n       cygwin* | pe | mingw32*)\n+\t# Recent binutils allows the three-operand form of \".comm\" on PE.  This\n+\t# definition is used unconditionally to initialise the default state of\n+\t# the target option variable that governs usage of the feature.\n+\tgcc_GAS_CHECK_FEATURE([.comm with alignment], gcc_cv_as_comm_has_align,\n+\t [2,19,52],,[.comm foo,1,32])\n+\tAC_DEFINE_UNQUOTED(HAVE_GAS_ALIGNED_COMM,\n+\t  [`if test $gcc_cv_as_comm_has_align = yes; then echo 1; else echo 0; fi`],\n+\t  [Define if your assembler supports specifying the alignment\n+\t   of objects allocated using the GAS .comm command.])\n \t# Used for DWARF 2 in PE\n \tgcc_GAS_CHECK_FEATURE([.secrel32 relocs],\n \t  gcc_cv_as_ix86_pe_secrel32,"}, {"sha": "6a79566b336c076f5878461bf13a290cda4c6e9d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=233215fe7cedf3cfa908f11c9543e1f7f10e3283", "patch": "@@ -15678,6 +15678,15 @@ This option is available for Cygwin and MinGW targets.  It\n specifies that a GUI application is to be generated by\n instructing the linker to set the PE header subsystem type\n appropriately.\n+\n+@item -mpe-aligned-commons\n+@opindex mpe-aligned-commons\n+This option is available for Cygwin and MinGW targets.  It\n+specifies that the GNU extension to the PE file format that \n+permits the correct alignment of COMMON variables should be\n+used when generating code.  It will be enabled by default if\n+GCC detects that the target assembler found during configuration\n+supports the feature.\n @end table\n \n See also under @ref{i386 and x86-64 Options} for standard options."}, {"sha": "bc15583bfb09900353e04d1852c71031a69181a4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=233215fe7cedf3cfa908f11c9543e1f7f10e3283", "patch": "@@ -7384,7 +7384,14 @@ outputting a single uninitialized variable.\n A C statement (sans semicolon) to output to the stdio stream\n @var{stream} the assembler definition of a common-label named\n @var{name} whose size is @var{size} bytes.  The variable @var{rounded}\n-is the size rounded up to whatever alignment the caller wants.\n+is the size rounded up to whatever alignment the caller wants.  It is\n+possible that @var{size} may be zero, for instance if a struct with no\n+other member than a zero-length array is defined.  In this case, the\n+backend must output a symbol definition that allocates at least one\n+byte, both so that the address of the resulting object does not compare\n+equal to any other, and because some object formats cannot even express\n+the concept of a zero-sized common symbol, as that is how they represent\n+an ordinary undefined external.\n \n Use the expression @code{assemble_name (@var{stream}, @var{name})} to\n output the name itself; before and after that, output the additional"}, {"sha": "3446982ab9981026690db81100043ab488e7614b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=233215fe7cedf3cfa908f11c9543e1f7f10e3283", "patch": "@@ -1,3 +1,15 @@\n+2009-05-28  Dave Korn  <dave.korn.cygwin@gmail.com>\n+            Uros Bizjak  <ubizjak@gmail.com>\n+            Danny Smith  <dansmister@gmail.com>\n+\n+\tPR target/37216\n+\n+\t* lib/target-supports.exp (check_effective_target_pe_aligned_commons):\n+\tNew function.\n+\t* gcc.target/i386/pr37216.c:  New test source file.\n+\t* gcc.dg/compat/struct-layout-1_generate.c (dg_options[]):  No longer\n+\tuse -fno-common for testing Cygwin and MinGW targets.\n+\n 2009-05-28  Kai Tietz  <kai.tietz@onevision.com>\n \n \t*  g++.dg/ext/packed6.C (size_t): Use __extension__ and"}, {"sha": "4f5315df2c22eab56baea2623982eb954ec563d6", "filename": "gcc/testsuite/gcc.dg/compat/struct-layout-1_generate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c?ref=233215fe7cedf3cfa908f11c9543e1f7f10e3283", "patch": "@@ -46,7 +46,7 @@ const char *dg_options[] = {\n \"/* { dg-options \\\"%s-I%s\\\" } */\\n\",\n \"/* { dg-options \\\"%s-I%s -Wno-abi\\\" } */\\n\",\n \"/* { dg-options \\\"%s-I%s -mno-mmx -Wno-abi\\\" { target i?86-*-* x86_64-*-* } } */\\n\",\n-\"/* { dg-options \\\"%s-I%s -fno-common\\\" { target hppa*-*-hpux* powerpc*-*-darwin* *-*-mingw32* *-*-cygwin* } } */\\n\",\n+\"/* { dg-options \\\"%s-I%s -fno-common\\\" { target hppa*-*-hpux* powerpc*-*-darwin* } } */\\n\",\n \"/* { dg-options \\\"%s-I%s -mno-mmx -fno-common -Wno-abi\\\" { target i?86-*-darwin* x86_64-*-darwin* } } */\\n\",\n \"/* { dg-options \\\"%s-I%s -mno-base-addresses\\\" { target mmix-*-* } } */\\n\",\n \"/* { dg-options \\\"%s-I%s -mlongcalls -mtext-section-literals\\\" { target xtensa*-*-* } } */\\n\""}, {"sha": "5c847a70cfb555b4471cd192e644ddfb8e94695b", "filename": "gcc/testsuite/gcc.target/i386/pr37216.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37216.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37216.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37216.c?ref=233215fe7cedf3cfa908f11c9543e1f7f10e3283", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -msse2\" } */\n+/* { dg-options \"-O3 -msse2 -mpe-aligned-commons\" { target pe_aligned_commons } } */\n+\n+#include \"sse2-check.h\"\n+\n+int iarr[64];\n+int iint = 0;\n+\n+void\n+sse2_test (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 64; i++)\n+    iarr[i] = -2;\n+}"}, {"sha": "e2d24c8c156c2f2bdc1afb1249b8a6e2a3e0d8d8", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233215fe7cedf3cfa908f11c9543e1f7f10e3283/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=233215fe7cedf3cfa908f11c9543e1f7f10e3283", "patch": "@@ -611,6 +611,18 @@ proc check_effective_target_pthread {} {\n     } \"-pthread\"]\n }\n \n+# Return 1 if compilation with -mpe-aligned-commons is error-free\n+# for trivial code, 0 otherwise.\n+\n+proc check_effective_target_pe_aligned_commons {} {\n+    if { [istarget *-*-cygwin*] || [istarget *-*-mingw*] } {\n+\treturn [check_no_compiler_messages pe_aligned_commons object {\n+\t    int foo;\n+\t} \"-mpe-aligned-commons\"]\n+    }\n+    return 0\n+}\n+\n # Return 1 if the target supports -fstack-protector\n proc check_effective_target_fstack_protector {} {\n     return [check_runtime fstack_protector {"}]}