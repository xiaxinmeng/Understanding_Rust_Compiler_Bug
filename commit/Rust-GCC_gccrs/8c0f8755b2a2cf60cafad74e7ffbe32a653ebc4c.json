{"sha": "8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMwZjg3NTViMmEyY2Y2MGNhZmFkNzRlN2ZmYmUzMmE2NTNlYmM0Yw==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2020-09-16T21:12:35Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2020-09-16T21:12:35Z"}, "message": "rs6000: Add rs6000_cfun_pcrel_p\n\nMost uses of rs6000_pcrel_p are called for the current function.\nA specialized version for cfun is more efficient for these uses.\n\n2020-09-16  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/predicates.md (current_file_function_operand):\n\tRemove argument from rs6000_pcrel_p call.\n\t* config/rs6000/rs6000-logue.c (rs6000_decl_ok_for_sibcall):\n\tLikewise.\n\t(rs6000_global_entry_point_prologue_needed_p): Likewise.\n\t(rs6000_output_function_prologue): Likewise.\n\t* config/rs6000/rs6000-protos.h (rs6000_function_pcrel_p): New\n\tprototype.\n\t(rs6000_pcrel_p): Remove argument.\n\t* config/rs6000/rs6000.c (rs6000_legitimize_tls_address): Remove\n\targument from rs6000_pcrel_p call.\n\t(rs6000_call_template_1): Likewise.\n\t(rs6000_indirect_call_template_1): Likewise.\n\t(rs6000_longcall_ref): Likewise.\n\t(rs6000_call_aix): Likewise.\n\t(rs6000_sibcall_aix): Likewise.\n\t(rs6000_function_pcrel_p): Rename from rs6000_pcrel_p.\n\t(rs6000_pcrel_p): Rewrite.\n\t* config/rs6000/rs6000.md (*pltseq_plt_pcrel<mode>): Remove\n\targument from rs6000_pcrel_p call.\n\t(*call_local<mode>): Likewise.\n\t(*call_value_local<mode>): Likewise.\n\t(*call_nonlocal_aix<mode>): Likewise.\n\t(*call_value_nonlocal_aix<mode>): Likewise.\n\t(*call_indirect_pcrel<mode>): Likewise.\n\t(*call_value_indirect_pcrel<mode>): Likewise.", "tree": {"sha": "4020f7116134939b8a39ac60f855787e29c388e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4020f7116134939b8a39ac60f855787e29c388e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c/comments", "author": null, "committer": null, "parents": [{"sha": "71ad0b5dde449ee1f6b755a99f5c52152e375835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71ad0b5dde449ee1f6b755a99f5c52152e375835", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71ad0b5dde449ee1f6b755a99f5c52152e375835"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "4c2fe7fa312982fc0d2118d5bd3675b56092c76a", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c", "patch": "@@ -1056,7 +1056,7 @@\n \t\t\t && SYMBOL_REF_DECL (op) != NULL\n \t\t\t && TREE_CODE (SYMBOL_REF_DECL (op)) == FUNCTION_DECL\n \t\t\t && (rs6000_fndecl_pcrel_p (SYMBOL_REF_DECL (op))\n-\t\t\t     != rs6000_pcrel_p (cfun)))\")))\n+\t\t\t     != rs6000_pcrel_p ()))\")))\n \n ;; Return 1 if this operand is a valid input for a move insn.\n (define_predicate \"input_operand\""}, {"sha": "0f88ec19929123cae833ce671dca6467126a1dcf", "filename": "gcc/config/rs6000/rs6000-logue.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c?ref=8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c", "patch": "@@ -1085,7 +1085,7 @@ rs6000_decl_ok_for_sibcall (tree decl)\n \t r2 for its caller's TOC.  Such a function may make sibcalls to any\n \t function, whether local or external, without restriction based on\n \t TOC-save/restore rules.  */\n-      if (rs6000_pcrel_p (cfun))\n+      if (rs6000_pcrel_p ())\n \treturn true;\n \n       /* Otherwise, under the AIX or ELFv2 ABIs we can't allow sibcalls\n@@ -2562,7 +2562,7 @@ rs6000_global_entry_point_prologue_needed_p (void)\n     return false;\n \n   /* PC-relative functions never generate a global entry point prologue.  */\n-  if (rs6000_pcrel_p (cfun))\n+  if (rs6000_pcrel_p ())\n     return false;\n \n   /* Ensure we have a global entry point for thunks.   ??? We could\n@@ -3978,7 +3978,7 @@ rs6000_output_function_prologue (FILE *file)\n       fputs (\"\\n\", file);\n     }\n \n-  else if (rs6000_pcrel_p (cfun))\n+  else if (rs6000_pcrel_p ())\n     {\n       const char *name = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n       /* All functions compiled to use PC-relative addressing will"}, {"sha": "25fa5dd57cd2a771dfdb5b50c638e03567099b3c", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c", "patch": "@@ -152,7 +152,8 @@ extern rtx rs6000_machopic_legitimize_pic_address (rtx, machine_mode,\n extern rtx rs6000_allocate_stack_temp (machine_mode, bool, bool);\n extern align_flags rs6000_loop_align (rtx);\n extern void rs6000_split_logical (rtx [], enum rtx_code, bool, bool, bool);\n-extern bool rs6000_pcrel_p (struct function *);\n+extern bool rs6000_function_pcrel_p (struct function *);\n+extern bool rs6000_pcrel_p (void);\n extern bool rs6000_fndecl_pcrel_p (const_tree);\n \n /* Different PowerPC instruction formats that are used by GCC.  There are"}, {"sha": "640fc405dd4fd0b559f3ded919348570c34628db", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c", "patch": "@@ -8780,7 +8780,7 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \n   dest = gen_reg_rtx (Pmode);\n   if (model == TLS_MODEL_LOCAL_EXEC\n-      && (rs6000_tls_size == 16 || rs6000_pcrel_p (cfun)))\n+      && (rs6000_tls_size == 16 || rs6000_pcrel_p ()))\n     {\n       rtx tlsreg;\n \n@@ -8827,7 +8827,7 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t them in the .got section.  So use a pointer to the .got section,\n \t not one to secondary TOC sections used by 64-bit -mminimal-toc,\n \t or to secondary GOT sections used by 32-bit -fPIC.  */\n-      if (rs6000_pcrel_p (cfun))\n+      if (rs6000_pcrel_p ())\n \tgot = const0_rtx;\n       else if (TARGET_64BIT)\n \tgot = gen_rtx_REG (Pmode, 2);\n@@ -8892,7 +8892,7 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t  rtx uns = gen_rtx_UNSPEC (Pmode, vec, UNSPEC_TLS_GET_ADDR);\n \t  set_unique_reg_note (get_last_insn (), REG_EQUAL, uns);\n \n-\t  if (rs6000_tls_size == 16 || rs6000_pcrel_p (cfun))\n+\t  if (rs6000_tls_size == 16 || rs6000_pcrel_p ())\n \t    {\n \t      if (TARGET_64BIT)\n \t\tinsn = gen_tls_dtprel_64 (dest, tmp1, addr);\n@@ -8933,7 +8933,7 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t  else\n \t    insn = gen_tls_got_tprel_32 (tmp2, got, addr);\n \t  emit_insn (insn);\n-\t  if (rs6000_pcrel_p (cfun))\n+\t  if (rs6000_pcrel_p ())\n \t    {\n \t      if (TARGET_64BIT)\n \t\tinsn = gen_tls_tls_pcrel_64 (dest, tmp2, addr);\n@@ -13740,7 +13740,7 @@ rs6000_call_template_1 (rtx *operands, unsigned int funop, bool sibcall)\n \t    ? \"+32768\" : \"\"));\n \n   static char str[32];  /* 1 spare */\n-  if (rs6000_pcrel_p (cfun))\n+  if (rs6000_pcrel_p ())\n     sprintf (str, \"b%s %s@notoc%s\", sibcall ? \"\" : \"l\", z, arg);\n   else if (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\n     sprintf (str, \"b%s %s%s%s\", sibcall ? \"\" : \"l\", z, arg,\n@@ -13880,7 +13880,7 @@ rs6000_indirect_call_template_1 (rtx *operands, unsigned int funop,\n \t\t     rel64);\n \t}\n \n-      const char *notoc = rs6000_pcrel_p (cfun) ? \"_NOTOC\" : \"\";\n+      const char *notoc = rs6000_pcrel_p () ? \"_NOTOC\" : \"\";\n       const char *addend = (DEFAULT_ABI == ABI_V4 && TARGET_SECURE_PLT\n \t\t\t    && flag_pic == 2 ? \"+32768\" : \"\");\n       if (!speculate)\n@@ -13897,7 +13897,7 @@ rs6000_indirect_call_template_1 (rtx *operands, unsigned int funop,\n   else if (!speculate)\n     s += sprintf (s, \"crset 2\\n\\t\");\n \n-  if (rs6000_pcrel_p (cfun))\n+  if (rs6000_pcrel_p ())\n     {\n       if (speculate)\n \tsprintf (s, \"b%%T%ul\", funop);\n@@ -19668,7 +19668,7 @@ rs6000_longcall_ref (rtx call_ref, rtx arg)\n     {\n       rtx base = const0_rtx;\n       int regno = 12;\n-      if (rs6000_pcrel_p (cfun))\n+      if (rs6000_pcrel_p ())\n \t{\n \t  rtx reg = gen_rtx_REG (Pmode, regno);\n \t  rtx u = gen_rtx_UNSPEC_VOLATILE (Pmode,\n@@ -24729,7 +24729,7 @@ rs6000_call_aix (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n   if (!SYMBOL_REF_P (func)\n       || (DEFAULT_ABI == ABI_AIX && !SYMBOL_REF_FUNCTION_P (func)))\n     {\n-      if (!rs6000_pcrel_p (cfun))\n+      if (!rs6000_pcrel_p ())\n \t{\n \t  /* Save the TOC into its reserved slot before the call,\n \t     and prepare to restore it after the call.  */\n@@ -24835,7 +24835,7 @@ rs6000_call_aix (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n   else\n     {\n       /* No TOC register needed for calls from PC-relative callers.  */\n-      if (!rs6000_pcrel_p (cfun))\n+      if (!rs6000_pcrel_p ())\n \t/* Direct calls use the TOC: for local calls, the callee will\n \t   assume the TOC register is set; for non-local calls, the\n \t   PLT stub needs the TOC register.  */\n@@ -24902,7 +24902,7 @@ rs6000_sibcall_aix (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n   insn = emit_call_insn (insn);\n \n   /* Note use of the TOC register.  */\n-  if (!rs6000_pcrel_p (cfun))\n+  if (!rs6000_pcrel_p ())\n     use_reg (&CALL_INSN_FUNCTION_USAGE (insn),\n \t     gen_rtx_REG (Pmode, TOC_REGNUM));\n \n@@ -25189,7 +25189,7 @@ rs6000_fndecl_pcrel_p (const_tree fndecl)\n \n /* Return whether we should generate PC-relative code for *FN.  */\n bool\n-rs6000_pcrel_p (struct function *fn)\n+rs6000_function_pcrel_p (struct function *fn)\n {\n   if (DEFAULT_ABI != ABI_ELFv2)\n     return false;\n@@ -25202,6 +25202,16 @@ rs6000_pcrel_p (struct function *fn)\n   return rs6000_fndecl_pcrel_p (fn->decl);\n }\n \n+/* Return whether we should generate PC-relative code for the current\n+   function.  */\n+bool\n+rs6000_pcrel_p ()\n+{\n+  return (DEFAULT_ABI == ABI_ELFv2\n+\t  && (rs6000_isa_flags & OPTION_MASK_PCREL) != 0\n+\t  && TARGET_CMODEL == CMODEL_MEDIUM);\n+}\n+\n \f\n /* Given an address (ADDR), a mode (MODE), and what the format of the\n    non-prefixed address (NON_PREFIXED_FORMAT) is, return the instruction format"}, {"sha": "694ff70635ed33e444056a860d84684f78614e8f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=8c0f8755b2a2cf60cafad74e7ffbe32a653ebc4c", "patch": "@@ -10553,7 +10553,7 @@\n \t\t\t    (match_operand:P 3 \"\" \"\")]\n \t\t\t   UNSPECV_PLT_PCREL))]\n   \"HAVE_AS_PLTSEQ && TARGET_ELF\n-   && rs6000_pcrel_p (cfun)\"\n+   && rs6000_pcrel_p ()\"\n {\n   return rs6000_pltseq_template (operands, RS6000_PLTSEQ_PLT_PCREL34);\n }\n@@ -10638,7 +10638,7 @@\n   else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\"creqv 6,6,6\", operands);\n \n-  if (rs6000_pcrel_p (cfun))\n+  if (rs6000_pcrel_p ())\n     return \"bl %z0@notoc\";\n   return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \"bl %z0@local\" : \"bl %z0\";\n }\n@@ -10659,7 +10659,7 @@\n   else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\"creqv 6,6,6\", operands);\n \n-  if (rs6000_pcrel_p (cfun))\n+  if (rs6000_pcrel_p ())\n     return \"bl %z1@notoc\";\n   return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \"bl %z1@local\" : \"bl %z1\";\n }\n@@ -10834,7 +10834,7 @@\n }\n   [(set_attr \"type\" \"branch\")\n    (set (attr \"length\")\n-\t(if_then_else (match_test \"rs6000_pcrel_p (cfun)\")\n+\t(if_then_else (match_test \"rs6000_pcrel_p ()\")\n \t  (const_int 4)\n \t  (const_int 8)))])\n \n@@ -10851,7 +10851,7 @@\n }\n   [(set_attr \"type\" \"branch\")\n    (set (attr \"length\")\n-\t(if_then_else (match_test \"rs6000_pcrel_p (cfun)\")\n+\t(if_then_else (match_test \"rs6000_pcrel_p ()\")\n \t    (const_int 4)\n \t    (const_int 8)))])\n \n@@ -10925,7 +10925,7 @@\n \t (match_operand 1))\n    (use (match_operand:SI 2 \"immediate_operand\" \"n,n,n\"))\n    (clobber (reg:P LR_REGNO))]\n-  \"rs6000_pcrel_p (cfun)\"\n+  \"rs6000_pcrel_p ()\"\n {\n   return rs6000_indirect_call_template (operands, 0);\n }\n@@ -10962,7 +10962,7 @@\n \t      (match_operand:P 2 \"unspec_tls\" \"\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"n,n,n\"))\n    (clobber (reg:P LR_REGNO))]\n-  \"rs6000_pcrel_p (cfun)\"\n+  \"rs6000_pcrel_p ()\"\n {\n   return rs6000_indirect_call_template (operands, 1);\n }"}]}