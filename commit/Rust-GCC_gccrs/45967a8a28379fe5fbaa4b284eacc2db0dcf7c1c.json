{"sha": "45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU5NjdhOGEyODM3OWZlNWZiYWE0YjI4NGVhY2MyZGIwZGNmN2MxYw==", "commit": {"author": {"name": "Sascha Brawer", "email": "brawer@dandelis.ch", "date": "2003-10-29T16:17:51Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-29T16:17:51Z"}, "message": "CubicCurve2D.java (contains): Docfix for URL of embedded drawing.\n\n2003-10-29  Sascha Brawer  <brawer@dandelis.ch>\n\n        * java/awt/geom/CubicCurve2D.java (contains): Docfix for URL of embedded drawing.\n        * java/awt/geom/QuadCurve2D.java: Likewise.\n\n2003-10-29  Sascha Brawer  <brawer@dandelis.ch>\n\n\t* java/awt/geom/CubicCurve2D.java: Added documentation.\n\t* java/awt/geom/QuadCurve2D.java: Likewise.\n\n\t* java/awt/geom/doc-files/QuadCurve2D-4.png,\n\tjava/awt/geom/doc-files/QuadCurve2D-5.png,\n\tjava/awt/geom/doc-files/CubicCurve2D-4.png,\n\tjava/awt/geom/doc-files/Cubicurve2D-5.png: New illustrations.\n\n2003-10-29  Sascha Brawer  <brawer@dandelis.ch>\n\n\t* java/awt/geom/CubicCurve2D.java (getFlatnessSq): Implement.\n\t(subdivide(CubicCurve2D, CubicCurve2D)): Avoid useless object allocation.\n\t(subdivide(double[],int,double[],int,double[],int)): Implement.\n\n2003-10-29  Sascha Brawer  <brawer@dandelis.ch>\n\n\t* java/awt/geom/doc-files/CubicCurve2D-1.png,\n\tjava/awt/geom/doc-files/CubicCurve2D-2.png,\n\tjava/awt/geom/doc-files/CubicCurve2D-3.png: New illustrations.\n\nFrom-SVN: r73048", "tree": {"sha": "8b273e9f65f02de8078b4ecff7c454d9536fc2e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b273e9f65f02de8078b4ecff7c454d9536fc2e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/comments", "author": null, "committer": null, "parents": [{"sha": "4b6be8de930d2e4861054faba3662797dffa1105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6be8de930d2e4861054faba3662797dffa1105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b6be8de930d2e4861054faba3662797dffa1105"}], "stats": {"total": 1248, "additions": 1206, "deletions": 42}, "files": [{"sha": "d91fa185c3f2d02aeefa3514a2ac254333403d96", "filename": "libjava/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c", "patch": "@@ -1,3 +1,30 @@\n+2003-10-29  Sascha Brawer  <brawer@dandelis.ch>\n+\n+        * java/awt/geom/CubicCurve2D.java (contains): Docfix for URL of embedded drawing.\n+        * java/awt/geom/QuadCurve2D.java: Likewise.\n+\n+2003-10-29  Sascha Brawer  <brawer@dandelis.ch>\n+\n+\t* java/awt/geom/CubicCurve2D.java: Added documentation.\n+\t* java/awt/geom/QuadCurve2D.java: Likewise.\n+\n+\t* java/awt/geom/doc-files/QuadCurve2D-4.png,\n+\tjava/awt/geom/doc-files/QuadCurve2D-5.png,\n+\tjava/awt/geom/doc-files/CubicCurve2D-4.png,\n+\tjava/awt/geom/doc-files/Cubicurve2D-5.png: New illustrations.\n+\n+2003-10-29  Sascha Brawer  <brawer@dandelis.ch>\n+\n+\t* java/awt/geom/CubicCurve2D.java (getFlatnessSq): Implement.\n+\t(subdivide(CubicCurve2D, CubicCurve2D)): Avoid useless object allocation.\n+\t(subdivide(double[],int,double[],int,double[],int)): Implement.\n+\n+2003-10-29  Sascha Brawer  <brawer@dandelis.ch>\n+\n+\t* java/awt/geom/doc-files/CubicCurve2D-1.png,\n+\tjava/awt/geom/doc-files/CubicCurve2D-2.png,\n+\tjava/awt/geom/doc-files/CubicCurve2D-3.png: New illustrations.\n+\n 2003-10-29  Ito Kazumitsu <kaz@maczuka.gcd.org>\n \n \t* java/text/DecimalFormat.java"}, {"sha": "1e38d3ada9a1a9a0a85a68bf97913b05eef37d6a", "filename": "libjava/java/awt/geom/CubicCurve2D.java", "status": "modified", "additions": 983, "deletions": 36, "changes": 1019, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2FCubicCurve2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2FCubicCurve2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FCubicCurve2D.java?ref=45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c", "patch": "@@ -1,5 +1,5 @@\n /* CubicCurve2D.java -- represents a parameterized cubic curve in 2-D space\n-   Copyright (C) 2002 Free Software Foundation\n+   Copyright (C) 2002, 2003 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -42,163 +42,687 @@\n import java.awt.Shape;\n import java.util.NoSuchElementException;\n \n+\n /**\n- * STUBS ONLY\n- * XXX Implement and document.\n+ * A two-dimensional curve that is parameterized with a cubic\n+ * function.\n+ *\n+ * <p><img src=\"doc-files/CubicCurve2D-1.png\" width=\"350\" height=\"180\"\n+ * alt=\"A drawing of a CubicCurve2D\" />\n+ *\n+ * @author Eric Blake (ebb9@email.byu.edu)\n+ * @author Graydon Hoare (graydon@redhat.com)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n+ *\n+ * @since 1.2\n  */\n-public abstract class CubicCurve2D implements Shape, Cloneable\n+public abstract class CubicCurve2D\n+  implements Shape, Cloneable\n {\n+  /**\n+   * Constructs a new CubicCurve2D. Typical users will want to\n+   * construct instances of a subclass, such as {@link\n+   * CubicCurve2D.Float} or {@link CubicCurve2D.Double}.\n+   */\n   protected CubicCurve2D()\n   {\n   }\n \n+\n+  /**\n+   * Returns the <i>x</i> coordinate of the curve&#x2019;s start\n+   * point.\n+   */\n   public abstract double getX1();\n+\n+\n+  /**\n+   * Returns the <i>y</i> coordinate of the curve&#x2019;s start\n+   * point.\n+   */\n   public abstract double getY1();\n+\n+\n+  /**\n+   * Returns the curve&#x2019;s start point.\n+   */\n   public abstract Point2D getP1();\n+\n+\n+  /**\n+   * Returns the <i>x</i> coordinate of the curve&#x2019;s first\n+   * control point.\n+   */\n   public abstract double getCtrlX1();\n+\n+\n+  /**\n+   * Returns the <i>y</i> coordinate of the curve&#x2019;s first\n+   * control point.\n+   */\n   public abstract double getCtrlY1();\n+\n+\n+  /**\n+   * Returns the curve&#x2019;s first control point.\n+   */\n   public abstract Point2D getCtrlP1();\n+\n+\n+  /**\n+   * Returns the <i>x</i> coordinate of the curve&#x2019;s second\n+   * control point.\n+   */\n   public abstract double getCtrlX2();\n+\n+\n+  /**\n+   * Returns the <i>y</i> coordinate of the curve&#x2019;s second\n+   * control point.\n+   */\n   public abstract double getCtrlY2();\n+\n+\n+  /**\n+   * Returns the curve&#x2019;s second control point.\n+   */\n   public abstract Point2D getCtrlP2();\n+\n+\n+  /**\n+   * Returns the <i>x</i> coordinate of the curve&#x2019;s end\n+   * point.\n+   */\n   public abstract double getX2();\n+\n+\n+  /**\n+   * Returns the <i>y</i> coordinate of the curve&#x2019;s end\n+   * point.\n+   */\n   public abstract double getY2();\n+\n+\n+  /**\n+   * Returns the curve&#x2019;s end point.\n+   */\n   public abstract Point2D getP2();\n \n+\n+  /**\n+   * Changes the curve geometry, separately specifying each coordinate\n+   * value.\n+   *\n+   * <p><img src=\"doc-files/CubicCurve2D-1.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing of a CubicCurve2D\" />\n+   *\n+   * @param x1 the <i>x</i> coordinate of the curve&#x2019;s new start\n+   * point.\n+   *\n+   * @param y1 the <i>y</i> coordinate of the curve&#x2019;s new start\n+   * point.\n+   *\n+   * @param cx1 the <i>x</i> coordinate of the curve&#x2019;s new\n+   * first control point.\n+   *\n+   * @param cy1 the <i>y</i> coordinate of the curve&#x2019;s new\n+   * first control point.\n+   *\n+   * @param cx2 the <i>x</i> coordinate of the curve&#x2019;s new\n+   * second control point.\n+   *\n+   * @param cy2 the <i>y</i> coordinate of the curve&#x2019;s new\n+   * second control point.\n+   *\n+   * @param x2 the <i>x</i> coordinate of the curve&#x2019;s new end\n+   * point.\n+   *\n+   * @param y2 the <i>y</i> coordinate of the curve&#x2019;s new end\n+   * point.\n+   */\n   public abstract void setCurve(double x1, double y1, double cx1, double cy1,\n                                 double cx2, double cy2, double x2, double y2);\n+\n+\n+  /**\n+   * Changes the curve geometry, specifying coordinate values in an\n+   * array.\n+   *\n+   * @param coords an array containing the new coordinate values.  The\n+   * <i>x</i> coordinate of the new start point is located at\n+   * <code>coords[offset]</code>, its <i>y</i> coordinate at\n+   * <code>coords[offset + 1]</code>.  The <i>x</i> coordinate of the\n+   * new first control point is located at <code>coords[offset +\n+   * 2]</code>, its <i>y</i> coordinate at <code>coords[offset +\n+   * 3]</code>.  The <i>x</i> coordinate of the new second control\n+   * point is located at <code>coords[offset + 4]</code>, its <i>y</i>\n+   * coordinate at <code>coords[offset + 5]</code>.  The <i>x</i>\n+   * coordinate of the new end point is located at <code>coords[offset\n+   * + 6]</code>, its <i>y</i> coordinate at <code>coords[offset +\n+   * 7]</code>.\n+   *\n+   * @param offset the offset of the first coordinate value in\n+   * <code>coords</code>.\n+   */\n   public void setCurve(double[] coords, int offset)\n   {\n     setCurve(coords[offset++], coords[offset++],\n              coords[offset++], coords[offset++],\n              coords[offset++], coords[offset++],\n              coords[offset++], coords[offset++]);\n   }\n+\n+\n+  /**\n+   * Changes the curve geometry, specifying coordinate values in\n+   * separate Point objects.\n+   *\n+   * <p><img src=\"doc-files/CubicCurve2D-1.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing of a CubicCurve2D\" />\n+   *\n+   * <p>The curve does not keep any reference to the passed point\n+   * objects. Therefore, a later change to <code>p1</code>,\n+   * <code>c1</code>, <code>c2</code> or <code>p2</code> will not\n+   * affect the curve geometry.\n+   *\n+   * @param p1 the new start point.\n+   * @param c1 the new first control point.\n+   * @param c2 the new second control point.\n+   * @param p2 the new end point.\n+   */\n   public void setCurve(Point2D p1, Point2D c1, Point2D c2, Point2D p2)\n   {\n     setCurve(p1.getX(), p1.getY(), c1.getX(), c1.getY(),\n              c2.getX(), c2.getY(), p2.getX(), p2.getY());\n   }\n+\n+\n+  /**\n+   * Changes the curve geometry, specifying coordinate values in an\n+   * array of Point objects.\n+   *\n+   * <p><img src=\"doc-files/CubicCurve2D-1.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing of a CubicCurve2D\" />\n+   *\n+   * <p>The curve does not keep references to the passed point\n+   * objects. Therefore, a later change to the <code>pts</code> array\n+   * or any of its elements will not affect the curve geometry.\n+   *\n+   * @param pts an array containing the points. The new start point\n+   * is located at <code>pts[offset]</code>, the new first control\n+   * point at <code>pts[offset + 1]</code>, the new second control\n+   * point at <code>pts[offset + 2]</code>, and the new end point\n+   * at <code>pts[offset + 3]</code>.\n+   *\n+   * @param offset the offset of the start point in <code>pts</code>.\n+   */\n   public void setCurve(Point2D[] pts, int offset)\n   {\n     setCurve(pts[offset].getX(), pts[offset++].getY(),\n              pts[offset].getX(), pts[offset++].getY(),\n              pts[offset].getX(), pts[offset++].getY(),\n              pts[offset].getX(), pts[offset++].getY());\n   }\n+  \n+\n+  /**\n+   * Changes the curve geometry to that of another curve.\n+   *\n+   * @param c the curve whose coordinates will be copied.\n+   */\n   public void setCurve(CubicCurve2D c)\n   {\n     setCurve(c.getX1(), c.getY1(), c.getCtrlX1(), c.getCtrlY1(),\n              c.getCtrlX2(), c.getCtrlY2(), c.getX2(), c.getY2());\n   }\n+\n+\n+  /**\n+   * Calculates the squared flatness of a cubic curve, directly\n+   * specifying each coordinate value. The flatness is the maximal\n+   * distance of a control point to the line between start and end\n+   * point.\n+   *\n+   * <p><img src=\"doc-files/CubicCurve2D-4.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing that illustrates the flatness\" />\n+   *\n+   * <p>In the above drawing, the straight line connecting start point\n+   * P1 and end point P2 is depicted in gray.  In comparison to C1,\n+   * control point C2 is father away from the gray line. Therefore,\n+   * the result will be the square of the distance between C2 and the\n+   * gray line, i.e. the squared length of the red line.\n+   *\n+   * @param x1 the <i>x</i> coordinate of the start point P1.\n+   * @param y1 the <i>y</i> coordinate of the start point P1.\n+   * @param cx1 the <i>x</i> coordinate of the first control point C1.\n+   * @param cy1 the <i>y</i> coordinate of the first control point C1.\n+   * @param cx2 the <i>x</i> coordinate of the second control point C2.\n+   * @param cy2 the <i>y</i> coordinate of the second control point C2.\n+   * @param x2 the <i>x</i> coordinate of the end point P2.\n+   * @param y2 the <i>y</i> coordinate of the end point P2.\n+   */\n   public static double getFlatnessSq(double x1, double y1, double cx1,\n                                      double cy1, double cx2, double cy2,\n                                      double x2, double y2)\n   {\n-    // XXX Implement.\n-    throw new Error(\"not implemented\");\n+    return Math.max(Line2D.ptSegDistSq(x1, y1, x2, y2, cx1, cy1),\n+                    Line2D.ptSegDistSq(x1, y1, x2, y2, cx2, cy2));\n   }\n+\n+\n+  /**\n+   * Calculates the flatness of a cubic curve, directly specifying\n+   * each coordinate value. The flatness is the maximal distance of a\n+   * control point to the line between start and end point.\n+   *\n+   * <p><img src=\"doc-files/CubicCurve2D-4.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing that illustrates the flatness\" />\n+   *\n+   * <p>In the above drawing, the straight line connecting start point\n+   * P1 and end point P2 is depicted in gray.  In comparison to C1,\n+   * control point C2 is father away from the gray line. Therefore,\n+   * the result will be the distance between C2 and the gray line,\n+   * i.e. the length of the red line.\n+   *\n+   * @param x1 the <i>x</i> coordinate of the start point P1.\n+   * @param y1 the <i>y</i> coordinate of the start point P1.\n+   * @param cx1 the <i>x</i> coordinate of the first control point C1.\n+   * @param cy1 the <i>y</i> coordinate of the first control point C1.\n+   * @param cx2 the <i>x</i> coordinate of the second control point C2.\n+   * @param cy2 the <i>y</i> coordinate of the second control point C2.\n+   * @param x2 the <i>x</i> coordinate of the end point P2.\n+   * @param y2 the <i>y</i> coordinate of the end point P2.\n+   */\n   public static double getFlatness(double x1, double y1, double cx1,\n                                    double cy1, double cx2, double cy2,\n                                    double x2, double y2)\n   {\n     return Math.sqrt(getFlatnessSq(x1, y1, cx1, cy1, cx2, cy2, x2, y2));\n   }\n+\n+\n+  /**\n+   * Calculates the squared flatness of a cubic curve, specifying the\n+   * coordinate values in an array. The flatness is the maximal\n+   * distance of a control point to the line between start and end\n+   * point.\n+   *\n+   * <p><img src=\"doc-files/CubicCurve2D-4.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing that illustrates the flatness\" />\n+   *\n+   * <p>In the above drawing, the straight line connecting start point\n+   * P1 and end point P2 is depicted in gray.  In comparison to C1,\n+   * control point C2 is father away from the gray line. Therefore,\n+   * the result will be the square of the distance between C2 and the\n+   * gray line, i.e. the squared length of the red line.\n+   *\n+   * @param coords an array containing the coordinate values.  The\n+   * <i>x</i> coordinate of the start point P1 is located at\n+   * <code>coords[offset]</code>, its <i>y</i> coordinate at\n+   * <code>coords[offset + 1]</code>.  The <i>x</i> coordinate of the\n+   * first control point C1 is located at <code>coords[offset +\n+   * 2]</code>, its <i>y</i> coordinate at <code>coords[offset +\n+   * 3]</code>. The <i>x</i> coordinate of the second control point C2\n+   * is located at <code>coords[offset + 4]</code>, its <i>y</i>\n+   * coordinate at <code>coords[offset + 5]</code>. The <i>x</i>\n+   * coordinate of the end point P2 is located at <code>coords[offset\n+   * + 6]</code>, its <i>y</i> coordinate at <code>coords[offset +\n+   * 7]</code>.\n+   *\n+   * @param offset the offset of the first coordinate value in\n+   * <code>coords</code>.\n+   */\n   public static double getFlatnessSq(double[] coords, int offset)\n   {\n     return getFlatnessSq(coords[offset++], coords[offset++],\n                          coords[offset++], coords[offset++],\n                          coords[offset++], coords[offset++],\n                          coords[offset++], coords[offset++]);\n   }\n+\n+\n+  /**\n+   * Calculates the flatness of a cubic curve, specifying the\n+   * coordinate values in an array. The flatness is the maximal\n+   * distance of a control point to the line between start and end\n+   * point.\n+   *\n+   * <p><img src=\"doc-files/CubicCurve2D-4.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing that illustrates the flatness\" />\n+   *\n+   * <p>In the above drawing, the straight line connecting start point\n+   * P1 and end point P2 is depicted in gray.  In comparison to C1,\n+   * control point C2 is father away from the gray line. Therefore,\n+   * the result will be the distance between C2 and the gray line,\n+   * i.e. the length of the red line.\n+   *\n+   * @param coords an array containing the coordinate values.  The\n+   * <i>x</i> coordinate of the start point P1 is located at\n+   * <code>coords[offset]</code>, its <i>y</i> coordinate at\n+   * <code>coords[offset + 1]</code>.  The <i>x</i> coordinate of the\n+   * first control point C1 is located at <code>coords[offset +\n+   * 2]</code>, its <i>y</i> coordinate at <code>coords[offset +\n+   * 3]</code>. The <i>x</i> coordinate of the second control point C2\n+   * is located at <code>coords[offset + 4]</code>, its <i>y</i>\n+   * coordinate at <code>coords[offset + 5]</code>. The <i>x</i>\n+   * coordinate of the end point P2 is located at <code>coords[offset\n+   * + 6]</code>, its <i>y</i> coordinate at <code>coords[offset +\n+   * 7]</code>.\n+   *\n+   * @param offset the offset of the first coordinate value in\n+   * <code>coords</code>.\n+   */\n   public static double getFlatness(double[] coords, int offset)\n   {\n     return Math.sqrt(getFlatnessSq(coords[offset++], coords[offset++],\n                                    coords[offset++], coords[offset++],\n                                    coords[offset++], coords[offset++],\n                                    coords[offset++], coords[offset++]));\n   }\n+\n+\n+  /**\n+   * Calculates the squared flatness of this curve.  The flatness is\n+   * the maximal distance of a control point to the line between start\n+   * and end point.\n+   *\n+   * <p><img src=\"doc-files/CubicCurve2D-4.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing that illustrates the flatness\" />\n+   *\n+   * <p>In the above drawing, the straight line connecting start point\n+   * P1 and end point P2 is depicted in gray.  In comparison to C1,\n+   * control point C2 is father away from the gray line. Therefore,\n+   * the result will be the square of the distance between C2 and the\n+   * gray line, i.e. the squared length of the red line.\n+   */\n   public double getFlatnessSq()\n   {\n     return getFlatnessSq(getX1(), getY1(), getCtrlX1(), getCtrlY1(),\n                          getCtrlX2(), getCtrlY2(), getX2(), getY2());\n   }\n+\n+\n+  /**\n+   * Calculates the flatness of this curve.  The flatness is the\n+   * maximal distance of a control point to the line between start and\n+   * end point.\n+   *\n+   * <p><img src=\"doc-files/CubicCurve2D-4.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing that illustrates the flatness\" />\n+   *\n+   * <p>In the above drawing, the straight line connecting start point\n+   * P1 and end point P2 is depicted in gray.  In comparison to C1,\n+   * control point C2 is father away from the gray line. Therefore,\n+   * the result will be the distance between C2 and the gray line,\n+   * i.e. the length of the red line.\n+   */\n   public double getFlatness()\n   {\n     return Math.sqrt(getFlatnessSq(getX1(), getY1(), getCtrlX1(),\n                                    getCtrlY1(), getCtrlX2(), getCtrlY2(),\n                                    getX2(), getY2()));\n   }\n \n-  public void subdivide(CubicCurve2D l, CubicCurve2D r)\n+\n+  /**\n+   * Subdivides this curve into two halves.\n+   *\n+   * <p><img src=\"doc-files/CubicCurve2D-3.png\" width=\"700\"\n+   * height=\"180\" alt=\"A drawing that illustrates the effects of\n+   * subdividing a CubicCurve2D\" />\n+   *\n+   * @param left a curve whose geometry will be set to the left half\n+   * of this curve, or <code>null</code> if the caller is not\n+   * interested in the left half.\n+   *\n+   * @param right a curve whose geometry will be set to the right half\n+   * of this curve, or <code>null</code> if the caller is not\n+   * interested in the right half.\n+   */\n+  public void subdivide(CubicCurve2D left, CubicCurve2D right)\n   {\n-    if (l == null)\n-      l = new CubicCurve2D.Double();\n-    if (r == null)\n-      r = new CubicCurve2D.Double();\n     // Use empty slots at end to share single array.\n     double[] d = new double[] { getX1(), getY1(), getCtrlX1(), getCtrlY1(),\n                                 getCtrlX2(), getCtrlY2(), getX2(), getY2(),\n                                 0, 0, 0, 0, 0, 0 };\n     subdivide(d, 0, d, 0, d, 6);\n-    l.setCurve(d, 0);\n-    r.setCurve(d, 6);\n+    if (left != null)\n+      left.setCurve(d, 0);\n+    if (right != null)\n+      right.setCurve(d, 6);\n   }\n+\n+\n+  /**\n+   * Subdivides a cubic curve into two halves.\n+   *\n+   * <p><img src=\"doc-files/CubicCurve2D-3.png\" width=\"700\"\n+   * height=\"180\" alt=\"A drawing that illustrates the effects of\n+   * subdividing a CubicCurve2D\" />\n+   *\n+   * @param src the curve to be subdivided.\n+   *\n+   * @param left a curve whose geometry will be set to the left half\n+   * of <code>src</code>, or <code>null</code> if the caller is not\n+   * interested in the left half.\n+   *\n+   * @param right a curve whose geometry will be set to the right half\n+   * of <code>src</code>, or <code>null</code> if the caller is not\n+   * interested in the right half.\n+   */\n   public static void subdivide(CubicCurve2D src,\n-                               CubicCurve2D l, CubicCurve2D r)\n+                               CubicCurve2D left, CubicCurve2D right)\n   {\n-    src.subdivide(l, r);\n+    src.subdivide(left, right);\n   }\n+\n+\n+  /**\n+   * Subdivides a cubic curve into two halves, passing all coordinates\n+   * in an array.\n+   *\n+   * <p><img src=\"doc-files/CubicCurve2D-3.png\" width=\"700\"\n+   * height=\"180\" alt=\"A drawing that illustrates the effects of\n+   * subdividing a CubicCurve2D\" />\n+   *\n+   * <p>The left end point and the right start point will always be\n+   * identical. Memory-concious programmers thus may want to pass the\n+   * same array for both <code>left</code> and <code>right</code>, and\n+   * set <code>rightOff</code> to <code>leftOff + 6</code>.\n+   *\n+   * @param src an array containing the coordinates of the curve to be\n+   * subdivided.  The <i>x</i> coordinate of the start point P1 is\n+   * located at <code>src[srcOff]</code>, its <i>y</i> at\n+   * <code>src[srcOff + 1]</code>.  The <i>x</i> coordinate of the\n+   * first control point C1 is located at <code>src[srcOff +\n+   * 2]</code>, its <i>y</i> at <code>src[srcOff + 3]</code>.  The\n+   * <i>x</i> coordinate of the second control point C2 is located at\n+   * <code>src[srcOff + 4]</code>, its <i>y</i> at <code>src[srcOff +\n+   * 5]</code>. The <i>x</i> coordinate of the end point is located at\n+   * <code>src[srcOff + 6]</code>, its <i>y</i> at <code>src[srcOff +\n+   * 7]</code>.\n+   *\n+   * @param srcOff an offset into <code>src</code>, specifying\n+   * the index of the start point&#x2019;s <i>x</i> coordinate.\n+   *\n+   * @param left an array that will receive the coordinates of the\n+   * left half of <code>src</code>. It is acceptable to pass\n+   * <code>src</code>. A caller who is not interested in the left half\n+   * can pass <code>null</code>.\n+   *\n+   * @param leftOff an offset into <code>left</code>, specifying the\n+   * index where the start point&#x2019;s <i>x</i> coordinate will be\n+   * stored.\n+   *\n+   * @param right an array that will receive the coordinates of the\n+   * right half of <code>src</code>. It is acceptable to pass\n+   * <code>src</code> or <code>left</code>. A caller who is not\n+   * interested in the right half can pass <code>null</code>.\n+   *\n+   * @param rightOff an offset into <code>right</code>, specifying the\n+   * index where the start point&#x2019;s <i>x</i> coordinate will be\n+   * stored.\n+   */\n   public static void subdivide(double[] src, int srcOff,\n                                double[] left, int leftOff,\n                                double[] right, int rightOff)\n   {\n-    // XXX Implement.\n-    throw new Error(\"not implemented\");\n+    // To understand this code, please have a look at the image\n+    // \"CubicCurve2D-3.png\" in the sub-directory \"doc-files\".\n+    double src_C1_x, src_C1_y, src_C2_x, src_C2_y;\n+    double left_P1_x, left_P1_y;\n+    double left_C1_x, left_C1_y, left_C2_x, left_C2_y;\n+    double right_C1_x, right_C1_y, right_C2_x, right_C2_y;\n+    double right_P2_x, right_P2_y;\n+    double Mid_x, Mid_y; // Mid = left.P2 = right.P1\n+\n+    left_P1_x = src[srcOff];\n+    left_P1_y = src[srcOff + 1];\n+    src_C1_x = src[srcOff + 2];\n+    src_C1_y = src[srcOff + 3];\n+    src_C2_x = src[srcOff + 4];\n+    src_C2_y = src[srcOff + 5];\n+    right_P2_x = src[srcOff + 6];\n+    right_P2_y = src[srcOff + 7];\n+\n+    left_C1_x = (left_P1_x + src_C1_x) / 2;\n+    left_C1_y = (left_P1_y + src_C1_y) / 2;\n+    right_C2_x = (right_P2_x + src_C2_x) / 2;\n+    right_C2_y = (right_P2_y + src_C2_y) / 2;\n+    Mid_x = (src_C1_x + src_C2_x) / 2;\n+    Mid_y = (src_C1_y + src_C2_y) / 2;\n+    left_C2_x = (left_C1_x + Mid_x) / 2;\n+    left_C2_y = (left_C1_y + Mid_y) / 2;\n+    right_C1_x = (Mid_x + right_C2_x) / 2;\n+    right_C1_y = (Mid_y + right_C2_y) / 2;\n+    Mid_x = (left_C2_x + right_C1_x) / 2;\n+    Mid_y = (left_C2_y + right_C1_y) / 2;\n+\n+    if (left != null)\n+    {\n+      left[leftOff] = left_P1_x;\n+      left[leftOff + 1] = left_P1_y;\n+      left[leftOff + 2] = left_C1_x;\n+      left[leftOff + 3] = left_C1_y;\n+      left[leftOff + 4] = left_C2_x;\n+      left[leftOff + 5] = left_C2_y;\n+      left[leftOff + 6] = Mid_x;\n+      left[leftOff + 7] = Mid_y;\n+    }\n+\n+    if (right != null)\n+    {\n+      right[rightOff] = Mid_x;\n+      right[rightOff + 1] = Mid_y;\n+      right[rightOff + 2] = right_C1_x;\n+      right[rightOff + 3] = right_C1_y;\n+      right[rightOff + 4] = right_C2_x;\n+      right[rightOff + 5] = right_C2_y;\n+      right[rightOff + 6] = right_P2_x;\n+      right[rightOff + 7] = right_P2_y;\n+    }\n   }\n+\n+\n   public static int solveCubic(double[] eqn)\n   {\n     return solveCubic(eqn, eqn);\n   }\n+\n+\n   public static int solveCubic(double[] eqn, double[] res)\n   {\n-    if (eqn[3] == 0)\n+    double a, b, c, q, r, Q, R;\n+    \n+    double c3 = eqn[3];\n+    if (c3 == 0)\n       return QuadCurve2D.solveQuadratic(eqn, res);\n-    // XXX Implement.\n-    throw new Error(\"not implemented\");\n+\n+    // Divide the equation by the cubic coefficient.\n+    c = eqn[0] / c3;\n+    b = eqn[1] / c3;\n+    a = eqn[2] / c3;\n+\n+    // We now need to solve x^3 + ax^2 + bx + c = 0.\n+    throw new Error(\"not implemented\"); // FIXME\n   }\n \n+\n+  /**\n+   * Determines whether a position lies inside the area that is bounded\n+   * by the curve and the straight line connecting its end points.\n+   *\n+   * <p><img src=\"doc-files/CubicCurve2D-5.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing of the area spanned by the curve\" />\n+   *\n+   * <p>The above drawing illustrates in which area points are\n+   * considered &#x201c;contained&#x201d; in a CubicCurve2D.\n+   */\n   public boolean contains(double x, double y)\n   {\n     // XXX Implement.\n     throw new Error(\"not implemented\");\n   }\n+\n+\n+  /**\n+   * Determines whether a point lies inside the area that is bounded\n+   * by the curve and the straight line connecting its end points.\n+   *\n+   * <p><img src=\"doc-files/CubicCurve2D-5.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing of the area spanned by the curve\" />\n+   *\n+   * <p>The above drawing illustrates in which area points are\n+   * considered &#x201c;contained&#x201d; in a CubicCurve2D.\n+   */\n   public boolean contains(Point2D p)\n   {\n     return contains(p.getX(), p.getY());\n   }\n+\n+\n   public boolean intersects(double x, double y, double w, double h)\n   {\n     // XXX Implement.\n     throw new Error(\"not implemented\");\n   }\n+\n+\n   public boolean intersects(Rectangle2D r)\n   {\n     return intersects(r.getX(), r.getY(), r.getWidth(), r.getHeight());\n   }\n+\n+\n   public boolean contains(double x, double y, double w, double h)\n   {\n     // XXX Implement.\n     throw new Error(\"not implemented\");\n   }\n+\n+\n   public boolean contains(Rectangle2D r)\n   {\n     return contains(r.getX(), r.getY(), r.getWidth(), r.getHeight());\n   }\n+\n+\n+  /**\n+   * Determines the smallest rectangle that encloses the\n+   * curve&#x2019;s start, end and control points. As the illustration\n+   * below shows, the invisible control points may cause the bounds to\n+   * be much larger than the area that is actually covered by the\n+   * curve.\n+   *\n+   * <p><img src=\"doc-files/CubicCurve2D-2.png\" width=\"350\" height=\"180\"\n+   * alt=\"An illustration of the bounds of a CubicCurve2D\" />\n+   */\n   public Rectangle getBounds()\n   {\n     return getBounds2D().getBounds();\n   }\n+\n+\n   public PathIterator getPathIterator(final AffineTransform at)\n   {\n     return new PathIterator()\n@@ -276,47 +800,135 @@ public int currentSegment(double[] coords)\n       }\n     };\n   }\n+\n+\n   public PathIterator getPathIterator(AffineTransform at, double flatness)\n   {\n     return new FlatteningPathIterator(getPathIterator(at), flatness);\n   }\n \n+\n   /**\n-   * Create a new curve of the same run-time type with the same contents as\n-   * this one.\n+   * Create a new curve with the same contents as this one.\n    *\n-   * @return the clone\n+   * @return the clone.\n    */\n   public Object clone()\n   {\n     try\n-      {\n-        return super.clone();\n-      }\n+    {\n+      return super.clone();\n+    }\n     catch (CloneNotSupportedException e)\n-      {\n-        throw (Error) new InternalError().initCause(e); // Impossible\n-      }\n+    {\n+      throw (Error) new InternalError().initCause(e); // Impossible\n+    }\n   }\n \n+\n   /**\n-   * STUBS ONLY\n+   * A two-dimensional curve that is parameterized with a cubic\n+   * function and stores coordinate values in double-precision\n+   * floating-point format.\n+   *\n+   * @see CubicCurve2D.Float\n+   *\n+   * @author Eric Blake (ebb9@email.byu.edu)\n+   * @author Sascha Brawer (brawer@dandelis.ch)\n    */\n-  public static class Double extends CubicCurve2D\n+  public static class Double\n+    extends CubicCurve2D\n   {\n+    /**\n+     * The <i>x</i> coordinate of the curve&#x2019;s start point.\n+     */\n     public double x1;\n+\n+\n+    /**\n+     * The <i>y</i> coordinate of the curve&#x2019;s start point.\n+     */\n     public double y1;\n+\n+\n+    /**\n+     * The <i>x</i> coordinate of the curve&#x2019;s first control point.\n+     */\n     public double ctrlx1;\n+\n+\n+    /**\n+     * The <i>y</i> coordinate of the curve&#x2019;s first control point.\n+     */\n     public double ctrly1;\n+\n+\n+    /**\n+     * The <i>x</i> coordinate of the curve&#x2019;s second control point.\n+     */\n     public double ctrlx2;\n+\n+\n+    /**\n+     * The <i>y</i> coordinate of the curve&#x2019;s second control point.\n+     */\n     public double ctrly2;\n+\n+\n+    /**\n+     * The <i>x</i> coordinate of the curve&#x2019;s end point.\n+     */\n     public double x2;\n+\n+\n+    /**\n+     * The <i>y</i> coordinate of the curve&#x2019;s end point.\n+     */\n     public double y2;\n \n+\n+    /**\n+     * Constructs a new CubicCurve2D that stores its coordinate values\n+     * in double-precision floating-point format. All points are\n+     * initially at position (0, 0).\n+     */\n     public Double()\n     {\n     }\n \n+\n+    /**\n+     * Constructs a new CubicCurve2D that stores its coordinate values\n+     * in double-precision floating-point format, specifying the\n+     * initial position of each point.\n+     *\n+     * <p><img src=\"doc-files/CubicCurve2D-1.png\" width=\"350\" height=\"180\"\n+     * alt=\"A drawing of a CubicCurve2D\" />\n+     *\n+     * @param x1 the <i>x</i> coordinate of the curve&#x2019;s start\n+     * point.\n+     *\n+     * @param y1 the <i>y</i> coordinate of the curve&#x2019;s start\n+     * point.\n+     *\n+     * @param cx1 the <i>x</i> coordinate of the curve&#x2019;s first\n+     * control point.\n+     *\n+     * @param cy1 the <i>y</i> coordinate of the curve&#x2019;s first\n+     * control point.\n+     *\n+     * @param cx2 the <i>x</i> coordinate of the curve&#x2019;s second\n+     * control point.\n+     *\n+     * @param cy2 the <i>y</i> coordinate of the curve&#x2019;s second\n+     * control point.\n+     *\n+     * @param x2 the <i>x</i> coordinate of the curve&#x2019;s end\n+     * point.\n+     *\n+     * @param y2 the <i>y</i> coordinate of the curve&#x2019;s end\n+     * point.\n+     */\n     public Double(double x1, double y1, double cx1, double cy1,\n                   double cx2, double cy2, double x2, double y2)\n     {\n@@ -330,58 +942,154 @@ public Double(double x1, double y1, double cx1, double cy1,\n       this.y2 = y2;\n     }\n \n+\n+    /**\n+     * Returns the <i>x</i> coordinate of the curve&#x2019;s start\n+     * point.\n+     */\n     public double getX1()\n     {\n       return x1;\n     }\n+\n+\n+    /**\n+     * Returns the <i>y</i> coordinate of the curve&#x2019;s start\n+     * point.\n+     */\n     public double getY1()\n     {\n       return y1;\n     }\n+\n+\n+    /**\n+     * Returns the curve&#x2019;s start point.\n+     */\n     public Point2D getP1()\n     {\n       return new Point2D.Double(x1, y1);\n     }\n \n+\n+    /**\n+     * Returns the <i>x</i> coordinate of the curve&#x2019;s first\n+     * control point.\n+     */\n     public double getCtrlX1()\n     {\n       return ctrlx1;\n     }\n+\n+\n+    /**\n+     * Returns the <i>y</i> coordinate of the curve&#x2019;s first\n+     * control point.\n+     */\n     public double getCtrlY1()\n     {\n       return ctrly1;\n     }\n+\n+\n+    /**\n+     * Returns the curve&#x2019;s first control point.\n+     */\n     public Point2D getCtrlP1()\n     {\n       return new Point2D.Double(ctrlx1, ctrly1);\n     }\n \n+\n+    /**\n+     * Returns the <i>x</i> coordinate of the curve&#x2019;s second\n+     * control point.\n+     */\n     public double getCtrlX2()\n     {\n       return ctrlx2;\n     }\n+\n+\n+    /**\n+     * Returns the <i>y</i> coordinate of the curve&#x2019;s second\n+     * control point.\n+     */\n     public double getCtrlY2()\n     {\n       return ctrly2;\n     }\n+\n+\n+    /**\n+     * Returns the curve&#x2019;s second control point.\n+     */\n     public Point2D getCtrlP2()\n     {\n       return new Point2D.Double(ctrlx2, ctrly2);\n     }\n \n+\n+    /**\n+     * Returns the <i>x</i> coordinate of the curve&#x2019;s end\n+     * point.\n+     */\n     public double getX2()\n     {\n       return x2;\n     }\n+\n+\n+    /**\n+     * Returns the <i>y</i> coordinate of the curve&#x2019;s end\n+     * point.\n+     */\n     public double getY2()\n     {\n       return y2;\n     }\n+\n+\n+    /**\n+     * Returns the curve&#x2019;s end point.\n+     */\n     public Point2D getP2()\n     {\n       return new Point2D.Double(x2, y2);\n     }\n \n+\n+    /**\n+     * Changes the curve geometry, separately specifying each coordinate\n+     * value.\n+     *\n+     * <p><img src=\"doc-files/CubicCurve2D-1.png\" width=\"350\" height=\"180\"\n+     * alt=\"A drawing of a CubicCurve2D\" />\n+     *\n+     * @param x1 the <i>x</i> coordinate of the curve&#x2019;s new start\n+     * point.\n+     *\n+     * @param y1 the <i>y</i> coordinate of the curve&#x2019;s new start\n+     * point.\n+     *\n+     * @param cx1 the <i>x</i> coordinate of the curve&#x2019;s new\n+     * first control point.\n+     *\n+     * @param cy1 the <i>y</i> coordinate of the curve&#x2019;s new\n+     * first control point.\n+     *\n+     * @param cx2 the <i>x</i> coordinate of the curve&#x2019;s new\n+     * second control point.\n+     *\n+     * @param cy2 the <i>y</i> coordinate of the curve&#x2019;s new\n+     * second control point.\n+     *\n+     * @param x2 the <i>x</i> coordinate of the curve&#x2019;s new end\n+     * point.\n+     *\n+     * @param y2 the <i>y</i> coordinate of the curve&#x2019;s new end\n+     * point.\n+     */\n     public void setCurve(double x1, double y1, double cx1, double cy1,\n                          double cx2, double cy2, double x2, double y2)\n     {\n@@ -394,6 +1102,18 @@ public void setCurve(double x1, double y1, double cx1, double cy1,\n       this.x2 = x2;\n       this.y2 = y2;\n     }\n+\n+\n+    /**\n+     * Determines the smallest rectangle that encloses the\n+     * curve&#x2019;s start, end and control points. As the\n+     * illustration below shows, the invisible control points may cause\n+     * the bounds to be much larger than the area that is actually\n+     * covered by the curve.\n+     *\n+     * <p><img src=\"doc-files/CubicCurve2D-2.png\" width=\"350\" height=\"180\"\n+     * alt=\"An illustration of the bounds of a CubicCurve2D\" />\n+     */\n     public Rectangle2D getBounds2D()\n     {\n       double nx1 = Math.min(Math.min(x1, ctrlx1), Math.min(ctrlx2, x2));\n@@ -402,26 +1122,112 @@ public Rectangle2D getBounds2D()\n       double ny2 = Math.max(Math.max(y1, ctrly1), Math.max(ctrly2, y2));\n       return new Rectangle2D.Double(nx1, ny1, nx2 - nx1, ny2 - ny1);\n     }\n-  } // class Double\n+  }\n+\n \n   /**\n-   * STUBS ONLY\n+   * A two-dimensional curve that is parameterized with a cubic\n+   * function and stores coordinate values in single-precision\n+   * floating-point format.\n+   *\n+   * @see CubicCurve2D.Float\n+   *\n+   * @author Eric Blake (ebb9@email.byu.edu)\n+   * @author Sascha Brawer (brawer@dandelis.ch)\n    */\n-  public static class Float extends CubicCurve2D\n+  public static class Float\n+    extends CubicCurve2D\n   {\n+    /**\n+     * The <i>x</i> coordinate of the curve&#x2019;s start point.\n+     */\n     public float x1;\n+\n+\n+    /**\n+     * The <i>y</i> coordinate of the curve&#x2019;s start point.\n+     */\n     public float y1;\n+\n+\n+    /**\n+     * The <i>x</i> coordinate of the curve&#x2019;s first control point.\n+     */\n     public float ctrlx1;\n+\n+\n+    /**\n+     * The <i>y</i> coordinate of the curve&#x2019;s first control point.\n+     */\n     public float ctrly1;\n+\n+\n+    /**\n+     * The <i>x</i> coordinate of the curve&#x2019;s second control point.\n+     */\n     public float ctrlx2;\n+\n+\n+    /**\n+     * The <i>y</i> coordinate of the curve&#x2019;s second control point.\n+     */\n     public float ctrly2;\n+\n+\n+    /**\n+     * The <i>x</i> coordinate of the curve&#x2019;s end point.\n+     */\n     public float x2;\n+\n+\n+    /**\n+     * The <i>y</i> coordinate of the curve&#x2019;s end point.\n+     */\n     public float y2;\n \n+\n+    /**\n+     * Constructs a new CubicCurve2D that stores its coordinate values\n+     * in single-precision floating-point format. All points are\n+     * initially at position (0, 0).\n+     */\n     public Float()\n     {\n     }\n \n+\n+    /**\n+     * Constructs a new CubicCurve2D that stores its coordinate values\n+     * in single-precision floating-point format, specifying the\n+     * initial position of each point.\n+     *\n+     * <p><img src=\"doc-files/CubicCurve2D-1.png\" width=\"350\" height=\"180\"\n+     * alt=\"A drawing of a CubicCurve2D\" />\n+     *\n+     * @param x1 the <i>x</i> coordinate of the curve&#x2019;s start\n+     * point.\n+     *\n+     * @param y1 the <i>y</i> coordinate of the curve&#x2019;s start\n+     * point.\n+     *\n+     * @param cx1 the <i>x</i> coordinate of the curve&#x2019;s first\n+     * control point.\n+     *\n+     * @param cy1 the <i>y</i> coordinate of the curve&#x2019;s first\n+     * control point.\n+     *\n+     * @param cx2 the <i>x</i> coordinate of the curve&#x2019;s second\n+     * control point.\n+     *\n+     * @param cy2 the <i>y</i> coordinate of the curve&#x2019;s second\n+     * control point.\n+     *\n+     * @param x2 the <i>x</i> coordinate of the curve&#x2019;s end\n+     * point.\n+     *\n+     * @param y2 the <i>y</i> coordinate of the curve&#x2019;s end\n+     * point.\n+     */\n     public Float(float x1, float y1, float cx1, float cy1,\n                  float cx2, float cy2, float x2, float y2)\n     {\n@@ -435,58 +1241,154 @@ public Float(float x1, float y1, float cx1, float cy1,\n       this.y2 = y2;\n     }\n \n+\n+    /**\n+     * Returns the <i>x</i> coordinate of the curve&#x2019;s start\n+     * point.\n+     */\n     public double getX1()\n     {\n       return x1;\n     }\n+\n+\n+    /**\n+     * Returns the <i>y</i> coordinate of the curve&#x2019;s start\n+     * point.\n+     */\n     public double getY1()\n     {\n       return y1;\n     }\n+\n+\n+    /**\n+     * Returns the curve&#x2019;s start point.\n+     */\n     public Point2D getP1()\n     {\n       return new Point2D.Float(x1, y1);\n     }\n \n+\n+    /**\n+     * Returns the <i>x</i> coordinate of the curve&#x2019;s first\n+     * control point.\n+     */\n     public double getCtrlX1()\n     {\n       return ctrlx1;\n     }\n+\n+\n+    /**\n+     * Returns the <i>y</i> coordinate of the curve&#x2019;s first\n+     * control point.\n+     */\n     public double getCtrlY1()\n     {\n       return ctrly1;\n     }\n+\n+\n+    /**\n+     * Returns the curve&#x2019;s first control point.\n+     */\n     public Point2D getCtrlP1()\n     {\n       return new Point2D.Float(ctrlx1, ctrly1);\n     }\n \n+\n+    /**\n+     * Returns the <i>s</i> coordinate of the curve&#x2019;s second\n+     * control point.\n+     */\n     public double getCtrlX2()\n     {\n       return ctrlx2;\n     }\n+\n+\n+    /**\n+     * Returns the <i>y</i> coordinate of the curve&#x2019;s second\n+     * control point.\n+     */\n     public double getCtrlY2()\n     {\n       return ctrly2;\n     }\n+\n+\n+    /**\n+     * Returns the curve&#x2019;s second control point.\n+     */\n     public Point2D getCtrlP2()\n     {\n       return new Point2D.Float(ctrlx2, ctrly2);\n     }\n \n+\n+    /**\n+     * Returns the <i>x</i> coordinate of the curve&#x2019;s end\n+     * point.\n+     */\n     public double getX2()\n     {\n       return x2;\n     }\n+\n+\n+    /**\n+     * Returns the <i>y</i> coordinate of the curve&#x2019;s end\n+     * point.\n+     */\n     public double getY2()\n     {\n       return y2;\n     }\n+\n+\n+    /**\n+     * Returns the curve&#x2019;s end point.\n+     */\n     public Point2D getP2()\n     {\n       return new Point2D.Float(x2, y2);\n     }\n \n+\n+    /**\n+     * Changes the curve geometry, separately specifying each coordinate\n+     * value as a double-precision floating-point number.\n+     *\n+     * <p><img src=\"doc-files/CubicCurve2D-1.png\" width=\"350\" height=\"180\"\n+     * alt=\"A drawing of a CubicCurve2D\" />\n+     *\n+     * @param x1 the <i>x</i> coordinate of the curve&#x2019;s new start\n+     * point.\n+     *\n+     * @param y1 the <i>y</i> coordinate of the curve&#x2019;s new start\n+     * point.\n+     *\n+     * @param cx1 the <i>x</i> coordinate of the curve&#x2019;s new\n+     * first control point.\n+     *\n+     * @param cy1 the <i>y</i> coordinate of the curve&#x2019;s new\n+     * first control point.\n+     *\n+     * @param cx2 the <i>x</i> coordinate of the curve&#x2019;s new\n+     * second control point.\n+     *\n+     * @param cy2 the <i>y</i> coordinate of the curve&#x2019;s new\n+     * second control point.\n+     *\n+     * @param x2 the <i>x</i> coordinate of the curve&#x2019;s new end\n+     * point.\n+     *\n+     * @param y2 the <i>y</i> coordinate of the curve&#x2019;s new end\n+     * point.\n+     */\n     public void setCurve(double x1, double y1, double cx1, double cy1,\n                          double cx2, double cy2, double x2, double y2)\n     {\n@@ -499,6 +1401,39 @@ public void setCurve(double x1, double y1, double cx1, double cy1,\n       this.x2 = (float) x2;\n       this.y2 = (float) y2;\n     }\n+\n+\n+    /**\n+     * Changes the curve geometry, separately specifying each coordinate\n+     * value as a single-precision floating-point number.\n+     *\n+     * <p><img src=\"doc-files/CubicCurve2D-1.png\" width=\"350\" height=\"180\"\n+     * alt=\"A drawing of a CubicCurve2D\" />\n+     *\n+     * @param x1 the <i>x</i> coordinate of the curve&#x2019;s new start\n+     * point.\n+     *\n+     * @param y1 the <i>y</i> coordinate of the curve&#x2019;s new start\n+     * point.\n+     *\n+     * @param cx1 the <i>x</i> coordinate of the curve&#x2019;s new\n+     * first control point.\n+     *\n+     * @param cy1 the <i>y</i> coordinate of the curve&#x2019;s new\n+     * first control point.\n+     *\n+     * @param cx2 the <i>x</i> coordinate of the curve&#x2019;s new\n+     * second control point.\n+     *\n+     * @param cy2 the <i>y</i> coordinate of the curve&#x2019;s new\n+     * second control point.\n+     *\n+     * @param x2 the <i>x</i> coordinate of the curve&#x2019;s new end\n+     * point.\n+     *\n+     * @param y2 the <i>y</i> coordinate of the curve&#x2019;s new end\n+     * point.\n+     */\n     public void setCurve(float x1, float y1, float cx1, float cy1,\n                          float cx2, float cy2, float x2, float y2)\n     {\n@@ -511,6 +1446,18 @@ public void setCurve(float x1, float y1, float cx1, float cy1,\n       this.x2 = x2;\n       this.y2 = y2;\n     }\n+\n+\n+    /**\n+     * Determines the smallest rectangle that encloses the\n+     * curve&#x2019;s start, end and control points. As the\n+     * illustration below shows, the invisible control points may cause\n+     * the bounds to be much larger than the area that is actually\n+     * covered by the curve.\n+     *\n+     * <p><img src=\"doc-files/CubicCurve2D-2.png\" width=\"350\" height=\"180\"\n+     * alt=\"An illustration of the bounds of a CubicCurve2D\" />\n+     */\n     public Rectangle2D getBounds2D()\n     {\n       float nx1 = (float) Math.min(Math.min(x1, ctrlx1), Math.min(ctrlx2, x2));\n@@ -519,5 +1466,5 @@ public Rectangle2D getBounds2D()\n       float ny2 = (float) Math.max(Math.max(y1, ctrly1), Math.max(ctrly2, y2));\n       return new Rectangle2D.Float(nx1, ny1, nx2 - nx1, ny2 - ny1);\n     }\n-  } // class Float\n-} // class CubicCurve2D\n+  }\n+}"}, {"sha": "5bc63e6c6cfde3727838db1896e49dd77dc3d713", "filename": "libjava/java/awt/geom/QuadCurve2D.java", "status": "modified", "additions": 196, "deletions": 6, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2FQuadCurve2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2FQuadCurve2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FQuadCurve2D.java?ref=45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c", "patch": "@@ -51,6 +51,7 @@\n  * alt=\"A drawing of a QuadCurve2D\" />\n  *\n  * @author Eric Blake (ebb9@email.byu.edu)\n+ * @author Graydon Hoare (graydon@redhat.com)\n  * @author Sascha Brawer (brawer@dandelis.ch)\n  *\n  * @since 1.2\n@@ -129,7 +130,8 @@ protected QuadCurve2D()\n \n \n   /**\n-   * Changes the geometry of the curve.\n+   * Changes the curve geometry, separately specifying each coordinate\n+   * value.\n    *\n    * @param x1 the <i>x</i> coordinate of the curve&#x2019;s new start\n    * point.\n@@ -153,6 +155,23 @@ public abstract void setCurve(double x1, double y1, double cx, double cy,\n                                 double x2, double y2);\n \n \n+  /**\n+   * Changes the curve geometry, passing coordinate values in an\n+   * array.\n+   *\n+   * @param coords an array containing the new coordinate values.  The\n+   * <i>x</i> coordinate of the new start point is located at\n+   * <code>coords[offset]</code>, its <i>y</i> coordinate at\n+   * <code>coords[offset + 1]</code>.  The <i>x</i> coordinate of the\n+   * new control point is located at <code>coords[offset + 2]</code>,\n+   * its <i>y</i> coordinate at <code>coords[offset + 3]</code>. The\n+   * <i>x</i> coordinate of the new end point is located at\n+   * <code>coords[offset + 4]</code>, its <i>y</i> coordinate at\n+   * <code>coords[offset + 5]</code>.\n+   *\n+   * @param offset the offset of the first coordinate value in\n+   * <code>coords</code>.\n+   */\n   public void setCurve(double[] coords, int offset)\n   {\n     setCurve(coords[offset++], coords[offset++],\n@@ -161,18 +180,52 @@ public void setCurve(double[] coords, int offset)\n   }\n \n \n+  /**\n+   * Changes the curve geometry, specifying coordinate values in\n+   * separate Point objects.\n+   *\n+   * <p><img src=\"doc-files/QuadCurve2D-1.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing of a QuadCurve2D\" />\n+   *\n+   * <p>The curve does not keep any reference to the passed point\n+   * objects. Therefore, a later change to <code>p1</code>,\n+   * <code>c</code> <code>p2</code> will not affect the curve\n+   * geometry.\n+   *\n+   * @param p1 the new start point.\n+   * @param c the new control point.\n+   * @param p2 the new end point.\n+   */\n   public void setCurve(Point2D p1, Point2D c, Point2D p2)\n   {\n     setCurve(p1.getX(), p1.getY(), c.getX(), c.getY(),\n              p2.getX(), p2.getY());\n   }\n \n \n+  /**\n+   * Changes the curve geometry, specifying coordinate values in an\n+   * array of Point objects.\n+   *\n+   * <p><img src=\"doc-files/QuadCurve2D-1.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing of a QuadCurve2D\" />\n+   *\n+   * <p>The curve does not keep references to the passed point\n+   * objects. Therefore, a later change to the <code>pts</code> array\n+   * or any of its elements will not affect the curve geometry.\n+   *\n+   * @param pts an array containing the points. The new start point\n+   * is located at <code>pts[offset]</code>, the new control\n+   * point at <code>pts[offset + 1]</code>, and the new end point\n+   * at <code>pts[offset + 2]</code>.\n+   *\n+   * @param offset the offset of the start point in <code>pts</code>.\n+   */\n   public void setCurve(Point2D[] pts, int offset)\n   {\n-    setCurve(pts[offset].getX(), pts[offset++].getY(),\n-             pts[offset].getX(), pts[offset++].getY(),\n-             pts[offset].getX(), pts[offset++].getY());\n+    setCurve(pts[offset].getX(), pts[offset].getY(),\n+             pts[offset + 1].getX(), pts[offset + 1].getY(),\n+             pts[offset + 2].getX(), pts[offset + 2].getY());\n   }\n \n \n@@ -188,20 +241,86 @@ public void setCurve(QuadCurve2D c)\n   }\n \n \n+  /**\n+   * Calculates the squared flatness of a quadratic curve, directly\n+   * specifying each coordinate value. The flatness is the distance of\n+   * the control point to the line between start and end point.\n+   *\n+   * <p><img src=\"doc-files/QuadCurve2D-4.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing that illustrates the flatness\" />\n+   *\n+   * <p>In the above drawing, the straight line connecting start point\n+   * P1 and end point P2 is depicted in gray.  The result will be the\n+   * the square of the distance between C and the gray line, i.e.\n+   * the squared length of the red line.\n+   *\n+   * @param x1 the <i>x</i> coordinate of the start point P1.\n+   * @param y1 the <i>y</i> coordinate of the start point P1.\n+   * @param cx the <i>x</i> coordinate of the control point C.\n+   * @param cy the <i>y</i> coordinate of the control point C.\n+   * @param x2 the <i>x</i> coordinate of the end point P2.\n+   * @param y2 the <i>y</i> coordinate of the end point P2.\n+   */\n   public static double getFlatnessSq(double x1, double y1, double cx,\n                                      double cy, double x2, double y2)\n   {\n     return Line2D.ptSegDistSq(x1, y1, x2, y2, cx, cy);\n   }\n \n \n+  /**\n+   * Calculates the flatness of a quadratic curve, directly specifying\n+   * each coordinate value. The flatness is the distance of the\n+   * control point to the line between start and end point.\n+   *\n+   * <p><img src=\"doc-files/QuadCurve2D-4.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing that illustrates the flatness\" />\n+   *\n+   * <p>In the above drawing, the straight line connecting start point\n+   * P1 and end point P2 is depicted in gray.  The result will be the\n+   * the distance between C and the gray line, i.e. the length of\n+   * the red line.\n+   *\n+   * @param x1 the <i>x</i> coordinate of the start point P1.\n+   * @param y1 the <i>y</i> coordinate of the start point P1.\n+   * @param cx the <i>x</i> coordinate of the control point C.\n+   * @param cy the <i>y</i> coordinate of the control point C.\n+   * @param x2 the <i>x</i> coordinate of the end point P2.\n+   * @param y2 the <i>y</i> coordinate of the end point P2.\n+   */\n   public static double getFlatness(double x1, double y1, double cx, double cy,\n                                    double x2, double y2)\n   {\n     return Line2D.ptSegDist(x1, y1, x2, y2, cx, cy);\n   }\n \n \n+  /**\n+   * Calculates the squared flatness of a quadratic curve, specifying\n+   * the coordinate values in an array. The flatness is the distance\n+   * of the control point to the line between start and end point.\n+   *\n+   * <p><img src=\"doc-files/QuadCurve2D-4.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing that illustrates the flatness\" />\n+   *\n+   * <p>In the above drawing, the straight line connecting start point\n+   * P1 and end point P2 is depicted in gray.  The result will be the\n+   * the square of the distance between C and the gray line, i.e.\n+   * the squared length of the red line.\n+   *\n+   * @param coords an array containing the coordinate values.  The\n+   * <i>x</i> coordinate of the start point P1 is located at\n+   * <code>coords[offset]</code>, its <i>y</i> coordinate at\n+   * <code>coords[offset + 1]</code>.  The <i>x</i> coordinate of the\n+   * control point C is located at <code>coords[offset + 2]</code>,\n+   * its <i>y</i> coordinate at <code>coords[offset + 3]</code>. The\n+   * <i>x</i> coordinate of the end point P2 is located at\n+   * <code>coords[offset + 4]</code>, its <i>y</i> coordinate at\n+   * <code>coords[offset + 5]</code>.\n+   *\n+   * @param offset the offset of the first coordinate value in\n+   * <code>coords</code>.\n+   */\n   public static double getFlatnessSq(double[] coords, int offset)\n   {\n     return Line2D.ptSegDistSq(coords[offset], coords[offset + 1],\n@@ -210,6 +329,32 @@ public static double getFlatnessSq(double[] coords, int offset)\n   }\n \n \n+  /**\n+   * Calculates the flatness of a quadratic curve, specifying the\n+   * coordinate values in an array. The flatness is the distance of\n+   * the control point to the line between start and end point.\n+   *\n+   * <p><img src=\"doc-files/QuadCurve2D-4.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing that illustrates the flatness\" />\n+   *\n+   * <p>In the above drawing, the straight line connecting start point\n+   * P1 and end point P2 is depicted in gray.  The result will be the\n+   * the the distance between C and the gray line, i.e.  the length of\n+   * the red line.\n+   *\n+   * @param coords an array containing the coordinate values.  The\n+   * <i>x</i> coordinate of the start point P1 is located at\n+   * <code>coords[offset]</code>, its <i>y</i> coordinate at\n+   * <code>coords[offset + 1]</code>.  The <i>x</i> coordinate of the\n+   * control point C is located at <code>coords[offset + 2]</code>,\n+   * its <i>y</i> coordinate at <code>coords[offset + 3]</code>. The\n+   * <i>x</i> coordinate of the end point P2 is located at\n+   * <code>coords[offset + 4]</code>, its <i>y</i> coordinate at\n+   * <code>coords[offset + 5]</code>.\n+   *\n+   * @param offset the offset of the first coordinate value in\n+   * <code>coords</code>.\n+   */\n   public static double getFlatness(double[] coords, int offset)\n   {\n     return Line2D.ptSegDist(coords[offset], coords[offset + 1],\n@@ -218,6 +363,19 @@ public static double getFlatness(double[] coords, int offset)\n   }\n \n \n+  /**\n+   * Calculates the squared flatness of this curve. The flatness is\n+   * the distance of the control point to the line between start and\n+   * end point.\n+   *\n+   * <p><img src=\"doc-files/QuadCurve2D-4.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing that illustrates the flatness\" />\n+   *\n+   * <p>In the above drawing, the straight line connecting start point\n+   * P1 and end point P2 is depicted in gray.  The result will be the\n+   * the square of the distance between C and the gray line, i.e. the\n+   * squared length of the red line.\n+   */\n   public double getFlatnessSq()\n   {\n     return Line2D.ptSegDistSq(getX1(), getY1(),\n@@ -226,6 +384,19 @@ public double getFlatnessSq()\n   }\n \n \n+  /**\n+   * Calculates the flatness of this curve. The flatness is the\n+   * distance of the control point to the line between start and end\n+   * point.\n+   *\n+   * <p><img src=\"doc-files/QuadCurve2D-4.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing that illustrates the flatness\" />\n+   *\n+   * <p>In the above drawing, the straight line connecting start point\n+   * P1 and end point P2 is depicted in gray.  The result will be the\n+   * the distance between C and the gray line, i.e.  the length of the\n+   * red line.\n+   */\n   public double getFlatness()\n   {\n     return Line2D.ptSegDist(getX1(), getY1(),\n@@ -417,13 +588,33 @@ public static int solveQuadratic(double[] eqn, double[] res)\n   }\n \n \n+  /**\n+   * Determines whether a point lies inside the area that is bounded\n+   * by the curve and the straight line connecting its end points.\n+   *\n+   * <p><img src=\"doc-files/QuadCurve2D-5.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing of the area spanned by the curve\" />\n+   *\n+   * <p>The above drawing illustrates in which area points are\n+   * considered &#x201c;contained&#x201d; in a QuadCurve2D.\n+   */\n   public boolean contains(double x, double y)\n   {\n     // XXX Implement.\n     throw new Error(\"not implemented\");\n   }\n \n \n+  /**\n+   * Determines whether a point lies inside the area that is bounded\n+   * by the curve and the straight line connecting its end points.\n+   *\n+   * <p><img src=\"doc-files/QuadCurve2D-5.png\" width=\"350\" height=\"180\"\n+   * alt=\"A drawing of the area spanned by the curve\" />\n+   *\n+   * <p>The above drawing illustrates in which area points are\n+   * considered &#x201c;contained&#x201d; in a QuadCurve2D.\n+   */\n   public boolean contains(Point2D p)\n   {\n     return contains(p.getX(), p.getY());\n@@ -563,8 +754,7 @@ public PathIterator getPathIterator(AffineTransform at, double flatness)\n \n \n   /**\n-   * Creates a new curve with the same contents as\n-   * this one.\n+   * Creates a new curve with the same contents as this one.\n    *\n    * @return the clone.\n    */"}, {"sha": "1784509be61ad1db86eeb147e09f7ff45bafadd6", "filename": "libjava/java/awt/geom/doc-files/CubicCurve2D-1.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FCubicCurve2D-1.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FCubicCurve2D-1.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FCubicCurve2D-1.png?ref=45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c"}, {"sha": "1ddae9fc84f2e566ae6a8a1b1cc7fc8bfc21d688", "filename": "libjava/java/awt/geom/doc-files/CubicCurve2D-2.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FCubicCurve2D-2.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FCubicCurve2D-2.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FCubicCurve2D-2.png?ref=45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c"}, {"sha": "b200dad37a8e5608ed5914361cee047abef8ad56", "filename": "libjava/java/awt/geom/doc-files/CubicCurve2D-3.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FCubicCurve2D-3.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FCubicCurve2D-3.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FCubicCurve2D-3.png?ref=45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c"}, {"sha": "e57ffdc5cf0e8d0504ad40efa236c1a5a465a2c4", "filename": "libjava/java/awt/geom/doc-files/CubicCurve2D-4.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FCubicCurve2D-4.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FCubicCurve2D-4.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FCubicCurve2D-4.png?ref=45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c"}, {"sha": "701ab138f0b10c5d6bc22b96233e1ed06f84811d", "filename": "libjava/java/awt/geom/doc-files/CubicCurve2D-5.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FCubicCurve2D-5.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FCubicCurve2D-5.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FCubicCurve2D-5.png?ref=45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c"}, {"sha": "835c0643b29df677a50c9277cbc01b23877bfb79", "filename": "libjava/java/awt/geom/doc-files/QuadCurve2D-4.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FQuadCurve2D-4.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FQuadCurve2D-4.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FQuadCurve2D-4.png?ref=45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c"}, {"sha": "72110cd5a624d72d3a99692620316eba45c10f00", "filename": "libjava/java/awt/geom/doc-files/QuadCurve2D-5.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FQuadCurve2D-5.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FQuadCurve2D-5.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2Fdoc-files%2FQuadCurve2D-5.png?ref=45967a8a28379fe5fbaa4b284eacc2db0dcf7c1c"}]}