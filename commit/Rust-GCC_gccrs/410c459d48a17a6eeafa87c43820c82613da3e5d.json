{"sha": "410c459d48a17a6eeafa87c43820c82613da3e5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEwYzQ1OWQ0OGExN2E2ZWVhZmE4N2M0MzgyMGM4MjYxM2RhM2U1ZA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-12-05T17:20:49Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-12-05T17:20:49Z"}, "message": "predicates.md (logical_const_operand): Split out of logical_operand.\n\n2005-12-05  Paolo Bonzini  <bonzini@gnu.org>\n\n        * config/rs6000/predicates.md (logical_const_operand): Split\n        out of logical_operand.\n        (logical_operand): Use it.\n        * config/rs6000/rs6000.md (cmp -> xor peephole2): Use\n        logical_const_operand.\n\nFrom-SVN: r108065", "tree": {"sha": "1bfada345814516c5eac0889b2b7e1ecdd0b7e2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bfada345814516c5eac0889b2b7e1ecdd0b7e2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/410c459d48a17a6eeafa87c43820c82613da3e5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410c459d48a17a6eeafa87c43820c82613da3e5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410c459d48a17a6eeafa87c43820c82613da3e5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410c459d48a17a6eeafa87c43820c82613da3e5d/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "afe6d70550d31308858263b7847731292bf06260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe6d70550d31308858263b7847731292bf06260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afe6d70550d31308858263b7847731292bf06260"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "d443ba6a98948073fe054a85bc5eca420f613ace", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410c459d48a17a6eeafa87c43820c82613da3e5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410c459d48a17a6eeafa87c43820c82613da3e5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=410c459d48a17a6eeafa87c43820c82613da3e5d", "patch": "@@ -1,3 +1,11 @@\n+2005-12-05  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * config/rs6000/predicates.md (logical_const_operand): Split\n+        out of logical_operand.\n+        (logical_operand): Use it.\n+        * config/rs6000/rs6000.md (cmp -> xor peephole2): Use\n+        logical_const_operand.\n+\n 2005-12-05  Jan Beulich  <jbeulich@novell.com>\n \n \t* config/i386/i386.c (enum ix86_builtins): Remove IX86_BUILTIN_CMPNEPS"}, {"sha": "7baa401aedc4d059f1fbe0a2717ae3e4668159b2", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410c459d48a17a6eeafa87c43820c82613da3e5d/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410c459d48a17a6eeafa87c43820c82613da3e5d/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=410c459d48a17a6eeafa87c43820c82613da3e5d", "patch": "@@ -407,16 +407,13 @@\n        (match_test \"!CONST_OK_FOR_LETTER_P (INTVAL (op), 'I')\n \t\t    && !CONST_OK_FOR_LETTER_P (INTVAL (op), 'L')\")))\n \n-;; Return 1 if the operand is a non-special register or a constant that\n-;; can be used as the operand of an OR or XOR.\n-(define_predicate \"logical_operand\"\n-  (match_code \"reg,subreg,const_int,const_double\")\n+;; Return 1 if the operand is a constant that can be used as the operand\n+;; of an OR or XOR.\n+(define_predicate \"logical_const_operand\"\n+  (match_code \"const_int,const_double\")\n {\n   HOST_WIDE_INT opl, oph;\n \n-  if (gpc_reg_operand (op, mode))\n-    return 1;\n-\n   if (GET_CODE (op) == CONST_INT)\n     {\n       opl = INTVAL (op) & GET_MODE_MASK (mode);\n@@ -441,6 +438,12 @@\n \t  || (opl & ~ (unsigned HOST_WIDE_INT) 0xffff0000) == 0);\n })\n \n+;; Return 1 if the operand is a non-special register or a constant that\n+;; can be used as the operand of an OR or XOR.\n+(define_predicate \"logical_operand\"\n+  (ior (match_operand 0 \"gpc_reg_operand\")\n+       (match_operand 0 \"logical_const_operand\")))\n+\n ;; Return 1 if op is a constant that is not a logical operand, but could\n ;; be split into one.\n (define_predicate \"non_logical_cint_operand\""}, {"sha": "17d8ef660ce6e3b990f08acbfa7273892b380e34", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410c459d48a17a6eeafa87c43820c82613da3e5d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410c459d48a17a6eeafa87c43820c82613da3e5d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=410c459d48a17a6eeafa87c43820c82613da3e5d", "patch": "@@ -11283,10 +11283,10 @@\n \n (define_peephole2\n   [(set (match_operand:SI 0 \"register_operand\")\n-        (match_operand:SI 1 \"logical_operand\" \"\"))\n+        (match_operand:SI 1 \"logical_const_operand\" \"\"))\n    (set (match_dup 0) (match_operator:SI 3 \"boolean_or_operator\"\n \t\t       [(match_dup 0)\n-\t\t\t(match_operand:SI 2 \"logical_operand\" \"\")]))\n+\t\t\t(match_operand:SI 2 \"logical_const_operand\" \"\")]))\n    (set (match_operand:CC 4 \"cc_reg_operand\" \"\")\n         (compare:CC (match_operand:SI 5 \"gpc_reg_operand\" \"\")\n                     (match_dup 0)))"}]}