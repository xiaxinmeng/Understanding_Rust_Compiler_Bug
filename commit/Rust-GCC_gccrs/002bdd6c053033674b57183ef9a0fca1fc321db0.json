{"sha": "002bdd6c053033674b57183ef9a0fca1fc321db0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAyYmRkNmMwNTMwMzM2NzRiNTcxODNlZjlhMGZjYTFmYzMyMWRiMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-24T23:16:12Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-24T23:16:12Z"}, "message": "(expand_call): Check for variable-sized return value in proper place.\n\nFrom-SVN: r7974", "tree": {"sha": "0ce2d2e4d790994c16e96311b3fed09c1fc4670a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ce2d2e4d790994c16e96311b3fed09c1fc4670a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/002bdd6c053033674b57183ef9a0fca1fc321db0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002bdd6c053033674b57183ef9a0fca1fc321db0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/002bdd6c053033674b57183ef9a0fca1fc321db0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002bdd6c053033674b57183ef9a0fca1fc321db0/comments", "author": null, "committer": null, "parents": [{"sha": "7063dcbeb705d334e62355cfa1332d2d0c582338", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7063dcbeb705d334e62355cfa1332d2d0c582338", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7063dcbeb705d334e62355cfa1332d2d0c582338"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "22ab4841464cfe919dd598778259bc2a1f4faafe", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002bdd6c053033674b57183ef9a0fca1fc321db0/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002bdd6c053033674b57183ef9a0fca1fc321db0/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=002bdd6c053033674b57183ef9a0fca1fc321db0", "patch": "@@ -667,9 +667,6 @@ expand_call (exp, target, ignore)\n       {\n \tstruct_value_size = int_size_in_bytes (TREE_TYPE (exp));\n \n-\tif (struct_value_size < 0)\n-\t  abort ();\n-\n \tif (target && GET_CODE (target) == MEM)\n \t  structure_value_addr = XEXP (target, 0);\n \telse\n@@ -680,6 +677,9 @@ expand_call (exp, target, ignore)\n \t       specified.  If we were to allocate space on the stack here,\n \t       we would have no way of knowing when to free it.  */\n \n+\t    if (struct_value_size < 0)\n+\t      abort ();\n+\n \t    structure_value_addr\n \t      = XEXP (assign_stack_temp (BLKmode, struct_value_size, 1), 0);\n \t    target = 0;"}]}