{"sha": "e3d6e7405227b25651958b6e5a6b06ed45048943", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNkNmU3NDA1MjI3YjI1NjUxOTU4YjZlNWE2YjA2ZWQ0NTA0ODk0Mw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2004-02-17T05:15:05Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2004-02-17T05:15:05Z"}, "message": "Index: ChangeLog\n2004-02-16  Geoffrey Keating  <geoffk@apple.com>\n\n\t* doc/md.texi (Insn Canonicalizations): Document left-chaining\n\tin associative operators.\n\t* rtlanal.c (commutative_operand_precedence): Create some new\n\tvariables.  Prefer a commutative operand on the left, then\n\tbinary expressions, then NEG and NOT.\n\nIndex: testsuite/ChangeLog\n2004-02-16  Geoffrey Keating  <geoffk@apple.com>\n\n\t* gcc.c-torture/compile/20040216-1.c: New.\n\nFrom-SVN: r77945", "tree": {"sha": "6dfb44863c0022501e008c5e034fc8b9d78d044f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dfb44863c0022501e008c5e034fc8b9d78d044f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3d6e7405227b25651958b6e5a6b06ed45048943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3d6e7405227b25651958b6e5a6b06ed45048943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3d6e7405227b25651958b6e5a6b06ed45048943", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3d6e7405227b25651958b6e5a6b06ed45048943/comments", "author": null, "committer": null, "parents": [{"sha": "ef2a223fbdeea1853e00c0cbf98f3d812e054924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2a223fbdeea1853e00c0cbf98f3d812e054924", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef2a223fbdeea1853e00c0cbf98f3d812e054924"}], "stats": {"total": 72, "additions": 55, "deletions": 17}, "files": [{"sha": "c4f3ec66da908882eae0691bdc4ede1681a1ffbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d6e7405227b25651958b6e5a6b06ed45048943/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d6e7405227b25651958b6e5a6b06ed45048943/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3d6e7405227b25651958b6e5a6b06ed45048943", "patch": "@@ -1,3 +1,11 @@\n+2004-02-16  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* doc/md.texi (Insn Canonicalizations): Document left-chaining\n+\tin associative operators.\n+\t* rtlanal.c (commutative_operand_precedence): Create some new\n+\tvariables.  Prefer a commutative operand on the left, then\n+\tbinary expressions, then NEG and NOT.\n+\n 2004-02-16  Matthias Klose  <doko@debian.org>\n \n         * config/t-slibgcc-elf-ver: Define SHLIB_NAME and SHLIB_SONAME"}, {"sha": "b3cb5df04f907727e77ee8bdd1370d27b25f6b91", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d6e7405227b25651958b6e5a6b06ed45048943/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d6e7405227b25651958b6e5a6b06ed45048943/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=e3d6e7405227b25651958b6e5a6b06ed45048943", "patch": "@@ -3835,6 +3835,15 @@ second operand.  If a machine only supports a constant as the second\n operand, only patterns that match a constant in the second operand need\n be supplied.\n \n+@item\n+For associative operators, a sequence of operators will always chain\n+to the left; for instance, only the left operand of an integer @code{plus}\n+can itself be a @code{plus}.  @code{and}, @code{ior}, @code{xor},\n+@code{plus}, @code{mult}, @code{smin}, @code{smax}, @code{umin}, and\n+@code{umax} are associative when applied to integers, and sometimes to\n+floating-point.\n+\n+@item\n @cindex @code{neg}, canonicalization of\n @cindex @code{not}, canonicalization of\n @cindex @code{mult}, canonicalization of"}, {"sha": "82a112c984602f507fba522a51c2d8f73b0c8278", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d6e7405227b25651958b6e5a6b06ed45048943/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d6e7405227b25651958b6e5a6b06ed45048943/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=e3d6e7405227b25651958b6e5a6b06ed45048943", "patch": "@@ -3029,35 +3029,48 @@ regno_use_in (unsigned int regno, rtx x)\n int\n commutative_operand_precedence (rtx op)\n {\n+  enum rtx_code code = GET_CODE (op);\n+  char class;\n+  \n   /* Constants always come the second operand.  Prefer \"nice\" constants.  */\n-  if (GET_CODE (op) == CONST_INT)\n+  if (code == CONST_INT)\n     return -7;\n-  if (GET_CODE (op) == CONST_DOUBLE)\n+  if (code == CONST_DOUBLE)\n     return -6;\n   op = avoid_constant_pool_reference (op);\n-  if (GET_CODE (op) == CONST_INT)\n+  if (code == CONST_INT)\n     return -5;\n-  if (GET_CODE (op) == CONST_DOUBLE)\n+  if (code == CONST_DOUBLE)\n     return -4;\n   if (CONSTANT_P (op))\n     return -3;\n \n   /* SUBREGs of objects should come second.  */\n-  if (GET_CODE (op) == SUBREG\n+  if (code == SUBREG\n       && GET_RTX_CLASS (GET_CODE (SUBREG_REG (op))) == 'o')\n     return -2;\n \n-  /* If only one operand is a `neg', `not',\n-    `mult', `plus', or `minus' expression, it will be the first\n-    operand.  */\n-  if (GET_CODE (op) == NEG || GET_CODE (op) == NOT\n-      || GET_CODE (op) == MULT || GET_CODE (op) == PLUS\n-      || GET_CODE (op) == MINUS)\n+  class = GET_RTX_CLASS (code);\n+\n+  /* Prefer operands that are themselves commutative to be first.\n+     This helps to make things linear.  In particular,\n+     (and (and (reg) (reg)) (not (reg))) is canonical.  */\n+  if (class == 'c')\n+    return 4;\n+\n+  /* If only one operand is a binary expression, it will be the first\n+     operand.  In particular,  (plus (minus (reg) (reg)) (neg (reg)))\n+     is canonical, although it will usually be further simplified.  */\n+  if (class == '2')\n     return 2;\n+  \n+  /* Then prefer NEG and NOT.  */\n+  if (code == NEG || code == NOT)\n+    return 1;\n \n   /* Complex expressions should be the first, so decrease priority\n      of objects.  */\n-  if (GET_RTX_CLASS (GET_CODE (op)) == 'o')\n+  if (GET_RTX_CLASS (code) == 'o')\n     return -1;\n   return 0;\n }"}, {"sha": "90b56780ef38254b664c6ce67f72671d3483ab6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d6e7405227b25651958b6e5a6b06ed45048943/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d6e7405227b25651958b6e5a6b06ed45048943/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3d6e7405227b25651958b6e5a6b06ed45048943", "patch": "@@ -1,10 +1,14 @@\n+2004-02-16  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.c-torture/compile/20040216-1.c: New.\n+\n 2004-02-16  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n-\t* g++.dg/tc1/dr101.C, g++.dg/tc1/dr135.C, g++.dg/tc1/dr142.C,\r\n-\tg++.dg/tc1/dr152.C, g++.dg/tc1/dr159.C, g++.dg/tc1/dr161.C,\r\n-\tg++.dg/tc1/dr166.C, g++.dg/tc1/dr176.C, g++.dg/tc1/dr188.C,\r\n-\tg++.dg/tc1/dr193.C, g++.dg/tc1/dr194.C, g++.dg/tc1/dr217.C,\r\n-\tg++.dg/tc1/dr48.C, g++.dg/tc1/dr56.C, g++.dg/tc1/dr68.C,\r\n+\t* g++.dg/tc1/dr101.C, g++.dg/tc1/dr135.C, g++.dg/tc1/dr142.C,\n+\tg++.dg/tc1/dr152.C, g++.dg/tc1/dr159.C, g++.dg/tc1/dr161.C,\n+\tg++.dg/tc1/dr166.C, g++.dg/tc1/dr176.C, g++.dg/tc1/dr188.C,\n+\tg++.dg/tc1/dr193.C, g++.dg/tc1/dr194.C, g++.dg/tc1/dr217.C,\n+\tg++.dg/tc1/dr48.C, g++.dg/tc1/dr56.C, g++.dg/tc1/dr68.C,\n \tg++.dg/tc1/dr76.C, g++.dg/tc1/dr80.C, g++.dg/tc1/dr94.C: New tests.\n \n 2004-02-16  Eric Botcazou  <ebotcazou@libertysurf.fr>"}, {"sha": "12d5e5ea7051cb7ebb23d35936f87990bdedce6e", "filename": "gcc/testsuite/gcc.c-torture/compile/20040216-1.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d6e7405227b25651958b6e5a6b06ed45048943/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040216-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d6e7405227b25651958b6e5a6b06ed45048943/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040216-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040216-1.c?ref=e3d6e7405227b25651958b6e5a6b06ed45048943", "patch": "@@ -0,0 +1,4 @@\n+int foo (int a, int b, int c, int d)\n+{\n+  return ~a & ~b & ~c & ~d;\n+}"}]}