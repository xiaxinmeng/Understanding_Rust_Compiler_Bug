{"sha": "0b6e3127e8a003ad01b9cfb6896dee14c637701b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI2ZTMxMjdlOGEwMDNhZDAxYjljZmI2ODk2ZGVlMTRjNjM3NzAxYg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2019-02-14T17:47:49Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2019-02-14T17:47:49Z"}, "message": "Provide __start_minfo/__stop_minfo for linkers that don't (PR d/87864)\n\n\tlibphobos:\n\tPR d/87864\n\t* configure.ac (DRTSTUFF_SPEC): New variable.\n\tSubstitute it.\n\t* libdruntime/m4/druntime/os.m4 (DRUNTIME_OS_MINFO_BRACKETING):\n\tNew automake conditional.\n\t* configure: Regenerate.\n\t* libdruntime/gcc/drtstuff.c: New file.\n\t* libdruntime/Makefile.am [!DRUNTIME_OS_MINFO_BRACKETING]\n\t(DRTSTUFF, toolexeclib_DATA): New variables.\n\t(gcc/drtbegin.lo, gcc/drtend.lo): New rules.\n\t(libgdruntime_la_LDFLAGS): Use -Wc instead of -Xcompiler.\n\tAdd -dstartfiles -B../src -Bgcc.\n\t(libgdruntime_la_DEPENDENCIES): New variable.\n\t(unittest_static_LDFLAGS): Use -Wc instead of -Xcompiler.\n\t(libgdruntime_t_la_LDFLAGS): Likewise.\n\t(unittest_LDFLAGS): Likewise.\n\t* src/Makefile.am (libgphobos_la_LDFLAGS): Use -Wc instead of\n\t-Xcompiler.\n\tAdd -dstartfiles -B../libdruntime/gcc.\n\t(unittest_static_LDFLAGS): Use -Wc instead of -Xcompiler.\n\t(libgphobos_t_la_LDFLAGS): Likewise.\n\t(unittest_LDFLAGS): Likewise.\n\t* libdruntime/Makefile.in, src/Makefile.in: Regenerate.\n\t* Makefile.in, testsuite/Makefile.in: Regenerate.\n\t* libdruntime/rt/sections_elf_shared.d (Minfo_Bracketing): Don't\n\tassert.\n\t* libdruntime/gcc/config.d.in (Minfo_Bracketing): Remove.\n\t* src/drtstuff.spec: New file.\n\t* src/libgphobos.spec.in (DRTSTUFF_SPEC): Substitute.\n\t(*lib): Only pass SPEC_PHOBOS_DEPS without -debuglib, -defaultlib,\n\t-nophoboslib.\n\t* testsuite/testsuite_flags.in <--gdcldflags> (GDCLDFLAGS): Add\n\t-B${BUILD_DIR}/libdruntime/gcc.\n\n\tgcc/d:\n\tPR d/87864\n\t* lang.opt (dstartfiles): New option.\n\t* d-spec.cc (need_spec): New variable.\n\t(lang_specific_driver) <OPT_dstartfiles>: Enable need_spec.\n\t(lang_specific_pre_link): Also load libgphobos.spec if need_spec.\n\n\tgcc/testsuite:\n\tPR d/87864\n\t* lib/gdc.exp (gdc_link_flags): Add path to drtbegin.o/drtend.o if\n\tpresent.\n\nFrom-SVN: r268886", "tree": {"sha": "2ab850aa2d7c3b37ace2470ebaae57ae9a799012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ab850aa2d7c3b37ace2470ebaae57ae9a799012"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b6e3127e8a003ad01b9cfb6896dee14c637701b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6e3127e8a003ad01b9cfb6896dee14c637701b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b6e3127e8a003ad01b9cfb6896dee14c637701b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6e3127e8a003ad01b9cfb6896dee14c637701b/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "323694e9a2c535d56a81bcfc84fb0fd5b6155b34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/323694e9a2c535d56a81bcfc84fb0fd5b6155b34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/323694e9a2c535d56a81bcfc84fb0fd5b6155b34"}], "stats": {"total": 329, "additions": 283, "deletions": 46}, "files": [{"sha": "6eb2ac488e66a3b631f3f5c4949cf1f131bd86fa", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -1,3 +1,11 @@\n+2019-02-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR d/87864\n+\t* lang.opt (dstartfiles): New option.\n+\t* d-spec.cc (need_spec): New variable.\n+\t(lang_specific_driver) <OPT_dstartfiles>: Enable need_spec.\n+\t(lang_specific_pre_link): Also load libgphobos.spec if need_spec.\n+\n 2019-01-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/89042"}, {"sha": "3d491f56fa7c8e7fb832d53fddf789d7dc2dc2e2", "filename": "gcc/d/d-spec.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/gcc%2Fd%2Fd-spec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/gcc%2Fd%2Fd-spec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-spec.cc?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -72,6 +72,9 @@ static phobos_action phobos_library = PHOBOS_DEFAULT;\n    standard libraries.  */\n static bool need_phobos = true;\n \n+/* If true, do load libgphobos.spec even if not needed otherwise.  */\n+static bool need_spec = false;\n+\n void\n lang_specific_driver (cl_decoded_option **in_decoded_options,\n \t\t      unsigned int *in_decoded_options_count,\n@@ -144,6 +147,10 @@ lang_specific_driver (cl_decoded_option **in_decoded_options,\n \n       switch (decoded_options[i].opt_index)\n \t{\n+\tcase OPT_dstartfiles:\n+\t  need_spec = true;\n+\t  break;\n+\n \tcase OPT_nostdlib:\n \tcase OPT_nodefaultlibs:\n \t  phobos_library = PHOBOS_NOLINK;\n@@ -491,7 +498,7 @@ lang_specific_driver (cl_decoded_option **in_decoded_options,\n int\n lang_specific_pre_link (void)\n {\n-  if (phobos_library != PHOBOS_NOLINK && need_phobos)\n+  if ((phobos_library != PHOBOS_NOLINK && need_phobos) || need_spec)\n     do_spec (\"%:include(libgphobos.spec)\");\n \n   return 0;"}, {"sha": "523f73c90de06bea8c58da015fb465753692a937", "filename": "gcc/d/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/gcc%2Fd%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/gcc%2Fd%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Flang.opt?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -162,6 +162,10 @@ defaultlib=\n Driver Joined\n Default library to use instead of phobos.\n \n+dstartfiles\n+Driver\n+Do link the standard D startup files in the compilation.\n+\n -verbose\n D Alias(v)\n "}, {"sha": "bec48f2ab245ee814b2b35d0b8b1869111ef981a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -1,3 +1,9 @@\n+2019-02-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR d/87864\n+\t* lib/gdc.exp (gdc_link_flags): Add path to drtbegin.o/drtend.o if\n+\tpresent.\n+\n 2019-02-14  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR target/88850"}, {"sha": "1bc45b9206103e25230e1b424441a1449649353f", "filename": "gcc/testsuite/lib/gdc.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/gcc%2Ftestsuite%2Flib%2Fgdc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/gcc%2Ftestsuite%2Flib%2Fgdc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgdc.exp?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -120,6 +120,10 @@ proc gdc_link_flags { paths } {\n     if { $gccpath != \"\" } {\n         # Path to libgphobos.spec.\n         append flags \"-B${gccpath}/libphobos/src \"\n+        # Path to drtbegin.o/drtend.o.\n+        if { [file exists \"${gccpath}/libphobos/libdruntime/gcc/drtbegin.o\"] } {\n+            append flags \"-B${gccpath}/libphobos/libdruntime/gcc \"\n+        }\n \n         if { [file exists \"${gccpath}/libphobos/src/.libs/libgphobos.a\"] \\\n              || [file exists \"${gccpath}/libphobos/src/.libs/libgphobos.${shlib_ext}\"] } {"}, {"sha": "4efd97efaaff0a620749cdb957ece23faa6d1d24", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -1,3 +1,39 @@\n+2019-02-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR d/87864\n+\t* configure.ac (DRTSTUFF_SPEC): New variable.\n+\tSubstitute it.\n+\t* libdruntime/m4/druntime/os.m4 (DRUNTIME_OS_MINFO_BRACKETING):\n+\tNew automake conditional.\n+\t* configure: Regenerate.\n+\t* libdruntime/gcc/drtstuff.c: New file.\n+\t* libdruntime/Makefile.am [!DRUNTIME_OS_MINFO_BRACKETING]\n+\t(DRTSTUFF, toolexeclib_DATA): New variables.\n+\t(gcc/drtbegin.lo, gcc/drtend.lo): New rules.\n+\t(libgdruntime_la_LDFLAGS): Use -Wc instead of -Xcompiler.\n+\tAdd -dstartfiles -B../src -Bgcc.\n+\t(libgdruntime_la_DEPENDENCIES): New variable.\n+\t(unittest_static_LDFLAGS): Use -Wc instead of -Xcompiler.\n+\t(libgdruntime_t_la_LDFLAGS): Likewise.\n+\t(unittest_LDFLAGS): Likewise.\n+\t* src/Makefile.am (libgphobos_la_LDFLAGS): Use -Wc instead of\n+\t-Xcompiler.\n+\tAdd -dstartfiles -B../libdruntime/gcc.\n+\t(unittest_static_LDFLAGS): Use -Wc instead of -Xcompiler.\n+\t(libgphobos_t_la_LDFLAGS): Likewise.\n+\t(unittest_LDFLAGS): Likewise.\n+\t* libdruntime/Makefile.in, src/Makefile.in: Regenerate.\n+\t* Makefile.in, testsuite/Makefile.in: Regenerate.\n+\t* libdruntime/rt/sections_elf_shared.d (Minfo_Bracketing): Don't\n+\tassert.\n+\t* libdruntime/gcc/config.d.in (Minfo_Bracketing): Remove.\n+\t* src/drtstuff.spec: New file.\n+\t* src/libgphobos.spec.in (DRTSTUFF_SPEC): Substitute.\n+\t(*lib): Only pass SPEC_PHOBOS_DEPS without -debuglib, -defaultlib,\n+\t-nophoboslib.\n+\t* testsuite/testsuite_flags.in <--gdcldflags> (GDCLDFLAGS): Add\n+\t-B${BUILD_DIR}/libdruntime/gcc.\n+\n 2019-02-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* libdruntime/core/runtime.d (defaultTraceHandler): Give"}, {"sha": "4741c287a44cc1634c5147f00182c55140d2cc5b", "filename": "libphobos/configure", "status": "modified", "additions": 74, "deletions": 12, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -3,7 +3,7 @@\n # Generated by GNU Autoconf 2.69 for package-unused version-unused.\n #\n #\n-# Copyright (C) 1992-2019 Free Software Foundation, Inc.\n+# Copyright (C) 1992-1996, 1998-2012 Free Software Foundation, Inc.\n #\n #\n # This configure script is free software; the Free Software Foundation\n@@ -650,6 +650,8 @@ LIBATOMIC\n DCFG_HAVE_LIBATOMIC\n DCFG_HAVE_64BIT_ATOMICS\n DCFG_HAVE_ATOMIC_BUILTINS\n+DRUNTIME_OS_MINFO_BRACKETING_FALSE\n+DRUNTIME_OS_MINFO_BRACKETING_TRUE\n DCFG_MINFO_BRACKETING\n DRUNTIME_OS_ARM_EABI_UNWINDER_FALSE\n DRUNTIME_OS_ARM_EABI_UNWINDER_TRUE\n@@ -801,7 +803,7 @@ PACKAGE_TARNAME\n PACKAGE_NAME\n PATH_SEPARATOR\n SHELL'\n-ac_subst_files=''\n+ac_subst_files='DRTSTUFF_SPEC'\n ac_user_opts='\n enable_option_checking\n enable_multilib\n@@ -1568,7 +1570,7 @@ if $ac_init_version; then\n package-unused configure version-unused\n generated by GNU Autoconf 2.69\n \n-Copyright (C) 2012-2019 Free Software Foundation, Inc.\n+Copyright (C) 2012 Free Software Foundation, Inc.\n This configure script is free software; the Free Software Foundation\n gives unlimited permission to copy, distribute and modify it.\n _ACEOF\n@@ -11496,7 +11498,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11499 \"configure\"\n+#line 11501 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11602,7 +11604,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11605 \"configure\"\n+#line 11607 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14119,6 +14121,14 @@ fi\n rm -f core conftest.err conftest.$ac_objext \\\n     conftest$ac_exeext conftest.$ac_ext\n \n+   if test \"$DCFG_MINFO_BRACKETING\" = \"true\"; then\n+  DRUNTIME_OS_MINFO_BRACKETING_TRUE=\n+  DRUNTIME_OS_MINFO_BRACKETING_FALSE='#'\n+else\n+  DRUNTIME_OS_MINFO_BRACKETING_TRUE='#'\n+  DRUNTIME_OS_MINFO_BRACKETING_FALSE=\n+fi\n+\n   ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n@@ -14856,6 +14866,14 @@ $as_echo \"$version_specific_libs\" >&6; }\n \n \n \n+# Add drtbegin.o/drtend.o to startfile/endfile specs in libgphobos.spec\n+if test \"$DCFG_MINFO_BRACKETING\" = \"false\"; then\n+    DRTSTUFF_SPEC=$srcdir/src/drtstuff.spec\n+else\n+    DRTSTUFF_SPEC=/dev/null\n+fi\n+\n+\n # Add dependencies for libgphobos.spec file\n SPEC_PHOBOS_DEPS=\"$LIBS\"\n \n@@ -15095,6 +15113,10 @@ if test -z \"${DRUNTIME_OS_ARM_EABI_UNWINDER_TRUE}\" && test -z \"${DRUNTIME_OS_ARM\n   as_fn_error $? \"conditional \\\"DRUNTIME_OS_ARM_EABI_UNWINDER\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${DRUNTIME_OS_MINFO_BRACKETING_TRUE}\" && test -z \"${DRUNTIME_OS_MINFO_BRACKETING_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"DRUNTIME_OS_MINFO_BRACKETING\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${DRUNTIME_ZLIB_SYSTEM_TRUE}\" && test -z \"${DRUNTIME_ZLIB_SYSTEM_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"DRUNTIME_ZLIB_SYSTEM\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n@@ -15566,7 +15588,7 @@ package-unused config.status version-unused\n configured by $0, generated by GNU Autoconf 2.69,\n   with options \\\\\"\\$ac_cs_config\\\\\"\n \n-Copyright (C) 2012-2019 Free Software Foundation, Inc.\n+Copyright (C) 2012 Free Software Foundation, Inc.\n This config.status script is free software; the Free Software Foundation\n gives unlimited permission to copy, distribute and modify it.\"\n \n@@ -16099,7 +16121,24 @@ ac_tmp=$tmp\n # This happens for instance with `./config.status config.h'.\n if test -n \"$CONFIG_FILES\"; then\n \n-\n+if $AWK 'BEGIN { getline <\"/dev/null\" }' </dev/null 2>/dev/null; then\n+  ac_cs_awk_getline=:\n+  ac_cs_awk_pipe_init=\n+  ac_cs_awk_read_file='\n+      while ((getline aline < (F[key])) > 0)\n+\tprint(aline)\n+      close(F[key])'\n+  ac_cs_awk_pipe_fini=\n+else\n+  ac_cs_awk_getline=false\n+  ac_cs_awk_pipe_init=\"print \\\"cat <<'|#_!!_#|' &&\\\"\"\n+  ac_cs_awk_read_file='\n+      print \"|#_!!_#|\"\n+      print \"cat \" F[key] \" &&\"\n+      '$ac_cs_awk_pipe_init\n+  # The final `:' finishes the AND list.\n+  ac_cs_awk_pipe_fini='END { print \"|#_!!_#|\"; print \":\" }'\n+fi\n ac_cr=`echo X | tr X '\\015'`\n # On cygwin, bash can eat \\r inside `` if the user requested igncr.\n # But we know of no other shell where ac_cr would be empty at this\n@@ -16117,6 +16156,17 @@ fi\n echo 'BEGIN {' >\"$ac_tmp/subs1.awk\" &&\n _ACEOF\n \n+# Create commands to substitute file output variables.\n+{\n+  echo \"cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1\" &&\n+  echo 'cat >>\"\\$ac_tmp/subs1.awk\" <<\\\\_ACAWK &&' &&\n+  echo \"$ac_subst_files\" | sed 's/.*/F[\"&\"]=\"$&\"/' &&\n+  echo \"_ACAWK\" &&\n+  echo \"_ACEOF\"\n+} >conf$$files.sh &&\n+. ./conf$$files.sh ||\n+  as_fn_error $? \"could not make $CONFIG_STATUS\" \"$LINENO\" 5\n+rm -f conf$$files.sh\n \n {\n   echo \"cat >conf$$subs.awk <<_ACEOF\" &&\n@@ -16193,7 +16243,7 @@ _ACAWK\n cat >>\"\\$ac_tmp/subs1.awk\" <<_ACAWK &&\n   for (key in S) S_is_set[key] = 1\n   FS = \"\u0007\"\n-\n+  \\$ac_cs_awk_pipe_init\n }\n {\n   line = $ 0\n@@ -16211,10 +16261,16 @@ cat >>\"\\$ac_tmp/subs1.awk\" <<_ACAWK &&\n     } else\n       len += 1 + keylen\n   }\n-\n+  if (nfields == 3 && !substed) {\n+    key = field[2]\n+    if (F[key] != \"\" && line ~ /^[\t ]*@.*@[\t ]*$/) {\n+      \\$ac_cs_awk_read_file\n+      next\n+    }\n+  }\n   print line\n }\n-\n+\\$ac_cs_awk_pipe_fini\n _ACAWK\n _ACEOF\n cat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\n@@ -16561,7 +16617,12 @@ s&@INSTALL@&$ac_INSTALL&;t t\n s&@MKDIR_P@&$ac_MKDIR_P&;t t\n $ac_datarootdir_hack\n \"\n-eval sed \\\"\\$ac_sed_extra\\\" \"$ac_file_inputs\" | $AWK -f \"$ac_tmp/subs.awk\" \\\n+eval sed \\\"\\$ac_sed_extra\\\" \"$ac_file_inputs\" |\n+if $ac_cs_awk_getline; then\n+  $AWK -f \"$ac_tmp/subs.awk\"\n+else\n+  $AWK -f \"$ac_tmp/subs.awk\" | $SHELL\n+fi \\\n   >$ac_tmp/out || as_fn_error $? \"could not create $ac_file\" \"$LINENO\" 5\n \n test -z \"$ac_datarootdir_hack$ac_datarootdir_seen\" &&\n@@ -16674,7 +16735,8 @@ esac ;;\n # Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n # NOTE: Changes made to this file will be lost: look at ltmain.sh.\n #\n-#   Copyright (C) 1996-2019 Free Software Foundation, Inc.\n+#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n+#                 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n #   Written by Gordon Matzigkeit, 1996\n #\n #   This file is part of GNU Libtool."}, {"sha": "3701a241b8e359644815ce1c3f371a70497012b3", "filename": "libphobos/configure.ac", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure.ac?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -143,6 +143,14 @@ DRUNTIME_LIBRARIES_DLOPEN\n DRUNTIME_LIBRARIES_ZLIB\n DRUNTIME_INSTALL_DIRECTORIES\n \n+# Add drtbegin.o/drtend.o to startfile/endfile specs in libgphobos.spec\n+if test \"$DCFG_MINFO_BRACKETING\" = \"false\"; then\n+    DRTSTUFF_SPEC=$srcdir/src/drtstuff.spec\n+else\n+    DRTSTUFF_SPEC=/dev/null\n+fi\n+AC_SUBST_FILE(DRTSTUFF_SPEC)\n+\n # Add dependencies for libgphobos.spec file\n SPEC_PHOBOS_DEPS=\"$LIBS\"\n AC_SUBST(SPEC_PHOBOS_DEPS)"}, {"sha": "eca6c4a56fd3db7603a03f4e2b0a3c24b2d2bc9c", "filename": "libphobos/libdruntime/Makefile.am", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Flibdruntime%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Flibdruntime%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.am?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -74,6 +74,20 @@ endif\n if DRUNTIME_OS_SOLARIS\n     ALL_DRUNTIME_COMPILE_DSOURCES += $(DRUNTIME_DSOURCES_SOLARIS)\n endif\n+\n+# Provide __start_minfo, __stop_minfo if linker doesn't.\n+if !DRUNTIME_OS_MINFO_BRACKETING\n+    DRTSTUFF = gcc/drtbegin.o gcc/drtend.o\n+\n+    toolexeclib_DATA = $(DRTSTUFF)\n+\n+gcc/drtbegin.o: gcc/drtstuff.c\n+\t$(COMPILE) -DDRT_BEGIN -c -o $@ $<\n+\n+gcc/drtend.o: gcc/drtstuff.c\n+\t$(COMPILE) -DDRT_END -c -o $@ $<\n+endif\n+\n # Generated by configure\n ALL_DRUNTIME_COMPILE_DSOURCES += $(DRUNTIME_DSOURCES_GENERATED)\n \n@@ -95,14 +109,16 @@ endif\n toolexeclib_LTLIBRARIES = libgdruntime.la\n libgdruntime_la_SOURCES = $(ALL_DRUNTIME_SOURCES)\n libgdruntime_la_LIBTOOLFLAGS =\n-libgdruntime_la_LDFLAGS = -Xcompiler -nophoboslib -version-info $(libtool_VERSION)\n+libgdruntime_la_LDFLAGS = -Wc,-nophoboslib,-dstartfiles,-B../src,-Bgcc \\\n+    -version-info $(libtool_VERSION)\n libgdruntime_la_LIBADD = $(LIBATOMIC) $(LIBBACKTRACE)\n+libgdruntime_la_DEPENDENCIES = $(DRTSTUFF)\n \n # For static unittest, link objects directly\n unittest_static_SOURCES = ../testsuite/test_runner.d $(DRUNTIME_CSOURCES) \\\n     $(DRUNTIME_SSOURCES)\n unittest_static_LIBTOOLFLAGS =\n-unittest_static_LDFLAGS = -Xcompiler -nophoboslib\n+unittest_static_LDFLAGS = -Wc,-nophoboslib\n unittest_static_LDADD = $(DRUNTIME_TEST_OBJECTS) $(LIBATOMIC) $(LIBBACKTRACE)\n EXTRA_unittest_static_DEPENDENCIES = $(DRUNTIME_TEST_OBJECTS)\n \n@@ -111,14 +127,14 @@ libgdruntime_t_la_SOURCES = $(DRUNTIME_CSOURCES) $(DRUNTIME_SSOURCES)\n libgdruntime_t_la_LIBTOOLFLAGS =\n # Automake by default does not generate shared libs for non-installed\n # libraries. Use -rpath to force shared lib generation.\n-libgdruntime_t_la_LDFLAGS = -Xcompiler -nophoboslib -rpath /foo -shared\n+libgdruntime_t_la_LDFLAGS = -Wc,-nophoboslib -rpath /foo -shared\n libgdruntime_t_la_LIBADD = $(DRUNTIME_TEST_LOBJECTS) $(LIBATOMIC) $(LIBBACKTRACE)\n EXTRA_libgdruntime_t_la_DEPENDENCIES = $(DRUNTIME_TEST_LOBJECTS)\n \n # For unittest\n unittest_SOURCES = ../testsuite/test_runner.d\n unittest_LIBTOOLFLAGS =\n-unittest_LDFLAGS = -Xcompiler -nophoboslib\n+unittest_LDFLAGS = -Wc,-nophoboslib\n unittest_LDADD = libgdruntime_t.la\n \n # Extra install and clean rules."}, {"sha": "02331af95bd02c309d78bb6e2494f1583d5ede0a", "filename": "libphobos/libdruntime/Makefile.in", "status": "modified", "additions": 55, "deletions": 16, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Flibdruntime%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Flibdruntime%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.in?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -31,6 +31,7 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n+\n VPATH = @srcdir@\n am__is_gnu_make = { \\\n   if test -z '$(MAKELEVEL)'; then \\\n@@ -172,11 +173,10 @@ am__uninstall_files_from_dir = { \\\n     || { echo \" ( cd '$$dir' && rm -f\" $$files \")\"; \\\n          $(am__cd) \"$$dir\" && rm -f $$files; }; \\\n   }\n-am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\"\n+am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\" \\\n+\t\"$(DESTDIR)$(toolexeclibdir)\"\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n am__DEPENDENCIES_1 =\n-libgdruntime_la_DEPENDENCIES = $(am__DEPENDENCIES_1) \\\n-\t$(am__DEPENDENCIES_1)\n am__dirstamp = $(am__leading_dot)dirstamp\n am__objects_1 = core/atomic.lo core/attribute.lo core/bitop.lo \\\n \tcore/checkedint.lo core/cpuid.lo core/demangle.lo \\\n@@ -1052,6 +1052,7 @@ am__can_run_installinfo = \\\n     n|no|NO) false;; \\\n     *) (install-info --version) >/dev/null 2>&1;; \\\n   esac\n+DATA = $(toolexeclib_DATA)\n am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)\n # Read a list of newline-separated strings from the standard input,\n # and print each of them once, without duplicates.  Input order is\n@@ -1278,13 +1279,18 @@ ALL_DRUNTIME_INSTALL_DSOURCES = $(DRUNTIME_DSOURCES) \\\n \n \n # Setup source files depending on configure\n+\n # Generated by configure\n ALL_DRUNTIME_COMPILE_DSOURCES = $(DRUNTIME_DSOURCES) $(am__append_1) \\\n \t$(am__append_2) $(am__append_3) $(am__append_4) \\\n \t$(am__append_5) $(am__append_6) $(am__append_7) \\\n \t$(am__append_8) $(am__append_9) $(am__append_10) \\\n \t$(am__append_11) $(am__append_12) \\\n \t$(DRUNTIME_DSOURCES_GENERATED)\n+\n+# Provide __start_minfo, __stop_minfo if linker doesn't.\n+@DRUNTIME_OS_MINFO_BRACKETING_FALSE@DRTSTUFF = gcc/drtbegin.o gcc/drtend.o\n+@DRUNTIME_OS_MINFO_BRACKETING_FALSE@toolexeclib_DATA = $(DRTSTUFF)\n ALL_DRUNTIME_SOURCES = $(ALL_DRUNTIME_COMPILE_DSOURCES) $(DRUNTIME_CSOURCES) \\\n \t$(DRUNTIME_SSOURCES)\n \n@@ -1294,15 +1300,18 @@ DRUNTIME_TEST_OBJECTS = $(ALL_DRUNTIME_COMPILE_DSOURCES:.d=.t.o)\n toolexeclib_LTLIBRARIES = libgdruntime.la\n libgdruntime_la_SOURCES = $(ALL_DRUNTIME_SOURCES)\n libgdruntime_la_LIBTOOLFLAGS = \n-libgdruntime_la_LDFLAGS = -Xcompiler -nophoboslib -version-info $(libtool_VERSION)\n+libgdruntime_la_LDFLAGS = -Wc,-nophoboslib,-dstartfiles,-B../src,-Bgcc \\\n+    -version-info $(libtool_VERSION)\n+\n libgdruntime_la_LIBADD = $(LIBATOMIC) $(LIBBACKTRACE)\n+libgdruntime_la_DEPENDENCIES = $(DRTSTUFF)\n \n # For static unittest, link objects directly\n unittest_static_SOURCES = ../testsuite/test_runner.d $(DRUNTIME_CSOURCES) \\\n     $(DRUNTIME_SSOURCES)\n \n unittest_static_LIBTOOLFLAGS = \n-unittest_static_LDFLAGS = -Xcompiler -nophoboslib\n+unittest_static_LDFLAGS = -Wc,-nophoboslib\n unittest_static_LDADD = $(DRUNTIME_TEST_OBJECTS) $(LIBATOMIC) $(LIBBACKTRACE)\n EXTRA_unittest_static_DEPENDENCIES = $(DRUNTIME_TEST_OBJECTS)\n \n@@ -1311,14 +1320,14 @@ libgdruntime_t_la_SOURCES = $(DRUNTIME_CSOURCES) $(DRUNTIME_SSOURCES)\n libgdruntime_t_la_LIBTOOLFLAGS = \n # Automake by default does not generate shared libs for non-installed\n # libraries. Use -rpath to force shared lib generation.\n-libgdruntime_t_la_LDFLAGS = -Xcompiler -nophoboslib -rpath /foo -shared\n+libgdruntime_t_la_LDFLAGS = -Wc,-nophoboslib -rpath /foo -shared\n libgdruntime_t_la_LIBADD = $(DRUNTIME_TEST_LOBJECTS) $(LIBATOMIC) $(LIBBACKTRACE)\n EXTRA_libgdruntime_t_la_DEPENDENCIES = $(DRUNTIME_TEST_LOBJECTS)\n \n # For unittest\n unittest_SOURCES = ../testsuite/test_runner.d\n unittest_LIBTOOLFLAGS = \n-unittest_LDFLAGS = -Xcompiler -nophoboslib\n+unittest_LDFLAGS = -Wc,-nophoboslib\n unittest_LDADD = libgdruntime_t.la\n DRUNTIME_DSOURCES_GENERATED = gcc/config.d gcc/libbacktrace.d\n # Source file definitions. Boring stuff, auto-generated with\n@@ -2454,6 +2463,27 @@ clean-libtool:\n \t-rm -rf rt/typeinfo/.libs rt/typeinfo/_libs\n \t-rm -rf rt/util/.libs rt/util/_libs\n \t-rm -rf rt/util/container/.libs rt/util/container/_libs\n+install-toolexeclibDATA: $(toolexeclib_DATA)\n+\t@$(NORMAL_INSTALL)\n+\t@list='$(toolexeclib_DATA)'; test -n \"$(toolexeclibdir)\" || list=; \\\n+\tif test -n \"$$list\"; then \\\n+\t  echo \" $(MKDIR_P) '$(DESTDIR)$(toolexeclibdir)'\"; \\\n+\t  $(MKDIR_P) \"$(DESTDIR)$(toolexeclibdir)\" || exit 1; \\\n+\tfi; \\\n+\tfor p in $$list; do \\\n+\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n+\t  echo \"$$d$$p\"; \\\n+\tdone | $(am__base_list) | \\\n+\twhile read files; do \\\n+\t  echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(toolexeclibdir)'\"; \\\n+\t  $(INSTALL_DATA) $$files \"$(DESTDIR)$(toolexeclibdir)\" || exit $$?; \\\n+\tdone\n+\n+uninstall-toolexeclibDATA:\n+\t@$(NORMAL_UNINSTALL)\n+\t@list='$(toolexeclib_DATA)'; test -n \"$(toolexeclibdir)\" || list=; \\\n+\tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n+\tdir='$(DESTDIR)$(toolexeclibdir)'; $(am__uninstall_files_from_dir)\n \n ID: $(am__tagged_files)\n \t$(am__define_uniq_tagged_files); mkid -fID $$unique\n@@ -2509,9 +2539,9 @@ distclean-tags:\n check-am: all-am\n \t$(MAKE) $(AM_MAKEFLAGS) $(check_LTLIBRARIES) $(check_PROGRAMS)\n check: check-am\n-all-am: Makefile $(LTLIBRARIES)\n+all-am: Makefile $(LTLIBRARIES) $(DATA)\n installdirs:\n-\tfor dir in \"$(DESTDIR)$(toolexeclibdir)\"; do \\\n+\tfor dir in \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(toolexeclibdir)\"; do \\\n \t  test -z \"$$dir\" || $(MKDIR_P) \"$$dir\"; \\\n \tdone\n install: install-am\n@@ -2614,7 +2644,8 @@ install-dvi: install-dvi-am\n \n install-dvi-am:\n \n-install-exec-am: install-toolexeclibLTLIBRARIES\n+install-exec-am: install-toolexeclibDATA \\\n+\tinstall-toolexeclibLTLIBRARIES\n \n install-html: install-html-am\n \n@@ -2653,7 +2684,8 @@ ps: ps-am\n \n ps-am:\n \n-uninstall-am: uninstall-toolexeclibLTLIBRARIES\n+uninstall-am: uninstall-toolexeclibDATA \\\n+\tuninstall-toolexeclibLTLIBRARIES\n \n .MAKE: check-am install-am install-strip\n \n@@ -2667,11 +2699,12 @@ uninstall-am: uninstall-toolexeclibLTLIBRARIES\n \tinstall-exec install-exec-am install-html install-html-am \\\n \tinstall-info install-info-am install-man install-pdf \\\n \tinstall-pdf-am install-ps install-ps-am install-strip \\\n-\tinstall-toolexeclibLTLIBRARIES installcheck installcheck-am \\\n-\tinstalldirs maintainer-clean maintainer-clean-generic \\\n-\tmostlyclean mostlyclean-compile mostlyclean-generic \\\n-\tmostlyclean-libtool pdf pdf-am ps ps-am tags tags-am uninstall \\\n-\tuninstall-am uninstall-toolexeclibLTLIBRARIES\n+\tinstall-toolexeclibDATA install-toolexeclibLTLIBRARIES \\\n+\tinstallcheck installcheck-am installdirs maintainer-clean \\\n+\tmaintainer-clean-generic mostlyclean mostlyclean-compile \\\n+\tmostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \\\n+\ttags tags-am uninstall uninstall-am uninstall-toolexeclibDATA \\\n+\tuninstall-toolexeclibLTLIBRARIES\n \n .PRECIOUS: Makefile\n \n@@ -2695,6 +2728,12 @@ uninstall-am: uninstall-toolexeclibLTLIBRARIES\n %.t.o : %.t.lo\n \t@:\n \n+@DRUNTIME_OS_MINFO_BRACKETING_FALSE@gcc/drtbegin.o: gcc/drtstuff.c\n+@DRUNTIME_OS_MINFO_BRACKETING_FALSE@\t$(COMPILE) -DDRT_BEGIN -c -o $@ $<\n+\n+@DRUNTIME_OS_MINFO_BRACKETING_FALSE@gcc/drtend.o: gcc/drtstuff.c\n+@DRUNTIME_OS_MINFO_BRACKETING_FALSE@\t$(COMPILE) -DDRT_END -c -o $@ $<\n+\n # Extra install and clean rules.\n # This does not delete the .libs/.t.o files, but deleting\n # the .lo is good enough to rerun the rules"}, {"sha": "1b5d5d9b69248ba6f6689ca7384a9f81fdd0d718", "filename": "libphobos/libdruntime/gcc/config.d.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Flibdruntime%2Fgcc%2Fconfig.d.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Flibdruntime%2Fgcc%2Fconfig.d.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fconfig.d.in?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -35,9 +35,6 @@ enum ThreadModel\n \n enum ThreadModel GNU_Thread_Model = ThreadModel.@DCFG_THREAD_MODEL@;\n \n-// Whether the linker provides __start_minfo and __stop_minfo symbols\n-enum Minfo_Bracketing = @DCFG_MINFO_BRACKETING@;\n-\n // Whether target has support for builtin atomics.\n enum GNU_Have_Atomics = @DCFG_HAVE_ATOMIC_BUILTINS@;\n "}, {"sha": "40edda3bffb2b15cea5a74616779f26b335a943a", "filename": "libphobos/libdruntime/gcc/drtstuff.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Flibdruntime%2Fgcc%2Fdrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Flibdruntime%2Fgcc%2Fdrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fdrtstuff.c?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -0,0 +1,39 @@\n+/* Provide minfo section bracketing for D executables and shared libraries\n+   when the linker doesn't provide it.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Avoid interference with targets without support for named sections.  */\n+#ifdef __ELF__\n+\n+#ifdef DRT_BEGIN\n+void *__start_minfo[]\n+__attribute__((used, section(\"minfo\"), aligned(sizeof(void *)))) = { };\n+#endif\n+\n+#ifdef DRT_END\n+void *__stop_minfo[]\n+__attribute__((used, section(\"minfo\"), aligned(sizeof(void *)))) = { };\n+#endif\n+\n+#endif /* __ELF__ */"}, {"sha": "d4e1ff076992d6d38f890ee2266e084e74c53cec", "filename": "libphobos/libdruntime/rt/sections_elf_shared.d", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Flibdruntime%2Frt%2Fsections_elf_shared.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Flibdruntime%2Frt%2Fsections_elf_shared.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fsections_elf_shared.d?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -335,7 +335,6 @@ else\n ///////////////////////////////////////////////////////////////////////////////\n \n import gcc.config;\n-static assert(Minfo_Bracketing, \"Can't use _d_dso_registry interface\");\n \n /*\n  * This data structure is generated by the compiler, and then passed to"}, {"sha": "92a2ba5cdf82d65d62199a2f6bae96e8049889e7", "filename": "libphobos/m4/druntime/os.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Fm4%2Fdruntime%2Fos.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Fm4%2Fdruntime%2Fos.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fm4%2Fdruntime%2Fos.m4?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -180,5 +180,6 @@ AC_DEFUN([DRUNTIME_OS_MINFO_BRACKETING],\n     [AC_MSG_RESULT([no])\n      DCFG_MINFO_BRACKETING=false])\n   AC_SUBST(DCFG_MINFO_BRACKETING)\n+  AM_CONDITIONAL([DRUNTIME_OS_MINFO_BRACKETING], [test \"$DCFG_MINFO_BRACKETING\" = \"true\"])\n   AC_LANG_POP([C])\n ])"}, {"sha": "51fd11e5c6cde6192719adde044d4c8310f30153", "filename": "libphobos/src/Makefile.am", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMakefile.am?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -57,30 +57,31 @@ toolexeclib_DATA = libgphobos.spec\n toolexeclib_LTLIBRARIES = libgphobos.la\n libgphobos_la_SOURCES = $(ALL_PHOBOS_SOURCES) $(ZLIB_SRC)\n libgphobos_la_LIBTOOLFLAGS =\n-libgphobos_la_LDFLAGS = -Xcompiler -nophoboslib -version-info $(libtool_VERSION)\n+libgphobos_la_LDFLAGS = -Wc,-nophoboslib,-dstartfiles,-B../libdruntime/gcc \\\n+    -version-info $(libtool_VERSION)\n libgphobos_la_LIBADD = ../libdruntime/libgdruntime.la\n libgphobos_la_DEPENDENCIES = libgphobos.spec\n \n # For static unittest, link objects directly\n unittest_static_SOURCES = ../testsuite/test_runner.d $(ZLIB_SRC)\n unittest_static_LIBTOOLFLAGS =\n-unittest_static_LDFLAGS = -Xcompiler -nophoboslib -static-libtool-libs\n+unittest_static_LDFLAGS = -Wc,-nophoboslib -static-libtool-libs\n unittest_static_LDADD = $(PHOBOS_TEST_OBJECTS) \\\n     ../libdruntime/libgdruntime.la\n EXTRA_unittest_static_DEPENDENCIES = $(PHOBOS_TEST_OBJECTS)\n \n # For unittest with dynamic library\n libgphobos_t_la_SOURCES = $(ZLIB_SRC)\n libgphobos_t_la_LIBTOOLFLAGS =\n-libgphobos_t_la_LDFLAGS = -Xcompiler -nophoboslib -rpath /foo -shared\n+libgphobos_t_la_LDFLAGS = -Wc,-nophoboslib -rpath /foo -shared\n libgphobos_t_la_LIBADD = $(PHOBOS_TEST_LOBJECTS) \\\n     ../libdruntime/libgdruntime.la\n EXTRA_libgphobos_t_la_DEPENDENCIES = $(PHOBOS_TEST_LOBJECTS)\n \n # For unittest\n unittest_SOURCES = ../testsuite/test_runner.d\n unittest_LIBTOOLFLAGS =\n-unittest_LDFLAGS = -Xcompiler -nophoboslib -shared\n+unittest_LDFLAGS = -Wc,-nophoboslib -shared\n unittest_LDADD = libgphobos_t.la ../libdruntime/libgdruntime.la\n \n # Extra install and clean rules."}, {"sha": "3dffa6f6093e3ed78f2def486f4a94e0610cadf5", "filename": "libphobos/src/Makefile.in", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMakefile.in?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -696,14 +696,16 @@ toolexeclib_DATA = libgphobos.spec\n toolexeclib_LTLIBRARIES = libgphobos.la\n libgphobos_la_SOURCES = $(ALL_PHOBOS_SOURCES) $(ZLIB_SRC)\n libgphobos_la_LIBTOOLFLAGS = \n-libgphobos_la_LDFLAGS = -Xcompiler -nophoboslib -version-info $(libtool_VERSION)\n+libgphobos_la_LDFLAGS = -Wc,-nophoboslib,-dstartfiles,-B../libdruntime/gcc \\\n+    -version-info $(libtool_VERSION)\n+\n libgphobos_la_LIBADD = ../libdruntime/libgdruntime.la\n libgphobos_la_DEPENDENCIES = libgphobos.spec\n \n # For static unittest, link objects directly\n unittest_static_SOURCES = ../testsuite/test_runner.d $(ZLIB_SRC)\n unittest_static_LIBTOOLFLAGS = \n-unittest_static_LDFLAGS = -Xcompiler -nophoboslib -static-libtool-libs\n+unittest_static_LDFLAGS = -Wc,-nophoboslib -static-libtool-libs\n unittest_static_LDADD = $(PHOBOS_TEST_OBJECTS) \\\n     ../libdruntime/libgdruntime.la\n \n@@ -712,7 +714,7 @@ EXTRA_unittest_static_DEPENDENCIES = $(PHOBOS_TEST_OBJECTS)\n # For unittest with dynamic library\n libgphobos_t_la_SOURCES = $(ZLIB_SRC)\n libgphobos_t_la_LIBTOOLFLAGS = \n-libgphobos_t_la_LDFLAGS = -Xcompiler -nophoboslib -rpath /foo -shared\n+libgphobos_t_la_LDFLAGS = -Wc,-nophoboslib -rpath /foo -shared\n libgphobos_t_la_LIBADD = $(PHOBOS_TEST_LOBJECTS) \\\n     ../libdruntime/libgdruntime.la\n \n@@ -721,7 +723,7 @@ EXTRA_libgphobos_t_la_DEPENDENCIES = $(PHOBOS_TEST_LOBJECTS)\n # For unittest\n unittest_SOURCES = ../testsuite/test_runner.d\n unittest_LIBTOOLFLAGS = \n-unittest_LDFLAGS = -Xcompiler -nophoboslib -shared\n+unittest_LDFLAGS = -Wc,-nophoboslib -shared\n unittest_LDADD = libgphobos_t.la ../libdruntime/libgdruntime.la\n \n # Zlib sources when not using system libz"}, {"sha": "951a91b0e9c858a4149f6b66577c0688ef3d5d18", "filename": "libphobos/src/drtstuff.spec", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Fsrc%2Fdrtstuff.spec", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Fsrc%2Fdrtstuff.spec", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fdrtstuff.spec?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -0,0 +1,5 @@\n+%rename startfile startfile_orig\n+*startfile: %(startfile_orig) drtbegin.o%s\n+\n+%rename endfile endfile_orig\n+*endfile: %(endfile_orig) drtend.o%s"}, {"sha": "ff9389696f36b05a9ac6ce327725dd8322377c5a", "filename": "libphobos/src/libgphobos.spec.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Fsrc%2Flibgphobos.spec.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Fsrc%2Flibgphobos.spec.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Flibgphobos.spec.in?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -4,5 +4,7 @@\n # order.\n #\n \n+@DRTSTUFF_SPEC@\n+\n %rename lib liborig_gdc_renamed\n-*lib: @SPEC_PHOBOS_DEPS@ %(liborig_gdc_renamed)\n+*lib: %{debuglib|defaultlib|nophoboslib: ; :@SPEC_PHOBOS_DEPS@} %(liborig_gdc_renamed)"}, {"sha": "0326401e459c37cf8db479ee73bafc1b9d4237b1", "filename": "libphobos/testsuite/testsuite_flags.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Ftestsuite%2Ftestsuite_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6e3127e8a003ad01b9cfb6896dee14c637701b/libphobos%2Ftestsuite%2Ftestsuite_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2Ftestsuite_flags.in?ref=0b6e3127e8a003ad01b9cfb6896dee14c637701b", "patch": "@@ -40,6 +40,7 @@ case ${query} in\n       ;;\n     --gdcldflags)\n       GDCLDFLAGS=\"-B${BUILD_DIR}/src\n+                  -B${BUILD_DIR}/libdruntime/gcc\n                   -L${BUILD_DIR}/libdruntime/.libs\n                   -L${BUILD_DIR}/src/.libs\"\n       echo ${GDCLDFLAGS}"}]}