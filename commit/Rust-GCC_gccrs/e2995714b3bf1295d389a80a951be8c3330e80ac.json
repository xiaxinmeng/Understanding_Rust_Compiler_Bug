{"sha": "e2995714b3bf1295d389a80a951be8c3330e80ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI5OTU3MTRiM2JmMTI5NWQzODlhODBhOTUxYmU4YzMzMzBlODBhYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-13T20:30:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-13T20:30:54Z"}, "message": "Also test -std=c++0x mode with 'make check-c++' at top level\n\nAlso test -std=c++0x mode with 'make check-c++' at top level\n\t* Makefile.in (check-gcc-c++0x): New.\n\t(check-c++): Depend on it.\ngcc/\n\t* Makefile.in ($(lang_checks_parallelized)): Allow --tool_opts.\ngcc/cp/\n\t* Make-lang.in (check-c++0x): New.\ngcc/testsuite/\n\t* lib/g++.exp (${tool}_option_help, ${tool}_option_proc): Remove.\n\t* lib/lto.exp (lto_prune_warns): Prune warning about -std=c++0x\n\twhen compiling C files.\n\nFrom-SVN: r176250", "tree": {"sha": "9bc6a8a6d63eb7140bb959626a5979beccd64a30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bc6a8a6d63eb7140bb959626a5979beccd64a30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2995714b3bf1295d389a80a951be8c3330e80ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2995714b3bf1295d389a80a951be8c3330e80ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2995714b3bf1295d389a80a951be8c3330e80ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2995714b3bf1295d389a80a951be8c3330e80ac/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4dfe3ad52b122093cde02739950a8c7077b817d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dfe3ad52b122093cde02739950a8c7077b817d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dfe3ad52b122093cde02739950a8c7077b817d8"}], "stats": {"total": 97, "additions": 59, "deletions": 38}, "files": [{"sha": "ee64c35de89da2961350620889812dc1ae349c22", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -1,3 +1,8 @@\n+2011-07-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* Makefile.in (check-gcc-c++0x): New.\n+\t(check-c++): Depend on it.\n+\n 2011-07-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/39150"}, {"sha": "506d26e544c97fb519e73d41122713b6457c4595", "filename": "Makefile.in", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -40152,7 +40152,12 @@ check-gcc-c++:\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(HOST_EXPORTS) \\\n \t(cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) check-c++);\n-check-c++: check-gcc-c++ check-target-libstdc++-v3\n+check-gcc-c++0x:\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(HOST_EXPORTS) \\\n+\t(cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) check-c++0x);\n+check-c++: check-gcc-c++ check-gcc-c++0x check-target-libstdc++-v3\n \n .PHONY: check-gcc-fortran check-fortran\n check-gcc-fortran:"}, {"sha": "5182bbc8dde493a574546db90af61c7d39fff977", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -1,3 +1,7 @@\n+2011-07-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* Makefile.in ($(lang_checks_parallelized)): Allow --tool_opts.\n+\n 2011-07-13  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/spu.c (spu_init_libfuncs): Install __clrsbdi2."}, {"sha": "cd4f7820ce6ec4e262730e85226954ea90adc9db", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -5018,7 +5018,7 @@ check_p_subdirs=$(wordlist 1,$(words $(check_$*_parallelize)),$(check_p_numbers)\n \n # For parallelized check-% targets, this decides whether parallelization\n # is desirable (if -jN is used and RUNTESTFLAGS doesn't contain anything\n-# but optionally --target_board argument).  If it is desirable,\n+# but optional --target_board or --tool_opts arguments).  If it is desirable,\n # recursive make is run with check-parallel-$lang{,1,2,3,4,5} etc. goals,\n # which can be executed in parallel, as they are run in separate directories.\n # check-parallel-$lang{1,2,3,4,5} etc. goals invoke runtest with the longest\n@@ -5035,7 +5035,7 @@ check_p_subdirs=$(wordlist 1,$(words $(check_$*_parallelize)),$(check_p_numbers)\n # to lang_checks_parallelized variable and define check_$lang_parallelize\n # variable (see above check_gcc_parallelize description).\n $(lang_checks_parallelized): check-% : site.exp\n-\t@if [ -z \"$(filter-out --target_board=%, $(RUNTESTFLAGS))\" ] \\\n+\t@if [ -z \"$(filter-out --target_board=%,$(filter-out --tool_opts%,$(RUNTESTFLAGS)))\" ] \\\n \t    && [ \"$(filter -j, $(MFLAGS))\" = \"-j\" ]; then \\\n \t  $(MAKE) TESTSUITEDIR=\"$(TESTSUITEDIR)\" RUNTESTFLAGS=\"$(RUNTESTFLAGS)\" \\\n \t    check-parallel-$* \\"}, {"sha": "8e45b2ee196ddb2ad69ec8b211ae5b535202569d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -1,3 +1,7 @@\n+2011-07-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* Make-lang.in (check-c++0x): New.\n+\n 2011-07-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* typeck2.c (split_nonconstant_init_1): Pass the initializer directly,"}, {"sha": "b9251a44099385d43930a7e78f80e9d90c5e6e83", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -149,6 +149,10 @@ c++.srcman: doc/g++.1\n # check targets.  However, our DejaGNU framework requires 'check-g++' as its\n # entry point.  We feed the former to the latter here.\n check-c++ : check-g++\n+# Run the testsute in C++0x mode.\n+check-c++0x:\n+\t$(MAKE) RUNTESTFLAGS=\"$(RUNTESTFLAGS) --tool_opts=-std=gnu++0x\" \\\n+\t  TESTSUITEDIR=\"$(TESTSUITEDIR).c++0x\" check-g++\n check-c++-subtargets : check-g++-subtargets\n # List of targets that can use the generic check- rule and its // variant.\n lang_checks += check-g++"}, {"sha": "eebf940c8a2481ec9c0a838b0a1a16971ce34782", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -1,3 +1,18 @@\n+2011-07-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* lib/g++.exp (${tool}_option_help, ${tool}_option_proc): Remove.\n+\t* lib/lto.exp (lto_prune_warns): Prune warning about -std=c++0x\n+\twhen compiling C files.\n+\t* g++.dg/debug/dwarf2/lineno-simple1.C: Avoid constexpr ctor.\n+\t* g++.dg/debug/dwarf2/pr44641.C: Avoid constexpr ctor.\n+\t* g++.dg/ext/utf-dflt.C: Specify -std=c++98.\n+\t* g++.dg/lookup/anon2.C: Likewise.\n+\t* g++.dg/tree-ssa/copyprop.C: Likewise.\n+\t* g++.old-deja/g++.jason/rfg27.C: Likewise.\n+\t* g++.dg/init/vector1.C: Ignore narrowing errors.\n+\t* g++.dg/torture/pr35526.C: Likewise.\n+\t* g++.old-deja/g++.ext/arrnew.C: Prune C++0x warning.\n+\n 2011-07-13  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/49296"}, {"sha": "3fcc4f235fc7f64d6ab774e659c264f6f72fc668", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/lineno-simple1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flineno-simple1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flineno-simple1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Flineno-simple1.C?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -2,6 +2,7 @@\n // { dg-options \"-g -O0 -dA\" }\n \n struct C {  // { dg-function-on-line {_ZN1CC[12]Ev} }\n+  int i;\n   virtual void\n   foo() {}  // { dg-function-on-line _ZN1C3fooEv }\n };"}, {"sha": "7b061eb0e6b5d2e446495c0ed643e1392ea89215", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/pr44641.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr44641.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr44641.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr44641.C?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -13,26 +13,27 @@ typedef MisplacedDbg<Arg*> Typedef2;\n typedef MisplacedDbg<Full> Typedef3;\n \n template<typename T> struct Base  {\n+  int i;\n   virtual ~Base() {\n   }\n };\n \n template <>\n struct MisplacedDbg<Full>  // { dg-function-on-line {_ZN12MisplacedDbgI4FullEC[12]Ev} }\n-                           // { dg-function-on-line {_ZN12MisplacedDbgI4FullED0Ev} { target *-*-* } 21 }\n+                           // { dg-function-on-line {_ZN12MisplacedDbgI4FullED0Ev} { target *-*-* } 22 }\n \n     : public Base<int> {\n };\n \n template <class T>\n struct MisplacedDbg<T*>  // { dg-function-on-line {_ZN12MisplacedDbgIP3ArgEC[12]Ev} }\n-                         // { dg-function-on-line {_ZN12MisplacedDbgIP3ArgED0Ev} { target *-*-* } 28 }\n+                         // { dg-function-on-line {_ZN12MisplacedDbgIP3ArgED0Ev} { target *-*-* } 29 }\n     : public Base<int> {\n };\n \n template <class A>\n struct MisplacedDbg  // { dg-function-on-line {_ZN12MisplacedDbgI3ArgEC[12]Ev} }\n-                     // { dg-function-on-line {_ZN12MisplacedDbgI3ArgED0Ev} { target *-*-* } 34 }\n+                     // { dg-function-on-line {_ZN12MisplacedDbgI3ArgED0Ev} { target *-*-* } 35 }\n     : public Base<int> {\n };\n "}, {"sha": "04849bfbf0625e5bc0da862aa61e691abbc5e6b7", "filename": "gcc/testsuite/g++.dg/ext/utf-dflt.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-dflt.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-dflt.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-dflt.C?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -2,7 +2,7 @@\n /* Expected errors for char16_t/char32_t in default std. */\n /* Ensure u and U prefixes are parsed as separate tokens in default std. */\n /* { dg-do compile } */\n-/* { dg-options \"\" } */\n+/* { dg-options \"-std=c++98\" } */\n \n const static char16_t\tc0\t= 'a';\t/* { dg-error \"not name a type\" } */\n const static char32_t\tc1\t= 'a';\t/* { dg-error \"not name a type\" } */"}, {"sha": "f33df2a92faab4c03b31374235a08f092bd9153b", "filename": "gcc/testsuite/g++.dg/init/vector1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvector1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvector1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvector1.C?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -1,6 +1,7 @@\n // PR c++/19263\n // { dg-do run }\n-// { dg-options \"-O2\" }\n+// { dg-options \"-O2 -fpermissive\" }\n+// { dg-prune-output \"narrowing\" }\n \n typedef signed char v8qi __attribute__ ((vector_size (8)));\n "}, {"sha": "4984307e454089b7e837580e2107b1a377a9a351", "filename": "gcc/testsuite/g++.dg/lookup/anon2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon2.C?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"\" }\n+// { dg-options \"-std=c++98\" }\n \n // Make sure we issue a diagnostic if a type with no linkage is used\n // to declare a a variable that has linkage."}, {"sha": "2d745b50eddd16366ade211ace7cfac924ba9b7b", "filename": "gcc/testsuite/g++.dg/torture/pr35526.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr35526.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr35526.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr35526.C?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -1,4 +1,6 @@\n /* { dg-do compile } */\n+// { dg-options \"-fpermissive\" }\n+// { dg-prune-output \"narrowing\" }\n \n extern void *memcpy (void *__dest, __const void *__src, __SIZE_TYPE__  __n);\n "}, {"sha": "b30e5ddc5ba7080ae3b6567d9228f6080f851643", "filename": "gcc/testsuite/g++.dg/tree-ssa/copyprop.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fcopyprop.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fcopyprop.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fcopyprop.C?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -1,7 +1,7 @@\n // PR 39548 verify ssa ICE\n //\n // { dg-do compile { target { lp64 } } }\n-// { dg-options  \"-Wno-error -fno-exceptions -fno-tree-vrp -O2 -fprofile-generate  -finline-limit=500\"  } \n+// { dg-options  \"-Wno-error -fno-exceptions -fno-tree-vrp -O2 -fprofile-generate  -finline-limit=500 -std=c++98\"  }\n //\n \n #include <map>\n@@ -85,7 +85,7 @@ template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     while (__cur != 0)  { _M_delete_node(__cur); }\n   }\n }\n-template<class _Key, class _Tp, class _HashFn = hash<_Key>,     class _EqualKey = equal_to<_Key>, class _Alloc = allocator<_Tp> >   struct hash_map     {\n+template<class _Key, class _Tp, class _HashFn = ::hash<_Key>,     class _EqualKey = equal_to<_Key>, class _Alloc = allocator<_Tp> >   struct hash_map     {\n   typedef hashtable<pair<const _Key, _Tp>,_Key, _HashFn,    _Select1st<pair<const _Key, _Tp> >,    _EqualKey, _Alloc> _Ht;\n   _Ht _M_ht;\n   typedef typename _Ht::key_type key_type;"}, {"sha": "0c37eb1e9fc8b84ba70b7b794ff4b41723a1c6b7", "filename": "gcc/testsuite/g++.old-deja/g++.ext/arrnew.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farrnew.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farrnew.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Farrnew.C?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -2,7 +2,8 @@\n // { dg-options \"\" }\n // PRMS Id: 4992\n \n+// { dg-prune-output \"extended init\" }\n+\n int *f(){\n   return new int[1] = { 1 };   // { dg-error \"lvalue\" \"err\" }\n-  // { dg-warning \"extended init\" \"warn\" { target *-*-* } 6 }\n }"}, {"sha": "a598c341f59e0dbacdd8785eac6d0124f35f93cb", "filename": "gcc/testsuite/g++.old-deja/g++.jason/rfg27.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg27.C?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n-// { dg-options \"-pedantic-errors\" }\n+// { dg-options \"-std=c++98 -pedantic-errors\" }\n // Don't compile this one with -Wno-long-long...\n \n short volatile short var_0_2;              /* { dg-error \"\" } duplicate short */"}, {"sha": "81c4398a4e1a558cb04d95cc9917017d7110b498", "filename": "gcc/testsuite/lib/g++.exp", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -307,28 +307,3 @@ proc g++_target_compile { source dest type options } {\n \n     return $result\n }\n-\n-#\n-# ${tool}_option_help\n-#\n-\n-proc ${tool}_option_help { } {\n-    send_user \" --additional_options,OPTIONS\\t\\tUse OPTIONS to compile the testcase files. OPTIONS should be comma-separated.\\n\"\n-}\n-\n-#\n-# ${tool}_option_proc\n-#\n-\n-proc ${tool}_option_proc { option } {\n-    if [regexp \"^--additional_options,\" $option] {\n-\tglobal gpp_compile_options\n-\tregsub \"--additional_options,\" $option \"\" option\n-\tforeach x [split $option \",\"] {\n-\t    lappend gpp_compile_options \"additional_flags=$x\"\n-\t}\n-\treturn 1\n-    } else {\n-\treturn 0\n-    }\n-}"}, {"sha": "f1f3a68631a0601ef87325ab6a3e2b91bb562696", "filename": "gcc/testsuite/lib/lto.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Flib%2Flto.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2995714b3bf1295d389a80a951be8c3330e80ac/gcc%2Ftestsuite%2Flib%2Flto.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Flto.exp?ref=e2995714b3bf1295d389a80a951be8c3330e80ac", "patch": "@@ -25,6 +25,9 @@ proc lto_prune_warns { text } {\n     # Many tests that use visibility will still pass on platforms that don't support it.\n     regsub -all \"(^|\\n)\\[^\\n\\]*: warning: visibility attribute not supported in this configuration; ignored\\[^\\n\\]*\" $text \"\" text\n \n+    # Allow mixed-language LTO tests to pass with make check-c++0x\n+    regsub -all \"(^|\\n)\\[^\\n\\]*: warning: command line option '-std=\\[^\\n\\]*\" $text \"\" text\n+\n     # And any stray location lines.\n     regsub -all \"(^|\\n)\\[^\\n\\]*: In function \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)In file included from \\[^\\n\\]*\" $text \"\" text"}]}