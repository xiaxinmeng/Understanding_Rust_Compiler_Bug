{"sha": "46827fdd40f93df1f94fa51adca6281d8a21f67d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY4MjdmZGQ0MGY5M2RmMWY5NGZhNTFhZGNhNjI4MWQ4YTIxZjY3ZA==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2002-01-18T22:07:27Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2002-01-18T22:07:27Z"}, "message": "numeric_limits.cc (test_extrema<long double>): Add specialization for FreeBSD systems only to avoid losing test only due to...\n\n\t* testsuite/18_support/numeric_limits.cc (test_extrema<long double>):\n\tAdd specialization for FreeBSD systems only to avoid losing test\n\tonly due to extra precision unmentioned in system headers.\n\nFrom-SVN: r48997", "tree": {"sha": "12fdb5b096aa4ce1e3bf48a4bbeb5008ef9d851e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12fdb5b096aa4ce1e3bf48a4bbeb5008ef9d851e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46827fdd40f93df1f94fa51adca6281d8a21f67d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46827fdd40f93df1f94fa51adca6281d8a21f67d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46827fdd40f93df1f94fa51adca6281d8a21f67d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46827fdd40f93df1f94fa51adca6281d8a21f67d/comments", "author": null, "committer": null, "parents": [{"sha": "d7af7a9ace3cda94c27b7b53d70fe4b697c76a67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7af7a9ace3cda94c27b7b53d70fe4b697c76a67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7af7a9ace3cda94c27b7b53d70fe4b697c76a67"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "d8ada879324d736bb2da9a6352db565dc2404f4b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46827fdd40f93df1f94fa51adca6281d8a21f67d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46827fdd40f93df1f94fa51adca6281d8a21f67d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=46827fdd40f93df1f94fa51adca6281d8a21f67d", "patch": "@@ -1,3 +1,9 @@\n+2002-01-18  Loren Rittle <ljrittle@acm.org>\n+\n+\t* testsuite/18_support/numeric_limits.cc (test_extrema<long double>):\n+\tAdd specialization for FreeBSD systems only to avoid losing test\n+\tonly due to extra precision unmentioned in system headers.\n+\n 2002-01-18  David Billinghurst <David.Billinghurst@riotinto.com>\n \n \t* config/os/irix/irix6.5/bits/ctype_noninline.h: Fix typo"}, {"sha": "6cbeacb4d03b4727a15368c2057f487258e3b1e3", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46827fdd40f93df1f94fa51adca6281d8a21f67d/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46827fdd40f93df1f94fa51adca6281d8a21f67d/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc?ref=46827fdd40f93df1f94fa51adca6281d8a21f67d", "patch": "@@ -59,6 +59,31 @@ void test_extrema()\n   VERIFY( extrema<T>::max == std::numeric_limits<T>::max() );\n }\n \n+#ifdef __FreeBSD__\n+// This specialization allows the extra precision unmentioned\n+// in system headers yet supported by long double on FreeBSD to\n+// not cause a gratuitous FAIL for the entire test.  Using this\n+// technique to compare the residual against epsilon ensures that\n+// any major breakage will still be detected (although obviously not\n+// as tight as the exact equality check that would have been generated\n+// by default).  This replacement test is allowable by the fact that\n+// C++ limits should match the system provided limits for C even if\n+// they were wrong verses the actual FP hardware.\n+template<>\n+void test_extrema<long double>()\n+{\n+  typedef long double T;\n+  VERIFY( (extrema<T>::min - std::numeric_limits<T>::min())\n+            < std::numeric_limits<T>::epsilon() );\n+  VERIFY( (std::numeric_limits<T>::min() - extrema<T>::min)\n+            < std::numeric_limits<T>::epsilon() );\n+  VERIFY( (extrema<T>::max / std::numeric_limits<T>::max())\n+            < (1 + std::numeric_limits<T>::epsilon()) );\n+  VERIFY( (std::numeric_limits<T>::max() / extrema<T>::max)\n+            < (1 + std::numeric_limits<T>::epsilon()) );\n+}\n+#endif\n+\n #ifdef __CHAR_UNSIGNED__\n #define char_is_signed false\n #else"}]}