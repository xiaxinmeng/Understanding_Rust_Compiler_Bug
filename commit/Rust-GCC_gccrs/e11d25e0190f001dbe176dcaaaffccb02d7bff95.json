{"sha": "e11d25e0190f001dbe176dcaaaffccb02d7bff95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTExZDI1ZTAxOTBmMDAxZGJlMTc2ZGNhYWFmZmNjYjAyZDdiZmY5NQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-08-11T20:27:10Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-08-11T20:27:10Z"}, "message": "Remove insert_loop_close_phis.\n\n2010-07-15  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-clast-to-gimple.c (translate_clast_for_loop): Do not call\n\tinsert_loop_close_phis.\n\t* sese.c (name_defined_in_loop_p): Removed.\n\t(expr_defined_in_loop_p): Removed.\n\t(alive_after_loop): Removed.\n\t(close_phi_not_yet_inserted_p): Removed.\n\t(struct alep): Removed.\n\t(add_loop_exit_phis): Removed.\n\t(insert_loop_close_phis): Removed.\n\nFrom-SVN: r163138", "tree": {"sha": "f6bed73e2a800763ff56bfa1d6df61a1b5b327f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6bed73e2a800763ff56bfa1d6df61a1b5b327f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e11d25e0190f001dbe176dcaaaffccb02d7bff95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11d25e0190f001dbe176dcaaaffccb02d7bff95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e11d25e0190f001dbe176dcaaaffccb02d7bff95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11d25e0190f001dbe176dcaaaffccb02d7bff95/comments", "author": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61298f6999f50e4618ea563a2306b6f628d0ef25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61298f6999f50e4618ea563a2306b6f628d0ef25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61298f6999f50e4618ea563a2306b6f628d0ef25"}], "stats": {"total": 202, "additions": 27, "deletions": 175}, "files": [{"sha": "35b24969783b689ded81a1ae6f0942a2b04baddc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11d25e0190f001dbe176dcaaaffccb02d7bff95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11d25e0190f001dbe176dcaaaffccb02d7bff95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e11d25e0190f001dbe176dcaaaffccb02d7bff95", "patch": "@@ -1,3 +1,15 @@\n+2010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-clast-to-gimple.c (translate_clast_for_loop): Do not call\n+\tinsert_loop_close_phis.\n+\t* sese.c (name_defined_in_loop_p): Removed.\n+\t(expr_defined_in_loop_p): Removed.\n+\t(alive_after_loop): Removed.\n+\t(close_phi_not_yet_inserted_p): Removed.\n+\t(struct alep): Removed.\n+\t(add_loop_exit_phis): Removed.\n+\t(insert_loop_close_phis): Removed.\n+\n 2010-08-02  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n \n \t* graphite-cloog-util.c"}, {"sha": "2cd80eecdfb2b6e78e2a3044c6bf3a4c7550d666", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11d25e0190f001dbe176dcaaaffccb02d7bff95/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11d25e0190f001dbe176dcaaaffccb02d7bff95/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=e11d25e0190f001dbe176dcaaaffccb02d7bff95", "patch": "@@ -1,9 +1,20 @@\n+2010-07-15  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-clast-to-gimple.c (translate_clast_for_loop): Do not call\n+\tinsert_loop_close_phis.\n+\t* sese.c (name_defined_in_loop_p): Removed.\n+\t(expr_defined_in_loop_p): Removed.\n+\t(alive_after_loop): Removed.\n+\t(close_phi_not_yet_inserted_p): Removed.\n+\t(struct alep): Removed.\n+\t(add_loop_exit_phis): Removed.\n+\t(insert_loop_close_phis): Removed.\n+\n 2010-07-15  Andreas Simbuerger  <simbuerg@fim.uni-passau.de>\n \n-\t* graphite-cloog-util.c\n-\t(cloog_matrix_to_ppl_constraint): Fix flipped condition.\n-\t* graphite-poly.c\n-\t(psct_scattering_dim_for_loop_depth): Same.\n+\t* graphite-cloog-util.c\t(cloog_matrix_to_ppl_constraint): Fix flipped\n+\tcondition.\n+\t* graphite-poly.c (psct_scattering_dim_for_loop_depth): Same.\n \n 2010-07-07  Sebastian Pop  <sebastian.pop@amd.com>\n "}, {"sha": "80d602fd242a455b60939305f662c518997d90cb", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11d25e0190f001dbe176dcaaaffccb02d7bff95/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11d25e0190f001dbe176dcaaaffccb02d7bff95/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=e11d25e0190f001dbe176dcaaaffccb02d7bff95", "patch": "@@ -1044,10 +1044,6 @@ translate_clast_for_loop (sese region, loop_p context_loop,\n   redirect_edge_succ_nodup (next_e, after);\n   set_immediate_dominator (CDI_DOMINATORS, next_e->dest, next_e->src);\n \n-   /* Remove from rename_map all the tuples containing variables\n-      defined in loop's body.  */\n-  insert_loop_close_phis (rename_map, loop);\n-\n   if (flag_loop_parallelize_all\n       && !dependency_in_loop_p (loop, bb_pbb_mapping,\n  \t\t\t\tget_scattering_level (level)))"}, {"sha": "420776df2f2f35208adc1f004eb9ba09a13bcc7c", "filename": "gcc/sese.c", "status": "modified", "additions": 0, "deletions": 167, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11d25e0190f001dbe176dcaaaffccb02d7bff95/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11d25e0190f001dbe176dcaaaffccb02d7bff95/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=e11d25e0190f001dbe176dcaaaffccb02d7bff95", "patch": "@@ -888,173 +888,6 @@ get_false_edge_from_guard_bb (basic_block bb)\n   return NULL;\n }\n \n-/* Returns true when NAME is defined in LOOP.  */\n-\n-static bool\n-name_defined_in_loop_p (tree name, loop_p loop)\n-{\n-  return !SSA_NAME_IS_DEFAULT_DEF (name)\n-    && gimple_bb (SSA_NAME_DEF_STMT (name))->loop_father == loop;\n-}\n-\n-/* Returns true when EXPR contains SSA_NAMEs defined in LOOP.  */\n-\n-static bool\n-expr_defined_in_loop_p (tree expr, loop_p loop)\n-{\n-  switch (TREE_CODE_LENGTH (TREE_CODE (expr)))\n-    {\n-    case 3:\n-      return expr_defined_in_loop_p (TREE_OPERAND (expr, 0), loop)\n-\t|| expr_defined_in_loop_p (TREE_OPERAND (expr, 1), loop)\n-\t|| expr_defined_in_loop_p (TREE_OPERAND (expr, 2), loop);\n-\n-    case 2:\n-      return expr_defined_in_loop_p (TREE_OPERAND (expr, 0), loop)\n-\t|| expr_defined_in_loop_p (TREE_OPERAND (expr, 1), loop);\n-\n-    case 1:\n-      return expr_defined_in_loop_p (TREE_OPERAND (expr, 0), loop);\n-\n-    case 0:\n-      return TREE_CODE (expr) == SSA_NAME\n-\t&& name_defined_in_loop_p (expr, loop);\n-\n-    default:\n-      return false;\n-    }\n-}\n-\n-/* Returns the gimple statement that uses NAME outside the loop it is\n-   defined in, returns NULL if there is no such loop close phi node.\n-   An invariant of the loop closed SSA form is that the only use of a\n-   variable, outside the loop it is defined in, is in the loop close\n-   phi node that just follows the loop.  */\n-\n-static gimple\n-alive_after_loop (tree name)\n-{\n-  use_operand_p use_p;\n-  imm_use_iterator imm_iter;\n-  loop_p loop = gimple_bb (SSA_NAME_DEF_STMT (name))->loop_father;\n-\n-  FOR_EACH_IMM_USE_FAST (use_p, imm_iter, name)\n-    {\n-      gimple stmt = USE_STMT (use_p);\n-\n-      if (gimple_code (stmt) == GIMPLE_PHI\n-\t  && gimple_bb (stmt)->loop_father != loop)\n-\treturn stmt;\n-    }\n-\n-  return NULL;\n-}\n-\n-/* Return true if a close phi has not yet been inserted for the use of\n-   variable NAME on the single exit of LOOP.  */\n-\n-static bool\n-close_phi_not_yet_inserted_p (loop_p loop, tree name)\n-{\n-  gimple_stmt_iterator psi;\n-  basic_block bb = single_exit (loop)->dest;\n-\n-  for (psi = gsi_start_phis (bb); !gsi_end_p (psi); gsi_next (&psi))\n-    if (gimple_phi_arg_def (gsi_stmt (psi), 0) == name)\n-      return false;\n-\n-  return true;\n-}\n-\n-/* A structure for passing parameters to add_loop_exit_phis.  */\n-\n-typedef struct alep {\n-  loop_p loop;\n-  VEC (rename_map_elt, heap) *new_renames;\n-} *alep_p;\n-\n-/* Helper function for htab_traverse in insert_loop_close_phis.  */\n-\n-static int\n-add_loop_exit_phis (void **slot, void *data)\n-{\n-  struct rename_map_elt_s *entry;\n-  alep_p a;\n-  loop_p loop;\n-  tree expr, new_name, old_name;\n-  bool def_in_loop_p, used_outside_p, need_close_phi_p;\n-  gimple old_close_phi;\n-\n-  if (!slot || !*slot || !data)\n-    return 1;\n-\n-  entry = (struct rename_map_elt_s *) *slot;\n-  a = (alep_p) data;\n-  loop = a->loop;\n-  new_name = expr = entry->expr;\n-  old_name = entry->old_name;\n-\n-  def_in_loop_p = expr_defined_in_loop_p (expr, loop);\n-  if (!def_in_loop_p)\n-    return 1;\n-\n-  /* Remove the old rename from the map when the expression is defined\n-     in the loop that we're closing.  */\n-  free (*slot);\n-  *slot = NULL;\n-\n-  if (TREE_CODE (expr) != SSA_NAME)\n-    return 1;\n-\n-  old_close_phi = alive_after_loop (old_name);\n-  used_outside_p = (old_close_phi != NULL);\n-  need_close_phi_p = (used_outside_p\n-\t\t      && close_phi_not_yet_inserted_p (loop, new_name));\n-\n-  /* Insert a loop close phi node.  */\n-  if (need_close_phi_p)\n-    {\n-      basic_block bb = single_exit (loop)->dest;\n-      gimple phi = create_phi_node (new_name, bb);\n-      tree new_res = create_new_def_for (gimple_phi_result (phi), phi,\n-\t\t\t\t\t gimple_phi_result_ptr (phi));\n-\n-      add_phi_arg (phi, new_name, single_pred_edge (bb), UNKNOWN_LOCATION);\n-      VEC_safe_push (rename_map_elt, heap, a->new_renames,\n-\t\t     new_rename_map_elt (gimple_phi_result (old_close_phi),\n-\t\t\t\t\t new_res));\n-    }\n-\n-  return 1;\n-}\n-\n-/* Traverses MAP and removes from it all the tuples (OLD, NEW) where\n-   NEW is defined in LOOP.  Inserts on the exit of LOOP the close phi\n-   node \"RES = phi (NEW)\" corresponding to \"OLD_RES = phi (OLD)\" in\n-   the original code.  Inserts in MAP the tuple (OLD_RES, RES).  */\n-\n-void\n-insert_loop_close_phis (htab_t map, loop_p loop)\n-{\n-  int i;\n-  struct alep a;\n-  rename_map_elt elt;\n-\n-  a.loop = loop;\n-  a.new_renames = VEC_alloc (rename_map_elt, heap, 3);\n-  update_ssa (TODO_update_ssa);\n-  htab_traverse (map, add_loop_exit_phis, &a);\n-  update_ssa (TODO_update_ssa);\n-\n-  for (i = 0; VEC_iterate (rename_map_elt, a.new_renames, i, elt); i++)\n-    {\n-      set_rename (map, elt->old_name, elt->expr);\n-      free (elt);\n-    }\n-\n-  VEC_free (rename_map_elt, heap, a.new_renames);\n-}\n-\n /* Helper structure for htab_traverse in insert_guard_phis.  */\n \n struct igp {"}]}