{"sha": "5b6ce16adece24e24a4980a22792b2cb2a84b6d5", "node_id": "C_kwDOANBUbNoAKDViNmNlMTZhZGVjZTI0ZTI0YTQ5ODBhMjI3OTJiMmNiMmE4NGI2ZDU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-12T00:17:25Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-12T00:17:25Z"}, "message": "Daily bump.", "tree": {"sha": "17dff9e9b4125f99fc0a7791e6636e731f9c8f4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17dff9e9b4125f99fc0a7791e6636e731f9c8f4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b6ce16adece24e24a4980a22792b2cb2a84b6d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b6ce16adece24e24a4980a22792b2cb2a84b6d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b6ce16adece24e24a4980a22792b2cb2a84b6d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/comments", "author": null, "committer": null, "parents": [{"sha": "8214ec0cf33482f60139ae18a40567317e63c1ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8214ec0cf33482f60139ae18a40567317e63c1ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8214ec0cf33482f60139ae18a40567317e63c1ff"}], "stats": {"total": 385, "additions": 384, "deletions": 1}, "files": [{"sha": "a57f8c7e071e63ff4e239bbc0110ec51a9ffd7c9", "filename": "ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=5b6ce16adece24e24a4980a22792b2cb2a84b6d5", "patch": "@@ -1,3 +1,15 @@\n+2022-11-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/indices-and-tables.rst: Rename Indexes to Indices.\n+\n+2022-11-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/Makefile: Update comment.\n+\n+2022-11-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/Makefile: Disable -j auto.\n+\n 2022-11-10  Martin Liska  <mliska@suse.cz>\n \n \t* doc/baseconf.py: Modernize by using pathlib."}, {"sha": "fa98ff2c3bd1e5f261bdf2d4cdc7d4d9538a4ace", "filename": "contrib/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=5b6ce16adece24e24a4980a22792b2cb2a84b6d5", "patch": "@@ -1,3 +1,10 @@\n+2022-11-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Check for a space after leading\n+\ttab.\n+\t* gcc-changelog/test_email.py: Likewise.\n+\t* gcc-changelog/test_patches.txt: Likewise.\n+\n 2022-11-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc-changelog/git_update_version.py: Add"}, {"sha": "3cace85140f185846720644b84228da5486c7e0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b6ce16adece24e24a4980a22792b2cb2a84b6d5", "patch": "@@ -1,3 +1,144 @@\n+2022-11-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106147\n+\t* doc/gcc/gcc-command-options/options-that-control-static-analysis.rst:\n+\tAdd -Wanalyzer-infinite-recursion.\n+\t* doc/gcc/gcc-command-options/options-to-request-or-suppress-warnings.rst\n+\t(-Winfinite-recursion): Mention -Wanalyzer-infinite-recursion.\n+\n+2022-11-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106147\n+\t* Makefile.in (ANALYZER_OBJS): Add analyzer/infinite-recursion.o.\n+\n+2022-11-11  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/107523\n+\t* gimple-range.cc (gimple_ranger::update_stmt): Use fur_stmt\n+\trather than fur_depend.\n+\n+2022-11-11  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-vrp.cc (rvrp_folder::rvrp_folder): Init m_last_bb_stmt.\n+\t(rvrp_folder::pre_fold_bb): Set m_last_bb_stmt.\n+\t(rvrp_folder::pre_fold_stmt): Check for transitive inferred ranges.\n+\t(rvrp_folder::fold_stmt): Check in pre_fold_stmt instead.\n+\n+2022-11-11  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/aarch64/aarch64-cores.def (AARCH64_CORE): Add Cortex-X1C\n+\tCPU.\n+\t* config/aarch64/aarch64-tune.md: Regenerate.\n+\t* doc/gcc/gcc-command-options/machine-dependent-options/aarch64-options.rst:\n+\tDocument Cortex-X1C CPU.\n+\n+2022-11-11  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/aarch64/aarch64-cores.def (AARCH64_CORE): Add Cortex-A715\n+\tCPU.\n+\t* config/aarch64/aarch64-tune.md: Regenerate.\n+\t* doc/gcc/gcc-command-options/machine-dependent-options/aarch64-options.rst:\n+\tDocument Cortex-A715 CPU.\n+\n+2022-11-11  Richard Biener  <rguenther@suse.de>\n+\t    Nikita Voronov  <nik_1357@mail.ru>\n+\n+\tPR tree-optimization/107554\n+\t* tree-ssa-strlen.cc (strlen_pass::count_nonzero_bytes):\n+\tUse unsigned HOST_WIDE_INT type for the strlen.\n+\n+2022-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105142\n+\t* gimple-fold.cc (fosa_unwind): New global.\n+\t(follow_outer_ssa_edges): When the SSA definition to follow\n+\tis does not dominate fosa_bb, temporarily clear flow-sensitive\n+\tinfo.  Make sure to not expand stmts with not defined overflow.\n+\t(maybe_fold_comparisons_from_match_pd): Set up unwind stack\n+\tfor follow_outer_ssa_edges and unwind flow-sensitive info\n+\tclearing after matching.\n+\n+2022-11-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (operator_mult::fold_range): Remove.\n+\t(operator_div::fold_range): Remove.\n+\t(operator_bitwise_and): Remove.\n+\n+2022-11-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (update_known_bitmask): Avoid unnecessary intersection.\n+\n+2022-11-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (range_operator::fold_range): Call\n+\tupdate_known_bitmask.\n+\t(operator_bitwise_and::fold_range): Avoid setting nonzero bits\n+\twhen range is undefined.\n+\n+2022-11-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (class operator_div): Remove tree code.\n+\t(operator_div::wi_op_overflows): Handle EXACT_DIV_EXPR as\n+\tTRUNC_DIV_EXPR.\n+\n+2022-11-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc: (range_op_table::set): Set m_code.\n+\t(integral_table::integral_table): Handle shared entries.\n+\t(pointer_table::pointer_table): Same.\n+\t* range-op.h (class range_operator): Add m_code.\n+\n+2022-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107618\n+\t* tree-ssa-copy.cc (stmt_may_generate_copy): Simulate all\n+\tassignments with a single SSA use.\n+\t(copy_prop_visit_assignment): Use gimple_fold_stmt_to_constant_1\n+\tto perform simple constant folding.\n+\t(copy_prop::visit_stmt): Visit all assignments.\n+\n+2022-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/84646\n+\t* tree-ssa-dce.cc (pass_dce::set_pass_param): Add param\n+\twheter to run update-address-taken.\n+\t(pass_dce::execute): Honor it.\n+\t* passes.def: Exchange last DCE and CD-DCE invocations.\n+\tSwap pass_tail_calls and the last DCE.\n+\n+2022-11-11  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\t    Monk Chiang  <monk.chiang@sifive.com>\n+\n+\t* config/riscv/riscv-v.cc (emit_pred_move): Adjust for scalable register spilling.\n+\t(legitimize_move): Ditto.\n+\t* config/riscv/riscv.cc (riscv_v_adjust_scalable_frame): New function.\n+\t(riscv_first_stack_step): Adjust for scalable register spilling.\n+\t(riscv_expand_prologue): Ditto.\n+\t(riscv_expand_epilogue): Ditto.\n+\t(riscv_dwarf_poly_indeterminate_value): New function.\n+\t(TARGET_DWARF_POLY_INDETERMINATE_VALUE): New target hook support for register spilling.\n+\t* config/riscv/riscv.h (RISCV_DWARF_VLENB): New macro.\n+\t(RISCV_PROLOGUE_TEMP2_REGNUM): Ditto.\n+\t(RISCV_PROLOGUE_TEMP2): Ditto.\n+\t* config/riscv/vector-iterators.md: New iterators.\n+\t* config/riscv/vector.md (*mov<mode>): Fix it for register spilling.\n+\t(*mov<mode>_whole): New pattern.\n+\t(*mov<mode>_fract): New pattern.\n+\t(@pred_mov<mode>): Fix it for register spilling.\n+\n+2022-11-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c/85487\n+\t* doc/cpp/pragmas.rst (Pragmas): Document region pragmas.\n+\n+2022-11-11  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* config/i386/i386-builtin.def (BDESC): Add\n+\tOPTION_MASK_ISA2_PREFETCHI for prefetchi builtin.\n+\t* config/i386/i386-expand.cc (ix86_expand_builtin):\n+\tAdd ISA check before emit_insn.\n+\t* config/i386/prfchiintrin.h: Add target for intrin.\n+\n 2022-11-10  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/99671"}, {"sha": "0e48d446545042fa9e2ec170b7669a3ad2d30f41", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=5b6ce16adece24e24a4980a22792b2cb2a84b6d5", "patch": "@@ -1 +1 @@\n-20221111\n+20221112"}, {"sha": "39dbe829b644789da7a13c47f801878a49c075e6", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=5b6ce16adece24e24a4980a22792b2cb2a84b6d5", "patch": "@@ -1,3 +1,52 @@\n+2022-11-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* sm-fd.dot: Fix typo in comment.\n+\t* sm-file.dot: New file.\n+\t* varargs.cc: Fix typo in comment.\n+\t* varargs.dot: New file.\n+\n+2022-11-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* checker-path.h: Split out checker_event and its subclasses to...\n+\t* checker-event.h: ...this new header.\n+\n+2022-11-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106147\n+\t* analyzer.opt (Wanalyzer-infinite-recursion): New.\n+\t* call-string.cc (call_string::count_occurrences_of_function):\n+\tNew.\n+\t* call-string.h (call_string::count_occurrences_of_function): New\n+\tdecl.\n+\t* checker-path.cc (function_entry_event::function_entry_event):\n+\tNew ctor.\n+\t(checker_path::add_final_event): Delete.\n+\t* checker-path.h (function_entry_event::function_entry_event): New\n+\tctor.\n+\t(function_entry_event::get_desc): Drop \"final\".\n+\t(checker_path::add_final_event): Delete.\n+\t* diagnostic-manager.cc\n+\t(diagnostic_manager::emit_saved_diagnostic): Create the final\n+\tevent via a new pending_diagnostic::add_final_event vfunc, rather\n+\tthan checker_path::add_final_event.\n+\t(diagnostic_manager::add_events_for_eedge): Create function entry\n+\tevents via a new pending_diagnostic::add_function_entry_event\n+\tvfunc.\n+\t* engine.cc (exploded_graph::process_node): When creating a new\n+\tPK_BEFORE_SUPERNODE node, call\n+\texploded_graph::detect_infinite_recursion on it after adding the\n+\tin-edge.\n+\t* exploded-graph.h (exploded_graph::detect_infinite_recursion):\n+\tNew decl.\n+\t(exploded_graph::find_previous_entry_to): New decl.\n+\t* infinite-recursion.cc: New file.\n+\t* pending-diagnostic.cc\n+\t(pending_diagnostic::add_function_entry_event): New.\n+\t(pending_diagnostic::add_final_event): New.\n+\t* pending-diagnostic.h\n+\t(pending_diagnostic::add_function_entry_event): New vfunc.\n+\t(pending_diagnostic::add_final_event): New vfunc.\n+\n 2022-11-10  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/99671"}, {"sha": "e0f10b36469d4c879ca5215d89f69fcfa1033e6d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5b6ce16adece24e24a4980a22792b2cb2a84b6d5", "patch": "@@ -1,3 +1,9 @@\n+2022-11-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c/85487\n+\t* c-pragma.cc (handle_pragma_ignore): New function.\n+\t(init_pragma): Register region and endregion pragmas.\n+\n 2022-11-09  Martin Liska  <mliska@suse.cz>\n \n \t* c-target.def: Port to RST."}, {"sha": "bedd9540d201f8f50d2662aca2a3cf46a39771fb", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=5b6ce16adece24e24a4980a22792b2cb2a84b6d5", "patch": "@@ -1,3 +1,13 @@\n+2022-11-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/cp/index.rst: Remove trailing .rst in toctree.\n+\t* doc/cp/intro/index.rst: Likewise.\n+\t* doc/cp/topics/index.rst: Likewise.\n+\t* doc/index.rst: Likewise.\n+\t* doc/intro/index.rst: Likewise.\n+\t* doc/topics/index.rst: Likewise.\n+\t* doc/indices-and-tables.rst: New file.\n+\n 2022-11-09  Martin Liska  <mliska@suse.cz>\n \n \t* Make-lang.in:"}, {"sha": "f2101bc9d59333d4a13a6dd6ee6e971182dbe5c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b6ce16adece24e24a4980a22792b2cb2a84b6d5", "patch": "@@ -1,3 +1,79 @@\n+2022-11-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106147\n+\t* g++.dg/analyzer/infinite-recursion-1.C: New test.\n+\t* g++.dg/analyzer/infinite-recursion-2.C: New test, copied from\n+\tg++.dg/warn/Winfinite-recursion-2.C.\n+\t* g++.dg/analyzer/infinite-recursion-3.C: New test, adapted from\n+\tg++.dg/warn/Winfinite-recursion-3.C.\n+\t* gcc.dg/analyzer/infinite-recursion-2.c: New test.\n+\t* gcc.dg/analyzer/infinite-recursion-3.c: New test.\n+\t* gcc.dg/analyzer/infinite-recursion-4-limited-buggy.c: New test.\n+\t* gcc.dg/analyzer/infinite-recursion-4-limited.c: New test.\n+\t* gcc.dg/analyzer/infinite-recursion-4-unlimited-buggy.c: New test.\n+\t* gcc.dg/analyzer/infinite-recursion-4-unlimited.c: New test.\n+\t* gcc.dg/analyzer/infinite-recursion-5.c: New test, adapted from\n+\tgcc.dg/Winfinite-recursion.c.\n+\t* gcc.dg/analyzer/infinite-recursion-alloca.c: New test.\n+\t* gcc.dg/analyzer/infinite-recursion-inlining.c: New test.\n+\t* gcc.dg/analyzer/infinite-recursion-multiline-1.c: New test.\n+\t* gcc.dg/analyzer/infinite-recursion-multiline-2.c: New test.\n+\t* gcc.dg/analyzer/infinite-recursion-variadic.c: New test.\n+\t* gcc.dg/analyzer/infinite-recursion.c: Add dg-warning directives\n+\twhere infinite recursions occur.\n+\t* gcc.dg/analyzer/malloc-ipa-12.c: Likewise.\n+\t* gcc.dg/analyzer/pr105365.c: Likewise.\n+\t* gcc.dg/analyzer/pr105366.c: Likewise.\n+\t* gcc.dg/analyzer/pr97029.c: Likewise.\n+\n+2022-11-11  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/107523\n+\t* gcc.dg/pr107523.c: New.\n+\n+2022-11-11  Richard Biener  <rguenther@suse.de>\n+\t    Nikita Voronov  <nik_1357@mail.ru>\n+\n+\tPR tree-optimization/107554\n+\t* gcc.dg/pr107554.c: New testcase.\n+\n+2022-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107618\n+\t* gcc.dg/pr107618.c: New testcase.\n+\n+2022-11-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/84646\n+\t* g++.dg/tree-ssa/pr106922.C: Continue to scan earlier DCE dump.\n+\t* gcc.dg/tree-ssa/20030808-1.c: Likewise.\n+\n+2022-11-11  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\t    Monk Chiang  <monk.chiang@sifive.com>\n+\n+\t* gcc.target/riscv/rvv/base/macro.h: New test.\n+\t* gcc.target/riscv/rvv/base/spill-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/spill-10.c: New test.\n+\t* gcc.target/riscv/rvv/base/spill-11.c: New test.\n+\t* gcc.target/riscv/rvv/base/spill-12.c: New test.\n+\t* gcc.target/riscv/rvv/base/spill-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/spill-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/spill-4.c: New test.\n+\t* gcc.target/riscv/rvv/base/spill-5.c: New test.\n+\t* gcc.target/riscv/rvv/base/spill-6.c: New test.\n+\t* gcc.target/riscv/rvv/base/spill-7.c: New test.\n+\t* gcc.target/riscv/rvv/base/spill-8.c: New test.\n+\t* gcc.target/riscv/rvv/base/spill-9.c: New test.\n+\n+2022-11-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c/85487\n+\t* c-c++-common/pragma-region.c: New test.\n+\n+2022-11-11  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* gcc.target/i386/prefetchi-5.c: New test.\n+\n 2022-11-10  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/analyzer/deref-before-check-1.c: New test."}, {"sha": "8732fe6ae30ba8996cb7ca0031099f5f2452ebc4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b6ce16adece24e24a4980a22792b2cb2a84b6d5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5b6ce16adece24e24a4980a22792b2cb2a84b6d5", "patch": "@@ -1,3 +1,85 @@\n+2022-11-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/95048\n+\t* include/experimental/bits/fs_path.h (path::_Cvt::_S_wconvert):\n+\tConstruct codecvt directly instead of getting it from the\n+\tlocale.\n+\n+2022-11-11  Nathaniel Shead  <nathanieloshead@gmail.com>\n+\n+\tPR libstdc++/103295\n+\t* include/bits/basic_string.h (_M_use_local_data): Set active\n+\tmember to _M_local_buf.\n+\n+2022-11-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/95048\n+\t* include/bits/fs_path.h (path::_Codecvt): New class template\n+\tthat selects the kind of code conversion done.\n+\t(path::_Codecvt<wchar_t>): Select based on sizeof(wchar_t).\n+\t(_GLIBCXX_CONV_FROM_UTF8): New macro to allow the same code to\n+\tbe used for Windows and POSIX.\n+\t(path::_S_convert(const EcharT*, const EcharT*)): Simplify by\n+\tusing _Codecvt and _GLIBCXX_CONV_FROM_UTF8 abstractions.\n+\t(path::_S_str_convert(basic_string_view<value_type>, const A&)):\n+\tSimplify nested conditions.\n+\t* include/experimental/bits/fs_path.h (path::_Cvt): Define\n+\tnested typedef controlling type of code conversion done.\n+\t(path::_Cvt::_S_wconvert): Use new typedef.\n+\t(path::string(const A&)): Likewise.\n+\t* testsuite/27_io/filesystem/path/construct/95048.cc: New test.\n+\t* testsuite/experimental/filesystem/path/construct/95048.cc: New\n+\ttest.\n+\n+2022-11-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/tuple/swap.cc (MoveOnly::operator==): Add\n+\tconst qualifier.\n+\t* testsuite/26_numerics/valarray/87641.cc (X::operator==):\n+\tLikewise.\n+\n+2022-11-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/charconv (__from_chars_alnum_to_val_table::value):\n+\t[!__cpp_inline_variables]: Add non-inline definition.\n+\n+2022-11-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/experimental/propagate_const/observers/107525.cc:\n+\tUse type trait instead of C++17 variable template.\n+\n+2022-11-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103755\n+\t* config/abi/pre/gnu.ver: Tighten patterns for facets in the\n+\tbase version. Add exports for __try_use_facet.\n+\t* include/bits/basic_ios.tcc (basic_ios::_M_cache_locale): Use\n+\t__try_use_facet instead of has_facet and use_facet.\n+\t* include/bits/fstream.tcc (basic_filebuf::basic_filebuf()):\n+\tLikewise.\n+\t(basic_filebuf::imbue): Likewise.\n+\t* include/bits/locale_classes.h (locale, locale::id)\n+\t(locale::_Impl): Declare __try_use_facet as a friend.\n+\t* include/bits/locale_classes.tcc (__try_use_facet): Define new\n+\tfunction template with special cases for default facets.\n+\t(has_facet, use_facet): Call __try_use_facet.\n+\t* include/bits/locale_facets.tcc (__try_use_facet): Declare\n+\texplicit instantiations.\n+\t* include/bits/locale_facets_nonio.tcc (__try_use_facet):\n+\tLikewise.\n+\t* src/c++11/locale-inst-monetary.h (INSTANTIATE_FACET_ACCESSORS):\n+\tUse new macro for facet accessor instantiations.\n+\t* src/c++11/locale-inst-numeric.h (INSTANTIATE_FACET_ACCESSORS):\n+\tLikewise.\n+\t* src/c++11/locale-inst.cc (INSTANTIATE_USE_FACET): Define new\n+\tmacro for instantiating __try_use_facet and use_facet.\n+\t(INSTANTIATE_FACET_ACCESSORS): Define new macro for also\n+\tdefining has_facet.\n+\t* src/c++98/compatibility-ldbl.cc (__try_use_facet):\n+\tInstantiate.\n+\t* testsuite/22_locale/ctype/is/string/89728_neg.cc: Adjust\n+\texpected errors.\n+\n 2022-11-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/concepts (__detail::__destructible_impl)"}]}