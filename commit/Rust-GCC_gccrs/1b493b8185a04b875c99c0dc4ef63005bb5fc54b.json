{"sha": "1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI0OTNiODE4NWEwNGI4NzVjOTljMGRjNGVmNjMwMDViYjVmYzU0Yg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-07-21T06:41:39Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-07-21T06:41:39Z"}, "message": "cp-tree.h: Use __FUNCTION__ not __PRETTY_FUNCTION__.\n\n\t* cp-tree.h: Use __FUNCTION__ not __PRETTY_FUNCTION__.\n\tDefine my_friendly_assert and my_friendly_abort as macros\n\twhich may call friendly_abort.  Prototype friendly abort, not\n\tmy_friendly_abort or my_friendly_assert.\n\t* decl.c (signal_catch): Report the signal caught in the error\n\tmessage.  Call fatal directly.\n\t* typeck2.c (ack, my_friendly_assert): Delete.\n\t(my_friendly_abort): Rename to friendly_abort.  Expect file,\n\tline, and function parameters.  Report the abort code, then\n\tcall fancy_abort.  Do not mask an abort if errors have\n\talready occurred.\n\n\t* g++.old-deja/g++.brendan/crash16.C,\n\tg++.old-deja/g++.brendan/parse3.C,\n\tg++.old-deja/g++.brendan/redecl1.C,\n\tg++.old-deja/g++.ns/template13.C,\n\tg++.old-deja/g++.other/decl4.C,\n\tg++.old-deja/g++.pt/spec14.C: Mark as crash test, expected to fail.\n\nFrom-SVN: r35169", "tree": {"sha": "e7fbeece18db671ef3328f933a6ed570f4533766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7fbeece18db671ef3328f933a6ed570f4533766"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/comments", "author": null, "committer": null, "parents": [{"sha": "117c9b1c9ddc571a39b46c8151df72e50a2c41e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/117c9b1c9ddc571a39b46c8151df72e50a2c41e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/117c9b1c9ddc571a39b46c8151df72e50a2c41e0"}], "stats": {"total": 168, "additions": 63, "deletions": 105}, "files": [{"sha": "aa2a2fa803eb57f32df9af9afaa5733cf39c7937", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "patch": "@@ -1,3 +1,17 @@\n+2000-07-20  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cp-tree.h: Use __FUNCTION__ not __PRETTY_FUNCTION__.\n+\tDefine my_friendly_assert and my_friendly_abort as macros\n+\twhich may call friendly_abort.  Prototype friendly abort, not\n+\tmy_friendly_abort or my_friendly_assert.\n+\t* decl.c (signal_catch): Report the signal caught in the error\n+\tmessage.  Call fatal directly.\n+\t* typeck2.c (ack, my_friendly_assert): Delete.\n+\t(my_friendly_abort): Rename to friendly_abort.  Expect file,\n+\tline, and function parameters.  Report the abort code, then\n+\tcall fancy_abort.  Do not mask an abort if errors have\n+\talready occurred.\n+\n 2000-07-18  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* typeck.c (comp_target_parms): Remove obsolete parameter."}, {"sha": "901e749a707a3f5d636576f000787b8653d501c8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "patch": "@@ -161,8 +161,8 @@ Boston, MA 02111-1307, USA.  */\n ({  const tree __t = NODE;\t\t\t\t\t\\\n     enum tree_code __c = TREE_CODE(__t);\t\t\t\\\n     if (__c != VAR_DECL && __c != FUNCTION_DECL)\t\t\\\n-      tree_check_failed (__t, VAR_DECL, __FILE__,\t\t\\\n-\t\t\t __LINE__, __PRETTY_FUNCTION__);\t\\\n+      tree_check_failed (__t, VAR_DECL, __FILE__, __LINE__,\t\\\n+\t\t\t __FUNCTION__);\t\t\t\t\\\n     __t; })\n \n #define VAR_FUNCTION_OR_PARM_DECL_CHECK(NODE)\t\t\t\\\n@@ -171,8 +171,8 @@ Boston, MA 02111-1307, USA.  */\n     if (__c != VAR_DECL \t\t\t\t\t\\\n \t&& __c != FUNCTION_DECL \t\t\t\t\\\n         && __c != PARM_DECL)\t\t\t\t\t\\\n-      tree_check_failed (__t, VAR_DECL, __FILE__,\t\t\\\n-\t\t\t __LINE__, __PRETTY_FUNCTION__);\t\\\n+      tree_check_failed (__t, VAR_DECL, __FILE__, __LINE__,\t\\\n+\t\t\t __FUNCTION__);\t\t\t\t\\\n     __t; })\n \n #define VAR_TEMPL_TYPE_OR_FUNCTION_DECL_CHECK(NODE)\t\t\\\n@@ -182,16 +182,16 @@ Boston, MA 02111-1307, USA.  */\n \t&& __c != FUNCTION_DECL\t\t\t\t\t\\\n \t&& __c != TYPE_DECL\t\t\t\t\t\\\n \t&& __c != TEMPLATE_DECL)\t\t\t\t\\\n-      tree_check_failed (__t, VAR_DECL, __FILE__,\t\t\\\n-\t\t\t __LINE__, __PRETTY_FUNCTION__);\t\\\n+      tree_check_failed (__t, VAR_DECL, __FILE__, __LINE__,\t\\\n+\t\t\t __FUNCTION__);\t\t\t\t\\\n     __t; })\n \n #define RECORD_OR_UNION_TYPE_CHECK(NODE)\t\t\t\\\n ({  const tree __t = NODE;\t\t\t\t\t\\\n     enum tree_code __c = TREE_CODE(__t);\t\t\t\\\n     if (__c != RECORD_TYPE && __c != UNION_TYPE)\t\t\\\n-      tree_check_failed (__t, RECORD_TYPE, __FILE__,\t\t\\\n-\t\t\t __LINE__, __PRETTY_FUNCTION__);\t\\\n+      tree_check_failed (__t, RECORD_TYPE, __FILE__, __LINE__,\t\\\n+\t\t\t __FUNCTION__);\t\t\t\t\\\n     __t; })\n \n #else /* not ENABLE_TREE_CHECKING, or not gcc */\n@@ -4629,9 +4629,15 @@ extern tree binfo_or_else\t\t\tPARAMS ((tree, tree));\n extern void readonly_error\t\t\tPARAMS ((tree, const char *, int));\n extern int abstract_virtuals_error\t\tPARAMS ((tree, tree));\n extern void incomplete_type_error\t\tPARAMS ((tree, tree));\n-extern void my_friendly_abort\t\t\tPARAMS ((int))\n+extern void friendly_abort\t\t\tPARAMS ((int, const char *,\n+\t\t\t\t\t\t\t int, const char *))\n   ATTRIBUTE_NORETURN;\n-extern void my_friendly_assert\t\t\tPARAMS ((int, int));\n+\n+#define my_friendly_abort(N) \\\n+  friendly_abort (N, __FILE__, __LINE__, __FUNCTION__)\n+#define my_friendly_assert(EXP, N) \\\n+ (((EXP) == 0) ? (friendly_abort (N, __FILE__, __LINE__, __FUNCTION__), 0) : 0)\n+\n extern tree store_init_value\t\t\tPARAMS ((tree, tree));\n extern tree digest_init\t\t\t\tPARAMS ((tree, tree, tree *));\n extern tree build_scoped_ref\t\t\tPARAMS ((tree, tree));"}, {"sha": "a6b21fd7d6e2758f4a5b26c52e044b9adc9867a9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "patch": "@@ -6105,7 +6105,7 @@ end_only_namespace_names ()\n \n static void\n signal_catch (sig)\n-     int sig ATTRIBUTE_UNUSED;\n+     int sig;\n {\n   signal (SIGSEGV, SIG_DFL);\n #ifdef SIGIOT\n@@ -6120,7 +6120,10 @@ signal_catch (sig)\n #ifdef SIGBUS\n   signal (SIGBUS, SIG_DFL);\n #endif\n-  my_friendly_abort (0);\n+\n+  fatal (\"Internal error: %s\\n\\\n+Please submit a full bug report.\\n\\\n+See %s for instructions.\", strsignal (sig), GCCBUGURL);\n }\n \n /* Push the declarations of builtin types into the namespace."}, {"sha": "b2e6221c8341e114b5f3077efd3facaffa265bc1", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 12, "deletions": 92, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "patch": "@@ -40,7 +40,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n \n static tree process_init_constructor PARAMS ((tree, tree, tree *));\n-static void ack PARAMS ((const char *, ...)) ATTRIBUTE_PRINTF_1;\n \n /* Print an error message stemming from an attempt to use\n    BASETYPE as a base class for TYPE.  */\n@@ -246,102 +245,23 @@ incomplete_type_error (value, type)\n     cp_error_at (\"incomplete `%D' defined here\", value);\n }\n \n-/* Like error(), but don't call report_error_function().  */\n-\n-static void\n-ack VPARAMS ((const char *msg, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  const char *msg;\n-#endif\n-  va_list ap;\n-  \n-  VA_START (ap, msg);\n-\n-#ifndef ANSI_PROTOTYPES\n-  msg = va_arg (ap, const char *);\n-#endif\n-  \n-  if (input_filename)\n-    fprintf (stderr, \"%s:%d: \", input_filename, lineno);\n-  else\n-    fprintf (stderr, \"%s: \", progname);\n-\n-  vfprintf (stderr, msg, ap);\n-  va_end (ap);\n-  \n-  fprintf (stderr, \"\\n\");\n-}\n-  \n-/* There are times when the compiler can get very confused, confused\n-   to the point of giving up by aborting, simply because of previous\n-   input errors.  It is much better to have the user go back and\n-   correct those errors first, and see if it makes us happier, than it\n-   is to abort on him.  This is because when one has a 10,000 line\n-   program, and the compiler comes back with ``core dump'', the user\n-   is left not knowing even where to begin to fix things and no place\n-   to even try and work around things.\n-\n-   The parameter is to uniquely identify the problem to the user, so\n-   that they can say, I am having problem 59, and know that fix 7 will\n-   probably solve their problem.  Or, we can document what problem\n-   59 is, so they can understand how to work around it, should they\n-   ever run into it.\n-\n-   We used to tell people to \"fix the above error[s] and try recompiling\n-   the program\" via a call to fatal, but that message tended to look\n-   silly.  So instead, we just do the equivalent of a call to fatal in the\n-   same situation (call exit).\n-\n-   We used to assign sequential numbers for the aborts; now we use an\n-   encoding of the date the abort was added, since that has more meaning\n-   when we only see the error message.  */\n-\n-static int abortcount = 0;\n-\n+/* This is a wrapper around fancy_abort, as used in the back end and\n+   other front ends.  It will also report the magic number assigned to\n+   this particular abort.  That is for backward compatibility with the\n+   old C++ abort handler, which would just report the magic number.  */\n void\n-my_friendly_abort (i)\n-     int i;\n+friendly_abort (where, file, line, func)\n+     int where;\n+     const char *file;\n+     int line;\n+     const char *func;\n {\n-  /* if the previous error came through here, i.e. report_error_function\n-     ended up calling us again, don't just exit; we want a diagnostic of\n-     some kind.  */\n-  if (abortcount == 1)\n-    current_function_decl = NULL_TREE;\n-  else if (errorcount > 0 || sorrycount > 0)\n-    {\n-      if (abortcount > 1)\n-\t{\n-\t  if (i == 0)\n-\t    ack (\"Internal compiler error.\");\n-\t  else\n-\t    ack (\"Internal compiler error %d.\", i);\n-\t  ack (\"Please submit a full bug report.\");\n-\t  ack (\"See %s for instructions.\", GCCBUGURL);\n-\t}\n-      else\n-\terror (\"confused by earlier errors, bailing out\");\n-      \n-      exit (34);\n-    }\n-  ++abortcount;\n-\n-  if (i == 0)\n-    error (\"Internal compiler error.\");\n-  else\n-    error (\"Internal compiler error %d.\", i);\n+  if (where > 0)\n+    error (\"Internal error #%d.\", where);\n \n-  error (\"Please submit a full bug report.\");\n-  fatal (\"See %s for instructions.\", GCCBUGURL);\n+  fancy_abort (file, line, func);\n }\n \n-void\n-my_friendly_assert (cond, where)\n-     int cond, where;\n-{\n-  if (cond == 0)\n-    my_friendly_abort (where);\n-}\n \f\n /* Perform appropriate conversions on the initial value of a variable,\n    store it in the declaration DECL,"}, {"sha": "ced776a77d69e87529c9c5ee8e429b168b01cb9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "patch": "@@ -1,3 +1,12 @@\n+2000-07-20  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* g++.old-deja/g++.brendan/crash16.C,\n+\tg++.old-deja/g++.brendan/parse3.C,\n+\tg++.old-deja/g++.brendan/redecl1.C,\n+\tg++.old-deja/g++.ns/template13.C,\n+\tg++.old-deja/g++.other/decl4.C,\n+\tg++.old-deja/g++.pt/spec14.C: Mark as crash test, expected to fail.\n+\n 2000-07-20  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* lib/old-dejagnu.exp: Check for both \"Internal compiler error\""}, {"sha": "8031f75340a865c635aedb1bab225335d9d0b4c7", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash16.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash16.C?ref=1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "patch": "@@ -1,5 +1,6 @@\n // Build don't link: \n // GROUPS passed old-abort\n+// crash test - XFAIL *-*-*\n class Graph {\n public:\n       unsigned         char N;"}, {"sha": "9b5991d394dd1a62e0bcf7a6001b957a74dcaf17", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/parse3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fparse3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fparse3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fparse3.C?ref=1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "patch": "@@ -1,4 +1,5 @@\n // Build don't link: \n+// crash test - XFAIL *-*-*\n \n // these are marked as expected errors because they evidence an\n // ambiguity in the grammar between expressions and declarations."}, {"sha": "f717c458355e1dd1eddc9b7f29de68597623de97", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/redecl1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fredecl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fredecl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fredecl1.C?ref=1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "patch": "@@ -1,5 +1,6 @@\n // Build don't link: \n // GROUPS passed redeclaration\n-inline int min(int x, int y) {return x < y ? x : y;}\t\t/* 235 */// ERROR - .*\n+// crash test - XFAIL *-*-*\n+inline int min(int x, int y) {return x < y ? x : y;}\t/* 235 */// ERROR - .*\n int min(int a, int b);\n inline int min(int a, int b) {return (a < b)?a:b;}// ERROR - .*"}, {"sha": "722666ffe4ab7b3624e5783bbe49b5f0ec50a32a", "filename": "gcc/testsuite/g++.old-deja/g++.ns/template13.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Ftemplate13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Ftemplate13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Ftemplate13.C?ref=1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "patch": "@@ -1,5 +1,6 @@\n // Build don't link:\n // Templates defined outside must be declared inside\n+// crash test - XFAIL *-*-*\n namespace bar\n {\n   template<class T>"}, {"sha": "395f5b3536f941b1671f56eb9a41b3d2b8348099", "filename": "gcc/testsuite/g++.old-deja/g++.other/decl4.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl4.C?ref=1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "patch": "@@ -1,4 +1,5 @@\n // Build don't link:\n+// crash test - XFAIL *-*-*\n \n // Reported by Harri Porten <porten@tu-harburg.de>\n // Simplified for testsuite by Alexandre Oliva"}, {"sha": "997c732c2fde5789fed2bc451bd22a2202d17c60", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec14.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b493b8185a04b875c99c0dc4ef63005bb5fc54b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec14.C?ref=1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "patch": "@@ -1,3 +1,4 @@\n+// crash test - XFAIL *-*-*\n class X\n {\n public:"}]}