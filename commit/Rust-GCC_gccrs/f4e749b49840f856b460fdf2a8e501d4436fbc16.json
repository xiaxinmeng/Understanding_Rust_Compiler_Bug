{"sha": "f4e749b49840f856b460fdf2a8e501d4436fbc16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRlNzQ5YjQ5ODQwZjg1NmI0NjBmZGYyYThlNTAxZDQ0MzZmYmMxNg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2011-03-14T19:47:58Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2011-03-14T19:47:58Z"}, "message": "unwind-dw2.c: Include sys/sdt.h if it exists.\n\n\t* unwind-dw2.c: Include sys/sdt.h if it exists.\n\t(_Unwind_DebugHook): Use STAP_PROBE2.\n\t* config.in, configure: Rebuild.\n\t* configure.ac: Check for sys/sdt.h.\n\nFrom-SVN: r170954", "tree": {"sha": "a7d216e75ae40a2e56ee400b56f3a35b1d77e17b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7d216e75ae40a2e56ee400b56f3a35b1d77e17b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4e749b49840f856b460fdf2a8e501d4436fbc16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e749b49840f856b460fdf2a8e501d4436fbc16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e749b49840f856b460fdf2a8e501d4436fbc16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e749b49840f856b460fdf2a8e501d4436fbc16/comments", "author": null, "committer": null, "parents": [{"sha": "d34abfd27199742109a50122c3ee545a57b8fa6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34abfd27199742109a50122c3ee545a57b8fa6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d34abfd27199742109a50122c3ee545a57b8fa6f"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "0c9102c8fbcb2e2079851ca0ef2a1e5ce5adb858", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e749b49840f856b460fdf2a8e501d4436fbc16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e749b49840f856b460fdf2a8e501d4436fbc16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4e749b49840f856b460fdf2a8e501d4436fbc16", "patch": "@@ -1,3 +1,10 @@\n+2011-01-14  Tom Tromey  <tromey@redhat.com>\n+\n+\t* unwind-dw2.c: Include sys/sdt.h if it exists.\n+\t(_Unwind_DebugHook): Use STAP_PROBE2.\n+\t* config.in, configure: Rebuild.\n+\t* configure.ac: Check for sys/sdt.h.\n+\n 2011-03-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (ROUND_FLOOR): New constant."}, {"sha": "7604b687a899d853baf57844532c5082f649f00a", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e749b49840f856b460fdf2a8e501d4436fbc16/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e749b49840f856b460fdf2a8e501d4436fbc16/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=f4e749b49840f856b460fdf2a8e501d4436fbc16", "patch": "@@ -1408,6 +1408,9 @@\n #endif\n \n \n+/* Define if your target C library provides sys/sdt.h */\n+#undef HAVE_SYS_SDT_H\n+\n /* Define to 1 if you have the <sys/stat.h> header file. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_SYS_STAT_H"}, {"sha": "e5e6164102c749675422d6f7e490bca0435f515a", "filename": "gcc/configure", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e749b49840f856b460fdf2a8e501d4436fbc16/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e749b49840f856b460fdf2a8e501d4436fbc16/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=f4e749b49840f856b460fdf2a8e501d4436fbc16", "patch": "@@ -25792,6 +25792,19 @@ $as_echo \"#define TARGET_LIBC_PROVIDES_SSP 1\" >>confdefs.h\n \n fi\n \n+# Test for <sys/sdt.h> on the target.\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking sys/sdt.h in the target C library\" >&5\n+$as_echo_n \"checking sys/sdt.h in the target C library... \" >&6; }\n+have_sys_sdt_h=no\n+if test -f $target_header_dir/sys/sdt.h; then\n+\n+$as_echo \"#define HAVE_SYS_SDT_H 1\" >>confdefs.h\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $have_sys_sdt_h\" >&5\n+$as_echo \"$have_sys_sdt_h\" >&6; }\n+\n # Check if TFmode long double should be used by default or not.\n # Some glibc targets used DFmode long double, but with glibc 2.4\n # and later they can use TFmode."}, {"sha": "fd4dd4644740246fad56c6d4c2bbfafe207dc704", "filename": "gcc/configure.ac", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e749b49840f856b460fdf2a8e501d4436fbc16/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e749b49840f856b460fdf2a8e501d4436fbc16/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=f4e749b49840f856b460fdf2a8e501d4436fbc16", "patch": "@@ -4381,6 +4381,16 @@ if test x$gcc_cv_libc_provides_ssp = xyes; then\n \t    [Define if your target C library provides stack protector support])\n fi\n \n+# Test for <sys/sdt.h> on the target.\n+GCC_TARGET_TEMPLATE([HAVE_SYS_SDT_H])\n+AC_MSG_CHECKING(sys/sdt.h in the target C library)\n+have_sys_sdt_h=no\n+if test -f $target_header_dir/sys/sdt.h; then\n+  AC_DEFINE(HAVE_SYS_SDT_H, 1,\n+            [Define if your target C library provides sys/sdt.h])\n+fi\n+AC_MSG_RESULT($have_sys_sdt_h)\n+\n # Check if TFmode long double should be used by default or not.\n # Some glibc targets used DFmode long double, but with glibc 2.4\n # and later they can use TFmode."}, {"sha": "25990b4e73ba84df528930d61c9fea7f64c4e652", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e749b49840f856b460fdf2a8e501d4436fbc16/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e749b49840f856b460fdf2a8e501d4436fbc16/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=f4e749b49840f856b460fdf2a8e501d4436fbc16", "patch": "@@ -1,6 +1,6 @@\n /* DWARF2 exception handling and frame unwind runtime interface routines.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n-   2008, 2009, 2010  Free Software Foundation, Inc.\n+   2008, 2009, 2010, 2011  Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -37,6 +37,10 @@\n #include \"gthr.h\"\n #include \"unwind-dw2.h\"\n \n+#ifdef HAVE_SYS_SDT_H\n+#include <sys/sdt.h>\n+#endif\n+\n #ifndef __USING_SJLJ_EXCEPTIONS__\n \n #ifndef STACK_GROWS_DOWNWARD\n@@ -1493,7 +1497,13 @@ static void\n _Unwind_DebugHook (void *cfa __attribute__ ((__unused__)),\n \t\t   void *handler __attribute__ ((__unused__)))\n {\n+  /* We only want to use stap probes starting with v3.  Earlier\n+     versions added too much startup cost.  */\n+#if defined (HAVE_SYS_SDT_H) && defined (STAP_PROBE2) && _SDT_NOTE_TYPE >= 3\n+  STAP_PROBE2 (libgcc, unwind, cfa, handler);\n+#else\n   asm (\"\");\n+#endif\n }\n \n /* Install TARGET into CURRENT so that we can return to it.  This is a"}]}