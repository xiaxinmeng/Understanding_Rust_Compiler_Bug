{"sha": "f70773947a9ab42b3197e991e9738bf816523b02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcwNzczOTQ3YTlhYjQyYjMxOTdlOTkxZTk3MzhiZjgxNjUyM2IwMg==", "commit": {"author": {"name": "Franz Sirl", "email": "Franz.Sirl-kernel@lauterbach.com", "date": "2000-02-11T15:48:24Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-02-11T15:48:24Z"}, "message": "expr.c (compare_records): Delete maximum_field_alignment declaration.\n\n\t* expr.c (compare_records): Delete maximum_field_alignment declaration.\n\t* inout.c (inout_init): Likewise.\n\t(build_chill_gettextaccess): Likewise.\n\t(build_enum_tables): Likewise.\n\t* lang.c: Likewise.\n\t* satisfy.c (satisfy): Likewise.\n\t* tasking.c (build_tasking_struct): Likewise.\n\t(build_tasking_message_type): Likewise.\n\t* typeck.c (build_init_struct): Likewise.\n\n\t* except.c (emit_setup_handler): Make save_maximum_field_alignment\n\tunsigned int to match maximum_field_alignment.\n\t* inout.c (inout_init): Likewise.\n\t(build_chill_gettextaccess): Likewise.\n\t(build_enum_tables): Likewise.\n\t* tasking.c (build_tasking_struct): Likewise.\n\t(build_tasking_message_type): Likewise.\n\t* typeck.c (build_init_struct): Likewise.\n\nFrom-SVN: r31920", "tree": {"sha": "6a0db9594d0c1e5a245a6d005d404db780e17902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a0db9594d0c1e5a245a6d005d404db780e17902"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f70773947a9ab42b3197e991e9738bf816523b02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f70773947a9ab42b3197e991e9738bf816523b02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f70773947a9ab42b3197e991e9738bf816523b02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f70773947a9ab42b3197e991e9738bf816523b02/comments", "author": {"login": "jinkama-san", "id": 1462162, "node_id": "MDQ6VXNlcjE0NjIxNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1462162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jinkama-san", "html_url": "https://github.com/jinkama-san", "followers_url": "https://api.github.com/users/jinkama-san/followers", "following_url": "https://api.github.com/users/jinkama-san/following{/other_user}", "gists_url": "https://api.github.com/users/jinkama-san/gists{/gist_id}", "starred_url": "https://api.github.com/users/jinkama-san/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jinkama-san/subscriptions", "organizations_url": "https://api.github.com/users/jinkama-san/orgs", "repos_url": "https://api.github.com/users/jinkama-san/repos", "events_url": "https://api.github.com/users/jinkama-san/events{/privacy}", "received_events_url": "https://api.github.com/users/jinkama-san/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3637ef0c711cbf1072849bd22fbc45f5d2395614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3637ef0c711cbf1072849bd22fbc45f5d2395614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3637ef0c711cbf1072849bd22fbc45f5d2395614"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "386577c4191ede284053a5d267500682ef810842", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70773947a9ab42b3197e991e9738bf816523b02/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70773947a9ab42b3197e991e9738bf816523b02/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=f70773947a9ab42b3197e991e9738bf816523b02", "patch": "@@ -1,3 +1,24 @@\n+2000-02-11  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n+\n+\t* expr.c (compare_records): Delete maximum_field_alignment declaration.\n+\t* inout.c (inout_init): Likewise.\n+\t(build_chill_gettextaccess): Likewise.\n+\t(build_enum_tables): Likewise.\n+\t* lang.c: Likewise.\n+\t* satisfy.c (satisfy): Likewise.\n+\t* tasking.c (build_tasking_struct): Likewise.\n+\t(build_tasking_message_type): Likewise.\n+\t* typeck.c (build_init_struct): Likewise.\n+\n+\t* except.c (emit_setup_handler): Make save_maximum_field_alignment\n+\tunsigned int to match maximum_field_alignment.\n+\t* inout.c (inout_init): Likewise.\n+\t(build_chill_gettextaccess): Likewise.\n+\t(build_enum_tables): Likewise.\n+\t* tasking.c (build_tasking_struct): Likewise.\n+\t(build_tasking_message_type): Likewise.\n+\t* typeck.c (build_init_struct): Likewise.\n+\n 2000-02-10  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \t* except.c (maximum_field_alignment): Remove duplicate declaration."}, {"sha": "a59e6759a68d39554909cdbcad7c404fa276b87c", "filename": "gcc/ch/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70773947a9ab42b3197e991e9738bf816523b02/gcc%2Fch%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70773947a9ab42b3197e991e9738bf816523b02/gcc%2Fch%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fexcept.c?ref=f70773947a9ab42b3197e991e9738bf816523b02", "patch": "@@ -396,7 +396,7 @@ emit_setup_handler ()\n       /* We temporarily reset the maximum_field_alignment to zero so the\n \t compiler's exception data structures can be compatible with the\n \t run-time system, even when we're compiling with -fpack. */\n-      int save_maximum_field_alignment = maximum_field_alignment;\n+      unsigned int save_maximum_field_alignment = maximum_field_alignment;\n       maximum_field_alignment = 0;\n       push_obstacks_nochange ();\n       end_temporary_allocation ();"}, {"sha": "13e5bd871c3bbe9047d662c682df5e05ed4d57e9", "filename": "gcc/ch/expr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70773947a9ab42b3197e991e9738bf816523b02/gcc%2Fch%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70773947a9ab42b3197e991e9738bf816523b02/gcc%2Fch%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fexpr.c?ref=f70773947a9ab42b3197e991e9738bf816523b02", "patch": "@@ -3469,7 +3469,6 @@ compare_records (exp0, exp1)\n   int have_variants = 0;\n \n   tree result = boolean_true_node;\n-  extern int maximum_field_alignment;\n \n   if (TREE_CODE (type) != RECORD_TYPE)\n     abort ();"}, {"sha": "56164ac3857945a13ee557a734cfa7f3d1a5f710", "filename": "gcc/ch/inout.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70773947a9ab42b3197e991e9738bf816523b02/gcc%2Fch%2Finout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70773947a9ab42b3197e991e9738bf816523b02/gcc%2Fch%2Finout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Finout.c?ref=f70773947a9ab42b3197e991e9738bf816523b02", "patch": "@@ -1088,8 +1088,7 @@ inout_init ()\n   /* We temporarily reset the maximum_field_alignment to zero so the\n      compiler's init data structures can be compatible with the\n      run-time system, even when we're compiling with -fpack. */\n-  extern int maximum_field_alignment;\n-  int save_maximum_field_alignment = maximum_field_alignment;\n+  unsigned int save_maximum_field_alignment = maximum_field_alignment;\n \n   extern tree chill_predefined_function_type;\n   tree endlink = void_list_node;\n@@ -2821,8 +2820,7 @@ build_chill_gettextaccess (text)\n   tree access, refaccess, acc, decl, listbase;\n   tree tlocmode, indexmode, dynamic;\n   tree result;\n-  extern int maximum_field_alignment;\n-  int save_maximum_field_alignment = maximum_field_alignment;\n+  unsigned int save_maximum_field_alignment = maximum_field_alignment;\n \n   if (! check_text (text, 1, \"GETTEXTACCESS\"))\n     return error_mark_node;\n@@ -4590,8 +4588,7 @@ void build_enum_tables ()\n   /* We temporarily reset the maximum_field_alignment to zero so the\n      compiler's init data structures can be compatible with the\n      run-time system, even when we're compiling with -fpack. */\n-  extern int maximum_field_alignment;\n-  int save_maximum_field_alignment;\n+  unsigned int save_maximum_field_alignment;\n     \n   if (pass == 1)\n     return;"}, {"sha": "42470cf354d8728ce2c546344985f02c7bae12d2", "filename": "gcc/ch/lang.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70773947a9ab42b3197e991e9738bf816523b02/gcc%2Fch%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70773947a9ab42b3197e991e9738bf816523b02/gcc%2Fch%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flang.c?ref=f70773947a9ab42b3197e991e9738bf816523b02", "patch": "@@ -50,8 +50,6 @@ int special_UC = 0;\n char* chill_real_input_filename;\n extern FILE* finput;\n \n-extern int maximum_field_alignment;\n-\n static int deep_const_expr\t\t\tPARAMS ((tree));\n static void chill_print_error_function\t\tPARAMS ((const char *));\n \f"}, {"sha": "a74766963eb15912eea2c6de52d168c112193e3d", "filename": "gcc/ch/satisfy.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70773947a9ab42b3197e991e9738bf816523b02/gcc%2Fch%2Fsatisfy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70773947a9ab42b3197e991e9738bf816523b02/gcc%2Fch%2Fsatisfy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fsatisfy.c?ref=f70773947a9ab42b3197e991e9738bf816523b02", "patch": "@@ -533,8 +533,7 @@ satisfy (exp, chain)\n \t    /* if we have an ACCESS or TEXT mode we have to set\n \t       maximum_field_alignment to 0 to fit with runtime\n \t       system, even when we compile with -fpack. */\n-\t    extern int maximum_field_alignment;\n-\t    int save_maximum_field_alignment = maximum_field_alignment;\n+\t    unsigned int save_maximum_field_alignment = maximum_field_alignment;\n \n \t    if (CH_IS_ACCESS_MODE (exp) || CH_IS_TEXT_MODE (exp))\n \t      maximum_field_alignment = 0;"}, {"sha": "301694261602141c85e4d7855e33359a06a61578", "filename": "gcc/ch/tasking.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70773947a9ab42b3197e991e9738bf816523b02/gcc%2Fch%2Ftasking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70773947a9ab42b3197e991e9738bf816523b02/gcc%2Fch%2Ftasking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftasking.c?ref=f70773947a9ab42b3197e991e9738bf816523b02", "patch": "@@ -763,8 +763,7 @@ build_tasking_struct ()\n   /* We temporarily reset the maximum_field_alignment to zero so the\n      compiler's init data structures can be compatible with the\n      run-time system, even when we're compiling with -fpack. */\n-  extern int maximum_field_alignment;\n-  int save_maximum_field_alignment = maximum_field_alignment;\n+  unsigned int save_maximum_field_alignment = maximum_field_alignment;\n   maximum_field_alignment = 0;\n \n   decl1 = build_decl (FIELD_DECL, get_identifier (\"TaskName\"),\n@@ -1239,8 +1238,7 @@ build_tasking_message_type ()\n   tree temp;\n   /* We temporarily reset maximum_field_alignment to deal with\n      the runtime system. */\n-  extern int maximum_field_alignment;\n-  int save_maximum_field_alignment = maximum_field_alignment;\n+  unsigned int save_maximum_field_alignment = maximum_field_alignment;\n   tree field1, field2, field3;\n \n   maximum_field_alignment = 0;"}, {"sha": "5082b784ef3e29dbf991b96752fe41d64a398816", "filename": "gcc/ch/typeck.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70773947a9ab42b3197e991e9738bf816523b02/gcc%2Fch%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70773947a9ab42b3197e991e9738bf816523b02/gcc%2Fch%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftypeck.c?ref=f70773947a9ab42b3197e991e9738bf816523b02", "patch": "@@ -2168,8 +2168,7 @@ build_init_struct ()\n   /* We temporarily reset the maximum_field_alignment to zero so the\n      compiler's init data structures can be compatible with the\n      run-time system, even when we're compiling with -fpack. */\n-  extern int maximum_field_alignment;\n-  int save_maximum_field_alignment = maximum_field_alignment;\n+  unsigned int save_maximum_field_alignment = maximum_field_alignment;\n   maximum_field_alignment = 0;\n \n   decl1 = build_decl (FIELD_DECL, get_identifier (\"__INIT_ENTRY\"),"}]}