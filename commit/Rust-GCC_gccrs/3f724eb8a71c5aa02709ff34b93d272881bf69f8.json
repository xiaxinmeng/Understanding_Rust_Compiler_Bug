{"sha": "3f724eb8a71c5aa02709ff34b93d272881bf69f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y3MjRlYjhhNzFjNWFhMDI3MDlmZjM0YjkzZDI3Mjg4MWJmNjlmOA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-05T20:21:31Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-05T20:21:31Z"}, "message": "c-semantics.c (build_stmt): Use TYPE_P instead of IS_NON_TYPE_CODE_CLASS.\n\ngcc/\n\t* c-semantics.c (build_stmt): Use TYPE_P instead of\n\tIS_NON_TYPE_CODE_CLASS.\n\t* tree.h (IS_NON_TYPE_CODE_CLASS): Remove.\n\t(NON_TYPE_CHECK): Use TYPE_P instead of\n\tIS_NON_TYPE_CODE_CLASS.\n\njava/\n\t* expr.c (build_expr_wfl, expr_add_location): Use TYPE_P\n\tinstead of IS_NON_TYPE_CODE_CLASS.\n\nFrom-SVN: r95942", "tree": {"sha": "fba2d3323d7f2571f5c37de39187febd503d8e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fba2d3323d7f2571f5c37de39187febd503d8e75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f724eb8a71c5aa02709ff34b93d272881bf69f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f724eb8a71c5aa02709ff34b93d272881bf69f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f724eb8a71c5aa02709ff34b93d272881bf69f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f724eb8a71c5aa02709ff34b93d272881bf69f8/comments", "author": null, "committer": null, "parents": [{"sha": "19db01bb4587701a48494f8ec1ef18933652a614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19db01bb4587701a48494f8ec1ef18933652a614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19db01bb4587701a48494f8ec1ef18933652a614"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "3224ef22489abd5d404c61763d17c9952c3bd07e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f724eb8a71c5aa02709ff34b93d272881bf69f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f724eb8a71c5aa02709ff34b93d272881bf69f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f724eb8a71c5aa02709ff34b93d272881bf69f8", "patch": "@@ -1,3 +1,11 @@\n+2005-03-05  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-semantics.c (build_stmt): Use TYPE_P instead of\n+\tIS_NON_TYPE_CODE_CLASS.\n+\t* tree.h (IS_NON_TYPE_CODE_CLASS): Remove.\n+\t(NON_TYPE_CHECK): Use TYPE_P instead of\n+\tIS_NON_TYPE_CODE_CLASS.\n+\n 2005-03-05  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* doc/c-tree.texi: Wrap comments in @r{}."}, {"sha": "ec902b617292bf220addbc0b92d143f4922c4250", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f724eb8a71c5aa02709ff34b93d272881bf69f8/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f724eb8a71c5aa02709ff34b93d272881bf69f8/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=3f724eb8a71c5aa02709ff34b93d272881bf69f8", "patch": "@@ -164,7 +164,7 @@ build_stmt (enum tree_code code, ...)\n   for (i = 0; i < length; i++)\n     {\n       tree t = va_arg (p, tree);\n-      if (t && IS_NON_TYPE_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (t))))\n+      if (t && !TYPE_P (t))\n         side_effects |= TREE_SIDE_EFFECTS (t);\n       TREE_OPERAND (ret, i) = t;\n     }"}, {"sha": "8623ea36755f7ce718284f5f89a0cbc6e5bcb538", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f724eb8a71c5aa02709ff34b93d272881bf69f8/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f724eb8a71c5aa02709ff34b93d272881bf69f8/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3f724eb8a71c5aa02709ff34b93d272881bf69f8", "patch": "@@ -1,3 +1,8 @@\n+2005-03-05  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* expr.c (build_expr_wfl, expr_add_location): Use TYPE_P\n+\tinstead of IS_NON_TYPE_CODE_CLASS.\n+\n 2005-03-04  Andrew Haley  <aph@redhat.com>\n \n         PR java/18362"}, {"sha": "2c517a16f2d5c6a93aaa680f55edda982318a594", "filename": "gcc/java/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f724eb8a71c5aa02709ff34b93d272881bf69f8/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f724eb8a71c5aa02709ff34b93d272881bf69f8/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=3f724eb8a71c5aa02709ff34b93d272881bf69f8", "patch": "@@ -3591,7 +3591,7 @@ build_expr_wfl (tree node,\n   EXPR_WFL_NODE (wfl) = node;\n   if (node)\n     {\n-      if (IS_NON_TYPE_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (node))))\n+      if (!TYPE_P (node))\n \tTREE_SIDE_EFFECTS (wfl) = TREE_SIDE_EFFECTS (node);\n       TREE_TYPE (wfl) = TREE_TYPE (node);\n     }\n@@ -3627,7 +3627,7 @@ expr_add_location (tree node, source_location location, bool statement)\n     EXPR_WFL_EMIT_LINE_NOTE (wfl) = 1;\n   if (node)\n     {\n-      if (IS_NON_TYPE_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (node))))\n+      if (!TYPE_P (node))\n \tTREE_SIDE_EFFECTS (wfl) = TREE_SIDE_EFFECTS (node);\n       TREE_TYPE (wfl) = TREE_TYPE (node);\n     }"}, {"sha": "2592e613aeee2269eb1cedeeebeb70152f3441fc", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f724eb8a71c5aa02709ff34b93d272881bf69f8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f724eb8a71c5aa02709ff34b93d272881bf69f8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3f724eb8a71c5aa02709ff34b93d272881bf69f8", "patch": "@@ -134,10 +134,6 @@ extern const enum tree_code_class tree_code_type[];\n #define EXPRESSION_CLASS_P(CODE)\\\n \t(TREE_CODE_CLASS (TREE_CODE (CODE)) == tcc_expression)\n \n-/* Returns nonzero iff CLASS is not the tree code of a type.  */\n-\n-#define IS_NON_TYPE_CODE_CLASS(CLASS) ((CLASS) != tcc_type)\n-\n /* Returns nonzero iff CODE represents a type or declaration.  */\n \n #define IS_TYPE_OR_DECL_P(CODE)\\\n@@ -557,8 +553,7 @@ struct tree_common GTY(())\n /* These checks have to be special cased.  */\n #define NON_TYPE_CHECK(T) __extension__\t\t\t\t\t\\\n ({  const tree __t = (T);\t\t\t\t\t\t\\\n-    char const __c = TREE_CODE_CLASS (TREE_CODE (__t));\t\t\t\\\n-    if (!IS_NON_TYPE_CODE_CLASS (__c))\t\t\t\t\t\\\n+    if (TYPE_P (__t))\t\t\t\t\t\t\t\\\n       tree_class_check_failed (__t, tcc_type, __FILE__, __LINE__,\t\\\n \t\t\t       __FUNCTION__);\t\t\t\t\\\n     __t; })"}]}