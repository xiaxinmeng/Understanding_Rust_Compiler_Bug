{"sha": "e022193eeeb79f3db1f4df849610eacee01fa4a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAyMjE5M2VlZWI3OWYzZGIxZjRkZjg0OTYxMGVhY2VlMDFmYTRhOA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-03-21T20:24:41Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-03-21T20:24:41Z"}, "message": "re PR target/52479 (SH Target: SH4A DFmode fsca tests failing)\n\n\tPR target/52479\n\t* config/sh/sh-protos.h (sh_fsca_df2int): Remove.\n\t* config/sh/sh.c (sh_fsca_df2int_rtx, sh_fsca_df2int): Remove.\n\t* config/sh/sh.md (sindf2, cosdf2): Remove.\n\n\t* gcc.target/sh/sh4a-cos.c: Remove.\n\t* gcc.target/sh/sh4a-sin.c: Remove.\n\t* gcc.target/sh/sh4a-sincos.c: Remove.\n\nFrom-SVN: r185617", "tree": {"sha": "6ee93621a1bda0910326a0773dae6a5a2b125dab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ee93621a1bda0910326a0773dae6a5a2b125dab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e022193eeeb79f3db1f4df849610eacee01fa4a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e022193eeeb79f3db1f4df849610eacee01fa4a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e022193eeeb79f3db1f4df849610eacee01fa4a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e022193eeeb79f3db1f4df849610eacee01fa4a8/comments", "author": null, "committer": null, "parents": [{"sha": "6c5bfec01b00cdba798a01e25a38c3f211c32b2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c5bfec01b00cdba798a01e25a38c3f211c32b2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c5bfec01b00cdba798a01e25a38c3f211c32b2b"}], "stats": {"total": 112, "additions": 14, "deletions": 98}, "files": [{"sha": "62a8389c7bea670ddd7244889a73ecddd71b825b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e022193eeeb79f3db1f4df849610eacee01fa4a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e022193eeeb79f3db1f4df849610eacee01fa4a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e022193eeeb79f3db1f4df849610eacee01fa4a8", "patch": "@@ -1,3 +1,10 @@\n+2012-03-21  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/52479\n+\t* config/sh/sh-protos.h (sh_fsca_df2int): Remove.\n+\t* config/sh/sh.c (sh_fsca_df2int_rtx, sh_fsca_df2int): Remove.\n+\t* config/sh/sh.md (sindf2, cosdf2): Remove.\n+\n 2012-03-21  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR/target 52642"}, {"sha": "386188bb99f015f0f254c441f5dbe72123c4ff2d", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e022193eeeb79f3db1f4df849610eacee01fa4a8/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e022193eeeb79f3db1f4df849610eacee01fa4a8/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=e022193eeeb79f3db1f4df849610eacee01fa4a8", "patch": "@@ -39,7 +39,6 @@ enum sh_function_kind {\n \n #ifdef RTX_CODE\n extern rtx sh_fsca_sf2int (void);\n-extern rtx sh_fsca_df2int (void);\n extern rtx sh_fsca_int2sf (void);\n \n /* Declare functions defined in sh.c and used in templates.  */"}, {"sha": "7141a6362041e76ccc9b23d0f2cd53a6848b2bdd", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e022193eeeb79f3db1f4df849610eacee01fa4a8/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e022193eeeb79f3db1f4df849610eacee01fa4a8/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=e022193eeeb79f3db1f4df849610eacee01fa4a8", "patch": "@@ -12004,27 +12004,6 @@ sh_fsca_sf2int (void)\n   return sh_fsca_sf2int_rtx;\n }\n \n-/* This function returns a constant rtx that represents pi / 2**15 in\n-   DFmode.  it's used to scale DFmode angles, in radians, to a\n-   fixed-point signed 16.16-bit fraction of a full circle, i.e., 2*pi\n-   maps to 0x10000).  */\n-\n-static GTY(()) rtx sh_fsca_df2int_rtx;\n-\n-rtx\n-sh_fsca_df2int (void)\n-{\n-  if (! sh_fsca_df2int_rtx)\n-    {\n-      REAL_VALUE_TYPE rv;\n-\n-      real_from_string (&rv, \"10430.378350470453\");\n-      sh_fsca_df2int_rtx = const_double_from_real_value (rv, DFmode);\n-    }\n-\n-  return sh_fsca_df2int_rtx;\n-}\n-\n /* This function returns a constant rtx that represents 2**15 / pi in\n    SFmode.  it's used to scale a fixed-point signed 16.16-bit fraction\n    of a full circle back to a SFmode value, i.e., 0x10000 maps to"}, {"sha": "f5bcae219c30e7032cb4c9ef619ea56d8b022393", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e022193eeeb79f3db1f4df849610eacee01fa4a8/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e022193eeeb79f3db1f4df849610eacee01fa4a8/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=e022193eeeb79f3db1f4df849610eacee01fa4a8", "patch": "@@ -10658,48 +10658,6 @@ label:\n   DONE;\n })\n \n-(define_expand \"sindf2\"\n-  [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"\")\n-\t(unspec:DF [(match_operand:DF 1 \"fp_arith_reg_operand\" \"\")]\n-\t\t   UNSPEC_FSINA))]\n-  \"TARGET_SH4A_FP && ! TARGET_FPU_SINGLE && flag_unsafe_math_optimizations\"\n-{\n-  rtx scaled = gen_reg_rtx (DFmode);\n-  rtx truncated = gen_reg_rtx (SImode);\n-  rtx fsca = gen_reg_rtx (V2SFmode);\n-  rtx scale_reg = force_reg (DFmode, sh_fsca_df2int ());\n-  rtx sfresult = gen_reg_rtx (SFmode);\n-\n-  emit_df_insn (gen_muldf3 (scaled, operands[1], scale_reg));\n-  emit_df_insn (gen_fix_truncdfsi2 (truncated, scaled));\n-  emit_sf_insn (gen_fsca (fsca, truncated, sh_fsca_int2sf (),\n-\t\t\t  get_fpscr_rtx ()));\n-  emit_move_insn (sfresult, gen_rtx_SUBREG (SFmode, fsca, 0));\n-  emit_df_insn (gen_extendsfdf2 (operands[0], sfresult));\n-  DONE;\n-})\n-\n-(define_expand \"cosdf2\"\n-  [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"\")\n-\t(unspec:DF [(match_operand:DF 1 \"fp_arith_reg_operand\" \"\")]\n-\t\t   UNSPEC_FCOSA))]\n-  \"TARGET_SH4A_FP && ! TARGET_FPU_SINGLE && flag_unsafe_math_optimizations\"\n-{\n-  rtx scaled = gen_reg_rtx (DFmode);\n-  rtx truncated = gen_reg_rtx (SImode);\n-  rtx fsca = gen_reg_rtx (V2SFmode);\n-  rtx scale_reg = force_reg (DFmode, sh_fsca_df2int ());\n-  rtx sfresult = gen_reg_rtx (SFmode);\n-\n-  emit_df_insn (gen_muldf3 (scaled, operands[1], scale_reg));\n-  emit_df_insn (gen_fix_truncdfsi2 (truncated, scaled));\n-  emit_sf_insn (gen_fsca (fsca, truncated, sh_fsca_int2sf (),\n-\t\t\t  get_fpscr_rtx ()));\n-  emit_move_insn (sfresult, gen_rtx_SUBREG (SFmode, fsca, 4));\n-  emit_df_insn (gen_extendsfdf2 (operands[0], sfresult));\n-  DONE;\n-})\n-\n (define_expand \"abssf2\"\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"\")\n \t(abs:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"\")))]"}, {"sha": "eec8dea62efdfa6aee569e646906aeb6e3ae71f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e022193eeeb79f3db1f4df849610eacee01fa4a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e022193eeeb79f3db1f4df849610eacee01fa4a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e022193eeeb79f3db1f4df849610eacee01fa4a8", "patch": "@@ -1,3 +1,10 @@\n+2012-03-21  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/52479\n+\t* gcc.target/sh/sh4a-cos.c: Remove.\n+\t* gcc.target/sh/sh4a-sin.c: Remove.\n+\t* gcc.target/sh/sh4a-sincos.c: Remove.\n+\n 2012-03-21  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* gcc.target/arm/neon/vgetQ_laneu64.c: Regenerated."}, {"sha": "c2e421c6a055fcd68c06b8bada41d9a3a7d8ceec", "filename": "gcc/testsuite/gcc.target/sh/sh4a-cos.c", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c5bfec01b00cdba798a01e25a38c3f211c32b2b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-cos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c5bfec01b00cdba798a01e25a38c3f211c32b2b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-cos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-cos.c?ref=6c5bfec01b00cdba798a01e25a38c3f211c32b2b", "patch": "@@ -1,11 +0,0 @@\n-/* Verify that we generate single-precision sine and cosine approximate\n-   (fsca) in fast math mode on SH4A with FPU.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n-/* { dg-options \"-O -ffast-math\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n-/* { dg-final { scan-assembler \"fsca\" } } */\n-\n-#include <math.h>\n-\n-double test(double f) { return cos(f); }\n-"}, {"sha": "cd8f0783d7bfcabbe1ecd234bbe667ef584bf060", "filename": "gcc/testsuite/gcc.target/sh/sh4a-sin.c", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c5bfec01b00cdba798a01e25a38c3f211c32b2b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c5bfec01b00cdba798a01e25a38c3f211c32b2b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sin.c?ref=6c5bfec01b00cdba798a01e25a38c3f211c32b2b", "patch": "@@ -1,11 +0,0 @@\n-/* Verify that we generate single-precision sine and cosine approximate\n-   (fsca) in fast math mode on SH4A with FPU.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n-/* { dg-options \"-O -ffast-math\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n-/* { dg-final { scan-assembler \"fsca\" } } */\n-\n-#include <math.h>\n-\n-double test(double f) { return sin(f); }\n-"}, {"sha": "423dda1433b9c875c1a38fa257cc85c3e94174f1", "filename": "gcc/testsuite/gcc.target/sh/sh4a-sincos.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c5bfec01b00cdba798a01e25a38c3f211c32b2b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sincos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c5bfec01b00cdba798a01e25a38c3f211c32b2b/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sincos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sincos.c?ref=6c5bfec01b00cdba798a01e25a38c3f211c32b2b", "patch": "@@ -1,12 +0,0 @@\n-/* Verify that we generate a single single-precision sine and cosine\n-   approximate (fsca) in fast math mode when a function computes both\n-   sine and cosine.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n-/* { dg-options \"-O -ffast-math\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n-/* { dg-final { scan-assembler-times \"fsca\" 1 } } */\n-\n-#include <math.h>\n-\n-double test(double f) { return sin(f) + cos(f); }\n-"}]}