{"sha": "d3669566a7295676de7ae64cba01e8c3258321f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM2Njk1NjZhNzI5NTY3NmRlN2FlNjRjYmEwMWU4YzMyNTgzMjFmNQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-11-06T17:32:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-11-06T17:32:40Z"}, "message": "ipa-inline.c (compute_uninlined_call_time): Return gcov_type.\n\n\t* ipa-inline.c (compute_uninlined_call_time): Return gcov_type.\n\t(compute_inlined_call_time): Watch overflows.\n\t(relative_time_benefit): Compute in gcov_type.\n\nFrom-SVN: r193249", "tree": {"sha": "abfafac6fff8d3f68f3f7615907940c7f4ea8ec2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abfafac6fff8d3f68f3f7615907940c7f4ea8ec2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3669566a7295676de7ae64cba01e8c3258321f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3669566a7295676de7ae64cba01e8c3258321f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3669566a7295676de7ae64cba01e8c3258321f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3669566a7295676de7ae64cba01e8c3258321f5/comments", "author": null, "committer": null, "parents": [{"sha": "1a99ae7bd92b133fc5e39ee9bebc632794732152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a99ae7bd92b133fc5e39ee9bebc632794732152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a99ae7bd92b133fc5e39ee9bebc632794732152"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "9b274f88179bbd9e2c1f4d93c96c5b8798efe426", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3669566a7295676de7ae64cba01e8c3258321f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3669566a7295676de7ae64cba01e8c3258321f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3669566a7295676de7ae64cba01e8c3258321f5", "patch": "@@ -1,3 +1,9 @@\n+2012-11-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-inline.c (compute_uninlined_call_time): Return gcov_type.\n+\t(compute_inlined_call_time): Watch overflows.\n+\t(relative_time_benefit): Compute in gcov_type.\n+\n 2012-11-06  Jan Hubicka  <jh@suse.cz>\n \n \t* cfgloopanal.c (get_loop_hot_path): New function."}, {"sha": "4b705799855c52ad66536fe4576f2ca74eee4e04", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3669566a7295676de7ae64cba01e8c3258321f5/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3669566a7295676de7ae64cba01e8c3258321f5/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=d3669566a7295676de7ae64cba01e8c3258321f5", "patch": "@@ -459,16 +459,16 @@ want_early_inline_function_p (struct cgraph_edge *e)\n /* Compute time of the edge->caller + edge->callee execution when inlining\n    does not happen.  */\n \n-inline int\n+inline gcov_type\n compute_uninlined_call_time (struct inline_summary *callee_info,\n \t\t\t     struct cgraph_edge *edge)\n {\n-  int uninlined_call_time =\n+  gcov_type uninlined_call_time =\n     RDIV ((gcov_type)callee_info->time * MAX (edge->frequency, 1),\n \t  CGRAPH_FREQ_BASE);\n-  int caller_time = inline_summary (edge->caller->global.inlined_to\n-\t\t\t\t    ? edge->caller->global.inlined_to\n-\t\t\t\t    : edge->caller)->time;\n+  gcov_type caller_time = inline_summary (edge->caller->global.inlined_to\n+\t\t\t\t          ? edge->caller->global.inlined_to\n+\t\t\t\t          : edge->caller)->time;\n   return uninlined_call_time + caller_time;\n }\n \n@@ -479,12 +479,13 @@ inline gcov_type\n compute_inlined_call_time (struct cgraph_edge *edge,\n \t\t\t   int edge_time)\n {\n-  int caller_time = inline_summary (edge->caller->global.inlined_to\n-\t\t\t\t    ? edge->caller->global.inlined_to\n-\t\t\t\t    : edge->caller)->time;\n-  int time = caller_time + RDIV ((edge_time - inline_edge_summary (edge)->call_stmt_time)\n-\t\t\t         * MAX (edge->frequency, 1),\n-\t\t\t\t CGRAPH_FREQ_BASE);\n+  gcov_type caller_time = inline_summary (edge->caller->global.inlined_to\n+\t\t\t\t\t  ? edge->caller->global.inlined_to\n+\t\t\t\t\t  : edge->caller)->time;\n+  gcov_type time = (caller_time\n+\t\t    + RDIV (((gcov_type) edge_time\n+\t\t\t     - inline_edge_summary (edge)->call_stmt_time)\n+\t\t    * MAX (edge->frequency, 1), CGRAPH_FREQ_BASE));\n   /* Possible one roundoff error, but watch for overflows.  */\n   gcc_checking_assert (time >= INT_MIN / 2);\n   if (time < 0)\n@@ -770,9 +771,9 @@ relative_time_benefit (struct inline_summary *callee_info,\n \t\t       struct cgraph_edge *edge,\n \t\t       int edge_time)\n {\n-  int relbenefit;\n-  int uninlined_call_time = compute_uninlined_call_time (callee_info, edge);\n-  int inlined_call_time = compute_inlined_call_time (edge, edge_time);\n+  gcov_type relbenefit;\n+  gcov_type uninlined_call_time = compute_uninlined_call_time (callee_info, edge);\n+  gcov_type inlined_call_time = compute_inlined_call_time (edge, edge_time);\n \n   /* Inlining into extern inline function is not a win.  */\n   if (DECL_EXTERNAL (edge->caller->global.inlined_to\n@@ -918,7 +919,7 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n \t\t   (int) badness, (double)edge->frequency / CGRAPH_FREQ_BASE,\n \t\t   relative_time_benefit (callee_info, edge, edge_time) * 100.0\n \t\t   / RELATIVE_TIME_BENEFIT_RANGE, \n-\t\t   compute_uninlined_call_time (callee_info, edge),\n+\t\t   (int)compute_uninlined_call_time (callee_info, edge),\n \t\t   (int)compute_inlined_call_time (edge, edge_time),\n \t\t   estimate_growth (callee),\n \t\t   callee_info->growth);"}]}