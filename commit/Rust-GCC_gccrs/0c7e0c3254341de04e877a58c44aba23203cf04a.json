{"sha": "0c7e0c3254341de04e877a58c44aba23203cf04a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM3ZTBjMzI1NDM0MWRlMDRlODc3YTU4YzQ0YWJhMjMyMDNjZjA0YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-20T13:42:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-20T13:42:58Z"}, "message": "[multiple changes]\n\n2014-02-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Iterator_Specification): Initialize\n\tproperly the cursor type for subsequent volatile testing in SPARK\n\tmode, when domain is a formal container with an Iterabe aspect.\n\n2014-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.adb (Set_Warnings_Mode_Off): Add Reason argument.\n\t(Set_Specific_Warning_Off): Add Reason argument.\n\t* errout.ads (Set_Warnings_Mode_Off): Add Reason argument.\n\t(Set_Specific_Warning_Off): Add Reason argument.\n\t* erroutc.adb (Warnings_Entry): Add Reason field\n\t(Specific_Warning_Entry): Add Reason field.\n\t(Warnings_Suppressed): return String_Id for Reason.\n\t(Warning_Specifically_Suppressed): return String_Id for Reason.\n\t* erroutc.ads (Warnings_Entry): Add Reason field.\n\t(Specific_Warning_Entry): Add Reason field.\n\t(Set_Specific_Warning_Off): Add Reason argument.\n\t(Set_Warnings_Mode_Off): Add Reason argument.\n\t(Warnings_Suppressed): return String_Id for Reason.\n\t(Warning_Specifically_Suppressed): return String_Id for Reason.\n\t* errutil.adb (Warnings_Suppressed): returns String_Id for Reason\n\t(Warning_Specifically_Suppressed): returns String_Id for Reason\n\t* gnat_rm.texi: Document that Warning parameter is string literal\n\tor a concatenation of string literals.\n\t* par-prag.adb: New handling for Reason argument.\n\t* sem_prag.adb (Analyze_Pragma, case Warning): New handling\n\tfor Reason argument.\n\t* sem_util.ads, sem_util.adb (Get_Reason_String): New procedure.\n\t* sem_warn.ads (Warnings_Off_Entry): Add reason field.\n\t* stringt.adb: Set Null_String_Id.\n\t* stringt.ads (Null_String_Id): New constant.\n\nFrom-SVN: r207943", "tree": {"sha": "06f0b8e4cb0b54d598438a7815c9bfa918bedb20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06f0b8e4cb0b54d598438a7815c9bfa918bedb20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c7e0c3254341de04e877a58c44aba23203cf04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c7e0c3254341de04e877a58c44aba23203cf04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c7e0c3254341de04e877a58c44aba23203cf04a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c7e0c3254341de04e877a58c44aba23203cf04a/comments", "author": null, "committer": null, "parents": [{"sha": "e449429213d601e60b19d1d5db6dd761df98c2c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e449429213d601e60b19d1d5db6dd761df98c2c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e449429213d601e60b19d1d5db6dd761df98c2c5"}], "stats": {"total": 257, "additions": 200, "deletions": 57}, "files": [{"sha": "9882be712e63db84b0ecec76f3115c7531dd30ed", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0c7e0c3254341de04e877a58c44aba23203cf04a", "patch": "@@ -1,3 +1,37 @@\n+2014-02-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iterator_Specification): Initialize\n+\tproperly the cursor type for subsequent volatile testing in SPARK\n+\tmode, when domain is a formal container with an Iterabe aspect.\n+\n+2014-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.adb (Set_Warnings_Mode_Off): Add Reason argument.\n+\t(Set_Specific_Warning_Off): Add Reason argument.\n+\t* errout.ads (Set_Warnings_Mode_Off): Add Reason argument.\n+\t(Set_Specific_Warning_Off): Add Reason argument.\n+\t* erroutc.adb (Warnings_Entry): Add Reason field\n+\t(Specific_Warning_Entry): Add Reason field.\n+\t(Warnings_Suppressed): return String_Id for Reason.\n+\t(Warning_Specifically_Suppressed): return String_Id for Reason.\n+\t* erroutc.ads (Warnings_Entry): Add Reason field.\n+\t(Specific_Warning_Entry): Add Reason field.\n+\t(Set_Specific_Warning_Off): Add Reason argument.\n+\t(Set_Warnings_Mode_Off): Add Reason argument.\n+\t(Warnings_Suppressed): return String_Id for Reason.\n+\t(Warning_Specifically_Suppressed): return String_Id for Reason.\n+\t* errutil.adb (Warnings_Suppressed): returns String_Id for Reason\n+\t(Warning_Specifically_Suppressed): returns String_Id for Reason\n+\t* gnat_rm.texi: Document that Warning parameter is string literal\n+\tor a concatenation of string literals.\n+\t* par-prag.adb: New handling for Reason argument.\n+\t* sem_prag.adb (Analyze_Pragma, case Warning): New handling\n+\tfor Reason argument.\n+\t* sem_util.ads, sem_util.adb (Get_Reason_String): New procedure.\n+\t* sem_warn.ads (Warnings_Off_Entry): Add reason field.\n+\t* stringt.adb: Set Null_String_Id.\n+\t* stringt.ads (Null_String_Id): New constant.\n+\n 2014-02-20  Robert Dewar  <dewar@adacore.com>\n \n \t* einfo.ads: Minor comment addition: Etype of package is"}, {"sha": "74538e82cdd95bed9ab04a02fb77b85ef8f0be6d", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=0c7e0c3254341de04e877a58c44aba23203cf04a", "patch": "@@ -332,7 +332,9 @@ package body Errout is\n       --  that style checks are not considered warning messages for this\n       --  purpose.\n \n-      if Is_Warning_Msg and then Warnings_Suppressed (Orig_Loc) then\n+      if Is_Warning_Msg\n+        and then Warnings_Suppressed (Orig_Loc) /= No_String\n+      then\n          return;\n \n       --  For style messages, check too many messages so far\n@@ -774,7 +776,10 @@ package body Errout is\n \n          --  Immediate return if warning message and warnings are suppressed\n \n-         if Warnings_Suppressed (Optr) or else Warnings_Suppressed (Sptr) then\n+         if Warnings_Suppressed (Optr) /= No_String\n+              or else\n+            Warnings_Suppressed (Sptr) /= No_String\n+         then\n             Cur_Msg := No_Error_Msg;\n             return;\n          end if;\n@@ -1321,10 +1326,11 @@ package body Errout is\n \n          begin\n             if (CE.Warn and not CE.Deleted)\n-              and then\n-                (Warning_Specifically_Suppressed (CE.Sptr, CE.Text)\n-                   or else\n-                 Warning_Specifically_Suppressed (CE.Optr, CE.Text))\n+              and then (Warning_Specifically_Suppressed (CE.Sptr, CE.Text) /=\n+                                                                   No_String\n+                          or else\n+                        Warning_Specifically_Suppressed (CE.Optr, CE.Text) /=\n+                                                                   No_String)\n             then\n                Delete_Warning (Cur);\n "}, {"sha": "84d7490b26a163719a6cf17ede3c0d81967f9414", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=0c7e0c3254341de04e877a58c44aba23203cf04a", "patch": "@@ -806,10 +806,11 @@ package Errout is\n    --  ignored. A call with To=False restores the default treatment in which\n    --  error calls are treated as usual (and as described in this spec).\n \n-   procedure Set_Warnings_Mode_Off (Loc : Source_Ptr)\n+   procedure Set_Warnings_Mode_Off (Loc : Source_Ptr; Reason : String_Id)\n      renames Erroutc.Set_Warnings_Mode_Off;\n    --  Called in response to a pragma Warnings (Off) to record the source\n-   --  location from which warnings are to be turned off.\n+   --  location from which warnings are to be turned off. Reason is the\n+   --  Reason from the pragma, or the null string if none is given.\n \n    procedure Set_Warnings_Mode_On (Loc : Source_Ptr)\n      renames Erroutc.Set_Warnings_Mode_On;\n@@ -819,14 +820,20 @@ package Errout is\n    procedure Set_Specific_Warning_Off\n      (Loc    : Source_Ptr;\n       Msg    : String;\n+      Reason : String_Id;\n       Config : Boolean;\n       Used   : Boolean := False)\n      renames Erroutc.Set_Specific_Warning_Off;\n    --  This is called in response to the two argument form of pragma Warnings\n-   --  where the first argument is OFF, and the second argument is the prefix\n-   --  of a specific warning to be suppressed. The first argument is the start\n-   --  of the suppression range, and the second argument is the string from\n-   --  the pragma.\n+   --  where the first argument is OFF, and the second argument is a string\n+   --  which identifies a specific warning to be suppressed. The first argument\n+   --  is the start of the suppression range, and the second argument is the\n+   --  string from the pragma. Loc is the location of the pragma (which is the\n+   --  start of the range to suppress). Reason is the reason string from the\n+   --  pragma, or the null string if no reason is given. Config is True for the\n+   --  configuration pragma case (where there is no requirement for a matching\n+   --  OFF pragma). Used is set True to disable the check that the warning\n+   --  actually has has the effect of suppressing a warning.\n \n    procedure Set_Specific_Warning_On\n      (Loc : Source_Ptr;"}, {"sha": "8604f2590db8f7e2e0f147f49f05690c8912a832", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=0c7e0c3254341de04e877a58c44aba23203cf04a", "patch": "@@ -39,6 +39,7 @@ with Opt;      use Opt;\n with Output;   use Output;\n with Sinput;   use Sinput;\n with Snames;   use Snames;\n+with Stringt;  use Stringt;\n with Targparm; use Targparm;\n with Uintp;    use Uintp;\n \n@@ -1110,6 +1111,7 @@ package body Erroutc is\n    procedure Set_Specific_Warning_Off\n      (Loc    : Source_Ptr;\n       Msg    : String;\n+      Reason : String_Id;\n       Config : Boolean;\n       Used   : Boolean := False)\n    is\n@@ -1118,6 +1120,7 @@ package body Erroutc is\n         ((Start      => Loc,\n           Msg        => new String'(Msg),\n           Stop       => Source_Last (Current_Source_File),\n+          Reason     => Reason,\n           Open       => True,\n           Used       => Used,\n           Config     => Config));\n@@ -1163,7 +1166,7 @@ package body Erroutc is\n    -- Set_Warnings_Mode_Off --\n    ---------------------------\n \n-   procedure Set_Warnings_Mode_Off (Loc : Source_Ptr) is\n+   procedure Set_Warnings_Mode_Off (Loc : Source_Ptr; Reason : String_Id) is\n    begin\n       --  Don't bother with entries from instantiation copies, since we will\n       --  already have a copy in the template, which is what matters.\n@@ -1197,10 +1200,10 @@ package body Erroutc is\n       --  source file. This ending point will be adjusted by a subsequent\n       --  corresponding pragma Warnings (On).\n \n-      Warnings.Increment_Last;\n-      Warnings.Table (Warnings.Last).Start := Loc;\n-      Warnings.Table (Warnings.Last).Stop :=\n-        Source_Last (Current_Source_File);\n+      Warnings.Append\n+        ((Start  => Loc,\n+          Stop   => Source_Last (Current_Source_File),\n+          Reason => Reason));\n    end Set_Warnings_Mode_Off;\n \n    --------------------------\n@@ -1342,7 +1345,7 @@ package body Erroutc is\n \n    function Warning_Specifically_Suppressed\n      (Loc : Source_Ptr;\n-      Msg : String_Ptr) return Boolean\n+      Msg : String_Ptr) return String_Id\n    is\n       function Matches (S : String; P : String) return Boolean;\n       --  Returns true if the String S patches the pattern P, which can contain\n@@ -1429,36 +1432,36 @@ package body Erroutc is\n             then\n                if Matches (Msg.all, SWE.Msg.all) then\n                   SWE.Used := True;\n-                  return True;\n+                  return SWE.Reason;\n                end if;\n             end if;\n          end;\n       end loop;\n \n-      return False;\n+      return No_String;\n    end Warning_Specifically_Suppressed;\n \n    -------------------------\n    -- Warnings_Suppressed --\n    -------------------------\n \n-   function Warnings_Suppressed (Loc : Source_Ptr) return Boolean is\n+   function Warnings_Suppressed (Loc : Source_Ptr) return String_Id is\n    begin\n-      if Warning_Mode = Suppress then\n-         return True;\n-      end if;\n-\n       --  Loop through table of ON/OFF warnings\n \n       for J in Warnings.First .. Warnings.Last loop\n          if Warnings.Table (J).Start <= Loc\n            and then Loc <= Warnings.Table (J).Stop\n          then\n-            return True;\n+            return Warnings.Table (J).Reason;\n          end if;\n       end loop;\n \n-      return False;\n+      if Warning_Mode = Suppress then\n+         return Null_String_Id;\n+      else\n+         return No_String;\n+      end if;\n    end Warnings_Suppressed;\n \n end Erroutc;"}, {"sha": "f938e9b87dc15cd9f2e2c6b622c1a9db3a4f6fff", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=0c7e0c3254341de04e877a58c44aba23203cf04a", "patch": "@@ -267,9 +267,13 @@ package Erroutc is\n    --  values in this table always reference the original template, not an\n    --  instantiation copy, in the generic case.\n \n+   --  Reason is the reason from the pragma Warnings (Off,..) or the null\n+   --  string if no reason parameter is given.\n+\n    type Warnings_Entry is record\n-      Start : Source_Ptr;\n-      Stop  : Source_Ptr;\n+      Start  : Source_Ptr;\n+      Stop   : Source_Ptr;\n+      Reason : String_Id;\n    end record;\n \n    package Warnings is new Table.Table (\n@@ -282,14 +286,17 @@ package Erroutc is\n \n    --  The second table is used for the specific forms of the pragma, where\n    --  the first argument is ON or OFF, and the second parameter is a string\n-   --  which is the entire message to suppress, or a prefix of it.\n+   --  which is the pattern to match for suppressing a warning.\n \n    type Specific_Warning_Entry is record\n       Start : Source_Ptr;\n       Stop  : Source_Ptr;\n       --  Starting and ending source pointers for the range. These are always\n       --  from the same source file.\n \n+      Reason : String_Id;\n+      --  Reason string from pragma Warnings, or null string if none\n+\n       Msg : String_Ptr;\n       --  Message from pragma Warnings (Off, string)\n \n@@ -466,17 +473,19 @@ package Erroutc is\n    procedure Set_Specific_Warning_Off\n      (Loc    : Source_Ptr;\n       Msg    : String;\n+      Reason : String_Id;\n       Config : Boolean;\n       Used   : Boolean := False);\n    --  This is called in response to the two argument form of pragma Warnings\n    --  where the first argument is OFF, and the second argument is a string\n    --  which identifies a specific warning to be suppressed. The first argument\n    --  is the start of the suppression range, and the second argument is the\n    --  string from the pragma. Loc is the location of the pragma (which is the\n-   --  start of the range to suppress). Config is True for the configuration\n-   --  pragma case (where there is no requirement for a matching OFF pragma).\n-   --  Used is set True to disable the check that the warning actually has\n-   --  has the effect of suppressing a warning.\n+   --  start of the range to suppress). Reason is the reason string from the\n+   --  pragma, or the null string if no reason is given. Config is True for the\n+   --  configuration pragma case (where there is no requirement for a matching\n+   --  OFF pragma). Used is set True to disable the check that the warning\n+   --  actually has has the effect of suppressing a warning.\n \n    procedure Set_Specific_Warning_On\n      (Loc : Source_Ptr;\n@@ -489,9 +498,10 @@ package Erroutc is\n    --  string from the pragma. Err is set to True on return to report the error\n    --  of no matching Warnings Off pragma preceding this one.\n \n-   procedure Set_Warnings_Mode_Off (Loc : Source_Ptr);\n+   procedure Set_Warnings_Mode_Off (Loc : Source_Ptr; Reason : String_Id);\n    --  Called in response to a pragma Warnings (Off) to record the source\n-   --  location from which warnings are to be turned off.\n+   --  location from which warnings are to be turned off. Reason is the\n+   --  Reason from the pragma, or the null string if none is given.\n \n    procedure Set_Warnings_Mode_On (Loc : Source_Ptr);\n    --  Called in response to a pragma Warnings (On) to record the source\n@@ -518,18 +528,24 @@ package Erroutc is\n    --  Note that the call has no effect for continuation messages (those whose\n    --  first character is '\\'), and all variables are left unchanged.\n \n-   function Warnings_Suppressed (Loc : Source_Ptr) return Boolean;\n+   function Warnings_Suppressed (Loc : Source_Ptr) return String_Id;\n    --  Determines if given location is covered by a warnings off suppression\n    --  range in the warnings table (or is suppressed by compilation option,\n    --  which generates a warning range for the whole source file). This routine\n-   --  only deals with the general ON/OFF case, not specific warnings. True\n-   --  is also returned if warnings are globally suppressed.\n+   --  only deals with the general ON/OFF case, not specific warnings. The\n+   --  returned result is No_String if warnings are not suppressed. If warnings\n+   --  are suppressed for the given location, then then corresponding Reason\n+   --  parameter from the pragma is returned (or the null string if no Reason\n+   --  parameter was present).\n \n    function Warning_Specifically_Suppressed\n      (Loc : Source_Ptr;\n-      Msg : String_Ptr) return Boolean;\n+      Msg : String_Ptr) return String_Id;\n    --  Determines if given message to be posted at given location is suppressed\n    --  by specific ON/OFF Warnings pragmas specifying this particular message.\n+   --  If the warning is not suppressed then No_String is returned, otherwise\n+   --  the corresponding warning string is returned (or the null string if no\n+   --  Warning argument was present in the pragma).\n \n    type Error_Msg_Proc is\n      access procedure (Msg : String; Flag_Location : Source_Ptr);"}, {"sha": "8053bb51ae758c7e1247ceb6c905f405d604e505", "filename": "gcc/ada/errutil.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Ferrutil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Ferrutil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrutil.adb?ref=0c7e0c3254341de04e877a58c44aba23203cf04a", "patch": "@@ -193,7 +193,7 @@ package body Errutil is\n       --  Immediate return if warning message and warnings are suppressed.\n       --  Note that style messages are not warnings for this purpose.\n \n-      if Is_Warning_Msg and then Warnings_Suppressed (Sptr) then\n+      if Is_Warning_Msg and then Warnings_Suppressed (Sptr) /= No_String then\n          Cur_Msg := No_Error_Msg;\n          return;\n       end if;"}, {"sha": "6f4f463ead8f994fe6a3d135cf1e47222f2a0c59", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=0c7e0c3254341de04e877a58c44aba23203cf04a", "patch": "@@ -7381,7 +7381,7 @@ pragma Warnings (On | Off, LOCAL_NAME [,REASON]);\n pragma Warnings (static_string_EXPRESSION [,REASON]);\n pragma Warnings (On | Off, static_string_EXPRESSION [,REASON]);\n \n-REASON ::= Reason => static_string_EXPRESSION\n+REASON ::= Reason => STRING_LITERAL {& STRING_LITERAL}\n @end smallexample\n \n @noindent"}, {"sha": "1ccbf0ede2a2dfad7196750fc18b754280952eda", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=0c7e0c3254341de04e877a58c44aba23203cf04a", "patch": "@@ -1018,10 +1018,10 @@ begin\n       -- Warnings (GNAT) --\n       ---------------------\n \n-      --  pragma Warnings (On | Off);\n-      --  pragma Warnings (On | Off, LOCAL_NAME);\n-      --  pragma Warnings (static_string_EXPRESSION);\n-      --  pragma Warnings (On | Off, static_string_EXPRESSION);\n+      --  pragma Warnings (On | Off [,REASON]);\n+      --  pragma Warnings (On | Off, LOCAL_NAME [,REASON]);\n+      --  pragma Warnings (static_string_EXPRESSION [,REASON]);\n+      --  pragma Warnings (On | Off, static_string_EXPRESSION [,REASON]);\n \n       --  The one argument ON/OFF case is processed by the parser, since it may\n       --  control parser warnings as well as semantic warnings, and in any case\n@@ -1042,12 +1042,33 @@ begin\n \n             declare\n                Argx : constant Node_Id := Expression (Arg1);\n+\n+               function Get_Reason return String_Id;\n+               --  Analyzes Reason argument and returns corresponding String_Id\n+               --  value, or null if there is no Reason argument, or if the\n+               --  argument is not of the required form.\n+\n+               ----------------\n+               -- Get_Reason --\n+               ----------------\n+\n+               function Get_Reason return String_Id is\n+               begin\n+                  if Arg_Count = 1 then\n+                     return Null_String_Id;\n+                  else\n+                     Start_String;\n+                     Get_Reason_String (Expression (Arg2));\n+                     return End_String;\n+                  end if;\n+               end Get_Reason;\n+\n             begin\n                if Nkind (Argx) = N_Identifier then\n                   if Chars (Argx) = Name_On then\n                      Set_Warnings_Mode_On (Pragma_Sloc);\n                   elsif Chars (Argx) = Name_Off then\n-                     Set_Warnings_Mode_Off (Pragma_Sloc);\n+                     Set_Warnings_Mode_Off (Pragma_Sloc, Get_Reason);\n                   end if;\n                end if;\n             end;"}, {"sha": "9b765f489932b744f21f98fc5dbc2d9da5eeb367", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=0c7e0c3254341de04e877a58c44aba23203cf04a", "patch": "@@ -1931,6 +1931,7 @@ package body Sem_Ch5 is\n                Set_Etype (Def_Id,\n                  Get_Cursor_Type\n                   (Parent (Find_Value_Of_Aspect (Typ, Aspect_Iterable)), Typ));\n+               Ent := Etype (Def_Id);\n \n             else\n                Ent := First_Entity (Scope (Typ));"}, {"sha": "d01176061337b7ebbc997718b02dbbb5ecf0f448", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=0c7e0c3254341de04e877a58c44aba23203cf04a", "patch": "@@ -20815,14 +20815,17 @@ package body Sem_Prag is\n \n          --  REASON ::= Reason => Static_String_Expression\n \n-         when Pragma_Warnings => Warnings : begin\n+         when Pragma_Warnings => Warnings : declare\n+            Reason : String_Id;\n+\n+         begin\n             GNAT_Pragma;\n             Check_At_Least_N_Arguments (1);\n \n             --  See if last argument is labeled Reason. If so, make sure we\n-            --  have a static string expression, but otherwise just ignore\n-            --  the REASON argument by decreasing Num_Args by 1 (all the\n-            --  remaining tests look only at the first Num_Args arguments).\n+            --  have a static string expression, and acquire the REASON string.\n+            --  Then remove the REASON argument by decreasing Num_Args by one;\n+            --  Remaining processing looks only at first Num_Args arguments).\n \n             declare\n                Last_Arg : constant Node_Id :=\n@@ -20831,12 +20834,19 @@ package body Sem_Prag is\n                if Nkind (Last_Arg) = N_Pragma_Argument_Association\n                  and then Chars (Last_Arg) = Name_Reason\n                then\n-                  Check_Arg_Is_Static_Expression (Last_Arg, Standard_String);\n+                  Start_String;\n+                  Get_Reason_String (Get_Pragma_Arg (Last_Arg));\n+                  Reason := End_String;\n                   Arg_Count := Arg_Count - 1;\n \n                   --  Not allowed in compiler units (bootstrap issues)\n \n                   Check_Compiler_Unit (N);\n+\n+               --  No REASON string, set null string as reason\n+\n+               else\n+                  Reason := Null_String_Id;\n                end if;\n             end;\n \n@@ -20986,7 +20996,7 @@ package body Sem_Prag is\n                                 and then Warn_On_Warnings_Off\n                                 and then not In_Instance\n                               then\n-                                 Warnings_Off_Pragmas.Append ((N, E));\n+                                 Warnings_Off_Pragmas.Append ((N, E, Reason));\n                               end if;\n \n                               if Is_Enumeration_Type (E) then\n@@ -21040,7 +21050,7 @@ package body Sem_Prag is\n \n                         if Chars (Argx) = Name_Off then\n                            Set_Specific_Warning_Off\n-                             (Loc, Name_Buffer (1 .. Name_Len),\n+                             (Loc, Name_Buffer (1 .. Name_Len), Reason,\n                               Config => Is_Configuration_Pragma,\n                               Used   => Inside_A_Generic or else In_Instance);\n "}, {"sha": "ceedb7d9d6aef000f03297f60cecf0c1a7b5afa3", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=0c7e0c3254341de04e877a58c44aba23203cf04a", "patch": "@@ -6767,6 +6767,30 @@ package body Sem_Util is\n       return Get_Pragma_Id (Pragma_Name (N));\n    end Get_Pragma_Id;\n \n+   -----------------------\n+   -- Get_Reason_String --\n+   -----------------------\n+\n+   procedure Get_Reason_String (N : Node_Id) is\n+   begin\n+      if Nkind (N) = N_String_Literal then\n+         Store_String_Chars (Strval (N));\n+\n+      elsif Nkind (N) = N_Op_Concat then\n+         Get_Reason_String (Left_Opnd (N));\n+         Get_Reason_String (Right_Opnd (N));\n+\n+      --  If not of required form, error\n+\n+      else\n+         Error_Msg_N\n+           (\"Reason for pragma Warnings has wrong form\", N);\n+         Error_Msg_N\n+           (\"\\must be string literal or concatenation of string literals\", N);\n+         return;\n+      end if;\n+   end Get_Reason_String;\n+\n    ---------------------------\n    -- Get_Referenced_Object --\n    ---------------------------"}, {"sha": "3377c7cc01f3a12990bb1217b6f18b511067a3a4", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=0c7e0c3254341de04e877a58c44aba23203cf04a", "patch": "@@ -851,6 +851,13 @@ package Sem_Util is\n    pragma Inline (Get_Pragma_Id);\n    --  Obtains the Pragma_Id from the Chars field of Pragma_Identifier (N)\n \n+   procedure Get_Reason_String (N : Node_Id);\n+   --  Recursive routine to analyze reason argument for pragma Warnings. The\n+   --  value of the reason argument is appended to the current string using\n+   --  Store_String_Chars. The reason argument is expected to be a string\n+   --  literal or concatenation of string literals. An error is given for\n+   --  any other form.\n+\n    function Get_Referenced_Object (N : Node_Id) return Node_Id;\n    --  Given a node, return the renamed object if the node represents a renamed\n    --  object, otherwise return the node unchanged. The node may represent an"}, {"sha": "efd319505181518b19c7d353a4130ee4cca46bc0", "filename": "gcc/ada/sem_warn.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fsem_warn.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fsem_warn.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.ads?ref=0c7e0c3254341de04e877a58c44aba23203cf04a", "patch": "@@ -39,10 +39,13 @@ package Sem_Warn is\n \n    type Warnings_Off_Entry is record\n       N : Node_Id;\n-      --  A pragma Warnings (Off, ent) node\n+      --  A pragma Warnings (Off, ent [,Reason]) node\n \n       E : Entity_Id;\n       --  The entity involved\n+\n+      R : String_Id;\n+      --  Warning reason if present, or null if not (not currently used)\n    end record;\n \n    --  An entry is made in the following table for any valid Pragma Warnings"}, {"sha": "62a4dd518192a7c32b36b1b699c30879e73e9460", "filename": "gcc/ada/stringt.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fstringt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fstringt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstringt.adb?ref=0c7e0c3254341de04e877a58c44aba23203cf04a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -472,4 +472,12 @@ package body Stringt is\n       end if;\n    end Write_String_Table_Entry;\n \n+--  Setup the null string\n+\n+pragma Warnings (Off); -- kill strange warning from code below ???\n+\n+begin\n+   Start_String;\n+   Null_String_Id := End_String;\n+\n end Stringt;"}, {"sha": "864690dcdeec069b8bb45674fb2fbe88f5b880c1", "filename": "gcc/ada/stringt.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fstringt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7e0c3254341de04e877a58c44aba23203cf04a/gcc%2Fada%2Fstringt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstringt.ads?ref=0c7e0c3254341de04e877a58c44aba23203cf04a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,6 +48,9 @@ package Stringt is\n --  value for two identical strings stored separately and also cannot count on\n --  the two Id values being different.\n \n+   Null_String_Id : String_Id;\n+   --  Gets set to a null string with length zero\n+\n    --------------------------------------\n    -- String Table Access Subprograms --\n    --------------------------------------"}]}