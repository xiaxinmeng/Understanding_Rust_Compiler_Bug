{"sha": "58c8c59349b32c5f8ced092c74d2918580c218f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThjOGM1OTM0OWIzMmM1ZjhjZWQwOTJjNzRkMjkxODU4MGMyMThmMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-07-31T12:13:38Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-07-31T12:13:38Z"}, "message": "entered into RCS\n\nFrom-SVN: r1731", "tree": {"sha": "3157856d1898a840aac68ef6de2bc701b24e3867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3157856d1898a840aac68ef6de2bc701b24e3867"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58c8c59349b32c5f8ced092c74d2918580c218f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c8c59349b32c5f8ced092c74d2918580c218f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58c8c59349b32c5f8ced092c74d2918580c218f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c8c59349b32c5f8ced092c74d2918580c218f0/comments", "author": null, "committer": null, "parents": [{"sha": "510dd77e9569867570a74513c79eb767344370c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/510dd77e9569867570a74513c79eb767344370c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/510dd77e9569867570a74513c79eb767344370c6"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "6dcbecd3c2a1665539480cf88102bb3ec6b20d9c", "filename": "gcc/cexp.y", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c8c59349b32c5f8ced092c74d2918580c218f0/gcc%2Fcexp.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c8c59349b32c5f8ced092c74d2918580c218f0/gcc%2Fcexp.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcexp.y?ref=58c8c59349b32c5f8ced092c74d2918580c218f0", "patch": "@@ -65,6 +65,8 @@ static int keyword_parsing = 0;\n /* some external tables of character types */\n extern unsigned char is_idstart[], is_idchar[], is_hor_space[];\n \n+extern char *xmalloc ();\n+\n /* Flag for -pedantic.  */\n extern int pedantic;\n "}, {"sha": "a2a11a1fa5c520cf67107ff0b9c3d8b60e929991", "filename": "gcc/combine.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c8c59349b32c5f8ced092c74d2918580c218f0/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c8c59349b32c5f8ced092c74d2918580c218f0/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=58c8c59349b32c5f8ced092c74d2918580c218f0", "patch": "@@ -1886,14 +1886,32 @@ try_combine (i3, i2, i1)\n       distribute_notes (gen_rtx (EXPR_LIST, REG_DEAD, i3dest_killed, NULL_RTX),\n \t\t\tNULL_RTX, i3, newi2pat ? i2 : NULL_RTX,\n \t\t\tNULL_RTX, NULL_RTX);\n+\n+    /* For I2 and I1, we have to be careful.  If NEWI2PAT exists and sets\n+       I2DEST or I1DEST, the death must be somewhere before I2, not I3.  If\n+       we passed I3 in that case, it might delete I2.  */\n+\n     if (i2dest_in_i2src)\n-      distribute_notes (gen_rtx (EXPR_LIST, REG_DEAD, i2dest, NULL_RTX),\n-\t\t\tNULL_RTX, i3, newi2pat ? i2 : NULL_RTX,\n-\t\t\tNULL_RTX, NULL_RTX);\n+      {\n+\tif (newi2pat && reg_set_p (i2dest, newi2pat))\n+\t  distribute_notes (gen_rtx (EXPR_LIST, REG_DEAD, i2dest, NULL_RTX),\n+\t\t\t    NULL_RTX, i2, NULL_RTX, NULL_RTX, NULL_RTX);\n+\telse\n+\t  distribute_notes (gen_rtx (EXPR_LIST, REG_DEAD, i2dest, NULL_RTX),\n+\t\t\t    NULL_RTX, i3, newi2pat ? i2 : NULL_RTX,\n+\t\t\t    NULL_RTX, NULL_RTX);\n+      }\n+\n     if (i1dest_in_i1src)\n-      distribute_notes (gen_rtx (EXPR_LIST, REG_DEAD, i1dest, NULL_RTX),\n-\t\t\tNULL_RTX, i3, newi2pat ? i2 : NULL_RTX,\n-\t\t\tNULL_RTX, NULL_RTX);\n+      {\n+\tif (newi2pat && reg_set_p (i1dest, newi2pat))\n+\t  distribute_notes (gen_rtx (EXPR_LIST, REG_DEAD, i1dest, NULL_RTX),\n+\t\t\t    NULL_RTX, i2, NULL_RTX, NULL_RTX, NULL_RTX);\n+\telse\n+\t  distribute_notes (gen_rtx (EXPR_LIST, REG_DEAD, i1dest, NULL_RTX),\n+\t\t\t    NULL_RTX, i3, newi2pat ? i2 : NULL_RTX,\n+\t\t\t    NULL_RTX, NULL_RTX);\n+      }\n \n     distribute_links (i3links);\n     distribute_links (i2links);"}, {"sha": "14ef88b4c95239e2f74135524ed5f80082ab2edf", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c8c59349b32c5f8ced092c74d2918580c218f0/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c8c59349b32c5f8ced092c74d2918580c218f0/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=58c8c59349b32c5f8ced092c74d2918580c218f0", "patch": "@@ -1998,7 +1998,7 @@ exp_equiv_p (x, y, validate, equal_values)\n       return x == y;\n \n     case CONST_INT:\n-      return XINT (x, 0) == XINT (y, 0);\n+      return INTVAL (x) == INTVAL (y);\n \n     case LABEL_REF:\n     case SYMBOL_REF:"}, {"sha": "381a86ecaec2a9733faa3640054ef8c929c43d8a", "filename": "gcc/reload.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c8c59349b32c5f8ced092c74d2918580c218f0/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c8c59349b32c5f8ced092c74d2918580c218f0/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=58c8c59349b32c5f8ced092c74d2918580c218f0", "patch": "@@ -4153,9 +4153,10 @@ find_reloads_address_1 (x, context, loc, operand, ind_levels)\n \n       if (reg_equiv_constant[regno] != 0)\n \t{\n-\t  push_reload (reg_equiv_constant[regno], NULL_RTX, loc, NULL_PTR,\n-\t\t       context ? INDEX_REG_CLASS : BASE_REG_CLASS,\n-\t\t       GET_MODE (x), VOIDmode, 0, 0, operand);\n+\t  find_reloads_address_part (reg_equiv_constant[regno], loc, \n+\t\t\t\t     (context ? INDEX_REG_CLASS\n+\t\t\t\t      : BASE_REG_CLASS),\n+\t\t\t\t     GET_MODE (x), operand, ind_levels);\n \t  return 1;\n \t}\n "}, {"sha": "2c890965432b737306cf62a0d41c2d721fb647b3", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c8c59349b32c5f8ced092c74d2918580c218f0/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c8c59349b32c5f8ced092c74d2918580c218f0/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=58c8c59349b32c5f8ced092c74d2918580c218f0", "patch": "@@ -5673,8 +5673,8 @@ gen_input_reload (reloadreg, in, before_insn)\n       if (GET_MODE (loc) != GET_MODE (in))\n \tin = gen_rtx (REG, GET_MODE (loc), REGNO (in));\n \n-      emit_insn_before (gen_move_insn (reloadreg, loc), before_insn);\n       emit_insn_before (gen_move_insn (loc, in), before_insn);\n+      emit_insn_before (gen_move_insn (reloadreg, loc), before_insn);\n     }\n #endif\n "}, {"sha": "d95c7344bc18b3113ad1441b6656c03befffbb69", "filename": "gcc/reorg.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c8c59349b32c5f8ced092c74d2918580c218f0/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c8c59349b32c5f8ced092c74d2918580c218f0/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=58c8c59349b32c5f8ced092c74d2918580c218f0", "patch": "@@ -1110,6 +1110,8 @@ get_branch_condition (insn, target)\n     return gen_rtx (reverse_condition (GET_CODE (XEXP (src, 0))),\n \t\t    GET_MODE (XEXP (src, 0)),\n \t\t    XEXP (XEXP (src, 0), 0), XEXP (XEXP (src, 0), 1));\n+\n+  return 0;\n }\n \n /* Return non-zero if CONDITION is more strict than the condition of"}]}