{"sha": "4679504c63fdc21e4c8580c6057ff55de41975b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY3OTUwNGM2M2ZkYzIxZTRjODU4MGM2MDU3ZmY1NWRlNDE5NzViNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-04-24T04:53:47Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-04-24T04:53:47Z"}, "message": "re PR rtl-optimization/36006 (invalid rtl sharing with -O2)\n\n        PR rtl-optimization/36006\n        * expmed.c (store_fixed_bit_field): Copy op0 rtx before moving\n        temp to op0 in order to avoid invalid rtx sharing.\n\ntestsuite/ChangeLog:\n\n        PR rtl-optimization/36006\n        * gfortran.dg/pr36006-1.f90: New test.\n        * gfortran.dg/pr36006-2.f90: Ditto.\n\nFrom-SVN: r134618", "tree": {"sha": "36e0e1beb53d3b5105244a2db6d150d25ae7c770", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36e0e1beb53d3b5105244a2db6d150d25ae7c770"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4679504c63fdc21e4c8580c6057ff55de41975b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4679504c63fdc21e4c8580c6057ff55de41975b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4679504c63fdc21e4c8580c6057ff55de41975b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4679504c63fdc21e4c8580c6057ff55de41975b4/comments", "author": null, "committer": null, "parents": [{"sha": "6412ecdc939b8abdc3c713a83b38928b3567b2ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6412ecdc939b8abdc3c713a83b38928b3567b2ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6412ecdc939b8abdc3c713a83b38928b3567b2ce"}], "stats": {"total": 105, "additions": 72, "deletions": 33}, "files": [{"sha": "057c7dce215a5f8c776e15b113803c317250db7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4679504c63fdc21e4c8580c6057ff55de41975b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4679504c63fdc21e4c8580c6057ff55de41975b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4679504c63fdc21e4c8580c6057ff55de41975b4", "patch": "@@ -1,3 +1,9 @@\n+2008-04-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/36006\n+\t* expmed.c (store_fixed_bit_field): Copy op0 rtx before moving\n+\ttemp to op0 in order to avoid invalid rtx sharing.\n+\n 2008-04-23  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* tree-cfg.c (verify_expr): Check with is_gimple_address.  Don't\n@@ -74,37 +80,25 @@\n \n 2008-04-22  Tomas Bily  <tbily@suse.cz>\n \n-        * tree-cfg.c (verify_expr): Check for NON_LVALUE_EXPR as unreachable\n-        case.\n-\n-        * tree-vrp.c (extract_range_from_unary_expr): Removed unused\n-        NON_LVALUE_EXPR.\n-\n-        * tree-ssa-threadedge.c (simplify_control_stmt_condition): Likewise.\n-\n-        * tree-ssa-structalias.c (get_constraint_for): Likewise.\n-\n-        * tree-inline.c (estimate_num_insns_1): Likewise.\n-\n-        * varasm.c (const_hash_1, compare_constant, copy_constant)\n-        (compute_reloc_for_constant, output_addressed_constants): Likewise.\n-\n-        * emit-rtl.c (component_ref_for_mem_expr)\n-        (set_mem_attributes_minus_bitpos): Likewise.\n-\n-        * expr.c (highest_pow2_factor, expand_expr_real_1, )\n-        (is_aligning_offset): Likewise.\n-\n-        * dwarf2out.c (loc_descriptor_from_tree_1, add_bound_info): Likewise.\n-\n-        * tree-ssa-loop-ivopts.c (may_be_nonaddressable_p): Likewise.\n-\n-        * dojump.c (do_jump): Likewise.\n-\n-        * builtins.c (get_pointer_alignment, get_memory_rtx)\n-        (integer_valued_real_p, fold_builtin_next_arg): Likewise.\n-\n-        * tree-scalar-evolution.c (instantiate_parameters_1): Likewise.\n+\t* tree-cfg.c (verify_expr): Check for NON_LVALUE_EXPR as\n+\tunreachable case.\n+\t* tree-vrp.c (extract_range_from_unary_expr): Removed unused\n+\tNON_LVALUE_EXPR.\n+\t* tree-ssa-threadedge.c (simplify_control_stmt_condition): Likewise.\n+\t* tree-ssa-structalias.c (get_constraint_for): Likewise.\n+\t* tree-inline.c (estimate_num_insns_1): Likewise.\n+\t* varasm.c (const_hash_1, compare_constant, copy_constant)\n+\t(compute_reloc_for_constant, output_addressed_constants): Likewise.\n+\t* emit-rtl.c (component_ref_for_mem_expr)\n+\t(set_mem_attributes_minus_bitpos): Likewise.\n+\t* expr.c (highest_pow2_factor, expand_expr_real_1, )\n+\t(is_aligning_offset): Likewise.\n+\t* dwarf2out.c (loc_descriptor_from_tree_1, add_bound_info): Likewise.\n+\t* tree-ssa-loop-ivopts.c (may_be_nonaddressable_p): Likewise.\n+\t* dojump.c (do_jump): Likewise.\n+\t* builtins.c (get_pointer_alignment, get_memory_rtx)\n+\t(integer_valued_real_p, fold_builtin_next_arg): Likewise.\n+\t* tree-scalar-evolution.c (instantiate_parameters_1): Likewise.\n \n 2008-04-23  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -250,7 +244,7 @@\n \tdf_entry_block_defs_collect, df_exit_block_uses_collect):\n \tAdded mode parameter to calls to df_ref_record, df_uses_record,\n \tdf_ref_create_structure.\n-       \t(df_ref_equal_p, df_ref_compare): Added test for modes.\n+\t(df_ref_equal_p, df_ref_compare): Added test for modes.\n \t(df_ref_create_structure): Added code to set mode.  Renamed\n \tDF_REF_WIDTH and DF_REF_OFFSET to DF_REF_EXTRACT_WIDTH and\n \tDF_REF_EXTRACT_OFFSET."}, {"sha": "5268b318f8dc6537cc91c150aec70a356cef1095", "filename": "gcc/expmed.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4679504c63fdc21e4c8580c6057ff55de41975b4/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4679504c63fdc21e4c8580c6057ff55de41975b4/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=4679504c63fdc21e4c8580c6057ff55de41975b4", "patch": "@@ -976,7 +976,10 @@ store_fixed_bit_field (rtx op0, unsigned HOST_WIDE_INT offset,\n     }\n \n   if (op0 != temp)\n-    emit_move_insn (op0, temp);\n+    {\n+      op0 = copy_rtx (op0);\n+      emit_move_insn (op0, temp);\n+    }\n }\n \f\n /* Store a bit field that is split across multiple accessible memory objects."}, {"sha": "a11dc7aefa9a182b861d3e5e80085f9a700bbac9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4679504c63fdc21e4c8580c6057ff55de41975b4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4679504c63fdc21e4c8580c6057ff55de41975b4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4679504c63fdc21e4c8580c6057ff55de41975b4", "patch": "@@ -1,3 +1,9 @@\n+2008-04-24  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR rtl-optimization/36006\n+\t* gfortran.dg/pr36006-1.f90: New test.\n+\t* gfortran.dg/pr36006-2.f90: Ditto.\n+\n 2008-04-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/35994"}, {"sha": "ad33d947d140bf987f6825f31c9aadc7037724c9", "filename": "gcc/testsuite/gfortran.dg/pr36006-1.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4679504c63fdc21e4c8580c6057ff55de41975b4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr36006-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4679504c63fdc21e4c8580c6057ff55de41975b4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr36006-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr36006-1.f90?ref=4679504c63fdc21e4c8580c6057ff55de41975b4", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+!\n+subroutine test4\n+  integer, parameter :: wp = 4\n+  complex(wp), parameter :: i = (0._wp, 1._wp)\n+  complex(wp) :: c(12)\n+  integer :: m, N\n+\n+  N = 12\n+  c = (/(exp(i*m),m=1,N)/)\n+  print *, c(1)\n+end\n+\n+subroutine test8\n+  integer, parameter :: wp = 8\n+  complex(wp), parameter :: i = (0._wp, 1._wp)\n+  complex(wp) :: c(12)\n+  integer :: m, N\n+\n+  N = 12\n+  c = (/(exp(i*m),m=1,N)/)\n+  print *, c(1)\n+end"}, {"sha": "f422e09a860c8cfac52a5df54d0580a40520fd51", "filename": "gcc/testsuite/gfortran.dg/pr36006-2.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4679504c63fdc21e4c8580c6057ff55de41975b4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr36006-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4679504c63fdc21e4c8580c6057ff55de41975b4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr36006-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr36006-2.f90?ref=4679504c63fdc21e4c8580c6057ff55de41975b4", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! { dg-require-effective-target fortran_large_real }\n+!\n+subroutine test_large\n+  integer, parameter :: wp = selected_real_kind (precision (0.0_8) + 1)\n+  complex(wp), parameter :: i = (0._wp, 1._wp)\n+  complex(wp) :: c(12)\n+  integer :: m, N\n+\n+  N = 12\n+  c = (/(exp(i*m),m=1,N)/)\n+  print *, c(1)\n+end"}]}