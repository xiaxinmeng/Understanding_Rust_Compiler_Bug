{"sha": "41c7d2930a75eda3350956b6d9df9e571f9b494d", "node_id": "C_kwDOANBUbNoAKDQxYzdkMjkzMGE3NWVkYTMzNTA5NTZiNmQ5ZGY5ZTU3MWY5YjQ5NGQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-22T07:08:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-22T07:10:27Z"}, "message": "Some VN TLC\n\nThe following was prompted by review of the patch introducing\nequivalences to VN.\n\n\t* tree-ssa-sccvn.cc (can_track_predicate_on_edge): New\n\tfunction split out from ...\n\t(vn_nary_op_insert_pieces_predicated): ... here.", "tree": {"sha": "de36fe2ad5adc6e91b8b131df744199f9d23bc3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de36fe2ad5adc6e91b8b131df744199f9d23bc3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41c7d2930a75eda3350956b6d9df9e571f9b494d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c7d2930a75eda3350956b6d9df9e571f9b494d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41c7d2930a75eda3350956b6d9df9e571f9b494d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c7d2930a75eda3350956b6d9df9e571f9b494d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbaa0ed34e1429dd9861350532534a85a07d220d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbaa0ed34e1429dd9861350532534a85a07d220d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbaa0ed34e1429dd9861350532534a85a07d220d"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "85a7698f694ab675f1b30bd9005b0f5993c09387", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c7d2930a75eda3350956b6d9df9e571f9b494d/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c7d2930a75eda3350956b6d9df9e571f9b494d/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=41c7d2930a75eda3350956b6d9df9e571f9b494d", "patch": "@@ -4460,28 +4460,39 @@ vn_nary_op_insert_pieces (unsigned int length, enum tree_code code,\n   return vn_nary_op_insert_into (vno1, valid_info->nary);\n }\n \n+/* Return whether we can track a predicate valid when PRED_E is executed.  */\n+\n+static bool\n+can_track_predicate_on_edge (edge pred_e)\n+{\n+  /* ???  As we are currently recording a basic-block index in\n+     vn_pval.valid_dominated_by_p and using dominance for the\n+     validity check we cannot track predicates on all edges.  */\n+  if (single_pred_p (pred_e->dest))\n+    return true;\n+  /* Never record for backedges.  */\n+  if (pred_e->flags & EDGE_DFS_BACK)\n+    return false;\n+  /* When there's more than one predecessor we cannot track\n+     predicate validity based on the destination block.  The\n+     exception is when all other incoming edges are backedges.  */\n+  edge_iterator ei;\n+  edge e;\n+  int cnt = 0;\n+  FOR_EACH_EDGE (e, ei, pred_e->dest->preds)\n+    if (! dominated_by_p (CDI_DOMINATORS, e->src, e->dest))\n+      cnt++;\n+  return cnt == 1;\n+}\n+\n static vn_nary_op_t\n vn_nary_op_insert_pieces_predicated (unsigned int length, enum tree_code code,\n \t\t\t\t     tree type, tree *ops,\n \t\t\t\t     tree result, unsigned int value_id,\n \t\t\t\t     edge pred_e)\n {\n-  /* ???  Currently tracking BBs.  */\n-  if (! single_pred_p (pred_e->dest))\n-    {\n-      /* Never record for backedges.  */\n-      if (pred_e->flags & EDGE_DFS_BACK)\n-\treturn NULL;\n-      edge_iterator ei;\n-      edge e;\n-      int cnt = 0;\n-      /* Ignore backedges.  */\n-      FOR_EACH_EDGE (e, ei, pred_e->dest->preds)\n-\tif (! dominated_by_p (CDI_DOMINATORS, e->src, e->dest))\n-\t  cnt++;\n-      if (cnt != 1)\n-\treturn NULL;\n-    }\n+  if (!can_track_predicate_on_edge (pred_e))\n+    return NULL;\n   if (dump_file && (dump_flags & TDF_DETAILS)\n       /* ???  Fix dumping, but currently we only get comparisons.  */\n       && TREE_CODE_CLASS (code) == tcc_comparison)"}]}