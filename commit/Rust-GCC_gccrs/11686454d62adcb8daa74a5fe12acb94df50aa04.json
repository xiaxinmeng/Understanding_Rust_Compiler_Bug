{"sha": "11686454d62adcb8daa74a5fe12acb94df50aa04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE2ODY0NTRkNjJhZGNiOGRhYTc0YTVmZTEyYWNiOTRkZjUwYWEwNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-02-28T15:32:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-02-28T15:32:02Z"}, "message": "parse.y (nested_name_specifier): Use explicit_template_type.\n\n\t* parse.y (nested_name_specifier): Use explicit_template_type.\n\t(typename_sub): Allow a template_type, an explicit_template_type,\n\tor an implicit template type at the end.\n\t* lex.c (yyprint): Handle a PTYPENAME being a TEMPLATE_DECL.\n\t* decl.c (make_typename_type): Handle template-id where the name\n\tis a TEMPLATE_DECL.\n\t* call.c (build_scoped_method_call): Handle member template\n\tdestructor call.\n\t* pt.c (tsubst_copy, METHOD_CALL_EXPR): Don't assume a member\n\tdestructor is represented by the type.\n\nFrom-SVN: r18303", "tree": {"sha": "3623a6c2e2509593b34324ab8bcf548d92a9d6f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3623a6c2e2509593b34324ab8bcf548d92a9d6f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11686454d62adcb8daa74a5fe12acb94df50aa04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11686454d62adcb8daa74a5fe12acb94df50aa04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11686454d62adcb8daa74a5fe12acb94df50aa04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11686454d62adcb8daa74a5fe12acb94df50aa04/comments", "author": null, "committer": null, "parents": [{"sha": "b2b7d40a91814eacee40e1b0539426ae7b8b27dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b7d40a91814eacee40e1b0539426ae7b8b27dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2b7d40a91814eacee40e1b0539426ae7b8b27dc"}], "stats": {"total": 5898, "additions": 2956, "deletions": 2942}, "files": [{"sha": "c1125778e5c6c358de0340cddf2f700b215cdb3f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11686454d62adcb8daa74a5fe12acb94df50aa04/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11686454d62adcb8daa74a5fe12acb94df50aa04/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=11686454d62adcb8daa74a5fe12acb94df50aa04", "patch": "@@ -1,5 +1,16 @@\n Sat Feb 28 12:06:44 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* parse.y (nested_name_specifier): Use explicit_template_type.\n+\t(typename_sub): Allow a template_type, an explicit_template_type,\n+\tor an implicit template type at the end.\n+\t* lex.c (yyprint): Handle a PTYPENAME being a TEMPLATE_DECL.\n+\t* decl.c (make_typename_type): Handle template-id where the name\n+\tis a TEMPLATE_DECL.\n+\t* call.c (build_scoped_method_call): Handle member template \n+\tdestructor call.\n+\t* pt.c (tsubst_copy, METHOD_CALL_EXPR): Don't assume a member \n+\tdestructor is represented by the type.\n+\n \t* cp-tree.h (TYPENAME_TYPE_FULLNAME): New macro.\n \t* parse.y (nested_name_specifier): Add 'template' case.\n \t(explicit_template_type): New rule."}, {"sha": "cf5a631e8428f72eb6a0ad465fca39ece838e072", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11686454d62adcb8daa74a5fe12acb94df50aa04/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11686454d62adcb8daa74a5fe12acb94df50aa04/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=11686454d62adcb8daa74a5fe12acb94df50aa04", "patch": "@@ -1476,8 +1476,9 @@ build_scoped_method_call (exp, basetype, name, parms)\n     {\n       if (TREE_CODE (name) == BIT_NOT_EXPR)\n \t{\n-\t  tree type = get_aggr_from_typedef (TREE_OPERAND (name, 0), 1);\n-\t  name = build_min_nt (BIT_NOT_EXPR, type);\n+\t  tree type = get_aggr_from_typedef (TREE_OPERAND (name, 0), 0);\n+\t  if (type)\n+\t    name = build_min_nt (BIT_NOT_EXPR, type);\n \t}\n       name = build_min_nt (SCOPE_REF, basetype, name);\n       return build_min_nt (METHOD_CALL_EXPR, name, exp, parms, NULL_TREE);"}, {"sha": "6d44bb0f9904f097925cc18eddb6ec627283f149", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11686454d62adcb8daa74a5fe12acb94df50aa04/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11686454d62adcb8daa74a5fe12acb94df50aa04/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=11686454d62adcb8daa74a5fe12acb94df50aa04", "patch": "@@ -4484,7 +4484,11 @@ make_typename_type (context, name)\n   fullname = name;\n \n   if (TREE_CODE (name) == TEMPLATE_ID_EXPR)\n-    name = TREE_OPERAND (name, 0);\n+    {\n+      name = TREE_OPERAND (name, 0);\n+      if (TREE_CODE (name) == TEMPLATE_DECL)\n+\tname = TREE_OPERAND (fullname, 0) = DECL_NAME (name);\n+    }\n   if (TREE_CODE (name) != IDENTIFIER_NODE)\n     my_friendly_abort (2000);\n "}, {"sha": "7ee6ba1b011ca07b04417eda015ad5c8a657284e", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11686454d62adcb8daa74a5fe12acb94df50aa04/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11686454d62adcb8daa74a5fe12acb94df50aa04/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=11686454d62adcb8daa74a5fe12acb94df50aa04", "patch": "@@ -908,7 +908,7 @@ yyprint (file, yychar, yylval)\n     case SCSPEC:\n     case PRE_PARSED_CLASS_DECL:\n       t = yylval.ttype;\n-      if (TREE_CODE (t) == TYPE_DECL)\n+      if (TREE_CODE (t) == TYPE_DECL || TREE_CODE (t) == TEMPLATE_DECL)\n \t{\n \t  fprintf (file, \" `%s'\", DECL_NAME (t));\n \t  break;"}, {"sha": "3dc9c2c69c0b870ff091b67b1a6339f980551f53", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 2920, "deletions": 2934, "changes": 5854, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11686454d62adcb8daa74a5fe12acb94df50aa04/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11686454d62adcb8daa74a5fe12acb94df50aa04/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=11686454d62adcb8daa74a5fe12acb94df50aa04"}, {"sha": "be92c572335a1b5ddf74fc556b222887f784ee0f", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11686454d62adcb8daa74a5fe12acb94df50aa04/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11686454d62adcb8daa74a5fe12acb94df50aa04/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=11686454d62adcb8daa74a5fe12acb94df50aa04", "patch": "@@ -3169,8 +3169,8 @@ nested_name_specifier:\n \t  nested_name_specifier_1\n \t| nested_name_specifier nested_name_specifier_1\n \t\t{ $$ = $2; }\n-\t| nested_name_specifier TEMPLATE template_type SCOPE\n-\t\t{ got_scope = $$ = complete_type (TREE_TYPE ($3)); }\n+\t| nested_name_specifier explicit_template_type SCOPE\n+\t\t{ got_scope = $$ = make_typename_type ($1, $2); }\n \t;\n \n /* Why the @#$%^& do type_name and notype_identifier need to be expanded\n@@ -3223,7 +3223,7 @@ typename_sub:\n \t;\n \n typename_sub0:\n-\t  typename_sub1 identifier\n+\t  typename_sub1 identifier %prec EMPTY\n \t\t{\n \t\t  if (TREE_CODE_CLASS (TREE_CODE ($1)) == 't')\n \t\t    $$ = make_typename_type ($1, $2);\n@@ -3236,6 +3236,16 @@ typename_sub0:\n \t\t\t$$ = TREE_TYPE ($$);\n \t\t    }\n \t\t}\n+\t| typename_sub1 template_type %prec EMPTY\n+\t\t{ $$ = TREE_TYPE ($2); }\n+\t| typename_sub1 identifier '<' template_arg_list_opt\n+\t  template_close_bracket\n+\t\t{\n+\t\t  $$ = build_min_nt (TEMPLATE_ID_EXPR, $2, $4);\n+\t\t  $$ = make_typename_type ($1, $$);\n+\t\t}\n+\t| typename_sub1 explicit_template_type %prec EMPTY\n+\t\t{ $$ = make_typename_type ($1, $2); }\n \t;\n \n typename_sub1:"}, {"sha": "015604f7478c9f9e70ebe06c6ae1fdfa92dd332b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11686454d62adcb8daa74a5fe12acb94df50aa04/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11686454d62adcb8daa74a5fe12acb94df50aa04/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=11686454d62adcb8daa74a5fe12acb94df50aa04", "patch": "@@ -4502,7 +4502,9 @@ tsubst_copy (t, args, in_decl)\n \t    tree base = tsubst_copy (TREE_OPERAND (name, 0), args, in_decl);\n \t    name = TREE_OPERAND (name, 1);\n \t    name = tsubst_copy (TREE_OPERAND (name, 0), args, in_decl);\n-\t    name = build1 (BIT_NOT_EXPR, NULL_TREE, TYPE_MAIN_VARIANT (name));\n+\t    if (TREE_CODE (name) != IDENTIFIER_NODE)\n+\t      name = TYPE_MAIN_VARIANT (name);\n+\t    name = build1 (BIT_NOT_EXPR, NULL_TREE, name);\n \t    name = build_nt (SCOPE_REF, base, name);\n \t  }\n \telse"}]}