{"sha": "e5e8a8bf3921f126e8ce4e14b02d99ceaa6805c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVlOGE4YmYzOTIxZjEyNmU4Y2U0ZTE0YjAyZDk5Y2VhYTY4MDVjNw==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "1998-05-17T23:00:05Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-17T23:00:05Z"}, "message": "i386.h (ALIGN_DFmode): Delete.\n\n        * i386.h (ALIGN_DFmode): Delete.\n        (CONSTANT_ALIGNMENT): Define.\n        * varasm.c (force_const_mem): Use it.\n\nFrom-SVN: r19823", "tree": {"sha": "57adeaca11a81e869dded7cdb7caaa2c7bfb2115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57adeaca11a81e869dded7cdb7caaa2c7bfb2115"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5e8a8bf3921f126e8ce4e14b02d99ceaa6805c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e8a8bf3921f126e8ce4e14b02d99ceaa6805c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5e8a8bf3921f126e8ce4e14b02d99ceaa6805c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e8a8bf3921f126e8ce4e14b02d99ceaa6805c7/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b771b6b4f91faf2aecadb2e1e491dc4f6e80299f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b771b6b4f91faf2aecadb2e1e491dc4f6e80299f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b771b6b4f91faf2aecadb2e1e491dc4f6e80299f"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "e2cbd10b62881f9ec15b7df2cf8d973c456281fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5e8a8bf3921f126e8ce4e14b02d99ceaa6805c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5e8a8bf3921f126e8ce4e14b02d99ceaa6805c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5e8a8bf3921f126e8ce4e14b02d99ceaa6805c7", "patch": "@@ -1,3 +1,9 @@\n+Sun May 17 23:59:45 1998  John Wehle  (john@feith.com)\n+\n+\t* i386.h (ALIGN_DFmode): Delete.\n+\t(CONSTANT_ALIGNMENT): Define.\n+\t* varasm.c (force_const_mem): Use it.\n+\n Sun May 17 19:31:05 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.c (alpha_emit_conditional_branch): Clear cmp_code after"}, {"sha": "b55ffccb986e2a2a3ad2d3e3ed54ba8a4adbb78a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5e8a8bf3921f126e8ce4e14b02d99ceaa6805c7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5e8a8bf3921f126e8ce4e14b02d99ceaa6805c7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e5e8a8bf3921f126e8ce4e14b02d99ceaa6805c7", "patch": "@@ -419,8 +419,30 @@ extern int ix86_arch;\n    aligned on 64 bit boundaries. */\n #define BIGGEST_ALIGNMENT (TARGET_ALIGN_DOUBLE ? 64 : 32)\n \n-/* align DFmode constants and nonaggregates */\n-#define ALIGN_DFmode (!TARGET_386)\n+/* If defined, a C expression to compute the alignment given to a\n+   constant that is being placed in memory.  CONSTANT is the constant\n+   and ALIGN is the alignment that the object would ordinarily have.\n+   The value of this macro is used instead of that alignment to align\n+   the object.\n+\n+   If this macro is not defined, then ALIGN is used.\n+\n+   The typical use of this macro is to increase alignment for string\n+   constants to be word aligned so that `strcpy' calls that copy\n+   constants can be done inline.  */\n+\n+#define CONSTANT_ALIGNMENT(EXP, ALIGN)\t\t\t\t\t\\\n+  (TREE_CODE (EXP) == REAL_CST\t\t\t\t\t\t\\\n+    ? ((TYPE_MODE (TREE_TYPE (EXP)) == DFmode && (ALIGN) < 64)\t\t\\\n+\t? 64\t\t\t\t\t\t\t\t\\\n+   \t: (TYPE_MODE (TREE_TYPE (EXP)) == XFmode && (ALIGN) < 128)\t\\\n+\t? 128\t\t\t\t\t\t\t\t\\\n+\t: (ALIGN))\t\t\t\t\t\t\t\\\n+    : TREE_CODE (EXP) == STRING_CST\t\t\t\t\t\\\n+    ? ((TREE_STRING_LENGTH (EXP) >= 31 && (ALIGN) < 256)\t\t\\\n+\t? 256\t\t\t\t\t\t\t\t\\\n+\t: (ALIGN))\t\t\t\t\t\t\t\\\n+    : (ALIGN))\n \n /* If defined, a C expression to compute the alignment for a static\n    variable.  TYPE is the data type, and ALIGN is the alignment that"}, {"sha": "9951a50d31e7480a86a019c30a6c6bb5510ab189", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5e8a8bf3921f126e8ce4e14b02d99ceaa6805c7/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5e8a8bf3921f126e8ce4e14b02d99ceaa6805c7/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=e5e8a8bf3921f126e8ce4e14b02d99ceaa6805c7", "patch": "@@ -3417,6 +3417,10 @@ force_const_mem (mode, x)\n       align = (mode == VOIDmode) ? UNITS_PER_WORD : GET_MODE_SIZE (mode);\n       if (align > BIGGEST_ALIGNMENT / BITS_PER_UNIT)\n \talign = BIGGEST_ALIGNMENT / BITS_PER_UNIT;\n+#ifdef CONSTANT_ALIGNMENT\n+      align = CONSTANT_ALIGNMENT (make_tree (type_for_mode (mode, 0), x),\n+\t\t\t\t align * BITS_PER_UNIT) / BITS_PER_UNIT;\n+#endif\n \n       pool_offset += align - 1;\n       pool_offset &= ~ (align - 1);"}]}