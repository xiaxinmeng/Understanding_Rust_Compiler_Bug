{"sha": "fd9982bb0051d1a678191b684bb907d1ac177991", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ5OTgyYmIwMDUxZDFhNjc4MTkxYjY4NGJiOTA3ZDFhYzE3Nzk5MQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-22T16:45:58Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-22T19:52:11Z"}, "message": "analyzer: fix setjmp handling with -g (PR 93378)\n\nPR analyzer/93378 reports an ICE at -O1 -g when analyzing a rewind via\nlongjmp to a setjmp call with.\n\nThe root cause is that the rewind_info_t::get_setjmp_call attempts to\nlocate the setjmp GIMPLE_CALL via within the exploded_node containing\nit, but the exploded_node has two stmts: a GIMPLE_DEBUG, then the\nGIMPLE_CALL, and so erroneously picks the GIMPLE_DEBUG, leading to\na failed as_a <const gcall *>.\n\nThis patch reworks how the analyzer stores information about a setjmp\nso that instead of storing an exploded_node *, it instead introduces\na \"setjmp_record\" struct, for use by both setjmp_svalue and\nrewind_info_t.  Hence we store the information directly, rather than\nattempting to reconstruct it, fixing the bug.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93378\n\t* engine.cc (setjmp_svalue::compare_fields): Update for\n\treplacement of m_enode with m_setjmp_record.\n\t(setjmp_svalue::add_to_hash): Likewise.\n\t(setjmp_svalue::get_index): Rename...\n\t(setjmp_svalue::get_enode_index): ...to this.\n\t(setjmp_svalue::print_details): Update for replacement of m_enode\n\twith m_setjmp_record.\n\t(exploded_node::on_longjmp): Likewise.\n\t* exploded-graph.h (rewind_info_t::m_enode_origin): Replace...\n\t(rewind_info_t::m_setjmp_record): ...with this.\n\t(rewind_info_t::rewind_info_t): Update for replacement of m_enode\n\twith m_setjmp_record.\n\t(rewind_info_t::get_setjmp_point): Likewise.\n\t(rewind_info_t::get_setjmp_call): Likewise.\n\t* region-model.cc (region_model::dump_summary_of_map): Likewise.\n\t(region_model::on_setjmp): Likewise.\n\t* region-model.h (struct setjmp_record): New struct.\n\t(setjmp_svalue::m_enode): Replace...\n\t(setjmp_svalue::m_setjmp_record): ...with this.\n\t(setjmp_svalue::setjmp_svalue): Update for replacement of m_enode\n\twith m_setjmp_record.\n\t(setjmp_svalue::clone): Likewise.\n\t(setjmp_svalue::get_index): Rename...\n\t(setjmp_svalue::get_enode_index): ...to this.\n\t(setjmp_svalue::get_exploded_node): Replace...\n\t(setjmp_svalue::get_setjmp_record): ...with this.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93378\n\t* gcc.dg/analyzer/setjmp-pr93378.c: New test.", "tree": {"sha": "911c3b844a1a70c83a3a00c4472804d967bb05ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/911c3b844a1a70c83a3a00c4472804d967bb05ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd9982bb0051d1a678191b684bb907d1ac177991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9982bb0051d1a678191b684bb907d1ac177991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd9982bb0051d1a678191b684bb907d1ac177991", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9982bb0051d1a678191b684bb907d1ac177991/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da7cf663b75513e4d2baf5a579ffcb4f8a61193b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7cf663b75513e4d2baf5a579ffcb4f8a61193b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da7cf663b75513e4d2baf5a579ffcb4f8a61193b"}], "stats": {"total": 124, "additions": 100, "deletions": 24}, "files": [{"sha": "26c1184a624086c50a8f3e16e1081a187a7c4d40", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9982bb0051d1a678191b684bb907d1ac177991/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9982bb0051d1a678191b684bb907d1ac177991/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=fd9982bb0051d1a678191b684bb907d1ac177991", "patch": "@@ -1,3 +1,33 @@\n+2020-01-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93378\n+\t* engine.cc (setjmp_svalue::compare_fields): Update for\n+\treplacement of m_enode with m_setjmp_record.\n+\t(setjmp_svalue::add_to_hash): Likewise.\n+\t(setjmp_svalue::get_index): Rename...\n+\t(setjmp_svalue::get_enode_index): ...to this.\n+\t(setjmp_svalue::print_details): Update for replacement of m_enode\n+\twith m_setjmp_record.\n+\t(exploded_node::on_longjmp): Likewise.\n+\t* exploded-graph.h (rewind_info_t::m_enode_origin): Replace...\n+\t(rewind_info_t::m_setjmp_record): ...with this.\n+\t(rewind_info_t::rewind_info_t): Update for replacement of m_enode\n+\twith m_setjmp_record.\n+\t(rewind_info_t::get_setjmp_point): Likewise.\n+\t(rewind_info_t::get_setjmp_call): Likewise.\n+\t* region-model.cc (region_model::dump_summary_of_map): Likewise.\n+\t(region_model::on_setjmp): Likewise.\n+\t* region-model.h (struct setjmp_record): New struct.\n+\t(setjmp_svalue::m_enode): Replace...\n+\t(setjmp_svalue::m_setjmp_record): ...with this.\n+\t(setjmp_svalue::setjmp_svalue): Update for replacement of m_enode\n+\twith m_setjmp_record.\n+\t(setjmp_svalue::clone): Likewise.\n+\t(setjmp_svalue::get_index): Rename...\n+\t(setjmp_svalue::get_enode_index): ...to this.\n+\t(setjmp_svalue::get_exploded_node): Replace...\n+\t(setjmp_svalue::get_setjmp_record): ...with this.\n+\n 2020-01-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93316"}, {"sha": "737ea1dd6e42fa9de8d85407c7580b021dfcf8ba", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9982bb0051d1a678191b684bb907d1ac177991/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9982bb0051d1a678191b684bb907d1ac177991/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=fd9982bb0051d1a678191b684bb907d1ac177991", "patch": "@@ -155,23 +155,23 @@ impl_region_model_context::on_unknown_change (svalue_id sid)\n bool\n setjmp_svalue::compare_fields (const setjmp_svalue &other) const\n {\n-  return m_enode == other.m_enode;\n+  return m_setjmp_record == other.m_setjmp_record;\n }\n \n /* Implementation of svalue::add_to_hash vfunc for setjmp_svalue.  */\n \n void\n setjmp_svalue::add_to_hash (inchash::hash &hstate) const\n {\n-  hstate.add_int (m_enode->m_index);\n+  hstate.add_int (m_setjmp_record.m_enode->m_index);\n }\n \n /* Get the index of the stored exploded_node.  */\n \n int\n-setjmp_svalue::get_index () const\n+setjmp_svalue::get_enode_index () const\n {\n-  return m_enode->m_index;\n+  return m_setjmp_record.m_enode->m_index;\n }\n \n /* Implementation of svalue::print_details vfunc for setjmp_svalue.  */\n@@ -181,7 +181,7 @@ setjmp_svalue::print_details (const region_model &model ATTRIBUTE_UNUSED,\n \t\t\t      svalue_id this_sid ATTRIBUTE_UNUSED,\n \t\t\t      pretty_printer *pp) const\n {\n-  pp_printf (pp, \"setjmp: EN: %i\", m_enode->m_index);\n+  pp_printf (pp, \"setjmp: EN: %i\", get_enode_index ());\n }\n \n /* Concrete implementation of sm_context, wiring it up to the rest of this\n@@ -1172,11 +1172,11 @@ exploded_node::on_longjmp (exploded_graph &eg,\n   if (!setjmp_sval)\n     return;\n \n+  const setjmp_record tmp_setjmp_record = setjmp_sval->get_setjmp_record ();\n+\n   /* Build a custom enode and eedge for rewinding from the longjmp\n      call back to the setjmp.  */\n-\n-  const exploded_node *enode_origin = setjmp_sval->get_exploded_node ();\n-  rewind_info_t rewind_info (enode_origin);\n+  rewind_info_t rewind_info (tmp_setjmp_record);\n \n   const gcall *setjmp_call = rewind_info.get_setjmp_call ();\n   const program_point &setjmp_point = rewind_info.get_setjmp_point ();\n@@ -1217,7 +1217,7 @@ exploded_node::on_longjmp (exploded_graph &eg,\n       exploded_edge *eedge\n \t= eg.add_edge (const_cast<exploded_node *> (this), next, NULL,\n \t\t       change,\n-\t\t       new rewind_info_t (enode_origin));\n+\t\t       new rewind_info_t (tmp_setjmp_record));\n \n       /* For any diagnostics that were queued here (such as leaks) we want\n \t the checker_path to show the rewinding events after the \"final event\""}, {"sha": "3d1445c87ad0937b5be3f6bf99221bb87865d040", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9982bb0051d1a678191b684bb907d1ac177991/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9982bb0051d1a678191b684bb907d1ac177991/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=fd9982bb0051d1a678191b684bb907d1ac177991", "patch": "@@ -307,8 +307,8 @@ class exploded_edge : public dedge<eg_traits>\n class rewind_info_t : public exploded_edge::custom_info_t\n {\n public:\n-  rewind_info_t (const exploded_node *enode_origin)\n-  : m_enode_origin (enode_origin)\n+  rewind_info_t (const setjmp_record &setjmp_record)\n+  : m_setjmp_record (setjmp_record)\n   {}\n \n   void print (pretty_printer *pp) FINAL OVERRIDE\n@@ -324,7 +324,7 @@ class rewind_info_t : public exploded_edge::custom_info_t\n \n   const program_point &get_setjmp_point () const\n   {\n-    const program_point &origin_point = m_enode_origin->get_point ();\n+    const program_point &origin_point = get_enode_origin ()->get_point ();\n \n     /* \"origin_point\" ought to be before the call to \"setjmp\".  */\n     gcc_assert (origin_point.get_kind () == PK_BEFORE_STMT);\n@@ -336,13 +336,16 @@ class rewind_info_t : public exploded_edge::custom_info_t\n \n   const gcall *get_setjmp_call () const\n   {\n-    return as_a <const gcall *> (get_setjmp_point ().get_stmt ());\n+    return m_setjmp_record.m_setjmp_call;\n   }\n \n-  const exploded_node *get_enode_origin () const { return m_enode_origin; }\n+  const exploded_node *get_enode_origin () const\n+  {\n+    return m_setjmp_record.m_enode;\n+  }\n \n private:\n-  const exploded_node *m_enode_origin;\n+  setjmp_record m_setjmp_record;\n };\n \n /* Statistics about aspects of an exploded_graph.  */"}, {"sha": "25a22f8fc65b45b31f1f03848d7a8604438620ff", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9982bb0051d1a678191b684bb907d1ac177991/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9982bb0051d1a678191b684bb907d1ac177991/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=fd9982bb0051d1a678191b684bb907d1ac177991", "patch": "@@ -3660,7 +3660,7 @@ region_model::dump_summary_of_map (pretty_printer *pp,\n \tcase SK_SETJMP:\n \t  dump_separator (pp, is_first);\n \t  pp_printf (pp, \"setjmp: EN: %i\",\n-\t\t     sval->dyn_cast_setjmp_svalue ()->get_index ());\n+\t\t     sval->dyn_cast_setjmp_svalue ()->get_enode_index ());\n \t  break;\n \t}\n     }\n@@ -4493,10 +4493,11 @@ region_model::on_setjmp (const gcall *call, const exploded_node *enode,\n   region_id buf_rid = deref_rvalue (gimple_call_arg (call, 0), ctxt);\n   region *buf = get_region (buf_rid);\n \n-  /* Create a setjmp_svalue for ENODE and store it in BUF_RID's region.  */\n+  /* Create a setjmp_svalue for this call and store it in BUF_RID's region.  */\n   if (buf)\n     {\n-      svalue *sval = new setjmp_svalue (enode, buf->get_type ());\n+      setjmp_record r (enode, call);\n+      svalue *sval = new setjmp_svalue (r, buf->get_type ());\n       svalue_id new_sid = add_svalue (sval);\n       set_value (buf_rid, new_sid, ctxt);\n     }"}, {"sha": "f7fb7b0b6d0a63a2851ba9874a8fceb8e4831604", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9982bb0051d1a678191b684bb907d1ac177991/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9982bb0051d1a678191b684bb907d1ac177991/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=fd9982bb0051d1a678191b684bb907d1ac177991", "patch": "@@ -718,38 +718,60 @@ is_a_helper <poisoned_svalue *>::test (svalue *sval)\n \n namespace ana {\n \n+/* A bundle of information recording a setjmp call, corresponding roughly\n+   to a jmp_buf.  */\n+\n+struct setjmp_record\n+{\n+  setjmp_record (const exploded_node *enode,\n+\t\t const gcall *setjmp_call)\n+  : m_enode (enode), m_setjmp_call (setjmp_call)\n+  {\n+  }\n+\n+  bool operator== (const setjmp_record &other) const\n+  {\n+    return (m_enode == other.m_enode\n+\t    && m_setjmp_call == other.m_setjmp_call);\n+  }\n+\n+  const exploded_node *m_enode;\n+  const gcall *m_setjmp_call;\n+};\n+\n /* Concrete subclass of svalue representing setjmp buffers, so that\n    longjmp can potentially \"return\" to an entirely different function.  */\n \n class setjmp_svalue : public svalue\n {\n public:\n-  setjmp_svalue (const exploded_node *enode, tree type)\n-  : svalue (type), m_enode (enode)\n+  setjmp_svalue (const setjmp_record &setjmp_record,\n+\t\t tree type)\n+  : svalue (type), m_setjmp_record (setjmp_record)\n   {}\n \n   bool compare_fields (const setjmp_svalue &other) const;\n \n   svalue *clone () const FINAL OVERRIDE\n-  { return new setjmp_svalue (m_enode, get_type ()); }\n+  { return new setjmp_svalue (m_setjmp_record, get_type ()); }\n \n   enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_SETJMP; }\n \n   void add_to_hash (inchash::hash &hstate) const FINAL OVERRIDE;\n \n   setjmp_svalue *dyn_cast_setjmp_svalue () FINAL OVERRIDE { return this; }\n \n-  int get_index () const;\n+  int get_enode_index () const;\n \n-  const exploded_node *get_exploded_node () const { return m_enode; }\n+  const setjmp_record &get_setjmp_record () const { return m_setjmp_record; }\n \n  private:\n   void print_details (const region_model &model,\n \t\t      svalue_id this_sid,\n \t\t      pretty_printer *pp) const\n     FINAL OVERRIDE;\n \n-  const exploded_node *m_enode;\n+  setjmp_record m_setjmp_record;\n };\n \n /* An enum for discriminating between the different concrete subclasses"}, {"sha": "dd6d7890d053f0a13eb7d040db9741663429da40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9982bb0051d1a678191b684bb907d1ac177991/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9982bb0051d1a678191b684bb907d1ac177991/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd9982bb0051d1a678191b684bb907d1ac177991", "patch": "@@ -1,3 +1,8 @@\n+2020-01-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93378\n+\t* gcc.dg/analyzer/setjmp-pr93378.c: New test.\n+\n 2020-01-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93316"}, {"sha": "7934a40301d054592e24a1e0f52affd3ddb12a4b", "filename": "gcc/testsuite/gcc.dg/analyzer/setjmp-pr93378.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9982bb0051d1a678191b684bb907d1ac177991/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsetjmp-pr93378.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9982bb0051d1a678191b684bb907d1ac177991/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsetjmp-pr93378.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsetjmp-pr93378.c?ref=fd9982bb0051d1a678191b684bb907d1ac177991", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-additional-options \"-O1 -g\" } */\n+\n+#include <setjmp.h>\n+\n+jmp_buf buf;\n+\n+int\n+test (void)\n+{\n+  if (_setjmp (buf) != 0)\n+    return 0;\n+\n+  longjmp (buf, 1);\n+  return 1;\n+}"}]}