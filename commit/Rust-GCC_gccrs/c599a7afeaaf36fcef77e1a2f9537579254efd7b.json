{"sha": "c599a7afeaaf36fcef77e1a2f9537579254efd7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU5OWE3YWZlYWFmMzZmY2VmNzdlMWEyZjk1Mzc1NzkyNTRlZmQ3Yg==", "commit": {"author": {"name": "Robert Bowdidge", "email": "bowdidge@gcc.gnu.org", "date": "2003-10-21T23:45:26Z"}, "committer": {"name": "Robert Bowdidge", "email": "bowdidge@gcc.gnu.org", "date": "2003-10-21T23:45:26Z"}, "message": "Check that asm specs are handled correctly in structure and class field declarations.\n\nCorrect behavior is that these are permitted on static fields (because only one\ninstance exists) and are not permitted on non-static fields.  In the case of\nstatic fields, check to make sure the assembler output shows the aliased name\nsomewhere.\n\nFrom-SVN: r72777", "tree": {"sha": "f1ea21b9a14102908ffddd672d444f9726494cce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1ea21b9a14102908ffddd672d444f9726494cce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c599a7afeaaf36fcef77e1a2f9537579254efd7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c599a7afeaaf36fcef77e1a2f9537579254efd7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c599a7afeaaf36fcef77e1a2f9537579254efd7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c599a7afeaaf36fcef77e1a2f9537579254efd7b/comments", "author": null, "committer": null, "parents": [{"sha": "e3939998cf09380d0b5f114aa4f79ae92e6b02a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3939998cf09380d0b5f114aa4f79ae92e6b02a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3939998cf09380d0b5f114aa4f79ae92e6b02a2"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "4c528a0f8e11a978d3557d5df90fb57001690e69", "filename": "gcc/testsuite/g++.dg/ext/asmspecInvalid.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c599a7afeaaf36fcef77e1a2f9537579254efd7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2FasmspecInvalid.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c599a7afeaaf36fcef77e1a2f9537579254efd7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2FasmspecInvalid.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2FasmspecInvalid.C?ref=c599a7afeaaf36fcef77e1a2f9537579254efd7b", "patch": "@@ -0,0 +1,18 @@\n+// tests that the asm directive is correctly handled for static fields\n+// in structures and classes.  This only applies to C++; such\n+// directives generate errors in C.  Assembler directives for local\n+// variables should be tested by the C test suite.  \n+//\n+// Contributed by Robert Bowdidge (bowdidge@apple.com) 14 Oct 2003\n+\n+// { dg-do compile }\n+\n+struct Foo {\n+  // This should reference a variable called bar\n+  int i __asm__(\"bar\");  /* { dg-error \"specifiers are not permitted\" } */\n+};\n+\n+int main (void ) {\n+  int j = 0;\n+  return j;\n+}"}, {"sha": "98d98b46f9370ce78d671dc2935c9c9ee11cd5a5", "filename": "gcc/testsuite/g++.dg/ext/asmspecValid.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c599a7afeaaf36fcef77e1a2f9537579254efd7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2FasmspecValid.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c599a7afeaaf36fcef77e1a2f9537579254efd7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2FasmspecValid.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2FasmspecValid.C?ref=c599a7afeaaf36fcef77e1a2f9537579254efd7b", "patch": "@@ -0,0 +1,43 @@\n+// tests that the asm directive is correctly handled for static fields\n+// in structures and classes.  This only applies to C++; such\n+// directives generate errors in C.  Assembler directives for local\n+// variables should be tested by the C test suite.  \n+//\n+// Contributed by Robert Bowdidge (bowdidge@apple.com) 14 Oct 2003\n+\n+// { dg-do compile }\n+\n+struct Foo {\n+  // This should reference a variable called bar\n+  static int i __asm__(\"bar\"); \n+};\n+\n+\n+class Bar {\n+public:\n+  static int i __asm__(\"theRealI\");\n+  static int j __asm__(\"theRealJ\");\n+  int boof;\n+};\n+\n+class Baz : public Bar { \n+public:\n+   static char *ptr __asm__ (\"theRealString\");\n+};\n+\n+int main (int argc, char **argv) {\n+  struct Foo myFoo;\n+  Bar b;\n+  myFoo.i = 1;\n+  Foo::i = 2;\n+  Baz::j = 10;\n+  Baz::ptr = 0;\n+  b.i = 1;\n+  return (b.i);\n+}\n+\n+\n+/* { dg-final {scan-assembler \"bar\"} } */\n+/* { dg-final {scan-assembler \"theRealString\"} } */\n+/* { dg-final {scan-assembler \"theRealI\" } } */\n+/* { dg-final {scan-assembler \"theRealJ\" } } */"}]}