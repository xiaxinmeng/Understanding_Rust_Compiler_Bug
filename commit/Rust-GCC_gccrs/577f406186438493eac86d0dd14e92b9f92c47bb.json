{"sha": "577f406186438493eac86d0dd14e92b9f92c47bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc3ZjQwNjE4NjQzODQ5M2VhYzg2ZDBkZDE0ZTkyYjlmOTJjNDdiYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-02-18T21:23:26Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2002-02-18T21:23:26Z"}, "message": "locale_facets.tcc (money_put::do_put): For the space field use __fill instead of ' ', uniformly.\n\n2002-02-18  Paolo Carlini  <pcarlini@unitus.it>\n\n\tlibstdc++/5708\n\t* include/bits/locale_facets.tcc (money_put::do_put):\n\tFor the space field use __fill instead of ' ', uniformly.\n\t* testsuite/22_locale/money_put_members_char.cc:\n\tAdd test05 distilled from PR.\n\t(test01-02-03): Trim some '*' to ' '.\n\t* testsuite/22_locale/money_put_members_wchar_t.cc: Ditto.\n\nFrom-SVN: r49847", "tree": {"sha": "901dc9346d9b33b1d6a07bf0b2083694e73821be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/901dc9346d9b33b1d6a07bf0b2083694e73821be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/577f406186438493eac86d0dd14e92b9f92c47bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/577f406186438493eac86d0dd14e92b9f92c47bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/577f406186438493eac86d0dd14e92b9f92c47bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/577f406186438493eac86d0dd14e92b9f92c47bb/comments", "author": null, "committer": null, "parents": [{"sha": "3fcfe88d1957982a29bc9285b69fc6e1ac96ac31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fcfe88d1957982a29bc9285b69fc6e1ac96ac31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fcfe88d1957982a29bc9285b69fc6e1ac96ac31"}], "stats": {"total": 146, "additions": 117, "deletions": 29}, "files": [{"sha": "060a48ea6b9b9030e2a3d384745eb4f50ad3ab38", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577f406186438493eac86d0dd14e92b9f92c47bb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577f406186438493eac86d0dd14e92b9f92c47bb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=577f406186438493eac86d0dd14e92b9f92c47bb", "patch": "@@ -1,3 +1,13 @@\n+2002-02-18  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tlibstdc++/5708\n+\t* include/bits/locale_facets.tcc (money_put::do_put):\n+\tFor the space field use __fill instead of ' ', uniformly.\n+\t* testsuite/22_locale/money_put_members_char.cc:\n+\tAdd test05 distilled from PR.\n+\t(test01-02-03): Trim some '*' to ' '.\n+\t* testsuite/22_locale/money_put_members_wchar_t.cc: Ditto.\n+\n 2002-02-18  Loren Rittle <ljrittle@acm.org>\n \n \tlibstdc++/5697"}, {"sha": "02ae96eeb51269e032e0225e838dfcec1873603b", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577f406186438493eac86d0dd14e92b9f92c47bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577f406186438493eac86d0dd14e92b9f92c47bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=577f406186438493eac86d0dd14e92b9f92c47bb", "patch": "@@ -1230,7 +1230,7 @@ namespace std\n \t\t  if (__testipad)\n \t\t    __res += string_type(__width - __len, __fill);\n \t\t  else\n-\t\t    __res += __ctype.widen(' ');\n+\t\t    __res += __ctype.widen(__fill);\n \t\t  break;\n \t\tcase money_base::none:\n \t\t  if (__testipad)"}, {"sha": "72915dbc07dea4838bf6cc20b8a368cdad797c37", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_char.cc", "status": "modified", "additions": 53, "deletions": 14, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577f406186438493eac86d0dd14e92b9f92c47bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577f406186438493eac86d0dd14e92b9f92c47bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc?ref=577f406186438493eac86d0dd14e92b9f92c47bb", "patch": "@@ -79,12 +79,12 @@ void test01()\n   const money_put<char>& mon_put = use_facet<money_put<char> >(oss.getloc()); \n \n \n-  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, '*', digits1);\n+  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n   string result1 = oss.str();\n   VERIFY( result1 == \"7.200.000.000,00 \");\n \n   oss.str(empty);\n-  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, '*', digits1);\n+  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n   string result2 = oss.str();\n   VERIFY( result2 == \"7.200.000.000,00 \");\n \n@@ -95,12 +95,12 @@ void test01()\n   oss.setf(ios_base::showbase);\n \n   oss.str(empty);\n-  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, '*', digits1);\n+  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n   string result3 = oss.str();\n   VERIFY( result3 == \"7.200.000.000,00 DEM \");\n \n   oss.str(empty);\n-  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, '*', digits1);\n+  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n   string result4 = oss.str();\n   VERIFY( result4 == \"7.200.000.000,00 DM\");\n \n@@ -112,34 +112,34 @@ void test01()\n   // test sign of more than one digit, say hong kong.\n   oss.imbue(loc_hk);\n   oss.str(empty);\n-  iterator_type os_it05 = mon_put.put(oss.rdbuf(), false, oss, '*', digits1);\n+  iterator_type os_it05 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n   string result5 = oss.str();\n   VERIFY( result5 == \"HK$7,200,000,000.00\");\n \n   oss.str(empty);\n-  iterator_type os_it06 = mon_put.put(oss.rdbuf(), true, oss, '*', digits2);\n+  iterator_type os_it06 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits2);\n   string result6 = oss.str();\n   VERIFY( result6 == \"(HKD 100,000,000,000.00)\");\n \n   // test one-digit formats without zero padding\n   oss.imbue(loc_c);\n   oss.str(empty);\n-  iterator_type os_it07 = mon_put.put(oss.rdbuf(), true, oss, '*', digits4);\n+  iterator_type os_it07 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits4);\n   string result7 = oss.str();\n   VERIFY( result7 == \"1\");\n \n   // test one-digit formats with zero padding, zero frac widths\n   oss.imbue(loc_hk);\n   oss.str(empty);\n-  iterator_type os_it08 = mon_put.put(oss.rdbuf(), true, oss, '*', digits4);\n+  iterator_type os_it08 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits4);\n   string result8 = oss.str();\n   VERIFY( result8 == \"(HKD .01)\");\n \n   oss.unsetf(ios_base::showbase);\n \n   // test bunk input\n   oss.str(empty);\n-  iterator_type os_it09 = mon_put.put(oss.rdbuf(), true, oss, '*', digits3);\n+  iterator_type os_it09 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits3);\n   string result9 = oss.str();\n   VERIFY( result9 == \"\");\n \n@@ -151,7 +151,7 @@ void test01()\n   oss.width(20);\n   iterator_type os_it10 = mon_put.put(oss.rdbuf(), true, oss, '*', digits4);\n   string result10 = oss.str();\n-  VERIFY( result10 == \"***************-,01 \");\n+  VERIFY( result10 == \"***************-,01*\");\n \n   oss.str(empty);\n   oss.width(20);\n@@ -210,12 +210,12 @@ void test02()\n   const money_put<char>& mon_put = use_facet<money_put<char> >(oss.getloc()); \n \n \n-  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, '*', digits1);\n+  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n   string result1 = oss.str();\n   VERIFY( result1 == \"7.200.000.000,00 \");\n \n   oss.str(empty);\n-  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, '*', digits1);\n+  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n   string result2 = oss.str();\n   VERIFY( result2 == \"7.200.000.000,00 \");\n \n@@ -226,12 +226,12 @@ void test02()\n   oss.setf(ios_base::showbase);\n \n   oss.str(empty);\n- iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, '*', digits1);\n+ iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n   string result3 = oss.str();\n   VERIFY( result3 == \"7.200.000.000,00 DEM \");\n \n   oss.str(empty);\n-  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, '*', digits1);\n+  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n   string result4 = oss.str();\n   VERIFY( result4 == \"7.200.000.000,00 DM\");\n \n@@ -303,11 +303,50 @@ void test04()\n #endif\n }\n \n+struct My_money_io : public std::moneypunct<char,false>\n+{\n+  char_type do_decimal_point() const { return '.'; }\n+  char_type do_thousands_sep() const { return ','; }\n+  std::string do_grouping() const { return \"\\003\"; }\n+  \n+  std::string do_negative_sign() const { return \"()\"; }\n+  \n+  int do_frac_digits() const { return 2; }\n+\n+  pattern do_neg_format() const\n+  {\n+    static pattern pat = { { symbol, space, sign, value } };\n+    return pat;\n+  }\n+};\n+\n+// libstdc++/5708\n+void test05()\n+{\n+  using namespace std;\n+  typedef ostreambuf_iterator<char> OutIt;\n+\n+  locale loc(locale::classic(), new My_money_io);\n+\n+  bool intl = false;\n+\n+  string val(\"-123456\");\n+  const money_put<char,OutIt>& mp  =\n+    use_facet<money_put<char, OutIt> >(loc);\n+\n+  ostringstream fmt;\n+  fmt.imbue(loc);\n+  OutIt out(fmt);\n+  mp.put(out,intl,fmt,'*',val);\n+  VERIFY( fmt.str() == \"*(1,234.56)\" );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n+  test05();\n   return 0;\n }"}, {"sha": "0688a65e8d0ade1c1bfa463cdb433112f121a246", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_wchar_t.cc", "status": "modified", "additions": 53, "deletions": 14, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577f406186438493eac86d0dd14e92b9f92c47bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577f406186438493eac86d0dd14e92b9f92c47bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc?ref=577f406186438493eac86d0dd14e92b9f92c47bb", "patch": "@@ -79,12 +79,12 @@ void test01()\n   const money_put<wchar_t>& mon_put = use_facet<money_put<wchar_t> >(oss.getloc()); \n \n \n-  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, '*', digits1);\n+  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n   wstring result1 = oss.str();\n   VERIFY( result1 == L\"7.200.000.000,00 \");\n \n   oss.str(empty);\n-  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, '*', digits1);\n+  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n   wstring result2 = oss.str();\n   VERIFY( result2 == L\"7.200.000.000,00 \");\n \n@@ -95,12 +95,12 @@ void test01()\n   oss.setf(ios_base::showbase);\n \n   oss.str(empty);\n-  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, '*', digits1);\n+  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n   wstring result3 = oss.str();\n   VERIFY( result3 == L\"7.200.000.000,00 DEM \");\n \n   oss.str(empty);\n-  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, '*', digits1);\n+  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n   wstring result4 = oss.str();\n   VERIFY( result4 == L\"7.200.000.000,00 DM\");\n \n@@ -112,34 +112,34 @@ void test01()\n   // test sign of more than one digit, say hong kong.\n   oss.imbue(loc_hk);\n   oss.str(empty);\n-  iterator_type os_it05 = mon_put.put(oss.rdbuf(), false, oss, '*', digits1);\n+  iterator_type os_it05 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n   wstring result5 = oss.str();\n   VERIFY( result5 == L\"HK$7,200,000,000.00\");\n \n   oss.str(empty);\n-  iterator_type os_it06 = mon_put.put(oss.rdbuf(), true, oss, '*', digits2);\n+  iterator_type os_it06 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits2);\n   wstring result6 = oss.str();\n   VERIFY( result6 == L\"(HKD 100,000,000,000.00)\");\n \n   // test one-digit formats without zero padding\n   oss.imbue(loc_c);\n   oss.str(empty);\n-  iterator_type os_it07 = mon_put.put(oss.rdbuf(), true, oss, '*', digits4);\n+  iterator_type os_it07 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits4);\n   wstring result7 = oss.str();\n   VERIFY( result7 == L\"1\");\n \n   // test one-digit formats with zero padding, zero frac widths\n   oss.imbue(loc_hk);\n   oss.str(empty);\n-  iterator_type os_it08 = mon_put.put(oss.rdbuf(), true, oss, '*', digits4);\n+  iterator_type os_it08 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits4);\n   wstring result8 = oss.str();\n   VERIFY( result8 == L\"(HKD .01)\");\n \n   oss.unsetf(ios_base::showbase);\n \n   // test bunk input\n   oss.str(empty);\n-  iterator_type os_it09 = mon_put.put(oss.rdbuf(), true, oss, '*', digits3);\n+  iterator_type os_it09 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits3);\n   wstring result9 = oss.str();\n   VERIFY( result9 == L\"\");\n \n@@ -151,7 +151,7 @@ void test01()\n   oss.width(20);\n   iterator_type os_it10 = mon_put.put(oss.rdbuf(), true, oss, '*', digits4);\n   wstring result10 = oss.str();\n-  VERIFY( result10 == L\"***************-,01 \");\n+  VERIFY( result10 == L\"***************-,01*\");\n \n   oss.str(empty);\n   oss.width(20);\n@@ -210,12 +210,12 @@ void test02()\n   const money_put<wchar_t>& mon_put = use_facet<money_put<wchar_t> >(oss.getloc()); \n \n \n-  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, '*', digits1);\n+  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n   wstring result1 = oss.str();\n   VERIFY( result1 == L\"7.200.000.000,00 \");\n \n   oss.str(empty);\n-  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, '*', digits1);\n+  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n   wstring result2 = oss.str();\n   VERIFY( result2 == L\"7.200.000.000,00 \");\n \n@@ -226,12 +226,12 @@ void test02()\n   oss.setf(ios_base::showbase);\n \n   oss.str(empty);\n- iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, '*', digits1);\n+ iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n   wstring result3 = oss.str();\n   VERIFY( result3 == L\"7.200.000.000,00 DEM \");\n \n   oss.str(empty);\n-  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, '*', digits1);\n+  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n   wstring result4 = oss.str();\n   VERIFY( result4 == L\"7.200.000.000,00 DM\");\n \n@@ -302,6 +302,44 @@ void test04()\n     }\n #endif\n }\n+\n+struct My_money_io : public std::moneypunct<wchar_t,false>\n+{\n+  char_type do_decimal_point() const { return L'.'; }\n+  char_type do_thousands_sep() const { return L','; }\n+  std::string do_grouping() const { return \"\\003\"; }\n+  \n+  std::wstring do_negative_sign() const { return L\"()\"; }\n+  \n+  int do_frac_digits() const { return 2; }\n+\n+  pattern do_neg_format() const\n+  {\n+    static pattern pat = { { symbol, space, sign, value } };\n+    return pat;\n+  }\n+};\n+\n+// libstdc++/5708\n+void test05()\n+{\n+  using namespace std;\n+  typedef ostreambuf_iterator<wchar_t> OutIt;\n+\n+  locale loc(locale::classic(), new My_money_io);\n+\n+  bool intl = false;\n+\n+  wstring val(L\"-123456\");\n+  const money_put<wchar_t,OutIt>& mp  =\n+    use_facet<money_put<wchar_t, OutIt> >(loc);\n+\n+  wostringstream fmt;\n+  fmt.imbue(loc);\n+  OutIt out(fmt);\n+  mp.put(out,intl,fmt,L'*',val);\n+  VERIFY( fmt.str() == L\"*(1,234.56)\" );\n+}\n #endif\n \n int main()\n@@ -311,6 +349,7 @@ int main()\n   test02();\n   test03();\n   test04();\n+  test05();\n #endif\n   return 0;\n }"}]}