{"sha": "c68b0a84257413fa115b2177650e024f4546501f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY4YjBhODQyNTc0MTNmYTExNWIyMTc3NjUwZTAyNGY0NTQ2NTAxZg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-07-19T16:09:51Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-07-19T16:09:51Z"}, "message": "fixfixes.c [...]: Remove unnecessary casts.\n\ngcc:\n\t* fixinc/fixfixes.c fixinc/fixincl.c fixinc/fixlib.c\n\tfixinc/server.c objc/objc-act.c: Remove unnecessary casts.\n\nf:\n\t* com.c data.c expr.c fini.c g77spec.c global.c lab.c lex.c name.c\n\tsta.c stc.c std.c storag.c stt.c stw.c symbol.c target.c type.c:\n\tRemove unnecessary casts.\n\ncp:\n\t* call.c class.c decl.c decl2.c g++spec.c lex.c parser.c pt.c rtti.c\n\tsemantics.c typeck.c: Remove unnecessary casts.\n\njava:\n\t* class.c java-tree.h jcf-write.c jvspec.c: Remove unnecessary\n\tcasts.\n\ntreelang:\n\t* treetree.c: Remove unnecessary casts.\n\nFrom-SVN: r69593", "tree": {"sha": "d243de95567f278205efde59b3ca0adf508e6084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d243de95567f278205efde59b3ca0adf508e6084"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c68b0a84257413fa115b2177650e024f4546501f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c68b0a84257413fa115b2177650e024f4546501f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c68b0a84257413fa115b2177650e024f4546501f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c68b0a84257413fa115b2177650e024f4546501f/comments", "author": null, "committer": null, "parents": [{"sha": "fd7643fbe49e24ba9553f28b0548f4e525b43001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd7643fbe49e24ba9553f28b0548f4e525b43001", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd7643fbe49e24ba9553f28b0548f4e525b43001"}], "stats": {"total": 439, "additions": 203, "deletions": 236}, "files": [{"sha": "8436b95dc61d11b99b16189fe7f32cae007d9a45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -1,3 +1,8 @@\n+2003-07-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* fixinc/fixfixes.c fixinc/fixincl.c fixinc/fixlib.c\n+\tfixinc/server.c objc/objc-act.c: Remove unnecessary casts.\n+\n 2003-07-19  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (legitimize_pic_address): Access local symbols "}, {"sha": "ef5694f531bfed4d93c2b2b5cccb7c1482f52037", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -1,3 +1,8 @@\n+2003-07-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* call.c class.c decl.c decl2.c g++spec.c lex.c parser.c pt.c rtti.c\n+\tsemantics.c typeck.c: Remove unnecessary casts.\n+\n 2003-07-18  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* cp-tree.h (finish_non_static_data_member): Add object param."}, {"sha": "013d60059a024c8d9088056908d8624d9431e175", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -1207,8 +1207,7 @@ add_candidate (struct z_candidate **candidates,\n \t       tree fn, tree args, tree convs, tree access_path, \n \t       tree conversion_path, int viable)\n {\n-  struct z_candidate *cand\n-    = (struct z_candidate *) ggc_alloc_cleared (sizeof (struct z_candidate));\n+  struct z_candidate *cand = ggc_alloc_cleared (sizeof (struct z_candidate));\n \n   cand->fn = fn;\n   cand->args = args;"}, {"sha": "b9f139fc645004e1ca1ea687e65be1a37f9a6eb3", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -5380,8 +5380,7 @@ init_class_processing (void)\n   current_class_depth = 0;\n   current_class_stack_size = 10;\n   current_class_stack \n-    = (class_stack_node_t) xmalloc (current_class_stack_size \n-\t\t\t\t    * sizeof (struct class_stack_node));\n+    = xmalloc (current_class_stack_size * sizeof (struct class_stack_node));\n   VARRAY_TREE_INIT (local_classes, 8, \"local_classes\");\n \n   ridpointers[(int) RID_PUBLIC] = access_public_node;\n@@ -5426,9 +5425,9 @@ pushclass (tree type, bool modify)\n     {\n       current_class_stack_size *= 2;\n       current_class_stack\n-\t= (class_stack_node_t) xrealloc (current_class_stack,\n-\t\t\t\t\t current_class_stack_size\n-\t\t\t\t\t * sizeof (struct class_stack_node));\n+\t= xrealloc (current_class_stack,\n+\t\t    current_class_stack_size\n+\t\t    * sizeof (struct class_stack_node));\n     }\n \n   /* Insert a new entry on the class stack.  */\n@@ -6205,8 +6204,7 @@ get_vfield_name (tree type)\n     binfo = BINFO_BASETYPE (binfo, 0);\n \n   type = BINFO_TYPE (binfo);\n-  buf = (char *) alloca (sizeof (VFIELD_NAME_FORMAT)\n-\t\t\t + TYPE_NAME_LENGTH (type) + 2);\n+  buf = alloca (sizeof (VFIELD_NAME_FORMAT) + TYPE_NAME_LENGTH (type) + 2);\n   sprintf (buf, VFIELD_NAME_FORMAT,\n \t   IDENTIFIER_POINTER (constructor_name (type)));\n   return get_identifier (buf);"}, {"sha": "eb0902d23bae7314a77ad6b373c5ec2dd996f3a2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -2220,7 +2220,7 @@ maybe_push_to_top_level (int pseudo)\n   int need_pop;\n \n   timevar_push (TV_NAME_LOOKUP);\n-  s = (struct saved_scope *) ggc_alloc_cleared (sizeof (struct saved_scope));\n+  s = ggc_alloc_cleared (sizeof (struct saved_scope));\n \n   b = scope_chain ? current_binding_level : 0;\n \n@@ -4669,8 +4669,7 @@ use_label (tree decl)\n       || named_label_uses->label_decl != decl)\n     {\n       struct named_label_use_list *new_ent;\n-      new_ent = ((struct named_label_use_list *)\n-\t\t ggc_alloc (sizeof (struct named_label_use_list)));\n+      new_ent = ggc_alloc (sizeof (struct named_label_use_list));\n       new_ent->label_decl = decl;\n       new_ent->names_in_scope = current_binding_level->names;\n       new_ent->binding_level = current_binding_level;\n@@ -4707,8 +4706,7 @@ lookup_label (tree id)\n   /* Record this label on the list of labels used in this function.\n      We do this before calling make_label_decl so that we get the\n      IDENTIFIER_LABEL_VALUE before the new label is declared.  */\n-  ent = ((struct named_label_list *)\n-\t ggc_alloc_cleared (sizeof (struct named_label_list)));\n+  ent = ggc_alloc_cleared (sizeof (struct named_label_list));\n   ent->old_value = IDENTIFIER_LABEL_VALUE (id);\n   ent->next = named_labels;\n   named_labels = ent;\n@@ -5003,8 +5001,7 @@ static struct cp_switch *switch_stack;\n void\n push_switch (tree switch_stmt)\n {\n-  struct cp_switch *p\n-    = (struct cp_switch *) xmalloc (sizeof (struct cp_switch));\n+  struct cp_switch *p = xmalloc (sizeof (struct cp_switch));\n   p->level = current_binding_level;\n   p->next = switch_stack;\n   p->switch_stmt = switch_stmt;\n@@ -13772,8 +13769,7 @@ save_function_data (tree decl)\n \t\t      19990908);\n \n   /* Make a copy.  */\n-  f = ((struct language_function *)\n-       ggc_alloc (sizeof (struct language_function)));\n+  f = ggc_alloc (sizeof (struct language_function));\n   memcpy (f, cp_function_chain, sizeof (struct language_function));\n   DECL_SAVED_FUNCTION_DATA (decl) = f;\n \n@@ -14442,8 +14438,7 @@ void\n cxx_push_function_context (struct function * f)\n {\n   struct language_function *p\n-    = ((struct language_function *)\n-       ggc_alloc_cleared (sizeof (struct language_function)));\n+    = ggc_alloc_cleared (sizeof (struct language_function));\n   f->language = p;\n \n   /* It takes an explicit call to expand_body to generate RTL for a"}, {"sha": "f03603dc0e5e4b57ca85c8119c2761b731cafb53", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -2220,7 +2220,7 @@ get_priority_info (int priority)\n     {\n       /* Create a new priority information structure, and insert it\n \t into the map.  */\n-      pi = (priority_info) xmalloc (sizeof (struct priority_info_s));\n+      pi = xmalloc (sizeof (struct priority_info_s));\n       pi->initializations_p = 0;\n       pi->destructions_p = 0;\n       splay_tree_insert (priority_info_map,"}, {"sha": "d3407a31604474021ba2bec14883922c012dcb30", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -113,7 +113,7 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n   argv = *in_argv;\n   added_libraries = *in_added_libraries;\n \n-  args = (int *) xcalloc (argc, sizeof (int));\n+  args = xcalloc (argc, sizeof (int));\n \n   for (i = 1; i < argc; i++)\n     {\n@@ -168,12 +168,12 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n \t      saw_speclang = 1;\n \t    }\n \t  else if (((argv[i][2] == '\\0'\n-\t\t     && (char *)strchr (\"bBVDUoeTuIYmLiA\", argv[i][1]) != NULL)\n+\t\t     && strchr (\"bBVDUoeTuIYmLiA\", argv[i][1]) != NULL)\n \t\t    || strcmp (argv[i], \"-Xlinker\") == 0\n \t\t    || strcmp (argv[i], \"-Tdata\") == 0))\n \t    quote = argv[i];\n \t  else if ((argv[i][2] == '\\0'\n-\t\t    && (char *) strchr (\"cSEM\", argv[i][1]) != NULL)\n+\t\t    && strchr (\"cSEM\", argv[i][1]) != NULL)\n \t\t   || strcmp (argv[i], \"-MM\") == 0\n \t\t   || strcmp (argv[i], \"-fsyntax-only\") == 0)\n \t    {\n@@ -243,7 +243,7 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n \n   /* Make sure to have room for the trailing NULL argument.  */\n   num_args = argc + added + need_math + shared_libgcc + (library > 0) + 1;\n-  arglist = (const char **) xmalloc (num_args * sizeof (char *));\n+  arglist = xmalloc (num_args * sizeof (char *));\n \n   i = 0;\n   j = 0;"}, {"sha": "e39797754262abfec492948c0f2c7d3ee0fbee16", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -354,7 +354,7 @@ init_reswords (void)\n   int mask = ((flag_no_asm ? D_ASM : 0)\n \t      | (flag_no_gnu_keywords ? D_EXT : 0));\n \n-  ridpointers = (tree *) ggc_calloc ((int) RID_MAX, sizeof (tree));\n+  ridpointers = ggc_calloc ((int) RID_MAX, sizeof (tree));\n   for (i = 0; i < ARRAY_SIZE (reswords); i++)\n     {\n       id = get_identifier (reswords[i].word);\n@@ -643,7 +643,7 @@ handle_pragma_implementation (cpp_reader* dfile ATTRIBUTE_UNUSED )\n     }\n   if (ifiles == 0)\n     {\n-      ifiles = (struct impl_files*) xmalloc (sizeof (struct impl_files));\n+      ifiles = xmalloc (sizeof (struct impl_files));\n       ifiles->filename = main_filename;\n       ifiles->next = impl_file_chain;\n       impl_file_chain = ifiles;\n@@ -756,7 +756,7 @@ retrofit_lang_decl (tree t)\n   else\n     size = sizeof (struct lang_decl_flags);\n \n-  ld = (struct lang_decl *) ggc_alloc_cleared (size);\n+  ld = ggc_alloc_cleared (size);\n \n   ld->decl_flags.can_be_full = CAN_HAVE_FULL_LANG_DECL_P (t) ? 1 : 0;\n   ld->decl_flags.u1sel = TREE_CODE (t) == NAMESPACE_DECL ? 1 : 0;\n@@ -792,7 +792,7 @@ cxx_dup_lang_specific_decl (tree node)\n     size = sizeof (struct lang_decl_flags);\n   else\n     size = sizeof (struct lang_decl);\n-  ld = (struct lang_decl *) ggc_alloc (size);\n+  ld = ggc_alloc (size);\n   memcpy (ld, DECL_LANG_SPECIFIC (node), size);\n   DECL_LANG_SPECIFIC (node) = ld;\n \n@@ -829,7 +829,7 @@ copy_lang_type (tree node)\n     size = sizeof (struct lang_type);\n   else\n     size = sizeof (struct lang_type_ptrmem);\n-  lt = (struct lang_type *) ggc_alloc (size);\n+  lt = ggc_alloc (size);\n   memcpy (lt, TYPE_LANG_SPECIFIC (node), size);\n   TYPE_LANG_SPECIFIC (node) = lt;\n \n@@ -862,8 +862,7 @@ cxx_make_type (enum tree_code code)\n     {\n       struct lang_type *pi;\n \n-      pi = ((struct lang_type *)\n-\t    ggc_alloc_cleared (sizeof (struct lang_type)));\n+      pi = ggc_alloc_cleared (sizeof (struct lang_type));\n \n       TYPE_LANG_SPECIFIC (t) = pi;\n       pi->u.c.h.is_lang_type_class = 1;"}, {"sha": "df45bb60b57347149c4870eda37d8e567148eb98", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -127,7 +127,7 @@ static void cp_token_cache_push_token\n static cp_token_cache *\n cp_token_cache_new ()\n {\n-  return (cp_token_cache *) ggc_alloc_cleared (sizeof (cp_token_cache));\n+  return ggc_alloc_cleared (sizeof (cp_token_cache));\n }\n \n /* Add *TOKEN to *CACHE.  */\n@@ -141,7 +141,7 @@ cp_token_cache_push_token (cp_token_cache *cache,\n   /* See if we need to allocate a new token block.  */\n   if (!b || b->num_tokens == CP_TOKEN_BLOCK_NUM_TOKENS)\n     {\n-      b = ((cp_token_block *) ggc_alloc_cleared (sizeof (cp_token_block)));\n+      b = ggc_alloc_cleared (sizeof (cp_token_block));\n       b->prev = cache->last;\n       if (cache->last)\n \t{\n@@ -305,11 +305,10 @@ cp_lexer_new_main (void)\n   cpp_get_callbacks (parse_in)->valid_pch = NULL;\n \n   /* Allocate the memory.  */\n-  lexer = (cp_lexer *) ggc_alloc_cleared (sizeof (cp_lexer));\n+  lexer = ggc_alloc_cleared (sizeof (cp_lexer));\n \n   /* Create the circular buffer.  */\n-  lexer->buffer = ((cp_token *) \n-\t\t   ggc_calloc (CP_TOKEN_BUFFER_SIZE, sizeof (cp_token)));\n+  lexer->buffer = ggc_calloc (CP_TOKEN_BUFFER_SIZE, sizeof (cp_token));\n   lexer->buffer_end = lexer->buffer + CP_TOKEN_BUFFER_SIZE;\n \n   /* There is one token in the buffer.  */\n@@ -345,13 +344,13 @@ cp_lexer_new_from_tokens (cp_token_cache *tokens)\n   ptrdiff_t num_tokens;\n \n   /* Allocate the memory.  */\n-  lexer = (cp_lexer *) ggc_alloc_cleared (sizeof (cp_lexer));\n+  lexer = ggc_alloc_cleared (sizeof (cp_lexer));\n \n   /* Create a new buffer, appropriately sized.  */\n   num_tokens = 0;\n   for (block = tokens->first; block != NULL; block = block->next)\n     num_tokens += block->num_tokens;\n-  lexer->buffer = ((cp_token *) ggc_alloc (num_tokens * sizeof (cp_token)));\n+  lexer->buffer = ggc_alloc (num_tokens * sizeof (cp_token));\n   lexer->buffer_end = lexer->buffer + num_tokens;\n   \n   /* Install the tokens.  */\n@@ -521,9 +520,8 @@ cp_lexer_maybe_grow_buffer (cp_lexer* lexer)\n       /* Compute the current buffer size.  */\n       buffer_length = lexer->buffer_end - lexer->buffer;\n       /* Allocate a buffer twice as big.  */\n-      new_buffer = ((cp_token *)\n-\t\t    ggc_realloc (lexer->buffer, \n-\t\t\t\t 2 * buffer_length * sizeof (cp_token)));\n+      new_buffer = ggc_realloc (lexer->buffer, \n+\t\t\t\t2 * buffer_length * sizeof (cp_token));\n       \n       /* Because the buffer is circular, logically consecutive tokens\n \t are not necessarily placed consecutively in memory.\n@@ -1130,11 +1128,10 @@ cp_parser_context_new (cp_parser_context* next)\n       /* Pull the first entry from the free list.  */\n       context = cp_parser_context_free_list;\n       cp_parser_context_free_list = context->next;\n-      memset ((char *)context, 0, sizeof (*context));\n+      memset (context, 0, sizeof (*context));\n     }\n   else\n-    context = ((cp_parser_context *) \n-\t       ggc_alloc_cleared (sizeof (cp_parser_context)));\n+    context = ggc_alloc_cleared (sizeof (cp_parser_context));\n   /* No errors have occurred yet in this context.  */\n   context->status = CP_PARSER_STATUS_KIND_NO_ERROR;\n   /* If this is not the bottomost context, copy information that we\n@@ -2067,7 +2064,7 @@ cp_parser_new (void)\n      cp_lexer_new_main might load a PCH file.  */\n   lexer = cp_lexer_new_main ();\n \n-  parser = (cp_parser *) ggc_alloc_cleared (sizeof (cp_parser));\n+  parser = ggc_alloc_cleared (sizeof (cp_parser));\n   parser->lexer = lexer;\n   parser->context = cp_parser_context_new (NULL);\n \n@@ -13796,10 +13793,9 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n   saved_message = parser->type_definition_forbidden_message;\n   /* And create the new one.  */\n   parser->type_definition_forbidden_message \n-    = ((const char *) \n-       xmalloc (strlen (format) \n-\t\t+ strlen (IDENTIFIER_POINTER (ridpointers[keyword]))\n-\t\t+ 1 /* `\\0' */));\n+    = xmalloc (strlen (format) \n+\t       + strlen (IDENTIFIER_POINTER (ridpointers[keyword]))\n+\t       + 1 /* `\\0' */);\n   sprintf ((char *) parser->type_definition_forbidden_message,\n \t   format, IDENTIFIER_POINTER (ridpointers[keyword]));\n "}, {"sha": "774d6d9150a6d0c8c93b5f3565bac989f15a131b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -840,9 +840,8 @@ retrieve_specialization (tree tmpl, tree args)\n static tree\n retrieve_local_specialization (tree tmpl)\n {\n-  tree spec = \n-    (tree) htab_find_with_hash (local_specializations, tmpl,\n-\t\t\t\thtab_hash_pointer (tmpl));\n+  tree spec = htab_find_with_hash (local_specializations, tmpl,\n+\t\t\t\t   htab_hash_pointer (tmpl));\n   return spec ? TREE_PURPOSE (spec) : NULL_TREE;\n }\n \n@@ -2409,11 +2408,11 @@ process_partial_specialization (tree decl)\n \t\t{\n \t\t  /* We haven't yet initialized TPD2.  Do so now.  */\n \t\t  tpd2.arg_uses_template_parms \n-\t\t    =  (int*) alloca (sizeof (int) * nargs);\n+\t\t    = alloca (sizeof (int) * nargs);\n \t\t  /* The number of parameters here is the number in the\n \t\t     main template, which, as checked in the assertion\n \t\t     above, is NARGS.  */\n-\t\t  tpd2.parms = (int*) alloca (sizeof (int) * nargs);\n+\t\t  tpd2.parms = alloca (sizeof (int) * nargs);\n \t\t  tpd2.level = \n \t\t    TMPL_PARMS_DEPTH (DECL_TEMPLATE_PARMS (maintmpl));\n \t\t}\n@@ -5541,9 +5540,9 @@ static tree\n tsubst_template_arg_vector (tree t, tree args, tsubst_flags_t complain)\n {\n   int len = TREE_VEC_LENGTH (t), need_new = 0, i;\n-  tree *elts = (tree *) alloca (len * sizeof (tree));\n+  tree *elts = alloca (len * sizeof (tree));\n   \n-  memset ((char *) elts, 0, len * sizeof (tree));\n+  memset (elts, 0, len * sizeof (tree));\n   \n   for (i = 0; i < len; i++)\n     {"}, {"sha": "067ddee17737fd8e5810d71a3f9be34bd409da34", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -1125,7 +1125,7 @@ create_pseudo_type_info (const char *real_name, int ident, ...)\n   va_start (ap, ident);\n \n   /* Generate the pseudo type name.  */\n-  pseudo_name = (char *)alloca (strlen (real_name) + 30);\n+  pseudo_name = alloca (strlen (real_name) + 30);\n   strcpy (pseudo_name, real_name);\n   strcat (pseudo_name, \"_pseudo\");\n   if (ident)"}, {"sha": "a34cc4618d0f27dc087d9505a451ebdd0a62a865", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -155,7 +155,7 @@ void push_deferring_access_checks (deferring_kind deferring)\n       deferred_access_free_list = d->next;\n     }\n   else\n-    d = (deferred_access *) ggc_alloc (sizeof (deferred_access));\n+    d = ggc_alloc (sizeof (deferred_access));\n \n   d->next = deferred_access_stack;\n   d->deferred_access_checks = NULL_TREE;"}, {"sha": "0f1011e76b999e20efb9623abe47749d9830ce86", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -5969,7 +5969,7 @@ c_expand_asm_operands (tree string, tree outputs, tree inputs, tree clobbers,\n   int noutputs = list_length (outputs);\n   register int i;\n   /* o[I] is the place that output number I should be written.  */\n-  register tree *o = (tree *) alloca (noutputs * sizeof (tree));\n+  register tree *o = alloca (noutputs * sizeof (tree));\n   register tree tail;\n \n   /* Record the contents of OUTPUTS before it is modified.  */"}, {"sha": "1333be2d7212311c124878062c6fbc1cb2c8d104", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -1,3 +1,9 @@\n+Sat Jul 19 12:03:03 2003  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* com.c data.c expr.c fini.c g77spec.c global.c lab.c lex.c name.c\n+\tsta.c stc.c std.c storag.c stt.c stw.c symbol.c target.c type.c:\n+\tRemove unnecessary casts.\n+\n Thu Jul 17 06:34:41 2003  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* lang-options.h: Remove."}, {"sha": "aec04b6c53816283e736ce3671bd772a70a828ee", "filename": "gcc/f/com.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -13787,8 +13787,7 @@ pop_f_function_context (void)\n static void\n push_f_function_context (void)\n {\n-  struct f_function *p\n-  = (struct f_function *) xmalloc (sizeof (struct f_function));\n+  struct f_function *p = xmalloc (sizeof (struct f_function));\n \n   push_function_context ();\n \n@@ -14216,7 +14215,7 @@ static bool\n ffe_init (void)\n {\n #ifdef IO_BUFFER_SIZE\n-  setvbuf (finput, (char *) xmalloc (IO_BUFFER_SIZE), _IOFBF, IO_BUFFER_SIZE);\n+  setvbuf (finput, xmalloc (IO_BUFFER_SIZE), _IOFBF, IO_BUFFER_SIZE);\n #endif\n \n   ffecom_init_decl_processing ();\n@@ -15226,7 +15225,7 @@ open_include_file (char *filename, struct file_name_list *searchptr)\n     }\n   else\n     {\n-      dir = (char *) xmalloc (p - filename + 1);\n+      dir = xmalloc (p - filename + 1);\n       memcpy (dir, filename, p - filename);\n       dir[p - filename] = '\\0';\n       from = p + 1;\n@@ -15357,8 +15356,7 @@ read_name_map (const char *dirname)\n     if (! strcmp (map_list_ptr->map_list_name, dirname))\n       return map_list_ptr->map_list_map;\n \n-  map_list_ptr = ((struct file_name_map_list *)\n-\t\t  xmalloc (sizeof (struct file_name_map_list)));\n+  map_list_ptr = xmalloc (sizeof (struct file_name_map_list));\n   map_list_ptr->map_list_name = xstrdup (dirname);\n   map_list_ptr->map_list_map = NULL;\n \n@@ -15388,8 +15386,7 @@ read_name_map (const char *dirname)\n \t    ;\n \t  to = read_filename_string (ch, f);\n \n-\t  ptr = ((struct file_name_map *)\n-\t\t xmalloc (sizeof (struct file_name_map)));\n+\t  ptr = xmalloc (sizeof (struct file_name_map));\n \t  ptr->map_from = from;\n \n \t  /* Make the real filename absolute.  */\n@@ -15429,7 +15426,7 @@ ffecom_file_ (const char *name)\n      early #line directives (when -g is in effect).  */\n \n   fp = &instack[++indepth];\n-  memset ((char *) fp, 0, sizeof (FILE_BUF));\n+  memset (fp, 0, sizeof (FILE_BUF));\n   if (name == NULL)\n     name = \"\";\n   fp->nominal_fname = fp->fname = name;\n@@ -15454,8 +15451,8 @@ ffecom_decode_include_option (const char *dir)\n     ignore_srcdir = 1;\n   else\n     {\n-      struct file_name_list *dirtmp = (struct file_name_list *)\n-\txmalloc (sizeof (struct file_name_list));\n+      struct file_name_list *dirtmp\n+\t= xmalloc (sizeof (struct file_name_list));\n       dirtmp->next = 0;\t\t/* New one goes on the end */\n       dirtmp->fname = dir;\n       dirtmp->got_name_map = 0;\n@@ -15647,7 +15644,7 @@ ffecom_open_include_ (char *name, ffewhereLine l, ffewhereColumn c)\n   instack[indepth].column = ffewhere_column_use (c);\n \n   fp = &instack[indepth + 1];\n-  memset ((char *) fp, 0, sizeof (FILE_BUF));\n+  memset (fp, 0, sizeof (FILE_BUF));\n   fp->nominal_fname = fp->fname = fname;\n   fp->dir = searchptr;\n "}, {"sha": "2040f0ab6dc21304d6b6b92aa9e65a3335b61d2c", "filename": "gcc/f/data.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fdata.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -723,8 +723,8 @@ ffedata_convert_ (ffebld source, ffelexToken source_token,\n \n       if (max > ffedata_convert_cache_max_)\n \t{\n-\t  cache = (ffedataConvertCache_) malloc_new_ks (malloc_pool_image (),\n-\t\t\t\t    \"FFEDATA cache\", max * sizeof (*cache));\n+\t  cache = malloc_new_ks (malloc_pool_image (),\n+\t\t\t\t \"FFEDATA cache\", max * sizeof (*cache));\n \t  if (ffedata_convert_cache_max_ != 0)\n \t    {\n \t      memcpy (cache, ffedata_convert_cache_,"}, {"sha": "6aeddafe4c27099ca05ae2cab26123551fdf3115", "filename": "gcc/f/expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fexpr.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -8488,8 +8488,7 @@ ffeexpr_expr_new_ (void)\n {\n   ffeexprExpr_ e;\n \n-  e = (ffeexprExpr_) malloc_new_ks (ffe_pool_program_unit (), \"FFEEXPR expr\",\n-\t\t\t\t    sizeof (*e));\n+  e = malloc_new_ks (ffe_pool_program_unit (), \"FFEEXPR expr\", sizeof (*e));\n   e->previous = NULL;\n   e->type = FFEEXPR_exprtypeUNKNOWN_;\n   e->token = NULL;"}, {"sha": "167837b461f30b12ee788dcee97d31dfb475dd76", "filename": "gcc/f/fini.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Ffini.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Ffini.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ffini.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -367,7 +367,7 @@ main (int argc, char **argv)\n \n       /* Make new name object to store name and its keyword. */\n \n-      newname = (name) xmalloc (sizeof (*newname));\n+      newname = xmalloc (sizeof (*newname));\n       newname->namelen = strlen (buf);\n       newname->kwlen = strlen (kwname);\n       total_length = newname->kwlen + fixlengths;"}, {"sha": "b5404994c2d72e3946fae2a53b195f38b44d3b3c", "filename": "gcc/f/g77spec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fg77spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fg77spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77spec.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -219,7 +219,7 @@ append_arg (const char *arg)\n       int i;\n \n       newargsize = (g77_xargc << 2) + 20;\t/* This should handle all. */\n-      g77_newargv = (const char **) xmalloc (newargsize * sizeof (char *));\n+      g77_newargv = xmalloc (newargsize * sizeof (char *));\n \n       /* Copy what has been done so far.  */\n       for (i = 0; i < g77_newargc; ++i)"}, {"sha": "8793f62c4a73ccc8ad02b4304e85a74e5dcba137", "filename": "gcc/f/global.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fglobal.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -107,8 +107,7 @@ ffeglobal_new_ (ffename n)\n \n   assert (n != NULL);\n \n-  g = (ffeglobal) malloc_new_ks (malloc_pool_image (), \"FFEGLOBAL\",\n-\t\t\t\t sizeof (*g));\n+  g = malloc_new_ks (malloc_pool_image (), \"FFEGLOBAL\", sizeof (*g));\n   g->n = n;\n   g->hook = FFECOM_globalNULL;\n   g->tick = 0;\n@@ -780,10 +779,9 @@ ffeglobal_proc_def_nargs (ffesymbol s, int n_args)\n       return;\n     }\n \n-  g->u.proc.arg_info\n-    = (ffeglobalArgInfo_) malloc_new_ks (malloc_pool_image (),\n-\t\t\t\t\t \"ffeglobalArgInfo_\",\n-\t\t\t\t\t n_args * sizeof (g->u.proc.arg_info[0]));\n+  g->u.proc.arg_info = malloc_new_ks (malloc_pool_image (),\n+\t\t\t\t      \"ffeglobalArgInfo_\",\n+\t\t\t\t      n_args * sizeof (g->u.proc.arg_info[0]));\n   while (n_args-- > 0)\n     g->u.proc.arg_info[n_args].t = NULL;\n }\n@@ -1123,10 +1121,9 @@ ffeglobal_proc_ref_nargs (ffesymbol s, int n_args, ffelexToken t)\n       return TRUE;\n     }\n \n-  g->u.proc.arg_info\n-    = (ffeglobalArgInfo_) malloc_new_ks (malloc_pool_image (),\n-\t\t\t\t\t \"ffeglobalArgInfo_\",\n-\t\t\t\t\t n_args * sizeof (g->u.proc.arg_info[0]));\n+  g->u.proc.arg_info = malloc_new_ks (malloc_pool_image (),\n+\t\t\t\t      \"ffeglobalArgInfo_\",\n+\t\t\t\t      n_args * sizeof (g->u.proc.arg_info[0]));\n   while (n_args-- > 0)\n     g->u.proc.arg_info[n_args].t = NULL;\n "}, {"sha": "1d278748b21d02bf3e80ee10c8d8f3be48a26ee6", "filename": "gcc/f/lab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Flab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Flab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flab.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -141,7 +141,7 @@ ffelab_new (ffelabValue v)\n   ffelab l;\n \n   ++ffelab_num_news_;\n-  l = (ffelab) malloc_new_ks (ffe_pool_any_unit (), \"FFELAB label\", sizeof (*l));\n+  l = malloc_new_ks (ffe_pool_any_unit (), \"FFELAB label\", sizeof (*l));\n   l->next = ffelab_list_;\n   l->hook = FFECOM_labelNULL;\n   l->value = v;"}, {"sha": "02f087283d5d2e747d9ad07fdbe486514587b18e", "filename": "gcc/f/lex.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -694,7 +694,7 @@ ffelex_cfelex_ (ffelexToken *xtoken, FILE *finput, int c)\n \t      register unsigned bytes_used = (p - q);\n \n \t      buffer_length *= 2;\n-\t      q = (char *)xrealloc (q, buffer_length);\n+\t      q = xrealloc (q, buffer_length);\n \t      p = &q[bytes_used];\n \t      r = &q[buffer_length];\n \t    }\n@@ -754,7 +754,7 @@ ffelex_cfelex_ (ffelexToken *xtoken, FILE *finput, int c)\n \t\t  register unsigned bytes_used = (p - q);\n \n \t\t  buffer_length = bytes_used * 2;\n-\t\t  q = (char *)xrealloc (q, buffer_length);\n+\t\t  q = xrealloc (q, buffer_length);\n \t\t  p = &q[bytes_used];\n \t\t  r = &q[buffer_length];\n \t\t}\n@@ -805,8 +805,7 @@ ffelex_file_pop_ (const char *filename)\n static void\n ffelex_file_push_ (int old_lineno, const char *filename)\n {\n-  struct file_stack *p\n-    = (struct file_stack *) xmalloc (sizeof (struct file_stack));\n+  struct file_stack *p = xmalloc (sizeof (struct file_stack));\n \n   input_file_stack->location.line = old_lineno;\n   p->next = input_file_stack;\n@@ -923,7 +922,7 @@ ffelex_get_directive_line_ (char **text, FILE *finput)\n \n   if (buffer_length == 0)\n     {\n-      directive_buffer = (char *)xmalloc (128);\n+      directive_buffer = xmalloc (128);\n       buffer_length = 128;\n     }\n \n@@ -939,8 +938,7 @@ ffelex_get_directive_line_ (char **text, FILE *finput)\n \t  register unsigned bytes_used = (p - directive_buffer);\n \n \t  buffer_length *= 2;\n-\t  directive_buffer\n-\t    = (char *)xrealloc (directive_buffer, buffer_length);\n+\t  directive_buffer = xrealloc (directive_buffer, buffer_length);\n \t  p = &directive_buffer[bytes_used];\n \t  buffer_limit = &directive_buffer[buffer_length];\n \t}\n@@ -1591,8 +1589,7 @@ ffelex_token_new_ (void)\n \n   ++ffelex_total_tokens_;\n \n-  t = (ffelexToken) malloc_new_ks (malloc_pool_image (),\n-\t\t\t\t   \"FFELEX token\", sizeof (*t));\n+  t = malloc_new_ks (malloc_pool_image (), \"FFELEX token\", sizeof (*t));\n   t->id_ = ffelex_token_nextid_++;\n   return t;\n }"}, {"sha": "26f713ef32b9cd0a4d2474945bc3cdec2e182278", "filename": "gcc/f/name.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fname.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fname.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fname.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -105,7 +105,7 @@ ffename_find (ffenameSpace ns, ffelexToken t)\n   if (found)\n     return n;\n \n-  newn = (ffename) malloc_new_ks (ns->pool, \"FFENAME name\", sizeof (*n));\n+  newn = malloc_new_ks (ns->pool, \"FFENAME name\", sizeof (*n));\n   newn->next = n;\n   newn->previous = n->previous;\n   n->previous = newn;\n@@ -232,8 +232,7 @@ ffename_space_new (mallocPool pool)\n {\n   ffenameSpace ns;\n \n-  ns = (ffenameSpace) malloc_new_ks (pool, \"FFENAME space\",\n-\t\t\t\t     sizeof (*ns));\n+  ns = malloc_new_ks (pool, \"FFENAME space\", sizeof (*ns));\n   ns->first = (ffename) &ns->first;\n   ns->last = (ffename) &ns->first;\n   ns->pool = pool;"}, {"sha": "4b26d8cecd8c29bba07c8582eaa9d931bb4b2949", "filename": "gcc/f/sta.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fsta.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fsta.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsta.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -247,9 +247,8 @@ ffesta_save_ (ffelexToken t)\n   if (saved_tokens == NULL)\n     {\n       saved_tokens\n-\t= (ffelexToken *) malloc_new_ksr (malloc_pool_image (),\n-\t\t\t\t\t  \"FFEST Saved Tokens\",\n-\t\t\t     (max_saved_tokens = 8) * sizeof (ffelexToken));\n+\t= malloc_new_ksr (malloc_pool_image (), \"FFEST Saved Tokens\",\n+\t\t\t  (max_saved_tokens = 8) * sizeof (ffelexToken));\n       /* Start off with 8. */\n     }\n   else if (num_saved_tokens >= max_saved_tokens)\n@@ -258,10 +257,9 @@ ffesta_save_ (ffelexToken t)\n       max_saved_tokens <<= 1;\t/* Multiply by two. */\n       assert (max_saved_tokens > toknum);\n       saved_tokens\n-\t= (ffelexToken *) malloc_resize_ksr (malloc_pool_image (),\n-\t\t\t\t\t     saved_tokens,\n-\t\t\t\t    max_saved_tokens * sizeof (ffelexToken),\n-\t\t\t\t\t     toknum * sizeof (ffelexToken));\n+\t= malloc_resize_ksr (malloc_pool_image (), saved_tokens,\n+\t\t\t     max_saved_tokens * sizeof (ffelexToken),\n+\t\t\t     toknum * sizeof (ffelexToken));\n     }\n \n   *(saved_tokens + num_saved_tokens++) = ffelex_token_use (t);\n@@ -1319,10 +1317,8 @@ ffesta_init_0 (void)\n   ffestaPossible_ ptr;\n   int i;\n \n-  ptr = (ffestaPossible_) malloc_new_kp (malloc_pool_image (),\n-\t\t\t\t\t \"FFEST possibles\",\n-\t\t\t\t\t FFESTA_maxPOSSIBLES_\n-\t\t\t\t\t * sizeof (*ptr));\n+  ptr = malloc_new_kp (malloc_pool_image (), \"FFEST possibles\",\n+\t\t       FFESTA_maxPOSSIBLES_ * sizeof (*ptr));\n \n   for (i = 0; i < FFESTA_maxPOSSIBLES_; ++i)\n     ffesta_possibles_[i] = ptr++;"}, {"sha": "5f058135bbf683bda51e58b412420bf3fe07b779", "filename": "gcc/f/stc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fstc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fstc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstc.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -6748,7 +6748,7 @@ ffestc_R809 (ffelexToken construct_name, ffebld expr, ffelexToken expr_token)\n   /* Init block to manage CASE list. */\n \n   pool = malloc_pool_new (\"Select\", ffe_pool_any_unit (), 1024);\n-  s = (ffestwSelect) malloc_new_kp (pool, \"Select\", sizeof (*s));\n+  s = malloc_new_kp (pool, \"Select\", sizeof (*s));\n   s->first_rel = (ffestwCase) &s->first_rel;\n   s->last_rel = (ffestwCase) &s->first_rel;\n   s->first_stmt = (ffestwCase) &s->first_rel;"}, {"sha": "09f04198f0a889bfba9920e650869820bc1acb21", "filename": "gcc/f/std.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fstd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fstd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstd.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -984,8 +984,8 @@ ffestd_subr_copy_easy_ (ffestpInquireIx max)\n   ffestpInquireStmt *stmt;\n   ffestpInquireIx ix;\n \n-  stmt = (ffestpInquireStmt *) malloc_new_kp (ffesta_output_pool,\n-\t\t\t\t  \"FFESTD easy\", sizeof (ffestpFile) * max);\n+  stmt = malloc_new_kp (ffesta_output_pool, \"FFESTD easy\",\n+\t\t\tsizeof (ffestpFile) * max);\n \n   for (ix = 0; ix < max; ++ix)\n     {\n@@ -2229,8 +2229,7 @@ ffestd_R909_item (ffebld expr, ffelexToken expr_token)\n \n   ffestd_check_item_ ();\n \n-  item = (ffestdExprItem_) malloc_new_kp (ffesta_output_pool,\n-\t\t\t\t\t  \"ffestdExprItem_\", sizeof (*item));\n+  item = malloc_new_kp (ffesta_output_pool, \"ffestdExprItem_\", sizeof (*item));\n \n   item->next = NULL;\n   item->expr = expr;\n@@ -2306,8 +2305,7 @@ ffestd_R910_item (ffebld expr, ffelexToken expr_token)\n \n   ffestd_check_item_ ();\n \n-  item = (ffestdExprItem_) malloc_new_kp (ffesta_output_pool,\n-\t\t\t\t\t  \"ffestdExprItem_\", sizeof (*item));\n+  item = malloc_new_kp (ffesta_output_pool, \"ffestdExprItem_\", sizeof (*item));\n \n   item->next = NULL;\n   item->expr = expr;\n@@ -2366,8 +2364,7 @@ ffestd_R911_item (ffebld expr, ffelexToken expr_token)\n \n   ffestd_check_item_ ();\n \n-  item = (ffestdExprItem_) malloc_new_kp (ffesta_output_pool,\n-\t\t\t\t\t  \"ffestdExprItem_\", sizeof (*item));\n+  item = malloc_new_kp (ffesta_output_pool, \"ffestdExprItem_\", sizeof (*item));\n \n   item->next = NULL;\n   item->expr = expr;\n@@ -2535,8 +2532,7 @@ ffestd_R923B_item (ffebld expr)\n \n   ffestd_check_item_ ();\n \n-  item = (ffestdExprItem_) malloc_new_kp (ffesta_output_pool,\n-\t\t\t\t\t  \"ffestdExprItem_\", sizeof (*item));\n+  item = malloc_new_kp (ffesta_output_pool, \"ffestdExprItem_\", sizeof (*item));\n \n   item->next = NULL;\n   item->expr = expr;"}, {"sha": "8e9cb247a08193e19274feb21a6b929563352bb2", "filename": "gcc/f/storag.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fstorag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fstorag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstorag.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -416,8 +416,7 @@ ffestorag_new (ffestoragList sl)\n {\n   ffestorag s;\n \n-  s = (ffestorag) malloc_new_kp (ffe_pool_program_unit (), \"ffestorag\",\n-\t\t\t\t sizeof (*s));\n+  s = malloc_new_kp (ffe_pool_program_unit (), \"ffestorag\", sizeof (*s));\n   s->next = (ffestorag) &sl->first;\n   s->previous = sl->last;\n   s->hook = FFECOM_storageNULL;"}, {"sha": "e616d492289a99da41bc11b7edd8caccc30c93de", "filename": "gcc/f/stt.c", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fstt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fstt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstt.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -79,8 +79,7 @@ ffestt_caselist_append (ffesttCaseList list, bool range, ffebld case1,\n {\n   ffesttCaseList new;\n \n-  new = (ffesttCaseList) malloc_new_kp (ffesta_scratch_pool,\n-\t\t\t\t\t\"FFEST case list\", sizeof (*new));\n+  new = malloc_new_kp (ffesta_scratch_pool, \"FFEST case list\", sizeof (*new));\n   new->next = list->previous->next;\n   new->previous = list->previous;\n   new->next->previous = new;\n@@ -103,9 +102,8 @@ ffestt_caselist_create (void)\n {\n   ffesttCaseList new;\n \n-  new = (ffesttCaseList) malloc_new_kp (ffesta_scratch_pool,\n-\t\t\t\t\t\"FFEST case list root\",\n-\t\t\t\t\tsizeof (*new));\n+  new = malloc_new_kp (ffesta_scratch_pool, \"FFEST case list root\",\n+\t\t       sizeof (*new));\n   new->next = new->previous = new;\n   new->t = NULL;\n   new->expr1 = NULL;\n@@ -151,8 +149,7 @@ ffestt_dimlist_append (ffesttDimList list, ffebld lower, ffebld upper,\n {\n   ffesttDimList new;\n \n-  new = (ffesttDimList) malloc_new_kp (ffesta_scratch_pool,\n-\t\t\t\t       \"FFEST dim list\", sizeof (*new));\n+  new = malloc_new_kp (ffesta_scratch_pool, \"FFEST dim list\", sizeof (*new));\n   new->next = list->previous->next;\n   new->previous = list->previous;\n   new->next->previous = new;\n@@ -400,8 +397,8 @@ ffestt_dimlist_create (void)\n {\n   ffesttDimList new;\n \n-  new = (ffesttDimList) malloc_new_kp (ffesta_scratch_pool,\n-\t\t\t\t       \"FFEST dim list root\", sizeof (*new));\n+  new = malloc_new_kp (ffesta_scratch_pool, \"FFEST dim list root\",\n+\t\t       sizeof (*new));\n   new->next = new->previous = new;\n   new->t = NULL;\n   new->lower = NULL;\n@@ -503,8 +500,7 @@ ffestt_exprlist_append (ffesttExprList list, ffebld expr, ffelexToken t)\n {\n   ffesttExprList new;\n \n-  new = (ffesttExprList) malloc_new_kp (ffesta_scratch_pool,\n-\t\t\t\t\t\"FFEST expr list\", sizeof (*new));\n+  new = malloc_new_kp (ffesta_scratch_pool, \"FFEST expr list\", sizeof (*new));\n   new->next = list->previous->next;\n   new->previous = list->previous;\n   new->next->previous = new;\n@@ -525,8 +521,8 @@ ffestt_exprlist_create (void)\n {\n   ffesttExprList new;\n \n-  new = (ffesttExprList) malloc_new_kp (ffesta_scratch_pool,\n-\t\t\t\t     \"FFEST expr list root\", sizeof (*new));\n+  new = malloc_new_kp (ffesta_scratch_pool, \"FFEST expr list root\",\n+\t\t       sizeof (*new));\n   new->next = new->previous = new;\n   new->expr = NULL;\n   new->t = NULL;\n@@ -592,8 +588,8 @@ ffestt_formatlist_append (ffesttFormatList list)\n {\n   ffesttFormatList new;\n \n-  new = (ffesttFormatList) malloc_new_kp (ffesta_scratch_pool,\n-\t\t\t\t\t\"FFEST format list\", sizeof (*new));\n+  new = malloc_new_kp (ffesta_scratch_pool, \"FFEST format list\",\n+\t\t       sizeof (*new));\n   new->next = list->previous->next;\n   new->previous = list->previous;\n   new->next->previous = new;\n@@ -613,8 +609,8 @@ ffestt_formatlist_create (ffesttFormatList parent, ffelexToken t)\n {\n   ffesttFormatList new;\n \n-  new = (ffesttFormatList) malloc_new_kp (ffesta_scratch_pool,\n-\t\t\t\t   \"FFEST format list root\", sizeof (*new));\n+  new = malloc_new_kp (ffesta_scratch_pool, \"FFEST format list root\",\n+\t\t       sizeof (*new));\n   new->next = new->previous = new;\n   new->type = FFESTP_formattypeNone;\n   new->t = t;\n@@ -720,8 +716,7 @@ ffestt_implist_append (ffesttImpList list, ffelexToken first, ffelexToken last)\n {\n   ffesttImpList new;\n \n-  new = (ffesttImpList) malloc_new_kp (ffesta_scratch_pool,\n-\t\t\t\t       \"FFEST token list\", sizeof (*new));\n+  new = malloc_new_kp (ffesta_scratch_pool, \"FFEST token list\", sizeof (*new));\n   new->next = list->previous->next;\n   new->previous = list->previous;\n   new->next->previous = new;\n@@ -742,9 +737,8 @@ ffestt_implist_create (void)\n {\n   ffesttImpList new;\n \n-  new = (ffesttImpList) malloc_new_kp (ffesta_scratch_pool,\n-\t\t\t\t       \"FFEST token list root\",\n-\t\t\t\t       sizeof (*new));\n+  new = malloc_new_kp (ffesta_scratch_pool, \"FFEST token list root\",\n+\t\t       sizeof (*new));\n   new->next = new->previous = new;\n   new->first = NULL;\n   new->last = NULL;\n@@ -807,8 +801,7 @@ ffestt_tokenlist_append (ffesttTokenList tl, ffelexToken t)\n {\n   ffesttTokenItem ti;\n \n-  ti = (ffesttTokenItem) malloc_new_kp (ffesta_scratch_pool,\n-\t\t\t\t\t\"FFEST token item\", sizeof (*ti));\n+  ti = malloc_new_kp (ffesta_scratch_pool, \"FFEST token item\", sizeof (*ti));\n   ti->next = (ffesttTokenItem) &tl->first;\n   ti->previous = tl->last;\n   ti->next->previous = ti;\n@@ -829,8 +822,7 @@ ffestt_tokenlist_create (void)\n {\n   ffesttTokenList tl;\n \n-  tl = (ffesttTokenList) malloc_new_kp (ffesta_scratch_pool,\n-\t\t\t\t\t\"FFEST token list\", sizeof (*tl));\n+  tl = malloc_new_kp (ffesta_scratch_pool, \"FFEST token list\", sizeof (*tl));\n   tl->first = tl->last = (ffesttTokenItem) &tl->first;\n   tl->count = 0;\n   return tl;"}, {"sha": "57658de3204e267ed335f95e4d6fd04e2592cad6", "filename": "gcc/f/stw.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fstw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fstw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstw.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -282,8 +282,8 @@ ffestw_init_0 (void)\n {\n   ffestw b;\n \n-  ffestw_stack_top_ = b = (ffestw) malloc_new_kp (malloc_pool_image (),\n-\t\t\t\t\t  \"FFESTW stack base\", sizeof (*b));\n+  ffestw_stack_top_ = b = malloc_new_kp (malloc_pool_image (),\n+\t\t\t\t\t \"FFESTW stack base\", sizeof (*b));\n   b->uses_ = 0;\t\t\t/* catch if anyone uses, kills, &c this\n \t\t\t\t   block. */\n   b->next_ = NULL;\n@@ -324,7 +324,7 @@ ffestw_new (void)\n {\n   ffestw b;\n \n-  b = (ffestw) malloc_new_kp (malloc_pool_image (), \"FFESTW\", sizeof (*b));\n+  b = malloc_new_kp (malloc_pool_image (), \"FFESTW\", sizeof (*b));\n   b->uses_ = 1;\n \n   return b;"}, {"sha": "c22697ff3771bc8654192aeef5aa117ca30cc797", "filename": "gcc/f/symbol.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsymbol.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -206,8 +206,7 @@ ffesymbol_new_ (ffename n)\n \n   assert (n != NULL);\n \n-  s = (ffesymbol) malloc_new_ks (FFESYMBOL_SPACE_POOL_, \"FFESYMBOL\",\n-\t\t\t\t sizeof (*s));\n+  s = malloc_new_ks (FFESYMBOL_SPACE_POOL_, \"FFESYMBOL\", sizeof (*s));\n   s->name = n;\n   s->other_space_name = NULL;\n #if FFEGLOBAL_ENABLED\n@@ -258,8 +257,8 @@ ffesymbol_new_ (ffename n)\n       return s;\n     }\n \n-  r = (ffesymbolRetract_) malloc_new_kp (ffesymbol_retract_pool_,\n-\t\t\t\t\t \"FFESYMBOL retract\", sizeof (*r));\n+  r = malloc_new_kp (ffesymbol_retract_pool_, \"FFESYMBOL retract\",\n+\t\t     sizeof (*r));\n   r->next = NULL;\n   r->command = FFESYMBOL_retractcommandDELETE_;\n   r->live = s;\n@@ -1104,13 +1103,13 @@ ffesymbol_signal_change (ffesymbol s)\n   if (!ffesymbol_retractable_ || s->have_old)\n     return;\n \n-  r = (ffesymbolRetract_) malloc_new_kp (ffesymbol_retract_pool_,\n-\t\t\t\t\t \"FFESYMBOL retract\", sizeof (*r));\n+  r = malloc_new_kp (ffesymbol_retract_pool_, \"FFESYMBOL retract\",\n+\t\t     sizeof (*r));\n   r->next = NULL;\n   r->command = FFESYMBOL_retractcommandRETRACT_;\n   r->live = s;\n-  r->symbol = sym = (ffesymbol) malloc_new_ks (FFESYMBOL_SPACE_POOL_,\n-\t\t\t\t\t       \"FFESYMBOL\", sizeof (*sym));\n+  r->symbol = sym = malloc_new_ks (FFESYMBOL_SPACE_POOL_,\n+\t\t\t\t   \"FFESYMBOL\", sizeof (*sym));\n   *sym = *s;\t\t\t/* Make an exact copy of the symbol in case\n \t\t\t\t   we need it back. */\n   sym->info = ffeinfo_use (s->info);"}, {"sha": "98760469831fd6366d9d281eaffc14c6cd726a68", "filename": "gcc/f/target.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftarget.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -2244,8 +2244,7 @@ ffetarget_real1 (ffetargetReal1 *value, ffelexToken integer,\n #undef dotoktxt\n \n   if (sz > ARRAY_SIZE (ffetarget_string_))\n-    p = ptr = (char *) malloc_new_ks (malloc_pool_image (), \"ffetarget_real1\",\n-\t\t\t\t      sz);\n+    p = ptr = malloc_new_ks (malloc_pool_image (), \"ffetarget_real1\", sz);\n \n #define dotoktxt(x) if (x != NULL)\t\t\t\t   \\\n \t\t  {\t\t\t\t\t\t   \\\n@@ -2327,7 +2326,7 @@ ffetarget_real2 (ffetargetReal2 *value, ffelexToken integer,\n #undef dotoktxt\n \n   if (sz > ARRAY_SIZE (ffetarget_string_))\n-    p = ptr = (char *) malloc_new_ks (malloc_pool_image (), \"ffetarget_real1\", sz);\n+    p = ptr = malloc_new_ks (malloc_pool_image (), \"ffetarget_real1\", sz);\n \n #define dotoktxt(x) if (x != NULL)\t\t\t\t   \\\n \t\t  {\t\t\t\t\t\t   \\"}, {"sha": "d25ab50f4c2a1b18057e17b6666ddf2f36837876", "filename": "gcc/f/type.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Ftype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ff%2Ftype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftype.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -53,8 +53,7 @@ ffetype_new (void)\n {\n   ffetype type;\n \n-  type = (ffetype) malloc_new_kp (malloc_pool_image (), \"ffetype\",\n-\t\t\t\t    sizeof (*type));\n+  type = malloc_new_kp (malloc_pool_image (), \"ffetype\", sizeof (*type));\n   type->kinds_ = NULL;\n   type->stars_ = NULL;\n   type->alignment_ = 0;\n@@ -74,9 +73,8 @@ ffetype_set_kind (ffetype base_type, int kind, ffetype type)\n       int i;\n \n       base_type->kinds_\n-\t= (ffetype_indexes_) malloc_new_kp (malloc_pool_image (),\n-\t\t\t\t\t    \"ffetype_indexes_[kinds]\",\n-\t\t\t\t\t    sizeof (*(base_type->kinds_)));\n+\t= malloc_new_kp (malloc_pool_image (), \"ffetype_indexes_[kinds]\",\n+\t\t\t sizeof (*(base_type->kinds_)));\n       for (i = 0; ((size_t) i) < ARRAY_SIZE (base_type->kinds_->type_); ++i)\n \tbase_type->kinds_->type_[i] = NULL;\n     }\n@@ -94,9 +92,8 @@ ffetype_set_star (ffetype base_type, int star, ffetype type)\n       int i;\n \n       base_type->stars_\n-\t= (ffetype_indexes_) malloc_new_kp (malloc_pool_image (),\n-\t\t\t\t\t    \"ffetype_indexes_[stars]\",\n-\t\t\t\t\t    sizeof (*(base_type->stars_)));\n+\t= malloc_new_kp (malloc_pool_image (), \"ffetype_indexes_[stars]\",\n+\t\t\t sizeof (*(base_type->stars_)));\n       for (i = 0; ((size_t) i) < ARRAY_SIZE (base_type->stars_->type_); ++i)\n \tbase_type->stars_->type_[i] = NULL;\n     }"}, {"sha": "4ee57602b299620e13cbd8d5932b1e2997cacbeb", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -783,7 +783,7 @@ main( argc, argv )\n       return EXIT_FAILURE;\n     }\n \n-  pz_tmptmp = (char*)xmalloc( strlen( argv[4] ) + 5 );\n+  pz_tmptmp = xmalloc (strlen (argv[4]) + 5);\n   strcpy( pz_tmptmp, argv[4] );\n \n   /* Don't lose because \"12345678\" and \"12345678X\" map to the same"}, {"sha": "92abcac49b9a4a264b7d0ab5ba3f63e374d9dbfd", "filename": "gcc/fixinc/fixincl.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ffixinc%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ffixinc%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -488,12 +488,12 @@ run_compiles ()\n {\n   tFixDesc *p_fixd = fixDescList;\n   int fix_ct = FIX_COUNT;\n-  regex_t *p_re = (regex_t *) xmalloc (REGEX_COUNT * sizeof (regex_t));\n+  regex_t *p_re = xmalloc (REGEX_COUNT * sizeof (regex_t));\n \n   /*  Make sure compile_re does not stumble across invalid data */\n \n-  memset ( (void*)p_re, '\\0', REGEX_COUNT * sizeof (regex_t) );\n-  memset ( (void*)&incl_quote_re, '\\0', sizeof (regex_t) );\n+  memset (p_re, '\\0', REGEX_COUNT * sizeof (regex_t));\n+  memset (&incl_quote_re, '\\0', sizeof (regex_t));\n \n   compile_re (incl_quote_pat, &incl_quote_re, 1,\n               \"quoted include\", \"run_compiles\");\n@@ -911,7 +911,7 @@ fix_with_system (p_fixd, pz_fix_file, pz_file_source, pz_temp_file)\n               + strlen( pz_file_source )\n               + strlen( pz_temp_file );\n \n-      pz_cmd = (char*)xmalloc( argsize );\n+      pz_cmd = xmalloc (argsize);\n \n       strcpy( pz_cmd, pz_orig_dir );\n       pz_scan = pz_cmd + strlen( pz_orig_dir );\n@@ -970,7 +970,7 @@ fix_with_system (p_fixd, pz_fix_file, pz_file_source, pz_temp_file)\n         }\n \n       /* Estimated buffer size we will need.  */\n-      pz_scan = pz_cmd = (char*)xmalloc( argsize );\n+      pz_scan = pz_cmd = xmalloc (argsize);\n       /* How much of it do we allot to the program name and its\n          arguments.  */\n       parg_size = argsize - parg_size;\n@@ -1010,7 +1010,7 @@ fix_with_system (p_fixd, pz_fix_file, pz_file_source, pz_temp_file)\n \t  while (pz_scan == (char*)NULL)\n \t    {\n \t      size_t already_filled = pz_scan_save - pz_cmd;\n-\t      pz_cmd = (char*)xrealloc( pz_cmd, argsize += 100 );\n+\t      pz_cmd = xrealloc (pz_cmd, argsize += 100);\n \t      pz_scan_save = pz_scan = pz_cmd + already_filled;\n \t      parg_size += 100;\n \t      pz_scan = make_raw_shell_str( pz_scan, pArg,\n@@ -1058,9 +1058,8 @@ start_fixer (read_fd, p_fixd, pz_fix_file)\n   else\n     {\n       tSCC z_cmd_fmt[] = \"file='%s'\\n%s\";\n-      pz_cmd = (char*) xmalloc (strlen (p_fixd->patch_args[2])\n-\t\t\t\t+ sizeof( z_cmd_fmt )\n-\t\t\t\t+ strlen( pz_fix_file ));\n+      pz_cmd = xmalloc (strlen (p_fixd->patch_args[2])\n+\t\t\t+ sizeof (z_cmd_fmt) + strlen (pz_fix_file));\n       sprintf (pz_cmd, z_cmd_fmt, pz_fix_file, p_fixd->patch_args[2]);\n       pz_cmd_save = p_fixd->patch_args[2];\n       p_fixd->patch_args[2] = pz_cmd;"}, {"sha": "32f65d9d67ac0455d26466bc50c4e36a85530334", "filename": "gcc/fixinc/fixlib.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ffixinc%2Ffixlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ffixinc%2Ffixlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -49,7 +49,7 @@ load_file_data (fp)\n       if (space_left < 1024)\n         {\n           space_left += 4096;\n-\t  pz_data = xrealloc ((void*)pz_data, space_left + space_used + 1 );\n+\t  pz_data = xrealloc (pz_data, space_left + space_used + 1 );\n         }\n       size_read = fread (pz_data + space_used, 1, space_left, fp);\n \n@@ -73,7 +73,7 @@ load_file_data (fp)\n       space_used += size_read;\n     } while (! feof (fp));\n \n-  pz_data = xrealloc ((void*)pz_data, space_used+1 );\n+  pz_data = xrealloc (pz_data, space_used+1 );\n   pz_data[ space_used ] = NUL;\n \n   return pz_data;"}, {"sha": "f195f018afc6fd9b9a2b545b6a8a3de9c86390b0", "filename": "gcc/fixinc/server.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ffixinc%2Fserver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ffixinc%2Fserver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fserver.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -111,7 +111,7 @@ load_data (fp)\n           size_t off = (size_t) (pz_scan - pz_text);\n \t  \n           text_size += 4096;\n-          pz_text = xrealloc ((void *) pz_text, text_size);\n+          pz_text = xrealloc (pz_text, text_size);\n           pz_scan = pz_text + off;\n         }\n     }\n@@ -126,7 +126,7 @@ load_data (fp)\n   while ((pz_scan > pz_text) && ISSPACE (pz_scan[-1]))\n     pz_scan--;\n   *pz_scan = NUL;\n-  return xrealloc ((void *) pz_text, strlen (pz_text) + 1);\n+  return xrealloc (pz_text, strlen (pz_text) + 1);\n }\n \n "}, {"sha": "774cf7969a66dc17b5c09cbe42093e1c14873f63", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -1,3 +1,8 @@\n+2003-07-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* class.c java-tree.h jcf-write.c jvspec.c: Remove unnecessary\n+\tcasts.\n+\n 2003-07-19  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* lang.opt: Don't show -MD_ and -MDD_."}, {"sha": "a4278efa0c02c2c5b19a8f6cab87880a5a20fa4a", "filename": "gcc/java/class.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -148,8 +148,7 @@ add_assume_compiled (const char *ident, int excludep)\n {\n   int len;\n   assume_compiled_node *parent;\n-  assume_compiled_node *node = \n-    xmalloc (sizeof (assume_compiled_node));\n+  assume_compiled_node *node = xmalloc (sizeof (assume_compiled_node));\n \n   node->ident = xstrdup (ident);\n   node->excludep = excludep;\n@@ -2157,7 +2156,7 @@ java_treetreehash_find (htab_t ht, tree t)\n {\n   struct treetreehash_entry *e;\n   hashval_t hv = JAVA_TREEHASHHASH_H (t);\n-  e = (struct treetreehash_entry *) htab_find_with_hash (ht, t, hv);\n+  e = htab_find_with_hash (ht, t, hv);\n   if (e == NULL)\n     return NULL;\n   else"}, {"sha": "cd277c5dc63b2a460169911e5e85535dd37c9ecf", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -946,8 +946,7 @@ union lang_tree_node\n   if (DECL_LANG_SPECIFIC (T) == NULL)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       DECL_LANG_SPECIFIC ((T))\t\t\t\t\t\\\n-\t= ((struct lang_decl *)\t\t\t\t\t\\\n-\t   ggc_alloc_cleared (sizeof (struct lang_decl)));\t\\\n+\t= ggc_alloc_cleared (sizeof (struct lang_decl));\t\\\n       DECL_LANG_SPECIFIC (T)->desc = LANG_DECL_VAR;\t\t\\\n     }\n \n@@ -1050,9 +1049,8 @@ struct lang_decl GTY(())\n #define MAYBE_CREATE_TYPE_TYPE_LANG_SPECIFIC(T)\t\t\t\t \\\n   if (TYPE_LANG_SPECIFIC ((T)) == NULL)\t\t\t\t\t \\\n     {\t\t\t\t\t\t\t\t\t \\\n-      TYPE_LANG_SPECIFIC ((T)) = \t\t\t\t\t \\\n-\t((struct lang_type *) \t\t\t\t\t\t \\\n-         ggc_alloc_cleared (sizeof (struct lang_type)));\t\t \\\n+      TYPE_LANG_SPECIFIC ((T)) \t\t\t\t\t \t \\\n+        = ggc_alloc_cleared (sizeof (struct lang_type));\t\t \\\n     }\n \n #define TYPE_FINIT_STMT_LIST(T)  (TYPE_LANG_SPECIFIC(T)->finit_stmt_list)"}, {"sha": "44c9ec1cf80dcdd02b2b0d2f8458d3d535aaa21c", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -386,8 +386,7 @@ static struct chunk *\n alloc_chunk (struct chunk *last, unsigned char *data,\n \t     int size, struct obstack *work)\n {\n-  struct chunk *chunk = (struct chunk *)\n-    obstack_alloc (work, sizeof(struct chunk));\n+  struct chunk *chunk = obstack_alloc (work, sizeof(struct chunk));\n \n   if (data == NULL && size > 0)\n     data = obstack_alloc (work, size);\n@@ -434,8 +433,8 @@ append_chunk_copy (unsigned char *data, int size, struct jcf_partial *state)\n static struct jcf_block *\n gen_jcf_label (struct jcf_partial *state)\n {\n-  struct jcf_block *block = (struct jcf_block *)\n-    obstack_alloc (state->chunk_obstack, sizeof (struct jcf_block));\n+  struct jcf_block *block\n+    = obstack_alloc (state->chunk_obstack, sizeof (struct jcf_block));\n   block->next =\tNULL;\n   block->linenumber = -1;\n   block->pc = UNDEFINED_PC;\n@@ -518,8 +517,8 @@ static struct jcf_handler *\n alloc_handler (struct jcf_block *start_label, struct jcf_block *end_label,\n \t       struct jcf_partial *state)\n {\n-  struct jcf_handler *handler = (struct jcf_handler *)\n-    obstack_alloc (state->chunk_obstack, sizeof (struct jcf_handler));\n+  struct jcf_handler *handler\n+    = obstack_alloc (state->chunk_obstack, sizeof (struct jcf_handler));\n   handler->start_label = start_label;\n   handler->end_label = end_label;\n   handler->handler_label = get_jcf_label_here (state);\n@@ -576,8 +575,7 @@ localvar_alloc (tree decl, struct jcf_partial *state)\n       ptr = (struct localvar_info**) state->localvars.data + index;\n       state->localvars.ptr = (unsigned char *) (ptr + 1 + wide);\n     }\n-  info = (struct localvar_info *)\n-    obstack_alloc (state->chunk_obstack, sizeof (struct localvar_info));\n+  info = obstack_alloc (state->chunk_obstack, sizeof (struct localvar_info));\n   ptr[0] = info;\n   if (wide)\n     ptr[1] = (struct localvar_info *)(~0);\n@@ -1004,8 +1002,8 @@ static void\n emit_reloc (HOST_WIDE_INT value, int kind,\n \t    struct jcf_block *target, struct jcf_partial *state)\n {\n-  struct jcf_relocation *reloc = (struct jcf_relocation *)\n-    obstack_alloc (state->chunk_obstack, sizeof (struct jcf_relocation));\n+  struct jcf_relocation *reloc\n+    = obstack_alloc (state->chunk_obstack, sizeof (struct jcf_relocation));\n   struct jcf_block *block = state->last_block;\n   reloc->next = block->u.relocations;\n   block->u.relocations = reloc;\n@@ -1582,8 +1580,8 @@ generate_bytecode_insns (tree exp, int target, struct jcf_partial *state)\n     case CASE_EXPR:\n       {\n \tstruct jcf_switch_state *sw_state = state->sw_state;\n-\tstruct jcf_relocation *reloc = (struct jcf_relocation *)\n-\t  obstack_alloc (state->chunk_obstack, sizeof (struct jcf_relocation));\n+\tstruct jcf_relocation *reloc\n+\t  = obstack_alloc (state->chunk_obstack, sizeof (struct jcf_relocation));\n \tHOST_WIDE_INT case_value = TREE_INT_CST_LOW (TREE_OPERAND (exp, 0));\n \treloc->kind = 0;\n \treloc->label = get_jcf_label_here (state);\n@@ -1663,8 +1661,8 @@ generate_bytecode_insns (tree exp, int target, struct jcf_partial *state)\n \t    HOST_WIDE_INT i;\n \t    unsigned HOST_WIDE_INT delta;\n \t    /* Copy the chain of relocs into a sorted array. */\n-\t    struct jcf_relocation **relocs = (struct jcf_relocation **)\n-\t      xmalloc (sw_state.num_cases * sizeof (struct jcf_relocation *));\n+\t    struct jcf_relocation **relocs\n+\t      = xmalloc (sw_state.num_cases * sizeof (struct jcf_relocation *));\n \t    /* The relocs arrays is a buffer with a gap.\n \t       The assumption is that cases will normally come in \"runs\". */\n \t    int gap_start = 0;\n@@ -2669,8 +2667,7 @@ perform_relocations (struct jcf_partial *state)\n       unsigned char *old_ptr = old_buffer + old_size;\n       if (new_size != old_size)\n \t{\n-\t  chunk->data = (unsigned char *)\n-\t    obstack_alloc (state->chunk_obstack, new_size);\n+\t  chunk->data = obstack_alloc (state->chunk_obstack, new_size);\n \t  chunk->size = new_size;\n \t}\n       new_ptr = chunk->data + new_size;"}, {"sha": "b76025ee34142616fc7302e0b3a3e381004858f0", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -319,7 +319,7 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n \t  else if (argv[i][1] == 'O')\n \t    saw_O = 1;\n \t  else if ((argv[i][2] == '\\0'\n-\t\t    && (char *)strchr (\"bBVDUoeTuIYmLiA\", argv[i][1]) != NULL)\n+\t\t    && strchr (\"bBVDUoeTuIYmLiA\", argv[i][1]) != NULL)\n \t\t   || strcmp (argv[i], \"-Tdata\") == 0\n \t\t   || strcmp (argv[i], \"-MT\") == 0\n \t\t   || strcmp (argv[i], \"-MF\") == 0)\n@@ -337,7 +337,7 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n \t    }\n \t  else if (library != 0 \n \t\t   && ((argv[i][2] == '\\0'\n-\t\t\t&& (char *) strchr (\"cSEM\", argv[i][1]) != NULL)\n+\t\t\t&& strchr (\"cSEM\", argv[i][1]) != NULL)\n \t\t       || strcmp (argv[i], \"-MM\") == 0))\n \t    {\n \t      /* Don't specify libraries if we won't link, since that would"}, {"sha": "4112f6369ab84cab61b49eed7fa9c31fe73e435b", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -4475,7 +4475,7 @@ synth_id_with_class_suffix (preamble, ctxt)\n     {\n       const char *const class_name\n \t= IDENTIFIER_POINTER (CLASS_NAME (objc_implementation_context));\n-      string = (char *) alloca (strlen (preamble) + strlen (class_name) + 3);\n+      string = alloca (strlen (preamble) + strlen (class_name) + 3);\n       sprintf (string, \"%s_%s\", preamble,\n \t       IDENTIFIER_POINTER (CLASS_NAME (ctxt)));\n     }\n@@ -4487,17 +4487,14 @@ synth_id_with_class_suffix (preamble, ctxt)\n \t= IDENTIFIER_POINTER (CLASS_NAME (objc_implementation_context));\n       const char *const class_super_name\n \t= IDENTIFIER_POINTER (CLASS_SUPER_NAME (objc_implementation_context));\n-      string = (char *) alloca (strlen (preamble)\n-\t\t\t\t+ strlen (class_name)\n-\t\t\t\t+ strlen (class_super_name)\n-\t\t\t\t+ 3);\n+      string = alloca (strlen (preamble) + strlen (class_name)\n+\t\t       + strlen (class_super_name) + 3);\n       sprintf (string, \"%s_%s_%s\", preamble, class_name, class_super_name);\n     }\n   else if (TREE_CODE (ctxt) == PROTOCOL_INTERFACE_TYPE)\n     {\n       const char *protocol_name = IDENTIFIER_POINTER (PROTOCOL_NAME (ctxt));\n-      string\n-\t= (char *) alloca (strlen (preamble) + strlen (protocol_name) + 3);\n+      string = alloca (strlen (preamble) + strlen (protocol_name) + 3);\n       sprintf (string, \"%s_%s\", preamble, protocol_name);\n     }\n   else\n@@ -4619,7 +4616,7 @@ build_keyword_selector (selector)\n \tlen++;\n     }\n \n-  buf = (char *) alloca (len + 1);\n+  buf = alloca (len + 1);\n   /* Start the buffer out as an empty string.  */\n   buf[0] = '\\0';\n \n@@ -5433,8 +5430,8 @@ hash_func (sel_name)\n static void\n hash_init ()\n {\n-  nst_method_hash_list = (hash *) ggc_calloc (SIZEHASHTABLE, sizeof (hash));\n-  cls_method_hash_list = (hash *) ggc_calloc (SIZEHASHTABLE, sizeof (hash));\n+  nst_method_hash_list = ggc_calloc (SIZEHASHTABLE, sizeof (hash));\n+  cls_method_hash_list = ggc_calloc (SIZEHASHTABLE, sizeof (hash));\n }\n \n /* WARNING!!!!  hash_enter is called with a method, and will peek\n@@ -5450,7 +5447,7 @@ hash_enter (hashlist, method)\n   hash obj;\n   int slot = hash_func (METHOD_SEL_NAME (method)) % SIZEHASHTABLE;\n \n-  obj = (hash) ggc_alloc (sizeof (struct hashed_entry));\n+  obj = ggc_alloc (sizeof (struct hashed_entry));\n   obj->list = 0;\n   obj->next = hashlist[slot];\n   obj->key = method;\n@@ -5484,7 +5481,7 @@ hash_add_attr (entry, value)\n {\n   attr obj;\n \n-  obj = (attr) ggc_alloc (sizeof (struct hashed_attribute));\n+  obj = ggc_alloc (sizeof (struct hashed_attribute));\n   obj->next = entry->list;\n   obj->value = value;\n \n@@ -6273,7 +6270,7 @@ continue_class (class)\n       if (!objc_class_template)\n \tbuild_class_template ();\n \n-      imp_entry = (struct imp_entry *) ggc_alloc (sizeof (struct imp_entry));\n+      imp_entry = ggc_alloc (sizeof (struct imp_entry));\n \n       imp_entry->next = imp_list;\n       imp_entry->imp_context = class;\n@@ -6369,7 +6366,7 @@ finish_class (class)\n     {\n       tree decl_specs;\n       const char *class_name = IDENTIFIER_POINTER (CLASS_NAME (class));\n-      char *string = (char *) alloca (strlen (class_name) + 3);\n+      char *string = alloca (strlen (class_name) + 3);\n \n       /* extern struct objc_object *_<my_name>; */\n \n@@ -7123,8 +7120,8 @@ really_start_method (method, parmlist)\n   method_slot++;\n \n   /* Make sure this is big enough for any plausible method label.  */\n-  buf = (char *) alloca (50 + strlen (sel_name) + strlen (class_name)\n-\t\t\t + (cat_name ? strlen (cat_name) : 0));\n+  buf = alloca (50 + strlen (sel_name) + strlen (class_name)\n+\t\t+ (cat_name ? strlen (cat_name) : 0));\n \n   OBJC_GEN_METHOD_LABEL (buf, TREE_CODE (method) == INSTANCE_METHOD_DECL,\n \t\t\t class_name, cat_name, sel_name, method_slot);\n@@ -8061,7 +8058,7 @@ dump_interface (fp, chain)\n      declaration is so long that it doesn't fit in the buffer.  The\n      code and all the related functions should be rewritten to avoid\n      using fixed size buffers.  */\n-  char *buf = (char *) xmalloc (1024 * 10);\n+  char *buf = xmalloc (1024 * 10);\n   const char *my_name = IDENTIFIER_POINTER (CLASS_NAME (chain));\n   tree ivar_decls = CLASS_RAW_IVARS (chain);\n   tree nst_methods = CLASS_NST_METHODS (chain);\n@@ -8187,7 +8184,7 @@ init_objc ()\n   gcc_obstack_init (&util_obstack);\n   util_firstobj = (char *) obstack_finish (&util_obstack);\n \n-  errbuf = (char *) xmalloc (BUFSIZE);\n+  errbuf = xmalloc (BUFSIZE);\n   hash_init ();\n   synth_module_prologue ();\n }\n@@ -8367,7 +8364,7 @@ handle_class_ref (chain)\n      tree chain;\n {\n   const char *name = IDENTIFIER_POINTER (TREE_VALUE (chain));\n-  char *string = (char *) alloca (strlen (name) + 30);\n+  char *string = alloca (strlen (name) + 30);\n   tree decl;\n   tree exp;\n \n@@ -8417,7 +8414,7 @@ handle_impent (impent)\n       const char *const class_name =\n \tIDENTIFIER_POINTER (CLASS_NAME (impent->imp_context));\n \n-      string = (char *) alloca (strlen (class_name) + 30);\n+      string = alloca (strlen (class_name) + 30);\n \n       sprintf (string, \"%sobjc_class_name_%s\",\n                (flag_next_runtime ? \".\" : \"__\"), class_name);\n@@ -8429,7 +8426,7 @@ handle_impent (impent)\n       const char *const class_super_name =\n         IDENTIFIER_POINTER (CLASS_SUPER_NAME (impent->imp_context));\n \n-      string = (char *) alloca (strlen (class_name)\n+      string = alloca (strlen (class_name)\n \t\t\t\t+ strlen (class_super_name) + 30);\n \n       /* Do the same for categories.  Even though no references to"}, {"sha": "16398de9227ac1a8ce67f3024f08701a6022b5ba", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -1,3 +1,7 @@\n+2003-07-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* treetree.c: Remove unnecessary casts.\n+\n 2003-07-15  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* lang-options.h: Remove."}, {"sha": "8a57e27df155f5bc4a195567baf00cb1c1d0506f", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c68b0a84257413fa115b2177650e024f4546501f/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=c68b0a84257413fa115b2177650e024f4546501f", "patch": "@@ -1124,8 +1124,7 @@ void\n pushlevel (ignore)\n      int ignore ATTRIBUTE_UNUSED;\n {\n-  struct binding_level *newlevel\n-    = (struct binding_level *) xmalloc (sizeof (struct binding_level));\n+  struct binding_level *newlevel = xmalloc (sizeof (struct binding_level));\n \n   *newlevel = clear_binding_level;\n "}]}