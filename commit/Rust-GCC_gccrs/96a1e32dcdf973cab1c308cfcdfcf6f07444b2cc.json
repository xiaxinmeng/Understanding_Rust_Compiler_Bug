{"sha": "96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZhMWUzMmRjZGY5NzNjYWIxYzMwOGNmY2RmY2Y2ZjA3NDQ0YjJjYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-01-11T12:29:20Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-01-11T12:29:20Z"}, "message": "call.c (convert_default_arg): Check for unprocessed DEFAULT_ARG.\n\ncp:\n\t* call.c (convert_default_arg): Check for unprocessed\n\tDEFAULT_ARG.\n\t* cp-tree.h (replace_defarg): Move to spew.c.\n\t(maybe_snarf_defarg, add_defarg_fn, do_pending_defargs): Move to\n\tspew.c, which is where they really are.\n\t(done_pending_defargs): Declare.\n\t(unprocessed_defarg_fn): Declare.\n\t* decl.c (replace_defarg): Move to spew.c\n\t* parse.y (structsp): Call done_pending_defargs.\n\t* spew.c (defarg_fns): Rearrange list structure.\n\t(defarg_fnsdone): New static variable.\n\t(defarg_depfns): New static variable.\n\t(init_spew): Adjust.\n\t(add_defarg_fn): Store the type in TREE_TYPE.\n\t(do_pending_defargs): Detect and deal with ordering constraints\n\tand circularity.\n\t(done_pending_defargs): New function.\n\t(unprocessed_defarg_fn): New function.\n\t(replace_defarg): Moved from decl.c. Robustify. Don't save\n\tif circularity detected.\ntestsuite:\n\t* g++.old-deja/g++.other/defarg7.C: New test.\n\t* g++.old-deja/g++.other/defarg8.C: New test.\n\nFrom-SVN: r38903", "tree": {"sha": "ec5b5da0d3a77d08ddf43c7b5c39291e71111bc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec5b5da0d3a77d08ddf43c7b5c39291e71111bc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/comments", "author": null, "committer": null, "parents": [{"sha": "34e225a30bcb010bc46846eb3ea6ad9e1321034d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e225a30bcb010bc46846eb3ea6ad9e1321034d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34e225a30bcb010bc46846eb3ea6ad9e1321034d"}], "stats": {"total": 263, "additions": 237, "deletions": 26}, "files": [{"sha": "0981c7eab9b68eae34c9bb825b85dae0928583aa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc", "patch": "@@ -1,3 +1,26 @@\n+2001-01-11  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* call.c (convert_default_arg): Check for unprocessed\n+\tDEFAULT_ARG.\n+\t* cp-tree.h (replace_defarg): Move to spew.c.\n+\t(maybe_snarf_defarg, add_defarg_fn, do_pending_defargs): Move to\n+\tspew.c, which is where they really are.\n+\t(done_pending_defargs): Declare.\n+\t(unprocessed_defarg_fn): Declare.\n+\t* decl.c (replace_defarg): Move to spew.c\n+\t* parse.y (structsp): Call done_pending_defargs.\n+\t* spew.c (defarg_fns): Rearrange list structure.\n+\t(defarg_fnsdone): New static variable.\n+\t(defarg_depfns): New static variable.\n+\t(init_spew): Adjust.\n+\t(add_defarg_fn): Store the type in TREE_TYPE.\n+\t(do_pending_defargs): Detect and deal with ordering constraints\n+\tand circularity.\n+\t(done_pending_defargs): New function.\n+\t(unprocessed_defarg_fn): New function.\n+\t(replace_defarg): Moved from decl.c. Robustify. Don't save\n+\tif circularity detected.\n+\n 2001-01-11  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* pt.c (unify): Check array has a domain, before checking"}, {"sha": "5f12f7efe2002e57555f8cd08a8b3ffb73120f51", "filename": "gcc/cp/call.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc", "patch": "@@ -3953,6 +3953,26 @@ convert_default_arg (type, arg, fn, parmnum)\n      tree fn;\n      int parmnum;\n {\n+  if (TREE_CODE (arg) == DEFAULT_ARG)\n+    {\n+      /* When processing the default args for a class, we can find that\n+         there is an ordering constraint, and we call a function who's\n+         default args have not yet been converted. For instance,\n+          class A {\n+              A (int = 0);\n+              void Foo (A const & = A ());\n+          };\n+         We must process A::A before A::Foo's default arg can be converted.\n+         Remember the dependent function, so do_pending_defargs can retry,\n+         and check loops.  */\n+      unprocessed_defarg_fn (fn);\n+      \n+      /* Don't return error_mark node, as we won't be able to distinguish\n+         genuine errors from this case, and that would lead to repeated\n+         diagnostics.  Just make something of the right type.  */\n+      return build1 (NOP_EXPR, type, integer_zero_node);\n+    }\n+\n   if (fn && DECL_TEMPLATE_INFO (fn))\n     arg = tsubst_default_argument (fn, type, arg);\n "}, {"sha": "eea27e0233f83e3998e943cc3c8299858a7b38e8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc", "patch": "@@ -3874,7 +3874,6 @@ extern tree finish_method\t\t\tPARAMS ((tree));\n extern void hack_incomplete_structures\t\tPARAMS ((tree));\n extern tree maybe_build_cleanup\t\t\tPARAMS ((tree));\n extern void finish_stmt\t\t\t\tPARAMS ((void));\n-extern void replace_defarg\t\t\tPARAMS ((tree, tree));\n extern void print_other_binding_stack\t\tPARAMS ((struct binding_level *));\n extern void revert_static_member_fn             PARAMS ((tree));\n extern void fixup_anonymous_aggr                PARAMS ((tree));\n@@ -4085,9 +4084,6 @@ extern void compiler_error\t\t\tPARAMS ((const char *, ...))\n   ATTRIBUTE_PRINTF_1;\n extern void yyerror\t\t\t\tPARAMS ((const char *));\n extern void clear_inline_text_obstack\t\tPARAMS ((void));\n-extern void maybe_snarf_defarg\t\t\tPARAMS ((void));\n-extern void add_defarg_fn\t\t\tPARAMS ((tree));\n-extern void do_pending_defargs\t\t\tPARAMS ((void));\n extern void yyhook\t\t\t\tPARAMS ((int));\n extern int cp_type_qual_from_rid                PARAMS ((tree));\n \n@@ -4345,6 +4341,12 @@ extern int peekyylex\t\t\t\tPARAMS ((void));\n extern int yylex\t\t\t\tPARAMS ((void));\n extern tree arbitrate_lookup\t\t\tPARAMS ((tree, tree, tree));\n extern tree frob_opname                         PARAMS ((tree));\n+extern void maybe_snarf_defarg\t\t\tPARAMS ((void));\n+extern void add_defarg_fn\t\t\tPARAMS ((tree));\n+extern void do_pending_defargs\t\t\tPARAMS ((void));\n+extern void done_pending_defargs\t\tPARAMS ((void));\n+extern void unprocessed_defarg_fn               PARAMS ((tree));\n+extern void replace_defarg\t\t\tPARAMS ((tree, tree));\n \n /* in tree.c */\n extern void init_tree\t\t\t        PARAMS ((void));"}, {"sha": "ff3084e8dfe38aa399620e1b5033f2e62a3ad82c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc", "patch": "@@ -11950,20 +11950,6 @@ grokparms (first_parm)\n   return result;\n }\n \n-/* Called from the parser to update an element of TYPE_ARG_TYPES for some\n-   FUNCTION_TYPE with the newly parsed version of its default argument, which\n-   was previously digested as text.  See snarf_defarg et al in lex.c.  */\n-\n-void\n-replace_defarg (arg, init)\n-     tree arg, init;\n-{\n-  if (! processing_template_decl\n-      && ! can_convert_arg (TREE_VALUE (arg), TREE_TYPE (init), init))\n-    cp_pedwarn (\"invalid type `%T' for default argument to `%T'\",\n-\t\tTREE_TYPE (init), TREE_VALUE (arg));\n-  TREE_PURPOSE (arg) = init;\n-}\n \f\n /* D is a constructor or overloaded `operator='.  Returns non-zero if\n    D's arguments allow it to be a copy constructor, or copy assignment"}, {"sha": "dca09921a2d809498f96f6b520fb5f290548797a", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc", "patch": "@@ -2271,6 +2271,7 @@ structsp:\n \t\t}\n \t  pending_defargs\n                 {\n+\t\t  done_pending_defargs ();\n \t\t  begin_inline_definitions ();\n \t\t}\n \t  pending_inlines"}, {"sha": "d7fd78e33f4009619f02f987e85d792a3b4a737e", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 113, "deletions": 8, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc", "patch": "@@ -164,10 +164,14 @@ char *inline_text_firstobj;\n    through and parse all of them using do_pending_defargs.  Since yacc\n    parsers are not reentrant, we retain defargs state in these two\n    variables so that subsequent calls to do_pending_defargs can resume\n-   where the previous call left off.  */\n+   where the previous call left off. DEFARG_FNS is a tree_list where \n+   the TREE_TYPE is the current_class_type, TREE_VALUE is the FUNCTION_DECL,\n+   and TREE_PURPOSE is the list unprocessed dependent functions.  */\n \n-static tree defarg_fns;\n-static tree defarg_parm;\n+static tree defarg_fns;     /* list of functions with unprocessed defargs */\n+static tree defarg_parm;    /* current default parameter */\n+static tree defarg_depfns;  /* list of unprocessed fns met during current fn. */\n+static tree defarg_fnsdone; /* list of fns with circular defargs */\n \n /* Initialize obstacks. Called once, from init_parse.  */\n \n@@ -180,6 +184,8 @@ init_spew ()\n   gcc_obstack_init (&feed_obstack);\n   ggc_add_tree_root (&defarg_fns, 1);\n   ggc_add_tree_root (&defarg_parm, 1);\n+  ggc_add_tree_root (&defarg_depfns, 1);\n+  ggc_add_tree_root (&defarg_fnsdone, 1);\n \n   ggc_add_root (&pending_inlines, 1, sizeof (struct unparsed_text *),\n \t\tmark_pending_inlines);\n@@ -1267,7 +1273,10 @@ add_defarg_fn (decl)\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     TREE_VALUE (defarg_fns) = decl;\n   else\n-    defarg_fns = tree_cons (current_class_type, decl, defarg_fns);  \n+    {\n+      defarg_fns = tree_cons (NULL_TREE, decl, defarg_fns);  \n+      TREE_TYPE (defarg_fns) = current_class_type;\n+    }\n }\n \n /* Helper for do_pending_defargs.  Starts the parsing of a default arg.  */\n@@ -1305,12 +1314,14 @@ do_pending_defargs ()\n   if (defarg_parm)\n     finish_defarg ();\n \n-  for (; defarg_fns; defarg_fns = TREE_CHAIN (defarg_fns))\n+  for (; defarg_fns;)\n     {\n+      tree current = defarg_fns;\n+      \n       tree defarg_fn = TREE_VALUE (defarg_fns);\n       if (defarg_parm == NULL_TREE)\n \t{\n-\t  push_nested_class (TREE_PURPOSE (defarg_fns), 1);\n+\t  push_nested_class (TREE_TYPE (defarg_fns), 1);\n \t  pushlevel (0);\n \t  if (TREE_CODE (defarg_fn) == FUNCTION_DECL)\n \t    maybe_begin_member_template_processing (defarg_fn);\n@@ -1324,8 +1335,12 @@ do_pending_defargs ()\n \tdefarg_parm = TREE_CHAIN (defarg_parm);\n \n       for (; defarg_parm; defarg_parm = TREE_CHAIN (defarg_parm))\n-\tif (TREE_PURPOSE (defarg_parm)\n-\t    && TREE_CODE (TREE_PURPOSE (defarg_parm)) == DEFAULT_ARG)\n+\tif (!TREE_PURPOSE (defarg_parm)\n+\t    || TREE_CODE (TREE_PURPOSE (defarg_parm)) != DEFAULT_ARG)\n+\t  ;/* OK */\n+\telse if (TREE_PURPOSE (current) == error_mark_node)\n+\t  DEFARG_POINTER (TREE_PURPOSE (defarg_parm)) = NULL;\n+\telse\n \t  {\n \t    feed_defarg (defarg_parm);\n \n@@ -1342,6 +1357,96 @@ do_pending_defargs ()\n \n       poplevel (0, 0, 0);\n       pop_nested_class ();\n+      \n+      defarg_fns = TREE_CHAIN (defarg_fns);\n+      if (defarg_depfns)\n+        {\n+          /* This function's default args depend on unprocessed default args\n+             of defarg_fns. We will need to reprocess this function, and\n+             check for circular dependancies.  */\n+          tree a, b;\n+          \n+          for (a = defarg_depfns, b = TREE_PURPOSE (current); a && b; \n+               a = TREE_CHAIN (a), b = TREE_CHAIN (b))\n+            if (TREE_VALUE (a) != TREE_VALUE (b))\n+              goto different;\n+          if (a || b)\n+            {\n+            different:;\n+              TREE_CHAIN (current) = NULL_TREE;\n+              defarg_fns = chainon (defarg_fns, current);\n+              TREE_PURPOSE (current) = defarg_depfns;\n+            }\n+          else\n+            {\n+              cp_warning_at (\"circular dependency in default args of `%#D'\", defarg_fn);\n+              /* No need to say what else is dependent, as they will be\n+                 picked up in another pass.  */\n+              \n+              /* Immediately repeat, but marked so that we break the loop. */\n+              defarg_fns = current;\n+              TREE_PURPOSE (current) = error_mark_node;\n+            }\n+          defarg_depfns = NULL_TREE;\n+        }\n+      else if (TREE_PURPOSE (current) == error_mark_node)\n+        defarg_fnsdone = tree_cons (NULL_TREE, defarg_fn, defarg_fnsdone);\n+    }\n+}\n+\n+/* After parsing all the default arguments, we must clear any that remain,\n+   which will be part of a circular dependency. */\n+void\n+done_pending_defargs ()\n+{\n+  for (; defarg_fnsdone; defarg_fnsdone = TREE_CHAIN (defarg_fnsdone))\n+    {\n+      tree fn = TREE_VALUE (defarg_fnsdone);\n+      tree parms;\n+      \n+      if (TREE_CODE (fn) == FUNCTION_DECL)\n+        parms = TYPE_ARG_TYPES (TREE_TYPE (fn));\n+      else\n+        parms = TYPE_ARG_TYPES (fn);\n+      for (; parms; parms = TREE_CHAIN (parms))\n+\tif (TREE_PURPOSE (parms)\n+\t    && TREE_CODE (TREE_PURPOSE (parms)) == DEFAULT_ARG)\n+\t  {\n+            my_friendly_assert (!DEFARG_POINTER (TREE_PURPOSE (parms)), 20010107);\n+\t    TREE_PURPOSE (parms) = NULL_TREE;\n+\t  }\n+    }\n+}\n+\n+/* In processing the current default arg, we called FN, but that call\n+   required a default argument of FN, and that had not yet been processed.\n+   Remember FN.  */\n+\n+void\n+unprocessed_defarg_fn (fn)\n+     tree fn;\n+{\n+  defarg_depfns = tree_cons (NULL_TREE, fn, defarg_depfns);\n+}\n+\n+/* Called from the parser to update an element of TYPE_ARG_TYPES for some\n+   FUNCTION_TYPE with the newly parsed version of its default argument, which\n+   was previously digested as text.  */\n+\n+void\n+replace_defarg (arg, init)\n+     tree arg, init;\n+{\n+  if (init == error_mark_node)\n+    TREE_PURPOSE (arg) = error_mark_node;\n+  else\n+    {\n+      if (! processing_template_decl\n+          && ! can_convert_arg (TREE_VALUE (arg), TREE_TYPE (init), init))\n+        cp_pedwarn (\"invalid type `%T' for default argument to `%T'\",\n+  \t    \t    TREE_TYPE (init), TREE_VALUE (arg));\n+      if (!defarg_depfns)\n+        TREE_PURPOSE (arg) = init;\n     }\n }\n "}, {"sha": "4e44d8e95e92d45b40cd43fe50829414b6dc0b78", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc", "patch": "@@ -1,3 +1,12 @@\n+2001-01-11  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/defarg7.C: New test.\n+\t* g++.old-deja/g++.other/defarg8.C: New test.\n+\n+2001-01-11  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.pt/crash64.C: New test.\n+\n 2001-01-11  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.pt/crash63.C: New test."}, {"sha": "cb5a6daeae1f8040b9eb249d1459b377b7daddba", "filename": "gcc/testsuite/g++.old-deja/g++.other/defarg7.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdefarg7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdefarg7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdefarg7.C?ref=96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc", "patch": "@@ -0,0 +1,41 @@\n+// Build don't link:\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 7 Jan 2001 <nathan@codesourcery.com>\n+\n+// Bug 1038. Default args on class members can produce circular dependencies.\n+// Make sure we spot them, and don't depend on a particular ordering.\n+\n+struct A\n+{\n+  static int Foo (int = Baz ());    // WARNING - circular\n+  static int Baz (int = Foo ());    // WARNING - circular\n+};\n+\n+struct Test\n+{\n+  Test (void * = 0);\n+  void set (const Test &arg = Test ());\n+};\n+\n+struct B\n+{\n+  static int Bar (int = Foo (1));\n+  static int Foo (int = Baz ());\n+  static int Baz (int = Foo (1));\n+};\n+\n+int main ()\n+{\n+  Test t;\n+  t.set ();\n+  t.set (t);\n+  B::Bar ();\n+  B::Bar (1);\n+  B::Baz ();\n+  B::Baz (1);\n+  B::Foo ();\n+  B::Foo (1);\n+  \n+  return 0;\n+}"}, {"sha": "7188209cb224fc2171b8cdd05e9c231edca326a3", "filename": "gcc/testsuite/g++.old-deja/g++.other/defarg8.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdefarg8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdefarg8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdefarg8.C?ref=96a1e32dcdf973cab1c308cfcdfcf6f07444b2cc", "patch": "@@ -0,0 +1,24 @@\n+// Build don't link:\n+// Special g++ options: -pedantic-errors -ansi -w\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 7 Jan 2001 <nathan@codesourcery.com>\n+\n+// Bug 1038. Default args on class members can produce circular dependencies.\n+// Make sure we spot them, and don't depend on a particular ordering.\n+\n+struct AA\n+{\n+  static int Foo (int = Baz ());    // ERROR - candidate\n+  static int Baz (int = Foo ());    // ERROR - candidate\n+};\n+\n+int main ()\n+{\n+  AA::Foo ();   // ERROR - no candidate\n+  AA::Foo (1);\n+  AA::Baz ();   // ERROR - no candidate\n+  AA::Baz (1);\n+  \n+  return 0;\n+}"}]}