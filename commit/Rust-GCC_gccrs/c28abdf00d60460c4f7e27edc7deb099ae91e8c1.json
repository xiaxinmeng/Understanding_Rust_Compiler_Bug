{"sha": "c28abdf00d60460c4f7e27edc7deb099ae91e8c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI4YWJkZjAwZDYwNDYwYzRmN2UyN2VkYzdkZWIwOTlhZTkxZThjMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-01-06T03:51:13Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-01-06T03:51:13Z"}, "message": "c-decl.c (c_expand_body): Don't call outlining_inline_function.\n\n        * c-decl.c (c_expand_body): Don't call outlining_inline_function.\n        * integrate.c (output_inline_function): Likewise.\n        * toplev.c (rest_of_compilation): Do it here instead.  Move call\n        to remove_unnecessary_notes after emitting abstract instance.\n        Force an emitted nested function to have its parent emited as well.\n        * dwarf2out.c (loc_descriptor_from_tree): Read mode after checking\n        for null.\n        (rtl_for_decl_location): Do not look at reload data structures\n        before reload has run.\n\n        * semantics.c (expand_body): Revert last change.\n\nFrom-SVN: r48572", "tree": {"sha": "b5435975138444886ee3c592973a8b7f20046641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5435975138444886ee3c592973a8b7f20046641"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c28abdf00d60460c4f7e27edc7deb099ae91e8c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28abdf00d60460c4f7e27edc7deb099ae91e8c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c28abdf00d60460c4f7e27edc7deb099ae91e8c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28abdf00d60460c4f7e27edc7deb099ae91e8c1/comments", "author": null, "committer": null, "parents": [{"sha": "ec6d4fa60cd144a5e5cd1c3bc5e38f630432fef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec6d4fa60cd144a5e5cd1c3bc5e38f630432fef5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec6d4fa60cd144a5e5cd1c3bc5e38f630432fef5"}], "stats": {"total": 78, "additions": 55, "deletions": 23}, "files": [{"sha": "7a4adfcf54c741403da261d69e63fa05a5763491", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28abdf00d60460c4f7e27edc7deb099ae91e8c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28abdf00d60460c4f7e27edc7deb099ae91e8c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c28abdf00d60460c4f7e27edc7deb099ae91e8c1", "patch": "@@ -1,3 +1,15 @@\n+2002-01-05  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-decl.c (c_expand_body): Don't call outlining_inline_function.\n+\t* integrate.c (output_inline_function): Likewise.\n+\t* toplev.c (rest_of_compilation): Do it here instead.  Move call\n+\tto remove_unnecessary_notes after emitting abstract instance.\n+\tForce an emitted nested function to have its parent emited as well.\n+\t* dwarf2out.c (loc_descriptor_from_tree): Read mode after checking\n+\tfor null.\n+\t(rtl_for_decl_location): Do not look at reload data structures\n+\tbefore reload has run.\n+\n 2002-01-05  Kazu Hirata  <kazu@hxi.com>\n \n \t* cse.c: Fix formatting."}, {"sha": "d6e8ac33469b64f0700f0c7fe59502c31bb9fc0e", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28abdf00d60460c4f7e27edc7deb099ae91e8c1/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28abdf00d60460c4f7e27edc7deb099ae91e8c1/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c28abdf00d60460c4f7e27edc7deb099ae91e8c1", "patch": "@@ -6947,11 +6947,6 @@ c_expand_body (fndecl, nested_p, can_defer_p)\n \n   timevar_push (TV_EXPAND);\n \n-  if (DECL_INLINE (fndecl))\n-    /* Do any preparation such as emitting abstract debug info for the\n-       inline before it gets mangled by optimization.  */\n-    (*debug_hooks->outlining_inline_function) (fndecl);\n-\n   if (nested_p)\n     {\n       /* Make sure that we will evaluate variable-sized types involved"}, {"sha": "d7fdc572140c111959ab1e47f233763047c80076", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28abdf00d60460c4f7e27edc7deb099ae91e8c1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28abdf00d60460c4f7e27edc7deb099ae91e8c1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c28abdf00d60460c4f7e27edc7deb099ae91e8c1", "patch": "@@ -1,3 +1,7 @@\n+2002-01-05  Richard Henderson  <rth@redhat.com>\n+\n+        * semantics.c (expand_body): Revert last change.\n+\n 2002-01-04  Jason Merrill  <jason@redhat.com>\n \n \t* class.c (update_vtable_entry_for_fn): Set delta to zero for a"}, {"sha": "f17019cc8ee90e17bdcfa5522c8822ef9e8298e6", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28abdf00d60460c4f7e27edc7deb099ae91e8c1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28abdf00d60460c4f7e27edc7deb099ae91e8c1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=c28abdf00d60460c4f7e27edc7deb099ae91e8c1", "patch": "@@ -2503,11 +2503,6 @@ expand_body (fn)\n      recorded when we finished processing the function.  */\n   lineno = STMT_LINENO (DECL_SAVED_TREE (fn));\n \n-  if (DECL_INLINE (fn))\n-    /* Do any preparation such as emitting abstract debug info for the\n-       inline before it gets mangled by optimization.  */\n-    (*debug_hooks->outlining_inline_function) (fn);\n-\n   /* Generate code for the function.  */\n   genrtl_finish_function (fn);\n "}, {"sha": "3c114848adb61220be1b68d0425ede4ca51a9f5f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28abdf00d60460c4f7e27edc7deb099ae91e8c1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28abdf00d60460c4f7e27edc7deb099ae91e8c1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c28abdf00d60460c4f7e27edc7deb099ae91e8c1", "patch": "@@ -7968,7 +7968,6 @@ loc_descriptor_from_tree (loc, addressp)\n     case PARM_DECL:\n       {\n \trtx rtl = rtl_for_decl_location (loc);\n-\tenum machine_mode mode = GET_MODE (rtl);\n \n \tif (rtl == NULL_RTX)\n \t  return 0;\n@@ -7981,6 +7980,8 @@ loc_descriptor_from_tree (loc, addressp)\n \t  }\n \telse\n \t  {\n+\t    enum machine_mode mode = GET_MODE (rtl);\n+\n \t    if (GET_CODE (rtl) == MEM)\n \t      {\n \t\tindirect_p = 1;\n@@ -8751,7 +8752,18 @@ rtl_for_decl_location (decl)\n   /* Use DECL_RTL as the \"location\" unless we find something better.  */\n   rtl = DECL_RTL_IF_SET (decl);\n \n-  if (TREE_CODE (decl) == PARM_DECL)\n+  /* When generating abstract instances, ignore everything except\n+     constants and symbols living in memory.  */\n+  if (! reload_completed)\n+    {\n+      if (rtl\n+\t  && (CONSTANT_P (rtl)\n+\t      || (GET_CODE (rtl) == MEM\n+\t          && CONSTANT_P (XEXP (rtl, 0)))))\n+\treturn rtl;\n+      rtl = NULL_RTX;\n+    }\n+  else if (TREE_CODE (decl) == PARM_DECL)\n     {\n       if (rtl == NULL_RTX || is_pseudo_reg (rtl))\n \t{\n@@ -8816,7 +8828,7 @@ rtl_for_decl_location (decl)\n   /* A variable with no DECL_RTL but a DECL_INITIAL is a compile-time constant,\n      and will have been substituted directly into all expressions that use it.\n      C does not have such a concept, but C++ and other languages do.  */\n-  else if (DECL_INITIAL (decl))\n+  else if (TREE_CODE (decl) == VAR_DECL && DECL_INITIAL (decl))\n     rtl = expand_expr (DECL_INITIAL (decl), NULL_RTX, VOIDmode,\n \t\t       EXPAND_INITIALIZER);\n "}, {"sha": "05717564181f06401067e795b6450ceac2d7099c", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28abdf00d60460c4f7e27edc7deb099ae91e8c1/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28abdf00d60460c4f7e27edc7deb099ae91e8c1/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=c28abdf00d60460c4f7e27edc7deb099ae91e8c1", "patch": "@@ -1,6 +1,6 @@\n /* Procedure integration for GCC.\n    Copyright (C) 1988, 1991, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GCC.\n@@ -2950,10 +2950,6 @@ output_inline_function (fndecl)\n       debug_hooks = &do_nothing_debug_hooks;\n     }\n \n-  /* Do any preparation, such as emitting abstract debug info for the inline\n-     before it gets mangled by optimization.  */\n-  (*debug_hooks->outlining_inline_function) (fndecl);\n-\n   /* Compile this function all the way down to assembly code.  As a\n      side effect this destroys the saved RTL representation, but\n      that's okay, because we don't need to inline this anymore.  */"}, {"sha": "61054262b39c05dede006451cae96db32692cce0", "filename": "gcc/toplev.c", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28abdf00d60460c4f7e27edc7deb099ae91e8c1/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28abdf00d60460c4f7e27edc7deb099ae91e8c1/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c28abdf00d60460c4f7e27edc7deb099ae91e8c1", "patch": "@@ -2363,11 +2363,6 @@ rest_of_compilation (decl)\n   if (!cfun->x_whole_function_mode_p)\n     identify_blocks ();\n \n-  /* Then remove any notes we don't need.  That will make iterating\n-     over the instruction sequence faster, and allow the garbage\n-     collector to reclaim the memory used by the notes.  */\n-  remove_unnecessary_notes ();\n-\n   /* In function-at-a-time mode, we do not attempt to keep the BLOCK\n      tree in sensible shape.  So, we just recalculate it here.  */\n   if (cfun->x_whole_function_mode_p)\n@@ -2505,6 +2500,29 @@ rest_of_compilation (decl)\n \tgoto exit_rest_of_compilation;\n     }\n \n+  /* If we're emitting a nested function, make sure its parent gets\n+     emitted as well.  Doing otherwise confuses debug info.  */\n+  {\n+    tree parent;\n+    for (parent = DECL_CONTEXT (current_function_decl);\n+\t parent != NULL_TREE;\n+\t parent = get_containing_scope (parent))\n+      if (TREE_CODE (parent) == FUNCTION_DECL)\n+\tTREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (parent)) = 1;\n+  }\n+\n+  /* We are now committed to emitting code for this function.  Do any\n+     preparation, such as emitting abstract debug info for the inline\n+     before it gets mangled by optimization.  */\n+  if (DECL_INLINE (decl))\n+    (*debug_hooks->outlining_inline_function) (decl);\n+\n+  /* Remove any notes we don't need.  That will make iterating\n+     over the instruction sequence faster, and allow the garbage\n+     collector to reclaim the memory used by the notes.  */\n+  remove_unnecessary_notes ();\n+  reorder_blocks ();\n+\n   ggc_collect ();\n \n   /* Initialize some variables used by the optimizers.  */"}]}