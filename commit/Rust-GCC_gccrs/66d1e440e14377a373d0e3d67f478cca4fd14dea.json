{"sha": "66d1e440e14377a373d0e3d67f478cca4fd14dea", "node_id": "C_kwDOANBUbNoAKDY2ZDFlNDQwZTE0Mzc3YTM3M2QwZTNkNjdmNDc4Y2NhNGZkMTRkZWE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-04-30T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-04-30T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "384a3ab49c9745defd0e3d0ea3975d7d047bd4c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/384a3ab49c9745defd0e3d0ea3975d7d047bd4c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66d1e440e14377a373d0e3d67f478cca4fd14dea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d1e440e14377a373d0e3d67f478cca4fd14dea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66d1e440e14377a373d0e3d67f478cca4fd14dea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d1e440e14377a373d0e3d67f478cca4fd14dea/comments", "author": null, "committer": null, "parents": [{"sha": "e9d2adc17d0dbe46db67e1b618dea888d5c7aca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d2adc17d0dbe46db67e1b618dea888d5c7aca3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9d2adc17d0dbe46db67e1b618dea888d5c7aca3"}], "stats": {"total": 372, "additions": 371, "deletions": 1}, "files": [{"sha": "a9a307db9f9535ca2a92c5e38574c35c9577bad7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d1e440e14377a373d0e3d67f478cca4fd14dea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d1e440e14377a373d0e3d67f478cca4fd14dea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66d1e440e14377a373d0e3d67f478cca4fd14dea", "patch": "@@ -1,3 +1,169 @@\n+2022-04-29  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/100413\n+\t* cgraph.cc (cgraph_node::remove): Release body of the node this\n+\tis clone_of if appropriate.\n+\n+2022-04-29  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/51954\n+\t* config/i386/i386.md (adcl/neg -> sbb peephole): New peephole2.\n+\n+2022-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-expr.cc (is_gimple_condexpr): Adjust comment.\n+\t(canonicalize_cond_expr_cond): Move here from gimple.cc,\n+\tallow both COND_EXPR and GIMPLE_COND forms.\n+\t* gimple-expr.h (canonicalize_cond_expr_cond): Declare.\n+\t* gimple.cc (canonicalize_cond_expr_cond): Remove here.\n+\t* gimple.h (canonicalize_cond_expr_cond): Likewise.\n+\t* gimple-loop-versioning.cc (loop_versioning::version_loop):\n+\tUse is_gimple_condexpr_for_cond.\n+\t* tree-parloops.cc (gen_parallel_loop): Likewise.\n+\t* tree-ssa-ifcombine.cc (ifcombine_ifandif): Check for\n+\ta proper cond expr after canonicalize_cond_expr_cond.\n+\tUse is_gimple_condexpr_for_cond where appropriate.\n+\t* tree-ssa-loop-manip.cc (determine_exit_conditions): Likewise.\n+\t* tree-vect-loop-manip.cc (slpeel_add_loop_guard): Likewise.\n+\n+2022-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-iterator.h (gsi_after_labels): Add overload for\n+\tgimple_seq.\n+\t(gsi_start_1): Rename to gsi_start and take a reference.\n+\t(gsi_last_1): Likewise.\n+\t* gimple-iterator.cc (gsi_for_stmt): Use gsi_start.\n+\t* omp-low.cc (lower_rec_input_clauses): Likewise.\n+\t(lower_omp_scan): Likewise.\n+\n+2022-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105431\n+\t* tree-ssa-math-opts.cc (powi_as_mults_1): Make n unsigned.\n+\t(powi_as_mults): Use absu_hwi.\n+\t(gimple_expand_builtin_powi): Remove now pointless n != -n\n+\tcheck.\n+\n+2022-04-29  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (empty_range_varying): Move to range-op.h.\n+\t(range_true): Move to range.h.\n+\t(range_false): Same.\n+\t(range_true_and_false): Same.\n+\t(enum bool_range_state): Move to range-op.h.\n+\t(relop_early_resolve): Same.\n+\t(operator_equal::op1_op2_relation): Abstract code to...\n+\t(equal_op1_op2_relation): ...here.\n+\t(operator_not_equal::op1_op2_relation): Abstract code to...\n+\t(not_equal_op1_op2_relation): ...here.\n+\t(operator_lt::op1_op2_relation): Abstract code to...\n+\t(lt_op1_op2_relation): ...here.\n+\t(operator_le::op1_op2_relation): Abstract code to...\n+\t(le_op1_op2_relation): ...here.\n+\t(operator_gt::op1_op2_relation): Abstract code to...\n+\t(gt_op1_op2_relation): ...here.\n+\t(operator_ge::op1_op2_relation): Abstract code to...\n+\t(ge_op1_op2_relation): ...here.\n+\t(class range_op_table): Move to range-op.h.\n+\t* range-op.h (equal_op1_op2_relation): Moved from range-op.cc.\n+\t(not_equal_op1_op2_relation): Same.\n+\t(lt_op1_op2_relation): Same.\n+\t(le_op1_op2_relation): Same.\n+\t(gt_op1_op2_relation): Same.\n+\t(ge_op1_op2_relation): Same.\n+\t(enum bool_range_state): Same.\n+\t(get_bool_state): Same.\n+\t(empty_range_varying): Same.\n+\t(relop_early_resolve): Same.\n+\t(class range_op_table): Same.\n+\t* range.h (range_true): Same.\n+\t(range_false): Same.\n+\t(range_true_and_false): Same.\n+\n+2022-04-29  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-fold.cc (size_must_be_zero_p): Use reference\n+\tinstead of pointer\n+\t* gimple-ssa-evrp-analyze.cc\n+\t(evrp_range_analyzer::record_ranges_from_incoming_edge): Rename\n+\tintersect to legacy_verbose_intersect.\n+\t* ipa-cp.cc (ipcp_vr_lattice::meet_with_1): Use reference instead\n+\tof pointer.\n+\t* tree-ssa-dom.cc (dom_jt_simplifier::simplify): Use value_range\n+\tinstead of value_range_equiv.\n+\t* tree-vrp.cc (extract_range_from_plus_minus_expr): Use reference\n+\tinstead of pointer.\n+\t(find_case_label_range): Same.\n+\t* value-range-equiv.cc (value_range_equiv::intersect): Rename to...\n+\t(value_range_equiv::legacy_verbose_intersect): ...this.\n+\t(value_range_equiv::union_): Rename to...\n+\t(value_range_equiv::legacy_verbose_union_): ...this.\n+\t* value-range-equiv.h (class value_range_equiv): Rename union and\n+\tintersect to legacy_verbose_{intersect,union}.\n+\t* value-range.cc (irange::union_): Rename to...\n+\t(irange::legacy_verbose_union_): ...this.\n+\t(irange::intersect): Rename to...\n+\t(irange::legacy_verbose_intersect): ...this.\n+\t* value-range.h (irange::union_): Rename union_ to\n+\tlegacy_verbose_union.\n+\t(irange::intersect): Rename intersect to legacy_verbose_intersect.\n+\t* vr-values.cc (vr_values::update_value_range): Same.\n+\t(vr_values::extract_range_for_var_from_comparison_expr): Same.\n+\t(vr_values::extract_range_from_cond_expr): Rename union_ to\n+\tlegacy_verbose_union.\n+\t(vr_values::extract_range_from_phi_node): Same.\n+\n+2022-04-29  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-ssa-evrp-analyze.cc\n+\t(evrp_range_analyzer::set_ssa_range_info): Use *range_info methods\n+\tthat take a range.\n+\t* gimple-ssa-sprintf.cc (try_substitute_return_value): Same.\n+\t* ipa-prop.cc (ipcp_update_vr): Same.\n+\t* tree-inline.cc (remap_ssa_name): Same.\n+\t* tree-ssa-copy.cc (fini_copy_prop): Same.\n+\t* tree-ssa-math-opts.cc (optimize_spaceship): Same.\n+\t* tree-ssa-phiopt.cc (replace_phi_edge_with_variable): Same.\n+\t* tree-ssa-pre.cc (insert_into_preds_of_block): Same.\n+\t* tree-ssa-sccvn.cc (eliminate_dom_walker::eliminate_stmt): Same.\n+\t* tree-ssa-strlen.cc (set_strlen_range): Same.\n+\t(strlen_pass::handle_builtin_string_cmp): Same.\n+\t* tree-ssanames.cc (set_range_info): Make static.\n+\t(duplicate_ssa_name_range_info): Make static and add a new variant\n+\tcalling the static.\n+\t* tree-ssanames.h (set_range_info): Remove version taking wide ints.\n+\t(duplicate_ssa_name_range_info): Remove version taking a\n+\trange_info_def and replace with a version taking SSA names.\n+\t* tree-vect-loop-manip.cc (vect_gen_vector_loop_niters): Use *range_info methods\n+\tthat take a range.\n+\t(vect_do_peeling): Same.\n+\t* tree-vrp.cc (vrp_asserts::remove_range_assertions): Same.\n+\t* vr-values.cc (simplify_truth_ops_using_ranges): Same.\n+\n+2022-04-29  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.h (irange::irange): Use set_undefined.\n+\n+2022-04-29  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-cache.h (non_null_ref::adjust_range): Do not use\n+\tirange::intersect (wide_int, wide_int).\n+\t* gimple-range-fold.cc (adjust_pointer_diff_expr): Same.\n+\t(adjust_imagpart_expr): Same.\n+\t* value-range.h (irange::intersect (wide_int, wide_int)): Make\n+\tprivate.\n+\n+2022-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104322\n+\t* tree-vect-loop.cc (vectorizable_reduction): Remove dead code.\n+\n+2022-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/105376\n+\t* tree.cc (build_real): Special case dconst* arguments\n+\tfor decimal floating point types.\n+\n 2022-04-28  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* doc/gcov.texi (Profiling and Test Coverage in Freestanding"}, {"sha": "bbfd1ea75c252993bc00fe4b92c0d6a564531f6f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d1e440e14377a373d0e3d67f478cca4fd14dea/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d1e440e14377a373d0e3d67f478cca4fd14dea/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=66d1e440e14377a373d0e3d67f478cca4fd14dea", "patch": "@@ -1 +1 @@\n-20220429\n+20220430"}, {"sha": "fc01eba671b061235bb8c19886c2d9d816f4f82f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d1e440e14377a373d0e3d67f478cca4fd14dea/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d1e440e14377a373d0e3d67f478cca4fd14dea/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=66d1e440e14377a373d0e3d67f478cca4fd14dea", "patch": "@@ -1,3 +1,7 @@\n+2022-04-29  Martin Liska  <mliska@suse.cz>\n+\n+\t* gnatvsn.ads: Bump Library_Version to 13.\n+\n 2022-04-27  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* tracebak.c: Add support for ARM RTEMS. Add support for RTEMS to PPC"}, {"sha": "572ff76cfe0fc19de253c23945efaf3277c27132", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d1e440e14377a373d0e3d67f478cca4fd14dea/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d1e440e14377a373d0e3d67f478cca4fd14dea/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=66d1e440e14377a373d0e3d67f478cca4fd14dea", "patch": "@@ -1,3 +1,93 @@\n+2022-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91618\n+\tPR c++/96604\n+\t* friend.cc (do_friend): Call check_explicit_specialization here.\n+\t* decl.cc (grokdeclarator): Not here.\n+\t* decl2.cc (check_classfn): Or here.\n+\n+2022-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/104470\n+\t* cp-tree.h (enum tsubst_flags): Add tf_dguide.\n+\t* pt.cc (tsubst_aggr_type): Check it.\n+\t(tsubst_baselink, tsubst_copy): Check it.\n+\t(maybe_dependent_member_ref): Check it.\n+\t(instantiate_alias_template): Handle it.\n+\t(build_deduction_guide): Set it.\n+\n+2022-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/82980\n+\t* lambda.cc (type_deducible_expression_p): Allow more types.\n+\n+2022-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.cc (cp_finish_decl): Only consider auto for vars.\n+\n+2022-04-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/67048\n+\t* parser.cc (cp_parser_enum_specifier): Warn about empty unnamed enum\n+\tonly when it's followed by a semicolon.\n+\n+2022-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/80351\n+\t* decl.cc (cp_finish_decl): Check completeness of deduced type.\n+\n+2022-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/102987\n+\t* error.cc (dump_decl) [USING_DECL]: Respect flags.\n+\n+2022-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* error.cc (dump_decl): Check TFF_UNQUALIFIED_NAME.\n+\n+2022-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/104319\n+\t* parser.cc (cp_parser_template_argument): Treat >= like C++98 >>\n+\tafter a type id by setting maybe_type_id and aborting tentative\n+\tparse.\n+\t(cp_parser_enclosed_template_argument_list): Handle\n+\tCPP_GREATER_EQ like misspelled CPP_GREATER CPP_RQ and\n+\tCPP_RSHIFT_EQ like misspelled CPP_GREATER CPP_GREATER_EQ\n+\tor CPP_RSHIFT CPP_EQ or CPP_GREATER CPP_GREATER CPP_EQ.\n+\t(cp_parser_next_token_ends_template_argument_p): Return true\n+\talso for CPP_GREATER_EQ and CPP_RSHIFT_EQ.\n+\n+2022-04-29  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/105426\n+\t* coroutines.cc (register_local_var_uses): Allow promotion of unnamed\n+\ttemporaries to coroutine frame copies.\n+\n+2022-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* semantics.cc (check_trait_type): Don't check completeness\n+\tof element type of array of unknown bound.\n+\n+2022-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/102651\n+\tPR c++/49387\n+\t* rtti.cc (get_tinfo_decl_direct): Don't complete_type.\n+\t(emit_tinfo_decl): Update tdesc type if needed.\n+\n+2022-04-29  Zhao Wei Liew  <zhaoweiliew@gmail.com>\n+\n+\tPR c++/25689\n+\t* call.cc (extract_call_expr): Return a NULL_TREE on failure\n+\tinstead of asserting.\n+\t(build_new_method_call): Suppress -Wparentheses diagnostic for\n+\tMODIFY_EXPR.\n+\t* semantics.cc (is_assignment_op_expr_p): Add function to check\n+\tif an expression is a call to an op= operator expression.\n+\t(maybe_convert_cond): Handle the case of a op= operator expression\n+\tfor the -Wparentheses diagnostic.\n+\n 2022-04-28  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/105425"}, {"sha": "fa58d47461cb36c76482463c4cf3f3a451db6d8b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d1e440e14377a373d0e3d67f478cca4fd14dea/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d1e440e14377a373d0e3d67f478cca4fd14dea/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=66d1e440e14377a373d0e3d67f478cca4fd14dea", "patch": "@@ -1,3 +1,7 @@\n+2022-04-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* gfortran.texi: Fix exchanged period and letter.\n+\n 2022-04-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* gfortran.texi: Mention r16_ieee and r16_ibm."}, {"sha": "1423689c6537efb56f73a3725436ff983da9825e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d1e440e14377a373d0e3d67f478cca4fd14dea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d1e440e14377a373d0e3d67f478cca4fd14dea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=66d1e440e14377a373d0e3d67f478cca4fd14dea", "patch": "@@ -1,3 +1,91 @@\n+2022-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/104470\n+\t* g++.dg/cpp2a/explicit11.C: Second example also ill-formed.\n+\t* g++.dg/cpp2a/class-deduction-alias12.C: New test.\n+\n+2022-04-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/67048\n+\t* g++.dg/cpp0x/enum42.C: New test.\n+\n+2022-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/80351\n+\t* g++.dg/cpp0x/constexpr-77482.C: Adjust message.\n+\t* g++.dg/cpp1y/auto-fn27.C: Likewise.\n+\t* g++.dg/cpp1y/lambda-generic-variadic22.C: Likewise.\n+\t* g++.dg/cpp1z/decomp54.C: Likewise.\n+\t* g++.dg/cpp0x/initlist-const1.C: New test.\n+\t* g++.dg/warn/Wunused-var-37.C: New test.\n+\t* g++.dg/warn/Wunused-var-38.C: New test.\n+\t* g++.dg/warn/Wunused-var-39.C: New test.\n+\n+2022-04-29  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/100413\n+\t* g++.dg/ipa/pr100413.C: New test.\n+\n+2022-04-29  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR tree-optimization/105219\n+\t* gcc.dg/vect/pr105219.c: Add aarch64 target option.\n+\n+2022-04-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/83596\n+\t* g++.dg/cpp1z/nontype5.C: New test.\n+\n+2022-04-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/78244\n+\t* g++.dg/cpp0x/Wnarrowing20.C: New test.\n+\n+2022-04-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/71424\n+\t* g++.dg/cpp0x/initlist-array15.C: New test.\n+\n+2022-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/102987\n+\t* g++.dg/diagnostic/using1.C: Check pretty-printing.\n+\n+2022-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/alias-decl-1.C: Expect qualified name.\n+\n+2022-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/104319\n+\t* g++.dg/parse/template28.C: Adjust expected diagnostics.\n+\t* g++.dg/parse/template30.C: New test.\n+\n+2022-04-29  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/51954\n+\t* gcc.target/i386/pr51954.c: New test.\n+\n+2022-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/105376\n+\t* gcc.dg/pr105376.c: New testcase.\n+\n+2022-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/ext/unary_trait_incomplete.C: Adjust.\n+\n+2022-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/102651\n+\tPR c++/49387\n+\t* g++.dg/rtti/typeid-complete1.C: New test.\n+\n+2022-04-29  Zhao Wei Liew  <zhaoweiliew@gmail.com>\n+\n+\tPR c++/25689\n+\t* g++.dg/warn/Wparentheses-31.C: New test.\n+\n 2022-04-28  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* gcc.dg/gcov-info-to-gcda.c: Test __gcov_filename_to_gcfn()."}, {"sha": "323ebc9f6cfd27c7f251700e4ed70e7f2f5601bd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d1e440e14377a373d0e3d67f478cca4fd14dea/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d1e440e14377a373d0e3d67f478cca4fd14dea/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=66d1e440e14377a373d0e3d67f478cca4fd14dea", "patch": "@@ -1,3 +1,21 @@\n+2022-04-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/105417\n+\t* config/abi/post/powerpc64-linux-gnu/baseline_symbols.txt:\n+\tRegenerate.\n+\t* src/c++11/compatibility-ldbl-alt128.cc [_GLIBCXX_USE_DUAL_ABI]:\n+\tDefine __gnu_ieee128::num_get<C>::_M_extract_int[abi:cxx11]<I>\n+\tsymbols as aliases for corresponding symbols without abi-tag.\n+\n+2022-04-29  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/abi/post/i386-solaris/baseline_symbols.txt: Regenerate.\n+\t* config/abi/post/i386-solaris/amd64/baseline_symbols.txt:\n+\tLikewise.\n+\t* config/abi/post/sparc-solaris/baseline_symbols.txt: Likewise.\n+\t* config/abi/post/sparc-solaris/sparcv9/baseline_symbols.txt:\n+\tLikewise.\n+\n 2022-04-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/99290"}]}