{"sha": "0fe03ac31859b5cdc6760e605dc17ffbccfe1860", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZlMDNhYzMxODU5YjVjZGM2NzYwZTYwNWRjMTdmZmJjY2ZlMTg2MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-10-16T11:21:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-10-16T11:21:20Z"}, "message": "re PR debug/54796 (Non-addressable stack parameter debug quality regression)\n\n\tPR debug/54796\n\t* rtl.h: Document jump flag on VALUE.\n\t* cselib.h (cselib_set_value_sp_based,\n\tcselib_sp_based_value_p): New prototypes.\n\t* alias.c (find_base_term): For cselib_sp_based_value_p\n\treturn static_reg_base_value[STACK_POINTER_REGNUM].\n\t* cselib.c (SP_BASED_VALUE_P): Define.\n\t(cselib_set_value_sp_based, cselib_sp_based_value_p): New functions.\n\t* var-tracking.c (add_stores): Call cselib_set_value_sp_based\n\tfor not yet preserved VALUEs of sp on sp assignments if\n\thard_frame_pointer_adjustment != -1.\n\t(vt_initialize): When setting hard_frame_pointer_adjustment,\n\tdisassociate sp from its previous value and call\n\tcselib_set_value_sp_based on a new VALUE created for sp.\n\n\t* gcc.dg/guality/pr54796.c: New test.\n\nFrom-SVN: r192494", "tree": {"sha": "9ba40d70d5d1df4a70c9881287bb8ea4ea5c49b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ba40d70d5d1df4a70c9881287bb8ea4ea5c49b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fe03ac31859b5cdc6760e605dc17ffbccfe1860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe03ac31859b5cdc6760e605dc17ffbccfe1860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe03ac31859b5cdc6760e605dc17ffbccfe1860", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cded4e9ed7d9f793d31303def53d999890a0f5a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cded4e9ed7d9f793d31303def53d999890a0f5a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cded4e9ed7d9f793d31303def53d999890a0f5a5"}], "stats": {"total": 90, "additions": 89, "deletions": 1}, "files": [{"sha": "73c415632e6e12e8fcb77ca0b559ad064c9da986", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fe03ac31859b5cdc6760e605dc17ffbccfe1860", "patch": "@@ -1,5 +1,20 @@\n 2012-10-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/54796\n+\t* rtl.h: Document jump flag on VALUE.\n+\t* cselib.h (cselib_set_value_sp_based,\n+\tcselib_sp_based_value_p): New prototypes.\n+\t* alias.c (find_base_term): For cselib_sp_based_value_p\n+\treturn static_reg_base_value[STACK_POINTER_REGNUM].\n+\t* cselib.c (SP_BASED_VALUE_P): Define.\n+\t(cselib_set_value_sp_based, cselib_sp_based_value_p): New functions.\n+\t* var-tracking.c (add_stores): Call cselib_set_value_sp_based\n+\tfor not yet preserved VALUEs of sp on sp assignments if\n+\thard_frame_pointer_adjustment != -1.\n+\t(vt_initialize): When setting hard_frame_pointer_adjustment,\n+\tdisassociate sp from its previous value and call\n+\tcselib_set_value_sp_based on a new VALUE created for sp.\n+\n \tPR tree-optimization/54889\n \t* tree-vect-stmts.c (vectorizable_load): Add VIEW_CONVERT_EXPR if\n \tARRAY_REF newref doesn't have compatible type with vectype element"}, {"sha": "244ca520c92694095f83c9dd1a071c256698248c", "filename": "gcc/alias.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=0fe03ac31859b5cdc6760e605dc17ffbccfe1860", "patch": "@@ -1640,6 +1640,9 @@ find_base_term (rtx x)\n       if (!val)\n \treturn ret;\n \n+      if (cselib_sp_based_value_p (val))\n+\treturn static_reg_base_value[STACK_POINTER_REGNUM];\n+\n       f = val->locs;\n       /* Temporarily reset val->locs to avoid infinite recursion.  */\n       val->locs = NULL;"}, {"sha": "1f9f97efc5da59abcec169212dd2f7fc668ebd2f", "filename": "gcc/cselib.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=0fe03ac31859b5cdc6760e605dc17ffbccfe1860", "patch": "@@ -210,6 +210,9 @@ void (*cselib_record_sets_hook) (rtx insn, struct cselib_set *sets,\n #define PRESERVED_VALUE_P(RTX) \\\n   (RTL_FLAG_CHECK1(\"PRESERVED_VALUE_P\", (RTX), VALUE)->unchanging)\n \n+#define SP_BASED_VALUE_P(RTX) \\\n+  (RTL_FLAG_CHECK1(\"SP_BASED_VALUE_P\", (RTX), VALUE)->jump)\n+\n \f\n \n /* Allocate a struct elt_list and fill in its two elements with the\n@@ -739,6 +742,24 @@ cselib_preserve_only_values (void)\n   gcc_assert (first_containing_mem == &dummy_val);\n }\n \n+/* Arrange for a value to be marked as based on stack pointer\n+   for find_base_term purposes.  */\n+\n+void\n+cselib_set_value_sp_based (cselib_val *v)\n+{\n+  SP_BASED_VALUE_P (v->val_rtx) = 1;\n+}\n+\n+/* Test whether a value is based on stack pointer for\n+   find_base_term purposes.  */\n+\n+bool\n+cselib_sp_based_value_p (cselib_val *v)\n+{\n+  return SP_BASED_VALUE_P (v->val_rtx);\n+}\n+\n /* Return the mode in which a register was last set.  If X is not a\n    register, return its mode.  If the mode in which the register was\n    set is not known, or the value was already clobbered, return"}, {"sha": "95fdbf7a5d53d384d6463d4b08ad77388c028818", "filename": "gcc/cselib.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/gcc%2Fcselib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/gcc%2Fcselib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.h?ref=0fe03ac31859b5cdc6760e605dc17ffbccfe1860", "patch": "@@ -99,6 +99,8 @@ extern void cselib_preserve_only_values (void);\n extern void cselib_preserve_cfa_base_value (cselib_val *, unsigned int);\n extern void cselib_add_permanent_equiv (cselib_val *, rtx, rtx);\n extern bool cselib_have_permanent_equivalences (void);\n+extern void cselib_set_value_sp_based (cselib_val *);\n+extern bool cselib_sp_based_value_p (cselib_val *);\n \n extern void dump_cselib_table (FILE *);\n "}, {"sha": "a38924d253782ad20e1ca6fd2268bef98da053e0", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=0fe03ac31859b5cdc6760e605dc17ffbccfe1860", "patch": "@@ -267,7 +267,8 @@ struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n      1 in a CALL_INSN if it is a sibling call.\n      1 in a SET that is for a return.\n      In a CODE_LABEL, part of the two-bit alternate entry field.\n-     1 in a CONCAT is VAL_EXPR_IS_COPIED in var-tracking.c.  */\n+     1 in a CONCAT is VAL_EXPR_IS_COPIED in var-tracking.c.\n+     1 in a VALUE is SP_BASED_VALUE_P in cselib.c.  */\n   unsigned int jump : 1;\n   /* In a CODE_LABEL, part of the two-bit alternate entry field.\n      1 in a MEM if it cannot trap."}, {"sha": "ea1e5ca1969b50a0ed34e8606f5fcf43cf334458", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0fe03ac31859b5cdc6760e605dc17ffbccfe1860", "patch": "@@ -1,5 +1,8 @@\n 2012-10-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/54796\n+\t* gcc.dg/guality/pr54796.c: New test.\n+\n \tPR tree-optimization/54889\n \t* gfortran.dg/pr54889.f90: New test.\n "}, {"sha": "f58e5a02cc6d404723c45c8b5ec9c982d1fa7759", "filename": "gcc/testsuite/gcc.dg/guality/pr54796.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54796.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54796.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54796.c?ref=0fe03ac31859b5cdc6760e605dc17ffbccfe1860", "patch": "@@ -0,0 +1,25 @@\n+/* PR debug/54796 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+__attribute__((noinline, noclone)) void\n+bar (char *a, int b)\n+{\n+  __asm volatile (\"\" : \"+r\" (a), \"+r\" (b) : : \"memory\");\n+}\n+\n+__attribute__((noinline, noclone)) void\n+foo (int a, int b)\n+{\n+  int c = a;\n+  char d[b];\t/* { dg-final { gdb-test 17 \"a\" \"5\" } } */\n+  bar (d, 2);\t/* { dg-final { gdb-test 17 \"b\" \"6\" } } */\n+  bar (d, 4);\t/* { dg-final { gdb-test 17 \"c\" \"5\" } } */\n+}\n+\n+int\n+main ()\n+{\n+  foo (5, 6);\n+  return 0;\n+}"}, {"sha": "65116c287e92c767fc5aba7cac2cec433fb02ca7", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe03ac31859b5cdc6760e605dc17ffbccfe1860/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=0fe03ac31859b5cdc6760e605dc17ffbccfe1860", "patch": "@@ -5769,6 +5769,11 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n \n   resolve = preserve = !cselib_preserved_value_p (v);\n \n+  if (loc == stack_pointer_rtx\n+      && hard_frame_pointer_adjustment != -1\n+      && preserve)\n+    cselib_set_value_sp_based (v);\n+\n   nloc = replace_expr_with_values (oloc);\n   if (nloc)\n     oloc = nloc;\n@@ -9867,6 +9872,19 @@ vt_initialize (void)\n \t\t    {\n \t\t      vt_init_cfa_base ();\n \t\t      hard_frame_pointer_adjustment = fp_cfa_offset;\n+\t\t      /* Disassociate sp from fp now.  */\n+\t\t      if (MAY_HAVE_DEBUG_INSNS)\n+\t\t\t{\n+\t\t\t  cselib_val *v;\n+\t\t\t  cselib_invalidate_rtx (stack_pointer_rtx);\n+\t\t\t  v = cselib_lookup (stack_pointer_rtx, Pmode, 1,\n+\t\t\t\t\t     VOIDmode);\n+\t\t\t  if (v && !cselib_preserved_value_p (v))\n+\t\t\t    {\n+\t\t\t      cselib_set_value_sp_based (v);\n+\t\t\t      preserve_value (v);\n+\t\t\t    }\n+\t\t\t}\n \t\t    }\n \t\t}\n \t    }"}]}