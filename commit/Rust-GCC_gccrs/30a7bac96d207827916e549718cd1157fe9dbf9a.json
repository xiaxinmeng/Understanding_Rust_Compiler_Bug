{"sha": "30a7bac96d207827916e549718cd1157fe9dbf9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBhN2JhYzk2ZDIwNzgyNzkxNmU1NDk3MThjZDExNTdmZTlkYmY5YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-07-10T08:26:00Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-07-10T08:26:00Z"}, "message": "Zap now unused builtin_mul_widen_even/odd target hooks\n\n        * target.def (builtin_mul_widen_even, builtin_mul_widen_odd): Remove.\n        * system.h (TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN): Poison.\n        (TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD): Poison.\n        * config/i386/i386.c (IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V4SI): Remove.\n        (IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V8SI): Remove.\n        (IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V4SI): Remove.\n        (IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V8SI): Remove.\n        (IX86_BUILTIN_VEC_WIDEN_SMUL_EVEN_V4SI): Remove.\n        (IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V4SI): Remove.\n        (IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V8SI): Remove.\n        (bdesc_args): Remove entries to match.\n        (ix86_builtin_mul_widen_even, ix86_builtin_mul_widen_odd): Remove.\n        (TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN): Remove.\n        (TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD): Remove.\n        * config/rs6000/rs6000.c (rs6000_builtin_mul_widen_even): Remove.\n        (rs6000_builtin_mul_widen_odd): Remove.\n        (TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN): Remove.\n        (TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD): Remove.\n        * config/spu/spu.c (spu_builtin_mul_widen_even): Remove.\n        (spu_builtin_mul_widen_odd): Remove.\n        (TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN): Remove.\n        (TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD): Remove.\n        * doc/tm.texi.in: Don't document the removed hooks.\n\nFrom-SVN: r189409", "tree": {"sha": "73a829a24b50697296c2f3ee51f084a5b5e19a64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73a829a24b50697296c2f3ee51f084a5b5e19a64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30a7bac96d207827916e549718cd1157fe9dbf9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a7bac96d207827916e549718cd1157fe9dbf9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a7bac96d207827916e549718cd1157fe9dbf9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a7bac96d207827916e549718cd1157fe9dbf9a/comments", "author": null, "committer": null, "parents": [{"sha": "6ae6116f1985d4b1645d173776e3d73f2010c939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae6116f1985d4b1645d173776e3d73f2010c939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ae6116f1985d4b1645d173776e3d73f2010c939"}], "stats": {"total": 255, "additions": 27, "deletions": 228}, "files": [{"sha": "8d0584764c689f3d7f3bffcf4b1ee6353c8ecec3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a7bac96d207827916e549718cd1157fe9dbf9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a7bac96d207827916e549718cd1157fe9dbf9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30a7bac96d207827916e549718cd1157fe9dbf9a", "patch": "@@ -1,5 +1,29 @@\n 2012-07-10  Richard Henderson  <rth@redhat.com>\n \n+\t* target.def (builtin_mul_widen_even, builtin_mul_widen_odd): Remove.\n+\t* system.h (TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN): Poison.\n+\t(TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD): Poison.\n+\t* config/i386/i386.c (IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V4SI): Remove.\n+\t(IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V8SI): Remove.\n+\t(IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V4SI): Remove.\n+\t(IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V8SI): Remove.\n+\t(IX86_BUILTIN_VEC_WIDEN_SMUL_EVEN_V4SI): Remove.\n+\t(IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V4SI): Remove.\n+\t(IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V8SI): Remove.\n+\t(bdesc_args): Remove entries to match.\n+\t(ix86_builtin_mul_widen_even, ix86_builtin_mul_widen_odd): Remove.\n+\t(TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN): Remove.\n+\t(TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD): Remove.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_mul_widen_even): Remove.\n+\t(rs6000_builtin_mul_widen_odd): Remove.\n+\t(TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN): Remove.\n+\t(TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD): Remove.\n+\t* config/spu/spu.c (spu_builtin_mul_widen_even): Remove.\n+\t(spu_builtin_mul_widen_odd): Remove.\n+\t(TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN): Remove.\n+\t(TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD): Remove.\n+\t* doc/tm.texi.in: Don't document the removed hooks.\n+\n \t* tree-vect-stmts.c (supportable_widening_operation): Expand\n \tWIDEN_MULT_EXPR via VEC_WIDEN_MULT_EVEN/ODD_EXPR if possible.\n "}, {"sha": "23abe0126c5b5b808828d69397cab5e1e20e2891", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a7bac96d207827916e549718cd1157fe9dbf9a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a7bac96d207827916e549718cd1157fe9dbf9a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=30a7bac96d207827916e549718cd1157fe9dbf9a", "patch": "@@ -25754,14 +25754,6 @@ enum ix86_builtins\n   IX86_BUILTIN_CPYSGNPS256,\n   IX86_BUILTIN_CPYSGNPD256,\n \n-  IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V4SI,\n-  IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V8SI,\n-  IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V4SI,\n-  IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V8SI,\n-  IX86_BUILTIN_VEC_WIDEN_SMUL_EVEN_V4SI,\n-  IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V4SI,\n-  IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V8SI,\n-\n   /* FMA4 instructions.  */\n   IX86_BUILTIN_VFMADDSS,\n   IX86_BUILTIN_VFMADDSD,\n@@ -26620,10 +26612,6 @@ static const struct builtin_description bdesc_args[] =\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_umulv1siv1di3, \"__builtin_ia32_pmuludq\", IX86_BUILTIN_PMULUDQ, UNKNOWN, (int) V1DI_FTYPE_V2SI_V2SI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_widen_umult_even_v4si, \"__builtin_ia32_pmuludq128\", IX86_BUILTIN_PMULUDQ128, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_widen_umult_even_v4si, \"__builtin_vw_umul_even_v4si\", IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V4SI, UNKNOWN, (int) V2UDI_FTYPE_V4USI_V4USI },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_widen_smult_even_v4si, \"__builtin_ia32_vw_smul_even_v4si\", IX86_BUILTIN_VEC_WIDEN_SMUL_EVEN_V4SI, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_widen_umult_odd_v4si, \"__builtin_ia32_vw_umul_odd_v4si\", IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V4SI, UNKNOWN, (int) V2UDI_FTYPE_V4USI_V4USI },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_widen_smult_odd_v4si, \"__builtin_ia32_vw_smul_odd_v4si\", IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V4SI, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pmaddwd, \"__builtin_ia32_pmaddwd128\", IX86_BUILTIN_PMADDWD128, UNKNOWN, (int) V4SI_FTYPE_V8HI_V8HI },\n \n@@ -27016,15 +27004,12 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_zero_extendv4hiv4di2  , \"__builtin_ia32_pmovzxwq256\", IX86_BUILTIN_PMOVZXWQ256, UNKNOWN, (int) V4DI_FTYPE_V8HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_zero_extendv4siv4di2  , \"__builtin_ia32_pmovzxdq256\", IX86_BUILTIN_PMOVZXDQ256, UNKNOWN, (int) V4DI_FTYPE_V4SI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_vec_widen_smult_even_v8si, \"__builtin_ia32_pmuldq256\", IX86_BUILTIN_PMULDQ256, UNKNOWN, (int) V4DI_FTYPE_V8SI_V8SI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_vec_widen_smult_odd_v8si, \"__builtin_ia32_vw_smul_odd_v8si\", IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V8SI, UNKNOWN, (int) V4DI_FTYPE_V8SI_V8SI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_umulhrswv16hi3 , \"__builtin_ia32_pmulhrsw256\", IX86_BUILTIN_PMULHRSW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_umulv16hi3_highpart, \"__builtin_ia32_pmulhuw256\" , IX86_BUILTIN_PMULHUW256 , UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_smulv16hi3_highpart, \"__builtin_ia32_pmulhw256\"  , IX86_BUILTIN_PMULHW256  , UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_mulv16hi3, \"__builtin_ia32_pmullw256\"  , IX86_BUILTIN_PMULLW256  , UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_mulv8si3, \"__builtin_ia32_pmulld256\"  , IX86_BUILTIN_PMULLD256  , UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_vec_widen_umult_even_v8si, \"__builtin_ia32_pmuludq256\", IX86_BUILTIN_PMULUDQ256, UNKNOWN, (int) V4DI_FTYPE_V8SI_V8SI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_vec_widen_umult_even_v8si, \"__builtin_i386_vw_umul_even_v8si\", IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V8SI, UNKNOWN, (int) V4UDI_FTYPE_V8USI_V8USI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_vec_widen_umult_odd_v8si, \"__builtin_ia32_vw_umul_odd_v8si\", IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V8SI, UNKNOWN, (int) V4UDI_FTYPE_V8USI_V8USI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_iorv4di3, \"__builtin_ia32_por256\", IX86_BUILTIN_POR256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_psadbw, \"__builtin_ia32_psadbw256\", IX86_BUILTIN_PSADBW256, UNKNOWN, (int) V16HI_FTYPE_V32QI_V32QI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_pshufbv32qi3, \"__builtin_ia32_pshufb256\", IX86_BUILTIN_PSHUFB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI },\n@@ -31063,62 +31048,6 @@ ix86_builtin_reciprocal (unsigned int fn, bool md_fn,\n \treturn NULL_TREE;\n       }\n }\n-\n-static tree\n-ix86_builtin_mul_widen_even (tree type)\n-{\n-  bool uns_p = TYPE_UNSIGNED (type);\n-  enum ix86_builtins code;\n-\n-  switch (TYPE_MODE (type))\n-    {\n-    case V4SImode:\n-      if (!TARGET_SSE2)\n-\treturn NULL;\n-      code = (uns_p ? IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V4SI\n-\t      : IX86_BUILTIN_VEC_WIDEN_SMUL_EVEN_V4SI);\n-      break;\n-\n-    case V8SImode:\n-      if (!TARGET_AVX2)\n-\treturn NULL;\n-      code = (uns_p ? IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V8SI\n-\t      : IX86_BUILTIN_PMULDQ256);\n-      break;\n-\n-    default:\n-      return NULL;\n-    }\n-  return ix86_builtins[code];\n-}\n-\n-static tree\n-ix86_builtin_mul_widen_odd (tree type)\n-{\n-  bool uns_p = TYPE_UNSIGNED (type);\n-  enum ix86_builtins code;\n-\n-  switch (TYPE_MODE (type))\n-    {\n-    case V4SImode:\n-      if (!TARGET_SSE2)\n-\treturn NULL;\n-      code = (uns_p ? IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V4SI\n-\t      : IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V4SI);\n-      break;\n-\n-    case V8SImode:\n-      if (!TARGET_AVX2)\n-\treturn NULL;\n-      code = (uns_p ? IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V8SI\n-\t      : IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V8SI);\n-      break;\n-\n-    default:\n-      return NULL;\n-    }\n-  return ix86_builtins[code];\n-}\n \f\n /* Helper for avx_vpermilps256_operand et al.  This is also used by\n    the expansion functions to turn the parallel back into a mask.\n@@ -40204,11 +40133,6 @@ ix86_memmodel_check (unsigned HOST_WIDE_INT val)\n #undef TARGET_VECTORIZE_BUILTIN_GATHER\n #define TARGET_VECTORIZE_BUILTIN_GATHER ix86_vectorize_builtin_gather\n \n-#undef TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN\n-#define TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN ix86_builtin_mul_widen_even\n-#undef TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD\n-#define TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD ix86_builtin_mul_widen_odd\n-\n #undef TARGET_BUILTIN_RECIPROCAL\n #define TARGET_BUILTIN_RECIPROCAL ix86_builtin_reciprocal\n "}, {"sha": "1d0e247dcd32e6ff63f9b77778ed9c4ee37a6b1d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a7bac96d207827916e549718cd1157fe9dbf9a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a7bac96d207827916e549718cd1157fe9dbf9a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=30a7bac96d207827916e549718cd1157fe9dbf9a", "patch": "@@ -1273,10 +1273,6 @@ static const struct attribute_spec rs6000_attribute_table[] =\n \n #undef TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD\n #define TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD rs6000_builtin_mask_for_load\n-#undef TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN\n-#define TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN rs6000_builtin_mul_widen_even\n-#undef TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD\n-#define TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD rs6000_builtin_mul_widen_odd\n #undef TARGET_VECTORIZE_SUPPORT_VECTOR_MISALIGNMENT\n #define TARGET_VECTORIZE_SUPPORT_VECTOR_MISALIGNMENT\t\t\\\n   rs6000_builtin_support_vector_misalignment\n@@ -3285,53 +3281,6 @@ rs6000_loop_align_max_skip (rtx label)\n   return (1 << rs6000_loop_align (label)) - 1;\n }\n \n-/* Implement targetm.vectorize.builtin_mul_widen_even.  */\n-static tree\n-rs6000_builtin_mul_widen_even (tree type)\n-{\n-  if (!TARGET_ALTIVEC)\n-    return NULL_TREE;\n-\n-  switch (TYPE_MODE (type))\n-    {\n-    case V8HImode:\n-      return TYPE_UNSIGNED (type)\n-            ? rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULEUH_UNS]\n-            : rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULESH];\n-\n-    case V16QImode:\n-      return TYPE_UNSIGNED (type)\n-            ? rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULEUB_UNS]\n-            : rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULESB];\n-    default:\n-      return NULL_TREE;\n-    }\n-}\n-\n-/* Implement targetm.vectorize.builtin_mul_widen_odd.  */\n-static tree\n-rs6000_builtin_mul_widen_odd (tree type)\n-{\n-  if (!TARGET_ALTIVEC)\n-    return NULL_TREE;\n-\n-  switch (TYPE_MODE (type))\n-    {\n-    case V8HImode:\n-      return TYPE_UNSIGNED (type)\n-            ? rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULOUH_UNS]\n-            : rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULOSH];\n-\n-    case V16QImode:\n-      return TYPE_UNSIGNED (type)\n-            ? rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULOUB_UNS]\n-            : rs6000_builtin_decls[ALTIVEC_BUILTIN_VMULOSB];\n-    default:\n-      return NULL_TREE;\n-    }\n-}\n-\n-\n /* Return true iff, data reference of TYPE can reach vector alignment (16)\n    after applying N number of iterations.  This routine does not determine\n    how may iterations are required to reach desired alignment.  */"}, {"sha": "7ca40a0d89d8d990dc9dc092c5485abbf754ba7d", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a7bac96d207827916e549718cd1157fe9dbf9a/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a7bac96d207827916e549718cd1157fe9dbf9a/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=30a7bac96d207827916e549718cd1157fe9dbf9a", "patch": "@@ -211,8 +211,6 @@ static void spu_encode_section_info (tree, rtx, int);\n static rtx spu_legitimize_address (rtx, rtx, enum machine_mode);\n static rtx spu_addr_space_legitimize_address (rtx, rtx, enum machine_mode,\n \t\t\t\t\t      addr_space_t);\n-static tree spu_builtin_mul_widen_even (tree);\n-static tree spu_builtin_mul_widen_odd (tree);\n static tree spu_builtin_mask_for_load (void);\n static int spu_builtin_vectorization_cost (enum vect_cost_for_stmt, tree, int);\n static bool spu_vector_alignment_reachable (const_tree, bool);\n@@ -431,12 +429,6 @@ static void spu_setup_incoming_varargs (cumulative_args_t cum,\n #undef  TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO spu_encode_section_info\n \n-#undef TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN\n-#define TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN spu_builtin_mul_widen_even\n-\n-#undef TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD\n-#define TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD spu_builtin_mul_widen_odd\n-\n #undef TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD\n #define TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD spu_builtin_mask_for_load\n \n@@ -6863,40 +6855,6 @@ spu_expand_builtin (tree exp,\n   abort ();\n }\n \n-/* Implement targetm.vectorize.builtin_mul_widen_even.  */\n-static tree\n-spu_builtin_mul_widen_even (tree type)\n-{\n-  switch (TYPE_MODE (type))\n-    {\n-    case V8HImode:\n-      if (TYPE_UNSIGNED (type))\n-\treturn spu_builtin_decls[SPU_MULE_0];\n-      else\n-\treturn spu_builtin_decls[SPU_MULE_1];\n-      break;\n-    default:\n-      return NULL_TREE;\n-    }\n-}\n-\n-/* Implement targetm.vectorize.builtin_mul_widen_odd.  */\n-static tree\n-spu_builtin_mul_widen_odd (tree type)\n-{\n-  switch (TYPE_MODE (type))\n-    {\n-    case V8HImode:\n-      if (TYPE_UNSIGNED (type))\n-\treturn spu_builtin_decls[SPU_MULO_1];\n-      else\n-\treturn spu_builtin_decls[SPU_MULO_0]; \n-      break;\n-    default:\n-      return NULL_TREE;\n-    }\n-}\n-\n /* Implement targetm.vectorize.builtin_mask_for_load.  */\n static tree\n spu_builtin_mask_for_load (void)"}, {"sha": "119dff7da0e6c2693e513047025d74879f73bede", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a7bac96d207827916e549718cd1157fe9dbf9a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a7bac96d207827916e549718cd1157fe9dbf9a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=30a7bac96d207827916e549718cd1157fe9dbf9a", "patch": "@@ -5713,28 +5713,6 @@ the argument @var{OFF} to @code{REALIGN_LOAD}, in which case the low\n log2(@var{VS}) @minus{} 1 bits of @var{addr} will be considered.\n @end deftypefn\n \n-@deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN (tree @var{x})\n-This hook should return the DECL of a function @var{f} that implements\n-widening multiplication of the even elements of two input vectors of type @var{x}.\n-\n-If this hook is defined, the autovectorizer will use it along with the\n-@code{TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD} target hook when vectorizing\n-widening multiplication in cases that the order of the results does not have to be\n-preserved (e.g.@: used only by a reduction computation). Otherwise, the\n-@code{widen_mult_hi/lo} idioms will be used.\n-@end deftypefn\n-\n-@deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD (tree @var{x})\n-This hook should return the DECL of a function @var{f} that implements\n-widening multiplication of the odd elements of two input vectors of type @var{x}.\n-\n-If this hook is defined, the autovectorizer will use it along with the\n-@code{TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN} target hook when vectorizing\n-widening multiplication in cases that the order of the results does not have to be\n-preserved (e.g.@: used only by a reduction computation). Otherwise, the\n-@code{widen_mult_hi/lo} idioms will be used.\n-@end deftypefn\n-\n @deftypefn {Target Hook} int TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST (enum vect_cost_for_stmt @var{type_of_cost}, tree @var{vectype}, int @var{misalign})\n Returns cost of different scalar or vector statements for vectorization cost model.\n For vector memory operations the cost may depend on type (@var{vectype}) and"}, {"sha": "bbf2affdb72be98e75f8a36190e05fec3f7aef50", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a7bac96d207827916e549718cd1157fe9dbf9a/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a7bac96d207827916e549718cd1157fe9dbf9a/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=30a7bac96d207827916e549718cd1157fe9dbf9a", "patch": "@@ -5645,28 +5645,6 @@ the argument @var{OFF} to @code{REALIGN_LOAD}, in which case the low\n log2(@var{VS}) @minus{} 1 bits of @var{addr} will be considered.\n @end deftypefn\n \n-@hook TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN\n-This hook should return the DECL of a function @var{f} that implements\n-widening multiplication of the even elements of two input vectors of type @var{x}.\n-\n-If this hook is defined, the autovectorizer will use it along with the\n-@code{TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD} target hook when vectorizing\n-widening multiplication in cases that the order of the results does not have to be\n-preserved (e.g.@: used only by a reduction computation). Otherwise, the\n-@code{widen_mult_hi/lo} idioms will be used.\n-@end deftypefn\n-\n-@hook TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD\n-This hook should return the DECL of a function @var{f} that implements\n-widening multiplication of the odd elements of two input vectors of type @var{x}.\n-\n-If this hook is defined, the autovectorizer will use it along with the\n-@code{TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN} target hook when vectorizing\n-widening multiplication in cases that the order of the results does not have to be\n-preserved (e.g.@: used only by a reduction computation). Otherwise, the\n-@code{widen_mult_hi/lo} idioms will be used.\n-@end deftypefn\n-\n @hook TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST\n Returns cost of different scalar or vector statements for vectorization cost model.\n For vector memory operations the cost may depend on type (@var{vectype}) and"}, {"sha": "d2c7690b1620d030283d371a292fa30c67424b59", "filename": "gcc/system.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a7bac96d207827916e549718cd1157fe9dbf9a/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a7bac96d207827916e549718cd1157fe9dbf9a/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=30a7bac96d207827916e549718cd1157fe9dbf9a", "patch": "@@ -909,7 +909,9 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tLANG_HOOKS_MISSING_ARGUMENT LANG_HOOKS_HASH_TYPES \\\n \tTARGET_HANDLE_OFAST TARGET_OPTION_OPTIMIZATION \\\n \tTARGET_IRA_COVER_CLASSES TARGET_HELP \\\n-\tTARGET_HANDLE_PRAGMA_EXTERN_PREFIX\n+\tTARGET_HANDLE_PRAGMA_EXTERN_PREFIX \\\n+\tTARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN \\\n+\tTARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD \\\n \n /* Arrays that were deleted in favor of a functional interface.  */\n  #pragma GCC poison built_in_decls implicit_built_in_decls"}, {"sha": "42dc59174bfc1a94318ccb7a24f48a730c866c53", "filename": "gcc/target.def", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a7bac96d207827916e549718cd1157fe9dbf9a/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a7bac96d207827916e549718cd1157fe9dbf9a/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=30a7bac96d207827916e549718cd1157fe9dbf9a", "patch": "@@ -970,20 +970,6 @@ DEFHOOK\n  tree, (unsigned code, tree dest_type, tree src_type),\n  default_builtin_vectorized_conversion)\n \n-/* Target builtin that implements vector widening multiplication.\n-   builtin_mul_widen_eve computes the element-by-element products\n-   for the even elements, and builtin_mul_widen_odd computes the\n-   element-by-element products for the odd elements.  */\n-DEFHOOK\n-(builtin_mul_widen_even,\n- \"\",\n- tree, (tree x), NULL)\n-\n-DEFHOOK\n-(builtin_mul_widen_odd,\n- \"\",\n- tree, (tree x), NULL)\n-\n /* Cost of different vector/scalar statements in vectorization cost\n    model. In case of misaligned vector loads and stores the cost depends\n    on the data type and misalignment value.  */"}]}