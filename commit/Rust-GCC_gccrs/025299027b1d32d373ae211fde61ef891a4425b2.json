{"sha": "025299027b1d32d373ae211fde61ef891a4425b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI1Mjk5MDI3YjFkMzJkMzczYWUyMTFmZGU2MWVmODkxYTQ0MjViMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-06-21T11:32:54Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-21T11:32:54Z"}, "message": "h8300-protos.h: Add a prototype for same_cmp_preceding_p.\n\n\t* config/h8300/h8300-protos.h: Add a prototype for\n\tsame_cmp_preceding_p.\n\t* config/h8300/h8300.c (same_cmp_preceding): New.\n\t* config/h8300/h8300.md: Extend peephole2's that transform\n\tcompare:SI into shorter sequences so that they can deal with\n\tsigned comparisons.\n\nFrom-SVN: r68296", "tree": {"sha": "00058e7b86dfbfc4a04d85cd255b60893f0418ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00058e7b86dfbfc4a04d85cd255b60893f0418ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/025299027b1d32d373ae211fde61ef891a4425b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/025299027b1d32d373ae211fde61ef891a4425b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/025299027b1d32d373ae211fde61ef891a4425b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/025299027b1d32d373ae211fde61ef891a4425b2/comments", "author": null, "committer": null, "parents": [{"sha": "2d0c9050c37f33240921ea92a0f82320687e7998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d0c9050c37f33240921ea92a0f82320687e7998", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d0c9050c37f33240921ea92a0f82320687e7998"}], "stats": {"total": 111, "additions": 86, "deletions": 25}, "files": [{"sha": "640677a50b9bbae0b8690147c80e0537dd87a631", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025299027b1d32d373ae211fde61ef891a4425b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025299027b1d32d373ae211fde61ef891a4425b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=025299027b1d32d373ae211fde61ef891a4425b2", "patch": "@@ -1,3 +1,12 @@\n+2003-06-20  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Add a prototype for\n+\tsame_cmp_preceding_p.\n+\t* config/h8300/h8300.c (same_cmp_preceding): New.\n+\t* config/h8300/h8300.md: Extend peephole2's that transform\n+\tcompare:SI into shorter sequences so that they can deal with\n+\tsigned comparisons.\n+\n 2003-06-14  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* doc/contrib.texi (Contributors): Use Windows instead of Win32."}, {"sha": "d1708698bb2f0eb7bbc09ea7d55cbb261a9193f4", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025299027b1d32d373ae211fde61ef891a4425b2/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025299027b1d32d373ae211fde61ef891a4425b2/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=025299027b1d32d373ae211fde61ef891a4425b2", "patch": "@@ -76,6 +76,7 @@ extern int iorxor_operator (rtx, enum machine_mode);\n extern int h8300_eightbit_constant_address_p (rtx);\n extern int h8300_tiny_constant_address_p (rtx);\n extern int byte_accesses_mergeable_p (rtx, rtx);\n+extern int same_cmp_preceding_p (rtx);\n \n /* Used in builtins.c */\n extern rtx h8300_return_addr_rtx (int, rtx);"}, {"sha": "d7a55f17cf27305190c6b60ad47ff5d31651a3d9", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025299027b1d32d373ae211fde61ef891a4425b2/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025299027b1d32d373ae211fde61ef891a4425b2/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=025299027b1d32d373ae211fde61ef891a4425b2", "patch": "@@ -4335,6 +4335,26 @@ byte_accesses_mergeable_p (rtx addr1, rtx addr2)\n \n   return 0;\n }\n+\n+/* Return nonzero if we have the same comparison insn as I3 two insns\n+   before I3.  I3 is assumed to be a comparision insn.  */\n+\n+int\n+same_cmp_preceding_p (rtx i3)\n+{\n+  rtx i1, i2;\n+\n+  /* Make sure we have a sequence of three insns.  */\n+  i2 = prev_nonnote_insn (i3);\n+  if (i2 == NULL_RTX)\n+    return 0;\n+  i1 = prev_nonnote_insn (i2);\n+  if (i1 == NULL_RTX)\n+    return 0;\n+\n+  return (INSN_P (i1) && rtx_equal_p (PATTERN (i1), PATTERN (i3))\n+\t  && any_condjump_p (i2) && onlyjump_p (i2));\n+}\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE"}, {"sha": "cae57370bf0c16b7123e60e4657b36c9ecb7d607", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 56, "deletions": 25, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/025299027b1d32d373ae211fde61ef891a4425b2/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/025299027b1d32d373ae211fde61ef891a4425b2/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=025299027b1d32d373ae211fde61ef891a4425b2", "patch": "@@ -3968,8 +3968,8 @@\n ;; dead     1                       eq/ne   dec.l\n ;; dead     2                       eq/ne   dec.l\n ;;\n-;; dead     1                       geu/ltu shlr.l\n-;; dead     3 (H8S)                 geu/ltu shlr.l\n+;; dead     1                       geu/ltu shar.l\n+;; dead     3 (H8S)                 geu/ltu shar.l\n ;;\n ;; ----   255                       geu/ltu mov.b\n \n@@ -4013,15 +4013,15 @@\n ;;\n ;; into\n ;;\n-;;\tshlr.w\tr0\n+;;\tshar.w\tr0\n ;;\tbne\t.L1\n \n (define_peephole2\n   [(set (cc0)\n \t(compare (match_operand:HI 0 \"register_operand\" \"\")\n \t\t (match_operand:HI 1 \"const_int_operand\" \"\")))\n    (set (pc)\n-\t(if_then_else (match_operator 2 \"gtuleu_operator\"\n+\t(if_then_else (match_operator 2 \"gtle_operator\"\n \t\t\t[(cc0) (const_int 0)])\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n \t\t      (pc)))]\n@@ -4030,7 +4030,7 @@\n    && (INTVAL (operands[1]) == 1\n \t|| (TARGET_H8300S && INTVAL (operands[1]) == 3))\"\n   [(parallel [(set (match_dup 0)\n-\t\t   (lshiftrt:HI (match_dup 0)\n+\t\t   (ashiftrt:HI (match_dup 0)\n \t\t\t\t(match_dup 5)))\n \t      (clobber (scratch:QI))])\n    (set (cc0)\n@@ -4039,9 +4039,18 @@\n \t(if_then_else (match_dup 4)\n \t\t      (label_ref (match_dup 3))\n \t\t      (pc)))]\n-  \"operands[4] = ((GET_CODE (operands[2]) == GTU) ?\n-\t\t  gen_rtx_NE (VOIDmode, cc0_rtx, const0_rtx) :\n-\t\t  gen_rtx_EQ (VOIDmode, cc0_rtx, const0_rtx));\n+  \"switch (GET_CODE (operands[2]))\n+     {\n+     case GTU:\n+       operands[4] = gen_rtx_NE (VOIDmode, cc0_rtx, const0_rtx);\n+       break;\n+     case LEU:\n+       operands[4] = gen_rtx_EQ (VOIDmode, cc0_rtx, const0_rtx);\n+       break;\n+     default:\n+       operands[4] = operands[2];\n+       break;\n+     }\n    operands[5] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));\")\n \n ;; Transform\n@@ -4112,11 +4121,11 @@\n ;; dead 0xffffff?? except -1 and -2 eq/ne   xor.b and not.l\n ;; dead 0xffff??ff                  eq/ne   xor.b and not.l\n ;;\n-;; live     1                       geu/ltu copy and shlr.l\n-;; live     3 (H8S)                 geu/ltu copy and shlr.l\n+;; live     1                       geu/ltu copy and shar.l\n+;; live     3 (H8S)                 geu/ltu copy and shar.l\n ;;\n-;; dead     1                       geu/ltu shlr.l\n-;; dead     3 (H8S)                 geu/ltu shlr.l\n+;; dead     1                       geu/ltu shar.l\n+;; dead     3 (H8S)                 geu/ltu shar.l\n ;;\n ;; dead     3 (H8/300H)             geu/ltu and.b and test\n ;; dead     7                       geu/ltu and.b and test\n@@ -4247,27 +4256,31 @@\n ;; into\n ;;\n ;;\tmov.l\ter0,er1\n-;;\tshlr.l\ter1\n+;;\tshar.l\ter1\n ;;\tbne\t.L1\n \n+;; We avoid this transformation if we see more than one copy of the\n+;; same compare insn immediately before this one.\n+\n (define_peephole2\n   [(match_scratch:SI 4 \"r\")\n    (set (cc0)\n \t(compare (match_operand:SI 0 \"register_operand\" \"\")\n \t\t (match_operand:SI 1 \"const_int_operand\" \"\")))\n    (set (pc)\n-\t(if_then_else (match_operator 2 \"gtuleu_operator\"\n+\t(if_then_else (match_operator 2 \"gtle_operator\"\n \t\t\t[(cc0) (const_int 0)])\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n \t\t      (pc)))]\n   \"(TARGET_H8300H || TARGET_H8300S)\n    && !peep2_reg_dead_p (1, operands[0])\n    && (INTVAL (operands[1]) == 1\n-\t|| (TARGET_H8300S && INTVAL (operands[1]) == 3))\"\n+\t|| (TARGET_H8300S && INTVAL (operands[1]) == 3))\n+   && !same_cmp_preceding_p (insn)\"\n   [(set (match_dup 4)\n \t(match_dup 0))\n    (parallel [(set (match_dup 4)\n-\t\t   (lshiftrt:SI (match_dup 4)\n+\t\t   (ashiftrt:SI (match_dup 4)\n \t\t\t\t(match_dup 6)))\n \t      (clobber (scratch:QI))])\n    (set (cc0)\n@@ -4276,9 +4289,18 @@\n \t(if_then_else (match_dup 5)\n \t\t      (label_ref (match_dup 3))\n \t\t      (pc)))]\n-  \"operands[5] = ((GET_CODE (operands[2]) == GTU) ?\n-\t\t  gen_rtx_NE (VOIDmode, cc0_rtx, const0_rtx) :\n-\t\t  gen_rtx_EQ (VOIDmode, cc0_rtx, const0_rtx));\n+  \"switch (GET_CODE (operands[2]))\n+     {\n+     case GTU:\n+       operands[5] = gen_rtx_NE (VOIDmode, cc0_rtx, const0_rtx);\n+       break;\n+     case LEU:\n+       operands[5] = gen_rtx_EQ (VOIDmode, cc0_rtx, const0_rtx);\n+       break;\n+     default:\n+       operands[5] = operands[2];\n+       break;\n+     }\n    operands[6] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));\")\n \n ;; Transform\n@@ -4288,15 +4310,15 @@\n ;;\n ;; into\n ;;\n-;;\tshlr.l\ter0\n+;;\tshar.l\ter0\n ;;\tbne\t.L1\n \n (define_peephole2\n   [(set (cc0)\n \t(compare (match_operand:SI 0 \"register_operand\" \"\")\n \t\t (match_operand:SI 1 \"const_int_operand\" \"\")))\n    (set (pc)\n-\t(if_then_else (match_operator 2 \"gtuleu_operator\"\n+\t(if_then_else (match_operator 2 \"gtle_operator\"\n \t\t\t[(cc0) (const_int 0)])\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n \t\t      (pc)))]\n@@ -4305,7 +4327,7 @@\n    && (INTVAL (operands[1]) == 1\n \t|| (TARGET_H8300S && INTVAL (operands[1]) == 3))\"\n   [(parallel [(set (match_dup 0)\n-\t\t   (lshiftrt:SI (match_dup 0)\n+\t\t   (ashiftrt:SI (match_dup 0)\n \t\t\t\t(match_dup 5)))\n \t      (clobber (scratch:QI))])\n    (set (cc0)\n@@ -4314,9 +4336,18 @@\n \t(if_then_else (match_dup 4)\n \t\t      (label_ref (match_dup 3))\n \t\t      (pc)))]\n-  \"operands[4] = ((GET_CODE (operands[2]) == GTU) ?\n-\t\t  gen_rtx_NE (VOIDmode, cc0_rtx, const0_rtx) :\n-\t\t  gen_rtx_EQ (VOIDmode, cc0_rtx, const0_rtx));\n+  \"switch (GET_CODE (operands[2]))\n+     {\n+     case GTU:\n+       operands[4] = gen_rtx_NE (VOIDmode, cc0_rtx, const0_rtx);\n+       break;\n+     case LEU:\n+       operands[4] = gen_rtx_EQ (VOIDmode, cc0_rtx, const0_rtx);\n+       break;\n+     default:\n+       operands[4] = operands[2];\n+       break;\n+     }\n    operands[5] = GEN_INT (exact_log2 (INTVAL (operands[1]) + 1));\")\n \n ;; Transform"}]}