{"sha": "e6bfe8a255590cb8ca8d9f7f302a33c613067e4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZiZmU4YTI1NTU5MGNiOGNhOGQ5ZjdmMzAyYTMzYzYxMzA2N2U0Yg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2010-06-19T23:00:31Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2010-06-19T23:00:31Z"}, "message": "re PR target/44072 (Use 'add r0, 1' to replace 'cmp r0, -1' in thumb2)\n\n\tPR target/44072\n\t* arm.md (cmpsi2_addneg): Prefer emitting adds to subs with a negative\n\timmediate.\n\t* constraints.md (Pw, Px): New constraints.\n\t* thumb2.md (cmpsi2_addneg peephole2): New peepholes.\n\n\t* gcc.target/arm/thumb2-cmpneg2add-1.c: New test.\n\t* gcc.target/arm/thumb2-cmpneg2add-2.c: New test.\n\nFrom-SVN: r161040", "tree": {"sha": "71f3aa2a739ae512fbd09b5699bb5b94b922b0ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71f3aa2a739ae512fbd09b5699bb5b94b922b0ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b/comments", "author": null, "committer": null, "parents": [{"sha": "1c154a230dd9652fb261d57a8101144cbaddc073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c154a230dd9652fb261d57a8101144cbaddc073", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c154a230dd9652fb261d57a8101144cbaddc073"}], "stats": {"total": 84, "additions": 79, "deletions": 5}, "files": [{"sha": "d8853252dd8bb82716bac926ff11b811adefdf2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6bfe8a255590cb8ca8d9f7f302a33c613067e4b", "patch": "@@ -1,3 +1,11 @@\n+2010-06-19  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/44072\n+\t* arm.md (cmpsi2_addneg): Prefer emitting adds to subs with a negative\n+\timmediate.\n+\t* constraints.md (Pw, Px): New constraints.\n+\t* thumb2.md (cmpsi2_addneg peephole2): New peepholes.\n+\n 2010-06-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/sse.md (fma4modesuffixf4): Removed."}, {"sha": "1608929c95d514d4be959a9df26c462784b0b399", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=e6bfe8a255590cb8ca8d9f7f302a33c613067e4b", "patch": "@@ -737,14 +737,14 @@\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC\n \t (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t (match_operand:SI 2 \"arm_addimm_operand\" \"I,L\")))\n+\t (match_operand:SI 2 \"arm_addimm_operand\" \"L,I\")))\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(plus:SI (match_dup 1)\n-\t\t (match_operand:SI 3 \"arm_addimm_operand\" \"L,I\")))]\n+\t\t (match_operand:SI 3 \"arm_addimm_operand\" \"I,L\")))]\n   \"TARGET_32BIT && INTVAL (operands[2]) == -INTVAL (operands[3])\"\n   \"@\n-   sub%.\\\\t%0, %1, %2\n-   add%.\\\\t%0, %1, #%n2\"\n+   add%.\\\\t%0, %1, %3\n+   sub%.\\\\t%0, %1, #%n3\"\n   [(set_attr \"conds\" \"set\")]\n )\n "}, {"sha": "6d6c77d4b6665ccd5525de4a1a5410962cfd579a", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=e6bfe8a255590cb8ca8d9f7f302a33c613067e4b", "patch": "@@ -31,7 +31,7 @@\n ;; The following multi-letter normal constraints have been used:\n ;; in ARM/Thumb-2 state: Da, Db, Dc, Dn, Dl, DL, Dv, Dy\n ;; in Thumb-1 state: Pa, Pb\n-;; in Thumb-2 state: Ps, Pt, Pu, Pv\n+;; in Thumb-2 state: Ps, Pt, Pu, Pv, Pw, Px\n \n ;; The following memory constraints have been used:\n ;; in ARM/Thumb-2 state: Q, Ut, Uv, Uy, Un, Um, Us\n@@ -168,6 +168,16 @@\n   (and (match_code \"const_int\")\n        (match_test \"TARGET_THUMB2 && ival >= -255 && ival <= 0\")))\n \n+(define_constraint \"Pw\"\n+  \"@internal In Thumb-2 state a constant in the range -255 to -1\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_THUMB2 && ival >= -255 && ival <= -1\")))\n+\n+(define_constraint \"Px\"\n+  \"@internal In Thumb-2 state a constant in the range -7 to -1\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_THUMB2 && ival >= -7 && ival <= -1\")))\n+\n (define_constraint \"G\"\n  \"In ARM/Thumb-2 state a valid FPA immediate constant.\"\n  (and (match_code \"const_double\")"}, {"sha": "7045d1407aa3c1b5f9294129482636f1130d8e9b", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=e6bfe8a255590cb8ca8d9f7f302a33c613067e4b", "patch": "@@ -1231,6 +1231,32 @@\n    (set_attr \"length\" \"2\")]\n )\n \n+(define_peephole2\n+  [(set (match_operand:CC 0 \"cc_register\" \"\")\n+\t(compare:CC (match_operand:SI 1 \"low_register_operand\" \"\")\n+\t\t    (match_operand:SI 2 \"const_int_operand\" \"\")))]\n+  \"TARGET_THUMB2\n+   && peep2_reg_dead_p (1, operands[1])\n+   && satisfies_constraint_Pw (operands[2])\"\n+  [(parallel\n+    [(set (match_dup 0) (compare:CC (match_dup 1) (match_dup 2)))\n+     (set (match_dup 1) (plus:SI (match_dup 1) (match_dup 3)))])]\n+  \"operands[3] = GEN_INT (- INTVAL (operands[2]));\"\n+)\n+\n+(define_peephole2\n+  [(match_scratch:SI 3 \"l\")\n+   (set (match_operand:CC 0 \"cc_register\" \"\")\n+\t(compare:CC (match_operand:SI 1 \"low_register_operand\" \"\")\n+\t\t    (match_operand:SI 2 \"const_int_operand\" \"\")))]\n+  \"TARGET_THUMB2\n+   && satisfies_constraint_Px (operands[2])\"\n+  [(parallel\n+    [(set (match_dup 0) (compare:CC (match_dup 1) (match_dup 2)))\n+     (set (match_dup 3) (plus:SI (match_dup 1) (match_dup 4)))])]\n+  \"operands[4] = GEN_INT (- INTVAL (operands[2]));\"\n+)\n+\n (define_insn \"*thumb2_addsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV"}, {"sha": "8f6ad4b1dc39aae208aad29f72f78da3f38ff677", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6bfe8a255590cb8ca8d9f7f302a33c613067e4b", "patch": "@@ -1,3 +1,9 @@\n+2010-06-19  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/44072\n+\t* gcc.target/arm/thumb2-cmpneg2add-1.c: New test.\n+\t* gcc.target/arm/thumb2-cmpneg2add-2.c: New test.\n+\n 2010-06-19  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* g++.dg/ext/label13.C: Fix typo in last change."}, {"sha": "d75f13aa0894e140b148f53a81d3880a381338cf", "filename": "gcc/testsuite/gcc.target/arm/thumb2-cmpneg2add-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cmpneg2add-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cmpneg2add-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cmpneg2add-1.c?ref=e6bfe8a255590cb8ca8d9f7f302a33c613067e4b", "patch": "@@ -0,0 +1,12 @@\n+/* Use ADDS clobbering source operand, rather than CMN */\n+/* { dg-options \"-mthumb -Os\" } */\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+/* { dg-final { scan-assembler \"adds\" } } */\n+/* { dg-final { scan-assembler-not \"cmn\" } } */\n+\n+void foo1(void);\n+void bar5(int x)\n+{\n+  if (x == -15)\n+    foo1();\n+}"}, {"sha": "358bc6e143cf7dacbe4f92db331da7bf37d91941", "filename": "gcc/testsuite/gcc.target/arm/thumb2-cmpneg2add-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cmpneg2add-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6bfe8a255590cb8ca8d9f7f302a33c613067e4b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cmpneg2add-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-cmpneg2add-2.c?ref=e6bfe8a255590cb8ca8d9f7f302a33c613067e4b", "patch": "@@ -0,0 +1,12 @@\n+/* Use ADDS with a scratch, rather than CMN */\n+/* { dg-options \"-mthumb -Os\" } */\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+/* { dg-final { scan-assembler \"adds\" } } */\n+/* { dg-final { scan-assembler-not \"cmn\" } } */\n+\n+void foo1(int);\n+void bar5(int x)\n+{\n+  if (x == -1)\n+    foo1(x);\n+}"}]}