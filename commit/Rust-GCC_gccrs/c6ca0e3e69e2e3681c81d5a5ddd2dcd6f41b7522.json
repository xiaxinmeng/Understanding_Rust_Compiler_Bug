{"sha": "c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZjYTBlM2U2OWUyZTM2ODFjODFkNWE1ZGRkMmRjZDZmNDFiNzUyMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-08-24T19:39:44Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-08-24T19:39:44Z"}, "message": "semantics.c (finish_switch_cond): Improve error message location.\n\n/cp\n2019-08-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* semantics.c (finish_switch_cond): Improve error message location.\n\n/testsuite\n2019-08-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/conversion/simd4.C: Test all the locations.\n\nFrom-SVN: r274901", "tree": {"sha": "3bfac7cc3fa58bbf1e2ea170bd0d9c63efd7bc8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bfac7cc3fa58bbf1e2ea170bd0d9c63efd7bc8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522/comments", "author": null, "committer": null, "parents": [{"sha": "22b23ef2379b1abdb80fd293ac1bc0ff1ab6c170", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22b23ef2379b1abdb80fd293ac1bc0ff1ab6c170", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22b23ef2379b1abdb80fd293ac1bc0ff1ab6c170"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "d0a8c7745a242427b4cbd27f24151bdd9e011aa8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522", "patch": "@@ -1,3 +1,7 @@\n+2019-08-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* semantics.c (finish_switch_cond): Improve error message location.\n+\n 2019-08-22  Jason Merrill  <jason@redhat.com>\n \n \t* decl2.c (decl_dependent_p): New."}, {"sha": "1f7745933f95aff9378b3d19034c53c30b0b792f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522", "patch": "@@ -1185,10 +1185,12 @@ finish_switch_cond (tree cond, tree switch_stmt)\n   if (!processing_template_decl)\n     {\n       /* Convert the condition to an integer or enumeration type.  */\n+      tree orig_cond = cond;\n       cond = build_expr_type_conversion (WANT_INT | WANT_ENUM, cond, true);\n       if (cond == NULL_TREE)\n \t{\n-\t  error (\"switch quantity not an integer\");\n+\t  error_at (cp_expr_loc_or_input_loc (orig_cond),\n+\t\t    \"switch quantity not an integer\");\n \t  cond = error_mark_node;\n \t}\n       /* We want unlowered type here to handle enum bit-fields.  */"}, {"sha": "af6fe82bfbfe83508ba4536794bc5926a37a3def", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522", "patch": "@@ -1,3 +1,7 @@\n+2019-08-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/conversion/simd4.C: Test all the locations.\n+\n 2019-08-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91521 - wrong error with operator->."}, {"sha": "9d43b02db30093a3628f4933faf1d6faf516e9ca", "filename": "gcc/testsuite/g++.dg/conversion/simd4.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fsimd4.C?ref=c6ca0e3e69e2e3681c81d5a5ddd2dcd6f41b7522", "patch": "@@ -20,15 +20,15 @@ foo ()\n   v[b];\t\t// { dg-error \"4:invalid types\" }\n   w[b];\t\t// { dg-error \"4:invalid types\" }\n   new int[t];\n-  new int[u];\t// { dg-error \"new-declarator must have integral\" }\n-  new int[v];\t// { dg-error \"new-declarator must have integral\" }\n-  new int[w];\t// { dg-error \"new-declarator must have integral\" }\n+  new int[u];\t// { dg-error \"11:expression in new-declarator must have integral\" }\n+  new int[v];\t// { dg-error \"11:expression in new-declarator must have integral\" }\n+  new int[w];\t// { dg-error \"11:expression in new-declarator must have integral\" }\n   switch (t) { default: break; }\n-  switch (u) { default: break; }\t// { dg-error \"switch quantity not an integer\" }\n-  switch (v) { default: break; }\t// { dg-error \"switch quantity not an integer\" }\n-  switch (w) { default: break; }\t// { dg-error \"switch quantity not an integer\" }\n+  switch (u) { default: break; }\t// { dg-error \"11:switch quantity not an integer\" }\n+  switch (v) { default: break; }\t// { dg-error \"11:switch quantity not an integer\" }\n+  switch (w) { default: break; }\t// { dg-error \"11:switch quantity not an integer\" }\n   t = ~t;\n-  u = ~u;\t// { dg-error \"wrong type argument to bit-complement\" }\n+  u = ~u;\t// { dg-error \"8:wrong type argument to bit-complement\" }\n   v = ~v;\n-  w = ~w;\t// { dg-error \"wrong type argument to bit-complement\" }\n+  w = ~w;\t// { dg-error \"8:wrong type argument to bit-complement\" }\n }"}]}