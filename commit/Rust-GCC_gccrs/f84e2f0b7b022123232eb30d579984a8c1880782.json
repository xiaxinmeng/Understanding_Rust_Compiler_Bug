{"sha": "f84e2f0b7b022123232eb30d579984a8c1880782", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg0ZTJmMGI3YjAyMjEyMzIzMmViMzBkNTc5OTg0YThjMTg4MDc4Mg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-10T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-10T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "556642f013b09444dddb3ad3594dfabd789b9db6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/556642f013b09444dddb3ad3594dfabd789b9db6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f84e2f0b7b022123232eb30d579984a8c1880782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84e2f0b7b022123232eb30d579984a8c1880782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f84e2f0b7b022123232eb30d579984a8c1880782", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84e2f0b7b022123232eb30d579984a8c1880782/comments", "author": null, "committer": null, "parents": [{"sha": "a25e0b5e6ac8a77a71c229e0a7b744603365b0e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25e0b5e6ac8a77a71c229e0a7b744603365b0e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a25e0b5e6ac8a77a71c229e0a7b744603365b0e9"}], "stats": {"total": 313, "additions": 312, "deletions": 1}, "files": [{"sha": "60fd1be5ed6564f98a4904266e8af8a9f4748c32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84e2f0b7b022123232eb30d579984a8c1880782/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84e2f0b7b022123232eb30d579984a8c1880782/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f84e2f0b7b022123232eb30d579984a8c1880782", "patch": "@@ -1,3 +1,117 @@\n+2021-09-09  qing zhao  <qing.zhao@oracle.com>\n+\n+\t* builtins.c (expand_builtin_memset): Make external visible.\n+\t* builtins.h (expand_builtin_memset): Declare extern.\n+\t* common.opt (ftrivial-auto-var-init=): New option.\n+\t* doc/extend.texi: Document the uninitialized attribute.\n+\t* doc/invoke.texi: Document -ftrivial-auto-var-init.\n+\t* flag-types.h (enum auto_init_type): New enumerated type\n+\tauto_init_type.\n+\t* gimple-fold.c (clear_padding_type): Add one new parameter.\n+\t(clear_padding_union): Likewise.\n+\t(clear_padding_emit_loop): Likewise.\n+\t(clear_type_padding_in_mask): Likewise.\n+\t(gimple_fold_builtin_clear_padding): Handle this new parameter.\n+\t* gimplify.c (gimple_add_init_for_auto_var): New function.\n+\t(gimple_add_padding_init_for_auto_var): New function.\n+\t(is_var_need_auto_init): New function.\n+\t(gimplify_decl_expr): Add initialization to automatic variables per\n+\tusers' requests.\n+\t(gimplify_call_expr): Add one new parameter for call to\n+\t__builtin_clear_padding.\n+\t(gimplify_init_constructor): Add padding initialization in the end.\n+\t* internal-fn.c (INIT_PATTERN_VALUE): New macro.\n+\t(expand_DEFERRED_INIT): New function.\n+\t* internal-fn.def (DEFERRED_INIT): New internal function.\n+\t* tree-cfg.c (verify_gimple_call): Verify calls to .DEFERRED_INIT.\n+\t* tree-sra.c (generate_subtree_deferred_init): New function.\n+\t(scan_function): Avoid setting cannot_scalarize_away_bitmap for\n+\tcalls to .DEFERRED_INIT.\n+\t(sra_modify_deferred_init): New function.\n+\t(sra_modify_function_body): Handle calls to DEFERRED_INIT specially.\n+\t* tree-ssa-structalias.c (find_func_aliases_for_call): Likewise.\n+\t* tree-ssa-uninit.c (warn_uninit): Handle calls to DEFERRED_INIT\n+\tspecially.\n+\t(check_defs): Likewise.\n+\t(warn_uninitialized_vars): Likewise.\n+\t* tree-ssa.c (ssa_undefined_value_p): Likewise.\n+\t* tree.c (build_common_builtin_nodes): Build tree node for\n+\tBUILT_IN_CLEAR_PADDING when needed.\n+\n+2021-09-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-im.c (fill_always_executed_in_1): Walk\n+\tinto all subloops.\n+\n+2021-09-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-im.c (fill_always_executed_in_1): Integrate\n+\tDOM walk from get_loop_body_in_dom_order using a worklist\n+\tapproach.\n+\n+2021-09-09  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config.gcc: Add avx512fp16vlintrin.h.\n+\t* config/i386/avx512fp16intrin.h: (_mm512_add_ph): New intrinsic.\n+\t(_mm512_mask_add_ph): Likewise.\n+\t(_mm512_maskz_add_ph): Likewise.\n+\t(_mm512_sub_ph): Likewise.\n+\t(_mm512_mask_sub_ph): Likewise.\n+\t(_mm512_maskz_sub_ph): Likewise.\n+\t(_mm512_mul_ph): Likewise.\n+\t(_mm512_mask_mul_ph): Likewise.\n+\t(_mm512_maskz_mul_ph): Likewise.\n+\t(_mm512_div_ph): Likewise.\n+\t(_mm512_mask_div_ph): Likewise.\n+\t(_mm512_maskz_div_ph): Likewise.\n+\t(_mm512_add_round_ph): Likewise.\n+\t(_mm512_mask_add_round_ph): Likewise.\n+\t(_mm512_maskz_add_round_ph): Likewise.\n+\t(_mm512_sub_round_ph): Likewise.\n+\t(_mm512_mask_sub_round_ph): Likewise.\n+\t(_mm512_maskz_sub_round_ph): Likewise.\n+\t(_mm512_mul_round_ph): Likewise.\n+\t(_mm512_mask_mul_round_ph): Likewise.\n+\t(_mm512_maskz_mul_round_ph): Likewise.\n+\t(_mm512_div_round_ph): Likewise.\n+\t(_mm512_mask_div_round_ph): Likewise.\n+\t(_mm512_maskz_div_round_ph): Likewise.\n+\t* config/i386/avx512fp16vlintrin.h: New header.\n+\t* config/i386/i386-builtin-types.def (V16HF, V8HF, V32HF):\n+\tAdd new builtin types.\n+\t* config/i386/i386-builtin.def: Add corresponding builtins.\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_args_builtin): Handle new builtin types.\n+\t(ix86_expand_round_builtin): Likewise.\n+\t* config/i386/immintrin.h: Include avx512fp16vlintrin.h\n+\t* config/i386/sse.md (VFH): New mode_iterator.\n+\t(VF2H): Likewise.\n+\t(avx512fmaskmode): Add HF vector modes.\n+\t(avx512fmaskhalfmode): Likewise.\n+\t(<plusminus_insn><mode>3<mask_name><round_name>): Adjust to for\n+\tHF vector modes.\n+\t(*<plusminus_insn><mode>3<mask_name><round_name>): Likewise.\n+\t(mul<mode>3<mask_name><round_name>): Likewise.\n+\t(*mul<mode>3<mask_name><round_name>): Likewise.\n+\t(div<mode>3): Likewise.\n+\t(<sse>_div<mode>3<mask_name><round_name>): Likewise.\n+\t* config/i386/subst.md (SUBST_V): Add HF vector modes.\n+\t(SUBST_A): Likewise.\n+\t(round_mode512bit_condition): Adjust for V32HFmode.\n+\n+2021-09-09  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/101059\n+\t* config/i386/sse.md (reduc_plus_scal_<mode>): Split to ..\n+\t(reduc_plus_scal_v4sf): .. this, New define_expand.\n+\t(reduc_plus_scal_v2df): .. and this, New define_expand.\n+\n+2021-09-09  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/91103\n+\t* config/i386/sse.md (*vec_extract<mode><ssescalarmodelower>_valign):\n+\tNew define_insn.\n+\n 2021-09-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/60318"}, {"sha": "77061197cc619f5a0ff57fb8bf36c86425656322", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84e2f0b7b022123232eb30d579984a8c1880782/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84e2f0b7b022123232eb30d579984a8c1880782/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=f84e2f0b7b022123232eb30d579984a8c1880782", "patch": "@@ -1 +1 @@\n-20210909\n+20210910"}, {"sha": "c39dfe34dabf59068c46ea3804804c7a0307d816", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84e2f0b7b022123232eb30d579984a8c1880782/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84e2f0b7b022123232eb30d579984a8c1880782/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f84e2f0b7b022123232eb30d579984a8c1880782", "patch": "@@ -1,3 +1,8 @@\n+2021-09-09  qing zhao  <qing.zhao@oracle.com>\n+\n+\t* c-attribs.c (handle_uninitialized_attribute): New function.\n+\t(c_common_attribute_table): Add \"uninitialized\" attribute.\n+\n 2021-09-08  liuhongt  <hongtao.liu@intel.com>\n \n \t* c-common.c (excess_precision_mode_join): Update below comments."}, {"sha": "991f3cffad9c499a175e7854f26391dc8e6cde89", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84e2f0b7b022123232eb30d579984a8c1880782/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84e2f0b7b022123232eb30d579984a8c1880782/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f84e2f0b7b022123232eb30d579984a8c1880782", "patch": "@@ -1,3 +1,10 @@\n+2021-09-09  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/98490\n+\t* trans-expr.c (gfc_conv_substring): Do not generate substring\n+\tbounds check for implied do loop index variable before it actually\n+\tbecomes defined.\n+\n 2021-09-08  liuhongt  <hongtao.liu@intel.com>\n \n \t* options.c (gfc_post_options): Issue an error for"}, {"sha": "1ca45f865fc0f4b8025ec7464b5ea6ee6fb0b41e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84e2f0b7b022123232eb30d579984a8c1880782/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84e2f0b7b022123232eb30d579984a8c1880782/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f84e2f0b7b022123232eb30d579984a8c1880782", "patch": "@@ -1,3 +1,188 @@\n+2021-09-09  qing zhao  <qing.zhao@oracle.com>\n+\n+\t* c-c++-common/auto-init-1.c: New test.\n+\t* c-c++-common/auto-init-10.c: New test.\n+\t* c-c++-common/auto-init-11.c: New test.\n+\t* c-c++-common/auto-init-12.c: New test.\n+\t* c-c++-common/auto-init-13.c: New test.\n+\t* c-c++-common/auto-init-14.c: New test.\n+\t* c-c++-common/auto-init-15.c: New test.\n+\t* c-c++-common/auto-init-16.c: New test.\n+\t* c-c++-common/auto-init-2.c: New test.\n+\t* c-c++-common/auto-init-3.c: New test.\n+\t* c-c++-common/auto-init-4.c: New test.\n+\t* c-c++-common/auto-init-5.c: New test.\n+\t* c-c++-common/auto-init-6.c: New test.\n+\t* c-c++-common/auto-init-7.c: New test.\n+\t* c-c++-common/auto-init-8.c: New test.\n+\t* c-c++-common/auto-init-9.c: New test.\n+\t* c-c++-common/auto-init-esra.c: New test.\n+\t* c-c++-common/auto-init-padding-1.c: New test.\n+\t* c-c++-common/auto-init-padding-2.c: New test.\n+\t* c-c++-common/auto-init-padding-3.c: New test.\n+\t* g++.dg/auto-init-uninit-pred-1_a.C: New test.\n+\t* g++.dg/auto-init-uninit-pred-2_a.C: New test.\n+\t* g++.dg/auto-init-uninit-pred-3_a.C: New test.\n+\t* g++.dg/auto-init-uninit-pred-4.C: New test.\n+\t* gcc.dg/auto-init-sra-1.c: New test.\n+\t* gcc.dg/auto-init-sra-2.c: New test.\n+\t* gcc.dg/auto-init-uninit-1.c: New test.\n+\t* gcc.dg/auto-init-uninit-12.c: New test.\n+\t* gcc.dg/auto-init-uninit-13.c: New test.\n+\t* gcc.dg/auto-init-uninit-14.c: New test.\n+\t* gcc.dg/auto-init-uninit-15.c: New test.\n+\t* gcc.dg/auto-init-uninit-16.c: New test.\n+\t* gcc.dg/auto-init-uninit-17.c: New test.\n+\t* gcc.dg/auto-init-uninit-18.c: New test.\n+\t* gcc.dg/auto-init-uninit-19.c: New test.\n+\t* gcc.dg/auto-init-uninit-2.c: New test.\n+\t* gcc.dg/auto-init-uninit-20.c: New test.\n+\t* gcc.dg/auto-init-uninit-21.c: New test.\n+\t* gcc.dg/auto-init-uninit-22.c: New test.\n+\t* gcc.dg/auto-init-uninit-23.c: New test.\n+\t* gcc.dg/auto-init-uninit-24.c: New test.\n+\t* gcc.dg/auto-init-uninit-25.c: New test.\n+\t* gcc.dg/auto-init-uninit-26.c: New test.\n+\t* gcc.dg/auto-init-uninit-3.c: New test.\n+\t* gcc.dg/auto-init-uninit-34.c: New test.\n+\t* gcc.dg/auto-init-uninit-36.c: New test.\n+\t* gcc.dg/auto-init-uninit-37.c: New test.\n+\t* gcc.dg/auto-init-uninit-4.c: New test.\n+\t* gcc.dg/auto-init-uninit-5.c: New test.\n+\t* gcc.dg/auto-init-uninit-6.c: New test.\n+\t* gcc.dg/auto-init-uninit-8.c: New test.\n+\t* gcc.dg/auto-init-uninit-9.c: New test.\n+\t* gcc.dg/auto-init-uninit-A.c: New test.\n+\t* gcc.dg/auto-init-uninit-B.c: New test.\n+\t* gcc.dg/auto-init-uninit-C.c: New test.\n+\t* gcc.dg/auto-init-uninit-H.c: New test.\n+\t* gcc.dg/auto-init-uninit-I.c: New test.\n+\t* gcc.target/aarch64/auto-init-1.c: New test.\n+\t* gcc.target/aarch64/auto-init-2.c: New test.\n+\t* gcc.target/aarch64/auto-init-3.c: New test.\n+\t* gcc.target/aarch64/auto-init-4.c: New test.\n+\t* gcc.target/aarch64/auto-init-5.c: New test.\n+\t* gcc.target/aarch64/auto-init-6.c: New test.\n+\t* gcc.target/aarch64/auto-init-7.c: New test.\n+\t* gcc.target/aarch64/auto-init-8.c: New test.\n+\t* gcc.target/aarch64/auto-init-padding-1.c: New test.\n+\t* gcc.target/aarch64/auto-init-padding-10.c: New test.\n+\t* gcc.target/aarch64/auto-init-padding-11.c: New test.\n+\t* gcc.target/aarch64/auto-init-padding-12.c: New test.\n+\t* gcc.target/aarch64/auto-init-padding-2.c: New test.\n+\t* gcc.target/aarch64/auto-init-padding-3.c: New test.\n+\t* gcc.target/aarch64/auto-init-padding-4.c: New test.\n+\t* gcc.target/aarch64/auto-init-padding-5.c: New test.\n+\t* gcc.target/aarch64/auto-init-padding-6.c: New test.\n+\t* gcc.target/aarch64/auto-init-padding-7.c: New test.\n+\t* gcc.target/aarch64/auto-init-padding-8.c: New test.\n+\t* gcc.target/aarch64/auto-init-padding-9.c: New test.\n+\t* gcc.target/i386/auto-init-1.c: New test.\n+\t* gcc.target/i386/auto-init-2.c: New test.\n+\t* gcc.target/i386/auto-init-21.c: New test.\n+\t* gcc.target/i386/auto-init-22.c: New test.\n+\t* gcc.target/i386/auto-init-23.c: New test.\n+\t* gcc.target/i386/auto-init-24.c: New test.\n+\t* gcc.target/i386/auto-init-3.c: New test.\n+\t* gcc.target/i386/auto-init-4.c: New test.\n+\t* gcc.target/i386/auto-init-5.c: New test.\n+\t* gcc.target/i386/auto-init-6.c: New test.\n+\t* gcc.target/i386/auto-init-7.c: New test.\n+\t* gcc.target/i386/auto-init-8.c: New test.\n+\t* gcc.target/i386/auto-init-padding-1.c: New test.\n+\t* gcc.target/i386/auto-init-padding-10.c: New test.\n+\t* gcc.target/i386/auto-init-padding-11.c: New test.\n+\t* gcc.target/i386/auto-init-padding-12.c: New test.\n+\t* gcc.target/i386/auto-init-padding-2.c: New test.\n+\t* gcc.target/i386/auto-init-padding-3.c: New test.\n+\t* gcc.target/i386/auto-init-padding-4.c: New test.\n+\t* gcc.target/i386/auto-init-padding-5.c: New test.\n+\t* gcc.target/i386/auto-init-padding-6.c: New test.\n+\t* gcc.target/i386/auto-init-padding-7.c: New test.\n+\t* gcc.target/i386/auto-init-padding-8.c: New test.\n+\t* gcc.target/i386/auto-init-padding-9.c: New test.\n+\n+2021-09-09  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/98490\n+\t* gfortran.dg/bounds_check_23.f90: New test.\n+\n+2021-09-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/x86_64/abi/avx512fp16/args.h: Replace long with\n+\tlong long.\n+\t(XMM_T): Rename _long to _longlong and _ulong to _ulonglong.\n+\t(X87_T): Rename _ulong to _ulonglong.\n+\t* gcc.target/x86_64/abi/avx512fp16/defines.h (TYPE_SIZE_LONG):\n+\tDefine to 4 if __ILP32__ is defined.\n+\t(TYPE_SIZE_POINTER): Likewise.\n+\t(TYPE_ALIGN_LONG): Likewise.\n+\t(TYPE_ALIGN_POINTER): Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_3_element_struct_and_unions.c\n+\t(main): Skip test for long if __ILP32__ is defined.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_m64m128_returning.c\n+\t(do_test): Replace _long with _longlong.\n+\t* gcc.target/x86_64/abi/avx512fp16/test_struct_returning.c:\n+\t(check_300): Replace _ulong with _ulonglong.\n+\t* gcc.target/x86_64/abi/avx512fp16/m256h/args.h: Replace long\n+\twith long long.\n+\t(YMM_T): Rename _long to _longlong and _ulong to _ulonglong.\n+\t(X87_T): Rename _ulong to _ulonglong.\n+\t* gcc.target/x86_64/abi/avx512fp16/m512h/args.h: Replace long\n+\twith long long.\n+\t(ZMM_T): Rename _long to _longlong and _ulong to _ulonglong.\n+\t(X87_T): Rename _ulong to _ulonglong.\n+\n+2021-09-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-lim-17.c: New testcase.\n+\n+2021-09-09  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-helper.h: New header file for\n+\tFP16 runtime test.\n+\t* gcc.target/i386/avx512fp16-vaddph-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-vaddph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vdivph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vdivph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vmulph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vmulph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vsubph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-vsubph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vaddph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vaddph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vdivph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vdivph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vmulph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vmulph-1b.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vsubph-1a.c: Ditto.\n+\t* gcc.target/i386/avx512fp16vl-vsubph-1b.c: Ditto.\n+\n+2021-09-09  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add -mavx512vl and test for new intrinsics.\n+\t* gcc.target/i386/avx-2.c: Add -mavx512vl.\n+\t* gcc.target/i386/avx512fp16-11a.c: New test.\n+\t* gcc.target/i386/avx512fp16-11b.c: Ditto.\n+\t* gcc.target/i386/avx512vlfp16-11a.c: Ditto.\n+\t* gcc.target/i386/avx512vlfp16-11b.c: Ditto.\n+\t* gcc.target/i386/sse-13.c: Add test for new builtins.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n+2021-09-09  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/101059\n+\t* gcc.target/i386/sse2-pr101059.c: New test.\n+\t* gcc.target/i386/sse3-pr101059.c: New test.\n+\n+2021-09-09  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/91103\n+\t* gcc.target/i386/pr91103-1.c: New test.\n+\t* gcc.target/i386/pr91103-2.c: New test.\n+\n 2021-09-08  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/102225"}]}