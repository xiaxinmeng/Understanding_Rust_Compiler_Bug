{"sha": "e295e3d981355c61b72eca2ee58864958655cc31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI5NWUzZDk4MTM1NWM2MWI3MmVjYTJlZTU4ODY0OTU4NjU1Y2MzMQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-10-09T17:49:26Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-10-09T17:49:26Z"}, "message": "PR c++/92032 - DR 1601: Promotion of enum with fixed underlying\ttype.\n\nI've been messing with compare_ics recently and noticed that we don't\nimplement CWG 1601, which should be fairly easy.  Thus this patch.\n\nThe motivating example is \n  enum E : char { e };\n  void f(char);\n  void f(int);\n  void g() {\n    f(e);\n  }\nwhere the call to f was ambiguous but we should choose f(char).\n\nCurrently we give f(int) cr_promotion in standard_conversion, while\nf(char) remains cr_std, which is worse than cr_promotion.  So I thought\nI'd give it cr_promotion also and then add a tiebreaker to compare_ics.\n\n\t* call.c (standard_conversion): When converting an enumeration with\n\ta fixed underlying type to the underlying type, give it the cr_promotion\n\trank.\n\t(compare_ics): Implement a tiebreaker as per CWG 1601.\n\n\t* g++.dg/cpp0x/scoped_enum10.C: New test.\n\t* g++.dg/cpp0x/scoped_enum11.C: New test.\n\nFrom-SVN: r276766", "tree": {"sha": "d1b8598399fa993a898daaad3a2f9c7df5232162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1b8598399fa993a898daaad3a2f9c7df5232162"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e295e3d981355c61b72eca2ee58864958655cc31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e295e3d981355c61b72eca2ee58864958655cc31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e295e3d981355c61b72eca2ee58864958655cc31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e295e3d981355c61b72eca2ee58864958655cc31/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb57504a550158913258e5be8ddb991376475efb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb57504a550158913258e5be8ddb991376475efb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb57504a550158913258e5be8ddb991376475efb"}], "stats": {"total": 125, "additions": 123, "deletions": 2}, "files": [{"sha": "4eb182947d261353879cb7fad7a5baaf26600368", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e295e3d981355c61b72eca2ee58864958655cc31/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e295e3d981355c61b72eca2ee58864958655cc31/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e295e3d981355c61b72eca2ee58864958655cc31", "patch": "@@ -1,3 +1,11 @@\n+2019-10-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/92032 - DR 1601: Promotion of enum with fixed underlying\ttype.\n+\t* call.c (standard_conversion): When converting an enumeration with\n+\ta fixed underlying type to the underlying type, give it the cr_promotion\n+\trank.\n+\t(compare_ics): Implement a tiebreaker as per CWG 1601.\n+\n 2019-10-08  Andrew Sutton  <asutton@lock3software.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "33ec6a2dcc0bb9fd499ddaa16ac445d94b1b49c6", "filename": "gcc/cp/call.c", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e295e3d981355c61b72eca2ee58864958655cc31/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e295e3d981355c61b72eca2ee58864958655cc31/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e295e3d981355c61b72eca2ee58864958655cc31", "patch": "@@ -1472,8 +1472,18 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n \n       conv = build_conv (ck_std, to, conv);\n \n-      /* Give this a better rank if it's a promotion.  */\n-      if (same_type_p (to, type_promotes_to (from))\n+      tree underlying_type = NULL_TREE;\n+      if (TREE_CODE (from) == ENUMERAL_TYPE\n+\t  && ENUM_FIXED_UNDERLYING_TYPE_P (from))\n+\tunderlying_type = ENUM_UNDERLYING_TYPE (from);\n+\n+      /* Give this a better rank if it's a promotion.\n+\n+\t To handle CWG 1601, also bump the rank if we are converting\n+\t an enumeration with a fixed underlying type to the underlying\n+\t type.  */\n+      if ((same_type_p (to, type_promotes_to (from))\n+\t   || (underlying_type && same_type_p (to, underlying_type)))\n \t  && next_conversion (conv)->rank <= cr_promotion)\n \tconv->rank = cr_promotion;\n     }\n@@ -10473,6 +10483,31 @@ compare_ics (conversion *ics1, conversion *ics2)\n \t}\n     }\n \n+  /* [over.ics.rank]\n+\n+     Per CWG 1601:\n+     -- A conversion that promotes an enumeration whose underlying type\n+     is fixed to its underlying type is better than one that promotes to\n+     the promoted underlying type, if the two are different.  */\n+  if (ics1->rank == cr_promotion\n+      && ics2->rank == cr_promotion\n+      && UNSCOPED_ENUM_P (from_type1)\n+      && ENUM_FIXED_UNDERLYING_TYPE_P (from_type1)\n+      && same_type_p (from_type1, from_type2))\n+    {\n+      tree utype = ENUM_UNDERLYING_TYPE (from_type1);\n+      tree prom = type_promotes_to (from_type1);\n+      if (!same_type_p (utype, prom))\n+\t{\n+\t  if (same_type_p (to_type1, utype)\n+\t      && same_type_p (to_type2, prom))\n+\t    return 1;\n+\t  else if (same_type_p (to_type2, utype)\n+\t\t   && same_type_p (to_type1, prom))\n+\t    return -1;\n+\t}\n+    }\n+\n   /* Neither conversion sequence is better than the other.  */\n   return 0;\n }"}, {"sha": "f1e3a99233f8488a8f03d4fec1283f4094063ee5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e295e3d981355c61b72eca2ee58864958655cc31/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e295e3d981355c61b72eca2ee58864958655cc31/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e295e3d981355c61b72eca2ee58864958655cc31", "patch": "@@ -1,3 +1,9 @@\n+2019-10-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/92032 - DR 1601: Promotion of enum with fixed underlying\ttype.\n+\t* g++.dg/cpp0x/scoped_enum10.C: New test.\n+\t* g++.dg/cpp0x/scoped_enum11.C: New test.\n+\n 2019-10-08  Andrew Sutton  <asutton@lock3software.com>\n \n \t* lib/target-supports.exp (check_effective_target_concepts): Check"}, {"sha": "054b90850d85a372405eb8b7925032cef6759ec0", "filename": "gcc/testsuite/g++.dg/cpp0x/scoped_enum10.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e295e3d981355c61b72eca2ee58864958655cc31/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e295e3d981355c61b72eca2ee58864958655cc31/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum10.C?ref=e295e3d981355c61b72eca2ee58864958655cc31", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/92032 - DR 1601: Promotion of enumeration with fixed underlying type.\n+// { dg-do compile { target c++11 } }\n+\n+enum E : char { e };\n+enum F : int { f };\n+enum G : long { g };\n+enum H : unsigned { h };\n+\n+int f1(char);\n+void f1(int);\n+\n+void f2(int);\n+int f2(char);\n+\n+int f3(int);\n+void f3(short);\n+\n+int f4(long);\n+void f4(int);\n+\n+void f5(unsigned);\n+int f5(int);\n+\n+int f6(unsigned);\n+void f6(int);\n+\n+void\n+test ()\n+{\n+  int r = 0;\n+  r += f1 (e);\n+  r += f2 (e);\n+  r += f3 (f);\n+  r += f4 (g);\n+  r += f5 (f);\n+  r += f6 (h);\n+}"}, {"sha": "e6dcfbac9d8025e1f7c86cfb138f2a28d46f2441", "filename": "gcc/testsuite/g++.dg/cpp0x/scoped_enum11.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e295e3d981355c61b72eca2ee58864958655cc31/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e295e3d981355c61b72eca2ee58864958655cc31/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum11.C?ref=e295e3d981355c61b72eca2ee58864958655cc31", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/92032 - DR 1601: Promotion of enumeration with fixed underlying type.\n+// { dg-do compile { target c++11 } }\n+\n+enum E1 : long { e1 };\n+enum E2 : short { e2 };\n+\n+int f1(short);\n+void f1(int);\n+\n+void f2(int);\n+int f2(short);\n+\n+void f3(int);\n+int f3(long);\n+\n+int f4(short);\n+void f4(long);\n+\n+int f5(int);\n+void f5(long);\n+\n+int f6(unsigned int); // { dg-message \"candidate\" }\n+void f6(long); // { dg-message \"candidate\" }\n+\n+void\n+fn ()\n+{\n+  int r = 0;\n+  r += f1 (e2);\n+  r += f2 (e2);\n+  r += f3 (e1);\n+  r += f4 (e2);\n+  r += f5 (e2);\n+  r += f6 (e2); // { dg-error \"ambiguous\" }\n+}"}]}