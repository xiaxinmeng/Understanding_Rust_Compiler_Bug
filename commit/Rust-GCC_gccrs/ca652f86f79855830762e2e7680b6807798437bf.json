{"sha": "ca652f86f79855830762e2e7680b6807798437bf", "node_id": "C_kwDOANBUbNoAKGNhNjUyZjg2Zjc5ODU1ODMwNzYyZTJlNzY4MGI2ODA3Nzk4NDM3YmY", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-10-17T17:32:52Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-10-29T07:16:47Z"}, "message": "d: Remove D-specific version definitions from target headers\n\nThis splits up the targetdm sources so that each file only handles one\ntarget platform.\n\nHaving all logic kept in the headers means that they could become out of\nsync when a new target is added (loongarch*-*-linux*) or accidentally\nbroken if some headers in tm_file are changed about.\n\ngcc/ChangeLog:\n\n\t* config.gcc: Split out glibc-d.o into linux-d.o, kfreebsd-d.o,\n\tkopensolaris-d.o, and gnu-d.o.  Split out cygwin-d.o from winnt-d.o.\n\t* config/arm/linux-eabi.h (EXTRA_TARGET_D_OS_VERSIONS): Remove.\n\t* config/gnu.h (GNU_USER_TARGET_D_OS_VERSIONS): Remove.\n\t* config/i386/cygwin.h (EXTRA_TARGET_D_OS_VERSIONS): Remove.\n\t* config/i386/linux-common.h (EXTRA_TARGET_D_OS_VERSIONS): Remove.\n\t* config/i386/mingw32.h (EXTRA_TARGET_D_OS_VERSIONS): Remove.\n\t* config/i386/t-cygming: Add cygwin-d.o.\n\t* config/i386/winnt-d.cc (winnt_d_os_builtins): Only add\n\tMinGW-specific version condition.\n\t* config/kfreebsd-gnu.h (GNU_USER_TARGET_D_OS_VERSIONS): Remove.\n\t* config/kopensolaris-gnu.h (GNU_USER_TARGET_D_OS_VERSIONS): Remove.\n\t* config/linux-android.h (ANDROID_TARGET_D_OS_VERSIONS): Remove.\n\t* config/linux.h (GNU_USER_TARGET_D_OS_VERSIONS): Remove.\n\t* config/mips/linux-common.h (EXTRA_TARGET_D_OS_VERSIONS): Remove.\n\t* config/t-glibc: Remove glibc-d.o, add gnu-d.o, kfreebsd-d.o,\n\tkopensolaris-d.o.\n\t* config/t-linux: Add linux-d.o.\n\t* config/glibc-d.cc: Remove file.\n\t* config/gnu-d.cc: New file.\n\t* config/i386/cygwin-d.cc: New file.\n\t* config/kfreebsd-d.cc: New file.\n\t* config/kopensolaris-d.cc: New file.\n\t* config/linux-d.cc: New file.", "tree": {"sha": "0c046c8e7b074e434d369724a5bdfe8c69bc361e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c046c8e7b074e434d369724a5bdfe8c69bc361e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca652f86f79855830762e2e7680b6807798437bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca652f86f79855830762e2e7680b6807798437bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca652f86f79855830762e2e7680b6807798437bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca652f86f79855830762e2e7680b6807798437bf/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "724d3f926b94672de960dbe88fb699bbdd7fde97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/724d3f926b94672de960dbe88fb699bbdd7fde97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/724d3f926b94672de960dbe88fb699bbdd7fde97"}], "stats": {"total": 440, "additions": 345, "deletions": 95}, "files": [{"sha": "ac1c08f1936bac77782a451db7d3d1f7b956e439", "filename": "gcc/config.gcc", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -882,10 +882,8 @@ case ${target} in\n   esac\n   c_target_objs=\"${c_target_objs} glibc-c.o\"\n   cxx_target_objs=\"${cxx_target_objs} glibc-c.o\"\n-  d_target_objs=\"${d_target_objs} glibc-d.o\"\n   tmake_file=\"${tmake_file} t-glibc\"\n   target_has_targetcm=yes\n-  target_has_targetdm=yes\n   case $target in\n     *-*-*uclibc* | *-*-uclinuxfdpiceabi)\n       ;;\n@@ -894,6 +892,24 @@ case ${target} in\n       gcc_cv_initfini_array=yes\n       ;;\n   esac\n+  case $target in\n+    *-*-*linux*)\n+      d_target_objs=\"${d_target_objs} linux-d.o\"\n+      target_has_targetdm=yes\n+      ;;\n+    *-*-kfreebsd*-gnu)\n+      d_target_objs=\"${d_target_objs} kfreebsd-d.o\"\n+      target_has_targetdm=yes\n+      ;;\n+    *-*-kopensolaris*-gnu)\n+      d_target_objs=\"${d_target_objs} kopensolaris-d.o\"\n+      target_has_targetdm=yes\n+      ;;\n+    *-*-gnu*)\n+      d_target_objs=\"${d_target_objs} gnu-d.o\"\n+      target_has_targetdm=yes\n+      ;;\n+  esac\n   ;;\n *-*-netbsd*)\n   tm_p_file=\"${tm_p_file} netbsd-protos.h\"\n@@ -2054,7 +2070,7 @@ i[34567]86-*-cygwin*)\n \textra_objs=\"${extra_objs} winnt.o winnt-stubs.o\"\n \tc_target_objs=\"${c_target_objs} msformat-c.o\"\n \tcxx_target_objs=\"${cxx_target_objs} winnt-cxx.o msformat-c.o\"\n-\td_target_objs=\"${d_target_objs} winnt-d.o\"\n+\td_target_objs=\"${d_target_objs} cygwin-d.o\"\n \ttarget_has_targetdm=\"yes\"\n \tif test x$enable_threads = xyes; then\n \t\tthread_file='posix'\n@@ -2072,7 +2088,7 @@ x86_64-*-cygwin*)\n \textra_objs=\"${extra_objs} winnt.o winnt-stubs.o\"\n \tc_target_objs=\"${c_target_objs} msformat-c.o\"\n \tcxx_target_objs=\"${cxx_target_objs} winnt-cxx.o msformat-c.o\"\n-\td_target_objs=\"${d_target_objs} winnt-d.o\"\n+\td_target_objs=\"${d_target_objs} cygwin-d.o\"\n \ttarget_has_targetdm=\"yes\"\n \tif test x$enable_threads = xyes; then\n \t\tthread_file='posix'"}, {"sha": "6d803ceca1e402b462562b68de2d667fab5e3f14", "filename": "gcc/config/arm/linux-eabi.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Farm%2Flinux-eabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Farm%2Flinux-eabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-eabi.h?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -30,9 +30,6 @@\n     }\t\t\t\t\t\t\\\n   while (false)\n \n-#define EXTRA_TARGET_D_OS_VERSIONS()\t\t\\\n-  ANDROID_TARGET_D_OS_VERSIONS();\n-\n /* We default to a soft-float ABI so that binaries can run on all\n    target hardware.  If you override this to use the hard-float ABI then\n    change the setting of GLIBC_DYNAMIC_LINKER_DEFAULT as well.  */"}, {"sha": "1c0dff2afe7b0f0bcb00ab98b786afe70d8f7e3b", "filename": "gcc/config/gnu-d.cc", "status": "renamed", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fgnu-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fgnu-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgnu-d.cc?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -1,4 +1,4 @@\n-/* Glibc support needed only by D front-end.\n+/* GNU system support needed only by D front-end.\n    Copyright (C) 2017-2022 Free Software Foundation, Inc.\n \n GCC is free software; you can redistribute it and/or modify it under\n@@ -23,51 +23,43 @@ along with GCC; see the file COPYING3.  If not see\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n \n-/* Implement TARGET_D_OS_VERSIONS for Glibc targets.  */\n+/* Implement TARGET_D_OS_VERSIONS for GNU targets.  */\n \n static void\n-glibc_d_os_builtins (void)\n+gnu_d_os_builtins (void)\n {\n   d_add_builtin_version (\"Posix\");\n-\n-#define builtin_version(TXT) d_add_builtin_version (TXT)\n-\n-#ifdef GNU_USER_TARGET_D_OS_VERSIONS\n-  GNU_USER_TARGET_D_OS_VERSIONS ();\n-#endif\n-\n-#ifdef EXTRA_TARGET_D_OS_VERSIONS\n-  EXTRA_TARGET_D_OS_VERSIONS ();\n-#endif\n+  d_add_builtin_version (\"Hurd\");\n+  d_add_builtin_version (\"CRuntime_Glibc\");\n }\n \n /* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n \n static tree\n-glibc_d_handle_target_object_format (void)\n+gnu_d_handle_target_object_format (void)\n {\n   const char *objfmt = \"elf\";\n \n   return build_string_literal (strlen (objfmt) + 1, objfmt);\n }\n \n-/* Implement TARGET_D_REGISTER_OS_TARGET_INFO for Glibc targets.  */\n+/* Implement TARGET_D_REGISTER_OS_TARGET_INFO for GNU targets.  */\n \n static void\n-glibc_d_register_target_info (void)\n+gnu_d_register_target_info (void)\n {\n   const struct d_target_info_spec handlers[] = {\n-    { \"objectFormat\", glibc_d_handle_target_object_format },\n+    { \"objectFormat\", gnu_d_handle_target_object_format },\n     { NULL, NULL },\n   };\n \n   d_add_target_info_handlers (handlers);\n }\n \n #undef TARGET_D_OS_VERSIONS\n-#define TARGET_D_OS_VERSIONS glibc_d_os_builtins\n+#define TARGET_D_OS_VERSIONS gnu_d_os_builtins\n \n #undef TARGET_D_REGISTER_OS_TARGET_INFO\n-#define TARGET_D_REGISTER_OS_TARGET_INFO glibc_d_register_target_info\n+#define TARGET_D_REGISTER_OS_TARGET_INFO gnu_d_register_target_info\n \n struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;", "previous_filename": "gcc/config/glibc-d.cc"}, {"sha": "e8d72463ab23eb775fc4dcaae787ecfb929e9772", "filename": "gcc/config/gnu.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fgnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fgnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgnu.h?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -31,9 +31,3 @@ along with GCC.  If not, see <http://www.gnu.org/licenses/>.\n \tbuiltin_assert (\"system=unix\");\t\t\\\n \tbuiltin_assert (\"system=posix\");\t\\\n     } while (0)\n-\n-#define GNU_USER_TARGET_D_OS_VERSIONS()\t\t\\\n-    do {\t\t\t\t\t\\\n-\tbuiltin_version (\"Hurd\");\t\t\\\n-\tbuiltin_version (\"CRuntime_Glibc\");\t\\\n-    } while (0)"}, {"sha": "619930b4ff45470a84886b8a7fa63d383aab291e", "filename": "gcc/config/i386/cygwin-d.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fi386%2Fcygwin-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fi386%2Fcygwin-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin-d.cc?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -0,0 +1,83 @@\n+/* Cygwin support needed only by D front-end.\n+   Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define IN_TARGET_CODE 1\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"target.h\"\n+#include \"tm_d.h\"\n+#include \"d/d-target.h\"\n+#include \"d/d-target-def.h\"\n+\n+/* Implement TARGET_D_OS_VERSIONS for Cygwin targets.  */\n+\n+static void\n+cygwin_d_os_builtins (void)\n+{\n+  d_add_builtin_version (\"Windows\");\n+  d_add_builtin_version (\"Cygwin\");\n+  d_add_builtin_version (\"Posix\");\n+  d_add_builtin_version (\"CRuntime_Newlib\");\n+}\n+\n+/* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n+\n+static tree\n+cygwin_d_handle_target_object_format (void)\n+{\n+  const char *objfmt = \"coff\";\n+\n+  return build_string_literal (strlen (objfmt) + 1, objfmt);\n+}\n+\n+/* Implement TARGET_D_REGISTER_OS_TARGET_INFO for Cygwin targets.  */\n+\n+static void\n+cygwin_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"objectFormat\", cygwin_d_handle_target_object_format },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}\n+#undef TARGET_D_OS_VERSIONS\n+#define TARGET_D_OS_VERSIONS cygwin_d_os_builtins\n+\n+#undef TARGET_D_REGISTER_OS_TARGET_INFO\n+#define TARGET_D_REGISTER_OS_TARGET_INFO cygwin_d_register_target_info\n+\n+/* Define TARGET_D_MINFO_SECTION for Cygwin targets.  */\n+\n+#undef TARGET_D_MINFO_SECTION\n+#define TARGET_D_MINFO_SECTION \"minfo\"\n+\n+#undef TARGET_D_MINFO_START_NAME\n+#define TARGET_D_MINFO_START_NAME \"__start_minfo\"\n+\n+#undef TARGET_D_MINFO_END_NAME\n+#define TARGET_D_MINFO_END_NAME \"__stop_minfo\"\n+\n+/* Define TARGET_D_TEMPLATES_ALWAYS_COMDAT for Cygwin targets.  */\n+\n+#undef TARGET_D_TEMPLATES_ALWAYS_COMDAT\n+#define TARGET_D_TEMPLATES_ALWAYS_COMDAT true\n+\n+struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;"}, {"sha": "0a604d65b320645b389e4e9e2eb373a0545cf975", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -29,15 +29,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define EXTRA_TARGET_D_OS_VERSIONS()\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      builtin_version (\"Cygwin\");\t\t\t\t\\\n-      builtin_version (\"Posix\");\t\t\t\t\\\n-      builtin_version (\"CRuntime_Newlib\");\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n #undef CPP_SPEC\n #define CPP_SPEC \"%(cpp_cpu) %{posix:-D_POSIX_SOURCE} \\\n   %{!ansi:-Dunix} \\"}, {"sha": "53cf86f58e77e21d7b0f41019086c5d16131423d", "filename": "gcc/config/i386/linux-common.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fi386%2Flinux-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fi386%2Flinux-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux-common.h?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -27,9 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n     }                                          \\\n   while (0)\n \n-#define EXTRA_TARGET_D_OS_VERSIONS()\t\t\\\n-  ANDROID_TARGET_D_OS_VERSIONS();\n-\n #undef CC1_SPEC\n #define CC1_SPEC \\\n   LINUX_OR_ANDROID_CC (GNU_USER_TARGET_CC1_SPEC, \\"}, {"sha": "19a98c3d995157ab61d824ec72e1f207d5b6d697", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -59,18 +59,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define EXTRA_TARGET_D_OS_VERSIONS()\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      builtin_version (\"MinGW\");\t\t\t\t\\\n-      if (TARGET_64BIT && ix86_abi == MS_ABI)\t\t\t\\\n-\tbuiltin_version (\"Win64\");\t\t\t\t\\\n-      else if (!TARGET_64BIT)\t\t\t\t\t\\\n-\tbuiltin_version (\"Win32\");\t\t\t\t\\\n-      builtin_version (\"CRuntime_Microsoft\");\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n #ifndef TARGET_USE_PTHREAD_BY_DEFAULT\n #define SPEC_PTHREAD1 \"pthread\"\n #define SPEC_PTHREAD2 \"!no-pthread\""}, {"sha": "f892c27b71d66b4a1567d37e18be418d6544603e", "filename": "gcc/config/i386/t-cygming", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fi386%2Ft-cygming", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fi386%2Ft-cygming", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-cygming?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -39,6 +39,10 @@ winnt-stubs.o: $(srcdir)/config/i386/winnt-stubs.cc $(CONFIG_H) $(SYSTEM_H) core\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t$(srcdir)/config/i386/winnt-stubs.cc\n \n+cygwin-d.o: $(srcdir)/config/i386/cygwin-d.cc\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n+\n winnt-d.o: $(srcdir)/config/i386/winnt-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)"}, {"sha": "a1fd3fa1fbe773aa02c19fd96d63172e3b61efac", "filename": "gcc/config/i386/winnt-d.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fi386%2Fwinnt-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fi386%2Fwinnt-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt-d.cc?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -31,12 +31,14 @@ static void\n winnt_d_os_builtins (void)\n {\n   d_add_builtin_version (\"Windows\");\n+  d_add_builtin_version (\"MinGW\");\n \n-#define builtin_version(TXT) d_add_builtin_version (TXT)\n+  if (TARGET_64BIT && ix86_abi == MS_ABI)\n+    d_add_builtin_version (\"Win64\");\n+  else if (!TARGET_64BIT)\n+    d_add_builtin_version (\"Win32\");\n \n-#ifdef EXTRA_TARGET_D_OS_VERSIONS\n-  EXTRA_TARGET_D_OS_VERSIONS ();\n-#endif\n+  d_add_builtin_version (\"CRuntime_Microsoft\");\n }\n \n /* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */"}, {"sha": "0bfa6bd8a56991c69781e5bd2b659b6aca5515f2", "filename": "gcc/config/kfreebsd-d.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fkfreebsd-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fkfreebsd-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fkfreebsd-d.cc?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -0,0 +1,65 @@\n+/* kFreeBSD-based GNU systems support needed only by D front-end.\n+   Copyright (C) 2017-2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_d.h\"\n+#include \"d/d-target.h\"\n+#include \"d/d-target-def.h\"\n+\n+/* Implement TARGET_D_OS_VERSIONS for kFreeBSD targets.  */\n+\n+static void\n+kfreebsd_d_os_builtins (void)\n+{\n+  d_add_builtin_version (\"Posix\");\n+  d_add_builtin_version (\"FreeBSD\");\n+  d_add_builtin_version (\"CRuntime_Glibc\");\n+}\n+\n+/* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n+\n+static tree\n+kfreebsd_d_handle_target_object_format (void)\n+{\n+  const char *objfmt = \"elf\";\n+\n+  return build_string_literal (strlen (objfmt) + 1, objfmt);\n+}\n+\n+/* Implement TARGET_D_REGISTER_OS_TARGET_INFO for kFreeBSD targets.  */\n+\n+static void\n+kfreebsd_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"objectFormat\", kfreebsd_d_handle_target_object_format },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}\n+\n+#undef TARGET_D_OS_VERSIONS\n+#define TARGET_D_OS_VERSIONS kfreebsd_d_os_builtins\n+\n+#undef TARGET_D_REGISTER_OS_TARGET_INFO\n+#define TARGET_D_REGISTER_OS_TARGET_INFO kfreebsd_d_register_target_info\n+\n+struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;"}, {"sha": "c28fcaf54f5b5a7cfc8e787af5ff753b0977f1ce", "filename": "gcc/config/kfreebsd-gnu.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fkfreebsd-gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fkfreebsd-gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fkfreebsd-gnu.h?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -29,12 +29,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define GNU_USER_TARGET_D_OS_VERSIONS()\t\t\\\n-    do {\t\t\t\t\t\\\n-\tbuiltin_version (\"FreeBSD\");\t\t\\\n-\tbuiltin_version (\"CRuntime_Glibc\");\t\\\n-    } while (0)\n-\n #define GNU_USER_DYNAMIC_LINKER        GLIBC_DYNAMIC_LINKER\n #define GNU_USER_DYNAMIC_LINKER32      GLIBC_DYNAMIC_LINKER32\n #define GNU_USER_DYNAMIC_LINKER64      GLIBC_DYNAMIC_LINKER64"}, {"sha": "197471ab92730050df213843e6acca6bef2d4ae1", "filename": "gcc/config/kopensolaris-d.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fkopensolaris-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fkopensolaris-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fkopensolaris-d.cc?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -0,0 +1,65 @@\n+/* kOpenSolaris-based GNU systems support needed only by D front-end.\n+   Copyright (C) 2017-2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_d.h\"\n+#include \"d/d-target.h\"\n+#include \"d/d-target-def.h\"\n+\n+/* Implement TARGET_D_OS_VERSIONS for kOpenSolaris targets.  */\n+\n+static void\n+kopensolaris_d_os_builtins (void)\n+{\n+  d_add_builtin_version (\"Posix\");\n+  d_add_builtin_version (\"Solaris\");\n+  d_add_builtin_version (\"CRuntime_Glibc\");\n+}\n+\n+/* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n+\n+static tree\n+kopensolaris_d_handle_target_object_format (void)\n+{\n+  const char *objfmt = \"elf\";\n+\n+  return build_string_literal (strlen (objfmt) + 1, objfmt);\n+}\n+\n+/* Implement TARGET_D_REGISTER_OS_TARGET_INFO for kOpenSolaris targets.  */\n+\n+static void\n+kopensolaris_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"objectFormat\", kopensolaris_d_handle_target_object_format },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}\n+\n+#undef TARGET_D_OS_VERSIONS\n+#define TARGET_D_OS_VERSIONS kopensolaris_d_os_builtins\n+\n+#undef TARGET_D_REGISTER_OS_TARGET_INFO\n+#define TARGET_D_REGISTER_OS_TARGET_INFO kopensolaris_d_register_target_info\n+\n+struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;"}, {"sha": "3929d4b6955026334f5348321601626c0cf0786b", "filename": "gcc/config/kopensolaris-gnu.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fkopensolaris-gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fkopensolaris-gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fkopensolaris-gnu.h?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -30,11 +30,5 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-#define GNU_USER_TARGET_D_OS_VERSIONS()\t\t\\\n-    do {\t\t\t\t\t\\\n-\tbuiltin_version (\"Solaris\");\t\t\\\n-\tbuiltin_version (\"CRuntime_Glibc\");\t\\\n-    } while (0)\n-\n #undef GNU_USER_DYNAMIC_LINKER\n #define GNU_USER_DYNAMIC_LINKER \"/lib/ld.so.1\""}, {"sha": "f335ceabab53efa517f9274c025d80b4e851d73e", "filename": "gcc/config/linux-android.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Flinux-android.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Flinux-android.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-android.h?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -25,12 +25,6 @@\n \t  builtin_define (\"__ANDROID__\");\t\t\t\\\n     } while (0)\n \n-#define ANDROID_TARGET_D_OS_VERSIONS()\t\t\t\t\\\n-    do {\t\t\t\t\t\t\t\\\n-\tif (TARGET_ANDROID)\t\t\t\t\t\\\n-\t  builtin_version (\"Android\");\t\t\t\t\\\n-    } while (0)\n-\n #if ANDROID_DEFAULT\n # define NOANDROID \"mno-android\"\n #else"}, {"sha": "f2ef2f03e71156425f0060ce674b33561d191adc", "filename": "gcc/config/linux-d.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Flinux-d.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Flinux-d.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-d.cc?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -0,0 +1,78 @@\n+/* Linux support needed only by D front-end.\n+   Copyright (C) 2017-2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_d.h\"\n+#include \"d/d-target.h\"\n+#include \"d/d-target-def.h\"\n+\n+/* Implement TARGET_D_OS_VERSIONS for Linux targets.  */\n+\n+static void\n+linux_d_os_builtins (void)\n+{\n+  d_add_builtin_version (\"Posix\");\n+\n+  d_add_builtin_version (\"linux\");\n+#ifdef TARGET_ANDROID\n+  if (TARGET_ANDROID)\n+    d_add_builtin_version (\"Android\");\n+#endif\n+\n+  if (OPTION_GLIBC)\n+    d_add_builtin_version (\"CRuntime_Glibc\");\n+  else if (OPTION_UCLIBC)\n+    d_add_builtin_version (\"CRuntime_UClibc\");\n+  else if (OPTION_BIONIC)\n+    d_add_builtin_version (\"CRuntime_Bionic\");\n+  else if (OPTION_MUSL)\n+    d_add_builtin_version (\"CRuntime_Musl\");\n+}\n+\n+/* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n+\n+static tree\n+linux_d_handle_target_object_format (void)\n+{\n+  const char *objfmt = \"elf\";\n+\n+  return build_string_literal (strlen (objfmt) + 1, objfmt);\n+}\n+\n+/* Implement TARGET_D_REGISTER_OS_TARGET_INFO for Linux targets.  */\n+\n+static void\n+linux_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"objectFormat\", linux_d_handle_target_object_format },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}\n+\n+#undef TARGET_D_OS_VERSIONS\n+#define TARGET_D_OS_VERSIONS linux_d_os_builtins\n+\n+#undef TARGET_D_REGISTER_OS_TARGET_INFO\n+#define TARGET_D_REGISTER_OS_TARGET_INFO linux_d_register_target_info\n+\n+struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;"}, {"sha": "d1d6753a2f629b8aeb1cc46d67f1aff7bd851c7e", "filename": "gcc/config/linux.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -58,19 +58,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \tbuiltin_assert (\"system=posix\");\t\t\t\\\n     } while (0)\n \n-#define GNU_USER_TARGET_D_OS_VERSIONS()\t\t\t\t\\\n-    do {\t\t\t\t\t\t\t\\\n-\tbuiltin_version (\"linux\");\t\t\t\t\\\n-\tif (OPTION_GLIBC)\t\t\t\t\t\\\n-\t  builtin_version (\"CRuntime_Glibc\");\t\t\t\\\n-\telse if (OPTION_UCLIBC)\t\t\t\t\t\\\n-\t  builtin_version (\"CRuntime_UClibc\");\t\t\t\\\n-\telse if (OPTION_BIONIC)\t\t\t\t\t\\\n-\t  builtin_version (\"CRuntime_Bionic\");\t\t\t\\\n-\telse if (OPTION_MUSL)\t\t\t\t\t\\\n-\t  builtin_version (\"CRuntime_Musl\");\t\t\t\\\n-    } while (0)\n-\n /* Determine which dynamic linker to use depending on whether GLIBC or\n    uClibc or Bionic or musl is the default C library and whether\n    -muclibc or -mglibc or -mbionic or -mmusl has been passed to change"}, {"sha": "b29f4aa3a0e6f0a4f4e443cfdb425249431bc9c8", "filename": "gcc/config/mips/linux-common.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fmips%2Flinux-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Fmips%2Flinux-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux-common.h?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -27,9 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n     ANDROID_TARGET_OS_CPP_BUILTINS();\t\t\t\t\\\n   } while (0)\n \n-#define EXTRA_TARGET_D_OS_VERSIONS()\t\t\t\t\\\n-  ANDROID_TARGET_D_OS_VERSIONS();\n-\n #undef  LINK_SPEC\n #define LINK_SPEC\t\t\t\t\t\t\t\\\n   LINUX_OR_ANDROID_LD (GNU_USER_TARGET_LINK_SPEC,\t\t\t\\"}, {"sha": "f26c37a48ac163c57af8c061e4e190251ec280c2", "filename": "gcc/config/t-glibc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Ft-glibc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Ft-glibc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-glibc?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -20,6 +20,14 @@ glibc-c.o: config/glibc-c.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n-glibc-d.o: config/glibc-d.cc\n+gnu-d.o: config/gnu-d.cc\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n+\n+kfreebsd-d.o: config/kfreebsd-d.cc\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n+\n+kopensolaris-d.o: config/kopensolaris-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)"}, {"sha": "830b9871b837e219787bdf5f854efa677f962d4c", "filename": "gcc/config/t-linux", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca652f86f79855830762e2e7680b6807798437bf/gcc%2Fconfig%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-linux?ref=ca652f86f79855830762e2e7680b6807798437bf", "patch": "@@ -19,3 +19,7 @@\n linux.o: $(srcdir)/config/linux.cc\n \t  $(COMPILE) $<\n \t  $(POSTCOMPILE)\n+\n+linux-d.o: $(srcdir)/config/linux-d.cc\n+\t  $(COMPILE) $<\n+\t  $(POSTCOMPILE)"}]}