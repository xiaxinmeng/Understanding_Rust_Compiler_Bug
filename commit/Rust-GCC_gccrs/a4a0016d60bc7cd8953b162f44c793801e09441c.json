{"sha": "a4a0016d60bc7cd8953b162f44c793801e09441c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRhMDAxNmQ2MGJjN2NkODk1M2IxNjJmNDRjNzkzODAxZTA5NDQxYw==", "commit": {"author": {"name": "Ed Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2012-11-10T00:08:49Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2012-11-10T00:08:49Z"}, "message": "Implement a flag -fext-numeric-literals that allows control of whether GNU...\n\nImplement a flag -fext-numeric-literals that allows control of whether GNU\nnumeric suffix extensions are parsed or passed to C++ as user-defined literals.\n\nFrom-SVN: r193382", "tree": {"sha": "6f4eb9fb1a2dfd8c43e78bcc98930f16138e78c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f4eb9fb1a2dfd8c43e78bcc98930f16138e78c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4a0016d60bc7cd8953b162f44c793801e09441c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4a0016d60bc7cd8953b162f44c793801e09441c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4a0016d60bc7cd8953b162f44c793801e09441c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4a0016d60bc7cd8953b162f44c793801e09441c/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97996ede57cfd5ea8ab2e1b7c2ff04d311894128", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97996ede57cfd5ea8ab2e1b7c2ff04d311894128", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97996ede57cfd5ea8ab2e1b7c2ff04d311894128"}], "stats": {"total": 664, "additions": 605, "deletions": 59}, "files": [{"sha": "dde3d21c3f355e1084a361296080e97760bd9a15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4a0016d60bc7cd8953b162f44c793801e09441c", "patch": "@@ -1,3 +1,8 @@\n+2012-11-09  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR c++/54413\n+\t* doc/invoke.texi: Document f[no-]ext-numeric-literals flag.\n+\n 2012-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* doc/install.texi (sparc64-x-solaris2): Mention MPC as well."}, {"sha": "85e113ca78e3e0dc05345d03a67dacc1c3cfb8f7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a4a0016d60bc7cd8953b162f44c793801e09441c", "patch": "@@ -1,3 +1,9 @@\n+2012-11-09  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR c++/54413\n+\t* c-opts.c (c_common_handle_option): Set new flags.\n+\t* c.opt: Describe new flags.\n+\n 2012-11-09  Jason Merrill  <jason@redhat.com>\n \n \t* c.opt (Wabi-tag): New."}, {"sha": "d86a1651b93ab904ebc673a715922fe01fd03095", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=a4a0016d60bc7cd8953b162f44c793801e09441c", "patch": "@@ -578,6 +578,10 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       set_struct_debug_option (&global_options, loc, arg);\n       break;\n \n+    case OPT_fext_numeric_literals:\n+      cpp_opts->ext_numeric_literals = value;\n+      break;\n+\n     case OPT_idirafter:\n       add_path (xstrdup (arg), AFTER, 0, true);\n       break;\n@@ -660,13 +664,21 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_std_c__11:\n     case OPT_std_gnu__11:\n       if (!preprocessing_asm_p)\n-\tset_std_cxx11 (code == OPT_std_c__11 /* ISO */);\n+\t{\n+\t  set_std_cxx11 (code == OPT_std_c__11 /* ISO */);\n+\t  if (code == OPT_std_c__11)\n+\t    cpp_opts->ext_numeric_literals = 0;\n+\t}\n       break;\n \n     case OPT_std_c__1y:\n     case OPT_std_gnu__1y:\n       if (!preprocessing_asm_p)\n-\tset_std_cxx1y (code == OPT_std_c__11 /* ISO */);\n+\t{\n+\t  set_std_cxx1y (code == OPT_std_c__1y /* ISO */);\n+\t  if (code == OPT_std_c__1y)\n+\t    cpp_opts->ext_numeric_literals = 0;\n+\t}\n       break;\n \n     case OPT_std_c90:"}, {"sha": "1b5c51a44c0fe8f5883727075a39f7b818464afd", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=a4a0016d60bc7cd8953b162f44c793801e09441c", "patch": "@@ -1234,6 +1234,11 @@ femit-struct-debug-detailed=\n C ObjC C++ ObjC++ Joined\n -femit-struct-debug-detailed=<spec-list>\tDetailed reduced debug info for structs\n \n+fext-numeric-literals\n+C++ ObjC++ \n+Interpret imaginary, fixed-point, or other gnu number suffix as the corresponding\n+number literal rather than a user-defined number literal.\n+\n idirafter\n C ObjC C++ ObjC++ Joined Separate MissingArgError(missing path after %qs)\n -idirafter <dir>\tAdd <dir> to the end of the system include path"}, {"sha": "f9bc3bd47d535d38913105dd34b61fd56169e7a8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a4a0016d60bc7cd8953b162f44c793801e09441c", "patch": "@@ -1,3 +1,8 @@\n+2012-11-09  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR c++/54413\n+\t* decl.c (grokfndecl): Adjust calls to interpret_x_suffix.\n+\n 2012-11-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/54859"}, {"sha": "420937e2ad08f2d1602f9b7b1903efc35d945fca", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a4a0016d60bc7cd8953b162f44c793801e09441c", "patch": "@@ -7567,13 +7567,13 @@ grokfndecl (tree ctype,\n \t  suffix = UDLIT_OP_SUFFIX (DECL_NAME (decl));\n \t  if (long_long_unsigned_p)\n \t    {\n-\t      if (cpp_interpret_int_suffix (suffix, strlen (suffix)))\n+\t      if (cpp_interpret_int_suffix (parse_in, suffix, strlen (suffix)))\n \t\twarning (0, \"integer suffix %<%s%>\"\n \t\t\t    \" shadowed by implementation\", suffix);\n \t    }\n \t  else if (long_double_p)\n \t    {\n-\t      if (cpp_interpret_float_suffix (suffix, strlen (suffix)))\n+\t      if (cpp_interpret_float_suffix (parse_in, suffix, strlen (suffix)))\n \t\twarning (0, \"floating point suffix %<%s%>\"\n \t\t\t    \" shadowed by implementation\", suffix);\n \t    }"}, {"sha": "9477ffced5a14bd81a2a8349ca25c2bbc121018f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a4a0016d60bc7cd8953b162f44c793801e09441c", "patch": "@@ -197,6 +197,7 @@ in the following sections.\n -fno-threadsafe-statics -fuse-cxa-atexit  -fno-weak  -nostdinc++ @gol\n -fno-default-inline  -fvisibility-inlines-hidden @gol\n -fvisibility-ms-compat @gol\n+-fext-numeric-literals @gol\n -Wabi  -Wconversion-null  -Wctor-dtor-privacy @gol\n -Wdelete-non-virtual-dtor -Wliteral-suffix -Wnarrowing @gol\n -Wnoexcept -Wnon-virtual-dtor  -Wreorder @gol\n@@ -2515,6 +2516,19 @@ struct A @{\n The compiler rearranges the member initializers for @samp{i}\n and @samp{j} to match the declaration order of the members, emitting\n a warning to that effect.  This warning is enabled by @option{-Wall}.\n+\n+@item -fext-numeric-literals @r{(C++ and Objective-C++ only)}\n+@opindex fext-numeric-literals\n+@opindex fno-ext-numeric-literals\n+Accept imaginary, fixed-point, or machine-defined\n+literal number suffixes as GNU extensions.\n+When this option is turned off these suffixes are treated\n+as C++11 user-defined literal numeric suffixes.\n+This is on by default for all pre-C++11 dialects and all GNU dialects:\n+@option{-std=c++98}, @option{-std=gnu++98}, @option{-std=gnu++11},\n+@option{-std=gnu++1y}.\n+This option is off by default\n+for ISO C++11 onwards (@option{-std=c++11}, ...).\n @end table\n \n The following @option{-W@dots{}} options are not affected by @option{-Wall}."}, {"sha": "a3ea50f81f8f01495453f7a093213b944c8a07a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a4a0016d60bc7cd8953b162f44c793801e09441c", "patch": "@@ -1,3 +1,11 @@\n+2012-11-09  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR c++/54413\n+\t* g++.dg/cpp0x/gnu_fext-numeric-literals.C: New.\n+\t* g++.dg/cpp0x/std_fext-numeric-literals.C: New.\n+\t* g++.dg/cpp0x/gnu_fno-ext-numeric-literals.C: New.\n+\t* g++.dg/cpp0x/std_fno-ext-numeric-literals.C: New.\n+\n 2012-11-09  Siddhesh Poyarekar  <siddhesh@redhat.com>\n \n \t* gcc.dg/Warray-bounds-3.c (bar): Keep array access within"}, {"sha": "f4ccd26a3d275b4b75dc8359189c693ecae09a81", "filename": "gcc/testsuite/g++.dg/cpp0x/gnu_fext-numeric-literals.C", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgnu_fext-numeric-literals.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgnu_fext-numeric-literals.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgnu_fext-numeric-literals.C?ref=a4a0016d60bc7cd8953b162f44c793801e09441c", "patch": "@@ -0,0 +1,115 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+//  Integer imaginary...\n+\n+constexpr unsigned long long\n+operator\"\" i(unsigned long long n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * n + 0; }\n+\n+constexpr unsigned long long\n+operator\"\" I(unsigned long long n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * n + 1; }\n+\n+constexpr unsigned long long\n+operator\"\" j(unsigned long long n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * n + 2; }\n+\n+constexpr unsigned long long\n+operator\"\" J(unsigned long long n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * n + 3; }\n+\n+//  Floating-point imaginary...\n+\n+constexpr long double\n+operator\"\" i(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4.0L * n + 0.0L; }\n+\n+constexpr long double\n+operator\"\" I(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4.0L * n + 1.0L; }\n+\n+constexpr long double\n+operator\"\" j(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4.0L * n + 2.0L; }\n+\n+constexpr long double\n+operator\"\" J(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4.0L * n + 3.0L; }\n+\n+//  Fixed-point...\n+\n+constexpr long double\n+operator\"\" k(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * (n + 1) + 0; }\n+\n+constexpr long double\n+operator\"\" K(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * (n + 1) + 1; }\n+\n+constexpr long double\n+operator\"\" r(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * (n + 1) + 2; }\n+\n+constexpr long double\n+operator\"\" R(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * (n + 1) + 3; }\n+\n+//  Machine-defined...\n+\n+constexpr long double\n+operator\"\" w(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * (n + 2) + 0; }\n+\n+constexpr long double\n+operator\"\" W(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * (n + 2) + 1; }\n+\n+constexpr long double\n+operator\"\" q(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * (n + 2) + 2; }\n+\n+constexpr long double\n+operator\"\" Q(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * (n + 2) + 3; }\n+\n+int\n+main()\n+{\n+  auto ii = 1i;\n+  auto Ii = 1I;\n+  auto ji = 1j;\n+  auto Ji = 1J;\n+\n+  auto ifp = 1.0i;\n+  auto Ifp = 1.0I;\n+  auto jfp = 1.0j;\n+  auto Jfp = 1.0J;\n+\n+  auto kfp = 1.0k; // { dg-error \"fixed-point types not supported\" }\n+  auto Kfp = 1.0K; // { dg-error \"fixed-point types not supported\" }\n+  auto rfp = 1.0r; // { dg-error \"fixed-point types not supported\" }\n+  auto Rfp = 1.0R; // { dg-error \"fixed-point types not supported\" }\n+\n+  auto wfp = 1.0w;\n+  auto Wfp = 1.0W;\n+  auto qfp = 1.0q;\n+  auto Qfp = 1.0Q;\n+}\n+\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 7 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 11 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 15 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 19 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 25 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 29 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 33 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 37 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 43 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 47 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 51 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 55 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 61 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 65 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 69 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 73 }"}, {"sha": "94fd8fce2ad85b686d3567470a05dc846e915274", "filename": "gcc/testsuite/g++.dg/cpp0x/gnu_fno-ext-numeric-literals.C", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgnu_fno-ext-numeric-literals.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgnu_fno-ext-numeric-literals.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgnu_fno-ext-numeric-literals.C?ref=a4a0016d60bc7cd8953b162f44c793801e09441c", "patch": "@@ -0,0 +1,115 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11 -fno-ext-numeric-literals\" }\n+\n+//  Integer imaginary...\n+\n+constexpr unsigned long long\n+operator\"\" i(unsigned long long n)\n+{ return 4 * n + 0; }\n+\n+constexpr unsigned long long\n+operator\"\" I(unsigned long long n)\n+{ return 4 * n + 1; }\n+\n+constexpr unsigned long long\n+operator\"\" j(unsigned long long n)\n+{ return 4 * n + 2; }\n+\n+constexpr unsigned long long\n+operator\"\" J(unsigned long long n)\n+{ return 4 * n + 3; }\n+\n+//  Floating-point imaginary...\n+\n+constexpr long double\n+operator\"\" i(long double n)\n+{ return 4.0L * n + 0.0L; }\n+\n+constexpr long double\n+operator\"\" I(long double n)\n+{ return 4.0L * n + 1.0L; }\n+\n+constexpr long double\n+operator\"\" j(long double n)\n+{ return 4.0L * n + 2.0L; }\n+\n+constexpr long double\n+operator\"\" J(long double n)\n+{ return 4.0L * n + 3.0L; }\n+\n+//  Fixed-point...\n+\n+constexpr long double\n+operator\"\" k(long double n)\n+{ return 4 * (n + 1) + 0; }\n+\n+constexpr long double\n+operator\"\" K(long double n)\n+{ return 4 * (n + 1) + 1; }\n+\n+constexpr long double\n+operator\"\" r(long double n)\n+{ return 4 * (n + 1) + 2; }\n+\n+constexpr long double\n+operator\"\" R(long double n)\n+{ return 4 * (n + 1) + 3; }\n+\n+//  Machine-defined...\n+\n+constexpr long double\n+operator\"\" w(long double n)\n+{ return 4 * (n + 2) + 0; }\n+\n+constexpr long double\n+operator\"\" W(long double n)\n+{ return 4 * (n + 2) + 1; }\n+\n+constexpr long double\n+operator\"\" q(long double n)\n+{ return 4 * (n + 2) + 2; }\n+\n+constexpr long double\n+operator\"\" Q(long double n)\n+{ return 4 * (n + 2) + 3; }\n+\n+int\n+main()\n+{\n+  auto ii = 1i;\n+  auto Ii = 1I;\n+  auto ji = 1j;\n+  auto Ji = 1J;\n+\n+  auto ifp = 1.0i;\n+  auto Ifp = 1.0I;\n+  auto jfp = 1.0j;\n+  auto Jfp = 1.0J;\n+\n+  auto kfp = 1.0k;\n+  auto Kfp = 1.0K;\n+  auto rfp = 1.0r;\n+  auto Rfp = 1.0R;\n+\n+  auto wfp = 1.0w;\n+  auto Wfp = 1.0W;\n+  auto qfp = 1.0q;\n+  auto Qfp = 1.0Q;\n+}\n+\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 7 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 11 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 15 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 19 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 25 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 29 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 33 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 37 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 43 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 47 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 51 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 55 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 61 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 65 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 69 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 73 }"}, {"sha": "d59c181ee7289c473e2bc437f42f671b7bf29f6f", "filename": "gcc/testsuite/g++.dg/cpp0x/std_fext-numeric-literals.C", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fext-numeric-literals.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fext-numeric-literals.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fext-numeric-literals.C?ref=a4a0016d60bc7cd8953b162f44c793801e09441c", "patch": "@@ -0,0 +1,115 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11 -fext-numeric-literals\" }\n+\n+//  Integer imaginary...\n+\n+constexpr unsigned long long\n+operator\"\" i(unsigned long long n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * n + 0; }\n+\n+constexpr unsigned long long\n+operator\"\" I(unsigned long long n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * n + 1; }\n+\n+constexpr unsigned long long\n+operator\"\" j(unsigned long long n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * n + 2; }\n+\n+constexpr unsigned long long\n+operator\"\" J(unsigned long long n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * n + 3; }\n+\n+//  Floating-point imaginary...\n+\n+constexpr long double\n+operator\"\" i(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4.0L * n + 0.0L; }\n+\n+constexpr long double\n+operator\"\" I(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4.0L * n + 1.0L; }\n+\n+constexpr long double\n+operator\"\" j(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4.0L * n + 2.0L; }\n+\n+constexpr long double\n+operator\"\" J(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4.0L * n + 3.0L; }\n+\n+//  Fixed-point...\n+\n+constexpr long double\n+operator\"\" k(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * (n + 1) + 0; }\n+\n+constexpr long double\n+operator\"\" K(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * (n + 1) + 1; }\n+\n+constexpr long double\n+operator\"\" r(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * (n + 1) + 2; }\n+\n+constexpr long double\n+operator\"\" R(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * (n + 1) + 3; }\n+\n+//  Machine-defined...\n+\n+constexpr long double\n+operator\"\" w(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * (n + 2) + 0; }\n+\n+constexpr long double\n+operator\"\" W(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * (n + 2) + 1; }\n+\n+constexpr long double\n+operator\"\" q(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * (n + 2) + 2; }\n+\n+constexpr long double\n+operator\"\" Q(long double n) // { dg-warning \"shadowed by implementation\" }\n+{ return 4 * (n + 2) + 3; }\n+\n+int\n+main()\n+{\n+  auto ii = 1i;\n+  auto Ii = 1I;\n+  auto ji = 1j;\n+  auto Ji = 1J;\n+\n+  auto ifp = 1.0i;\n+  auto Ifp = 1.0I;\n+  auto jfp = 1.0j;\n+  auto Jfp = 1.0J;\n+\n+  auto kfp = 1.0k; // { dg-error \"fixed-point types not supported\" }\n+  auto Kfp = 1.0K; // { dg-error \"fixed-point types not supported\" }\n+  auto rfp = 1.0r; // { dg-error \"fixed-point types not supported\" }\n+  auto Rfp = 1.0R; // { dg-error \"fixed-point types not supported\" }\n+\n+  auto wfp = 1.0w;\n+  auto Wfp = 1.0W;\n+  auto qfp = 1.0q;\n+  auto Qfp = 1.0Q;\n+}\n+\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 7 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 11 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 15 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 19 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 25 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 29 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 33 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 37 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 43 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 47 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 51 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 55 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 61 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 65 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 69 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 73 }"}, {"sha": "488db42caf2f87dde7eb9fefe40ae986d39c6005", "filename": "gcc/testsuite/g++.dg/cpp0x/std_fno-ext-numeric-literals.C", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fno-ext-numeric-literals.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a0016d60bc7cd8953b162f44c793801e09441c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fno-ext-numeric-literals.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstd_fno-ext-numeric-literals.C?ref=a4a0016d60bc7cd8953b162f44c793801e09441c", "patch": "@@ -0,0 +1,115 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+\n+//  Integer imaginary...\n+\n+constexpr unsigned long long\n+operator\"\" i(unsigned long long n)\n+{ return 4 * n + 0; }\n+\n+constexpr unsigned long long\n+operator\"\" I(unsigned long long n)\n+{ return 4 * n + 1; }\n+\n+constexpr unsigned long long\n+operator\"\" j(unsigned long long n)\n+{ return 4 * n + 2; }\n+\n+constexpr unsigned long long\n+operator\"\" J(unsigned long long n)\n+{ return 4 * n + 3; }\n+\n+//  Floating-point imaginary...\n+\n+constexpr long double\n+operator\"\" i(long double n)\n+{ return 4.0L * n + 0.0L; }\n+\n+constexpr long double\n+operator\"\" I(long double n)\n+{ return 4.0L * n + 1.0L; }\n+\n+constexpr long double\n+operator\"\" j(long double n)\n+{ return 4.0L * n + 2.0L; }\n+\n+constexpr long double\n+operator\"\" J(long double n)\n+{ return 4.0L * n + 3.0L; }\n+\n+//  Fixed-point...\n+\n+constexpr long double\n+operator\"\" k(long double n)\n+{ return 4 * (n + 1) + 0; }\n+\n+constexpr long double\n+operator\"\" K(long double n)\n+{ return 4 * (n + 1) + 1; }\n+\n+constexpr long double\n+operator\"\" r(long double n)\n+{ return 4 * (n + 1) + 2; }\n+\n+constexpr long double\n+operator\"\" R(long double n)\n+{ return 4 * (n + 1) + 3; }\n+\n+//  Machine-defined...\n+\n+constexpr long double\n+operator\"\" w(long double n)\n+{ return 4 * (n + 2) + 0; }\n+\n+constexpr long double\n+operator\"\" W(long double n)\n+{ return 4 * (n + 2) + 1; }\n+\n+constexpr long double\n+operator\"\" q(long double n)\n+{ return 4 * (n + 2) + 2; }\n+\n+constexpr long double\n+operator\"\" Q(long double n)\n+{ return 4 * (n + 2) + 3; }\n+\n+int\n+main()\n+{\n+  auto ii = 1i;\n+  auto Ii = 1I;\n+  auto ji = 1j;\n+  auto Ji = 1J;\n+\n+  auto ifp = 1.0i;\n+  auto Ifp = 1.0I;\n+  auto jfp = 1.0j;\n+  auto Jfp = 1.0J;\n+\n+  auto kfp = 1.0k;\n+  auto Kfp = 1.0K;\n+  auto rfp = 1.0r;\n+  auto Rfp = 1.0R;\n+\n+  auto wfp = 1.0w;\n+  auto Wfp = 1.0W;\n+  auto qfp = 1.0q;\n+  auto Qfp = 1.0Q;\n+}\n+\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 7 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 11 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 15 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 19 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 25 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 29 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 33 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 37 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 43 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 47 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 51 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 55 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 61 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 65 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 69 }\n+// { dg-warning \"literal operator suffixes not preceded by\" \"\" { target *-*-* } 73 }"}, {"sha": "4f78ecf761c4373406bff7f5ee01387f1798888c", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a0016d60bc7cd8953b162f44c793801e09441c/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a0016d60bc7cd8953b162f44c793801e09441c/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=a4a0016d60bc7cd8953b162f44c793801e09441c", "patch": "@@ -1,3 +1,15 @@\n+2012-11-09  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR c++/54413\n+\t* include/cpplib.h (cpp_interpret_float_suffix): Add cpp_reader* arg.\n+\t(cpp_interpret_int_suffix): Add cpp_reader* arg.\n+\t* init.c (cpp_create_reader): Iitialize new flags.\n+\t* expr.c (interpret_float_suffix): Use new flags.\n+\t(cpp_interpret_float_suffix): Add cpp_reader* arg.\n+\t(interpret_int_suffix): Use new flags.\n+\t(cpp_interpret_int_suffix): Add cpp_reader* arg.\n+\t(cpp_classify_number): Adjust calls to interpret_x_suffix.\n+\n 2012-10-23  Ian Bolton  <ian.bolton@arm.com>\n \t    Jim MacArthur  <jim.macarthur@arm.com>\n \t    Marcus Shawcroft  <marcus.shawcroft@arm.com>"}, {"sha": "df8d96553fde3a1562f02062fd42593340581f37", "filename": "libcpp/expr.c", "status": "modified", "additions": 65, "deletions": 53, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a0016d60bc7cd8953b162f44c793801e09441c/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a0016d60bc7cd8953b162f44c793801e09441c/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=a4a0016d60bc7cd8953b162f44c793801e09441c", "patch": "@@ -61,8 +61,8 @@ static cpp_num append_digit (cpp_num, int, int, size_t);\n static cpp_num parse_defined (cpp_reader *);\n static cpp_num eval_token (cpp_reader *, const cpp_token *, source_location);\n static struct op *reduce (cpp_reader *, struct op *, enum cpp_ttype);\n-static unsigned int interpret_float_suffix (const uchar *, size_t);\n-static unsigned int interpret_int_suffix (const uchar *, size_t);\n+static unsigned int interpret_float_suffix (cpp_reader *, const uchar *, size_t);\n+static unsigned int interpret_int_suffix (cpp_reader *, const uchar *, size_t);\n static void check_promotion (cpp_reader *, const struct op *);\n \n /* Token type abuse to create unary plus and minus operators.  */\n@@ -87,7 +87,7 @@ static void check_promotion (cpp_reader *, const struct op *);\n    length LEN, possibly zero.  Returns 0 for an invalid suffix, or a\n    flag vector describing the suffix.  */\n static unsigned int\n-interpret_float_suffix (const uchar *s, size_t len)\n+interpret_float_suffix (cpp_reader *pfile, const uchar *s, size_t len)\n {\n   size_t flags;\n   size_t f, d, l, w, q, i;\n@@ -115,55 +115,58 @@ interpret_float_suffix (const uchar *s, size_t len)\n       }\n     }\n \n-  /* Recognize a fixed-point suffix.  */\n-  if (len != 0)\n-    switch (s[len-1])\n-      {\n-      case 'k': case 'K': flags = CPP_N_ACCUM; break;\n-      case 'r': case 'R': flags = CPP_N_FRACT; break;\n-      default: break;\n-      }\n-\n-  /* Continue processing a fixed-point suffix.  The suffix is case\n-     insensitive except for ll or LL.  Order is significant.  */\n-  if (flags)\n+  if (CPP_OPTION (pfile, ext_numeric_literals))\n     {\n-      if (len == 1)\n-\treturn flags;\n-      len--;\n+      /* Recognize a fixed-point suffix.  */\n+      if (len != 0)\n+\tswitch (s[len-1])\n+\t  {\n+\t  case 'k': case 'K': flags = CPP_N_ACCUM; break;\n+\t  case 'r': case 'R': flags = CPP_N_FRACT; break;\n+\t  default: break;\n+\t  }\n \n-      if (*s == 'u' || *s == 'U')\n+      /* Continue processing a fixed-point suffix.  The suffix is case\n+\t insensitive except for ll or LL.  Order is significant.  */\n+      if (flags)\n \t{\n-\t  flags |= CPP_N_UNSIGNED;\n \t  if (len == 1)\n \t    return flags;\n \t  len--;\n-\t  s++;\n-        }\n \n-      switch (*s)\n-      {\n-      case 'h': case 'H':\n-\tif (len == 1)\n-\t  return flags |= CPP_N_SMALL;\n-\tbreak;\n-      case 'l':\n-\tif (len == 1)\n-\t  return flags |= CPP_N_MEDIUM;\n-\tif (len == 2 && s[1] == 'l')\n-\t  return flags |= CPP_N_LARGE;\n-\tbreak;\n-      case 'L':\n-\tif (len == 1)\n-\t  return flags |= CPP_N_MEDIUM;\n-\tif (len == 2 && s[1] == 'L')\n-\t  return flags |= CPP_N_LARGE;\n-\tbreak;\n-      default:\n-\tbreak;\n-      }\n-      /* Anything left at this point is invalid.  */\n-      return 0;\n+\t  if (*s == 'u' || *s == 'U')\n+\t    {\n+\t      flags |= CPP_N_UNSIGNED;\n+\t      if (len == 1)\n+\t\treturn flags;\n+\t      len--;\n+\t      s++;\n+            }\n+\n+\t  switch (*s)\n+\t  {\n+\t  case 'h': case 'H':\n+\t    if (len == 1)\n+\t      return flags |= CPP_N_SMALL;\n+\t    break;\n+\t  case 'l':\n+\t    if (len == 1)\n+\t      return flags |= CPP_N_MEDIUM;\n+\t    if (len == 2 && s[1] == 'l')\n+\t      return flags |= CPP_N_LARGE;\n+\t    break;\n+\t  case 'L':\n+\t    if (len == 1)\n+\t      return flags |= CPP_N_MEDIUM;\n+\t    if (len == 2 && s[1] == 'L')\n+\t      return flags |= CPP_N_LARGE;\n+\t    break;\n+\t  default:\n+\t    break;\n+\t  }\n+\t  /* Anything left at this point is invalid.  */\n+\t  return 0;\n+\t}\n     }\n \n   /* In any remaining valid suffix, the case and order don't matter.  */\n@@ -184,6 +187,12 @@ interpret_float_suffix (const uchar *s, size_t len)\n   if (f + d + l + w + q > 1 || i > 1)\n     return 0;\n \n+  if (i && !CPP_OPTION (pfile, ext_numeric_literals))\n+    return 0;\n+\n+  if ((w || q) && !CPP_OPTION (pfile, ext_numeric_literals))\n+    return 0;\n+\n   return ((i ? CPP_N_IMAGINARY : 0)\n \t  | (f ? CPP_N_SMALL :\n \t     d ? CPP_N_MEDIUM :\n@@ -194,16 +203,16 @@ interpret_float_suffix (const uchar *s, size_t len)\n \n /* Return the classification flags for a float suffix.  */\n unsigned int\n-cpp_interpret_float_suffix (const char *s, size_t len)\n+cpp_interpret_float_suffix (cpp_reader *pfile, const char *s, size_t len)\n {\n-  return interpret_float_suffix ((const unsigned char *)s, len);\n+  return interpret_float_suffix (pfile, (const unsigned char *)s, len);\n }\n \n /* Subroutine of cpp_classify_number.  S points to an integer suffix\n    of length LEN, possibly zero. Returns 0 for an invalid suffix, or a\n    flag vector describing the suffix.  */\n static unsigned int\n-interpret_int_suffix (const uchar *s, size_t len)\n+interpret_int_suffix (cpp_reader *pfile, const uchar *s, size_t len)\n {\n   size_t u, l, i;\n \n@@ -227,6 +236,9 @@ interpret_int_suffix (const uchar *s, size_t len)\n   if (l > 2 || u > 1 || i > 1)\n     return 0;\n \n+  if (i && !CPP_OPTION (pfile, ext_numeric_literals))\n+    return 0;\n+\n   return ((i ? CPP_N_IMAGINARY : 0)\n \t  | (u ? CPP_N_UNSIGNED : 0)\n \t  | ((l == 0) ? CPP_N_SMALL\n@@ -235,9 +247,9 @@ interpret_int_suffix (const uchar *s, size_t len)\n \n /* Return the classification flags for an int suffix.  */\n unsigned int\n-cpp_interpret_int_suffix (const char *s, size_t len)\n+cpp_interpret_int_suffix (cpp_reader *pfile, const char *s, size_t len)\n {\n-  return interpret_int_suffix ((const unsigned char *)s, len);\n+  return interpret_int_suffix (pfile, (const unsigned char *)s, len);\n }\n \n /* Return the string type corresponding to the the input user-defined string\n@@ -455,7 +467,7 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n   /* The suffix may be for decimal fixed-point constants without exponent.  */\n   if (radix != 16 && float_flag == NOT_FLOAT)\n     {\n-      result = interpret_float_suffix (str, limit - str);\n+      result = interpret_float_suffix (pfile, str, limit - str);\n       if ((result & CPP_N_FRACT) || (result & CPP_N_ACCUM))\n \t{\n \t  result |= CPP_N_FLOATING;\n@@ -519,7 +531,7 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n \tSYNTAX_ERROR_AT (virtual_location,\n \t\t\t \"hexadecimal floating constants require an exponent\");\n \n-      result = interpret_float_suffix (str, limit - str);\n+      result = interpret_float_suffix (pfile, str, limit - str);\n       if (result == 0)\n \t{\n \t  if (CPP_OPTION (pfile, user_literals))\n@@ -573,7 +585,7 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n     }\n   else\n     {\n-      result = interpret_int_suffix (str, limit - str);\n+      result = interpret_int_suffix (pfile, str, limit - str);\n       if (result == 0)\n \t{\n \t  if (CPP_OPTION (pfile, user_literals))"}, {"sha": "72415f0348a5fcceea96edcb6fa439389638f295", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a0016d60bc7cd8953b162f44c793801e09441c/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a0016d60bc7cd8953b162f44c793801e09441c/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=a4a0016d60bc7cd8953b162f44c793801e09441c", "patch": "@@ -431,6 +431,10 @@ struct cpp_options\n      ud-suffix which does not beging with an underscore.  */\n   unsigned char warn_literal_suffix;\n \n+  /* Nonzero means interpret imaginary, fixed-point, or other gnu extension\n+     literal number suffixes as user-defined literal number suffixes.  */\n+  unsigned char ext_numeric_literals;\n+\n   /* Holds the name of the target (execution) character set.  */\n   const char *narrow_charset;\n \n@@ -854,10 +858,12 @@ extern unsigned cpp_classify_number (cpp_reader *, const cpp_token *,\n \t\t\t\t     const char **, source_location);\n \n /* Return the classification flags for a float suffix.  */\n-extern unsigned int cpp_interpret_float_suffix (const char *, size_t);\n+extern unsigned int cpp_interpret_float_suffix (cpp_reader *, const char *,\n+\t\t\t\t\t\tsize_t);\n \n /* Return the classification flags for an int suffix.  */\n-extern unsigned int cpp_interpret_int_suffix (const char *, size_t);\n+extern unsigned int cpp_interpret_int_suffix (cpp_reader *, const char *,\n+\t\t\t\t\t      size_t);\n \n /* Evaluate a token classified as category CPP_N_INTEGER.  */\n extern cpp_num cpp_interpret_integer (cpp_reader *, const cpp_token *,"}, {"sha": "ebe51c76c86c64fc93881a5209efd1336c5ba1ed", "filename": "libcpp/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4a0016d60bc7cd8953b162f44c793801e09441c/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4a0016d60bc7cd8953b162f44c793801e09441c/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=a4a0016d60bc7cd8953b162f44c793801e09441c", "patch": "@@ -182,6 +182,7 @@ cpp_create_reader (enum c_lang lang, cpp_hash_table *table,\n   CPP_OPTION (pfile, track_macro_expansion) = 2;\n   CPP_OPTION (pfile, warn_normalize) = normalized_C;\n   CPP_OPTION (pfile, warn_literal_suffix) = 1;\n+  CPP_OPTION (pfile, ext_numeric_literals) = 1;\n \n   /* Default CPP arithmetic to something sensible for the host for the\n      benefit of dumb users like fix-header.  */"}]}