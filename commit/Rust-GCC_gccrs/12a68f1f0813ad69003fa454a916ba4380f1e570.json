{"sha": "12a68f1f0813ad69003fa454a916ba4380f1e570", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJhNjhmMWYwODEzYWQ2OTAwM2ZhNDU0YTkxNmJhNDM4MGYxZTU3MA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-07-08T20:05:17Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-07-08T20:05:17Z"}, "message": "target.h (struct gcc_target): Add insert_attributes.\n\n\t* target.h (struct gcc_target): Add insert_attributes.\n\t* target-def.h (TARGET_INSERT_ATTRIBUTES): Define.\n\t(TARGET_INITIALIZER): Update.\n\t* tree.c, tree.h (default_insert_attributes): New function.\n\tUpdate comments on other default functions to refer to targetm,\n\tnot target.\n\t* doc/tm.texi (INSERT_ATTRIBUTES): Update to document\n\tTARGET_INSERT_ATTRIBUTES.\n\t(SET_DEFAULT_DECL_ATTRIBUTES): Remove.\n\t* c-common.c (decl_attributes): Use targetm.insert_attributes.\n\tDon't use PRAGMA_INSERT_ATTRIBUTES.\n\t* Makefile.in (c-common.o): Depend on $(TARGET_H).\n\t* c-decl.c (start_decl, start_function): Don't call\n\tSET_DEFAULT_DECL_ATTRIBUTES.\n\t* config/c4x/c4x.h (SET_DEFAULT_DECL_ATTRIBUTES): Don't define.\n\t* config/c4x/c4x-protos.h (c4x_set_default_attributes): Don't\n\tdeclare.\n\t* config/c4x/c4x.c (TARGET_INSERT_ATTRIBUTES): Define.\n\t(c4x_check_attribute): Avoid modifying attribute list itself.\n\t(c4x_set_default_attributes): Rename to c4x_insert_attributes.\n\tMake static.\n\t* config/sh/sh.h (PRAGMA_INSERT_ATTRIBUTES): Don't define.\n\t* config/sh/sh-protos.h (sh_pragma_insert_attributes): Don't\n\tdeclare.\n\t* config/sh/sh.c (TARGET_INSERT_ATTRIBUTES): Define.\n\t(sh_pragma_insert_attributes): Rename to sh_insert_attributes.\n\tMake static.\n\t* config/v850/v850.h (SET_DEFAULT_DECL_ATTRIBUTES): Don't define.\n\t* config/v850/v850-protos.h (v850_set_default_decl_attr): Don't\n\tdeclare.\n\t* config/v850/v850.c (TARGET_INSERT_ATTRIBUTES): Define.\n\t(v850_set_default_decl_attr): Rename to v850_insert_attributes.\n\tAdjust parameters.  Make static.\n\ncp:\n\t* decl.c (start_decl): Don't call SET_DEFAULT_DECL_ATTRIBUTES.\n\t(start_function): Don't call SET_DEFAULT_DECL_ATTRIBUTES.  Call\n\tcplus_decl_attributes even if attrs is NULL.\n\t* friend.c (do_friend): Don't call SET_DEFAULT_DECL_ATTRIBUTES.\n\nFrom-SVN: r43851", "tree": {"sha": "3f34b8c8d2166c69d334945b678379689aadbfee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f34b8c8d2166c69d334945b678379689aadbfee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12a68f1f0813ad69003fa454a916ba4380f1e570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a68f1f0813ad69003fa454a916ba4380f1e570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12a68f1f0813ad69003fa454a916ba4380f1e570", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a68f1f0813ad69003fa454a916ba4380f1e570/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7a4cec096b0476bbe39b44fbe3391d11f598728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a4cec096b0476bbe39b44fbe3391d11f598728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7a4cec096b0476bbe39b44fbe3391d11f598728"}], "stats": {"total": 162, "additions": 91, "deletions": 71}, "files": [{"sha": "0dae0789636682800fc45300dda208e78a37f921", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -1,3 +1,39 @@\n+2001-07-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* target.h (struct gcc_target): Add insert_attributes.\n+\t* target-def.h (TARGET_INSERT_ATTRIBUTES): Define.\n+\t(TARGET_INITIALIZER): Update.\n+\t* tree.c, tree.h (default_insert_attributes): New function.\n+\tUpdate comments on other default functions to refer to targetm,\n+\tnot target.\n+\t* doc/tm.texi (INSERT_ATTRIBUTES): Update to document\n+\tTARGET_INSERT_ATTRIBUTES.\n+\t(SET_DEFAULT_DECL_ATTRIBUTES): Remove.\n+\t* c-common.c (decl_attributes): Use targetm.insert_attributes.\n+\tDon't use PRAGMA_INSERT_ATTRIBUTES.\n+\t* Makefile.in (c-common.o): Depend on $(TARGET_H).\n+\t* c-decl.c (start_decl, start_function): Don't call\n+\tSET_DEFAULT_DECL_ATTRIBUTES.\n+\t* config/c4x/c4x.h (SET_DEFAULT_DECL_ATTRIBUTES): Don't define.\n+\t* config/c4x/c4x-protos.h (c4x_set_default_attributes): Don't\n+\tdeclare.\n+\t* config/c4x/c4x.c (TARGET_INSERT_ATTRIBUTES): Define.\n+\t(c4x_check_attribute): Avoid modifying attribute list itself.\n+\t(c4x_set_default_attributes): Rename to c4x_insert_attributes.\n+\tMake static.\n+\t* config/sh/sh.h (PRAGMA_INSERT_ATTRIBUTES): Don't define.\n+\t* config/sh/sh-protos.h (sh_pragma_insert_attributes): Don't\n+\tdeclare.\n+\t* config/sh/sh.c (TARGET_INSERT_ATTRIBUTES): Define.\n+\t(sh_pragma_insert_attributes): Rename to sh_insert_attributes.\n+\tMake static.\n+\t* config/v850/v850.h (SET_DEFAULT_DECL_ATTRIBUTES): Don't define.\n+\t* config/v850/v850-protos.h (v850_set_default_decl_attr): Don't\n+\tdeclare.\n+\t* config/v850/v850.c (TARGET_INSERT_ATTRIBUTES): Define.\n+\t(v850_set_default_decl_attr): Rename to v850_insert_attributes.\n+\tAdjust parameters.  Make static.\n+\n 2001-07-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-common.c (decl_attributes): Only take a single attributes"}, {"sha": "846ddea834e17bd8459a39272846871f339c9e2b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -1236,7 +1236,7 @@ s-under: $(GCC_PASSES)\n \n c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(OBSTACK_H) \\\n \t$(C_COMMON_H) flags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n-\t$(EXPR_H) $(TM_P_H) builtin-types.def\n+\t$(EXPR_H) $(TM_P_H) builtin-types.def $(TARGET_H)\n \n c-format.o : c-format.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n \t$(C_COMMON_H) flags.h toplev.h intl.h diagnostic.h"}, {"sha": "f1ee8b129b7abc0e1d904a186a4fa01a4702f384", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -33,6 +33,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tm_p.h\"\n #include \"obstack.h\"\n #include \"cpplib.h\"\n+#include \"target.h\"\n cpp_reader *parse_in;\t\t/* Declared in c-lex.h.  */\n \n #undef WCHAR_TYPE_SIZE\n@@ -745,17 +746,7 @@ decl_attributes (node, attributes)\n   else if (TYPE_P (node))\n     type = node, is_type = 1;\n \n-#ifdef PRAGMA_INSERT_ATTRIBUTES\n-  /* If the code in c-pragma.c wants to insert some attributes then\n-     allow it to do so.  Do this before allowing machine back ends to\n-     insert attributes, so that they have the opportunity to override\n-     anything done here.  */\n-  PRAGMA_INSERT_ATTRIBUTES (node, & attributes);\n-#endif\n-\n-#ifdef INSERT_ATTRIBUTES\n-  INSERT_ATTRIBUTES (node, & attributes);\n-#endif\n+  (*targetm.insert_attributes) (node, &attributes);\n \n   for (a = attributes; a; a = TREE_CHAIN (a))\n     {"}, {"sha": "9d67d342b5eb10e4e7ffc4e462fda4dce84e6633", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -3447,10 +3447,6 @@ start_decl (declarator, declspecs, initialized, attributes)\n   if (! flag_no_common || ! TREE_PUBLIC (decl))\n     DECL_COMMON (decl) = 1;\n \n-#ifdef SET_DEFAULT_DECL_ATTRIBUTES\n-  SET_DEFAULT_DECL_ATTRIBUTES (decl, attributes);\n-#endif\n-\n   /* Set attributes here so if duplicate decl, will have proper attributes.  */\n   decl_attributes (decl, attributes);\n \n@@ -6021,10 +6017,6 @@ start_function (declspecs, declarator, attributes)\n      except for defining how to inline.  So set DECL_EXTERNAL in that case.  */\n   DECL_EXTERNAL (decl1) = current_extern_inline;\n \n-#ifdef SET_DEFAULT_DECL_ATTRIBUTES\n-  SET_DEFAULT_DECL_ATTRIBUTES (decl1, attributes);\n-#endif\n-\n   /* This function exists in static storage.\n      (This does not mean `static' in the C sense!)  */\n   TREE_STATIC (decl1) = 1;"}, {"sha": "44f47b657377c668f9b8908b6f207a3092b62d50", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -50,8 +50,6 @@ extern void c4x_external_ref (const char *);\n extern void c4x_file_end (FILE *);\n \n #ifdef TREE_CODE\n-extern void c4x_set_default_attributes PARAMS ((tree, tree *));\n-\n extern void c4x_function_arg_advance PARAMS ((CUMULATIVE_ARGS *, \n \t\t\t\t\t      enum machine_mode, tree, int));\n "}, {"sha": "c0500bef2f43d938e7d2d50e9feb547fd60577ef", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -190,11 +190,15 @@ static int c4x_r11_set_p PARAMS ((rtx));\n static int c4x_rptb_valid_p PARAMS ((rtx, rtx));\n static int c4x_label_ref_used_p PARAMS ((rtx, rtx));\n static int c4x_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n+static void c4x_insert_attributes PARAMS ((tree, tree *));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_VALID_TYPE_ATTRIBUTE\n #define TARGET_VALID_TYPE_ATTRIBUTE c4x_valid_type_attribute_p\n \n+#undef TARGET_INSERT_ATTRIBUTES\n+#define TARGET_INSERT_ATTRIBUTES c4x_insert_attributes\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Called to register all of our global variables with the garbage\n@@ -4717,14 +4721,13 @@ c4x_check_attribute (attrib, list, decl, attributes)\n \t != IDENTIFIER_POINTER (DECL_NAME (decl)))\n     list = TREE_CHAIN (list);\n   if (list)\n-    *attributes = chainon (*attributes,\n-\t\t\t   build_tree_list (get_identifier (attrib),\n-\t\t\t\t\t    TREE_VALUE (list)));\n+    *attributes = tree_cons (get_identifier (attrib), TREE_VALUE (list),\n+\t\t\t     *attributes);\n }\n \n \n-void\n-c4x_set_default_attributes(decl, attributes)\n+static void\n+c4x_insert_attributes (decl, attributes)\n      tree decl, *attributes;\n {\n   switch (TREE_CODE (decl))"}, {"sha": "b161d6d76272d2f753683260d56b4ea8cef1ca05", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -2443,9 +2443,6 @@ do {\t\t\t\t\t\t\\\n   c4x_init_pragma (&c_lex);\t\t\t\t\t\t\\\n } while (0)\n \n-#define SET_DEFAULT_DECL_ATTRIBUTES(DECL, ATTRIBUTES) \\\n-  c4x_set_default_attributes (DECL, &ATTRIBUTES)\n-\n /* Assembler Commands for Alignment.  */\n \n #define ASM_OUTPUT_SKIP(FILE, SIZE) \\"}, {"sha": "1200ba2f41a0aaaae031b37f839d70529cb71c36", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -105,7 +105,6 @@ extern rtx sh_va_arg PARAMS ((tree, tree));\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n-extern void sh_pragma_insert_attributes PARAMS ((tree, tree *));\n extern tree sh_build_va_list PARAMS ((void));\n #endif /* TREE_CODE */\n "}, {"sha": "b6885a745245c9d0898738ff95fc9de5421322ff", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -155,6 +155,7 @@ static HOST_WIDE_INT rounded_frame_size PARAMS ((int));\n static rtx mark_constant_pool_use PARAMS ((rtx));\n static int sh_valid_decl_attribute PARAMS ((tree, tree, tree, tree));\n static void sh_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void sh_insert_attributes PARAMS ((tree, tree *));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_VALID_DECL_ATTRIBUTE\n@@ -163,6 +164,9 @@ static void sh_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE sh_output_function_epilogue\n \n+#undef TARGET_INSERT_ATTRIBUTES\n+#define TARGET_INSERT_ATTRIBUTES sh_insert_attributes\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Print the operand address in x to the stream.  */\n@@ -4603,8 +4607,8 @@ sh_pr_nosave_low_regs (pfile)\n \n /* Generate 'handle_interrupt' attribute for decls */\n \n-void\n-sh_pragma_insert_attributes (node, attributes)\n+static void\n+sh_insert_attributes (node, attributes)\n      tree node;\n      tree * attributes;\n {"}, {"sha": "3f6d3e632655e0a313038c4039380b787b04b24c", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -2293,9 +2293,6 @@ extern int current_function_interrupt;\n    for interrupt functions.  */\n extern struct rtx_def *sp_switch;\n \n-#define PRAGMA_INSERT_ATTRIBUTES(node, pattr) \\\n-  sh_pragma_insert_attributes (node, pattr)\n-\n extern int rtx_equal_function_value_matters;\n extern struct rtx_def *fpscr_rtx;\n "}, {"sha": "83622d4932d7c4d047ca15da8c75cfde359550ff", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -73,7 +73,6 @@ extern rtx    v850_va_arg                   PARAMS ((tree, tree));\n \n #ifdef TREE_CODE\n extern void   v850_encode_data_area         PARAMS ((tree));\n-extern void   v850_set_default_decl_attr    PARAMS ((tree));\n extern int    v850_interrupt_function_p     PARAMS ((tree));\n extern void   v850_output_aligned_bss       PARAMS ((FILE *, tree, const char *, int, int));\n extern void   v850_output_common            PARAMS ((FILE *, tree, const char *, int, int));"}, {"sha": "2cbd1155d8c1ec48f9530f32f2364ab488d24121", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -54,6 +54,7 @@ static void substitute_ep_register   PARAMS ((rtx, rtx, int, int, rtx *, rtx *))\n static int  ep_memory_offset         PARAMS ((enum machine_mode, int));\n static void v850_set_data_area       PARAMS ((tree, v850_data_area));\n static int v850_valid_decl_attribute PARAMS ((tree, tree, tree, tree));\n+static void v850_insert_attributes   PARAMS ((tree, tree *));\n \n /* True if the current function has anonymous arguments.  */\n int current_function_anonymous_args;\n@@ -86,6 +87,9 @@ static int v850_interrupt_p = FALSE;\n #undef TARGET_VALID_DECL_ATTRIBUTE\n #define TARGET_VALID_DECL_ATTRIBUTE v850_valid_decl_attribute\n \n+#undef TARGET_INSERT_ATTRIBUTES\n+#define TARGET_INSERT_ATTRIBUTES v850_insert_attributes\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Sometimes certain combinations of command options do not make\n@@ -2653,9 +2657,10 @@ v850_output_local (file, decl, name, size, align)\n \n /* Add data area to the given declaration if a ghs data area pragma is\n    currently in effect (#pragma ghs startXXX/endXXX).  */\n-void\n-v850_set_default_decl_attr (decl)\n+static void\n+v850_insert_attributes (decl, attr_ptr)\n      tree decl;\n+     tree *attr_ptr ATTRIBUTE_UNUSED;\n {\n   if (data_area_stack\n       && data_area_stack->data_area"}, {"sha": "f2a7d7c98cc80f2c2e7651c67479a15cab25e281", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -1486,10 +1486,6 @@ do { char dstr[30];\t\t\t\t\t\\\n    so give the MEM rtx a byte's mode.  */\n #define FUNCTION_MODE QImode\n \n-/* A C statement that assigns default attributes to a newly created DECL.  */\n-#define SET_DEFAULT_DECL_ATTRIBUTES(decl, attr) \\\n-     v850_set_default_decl_attr (decl)\n-\n /* Tell compiler we want to support GHS pragmas */\n #define REGISTER_TARGET_PRAGMAS(PFILE) do {\t\t\t\t  \\\n   cpp_register_pragma_space (PFILE, \"ghs\");\t\t\t\t  \\"}, {"sha": "e07fd96fabca8466ec471452b434e627fe7382cc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -1,3 +1,10 @@\n+2001-07-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* decl.c (start_decl): Don't call SET_DEFAULT_DECL_ATTRIBUTES.\n+\t(start_function): Don't call SET_DEFAULT_DECL_ATTRIBUTES.  Call\n+\tcplus_decl_attributes even if attrs is NULL.\n+\t* friend.c (do_friend): Don't call SET_DEFAULT_DECL_ATTRIBUTES.\n+\n 2001-07-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* decl.c (grokdeclarator), decl2.c (cplus_decl_attributes): Update"}, {"sha": "5de715086267d8f4cc9e73ffe03d0fcb8d91878a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -7220,10 +7220,6 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n       DECL_INITIAL (decl) = error_mark_node;\n     }\n \n-#ifdef SET_DEFAULT_DECL_ATTRIBUTES\n-  SET_DEFAULT_DECL_ATTRIBUTES (decl, attributes);\n-#endif\n-\n   /* Set attributes here so if duplicate decl, will have proper attributes.  */\n   cplus_decl_attributes (decl, attributes, prefix_attributes);\n \n@@ -13436,10 +13432,6 @@ start_function (declspecs, declarator, attrs, flags)\n   if (!DECL_INITIAL (decl1))\n     DECL_INITIAL (decl1) = error_mark_node;\n \n-#ifdef SET_DEFAULT_DECL_ATTRIBUTES\n-  SET_DEFAULT_DECL_ATTRIBUTES (decl1, attrs);\n-#endif\n-\n   /* This function exists in static storage.\n      (This does not mean `static' in the C sense!)  */\n   TREE_STATIC (decl1) = 1;\n@@ -13640,8 +13632,7 @@ start_function (declspecs, declarator, attrs, flags)\n   pushlevel (0);\n   current_binding_level->parm_flag = 1;\n \n-  if (attrs)\n-    cplus_decl_attributes (decl1, NULL_TREE, attrs);\n+  cplus_decl_attributes (decl1, NULL_TREE, attrs);\n \n   /* Promote the value to int before returning it.  */\n   if (c_promoting_integer_type_p (restype))"}, {"sha": "c27a73ecc2ca1f501c702cc4524343fdd780c1d3", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -446,10 +446,6 @@ do_friend (ctype, declarator, decl, parmdecls, attrlist,\n       prefix_attributes = NULL_TREE;\n     } \n \n-#ifdef SET_DEFAULT_DECL_ATTRIBUTES\n-  SET_DEFAULT_DECL_ATTRIBUTES (decl, attributes);\n-#endif\n-  \n   /* Set attributes here so if duplicate decl, will have proper attributes.  */\n   cplus_decl_attributes (decl, attributes, prefix_attributes);\n "}, {"sha": "78d052e02c27f7ffd941ac216891a5bc83ef5f0a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -8413,10 +8413,8 @@ as the expansion of @code{TARGET_MERGE_DECL_ATTRIBUTES}.  This is done\n in @file{i386/cygwin.h} and @file{i386/i386.c}, for example.\n @end deftypefn\n \n-@table @code\n-@findex INSERT_ATTRIBUTES\n-@item INSERT_ATTRIBUTES (@var{node}, @var{attr_ptr})\n-Define this macro if you want to be able to add attributes to a decl\n+@deftypefn {Target Hook} void TARGET_INSERT_ATTRIBUTES (tree @var{node}, tree *@var{attr_ptr})\n+Define this target hook if you want to be able to add attributes to a decl\n when it is being created.  This is normally useful for back ends which\n wish to implement a pragma by using the attributes which correspond to\n the pragma's effect.  The @var{node} argument is the decl which is being\n@@ -8426,12 +8424,9 @@ shared with other decls, but attributes may be chained on the head of\n the list and @code{*@var{attr_ptr}} modified to point to the new\n attributes, or a copy of the list may be made if further changes are\n needed.\n+@end deftypefn\n \n-@findex SET_DEFAULT_DECL_ATTRIBUTES\n-@item SET_DEFAULT_DECL_ATTRIBUTES (@var{decl}, @var{attributes})\n-If defined, a C statement that assigns default attributes to\n-newly defined @var{decl}.\n-\n+@table @code\n @findex DOLLARS_IN_IDENTIFIERS\n @item DOLLARS_IN_IDENTIFIERS\n Define this macro to control use of the character @samp{$} in identifier"}, {"sha": "dbcaecf59cd9d47e91f9bbc1fc316038286b51d8", "filename": "gcc/target-def.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -43,6 +43,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_VALID_TYPE_ATTRIBUTE default_valid_attribute_p\n #define TARGET_COMP_TYPE_ATTRIBUTES default_comp_type_attributes\n #define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES default_set_default_type_attributes\n+#define TARGET_INSERT_ATTRIBUTES default_insert_attributes\n \n /* The whole shebang.  */\n #define TARGET_INITIALIZER\t\t\t\\\n@@ -53,5 +54,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_VALID_DECL_ATTRIBUTE,\t\t\t\\\n   TARGET_VALID_TYPE_ATTRIBUTE,\t\t\t\\\n   TARGET_COMP_TYPE_ATTRIBUTES,\t\t\t\\\n-  TARGET_SET_DEFAULT_TYPE_ATTRIBUTES\t\t\\\n+  TARGET_SET_DEFAULT_TYPE_ATTRIBUTES,\t\t\\\n+  TARGET_INSERT_ATTRIBUTES\t\t\t\\\n }"}, {"sha": "20714c9e0d8b00b37ff6b05a41190f2e762099f7", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -87,6 +87,9 @@ struct gcc_target\n \n   /* Assign default attributes to the newly defined TYPE.  */\n   void (* set_default_type_attributes) PARAMS ((tree type));\n+\n+  /* Insert attributes on the newly created DECL.  */\n+  void (* insert_attributes) PARAMS ((tree decl, tree *attributes));\n };\n \n extern struct gcc_target targetm;"}, {"sha": "7ad066538d0823f205b161681e75bd59218c3697", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -2707,8 +2707,8 @@ build_type_attribute_variant (ttype, attribute)\n   return ttype;\n }\n \n-/* Default value of target.valid_decl_attribute_p and\n-   target.valid_type_attribute_p that always returns false.  */\n+/* Default value of targetm.valid_decl_attribute_p and\n+   targetm.valid_type_attribute_p that always returns false.  */\n \n int\n default_valid_attribute_p PARAMS ((attr_name, attr_args, decl, type))\n@@ -2720,7 +2720,7 @@ default_valid_attribute_p PARAMS ((attr_name, attr_args, decl, type))\n   return 0;\n }\n \n-/* Default value of target.comp_type_attributes that always returns 1.  */\n+/* Default value of targetm.comp_type_attributes that always returns 1.  */\n \n int\n default_comp_type_attributes (type1, type2)\n@@ -2730,7 +2730,7 @@ default_comp_type_attributes (type1, type2)\n   return 1;\n }\n \n-/* Default version of target.set_default_type_attributes that always does\n+/* Default version of targetm.set_default_type_attributes that always does\n    nothing.  */\n \n void\n@@ -2739,6 +2739,14 @@ default_set_default_type_attributes (type)\n {\n }\n \n+/* Default version of targetm.insert_attributes that always does nothing.  */\n+void\n+default_insert_attributes (decl, attr_ptr)\n+     tree decl ATTRIBUTE_UNUSED;\n+     tree *attr_ptr ATTRIBUTE_UNUSED;\n+{\n+}\n+\n /* Return 1 if ATTR_NAME and ATTR_ARGS is valid for either declaration\n    DECL or type TYPE and 0 otherwise.  Validity is determined the\n    target functions valid_decl_attribute and valid_machine_attribute.  */"}, {"sha": "ec7a28746670b0aac0434c591572bd6a6b2db9f2", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a68f1f0813ad69003fa454a916ba4380f1e570/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=12a68f1f0813ad69003fa454a916ba4380f1e570", "patch": "@@ -2046,6 +2046,7 @@ extern tree merge_type_attributes PARAMS ((tree, tree));\n extern int default_valid_attribute_p PARAMS ((tree, tree, tree, tree));\n extern int default_comp_type_attributes PARAMS ((tree, tree));\n extern void default_set_default_type_attributes PARAMS ((tree));\n+extern void default_insert_attributes PARAMS ((tree, tree *));\n \n /* Split a list of declspecs and attributes into two.  */\n "}]}