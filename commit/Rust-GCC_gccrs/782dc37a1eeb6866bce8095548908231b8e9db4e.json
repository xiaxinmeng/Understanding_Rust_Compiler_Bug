{"sha": "782dc37a1eeb6866bce8095548908231b8e9db4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgyZGMzN2ExZWViNjg2NmJjZTgwOTU1NDg5MDgyMzFiOGU5ZGI0ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-05-24T11:26:53Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-05-24T11:26:53Z"}, "message": "erf_2.F90 (dg-options): Add -mieee for alpha*-*-* targets.\n\n\t* gfortran.dg/erf_2.F90 (dg-options): Add -mieee\n\tfor alpha*-*-* targets.\n\nFrom-SVN: r147833", "tree": {"sha": "0cbb67063ff1dd4c1d128519dd149c4cb10414af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cbb67063ff1dd4c1d128519dd149c4cb10414af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/782dc37a1eeb6866bce8095548908231b8e9db4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/782dc37a1eeb6866bce8095548908231b8e9db4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/782dc37a1eeb6866bce8095548908231b8e9db4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/782dc37a1eeb6866bce8095548908231b8e9db4e/comments", "author": null, "committer": null, "parents": [{"sha": "8db7b33f7eabcd7506942698f2e64f3aa2c3a05d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db7b33f7eabcd7506942698f2e64f3aa2c3a05d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db7b33f7eabcd7506942698f2e64f3aa2c3a05d"}], "stats": {"total": 94, "additions": 44, "deletions": 50}, "files": [{"sha": "0fcaff6c3784a4693baa423e7658dd37484bad58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 44, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782dc37a1eeb6866bce8095548908231b8e9db4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782dc37a1eeb6866bce8095548908231b8e9db4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=782dc37a1eeb6866bce8095548908231b8e9db4e", "patch": "@@ -76,7 +76,7 @@\n \taccess in basic block.\n \t(find_data_references_in_bb): New function.\n \t(find_data_references_in_loop): Move code to\n-\tfind_data_references_in_bb    and add a call to it.\n+\tfind_data_references_in_bb and add a call to it.\n \t(compute_data_dependences_for_bb): New function.\n \t* tree-data-ref.h (compute_data_dependences_for_bb): Declare.\n \t* tree-vect-data-refs.c (vect_check_interleaving): Adjust to the case\n@@ -107,7 +107,7 @@\n \tcompute_data_dependences_for_bb to analyze basic blocks.\n \t(vect_create_addr_base_for_vector_ref): Check for outer loop only in\n \tcase of loop vectorization. In case of basic block vectorization use\n-\tdata-ref itself   as  a base.\n+\tdata-ref itself as a base.\n \t(vect_create_data_ref_ptr): In case of basic block vectorization:\n \tdon't advance the pointer, add new statements before the current\n \tstatement.  Adjust function calls.\n@@ -138,7 +138,7 @@\n \tadjust function calls.\n \t(vect_analyze_stmt): Add argument. In case of basic block SLP, check\n \tthat it is not reduction, get vector type, call only supported\n-\tfunctions, skip loop    specific parts.\n+\tfunctions, skip loop specific parts.\n \t(vect_transform_stmt): Check for outer loop only in case of loop\n \tvectorization.\n \t(new_stmt_vec_info): Add new argument and initialize bb_vinfo.\n@@ -209,8 +209,7 @@\n \t(spu_expand_mov): Call spu_split_load and spu_split_store for MEM\n \toperands.\n \t(spu_convert_move): Define.\n-\t(spu_split_load): Use spu_expand_load and change all MEM's to\n-\tTImode.\n+\t(spu_split_load): Use spu_expand_load and change all MEM's to TImode.\n \t(spu_split_store): Change all MEM's to TImode.\n \t(spu_init_expanders): Preallocate registers that correspond to\n \tLAST_VIRTUAL_REG+1 and LAST_VIRTUAL_REG+2 and set them with\n@@ -251,8 +250,7 @@\n \tPR middle-end/38964\n \t* alias.c (write_dependence_p): Do not use TBAA for answering\n \tanti-dependence or output-dependence.\n-\t* tree-ssa-structalias.c (set_uids_in_ptset): Remove TBAA pruning\n-\tcode.\n+\t* tree-ssa-structalias.c (set_uids_in_ptset): Remove TBAA pruning code.\n \t(emit_pointer_definition): Remove.\n \t(emit_alias_warning): Likewise.\n \t(find_what_var_points_to): Remove TBAA pruning code.\n@@ -500,10 +498,9 @@\n \t(*strmovqi_rex_1, *strsetqi_rex_1, *rep_stosqi_rex64,\n \t*cmpstrnqi_nz_rex_1, *cmpstrnqi_rex_1, *strlenqi_rex_1): Clear\n \tprefix_rex attribute.\n-\t* config/i386/predicates.md (ext_QIreg_operand,\n-\tconst128_operand): New predicates.\n-\t(memory_displacement_only_operand): Always return 0 for\n-\tTARGET_64BIT.\n+\t* config/i386/predicates.md (ext_QIreg_operand, const128_operand):\n+\tNew predicates.\n+\t(memory_displacement_only_operand): Always return 0 for TARGET_64BIT.\n \n 2009-05-21  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n@@ -570,8 +567,7 @@\n \n \tPR middle-end/40204\n \t* fold-const.c (fold_binary) <case BIT_AND_EXPR>: Avoid infinite\n-\trecursion if build_int_cst_type returns the same INTEGER_CST as\n-\targ1.\n+\trecursion if build_int_cst_type returns the same INTEGER_CST as arg1.\n \n 2009-05-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -622,18 +618,17 @@\n \twith mismatched comparison modes.\n \n 2009-05-20  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n-    \n+\n \t* config/arm/arm.md (*arm_iorsi3): Refactored for only ARM.\n-        (peephole ior (reg, int) -> mov, ior): Refactored for only ARM.\n-        * config/arm/thumb2.md (*thumb_andsi_not_shiftsi_si): Allow bic\n-        with shifts for Thumb2.\n-        (orsi_notsi): New for orn.\n-        (*thumb_orsi_notshiftsi_si): Allow orn with shifts.\n-        (*thumb2_iorsi3): Rewrite support for iorsi for Thumb2.\n-        * config/arm/arm.c (const_ok_for_op): Split case for IOR for\n-        Thumb2.\n-        (arm_gen_constant): Set can_invert for IOR and Thumb2, Add\n-        comments. Don't invert remainder for IOR.\n+\t(peephole ior (reg, int) -> mov, ior): Refactored for only ARM.\n+\t* config/arm/thumb2.md (*thumb_andsi_not_shiftsi_si): Allow bic\n+\twith shifts for Thumb2.\n+\t(orsi_notsi): New for orn.\n+\t(*thumb_orsi_notshiftsi_si): Allow orn with shifts.\n+\t(*thumb2_iorsi3): Rewrite support for iorsi for Thumb2.\n+\t* config/arm/arm.c (const_ok_for_op): Split case for IOR for Thumb2.\n+\t(arm_gen_constant): Set can_invert for IOR and Thumb2, Add comments.\n+\tDon't invert remainder for IOR.\n \t\n 2009-05-19  Zdenek Dvorak  <ook@ucw.cz>\n \n@@ -973,10 +968,8 @@\n \t* graphite.h (struct name_tree_d): Rename from struct name_tree.\n \tChange all uses.\n \t(struct sese_d): Rename from struct sese.  Change all uses.\n-\t* omega.h (struct eqn_d): Rename from struct eqn.  Change all\n-\tuses.\n-\t(struct omega_pb_d): Rename from struct omega_pb.  Change all\n-\tuses.\n+\t* omega.h (struct eqn_d): Rename from struct eqn.  Change all uses.\n+\t(struct omega_pb_d): Rename from struct omega_pb.  Change all uses.\n \t* optabs.h (struct optab_d): Rename from struct optab.  Change all\n \tuses.\n \t(struct convert_optab_d): Rename from struct convert_optab.\n@@ -1007,8 +1000,7 @@\n \t\n 2009-05-15  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n-\t* ira-conflicts.c (add_insn_allocno_copies): Fix wrong\n-\tconditional.\n+\t* ira-conflicts.c (add_insn_allocno_copies): Fix wrong conditional.\n \t\n 2009-05-15  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n@@ -1026,8 +1018,7 @@\n \n 2009-05-15  Sandra Loosemore  <sandra@codesourcery.com>\n \n-\t* fold-const.c (fold_convert_const_real_from_real): Check for\n-\toverflow.\n+\t* fold-const.c (fold_convert_const_real_from_real): Check for overflow.\n \n 2009-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -1087,7 +1078,7 @@\n \t(ipcp_estimate_growth, ipcp_insert_stage): Likewise.\n \t(ipcp_update_callgraph): Do not touch function bodies.\n \t* ipa-inline.c: Include except.h\n-\tMAX_TIME: New constant.\n+\t(MAX_TIME): New constant.\n \t(overall_insns): Remove\n \t(overall_size, max_benefit): New static variables.\n \t(cgraph_estimate_time_after_inlining): New function.\n@@ -1157,7 +1148,7 @@\n \t(ipcp_estimate_growth, ipcp_insert_stage): Likewise.\n \t(ipcp_update_callgraph): Do not touch function bodies.\n \t* ipa-inline.c: Include except.h\n-\tMAX_TIME: New constant.\n+\t(MAX_TIME): New constant.\n \t(overall_insns): Remove\n \t(overall_size, max_benefit): New static variables.\n \t(cgraph_estimate_time_after_inlining): New function.\n@@ -1389,10 +1380,8 @@\n \t(TARGET_LEGITIMATE_ADDRESS_P): New.\n \n \t* config/iq2000/iq2000.h (GO_IF_LEGITIMATE_ADDRESS): Delete.\n-\t* config/iq2000/iq2000-protos.h (iq2000_legitimate_address_p):\n-\tRemove.\n-\t* config/iq2000/iq2000.c (iq2000_legitimate_address_p):\n-\tMake static.\n+\t* config/iq2000/iq2000-protos.h (iq2000_legitimate_address_p): Remove.\n+\t* config/iq2000/iq2000.c (iq2000_legitimate_address_p): Make static.\n \t(TARGET_LEGITIMATE_ADDRESS_P): New.\n \n \t* config/mn10300/mn10300.h (GO_IF_LEGITIMATE_ADDRESS): Delete.\n@@ -2424,8 +2413,7 @@\n \t* config/arm/arm.c (arm_handle_fndecl_attribute,\n \tarm_handle_isr_attribute): Likewise.\n \t* config/avr/avr.c (avr_handle_progmem_attribute,\n-\tavr_handle_fndecl_attribute, avr_handle_fntype_attribute):\n-\tLikewise.\n+\tavr_handle_fndecl_attribute, avr_handle_fntype_attribute): Likewise.\n \t* config/bfin/bfin.c (handle_int_attribute,\n \tbfin_handle_longcall_attribute, bfin_handle_l1_text_attribute,\n \tbfin_handle_l1_data_attribute, bfin_handle_longcall_attribute,\n@@ -2437,8 +2425,7 @@\n \th8300_handle_eightbit_data_attribute,\n \th8300_handle_tiny_data_attribute): Likewise.\n \t* config/i386/i386.c (ix86_handle_cconv_attribute,\n-\tix86_handle_abi_attribute, ix86_handle_struct_attribute):\n-\tLikewise.\n+\tix86_handle_abi_attribute, ix86_handle_struct_attribute): Likewise.\n \t* config/i386/winnt.c (ix86_handle_shared_attribute,\n \tix86_handle_selectany_attribute): Likewise.\n \t* config/ia64/ia64.c (ia64_handle_model_attribute): Likewise.\n@@ -2467,8 +2454,7 @@\n \n 2009-05-10  Joseph Myers  <joseph@codesourcery.com>\n \n-\t* pretty-print.h (struct pretty_print_info): Add\n-\ttranslate_identifiers.\n+\t* pretty-print.h (struct pretty_print_info): Add translate_identifiers.\n \t(pp_translate_identifiers): New.\n \t(pp_identifier): Only conditionally translate identifier to locale\n \tcharacter set."}, {"sha": "c066bc722f6ffdd2a8600bb40c0a9b0b2105bc85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782dc37a1eeb6866bce8095548908231b8e9db4e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782dc37a1eeb6866bce8095548908231b8e9db4e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=782dc37a1eeb6866bce8095548908231b8e9db4e", "patch": "@@ -1,3 +1,8 @@\n+2009-05-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gfortran.dg/erf_2.F90 (dg-options): Add -mieee\n+\tfor alpha*-*-* targets.\n+\n 2009-05-24  Ira Rosen  <irar@il.ibm.com>\n \n \t* gcc.dg/vect/bb-slp-1.c: New test.\n@@ -289,15 +294,17 @@\n \n 2009-05-14  Laurent GUERBY  <laurent@guerby.net>\n \t\n-        * ada/acats/tests/c3/c38202a.ada: Use Impdef.\n-        * ada/acats/tests/c5/c59002c.ada: Likewise.\n+\t* ada/acats/tests/c3/c38202a.ada: Use Impdef.\n+\t* ada/acats/tests/c5/c59002c.ada: Likewise.\n \t\n 2009-05-13  Taras Glek  <tglek@mozilla.com>\n \n-\t* g++.dg/plugin/attribute_plugin-test-1.C Testcase input for custom attributes and decl smashing\n-\t* g++.dg/plugin/attribute_plugin.c Testcase plugin to test user attributes\n-\t* g++.dg/plugin/dumb_plugin.c Fixed typo\n-\t* g++.dg/plugin/plugin.exp Added attribute_plugin test \n+\t* g++.dg/plugin/attribute_plugin-test-1.C: Testcase input for custom\n+\tattributes and decl smashing.\n+\t* g++.dg/plugin/attribute_plugin.c: Testcase plugin to test user\n+\tattributes.\n+\t* g++.dg/plugin/dumb_plugin.c: Fixed typo.\n+\t* g++.dg/plugin/plugin.exp: Added attribute_plugin test .\n \n 2009-05-14  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "d418d5fccb90d15b8e2807d29016616cdf4c0efc", "filename": "gcc/testsuite/gfortran.dg/erf_2.F90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782dc37a1eeb6866bce8095548908231b8e9db4e/gcc%2Ftestsuite%2Fgfortran.dg%2Ferf_2.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782dc37a1eeb6866bce8095548908231b8e9db4e/gcc%2Ftestsuite%2Fgfortran.dg%2Ferf_2.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ferf_2.F90?ref=782dc37a1eeb6866bce8095548908231b8e9db4e", "patch": "@@ -1,5 +1,6 @@\n ! { dg-do run }\n ! { dg-options \"-fno-range-check -ffree-line-length-none \" }\n+! { dg-options \"-fno-range-check -ffree-line-length-none -mieee\" { target alpha*-*-* } } */\n !\n ! Check that simplification functions and runtime library agree on ERF,\n ! ERFC and ERFC_SCALED."}]}