{"sha": "b9e4e5d1c051b8e1316aae6a85d146804fa36df6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjllNGU1ZDFjMDUxYjhlMTMxNmFhZTZhODVkMTQ2ODA0ZmEzNmRmNg==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2004-03-04T23:19:29Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-03-04T23:19:29Z"}, "message": "PR c++/14425, c++/14426\n\n[gcc/ChangeLog]\n2004-03-04  Ziemowit Laski  <zlaski@apple.com>\n\n        PR c++/14425, c++/14426\n        * config/rs6000/altivec.h (vec_splat_s8, vec_splat_s16,\n        vec_splat_s32, vec_splat_u8, vec_splat_u16, vec_splat_u32):\n        Change C++ definitions to accept a 'const int' argument;\n        the prototypes already do.\n        * config/rs6000/rs6000.c (rs6000_common_init_builtins):\n        Rename v4si_ftype_char, v8hi_ftype_char, v16qi_ftype_char,\n        v4sf_ftype_v4si_char, v4si_ftype_v4sf_char, v4si_ftype_v4si_char,\n        v8hi_ftype_v8hi_char, v16qi_ftype_v16qi_char,\n        v16qi_ftype_v16qi_v16qi_char, v8hi_ftype_v8hi_v8hi_char,\n        v4si_ftype_v4si_v4si_char and v4sf_ftype_v4sf_v4sf_char to\n        end in ..._int; change them to accept an int instead of a char\n        as the last parameter.\n\n[gcc/testsuite/ChangeLog]\n2004-03-04  Ziemowit Laski  <zlaski@apple.com>\n\n        PR c++/14425, c++/14426\n        * g++.dg/ext/altivec-4.C: New test.\n        * g++.dg/ext/altivec-5.C: New test.\n\nFrom-SVN: r78940", "tree": {"sha": "9f8495eda5db266a273daf6068940c9bf0d08d3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f8495eda5db266a273daf6068940c9bf0d08d3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9e4e5d1c051b8e1316aae6a85d146804fa36df6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e4e5d1c051b8e1316aae6a85d146804fa36df6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9e4e5d1c051b8e1316aae6a85d146804fa36df6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e4e5d1c051b8e1316aae6a85d146804fa36df6/comments", "author": null, "committer": null, "parents": [{"sha": "9fc444cc61c77936768d85191cad5d0b76491a37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc444cc61c77936768d85191cad5d0b76491a37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc444cc61c77936768d85191cad5d0b76491a37"}], "stats": {"total": 132, "additions": 90, "deletions": 42}, "files": [{"sha": "2495b339f0772e05987b48e3584f0eab4c22da96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e4e5d1c051b8e1316aae6a85d146804fa36df6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e4e5d1c051b8e1316aae6a85d146804fa36df6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9e4e5d1c051b8e1316aae6a85d146804fa36df6", "patch": "@@ -1,3 +1,19 @@\n+2004-03-04  Ziemowit Laski  <zlaski@apple.com>\n+\n+\tPR c++/14425, c++/14426\n+\t* config/rs6000/altivec.h (vec_splat_s8, vec_splat_s16,\n+\tvec_splat_s32, vec_splat_u8, vec_splat_u16, vec_splat_u32):\n+\tChange C++ definitions to accept a 'const int' argument;\n+\tthe prototypes already do.\n+\t* config/rs6000/rs6000.c (rs6000_common_init_builtins):\n+\tRename v4si_ftype_char, v8hi_ftype_char, v16qi_ftype_char,\n+\tv4sf_ftype_v4si_char, v4si_ftype_v4sf_char, v4si_ftype_v4si_char,\n+\tv8hi_ftype_v8hi_char, v16qi_ftype_v16qi_char,\n+\tv16qi_ftype_v16qi_v16qi_char, v8hi_ftype_v8hi_v8hi_char,\n+\tv4si_ftype_v4si_v4si_char and v4sf_ftype_v4sf_v4sf_char to\n+\tend in ..._int; change them to accept an int instead of a char\n+\tas the last parameter.\n+\n 2004-03-04  Phil Edwards  <phil@codesourcery.com>\n \n \t* genmultilib:  Change '=' to '-' when translating option names"}, {"sha": "2ae567ef3d4ae8ec9e47bf4d6b437aeed483fe2a", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e4e5d1c051b8e1316aae6a85d146804fa36df6/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e4e5d1c051b8e1316aae6a85d146804fa36df6/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=b9e4e5d1c051b8e1316aae6a85d146804fa36df6", "patch": "@@ -4613,47 +4613,47 @@ vec_vspltb (vector unsigned char a1, const int a2)\n /* vec_splat_s8 */\n \n inline vector signed char\n-vec_splat_s8 (const signed char a1)\n+vec_splat_s8 (const int a1)\n {\n   return (vector signed char) __builtin_altivec_vspltisb (a1);\n }\n \n /* vec_splat_s16 */\n \n inline vector signed short\n-vec_splat_s16 (const signed char a1)\n+vec_splat_s16 (const int a1)\n {\n   return (vector signed short) __builtin_altivec_vspltish (a1);\n }\n \n /* vec_splat_s32 */\n \n inline vector signed int\n-vec_splat_s32 (const signed char a1)\n+vec_splat_s32 (const int a1)\n {\n   return (vector signed int) __builtin_altivec_vspltisw (a1);\n }\n \n /* vec_splat_u8 */\n \n inline vector unsigned char\n-vec_splat_u8 (const signed char a1)\n+vec_splat_u8 (const int a1)\n {\n   return (vector unsigned char) __builtin_altivec_vspltisb (a1);\n }\n \n /* vec_splat_u16 */\n \n inline vector unsigned short\n-vec_splat_u16 (const signed char a1)\n+vec_splat_u16 (const int a1)\n {\n   return (vector unsigned short) __builtin_altivec_vspltish (a1);\n }\n \n /* vec_splat_u32 */\n \n inline vector unsigned int\n-vec_splat_u32 (const signed char a1)\n+vec_splat_u32 (const int a1)\n {\n   return (vector unsigned int) __builtin_altivec_vspltisw (a1);\n }"}, {"sha": "b9d9ff4fa0cdb7faf9641d3bcd7fa279cc7f1c8a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e4e5d1c051b8e1316aae6a85d146804fa36df6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e4e5d1c051b8e1316aae6a85d146804fa36df6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b9e4e5d1c051b8e1316aae6a85d146804fa36df6", "patch": "@@ -7015,12 +7015,12 @@ rs6000_common_init_builtins (void)\n     = build_function_type_list (V16QI_type_node,\n \t\t\t\tV16QI_type_node, V16QI_type_node,\n \t\t\t\tV16QI_type_node, NULL_TREE);\n-  tree v4si_ftype_char\n-    = build_function_type_list (V4SI_type_node, char_type_node, NULL_TREE);\n-  tree v8hi_ftype_char\n-    = build_function_type_list (V8HI_type_node, char_type_node, NULL_TREE);\n-  tree v16qi_ftype_char\n-    = build_function_type_list (V16QI_type_node, char_type_node, NULL_TREE);\n+  tree v4si_ftype_int\n+    = build_function_type_list (V4SI_type_node, integer_type_node, NULL_TREE);\n+  tree v8hi_ftype_int\n+    = build_function_type_list (V8HI_type_node, integer_type_node, NULL_TREE);\n+  tree v16qi_ftype_int\n+    = build_function_type_list (V16QI_type_node, integer_type_node, NULL_TREE);\n   tree v8hi_ftype_v16qi\n     = build_function_type_list (V8HI_type_node, V16QI_type_node, NULL_TREE);\n   tree v4sf_ftype_v4sf\n@@ -7078,37 +7078,37 @@ rs6000_common_init_builtins (void)\n   tree v4si_ftype_v4si_v4si\n     = build_function_type_list (V4SI_type_node,\n \t\t\t\tV4SI_type_node, V4SI_type_node, NULL_TREE);\n-  tree v4sf_ftype_v4si_char\n+  tree v4sf_ftype_v4si_int\n     = build_function_type_list (V4SF_type_node,\n-\t\t\t\tV4SI_type_node, char_type_node, NULL_TREE);\n-  tree v4si_ftype_v4sf_char\n+\t\t\t\tV4SI_type_node, integer_type_node, NULL_TREE);\n+  tree v4si_ftype_v4sf_int\n     = build_function_type_list (V4SI_type_node,\n-\t\t\t\tV4SF_type_node, char_type_node, NULL_TREE);\n-  tree v4si_ftype_v4si_char\n+\t\t\t\tV4SF_type_node, integer_type_node, NULL_TREE);\n+  tree v4si_ftype_v4si_int\n     = build_function_type_list (V4SI_type_node,\n-\t\t\t\tV4SI_type_node, char_type_node, NULL_TREE);\n-  tree v8hi_ftype_v8hi_char\n+\t\t\t\tV4SI_type_node, integer_type_node, NULL_TREE);\n+  tree v8hi_ftype_v8hi_int\n     = build_function_type_list (V8HI_type_node,\n-\t\t\t\tV8HI_type_node, char_type_node, NULL_TREE);\n-  tree v16qi_ftype_v16qi_char\n+\t\t\t\tV8HI_type_node, integer_type_node, NULL_TREE);\n+  tree v16qi_ftype_v16qi_int\n     = build_function_type_list (V16QI_type_node,\n-\t\t\t\tV16QI_type_node, char_type_node, NULL_TREE);\n-  tree v16qi_ftype_v16qi_v16qi_char\n+\t\t\t\tV16QI_type_node, integer_type_node, NULL_TREE);\n+  tree v16qi_ftype_v16qi_v16qi_int\n     = build_function_type_list (V16QI_type_node,\n \t\t\t\tV16QI_type_node, V16QI_type_node,\n-\t\t\t\tchar_type_node, NULL_TREE);\n-  tree v8hi_ftype_v8hi_v8hi_char\n+\t\t\t\tinteger_type_node, NULL_TREE);\n+  tree v8hi_ftype_v8hi_v8hi_int\n     = build_function_type_list (V8HI_type_node,\n \t\t\t\tV8HI_type_node, V8HI_type_node,\n-\t\t\t\tchar_type_node, NULL_TREE);\n-  tree v4si_ftype_v4si_v4si_char\n+\t\t\t\tinteger_type_node, NULL_TREE);\n+  tree v4si_ftype_v4si_v4si_int\n     = build_function_type_list (V4SI_type_node,\n \t\t\t\tV4SI_type_node, V4SI_type_node,\n-\t\t\t\tchar_type_node, NULL_TREE);\n-  tree v4sf_ftype_v4sf_v4sf_char\n+\t\t\t\tinteger_type_node, NULL_TREE);\n+  tree v4sf_ftype_v4sf_v4sf_int\n     = build_function_type_list (V4SF_type_node,\n \t\t\t\tV4SF_type_node, V4SF_type_node,\n-\t\t\t\tchar_type_node, NULL_TREE);\n+\t\t\t\tinteger_type_node, NULL_TREE);\n   tree v4sf_ftype_v4sf_v4sf\n     = build_function_type_list (V4SF_type_node,\n \t\t\t\tV4SF_type_node, V4SF_type_node, NULL_TREE);\n@@ -7251,22 +7251,22 @@ rs6000_common_init_builtins (void)\n       /* vchar, vchar, vchar, 4 bit literal.  */\n       else if (mode0 == V16QImode && mode1 == mode0 && mode2 == mode0\n \t       && mode3 == QImode)\n-\ttype = v16qi_ftype_v16qi_v16qi_char;\n+\ttype = v16qi_ftype_v16qi_v16qi_int;\n \n       /* vshort, vshort, vshort, 4 bit literal.  */\n       else if (mode0 == V8HImode && mode1 == mode0 && mode2 == mode0\n \t       && mode3 == QImode)\n-\ttype = v8hi_ftype_v8hi_v8hi_char;\n+\ttype = v8hi_ftype_v8hi_v8hi_int;\n \n       /* vint, vint, vint, 4 bit literal.  */\n       else if (mode0 == V4SImode && mode1 == mode0 && mode2 == mode0\n \t       && mode3 == QImode)\n-\ttype = v4si_ftype_v4si_v4si_char;\n+\ttype = v4si_ftype_v4si_v4si_int;\n \n       /* vfloat, vfloat, vfloat, 4 bit literal.  */\n       else if (mode0 == V4SFmode && mode1 == mode0 && mode2 == mode0\n \t       && mode3 == QImode)\n-\ttype = v4sf_ftype_v4sf_v4sf_char;\n+\ttype = v4sf_ftype_v4sf_v4sf_int;\n \n       else\n \tabort ();\n@@ -7355,23 +7355,23 @@ rs6000_common_init_builtins (void)\n       \n       /* vint, vint, 5 bit literal.  */\n       else if (mode0 == V4SImode && mode1 == V4SImode && mode2 == QImode)\n-\ttype = v4si_ftype_v4si_char;\n+\ttype = v4si_ftype_v4si_int;\n       \n       /* vshort, vshort, 5 bit literal.  */\n       else if (mode0 == V8HImode && mode1 == V8HImode && mode2 == QImode)\n-\ttype = v8hi_ftype_v8hi_char;\n+\ttype = v8hi_ftype_v8hi_int;\n       \n       /* vchar, vchar, 5 bit literal.  */\n       else if (mode0 == V16QImode && mode1 == V16QImode && mode2 == QImode)\n-\ttype = v16qi_ftype_v16qi_char;\n+\ttype = v16qi_ftype_v16qi_int;\n \n       /* vfloat, vint, 5 bit literal.  */\n       else if (mode0 == V4SFmode && mode1 == V4SImode && mode2 == QImode)\n-\ttype = v4sf_ftype_v4si_char;\n+\ttype = v4sf_ftype_v4si_int;\n       \n       /* vint, vfloat, 5 bit literal.  */\n       else if (mode0 == V4SImode && mode1 == V4SFmode && mode2 == QImode)\n-\ttype = v4si_ftype_v4sf_char;\n+\ttype = v4si_ftype_v4sf_int;\n \n       else if (mode0 == V2SImode && mode1 == SImode && mode2 == SImode)\n \ttype = v2si_ftype_int_int;\n@@ -7424,11 +7424,11 @@ rs6000_common_init_builtins (void)\n       mode1 = insn_data[d->icode].operand[1].mode;\n \n       if (mode0 == V4SImode && mode1 == QImode)\n-        type = v4si_ftype_char;\n+        type = v4si_ftype_int;\n       else if (mode0 == V8HImode && mode1 == QImode)\n-        type = v8hi_ftype_char;\n+        type = v8hi_ftype_int;\n       else if (mode0 == V16QImode && mode1 == QImode)\n-        type = v16qi_ftype_char;\n+        type = v16qi_ftype_int;\n       else if (mode0 == V4SFmode && mode1 == V4SFmode)\n \ttype = v4sf_ftype_v4sf;\n       else if (mode0 == V8HImode && mode1 == V16QImode)"}, {"sha": "bd7dfe54716c2082ef42884d0288b70b3e6a2a5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e4e5d1c051b8e1316aae6a85d146804fa36df6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e4e5d1c051b8e1316aae6a85d146804fa36df6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9e4e5d1c051b8e1316aae6a85d146804fa36df6", "patch": "@@ -1,3 +1,9 @@\n+2004-03-04  Ziemowit Laski  <zlaski@apple.com>\n+\n+\tPR c++/14425, c++/14426\n+\t* g++.dg/ext/altivec-4.C: New test.\n+\t* g++.dg/ext/altivec-5.C: New test.\n+\n 2004-03-04  Geoffrey Keating  <geoffk@apple.com>\n \n \t* g++.old-deja/g++.other/linkage1.C: Expect errors about"}, {"sha": "f6d84620810fe67196829d5b311e88af09e27d09", "filename": "gcc/testsuite/g++.dg/ext/altivec-4.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e4e5d1c051b8e1316aae6a85d146804fa36df6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e4e5d1c051b8e1316aae6a85d146804fa36df6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-4.C?ref=b9e4e5d1c051b8e1316aae6a85d146804fa36df6", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-options \"-maltivec\" } */\n+\n+/* PR c++/14425 */\n+\n+#include <altivec.h>\n+\n+vector unsigned int splat0(vector unsigned int x)\n+{\n+    return vec_splat(x, 0);\n+}"}, {"sha": "213bde00a8e48ee6e0d737560153db33e1e80deb", "filename": "gcc/testsuite/g++.dg/ext/altivec-5.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e4e5d1c051b8e1316aae6a85d146804fa36df6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e4e5d1c051b8e1316aae6a85d146804fa36df6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-5.C?ref=b9e4e5d1c051b8e1316aae6a85d146804fa36df6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-options \"-maltivec\" } */\n+\n+/* PR c++/14426 */\n+\n+#include <altivec.h>\n+\n+vector unsigned int splat0u()\n+{\n+    return vec_splat_u32(0);\n+}\n+vector int splat0s()\n+{\n+    return vec_splat_s32(0);\n+}"}]}