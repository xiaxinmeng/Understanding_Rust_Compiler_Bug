{"sha": "35e711d3df0277e462f64368ddb11687bf4bbc64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVlNzExZDNkZjAyNzdlNDYyZjY0MzY4ZGRiMTE2ODdiZjRiYmM2NA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-09-24T08:19:17Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-09-24T08:19:17Z"}, "message": "In gcc/:\n\n        * doc/invoke.texi (-fno-nil-receivers): Tidied up line to remove\n        underfull hbox in DVI output.\n        (-fobjc-class-cxx-cdtors): Same change.\n        (-fobjc-exceptions): Tidied up documentation.  Explain what the\n        option does, but moved the (lenghty) description of the exception\n        syntax into objc.texi.\n        (-fobjc-gc): Explain that the option is not useful with the GNU\n        runtime.\n        (-fzero-link): Explain that the GNU runtime always works in\n        \"zero-link\" mode.\n        * doc/objc.texi: All sections: simplified @node declarations\n        removing specification of next, previous, up node.\n        (Objective-C): Updated introduction.\n        (Garbage Collection): Updated.  The bohem-gc library is now\n        included in gcc itself.  Mention that this section only applies to\n        the GNU Objective-C runtime.\n        (compatibility_alias): Small tidy up.\n        (Exceptions): New section mostly containing text previously in the\n        description of the -fobjc-exception command-line option.\n        (Synchronization): Same.\n\nFrom-SVN: r164586", "tree": {"sha": "aa7dc466862449c069c3df648780fb5daef77333", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa7dc466862449c069c3df648780fb5daef77333"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35e711d3df0277e462f64368ddb11687bf4bbc64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35e711d3df0277e462f64368ddb11687bf4bbc64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35e711d3df0277e462f64368ddb11687bf4bbc64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35e711d3df0277e462f64368ddb11687bf4bbc64/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1570cec9ba0489df6027e3f8f8e100b70660473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1570cec9ba0489df6027e3f8f8e100b70660473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1570cec9ba0489df6027e3f8f8e100b70660473"}], "stats": {"total": 309, "additions": 180, "deletions": 129}, "files": [{"sha": "6f3e58cb979766b72d3d262df3922738ecc58593", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e711d3df0277e462f64368ddb11687bf4bbc64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e711d3df0277e462f64368ddb11687bf4bbc64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35e711d3df0277e462f64368ddb11687bf4bbc64", "patch": "@@ -1,3 +1,26 @@\n+2010-09-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* doc/invoke.texi (-fno-nil-receivers): Tidied up line to remove\n+\tunderfull hbox in DVI output.\n+\t(-fobjc-class-cxx-cdtors): Same change.\n+\t(-fobjc-exceptions): Tidied up documentation.  Explain what the\n+\toption does, but moved the (lenghty) description of the exception\n+\tsyntax into objc.texi.\n+\t(-fobjc-gc): Explain that the option is not useful with the GNU\n+\truntime.\n+\t(-fzero-link): Explain that the GNU runtime always works in\n+\t\"zero-link\" mode.\n+\t* doc/objc.texi: All sections: simplified @node declarations\n+\tremoving specification of next, previous, up node.\n+\t(Objective-C): Updated introduction.\n+\t(Garbage Collection): Updated.  The bohem-gc library is now\n+\tincluded in gcc itself.  Mention that this section only applies to\n+\tthe GNU Objective-C runtime.\n+\t(compatibility_alias): Small tidy up.\n+\t(Exceptions): New section mostly containing text previously in the\n+\tdescription of the -fobjc-exception command-line option.\n+\t(Synchronization): Same.\n+\t\n 2010-09-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (ix86_code_end): Move the initialization of"}, {"sha": "ee62b1b9569b53579ebf1a85ca4747d0c40ad60b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 27, "deletions": 104, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e711d3df0277e462f64368ddb11687bf4bbc64/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e711d3df0277e462f64368ddb11687bf4bbc64/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=35e711d3df0277e462f64368ddb11687bf4bbc64", "patch": "@@ -2516,11 +2516,11 @@ used.\n \n @item -fno-nil-receivers\n @opindex fno-nil-receivers\n-Assume that all Objective-C message dispatches (e.g.,\n-@code{[receiver message:arg]}) in this translation unit ensure that the receiver\n-is not @code{nil}.  This allows for more efficient entry points in the runtime\n-to be used.  Currently, this option is only available in conjunction with\n-the NeXT runtime on Mac OS X 10.3 and later.\n+Assume that all Objective-C message dispatches (@code{[receiver\n+message:arg]}) in this translation unit ensure that the receiver is\n+not @code{nil}.  This allows for more efficient entry points in the\n+runtime to be used.  Currently, this option is only available in\n+conjunction with the NeXT runtime on Mac OS X 10.3 and later.\n \n @item -fobjc-call-cxx-cdtors\n @opindex fobjc-call-cxx-cdtors\n@@ -2533,14 +2533,15 @@ is a C++ object with a non-trivial destructor, and if so, synthesize a\n special @code{- (void) .cxx_destruct} method that will run\n all such default destructors, in reverse order.\n \n-The @code{- (id) .cxx_construct} and/or @code{- (void) .cxx_destruct} methods\n-thusly generated will only operate on instance variables declared in the\n-current Objective-C class, and not those inherited from superclasses.  It\n-is the responsibility of the Objective-C runtime to invoke all such methods\n-in an object's inheritance hierarchy.  The @code{- (id) .cxx_construct} methods\n-will be invoked by the runtime immediately after a new object\n-instance is allocated; the @code{- (void) .cxx_destruct} methods will\n-be invoked immediately before the runtime deallocates an object instance.\n+The @code{- (id) .cxx_construct} and @code{- (void) .cxx_destruct}\n+methods thusly generated will only operate on instance variables\n+declared in the current Objective-C class, and not those inherited\n+from superclasses.  It is the responsibility of the Objective-C\n+runtime to invoke all such methods in an object's inheritance\n+hierarchy.  The @code{- (id) .cxx_construct} methods will be invoked\n+by the runtime immediately after a new object instance is allocated;\n+the @code{- (void) .cxx_destruct} methods will be invoked immediately\n+before the runtime deallocates an object instance.\n \n As of this writing, only the NeXT runtime on Mac OS X 10.4 and later has\n support for invoking the @code{- (id) .cxx_construct} and\n@@ -2553,100 +2554,20 @@ accomplished via the comm page.\n \n @item -fobjc-exceptions\n @opindex fobjc-exceptions\n-Enable syntactic support for structured exception handling in Objective-C,\n-similar to what is offered by C++ and Java.  This option is\n-unavailable in conjunction with the NeXT runtime on Mac OS X 10.2 and\n-earlier.\n-\n-@smallexample\n-  @@try @{\n-    @dots{}\n-       @@throw expr;\n-    @dots{}\n-  @}\n-  @@catch (AnObjCClass *exc) @{\n-    @dots{}\n-      @@throw expr;\n-    @dots{}\n-      @@throw;\n-    @dots{}\n-  @}\n-  @@catch (AnotherClass *exc) @{\n-    @dots{}\n-  @}\n-  @@catch (id allOthers) @{\n-    @dots{}\n-  @}\n-  @@finally @{\n-    @dots{}\n-      @@throw expr;\n-    @dots{}\n-  @}\n-@end smallexample\n-\n-The @code{@@throw} statement may appear anywhere in an Objective-C or\n-Objective-C++ program; when used inside of a @code{@@catch} block, the\n-@code{@@throw} may appear without an argument (as shown above), in which case\n-the object caught by the @code{@@catch} will be rethrown.\n-\n-Note that only (pointers to) Objective-C objects may be thrown and\n-caught using this scheme.  When an object is thrown, it will be caught\n-by the nearest @code{@@catch} clause capable of handling objects of that type,\n-analogously to how @code{catch} blocks work in C++ and Java.  A\n-@code{@@catch(id @dots{})} clause (as shown above) may also be provided to catch\n-any and all Objective-C exceptions not caught by previous @code{@@catch}\n-clauses (if any).\n-\n-The @code{@@finally} clause, if present, will be executed upon exit from the\n-immediately preceding @code{@@try @dots{} @@catch} section.  This will happen\n-regardless of whether any exceptions are thrown, caught or rethrown\n-inside the @code{@@try @dots{} @@catch} section, analogously to the behavior\n-of the @code{finally} clause in Java.\n-\n-There are several caveats to using the new exception mechanism:\n-\n-@itemize @bullet\n-@item\n-Although currently designed to be binary compatible with @code{NS_HANDLER}-style\n-idioms provided by the @code{NSException} class, the new\n-exceptions can only be used on Mac OS X 10.3 (Panther) and later\n-systems, due to additional functionality needed in the (NeXT) Objective-C\n-runtime.\n-\n-@item\n-As mentioned above, the new exceptions do not support handling\n-types other than Objective-C objects.   Furthermore, when used from\n-Objective-C++, the Objective-C exception model does not interoperate with C++\n-exceptions at this time.  This means you cannot @code{@@throw} an exception\n-from Objective-C and @code{catch} it in C++, or vice versa\n-(i.e., @code{throw @dots{} @@catch}).\n-@end itemize\n-\n-The @option{-fobjc-exceptions} switch also enables the use of synchronization\n-blocks for thread-safe execution:\n-\n-@smallexample\n-  @@synchronized (ObjCClass *guard) @{\n-    @dots{}\n-  @}\n-@end smallexample\n-\n-Upon entering the @code{@@synchronized} block, a thread of execution shall\n-first check whether a lock has been placed on the corresponding @code{guard}\n-object by another thread.  If it has, the current thread shall wait until\n-the other thread relinquishes its lock.  Once @code{guard} becomes available,\n-the current thread will place its own lock on it, execute the code contained in\n-the @code{@@synchronized} block, and finally relinquish the lock (thereby\n-making @code{guard} available to other threads).\n-\n-Unlike Java, Objective-C does not allow for entire methods to be marked\n-@code{@@synchronized}.  Note that throwing exceptions out of\n-@code{@@synchronized} blocks is allowed, and will cause the guarding object\n-to be unlocked properly.\n+Enable syntactic support for structured exception handling in\n+Objective-C, similar to what is offered by C++ and Java.  This option\n+is required to use the Objective-C keywords @code{@@try},\n+@code{@@throw}, @code{@@catch}, @code{@@finally} and\n+@code{@@synchronized}.  This option is available with both the GNU\n+runtime and the NeXT runtime (but not available in conjunction with\n+the NeXT runtime on Mac OS X 10.2 and earlier).\n \n @item -fobjc-gc\n @opindex fobjc-gc\n-Enable garbage collection (GC) in Objective-C and Objective-C++ programs.\n+Enable garbage collection (GC) in Objective-C and Objective-C++\n+programs.  This option is only available with the NeXT runtime; the\n+GNU runtime has a different garbage collection implementation that\n+does not require special compiler flags.\n \n @item -freplace-objc-classes\n @opindex freplace-objc-classes\n@@ -2668,6 +2589,8 @@ which improves run-time performance.  Specifying the @option{-fzero-link} flag\n suppresses this behavior and causes calls to @code{objc_getClass(\"@dots{}\")}\n to be retained.  This is useful in Zero-Link debugging mode, since it allows\n for individual class implementations to be modified during program execution.\n+The GNU runtime currently always retains calls to @code{objc_get_class(\"@dots{}\")}\n+regardless of command line options.\n \n @item -gen-decls\n @opindex gen-decls"}, {"sha": "1beb748cfc23133255f8c5e9b9cc1e9fc37c9c9c", "filename": "gcc/doc/objc.texi", "status": "modified", "additions": 130, "deletions": 25, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e711d3df0277e462f64368ddb11687bf4bbc64/gcc%2Fdoc%2Fobjc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e711d3df0277e462f64368ddb11687bf4bbc64/gcc%2Fdoc%2Fobjc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fobjc.texi?ref=35e711d3df0277e462f64368ddb11687bf4bbc64", "patch": "@@ -6,23 +6,23 @@\n @node Objective-C\n @comment  node-name,  next,  previous,  up\n \n-@chapter GNU Objective-C runtime features\n+@chapter GNU Objective-C features\n \n-This document is meant to describe some of the GNU Objective-C runtime\n-features.  It is not intended to teach you Objective-C, there are several\n-resources on the Internet that present the language.  Questions and\n-comments about this document to Ovidiu Predescu\n-@email{ovidiu@@cup.hp.com}.\n+This document is meant to describe some of the GNU Objective-C\n+features.  It is not intended to teach you Objective-C, there are\n+several resources on the Internet that present the language.\n \n @menu\n * Executing code before main::\n * Type encoding::\n * Garbage Collection::\n * Constant string objects::\n * compatibility_alias::\n+* Exceptions::\n+* Synchronization::\n @end menu\n \n-@node Executing code before main, Type encoding, Objective-C, Objective-C\n+@node Executing code before main\n @section @code{+load}: Executing code before main\n \n The GNU Objective-C runtime provides a way that allows you to execute\n@@ -103,7 +103,7 @@ instead of @code{+initialize}.\n @end menu\n \n \n-@node What you can and what you cannot do in +load,  , Executing code before main, Executing code before main\n+@node What you can and what you cannot do in +load\n @subsection What you can and what you cannot do in @code{+load}\n \n The @code{+load} implementation in the GNU runtime guarantees you the following\n@@ -167,7 +167,7 @@ above apply to classes defined in bundle.\n \n \n \n-@node Type encoding, Garbage Collection, Executing code before main, Objective-C\n+@node Type encoding\n @section Type encoding\n \n The Objective-C compiler generates type encodings for all the\n@@ -311,21 +311,19 @@ however, the type specifiers are only encoded when they appear in method\n argument types.\n \n \n-@node Garbage Collection, Constant string objects, Type encoding, Objective-C\n+@node Garbage Collection\n @section Garbage Collection\n \n-Support for a new memory management policy has been added by using a\n-powerful conservative garbage collector, known as the\n-Boehm-Demers-Weiser conservative garbage collector.  It is available from\n-@uref{http://www.hpl.hp.com/@/personal/@/Hans_Boehm/@/gc/}.\n+Support for garbage collection with the GNU runtime has been added by\n+using a powerful conservative garbage collector, known as the\n+Boehm-Demers-Weiser conservative garbage collector.\n \n-To enable the support for it you have to configure the compiler using an\n-additional argument, @w{@option{--enable-objc-gc}}.  You need to have\n-garbage collector installed before building the compiler.  This will\n-build an additional runtime library which has several enhancements to\n-support the garbage collector.  The new library has a new name,\n-@file{libobjc_gc.a} to not conflict with the non-garbage-collected\n-library.\n+To enable the support for it you have to configure the compiler using\n+an additional argument, @w{@option{--enable-objc-gc}}.  This will\n+build the boehm-gc library, and build an additional runtime library\n+which has several enhancements to support the garbage collector.  The\n+new library has a new name, @file{libobjc_gc.a} to not conflict with\n+the non-garbage-collected library.\n \n When the garbage collector is used, the objects are allocated using the\n so-called typed memory allocation mechanism available in the\n@@ -452,10 +450,6 @@ restrictions in doing this.\n @node compatibility_alias\n @section compatibility_alias\n \n-This is a feature of the Objective-C compiler rather than of the\n-runtime, anyway since it is documented nowhere and its existence was\n-forgotten, we are documenting it here.\n-\n The keyword @code{@@compatibility_alias} allows you to define a class name\n as equivalent to another class name.  For example:\n \n@@ -476,3 +470,114 @@ There are some constraints on how this can be used---\n @item @code{GSWApplication} (the real class) must be an existing class.\n \n @end itemize\n+\n+@c =========================================================================\n+@node Exceptions\n+@section Exceptions\n+\n+GNU Objective-C provides exception support built into the language, as\n+in the following example:\n+\n+@smallexample\n+  @@try @{\n+    @dots{}\n+       @@throw expr;\n+    @dots{}\n+  @}\n+  @@catch (AnObjCClass *exc) @{\n+    @dots{}\n+      @@throw expr;\n+    @dots{}\n+      @@throw;\n+    @dots{}\n+  @}\n+  @@catch (AnotherClass *exc) @{\n+    @dots{}\n+  @}\n+  @@catch (id allOthers) @{\n+    @dots{}\n+  @}\n+  @@finally @{\n+    @dots{}\n+      @@throw expr;\n+    @dots{}\n+  @}\n+@end smallexample\n+\n+The @code{@@throw} statement may appear anywhere in an Objective-C or\n+Objective-C++ program; when used inside of a @code{@@catch} block, the\n+@code{@@throw} may appear without an argument (as shown above), in\n+which case the object caught by the @code{@@catch} will be rethrown.\n+\n+Note that only (pointers to) Objective-C objects may be thrown and\n+caught using this scheme.  When an object is thrown, it will be caught\n+by the nearest @code{@@catch} clause capable of handling objects of\n+that type, analogously to how @code{catch} blocks work in C++ and\n+Java.  A @code{@@catch(id @dots{})} clause (as shown above) may also\n+be provided to catch any and all Objective-C exceptions not caught by\n+previous @code{@@catch} clauses (if any).\n+\n+The @code{@@finally} clause, if present, will be executed upon exit\n+from the immediately preceding @code{@@try @dots{} @@catch} section.\n+This will happen regardless of whether any exceptions are thrown,\n+caught or rethrown inside the @code{@@try @dots{} @@catch} section,\n+analogously to the behavior of the @code{finally} clause in Java.\n+\n+There are several caveats to using the new exception mechanism:\n+\n+@itemize @bullet\n+@item\n+The @option{-fobjc-exceptions} command line option must be used when\n+compiling Objective-C files that use exceptions.\n+\n+@item\n+With the GNU runtime, exceptions are always implemented as ``native''\n+exceptions and it is recommended that the @option{-fexceptions} and\n+@option{-shared-libgcc} options are used when linking.\n+\n+@item\n+With the NeXT runtime, although currently designed to be binary\n+compatible with @code{NS_HANDLER}-style idioms provided by the\n+@code{NSException} class, the new exceptions can only be used on Mac\n+OS X 10.3 (Panther) and later systems, due to additional functionality\n+needed in the NeXT Objective-C runtime.\n+\n+@item\n+As mentioned above, the new exceptions do not support handling\n+types other than Objective-C objects.   Furthermore, when used from\n+Objective-C++, the Objective-C exception model does not interoperate with C++\n+exceptions at this time.  This means you cannot @code{@@throw} an exception\n+from Objective-C and @code{catch} it in C++, or vice versa\n+(i.e., @code{throw @dots{} @@catch}).\n+@end itemize\n+\n+@c =========================================================================\n+@node Synchronization\n+@section Synchronization\n+\n+GNU Objective-C provides support for synchronized blocks:\n+\n+@smallexample\n+  @@synchronized (ObjCClass *guard) @{\n+    @dots{}\n+  @}\n+@end smallexample\n+\n+Upon entering the @code{@@synchronized} block, a thread of execution\n+shall first check whether a lock has been placed on the corresponding\n+@code{guard} object by another thread.  If it has, the current thread\n+shall wait until the other thread relinquishes its lock.  Once\n+@code{guard} becomes available, the current thread will place its own\n+lock on it, execute the code contained in the @code{@@synchronized}\n+block, and finally relinquish the lock (thereby making @code{guard}\n+available to other threads).\n+\n+Unlike Java, Objective-C does not allow for entire methods to be\n+marked @code{@@synchronized}.  Note that throwing exceptions out of\n+@code{@@synchronized} blocks is allowed, and will cause the guarding\n+object to be unlocked properly.\n+\n+Because of the interactions between synchronization and exception\n+handling, you can only use @code{@@synchronized} when compiling with\n+exceptions enabled, that is with the command line option\n+@option{-fobjc-exceptions}."}]}