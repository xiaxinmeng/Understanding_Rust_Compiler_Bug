{"sha": "705c92a2ab98d373c8500fd096cd49e8cc97c070", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA1YzkyYTJhYjk4ZDM3M2M4NTAwZmQwOTZjZDQ5ZThjYzk3YzA3MA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-02-12T19:00:35Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-02-12T19:00:35Z"}, "message": "i386: Revert revision 268678 and revision 268657\n\ni386 backend has\n\nINT_MODE (OI, 32);\nINT_MODE (XI, 64);\n\nSo, XI_MODE represents 64 INTEGER bytes = 64 * 8 = 512 bit operation,\nin case of const_1, all 512 bits set.\n\nWe can load zeros with narrower instruction, (e.g. 256 bit by inherent\nzeroing of highpart in case of 128 bit xor), so TImode in this case.\n\nSome targets prefer V4SF mode, so they will emit float xorps for zeroing\n\nThen the introduction of AVX512F fubared everything by overloading the\nmeaning of insn mode.\n\nHow should we use INSN mode,  MODE_XI, in standard_sse_constant_opcode\nand patterns which use standard_sse_constant_opcode? 2 options:\n\n1.  MODE_XI should only used to check if EXT_REX_SSE_REG_P is true\nin any register operand.  The operand size must be determined by operand\nitself , not by MODE_XI.  The operand encoding size should be determined\nby the operand size, EXT_REX_SSE_REG_P and AVX512VL.\n2. MODE_XI should be used to determine the operand encoding size.\nEXT_REX_SSE_REG_P and AVX512VL should be checked for encoding\ninstructions.\n\ngcc/\n\n\tPR target/89229\n\t* config/i386/i386.md (*movoi_internal_avx): Revert revision\n\t268678 and revision 268657.\n\t(*movti_internal): Likewise.\n\ngcc/testsuite/\n\n\tPR target/89229\n\t* gcc.target/i386/pr89229-1.c: New test.\n\nFrom-SVN: r268811", "tree": {"sha": "c0866367c71ab81560f9ae8e2c58cf8d3f74ef1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0866367c71ab81560f9ae8e2c58cf8d3f74ef1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/705c92a2ab98d373c8500fd096cd49e8cc97c070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/705c92a2ab98d373c8500fd096cd49e8cc97c070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/705c92a2ab98d373c8500fd096cd49e8cc97c070", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/705c92a2ab98d373c8500fd096cd49e8cc97c070/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec696cae1613e58c7066a1ba00157f1494a60aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec696cae1613e58c7066a1ba00157f1494a60aa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec696cae1613e58c7066a1ba00157f1494a60aa0"}], "stats": {"total": 73, "additions": 65, "deletions": 8}, "files": [{"sha": "27b8b1dda5b628279e7c723a1dc5d0bad2c4245a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705c92a2ab98d373c8500fd096cd49e8cc97c070/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705c92a2ab98d373c8500fd096cd49e8cc97c070/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=705c92a2ab98d373c8500fd096cd49e8cc97c070", "patch": "@@ -1,3 +1,10 @@\n+2019-02-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/89229\n+\t* config/i386/i386.md (*movoi_internal_avx): Revert revision\n+\t268678 and revision 268657.\n+\t(*movti_internal): Likewise.\n+\n 2019-02-12  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \tPR target/89233"}, {"sha": "9948f77fca53c498d7e1be910c4dc68140904231", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705c92a2ab98d373c8500fd096cd49e8cc97c070/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705c92a2ab98d373c8500fd096cd49e8cc97c070/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=705c92a2ab98d373c8500fd096cd49e8cc97c070", "patch": "@@ -1933,13 +1933,12 @@\n    (set_attr \"type\" \"sselog1,sselog1,ssemov,ssemov\")\n    (set_attr \"prefix\" \"vex\")\n    (set (attr \"mode\")\n-\t(cond [(and (not (match_test \"TARGET_AVX512VL\"))\n-\t\t    (ior (match_operand 0 \"ext_sse_reg_operand\")\n-\t\t\t (match_operand 1 \"ext_sse_reg_operand\")))\n+\t(cond [(ior (match_operand 0 \"ext_sse_reg_operand\")\n+\t\t    (match_operand 1 \"ext_sse_reg_operand\"))\n \t\t (const_string \"XI\")\n \t       (and (eq_attr \"alternative\" \"1\")\n \t\t    (match_test \"TARGET_AVX512VL\"))\n-\t\t (const_string \"OI\")\n+\t\t (const_string \"XI\")\n \t       (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t    (and (eq_attr \"alternative\" \"3\")\n \t\t\t (match_test \"TARGET_SSE_TYPELESS_STORES\")))\n@@ -2013,13 +2012,12 @@\n    (set (attr \"mode\")\n \t(cond [(eq_attr \"alternative\" \"0,1\")\n \t\t (const_string \"DI\")\n-\t       (and (not (match_test \"TARGET_AVX512VL\"))\n-\t\t    (ior (match_operand 0 \"ext_sse_reg_operand\")\n-\t\t\t (match_operand 1 \"ext_sse_reg_operand\")))\n+\t       (ior (match_operand 0 \"ext_sse_reg_operand\")\n+\t\t    (match_operand 1 \"ext_sse_reg_operand\"))\n \t\t (const_string \"XI\")\n \t       (and (eq_attr \"alternative\" \"3\")\n \t\t    (match_test \"TARGET_AVX512VL\"))\n-\t\t (const_string \"TI\")\n+\t\t (const_string \"XI\")\n \t       (ior (not (match_test \"TARGET_SSE2\"))\n \t\t    (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t\t (and (eq_attr \"alternative\" \"5\")"}, {"sha": "d8549f0fb3ef286336916fa58e6ae3bafd6660e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705c92a2ab98d373c8500fd096cd49e8cc97c070/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705c92a2ab98d373c8500fd096cd49e8cc97c070/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=705c92a2ab98d373c8500fd096cd49e8cc97c070", "patch": "@@ -1,3 +1,8 @@\n+2019-02-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/89229\n+\t* gcc.target/i386/pr89229-1.c: New test.\n+\n 2019-02-12  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \tPR target/89233"}, {"sha": "cce95350bf23d8653b243f615fa5db10b36b3cda", "filename": "gcc/testsuite/gcc.target/i386/pr89229-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705c92a2ab98d373c8500fd096cd49e8cc97c070/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89229-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705c92a2ab98d373c8500fd096cd49e8cc97c070/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89229-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89229-1.c?ref=705c92a2ab98d373c8500fd096cd49e8cc97c070", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do assemble { target { avx512bw && avx512vl } } } */\n+/* { dg-options \"-O1 -mavx512bw -mavx512vl -mtune=skylake-avx512\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+struct s { unsigned char a[256]; };\n+union u { struct { struct s b; int c; } d; struct { int c; struct s b; } e; };\n+static union u v;\n+static union u v0;\n+static struct s *p = &v.d.b;\n+static struct s *q = &v.e.b;\n+\n+static inline struct s rp (void) { return *p; }\n+static inline struct s rq (void) { return *q; }\n+static void pq (void) { *p = rq(); }\n+static void qp (void) { *q = rp(); }\n+\n+static void\n+init (struct s *sp)\n+{\n+  int i;\n+  for (i = 0; i < 256; i++)\n+    sp->a[i] = i;\n+}\n+\n+static void\n+check (struct s *sp)\n+{\n+  int i;\n+  for (i = 0; i < 256; i++)\n+    if (sp->a[i] != i)\n+      abort ();\n+}\n+\n+void\n+main_test (void)\n+{\n+  v = v0;\n+  init (p);\n+  qp ();\n+  check (q);\n+  v = v0;\n+  init (q);\n+  pq ();\n+  check (p);\n+  exit (0);\n+}"}]}