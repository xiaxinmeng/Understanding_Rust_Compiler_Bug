{"sha": "2305fa31840fb5300228837afda1039ed825eebe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMwNWZhMzE4NDBmYjUzMDAyMjg4MzdhZmRhMTAzOWVkODI1ZWViZQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-07-04T01:08:48Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-07-04T01:08:48Z"}, "message": "re PR fortran/32545 (Give an (compile time) error not a warning for wrong edit format statements)\n\n2007-07-03  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/32545\n\t* io.c (check_format): Always call gfc_error for errors.\n\t(check_format_string): Change type of this function to try and\n\treturn the result of check_format.\n\t(check_io_constraints): Return MATCH_ERROR if check_format_string\n\treturns FAILURE.\n\n2007-07-03  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/32612\n\t* decl.c (get_proc_name): Include attr->mod_proc in check for error.\n\nFrom-SVN: r126295", "tree": {"sha": "27e9aa18518d080c17965ae93f7bbbccaab9f703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27e9aa18518d080c17965ae93f7bbbccaab9f703"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2305fa31840fb5300228837afda1039ed825eebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2305fa31840fb5300228837afda1039ed825eebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2305fa31840fb5300228837afda1039ed825eebe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2305fa31840fb5300228837afda1039ed825eebe/comments", "author": null, "committer": null, "parents": [{"sha": "f01d40db560f6b6dcb4737a82da71438e995cb10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f01d40db560f6b6dcb4737a82da71438e995cb10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f01d40db560f6b6dcb4737a82da71438e995cb10"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "c12809706777e448c7877ad8a7142644462001f4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2305fa31840fb5300228837afda1039ed825eebe/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2305fa31840fb5300228837afda1039ed825eebe/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2305fa31840fb5300228837afda1039ed825eebe", "patch": "@@ -1,3 +1,17 @@\n+2007-07-03  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/32545\n+\t* io.c (check_format): Always call gfc_error for errors.\n+\t(check_format_string): Change type of this function to try and\n+\treturn the result of check_format.\n+\t(check_io_constraints): Return MATCH_ERROR if check_format_string\n+\treturns FAILURE.\n+\n+2007-07-03  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/32612\n+\t* decl.c (get_proc_name): Include attr->mod_proc in check for error.\n+\n 2007-07-03  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/32432"}, {"sha": "b3bbe75d162329752eef6ce7e2af97b4419b06d7", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2305fa31840fb5300228837afda1039ed825eebe/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2305fa31840fb5300228837afda1039ed825eebe/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=2305fa31840fb5300228837afda1039ed825eebe", "patch": "@@ -708,7 +708,8 @@ get_proc_name (const char *name, gfc_symbol **result, bool module_fcn_entry)\n       /* Trap a procedure with a name the same as interface in the\n \t encompassing scope.  */\n       if (sym->attr.generic != 0\n-\t  && (sym->attr.subroutine || sym->attr.function))\n+\t  && (sym->attr.subroutine || sym->attr.function)\n+\t  && !sym->attr.mod_proc)\n \tgfc_error_now (\"Name '%s' at %C is already defined\"\n \t\t       \" as a generic interface at %L\",\n \t\t       name, &sym->declared_at);"}, {"sha": "7f5e575ab36a1604cf7f2165b661aa41b687dc0b", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2305fa31840fb5300228837afda1039ed825eebe/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2305fa31840fb5300228837afda1039ed825eebe/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=2305fa31840fb5300228837afda1039ed825eebe", "patch": "@@ -842,20 +842,10 @@ check_format (bool is_input)\n   goto format_item;\n \n syntax:\n-  /* Something went wrong.  If the format we're checking is a string,\n-     generate a warning, since the program is correct.  If the format\n-     is in a FORMAT statement, this messes up parsing, which is an\n-     error.  */\n-  if (mode != MODE_STRING)\n-    gfc_error (\"%s in format string at %C\", error);\n-  else\n-    {\n-      gfc_warning (\"%s in format string at %C\", error);\n-\n-      /* TODO: More elaborate measures are needed to show where a problem\n-\t is within a format string that has been calculated.  */\n-    }\n+  gfc_error (\"%s in format string at %C\", error);\n \n+  /* TODO: More elaborate measures are needed to show where a problem\n+     is within a format string that has been calculated.  */\n   rv = FAILURE;\n \n finished:\n@@ -866,12 +856,12 @@ check_format (bool is_input)\n /* Given an expression node that is a constant string, see if it looks\n    like a format string.  */\n \n-static void\n+static try\n check_format_string (gfc_expr *e, bool is_input)\n {\n   mode = MODE_STRING;\n   format_string = e->value.character.string;\n-  check_format (is_input);\n+  return check_format (is_input);\n }\n \n \n@@ -2752,8 +2742,9 @@ if (condition) \\\n     }\n \n   expr = dt->format_expr;\n-  if (expr != NULL && expr->expr_type == EXPR_CONSTANT)\n-    check_format_string (expr, k == M_READ);\n+  if (expr != NULL && expr->expr_type == EXPR_CONSTANT\n+      && check_format_string (expr, k == M_READ) == FAILURE)\n+    return MATCH_ERROR;\n \n   return m;\n }"}]}