{"sha": "9216ee6d1195d48388f825cf1b072e570129cbbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIxNmVlNmQxMTk1ZDQ4Mzg4ZjgyNWNmMWIwNzJlNTcwMTI5Y2JiZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-08-24T10:25:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-08-24T12:23:00Z"}, "message": "tree-optimization/100089 - avoid leaving scalar if-converted code around\n\nThis avoids leaving scalar if-converted code around for the case\nof BB vectorizing an if-converted loop body when using the very-cheap\ncost model.  In this case we scan not vectorized scalar stmts in\nthe basic-block vectorized for COND_EXPRs and force the vectorization\nto be marked as not profitable.\n\nThe patch also makes sure to always consider all BB vectorization\nsubgraphs together for costing purposes when vectorizing an\nif-converted loop body.\n\n2021-08-24  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/100089\n\t* tree-vectorizer.h (vect_slp_bb): Rename to ...\n\t(vect_slp_if_converted_bb): ... this and get the original\n\tloop as new argument.\n\t* tree-vectorizer.c (try_vectorize_loop_1): Revert previous fix,\n\tpass original loop to vect_slp_if_converted_bb.\n\t* tree-vect-slp.c (vect_bb_vectorization_profitable_p):\n\tIf orig_loop was passed scan the not vectorized stmts\n\tfor COND_EXPRs and force not profitable if found.\n\t(vect_slp_region): Pass down all SLP instances to costing\n\tif orig_loop was specified.\n\t(vect_slp_bbs): Pass through orig_loop.\n\t(vect_slp_bb): Rename to ...\n\t(vect_slp_if_converted_bb): ... this and get the original\n\tloop as new argument.\n\t(vect_slp_function): Adjust.", "tree": {"sha": "742d1a0d6e52bd6723e3d220f48e594a49692f22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/742d1a0d6e52bd6723e3d220f48e594a49692f22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9216ee6d1195d48388f825cf1b072e570129cbbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9216ee6d1195d48388f825cf1b072e570129cbbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9216ee6d1195d48388f825cf1b072e570129cbbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9216ee6d1195d48388f825cf1b072e570129cbbe/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "809330ab8450261e05919b472783bf15e4b000f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809330ab8450261e05919b472783bf15e4b000f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/809330ab8450261e05919b472783bf15e4b000f7"}], "stats": {"total": 92, "additions": 68, "deletions": 24}, "files": [{"sha": "edc11c62793a3cdf2d96a846c5bd66aaf6431f6d", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 56, "deletions": 14, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9216ee6d1195d48388f825cf1b072e570129cbbe/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9216ee6d1195d48388f825cf1b072e570129cbbe/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=9216ee6d1195d48388f825cf1b072e570129cbbe", "patch": "@@ -5233,7 +5233,8 @@ li_cost_vec_cmp (const void *a_, const void *b_)\n \n static bool\n vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo,\n-\t\t\t\t    vec<slp_instance> slp_instances)\n+\t\t\t\t    vec<slp_instance> slp_instances,\n+\t\t\t\t    loop_p orig_loop)\n {\n   slp_instance instance;\n   int i;\n@@ -5270,6 +5271,30 @@ vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo,\n       vector_costs.safe_splice (instance->cost_vec);\n       instance->cost_vec.release ();\n     }\n+  /* When we're vectorizing an if-converted loop body with the\n+     very-cheap cost model make sure we vectorized all if-converted\n+     code.  */\n+  bool force_not_profitable = false;\n+  if (orig_loop && flag_vect_cost_model == VECT_COST_MODEL_VERY_CHEAP)\n+    {\n+      gcc_assert (bb_vinfo->bbs.length () == 1);\n+      for (gimple_stmt_iterator gsi = gsi_start_bb (bb_vinfo->bbs[0]);\n+\t   !gsi_end_p (gsi); gsi_next (&gsi))\n+\t{\n+\t  /* The costing above left us with DCEable vectorized scalar\n+\t     stmts having the visited flag set.  */\n+\t  if (gimple_visited_p (gsi_stmt (gsi)))\n+\t    continue;\n+\n+\t  if (gassign *ass = dyn_cast <gassign *> (gsi_stmt (gsi)))\n+\t    if (gimple_assign_rhs_code (ass) == COND_EXPR)\n+\t      {\n+\t\tforce_not_profitable = true;\n+\t\tbreak;\n+\t      }\n+\t}\n+    }\n+\n   /* Unset visited flag.  */\n   stmt_info_for_cost *cost;\n   FOR_EACH_VEC_ELT (scalar_costs, i, cost)\n@@ -5394,9 +5419,14 @@ vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo,\n       return false;\n     }\n \n+  if (dump_enabled_p () && force_not_profitable)\n+    dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t     \"not profitable because of unprofitable if-converted \"\n+\t\t     \"scalar code\\n\");\n+\n   scalar_costs.release ();\n   vector_costs.release ();\n-  return true;\n+  return !force_not_profitable;\n }\n \n /* qsort comparator for lane defs.  */\n@@ -5810,7 +5840,8 @@ vect_slp_analyze_bb_1 (bb_vec_info bb_vinfo, int n_stmts, bool &fatal,\n \n static bool\n vect_slp_region (vec<basic_block> bbs, vec<data_reference_p> datarefs,\n-\t\t vec<int> *dataref_groups, unsigned int n_stmts)\n+\t\t vec<int> *dataref_groups, unsigned int n_stmts,\n+\t\t loop_p orig_loop)\n {\n   bb_vec_info bb_vinfo;\n   auto_vector_modes vector_modes;\n@@ -5859,7 +5890,9 @@ vect_slp_region (vec<basic_block> bbs, vec<data_reference_p> datarefs,\n \t      vect_location = instance->location ();\n \t      if (!unlimited_cost_model (NULL)\n \t\t  && !vect_bb_vectorization_profitable_p\n-\t\t\t(bb_vinfo, instance->subgraph_entries))\n+\t\t\t(bb_vinfo,\n+\t\t\t orig_loop ? BB_VINFO_SLP_INSTANCES (bb_vinfo)\n+\t\t\t : instance->subgraph_entries, orig_loop))\n \t\t{\n \t\t  if (dump_enabled_p ())\n \t\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -5877,7 +5910,9 @@ vect_slp_region (vec<basic_block> bbs, vec<data_reference_p> datarefs,\n \t\t\t\t \"using SLP\\n\");\n \t      vectorized = true;\n \n-\t      vect_schedule_slp (bb_vinfo, instance->subgraph_entries);\n+\t      vect_schedule_slp (bb_vinfo,\n+\t\t\t\t orig_loop ? BB_VINFO_SLP_INSTANCES (bb_vinfo)\n+\t\t\t\t : instance->subgraph_entries);\n \n \t      unsigned HOST_WIDE_INT bytes;\n \t      if (dump_enabled_p ())\n@@ -5892,6 +5927,11 @@ vect_slp_region (vec<basic_block> bbs, vec<data_reference_p> datarefs,\n \t\t\t\t     \"basic block part vectorized using \"\n \t\t\t\t     \"variable length vectors\\n\");\n \t\t}\n+\n+\t      /* When we're called from loop vectorization we're considering\n+\t\t all subgraphs at once.  */\n+\t      if (orig_loop)\n+\t\tbreak;\n \t    }\n \t}\n       else\n@@ -5959,7 +5999,7 @@ vect_slp_region (vec<basic_block> bbs, vec<data_reference_p> datarefs,\n    true if anything in the basic-block was vectorized.  */\n \n static bool\n-vect_slp_bbs (const vec<basic_block> &bbs)\n+vect_slp_bbs (const vec<basic_block> &bbs, loop_p orig_loop)\n {\n   vec<data_reference_p> datarefs = vNULL;\n   auto_vec<int> dataref_groups;\n@@ -5989,18 +6029,20 @@ vect_slp_bbs (const vec<basic_block> &bbs)\n       ++current_group;\n     }\n \n-  return vect_slp_region (bbs, datarefs, &dataref_groups, insns);\n+  return vect_slp_region (bbs, datarefs, &dataref_groups, insns, orig_loop);\n }\n \n-/* Main entry for the BB vectorizer.  Analyze and transform BB, returns\n-   true if anything in the basic-block was vectorized.  */\n+/* Special entry for the BB vectorizer.  Analyze and transform a single\n+   if-converted BB with ORIG_LOOPs body being the not if-converted\n+   representation.  Returns true if anything in the basic-block was\n+   vectorized.  */\n \n bool\n-vect_slp_bb (basic_block bb)\n+vect_slp_if_converted_bb (basic_block bb, loop_p orig_loop)\n {\n   auto_vec<basic_block> bbs;\n   bbs.safe_push (bb);\n-  return vect_slp_bbs (bbs);\n+  return vect_slp_bbs (bbs, orig_loop);\n }\n \n /* Main entry for the BB vectorizer.  Analyze and transform BB, returns\n@@ -6051,7 +6093,7 @@ vect_slp_function (function *fun)\n \n       if (split && !bbs.is_empty ())\n \t{\n-\t  r |= vect_slp_bbs (bbs);\n+\t  r |= vect_slp_bbs (bbs, NULL);\n \t  bbs.truncate (0);\n \t  bbs.quick_push (bb);\n \t}\n@@ -6069,13 +6111,13 @@ vect_slp_function (function *fun)\n \t      dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t       \"splitting region at control altering \"\n \t\t\t       \"definition %G\", last);\n-\t    r |= vect_slp_bbs (bbs);\n+\t    r |= vect_slp_bbs (bbs, NULL);\n \t    bbs.truncate (0);\n \t  }\n     }\n \n   if (!bbs.is_empty ())\n-    r |= vect_slp_bbs (bbs);\n+    r |= vect_slp_bbs (bbs, NULL);\n \n   free (rpo);\n "}, {"sha": "3aa3e2a678328baccc4869fe2c6546e700b92255", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9216ee6d1195d48388f825cf1b072e570129cbbe/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9216ee6d1195d48388f825cf1b072e570129cbbe/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=9216ee6d1195d48388f825cf1b072e570129cbbe", "patch": "@@ -1033,10 +1033,7 @@ try_vectorize_loop_1 (hash_table<simduid_to_vf> *&simduid_to_vf_htab,\n \t only non-if-converted parts took part in BB vectorization.  */\n       if (flag_tree_slp_vectorize != 0\n \t  && loop_vectorized_call\n-\t  && ! loop->inner\n-\t  /* This would purely be a workaround and should be removed\n-\t     once PR100089 is fixed.  */\n-\t  && flag_vect_cost_model != VECT_COST_MODEL_VERY_CHEAP)\n+\t  && ! loop->inner)\n \t{\n \t  basic_block bb = loop->header;\n \t  bool require_loop_vectorize = false;\n@@ -1062,12 +1059,17 @@ try_vectorize_loop_1 (hash_table<simduid_to_vf> *&simduid_to_vf_htab,\n \t      gimple_set_uid (stmt, -1);\n \t      gimple_set_visited (stmt, false);\n \t    }\n-\t  if (!require_loop_vectorize && vect_slp_bb (bb))\n+\t  if (!require_loop_vectorize)\n \t    {\n-\t      fold_loop_internal_call (loop_vectorized_call,\n-\t\t\t\t       boolean_true_node);\n-\t      loop_vectorized_call = NULL;\n-\t      ret |= TODO_cleanup_cfg | TODO_update_ssa_only_virtuals;\n+\t      tree arg = gimple_call_arg (loop_vectorized_call, 1);\n+\t      class loop *scalar_loop = get_loop (cfun, tree_to_shwi (arg));\n+\t      if (vect_slp_if_converted_bb (bb, scalar_loop))\n+\t\t{\n+\t\t  fold_loop_internal_call (loop_vectorized_call,\n+\t\t\t\t\t   boolean_true_node);\n+\t\t  loop_vectorized_call = NULL;\n+\t\t  ret |= TODO_cleanup_cfg | TODO_update_ssa_only_virtuals;\n+\t\t}\n \t    }\n \t}\n       /* If outer loop vectorization fails for LOOP_VECTORIZED guarded"}, {"sha": "72e018e8eacec672e709cbc6f30a0c014026e5ee", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9216ee6d1195d48388f825cf1b072e570129cbbe/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9216ee6d1195d48388f825cf1b072e570129cbbe/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=9216ee6d1195d48388f825cf1b072e570129cbbe", "patch": "@@ -2087,7 +2087,7 @@ extern void vect_gather_slp_loads (vec_info *);\n extern void vect_get_slp_defs (slp_tree, vec<tree> *);\n extern void vect_get_slp_defs (vec_info *, slp_tree, vec<vec<tree> > *,\n \t\t\t       unsigned n = -1U);\n-extern bool vect_slp_bb (basic_block);\n+extern bool vect_slp_if_converted_bb (basic_block bb, loop_p orig_loop);\n extern bool vect_slp_function (function *);\n extern stmt_vec_info vect_find_last_scalar_stmt_in_slp (slp_tree);\n extern stmt_vec_info vect_find_first_scalar_stmt_in_slp (slp_tree);"}]}