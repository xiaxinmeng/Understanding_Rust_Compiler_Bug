{"sha": "65857caee8ccfac5007a9fd0e5f18cce5e5fe934", "node_id": "C_kwDOANBUbNoAKDY1ODU3Y2FlZThjY2ZhYzUwMDdhOWZkMGU1ZjE4Y2NlNWU1ZmU5MzQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-03-09T23:48:52Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-03-09T23:48:52Z"}, "message": "libstdc++: Avoid implicit narrowing from uint128_t [PR104859]\n\nWe need to be explicit about narrowing conversions from uint128_t since,\non targets that lack __int128, this type is defined as an integer-class\ntype that is only _explicitly_ convertible to the builtin integer types.\nThis issue was latent until r12-7563-ge32869a17b788b made the frontend\ncorrectly reject explicit conversion functions during (dependent)\ncopy-initialization.\n\n\tPR libstdc++/104859\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++17/floating_to_chars.cc (__floating_to_chars_hex):\n\tBe explicit when narrowing the shifted effective_mantissa,\n\tsince it may have an integer-class type.", "tree": {"sha": "e3259ca85879f299cb9b1f8c6d3d202a38c31d13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3259ca85879f299cb9b1f8c6d3d202a38c31d13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65857caee8ccfac5007a9fd0e5f18cce5e5fe934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65857caee8ccfac5007a9fd0e5f18cce5e5fe934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65857caee8ccfac5007a9fd0e5f18cce5e5fe934", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65857caee8ccfac5007a9fd0e5f18cce5e5fe934/comments", "author": null, "committer": null, "parents": [{"sha": "4ea128d5c740e4e8c2e7b70de3a90435035eb863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea128d5c740e4e8c2e7b70de3a90435035eb863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ea128d5c740e4e8c2e7b70de3a90435035eb863"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "66bd457cbe2ff0f9caca5a2904324ba46c0b12e3", "filename": "libstdc++-v3/src/c++17/floating_to_chars.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65857caee8ccfac5007a9fd0e5f18cce5e5fe934/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65857caee8ccfac5007a9fd0e5f18cce5e5fe934/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc?ref=65857caee8ccfac5007a9fd0e5f18cce5e5fe934", "patch": "@@ -801,14 +801,14 @@ template<typename T>\n     char leading_hexit;\n     if constexpr (has_implicit_leading_bit)\n       {\n-\tconst unsigned nibble = effective_mantissa >> rounded_mantissa_bits;\n+\tconst auto nibble = unsigned(effective_mantissa >> rounded_mantissa_bits);\n \t__glibcxx_assert(nibble <= 2);\n \tleading_hexit = '0' + nibble;\n \teffective_mantissa &= ~(mantissa_t{0b11} << rounded_mantissa_bits);\n       }\n     else\n       {\n-\tconst unsigned nibble = effective_mantissa >> (rounded_mantissa_bits-4);\n+\tconst auto nibble = unsigned(effective_mantissa >> (rounded_mantissa_bits-4));\n \t__glibcxx_assert(nibble < 16);\n \tleading_hexit = \"0123456789abcdef\"[nibble];\n \teffective_mantissa &= ~(mantissa_t{0b1111} << (rounded_mantissa_bits-4));\n@@ -853,7 +853,7 @@ template<typename T>\n \twhile (effective_mantissa != 0)\n \t  {\n \t    nibble_offset -= 4;\n-\t    const unsigned nibble = effective_mantissa >> nibble_offset;\n+\t    const auto nibble = unsigned(effective_mantissa >> nibble_offset);\n \t    __glibcxx_assert(nibble < 16);\n \t    *first++ = \"0123456789abcdef\"[nibble];\n \t    ++written_hexits;"}]}