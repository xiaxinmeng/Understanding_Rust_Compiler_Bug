{"sha": "079e7538c0259b82dc4fd0b71c05ef918725a321", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc5ZTc1MzhjMDI1OWI4MmRjNGZkMGI3MWMwNWVmOTE4NzI1YTMyMQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-06-29T12:18:36Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-29T12:18:36Z"}, "message": "reginfo.c (init_reg_sets_1): Adjust comments.\n\n\t* reginfo.c (init_reg_sets_1): Adjust comments.\n\t* combine-stack-adj.c (rest_of_handle_stack_adjustments): Likewise.\n\t* calls.c (prepare_call_address): Likewise.\n\t(emit_call_1): Use targetm.calls.return_pops_args.\n\t(expand_call): Likewise.\n\t* function.c (assign_parms): Likewise.\n\t* system.h (RETURN_POPS_ARGS): Add to #pragma poison list.\n\t* target.h (struct gcc_target) [struct calls]: Add\n\treturn_pops_args field.\n\t* targhooks.h (default_return_pops_args): Declare.\n\t* targhooks.c (default_return_pops_args): Define.\n\t* target-def.h (TARGET_RETURN_POPS_ARGS): Define.\n\t(TARGET_CALLS): Add TARGET_RETURN_POPS_ARGS.\n\t* doc/tm.texi (RETURN_POPS_ARGS): Rename to...\n\t(TARGET_RETURN_POPS_ARGS): ...this.  Use deftypefn.  Adjust\n\tdocumentation.\n\t* config/alpha/alpha.h (RETURN_POPS_ARGS): Delete.\n\t* config/arc/arc.h (RETURN_POPS_ARGS): Likewise.\n\t* config/arm/arm.h (RETURN_POPS_ARGS): Likewise.\n\t* config/avr/avr.h (RETURN_POPS_ARGS): Likewise.\n\t* config/bfin/bfin.h (RETURN_POPS_ARGS): Likewise.\n\t* config/cris/cris.h (RETURN_POPS_ARGS): Likewise.\n\t* config/crx/crx.h (RETURN_POPS_ARGS): Likewise.\n\t* config/fr30/fr30.h (RETURN_POPS_ARGS): Likewise.\n\t* config/frv/frv.h (RETURN_POPS_ARGS): Likewise.\n\t* config/h8300/h8300.h (RETURN_POPS_ARGS): Likewise.\n\t* config/ia64/ia64.h (RETURN_POPS_ARGS): Likewise.\n\t* config/iq2000/iq2000.h (RETURN_POPS_ARGS): Likewise.\n\t* config/lm32/lm32.h (RETURN_POPS_ARGS): Likewise.\n\t* config/m32c/m32c.h (RETURN_POPS_ARGS): Likewise.\n\t* config/m32r/m32r.h (RETURN_POPS_ARGS): Likewise.\n\t* config/m68hc11/m68hc11.h (RETURN_POPS_ARGS): Likewise.\n\t* config/mcore/mcore.h (RETURN_POPS_ARGS): Likewise.\n\t* config/mep/mep.h (RETURN_POPS_ARGS): Likewise.\n\t* config/mips/mips.h (RETURN_POPS_ARGS): Likewise.\n\t* config/mmix/mmix.h (RETURN_POPS_ARGS): Likewise.\n\t* config/mn10300/mn10300.h (RETURN_POPS_ARGS): Likewise.\n\t* config/moxie/moxie.h (RETURN_POPS_ARGS): Likewise.\n\t* config/pa/pa.h (RETURN_POPS_ARGS): Likewise.\n\t* config/pdp11/pdp11.h (RETURN_POPS_ARGS): Likewise.\n\t* config/picochip/picochip.h (RETURN_POPS_ARGS): Likewise.\n\t* config/rs6000/rs6000.h (RETURN_POPS_ARGS): Likewise.\n\t* config/rx/rx.h (RETURN_POPS_ARGS): Likewise.\n\t* config/s390/s390.h (RETURN_POPS_ARGS): Likewise.\n\t* config/score/score.h (RETURN_POPS_ARGS): Likewise.\n\t* config/sh/sh.h (RETURN_POPS_ARGS): Likewise.\n\t* config/sparc/sparc.h (RETURN_POPS_ARGS): Likewise.\n\t* config/spu/spu.h (RETURN_POPS_ARGS): Likewise.\n\t* config/stormy16/stormy16.h (RETURN_POPS_ARGS): Likewise.\n\t* config/v850/v850.h (RETURN_POPS_ARGS): Likewise.\n\t* config/xtensa/xtensa.h (RETURN_POPS_ARGS): Likewise.\n\t* config/i386/i386-protos.h (ix86_return_pops_args): Delete.\n\t* config/i386/i386.h (RETURN_POPS_ARGS): Delete.\n\t* config/i386/i386.c (ix86_return_pops_args): Make static.\n\tConstify arguments.\n\t(TARGET_RETURN_POPS_ARGS): Define.\n\t* config/m68k/m68k.h (RETURN_POPS_ARGS): Move to...\n\t* config/m68k/m68k.c (m68k_return_pops_args): ...here.  New function.\n\t(TARGET_RETURN_POPS_ARGS): Define.\n\t* config/vax/vax.h (RETURN_POPS_ARGS): Move to...\n\t* config/vax/vax.c (vax_return_pops_args): ...here.  New function.\n\t(TARGET_RETURN_POPS_ARGS): Define.\n\nFrom-SVN: r161528", "tree": {"sha": "2ea3f022499b2b52e578f958001d178d596536d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ea3f022499b2b52e578f958001d178d596536d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/079e7538c0259b82dc4fd0b71c05ef918725a321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079e7538c0259b82dc4fd0b71c05ef918725a321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/079e7538c0259b82dc4fd0b71c05ef918725a321", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079e7538c0259b82dc4fd0b71c05ef918725a321/comments", "author": null, "committer": null, "parents": [{"sha": "ea184343e7fff4b72434947715374498eafa55f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea184343e7fff4b72434947715374498eafa55f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea184343e7fff4b72434947715374498eafa55f9"}], "stats": {"total": 478, "additions": 159, "deletions": 319}, "files": [{"sha": "d1cb9a912eaf4cd02e5fe13bb7d12cc05cfe6a96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -1,3 +1,68 @@\n+2010-06-29  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* reginfo.c (init_reg_sets_1): Adjust comments.\n+\t* combine-stack-adj.c (rest_of_handle_stack_adjustments): Likewise.\n+\t* calls.c (prepare_call_address): Likewise.\n+\t(emit_call_1): Use targetm.calls.return_pops_args.\n+\t(expand_call): Likewise.\n+\t* function.c (assign_parms): Likewise.\n+\t* system.h (RETURN_POPS_ARGS): Add to #pragma poison list.\n+\t* target.h (struct gcc_target) [struct calls]: Add\n+\treturn_pops_args field.\n+\t* targhooks.h (default_return_pops_args): Declare.\n+\t* targhooks.c (default_return_pops_args): Define.\n+\t* target-def.h (TARGET_RETURN_POPS_ARGS): Define.\n+\t(TARGET_CALLS): Add TARGET_RETURN_POPS_ARGS.\n+\t* doc/tm.texi (RETURN_POPS_ARGS): Rename to...\n+\t(TARGET_RETURN_POPS_ARGS): ...this.  Use deftypefn.  Adjust\n+\tdocumentation.\n+\t* config/alpha/alpha.h (RETURN_POPS_ARGS): Delete.\n+\t* config/arc/arc.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/arm/arm.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/avr/avr.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/bfin/bfin.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/cris/cris.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/crx/crx.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/fr30/fr30.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/frv/frv.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/h8300/h8300.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/ia64/ia64.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/iq2000/iq2000.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/lm32/lm32.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/m32c/m32c.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/m32r/m32r.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/m68hc11/m68hc11.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/mcore/mcore.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/mep/mep.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/mips/mips.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/mmix/mmix.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/mn10300/mn10300.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/moxie/moxie.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/pa/pa.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/pdp11/pdp11.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/picochip/picochip.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/rs6000/rs6000.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/rx/rx.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/s390/s390.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/score/score.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/sh/sh.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/sparc/sparc.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/spu/spu.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/stormy16/stormy16.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/v850/v850.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/xtensa/xtensa.h (RETURN_POPS_ARGS): Likewise.\n+\t* config/i386/i386-protos.h (ix86_return_pops_args): Delete.\n+\t* config/i386/i386.h (RETURN_POPS_ARGS): Delete.\n+\t* config/i386/i386.c (ix86_return_pops_args): Make static.\n+\tConstify arguments.\n+\t(TARGET_RETURN_POPS_ARGS): Define.\n+\t* config/m68k/m68k.h (RETURN_POPS_ARGS): Move to...\n+\t* config/m68k/m68k.c (m68k_return_pops_args): ...here.  New function.\n+\t(TARGET_RETURN_POPS_ARGS): Define.\n+\t* config/vax/vax.h (RETURN_POPS_ARGS): Move to...\n+\t* config/vax/vax.c (vax_return_pops_args): ...here.  New function.\n+\t(TARGET_RETURN_POPS_ARGS): Define.\n+\n 2010-06-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/44667"}, {"sha": "c6d4706733ad416775036571e7d3802eefc268b7", "filename": "gcc/calls.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -208,13 +208,15 @@ prepare_call_address (tree fndecl, rtx funexp, rtx static_chain_value,\n    The CALL_INSN is the first insn generated.\n \n    FNDECL is the declaration node of the function.  This is given to the\n-   macro RETURN_POPS_ARGS to determine whether this function pops its own args.\n+   hook TARGET_RETURN_POPS_ARGS to determine whether this function pops\n+   its own args.\n \n-   FUNTYPE is the data type of the function.  This is given to the macro\n-   RETURN_POPS_ARGS to determine whether this function pops its own args.\n-   We used to allow an identifier for library functions, but that doesn't\n-   work when the return type is an aggregate type and the calling convention\n-   says that the pointer to this aggregate is to be popped by the callee.\n+   FUNTYPE is the data type of the function.  This is given to the hook\n+   TARGET_RETURN_POPS_ARGS to determine whether this function pops its\n+   own args.  We used to allow an identifier for library functions, but\n+   that doesn't work when the return type is an aggregate type and the\n+   calling convention says that the pointer to this aggregate is to be\n+   popped by the callee.\n \n    STACK_SIZE is the number of bytes of arguments on the stack,\n    ROUNDED_STACK_SIZE is that number rounded up to\n@@ -256,7 +258,8 @@ emit_call_1 (rtx funexp, tree fntree ATTRIBUTE_UNUSED, tree fndecl ATTRIBUTE_UNU\n   rtx rounded_stack_size_rtx = GEN_INT (rounded_stack_size);\n   rtx call_insn;\n   int already_popped = 0;\n-  HOST_WIDE_INT n_popped = RETURN_POPS_ARGS (fndecl, funtype, stack_size);\n+  HOST_WIDE_INT n_popped\n+    = targetm.calls.return_pops_args (fndecl, funtype, stack_size);\n \n #ifdef CALL_POPS_ARGS\n   n_popped += CALL_POPS_ARGS (* args_so_far);\n@@ -2323,10 +2326,10 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t\t       - crtl->args.pretend_args_size)\n       /* If the callee pops its own arguments, then it must pop exactly\n \t the same number of arguments as the current function.  */\n-      || (RETURN_POPS_ARGS (fndecl, funtype, args_size.constant)\n-\t  != RETURN_POPS_ARGS (current_function_decl,\n-\t\t\t       TREE_TYPE (current_function_decl),\n-\t\t\t       crtl->args.size))\n+      || (targetm.calls.return_pops_args (fndecl, funtype, args_size.constant)\n+\t  != targetm.calls.return_pops_args (current_function_decl,\n+\t\t\t\t\t     TREE_TYPE (current_function_decl),\n+\t\t\t\t\t     crtl->args.size))\n       || !lang_hooks.decls.ok_for_sibcall (fndecl))\n     try_tail_call = 0;\n "}, {"sha": "96bfb3a633e193c7dfd5ae3911cfffcbebff6ec0", "filename": "gcc/combine-stack-adj.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fcombine-stack-adj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fcombine-stack-adj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine-stack-adj.c?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -555,7 +555,7 @@ rest_of_handle_stack_adjustments (void)\n   cleanup_cfg (flag_crossjumping ? CLEANUP_CROSSJUMP : 0);\n \n   /* This is kind of a heuristic.  We need to run combine_stack_adjustments\n-     even for machines with possibly nonzero RETURN_POPS_ARGS\n+     even for machines with possibly nonzero TARGET_RETURN_POPS_ARGS\n      and ACCUMULATE_OUTGOING_ARGS.  We expect that only ports having\n      push instructions will have popping returns.  */\n #ifndef PUSH_ROUNDING"}, {"sha": "c8590b9c782c931c9e4aad4161b1d6c8f1f405c1", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -703,15 +703,6 @@ extern int alpha_memory_latency;\n    in a register.  */\n /* #define REG_PARM_STACK_SPACE */\n \n-/* Value is the number of bytes of arguments automatically\n-   popped when returning from a subroutine call.\n-   FUNDECL is the declaration node of the function (as a tree),\n-   FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name.\n-   SIZE is the number of bytes of arguments passed on the stack.  */\n-\n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n-\n /* Define how to find the value returned by a function.\n    VALTYPE is the data type of the value (as a tree).\n    If the precise function being called is known, FUNC is its FUNCTION_DECL;"}, {"sha": "9a4e360504b12df7cb4ddf9827810d1b0051feaa", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -530,14 +530,6 @@ extern enum reg_class arc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n    increase the stack frame size by this amount.  */\n #define ACCUMULATE_OUTGOING_ARGS 1\n \n-/* Value is the number of bytes of arguments automatically\n-   popped when returning from a subroutine call.\n-   FUNDECL is the declaration node of the function (as a tree),\n-   FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name.\n-   SIZE is the number of bytes of arguments passed on the stack.  */\n-#define RETURN_POPS_ARGS(DECL, FUNTYPE, SIZE) 0\n-\n /* Define a data type for recording info about an argument list\n    during the scan of that argument list.  This data type should\n    hold all necessary information about the function itself"}, {"sha": "fcd1ef3d2ebe63c141e432227f4a34cfce7445f1", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -1498,17 +1498,6 @@ do {\t\t\t\t\t\t\t\t\t      \\\n /* Offset of first parameter from the argument pointer register value.  */\n #define FIRST_PARM_OFFSET(FNDECL)  (TARGET_ARM ? 4 : 0)\n \n-/* Value is the number of byte of arguments automatically\n-   popped when returning from a subroutine call.\n-   FUNDECL is the declaration node of the function (as a tree),\n-   FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name.\n-   SIZE is the number of bytes of arguments passed on the stack.\n-\n-   On the ARM, the caller does not pop any of its arguments that were passed\n-   on the stack.  */\n-#define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, SIZE)  0\n-\n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n #define LIBCALL_VALUE(MODE)  \t\t\t\t\t\t\\"}, {"sha": "32ff27eedf443c72a1ae85f20ac61bfd0b522c43", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -376,8 +376,6 @@ enum reg_class {\n    for POST_DEC targets (PR27386).  */\n /*#define PUSH_ROUNDING(NPUSHED) (NPUSHED)*/\n \n-#define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, STACK_SIZE) 0\n-\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) (function_arg (&(CUM), MODE, TYPE, NAMED))\n \n typedef struct avr_args {"}, {"sha": "367cd96dbc8e4db02832bb699fe05907131fbc83", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -871,8 +871,6 @@ typedef struct {\n #define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\\n   (function_arg_advance (&CUM, MODE, TYPE, NAMED))\n \n-#define RETURN_POPS_ARGS(FDECL, FUNTYPE, STKSIZE) 0\n-\n /* Define how to find the value returned by a function.\n    VALTYPE is the data type of the value (as a tree).\n    If the precise function being called is known, FUNC is its FUNCTION_DECL;"}, {"sha": "4c685489a8c34cc9528720aff9fbf4dd944a9932", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -859,8 +859,6 @@ enum reg_class\n \n #define ACCUMULATE_OUTGOING_ARGS 1\n \n-#define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, STACKSIZE) 0\n-\n \n /* Node: Register Arguments */\n "}, {"sha": "a6260f48aa253efa608c686ea52d5881d65fa303", "filename": "gcc/config/crx/crx.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fcrx%2Fcrx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fcrx%2Fcrx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -313,8 +313,6 @@ enum reg_class\n \n #define PUSH_ROUNDING(BYTES) (((BYTES) + 3) & ~3)\n \n-#define RETURN_POPS_ARGS(FNDECL, FUNTYPE, SIZE)   0\n-\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n   ((rtx) crx_function_arg(&(CUM), (MODE), (TYPE), (NAMED)))\n "}, {"sha": "ed675b16e6a0526d17eab61cd95cf01e0056672a", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -568,41 +568,6 @@ enum reg_class\n    proper.  */\n #define ACCUMULATE_OUTGOING_ARGS 1\n \n-/* A C expression that should indicate the number of bytes of its own arguments\n-   that a function pops on returning, or 0 if the function pops no arguments\n-   and the caller must therefore pop them all after the function returns.\n-\n-   FUNDECL is a C variable whose value is a tree node that describes the\n-   function in question.  Normally it is a node of type `FUNCTION_DECL' that\n-   describes the declaration of the function.  From this it is possible to\n-   obtain the DECL_ATTRIBUTES of the function.\n-\n-   FUNTYPE is a C variable whose value is a tree node that describes the\n-   function in question.  Normally it is a node of type `FUNCTION_TYPE' that\n-   describes the data type of the function.  From this it is possible to obtain\n-   the data types of the value and arguments (if known).\n-\n-   When a call to a library function is being considered, FUNTYPE will contain\n-   an identifier node for the library function.  Thus, if you need to\n-   distinguish among various library functions, you can do so by their names.\n-   Note that \"library function\" in this context means a function used to\n-   perform arithmetic, whose name is known specially in the compiler and was\n-   not mentioned in the C code being compiled.\n-\n-   STACK-SIZE is the number of bytes of arguments passed on the stack.  If a\n-   variable number of bytes is passed, it is zero, and argument popping will\n-   always be the responsibility of the calling function.\n-\n-   On the VAX, all functions always pop their arguments, so the definition of\n-   this macro is STACK-SIZE.  On the 68000, using the standard calling\n-   convention, no functions pop their arguments, so the value of the macro is\n-   always 0 in this case.  But an alternative calling convention is available\n-   in which functions that take a fixed number of arguments pop them but other\n-   functions (such as `printf') pop nothing (the caller pops all).  When this\n-   convention is in use, FUNTYPE is examined to determine whether a function\n-   takes a fixed number of arguments.  */\n-#define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, STACK_SIZE) 0\n-\n /*}}}*/ \f\n /*{{{  Function Arguments in Registers.  */ \n "}, {"sha": "56db4e4a21efdbef62ef1a254a1e8c42cd0ff47a", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -1614,41 +1614,6 @@ typedef struct frv_stack {\n    proper.  */\n #define ACCUMULATE_OUTGOING_ARGS 1\n \n-/* A C expression that should indicate the number of bytes of its own arguments\n-   that a function pops on returning, or 0 if the function pops no arguments\n-   and the caller must therefore pop them all after the function returns.\n-\n-   FUNDECL is a C variable whose value is a tree node that describes the\n-   function in question.  Normally it is a node of type `FUNCTION_DECL' that\n-   describes the declaration of the function.  From this it is possible to\n-   obtain the DECL_ATTRIBUTES of the function.\n-\n-   FUNTYPE is a C variable whose value is a tree node that describes the\n-   function in question.  Normally it is a node of type `FUNCTION_TYPE' that\n-   describes the data type of the function.  From this it is possible to obtain\n-   the data types of the value and arguments (if known).\n-\n-   When a call to a library function is being considered, FUNTYPE will contain\n-   an identifier node for the library function.  Thus, if you need to\n-   distinguish among various library functions, you can do so by their names.\n-   Note that \"library function\" in this context means a function used to\n-   perform arithmetic, whose name is known specially in the compiler and was\n-   not mentioned in the C code being compiled.\n-\n-   STACK-SIZE is the number of bytes of arguments passed on the stack.  If a\n-   variable number of bytes is passed, it is zero, and argument popping will\n-   always be the responsibility of the calling function.\n-\n-   On the VAX, all functions always pop their arguments, so the definition of\n-   this macro is STACK-SIZE.  On the 68000, using the standard calling\n-   convention, no functions pop their arguments, so the value of the macro is\n-   always 0 in this case.  But an alternative calling convention is available\n-   in which functions that take a fixed number of arguments pop them but other\n-   functions (such as `printf') pop nothing (the caller pops all).  When this\n-   convention is in use, FUNTYPE is examined to determine whether a function\n-   takes a fixed number of arguments.  */\n-#define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, STACK_SIZE) 0\n-\n \f\n /* The number of register assigned to holding function arguments.  */\n "}, {"sha": "4e0a3b6728e42b637a3bb2cb01b08dbf26a34194", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -536,17 +536,6 @@ enum reg_class {\n \n #define FIRST_PARM_OFFSET(FNDECL) 0\n \n-/* Value is the number of bytes of arguments automatically\n-   popped when returning from a subroutine call.\n-   FUNDECL is the declaration node of the function (as a tree),\n-   FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name.\n-   SIZE is the number of bytes of arguments passed on the stack.\n-\n-   On the H8 the return does not pop anything.  */\n-\n-#define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, SIZE) 0\n-\n /* Definitions for register eliminations.\n \n    This is an array of structures.  Each structure initializes one pair"}, {"sha": "f3facb3598ff949206bb73d8bd6cbe7f85225a3e", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -188,8 +188,6 @@ extern void function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n #endif\t/* RTX_CODE  */\n \n #ifdef TREE_CODE\n-extern int ix86_return_pops_args (tree, tree, int);\n-\n extern int ix86_data_alignment (tree, int);\n extern unsigned int ix86_local_alignment (tree, enum machine_mode,\n \t\t\t\t\t  unsigned int);"}, {"sha": "39308db43322c9318e512fb3e5b261c28f69f3ea", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -4865,7 +4865,7 @@ ix86_eax_live_at_start_p (void)\n \n    The attribute stdcall is equivalent to RTD on a per module basis.  */\n \n-int\n+static int\n ix86_return_pops_args (tree fundecl, tree funtype, int size)\n {\n   int rtd;\n@@ -30888,6 +30888,8 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n #define TARGET_STATIC_CHAIN ix86_static_chain\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT ix86_trampoline_init\n+#undef TARGET_RETURN_POPS_ARGS\n+#define TARGET_RETURN_POPS_ARGS ix86_return_pops_args\n \n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR ix86_gimplify_va_arg"}, {"sha": "05adfc5894ea4b1d75dda6545a075efc8f159d5b", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -1542,26 +1542,6 @@ enum reg_class\n #define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) \\\n   (ix86_function_type_abi (FNTYPE) == MS_ABI)\n \n-/* Value is the number of bytes of arguments automatically\n-   popped when returning from a subroutine call.\n-   FUNDECL is the declaration node of the function (as a tree),\n-   FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name.\n-   SIZE is the number of bytes of arguments passed on the stack.\n-\n-   On the 80386, the RTD insn may be used to pop them if the number\n-     of args is fixed, but if the number is variable then the caller\n-     must pop them all.  RTD can't be used for library calls now\n-     because the library is compiled with the Unix compiler.\n-   Use of RTD is a selectable option, since it is incompatible with\n-   standard Unix calling sequences.  If the option is not selected,\n-   the caller must always pop the args.\n-\n-   The attribute stdcall is equivalent to RTD on a per module basis.  */\n-\n-#define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, SIZE) \\\n-  ix86_return_pops_args ((FUNDECL), (FUNTYPE), (SIZE))\n-\n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n "}, {"sha": "d3821f6c6f415556c355ca5e1a87f37f76fe1b8e", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -1042,12 +1042,6 @@ enum reg_class\n \n #define ACCUMULATE_OUTGOING_ARGS 1\n \n-/* A C expression that should indicate the number of bytes of its own arguments\n-   that a function pops on returning, or 0 if the function pops no arguments\n-   and the caller must therefore pop them all after the function returns.  */\n-\n-#define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, STACK_SIZE) 0\n-\n \f\n /* Function Arguments in Registers */\n "}, {"sha": "07d4c2d864b0e0744fdd8df9f09fc6371c248c0b", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -365,8 +365,6 @@ enum reg_class\n \n #define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n \n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n-\n \f\n /* Function Arguments in Registers.  */\n "}, {"sha": "0bf37455627b46d6cf1a8c433e5af7ed87d3dc23", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -273,8 +273,6 @@ enum reg_class\n \n #define ACCUMULATE_OUTGOING_ARGS 1\n \n-#define RETURN_POPS_ARGS(DECL, FUNTYPE, SIZE) 0\n-\n /*--------------------------------*/\n /* Passing Arguments in Registers */\n /*--------------------------------*/"}, {"sha": "8f7b720c696a80319e84dd3745c736495c3d33da", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -503,7 +503,6 @@ enum reg_class\n \n #define PUSH_ARGS 1\n #define PUSH_ROUNDING(N) m32c_push_rounding (N)\n-#define RETURN_POPS_ARGS(D,T,S) 0\n #define CALL_POPS_ARGS(C) 0\n \n /* Passing Arguments in Registers */"}, {"sha": "91d055bcb5bef3f6caf616c667e7fbdd691c369e", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -823,14 +823,6 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n    increase the stack frame size by this amount.  */\n #define ACCUMULATE_OUTGOING_ARGS 1\n \n-/* Value is the number of bytes of arguments automatically\n-   popped when returning from a subroutine call.\n-   FUNDECL is the declaration node of the function (as a tree),\n-   FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name.\n-   SIZE is the number of bytes of arguments passed on the stack.  */\n-#define RETURN_POPS_ARGS(DECL, FUNTYPE, SIZE) 0\n-\n /* Define a data type for recording info about an argument list\n    during the scan of that argument list.  This data type should\n    hold all necessary information about the function itself"}, {"sha": "2ea80a763968c4536dd4e3c4f308d10cc5d7c8f8", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -896,15 +896,6 @@ extern enum reg_class m68hc11_tmp_regs_class;\n    stack pointer really advances by. No rounding or alignment needed\n    for MC6811.  */\n #define PUSH_ROUNDING(BYTES)\t(BYTES)\n-\n-/* Value is 1 if returning from a function call automatically pops the\n-   arguments described by the number-of-args field in the call. FUNTYPE is\n-   the data type of the function (as a tree), or for a library call it is\n-   an identifier node for the subroutine name.\n-  \n-   The standard MC6811 call, with arg count word, includes popping the\n-   args as part of the call template.  */\n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE)\t0\n \f\n /* Passing Arguments in Registers.  */\n "}, {"sha": "529266ca23f6162fa8c2f3233d85c413fa78627f", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -153,6 +153,7 @@ static bool m68k_return_in_memory (const_tree, const_tree);\n #endif\n static void m68k_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n static void m68k_trampoline_init (rtx, tree, rtx);\n+static int m68k_return_pops_args (tree, tree, int);\n static rtx m68k_delegitimize_address (rtx);\n \f\n \n@@ -271,6 +272,9 @@ const char *m68k_library_id_string = \"_current_shared_library_a5_offset_\";\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT m68k_trampoline_init\n \n+#undef TARGET_RETURN_POPS_ARGS\n+#define TARGET_RETURN_POPS_ARGS m68k_return_pops_args\n+\n #undef TARGET_DELEGITIMIZE_ADDRESS\n #define TARGET_DELEGITIMIZE_ADDRESS m68k_delegitimize_address\n \n@@ -6520,4 +6524,25 @@ m68k_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n   FINALIZE_TRAMPOLINE (XEXP (m_tramp, 0));\n }\n \n+/* On the 68000, the RTS insn cannot pop anything.\n+   On the 68010, the RTD insn may be used to pop them if the number\n+     of args is fixed, but if the number is variable then the caller\n+     must pop them all.  RTD can't be used for library calls now\n+     because the library is compiled with the Unix compiler.\n+   Use of RTD is a selectable option, since it is incompatible with\n+   standard Unix calling sequences.  If the option is not selected,\n+   the caller must always pop the args.  */\n+\n+static int\n+m68k_return_pops_args (tree fundecl, tree funtype, int size)\n+{\n+  return ((TARGET_RTD\n+\t   && (!fundecl\n+\t       || TREE_CODE (fundecl) != IDENTIFIER_NODE)\n+\t   && (TYPE_ARG_TYPES (funtype) == 0\n+\t       || (TREE_VALUE (tree_last (TYPE_ARG_TYPES (funtype)))\n+\t\t   == void_type_node)))\n+\t  ? size : 0);\n+}\n+\n #include \"gt-m68k.h\""}, {"sha": "ac478619f73ee67b557fec22d535895fabc1d00a", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -534,21 +534,6 @@ extern enum reg_class regno_reg_class[];\n \n #define FIRST_PARM_OFFSET(FNDECL) 8\n \n-/* On the 68000, the RTS insn cannot pop anything.\n-   On the 68010, the RTD insn may be used to pop them if the number\n-     of args is fixed, but if the number is variable then the caller\n-     must pop them all.  RTD can't be used for library calls now\n-     because the library is compiled with the Unix compiler.\n-   Use of RTD is a selectable option, since it is incompatible with\n-   standard Unix calling sequences.  If the option is not selected,\n-   the caller must always pop the args.  */\n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE)   \\\n-  ((TARGET_RTD && (!(FUNDECL) || TREE_CODE (FUNDECL) != IDENTIFIER_NODE)\t\\\n-    && (TYPE_ARG_TYPES (FUNTYPE) == 0\t\t\t\t\\\n-\t|| (TREE_VALUE (tree_last (TYPE_ARG_TYPES (FUNTYPE)))\t\\\n-\t    == void_type_node)))\t\t\t\t\\\n-   ? (SIZE) : 0)\n-\n /* On the m68k the return value defaults to D0.  */\n #define FUNCTION_VALUE(VALTYPE, FUNC)  \\\n   gen_rtx_REG (TYPE_MODE (VALTYPE), D0_REG)"}, {"sha": "7421d5dbb85fc87029a050624494e96db824c773", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -540,16 +540,6 @@ extern const enum reg_class reg_class_from_letter[];\n /* Offset of first parameter from the argument pointer register value.  */\n #define FIRST_PARM_OFFSET(FNDECL)  0\n \n-/* Value is the number of byte of arguments automatically\n-   popped when returning from a subroutine call.\n-   FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name.\n-   SIZE is the number of bytes of arguments passed on the stack.\n-\n-   On the MCore, the callee does not pop any of its arguments that were passed\n-   on the stack.  */\n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n-\n /* Define how to find the value returned by a function.\n    VALTYPE is the data type of the value (as a tree).\n    If the precise function being called is known, FUNC is its FUNCTION_DECL;"}, {"sha": "d3af07349510f8fc8ff7c92d70af04470fd50818", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -503,8 +503,6 @@ extern unsigned int mep_selected_isa;\n \n #define ACCUMULATE_OUTGOING_ARGS 1\n \n-#define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, STACK_SIZE) 0\n-\n \f\n \n /* The ABI is thus: Arguments are in $1, $2, $3, $4, stack.  Arguments"}, {"sha": "ea79eba25500874641a3dd6499d5b3bfa4ac0e06", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -2162,8 +2162,6 @@ enum reg_class\n \n #define STACK_BOUNDARY (TARGET_NEWABI ? 128 : 64)\n \f\n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n-\n /* Symbolic macros for the registers used to return integer and floating\n    point values.  */\n "}, {"sha": "48551028d5bbf8d024b7379ea5ddc08590fd4f2b", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -586,8 +586,6 @@ enum reg_class\n \n #define ACCUMULATE_OUTGOING_ARGS 1\n \n-#define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, STACKSIZE) 0\n-\n \n /* Node: Register Arguments */\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED)\t\\"}, {"sha": "1700f1a25be583d92cfb0c2f6b0e8fd3fdd6fc8f", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -492,15 +492,6 @@ enum reg_class {\n    them whenever possible.  */\n #define CAN_DEBUG_WITHOUT_FP\n \n-/* Value is the number of bytes of arguments automatically\n-   popped when returning from a subroutine call.\n-   FUNDECL is the declaration node of the function (as a tree),\n-   FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name.\n-   SIZE is the number of bytes of arguments passed on the stack.  */\n-\n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n-\n /* We use d0/d1 for passing parameters, so allocate 8 bytes of space\n    for a register flushback area.  */\n #define REG_PARM_STACK_SPACE(DECL) 8"}, {"sha": "0a53b6b72165c9dd487ffd14e07672e265c5d2c8", "filename": "gcc/config/moxie/moxie.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -453,8 +453,6 @@ enum reg_class\n /* All load operations zero extend.  */\n #define LOAD_EXTEND_OP(MEM) ZERO_EXTEND\n \n-#define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, STACK_SIZE) 0\n-\n /* A C expression that is nonzero if X is a legitimate constant for\n    an immediate operand on the target machine.  */\n #define LEGITIMATE_CONSTANT_P(X) 1"}, {"sha": "4eae700b0777d5065abd7b4ba461806934808874", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -553,14 +553,6 @@ extern struct rtx_def *hppa_pic_save_rtx (void);\n    ? (STACK_POINTER_OFFSET)\t\t\\\n    : ((STACK_POINTER_OFFSET) - crtl->outgoing_args_size))\n \n-/* Value is 1 if returning from a function call automatically\n-   pops the arguments described by the number-of-args field in the call.\n-   FUNDECL is the declaration node of the function (as a tree),\n-   FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name.  */\n-\n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n-\n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n "}, {"sha": "006fb4cbd86587a6fd75fb9b835269e254d5d6eb", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -435,14 +435,6 @@ extern int current_first_parm_offset;\n */\n #define FIRST_PARM_OFFSET(FNDECL) 4\n \n-/* Value is 1 if returning from a function call automatically\n-   pops the arguments described by the number-of-args field in the call.\n-   FUNDECL is the declaration node of the function (as a tree),\n-   FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name.  */\n-\n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n-\n /* Define how to find the value returned by a function.\n    VALTYPE is the data type of the value (as a tree).\n    If the precise function being called is known, FUNC is its FUNCTION_DECL;"}, {"sha": "b4aec727df561ad91db7f8cac3f16361acf0a86c", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -406,9 +406,6 @@ extern const enum reg_class picochip_regno_reg_class[FIRST_PSEUDO_REGISTER];\n \n #define PUSH_ARGS 0\n \n-/* Functions don't pop their args.  */\n-#define RETURN_POPS_ARGS(FNDECL, FNTYPE, STACK) 0\n-\n /* Passing Arguments in Registers  */\n \n /* Store the offset of the next argument. */"}, {"sha": "2ee3da182840e98bc8ee4278cc23f4972bb4c7f4", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -1578,15 +1578,6 @@ extern enum rs6000_abi rs6000_current_abi;\t/* available for use by subtarget */\n    found in the variable crtl->outgoing_args_size.  */\n #define ACCUMULATE_OUTGOING_ARGS 1\n \n-/* Value is the number of bytes of arguments automatically\n-   popped when returning from a subroutine call.\n-   FUNDECL is the declaration node of the function (as a tree),\n-   FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name.\n-   SIZE is the number of bytes of arguments passed on the stack.  */\n-\n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n-\n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n "}, {"sha": "afaa07b0bc5bc92275a14a2ed67dd600d1b3beb2", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -154,7 +154,6 @@ extern enum rx_cpu_types  rx_cpu_type;\n #define MOVE_MAX \t\t\t4\n #define STARTING_FRAME_OFFSET\t\t0\n \n-#define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, SIZE) 0\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC)   1\n \n #define LEGITIMATE_CONSTANT_P(X) \trx_is_legitimate_constant (X)"}, {"sha": "cbe28991c18261ec5580d680eb1d913e16356183", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -673,9 +673,6 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n /* We need current_function_outgoing_args to be valid.  */\n #define ACCUMULATE_OUTGOING_ARGS 1\n \n-/* Return doesn't modify the stack.  */\n-#define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, SIZE) 0\n-\n \n /* Register arguments.  */\n "}, {"sha": "98ca0a3537bd8fab898ebbda5a68f458cfe22cb1", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -581,8 +581,6 @@ extern enum reg_class score_char_to_class[256];\n    `crtl->outgoing_args_size'.  */\n #define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n \n-#define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, STACK_SIZE) 0\n-\n /* Passing Arguments in Registers  */\n /* Determine where to put an argument to a function.\n    Value is zero to push the argument on the stack,"}, {"sha": "ee3e05995d6c640639d4e2b8431fc187214b5cb6", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -1423,17 +1423,6 @@ extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n /* Offset of first parameter from the argument pointer register value.  */\n #define FIRST_PARM_OFFSET(FNDECL)  0\n \n-/* Value is the number of byte of arguments automatically\n-   popped when returning from a subroutine call.\n-   FUNDECL is the declaration node of the function (as a tree),\n-   FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name.\n-   SIZE is the number of bytes of arguments passed on the stack.\n-\n-   On the SH, the caller does not pop any of its arguments that were passed\n-   on the stack.  */\n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE)  0\n-\n /* Value is the number of bytes of arguments automatically popped when\n    calling a subroutine.\n    CUM is the accumulated argument list."}, {"sha": "6f6aec7d3f9e520368d6a2c71b54166abfa65165", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -1387,15 +1387,6 @@ extern char leaf_reg_remap[];\n    the function!  */\n #define ACCUMULATE_OUTGOING_ARGS 1\n \n-/* Value is the number of bytes of arguments automatically\n-   popped when returning from a subroutine call.\n-   FUNDECL is the declaration node of the function (as a tree),\n-   FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name.\n-   SIZE is the number of bytes of arguments passed on the stack.  */\n-\n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n-\n /* Define this macro if the target machine has \"register windows\".  This\n    C expression returns the register number as seen by the called function\n    corresponding to register number OUT as seen by the calling function."}, {"sha": "d3880418c2f151fb0e3d349df91edbccff114e51", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -334,8 +334,6 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n \n #define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n \n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) (0)\n-\n \f\n /* Register Arguments */\n "}, {"sha": "4ea89a218dbc75bc6fa7d28c54852509c7d46933", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -328,8 +328,6 @@ enum reg_class\n \n #define PUSH_ROUNDING(BYTES) (((BYTES) + 1) & ~1)\n \n-#define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, STACK_SIZE) 0\n-\n \f\n /* Function Arguments in Registers.  */\n "}, {"sha": "25faff1e7ddd0b8bbe1e3454e9040d45ae3bfad2", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -556,15 +556,6 @@ enum reg_class\n /* Keep the stack pointer constant throughout the function.  */\n #define ACCUMULATE_OUTGOING_ARGS 1\n \n-/* Value is the number of bytes of arguments automatically\n-   popped when returning from a subroutine call.\n-   FUNDECL is the declaration node of the function (as a tree),\n-   FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name.\n-   SIZE is the number of bytes of arguments passed on the stack.  */\n-\n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n-\n #define RETURN_ADDR_RTX(COUNT, FP) v850_return_addr (COUNT)\n \f\n /* Define a data type for recording info about an argument list"}, {"sha": "b3dfcb1e0798b065b35b267b01858a6ffe281b10", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -58,6 +58,7 @@ static rtx vax_struct_value_rtx (tree, int);\n static rtx vax_builtin_setjmp_frame_value (void);\n static void vax_asm_trampoline_template (FILE *);\n static void vax_trampoline_init (rtx, tree, rtx);\n+static int vax_return_pops_args (tree, tree, int);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -106,6 +107,8 @@ static void vax_trampoline_init (rtx, tree, rtx);\n #define TARGET_ASM_TRAMPOLINE_TEMPLATE vax_asm_trampoline_template\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT vax_trampoline_init\n+#undef TARGET_RETURN_POPS_ARGS\n+#define TARGET_RETURN_POPS_ARGS vax_return_pops_args\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -2068,3 +2071,18 @@ vax_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n   emit_insn (gen_sync_istream ());\n }\n \n+/* Value is the number of bytes of arguments automatically\n+   popped when returning from a subroutine call.\n+   FUNDECL is the declaration node of the function (as a tree),\n+   FUNTYPE is the data type of the function (as a tree),\n+   or for a library call it is an identifier node for the subroutine name.\n+   SIZE is the number of bytes of arguments passed on the stack.\n+\n+   On the VAX, the RET insn pops a maximum of 255 args for any function.  */\n+\n+static int\n+vax_return_pops_args (tree fundecl ATTRIBUTE_UNUSED,\n+\t\t      tree funtype ATTRIBUTE_UNUSED, int size)\n+{\n+  return size > 255 * 4 ? 0 : size;\n+}"}, {"sha": "88a8f1c9b1faa1de43137e981fe129ab6a3c206c", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -305,18 +305,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n /* Offset of first parameter from the argument pointer register value.  */\n #define FIRST_PARM_OFFSET(FNDECL) 4\n \n-/* Value is the number of bytes of arguments automatically\n-   popped when returning from a subroutine call.\n-   FUNDECL is the declaration node of the function (as a tree),\n-   FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name.\n-   SIZE is the number of bytes of arguments passed on the stack.\n-\n-   On the VAX, the RET insn pops a maximum of 255 args for any function.  */\n-\n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE)\t\\\n-  ((SIZE) > 255 * 4 ? 0 : (SIZE))\n-\n /* Define how to find the value returned by a function.\n    VALTYPE is the data type of the value (as a tree).\n    If the precise function being called is known, FUNC is its FUNCTION_DECL;"}, {"sha": "32819bc0de7848c0cb72848db1be649e4a4e4500", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -547,9 +547,6 @@ extern const enum reg_class xtensa_regno_to_class[FIRST_PSEUDO_REGISTER];\n    128-bit datatypes defined in TIE (e.g., for Vectra).  */\n #define STACK_BOUNDARY 128\n \n-/* Functions do not pop arguments off the stack.  */\n-#define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, SIZE) 0\n-\n /* Use a fixed register window size of 8.  */\n #define WINDOW_SIZE 8\n "}, {"sha": "81665c310aaa500a29d712d4f0cc4b0551a38df7", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -3928,11 +3928,10 @@ suppresses this behavior and causes the parameter to be passed on the\n stack in its natural location.\n @end defmac\n \n-@defmac RETURN_POPS_ARGS (@var{fundecl}, @var{funtype}, @var{stack-size})\n-A C expression that should indicate the number of bytes of its own\n-arguments that a function pops on returning, or 0 if the\n-function pops no arguments and the caller must therefore pop them all\n-after the function returns.\n+@deftypefn {Target Hook} TARGET_RETURN_POPS_ARGS (@var{fundecl}, @var{funtype}, @var{stack-size})\n+This target hook returns the number of bytes of its own arguments that\n+a function pops on returning, or 0 if the function pops no arguments\n+and the caller must therefore pop them all after the function returns.\n \n @var{fundecl} is a C variable whose value is a tree node that describes\n the function in question.  Normally it is a node of type\n@@ -3965,7 +3964,7 @@ arguments pop them but other functions (such as @code{printf}) pop\n nothing (the caller pops all).  When this convention is in use,\n @var{funtype} is examined to determine whether a function takes a fixed\n number of arguments.\n-@end defmac\n+@end deftypefn\n \n @defmac CALL_POPS_ARGS (@var{cum})\n A C expression that should indicate the number of bytes a call sequence"}, {"sha": "f58d3d1b4e680a5465cc11171854c9b08c4b96ae", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -3369,8 +3369,9 @@ assign_parms (tree fndecl)\n   /* See how many bytes, if any, of its args a function should try to pop\n      on return.  */\n \n-  crtl->args.pops_args = RETURN_POPS_ARGS (fndecl, TREE_TYPE (fndecl),\n-\t\t\t\t\t\t crtl->args.size);\n+  crtl->args.pops_args = targetm.calls.return_pops_args (fndecl,\n+\t\t\t\t\t\t\t TREE_TYPE (fndecl),\n+\t\t\t\t\t\t\t crtl->args.size);\n \n   /* For stdarg.h function, save info about\n      regs and stack space used by the named args.  */"}, {"sha": "bf2d8025b3c2adf765f9fee0f7a608093ef671c5", "filename": "gcc/reginfo.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -530,11 +530,12 @@ init_reg_sets_1 (void)\n       /* There are a couple of fixed registers that we know are safe to\n \t exclude from being clobbered by calls:\n \n-\t The frame pointer is always preserved across calls.  The arg pointer\n-\t is if it is fixed.  The stack pointer usually is, unless\n-\t RETURN_POPS_ARGS, in which case an explicit CLOBBER will be present.\n-\t If we are generating PIC code, the PIC offset table register is\n-\t preserved across calls, though the target can override that.  */\n+\t The frame pointer is always preserved across calls.  The arg\n+\t pointer is if it is fixed.  The stack pointer usually is,\n+\t unless TARGET_RETURN_POPS_ARGS, in which case an explicit\n+\t CLOBBER will be present.  If we are generating PIC code, the\n+\t PIC offset table register is preserved across calls, though the\n+\t target can override that.  */\n \n       if (i == STACK_POINTER_REGNUM)\n \t;"}, {"sha": "dd72d07fa3df6c1ff26c27b8dfae03f01ca1bf42", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -714,7 +714,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tFUNCTION_ARG_PARTIAL_NREGS ASM_OUTPUT_DWARF_DTPREL\t\t\\\n \tALLOCATE_INITIAL_VALUE LEGITIMIZE_ADDRESS FRAME_POINTER_REQUIRED \\\n \tCAN_ELIMINATE TRAMPOLINE_TEMPLATE INITIALIZE_TRAMPOLINE\t\t\\\n-\tTRAMPOLINE_ADJUST_ADDRESS STATIC_CHAIN STATIC_CHAIN_INCOMING\n+\tTRAMPOLINE_ADJUST_ADDRESS STATIC_CHAIN STATIC_CHAIN_INCOMING\t\\\n+\tRETURN_POPS_ARGS\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "7342ba7715f5cf871920284e0f73bcad66291b17", "filename": "gcc/target-def.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -722,6 +722,7 @@\n #define TARGET_STATIC_CHAIN default_static_chain\n #define TARGET_TRAMPOLINE_INIT default_trampoline_init\n #define TARGET_TRAMPOLINE_ADJUST_ADDRESS NULL\n+#define TARGET_RETURN_POPS_ARGS default_return_pops_args\n \n #define TARGET_CALLS {\t\t\t\t\t\t\\\n    TARGET_PROMOTE_FUNCTION_MODE,\t\t\t\t\\\n@@ -748,7 +749,8 @@\n    TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS,\t\t\t\\\n    TARGET_STATIC_CHAIN,\t\t\t\t\t\t\\\n    TARGET_TRAMPOLINE_INIT,\t\t\t\t\t\\\n-   TARGET_TRAMPOLINE_ADJUST_ADDRESS\t\t\t\t\\\n+   TARGET_TRAMPOLINE_ADJUST_ADDRESS,\t\t\t\t\\\n+   TARGET_RETURN_POPS_ARGS\t\t\t\t\t\\\n    }\n \n #ifndef TARGET_UNWIND_TABLES_DEFAULT"}, {"sha": "1d4ab4103f2a1cf47b3983b700ada05c77cdf6af", "filename": "gcc/target.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -1064,6 +1064,11 @@ struct gcc_target\n \n     /* Adjust the address of the trampoline in a target-specific way.  */\n     rtx (*trampoline_adjust_address) (rtx addr);\n+\n+    /* Return the number of bytes of its own arguments that a function\n+       pops on returning, or 0 if the function pops no arguments and the\n+       caller must therefore pop them all after the function returns.  */\n+    int (*return_pops_args) (tree fundecl, tree funtype, int size);\n   } calls;\n \n   /* Return the diagnostic message string if conversion from FROMTYPE"}, {"sha": "b0ef5c6127ebc12418c12d25c58155728a462ae2", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -756,6 +756,14 @@ default_trampoline_init (rtx ARG_UNUSED (m_tramp), tree ARG_UNUSED (t_func),\n   sorry (\"nested function trampolines not supported on this target\");\n }\n \n+int\n+default_return_pops_args (tree fundecl ATTRIBUTE_UNUSED,\n+\t\t\t  tree funtype ATTRIBUTE_UNUSED,\n+\t\t\t  int size ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n enum reg_class\n default_branch_target_register_class (void)\n {"}, {"sha": "e24f85ecedef1f0613ddbefee4ecbcfc1705430c", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079e7538c0259b82dc4fd0b71c05ef918725a321/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=079e7538c0259b82dc4fd0b71c05ef918725a321", "patch": "@@ -108,6 +108,7 @@ extern bool default_function_value_regno_p (const unsigned int);\n extern rtx default_internal_arg_pointer (void);\n extern rtx default_static_chain (const_tree, bool);\n extern void default_trampoline_init (rtx, tree, rtx);\n+extern int default_return_pops_args (tree, tree, int);\n extern enum reg_class default_branch_target_register_class (void);\n #ifdef IRA_COVER_CLASSES\n extern const enum reg_class *default_ira_cover_classes (void);"}]}