{"sha": "a330e73b144e71ac85ba571f643a1bbc19794d08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMzMGU3M2IxNDRlNzFhYzg1YmE1NzFmNjQzYTFiYmMxOTc5NGQwOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "1999-12-14T12:47:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "1999-12-14T12:47:01Z"}, "message": "sparc.h (SPARC_DEFAULT_CMODEL): Default to CM_32.\n\n\t* config/sparc/sparc.h (SPARC_DEFAULT_CMODEL): Default to CM_32.\n\t(CONDITIONAL_REGISTER_USAGE): For block profiling fix %g4 on sparc64,\n\tnot %g2.\n\t(MACHINE_STATE_SAVE, MACHINE_STATE_RESTORE): Use %g4 instead of %g2\n\tas sparc64 block profiling register.\n\t* config/sparc/sparc.c (sparc_override_options): Allow block\n\tprofiling with -m32.\n\t(sparc_block_profiler): Use %g4 instead of %g2 as sparc64 block\n\tprofiling register.\n\t* config/sparc/linux64.h (MACHINE_STATE_*): Only provide these\n\tmacros on TARGET_ARCH32. sparc.h has macros good enough for sparc64.\n\t* config/sparc/sol2.h (MACHINE_STATE_*): Likewise.\n\nFrom-SVN: r30916", "tree": {"sha": "19b3465dbb88bfa75774273806dbf1c13df146b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19b3465dbb88bfa75774273806dbf1c13df146b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a330e73b144e71ac85ba571f643a1bbc19794d08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a330e73b144e71ac85ba571f643a1bbc19794d08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a330e73b144e71ac85ba571f643a1bbc19794d08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a330e73b144e71ac85ba571f643a1bbc19794d08/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e483bf9c62e9fa8c89e55d1bd527d4710e47e083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e483bf9c62e9fa8c89e55d1bd527d4710e47e083", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e483bf9c62e9fa8c89e55d1bd527d4710e47e083"}], "stats": {"total": 65, "additions": 44, "deletions": 21}, "files": [{"sha": "0019036434407ca08a0e34fcdeeb52e1cb2737e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a330e73b144e71ac85ba571f643a1bbc19794d08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a330e73b144e71ac85ba571f643a1bbc19794d08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a330e73b144e71ac85ba571f643a1bbc19794d08", "patch": "@@ -26,6 +26,19 @@ Tue Dec 14 12:07:29 MET 1999  Jan Hubicka  <hubicka@freesoft.cz>\n \t* config/sparc/linux-aout.h (TARGET_LIVE_G0,\n \tTARGET_BROKEN_SAVERESTORE): Likewise.\n \n+\t* config/sparc/sparc.h (SPARC_DEFAULT_CMODEL): Default to CM_32.\n+\t(CONDITIONAL_REGISTER_USAGE): For block profiling fix %g4 on sparc64,\n+\tnot %g2.\n+\t(MACHINE_STATE_SAVE, MACHINE_STATE_RESTORE): Use %g4 instead of %g2\n+\tas sparc64 block profiling register.\n+\t* config/sparc/sparc.c (sparc_override_options): Allow block\n+\tprofiling with -m32.\n+\t(sparc_block_profiler): Use %g4 instead of %g2 as sparc64 block\n+\tprofiling register.\n+\t* config/sparc/linux64.h (MACHINE_STATE_*): Only provide these\n+\tmacros on TARGET_ARCH32. sparc.h has macros good enough for sparc64.\n+\t* config/sparc/sol2.h (MACHINE_STATE_*): Likewise.\n+\n 1999-12-14  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* combine.c (combine_simplify_rtx): Don't make shared rtl."}, {"sha": "1c6e62ab53a3d2fae9493c72f388bbc2c095066a", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a330e73b144e71ac85ba571f643a1bbc19794d08/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a330e73b144e71ac85ba571f643a1bbc19794d08/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=a330e73b144e71ac85ba571f643a1bbc19794d08", "patch": "@@ -356,6 +356,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef TARGET_BROKEN_SAVERESTORE\n #define TARGET_BROKEN_SAVERESTORE\t0\n \f\n+#if TARGET_ARCH32\n /* Override MACHINE_STATE_{SAVE,RESTORE} because we have special\n    traps available which can get and set the condition codes\n    reliably.  */\n@@ -374,6 +375,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t       \"ta\t0x21\\n\\t\"\t\t\t\\\n \t       : /* no outputs */\t\t\t\\\n \t       : \"r\" (ms_flags), \"r\" (ms_saveret));\n+#endif /* sparc32 */\n \n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */"}, {"sha": "0aecee2e1985d357621280a53743233d84dcf3e0", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a330e73b144e71ac85ba571f643a1bbc19794d08/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a330e73b144e71ac85ba571f643a1bbc19794d08/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=a330e73b144e71ac85ba571f643a1bbc19794d08", "patch": "@@ -215,6 +215,7 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_EPILOGUE + MASK_FPU + MASK_V8PLUS)\n \f\n+#if TARGET_ARCH32\n /* Override MACHINE_STATE_{SAVE,RESTORE} because we have special\n    traps available which can get and set the condition codes\n    reliably.  */\n@@ -233,4 +234,4 @@ Boston, MA 02111-1307, USA.  */\n \t       \"ta\t0x21\\n\\t\"\t\t\t\\\n \t       : /* no outputs */\t\t\t\\\n \t       : \"r\" (ms_flags), \"r\" (ms_saveret));\n-\n+#endif /* sparc32 */"}, {"sha": "2877844b8ec3890d6475a86ce3137f3906523403", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a330e73b144e71ac85ba571f643a1bbc19794d08/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a330e73b144e71ac85ba571f643a1bbc19794d08/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=a330e73b144e71ac85ba571f643a1bbc19794d08", "patch": "@@ -343,7 +343,7 @@ sparc_override_options ()\n   sparc_init_modes ();\n \n   if ((profile_flag || profile_block_flag)\n-      && sparc_cmodel != CM_MEDLOW)\n+      && sparc_cmodel != CM_32 && sparc_cmodel != CM_MEDLOW)\n     {\n       error (\"profiling does not support code models other than medlow\");\n     }\n@@ -8077,32 +8077,33 @@ sparc_block_profiler(file, blockno)\n      int blockno;\n {\n   char LPBX[32];\n+  int bbreg = TARGET_ARCH64 ? 4 : 2;\n \n   if (profile_block_flag == 2)\n     {\n       ASM_GENERATE_INTERNAL_LABEL (LPBX, \"LPBX\", 0);\n \n       fprintf (file, \"\\tsethi\\t%%hi(%s__bb),%%g1\\n\", user_label_prefix);\n-      fprintf (file, \"\\tsethi\\t%%hi(%d),%%g2\\n\", blockno);\n+      fprintf (file, \"\\tsethi\\t%%hi(%d),%%g%d\\n\", blockno, bbreg);\n       fprintf (file, \"\\tor\\t%%g1,%%lo(%s__bb),%%g1\\n\", user_label_prefix);\n-      fprintf (file, \"\\tor\\t%%g2,%%lo(%d),%%g2\\n\", blockno);\n+      fprintf (file, \"\\tor\\t%%g%d,%%lo(%d),%%g%d\\n\", bbreg, blockno, bbreg);\n \n-      fputs (\"\\tst\\t%g2,[%g1]\\n\", file);\n+      fprintf (file, \"\\tst\\t%%g%d,[%%g1]\\n\", bbreg);\n \n       fputs (\"\\tsethi\\t%hi(\", file);\n       assemble_name (file, LPBX);\n-      fputs (\"),%g2\\n\", file);\n+      fprintf (file, \"),%%g%d\\n\", bbreg);\n   \n       fputs (\"\\tor\\t%o2,%lo(\", file);\n       assemble_name (file, LPBX);\n-      fputs (\"),%g2\\n\", file);\n+      fprintf (file, \"),%%g%d\\n\", bbreg);\n   \n-      fputs (\"\\tst\\t%g2,[%g1+4]\\n\", file);\n-      fputs (\"\\tmov\\t%o7,%g2\\n\", file);\n+      fprintf (file, \"\\tst\\t%%g%d,[%%g1+4]\\n\", bbreg);\n+      fprintf (file, \"\\tmov\\t%%o7,%%g%d\\n\", bbreg);\n \n       fprintf (file, \"\\tcall\\t%s__bb_trace_func\\n\\t nop\\n\", user_label_prefix);\n \n-      fputs (\"\\tmov\\t%g2,%o7\\n\", file);\n+      fprintf (file, \"\\tmov\\t%%g%d,%%o7\\n\", bbreg);\n     }\n   else if (profile_block_flag != 0)\n     {\n@@ -8114,13 +8115,19 @@ sparc_block_profiler(file, blockno)\n \n       fputs (\"\\tld\\t[%g1+%lo(\", file);\n       assemble_name (file, LPBX);\n-      fprintf (file, \"+%d)],%%g2\\n\", blockno*4);\n+      if (TARGET_ARCH64 && USE_AS_OFFSETABLE_LO10)\n+\tfprintf (file, \")+%d],%%g%d\\n\", blockno*4, bbreg);\n+      else\n+\tfprintf (file, \"+%d)],%%g%d\\n\", blockno*4, bbreg);\n \n-      fputs (\"\\tadd\\t%g2,1,%g2\\n\", file);\n+      fprintf (file, \"\\tadd\\t%%g%d,1,%%g%d\\n\", bbreg, bbreg);\n \n-      fputs (\"\\tst\\t%g2,[%g1+%lo(\", file);\n+      fprintf (file, \"\\tst\\t%%g%d,[%%g1+%%lo(\", bbreg);\n       assemble_name (file, LPBX);\n-      fprintf (file, \"+%d)]\\n\", blockno*4);\n+      if (TARGET_ARCH64 && USE_AS_OFFSETABLE_LO10)\n+\tfprintf (file, \")+%d]\\n\", blockno*4);\n+      else\n+\tfprintf (file, \"+%d)]\\n\", blockno*4);\n     }\n }\n "}, {"sha": "ad8db75c7d8e8f5edaf8f20a2ad1d2f8d387e144", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a330e73b144e71ac85ba571f643a1bbc19794d08/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a330e73b144e71ac85ba571f643a1bbc19794d08/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=a330e73b144e71ac85ba571f643a1bbc19794d08", "patch": "@@ -97,7 +97,7 @@ extern enum cmodel sparc_cmodel;\n #define TARGET_CM_MEDANY    (sparc_cmodel == CM_MEDANY)\n #define TARGET_CM_EMBMEDANY (sparc_cmodel == CM_EMBMEDANY)\n \n-#define SPARC_DEFAULT_CMODEL CM_MEDLOW\n+#define SPARC_DEFAULT_CMODEL CM_32\n \n /* This is call-clobbered in the normal ABI, but is reserved in the\n    home grown (aka upward compatible) embedded ABI.  */\n@@ -1077,10 +1077,10 @@ do\t\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n     if (profile_block_flag)\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n-\t/* %g1 and %g2 must be fixed, because BLOCK_PROFILER\t\\\n-\t    uses them.  */\t\t\t\t\t\\\n+\t/* %g1 and %g2 (sparc32) resp. %g4 (sparc64) must be\t\\\n+\t   fixed, because BLOCK_PROFILER uses them.  */\t\t\\\n \tfixed_regs[1] = 1;\t\t\t\t\t\\\n-\tfixed_regs[2] = 1;\t\t\t\t\t\\\n+\tfixed_regs[TARGET_ARCH64 ? 4 : 2] = 1;\t\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\\\n while (0)\n@@ -1985,7 +1985,7 @@ LFLGNN\"ID\":\"\t\t\t\t\t\\\n #define MACHINE_STATE_SAVE(ID)\t\t\t\\\n   unsigned long ms_flags, ms_saveret;\t\t\\\n   asm volatile(\t\t\t\t\t\\\n-\t\"mov %%g2,%1\\n\\\t\t\t\t\\\n+\t\"mov %%g4,%1\\n\\\n \trd %%ccr,%0\"\t\t\t\t\\\n \t: \"=r\"(ms_flags), \"=r\"(ms_saveret));\n \n@@ -2066,9 +2066,9 @@ LFLGRET\"ID\":\\n\\\n #define MACHINE_STATE_RESTORE(ID)\t\t\t\t\\\n   asm volatile (\t\t\t\t\t\t\\\n \t\"wr %0,0,%%ccr\\n\\\n-\tmov %1,%%g2\"\t\t\t\t\t\t\\\n+\tmov %1,%%g4\"\t\t\t\t\t\t\\\n \t: : \"r\"(ms_flags), \"r\"(ms_saveret)\t\t\t\\\n-\t: \"cc\", \"g2\");\n+\t: \"cc\", \"g4\");\n \n #endif\n "}]}