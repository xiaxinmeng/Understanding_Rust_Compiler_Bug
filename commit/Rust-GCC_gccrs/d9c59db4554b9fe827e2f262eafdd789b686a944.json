{"sha": "d9c59db4554b9fe827e2f262eafdd789b686a944", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDljNTlkYjQ1NTRiOWZlODI3ZTJmMjYyZWFmZGQ3ODliNjg2YTk0NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-06T11:10:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-06T11:10:13Z"}, "message": "[multiple changes]\n\n2017-01-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_eval.adb (Check_Expression_Against_Static_Predicate):\n\tIf expression is compile-time known and obeys a static predicate\n\tit must be labelled as static, to prevent spurious warnings and\n\trun-time errors, e.g. in case statements. This is relevant when\n\tthe expression is the result of constant-folding a type conversion\n\twhose expression is a variable with a known static value.\n\n2017-01-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_attr.adb, sem_attr.ads: Minor reformatting.\n\nFrom-SVN: r244135", "tree": {"sha": "15fa1871fd9ce2ae63b248d5890875bd40df590f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15fa1871fd9ce2ae63b248d5890875bd40df590f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9c59db4554b9fe827e2f262eafdd789b686a944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c59db4554b9fe827e2f262eafdd789b686a944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9c59db4554b9fe827e2f262eafdd789b686a944", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c59db4554b9fe827e2f262eafdd789b686a944/comments", "author": null, "committer": null, "parents": [{"sha": "f68d33443ec67d0b0c2a28f04f3c90b28d22b5d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68d33443ec67d0b0c2a28f04f3c90b28d22b5d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f68d33443ec67d0b0c2a28f04f3c90b28d22b5d4"}], "stats": {"total": 92, "additions": 56, "deletions": 36}, "files": [{"sha": "1dc5958170177d5fb7f4ecb603b27a996de40139", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c59db4554b9fe827e2f262eafdd789b686a944/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c59db4554b9fe827e2f262eafdd789b686a944/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d9c59db4554b9fe827e2f262eafdd789b686a944", "patch": "@@ -1,3 +1,16 @@\n+2017-01-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_eval.adb (Check_Expression_Against_Static_Predicate):\n+\tIf expression is compile-time known and obeys a static predicate\n+\tit must be labelled as static, to prevent spurious warnings and\n+\trun-time errors, e.g. in case statements. This is relevant when\n+\tthe expression is the result of constant-folding a type conversion\n+\twhose expression is a variable with a known static value.\n+\n+2017-01-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_attr.adb, sem_attr.ads: Minor reformatting.\n+\n 2017-01-06  Justin Squirek  <squirek@adacore.com>\n \n \t* exp_attr.adb (Expand_N_Attribute_Reference): Add entry for"}, {"sha": "57905df14593fa880a4926429842a3a28945a610", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c59db4554b9fe827e2f262eafdd789b686a944/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c59db4554b9fe827e2f262eafdd789b686a944/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=d9c59db4554b9fe827e2f262eafdd789b686a944", "patch": "@@ -3141,11 +3141,10 @@ package body Exp_Attr is\n       -----------------------\n \n       when Attribute_Finalization_Size => Finalization_Size : declare\n-\n          function Calculate_Header_Size return Node_Id;\n-         --  Generate a runtime call to calculate the size of the hidden\n-         --  header along with any added padding which would precede a\n-         --  heap-allocated object of the prefix type.\n+         --  Generate a runtime call to calculate the size of the hidden header\n+         --  along with any added padding which would precede a heap-allocated\n+         --  object of the prefix type.\n \n          ---------------------------\n          -- Calculate_Header_Size --\n@@ -3155,46 +3154,47 @@ package body Exp_Attr is\n          begin\n             --  Generate:\n             --    Universal_Integer\n-            --      (Header_Size_With_Padding (N'Alignment))\n+            --      (Header_Size_With_Padding (Pref'Alignment))\n \n             return\n               Convert_To (Universal_Integer,\n                 Make_Function_Call (Loc,\n                   Name                   =>\n-                    New_Occurrence_Of\n-                      (RTE (RE_Header_Size_With_Padding), Loc),\n+                    New_Occurrence_Of (RTE (RE_Header_Size_With_Padding), Loc),\n+\n                   Parameter_Associations => New_List (\n                     Make_Attribute_Reference (Loc,\n-                      Prefix         =>\n-                        New_Copy_Tree (Pref),\n+                      Prefix         => New_Copy_Tree (Pref),\n                       Attribute_Name => Name_Alignment))));\n          end Calculate_Header_Size;\n \n-      --  Local variables\n+         --  Local variables\n \n-         Size : constant Entity_Id := Make_Temporary (Loc, 'S');\n+         Size : Entity_Id;\n \n       --  Start of Finalization_Size\n \n       begin\n-         --  An object of a class-wide type requires a runtime check to\n+         --  An object of a class-wide type first requires a runtime check to\n          --  determine whether it is actually controlled or not. Depending on\n          --  the outcome of this check, the Finalization_Size of the object\n          --  may be zero or some positive value.\n          --\n-         --  In this scenario, Obj'Finalization_Size is expanded into\n+         --  In this scenario, Pref'Finalization_Size is expanded into\n          --\n-         --   Size : Integer := 0;\n+         --    Size : Integer := 0;\n          --\n-         --   if Needs_Finalization (Pref'Tag) then\n-         --      Size :=\n-         --        Universal_Integer\n-         --          (Header_Size_With_Padding (Pref'Alignment));\n-         --  end if;\n+         --    if Needs_Finalization (Pref'Tag) then\n+         --       Size :=\n+         --         Universal_Integer\n+         --           (Header_Size_With_Padding (Pref'Alignment));\n+         --    end if;\n          --\n          --  and the attribute reference is replaced with a reference to Size.\n \n          if Is_Class_Wide_Type (Ptyp) then\n+            Size := Make_Temporary (Loc, 'S');\n+\n             Insert_Actions (N, New_List (\n \n               --  Generate:\n@@ -3208,37 +3208,37 @@ package body Exp_Attr is\n \n               --  Generate:\n               --    if Needs_Finalization (Pref'Tag) then\n-              --       Size := Universal_Integer\n-              --                 (Header_Size_With_Padding (Pref'Alignment));\n+              --       Size :=\n+              --         Universal_Integer\n+              --           (Header_Size_With_Padding (Pref'Alignment));\n               --    end if;\n \n               Make_If_Statement (Loc,\n                 Condition              =>\n                   Make_Function_Call (Loc,\n                     Name                   =>\n-                      New_Occurrence_Of\n-                        (RTE (RE_Needs_Finalization), Loc),\n+                      New_Occurrence_Of (RTE (RE_Needs_Finalization), Loc),\n+\n                     Parameter_Associations => New_List (\n                       Make_Attribute_Reference (Loc,\n-                        Attribute_Name => Name_Tag,\n-                        Prefix         =>\n-                          New_Copy_Tree (Pref)))),\n+                        Prefix         => New_Copy_Tree (Pref),\n+                        Attribute_Name => Name_Tag))),\n+\n                 Then_Statements        => New_List (\n                    Make_Assignment_Statement (Loc,\n                      Name       => New_Occurrence_Of (Size, Loc),\n                      Expression => Calculate_Header_Size)))));\n \n             Rewrite (N, New_Occurrence_Of (Size, Loc));\n \n-         --  The the prefix is known to be controlled at compile time.\n-         --  Calculate its Finalization_Size by calling runtime routine\n-         --  Header_Size_With_Padding.\n+         --  The prefix is known to be controlled at compile time. Calculate\n+         --  Finalization_Size by calling function Header_Size_With_Padding.\n \n          elsif Needs_Finalization (Ptyp) then\n             Rewrite (N, Calculate_Header_Size);\n \n-         --  The prefix is not a controlled object, its Finalization_Size\n-         --  is zero.\n+         --  The prefix is not an object with controlled parts, so its\n+         --  Finalization_Size is zero.\n \n          else\n             Rewrite (N, Make_Integer_Literal (Loc, 0));"}, {"sha": "cd11b526e2c6d701b791e97f4cff5a0cfca2b655", "filename": "gcc/ada/sem_attr.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c59db4554b9fe827e2f262eafdd789b686a944/gcc%2Fada%2Fsem_attr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c59db4554b9fe827e2f262eafdd789b686a944/gcc%2Fada%2Fsem_attr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.ads?ref=d9c59db4554b9fe827e2f262eafdd789b686a944", "patch": "@@ -247,10 +247,10 @@ package Sem_Attr is\n       -----------------------\n \n       Attribute_Finalization_Size => True,\n-      --  For every object, Finalization_Size will return the size of the\n-      --  internal header required for finalization (including padding). If\n-      --  the type is not controlled or contains no controlled components\n-      --  then the result is always zero.\n+      --  For every object, Finalization_Size returns the size of the hidden\n+      --  header used for finalization purposes as if the object was allocated\n+      --  on the heap. The size of the header does take into account any extra\n+      --  padding due to alignment issues.\n \n       -----------------\n       -- Fixed_Value --"}, {"sha": "fce4643dfbf524d65d4adaf7f56c1a17ebeeb8be", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c59db4554b9fe827e2f262eafdd789b686a944/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c59db4554b9fe827e2f262eafdd789b686a944/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=d9c59db4554b9fe827e2f262eafdd789b686a944", "patch": "@@ -347,7 +347,11 @@ package body Sem_Eval is\n \n       --  Here we have a static predicate (note that it could have arisen from\n       --  an explicitly specified Dynamic_Predicate whose expression met the\n-      --  rules for being predicate-static).\n+      --  rules for being predicate-static). If the expression is known at\n+      --  compile time and obeys the predicate, then it is static and must be\n+      --  labeled as such, which matters e.g. for case statements. The original\n+      --  expression may be a type conversion of a variable with a known value,\n+      --  which might otherwise not be marked static.\n \n       --  Case of real static predicate\n \n@@ -356,6 +360,7 @@ package body Sem_Eval is\n               (Val => Make_Real_Literal (Sloc (Expr), Expr_Value_R (Expr)),\n                Typ => Typ)\n          then\n+            Set_Is_Static_Expression (Expr);\n             return;\n          end if;\n \n@@ -365,6 +370,7 @@ package body Sem_Eval is\n          if Real_Or_String_Static_Predicate_Matches\n               (Val => Expr_Value_S (Expr), Typ => Typ)\n          then\n+            Set_Is_Static_Expression (Expr);\n             return;\n          end if;\n \n@@ -376,6 +382,7 @@ package body Sem_Eval is\n          --  If static predicate matches, nothing to do\n \n          if Choices_Match (Expr, Static_Discrete_Predicate (Typ)) = Match then\n+            Set_Is_Static_Expression (Expr);\n             return;\n          end if;\n       end if;"}]}