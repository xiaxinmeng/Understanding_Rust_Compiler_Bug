{"sha": "b35c81608887526d18a068f9c84192a7efaf2b25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM1YzgxNjA4ODg3NTI2ZDE4YTA2OGY5Yzg0MTkyYTdlZmFmMmIyNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-07-14T18:15:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-07-14T18:15:22Z"}, "message": "builtins.c (can_trust_pointer_alignment): New fn.\n\n\t* builtins.c (can_trust_pointer_alignment): New fn.\n\t(get_pointer_alignment): Factor it out from here.\n\t* tree.h: Declare it.\n\t* cp/call.c (build_over_call): Use it.\n\nFrom-SVN: r149635", "tree": {"sha": "c0b398487e8aaf1c8bade8ef6a6bd94d09c89785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0b398487e8aaf1c8bade8ef6a6bd94d09c89785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b35c81608887526d18a068f9c84192a7efaf2b25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b35c81608887526d18a068f9c84192a7efaf2b25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b35c81608887526d18a068f9c84192a7efaf2b25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b35c81608887526d18a068f9c84192a7efaf2b25/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e02e8e58c405770d1192d849fc2712e65d3f023b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02e8e58c405770d1192d849fc2712e65d3f023b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e02e8e58c405770d1192d849fc2712e65d3f023b"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "a57eb8a5e9e1c66b3fc1e2c4d2f4b9226afd033e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b35c81608887526d18a068f9c84192a7efaf2b25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b35c81608887526d18a068f9c84192a7efaf2b25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b35c81608887526d18a068f9c84192a7efaf2b25", "patch": "@@ -1,3 +1,9 @@\n+2009-07-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* builtins.c (can_trust_pointer_alignment): New fn.\n+\t(get_pointer_alignment): Factor it out from here.\n+\t* tree.h: Declare it.\n+\n 2009-07-14  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/predicates.md (offsettable_mem_operand): Test"}, {"sha": "a5f41fc91f8a638cf92dabd12187622789604ce8", "filename": "gcc/builtins.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b35c81608887526d18a068f9c84192a7efaf2b25/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b35c81608887526d18a068f9c84192a7efaf2b25/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b35c81608887526d18a068f9c84192a7efaf2b25", "patch": "@@ -344,6 +344,16 @@ get_object_alignment (tree exp, unsigned int align, unsigned int max_align)\n   return MIN (align, max_align);\n }\n \n+/* Returns true iff we can trust that alignment information has been\n+   calculated properly.  */\n+\n+bool\n+can_trust_pointer_alignment (void)\n+{\n+  /* We rely on TER to compute accurate alignment information.  */\n+  return (optimize && flag_tree_ter);\n+}\n+\n /* Return the alignment in bits of EXP, a pointer valued expression.\n    But don't return more than MAX_ALIGN no matter what.\n    The alignment returned is, by default, the alignment of the thing that\n@@ -357,8 +367,7 @@ get_pointer_alignment (tree exp, unsigned int max_align)\n {\n   unsigned int align, inner;\n \n-  /* We rely on TER to compute accurate alignment information.  */\n-  if (!(optimize && flag_tree_ter))\n+  if (!can_trust_pointer_alignment ())\n     return 0;\n \n   if (!POINTER_TYPE_P (TREE_TYPE (exp)))"}, {"sha": "812349486ca29616d7b55d172572e61113273f84", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b35c81608887526d18a068f9c84192a7efaf2b25/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b35c81608887526d18a068f9c84192a7efaf2b25/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b35c81608887526d18a068f9c84192a7efaf2b25", "patch": "@@ -1,3 +1,7 @@\n+2009-07-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (build_over_call): Use can_trust_pointer_alignment.\n+\n 2009-07-14  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR debug/40705"}, {"sha": "588c997a34bb77fefcf595e3a664fd8640a66ab8", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b35c81608887526d18a068f9c84192a7efaf2b25/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b35c81608887526d18a068f9c84192a7efaf2b25/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b35c81608887526d18a068f9c84192a7efaf2b25", "patch": "@@ -5669,11 +5669,11 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t  arg1 = arg;\n \t  arg0 = cp_build_unary_op (ADDR_EXPR, to, 0, complain);\n \n-\t  if (!(optimize && flag_tree_ter))\n+\t  if (!can_trust_pointer_alignment ())\n \t    {\n-\t      /* When TER is off get_pointer_alignment returns 0, so a call\n+\t      /* If we can't be sure about pointer alignment, a call\n \t\t to __builtin_memcpy is expanded as a call to memcpy, which\n-\t\t is invalid with identical args.  When TER is on it is\n+\t\t is invalid with identical args.  Otherwise it is\n \t\t expanded as a block move, which should be safe.  */\n \t      arg0 = save_expr (arg0);\n \t      arg1 = save_expr (arg1);"}, {"sha": "809c6e68ab80d70275af8a85c15b33bd133652e3", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b35c81608887526d18a068f9c84192a7efaf2b25/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b35c81608887526d18a068f9c84192a7efaf2b25/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b35c81608887526d18a068f9c84192a7efaf2b25", "patch": "@@ -4797,6 +4797,7 @@ extern tree build_va_arg_indirect_ref (tree);\n extern tree build_string_literal (int, const char *);\n extern bool validate_arglist (const_tree, ...);\n extern rtx builtin_memset_read_str (void *, HOST_WIDE_INT, enum machine_mode);\n+extern bool can_trust_pointer_alignment (void);\n extern int get_pointer_alignment (tree, unsigned int);\n extern bool is_builtin_name (const char*);\n extern int get_object_alignment (tree, unsigned int, unsigned int);"}]}