{"sha": "8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyN2ZjNmJhZTc1YTJjNjVkZWFjODBjMWE3MWJiY2Y4Y2YwMzI3Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-22T07:41:38Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-22T07:41:38Z"}, "message": "config.gcc (alpha*-*-linux*): Add elfos.h to tm_file.\n\n\t* config.gcc (alpha*-*-linux*): Add elfos.h to tm_file.\n\t(alpha*-*-freebsd*): Ditto.\n\t(alpha*-*-netbsd*): Ditto.\n\t(alpha*-*-openbsd*): Ditto.\n\t* config/alpha/elf.h (OBJECT_FORMAT_ELF): Remove.\n\t(DWARF2_DEBUGGING_INFO): Remove.\n\t(PREFERRED_DEBUGGING_TYPE): Remove.\n\t(ASM_FINAL_SPEC): Remove.\n\t(IDENT_ASM_OP): Remove.\n\t(ASM_OUTPUT_IDENT): Remove.\n\t(SKIP_ASM_OP): Remove.\n\t(ASM_OUTPUT_SKIP): Remove.\n\t(ALIGN_ASM_OP): Remove.\n\t(ASM_OUTPUT_BEFORE_CASE_LABEL): Remove.\n\t(ASM_OUTPUT_CASE_LABEL): Remove.\n\t(ASM_OUTPUT_EXTERNAL_LIBCALL): Remove.\n\t(COMMON_ASM_OP): Remove.\n\t(ASM_OUTPUT_ALIGNED_COMMON): Remove.\n\t(ASCII_DATA_ASM_OP): Remove.\n\t(READONLY_DATA_SECTION_ASM_OP): Remove.\n\t(INIT_SECTION_ASM_OP): Remove.\n\t(FINI_SECTION_ASM_OP): Remove.\n\t(ASM_SECTION_START_OP): Remove.\n\t(ASM_OUTPUT_SECTION_START_FILE): Remove.\n\t(TARGET_ASM_NAMED_SECTION): Remove.\n\t(TARGET_ASM_SELECT_SECTION): Remove.\n\t(MAKE_DECL_ONE_ONLY): Remove.\n\t(TYPE_ASM_OP): Remove.\n\t(SIZE_ASM_OP): Remove.\n\t(ASM_WEAKEN_LABEL): Remove.\n\t(TYPE_OPERAND_FMT): Remove.\n\t(ASM_DECLARE_RESULT): Remove.\n\t(ASM_DECLARE_OBJECT_NAME): Remove.\n\t(ASM_FINISH_DECLARE_OBJECT): Remove.\n\t(ELF_ASCII_ESCAPES): Remove.\n\t(ELF_STRING_LIMIT): Remove.\n\t(STRING_ASM_OP): Remove.\n\t(ASM_OUTPUT_EXTERNAL): Remove.\n\t(TARGET_ASM_FILE_START_FILE_DIRECTIVE): Redefine to false.\n\t* config/alpha/alpha.h (PCC_BITFIELD_TYPE_MATTERS): Undefine\n\tbefore define.\n\t(ASM_DECLARE_FUNCTION_NAME): Ditto.\n\t(ASM_DECLARE_FUNCTION_SIZE): Ditto.\n\t(ASM_GENERATE_INTERNAL_LABEL): Ditto.\n\t(ASM_OUTPUT_SKIP): Ditto.\n\t(READONLY_DATA_SECTION_ASM_OP): Remove.\n\t(USER_LABEL_PREFIX): Remove.\n\t(ASM_OUTPUT_ASCII): Remove.\n\t(ASM_OUTPUT_CASE_LABEL): Remove.\n\t(NO_DOLLAR_IN_LABEL): Undefine.\n\nFrom-SVN: r185677", "tree": {"sha": "f92d8b9b39db19acdf49e6ae05e235ed54ed8811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f92d8b9b39db19acdf49e6ae05e235ed54ed8811"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f/comments", "author": null, "committer": null, "parents": [{"sha": "109a16c2ac1608c8003415a464ea8dabcacbf402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109a16c2ac1608c8003415a464ea8dabcacbf402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/109a16c2ac1608c8003415a464ea8dabcacbf402"}], "stats": {"total": 405, "additions": 71, "deletions": 334}, "files": [{"sha": "73bc0bc8697162a769b9248d32cfefdbb0819ce7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f", "patch": "@@ -1,3 +1,56 @@\n+2012-03-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config.gcc (alpha*-*-linux*): Add elfos.h to tm_file.\n+\t(alpha*-*-freebsd*): Ditto.\n+\t(alpha*-*-netbsd*): Ditto.\n+\t(alpha*-*-openbsd*): Ditto.\n+\t* config/alpha/elf.h (OBJECT_FORMAT_ELF): Remove.\n+\t(DWARF2_DEBUGGING_INFO): Remove.\n+\t(PREFERRED_DEBUGGING_TYPE): Remove.\n+\t(ASM_FINAL_SPEC): Remove.\n+\t(IDENT_ASM_OP): Remove.\n+\t(ASM_OUTPUT_IDENT): Remove.\n+\t(SKIP_ASM_OP): Remove.\n+\t(ASM_OUTPUT_SKIP): Remove.\n+\t(ALIGN_ASM_OP): Remove.\n+\t(ASM_OUTPUT_BEFORE_CASE_LABEL): Remove.\n+\t(ASM_OUTPUT_CASE_LABEL): Remove.\n+\t(ASM_OUTPUT_EXTERNAL_LIBCALL): Remove.\n+\t(COMMON_ASM_OP): Remove.\n+\t(ASM_OUTPUT_ALIGNED_COMMON): Remove.\n+\t(ASCII_DATA_ASM_OP): Remove.\n+\t(READONLY_DATA_SECTION_ASM_OP): Remove.\n+\t(INIT_SECTION_ASM_OP): Remove.\n+\t(FINI_SECTION_ASM_OP): Remove.\n+\t(ASM_SECTION_START_OP): Remove.\n+\t(ASM_OUTPUT_SECTION_START_FILE): Remove.\n+\t(TARGET_ASM_NAMED_SECTION): Remove.\n+\t(TARGET_ASM_SELECT_SECTION): Remove.\n+\t(MAKE_DECL_ONE_ONLY): Remove.\n+\t(TYPE_ASM_OP): Remove.\n+\t(SIZE_ASM_OP): Remove.\n+\t(ASM_WEAKEN_LABEL): Remove.\n+\t(TYPE_OPERAND_FMT): Remove.\n+\t(ASM_DECLARE_RESULT): Remove.\n+\t(ASM_DECLARE_OBJECT_NAME): Remove.\n+\t(ASM_FINISH_DECLARE_OBJECT): Remove.\n+\t(ELF_ASCII_ESCAPES): Remove.\n+\t(ELF_STRING_LIMIT): Remove.\n+\t(STRING_ASM_OP): Remove.\n+\t(ASM_OUTPUT_EXTERNAL): Remove.\n+\t(TARGET_ASM_FILE_START_FILE_DIRECTIVE): Redefine to false.\n+\t* config/alpha/alpha.h (PCC_BITFIELD_TYPE_MATTERS): Undefine\n+\tbefore define.\n+\t(ASM_DECLARE_FUNCTION_NAME): Ditto.\n+\t(ASM_DECLARE_FUNCTION_SIZE): Ditto.\n+\t(ASM_GENERATE_INTERNAL_LABEL): Ditto.\n+\t(ASM_OUTPUT_SKIP): Ditto.\n+\t(READONLY_DATA_SECTION_ASM_OP): Remove.\n+\t(USER_LABEL_PREFIX): Remove.\n+\t(ASM_OUTPUT_ASCII): Remove.\n+\t(ASM_OUTPUT_CASE_LABEL): Remove.\n+\t(NO_DOLLAR_IN_LABEL): Undefine.\n+\n 2012-03-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52459\n@@ -22,7 +75,7 @@\n \n \tPR target/52642\n \t* config/sh/sh.c (sh_expand_prologue): Emit blockage at the end of\n-\tprologue for unwinder and profiler.\t\n+\tprologue for unwinder and profiler.\n \n 2012-03-21  Andreas Tobler  <andreast@fgznet.ch>\n \n@@ -507,8 +560,7 @@\n \t(vect_pattern_recog): Add new argument.  Support basic blocks.\n \t* tree-vect-stmts.c (vectorizable_conversion): Pass basic block\n \tinfo to vect_is_simple_use_1.\n-\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Support basic\n-\tblocks.\n+\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Support basic blocks.\n \t(vect_slp_analyze_bb_1): Call vect_pattern_recog.\n \n 2012-03-15  Jakub Jelinek  <jakub@redhat.com>\n@@ -569,8 +621,7 @@\n \t* config/i386/i386.c (ix86_option_override_internal): Properly\n \tcheck and set ix86_pmode.\n \n-\t* config/i386/i386.h (Pmode): Check ix86_pmode instead of\n-\tTARGET_64BIT.\n+\t* config/i386/i386.h (Pmode): Check ix86_pmode instead of TARGET_64BIT.\n \n \t* config/i386/i386.opt (maddress-mode=): New.\n "}, {"sha": "b44224ac6d25e1866f49e1679cc4385faa0bbb17", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f", "patch": "@@ -768,21 +768,21 @@ esac\n \n case ${target} in\n alpha*-*-linux*)\n-\ttm_file=\"${tm_file} alpha/elf.h alpha/linux.h alpha/linux-elf.h glibc-stdint.h\"\n+\ttm_file=\"elfos.h ${tm_file} alpha/elf.h alpha/linux.h alpha/linux-elf.h glibc-stdint.h\"\n \textra_options=\"${extra_options} alpha/elf.opt\"\n \t;;\n alpha*-*-freebsd*)\n-\ttm_file=\"${tm_file} ${fbsd_tm_file} alpha/elf.h alpha/freebsd.h\"\n+\ttm_file=\"elfos.h ${tm_file} ${fbsd_tm_file} alpha/elf.h alpha/freebsd.h\"\n \textra_options=\"${extra_options} alpha/elf.opt\"\n \t;;\n alpha*-*-netbsd*)\n-\ttm_file=\"${tm_file} netbsd.h alpha/elf.h netbsd-elf.h alpha/netbsd.h\"\n+\ttm_file=\"elfos.h ${tm_file} netbsd.h alpha/elf.h netbsd-elf.h alpha/netbsd.h\"\n \textra_options=\"${extra_options} netbsd.opt netbsd-elf.opt \\\n \t\t       alpha/elf.opt\"\n \t;;\n alpha*-*-openbsd*)\n \ttm_defines=\"${tm_defines} OBSD_HAS_DECLARE_FUNCTION_NAME OBSD_HAS_DECLARE_FUNCTION_SIZE OBSD_HAS_DECLARE_OBJECT\"\n-\ttm_file=\"alpha/alpha.h alpha/elf.h openbsd.h openbsd-stdint.h alpha/openbsd.h openbsd-libpthread.h\"\n+\ttm_file=\"elfos.h alpha/alpha.h alpha/elf.h openbsd.h openbsd-stdint.h alpha/openbsd.h openbsd-libpthread.h\"\n \textra_options=\"${extra_options} openbsd.opt alpha/elf.opt\"\n \t# default x-alpha is only appropriate for dec-osf.\n \t;;"}, {"sha": "dc7f22233dcd0d62e9e7fd6f40b31246e552b410", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 7, "deletions": 57, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f", "patch": "@@ -284,6 +284,7 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n #define STRUCTURE_SIZE_BOUNDARY 8\n \n /* A bit-field declared as `int' forces `int' alignment for the struct.  */\n+#undef PCC_BITFILED_TYPE_MATTERS\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n /* No data type wants to be aligned rounder than this.  */\n@@ -700,11 +701,13 @@ extern int alpha_memory_latency;\n \n /* This macro produces the initial definition of a function.  */\n \n+#undef ASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(FILE,NAME,DECL) \\\n   alpha_start_function(FILE,NAME,DECL);\n \n /* This macro closes up a function definition for the assembler.  */\n \n+#undef ASM_DECLARE_FUNCTION_SIZE\n #define ASM_DECLARE_FUNCTION_SIZE(FILE,NAME,DECL) \\\n   alpha_end_function(FILE,NAME,DECL)\n \n@@ -982,10 +985,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \n #define TEXT_SECTION_ASM_OP \"\\t.text\"\n \n-/* Output before read-only data.  */\n-\n-#define READONLY_DATA_SECTION_ASM_OP \"\\t.rdata\"\n-\n /* Output before writable data.  */\n \n #define DATA_SECTION_ASM_OP \"\\t.data\"\n@@ -1020,69 +1019,19 @@ do {\t\t\t\t\t\t\\\n /* Globalizing directive for a label.  */\n #define GLOBAL_ASM_OP \"\\t.globl \"\n \n-/* The prefix to add to user-visible assembler symbols.  */\n-\n-#define USER_LABEL_PREFIX \"\"\n+/* Use dollar signs rather than periods in special g++ assembler names.  */\n \n-/* This is how to output a label for a jump table.  Arguments are the same as\n-   for (*targetm.asm_out.internal_label), except the insn for the jump table is\n-   passed.  */\n-\n-#define ASM_OUTPUT_CASE_LABEL(FILE,PREFIX,NUM,TABLEINSN)\t\\\n-{ ASM_OUTPUT_ALIGN (FILE, 2); (*targetm.asm_out.internal_label) (FILE, PREFIX, NUM); }\n+#undef NO_DOLLAR_IN_LABEL\n \n /* This is how to store into the string LABEL\n    the symbol_ref name of an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class.\n    This is suitable for output with `assemble_name'.  */\n \n+#undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   sprintf ((LABEL), \"*$%s%ld\", (PREFIX), (long)(NUM))\n \n-/* We use the default ASCII-output routine, except that we don't write more\n-   than 50 characters since the assembler doesn't support very long lines.  */\n-\n-#define ASM_OUTPUT_ASCII(MYFILE, MYSTRING, MYLENGTH) \\\n-  do {\t\t\t\t\t\t\t\t\t      \\\n-    FILE *_hide_asm_out_file = (MYFILE);\t\t\t\t      \\\n-    const unsigned char *_hide_p = (const unsigned char *) (MYSTRING);\t      \\\n-    int _hide_thissize = (MYLENGTH);\t\t\t\t\t      \\\n-    int _size_so_far = 0;\t\t\t\t\t\t      \\\n-    {\t\t\t\t\t\t\t\t\t      \\\n-      FILE *asm_out_file = _hide_asm_out_file;\t\t\t\t      \\\n-      const unsigned char *p = _hide_p;\t\t\t\t\t      \\\n-      int thissize = _hide_thissize;\t\t\t\t\t      \\\n-      int i;\t\t\t\t\t\t\t\t      \\\n-      fprintf (asm_out_file, \"\\t.ascii \\\"\");\t\t\t\t      \\\n-\t\t\t\t\t\t\t\t\t      \\\n-      for (i = 0; i < thissize; i++)\t\t\t\t\t      \\\n-\t{\t\t\t\t\t\t\t\t      \\\n-\t  register int c = p[i];\t\t\t\t\t      \\\n-\t\t\t\t\t\t\t\t\t      \\\n-\t  if (_size_so_far ++ > 50 && i < thissize - 4)\t\t\t      \\\n-\t    _size_so_far = 0, fprintf (asm_out_file, \"\\\"\\n\\t.ascii \\\"\");      \\\n-\t\t\t\t\t\t\t\t\t      \\\n-\t  if (c == '\\\"' || c == '\\\\')\t\t\t\t\t      \\\n-\t    putc ('\\\\', asm_out_file);\t\t\t\t\t      \\\n-\t  if (c >= ' ' && c < 0177)\t\t\t\t\t      \\\n-\t    putc (c, asm_out_file);\t\t\t\t\t      \\\n-\t  else\t\t\t\t\t\t\t\t      \\\n-\t    {\t\t\t\t\t\t\t\t      \\\n-\t      fprintf (asm_out_file, \"\\\\%o\", c);\t\t\t      \\\n-\t      /* After an octal-escape, if a digit follows,\t\t      \\\n-\t\t terminate one string constant and start another.\t      \\\n-\t\t The VAX assembler fails to stop reading the escape\t      \\\n-\t\t after three digits, so this is the only way we\t\t      \\\n-\t\t can get it to parse the data properly.  */\t\t      \\\n-\t      if (i < thissize - 1 && ISDIGIT (p[i + 1]))\t\t      \\\n-\t\t_size_so_far = 0, fprintf (asm_out_file, \"\\\"\\n\\t.ascii \\\"\");  \\\n-\t  }\t\t\t\t\t\t\t\t      \\\n-\t}\t\t\t\t\t\t\t\t      \\\n-      fprintf (asm_out_file, \"\\\"\\n\");\t\t\t\t\t      \\\n-    }\t\t\t\t\t\t\t\t\t      \\\n-  }\t\t\t\t\t\t\t\t\t      \\\n-  while (0)\n-\n /* This is how to output an element of a case-vector that is relative.  */\n \n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n@@ -1098,6 +1047,7 @@ do {\t\t\t\t\t\t\\\n \n /* This is how to advance the location counter by SIZE bytes.  */\n \n+#undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n   fprintf (FILE, \"\\t.space \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n "}, {"sha": "29fdeabbb42f8c4d4b6c95675b0b8c08b414db0c", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 4, "deletions": 268, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=8f27fc6bae75a2c65deac80c1a71bbcf8cf0327f", "patch": "@@ -19,93 +19,16 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-#define OBJECT_FORMAT_ELF\n-\n-#define DWARF2_DEBUGGING_INFO 1\n-\n-#undef  PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n-\n-#undef ASM_FINAL_SPEC\n-\n-/* alpha/ doesn't use elfos.h for some reason.  */\n-#define TARGET_OBJFMT_CPP_BUILTINS()\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-\tbuiltin_define (\"__ELF__\");\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n #undef  CC1_SPEC\n #define CC1_SPEC  \"%{G*}\"\n \n #undef  ASM_SPEC\n #define ASM_SPEC  \"%{G*} %{relax:-relax} %{!gstabs*:-no-mdebug}%{gstabs*:-mdebug}\"\n \n-#undef  IDENT_ASM_OP\n-#define IDENT_ASM_OP \"\\t.ident\\t\"\n-\n-/* Output #ident as a .ident.  */\n-#undef  ASM_OUTPUT_IDENT\n-#define ASM_OUTPUT_IDENT(FILE, NAME) \\\n-  fprintf (FILE, \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME);\n-\n-/* This is how to allocate empty space in some section.  The .zero\n-   pseudo-op is used for this on most svr4 assemblers.  */\n-\n-#undef  SKIP_ASM_OP\n-#define SKIP_ASM_OP\t\"\\t.zero\\t\"\n-\n-#undef  ASM_OUTPUT_SKIP\n-#define ASM_OUTPUT_SKIP(FILE, SIZE) \\\n-  fprintf (FILE, \"%s\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", SKIP_ASM_OP, (SIZE))\n-\n-/* Output the label which precedes a jumptable.  Note that for all svr4\n-   systems where we actually generate jumptables (which is to say every\n-   svr4 target except i386, where we use casesi instead) we put the jump-\n-   tables into the .rodata section and since other stuff could have been\n-   put into the .rodata section prior to any given jumptable, we have to\n-   make sure that the location counter for the .rodata section gets pro-\n-   perly re-aligned prior to the actual beginning of the jump table.  */\n-\n-#undef  ALIGN_ASM_OP\n-#define ALIGN_ASM_OP \"\\t.align\\t\"\n-\n-#ifndef ASM_OUTPUT_BEFORE_CASE_LABEL\n-#define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE, PREFIX, NUM, TABLE) \\\n-  ASM_OUTPUT_ALIGN ((FILE), 2);\n-#endif\n-\n-#undef  ASM_OUTPUT_CASE_LABEL\n-#define ASM_OUTPUT_CASE_LABEL(FILE, PREFIX, NUM, JUMPTABLE)\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ASM_OUTPUT_BEFORE_CASE_LABEL (FILE, PREFIX, NUM, JUMPTABLE)\t\t\\\n-    (*targetm.asm_out.internal_label) (FILE, PREFIX, NUM);\t\t\t\\\n-  } while (0)\n-\n-/* The standard SVR4 assembler seems to require that certain builtin\n-   library routines (e.g. .udiv) be explicitly declared as .globl\n-   in each assembly file where they are referenced.  */\n-\n-#undef  ASM_OUTPUT_EXTERNAL_LIBCALL\n-#define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN)\t\t\t\t\\\n-  (*targetm.asm_out.globalize_label) (FILE, XSTR (FUN, 0))\n-\n-/* This says how to output assembler code to declare an\n-   uninitialized external linkage data object.  Under SVR4,\n-   the linker seems to want the alignment of data objects\n-   to depend on their types.  We do exactly that here.  */\n-\n-#undef  COMMON_ASM_OP\n-#define COMMON_ASM_OP\t\"\\t.comm\\t\"\n-\n-#undef  ASM_OUTPUT_ALIGNED_COMMON\n-#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n-  assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED \",%u\\n\", (SIZE), (ALIGN) / BITS_PER_UNIT);\t\\\n-} while (0)\n+/* Do not output a .file directive at the beginning of the input file.  */\n+ \n+#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n+#define TARGET_ASM_FILE_START_FILE_DIRECTIVE false\n \n /* This says how to output assembler code to declare an\n    uninitialized internal linkage data object.  Under SVR4,\n@@ -151,67 +74,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef  MAX_OFILE_ALIGNMENT\n #define MAX_OFILE_ALIGNMENT (((unsigned int) 1 << 28) * 8)\n \n-/* This is the pseudo-op used to generate a contiguous sequence of byte\n-   values from a double-quoted string WITHOUT HAVING A TERMINATING NUL\n-   AUTOMATICALLY APPENDED.  This is the same for most svr4 assemblers.  */\n-\n-#undef  ASCII_DATA_ASM_OP\n-#define ASCII_DATA_ASM_OP\t\"\\t.ascii\\t\"\n-\n-#undef  READONLY_DATA_SECTION_ASM_OP\n-#define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n #undef  BSS_SECTION_ASM_OP\n #define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n #undef  SBSS_SECTION_ASM_OP\n #define SBSS_SECTION_ASM_OP\t\"\\t.section\\t.sbss,\\\"aw\\\"\"\n #undef  SDATA_SECTION_ASM_OP\n #define SDATA_SECTION_ASM_OP\t\"\\t.section\\t.sdata,\\\"aw\\\"\"\n \n-/* On svr4, we *do* have support for the .init and .fini sections, and we\n-   can put stuff in there to be executed before and after `main'.  We let\n-   crtstuff.c and other files know this by defining the following symbols.\n-   The definitions say how to change sections to the .init and .fini\n-   sections.  This is the same for all known svr4 assemblers.  */\n-\n-#undef  INIT_SECTION_ASM_OP\n-#define INIT_SECTION_ASM_OP\t\"\\t.section\\t.init\"\n-#undef  FINI_SECTION_ASM_OP\n-#define FINI_SECTION_ASM_OP\t\"\\t.section\\t.fini\"\n-\n-#ifdef HAVE_GAS_SUBSECTION_ORDERING\n-\n-#define ASM_SECTION_START_OP\t\"\\t.subsection\\t-1\"\n-\n-/* Output assembly directive to move to the beginning of current section.  */\n-#define ASM_OUTPUT_SECTION_START(FILE)\t\\\n-  fprintf ((FILE), \"%s\\n\", ASM_SECTION_START_OP)\n-\n-#endif\n-\n-/* Switch into a generic section.  */\n-#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n-#define TARGET_ASM_SELECT_SECTION  default_elf_select_section\n-\n-#define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n-\n-/* Define the strings used for the special svr4 .type and .size directives.\n-   These strings generally do not vary from one system running svr4 to\n-   another, but if a given system (e.g. m88k running svr) needs to use\n-   different pseudo-op names for these, they may be overridden in the\n-   file which includes this one.  */\n-\n-#undef  TYPE_ASM_OP\n-#define TYPE_ASM_OP\t\"\\t.type\\t\"\n-#undef  SIZE_ASM_OP\n-#define SIZE_ASM_OP\t\"\\t.size\\t\"\n-\n-/* This is how we tell the assembler that a symbol is weak.  */\n-\n-#undef  ASM_WEAKEN_LABEL\n-#define ASM_WEAKEN_LABEL(FILE, NAME) \\\n-  do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME); \\\n-       fputc ('\\n', FILE); } while (0)\n-\n /* This is how we tell the assembler that two symbols have the same value.  */\n \n #undef  ASM_OUTPUT_DEF\n@@ -242,129 +111,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n     fputc('\\n', FILE);\t\t\t\t\t\t\\\n   } while (0)\n \n-/* The following macro defines the format used to output the second\n-   operand of the .type assembler directive.  Different svr4 assemblers\n-   expect various different forms for this operand.  The one given here\n-   is just a default.  You may need to override it in your machine-\n-   specific tm.h file (depending upon the particulars of your assembler).  */\n-\n-#undef  TYPE_OPERAND_FMT\n-#define TYPE_OPERAND_FMT\t\"@%s\"\n-\n-/* Write the extra assembler code needed to declare a function's result.\n-   Most svr4 assemblers don't require any special declaration of the\n-   result value, but there are exceptions.  */\n-\n-#ifndef ASM_DECLARE_RESULT\n-#define ASM_DECLARE_RESULT(FILE, RESULT)\n-#endif\n-\n-/* These macros generate the special .type and .size directives which\n-   are used to set the corresponding fields of the linker symbol table\n-   entries in an ELF object file under SVR4.  These macros also output\n-   the starting labels for the relevant functions/objects.  */\n-\n-/* Write the extra assembler code needed to declare an object properly.  */\n-\n-#ifdef HAVE_GAS_GNU_UNIQUE_OBJECT\n-#define USE_GNU_UNIQUE_OBJECT 1\n-#else\n-#define USE_GNU_UNIQUE_OBJECT 0\n-#endif\n-\n-#undef  ASM_DECLARE_OBJECT_NAME\n-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    HOST_WIDE_INT size;\t\t\t\t\t\t\t\\\n-    \t\t\t\t\t\t\t\t\t\\\n-    /* For template static data member instantiations or\t\t\\\n-       inline fn local statics and their guard variables, use\t\t\\\n-       gnu_unique_object so that they will be combined even under\t\\\n-       RTLD_LOCAL.  Don't use gnu_unique_object for typeinfo,\t\t\\\n-       vtables and other read-only artificial decls.  */\t\t\\\n-    if (USE_GNU_UNIQUE_OBJECT\t&& DECL_ONE_ONLY (DECL)\t\t\t\\\n-\t&& (!DECL_ARTIFICIAL (DECL) || !TREE_READONLY (DECL)))\t\t\\\n-      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"gnu_unique_object\");\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\t\\\n-    \t\t\t\t\t\t\t\t\t\\\n-    size_directive_output = 0;\t\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive\t\t\t\t\t\\\n-\t&& (DECL) && DECL_SIZE (DECL))\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tsize_directive_output = 1;\t\t\t\t\t\\\n-\tsize = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t\\\n-\tASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    \t\t\t\t\t\t\t\t\t\\\n-    ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n-  } while (0)\n-\n-/* Output the size directive for a decl in rest_of_decl_compilation\n-   in the case where we did not do so before the initializer.\n-   Once we find the error_mark_node, we know that the value of\n-   size_directive_output was set\n-   by ASM_DECLARE_OBJECT_NAME when it was run for the same decl.  */\n-\n-#undef  ASM_FINISH_DECLARE_OBJECT\n-#define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\\\n-    HOST_WIDE_INT size;\t\t\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive\t\t\t\t\t\\\n-\t&& DECL_SIZE (DECL)\t\t\t\t\t\t\\\n-\t&& ! AT_END && TOP_LEVEL\t\t\t\t\t\\\n-\t&& DECL_INITIAL (DECL) == error_mark_node\t\t\t\\\n-\t&& !size_directive_output\t\t\t\t\t\\\n-\t&& (size = int_size_in_bytes (TREE_TYPE (DECL))) > 0)\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tsize_directive_output = 1;\t\t\t\t\t\\\n-\tASM_OUTPUT_SIZE_DIRECTIVE (FILE, name, size);\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A table of bytes codes used by the ASM_OUTPUT_ASCII and\n-   ASM_OUTPUT_LIMITED_STRING macros.  Each byte in the table\n-   corresponds to a particular byte value [0..255].  For any\n-   given byte value, if the value in the corresponding table\n-   position is zero, the given character can be output directly.\n-   If the table value is 1, the byte must be output as a \\ooo\n-   octal escape.  If the tables value is anything else, then the\n-   byte value should be output as a \\ followed by the value\n-   in the table.  Note that we can use standard UN*X escape\n-   sequences for many control characters, but we don't use\n-   \\a to represent BEL because some svr4 assemblers (e.g. on\n-   the i386) don't know about that.  Also, we don't use \\v\n-   since some versions of gas, such as 2.2 did not accept it.  */\n-\n-#undef  ELF_ASCII_ESCAPES\n-#define ELF_ASCII_ESCAPES \\\n-\"\\1\\1\\1\\1\\1\\1\\1\\1btn\\1fr\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\\n-\\0\\0\\\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\\n-\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\\\\\0\\0\\0\\\n-\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1\\\n-\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\\n-\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\\n-\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\\n-\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\"\n-\n-/* Some svr4 assemblers have a limit on the number of characters which\n-   can appear in the operand of a .string directive.  If your assembler\n-   has such a limitation, you should define STRING_LIMIT to reflect that\n-   limit.  Note that at least some svr4 assemblers have a limit on the\n-   actual number of bytes in the double-quoted string, and that they\n-   count each character in an escape sequence as one byte.  Thus, an\n-   escape sequence like \\377 would count as four bytes.\n-\n-   If your target assembler doesn't support the .string directive, you\n-   should define this to zero.  */\n-\n-#undef  ELF_STRING_LIMIT\n-#define ELF_STRING_LIMIT\t((unsigned) 256)\n-\n-#undef  STRING_ASM_OP\n-#define STRING_ASM_OP\t\"\\t.string\\t\"\n-\n /* Provide a STARTFILE_SPEC appropriate for ELF.  Here we add the\n    (even more) magical crtbegin.o file which provides part of the\n    support for getting C++ file-scope static object constructed\n@@ -431,13 +177,3 @@ extern int alpha_this_gpdisp_sequence_number;\n #if defined(HAVE_LD_EH_FRAME_HDR)\n #define LINK_EH_SPEC \"%{!static:--eh-frame-hdr} \"\n #endif\n-\n-/* A C statement (sans semicolon) to output to the stdio stream STREAM\n-   any text necessary for declaring the name of an external symbol\n-   named NAME which is referenced in this compilation but not defined.\n-   It is needed to properly support non-default visibility.  */\n-\n-#ifndef ASM_OUTPUT_EXTERNAL\n-#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME) \\\n-  default_elf_asm_output_external (FILE, DECL, NAME)\n-#endif"}]}