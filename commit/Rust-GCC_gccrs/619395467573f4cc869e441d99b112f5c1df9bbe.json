{"sha": "619395467573f4cc869e441d99b112f5c1df9bbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE5Mzk1NDY3NTczZjRjYzg2OWU0NDFkOTliMTEyZjVjMWRmOWJiZQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-05-28T20:16:06Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-10T09:16:22Z"}, "message": "[Ada] Ada2020: AI12-0368 Declare expressions can be static\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Expression_With_Actions): Check the rules\n\tof AI12-0368, and mark the declare expression as static or known\n\tat compile time as appropriate.\n\t* sem_ch4.adb: Minor reformatting.\n\t* libgnat/a-stoufo.ads, libgnat/a-stoufo.adb: Allow up to 9\n\treplacement parameters. I'm planning to use this in the test\n\tcase for this ticket.", "tree": {"sha": "915aed5ae0fcf3d55f86868e699fdc71b93fb9ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/915aed5ae0fcf3d55f86868e699fdc71b93fb9ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/619395467573f4cc869e441d99b112f5c1df9bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/619395467573f4cc869e441d99b112f5c1df9bbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/619395467573f4cc869e441d99b112f5c1df9bbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/619395467573f4cc869e441d99b112f5c1df9bbe/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d3a9f399afb2c6c00dbbc8c2538d18faacba13a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d3a9f399afb2c6c00dbbc8c2538d18faacba13a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d3a9f399afb2c6c00dbbc8c2538d18faacba13a"}], "stats": {"total": 144, "additions": 122, "deletions": 22}, "files": [{"sha": "58d7f5a4be176a879d87265ffc612f151060c540", "filename": "gcc/ada/libgnat/a-stoufo.adb", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619395467573f4cc869e441d99b112f5c1df9bbe/gcc%2Fada%2Flibgnat%2Fa-stoufo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619395467573f4cc869e441d99b112f5c1df9bbe/gcc%2Fada%2Flibgnat%2Fa-stoufo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stoufo.adb?ref=619395467573f4cc869e441d99b112f5c1df9bbe", "patch": "@@ -38,10 +38,10 @@ package body Ada.Strings.Text_Output.Formatting is\n \n    procedure Put\n      (S : in out Sink'Class; T : Template;\n-      X1, X2, X3, X4, X5, X6 : UTF_8_Lines := \"\")\n+      X1, X2, X3, X4, X5, X6, X7, X8, X9 : UTF_8_Lines := \"\")\n    is\n       J : Positive := T'First;\n-      Used : array (1 .. 6) of Boolean := (others => False);\n+      Used : array (1 .. 9) of Boolean := (others => False);\n    begin\n       while J <= T'Last loop\n          if T (J) = '\\' then\n@@ -78,6 +78,15 @@ package body Ada.Strings.Text_Output.Formatting is\n                when '6' =>\n                   Used (6) := True;\n                   Put_UTF_8_Lines (S, X6);\n+               when '7' =>\n+                  Used (7) := True;\n+                  Put_UTF_8_Lines (S, X7);\n+               when '8' =>\n+                  Used (8) := True;\n+                  Put_UTF_8_Lines (S, X8);\n+               when '9' =>\n+                  Used (9) := True;\n+                  Put_UTF_8_Lines (S, X9);\n \n                when others =>\n                   raise Program_Error;\n@@ -107,32 +116,41 @@ package body Ada.Strings.Text_Output.Formatting is\n       if not Used (6) then\n          pragma Assert (X6 = \"\");\n       end if;\n+      if not Used (7) then\n+         pragma Assert (X7 = \"\");\n+      end if;\n+      if not Used (8) then\n+         pragma Assert (X8 = \"\");\n+      end if;\n+      if not Used (9) then\n+         pragma Assert (X9 = \"\");\n+      end if;\n \n       Flush (S);\n    end Put;\n \n    procedure Put\n      (T : Template;\n-      X1, X2, X3, X4, X5, X6 : UTF_8_Lines := \"\") is\n+      X1, X2, X3, X4, X5, X6, X7, X8, X9 : UTF_8_Lines := \"\") is\n    begin\n-      Put (Files.Standard_Output.all, T, X1, X2, X3, X4, X5, X6);\n+      Put (Files.Standard_Output.all, T, X1, X2, X3, X4, X5, X6, X7, X8, X9);\n    end Put;\n \n    procedure Err\n      (T : Template;\n-      X1, X2, X3, X4, X5, X6 : UTF_8_Lines := \"\") is\n+      X1, X2, X3, X4, X5, X6, X7, X8, X9 : UTF_8_Lines := \"\") is\n    begin\n-      Put (Files.Standard_Error.all, T, X1, X2, X3, X4, X5, X6);\n+      Put (Files.Standard_Error.all, T, X1, X2, X3, X4, X5, X6, X7, X8, X9);\n    end Err;\n \n    function Format\n      (T : Template;\n-      X1, X2, X3, X4, X5, X6 : UTF_8_Lines := \"\")\n+      X1, X2, X3, X4, X5, X6, X7, X8, X9 : UTF_8_Lines := \"\")\n      return UTF_8_Lines\n    is\n       Buf : Buffer := New_Buffer;\n    begin\n-      Put (Buf, T, X1, X2, X3, X4, X5, X6);\n+      Put (Buf, T, X1, X2, X3, X4, X5, X6, X7, X8, X9);\n       return Get_UTF_8 (Buf);\n    end Format;\n "}, {"sha": "a31ed2d4c12d948f6655cb27791164f0f3f1d157", "filename": "gcc/ada/libgnat/a-stoufo.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619395467573f4cc869e441d99b112f5c1df9bbe/gcc%2Fada%2Flibgnat%2Fa-stoufo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619395467573f4cc869e441d99b112f5c1df9bbe/gcc%2Fada%2Flibgnat%2Fa-stoufo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stoufo.ads?ref=619395467573f4cc869e441d99b112f5c1df9bbe", "patch": "@@ -43,7 +43,7 @@ package Ada.Strings.Text_Output.Formatting is\n    type Template is new UTF_8;\n    procedure Put\n      (S : in out Sink'Class; T : Template;\n-      X1, X2, X3, X4, X5, X6 : UTF_8_Lines := \"\");\n+      X1, X2, X3, X4, X5, X6, X7, X8, X9 : UTF_8_Lines := \"\");\n    --  Prints the template as is, except for the following escape sequences:\n    --    \"\\n\" is end of line.\n    --    \"\\i\" indents by the default amount, and \"\\o\" outdents.\n@@ -57,17 +57,17 @@ package Ada.Strings.Text_Output.Formatting is\n \n    procedure Put\n      (T : Template;\n-      X1, X2, X3, X4, X5, X6 : UTF_8_Lines := \"\");\n+      X1, X2, X3, X4, X5, X6, X7, X8, X9 : UTF_8_Lines := \"\");\n    --  Sends to standard output\n \n    procedure Err\n      (T : Template;\n-      X1, X2, X3, X4, X5, X6 : UTF_8_Lines := \"\");\n+      X1, X2, X3, X4, X5, X6, X7, X8, X9 : UTF_8_Lines := \"\");\n    --  Sends to standard error\n \n    function Format\n      (T : Template;\n-      X1, X2, X3, X4, X5, X6 : UTF_8_Lines := \"\")\n+      X1, X2, X3, X4, X5, X6, X7, X8, X9 : UTF_8_Lines := \"\")\n      return UTF_8_Lines;\n    --  Returns a UTF-8-encoded String\n "}, {"sha": "517f5fc8bec6be50bc47348b2509caec6a3575bb", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619395467573f4cc869e441d99b112f5c1df9bbe/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619395467573f4cc869e441d99b112f5c1df9bbe/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=619395467573f4cc869e441d99b112f5c1df9bbe", "patch": "@@ -2217,8 +2217,6 @@ package body Sem_Ch4 is\n    -- Analyze_Expression_With_Actions --\n    -------------------------------------\n \n-   --  Start of processing for Analyze_Quantified_Expression\n-\n    procedure Analyze_Expression_With_Actions (N : Node_Id) is\n \n       procedure Check_Action_OK (A : Node_Id);"}, {"sha": "bea7a57aaa5137a743e470c9e3dd220c1eec1e1b", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 92, "deletions": 8, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619395467573f4cc869e441d99b112f5c1df9bbe/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619395467573f4cc869e441d99b112f5c1df9bbe/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=619395467573f4cc869e441d99b112f5c1df9bbe", "patch": "@@ -8818,18 +8818,102 @@ package body Sem_Res is\n    -------------------------------------\n \n    procedure Resolve_Expression_With_Actions (N : Node_Id; Typ : Entity_Id) is\n+\n+      function OK_For_Static (Act : Node_Id) return Boolean;\n+      --  True if Act is an action of a declare_expression that is allowed in a\n+      --  static declare_expression.\n+\n+      function All_OK_For_Static return Boolean;\n+      --  True if all actions of N are allowed in a static declare_expression.\n+\n+      function Get_Literal (Expr : Node_Id) return Node_Id;\n+      --  Expr is an expression with compile-time-known value. This returns the\n+      --  literal node that reprsents that value.\n+\n+      function OK_For_Static (Act : Node_Id) return Boolean is\n+      begin\n+         case Nkind (Act) is\n+            when N_Object_Declaration =>\n+               if Constant_Present (Act)\n+                 and then Is_Static_Expression (Expression (Act))\n+               then\n+                  return True;\n+               end if;\n+\n+            when N_Object_Renaming_Declaration =>\n+               if Statically_Names_Object (Name (Act)) then\n+                  return True;\n+               end if;\n+\n+            when others =>\n+               --  No other declarations, nor even pragmas, are allowed in a\n+               --  declare expression, so if we see something else, it must be\n+               --  an internally generated expression_with_actions.\n+               null;\n+         end case;\n+\n+         return False;\n+      end OK_For_Static;\n+\n+      function All_OK_For_Static return Boolean is\n+         Act : Node_Id := First (Actions (N));\n+      begin\n+         while Present (Act) loop\n+            if not OK_For_Static (Act) then\n+               return False;\n+            end if;\n+\n+            Next (Act);\n+         end loop;\n+\n+         return True;\n+      end All_OK_For_Static;\n+\n+      function Get_Literal (Expr : Node_Id) return Node_Id is\n+         pragma Assert (Compile_Time_Known_Value (Expr));\n+         Result : Node_Id;\n+      begin\n+         case Nkind (Expr) is\n+            when N_Has_Entity =>\n+               if Ekind (Entity (Expr)) = E_Enumeration_Literal then\n+                  Result := Expr;\n+               else\n+                  Result := Constant_Value (Entity (Expr));\n+               end if;\n+            when N_Numeric_Or_String_Literal =>\n+               Result := Expr;\n+            when others =>\n+               raise Program_Error;\n+         end case;\n+\n+         pragma Assert\n+           (Nkind (Result) in N_Numeric_Or_String_Literal\n+              or else Ekind (Entity (Result)) = E_Enumeration_Literal);\n+         return Result;\n+      end Get_Literal;\n+\n+      Loc : constant Source_Ptr := Sloc (N);\n+\n    begin\n       Set_Etype (N, Typ);\n \n-      --  If N has no actions, and its expression has been constant folded,\n-      --  then rewrite N as just its expression. Note, we can't do this in\n-      --  the general case of Is_Empty_List (Actions (N)) as this would cause\n-      --  Expression (N) to be expanded again.\n+      if Is_Empty_List (Actions (N)) then\n+         pragma Assert (All_OK_For_Static); null;\n+      end if;\n \n-      if Is_Empty_List (Actions (N))\n-        and then Compile_Time_Known_Value (Expression (N))\n-      then\n-         Rewrite (N, Expression (N));\n+      --  If the value of the expression is known at compile time, and all\n+      --  of the actions (if any) are suitable, then replace the declare\n+      --  expression with its expression. This allows the declare expression\n+      --  as a whole to be static if appropriate. See AI12-0368.\n+\n+      if Compile_Time_Known_Value (Expression (N)) then\n+         if Is_Empty_List (Actions (N)) then\n+            Rewrite (N, Expression (N));\n+         elsif All_OK_For_Static then\n+            Rewrite\n+              (N, New_Copy_Tree\n+                    (Get_Literal (Expression (N)), New_Sloc => Loc));\n+         end if;\n       end if;\n    end Resolve_Expression_With_Actions;\n "}]}