{"sha": "0db1c804562aff23344cd5882db6fc65596e0966", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRiMWM4MDQ1NjJhZmYyMzM0NGNkNTg4MmRiNmZjNjU1OTZlMDk2Ng==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-30T16:29:04Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-05T17:20:56Z"}, "message": "Add missing mappings required for type resolution\n\nAdd Trait item mappings for trait resolving purposes. This allows us to\nlookup the trait with a trait item belongs to and vice versa.", "tree": {"sha": "7dc1a15dcb48e44fc56e3c0cf0a0b06e2962db2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dc1a15dcb48e44fc56e3c0cf0a0b06e2962db2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0db1c804562aff23344cd5882db6fc65596e0966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db1c804562aff23344cd5882db6fc65596e0966", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0db1c804562aff23344cd5882db6fc65596e0966", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db1c804562aff23344cd5882db6fc65596e0966/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4845c776841fc408fa7aadde21db18270b6b1b12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4845c776841fc408fa7aadde21db18270b6b1b12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4845c776841fc408fa7aadde21db18270b6b1b12"}], "stats": {"total": 105, "additions": 100, "deletions": 5}, "files": [{"sha": "30835547e075996f66ccd015f3b8a1a737e3f4ca", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db1c804562aff23344cd5882db6fc65596e0966/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db1c804562aff23344cd5882db6fc65596e0966/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=0db1c804562aff23344cd5882db6fc65596e0966", "patch": "@@ -496,28 +496,37 @@ class ASTLoweringItem : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::TypeParamBound> > type_param_bounds;\n \n     std::vector<std::unique_ptr<HIR::TraitItem> > trait_items;\n+    std::vector<HirId> trait_item_ids;\n     for (auto &item : trait.get_trait_items ())\n       {\n \tHIR::TraitItem *lowered = ASTLowerTraitItem::translate (item.get ());\n \ttrait_items.push_back (std::unique_ptr<HIR::TraitItem> (lowered));\n+\ttrait_item_ids.push_back (lowered->get_mappings ().get_hirid ());\n       }\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, trait.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    translated = new HIR::Trait (mapping, trait.get_identifier (),\n-\t\t\t\t trait.is_unsafe (), std::move (generic_params),\n-\t\t\t\t std::move (type_param_bounds), where_clause,\n-\t\t\t\t std::move (trait_items), vis,\n-\t\t\t\t trait.get_outer_attrs (), trait.get_locus ());\n+    HIR::Trait *hir_trait\n+      = new HIR::Trait (mapping, trait.get_identifier (), trait.is_unsafe (),\n+\t\t\tstd::move (generic_params),\n+\t\t\tstd::move (type_param_bounds), where_clause,\n+\t\t\tstd::move (trait_items), vis, trait.get_outer_attrs (),\n+\t\t\ttrait.get_locus ());\n+    translated = hir_trait;\n \n     mappings->insert_defid_mapping (mapping.get_defid (), translated);\n     mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n \t\t\t       translated);\n     mappings->insert_location (crate_num, mapping.get_hirid (),\n \t\t\t       trait.get_locus ());\n+\n+    for (auto trait_item_id : trait_item_ids)\n+      {\n+\tmappings->insert_trait_item_mapping (trait_item_id, hir_trait);\n+      }\n   }\n \n   void visit (AST::TraitImpl &impl_block) override"}, {"sha": "9b5ec0a4df78ff8d13ec93d57765ebe2871d1d06", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db1c804562aff23344cd5882db6fc65596e0966/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db1c804562aff23344cd5882db6fc65596e0966/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=0db1c804562aff23344cd5882db6fc65596e0966", "patch": "@@ -284,6 +284,9 @@ class ASTLowerGenericParam : public ASTLoweringBase\n       resolver.translated->get_mappings ().get_crate_num (),\n       resolver.translated->get_mappings ().get_hirid (),\n       param->get_locus_slow ());\n+    resolver.mappings->insert_hir_generic_param (\n+      resolver.translated->get_mappings ().get_crate_num (),\n+      resolver.translated->get_mappings ().get_hirid (), resolver.translated);\n \n     return resolver.translated;\n   }"}, {"sha": "ed597774550efd2273f83fd70635383e30c60671", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db1c804562aff23344cd5882db6fc65596e0966/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db1c804562aff23344cd5882db6fc65596e0966/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=0db1c804562aff23344cd5882db6fc65596e0966", "patch": "@@ -263,6 +263,12 @@ ASTLowerPathInExpression::visit (AST::PathInExpression &expr)\n   std::vector<HIR::PathExprSegment> path_segments;\n   expr.iterate_path_segments ([&] (AST::PathExprSegment &s) mutable -> bool {\n     path_segments.push_back (lower_path_expr_seg (s));\n+\n+    // insert the mappings for the segment\n+    HIR::PathExprSegment *lowered_seg = &path_segments.back ();\n+    mappings->insert_hir_path_expr_seg (\n+      lowered_seg->get_mappings ().get_crate_num (),\n+      lowered_seg->get_mappings ().get_hirid (), lowered_seg);\n     return true;\n   });\n "}, {"sha": "4ffbff053745953f2ad0ed9e4611f2ccce5323cb", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db1c804562aff23344cd5882db6fc65596e0966/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db1c804562aff23344cd5882db6fc65596e0966/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=0db1c804562aff23344cd5882db6fc65596e0966", "patch": "@@ -382,6 +382,56 @@ Mappings::lookup_hir_expr (CrateNum crateNum, HirId id)\n   return iy->second;\n }\n \n+void\n+Mappings::insert_hir_path_expr_seg (CrateNum crateNum, HirId id,\n+\t\t\t\t    HIR::PathExprSegment *expr)\n+{\n+  rust_assert (lookup_hir_path_expr_seg (crateNum, id) == nullptr);\n+\n+  hirPathSegMappings[crateNum][id] = expr;\n+  nodeIdToHirMappings[crateNum][expr->get_mappings ().get_nodeid ()] = id;\n+  insert_location (crateNum, id, expr->get_locus ());\n+}\n+\n+HIR::PathExprSegment *\n+Mappings::lookup_hir_path_expr_seg (CrateNum crateNum, HirId id)\n+{\n+  auto it = hirPathSegMappings.find (crateNum);\n+  if (it == hirPathSegMappings.end ())\n+    return nullptr;\n+\n+  auto iy = it->second.find (id);\n+  if (iy == it->second.end ())\n+    return nullptr;\n+\n+  return iy->second;\n+}\n+\n+void\n+Mappings::insert_hir_generic_param (CrateNum crateNum, HirId id,\n+\t\t\t\t    HIR::GenericParam *param)\n+{\n+  rust_assert (lookup_hir_generic_param (crateNum, id) == nullptr);\n+\n+  hirGenericParamMappings[crateNum][id] = param;\n+  nodeIdToHirMappings[crateNum][param->get_mappings ().get_nodeid ()] = id;\n+  insert_location (crateNum, id, param->get_locus_slow ());\n+}\n+\n+HIR::GenericParam *\n+Mappings::lookup_hir_generic_param (CrateNum crateNum, HirId id)\n+{\n+  auto it = hirGenericParamMappings.find (crateNum);\n+  if (it == hirGenericParamMappings.end ())\n+    return nullptr;\n+\n+  auto iy = it->second.find (id);\n+  if (iy == it->second.end ())\n+    return nullptr;\n+\n+  return iy->second;\n+}\n+\n void\n Mappings::insert_hir_type (CrateNum crateNum, HirId id, HIR::Type *type)\n {"}, {"sha": "ccc873bb5a64f77a66523d9dc644ca68726a3457", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db1c804562aff23344cd5882db6fc65596e0966/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db1c804562aff23344cd5882db6fc65596e0966/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=0db1c804562aff23344cd5882db6fc65596e0966", "patch": "@@ -148,6 +148,14 @@ class Mappings\n   void insert_hir_expr (CrateNum crateNum, HirId id, HIR::Expr *expr);\n   HIR::Expr *lookup_hir_expr (CrateNum crateNum, HirId id);\n \n+  void insert_hir_path_expr_seg (CrateNum crateNum, HirId id,\n+\t\t\t\t HIR::PathExprSegment *expr);\n+  HIR::PathExprSegment *lookup_hir_path_expr_seg (CrateNum crateNum, HirId id);\n+\n+  void insert_hir_generic_param (CrateNum crateNum, HirId id,\n+\t\t\t\t HIR::GenericParam *expr);\n+  HIR::GenericParam *lookup_hir_generic_param (CrateNum crateNum, HirId id);\n+\n   void insert_hir_type (CrateNum crateNum, HirId id, HIR::Type *type);\n   HIR::Type *lookup_hir_type (CrateNum crateNum, HirId id);\n \n@@ -215,6 +223,20 @@ class Mappings\n \t   != nullptr;\n   }\n \n+  void insert_trait_item_mapping (HirId trait_item_id, HIR::Trait *trait)\n+  {\n+    rust_assert (hirTraitItemsToTraitMappings.find (trait_item_id)\n+\t\t == hirTraitItemsToTraitMappings.end ());\n+    hirTraitItemsToTraitMappings[trait_item_id] = trait;\n+  }\n+\n+  HIR::Trait *lookup_trait_item_mapping (HirId trait_item_id)\n+  {\n+    auto lookup = hirTraitItemsToTraitMappings.find (trait_item_id);\n+    rust_assert (lookup != hirTraitItemsToTraitMappings.end ());\n+    return lookup->second;\n+  }\n+\n private:\n   Mappings ();\n \n@@ -245,6 +267,11 @@ class Mappings\n   std::map<CrateNum, std::map<HirId, HIR::TraitItem *> > hirTraitItemMappings;\n   std::map<CrateNum, std::map<HirId, HIR::ExternalItem *> >\n     hirExternItemMappings;\n+  std::map<CrateNum, std::map<HirId, HIR::PathExprSegment *> >\n+    hirPathSegMappings;\n+  std::map<CrateNum, std::map<HirId, HIR::GenericParam *> >\n+    hirGenericParamMappings;\n+  std::map<HirId, HIR::Trait *> hirTraitItemsToTraitMappings;\n \n   // location info\n   std::map<CrateNum, std::map<NodeId, Location> > locations;"}]}