{"sha": "c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYzYTJhZDY4YmMwNzA0ZmMyOTI2YmFkYzQ2ZjNjY2Q5NTJkYmJiOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-19T11:46:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-19T11:46:14Z"}, "message": "[multiple changes]\n\n2017-01-19  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* lib-xref-spark_specific.adb, sem_util.adb, sem_util.ads,\n\tsem_ch4.adb, sem_ch8.adb, lib-xref.ads: Minor reformatting.\n\n2017-01-19  Bob Duff  <duff@adacore.com>\n\n\t* bcheck.adb (Check_Consistent_Dynamic_Elaboration_Checking):\n\tIncrement Warnings_Detected.  It was decrementing, which is\n\twrong since we just issued a warning message.\n\t* binderr.ads (Errors_Detected, Warnings_Detected): Declare\n\tthese variables to be of subtype Nat instead of Int, because\n\tthey should never be negative.\n\n2017-01-19  Javier Miranda  <miranda@adacore.com>\n\n\t* contracts.adb (Build_Postconditions_Procedure): Replace\n\tGenerate_C_Code by Modify_Tree_For_C.\n\t* exp_aggr.adb (Build_Record_Aggr_Code, Expand_Array_Aggregate):\n\tReplace Generate_C_Code by Modify_Tree_For_C.\n\t* exp_attr.adb (Float_Valid, Is_GCC_Target): Replace Generate_C_Code by\n\tModify_Tree_For_C.\n\t* exp_ch11.adb (Expand_N_Exception_Declaration): Replace\n\tGenerate_C_Code by Modify_Tree_For_C.\n\t* exp_ch4.adb (Expand_Allocator_Expression): Replace\n\tGenerate_C_Code by Modify_Tree_For_C.\n\t* exp_dbug.adb (Qualify_Entity_Name): Replace Generate_C_Code\n\tby Modify_Tree_For_C.\n\t* exp_util.adb (Remove_Side_Effects, Side_Effect_Free): Replace\n\tGenerate_C_Code by Modify_Tree_For_C.\n\t* sem_res.adb (Resolve_Type_Conversion): Replace Generate_C_Code\n\tby Modify_Tree_For_C.\n\t* sinfo.ads (Modify_Tree_For_C): Adding documentation.\n\nFrom-SVN: r244619", "tree": {"sha": "9b5192623bf3246439db9c7ea3d6c832eca97899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b5192623bf3246439db9c7ea3d6c832eca97899"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/comments", "author": null, "committer": null, "parents": [{"sha": "40bf00b1f85afad60951ed3c07b5ffd6414241cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40bf00b1f85afad60951ed3c07b5ffd6414241cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40bf00b1f85afad60951ed3c07b5ffd6414241cf"}], "stats": {"total": 166, "additions": 112, "deletions": 54}, "files": [{"sha": "7f7fcd8b3e4152d322b868a9596742a2dd6b2c51", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -1,3 +1,37 @@\n+2017-01-19  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* lib-xref-spark_specific.adb, sem_util.adb, sem_util.ads,\n+\tsem_ch4.adb, sem_ch8.adb, lib-xref.ads: Minor reformatting.\n+\n+2017-01-19  Bob Duff  <duff@adacore.com>\n+\n+\t* bcheck.adb (Check_Consistent_Dynamic_Elaboration_Checking):\n+\tIncrement Warnings_Detected.  It was decrementing, which is\n+\twrong since we just issued a warning message.\n+\t* binderr.ads (Errors_Detected, Warnings_Detected): Declare\n+\tthese variables to be of subtype Nat instead of Int, because\n+\tthey should never be negative.\n+\n+2017-01-19  Javier Miranda  <miranda@adacore.com>\n+\n+\t* contracts.adb (Build_Postconditions_Procedure): Replace\n+\tGenerate_C_Code by Modify_Tree_For_C.\n+\t* exp_aggr.adb (Build_Record_Aggr_Code, Expand_Array_Aggregate):\n+\tReplace Generate_C_Code by Modify_Tree_For_C.\n+\t* exp_attr.adb (Float_Valid, Is_GCC_Target): Replace Generate_C_Code by\n+\tModify_Tree_For_C.\n+\t* exp_ch11.adb (Expand_N_Exception_Declaration): Replace\n+\tGenerate_C_Code by Modify_Tree_For_C.\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Replace\n+\tGenerate_C_Code by Modify_Tree_For_C.\n+\t* exp_dbug.adb (Qualify_Entity_Name): Replace Generate_C_Code\n+\tby Modify_Tree_For_C.\n+\t* exp_util.adb (Remove_Side_Effects, Side_Effect_Free): Replace\n+\tGenerate_C_Code by Modify_Tree_For_C.\n+\t* sem_res.adb (Resolve_Type_Conversion): Replace Generate_C_Code\n+\tby Modify_Tree_For_C.\n+\t* sinfo.ads (Modify_Tree_For_C): Adding documentation.\n+\n 2017-01-19  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_util.ads, sem_util.adb (Expression_Of_Expression_Function): New"}, {"sha": "fa83f89983a931bc2386ebc84b3f1f062eeda5f6", "filename": "gcc/ada/bcheck.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fbcheck.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fbcheck.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbcheck.adb?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -517,7 +517,7 @@ package body Bcheck is\n                                    (\"?  { which has static elaboration \" &\n                                                                      \"checks\");\n \n-                                 Warnings_Detected := Warnings_Detected - 1;\n+                                 Warnings_Detected := Warnings_Detected + 1;\n                               end if;\n                            end;\n                         end if;"}, {"sha": "a6434a0c22336455f81aa56a8e306cfc6ed90149", "filename": "gcc/ada/binderr.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fbinderr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fbinderr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbinderr.ads?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,10 +31,10 @@ with Types; use Types;\n \n package Binderr is\n \n-   Errors_Detected : Int;\n+   Errors_Detected : Nat;\n    --  Number of errors detected so far\n \n-   Warnings_Detected : Int;\n+   Warnings_Detected : Nat;\n    --  Number of warnings detected\n \n    Info_Prefix_Suppress : Boolean := False;"}, {"sha": "d5b31034f6d54ed1dc8a4d4ce2aaca572032df7b", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -2222,7 +2222,7 @@ package body Contracts is\n          --  enclosing subprogram, which would cause problems for unnesting\n          --  routines in the absence of inlining.\n \n-         if Generate_C_Code then\n+         if Modify_Tree_For_C then\n             Set_Has_Pragma_Inline        (Proc_Id);\n             Set_Has_Pragma_Inline_Always (Proc_Id);\n             Set_Is_Inlined               (Proc_Id);"}, {"sha": "25647048951dc3ef62ff8c3b34c69c694291e994", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -3657,7 +3657,7 @@ package body Exp_Aggr is\n                   end if;\n                end if;\n \n-               if Generate_C_Code\n+               if Modify_Tree_For_C\n                  and then Nkind (Expr_Q) = N_Aggregate\n                  and then Is_Array_Type (Etype (Expr_Q))\n                  and then Present (First_Index (Etype (Expr_Q)))\n@@ -6245,7 +6245,7 @@ package body Exp_Aggr is\n          if (In_Place_Assign_OK_For_Declaration or else Maybe_In_Place_OK)\n            and then not AAMP_On_Target\n            and then not CodePeer_Mode\n-           and then not Generate_C_Code\n+           and then not Modify_Tree_For_C\n            and then not Possible_Bit_Aligned_Component (Target)\n            and then not Is_Possibly_Unaligned_Slice (Target)\n            and then Aggr_Assignment_OK_For_Backend (N)"}, {"sha": "c38db1eea75ca6a68e39e9a43579ce88b9db53b6", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -6525,7 +6525,7 @@ package body Exp_Attr is\n             begin\n                --  The C and AAMP back-ends handle Valid for fpt types\n \n-               if Generate_C_Code or else Float_Rep (Btyp) = AAMP then\n+               if Modify_Tree_For_C or else Float_Rep (Btyp) = AAMP then\n                   Analyze_And_Resolve (Pref, Ptyp);\n                   Set_Etype (N, Standard_Boolean);\n                   Set_Analyzed (N);\n@@ -8155,7 +8155,7 @@ package body Exp_Attr is\n       begin\n          return not CodePeer_Mode\n            and then not AAMP_On_Target\n-           and then not Generate_C_Code;\n+           and then not Modify_Tree_For_C;\n       end Is_GCC_Target;\n \n    --  Start of processing for Is_Inline_Floating_Point_Attribute"}, {"sha": "4e37a50becdef7866df44703d5ca1c2a93d6a84b", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -1253,7 +1253,7 @@ package body Exp_Ch11 is\n    begin\n       --  Nothing to do when generating C code\n \n-      if Generate_C_Code then\n+      if Modify_Tree_For_C then\n          return;\n       end if;\n "}, {"sha": "f2c39a60f1ca1b7d1cd631d26908786a02733a42", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -1101,7 +1101,7 @@ package body Exp_Ch4 is\n       --  generating C code, to simplify the work in the code generator.\n \n       elsif Aggr_In_Place\n-        or else (Generate_C_Code and then Nkind (Exp) = N_Aggregate)\n+        or else (Modify_Tree_For_C and then Nkind (Exp) = N_Aggregate)\n       then\n          Temp := Make_Temporary (Loc, 'P', N);\n          Temp_Decl :="}, {"sha": "a51af01f1b09add7864435d8c0b51e72bf2fd88c", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -1452,7 +1452,7 @@ package body Exp_Dbug is\n       --  Qualification needed for enumeration literals when generating C code\n       --  (to simplify their management in the backend).\n \n-      elsif Generate_C_Code\n+      elsif Modify_Tree_For_C\n         and then Ekind (Ent) = E_Enumeration_Literal\n         and then Scope (Ultimate_Alias (Ent)) /= Standard_Standard\n       then"}, {"sha": "7641540d12663b9a1c53787af0c4d803551c86af", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -9240,7 +9240,7 @@ package body Exp_Util is\n          --  initializing a fat pointer and the expression must be free of\n          --  side effects to safely compute its bounds.\n \n-         if Generate_C_Code\n+         if Modify_Tree_For_C\n            and then Is_Access_Type (Etype (Exp))\n            and then Is_Array_Type (Designated_Type (Etype (Exp)))\n            and then not Is_Constrained (Designated_Type (Etype (Exp)))\n@@ -9371,7 +9371,7 @@ package body Exp_Util is\n          --  be identified here to avoid entering into a never-ending loop\n          --  generating internal object declarations.\n \n-         elsif Generate_C_Code\n+         elsif Modify_Tree_For_C\n            and then Nkind (Parent (Exp)) = N_Object_Declaration\n            and then\n              (Nkind (Exp) /= N_Function_Call\n@@ -9423,7 +9423,7 @@ package body Exp_Util is\n          --  When generating C code, no need for a 'reference since the\n          --  secondary stack is not supported.\n \n-         if GNATprove_Mode or Generate_C_Code then\n+         if GNATprove_Mode or Modify_Tree_For_C then\n             Res := New_Occurrence_Of (Def_Id, Loc);\n             Ref_Type := Exp_Type;\n \n@@ -9461,7 +9461,7 @@ package body Exp_Util is\n             --  Do not generate a 'reference in SPARK mode or C generation\n             --  since the access type is not created in the first place.\n \n-            if GNATprove_Mode or Generate_C_Code then\n+            if GNATprove_Mode or Modify_Tree_For_C then\n                New_Exp := E;\n \n             --  Otherwise generate reference, marking the value as non-null\n@@ -9505,7 +9505,7 @@ package body Exp_Util is\n          --     type Rec (D : Integer) is ...\n          --     Obj : constant Rec := SomeFunc;\n \n-         if Generate_C_Code\n+         if Modify_Tree_For_C\n            and then Nkind (Parent (Exp)) = N_Object_Declaration\n            and then Has_Discriminants (Exp_Type)\n            and then Nkind (Exp) = N_Function_Call\n@@ -10602,7 +10602,7 @@ package body Exp_Util is\n       --  a fat pointer and the expression cannot be assumed to be free of side\n       --  effects since it must referenced several times to compute its bounds.\n \n-      elsif Generate_C_Code\n+      elsif Modify_Tree_For_C\n         and then Nkind (N) = N_Type_Conversion\n         and then Is_Access_Type (Typ)\n         and then Is_Array_Type (Designated_Type (Typ))"}, {"sha": "d00c4eed4e731e253a619dbc226db4484fe676b9", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -1444,12 +1444,15 @@ package body SPARK_Specific is\n \n       procedure Traverse_Package_Body (N : Node_Id) is\n          Spec_E : constant Entity_Id := Unique_Defining_Entity (N);\n+\n       begin\n          case Ekind (Spec_E) is\n             when E_Package =>\n                Traverse_Declarations_And_HSS (N);\n+\n             when E_Generic_Package =>\n                null;\n+\n             when others =>\n                raise Program_Error;\n          end case;\n@@ -1470,12 +1473,18 @@ package body SPARK_Specific is\n \n       procedure Traverse_Subprogram_Body (N : Node_Id) is\n          Spec_E : constant Entity_Id := Unique_Defining_Entity (N);\n+\n       begin\n          case Ekind (Spec_E) is\n-            when E_Function | E_Procedure | Entry_Kind =>\n+            when Entry_Kind\n+               | E_Function\n+               | E_Procedure\n+            =>\n                Traverse_Declarations_And_HSS (N);\n+\n             when Generic_Subprogram_Kind =>\n                null;\n+\n             when others =>\n                raise Program_Error;\n          end case;"}, {"sha": "ecb70b60f15e571a6653416dc4a3d2460b140bbc", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -653,8 +653,9 @@ package Lib.Xref is\n \n       generic\n          with procedure Process (N : Node_Id) is <>;\n-      procedure Traverse_Compilation_Unit (CU           : Node_Id;\n-                                           Inside_Stubs : Boolean);\n+      procedure Traverse_Compilation_Unit\n+        (CU           : Node_Id;\n+         Inside_Stubs : Boolean);\n       --  Call Process on all declarations within compilation unit CU. If\n       --  Inside_Stubs is True, then the body of stubs is also traversed.\n       --  Generic declarations are ignored."}, {"sha": "db41afb4797f6a9397f38aa4c8e374adc5e9ed44", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -5881,12 +5881,12 @@ package body Sem_Ch4 is\n          end loop;\n       end if;\n \n-      --  Before listing the possible candidates, check whether this\n-      --  a prefix of a selected component that has been rewritten as\n-      --  a parameterless function call because there is a callable\n-      --  candidate interpretation. If there is a hidden package in\n-      --  the list of homonyms of the function name (bad programming\n-      --  style in any case) suggest that this is the intended entity.\n+      --  Before listing the possible candidates, check whether this is\n+      --  a prefix of a selected component that has been rewritten as a\n+      --  parameterless function call because there is a callable candidate\n+      --  interpretation. If there is a hidden package in the list of homonyms\n+      --  of the function name (bad programming style in any case) suggest that\n+      --  this is the intended entity.\n \n       if No (Parameter_Associations (N))\n         and then Nkind (Parent (N)) = N_Selected_Component\n@@ -5903,6 +5903,7 @@ package body Sem_Ch4 is\n                   Error_Msg_N\n                     (\"no legal interpretations as function call,!\", Nam);\n                   Error_Msg_NE (\"\\package& is not visible\", N, Ent);\n+\n                   Rewrite (Parent (N),\n                     New_Occurrence_Of (Any_Type, Sloc (N)));\n                   return;\n@@ -5913,8 +5914,8 @@ package body Sem_Ch4 is\n          end;\n       end if;\n \n-      --   Analyze each candidate call again, with full error reporting\n-      --   for each.\n+      --  Analyze each candidate call again, with full error reporting for\n+      --  each.\n \n       Error_Msg_N\n         (\"no candidate interpretations match the actuals:!\", Nam);"}, {"sha": "176f6a70f8300bb1e982c184b0d78f013a564a86", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -7033,14 +7033,14 @@ package body Sem_Ch8 is\n                   Save_Interps (P, Nam);\n \n                   --  We use Replace here because this is one of those cases\n-                  --  where the parser has missclassified the node, and we\n-                  --  fix things up and then do the semantic analysis on the\n-                  --  fixed up node. Normally we do this using one of the\n-                  --  Sinfo.CN routines, but this is too tricky for that.\n+                  --  where the parser has missclassified the node, and we fix\n+                  --  things up and then do the semantic analysis on the fixed\n+                  --  up node. Normally we do this using one of the Sinfo.CN\n+                  --  routines, but this is too tricky for that.\n \n-                  --  Note that using Rewrite would be wrong, because we\n-                  --  would have a tree where the original node is unanalyzed,\n-                  --  and this violates the required interface for ASIS.\n+                  --  Note that using Rewrite would be wrong, because we would\n+                  --  have a tree where the original node is unanalyzed, and\n+                  --  this violates the required interface for ASIS.\n \n                   Replace (P,\n                     Make_Function_Call (Sloc (P), Name => Nam));\n@@ -7049,9 +7049,9 @@ package body Sem_Ch8 is\n \n                   Analyze_Call (P);\n \n-                  --  If the prefix is illegal after this transformation,\n-                  --  there may be visibility errors on the prefix. The\n-                  --  safest is to treat the selected component as an error.\n+                  --  If the prefix is illegal after this transformation, there\n+                  --  may be visibility errors on the prefix. The safest is to\n+                  --  treat the selected component as an error.\n \n                   if Error_Posted (P) then\n                      Set_Etype (N, Any_Type);\n@@ -7068,8 +7068,8 @@ package body Sem_Ch8 is\n          else\n             --  Format node as expanded name, to avoid cascaded errors\n \n-            --  If the limited_with transformation was applied earlier,\n-            --  restore source for proper error reporting.\n+            --  If the limited_with transformation was applied earlier, restore\n+            --  source for proper error reporting.\n \n             if not Comes_From_Source (P)\n               and then Nkind (P) = N_Explicit_Dereference"}, {"sha": "3728482a151b7958d2bd5612fa1b2d7b585b0e4d", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -11022,7 +11022,7 @@ package body Sem_Res is\n       --  remove side effects in order to store the result of the conversion\n       --  into a temporary.\n \n-      if Generate_C_Code\n+      if Modify_Tree_For_C\n         and then Nkind (N) = N_Type_Conversion\n         and then Nkind (Parent (N)) /= N_Object_Declaration\n         and then Is_Access_Type (Etype (N))"}, {"sha": "352673c296456346661650a12c187f3ca93ebd3c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -8068,13 +8068,11 @@ package body Sem_Util is\n    ----------------------\n \n    procedure Get_Index_Bounds\n-     (N : Node_Id;\n-      L, H : out Node_Id;\n+     (N             : Node_Id;\n+      L             : out Node_Id;\n+      H             : out Node_Id;\n       Use_Full_View : Boolean := False)\n    is\n-      Kind : constant Node_Kind := Nkind (N);\n-      R    : Node_Id;\n-\n       function Scalar_Range_Of_Right_View return Node_Id;\n       --  Call Scalar_Range with argument determined by Use_Full_View\n       --  parameter.\n@@ -8085,22 +8083,31 @@ package body Sem_Util is\n \n       function Scalar_Range_Of_Right_View return Node_Id is\n          E : Entity_Id := Entity (N);\n+\n       begin\n          if Use_Full_View and then Present (Full_View (E)) then\n             E := Full_View (E);\n          end if;\n+\n          return Scalar_Range (E);\n       end Scalar_Range_Of_Right_View;\n \n+      --  Local variables\n+\n+      Kind : constant Node_Kind := Nkind (N);\n+      Rng  : Node_Id;\n+\n+   --  Start of processing for Get_Index_Bounds\n+\n    begin\n       if Kind = N_Range then\n          L := Low_Bound (N);\n          H := High_Bound (N);\n \n       elsif Kind = N_Subtype_Indication then\n-         R := Range_Expression (Constraint (N));\n+         Rng := Range_Expression (Constraint (N));\n \n-         if R = Error then\n+         if Rng = Error then\n             L := Error;\n             H := Error;\n             return;"}, {"sha": "b4374122e6c952413a9c759235b9cc6431492e93", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -896,17 +896,18 @@ package Sem_Util is\n    --  derivation that does not see the full view of that ancestor.\n \n    procedure Get_Index_Bounds\n-     (N : Node_Id;\n-      L, H : out Node_Id;\n+     (N             : Node_Id;\n+      L             : out Node_Id;\n+      H             : out Node_Id;\n       Use_Full_View : Boolean := False);\n    --  This procedure assigns to L and H respectively the values of the low and\n    --  high bounds of node N, which must be a range, subtype indication, or the\n    --  name of a scalar subtype. The result in L, H may be set to Error if\n    --  there was an earlier error in the range.\n    --  Use_Full_View is intended for use by clients other than the compiler\n    --  (specifically, gnat2scil) to indicate that we want the full view if\n-   --  the index type turns out to be a partial view; this case should\n-   --  not arise during normal compilation of semantically correct programs.\n+   --  the index type turns out to be a partial view; this case should not\n+   --  arise during normal compilation of semantically correct programs.\n \n    function Get_Enum_Lit_From_Pos\n      (T   : Entity_Id;"}, {"sha": "404630e3ceaa8f58278477084759eb4ece18f369", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63a2ad68bc0704fc2926badc46f3ccd952dbbb9/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=c63a2ad68bc0704fc2926badc46f3ccd952dbbb9", "patch": "@@ -790,6 +790,11 @@ package Sinfo is\n    --    they are systematically expanded into loops (for arrays) and\n    --    individual assignments (for records).\n \n+   --    Unconstrained array types are handled by means of fat pointers.\n+\n+   --    Postconditions are inlined by the frontend since their body may have\n+   --    references to itypes defined in the enclosing subprogram.\n+\n    ------------------------------------\n    -- Description of Semantic Fields --\n    ------------------------------------"}]}