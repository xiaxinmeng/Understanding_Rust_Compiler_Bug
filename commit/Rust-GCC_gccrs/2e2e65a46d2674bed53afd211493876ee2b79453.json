{"sha": "2e2e65a46d2674bed53afd211493876ee2b79453", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUyZTY1YTQ2ZDI2NzRiZWQ1M2FmZDIxMTQ5Mzg3NmVlMmI3OTQ1Mw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-09-16T19:03:55Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-09-16T19:03:55Z"}, "message": "c++: constrained variable template issues [PR98486]\n\nThis fixes some issues with constrained variable templates:\n\n  - Constraints aren't checked when explicitly specializing a variable\n    template.\n  - Constraints aren't attached to a static data member template at\n    parse time.\n  - Constraints don't get propagated when (partially) instantiating a\n    static data member template, so we need to make sure to look up\n    constraints using the most general template during satisfaction.\n\n\tPR c++/98486\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (get_normalized_constraints_from_decl): Always\n\tlook up constraints using the most general template.\n\t* decl.c (grokdeclarator): Set constraints on a static data\n\tmember template.\n\t* pt.c (determine_specialization): Check constraints on a\n\tvariable template.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-var-templ1.C: New test.\n\t* g++.dg/cpp2a/concepts-var-templ1a.C: New test.\n\t* g++.dg/cpp2a/concepts-var-templ1b.C: New test.", "tree": {"sha": "1fe2b9a3a2b42eee9d88b3cc4738e866e1c87fb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fe2b9a3a2b42eee9d88b3cc4738e866e1c87fb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e2e65a46d2674bed53afd211493876ee2b79453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e2e65a46d2674bed53afd211493876ee2b79453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e2e65a46d2674bed53afd211493876ee2b79453", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e2e65a46d2674bed53afd211493876ee2b79453/comments", "author": null, "committer": null, "parents": [{"sha": "cfea7b86f2430b9cb8018379b071f4004233119c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfea7b86f2430b9cb8018379b071f4004233119c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfea7b86f2430b9cb8018379b071f4004233119c"}], "stats": {"total": 60, "additions": 56, "deletions": 4}, "files": [{"sha": "2896efdd7f2e8dd78f33a59eeb016474ab9aa7f6", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2e65a46d2674bed53afd211493876ee2b79453/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2e65a46d2674bed53afd211493876ee2b79453/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=2e2e65a46d2674bed53afd211493876ee2b79453", "patch": "@@ -918,20 +918,22 @@ get_normalized_constraints_from_decl (tree d, bool diag = false)\n       tmpl = most_general_template (tmpl);\n   }\n \n+  d = tmpl ? tmpl : decl;\n+\n   /* If we're not diagnosing errors, use cached constraints, if any.  */\n   if (!diag)\n-    if (tree *p = hash_map_safe_get (normalized_map, tmpl))\n+    if (tree *p = hash_map_safe_get (normalized_map, d))\n       return *p;\n \n   tree norm = NULL_TREE;\n-  if (tree ci = get_constraints (decl))\n+  if (tree ci = get_constraints (d))\n     {\n       push_access_scope_guard pas (decl);\n       norm = get_normalized_constraints_from_info (ci, tmpl, diag);\n     }\n \n   if (!diag)\n-    hash_map_safe_put<hm_ggc> (normalized_map, tmpl, norm);\n+    hash_map_safe_put<hm_ggc> (normalized_map, d, norm);\n \n   return norm;\n }"}, {"sha": "58ddc6a537e98aab0af2e516551346d1d2f1948b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2e65a46d2674bed53afd211493876ee2b79453/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2e65a46d2674bed53afd211493876ee2b79453/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2e2e65a46d2674bed53afd211493876ee2b79453", "patch": "@@ -13980,6 +13980,17 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t    if (declspecs->gnu_thread_keyword_p)\n \t\t      SET_DECL_GNU_TLS_P (decl);\n \t\t  }\n+\n+\t\t/* Set the constraints on the declaration.  */\n+\t\tbool memtmpl = (processing_template_decl\n+\t\t\t\t> template_class_depth (current_class_type));\n+\t\tif (memtmpl)\n+\t\t  {\n+\t\t    tree tmpl_reqs\n+\t\t      = TEMPLATE_PARMS_CONSTRAINTS (current_template_parms);\n+\t\t    tree ci = build_constraints (tmpl_reqs, NULL_TREE);\n+\t\t    set_constraints (decl, ci);\n+\t\t  }\n \t      }\n \t    else\n \t      {"}, {"sha": "22c74da79350ce3044a1c82b34227f18438c5f6e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2e65a46d2674bed53afd211493876ee2b79453/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2e65a46d2674bed53afd211493876ee2b79453/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2e2e65a46d2674bed53afd211493876ee2b79453", "patch": "@@ -2218,7 +2218,8 @@ determine_specialization (tree template_id,\n       targs = coerce_template_parms (parms, explicit_targs, fns,\n \t\t\t\t     tf_warning_or_error,\n \t\t\t\t     /*req_all*/true, /*use_defarg*/true);\n-      if (targs != error_mark_node)\n+      if (targs != error_mark_node\n+\t  && constraints_satisfied_p (fns, targs))\n         templates = tree_cons (targs, fns, templates);\n     }\n   else for (lkp_iterator iter (fns); iter; ++iter)"}, {"sha": "80b48ba3a3d365dc5b500e4660e8f0b5cebe845f", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-var-templ1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2e65a46d2674bed53afd211493876ee2b79453/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-var-templ1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2e65a46d2674bed53afd211493876ee2b79453/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-var-templ1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-var-templ1.C?ref=2e2e65a46d2674bed53afd211493876ee2b79453", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/98486\n+// { dg-do compile { target c++20 } }\n+\n+template<class T, class U> concept C = __is_same(T, U);\n+\n+template<C<int>> int v;\n+\n+template<> int v<int>;\n+template<> int v<char>; // { dg-error \"match\" }"}, {"sha": "b12d37d8b7e3b6bfb39e71e1dda3bbd2f4c0534b", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-var-templ1a.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2e65a46d2674bed53afd211493876ee2b79453/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-var-templ1a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2e65a46d2674bed53afd211493876ee2b79453/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-var-templ1a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-var-templ1a.C?ref=2e2e65a46d2674bed53afd211493876ee2b79453", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/98486\n+// { dg-do compile { target c++20 } }\n+\n+template<class T, class U> concept C = __is_same(T, U);\n+\n+struct A {\n+  template<C<int>> static int v;\n+};\n+\n+template<> int A::v<int>;\n+template<> int A::v<char>; // { dg-error \"match\" }\n+\n+int x = A::v<int>;\n+int y = A::v<char>; // { dg-error \"invalid\" }"}, {"sha": "37d7f0fc654e1dd17d6d68a5bb6667ce0271dc0e", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-var-templ1b.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2e65a46d2674bed53afd211493876ee2b79453/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-var-templ1b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2e65a46d2674bed53afd211493876ee2b79453/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-var-templ1b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-var-templ1b.C?ref=2e2e65a46d2674bed53afd211493876ee2b79453", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/98486\n+// { dg-do compile { target c++20 } }\n+\n+template<class T, class U> concept C = __is_same(T, U);\n+\n+template<class T>\n+struct A {\n+  template<C<T>> static int v;\n+};\n+\n+template<> template<> int A<int>::v<int>;\n+template<> template<> int A<int>::v<char>; // { dg-error \"match\" }\n+\n+int x = A<int>::v<int>;\n+int y = A<int>::v<char>; // { dg-error \"invalid\" }"}]}