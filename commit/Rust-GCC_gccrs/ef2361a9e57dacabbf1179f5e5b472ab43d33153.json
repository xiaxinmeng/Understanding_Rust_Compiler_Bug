{"sha": "ef2361a9e57dacabbf1179f5e5b472ab43d33153", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYyMzYxYTllNTdkYWNhYmJmMTE3OWY1ZTViNDcyYWI0M2QzMzE1Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-12-23T22:00:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-12-23T22:00:13Z"}, "message": "re PR c++/51507 ([C++0x] Function parameter pack doesn't use in template-argument-list)\n\n\tPR c++/51507\n\t* search.c (at_function_scope_p): Also check cfun.\n\t* pt.c (tsubst_pack_expansion): Check it instead of\n\tcp_unevaluated_operand.\n\t(instantiate_template_1): Clear current_function_decl.\n\nFrom-SVN: r182668", "tree": {"sha": "338772733743ae449f0b075f0f36a8425c34db83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/338772733743ae449f0b075f0f36a8425c34db83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef2361a9e57dacabbf1179f5e5b472ab43d33153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2361a9e57dacabbf1179f5e5b472ab43d33153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef2361a9e57dacabbf1179f5e5b472ab43d33153", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2361a9e57dacabbf1179f5e5b472ab43d33153/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d54ce1dfc67ccdbb602a3ac011cfd87dccddcab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54ce1dfc67ccdbb602a3ac011cfd87dccddcab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d54ce1dfc67ccdbb602a3ac011cfd87dccddcab2"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "b025fa7e623847506f7633366a7042c03ca402a5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2361a9e57dacabbf1179f5e5b472ab43d33153/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2361a9e57dacabbf1179f5e5b472ab43d33153/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ef2361a9e57dacabbf1179f5e5b472ab43d33153", "patch": "@@ -1,5 +1,11 @@\n 2011-12-23  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/51507\n+\t* search.c (at_function_scope_p): Also check cfun.\n+\t* pt.c (tsubst_pack_expansion): Check it instead of\n+\tcp_unevaluated_operand.\n+\t(instantiate_template_1): Use push_to_top_level.\n+\n \t* tree.c (dependent_name): OFFSET_REF and BASELINK\n \tare not dependent names.\n "}, {"sha": "20f67aa6edf0ad0774e1714c984b6513d90c4e78", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2361a9e57dacabbf1179f5e5b472ab43d33153/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2361a9e57dacabbf1179f5e5b472ab43d33153/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ef2361a9e57dacabbf1179f5e5b472ab43d33153", "patch": "@@ -9297,6 +9297,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n   int i, len = -1;\n   tree result;\n   htab_t saved_local_specializations = NULL;\n+  bool need_local_specializations = false;\n   int levels;\n \n   gcc_assert (PACK_EXPANSION_P (t));\n@@ -9330,7 +9331,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n        }\n       if (TREE_CODE (parm_pack) == PARM_DECL)\n \t{\n-\t  if (!cp_unevaluated_operand)\n+\t  if (at_function_scope_p ())\n \t    arg_pack = retrieve_local_specialization (parm_pack);\n \t  else\n \t    {\n@@ -9346,6 +9347,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \t\targ_pack = NULL_TREE;\n \t      else\n \t\targ_pack = make_fnparm_pack (arg_pack);\n+\t      need_local_specializations = true;\n \t    }\n \t}\n       else\n@@ -9476,7 +9478,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n   if (len < 0)\n     return error_mark_node;\n \n-  if (cp_unevaluated_operand)\n+  if (need_local_specializations)\n     {\n       /* We're in a late-specified return type, so create our own local\n \t specializations table; the current table is either NULL or (in the\n@@ -14524,7 +14526,6 @@ instantiate_template_1 (tree tmpl, tree orig_args, tsubst_flags_t complain)\n   tree fndecl;\n   tree gen_tmpl;\n   tree spec;\n-  HOST_WIDE_INT saved_processing_template_decl;\n \n   if (tmpl == error_mark_node)\n     return error_mark_node;\n@@ -14585,18 +14586,22 @@ instantiate_template_1 (tree tmpl, tree orig_args, tsubst_flags_t complain)\n      deferring all checks until we have the FUNCTION_DECL.  */\n   push_deferring_access_checks (dk_deferred);\n \n-  /* Although PROCESSING_TEMPLATE_DECL may be true at this point\n-     (because, for example, we have encountered a non-dependent\n-     function call in the body of a template function and must now\n-     determine which of several overloaded functions will be called),\n-     within the instantiation itself we are not processing a\n-     template.  */  \n-  saved_processing_template_decl = processing_template_decl;\n-  processing_template_decl = 0;\n+  /* Instantiation of the function happens in the context of the function\n+     template, not the context of the overload resolution we're doing.  */\n+  push_to_top_level ();\n+  if (DECL_CLASS_SCOPE_P (gen_tmpl))\n+    {\n+      tree ctx = tsubst (DECL_CONTEXT (gen_tmpl), targ_ptr,\n+\t\t\t complain, gen_tmpl);\n+      push_nested_class (ctx);\n+    }\n   /* Substitute template parameters to obtain the specialization.  */\n   fndecl = tsubst (DECL_TEMPLATE_RESULT (gen_tmpl),\n \t\t   targ_ptr, complain, gen_tmpl);\n-  processing_template_decl = saved_processing_template_decl;\n+  if (DECL_CLASS_SCOPE_P (gen_tmpl))\n+    pop_nested_class ();\n+  pop_from_top_level ();\n+\n   if (fndecl == error_mark_node)\n     return error_mark_node;\n "}, {"sha": "45fdafc37237f7e4977aea4d28451a68dd740d7e", "filename": "gcc/cp/search.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2361a9e57dacabbf1179f5e5b472ab43d33153/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2361a9e57dacabbf1179f5e5b472ab43d33153/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=ef2361a9e57dacabbf1179f5e5b472ab43d33153", "patch": "@@ -539,7 +539,11 @@ int\n at_function_scope_p (void)\n {\n   tree cs = current_scope ();\n-  return cs && TREE_CODE (cs) == FUNCTION_DECL;\n+  /* Also check cfun to make sure that we're really compiling\n+     this function (as opposed to having set current_function_decl\n+     for access checking or some such).  */\n+  return (cs && TREE_CODE (cs) == FUNCTION_DECL\n+\t  && cfun && cfun->decl == current_function_decl);\n }\n \n /* Returns true if the innermost active scope is a class scope.  */"}, {"sha": "c2ca72bfa16522f8cab4e138ddb17fdcfc75719f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2361a9e57dacabbf1179f5e5b472ab43d33153/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2361a9e57dacabbf1179f5e5b472ab43d33153/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef2361a9e57dacabbf1179f5e5b472ab43d33153", "patch": "@@ -1,3 +1,8 @@\n+2011-12-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51507\n+\t* g++.dg/cpp0x/variadic121.C: New.\n+\n 2011-12-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/vect/fast-math-pr35982.c: Fix parenthesis in target selectors."}, {"sha": "805c0065fe9270d09d24cd2ff801c2333e3b7356", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic121.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2361a9e57dacabbf1179f5e5b472ab43d33153/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic121.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2361a9e57dacabbf1179f5e5b472ab43d33153/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic121.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic121.C?ref=ef2361a9e57dacabbf1179f5e5b472ab43d33153", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/51507\n+// { dg-options -std=c++0x }\n+\n+template<typename ...>\n+struct foo { typedef void type; };\n+template<typename ...Ts>\n+auto g(Ts ...ts)->\n+  typename foo<decltype(ts)...>::type\n+{}\n+int main() {\n+  g(42);\n+}"}]}