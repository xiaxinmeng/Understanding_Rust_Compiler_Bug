{"sha": "84de2982de7e43702bcb161191179b79406ae39c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRkZTI5ODJkZTdlNDM3MDJiY2IxNjExOTExNzliNzk0MDZhZTM5Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-12-30T13:46:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-12-30T13:46:18Z"}, "message": "extensions.xml: Improve markup and note that some extensions are included in C++11.\n\n\t* doc/xml/manual/extensions.xml: Improve markup and note that some\n\textensions are included in C++11.\n\t* doc/xml/manual/concurrency_extensions.xml: Likewise.\n\nFrom-SVN: r182742", "tree": {"sha": "6dbd574d464c1d7ced92d0575694a7b0a21ae114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dbd574d464c1d7ced92d0575694a7b0a21ae114"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84de2982de7e43702bcb161191179b79406ae39c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84de2982de7e43702bcb161191179b79406ae39c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84de2982de7e43702bcb161191179b79406ae39c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84de2982de7e43702bcb161191179b79406ae39c/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f32fd5aaecb0673c9cdaf5a4f8fe6bbe1e9049a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f32fd5aaecb0673c9cdaf5a4f8fe6bbe1e9049a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f32fd5aaecb0673c9cdaf5a4f8fe6bbe1e9049a7"}], "stats": {"total": 102, "additions": 61, "deletions": 41}, "files": [{"sha": "2626e73fddfc063c65548ed464cc6a564105f296", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84de2982de7e43702bcb161191179b79406ae39c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84de2982de7e43702bcb161191179b79406ae39c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=84de2982de7e43702bcb161191179b79406ae39c", "patch": "@@ -1,3 +1,9 @@\n+2011-12-30  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* doc/xml/manual/extensions.xml: Improve markup and note that some\n+\textensions are included in C++11.\n+\t* doc/xml/manual/concurrency_extensions.xml: Likewise.\n+\n 2011-12-30  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/51711"}, {"sha": "e36d3aa99473cc2460c43abb8f4e2c0ca3f2d39c", "filename": "libstdc++-v3/doc/xml/manual/concurrency_extensions.xml", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84de2982de7e43702bcb161191179b79406ae39c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconcurrency_extensions.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84de2982de7e43702bcb161191179b79406ae39c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconcurrency_extensions.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconcurrency_extensions.xml?ref=84de2982de7e43702bcb161191179b79406ae39c", "patch": "@@ -21,7 +21,8 @@\n   <section xml:id=\"manual.ext.concurrency.design.threads\" xreflabel=\"Threads API\"><info><title>Interface to Locks and Mutexes</title></info>\n     \n \n-<para>The file &lt;ext/concurrence.h&gt; contains all the higher-level\n+<para>The file <filename class=\"headerfile\">&lt;ext/concurrence.h&gt;</filename>\n+contains all the higher-level\n constructs for playing with threads. In contrast to the atomics layer,\n the concurrence layer consists largely of types. All types are defined within <code>namespace __gnu_cxx</code>.\n </para>\n@@ -65,14 +66,14 @@ host environment and the current compilation flags.\n interface: <code>__mutex</code>, and <code>__scoped_lock</code>.\n </para>\n \n-<para>\n-</para>\n-\n <para>The scoped lock idiom is well-discussed within the C++\n community. This version takes a <code>__mutex</code> reference, and\n-locks it during construction of <code>__scoped_locke</code> and\n+locks it during construction of <code>__scoped_lock</code> and\n unlocks it during destruction. This is an efficient way of locking\n critical sections, while retaining exception-safety.\n+These types have been superseded in the ISO C++ 2011 standard by the\n+mutex and lock types defined in the header\n+<filename class=\"headerfile\">&lt;mutex&gt;</filename>.\n </para>\n   </section>\n "}, {"sha": "804cc7f0bf709e4ba277146ea7e409c96a2d2669", "filename": "libstdc++-v3/doc/xml/manual/extensions.xml", "status": "modified", "additions": 49, "deletions": 36, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84de2982de7e43702bcb161191179b79406ae39c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fextensions.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84de2982de7e43702bcb161191179b79406ae39c/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fextensions.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fextensions.xml?ref=84de2982de7e43702bcb161191179b79406ae39c", "patch": "@@ -160,7 +160,7 @@ extensions, be aware of two things:\n <para>There are\n    versions of single-bit test, set, reset, and flip member functions which\n    do no range-checking.  If we call them member functions of an instantiation\n-   of \"bitset&lt;N&gt;,\" then their names and signatures are:\n+   of <code>bitset&lt;N&gt;</code>, then their names and signatures are:\n </para>\n    <programlisting>\n    bitset&lt;N&gt;&amp;   _Unchecked_set   (size_t pos);\n@@ -173,14 +173,10 @@ extensions, be aware of two things:\n    no present plans to do so (and there doesn't seem to be any immediate\n    reason to).\n </para>\n-<para>The semantics of member function <code>operator[]</code> are not specified\n-   in the C++ standard.  A long-standing defect report calls for sensible\n-   obvious semantics, which are already implemented here:  <code>op[]</code>\n-   on a const bitset returns a bool, and for a non-const bitset returns a\n-   <code>reference</code> (a nested type).  However, this implementation does\n-   no range-checking on the index argument, which is in keeping with other\n-   containers' <code>op[]</code> requirements.  The defect report's proposed\n-   resolution calls for range-checking to be done.  We'll just wait and see...\n+<para>The member function <code>operator[]</code> on a const bitset returns\n+   a bool, and for a non-const bitset returns a <code>reference</code> (a\n+   nested type).  No range-checking is done on the index argument, in keeping\n+   with other containers' <code>operator[]</code> requirements.\n </para>\n <para>Finally, two additional searching functions have been added.  They return\n    the index of the first \"on\" bit, and the index of the first\n@@ -214,16 +210,20 @@ extensions, be aware of two things:\n      &lt;rb_tree&gt;\n    </programlisting>\n    <para>are all here;\n-      <code>&lt;hash_map&gt;</code> and <code>&lt;hash_set&gt;</code>\n+      <filename class=\"headerfile\">&lt;backwards/hash_map&gt;</filename> and\n+      <filename class=\"headerfile\">&lt;backwards/hash_set&gt;</filename>\n       are deprecated but available as backwards-compatible extensions,\n-      as discussed further below.  <code>&lt;rope&gt;</code> is the\n-      SGI specialization for large strings (\"rope,\"\n-      \"large strings,\" get it? Love that geeky humor.)\n-      <code>&lt;slist&gt;</code> is a singly-linked list, for when the\n-      doubly-linked <code>list&lt;&gt;</code> is too much space\n-      overhead, and <code>&lt;rb_tree&gt;</code> exposes the red-black\n-      tree classes used in the implementation of the standard maps and\n-      sets.\n+      as discussed further below.\n+      <filename class=\"headerfile\">&lt;ext/rope&gt;</filename> is the SGI\n+      specialization for large strings (\"rope,\" \"large strings,\" get it? Love\n+      that geeky humor.)\n+      <filename class=\"headerfile\">&lt;ext/slist&gt;</filename> (superseded in\n+      C++11 by <filename class=\"headerfile\">&lt;forward_list&gt;</filename>)\n+      is a singly-linked list, for when the doubly-linked <code>list&lt;&gt;</code>\n+      is too much space overhead, and\n+      <filename class=\"headerfile\">&lt;ext/rb_tree&gt;</filename> exposes the\n+      red-black tree classes used in the implementation of the standard maps\n+      and sets.\n    </para>\n    <para>Each of the associative containers map, multimap, set, and multiset\n       have a counterpart which uses a\n@@ -256,6 +256,13 @@ extensions, be aware of two things:\n      </para>\n    </blockquote>\n \n+   <para>\n+      The deprecated hash tables are superseded by the standard unordered\n+      associative containers defined in the ISO C++ 2011 standard in the\n+      headers <filename class=\"headerfile\">&lt;unordered_map&gt;</filename>\n+      and <filename class=\"headerfile\">&lt;unordered_set&gt;</filename>.\n+   </para>\n+\n   </section>\n </chapter>\n \n@@ -264,36 +271,37 @@ extensions, be aware of two things:\n <?dbhtml filename=\"ext_utilities.html\"?>\n \n   <para>\n-    The &lt;functional&gt; header contains many additional functors\n+    The <filename class=\"headerfile\">&lt;functional&gt;</filename> header\n+    contains many additional functors\n     and helper functions, extending section 20.3.  They are\n     implemented in the file stl_function.h:\n   </para>\n   <itemizedlist>\n   <listitem>\n-  <para><code>identity_element</code> for addition and multiplication. *\n+  <para><code>identity_element</code> for addition and multiplication.\n   </para>\n   </listitem>\n   <listitem>\n     <para>The functor <code>identity</code>, whose <code>operator()</code>\n-      returns the argument unchanged. *\n+      returns the argument unchanged.\n   </para>\n   </listitem>\n   <listitem>\n     <para>Composition functors <code>unary_function</code> and\n       <code>binary_function</code>, and their helpers <code>compose1</code>\n-      and <code>compose2</code>. *\n+      and <code>compose2</code>.\n     </para>\n   </listitem>\n   <listitem>\n-  <para><code>select1st</code> and <code>select2nd</code>, to strip pairs. *\n+  <para><code>select1st</code> and <code>select2nd</code>, to strip pairs.\n   </para>\n   </listitem>\n-  <listitem><para><code>project1st</code> and <code>project2nd</code>. * </para></listitem>\n+  <listitem><para><code>project1st</code> and <code>project2nd</code>. </para></listitem>\n   <listitem><para>A set of functors/functions which always return the same result.  They\n       are <code>constant_void_fun</code>, <code>constant_binary_fun</code>,\n       <code>constant_unary_fun</code>, <code>constant0</code>,\n-      <code>constant1</code>, and <code>constant2</code>. * </para></listitem>\n-  <listitem><para>The class <code>subtractive_rng</code>. * </para></listitem>\n+      <code>constant1</code>, and <code>constant2</code>. </para></listitem>\n+  <listitem><para>The class <code>subtractive_rng</code>. </para></listitem>\n   <listitem><para>mem_fun adaptor helpers <code>mem_fun1</code> and\n       <code>mem_fun1_ref</code> are provided for backwards compatibility. </para></listitem>\n </itemizedlist>\n@@ -320,11 +328,11 @@ you can also use\n get_temporary_buffer(5, (int*)0);\n </programlisting>\n <para>\n-  A class <code>temporary_buffer</code> is given in stl_tempbuf.h. *\n+  A class <code>temporary_buffer</code> is given in stl_tempbuf.h.\n </para>\n <para>\n   The specialized algorithms of section 20.4.4 are extended with\n-  <code>uninitialized_copy_n</code>. *\n+  <code>uninitialized_copy_n</code>.\n </para>\n \n </chapter>\n@@ -371,25 +379,30 @@ get_temporary_buffer(5, (int*)0);\n <chapter xml:id=\"manual.ext.numerics\" xreflabel=\"Numerics\"><info><title>Numerics</title></info>\n <?dbhtml filename=\"ext_numerics.html\"?>\n \n-<para>26.4, the generalized numeric operations such as accumulate, are extended\n-   with the following functions:\n+<para>26.4, the generalized numeric operations such as <code>accumulate</code>,\n+   are extended with the following functions:\n </para>\n    <programlisting>\n    power (x, n);\n-   power (x, n, moniod_operation);</programlisting>\n-<para>Returns, in FORTRAN syntax, \"x ** n\" where n&gt;=0.  In the\n-   case of n == 0, returns the identity element for the\n+   power (x, n, monoid_operation);</programlisting>\n+<para>Returns, in FORTRAN syntax, \"<code>x ** n</code>\" where\n+   <code>n &gt;= 0</code>.  In the\n+   case of <code>n == 0</code>, returns the identity element for the\n    monoid operation.  The two-argument signature uses multiplication (for\n    a true \"power\" implementation), but addition is supported as well.\n    The operation functor must be associative.\n </para>\n <para>The <code>iota</code> function wins the award for Extension With the\n-   Coolest Name.  It \"assigns sequentially increasing values to a range.\n-   That is, it assigns value to *first, value + 1 to *(first + 1) and so\n-   on.\"  Quoted from SGI documentation.\n+   Coolest Name (the name comes from Ken Iverson's APL language.)  As\n+   described in the <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.sgi.com/tech/stl/iota.html\">SGI\n+   documentation</link>, it \"assigns sequentially increasing values to a range.\n+   That is, it assigns <code>value</code> to <code>*first</code>,\n+   <code>value + 1</code> to<code> *(first + 1)</code> and so on.\"\n </para>\n    <programlisting>\n    void iota(_ForwardIter first, _ForwardIter last, _Tp value);</programlisting>\n+<para>The <code>iota</code> function is included in the ISO C++ 2011 standard.\n+</para>\n </chapter>\n \n <!-- Chapter 12 : Iterators -->"}]}