{"sha": "1b1d8f8817fdc22a84c1cee4905192f15bb2df52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIxZDhmODgxN2ZkYzIyYTg0YzFjZWU0OTA1MTkyZjE1YmIyZGY1Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-03-19T23:38:35Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-03-19T23:38:35Z"}, "message": "re PR target/14552 (compiled trivial vector intrinsic code is inefficient)\n\n        PR target/14552\n        * config/i386/mmx.md (*mov<mode>_internal_rex64\"): Adjust register\n        allocator preferences for \"y\" and \"r\" class registers.\n        (\"*mov<mode>_internal\"): Ditto.\n        (\"*movv2sf_internal_rex64\"): Ditto.\n        (\"*movv2sf_internal\"): Ditto.\n\ntestsuite/ChangeLog:\n\n        PR target/14552\n        * gcc.target/i386/pr14552.c: New test.\n\nFrom-SVN: r133354", "tree": {"sha": "6bc9c1ea888993833865ad22b0865a8630af51ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bc9c1ea888993833865ad22b0865a8630af51ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b1d8f8817fdc22a84c1cee4905192f15bb2df52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b1d8f8817fdc22a84c1cee4905192f15bb2df52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b1d8f8817fdc22a84c1cee4905192f15bb2df52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b1d8f8817fdc22a84c1cee4905192f15bb2df52/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "05e6ee933ee2acec2477fedb6b22a08ffc2431bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05e6ee933ee2acec2477fedb6b22a08ffc2431bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05e6ee933ee2acec2477fedb6b22a08ffc2431bf"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "40870539114986a9b6b8ad8c20e4634d5e3e24d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1d8f8817fdc22a84c1cee4905192f15bb2df52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1d8f8817fdc22a84c1cee4905192f15bb2df52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b1d8f8817fdc22a84c1cee4905192f15bb2df52", "patch": "@@ -1,3 +1,12 @@\n+2008-03-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/14552\n+\t* config/i386/mmx.md (*mov<mode>_internal_rex64\"): Adjust register\n+\tallocator preferences for \"y\" and \"r\" class registers.\n+\t(\"*mov<mode>_internal\"): Ditto.\n+\t(\"*movv2sf_internal_rex64\"): Ditto.\n+\t(\"*movv2sf_internal\"): Ditto.\n+\n 2008-03-19  Michael Matz  <matz@suse.de>\n \n \tPR middle-end/35616\n@@ -586,11 +595,11 @@\n \n \tPR target/35540\n \t* config/i386/i386.md (paritysi2, paritydi2): Use register_operand\n-\tconstraint for operand 1.\n-\t(paritysi2_cmp): Use register_operand constraint for operand 2.\n+\tpredicate for operand 1.\n+\t(paritysi2_cmp): Use register_operand predicate for operand 2.\n \tUse earlyclobber modifier for operand 1.  Remove support for\n \tmemory operands.\n-\t(paritydi2_cmp): Use register_operand constraint for operand 3.\n+\t(paritydi2_cmp): Use register_operand predicate for operand 3.\n \tUse earlyclobber modifier for operand 1.  Remove support for\n \tmemory operands.\n "}, {"sha": "a146231e992c0da846443d5f7d7dabd8d22f1d44", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1d8f8817fdc22a84c1cee4905192f15bb2df52/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1d8f8817fdc22a84c1cee4905192f15bb2df52/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=1b1d8f8817fdc22a84c1cee4905192f15bb2df52", "patch": "@@ -65,9 +65,9 @@\n \n (define_insn \"*mov<mode>_internal_rex64\"\n   [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\"\n-\t\t\t\t\"=rm,r,!y,!y ,m ,!y,Y2,x,x ,m,r,x\")\n+\t\t\t\t\"=rm,r,!?y,!?y ,m  ,!y,Y2,x,x ,m,r,x\")\n \t(match_operand:MMXMODEI8 1 \"vector_move_operand\"\n-\t\t\t\t\"Cr ,m,C ,!ym,!y,Y2,!y,C,xm,x,x,r\"))]\n+\t\t\t\t\"Cr ,m,C  ,!?ym,!?y,Y2,!y,C,xm,x,x,r\"))]\n   \"TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -89,9 +89,9 @@\n \n (define_insn \"*mov<mode>_internal\"\n   [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\"\n-\t\t\t\"=!y,!y ,m ,!y ,*Y2,*Y2,*Y2 ,m  ,*x,*x,*x,m ,?r ,?m\")\n+\t\t\t\"=!?y,!?y,m  ,!y ,*Y2,*Y2,*Y2 ,m  ,*x,*x,*x,m ,r  ,m\")\n \t(match_operand:MMXMODEI8 1 \"vector_move_operand\"\n-\t\t\t\"C  ,!ym,!y,*Y2,!y ,C  ,*Y2m,*Y2,C ,*x,m ,*x,irm,r\"))]\n+\t\t\t\"C   ,!ym,!?y,*Y2,!y ,C  ,*Y2m,*Y2,C ,*x,m ,*x,irm,r\"))]\n   \"TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -124,9 +124,9 @@\n \n (define_insn \"*movv2sf_internal_rex64\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t\t\t\t\"=rm,r,!y ,!y ,m ,!y,Y2,x,x,x,m,r,x\")\n+\t\t\t\t\"=rm,r ,!?y,!?y ,m ,!y,Y2,x,x,x,m,r,x\")\n         (match_operand:V2SF 1 \"vector_move_operand\"\n-\t\t\t\t\"Cr ,m ,C ,!ym,!y,Y2,!y,C,x,m,x,x,r\"))]\n+\t\t\t\t\"Cr ,m ,C  ,!?ym,!y,Y2,!y,C,x,m,x,x,r\"))]\n   \"TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -149,9 +149,9 @@\n \n (define_insn \"*movv2sf_internal\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t\t\t\"=!y,!y ,m,!y ,*Y2,*x,*x,*x,m ,?r ,?m\")\n+\t\t\t\"=!?y,!?y ,m  ,!y ,*Y2,*x,*x,*x,m ,r  ,m\")\n         (match_operand:V2SF 1 \"vector_move_operand\"\n-\t\t\t\"C ,!ym,!y,*Y2,!y ,C ,*x,m ,*x,irm,r\"))]\n+\t\t\t\"C   ,!?ym,!?y,*Y2,!y ,C ,*x,m ,*x,irm,r\"))]\n   \"TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@"}, {"sha": "d3758f9a745e48604c4e69b05035d19e5d2f9ecf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1d8f8817fdc22a84c1cee4905192f15bb2df52/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1d8f8817fdc22a84c1cee4905192f15bb2df52/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b1d8f8817fdc22a84c1cee4905192f15bb2df52", "patch": "@@ -1,3 +1,8 @@\n+2008-03-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/14552\n+\t* gcc.target/i386/pr14552.c: New test.\n+\n 2008-03-19  Michael Matz  <matz@suse.de>\n \n \tPR middle-end/35616"}, {"sha": "659257c329048e6000ac28f183d3fa3645c8a20a", "filename": "gcc/testsuite/gcc.target/i386/pr14552.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1d8f8817fdc22a84c1cee4905192f15bb2df52/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr14552.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1d8f8817fdc22a84c1cee4905192f15bb2df52/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr14552.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr14552.c?ref=1b1d8f8817fdc22a84c1cee4905192f15bb2df52", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mmmx\" } */\n+\n+typedef short mmxw  __attribute__ ((vector_size (8)));\n+typedef int   mmxdw __attribute__ ((vector_size (8)));\n+\n+mmxdw dw;\n+mmxw w;\n+\n+void test()\n+{\n+  w+=w;\n+  dw= (mmxdw)w;\n+}\n+\n+/* { dg-final { scan-assembler-not \"%mm\" } } */"}]}