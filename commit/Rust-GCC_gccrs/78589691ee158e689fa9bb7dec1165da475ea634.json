{"sha": "78589691ee158e689fa9bb7dec1165da475ea634", "node_id": "C_kwDOANBUbNoAKDc4NTg5NjkxZWUxNThlNjg5ZmE5YmI3ZGVjMTE2NWRhNDc1ZWE2MzQ", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2023-01-24T13:39:11Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2023-02-01T14:18:14Z"}, "message": "ipa: check if cache_token != NULL before hash_set::add call\n\nWe should not insert an empty value to the container.\n\n\tPR ipa/108509\n\ngcc/ChangeLog:\n\n\t* cgraphunit.cc (walk_polymorphic_call_targets): Insert\n\tony non-null values.\n\t* ipa.cc (walk_polymorphic_call_targets): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ipa/pr108509.C: New test.", "tree": {"sha": "8ed9bdcedc517346db1b2ad1a6efaf6262a02843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ed9bdcedc517346db1b2ad1a6efaf6262a02843"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78589691ee158e689fa9bb7dec1165da475ea634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78589691ee158e689fa9bb7dec1165da475ea634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78589691ee158e689fa9bb7dec1165da475ea634", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78589691ee158e689fa9bb7dec1165da475ea634/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf2cf6f3f1851054237ee7df99bdf60bf5a3e3ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf2cf6f3f1851054237ee7df99bdf60bf5a3e3ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf2cf6f3f1851054237ee7df99bdf60bf5a3e3ae"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "a972900900b71bfe48db39783f0b17a3fb2d6ec7", "filename": "gcc/cgraphunit.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78589691ee158e689fa9bb7dec1165da475ea634/gcc%2Fcgraphunit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78589691ee158e689fa9bb7dec1165da475ea634/gcc%2Fcgraphunit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.cc?ref=78589691ee158e689fa9bb7dec1165da475ea634", "patch": "@@ -1000,7 +1000,7 @@ walk_polymorphic_call_targets (hash_set<void *> *reachable_call_targets,\n     = possible_polymorphic_call_targets\n \t(edge, &final, &cache_token);\n \n-  if (!reachable_call_targets->add (cache_token))\n+  if (cache_token != NULL && !reachable_call_targets->add (cache_token))\n     {\n       if (symtab->dump_file)\n \tdump_possible_polymorphic_call_targets "}, {"sha": "5c15b60a60377649c501db3e9bd39e3fade41578", "filename": "gcc/ipa.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78589691ee158e689fa9bb7dec1165da475ea634/gcc%2Fipa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78589691ee158e689fa9bb7dec1165da475ea634/gcc%2Fipa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.cc?ref=78589691ee158e689fa9bb7dec1165da475ea634", "patch": "@@ -182,7 +182,7 @@ walk_polymorphic_call_targets (hash_set<void *> *reachable_call_targets,\n     = possible_polymorphic_call_targets\n \t(edge, &final, &cache_token);\n \n-  if (!reachable_call_targets->add (cache_token))\n+  if (cache_token != NULL && !reachable_call_targets->add (cache_token))\n     {\n       for (i = 0; i < targets.length (); i++)\n \t{"}, {"sha": "2844189bbb45f27111f77e42cba4522bbaaa34b3", "filename": "gcc/testsuite/g++.dg/ipa/pr108509.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78589691ee158e689fa9bb7dec1165da475ea634/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr108509.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78589691ee158e689fa9bb7dec1165da475ea634/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr108509.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr108509.C?ref=78589691ee158e689fa9bb7dec1165da475ea634", "patch": "@@ -0,0 +1,22 @@\n+// PR ipa/108509\n+// { dg-do compile }\n+// { dg-options \"-O1 -fdevirtualize -fno-tree-fre\" }\n+\n+struct B {\n+  virtual void deref ();\n+};\n+\n+struct RefPtr {\n+  B *p;\n+\n+  RefPtr ()\n+  {\n+    p->deref ();\n+  }\n+};\n+\n+void\n+f ()\n+{\n+  RefPtr b;\n+}"}]}