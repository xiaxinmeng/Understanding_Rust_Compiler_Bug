{"sha": "bc51ace3600b5c9b5dcad09f16858e5727866e27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM1MWFjZTM2MDBiNWM5YjVkY2FkMDlmMTY4NThlNTcyNzg2NmUyNw==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2015-06-03T15:10:44Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2015-06-03T15:10:44Z"}, "message": "c-decl.c (warn_cxx_compat_finish_struct): New parameters code, record_loc.\n\n2015-06-03  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\nc/\n        * c-decl.c (warn_cxx_compat_finish_struct): New parameters code, record_loc.\n        Warn for empty struct.\n        (finish_struct): Pass TREE_CODE(t) and loc to warn_cxx_compat_finish_struct.\n\ntestsuite/\n        * gcc.dg/Wcxx-compat-22.c: New testcase.\n        * c-c++-common/Wsizeof-pointer-memaccess1.c: Pass -Wno-c++-compat.\n        * c-c++-common/Wsizeof-pointer-memaccess2.c: Likewise.\n        * c-c++-common/pr58346-1.c: Likewise.\n        * c-c++-common/transparent-union-1.c: Likewise.\n\nFrom-SVN: r224083", "tree": {"sha": "3096135066177486fe57c67c799c10f0bcb121e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3096135066177486fe57c67c799c10f0bcb121e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc51ace3600b5c9b5dcad09f16858e5727866e27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc51ace3600b5c9b5dcad09f16858e5727866e27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc51ace3600b5c9b5dcad09f16858e5727866e27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc51ace3600b5c9b5dcad09f16858e5727866e27/comments", "author": null, "committer": null, "parents": [{"sha": "80a4fe78bf071c07a71f640bd861193b85c27138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80a4fe78bf071c07a71f640bd861193b85c27138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80a4fe78bf071c07a71f640bd861193b85c27138"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "69344bb7bb10b372283116a44ca7442d1d94e1e1", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc51ace3600b5c9b5dcad09f16858e5727866e27/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc51ace3600b5c9b5dcad09f16858e5727866e27/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=bc51ace3600b5c9b5dcad09f16858e5727866e27", "patch": "@@ -1,3 +1,9 @@\n+2015-06-03  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* c-decl.c (warn_cxx_compat_finish_struct): New parameters code, record_loc.\n+\tWarn for empty struct.\n+\t(finish_struct): Pass TREE_CODE(t) and loc to warn_cxx_compat_finish_struct.\n+\n 2015-06-02  Andres Tiraboschi  <andres.tiraboschi@tallertechnologies.com>\n \n \t* c-decl.c (start_function): Call plugin before parsing."}, {"sha": "efb978b97e1dd0226f355c465f2a100cd6904121", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc51ace3600b5c9b5dcad09f16858e5727866e27/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc51ace3600b5c9b5dcad09f16858e5727866e27/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=bc51ace3600b5c9b5dcad09f16858e5727866e27", "patch": "@@ -7525,12 +7525,23 @@ detect_field_duplicates (tree fieldlist)\n /* Finish up struct info used by -Wc++-compat.  */\n \n static void\n-warn_cxx_compat_finish_struct (tree fieldlist)\n+warn_cxx_compat_finish_struct (tree fieldlist, enum tree_code code,\n+\t\t\t       location_t record_loc)\n {\n   unsigned int ix;\n   tree x;\n   struct c_binding *b;\n \n+  if (fieldlist == NULL_TREE)\n+    {\n+      if (code == RECORD_TYPE)\n+\twarning_at (record_loc, OPT_Wc___compat,\n+\t\t    \"empty struct has size 0 in C, size 1 in C++\");\n+      else\n+\twarning_at (record_loc, OPT_Wc___compat,\n+\t\t    \"empty union has size 0 in C, size 1 in C++\");\n+    }\n+\n   /* Set the C_TYPE_DEFINED_IN_STRUCT flag for each type defined in\n      the current struct.  We do this now at the end of the struct\n      because the flag is used to issue visibility warnings, and we\n@@ -7863,7 +7874,7 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n \t\t\t  DECL_EXPR, build_decl (loc, TYPE_DECL, NULL, t)));\n \n   if (warn_cxx_compat)\n-    warn_cxx_compat_finish_struct (fieldlist);\n+    warn_cxx_compat_finish_struct (fieldlist, TREE_CODE (t), loc);\n \n   struct_parse_info->struct_types.release ();\n   struct_parse_info->fields.release ();"}, {"sha": "efd859b8ef55b4e072b3eaae3e2140823b319779", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc51ace3600b5c9b5dcad09f16858e5727866e27/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc51ace3600b5c9b5dcad09f16858e5727866e27/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc51ace3600b5c9b5dcad09f16858e5727866e27", "patch": "@@ -1,3 +1,11 @@\n+2015-06-03  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* gcc.dg/Wcxx-compat-22.c: New testcase.\n+\t* c-c++-common/Wsizeof-pointer-memaccess1.c: Pass -Wno-c++-compat.\n+\t* c-c++-common/Wsizeof-pointer-memaccess2.c: Likewise.\n+\t* c-c++-common/pr58346-1.c: Likewise.\n+\t* c-c++-common/transparent-union-1.c: Likewise.\n+\n 2015-06-02  Andres Tiraboschi  <andres.tiraboschi@tallertechnologies.com>\n \n \t* g++.dg/plugin/plugin.exp: Add def-plugin-test.C."}, {"sha": "27c5da426bdc666da3d67bf735c27f6e4231136c", "filename": "gcc/testsuite/c-c++-common/Wsizeof-pointer-memaccess1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc51ace3600b5c9b5dcad09f16858e5727866e27/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-memaccess1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc51ace3600b5c9b5dcad09f16858e5727866e27/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-memaccess1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-memaccess1.c?ref=bc51ace3600b5c9b5dcad09f16858e5727866e27", "patch": "@@ -1,6 +1,7 @@\n /* Test -Wsizeof-pointer-memaccess warnings.  */\n /* { dg-do compile } */\n /* { dg-options \"-Wall -Wno-sizeof-array-argument\" } */\n+/* { dg-options \"-Wall -Wno-sizeof-array-argument -Wno-c++-compat\" { target c } } */\n \n typedef __SIZE_TYPE__ size_t;\n #ifdef __cplusplus"}, {"sha": "e067d7d44e90f75fdf41e8d6895dd0315aad4bea", "filename": "gcc/testsuite/c-c++-common/Wsizeof-pointer-memaccess2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc51ace3600b5c9b5dcad09f16858e5727866e27/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-memaccess2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc51ace3600b5c9b5dcad09f16858e5727866e27/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-memaccess2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWsizeof-pointer-memaccess2.c?ref=bc51ace3600b5c9b5dcad09f16858e5727866e27", "patch": "@@ -1,6 +1,7 @@\n /* Test -Wsizeof-pointer-memaccess warnings.  */\n /* { dg-do compile } */\n /* { dg-options \"-Wall -O2 -Wno-sizeof-array-argument\" } */\n+/* { dg-options \"-Wall -O2 -Wno-sizeof-array-argument -Wno-c++-compat\" {target c} } */\n \n #define bos(ptr) __builtin_object_size (ptr, 1)\n #define bos0(ptr) __builtin_object_size (ptr, 0)"}, {"sha": "70a16d12d97e86253c987747e3dd7e5045e85361", "filename": "gcc/testsuite/c-c++-common/pr58346-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc51ace3600b5c9b5dcad09f16858e5727866e27/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr58346-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc51ace3600b5c9b5dcad09f16858e5727866e27/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr58346-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr58346-1.c?ref=bc51ace3600b5c9b5dcad09f16858e5727866e27", "patch": "@@ -1,5 +1,6 @@\n /* PR c/58346 */\n /* { dg-do compile } */\n+/* { dg-options \"-Wno-c++-compat\" { target c } } */\n \n struct U {\n #ifdef __cplusplus"}, {"sha": "91f2642fdbc8930efb300cbc08339f2cd31f3d64", "filename": "gcc/testsuite/c-c++-common/transparent-union-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc51ace3600b5c9b5dcad09f16858e5727866e27/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftransparent-union-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc51ace3600b5c9b5dcad09f16858e5727866e27/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftransparent-union-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftransparent-union-1.c?ref=bc51ace3600b5c9b5dcad09f16858e5727866e27", "patch": "@@ -1,4 +1,5 @@\n /* PR c++/51228 */\n+/* { dg-options \"-Wno-c++-compat\" { target c } } */\n \n typedef union {} U __attribute__((transparent_union)); /* { dg-warning \"ignored\" } */\n "}, {"sha": "60b05ca93f281e1abea1488523def90d306c1907", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-22.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc51ace3600b5c9b5dcad09f16858e5727866e27/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc51ace3600b5c9b5dcad09f16858e5727866e27/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-22.c?ref=bc51ace3600b5c9b5dcad09f16858e5727866e27", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wc++-compat\" } */\n+struct A {}; /* { dg-warning \"empty struct has size 0 in C\" } */\n+union B {}; /* { dg-warning \"empty union has size 0 in C\" } */\n+struct C { struct D {}; int x; }; /* { dg-warning \"empty struct has size 0 in C|declaration does not declare anything\" } */\n+struct E { union F {}; int x; }; /* { dg-warning \"empty union has size 0 in C|declaration does not declare anything\" } */\n+union G { union H {}; int x; }; /* { dg-warning \"empty union has size 0 in C|declaration does not declare anything\" } */\n+union I { struct J {}; int x; }; /* { dg-warning \"empty struct has size 0 in C|declaration does not declare anything\" } */"}]}