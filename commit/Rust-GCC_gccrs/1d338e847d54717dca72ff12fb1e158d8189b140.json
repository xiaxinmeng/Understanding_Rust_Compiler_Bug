{"sha": "1d338e847d54717dca72ff12fb1e158d8189b140", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQzMzhlODQ3ZDU0NzE3ZGNhNzJmZjEyZmIxZTE1OGQ4MTg5YjE0MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-04-29T06:12:47Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-04-29T06:12:47Z"}, "message": "i386.md (Load+RegOp to Mov+MemOp peephole2): Use SWI mode iterator.\n\n\t* config/i386/i386.md (Load+RegOp to Mov+MemOp peephole2):\n\tUse SWI mode iterator.  Use general_reg_operand predicate.\n\t(Load+RegOp to Mov+MemOp peephole2 with vector regs): Split\n\tpeephole to MMX and SSE part.  Use mmx_reg_operand and sse_reg_operand\n\tpredicates.\n\nFrom-SVN: r235620", "tree": {"sha": "7325c77a6baf0a6e7fb8f819a8afc095d8b4afb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7325c77a6baf0a6e7fb8f819a8afc095d8b4afb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d338e847d54717dca72ff12fb1e158d8189b140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d338e847d54717dca72ff12fb1e158d8189b140", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d338e847d54717dca72ff12fb1e158d8189b140", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d338e847d54717dca72ff12fb1e158d8189b140/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "541703997fddd931a167caba71b1c34802179aa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541703997fddd931a167caba71b1c34802179aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/541703997fddd931a167caba71b1c34802179aa8"}], "stats": {"total": 62, "additions": 39, "deletions": 23}, "files": [{"sha": "984a7032794ada68a45a48d48511fe7c055df3b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d338e847d54717dca72ff12fb1e158d8189b140/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d338e847d54717dca72ff12fb1e158d8189b140/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d338e847d54717dca72ff12fb1e158d8189b140", "patch": "@@ -1,3 +1,11 @@\n+2016-04-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (Load+RegOp to Mov+MemOp peephole2):\n+\tUse SWI mode iterator.  Use general_reg_operand predicate.\n+\t(Load+RegOp to Mov+MemOp peephole2 with vector regs): Split\n+\tpeephole to MMX and SSE part.  Use mmx_reg_operand and sse_reg_operand\n+\tpredicates.\n+\n 2016-04-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/70843"}, {"sha": "aef6369f28e099579aecb41cf853138dc2a5319c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d338e847d54717dca72ff12fb1e158d8189b140/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d338e847d54717dca72ff12fb1e158d8189b140/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1d338e847d54717dca72ff12fb1e158d8189b140", "patch": "@@ -17905,41 +17905,49 @@\n \t\t   (match_op_dup 3 [(match_dup 2) (match_dup 0)]))\n \t      (clobber (reg:CC FLAGS_REG))])])\n \n-;; Prefer Load+RegOp to Mov+MemOp.  Watch out for cases when the memory address\n-;; refers to the destination of the load!\n+;; Prefer Load+RegOp to Mov+MemOp.  Watch out for cases when\n+;; the memory address refers to the destination of the load!\n \n (define_peephole2\n-  [(set (match_operand:SI 0 \"register_operand\")\n-        (match_operand:SI 1 \"register_operand\"))\n+  [(set (match_operand:SWI 0 \"general_reg_operand\")\n+\t(match_operand:SWI 1 \"general_reg_operand\"))\n    (parallel [(set (match_dup 0)\n-                   (match_operator:SI 3 \"commutative_operator\"\n-                     [(match_dup 0)\n-                      (match_operand:SI 2 \"memory_operand\")]))\n-              (clobber (reg:CC FLAGS_REG))])]\n+\t\t   (match_operator:SWI 3 \"commutative_operator\"\n+\t\t     [(match_dup 0)\n+\t\t      (match_operand:SWI 2 \"memory_operand\")]))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n   \"REGNO (operands[0]) != REGNO (operands[1])\n-   && GENERAL_REGNO_P (REGNO (operands[0]))\n-   && GENERAL_REGNO_P (REGNO (operands[1]))\"\n+   && (<MODE>mode != QImode\n+       || any_QIreg_operand (operands[1], QImode))\"\n   [(set (match_dup 0) (match_dup 4))\n    (parallel [(set (match_dup 0)\n-                   (match_op_dup 3 [(match_dup 0) (match_dup 1)]))\n-              (clobber (reg:CC FLAGS_REG))])]\n+\t\t   (match_op_dup 3 [(match_dup 0) (match_dup 1)]))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n   \"operands[4] = replace_rtx (operands[2], operands[0], operands[1], true);\")\n \n (define_peephole2\n-  [(set (match_operand 0 \"register_operand\")\n-        (match_operand 1 \"register_operand\"))\n+  [(set (match_operand 0 \"mmx_reg_operand\")\n+\t(match_operand 1 \"mmx_reg_operand\"))\n    (set (match_dup 0)\n-                   (match_operator 3 \"commutative_operator\"\n-                     [(match_dup 0)\n-                      (match_operand 2 \"memory_operand\")]))]\n-  \"REGNO (operands[0]) != REGNO (operands[1])\n-   && ((MMX_REGNO_P (REGNO (operands[0]))\n-        && MMX_REGNO_P (REGNO (operands[1]))) \n-       || (SSE_REGNO_P (REGNO (operands[0]))\n-           && SSE_REGNO_P (REGNO (operands[1]))))\"\n+\t(match_operator 3 \"commutative_operator\"\n+\t  [(match_dup 0)\n+\t   (match_operand 2 \"memory_operand\")]))]\n+  \"REGNO (operands[0]) != REGNO (operands[1])\"\n+  [(set (match_dup 0) (match_dup 2))\n+   (set (match_dup 0)\n+\t(match_op_dup 3 [(match_dup 0) (match_dup 1)]))])\n+\n+(define_peephole2\n+  [(set (match_operand 0 \"sse_reg_operand\")\n+\t(match_operand 1 \"sse_reg_operand\"))\n+   (set (match_dup 0)\n+\t(match_operator 3 \"commutative_operator\"\n+\t  [(match_dup 0)\n+\t   (match_operand 2 \"memory_operand\")]))]\n+  \"REGNO (operands[0]) != REGNO (operands[1])\"\n   [(set (match_dup 0) (match_dup 2))\n    (set (match_dup 0)\n-        (match_op_dup 3 [(match_dup 0) (match_dup 1)]))])\n+\t(match_op_dup 3 [(match_dup 0) (match_dup 1)]))])\n \n ; Don't do logical operations with memory outputs\n ;"}]}