{"sha": "1a3920654f92b83a206d62f4eddcf1f5c28a91de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEzOTIwNjU0ZjkyYjgzYTIwNmQ2MmY0ZWRkY2YxZjVjMjhhOTFkZQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-08-06T19:46:29Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-08-06T19:46:29Z"}, "message": "re PR fortran/42546 (ALLOCATED statement typo in the docs and for scalar variables)\n\n2019-08-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/42546\n\t* check.c(gfc_check_allocated): Add comment pointing to ...\n\t* intrinsic.c(sort_actual): ... the checking done here.\n \n2019-08-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/42546\n\t* gfortran.dg/allocated_1.f90: New test.\n\t* gfortran.dg/allocated_2.f90: Ditto.\n\nFrom-SVN: r274147", "tree": {"sha": "5a71336fde8be9945c021f6e582690bee6cf0ebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a71336fde8be9945c021f6e582690bee6cf0ebd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a3920654f92b83a206d62f4eddcf1f5c28a91de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a3920654f92b83a206d62f4eddcf1f5c28a91de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a3920654f92b83a206d62f4eddcf1f5c28a91de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a3920654f92b83a206d62f4eddcf1f5c28a91de/comments", "author": null, "committer": null, "parents": [{"sha": "ffc500dd41fd49db8e5ec5022389b664a1a04e6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffc500dd41fd49db8e5ec5022389b664a1a04e6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffc500dd41fd49db8e5ec5022389b664a1a04e6d"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "b88437aa96d0980c3efc040f55b663d800581c81", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a3920654f92b83a206d62f4eddcf1f5c28a91de/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a3920654f92b83a206d62f4eddcf1f5c28a91de/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1a3920654f92b83a206d62f4eddcf1f5c28a91de", "patch": "@@ -1,3 +1,9 @@\n+2019-08-06  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/42546\n+\t* check.c(gfc_check_allocated): Add comment pointing to ...\n+ \t* intrinsic.c(sort_actual): ... the checking done here.\n+ \n 2019-08-05  Steven g. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/91372"}, {"sha": "370a3c819f9bf38201daa3ff08b9dc8425567fa6", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a3920654f92b83a206d62f4eddcf1f5c28a91de/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a3920654f92b83a206d62f4eddcf1f5c28a91de/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=1a3920654f92b83a206d62f4eddcf1f5c28a91de", "patch": "@@ -1340,6 +1340,10 @@ gfc_check_all_any (gfc_expr *mask, gfc_expr *dim)\n }\n \n \n+/* Limited checking for ALLOCATED intrinsic.  Additional checking\n+   is performed in intrinsic.c(sort_actual), because ALLOCATED\n+   has two mutually exclusive non-optional arguments.  */\n+\n bool\n gfc_check_allocated (gfc_expr *array)\n {"}, {"sha": "d0f7c10a4380a9dbc6729a7806713c3447d6f52b", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a3920654f92b83a206d62f4eddcf1f5c28a91de/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a3920654f92b83a206d62f4eddcf1f5c28a91de/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=1a3920654f92b83a206d62f4eddcf1f5c28a91de", "patch": "@@ -4180,6 +4180,40 @@ sort_actual (const char *name, gfc_actual_arglist **ap,\n   if (f == NULL && a == NULL)\t/* No arguments */\n     return true;\n \n+  /* ALLOCATED has two mutually exclusive keywords, but only one\n+     can be present at time and neither is optional. */\n+  if (strcmp (name, \"allocated\") == 0 && a->name)\n+    {\n+      if (strcmp (a->name, \"scalar\") == 0)\n+\t{\n+          if (a->next)\n+\t    goto whoops;\n+\t  if (a->expr->rank != 0)\n+\t    {\n+\t      gfc_error (\"Scalar entity required at %L\", &a->expr->where);\n+\t      return false;\n+\t    }\n+          return true;\n+\t}\n+      else if (strcmp (a->name, \"array\") == 0)\n+\t{\n+          if (a->next)\n+\t    goto whoops;\n+\t  if (a->expr->rank == 0)\n+\t    {\n+\t      gfc_error (\"Array entity required at %L\", &a->expr->where);\n+\t      return false;\n+\t    }\n+          return true;\n+\t}\n+      else\n+\t{\n+\t  gfc_error (\"Invalid keyword %qs in %qs intrinsic function at %L\",\n+\t\t     a->name, name, &a->expr->where);\n+\t  return false;\n+\t}\n+    }\n+\n   for (;;)\n     {\t\t/* Put the nonkeyword arguments in a 1:1 correspondence */\n       if (f == NULL)\n@@ -4199,6 +4233,7 @@ sort_actual (const char *name, gfc_actual_arglist **ap,\n   if (a == NULL)\n     goto do_sort;\n \n+whoops:\n   gfc_error (\"Too many arguments in call to %qs at %L\", name, where);\n   return false;\n "}, {"sha": "af5349ab252d15141aff820cec341ec308236c5b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a3920654f92b83a206d62f4eddcf1f5c28a91de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a3920654f92b83a206d62f4eddcf1f5c28a91de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a3920654f92b83a206d62f4eddcf1f5c28a91de", "patch": "@@ -1,3 +1,9 @@\n+2019-08-06  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/42546\n+\t* gfortran.dg/allocated_1.f90: New test.\n+\t* gfortran.dg/allocated_2.f90: Ditto.\n+\n 2019-08-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.target/i386/avx512vp2intersect-2intersect-1b.c (AVX512F):"}, {"sha": "43260c24336892f84762a5c8b8cf23f59d47ea6b", "filename": "gcc/testsuite/gfortran.dg/allocated_1.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a3920654f92b83a206d62f4eddcf1f5c28a91de/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocated_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a3920654f92b83a206d62f4eddcf1f5c28a91de/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocated_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocated_1.f90?ref=1a3920654f92b83a206d62f4eddcf1f5c28a91de", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+program foo\n+\n+   implicit none\n+\n+   integer, allocatable :: x\n+   integer, allocatable :: a(:)\n+\n+   logical a1, a2\n+\n+   a1 = allocated(scalar=x)\n+   if (a1 .neqv. .false.) stop 1\n+   a2 = allocated(array=a)\n+   if (a2 .neqv. .false.) stop 2\n+\n+   allocate(x)\n+   allocate(a(2))\n+\n+   a1 = allocated(scalar=x)\n+   if (a1 .neqv. .true.) stop 3\n+   a2 = allocated(array=a)\n+   if (a2 .neqv. .true.) stop 4\n+\n+end program foo"}, {"sha": "0ea186a4d13581dbb6f9d87bb7766480d2528e17", "filename": "gcc/testsuite/gfortran.dg/allocated_2.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a3920654f92b83a206d62f4eddcf1f5c28a91de/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocated_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a3920654f92b83a206d62f4eddcf1f5c28a91de/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocated_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocated_2.f90?ref=1a3920654f92b83a206d62f4eddcf1f5c28a91de", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+program foo\n+\n+   implicit none\n+\n+   integer, allocatable :: x\n+   integer, allocatable :: a(:)\n+\n+   logical a1, a2\n+\n+   a1 = allocated(scalar=a)   ! { dg-error \"Scalar entity required\" }\n+   a2 = allocated(array=x)    ! { dg-error \"Array entity required\" }\n+   a1 = allocated(scalar=x, array=a)   ! { dg-error \"Too many arguments\" }\n+   a1 = allocated(array=a, scalar=x)   ! { dg-error \"Too many arguments\" }\n+\n+end program foo"}]}