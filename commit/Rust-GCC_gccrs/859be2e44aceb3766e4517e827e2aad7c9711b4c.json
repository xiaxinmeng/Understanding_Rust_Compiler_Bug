{"sha": "859be2e44aceb3766e4517e827e2aad7c9711b4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU5YmUyZTQ0YWNlYjM3NjZlNDUxN2U4MjdlMmFhZDdjOTcxMWI0Yw==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2021-01-08T01:50:10Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2021-01-09T15:46:02Z"}, "message": "RTL: Update `const_double_zero' handling for mode and callable insns\n\nHandle machine mode specification with `const_double_zero' and handle\nthe rtx with callable code produced from named insns.  Complementing\ncommit 20ab43b5cad6 (\"RTL: Add `const_double_zero' syntactic rtx\") and\nremoving a commit c60d0736dff7 (\"PDP11: Use `const_double_zero' to\nexpress double zero constant\") build regression observed with the\n`pdp11-aout' target:\n\ngenemit: Internal error: abort in gen_exp, at genemit.c:202\nmake[2]: *** [Makefile:2427: s-emit] Error 1\n\nwhere a:\n\n(const_double 0 [0] 0 [0] 0 [0] 0 [0])\n\nrtx coming from:\n\n(parallel [\n        (set (reg:CC 16)\n            (compare:CC (abs:DF (match_operand:DF 1 (\"general_operand\") (\"0,0\")))\n                (const_double 0 [0] 0 [0] 0 [0] 0 [0])))\n        (set (match_operand:DF 0 (\"nonimmediate_operand\") (\"=fR,Q\"))\n            (abs:DF (match_dup 1)))\n    ])\n\nand ultimately `(const_double_zero)' referred in a named RTL insn cannot\nbe interpreted.  Handle the rtx then by supplying the constant 0 double\noperand requested, resulting in the following update to insn-emit.c code\nproduced for the `pdp11-aout' target, relative to before the triggering\ncommit:\n\n@@ -1514,7 +1514,7 @@ gen_absdf2_cc (rtx operand0 ATTRIBUTE_UN\n \tgen_rtx_COMPARE (CCmode,\n \tgen_rtx_ABS (DFmode,\n \toperand1),\n-\tconst0_rtx)),\n+\tCONST_DOUBLE_ATOF (\"0\", VOIDmode))),\n \t\tgen_rtx_SET (operand0,\n \tgen_rtx_ABS (DFmode,\n \tcopy_rtx (operand1)))));\n@@ -1555,7 +1555,7 @@ gen_negdf2_cc (rtx operand0 ATTRIBUTE_UN\n \tgen_rtx_COMPARE (CCmode,\n \tgen_rtx_NEG (DFmode,\n \toperand1),\n-\tconst0_rtx)),\n+\tCONST_DOUBLE_ATOF (\"0\", VOIDmode))),\n \t\tgen_rtx_SET (operand0,\n \tgen_rtx_NEG (DFmode,\n \tcopy_rtx (operand1)))));\n@@ -1790,7 +1790,7 @@ gen_muldf3_cc (rtx operand0 ATTRIBUTE_UN\n \tgen_rtx_MULT (DFmode,\n \toperand1,\n \toperand2),\n-\tconst0_rtx)),\n+\tCONST_DOUBLE_ATOF (\"0\", VOIDmode))),\n \t\tgen_rtx_SET (operand0,\n \tgen_rtx_MULT (DFmode,\n \tcopy_rtx (operand1),\n@@ -1942,7 +1942,7 @@ gen_divdf3_cc (rtx operand0 ATTRIBUTE_UN\n \tgen_rtx_DIV (DFmode,\n \toperand1,\n \toperand2),\n-\tconst0_rtx)),\n+\tCONST_DOUBLE_ATOF (\"0\", VOIDmode))),\n \t\tgen_rtx_SET (operand0,\n \tgen_rtx_DIV (DFmode,\n \tcopy_rtx (operand1),\n\nThis does not (yet) remove VOIDmode CONST_DOUBLE use, as it is up to\nindividual machine descriptions to choose.\n\n\tgcc/\n\t* genemit.c (gen_exp) <CONST_DOUBLE>: Handle `const_double_zero'\n\trtx.\n\t* read-rtl.c (rtx_reader::read_rtx_code): Handle machine mode\n\twith `const_double_zero'.\n\t* doc/rtl.texi (Constant Expression Types): Document it.", "tree": {"sha": "0000d327625f9c5679ea62be07ad2c1c49d52538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0000d327625f9c5679ea62be07ad2c1c49d52538"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/859be2e44aceb3766e4517e827e2aad7c9711b4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859be2e44aceb3766e4517e827e2aad7c9711b4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/859be2e44aceb3766e4517e827e2aad7c9711b4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859be2e44aceb3766e4517e827e2aad7c9711b4c/comments", "author": null, "committer": null, "parents": [{"sha": "991656092f78eeab2a48fdbacf4e1f08567badaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991656092f78eeab2a48fdbacf4e1f08567badaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991656092f78eeab2a48fdbacf4e1f08567badaf"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "edbc60fdfba3afb2a77b3bc4369988eef0efebda", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859be2e44aceb3766e4517e827e2aad7c9711b4c/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859be2e44aceb3766e4517e827e2aad7c9711b4c/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=859be2e44aceb3766e4517e827e2aad7c9711b4c", "patch": "@@ -1719,13 +1719,13 @@ of code @code{const_double} and therefore a syntactic alias has been\n provided:\n \n @smallexample\n-(const_double_zero)\n+(const_double_zero:@var{m})\n @end smallexample\n \n standing for:\n \n @smallexample\n-(const_double 0 0 @dots{})\n+(const_double:@var{m} 0 0 @dots{})\n @end smallexample\n \n for matching the floating-point value zero, possibly the only useful one."}, {"sha": "89d9e990b735860d40731acc4ad935644e5b47c5", "filename": "gcc/genemit.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859be2e44aceb3766e4517e827e2aad7c9711b4c/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859be2e44aceb3766e4517e827e2aad7c9711b4c/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=859be2e44aceb3766e4517e827e2aad7c9711b4c", "patch": "@@ -195,6 +195,14 @@ gen_exp (rtx x, enum rtx_code subroutine_type, char *used, md_rtx_info *info)\n       return;\n \n     case CONST_DOUBLE:\n+      /* Handle `const_double_zero' rtx.  */\n+      if (CONST_DOUBLE_REAL_VALUE (x)->cl == rvc_zero)\n+\t{\n+\t  printf (\"CONST_DOUBLE_ATOF (\\\"0\\\", %smode)\",\n+\t\t  GET_MODE_NAME (GET_MODE (x)));\n+\t  return;\n+\t}\n+      /* Fall through.  */\n     case CONST_FIXED:\n     case CONST_WIDE_INT:\n       /* These shouldn't be written in MD files.  Instead, the appropriate"}, {"sha": "925402877ecd41d9a7df1dd9557abce0f06703e4", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859be2e44aceb3766e4517e827e2aad7c9711b4c/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859be2e44aceb3766e4517e827e2aad7c9711b4c/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=859be2e44aceb3766e4517e827e2aad7c9711b4c", "patch": "@@ -1658,6 +1658,15 @@ rtx_reader::read_rtx_code (const char *code_name)\n       return_rtx = rtx_alloc (code);\n       memset (return_rtx, 0, RTX_CODE_SIZE (code));\n       PUT_CODE (return_rtx, code);\n+      c = read_skip_spaces ();\n+      if (c == ':')\n+\t{\n+\t  file_location loc = read_name (&name);\n+\t  record_potential_iterator_use (&modes, loc, return_rtx, 0,\n+\t\t\t\t\t name.string);\n+\t}\n+      else\n+\tunread_char (c);\n       return return_rtx;\n     }\n "}]}