{"sha": "a6abfd78fe2571bb025268983633ac1978a1d3c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZhYmZkNzhmZTI1NzFiYjAyNTI2ODk4MzYzM2FjMTk3OGExZDNjMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T14:53:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T14:53:55Z"}, "message": "[multiple changes]\n\n2014-02-25  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.adb, sem_ch6.adb, par-ch3.adb: Minor reformatting.\n\n2014-02-25  Bob Duff  <duff@adacore.com>\n\n\t* s-tassta.adb (Finalize_Global_Tasks): Limit the number of loop\n\titerations while waiting for independent tasks to terminate;\n\tif an independent task does not terminate, we do not want to\n\thang here. In that case, the thread will be terminated when the\n\tprocess exits.\n\t* s-taprop-linux.adb (Abort_Task): Fix Assert to allow for ESRCH.\n\n2014-02-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Check_SPARK_Aspect_For_ASIS): New subprogram,\n\tused to perform pre-analysis of the expression for SPARK\n\taspects that have a non-standard syntax, such as GLobal and\n\tInitializes. The procedure applies to the original expression\n\tin an aspect specification, prior to the analysis of the\n\tcorresponding pragma, in order to provide semantic information\n\tfor ASIS navigation purposes.\n\t(Analyze_Global_In_Decl_List, Analyze_Initializes_In_Decl_Part):\n\tCall new subprogram.\n\nFrom-SVN: r208127", "tree": {"sha": "983cca983a4ca093d869c629f61de58f41015db2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/983cca983a4ca093d869c629f61de58f41015db2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6abfd78fe2571bb025268983633ac1978a1d3c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6abfd78fe2571bb025268983633ac1978a1d3c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6abfd78fe2571bb025268983633ac1978a1d3c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6abfd78fe2571bb025268983633ac1978a1d3c3/comments", "author": null, "committer": null, "parents": [{"sha": "64e86d00889c7694172fc130726bd3123c19564c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64e86d00889c7694172fc130726bd3123c19564c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64e86d00889c7694172fc130726bd3123c19564c"}], "stats": {"total": 116, "additions": 97, "deletions": 19}, "files": [{"sha": "a3df028b49d29a0766ab60340e4add1472040e17", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6abfd78fe2571bb025268983633ac1978a1d3c3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6abfd78fe2571bb025268983633ac1978a1d3c3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a6abfd78fe2571bb025268983633ac1978a1d3c3", "patch": "@@ -1,3 +1,28 @@\n+2014-02-25  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_attr.adb, sem_ch6.adb, par-ch3.adb: Minor reformatting.\n+\n+2014-02-25  Bob Duff  <duff@adacore.com>\n+\n+\t* s-tassta.adb (Finalize_Global_Tasks): Limit the number of loop\n+\titerations while waiting for independent tasks to terminate;\n+\tif an independent task does not terminate, we do not want to\n+\thang here. In that case, the thread will be terminated when the\n+\tprocess exits.\n+\t* s-taprop-linux.adb (Abort_Task): Fix Assert to allow for ESRCH.\n+\n+2014-02-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Check_SPARK_Aspect_For_ASIS): New subprogram,\n+\tused to perform pre-analysis of the expression for SPARK\n+\taspects that have a non-standard syntax, such as GLobal and\n+\tInitializes. The procedure applies to the original expression\n+\tin an aspect specification, prior to the analysis of the\n+\tcorresponding pragma, in order to provide semantic information\n+\tfor ASIS navigation purposes.\n+\t(Analyze_Global_In_Decl_List, Analyze_Initializes_In_Decl_Part):\n+\tCall new subprogram.\n+\n 2014-02-25  Yannick Moy  <moy@adacore.com>\n \n \t* sem_prag.adb: Remove obsolete reference to SPARK RM in error message."}, {"sha": "e9524fa4de79a62ba40efa95b7a708a26232408c", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6abfd78fe2571bb025268983633ac1978a1d3c3/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6abfd78fe2571bb025268983633ac1978a1d3c3/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=a6abfd78fe2571bb025268983633ac1978a1d3c3", "patch": "@@ -4620,18 +4620,17 @@ package body Ch3 is\n          --  Test for body scanned, not acceptable as basic decl item\n \n          if Kind = N_Subprogram_Body or else\n-            Kind = N_Package_Body or else\n-            Kind = N_Task_Body or else\n+            Kind = N_Package_Body    or else\n+            Kind = N_Task_Body       or else\n             Kind = N_Protected_Body\n          then\n             Error_Msg (\"proper body not allowed in package spec\", Sloc (Decl));\n \n             --  Complete declaration of mangled subprogram body, for better\n             --  recovery if analysis is attempted.\n \n-            if Nkind_In\n-              (Decl, N_Subprogram_Body, N_Package_Body, N_Task_Body)\n-                and then No (Handled_Statement_Sequence (Decl))\n+            if Nkind_In (Decl, N_Subprogram_Body, N_Package_Body, N_Task_Body)\n+              and then No (Handled_Statement_Sequence (Decl))\n             then\n                Set_Handled_Statement_Sequence (Decl,\n                  Make_Handled_Sequence_Of_Statements (Sloc (Decl),"}, {"sha": "515850a68389c205811eadd13f9366969f2118dc", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6abfd78fe2571bb025268983633ac1978a1d3c3/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6abfd78fe2571bb025268983633ac1978a1d3c3/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=a6abfd78fe2571bb025268983633ac1978a1d3c3", "patch": "@@ -1078,13 +1078,16 @@ package body System.Task_Primitives.Operations is\n \n    procedure Abort_Task (T : Task_Id) is\n       Result : Interfaces.C.int;\n+      ESRCH  : constant := 3; -- No such process\n+      --  It can happen that T has already vanished, in which case pthread_kill\n+      --  returns ESRCH, so we don't consider that to be an error.\n    begin\n       if Abort_Handler_Installed then\n          Result :=\n            pthread_kill\n              (T.Common.LL.Thread,\n               Signal (System.Interrupt_Management.Abort_Task_Interrupt));\n-         pragma Assert (Result = 0);\n+         pragma Assert (Result = 0 or else Result = ESRCH);\n       end if;\n    end Abort_Task;\n "}, {"sha": "4eff8eeaa76c737bd30ff06c5487dacf6d24e821", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6abfd78fe2571bb025268983633ac1978a1d3c3/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6abfd78fe2571bb025268983633ac1978a1d3c3/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=a6abfd78fe2571bb025268983633ac1978a1d3c3", "patch": "@@ -869,15 +869,18 @@ package body System.Tasking.Stages is\n \n       Write_Lock (Self_ID);\n \n-      --  If the Abort_Task signal is set to system, it means that we may not\n-      --  have been able to abort all independent tasks (in particular\n-      --  Server_Task may be blocked, waiting for a signal), in which case,\n-      --  do not wait for Independent_Task_Count to go down to 0.\n-\n-      if State\n-          (System.Interrupt_Management.Abort_Task_Interrupt) /= Default\n+      --  If the Abort_Task signal is set to system, it means that we may\n+      --  not have been able to abort all independent tasks (in particular\n+      --  Server_Task may be blocked, waiting for a signal), in which case, do\n+      --  not wait for Independent_Task_Count to go down to 0. We arbitrarily\n+      --  limit the number of loop iterations; if an independent task does not\n+      --  terminate, we do not want to hang here. In that case, the thread will\n+      --  be terminated when the process exits.\n+\n+      if State (System.Interrupt_Management.Abort_Task_Interrupt) /=\n+        Default\n       then\n-         loop\n+         for J in 1 .. 10 loop\n             exit when Utilities.Independent_Task_Count = 0;\n \n             --  We used to yield here, but this did not take into account low"}, {"sha": "f6e63aaa9bffc7d52621bf3913cd6c28efc0816a", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6abfd78fe2571bb025268983633ac1978a1d3c3/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6abfd78fe2571bb025268983633ac1978a1d3c3/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=a6abfd78fe2571bb025268983633ac1978a1d3c3", "patch": "@@ -6259,6 +6259,7 @@ package body Sem_Attr is\n                         --  dimensional array.\n \n                         Index_Type := First_Index (P_Type);\n+\n                         if Present (Next_Index (Index_Type)) then\n                            Error_Msg_N\n                              (\"too few subscripts in array reference\", Comp);"}, {"sha": "67550488e83e1741643e1a17600e78f6702dc774", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6abfd78fe2571bb025268983633ac1978a1d3c3/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6abfd78fe2571bb025268983633ac1978a1d3c3/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a6abfd78fe2571bb025268983633ac1978a1d3c3", "patch": "@@ -309,17 +309,18 @@ package body Sem_Ch6 is\n       if Present (Parameter_Specifications (New_Spec)) then\n          declare\n             Formal_Spec : Node_Id;\n+            Def         : Entity_Id;\n+\n          begin\n             Formal_Spec := First (Parameter_Specifications (New_Spec));\n \n             --  Create a new formal parameter at the same source position\n \n             while Present (Formal_Spec) loop\n-               Set_Defining_Identifier\n-                 (Formal_Spec,\n-                  Make_Defining_Identifier\n-                    (Sloc (Defining_Identifier (Formal_Spec)),\n-                    Chars => Chars (Defining_Identifier (Formal_Spec))));\n+               Def := Defining_Identifier (Formal_Spec);\n+               Set_Defining_Identifier (Formal_Spec,\n+                 Make_Defining_Identifier (Sloc (Def),\n+                   Chars => Chars (Def)));\n                Next (Formal_Spec);\n             end loop;\n          end;"}, {"sha": "3747dfd8b95d232316392ae38eed510697b48713", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6abfd78fe2571bb025268983633ac1978a1d3c3/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6abfd78fe2571bb025268983633ac1978a1d3c3/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a6abfd78fe2571bb025268983633ac1978a1d3c3", "patch": "@@ -216,6 +216,12 @@ package body Sem_Prag is\n    --  _Post, _Invariant, or _Type_Invariant, which are special names used\n    --  in identifiers to represent these attribute references.\n \n+   procedure Check_SPARK_Aspect_For_ASIS (N : Node_Id);\n+   --  In ASIS mode we need to analyze the original expression in the aspect\n+   --  specification. For Initializes, Global, and related SPARK aspects, the\n+   --  expression has a sui-generis syntax which may be a list, an expression,\n+   --  or an aggregate.\n+\n    procedure Check_State_And_Constituent_Use\n      (States   : Elist_Id;\n       Constits : Elist_Id;\n@@ -2329,6 +2335,7 @@ package body Sem_Prag is\n \n    begin\n       Set_Analyzed (N);\n+      Check_SPARK_Aspect_For_ASIS (N);\n \n       --  Verify the syntax of pragma Global when SPARK checks are suppressed.\n       --  Semantic analysis is disabled in this mode.\n@@ -2798,6 +2805,8 @@ package body Sem_Prag is\n    begin\n       Set_Analyzed (N);\n \n+      Check_SPARK_Aspect_For_ASIS (N);\n+\n       --  Nothing to do when the initialization list is empty\n \n       if Nkind (Inits) = N_Null then\n@@ -24668,6 +24677,43 @@ package body Sem_Prag is\n       end if;\n    end Check_Missing_Part_Of;\n \n+   ---------------------------------\n+   -- Check_SPARK_Aspect_For_ASIS --\n+   ---------------------------------\n+\n+   procedure Check_SPARK_Aspect_For_ASIS (N : Node_Id) is\n+      Expr : Node_Id;\n+\n+   begin\n+      if ASIS_Mode and then From_Aspect_Specification (N) then\n+         Expr := Expression (Corresponding_Aspect (N));\n+         if Nkind (Expr) /= N_Aggregate then\n+            Preanalyze_And_Resolve (Expr);\n+\n+         else\n+            declare\n+               Comps : constant List_Id := Component_Associations (Expr);\n+               Exprs : constant List_Id := Expressions (Expr);\n+               C     : Node_Id;\n+               E     : Node_Id;\n+\n+            begin\n+               E := First (Exprs);\n+               while Present (E) loop\n+                  Analyze (E);\n+                  Next (E);\n+               end loop;\n+\n+               C := First (Comps);\n+               while Present (C) loop\n+                  Analyze (Expression (C));\n+                  Next (C);\n+               end loop;\n+            end;\n+         end if;\n+      end if;\n+   end Check_SPARK_Aspect_For_ASIS;\n+\n    -------------------------------------\n    -- Check_State_And_Constituent_Use --\n    -------------------------------------"}]}