{"sha": "5a6446841aa17a717f2f04ec22e507c86c864355", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE2NDQ2ODQxYWExN2E3MTdmMmYwNGVjMjJlNTA3Yzg2Yzg2NDM1NQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2019-07-10T09:00:16Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-10T09:00:16Z"}, "message": "[Ada] Missing implicit interface type conversion\n\nThe compiler skips adding an implicit type conversion when the interface\ntype is visible through a limited-with clause.\n\nNo small reproducer available.\n\n2019-07-10  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch6.adb (Is_Class_Wide_Interface_Type): New subprogram.\n\t(Expand_Call_Helper): Handle non-limited views when we check if\n\tany formal is a class-wide interface type.\n\t* exp_disp.adb (Expand_Interface_Actuals): Handle non-limited\n\tviews when we look for interface type formals to force \"this\"\n\tdisplacement.\n\nFrom-SVN: r273328", "tree": {"sha": "e3c003cef5af854fca79a551e074c3d23ab52dfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3c003cef5af854fca79a551e074c3d23ab52dfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a6446841aa17a717f2f04ec22e507c86c864355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6446841aa17a717f2f04ec22e507c86c864355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a6446841aa17a717f2f04ec22e507c86c864355", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6446841aa17a717f2f04ec22e507c86c864355/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "389a12d8687d0dac9796f10ea0dc58d1a3bb9b18", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6446841aa17a717f2f04ec22e507c86c864355/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6446841aa17a717f2f04ec22e507c86c864355/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5a6446841aa17a717f2f04ec22e507c86c864355", "patch": "@@ -1,3 +1,12 @@\n+2019-07-10  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch6.adb (Is_Class_Wide_Interface_Type): New subprogram.\n+\t(Expand_Call_Helper): Handle non-limited views when we check if\n+\tany formal is a class-wide interface type.\n+\t* exp_disp.adb (Expand_Interface_Actuals): Handle non-limited\n+\tviews when we look for interface type formals to force \"this\"\n+\tdisplacement.\n+\n 2019-07-10  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_res.adb (Resolve_Equality_Op): Do not replace the resolved"}, {"sha": "448f981b102e888466c5b008aa916bb0bb9c4374", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6446841aa17a717f2f04ec22e507c86c864355/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6446841aa17a717f2f04ec22e507c86c864355/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=5a6446841aa17a717f2f04ec22e507c86c864355", "patch": "@@ -2331,6 +2331,10 @@ package body Exp_Ch6 is\n       function In_Unfrozen_Instance (E : Entity_Id) return Boolean;\n       --  Return true if E comes from an instance that is not yet frozen\n \n+      function Is_Class_Wide_Interface_Type (E : Entity_Id) return Boolean;\n+      --  Return True when E is a class-wide interface type or an access to\n+      --  a class-wide interface type.\n+\n       function Is_Direct_Deep_Call (Subp : Entity_Id) return Boolean;\n       --  Determine if Subp denotes a non-dispatching call to a Deep routine\n \n@@ -2585,6 +2589,32 @@ package body Exp_Ch6 is\n          return False;\n       end In_Unfrozen_Instance;\n \n+      ----------------------------------\n+      -- Is_Class_Wide_Interface_Type --\n+      ----------------------------------\n+\n+      function Is_Class_Wide_Interface_Type (E : Entity_Id) return Boolean is\n+         Typ : Entity_Id := E;\n+         DDT : Entity_Id;\n+\n+      begin\n+         if Has_Non_Limited_View (Typ) then\n+            Typ := Non_Limited_View (Typ);\n+         end if;\n+\n+         if Ekind (Typ) = E_Anonymous_Access_Type then\n+            DDT := Directly_Designated_Type (Typ);\n+\n+            if Has_Non_Limited_View (DDT) then\n+               DDT := Non_Limited_View (DDT);\n+            end if;\n+\n+            return Is_Class_Wide_Type (DDT) and then Is_Interface (DDT);\n+         else\n+            return Is_Class_Wide_Type (Typ) and then Is_Interface (Typ);\n+         end if;\n+      end Is_Class_Wide_Interface_Type;\n+\n       -------------------------\n       -- Is_Direct_Deep_Call --\n       -------------------------\n@@ -2919,15 +2949,7 @@ package body Exp_Ch6 is\n \n          CW_Interface_Formals_Present :=\n            CW_Interface_Formals_Present\n-             or else\n-               (Is_Class_Wide_Type (Etype (Formal))\n-                 and then Is_Interface (Etype (Etype (Formal))))\n-             or else\n-               (Ekind (Etype (Formal)) = E_Anonymous_Access_Type\n-                 and then Is_Class_Wide_Type (Directly_Designated_Type\n-                                               (Etype (Etype (Formal))))\n-                 and then Is_Interface (Directly_Designated_Type\n-                                         (Etype (Etype (Formal)))));\n+             or else Is_Class_Wide_Interface_Type (Etype (Formal));\n \n          --  Create possible extra actual for constrained case. Usually, the\n          --  extra actual is of the form actual'constrained, but since this"}, {"sha": "4fae37c491a079d84c8cc025688f819d4fd7d94c", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6446841aa17a717f2f04ec22e507c86c864355/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6446841aa17a717f2f04ec22e507c86c864355/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=5a6446841aa17a717f2f04ec22e507c86c864355", "patch": "@@ -1682,18 +1682,34 @@ package body Exp_Disp is\n       while Present (Formal) loop\n          Formal_Typ := Etype (Formal);\n \n+         if Has_Non_Limited_View (Formal_Typ) then\n+            Formal_Typ := Non_Limited_View (Formal_Typ);\n+         end if;\n+\n          if Ekind (Formal_Typ) = E_Record_Type_With_Private then\n             Formal_Typ := Full_View (Formal_Typ);\n          end if;\n \n          if Is_Access_Type (Formal_Typ) then\n             Formal_DDT := Directly_Designated_Type (Formal_Typ);\n+\n+            if Has_Non_Limited_View (Formal_DDT) then\n+               Formal_DDT := Non_Limited_View (Formal_DDT);\n+            end if;\n          end if;\n \n          Actual_Typ := Etype (Actual);\n \n+         if Has_Non_Limited_View (Actual_Typ) then\n+            Actual_Typ := Non_Limited_View (Actual_Typ);\n+         end if;\n+\n          if Is_Access_Type (Actual_Typ) then\n             Actual_DDT := Directly_Designated_Type (Actual_Typ);\n+\n+            if Has_Non_Limited_View (Actual_DDT) then\n+               Actual_DDT := Non_Limited_View (Actual_DDT);\n+            end if;\n          end if;\n \n          if Is_Interface (Formal_Typ)"}]}