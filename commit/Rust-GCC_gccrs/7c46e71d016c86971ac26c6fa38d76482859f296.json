{"sha": "7c46e71d016c86971ac26c6fa38d76482859f296", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M0NmU3MWQwMTZjODY5NzFhYzI2YzZmYTM4ZDc2NDgyODU5ZjI5Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-21T18:22:38Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-22T14:33:19Z"}, "message": "cfgexpand: Update partition size when merging variables\n\ncfgexpand sorts variables by decreasing size, so when merging a later\nvariable into an earlier one, there's usually no need to update the\nmerged size.\n\nBut for poly_int sizes, the sort function just uses a lexicographical\ncomparison of the coefficients, so e.g. 2X+2 comes before 0X+32.\nWhich is bigger depends on the runtime value of X.\n\nThis patch therefore takes the upper bound of the two sizes, which\nis conservatively correct for variable-length vectors and a no-op\non other targets.\n\nIt's probably a bad idea to merge fixed-length and variable-length\nvariables in practice, but that's really an optimisation decision.\nI think we should have this patch as a correctness fix either way.\n\nThis is easiest to test using the ACLE, but in principle it could happen\nfor autovectorised code too, e.g. when using OpenMP vector variables.\nIt's therefore a regression from GCC 8.\n\n2020-01-22  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* cfgexpand.c (union_stack_vars): Update the size.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/acle/general/stack_vars_1.c: New test.", "tree": {"sha": "d9688d2364432c863c54b7e08635fa8e9dda8bba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9688d2364432c863c54b7e08635fa8e9dda8bba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c46e71d016c86971ac26c6fa38d76482859f296", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c46e71d016c86971ac26c6fa38d76482859f296", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c46e71d016c86971ac26c6fa38d76482859f296", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c46e71d016c86971ac26c6fa38d76482859f296/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7491c17fe01d8cf116f645532d46120029b26408", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7491c17fe01d8cf116f645532d46120029b26408", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7491c17fe01d8cf116f645532d46120029b26408"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "272968a3396bb76a6d3c16f4824fbc7e8808ac71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c46e71d016c86971ac26c6fa38d76482859f296/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c46e71d016c86971ac26c6fa38d76482859f296/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c46e71d016c86971ac26c6fa38d76482859f296", "patch": "@@ -1,3 +1,7 @@\n+2020-01-22  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* cfgexpand.c (union_stack_vars): Update the size.\n+\n 2020-01-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/93381"}, {"sha": "9864e4344d233d33f875282cb273711cc78db873", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c46e71d016c86971ac26c6fa38d76482859f296/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c46e71d016c86971ac26c6fa38d76482859f296/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=7c46e71d016c86971ac26c6fa38d76482859f296", "patch": "@@ -862,6 +862,9 @@ union_stack_vars (size_t a, size_t b)\n   stack_vars[b].representative = a;\n   stack_vars[a].next = b;\n \n+  /* Make sure A is big enough to hold B.  */\n+  stack_vars[a].size = upper_bound (stack_vars[a].size, stack_vars[b].size);\n+\n   /* Update the required alignment of partition A to account for B.  */\n   if (stack_vars[a].alignb < stack_vars[b].alignb)\n     stack_vars[a].alignb = stack_vars[b].alignb;"}, {"sha": "d22747b1dfed2d65eee7d30987f09b0160a34463", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c46e71d016c86971ac26c6fa38d76482859f296/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c46e71d016c86971ac26c6fa38d76482859f296/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c46e71d016c86971ac26c6fa38d76482859f296", "patch": "@@ -1,3 +1,7 @@\n+2020-01-22  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/general/stack_vars_1.c: New test.\n+\n 2020-01-22  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/tls_preserve_1.c: Require tls_native."}, {"sha": "860fa67fbe6fa924af482df378e287cd9bf94617", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/stack_vars_1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c46e71d016c86971ac26c6fa38d76482859f296/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fstack_vars_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c46e71d016c86971ac26c6fa38d76482859f296/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fstack_vars_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fstack_vars_1.c?ref=7c46e71d016c86971ac26c6fa38d76482859f296", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include <arm_sve.h>\n+\n+struct s { int x[32]; };\n+\n+void __attribute__((noipa)) consume (void *ptr) {}\n+\n+void __attribute__((noipa))\n+check_var (svint32_t *ptr)\n+{\n+  svbool_t pg = svptrue_b8 ();\n+  if (svptest_any (pg, svcmpne (pg, *ptr, svindex_s32 (0, 1))))\n+    __builtin_abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  svint32_t res = svindex_s32 (0, 1);\n+  {\n+    __SVBool_t pg = svptrue_b8 ();\n+    consume (&pg);\n+  }\n+  {\n+    struct s zeros = { 0 };\n+    consume (&zeros);\n+  }\n+  check_var (&res);\n+  return 0;\n+}"}]}