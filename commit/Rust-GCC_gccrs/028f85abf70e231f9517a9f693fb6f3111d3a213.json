{"sha": "028f85abf70e231f9517a9f693fb6f3111d3a213", "node_id": "C_kwDOANBUbNoAKDAyOGY4NWFiZjcwZTIzMWY5NTE3YTlmNjkzZmI2ZjMxMTFkM2EyMTM", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-22T12:20:31Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-03-30T14:48:26Z"}, "message": "ast: Refactor and add some Path node visitors\n\nImplement some functions for Path nodes and refactor existing ones by\nmerging some common code.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-tokenstream.cc (TokenStream::visit): Implement\n\tvisitors.\n\t* ast/rust-ast-tokenstream.h: Add function prototypes.\n\t* ast/rust-ast.h: Add missing getters.\n\t* ast/rust-expr.h: Likewise.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "fed477ae98fc5c86c7b7959243cf82743b3066a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fed477ae98fc5c86c7b7959243cf82743b3066a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/028f85abf70e231f9517a9f693fb6f3111d3a213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/028f85abf70e231f9517a9f693fb6f3111d3a213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/028f85abf70e231f9517a9f693fb6f3111d3a213", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/028f85abf70e231f9517a9f693fb6f3111d3a213/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf6c77494c09e23aa2108eb238efcae35627e810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf6c77494c09e23aa2108eb238efcae35627e810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf6c77494c09e23aa2108eb238efcae35627e810"}], "stats": {"total": 255, "additions": 131, "deletions": 124}, "files": [{"sha": "92737fcece4b4ed8f894f665e9e68c2037e62944", "filename": "gcc/rust/ast/rust-ast-tokenstream.cc", "status": "modified", "additions": 116, "deletions": 124, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/028f85abf70e231f9517a9f693fb6f3111d3a213/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/028f85abf70e231f9517a9f693fb6f3111d3a213/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc?ref=028f85abf70e231f9517a9f693fb6f3111d3a213", "patch": "@@ -105,8 +105,7 @@ TokenStream::visit (Attribute &attrib)\n {\n   tokens.push_back (Rust::Token::make (HASH, attrib.get_locus ()));\n   tokens.push_back (Rust::Token::make (LEFT_SQUARE, Location ()));\n-  visit_items_joined_by_separator (attrib.get_path ().get_segments (),\n-\t\t\t\t   SCOPE_RESOLUTION);\n+  visit (attrib.get_path ());\n \n   if (attrib.has_attr_input ())\n     {\n@@ -140,6 +139,17 @@ TokenStream::visit (Attribute &attrib)\n   tokens.push_back (Rust::Token::make (RIGHT_SQUARE, Location ()));\n }\n \n+void\n+TokenStream::visit (SimplePath &path)\n+{\n+  if (path.get_has_opening_scope_resolution ())\n+    {\n+      tokens.push_back (\n+\tRust::Token::make (SCOPE_RESOLUTION, path.get_locus ()));\n+    }\n+  visit_items_joined_by_separator (path.get_segments (), SCOPE_RESOLUTION);\n+}\n+\n void\n TokenStream::visit (SimplePathSegment &segment)\n {\n@@ -197,8 +207,7 @@ TokenStream::visit (Visibility &vis)\n       tokens.push_back (Rust::Token::make (PUB, vis.get_locus ()));\n       tokens.push_back (Rust::Token::make (LEFT_PAREN, Location ()));\n       tokens.push_back (Rust::Token::make_identifier (Location (), \"in\"));\n-      visit_items_joined_by_separator (vis.get_path ().get_segments (),\n-\t\t\t\t       SCOPE_RESOLUTION);\n+      visit (vis.get_path ());\n       tokens.push_back (Rust::Token::make (RIGHT_PAREN, Location ()));\n       break;\n     case Visibility::PRIV:\n@@ -401,80 +410,71 @@ TokenStream::visit (LifetimeParam &lifetime_param)\n }\n \n void\n-TokenStream::visit (ConstGenericParam &)\n-{}\n+TokenStream::visit (ConstGenericParam &param)\n+{\n+  // Syntax:\n+  // const IDENTIFIER : Type ( = Block | IDENTIFIER | -?LITERAL )?\n+\n+  tokens.push_back (Rust::Token::make (CONST, param.get_locus ()));\n+  auto id = param.get_name ();\n+  tokens.push_back (Rust::Token::make_identifier (Location (), std::move (id)));\n+  tokens.push_back (Rust::Token::make (COLON, Location ()));\n+  visit (param.get_type ());\n+  if (param.has_default_value ())\n+    {\n+      tokens.push_back (Rust::Token::make (EQUAL, Location ()));\n+      visit (param.get_type ());\n+    }\n+}\n \n void\n-TokenStream::visit (PathInExpression &path)\n+TokenStream::visit (PathExprSegment &segment)\n {\n-  if (path.opening_scope_resolution ())\n+  visit (segment.get_ident_segment ());\n+  if (segment.has_generic_args ())\n     {\n+      auto generics = segment.get_generic_args ();\n       tokens.push_back (\n-\tRust::Token::make (SCOPE_RESOLUTION, path.get_locus ()));\n-    }\n+\tRust::Token::make (SCOPE_RESOLUTION, segment.get_locus ()));\n+      tokens.push_back (Rust::Token::make (LEFT_ANGLE, generics.get_locus ()));\n \n-  for (auto &segment : path.get_segments ())\n-    {\n-      auto ident_segment = segment.get_ident_segment ();\n-      // TODO: Add visitor pattern to PathIdentSegment ?\n-      if (ident_segment.is_super_segment ())\n-\t{\n-\t  tokens.push_back (\n-\t    Rust::Token::make (SUPER, ident_segment.get_locus ()));\n-\t}\n-      else if (ident_segment.is_crate_segment ())\n-\t{\n-\t  tokens.push_back (\n-\t    Rust::Token::make (CRATE, ident_segment.get_locus ()));\n-\t}\n-      else if (ident_segment.is_lower_self ())\n-\t{\n-\t  tokens.push_back (\n-\t    Rust::Token::make (SELF, ident_segment.get_locus ()));\n-\t}\n-      else if (ident_segment.is_big_self ())\n-\t{\n-\t  tokens.push_back (\n-\t    Rust::Token::make (SELF_ALIAS, ident_segment.get_locus ()));\n-\t}\n-      else\n+      auto &lifetime_args = generics.get_lifetime_args ();\n+      auto &generic_args = generics.get_generic_args ();\n+      auto &binding_args = generics.get_binding_args ();\n+\n+      visit_items_joined_by_separator (generic_args, COMMA);\n+\n+      if (!lifetime_args.empty ()\n+\t  && (!generic_args.empty () || !binding_args.empty ()))\n \t{\n-\t  auto id = ident_segment.as_string ();\n-\t  tokens.push_back (\n-\t    Rust::Token::make_identifier (ident_segment.get_locus (),\n-\t\t\t\t\t  std::move (id)));\n+\t  tokens.push_back (Rust::Token::make (COMMA, Location ()));\n \t}\n-      if (segment.has_generic_args ())\n-\t{\n-\t  auto generics = segment.get_generic_args ();\n-\t  tokens.push_back (\n-\t    Rust::Token::make (SCOPE_RESOLUTION, path.get_locus ()));\n-\t  tokens.push_back (\n-\t    Rust::Token::make (LEFT_ANGLE, generics.get_locus ()));\n-\n-\t  auto &lifetime_args = generics.get_lifetime_args ();\n-\t  auto &generic_args = generics.get_generic_args ();\n-\t  auto &binding_args = generics.get_binding_args ();\n \n-\t  visit_items_joined_by_separator (generic_args, COMMA);\n+      visit_items_joined_by_separator (binding_args, COMMA);\n \n-\t  if (!lifetime_args.empty ()\n-\t      && (!generic_args.empty () || !binding_args.empty ()))\n-\t    {\n-\t      tokens.push_back (Rust::Token::make (COMMA, Location ()));\n-\t    }\n+      if (!generic_args.empty () && !binding_args.empty ())\n+\t{\n+\t  tokens.push_back (Rust::Token::make (COMMA, Location ()));\n+\t}\n \n-\t  visit_items_joined_by_separator (binding_args, COMMA);\n+      visit_items_joined_by_separator (lifetime_args, COMMA);\n \n-\t  if (!generic_args.empty () && !binding_args.empty ())\n-\t    {\n-\t      tokens.push_back (Rust::Token::make (COMMA, Location ()));\n-\t    }\n+      tokens.push_back (Rust::Token::make (RIGHT_ANGLE, Location ()));\n+    }\n+}\n \n-\t  visit_items_joined_by_separator (lifetime_args, COMMA);\n+void\n+TokenStream::visit (PathInExpression &path)\n+{\n+  if (path.opening_scope_resolution ())\n+    {\n+      tokens.push_back (\n+\tRust::Token::make (SCOPE_RESOLUTION, path.get_locus ()));\n+    }\n \n-\t  tokens.push_back (Rust::Token::make (RIGHT_ANGLE, Location ()));\n-\t}\n+  for (auto &segment : path.get_segments ())\n+    {\n+      visit (segment);\n     }\n }\n \n@@ -612,76 +612,68 @@ TokenStream::visit (TypePath &path)\n   visit_items_joined_by_separator (path.get_segments (), SCOPE_RESOLUTION);\n }\n \n+void\n+TokenStream::visit (PathIdentSegment &segment)\n+{\n+  if (segment.is_super_segment ())\n+    {\n+      tokens.push_back (Rust::Token::make (SUPER, segment.get_locus ()));\n+    }\n+  else if (segment.is_crate_segment ())\n+    {\n+      tokens.push_back (Rust::Token::make (CRATE, segment.get_locus ()));\n+    }\n+  else if (segment.is_lower_self ())\n+    {\n+      tokens.push_back (Rust::Token::make (SELF, segment.get_locus ()));\n+    }\n+  else if (segment.is_big_self ())\n+    {\n+      tokens.push_back (Rust::Token::make (SELF_ALIAS, segment.get_locus ()));\n+    }\n+  else\n+    {\n+      auto id = segment.as_string ();\n+      tokens.push_back (\n+\tRust::Token::make_identifier (segment.get_locus (), std::move (id)));\n+    }\n+}\n+\n void\n TokenStream::visit (QualifiedPathInExpression &path)\n {\n   for (auto &segment : path.get_segments ())\n     {\n-      auto ident_segment = segment.get_ident_segment ();\n-      if (ident_segment.is_super_segment ())\n-\t{\n-\t  tokens.push_back (\n-\t    Rust::Token::make (SUPER, ident_segment.get_locus ()));\n-\t}\n-      else if (ident_segment.is_crate_segment ())\n-\t{\n-\t  tokens.push_back (\n-\t    Rust::Token::make (CRATE, ident_segment.get_locus ()));\n-\t}\n-      else if (ident_segment.is_lower_self ())\n-\t{\n-\t  tokens.push_back (\n-\t    Rust::Token::make (SELF, ident_segment.get_locus ()));\n-\t}\n-      else if (ident_segment.is_big_self ())\n-\t{\n-\t  tokens.push_back (\n-\t    Rust::Token::make (SELF_ALIAS, ident_segment.get_locus ()));\n-\t}\n-      else\n-\t{\n-\t  auto id = ident_segment.as_string ();\n-\t  tokens.push_back (\n-\t    Rust::Token::make_identifier (ident_segment.get_locus (),\n-\t\t\t\t\t  std::move (id)));\n-\t}\n-      if (segment.has_generic_args ())\n-\t{\n-\t  auto generics = segment.get_generic_args ();\n-\t  tokens.push_back (\n-\t    Rust::Token::make (SCOPE_RESOLUTION, path.get_locus ()));\n-\t  tokens.push_back (\n-\t    Rust::Token::make (LEFT_ANGLE, generics.get_locus ()));\n-\n-\t  auto &lifetime_args = generics.get_lifetime_args ();\n-\t  auto &generic_args = generics.get_generic_args ();\n-\t  auto &binding_args = generics.get_binding_args ();\n-\n-\t  visit_items_joined_by_separator (generic_args, COMMA);\n-\n-\t  if (!lifetime_args.empty ()\n-\t      && (!generic_args.empty () || !binding_args.empty ()))\n-\t    {\n-\t      tokens.push_back (Rust::Token::make (COMMA, Location ()));\n-\t    }\n-\n-\t  visit_items_joined_by_separator (binding_args, COMMA);\n-\n-\t  if (!generic_args.empty () && !binding_args.empty ())\n-\t    {\n-\t      tokens.push_back (Rust::Token::make (COMMA, Location ()));\n-\t    }\n-\n-\t  visit_items_joined_by_separator (lifetime_args, COMMA);\n+      visit (segment);\n+    }\n+}\n \n-\t  tokens.push_back (Rust::Token::make (RIGHT_ANGLE, Location ()));\n-\t}\n+void\n+TokenStream::visit (QualifiedPathType &path)\n+{\n+  tokens.push_back (Rust::Token::make (LEFT_ANGLE, path.get_locus ()));\n+  visit (path.get_type ());\n+  if (path.has_as_clause ())\n+    {\n+      tokens.push_back (Rust::Token::make (AS, Location ()));\n+      visit (path.get_as_type_path ());\n     }\n+  tokens.push_back (Rust::Token::make (RIGHT_ANGLE, Location ()));\n }\n \n void\n-TokenStream::visit (QualifiedPathInType &)\n-{}\n+TokenStream::visit (QualifiedPathInType &path)\n+{\n+  visit (path.get_qualified_path_type ());\n+\n+  tokens.push_back (Rust::Token::make (COLON, Location ()));\n+  visit (path.get_associated_segment ());\n+  for (auto &segment : path.get_segments ())\n+    {\n+      tokens.push_back (Rust::Token::make (COLON, Location ()));\n+      visit (segment);\n+    }\n+}\n \n void\n TokenStream::visit (Literal &lit, Location locus)"}, {"sha": "70ef24637ff8761bc6eef86dc82925620801d6cb", "filename": "gcc/rust/ast/rust-ast-tokenstream.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/028f85abf70e231f9517a9f693fb6f3111d3a213/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/028f85abf70e231f9517a9f693fb6f3111d3a213/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h?ref=028f85abf70e231f9517a9f693fb6f3111d3a213", "patch": "@@ -121,11 +121,15 @@ class TokenStream : public ASTVisitor\n   void visit (ConstGenericParam &const_param);\n \n   // rust-path.h\n+  void visit (SimplePath &path);\n+  void visit (PathExprSegment &segment);\n+  void visit (PathIdentSegment &segment);\n   void visit (PathInExpression &path);\n   void visit (TypePathSegment &segment);\n   void visit (TypePathSegmentGeneric &segment);\n   void visit (TypePathSegmentFunction &segment);\n   void visit (TypePath &path);\n+  void visit (QualifiedPathType &path);\n   void visit (QualifiedPathInExpression &path);\n   void visit (QualifiedPathInType &path);\n "}, {"sha": "a4da389615ff3659ba3ff54f7bd7feca7b34497f", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/028f85abf70e231f9517a9f693fb6f3111d3a213/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/028f85abf70e231f9517a9f693fb6f3111d3a213/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=028f85abf70e231f9517a9f693fb6f3111d3a213", "patch": "@@ -393,6 +393,11 @@ class SimplePath\n \n   std::string as_string () const;\n \n+  bool get_has_opening_scope_resolution () const\n+  {\n+    return has_opening_scope_resolution;\n+  }\n+\n   Location get_locus () const { return locus; }\n   NodeId get_node_id () const { return node_id; }\n "}, {"sha": "1b3a85fea411de7d30c35a628264b69f85108ba1", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/028f85abf70e231f9517a9f693fb6f3111d3a213/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/028f85abf70e231f9517a9f693fb6f3111d3a213/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=028f85abf70e231f9517a9f693fb6f3111d3a213", "patch": "@@ -152,6 +152,8 @@ class MetaItemLitExpr : public MetaItemInner\n \n   Location get_locus () const override { return lit_expr.get_locus (); }\n \n+  LiteralExpr get_literal () const { return lit_expr; }\n+\n   void accept_vis (ASTVisitor &vis) override;\n \n   bool check_cfg_predicate (const Session &session) const override;\n@@ -175,6 +177,10 @@ class MetaItemPathLit : public MetaItem\n     : path (std::move (path)), lit (std::move (lit_expr))\n   {}\n \n+  SimplePath get_path () const { return path; }\n+\n+  LiteralExpr get_literal () const { return lit; }\n+\n   std::string as_string () const override\n   {\n     return path.as_string () + \" = \" + lit.as_string ();"}]}