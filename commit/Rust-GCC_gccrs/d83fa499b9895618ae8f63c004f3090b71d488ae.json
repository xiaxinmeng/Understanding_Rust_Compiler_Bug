{"sha": "d83fa499b9895618ae8f63c004f3090b71d488ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgzZmE0OTliOTg5NTYxOGFlOGY2M2MwMDRmMzA5MGI3MWQ0ODhhZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-10-17T19:53:18Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-10-17T19:53:18Z"}, "message": "ipa-inline-transform.c (master_clone_with_noninline_clones_p): New.\n\n\t* ipa-inline-transform.c (master_clone_with_noninline_clones_p): New.\n\t(clone_inlined_nodes): Do not overwrite the clone if above predicate\n\treturns true.\n\nFrom-SVN: r216415", "tree": {"sha": "301efc828166e84e581576aed480b1108b228812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/301efc828166e84e581576aed480b1108b228812"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d83fa499b9895618ae8f63c004f3090b71d488ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d83fa499b9895618ae8f63c004f3090b71d488ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d83fa499b9895618ae8f63c004f3090b71d488ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d83fa499b9895618ae8f63c004f3090b71d488ae/comments", "author": null, "committer": null, "parents": [{"sha": "d9b7be2ebd0cf4652590c2db4313c8435a9a66a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9b7be2ebd0cf4652590c2db4313c8435a9a66a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9b7be2ebd0cf4652590c2db4313c8435a9a66a9"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "b2a8e7a2a6f2d3684a423a460ccf3418e5da3189", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83fa499b9895618ae8f63c004f3090b71d488ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83fa499b9895618ae8f63c004f3090b71d488ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d83fa499b9895618ae8f63c004f3090b71d488ae", "patch": "@@ -1,3 +1,9 @@\n+2014-10-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* ipa-inline-transform.c (master_clone_with_noninline_clones_p): New.\n+\t(clone_inlined_nodes): Do not overwrite the clone if above predicate\n+\treturns true.\n+\n 2014-10-17  Ilya Tocar  <ilya.tocar@intel.com>\n \n \t* config/i386/i386.c (MAX_VECT_LEN): Move earlier."}, {"sha": "1cb4c0520e83d7fe121b6debcd0e8c6a57bafe0a", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83fa499b9895618ae8f63c004f3090b71d488ae/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83fa499b9895618ae8f63c004f3090b71d488ae/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=d83fa499b9895618ae8f63c004f3090b71d488ae", "patch": "@@ -122,6 +122,20 @@ can_remove_node_now_p (struct cgraph_node *node, struct cgraph_edge *e)\n   return true;\n }\n \n+/* Return true if NODE is a master clone with non-inline clones.  */\n+\n+static bool\n+master_clone_with_noninline_clones_p (struct cgraph_node *node)\n+{\n+  if (node->clone_of)\n+    return false;\n+\n+  for (struct cgraph_node *n = node->clones; n; n = n->next_sibling_clone)\n+    if (n->decl != node->decl)\n+      return true;\n+\n+  return false;\n+}\n \n /* E is expected to be an edge being inlined.  Clone destination node of\n    the edge and redirect it to the new clone.\n@@ -155,7 +169,10 @@ clone_inlined_nodes (struct cgraph_edge *e, bool duplicate,\n \t  /* Recursive inlining never wants the master clone to\n \t     be overwritten.  */\n \t  && update_original\n-\t  && can_remove_node_now_p (e->callee, e))\n+\t  && can_remove_node_now_p (e->callee, e)\n+\t  /* We cannot overwrite a master clone with non-inline clones\n+\t     until after these clones are materialized.  */\n+\t  && !master_clone_with_noninline_clones_p (e->callee))\n \t{\n \t  /* TODO: When callee is in a comdat group, we could remove all of it,\n \t     including all inline clones inlined into it.  That would however"}]}