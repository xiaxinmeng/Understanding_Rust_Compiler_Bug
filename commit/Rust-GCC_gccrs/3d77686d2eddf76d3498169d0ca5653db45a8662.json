{"sha": "3d77686d2eddf76d3498169d0ca5653db45a8662", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q3NzY4NmQyZWRkZjc2ZDM0OTgxNjlkMGNhNTY1M2RiNDVhODY2Mg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-01-13T16:39:04Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-01-13T16:39:04Z"}, "message": "Fix handling of overflow in C casts in integer constant expressions (PR c/93241).\n\nBug 93241 reports a case where certain C expressions involving casts,\nthat would not be valid in an evaluated part of an integer constant\nexpression (because of e.g. involving integer overflow), are wrongly\nrejected in an unevaluated part of an integer constant expression even\nthough all the operands and operations are ones that are valid in that\ncontext.  This is a rejects-valid regression in GCC 4.5 and later\nrelative to 4.4 (for some testcases; the one in the bug uses\n_Static_assert which isn't supported in those older releases).\n\nThe rule in the C front end is that an expression with those\nproperties (valid in an unevaluated part of an integer constant\nexpression but not an evaluated part) must be represented either as an\nINTEGER_CST with TREE_OVERFLOW set or as a C_MAYBE_CONST_EXPR with\nC_MAYBE_CONST_EXPR_INT_OPERANDS set.  This patch fixes build_c_cast to\ncheck for that case and call note_integer_operands as needed.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\n\tPR c/93241\ngcc/c:\n\t* c-typeck.c (build_c_cast): Check for expressions with integer\n\toperands that can occur in an unevaluated part of an integer\n\tconstant expression and call note_integer_operands as needed.\n\ngcc/testsuite:\n\t* gcc.dg/c11-static-assert-10.c, gcc.dg/c99-const-expr-15.c: New\n\ttests.", "tree": {"sha": "81afc132315b6c77c98cedf7f01a84424038768c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81afc132315b6c77c98cedf7f01a84424038768c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d77686d2eddf76d3498169d0ca5653db45a8662", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d77686d2eddf76d3498169d0ca5653db45a8662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d77686d2eddf76d3498169d0ca5653db45a8662", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d77686d2eddf76d3498169d0ca5653db45a8662/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8f59c4b30ac1761e6f4b63666ca7f5d68649ed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8f59c4b30ac1761e6f4b63666ca7f5d68649ed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8f59c4b30ac1761e6f4b63666ca7f5d68649ed5"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "b8e807e11a9aa080cea8b2c6193bd0e10afc7108", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d77686d2eddf76d3498169d0ca5653db45a8662/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d77686d2eddf76d3498169d0ca5653db45a8662/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3d77686d2eddf76d3498169d0ca5653db45a8662", "patch": "@@ -1,3 +1,10 @@\n+2020-01-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/93241\n+\t* c-typeck.c (build_c_cast): Check for expressions with integer\n+\toperands that can occur in an unevaluated part of an integer\n+\tconstant expression and call note_integer_operands as needed.\n+\n 2019-01-08  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/93199"}, {"sha": "9866c83faf22cf34eccd538133fde7cb5ef845cf", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d77686d2eddf76d3498169d0ca5653db45a8662/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d77686d2eddf76d3498169d0ca5653db45a8662/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=3d77686d2eddf76d3498169d0ca5653db45a8662", "patch": "@@ -5709,6 +5709,8 @@ build_c_cast (location_t loc, tree type, tree expr)\n {\n   tree value;\n \n+  bool int_operands = EXPR_INT_CONST_OPERANDS (expr);\n+\n   if (TREE_CODE (expr) == EXCESS_PRECISION_EXPR)\n     expr = TREE_OPERAND (expr, 0);\n \n@@ -5943,6 +5945,14 @@ build_c_cast (location_t loc, tree type, tree expr)\n \t       || TREE_CODE (expr) == COMPLEX_CST)))\n       value = build1 (NOP_EXPR, type, value);\n \n+  /* If the expression has integer operands and so can occur in an\n+     unevaluated part of an integer constant expression, ensure the\n+     return value reflects this.  */\n+  if (int_operands\n+      && INTEGRAL_TYPE_P (type)\n+      && !EXPR_INT_CONST_OPERANDS (value))\n+    value = note_integer_operands (value);\n+\n   protected_set_expr_location (value, loc);\n   return value;\n }"}, {"sha": "976003a0739b5b7db88208348f74aabf6e5ba64f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d77686d2eddf76d3498169d0ca5653db45a8662/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d77686d2eddf76d3498169d0ca5653db45a8662/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3d77686d2eddf76d3498169d0ca5653db45a8662", "patch": "@@ -1,3 +1,9 @@\n+2020-01-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/93241\n+\t* gcc.dg/c11-static-assert-10.c, gcc.dg/c99-const-expr-15.c: New\n+\ttests.\n+\n 2020-01-13  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/93213"}, {"sha": "2fe210b6cc8723398cb4cdf37b679ac5fac9007f", "filename": "gcc/testsuite/gcc.dg/c11-static-assert-10.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d77686d2eddf76d3498169d0ca5653db45a8662/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-static-assert-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d77686d2eddf76d3498169d0ca5653db45a8662/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-static-assert-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-static-assert-10.c?ref=3d77686d2eddf76d3498169d0ca5653db45a8662", "patch": "@@ -0,0 +1,9 @@\n+/* Test for constant expressions: casts with integer overflow.  PR\n+   c/93241.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+#include <limits.h>\n+\n+_Static_assert (0 ? (_Bool) (INT_MAX + 1) : 1, \"\");\n+_Static_assert (0 ? (short) ((INT_MAX + 1) != 0) : 1, \"\");"}, {"sha": "b1744b671826ed7742623e96c3cd516109e10e74", "filename": "gcc/testsuite/gcc.dg/c99-const-expr-15.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d77686d2eddf76d3498169d0ca5653db45a8662/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d77686d2eddf76d3498169d0ca5653db45a8662/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-15.c?ref=3d77686d2eddf76d3498169d0ca5653db45a8662", "patch": "@@ -0,0 +1,9 @@\n+/* Test for constant expressions: casts with integer overflow.  PR\n+   c/93241.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+\n+#include <limits.h>\n+\n+struct s { int a : (0 ? (_Bool) (INT_MAX + 1) : 1); };\n+struct t { int a : (0 ? (short) ((INT_MAX + 1) != 0) : 1); };"}]}