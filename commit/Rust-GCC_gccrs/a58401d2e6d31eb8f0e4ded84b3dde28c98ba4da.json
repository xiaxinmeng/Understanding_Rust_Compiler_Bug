{"sha": "a58401d2e6d31eb8f0e4ded84b3dde28c98ba4da", "node_id": "C_kwDOANBUbNoAKGE1ODQwMWQyZTZkMzFlYjhmMGU0ZGVkODRiM2RkZTI4Yzk4YmE0ZGE", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2022-02-01T23:00:10Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2022-02-02T00:20:03Z"}, "message": "cris: For expanded movsi, don't match operands we know will be reloaded\n\nIn a session investigating unexpected fallout from a change, I\nnoticed reload needs one operand being a register to make an\ninformed decision.  It can happen that there's just a constant\nand a memory operand, as in:\n\n(insn 668 667 42 104 (parallel [\n            (set (mem:SI (plus:SI (reg/v/f:SI 347 [ fs ])\n                        (const_int 168 [0xa8])) \\\n [1 fs_126(D)->regs.cfa_how+0 S4 A8])\n                (const_int 2 [0x2]))\n            (clobber (reg:CC 19 dccr))\n        ]) \"<...>/gcc/libgcc/unwind-dw2.c\":1121:21 22 {*movsi_internal}\n     (expr_list:REG_UNUSED (reg:CC 19 dccr)\n        (nil)))\n\nThis was helpfully created by combine.  When this happens,\nreload can't check for costs and preferred register classes,\n(both operands will start with NO_REGS as the preferred class)\nand will default to the constraints order in the insn in reload.\n(Which also does its own temporary merge in find_reloads, but\nthat's a different story.)  Better don't match the simple cases.\nBeware that subregs have to be matched.\n\nI'm doing this just for word_mode (SI) for now, but may repeat\nthis for the other valid modes as well.  In particular, that\ngoes for DImode as I see the expanded movdi does *almost* this,\nbut uses register_operand instead of REG_S_P (from cris.h).\nUsing REG_S_P is the right choice here because register_operand\nalso matches (subreg (mem ...)  ...) *until* reload is done.\nBy itself it's just a sub-0.1% performance win (coremark).\n\nAlso removing a stale comment.\n\ngcc:\n\t* config/cris/cris.md (\"*movsi_internal<setcc><setnz><setnzvc>\"):\n\tConditionalize on (sub-)register operands or operand 1 being 0.", "tree": {"sha": "10532508f4f6c8cfa4b961be953cd1e4657b325e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10532508f4f6c8cfa4b961be953cd1e4657b325e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a58401d2e6d31eb8f0e4ded84b3dde28c98ba4da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a58401d2e6d31eb8f0e4ded84b3dde28c98ba4da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a58401d2e6d31eb8f0e4ded84b3dde28c98ba4da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a58401d2e6d31eb8f0e4ded84b3dde28c98ba4da/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c4d0af4c94ccf0cfa74c8b13b8ec1029f57cd63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4d0af4c94ccf0cfa74c8b13b8ec1029f57cd63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c4d0af4c94ccf0cfa74c8b13b8ec1029f57cd63"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "9d1c179d5211dfc640130fc43839f6041a5f2c7a", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58401d2e6d31eb8f0e4ded84b3dde28c98ba4da/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58401d2e6d31eb8f0e4ded84b3dde28c98ba4da/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=a58401d2e6d31eb8f0e4ded84b3dde28c98ba4da", "patch": "@@ -583,9 +583,10 @@\n     (match_operand:SI 1 \"general_operand\"\n \t\t       \"r,Q>,M,M, I,r, M,n,g,r,x,  rQ>,x,gi\"))\n    (clobber (reg:CC CRIS_CC0_REGNUM))]\n-    ;; Note that we prefer not to use the S alternative (if for some reason\n-    ;; it competes with others) above, but g matches S.\n-  \"\"\n+  ;; Avoid matching insns we know must be reloaded.  Without one\n+  ;; operand being a (pseudo-)register, reload chooses\n+  ;; reload-registers suboptimally.\n+  \"REG_S_P (operands[0]) || REG_S_P (operands[1]) || operands[1] == const0_rtx\"\n {\n   /* Better to have c-switch here; it is worth it to optimize the size of\n      move insns.  The alternative would be to try to find more constraint"}]}