{"sha": "ef79730c93540ee721d5403b276ec3d11a7c0123", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY3OTczMGM5MzU0MGVlNzIxZDU0MDNiMjc2ZWMzZDExYTdjMDEyMw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-02-01T14:59:15Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-02-01T14:59:15Z"}, "message": "builtins.def (BUILT_IN_SIGNBIT, [...]): New GCC builtins.\n\n\n\t* builtins.def (BUILT_IN_SIGNBIT, BUILT_IN_SIGNBITF,\n\tBUILT_IN_SIGNBITL): New GCC builtins.\n\t* builtins.c (expand_builtin_signbit): New function to RTL expand\n\tcalls to signbit, signbitf and signbitl as inline intrinsics.\n\t(expand_builtin): Call expand_builtin_signbit for BUILT_IN_SIGNBIT*.\n\t(fold_builtin_signbit): New function to perform constant folding\n\tof signbit, signbitf and signbitl.\n\t(fold_builtin): Call fold_builtin_signbit for BUILT_IN_SIGNBIT*.\n\n\t* doc/extend.texi: Document new signbit{,f,l} builtins.\n\n\t* gcc.dg/builtins-1.c: Also test for __builtin_signbit{,f,l}.\n\t* gcc.dg/builtins-31.c: New testcase.\n\t* gcc.dg/builtins-32.c: New testcase.\n\nFrom-SVN: r77070", "tree": {"sha": "5685a3fc60b869436c4a4d9ec1766345aa482fd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5685a3fc60b869436c4a4d9ec1766345aa482fd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef79730c93540ee721d5403b276ec3d11a7c0123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef79730c93540ee721d5403b276ec3d11a7c0123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef79730c93540ee721d5403b276ec3d11a7c0123", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef79730c93540ee721d5403b276ec3d11a7c0123/comments", "author": null, "committer": null, "parents": [{"sha": "a80cdb0f54b9c0d290d45485ae23e9cc13d5039e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a80cdb0f54b9c0d290d45485ae23e9cc13d5039e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a80cdb0f54b9c0d290d45485ae23e9cc13d5039e"}], "stats": {"total": 247, "additions": 247, "deletions": 0}, "files": [{"sha": "64e15f3f56aea61287eb6b9c8b75006e5d853dff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef79730c93540ee721d5403b276ec3d11a7c0123/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef79730c93540ee721d5403b276ec3d11a7c0123/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef79730c93540ee721d5403b276ec3d11a7c0123", "patch": "@@ -1,3 +1,16 @@\n+2004-02-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.def (BUILT_IN_SIGNBIT, BUILT_IN_SIGNBITF,\n+\tBUILT_IN_SIGNBITL): New GCC builtins.\n+\t* builtins.c (expand_builtin_signbit): New function to RTL expand\n+\tcalls to signbit, signbitf and signbitl as inline intrinsics.\n+\t(expand_builtin): Call expand_builtin_signbit for BUILT_IN_SIGNBIT*.\n+\t(fold_builtin_signbit): New function to perform constant folding\n+\tof signbit, signbitf and signbitl.\n+\t(fold_builtin): Call fold_builtin_signbit for BUILT_IN_SIGNBIT*.\n+\n+\t* doc/extend.texi: Document new signbit{,f,l} builtins.\n+\n 2004-02-01  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md (adddi3_internal_2): Remove superfluous %s."}, {"sha": "8b15e7c18d899a9c93fc71b40b0f006d186f1672", "filename": "gcc/builtins.c", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef79730c93540ee721d5403b276ec3d11a7c0123/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef79730c93540ee721d5403b276ec3d11a7c0123/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ef79730c93540ee721d5403b276ec3d11a7c0123", "patch": "@@ -152,6 +152,7 @@ static tree fold_trunc_transparent_mathfn (tree);\n static bool readonly_data_expr (tree);\n static rtx expand_builtin_fabs (tree, rtx, rtx);\n static rtx expand_builtin_cabs (tree, rtx);\n+static rtx expand_builtin_signbit (tree, rtx);\n static tree fold_builtin_cabs (tree, tree, tree);\n static tree fold_builtin_trunc (tree);\n static tree fold_builtin_floor (tree);\n@@ -166,6 +167,7 @@ static tree fold_builtin_strncpy (tree);\n static tree fold_builtin_memcmp (tree);\n static tree fold_builtin_strcmp (tree);\n static tree fold_builtin_strncmp (tree);\n+static tree fold_builtin_signbit (tree);\n \n /* Return the alignment in bits of EXP, a pointer valued expression.\n    But don't return more than MAX_ALIGN no matter what.\n@@ -4920,6 +4922,97 @@ expand_builtin_sprintf (tree arglist, rtx target, enum machine_mode mode)\n \n   return 0;\n }\n+\n+/* Expand a call to the built-in signbit, signbitf or signbitl function.\n+   Return NULL_RTX if a normal call should be emitted rather than expanding\n+   the function in-line.  EXP is the expression that is a call to the builtin\n+   function; if convenient, the result should be placed in TARGET.  */\n+\n+static rtx\n+expand_builtin_signbit (tree exp, rtx target)\n+{\n+  const struct real_format *fmt;\n+  enum machine_mode fmode, imode, rmode;\n+  HOST_WIDE_INT hi, lo;\n+  tree arg, arglist;\n+  int bitpos;\n+  rtx temp;\n+\n+  arglist = TREE_OPERAND (exp, 1);\n+  if (!validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n+    return 0;\n+\n+  arg = TREE_VALUE (arglist);\n+  fmode = TYPE_MODE (TREE_TYPE (arg));\n+  rmode = TYPE_MODE (TREE_TYPE (exp));\n+  fmt = REAL_MODE_FORMAT (fmode);\n+\n+  /* For floating point formats without a sign bit, implement signbit\n+     as \"ARG < 0.0\".  */\n+  if (fmt->signbit < 0)\n+  {\n+    /* But we can't do this if the format supports signed zero.  */\n+    if (fmt->has_signed_zero && HONOR_SIGNED_ZEROS (fmode))\n+      return 0;\n+\n+    arg = fold (build (LT_EXPR, TREE_TYPE (exp), arg,\n+\t\tbuild_real (TREE_TYPE (arg), dconst0)));\n+    return expand_expr (arg, target, VOIDmode, EXPAND_NORMAL);\n+  }\n+\n+  imode = int_mode_for_mode (fmode);\n+  if (imode == BLKmode)\n+    return 0;\n+\n+  bitpos = fmt->signbit;\n+  /* Handle targets with different FP word orders.  */\n+  if (FLOAT_WORDS_BIG_ENDIAN != WORDS_BIG_ENDIAN)\n+    {\n+      int nwords = GET_MODE_BITSIZE (fmode) / BITS_PER_WORD;\n+      int word = nwords - (bitpos / BITS_PER_WORD) - 1;\n+      bitpos = word * BITS_PER_WORD + bitpos % BITS_PER_WORD;\n+    }\n+\n+  /* If the sign bit is not in the lowpart and the floating point format\n+     is wider than an integer, check that is twice the size of an integer\n+     so that we can use gen_highpart below.  */\n+  if (bitpos >= GET_MODE_BITSIZE (rmode)\n+      && GET_MODE_BITSIZE (imode) != 2 * GET_MODE_BITSIZE (rmode))\n+    return 0;\n+\n+  temp = expand_expr (arg, NULL_RTX, VOIDmode, 0);\n+  temp = gen_lowpart (imode, temp);\n+\n+  if (GET_MODE_BITSIZE (imode) < GET_MODE_BITSIZE (rmode))\n+    temp = gen_lowpart (rmode, temp);\n+  else if (GET_MODE_BITSIZE (imode) > GET_MODE_BITSIZE (rmode))\n+    {\n+      if (bitpos > GET_MODE_BITSIZE (rmode))\n+\t{\n+\t  temp = gen_highpart (rmode, temp);\n+\t  bitpos %= GET_MODE_BITSIZE (rmode);\n+\t}\n+      else\n+\ttemp = gen_lowpart (rmode, temp);\n+    }\n+\n+  if (bitpos < HOST_BITS_PER_WIDE_INT)\n+    {\n+      hi = 0;\n+      lo = (HOST_WIDE_INT) 1 << bitpos;\n+    }\n+  else\n+    {\n+      hi = (HOST_WIDE_INT) 1 << (bitpos - HOST_BITS_PER_WIDE_INT);\n+      lo = 0;\n+    }\n+\n+  temp = force_reg (rmode, temp);\n+  temp = expand_binop (rmode, and_optab, temp,\n+\t\t       immed_double_const (lo, hi, rmode),\n+\t\t       target, 1, OPTAB_LIB_WIDEN);\n+  return temp;\n+}\n \f\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient\n@@ -5411,6 +5504,14 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \treturn target;\n       break;\n \n+    case BUILT_IN_SIGNBIT:\n+    case BUILT_IN_SIGNBITF:\n+    case BUILT_IN_SIGNBITL:\n+      target = expand_builtin_signbit (exp, target);\n+      if (target)\n+\treturn target;\n+      break;\n+\n       /* Various hooks for the DWARF 2 __throw routine.  */\n     case BUILT_IN_UNWIND_INIT:\n       expand_builtin_unwind_init ();\n@@ -6528,6 +6629,44 @@ fold_builtin_strncmp (tree exp)\n   return 0;\n }\n \n+/* Fold function call to builtin signbit, signbitf or signbitl.  Return\n+   NULL_TREE if no simplification can be made.  */\n+\n+static tree\n+fold_builtin_signbit (tree exp)\n+{\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  tree arg, temp;\n+\n+  if (!validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n+    return NULL_TREE;\n+\n+  arg = TREE_VALUE (arglist);\n+\n+  /* If ARG is a compile-time constant, determine the result.  */\n+  if (TREE_CODE (arg) == REAL_CST\n+      && !TREE_CONSTANT_OVERFLOW (arg))\n+    {\n+      REAL_VALUE_TYPE c;\n+\n+      c = TREE_REAL_CST (arg);\n+      temp = REAL_VALUE_NEGATIVE (c) ? integer_one_node : integer_zero_node;\n+      return convert (TREE_TYPE (exp), temp);\n+    }\n+\n+  /* If ARG is non-negative, the result is always zero.  */\n+  if (tree_expr_nonnegative_p (arg))\n+    return omit_one_operand (TREE_TYPE (exp), integer_zero_node, arg);\n+\n+  /* If ARG's format doesn't have signed zeros, return \"arg < 0.0\".  */\n+  if (!HONOR_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (arg))))\n+    return fold (build (LT_EXPR, TREE_TYPE (exp), arg,\n+\t\t\tbuild_real (TREE_TYPE (arg), dconst0)));\n+\n+  return NULL_TREE;\n+}\n+\n+\n /* Used by constant folding to eliminate some builtin calls early.  EXP is\n    the CALL_EXPR of a call to a builtin function.  */\n \n@@ -6949,6 +7088,11 @@ fold_builtin (tree exp)\n     case BUILT_IN_STRNCMP:\n       return fold_builtin_strncmp (exp);\n \n+    case BUILT_IN_SIGNBIT:\n+    case BUILT_IN_SIGNBITF:\n+    case BUILT_IN_SIGNBITL:\n+      return fold_builtin_signbit (exp);\n+\n     default:\n       break;\n     }"}, {"sha": "a81358052a107149c73d5108fac411c06bf631c4", "filename": "gcc/builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef79730c93540ee721d5403b276ec3d11a7c0123/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef79730c93540ee721d5403b276ec3d11a7c0123/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=ef79730c93540ee721d5403b276ec3d11a7c0123", "patch": "@@ -321,6 +321,9 @@ DEF_C99_BUILTIN        (BUILT_IN_SCALBLNL, \"scalblnl\", BT_FN_LONGDOUBLE_LONGDOUB\n DEF_C99_BUILTIN        (BUILT_IN_SCALBN, \"scalbn\", BT_FN_DOUBLE_DOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_SCALBNF, \"scalbnf\", BT_FN_FLOAT_FLOAT_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_SCALBNL, \"scalbnl\", BT_FN_LONGDOUBLE_LONGDOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBIT, \"signbit\", BT_FN_INT_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBITF, \"signbitf\", BT_FN_INT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBITL, \"signbitl\", BT_FN_INT_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNIFICAND, \"significand\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNIFICANDF, \"significandf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNIFICANDL, \"significandl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)"}, {"sha": "9f0f6b91d4ca8b73558a306110bfa562e6ba6e56", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef79730c93540ee721d5403b276ec3d11a7c0123/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef79730c93540ee721d5403b276ec3d11a7c0123/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ef79730c93540ee721d5403b276ec3d11a7c0123", "patch": "@@ -4988,6 +4988,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex scalbn\n @findex scalbnf\n @findex scanfnl\n+@findex signbit\n+@findex signbitf\n+@findex signbitl\n @findex significand\n @findex significandf\n @findex significandl\n@@ -5082,6 +5085,7 @@ Outside strict ISO C mode (@option{-ansi}, @option{-std=c89} or\n @code{j1}, @code{jnf}, @code{jnl}, @code{jn}, @code{mempcpy},\n @code{pow10f}, @code{pow10l}, @code{pow10}, @code{printf_unlocked},\n @code{rindex}, @code{scalbf}, @code{scalbl}, @code{scalb},\n+@code{signbit}, @code{signbitf}, @code{signbitl},\n @code{significandf}, @code{significandl}, @code{significand},\n @code{sincosf}, @code{sincosl}, @code{sincos}, @code{stpcpy},\n @code{strdup}, @code{strfmon}, @code{y0f}, @code{y0l}, @code{y0},"}, {"sha": "afd9ce64f244c10e58db831dd1b2e2b6713ec0c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef79730c93540ee721d5403b276ec3d11a7c0123/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef79730c93540ee721d5403b276ec3d11a7c0123/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef79730c93540ee721d5403b276ec3d11a7c0123", "patch": "@@ -1,3 +1,9 @@\n+2004-02-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/builtins-1.c: Also test for __builtin_signbit{,f,l}.\n+\t* gcc.dg/builtins-31.c: New testcase.\n+\t* gcc.dg/builtins-32.c: New testcase.\n+\n 2004-01-30  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* objc.dg/call-super-2.m: Update line numbers"}, {"sha": "18c45d1419b482246b48faf60be4475bd6aafe2e", "filename": "gcc/testsuite/gcc.dg/builtins-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef79730c93540ee721d5403b276ec3d11a7c0123/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef79730c93540ee721d5403b276ec3d11a7c0123/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c?ref=ef79730c93540ee721d5403b276ec3d11a7c0123", "patch": "@@ -165,6 +165,7 @@ FPTEST1     (round)\n FPTEST2     (scalb)\n FPTEST2ARG2 (scalbln, int)\n FPTEST2ARG2 (scalbn, int)\n+FPTEST1RET  (signbit, int)\n FPTEST1     (significand)\n FPTEST1     (sin)\n FPTEST3FPP23VOID (sincos)"}, {"sha": "6e1bda0b7ba14a497d2cbcd2a488c159fbbc4708", "filename": "gcc/testsuite/gcc.dg/builtins-31.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef79730c93540ee721d5403b276ec3d11a7c0123/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef79730c93540ee721d5403b276ec3d11a7c0123/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-31.c?ref=ef79730c93540ee721d5403b276ec3d11a7c0123", "patch": "@@ -0,0 +1,36 @@\n+/* Copyright (C) 2004 Free Software Foundation.\n+\n+   Check that constant folding of signbit, signbitf and signbitl math\n+   functions doesn't break anything and produces the expected results.\n+\n+   Written by Roger Sayle, 28th January 2004.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void link_error(void);\n+\n+extern int signbit(double);\n+extern int signbitf(float);\n+extern int signbitl(long double);\n+\n+int main()\n+{\n+  if (signbit (1.0) != 0)\n+    link_error ();\n+  if (signbit (-2.0) == 0)\n+    link_error ();\n+\n+  if (signbitf (1.0f) != 0)\n+    link_error ();\n+  if (signbitf (-2.0f) == 0)\n+    link_error ();\n+\n+  if (signbitl (1.0l) != 0)\n+    link_error ();\n+  if (signbitl (-2.0f) == 0)\n+    link_error ();\n+\n+  return 0;\n+}\n+"}, {"sha": "3a35dc6dfe9b2fa5b3d2940cd7ffe5831f69adbb", "filename": "gcc/testsuite/gcc.dg/builtins-32.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef79730c93540ee721d5403b276ec3d11a7c0123/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef79730c93540ee721d5403b276ec3d11a7c0123/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-32.c?ref=ef79730c93540ee721d5403b276ec3d11a7c0123", "patch": "@@ -0,0 +1,40 @@\n+/* Copyright (C) 2004 Free Software Foundation.\n+\n+   Check that constant folding of signbit, signbitf and signbitl math\n+   functions doesn't break anything and produces the expected results.\n+\n+   Written by Roger Sayle, 28th January 2004.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort(void);\n+\n+extern int signbit(double);\n+extern int signbitf(float);\n+\n+int test (double x)\n+{\n+  return signbit(x);\n+}\n+\n+int testf (float x)\n+{\n+  return signbitf(x);\n+}\n+\n+int main()\n+{\n+  if (test (1.0) != 0)\n+    abort ();\n+  if (test (-2.0) == 0)\n+    abort ();\n+\n+  if (testf (1.0f) != 0)\n+    abort ();\n+  if (testf (-2.0f) == 0)\n+    abort ();\n+\n+  return 0;\n+}\n+"}]}