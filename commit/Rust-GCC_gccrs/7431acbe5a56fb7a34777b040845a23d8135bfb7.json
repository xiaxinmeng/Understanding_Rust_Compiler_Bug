{"sha": "7431acbe5a56fb7a34777b040845a23d8135bfb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQzMWFjYmU1YTU2ZmI3YTM0Nzc3YjA0MDg0NWEyM2Q4MTM1YmZiNw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-04-20T10:37:07Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-04-20T10:37:07Z"}, "message": "AWTPermission.java, [...]: Fixed HTML tags in javadocs all over.\n\n2004-04-20  Michael Koch  <konqueror@gmx.de>\n\n\t* java/awt/AWTPermission.java,\n\tjava/awt/Component.java,\n\tjava/awt/ComponentOrientation.java,,\n\tjava/awt/Dialog.java,\n\tjava/awt/FontMetrics.java,\n\tjava/awt/Graphics.java,\n\tjava/awt/datatransfer/DataFlavor.java,\n\tjava/beans/Introspector.java,\n\tjava/beans/PropertyEditor.java,\n\tjava/beans/PropertyEditorManager.java,\n\tjava/beans/beancontext/BeanContextServiceProvider.java:\n\tFixed HTML tags in javadocs all over.\n\nFrom-SVN: r80890", "tree": {"sha": "e3e770fb691156966870b35eb1ac0629a2dd3429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3e770fb691156966870b35eb1ac0629a2dd3429"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7431acbe5a56fb7a34777b040845a23d8135bfb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7431acbe5a56fb7a34777b040845a23d8135bfb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7431acbe5a56fb7a34777b040845a23d8135bfb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7431acbe5a56fb7a34777b040845a23d8135bfb7/comments", "author": null, "committer": null, "parents": [{"sha": "7f6f517f8a06729652fa201e85dc90dae4740972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f6f517f8a06729652fa201e85dc90dae4740972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f6f517f8a06729652fa201e85dc90dae4740972"}], "stats": {"total": 101, "additions": 59, "deletions": 42}, "files": [{"sha": "c5ab5204c8badba1dc8fc0ff8fba504c332c3a35", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7431acbe5a56fb7a34777b040845a23d8135bfb7", "patch": "@@ -1,3 +1,18 @@\n+2004-04-20  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/awt/AWTPermission.java,\n+\tjava/awt/Component.java,\n+\tjava/awt/ComponentOrientation.java,,\n+\tjava/awt/Dialog.java,\n+\tjava/awt/FontMetrics.java,\n+\tjava/awt/Graphics.java,\n+\tjava/awt/datatransfer/DataFlavor.java,\n+\tjava/beans/Introspector.java,\n+\tjava/beans/PropertyEditor.java,\n+\tjava/beans/PropertyEditorManager.java,\n+\tjava/beans/beancontext/BeanContextServiceProvider.java:\n+\tFixed HTML tags in javadocs all over.\n+\n 2004-04-20  Mark Wielaard  <mark@klomp.org>\n \n \t* gnu/java/awt/peer/gtk/GtkFontPeer.java: Use fallback when"}, {"sha": "b5ba63d58d0cca23b1d720994045b26b3f6fd20f", "filename": "libjava/java/awt/AWTPermission.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fawt%2FAWTPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fawt%2FAWTPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FAWTPermission.java?ref=7431acbe5a56fb7a34777b040845a23d8135bfb7", "patch": "@@ -79,7 +79,7 @@\n  * <tr>\n  *   <td><code>fullScreenExclusive</code></td>\n  *   <td>enter full-screen exclusive mode</td>\n- *   <td>malicious code could masquerade as a trusted program</td><tr>\n+ *   <td>malicious code could masquerade as a trusted program</td></tr>\n  * </table>\n  *\n  * @author Tom Tromey <tromey@redhat.com>"}, {"sha": "d52818af68364f11635a43588e69a28804e4df9b", "filename": "libjava/java/awt/Component.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fawt%2FComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fawt%2FComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FComponent.java?ref=7431acbe5a56fb7a34777b040845a23d8135bfb7", "patch": "@@ -105,7 +105,7 @@\n  * in inner classes, rather than using this object itself as the listener, if\n  * external objects do not need to save the state of this object.\n  *\n- * <p><pre>\n+ * <pre>\n  * import java.awt.*;\n  * import java.awt.event.*;\n  * import java.io.Serializable;\n@@ -127,6 +127,7 @@\n  *     aButton.addActionListener(new MyActionListener());\n  *   }\n  * }\n+ * </pre>\n  *\n  * <p>Status: Incomplete. The event dispatch mechanism is implemented. All\n  * other methods defined in the J2SE 1.3 API javadoc exist, but are mostly"}, {"sha": "02cf5967ff2a78f10fda72c54cc989bb4988a243", "filename": "libjava/java/awt/ComponentOrientation.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fawt%2FComponentOrientation.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fawt%2FComponentOrientation.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FComponentOrientation.java?ref=7431acbe5a56fb7a34777b040845a23d8135bfb7", "patch": "@@ -171,13 +171,15 @@ public static ComponentOrientation getOrientation(Locale locale)\n   }\n \n   /**\n-   * Gets an orientation from a resource bundle. This tries the following:<ol>\n+   * Gets an orientation from a resource bundle. This tries the following:\n+   *\n+   * <ul>\n    * <li>Use the key \"Orientation\" to find an instance of ComponentOrientation\n    * in the bundle.</li>\n    * <li>Get the locale of the resource bundle, and get the orientation of\n    * that locale.</li>\n-   * <li>Give up and get the orientation of the default locale.<li>\n-   * <ol>\n+   * <li>Give up and get the orientation of the default locale.</li>\n+   * </ul>\n    *\n    * @param bdl the bundle to use\n    * @return the orientation"}, {"sha": "6bfb80c8563f1fed044f23d2d833ea9a7a24b5ca", "filename": "libjava/java/awt/Dialog.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fawt%2FDialog.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fawt%2FDialog.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FDialog.java?ref=7431acbe5a56fb7a34777b040845a23d8135bfb7", "patch": "@@ -123,8 +123,8 @@ public class Dialog extends Window\n   * parent and modality, that is resizable and which has no title.\n   *\n   * @param parent The parent frame of this dialog box.\n-  * @param modal <true> if this dialog box is modal, <code>false</code>\n-  * otherwise.\n+  * @param modal <code>true</code> if this dialog box is modal,\n+  * <code>false</code> otherwise.\n   *\n   * @exception IllegalArgumentException If the owner's GraphicsConfiguration\n   * is not from a screen device, or if owner is null. This exception is always\n@@ -164,8 +164,8 @@ public class Dialog extends Window\n   *\n   * @param parent The parent frame of this dialog box.\n   * @param title The title string for this dialog box.\n-  * @param modal <true> if this dialog box is modal, <code>false</code>\n-  * otherwise.\n+  * @param modal <code>true</code> if this dialog box is modal,\n+  * <code>false</code> otherwise.\n   *\n   * @exception IllegalArgumentException If owner is null or\n   * GraphicsEnvironment.isHeadless() returns true.\n@@ -183,8 +183,8 @@ public class Dialog extends Window\n  *\n  * @param parent The parent frame of this dialog box.\n  * @param title The title string for this dialog box.\n- * @param modal <true> if this dialog box is modal, <code>false</code>\n- * otherwise.\n+ * @param modal <code>true</code> if this dialog box is modal,\n+ * <code>false</code> otherwise.\n  * @param gc The <code>GraphicsConfiguration</code> object to use.\n  *\n  * @exception IllegalArgumentException If owner is null, the"}, {"sha": "6a1a1c09ce1d318ed88990585a31cfa55cc7b83f", "filename": "libjava/java/awt/FontMetrics.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fawt%2FFontMetrics.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fawt%2FFontMetrics.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFontMetrics.java?ref=7431acbe5a56fb7a34777b040845a23d8135bfb7", "patch": "@@ -47,12 +47,12 @@\n   * least the following methods:\n   * <p>\n   * <ul>\n-  * <li>getAscent\n-  * <li>getDescent\n-  * <li>getLeading()\n-  * <li>getMaxAdvance()\n-  * <li>charWidth(char)\n-  * <li>charsWidth(char[], int, int)\n+  * <li>getAscent()</li>\n+  * <li>getDescent()</li>\n+  * <li>getLeading()</li>\n+  * <li>getMaxAdvance()</li>\n+  * <li>charWidth(char)</li>\n+  * <li>charsWidth(char[], int, int)</li>\n   * </ul>\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)"}, {"sha": "d2207ead1c33b149e455315550a5d7dc17090419", "filename": "libjava/java/awt/Graphics.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fawt%2FGraphics.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fawt%2FGraphics.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FGraphics.java?ref=7431acbe5a56fb7a34777b040845a23d8135bfb7", "patch": "@@ -1,5 +1,5 @@\n /* Graphics.java -- Abstract Java drawing class\n-   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n "}, {"sha": "3ec21911929c04b03e6e23004f8a7f6356b4f2ca", "filename": "libjava/java/awt/datatransfer/DataFlavor.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fawt%2Fdatatransfer%2FDataFlavor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fawt%2Fdatatransfer%2FDataFlavor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdatatransfer%2FDataFlavor.java?ref=7431acbe5a56fb7a34777b040845a23d8135bfb7", "patch": "@@ -270,7 +270,7 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /**\n  * Initializes a new instance of <code>DataFlavor</code> with the\n  * specified MIME type and description.  If the MIME type has a\n- * \"class=<rep class>\" parameter then the representation class will\n+ * \"class=&lt;rep class&gt;\" parameter then the representation class will\n  * be the class name specified. Otherwise the class defaults to\n  * <code>java.io.InputStream</code>. If the human readable name\n  * is not specified (<code>null</code>) then the human readable name\n@@ -319,7 +319,7 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n /**\n  * Initializes a new instance of <code>DataFlavor</code> with the\n  * specified MIME type and description.  If the MIME type has a\n- * \"class=<rep class>\" parameter then the representation class will\n+ * \"class=&lt;rep class&gt;\" parameter then the representation class will\n  * be the class name specified. Otherwise the class defaults to\n  * <code>java.io.InputStream</code>. If the human readable name\n  * is not specified (<code>null</code>) then the human readable name\n@@ -709,10 +709,10 @@ public Object clone () throws CloneNotSupportedException\n  * are met:\n  * <p>\n  * <ul>\n- * <li>The object is not <code>null</code>.\n- * <li>The object is an instance of <code>DataFlavor</code>.\n+ * <li>The object is not <code>null</code>.</li>\n+ * <li>The object is an instance of <code>DataFlavor</code>.</li>\n  * <li>The object's MIME type and representation class are equal to\n- * this object's.\n+ * this object's.</li>\n  * </ul>\n  *\n  * @param obj The <code>Object</code> to test against."}, {"sha": "b3f67c521babca5f79047d17ad1322337370ac20", "filename": "libjava/java/beans/Introspector.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fbeans%2FIntrospector.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fbeans%2FIntrospector.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FIntrospector.java?ref=7431acbe5a56fb7a34777b040845a23d8135bfb7", "patch": "@@ -65,7 +65,7 @@\n  * When you call getBeanInfo(class c), the Introspector\n  * first searches for BeanInfo class to see if you\n  * provided any explicit information.  It searches for a\n- * class named <bean class name>BeanInfo in different\n+ * class named &lt;bean class name&gt;BeanInfo in different\n  * packages, first searching the bean class's package\n  * and then moving on to search the beanInfoSearchPath.<P>\n  *\n@@ -113,14 +113,14 @@\n  *     type &lt;type&gt;.  There may also be a\n  *     <CODE>public &lt;type&gt;[] getXXX()</CODE> and a\n  *     <CODE>public void setXXX(&lt;type&gt;)</CODE>\n- *     method as well.</CODE></LI>\n+ *     method as well.</LI>\n  * <LI>If there is a\n  *     <CODE>public void setXXX(int,&lt;type&gt;)</CODE>\n  *     method, then it is a write-only indexed property of\n  *     type &lt;type&gt;.  There may also be a\n  *     <CODE>public &lt;type&gt;[] getXXX()</CODE> and a\n  *     <CODE>public void setXXX(&lt;type&gt;)</CODE>\n- *     method as well.</CODE></LI>\n+ *     method as well.</LI>\n  * <LI>If there is a\n  *     <CODE>public &lt;type&gt; getXXX()</CODE> method,\n  *     then XXX is a read-only property of type"}, {"sha": "5cc3f6ab05f72cb2da3d42c93ea1289781dbfd78", "filename": "libjava/java/beans/PropertyEditor.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fbeans%2FPropertyEditor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fbeans%2FPropertyEditor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FPropertyEditor.java?ref=7431acbe5a56fb7a34777b040845a23d8135bfb7", "patch": "@@ -77,7 +77,7 @@\n  **       have isPaintable() return true and implement the paintValue() method.\n  **       This method does not determine in any way how the value is edited;\n  **       merely how it is displayed.</LI>\n- **   <LU>Let the caller of the PropertyEditor give the user a text input.  Do\n+ **   <LI>Let the caller of the PropertyEditor give the user a text input.  Do\n  **       this by returning a non-null String from getAsText().  If you support\n  **       text input, you *must* support setAsText().</LI>\n  **   <LI>Give the caller a set of possible values, such as \"true\"/\"false\", that"}, {"sha": "85c9ba5d8dcdb2b72f6a259923cd6112a1041d33", "filename": "libjava/java/beans/PropertyEditorManager.java", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fbeans%2FPropertyEditorManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fbeans%2FPropertyEditorManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FPropertyEditorManager.java?ref=7431acbe5a56fb7a34777b040845a23d8135bfb7", "patch": "@@ -60,19 +60,20 @@\n  * already registered; if it is, that property editor is\n  * used.  Next it takes the type's classname and appends\n  * \"Editor\" to it, and searches first in the class's\n- * package and then in the property editor search path.<P>\n+ * package and then in the property editor search path.\n  *\n- * Default property editors are provided for:<P>\n- * <OL>\n- * <LI>boolean, byte, short, int, long, float, and double</LI>\n- * <LI>java.lang.String</LI>\n- * <LI>java.awt.Color</LI>\n- * <LI>java.awt.Font</LI>\n- * <OL>\n+ * <p>Default property editors are provided for:</p>\n+ * \n+ * <ol>\n+ * <li>boolean, byte, short, int, long, float, and double</li>\n+ * <li>java.lang.String</li>\n+ * <li>java.awt.Color</li>\n+ * <li>java.awt.Font</li>\n+ * </ol>\n  *\n- * <STRONG>Spec Suggestion:</STRONG> Perhaps an editor for\n+ * <p><strong>Spec Suggestion:</strong> Perhaps an editor for\n  * Filename or something like it should be provided.  As well\n- * as char.\n+ * as char.</p>\n  *\n  * @author John Keiser\n  * @since 1.1"}, {"sha": "cc2c935b3820276f2111a0b1215163e9c0971d25", "filename": "libjava/java/beans/beancontext/BeanContextServiceProvider.java", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextServiceProvider.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431acbe5a56fb7a34777b040845a23d8135bfb7/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextServiceProvider.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextServiceProvider.java?ref=7431acbe5a56fb7a34777b040845a23d8135bfb7", "patch": "@@ -62,14 +62,12 @@\n public interface BeanContextServiceProvider {\n \t/**\n \t * Get a service.\n-\t * Called from <code>BeanContextServices.getService().\n-\t * <P>\n+\t * Called from <code>BeanContextServices.getService()</code>.\n \t *\n-\t * If the requested service class is not available, or if this\n+\t * <p>If the requested service class is not available, or if this\n \t * <code>BeanContextServiceProvider</code> chooses not honor the\n \t * request for some reason, then this method will return\n-\t * <code>null</code>.\n-\t * <P>\n+\t * <code>null</code>.</p>\n \t *\n \t * This method may throw unchecked exceptions, so watch out.\n \t *"}]}