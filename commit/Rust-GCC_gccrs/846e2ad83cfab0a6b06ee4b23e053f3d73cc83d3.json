{"sha": "846e2ad83cfab0a6b06ee4b23e053f3d73cc83d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ2ZTJhZDgzY2ZhYjBhNmIwNmVlNGIyM2UwNTNmM2Q3M2NjODNkMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-09-27T18:02:36Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-09-27T18:02:36Z"}, "message": "predicates.md (register_sse4nonimm_operand): New predicate.\n\n\t* config/i386/predicates.md (register_sse4nonimm_operand): New\n\tpredicate.\n\t* config/i386/sse.md (PEXTR_MODE12): New mode iterator.\n\t(*vec_extract<mode>): Use PEXTR_MODE12 instead of VI12_128 mode.\n\tUse register_sse4nonimm_operand as operand 0 predicate.\n\t(*vec_extractv8hi_sse2): Remove insn pattern.\n\t(*vec_extract<PEXTR_MODE12:mode>_zext): Merge insn pattern from\n\t*vec_extractv8hi_zext and *vec_extractv16qi_zext patterns.\n\nFrom-SVN: r228178", "tree": {"sha": "f0ccd188ad57f78158cc147139613a7a823808f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0ccd188ad57f78158cc147139613a7a823808f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/846e2ad83cfab0a6b06ee4b23e053f3d73cc83d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846e2ad83cfab0a6b06ee4b23e053f3d73cc83d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/846e2ad83cfab0a6b06ee4b23e053f3d73cc83d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846e2ad83cfab0a6b06ee4b23e053f3d73cc83d3/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9e807369f827025e5055bfeac1d4fc7d7f9a70c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9e807369f827025e5055bfeac1d4fc7d7f9a70c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9e807369f827025e5055bfeac1d4fc7d7f9a70c"}], "stats": {"total": 88, "additions": 40, "deletions": 48}, "files": [{"sha": "5c956045c86681bc3091deca611ae9f604add1ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846e2ad83cfab0a6b06ee4b23e053f3d73cc83d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846e2ad83cfab0a6b06ee4b23e053f3d73cc83d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=846e2ad83cfab0a6b06ee4b23e053f3d73cc83d3", "patch": "@@ -1,3 +1,14 @@\n+2015-09-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (register_sse4nonimm_operand): New\n+\tpredicate.\n+\t* config/i386/sse.md (PEXTR_MODE12): New mode iterator.\n+\t(*vec_extract<mode>): Use PEXTR_MODE12 instead of VI12_128 mode.\n+\tUse register_sse4nonimm_operand as operand 0 predicate.\n+\t(*vec_extractv8hi_sse2): Remove insn pattern.\n+\t(*vec_extract<PEXTR_MODE12:mode>_zext): Merge insn pattern from\n+\t*vec_extractv8hi_zext and *vec_extractv16qi_zext patterns.\n+\n 2015-09-27  Oleg Endo  <olegendo@gcc.gnu.org>\n \t    Kaz Kojima  <kkojima@gcc.gnu.org>\n "}, {"sha": "042b9494a2bf46593694cb2b3c901062adb2bb4c", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846e2ad83cfab0a6b06ee4b23e053f3d73cc83d3/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846e2ad83cfab0a6b06ee4b23e053f3d73cc83d3/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=846e2ad83cfab0a6b06ee4b23e053f3d73cc83d3", "patch": "@@ -127,6 +127,12 @@\n     (match_operand 0 \"nonimmediate_operand\")\n     (match_operand 0 \"register_operand\")))\n \n+;; Match register operands, include memory operand for TARGET_SSE4_1.\n+(define_predicate \"register_sse4nonimm_operand\"\n+  (if_then_else (match_test \"TARGET_SSE4_1\")\n+    (match_operand 0 \"nonimmediate_operand\")\n+    (match_operand 0 \"register_operand\")))\n+\n ;; Return true if VALUE is symbol reference\n (define_predicate \"symbol_operand\"\n   (match_code \"symbol_ref\"))"}, {"sha": "4eefb4529b87980e2bf231117fda2b448d10ddb8", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 23, "deletions": 48, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846e2ad83cfab0a6b06ee4b23e053f3d73cc83d3/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846e2ad83cfab0a6b06ee4b23e053f3d73cc83d3/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=846e2ad83cfab0a6b06ee4b23e053f3d73cc83d3", "patch": "@@ -12864,23 +12864,21 @@\n    (set_attr \"prefix\" \"maybe_vex,maybe_vex,orig,orig,vex\")\n    (set_attr \"mode\" \"TI,TI,V4SF,SF,SF\")])\n \n+;; QI and HI modes handled by pextr patterns.\n+(define_mode_iterator PEXTR_MODE12\n+  [(V16QI \"TARGET_SSE4_1\") V8HI])\n+\n (define_insn \"*vec_extract<mode>\"\n-  [(set (match_operand:<ssescalarmode> 0 \"nonimmediate_operand\" \"=r,m\")\n+  [(set (match_operand:<ssescalarmode> 0 \"register_sse4nonimm_operand\" \"=r,m\")\n \t(vec_select:<ssescalarmode>\n-\t  (match_operand:VI12_128 1 \"register_operand\" \"x,x\")\n+\t  (match_operand:PEXTR_MODE12 1 \"register_operand\" \"x,x\")\n \t  (parallel\n \t    [(match_operand:SI 2 \"const_0_to_<ssescalarnummask>_operand\")])))]\n-  \"TARGET_SSE4_1\"\n-  \"@\n-   %vpextr<ssemodesuffix>\\t{%2, %1, %k0|%k0, %1, %2}\n-   %vpextr<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog1\")\n-   (set (attr \"prefix_data16\")\n-     (if_then_else\n-       (and (eq_attr \"alternative\" \"0\")\n-\t    (eq (const_string \"<MODE>mode\") (const_string \"V8HImode\")))\n-       (const_string \"1\")\n-       (const_string \"*\")))\n+  \"TARGET_SSE2\"\n+  \"%vpextr<ssemodesuffix>\\t{%2, %1, %k0|%k0, %1, %2}\"\n+  [(set_attr \"isa\" \"*,sse4\")\n+   (set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_data16\" \"1\")\n    (set (attr \"prefix_extra\")\n      (if_then_else\n        (and (eq_attr \"alternative\" \"0\")\n@@ -12891,45 +12889,23 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*vec_extractv8hi_sse2\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(vec_select:HI\n-\t  (match_operand:V8HI 1 \"register_operand\" \"x\")\n-\t  (parallel\n-\t    [(match_operand:SI 2 \"const_0_to_7_operand\")])))]\n-  \"TARGET_SSE2 && !TARGET_SSE4_1\"\n-  \"pextrw\\t{%2, %1, %k0|%k0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog1\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*vec_extractv16qi_zext\"\n-  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(zero_extend:SWI48\n-\t  (vec_select:QI\n-\t    (match_operand:V16QI 1 \"register_operand\" \"x\")\n-\t    (parallel\n-\t      [(match_operand:SI 2 \"const_0_to_15_operand\")]))))]\n-  \"TARGET_SSE4_1\"\n-  \"%vpextrb\\t{%2, %1, %k0|%k0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog1\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*vec_extractv8hi_zext\"\n+(define_insn \"*vec_extract<PEXTR_MODE12:mode>_zext\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(zero_extend:SWI48\n-\t  (vec_select:HI\n-\t    (match_operand:V8HI 1 \"register_operand\" \"x\")\n+\t  (vec_select:<PEXTR_MODE12:ssescalarmode>\n+\t    (match_operand:PEXTR_MODE12 1 \"register_operand\" \"x\")\n \t    (parallel\n-\t      [(match_operand:SI 2 \"const_0_to_7_operand\")]))))]\n+\t      [(match_operand:SI 2\n+\t\t\"const_0_to_<PEXTR_MODE12:ssescalarnummask>_operand\")]))))]\n   \"TARGET_SSE2\"\n-  \"%vpextrw\\t{%2, %1, %k0|%k0, %1, %2}\"\n+  \"%vpextr<PEXTR_MODE12:ssemodesuffix>\\t{%2, %1, %k0|%k0, %1, %2}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_data16\" \"1\")\n+   (set (attr \"prefix_extra\")\n+     (if_then_else\n+       (eq (const_string \"<PEXTR_MODE12:MODE>mode\") (const_string \"V8HImode\"))\n+       (const_string \"*\")\n+       (const_string \"1\")))\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n@@ -18347,8 +18323,7 @@\n \t\t\t      3 \"register_operand\")\n \t\t\t   (match_operand:SI 5 \"const1248_operand \")]))\n \t\t      (mem:BLK (scratch))\n-\t\t      (match_operand:<VEC_GATHER_SRCDI>\n-\t\t\t4 \"register_operand\")]\n+\t\t      (match_operand:<VEC_GATHER_SRCDI> 4 \"register_operand\")]\n \t\t     UNSPEC_GATHER))\n \t      (clobber (match_scratch:VEC_GATHER_MODE 6))])]\n   \"TARGET_AVX2\""}]}