{"sha": "d09b76f1533e68693677cd41527761e8cfafe49f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA5Yjc2ZjE1MzNlNjg2OTM2NzdjZDQxNTI3NzYxZThjZmFmZTQ5Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-17T02:34:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-17T02:34:20Z"}, "message": "parser.c (lookup_literal_operator): Correct parm/arg naming mixup.\n\n\t* parser.c (lookup_literal_operator): Correct parm/arg naming\n\tmixup.\n\nFrom-SVN: r196725", "tree": {"sha": "9eb0113404c195f46d86728e03dd64de9c5ca6dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9eb0113404c195f46d86728e03dd64de9c5ca6dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d09b76f1533e68693677cd41527761e8cfafe49f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d09b76f1533e68693677cd41527761e8cfafe49f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d09b76f1533e68693677cd41527761e8cfafe49f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d09b76f1533e68693677cd41527761e8cfafe49f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "011ce3f3c2d1a534b2671ed6d5204fec9120fff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/011ce3f3c2d1a534b2671ed6d5204fec9120fff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/011ce3f3c2d1a534b2671ed6d5204fec9120fff7"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "14bab43a32bd4f3c3bd58ff8bc33e0c367e8644d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09b76f1533e68693677cd41527761e8cfafe49f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09b76f1533e68693677cd41527761e8cfafe49f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d09b76f1533e68693677cd41527761e8cfafe49f", "patch": "@@ -1,5 +1,8 @@\n 2013-03-16  Jason Merrill  <jason@redhat.com>\n \n+\t* parser.c (lookup_literal_operator): Correct parm/arg naming\n+\tmixup.\n+\n \tPR c++/56238\n \t* pt.c (fold_non_dependent_expr_sfinae): Check\n \tinstantiation_dependent_expression_p."}, {"sha": "12926e3d9d43da1d83492ff3dd2c6d0a6568cb37", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09b76f1533e68693677cd41527761e8cfafe49f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09b76f1533e68693677cd41527761e8cfafe49f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d09b76f1533e68693677cd41527761e8cfafe49f", "patch": "@@ -3559,21 +3559,20 @@ lookup_literal_operator (tree name, vec<tree, va_gc> *args)\n       unsigned int ix;\n       bool found = true;\n       tree fn = OVL_CURRENT (fns);\n-      tree argtypes = NULL_TREE;\n-      argtypes = TYPE_ARG_TYPES (TREE_TYPE (fn));\n-      if (argtypes != NULL_TREE)\n+      tree parmtypes = TYPE_ARG_TYPES (TREE_TYPE (fn));\n+      if (parmtypes != NULL_TREE)\n \t{\n-\t  for (ix = 0; ix < vec_safe_length (args) && argtypes != NULL_TREE;\n-\t       ++ix, argtypes = TREE_CHAIN (argtypes))\n+\t  for (ix = 0; ix < vec_safe_length (args) && parmtypes != NULL_TREE;\n+\t       ++ix, parmtypes = TREE_CHAIN (parmtypes))\n \t    {\n-\t      tree targ = TREE_VALUE (argtypes);\n-\t      tree tparm = TREE_TYPE ((*args)[ix]);\n-\t      bool ptr = TREE_CODE (targ) == POINTER_TYPE;\n-\t      bool arr = TREE_CODE (tparm) == ARRAY_TYPE;\n-\t      if ((ptr || arr || !same_type_p (targ, tparm))\n+\t      tree tparm = TREE_VALUE (parmtypes);\n+\t      tree targ = TREE_TYPE ((*args)[ix]);\n+\t      bool ptr = TREE_CODE (tparm) == POINTER_TYPE;\n+\t      bool arr = TREE_CODE (targ) == ARRAY_TYPE;\n+\t      if ((ptr || arr || !same_type_p (tparm, targ))\n \t\t  && (!ptr || !arr\n-\t\t      || !same_type_p (TREE_TYPE (targ),\n-\t\t\t\t       TREE_TYPE (tparm))))\n+\t\t      || !same_type_p (TREE_TYPE (tparm),\n+\t\t\t\t       TREE_TYPE (targ))))\n \t\tfound = false;\n \t    }\n \t  if (found\n@@ -3582,7 +3581,7 @@ lookup_literal_operator (tree name, vec<tree, va_gc> *args)\n \t\t depending on how exactly should user-defined literals\n \t\t work in presence of default arguments on the literal\n \t\t operator parameters.  */\n-\t      && argtypes == void_list_node)\n+\t      && parmtypes == void_list_node)\n \t    return fn;\n \t}\n     }"}]}