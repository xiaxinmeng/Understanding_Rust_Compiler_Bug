{"sha": "a6d8c61a498e9daa1bc7fe419055ae44ad8289cc", "node_id": "C_kwDOANBUbNoAKGE2ZDhjNjFhNDk4ZTlkYWExYmM3ZmU0MTkwNTVhZTQ0YWQ4Mjg5Y2M", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-30T16:40:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-30T16:41:15Z"}, "message": "i386, rs6000, ia64, s390: Fix C++ ICEs with _Float64x or _Float128 [PR107080]\n\nThe following testcase ICEs on x86 as well as ppc64le (the latter\nwith -mabi=ieeelongdouble), because _Float64x there isn't mangled as\nDF64x but e or u9__ieee128 instead.\nThose are the mangling that should be used for the non-standard\ntypes with the same mode or for long double, but not for _Float64x.\nAll the 4 mangle_type targhook implementations start with\ntype = TYPE_MAIN_VARIANT (type);\nso I think it is cleanest to handle it the same in all and return NULL\nbefore the switches on mode or whatever other tests.\ns390 doesn't actually have a bug, but while I was there, having\ntype = TYPE_MAIN_VARIANT (type);\nif (TYPE_MAIN_VARIANT (type) == long_double_type_node)\nlooked useless to me.\n\nNote, there is one further problem on aarch64/arm, types with HFmode\n(_Float16 and __fp16) are there mangled as Dh (which is standard\nItanium mangling:\n                 ::= Dh # IEEE 754r half-precision floating point (16 bits)\n                 ::= DF <number> _ # ISO/IEC TS 18661 binary floating point type _FloatN (N bits)\nso in theory is also ok, but DF16_ is more specific.  Should we just\nchange Dh to DF16_ in those backends, or should __fp16 there be distinct\ntype from _Float16 where __fp16 would mangle Dh and _Float16 DF16_ ?\nAnd there is csky, which mangles __fp16 (but only if type's name is __fp16,\nnot _Float16) as __fp16, that looks clearly invalid to me as it isn't\nvalid in the mangling grammar.  So perhaps just nuke csky's mangle_type\nand have it mangled as DF16_ by the generic code?\n\n2022-09-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/107080\n\t* config/i386/i386.cc (ix86_mangle_type): Always return NULL\n\tfor float128_type_node or float64x_type_node, don't check\n\tfloat128t_type_node later on.\n\t* config/ia64/ia64.cc (ia64_mangle_type): Always return NULL\n\tfor float128_type_node or float64x_type_node.\n\t* config/rs6000/rs6000.cc (rs6000_mangle_type): Likewise.\n\tDon't check float128_type_node later on.\n\t* config/s390/s390.cc (s390_mangle_type): Don't use\n\tTYPE_MAIN_VARIANT on type which was set to TYPE_MAIN_VARIANT\n\ta few lines earlier.\n\n\t* g++.dg/cpp23/ext-floating11.C: New test.", "tree": {"sha": "3f09f79f74289d48455809b61a3caabfa58906dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f09f79f74289d48455809b61a3caabfa58906dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6d8c61a498e9daa1bc7fe419055ae44ad8289cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6d8c61a498e9daa1bc7fe419055ae44ad8289cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6d8c61a498e9daa1bc7fe419055ae44ad8289cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6d8c61a498e9daa1bc7fe419055ae44ad8289cc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe8264bb9bb1d989c54e55c7a267c2922aa489d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe8264bb9bb1d989c54e55c7a267c2922aa489d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe8264bb9bb1d989c54e55c7a267c2922aa489d9"}], "stats": {"total": 102, "additions": 91, "deletions": 11}, "files": [{"sha": "ff4de2d6dd553935578950a3b1e8cfd85e1db688", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d8c61a498e9daa1bc7fe419055ae44ad8289cc/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d8c61a498e9daa1bc7fe419055ae44ad8289cc/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=a6d8c61a498e9daa1bc7fe419055ae44ad8289cc", "patch": "@@ -22725,6 +22725,9 @@ ix86_mangle_type (const_tree type)\n       && TREE_CODE (type) != INTEGER_TYPE && TREE_CODE (type) != REAL_TYPE)\n     return NULL;\n \n+  if (type == float128_type_node || type == float64x_type_node)\n+    return NULL;\n+\n   switch (TYPE_MODE (type))\n     {\n     case E_BFmode:\n@@ -22735,10 +22738,7 @@ ix86_mangle_type (const_tree type)\n       return \"DF16_\";\n     case E_TFmode:\n       /* __float128 is \"g\".  */\n-      if (type == float128t_type_node)\n-\treturn \"g\";\n-      /* _Float128 should mangle as \"DF128_\" done in generic code.  */\n-      return NULL;\n+      return \"g\";\n     case E_XFmode:\n       /* \"long double\" or __float80 is \"e\".  */\n       return \"e\";"}, {"sha": "995ff9069407e56ac510970b239208900cb85a2c", "filename": "gcc/config/ia64/ia64.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d8c61a498e9daa1bc7fe419055ae44ad8289cc/gcc%2Fconfig%2Fia64%2Fia64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d8c61a498e9daa1bc7fe419055ae44ad8289cc/gcc%2Fconfig%2Fia64%2Fia64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.cc?ref=a6d8c61a498e9daa1bc7fe419055ae44ad8289cc", "patch": "@@ -11225,6 +11225,9 @@ ia64_mangle_type (const_tree type)\n       && TREE_CODE (type) != INTEGER_TYPE && TREE_CODE (type) != REAL_TYPE)\n     return NULL;\n \n+  if (type == float128_type_node || type == float64x_type_node)\n+    return NULL;\n+\n   /* On HP-UX, \"long double\" is mangled as \"e\" so __float128 is\n      mangled as \"e\".  */\n   if (!TARGET_HPUX && TYPE_MODE (type) == TFmode)"}, {"sha": "d2743f7bce68272662cf7be65fdbdad59d911ee4", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d8c61a498e9daa1bc7fe419055ae44ad8289cc/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d8c61a498e9daa1bc7fe419055ae44ad8289cc/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=a6d8c61a498e9daa1bc7fe419055ae44ad8289cc", "patch": "@@ -20276,13 +20276,12 @@ rs6000_mangle_type (const_tree type)\n   if (type == bool_int_type_node) return \"U6__booli\";\n   if (type == bool_long_long_type_node) return \"U6__boolx\";\n \n+  if (type == float128_type_node || type == float64x_type_node)\n+    return NULL;\n+\n   if (SCALAR_FLOAT_TYPE_P (type) && FLOAT128_IBM_P (TYPE_MODE (type)))\n     return \"g\";\n-  if (SCALAR_FLOAT_TYPE_P (type)\n-      && FLOAT128_IEEE_P (TYPE_MODE (type))\n-      /* _Float128 should mangle as DF128_ (done in generic code)\n-\t rather than u9__ieee128 (used for __ieee128 and __float128).  */\n-      && type != float128_type_node)\n+  if (SCALAR_FLOAT_TYPE_P (type) && FLOAT128_IEEE_P (TYPE_MODE (type)))\n     return \"u9__ieee128\";\n \n   if (type == vector_pair_type_node)"}, {"sha": "ae309471f043437fb9a8a57a4c6a5d5b00abe887", "filename": "gcc/config/s390/s390.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d8c61a498e9daa1bc7fe419055ae44ad8289cc/gcc%2Fconfig%2Fs390%2Fs390.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d8c61a498e9daa1bc7fe419055ae44ad8289cc/gcc%2Fconfig%2Fs390%2Fs390.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.cc?ref=a6d8c61a498e9daa1bc7fe419055ae44ad8289cc", "patch": "@@ -7642,8 +7642,7 @@ s390_mangle_type (const_tree type)\n   if (type == s390_builtin_types[BT_BV4SI]) return \"U6__booli\";\n   if (type == s390_builtin_types[BT_BV2DI]) return \"U6__booll\";\n \n-  if (TYPE_MAIN_VARIANT (type) == long_double_type_node\n-      && TARGET_LONG_DOUBLE_128)\n+  if (type == long_double_type_node && TARGET_LONG_DOUBLE_128)\n     return \"g\";\n \n   /* For all other types, use normal C++ mangling.  */"}, {"sha": "2a52c94d64c19650160f6163911f9741e47a793b", "filename": "gcc/testsuite/g++.dg/cpp23/ext-floating11.C", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d8c61a498e9daa1bc7fe419055ae44ad8289cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fext-floating11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d8c61a498e9daa1bc7fe419055ae44ad8289cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fext-floating11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fext-floating11.C?ref=a6d8c61a498e9daa1bc7fe419055ae44ad8289cc", "patch": "@@ -0,0 +1,79 @@\n+// P1467R9 - Extended floating-point types and standard names.\n+// { dg-do compile { target c++23 } }\n+// { dg-options \"\" }\n+\n+#include \"ext-floating.h\"\n+\n+#ifdef __STRICT_ANSI__\n+#undef __SIZEOF_FLOAT128__\n+#endif\n+\n+extern \"C\" void abort ();\n+\n+using namespace std;\n+\n+template <typename T, typename U> \n+int\n+foo (T x, U y) noexcept\n+{\n+  return 3;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (0.0f, 0.0f) != 3)\n+    abort ();\n+  if (foo (0.0, 0.0) != 3)\n+    abort ();\n+  if (foo (0.0L, 0.0L) != 3)\n+    abort ();\n+#ifdef __STDCPP_FLOAT16_T__\n+  if (foo (0.0f16, 0.0f16) != 3)\n+    abort ();\n+  if (foo (0.0f, 0.0f16) != 3)\n+    abort ();\n+#endif\n+#ifdef __STDCPP_FLOAT32_T__\n+  if (foo (0.0f32, 0.0f32) != 3)\n+    abort ();\n+  if (foo (0.0f, 0.0f32) != 3)\n+    abort ();\n+#endif\n+#ifdef __STDCPP_FLOAT64_T__\n+  if (foo (0.0f64, 0.0f64) != 3)\n+    abort ();\n+  if (foo (0.0, 0.0f64) != 3)\n+    abort ();\n+#endif\n+#ifdef __STDCPP_FLOAT128_T__\n+  if (foo (0.0f128, 0.0f128) != 3)\n+    abort ();\n+  if (foo (0.0L, 0.0f128) != 3)\n+    abort ();\n+#endif\n+#ifdef __STDCPP_BFLOAT16_T__\n+  if (foo (0.0bf16, 0.0bf16) != 3)\n+    abort ();\n+  if (foo (0.0f, 0.0bf16) != 3)\n+    abort ();\n+#endif\n+#ifdef __FLT32X_MANT_DIG__\n+  if (foo (0.0f32x, 0.0f32x) != 3)\n+    abort ();\n+  if (foo (0.0, 0.0f32x) != 3)\n+    abort ();\n+#endif\n+#ifdef __FLT64X_MANT_DIG__\n+  if (foo (0.0f64x, 0.0f64x) != 3)\n+    abort ();\n+  if (foo (0.0L, 0.0f64x) != 3)\n+    abort ();\n+#endif\n+#ifdef __FLT128X_MANT_DIG__\n+  if (foo (0.0f128x, 0.0f128x) != 3)\n+    abort ();\n+  if (foo (0.0L, 0.0f128x) != 3)\n+    abort ();\n+#endif\n+}"}]}