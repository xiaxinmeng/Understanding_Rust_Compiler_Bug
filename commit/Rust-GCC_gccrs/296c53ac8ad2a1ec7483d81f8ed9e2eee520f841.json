{"sha": "296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk2YzUzYWM4YWQyYTFlYzc0ODNkODFmOGVkOWUyZWVlNTIwZjg0MQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-08-09T11:28:22Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-08-09T11:28:22Z"}, "message": "re PR c/81233 (--Wdiscarded-qualifiers and Wincompatible-pointer-types missing important detail)\n\n\tPR c/81233\n\t* c-typeck.c (pedwarn_init): Make the function take a variable list.\n\tCall emit_diagnostic_valist instead of pedwarn.\n\t(convert_for_assignment): Unroll the PEDWARN_FOR_ASSIGNMENT macro.\n\tPrint the relevant types in diagnostics.\n\n\t* diagnostic-core.h (emit_diagnostic_valist): Add declaration.\n\t* diagnostic.c (emit_diagnostic): Add a comment.\n\t(emit_diagnostic_valist): New function.\n\n\t* gcc.dg/diagnostic-types-1.c: New test.\n\t* gcc.dg/assign-warn-1.c: Update warning messages.\n\t* gcc.dg/assign-warn-2.c: Likewise.\n\t* gcc.dg/c90-const-expr-5.c: Likewise.\n\t* gcc.dg/c99-const-expr-5.c: Likewise.\n\t* gcc.dg/conv-2.c: Likewise.\n\t* gcc.dg/init-bad-7.c: Likewise.\n\t* gcc.dg/overflow-warn-1.c: Likewise.\n\t* gcc.dg/overflow-warn-2.c: Likewise.\n\t* gcc.dg/overflow-warn-3.c: Likewise.\n\t* gcc.dg/overflow-warn-4.c: Likewise.\n\t* gcc.dg/pointer-array-atomic.c: Likewise.\n\t* gcc.dg/pr26865.c: Likewise.\n\t* gcc.dg/pr61162-2.c: Likewise.\n\t* gcc.dg/pr61162.c: Likewise.\n\t* gcc.dg/pr67730-2.c: Likewise.\n\t* gcc.dg/pr69156.c: Likewise.\n\t* gcc.dg/pr70174.c: Likewise.\n\t* objc.dg/proto-lossage-4.m: Likewise.\n\nFrom-SVN: r250985", "tree": {"sha": "55125f47ef7ad3c4c9971722231b7e845ddabe49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55125f47ef7ad3c4c9971722231b7e845ddabe49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a32c8316ff282ec3eb60e222e91fb19998c12f46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32c8316ff282ec3eb60e222e91fb19998c12f46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a32c8316ff282ec3eb60e222e91fb19998c12f46"}], "stats": {"total": 536, "additions": 371, "deletions": 165}, "files": [{"sha": "41be5044647105f5870ac29a19c8990764bb9cf0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -1,3 +1,10 @@\n+2017-08-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/81233\n+\t* diagnostic-core.h (emit_diagnostic_valist): Add declaration.\n+\t* diagnostic.c (emit_diagnostic): Add a comment.\n+\t(emit_diagnostic_valist): New function.\n+\n 2017-08-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/81417"}, {"sha": "98482adc30c8e6de45d06193d4a5fee2bad0af45", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -1,3 +1,11 @@\n+2017-08-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/81233\n+\t* c-typeck.c (pedwarn_init): Make the function take a variable list.\n+\tCall emit_diagnostic_valist instead of pedwarn.\n+\t(convert_for_assignment): Unroll the PEDWARN_FOR_ASSIGNMENT macro.\n+\tPrint the relevant types in diagnostics.\n+\n 2017-08-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/81417"}, {"sha": "c5c95088d56d11b6f3e818f1100eee4f8ca32a15", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 156, "deletions": 59, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -6065,20 +6065,19 @@ error_init (location_t loc, const char *gmsgid)\n    it is unconditionally given.  GMSGID identifies the message.  The\n    component name is taken from the spelling stack.  */\n \n-static void\n-pedwarn_init (location_t loc, int opt, const char *gmsgid)\n+static void ATTRIBUTE_GCC_DIAG (3,0)\n+pedwarn_init (location_t loc, int opt, const char *gmsgid, ...)\n {\n-  char *ofwhat;\n-  bool warned;\n-\n   /* Use the location where a macro was expanded rather than where\n      it was defined to make sure macros defined in system headers\n      but used incorrectly elsewhere are diagnosed.  */\n   source_location exploc = expansion_point_location_if_in_system_header (loc);\n \n-  /* The gmsgid may be a format string with %< and %>. */\n-  warned = pedwarn (exploc, opt, gmsgid);\n-  ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n+  va_list ap;\n+  va_start (ap, gmsgid);\n+  bool warned = emit_diagnostic_valist (DK_PEDWARN, exploc, opt, gmsgid, &ap);\n+  va_end (ap);\n+  char *ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n   if (*ofwhat && warned)\n     inform (exploc, \"(near initialization for %qs)\", ofwhat);\n }\n@@ -6311,17 +6310,33 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n       if (checktype != error_mark_node\n \t  && TREE_CODE (type) == ENUMERAL_TYPE\n \t  && TYPE_MAIN_VARIANT (checktype) != TYPE_MAIN_VARIANT (type))\n-\t{\n-\t  PEDWARN_FOR_ASSIGNMENT (location, expr_loc, OPT_Wc___compat,\n-\t\t\t          G_(\"enum conversion when passing argument \"\n-\t\t\t\t     \"%d of %qE is invalid in C++\"),\n-\t\t\t          G_(\"enum conversion in assignment is \"\n-\t\t\t\t     \"invalid in C++\"),\n-\t\t\t          G_(\"enum conversion in initialization is \"\n-\t\t\t\t     \"invalid in C++\"),\n-\t\t\t          G_(\"enum conversion in return is \"\n-\t\t\t\t     \"invalid in C++\"));\n-\t}\n+\tswitch (errtype)\n+\t  {\n+\t  case ic_argpass:\n+\t    if (pedwarn (expr_loc, OPT_Wc___compat, \"enum conversion when \"\n+\t\t\t \"passing argument %d of %qE is invalid in C++\",\n+\t\t\t parmnum, rname))\n+\t      inform ((fundecl && !DECL_IS_BUILTIN (fundecl))\n+\t\t      ? DECL_SOURCE_LOCATION (fundecl) : expr_loc,\n+\t\t      \"expected %qT but argument is of type %qT\",\n+\t\t      type, rhstype);\n+\t    break;\n+\t  case ic_assign:\n+\t    pedwarn (location, OPT_Wc___compat, \"enum conversion from %qT to \"\n+\t\t     \"%qT in assignment is invalid in C++\", rhstype, type);\n+\t    break;\n+\t  case ic_init:\n+\t    pedwarn_init (location, OPT_Wc___compat, \"enum conversion from \"\n+\t\t\t  \"%qT to %qT in initialization is invalid in C++\",\n+\t\t\t  rhstype, type);\n+\t    break;\n+\t  case ic_return:\n+\t    pedwarn (location, OPT_Wc___compat, \"enum conversion from %qT to \"\n+\t\t     \"%qT in return is invalid in C++\", rhstype, type);\n+\t    break;\n+\t  default:\n+\t    gcc_unreachable ();\n+\t  }\n     }\n \n   if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (rhstype))\n@@ -6727,15 +6742,36 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t\t;\n \t      /* If there is a mismatch, do warn.  */\n \t      else if (warn_pointer_sign)\n-\t\t PEDWARN_FOR_ASSIGNMENT (location, expr_loc, OPT_Wpointer_sign,\n-\t\t\t\t         G_(\"pointer targets in passing argument \"\n-\t\t\t\t\t    \"%d of %qE differ in signedness\"),\n-\t\t\t\t         G_(\"pointer targets in assignment \"\n-\t\t\t\t\t    \"differ in signedness\"),\n-\t\t\t\t         G_(\"pointer targets in initialization \"\n-\t\t\t\t\t    \"differ in signedness\"),\n-\t\t\t\t         G_(\"pointer targets in return differ \"\n-\t\t\t\t\t    \"in signedness\"));\n+\t\tswitch (errtype)\n+\t\t  {\n+\t\t  case ic_argpass:\n+\t\t    if (pedwarn (expr_loc, OPT_Wpointer_sign,\n+\t\t\t\t \"pointer targets in passing argument %d of \"\n+\t\t\t\t \"%qE differ in signedness\", parmnum, rname))\n+\t\t      inform ((fundecl && !DECL_IS_BUILTIN (fundecl))\n+\t\t\t      ? DECL_SOURCE_LOCATION (fundecl) : expr_loc,\n+\t\t\t      \"expected %qT but argument is of type %qT\",\n+\t\t\t      type, rhstype);\n+\t\t    break;\n+\t\t  case ic_assign:\n+\t\t    pedwarn (location, OPT_Wpointer_sign,\n+\t\t\t     \"pointer targets in assignment from %qT to %qT \"\n+\t\t\t     \"differ in signedness\", rhstype, type);\n+\t\t    break;\n+\t\t  case ic_init:\n+\t\t    pedwarn_init (location, OPT_Wpointer_sign,\n+\t\t\t\t  \"pointer targets in initialization of %qT \"\n+\t\t\t\t  \"from %qT differ in signedness\", type,\n+\t\t\t\t  rhstype);\n+\t\t    break;\n+\t\t  case ic_return:\n+\t\t    pedwarn (location, OPT_Wpointer_sign, \"pointer targets in \"\n+\t\t\t     \"returning %qT from a function with return type \"\n+\t\t\t     \"%qT differ in signedness\", rhstype, type);\n+\t\t    break;\n+\t\t  default:\n+\t\t    gcc_unreachable ();\n+\t\t  }\n \t    }\n \t  else if (TREE_CODE (ttl) == FUNCTION_TYPE\n \t\t   && TREE_CODE (ttr) == FUNCTION_TYPE)\n@@ -6760,17 +6796,39 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t\t\t\t        TYPE_QUALS (ttl) & ~TYPE_QUALS (ttr));\n \t    }\n \t}\n-      else\n-\t/* Avoid warning about the volatile ObjC EH puts on decls.  */\n-\tif (!objc_ok)\n-\t  PEDWARN_FOR_ASSIGNMENT (location, expr_loc,\n-\t\t\t          OPT_Wincompatible_pointer_types,\n-\t\t\t          G_(\"passing argument %d of %qE from \"\n-\t\t\t\t     \"incompatible pointer type\"),\n-\t\t\t          G_(\"assignment from incompatible pointer type\"),\n-\t\t\t          G_(\"initialization from incompatible \"\n-\t\t\t\t     \"pointer type\"),\n-\t\t\t          G_(\"return from incompatible pointer type\"));\n+      /* Avoid warning about the volatile ObjC EH puts on decls.  */\n+      else if (!objc_ok)\n+\t{\n+\t  switch (errtype)\n+\t    {\n+\t    case ic_argpass:\n+\t      if (pedwarn (expr_loc, OPT_Wincompatible_pointer_types,\n+\t\t\t   \"passing argument %d of %qE from incompatible \"\n+\t\t\t   \"pointer type\", parmnum, rname))\n+\t\tinform ((fundecl && !DECL_IS_BUILTIN (fundecl))\n+\t\t\t? DECL_SOURCE_LOCATION (fundecl) : expr_loc,\n+\t\t\t\"expected %qT but argument is of type %qT\",\n+\t\t\ttype, rhstype);\n+\t      break;\n+\t    case ic_assign:\n+\t      pedwarn (location, OPT_Wincompatible_pointer_types,\n+\t\t       \"assignment to %qT from incompatible pointer type %qT\",\n+\t\t       type, rhstype);\n+\t      break;\n+\t    case ic_init:\n+\t      pedwarn_init (location, OPT_Wincompatible_pointer_types,\n+\t\t\t    \"initialization of %qT from incompatible pointer \"\n+\t\t\t    \"type %qT\", type, rhstype);\n+\t      break;\n+\t    case ic_return:\n+\t      pedwarn (location, OPT_Wincompatible_pointer_types,\n+\t\t       \"returning %qT from a function with incompatible \"\n+\t\t       \"return type %qT\", rhstype, type);\n+\t      break;\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\t}\n \n       return convert (type, rhs);\n     }\n@@ -6787,31 +6845,70 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t or one that results from arithmetic, even including\n \t a cast to integer type.  */\n       if (!null_pointer_constant)\n-\tPEDWARN_FOR_ASSIGNMENT (location, expr_loc,\n-\t\t\t        OPT_Wint_conversion,\n-\t\t\t        G_(\"passing argument %d of %qE makes \"\n-\t\t\t\t   \"pointer from integer without a cast\"),\n-\t\t\t        G_(\"assignment makes pointer from integer \"\n-\t\t\t\t   \"without a cast\"),\n-\t\t\t        G_(\"initialization makes pointer from \"\n-\t\t\t\t   \"integer without a cast\"),\n-\t\t\t        G_(\"return makes pointer from integer \"\n-\t\t\t\t   \"without a cast\"));\n+\tswitch (errtype)\n+\t  {\n+\t  case ic_argpass:\n+\t    if (pedwarn (expr_loc, OPT_Wint_conversion,\n+\t\t\t \"passing argument %d of %qE makes pointer from \"\n+\t\t\t \"integer without a cast\", parmnum, rname))\n+\t      inform ((fundecl && !DECL_IS_BUILTIN (fundecl))\n+\t\t      ? DECL_SOURCE_LOCATION (fundecl) : expr_loc,\n+\t\t      \"expected %qT but argument is of type %qT\",\n+\t\t      type, rhstype);\n+\t    break;\n+\t  case ic_assign:\n+\t    pedwarn (location, OPT_Wint_conversion,\n+\t\t     \"assignment to %qT from %qT makes pointer from integer \"\n+\t\t     \"without a cast\", type, rhstype);\n+\t    break;\n+\t  case ic_init:\n+\t    pedwarn_init (location, OPT_Wint_conversion,\n+\t\t\t  \"initialization of %qT from %qT makes pointer from \"\n+\t\t\t  \"integer without a cast\", type, rhstype);\n+\t    break;\n+\t  case ic_return:\n+\t    pedwarn (location, OPT_Wint_conversion, \"returning %qT from a \"\n+\t\t     \"function with return type %qT makes pointer from \"\n+\t\t     \"integer without a cast\", rhstype, type);\n+\t    break;\n+\t  default:\n+\t    gcc_unreachable ();\n+\t  }\n \n       return convert (type, rhs);\n     }\n   else if (codel == INTEGER_TYPE && coder == POINTER_TYPE)\n     {\n-      PEDWARN_FOR_ASSIGNMENT (location, expr_loc,\n-\t\t\t      OPT_Wint_conversion,\n-\t\t\t      G_(\"passing argument %d of %qE makes integer \"\n-\t\t\t         \"from pointer without a cast\"),\n-\t\t\t      G_(\"assignment makes integer from pointer \"\n-\t\t\t         \"without a cast\"),\n-\t\t\t      G_(\"initialization makes integer from pointer \"\n-\t\t\t         \"without a cast\"),\n-\t\t\t      G_(\"return makes integer from pointer \"\n-\t\t\t         \"without a cast\"));\n+      switch (errtype)\n+\t{\n+\tcase ic_argpass:\n+\t  if (pedwarn (expr_loc, OPT_Wint_conversion,\n+\t\t       \"passing argument %d of %qE makes integer from \"\n+\t\t       \"pointer without a cast\", parmnum, rname))\n+\t    inform ((fundecl && !DECL_IS_BUILTIN (fundecl))\n+\t\t    ? DECL_SOURCE_LOCATION (fundecl) : expr_loc,\n+\t\t    \"expected %qT but argument is of type %qT\",\n+\t\t    type, rhstype);\n+\t  break;\n+\tcase ic_assign:\n+\t  pedwarn (location, OPT_Wint_conversion,\n+\t\t   \"assignment to %qT from %qT makes integer from pointer \"\n+\t\t   \"without a cast\", type, rhstype);\n+\t  break;\n+\tcase ic_init:\n+\t  pedwarn_init (location, OPT_Wint_conversion,\n+\t\t\t\"initialization of %qT from %qT makes integer from \"\n+\t\t\t\"pointer without a cast\", type, rhstype);\n+\t  break;\n+\tcase ic_return:\n+\t  pedwarn (location, OPT_Wint_conversion, \"returning %qT from a \"\n+\t\t   \"function with return type %qT makes integer from \"\n+\t\t   \"pointer without a cast\", rhstype, type);\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n       return convert (type, rhs);\n     }\n   else if (codel == BOOLEAN_TYPE && coder == POINTER_TYPE)"}, {"sha": "1fa28027b5b81427e140b1c302334a6cc504d68b", "filename": "gcc/diagnostic-core.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Fdiagnostic-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Fdiagnostic-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-core.h?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -93,6 +93,8 @@ extern void inform_n (location_t, int, const char *, const char *, ...)\n extern void verbatim (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern bool emit_diagnostic (diagnostic_t, location_t, int,\n \t\t\t     const char *, ...) ATTRIBUTE_GCC_DIAG(4,5);\n+extern bool emit_diagnostic_valist (diagnostic_t, location_t, int, const char *,\n+\t\t\t\t    va_list *) ATTRIBUTE_GCC_DIAG (4,0);\n extern bool seen_error (void);\n \n #ifdef BUFSIZ"}, {"sha": "a98bf4a33334a1f9cc3f696a2fb1db665e10c565", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -1128,6 +1128,8 @@ diagnostic_n_impl (location_t location, int opt, int n,\n \t\t\t\t    singular_gmsgid, plural_gmsgid, ap, kind);\n }\n \n+/* Wrapper around diagnostic_impl taking a variable argument list.  */\n+\n bool\n emit_diagnostic (diagnostic_t kind, location_t location, int opt,\n \t\t const char *gmsgid, ...)\n@@ -1140,6 +1142,16 @@ emit_diagnostic (diagnostic_t kind, location_t location, int opt,\n   return ret;\n }\n \n+/* Wrapper around diagnostic_impl taking a va_list parameter.  */\n+\n+bool\n+emit_diagnostic_valist (diagnostic_t kind, location_t location, int opt,\n+\t\t\tconst char *gmsgid, va_list *ap)\n+{\n+  rich_location richloc (line_table, location);\n+  return diagnostic_impl (&richloc, opt, gmsgid, ap, kind);\n+}\n+\n /* An informative note at LOCATION.  Use this for additional details on an error\n    message.  */\n void"}, {"sha": "733266d339f30fceedd0e3a6d1e30bea5f56e8fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -1,3 +1,26 @@\n+2017-08-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/81233\n+\t* gcc.dg/diagnostic-types-1.c: New test.\n+\t* gcc.dg/assign-warn-1.c: Update warning messages.\n+\t* gcc.dg/assign-warn-2.c: Likewise.\n+\t* gcc.dg/c90-const-expr-5.c: Likewise.\n+\t* gcc.dg/c99-const-expr-5.c: Likewise.\n+\t* gcc.dg/conv-2.c: Likewise.\n+\t* gcc.dg/init-bad-7.c: Likewise.\n+\t* gcc.dg/overflow-warn-1.c: Likewise.\n+\t* gcc.dg/overflow-warn-2.c: Likewise.\n+\t* gcc.dg/overflow-warn-3.c: Likewise.\n+\t* gcc.dg/overflow-warn-4.c: Likewise.\n+\t* gcc.dg/pointer-array-atomic.c: Likewise.\n+\t* gcc.dg/pr26865.c: Likewise.\n+\t* gcc.dg/pr61162-2.c: Likewise.\n+\t* gcc.dg/pr61162.c: Likewise.\n+\t* gcc.dg/pr67730-2.c: Likewise.\n+\t* gcc.dg/pr69156.c: Likewise.\n+\t* gcc.dg/pr70174.c: Likewise.\n+\t* objc.dg/proto-lossage-4.m: Likewise.\n+\n 2017-08-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/81417"}, {"sha": "365025724c461b0ea7fb59298ec26b0e4429e57e", "filename": "gcc/testsuite/gcc.dg/assign-warn-1.c", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-1.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -50,63 +50,63 @@ TESTRET(dfe, void *, fp); /* { dg-warning \"ISO C forbids return between function\n \n TESTARG(sua, int *, unsigned int *); /* { dg-warning \"pointer targets in passing argument 1 of 'suaF' differ in signedness\" } */\n TESTARP(sub, int *, unsigned int *); /* { dg-warning \"pointer targets in passing argument 1 of 'subFp.x' differ in signedness\" } */\n-TESTASS(suc, int *, unsigned int *); /* { dg-warning \"pointer targets in assignment differ in signedness\" } */\n-TESTINI(sud, int *, unsigned int *); /* { dg-warning \"pointer targets in initialization differ in signedness\" } */\n-TESTRET(sue, int *, unsigned int *); /* { dg-warning \"pointer targets in return differ in signedness\" } */\n+TESTASS(suc, int *, unsigned int *); /* { dg-warning \"pointer targets in assignment from 'unsigned int \\\\*' to 'int \\\\*' differ in signedness\" } */\n+TESTINI(sud, int *, unsigned int *); /* { dg-warning \"pointer targets in initialization of 'int \\\\*' from 'unsigned int \\\\*' differ in signedness\" } */\n+TESTRET(sue, int *, unsigned int *); /* { dg-warning \"pointer targets in returning 'unsigned int \\\\*' from a function with return type 'int \\\\*' differ in signedness\" } */\n \n TESTARG(usa, unsigned int *, int *); /* { dg-warning \"pointer targets in passing argument 1 of 'usaF' differ in signedness\" } */\n TESTARP(usb, unsigned int *, int *); /* { dg-warning \"pointer targets in passing argument 1 of 'usbFp.x' differ in signedness\" } */\n-TESTASS(usc, unsigned int *, int *); /* { dg-warning \"pointer targets in assignment differ in signedness\" } */\n-TESTINI(usd, unsigned int *, int *); /* { dg-warning \"pointer targets in initialization differ in signedness\" } */\n-TESTRET(use, unsigned int *, int *); /* { dg-warning \"pointer targets in return differ in signedness\" } */\n+TESTASS(usc, unsigned int *, int *); /* { dg-warning \"pointer targets in assignment from 'int \\\\*' to 'unsigned int \\\\*' differ in signedness\" } */\n+TESTINI(usd, unsigned int *, int *); /* { dg-warning \"pointer targets in initialization of 'unsigned int \\\\*' from 'int \\\\*' differ in signedness\" } */\n+TESTRET(use, unsigned int *, int *); /* { dg-warning \"pointer targets in returning 'int \\\\*' from a function with return type 'unsigned int \\\\*' differ in signedness\" } */\n \n TESTARG(cua, char *, unsigned char *); /* { dg-warning \"pointer targets in passing argument 1 of 'cuaF' differ in signedness\" } */\n TESTARP(cub, char *, unsigned char *); /* { dg-warning \"pointer targets in passing argument 1 of 'cubFp.x' differ in signedness\" } */\n-TESTASS(cuc, char *, unsigned char *); /* { dg-warning \"pointer targets in assignment differ in signedness\" } */\n-TESTINI(cud, char *, unsigned char *); /* { dg-warning \"pointer targets in initialization differ in signedness\" } */\n-TESTRET(cue, char *, unsigned char *); /* { dg-warning \"pointer targets in return differ in signedness\" } */\n+TESTASS(cuc, char *, unsigned char *); /* { dg-warning \"pointer targets in assignment from 'unsigned char \\\\*' to 'char \\\\*' differ in signedness\" } */\n+TESTINI(cud, char *, unsigned char *); /* { dg-warning \"pointer targets in initialization of 'char \\\\*' from 'unsigned char \\\\*' differ in signedness\" } */\n+TESTRET(cue, char *, unsigned char *); /* { dg-warning \"pointer targets in returning 'unsigned char \\\\*' from a function with return type 'char \\\\*' differ in signedness\" } */\n \n TESTARG(uca, unsigned char *, char *); /* { dg-warning \"pointer targets in passing argument 1 of 'ucaF' differ in signedness\" } */\n TESTARP(ucb, unsigned char *, char *); /* { dg-warning \"pointer targets in passing argument 1 of 'ucbFp.x' differ in signedness\" } */\n-TESTASS(ucc, unsigned char *, char *); /* { dg-warning \"pointer targets in assignment differ in signedness\" } */\n-TESTINI(ucd, unsigned char *, char *); /* { dg-warning \"pointer targets in initialization differ in signedness\" } */\n-TESTRET(uce, unsigned char *, char *); /* { dg-warning \"pointer targets in return differ in signedness\" } */\n+TESTASS(ucc, unsigned char *, char *); /* { dg-warning \"pointer targets in assignment from 'char \\\\*' to 'unsigned char \\\\*' differ in signedness\" } */\n+TESTINI(ucd, unsigned char *, char *); /* { dg-warning \"pointer targets in initialization of 'unsigned char \\\\*' from 'char \\\\*' differ in signedness\" } */\n+TESTRET(uce, unsigned char *, char *); /* { dg-warning \"pointer targets in returning 'char \\\\*' from a function with return type 'unsigned char \\\\*' differ in signedness\" } */\n \n TESTARG(csa, char *, signed char *); /* { dg-warning \"pointer targets in passing argument 1 of 'csaF' differ in signedness\" } */\n TESTARP(csb, char *, signed char *); /* { dg-warning \"pointer targets in passing argument 1 of 'csbFp.x' differ in signedness\" } */\n-TESTASS(csc, char *, signed char *); /* { dg-warning \"pointer targets in assignment differ in signedness\" } */\n-TESTINI(csd, char *, signed char *); /* { dg-warning \"pointer targets in initialization differ in signedness\" } */\n-TESTRET(cse, char *, signed char *); /* { dg-warning \"pointer targets in return differ in signedness\" } */\n+TESTASS(csc, char *, signed char *); /* { dg-warning \"pointer targets in assignment from 'signed char \\\\*' to 'char \\\\*' differ in signedness\" } */\n+TESTINI(csd, char *, signed char *); /* { dg-warning \"pointer targets in initialization of 'char \\\\*' from 'signed char \\\\*' differ in signedness\" } */\n+TESTRET(cse, char *, signed char *); /* { dg-warning \"pointer targets in returning 'signed char \\\\*' from a function with return type 'char \\\\*' differ in signedness\" } */\n \n TESTARG(sca, signed char *, char *); /* { dg-warning \"pointer targets in passing argument 1 of 'scaF' differ in signedness\" } */\n TESTARP(scb, signed char *, char *); /* { dg-warning \"pointer targets in passing argument 1 of 'scbFp.x' differ in signedness\" } */\n-TESTASS(scc, signed char *, char *); /* { dg-warning \"pointer targets in assignment differ in signedness\" } */\n-TESTINI(scd, signed char *, char *); /* { dg-warning \"pointer targets in initialization differ in signedness\" } */\n-TESTRET(sce, signed char *, char *); /* { dg-warning \"pointer targets in return differ in signedness\" } */\n+TESTASS(scc, signed char *, char *); /* { dg-warning \"pointer targets in assignment from 'char \\\\*' to 'signed char \\\\*' differ in signedness\" } */\n+TESTINI(scd, signed char *, char *); /* { dg-warning \"pointer targets in initialization of 'signed char \\\\*' from 'char \\\\*' differ in signedness\" } */\n+TESTRET(sce, signed char *, char *); /* { dg-warning \"pointer targets in returning 'char \\\\*' from a function with return type 'signed char \\\\*' differ in signedness\" } */\n \n TESTARG(cia, char *, int *); /* { dg-warning \"passing argument 1 of 'ciaF' from incompatible pointer type\" } */\n TESTARP(cib, char *, int *); /* { dg-warning \"passing argument 1 of 'cibFp.x' from incompatible pointer type\" } */\n-TESTASS(cic, char *, int *); /* { dg-warning \"assignment from incompatible pointer type\" } */\n-TESTINI(cid, char *, int *); /* { dg-warning \"initialization from incompatible pointer type\" } */\n-TESTRET(cie, char *, int *); /* { dg-warning \"return from incompatible pointer type\" } */\n+TESTASS(cic, char *, int *); /* { dg-warning \"assignment to 'char \\\\*' from incompatible pointer type 'int \\\\*'\" } */\n+TESTINI(cid, char *, int *); /* { dg-warning \"initialization of 'char \\\\*' from incompatible pointer type 'int \\\\*'\" } */\n+TESTRET(cie, char *, int *); /* { dg-warning \"returning 'int \\\\*' from a function with incompatible return type 'char \\\\*'\" } */\n \n TESTARG(ica, int *, char *); /* { dg-warning \"passing argument 1 of 'icaF' from incompatible pointer type\" } */\n TESTARP(icb, int *, char *); /* { dg-warning \"passing argument 1 of 'icbFp.x' from incompatible pointer type\" } */\n-TESTASS(icc, int *, char *); /* { dg-warning \"assignment from incompatible pointer type\" } */\n-TESTINI(icd, int *, char *); /* { dg-warning \"initialization from incompatible pointer type\" } */\n-TESTRET(ice, int *, char *); /* { dg-warning \"return from incompatible pointer type\" } */\n+TESTASS(icc, int *, char *); /* { dg-warning \"assignment to 'int \\\\*' from incompatible pointer type 'char \\\\*'\" } */\n+TESTINI(icd, int *, char *); /* { dg-warning \"initialization of 'int \\\\*' from incompatible pointer type 'char \\\\*'\" } */\n+TESTRET(ice, int *, char *); /* { dg-warning \"returning 'char \\\\*' from a function with incompatible return type 'int \\\\*'\" } */\n \n TESTARG(ciia, char *, int); /* { dg-warning \"passing argument 1 of 'ciiaF' makes pointer from integer without a cast\" } */\n TESTARP(ciib, char *, int); /* { dg-warning \"passing argument 1 of 'ciibFp.x' makes pointer from integer without a cast\" } */\n-TESTASS(ciic, char *, int); /* { dg-warning \"assignment makes pointer from integer without a cast\" } */\n-TESTINI(ciid, char *, int); /* { dg-warning \"initialization makes pointer from integer without a cast\" } */\n-TESTRET(ciie, char *, int); /* { dg-warning \"return makes pointer from integer without a cast\" } */\n+TESTASS(ciic, char *, int); /* { dg-warning \"assignment to 'char \\\\*' from 'int' makes pointer from integer without a cast\" } */\n+TESTINI(ciid, char *, int); /* { dg-warning \"initialization of 'char \\\\*' from 'int' makes pointer from integer without a cast\" } */\n+TESTRET(ciie, char *, int); /* { dg-warning \"returning 'int' from a function with return type 'char \\\\*' makes pointer from integer without a cast\" } */\n \n TESTARG(iica, int, char *); /* { dg-warning \"passing argument 1 of 'iicaF' makes integer from pointer without a cast\" } */\n TESTARP(iicb, int, char *); /* { dg-warning \"passing argument 1 of 'iicbFp.x' makes integer from pointer without a cast\" } */\n-TESTASS(iicc, int, char *); /* { dg-warning \"assignment makes integer from pointer without a cast\" } */\n-TESTINI(iicd, int, char *); /* { dg-warning \"initialization makes integer from pointer without a cast\" } */\n-TESTRET(iice, int, char *); /* { dg-warning \"return makes integer from pointer without a cast\" } */\n+TESTASS(iicc, int, char *); /* { dg-warning \"assignment to 'int' from 'char \\\\*' makes integer from pointer without a cast\" } */\n+TESTINI(iicd, int, char *); /* { dg-warning \"initialization of 'int' from 'char \\\\*' makes integer from pointer without a cast\" } */\n+TESTRET(iice, int, char *); /* { dg-warning \"returning 'char \\\\*' from a function with return type 'int' makes integer from pointer without a cast\" } */\n \n struct s { int a; };\n "}, {"sha": "0c8a8ee78335bb1cf142e030c864630f6a08d836", "filename": "gcc/testsuite/gcc.dg/assign-warn-2.c", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-2.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -51,63 +51,63 @@ TESTRET(dfe, void *, fp); /* { dg-error \"ISO C forbids return between function p\n \n TESTARG(sua, int *, unsigned int *); /* { dg-error \"pointer targets in passing argument 1 of 'suaF' differ in signedness\" } */\n TESTARP(sub, int *, unsigned int *); /* { dg-error \"pointer targets in passing argument 1 of 'subFp.x' differ in signedness\" } */\n-TESTASS(suc, int *, unsigned int *); /* { dg-error \"pointer targets in assignment differ in signedness\" } */\n-TESTINI(sud, int *, unsigned int *); /* { dg-error \"pointer targets in initialization differ in signedness\" } */\n-TESTRET(sue, int *, unsigned int *); /* { dg-error \"pointer targets in return differ in signedness\" } */\n+TESTASS(suc, int *, unsigned int *); /* { dg-error \"pointer targets in assignment from 'unsigned int \\\\*' to 'int \\\\*' differ in signedness\" } */\n+TESTINI(sud, int *, unsigned int *); /* { dg-error \"pointer targets in initialization of 'int \\\\*' from 'unsigned int \\\\*' differ in signedness\" } */\n+TESTRET(sue, int *, unsigned int *); /* { dg-error \"pointer targets in returning 'unsigned int \\\\*' from a function with return type 'int \\\\*' differ in signedness\" } */\n \n TESTARG(usa, unsigned int *, int *); /* { dg-error \"pointer targets in passing argument 1 of 'usaF' differ in signedness\" } */\n TESTARP(usb, unsigned int *, int *); /* { dg-error \"pointer targets in passing argument 1 of 'usbFp.x' differ in signedness\" } */\n-TESTASS(usc, unsigned int *, int *); /* { dg-error \"pointer targets in assignment differ in signedness\" } */\n-TESTINI(usd, unsigned int *, int *); /* { dg-error \"pointer targets in initialization differ in signedness\" } */\n-TESTRET(use, unsigned int *, int *); /* { dg-error \"pointer targets in return differ in signedness\" } */\n+TESTASS(usc, unsigned int *, int *); /* { dg-error \"pointer targets in assignment from 'int \\\\*' to 'unsigned int \\\\*' differ in signedness\" } */\n+TESTINI(usd, unsigned int *, int *); /* { dg-error \"pointer targets in initialization of 'unsigned int \\\\*' from 'int \\\\*' differ in signedness\" } */\n+TESTRET(use, unsigned int *, int *); /* { dg-error \"pointer targets in returning 'int \\\\*' from a function with return type 'unsigned int \\\\*' differ in signedness\" } */\n \n TESTARG(cua, char *, unsigned char *); /* { dg-error \"pointer targets in passing argument 1 of 'cuaF' differ in signedness\" } */\n TESTARP(cub, char *, unsigned char *); /* { dg-error \"pointer targets in passing argument 1 of 'cubFp.x' differ in signedness\" } */\n-TESTASS(cuc, char *, unsigned char *); /* { dg-error \"pointer targets in assignment differ in signedness\" } */\n-TESTINI(cud, char *, unsigned char *); /* { dg-error \"pointer targets in initialization differ in signedness\" } */\n-TESTRET(cue, char *, unsigned char *); /* { dg-error \"pointer targets in return differ in signedness\" } */\n+TESTASS(cuc, char *, unsigned char *); /* { dg-error \"pointer targets in assignment from 'unsigned char \\\\*' to 'char \\\\*' differ in signedness\" } */\n+TESTINI(cud, char *, unsigned char *); /* { dg-error \"pointer targets in initialization of 'char \\\\*' from 'unsigned char \\\\*' differ in signedness\" } */\n+TESTRET(cue, char *, unsigned char *); /* { dg-error \"pointer targets in returning 'unsigned char \\\\*' from a function with return type 'char \\\\*' differ in signedness\" } */\n \n TESTARG(uca, unsigned char *, char *); /* { dg-error \"pointer targets in passing argument 1 of 'ucaF' differ in signedness\" } */\n TESTARP(ucb, unsigned char *, char *); /* { dg-error \"pointer targets in passing argument 1 of 'ucbFp.x' differ in signedness\" } */\n-TESTASS(ucc, unsigned char *, char *); /* { dg-error \"pointer targets in assignment differ in signedness\" } */\n-TESTINI(ucd, unsigned char *, char *); /* { dg-error \"pointer targets in initialization differ in signedness\" } */\n-TESTRET(uce, unsigned char *, char *); /* { dg-error \"pointer targets in return differ in signedness\" } */\n+TESTASS(ucc, unsigned char *, char *); /* { dg-error \"pointer targets in assignment from 'char \\\\*' to 'unsigned char \\\\*' differ in signedness\" } */\n+TESTINI(ucd, unsigned char *, char *); /* { dg-error \"pointer targets in initialization of 'unsigned char \\\\*' from 'char \\\\*' differ in signedness\" } */\n+TESTRET(uce, unsigned char *, char *); /* { dg-error \"pointer targets in returning 'char \\\\*' from a function with return type 'unsigned char \\\\*' differ in signedness\" } */\n \n TESTARG(csa, char *, signed char *); /* { dg-error \"pointer targets in passing argument 1 of 'csaF' differ in signedness\" } */\n TESTARP(csb, char *, signed char *); /* { dg-error \"pointer targets in passing argument 1 of 'csbFp.x' differ in signedness\" } */\n-TESTASS(csc, char *, signed char *); /* { dg-error \"pointer targets in assignment differ in signedness\" } */\n-TESTINI(csd, char *, signed char *); /* { dg-error \"pointer targets in initialization differ in signedness\" } */\n-TESTRET(cse, char *, signed char *); /* { dg-error \"pointer targets in return differ in signedness\" } */\n+TESTASS(csc, char *, signed char *); /* { dg-error \"pointer targets in assignment from 'signed char \\\\*' to 'char \\\\*' differ in signedness\" } */\n+TESTINI(csd, char *, signed char *); /* { dg-error \"pointer targets in initialization of 'char \\\\*' from 'signed char \\\\*' differ in signedness\" } */\n+TESTRET(cse, char *, signed char *); /* { dg-error \"pointer targets in returning 'signed char \\\\*' from a function with return type 'char \\\\*' differ in signedness\" } */\n \n TESTARG(sca, signed char *, char *); /* { dg-error \"pointer targets in passing argument 1 of 'scaF' differ in signedness\" } */\n TESTARP(scb, signed char *, char *); /* { dg-error \"pointer targets in passing argument 1 of 'scbFp.x' differ in signedness\" } */\n-TESTASS(scc, signed char *, char *); /* { dg-error \"pointer targets in assignment differ in signedness\" } */\n-TESTINI(scd, signed char *, char *); /* { dg-error \"pointer targets in initialization differ in signedness\" } */\n-TESTRET(sce, signed char *, char *); /* { dg-error \"pointer targets in return differ in signedness\" } */\n+TESTASS(scc, signed char *, char *); /* { dg-error \"pointer targets in assignment from 'char \\\\*' to 'signed char \\\\*' differ in signedness\" } */\n+TESTINI(scd, signed char *, char *); /* { dg-error \"pointer targets in initialization of 'signed char \\\\*' from 'char \\\\*' differ in signedness\" } */\n+TESTRET(sce, signed char *, char *); /* { dg-error \"pointer targets in returning 'char \\\\*' from a function with return type 'signed char \\\\*' differ in signedness\" } */\n \n TESTARG(cia, char *, int *); /* { dg-error \"passing argument 1 of 'ciaF' from incompatible pointer type\" } */\n TESTARP(cib, char *, int *); /* { dg-error \"passing argument 1 of 'cibFp.x' from incompatible pointer type\" } */\n-TESTASS(cic, char *, int *); /* { dg-error \"assignment from incompatible pointer type\" } */\n-TESTINI(cid, char *, int *); /* { dg-error \"initialization from incompatible pointer type\" } */\n-TESTRET(cie, char *, int *); /* { dg-error \"return from incompatible pointer type\" } */\n+TESTASS(cic, char *, int *); /* { dg-error \"assignment to 'char \\\\*' from incompatible pointer type 'int \\\\*'\" } */\n+TESTINI(cid, char *, int *); /* { dg-error \"initialization of 'char \\\\*' from incompatible pointer type 'int \\\\*'\" } */\n+TESTRET(cie, char *, int *); /* { dg-error \"returning 'int \\\\*' from a function with incompatible return type 'char \\\\*'\" } */\n \n TESTARG(ica, int *, char *); /* { dg-error \"passing argument 1 of 'icaF' from incompatible pointer type\" } */\n TESTARP(icb, int *, char *); /* { dg-error \"passing argument 1 of 'icbFp.x' from incompatible pointer type\" } */\n-TESTASS(icc, int *, char *); /* { dg-error \"assignment from incompatible pointer type\" } */\n-TESTINI(icd, int *, char *); /* { dg-error \"initialization from incompatible pointer type\" } */\n-TESTRET(ice, int *, char *); /* { dg-error \"return from incompatible pointer type\" } */\n+TESTASS(icc, int *, char *); /* { dg-error \"assignment to 'int \\\\*' from incompatible pointer type 'char \\\\*'\" } */\n+TESTINI(icd, int *, char *); /* { dg-error \"initialization of 'int \\\\*' from incompatible pointer type 'char \\\\*'\" } */\n+TESTRET(ice, int *, char *); /* { dg-error \"returning 'char \\\\*' from a function with incompatible return type 'int \\\\*'\" } */\n \n TESTARG(ciia, char *, int); /* { dg-error \"passing argument 1 of 'ciiaF' makes pointer from integer without a cast\" } */\n TESTARP(ciib, char *, int); /* { dg-error \"passing argument 1 of 'ciibFp.x' makes pointer from integer without a cast\" } */\n-TESTASS(ciic, char *, int); /* { dg-error \"assignment makes pointer from integer without a cast\" } */\n-TESTINI(ciid, char *, int); /* { dg-error \"initialization makes pointer from integer without a cast\" } */\n-TESTRET(ciie, char *, int); /* { dg-error \"return makes pointer from integer without a cast\" } */\n+TESTASS(ciic, char *, int); /* { dg-error \"assignment to 'char \\\\*' from 'int' makes pointer from integer without a cast\" } */\n+TESTINI(ciid, char *, int); /* { dg-error \"initialization of 'char \\\\*' from 'int' makes pointer from integer without a cast\" } */\n+TESTRET(ciie, char *, int); /* { dg-error \"returning 'int' from a function with return type 'char \\\\*' makes pointer from integer without a cast\" } */\n \n TESTARG(iica, int, char *); /* { dg-error \"passing argument 1 of 'iicaF' makes integer from pointer without a cast\" } */\n TESTARP(iicb, int, char *); /* { dg-error \"passing argument 1 of 'iicbFp.x' makes integer from pointer without a cast\" } */\n-TESTASS(iicc, int, char *); /* { dg-error \"assignment makes integer from pointer without a cast\" } */\n-TESTINI(iicd, int, char *); /* { dg-error \"initialization makes integer from pointer without a cast\" } */\n-TESTRET(iice, int, char *); /* { dg-error \"return makes integer from pointer without a cast\" } */\n+TESTASS(iicc, int, char *); /* { dg-error \"assignment to 'int' from 'char \\\\*' makes integer from pointer without a cast\" } */\n+TESTINI(iicd, int, char *); /* { dg-error \"initialization of 'int' from 'char \\\\*' makes integer from pointer without a cast\" } */\n+TESTRET(iice, int, char *); /* { dg-error \"returning 'char \\\\*' from a function with return type 'int' makes integer from pointer without a cast\" } */\n \n struct s { int a; };\n "}, {"sha": "e7422eb60201ce16aad6f100f2d60e4c80db2831", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-5.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -15,8 +15,8 @@ f (void)\n {\n   /* (V *)0 is a null pointer constant, so the assignment should be\n      diagnosed.  */\n-  q = (j ? p : (V *)0); /* { dg-error \"5:assignment from incompatible pointer type\" } */\n-  q = (j ? p : (void *)0); /* { dg-error \"5:assignment from incompatible pointer type\" } */\n+  q = (j ? p : (V *)0); /* { dg-error \"5:assignment to 'long int \\\\*' from incompatible pointer type 'int \\\\*'\" } */\n+  q = (j ? p : (void *)0); /* { dg-error \"5:assignment to 'long int \\\\*' from incompatible pointer type 'int \\\\*'\" } */\n   /* And this conversion should be valid.  */\n   (void (*)(void))(V *)0;\n   (void (*)(void))(void *)0;"}, {"sha": "693b97d018c971b40652666b129b96a09c999828", "filename": "gcc/testsuite/gcc.dg/c99-const-expr-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-5.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -15,8 +15,8 @@ f (void)\n {\n   /* (V *)0 is a null pointer constant, so the assignment should be\n      diagnosed.  */\n-  q = (j ? p : (V *)0); /* { dg-error \"assignment from incompatible pointer type\" } */\n-  q = (j ? p : (void *)0); /* { dg-error \"assignment from incompatible pointer type\" } */\n+  q = (j ? p : (V *)0); /* { dg-error \"assignment to 'long int \\\\*' from incompatible pointer type 'int \\\\*'\" } */\n+  q = (j ? p : (void *)0); /* { dg-error \"assignment to 'long int \\\\*' from incompatible pointer type 'int \\\\*'\" } */\n   /* And this conversion should be valid.  */\n   (void (*)(void))(V *)0;\n   (void (*)(void))(void *)0;"}, {"sha": "83468cdad1c335b07570c73739c3d1da82679cb8", "filename": "gcc/testsuite/gcc.dg/conv-2.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fconv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fconv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fconv-2.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -12,15 +12,15 @@ int main()\n   unsigned char *ucp;\n   signed char *scp;\n \n-  ulp = lp;\t/* { dg-warning \" pointer targets in assignment differ in signedness\" } */\n-  lp = ulp;\t/* { dg-warning \" pointer targets in assignment differ in signedness\" } */\n+  ulp = lp;\t/* { dg-warning \" pointer targets in assignment from 'long int \\\\*' to 'long unsigned int \\\\*' differ in signedness\" } */\n+  lp = ulp;\t/* { dg-warning \" pointer targets in assignment from 'long unsigned int \\\\*' to 'long int \\\\*' differ in signedness\" } */\n   f1(ulp);\t/* { dg-warning \" differ in signedness\" } */\n   f2(lp);\t/* { dg-warning \" differ in signedness\" } */\n \n-  cp = ucp;\t/* { dg-warning \" pointer targets in assignment differ in signedness\" } */\n-  cp = scp;\t/* { dg-warning \" pointer targets in assignment differ in signedness\" } */\n-  ucp = scp;\t/* { dg-warning \" pointer targets in assignment differ in signedness\" } */\n-  ucp = cp;\t/* { dg-warning \" pointer targets in assignment differ in signedness\" } */\n-  scp = ucp;\t/* { dg-warning \" pointer targets in assignment differ in signedness\" } */\n-  scp = cp;\t/* { dg-warning \" pointer targets in assignment differ in signedness\" } */\n+  cp = ucp;\t/* { dg-warning \" pointer targets in assignment from 'unsigned char \\\\*' to 'char \\\\*' differ in signedness\" } */\n+  cp = scp;\t/* { dg-warning \" pointer targets in assignment from 'signed char \\\\*' to 'char \\\\*' differ in signedness\" } */\n+  ucp = scp;\t/* { dg-warning \" pointer targets in assignment from 'signed char \\\\*' to 'unsigned char \\\\*' differ in signedness\" } */\n+  ucp = cp;\t/* { dg-warning \" pointer targets in assignment from 'char \\\\*' to 'unsigned char \\\\*' differ in signedness\" } */\n+  scp = ucp;\t/* { dg-warning \" pointer targets in assignment from 'unsigned char \\\\*' to 'signed char \\\\*' differ in signedness\" } */\n+  scp = cp;\t/* { dg-warning \" pointer targets in assignment from 'char \\\\*' to 'signed char \\\\*' differ in signedness\" } */\n }"}, {"sha": "fc4b104df0549df143c4e7df4bde511d10858923", "filename": "gcc/testsuite/gcc.dg/diagnostic-types-1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-types-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-types-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-types-1.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -0,0 +1,57 @@\n+/* PR c/81233 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wc++-compat -Wpedantic\" } */\n+/* Test we're printing the types, like the good compiler we are.  */\n+\n+enum E1 { A } e;\n+enum E2 { B };\n+extern void foo_E (enum E1); /* { dg-message \"expected 'enum E1' but argument is of type 'int'\" } */\n+extern void foo (char *); /* { dg-message \"expected 'char \\\\*' but argument is of type 'int \\\\*'\" } */\n+extern void foo2 (int *); /* { dg-message \"expected 'int \\\\*' but argument is of type 'int'\" } */\n+extern void foo3 (int); /* { dg-message \"expected 'int' but argument is of type 'int \\\\*'\" } */\n+extern void foo4 (int *); /* { dg-message \"expected 'int \\\\*' but argument is of type 'unsigned int \\\\*'\" } */\n+\n+char *\n+fn0 (int *p, char *q)\n+{\n+  p = q; /* { dg-warning \"assignment to 'int \\\\*' from incompatible pointer type 'char \\\\*'\" } */\n+  int *r = q; /* { dg-warning \"initialization of 'int \\\\*' from incompatible pointer type 'char \\\\*'\" } */\n+  foo (r); /* { dg-warning \"passing argument 1 of 'foo' from incompatible pointer type\" } */\n+  return p; /* { dg-warning \"returning 'int \\\\*' from a function with incompatible return type 'char \\\\*'\" } */\n+}\n+\n+int *\n+fn1 (int *p)\n+{\n+  p = 1; /* { dg-warning \"assignment to 'int \\\\*' from 'int' makes pointer from integer without a cast\" } */\n+  int *q = 1; /* { dg-warning \"initialization of 'int \\\\*' from 'int' makes pointer from integer without a cast\" } */\n+  foo2 (1); /* { dg-warning \"passing argument 1 of 'foo2' makes pointer from integer without a cast\" } */\n+  return 1; /* { dg-warning \"returning 'int' from a function with return type 'int \\\\*' makes pointer from integer without a cast\" } */\n+}\n+\n+int\n+fn2 (int i, int *p)\n+{\n+  i = p; /* { dg-warning \"assignment to 'int' from 'int \\\\*' makes integer from pointer without a cast\" } */\n+  int j = p; /* { dg-warning \"initialization of 'int' from 'int \\\\*' makes integer from pointer without a cast\" } */\n+  foo3 (p); /* { dg-warning \"passing argument 1 of 'foo3' makes integer from pointer without a cast\" } */\n+  return p; /* { dg-warning \"returning 'int \\\\*' from a function with return type 'int' makes integer from pointer without a cast\" } */\n+}\n+\n+int *\n+fn3 (int *p, unsigned int *u)\n+{\n+  p = u; /* { dg-warning \"pointer targets in assignment from 'unsigned int \\\\*' to 'int \\\\*' differ in signedness\" } */\n+  int *q = u; /* { dg-warning \"pointer targets in initialization of 'int \\\\*' from 'unsigned int \\\\*' differ in signedness\" } */\n+  foo4 (u); /* { dg-warning \"pointer targets in passing argument 1 of 'foo4' differ in signedness\" } */\n+  return u; /* { dg-warning \"pointer targets in returning 'unsigned int \\\\*' from a function with return type 'int \\\\*' differ in signedness\" } */\n+}\n+\n+enum E1\n+fn4 (void)\n+{\n+  foo_E (B); /* { dg-warning \"enum conversion when passing argument\" } */\n+  e = 0; /* { dg-warning \"enum conversion from 'int' to 'enum E1' in assignment is invalid\" } */\n+  enum E1 f = 0; /* { dg-warning \"enum conversion from 'int' to 'enum E1' in initialization is invalid\" } */\n+  return 0; /* { dg-warning \"enum conversion from 'int' to 'enum E1' in return is invalid\" } */\n+}"}, {"sha": "de5e570978ccf693dad75f09d2a6d50bb4f784a2", "filename": "gcc/testsuite/gcc.dg/init-bad-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-7.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -8,4 +8,4 @@ struct f\n };\n \n char b[10];\n-struct f g = {b}; /* { dg-warning \"initialization from incompatible pointer type|near initialization for\" } */\n+struct f g = {b}; /* { dg-warning \"initialization of 'int \\\\*' from incompatible pointer type|near initialization for\" } */"}, {"sha": "a9d9fbae1487279a4b61b63e5d43459bd1df2123", "filename": "gcc/testsuite/gcc.dg/overflow-warn-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-1.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -47,10 +47,10 @@ static int sc = INT_MAX + 1; /* { dg-warning \"25:integer overflow in expression\"\n    constants.  The third has the overflow in an unevaluated\n    subexpression, so is a null pointer constant.  */\n void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n-/* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } .-1 } */\n+/* { dg-warning \"initialization of 'void \\\\*' from 'int' makes pointer from integer without a cast\" \"null\" { target *-*-* } .-1 } */\n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n /* { dg-error \"initializer element is not constant\" \"constant\" { target *-*-* } .-1 } */\n-/* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n+/* { dg-warning \"initialization of 'void \\\\*' from 'int' makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n void *r = (1 ? 0 : INT_MAX+1);\n \n void"}, {"sha": "9232800fb2e17c14269c3809d20ed901c48b45cd", "filename": "gcc/testsuite/gcc.dg/overflow-warn-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -47,10 +47,10 @@ static int sc = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" }\n    constants.  The third has the overflow in an unevaluated\n    subexpression, so is a null pointer constant.  */\n void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n-/* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } .-1 } */\n+/* { dg-warning \"initialization of 'void \\\\*' from 'int' makes pointer from integer without a cast\" \"null\" { target *-*-* } .-1 } */\n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n /* { dg-error \"initializer element is not constant\" \"constant\" { target *-*-* } .-1 } */\n-/* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n+/* { dg-warning \"initialization of 'void \\\\*' from 'int' makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n void *r = (1 ? 0 : INT_MAX+1);\n \n void"}, {"sha": "f64047795c7bf17a2f3a7bc093901ac4c6b72d48", "filename": "gcc/testsuite/gcc.dg/overflow-warn-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-3.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -53,10 +53,10 @@ static int sc = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" }\n    subexpression, so is a null pointer constant.  */\n void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n-/* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n+/* { dg-warning \"initialization of 'void \\\\*' from 'int' makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n /* { dg-error \"initializer element is not constant\" \"constant\" { target *-*-* } .-1 } */\n-/* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n+/* { dg-warning \"initialization of 'void \\\\*' from 'int' makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n void *r = (1 ? 0 : INT_MAX+1);\n \n void"}, {"sha": "eb595aa7914f2e4bb72cc646759bd885c76558ed", "filename": "gcc/testsuite/gcc.dg/overflow-warn-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-4.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -53,10 +53,10 @@ static int sc = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" }\n    subexpression, so is a null pointer constant.  */\n void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n-/* { dg-error \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n+/* { dg-error \"initialization of 'void \\\\*' from 'int' makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n /* { dg-error \"initializer element is not constant\" \"constant\" { target *-*-* } .-1 } */\n-/* { dg-error \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n+/* { dg-error \"initialization of 'void \\\\*' from 'int' makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n void *r = (1 ? 0 : INT_MAX+1);\n \n void"}, {"sha": "bb63797b2372873b4cc0c52816e9255d78bf0efb", "filename": "gcc/testsuite/gcc.dg/pointer-array-atomic.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-array-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-array-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-array-atomic.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -6,8 +6,8 @@ void transpose0(double* out, _Atomic double* in) { }\n void transpose1(double out[2][2], _Atomic double in[2][2]) { }\n void transpose2(double out[2][2][2], _Atomic double in[2][2][2]) { }\n // return\n-int (*x2(_Atomic int x[3][3]))[3] { return x; } /* { dg-warning \"return from incompatible pointer type\" } */\n-_Atomic int (*x3(int x[3][3]))[3] { return x; } /* { dg-warning \"return from incompatible pointer type\" } */\n+int (*x2(_Atomic int x[3][3]))[3] { return x; } /* { dg-warning \"returning '_Atomic int \\\\(\\\\*\\\\)\\\\\\[3\\\\\\]' from a function with incompatible return type\" } */\n+_Atomic int (*x3(int x[3][3]))[3] { return x; } /* { dg-warning \"returning 'int \\\\(\\\\*\\\\)\\\\\\[3\\\\\\]' from a function with incompatible return type\" } */\n void test(void)\n {\n \tdouble x0[2];\n@@ -31,13 +31,13 @@ void test(void)\n \ttranspose2(y2, o2); /* { dg-warning \"passing argument 2 of 'transpose2' from incompatible pointer type\" } */\n \ttranspose2(y2, x2); /* { dg-warning \"passing argument 2 of 'transpose2' from incompatible pointer type\" } */\n \t// initialization\n-\t_Atomic double (*x0p) = x0; /* { dg-warning \"initialization from incompatible pointer type\" } */\n-\t_Atomic double (*x1p)[2] = x1; /* { dg-warning \"initialization from incompatible pointer type\" } */\n-\t_Atomic double (*x2p)[2][2] = x2; /* { dg-warning \"initialization from incompatible pointer type\" } */\n+\t_Atomic double (*x0p) = x0; /* { dg-warning \"initialization of '_Atomic double \\\\*' from incompatible pointer type\" } */\n+\t_Atomic double (*x1p)[2] = x1; /* { dg-warning \"initialization of '_Atomic double \\\\(\\\\*\\\\)\\\\\\[2\\\\\\]' from incompatible pointer type\" } */\n+\t_Atomic double (*x2p)[2][2] = x2; /* { dg-warning \"initialization of '_Atomic double \\\\(\\\\*\\\\)\\\\\\[2\\\\\\]\\\\\\[2\\\\\\]' from incompatible pointer type\" } */\n \t// assignment\n-\tx0p = x0; /* { dg-warning \"assignment from incompatible pointer type\" } */\n-\tx1p = x1; /* { dg-warning \"assignment from incompatible pointer type\" } */\n-\tx2p = x2; /* { dg-warning \"assignment from incompatible pointer type\" } */\n+\tx0p = x0; /* { dg-warning \"assignment to '_Atomic double \\\\*' from incompatible pointer type\" } */\n+\tx1p = x1; /* { dg-warning \"assignment to '_Atomic double \\\\(\\\\*\\\\)\\\\\\[2\\\\\\]' from incompatible pointer type\" } */\n+\tx2p = x2; /* { dg-warning \"assignment to '_Atomic double \\\\(\\\\*\\\\)\\\\\\[2\\\\\\]\\\\\\[2\\\\\\]' from incompatible pointer type\" } */\n \t// subtraction\n \t&(x0[1]) - &(z0[0]); /* { dg-error \"invalid operands to binary\" } */\n \t&(x1[1]) - &(z1[0]); /* { dg-error \"invalid operands to binary\" } */"}, {"sha": "f49d1d29f9c9837094ecf8d9f0577c8ebcc59f74", "filename": "gcc/testsuite/gcc.dg/pr26865.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26865.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26865.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26865.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -4,5 +4,5 @@\n void\n foo (void)\n {\n-  char *e = alloca (100); /* { dg-warning \"implicit declaration|initialization makes\" } */\n+  char *e = alloca (100); /* { dg-warning \"implicit declaration|initialization of 'char \\\\*' from 'int' makes\" } */\n }"}, {"sha": "4aa8493d1a306bb3acd179561b7eb6cdf6a5fd97", "filename": "gcc/testsuite/gcc.dg/pr61162-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61162-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61162-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61162-2.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -8,7 +8,7 @@ struct s { int a; };\n enum e\n fn1 (void)\n {\n-  return 0; /* { dg-warning \"10:enum conversion in return\" } */\n+  return 0; /* { dg-warning \"10:enum conversion from 'int' to 'enum e' in return\" } */\n }\n \n int\n@@ -26,19 +26,19 @@ fn3 (void)\n int\n fn4 (int *a)\n {\n-  return a; /* { dg-warning \"10:return makes integer from pointer without a cast\" } */\n+  return a; /* { dg-warning \"10:returning 'int \\\\*' from a function with return type 'int' makes integer from pointer without a cast\" } */\n }\n \n int *\n fn5 (int a)\n {\n-  return a; /* { dg-warning \"10:return makes pointer from integer without a cast\" } */\n+  return a; /* { dg-warning \"10:returning 'int' from a function with return type 'int \\\\*' makes pointer from integer without a cast\" } */\n }\n \n unsigned int *\n fn6 (int *i)\n {\n-  return i; /* { dg-warning \"10:pointer targets in return differ\" } */\n+  return i; /* { dg-warning \"10:pointer targets in returning 'int \\\\*' from a function with return type 'unsigned int \\\\*' differ\" } */\n }\n \n void *"}, {"sha": "7ed0741e6c032f11b9a2dc69ebe79984f0f3488a", "filename": "gcc/testsuite/gcc.dg/pr61162.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61162.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61162.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61162.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -6,7 +6,7 @@ enum e { A };\n enum e\n fn1 (void)\n {\n-  enum e e, q = 0; /* { dg-warning \"17:enum conversion in initialization is invalid\" } */\n-  e = 0; /* { dg-warning \"5:enum conversion in assignment is invalid\" } */\n-  1; return 0; /* { dg-warning \"13:enum conversion in return is invalid\" } */\n+  enum e e, q = 0; /* { dg-warning \"17:enum conversion from 'int' to 'enum e' in initialization is invalid\" } */\n+  e = 0; /* { dg-warning \"5:enum conversion from 'int' to 'enum e' in assignment is invalid\" } */\n+  1; return 0; /* { dg-warning \"13:enum conversion from 'int' to 'enum e' in return is invalid\" } */\n }"}, {"sha": "260cc3e3821c6db51010e8784bf3826f370fd990", "filename": "gcc/testsuite/gcc.dg/pr67730-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67730-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67730-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67730-2.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -9,14 +9,14 @@ extern void bar (int);\n int\n fn1 (void)\n {\n-  int a = NULL; /* { dg-warning \"initialization makes integer from pointer\" } */\n-  a = NULL; /* { dg-warning \"assignment makes integer from pointer\" } */\n+  int a = NULL; /* { dg-warning \"initialization of 'int' from 'void \\\\*' makes integer from pointer\" } */\n+  a = NULL; /* { dg-warning \"assignment to 'int' from 'void \\\\*' makes integer from pointer\" } */\n   bar (NULL); /* { dg-warning \"passing argument 1\" } */\n-  return NULL; /* { dg-warning \"return makes integer from pointer\" } */\n+  return NULL; /* { dg-warning \"returning 'void \\\\*' from a function with return type 'int' makes integer from pointer\" } */\n }\n \n int\n fn2 (void)\n {\n-  RETURN; /* { dg-warning \"return makes integer from pointer\" } */\n+  RETURN; /* { dg-warning \"returning 'void \\\\*' from a function with return type 'int' makes integer from pointer\" } */\n }"}, {"sha": "1addfa3f6aaedb40d168f3d465d8db4d5f041e38", "filename": "gcc/testsuite/gcc.dg/pr69156.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69156.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69156.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69156.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -5,6 +5,6 @@\n _Bool\n foo ()\n {\n-  _Bool (*f) () = __builtin_abs;\t/* { dg-warning \"initialization from incompatible pointer type\" } */\n+  _Bool (*f) () = __builtin_abs;\t/* { dg-warning \"initialization of '_Bool \\\\(\\\\*\\\\)\\\\(\\\\)' from incompatible pointer type\" } */\n   return f (0);\n }"}, {"sha": "59d231e1623db0167d21d2385d6ebc3881e698e1", "filename": "gcc/testsuite/gcc.dg/pr70174.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70174.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70174.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70174.c?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -7,5 +7,5 @@ struct S { int f : 4; } a;\n void\n foo (void)\n { \n-  a.f = foo;\t/* { dg-warning \"assignment makes integer from pointer without a cast\" } */\n+  a.f = foo;\t/* { dg-warning \"assignment to 'signed char:4' from 'void \\\\(\\\\*\\\\)\\\\(void\\\\)' makes integer from pointer without a cast\" } */\n }"}, {"sha": "4c6b560bab43369337f1f149d9d0376d090dfb2d", "filename": "gcc/testsuite/objc.dg/proto-lossage-4.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-4.m?ref=296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "patch": "@@ -28,21 +28,21 @@ long foo(void) {\n   receiver += [receiver anotherValue]; /* { dg-warning \"invalid receiver type .intptr_t.\" } */\n \n   receiver += [(Obj *)receiver someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n-/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } .-1 } */\n+/* { dg-warning \"assignment to 'intptr_t {aka long int}' from 'id' makes integer from pointer without a cast\" \"\" { target *-*-* } .-1 } */\n \n   receiver += [(Obj *)receiver anotherValue];\n   receiver += [(Obj <Proto> *)receiver someValue];\n   receiver += [(Obj <Proto> *)receiver anotherValue];\n   receiver += [objrcvr someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n-/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } .-1 } */\n+/* { dg-warning \"assignment to 'intptr_t {aka long int}' from 'id' makes integer from pointer without a cast\" \"\" { target *-*-* } .-1 } */\n \n   receiver += [objrcvr anotherValue];\n   receiver += [(Obj <Proto> *)objrcvr someValue];\n   receiver += [(Obj <Proto> *)objrcvr anotherValue];\n   receiver += [objrcvr2 someValue];\n   receiver += [objrcvr2 anotherValue];\n   receiver += [(Obj *)objrcvr2 someValue]; /* { dg-warning \".Obj. may not respond to .\\\\-someValue.\" } */\n-/* { dg-warning \"assignment makes integer from pointer without a cast\" \"\" { target *-*-* } .-1 } */\n+/* { dg-warning \"assignment to 'intptr_t {aka long int}' from 'id' makes integer from pointer without a cast\" \"\" { target *-*-* } .-1 } */\n \n   receiver += [(Obj *)objrcvr2 anotherValue];\n "}]}