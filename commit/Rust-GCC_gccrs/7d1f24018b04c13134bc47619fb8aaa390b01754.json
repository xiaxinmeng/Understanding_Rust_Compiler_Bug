{"sha": "7d1f24018b04c13134bc47619fb8aaa390b01754", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QxZjI0MDE4YjA0YzEzMTM0YmM0NzYxOWZiOGFhYTM5MGIwMTc1NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-15T08:29:11Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-15T08:29:11Z"}, "message": "[AArch64] Use SVE reversed shifts in preference to MOVPRFX\n\nThis patch makes us use reversed SVE shifts when the first operand\ncan't be tied to the output but the second can.  This is tested\nmore thoroughly by the ACLE patches but is really an independent\nimprovement.\n\n2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (*v<ASHIFT:optab><SVE_I:mode>3):\n\tAdd an alternative that uses reversed shifts.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/shift_1.c: Accept reversed shifts.\n\nCo-Authored-By: Prathamesh Kulkarni <prathamesh.kulkarni@linaro.org>\n\nFrom-SVN: r274512", "tree": {"sha": "a0e66a949a5a307f1fe4f94cb040678a3266d7f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0e66a949a5a307f1fe4f94cb040678a3266d7f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d1f24018b04c13134bc47619fb8aaa390b01754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d1f24018b04c13134bc47619fb8aaa390b01754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d1f24018b04c13134bc47619fb8aaa390b01754", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d1f24018b04c13134bc47619fb8aaa390b01754/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42418c1f7f5cb3b2f466f88053acc818ddc5cd4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42418c1f7f5cb3b2f466f88053acc818ddc5cd4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42418c1f7f5cb3b2f466f88053acc818ddc5cd4d"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "7a68a4554e236b37c08adcaf2e1514a65755f60c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d1f24018b04c13134bc47619fb8aaa390b01754/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d1f24018b04c13134bc47619fb8aaa390b01754/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d1f24018b04c13134bc47619fb8aaa390b01754", "patch": "@@ -1,3 +1,9 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* config/aarch64/aarch64-sve.md (*v<ASHIFT:optab><SVE_I:mode>3):\n+\tAdd an alternative that uses reversed shifts.\n+\n 2019-08-15  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64-cores.def (cortex-a76): Use neoversen1 tuning"}, {"sha": "af68c17c9891c508ad9a384401e37910d62b2e20", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d1f24018b04c13134bc47619fb8aaa390b01754/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d1f24018b04c13134bc47619fb8aaa390b01754/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=7d1f24018b04c13134bc47619fb8aaa390b01754", "patch": "@@ -2455,23 +2455,24 @@\n ;; likely to gain much and would make the instruction seem less uniform\n ;; to the register allocator.\n (define_insn_and_split \"*v<optab><mode>3\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, ?&w\")\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, w, ?&w\")\n \t(unspec:SVE_I\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n \t   (ASHIFT:SVE_I\n-\t     (match_operand:SVE_I 2 \"register_operand\" \"w, 0, w\")\n-\t     (match_operand:SVE_I 3 \"aarch64_sve_<lr>shift_operand\" \"D<lr>, w, w\"))]\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"w, 0, w, w\")\n+\t     (match_operand:SVE_I 3 \"aarch64_sve_<lr>shift_operand\" \"D<lr>, w, 0, w\"))]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"@\n    #\n    <shift>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   <shift>r\\t%0.<Vetype>, %1/m, %3.<Vetype>, %2.<Vetype>\n    movprfx\\t%0, %2\\;<shift>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n   \"&& reload_completed\n    && !register_operand (operands[3], <MODE>mode)\"\n   [(set (match_dup 0) (ASHIFT:SVE_I (match_dup 2) (match_dup 3)))]\n   \"\"\n-  [(set_attr \"movprfx\" \"*,*,yes\")]\n+  [(set_attr \"movprfx\" \"*,*,*,yes\")]\n )\n \n ;; Unpredicated shift operations by a constant (post-RA only)."}, {"sha": "67d356986d830605d4630cf970901d367b266ea7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d1f24018b04c13134bc47619fb8aaa390b01754/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d1f24018b04c13134bc47619fb8aaa390b01754/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d1f24018b04c13134bc47619fb8aaa390b01754", "patch": "@@ -1,3 +1,8 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/shift_1.c: Accept reversed shifts.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "5ee66da15cafbf9834a83ea7b7affb731beef8a8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/shift_1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d1f24018b04c13134bc47619fb8aaa390b01754/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fshift_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d1f24018b04c13134bc47619fb8aaa390b01754/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fshift_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fshift_1.c?ref=7d1f24018b04c13134bc47619fb8aaa390b01754", "patch": "@@ -75,9 +75,9 @@ DO_IMMEDIATE_OPS (63, int64_t, 63);\n /* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n \n-/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n-/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n-/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasrr?\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsrr?\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlslr?\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n \n /* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, z[0-9]+\\.b, #5\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, z[0-9]+\\.b, #5\\n} 1 } } */"}]}