{"sha": "1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMyOGZlM2FmZWUyYTdkZGU2NWY5YWE5NjU2MGQwMTcwYWYzYWFlNw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-06-06T10:23:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:23:26Z"}, "message": "sinput.ads, [...] (Unlock): New procedure.\n\n2007-04-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sinput.ads, sinput.adb, uintp.ads, urealp.adb, stringt.adb,\n\tsem_elim.adb, prj-strt.adb, repinfo.ads, repinfo.adb, namet.ads,\n\telists.ads, elists.adb, lib.ads, lib.adb (Unlock): New procedure.\n\tFix lower bound of tables.\n\tAdd rep clauses.\n\n\t* nlists.adb: Ditto.\n\t(Prev_Node, Next_Node): Change index type to Int so that it properly\n\tcovers the range First_Node_Id - 1 up.\n\nFrom-SVN: r125391", "tree": {"sha": "cfb263da79acf0351b12e03edf6c58d335c721a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfb263da79acf0351b12e03edf6c58d335c721a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/comments", "author": null, "committer": null, "parents": [{"sha": "0a36105d5657dd7126160c5bae2b9b68af63fcff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a36105d5657dd7126160c5bae2b9b68af63fcff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a36105d5657dd7126160c5bae2b9b68af63fcff"}], "stats": {"total": 427, "additions": 341, "deletions": 86}, "files": [{"sha": "243b18491bc937e3000a7c6191d4f1615dae9502", "filename": "gcc/ada/elists.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Felists.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Felists.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Felists.adb?ref=1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -90,7 +90,7 @@ package body Elists is\n \n    package Elists is new Table.Table (\n      Table_Component_Type => Elist_Header,\n-     Table_Index_Type     => Elist_Id,\n+     Table_Index_Type     => Elist_Id'Base,\n      Table_Low_Bound      => First_Elist_Id,\n      Table_Initial        => Alloc.Elists_Initial,\n      Table_Increment      => Alloc.Elists_Increment,\n@@ -103,7 +103,7 @@ package body Elists is\n \n    package Elmts is new Table.Table (\n      Table_Component_Type => Elmt_Item,\n-     Table_Index_Type     => Elmt_Id,\n+     Table_Index_Type     => Elmt_Id'Base,\n      Table_Low_Bound      => First_Elmt_Id,\n      Table_Initial        => Alloc.Elmts_Initial,\n      Table_Increment      => Alloc.Elmts_Increment,\n@@ -482,4 +482,14 @@ package body Elists is\n       Elmts.Tree_Write;\n    end Tree_Write;\n \n+   ------------\n+   -- Unlock --\n+   ------------\n+\n+   procedure Unlock is\n+   begin\n+      Elists.Locked := False;\n+      Elmts.Locked := False;\n+   end Unlock;\n+\n end Elists;"}, {"sha": "6a0fb00bb3198eb175aeeebaa8f279438f8a17d5", "filename": "gcc/ada/elists.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Felists.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Felists.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Felists.ads?ref=1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -62,6 +62,9 @@ package Elists is\n    procedure Lock;\n    --  Lock tables used for element lists before calling backend\n \n+   procedure Unlock;\n+   --  Unlock list tables, in cases where the back end needs to modify them\n+\n    procedure Tree_Read;\n    --  Initializes internal tables from current tree file using the relevant\n    --  Table.Tree_Read routines. Note that Initialize should not be called if"}, {"sha": "c4afe04d0e4dd3cfd524cd43138fd98483db5946", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,7 +38,6 @@ pragma Style_Checks (All_Checks);\n with Atree;   use Atree;\n with Einfo;   use Einfo;\n with Fname;   use Fname;\n-with Namet;   use Namet;\n with Output;  use Output;\n with Sinfo;   use Sinfo;\n with Sinput;  use Sinput;\n@@ -1027,6 +1026,17 @@ package body Lib is\n       end loop;\n    end Tree_Write;\n \n+   ------------\n+   -- Unlock --\n+   ------------\n+\n+   procedure Unlock is\n+   begin\n+      Linker_Option_Lines.Locked := False;\n+      Load_Stack.Locked := False;\n+      Units.Locked := False;\n+   end Unlock;\n+\n    -----------------\n    -- Version_Get --\n    -----------------"}, {"sha": "73c7b7a6bad94047e938f6cb456fb9d163961aac", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,8 +35,9 @@\n --  information. It contains the routine to load subsidiary units.\n \n with Alloc;\n+with Namet; use Namet;\n with Table;\n-with Types;  use Types;\n+with Types; use Types;\n \n package Lib is\n \n@@ -562,6 +563,9 @@ package Lib is\n    procedure Lock;\n    --  Lock internal tables before calling back end\n \n+   procedure Unlock;\n+   --  Unlock internal tables, in cases where the back end needs to modify them\n+\n    procedure Tree_Read;\n    --  Initializes internal tables from current tree file using the relevant\n    --  Table.Tree_Read routines.\n@@ -658,18 +662,46 @@ private\n       Cunit            : Node_Id;\n       Cunit_Entity     : Entity_Id;\n       Dependency_Num   : Int;\n-      Fatal_Error      : Boolean;\n-      Generate_Code    : Boolean;\n-      Has_RACW         : Boolean;\n       Ident_String     : Node_Id;\n-      Loading          : Boolean;\n       Main_Priority    : Int;\n       Serial_Number    : Nat;\n       Version          : Word;\n-      Dynamic_Elab     : Boolean;\n       Error_Location   : Source_Ptr;\n+      Fatal_Error      : Boolean;\n+      Generate_Code    : Boolean;\n+      Has_RACW         : Boolean;\n+      Dynamic_Elab     : Boolean;\n+      Loading          : Boolean;\n    end record;\n \n+   --  The following representation clause ensures that the above record\n+   --  has no holes. We do this so that when instances of this record are\n+   --  written by Tree_Gen, we do not write uninitialized values to the file.\n+\n+   for Unit_Record use record\n+      Unit_File_Name   at  0 range 0 .. 31;\n+      Unit_Name        at  4 range 0 .. 31;\n+      Munit_Index      at  8 range 0 .. 31;\n+      Expected_Unit    at 12 range 0 .. 31;\n+      Source_Index     at 16 range 0 .. 31;\n+      Cunit            at 20 range 0 .. 31;\n+      Cunit_Entity     at 24 range 0 .. 31;\n+      Dependency_Num   at 28 range 0 .. 31;\n+      Ident_String     at 32 range 0 .. 31;\n+      Main_Priority    at 36 range 0 .. 31;\n+      Serial_Number    at 40 range 0 .. 31;\n+      Version          at 44 range 0 .. 31;\n+      Error_Location   at 48 range 0 .. 31;\n+      Fatal_Error      at 52 range 0 ..  7;\n+      Generate_Code    at 53 range 0 ..  7;\n+      Has_RACW         at 54 range 0 ..  7;\n+      Dynamic_Elab     at 55 range 0 ..  7;\n+      Loading          at 56 range 0 .. 31;\n+   end record;\n+\n+   for Unit_Record'Size use 60 * 8;\n+   --  This ensures that we did not leave out any fields\n+\n    package Units is new Table.Table (\n      Table_Component_Type => Unit_Record,\n      Table_Index_Type     => Unit_Number_Type,\n@@ -740,7 +772,7 @@ private\n \n    package Load_Stack is new Table.Table (\n      Table_Component_Type => Load_Stack_Entry,\n-     Table_Index_Type     => Nat,\n+     Table_Index_Type     => Int,\n      Table_Low_Bound      => 0,\n      Table_Initial        => Alloc.Load_Stack_Initial,\n      Table_Increment      => Alloc.Load_Stack_Increment,"}, {"sha": "6043f209f94a12a8183a8d6c644f49b6deaa18f7", "filename": "gcc/ada/namet.ads", "status": "modified", "additions": 102, "deletions": 8, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Fnamet.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Fnamet.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.ads?ref=1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -136,6 +136,37 @@ package Namet is\n    --  Length of name stored in Name_Buffer. Used as an input parameter for\n    --  Name_Find, and as an output value by Get_Name_String, or Write_Name.\n \n+   -----------------------------\n+   -- Types for Namet Package --\n+   -----------------------------\n+\n+   --  Name_Id values are used to identify entries in the names table. Except\n+   --  for the special values No_Name, and Error_Name, they are subscript\n+   --  values for the Names table defined in package Namet.\n+\n+   --  Note that with only a few exceptions, which are clearly documented, the\n+   --  type Name_Id should be regarded as a private type. In particular it is\n+   --  never appropriate to perform arithmetic operations using this type.\n+\n+   type Name_Id is range Names_Low_Bound .. Names_High_Bound;\n+   for Name_Id'Size use 32;\n+   --  Type used to identify entries in the names table\n+\n+   No_Name : constant Name_Id := Names_Low_Bound;\n+   --  The special Name_Id value No_Name is used in the parser to indicate\n+   --  a situation where no name is present (e.g. on a loop or block).\n+\n+   Error_Name : constant Name_Id := Names_Low_Bound +  1;\n+   --  The special Name_Id value Error_Name is used in the parser to\n+   --  indicate that some kind of error was encountered in scanning out\n+   --  the relevant name, so it does not have a representable label.\n+\n+   subtype Error_Name_Or_No_Name is Name_Id range No_Name .. Error_Name;\n+   --  Used to test for either error name or no name\n+\n+   First_Name_Id : constant Name_Id := Names_Low_Bound + 2;\n+   --  Subscript of first entry in names table\n+\n    -----------------\n    -- Subprograms --\n    -----------------\n@@ -153,7 +184,7 @@ package Namet is\n \n    function Get_Name_String (Id : Name_Id) return String;\n    --  This functional form returns the result as a string without affecting\n-   --  the contents of either Name_Buffer or Name_Len.\n+   --  the contents of either Name_Buffer or Name_Len. The lower bound is 1.\n \n    procedure Get_Unqualified_Name_String (Id : Name_Id);\n    --  Similar to the above except that qualification (as defined in unit\n@@ -215,13 +246,12 @@ package Namet is\n    --  that Initialize must not be called if Tree_Read is used.\n \n    procedure Lock;\n-   --  Lock name table before calling back end. Space for up to 10 extra\n-   --  names and 1000 extra characters is reserved before the table is locked.\n+   --  Lock name tables before calling back end. We reserve some extra space\n+   --  before locking to avoid unnecessary inefficiencies when we unlock.\n \n    procedure Unlock;\n-   --  Unlocks the name table to allow use of the 10 extra names and 1000\n-   --  extra characters reserved by the Lock call. See gnat1drv for details of\n-   --  the need for this.\n+   --  Unlocks the name table to allow use of the extra space reserved by the\n+   --  call to Lock. See gnat1drv for details of the need for this.\n \n    function Length_Of_Name (Id : Name_Id) return Nat;\n    pragma Inline (Length_Of_Name);\n@@ -367,6 +397,58 @@ package Namet is\n    --  described for Get_Decoded_Name_String, and the resulting value stored\n    --  in Name_Len and Name_Buffer is the decoded name.\n \n+   ------------------------------\n+   -- File and Unit Name Types --\n+   ------------------------------\n+\n+   --  These are defined here in Namet rather than Fname and Uname to avoid\n+   --  problems with dependencies, and to avoid dragging in Fname and Uname\n+   --  into many more files, but it would be cleaner to move to Fname/Uname.\n+\n+   type File_Name_Type is new Name_Id;\n+   --  File names are stored in the names table and this type is used to\n+   --  indicate that a Name_Id value is being used to hold a simple file name\n+   --  (which does not include any directory information).\n+\n+   No_File : constant File_Name_Type := File_Name_Type (No_Name);\n+   --  Constant used to indicate no file is present (this is used for example\n+   --  when a search for a file indicates that no file of the name exists).\n+\n+   Error_File_Name : constant File_Name_Type := File_Name_Type (Error_Name);\n+   --  The special File_Name_Type value Error_File_Name is used to indicate\n+   --  a unit name where some previous processing has found an error.\n+\n+   subtype Error_File_Name_Or_No_File is\n+     File_Name_Type range No_File .. Error_File_Name;\n+   --  Used to test for either error file name or no file\n+\n+   type Path_Name_Type is new Name_Id;\n+   --  Path names are stored in the names table and this type is used to\n+   --  indicate that a Name_Id value is being used to hold a path name (that\n+   --  may contain directory information).\n+\n+   No_Path : constant Path_Name_Type := Path_Name_Type (No_Name);\n+   --  Constant used to indicate no path name is present\n+\n+   type Unit_Name_Type is new Name_Id;\n+   --  Unit names are stored in the names table and this type is used to\n+   --  indicate that a Name_Id value is being used to hold a unit name, which\n+   --  terminates in %b for a body or %s for a spec.\n+\n+   No_Unit_Name : constant Unit_Name_Type := Unit_Name_Type (No_Name);\n+   --  Constant used to indicate no file name present\n+\n+   Error_Unit_Name : constant Unit_Name_Type := Unit_Name_Type (Error_Name);\n+   --  The special Unit_Name_Type value Error_Unit_Name is used to indicate\n+   --  a unit name where some previous processing has found an error.\n+\n+   subtype Error_Unit_Name_Or_No_Unit_Name is\n+     Unit_Name_Type range No_Unit_Name .. Error_Unit_Name;\n+\n+   ------------------------\n+   -- Debugging Routines --\n+   ------------------------\n+\n    procedure wn (Id : Name_Id);\n    pragma Export (Ada, wn);\n    --  This routine is intended for debugging use only (i.e. it is intended to\n@@ -427,12 +509,24 @@ private\n       --  Int Value associated with this name\n    end record;\n \n+   for Name_Entry use record\n+      Name_Chars_Index      at  0 range 0 .. 31;\n+      Name_Len              at  4 range 0 .. 15;\n+      Byte_Info             at  6 range 0 .. 7;\n+      Name_Has_No_Encodings at  7 range 0 .. 7;\n+      Hash_Link             at  8 range 0 .. 31;\n+      Int_Info              at 12 range 0 .. 31;\n+   end record;\n+\n+   for Name_Entry'Size use 16 * 8;\n+   --  This ensures that we did not leave out any fields\n+\n    --  This is the table that is referenced by Name_Id entries.\n    --  It contains one entry for each unique name in the table.\n \n    package Name_Entries is new Table.Table (\n      Table_Component_Type => Name_Entry,\n-     Table_Index_Type     => Name_Id,\n+     Table_Index_Type     => Name_Id'Base,\n      Table_Low_Bound      => First_Name_Id,\n      Table_Initial        => Alloc.Names_Initial,\n      Table_Increment      => Alloc.Names_Increment,"}, {"sha": "8778a9ead0ff2125ea6940570e19637f8dd8b578", "filename": "gcc/ada/nlists.adb", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Fnlists.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Fnlists.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.adb?ref=1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -68,7 +68,7 @@ package body Nlists is\n \n    package Lists is new Table.Table (\n      Table_Component_Type => List_Header,\n-     Table_Index_Type     => List_Id,\n+     Table_Index_Type     => List_Id'Base,\n      Table_Low_Bound      => First_List_Id,\n      Table_Initial        => Alloc.Lists_Initial,\n      Table_Increment      => Alloc.Lists_Increment,\n@@ -88,15 +88,15 @@ package body Nlists is\n \n    package Next_Node is new Table.Table (\n       Table_Component_Type => Node_Id,\n-      Table_Index_Type     => Node_Id,\n+      Table_Index_Type     => Node_Id'Base,\n       Table_Low_Bound      => First_Node_Id,\n       Table_Initial        => Alloc.Orig_Nodes_Initial,\n       Table_Increment      => Alloc.Orig_Nodes_Increment,\n       Table_Name           => \"Next_Node\");\n \n    package Prev_Node is new Table.Table (\n       Table_Component_Type => Node_Id,\n-      Table_Index_Type     => Node_Id,\n+      Table_Index_Type     => Node_Id'Base,\n       Table_Low_Bound      => First_Node_Id,\n       Table_Initial        => Alloc.Orig_Nodes_Initial,\n       Table_Increment      => Alloc.Orig_Nodes_Increment,\n@@ -131,9 +131,20 @@ package body Nlists is\n    --------------------------\n \n    procedure Allocate_List_Tables (N : Node_Id) is\n+      Old_Last : constant Node_Id'Base := Next_Node.Last;\n+\n    begin\n+      pragma Assert (N >= Old_Last);\n       Next_Node.Set_Last (N);\n       Prev_Node.Set_Last (N);\n+\n+      --  Make sure we have no uninitialized junk in any new entires added.\n+      --  This ensures that Tree_Gen will not write out any unitialized junk.\n+\n+      for J in Old_Last + 1 .. N loop\n+         Next_Node.Table (J) := Empty;\n+         Prev_Node.Table (J) := Empty;\n+      end loop;\n    end Allocate_List_Tables;\n \n    ------------\n@@ -1379,4 +1390,15 @@ package body Nlists is\n       Prev_Node.Tree_Write;\n    end Tree_Write;\n \n+   ------------\n+   -- Unlock --\n+   ------------\n+\n+   procedure Unlock is\n+   begin\n+      Lists.Locked := False;\n+      Prev_Node.Locked := False;\n+      Next_Node.Locked := False;\n+   end Unlock;\n+\n end Nlists;"}, {"sha": "c5a69926aa62ab5e5f7ddda9d758891272aec86d", "filename": "gcc/ada/prj-strt.adb", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Fprj-strt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Fprj-strt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-strt.adb?ref=1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -25,7 +25,6 @@\n ------------------------------------------------------------------------------\n \n with Err_Vars; use Err_Vars;\n-with Namet;    use Namet;\n with Prj.Attr; use Prj.Attr;\n with Prj.Err;  use Prj.Err;\n with Snames;\n@@ -58,21 +57,23 @@ package body Prj.Strt is\n      Choice_Node_Low_Bound;\n \n    package Choices is\n-      new Table.Table (Table_Component_Type => Choice_String,\n-                       Table_Index_Type     => Choice_Node_Id,\n-                       Table_Low_Bound      => First_Choice_Node_Id,\n-                       Table_Initial        => Choices_Initial,\n-                       Table_Increment      => Choices_Increment,\n-                       Table_Name           => \"Prj.Strt.Choices\");\n+     new Table.Table\n+       (Table_Component_Type => Choice_String,\n+        Table_Index_Type     => Choice_Node_Id'Base,\n+        Table_Low_Bound      => First_Choice_Node_Id,\n+        Table_Initial        => Choices_Initial,\n+        Table_Increment      => Choices_Increment,\n+        Table_Name           => \"Prj.Strt.Choices\");\n    --  Used to store the case labels and check that there is no duplicate\n \n    package Choice_Lasts is\n-      new Table.Table (Table_Component_Type => Choice_Node_Id,\n-                       Table_Index_Type     => Nat,\n-                       Table_Low_Bound      => 1,\n-                       Table_Initial        => 10,\n-                       Table_Increment      => 100,\n-                       Table_Name           => \"Prj.Strt.Choice_Lasts\");\n+     new Table.Table\n+       (Table_Component_Type => Choice_Node_Id,\n+        Table_Index_Type     => Nat,\n+        Table_Low_Bound      => 1,\n+        Table_Initial        => 10,\n+        Table_Increment      => 100,\n+        Table_Name           => \"Prj.Strt.Choice_Lasts\");\n    --  Used to store the indices of the choices in table Choices,\n    --  to distinguish nested case constructions.\n \n@@ -87,12 +88,13 @@ package body Prj.Strt is\n    --  Store the identifier and the location of a simple name\n \n    package Names is\n-      new Table.Table (Table_Component_Type => Name_Location,\n-                       Table_Index_Type     => Nat,\n-                       Table_Low_Bound      => 1,\n-                       Table_Initial        => 10,\n-                       Table_Increment      => 100,\n-                       Table_Name           => \"Prj.Strt.Names\");\n+     new Table.Table\n+       (Table_Component_Type => Name_Location,\n+        Table_Index_Type     => Nat,\n+        Table_Low_Bound      => 1,\n+        Table_Initial        => 10,\n+        Table_Increment      => 100,\n+        Table_Name           => \"Prj.Strt.Names\");\n    --  Used to accumulate the single names of a name\n \n    procedure Add (This_String : Name_Id);\n@@ -193,7 +195,7 @@ package body Prj.Strt is\n \n          if Current_Attribute = Empty_Attribute then\n             Error_Msg_Name_1 := Token_Name;\n-            Error_Msg (\"unknown attribute %\", Token_Ptr);\n+            Error_Msg (\"unknown attribute %%\", Token_Ptr);\n             Reference := Empty_Node;\n \n             --  Scan past the attribute name\n@@ -293,7 +295,7 @@ package body Prj.Strt is\n \n          if Non_Used = 1 then\n             Error_Msg_Name_1 := Choices.Table (First_Non_Used).The_String;\n-            Error_Msg (\"?value { is not used as label\", Case_Location);\n+            Error_Msg (\"?value %% is not used as label\", Case_Location);\n \n          --  If several are not used, report a warning for each one of them\n \n@@ -305,7 +307,7 @@ package body Prj.Strt is\n             for Choice in First_Non_Used .. Choices.Last loop\n                if not Choices.Table (Choice).Already_Used then\n                   Error_Msg_Name_1 := Choices.Table (Choice).The_String;\n-                  Error_Msg (\"\\?{\", Case_Location);\n+                  Error_Msg (\"\\?%%\", Case_Location);\n                end if;\n             end loop;\n          end if;\n@@ -484,7 +486,7 @@ package body Prj.Strt is\n                   --  case construction; report an error.\n \n                   Error_Msg_Name_1 := Choice_String;\n-                  Error_Msg (\"duplicate case label {\", Token_Ptr);\n+                  Error_Msg (\"duplicate case label %%\", Token_Ptr);\n                else\n                   Choices.Table (Choice).Already_Used := True;\n                end if;\n@@ -497,7 +499,7 @@ package body Prj.Strt is\n \n          if not Found then\n             Error_Msg_Name_1 := Choice_String;\n-            Error_Msg (\"illegal case label {\", Token_Ptr);\n+            Error_Msg (\"illegal case label %%\", Token_Ptr);\n          end if;\n \n          --  Scan past the label\n@@ -607,7 +609,7 @@ package body Prj.Strt is\n                   --  This is a repetition, report an error\n \n                   Error_Msg_Name_1 := String_Value;\n-                  Error_Msg (\"duplicate value { in type\", Token_Ptr);\n+                  Error_Msg (\"duplicate value %% in type\", Token_Ptr);\n                   exit;\n                end if;\n "}, {"sha": "93d5fd49023c81fa5ee97dac4cd7279489f097a1", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -63,9 +63,8 @@ package body Repinfo is\n    -- Representation of gcc Expressions --\n    ---------------------------------------\n \n-   --    This table is used only if Frontend_Layout_On_Target is False, so that\n-   --    gigi lays out dynamic size/offset fields using encoded gcc\n-   --    expressions.\n+   --    This table is used only if Frontend_Layout_On_Target is False, so gigi\n+   --    lays out dynamic size/offset fields using encoded gcc expressions.\n \n    --    A table internal to this unit is used to hold the values of back\n    --    annotated expressions. This table is written out by -gnatt and read\n@@ -81,6 +80,20 @@ package body Repinfo is\n       Op3  : Node_Ref_Or_Val;\n    end record;\n \n+   --  The following representation clause ensures that the above record\n+   --  has no holes. We do this so that when instances of this record are\n+   --  written by Tree_Gen, we do not write uninitialized values to the file.\n+\n+   for Exp_Node use record\n+      Expr at  0 range 0 .. 31;\n+      Op1  at  4 range 0 .. 31;\n+      Op2  at  8 range 0 .. 31;\n+      Op3  at 12 range 0 .. 31;\n+   end record;\n+\n+   for Exp_Node'Size use 16 * 8;\n+   --  This ensures that we did not leave out any fields\n+\n    package Rep_Table is new Table.Table (\n       Table_Component_Type => Exp_Node,\n       Table_Index_Type     => Nat,\n@@ -672,6 +685,7 @@ package body Repinfo is\n          when Convention_Protected => Write_Line (\"Protected\");\n          when Convention_Assembler => Write_Line (\"Assembler\");\n          when Convention_C         => Write_Line (\"C\");\n+         when Convention_CIL       => Write_Line (\"CIL\");\n          when Convention_COBOL     => Write_Line (\"COBOL\");\n          when Convention_CPP       => Write_Line (\"C++\");\n          when Convention_Fortran   => Write_Line (\"Fortran\");\n@@ -782,7 +796,7 @@ package body Repinfo is\n       --  length, for the purpose of lining things up nicely.\n \n       Max_Name_Length := 0;\n-      Max_Suni_Length   := 0;\n+      Max_Suni_Length := 0;\n \n       Comp := First_Component_Or_Discriminant (Ent);\n       while Present (Comp) loop\n@@ -983,7 +997,7 @@ package body Repinfo is\n \n                else\n                   Create_Repinfo_File_Access.all\n-                    (File_Name (Source_Index (U)));\n+                    (Get_Name_String (File_Name (Source_Index (U))));\n                   Set_Special_Output (Write_Info_Line'Access);\n                   List_Entities (Cunit_Entity (U));\n                   Set_Special_Output (null);"}, {"sha": "beaaf98eb5d59e182f1e4a2887337feaf30bb07b", "filename": "gcc/ada/repinfo.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Frepinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Frepinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.ads?ref=1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1999-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -182,10 +182,10 @@ package Repinfo is\n       Op1  : Node_Ref_Or_Val;\n       Op2  : Node_Ref_Or_Val := No_Uint;\n       Op3  : Node_Ref_Or_Val := No_Uint) return Node_Ref;\n-   --  Creates a node with using the tree code defined by Expr and from\n-   --  1-3 operands as required (unused operands set as shown to No_Uint)\n-   --  Note that this call can be used to create a discriminant reference\n-   --  by using (Expr => Discrim_Val, Op1 => discriminant_number).\n+   --  Creates a node using the tree code defined by Expr and from one to three\n+   --  operands as required (unused operands set as shown to No_Uint) Note that\n+   --  this call can be used to create a discriminant reference by using (Expr\n+   --  => Discrim_Val, Op1 => discriminant_number).\n \n    function Create_Discrim_Ref (Discr : Entity_Id) return Node_Ref;\n    --  Creates a refrerence to the discriminant whose entity is Discr"}, {"sha": "f7b8c1addfb9c575a3d96531efe6a071e9de6fae", "filename": "gcc/ada/sem_elim.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Fsem_elim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Fsem_elim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elim.adb?ref=1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1997-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -218,7 +218,7 @@ package body Sem_Elim is\n \n    package Elim_Entities is new Table.Table (\n      Table_Component_Type => Elim_Entity_Entry,\n-     Table_Index_Type     => Name_Id,\n+     Table_Index_Type     => Name_Id'Base,\n      Table_Low_Bound      => First_Name_Id,\n      Table_Initial        => 50,\n      Table_Increment      => 200,"}, {"sha": "616b73d552736e8b2f2aea4d780b65b3345ddb62", "filename": "gcc/ada/sinput.adb", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Fsinput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Fsinput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.adb?ref=1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,7 +35,6 @@ pragma Style_Checks (All_Checks);\n --  Subprograms not all in alpha order\n \n with Debug;    use Debug;\n-with Namet;    use Namet;\n with Opt;      use Opt;\n with Output;   use Output;\n with Tree_IO;  use Tree_IO;\n@@ -575,8 +574,8 @@ package body Sinput is\n    --------------------------------\n \n    procedure Register_Source_Ref_Pragma\n-     (File_Name          : Name_Id;\n-      Stripped_File_Name : Name_Id;\n+     (File_Name          : File_Name_Type;\n+      Stripped_File_Name : File_Name_Type;\n       Mapped_Line        : Nat;\n       Line_After_Pragma  : Physical_Line_Number)\n    is\n@@ -587,7 +586,7 @@ package body Sinput is\n       ML : Logical_Line_Number;\n \n    begin\n-      if File_Name /= No_Name then\n+      if File_Name /= No_File then\n          SFR.Reference_Name := Stripped_File_Name;\n          SFR.Full_Ref_Name  := File_Name;\n \n@@ -1202,6 +1201,16 @@ package body Sinput is\n       Source_File.Table (S).Lines_Table_Max := Physical_Line_Number (Max);\n    end Trim_Lines_Table;\n \n+   ------------\n+   -- Unlock --\n+   ------------\n+\n+   procedure Unlock is\n+   begin\n+      Source_File.Locked := False;\n+      Source_File.Release;\n+   end Unlock;\n+\n    --------\n    -- wl --\n    --------"}, {"sha": "db240ff5be19e988fdaba60ecfbdaa53d0c63528", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 55, "deletions": 10, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -66,6 +66,7 @@\n \n with Alloc;\n with Casing; use Casing;\n+with Namet;  use Namet;\n with Table;\n with Types;  use Types;\n \n@@ -323,6 +324,9 @@ package Sinput is\n    procedure Lock;\n    --  Lock internal tables\n \n+   procedure Unlock;\n+   --  Unlock internal tables\n+\n    Main_Source_File : Source_File_Index := No_Source_File;\n    --  This is set to the source file index of the main unit\n \n@@ -517,8 +521,8 @@ package Sinput is\n    --  physical line number.\n \n    procedure Register_Source_Ref_Pragma\n-     (File_Name          : Name_Id;\n-      Stripped_File_Name : Name_Id;\n+     (File_Name          : File_Name_Type;\n+      Stripped_File_Name : File_Name_Type;\n       Mapped_Line        : Nat;\n       Line_After_Pragma  : Physical_Line_Number);\n    --  Register a source reference pragma, the parameter File_Name is the\n@@ -670,29 +674,28 @@ private\n    --  See earlier descriptions for meanings of public fields\n \n    type Source_File_Record is record\n-\n       File_Name         : File_Name_Type;\n-      File_Type         : Type_Of_File;\n       Reference_Name    : File_Name_Type;\n       Debug_Source_Name : File_Name_Type;\n       Full_Debug_Name   : File_Name_Type;\n       Full_File_Name    : File_Name_Type;\n       Full_Ref_Name     : File_Name_Type;\n-      Inlined_Body      : Boolean;\n-      License           : License_Type;\n       Num_SRef_Pragmas  : Nat;\n       First_Mapped_Line : Logical_Line_Number;\n       Source_Text       : Source_Buffer_Ptr;\n       Source_First      : Source_Ptr;\n       Source_Last       : Source_Ptr;\n-      Time_Stamp        : Time_Stamp_Type;\n       Source_Checksum   : Word;\n       Last_Source_Line  : Physical_Line_Number;\n-      Keyword_Casing    : Casing_Type;\n-      Identifier_Casing : Casing_Type;\n       Instantiation     : Source_Ptr;\n       Template          : Source_File_Index;\n       Unit              : Unit_Number_Type;\n+      Time_Stamp        : Time_Stamp_Type;\n+      File_Type         : Type_Of_File;\n+      Inlined_Body      : Boolean;\n+      License           : License_Type;\n+      Keyword_Casing    : Casing_Type;\n+      Identifier_Casing : Casing_Type;\n \n       --  The following fields are for internal use only (i.e. only in the\n       --  body of Sinput or its children, with no direct access by clients).\n@@ -722,6 +725,48 @@ private\n \n    end record;\n \n+   --  The following representation clause ensures that the above record\n+   --  has no holes. We do this so that when instances of this record are\n+   --  written by Tree_Gen, we do not write uninitialized values to the file.\n+\n+   AS : constant Pos := Standard'Address_Size;\n+\n+   for Source_File_Record use record\n+      File_Name           at  0 range 0 .. 31;\n+      Reference_Name      at  4 range 0 .. 31;\n+      Debug_Source_Name   at  8 range 0 .. 31;\n+      Full_Debug_Name     at 12 range 0 .. 31;\n+      Full_File_Name      at 16 range 0 .. 31;\n+      Full_Ref_Name       at 20 range 0 .. 31;\n+      Num_SRef_Pragmas    at 24 range 0 .. 31;\n+      First_Mapped_Line   at 28 range 0 .. 31;\n+      Source_First        at 32 range 0 .. 31;\n+      Source_Last         at 36 range 0 .. 31;\n+      Source_Checksum     at 40 range 0 .. 31;\n+      Last_Source_Line    at 44 range 0 .. 31;\n+      Instantiation       at 48 range 0 .. 31;\n+      Template            at 52 range 0 .. 31;\n+      Unit                at 56 range 0 .. 31;\n+      Time_Stamp          at 60 range 0 .. 8 * Time_Stamp_Length - 1;\n+      File_Type           at 74 range 0 .. 7;\n+      Inlined_Body        at 75 range 0 .. 7;\n+      License             at 76 range 0 .. 7;\n+      Keyword_Casing      at 77 range 0 .. 7;\n+      Identifier_Casing   at 78 range 0 .. 15;\n+      Sloc_Adjust         at 80 range 0 .. 31;\n+      Lines_Table_Max     at 84 range 0 .. 31;\n+\n+      --  The following fields are pointers, so we have to specialize their\n+      --  lengths using pointer size, obtained above as Standard'Address_Size.\n+\n+      Source_Text         at 88 range 0      .. AS - 1;\n+      Lines_Table         at 88 range AS     .. AS * 2 - 1;\n+      Logical_Lines_Table at 88 range AS * 2 .. AS * 3 - 1;\n+   end record;\n+\n+   for Source_File_Record'Size use 88 * 8 + AS * 3;\n+   --  This ensures that we did not leave out any fields\n+\n    package Source_File is new Table.Table (\n      Table_Component_Type => Source_File_Record,\n      Table_Index_Type     => Source_File_Index,"}, {"sha": "1c03a8836af24aa363265a9bf1a2585c41673bee", "filename": "gcc/ada/stringt.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Fstringt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Fstringt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstringt.adb?ref=1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -61,7 +61,7 @@ package body Stringt is\n \n    package Strings is new Table.Table (\n      Table_Component_Type => String_Entry,\n-     Table_Index_Type     => String_Id,\n+     Table_Index_Type     => String_Id'Base,\n      Table_Low_Bound      => First_String_Id,\n      Table_Initial        => Alloc.Strings_Initial,\n      Table_Increment      => Alloc.Strings_Increment,"}, {"sha": "e689cf8412734fcc477546e4293249764ec22a27", "filename": "gcc/ada/uintp.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Fuintp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Fuintp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.ads?ref=1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -518,7 +518,7 @@ private\n \n    package Uints is new Table.Table (\n      Table_Component_Type => Uint_Entry,\n-     Table_Index_Type     => Uint,\n+     Table_Index_Type     => Uint'Base,\n      Table_Low_Bound      => Uint_First_Entry,\n      Table_Initial        => Alloc.Uints_Initial,\n      Table_Increment      => Alloc.Uints_Increment,"}, {"sha": "737e4b4e80ee59c47bcc3c85e04f8d57ee770777", "filename": "gcc/ada/urealp.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Furealp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c28fe3afee2a7dde65f9aa96560d0170af3aae7/gcc%2Fada%2Furealp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.adb?ref=1c28fe3afee2a7dde65f9aa96560d0170af3aae7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -57,9 +57,23 @@ package body Urealp is\n       --  Flag set if value is negative\n    end record;\n \n+   --  The following representation clause ensures that the above record\n+   --  has no holes. We do this so that when instances of this record are\n+   --  written by Tree_Gen, we do not write uninitialized values to the file.\n+\n+   for Ureal_Entry use record\n+      Num      at  0 range 0 .. 31;\n+      Den      at  4 range 0 .. 31;\n+      Rbase    at  8 range 0 .. 31;\n+      Negative at 12 range 0 .. 31;\n+   end record;\n+\n+   for Ureal_Entry'Size use 16 * 8;\n+   --  This ensures that we did not leave out any fields\n+\n    package Ureals is new Table.Table (\n      Table_Component_Type => Ureal_Entry,\n-     Table_Index_Type     => Ureal,\n+     Table_Index_Type     => Ureal'Base,\n      Table_Low_Bound      => Ureal_First_Entry,\n      Table_Initial        => Alloc.Ureals_Initial,\n      Table_Increment      => Alloc.Ureals_Increment,"}]}