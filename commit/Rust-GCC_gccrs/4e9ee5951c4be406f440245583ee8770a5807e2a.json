{"sha": "4e9ee5951c4be406f440245583ee8770a5807e2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU5ZWU1OTUxYzRiZTQwNmY0NDAyNDU1ODNlZTg3NzBhNTgwN2UyYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-13T11:18:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-13T11:18:17Z"}, "message": "[multiple changes]\n\n2015-11-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Constant_Indexing_OK): If the indexing is the\n\tprefix of a procedure call assume that constant indexing is\n\tnot chosen.\n\n2015-11-13  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sigtramp.h: Fix formatting throughout, do not include other\n\theaders, add missing preprocessor condition and 'extern' keywords.\n\t* sigtramp-armdroid.c: Include <sys/ucontext.h>.\n\t* init.c [Android]: Likewise.\n\nFrom-SVN: r230304", "tree": {"sha": "b7e91134756cbe01e7e670535cf4f42b0d0b0514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7e91134756cbe01e7e670535cf4f42b0d0b0514"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e9ee5951c4be406f440245583ee8770a5807e2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9ee5951c4be406f440245583ee8770a5807e2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e9ee5951c4be406f440245583ee8770a5807e2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9ee5951c4be406f440245583ee8770a5807e2a/comments", "author": null, "committer": null, "parents": [{"sha": "746fb0c5cdf236c1953dc2cf883efe28dbb1149c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/746fb0c5cdf236c1953dc2cf883efe28dbb1149c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/746fb0c5cdf236c1953dc2cf883efe28dbb1149c"}], "stats": {"total": 90, "additions": 54, "deletions": 36}, "files": [{"sha": "90910ca0909871e18e825e408b317af1a34165d9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9ee5951c4be406f440245583ee8770a5807e2a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9ee5951c4be406f440245583ee8770a5807e2a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4e9ee5951c4be406f440245583ee8770a5807e2a", "patch": "@@ -1,3 +1,16 @@\n+2015-11-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Constant_Indexing_OK): If the indexing is the\n+\tprefix of a procedure call assume that constant indexing is\n+\tnot chosen.\n+\n+2015-11-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sigtramp.h: Fix formatting throughout, do not include other\n+\theaders, add missing preprocessor condition and 'extern' keywords.\n+\t* sigtramp-armdroid.c: Include <sys/ucontext.h>.\n+\t* init.c [Android]: Likewise.\n+\n 2015-11-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* init.c [Darwin/arm64] (__gnat_sigtramp): Do not increment PC,"}, {"sha": "f0afc4064543a4cfa591e5878f4e0f5ad38e6533", "filename": "gcc/ada/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9ee5951c4be406f440245583ee8770a5807e2a/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9ee5951c4be406f440245583ee8770a5807e2a/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=4e9ee5951c4be406f440245583ee8770a5807e2a", "patch": "@@ -2530,6 +2530,7 @@ __gnat_install_handler (void)\n /*******************/\n \n #include <signal.h>\n+#include <sys/ucontext.h>\n #include \"sigtramp.h\"\n \n #define HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE"}, {"sha": "1b14550ba74cffbc0969d12d1fb6a545b6427870", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9ee5951c4be406f440245583ee8770a5807e2a/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9ee5951c4be406f440245583ee8770a5807e2a/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=4e9ee5951c4be406f440245583ee8770a5807e2a", "patch": "@@ -7296,7 +7296,8 @@ package body Sem_Ch4 is\n \n             --  If the indexed component is a prefix it may be the first actual\n             --  of a prefixed call. Retrieve the called entity, if any, and\n-            --  check its first formal.\n+            --  check its first formal. Determine if the context is a procedure\n+            --  or function call.\n \n             elsif Nkind (Parent (Par)) = N_Selected_Component then\n                declare\n@@ -7306,9 +7307,19 @@ package body Sem_Ch4 is\n                begin\n                   if Present (Nam)\n                     and then Is_Overloadable (Nam)\n-                    and then Present (First_Formal (Nam))\n                   then\n-                     return Ekind (First_Formal (Nam)) = E_In_Parameter;\n+                     if Nkind (Parent (Parent (Par)))\n+                        = N_Procedure_Call_Statement\n+                     then\n+                        return False;\n+\n+                     else\n+                        if Ekind (Nam) = E_Function\n+                          and then Present (First_Formal (Nam))\n+                        then\n+                           return Ekind (First_Formal (Nam)) = E_In_Parameter;\n+                        end if;\n+                     end if;\n                   end if;\n                end;\n "}, {"sha": "d4f61b6e4e44aa7a2c5d9dc1fc5b2dc8fbc60532", "filename": "gcc/ada/sigtramp-armdroid.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9ee5951c4be406f440245583ee8770a5807e2a/gcc%2Fada%2Fsigtramp-armdroid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9ee5951c4be406f440245583ee8770a5807e2a/gcc%2Fada%2Fsigtramp-armdroid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-armdroid.c?ref=4e9ee5951c4be406f440245583ee8770a5807e2a", "patch": "@@ -33,6 +33,8 @@\n  * ARM-Android version of the __gnat_sigtramp service *\n  ******************************************************/\n \n+#include <sys/ucontext.h>\n+\n #include \"sigtramp.h\"\n /* See sigtramp.h for a general explanation of functionality.  */\n "}, {"sha": "930365f8d57329a02a976fa80c8f4e1b02e86d27", "filename": "gcc/ada/sigtramp.h", "status": "modified", "additions": 24, "deletions": 33, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9ee5951c4be406f440245583ee8770a5807e2a/gcc%2Fada%2Fsigtramp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9ee5951c4be406f440245583ee8770a5807e2a/gcc%2Fada%2Fsigtramp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp.h?ref=4e9ee5951c4be406f440245583ee8770a5807e2a", "patch": "@@ -29,44 +29,35 @@\n  *                                                                          *\n  ****************************************************************************/\n \n-/* On targets where this is implemented, we resort to a signal handler\n-   trampoline to set-up the DWARF Call Frame Information that let unwinders\n-   walk through the signal frame up into the interrupted application code.\n-   This file introduces the relevant declarations.  */\n-\n-/* This file should only be #included on targets that do implement the\n-   trampoline, which needs to expose the following interface:  */\n+/* On targets where this is implemented, we resort to a signal trampoline to\n+   set up the DWARF Call Frame Information that lets unwinders walk through\n+   the signal frame up into the interrupted user code.  This file introduces\n+   the relevant declarations.  It should only be #included on targets that do\n+   implement the signal trampoline.  */\n \n #ifdef __cplusplus\n extern \"C\" {\n #endif\n \n-#ifdef __ANDROID__\n-#include <stdlib.h>\n-#include <sys/ucontext.h>\n-#endif\n-\n-  /* This typedef signature sometimes conflicts with the sighandler_t from\n-     system headers so call it something unique.  */\n-  typedef void __sigtramphandler_t (int signo, void *siginfo, void *sigcontext);\n+/* This typedef signature sometimes conflicts with the sighandler_t from\n+   system headers so call it something unique.  */\n+typedef void __sigtramphandler_t (int signo, void *siginfo, void *sigcontext);\n \n-#if CPU == SIMNT || CPU == SIMPENTIUM || CPU == SIMLINUX\n-  /* Vxsim requires a specially compiled handler.  */\n-  void __gnat_sigtramp_vxsim  (int signo, void *siginfo, void *sigcontext,\n-\t\t\t __sigtramphandler_t * handler);\n+#if defined(__vxworks) && (CPU == SIMNT || CPU == SIMPENTIUM || CPU == SIMLINUX)\n+/* Vxsim requires a specially compiled handler.  */\n+extern void __gnat_sigtramp_vxsim (int signo, void *siginfo, void *sigcontext,\n+\t\t\t\t   __sigtramphandler_t * handler);\n #else\n-  void __gnat_sigtramp  (int signo, void *siginfo, void *sigcontext,\n-\t\t\t __sigtramphandler_t * handler);\n+extern void __gnat_sigtramp (int signo, void *siginfo, void *sigcontext,\n+\t\t\t     __sigtramphandler_t * handler);\n #endif\n \n-  /* To be called from an established signal handler.  Setup the DWARF CFI\n-     bits letting unwinders walk through the signal frame up into the\n-     interrupted application code, and then call HANDLER (SIGNO, SIGINFO,\n-     SIGCONTEXT).\n+/* The signal trampoline is to be called from an established signal handler.\n+   It sets up the DWARF CFI and calls HANDLER (SIGNO, SIGINFO, SIGCONTEXT).\n \n-     The sigtramp construct makes it so that the unwinder jumps over it + the\n-     signal handler + the kernel frame. For a typical backtrace from the raise\n-     function:\n+   The trampoline construct makes it so that the unwinder jumps over it + the\n+   signal handler + the kernel frame.  For a typical backtrace from the raise\n+   function:\n \n      #0  __gnat_Unwind_RaiseException\n      #1  Raise_From_Signal_Handler\n@@ -76,11 +67,11 @@ extern \"C\" {\n      #5  <kernel frame>\n      #6  interrupted function\n \n-     The unwinder will unwind frames 0, 1 and 2 as usual. But the CFI of frame\n-     3 is set up as if the caller of frame 3 was frame 6 so, when frame 3 is\n-     unwound, the unwinder ends up in frame 6 directly. It's possible to do so\n-     since the kernel has saved the context of frame 6 and passed it on to\n-     __gnat_sigtramp.  */\n+   The unwinder will unwind frames 0, 1 and 2 as usual.  But the CFI of frame\n+   3 is set up as if the caller of frame 3 was frame 6 so, when frame 3 is\n+   unwound, the unwinder ends up in frame 6 directly.  It's possible to do so\n+   because the kernel has saved the context of frame 6 and passed it on to\n+   __gnat_error_handler and __gnat_sigtramp.  */\n \n #ifdef __cplusplus\n }"}]}