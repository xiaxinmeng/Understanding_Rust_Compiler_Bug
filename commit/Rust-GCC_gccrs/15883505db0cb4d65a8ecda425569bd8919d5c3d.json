{"sha": "15883505db0cb4d65a8ecda425569bd8919d5c3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU4ODM1MDVkYjBjYjRkNjVhOGVjZGE0MjU1NjliZDg5MTlkNWMzZA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2005-11-12T21:09:11Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2005-11-12T21:09:11Z"}, "message": "cris.h (LEGITIMIZE_RELOAD_ADDRESS): Define.\n\n\t* config/cris/cris.h (LEGITIMIZE_RELOAD_ADDRESS): Define.\n\t* config/cris/cris.c: Include reload.h.\n\t(cris_initial_elimination_offset): New function.\n\t* config/cris/cris-protos.h: (cris_initial_elimination_offset):\n\tPrototype.\n\nFrom-SVN: r106835", "tree": {"sha": "e7ee182f6820106fbb98676bccaca43c17cc1e30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7ee182f6820106fbb98676bccaca43c17cc1e30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15883505db0cb4d65a8ecda425569bd8919d5c3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15883505db0cb4d65a8ecda425569bd8919d5c3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15883505db0cb4d65a8ecda425569bd8919d5c3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15883505db0cb4d65a8ecda425569bd8919d5c3d/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73bebd55f00bd2b0c8e210c2fdd224b3987be7cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73bebd55f00bd2b0c8e210c2fdd224b3987be7cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73bebd55f00bd2b0c8e210c2fdd224b3987be7cd"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "b29bc2a1de735f02b6a434d62d4a977cdfe51fa1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15883505db0cb4d65a8ecda425569bd8919d5c3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15883505db0cb4d65a8ecda425569bd8919d5c3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15883505db0cb4d65a8ecda425569bd8919d5c3d", "patch": "@@ -1,3 +1,11 @@\n+2005-11-12  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.h (LEGITIMIZE_RELOAD_ADDRESS): Define.\n+\t* config/cris/cris.c: Include reload.h.\n+\t(cris_initial_elimination_offset): New function.\n+\t* config/cris/cris-protos.h: (cris_initial_elimination_offset):\n+\tPrototype.\n+\n 2005-11-12  Richard Guenther  <rguenther@suse.de>\n \n \t* gcse.c (find_rtx_in_ldst): Handle NULL pre_ldst_table."}, {"sha": "50673d9db33b2d3be111ce9a54cb42c20f468949", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15883505db0cb4d65a8ecda425569bd8919d5c3d/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15883505db0cb4d65a8ecda425569bd8919d5c3d/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=15883505db0cb4d65a8ecda425569bd8919d5c3d", "patch": "@@ -31,6 +31,7 @@ extern bool cris_simple_epilogue (void);\n #ifdef RTX_CODE\n extern const char *cris_op_str (rtx);\n extern void cris_notice_update_cc (rtx, rtx);\n+extern bool cris_reload_address_legitimized (rtx, enum machine_mode, int, int, int);\n extern void cris_print_operand (FILE *, rtx, int);\n extern void cris_print_operand_address (FILE *, rtx);\n extern int cris_side_effect_mode_ok (enum rtx_code, rtx *, int, int,"}, {"sha": "0c4153915439906cfcc137e301d291cda718c4bc", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15883505db0cb4d65a8ecda425569bd8919d5c3d/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15883505db0cb4d65a8ecda425569bd8919d5c3d/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=15883505db0cb4d65a8ecda425569bd8919d5c3d", "patch": "@@ -38,6 +38,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"function.h\"\n #include \"toplev.h\"\n #include \"recog.h\"\n+#include \"reload.h\"\n #include \"tm_p.h\"\n #include \"debug.h\"\n #include \"output.h\"\n@@ -1205,6 +1206,81 @@ cris_initial_elimination_offset (int fromreg, int toreg)\n   gcc_unreachable ();\n }\n \n+/* Worker function for LEGITIMIZE_RELOAD_ADDRESS.  */\n+\n+bool\n+cris_reload_address_legitimized (rtx x,\n+\t\t\t\t enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t\t int opnum ATTRIBUTE_UNUSED,\n+\t\t\t\t int itype,\n+\t\t\t\t int ind_levels ATTRIBUTE_UNUSED)\n+{\n+  enum reload_type type = itype;\n+  rtx op0, op1;\n+  rtx *op0p;\n+  rtx *op1p;\n+\n+  if (GET_CODE (x) != PLUS)\n+    return false;\n+\n+  op0 = XEXP (x, 0);\n+  op0p = &XEXP (x, 0);\n+  op1 = XEXP (x, 1);\n+  op1p = &XEXP (x, 1);\n+\n+  if (!REG_P (op1))\n+    return false;\n+\n+  if (GET_CODE (op0) == SIGN_EXTEND\n+      && GET_CODE (XEXP (op0, 0)) == MEM)\n+    {\n+      rtx op00 = XEXP (op0, 0);\n+      rtx op000 = XEXP (op00, 0);\n+      rtx *op000p = &XEXP (op00, 0);\n+\n+      if ((GET_MODE (op00) == HImode || GET_MODE (op00) == QImode)\n+\t  && (REG_P (op000)\n+\t      || (GET_CODE (op000) == POST_INC && REG_P (XEXP (op000, 0)))))\n+\t{\n+\t  bool something_reloaded = false;\n+\n+\t  if (GET_CODE (op000) == POST_INC\n+\t      && REG_P (XEXP (op000, 0))\n+\t      && REGNO (XEXP (op000, 0)) > CRIS_LAST_GENERAL_REGISTER)\n+\t    /* No, this gets too complicated and is too rare to care\n+\t       about trying to improve on the general code Here.\n+\t       As the return-value is an all-or-nothing indicator, we\n+\t       punt on the other register too.  */\n+\t    return false;\n+\n+\t  if ((REG_P (op000)\n+\t       && REGNO (op000) > CRIS_LAST_GENERAL_REGISTER))\n+\t    {\n+\t      /* The address of the inner mem is a pseudo or wrong\n+\t\t reg: reload that.  */\n+\t      push_reload (op000, NULL_RTX, op000p, NULL, GENERAL_REGS,\n+\t\t\t   GET_MODE (x), VOIDmode, 0, 0, opnum, type);\n+\t      something_reloaded = true;\n+\t    }\n+\n+\t  if (REGNO (op1) > CRIS_LAST_GENERAL_REGISTER)\n+\t    {\n+\t      /* Base register is a pseudo or wrong reg: reload it.  */\n+\t      push_reload (op1, NULL_RTX, op1p, NULL, GENERAL_REGS,\n+\t\t\t   GET_MODE (x), VOIDmode, 0, 0,\n+\t\t\t   opnum, type);\n+\t      something_reloaded = true;\n+\t    }\n+\n+\t  gcc_assert (something_reloaded);\n+\n+\t  return true;\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n /*  This function looks into the pattern to see how this insn affects\n     condition codes.\n \n@@ -2160,7 +2236,7 @@ cris_asm_output_mi_thunk (FILE *stream,\n     }\n }\n \n-/* Boilerplate emitted at start of file.  \n+/* Boilerplate emitted at start of file.\n \n    NO_APP *only at file start* means faster assembly.  It also means\n    comments are not allowed.  In some cases comments will be output"}, {"sha": "0d1d8af4e268e2c49ff513248c3116b5bad56570", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15883505db0cb4d65a8ecda425569bd8919d5c3d/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15883505db0cb4d65a8ecda425569bd8919d5c3d/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=15883505db0cb4d65a8ecda425569bd8919d5c3d", "patch": "@@ -1055,6 +1055,15 @@ struct cum_args {int regs;};\n    FIXME: Check and adjust for gcc-2.9x.  */\n #define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN) {}\n \n+/* Fix reloads known to cause suboptimal spilling.  */\n+#define LEGITIMIZE_RELOAD_ADDRESS(X, MODE, OPNUM, TYPE, INDL, WIN)\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (cris_reload_address_legitimized (X, MODE, OPNUM, TYPE, INDL))\t\\\n+\tgoto WIN;\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n /* In CRIS, only the postincrement address mode depends thus,\n    since the increment depends on the size of the operand.  */\n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\t\\"}]}