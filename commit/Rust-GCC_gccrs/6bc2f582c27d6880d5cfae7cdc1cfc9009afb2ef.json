{"sha": "6bc2f582c27d6880d5cfae7cdc1cfc9009afb2ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjMmY1ODJjMjdkNjg4MGQ1Y2ZhZTdjZGMxY2ZjOTAwOWFmYjJlZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-18T21:42:35Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-18T21:42:35Z"}, "message": "(fixup_gotos): Do a cleanup for a block when it is exited even if\nlabel if not defined yet.\n\nFrom-SVN: r9204", "tree": {"sha": "5ac8c6caf2c8ed547b63bc3bde69ecf98531e9eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ac8c6caf2c8ed547b63bc3bde69ecf98531e9eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bc2f582c27d6880d5cfae7cdc1cfc9009afb2ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc2f582c27d6880d5cfae7cdc1cfc9009afb2ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc2f582c27d6880d5cfae7cdc1cfc9009afb2ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc2f582c27d6880d5cfae7cdc1cfc9009afb2ef/comments", "author": null, "committer": null, "parents": [{"sha": "81f5986997ac554e5b79ea51b5e88c96ee3f8495", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81f5986997ac554e5b79ea51b5e88c96ee3f8495", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81f5986997ac554e5b79ea51b5e88c96ee3f8495"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "e733be922d26622315d704d3cf0a416bc1b9e74a", "filename": "gcc/stmt.c", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc2f582c27d6880d5cfae7cdc1cfc9009afb2ef/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc2f582c27d6880d5cfae7cdc1cfc9009afb2ef/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=6bc2f582c27d6880d5cfae7cdc1cfc9009afb2ef", "patch": "@@ -1214,30 +1214,42 @@ fixup_gotos (thisblock, stack_level, cleanup_list, first_insn, dont_jump_in)\n \t}\n     }\n \n-  /* Mark the cleanups of exited blocks so that they are executed\n-     by the code above.  */\n+  /* For any still-undefined labels, do the cleanups for this block now.\n+     We must do this now since items in the cleanup list may go out\n+     of scope when the block ends. */\n   for (prev = 0, f = goto_fixup_chain; f; prev = f, f = f->next)\n     if (f->before_jump != 0\n \t&& PREV_INSN (f->target_rtl) == 0\n \t/* Label has still not appeared.  If we are exiting a block with\n \t   a stack level to restore, that started before the fixup,\n \t   mark this stack level as needing restoration\n-\t   when the fixup is later finalized.\n-\t   Also mark the cleanup_list_list element for F\n-\t   that corresponds to this block, so that ultimately\n-\t   this block's cleanups will be executed by the code above.  */\n+\t   when the fixup is later finalized.   */\n \t&& thisblock != 0\n-\t/* Note: if THISBLOCK == 0 and we have a label that hasn't appeared,\n-\t   it means the label is undefined.  That's erroneous, but possible.  */\n+\t/* Note: if THISBLOCK == 0 and we have a label that hasn't appeared, it\n+\t   means the label is undefined.  That's erroneous, but possible.  */\n \t&& (thisblock->data.block.block_start_count\n \t    <= f->block_start_count))\n       {\n \ttree lists = f->cleanup_list_list;\n+\trtx cleanup_insns;\n+\n \tfor (; lists; lists = TREE_CHAIN (lists))\n \t  /* If the following elt. corresponds to our containing block\n \t     then the elt. must be for this block.  */\n \t  if (TREE_CHAIN (lists) == thisblock->data.block.outer_cleanups)\n-\t    TREE_ADDRESSABLE (lists) = 1;\n+\t    {\n+\t      start_sequence ();\n+\t      pushlevel (0);\n+\t      set_block (f->context);\n+\t      expand_cleanups (TREE_VALUE (lists), NULL_TREE, 1, 1);\n+\t      cleanup_insns = get_insns ();\n+\t      poplevel (1, 0, 0);\n+\t      end_sequence ();\n+\t      f->before_jump\n+\t\t= emit_insns_after (cleanup_insns, f->before_jump);\n+\n+\t      TREE_VALUE (lists) = 0;\n+\t    }\n \n \tif (stack_level)\n \t  f->stack_level = stack_level;"}]}