{"sha": "ae658d47a4f90ac43501b149d56f2713595e5656", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU2NThkNDdhNGY5MGFjNDM1MDFiMTQ5ZDU2ZjI3MTM1OTVlNTY1Ng==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-08-22T23:44:23Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-08-22T23:44:23Z"}, "message": "locale-inst.cc: Add codecvt<unicode_t...\n\n\n2000-08-22  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* src/locale-inst.cc: Add codecvt<unicode_t, wchar_t,\n\t__enc_traits> instantiations for has_facet and use_facet.\n\t* testsuite/22_locale/codecvt_unicode_wchar_t.cc: New file, for\n\ttesting two-byte unicode encodings converted to four-byte UCS4\n\tencodings.\n\n\t* bits/codecvt.h (codecvt<__enc_traits>): Fix do_unshift.\n\t* testsuite/22_locale/codecvt_unicode_char.cc (test01): Add\n\tcorrect state/encoding information.\n\n\t* acinclude.m4 (GLIBCPP_CHECK_WCHAR_T_SUPPORT): Add wcsrtombs,\n\tmbsrtowcs checks as codecvt<wchar_t, char, mbstate_t> needs them\n\tnow.\n\tAdd checks for langinfo.h, nl_langinfo function call.\n\t* libio/iofwide.c (_IO_fwide): Simplify, as nl_langinfo is assumed.\n\nFrom-SVN: r35897", "tree": {"sha": "1392c95ae5ae79010cd5c747fb537efc14374778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1392c95ae5ae79010cd5c747fb537efc14374778"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae658d47a4f90ac43501b149d56f2713595e5656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae658d47a4f90ac43501b149d56f2713595e5656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae658d47a4f90ac43501b149d56f2713595e5656", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae658d47a4f90ac43501b149d56f2713595e5656/comments", "author": null, "committer": null, "parents": [{"sha": "62432849bc46bc50a14d697657f1e77a00a0f50d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62432849bc46bc50a14d697657f1e77a00a0f50d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62432849bc46bc50a14d697657f1e77a00a0f50d"}], "stats": {"total": 400, "additions": 302, "deletions": 98}, "files": [{"sha": "f208edfb0226bafcbc7689a50b5f930310105680", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ae658d47a4f90ac43501b149d56f2713595e5656", "patch": "@@ -1,3 +1,21 @@\n+2000-08-22  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* src/locale-inst.cc: Add codecvt<unicode_t, wchar_t,\n+\t__enc_traits> instantiations for has_facet and use_facet.\n+\t* testsuite/22_locale/codecvt_unicode_wchar_t.cc: New file, for\n+\ttesting two-byte unicode encodings converted to four-byte UCS4\n+\tencodings.\n+\n+\t* bits/codecvt.h (codecvt<__enc_traits>): Fix do_unshift.\n+\t* testsuite/22_locale/codecvt_unicode_char.cc (test01): Add\n+\tcorrect state/encoding information.\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_WCHAR_T_SUPPORT): Add wcsrtombs,\n+\tmbsrtowcs checks as codecvt<wchar_t, char, mbstate_t> needs them\n+\tnow.\n+\tAdd checks for langinfo.h, nl_langinfo function call.\n+\t* libio/iofwide.c (_IO_fwide): Simplify, as nl_langinfo is assumed.\n+\n 2000-08-22  Richard B. Kreckel  <Richard.Kreckel@Uni-Mainz.DE>\n \n \t* config/cpu/alpha/bits/atomicity.h: Change __attribute__"}, {"sha": "da9e3c3dd52d10a04d7e7f9600a24ac505580503", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=ae658d47a4f90ac43501b149d56f2713595e5656", "patch": "@@ -1,4 +1,3 @@\n-\n dnl\n dnl Initialize configure bits.\n dnl\n@@ -936,10 +935,12 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n     AC_MSG_RESULT($has_weof)\n \n     dnl Tests for wide character functions used in char_traits<wchar_t>.\n-    AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset, ac_wfuncs=yes, ac_wfuncs=no)\n+    AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset \\\n+    wcsrtombs mbsrtowcs, ac_wfuncs=yes, ac_wfuncs=no)\n \n     AC_MSG_CHECKING([for ISO C9X wchar_t support])\n-    if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes && test x\"$ac_wfuncs\" = xyes; then\n+    if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n+       && test x\"$ac_wfuncs\" = xyes; then\n       ac_isoC9X_wchar_t=yes\n     else\n       ac_isoC9X_wchar_t=no\n@@ -949,10 +950,13 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n     dnl Use iconv for wchar_t to char conversions. As such, check for \n     dnl X/Open Portability Guide, version 2 features (XPG2).\n     AC_CHECK_HEADER(iconv.h, ac_has_iconv_h=yes, ac_has_iconv_h=no)\n-    AC_CHECK_FUNCS(iconv_open iconv_close iconv, ac_XPG2funcs=yes, ac_XPG2funcs=no)\n+    AC_CHECK_HEADER(langinfo.h, ac_has_langinfo_h=yes, ac_has_langinfo_h=no)\n+    AC_CHECK_FUNCS(iconv_open iconv_close iconv nl_langinfo, \\\n+    ac_XPG2funcs=yes, ac_XPG2funcs=no)\n \n     AC_MSG_CHECKING([for XPG2 wchar_t support])\n-    if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_XPG2funcs\" = xyes; then\n+    if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_has_langinfo_h\" = xyes \\\n+       && test x\"$ac_XPG2funcs\" = xyes; then\n       ac_XPG2_wchar_t=yes\n     else\n       ac_XPG2_wchar_t=no\n@@ -961,12 +965,9 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n \n     dnl At the moment, only enable wchar_t specializations if all the\n     dnl above support is present.\n-    dnl 2000-07-07-bkoz-hack-xxx\n-#    ac_isoC9X_wchar_t=no\n-    dnl 2000-07-07-bkoz-hack-xxx\n-\n     AC_MSG_CHECKING([for enabled wchar_t specializations])\n-    if test x\"$ac_isoC9X_wchar_t\" = xyes && test x\"$ac_XPG2_wchar_t\" = xyes; then\n+    if test x\"$ac_isoC9X_wchar_t\" = xyes \\\n+       && test x\"$ac_XPG2_wchar_t\" = xyes; then\n       libinst_wstring_la=\"libinst-wstring.la\"\n       AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n       AC_MSG_RESULT(\"yes\")"}, {"sha": "84b4baa154faf969b8ac04ea9f093d557287e24a", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=ae658d47a4f90ac43501b149d56f2713595e5656", "patch": "@@ -10,7 +10,6 @@ dnl but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n dnl even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n dnl PARTICULAR PURPOSE.\n \n-\n dnl\n dnl Initialize configure bits.\n dnl\n@@ -948,10 +947,12 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n     AC_MSG_RESULT($has_weof)\n \n     dnl Tests for wide character functions used in char_traits<wchar_t>.\n-    AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset, ac_wfuncs=yes, ac_wfuncs=no)\n+    AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset \\\n+    wcsrtombs mbsrtowcs, ac_wfuncs=yes, ac_wfuncs=no)\n \n     AC_MSG_CHECKING([for ISO C9X wchar_t support])\n-    if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes && test x\"$ac_wfuncs\" = xyes; then\n+    if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n+       && test x\"$ac_wfuncs\" = xyes; then\n       ac_isoC9X_wchar_t=yes\n     else\n       ac_isoC9X_wchar_t=no\n@@ -961,10 +962,13 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n     dnl Use iconv for wchar_t to char conversions. As such, check for \n     dnl X/Open Portability Guide, version 2 features (XPG2).\n     AC_CHECK_HEADER(iconv.h, ac_has_iconv_h=yes, ac_has_iconv_h=no)\n-    AC_CHECK_FUNCS(iconv_open iconv_close iconv, ac_XPG2funcs=yes, ac_XPG2funcs=no)\n+    AC_CHECK_HEADER(langinfo.h, ac_has_langinfo_h=yes, ac_has_langinfo_h=no)\n+    AC_CHECK_FUNCS(iconv_open iconv_close iconv nl_langinfo, \\\n+    ac_XPG2funcs=yes, ac_XPG2funcs=no)\n \n     AC_MSG_CHECKING([for XPG2 wchar_t support])\n-    if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_XPG2funcs\" = xyes; then\n+    if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_has_langinfo_h\" = xyes \\\n+       && test x\"$ac_XPG2funcs\" = xyes; then\n       ac_XPG2_wchar_t=yes\n     else\n       ac_XPG2_wchar_t=no\n@@ -973,12 +977,9 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n \n     dnl At the moment, only enable wchar_t specializations if all the\n     dnl above support is present.\n-    dnl 2000-07-07-bkoz-hack-xxx\n-#    ac_isoC9X_wchar_t=no\n-    dnl 2000-07-07-bkoz-hack-xxx\n-\n     AC_MSG_CHECKING([for enabled wchar_t specializations])\n-    if test x\"$ac_isoC9X_wchar_t\" = xyes && test x\"$ac_XPG2_wchar_t\" = xyes; then\n+    if test x\"$ac_isoC9X_wchar_t\" = xyes \\\n+       && test x\"$ac_XPG2_wchar_t\" = xyes; then\n       libinst_wstring_la=\"libinst-wstring.la\"\n       AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n       AC_MSG_RESULT(\"yes\")"}, {"sha": "dd52f88af3db25a9538d114ea3f3f4a70805132d", "filename": "libstdc++-v3/bits/codecvt.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fcodecvt.h?ref=ae658d47a4f90ac43501b149d56f2713595e5656", "patch": "@@ -416,7 +416,12 @@ namespace std\n \t  if (__conv != size_t(-1))\n \t    {\n \t      __to_next = reinterpret_cast<extern_type*>(__cto);\n-\t      __ret = ok;\n+\t      if (__tlen == __tmultiple * (__to_end - __to))\n+\t\t__ret = noconv;\n+\t      else if (__tlen == 0)\n+\t\t__ret = ok;\n+\t      else\n+\t\t__ret = partial;\n \t    }\n \t  else \n \t    __ret = error;"}, {"sha": "7c35a039e45698755f018b7052a03e4d67500452", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=ae658d47a4f90ac43501b149d56f2713595e5656", "patch": "@@ -510,6 +510,9 @@\n /* Define if you have the logl function.  */\n #undef HAVE_LOGL\n \n+/* Define if you have the mbsrtowcs function.  */\n+#undef HAVE_MBSRTOWCS\n+\n /* Define if you have the modff function.  */\n #undef HAVE_MODFF\n \n@@ -519,6 +522,9 @@\n /* Define if you have the nan function.  */\n #undef HAVE_NAN\n \n+/* Define if you have the nl_langinfo function.  */\n+#undef HAVE_NL_LANGINFO\n+\n /* Define if you have the powf function.  */\n #undef HAVE_POWF\n \n@@ -579,6 +585,9 @@\n /* Define if you have the wcslen function.  */\n #undef HAVE_WCSLEN\n \n+/* Define if you have the wcsrtombs function.  */\n+#undef HAVE_WCSRTOMBS\n+\n /* Define if you have the wmemchr function.  */\n #undef HAVE_WMEMCHR\n "}, {"sha": "fb30583ddb1b20765b2420dbf42fa26bd67679b9", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 97, "deletions": 60, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=ae658d47a4f90ac43501b149d56f2713595e5656", "patch": "@@ -17501,15 +17501,16 @@ fi\n rm -f conftest*\n     echo \"$ac_t\"\"$has_weof\" 1>&6\n \n-        for ac_func in wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset\n+        for ac_func in wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset \\\n+    wcsrtombs mbsrtowcs\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:17508: checking for $ac_func\" >&5\n+echo \"configure:17509: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 17513 \"configure\"\n+#line 17514 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -17532,7 +17533,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:17536: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:17537: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -17559,8 +17560,9 @@ done\n \n \n     echo $ac_n \"checking for ISO C9X wchar_t support\"\"... $ac_c\" 1>&6\n-echo \"configure:17563: checking for ISO C9X wchar_t support\" >&5\n-    if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes && test x\"$ac_wfuncs\" = xyes; then\n+echo \"configure:17564: checking for ISO C9X wchar_t support\" >&5\n+    if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n+       && test x\"$ac_wfuncs\" = xyes; then\n       ac_isoC9X_wchar_t=yes\n     else\n       ac_isoC9X_wchar_t=no\n@@ -17569,17 +17571,17 @@ echo \"configure:17563: checking for ISO C9X wchar_t support\" >&5\n \n             ac_safe=`echo \"iconv.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for iconv.h\"\"... $ac_c\" 1>&6\n-echo \"configure:17573: checking for iconv.h\" >&5\n+echo \"configure:17575: checking for iconv.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 17578 \"configure\"\n+#line 17580 \"configure\"\n #include \"confdefs.h\"\n #include <iconv.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:17583: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:17585: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -17601,15 +17603,49 @@ else\n ac_has_iconv_h=no\n fi\n \n-    for ac_func in iconv_open iconv_close iconv\n+    ac_safe=`echo \"langinfo.h\" | sed 'y%./+-%__p_%'`\n+echo $ac_n \"checking for langinfo.h\"\"... $ac_c\" 1>&6\n+echo \"configure:17609: checking for langinfo.h\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  cat > conftest.$ac_ext <<EOF\n+#line 17614 \"configure\"\n+#include \"confdefs.h\"\n+#include <langinfo.h>\n+EOF\n+ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n+{ (eval echo configure:17619: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n+if test -z \"$ac_err\"; then\n+  rm -rf conftest*\n+  eval \"ac_cv_header_$ac_safe=yes\"\n+else\n+  echo \"$ac_err\" >&5\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  rm -rf conftest*\n+  eval \"ac_cv_header_$ac_safe=no\"\n+fi\n+rm -f conftest*\n+fi\n+if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n+  echo \"$ac_t\"\"yes\" 1>&6\n+  ac_has_langinfo_h=yes\n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+ac_has_langinfo_h=no\n+fi\n+\n+    for ac_func in iconv_open iconv_close iconv nl_langinfo\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:17608: checking for $ac_func\" >&5\n+echo \"configure:17644: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 17613 \"configure\"\n+#line 17649 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -17632,7 +17668,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:17636: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:17672: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -17650,7 +17686,8 @@ if eval \"test \\\"`echo '$ac_cv_func_'$ac_func`\\\" = yes\"; then\n   cat >> confdefs.h <<EOF\n #define $ac_tr_func 1\n EOF\n- ac_XPG2funcs=yes\n+ \\\n+    ac_XPG2funcs=yes\n else\n   echo \"$ac_t\"\"no\" 1>&6\n ac_XPG2funcs=no\n@@ -17659,19 +17696,19 @@ done\n \n \n     echo $ac_n \"checking for XPG2 wchar_t support\"\"... $ac_c\" 1>&6\n-echo \"configure:17663: checking for XPG2 wchar_t support\" >&5\n-    if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_XPG2funcs\" = xyes; then\n+echo \"configure:17700: checking for XPG2 wchar_t support\" >&5\n+    if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_has_langinfo_h\" = xyes \\\n+       && test x\"$ac_XPG2funcs\" = xyes; then\n       ac_XPG2_wchar_t=yes\n     else\n       ac_XPG2_wchar_t=no\n     fi\n     echo \"$ac_t\"\"$ac_XPG2_wchar_t\" 1>&6\n \n-            #    ac_isoC9X_wchar_t=no\n-    \n-    echo $ac_n \"checking for enabled wchar_t specializations\"\"... $ac_c\" 1>&6\n-echo \"configure:17674: checking for enabled wchar_t specializations\" >&5\n-    if test x\"$ac_isoC9X_wchar_t\" = xyes && test x\"$ac_XPG2_wchar_t\" = xyes; then\n+            echo $ac_n \"checking for enabled wchar_t specializations\"\"... $ac_c\" 1>&6\n+echo \"configure:17710: checking for enabled wchar_t specializations\" >&5\n+    if test x\"$ac_isoC9X_wchar_t\" = xyes \\\n+       && test x\"$ac_XPG2_wchar_t\" = xyes; then\n       libinst_wstring_la=\"libinst-wstring.la\"\n       cat >> confdefs.h <<\\EOF\n #define _GLIBCPP_USE_WCHAR_T 1\n@@ -17695,17 +17732,17 @@ EOF\n   \n   ac_safe=`echo \"ctype.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for ctype.h\"\"... $ac_c\" 1>&6\n-echo \"configure:17699: checking for ctype.h\" >&5\n+echo \"configure:17736: checking for ctype.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 17704 \"configure\"\n+#line 17741 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:17709: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:17746: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -17726,9 +17763,9 @@ if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n         ctype_default=yes\n \n         echo $ac_n \"checking <ctype> for gnu-linux \"\"... $ac_c\" 1>&6\n-echo \"configure:17730: checking <ctype> for gnu-linux \" >&5\n+echo \"configure:17767: checking <ctype> for gnu-linux \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 17732 \"configure\"\n+#line 17769 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -17739,7 +17776,7 @@ int\n \t+ __ctype_tolower[a] + __ctype_toupper[a] + __ctype_b[a];}\n ; return 0; }\n EOF\n-if { (eval echo configure:17743: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17780: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_linux=yes\n@@ -17758,9 +17795,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for freebsd 4.0 \"\"... $ac_c\" 1>&6\n-echo \"configure:17762: checking <ctype> for freebsd 4.0 \" >&5\n+echo \"configure:17799: checking <ctype> for freebsd 4.0 \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 17764 \"configure\"\n+#line 17801 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -17770,7 +17807,7 @@ int\n \t+ _CTYPE_D + _CTYPE_P + _CTYPE_X + _CTYPE_G ;}\n ; return 0; }\n EOF\n-if { (eval echo configure:17774: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17811: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_bsd=yes\n@@ -17790,9 +17827,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for freebsd 3.4 \"\"... $ac_c\" 1>&6\n-echo \"configure:17794: checking <ctype> for freebsd 3.4 \" >&5\n+echo \"configure:17831: checking <ctype> for freebsd 3.4 \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 17796 \"configure\"\n+#line 17833 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -17802,7 +17839,7 @@ int\n       + _D + _P + _X + _G + __istype (a, 0);}\n ; return 0; }\n EOF\n-if { (eval echo configure:17806: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17843: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_freebsd34=yes\n@@ -17822,9 +17859,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for solaris 2.6,7,8 \"\"... $ac_c\" 1>&6\n-echo \"configure:17826: checking <ctype> for solaris 2.6,7,8 \" >&5\n+echo \"configure:17863: checking <ctype> for solaris 2.6,7,8 \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 17828 \"configure\"\n+#line 17865 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -17835,7 +17872,7 @@ int\n \t+ __trans_lower[a] + __trans_upper[a] + __ctype_mask[a];}\n ; return 0; }\n EOF\n-if { (eval echo configure:17839: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17876: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_solaris=yes\n@@ -17850,7 +17887,7 @@ rm -f conftest*\n \n     if test $ctype_solaris = \"yes\"; then\n       echo $ac_n \"checking   for version\"\"... $ac_c\" 1>&6\n-echo \"configure:17854: checking   for version\" >&5\n+echo \"configure:17891: checking   for version\" >&5\n       ac_ext=C\n # CXXFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.\n ac_cpp='$CXXCPP $CPPFLAGS'\n@@ -17859,14 +17896,14 @@ ac_link='${CXX-g++} -o conftest${ac_exeext} $CXXFLAGS $CPPFLAGS $LDFLAGS conftes\n cross_compiling=$ac_cv_prog_cxx_cross\n  \n       cat > conftest.$ac_ext <<EOF\n-#line 17863 \"configure\"\n+#line 17900 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n typedef long* __to_type; __to_type const& _M_toupper = __trans_upper;\n ; return 0; }\n EOF\n-if { (eval echo configure:17870: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17907: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n       ctype_solaris26=yes\n@@ -17898,9 +17935,9 @@ cross_compiling=$ac_cv_prog_cc_cross\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for solaris 2.5.1 \"\"... $ac_c\" 1>&6\n-echo \"configure:17902: checking <ctype> for solaris 2.5.1 \" >&5\n+echo \"configure:17939: checking <ctype> for solaris 2.5.1 \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 17904 \"configure\"\n+#line 17941 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -17910,7 +17947,7 @@ int\n \t+ __ctype[a];}\n ; return 0; }\n EOF\n-if { (eval echo configure:17914: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17951: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_solaris25=yes\n@@ -17930,9 +17967,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for aix \"\"... $ac_c\" 1>&6\n-echo \"configure:17934: checking <ctype> for aix \" >&5\n+echo \"configure:17971: checking <ctype> for aix \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 17936 \"configure\"\n+#line 17973 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -17943,7 +17980,7 @@ int\n \t+ _VALC('a') + _IS('c', 0);}\n ; return 0; }\n EOF\n-if { (eval echo configure:17947: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17984: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_aix=yes\n@@ -17963,9 +18000,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for newlib \"\"... $ac_c\" 1>&6\n-echo \"configure:17967: checking <ctype> for newlib \" >&5\n+echo \"configure:18004: checking <ctype> for newlib \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 17969 \"configure\"\n+#line 18006 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -17975,7 +18012,7 @@ int\n \t+ _ctype_[a];}\n ; return 0; }\n EOF\n-if { (eval echo configure:17979: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18016: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_newlib=yes\n@@ -18009,17 +18046,17 @@ fi\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n-echo \"configure:18013: checking for $ac_hdr\" >&5\n+echo \"configure:18050: checking for $ac_hdr\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 18018 \"configure\"\n+#line 18055 \"configure\"\n #include \"confdefs.h\"\n #include <$ac_hdr>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:18023: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:18060: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -18048,12 +18085,12 @@ done\n for ac_func in getpagesize\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:18052: checking for $ac_func\" >&5\n+echo \"configure:18089: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 18057 \"configure\"\n+#line 18094 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -18076,7 +18113,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:18080: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:18117: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -18101,15 +18138,15 @@ fi\n done\n \n echo $ac_n \"checking for working mmap\"\"... $ac_c\" 1>&6\n-echo \"configure:18105: checking for working mmap\" >&5\n+echo \"configure:18142: checking for working mmap\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_mmap_fixed_mapped'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   if test \"$cross_compiling\" = yes; then\n   ac_cv_func_mmap_fixed_mapped=no\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 18113 \"configure\"\n+#line 18150 \"configure\"\n #include \"confdefs.h\"\n \n /* Thanks to Mike Haertel and Jim Avera for this test.\n@@ -18249,7 +18286,7 @@ main()\n }\n \n EOF\n-if { (eval echo configure:18253: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:18290: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_func_mmap_fixed_mapped=yes\n else\n@@ -18312,19 +18349,19 @@ fi\n \n if test $ac_cv_header_locale_h = yes; then\n     echo $ac_n \"checking for LC_MESSAGES\"\"... $ac_c\" 1>&6\n-echo \"configure:18316: checking for LC_MESSAGES\" >&5\n+echo \"configure:18353: checking for LC_MESSAGES\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_val_LC_MESSAGES'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 18321 \"configure\"\n+#line 18358 \"configure\"\n #include \"confdefs.h\"\n #include <locale.h>\n int main() {\n return LC_MESSAGES\n ; return 0; }\n EOF\n-if { (eval echo configure:18328: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:18365: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   ac_cv_val_LC_MESSAGES=yes\n else"}, {"sha": "4f8d0e16a78fd050dff0712fa715b289eac61e0b", "filename": "libstdc++-v3/libio/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FChangeLog?ref=ae658d47a4f90ac43501b149d56f2713595e5656", "patch": "@@ -1,3 +1,7 @@\n+2000-08-22  Benjamin Kosnik  <bkoz@gnu.org>\n+\n+\t* iofwide.c (_IO_fwide): Simplify, as nl_langinfo is assumed.\n+\n 2000-08-14  Benjamin Kosnik  <bkoz@gnu.org>\n \n \t* *: Merge with mainline glibc sources."}, {"sha": "db1a4f1a76a8457c17ca17eaf6ebda0b82fceb66", "filename": "libstdc++-v3/libio/iofwide.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2Fiofwide.c?ref=ae658d47a4f90ac43501b149d56f2713595e5656", "patch": "@@ -27,15 +27,15 @@\n #ifdef _LIBC\n # include <dlfcn.h>\n # include <wchar.h>\n+# include <locale/localeinfo.h>\n+# include <wcsmbs/wcsmbsload.h>\n+# include <iconv/gconv_int.h>\n #endif\n #include <stdlib.h>\n #include <string.h>\n \n-#ifdef _LIBC\n+#if defined(_LIBC) || defined(_GLIBCPP_USE_WCHAR_T)\n # include <langinfo.h>\n-# include <locale/localeinfo.h>\n-# include <wcsmbs/wcsmbsload.h>\n-# include <iconv/gconv_int.h>\n #endif\n \n \n@@ -156,21 +156,14 @@ _IO_fwide (fp, mode)\n \t   should come up with a solution for the determination of the\n \t   currently used internal character set.  */\n \tconst char *internal_ccs = _G_INTERNAL_CCS;\n-\tconst char *external_ccs = NULL;\n+\tconst char *external_ccs = nl_langinfo(CODESET);\n \n-#  ifdef HAVE_NL_LANGINFO\n-\texternal_ccs = nl_langinfo (CODESET);\n-#  endif\n \tif (external_ccs == NULL)\n \t  external_ccs = \"ISO-8859-1\";\n \n \tcc->__cd_in = iconv_open (internal_ccs, external_ccs);\n \tif (cc->__cd_in != (iconv_t) -1)\n \t  cc->__cd_out = iconv_open (external_ccs, internal_ccs);\n-\n-\tif (cc->__cd_in == (iconv_t) -1 || cc->__cd_out == (iconv_t) -1)\n-\t  /* XXX */\n-\t  abort ();\n       }\n # else\n #  error \"somehow determine this from LC_CTYPE\""}, {"sha": "7a0af3575cfadccb57d39b6f4eea4b3e5ae6728a", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=ae658d47a4f90ac43501b149d56f2713595e5656", "patch": "@@ -136,13 +136,26 @@ namespace std {\n   template class __codecvt_abstract_base<char, char, mbstate_t>;\n   template class __codecvt_abstract_base<wchar_t, char, mbstate_t>;\n #ifdef _GLIBCPP_USE_WCHAR_T\n+  // XXX This should not be necessary. Unfortunately, the has_facet\n+  // and use_facet defines are not in the headers, an instead in\n+  // locale_facets.tcc for the time being, as they use std::vector and\n+  // thus compile time double when they are pushed up to the top-level\n+  // includes.\n   typedef unsigned short\t\t\tunicode_t;\n+\n   template\n     const codecvt<unicode_t, char, __enc_traits>& \n     use_facet<codecvt<unicode_t, char, __enc_traits> >(const locale&);\n   template \n     bool\n     has_facet<codecvt<unicode_t, char, __enc_traits> >(const locale &);\n+\n+  template\n+    const codecvt<unicode_t, wchar_t, __enc_traits>& \n+    use_facet<codecvt<unicode_t, wchar_t, __enc_traits> >(const locale&);\n+  template \n+    bool\n+    has_facet<codecvt<unicode_t, wchar_t, __enc_traits> >(const locale &);\n #endif\n \n   // collate"}, {"sha": "d7e39c8d5338b8476ed12f61cf0bf60375683375", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_unicode_char.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_char.cc?ref=ae658d47a4f90ac43501b149d56f2713595e5656", "patch": "@@ -97,8 +97,6 @@ void test01()\n \n   bool \t\t\ttest = true;\n   const ext_type* \te_lit = \"black pearl jasmine tea\";\n-  const ext_type*       efrom_next;\n-  const int_type*       ifrom_next;\n   int \t\t\tsize = strlen(e_lit);\n \n   int_type \t\ti_lit_base[24] = \n@@ -108,6 +106,8 @@ void test01()\n   };\n   const int_type* \ti_lit = i_lit_base;\n \n+  const ext_type*       efrom_next;\n+  const int_type*       ifrom_next;\n   ext_type* \t\te_arr = new ext_type[size + 1];\n   ext_type*\t\teto_next;\n   int_type* \t\ti_arr = new int_type[size + 1];\n@@ -130,7 +130,7 @@ void test01()\n   VERIFY( ito_next == i_arr + size );\n \n   // out\n-  unicode_codecvt::state_type state02;\n+  unicode_codecvt::state_type state02(\"UNICODE\", \"ISO_8859-1\");\n   initialize_state(state02);  \n   result r2 = cvt.out(state02, i_lit, i_lit + size, ifrom_next, \n \t\t       e_arr, e_arr + size, eto_next);\n@@ -141,7 +141,7 @@ void test01()\n \n   // unshift\n   ext_traits::copy(e_arr, e_lit, size);\n-  unicode_codecvt::state_type state03;\n+  unicode_codecvt::state_type state03(\"UNICODE\", \"ISO_8859-1\");\n   initialize_state(state03);\n   result r3 = cvt.unshift(state03, e_arr, e_arr + size, eto_next);\n   VERIFY( r3 == codecvt_base::noconv );\n@@ -153,7 +153,7 @@ void test01()\n \n   VERIFY( !cvt.always_noconv() );\n \n-  unicode_codecvt::state_type state04;\n+  unicode_codecvt::state_type state04(\"UNICODE\", \"ISO_8859-1\");\n   initialize_state(state04);\n   int j = cvt.length(state03, e_lit, e_lit + size, 5);\n   VERIFY( j == 5 );"}, {"sha": "2ad93134f88aa7ceb5b5ead4d98a7abd9351f416", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_unicode_wchar_t.cc", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae658d47a4f90ac43501b149d56f2713595e5656/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_unicode_wchar_t.cc?ref=ae658d47a4f90ac43501b149d56f2713595e5656", "patch": "@@ -0,0 +1,123 @@\n+// 2000-08-22 Benjamin Kosnik <bkoz@cygnus.com>\n+\n+// Copyright (C) 2000 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n+\n+#include <locale>\n+#include <debug_assert.h>\n+\n+using namespace std;\n+\n+void\n+initialize_state(__enc_traits& state)\n+{ state._M_init(); }\n+\n+// Partial specialization using __enc_traits.\n+// codecvt<unicode_t, wchar_t, __enc_traits>\n+void test01()\n+{\n+  typedef codecvt_base::result\t\t\tresult;\n+  typedef unsigned short\t\t\tunicode_t;\n+  typedef unicode_t\t\t\t\tint_type;\n+  typedef wchar_t\t\t\t\text_type;\n+  typedef __enc_traits\t\t\t\tenc_type;\n+  typedef codecvt<int_type, ext_type, enc_type>\tunicode_codecvt;\n+  typedef char_traits<int_type>\t\t\tint_traits;\n+  typedef char_traits<ext_type>\t\t\text_traits;\n+\n+  bool \t\t\ttest = true;\n+  const ext_type* \te_lit = L\"black pearl jasmine tea\";\n+  int \t\t\tsize = ext_traits::length(e_lit);\n+\n+  int_type \t\ti_lit_base[24] = \n+  { 25088, 27648, 24832, 25344, 27392, 8192, 28672, 25856, 24832, 29184, \n+    27648, 8192, 27136, 24832, 29440, 27904, 26880, 28160, 25856, 8192, 29696,\n+    25856, 24832, 2560\n+  };\n+  const int_type* \ti_lit = i_lit_base;\n+\n+  const ext_type*       efrom_next;\n+  const int_type*       ifrom_next;\n+  ext_type* \t\te_arr = new ext_type[size + 1];\n+  ext_type*\t\teto_next;\n+  int_type* \t\ti_arr = new int_type[size + 1];\n+  int_type*\t\tito_next;\n+\n+  // construct a locale object with the specialized facet.\n+  locale \t\tloc(locale::classic(), new unicode_codecvt);\n+  // sanity check the constructed locale has the specialized facet.\n+  VERIFY( has_facet<unicode_codecvt>(loc) );\n+  const unicode_codecvt&\tcvt = use_facet<unicode_codecvt>(loc); \n+\n+  // in\n+  unicode_codecvt::state_type state01(\"UNICODE\", \"UCS4\");\n+  initialize_state(state01);\n+  result r1 = cvt.in(state01, e_lit, e_lit + size, efrom_next, \n+\t\t     i_arr, i_arr + size, ito_next);\n+  VERIFY( r1 == codecvt_base::ok );\n+  VERIFY( !int_traits::compare(i_arr, i_lit, size) ); \n+  VERIFY( efrom_next == e_lit + size );\n+  VERIFY( ito_next == i_arr + size );\n+\n+  // out\n+  unicode_codecvt::state_type state02(\"UNICODE\", \"UCS4\");\n+  initialize_state(state02);  \n+  result r2 = cvt.out(state02, i_lit, i_lit + size, ifrom_next, \n+\t\t       e_arr, e_arr + size, eto_next);\n+  VERIFY( r2 == codecvt_base::ok );\n+  VERIFY( !ext_traits::compare(e_arr, e_lit, size) ); \n+  VERIFY( ifrom_next == i_lit + size );\n+  VERIFY( eto_next == e_arr + size );\n+\n+  // unshift\n+  ext_traits::copy(e_arr, e_lit, size);\n+  unicode_codecvt::state_type state03(\"UNICODE\", \"UCS4\");\n+  initialize_state(state03);\n+  result r3 = cvt.unshift(state03, e_arr, e_arr + size, eto_next);\n+  VERIFY( r3 == codecvt_base::noconv );\n+  VERIFY( !ext_traits::compare(e_arr, e_lit, size) ); \n+  VERIFY( eto_next == e_arr );\n+\n+  int i = cvt.encoding();\n+  VERIFY( i == 0 );\n+\n+  VERIFY( !cvt.always_noconv() );\n+\n+  unicode_codecvt::state_type state04(\"UNICODE\", \"UCS4\");\n+  initialize_state(state04);\n+  int j = cvt.length(state03, e_lit, e_lit + size, 5);\n+  VERIFY( j == 5 );\n+\n+  int k = cvt.max_length();\n+  VERIFY( k == 1 );\n+\n+  delete [] e_arr;\n+  delete [] i_arr;\n+}\n+\n+int main ()\n+{\n+  test01();\n+\n+  return 0;\n+}\n+\n+\n+"}]}