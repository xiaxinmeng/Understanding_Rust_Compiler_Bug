{"sha": "e56c602ea3335648e81411442a66e52dd129dc3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU2YzYwMmVhMzMzNTY0OGU4MTQxMTQ0MmE2NmU1MmRkMTI5ZGMzYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-12-09T13:30:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-12-09T13:30:41Z"}, "message": "re PR tree-optimization/68583 (Missed if-conversion)\n\n2015-12-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/68583\n\t* tree-if-conv.c (if_convertible_phi_p): Drop\n\tflag_tree_loop_if_convert_stores check in favor of the\n\texisting any_mask_load_store check.\n\t(insert_gimplified_predicates): Likewise.\n\t(combine_blocks): Likewise.\n\t(tree_if_conversion): Likewise.\n\t(ifcvt_memrefs_wont_trap): Properly check\n\tflag_tree_loop_if_convert_stores in all places that can end\n\tup introducing store-data-races.\n\t(if_convertible_gimple_assign_stmt_p): Remove restriction\n\ton flag_tree_loop_if_convert_stores for stores we can if-convert\n\twithout introducing store-data-races.  Force versioning for\n\tall if-converted stores.\n\n\t* gcc.dg/tree-ssa/ifc-pr68583.c: New testcase.\n\t* gcc.dg/vect/vect-72.c: Adjust.\n\t* gcc.dg/vect/vect-cselim-2.c: Likewise.\n\t* gcc.dg/vect/vect-strided-store-a-u8-i2.c: Likewise.\n\nFrom-SVN: r231453", "tree": {"sha": "70375149833cc26537e862fd68481e50b57e2001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70375149833cc26537e862fd68481e50b57e2001"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e56c602ea3335648e81411442a66e52dd129dc3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e56c602ea3335648e81411442a66e52dd129dc3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e56c602ea3335648e81411442a66e52dd129dc3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e56c602ea3335648e81411442a66e52dd129dc3b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "030809830af91bc325684493fa103b6ae3bf2369", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/030809830af91bc325684493fa103b6ae3bf2369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/030809830af91bc325684493fa103b6ae3bf2369"}], "stats": {"total": 103, "additions": 68, "deletions": 35}, "files": [{"sha": "3da8d1b6addb5cbbed0d12d972ae72b344bc6289", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e56c602ea3335648e81411442a66e52dd129dc3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e56c602ea3335648e81411442a66e52dd129dc3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e56c602ea3335648e81411442a66e52dd129dc3b", "patch": "@@ -1,3 +1,20 @@\n+2015-12-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68583\n+\t* tree-if-conv.c (if_convertible_phi_p): Drop\n+\tflag_tree_loop_if_convert_stores check in favor of the\n+\texisting any_mask_load_store check.\n+\t(insert_gimplified_predicates): Likewise.\n+\t(combine_blocks): Likewise.\n+\t(tree_if_conversion): Likewise.\n+\t(ifcvt_memrefs_wont_trap): Properly check\n+\tflag_tree_loop_if_convert_stores in all places that can end\n+\tup introducing store-data-races.\n+\t(if_convertible_gimple_assign_stmt_p): Remove restriction\n+\ton flag_tree_loop_if_convert_stores for stores we can if-convert\n+\twithout introducing store-data-races.  Force versioning for\n+\tall if-converted stores.\n+\n 2015-12-09  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/68716"}, {"sha": "687e2b2196f46365ac4c05b05e4e46fc136ebb9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e56c602ea3335648e81411442a66e52dd129dc3b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e56c602ea3335648e81411442a66e52dd129dc3b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e56c602ea3335648e81411442a66e52dd129dc3b", "patch": "@@ -1,3 +1,11 @@\n+2015-12-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68583\n+\t* gcc.dg/tree-ssa/ifc-pr68583.c: New testcase.\n+\t* gcc.dg/vect/vect-72.c: Adjust.\n+\t* gcc.dg/vect/vect-cselim-2.c: Likewise.\n+\t* gcc.dg/vect/vect-strided-store-a-u8-i2.c: Likewise.\n+\n 2015-12-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68417"}, {"sha": "be89e0855c34713c34b3691f61899f24eec6345d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-pr68583.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e56c602ea3335648e81411442a66e52dd129dc3b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr68583.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e56c602ea3335648e81411442a66e52dd129dc3b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr68583.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-pr68583.c?ref=e56c602ea3335648e81411442a66e52dd129dc3b", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-ifcvt\" } */\n+\n+void foo (long *a)\n+{\n+  int i;\n+  for (i = 0; i < 100; i+=2)\n+    {\n+      long *p = &a[i+1];\n+      if (a[i] == 0)\n+\t{\n+\t  *p = 2;\n+\t  a[i] = 3;\n+\t}\n+      else\n+\t{\n+\t  *p = 3;\n+\t  a[i] = 4;\n+\t}\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump \"Applying if-conversion\" \"ifcvt\" } } */"}, {"sha": "9c9be8eff13a5108ea875815bb5938bc6c524d7d", "filename": "gcc/testsuite/gcc.dg/vect/vect-72.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e56c602ea3335648e81411442a66e52dd129dc3b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-72.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e56c602ea3335648e81411442a66e52dd129dc3b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-72.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-72.c?ref=e56c602ea3335648e81411442a66e52dd129dc3b", "patch": "@@ -19,9 +19,10 @@ int main1 ()\n   for (i=0; i < N+1; i++)\n     {\n       ib[i] = i;\n-      /* Avoid vectorization.  */\n       if (i%3 == 0)\n         ib[i] = 5;\n+      /* Avoid vectorization.  */\n+      __asm__ volatile (\"\" : : : \"memory\");\n     }\n \n   for (i = 1; i < N+1; i++)"}, {"sha": "95efe7ad62eac1f66b85ffdc359fd60bd7465cfd", "filename": "gcc/testsuite/gcc.dg/vect/vect-cselim-2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e56c602ea3335648e81411442a66e52dd129dc3b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cselim-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e56c602ea3335648e81411442a66e52dd129dc3b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cselim-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cselim-2.c?ref=e56c602ea3335648e81411442a66e52dd129dc3b", "patch": "@@ -1,4 +1,7 @@\n /* { dg-require-effective-target vect_int } */\n+/* We now if-convert the loop unconditonally as the memory locations\n+   are always stored to.  */\n+/* { dg-additional-options \"-fno-tree-loop-if-convert\" } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "6be939eea167992aade397ada0ee50d4daa43066", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-store-a-u8-i2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e56c602ea3335648e81411442a66e52dd129dc3b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-store-a-u8-i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e56c602ea3335648e81411442a66e52dd129dc3b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-store-a-u8-i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-store-a-u8-i2.c?ref=e56c602ea3335648e81411442a66e52dd129dc3b", "patch": "@@ -26,6 +26,8 @@ main1 ()\n       b[i] = i * 2;\n       if (i%3 == 0)\n         a[i] = 10; \n+      /* Prevent vectorization.  */\n+      __asm__ volatile (\"\" : : : \"memory\");\n     }\n \n   for (i = 0; i < N; i++)"}, {"sha": "637fa226935919d781c8528a81ffafdaf7912b72", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 13, "deletions": 34, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e56c602ea3335648e81411442a66e52dd129dc3b/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e56c602ea3335648e81411442a66e52dd129dc3b/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=e56c602ea3335648e81411442a66e52dd129dc3b", "patch": "@@ -517,7 +517,7 @@ bb_with_exit_edge_p (struct loop *loop, basic_block bb)\n    PHI is not if-convertible if:\n    - it has more than 2 arguments.\n \n-   When the flag_tree_loop_if_convert_stores is not set, PHI is not\n+   When we didn't see if-convertible stores, PHI is not\n    if-convertible if:\n    - a virtual PHI is immediately used in another PHI node,\n    - there is a virtual PHI in a BB other than the loop->header.\n@@ -545,10 +545,10 @@ if_convertible_phi_p (struct loop *loop, basic_block bb, gphi *phi,\n         }\n     }\n \n-  if (flag_tree_loop_if_convert_stores || any_mask_load_store)\n+  if (any_mask_load_store)\n     return true;\n \n-  /* When the flag_tree_loop_if_convert_stores is not set, check\n+  /* When there were no if-convertible stores, check\n      that there are no memory writes in the branches of the loop to be\n      if-converted.  */\n   if (virtual_operand_p (gimple_phi_result (phi)))\n@@ -713,16 +713,15 @@ ifcvt_memrefs_wont_trap (gimple *stmt, vec<data_reference_p> drs)\n          to unconditionally.  */\n       if (base_master_dr\n \t  && DR_BASE_W_UNCONDITIONALLY (*base_master_dr))\n-\treturn true;\n+\treturn flag_tree_loop_if_convert_stores;\n       else\n \t{\n \t  /* or the base is know to be not readonly.  */\n \t  tree base_tree = get_base_address (DR_REF (a));\n \t  if (DECL_P (base_tree)\n \t      && decl_binds_to_current_def_p (base_tree)\n-\t      && flag_tree_loop_if_convert_stores\n-\t      && !TREE_READONLY (base_tree))\n-\t    return true;\n+\t      && ! TREE_READONLY (base_tree))\n+\t    return flag_tree_loop_if_convert_stores;\n \t}\n     }\n   return false;\n@@ -791,7 +790,6 @@ if_convertible_gimple_assign_stmt_p (gimple *stmt,\n \t\t\t\t     bool *any_mask_load_store)\n {\n   tree lhs = gimple_assign_lhs (stmt);\n-  basic_block bb;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -835,28 +833,10 @@ if_convertible_gimple_assign_stmt_p (gimple *stmt,\n       return false;\n     }\n \n-  if (flag_tree_loop_if_convert_stores)\n-    return true;\n-\n-  bb = gimple_bb (stmt);\n-\n-  if (TREE_CODE (lhs) != SSA_NAME\n-      && bb != bb->loop_father->header\n-      && !bb_with_exit_edge_p (bb->loop_father, bb))\n-    {\n-      if (ifcvt_can_use_mask_load_store (stmt))\n-\t{\n-\t  gimple_set_plf (stmt, GF_PLF_2, true);\n-\t  *any_mask_load_store = true;\n-\t  return true;\n-\t}\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t{\n-\t  fprintf (dump_file, \"LHS is not var\\n\");\n-\t  print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n-\t}\n-      return false;\n-    }\n+  /* When if-converting stores force versioning, likewise if we\n+     ended up generating store data races.  */\n+  if (gimple_vdef (stmt))\n+    *any_mask_load_store = true;\n \n   return true;\n }\n@@ -1851,8 +1831,7 @@ insert_gimplified_predicates (loop_p loop, bool any_mask_load_store)\n       stmts = bb_predicate_gimplified_stmts (bb);\n       if (stmts)\n \t{\n-\t  if (flag_tree_loop_if_convert_stores\n-\t      || any_mask_load_store)\n+\t  if (any_mask_load_store)\n \t    {\n \t      /* Insert the predicate of the BB just after the label,\n \t\t as the if-conversion of memory writes will use this\n@@ -2174,7 +2153,7 @@ combine_blocks (struct loop *loop, bool any_mask_load_store)\n   insert_gimplified_predicates (loop, any_mask_load_store);\n   predicate_all_scalar_phis (loop);\n \n-  if (flag_tree_loop_if_convert_stores || any_mask_load_store)\n+  if (any_mask_load_store)\n     predicate_mem_writes (loop);\n \n   /* Merge basic blocks: first remove all the edges in the loop,\n@@ -2691,7 +2670,7 @@ tree_if_conversion (struct loop *loop)\n     }\n \n   todo |= TODO_cleanup_cfg;\n-  if (flag_tree_loop_if_convert_stores || any_mask_load_store)\n+  if (any_mask_load_store)\n     {\n       mark_virtual_operands_for_renaming (cfun);\n       todo |= TODO_update_ssa_only_virtuals;"}]}