{"sha": "0ee1e3d98397c166a0bc74d1fbb7032cc3e99421", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVlMWUzZDk4Mzk3YzE2NmEwYmM3NGQxZmJiNzAzMmNjM2U5OTQyMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-04-02T07:14:12Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-04-02T07:14:12Z"}, "message": "reorg.c (get_branch_condition): Deal with conditional returns.\n\n\t* reorg.c (get_branch_condition): Deal with conditional returns.\n\t(fill_simple_delay_slots): Remove dead code dealing with jumps.\n\nFrom-SVN: r197340", "tree": {"sha": "3c635aafc974b69b22e170a5131720a75aca6f05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c635aafc974b69b22e170a5131720a75aca6f05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ee1e3d98397c166a0bc74d1fbb7032cc3e99421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee1e3d98397c166a0bc74d1fbb7032cc3e99421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ee1e3d98397c166a0bc74d1fbb7032cc3e99421", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee1e3d98397c166a0bc74d1fbb7032cc3e99421/comments", "author": null, "committer": null, "parents": [{"sha": "cf8124e1bf487ad3fe651ae5562fb7244a769770", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf8124e1bf487ad3fe651ae5562fb7244a769770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf8124e1bf487ad3fe651ae5562fb7244a769770"}], "stats": {"total": 54, "additions": 19, "deletions": 35}, "files": [{"sha": "f1064e6aa617484c23292b15053cc47a437696db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee1e3d98397c166a0bc74d1fbb7032cc3e99421/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee1e3d98397c166a0bc74d1fbb7032cc3e99421/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ee1e3d98397c166a0bc74d1fbb7032cc3e99421", "patch": "@@ -1,3 +1,8 @@\n+2013-04-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* reorg.c (get_branch_condition): Deal with conditional returns.\n+\t(fill_simple_delay_slots): Remove dead code dealing with jumps.\n+\n 2013-04-01  Wei Mi  <wmi@google.com>\n \n \t* config/i386/i386.md (*ashl<mode>3_mask): Rewrite as define_insn."}, {"sha": "f89598276b16d586eebc4fa29fd3755de6bc5d85", "filename": "gcc/reorg.c", "status": "modified", "additions": 14, "deletions": 35, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee1e3d98397c166a0bc74d1fbb7032cc3e99421/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee1e3d98397c166a0bc74d1fbb7032cc3e99421/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=0ee1e3d98397c166a0bc74d1fbb7032cc3e99421", "patch": "@@ -921,8 +921,8 @@ get_branch_condition (rtx insn, rtx target)\n   if (condjump_in_parallel_p (insn))\n     pat = XVECEXP (pat, 0, 0);\n \n-  if (ANY_RETURN_P (pat))\n-    return pat == target ? const_true_rtx : 0;\n+  if (ANY_RETURN_P (pat) && pat == target)\n+    return const_true_rtx;\n \n   if (GET_CODE (pat) != SET || SET_DEST (pat) != pc_rtx)\n     return 0;\n@@ -933,14 +933,16 @@ get_branch_condition (rtx insn, rtx target)\n \n   else if (GET_CODE (src) == IF_THEN_ELSE\n \t   && XEXP (src, 2) == pc_rtx\n-\t   && GET_CODE (XEXP (src, 1)) == LABEL_REF\n-\t   && XEXP (XEXP (src, 1), 0) == target)\n+\t   && ((GET_CODE (XEXP (src, 1)) == LABEL_REF\n+\t        && XEXP (XEXP (src, 1), 0) == target)\n+\t       || (ANY_RETURN_P (XEXP (src, 1)) && XEXP (src, 1) == target)))\n     return XEXP (src, 0);\n \n   else if (GET_CODE (src) == IF_THEN_ELSE\n \t   && XEXP (src, 1) == pc_rtx\n-\t   && GET_CODE (XEXP (src, 2)) == LABEL_REF\n-\t   && XEXP (XEXP (src, 2), 0) == target)\n+\t   && ((GET_CODE (XEXP (src, 2)) == LABEL_REF\n+\t\t&& XEXP (XEXP (src, 2), 0) == target)\n+\t       || (ANY_RETURN_P (XEXP (src, 2)) && XEXP (src, 2) == target)))\n     {\n       enum rtx_code rev;\n       rev = reversed_comparison_code (XEXP (src, 0), insn);\n@@ -2129,35 +2131,19 @@ fill_simple_delay_slots (int non_jumps_p)\n \t     Presumably, we should also check to see if we could get\n \t     back to this function via `setjmp'.  */\n \t  && ! can_throw_internal (insn)\n-\t  && (!JUMP_P (insn)\n-\t      || ((condjump_p (insn) || condjump_in_parallel_p (insn))\n-\t\t  && ! simplejump_p (insn)\n-\t\t  && !ANY_RETURN_P (JUMP_LABEL (insn)))))\n+\t  && !JUMP_P (insn))\n \t{\n-\t  /* Invariant: If insn is a JUMP_INSN, the insn's jump\n-\t     label.  Otherwise, zero.  */\n-\t  rtx target = 0;\n \t  int maybe_never = 0;\n \t  rtx pat, trial_delay;\n \n \t  CLEAR_RESOURCE (&needed);\n \t  CLEAR_RESOURCE (&set);\n+\t  mark_set_resources (insn, &set, 0, MARK_SRC_DEST_CALL);\n+\t  mark_referenced_resources (insn, &needed, true);\n \n \t  if (CALL_P (insn))\n-\t    {\n-\t      mark_set_resources (insn, &set, 0, MARK_SRC_DEST_CALL);\n-\t      mark_referenced_resources (insn, &needed, true);\n-\t      maybe_never = 1;\n-\t    }\n-\t  else\n-\t    {\n-\t      mark_set_resources (insn, &set, 0, MARK_SRC_DEST_CALL);\n-\t      mark_referenced_resources (insn, &needed, true);\n-\t      if (JUMP_P (insn))\n-\t\ttarget = JUMP_LABEL (insn);\n-\t    }\n+\t    maybe_never = 1;\n \n-\t  if (target == 0 || ANY_RETURN_P (target))\n \t    for (trial = next_nonnote_insn (insn); !stop_search_p (trial, 1);\n \t\t trial = next_trial)\n \t      {\n@@ -2217,9 +2203,8 @@ fill_simple_delay_slots (int non_jumps_p)\n \t\t   slot since these insns could clobber the condition code.  */\n \t\tset.cc = 1;\n \n-\t\t/* If this is a call or jump, we might not get here.  */\n-\t\tif (CALL_P (trial_delay)\n-\t\t    || JUMP_P (trial_delay))\n+\t\t/* If this is a call, we might not get here.  */\n+\t\tif (CALL_P (trial_delay))\n \t\t  maybe_never = 1;\n \t      }\n \n@@ -2232,7 +2217,6 @@ fill_simple_delay_slots (int non_jumps_p)\n \t      && trial\n \t      && jump_to_label_p (trial)\n \t      && simplejump_p (trial)\n-\t      && (target == 0 || JUMP_LABEL (trial) == target)\n \t      && (next_trial = next_active_insn (JUMP_LABEL (trial))) != 0\n \t      && ! (NONJUMP_INSN_P (next_trial)\n \t\t    && GET_CODE (PATTERN (next_trial)) == SEQUENCE)\n@@ -2264,11 +2248,6 @@ fill_simple_delay_slots (int non_jumps_p)\n \t\t\t\t\t delay_list);\n \t\t  slots_filled++;\n \t\t  reorg_redirect_jump (trial, new_label);\n-\n-\t\t  /* If we merged because we both jumped to the same place,\n-\t\t     redirect the original insn also.  */\n-\t\t  if (target)\n-\t\t    reorg_redirect_jump (insn, new_label);\n \t\t}\n \t    }\n \t}"}]}