{"sha": "f120196382ac5ac49ec4a60f8abad42f22d45a91", "node_id": "C_kwDOANBUbNoAKGYxMjAxOTYzODJhYzVhYzQ5ZWM0YTYwZjhhYmFkNDJmMjJkNDVhOTE", "commit": {"author": {"name": "Kewen.Lin", "email": "linkw@gcc.gnu.org", "date": "2022-11-25T03:17:28Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-11-25T03:17:28Z"}, "message": "Adjust the symbol for SECTION_LINK_ORDER linked_to section [PR99889]\n\nAs discussed in PR98125, -fpatchable-function-entry with\nSECTION_LINK_ORDER support doesn't work well on powerpc64\nELFv1 because the filled \"Symbol\" in\n\n  .section name,\"flags\"o,@type,Symbol\n\nsits in .opd section instead of in the function_section\nlike .text or named .text*.\n\nSince we already generates one label LPFE* which sits in\nfunction_section of current_function_decl, this patch is\nto reuse it as the symbol for the linked_to section.  It\navoids the above ABI specific issue when using the symbol\nconcluded from current_function_decl.\n\nBesides, with this support some previous workarounds can\nbe reverted.\n\n\tPR target/99889\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.cc (rs6000_print_patchable_function_entry):\n\tAdjust to call function default_print_patchable_function_entry.\n\t* targhooks.cc (default_print_patchable_function_entry_1): Remove and\n\tmove the flags preparation ...\n\t(default_print_patchable_function_entry): ... here, adjust to use\n\tcurrent_function_funcdef_no for label no.\n\t* targhooks.h (default_print_patchable_function_entry_1): Remove.\n\t* varasm.cc (default_elf_asm_named_section): Adjust code for\n\t__patchable_function_entries section support with LPFE label.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/pr93195a.C: Remove the skip on powerpc*-*-* 64-bit.\n\t* gcc.target/aarch64/pr92424-2.c: Adjust LPFE1 with LPFE0.\n\t* gcc.target/aarch64/pr92424-3.c: Likewise.\n\t* gcc.target/i386/pr93492-2.c: Likewise.\n\t* gcc.target/i386/pr93492-3.c: Likewise.\n\t* gcc.target/i386/pr93492-4.c: Likewise.\n\t* gcc.target/i386/pr93492-5.c: Likewise.", "tree": {"sha": "3e3db2e70fb65301de650e04b07e70cebe429620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e3db2e70fb65301de650e04b07e70cebe429620"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f120196382ac5ac49ec4a60f8abad42f22d45a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f120196382ac5ac49ec4a60f8abad42f22d45a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f120196382ac5ac49ec4a60f8abad42f22d45a91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f120196382ac5ac49ec4a60f8abad42f22d45a91/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4581328022615c2cb732cfb404151c4b059d26e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4581328022615c2cb732cfb404151c4b059d26e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4581328022615c2cb732cfb404151c4b059d26e3"}], "stats": {"total": 99, "additions": 39, "deletions": 60}, "files": [{"sha": "eb7ad5e954f51a4da11b5d16978d31e69b1323d3", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=f120196382ac5ac49ec4a60f8abad42f22d45a91", "patch": "@@ -14925,22 +14925,13 @@ rs6000_print_patchable_function_entry (FILE *file,\n \t\t\t\t       unsigned HOST_WIDE_INT patch_area_size,\n \t\t\t\t       bool record_p)\n {\n-  unsigned int flags = SECTION_WRITE | SECTION_RELRO;\n-  /* When .opd section is emitted, the function symbol\n-     default_print_patchable_function_entry_1 is emitted into the .opd section\n-     while the patchable area is emitted into the function section.\n-     Don't use SECTION_LINK_ORDER in that case.  */\n-  if (!(TARGET_64BIT && DEFAULT_ABI != ABI_ELFv2)\n-      && HAVE_GAS_SECTION_LINK_ORDER)\n-    flags |= SECTION_LINK_ORDER;\n   bool global_entry_needed_p = rs6000_global_entry_point_prologue_needed_p ();\n   /* For a function which needs global entry point, we will emit the\n      patchable area before and after local entry point under the control of\n      cfun->machine->global_entry_emitted, see the handling in function\n      rs6000_output_function_prologue.  */\n   if (!global_entry_needed_p || cfun->machine->global_entry_emitted)\n-    default_print_patchable_function_entry_1 (file, patch_area_size, record_p,\n-\t\t\t\t\t      flags);\n+    default_print_patchable_function_entry (file, patch_area_size, record_p);\n }\n \f\n enum rtx_code"}, {"sha": "d9e61552ad5a7b7a92eb172b011075cf7f29cc11", "filename": "gcc/targhooks.cc", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftarghooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftarghooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.cc?ref=f120196382ac5ac49ec4a60f8abad42f22d45a91", "patch": "@@ -2020,15 +2020,17 @@ default_compare_by_pieces_branch_ratio (machine_mode)\n   return 1;\n }\n \n-/* Helper for default_print_patchable_function_entry and other\n-   print_patchable_function_entry hook implementations.  */\n+/* Write PATCH_AREA_SIZE NOPs into the asm outfile FILE around a function\n+   entry.  If RECORD_P is true and the target supports named sections,\n+   the location of the NOPs will be recorded in a special object section\n+   called \"__patchable_function_entries\".  This routine may be called\n+   twice per function to put NOPs before and after the function\n+   entry.  */\n \n void\n-default_print_patchable_function_entry_1 (FILE *file,\n-\t\t\t\t\t  unsigned HOST_WIDE_INT\n-\t\t\t\t\t  patch_area_size,\n-\t\t\t\t\t  bool record_p,\n-\t\t\t\t\t  unsigned int flags)\n+default_print_patchable_function_entry (FILE *file,\n+\t\t\t\t\tunsigned HOST_WIDE_INT patch_area_size,\n+\t\t\t\t\tbool record_p)\n {\n   const char *nop_templ = 0;\n   int code_num;\n@@ -2042,13 +2044,17 @@ default_print_patchable_function_entry_1 (FILE *file,\n   if (record_p && targetm_common.have_named_sections)\n     {\n       char buf[256];\n-      static int patch_area_number;\n       section *previous_section = in_section;\n       const char *asm_op = integer_asm_op (POINTER_SIZE_UNITS, false);\n \n       gcc_assert (asm_op != NULL);\n-      patch_area_number++;\n-      ASM_GENERATE_INTERNAL_LABEL (buf, \"LPFE\", patch_area_number);\n+      /* If SECTION_LINK_ORDER is supported, this internal label will\n+\t be filled as the symbol for linked_to section.  */\n+      ASM_GENERATE_INTERNAL_LABEL (buf, \"LPFE\", current_function_funcdef_no);\n+\n+      unsigned int flags = SECTION_WRITE | SECTION_RELRO;\n+      if (HAVE_GAS_SECTION_LINK_ORDER)\n+\tflags |= SECTION_LINK_ORDER;\n \n       section *sect = get_section (\"__patchable_function_entries\",\n \t\t\t\t  flags, current_function_decl);\n@@ -2070,25 +2076,6 @@ default_print_patchable_function_entry_1 (FILE *file,\n     output_asm_insn (nop_templ, NULL);\n }\n \n-/* Write PATCH_AREA_SIZE NOPs into the asm outfile FILE around a function\n-   entry.  If RECORD_P is true and the target supports named sections,\n-   the location of the NOPs will be recorded in a special object section\n-   called \"__patchable_function_entries\".  This routine may be called\n-   twice per function to put NOPs before and after the function\n-   entry.  */\n-\n-void\n-default_print_patchable_function_entry (FILE *file,\n-\t\t\t\t\tunsigned HOST_WIDE_INT patch_area_size,\n-\t\t\t\t\tbool record_p)\n-{\n-  unsigned int flags = SECTION_WRITE | SECTION_RELRO;\n-  if (HAVE_GAS_SECTION_LINK_ORDER)\n-    flags |= SECTION_LINK_ORDER;\n-  default_print_patchable_function_entry_1 (file, patch_area_size, record_p,\n-\t\t\t\t\t    flags);\n-}\n-\n bool\n default_profile_before_prologue (void)\n {"}, {"sha": "3ca25ab6edb59b98225e7f22c0703730e569c30b", "filename": "gcc/targhooks.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=f120196382ac5ac49ec4a60f8abad42f22d45a91", "patch": "@@ -233,9 +233,6 @@ extern bool default_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT,\n \t\t\t\t\t\t    bool);\n extern int default_compare_by_pieces_branch_ratio (machine_mode);\n \n-extern void default_print_patchable_function_entry_1 (FILE *,\n-\t\t\t\t\t\t      unsigned HOST_WIDE_INT,\n-\t\t\t\t\t\t      bool, unsigned int);\n extern void default_print_patchable_function_entry (FILE *,\n \t\t\t\t\t\t    unsigned HOST_WIDE_INT,\n \t\t\t\t\t\t    bool);"}, {"sha": "26d265da74ebf7754a1724c0ba5694c5b28d03b3", "filename": "gcc/testsuite/g++.dg/pr93195a.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr93195a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr93195a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr93195a.C?ref=f120196382ac5ac49ec4a60f8abad42f22d45a91", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do link { target { ! { nvptx*-*-* visium-*-* } } } } */\n-/* { dg-skip-if \"not supported\" { { powerpc*-*-* } && lp64 } } */\n // { dg-require-effective-target o_flag_in_section }\n /* { dg-options \"-O0 -fpatchable-function-entry=1\" } */\n /* { dg-additional-options \"-fno-pie\" { target sparc*-*-* } } */"}, {"sha": "12465213aef07ceaa8b06bf53b0f873f5175eb33", "filename": "gcc/testsuite/gcc.target/aarch64/pr92424-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-2.c?ref=f120196382ac5ac49ec4a60f8abad42f22d45a91", "patch": "@@ -1,12 +1,12 @@\n /* { dg-do \"compile\" } */\n /* { dg-options \"-O1\" } */\n \n-/* Test the placement of the .LPFE1 label.  */\n+/* Test the placement of the .LPFE0 label.  */\n \n void\n __attribute__ ((target(\"branch-protection=bti\"),\n \t\tpatchable_function_entry (1, 0)))\n f10_bti ()\n {\n }\n-/* { dg-final { scan-assembler \"f10_bti:\\n\\thint\\t34 // bti c\\n.*\\.LPFE1:\\n\\tnop\\n.*\\tret\\n\" } } */\n+/* { dg-final { scan-assembler \"f10_bti:\\n\\thint\\t34 // bti c\\n.*\\.LPFE0:\\n\\tnop\\n.*\\tret\\n\" } } */"}, {"sha": "2c6a73789f0aa3a2cd8317c53dfe555c8045e803", "filename": "gcc/testsuite/gcc.target/aarch64/pr92424-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr92424-3.c?ref=f120196382ac5ac49ec4a60f8abad42f22d45a91", "patch": "@@ -1,12 +1,12 @@\n /* { dg-do \"compile\" } */\n /* { dg-options \"-O1\" } */\n \n-/* Test the placement of the .LPFE1 label.  */\n+/* Test the placement of the .LPFE0 label.  */\n \n void\n __attribute__ ((target(\"branch-protection=bti+pac-ret+leaf\"),\n \t\tpatchable_function_entry (1, 0)))\n f10_pac ()\n {\n }\n-/* { dg-final { scan-assembler \"f10_pac:\\n\\thint\\t34 // bti c\\n.*\\.LPFE1:\\n\\tnop\\n.*\\thint\\t25 // paciasp\\n.*\\thint\\t29 // autiasp\\n.*\\tret\\n\" } } */\n+/* { dg-final { scan-assembler \"f10_pac:\\n\\thint\\t34 // bti c\\n.*\\.LPFE0:\\n\\tnop\\n.*\\thint\\t25 // paciasp\\n.*\\thint\\t29 // autiasp\\n.*\\tret\\n\" } } */"}, {"sha": "ede8c2077b7e43618798076e5c86868e40ae2301", "filename": "gcc/testsuite/gcc.target/i386/pr93492-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93492-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93492-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93492-2.c?ref=f120196382ac5ac49ec4a60f8abad42f22d45a91", "patch": "@@ -1,12 +1,12 @@\n /* { dg-do \"compile\" { target *-*-linux* } } */\n /* { dg-options \"-O1 -fcf-protection -mmanual-endbr -fasynchronous-unwind-tables\" } */\n \n-/* Test the placement of the .LPFE1 label.  */\n+/* Test the placement of the .LPFE0 label.  */\n \n void\n __attribute__ ((cf_check,patchable_function_entry (1, 0)))\n f10_endbr (void)\n {\n }\n \n-/* { dg-final { scan-assembler \"\\t\\.cfi_startproc\\n\\tendbr(32|64)\\n.*\\.LPFE1:\\n\\tnop\\n\\tret\\n\" } } */\n+/* { dg-final { scan-assembler \"\\t\\.cfi_startproc\\n\\tendbr(32|64)\\n.*\\.LPFE0:\\n\\tnop\\n\\tret\\n\" } } */"}, {"sha": "b68da30bd36566465ac7ad805bfd639e5236f751", "filename": "gcc/testsuite/gcc.target/i386/pr93492-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93492-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93492-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93492-3.c?ref=f120196382ac5ac49ec4a60f8abad42f22d45a91", "patch": "@@ -2,12 +2,12 @@\n /* { dg-require-effective-target mfentry } */\n /* { dg-options \"-O1 -fcf-protection -mmanual-endbr -mfentry -pg -fasynchronous-unwind-tables\" } */\n \n-/* Test the placement of the .LPFE1 label.  */\n+/* Test the placement of the .LPFE0 label.  */\n \n void\n __attribute__ ((cf_check,patchable_function_entry (1, 0)))\n f10_endbr (void)\n {\n }\n \n-/* { dg-final { scan-assembler \"\\t\\.cfi_startproc\\n\\tendbr(32|64)\\n.*\\.LPFE1:\\n\\tnop\\n1:\\tcall\\t\\[^\\n\\]*__fentry__\\[^\\n\\]*\\n\\tret\\n\" } } */\n+/* { dg-final { scan-assembler \"\\t\\.cfi_startproc\\n\\tendbr(32|64)\\n.*\\.LPFE0:\\n\\tnop\\n1:\\tcall\\t\\[^\\n\\]*__fentry__\\[^\\n\\]*\\n\\tret\\n\" } } */"}, {"sha": "c73034a46241f5a5260c3b2bca24e172555ce0b0", "filename": "gcc/testsuite/gcc.target/i386/pr93492-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93492-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93492-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93492-4.c?ref=f120196382ac5ac49ec4a60f8abad42f22d45a91", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do \"compile\" { target *-*-linux* } } */\n /* { dg-options \"-O1 -fpatchable-function-entry=1 -fasynchronous-unwind-tables\" } */\n \n-/* Test the placement of the .LPFE1 label.  */\n+/* Test the placement of the .LPFE0 label.  */\n \n void\n foo (void)\n {\n }\n \n-/* { dg-final { scan-assembler \"\\t\\.cfi_startproc\\n.*\\.LPFE1:\\n\\tnop\\n\\tret\\n\" } } */\n+/* { dg-final { scan-assembler \"\\t\\.cfi_startproc\\n.*\\.LPFE0:\\n\\tnop\\n\\tret\\n\" } } */"}, {"sha": "ee9849ae852ed460d2df7c8eb4f35d360c3f76f1", "filename": "gcc/testsuite/gcc.target/i386/pr93492-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93492-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93492-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93492-5.c?ref=f120196382ac5ac49ec4a60f8abad42f22d45a91", "patch": "@@ -2,11 +2,11 @@\n /* { dg-options \"-O1 -fpatchable-function-entry=1 -mfentry -pg -fasynchronous-unwind-tables\" } */\n /* { dg-additional-options \"-fno-PIE\" { target ia32 } } */\n \n-/* Test the placement of the .LPFE1 label.  */\n+/* Test the placement of the .LPFE0 label.  */\n \n void\n foo (void)\n {\n }\n \n-/* { dg-final { scan-assembler \"\\t\\.cfi_startproc\\n.*\\.LPFE1:\\n\\tnop\\n1:\\tcall\\t\\[^\\n\\]*__fentry__\\[^\\n\\]*\\n\\tret\\n\" } } */\n+/* { dg-final { scan-assembler \"\\t\\.cfi_startproc\\n.*\\.LPFE0:\\n\\tnop\\n1:\\tcall\\t\\[^\\n\\]*__fentry__\\[^\\n\\]*\\n\\tret\\n\" } } */"}, {"sha": "9dfbebbb91597d431bf286a920b6025a766bc822", "filename": "gcc/varasm.cc", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Fvarasm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f120196382ac5ac49ec4a60f8abad42f22d45a91/gcc%2Fvarasm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.cc?ref=f120196382ac5ac49ec4a60f8abad42f22d45a91", "patch": "@@ -6915,11 +6915,16 @@ default_elf_asm_named_section (const char *name, unsigned int flags,\n \tfprintf (asm_out_file, \",%d\", flags & SECTION_ENTSIZE);\n       if (flags & SECTION_LINK_ORDER)\n \t{\n-\t  tree id = DECL_ASSEMBLER_NAME (decl);\n-\t  ultimate_transparent_alias_target (&id);\n-\t  const char *name = IDENTIFIER_POINTER (id);\n-\t  name = targetm.strip_name_encoding (name);\n-\t  fprintf (asm_out_file, \",%s\", name);\n+\t  /* For now, only section \"__patchable_function_entries\"\n+\t     adopts flag SECTION_LINK_ORDER, internal label LPFE*\n+\t     was emitted in default_print_patchable_function_entry,\n+\t     just place it here for linked_to section.  */\n+\t  gcc_assert (!strcmp (name, \"__patchable_function_entries\"));\n+\t  fprintf (asm_out_file, \",\");\n+\t  char buf[256];\n+\t  ASM_GENERATE_INTERNAL_LABEL (buf, \"LPFE\",\n+\t\t\t\t       current_function_funcdef_no);\n+\t  assemble_name_raw (asm_out_file, buf);\n \t}\n       if (HAVE_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n \t{"}]}