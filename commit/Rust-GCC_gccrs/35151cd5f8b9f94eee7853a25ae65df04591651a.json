{"sha": "35151cd5f8b9f94eee7853a25ae65df04591651a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUxNTFjZDVmOGI5Zjk0ZWVlNzg1M2EyNWFlNjVkZjA0NTkxNjUxYQ==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-07-10T18:14:45Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-07-10T18:14:45Z"}, "message": "trans-io.c (gfc_build_st_parameter): Update calls to gfc_add_field_to_struct.\n\n2010-07-10  Mikael Morin  <mikael@gcc.gnu.org>\n\n\t* trans-io.c (gfc_build_st_parameter): Update calls to\n\tgfc_add_field_to_struct.\n\t* trans-stmt.c (ADD_FIELD): Ditto.\n\t* trans-types.c\n\t(gfc_get_derived_type): Ditto. Don't create backend_decl for C_PTR's\n\tC_ADDRESS field. \n\t(gfc_add_field_to_struct_1): Set TYPE_FIELDS(context) instead of\n\tfieldlist, remove fieldlist from argument list.\n\t(gfc_add_field_to_struct): Update call to gfc_add_field_to_struct_1\n\tand remove fieldlist from argument list. \n\t(gfc_get_desc_dim_type, gfc_get_array_descriptor_base,\n\tgfc_get_mixed_entry_union): Move setting\n\tTYPE_FIELDS to gfc_add_field_to_struct_1 and update calls to it.\n\t* trans-types.h (gfc_add_field_to_struct): Update prototype.\n\nFrom-SVN: r162042", "tree": {"sha": "a703e930b2e2efed2daa3fbccfb6e75dfa38ca93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a703e930b2e2efed2daa3fbccfb6e75dfa38ca93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35151cd5f8b9f94eee7853a25ae65df04591651a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35151cd5f8b9f94eee7853a25ae65df04591651a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35151cd5f8b9f94eee7853a25ae65df04591651a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35151cd5f8b9f94eee7853a25ae65df04591651a/comments", "author": null, "committer": null, "parents": [{"sha": "022e30c0b67a70587b22fc67f7a7e11e0600005f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/022e30c0b67a70587b22fc67f7a7e11e0600005f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/022e30c0b67a70587b22fc67f7a7e11e0600005f"}], "stats": {"total": 104, "additions": 48, "deletions": 56}, "files": [{"sha": "6709df3877e12b1ae908ab78aadaccd8305d9606", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35151cd5f8b9f94eee7853a25ae65df04591651a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35151cd5f8b9f94eee7853a25ae65df04591651a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=35151cd5f8b9f94eee7853a25ae65df04591651a", "patch": "@@ -1,3 +1,20 @@\n+2010-07-10  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans-io.c (gfc_build_st_parameter): Update calls to\n+\tgfc_add_field_to_struct.\n+\t* trans-stmt.c (ADD_FIELD): Ditto.\n+\t* trans-types.c\n+\t(gfc_get_derived_type): Ditto. Don't create backend_decl for C_PTR's\n+\tC_ADDRESS field. \n+\t(gfc_add_field_to_struct_1): Set TYPE_FIELDS(context) instead of\n+\tfieldlist, remove fieldlist from argument list.\n+\t(gfc_add_field_to_struct): Update call to gfc_add_field_to_struct_1\n+\tand remove fieldlist from argument list. \n+\t(gfc_get_desc_dim_type, gfc_get_array_descriptor_base,\n+\tgfc_get_mixed_entry_union): Move setting\n+\tTYPE_FIELDS to gfc_add_field_to_struct_1 and update calls to it.\n+\t* trans-types.h (gfc_add_field_to_struct): Update prototype.\n+\n 2010-07-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/44773"}, {"sha": "8626e032da43d60df02746a956f85fb615b5f47d", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35151cd5f8b9f94eee7853a25ae65df04591651a/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35151cd5f8b9f94eee7853a25ae65df04591651a/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=35151cd5f8b9f94eee7853a25ae65df04591651a", "patch": "@@ -176,32 +176,28 @@ gfc_build_st_parameter (enum ioparam_type ptype, tree *types)\n \tcase IOPARM_type_parray:\n \tcase IOPARM_type_pchar:\n \tcase IOPARM_type_pad:\n-\t  p->field = gfc_add_field_to_struct (&TYPE_FIELDS (t), t,\n-\t\t\t\t\t      get_identifier (p->name),\n+\t  p->field = gfc_add_field_to_struct (t, get_identifier (p->name),\n \t\t\t\t\t      types[p->type], &chain);\n \t  break;\n \tcase IOPARM_type_char1:\n-\t  p->field = gfc_add_field_to_struct (&TYPE_FIELDS (t), t,\n-\t\t\t\t\t      get_identifier (p->name),\n+\t  p->field = gfc_add_field_to_struct (t, get_identifier (p->name),\n \t\t\t\t\t      pchar_type_node, &chain);\n \t  /* FALLTHROUGH */\n \tcase IOPARM_type_char2:\n \t  len = strlen (p->name);\n \t  gcc_assert (len <= sizeof (name) - sizeof (\"_len\"));\n \t  memcpy (name, p->name, len);\n \t  memcpy (name + len, \"_len\", sizeof (\"_len\"));\n-\t  p->field_len = gfc_add_field_to_struct (&TYPE_FIELDS (t), t,\n-\t\t\t\t\t\t  get_identifier (name),\n+\t  p->field_len = gfc_add_field_to_struct (t, get_identifier (name),\n \t\t\t\t\t\t  gfc_charlen_type_node,\n \t\t\t\t\t\t  &chain);\n \t  if (p->type == IOPARM_type_char2)\n-\t    p->field = gfc_add_field_to_struct (&TYPE_FIELDS (t), t,\n-\t\t\t\t\t\tget_identifier (p->name),\n+\t    p->field = gfc_add_field_to_struct (t, get_identifier (p->name),\n \t\t\t\t\t\tpchar_type_node, &chain);\n \t  break;\n \tcase IOPARM_type_common:\n \t  p->field\n-\t    = gfc_add_field_to_struct (&TYPE_FIELDS (t), t,\n+\t    = gfc_add_field_to_struct (t,\n \t\t\t\t       get_identifier (p->name),\n \t\t\t\t       st_parameter[IOPARM_ptype_common].type,\n \t\t\t\t       &chain);"}, {"sha": "bdf4d1186ed6e0c6bb6051096383ac910a494bc5", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35151cd5f8b9f94eee7853a25ae65df04591651a/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35151cd5f8b9f94eee7853a25ae65df04591651a/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=35151cd5f8b9f94eee7853a25ae65df04591651a", "patch": "@@ -1643,10 +1643,11 @@ gfc_trans_character_select (gfc_code *code)\n \tgcc_unreachable ();\n \n #undef ADD_FIELD\n-#define ADD_FIELD(NAME, TYPE)\t\t\t\t\t\\\n-  ss_##NAME[k] = gfc_add_field_to_struct\t\t\t\t\\\n-     (&(TYPE_FIELDS (select_struct[k])), select_struct[k],\t\\\n-      get_identifier (stringize(NAME)), TYPE, &chain)\n+#define ADD_FIELD(NAME, TYPE)\t\t\t\t\t\t    \\\n+  ss_##NAME[k] = gfc_add_field_to_struct (select_struct[k],\t\t    \\\n+\t\t\t\t\t  get_identifier (stringize(NAME)), \\\n+\t\t\t\t\t  TYPE,\t\t\t\t    \\\n+\t\t\t\t\t  &chain)\n \n       ADD_FIELD (string1, pchartype);\n       ADD_FIELD (string1_len, gfc_charlen_type_node);"}, {"sha": "741ea2fd9d0255ad62e4da40fb3bbe373e0800a5", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 20, "deletions": 42, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35151cd5f8b9f94eee7853a25ae65df04591651a/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35151cd5f8b9f94eee7853a25ae65df04591651a/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=35151cd5f8b9f94eee7853a25ae65df04591651a", "patch": "@@ -87,7 +87,7 @@ gfc_character_info gfc_character_kinds[MAX_CHARACTER_KINDS + 1];\n static GTY(()) tree gfc_character_types[MAX_CHARACTER_KINDS + 1];\n static GTY(()) tree gfc_pcharacter_types[MAX_CHARACTER_KINDS + 1];\n \n-static tree gfc_add_field_to_struct_1 (tree *, tree, tree, tree, tree **);\n+static tree gfc_add_field_to_struct_1 (tree, tree, tree, tree **);\n \n /* The integer kind to use for array indices.  This will be set to the\n    proper value based on target information from the backend.  */\n@@ -1234,7 +1234,7 @@ static tree\n gfc_get_desc_dim_type (void)\n {\n   tree type;\n-  tree fieldlist = NULL_TREE, decl, *chain = NULL;\n+  tree decl, *chain = NULL;\n \n   if (gfc_desc_dim_type)\n     return gfc_desc_dim_type;\n@@ -1246,24 +1246,22 @@ gfc_get_desc_dim_type (void)\n   TYPE_PACKED (type) = 1;\n \n   /* Consists of the stride, lbound and ubound members.  */\n-  decl = gfc_add_field_to_struct_1 (&fieldlist, type,\n+  decl = gfc_add_field_to_struct_1 (type,\n \t\t\t\t    get_identifier (\"stride\"),\n \t\t\t\t    gfc_array_index_type, &chain);\n   TREE_NO_WARNING (decl) = 1;\n \n-  decl = gfc_add_field_to_struct_1 (&fieldlist, type,\n+  decl = gfc_add_field_to_struct_1 (type,\n \t\t\t\t    get_identifier (\"lbound\"),\n \t\t\t\t    gfc_array_index_type, &chain);\n   TREE_NO_WARNING (decl) = 1;\n \n-  decl = gfc_add_field_to_struct_1 (&fieldlist, type,\n+  decl = gfc_add_field_to_struct_1 (type,\n \t\t\t\t    get_identifier (\"ubound\"),\n \t\t\t\t    gfc_array_index_type, &chain);\n   TREE_NO_WARNING (decl) = 1;\n \n   /* Finish off the type.  */\n-  TYPE_FIELDS (type) = fieldlist;\n-\n   gfc_finish_type (type);\n   TYPE_DECL_SUPPRESS_DEBUG (TYPE_STUB_DECL (type)) = 1;\n \n@@ -1535,7 +1533,7 @@ gfc_get_nodesc_array_type (tree etype, gfc_array_spec * as, gfc_packed packed,\n static tree\n gfc_get_array_descriptor_base (int dimen, int codimen, bool restricted)\n {\n-  tree fat_type, fieldlist = NULL_TREE, decl, arraytype, *chain = NULL;\n+  tree fat_type, decl, arraytype, *chain = NULL;\n   char name[16 + 2*GFC_RANK_DIGITS + 1 + 1];\n   int idx = 2 * (codimen + dimen - 1) + restricted;\n \n@@ -1550,20 +1548,20 @@ gfc_get_array_descriptor_base (int dimen, int codimen, bool restricted)\n   TYPE_NAME (fat_type) = get_identifier (name);\n \n   /* Add the data member as the first element of the descriptor.  */\n-  decl = gfc_add_field_to_struct_1 (&fieldlist, fat_type,\n+  decl = gfc_add_field_to_struct_1 (fat_type,\n \t\t\t\t    get_identifier (\"data\"),\n \t\t\t\t    (restricted\n \t\t\t\t     ? prvoid_type_node\n \t\t\t\t     : ptr_type_node), &chain);\n \n   /* Add the base component.  */\n-  decl = gfc_add_field_to_struct_1 (&fieldlist, fat_type,\n+  decl = gfc_add_field_to_struct_1 (fat_type,\n \t\t\t\t    get_identifier (\"offset\"),\n \t\t\t\t    gfc_array_index_type, &chain);\n   TREE_NO_WARNING (decl) = 1;\n \n   /* Add the dtype component.  */\n-  decl = gfc_add_field_to_struct_1 (&fieldlist, fat_type,\n+  decl = gfc_add_field_to_struct_1 (fat_type,\n \t\t\t\t    get_identifier (\"dtype\"),\n \t\t\t\t    gfc_array_index_type, &chain);\n   TREE_NO_WARNING (decl) = 1;\n@@ -1575,14 +1573,12 @@ gfc_get_array_descriptor_base (int dimen, int codimen, bool restricted)\n \t\t\t\t\tgfc_index_zero_node,\n \t\t\t\t\tgfc_rank_cst[codimen + dimen - 1]));\n \n-  decl = gfc_add_field_to_struct_1 (&fieldlist, fat_type,\n+  decl = gfc_add_field_to_struct_1 (fat_type,\n \t\t\t\t    get_identifier (\"dim\"),\n \t\t\t\t    arraytype, &chain);\n   TREE_NO_WARNING (decl) = 1;\n \n   /* Finish off the type.  */\n-  TYPE_FIELDS (fat_type) = fieldlist;\n-\n   gfc_finish_type (fat_type);\n   TYPE_DECL_SUPPRESS_DEBUG (TYPE_STUB_DECL (fat_type)) = 1;\n \n@@ -1843,20 +1839,19 @@ gfc_finish_type (tree type)\n \f\n /* Add a field of given NAME and TYPE to the context of a UNION_TYPE\n    or RECORD_TYPE pointed to by CONTEXT.  The new field is chained\n-   to the fieldlist pointed to by FIELDLIST through *CHAIN.\n+   to the end of the field list pointed to by *CHAIN.\n \n    Returns a pointer to the new field.  */\n \n static tree\n-gfc_add_field_to_struct_1 (tree *fieldlist, tree context,\n-\t\t\t\t tree name, tree type, tree **chain)\n+gfc_add_field_to_struct_1 (tree context, tree name, tree type, tree **chain)\n {\n   tree decl = build_decl (input_location, FIELD_DECL, name, type);\n \n   DECL_CONTEXT (decl) = context;\n   TREE_CHAIN (decl) = NULL_TREE;\n-  if (*fieldlist == NULL_TREE)\n-    *fieldlist = decl;\n+  if (TYPE_FIELDS (context) == NULL_TREE)\n+    TYPE_FIELDS (context) = decl;\n   if (chain != NULL)\n     {\n       if (*chain != NULL)\n@@ -1871,11 +1866,9 @@ gfc_add_field_to_struct_1 (tree *fieldlist, tree context,\n    information.  */\n \n tree\n-gfc_add_field_to_struct (tree *fieldlist, tree context,\n-\t\t\t tree name, tree type, tree **chain)\n+gfc_add_field_to_struct (tree context, tree name, tree type, tree **chain)\n {\n-  tree decl = gfc_add_field_to_struct_1 (fieldlist, context,\n-\t\t\t\t\t name, type, chain);\n+  tree decl = gfc_add_field_to_struct_1 (context, name, type, chain);\n \n   DECL_INITIAL (decl) = 0;\n   DECL_ALIGN (decl) = 0;\n@@ -1955,7 +1948,7 @@ gfc_get_ppc_type (gfc_component* c)\n tree\n gfc_get_derived_type (gfc_symbol * derived)\n {\n-  tree typenode = NULL, field = NULL, field_type = NULL, fieldlist = NULL;\n+  tree typenode = NULL, field = NULL, field_type = NULL;\n   tree canonical = NULL_TREE;\n   tree *chain = NULL;\n   bool got_canonical = false;\n@@ -1977,14 +1970,6 @@ gfc_get_derived_type (gfc_symbol * derived)\n       else\n \tderived->backend_decl = pfunc_type_node;\n \n-      /* Create a backend_decl for the __c_ptr_c_address field.  */\n-      derived->components->backend_decl =\n-\tgfc_add_field_to_struct (&(derived->backend_decl->type.values),\n-\t\t\t\t derived->backend_decl,\n-\t\t\t\t get_identifier (derived->components->name),\n-\t\t\t\t gfc_typenode_for_spec (\n-\t\t\t\t &(derived->components->ts)), NULL);\n-\n       derived->ts.kind = gfc_index_integer_kind;\n       derived->ts.type = BT_INTEGER;\n       /* Set the f90_type to BT_VOID as a way to recognize something of type\n@@ -2106,7 +2091,6 @@ gfc_get_derived_type (gfc_symbol * derived)\n \n   /* Build the type member list. Install the newly created RECORD_TYPE\n      node as DECL_CONTEXT of each FIELD_DECL.  */\n-  fieldlist = NULL_TREE;\n   for (c = derived->components; c; c = c->next)\n     {\n       if (c->attr.proc_pointer)\n@@ -2158,7 +2142,7 @@ gfc_get_derived_type (gfc_symbol * derived)\n \t  field_type = build_pointer_type_for_mode (TREE_TYPE (field_type),\n \t\t\t\t\t\t    ptr_mode, true);\n \n-      field = gfc_add_field_to_struct (&fieldlist, typenode,\n+      field = gfc_add_field_to_struct (typenode,\n \t\t\t\t       get_identifier (c->name),\n \t\t\t\t       field_type, &chain);\n       if (c->loc.lb)\n@@ -2173,9 +2157,7 @@ gfc_get_derived_type (gfc_symbol * derived)\n \tc->backend_decl = field;\n     }\n \n-  /* Now we have the final fieldlist.  Record it, then lay out the\n-     derived type, including the fields.  */\n-  TYPE_FIELDS (typenode) = fieldlist;\n+  /* Now lay out the derived type, including the fields.  */\n   if (canonical)\n     TYPE_CANONICAL (typenode) = canonical;\n \n@@ -2238,7 +2220,6 @@ static tree\n gfc_get_mixed_entry_union (gfc_namespace *ns)\n {\n   tree type;\n-  tree fieldlist;\n   tree *chain = NULL;\n   char name[GFC_MAX_SYMBOL_LEN + 1];\n   gfc_entry_list *el, *el2;\n@@ -2252,7 +2233,6 @@ gfc_get_mixed_entry_union (gfc_namespace *ns)\n   type = make_node (UNION_TYPE);\n \n   TYPE_NAME (type) = get_identifier (name);\n-  fieldlist = NULL;\n \n   for (el = ns->entries; el; el = el->next)\n     {\n@@ -2262,14 +2242,12 @@ gfc_get_mixed_entry_union (gfc_namespace *ns)\n \t  break;\n \n       if (el == el2)\n-\tgfc_add_field_to_struct_1 (&fieldlist, type,\n+\tgfc_add_field_to_struct_1 (type,\n \t\t\t\t   get_identifier (el->sym->result->name),\n \t\t\t\t   gfc_sym_type (el->sym->result), &chain);\n     }\n \n   /* Finish off the type.  */\n-  TYPE_FIELDS (type) = fieldlist;\n-\n   gfc_finish_type (type);\n   TYPE_DECL_SUPPRESS_DEBUG (TYPE_STUB_DECL (type)) = 1;\n   return type;"}, {"sha": "7e79480c4388d2d98f134f5ed275c0367716165e", "filename": "gcc/fortran/trans-types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35151cd5f8b9f94eee7853a25ae65df04591651a/gcc%2Ffortran%2Ftrans-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35151cd5f8b9f94eee7853a25ae65df04591651a/gcc%2Ffortran%2Ftrans-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.h?ref=35151cd5f8b9f94eee7853a25ae65df04591651a", "patch": "@@ -77,7 +77,7 @@ tree gfc_get_array_type_bounds (tree, int, int, tree *, tree *, int,\n tree gfc_get_nodesc_array_type (tree, gfc_array_spec *, gfc_packed, bool);\n \n /* Add a field of given name and type to a UNION_TYPE or RECORD_TYPE.  */\n-tree gfc_add_field_to_struct (tree *, tree, tree, tree, tree **);\n+tree gfc_add_field_to_struct (tree, tree, tree, tree **);\n \n /* Layout and output debugging info for a type.  */\n void gfc_finish_type (tree);"}]}