{"sha": "aa317c97cf2fc0170203d7667c8cd41798793e1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEzMTdjOTdjZjJmYzAxNzAyMDNkNzY2N2M4Y2Q0MTc5ODc5M2UxYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-09-19T02:58:24Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-09-19T02:58:24Z"}, "message": "alias.c (memory_modified_1): Deconstify.\n\n\t* alias.c (memory_modified_1): Deconstify.\n\t(memory_modified_in_insn_p): Don't use const_note_stores.\n\t* rtl.h (const_note_stores): Delete.\n\t* rtlanal.c (const_note_stores): Likewise.\n\nFrom-SVN: r128596", "tree": {"sha": "3d0567ca053f25a45c1c2c4020d91f2c5cace55d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d0567ca053f25a45c1c2c4020d91f2c5cace55d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa317c97cf2fc0170203d7667c8cd41798793e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa317c97cf2fc0170203d7667c8cd41798793e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa317c97cf2fc0170203d7667c8cd41798793e1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa317c97cf2fc0170203d7667c8cd41798793e1c/comments", "author": null, "committer": null, "parents": [{"sha": "19bfb9361e2db9c9e4a57043d9bed3f0e7df2ccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19bfb9361e2db9c9e4a57043d9bed3f0e7df2ccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19bfb9361e2db9c9e4a57043d9bed3f0e7df2ccb"}], "stats": {"total": 80, "additions": 39, "deletions": 41}, "files": [{"sha": "678601a586d325418498275b4e38e22e4ad19f1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa317c97cf2fc0170203d7667c8cd41798793e1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa317c97cf2fc0170203d7667c8cd41798793e1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa317c97cf2fc0170203d7667c8cd41798793e1c", "patch": "@@ -1,3 +1,10 @@\n+2007-09-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alias.c (memory_modified_1): Deconstify.\n+\t(memory_modified_in_insn_p): Don't use const_note_stores.\n+\t* rtl.h (const_note_stores): Delete.\n+\t* rtlanal.c (const_note_stores): Likewise.\n+\n 2007-09-18  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* dse.c (find_shift_sequence): Temporarily revert to forbidding"}, {"sha": "1ba1ce366d85521e76f40d8bd59d4508e78f7e48", "filename": "gcc/alias.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa317c97cf2fc0170203d7667c8cd41798793e1c/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa317c97cf2fc0170203d7667c8cd41798793e1c/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=aa317c97cf2fc0170203d7667c8cd41798793e1c", "patch": "@@ -167,7 +167,7 @@ static rtx adjust_offset_for_component_ref (tree, rtx);\n static int nonoverlapping_memrefs_p (const_rtx, const_rtx);\n static int write_dependence_p (const_rtx, const_rtx, int);\n \n-static void memory_modified_1 (const_rtx, const_rtx, const void *);\n+static void memory_modified_1 (rtx, const_rtx, void *);\n static void record_alias_subset (alias_set_type, alias_set_type);\n \n /* Set up all info needed to perform alias analysis on memory references.  */\n@@ -2356,7 +2356,7 @@ init_alias_target (void)\n    to be memory reference.  */\n static bool memory_modified;\n static void\n-memory_modified_1 (const_rtx x, const_rtx pat ATTRIBUTE_UNUSED, const void *data)\n+memory_modified_1 (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n {\n   if (MEM_P (x))\n     {\n@@ -2374,7 +2374,7 @@ memory_modified_in_insn_p (const_rtx mem, const_rtx insn)\n   if (!INSN_P (insn))\n     return false;\n   memory_modified = false;\n-  const_note_stores (PATTERN (insn), memory_modified_1, mem);\n+  note_stores (PATTERN (insn), memory_modified_1, CONST_CAST_RTX(mem));\n   return memory_modified;\n }\n "}, {"sha": "579f8cdb2cb42887404216f2d007c28d2661d18c", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa317c97cf2fc0170203d7667c8cd41798793e1c/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa317c97cf2fc0170203d7667c8cd41798793e1c/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=aa317c97cf2fc0170203d7667c8cd41798793e1c", "patch": "@@ -1723,7 +1723,6 @@ extern int refers_to_regno_p (unsigned int, unsigned int, const_rtx, rtx *);\n extern int reg_overlap_mentioned_p (const_rtx, const_rtx);\n extern const_rtx set_of (const_rtx, const_rtx);\n extern void note_stores (const_rtx, void (*) (rtx, const_rtx, void *), void *);\n-extern void const_note_stores (const_rtx, void (*) (const_rtx, const_rtx, const void *), const void *);\n extern void note_uses (rtx *, void (*) (rtx *, void *), void *);\n extern int dead_or_set_p (const_rtx, const_rtx);\n extern int dead_or_set_regno_p (const_rtx, unsigned int);"}, {"sha": "da1ceb4adbdf539e48b044893d21e01363bf3fc2", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 29, "deletions": 37, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa317c97cf2fc0170203d7667c8cd41798793e1c/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa317c97cf2fc0170203d7667c8cd41798793e1c/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=aa317c97cf2fc0170203d7667c8cd41798793e1c", "patch": "@@ -1412,49 +1412,41 @@ reg_overlap_mentioned_p (const_rtx x, const_rtx in)\n   If the item being stored in or clobbered is a SUBREG of a hard register,\n   the SUBREG will be passed.  */\n \n-#define NOTE_STORES_BODY(NOTE_STORES_FN) do { \\\n-  int i; \\\n-  if (GET_CODE (x) == COND_EXEC) \\\n-    x = COND_EXEC_CODE (x); \\\n-  if (GET_CODE (x) == SET || GET_CODE (x) == CLOBBER) \\\n-    { \\\n-      rtx dest = SET_DEST (x); \\\n-      while ((GET_CODE (dest) == SUBREG \\\n-\t      && (!REG_P (SUBREG_REG (dest)) \\\n-\t\t  || REGNO (SUBREG_REG (dest)) >= FIRST_PSEUDO_REGISTER)) \\\n-\t     || GET_CODE (dest) == ZERO_EXTRACT \\\n-\t     || GET_CODE (dest) == STRICT_LOW_PART) \\\n-\tdest = XEXP (dest, 0); \\\n-      /* If we have a PARALLEL, SET_DEST is a list of EXPR_LIST expressions, \\\n-\t each of whose first operand is a register.  */ \\\n-      if (GET_CODE (dest) == PARALLEL) \\\n-\t{ \\\n-\t  for (i = XVECLEN (dest, 0) - 1; i >= 0; i--) \\\n-\t    if (XEXP (XVECEXP (dest, 0, i), 0) != 0) \\\n-\t      (*fun) (XEXP (XVECEXP (dest, 0, i), 0), x, data); \\\n-\t} \\\n-      else \\\n-\t(*fun) (dest, x, data); \\\n-    } \\\n-  else if (GET_CODE (x) == PARALLEL) \\\n-    for (i = XVECLEN (x, 0) - 1; i >= 0; i--) \\\n-      NOTE_STORES_FN (XVECEXP (x, 0, i), fun, data); \\\n-} while (0)\n-\n void\n note_stores (const_rtx x, void (*fun) (rtx, const_rtx, void *), void *data)\n {\n-  NOTE_STORES_BODY(note_stores);\n-}\n+  int i;\n \n-void\n-const_note_stores (const_rtx x, void (*fun) (const_rtx, const_rtx, const void *), const void *data)\n-{\n-  NOTE_STORES_BODY(const_note_stores);\n-}\n+  if (GET_CODE (x) == COND_EXEC)\n+    x = COND_EXEC_CODE (x);\n \n-#undef NOTE_STORES_BODY\n+  if (GET_CODE (x) == SET || GET_CODE (x) == CLOBBER)\n+    {\n+      rtx dest = SET_DEST (x);\n+\n+      while ((GET_CODE (dest) == SUBREG\n+\t      && (!REG_P (SUBREG_REG (dest))\n+\t\t  || REGNO (SUBREG_REG (dest)) >= FIRST_PSEUDO_REGISTER))\n+\t     || GET_CODE (dest) == ZERO_EXTRACT\n+\t     || GET_CODE (dest) == STRICT_LOW_PART)\n+\tdest = XEXP (dest, 0);\n+\n+      /* If we have a PARALLEL, SET_DEST is a list of EXPR_LIST expressions,\n+\t each of whose first operand is a register.  */\n+      if (GET_CODE (dest) == PARALLEL)\n+\t{\n+\t  for (i = XVECLEN (dest, 0) - 1; i >= 0; i--)\n+\t    if (XEXP (XVECEXP (dest, 0, i), 0) != 0)\n+\t      (*fun) (XEXP (XVECEXP (dest, 0, i), 0), x, data);\n+\t}\n+      else\n+\t(*fun) (dest, x, data);\n+    }\n \n+  else if (GET_CODE (x) == PARALLEL)\n+    for (i = XVECLEN (x, 0) - 1; i >= 0; i--)\n+      note_stores (XVECEXP (x, 0, i), fun, data);\n+}\n \f\n /* Like notes_stores, but call FUN for each expression that is being\n    referenced in PBODY, a pointer to the PATTERN of an insn.  We only call"}]}