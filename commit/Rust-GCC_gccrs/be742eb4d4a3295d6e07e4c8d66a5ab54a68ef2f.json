{"sha": "be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU3NDJlYjRkNGEzMjk1ZDZlMDdlNGM4ZDY2YTVhYjU0YTY4ZWYyZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-03-19T14:11:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-03-19T14:11:05Z"}, "message": "re PR tree-optimization/84933 (ICE in set_value_range, at tree-vrp.c:288 since r257852)\n\n2018-03-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/84933\n\t* tree-vrp.c (set_and_canonicalize_value_range): Treat out-of-bound\n\tvalues as -INF/INF when canonicalizing an ANTI_RANGE to a RANGE.\n\n\t* g++.dg/pr84933.C: New testcase.\n\nFrom-SVN: r258646", "tree": {"sha": "479d5e4e7e3568816973b2874c62f0be5fb17883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/479d5e4e7e3568816973b2874c62f0be5fb17883"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68d93a19c4d764012d947ef7c0ab8abbb0d72775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d93a19c4d764012d947ef7c0ab8abbb0d72775", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68d93a19c4d764012d947ef7c0ab8abbb0d72775"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "bc6436748630f484c8c86575d5e0bd9b9420c7ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f", "patch": "@@ -1,3 +1,9 @@\n+2018-03-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/84933\n+\t* tree-vrp.c (set_and_canonicalize_value_range): Treat out-of-bound\n+\tvalues as -INF/INF when canonicalizing an ANTI_RANGE to a RANGE.\n+\n 2018-03-19  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/84859"}, {"sha": "5fbedb4e460ee9660e59e2438015c2a00c555ee6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f", "patch": "@@ -1,3 +1,8 @@\n+2018-03-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/84933\n+\t* g++.dg/pr84933.C: New testcase.\n+\n 2018-03-19  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/84859"}, {"sha": "cbfeb11ebf3e052883bafea7bd800f98e122f8dc", "filename": "gcc/testsuite/g++.dg/pr84933.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr84933.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr84933.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr84933.C?ref=be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fstrict-enums -fno-inline\" } */\n+\n+enum a {};\n+int *d;\n+int b, e, f;\n+a c, g;\n+class h {\n+    virtual unsigned i();\n+};\n+class j : h {\n+    unsigned i() {\n+\tfor (;;) {\n+\t    b = c <= 0;\n+\t    if (b)\n+\t      e = *d;\n+\t    b = g && c;\n+\t    if (b)\n+\t      f = *d;\n+\t}\n+    }\n+};\n+void k() { new j; }"}, {"sha": "aa53db655762ce33fd3afe423b0bc6e09a180f5b", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=be742eb4d4a3295d6e07e4c8d66a5ab54a68ef2f", "patch": "@@ -386,8 +386,13 @@ set_and_canonicalize_value_range (value_range *vr, enum value_range_type t,\n   /* Anti-ranges that can be represented as ranges should be so.  */\n   if (t == VR_ANTI_RANGE)\n     {\n-      bool is_min = vrp_val_is_min (min);\n-      bool is_max = vrp_val_is_max (max);\n+      /* For -fstrict-enums we may receive out-of-range ranges so consider\n+         values < -INF and values > INF as -INF/INF as well.  */\n+      tree type = TREE_TYPE (min);\n+      bool is_min = (INTEGRAL_TYPE_P (type)\n+\t\t     && tree_int_cst_compare (min, TYPE_MIN_VALUE (type)) <= 0);\n+      bool is_max = (INTEGRAL_TYPE_P (type)\n+\t\t     && tree_int_cst_compare (max, TYPE_MAX_VALUE (type)) >= 0);\n \n       if (is_min && is_max)\n \t{"}]}