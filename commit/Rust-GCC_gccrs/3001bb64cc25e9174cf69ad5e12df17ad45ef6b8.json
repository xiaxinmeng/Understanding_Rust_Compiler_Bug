{"sha": "3001bb64cc25e9174cf69ad5e12df17ad45ef6b8", "node_id": "C_kwDOANBUbNoAKDMwMDFiYjY0Y2MyNWU5MTc0Y2Y2OWFkNWUxMmRmMTdhZDQ1ZWY2Yjg", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-22T14:28:26Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-22T14:28:26Z"}, "message": "resolver: Refactor Rib class in a source file", "tree": {"sha": "07b79b4659b34f34dae6bd07e2fedbf794306444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07b79b4659b34f34dae6bd07e2fedbf794306444"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3001bb64cc25e9174cf69ad5e12df17ad45ef6b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3001bb64cc25e9174cf69ad5e12df17ad45ef6b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3001bb64cc25e9174cf69ad5e12df17ad45ef6b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3001bb64cc25e9174cf69ad5e12df17ad45ef6b8/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a936265bb0e6e042733c501db942615f2a64f705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a936265bb0e6e042733c501db942615f2a64f705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a936265bb0e6e042733c501db942615f2a64f705"}], "stats": {"total": 276, "additions": 144, "deletions": 132}, "files": [{"sha": "436d9c3d6c4eb32c6bf7da29ff7a4fdea270fb51", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3001bb64cc25e9174cf69ad5e12df17ad45ef6b8/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3001bb64cc25e9174cf69ad5e12df17ad45ef6b8/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=3001bb64cc25e9174cf69ad5e12df17ad45ef6b8", "patch": "@@ -85,6 +85,7 @@ GRS_OBJS = \\\n     rust/rust-ast-lower.o \\\n     rust/rust-ast-lower-base.o \\\n     rust/rust-ast-lower-pattern.o \\\n+    rust/rust-name-resolver.o \\\n     rust/rust-ast-resolve.o \\\n     rust/rust-ast-resolve-pattern.o \\\n     rust/rust-ast-resolve-expr.o \\"}, {"sha": "1ee7cd59bebc71e4a07df1290b378df489e2c0f8", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3001bb64cc25e9174cf69ad5e12df17ad45ef6b8/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3001bb64cc25e9174cf69ad5e12df17ad45ef6b8/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=3001bb64cc25e9174cf69ad5e12df17ad45ef6b8", "patch": "@@ -306,33 +306,33 @@ HIRCompileBase::compile_locals_for_block (Context *ctx, Resolver::Rib &rib,\n \t\t\t\t\t  tree fndecl)\n {\n   std::vector<Bvariable *> locals;\n-  rib.iterate_decls ([&] (NodeId n, Location) mutable -> bool {\n-    Resolver::Definition d;\n-    bool ok = ctx->get_resolver ()->lookup_definition (n, &d);\n-    rust_assert (ok);\n-\n-    HIR::Stmt *decl = nullptr;\n-    ok = ctx->get_mappings ()->resolve_nodeid_to_stmt (d.parent, &decl);\n-    rust_assert (ok);\n-\n-    // if its a function we extract this out side of this fn context\n-    // and it is not a local to this function\n-    bool is_item = ctx->get_mappings ()->lookup_hir_item (\n-\t\t     decl->get_mappings ().get_crate_num (),\n-\t\t     decl->get_mappings ().get_hirid ())\n-\t\t   != nullptr;\n-    if (is_item)\n-      {\n-\tHIR::Item *item = static_cast<HIR::Item *> (decl);\n-\tCompileItem::compile (item, ctx);\n-\treturn true;\n-      }\n-\n-    Bvariable *compiled = CompileVarDecl::compile (fndecl, decl, ctx);\n-    locals.push_back (compiled);\n+  for (auto it : rib.get_declarations ())\n+    {\n+      auto node_id = it.first;\n+\n+      Resolver::Definition d;\n+      bool ok = ctx->get_resolver ()->lookup_definition (node_id, &d);\n+      rust_assert (ok);\n+\n+      HIR::Stmt *decl = nullptr;\n+      ok = ctx->get_mappings ()->resolve_nodeid_to_stmt (d.parent, &decl);\n+      rust_assert (ok);\n+\n+      // if its a function we extract this out side of this fn context\n+      // and it is not a local to this function\n+      bool is_item = ctx->get_mappings ()->lookup_hir_item (\n+\t\t       decl->get_mappings ().get_crate_num (),\n+\t\t       decl->get_mappings ().get_hirid ())\n+\t\t     != nullptr;\n+      if (is_item)\n+\t{\n+\t  HIR::Item *item = static_cast<HIR::Item *> (decl);\n+\t  CompileItem::compile (item, ctx);\n+\t}\n \n-    return true;\n-  });\n+      Bvariable *compiled = CompileVarDecl::compile (fndecl, decl, ctx);\n+      locals.push_back (compiled);\n+    };\n \n   return locals;\n }"}, {"sha": "a80d64f1787a20bf1781499b8a5f18877749f8a3", "filename": "gcc/rust/resolve/rust-name-resolver.cc", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3001bb64cc25e9174cf69ad5e12df17ad45ef6b8/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3001bb64cc25e9174cf69ad5e12df17ad45ef6b8/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc?ref=3001bb64cc25e9174cf69ad5e12df17ad45ef6b8", "patch": "@@ -0,0 +1,108 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-name-resolver.h\"\n+\n+namespace Rust {\n+namespace Resolver {\n+\n+Rib::Rib (CrateNum crateNum, NodeId node_id)\n+  : crate_num (crateNum), node_id (node_id),\n+    mappings (Analysis::Mappings::get ())\n+{}\n+\n+void\n+Rib::insert_name (\n+  const CanonicalPath &path, NodeId id, Location locus, bool shadow,\n+  std::function<void (const CanonicalPath &, NodeId, Location)> dup_cb)\n+{\n+  auto it = path_mappings.find (path);\n+  bool path_already_exists = it != path_mappings.end ();\n+  if (path_already_exists && !shadow)\n+    {\n+      const auto &decl = decls_within_rib.find (it->second);\n+      if (decl != decls_within_rib.end ())\n+\tdup_cb (path, it->second, decl->second);\n+      else\n+\tdup_cb (path, it->second, locus);\n+\n+      return;\n+    }\n+\n+  path_mappings[path] = id;\n+  reverse_path_mappings.insert (std::pair<NodeId, CanonicalPath> (id, path));\n+  decls_within_rib.insert (std::pair<NodeId, Location> (id, locus));\n+  references[id] = {};\n+}\n+\n+bool\n+Rib::lookup_name (const CanonicalPath &ident, NodeId *id)\n+{\n+  auto it = path_mappings.find (ident);\n+  if (it == path_mappings.end ())\n+    return false;\n+\n+  *id = it->second;\n+  return true;\n+}\n+\n+void\n+Rib::clear_name (const CanonicalPath &ident, NodeId id)\n+{\n+  auto ii = path_mappings.find (ident);\n+  if (ii != path_mappings.end ())\n+    path_mappings.erase (ii);\n+\n+  auto ij = reverse_path_mappings.find (id);\n+  if (ij != reverse_path_mappings.end ())\n+    reverse_path_mappings.erase (ij);\n+\n+  auto ik = decls_within_rib.find (id);\n+  if (ik != decls_within_rib.end ())\n+    decls_within_rib.erase (ik);\n+}\n+\n+void\n+Rib::append_reference_for_def (NodeId def, NodeId ref)\n+{\n+  references[def].insert (ref);\n+}\n+\n+bool\n+Rib::have_references_for_node (NodeId def) const\n+{\n+  auto it = references.find (def);\n+  if (it == references.end ())\n+    return false;\n+\n+  return !it->second.empty ();\n+}\n+\n+bool\n+Rib::decl_was_declared_here (NodeId def) const\n+{\n+  for (auto &it : decls_within_rib)\n+    {\n+      if (it.first == def)\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n+} // namespace Resolver\n+} // namespace Rust"}, {"sha": "19ca5a9fd159857e63ce0724fff4f9695946c3c4", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 9, "deletions": 106, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3001bb64cc25e9174cf69ad5e12df17ad45ef6b8/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3001bb64cc25e9174cf69ad5e12df17ad45ef6b8/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=3001bb64cc25e9174cf69ad5e12df17ad45ef6b8", "patch": "@@ -32,120 +32,23 @@ class Rib\n public:\n   // Rust uses local_def_ids assigned by def_collector on the AST\n   // lets use NodeId instead\n-  Rib (CrateNum crateNum, NodeId node_id)\n-    : crate_num (crateNum), node_id (node_id),\n-      mappings (Analysis::Mappings::get ())\n-  {}\n-\n-  ~Rib () {}\n+  Rib (CrateNum crateNum, NodeId node_id);\n \n   // this takes the relative paths of items within a compilation unit for lookup\n   void insert_name (\n     const CanonicalPath &path, NodeId id, Location locus, bool shadow,\n-    std::function<void (const CanonicalPath &, NodeId, Location)> dup_cb)\n-  {\n-    auto it = path_mappings.find (path);\n-    bool path_already_exists = it != path_mappings.end ();\n-    if (path_already_exists && !shadow)\n-      {\n-\tconst auto &decl = decls_within_rib.find (it->second);\n-\tif (decl != decls_within_rib.end ())\n-\t  dup_cb (path, it->second, decl->second);\n-\telse\n-\t  dup_cb (path, it->second, locus);\n-\n-\treturn;\n-      }\n-\n-    path_mappings[path] = id;\n-    reverse_path_mappings.insert (std::pair<NodeId, CanonicalPath> (id, path));\n-    decls_within_rib.insert (std::pair<NodeId, Location> (id, locus));\n-    references[id] = {};\n-  }\n-\n-  bool lookup_name (const CanonicalPath &ident, NodeId *id)\n-  {\n-    auto it = path_mappings.find (ident);\n-    if (it == path_mappings.end ())\n-      return false;\n-\n-    *id = it->second;\n-    return true;\n-  }\n+    std::function<void (const CanonicalPath &, NodeId, Location)> dup_cb);\n \n-  bool lookup_canonical_path (const NodeId &id, CanonicalPath *ident)\n-  {\n-    auto it = reverse_path_mappings.find (id);\n-    if (it == reverse_path_mappings.end ())\n-      return false;\n-\n-    *ident = it->second;\n-    return true;\n-  }\n-\n-  void clear_name (const CanonicalPath &ident, NodeId id)\n-  {\n-    auto ii = path_mappings.find (ident);\n-    if (ii != path_mappings.end ())\n-      path_mappings.erase (ii);\n-\n-    auto ij = reverse_path_mappings.find (id);\n-    if (ij != reverse_path_mappings.end ())\n-      reverse_path_mappings.erase (ij);\n-\n-    auto ik = decls_within_rib.find (id);\n-    if (ik != decls_within_rib.end ())\n-      decls_within_rib.erase (ik);\n-  }\n+  bool lookup_canonical_path (const NodeId &id, CanonicalPath *ident);\n+  bool lookup_name (const CanonicalPath &ident, NodeId *id);\n+  void clear_name (const CanonicalPath &ident, NodeId id);\n+  void append_reference_for_def (NodeId def, NodeId ref);\n+  bool have_references_for_node (NodeId def) const;\n+  bool decl_was_declared_here (NodeId def) const;\n \n   CrateNum get_crate_num () const { return crate_num; }\n   NodeId get_node_id () const { return node_id; }\n-\n-  void iterate_decls (std::function<bool (NodeId, Location)> cb)\n-  {\n-    for (auto it : decls_within_rib)\n-      {\n-\tif (!cb (it.first, it.second))\n-\t  return;\n-      }\n-  }\n-\n-  void iterate_references_for_def (NodeId def, std::function<bool (NodeId)> cb)\n-  {\n-    auto it = references.find (def);\n-    if (it == references.end ())\n-      return;\n-\n-    for (auto ref : it->second)\n-      {\n-\tif (!cb (ref))\n-\t  return;\n-      }\n-  }\n-\n-  void append_reference_for_def (NodeId def, NodeId ref)\n-  {\n-    references[def].insert (ref);\n-  }\n-\n-  bool have_references_for_node (NodeId def) const\n-  {\n-    auto it = references.find (def);\n-    if (it == references.end ())\n-      return false;\n-\n-    return !it->second.empty ();\n-  }\n-\n-  bool decl_was_declared_here (NodeId def) const\n-  {\n-    for (auto &it : decls_within_rib)\n-      {\n-\tif (it.first == def)\n-\t  return true;\n-      }\n-    return false;\n-  }\n+  std::map<NodeId, Location> &get_declarations () { return decls_within_rib; }\n \n private:\n   CrateNum crate_num;"}]}