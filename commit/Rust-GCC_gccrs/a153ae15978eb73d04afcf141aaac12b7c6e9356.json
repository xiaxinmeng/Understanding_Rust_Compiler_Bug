{"sha": "a153ae15978eb73d04afcf141aaac12b7c6e9356", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE1M2FlMTU5NzhlYjczZDA0YWZjZjE0MWFhYWMxMmI3YzZlOTM1Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gnat.com", "date": "2001-10-08T14:06:05Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-10-08T14:06:05Z"}, "message": "misc.c (gnat_expand_expr, [...]): Consistently set MEM attributes from expression; fixes bootstrap failure on x86.\n\n\t* misc.c (gnat_expand_expr, case UNCHECKED_CONVERT_EXPR):\n\tConsistently set MEM attributes from expression; fixes\n\tbootstrap failure on x86.\n\nFrom-SVN: r46076", "tree": {"sha": "4fa0b38991939b9ab9b4b5ec29d8d7d854e8b6b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fa0b38991939b9ab9b4b5ec29d8d7d854e8b6b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a153ae15978eb73d04afcf141aaac12b7c6e9356", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a153ae15978eb73d04afcf141aaac12b7c6e9356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a153ae15978eb73d04afcf141aaac12b7c6e9356", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a153ae15978eb73d04afcf141aaac12b7c6e9356/comments", "author": null, "committer": null, "parents": [{"sha": "743f3c7bcfa4a3793a082ab5f01330b81ef08fff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/743f3c7bcfa4a3793a082ab5f01330b81ef08fff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/743f3c7bcfa4a3793a082ab5f01330b81ef08fff"}], "stats": {"total": 31, "additions": 11, "deletions": 20}, "files": [{"sha": "013a8f2b1711bc632057e27781e9775f55f4d871", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a153ae15978eb73d04afcf141aaac12b7c6e9356/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a153ae15978eb73d04afcf141aaac12b7c6e9356/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a153ae15978eb73d04afcf141aaac12b7c6e9356", "patch": "@@ -1,3 +1,9 @@\n+2001-10-08  Richard Kenner (kenner@gnat.com)\n+\n+\t* misc.c (gnat_expand_expr, case UNCHECKED_CONVERT_EXPR):\n+\tConsistently set MEM attributes from expression; fixes\n+\tbootstrap failure on x86.\n+\n 2001-10-08  Geert Bosch  (bosch@gnat.com)\n \n \t* 5oosinte.adb: Add 2001 to copyright notice."}, {"sha": "dbfe9e39b3410da8e9dcd731ad944f596ad33cc0", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a153ae15978eb73d04afcf141aaac12b7c6e9356/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a153ae15978eb73d04afcf141aaac12b7c6e9356/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=a153ae15978eb73d04afcf141aaac12b7c6e9356", "patch": "@@ -573,26 +573,11 @@ gnat_expand_expr (exp, target, tmode, modifier)\n       else if ((TYPE_MODE (type) == BLKmode\n \t\t|| TYPE_MODE (inner_type) == BLKmode)\n \t       && align_ok)\n-\t{\n-\t  new = build_unary_op (INDIRECT_REF, NULL_TREE,\n-\t\t\t\tconvert\n-\t\t\t\t(build_pointer_type (type),\n-\t\t\t\t build_unary_op (ADDR_EXPR, NULL_TREE,\n-\t\t\t\t\t\t TREE_OPERAND (exp, 0))));\n-\t  result = expand_expr (new, target, tmode, modifier);\n-\n-\t  if (GET_CODE (result) != MEM)\n-\t    gigi_abort (204);\n-\n-\t  /* Since this is really the underlying object, set the flags from\n-\t     the underlying type.\n-\n-\t     ??? Note that this is very dubious because it may change the\n-\t     attributes for a temporary location, which is not allowed.  */\n-\t  set_mem_alias_set (result, 0);\n-\t  set_mem_attributes (result, TREE_OPERAND (exp, 0), 0);\n-\t  return result;\n-\t}\n+\tnew = build_unary_op (INDIRECT_REF, NULL_TREE,\n+\t\t\t      convert\n+\t\t\t      (build_pointer_type (type),\n+\t\t\t       build_unary_op (ADDR_EXPR, NULL_TREE,\n+\t\t\t\t\t       TREE_OPERAND (exp, 0))));\n \n       /* Otherwise make a union of the two types, convert to the union, and\n \t extract the other value.  */"}]}