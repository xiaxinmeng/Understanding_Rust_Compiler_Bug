{"sha": "d754127f13abf5cb90e584ad4c6b6bf873597b5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc1NDEyN2YxM2FiZjVjYjkwZTU4NGFkNGM2YjZiZjg3MzU5N2I1Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@wasabisystems.com", "date": "2004-02-19T15:24:02Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2004-02-19T15:24:02Z"}, "message": "reload1.c (reload): Correct comment.\n\n\t* reload1.c (reload): Correct comment.\n\t(scan_paradoxical_subregs): Remove #if 0 and old comment.\n\t* doc/extend.texi (Local Reg Vars): Remove obsolete comment that\n\tregister variables are not used by reload.\n\nFrom-SVN: r78100", "tree": {"sha": "9fad95ec718c81cbb34aae67a9819f4583626c19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fad95ec718c81cbb34aae67a9819f4583626c19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d754127f13abf5cb90e584ad4c6b6bf873597b5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d754127f13abf5cb90e584ad4c6b6bf873597b5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d754127f13abf5cb90e584ad4c6b6bf873597b5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d754127f13abf5cb90e584ad4c6b6bf873597b5c/comments", "author": null, "committer": null, "parents": [{"sha": "78cb77c13e86cb36640cf57230e2211aaea0ef2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78cb77c13e86cb36640cf57230e2211aaea0ef2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78cb77c13e86cb36640cf57230e2211aaea0ef2f"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "6e1808bcb31777baad1b9392c0d5dd25078a5c0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d754127f13abf5cb90e584ad4c6b6bf873597b5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d754127f13abf5cb90e584ad4c6b6bf873597b5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d754127f13abf5cb90e584ad4c6b6bf873597b5c", "patch": "@@ -1,3 +1,10 @@\n+2004-02-19  Ian Lance Taylor  <ian@wasabisystems.com>\n+\n+\t* reload1.c (reload): Correct comment.\n+\t(scan_paradoxical_subregs): Remove #if 0 and old comment.\n+\t* doc/extend.texi (Local Reg Vars): Remove obsolete comment that\n+\tregister variables are not used by reload.\n+\n 2004-02-19  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR target/14209"}, {"sha": "13bd75f4e133a74ac4733d223ad9d2ff1114e111", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d754127f13abf5cb90e584ad4c6b6bf873597b5c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d754127f13abf5cb90e584ad4c6b6bf873597b5c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d754127f13abf5cb90e584ad4c6b6bf873597b5c", "patch": "@@ -4417,10 +4417,7 @@ example, some 68000 operating systems call this register @code{%a5}.\n \n Defining such a register variable does not reserve the register; it\n remains available for other uses in places where flow control determines\n-the variable's value is not live.  However, these registers are made\n-unavailable for use in the reload pass; excessive use of this feature\n-leaves the compiler too few available registers to compile certain\n-functions.\n+the variable's value is not live.\n \n This option does not guarantee that GCC will generate code that has\n this variable in the register you specify at all times.  You may not"}, {"sha": "b64abf1531b26ff46bfff7c1d6ef01808b89e7e1", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d754127f13abf5cb90e584ad4c6b6bf873597b5c/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d754127f13abf5cb90e584ad4c6b6bf873597b5c/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=d754127f13abf5cb90e584ad4c6b6bf873597b5c", "patch": "@@ -707,10 +707,9 @@ reload (rtx first, int global)\n \n   CLEAR_HARD_REG_SET (bad_spill_regs_global);\n \n-  /* Look for REG_EQUIV notes; record what each pseudo is equivalent to.\n-     Also find all paradoxical subregs and find largest such for each pseudo.\n-     On machines with small register classes, record hard registers that\n-     are used for user variables.  These can never be used for spills.  */\n+  /* Look for REG_EQUIV notes; record what each pseudo is equivalent\n+     to.  Also find all paradoxical subregs and find largest such for\n+     each pseudo.  */\n \n   num_eliminable_invariants = 0;\n   for (insn = first; insn; insn = NEXT_INSN (insn))\n@@ -3713,9 +3712,7 @@ finish_spills (int global)\n   return something_changed;\n }\n \f\n-/* Find all paradoxical subregs within X and update reg_max_ref_width.\n-   Also mark any hard registers used to store user variables as\n-   forbidden from being used for spill registers.  */\n+/* Find all paradoxical subregs within X and update reg_max_ref_width.  */\n \n static void\n scan_paradoxical_subregs (rtx x)\n@@ -3727,13 +3724,6 @@ scan_paradoxical_subregs (rtx x)\n   switch (code)\n     {\n     case REG:\n-#if 0\n-      if (SMALL_REGISTER_CLASSES && REGNO (x) < FIRST_PSEUDO_REGISTER\n-\t  && REG_USERVAR_P (x))\n-\tSET_HARD_REG_BIT (bad_spill_regs_global, REGNO (x));\n-#endif\n-      return;\n-\n     case CONST_INT:\n     case CONST:\n     case SYMBOL_REF:"}]}