{"sha": "b2ca370228811541d31d023ffd1280f5a819d8f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJjYTM3MDIyODgxMTU0MWQzMWQwMjNmZmQxMjgwZjVhODE5ZDhmMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-08-06T02:03:29Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-08-06T02:03:29Z"}, "message": "tree.c (handle_dll_attribute): Move here from i383/winnt.c.\n\n\t* tree.c (handle_dll_attribute): Move here from i383/winnt.c.\n\tReplace use of DECL_INLINE with DECL_DECLARED_INLINE_P.  Set\n\tDECL_VISIBLITY.  Test TARGET_DLLIMPORT_DECL_ATTRIBUTES with #if.\n\t* tree.h (handle_dll_attribute): Declare.  Test\n\tTARGET_DLLIMPORT_DECL_ATTRIBUTES with #if.\n\t* c-common.h (c_determine_visibility): Declare.\n\t* c-common.c (c_determine_visibility): New function.\n\t* c-decl.c (finish_decl): Use it.\n\t(finish_function): Likewise.\n\t* defaults.h (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define it to\n\tzero, by default.  Use #if, not\t#ifdef, to test it.\n\t* config/arm/arm.c (arm_attribute_table): Use\n\thandle_dll_attribute.  Test TARGET_DLLIMPORT_DECL_ATTRIBUTES with\n\t#if.\n\t* config/arm/pe.h (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define to 1.\n\t* config/i386/cygming.h (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define\n\tto 1.\n\t* config/i386/i386-protos.h (ix86_handle_dll_attribute): Remove.\n\t* config/i386/i386.c (ix86_attribute_table): Use\n\thandle_dll_attribute for dllimport/dllexport.  Test\n\tTARGET_DLLIMPORT_DECL_ATTRIBUTES with #if.\n\t* config/i386/winnt.c (ix86_handle_dll_attribute): Remove.\n\t* config/mcore/mcore.h (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define\n\tit to 1.\n\t* config/mcore/mcore.c (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Test it\n\twith #if.\n\t* config/sh/symbian-pre.h (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define\n\tit to 1.\n\t* doc/extend.texi (dllexport): Clarify and correct documentation.\n\t(dllimport): Likewise.\n\t* doc/tm.texi (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Mention\n\thandle_dll_attribute.\n\n\t* decl.c (start_preparsed_function): Move determine_visibility\n\tcall.\n\t* decl2.c (determine_visibility): Incorporate dllexport testing.\n\n\t* g++.dg/ext/visibility/assign1.C: Use scan-hidden and\n\tdg-require-visiblity.\n\t* g++.dg/ext/visibility/fvisibility-inlines-hidden.C: Likewise.\n\t* g++.dg/ext/visibility/fvisibility.C: Likewise.\n\t* g++.dg/ext/visibility/memfuncts.C: Likewise.\n\t* g++.dg/ext/visibility/new1.C: Likewise.\n\t* g++.dg/ext/visibility/pragma.C: Likewise.\n\t* g++.dg/ext/visibility/staticmemfuncts.C: Likewise.\n\t* g++.dg/ext/visibility/virtual.C: Likewise.\n\t* g++/dg/ext/visibility/visibility-1.C: Likewise.\n\t* g++/dg/ext/visibility/visibility-2.C: Likewise.\n\t* g++/dg/ext/visibility/visibility-3.C: Likewise.\n\t* g++/dg/ext/visibility/visibility-4.C: Likewise.\n\t* g++/dg/ext/visibility/visibility-5.C: Likewise.\n\t* g++/dg/ext/visibility/visibility-6.C: Likewise.\n\t* g++/dg/ext/visibility/visibility-7.C: Likewise.\n\t* g++/dg/ext/visibility/visibility-8.C: New test.\n\t* gcc.c-torture/compile/dll.x: Remove.\n\t* gcc.dg/dll-2.c: Use dg-require-dll\n\t* gcc.dg/visibility-10.c: New test.\n\t* lib/gcc-dg.exp (dg-require-dll): Add Symbian to list of targets\n\tsupporting DLLs.\n\t* testsuite/lib/scanasm.exp (scan_hidden): New function.\n\t(scan_not_hidden): Likewise.\n\nFrom-SVN: r85621", "tree": {"sha": "69d71a8f79d4ab453d9ed298e91ba4813f6f9760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69d71a8f79d4ab453d9ed298e91ba4813f6f9760"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2ca370228811541d31d023ffd1280f5a819d8f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2ca370228811541d31d023ffd1280f5a819d8f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2ca370228811541d31d023ffd1280f5a819d8f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2ca370228811541d31d023ffd1280f5a819d8f2/comments", "author": null, "committer": null, "parents": [{"sha": "01e054665da8e46a14bb326cee073e48ee0366ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e054665da8e46a14bb326cee073e48ee0366ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01e054665da8e46a14bb326cee073e48ee0366ef"}], "stats": {"total": 604, "additions": 410, "deletions": 194}, "files": [{"sha": "d7d4abd4ff730ad9887105ff2ff2c1bbedd2b4cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1,3 +1,38 @@\n+2004-08-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* tree.c (handle_dll_attribute): Move here from i383/winnt.c.\n+\tReplace use of DECL_INLINE with DECL_DECLARED_INLINE_P.  Set\n+\tDECL_VISIBLITY.  Test TARGET_DLLIMPORT_DECL_ATTRIBUTES with #if.\n+\t* tree.h (handle_dll_attribute): Declare.  Test\n+\tTARGET_DLLIMPORT_DECL_ATTRIBUTES with #if.\n+\t* c-common.h (c_determine_visibility): Declare.\n+\t* c-common.c (c_determine_visibility): New function.\n+\t* c-decl.c (finish_decl): Use it.\n+\t(finish_function): Likewise.\n+\t* defaults.h (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define it to\n+\tzero, by default.  Use #if, not\t#ifdef, to test it.\n+\t* config/arm/arm.c (arm_attribute_table): Use\n+\thandle_dll_attribute.  Test TARGET_DLLIMPORT_DECL_ATTRIBUTES with\n+\t#if.\n+\t* config/arm/pe.h (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define to 1.\n+\t* config/i386/cygming.h (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define\n+\tto 1.\n+\t* config/i386/i386-protos.h (ix86_handle_dll_attribute): Remove.\n+\t* config/i386/i386.c (ix86_attribute_table): Use\n+\thandle_dll_attribute for dllimport/dllexport.  Test\n+\tTARGET_DLLIMPORT_DECL_ATTRIBUTES with #if.\n+\t* config/i386/winnt.c (ix86_handle_dll_attribute): Remove.\n+\t* config/mcore/mcore.h (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define\n+\tit to 1.\n+\t* config/mcore/mcore.c (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Test it\n+\twith #if.\n+\t* config/sh/symbian-pre.h (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define\n+\tit to 1.\n+\t* doc/extend.texi (dllexport): Clarify and correct documentation.\n+\t(dllimport): Likewise.\n+\t* doc/tm.texi (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Mention\n+\thandle_dll_attribute.\n+\t\n 2004-08-05  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* tree-ssa-loop-manip.c: New file.\n@@ -184,7 +219,7 @@\n \t* defaults.h (TARGET_DECLSPEC): New macro.\n \t* c-cppbuiltin.c (c_cpp_builtins): Handle TARGET_DECLSPEC.\n \t* config/arm/pe.h (SUBTARGET_CPP_SPEC): Remove __declspec support.\n-\t* config/arm/symbian. (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define.\n+\t* config/arm/symbian.h (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define.\n \t* config/i386/beof-elf.h (TARGET_OS_CPP_BUILTINS): Remove\n \t__declspec support.\n \t(TARGET_DECLSPEC): Define."}, {"sha": "c3dc4ea6359ce357481aaa5c21636c4d3c9cd36d", "filename": "gcc/c-common.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -4600,6 +4600,42 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n   return NULL_TREE;\n }\n \n+/* Determine the ELF symbol visibility for DECL, which is either a\n+   variable or a function.  It is an error to use this function if a\n+   definition of DECL is not available in this translation unit.\n+   Returns true if the final visibility has been determined by this\n+   function; false if the caller is free to make additional\n+   modifications.  */\n+\n+bool\n+c_determine_visibility (tree decl)\n+{\n+  my_friendly_assert (TREE_CODE (decl) == VAR_DECL\n+\t\t      || TREE_CODE (decl) == FUNCTION_DECL, \n+\t\t      20040805);\n+\n+  /* If the user explicitly specified the visibility with an\n+     attribute, honor that.  DECL_VISIBILITY will have been set during\n+     the processing of the attribute.  We check for an explicit\n+     attribute, rather than just checking DECL_VISIBILITY_SPECIFIED,\n+     to distinguish the use of an attribute from the use of a \"#pragma\n+     GCC visibility push(...)\"; in the latter case we still want other\n+     considerations to be able to overrule the #pragma.  */\n+  if (lookup_attribute (\"visibility\", DECL_ATTRIBUTES (decl)))\n+    return true;\n+\n+  /* Anything that is exported must have default visibility.  */\n+  if (TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+      && lookup_attribute (\"dllexport\", DECL_ATTRIBUTES (decl)))\n+    {\n+      DECL_VISIBILITY (decl) = VISIBILITY_DEFAULT;\n+      DECL_VISIBILITY_SPECIFIED (decl) = 1;\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n /* Handle an \"tls_model\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "e8d245c88b1407357eff7dd199d0f9a7874dbdfe", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -654,6 +654,7 @@ extern void constant_expression_warning (tree);\n extern tree convert_and_check (tree, tree);\n extern void overflow_warning (tree);\n extern void unsigned_conversion_warning (tree, tree);\n+extern bool c_determine_visibility (tree);\n \n #define c_sizeof(T)  c_sizeof_or_alignof_type (T, SIZEOF_EXPR, 1)\n #define c_alignof(T) c_sizeof_or_alignof_type (T, ALIGNOF_EXPR, 1)"}, {"sha": "c03c1262f3b5553548a4ac42a5c6db77296a7c10", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -3000,6 +3000,12 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n   if (current_scope == file_scope)\n     maybe_apply_pragma_weak (decl);\n \n+  /* If this is a variable definition, determine its ELF visibility.  */\n+  if (TREE_CODE (decl) == VAR_DECL \n+      && TREE_STATIC (decl) \n+      && !DECL_EXTERNAL (decl))\n+    c_determine_visibility (decl);\n+\n   /* Output the assembler code and/or RTL code for variables and functions,\n      unless the type is an undefined structure or union.\n      If not, it will get done when the type is completed.  */\n@@ -6347,6 +6353,9 @@ finish_function (void)\n       && !targetm.have_ctors_dtors)\n     static_dtors = tree_cons (NULL_TREE, fndecl, static_dtors);\n \n+  /* Finalize the ELF visibility for the function.  */\n+  c_determine_visibility (fndecl);\n+\n   /* Genericize before inlining.  Delay genericizing nested functions\n      until their parent function is genericized.  Since finalizing\n      requires GENERIC, delay that as well.  */"}, {"sha": "882824aa4ee72d4d64a4408ecb3226fe2bb47544", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -172,7 +172,7 @@ static bool arm_cxx_cdtor_returns_this (void);\n \n \f\n /* Initialize the GCC target structure.  */\n-#ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+#if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n #undef  TARGET_MERGE_DECL_ATTRIBUTES\n #define TARGET_MERGE_DECL_ATTRIBUTES merge_dllimport_decl_attributes\n #endif\n@@ -2466,6 +2466,9 @@ const struct attribute_spec arm_attribute_table[] =\n   { \"dllimport\",    0, 0, true,  false, false, NULL },\n   { \"dllexport\",    0, 0, true,  false, false, NULL },\n   { \"interfacearm\", 0, 0, true,  false, false, arm_handle_fndecl_attribute },\n+#elif TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+  { \"dllimport\",    0, 0, false, false, false, handle_dll_attribute },\n+  { \"dllexport\",    0, 0, false, false, false, handle_dll_attribute },\n #endif\n   { NULL,           0, 0, false, false, false, NULL }\n };"}, {"sha": "34e9457d7ce4a51e539e7245cf081feacf95eae7", "filename": "gcc/config/arm/pe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Farm%2Fpe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Farm%2Fpe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.h?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -40,7 +40,7 @@\n \n /* Get tree.c to declare a target-specific specialization of\n    merge_decl_attributes.  */\n-#define TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+#define TARGET_DLLIMPORT_DECL_ATTRIBUTES 1\n \n #undef  SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"-D__pe__\""}, {"sha": "bc690f74d4b89e8859a6d95e015a3a35b1f83fc3", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -93,7 +93,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Get tree.c to declare a target-specific specialization of\n    merge_decl_attributes.  */\n-#define TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+#define TARGET_DLLIMPORT_DECL_ATTRIBUTES 1\n \n /* This macro defines names of additional specifications to put in the specs\n    that can be used in various specifications like CC1_SPEC.  Its definition"}, {"sha": "4559abc26573883b241a957d928f2ed164a9fb2d", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -205,7 +205,6 @@ extern int ix86_return_pops_args (tree, tree, int);\n extern int ix86_data_alignment (tree, int);\n extern int ix86_local_alignment (tree, int);\n extern int ix86_constant_alignment (tree, int);\n-extern tree ix86_handle_dll_attribute (tree *, tree, tree, int, bool *);\n extern tree ix86_handle_shared_attribute (tree *, tree, tree, int, bool *);\n \n extern unsigned int i386_pe_section_type_flags (tree, const char *, int);"}, {"sha": "22de6e362172bb835099338b676548426a5b38d9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -977,7 +977,7 @@ static void init_ext_80387_constants (void);\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE ix86_attribute_table\n-#ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+#if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n #  undef TARGET_MERGE_DECL_ATTRIBUTES\n #  define TARGET_MERGE_DECL_ATTRIBUTES merge_dllimport_decl_attributes\n #endif\n@@ -1609,9 +1609,9 @@ const struct attribute_spec ix86_attribute_table[] =\n   /* Regparm attribute specifies how many integer arguments are to be\n      passed in registers.  */\n   { \"regparm\",   1, 1, false, true,  true,  ix86_handle_regparm_attribute },\n-#ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n-  { \"dllimport\", 0, 0, false, false, false, ix86_handle_dll_attribute },\n-  { \"dllexport\", 0, 0, false, false, false, ix86_handle_dll_attribute },\n+#if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+  { \"dllimport\", 0, 0, false, false, false, handle_dll_attribute },\n+  { \"dllexport\", 0, 0, false, false, false, handle_dll_attribute },\n   { \"shared\",    0, 0, true,  false, false, ix86_handle_shared_attribute },\n #endif\n   { \"ms_struct\", 0, 0, false, false,  false, ix86_handle_struct_attribute },"}, {"sha": "08e7864371e14d8523f4b68b2088a19e3cea7f01", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -63,80 +63,6 @@ static void i386_pe_mark_dllimport (tree);\n #define DLL_EXPORT_PREFIX \"#e.\"\n #endif\n \n-/* Handle a \"dllimport\" or \"dllexport\" attribute;\n-   arguments as in struct attribute_spec.handler.  */\n-tree\n-ix86_handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n-\t\t\t   bool *no_add_attrs)\n-{\n-  tree node = *pnode;\n-\n-  /* These attributes may apply to structure and union types being created,\n-     but otherwise should pass to the declaration involved.  */\n-  if (!DECL_P (node))\n-    {\n-      if (flags & ((int) ATTR_FLAG_DECL_NEXT | (int) ATTR_FLAG_FUNCTION_NEXT\n-\t\t   | (int) ATTR_FLAG_ARRAY_NEXT))\n-\t{\n-\t  *no_add_attrs = true;\n-\t  return tree_cons (name, args, NULL_TREE);\n-\t}\n-      if (TREE_CODE (node) != RECORD_TYPE && TREE_CODE (node) != UNION_TYPE)\n-\t{\n-\t  warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n-\t  *no_add_attrs = true;\n-\t}\n-\n-      return NULL_TREE;\n-    }\n-\n-  /* Report error on dllimport ambiguities seen now before they cause\n-     any damage.  */\n-  else if (is_attribute_p (\"dllimport\", name))\n-    {\n-      /* Like MS, treat definition of dllimported variables and\n-\t non-inlined functions on declaration as syntax errors.\n-\t We allow the attribute for function definitions if declared\n-\t inline, but just ignore it in i386_pe_dllimport_p.  */\n-      if (TREE_CODE (node) == FUNCTION_DECL  && DECL_INITIAL (node)\n-          && !DECL_INLINE (node))\n-\t{\n-\t  error (\"%Jfunction `%D' definition is marked dllimport.\", node, node);\n-\t  *no_add_attrs = true;\n-\t}\n-\n-      else if (TREE_CODE (node) == VAR_DECL)\n-\t{\n-\t  if (DECL_INITIAL (node))\n-\t    {\n-\t      error (\"%Jvariable `%D' definition is marked dllimport.\",\n-\t\t     node, node);\n-\t      *no_add_attrs = true;\n-\t    }\n-\n-\t  /* `extern' needn't be specified with dllimport.\n-\t     Specify `extern' now and hope for the best.  Sigh.  */\n-\t  DECL_EXTERNAL (node) = 1;\n-\t  /* Also, implicitly give dllimport'd variables declared within\n-\t     a function global scope, unless declared static.  */\n-\t  if (current_function_decl != NULL_TREE && !TREE_STATIC (node))\n-\t    TREE_PUBLIC (node) = 1;\n-\t}\n-    }\n-\n-  /*  Report error if symbol is not accessible at global scope.  */\n-  if (!TREE_PUBLIC (node)\n-      && (TREE_CODE (node) == VAR_DECL\n-\t  || TREE_CODE (node) == FUNCTION_DECL))\n-    {\n-      error (\"%Jexternal linkage required for symbol '%D' because of \"\n-\t     \"'%s' attribute.\", node, node, IDENTIFIER_POINTER (name));\n-      *no_add_attrs = true;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Handle a \"shared\" attribute;\n    arguments as in struct attribute_spec.handler.  */\n tree"}, {"sha": "69e05c89c17f85048b37ce31fef648d4286bc9cc", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -156,7 +156,7 @@ static bool       mcore_return_in_memory\t(tree, tree);\n #undef  TARGET_ASM_EXTERNAL_LIBCALL\n #define TARGET_ASM_EXTERNAL_LIBCALL\tmcore_external_libcall\n \n-#ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+#if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n #undef  TARGET_MERGE_DECL_ATTRIBUTES\n #define TARGET_MERGE_DECL_ATTRIBUTES\tmerge_dllimport_decl_attributes\n #endif"}, {"sha": "4e299e66c2194e699dcb331f1198316486d69c2a", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -33,7 +33,7 @@\n \n /* Get tree.c to declare a target-specific specialization of\n    merge_decl_attributes.  */\n-#define TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+#define TARGET_DLLIMPORT_DECL_ATTRIBUTES 1\n \n #define TARGET_CPU_CPP_BUILTINS()\t\t\t\t\t  \\\n   do\t\t\t\t\t\t\t\t\t  \\"}, {"sha": "53e2d92a1df5ca7b8d9656c4169572971308a821", "filename": "gcc/config/sh/symbian-pre.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Fsh%2Fsymbian-pre.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fconfig%2Fsh%2Fsymbian-pre.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsymbian-pre.h?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -30,7 +30,7 @@\n #define SUBTARGET_CPP_SPEC \"\"\n \n /* Get tree.c to declare merge_dllimport_decl_attributes().  */\n-#define TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+#define TARGET_DLLIMPORT_DECL_ATTRIBUTES 1\n \n /* The Symbian OS currently does not support exception handling.  */\n #define SUBTARGET_CC1PLUS_SPEC \"-fno-exceptions\""}, {"sha": "fda326ff20963f717c3269c36a6e7e96e299b1e1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1,3 +1,9 @@\n+2004-08-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (start_preparsed_function): Move determine_visibility\n+\tcall.\n+\t* decl2.c (determine_visibility): Incorporate dllexport testing.\n+\n 2004-08-05  Geoffrey Keating  <geoffk@apple.com>\n \n \t* g++spec.c (lang_specific_driver): An -Xlinker or -Wl, option"}, {"sha": "1d5b78c12a009f5616cce699c4caafc3f22dd347", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -9629,9 +9629,6 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n       && lookup_attribute (\"noinline\", attrs))\n     warning (\"%Jinline function '%D' given attribute noinline\", decl1, decl1);\n \n-  /* Determine the ELF visibility attribute for the function.  */\n-  determine_visibility (decl1);\n-\n   if (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (decl1))\n     /* This is a constructor, we must ensure that any default args\n        introduced by this definition are propagated to the clones\n@@ -9769,6 +9766,12 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n       fntype = TREE_TYPE (decl1);\n     }\n \n+  /* Determine the ELF visibility attribute for the function.  We must\n+     not do this before calling \"pushdecl\", as we must allow\n+     \"duplicate_decls\" to merge any attributes appropriately.  */\n+  if (!DECL_CLONED_FUNCTION_P (decl1))\n+    determine_visibility (decl1);\n+\n   /* Reset these in case the call to pushdecl changed them.  */\n   current_function_decl = decl1;\n   cfun->decl = decl1;"}, {"sha": "ae4ccc871e9a2268c4b2dc75acf006e000b31486", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1611,7 +1611,8 @@ maybe_emit_vtables (tree ctype)\n   return true;\n }\n \n-/* Determine the ELF symbol visibility for DECL.  */\n+/* Like c_determine_visibility, but with additional C++-specific\n+   behavior.  */\n \n void\n determine_visibility (tree decl)\n@@ -1621,9 +1622,14 @@ determine_visibility (tree decl)\n   /* Cloned constructors and destructors get the same visibility as\n      the underlying function.  That should be set up in\n      maybe_clone_body.  */\n-  if (DECL_CLONED_FUNCTION_P (decl))\n+  my_friendly_assert (!DECL_CLONED_FUNCTION_P (decl), 20040804);\n+\n+  /* Give the common code a chance to make a determination.  */\n+  if (c_determine_visibility (decl))\n     return;\n \n+  /* If DECL is a member of a class, visibility specifiers on the\n+     class can influence the visibility of the DECL.  */\n   if (DECL_CLASS_SCOPE_P (decl))\n     class_type = DECL_CONTEXT (decl);\n   else if (TREE_CODE (decl) == VAR_DECL\n@@ -1643,11 +1649,16 @@ determine_visibility (tree decl)\n \n   /* By default, static data members and function members receive\n      the visibility of their containing class.  */\n-  if (class_type\n-      && (TREE_CODE (decl) == VAR_DECL \n-\t  || TREE_CODE (decl) == FUNCTION_DECL)\n-      && !lookup_attribute (\"visibility\", DECL_ATTRIBUTES (decl)))\n+  if (class_type)\n     {\n+      if (TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+\t  && lookup_attribute (\"dllexport\", TYPE_ATTRIBUTES (class_type)))\n+\t{\n+\t  DECL_VISIBILITY (decl) = VISIBILITY_DEFAULT;\n+\t  DECL_VISIBILITY_SPECIFIED (decl) = 1;\n+\t  return;\n+\t}\n+\n       if (TREE_CODE (decl) == FUNCTION_DECL\n \t  && DECL_DECLARED_INLINE_P (decl)\n \t  && visibility_options.inlines_hidden)"}, {"sha": "a1e5300a006a730b5c15da534521649bedcfa9aa", "filename": "gcc/defaults.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -415,8 +415,12 @@ do { fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), FILE); \\\n #define PIC_OFFSET_TABLE_REGNUM INVALID_REGNUM\n #endif\n \n+#ifndef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+#define TARGET_DLLIMPORT_DECL_ATTRIBUTES 0\n+#endif\n+\n #ifndef TARGET_DECLSPEC\n-#ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+#if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n /* If the target supports the \"dllimport\" attribute, users are\n    probably used to the \"__declspec\" syntax.  */\n #define TARGET_DECLSPEC 1"}, {"sha": "f563893317e12c50e97afdddf1b98478e20e70dc", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 46, "deletions": 41, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1610,40 +1610,49 @@ types (@pxref{Variable Attributes}, @pxref{Type Attributes}.)\n \n @item dllexport\n @cindex @code{__declspec(dllexport)}\n-On Microsoft Windows targets and Symbian targets the @code{dllexport}\n-attribute causes the compiler to provide a global pointer to a pointer\n-in a dll, so that it can be referenced with the @code{dllimport}\n-attribute. The pointer name is formed by combining @code{_imp__} and\n-the function or variable name.\n+On Microsoft Windows targets and Symbian OS targets the\n+@code{dllexport} attribute causes the compiler to provide a global\n+pointer to a pointer in a DLL, so that it can be referenced with the\n+@code{dllimport} attribute.  On Microsoft Windows targets, the pointer\n+name is formed by combining @code{_imp__} and the function or variable\n+name.\n+\n+You can use @code{__declspec(dllexport)} as a synonym for\n+@code{__attribute__ ((dllexport))} for compatibility with other\n+compilers.\n+\n+On systems that support the @code{visibility} attribute, this\n+attribute also implies ``default'' visibility, unless a\n+@code{visibility} attribute is explicitly specified.  You should avoid\n+the use of @code{dllexport} with ``hidden'' or ``internal''\n+visibility; in the future GCC may issue an error for those cases.\n \n-Currently, the @code{dllexport}attribute is ignored for inlined\n-functions, but export can be forced by using the\n-@option{-fkeep-inline-functions} flag. The attribute is also ignored for\n-undefined symbols.\n+Currently, the @code{dllexport} attribute is ignored for inlined\n+functions, unless the @option{-fkeep-inline-functions} flag has been\n+used.  The attribute is also ignored for undefined symbols.\n \n When applied to C++ classes. the attribute marks defined non-inlined\n member functions and static data members as exports. Static consts\n initialized in-class are not marked unless they are also defined\n out-of-class.\n \n-On cygwin, mingw, arm-pe and sh-symbianelf targets,\n-@code{__declspec(dllexport)} is recognized as a synonym for\n-@code{__attribute__ ((dllexport))} for compatibility with other\n-Microsoft Windows and Symbian compilers. \n-\n For Microsoft Windows targets there are alternative methods for\n-including the symbol in the dll's export table such as using a\n+including the symbol in the DLL's export table such as using a\n @file{.def} file with an @code{EXPORTS} section or, with GNU ld, using\n the @option{--export-all} linker flag.\n \n @item dllimport\n @cindex @code{__declspec(dllimport)}\n-On Microsoft Windows and Symbian targets, the @code{dllimport}\n+On Microsoft Windows and Symbian OS targets, the @code{dllimport}\n attribute causes the compiler to reference a function or variable via\n-a global pointer to a pointer that is set up by the Microsoft Windows\n-dll library. The pointer name is formed by combining @code{_imp__} and\n-the function or variable name. The attribute implies @code{extern}\n-storage.\n+a global pointer to a pointer that is set up by the DLL exporting the\n+symbol. The attribute implies @code{extern} storage.  On Microsoft\n+Windows targets, the pointer name is formed by combining @code{_imp__}\n+and the function or variable name.\n+\n+You can use @code{__declspec(dllimport)} as a synonym for\n+@code{__attribute__ ((dllimport))} for compatibility with other\n+compilers.\n \n Currently, the attribute is ignored for inlined functions. If the\n attribute is applied to a symbol @emph{definition}, an error is reported.\n@@ -1657,31 +1666,27 @@ member functions and static data members as imports.  However, the\n attribute is ignored for virtual methods to allow creation of vtables\n using thunks.\n \n-For Symbian targets the @code{dllimport} attribute also has another\n-affect - it can cause the vtable and run-time type information for a\n-class to be exported.  This happens when the class has a dllimport'ed\n-constructor or a non-inline, non-pure virtual function and, for either\n-of those two conditions, the class also has a inline constructor or\n-destructor and has a key function that is defined in the current\n-translation unit.\n-\n-On cygwin, mingw, arm-pe sh-symbianelf targets,\n-@code{__declspec(dllimport)} is recognized as a synonym for\n-@code{__attribute__ ((dllimport))} for compatibility with other\n-Microsoft Windows and Symbian compilers. \n+On the SH Symbian OS target the @code{dllimport} attribute also has\n+another affect - it can cause the vtable and run-time type information\n+for a class to be exported.  This happens when the class has a\n+dllimport'ed constructor or a non-inline, non-pure virtual function\n+and, for either of those two conditions, the class also has a inline\n+constructor or destructor and has a key function that is defined in\n+the current translation unit.\n \n For Microsoft Windows based targets the use of the @code{dllimport}\n attribute on functions is not necessary, but provides a small\n-performance benefit by eliminating a thunk in the dll. The use of the\n+performance benefit by eliminating a thunk in the DLL. The use of the\n @code{dllimport} attribute on imported variables was required on older\n-versions of GNU ld, but can now be avoided by passing the\n-@option{--enable-auto-import} switch to ld. As with functions, using\n-the attribute for a variable eliminates a thunk in the dll.\n-\n-One drawback to using this attribute is that a pointer to a function or\n-variable marked as dllimport cannot be used as a constant address. The\n-attribute can be disabled for functions by setting the\n-@option{-mnop-fun-dllimport} flag.\n+versions of the GNU linker, but can now be avoided by passing the\n+@option{--enable-auto-import} switch to the GNU linker. As with\n+functions, using the attribute for a variable eliminates a thunk in\n+the DLL.\n+\n+One drawback to using this attribute is that a pointer to a function\n+or variable marked as @code{dllimport} cannot be used as a constant\n+address.  On Microsoft Windows targets, the attribute can be disabled\n+for functions by setting the @option{-mnop-fun-dllimport} flag.\n \n @item eightbit_data\n @cindex eight bit data on the H8/300, H8/300H, and H8S"}, {"sha": "a250742098c1a8eb8fdd991db9ca669c7317b1ec", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -8338,12 +8338,16 @@ attribute is nullified by a subsequent definition.  This function may\n call @code{merge_attributes} to handle machine-independent merging.\n \n @findex TARGET_DLLIMPORT_DECL_ATTRIBUTES\n-If the only target-specific handling you require is @samp{dllimport} for\n-Microsoft Windows targets, you should define the macro\n-@code{TARGET_DLLIMPORT_DECL_ATTRIBUTES}.  This links in a function\n-called @code{merge_dllimport_decl_attributes} which can then be defined\n-as the expansion of @code{TARGET_MERGE_DECL_ATTRIBUTES}.  This is done\n-in @file{i386/cygwin.h} and @file{i386/i386.c}, for example.\n+If the only target-specific handling you require is @samp{dllimport}\n+for Microsoft Windows targets, you should define the macro\n+@code{TARGET_DLLIMPORT_DECL_ATTRIBUTES} to @code{1}.  The compiler\n+will then define a function called\n+@code{merge_dllimport_decl_attributes} which can then be defined as\n+the expansion of @code{TARGET_MERGE_DECL_ATTRIBUTES}.  You can also\n+add @code{handle_dll_attribute} in the attribute table for your port\n+to perform initial processing of the @samp{dllimport} and\n+@samp{dllexport} attributes.  This is done in @file{i386/cygwin.h} and\n+@file{i386/i386.c}, for example.\n @end deftypefn\n \n @defmac TARGET_DECLSPEC"}, {"sha": "a04b598e47bb0e3f322951b187f087fcaea5c02b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1,3 +1,30 @@\n+2004-08-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/ext/visibility/assign1.C: Use scan-hidden and\n+\tdg-require-visiblity.\n+\t* g++.dg/ext/visibility/fvisibility-inlines-hidden.C: Likewise.\n+\t* g++.dg/ext/visibility/fvisibility.C: Likewise.\n+\t* g++.dg/ext/visibility/memfuncts.C: Likewise.\n+\t* g++.dg/ext/visibility/new1.C: Likewise.\n+\t* g++.dg/ext/visibility/pragma.C: Likewise.\n+\t* g++.dg/ext/visibility/staticmemfuncts.C: Likewise.\n+\t* g++.dg/ext/visibility/virtual.C: Likewise.\n+\t* g++/dg/ext/visibility/visibility-1.C: Likewise.\n+\t* g++/dg/ext/visibility/visibility-2.C: Likewise.\n+\t* g++/dg/ext/visibility/visibility-3.C: Likewise.\n+\t* g++/dg/ext/visibility/visibility-4.C: Likewise.\n+\t* g++/dg/ext/visibility/visibility-5.C: Likewise.\n+\t* g++/dg/ext/visibility/visibility-6.C: Likewise.\n+\t* g++/dg/ext/visibility/visibility-7.C: Likewise.\n+\t* g++/dg/ext/visibility/visibility-8.C: New test.\n+\t* gcc.c-torture/compile/dll.x: Remove.\n+\t* gcc.dg/dll-2.c: Use dg-require-dll\n+\t* gcc.dg/visibility-10.c: New test.\n+\t* lib/gcc-dg.exp (dg-require-dll): Add Symbian to list of targets\n+\tsupporting DLLs.\n+\t* testsuite/lib/scanasm.exp (scan_hidden): New function.\n+\t(scan_not_hidden): Likewise.\n+\n 2004-08-05  David Edelsohn  <edelsohn@gnu.org>\n \n \t* gcc.dg/sh4a-fprun.c: Fix dg-do typo."}, {"sha": "cbd909ee1910a8d5cdd1dd46f96ee34de776bec0", "filename": "gcc/testsuite/g++.dg/ext/visibility/assign1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fassign1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fassign1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fassign1.C?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-visibility \"\" } */\n-/* { dg-final { scan-assembler \"\\\\.hidden.*_ZN1DaSERKS_\" } } */\n+/* { dg-final { scan-hidden \"_ZN1DaSERKS_\" } } */\n \n struct B {\n   B& operator=(const B&);"}, {"sha": "2ee8f0767babbd6d02e0d5c8230baf4b17fcafb5", "filename": "gcc/testsuite/g++.dg/ext/visibility/fvisibility-inlines-hidden.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-inlines-hidden.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-inlines-hidden.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-inlines-hidden.C?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -2,7 +2,7 @@\n /* { dg-do compile } */\n /* { dg-require-visibility \"\" } */\n /* { dg-options \"-fvisibility-inlines-hidden\" } */\n-/* { dg-final { scan-assembler \"\\\\.hidden.*Foo.methodEv\" } } */\n+/* { dg-final { scan-hidden \"_ZN3Foo6methodEv\" } } */\n \n class Foo\n {"}, {"sha": "4358d25a960f29bcc37c2a8b3bb7b1cdd6162ef9", "filename": "gcc/testsuite/g++.dg/ext/visibility/fvisibility.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility.C?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -2,7 +2,7 @@\n /* { dg-do compile } */\n /* { dg-require-visibility \"\" } */\n /* { dg-options \"-fvisibility=hidden\" } */\n-/* { dg-final { scan-assembler \"\\\\.hidden.*Foo.methodEv\" } } */\n+/* { dg-final { scan-hidden \"_ZN3Foo6methodEv\" } } */\n \n class Foo\n {"}, {"sha": "45eb641b29e75065590dd6911eb8ff4194f613be", "filename": "gcc/testsuite/g++.dg/ext/visibility/memfuncts.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fmemfuncts.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fmemfuncts.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fmemfuncts.C?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1,7 +1,7 @@\n /* Test that setting visibility for class member functions works. */\n /* { dg-do compile } */\n /* { dg-require-visibility \"\" } */\n-/* { dg-final { scan-assembler \"\\\\.hidden.*Foo.methodEv\" } } */\n+/* { dg-final { scan-hidden \"_ZN3Foo6methodEv\" } } */\n \n class __attribute__ ((visibility (\"hidden\"))) Foo\n {"}, {"sha": "ec201cbc20d01c05d119eb7000c06d14fca1dfb0", "filename": "gcc/testsuite/g++.dg/ext/visibility/new1.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fnew1.C?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1,7 +1,6 @@\n-// { dg-require-visibility }\n-// { dg-do compile }\n+// { dg-require-visibility \"\" }\n // { dg-options \"-fvisibility=hidden\" }\n-// { dg-final { scan-assembler-not \"\\\\.hidden\\[^\\n\\]*_Znwj\" } }\n+// { dg-final { scan-not-hidden \"_Znwj\" } }\n \n void f() {\n   new int;"}, {"sha": "98384c9c42ae7615c024e14457ba97d2142d7a03", "filename": "gcc/testsuite/g++.dg/ext/visibility/pragma.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fpragma.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fpragma.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fpragma.C?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1,7 +1,7 @@\n /* Test that #pragma GCC visibility affects class members. */\n /* { dg-do compile } */\n /* { dg-require-visibility \"\" } */\n-/* { dg-final { scan-assembler \"\\\\.hidden.*Foo.methodEv\" } } */\n+/* { dg-final { scan-hidden \"_ZN3Foo6methodEv\" } } */\n \n #pragma GCC visibility push(hidden)\n class Foo"}, {"sha": "e745caa5a74545794fae040be5cfa8b2f97ac1e8", "filename": "gcc/testsuite/g++.dg/ext/visibility/staticmemfuncts.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fstaticmemfuncts.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fstaticmemfuncts.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fstaticmemfuncts.C?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1,7 +1,7 @@\n /* Test that setting visibility for static class member functions works. */\n /* { dg-do compile } */\n /* { dg-require-visibility \"\" } */\n-/* { dg-final { scan-assembler \"\\\\.hidden.*Foo.methodEv\" } } */\n+/* { dg-final { scan-hidden \"_ZN3Foo6methodEv\" } } */\n \n class __attribute__ ((visibility (\"hidden\"))) Foo\n {"}, {"sha": "746c489d0b19607c4fe7287bdb200938d0d19cef", "filename": "gcc/testsuite/g++.dg/ext/visibility/virtual.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvirtual.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvirtual.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvirtual.C?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1,7 +1,7 @@\n /* Test that setting visibility for class affects virtual table. */\n /* { dg-do compile } */\n /* { dg-require-visibility \"\" } */\n-/* { dg-final { scan-assembler \"\\\\.hidden.*ZTV3Foo\" } } */\n+/* { dg-final { scan-hidden \"ZTV3Foo\" } } */\n \n class __attribute__ ((visibility (\"hidden\"))) Foo\n {"}, {"sha": "8ea270bf8c09a70e5ee4852dcee28ebaafa10144", "filename": "gcc/testsuite/g++.dg/ext/visibility/visibility-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-1.C?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1,6 +1,6 @@\n /* Test visibility attribute on function definition. */\n-/* { dg-do compile { target *86-*-linux* } } */\n-/* { dg-final { scan-assembler \"\\\\.hidden.*_Z3foov\" } } */\n+/* { dg-require-visibility \"\" }\n+/* { dg-final { scan-hidden \"_Z3foov\" } } */\n \n void\n __attribute__((visibility (\"hidden\")))"}, {"sha": "26272abb1f9026fff55841ce5f3d8bdacb8d10d8", "filename": "gcc/testsuite/g++.dg/ext/visibility/visibility-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-2.C?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1,6 +1,6 @@\n /* Test that visibility attribute on declaration extends to definition. */\n-/* { dg-do compile { target *86-*-linux* } } */\n-/* { dg-final { scan-assembler \"\\\\.hidden.*_Z3foov\" } } */\n+/* { dg-require-visibility \"\" }\n+/* { dg-final { scan-hidden \"_Z3foov\" } } */\n \n void __attribute__((visibility (\"hidden\"))) foo();\n "}, {"sha": "e4f499fccb011e26e688f0c80a35a7ad86f330ac", "filename": "gcc/testsuite/g++.dg/ext/visibility/visibility-3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-3.C?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1,6 +1,6 @@\n /* Test visibility attribute on forward declaration of global variable */\n-/* { dg-do compile { target *86-*-linux* } } */\n-/* { dg-final { scan-assembler \"\\\\.hidden.*xyzzy\" } } */\n+/* { dg-require-visibility \"\" }\n+/* { dg-final { scan-hidden \"xyzzy\" } } */\n \n int\n __attribute__((visibility (\"hidden\")))"}, {"sha": "f6765958709412a07c01a87f9511e1483e533423", "filename": "gcc/testsuite/g++.dg/ext/visibility/visibility-4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-4.C?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1,6 +1,6 @@\n /* Test visibility attribute on forward declaration of global variable */\n-/* { dg-do compile { target *86-*-linux* } } */\n-/* { dg-final { scan-assembler \"\\\\.hidden.*xyzzy\" } } */\n+/* { dg-require-visibility \"\" }\n+/* { dg-final { scan-hidden \"xyzzy\" } } */\n \n extern int __attribute__ ((visibility (\"hidden\")))\n xyzzy;"}, {"sha": "592529e665d6f65d323ed12060566e340639c255", "filename": "gcc/testsuite/g++.dg/ext/visibility/visibility-5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-5.C?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1,7 +1,7 @@\n /* Test visibility attribute on definition of a function that has\n    already had a forward declaration. */\n-/* { dg-do compile { target *86-*-linux* } } */\n-/* { dg-final { scan-assembler \"\\\\.hidden.*_Z3foov\" } } */\n+/* { dg-require-visibility \"\" }\n+/* { dg-final { scan-hidden \"_Z3foov\" } } */\n \n void foo();\n "}, {"sha": "0fecf6b74e92738b89baeb42351b89e9a3ad30d2", "filename": "gcc/testsuite/g++.dg/ext/visibility/visibility-6.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-6.C?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1,7 +1,7 @@\n /* Test visibility attribute on definition of global variable that has\n    already had a forward declaration. */\n-/* { dg-do compile { target *86-*-linux* } } */\n-/* { dg-final { scan-assembler \"\\\\.hidden.*xyzzy\" } } */\n+/* { dg-require-visibility \"\" }\n+/* { dg-final { scan-hidden \"xyzzy\" } } */\n \n extern int xyzzy;\n "}, {"sha": "dbd7010d0288f820c03db7c04ee2e4f3727efc1a", "filename": "gcc/testsuite/g++.dg/ext/visibility/visibility-7.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-7.C?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -1,6 +1,6 @@\n /* Test warning from conflicting visibility specifications. */\n-/* { dg-do compile { target *86-*-linux* } } */\n-/* { dg-final { scan-assembler \"\\\\.hidden.*xyzzy\" } } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-final { scan-hidden \"xyzzy\" } } */\n \n extern int \n __attribute__((visibility (\"hidden\")))"}, {"sha": "f648726397570d345dbd1e40f752f10cc3152b3c", "filename": "gcc/testsuite/g++.dg/ext/visibility/visibility-8.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fvisibility-8.C?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -0,0 +1,45 @@\n+// Test that a definition marked with dllexport has default\n+// visibility.\n+// { dg-require-visibility \"\" }\n+// { dg-require-dll \"\" }\n+// { dg-options \"-fvisibility=hidden\" }\n+// { dg-final { scan-not-hidden \"_ZN1A1fEv\" } }\n+// { dg-final { scan-not-hidden \"_Z1gv\" } }\n+// { dg-final { scan-not-hidden \"_Z1hv\" } }\n+// { dg-final { scan-not-hidden \"_ZN1B1iEv\" } }\n+// { dg-final { scan-not-hidden \"_ZN1B1jEv\" } }\n+// { dg-final { scan-not-hidden \"_ZN1A1a\" } }\n+// { dg-final { scan-not-hidden \"_ZN1B1b\" } }\n+// { dg-final { scan-not-hidden \"k\" } }\n+// { dg-final { scan-not-hidden \"l\" } }\n+\n+struct __declspec(dllexport) A {\n+  void f();\n+  static int a;\n+};\n+\n+void A::f() {}\n+\n+int A::a;\n+\n+__declspec(dllexport) void g() {}\n+\n+__declspec(dllexport) void h();\n+void h() {}\n+\n+struct B {\n+  void i();\n+  __declspec(dllexport) void j();\n+  __declspec(dllexport) static int b;\n+};\n+\n+__declspec(dllexport) void B::i() {}\n+\n+void B::j() {}\n+\n+int B::b;\n+\n+__declspec(dllexport) int k;\n+\n+__declspec(dllexport) extern int l;\n+int l;"}, {"sha": "63a1e180e2c3d4fff9402da92d318cbbbd02152f", "filename": "gcc/testsuite/gcc.c-torture/compile/dll.x", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e054665da8e46a14bb326cee073e48ee0366ef/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fdll.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e054665da8e46a14bb326cee073e48ee0366ef/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fdll.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fdll.x?ref=01e054665da8e46a14bb326cee073e48ee0366ef", "patch": "@@ -1,20 +0,0 @@\n-# This test examines the attribute support for DLLs.\n-# Only COFF/PE formats support DLLs, (plus, as a special case\n-# the mcore-elf toolchain), so the code here tries to determine\n-# the file format and decide whether the test should be marked\n-# as unsupported.\n-\n-set torture_eval_before_compile {\n-\n-    if ![istarget \"mcore-*-elf\"] {\n-       \n-        set objformat [gcc_target_object_format]\n-    \n-        if { $objformat != \"pe\" } {\n-            unsupported \"dll.c\"\n-            return 1\n-        }\n-    }\n-}\n-\n-return 0"}, {"sha": "00c683a728ca8dbca0d9f5c522f93ef8a8cf8ed3", "filename": "gcc/testsuite/gcc.dg/dll-2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-2.c?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -8,9 +8,7 @@\n    In C, it's ok to redeclare a variable so this works for variables\n    and functions.  In C++, it only works for functions.  */\n \n-/* { dg-do compile { target arm*-*-pe* } } */\n-/* { dg-do compile { target i?86-pc-cygwin } } */\n-/* { dg-do compile { target i?86-pc-mingw* } } */\n+/* { dg-require-dll } */\n \n __declspec (dllimport) int foo1 ();\n __declspec (dllexport) int foo1 ();"}, {"sha": "d86ce1b1a30890da95458b81d63b313d5a0ef33a", "filename": "gcc/testsuite/gcc.dg/visibility-10.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-10.c?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -0,0 +1,19 @@\n+/* Test that a definition marked with dllexport has default\n+   visibility.  */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-require-dll \"\" } */\n+/* { dg-options \"-fvisibility=hidden\" } */\n+/* { dg-final { scan-not-hidden \"g\" } } */\n+/* { dg-final { scan-not-hidden \"h\" } } */\n+/* { dg-final { scan-not-hidden \"k\" } } */\n+/* { dg-final { scan-not-hidden \"l\" } } */\n+\n+__declspec(dllexport) void g() {}\n+\n+__declspec(dllexport) void h();\n+void h() {}\n+\n+__declspec(dllexport) int k;\n+\n+__declspec(dllexport) extern int l;\n+int l;"}, {"sha": "3f2d9aa701e5a67775a37ac7e4702ff8bdb39b6d", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -338,8 +338,10 @@ proc dg-require-profiling { args } {\n \n proc dg-require-dll { args } {\n     global target_triplet\n-    # As a special case, the mcore-*-elf supports dllimport/dllexport.\n-    if { [string match \"mcore-*-elf\" $target_triplet] } {\n+    # As a special case, the mcore-*-elf supports these attributes.\n+    # All Symbian OS targets also support these attributes.\n+    if { [string match \"mcore-*-elf\" $target_triplet]\n+         || [string match \"*-*-symbianelf\" $target_triplet]} {\n \treturn\n     }\n     # PE/COFF targets support dllimport/dllexport."}, {"sha": "9116afc1c41913b6fa16689777f35294cb171d59", "filename": "gcc/testsuite/lib/scanasm.exp", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanasm.exp?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -79,6 +79,32 @@ proc scan-assembler-not { args } {\n     dg-scan \"scan-assembler-not\" 0 $testcase $output_file $args\n }\n \n+# Check that a symbol is defined as a hidden symbol in the .s file\n+# produced by the compiler.\n+\n+proc scan-hidden { args } {\n+    upvar 2 name testcase\n+    set output_file \"[file rootname [file tail $testcase]].s\"\n+\n+    set symbol [lindex $args 0]\n+    set args [lreplace $args 0 0 \"hidden\\[ \\t_\\]*$symbol\"]\n+\n+    dg-scan \"scan-hidden\" 1 $testcase $output_file $args\n+}\n+\n+# Check that a symbol is not defined as a hidden symbol in the .s file\n+# produced by the compiler.\n+\n+proc scan-not-hidden { args } {\n+    upvar 2 name testcase\n+    set output_file \"[file rootname [file tail $testcase]].s\"\n+\n+    set symbol [lindex $args 0]\n+    set args [lreplace $args 0 0 \"hidden\\[ \\t_\\]*$symbol\"]\n+\n+    dg-scan \"scan-not-hidden\" 0 $testcase $output_file $args\n+}\n+\n # Look for a pattern in OUTPUT_FILE.  See dg-scan for details.\n \n proc scan-file { output_file args } {"}, {"sha": "c8153b8f535c99d2593dcf05516dcecf40349f33", "filename": "gcc/tree.c", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -2887,7 +2887,7 @@ merge_decl_attributes (tree olddecl, tree newdecl)\n \t\t\t   DECL_ATTRIBUTES (newdecl));\n }\n \n-#ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+#if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n \n /* Specialization of merge_decl_attributes for various Windows targets.\n \n@@ -2940,6 +2940,81 @@ merge_dllimport_decl_attributes (tree old, tree new)\n   return a;\n }\n \n+/* Handle a \"dllimport\" or \"dllexport\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+tree\n+handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n+\t\t      bool *no_add_attrs)\n+{\n+  tree node = *pnode;\n+\n+  /* These attributes may apply to structure and union types being created,\n+     but otherwise should pass to the declaration involved.  */\n+  if (!DECL_P (node))\n+    {\n+      if (flags & ((int) ATTR_FLAG_DECL_NEXT | (int) ATTR_FLAG_FUNCTION_NEXT\n+\t\t   | (int) ATTR_FLAG_ARRAY_NEXT))\n+\t{\n+\t  *no_add_attrs = true;\n+\t  return tree_cons (name, args, NULL_TREE);\n+\t}\n+      if (TREE_CODE (node) != RECORD_TYPE && TREE_CODE (node) != UNION_TYPE)\n+\t{\n+\t  warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+\t  *no_add_attrs = true;\n+\t}\n+\n+      return NULL_TREE;\n+    }\n+\n+  /* Report error on dllimport ambiguities seen now before they cause\n+     any damage.  */\n+  if (is_attribute_p (\"dllimport\", name))\n+    {\n+      /* Like MS, treat definition of dllimported variables and\n+\t non-inlined functions on declaration as syntax errors.  We\n+\t allow the attribute for function definitions if declared\n+\t inline.  */\n+      if (TREE_CODE (node) == FUNCTION_DECL  && DECL_INITIAL (node)\n+          && !DECL_DECLARED_INLINE_P (node))\n+\t{\n+\t  error (\"%Jfunction `%D' definition is marked dllimport.\", node, node);\n+\t  *no_add_attrs = true;\n+\t}\n+\n+      else if (TREE_CODE (node) == VAR_DECL)\n+\t{\n+\t  if (DECL_INITIAL (node))\n+\t    {\n+\t      error (\"%Jvariable `%D' definition is marked dllimport.\",\n+\t\t     node, node);\n+\t      *no_add_attrs = true;\n+\t    }\n+\n+\t  /* `extern' needn't be specified with dllimport.\n+\t     Specify `extern' now and hope for the best.  Sigh.  */\n+\t  DECL_EXTERNAL (node) = 1;\n+\t  /* Also, implicitly give dllimport'd variables declared within\n+\t     a function global scope, unless declared static.  */\n+\t  if (current_function_decl != NULL_TREE && !TREE_STATIC (node))\n+\t    TREE_PUBLIC (node) = 1;\n+\t}\n+    }\n+\n+  /*  Report error if symbol is not accessible at global scope.  */\n+  if (!TREE_PUBLIC (node)\n+      && (TREE_CODE (node) == VAR_DECL\n+\t  || TREE_CODE (node) == FUNCTION_DECL))\n+    {\n+      error (\"%Jexternal linkage required for symbol '%D' because of \"\n+\t     \"'%s' attribute.\", node, node, IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n #endif /* TARGET_DLLIMPORT_DECL_ATTRIBUTES  */\n \f\n /* Set the type qualifiers for TYPE to TYPE_QUALS, which is a bitmask"}, {"sha": "8bd1219240b4c2db006fd66c52bed6d618a2cd5f", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ca370228811541d31d023ffd1280f5a819d8f2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b2ca370228811541d31d023ffd1280f5a819d8f2", "patch": "@@ -2894,10 +2894,13 @@ extern tree lookup_attribute (const char *, tree);\n \n extern tree merge_attributes (tree, tree);\n \n-#ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+#if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n /* Given two Windows decl attributes lists, possibly including\n    dllimport, return a list of their union .  */\n extern tree merge_dllimport_decl_attributes (tree, tree);\n+\n+/* Handle a \"dllimport\" or \"dllexport\" attribute.  */\n+extern tree handle_dll_attribute (tree *, tree, tree, int, bool *);\n #endif\n \n /* Check whether CAND is suitable to be returned from get_qualified_type"}]}