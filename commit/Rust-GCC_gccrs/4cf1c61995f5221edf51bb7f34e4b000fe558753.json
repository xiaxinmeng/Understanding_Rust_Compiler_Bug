{"sha": "4cf1c61995f5221edf51bb7f34e4b000fe558753", "node_id": "C_kwDOANBUbNoAKDRjZjFjNjE5OTVmNTIyMWVkZjUxYmI3ZjM0ZTRiMDAwZmU1NTg3NTM", "commit": {"author": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2022-11-07T02:33:45Z"}, "committer": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2022-11-07T03:18:15Z"}, "message": "Support Intel RAO-INT\n\ngcc/ChangeLog:\n\n\t* common/config/i386/cpuinfo.h (get_available_features):\n\tDetect raoint.\n\t* common/config/i386/i386-common.cc (OPTION_MASK_ISA2_RAOINT_SET,\n\tOPTION_MASK_ISA2_RAOINT_UNSET): New.\n\t(ix86_handle_option): Handle -mraoint.\n\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n\tAdd FEATURE_RAOINT.\n\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY for\n\traoint.\n\t* config.gcc: Add raointintrin.h\n\t* config/i386/cpuid.h (bit_RAOINT): New.\n\t* config/i386/i386-builtin.def (BDESC): Add new builtins.\n\t* config/i386/i386-c.cc (ix86_target_macros_internal): Define\n\t__RAOINT__.\n\t* config/i386/i386-isa.def (RAOINT): Add DEF_PTA(RAOINT).\n\t* config/i386/i386-options.cc (ix86_valid_target_attribute_inner_p):\n\tAdd -mraoint.\n\t* config/i386/sync.md (rao_a<raointop><mode>): New define insn.\n\t* config/i386/i386.opt: Add option -mraoint.\n\t* config/i386/x86gprintrin.h: Include raointintrin.h.\n\t* doc/extend.texi: Document raoint.\n\t* doc/invoke.texi: Document -mraoint.\n\t* doc/sourcebuild.texi: Document target raoint.\n\t* config/i386/raointintrin.h: New file.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/other/i386-2.C: Add -mraoint.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n\t* gcc.target/i386/sse-12.c: Add -mraoint.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Add raoint target.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* lib/target-supports.exp: Add check_effective_target_raoint.\n\t* gcc.target/i386/rao-helper.h: New test.\n\t* gcc.target/i386/raoint-1.c: Ditto.\n\t* gcc.target/i386/raoint-aadd-2.c: Ditto.\n\t* gcc.target/i386/raoint-aand-2.c: Ditto.\n\t* gcc.target/i386/raoint-aor-2.c: Ditto.\n\t* gcc.target/i386/raoint-axor-2.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-1.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-2.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-3.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-4.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-5.c: Ditto.", "tree": {"sha": "3a22b89bb328fe057212fd0000edeae916c50df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a22b89bb328fe057212fd0000edeae916c50df4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cf1c61995f5221edf51bb7f34e4b000fe558753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf1c61995f5221edf51bb7f34e4b000fe558753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cf1c61995f5221edf51bb7f34e4b000fe558753", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf1c61995f5221edf51bb7f34e4b000fe558753/comments", "author": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "committer": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "339ffc5a792dd66647392a235f2f7f6344c5359e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/339ffc5a792dd66647392a235f2f7f6344c5359e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/339ffc5a792dd66647392a235f2f7f6344c5359e"}], "stats": {"total": 433, "additions": 412, "deletions": 21}, "files": [{"sha": "df3500adc838eeebe3a9f2f0b39ccfd5f2c48abd", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -850,6 +850,8 @@ get_available_features (struct __processor_model *cpu_model,\n \tset_feature(FEATURE_CMPCCXADD);\n       if (edx & bit_PREFETCHI)\n \tset_feature (FEATURE_PREFETCHI);\n+      if (eax & bit_RAOINT)\n+\tset_feature (FEATURE_RAOINT);\n       if (avx_usable)\n \t{\n \t  if (eax & bit_AVXVNNI)"}, {"sha": "60a193a651cd65196f48c0e73194c33637ab83c0", "filename": "gcc/common/config/i386/i386-common.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -113,6 +113,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_CMPCCXADD_SET OPTION_MASK_ISA2_CMPCCXADD\n #define OPTION_MASK_ISA2_AMX_FP16_SET OPTION_MASK_ISA2_AMX_FP16\n #define OPTION_MASK_ISA2_PREFETCHI_SET OPTION_MASK_ISA2_PREFETCHI\n+#define OPTION_MASK_ISA2_RAOINT_SET OPTION_MASK_ISA2_RAOINT\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -289,6 +290,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_CMPCCXADD_UNSET OPTION_MASK_ISA2_CMPCCXADD\n #define OPTION_MASK_ISA2_AMX_FP16_UNSET OPTION_MASK_ISA2_AMX_FP16\n #define OPTION_MASK_ISA2_PREFETCHI_UNSET OPTION_MASK_ISA2_PREFETCHI\n+#define OPTION_MASK_ISA2_RAOINT_UNSET OPTION_MASK_ISA2_RAOINT\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -1226,6 +1228,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mraoint:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_RAOINT_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_RAOINT_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_RAOINT_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_RAOINT_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mfma:\n       if (value)\n \t{"}, {"sha": "345fda648ffeb055bc2b7bbeec313f0cec243207", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -251,6 +251,7 @@ enum processor_features\n   FEATURE_CMPCCXADD,\n   FEATURE_AMX_FP16,\n   FEATURE_PREFETCHI,\n+  FEATURE_RAOINT,\n   CPU_FEATURE_MAX\n };\n "}, {"sha": "ba2c2d94534aa537506dd1393d768cfde2691ef2", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -183,4 +183,5 @@ ISA_NAMES_TABLE_START\n   ISA_NAMES_TABLE_ENTRY(\"cmpccxadd\", FEATURE_CMPCCXADD, P_NONE, \"-mcmpccxadd\")\n   ISA_NAMES_TABLE_ENTRY(\"amx-fp16\", FEATURE_AMX_FP16, P_NONE, \"-mamx-fp16\")\n   ISA_NAMES_TABLE_ENTRY(\"prefetchi\", FEATURE_PREFETCHI, P_NONE, \"-mprefetchi\")\n+  ISA_NAMES_TABLE_ENTRY(\"raoint\", FEATURE_RAOINT, P_NONE, \"-mraoint\")\n ISA_NAMES_TABLE_END"}, {"sha": "84c040746dc2739bf324381b862c753e923c7900", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -423,7 +423,8 @@ i[34567]86-*-* | x86_64-*-*)\n \t\t       hresetintrin.h keylockerintrin.h avxvnniintrin.h\n \t\t       mwaitintrin.h avx512fp16intrin.h avx512fp16vlintrin.h\n \t\t       avxifmaintrin.h avxvnniint8intrin.h avxneconvertintrin.h\n-\t\t       cmpccxaddintrin.h amxfp16intrin.h prfchiintrin.h\"\n+\t\t       cmpccxaddintrin.h amxfp16intrin.h prfchiintrin.h\n+\t\t       raointintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "a33abf35cc0205319105e5b637ae1c95112e66f7", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -25,6 +25,7 @@\n #define _CPUID_H_INCLUDED\n \n /* %eax */\n+#define bit_RAOINT\t(1 << 3)\n #define bit_AVXVNNI\t(1 << 4)\n #define bit_AVX512BF16\t(1 << 5)\n #define bit_CMPCCXADD\t(1 << 7)"}, {"sha": "ea3aff7f125003a3036ad68c72bc61066f217a8a", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -415,6 +415,16 @@ BDESC (OPTION_MASK_ISA_AVX512BW, 0, CODE_FOR_avx512bw_truncatev32hiv32qi2_mask_s\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_loadhf_mask, \"__builtin_ia32_loadsh_mask\", IX86_BUILTIN_LOADSH_MASK, UNKNOWN, (int) V8HF_FTYPE_PCFLOAT16_V8HF_UQI)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_storehf_mask, \"__builtin_ia32_storesh_mask\", IX86_BUILTIN_STORESH_MASK, UNKNOWN, (int) VOID_FTYPE_PCFLOAT16_V8HF_UQI)\n \n+/* RAOINT */\n+BDESC (0, OPTION_MASK_ISA2_RAOINT, CODE_FOR_rao_aaddsi, \"__builtin_ia32_aadd32\", IX86_BUILTIN_AADD32, UNKNOWN, (int) VOID_FTYPE_PINT_INT)\n+BDESC (0, OPTION_MASK_ISA2_RAOINT, CODE_FOR_rao_aandsi, \"__builtin_ia32_aand32\", IX86_BUILTIN_AAND32, UNKNOWN, (int) VOID_FTYPE_PINT_INT)\n+BDESC (0, OPTION_MASK_ISA2_RAOINT, CODE_FOR_rao_aorsi, \"__builtin_ia32_aor32\", IX86_BUILTIN_AOR32, UNKNOWN, (int) VOID_FTYPE_PINT_INT)\n+BDESC (0, OPTION_MASK_ISA2_RAOINT, CODE_FOR_rao_axorsi, \"__builtin_ia32_axor32\", IX86_BUILTIN_AXOR32, UNKNOWN, (int) VOID_FTYPE_PINT_INT)\n+BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_RAOINT, CODE_FOR_rao_aadddi, \"__builtin_ia32_aadd64\", IX86_BUILTIN_AADD64, UNKNOWN, (int) VOID_FTYPE_PLONGLONG_LONGLONG)\n+BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_RAOINT, CODE_FOR_rao_aanddi, \"__builtin_ia32_aand64\", IX86_BUILTIN_AAND64, UNKNOWN, (int) VOID_FTYPE_PLONGLONG_LONGLONG)\n+BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_RAOINT, CODE_FOR_rao_aordi, \"__builtin_ia32_aor64\", IX86_BUILTIN_AOR64, UNKNOWN, (int) VOID_FTYPE_PLONGLONG_LONGLONG)\n+BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_RAOINT, CODE_FOR_rao_axordi, \"__builtin_ia32_axor64\", IX86_BUILTIN_AXOR64, UNKNOWN, (int) VOID_FTYPE_PLONGLONG_LONGLONG)\n+\n /* RDPKRU and WRPKRU.  */\n BDESC (OPTION_MASK_ISA_PKU, 0, CODE_FOR_rdpkru,  \"__builtin_ia32_rdpkru\", IX86_BUILTIN_RDPKRU, UNKNOWN, (int) UNSIGNED_FTYPE_VOID)\n BDESC (OPTION_MASK_ISA_PKU, 0, CODE_FOR_wrpkru,  \"__builtin_ia32_wrpkru\", IX86_BUILTIN_WRPKRU, UNKNOWN, (int) VOID_FTYPE_UNSIGNED)"}, {"sha": "a877d24148da20cb01156e82a2bba05b60f31bd3", "filename": "gcc/config/i386/i386-c.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.cc?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -666,6 +666,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__AMX_FP16__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_PREFETCHI)\n     def_or_undef (parse_in, \"__PREFETCHI__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_RAOINT)\n+    def_or_undef (parse_in, \"__RAOINT__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "63a2490316a39749467b03bb2825b5f36d3e71e6", "filename": "gcc/config/i386/i386-isa.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-isa.def?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -115,3 +115,4 @@ DEF_PTA(AVXNECONVERT)\n DEF_PTA(CMPCCXADD)\n DEF_PTA(AMX_FP16)\n DEF_PTA(PREFETCHI)\n+DEF_PTA(RAOINT)"}, {"sha": "3c7570c5edd52db6d0ebc1ba19129b50e7b34589", "filename": "gcc/config/i386/i386-options.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.cc?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -235,7 +235,8 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mavxneconvert\",   OPTION_MASK_ISA2_AVXNECONVERT },\n   { \"-mcmpccxadd\",      OPTION_MASK_ISA2_CMPCCXADD },\n   { \"-mamx-fp16\",       OPTION_MASK_ISA2_AMX_FP16 },\n-  { \"-mprefetchi\",      OPTION_MASK_ISA2_PREFETCHI }\n+  { \"-mprefetchi\",      OPTION_MASK_ISA2_PREFETCHI },\n+  { \"-mraoint\", \tOPTION_MASK_ISA2_RAOINT }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1086,6 +1087,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"cmpccxadd\",   OPT_mcmpccxadd),\n     IX86_ATTR_ISA (\"amx-fp16\", OPT_mamx_fp16),\n     IX86_ATTR_ISA (\"prefetchi\",   OPT_mprefetchi),\n+    IX86_ATTR_ISA (\"raoint\", OPT_mraoint),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "415c52e1bb4417fa40754934b278d252a9b7896f", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -1242,3 +1242,7 @@ Support AMX-FP16 built-in functions and code generation.\n mprefetchi\n Target Mask(ISA2_PREFETCHI) Var(ix86_isa_flags2) Save\n Support PREFETCHI built-in functions and code generation.\n+\n+mraoint\n+Target Mask(ISA2_RAOINT) Var(ix86_isa_flags2) Save\n+Support RAOINT built-in functions and code generation."}, {"sha": "76506af4ab430d10628c594bc3b77c9620bbc0cc", "filename": "gcc/config/i386/raointintrin.h", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fraointintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fraointintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fraointintrin.h?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -0,0 +1,100 @@\n+/* Copyright (C) 2019-2022 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+#error \"Never use <raointintrin.h> directly; include <x86gprintrin.h> instead.\"\n+#endif // _X86GPRINTRIN_H_INCLUDED\n+\n+#ifndef __RAOINTINTRIN_H_INCLUDED\n+#define __RAOINTINTRIN_H_INCLUDED\n+\n+#ifndef __RAOINT__\n+#pragma GCC push_options\n+#pragma GCC target(\"raoint\")\n+#define __DISABLE_RAOINT__\n+#endif /* __RAOINT__ */\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_aadd_i32 (int *__A, int __B)\n+{\n+  __builtin_ia32_aadd32 ((int *)__A, __B);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_aand_i32 (int *__A, int __B)\n+{\n+  __builtin_ia32_aand32 ((int *)__A, __B);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_aor_i32 (int *__A, int __B)\n+{\n+  __builtin_ia32_aor32 ((int *)__A, __B);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_axor_i32 (int *__A, int __B)\n+{\n+  __builtin_ia32_axor32 ((int *)__A, __B);\n+}\n+\n+#ifdef __x86_64__\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_aadd_i64 (long long *__A, long long __B)\n+{\n+  __builtin_ia32_aadd64 ((long long *)__A, __B);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_aand_i64 (long long *__A, long long __B)\n+{\n+  __builtin_ia32_aand64 ((long long *)__A, __B);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_aor_i64 (long long *__A, long long __B)\n+{\n+  __builtin_ia32_aor64 ((long long *)__A, __B);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_axor_i64 (long long *__A, long long __B)\n+{\n+  __builtin_ia32_axor64 ((long long *)__A, __B);\n+}\n+#endif /* __x86_64__ */\n+\n+#ifdef __DISABLE_RAOINT__\n+#undef __DISABLE_RAOINT__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_RAOINT__ */\n+\n+#endif /* __RAOINTINTRIN_H_INCLUDED */"}, {"sha": "e6543a5efb0da3bae2ca953839a8bc7a33f61240", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -40,6 +40,9 @@\n  \n   ;; For CMPccXADD support\n   UNSPECV_CMPCCXADD\n+\n+  ;; For RAOINT support\n+  UNSPECV_RAOINT\n ])\n \n (define_expand \"sse2_lfence\"\n@@ -785,6 +788,19 @@\n   \"\"\n   \"%K3xchg{<imodesuffix>}\\t{%1, %0|%0, %1}\")\n \n+(define_code_iterator any_plus_logic [and ior xor plus])\n+(define_code_attr plus_logic [(and \"and\") (ior \"or\") (xor \"xor\") (plus \"add\")])\n+\n+(define_insn \"rao_a<plus_logic><mode>\"\n+  [(set (match_operand:SWI48 0 \"memory_operand\" \"+m\")\n+       (unspec_volatile:SWI48\n+         [(any_plus_logic:SWI48 (match_dup 0)\n+\t\t\t\t(match_operand:SWI48 1 \"register_operand\" \"r\"))\n+          (const_int 0)]      ;; MEMMODEL_RELAXED\n+         UNSPECV_RAOINT))]\n+  \"TARGET_RAOINT\"\n+  \"a<plus_logic>\\t{%1, %0|%0, %1}\")\n+\n (define_insn \"atomic_add<mode>\"\n   [(set (match_operand:SWI 0 \"memory_operand\" \"+m\")\n \t(unspec_volatile:SWI"}, {"sha": "abbeef87ae42ff5d931dc59b9cb5da4752cf0ad8", "filename": "gcc/config/i386/x86gprintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -76,6 +76,8 @@\n \n #include <prfchiintrin.h>\n \n+#include <raointintrin.h>\n+\n #include <rdseedintrin.h>\n \n #include <rtmintrin.h>"}, {"sha": "33a49338bd3b5238dadec15ff1b75759dace1f34", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -7090,6 +7090,11 @@ Enable/disable the generation of the AMX-FP16 instructions.\n @cindex @code{target(\"prefetchi\")} function attribute, x86\n Enable/disable the generation of the PREFETCHI instructions.\n \n+@item raoint\n+@itemx no-raoint\n+@cindex @code{target(\"raoint\")} function attribute, x86\n+Enable/disable the generation of the RAOINT instructions.\n+\n @item cld\n @itemx no-cld\n @cindex @code{target(\"cld\")} function attribute, x86"}, {"sha": "7417f528bb1d7d3d34b07235179db0737e9cfbbc", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -1438,7 +1438,7 @@ See RS/6000 and PowerPC Options.\n -mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk@gol\n -mamx-tile  -mamx-int8  -mamx-bf16 -muintr -mhreset -mavxvnni@gol\n -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 @gol\n--mprefetchi @gol\n+-mprefetchi -mraoint @gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mkl -mwidekl @gol\n@@ -33027,6 +33027,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mprefetchi\n @opindex mprefetchi\n+@need 200\n+@itemx -mraoint\n+@opindex mraoint\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4, SSE4A, SSE4.1, SSE4.2, AVX, AVX2, AVX512F, AVX512PF,\n AVX512ER, AVX512CD, AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, SHA,\n@@ -33037,9 +33040,9 @@ XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16,\n ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE,\n UINTR, HRESET, AMXTILE, AMXINT8, AMXBF16, KL, WIDEKL, AVXVNNI, AVX512FP16,\n-AVXIFMA, AVXVNNIINT8, AVXNECONVERT, CMPCCXADD, AMX-FP16, PREFETCHI or CLDEMOTE\n-extended instruction sets. Each has a corresponding @option{-mno-} option to\n-disable use of these instructions.\n+AVXIFMA, AVXVNNIINT8, AVXNECONVERT, CMPCCXADD, AMX-FP16, PREFETCHI, RAOINT or\n+CLDEMOTE extended instruction sets. Each has a corresponding @option{-mno-}\n+option to disable use of these instructions.\n \n These extensions are also available as built-in functions: see\n @ref{x86 Built-in Functions}, for details of the functions enabled and"}, {"sha": "766266942f9f73ea600f601064b3d571037b47c9", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -2535,6 +2535,9 @@ The x86-64 target linker supports PIE with copy reloc.\n @item prefetchi\n Target supports the execution of @code{prefetchi} instructions.\n \n+@item raoint\n+Target supports the execution of @code{raoint} instructions.\n+\n @item rdrand\n Target supports x86 @code{rdrand} instruction.\n "}, {"sha": "fc910cec78a1470d45e2f4c25590f6f2a1a214d6", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi -mraoint\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "64741b11685daf697f565e71165691cc0fc99d7c", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi -mraoint\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "7eb18c6952db43df40f81145fc86cfaaa311f8aa", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -86,6 +86,7 @@ extern void test_avxneconvert (void)\t\t__attribute__((__target__(\"avxneconvert\"))\n extern void test_cmpccxadd (void)\t\t__attribute__((__target__(\"cmpccxadd\")));\n extern void test_amx_fp16 (void)\t\t__attribute__((__target__(\"amx-fp16\")));\n extern void test_prefetchi (void)               __attribute__((__target__(\"prefetchi\")));\n+extern void test_raoint (void)                  __attribute__((__target__(\"raoint\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -173,6 +174,7 @@ extern void test_no_avxneconvert (void)\t\t__attribute__((__target__(\"no-avxneconv\n extern void test_no_cmpccxadd (void)            __attribute__((__target__(\"no-cmpccxadd\")));\n extern void test_no_amx_fp16 (void)\t\t__attribute__((__target__(\"no-amx-fp16\")));\n extern void test_no_prefetchi (void)            __attribute__((__target__(\"no-prefetchi\")));\n+extern void test_no_raoint (void)               __attribute__((__target__(\"no-raoint\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "df385516f486b90245b54dd747414126709ca08a", "filename": "gcc/testsuite/gcc.target/i386/rao-helper.h", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frao-helper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frao-helper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frao-helper.h?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -0,0 +1,79 @@\n+#include <immintrin.h>\n+#include <stdint.h>\n+#include <pthread.h>\n+#include <string.h>\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+#include \"cpuid.h\"\n+\n+typedef struct {\n+  uint32_t id; /* filled in by launch_threads. */\n+} state_t;\n+\n+static pthread_t* threads = 0;\n+static state_t* thread_state = 0;\n+static const unsigned int num_threads = 4;\n+\n+static void* threads_worker (state_t *tstate);\n+\n+void launch_threads (uint32_t nthreads,\n+                     void* (*worker)(state_t*),\n+                     state_t* tstate_proto)\n+{\n+  int i;\n+  thread_state = malloc (sizeof (state_t) *nthreads);\n+  threads = malloc (sizeof (pthread_t) *nthreads);\n+  memset (threads, 0, sizeof (pthread_t) *nthreads);\n+  for(i = 0; i < nthreads; i++)\n+    {\n+      memcpy (thread_state + i, tstate_proto, sizeof (state_t));\n+      thread_state[i].id = i;\n+      pthread_create (threads+i, NULL,\n+                      (void* (*)(void*))worker,  \n+\t\t      (void*) (thread_state+i));\n+    }\n+}\n+\n+void wait()\n+{\n+  int i;\n+  for(i = 0; i < num_threads; i++)\n+    pthread_join (threads[i], 0);\n+  free (threads);\n+  threads = 0;\n+  free (thread_state);\n+  thread_state  = 0;\n+}\n+\n+#ifndef DO_TEST\n+#define DO_TEST do_test\n+static void rao_test (void);\n+__attribute__ ((noinline))\n+static void\n+do_test (void)\n+{\n+  state_t tstate_proto;\n+  launch_threads(num_threads, threads_worker, &tstate_proto);\n+  wait();\n+  rao_test ();\n+}\n+#endif\n+\n+int\n+main()\n+{\n+  if (__builtin_cpu_supports (\"raoint\"))\n+    {\n+      DO_TEST ();\n+#ifdef DEBUG\n+      printf (\"PASSED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "d4f880ee30414e9408b57f564007d7c5902cb228", "filename": "gcc/testsuite/gcc.target/i386/raoint-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-1.c?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mraoint -O2\" } */\n+/* { dg-final { scan-assembler-times \"aadd\" 2 { target {! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"aand\" 2 { target {! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"aor\" 2 { target {! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"axor\" 2 { target {! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"aadd\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"aand\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"aor\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"axor\" 1 { target ia32 } } } */\n+#include <immintrin.h>\n+\n+volatile int x;\n+volatile long long y;\n+int *a;\n+long long *b;\n+\n+void extern\n+rao_int_test (void)\n+{\n+  _aadd_i32 (a, x);\n+  _aand_i32 (a, x);\n+  _aor_i32 (a, x);\n+  _axor_i32 (a, x);\n+#ifdef __x86_64__\n+  _aadd_i64 (b, y);\n+  _aand_i64 (b, y);\n+  _aor_i64 (b, y);\n+  _axor_i64 (b, y);\n+#endif\n+}"}, {"sha": "8ae9bc25b17d73ddfee0e50c5a9ba627fb6c2fbf", "filename": "gcc/testsuite/gcc.target/i386/raoint-aadd-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-aadd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-aadd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-aadd-2.c?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run { target { *-*-linux* && { ! ia32 } } } }*/\n+/* { dg-require-effective-target raoint }*/\n+/* { dg-options \"-pthread -O2 -mraoint\" }*/\n+#include \"rao-helper.h\"\n+\n+const unsigned int inc_val = 3;\n+const unsigned int num_iters= 1000000;\n+static long long shared_val = 0;\n+\n+static\n+void* threads_worker (state_t *tstate)\n+{\n+  int i;\n+  for (i = 0; i < num_iters; i++) \n+     _aadd_i64 (&shared_val, inc_val);\n+  return 0;\n+}\n+\n+static void\n+rao_test (void)\n+{\n+  if (shared_val != num_iters * num_threads * inc_val)\n+    abort ();\t\n+}"}, {"sha": "40bc1d71621924838f1592403a1e4b6a43b148f8", "filename": "gcc/testsuite/gcc.target/i386/raoint-aand-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-aand-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-aand-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-aand-2.c?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run { target { *-*-linux* && { ! ia32 } } } }*/\n+/* { dg-require-effective-target raoint }*/\n+/* { dg-options \"-pthread -O2 -mraoint\" }*/\n+#include \"rao-helper.h\"\n+\n+const unsigned int num_iters= 1000000;\n+unsigned int thread_val[4] = { 0xffffff5a, 0xffff96ff, 0xff73ffff, 0xceffffff };\n+static long long shared_val = 0xffffffff;\n+unsigned int expected_val = 0xce73965a;\n+\n+static void* \n+threads_worker (state_t *tstate)\n+{\n+  int i;\n+  unsigned int val = thread_val[tstate->id];\n+  for (i = 0; i < num_iters; i++) \n+    _aand_i64 (&shared_val, val);\n+}\n+\n+static void\n+rao_test(void)\n+{\n+  if (shared_val != expected_val)\n+    abort ();\t\n+}"}, {"sha": "ec7f7cc168904e2df8c9ca4d28da524ac4aaa34b", "filename": "gcc/testsuite/gcc.target/i386/raoint-aor-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-aor-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-aor-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-aor-2.c?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run { target { *-*-linux* && { ! ia32 } } } }*/\n+/* { dg-require-effective-target raoint }*/\n+/* { dg-options \"-pthread -O2 -mraoint\" }*/\n+#include \"rao-helper.h\"\n+\n+const unsigned int num_iters= 1000000;\n+unsigned int thread_val[4] = { 0x5a, 0x9600, 0x730000, 0xce000000 };\n+static long long shared_val = 0;\n+unsigned int expected_val = 0xce73965a;\n+\n+static void* \n+threads_worker (state_t *tstate)\n+{\n+  int i;\n+  unsigned int val = thread_val[tstate->id];\n+  for (i = 0; i < num_iters; i++) \n+    _aor_i64 (&shared_val, val);\n+}\n+\n+static void\n+rao_test (void)\n+{\n+  if (shared_val != expected_val)\n+    abort ();\t\n+}"}, {"sha": "a875592a4867314fb8a0feaa6c99493ec7ac6428", "filename": "gcc/testsuite/gcc.target/i386/raoint-axor-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-axor-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-axor-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-axor-2.c?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run { target { *-*-linux* && { ! ia32 } } } }*/\n+/* { dg-require-effective-target raoint }*/\n+/* { dg-options \"-pthread -O2 -mraoint\" }*/\n+#include \"rao-helper.h\"\n+\n+const unsigned int num_iters= 1000001;\n+unsigned int thread_val[4] = { 0x5a, 0x9600, 0x730000, 0xce000000 };\n+static long long shared_val = 0;\n+unsigned int expected_val = 0xce73965a;\n+\n+static void* \n+threads_worker (state_t *tstate)\n+{\n+  int i;\n+  unsigned int val = thread_val[tstate->id];\n+  for (i = 0; i < num_iters; i++) \n+    _axor_i64 (&shared_val, val);\n+}\n+\n+static void\n+rao_test (void)\n+{\n+  if (shared_val != expected_val)\n+    abort ();\t\n+}"}, {"sha": "3210a5c18c27174fdb4c74bbfb7d8ff9bdf6bd60", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavxifma -mavxvnniint8 -mavxneconvert -mamx-fp16\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavxifma -mavxvnniint8 -mavxneconvert -mamx-fp16 -mraoint\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "66423ec3c0f496b6eaa164b5317a4c1664bbb200", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi -mraoint\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "2953318ff6691f9b08b57f3396341dec56846c04", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mamx-fp16\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mamx-fp16 -mraoint\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "f5808e4513b731796cdf80c4d24510aada2b416e", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -103,7 +103,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,amx-fp16\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,amx-fp16.raoint\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -220,7 +220,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,amx-fp16\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,amx-fp16,raoint\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "0f56e937aeb679723d4964c93ddd156ac4337523", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -847,6 +847,6 @@\n #define __builtin_ia32_cmpccxadd(A, B, C, D) __builtin_ia32_cmpccxadd(A, B, C, 1)\n #define __builtin_ia32_cmpccxadd64(A, B, C, D) __builtin_ia32_cmpccxadd64(A, B, C, 1)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,cmpccxadd,amx-fp16,prefetchi\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,cmpccxadd,amx-fp16,prefetchi,raoint\")\n \n #include <x86intrin.h>"}, {"sha": "68da4db4f3ca1467c4d0ece57fde51e2437532d5", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -1,6 +1,6 @@\n /* Test that <x86gprintrin.h> is usable with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mhreset -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mhreset -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mraoint -mno-sse -mno-mmx\" } */\n /* { dg-additional-options \"-mcmpccxadd -mprefetchi -muintr\" { target { ! ia32 } } }  */\n \n #include <x86gprintrin.h>"}, {"sha": "737c2a26f98d544c761e60a8b98ff03a3e6b1a51", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mhreset -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mhreset -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mraoint -mno-sse -mno-mmx\" } */\n /* { dg-add-options bind_pic_locally } */\n /* { dg-additional-options \"-mcmpccxadd -mprefetchi -muintr\" { target { ! ia32 } } }  */\n "}, {"sha": "52690b1dfb56e6e937073b65eecd2c631d9d3551", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mhreset -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mhreset -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mraoint -mno-sse -mno-mmx\" } */\n /* { dg-add-options bind_pic_locally } */\n /* { dg-additional-options \"-mcmpccxadd -mprefetchi -muintr\" { target { ! ia32 } } }  */\n "}, {"sha": "94cfc583dc90d207f57cd5e9214c2cad654f5393", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -15,9 +15,9 @@\n \n #ifndef DIFFERENT_PRAGMAS\n #ifdef __x86_64__\n-#pragma GCC target (\"adx,bmi,bmi2,cmpccxadd,fsgsbase,fxsr,hreset,lwp,lzcnt,popcnt,prefetchi,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,uintr,xsaveopt\")\n+#pragma GCC target (\"adx,bmi,bmi2,cmpccxadd,fsgsbase,fxsr,hreset,lwp,lzcnt,popcnt,prefetchi,raoint,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,uintr,xsaveopt\")\n #else\n-#pragma GCC target (\"adx,bmi,bmi2,fsgsbase,fxsr,hreset,lwp,lzcnt,popcnt,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,xsaveopt\")\n+#pragma GCC target (\"adx,bmi,bmi2,fsgsbase,fxsr,hreset,lwp,lzcnt,popcnt,raoint,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,xsaveopt\")\n #endif\n #endif\n "}, {"sha": "95f3e0a003cec8a81c4efe9d07d0533ebca2a757", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -32,9 +32,9 @@\n #define __builtin_ia32_cmpccxadd64(A, B, C, D) __builtin_ia32_cmpccxadd64(A, B, C, 1)\n \n #ifdef __x86_64__\n-#pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,cmpccxadd,enqcmd,fsgsbase,fxsr,hreset,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,prefetchi,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,uintr,xsavec,xsaveopt,xsaves,wbnoinvd\")\n+#pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,cmpccxadd,enqcmd,fsgsbase,fxsr,hreset,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,prefetchi,raoint,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,uintr,xsavec,xsaveopt,xsaves,wbnoinvd\")\n #else\n-#pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,enqcmd,fsgsbase,fxsr,hreset,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,xsavec,xsaveopt,xsaves,wbnoinvd\")\n+#pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,enqcmd,fsgsbase,fxsr,hreset,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,raoint,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,xsavec,xsaveopt,xsaves,wbnoinvd\")\n #endif\n \n #include <x86gprintrin.h>"}, {"sha": "c7f583d6d1498401a7c106ed3f539dcd04f95451", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf1c61995f5221edf51bb7f34e4b000fe558753/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=4cf1c61995f5221edf51bb7f34e4b000fe558753", "patch": "@@ -9571,6 +9571,17 @@ proc check_effective_target_cmpccxadd { } {\n     } \"-mcmpccxadd\" ]\n }\n \n+# Return 1 if raoint instructions can be compiled.\n+proc check_effective_target_raoint { } {\n+    return [check_no_compiler_messages raoint object {\n+\tvoid\n+\t_aadd_si32 (int *__A, int __B)\n+\t{\n+\t  return __builtin_ia32_aadd32((int *)__A, __B);\n+\t}\n+    } \"-mraoint\" ]\n+}\n+\n # Return 1 if sse instructions can be compiled.\n proc check_effective_target_sse { } {\n     return [check_no_compiler_messages sse object {"}]}