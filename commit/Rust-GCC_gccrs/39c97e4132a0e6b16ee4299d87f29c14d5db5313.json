{"sha": "39c97e4132a0e6b16ee4299d87f29c14d5db5313", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzljOTdlNDEzMmEwZTZiMTZlZTQyOTlkODdmMjljMTRkNWRiNTMxMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-21T08:08:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-21T08:08:05Z"}, "message": "re PR tree-optimization/68031 (cc1 crashes when compiling newlib / mktm_r.c)\n\n2015-10-21  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/68031\n\t* fold-const.c: Include tree-ssa-operands.h and tree-into-ssa.h.\n\t(tree_ssa_name_nonnegative_warnv_p): Fold into ...\n\t(tree_single_nonnegative_warnv_p): ... here.  For SSA names\n\tmake sure they are not registered for update.\n\n\t* gcc.dg/torture/pr68031.c: New testcase.\n\nFrom-SVN: r229118", "tree": {"sha": "b50c0f53459764cd9e9872408b0d572501342029", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b50c0f53459764cd9e9872408b0d572501342029"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39c97e4132a0e6b16ee4299d87f29c14d5db5313", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39c97e4132a0e6b16ee4299d87f29c14d5db5313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39c97e4132a0e6b16ee4299d87f29c14d5db5313", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39c97e4132a0e6b16ee4299d87f29c14d5db5313/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "33b35c280747d60086dc2cc640a3c15239ec3e8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b35c280747d60086dc2cc640a3c15239ec3e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33b35c280747d60086dc2cc640a3c15239ec3e8d"}], "stats": {"total": 61, "additions": 40, "deletions": 21}, "files": [{"sha": "89b7c441f2e2da510f1c28c0e6fa7302649db01e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39c97e4132a0e6b16ee4299d87f29c14d5db5313/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39c97e4132a0e6b16ee4299d87f29c14d5db5313/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39c97e4132a0e6b16ee4299d87f29c14d5db5313", "patch": "@@ -1,3 +1,11 @@\n+2015-10-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/68031\n+\t* fold-const.c: Include tree-ssa-operands.h and tree-into-ssa.h.\n+\t(tree_ssa_name_nonnegative_warnv_p): Fold into ...\n+\t(tree_single_nonnegative_warnv_p): ... here.  For SSA names\n+\tmake sure they are not registered for update.\n+\n 2015-10-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68026"}, {"sha": "197383db70f1f9baa10e811d99592e64f404c6d3", "filename": "gcc/fold-const.c", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39c97e4132a0e6b16ee4299d87f29c14d5db5313/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39c97e4132a0e6b16ee4299d87f29c14d5db5313/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=39c97e4132a0e6b16ee4299d87f29c14d5db5313", "patch": "@@ -79,6 +79,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"optabs-query.h\"\n #include \"gimple-fold.h\"\n #include \"params.h\"\n+#include \"tree-ssa-operands.h\"\n+#include \"tree-into-ssa.h\"\n \n #ifndef LOAD_EXTEND_OP\n #define LOAD_EXTEND_OP(M) UNKNOWN\n@@ -12940,25 +12942,6 @@ tree_binary_nonnegative_warnv_p (enum tree_code code, tree type, tree op0,\n   return false;\n }\n \n-/* Return true if SSA name T is known to be non-negative.  If the return\n-   value is based on the assumption that signed overflow is undefined,\n-   set *STRICT_OVERFLOW_P to true; otherwise, don't change\n-   *STRICT_OVERFLOW_P.  DEPTH is the current nesting depth of the query.  */\n-\n-static bool\n-tree_ssa_name_nonnegative_warnv_p (tree t, bool *strict_overflow_p, int depth)\n-{\n-  /* Limit the depth of recursion to avoid quadratic behavior.\n-     This is expected to catch almost all occurrences in practice.\n-     If this code misses important cases that unbounded recursion\n-     would not, passes that need this information could be revised\n-     to provide it through dataflow propagation.  */\n-  if (depth < PARAM_VALUE (PARAM_MAX_SSA_NAME_QUERY_DEPTH))\n-    return gimple_stmt_nonnegative_warnv_p (SSA_NAME_DEF_STMT (t),\n-\t\t\t\t\t    strict_overflow_p, depth);\n-  return tree_simple_nonnegative_warnv_p (TREE_CODE (t), TREE_TYPE (t));\n-}\n-\n /* Return true if T is known to be non-negative.  If the return\n    value is based on the assumption that signed overflow is undefined,\n    set *STRICT_OVERFLOW_P to true; otherwise, don't change\n@@ -12967,6 +12950,10 @@ tree_ssa_name_nonnegative_warnv_p (tree t, bool *strict_overflow_p, int depth)\n bool\n tree_single_nonnegative_warnv_p (tree t, bool *strict_overflow_p, int depth)\n {\n+  if (TREE_CODE (t) == SSA_NAME\n+      && name_registered_for_update_p (t))\n+    return false;\n+\n   if (TYPE_UNSIGNED (TREE_TYPE (t)))\n     return true;\n \n@@ -12985,8 +12972,16 @@ tree_single_nonnegative_warnv_p (tree t, bool *strict_overflow_p, int depth)\n       return RECURSE (TREE_OPERAND (t, 1)) && RECURSE (TREE_OPERAND (t, 2));\n \n     case SSA_NAME:\n-      return tree_ssa_name_nonnegative_warnv_p (t, strict_overflow_p, depth);\n-\n+      /* Limit the depth of recursion to avoid quadratic behavior.\n+\t This is expected to catch almost all occurrences in practice.\n+\t If this code misses important cases that unbounded recursion\n+\t would not, passes that need this information could be revised\n+\t to provide it through dataflow propagation.  */\n+      if (depth < PARAM_VALUE (PARAM_MAX_SSA_NAME_QUERY_DEPTH))\n+\treturn gimple_stmt_nonnegative_warnv_p (SSA_NAME_DEF_STMT (t),\n+\t\t\t\t\t\tstrict_overflow_p, depth);\n+\n+      /* Fallthru.  */\n     default:\n       return tree_simple_nonnegative_warnv_p (TREE_CODE (t), TREE_TYPE (t));\n     }"}, {"sha": "9c09d652279ed3de44ba94b61f37f9571631e98f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39c97e4132a0e6b16ee4299d87f29c14d5db5313/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39c97e4132a0e6b16ee4299d87f29c14d5db5313/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39c97e4132a0e6b16ee4299d87f29c14d5db5313", "patch": "@@ -1,3 +1,8 @@\n+2015-10-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/68031\n+\t* gcc.dg/torture/pr68031.c: New testcase.\n+\n 2015-10-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68026"}, {"sha": "76790a6592c31a69e8144a21669cab425e0ec760", "filename": "gcc/testsuite/gcc.dg/torture/pr68031.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39c97e4132a0e6b16ee4299d87f29c14d5db5313/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68031.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39c97e4132a0e6b16ee4299d87f29c14d5db5313/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68031.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68031.c?ref=39c97e4132a0e6b16ee4299d87f29c14d5db5313", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+\n+void _mktm_r (long lcltime,  int *res)\n+{\n+  long rem = lcltime % ((60L * 60L) * 24L);\n+  if (rem < 0)\n+    return;\n+  while (rem >= ((60L * 60L) * 24L))\n+      rem -= ((60L * 60L) * 24L);\n+  *res = (int) (rem % 60L);\n+}"}]}