{"sha": "362e2a9c6297203bcf7f66bfb51dffb82b42d3b3", "node_id": "C_kwDOANBUbNoAKDM2MmUyYTljNjI5NzIwM2JjZjdmNjZiZmI1MWRmZmI4MmI0MmQzYjM", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-04-25T13:56:35Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-04-25T13:58:53Z"}, "message": "Retain existing range knowledge when prefilling statements.\n\nWhen range_of_stmt was adjusted to avoid large recursion depth, we need to\nintersect the calculated range whth the any known range to avoid losing\ninfo.  Range_of_stmt does this, but the new prefill code missed it.\n\n\tPR tree-optimization/105276\n\tgcc/\n\t* gimple-range.cc (gimple_ranger::prefill_stmt_dependencies): Include\n\texisting global range with calculated value.\n\n\tgcc/testsuite/\n\t* g++.dg/pr105276.C: New.", "tree": {"sha": "01abff06b790a4d219fa4951900128723aa45313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01abff06b790a4d219fa4951900128723aa45313"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/362e2a9c6297203bcf7f66bfb51dffb82b42d3b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362e2a9c6297203bcf7f66bfb51dffb82b42d3b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/362e2a9c6297203bcf7f66bfb51dffb82b42d3b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362e2a9c6297203bcf7f66bfb51dffb82b42d3b3/comments", "author": null, "committer": null, "parents": [{"sha": "46cd445fc0714cc6c834b680c3f59dbad0b94a3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46cd445fc0714cc6c834b680c3f59dbad0b94a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46cd445fc0714cc6c834b680c3f59dbad0b94a3c"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "f0caefce2a33d2365ae123b6ddaab2032672f2d8", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362e2a9c6297203bcf7f66bfb51dffb82b42d3b3/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362e2a9c6297203bcf7f66bfb51dffb82b42d3b3/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=362e2a9c6297203bcf7f66bfb51dffb82b42d3b3", "patch": "@@ -394,6 +394,10 @@ gimple_ranger::prefill_stmt_dependencies (tree ssa)\n \t      // Fold and save the value for NAME.\n \t      stmt = SSA_NAME_DEF_STMT (name);\n \t      fold_range_internal (r, stmt, name);\n+\t      // Make sure we don't lose any current global info.\n+\t      int_range_max tmp;\n+\t      m_cache.get_global_range (tmp, name);\n+\t      r.intersect (tmp);\n \t      m_cache.set_global_range (name, r);\n \t    }\n \t  continue;"}, {"sha": "ad0e9dd7e09752203fa8f544e7c79c7eee8d7a64", "filename": "gcc/testsuite/g++.dg/pr105276.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362e2a9c6297203bcf7f66bfb51dffb82b42d3b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr105276.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362e2a9c6297203bcf7f66bfb51dffb82b42d3b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr105276.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr105276.C?ref=362e2a9c6297203bcf7f66bfb51dffb82b42d3b3", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+bool\n+foo(unsigned i)\n+{\n+  bool result = true;\n+  while (i)\n+    {\n+      i = i % 3;\n+      i = i - (i == 2 ? 2 : i ? 1 : 0);\n+      result = !result;\n+    }\n+  return result;\n+}\n+\n+/* We should be able to eliminate the i - operation.  */\n+/* { dg-final { scan-tree-dump-not \"i_.* - \" \"optimized\" } } */"}]}