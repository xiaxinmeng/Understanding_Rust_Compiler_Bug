{"sha": "8e10223f3638a3251b15eb7a8777a69cbaf63422", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUxMDIyM2YzNjM4YTMyNTFiMTVlYjdhODc3N2E2OWNiYWY2MzQyMg==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-05-05T16:18:17Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-05-05T16:18:17Z"}, "message": "Float to int moves currently generate inefficient code due to hacks used in the movsi and movdi patterns.\n\nFloat to int moves currently generate inefficient code due to\nhacks used in the movsi and movdi patterns.  The 'r = w' variant\nuses '*' which tells the register allocator to ignore it.\nAs a result the float to int moves typically spill to the stack,\nwhich is extremely inefficient.\n\n    gcc/\n\t* config/aarch64/aarch64.md (movsi_aarch64): Remove '*' from r=w.\n\t(movdi_aarch64): Likewise.\n\nFrom-SVN: r247643", "tree": {"sha": "f7c0c322c73ea4b71697c2ae791838c6b5e1c08d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7c0c322c73ea4b71697c2ae791838c6b5e1c08d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e10223f3638a3251b15eb7a8777a69cbaf63422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e10223f3638a3251b15eb7a8777a69cbaf63422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e10223f3638a3251b15eb7a8777a69cbaf63422", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e10223f3638a3251b15eb7a8777a69cbaf63422/comments", "author": null, "committer": null, "parents": [{"sha": "8dc6a926f2eea6de3f1710a185eee5cfc052d6f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc6a926f2eea6de3f1710a185eee5cfc052d6f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc6a926f2eea6de3f1710a185eee5cfc052d6f8"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "604193c01d86e004ecef61395a0949639ec1a1fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e10223f3638a3251b15eb7a8777a69cbaf63422/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e10223f3638a3251b15eb7a8777a69cbaf63422/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e10223f3638a3251b15eb7a8777a69cbaf63422", "patch": "@@ -1,3 +1,8 @@\n+2017-05-05  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.md (movsi_aarch64): Remove '*' from r=w.\n+\t(movdi_aarch64): Likewise.\n+\n 2017-05-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/80632"}, {"sha": "c522e87ebdef4b8d6a392f7bfde1d6bf8251b6d9", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e10223f3638a3251b15eb7a8777a69cbaf63422/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e10223f3638a3251b15eb7a8777a69cbaf63422/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=8e10223f3638a3251b15eb7a8777a69cbaf63422", "patch": "@@ -1030,8 +1030,8 @@\n )\n \n (define_insn_and_split \"*movsi_aarch64\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r,*w,m,  m,r,r  ,*w, r,*w\")\n-\t(match_operand:SI 1 \"aarch64_mov_operand\"  \" r,r,k,M,n,m, m,rZ,*w,S,Ush,rZ,*w,*w\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r,*w,m,  m,r,r  ,*w,r,*w\")\n+\t(match_operand:SI 1 \"aarch64_mov_operand\"  \" r,r,k,M,n,m, m,rZ,*w,S,Ush,rZ,w,*w\"))]\n   \"(register_operand (operands[0], SImode)\n     || aarch64_reg_or_zero (operands[1], SImode))\"\n   \"@\n@@ -1062,8 +1062,8 @@\n )\n \n (define_insn_and_split \"*movdi_aarch64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r,*w,m,  m,r,r,  *w, r,*w,w\")\n-\t(match_operand:DI 1 \"aarch64_mov_operand\"  \" r,r,k,N,n,m, m,rZ,*w,S,Ush,rZ,*w,*w,Dd\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r,*w,m,  m,r,r,  *w,r,*w,w\")\n+\t(match_operand:DI 1 \"aarch64_mov_operand\"  \" r,r,k,N,n,m, m,rZ,*w,S,Ush,rZ,w,*w,Dd\"))]\n   \"(register_operand (operands[0], DImode)\n     || aarch64_reg_or_zero (operands[1], DImode))\"\n   \"@"}]}