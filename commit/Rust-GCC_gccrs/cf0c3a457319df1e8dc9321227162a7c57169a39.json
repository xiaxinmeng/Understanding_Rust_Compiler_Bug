{"sha": "cf0c3a457319df1e8dc9321227162a7c57169a39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YwYzNhNDU3MzE5ZGYxZThkYzkzMjEyMjcxNjJhN2M1NzE2OWEzOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-10T17:45:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-10T17:45:45Z"}, "message": "libstdc++: Fix noexcept guarantees for ranges::split_view\n\nAlso introduce the _M_i_current() accessors to solve the problem of\naccess to the private member of _OuterIter from the iter_move and\niter_swap overloads (which are only friends of _InnerIter not\n_OuterIter).\n\n\t* include/std/ranges (transform_view::_Iterator::__iter_move): Remove.\n\t(transform_view::_Iterator::operator*): Add noexcept-specifier.\n\t(transform_view::_Iterator::iter_move): Inline __iter_move body here.\n\t(split_view::_OuterIter::__current): Add noexcept.\n\t(split_view::_InnerIter::__iter_swap): Remove.\n\t(split_view::_InnerIter::__iter_move): Remove.\n\t(split_view::_InnerIter::_M_i_current): New accessors.\n\t(split_view::_InnerIter::__at_end): Use _M_i_current().\n\t(split_view::_InnerIter::operator*): Likewise.\n\t(split_view::_InnerIter::operator++): Likewise.\n\t(iter_move(const _InnerIter&)): Likewise.\n\t(iter_swap(const _InnerIter&, const _InnerIter&)): Likewise.\n\t* testsuite/std/ranges/adaptors/split.cc: Check noexcept-specifier\n\tfor iter_move and iter_swap on split_view's inner iterator.", "tree": {"sha": "3f8e81404bd8e6cd621aa4b87e25e74d5da9e1f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f8e81404bd8e6cd621aa4b87e25e74d5da9e1f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf0c3a457319df1e8dc9321227162a7c57169a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0c3a457319df1e8dc9321227162a7c57169a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0c3a457319df1e8dc9321227162a7c57169a39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0c3a457319df1e8dc9321227162a7c57169a39/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b888a051deb7df7587acbe8865513b86d2a1d49f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b888a051deb7df7587acbe8865513b86d2a1d49f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b888a051deb7df7587acbe8865513b86d2a1d49f"}], "stats": {"total": 93, "additions": 58, "deletions": 35}, "files": [{"sha": "0c447ff08065f078adbeef584c161ec24d15df35", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0c3a457319df1e8dc9321227162a7c57169a39/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0c3a457319df1e8dc9321227162a7c57169a39/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cf0c3a457319df1e8dc9321227162a7c57169a39", "patch": "@@ -1,5 +1,20 @@\n 2020-03-10  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/ranges (transform_view::_Iterator::__iter_move): Remove.\n+\t(transform_view::_Iterator::operator*): Add noexcept-specifier.\n+\t(transform_view::_Iterator::iter_move): Inline __iter_move body here.\n+\t(split_view::_OuterIter::__current): Add noexcept.\n+\t(split_view::_InnerIter::__iter_swap): Remove.\n+\t(split_view::_InnerIter::__iter_move): Remove.\n+\t(split_view::_InnerIter::_M_i_current): New accessors.\n+\t(split_view::_InnerIter::__at_end): Use _M_i_current().\n+\t(split_view::_InnerIter::operator*): Likewise.\n+\t(split_view::_InnerIter::operator++): Likewise.\n+\t(iter_move(const _InnerIter&)): Likewise.\n+\t(iter_swap(const _InnerIter&, const _InnerIter&)): Likewise.\n+\t* testsuite/std/ranges/adaptors/split.cc: Check noexcept-specifier\n+\tfor iter_move and iter_swap on split_view's inner iterator.\n+\n \tPR c++/94117\n \t* include/std/ranges (ranges::transform_view::_Iterator::iter_move):\n \tChange expression in noexcept-specifier to match function body."}, {"sha": "4dc7342e2f78a24f0f925e542d27b231a32a0909", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 30, "deletions": 35, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0c3a457319df1e8dc9321227162a7c57169a39/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0c3a457319df1e8dc9321227162a7c57169a39/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=cf0c3a457319df1e8dc9321227162a7c57169a39", "patch": "@@ -1679,17 +1679,6 @@ namespace views\n \t      return input_iterator_tag{};\n \t  }\n \n-\t  static constexpr decltype(auto)\n-\t  __iter_move(const _Iterator& __i = {})\n-\t    noexcept(noexcept(std::__invoke(*__i._M_parent->_M_fun,\n-\t\t\t\t\t    *__i._M_current)))\n-\t  {\n-\t    if constexpr (is_lvalue_reference_v<decltype(*__i)>)\n-\t      return std::move(*__i);\n-\t    else\n-\t      return *__i;\n-\t  }\n-\n \t  using _Base_iter = iterator_t<_Base>;\n \n \t  _Base_iter _M_current = _Base_iter();\n@@ -1728,6 +1717,7 @@ namespace views\n \n \t  constexpr decltype(auto)\n \t  operator*() const\n+\t    noexcept(noexcept(std::__invoke(*_M_parent->_M_fun, *_M_current)))\n \t  { return std::__invoke(*_M_parent->_M_fun, *_M_current); }\n \n \t  constexpr _Iterator&\n@@ -1837,8 +1827,13 @@ namespace views\n \t  { return __x._M_current - __y._M_current; }\n \n \t  friend constexpr decltype(auto)\n-\t  iter_move(const _Iterator& __i) noexcept(noexcept(__iter_move(__i)))\n-\t  { return __iter_move(__i); }\n+\t  iter_move(const _Iterator& __i) noexcept(noexcept(*__i))\n+\t  {\n+\t    if constexpr (is_lvalue_reference_v<decltype(*__i)>)\n+\t      return std::move(*__i);\n+\t    else\n+\t      return *__i;\n+\t  }\n \n \t  friend constexpr void\n \t  iter_swap(const _Iterator& __x, const _Iterator& __y)\n@@ -2715,7 +2710,7 @@ namespace views\n \t  //  current of outer-iterator.  current is equivalent to current_ if\n \t  //  V models forward_range, and parent_->current_ otherwise.\n \t  constexpr auto&\n-\t  __current()\n+\t  __current() noexcept\n \t  {\n \t    if constexpr (forward_range<_Vp>)\n \t      return _M_current;\n@@ -2724,7 +2719,7 @@ namespace views\n \t  }\n \n \t  constexpr auto&\n-\t  __current() const\n+\t  __current() const noexcept\n \t  {\n \t    if constexpr (forward_range<_Vp>)\n \t      return _M_current;\n@@ -2860,7 +2855,7 @@ namespace views\n \t    auto __end = ranges::end(_M_i._M_parent->_M_base);\n \t    if constexpr (__detail::__tiny_range<_Pattern>)\n \t      {\n-\t\tconst auto& __cur = _M_i.__current();\n+\t\tconst auto& __cur = _M_i_current();\n \t\tif (__cur == __end)\n \t\t  return true;\n \t\tif (__pcur == __pend)\n@@ -2869,7 +2864,7 @@ namespace views\n \t      }\n \t    else\n \t      {\n-\t\tauto __cur = _M_i.__current();\n+\t\tauto __cur = _M_i_current();\n \t\tif (__cur == __end)\n \t\t  return true;\n \t\tif (__pcur == __pend)\n@@ -2896,16 +2891,13 @@ namespace views\n \t      return _Cat{};\n \t  }\n \n-\t  static constexpr decltype(auto)\n-\t  __iter_move(const _InnerIter& __i = {})\n-\t  noexcept(noexcept(ranges::iter_move(__i._M_i.__current())))\n-\t  { return ranges::iter_move(__i._M_i.__current()); }\n+\t  constexpr auto&\n+\t  _M_i_current() noexcept\n+\t  { return _M_i.__current(); }\n \n-\t  static constexpr void\n-\t  __iter_swap(const _InnerIter& __x = {}, const _InnerIter& __y = {})\n-\t    noexcept(noexcept(ranges::iter_swap(__x._M_i.__current(),\n-\t\t\t\t\t\t__y._M_i.__current())))\n-\t  { ranges::iter_swap(__x._M_i.__current(), __y._M_i.__current()); }\n+\t  constexpr auto&\n+\t  _M_i_current() const noexcept\n+\t  { return _M_i.__current(); }\n \n \t  _OuterIter<_Const> _M_i = _OuterIter<_Const>();\n \t  bool _M_incremented = false;\n@@ -2926,7 +2918,7 @@ namespace views\n \n \t  constexpr decltype(auto)\n \t  operator*() const\n-\t  { return *_M_i._M_current; }\n+\t  { return *_M_i_current(); }\n \n \t  constexpr _InnerIter&\n \t  operator++()\n@@ -2935,7 +2927,7 @@ namespace views\n \t    if constexpr (!forward_range<_Base>)\n \t      if constexpr (_Pattern::size() == 0)\n \t\treturn *this;\n-\t    ++_M_i.__current();\n+\t    ++_M_i_current();\n \t    return *this;\n \t  }\n \n@@ -2962,14 +2954,16 @@ namespace views\n \t  { return __x.__at_end(); }\n \n \t  friend constexpr decltype(auto)\n-\t  iter_move(const _InnerIter& __i) noexcept(noexcept(__iter_move()))\n-\t  { return __iter_move(__i); }\n+\t  iter_move(const _InnerIter& __i)\n+\t    noexcept(noexcept(ranges::iter_move(__i._M_i_current())))\n+\t  { return ranges::iter_move(__i._M_i_current()); }\n \n \t  friend constexpr void\n \t  iter_swap(const _InnerIter& __x, const _InnerIter& __y)\n-\t    noexcept(noexcept(__iter_swap()))\n+\t    noexcept(noexcept(ranges::iter_swap(__x._M_i_current(),\n+\t\t\t\t\t\t__y._M_i_current())))\n \t    requires indirectly_swappable<iterator_t<_Base>>\n-\t  { __iter_swap(__x, __y); }\n+\t  { ranges::iter_swap(__x._M_i_current(), __y._M_i_current()); }\n \t};\n \n       _Vp _M_base = _Vp();\n@@ -3010,8 +3004,8 @@ namespace views\n       begin()\n       {\n \tif constexpr (forward_range<_Vp>)\n-\t  return _OuterIter<__detail::__simple_view<_Vp>>{*this,\n-\t\t\t\t\t\t\tranges::begin(_M_base)};\n+\t  return _OuterIter<__detail::__simple_view<_Vp>>{\n+\t      *this, ranges::begin(_M_base)};\n \telse\n \t  {\n \t    _M_current = ranges::begin(_M_base);\n@@ -3028,7 +3022,8 @@ namespace views\n       constexpr auto\n       end() requires forward_range<_Vp> && common_range<_Vp>\n       {\n-\treturn _OuterIter<__detail::__simple_view<_Vp>>{*this, ranges::end(_M_base)};\n+\treturn _OuterIter<__detail::__simple_view<_Vp>>{\n+\t    *this, ranges::end(_M_base)};\n       }\n \n       constexpr auto"}, {"sha": "abdbfb41d8b19f30c13d5878bb119bdf4472cd62", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/split.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0c3a457319df1e8dc9321227162a7c57169a39/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0c3a457319df1e8dc9321227162a7c57169a39/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc?ref=cf0c3a457319df1e8dc9321227162a7c57169a39", "patch": "@@ -121,6 +121,18 @@ test06()\n   b = ranges::begin(v);\n }\n \n+void\n+test07()\n+{\n+  char str[] = \"banana split\";\n+  auto split = str | views::split(' ');\n+  auto val = *split.begin();\n+  auto b = val.begin();\n+  auto b2 = b++;\n+  static_assert( noexcept(iter_move(b)) );\n+  static_assert( noexcept(iter_swap(b, b2)) );\n+}\n+\n int\n main()\n {\n@@ -130,4 +142,5 @@ main()\n   test04();\n   test05();\n   test06();\n+  test07();\n }"}]}