{"sha": "188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg4ZDAwNzk2ZjViZDMzOGI5YjhhYjFjYzhiYTRiNDNhZjhhYjhmZA==", "commit": {"author": {"name": "Joel Hutton", "email": "Joel.Hutton@arm.com", "date": "2019-08-19T16:55:20Z"}, "committer": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2019-08-19T16:55:20Z"}, "message": "[AArch64] Use scvtf fbits option where appropriate\n\ngcc/ChangeLog:\n2019-08-19  Joel Hutton  <Joel.Hutton@arm.com>\n\n\t* config/aarch64/aarch64-protos.h (aarch64_fpconst_pow2_recip): New prototype\n\t* config/aarch64/aarch64.c (aarch64_fpconst_pow2_recip): New function\n\t* config/aarch64/aarch64.md (*aarch64_<su_optab>cvtf<fcvt_target><GPF:mode>2_mult): New pattern\n\t(*aarch64_<su_optab>cvtf<fcvt_iesize><GPF:mode>2_mult): New pattern\n\t* config/aarch64/constraints.md (Dt): New constraint\n\t* config/aarch64/predicates.md (aarch64_fpconst_pow2_recip): New predicate\n\ngcc/testsuite/ChangeLog:\n2019-08-19  Joel Hutton  <Joel.Hutton@arm.com>\n\n\t* gcc.target/aarch64/fmul_scvtf_1.c: New test.\n\nFrom-SVN: r274676", "tree": {"sha": "a3cb30ac04488d058f1966e82e011a03c6c819c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3cb30ac04488d058f1966e82e011a03c6c819c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/comments", "author": {"login": "JoelHutton", "id": 4455754, "node_id": "MDQ6VXNlcjQ0NTU3NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4455754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoelHutton", "html_url": "https://github.com/JoelHutton", "followers_url": "https://api.github.com/users/JoelHutton/followers", "following_url": "https://api.github.com/users/JoelHutton/following{/other_user}", "gists_url": "https://api.github.com/users/JoelHutton/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoelHutton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoelHutton/subscriptions", "organizations_url": "https://api.github.com/users/JoelHutton/orgs", "repos_url": "https://api.github.com/users/JoelHutton/repos", "events_url": "https://api.github.com/users/JoelHutton/events{/privacy}", "received_events_url": "https://api.github.com/users/JoelHutton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aac9103b0e13e49cc4e88abc857d4d043ce20bd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac9103b0e13e49cc4e88abc857d4d043ce20bd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac9103b0e13e49cc4e88abc857d4d043ce20bd4"}], "stats": {"total": 227, "additions": 227, "deletions": 0}, "files": [{"sha": "895e5f12792cb0120bedb30905f46d908a52890a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd", "patch": "@@ -1,3 +1,12 @@\n+2019-08-19  Joel Hutton  <Joel.Hutton@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_fpconst_pow2_recip): New prototype\n+\t* config/aarch64/aarch64.c (aarch64_fpconst_pow2_recip): New function\n+\t* config/aarch64/aarch64.md (*aarch64_<su_optab>cvtf<fcvt_target><GPF:mode>2_mult): New pattern\n+\t(*aarch64_<su_optab>cvtf<fcvt_iesize><GPF:mode>2_mult): New pattern\n+\t* config/aarch64/constraints.md (Dt): New constraint\n+\t* config/aarch64/predicates.md (aarch64_fpconst_pow2_recip): New predicate\n+\n 2019-08-19  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91403"}, {"sha": "c4b73d26df608df153a58f877d67f61487805c46", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd", "patch": "@@ -525,6 +525,7 @@ enum aarch64_symbol_type aarch64_classify_tls_symbol (rtx);\n enum reg_class aarch64_regno_regclass (unsigned);\n int aarch64_asm_preferred_eh_data_format (int, int);\n int aarch64_fpconst_pow_of_2 (rtx);\n+int aarch64_fpconst_pow2_recip (rtx);\n machine_mode aarch64_hard_regno_caller_save_mode (unsigned, unsigned,\n \t\t\t\t\t\t       machine_mode);\n int aarch64_uxt_size (int, HOST_WIDE_INT);"}, {"sha": "be0162244a28ea1609087648e45a763445826969", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd", "patch": "@@ -19750,6 +19750,29 @@ aarch64_fpconst_pow_of_2 (rtx x)\n   return exact_log2 (real_to_integer (r));\n }\n \n+/* If X is a positive CONST_DOUBLE with a value that is the reciprocal of a\n+   power of 2 (i.e 1/2^n) return the number of float bits. e.g. for x==(1/2^n)\n+   return n. Otherwise return -1.  */\n+\n+int\n+aarch64_fpconst_pow2_recip (rtx x)\n+{\n+  REAL_VALUE_TYPE r0;\n+\n+  if (!CONST_DOUBLE_P (x))\n+    return -1;\n+\n+  r0 = *CONST_DOUBLE_REAL_VALUE (x);\n+  if (exact_real_inverse (DFmode, &r0)\n+      && !REAL_VALUE_NEGATIVE (r0))\n+    {\n+\tint ret = exact_log2 (real_to_integer (&r0));\n+\tif (ret >= 1 && ret <= 32)\n+\t    return ret;\n+    }\n+  return -1;\n+}\n+\n /* If X is a vector of equal CONST_DOUBLE values and that value is\n    Y, return the aarch64_fpconst_pow_of_2 of Y.  Otherwise return -1.  */\n "}, {"sha": "9a07f631010f16edc82fa6d990e61336196f17ec", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd", "patch": "@@ -6051,6 +6051,44 @@\n   [(set_attr \"type\" \"f_cvtf2i\")]\n )\n \n+;; Equal width integer to fp and multiply combine.\n+(define_insn \"*aarch64_<su_optab>cvtf<fcvt_target><GPF:mode>2_mult\"\n+  [(set (match_operand:GPF 0 \"register_operand\" \"=w,w\")\n+\t(mult:GPF (FLOATUORS:GPF\n+\t\t   (match_operand:<FCVT_TARGET> 1 \"register_operand\" \"w,?r\"))\n+\t\t   (match_operand:GPF 2 \"aarch64_fp_pow2_recip\" \"Dt,Dt\")))]\n+  \"TARGET_FLOAT\"\n+  {\n+    operands[2] = GEN_INT (aarch64_fpconst_pow2_recip (operands[2]));\n+    switch (which_alternative)\n+    {\n+      case 0:\n+\treturn \"<su_optab>cvtf\\t%<GPF:s>0, %<s>1, #%2\";\n+      case 1:\n+\treturn \"<su_optab>cvtf\\t%<GPF:s>0, %<w1>1, #%2\";\n+      default:\n+\tgcc_unreachable ();\n+    }\n+  }\n+  [(set_attr \"type\" \"neon_int_to_fp_<Vetype>,f_cvti2f\")\n+   (set_attr \"arch\" \"simd,fp\")]\n+)\n+\n+;; Unequal width integer to fp and multiply combine.\n+(define_insn \"*aarch64_<su_optab>cvtf<fcvt_iesize><GPF:mode>2_mult\"\n+  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n+\t(mult:GPF (FLOATUORS:GPF\n+\t\t   (match_operand:<FCVT_IESIZE> 1 \"register_operand\" \"r\"))\n+\t\t   (match_operand:GPF 2 \"aarch64_fp_pow2_recip\" \"Dt\")))]\n+  \"TARGET_FLOAT\"\n+  {\n+    operands[2] = GEN_INT (aarch64_fpconst_pow2_recip (operands[2]));\n+    return \"<su_optab>cvtf\\t%<GPF:s>0, %<w2>1, #%2\";\n+  }\n+  [(set_attr \"type\" \"f_cvti2f\")]\n+)\n+\n+;; Equal width integer to fp conversion.\n (define_insn \"<optab><fcvt_target><GPF:mode>2\"\n   [(set (match_operand:GPF 0 \"register_operand\" \"=w,w\")\n         (FLOATUORS:GPF (match_operand:<FCVT_TARGET> 1 \"register_operand\" \"w,?r\")))]\n@@ -6062,6 +6100,7 @@\n    (set_attr \"arch\" \"simd,fp\")]\n )\n \n+;; Unequal width integer to fp conversions.\n (define_insn \"<optab><fcvt_iesize><GPF:mode>2\"\n   [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n         (FLOATUORS:GPF (match_operand:<FCVT_IESIZE> 1 \"register_operand\" \"r\")))]"}, {"sha": "9326beca87d9ffa1d0b0977bcb556fdee861d2a1", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd", "patch": "@@ -344,6 +344,13 @@\n       (match_test \"aarch64_simd_scalar_immediate_valid_for_move (op,\n \t\t\t\t\t\t QImode)\")))\n \n+(define_constraint \"Dt\"\n+  \"@internal\n+ A const_double which is the reciprocal of an exact power of two, can be\n+ used in an scvtf with fract bits operation\"\n+ (and (match_code \"const_double\")\n+      (match_test \"aarch64_fpconst_pow2_recip (op) > 0\")))\n+\n (define_constraint \"Dl\"\n   \"@internal\n  A constraint that matches vector of immediates for left shifts.\""}, {"sha": "d8c377994d6f11a58683b19d7ae9d594e5033561", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd", "patch": "@@ -104,6 +104,10 @@\n   (and (match_code \"const_double\")\n \t(match_test \"aarch64_fpconst_pow_of_2 (op) > 0\")))\n \n+(define_predicate \"aarch64_fp_pow2_recip\"\n+  (and (match_code \"const_double\")\n+       (match_test \"aarch64_fpconst_pow2_recip (op) > 0\")))\n+\n (define_predicate \"aarch64_fp_vec_pow2\"\n   (match_test \"aarch64_vec_fpconst_pow_of_2 (op) > 0\"))\n "}, {"sha": "6f0bec89379eec92b016148a1c2fca42544b1be9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd", "patch": "@@ -1,3 +1,7 @@\n+2019-08-19  Joel Hutton  <Joel.Hutton@arm.com>\n+\n+\t* gcc.target/aarch64/fmul_scvtf_1.c: New test.\n+\n 2019-08-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91264 - detect modifying const objects in constexpr."}, {"sha": "8bfe06ac3e611823afb19ddef7cb8db95f173bc8", "filename": "gcc/testsuite/gcc.target/aarch64/fmul_scvtf_1.c", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_scvtf_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_scvtf_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_scvtf_1.c?ref=188d00796f5bd338b9b8ab1cc8ba4b43af8ab8fd", "patch": "@@ -0,0 +1,140 @@\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O2 -fno-inline\" } */\n+\n+#define FUNC_DEFS(__a)\t\t\t\t\\\n+float\t\t\t\t\t\t\\\n+fsfoo##__a (int x)\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  return ((float) x)/(1lu << __a);\t\t\\\n+}\t\t\t\t\t\t\\\n+float\t\t\t\t\t\t\\\n+fusfoo##__a (unsigned int x)\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  return ((float) x)/(1lu << __a);\t\t\\\n+}\t\t\t\t\t\t\\\n+float\t\t\t\t\t\t\\\n+fslfoo##__a (long long x)\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  return ((float) x)/(1lu << __a);\t\t\\\n+}\t\t\t\t\t\t\\\n+float\t\t\t\t\t\t\\\n+fulfoo##__a (unsigned long long x)\t\t\\\n+{\t\t\t\t\t\t\\\n+  return ((float) x)/(1lu << __a);\t\t\\\n+}\t\t\t\t\t\t\\\n+\n+#define FUNC_DEFD(__a)\t\t\t\t\\\n+double\t\t\t\t\t\t\\\n+dsfoo##__a (int x)\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  return ((double) x)/(1lu << __a);\t\t\\\n+}\t\t\t\t\t\t\\\n+double\t\t\t\t\t\t\\\n+dusfoo##__a (unsigned int x)\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  return ((double) x)/(1lu << __a);\t\t\\\n+}\t\t\t\t\t\t\\\n+double\t\t\t\t\t\t\\\n+dslfoo##__a (long long x)\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  return ((double) x)/(1lu << __a);\t\t\\\n+}\t\t\t\t\t\t\\\n+double\t\t\t\t\t\t\\\n+dulfoo##__a (unsigned long long x)\t\t\\\n+{\t\t\t\t\t\t\\\n+  return ((double) x)/(1lu << __a);\t\t\\\n+}\n+\n+FUNC_DEFS (4)\n+\t/* { dg-final { scan-assembler-times \"scvtf\\ts\\[0-9\\], w\\[0-9\\]*.*#4\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"ucvtf\\ts\\[0-9\\], w\\[0-9\\]*.*#4\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"scvtf\\ts\\[0-9\\], x\\[0-9\\]*.*#4\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"ucvtf\\ts\\[0-9\\], x\\[0-9\\]*.*#4\" 1 } } */\n+\n+FUNC_DEFD (4)\n+\t/* { dg-final { scan-assembler-times \"scvtf\\td\\[0-9\\], w\\[0-9\\]*.*#4\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"ucvtf\\td\\[0-9\\], w\\[0-9\\]*.*#4\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"scvtf\\td\\[0-9\\], x\\[0-9\\]*.*#4\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"ucvtf\\td\\[0-9\\], x\\[0-9\\]*.*#4\" 1 } } */\n+\n+FUNC_DEFS (8)\n+\t/* { dg-final { scan-assembler-times \"scvtf\\ts\\[0-9\\], w\\[0-9\\]*.*#8\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"ucvtf\\ts\\[0-9\\], w\\[0-9\\]*.*#8\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"scvtf\\ts\\[0-9\\], x\\[0-9\\]*.*#8\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"ucvtf\\ts\\[0-9\\], x\\[0-9\\]*.*#8\" 1 } } */\n+\n+FUNC_DEFD (8)\n+\t/* { dg-final { scan-assembler-times \"scvtf\\td\\[0-9\\], w\\[0-9\\]*.*#8\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"ucvtf\\td\\[0-9\\], w\\[0-9\\]*.*#8\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"scvtf\\td\\[0-9\\], x\\[0-9\\]*.*#8\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"ucvtf\\td\\[0-9\\], x\\[0-9\\]*.*#8\" 1 } } */\n+\n+FUNC_DEFS (16)\n+\t/* { dg-final { scan-assembler-times \"scvtf\\ts\\[0-9\\], w\\[0-9\\]*.*#16\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"ucvtf\\ts\\[0-9\\], w\\[0-9\\]*.*#16\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"scvtf\\ts\\[0-9\\], x\\[0-9\\]*.*#16\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"ucvtf\\ts\\[0-9\\], x\\[0-9\\]*.*#16\" 1 } } */\n+\n+FUNC_DEFD (16)\n+\t/* { dg-final { scan-assembler-times \"scvtf\\td\\[0-9\\], w\\[0-9\\]*.*#16\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"ucvtf\\td\\[0-9\\], w\\[0-9\\]*.*#16\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"scvtf\\td\\[0-9\\], x\\[0-9\\]*.*#16\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"ucvtf\\td\\[0-9\\], x\\[0-9\\]*.*#16\" 1 } } */\n+\n+FUNC_DEFS (32)\n+\t/* { dg-final { scan-assembler-times \"scvtf\\ts\\[0-9\\], w\\[0-9\\]*.*#32\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"ucvtf\\ts\\[0-9\\], w\\[0-9\\]*.*#32\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"scvtf\\ts\\[0-9\\], x\\[0-9\\]*.*#32\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"ucvtf\\ts\\[0-9\\], x\\[0-9\\]*.*#32\" 1 } } */\n+\n+FUNC_DEFD (32)\n+\t/* { dg-final { scan-assembler-times \"scvtf\\td\\[0-9\\], w\\[0-9\\]*.*#32\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"ucvtf\\td\\[0-9\\], w\\[0-9\\]*.*#32\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"scvtf\\td\\[0-9\\], x\\[0-9\\]*.*#32\" 1 } } */\n+\t/* { dg-final { scan-assembler-times \"ucvtf\\td\\[0-9\\], x\\[0-9\\]*.*#32\" 1 } } */\n+\n+#define FUNC_TESTS(__a, __b)\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (fsfoo##__a (__b) !=  ((int) i) * (1.0f/(1lu << __a)) )\t\\\n+    __builtin_abort ();\t\t\t\t\t\t\\\n+  if (fusfoo##__a (__b) != ((int) i) * (1.0f/(1lu << __a)) )\t\\\n+    __builtin_abort ();\t\t\t\t\t\t\\\n+  if (fslfoo##__a (__b) != ((int) i) * (1.0f/(1lu << __a)) )\t\\\n+    __builtin_abort ();\t\t\t\t\t\t\\\n+  if (fulfoo##__a (__b) != ((int) i) * (1.0f/(1lu << __a)) )\t\\\n+    __builtin_abort ();\t\t\t\t\t\t\\\n+} while (0)\n+\n+#define FUNC_TESTD(__a, __b)\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (dsfoo##__a (__b) !=  ((int) i) * (1.0d/(1lu << __a)) )\t\\\n+    __builtin_abort ();\t\t\t\t\t\t\\\n+  if (dusfoo##__a (__b) != ((int) i) * (1.0d/(1lu << __a)) )\t\\\n+    __builtin_abort ();\t\t\t\t\t\t\\\n+  if (dslfoo##__a (__b) != ((int) i) * (1.0d/(1lu << __a)) )\t\\\n+    __builtin_abort ();\t\t\t\t\t\t\\\n+  if (dulfoo##__a (__b) != ((int) i) * (1.0d/(1lu << __a)) )\t\\\n+    __builtin_abort ();\t\t\t\t\t\t\\\n+} while (0)\n+\n+int\n+main (void)\n+{\n+\tint i;\n+\n+\tfor (i = 0; i < 32; i ++)\n+\t{\n+\t\tFUNC_TESTS (4, i);\n+\t\tFUNC_TESTS (8, i);\n+\t\tFUNC_TESTS (16, i);\n+\t\tFUNC_TESTS (32, i);\n+\n+\t\tFUNC_TESTD (4, i);\n+\t\tFUNC_TESTD (8, i);\n+\t\tFUNC_TESTD (16, i);\n+\t\tFUNC_TESTD (32, i);\n+\t}\n+\treturn 0;\n+}"}]}