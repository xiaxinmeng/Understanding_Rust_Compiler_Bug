{"sha": "87841658d4fa5174d1797ee0abc73b3b3f11cad4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc4NDE2NThkNGZhNTE3NGQxNzk3ZWUwYWJjNzNiM2IzZjExY2FkNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-21T22:43:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-21T22:46:54Z"}, "message": "libstdc++: Fix __normal_iterator comparisons for C++20\n\nThis fixes a regression introduced when I replaced __normal_iterator's\nrelational operators with operator<=>. If the wrapped iterator type\ndoesn't define operator<=> then __normal_iterator doesdn't either, which\nbreaks any use of fancy pointers that don't define <=>. The regression\nwas found when trying to build cmcstl2.\n\nThe solution is to use synth-three-way to define __normal_iterator's\nspaceship operator, so that it is still defined even if the wrapped type\nonly supports operator<.\n\n\t* include/bits/stl_iterator.h (__normal_iterator): Use synth-three-way\n\tto define operator<=>.\n\t* testsuite/24_iterators/normal_iterator/cmp_c++20.cc: New test.", "tree": {"sha": "6521b688b2dcde6cafaebba2957f917bb10c959c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6521b688b2dcde6cafaebba2957f917bb10c959c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87841658d4fa5174d1797ee0abc73b3b3f11cad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87841658d4fa5174d1797ee0abc73b3b3f11cad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87841658d4fa5174d1797ee0abc73b3b3f11cad4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87841658d4fa5174d1797ee0abc73b3b3f11cad4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e665f256b4ac8c5f78713ebd4e9378fd4ecf5a8"}], "stats": {"total": 106, "additions": 102, "deletions": 4}, "files": [{"sha": "55df9a31244da3550b66e54b2f6bd6841c85d129", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87841658d4fa5174d1797ee0abc73b3b3f11cad4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87841658d4fa5174d1797ee0abc73b3b3f11cad4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=87841658d4fa5174d1797ee0abc73b3b3f11cad4", "patch": "@@ -1,5 +1,9 @@\n 2020-04-21  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/stl_iterator.h (__normal_iterator): Use synth-three-way\n+\tto define operator<=>.\n+\t* testsuite/24_iterators/normal_iterator/cmp_c++20.cc: New test.\n+\n \t* doc/Makefile.am (xml_sources_manual): Add missing XML files.\n \t* doc/Makefile.in: Regenerate.\n \t* doc/xml/manual/status_cxx1998.xml: Refer to \"this section\" instead"}, {"sha": "652f51c6e7fdb39373e5d07d2a6af0c5dd7400a9", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87841658d4fa5174d1797ee0abc73b3b3f11cad4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87841658d4fa5174d1797ee0abc73b3b3f11cad4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=87841658d4fa5174d1797ee0abc73b3b3f11cad4", "patch": "@@ -1048,12 +1048,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __lhs.base() == __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n-    constexpr auto\n+    constexpr std::__detail::__synth3way_t<_IteratorR, _IteratorL>\n     operator<=>(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t\tconst __normal_iterator<_IteratorR, _Container>& __rhs)\n-    noexcept(noexcept(__lhs.base() <=> __rhs.base()))\n-    -> decltype(__lhs.base() <=> __rhs.base())\n-    { return __lhs.base() <=> __rhs.base(); }\n+    noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))\n+    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }\n #else\n    // Forward iterator requirements\n   template<typename _IteratorL, typename _IteratorR, typename _Container>"}, {"sha": "a5014e8ae99ddec2f17cac025c439de3b9101765", "filename": "libstdc++-v3/testsuite/24_iterators/normal_iterator/cmp_c++20.cc", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87841658d4fa5174d1797ee0abc73b3b3f11cad4/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fnormal_iterator%2Fcmp_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87841658d4fa5174d1797ee0abc73b3b3f11cad4/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fnormal_iterator%2Fcmp_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fnormal_iterator%2Fcmp_c%2B%2B20.cc?ref=87841658d4fa5174d1797ee0abc73b3b3f11cad4", "patch": "@@ -0,0 +1,95 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+#include <vector>\n+#include <testsuite_allocator.h>\n+\n+void\n+test01()\n+{\n+  using V = std::vector<int>;\n+  static_assert( std::totally_ordered<V::iterator> );\n+  static_assert( std::three_way_comparable<V::iterator> );\n+  using C = std::compare_three_way_result_t<V::iterator>;\n+  static_assert( std::same_as<C, std::strong_ordering> );\n+\n+  static_assert( std::random_access_iterator<V::iterator> );\n+  static_assert( std::random_access_iterator<V::const_iterator> );\n+}\n+\n+// User-defined pointer type that supports operator< but not operator<=>\n+template<typename T>\n+struct Pointer : __gnu_test::PointerBase<Pointer<T>, T>\n+{\n+  using __gnu_test::PointerBase<Pointer<T>, T>::PointerBase;\n+\n+  friend bool operator<(const Pointer& lhs, const Pointer& rhs) noexcept\n+  { return lhs.value < rhs.value; }\n+\n+  std::partial_ordering operator<=>(const Pointer&) const = delete;\n+};\n+\n+// Minimal allocator using Pointer<T>\n+template<typename T>\n+struct Alloc\n+{\n+  typedef T value_type;\n+  typedef Pointer<T> pointer;\n+\n+  Alloc() = default;\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+\n+  pointer allocate(std::size_t n)\n+  { return pointer(std::allocator<T>().allocate(n)); }\n+\n+  void deallocate(pointer p, std::size_t n)\n+  { std::allocator<T>().deallocate(p.operator->(), n); }\n+};\n+\n+void\n+test02()\n+{\n+  using V = std::vector<int, Alloc<int>>;\n+  static_assert( std::totally_ordered<V::iterator> );\n+  static_assert( std::three_way_comparable<V::iterator> );\n+  using C = std::compare_three_way_result_t<V::iterator>;\n+  static_assert( std::same_as<C, std::weak_ordering> );\n+\n+  static_assert( std::random_access_iterator<V::iterator> );\n+  static_assert( std::random_access_iterator<V::const_iterator> );\n+}\n+\n+void\n+test03()\n+{\n+  struct P : Pointer<int> {\n+    bool operator<(const P&) const = delete;\n+  };\n+\n+  struct C {\n+    using pointer = P;\n+  };\n+\n+  using I = __gnu_cxx::__normal_iterator<P, C>;\n+  static_assert( ! std::totally_ordered<I> );\n+  static_assert( ! std::three_way_comparable<I> );\n+}"}]}