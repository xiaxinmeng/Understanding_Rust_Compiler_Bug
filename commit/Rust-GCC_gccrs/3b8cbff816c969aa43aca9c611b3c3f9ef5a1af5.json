{"sha": "3b8cbff816c969aa43aca9c611b3c3f9ef5a1af5", "node_id": "C_kwDOANBUbNoAKDNiOGNiZmY4MTZjOTY5YWE0M2FjYTljNjExYjNjM2Y5ZWY1YTFhZjU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-25T16:41:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-25T16:41:44Z"}, "message": "Merge #823\n\n823: Support generics on operator overlads. r=philberty a=philberty\n\nThis ports over some code from the method-call expr to try and infer the\r\narguments in the function definition when required.\r\n\r\n\r\nAddresses #809 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "f68808de647e3a65444b436e5aeca62386b52f59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f68808de647e3a65444b436e5aeca62386b52f59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b8cbff816c969aa43aca9c611b3c3f9ef5a1af5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhn7zICRBK7hj4Ov3rIwAAlSMIAIecIrVYnwUtkfI5w1ksKxT2\n8HLB7rZFi+4VGRZ4neMfsOK9UiP0eEa9+BDBYhNSZMfm0X37pukhdPe538Mue40J\nGC8SW0GKgNKyiWSFuisOeYjHulydh3gGfnbozewVWOI6rGgBU2PFEc3lTM73F4+5\n5WwOorlnKVFyvl8+iMeObnFDcV+DogT6gdSpk3sANsF0TiCZyio2ZWj9HPjHAAXz\n5mZUwzU4EoGtVejYj5Og5DevyjSKfblh+uMSqvT+GwpgzssGEhCkGrxcpMJRiGJ5\n61hssLDBoP8B9dmWkJRnR4LIyQXXbAAEiJ7c0mCTll42UROFDxUVJ0iJ2nUoe2s=\n=tImh\n-----END PGP SIGNATURE-----\n", "payload": "tree f68808de647e3a65444b436e5aeca62386b52f59\nparent cf913e7f2985fa5a2ab3bf8f3ba861855afe4e37\nparent ec23757d36928b9e59e3236790378cf824e7ab49\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1637858504 +0000\ncommitter GitHub <noreply@github.com> 1637858504 +0000\n\nMerge #823\n\n823: Support generics on operator overlads. r=philberty a=philberty\n\nThis ports over some code from the method-call expr to try and infer the\r\narguments in the function definition when required.\r\n\r\n\r\nAddresses #809 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8cbff816c969aa43aca9c611b3c3f9ef5a1af5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b8cbff816c969aa43aca9c611b3c3f9ef5a1af5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8cbff816c969aa43aca9c611b3c3f9ef5a1af5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf913e7f2985fa5a2ab3bf8f3ba861855afe4e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf913e7f2985fa5a2ab3bf8f3ba861855afe4e37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf913e7f2985fa5a2ab3bf8f3ba861855afe4e37"}, {"sha": "ec23757d36928b9e59e3236790378cf824e7ab49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec23757d36928b9e59e3236790378cf824e7ab49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec23757d36928b9e59e3236790378cf824e7ab49"}], "stats": {"total": 128, "additions": 67, "deletions": 61}, "files": [{"sha": "5d6017c059c31f06b9a105a59883e2c4cdbb5031", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 67, "deletions": 61, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8cbff816c969aa43aca9c611b3c3f9ef5a1af5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8cbff816c969aa43aca9c611b3c3f9ef5a1af5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=3b8cbff816c969aa43aca9c611b3c3f9ef5a1af5", "patch": "@@ -1264,93 +1264,87 @@ class TypeCheckExpr : public TypeCheckBase\n     const TyTy::BaseType *root = lhs->get_root ();\n \n     // look up lang item for arithmetic type\n-    std::vector<PathProbeCandidate> candidates;\n     std::string associated_item_name\n       = Analysis::RustLangItem::ToString (lang_item_type);\n     DefId respective_lang_item_id = UNKNOWN_DEFID;\n     bool lang_item_defined\n       = mappings->lookup_lang_item (lang_item_type, &respective_lang_item_id);\n \n     // probe for the lang-item\n-    if (lang_item_defined)\n-      {\n-\tbool receiver_is_type_param\n-\t  = root->get_kind () == TyTy::TypeKind::PARAM;\n-\tbool receiver_is_dyn = root->get_kind () == TyTy::TypeKind::DYNAMIC;\n-\n-\tbool receiver_is_generic = receiver_is_type_param || receiver_is_dyn;\n-\tbool probe_bounds = true;\n-\tbool probe_impls = !receiver_is_generic;\n-\tbool ignore_mandatory_trait_items = !receiver_is_generic;\n-\n-\tcandidates = PathProbeType::Probe (\n-\t  root, HIR::PathIdentSegment (associated_item_name), probe_impls,\n-\t  probe_bounds, ignore_mandatory_trait_items, respective_lang_item_id);\n-      }\n+    if (!lang_item_defined)\n+      return false;\n+\n+    bool receiver_is_type_param = root->get_kind () == TyTy::TypeKind::PARAM;\n+    bool receiver_is_dyn = root->get_kind () == TyTy::TypeKind::DYNAMIC;\n+    bool receiver_is_generic = receiver_is_type_param || receiver_is_dyn;\n+    bool probe_bounds = true;\n+    bool probe_impls = !receiver_is_generic;\n+    bool ignore_mandatory_trait_items = !receiver_is_generic;\n \n-    // autoderef\n+    auto candidates = PathProbeType::Probe (\n+      root, HIR::PathIdentSegment (associated_item_name), probe_impls,\n+      probe_bounds, ignore_mandatory_trait_items, respective_lang_item_id);\n+\n+    // autoderef to find the relevant method\n     std::vector<Adjustment> adjustments;\n     PathProbeCandidate *resolved_candidate\n       = MethodResolution::Select (candidates, lhs, adjustments);\n+    if (resolved_candidate == nullptr)\n+      return false;\n+\n+    bool have_implementation_for_lang_item = resolved_candidate != nullptr;\n+    if (!have_implementation_for_lang_item)\n+      return false;\n \n     // mark the required tree addressable\n+    Adjuster adj (lhs);\n+    TyTy::BaseType *receiver_adjusted_self_ty = adj.adjust_type (adjustments);\n     if (Adjuster::needs_address (adjustments))\n       AddressTakenResolver::SetAddressTaken (*expr.get_expr ().get ());\n \n     // is this the case we are recursive\n     // handle the case where we are within the impl block for this lang_item\n     // otherwise we end up with a recursive operator overload such as the i32\n     // operator overload trait\n-    if (lang_item_defined && resolved_candidate != nullptr)\n+    TypeCheckContextItem &fn_context = context->peek_context ();\n+    if (fn_context.get_type () == TypeCheckContextItem::ItemType::IMPL_ITEM)\n       {\n-\tTypeCheckContextItem &fn_context = context->peek_context ();\n-\tif (fn_context.get_type () == TypeCheckContextItem::ItemType::IMPL_ITEM)\n-\t  {\n-\t    auto &impl_item = fn_context.get_impl_item ();\n-\t    HIR::ImplBlock *parent = impl_item.first;\n-\t    HIR::Function *fn = impl_item.second;\n+\tauto &impl_item = fn_context.get_impl_item ();\n+\tHIR::ImplBlock *parent = impl_item.first;\n+\tHIR::Function *fn = impl_item.second;\n \n-\t    if (parent->has_trait_ref ()\n-\t\t&& fn->get_function_name ().compare (associated_item_name) == 0)\n+\tif (parent->has_trait_ref ()\n+\t    && fn->get_function_name ().compare (associated_item_name) == 0)\n+\t  {\n+\t    TraitReference *trait_reference\n+\t      = TraitResolver::Lookup (*parent->get_trait_ref ().get ());\n+\t    if (!trait_reference->is_error ())\n \t      {\n-\t\tTraitReference *trait_reference\n-\t\t  = TraitResolver::Lookup (*parent->get_trait_ref ().get ());\n-\t\tif (!trait_reference->is_error ())\n-\t\t  {\n-\t\t    TyTy::BaseType *lookup = nullptr;\n-\t\t    bool ok\n-\t\t      = context->lookup_type (fn->get_mappings ().get_hirid (),\n-\t\t\t\t\t      &lookup);\n-\t\t    rust_assert (ok);\n-\t\t    rust_assert (lookup->get_kind () == TyTy::TypeKind::FNDEF);\n-\n-\t\t    TyTy::FnType *fntype = static_cast<TyTy::FnType *> (lookup);\n-\t\t    rust_assert (fntype->is_method ());\n-\n-\t\t    Adjuster adj (lhs);\n-\t\t    TyTy::BaseType *adjusted = adj.adjust_type (adjustments);\n-\n-\t\t    bool is_lang_item_impl\n-\t\t      = trait_reference->get_mappings ().get_defid ()\n-\t\t\t== respective_lang_item_id;\n-\t\t    bool self_is_lang_item_self\n-\t\t      = fntype->get_self_type ()->is_equal (*adjusted);\n-\t\t    bool recursive_operator_overload\n-\t\t      = is_lang_item_impl && self_is_lang_item_self;\n-\n-\t\t    lang_item_defined = !recursive_operator_overload;\n-\t\t  }\n+\t\tTyTy::BaseType *lookup = nullptr;\n+\t\tbool ok\n+\t\t  = context->lookup_type (fn->get_mappings ().get_hirid (),\n+\t\t\t\t\t  &lookup);\n+\t\trust_assert (ok);\n+\t\trust_assert (lookup->get_kind () == TyTy::TypeKind::FNDEF);\n+\n+\t\tTyTy::FnType *fntype = static_cast<TyTy::FnType *> (lookup);\n+\t\trust_assert (fntype->is_method ());\n+\n+\t\tbool is_lang_item_impl\n+\t\t  = trait_reference->get_mappings ().get_defid ()\n+\t\t    == respective_lang_item_id;\n+\t\tbool self_is_lang_item_self\n+\t\t  = fntype->get_self_type ()->is_equal (\n+\t\t    *receiver_adjusted_self_ty);\n+\t\tbool recursive_operator_overload\n+\t\t  = is_lang_item_impl && self_is_lang_item_self;\n+\n+\t\tif (recursive_operator_overload)\n+\t\t  return false;\n \t      }\n \t  }\n       }\n \n-    bool have_implementation_for_lang_item = resolved_candidate != nullptr;\n-    if (!lang_item_defined || !have_implementation_for_lang_item)\n-      {\n-\t// no operator overload exists for this\n-\treturn false;\n-      }\n-\n     // now its just like a method-call-expr\n     context->insert_receiver (expr.get_mappings ().get_hirid (), lhs);\n \n@@ -1425,8 +1419,20 @@ class TypeCheckExpr : public TypeCheckBase\n \t  }\n       }\n \n+    // handle generics\n+    if (!receiver_is_type_param)\n+      {\n+\tif (lookup->needs_generic_substitutions ())\n+\t  {\n+\t    lookup = SubstMapper::InferSubst (lookup, expr.get_locus ());\n+\t  }\n+      }\n+\n     // type check the arguments if required\n     TyTy::FnType *type = static_cast<TyTy::FnType *> (lookup);\n+    rust_assert (type->num_params () > 0);\n+    auto fnparam = type->param_at (0);\n+    fnparam.second->unify (receiver_adjusted_self_ty); // typecheck the self\n     if (rhs == nullptr)\n       {\n \trust_assert (type->num_params () == 1);\n@@ -1439,7 +1445,7 @@ class TypeCheckExpr : public TypeCheckBase\n       }\n \n     // get the return type\n-    TyTy::BaseType *function_ret_tyty = fn->get_return_type ()->clone ();\n+    TyTy::BaseType *function_ret_tyty = type->get_return_type ()->clone ();\n \n     // store the expected fntype\n     context->insert_operator_overload (expr.get_mappings ().get_hirid (), type);"}]}