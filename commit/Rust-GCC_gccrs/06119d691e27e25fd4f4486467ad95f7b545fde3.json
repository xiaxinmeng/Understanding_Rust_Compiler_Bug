{"sha": "06119d691e27e25fd4f4486467ad95f7b545fde3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYxMTlkNjkxZTI3ZTI1ZmQ0ZjQ0ODY0NjdhZDk1ZjdiNTQ1ZmRlMw==", "commit": {"author": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-02-18T15:54:13Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-02-18T15:54:13Z"}, "message": "[fortran] ICE assign character pointer to non target PR93714\n\nAn ICE occurred if an attempt was made to assign a pointer to a\ncharacter variable that has an length incorrectly specified using\na real constant and does not have the target attribute.\n\ngcc/fortran/ChangeLog\n\n\tPR fortran/93714\n\t* expr.c (gfc_check_pointer_assign): Move check for\n\tmatching character length to after checking the lvalue\n\tattributes for target or pointer.\n\ngcc/testsuite/ChangeLog\n\n\tPR fortran/93714\n\t* gfortran.dg/char_pointer_assign_6.f90: Look for no target\n\tmessage instead of length mismatch.\n\t* gfortran.dg/pr93714_1.f90\n\t* gfortran.dg/pr93714_2.f90", "tree": {"sha": "b9c03f0e0c5fb9d25dbba9d92efb98427e8c8bd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9c03f0e0c5fb9d25dbba9d92efb98427e8c8bd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06119d691e27e25fd4f4486467ad95f7b545fde3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06119d691e27e25fd4f4486467ad95f7b545fde3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06119d691e27e25fd4f4486467ad95f7b545fde3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06119d691e27e25fd4f4486467ad95f7b545fde3/comments", "author": null, "committer": null, "parents": [{"sha": "fa1160f6e50500aa38162fefb43bfb10c25e0363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa1160f6e50500aa38162fefb43bfb10c25e0363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa1160f6e50500aa38162fefb43bfb10c25e0363"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "7547dccd79a9c62e395c16bf74455d66af295d59", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06119d691e27e25fd4f4486467ad95f7b545fde3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06119d691e27e25fd4f4486467ad95f7b545fde3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=06119d691e27e25fd4f4486467ad95f7b545fde3", "patch": "@@ -1,3 +1,10 @@\n+2020-02-18  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/93714\n+\t* expr.c (gfc_check_pointer_assign): Move check for\n+\tmatching character length to after checking the lvalue\n+\tattributes for target or pointer.\n+\n 2020-02-18  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/93601"}, {"sha": "79e00b4112a926a0f594e2c6273b1804b906ffe2", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06119d691e27e25fd4f4486467ad95f7b545fde3/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06119d691e27e25fd4f4486467ad95f7b545fde3/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=06119d691e27e25fd4f4486467ad95f7b545fde3", "patch": "@@ -4222,13 +4222,6 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue,\n   if (rvalue->expr_type == EXPR_NULL)\n     return true;\n \n-  if (lvalue->ts.type == BT_CHARACTER)\n-    {\n-      bool t = gfc_check_same_strlen (lvalue, rvalue, \"pointer assignment\");\n-      if (!t)\n-\treturn false;\n-    }\n-\n   if (rvalue->expr_type == EXPR_VARIABLE && is_subref_array (rvalue))\n     lvalue->symtree->n.sym->attr.subref_array_pointer = 1;\n \n@@ -4284,6 +4277,13 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue,\n \t}\n     }\n \n+  if (lvalue->ts.type == BT_CHARACTER)\n+    {\n+      bool t = gfc_check_same_strlen (lvalue, rvalue, \"pointer assignment\");\n+      if (!t)\n+\treturn false;\n+    }\n+\n   if (is_pure && gfc_impure_variable (rvalue->symtree->n.sym))\n     {\n       gfc_error (\"Bad target in pointer assignment in PURE \""}, {"sha": "270644a97d2cfa39ae07e9c3541472cf32423851", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06119d691e27e25fd4f4486467ad95f7b545fde3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06119d691e27e25fd4f4486467ad95f7b545fde3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06119d691e27e25fd4f4486467ad95f7b545fde3", "patch": "@@ -1,3 +1,11 @@\n+2020-02-18  Mark Eggleston <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/93714\n+\t* gfortran.dg/char_pointer_assign_6.f90: Look for no target\n+\tmessage instead of length mismatch.\n+\t* gfortran.dg/pr93714_1.f90\n+\t* gfortran.dg/pr93714_2.f90\n+\n 2020-02-18  Mark Eggleston  <mark.eggleston@codethink.com>\n \n \tPR fortran/93601"}, {"sha": "e0e116074aeef82cd2bad8a126eb5d0bbe6aeccf", "filename": "gcc/testsuite/gfortran.dg/char_pointer_assign_6.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06119d691e27e25fd4f4486467ad95f7b545fde3/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_assign_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06119d691e27e25fd4f4486467ad95f7b545fde3/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_assign_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_assign_6.f90?ref=06119d691e27e25fd4f4486467ad95f7b545fde3", "patch": "@@ -6,6 +6,6 @@ program main\n   character (len=4) :: c\n   s1 = 'abcd'\n   p1 => s1(2:3) ! { dg-error \"Unequal character lengths \\\\(20/2\\\\)\" }\n-  p1 => c(1:) ! { dg-error \"Unequal character lengths \\\\(20/4\\\\)\" }\n-  p1 => c(:4) ! { dg-error \"Unequal character lengths \\\\(20/4\\\\)\" }\n+  p1 => c(1:) ! { dg-error \"Pointer assignment target\" }\n+  p1 => c(:4) ! { dg-error \"Pointer assignment target\" }\n end"}, {"sha": "40f4a4bf89f0fc5a6645b12c8ff6bdd47315985c", "filename": "gcc/testsuite/gfortran.dg/pr93714_1.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06119d691e27e25fd4f4486467ad95f7b545fde3/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93714_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06119d691e27e25fd4f4486467ad95f7b545fde3/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93714_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93714_1.f90?ref=06119d691e27e25fd4f4486467ad95f7b545fde3", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! PR 93714\n+! Original test case from G. Steinmetz\n+\n+program test\n+   character((1.)) :: a\n+   character, pointer :: b => a\n+end program\n+\n+! { dg-error \"must be of INTEGER type\" \" \" { target *-*-* } 6 }\n+! { dg-error \"does not have the TARGET attribute\" \" \" { target *-*-* } 7 }"}, {"sha": "86658f2885941372da6fed9e896f6f451c4b340e", "filename": "gcc/testsuite/gfortran.dg/pr93714_2.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06119d691e27e25fd4f4486467ad95f7b545fde3/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93714_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06119d691e27e25fd4f4486467ad95f7b545fde3/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93714_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93714_2.f90?ref=06119d691e27e25fd4f4486467ad95f7b545fde3", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! PR 93714\n+! Original test case from G. Steinmetz\n+\n+program test\n+   character((9.)) :: a\n+   character(:), pointer :: b => a\n+end program\n+\n+! { dg-error \"must be of INTEGER type\" \" \" { target *-*-* } 6 }\n+! { dg-error \"does not have the TARGET attribute\" \" \" { target *-*-* } 7 }"}]}