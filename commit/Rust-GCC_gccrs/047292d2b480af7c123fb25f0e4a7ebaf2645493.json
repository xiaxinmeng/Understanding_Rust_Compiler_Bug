{"sha": "047292d2b480af7c123fb25f0e4a7ebaf2645493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ3MjkyZDJiNDgwYWY3YzEyM2ZiMjVmMGU0YTdlYmFmMjY0NTQ5Mw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-01-19T05:00:30Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-01-19T05:00:30Z"}, "message": "entered into RCS\n\nFrom-SVN: r219", "tree": {"sha": "5819d871bdbe3a2d7c1284fda7458f200cfbaa66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5819d871bdbe3a2d7c1284fda7458f200cfbaa66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/047292d2b480af7c123fb25f0e4a7ebaf2645493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047292d2b480af7c123fb25f0e4a7ebaf2645493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/047292d2b480af7c123fb25f0e4a7ebaf2645493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047292d2b480af7c123fb25f0e4a7ebaf2645493/comments", "author": null, "committer": null, "parents": [{"sha": "beb3b34a38e833681c483638512e3baf1057d140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb3b34a38e833681c483638512e3baf1057d140", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb3b34a38e833681c483638512e3baf1057d140"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "7bff7e848c8fe886e11ff7d88c3deaa4c857c01c", "filename": "gcc/config/m68k/isi.h", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047292d2b480af7c123fb25f0e4a7ebaf2645493/gcc%2Fconfig%2Fm68k%2Fisi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047292d2b480af7c123fb25f0e4a7ebaf2645493/gcc%2Fconfig%2Fm68k%2Fisi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fisi.h?ref=047292d2b480af7c123fb25f0e4a7ebaf2645493", "patch": "@@ -0,0 +1,88 @@\n+/* Definitions of target machine for GNU compiler.  ISI 68000/68020 version.\n+   Intended only for use with GAS, and not ISI's assembler, which is buggy\n+   Copyright (C) 1988 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"m68k.h\"\n+\n+/* Without STRUCTURE_SIZE_BOUNDARY, we can't ensure that structures are\n+   aligned such that we can correctly extract bitfields from them.\n+   Someone should check whether the usual compiler on this machine\n+   provides the equivalent behavior of STRUCTURE_SIZE_BOUNDARY.  */\n+/* Alternative solutions are (1) define PCC_BITFIELD_TYPE_MATTERS,\n+   if that fits what the usual compiler does,\n+   or disable the -m68000 and -mnobitfield options.  */\n+#error This doesn't define STRUCTURE_SIZE_BOUNDARY\n+\n+/* See m68k.h.  7 means 68020 with 68881. */\n+\n+#ifndef TARGET_DEFAULT\n+#define TARGET_DEFAULT 7\n+#endif\n+\n+#if TARGET_DEFAULT & 2\n+/* Define __HAVE_68881__ in preprocessor, unless -msoft-float is specified.\n+   This will control the use of inline 68881 insns in certain macros.  */\n+\n+#define CPP_SPEC \"%{!msoft-float:-D__HAVE_68881__}\"\n+\n+/* If the 68881 is used, link must load libmc.a instead of libc.a */\n+\n+#define LIB_SPEC \"%{g:-lg} %{msoft-float:%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}}%{!msoft-float:%{!p:%{!pg:-lmc}}%{p:-lmc_p}%{pg:-lmc_p}} %{g:-lg}\"\n+\n+#else\n+/* Define __HAVE_68881__ in preprocessor if -m68881 is specified.\n+   This will control the use of inline 68881 insns in certain macros.  */\n+\n+#define CPP_SPEC \"%{m68881:-D__HAVE_68881__}\"\n+\n+/* If the 68881 is used, link must load libmc.a instead of libc.a */\n+\n+#define LIB_SPEC \"%{g:-lg} %{!m68881:%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}}%{m68881:%{!p:%{!pg:-lmc}}%{p:-lmc_p}%{pg:-lmc_p}}\"\n+#endif\n+\n+/* Names to predefine in the preprocessor for this target machine.  */\n+\n+#define CPP_PREDEFINES \"-Dunix -Dmc68000 -Dis68k\"\n+\n+/* This is BSD, so it wants DBX format.  */\n+\n+#define DBX_DEBUGGING_INFO\n+\n+/* Override parts of m68k.h to fit the ISI 68k machine.  */\n+\n+#undef FUNCTION_VALUE\n+#undef LIBCALL_VALUE\n+#undef FUNCTION_VALUE_REGNO_P\n+#undef ASM_FILE_START\n+\n+/* If TARGET_68881, return SF and DF values in f0 instead of d0.  */\n+\n+#define FUNCTION_VALUE(VALTYPE,FUNC) LIBCALL_VALUE (TYPE_MODE (VALTYPE))\n+\n+#define LIBCALL_VALUE(MODE) \\\n+ gen_rtx (REG, (MODE), ((TARGET_68881 && ((MODE) == SFmode || (MODE) == DFmode)) ? 16 : 0))\n+\n+/* 1 if N is a possible register number for a function value.\n+   D0 may be used, and F0 as well if -m68881 is specified.  */\n+\n+#define FUNCTION_VALUE_REGNO_P(N) \\\n+ ((N) == 0 || (TARGET_68881 && (N) == 16))\n+\n+/* Also output something to cause the correct _doprnt to be loaded.  */\n+#define ASM_FILE_START(FILE) fprintf (FILE, \"#NO_APP\\n%s\\n\", TARGET_68881 ? \".globl fltused\" : \"\")"}]}