{"sha": "8f2b097ed54816d28cd51254c8e4616404ae348e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyYjA5N2VkNTQ4MTZkMjhjZDUxMjU0YzhlNDYxNjQwNGFlMzQ4ZQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2017-11-13T17:02:06Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2017-11-13T17:02:06Z"}, "message": "Remove the null check from placement new in all modes\n\ngcc/cp/\n\nRemove the null check from placement new in all modes\n* init.c (build_new_1): Don't do a null check for\na namespace-scope non-replaceable placement new\nin any mode unless -fcheck-new is provided.\n\ntestsuite/\n\nRemove the null check from placement new in all modes\n* g++.dg/init/pr35878_1.C: Adjust.\n* g++.dg/init/pr35878_4.C: New.\n* g++.dg/torture/pr48695.C: Adjust.\n* g++.dg/tree-ssa/pr31146-2.C: Likewise.\n* g++.dg/tree-ssa/pr41428.C: Adjust.\n\nFrom-SVN: r254694", "tree": {"sha": "da7596f768a618dc8ddfbf2e19b6126dcb440a16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da7596f768a618dc8ddfbf2e19b6126dcb440a16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f2b097ed54816d28cd51254c8e4616404ae348e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2b097ed54816d28cd51254c8e4616404ae348e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f2b097ed54816d28cd51254c8e4616404ae348e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2b097ed54816d28cd51254c8e4616404ae348e/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81766d13a8e51e7432e2c1ff3fd1ef4735e3b820", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81766d13a8e51e7432e2c1ff3fd1ef4735e3b820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81766d13a8e51e7432e2c1ff3fd1ef4735e3b820"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "73fa99967edc0bfb6d8a8b37152093dc41fe098e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2b097ed54816d28cd51254c8e4616404ae348e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2b097ed54816d28cd51254c8e4616404ae348e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8f2b097ed54816d28cd51254c8e4616404ae348e", "patch": "@@ -1,3 +1,10 @@\n+2017-11-13  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tRemove the null check from placement new in all modes\n+\t* init.c (build_new_1): Don't do a null check for\n+\ta namespace-scope non-replaceable placement new\n+\tin any mode unless -fcheck-new is provided.\n+\n 2017-11-07 Boris Kolpackov  <boris@codesynthesis.com>\n \n \t* Make-lang.in (CP_PLUGIN_HEADERS): Add operators.def since included"}, {"sha": "1fcd91d108db64eb7ee9a08510923cde1525d9ad", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2b097ed54816d28cd51254c8e4616404ae348e/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2b097ed54816d28cd51254c8e4616404ae348e/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=8f2b097ed54816d28cd51254c8e4616404ae348e", "patch": "@@ -2758,7 +2758,7 @@ malloc_alignment ()\n static bool\n std_placement_new_fn_p (tree alloc_fn)\n {\n-  if ((cxx_dialect > cxx14) && DECL_NAMESPACE_SCOPE_P (alloc_fn))\n+  if (DECL_NAMESPACE_SCOPE_P (alloc_fn))\n     {\n       tree first_arg = TREE_CHAIN (TYPE_ARG_TYPES (TREE_TYPE (alloc_fn)));\n       if ((TREE_VALUE (first_arg) == ptr_type_node)"}, {"sha": "7fb3221a3273066e0cf10c51a640d341fe6ba824", "filename": "gcc/testsuite/g++.dg/init/pr35878_1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2b097ed54816d28cd51254c8e4616404ae348e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2b097ed54816d28cd51254c8e4616404ae348e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_1.C?ref=8f2b097ed54816d28cd51254c8e4616404ae348e", "patch": "@@ -1,7 +1,7 @@\n // PR c++/35878\n // { dg-do compile }\n // { dg-options \"-O2 -std=gnu++11 -fdump-tree-optimized\" }\n-// { dg-final { scan-tree-dump-times \"v_\\[0-9]+\\\\(D\\\\) \\[=!]= 0\" 1 \"optimized\" } }\n+// { dg-final { scan-tree-dump-not \"v_\\[0-9]+\\\\(D\\\\) \\[=!]= 0\" \"optimized\" } }\n \n #include <new>\n #include <utility>"}, {"sha": "bd275655a63af9e87538b1007ed4baad9295e33f", "filename": "gcc/testsuite/g++.dg/init/pr35878_4.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2b097ed54816d28cd51254c8e4616404ae348e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2b097ed54816d28cd51254c8e4616404ae348e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_4.C?ref=8f2b097ed54816d28cd51254c8e4616404ae348e", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/35878\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=gnu++11 -fcheck-new -fdump-tree-optimized\" }\n+// { dg-final { scan-tree-dump-times \"v_\\[0-9]+\\\\(D\\\\) \\[=!]= 0\" 1 \"optimized\" } }\n+\n+#include <new>\n+#include <utility>\n+\n+struct s1{\n+  int a;\n+  int b;\n+  int c;\n+};\n+\n+void f1 (s1 * v, s1&& s)\n+{\n+\tnew (v) s1(std::move(s));\n+}\n+\n+void f2 (s1 * v, s1&& s)\n+{\n+\t*v = std::move(s);\n+}"}, {"sha": "2f2953d9999c418996e0d050e97d4b6490a71ea1", "filename": "gcc/testsuite/g++.dg/torture/pr48695.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2b097ed54816d28cd51254c8e4616404ae348e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr48695.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2b097ed54816d28cd51254c8e4616404ae348e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr48695.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr48695.C?ref=8f2b097ed54816d28cd51254c8e4616404ae348e", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run }\n+/* { dg-options \"-fcheck-new\" } */\n \n typedef __SIZE_TYPE__ size_t;\n "}, {"sha": "9fb5dc1b60c28828b22d71b729b9919461d4cd4f", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr31146-2.C", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2b097ed54816d28cd51254c8e4616404ae348e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr31146-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2b097ed54816d28cd51254c8e4616404ae348e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr31146-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr31146-2.C?ref=8f2b097ed54816d28cd51254c8e4616404ae348e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fno-tree-vrp -fdump-tree-forwprop1\" } */\n+/* { dg-options \"-O -fcheck-new -fno-tree-vrp -fdump-tree-forwprop1\" } */\n \n #include <new>\n \n@@ -20,6 +20,5 @@ double foo (void)\n   return v.a[2];\n }\n \n-/* -std=c++17 and above doesn't emit operator new () != NULL, so there is\n-   nothing to fold anymore.  */\n-/* { dg-final { scan-tree-dump \"Replaced .* != 0B. with .1\" \"forwprop1\" { target c++14_down } } } */\n+/* GCC 8 emits operator new () != NULL with -fcheck-new. */\n+/* { dg-final { scan-tree-dump \"Replaced .* != 0B. with .1\" \"forwprop1\" } } */"}, {"sha": "7aff519e746eaed963dcd7868cd81e050bc2b18c", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr41428.C", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2b097ed54816d28cd51254c8e4616404ae348e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr41428.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2b097ed54816d28cd51254c8e4616404ae348e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr41428.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr41428.C?ref=8f2b097ed54816d28cd51254c8e4616404ae348e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-ccp1-details\" } */\n+/* { dg-options \"-O -fcheck-new -fdump-tree-ccp1-details\" } */\n \n extern \"C\" void abort (void);\n inline void *operator new (__SIZE_TYPE__, void *__p) throw () { return __p; }\n@@ -11,6 +11,5 @@ int foo(void)\n   return *(int *)&f;\n }\n \n-/* -std=c++17 and above doesn't emit operator new () != NULL, so there is\n-   nothing to fold anymore.  */\n-/* { dg-final { scan-tree-dump \"Folded into: if \\\\\\(1 != 0\\\\\\)\" \"ccp1\" { target c++14_down } } } */\n+/* GCC 8 emits operator new () != NULL with -fcheck-new. */\n+/* { dg-final { scan-tree-dump \"Folded into: if \\\\\\(1 != 0\\\\\\)\" \"ccp1\" } } */"}]}