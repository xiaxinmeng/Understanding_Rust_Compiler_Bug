{"sha": "bd400db6d3ec167142ace352db00f84d382e33a8", "node_id": "C_kwDOANBUbNoAKGJkNDAwZGI2ZDNlYzE2NzE0MmFjZTM1MmRiMDBmODRkMzgyZTMzYTg", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-10-15T16:06:27Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-10-21T13:28:23Z"}, "message": "Add --param=vrp1-mode and --param=vrp2-mode.\n\nAdd 2 new params to select between VRP and RANGER to be used for each pass.\n\n\t* doc/invoke.texi: (vrp1-mode, vrp2-mode): Document.\n\t* flag-types.h: (enum vrp_mode): New.\n\t* params.opt: (vrp1-mode, vrp2-mode): New.\n\t* tree-vrp.c (vrp_pass_num): New.\n\t(pass_vrp::pass_vrp): Set pass number.\n\t(pass_vrp::execute): Choose which VRP mode to execute.", "tree": {"sha": "820a241aa40f9a53beb75f75cc0634ea66dc0c5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/820a241aa40f9a53beb75f75cc0634ea66dc0c5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd400db6d3ec167142ace352db00f84d382e33a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd400db6d3ec167142ace352db00f84d382e33a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd400db6d3ec167142ace352db00f84d382e33a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd400db6d3ec167142ace352db00f84d382e33a8/comments", "author": null, "committer": null, "parents": [{"sha": "434ebc1e08b1d83ecd3622ee2a3c7270869bda52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/434ebc1e08b1d83ecd3622ee2a3c7270869bda52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/434ebc1e08b1d83ecd3622ee2a3c7270869bda52"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "b89f9b61f9cfada0fe437373f9ffef04d05cb4ca", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd400db6d3ec167142ace352db00f84d382e33a8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd400db6d3ec167142ace352db00f84d382e33a8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bd400db6d3ec167142ace352db00f84d382e33a8", "patch": "@@ -14504,6 +14504,12 @@ Maximum number of basic blocks before EVRP uses a sparse cache.\n @item evrp-mode\n Specifies the mode Early VRP should operate in.\n \n+@item vrp1-mode\n+Specifies the mode VRP pass 1 should operate in.\n+\n+@item vrp2-mode\n+Specifies the mode VRP pass 2 should operate in.\n+\n @item evrp-switch-limit\n Specifies the maximum number of switch cases before EVRP ignores a switch.\n "}, {"sha": "9f104e43d40c2395addbd04c5fa18d619c9c4f33", "filename": "gcc/flag-types.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd400db6d3ec167142ace352db00f84d382e33a8/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd400db6d3ec167142ace352db00f84d382e33a8/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=bd400db6d3ec167142ace352db00f84d382e33a8", "patch": "@@ -463,6 +463,13 @@ enum evrp_mode\n   EVRP_MODE_DEBUG = (EVRP_MODE_GORI | EVRP_MODE_CACHE)\n };\n \n+/* VRP modes.  */\n+enum vrp_mode\n+{\n+  VRP_MODE_VRP,\n+  VRP_MODE_RANGER\n+};\n+\n /* Modes of OpenACC 'kernels' constructs handling.  */\n enum openacc_kernels\n {"}, {"sha": "27ef4b6578f2eb3705100fe08d2de1736e2ee624", "filename": "gcc/params.opt", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd400db6d3ec167142ace352db00f84d382e33a8/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd400db6d3ec167142ace352db00f84d382e33a8/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=bd400db6d3ec167142ace352db00f84d382e33a8", "patch": "@@ -1137,4 +1137,21 @@ Controls how loop vectorizer uses partial vectors.  0 means never, 1 means only\n Common Joined UInteger Var(param_vect_inner_loop_cost_factor) Init(50) IntegerRange(1, 10000) Param Optimization\n The maximum factor which the loop vectorizer applies to the cost of statements in an inner loop relative to the loop being vectorized.\n \n+-param=vrp1-mode=\n+Common Joined Var(param_vrp1_mode) Enum(vrp_mode) Init(VRP_MODE_VRP) Param Optimization\n+--param=vrp1-mode=[vrp|ranger] Specifies the mode VRP1 should operate in.\n+\n+-param=vrp2-mode=\n+Common Joined Var(param_vrp2_mode) Enum(vrp_mode) Init(VRP_MODE_VRP) Param Optimization\n+--param=vrp2-mode=[vrp|ranger] Specifies the mode VRP2 should operate in.\n+\n+Enum\n+Name(vrp_mode) Type(enum vrp_mode) UnknownError(unknown vrp mode %qs)\n+\n+EnumValue\n+Enum(vrp_mode) String(vrp) Value(VRP_MODE_VRP)\n+\n+EnumValue\n+Enum(vrp_mode) String(ranger) Value(VRP_MODE_RANGER)\n+\n ; This comment is to ensure we retain the blank line above."}, {"sha": "ba7a4efc7c6cd5259ee270422f3fd81a110df97a", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd400db6d3ec167142ace352db00f84d382e33a8/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd400db6d3ec167142ace352db00f84d382e33a8/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=bd400db6d3ec167142ace352db00f84d382e33a8", "patch": "@@ -4450,11 +4450,13 @@ const pass_data pass_data_vrp =\n   ( TODO_cleanup_cfg | TODO_update_ssa ), /* todo_flags_finish */\n };\n \n+static int vrp_pass_num = 0;\n class pass_vrp : public gimple_opt_pass\n {\n public:\n   pass_vrp (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_vrp, ctxt), warn_array_bounds_p (false)\n+    : gimple_opt_pass (pass_data_vrp, ctxt), warn_array_bounds_p (false),\n+      my_pass (++vrp_pass_num)\n   {}\n \n   /* opt_pass methods: */\n@@ -4466,10 +4468,16 @@ class pass_vrp : public gimple_opt_pass\n     }\n   virtual bool gate (function *) { return flag_tree_vrp != 0; }\n   virtual unsigned int execute (function *fun)\n-    { return execute_vrp (fun, warn_array_bounds_p); }\n+    {\n+      if ((my_pass == 1 && param_vrp1_mode == VRP_MODE_RANGER)\n+\t  || (my_pass == 2 && param_vrp2_mode == VRP_MODE_RANGER))\n+\treturn execute_ranger_vrp (fun, warn_array_bounds_p);\n+      return execute_vrp (fun, warn_array_bounds_p);\n+    }\n \n  private:\n   bool warn_array_bounds_p;\n+  int my_pass;\n }; // class pass_vrp\n \n } // anon namespace"}]}