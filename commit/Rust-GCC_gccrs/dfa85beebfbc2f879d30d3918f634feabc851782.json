{"sha": "dfa85beebfbc2f879d30d3918f634feabc851782", "node_id": "C_kwDOANBUbNoAKGRmYTg1YmVlYmZiYzJmODc5ZDMwZDM5MThmNjM0ZmVhYmM4NTE3ODI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-23T15:50:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-27T13:42:21Z"}, "message": "libstdc++: Add Doxygen comment for string::resize_and_overwite\n\nThis is a complicated API that should be clearly documented.\n\nAlso improve the comment on basic_ios::_M_setstate.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_ios.h (basic_ios::_M_setstate): Add\n\tcaveat to comment.\n\t* include/bits/basic_string.h (resize_and_overwrite): Add\n\tdoxygen comment.", "tree": {"sha": "e8afbb1e3e4e4833682a4b8669e1ba71ddd121c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8afbb1e3e4e4833682a4b8669e1ba71ddd121c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfa85beebfbc2f879d30d3918f634feabc851782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa85beebfbc2f879d30d3918f634feabc851782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfa85beebfbc2f879d30d3918f634feabc851782", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa85beebfbc2f879d30d3918f634feabc851782/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce83c3e492c2fa5a08c15b5f4619d58f42a5dcd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce83c3e492c2fa5a08c15b5f4619d58f42a5dcd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce83c3e492c2fa5a08c15b5f4619d58f42a5dcd0"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "de5719c1d68bc0e3fcc67d5dfa2f1c1df95d0159", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa85beebfbc2f879d30d3918f634feabc851782/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa85beebfbc2f879d30d3918f634feabc851782/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=dfa85beebfbc2f879d30d3918f634feabc851782", "patch": "@@ -157,9 +157,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       setstate(iostate __state)\n       { this->clear(this->rdstate() | __state); }\n \n-      // Flip the internal state on for the proper state bits, then\n+      // Flips the internal state on for the proper state bits, then\n       // rethrows the propagated exception if bit also set in\n-      // exceptions().\n+      // exceptions(). Must only be called within a catch handler.\n       void\n       _M_setstate(iostate __state)\n       {"}, {"sha": "1b8ebca7dadcefb5e950b7ff21cbfa7c69e8d7e8", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa85beebfbc2f879d30d3918f634feabc851782/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa85beebfbc2f879d30d3918f634feabc851782/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=dfa85beebfbc2f879d30d3918f634feabc851782", "patch": "@@ -1117,6 +1117,35 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n #if __cplusplus > 202002L\n #define __cpp_lib_string_resize_and_overwrite 202110L\n+      /** Resize the string and call a function to fill it.\n+       *\n+       * @param __n   The maximum size requested.\n+       * @param __op  A callable object that writes characters to the string.\n+       *\n+       * This is a low-level function that is easy to misuse, be careful.\n+       *\n+       * Calling `str.resize_and_overwrite(n, op)` will reserve at least `n`\n+       * characters in `str`, evaluate `n2 = std::move(op)(str.data(), n)`,\n+       * and finally set the string length to `n2` (adding a null terminator\n+       * at the end). The function object `op` is allowed to write to the\n+       * extra capacity added by the initial reserve operation, which is not\n+       * allowed if you just call `str.reserve(n)` yourself.\n+       *\n+       * This can be used to efficiently fill a `string` buffer without the\n+       * overhead of zero-initializing characters that will be overwritten\n+       * anyway.\n+       *\n+       * The callable `op` must not access the string directly (only through\n+       * the pointer passed as its first argument), must not write more than\n+       * `n` characters to the string, must return a value no greater than `n`,\n+       * and must ensure that all characters up to the returned length are\n+       * valid after it returns (i.e. there must be no uninitialized values\n+       * left in the string after the call, because accessing them would\n+       * have undefined behaviour). If `op` exits by throwing an exception\n+       * the behaviour is undefined.\n+       *\n+       * @since C++23\n+       */\n       template<typename _Operation>\n \tconstexpr void\n \tresize_and_overwrite(size_type __n, _Operation __op);"}]}