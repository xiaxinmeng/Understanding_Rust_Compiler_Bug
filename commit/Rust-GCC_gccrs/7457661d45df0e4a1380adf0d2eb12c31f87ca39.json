{"sha": "7457661d45df0e4a1380adf0d2eb12c31f87ca39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ1NzY2MWQ0NWRmMGU0YTEzODBhZGYwZDJlYjEyYzMxZjg3Y2EzOQ==", "commit": {"author": {"name": "Michael P. Hayes", "email": "michaelh@ongaonga.chch.cri.nz", "date": "1998-02-02T01:09:04Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-02T01:09:04Z"}, "message": "jump.c (jump_optimize): Allow conditional loading of floating point constants and constants from memory.\n\n        * jump.c (jump_optimize): Allow conditional loading of floating point\n        constants and constants from memory.  Reinstalled modified_in_p tests.\n\nFrom-SVN: r17591", "tree": {"sha": "f6938970d33884a2ae9ce0f58e6156a31894770f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6938970d33884a2ae9ce0f58e6156a31894770f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7457661d45df0e4a1380adf0d2eb12c31f87ca39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7457661d45df0e4a1380adf0d2eb12c31f87ca39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7457661d45df0e4a1380adf0d2eb12c31f87ca39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7457661d45df0e4a1380adf0d2eb12c31f87ca39/comments", "author": null, "committer": null, "parents": [{"sha": "460f50dc1470348f6b74a4e73559d867aae534ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/460f50dc1470348f6b74a4e73559d867aae534ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/460f50dc1470348f6b74a4e73559d867aae534ee"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "4b0b7fe35cc26aab299a9dba22607a0ff3f66596", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7457661d45df0e4a1380adf0d2eb12c31f87ca39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7457661d45df0e4a1380adf0d2eb12c31f87ca39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7457661d45df0e4a1380adf0d2eb12c31f87ca39", "patch": "@@ -1,3 +1,8 @@\n+Mon Feb  2 02:08:04 1998  Michael P. Hayes  <michaelh@ongaonga.chch.cri.nz>\n+\n+\t* jump.c (jump_optimize): Allow conditional loading of floating point\n+\tconstants and constants from memory.  Reinstalled modified_in_p tests.\n+\n Mon Feb  2 01:38:39 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* loop.c (get_condition): Handle sign-extended constants."}, {"sha": "96a1b5d2288498d1a575302758767ea55dfee367", "filename": "gcc/jump.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7457661d45df0e4a1380adf0d2eb12c31f87ca39/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7457661d45df0e4a1380adf0d2eb12c31f87ca39/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=7457661d45df0e4a1380adf0d2eb12c31f87ca39", "patch": "@@ -771,6 +771,8 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t      && rtx_equal_p (SET_DEST (temp4), temp1)\n \t      && (GET_CODE (SET_SRC (temp4)) == REG\n \t\t  || GET_CODE (SET_SRC (temp4)) == SUBREG\n+\t\t  || (GET_CODE (SET_SRC (temp4)) == MEM\n+\t\t      && RTX_UNCHANGING_P (SET_SRC (temp4)))\n \t\t  || CONSTANT_P (SET_SRC (temp4)))\n \t      && (REG_NOTES (temp2) == 0\n \t\t  || ((REG_NOTE_KIND (REG_NOTES (temp2)) == REG_EQUAL\n@@ -907,6 +909,8 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t      && rtx_equal_p (SET_DEST (temp4), temp1)\n \t      && (GET_CODE (SET_SRC (temp4)) == REG\n \t\t  || GET_CODE (SET_SRC (temp4)) == SUBREG\n+\t\t  || (GET_CODE (SET_SRC (temp4)) == MEM\n+\t\t      && RTX_UNCHANGING_P (SET_SRC (temp4)))\n \t\t  || CONSTANT_P (SET_SRC (temp4)))\n \t      && (REG_NOTES (temp3) == 0\n \t\t  || ((REG_NOTE_KIND (REG_NOTES (temp3)) == REG_EQUAL\n@@ -991,6 +995,7 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t      && GET_CODE (SET_SRC (temp1)) != REG\n \t      && GET_CODE (SET_SRC (temp1)) != SUBREG\n \t      && GET_CODE (SET_SRC (temp1)) != CONST_INT\n+\t      && ! modified_in_p (insn, temp)\n \t      && ! side_effects_p (SET_SRC (temp1))\n \t      && ! may_trap_p (SET_SRC (temp1))\n \t      && rtx_cost (SET_SRC (temp1), SET) < 10)\n@@ -1030,11 +1035,13 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t      && GET_MODE_CLASS (GET_MODE (temp2)) == MODE_INT\n \t      && (! SMALL_REGISTER_CLASSES\n \t\t  || REGNO (temp2) >= FIRST_PSEUDO_REGISTER)\n+\t      && ! modified_in_p (insn, temp)\n \t      && ! side_effects_p (SET_SRC (temp1))\n \t      && ! may_trap_p (SET_SRC (temp1))\n \t      && rtx_cost (SET_SRC (temp1), SET) < 10\n \t      && (temp4 = single_set (temp3)) != 0\n \t      && rtx_equal_p (SET_DEST (temp4), temp2)\n+\t      && ! modified_in_p (insn, temp3)\n \t      && ! side_effects_p (SET_SRC (temp4))\n \t      && ! may_trap_p (SET_SRC (temp4))\n \t      && rtx_cost (SET_SRC (temp4), SET) < 10)\n@@ -1087,6 +1094,7 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t      && REGNO (temp5) >= FIRST_PSEUDO_REGISTER\n \t      && REGNO_FIRST_UID (REGNO (temp5)) == INSN_UID (temp)\n \t      && REGNO_LAST_UID (REGNO (temp5)) == INSN_UID (temp3)\n+\t      && ! modified_in_p (insn, temp)\n \t      && ! side_effects_p (SET_SRC (temp1))\n \t      && ! may_trap_p (SET_SRC (temp1))\n \t      && rtx_cost (SET_SRC (temp1), SET) < 10\n@@ -1096,6 +1104,7 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t      && (! SMALL_REGISTER_CLASSES\n \t\t  || REGNO (temp2) >= FIRST_PSEUDO_REGISTER)\n \t      && rtx_equal_p (SET_DEST (temp4), temp2)\n+\t      && ! modified_in_p (insn, temp3)\n \t      && ! side_effects_p (SET_SRC (temp4))\n \t      && ! may_trap_p (SET_SRC (temp4))\n \t      && rtx_cost (SET_SRC (temp4), SET) < 10)\n@@ -1153,9 +1162,10 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t      && (! SMALL_REGISTER_CLASSES\n \t\t  || REGNO (temp1) >= FIRST_PSEUDO_REGISTER)\n \t      && (GET_CODE (temp2 = SET_SRC (PATTERN (temp))) == REG\n+\t\t  || (GET_CODE (temp2) == MEM && RTX_UNCHANGING_P (temp2))\n \t\t  || GET_CODE (temp2) == SUBREG\n \t\t  /* ??? How about floating point constants?  */\n-\t\t  || GET_CODE (temp2) == CONST_INT)\n+\t\t  || CONSTANT_P (temp2))\n \t      /* Allow either form, but prefer the former if both apply. \n \t\t There is no point in using the old value of TEMP1 if\n \t\t it is a register, since cse will alias them.  It can"}]}