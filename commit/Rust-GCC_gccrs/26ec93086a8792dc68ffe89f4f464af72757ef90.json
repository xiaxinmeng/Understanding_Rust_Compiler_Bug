{"sha": "26ec93086a8792dc68ffe89f4f464af72757ef90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlYzkzMDg2YTg3OTJkYzY4ZmZlODlmNGY0NjRhZjcyNzU3ZWY5MA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2010-09-16T18:05:37Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-09-16T18:05:37Z"}, "message": "Add -m8bit-idiv for x86.\n\ngcc/\n\n2010-09-16  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386-protos.h (ix86_split_idivmod): New prototype.\n\n\t* config/i386/i386.c (predict_jump): Add prototype.\n\t(flag_opts): Add -m8bit-idiv.\n\t(ix86_split_idivmod): New.\n\n\t* config/i386/i386.md (UNSPEC_DIV_ALREADY_SPLIT): New.\n\tAdd 2 splitters for SI/DI mode divide.\n\t(divmod<mode>4_1): New pattern.\n\t(udivmod<mode>4_1): Likewise.\n\t(testdi_ccno_1): Likewise.\n\n\t* config/i386/i386.opt (m8bit-idiv): New.\n\n\t* doc/invoke.texi: Document -m8bit-idiv.\n\ngcc/testsuite/\n\n2010-09-16  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* gcc.target/i386/divmod-1.c: New.\n\t* gcc.target/i386/divmod-2.c: Likewise.\n\t* gcc.target/i386/divmod-3.c: Likewise.\n\t* gcc.target/i386/divmod-4.c: Likewise.\n\t* gcc.target/i386/divmod-4a.c: Likewise.\n\t* gcc.target/i386/divmod-5.c: Likewise.\n\t* gcc.target/i386/divmod-6.c: Likewise.\n\t* gcc.target/i386/divmod-7.c: Likewise.\n\t* gcc.target/i386/divmod-8.c: Likewise.\n\t* gcc.target/i386/udivmod-1.c: Likewise.\n\t* gcc.target/i386/udivmod-2.c: Likewise.\n\t* gcc.target/i386/udivmod-3.c: Likewise.\n\t* gcc.target/i386/udivmod-4.c: Likewise.\n\t* gcc.target/i386/udivmod-4a.c: Likewise.\n\t* gcc.target/i386/udivmod-5.c: Likewise.\n\t* gcc.target/i386/udivmod-6.c: Likewise.\n\t* gcc.target/i386/udivmod-7.c: Likewise.\n\t* gcc.target/i386/udivmod-8.c: Likewise.\n\nFrom-SVN: r164346", "tree": {"sha": "797fdd065c3e3f1f6265ea61cbd86e2a5fb0ec03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/797fdd065c3e3f1f6265ea61cbd86e2a5fb0ec03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26ec93086a8792dc68ffe89f4f464af72757ef90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ec93086a8792dc68ffe89f4f464af72757ef90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ec93086a8792dc68ffe89f4f464af72757ef90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ec93086a8792dc68ffe89f4f464af72757ef90/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "782d5172bbffd2eda9c6a167ab161078b2c2e1da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/782d5172bbffd2eda9c6a167ab161078b2c2e1da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/782d5172bbffd2eda9c6a167ab161078b2c2e1da"}], "stats": {"total": 575, "additions": 574, "deletions": 1}, "files": [{"sha": "825abbf4bf217715e52d754313af0b61773b84b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -1,3 +1,21 @@\n+2010-09-16  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386-protos.h (ix86_split_idivmod): New prototype.\n+\n+\t* config/i386/i386.c (predict_jump): Add prototype.\n+\t(flag_opts): Add -m8bit-idiv.\n+\t(ix86_split_idivmod): New.\n+\n+\t* config/i386/i386.md (UNSPEC_DIV_ALREADY_SPLIT): New.\n+\tAdd 2 splitters for SI/DI mode divide.\n+\t(divmod<mode>4_1): New pattern.\n+\t(udivmod<mode>4_1): Likewise.\n+\t(testdi_ccno_1): Likewise.\n+\n+\t* config/i386/i386.opt (m8bit-idiv): New.\n+\n+\t* doc/invoke.texi: Document -m8bit-idiv.\n+\n 2010-09-16  Reza Yazdani  <reza.yazdani@amd.com>\n \n \tPR bootstrap/45680"}, {"sha": "909adb9c2b18a63973f7f59b7ecf65561c871da8", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -127,6 +127,7 @@ extern void ix86_split_ashr (rtx *, rtx, enum machine_mode);\n extern void ix86_split_lshr (rtx *, rtx, enum machine_mode);\n extern rtx ix86_find_base_term (rtx);\n extern bool ix86_check_movabs (rtx, int);\n+extern void ix86_split_idivmod (enum machine_mode, rtx[], bool);\n \n extern rtx assign_386_stack_local (enum machine_mode, enum ix86_stack_slot);\n extern int ix86_attr_length_immediate_default (rtx, int);"}, {"sha": "dcf887502bcfec2851fcca500ced9ab1cbbbfa06", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -1985,6 +1985,7 @@ static bool ix86_expand_vector_init_one_nonzero (bool, enum machine_mode,\n static void ix86_add_new_builtins (int);\n static rtx ix86_expand_vec_perm_builtin (tree);\n static tree ix86_canonical_va_list_type (tree);\n+static void predict_jump (int);\n \n enum ix86_function_specific_strings\n {\n@@ -2629,6 +2630,7 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n     { \"-msseregparm\",\t\t\tMASK_SSEREGPARM },\n     { \"-mstack-arg-probe\",\t\tMASK_STACK_PROBE },\n     { \"-mtls-direct-seg-refs\",\t\tMASK_TLS_DIRECT_SEG_REFS },\n+    { \"-m8bit-idiv\",\t\t\tMASK_USE_8BIT_IDIV },\n   };\n \n   const char *opts[ARRAY_SIZE (isa_opts) + ARRAY_SIZE (flag_opts) + 6][2];\n@@ -14656,6 +14658,107 @@ ix86_expand_unary_operator (enum rtx_code code, enum machine_mode mode,\n     emit_move_insn (operands[0], dst);\n }\n \n+/* Split 32bit/64bit divmod with 8bit unsigned divmod if dividend and\n+   divisor are within the the range [0-255].  */\n+\n+void\n+ix86_split_idivmod (enum machine_mode mode, rtx operands[],\n+\t\t    bool signed_p)\n+{\n+  rtx end_label, qimode_label;\n+  rtx insn, div, mod;\n+  rtx scratch, tmp0, tmp1, tmp2;\n+  rtx (*gen_divmod4_1) (rtx, rtx, rtx, rtx);\n+  rtx (*gen_zero_extend) (rtx, rtx);\n+  rtx (*gen_test_ccno_1) (rtx, rtx);\n+\n+  switch (mode)\n+    {\n+    case SImode:\n+      gen_divmod4_1 = signed_p ? gen_divmodsi4_1 : gen_udivmodsi4_1;\n+      gen_test_ccno_1 = gen_testsi_ccno_1;\n+      gen_zero_extend = gen_zero_extendqisi2;\n+      break;\n+    case DImode:\n+      gen_divmod4_1 = signed_p ? gen_divmoddi4_1 : gen_udivmoddi4_1;\n+      gen_test_ccno_1 = gen_testdi_ccno_1;\n+      gen_zero_extend = gen_zero_extendqidi2;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  end_label = gen_label_rtx ();\n+  qimode_label = gen_label_rtx ();\n+\n+  scratch = gen_reg_rtx (mode);\n+\n+  /* Use 8bit unsigned divimod if dividend and divisor are within the\n+     the range [0-255].  */\n+  emit_move_insn (scratch, operands[2]);\n+  scratch = expand_simple_binop (mode, IOR, scratch, operands[3],\n+\t\t\t\t scratch, 1, OPTAB_DIRECT);\n+  emit_insn (gen_test_ccno_1 (scratch, GEN_INT (-0x100)));\n+  tmp0 = gen_rtx_REG (CCNOmode, FLAGS_REG);\n+  tmp0 = gen_rtx_EQ (VOIDmode, tmp0, const0_rtx);\n+  tmp0 = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp0,\n+\t\t\t       gen_rtx_LABEL_REF (VOIDmode, qimode_label),\n+\t\t\t       pc_rtx);\n+  insn = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp0));\n+  predict_jump (REG_BR_PROB_BASE * 50 / 100);\n+  JUMP_LABEL (insn) = qimode_label;\n+\n+  /* Generate original signed/unsigned divimod.  */\n+  div = gen_divmod4_1 (operands[0], operands[1],\n+\t\t       operands[2], operands[3]);\n+  emit_insn (div);\n+\n+  /* Branch to the end.  */\n+  emit_jump_insn (gen_jump (end_label));\n+  emit_barrier ();\n+\n+  /* Generate 8bit unsigned divide.  */\n+  emit_label (qimode_label);\n+  /* Don't use operands[0] for result of 8bit divide since not all\n+     registers support QImode ZERO_EXTRACT.  */\n+  tmp0 = simplify_gen_subreg (HImode, scratch, mode, 0);\n+  tmp1 = simplify_gen_subreg (HImode, operands[2], mode, 0);\n+  tmp2 = simplify_gen_subreg (QImode, operands[3], mode, 0);\n+  emit_insn (gen_udivmodhiqi3 (tmp0, tmp1, tmp2));\n+\n+  if (signed_p)\n+    {\n+      div = gen_rtx_DIV (SImode, operands[2], operands[3]);\n+      mod = gen_rtx_MOD (SImode, operands[2], operands[3]);\n+    }\n+  else\n+    {\n+      div = gen_rtx_UDIV (SImode, operands[2], operands[3]);\n+      mod = gen_rtx_UMOD (SImode, operands[2], operands[3]);\n+    }\n+\n+  /* Extract remainder from AH.  */\n+  tmp1 = gen_rtx_ZERO_EXTRACT (mode, tmp0, GEN_INT (8), GEN_INT (8));\n+  if (REG_P (operands[1]))\n+    insn = emit_move_insn (operands[1], tmp1);\n+  else\n+    {\n+      /* Need a new scratch register since the old one has result \n+\t of 8bit divide.  */\n+      scratch = gen_reg_rtx (mode);\n+      emit_move_insn (scratch, tmp1);\n+      insn = emit_move_insn (operands[1], scratch);\n+    }\n+  set_unique_reg_note (insn, REG_EQUAL, mod);\n+\n+  /* Zero extend quotient from AL.  */\n+  tmp1 = gen_lowpart (QImode, tmp0);\n+  insn = emit_insn (gen_zero_extend (operands[0], tmp1));\n+  set_unique_reg_note (insn, REG_EQUAL, div);\n+\n+  emit_label (end_label);\n+}\n+\n #define LEA_SEARCH_THRESHOLD 12\n \n /* Search backward for non-agu definition of register number REGNO1"}, {"sha": "7ca64a35434dc5d7ce91ac197dda275bd06a9b7c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -103,6 +103,7 @@\n   UNSPEC_REP\n   UNSPEC_LD_MPIC\t; load_macho_picbase\n   UNSPEC_TRUNC_NOOP\n+  UNSPEC_DIV_ALREADY_SPLIT\n \n   ;; For SSE/MMX support:\n   UNSPEC_FIX_NOTRUNC\n@@ -7316,6 +7317,60 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; Split with 8bit unsigned divide:\n+;; \tif (dividend an divisor are in [0-255])\n+;;\t   use 8bit unsigned integer divide\n+;;\t else\n+;;\t   use original integer divide\n+(define_split\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"\")\n+\t(div:SWI48 (match_operand:SWI48 2 \"register_operand\" \"\")\n+\t\t    (match_operand:SWI48 3 \"nonimmediate_operand\" \"\")))\n+   (set (match_operand:SWI48 1 \"register_operand\" \"\")\n+\t(mod:SWI48 (match_dup 2) (match_dup 3)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_USE_8BIT_IDIV\n+   && TARGET_QIMODE_MATH\n+   && can_create_pseudo_p ()\n+   && !optimize_insn_for_size_p ()\"\n+  [(const_int 0)]\n+  \"ix86_split_idivmod (<MODE>mode, operands, true); DONE;\")\n+\n+(define_insn_and_split \"divmod<mode>4_1\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=a\")\n+\t(div:SWI48 (match_operand:SWI48 2 \"register_operand\" \"0\")\n+\t\t   (match_operand:SWI48 3 \"nonimmediate_operand\" \"rm\")))\n+   (set (match_operand:SWI48 1 \"register_operand\" \"=&d\")\n+\t(mod:SWI48 (match_dup 2) (match_dup 3)))\n+   (unspec [(const_int 0)] UNSPEC_DIV_ALREADY_SPLIT)\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 1)\n+\t\t   (ashiftrt:SWI48 (match_dup 4) (match_dup 5)))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (parallel [(set (match_dup 0)\n+\t           (div:SWI48 (match_dup 2) (match_dup 3)))\n+\t      (set (match_dup 1)\n+\t\t   (mod:SWI48 (match_dup 2) (match_dup 3)))\n+\t      (use (match_dup 1))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  operands[5] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode)-1);\n+\n+  if (optimize_function_for_size_p (cfun) || TARGET_USE_CLTD)\n+    operands[4] = operands[2];\n+  else\n+    {\n+      /* Avoid use of cltd in favor of a mov+shift.  */\n+      emit_move_insn (operands[1], operands[2]);\n+      operands[4] = operands[1];\n+    }\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"*divmod<mode>4_noext\"\n   [(set (match_operand:SWIM248 0 \"register_operand\" \"=a\")\n \t(div:SWIM248 (match_operand:SWIM248 2 \"register_operand\" \"0\")\n@@ -7359,6 +7414,47 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; Split with 8bit unsigned divide:\n+;; \tif (dividend an divisor are in [0-255])\n+;;\t   use 8bit unsigned integer divide\n+;;\t else\n+;;\t   use original integer divide\n+(define_split\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"\")\n+\t(udiv:SWI48 (match_operand:SWI48 2 \"register_operand\" \"\")\n+\t\t    (match_operand:SWI48 3 \"nonimmediate_operand\" \"\")))\n+   (set (match_operand:SWI48 1 \"register_operand\" \"\")\n+\t(umod:SWI48 (match_dup 2) (match_dup 3)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_USE_8BIT_IDIV\n+   && TARGET_QIMODE_MATH\n+   && can_create_pseudo_p ()\n+   && !optimize_insn_for_size_p ()\"\n+  [(const_int 0)]\n+  \"ix86_split_idivmod (<MODE>mode, operands, false); DONE;\")\n+\n+(define_insn_and_split \"udivmod<mode>4_1\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=a\")\n+\t(udiv:SWI48 (match_operand:SWI48 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:SWI48 3 \"nonimmediate_operand\" \"rm\")))\n+   (set (match_operand:SWI48 1 \"register_operand\" \"=&d\")\n+\t(umod:SWI48 (match_dup 2) (match_dup 3)))\n+   (unspec [(const_int 0)] UNSPEC_DIV_ALREADY_SPLIT)\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup 1) (const_int 0))\n+   (parallel [(set (match_dup 0)\n+\t\t   (udiv:SWI48 (match_dup 2) (match_dup 3)))\n+\t      (set (match_dup 1)\n+\t\t   (umod:SWI48 (match_dup 2) (match_dup 3)))\n+\t      (use (match_dup 1))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+  \"\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"*udivmod<mode>4_noext\"\n   [(set (match_operand:SWIM248 0 \"register_operand\" \"=a\")\n \t(udiv:SWIM248 (match_operand:SWIM248 2 \"register_operand\" \"0\")\n@@ -7409,6 +7505,14 @@\n \t\t\t     (match_operand:QI 1 \"nonmemory_operand\" \"\"))\n \t\t (const_int 0)))])\n \n+(define_expand \"testdi_ccno_1\"\n+  [(set (reg:CCNO FLAGS_REG)\n+\t(compare:CCNO\n+\t  (and:DI (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+\t\t  (match_operand:DI 1 \"x86_64_szext_general_operand\" \"\"))\n+\t  (const_int 0)))]\n+  \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\")\n+\n (define_insn \"*testdi_1\"\n   [(set (reg FLAGS_REG)\n \t(compare"}, {"sha": "aa78cdfaa26da7a2a64c8c264deed58a645a7d4a", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -388,3 +388,7 @@ Support F16C built-in functions and code generation\n mfentry\n Target Report Var(flag_fentry) Init(-1)\n Emit profiling counter call at function entry before prologue.\n+\n+m8bit-idiv\n+Target Report Mask(USE_8BIT_IDIV) Save\n+Expand 32bit/64bit integer divide into 8bit unsigned integer divide with run-time check"}, {"sha": "08d929a3e49ab1300fa03f4683afbc59c9fb5d9d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -602,7 +602,7 @@ Objective-C and Objective-C++ Dialects}.\n -momit-leaf-frame-pointer  -mno-red-zone -mno-tls-direct-seg-refs @gol\n -mcmodel=@var{code-model} -mabi=@var{name} @gol\n -m32  -m64 -mlarge-data-threshold=@var{num} @gol\n--msse2avx -mfentry}\n+-msse2avx -mfentry -m8bit-idiv}\n \n @emph{IA-64 Options}\n @gccoptlist{-mbig-endian  -mlittle-endian  -mgnu-as  -mgnu-ld  -mno-pic @gol\n@@ -12647,6 +12647,16 @@ If profiling is active @option{-pg} put the profiling\n counter call before prologue.\n Note: On x86 architectures the attribute @code{ms_hook_prologue}\n isn't possible at the moment for @option{-mfentry} and @option{-pg}.\n+\n+@item -m8bit-idiv\n+@itemx -mno-8bit-idiv\n+@opindex 8bit-idiv\n+On some processors, like Intel Atom, 8bit unsigned integer divide is\n+much faster than 32bit/64bit integer divide.  This option will generate a\n+runt-time check.  If both dividend and divisor are within range of 0\n+to 255, 8bit unsigned integer divide will be used instead of\n+32bit/64bit integer divide.\n+\n @end table\n \n These @samp{-m} switches are supported in addition to the above"}, {"sha": "46bb71db0f52bb4d5102e5d0ab76c071fe70914c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -1,3 +1,24 @@\n+2010-09-16  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/divmod-1.c: New.\n+\t* gcc.target/i386/divmod-2.c: Likewise.\n+\t* gcc.target/i386/divmod-3.c: Likewise.\n+\t* gcc.target/i386/divmod-4.c: Likewise.\n+\t* gcc.target/i386/divmod-4a.c: Likewise.\n+\t* gcc.target/i386/divmod-5.c: Likewise.\n+\t* gcc.target/i386/divmod-6.c: Likewise.\n+\t* gcc.target/i386/divmod-7.c: Likewise.\n+\t* gcc.target/i386/divmod-8.c: Likewise.\n+\t* gcc.target/i386/udivmod-1.c: Likewise.\n+\t* gcc.target/i386/udivmod-2.c: Likewise.\n+\t* gcc.target/i386/udivmod-3.c: Likewise.\n+\t* gcc.target/i386/udivmod-4.c: Likewise.\n+\t* gcc.target/i386/udivmod-4a.c: Likewise.\n+\t* gcc.target/i386/udivmod-5.c: Likewise.\n+\t* gcc.target/i386/udivmod-6.c: Likewise.\n+\t* gcc.target/i386/udivmod-7.c: Likewise.\n+\t* gcc.target/i386/udivmod-8.c: Likewise.\n+\n 2010-09-16  Jan Hubicka  <jh@suse.cz>\n \n \t* g++.dg/lto/pr45679-1_0.C: New file."}, {"sha": "2769a21c444066b9d7278530a864181e028f769d", "filename": "gcc/testsuite/gcc.target/i386/divmod-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-1.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -m8bit-idiv\" } */\n+\n+extern void abort (void);\n+\n+void\n+__attribute__((noinline))\n+test (int x, int y, int q, int r)\n+{\n+  if ((x / y) != q || (x % y) != r)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  test (7, 6, 1, 1);\n+  test (-7, -6, 1, -1);\n+  test (-7, 6, -1, -1);\n+  test (7, -6, -1, 1);\n+  test (255, 254, 1, 1);\n+  test (256, 254, 1, 2);\n+  test (256, 256, 1, 0);\n+  test (254, 256, 0, 254);\n+  test (254, 255, 0, 254);\n+  test (254, 1, 254, 0);\n+  test (255, 2, 127, 1);\n+  test (1, 256, 0, 1);\n+  return 0;\n+}"}, {"sha": "0e73b27360888d7e41e803de096893a02a07b101", "filename": "gcc/testsuite/gcc.target/i386/divmod-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-2.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -m8bit-idiv\" } */\n+\n+int\n+foo (int x, int y)\n+{\n+   return x / y;\n+}\n+\n+/* { dg-final { scan-assembler-times \"divb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"idivl\" 1 } } */"}, {"sha": "4b84436999c34a6125143684b3feced87af45572", "filename": "gcc/testsuite/gcc.target/i386/divmod-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-3.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -m8bit-idiv\" } */\n+\n+int\n+foo (int x, int y)\n+{\n+   return x % y;\n+}\n+\n+/* { dg-final { scan-assembler-times \"divb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"idivl\" 1 } } */"}, {"sha": "7124d7a06e3f9fa871f5bc96ec58e3cafc26b15b", "filename": "gcc/testsuite/gcc.target/i386/divmod-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-4.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -m8bit-idiv\" } */\n+\n+extern void abort (void);\n+\n+void\n+test (int x, int y, int q, int r)\n+{\n+  if ((x / y) != q || (x % y) != r)\n+    abort ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"divb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"idivl\" 1 } } */"}, {"sha": "572b3df3c1e1b57b6b70fbcb0dc3c416a38b5095", "filename": "gcc/testsuite/gcc.target/i386/divmod-4a.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-4a.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -m8bit-idiv\" } */\n+\n+extern void abort (void);\n+\n+void\n+test (int x, int y, int q, int r)\n+{\n+  if ((x / y) != q || (x % y) != r)\n+    abort ();\n+}\n+\n+/* { dg-final { scan-assembler-not \"divb\" } } */\n+/* { dg-final { scan-assembler-times \"idivl\" 1 } } */"}, {"sha": "8d179be9d053839c24c777f873d3ff4873d2f404", "filename": "gcc/testsuite/gcc.target/i386/divmod-5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-5.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -m8bit-idiv\" } */\n+\n+extern void foo (int, int, int, int, int, int);\n+\n+void\n+bar (int x, int y)\n+{\n+  foo (0, 0, 0, 0, x / y, x % y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"divb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"idivl\" 1 } } */"}, {"sha": "c79dba0a537aa67cb6a59fc3d48bbaea68f3712a", "filename": "gcc/testsuite/gcc.target/i386/divmod-6.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-6.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -m8bit-idiv\" } */\n+\n+extern void abort (void);\n+\n+void\n+__attribute__((noinline))\n+test (long long x, long long y, long long q, long long r)\n+{\n+  if ((x / y) != q || (x % y) != r)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  test (7, 6, 1, 1);\n+  test (-7, -6, 1, -1);\n+  test (-7, 6, -1, -1);\n+  test (7, -6, -1, 1);\n+  test (255, 254, 1, 1);\n+  test (256, 254, 1, 2);\n+  test (256, 256, 1, 0);\n+  test (254, 256, 0, 254);\n+  test (254, 255, 0, 254);\n+  test (254, 1, 254, 0);\n+  test (255, 2, 127, 1);\n+  test (1, 256, 0, 1);\n+  return 0;\n+}"}, {"sha": "20a4cd30954537389695ef163fe557c14603a7d8", "filename": "gcc/testsuite/gcc.target/i386/divmod-7.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-7.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -m8bit-idiv\" } */\n+/* { dg-require-effective-target lp64 } */\n+\n+extern void abort (void);\n+\n+void\n+test (long long x, long long y, long long q, long long r)\n+{\n+  if ((x / y) != q || (x % y) != r)\n+    abort ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"divb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"idivq\" 1 } } */"}, {"sha": "5192b98d67a0c01d1dc09b3478621bb36b0ba71d", "filename": "gcc/testsuite/gcc.target/i386/divmod-8.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdivmod-8.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -m8bit-idiv\" } */\n+\n+extern void foo (long long, long long, long long, long long,\n+\t\t long long, long long);\n+\n+void\n+bar (long long x, long long y)\n+{\n+  foo (0, 0, 0, 0, x / y, x % y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"divb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"idivq\" 1 } } */"}, {"sha": "eebd84362306799bddbf00621a90d823d6ccbf4f", "filename": "gcc/testsuite/gcc.target/i386/udivmod-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-1.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -m8bit-idiv\" } */\n+\n+extern void abort (void);\n+\n+void\n+__attribute__((noinline))\n+test (unsigned int x, unsigned int y, unsigned int q, unsigned int r)\n+{\n+  if ((x / y) != q || (x % y) != r)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  test (7, 6, 1, 1);\n+  test (255, 254, 1, 1);\n+  test (256, 254, 1, 2);\n+  test (256, 256, 1, 0);\n+  test (254, 256, 0, 254);\n+  test (254, 255, 0, 254);\n+  test (254, 1, 254, 0);\n+  test (255, 2, 127, 1);\n+  test (1, 256, 0, 1);\n+  test (0x80000000, 0x7fffffff, 1, 1);\n+  test (0x7fffffff, 0x80000000, 0, 0x7fffffff);\n+  test (0x80000000, 0x80000003, 0, 0x80000000);\n+  test (0xfffffffd, 0xfffffffe, 0, 0xfffffffd);\n+  return 0;\n+}"}, {"sha": "2bba8f3c954d96d508c34a10ca212616b097e152", "filename": "gcc/testsuite/gcc.target/i386/udivmod-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-2.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -m8bit-idiv\" } */\n+\n+unsigned int\n+foo (unsigned int x, unsigned int y)\n+{\n+   return x / y;\n+}\n+\n+/* { dg-final { scan-assembler-times \"divb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"divl\" 1 } } */"}, {"sha": "f2ac4e5dae87afc72a1fd9135b3ede51f7dcb3da", "filename": "gcc/testsuite/gcc.target/i386/udivmod-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-3.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -m8bit-idiv\" } */\n+\n+unsigned int\n+foo (unsigned int x, unsigned int y)\n+{\n+   return x % y;\n+}\n+\n+/* { dg-final { scan-assembler-times \"divb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"divl\" 1 } } */"}, {"sha": "14dd87c1732224440be84f39f7e0301aceb15702", "filename": "gcc/testsuite/gcc.target/i386/udivmod-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-4.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -m8bit-idiv\" } */\n+\n+extern void abort (void);\n+\n+void\n+test (unsigned int x, unsigned int y, unsigned int q, unsigned int r)\n+{\n+  if ((x / y) != q || (x % y) != r)\n+    abort ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"divb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"divl\" 1 } } */"}, {"sha": "f1ff3890924f443bb66e7c7e6b8fb02a823a52c6", "filename": "gcc/testsuite/gcc.target/i386/udivmod-4a.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-4a.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -m8bit-idiv\" } */\n+\n+extern void abort (void);\n+\n+void\n+test (unsigned int x, unsigned int y, unsigned int q, unsigned int r)\n+{\n+  if ((x / y) != q || (x % y) != r)\n+    abort ();\n+}\n+\n+/* { dg-final { scan-assembler-not \"divb\" } } */\n+/* { dg-final { scan-assembler-times \"divl\" 1 } } */"}, {"sha": "7c31a0a9c3104f9e6aa3d31ef43b295456421fd0", "filename": "gcc/testsuite/gcc.target/i386/udivmod-5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-5.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -m8bit-idiv\" } */\n+\n+extern void foo (unsigned int, unsigned int, unsigned int,\n+\t\t unsigned int, unsigned int, unsigned int);\n+\n+void\n+bar (unsigned int x, unsigned int y)\n+{\n+  foo (0, 0, 0, 0, x / y, x % y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"divb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"divl\" 1 } } */"}, {"sha": "d774171787ef75d63eed433f7c177dcc79f66c14", "filename": "gcc/testsuite/gcc.target/i386/udivmod-6.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-6.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -m8bit-idiv\" } */\n+\n+extern void abort (void);\n+\n+void\n+__attribute__((noinline))\n+test (unsigned long long x, unsigned long long y,\n+      unsigned long long q, unsigned long long r)\n+{\n+  if ((x / y) != q || (x % y) != r)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  test (7, 6, 1, 1);\n+  test (255, 254, 1, 1);\n+  test (256, 254, 1, 2);\n+  test (256, 256, 1, 0);\n+  test (254, 256, 0, 254);\n+  test (254, 255, 0, 254);\n+  test (254, 1, 254, 0);\n+  test (255, 2, 127, 1);\n+  test (1, 256, 0, 1);\n+  test (0x80000000, 0x7fffffff, 1, 1);\n+  test (0x7fffffff, 0x80000000, 0, 0x7fffffff);\n+  test (0x80000000, 0x80000003, 0, 0x80000000);\n+  test (0xfffffffd, 0xfffffffe, 0, 0xfffffffd);\n+  return 0;\n+}"}, {"sha": "14a065f68e71b257e80035ae6d111a8503179c22", "filename": "gcc/testsuite/gcc.target/i386/udivmod-7.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-7.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -m8bit-idiv\" } */\n+/* { dg-require-effective-target lp64 } */\n+\n+extern void abort (void);\n+\n+void\n+test (unsigned long long x, unsigned long long y,\n+      unsigned long long q, unsigned long long r)\n+{\n+  if ((x / y) != q || (x % y) != r)\n+    abort ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"divb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"divq\" 1 } } */"}, {"sha": "16459fca58aa94d49dd72ee18cf280dc0a1e47c5", "filename": "gcc/testsuite/gcc.target/i386/udivmod-8.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ec93086a8792dc68ffe89f4f464af72757ef90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fudivmod-8.c?ref=26ec93086a8792dc68ffe89f4f464af72757ef90", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -m8bit-idiv\" } */\n+\n+extern void foo (unsigned long long, unsigned long long,\n+\t\t unsigned long long, unsigned long long,\n+\t\t unsigned long long, unsigned long long);\n+\n+void\n+bar (unsigned long long x, unsigned long long y)\n+{\n+  foo (0, 0, 0, 0, x / y, x % y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"divb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"divq\" 1 } } */"}]}