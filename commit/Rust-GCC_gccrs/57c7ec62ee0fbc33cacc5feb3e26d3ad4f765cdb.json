{"sha": "57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb", "node_id": "C_kwDOANBUbNoAKDU3YzdlYzYyZWUwZmJjMzNjYWNjNWZlYjNlMjZkM2FkNGY3NjVjZGI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-07T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-07T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "63cad90a8f6edf9912f00ca3a07497ea8f7627ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63cad90a8f6edf9912f00ca3a07497ea8f7627ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/comments", "author": null, "committer": null, "parents": [{"sha": "6aab794614d26007d6886d7440f2e8124a08416a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aab794614d26007d6886d7440f2e8124a08416a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aab794614d26007d6886d7440f2e8124a08416a"}], "stats": {"total": 208, "additions": 207, "deletions": 1}, "files": [{"sha": "f9b93b29de9d4aefed73566ba330bca5488362be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb", "patch": "@@ -1,3 +1,56 @@\n+2021-10-06  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (non_null_ref::adjust_range): Call new\n+\tintersect routine.\n+\t* gimple-range-fold.cc (adjust_pointer_diff_expr): Ditto.\n+\t(adjust_imagpart_expr): Ditto.\n+\t* value-range.cc (irange::irange_intersect): Call new routine if\n+\tRHS is a single pair.\n+\t(irange::intersect): New wide_int version.\n+\t* value-range.h (class irange): New prototype.\n+\n+2021-10-06  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-edge.cc (gimple_outgoing_range::gimple_outgoing_range):\n+\tAdd parameter to limit size when recognizing switches.\n+\t(gimple_outgoing_range::edge_range_p): Check size limit.\n+\t* gimple-range-edge.h (gimple_outgoing_range): Add size field.\n+\t* gimple-range-gori.cc (gori_map::calculate_gori): Ignore switches\n+\tthat exceed the size limit.\n+\t(gori_compute::gori_compute): Add initializer.\n+\t* params.opt (evrp-switch-limit): New.\n+\t* doc/invoke.texi: Update docs.\n+\n+2021-10-06  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-range.h (irange::set_varying): Use TYPE_MIN_VALUE and\n+\tTYPE_MAX_VALUE instead of creating new trees when possible.\n+\n+2021-10-06  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (non_null_ref::adjust_range): Check for\n+\tzero and non-zero more efficently.\n+\n+2021-10-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/102605\n+\t* dumpfile.h (TDF_GIMPLE_VAL): New.\n+\t(dump_flag): Re-order and adjust TDF_* flags.  Make\n+\tthe enum uint32_t.  Use std::underlying_type in the\n+\toperator overloads.\n+\t(optgroup_flag): Likewise for the operator overloads.\n+\t* tree-pretty-print.c (dump_generic_node): Wrap ADDR_EXPR\n+\tin _Literal if TDF_GIMPLE_VAL.\n+\t* gimple-pretty-print.c (dump_gimple_assign): Add\n+\tTDF_GIMPLE_VAL to flags when dumping operands where only\n+\tis_gimple_val are allowed.\n+\t(dump_gimple_cond): Likewise.\n+\n+2021-10-06  prathamesh.kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* gimple-isel.cc (gimple_expand_vec_cond_expr): Remove redundant if\n+\tcondition.\n+\n 2021-10-05  qing zhao  <qing.zhao@oracle.com>\n \n \tPR middle-end/102359"}, {"sha": "e528addee6c8e4e96d952231f982188d233a3dab", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb", "patch": "@@ -1 +1 @@\n-20211006\n+20211007"}, {"sha": "a6484f45f75f3dc254ba42039a8d00f2bd1692d0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb", "patch": "@@ -1,3 +1,17 @@\n+2021-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/102571\n+\t* c-omp.c (c_finish_omp_atomic): Optimize the case where type has\n+\tpadding, but the non-padding bits are contiguous set of bytes\n+\tby adjusting the memcmp call arguments instead of emitting\n+\t__builtin_clear_padding and then comparing all the type's bytes.\n+\n+2021-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102612\n+\t* c-cppbuiltin.c (c_cpp_builtins): For -std=c++23 predefine\n+\t__cpp_constexpr to 202110L rather than 201907L.\n+\n 2021-10-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/97573"}, {"sha": "97d0a3518f69357df3028ffd8f53a57beb1f08cd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb", "patch": "@@ -1,3 +1,52 @@\n+2021-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102612\n+\t* parser.c (cp_parser_jump_statement): Implement C++23 P2242R3.\n+\tAllow goto expressions in constexpr function bodies for C++23.\n+\tAdjust error message for older standards to mention it.\n+\t* decl.c (start_decl): Allow static and thread_local declarations\n+\tin constexpr function bodies for C++23.  Adjust error message for\n+\tolder standards to mention it.\n+\t* constexpr.c (ensure_literal_type_for_constexpr_object): Allow\n+\tdeclarations of variables with non-literal type in constexpr function\n+\tbodies for C++23.  Adjust error message for older standards to mention\n+\tit.\n+\t(cxx_eval_constant_expression) <case DECL_EXPR>: Diagnose declarations\n+\tof initialization of static or thread_local vars.\n+\t(cxx_eval_constant_expression) <case GOTO_EXPR>: Diagnose goto\n+\tstatements for C++23.\n+\t(potential_constant_expression_1) <case DECL_EXPR>: Swap the\n+\tCP_DECL_THREAD_LOCAL_P and TREE_STATIC checks.\n+\t(potential_constant_expression_1) <case LABEL_EXPR>: Allow labels for\n+\tC++23.  Adjust error message for older standards to mention it.\n+\n+2021-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98712\n+\tPR c++/102490\n+\t* cp-tree.h (maybe_synthesize_method): Declare.\n+\t* method.c (genericize_spaceship): Use\n+\tLOOKUP_NORMAL | LOOKUP_NONVIRTUAL | LOOKUP_DEFAULTED instead of\n+\tLOOKUP_NORMAL for flags.\n+\t(comp_info): Remove defining member.  Add complain, code, retcat.\n+\t(comp_info::comp_info): Adjust.\n+\t(do_one_comp): Split out from build_comparison_op.   Use\n+\tLOOKUP_NORMAL | LOOKUP_NONVIRTUAL | LOOKUP_DEFAULTED instead of\n+\tLOOKUP_NORMAL for flags.\n+\t(build_comparison_op): Add defining argument. Adjust comp_info\n+\tconstruction.  Use defining instead of info.defining.  Assert that\n+\tif defining, ctype is a complete type.  Walk base binfos.\n+\t(synthesize_method, maybe_explain_implicit_delete,\n+\texplain_implicit_non_constexpr): Adjust build_comparison_op callers.\n+\t(maybe_synthesize_method): New function.\n+\t* class.c (check_bases_and_members): Don't call defaulted_late_check\n+\tfor sfk_comparison.\n+\t(finish_struct_1): Call it here instead after class has been\n+\tcompleted.\n+\t* pt.c (maybe_instantiate_noexcept): Call maybe_synthesize_method\n+\tinstead of synthesize_method.\n+\n 2021-10-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/102548"}, {"sha": "b296797489306a9bf7a787f7545713ad1d0e1c42", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb", "patch": "@@ -1,3 +1,8 @@\n+2021-10-06  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* resolve.c (resolve_values): Only show\n+\tdeprecated warning if attr.referenced.\n+\n 2021-10-04  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/54753"}, {"sha": "a3159bdfcc02831147512b61b042df6eb97ee283", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb", "patch": "@@ -1,3 +1,62 @@\n+2021-10-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp2a/spaceship-synth8a.C: New test.\n+\n+2021-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102612\n+\t* g++.dg/cpp23/feat-cxx2b.C: Expect __cpp_constexpr 202110L rather\n+\tthan 201907L.\n+\t* g++.dg/cpp23/constexpr-nonlit1.C: New test.\n+\t* g++.dg/cpp23/constexpr-nonlit2.C: New test.\n+\t* g++.dg/cpp23/constexpr-nonlit3.C: New test.\n+\t* g++.dg/cpp23/constexpr-nonlit4.C: New test.\n+\t* g++.dg/cpp23/constexpr-nonlit5.C: New test.\n+\t* g++.dg/cpp23/constexpr-nonlit6.C: New test.\n+\t* g++.dg/diagnostic/constexpr1.C: Only expect some diagnostics for\n+\tc++20_down.\n+\t* g++.dg/cpp1y/constexpr-label.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-neg1.C: Likewise.\n+\t* g++.dg/cpp2a/constexpr-try5.C: Likewise.  Adjust some expected\n+\twording.\n+\t* g++.dg/cpp2a/constexpr-dtor3.C: Likewise.\n+\t* g++.dg/cpp2a/consteval3.C: Likewise.  Add effective target c++20\n+\tand remove dg-options.\n+\n+2021-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/cpp/gnu11-elifdef-1.c: New test.\n+\t* gcc.dg/cpp/gnu11-elifdef-2.c: New test.\n+\t* gcc.dg/cpp/gnu11-elifdef-3.c: New test.\n+\t* gcc.dg/cpp/gnu11-elifdef-4.c: New test.\n+\t* g++.dg/cpp/elifdef-1.C: New test.\n+\t* g++.dg/cpp/elifdef-2.C: New test.\n+\t* g++.dg/cpp/elifdef-3.C: New test.\n+\t* g++.dg/cpp/elifdef-4.C: New test.\n+\t* g++.dg/cpp/elifdef-5.C: New test.\n+\t* g++.dg/cpp/elifdef-6.C: New test.\n+\t* g++.dg/cpp/elifdef-7.C: New test.\n+\n+2021-10-06  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/attr_deprecated-2.f90: New test.\n+\n+2021-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98712\n+\tPR c++/102490\n+\t* g++.dg/cpp2a/spaceship-synth8.C (std::strong_ordering): Provide\n+\tmore complete definition.\n+\t(std::strong_ordering::less, std::strong_ordering::equal,\n+\tstd::strong_ordering::greater): Define.\n+\t* g++.dg/cpp2a/spaceship-synth12.C: New test.\n+\t* g++.dg/cpp2a/spaceship-synth13.C: New test.\n+\t* g++.dg/cpp2a/spaceship-synth14.C: New test.\n+\t* g++.dg/cpp2a/spaceship-eq11.C: New test.\n+\t* g++.dg/cpp2a/spaceship-eq12.C: New test.\n+\t* g++.dg/cpp2a/spaceship-eq13.C: New test.\n+\n 2021-10-05  qing zhao  <qing.zhao@oracle.com>\n \n \tPR middle-end/102359"}, {"sha": "3fca7fd7b03e36eb9b750fceab1c86f0f9a86e57", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb", "patch": "@@ -1,3 +1,12 @@\n+2021-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* init.c (lang_defaults): Implement P2334R1, enable elifdef for\n+\t-std=c++23 and -std=gnu++23.\n+\t* directives.c (_cpp_handle_directive): Support elifdef/elifndef if\n+\teither CPP_OPTION (pfile, elifdef) or !CPP_OPTION (pfile, std).\n+\t(do_elif): For older non-std modes if pedantic pedwarn about\n+\t#elifdef/#elifndef directives that change behavior.\n+\n 2021-09-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/100977"}, {"sha": "e7a15fa05968104e36088cd88b312cac0fe648b2", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb", "patch": "@@ -1,3 +1,7 @@\n+2021-10-06  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* LOCAL_PATCHES: Update to the corresponding revision.\n+\n 2021-10-01  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* LOCAL_PATCHES: Update to the corresponding revision."}, {"sha": "daafc57e66311fc648cd788df1eec92b4a482614", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=57c7ec62ee0fbc33cacc5feb3e26d3ad4f765cdb", "patch": "@@ -1,3 +1,16 @@\n+2021-10-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/Makefile.am: Add new headers.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/std/functional: Include <bits/move_only_function.h>.\n+\t* include/std/version (__cpp_lib_move_only_function): Define.\n+\t* include/bits/mofunc_impl.h: New file.\n+\t* include/bits/move_only_function.h: New file.\n+\t* testsuite/20_util/move_only_function/call.cc: New test.\n+\t* testsuite/20_util/move_only_function/cons.cc: New test.\n+\t* testsuite/20_util/move_only_function/move.cc: New test.\n+\t* testsuite/20_util/move_only_function/version.cc: New test.\n+\n 2021-10-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/21_strings/basic_string_view/requirements/trivially_copyable.cc:"}]}