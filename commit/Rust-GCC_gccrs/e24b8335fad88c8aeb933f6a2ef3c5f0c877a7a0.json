{"sha": "e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI0YjgzMzVmYWQ4OGM4YWViOTMzZjZhMmVmM2M1ZjBjODc3YTdhMA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-03-22T22:34:42Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-03-22T22:34:42Z"}, "message": "iq2000-opts.h: New.\n\n\t* config/iq2000/iq2000-opts.h: New.\n\t* config/iq2000/iq2000.c: Don't include opts.h.\n\t(iq2000_tune, iq2000_handle_option, TARGET_HANDLE_OPTION): Remove.\n\t* config/iq2000/iq2000.h (enum processor_type, iq2000_tune):\n\tRemove.\n\t* config/iq2000/iq2000.opt (config/iq2000/iq2000-opts.h): New\n\tHeaderInclude entry.\n\t(iq2000_tune): New Variable entry.\n\t(march=): Add comment.  Use Enum.\n\t(iq2000_arch): New Enum and EnumValue entries.\n\t(mcpu=): Use Enum and Var.\n\t(iq2000_tune): New Enum and EnumValue entries.\n\nFrom-SVN: r171318", "tree": {"sha": "721bc8237dce42ff74cdaa18ecd4ad4aa19e5222", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/721bc8237dce42ff74cdaa18ecd4ad4aa19e5222"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6cc0c98cfbfc90d050496ee1bf8f1fcd84e3200"}], "stats": {"total": 143, "additions": 82, "deletions": 61}, "files": [{"sha": "ad50dd2914c337dadc47272daac3233ea0d266b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0", "patch": "@@ -1,3 +1,18 @@\n+2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/iq2000/iq2000-opts.h: New.\n+\t* config/iq2000/iq2000.c: Don't include opts.h.\n+\t(iq2000_tune, iq2000_handle_option, TARGET_HANDLE_OPTION): Remove.\n+\t* config/iq2000/iq2000.h (enum processor_type, iq2000_tune):\n+\tRemove.\n+\t* config/iq2000/iq2000.opt (config/iq2000/iq2000-opts.h): New\n+\tHeaderInclude entry.\n+\t(iq2000_tune): New Variable entry.\n+\t(march=): Add comment.  Use Enum.\n+\t(iq2000_arch): New Enum and EnumValue entries.\n+\t(mcpu=): Use Enum and Var.\n+\t(iq2000_tune): New Enum and EnumValue entries.\n+\n 2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/ia64/ia64-opts.h: New."}, {"sha": "8cc44b60741ab6f4701a444edf54cfe5551aebc9", "filename": "gcc/config/iq2000/iq2000-opts.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0/gcc%2Fconfig%2Fiq2000%2Fiq2000-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0/gcc%2Fconfig%2Fiq2000%2Fiq2000-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000-opts.h?ref=e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0", "patch": "@@ -0,0 +1,33 @@\n+/* Definitions for option handling for Vitesse IQ2000 processors.\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef IQ2000_OPTS_H\n+#define IQ2000_OPTS_H\n+\n+/* Which processor to schedule for.  */\n+\n+enum processor_type\n+{\n+  PROCESSOR_DEFAULT,\n+  PROCESSOR_IQ2000,\n+  PROCESSOR_IQ10\n+};\n+\n+#endif"}, {"sha": "2d6908545db39b2f14f85e75e547097c61c2f4f5", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0", "patch": "@@ -45,7 +45,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-def.h\"\n #include \"langhooks.h\"\n #include \"df.h\"\n-#include \"opts.h\"\n \n /* Enumeration for all of the relational tests, so that we can build\n    arrays indexed by the test type, and not worry about the order\n@@ -112,9 +111,6 @@ struct GTY(()) machine_function\n /* List of all IQ2000 punctuation characters used by iq2000_print_operand.  */\n static char iq2000_print_operand_punct[256];\n \n-/* The target cpu for optimization and scheduling.  */\n-enum processor_type iq2000_tune;\n-\n /* Which instruction set architecture to use.  */\n int iq2000_isa;\n \n@@ -146,10 +142,6 @@ static enum machine_mode gpr_mode;\n \f\n /* Initialize the GCC target structure.  */\n static struct machine_function* iq2000_init_machine_status (void);\n-static bool iq2000_handle_option      (struct gcc_options *,\n-\t\t\t\t       struct gcc_options *,\n-\t\t\t\t       const struct cl_decoded_option *,\n-\t\t\t\t       location_t);\n static void iq2000_option_override    (void);\n static section *iq2000_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t   unsigned HOST_WIDE_INT);\n@@ -197,8 +189,6 @@ static const struct default_options iq2000_option_optimization_table[] =\n #define TARGET_EXPAND_BUILTIN \t\tiq2000_expand_builtin\n #undef  TARGET_ASM_SELECT_RTX_SECTION\n #define TARGET_ASM_SELECT_RTX_SECTION\tiq2000_select_rtx_section\n-#undef  TARGET_HANDLE_OPTION\n-#define TARGET_HANDLE_OPTION\t\tiq2000_handle_option\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE\t\tiq2000_option_override\n #undef  TARGET_OPTION_OPTIMIZATION_TABLE\n@@ -1438,41 +1428,6 @@ iq2000_init_machine_status (void)\n   return ggc_alloc_cleared_machine_function ();\n }\n \n-/* Implement TARGET_HANDLE_OPTION.  */\n-\n-static bool\n-iq2000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n-\t\t      const struct cl_decoded_option *decoded,\n-\t\t      location_t loc ATTRIBUTE_UNUSED)\n-{\n-  size_t code = decoded->opt_index;\n-  const char *arg = decoded->arg;\n-\n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n-\n-  switch (code)\n-    {\n-    case OPT_mcpu_:\n-      if (strcmp (arg, \"iq10\") == 0)\n-\tiq2000_tune = PROCESSOR_IQ10;\n-      else if (strcmp (arg, \"iq2000\") == 0)\n-\tiq2000_tune = PROCESSOR_IQ2000;\n-      else\n-\treturn false;\n-      return true;\n-\n-    case OPT_march_:\n-      /* This option has no effect at the moment.  */\n-      return (strcmp (arg, \"default\") == 0\n-\t      || strcmp (arg, \"DEFAULT\") == 0\n-\t      || strcmp (arg, \"iq2000\") == 0);\n-\n-    default:\n-      return true;\n-    }\n-}\n-\n /* Detect any conflicts in the switches.  */\n \n static void"}, {"sha": "62cddea444e18ebf2553dbe118b10d4e78ee9f57", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  \n    Vitesse IQ2000 processors\n-   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -609,15 +609,6 @@ enum delay_type\n   DELAY_FCMP\t\t\t\t/* Delay after doing c.<xx>.{d,s}.  */\n };\n \n-/* Which processor to schedule for.  */\n-\n-enum processor_type\n-{\n-  PROCESSOR_DEFAULT,\n-  PROCESSOR_IQ2000,\n-  PROCESSOR_IQ10\n-};\n-\n /* Recast the cpu class to be the cpu attribute.  */\n #define iq2000_cpu_attr ((enum attr_cpu) iq2000_tune)\n \n@@ -850,9 +841,6 @@ enum processor_type\n #define SDATA_SECTION_ASM_OP\t\"\\t.sdata\"\t/* Small data.  */\n \n \f\n-/* The target cpu for optimization and scheduling.  */\n-extern enum processor_type iq2000_tune;\n-\n /* Which instruction set architecture to use.  */\n extern int iq2000_isa;\n "}, {"sha": "bfd8dcc43ca666819f3d9d2102d018f6f3fbf82d", "filename": "gcc/config/iq2000/iq2000.opt", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0/gcc%2Fconfig%2Fiq2000%2Fiq2000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0/gcc%2Fconfig%2Fiq2000%2Fiq2000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.opt?ref=e24b8335fad88c8aeb933f6a2ef3c5f0c877a7a0", "patch": "@@ -1,6 +1,6 @@\n ; Options for the Vitesse IQ2000 port of the compiler.\n \n-; Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2011 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -18,14 +18,44 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+HeaderInclude\n+config/iq2000/iq2000-opts.h\n+\n+; The target cpu for optimization and scheduling.\n+Variable\n+enum processor_type iq2000_tune\n+\n+; This option has no effect at the moment.\n march=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(iq2000_arch)\n Specify CPU for code generation purposes\n \n+Enum\n+Name(iq2000_arch) Type(int)\n+\n+EnumValue\n+Enum(iq2000_arch) String(default) Value(0)\n+\n+EnumValue\n+Enum(iq2000_arch) String(DEFAULT) Value(0)\n+\n+EnumValue\n+Enum(iq2000_arch) String(iq2000) Value(0)\n+\n mcpu=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(iq2000_tune) Var(iq2000_tune)\n Specify CPU for scheduling purposes\n \n+Enum\n+Name(iq2000_tune) Type(enum processor_type)\n+Known IQ2000 CPUs (for use with the -mcpu= option):\n+\n+EnumValue\n+Enum(iq2000_tune) String(iq10) Value(PROCESSOR_IQ10)\n+\n+EnumValue\n+Enum(iq2000_tune) String(iq2000) Value(PROCESSOR_IQ2000)\n+\n membedded-data\n Target Mask(EMBEDDED_DATA)\n Use ROM instead of RAM"}]}