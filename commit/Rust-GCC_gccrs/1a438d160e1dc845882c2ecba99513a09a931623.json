{"sha": "1a438d160e1dc845882c2ecba99513a09a931623", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE0MzhkMTYwZTFkYzg0NTg4MmMyZWNiYTk5NTEzYTA5YTkzMTYyMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-03-07T12:46:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-03-07T12:46:44Z"}, "message": "re PR tree-optimization/89595 (DOM miscompiles code)\n\n2019-03-07  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/89595\n\t* tree-ssa-dom.c (dom_opt_dom_walker::optimize_stmt): Take\n\tstmt iterator as reference, take boolean output parameter to\n\tindicate whether the stmt was removed and thus the iterator\n\talready advanced.\n\t(dom_opt_dom_walker::before_dom_children): Re-iterate over\n\tstmts created by folding.\n\n\t* gcc.dg/torture/pr89595.c: New testcase.\n\nFrom-SVN: r269453", "tree": {"sha": "c8c58a79a894a803cb91f1b996eae5bbb7267ffe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8c58a79a894a803cb91f1b996eae5bbb7267ffe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a438d160e1dc845882c2ecba99513a09a931623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a438d160e1dc845882c2ecba99513a09a931623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a438d160e1dc845882c2ecba99513a09a931623", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a438d160e1dc845882c2ecba99513a09a931623/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f879f0e3f2667bd60b88603c5884364a0eed1fc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f879f0e3f2667bd60b88603c5884364a0eed1fc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f879f0e3f2667bd60b88603c5884364a0eed1fc4"}], "stats": {"total": 116, "additions": 105, "deletions": 11}, "files": [{"sha": "544d3ea275d4b71fbae3e7e7f304c2c797ceeea7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a438d160e1dc845882c2ecba99513a09a931623/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a438d160e1dc845882c2ecba99513a09a931623/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a438d160e1dc845882c2ecba99513a09a931623", "patch": "@@ -1,3 +1,13 @@\n+2019-03-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/89595\n+\t* tree-ssa-dom.c (dom_opt_dom_walker::optimize_stmt): Take\n+\tstmt iterator as reference, take boolean output parameter to\n+\tindicate whether the stmt was removed and thus the iterator\n+\talready advanced.\n+\t(dom_opt_dom_walker::before_dom_children): Re-iterate over\n+\tstmts created by folding.\n+\n 2019-03-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89585"}, {"sha": "26f1716df9ad4b8b5e8575bb53844c9550160f34", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a438d160e1dc845882c2ecba99513a09a931623/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a438d160e1dc845882c2ecba99513a09a931623/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a438d160e1dc845882c2ecba99513a09a931623", "patch": "@@ -1,3 +1,8 @@\n+2019-03-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/89595\n+\t* gcc.dg/torture/pr89595.c: New testcase.\n+\n 2019-03-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89585"}, {"sha": "ebd834f32a463561235a7ec24ca82df6fe3f2b32", "filename": "gcc/testsuite/gcc.dg/torture/pr89595.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a438d160e1dc845882c2ecba99513a09a931623/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr89595.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a438d160e1dc845882c2ecba99513a09a931623/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr89595.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr89595.c?ref=1a438d160e1dc845882c2ecba99513a09a931623", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fgimple\" } */\n+\n+int __attribute__((noipa))\n+__GIMPLE(startwith(\"dom\")) bar(int cond, int val)\n+{\n+  int i;\n+\n+  if (0 != 0)\n+    goto bb_6;\n+  else\n+    goto bb_2;\n+\n+bb_2:\n+  if (cond_5(D) != 0)\n+    goto bb_4;\n+  else\n+    goto bb_5;\n+\n+bb_4:\n+  i_6 = val_2(D);\n+  i_1 = val_2(D) > 0 ? i_6 : 0;\n+\n+bb_5:\n+  i_3 = __PHI (bb_4: i_1, bb_2: 0);\n+  return i_3;\n+\n+bb_6:\n+  i_4 = 1;\n+  i_9 = 2;\n+  goto bb_2;\n+}\n+\n+int main()\n+{\n+  if (bar (1, 1) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "b0d56fcf3e378c285c9b6c3ff891080d54fc0edd", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 51, "deletions": 11, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a438d160e1dc845882c2ecba99513a09a931623/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a438d160e1dc845882c2ecba99513a09a931623/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=1a438d160e1dc845882c2ecba99513a09a931623", "patch": "@@ -618,7 +618,7 @@ class dom_opt_dom_walker : public dom_walker\n      various tables mantained by DOM.  Returns the taken edge if\n      the statement is a conditional with a statically determined\n      value.  */\n-  edge optimize_stmt (basic_block, gimple_stmt_iterator);\n+  edge optimize_stmt (basic_block, gimple_stmt_iterator *, bool *);\n };\n \n /* Jump threading, redundancy elimination and const/copy propagation.\n@@ -1480,10 +1480,48 @@ dom_opt_dom_walker::before_dom_children (basic_block bb)\n   m_avail_exprs_stack->pop_to_marker ();\n \n   edge taken_edge = NULL;\n+  /* Initialize visited flag ahead of us, it has undefined state on\n+     pass entry.  */\n   for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+    gimple_set_visited (gsi_stmt (gsi), false);\n+  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi);)\n     {\n+      /* Do not optimize a stmt twice, substitution might end up with\n+         _3 = _3 which is not valid.  */\n+      if (gimple_visited_p (gsi_stmt (gsi)))\n+\t{\n+\t  gsi_next (&gsi);\n+\t  continue;\n+\t}\n+\n+      /* Compute range information and optimize the stmt.  */\n       evrp_range_analyzer.record_ranges_from_stmt (gsi_stmt (gsi), false);\n-      taken_edge = this->optimize_stmt (bb, gsi);\n+      bool removed_p = false;\n+      taken_edge = this->optimize_stmt (bb, &gsi, &removed_p);\n+      if (!removed_p)\n+\tgimple_set_visited (gsi_stmt (gsi), true);\n+\n+      /* Go back and visit stmts inserted by folding after substituting\n+\t into the stmt at gsi.  */\n+      if (gsi_end_p (gsi))\n+\t{\n+\t  gcc_checking_assert (removed_p);\n+\t  gsi = gsi_last_bb (bb);\n+\t  while (!gsi_end_p (gsi) && !gimple_visited_p (gsi_stmt (gsi)))\n+\t    gsi_prev (&gsi);\n+\t}\n+      else\n+\t{\n+\t  do\n+\t    {\n+\t      gsi_prev (&gsi);\n+\t    }\n+\t  while (!gsi_end_p (gsi) && !gimple_visited_p (gsi_stmt (gsi)));\n+\t}\n+      if (gsi_end_p (gsi))\n+\tgsi = gsi_start_bb (bb);\n+      else\n+\tgsi_next (&gsi);\n     }\n \n   /* Now prepare to process dominated blocks.  */\n@@ -1951,15 +1989,16 @@ test_for_singularity (gimple *stmt, gcond *dummy_cond,\n       condition to an equality condition.  */\n \n edge\n-dom_opt_dom_walker::optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n+dom_opt_dom_walker::optimize_stmt (basic_block bb, gimple_stmt_iterator *si,\n+\t\t\t\t   bool *removed_p)\n {\n   gimple *stmt, *old_stmt;\n   bool may_optimize_p;\n   bool modified_p = false;\n   bool was_noreturn;\n   edge retval = NULL;\n \n-  old_stmt = stmt = gsi_stmt (si);\n+  old_stmt = stmt = gsi_stmt (*si);\n   was_noreturn = is_gimple_call (stmt) && gimple_call_noreturn_p (stmt);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -1982,9 +2021,9 @@ dom_opt_dom_walker::optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n \n       /* Try to fold the statement making sure that STMT is kept\n \t up to date.  */\n-      if (fold_stmt (&si))\n+      if (fold_stmt (si))\n \t{\n-\t  stmt = gsi_stmt (si);\n+\t  stmt = gsi_stmt (*si);\n \t  gimple_set_modified (stmt, true);\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -2032,8 +2071,8 @@ dom_opt_dom_walker::optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n \t  if (callee\n \t      && fndecl_built_in_p (callee, BUILT_IN_CONSTANT_P))\n \t    {\n-\t      propagate_tree_value_into_stmt (&si, integer_zero_node);\n-\t      stmt = gsi_stmt (si);\n+\t      propagate_tree_value_into_stmt (si, integer_zero_node);\n+\t      stmt = gsi_stmt (*si);\n \t    }\n \t}\n \n@@ -2089,9 +2128,9 @@ dom_opt_dom_walker::optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n \t}\n \n       update_stmt_if_modified (stmt);\n-      eliminate_redundant_computations (&si, m_const_and_copies,\n+      eliminate_redundant_computations (si, m_const_and_copies,\n \t\t\t\t\tm_avail_exprs_stack);\n-      stmt = gsi_stmt (si);\n+      stmt = gsi_stmt (*si);\n \n       /* Perform simple redundant store elimination.  */\n       if (gimple_assign_single_p (stmt)\n@@ -2118,13 +2157,14 @@ dom_opt_dom_walker::optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n \t    {\n \t      basic_block bb = gimple_bb (stmt);\n \t      unlink_stmt_vdef (stmt);\n-\t      if (gsi_remove (&si, true))\n+\t      if (gsi_remove (si, true))\n \t\t{\n \t\t  bitmap_set_bit (need_eh_cleanup, bb->index);\n \t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t    fprintf (dump_file, \"  Flagged to clear EH edges.\\n\");\n \t\t}\n \t      release_defs (stmt);\n+\t      *removed_p = true;\n \t      return retval;\n \t    }\n \t}"}]}