{"sha": "9e9e204234b883d783914aa909e96c57d45ac081", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU5ZTIwNDIzNGI4ODNkNzgzOTE0YWE5MDllOTZjNTdkNDVhYzA4MQ==", "commit": {"author": {"name": "Scott Gilbertson", "email": "scottg@mantatest.com", "date": "2003-04-19T19:54:39Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-04-19T19:54:39Z"}, "message": "XGraphics.java (XGraphics): Use new GC.create.\n\n2003-04-19  Scott Gilbertson  <scottg@mantatest.com>\n\n\t* gnu/awt/xlib/XGraphics.java (XGraphics): Use new GC.create.\n\t(dispose): Null metrics.\n\t* gnu/awt/xlib/XToolkit.java (sync): Implement.\n\t* gnu/gcj/xlib/Clip.java (dispose): Change name of native from\n\tfinalize.\n\t(finalize): Call dispose.\n\t* gnu/gcj/xlib/Drawable.java (gcCache): New field.\n\t(gcCachedCount): New field.\n\t(finalize): New method.\n\t(putGCInCache): New method.\n\t(getGCFromCache): New method.\n\t* gnu/gcj/xlib/GC.java (GC): Make protected.\n\t(clone): Get new GC from cache if possible.\n\t(create): New static method.\n\t(dispose): Save old GC in cache.\n\t* gnu/gcj/xlib/natClip.cc (dispose): Check for null before\n\tdeleting.\n\t* gnu/gcj/xlib/natGC.cc (initStructure): Call XCreateGC only if gc\n\tis null.\n\t* gnu/gcj/xlib/Pixmap.java (Pixmap): Use new GC.create.\n\t* java/awt/Container.java (visitChild): Dispose gfx2 when\n\tfinished.\n\nFrom-SVN: r65827", "tree": {"sha": "904af78e7c2b08b109cc574a36927a487d9db2f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/904af78e7c2b08b109cc574a36927a487d9db2f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e9e204234b883d783914aa909e96c57d45ac081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e9e204234b883d783914aa909e96c57d45ac081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e9e204234b883d783914aa909e96c57d45ac081", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e9e204234b883d783914aa909e96c57d45ac081/comments", "author": null, "committer": null, "parents": [{"sha": "afd4910af1eeaa5bd13bed450d81761e6fb5bcca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd4910af1eeaa5bd13bed450d81761e6fb5bcca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afd4910af1eeaa5bd13bed450d81761e6fb5bcca"}], "stats": {"total": 159, "additions": 132, "deletions": 27}, "files": [{"sha": "f585134e4100333486848dd6cb25c2948e378778", "filename": "libjava/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9e9e204234b883d783914aa909e96c57d45ac081", "patch": "@@ -1,3 +1,28 @@\n+2003-04-19  Scott Gilbertson  <scottg@mantatest.com>\n+\n+\t* gnu/awt/xlib/XGraphics.java (XGraphics): Use new GC.create.\n+\t(dispose): Null metrics.\n+\t* gnu/awt/xlib/XToolkit.java (sync): Implement.\n+\t* gnu/gcj/xlib/Clip.java (dispose): Change name of native from\n+\tfinalize.\n+\t(finalize): Call dispose.\n+\t* gnu/gcj/xlib/Drawable.java (gcCache): New field.\n+\t(gcCachedCount): New field.\n+\t(finalize): New method.\n+\t(putGCInCache): New method.\n+\t(getGCFromCache): New method.\n+\t* gnu/gcj/xlib/GC.java (GC): Make protected.\n+\t(clone): Get new GC from cache if possible.\n+\t(create): New static method.\n+\t(dispose): Save old GC in cache.\n+\t* gnu/gcj/xlib/natClip.cc (dispose): Check for null before\n+\tdeleting.\n+\t* gnu/gcj/xlib/natGC.cc (initStructure): Call XCreateGC only if gc\n+\tis null.\n+\t* gnu/gcj/xlib/Pixmap.java (Pixmap): Use new GC.create.\n+\t* java/awt/Container.java (visitChild): Dispose gfx2 when\n+\tfinished.\n+\n 2003-04-19  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* java/math/BigInteger.java (probablePrime): New."}, {"sha": "47ab2b851450331734bfda812da1d278683a94fc", "filename": "libjava/gnu/awt/xlib/XGraphics.java", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fgnu%2Fawt%2Fxlib%2FXGraphics.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fgnu%2Fawt%2Fxlib%2FXGraphics.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fxlib%2FXGraphics.java?ref=9e9e204234b883d783914aa909e96c57d45ac081", "patch": "@@ -58,16 +58,17 @@ public void dispose()\n     context = null;\n     config = null;\n     clipBounds = null;\n+    metrics = null;\n     \n     if (lContext != null)\n-      {\n-\tlContext.dispose();\n-      }\t    \n+    {\n+      lContext.dispose();\n+    }\t    \n   }\n \n   public XGraphics(Drawable drawable, XGraphicsConfiguration config)\n   {\n-    context = new GC(drawable);\n+    context = GC.create(drawable);\n     this.config = config;\n   }  \n   "}, {"sha": "3da993f3924c27f7f4ff975b34c6d10b0998a5ac", "filename": "libjava/gnu/awt/xlib/XToolkit.java", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fgnu%2Fawt%2Fxlib%2FXToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fgnu%2Fawt%2Fxlib%2FXToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fxlib%2FXToolkit.java?ref=9e9e204234b883d783914aa909e96c57d45ac081", "patch": "@@ -188,7 +188,10 @@ public FontMetrics getFontMetrics(Font font)\n \n   public void sync()\n   {\n-    throw new UnsupportedOperationException(\"not implemented yet\");\n+    flushIfIdle ();\n+    // FIXME: should instead wait for eventLoop to go idle\n+    // (perhaps send a dummy event there and block till it makes\n+    // it through the queue)\n   }\n     \n   public Image getImage(String filename)"}, {"sha": "311dfa6feec8fb876f54e3d9096503ccab261a14", "filename": "libjava/gnu/gcj/xlib/Clip.java", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fgnu%2Fgcj%2Fxlib%2FClip.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fgnu%2Fgcj%2Fxlib%2FClip.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fxlib%2FClip.java?ref=9e9e204234b883d783914aa909e96c57d45ac081", "patch": "@@ -29,7 +29,12 @@ public Clip(Rectangle[] rects)\n \n   private native void init(Rectangle[] rects);\n \n-  public native void finalize();\n+  public void finalize()\n+  {\n+    dispose ();\n+  }\n+  \n+  public native void dispose();\n \n   RawData xrects;\n }"}, {"sha": "551aca84c1827a0838a7320e940c45179e20cbfa", "filename": "libjava/gnu/gcj/xlib/Drawable.java", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fgnu%2Fgcj%2Fxlib%2FDrawable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fgnu%2Fgcj%2Fxlib%2FDrawable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fxlib%2FDrawable.java?ref=9e9e204234b883d783914aa909e96c57d45ac081", "patch": "@@ -16,6 +16,9 @@\n  */\n public class Drawable extends XID\n {\n+  private GC[] gcCache = new GC[10];\n+  private int gcCachedCount = 0;\n+\n   public Drawable(Display display, int xid)\n   {\n     super(display, xid);\n@@ -78,5 +81,36 @@ private native boolean copyIntoXImageImpl(XImage destinationImage,\n   \n   private static final String MSG_XGETSUBIMAGE_FAILED =\n     \"XGetSubImage() failed.\";\n-    \n+\n+  protected void finalize() throws Throwable\n+  {\n+    // Dispose all the cached GCs, to reduce X server resource usage\n+    for (int i=0; i<gcCachedCount; i++)\n+      gcCache[i].disposeImpl ();\n+    gcCachedCount = 0;\n+    super.finalize();\n+  }\n+\n+  /** Put a GC in the cache for this drawable, so it can be retrieved later.\n+   * @param gc The GC to put\n+   */\n+  void putGCInCache (GC gc)\n+  {\n+    if (gcCachedCount >= gcCache.length)\n+    {\n+      // List full - extend it to double its present size\n+      GC[] oldList = gcCache;\n+      gcCache = new GC[oldList.length*2];\n+      System.arraycopy (oldList,0,gcCache,0,oldList.length);\n+    }\n+    gcCache[gcCachedCount++] = gc;\n+  }\n+\n+  /** Get a GC from the cache, if available\n+   * @return A GC from the cache, or null if the cache is empty\n+   */\n+  GC getGCFromCache ()\n+  {\n+    return (gcCachedCount>0) ? gcCache[--gcCachedCount] : null;\n+  }\n }"}, {"sha": "2c4d8a81f6a7699e045e272da1773be1eec9af27", "filename": "libjava/gnu/gcj/xlib/GC.java", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fgnu%2Fgcj%2Fxlib%2FGC.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fgnu%2Fgcj%2Fxlib%2FGC.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fxlib%2FGC.java?ref=9e9e204234b883d783914aa909e96c57d45ac081", "patch": "@@ -23,17 +23,25 @@\n  */\n public class GC implements Cloneable\n {\n-  \n-  public GC(Drawable target)\n+  /** Protected constructor, because GC.create(target) should be used instead.\n+   */\n+  protected GC(Drawable target)\n   {\n     this.target = target;\n     initStructure(null);\n   }\n \n+  /** Try to get a suitable GC from the drawable's cache.\n+   * If there isn't one, create one.\n+   */\n   public Object clone()\n   {\n-    GC gcClone = (GC) super.clone();\n-    gcClone.structure = null;\n+    GC gcClone = target.getGCFromCache ();\n+    if (gcClone==null)\n+    {\n+      gcClone = (GC) super.clone();\n+      gcClone.structure = null;\n+    }\n     gcClone.initStructure(this);\n     gcClone.updateClip();\n     return gcClone;\n@@ -45,15 +53,31 @@ public GC create()\n   {\n     return (GC) clone();\n   }\n+  \n+  /** Create a GC, or if one is already cached for target, return that.\n+   * @param target The Drawable for which a GC is needed\n+   * @return The new or retrieved GC\n+   */\n+  static public GC create (Drawable target)\n+  {\n+    GC returnValue = target.getGCFromCache ();\n+    if (returnValue == null)\n+      returnValue = new GC (target);\n+    return returnValue;\n+  }\n \n   public void finalize()\n   {\n     disposeImpl();\n   }\n \n+  /** Save this GC in the drawable's cache.\n+   *  The \"real\" dispose (disposeImpl) is called when the\n+   *  drawable is finialized, to free X server resources.\n+   */\n   public void dispose()\n   {\n-    disposeImpl();\n+    target.putGCInCache (this);\n   }\n \n   public synchronized native void disposeImpl();"}, {"sha": "7ba5a62f993e26d00c88c9331235894810bc328b", "filename": "libjava/gnu/gcj/xlib/Pixmap.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fgnu%2Fgcj%2Fxlib%2FPixmap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fgnu%2Fgcj%2Fxlib%2FPixmap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fxlib%2FPixmap.java?ref=9e9e204234b883d783914aa909e96c57d45ac081", "patch": "@@ -25,7 +25,7 @@ public Pixmap(XImage image, Screen screen)\n     /* FIXME: don't create a new GC all the time.  This might actually\n     not be as bad as initially believed.  The GC cache of Xlib makes\n     this operation less costly. */\n-    GC gc = new GC(this);\n+    GC gc = GC.create (this);\n     \n     gc.putImage(image, 0, 0, 0, 0, image.getWidth(), image.getHeight());\n   }"}, {"sha": "a1f626dfe351383138b580daacf954dd64d03bf6", "filename": "libjava/gnu/gcj/xlib/natClip.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatClip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatClip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatClip.cc?ref=9e9e204234b883d783914aa909e96c57d45ac081", "patch": "@@ -46,7 +46,11 @@ void gnu::gcj::xlib::Clip::init(AWTRectArray* rectangles)\n   xrects = reinterpret_cast<gnu::gcj::RawData*>(xrectvector);\n }\n \n-void gnu::gcj::xlib::Clip::finalize()\n+void gnu::gcj::xlib::Clip::dispose()\n {\n-  delete xrects; xrects = 0;\n+  if (xrects)\n+  {\n+    delete xrects; \n+    xrects = 0;\n+  }\n }"}, {"sha": "16b0bc50199c55340d18cca66a2fe77e08367507", "filename": "libjava/gnu/gcj/xlib/natGC.cc", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatGC.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatGC.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatGC.cc?ref=9e9e204234b883d783914aa909e96c57d45ac081", "patch": "@@ -34,21 +34,23 @@ void gnu::gcj::xlib::GC::initStructure(GC* copyFrom)\n {\n   Display* display = target->getDisplay();\n   ::Display* dpy = (::Display*) (display->display);\n-  ::Drawable drawableXID = target->getXID();\n-    \n-  ::GC gc = XCreateGC(dpy, drawableXID, 0, 0);\n-  \n-  if (gc == 0) \n-    throw new XException(JvNewStringLatin1(\"GC creation failed\"));\n+  ::GC gc = (::GC) structure;\n+  if (gc == 0)\n+  {\n+    // If we haven't already created a GC, create one now\n+    ::Drawable drawableXID = target->getXID();\n+    gc = XCreateGC(dpy, drawableXID, 0, 0);\n+    structure = reinterpret_cast<gnu::gcj::RawData*>(gc);\n+    if (gc == 0) \n+      throw new XException(JvNewStringLatin1(\"GC creation failed\"));\n+  }\n \n   if (copyFrom != 0)\n     {\n       ::GC fromGC = (::GC) copyFrom->structure;\n       XCopyGC(dpy, fromGC, ~0, gc);\n       // no fast fail\n     }\n-\n-  structure = reinterpret_cast<gnu::gcj::RawData*>(gc);\n }\n \n void gnu::gcj::xlib::GC::disposeImpl()"}, {"sha": "9ef6add71dbf698ce505ac3061e2294dfc9c9112", "filename": "libjava/java/awt/Container.java", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fjava%2Fawt%2FContainer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e9e204234b883d783914aa909e96c57d45ac081/libjava%2Fjava%2Fawt%2FContainer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FContainer.java?ref=9e9e204234b883d783914aa909e96c57d45ac081", "patch": "@@ -1,5 +1,5 @@\n /* Container.java -- parent container class in AWT\n-   Copyright (C) 1999, 2000, 2002 Free Software Foundation\n+   Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -1205,10 +1205,17 @@ private void visitChild(Graphics gfx, GfxVisitor visitor,\n     if (clip.isEmpty()) return;\n \n     Graphics gfx2 = gfx.create();\n-    gfx2.setClip(clip.x, clip.y, clip.width, clip.height);\n-    gfx2.translate(bounds.x, bounds.y);\n+    try\n+      {\n+\tgfx2.setClip(clip.x, clip.y, clip.width, clip.height);\n+\tgfx2.translate(bounds.x, bounds.y);\n \n-    visitor.visit(comp, gfx2);\n+\tvisitor.visit(comp, gfx2);\n+      }\n+    finally\n+      {\n+\tgfx2.dispose ();\n+      }\n   }\n \n   void dispatchEventImpl(AWTEvent e)"}]}