{"sha": "b93e0cfdd185098c4b5bb059afb92e0cbe8f235c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkzZTBjZmRkMTg1MDk4YzRiNWJiMDU5YWZiOTJlMGNiZThmMjM1Yw==", "commit": {"author": {"name": "Chris Manghane", "email": "cmang@google.com", "date": "2013-10-14T22:52:55Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-14T22:52:55Z"}, "message": "runtime: Don't clobber saved context when catching signal.\n\n\t* go-gcc.cc (Gcc_backend::address_expression): New function.\n\nFrom-SVN: r203579", "tree": {"sha": "41f23c7bb9722e4a5193e9ae568a92f62eb6da05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41f23c7bb9722e4a5193e9ae568a92f62eb6da05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c/comments", "author": null, "committer": null, "parents": [{"sha": "be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be66a22638ada47b4fdf0b42be1d44e6cd4fe104"}], "stats": {"total": 96, "additions": 66, "deletions": 30}, "files": [{"sha": "70f34968d92627b3a62de2ba06e9211ee8305784", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=b93e0cfdd185098c4b5bb059afb92e0cbe8f235c", "patch": "@@ -1,3 +1,7 @@\n+2013-10-14  Chris Manghane  <cmang@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::address_expression): New function.\n+\n 2013-10-11  Chris Manghane  <cmang@google.com>\n \n \t* go-gcc.cc (Gcc_backend::function_code_expression): New"}, {"sha": "5ff529fc62b1e0d442ed915051d0c0f1ef078da6", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=b93e0cfdd185098c4b5bb059afb92e0cbe8f235c", "patch": "@@ -235,6 +235,9 @@ class Gcc_backend : public Backend\n   Bexpression*\n   function_code_expression(Bfunction*, Location);\n \n+  Bexpression*\n+  address_expression(Bexpression*, Location);\n+\n   // Statements.\n \n   Bstatement*\n@@ -997,6 +1000,19 @@ Gcc_backend::function_code_expression(Bfunction* bfunc, Location location)\n   return this->make_expression(ret);\n }\n \n+// Get the address of an expression.\n+\n+Bexpression*\n+Gcc_backend::address_expression(Bexpression* bexpr, Location location)\n+{\n+  tree expr = bexpr->get_tree();\n+  if (expr == error_mark_node)\n+    return this->error_expression();\n+\n+  tree ret = build_fold_addr_expr_loc(location.gcc_location(), expr);\n+  return this->make_expression(ret);\n+}\n+\n // An expression as a statement.\n \n Bstatement*"}, {"sha": "6f2c321e09e50d087989a35af5628df70d63301a", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=b93e0cfdd185098c4b5bb059afb92e0cbe8f235c", "patch": "@@ -271,6 +271,10 @@ class Backend\n   virtual Bexpression*\n   function_code_expression(Bfunction*, Location) = 0;\n \n+  // Create an expression that takes the address of an expression.\n+  virtual Bexpression*\n+  address_expression(Bexpression*, Location) = 0;\n+\n   // Statements.\n \n   // Create an error statement.  This is used for cases which should"}, {"sha": "f46c37fd1f7cfa5d10d48ab1ae86c7fbffe22e5e", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=b93e0cfdd185098c4b5bb059afb92e0cbe8f235c", "patch": "@@ -286,7 +286,11 @@ Expression::convert_type_to_interface(Translate_context* context,\n   // Otherwise it is the interface method table for RHS_TYPE.\n   tree first_field_value;\n   if (lhs_is_empty)\n-    first_field_value = rhs_type->type_descriptor_pointer(gogo, location);\n+    {\n+      Bexpression* rhs_bexpr =\n+          rhs_type->type_descriptor_pointer(gogo, location);\n+      first_field_value = expr_to_tree(rhs_bexpr);\n+    }\n   else\n     {\n       // Build the interface method table for this interface and this\n@@ -457,8 +461,9 @@ Expression::convert_interface_to_interface(Translate_context* context,\n   if (for_type_guard)\n     {\n       // A type assertion fails when converting a nil interface.\n-      tree lhs_type_descriptor = lhs_type->type_descriptor_pointer(gogo,\n-\t\t\t\t\t\t\t\t   location);\n+      Bexpression* lhs_type_expr = lhs_type->type_descriptor_pointer(gogo,\n+                                                                     location);\n+      tree lhs_type_descriptor = expr_to_tree(lhs_type_expr);\n       static tree assert_interface_decl;\n       tree call = Gogo::call_builtin(&assert_interface_decl,\n \t\t\t\t     location,\n@@ -491,8 +496,10 @@ Expression::convert_interface_to_interface(Translate_context* context,\n       // type assertion converting nil will always succeed.\n       go_assert(strcmp(IDENTIFIER_POINTER(DECL_NAME(field)), \"__methods\")\n \t\t == 0);\n-      tree lhs_type_descriptor = lhs_type->type_descriptor_pointer(gogo,\n-\t\t\t\t\t\t\t\t   location);\n+      Bexpression* lhs_type_expr = lhs_type->type_descriptor_pointer(gogo,\n+                                                                     location);\n+      tree lhs_type_descriptor = expr_to_tree(lhs_type_expr);\n+\n       static tree convert_interface_decl;\n       tree call = Gogo::call_builtin(&convert_interface_decl,\n \t\t\t\t     location,\n@@ -546,8 +553,9 @@ Expression::convert_interface_to_type(Translate_context* context,\n   // Call a function to check that the type is valid.  The function\n   // will panic with an appropriate runtime type error if the type is\n   // not valid.\n-\n-  tree lhs_type_descriptor = lhs_type->type_descriptor_pointer(gogo, location);\n+  Bexpression* lhs_type_expr = lhs_type->type_descriptor_pointer(gogo,\n+                                                                 location);\n+  tree lhs_type_descriptor = expr_to_tree(lhs_type_expr);\n \n   if (!DECL_P(rhs_tree))\n     rhs_tree = save_expr(rhs_tree);\n@@ -556,8 +564,9 @@ Expression::convert_interface_to_type(Translate_context* context,\n     Expression::get_interface_type_descriptor(context, rhs_type, rhs_tree,\n \t\t\t\t\t      location);\n \n-  tree rhs_inter_descriptor = rhs_type->type_descriptor_pointer(gogo,\n-\t\t\t\t\t\t\t\tlocation);\n+  Bexpression* rhs_inter_expr = rhs_type->type_descriptor_pointer(gogo,\n+                                                                  location);\n+  tree rhs_inter_descriptor = expr_to_tree(rhs_inter_expr);\n \n   static tree check_interface_type_decl;\n   tree call = Gogo::call_builtin(&check_interface_type_decl,\n@@ -6500,8 +6509,9 @@ Expression::comparison_tree(Translate_context* context, Type* result_type,\n \t}\n       arg = fold_convert_loc(location.gcc_location(), ptr_type_node, arg);\n \n-      tree descriptor = right_type->type_descriptor_pointer(context->gogo(),\n-\t\t\t\t\t\t\t    location);\n+      Bexpression* descriptor_bexpr =\n+          right_type->type_descriptor_pointer(context->gogo(), location);\n+      tree descriptor = expr_to_tree(descriptor_bexpr);\n \n       if (left_type->interface_type()->is_empty())\n \t{\n@@ -13256,7 +13266,8 @@ Map_construction_expression::do_get_tree(Translate_context* context)\n       valaddr = build_fold_addr_expr(tmp);\n     }\n \n-  tree descriptor = mt->map_descriptor_pointer(gogo, loc);\n+  Bexpression* bdescriptor = mt->map_descriptor_pointer(gogo, loc);\n+  tree descriptor = expr_to_tree(bdescriptor);\n \n   tree type_tree = type_to_tree(this->type_->get_backend(gogo));\n   if (type_tree == error_mark_node)\n@@ -14312,8 +14323,9 @@ class Type_descriptor_expression : public Expression\n   tree\n   do_get_tree(Translate_context* context)\n   {\n-    return this->type_->type_descriptor_pointer(context->gogo(),\n-\t\t\t\t\t\tthis->location());\n+    Bexpression* ret = this->type_->type_descriptor_pointer(context->gogo(),\n+                                                            this->location());\n+    return expr_to_tree(ret);\n   }\n \n   void\n@@ -14568,8 +14580,9 @@ class Map_descriptor_expression : public Expression\n   tree\n   do_get_tree(Translate_context* context)\n   {\n-    return this->type_->map_descriptor_pointer(context->gogo(),\n-\t\t\t\t\t       this->location());\n+    Bexpression* ret = this->type_->map_descriptor_pointer(context->gogo(),\n+                                                           this->location());\n+    return expr_to_tree(ret);\n   }\n \n   void"}, {"sha": "3793b839b55e67ac2c47d258ae51601c695b341b", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=b93e0cfdd185098c4b5bb059afb92e0cbe8f235c", "patch": "@@ -2107,8 +2107,10 @@ Gogo::interface_method_table_for_type(const Interface_type* interface,\n     td_type = type;\n   else\n     td_type = Type::make_pointer_type(type);\n-  tree tdp = td_type->type_descriptor_pointer(this,\n-                                              Linemap::predeclared_location());\n+\n+  Location loc = Linemap::predeclared_location();\n+  Bexpression* tdp_bexpr = td_type->type_descriptor_pointer(this, loc);\n+  tree tdp = expr_to_tree(tdp_bexpr);\n   elt->value = fold_convert(const_ptr_type_node, tdp);\n \n   Named_type* nt = type->named_type();"}, {"sha": "7d808ca5d7a9e6594dc14383afea9be077060269", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=b93e0cfdd185098c4b5bb059afb92e0cbe8f235c", "patch": "@@ -1204,7 +1204,7 @@ Type::finish_backend(Gogo* gogo, Btype *placeholder)\n \n // Return a pointer to the type descriptor for this type.\n \n-tree\n+Bexpression*\n Type::type_descriptor_pointer(Gogo* gogo, Location location)\n {\n   Type* t = this->forwarded();\n@@ -1215,10 +1215,9 @@ Type::type_descriptor_pointer(Gogo* gogo, Location location)\n       t->make_type_descriptor_var(gogo);\n       go_assert(t->type_descriptor_var_ != NULL);\n     }\n-  tree var_tree = var_to_tree(t->type_descriptor_var_);\n-  if (var_tree == error_mark_node)\n-    return error_mark_node;\n-  return build_fold_addr_expr_loc(location.gcc_location(), var_tree);\n+  Bexpression* var_expr =\n+      gogo->backend()->var_expression(t->type_descriptor_var_, location);\n+  return gogo->backend()->address_expression(var_expr, location);\n }\n \n // A mapping from unnamed types to type descriptor variables.\n@@ -6250,14 +6249,12 @@ Map_type::Map_descriptors Map_type::map_descriptors;\n \n // Build a map descriptor for this type.  Return a pointer to it.\n \n-tree\n+Bexpression*\n Map_type::map_descriptor_pointer(Gogo* gogo, Location location)\n {\n   Bvariable* bvar = this->map_descriptor(gogo);\n-  tree var_tree = var_to_tree(bvar);\n-  if (var_tree == error_mark_node)\n-    return error_mark_node;\n-  return build_fold_addr_expr_loc(location.gcc_location(), var_tree);\n+  Bexpression* var_expr = gogo->backend()->var_expression(bvar, location);\n+  return gogo->backend()->address_expression(var_expr, location);\n }\n \n // Build a map descriptor for this type."}, {"sha": "131c9dec6085ae4d13ddc20f1e3576127dfd90fa", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93e0cfdd185098c4b5bb059afb92e0cbe8f235c/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=b93e0cfdd185098c4b5bb059afb92e0cbe8f235c", "patch": "@@ -901,7 +901,7 @@ class Type\n   // Build a type descriptor entry for this type.  Return a pointer to\n   // it.  The location is the location which causes us to need the\n   // entry.\n-  tree\n+  Bexpression*\n   type_descriptor_pointer(Gogo* gogo, Location);\n \n   // Return the type reflection string for this type.\n@@ -2401,7 +2401,7 @@ class Map_type : public Type\n   // Build a map descriptor for this type.  Return a pointer to it.\n   // The location is the location which causes us to need the\n   // descriptor.\n-  tree\n+  Bexpression*\n   map_descriptor_pointer(Gogo* gogo, Location);\n \n  protected:"}]}