{"sha": "842173466d766db080cbc9e837988e31b453d05f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQyMTczNDY2ZDc2NmRiMDgwY2JjOWU4Mzc5ODhlMzFiNDUzZDA1Zg==", "commit": {"author": {"name": "Marcin Dalecki", "email": "martin@dalecki.de", "date": "2006-01-31T04:44:14Z"}, "committer": {"name": "Marcin Dalecki", "email": "dalecki@gcc.gnu.org", "date": "2006-01-31T04:44:14Z"}, "message": "expr.h (expand_normal): new inline function.\n\n2006-01-30  Marcin Dalecki  <martin@dalecki.de>\n\n\t* expr.h (expand_normal): new inline function.\n\t* builtins.c: use it, use EXPAND_NORMAL explicitely.\n\t* dojump.c: use it.\n\t* dwarf2out.c: use it.\n\t* expr.c: use it.\n\t* calls.c: use it.\n\t* expmed.c: use it.\n\t* except.c: use it.\n\t* config/sparc/sparc.c: use it.\n\t* config/i386/i386.c: use it.\n\t* config/rs6000/rs6000.c: use it.\n\t* config/arm/arm.c: use it.\n\t* config/mips/mips.c: use it.\n\t* stmt.c: use it, use EXPAND_NORMAL explicitely.\n\nFrom-SVN: r110428", "tree": {"sha": "192fa663854a8c88d61fa5a51c2091381047e15d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/192fa663854a8c88d61fa5a51c2091381047e15d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/842173466d766db080cbc9e837988e31b453d05f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842173466d766db080cbc9e837988e31b453d05f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/842173466d766db080cbc9e837988e31b453d05f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842173466d766db080cbc9e837988e31b453d05f/comments", "author": {"login": "rosomak", "id": 2399361, "node_id": "MDQ6VXNlcjIzOTkzNjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2399361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rosomak", "html_url": "https://github.com/rosomak", "followers_url": "https://api.github.com/users/rosomak/followers", "following_url": "https://api.github.com/users/rosomak/following{/other_user}", "gists_url": "https://api.github.com/users/rosomak/gists{/gist_id}", "starred_url": "https://api.github.com/users/rosomak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rosomak/subscriptions", "organizations_url": "https://api.github.com/users/rosomak/orgs", "repos_url": "https://api.github.com/users/rosomak/repos", "events_url": "https://api.github.com/users/rosomak/events{/privacy}", "received_events_url": "https://api.github.com/users/rosomak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4536bcac6522406e0c4f2a79aee0451d8985a56f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4536bcac6522406e0c4f2a79aee0451d8985a56f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4536bcac6522406e0c4f2a79aee0451d8985a56f"}], "stats": {"total": 443, "additions": 218, "deletions": 225}, "files": [{"sha": "9dd204de1067467dd24d27a4455d88be52467427", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842173466d766db080cbc9e837988e31b453d05f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842173466d766db080cbc9e837988e31b453d05f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=842173466d766db080cbc9e837988e31b453d05f", "patch": "@@ -1,3 +1,20 @@\n+2006-01-30  Marcin Dalecki  <martin@dalecki.de>\n+\n+\t* expr.h (expand_normal): new inline function.\n+\t* builtins.c: use it, use EXPAND_NORMAL explicitely.\n+\t* dojump.c: use it.\n+\t* dwarf2out.c: use it.\n+\t* expr.c: use it.\n+\t* calls.c: use it.\n+\t* expmed.c: use it.\n+\t* except.c: use it.\n+\t* config/sparc/sparc.c: use it.\n+\t* config/i386/i386.c: use it.\n+\t* config/rs6000/rs6000.c: use it.\n+\t* config/arm/arm.c: use it.\n+\t* config/mips/mips.c: use it.\n+\t* stmt.c: use it, use EXPAND_NORMAL explicitely.\n+\n 2006-01-30  Roger Sayle  <roger@eyesopen.com>\n \n \t* config/i386/cygwin.h (GCC_DRIVER_HOST_INITIALIZATION): Cast"}, {"sha": "bb113dc7f7b996318c90b83cde46441ab1294b9d", "filename": "gcc/builtins.c", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=842173466d766db080cbc9e837988e31b453d05f", "patch": "@@ -700,7 +700,7 @@ expand_builtin_setjmp (tree arglist, rtx target)\n       || REGNO (target) < FIRST_PSEUDO_REGISTER)\n     target = gen_reg_rtx (TYPE_MODE (integer_type_node));\n \n-  buf_addr = expand_expr (TREE_VALUE (arglist), NULL_RTX, VOIDmode, 0);\n+  buf_addr = expand_normal (TREE_VALUE (arglist));\n \n   next_lab = gen_label_rtx ();\n   cont_lab = gen_label_rtx ();\n@@ -842,9 +842,9 @@ expand_builtin_nonlocal_goto (tree arglist)\n   arglist = TREE_CHAIN (arglist);\n   t_save_area = TREE_VALUE (arglist);\n \n-  r_label = expand_expr (t_label, NULL_RTX, VOIDmode, 0);\n+  r_label = expand_normal (t_label);\n   r_label = convert_memory_address (Pmode, r_label);\n-  r_save_area = expand_expr (t_save_area, NULL_RTX, VOIDmode, 0);\n+  r_save_area = expand_normal (t_save_area);\n   r_save_area = convert_memory_address (Pmode, r_save_area);\n   r_fp = gen_rtx_MEM (Pmode, r_save_area);\n   r_sp = gen_rtx_MEM (STACK_SAVEAREA_MODE (SAVE_NONLOCAL),\n@@ -975,7 +975,7 @@ expand_builtin_prefetch (tree arglist)\n       error (\"second argument to %<__builtin_prefetch%> must be a constant\");\n       arg1 = integer_zero_node;\n     }\n-  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  op1 = expand_normal (arg1);\n   /* Argument 1 must be either zero or one.  */\n   if (INTVAL (op1) != 0 && INTVAL (op1) != 1)\n     {\n@@ -990,7 +990,7 @@ expand_builtin_prefetch (tree arglist)\n       error (\"third argument to %<__builtin_prefetch%> must be a constant\");\n       arg2 = integer_zero_node;\n     }\n-  op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+  op2 = expand_normal (arg2);\n   /* Argument 2 must be 0, 1, 2, or 3.  */\n   if (INTVAL (op2) < 0 || INTVAL (op2) > 3)\n     {\n@@ -2019,8 +2019,8 @@ expand_builtin_mathfn_2 (tree exp, rtx target, rtx subtarget)\n   if (! stable)\n     exp = build_function_call_expr (fndecl, arglist);\n \n-  op0 = expand_expr (arg0, subtarget, VOIDmode, 0);\n-  op1 = expand_expr (arg1, 0, VOIDmode, 0);\n+  op0 = expand_expr (arg0, subtarget, VOIDmode, EXPAND_NORMAL);\n+  op1 = expand_normal (arg1);\n \n   start_sequence ();\n \n@@ -2193,9 +2193,9 @@ expand_builtin_sincos (tree exp)\n   target1 = gen_reg_rtx (mode);\n   target2 = gen_reg_rtx (mode);\n \n-  op0 = expand_expr (arg, NULL_RTX, VOIDmode, 0);\n-  op1 = expand_expr (build_fold_indirect_ref (sinp), NULL_RTX, VOIDmode, 0);\n-  op2 = expand_expr (build_fold_indirect_ref (cosp), NULL_RTX, VOIDmode, 0);\n+  op0 = expand_normal (arg);\n+  op1 = expand_normal (build_fold_indirect_ref (sinp));\n+  op2 = expand_normal (build_fold_indirect_ref (cosp));\n \n   /* Compute into target1 and target2.\n      Set TARGET to wherever the result comes back.  */\n@@ -2857,7 +2857,7 @@ expand_builtin_memcpy (tree exp, rtx target, enum machine_mode mode)\n \n       dest_mem = get_memory_rtx (dest, len);\n       set_mem_align (dest_mem, dest_align);\n-      len_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n+      len_rtx = expand_normal (len);\n       src_str = c_getstr (src);\n \n       /* If SRC is a string constant and block move would be done\n@@ -2944,7 +2944,7 @@ expand_builtin_mempcpy (tree arglist, tree type, rtx target, enum machine_mode m\n       if (! host_integerp (len, 1))\n \treturn 0;\n \n-      len_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n+      len_rtx = expand_normal (len);\n       src_str = c_getstr (src);\n \n       /* If SRC is a string constant and block move would be done\n@@ -3215,7 +3215,7 @@ expand_builtin_stpcpy (tree exp, rtx target, enum machine_mode mode)\n \n       if (TREE_CODE (len) == INTEGER_CST)\n \t{\n-\t  rtx len_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n+\t  rtx len_rtx = expand_normal (len);\n \n \t  if (GET_CODE (len_rtx) == CONST_INT)\n \t    {\n@@ -3396,15 +3396,15 @@ expand_builtin_memset (tree arglist, rtx target, enum machine_mode mode,\n \t  return expand_expr (dest, target, mode, EXPAND_NORMAL);\n \t}\n \n-      len_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n+      len_rtx = expand_normal (len);\n       dest_mem = get_memory_rtx (dest, len);\n \n       if (TREE_CODE (val) != INTEGER_CST)\n \t{\n \t  rtx val_rtx;\n \n \t  val = fold_build1 (CONVERT_EXPR, unsigned_char_type_node, val);\n-\t  val_rtx = expand_expr (val, NULL_RTX, VOIDmode, 0);\n+\t  val_rtx = expand_normal (val);\n \n \t  /* Assume that we can memset by pieces if we can store the\n \t   * the coefficients by pieces (in the required modes).\n@@ -3550,7 +3550,7 @@ expand_builtin_memcmp (tree exp ATTRIBUTE_UNUSED, tree arglist, rtx target,\n \n     arg1_rtx = get_memory_rtx (arg1, len);\n     arg2_rtx = get_memory_rtx (arg2, len);\n-    arg3_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n+    arg3_rtx = expand_normal (len);\n \n     /* Set MEM_SIZE as appropriate.  */\n     if (GET_CODE (arg3_rtx) == CONST_INT)\n@@ -3709,7 +3709,7 @@ expand_builtin_strcmp (tree exp, rtx target, enum machine_mode mode)\n \t    return 0;\n \n \t  /* Stabilize the arguments in case gen_cmpstrnsi fails.  */\n-\t  arg3_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n+\t  arg3_rtx = expand_normal (len);\n \n \t  /* Make a place to write the result of the instruction.  */\n \t  result = target;\n@@ -3849,7 +3849,7 @@ expand_builtin_strncmp (tree exp, rtx target, enum machine_mode mode)\n \n     arg1_rtx = get_memory_rtx (arg1, len);\n     arg2_rtx = get_memory_rtx (arg2, len);\n-    arg3_rtx = expand_expr (len, NULL_RTX, VOIDmode, 0);\n+    arg3_rtx = expand_normal (len);\n     insn = gen_cmpstrnsi (result, arg1_rtx, arg2_rtx, arg3_rtx,\n \t\t\t  GEN_INT (MIN (arg1_align, arg2_align)));\n     if (insn)\n@@ -4516,7 +4516,7 @@ expand_builtin_alloca (tree arglist, rtx target)\n     return 0;\n \n   /* Compute the argument.  */\n-  op0 = expand_expr (TREE_VALUE (arglist), NULL_RTX, VOIDmode, 0);\n+  op0 = expand_normal (TREE_VALUE (arglist));\n \n   /* Allocate the desired space.  */\n   result = allocate_dynamic_stack_space (op0, target, BITS_PER_UNIT);\n@@ -4774,10 +4774,10 @@ expand_builtin_copysign (tree arglist, rtx target, rtx subtarget)\n     return 0;\n \n   arg = TREE_VALUE (arglist);\n-  op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+  op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n \n   arg = TREE_VALUE (TREE_CHAIN (arglist));\n-  op1 = expand_expr (arg, NULL, VOIDmode, 0);\n+  op1 = expand_normal (arg);\n \n   return expand_copysign (op0, op1, target);\n }\n@@ -5174,9 +5174,9 @@ expand_builtin_init_trampoline (tree arglist)\n   arglist = TREE_CHAIN (arglist);\n   t_chain = TREE_VALUE (arglist);\n \n-  r_tramp = expand_expr (t_tramp, NULL_RTX, VOIDmode, 0);\n-  r_func = expand_expr (t_func, NULL_RTX, VOIDmode, 0);\n-  r_chain = expand_expr (t_chain, NULL_RTX, VOIDmode, 0);\n+  r_tramp = expand_normal (t_tramp);\n+  r_func = expand_normal (t_func);\n+  r_chain = expand_normal (t_chain);\n \n   /* Generate insns to initialize the trampoline.  */\n   r_tramp = round_trampoline_addr (r_tramp);\n@@ -5200,7 +5200,7 @@ expand_builtin_adjust_trampoline (tree arglist)\n   if (!validate_arglist (arglist, POINTER_TYPE, VOID_TYPE))\n     return NULL_RTX;\n \n-  tramp = expand_expr (TREE_VALUE (arglist), NULL_RTX, VOIDmode, 0);\n+  tramp = expand_normal (TREE_VALUE (arglist));\n   tramp = round_trampoline_addr (tramp);\n #ifdef TRAMPOLINE_ADJUST_ADDRESS\n   TRAMPOLINE_ADJUST_ADDRESS (tramp);\n@@ -5247,7 +5247,7 @@ expand_builtin_signbit (tree exp, rtx target)\n     return expand_expr (arg, target, VOIDmode, EXPAND_NORMAL);\n   }\n \n-  temp = expand_expr (arg, NULL_RTX, VOIDmode, 0);\n+  temp = expand_normal (arg);\n   if (GET_MODE_SIZE (fmode) <= UNITS_PER_WORD)\n     {\n       imode = int_mode_for_mode (fmode);\n@@ -5726,7 +5726,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \t  rtx ops[3];\n \n \t  for (t = arglist, i = 0; t; t = TREE_CHAIN (t), i++)\n-\t    ops[i] = expand_expr (TREE_VALUE (t), NULL_RTX, VOIDmode, 0);\n+\t    ops[i] = expand_normal (TREE_VALUE (t));\n \n \t  return expand_builtin_apply (ops[0], ops[1], ops[2]);\n \t}\n@@ -5736,8 +5736,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \t memory returned by __builtin_apply.  */\n     case BUILT_IN_RETURN:\n       if (validate_arglist (arglist, POINTER_TYPE, VOID_TYPE))\n-\texpand_builtin_return (expand_expr (TREE_VALUE (arglist),\n-\t\t\t\t\t    NULL_RTX, VOIDmode, 0));\n+\texpand_builtin_return (expand_normal (TREE_VALUE (arglist)));\n       return const0_rtx;\n \n     case BUILT_IN_SAVEREGS:\n@@ -5970,9 +5969,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       else\n \t{\n \t  rtx buf_addr = expand_expr (TREE_VALUE (arglist), subtarget,\n-\t\t\t\t      VOIDmode, 0);\n-\t  rtx value = expand_expr (TREE_VALUE (TREE_CHAIN (arglist)),\n-\t\t\t\t   NULL_RTX, VOIDmode, 0);\n+\t\t\t\t      VOIDmode, EXPAND_NORMAL);\n+\t  rtx value = expand_normal (TREE_VALUE (TREE_CHAIN (arglist)));\n \n \t  if (value != const1_rtx)\n \t    {\n@@ -5996,7 +5994,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       if (validate_arglist (arglist, POINTER_TYPE, VOID_TYPE))\n \t{\n \t  rtx buf_addr\n-\t    = expand_expr (TREE_VALUE (arglist), NULL_RTX, VOIDmode, 0);\n+\t    = expand_normal (TREE_VALUE (arglist));\n \n \t  expand_builtin_update_setjmp_buf (buf_addr);\n \t  return const0_rtx;"}, {"sha": "e8ae80919c8a35f42266398de27d0b854cb81323", "filename": "gcc/calls.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=842173466d766db080cbc9e837988e31b453d05f", "patch": "@@ -659,8 +659,7 @@ precompute_register_parameters (int num_actuals, struct arg_data *args,\n \tif (args[i].value == 0)\n \t  {\n \t    push_temp_slots ();\n-\t    args[i].value = expand_expr (args[i].tree_value, NULL_RTX,\n-\t\t\t\t\t VOIDmode, 0);\n+\t    args[i].value = expand_normal (args[i].tree_value);\n \t    preserve_temp_slots (args[i].value);\n \t    pop_temp_slots ();\n \t  }\n@@ -1250,7 +1249,7 @@ precompute_arguments (int flags, int num_actuals, struct arg_data *args)\n       gcc_assert (!TREE_ADDRESSABLE (TREE_TYPE (args[i].tree_value)));\n \n       args[i].initial_value = args[i].value\n-\t= expand_expr (args[i].tree_value, NULL_RTX, VOIDmode, 0);\n+\t= expand_normal (args[i].tree_value);\n \n       mode = TYPE_MODE (TREE_TYPE (args[i].tree_value));\n       if (mode != args[i].mode)\n@@ -1433,7 +1432,7 @@ rtx_for_function_call (tree fndecl, tree addr)\n     /* Generate an rtx (probably a pseudo-register) for the address.  */\n     {\n       push_temp_slots ();\n-      funexp = expand_expr (addr, NULL_RTX, VOIDmode, 0);\n+      funexp = expand_normal (addr);\n       pop_temp_slots ();\t/* FUNEXP can't be BLKmode.  */\n     }\n   return funexp;\n@@ -2545,8 +2544,7 @@ expand_call (tree exp, rtx target, int ignore)\n       precompute_register_parameters (num_actuals, args, &reg_parm_seen);\n \n       if (TREE_OPERAND (exp, 2))\n-\tstatic_chain_value = expand_expr (TREE_OPERAND (exp, 2),\n-\t\t\t\t\t  NULL_RTX, VOIDmode, 0);\n+\tstatic_chain_value = expand_normal (TREE_OPERAND (exp, 2));\n       else\n \tstatic_chain_value = 0;\n "}, {"sha": "96ae449184b41dcadcab2f875e220c9c9de92d95", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=842173466d766db080cbc9e837988e31b453d05f", "patch": "@@ -12540,8 +12540,8 @@ arm_expand_binop_builtin (enum insn_code icode,\n   rtx pat;\n   tree arg0 = TREE_VALUE (arglist);\n   tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n   enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n@@ -12578,7 +12578,7 @@ arm_expand_unop_builtin (enum insn_code icode,\n {\n   rtx pat;\n   tree arg0 = TREE_VALUE (arglist);\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n \n@@ -12651,8 +12651,8 @@ arm_expand_builtin (tree exp,\n \n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n       tmode = insn_data[icode].operand[0].mode;\n       mode0 = insn_data[icode].operand[1].mode;\n       mode1 = insn_data[icode].operand[2].mode;\n@@ -12684,9 +12684,9 @@ arm_expand_builtin (tree exp,\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n       arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-      op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+      op2 = expand_normal (arg2);\n       tmode = insn_data[icode].operand[0].mode;\n       mode0 = insn_data[icode].operand[1].mode;\n       mode1 = insn_data[icode].operand[2].mode;\n@@ -12715,14 +12715,14 @@ arm_expand_builtin (tree exp,\n     case ARM_BUILTIN_SETWCX:\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-      op0 = force_reg (SImode, expand_expr (arg0, NULL_RTX, VOIDmode, 0));\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      op0 = force_reg (SImode, expand_normal (arg0));\n+      op1 = expand_normal (arg1);\n       emit_insn (gen_iwmmxt_tmcr (op1, op0));\n       return 0;\n \n     case ARM_BUILTIN_GETWCX:\n       arg0 = TREE_VALUE (arglist);\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n       target = gen_reg_rtx (SImode);\n       emit_insn (gen_iwmmxt_tmrc (target, op0));\n       return target;\n@@ -12731,8 +12731,8 @@ arm_expand_builtin (tree exp,\n       icode = CODE_FOR_iwmmxt_wshufh;\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n       tmode = insn_data[icode].operand[0].mode;\n       mode1 = insn_data[icode].operand[1].mode;\n       mode2 = insn_data[icode].operand[2].mode;\n@@ -12786,9 +12786,9 @@ arm_expand_builtin (tree exp,\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n       arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-      op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+      op2 = expand_normal (arg2);\n       tmode = insn_data[icode].operand[0].mode;\n       mode0 = insn_data[icode].operand[1].mode;\n       mode1 = insn_data[icode].operand[2].mode;"}, {"sha": "c9029f0090d98eab197c214b1e118053bc9b6bbe", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=842173466d766db080cbc9e837988e31b453d05f", "patch": "@@ -15275,8 +15275,8 @@ ix86_expand_binop_builtin (enum insn_code icode, tree arglist, rtx target)\n   rtx pat, xops[3];\n   tree arg0 = TREE_VALUE (arglist);\n   tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n   enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n@@ -15343,8 +15343,8 @@ ix86_expand_store_builtin (enum insn_code icode, tree arglist)\n   rtx pat;\n   tree arg0 = TREE_VALUE (arglist);\n   tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n   enum machine_mode mode0 = insn_data[icode].operand[0].mode;\n   enum machine_mode mode1 = insn_data[icode].operand[1].mode;\n \n@@ -15368,7 +15368,7 @@ ix86_expand_unop_builtin (enum insn_code icode, tree arglist,\n {\n   rtx pat;\n   tree arg0 = TREE_VALUE (arglist);\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n \n@@ -15403,7 +15403,7 @@ ix86_expand_unop1_builtin (enum insn_code icode, tree arglist, rtx target)\n {\n   rtx pat;\n   tree arg0 = TREE_VALUE (arglist);\n-  rtx op1, op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  rtx op1, op0 = expand_normal (arg0);\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n \n@@ -15439,8 +15439,8 @@ ix86_expand_sse_compare (const struct builtin_description *d, tree arglist,\n   rtx pat;\n   tree arg0 = TREE_VALUE (arglist);\n   tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n   rtx op2;\n   enum machine_mode tmode = insn_data[d->icode].operand[0].mode;\n   enum machine_mode mode0 = insn_data[d->icode].operand[1].mode;\n@@ -15491,8 +15491,8 @@ ix86_expand_sse_comi (const struct builtin_description *d, tree arglist,\n   rtx pat;\n   tree arg0 = TREE_VALUE (arglist);\n   tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n   rtx op2;\n   enum machine_mode mode0 = insn_data[d->icode].operand[0].mode;\n   enum machine_mode mode1 = insn_data[d->icode].operand[1].mode;\n@@ -15576,7 +15576,7 @@ ix86_expand_vec_init_builtin (tree type, tree arglist, rtx target)\n \n   for (i = 0; i < n_elt; ++i, arglist = TREE_CHAIN (arglist))\n     {\n-      rtx x = expand_expr (TREE_VALUE (arglist), NULL_RTX, VOIDmode, 0);\n+      rtx x = expand_normal (TREE_VALUE (arglist));\n       RTVEC_ELT (v, i) = gen_lowpart (inner_mode, x);\n     }\n \n@@ -15604,7 +15604,7 @@ ix86_expand_vec_ext_builtin (tree arglist, rtx target)\n   arg0 = TREE_VALUE (arglist);\n   arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n \n-  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  op0 = expand_normal (arg0);\n   elt = get_element_number (TREE_TYPE (arg0), arg1);\n \n   tmode = TYPE_MODE (TREE_TYPE (TREE_TYPE (arg0)));\n@@ -15696,9 +15696,9 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       arg1 = TREE_VALUE (arglist);\n       arg2 = TREE_VALUE (TREE_CHAIN (arglist));\n       arg0 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-      op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+      op2 = expand_normal (arg2);\n       mode0 = insn_data[icode].operand[0].mode;\n       mode1 = insn_data[icode].operand[1].mode;\n       mode2 = insn_data[icode].operand[2].mode;\n@@ -15741,8 +15741,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t       : CODE_FOR_sse2_loadlpd);\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n       tmode = insn_data[icode].operand[0].mode;\n       mode0 = insn_data[icode].operand[1].mode;\n       mode1 = insn_data[icode].operand[2].mode;\n@@ -15765,8 +15765,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t       : CODE_FOR_sse_storelps);\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n       mode0 = insn_data[icode].operand[0].mode;\n       mode1 = insn_data[icode].operand[1].mode;\n \n@@ -15785,7 +15785,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       return ix86_expand_store_builtin (CODE_FOR_sse_movntdi, arglist);\n \n     case IX86_BUILTIN_LDMXCSR:\n-      op0 = expand_expr (TREE_VALUE (arglist), NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (TREE_VALUE (arglist));\n       target = assign_386_stack_local (SImode, SLOT_TEMP);\n       emit_move_insn (target, op0);\n       emit_insn (gen_sse_ldmxcsr (target));\n@@ -15804,9 +15804,9 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n       arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-      op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+      op2 = expand_normal (arg2);\n       tmode = insn_data[icode].operand[0].mode;\n       mode0 = insn_data[icode].operand[1].mode;\n       mode1 = insn_data[icode].operand[2].mode;\n@@ -15843,8 +15843,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t       : CODE_FOR_mmx_pshufw);\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n       tmode = insn_data[icode].operand[0].mode;\n       mode1 = insn_data[icode].operand[1].mode;\n       mode2 = insn_data[icode].operand[2].mode;\n@@ -15873,8 +15873,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t       : CODE_FOR_sse2_lshrti3);\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n       tmode = insn_data[icode].operand[0].mode;\n       mode1 = insn_data[icode].operand[1].mode;\n       mode2 = insn_data[icode].operand[2].mode;\n@@ -15991,7 +15991,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \n     case IX86_BUILTIN_CLFLUSH:\n \targ0 = TREE_VALUE (arglist);\n-\top0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+\top0 = expand_normal (arg0);\n \ticode = CODE_FOR_sse2_clflush;\n \tif (! (*insn_data[icode].operand[0].predicate) (op0, Pmode))\n \t    op0 = copy_to_mode_reg (Pmode, op0);\n@@ -16015,9 +16015,9 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n       arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-      op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+      op2 = expand_normal (arg2);\n       if (!REG_P (op0))\n \top0 = copy_to_mode_reg (SImode, op0);\n       if (!REG_P (op1))\n@@ -16030,8 +16030,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     case IX86_BUILTIN_MWAIT:\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n       if (!REG_P (op0))\n \top0 = copy_to_mode_reg (SImode, op0);\n       if (!REG_P (op1))"}, {"sha": "d96ae8f8e1d56db5208dbfca944180388c9a1e87", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=842173466d766db080cbc9e837988e31b453d05f", "patch": "@@ -10209,7 +10209,7 @@ mips_prepare_builtin_arg (enum insn_code icode,\n   rtx value;\n   enum machine_mode mode;\n \n-  value = expand_expr (TREE_VALUE (*arglist), NULL_RTX, VOIDmode, 0);\n+  value = expand_normal (TREE_VALUE (*arglist));\n   mode = insn_data[icode].operand[op].mode;\n   if (!insn_data[icode].operand[op].predicate (value, mode))\n     {"}, {"sha": "bb5e6359d4da851a76d2a1ab0ce2f07cc9a1450e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=842173466d766db080cbc9e837988e31b453d05f", "patch": "@@ -6562,7 +6562,7 @@ rs6000_expand_unop_builtin (enum insn_code icode, tree arglist, rtx target)\n {\n   rtx pat;\n   tree arg0 = TREE_VALUE (arglist);\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n \n@@ -6611,7 +6611,7 @@ altivec_expand_abs_builtin (enum insn_code icode, tree arglist, rtx target)\n {\n   rtx pat, scratch1, scratch2;\n   tree arg0 = TREE_VALUE (arglist);\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n \n@@ -6644,8 +6644,8 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree arglist, rtx target)\n   rtx pat;\n   tree arg0 = TREE_VALUE (arglist);\n   tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n   enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n@@ -6719,8 +6719,8 @@ altivec_expand_predicate_builtin (enum insn_code icode, const char *opcode,\n   tree cr6_form = TREE_VALUE (arglist);\n   tree arg0 = TREE_VALUE (TREE_CHAIN (arglist));\n   tree arg1 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n   enum machine_mode tmode = SImode;\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n   enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n@@ -6797,8 +6797,8 @@ altivec_expand_lv_builtin (enum insn_code icode, tree arglist, rtx target)\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode0 = Pmode;\n   enum machine_mode mode1 = Pmode;\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n \n   if (icode == CODE_FOR_nothing)\n     /* Builtin not supported on this processor.  */\n@@ -6840,9 +6840,9 @@ spe_expand_stv_builtin (enum insn_code icode, tree arglist)\n   tree arg0 = TREE_VALUE (arglist);\n   tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n   tree arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-  rtx op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n+  rtx op2 = expand_normal (arg2);\n   rtx pat;\n   enum machine_mode mode0 = insn_data[icode].operand[0].mode;\n   enum machine_mode mode1 = insn_data[icode].operand[1].mode;\n@@ -6873,9 +6873,9 @@ altivec_expand_stv_builtin (enum insn_code icode, tree arglist)\n   tree arg0 = TREE_VALUE (arglist);\n   tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n   tree arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-  rtx op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n+  rtx op2 = expand_normal (arg2);\n   rtx pat, addr;\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode1 = Pmode;\n@@ -6915,9 +6915,9 @@ rs6000_expand_ternop_builtin (enum insn_code icode, tree arglist, rtx target)\n   tree arg0 = TREE_VALUE (arglist);\n   tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n   tree arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-  rtx op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n+  rtx op2 = expand_normal (arg2);\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n   enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n@@ -7002,7 +7002,7 @@ altivec_expand_ld_builtin (tree exp, rtx target, bool *expandedp)\n   *expandedp = true;\n \n   arg0 = TREE_VALUE (arglist);\n-  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  op0 = expand_normal (arg0);\n   tmode = insn_data[icode].operand[0].mode;\n   mode0 = insn_data[icode].operand[1].mode;\n \n@@ -7055,8 +7055,8 @@ altivec_expand_st_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n \n   arg0 = TREE_VALUE (arglist);\n   arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n-  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  op0 = expand_normal (arg0);\n+  op1 = expand_normal (arg1);\n   mode0 = insn_data[icode].operand[0].mode;\n   mode1 = insn_data[icode].operand[1].mode;\n \n@@ -7097,9 +7097,9 @@ altivec_expand_dst_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n \targ0 = TREE_VALUE (arglist);\n \targ1 = TREE_VALUE (TREE_CHAIN (arglist));\n \targ2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n-\top0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-\top1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-\top2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+\top0 = expand_normal (arg0);\n+\top1 = expand_normal (arg1);\n+\top2 = expand_normal (arg2);\n \tmode0 = insn_data[d->icode].operand[0].mode;\n \tmode1 = insn_data[d->icode].operand[1].mode;\n \tmode2 = insn_data[d->icode].operand[2].mode;\n@@ -7147,7 +7147,7 @@ altivec_expand_vec_init_builtin (tree type, tree arglist, rtx target)\n \n   for (i = 0; i < n_elt; ++i, arglist = TREE_CHAIN (arglist))\n     {\n-      rtx x = expand_expr (TREE_VALUE (arglist), NULL_RTX, VOIDmode, 0);\n+      rtx x = expand_normal (TREE_VALUE (arglist));\n       RTVEC_ELT (v, i) = gen_lowpart (inner_mode, x);\n     }\n \n@@ -7222,7 +7222,7 @@ altivec_expand_vec_ext_builtin (tree arglist, rtx target)\n   arg0 = TREE_VALUE (arglist);\n   arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n \n-  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  op0 = expand_normal (arg0);\n   elt = get_element_number (TREE_TYPE (arg0), arg1);\n \n   tmode = TYPE_MODE (TREE_TYPE (TREE_TYPE (arg0)));\n@@ -7308,7 +7308,7 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n     case ALTIVEC_BUILTIN_MTVSCR:\n       icode = CODE_FOR_altivec_mtvscr;\n       arg0 = TREE_VALUE (arglist);\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n       mode0 = insn_data[icode].operand[0].mode;\n \n       /* If we got invalid arguments bail out before generating bad rtl.  */\n@@ -7331,7 +7331,7 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n       icode = CODE_FOR_altivec_dss;\n       arg0 = TREE_VALUE (arglist);\n       STRIP_NOPS (arg0);\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n       mode0 = insn_data[icode].operand[0].mode;\n \n       /* If we got invalid arguments bail out before generating bad rtl.  */\n@@ -7565,7 +7565,7 @@ spe_expand_builtin (tree exp, rtx target, bool *expandedp)\n     case SPE_BUILTIN_MTSPEFSCR:\n       icode = CODE_FOR_spe_mtspefscr;\n       arg0 = TREE_VALUE (arglist);\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (arg0);\n       mode0 = insn_data[icode].operand[0].mode;\n \n       if (arg0 == error_mark_node)\n@@ -7593,8 +7593,8 @@ spe_expand_predicate_builtin (enum insn_code icode, tree arglist, rtx target)\n   tree form = TREE_VALUE (arglist);\n   tree arg0 = TREE_VALUE (TREE_CHAIN (arglist));\n   tree arg1 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n   enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n   int form_int;\n@@ -7702,10 +7702,10 @@ spe_expand_evsel_builtin (enum insn_code icode, tree arglist, rtx target)\n   tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n   tree arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n   tree arg3 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (arglist))));\n-  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-  rtx op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n-  rtx op3 = expand_expr (arg3, NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n+  rtx op2 = expand_normal (arg2);\n+  rtx op3 = expand_normal (arg3);\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n   enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n "}, {"sha": "ee75e2007d6065748b7238de22537ca2566fe2c8", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=842173466d766db080cbc9e837988e31b453d05f", "patch": "@@ -7885,7 +7885,7 @@ sparc_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \n       arg_count++;\n       mode[arg_count] = insn_data[icode].operand[arg_count].mode;\n-      op[arg_count] = expand_expr (arg, NULL_RTX, VOIDmode, 0);\n+      op[arg_count] = expand_normal (arg);\n \n       if (! (*insn_data[icode].operand[arg_count].predicate) (op[arg_count],\n \t\t\t\t\t\t\t      mode[arg_count]))"}, {"sha": "e214091510e03918d656eaf04b1dacd28dce5b81", "filename": "gcc/dojump.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=842173466d766db080cbc9e837988e31b453d05f", "patch": "@@ -584,7 +584,7 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n       /* Fall through and generate the normal code.  */\n     default:\n     normal:\n-      temp = expand_expr (exp, NULL_RTX, VOIDmode, 0);\n+      temp = expand_normal (exp);\n       do_pending_stack_adjust ();\n \n       if (GET_CODE (temp) == CONST_INT\n@@ -636,8 +636,8 @@ static void\n do_jump_by_parts_greater (tree exp, int swap, rtx if_false_label,\n \t\t\t  rtx if_true_label)\n {\n-  rtx op0 = expand_expr (TREE_OPERAND (exp, swap), NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (TREE_OPERAND (exp, !swap), NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (TREE_OPERAND (exp, swap));\n+  rtx op1 = expand_normal (TREE_OPERAND (exp, !swap));\n   enum machine_mode mode = TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0)));\n   int unsignedp = TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 0)));\n \n@@ -702,8 +702,8 @@ do_jump_by_parts_greater_rtx (enum machine_mode mode, int unsignedp, rtx op0,\n static void\n do_jump_by_parts_equality (tree exp, rtx if_false_label, rtx if_true_label)\n {\n-  rtx op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, VOIDmode, 0);\n-  rtx op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX, VOIDmode, 0);\n+  rtx op0 = expand_normal (TREE_OPERAND (exp, 0));\n+  rtx op1 = expand_normal (TREE_OPERAND (exp, 1));\n   enum machine_mode mode = TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0)));\n   int nwords = (GET_MODE_SIZE (mode) / UNITS_PER_WORD);\n   int i;\n@@ -923,11 +923,11 @@ do_compare_and_jump (tree exp, enum rtx_code signed_code,\n   enum rtx_code code;\n \n   /* Don't crash if the comparison was erroneous.  */\n-  op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, VOIDmode, 0);\n+  op0 = expand_normal (TREE_OPERAND (exp, 0));\n   if (TREE_CODE (TREE_OPERAND (exp, 0)) == ERROR_MARK)\n     return;\n \n-  op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX, VOIDmode, 0);\n+  op1 = expand_normal (TREE_OPERAND (exp, 1));\n   if (TREE_CODE (TREE_OPERAND (exp, 1)) == ERROR_MARK)\n     return;\n "}, {"sha": "f45375e675baa0d5e66f9e513c1b2cbfbc65fb91", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=842173466d766db080cbc9e837988e31b453d05f", "patch": "@@ -424,7 +424,7 @@ expand_builtin_init_dwarf_reg_sizes (tree address)\n {\n   int i;\n   enum machine_mode mode = TYPE_MODE (char_type_node);\n-  rtx addr = expand_expr (address, NULL_RTX, VOIDmode, 0);\n+  rtx addr = expand_normal (address);\n   rtx mem = gen_rtx_MEM (BLKmode, addr);\n   bool wrote_return_column = false;\n "}, {"sha": "7f04f70343387e991ff604f3b628c86b8a437959", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=842173466d766db080cbc9e837988e31b453d05f", "patch": "@@ -3474,7 +3474,7 @@ output_ttype (tree type, int tt_format, int tt_format_size)\n       struct cgraph_varpool_node *node;\n \n       type = lookup_type_for_runtime (type);\n-      value = expand_expr (type, NULL_RTX, VOIDmode, EXPAND_INITIALIZER);\n+      value = expand_normal (type);\n \n       /* Let cgraph know that the rtti decl is used.  Not all of the\n \t paths below go through assemble_integer, which would take"}, {"sha": "a12c65d14440161d97a8e130a8d391561515591e", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=842173466d766db080cbc9e837988e31b453d05f", "patch": "@@ -2169,7 +2169,7 @@ expand_shift (enum tree_code code, enum machine_mode mode, rtx shifted,\n      and shifted in the other direction; but that does not work\n      on all machines.  */\n \n-  op1 = expand_expr (amount, NULL_RTX, VOIDmode, 0);\n+  op1 = expand_normal (amount);\n \n   if (SHIFT_COUNT_TRUNCATED)\n     {"}, {"sha": "e10171f91817d5926c6e673159cb0373f5b30fdb", "filename": "gcc/expr.c", "status": "modified", "additions": 35, "deletions": 39, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=842173466d766db080cbc9e837988e31b453d05f", "patch": "@@ -1381,7 +1381,7 @@ emit_block_move_via_libcall (rtx dst, rtx src, rtx size, bool tailcall)\n \t\t      call_expr, arg_list, NULL_TREE);\n   CALL_EXPR_TAILCALL (call_expr) = tailcall;\n \n-  retval = expand_expr (call_expr, NULL_RTX, VOIDmode, 0);\n+  retval = expand_normal (call_expr);\n \n   return retval;\n }\n@@ -2528,7 +2528,7 @@ clear_storage_via_libcall (rtx object, rtx size, bool tailcall)\n \t\t      call_expr, arg_list, NULL_TREE);\n   CALL_EXPR_TAILCALL (call_expr) = tailcall;\n \n-  retval = expand_expr (call_expr, NULL_RTX, VOIDmode, 0);\n+  retval = expand_normal (call_expr);\n \n   return retval;\n }\n@@ -3926,7 +3926,7 @@ expand_assignment (tree to, tree from)\n \n   if (TREE_CODE (to) == ERROR_MARK)\n     {\n-      result = expand_expr (from, NULL_RTX, VOIDmode, 0);\n+      result = expand_normal (from);\n       return;\n     }\n \n@@ -3952,7 +3952,7 @@ expand_assignment (tree to, tree from)\n       /* If we are going to use store_bit_field and extract_bit_field,\n \t make sure to_rtx will be safe for multiple use.  */\n \n-      to_rtx = expand_expr (tem, NULL_RTX, VOIDmode, 0);\n+      to_rtx = expand_normal (tem);\n \n       if (offset != 0)\n \t{\n@@ -4060,7 +4060,7 @@ expand_assignment (tree to, tree from)\n       rtx value;\n \n       push_temp_slots ();\n-      value = expand_expr (from, NULL_RTX, VOIDmode, 0);\n+      value = expand_normal (from);\n       if (to_rtx == 0)\n \tto_rtx = expand_expr (to, NULL_RTX, VOIDmode, EXPAND_WRITE);\n \n@@ -4121,7 +4121,7 @@ expand_assignment (tree to, tree from)\n \n       push_temp_slots ();\n       size = expr_size (from);\n-      from_rtx = expand_expr (from, NULL_RTX, VOIDmode, 0);\n+      from_rtx = expand_normal (from);\n \n       emit_library_call (memmove_libfunc, LCT_NORMAL,\n \t\t\t VOIDmode, 3, XEXP (to_rtx, 0), Pmode,\n@@ -4868,7 +4868,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t\t\t\t\t    make_tree (TREE_TYPE (exp),\n \t\t\t\t\t\t\t       target));\n \n-\t\toffset_rtx = expand_expr (offset, NULL_RTX, VOIDmode, 0);\n+\t\toffset_rtx = expand_normal (offset);\n \t\tgcc_assert (MEM_P (to_rtx));\n \t\t\n #ifdef POINTERS_EXTEND_UNSIGNED\n@@ -5091,7 +5091,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t    rtx loop_end = gen_label_rtx ();\n \t\t    tree exit_cond;\n \t\t    \n-\t\t    expand_expr (hi_index, NULL_RTX, VOIDmode, 0);\n+\t\t    expand_normal (hi_index);\n \t\t    unsignedp = TYPE_UNSIGNED (domain);\n \t\t    \n \t\t    index = build_decl (VAR_DECL, NULL_TREE, domain);\n@@ -5115,7 +5115,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t\t\t\t   convert (ssizetype,\n \t\t\t\t\t\t    TYPE_SIZE_UNIT (elttype)));\n \t\t    \n-\t\t    pos_rtx = expand_expr (position, 0, VOIDmode, 0);\n+\t\t    pos_rtx = expand_normal (position);\n \t\t    xtarget = offset_address (target, pos_rtx,\n \t\t\t\t\t      highest_pow2_factor (position));\n \t\t    xtarget = adjust_address (xtarget, mode, 0);\n@@ -5161,7 +5161,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t\t\t       convert (ssizetype,\n \t\t\t\t\t\tTYPE_SIZE_UNIT (elttype)));\n \t\txtarget = offset_address (target,\n-\t\t\t\t\t  expand_expr (position, 0, VOIDmode, 0),\n+\t\t\t\t\t  expand_normal (position),\n \t\t\t\t\t  highest_pow2_factor (position));\n \t\txtarget = adjust_address (xtarget, mode, 0);\n \t\tstore_expr (value, xtarget, 0);\n@@ -5287,7 +5287,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t   vectors in the case of BLKmode vectors.  */\n \t\tgcc_assert (TREE_CODE (TREE_TYPE (value)) != VECTOR_TYPE);\n \t\tRTVEC_ELT (vector, eltpos)\n-\t\t  = expand_expr (value, NULL_RTX, VOIDmode, 0);\n+\t\t  = expand_normal (value);\n \t      }\n \t    else\n \t      {\n@@ -5425,7 +5425,7 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n \t    }\n \t}\n \n-      temp = expand_expr (exp, NULL_RTX, VOIDmode, 0);\n+      temp = expand_normal (exp);\n \n       /* If BITSIZE is narrower than the size of the type of EXP\n \t we will be narrowing TEMP.  Normally, what's wanted are the\n@@ -7944,27 +7944,24 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t  if (TREE_CODE (TREE_OPERAND (exp, 1)) == INTEGER_CST)\n \t\t    expand_operands (TREE_OPERAND (TREE_OPERAND (exp, 0), 0),\n \t\t\t\t     TREE_OPERAND (exp, 1),\n-\t\t\t\t     NULL_RTX, &op0, &op1, 0);\n+\t\t\t\t     NULL_RTX, &op0, &op1, EXPAND_NORMAL);\n \t\t  else\n \t\t    expand_operands (TREE_OPERAND (TREE_OPERAND (exp, 0), 0),\n \t\t\t\t     TREE_OPERAND (TREE_OPERAND (exp, 1), 0),\n-\t\t\t\t     NULL_RTX, &op0, &op1, 0);\n+\t\t\t\t     NULL_RTX, &op0, &op1, EXPAND_NORMAL);\n \t\t  goto binop3;\n \t\t}\n \t      else if (other_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing\n \t\t       && innermode == word_mode)\n \t\t{\n \t\t  rtx htem, hipart;\n-\t\t  op0 = expand_expr (TREE_OPERAND (TREE_OPERAND (exp, 0), 0),\n-\t\t\t\t     NULL_RTX, VOIDmode, 0);\n+\t\t  op0 = expand_normal (TREE_OPERAND (TREE_OPERAND (exp, 0), 0));\n \t\t  if (TREE_CODE (TREE_OPERAND (exp, 1)) == INTEGER_CST)\n \t\t    op1 = convert_modes (innermode, mode,\n-\t\t\t\t\t expand_expr (TREE_OPERAND (exp, 1),\n-\t\t\t\t\t\t      NULL_RTX, VOIDmode, 0),\n+\t\t\t\t\t expand_normal (TREE_OPERAND (exp, 1)),\n \t\t\t\t\t unsignedp);\n \t\t  else\n-\t\t    op1 = expand_expr (TREE_OPERAND (TREE_OPERAND (exp, 1), 0),\n-\t\t\t\t       NULL_RTX, VOIDmode, 0);\n+\t\t    op1 = expand_normal (TREE_OPERAND (TREE_OPERAND (exp, 1), 0));\n \t\t  temp = expand_binop (mode, other_optab, op0, op1, target,\n \t\t\t\t       unsignedp, OPTAB_LIB_WIDEN);\n \t\t  hipart = gen_highpart (innermode, temp);\n@@ -8014,14 +8011,14 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       gcc_unreachable ();\t\t\t/* Not used for C.  */\n \n     case FIX_TRUNC_EXPR:\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (TREE_OPERAND (exp, 0));\n       if (target == 0 || modifier == EXPAND_STACK_PARM)\n \ttarget = gen_reg_rtx (mode);\n       expand_fix (target, op0, unsignedp);\n       return target;\n \n     case FLOAT_EXPR:\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, VOIDmode, 0);\n+      op0 = expand_normal (TREE_OPERAND (exp, 0));\n       if (target == 0 || modifier == EXPAND_STACK_PARM)\n \ttarget = gen_reg_rtx (mode);\n       /* expand_float can't figure out what to do if FROM has VOIDmode.\n@@ -8457,8 +8454,8 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \n     case COMPLEX_EXPR:\n       /* Get the rtx code of the operands.  */\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), 0, VOIDmode, 0);\n-      op1 = expand_expr (TREE_OPERAND (exp, 1), 0, VOIDmode, 0);\n+      op0 = expand_normal (TREE_OPERAND (exp, 0));\n+      op1 = expand_normal (TREE_OPERAND (exp, 1));\n \n       if (!target)\n \ttarget = gen_reg_rtx (TYPE_MODE (TREE_TYPE (exp)));\n@@ -8470,11 +8467,11 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return target;\n \n     case REALPART_EXPR:\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), 0, VOIDmode, 0);\n+      op0 = expand_normal (TREE_OPERAND (exp, 0));\n       return read_complex_part (op0, false);\n \n     case IMAGPART_EXPR:\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), 0, VOIDmode, 0);\n+      op0 = expand_normal (TREE_OPERAND (exp, 0));\n       return read_complex_part (op0, true);\n \n     case RESX_EXPR:\n@@ -8545,8 +8542,8 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n         rtx op2;\n \n         this_optab = optab_for_tree_code (code, type);\n-        expand_operands (oprnd0, oprnd1, NULL_RTX, &op0, &op1, 0);\n-        op2 = expand_expr (oprnd2, NULL_RTX, VOIDmode, 0);\n+        expand_operands (oprnd0, oprnd1, NULL_RTX, &op0, &op1, EXPAND_NORMAL);\n+        op2 = expand_normal (oprnd2);\n         temp = expand_ternary_op (mode, this_optab, op0, op1, op2, \n \t\t\t\t  target, unsignedp);\n         gcc_assert (temp);\n@@ -8560,8 +8557,8 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \ttree oprnd2 = TREE_OPERAND (exp, 2);\n \trtx op2;\n \n-\texpand_operands (oprnd0, oprnd1, NULL_RTX, &op0, &op1, 0);\n-\top2 = expand_expr (oprnd2, NULL_RTX, VOIDmode, 0);\n+\texpand_operands (oprnd0, oprnd1, NULL_RTX, &op0, &op1, EXPAND_NORMAL);\n+\top2 = expand_normal (oprnd2);\n \ttarget = expand_widen_pattern_expr (exp, op0, op1, op2, \n \t\t\t\t\t    target, unsignedp);\n \treturn target;\n@@ -8582,7 +8579,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n     case REDUC_MIN_EXPR:\n     case REDUC_PLUS_EXPR:\n       {\n-        op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, VOIDmode, 0);\n+        op0 = expand_normal (TREE_OPERAND (exp, 0));\n         this_optab = optab_for_tree_code (code, type);\n         temp = expand_unop (mode, this_optab, op0, target, unsignedp);\n         gcc_assert (temp);\n@@ -9077,13 +9074,13 @@ try_casesi (tree index_type, tree index_expr, tree minval, tree range,\n   if (GET_MODE_BITSIZE (TYPE_MODE (index_type)) > GET_MODE_BITSIZE (index_mode))\n     {\n       enum machine_mode omode = TYPE_MODE (index_type);\n-      rtx rangertx = expand_expr (range, NULL_RTX, VOIDmode, 0);\n+      rtx rangertx = expand_normal (range);\n \n       /* We must handle the endpoints in the original mode.  */\n       index_expr = build2 (MINUS_EXPR, index_type,\n \t\t\t   index_expr, minval);\n       minval = integer_zero_node;\n-      index = expand_expr (index_expr, NULL_RTX, VOIDmode, 0);\n+      index = expand_normal (index_expr);\n       emit_cmp_and_jump_insns (rangertx, index, LTU, NULL_RTX,\n \t\t\t       omode, 1, default_label);\n       /* Now we can safely truncate.  */\n@@ -9098,7 +9095,7 @@ try_casesi (tree index_type, tree index_expr, tree minval, tree range,\n \t  index_type = TREE_TYPE (index_expr);\n \t}\n \n-      index = expand_expr (index_expr, NULL_RTX, VOIDmode, 0);\n+      index = expand_normal (index_expr);\n     }\n \n   do_pending_stack_adjust ();\n@@ -9108,7 +9105,7 @@ try_casesi (tree index_type, tree index_expr, tree minval, tree range,\n       (index, op_mode))\n     index = copy_to_mode_reg (op_mode, index);\n \n-  op1 = expand_expr (minval, NULL_RTX, VOIDmode, 0);\n+  op1 = expand_normal (minval);\n \n   op_mode = insn_data[(int) CODE_FOR_casesi].operand[1].mode;\n   op1 = convert_modes (op_mode, TYPE_MODE (TREE_TYPE (minval)),\n@@ -9117,7 +9114,7 @@ try_casesi (tree index_type, tree index_expr, tree minval, tree range,\n       (op1, op_mode))\n     op1 = copy_to_mode_reg (op_mode, op1);\n \n-  op2 = expand_expr (range, NULL_RTX, VOIDmode, 0);\n+  op2 = expand_normal (range);\n \n   op_mode = insn_data[(int) CODE_FOR_casesi].operand[2].mode;\n   op2 = convert_modes (op_mode, TYPE_MODE (TREE_TYPE (range)),\n@@ -9223,14 +9220,13 @@ try_tablejump (tree index_type, tree index_expr, tree minval, tree range,\n   index_expr = fold_build2 (MINUS_EXPR, index_type,\n \t\t\t    convert (index_type, index_expr),\n \t\t\t    convert (index_type, minval));\n-  index = expand_expr (index_expr, NULL_RTX, VOIDmode, 0);\n+  index = expand_normal (index_expr);\n   do_pending_stack_adjust ();\n \n   do_tablejump (index, TYPE_MODE (index_type),\n \t\tconvert_modes (TYPE_MODE (index_type),\n \t\t\t       TYPE_MODE (TREE_TYPE (range)),\n-\t\t\t       expand_expr (range, NULL_RTX,\n-\t\t\t\t\t    VOIDmode, 0),\n+\t\t\t       expand_normal (range),\n \t\t\t       TYPE_UNSIGNED (TREE_TYPE (range))),\n \t\ttable_label, default_label);\n   return 1;"}, {"sha": "b7387cf20fdbe2bb2cee161882b19d566c56645d", "filename": "gcc/expr.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=842173466d766db080cbc9e837988e31b453d05f", "patch": "@@ -158,7 +158,7 @@ do {\t\t\t\t\t\t\t\\\n /* Convert the implicit sum in a `struct args_size' into an rtx.  */\n #define ARGS_SIZE_RTX(SIZE)\t\t\t\t\t\\\n ((SIZE).var == 0 ? GEN_INT ((SIZE).constant)\t\t\t\\\n- : expand_expr (ARGS_SIZE_TREE (SIZE), NULL_RTX, VOIDmode, 0))\n+ : expand_normal (ARGS_SIZE_TREE (SIZE)))\n \n /* Supply a default definition for FUNCTION_ARG_PADDING:\n    usually pad upward, but pad short args downward on\n@@ -493,6 +493,12 @@ expand_expr (tree exp, rtx target, enum machine_mode mode,\n   return expand_expr_real (exp, target, mode, modifier, NULL);\n }\n \n+static inline rtx\n+expand_normal (tree exp)\n+{\n+  return expand_expr_real (exp, NULL_RTX, VOIDmode, EXPAND_NORMAL, NULL);\n+}\n+\n extern void expand_var (tree);\n \n /* At the start of a function, record that we have no previously-pushed"}, {"sha": "da2f7505b720093c35a87ddc3acaaa59022a5892", "filename": "gcc/stmt.c", "status": "modified", "additions": 29, "deletions": 51, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842173466d766db080cbc9e837988e31b453d05f/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=842173466d766db080cbc9e837988e31b453d05f", "patch": "@@ -182,7 +182,7 @@ emit_jump (rtx label)\n void\n expand_computed_goto (tree exp)\n {\n-  rtx x = expand_expr (exp, NULL_RTX, VOIDmode, 0);\n+  rtx x = expand_normal (exp);\n \n   x = convert_memory_address (Pmode, x);\n \n@@ -1354,8 +1354,7 @@ expand_expr_stmt (tree exp)\n \n \t  /* Compare the value with itself to reference it.  */\n \t  emit_cmp_and_jump_insns (value, value, EQ,\n-\t\t\t\t   expand_expr (TYPE_SIZE (type),\n-\t\t\t\t\t\tNULL_RTX, VOIDmode, 0),\n+\t\t\t\t   expand_normal (TYPE_SIZE (type)),\n \t\t\t\t   BLKmode, 0, lab);\n \t  emit_label (lab);\n \t}\n@@ -1547,7 +1546,7 @@ expand_return (tree retval)\n   /* If function wants no value, give it none.  */\n   if (TREE_CODE (TREE_TYPE (TREE_TYPE (current_function_decl))) == VOID_TYPE)\n     {\n-      expand_expr (retval, NULL_RTX, VOIDmode, 0);\n+      expand_normal (retval);\n       expand_null_return ();\n       return;\n     }\n@@ -1594,7 +1593,7 @@ expand_return (tree retval)\n \t= MIN (TYPE_ALIGN (TREE_TYPE (retval_rhs)), BITS_PER_WORD);\n       rtx *result_pseudos = alloca (sizeof (rtx) * n_regs);\n       rtx result_reg, src = NULL_RTX, dst = NULL_RTX;\n-      rtx result_val = expand_expr (retval_rhs, NULL_RTX, VOIDmode, 0);\n+      rtx result_val = expand_normal (retval_rhs);\n       enum machine_mode tmpmode, result_reg_mode;\n \n       if (bytes == 0)\n@@ -1939,7 +1938,7 @@ expand_decl (tree decl)\n \n       /* Compute the variable's size, in bytes.  This will expand any\n \t needed SAVE_EXPRs for the first time.  */\n-      size = expand_expr (DECL_SIZE_UNIT (decl), NULL_RTX, VOIDmode, 0);\n+      size = expand_normal (DECL_SIZE_UNIT (decl));\n       free_temp_slots ();\n \n       /* Allocate space on the stack for the variable.  Note that\n@@ -2239,11 +2238,11 @@ emit_case_bit_tests (tree index_type, tree index_expr, tree minval,\n   index_expr = fold_build2 (MINUS_EXPR, index_type,\n \t\t\t    fold_convert (index_type, index_expr),\n \t\t\t    fold_convert (index_type, minval));\n-  index = expand_expr (index_expr, NULL_RTX, VOIDmode, 0);\n+  index = expand_normal (index_expr);\n   do_pending_stack_adjust ();\n \n   mode = TYPE_MODE (index_type);\n-  expr = expand_expr (range, NULL_RTX, VOIDmode, 0);\n+  expr = expand_normal (range);\n   emit_cmp_and_jump_insns (index, expr, GTU, NULL_RTX, mode, 1,\n \t\t\t   default_label);\n \n@@ -2449,7 +2448,7 @@ expand_case (tree exp)\n \t\t  only go this way.  */\n \t       || (!HAVE_casesi && !HAVE_tablejump))\n \t{\n-\t  index = expand_expr (index_expr, NULL_RTX, VOIDmode, 0);\n+\t  index = expand_normal (index_expr);\n \n \t  /* If the index is a short or char that we do not have\n \t     an insn to handle comparisons directly, convert it to\n@@ -2940,8 +2939,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \n       do_jump_if_equal (index,\n \t\t\tconvert_modes (mode, imode,\n-\t\t\t\t       expand_expr (node->low, NULL_RTX,\n-\t\t\t\t\t\t    VOIDmode, 0),\n+\t\t\t\t       expand_normal (node->low),\n \t\t\t\t       unsignedp),\n \t\t\tlabel_rtx (node->code_label), unsignedp);\n \n@@ -2958,8 +2956,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t      emit_cmp_and_jump_insns (index,\n \t\t\t\t       convert_modes\n \t\t\t\t       (mode, imode,\n-\t\t\t\t\texpand_expr (node->high, NULL_RTX,\n-\t\t\t\t\t\t     VOIDmode, 0),\n+\t\t\t\t\texpand_normal (node->high),\n \t\t\t\t\tunsignedp),\n \t\t\t\t       GT, NULL_RTX, mode, unsignedp,\n \t\t\t\t       label_rtx (node->right->code_label));\n@@ -2971,8 +2968,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t      emit_cmp_and_jump_insns (index,\n \t\t\t\t       convert_modes\n \t\t\t\t       (mode, imode,\n-\t\t\t\t\texpand_expr (node->high, NULL_RTX,\n-\t\t\t\t\t\t     VOIDmode, 0),\n+\t\t\t\t\texpand_normal (node->high),\n \t\t\t\t\tunsignedp),\n \t\t\t\t       LT, NULL_RTX, mode, unsignedp,\n \t\t\t\t       label_rtx (node->left->code_label));\n@@ -2996,9 +2992,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t\t wants.  */\n \t      do_jump_if_equal (index,\n \t\t\t\tconvert_modes (mode, imode,\n-\t\t\t\t\t       expand_expr (node->right->low,\n-\t\t\t\t\t\t\t    NULL_RTX,\n-\t\t\t\t\t\t\t    VOIDmode, 0),\n+\t\t\t\t\t       expand_normal (node->right->low),\n \t\t\t\t\t       unsignedp),\n \t\t\t\tlabel_rtx (node->right->code_label),\n \t\t\t\tunsignedp);\n@@ -3007,9 +3001,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t\t wants.  */\n \t      do_jump_if_equal (index,\n \t\t\t\tconvert_modes (mode, imode,\n-\t\t\t\t\t       expand_expr (node->left->low,\n-\t\t\t\t\t\t\t    NULL_RTX,\n-\t\t\t\t\t\t\t    VOIDmode, 0),\n+\t\t\t\t\t       expand_normal (node->left->low),\n \t\t\t\t\t       unsignedp),\n \t\t\t\tlabel_rtx (node->left->code_label),\n \t\t\t\tunsignedp);\n@@ -3026,8 +3018,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t      emit_cmp_and_jump_insns (index,\n \t\t\t\t       convert_modes\n \t\t\t\t       (mode, imode,\n-\t\t\t\t\texpand_expr (node->high, NULL_RTX,\n-\t\t\t\t\t\t     VOIDmode, 0),\n+\t\t\t\t\texpand_normal (node->high),\n \t\t\t\t\tunsignedp),\n \t\t\t\t       GT, NULL_RTX, mode, unsignedp,\n \t\t\t\t       label_rtx (test_label));\n@@ -3062,8 +3053,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t\t  emit_cmp_and_jump_insns (index,\n \t\t\t\t\t   convert_modes\n \t\t\t\t\t   (mode, imode,\n-\t\t\t\t\t    expand_expr (node->high, NULL_RTX,\n-\t\t\t\t\t\t\t VOIDmode, 0),\n+\t\t\t\t\t    expand_normal (node->high),\n \t\t\t\t\t    unsignedp),\n \t\t\t\t\t   LT, NULL_RTX, mode, unsignedp,\n \t\t\t\t\t   default_label);\n@@ -3078,8 +3068,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t    do_jump_if_equal (index,\n \t\t\t      convert_modes\n \t\t\t      (mode, imode,\n-\t\t\t       expand_expr (node->right->low, NULL_RTX,\n-\t\t\t\t\t    VOIDmode, 0),\n+\t\t\t       expand_normal (node->right->low),\n \t\t\t       unsignedp),\n \t\t\t      label_rtx (node->right->code_label), unsignedp);\n \t}\n@@ -3095,8 +3084,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t\t  emit_cmp_and_jump_insns (index,\n \t\t\t\t\t   convert_modes\n \t\t\t\t\t   (mode, imode,\n-\t\t\t\t\t    expand_expr (node->high, NULL_RTX,\n-\t\t\t\t\t\t\t VOIDmode, 0),\n+\t\t\t\t\t    expand_normal (node->high),\n \t\t\t\t\t    unsignedp),\n \t\t\t\t\t   GT, NULL_RTX, mode, unsignedp,\n \t\t\t\t\t   default_label);\n@@ -3111,8 +3099,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t    do_jump_if_equal (index,\n \t\t\t      convert_modes\n \t\t\t      (mode, imode,\n-\t\t\t       expand_expr (node->left->low, NULL_RTX,\n-\t\t\t\t\t    VOIDmode, 0),\n+\t\t\t       expand_normal (node->left->low),\n \t\t\t       unsignedp),\n \t\t\t      label_rtx (node->left->code_label), unsignedp);\n \t}\n@@ -3138,8 +3125,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t    emit_cmp_and_jump_insns (index,\n \t\t\t\t     convert_modes\n \t\t\t\t     (mode, imode,\n-\t\t\t\t      expand_expr (node->high, NULL_RTX,\n-\t\t\t\t\t\t   VOIDmode, 0),\n+\t\t\t\t      expand_normal (node->high),\n \t\t\t\t      unsignedp),\n \t\t\t\t     GT, NULL_RTX, mode, unsignedp,\n \t\t\t\t     label_rtx (node->right->code_label));\n@@ -3152,8 +3138,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t      emit_cmp_and_jump_insns (index,\n \t\t\t\t       convert_modes\n \t\t\t\t       (mode, imode,\n-\t\t\t\t\texpand_expr (node->high, NULL_RTX,\n-\t\t\t\t\t\t     VOIDmode, 0),\n+\t\t\t\t\texpand_normal (node->high),\n \t\t\t\t\tunsignedp),\n \t\t\t\t       GT, NULL_RTX, mode, unsignedp,\n \t\t\t\t       label_rtx (test_label));\n@@ -3164,8 +3149,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t  emit_cmp_and_jump_insns (index,\n \t\t\t\t   convert_modes\n \t\t\t\t   (mode, imode,\n-\t\t\t\t    expand_expr (node->low, NULL_RTX,\n-\t\t\t\t\t\t VOIDmode, 0),\n+\t\t\t\t    expand_normal (node->low),\n \t\t\t\t    unsignedp),\n \t\t\t\t   GE, NULL_RTX, mode, unsignedp,\n \t\t\t\t   label_rtx (node->code_label));\n@@ -3195,8 +3179,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t      emit_cmp_and_jump_insns (index,\n \t\t\t\t       convert_modes\n \t\t\t\t       (mode, imode,\n-\t\t\t\t\texpand_expr (node->low, NULL_RTX,\n-\t\t\t\t\t\t     VOIDmode, 0),\n+\t\t\t\t\texpand_normal (node->low),\n \t\t\t\t\tunsignedp),\n \t\t\t\t       LT, NULL_RTX, mode, unsignedp,\n \t\t\t\t       default_label);\n@@ -3207,8 +3190,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t  emit_cmp_and_jump_insns (index,\n \t\t\t\t   convert_modes\n \t\t\t\t   (mode, imode,\n-\t\t\t\t    expand_expr (node->high, NULL_RTX,\n-\t\t\t\t\t\t VOIDmode, 0),\n+\t\t\t\t    expand_normal (node->high),\n \t\t\t\t    unsignedp),\n \t\t\t\t   LE, NULL_RTX, mode, unsignedp,\n \t\t\t\t   label_rtx (node->code_label));\n@@ -3225,8 +3207,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t      emit_cmp_and_jump_insns (index,\n \t\t\t\t       convert_modes\n \t\t\t\t       (mode, imode,\n-\t\t\t\t\texpand_expr (node->high, NULL_RTX,\n-\t\t\t\t\t\t     VOIDmode, 0),\n+\t\t\t\t\texpand_normal (node->high),\n \t\t\t\t\tunsignedp),\n \t\t\t\t       GT, NULL_RTX, mode, unsignedp,\n \t\t\t\t       default_label);\n@@ -3237,8 +3218,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t  emit_cmp_and_jump_insns (index,\n \t\t\t\t   convert_modes\n \t\t\t\t   (mode, imode,\n-\t\t\t\t    expand_expr (node->low, NULL_RTX,\n-\t\t\t\t\t\t VOIDmode, 0),\n+\t\t\t\t    expand_normal (node->low),\n \t\t\t\t    unsignedp),\n \t\t\t\t   GE, NULL_RTX, mode, unsignedp,\n \t\t\t\t   label_rtx (node->code_label));\n@@ -3259,8 +3239,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t      emit_cmp_and_jump_insns (index,\n \t\t\t\t       convert_modes\n \t\t\t\t       (mode, imode,\n-\t\t\t\t\texpand_expr (node->high, NULL_RTX,\n-\t\t\t\t\t\t     VOIDmode, 0),\n+\t\t\t\t\texpand_normal (node->high),\n \t\t\t\t\tunsignedp),\n \t\t\t\t       GT, NULL_RTX, mode, unsignedp,\n \t\t\t\t       default_label);\n@@ -3271,8 +3250,7 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \t      emit_cmp_and_jump_insns (index,\n \t\t\t\t       convert_modes\n \t\t\t\t       (mode, imode,\n-\t\t\t\t\texpand_expr (node->low, NULL_RTX,\n-\t\t\t\t\t\t     VOIDmode, 0),\n+\t\t\t\t\texpand_normal (node->low),\n \t\t\t\t\tunsignedp),\n \t\t\t\t       LT, NULL_RTX, mode, unsignedp,\n \t\t\t\t       default_label);\n@@ -3287,13 +3265,13 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \n \t      /* Instead of doing two branches, emit one unsigned branch for\n \t\t (index-low) > (high-low).  */\n-\t      low_rtx = expand_expr (low, NULL_RTX, mode, 0);\n+\t      low_rtx = expand_expr (low, NULL_RTX, mode, EXPAND_NORMAL);\n \t      new_index = expand_simple_binop (mode, MINUS, index, low_rtx,\n \t\t\t\t\t       NULL_RTX, unsignedp,\n \t\t\t\t\t       OPTAB_WIDEN);\n \t      new_bound = expand_expr (fold_build2 (MINUS_EXPR, type,\n \t\t\t\t\t\t    high, low),\n-\t\t\t\t       NULL_RTX, mode, 0);\n+\t\t\t\t       NULL_RTX, mode, EXPAND_NORMAL);\n \n \t      emit_cmp_and_jump_insns (new_index, new_bound, GT, NULL_RTX,\n \t\t\t\t       mode, 1, default_label);"}]}