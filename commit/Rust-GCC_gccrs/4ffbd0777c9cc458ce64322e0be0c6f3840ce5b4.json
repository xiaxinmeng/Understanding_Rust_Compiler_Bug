{"sha": "4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZmYmQwNzc3YzljYzQ1OGNlNjQzMjJlMGJlMGM2ZjM4NDBjZTViNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-02-27T16:57:26Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-02-27T16:57:26Z"}, "message": "[multiple changes]\n\n\n\n2003-02-27  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/Makefile.am (sources): Add demangle.cc.\n\t(demangle.o): Add.\n\t(demangle.lo): Add.\n\t* src/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.am: Remove old __cxa_demangle bits.\n\t* libsupc++/Makefile.in: Regenerate.\n\n\t* testsuite/testsuite_hooks.h\n\t(__gnu_cxx_test::verify_demangle): New.\n\t* testsuite/testsuite_hooks.cc: Define.\n\n2003-02-27  Carlo Wood  <carlo@alinoe.com>\n\n\t* src/demangle.cc: New.\n\t* libsupc++/demangle.h: New.\n\n2003-02-27  Benjamin Kosnik  <bkoz@redhat.com>\n            Carlo Wood  <carlo@alinoe.com>\n\n\t* testsuite/demangle/abi_examples/01.cc: New.\n\t* testsuite/demangle/abi_examples/02.cc: New.\n\t* testsuite/demangle/abi_examples/03.cc: New.\n\t* testsuite/demangle/abi_examples/04.cc: New.\n\t* testsuite/demangle/abi_examples/05.cc: New.\n\t* testsuite/demangle/abi_examples/06.cc: New.\n\t* testsuite/demangle/abi_examples/07.cc: New.\n\t* testsuite/demangle/abi_examples/08.cc: New.\n\t* testsuite/demangle/abi_examples/09.cc: New.\n\t* testsuite/demangle/abi_examples/10.cc: New.\n\t* testsuite/demangle/abi_examples/11.cc: New.\n\t* testsuite/demangle/abi_examples/12.cc: New.\n\t* testsuite/demangle/abi_examples/13.cc: New.\n\t* testsuite/demangle/abi_examples/14.cc: New.\n\t* testsuite/demangle/abi_examples/15.cc: New.\n\t* testsuite/demangle/abi_examples/16.cc: New.\n\t* testsuite/demangle/abi_examples/17.cc: New.\n\t* testsuite/demangle/abi_examples/18.cc: New.\n\t* testsuite/demangle/abi_examples/19.cc: New.\n\t* testsuite/demangle/abi_examples/20.cc: New.\n\t* testsuite/demangle/abi_examples/21.cc: New.\n\t* testsuite/demangle/abi_examples/22.cc: New.\n\t* testsuite/demangle/abi_examples/23.cc: New.\n\t* testsuite/demangle/abi_examples/24.cc: New.\n\t* testsuite/demangle/abi_examples/25.cc: New.\n\t* testsuite/demangle/abi_examples/26.cc: New.\n\t* testsuite/demangle/abi_text/01.cc: New.\n\t* testsuite/demangle/abi_text/02.cc: New.\n\t* testsuite/demangle/abi_text/03.cc: New.\n\t* testsuite/demangle/abi_text/04.cc: New.\n\t* testsuite/demangle/abi_text/05.cc: New.\n\t* testsuite/demangle/abi_text/06.cc: New.\n\t* testsuite/demangle/abi_text/07.cc: New.\n\t* testsuite/demangle/abi_text/08.cc: New.\n\t* testsuite/demangle/abi_text/09.cc: New.\n\t* testsuite/demangle/abi_text/10.cc: New.\n\t* testsuite/demangle/abi_text/11.cc: New.\n\t* testsuite/demangle/abi_text/12.cc: New.\n\t* testsuite/demangle/abi_text/13.cc: New.\n\t* testsuite/demangle/abi_text/14.cc: New.\n\t* testsuite/demangle/regression/3111-1.cc: New.\n\t* testsuite/demangle/regression/3111-2.cc: New.\n\t* testsuite/demangle/regression/7986-01.cc: New.\n\t* testsuite/demangle/regression/7986-02.cc: New.\n\t* testsuite/demangle/regression/7986-03.cc: New.\n\t* testsuite/demangle/regression/7986-04.cc: New.\n\t* testsuite/demangle/regression/7986-05.cc: New.\n\t* testsuite/demangle/regression/7986-06.cc: New.\n\t* testsuite/demangle/regression/7986-07.cc: New.\n\t* testsuite/demangle/regression/7986-08.cc: New.\n\t* testsuite/demangle/regression/7986-09.cc: New.\n\t* testsuite/demangle/regression/7986-10.cc: New.\n\t* testsuite/demangle/regression/7986-11.cc: New.\n\t* testsuite/demangle/regression/7986-12.cc: New.\n\t* testsuite/demangle/regression/7986.cc: New.\n\t* testsuite/demangle/regression/8897.cc: New.\n\t* testsuite/demangle/regression/cw-01.cc: New.\n\t* testsuite/demangle/regression/cw-02.cc: New.\n\t* testsuite/demangle/regression/cw-03.cc: New.\n\t* testsuite/demangle/regression/cw-04.cc: New.\n\t* testsuite/demangle/regression/cw-05.cc: New.\n\t* testsuite/demangle/regression/cw-06.cc: New.\n\t* testsuite/demangle/regression/cw-07.cc: New.\n\t* testsuite/demangle/regression/cw-08.cc: New.\n\t* testsuite/demangle/regression/cw-09.cc: New.\n\t* testsuite/demangle/regression/cw-10.cc: New.\n\t* testsuite/demangle/regression/cw-11.cc: New.\n\t* testsuite/demangle/regression/cw-12.cc: New.\n\t* testsuite/demangle/regression/cw-13.cc: New.\n\t* testsuite/demangle/regression/cw-14.cc: New.\n\t* testsuite/demangle/regression/old.cc: New.\n\nFrom-SVN: r63513", "tree": {"sha": "8d12c9d5a4a7461c12b0ca8e016cd1bb154e4fcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d12c9d5a4a7461c12b0ca8e016cd1bb154e4fcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/comments", "author": null, "committer": null, "parents": [{"sha": "986704f1c14f3931286ce1a8e632024e4a2b954c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/986704f1c14f3931286ce1a8e632024e4a2b954c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/986704f1c14f3931286ce1a8e632024e4a2b954c"}], "stats": {"total": 8075, "additions": 6804, "deletions": 1271}, "files": [{"sha": "1d224d0b63da535c5ecc92440196ca6c5ae149dc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -1,3 +1,96 @@\n+2003-02-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/Makefile.am (sources): Add demangle.cc.\n+\t(demangle.o): Add.\n+\t(demangle.lo): Add.\t\n+\t* src/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.am: Remove old __cxa_demangle bits.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\n+\t* testsuite/testsuite_hooks.h\n+\t(__gnu_cxx_test::verify_demangle): New.\n+\t* testsuite/testsuite_hooks.cc: Define.\n+\t\n+2003-02-27  Carlo Wood  <carlo@alinoe.com>\n+\n+\t* src/demangle.cc: New.\n+\t* libsupc++/demangle.h: New.\n+\n+2003-02-27  Benjamin Kosnik  <bkoz@redhat.com>\n+            Carlo Wood  <carlo@alinoe.com>\n+\n+\t* testsuite/demangle/abi_examples/01.cc: New.\n+\t* testsuite/demangle/abi_examples/02.cc: New.\n+\t* testsuite/demangle/abi_examples/03.cc: New.\n+\t* testsuite/demangle/abi_examples/04.cc: New.\n+\t* testsuite/demangle/abi_examples/05.cc: New.\n+\t* testsuite/demangle/abi_examples/06.cc: New.\n+\t* testsuite/demangle/abi_examples/07.cc: New.\n+\t* testsuite/demangle/abi_examples/08.cc: New.\n+\t* testsuite/demangle/abi_examples/09.cc: New.\n+\t* testsuite/demangle/abi_examples/10.cc: New.\n+\t* testsuite/demangle/abi_examples/11.cc: New.\n+\t* testsuite/demangle/abi_examples/12.cc: New.\n+\t* testsuite/demangle/abi_examples/13.cc: New.\n+\t* testsuite/demangle/abi_examples/14.cc: New.\n+\t* testsuite/demangle/abi_examples/15.cc: New.\n+\t* testsuite/demangle/abi_examples/16.cc: New.\n+\t* testsuite/demangle/abi_examples/17.cc: New.\n+\t* testsuite/demangle/abi_examples/18.cc: New.\n+\t* testsuite/demangle/abi_examples/19.cc: New.\n+\t* testsuite/demangle/abi_examples/20.cc: New.\n+\t* testsuite/demangle/abi_examples/21.cc: New.\n+\t* testsuite/demangle/abi_examples/22.cc: New.\n+\t* testsuite/demangle/abi_examples/23.cc: New.\n+\t* testsuite/demangle/abi_examples/24.cc: New.\n+\t* testsuite/demangle/abi_examples/25.cc: New.\n+\t* testsuite/demangle/abi_examples/26.cc: New.\n+\t* testsuite/demangle/abi_text/01.cc: New.\n+\t* testsuite/demangle/abi_text/02.cc: New.\n+\t* testsuite/demangle/abi_text/03.cc: New.\n+\t* testsuite/demangle/abi_text/04.cc: New.\n+\t* testsuite/demangle/abi_text/05.cc: New.\n+\t* testsuite/demangle/abi_text/06.cc: New.\n+\t* testsuite/demangle/abi_text/07.cc: New.\n+\t* testsuite/demangle/abi_text/08.cc: New.\n+\t* testsuite/demangle/abi_text/09.cc: New.\n+\t* testsuite/demangle/abi_text/10.cc: New.\n+\t* testsuite/demangle/abi_text/11.cc: New.\n+\t* testsuite/demangle/abi_text/12.cc: New.\n+\t* testsuite/demangle/abi_text/13.cc: New.\n+\t* testsuite/demangle/abi_text/14.cc: New.\n+\t* testsuite/demangle/regression/3111-1.cc: New.\n+\t* testsuite/demangle/regression/3111-2.cc: New.\n+\t* testsuite/demangle/regression/7986-01.cc: New.\n+\t* testsuite/demangle/regression/7986-02.cc: New.\n+\t* testsuite/demangle/regression/7986-03.cc: New.\n+\t* testsuite/demangle/regression/7986-04.cc: New.\n+\t* testsuite/demangle/regression/7986-05.cc: New.\n+\t* testsuite/demangle/regression/7986-06.cc: New.\n+\t* testsuite/demangle/regression/7986-07.cc: New.\n+\t* testsuite/demangle/regression/7986-08.cc: New.\n+\t* testsuite/demangle/regression/7986-09.cc: New.\n+\t* testsuite/demangle/regression/7986-10.cc: New.\n+\t* testsuite/demangle/regression/7986-11.cc: New.\n+\t* testsuite/demangle/regression/7986-12.cc: New.\n+\t* testsuite/demangle/regression/7986.cc: New.\n+\t* testsuite/demangle/regression/8897.cc: New.\n+\t* testsuite/demangle/regression/cw-01.cc: New.\n+\t* testsuite/demangle/regression/cw-02.cc: New.\n+\t* testsuite/demangle/regression/cw-03.cc: New.\n+\t* testsuite/demangle/regression/cw-04.cc: New.\n+\t* testsuite/demangle/regression/cw-05.cc: New.\n+\t* testsuite/demangle/regression/cw-06.cc: New.\n+\t* testsuite/demangle/regression/cw-07.cc: New.\n+\t* testsuite/demangle/regression/cw-08.cc: New.\n+\t* testsuite/demangle/regression/cw-09.cc: New.\n+\t* testsuite/demangle/regression/cw-10.cc: New.\n+\t* testsuite/demangle/regression/cw-11.cc: New.\n+\t* testsuite/demangle/regression/cw-12.cc: New.\n+\t* testsuite/demangle/regression/cw-13.cc: New.\n+\t* testsuite/demangle/regression/cw-14.cc: New.\n+\t* testsuite/demangle/regression/old.cc: New.\n+\n 2003-02-25  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/doxygen/Intro.3:  Update with new (proper) names."}, {"sha": "7d82d91f5c124cd379fc19893f9a4f4849012f43", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1197, "deletions": 1211, "changes": 2408, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4"}, {"sha": "2b09a91e326192961b479c70ff27f3c823d24f84", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -1,6 +1,6 @@\n ## Makefile for the GNU C++ Support library.\n ##\n-## Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+## Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n ##\n ## Process this file with automake to produce Makefile.in.\n ##\n@@ -55,6 +55,8 @@ CONFIG_CXXFLAGS = \\\n WARN_CXXFLAGS = \\\n \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n+LIBSUPCXX_CXXFLAGS = @LIBSUPCXX_PICFLAGS@\n+\n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n@@ -66,10 +68,6 @@ INCLUDES = \\\n headers = \\\n \texception new typeinfo cxxabi.h exception_defines.h \n \n-c_sources = \\\n-\tcxa_demangle.c \\\n-\tdyn-string.c \n-\n sources = \\\n \tdel_op.cc \\\n \tdel_opnt.cc \\\n@@ -98,47 +96,29 @@ sources = \\\n \tvec.cc \\\n \tvterminate.cc\n \n-libsupc___la_SOURCES = $(sources) $(c_sources)\n-libsupc__convenience_la_SOURCES = $(sources) $(c_sources)\n+libsupc___la_SOURCES = $(sources) \n+libsupc__convenience_la_SOURCES = $(sources) \n \n glibcppinstalldir = @gxx_include_dir@\n glibcppinstall_HEADERS = $(headers)\n \n-LIBSUPCXX_CXXFLAGS = $(LIBSUPCXX_PICFLAGS)\n-\n # Use special rules for pulling things out of libiberty.  These\n # objects should be compiled with the \"C\" compiler, not the C++\n # compiler, and also should not use the C++ includes.\n C_COMPILE = \\\n \t$(CC) $(DEFS) $(GCC_INCLUDES) \\\n \t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n \n-cxa_demangle.c:\n-\trm -f $@\n-\t$(LN_S) $(toplevel_srcdir)/libiberty/cp-demangle.c $@\n-cxa_demangle.lo: cxa_demangle.c\n-\t$(LTCOMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n-cxa_demangle.o: cxa_demangle.c\n-\t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n-dyn-string.c:\n-\trm -f $@\n-\t$(LN_S) $(toplevel_srcdir)/libiberty/dyn-string.c $@\n-dyn-string.lo: dyn-string.c\n-\t$(LTCOMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n-dyn-string.o: dyn-string.c\n-\t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n-\n # LTCOMPILE is copied from LTCXXCOMPILE below.\n LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared --mode=compile $(CC) \\\n \t    $(DEFS) $(GCC_INCLUDES) $(LIBSUPCXX_PICFLAGS) \\\n             $(AM_CPPFLAGS) $(CPPFLAGS) \n \n-\n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n-# as the occasion call for it. (ie, --enable-debug)\n+# as the occasion call for it. \n AM_CXXFLAGS = \\\n \t-fno-implicit-templates \\\n \t$(LIBSUPCXX_CXXFLAGS) \\"}, {"sha": "9bb7bad11662c5b7114ecffacc8be6697d749f62", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 7, "deletions": 31, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -173,6 +173,8 @@ WARN_CXXFLAGS = \\\n \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n+LIBSUPCXX_CXXFLAGS = @LIBSUPCXX_PICFLAGS@\n+\n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n@@ -186,11 +188,6 @@ headers = \\\n \texception new typeinfo cxxabi.h exception_defines.h \n \n \n-c_sources = \\\n-\tcxa_demangle.c \\\n-\tdyn-string.c \n-\n-\n sources = \\\n \tdel_op.cc \\\n \tdel_opnt.cc \\\n@@ -220,14 +217,12 @@ sources = \\\n \tvterminate.cc\n \n \n-libsupc___la_SOURCES = $(sources) $(c_sources)\n-libsupc__convenience_la_SOURCES = $(sources) $(c_sources)\n+libsupc___la_SOURCES = $(sources) \n+libsupc__convenience_la_SOURCES = $(sources) \n \n glibcppinstalldir = @gxx_include_dir@\n glibcppinstall_HEADERS = $(headers)\n \n-LIBSUPCXX_CXXFLAGS = $(LIBSUPCXX_PICFLAGS)\n-\n # Use special rules for pulling things out of libiberty.  These\n # objects should be compiled with the \"C\" compiler, not the C++\n # compiler, and also should not use the C++ includes.\n@@ -246,7 +241,7 @@ LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared --mode=compile $(CC) \\\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n-# as the occasion call for it. (ie, --enable-debug)\n+# as the occasion call for it. \n AM_CXXFLAGS = \\\n \t-fno-implicit-templates \\\n \t$(LIBSUPCXX_CXXFLAGS) \\\n@@ -307,22 +302,18 @@ del_opvnt.lo eh_alloc.lo eh_aux_runtime.lo eh_catch.lo eh_exception.lo \\\n eh_globals.lo eh_personality.lo eh_term_handler.lo eh_terminate.lo \\\n eh_throw.lo eh_type.lo eh_unex_handler.lo guard.lo new_handler.lo \\\n new_op.lo new_opnt.lo new_opv.lo new_opvnt.lo pure.lo tinfo.lo \\\n-tinfo2.lo vec.lo vterminate.lo cxa_demangle.lo dyn-string.lo\n+tinfo2.lo vec.lo vterminate.lo\n libsupc___la_LDFLAGS = \n libsupc___la_LIBADD = \n libsupc___la_OBJECTS =  del_op.lo del_opnt.lo del_opv.lo del_opvnt.lo \\\n eh_alloc.lo eh_aux_runtime.lo eh_catch.lo eh_exception.lo eh_globals.lo \\\n eh_personality.lo eh_term_handler.lo eh_terminate.lo eh_throw.lo \\\n eh_type.lo eh_unex_handler.lo guard.lo new_handler.lo new_op.lo \\\n new_opnt.lo new_opv.lo new_opvnt.lo pure.lo tinfo.lo tinfo2.lo vec.lo \\\n-vterminate.lo cxa_demangle.lo dyn-string.lo\n+vterminate.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)\n-CFLAGS = @CFLAGS@\n-COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n-CCLD = $(CC)\n-LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n HEADERS =  $(glibcppinstall_HEADERS)\n \n DIST_COMMON =  Makefile.am Makefile.in\n@@ -568,21 +559,6 @@ mostlyclean-generic distclean-generic clean-generic \\\n maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n \n \n-cxa_demangle.c:\n-\trm -f $@\n-\t$(LN_S) $(toplevel_srcdir)/libiberty/cp-demangle.c $@\n-cxa_demangle.lo: cxa_demangle.c\n-\t$(LTCOMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n-cxa_demangle.o: cxa_demangle.c\n-\t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n-dyn-string.c:\n-\trm -f $@\n-\t$(LN_S) $(toplevel_srcdir)/libiberty/dyn-string.c $@\n-dyn-string.lo: dyn-string.c\n-\t$(LTCOMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n-dyn-string.o: dyn-string.c\n-\t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n-\n # We have to have rules modified from the default to counteract SUN make\n # prepending each of $(glibcppinstall_HEADERS) with VPATH below.\n install-glibcppinstallHEADERS: $(glibcppinstall_HEADERS)"}, {"sha": "3d0803b97f0f9129da3c013f5b883322c4f75fd1", "filename": "libstdc++-v3/libsupc++/demangle.h", "status": "added", "additions": 2359, "deletions": 0, "changes": 2359, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdemangle.h?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,2359 @@\n+// C++ IA64 / g++ v3 demangler  -*- C++ -*-\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Written by Carlo Wood <carlo@alinoe.com>\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef __DEMANGLER_H\n+#define __DEMANGLER_H 1\n+\n+#include <limits>\n+#include <vector>\n+#include <string>\n+#include <cctype>\n+\n+#ifndef _GLIBCPP_DEMANGLER_DEBUG\n+#define _GLIBCPP_DEMANGLER_CWDEBUG 0\n+#define _GLIBCPP_DEMANGLER_DEBUG(x)\n+#define _GLIBCPP_DEMANGLER_DOUT(cntrl, data)\n+#define _GLIBCPP_DEMANGLER_DOUT_ENTERING(x)\n+#define _GLIBCPP_DEMANGLER_DOUT_ENTERING2(x)\n+#define _GLIBCPP_DEMANGLER_RETURN \\\n+    return M_result\n+#define _GLIBCPP_DEMANGLER_RETURN2 \\\n+    return M_result\n+#define _GLIBCPP_DEMANGLER_FAILURE \\\n+    do { M_result = false; return false; } while(0)\n+#else\n+#define _GLIBCPP_DEMANGLER_CWDEBUG 1\n+#endif\n+\n+// The following defines change the behaviour of the demangler.  The\n+// default behaviour is that none of these macros is defined.\n+\n+// _GLIBCPP_DEMANGLER_STYLE_VOID\n+// Default behaviour:\t\t\t\t\tint f()\n+// Uses (void) instead of ():\t\t\t\tint f(void)\n+\n+// _GLIBCPP_DEMANGLER_STYLE_LITERAL\n+// Default behaviour:\t\t\t\t\t(long)13, \n+//\t\t\t\t\t\t\t(unsigned long long)19\n+// Use extensions 'u', 'l' and 'll' for integral\n+// literals (as in template arguments):\t\t\t13l, 19ull\n+\n+// _GLIBCPP_DEMANGLER_STYLE_LITERAL_INT\n+// Default behaviour:\t\t\t\t\t4\n+// Use also an explicit cast for int in literals:\t(int)4\n+\n+namespace __gnu_cxx\n+{\n+  namespace demangler\n+  {\n+\n+    enum substitution_nt\n+    {\n+      type,\n+      template_template_param,\n+      nested_name_prefix,\n+      nested_name_template_prefix,\n+      unscoped_template_name,\n+    };\n+\n+    struct substitution_st\n+    {\n+      int M_start_pos;\n+      substitution_nt M_type;\n+      int M_number_of_prefixes;\n+      \n+      substitution_st(int start_pos,\n+\t\t      substitution_nt type,\n+\t\t      int number_of_prefixes)\n+      : M_start_pos(start_pos), M_type(type),\n+\tM_number_of_prefixes(number_of_prefixes)\n+      { }\n+    };\n+\n+    enum simple_qualifier_nt\n+    {\n+      complex_or_imaginary = 'G',\n+      pointer = 'P',\n+      reference = 'R'\n+    };\n+\n+    enum cv_qualifier_nt\n+    {\n+      cv_qualifier = 'K'\n+    };\n+\n+    enum param_qualifier_nt\n+    {\n+      vendor_extension = 'U',\n+      array = 'A',\n+      pointer_to_member = 'M'\n+    };\n+\n+    template<typename Allocator>\n+      class qualifier;\n+\n+    template<typename Allocator>\n+      class qualifier_list;\n+\n+    template<typename Allocator>\n+      class session;\n+\n+    template<typename Allocator>\n+      class qualifier\n+      {\n+\ttypedef std::basic_string<char, std::char_traits<char>, Allocator>\n+\t    string_type;\n+\n+      private:\n+\tchar M_qualifier1;\n+\tchar M_qualifier2;\n+\tchar M_qualifier3;\n+\tmutable unsigned char M_cnt;\n+\tstring_type M_optional_type;\n+\tint M_start_pos;\n+\tbool M_part_of_substitution;\n+\n+      public:\n+\tqualifier(int start_pos,\n+\t          simple_qualifier_nt simple_qualifier,\n+\t\t  int inside_substitution)\n+\t: M_qualifier1(simple_qualifier),\n+\t  M_start_pos(start_pos),\n+\t  M_part_of_substitution(inside_substitution)\n+\t{ }\n+\n+\tqualifier(int start_pos,\n+\t          cv_qualifier_nt cv_qualifier,\n+\t\t  char const* start,\n+\t\t  int count,\n+\t\t  int inside_substitution)\n+\t: M_qualifier1(start[0]),\n+\t  M_qualifier2((count > 1) ? start[1] : '\\0'),\n+\t  M_qualifier3((count > 2) ? start[2] : '\\0'),\n+\t  M_start_pos(start_pos),\n+\t  M_part_of_substitution(inside_substitution)\n+\t{ }\n+\n+\tqualifier(int start_pos,\n+\t          param_qualifier_nt param_qualifier,\n+\t\t  string_type optional_type,\n+\t\t  int inside_substitution)\n+\t: M_qualifier1(param_qualifier),\n+\t  M_optional_type(optional_type),\n+\t  M_start_pos(start_pos),\n+\t  M_part_of_substitution(inside_substitution)\n+\t{ }\n+\n+\tint\n+\tstart_pos(void) const\n+\t{ return M_start_pos; }\n+\n+\tchar\n+\tfirst_qualifier(void) const\n+\t{ M_cnt = 1; return M_qualifier1; }\n+\n+\tchar\n+\tnext_qualifier(void) const\n+\t{\n+\t  return (++M_cnt == 2) ? M_qualifier2\n+\t                        : ((M_cnt == 3) ? M_qualifier3 : 0);\n+\t}\n+\n+\tstring_type const&\n+\toptional_type(void) const\n+\t{ return M_optional_type; }\n+\n+\tbool\n+\tpart_of_substitution(void) const\n+\t{ return M_part_of_substitution; }\n+\n+      };\n+\n+    template<typename Allocator>\n+      class qualifier_list\n+      {\n+\ttypedef std::basic_string<char, std::char_traits<char>, Allocator>\n+\t  string_type;\n+\n+      private:\n+\tbool M_printing_suppressed;\n+\tstd::vector<qualifier<Allocator>, Allocator> M_qualifier_starts;\n+\tsession<Allocator>& M_demangler;\n+\n+      public:\n+\tqualifier_list(session<Allocator>& demangler_obj)\n+\t: M_printing_suppressed(false), M_demangler(demangler_obj)\n+\t{ }\n+\n+\tvoid\n+\tadd_qualifier_start(simple_qualifier_nt simple_qualifier,\n+\t\t\t    int start_pos,\n+\t\t\t    int inside_substitution)\n+\t{ M_qualifier_starts.\n+\t      push_back(qualifier<Allocator>(start_pos,\n+\t\t  simple_qualifier, inside_substitution)); }\n+\n+\tvoid\n+\tadd_qualifier_start(cv_qualifier_nt cv_qualifier,\n+\t\t\t    int start_pos,\n+\t\t\t    int count,\n+\t\t\t    int inside_substitution)\n+\t{ M_qualifier_starts.\n+\t      push_back(qualifier<Allocator>(start_pos,\n+\t\t    cv_qualifier, &M_demangler.M_str[start_pos],\n+\t\t    count, inside_substitution)); }\n+\n+\tvoid\n+\tadd_qualifier_start(param_qualifier_nt param_qualifier,\n+\t    \t\t    int start_pos,\n+\t\t\t    string_type optional_type,\n+\t\t\t    int inside_substitution)\n+\t{ M_qualifier_starts.\n+\t      push_back(qualifier<Allocator>(start_pos,\n+\t\t    param_qualifier, optional_type, inside_substitution)); }\n+\n+\tvoid\n+\tdecode_qualifiers(string_type& prefix,\n+\t    \t\t  string_type& postfix,\n+\t\t\t  bool member_function_pointer_qualifiers);\n+\n+\tbool\n+\tsuppressed(void) const\n+\t{ return M_printing_suppressed; }\n+\n+\tvoid\n+\tprinting_suppressed(void)\n+\t{ M_printing_suppressed = true; }\n+\n+\tsize_t\n+\tsize(void) const\n+\t{ return M_qualifier_starts.size(); }\n+\n+      };\n+\n+    template<typename Allocator>\n+      class session\n+      {\n+\tfriend class qualifier_list<Allocator>;\n+\ttypedef std::basic_string<char, std::char_traits<char>, Allocator>\n+\t    string_type;\n+\n+      private:\n+\tchar const* M_str;\n+\tint M_pos;\n+\tint M_maxpos;\n+\tbool M_result;\n+\tint M_inside_template_args;\n+\tint M_inside_type;\n+\tint M_inside_substitution;\n+\tbool M_saw_destructor;\n+\tbool M_name_is_cdtor;\n+\tbool M_name_is_template;\n+\tbool M_name_is_conversion_operator;\n+\tbool M_template_args_need_space;\n+\tstring_type M_function_name;\n+\tstd::vector<int, Allocator> M_template_arg_pos;\n+\tint M_template_arg_pos_offset;\n+\tstd::vector<substitution_st, Allocator> M_substitutions_pos;\n+#if _GLIBCPP_DEMANGLER_CWDEBUG\n+\tbool M_inside_add_substitution;\n+#endif\n+\n+      public:\n+\texplicit session(char const* in, int len)\n+\t: M_str(in), M_pos(0), M_maxpos(len - 1), M_result(true),\n+\t  M_inside_template_args(0), M_inside_type(0),\n+\t  M_inside_substitution(0), M_saw_destructor(false),\n+\t  M_name_is_cdtor(false), M_name_is_template(false),\n+\t  M_name_is_conversion_operator(false),\n+\t  M_template_args_need_space(false), M_template_arg_pos_offset(0)\n+#if _GLIBCPP_DEMANGLER_CWDEBUG\n+\t  , M_inside_add_substitution(false)\n+#endif\n+\t{ }\n+\n+\tstatic int\n+\tdecode_encoding(string_type& output, char const* input, int len);\n+\n+\tbool\n+\tdecode_type_with_postfix(string_type& prefix,\n+\t\t                 string_type& postfix,\n+\t            qualifier_list<Allocator>* qualifiers = NULL);\n+\n+\tbool\n+\tdecode_type(string_type& output,\n+\t            qualifier_list<Allocator>* qualifiers = NULL)\n+\t{\n+\t  string_type postfix;\n+\t  bool res = decode_type_with_postfix(output, postfix, qualifiers);\n+\t  output += postfix;\n+\t  return res;\n+\t}\n+\n+\tbool\n+\tremaining_input_characters(void) const\n+\t{ return current() != 0; }\n+\n+      private:\n+\tchar\n+\tcurrent(void) const\n+\t{ return (M_pos > M_maxpos) ? 0 : M_str[M_pos]; }\n+\n+\tchar\n+\tnext(void)\n+\t{ return (M_pos >= M_maxpos) ? 0 : M_str[++M_pos]; }\n+\n+\tchar\n+\teat_current(void)\n+\t{ return (M_pos > M_maxpos) ? 0 : M_str[M_pos++]; }\n+\n+\tvoid\n+\tstore(int& saved_pos)\n+\t{ saved_pos = M_pos; }\n+\n+\tvoid\n+\trestore(int saved_pos)\n+\t{ M_pos = saved_pos; M_result = true; }\n+\n+\tvoid\n+\tadd_substitution(int start_pos,\n+\t                 substitution_nt sub_type,\n+\t\t\t int number_of_prefixes);\n+\n+\tbool decode_bare_function_type(string_type& output);\n+\tbool decode_builtin_type(string_type& output);\n+\tbool decode_call_offset(string_type& output);\n+\tbool decode_class_enum_type(string_type& output);\n+\tbool decode_expression(string_type& output);\n+\tbool decode_literal(string_type& output);\n+\tbool decode_local_name(string_type& output);\n+\tbool decode_name(string_type& output,\n+\t    string_type& nested_name_qualifiers);\n+\tbool decode_nested_name(string_type& output,\n+\t    string_type& qualifiers);\n+\tbool decode_number(string_type& output);\n+\tbool decode_operator_name(string_type& output);\n+\tbool decode_source_name(string_type& output);\n+\tbool decode_substitution(string_type& output,\n+\t    qualifier_list<Allocator>* qualifiers = NULL);\n+\tbool decode_template_args(string_type& output);\n+\tbool decode_template_param(string_type& output,\n+\t    qualifier_list<Allocator>* qualifiers = NULL);\n+\tbool decode_unqualified_name(string_type& output);\n+\tbool decode_unscoped_name(string_type& output);\n+\tbool decode_decimal_integer(string_type& output);\n+\tbool decode_special_name(string_type& output);\n+      };\n+\n+    template<typename Allocator>\n+#if !_GLIBCPP_DEMANGLER_CWDEBUG\n+      inline\n+#endif\n+      void\n+      session<Allocator>::add_substitution(int start_pos,\n+\t\t\t\t\t   substitution_nt sub_type,\n+\t\t\t\t\t   int number_of_prefixes = 0)\n+      {\n+\tif (!M_inside_substitution)\n+\t{\n+#if _GLIBCPP_DEMANGLER_CWDEBUG\n+\t  if (M_inside_add_substitution)\n+\t    return;\n+#endif\n+\t  M_substitutions_pos.\n+\t      push_back(substitution_st(start_pos,\n+\t\t  sub_type, number_of_prefixes));\n+#if _GLIBCPP_DEMANGLER_CWDEBUG\n+\t  if (!DEBUGCHANNELS::dc::demangler.is_on())\n+\t    return;\n+\t  string_type substitution_name(\"S\");\n+\t  int n = M_substitutions_pos.size() - 1;\n+\t  if (n > 0)\n+\t    substitution_name += (n <= 10) ? (char)(n + '0' - 1)\n+\t      \t\t\t\t   : (char)(n + 'A' - 11);\n+\t  substitution_name += '_';\n+\t  string_type subst;\n+\t  int saved_pos = M_pos;\n+\t  M_pos = start_pos;\n+\t  M_inside_add_substitution = true;\n+\t  _GLIBCPP_DEMANGLER_DEBUG( dc::demangler.off() );\n+\t  switch(sub_type)\n+\t  {\n+\t    case type:\n+\t      decode_type(subst);\n+\t      break;\n+\t    case template_template_param:\n+\t      decode_template_param(subst);\n+\t      break;\n+\t    case nested_name_prefix:\n+\t    case nested_name_template_prefix:\n+\t      for (int cnt = number_of_prefixes; cnt > 0; --cnt)\n+\t      {\n+\t\tif (current() == 'I')\n+\t\t{\n+\t\t  subst += ' ';\n+\t\t  decode_template_args(subst);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t  if (cnt < number_of_prefixes)\n+\t\t    subst += \"::\";\n+\t\t  if (current() == 'S')\n+\t\t    decode_substitution(subst);\n+\t\t  else\n+\t\t    decode_unqualified_name(subst);\n+\t\t}\n+\t      }\n+\t      break;\n+\t    case unscoped_template_name:\n+\t      decode_unscoped_name(subst);\n+\t      break;\n+\t  }\n+\t  M_pos = saved_pos;\n+\t  _GLIBCPP_DEMANGLER_DEBUG( dc::demangler.on() );\n+\t  _GLIBCPP_DEMANGLER_DOUT(dc::demangler,\n+\t      \"Adding substitution \" << substitution_name\n+\t      << \" : \" << subst\n+\t      << \" (from \" << location_ct((char*)__builtin_return_address(0)\n+\t\t                          + builtin_return_address_offset)\n+\t      << \" <- \" << location_ct((char*)__builtin_return_address(1)\n+\t\t                       + builtin_return_address_offset)\n+\t      << \" <- \" << location_ct((char*)__builtin_return_address(2)\n+\t\t                       + builtin_return_address_offset)\n+\t      << \").\");\n+\t  M_inside_add_substitution = false;\n+#endif\n+\t}\n+      }\n+\n+    //\n+    // <decimal-integer> ::= 0\n+    //                   ::= 1|2|3|4|5|6|7|8|9 [<digit>+]\n+    // <digit>           ::= 0|1|2|3|4|5|6|7|8|9\n+    //\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_decimal_integer(string_type& output)\n+      {\n+\tchar c = current();\n+\tif (c == '0')\n+\t{\n+\t  output += '0';\n+\t  eat_current();\n+\t}\n+\telse if (!std::isdigit(c))\n+\t  M_result = false;\n+\telse\n+\t{\n+\t  do\n+\t  {\n+\t    output += c;\n+\t  }\n+\t  while (std::isdigit((c = next())));\n+\t}\n+\treturn M_result;\n+      }\n+\n+    // <number> ::= [n] <decimal-integer>\n+    //\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_number(string_type& output)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_number\");\n+\tif (current() != 'n')\n+\t  decode_decimal_integer(output);\n+\telse\n+\t{\n+\t  output += '-';\n+\t  eat_current();\n+\t  decode_decimal_integer(output);\n+\t}\n+\t_GLIBCPP_DEMANGLER_RETURN;\n+      }\n+\n+    // <builtin-type> ::= v  # void\n+    //                ::= w  # wchar_t\n+    //                ::= b  # bool\n+    //                ::= c  # char\n+    //                ::= a  # signed char\n+    //                ::= h  # unsigned char\n+    //                ::= s  # short\n+    //                ::= t  # unsigned short\n+    //                ::= i  # int\n+    //                ::= j  # unsigned int\n+    //                ::= l  # long\n+    //                ::= m  # unsigned long\n+    //                ::= x  # long long, __int64\n+    //                ::= y  # unsigned long long, __int64\n+    //                ::= n  # __int128\n+    //                ::= o  # unsigned __int128\n+    //                ::= f  # float\n+    //                ::= d  # double\n+    //                ::= e  # long double, __float80\n+    //                ::= g  # __float128\n+    //                ::= z  # ellipsis\n+    //                ::= u <source-name>    # vendor extended type\n+    //\n+    char const* const builtin_type_c[26] =\n+    {\n+      \"signed char\",\t// a\n+      \"bool\",\t\t// b\n+      \"char\",\t\t// c\n+      \"double\",\t\t// d\n+      \"long double\",\t// e\n+      \"float\",\t\t// f\n+      \"__float128\",\t\t// g\n+      \"unsigned char\",\t// h\n+      \"int\",\t\t// i\n+      \"unsigned int\",\t// j\n+      NULL,\t\t\t// k\n+      \"long\",\t\t// l\n+      \"unsigned long\",\t// m\n+      \"__int128\",\t\t// n\n+      \"unsigned __int128\",\t// o\n+      NULL,\t\t\t// p\n+      NULL,\t\t\t// q\n+      NULL,\t\t\t// r\n+      \"short\",\t\t// s\n+      \"unsigned short\",\t// t\n+      NULL,\t\t\t// u\n+      \"void\",\t\t// v\n+      \"wchar_t\",\t\t// w\n+      \"long long\",\t\t// x\n+      \"unsigned long long\",\t// y\n+      \"...\"\t\t\t// z\n+    };\n+\n+    //\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_builtin_type(string_type& output)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_builtin_type\");\n+\tchar const* bt;\n+\tif (!islower(current()) || !(bt = builtin_type_c[current() - 'a']))\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\toutput += bt;\n+\teat_current();\n+\t_GLIBCPP_DEMANGLER_RETURN;\n+      }\n+\n+    // <class-enum-type> ::= <name>\n+    //\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_class_enum_type(string_type& output)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_class_enum_type\");\n+\tstring_type nested_name_qualifiers;\n+\tif (!decode_name(output, nested_name_qualifiers))\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\toutput += nested_name_qualifiers;\n+\t_GLIBCPP_DEMANGLER_RETURN;\n+      }\n+\n+    // <substitution> ::=\n+    //   S <seq-id> _\n+    //   S_\n+    //   St # ::std::\n+    //   Sa # ::std::allocator\n+    //   Sb # ::std::basic_string\n+    //   Ss # ::std::basic_string<char, std::char_traits<char>,\n+    //                            std::allocator<char> >\n+    //   Si # ::std::basic_istream<char,  std::char_traits<char> >\n+    //   So # ::std::basic_ostream<char,  std::char_traits<char> >\n+    //   Sd # ::std::basic_iostream<char, std::char_traits<char> >\n+    //\n+    // <seq-id> ::=\n+    //   0|1|2|3|4|5|6|7|8|9|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z\n+    //       [<seq-id>]\t# Base 36 number\n+    //\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_substitution(string_type& output,\n+\t  qualifier_list<Allocator>* qualifiers)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_substitution\");\n+\tunsigned int value = 0;\n+\tchar c = next();\n+\tif (c != '_')\n+\t{\n+\t  switch(c)\n+\t  {\n+\t    case 'a':\n+\t    {\n+\t      output += \"std::allocator\";\n+\t      if (!M_inside_template_args)\n+\t      {\n+\t\tM_function_name = \"allocator\";\n+\t\tM_name_is_template = true;\n+\t\tM_name_is_cdtor = false;\n+\t\tM_name_is_conversion_operator = false;\n+\t      }\n+\t      eat_current();\n+\t      if (qualifiers)\n+\t\tqualifiers->printing_suppressed();\n+\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t    }\n+\t    case 'b':\n+\t    {\n+\t      output += \"std::basic_string\";\n+\t      if (!M_inside_template_args)\n+\t      {\n+\t\tM_function_name = \"basic_string\";\n+\t\tM_name_is_template = true;\n+\t\tM_name_is_cdtor = false;\n+\t\tM_name_is_conversion_operator = false;\n+\t      }\n+\t      eat_current();\n+\t      if (qualifiers)\n+\t\tqualifiers->printing_suppressed();\n+\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t    }\n+\t    case 'd':\n+\t      output += \"std::iostream\";\n+\t      if (!M_inside_template_args)\n+\t      {\n+\t\tM_function_name = \"iostream\";\n+\t\tM_name_is_template = true;\n+\t\tM_name_is_cdtor = false;\n+\t\tM_name_is_conversion_operator = false;\n+\t      }\n+\t      eat_current();\n+\t      if (qualifiers)\n+\t\tqualifiers->printing_suppressed();\n+\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t    case 'i':\n+\t      output += \"std::istream\";\n+\t      if (!M_inside_template_args)\n+\t      {\n+\t\tM_function_name = \"istream\";\n+\t\tM_name_is_template = true;\n+\t\tM_name_is_cdtor = false;\n+\t\tM_name_is_conversion_operator = false;\n+\t      }\n+\t      eat_current();\n+\t      if (qualifiers)\n+\t\tqualifiers->printing_suppressed();\n+\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t    case 'o':\n+\t      output += \"std::ostream\";\n+\t      if (!M_inside_template_args)\n+\t      {\n+\t\tM_function_name = \"ostream\";\n+\t\tM_name_is_template = true;\n+\t\tM_name_is_cdtor = false;\n+\t\tM_name_is_conversion_operator = false;\n+\t      }\n+\t      eat_current();\n+\t      if (qualifiers)\n+\t\tqualifiers->printing_suppressed();\n+\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t    case 's':\n+\t      output += \"std::string\";\n+\t      if (!M_inside_template_args)\n+\t      {\n+\t\tM_function_name = \"string\";\n+\t\tM_name_is_template = true;\n+\t\tM_name_is_cdtor = false;\n+\t\tM_name_is_conversion_operator = false;\n+\t      }\n+\t      eat_current();\n+\t      if (qualifiers)\n+\t\tqualifiers->printing_suppressed();\n+\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t    case 't':\n+\t      output += \"std\";\n+\t      eat_current();\n+\t      if (qualifiers)\n+\t\tqualifiers->printing_suppressed();\n+\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t    default:\n+\t      for(;; c = next())\n+\t      {\n+\t\tif (std::isdigit(c))\n+\t\t  value = value * 36 + c - '0';\n+\t\telse if (isupper(c))\n+\t\t  value = value * 36 + c - 'A' + 10;\n+\t\telse if (c == '_')\n+\t\t  break;\n+\t\telse\n+\t\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t      }\n+\t      ++value;\n+\t      break;\n+\t  }\n+\t}\n+\teat_current();\n+\tif (value >= M_substitutions_pos.size() ||\n+\t    M_inside_type > 20)\t\t\t// Rather than core dump.\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t++M_inside_substitution;\n+\tint saved_pos = M_pos;\n+\tsubstitution_st& substitution(M_substitutions_pos[value]);\n+\tM_pos = substitution.M_start_pos;\n+\tswitch(substitution.M_type)\n+\t{\n+\t  case type:\n+\t    decode_type(output, qualifiers);\n+\t    break;\n+\t  case template_template_param:\n+\t    decode_template_param(output, qualifiers);\n+\t    break;\n+\t  case nested_name_prefix:\n+\t  case nested_name_template_prefix:\n+\t    for (int cnt = substitution.M_number_of_prefixes; cnt > 0; --cnt)\n+\t    {\n+\t      if (current() == 'I')\n+\t      {\n+\t\tif (M_template_args_need_space)\n+\t\t  output += ' ';\n+\t\tM_template_args_need_space = false;\n+\t\tif (!decode_template_args(output))\n+\t\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t      }\n+\t      else\n+\t      {\n+\t\tif (cnt < substitution.M_number_of_prefixes)\n+\t\t  output += \"::\";\n+\t\tif (current() == 'S')\n+\t\t{\n+\t\t  if (!decode_substitution(output))\n+\t\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t\t}\n+\t\telse if (!decode_unqualified_name(output))\n+\t\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t      }\n+\t    }\n+\t    if (qualifiers)\n+\t      qualifiers->printing_suppressed();\n+\t    break;\n+\t  case unscoped_template_name:\n+\t    decode_unscoped_name(output);\n+\t    if (qualifiers)\n+\t      qualifiers->printing_suppressed();\n+\t    break;\n+\t}\n+\tM_pos = saved_pos;\n+\t--M_inside_substitution;\n+\t_GLIBCPP_DEMANGLER_RETURN;\n+      }\n+\n+    // <template-param> ::= T_\t\t\t# first template parameter\n+    //                  ::= T <parameter-2 non-negative number> _\n+    //\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_template_param(string_type& output,\n+\t  qualifier_list<Allocator>* qualifiers)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_template_parameter\");\n+\tif (current() != 'T')\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\tunsigned int value = 0;\n+\tchar c;\n+\tif ((c = next()) != '_')\n+\t{\n+\t  while(std::isdigit(c))\n+\t  {\n+\t    value = value * 10 + c - '0';\n+\t    c = next();\n+\t  }\n+\t  ++value;\n+\t}\n+\tif (eat_current() != '_')\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\tvalue += M_template_arg_pos_offset;\n+\tif (value >= M_template_arg_pos.size())\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\tint saved_pos = M_pos;\n+\tM_pos = M_template_arg_pos[value];\n+\tif (M_inside_type > 20)\t\t// Rather than core dump.\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t++M_inside_substitution;\n+\tif (current() == 'X')\n+\t{\n+\t  eat_current();\n+\t  decode_expression(output);\n+\t}\n+\telse if (current() == 'L')\n+\t  decode_literal(output);\n+\telse\n+\t  decode_type(output, qualifiers);\n+\t--M_inside_substitution;\n+\tM_pos = saved_pos;\n+\t_GLIBCPP_DEMANGLER_RETURN;\n+      }\n+\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_literal(string_type& output)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_literal\");\n+\teat_current();\t// Eat the 'L'.\n+\tif (current() == '_')\n+\t{\n+\t  if (next() != 'Z')\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t  eat_current();\n+\t  if ((M_pos += decode_encoding(output, M_str + M_pos,\n+\t\t  M_maxpos - M_pos + 1)) < 0)\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t}\n+\telse\n+\t{\n+\t  // Special cases\n+\t  if (current() == 'b')\n+\t  {\n+\t    if (next() == '0')\n+\t      output += \"false\";\n+\t    else\n+\t      output += \"true\";\n+\t    eat_current();\n+\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t  }\n+\t  char c = current();\n+#ifdef _GLIBCPP_DEMANGLER_STYLE_LITERAL\n+\t  if (c == 'i' || c == 'j' || c == 'l' ||\n+\t      c == 'm' || c == 'x' || c == 'y')\n+\t    eat_current();\n+\t  else\n+#else\n+#ifndef _GLIBCPP_DEMANGLER_STYLE_LITERAL_INT\n+\t  if (c == 'i')\n+\t    eat_current();\n+\t  else\n+#endif\n+#endif\n+\t  {\n+\t    output += '(';\n+\t    if (!decode_type(output))\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t    output += ')';\n+\t  }\n+\t  if (!decode_number(output))\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+#ifdef _GLIBCPP_DEMANGLER_STYLE_LITERAL\n+\t  if (c == 'j' || c == 'm' || c == 'y')\n+\t    output += 'u';\n+\t  if (c == 'l' || c == 'm')\n+\t    output += 'l';\n+\t  if (c == 'x' || c == 'y')\n+\t    output += \"ll\";\n+#endif\n+\t}\n+\t_GLIBCPP_DEMANGLER_RETURN;\n+      }\n+\n+    // <operator-name> ::=\n+    //   nw\t\t\t\t# new           \n+    //   na\t\t\t\t# new[]\n+    //   dl\t\t\t\t# delete        \n+    //   da\t\t\t\t# delete[]      \n+    //   ng\t\t\t\t# - (unary)     \n+    //   ad\t\t\t\t# & (unary)     \n+    //   de\t\t\t\t# * (unary)     \n+    //   co\t\t\t\t# ~             \n+    //   pl\t\t\t\t# +             \n+    //   mi\t\t\t\t# -             \n+    //   ml\t\t\t\t# *             \n+    //   dv\t\t\t\t# /             \n+    //   rm\t\t\t\t# %             \n+    //   an\t\t\t\t# &             \n+    //   or\t\t\t\t# |             \n+    //   eo\t\t\t\t# ^             \n+    //   aS\t\t\t\t# =             \n+    //   pL\t\t\t\t# +=            \n+    //   mI\t\t\t\t# -=            \n+    //   mL\t\t\t\t# *=            \n+    //   dV\t\t\t\t# /=            \n+    //   rM\t\t\t\t# %=            \n+    //   aN\t\t\t\t# &=            \n+    //   oR\t\t\t\t# |=            \n+    //   eO\t\t\t\t# ^=            \n+    //   ls\t\t\t\t# <<            \n+    //   rs\t\t\t\t# >>            \n+    //   lS\t\t\t\t# <<=           \n+    //   rS\t\t\t\t# >>=           \n+    //   eq\t\t\t\t# ==            \n+    //   ne\t\t\t\t# !=            \n+    //   lt\t\t\t\t# <             \n+    //   gt\t\t\t\t# >             \n+    //   le\t\t\t\t# <=            \n+    //   ge\t\t\t\t# >=            \n+    //   nt\t\t\t\t# !             \n+    //   aa\t\t\t\t# &&            \n+    //   oo\t\t\t\t# ||            \n+    //   pp\t\t\t\t# ++            \n+    //   mm\t\t\t\t# --            \n+    //   cm\t\t\t\t# ,             \n+    //   pm\t\t\t\t# ->*           \n+    //   pt\t\t\t\t# ->            \n+    //   cl\t\t\t\t# ()            \n+    //   ix\t\t\t\t# []            \n+    //   qu\t\t\t\t# ?             \n+    //   sz\t\t\t\t# sizeof        \n+    //   sr\t\t\t\t# scope resolution (::), see below        \n+    //   cv <type>\t\t\t# (cast)        \n+    //   v <digit> <source-name>\t# vendor extended operator\n+    //\n+    //\n+    // Symbol operator codes exist of two characters, we need to find a\n+    // quick hash so that their names can be looked up in a table.\n+    //\n+    // The puzzle :)\n+    // Shift the rows so that there is at most one character per column.\n+    //\n+    // A perfect solution:\n+    //                                              horizontal\n+    //    .....................................     offset + 'a'\n+    // a, ||a||d|||||||||n||||s||||||||||||||||||\t    2\n+    // c, || || ||lm|o||| |||| ||||||||||||||||||\t   -3\n+    // d, || a| |e  | ||l |||| |||v||||||||||||||\t    3\n+    // e, ||  | |   o q|  |||| ||| ||||||||||||||\t   -4\n+    // g, |e  | |      |  t||| ||| ||||||||||||||\t   -3\n+    // i, |   | |      |   ||| ||| ||||||||||x|||    12\n+    // l, |   | |      e   ||| ||| ||st|||||| |||\t    9\n+    // m, |   | |          ||| ||| |i  lm|||| |||\t   18\n+    // n, a   e g          ||t |w| |     |||| |||\t    0\n+    // o,                  ||  | | |     ||o| r||\t   19\n+    // p,                  lm  p | t     || |  ||\t    6\n+    // q,                        |       || u  ||\t   14\n+    // r,                        |       |m    |s\t   20\n+    // s,                        r       z     | \t    6\n+    //    .....................................\n+    // ^            ^__ second character\n+    // |___ first character\n+    //\n+\n+    // Putting that solution in tables:\n+\n+    char const offset_table_c [1 + CHAR_MAX - CHAR_MIN ] =\n+    {\n+      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+#if (CHAR_MIN < 0)\n+      // Add -CHAR_MIN extra zeroes (128):\n+      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n+      //   a    b    c    d    e    f    g    h    i    j    k\n+      0, -95,   0,-100, -94,-101,   0,-100,   0, -85,   0,   0,\n+      //   l    m    n    o    p    q    r    s    t    u    v\n+\t -88, -79, -97, -78, -91, -83, -77, -91,   0,   0,   0,\n+#else\n+      //   a    b    c    d    e    f    g    h    i    j    k\n+      0, 161,   0, 156, 162, 155,   0, 156,   0, 171,   0,   0,\n+      //   l    m    n    o    p    q    r    s    t    u    v\n+\t 168, 177, 159, 178, 165, 173, 179, 165,   0,   0,   0,\n+#endif\n+      // ... more zeros\n+    };\n+\n+    struct entry_st\n+    {\n+      char const* opcode;\n+      char const* symbol_name;\n+      bool unary;\n+    };\n+\n+    entry_st const symbol_name_table_c[39] = {\n+      { \"na\",  \"operator new[]\", true },\n+      { \"ge\",  \"operator>=\", false },\n+      { \"aa\",  \"operator&&\", false },\n+      { \"da\",  \"operator delete[]\", true },\n+      { \"ne\",  \"operator!=\", false },\n+      { \"ad\",  \"operator&\", true },\t// unary\n+      { \"ng\",  \"operator-\", true },\t// unary\n+      { \"de\",  \"operator*\", true },\t// unary\n+      { \"cl\",  \"operator()\", true },\n+      { \"cm\",  \"operator,\", false },\n+      { \"eo=\", \"operator^\", false },\n+      { \"co\",  \"operator~\", false },\n+      { \"eq\",  \"operator==\", false },\n+      { \"le\",  \"operator<=\", false },\n+      { \"dl\",  \"operator delete\", true },\n+      { \"an=\", \"operator&\", false },\n+      { \"gt\",  \"operator>\", false },\n+      { \"pl=\", \"operator+\", false },\n+      { \"pm\",  \"operator->*\", false },\n+      { \"nt\",  \"operator!\", true },\n+      { \"as=\", \"operator\", false },\n+      { \"pp\",  \"operator++\", true },\n+      { \"nw\",  \"operator new\", true },\n+      { \"sr\",  \"::\", true },\n+      { \"dv=\", \"operator/\", false },\n+      { \"pt\",  \"operator->\", false },\n+      { \"mi=\", \"operator-\", false },\n+      { \"ls=\", \"operator<<\", false },\n+      { \"lt\",  \"operator<\", false },\n+      { \"ml=\", \"operator*\", false },\n+      { \"mm\",  \"operator--\", true },\n+      { \"sz\",  \"sizeof\", true },\n+      { \"rm=\", \"operator%\", false },\n+      { \"oo\",  \"operator||\", false },\n+      { \"qu\",  \"operator?\", false },\n+      { \"ix\",  \"operator[]\", true },\n+      { \"or=\", \"operator|\", false },\n+      { \"\", NULL, false },\n+      { \"rs=\", \"operator>>\", false }\n+    };\n+\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_operator_name(string_type& output)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_operator_name\");\n+\n+\tchar opcode0 = current();\n+\tchar opcode1 = tolower(next());\n+\n+\tregister char hash;\n+\tif ((hash = offset_table_c[opcode0 - CHAR_MIN]))\n+\t{\n+\t  hash += opcode1;\n+\t  if (\n+#if (CHAR_MIN < 0)\n+\t      hash >= 0 &&\n+#endif\n+\t      hash < 39)\n+\t  {\n+\t    int index = static_cast<int>(static_cast<unsigned char>(hash));\n+\t    entry_st entry = symbol_name_table_c[index];\n+\t    if (entry.opcode[0] == opcode0 && entry.opcode[1] == opcode1\n+\t\t&& (opcode1 == current() || entry.opcode[2] == '='))\n+\t    {\n+\t      output += entry.symbol_name;\n+\t      if (opcode1 != current())\n+\t\toutput += '=';\n+\t      eat_current();\n+\t      if (hash == 27 || hash == 28)\n+\t\tM_template_args_need_space = true;\n+\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t    }\n+\t    else if (opcode0 == 'c' && opcode1 == 'v')\n+\t    {\n+\t      eat_current();\n+\t      output += \"operator \";\n+\t      if (current() == 'T')\n+\t      {\n+\t\t// This is a templated cast operator.\n+\t\t// It must be of the form \"cvT_I...E\".\n+\t\t// Let M_template_arg_pos already point\n+\t\t// to the template argument.\n+\t\tM_template_arg_pos_offset = M_template_arg_pos.size();\n+\t\tM_template_arg_pos.push_back(M_pos + 3);\n+\t      }\n+\t      if (!decode_type(output))\n+\t\t_GLIBCPP_DEMANGLER_FAILURE;\n+\t      if (!M_inside_template_args)\n+\t\tM_name_is_conversion_operator = true;\n+\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t    }\n+\t  }\n+\t}\n+\t_GLIBCPP_DEMANGLER_FAILURE;\n+      }\n+\n+    //\n+    // <expression> ::= <unary operator-name> <expression>\n+    //              ::= <binary operator-name> <expression> <expression>\n+    //              ::= <expr-primary>\n+    //\n+    // <expr-primary> ::= <template-param>\t\t# Starts with a T\n+    //                ::= L <type> <value number> E\t# literal\n+    //                ::= L <mangled-name> E\t\t# external name\n+    //\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_expression(string_type& output)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_expression\");\n+\tif (current() == 'T')\n+\t{\n+\t  if (!decode_template_param(output))\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t}\n+\telse if (current() == 'L')\n+\t{\n+\t  if (!decode_literal(output))\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t  if (current() != 'E')\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t  eat_current();\n+\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t}\n+\telse\n+\t{\n+\t  char opcode0 = current();\n+\t  char opcode1 = tolower(next());\n+\n+\t  register char hash;\n+\t  if ((hash = offset_table_c[opcode0 - CHAR_MIN]))\n+\t  {\n+\t    hash += opcode1;\n+\t    if (\n+#if (CHAR_MIN < 0)\n+\t\thash >= 0 &&\n+#endif\n+\t\thash < 39)\n+\t    {\n+\t      int index = static_cast<int>(static_cast<unsigned char>(hash));\n+\t      entry_st entry = symbol_name_table_c[index];\n+\t      if (entry.opcode[0] == opcode0 && entry.opcode[1] == opcode1\n+\t\t  && (opcode1 == current() || entry.opcode[2] == '='))\n+\t      {\n+\t\tchar const* p = entry.symbol_name;\n+\t\tif (!strncmp(\"operator\", p, 8))\n+\t\t  p += 8;\n+\t\tif (*p == ' ')\n+\t\t  ++p;\n+\t\tif (entry.unary)\n+\t\t  output += p;\n+\t\tbool is_eq = (opcode1 != current());\n+\t\teat_current();\n+\t\toutput += '(';\n+\t\tif (!decode_expression(output))\n+\t\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t\toutput += ')';\n+\t\tif (!entry.unary)\n+\t\t{\n+\t\t  output += ' ';\n+\t\t  output += p;\n+\t\t  if (is_eq)\n+\t\t    output += '=';\n+\t\t  output += ' ';\n+\t\t  output += '(';\n+\t\t  if (!decode_expression(output))\n+\t\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t\t  output += ')';\n+\t\t}\n+\t\t_GLIBCPP_DEMANGLER_RETURN;\n+\t      }\n+\t    }\n+\t  }\n+\t}\n+\t_GLIBCPP_DEMANGLER_FAILURE;\n+      }\n+\n+    //\n+    // <template-args> ::= I <template-arg>+ E\n+    // <template-arg> ::= <type>\t\t\t# type or template\n+    //                ::= L <type> <value number> E\t# literal\n+    //                ::= L_Z <encoding> E\t\t# external name\n+    //                ::= X <expression> E\t\t# expression\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_template_args(string_type& output)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_template_args\");\n+\tif (eat_current() != 'I')\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\tint prev_size = M_template_arg_pos.size();\n+\t++M_inside_template_args;\n+\tif (M_template_args_need_space)\n+\t{\n+\t  output += ' ';\n+\t  M_template_args_need_space = false;\n+\t}\n+\toutput += '<';\n+\tfor(;;)\n+\t{\n+\t  if (M_inside_template_args == 1 && !M_inside_type)\n+\t    M_template_arg_pos.push_back(M_pos);\n+\t  if (current() == 'X')\n+\t  {\n+\t    eat_current();\n+\t    if (!decode_expression(output))\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t    if (current() != 'E')\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t    eat_current();\n+\t  }\n+\t  else if (current() == 'L')\n+\t  {\n+\t    if (!decode_literal(output))\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t    if (current() != 'E')\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t    eat_current();\n+\t  }\n+\t  else if (!decode_type(output))\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t  if (current() == 'E')\n+\t    break;\n+\t  output += \", \";\n+\t}\n+\teat_current();\n+\tif (*(output.rbegin()) == '>')\n+\t  output += ' ';\n+\toutput += '>';\n+\t--M_inside_template_args;\n+\tif (!M_inside_template_args && !M_inside_type)\n+\t{\n+\t  M_name_is_template = true;\n+\t  M_template_arg_pos_offset = prev_size;\n+\t}\n+\t_GLIBCPP_DEMANGLER_RETURN;\n+      }\n+\n+    // <bare-function-type> ::=\n+    //   <signature type>+\t\t# types are parameter types\n+    //\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_bare_function_type(string_type& output)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_bare_function_type\");\n+\tif (M_saw_destructor)\n+\t{\n+\t  if (eat_current() != 'v' || (current() != 'E' && current() != 0))\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t  output += \"()\";\n+\t  M_saw_destructor = false;\n+\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t}\n+#ifndef _GLIBCPP_DEMANGLER_STYLE_VOID\n+\tif (current() == 'v')\n+\t{\n+\t  eat_current();\n+\t  if (current() != 'E' && current() != 0)\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t  output += \"()\";\n+\t  M_saw_destructor = false;\n+\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t}\n+#endif\n+\toutput += '(';\n+\tM_template_args_need_space = false;\n+\tif (!decode_type(output))\t// Must have at least one parameter.\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\twhile (current() != 'E' && current() != 0)\n+\t{\n+\t  output += \", \";\n+\t  if (!decode_type(output))\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t}\n+\toutput += ')';\n+\t_GLIBCPP_DEMANGLER_RETURN;\n+      }\n+\n+    // <type> ::=\n+    //   <builtin-type>\t\t# Starts with a lower case character != r.\n+    //   <function-type>\t# Starts with F\n+    //   <class-enum-type>\t# Starts with N, S, C, D, Z, a digit or a lower\n+    //   \t\t\t# case character.  Since a lower case character\n+    //   \t\t\t# would be an operator name, that would be an\n+    //   \t\t\t# error.  The S is a substitution or St\n+    //   \t\t\t# (::std::).  A 'C' would be a constructor and\n+    //   \t\t\t# thus also an error.\n+    //   <template-param>\t# Starts with T\n+    //   <substitution>         # Starts with S\n+    //   <template-template-param> <template-args>  # Starts with T or S,\n+    //   \t\t\t\t\t    # equivalent with the above.\n+    //\n+    //   <array-type>\t\t\t# Starts with A\n+    //   <pointer-to-member-type>\t# Starts with M\n+    //   <CV-qualifiers> <type>\t\t# Starts with r, V or K\n+    //   P <type>   # pointer-to\t# Starts with P\n+    //   R <type>   # reference-to\t# Starts with R\n+    //   C <type>   # complex (C 2000)\t# Starts with C\n+    //   G <type>   # imaginary (C 2000)# Starts with G\n+    //   U <source-name> <type>     \t# vendor extended type qualifier,\n+    //   \t\t\t\t# starts with U\n+    //\n+    // <template-template-param> ::= <template-param>\n+    //                           ::= <substitution>\n+\n+    // My own analysis of how to decode qualifiers:\n+    //\n+    // F is a <function-type>, <T> is a <builtin-type>, <class-enum-type>,\n+    //   <template-param> or <template-template-param> <template-args>.\n+    // <Q> represents a series of qualifiers (not G or C).\n+    // <C> is an unqualified type.\n+    // <R> is a qualified type.\n+    // <B> is the bare-function-type without return type.\n+    // <I> is the array index.\n+    //\t\t\t\t\t\tSubstitutions:\n+    // <Q>M<C><Q2>F<R><B>E  ==> R (C::*Q)B Q2\t\"<C>\", \"F<R><B>E\"\n+    // \t\t\t\t\t\t    (<R> and <B> recursive),\n+    // \t\t\t\t\t\t    \"M<C><Q2>F<R><B>E\".\n+    // <Q>F<R><B>E \t    ==> R (Q)B\t\t\"<R>\", \"<B>\" (<B> recursive)\n+    //                                              and \"F<R><B>E\".\n+    //\n+    // Note that if <R> has postfix qualifiers (an array), then those\n+    // are added AFTER the (member) function type.  For example:\n+    // <Q>FPA<R><B>E ==> R (*(Q)B) [], where the PA added the prefix\n+    // \"(*\" and the postfix \") []\".\n+    //\n+    // <Q>G<T>     \t    ==> imaginary T Q\t\"<T>\", \"G<T>\" (<T> recursive).\n+    // <Q>C<T>     \t    ==> complex T Q\t\"<T>\", \"C<T>\" (<T> recursive).\n+    // <Q><T>      \t    ==> T Q\t\t\"<T>\" (<T> recursive).\n+    //\n+    // where <Q> is any of:\n+    //\n+    // <Q>P   \t\t==> *Q\t\t\t\t\"P...\"\n+    // <Q>R   \t\t==> &Q\t\t\t\t\"R...\"\n+    // <Q>[K|V|r]+\t==> [ const| volatile| restrict]+Q\t\"KVr...\"\n+    // <Q>U<S>\t\t==>  SQ\t\t\t\t\"U<S>...\"\n+    // <Q>M<C>\t\t==> C::*Q\t\t\t\"M<C>...\" (<C> recurs.)\n+    // A<I>\t\t==> [I]\t\t\t\t\"A<I>...\" (<I> recurs.)\n+    // <Q>A<I>\t\t==>  (Q) [I]\t\t\t\"A<I>...\" (<I> recurs.)\n+    //   Note that when <Q> ends on an A<I2> then the brackets are omitted:\n+    //   A<I2>A<I>\t  ==> [I2][I]\n+    //  \n+    // A <substitution> is handled with an input position switch during which\n+    // new substitutions are turned off.  Because recursive handling of types\n+    // (and therefore the order in which substitutions must be generated) must\n+    // be done left to right, but the generation of Q needs processing right to\n+    // left, substitutions per <type> are generated by reading the input left\n+    // to right and marking the starts of all substitutions only - implicitly\n+    // finishing them at the end of the type.  Then the output and real\n+    // substitutions are generated.\n+    //\n+    // The following comment was for the demangling of g++ version 3.0.x.  The\n+    // mangling (and I believe even the ABI description) have been fixed now\n+    // (as of g++ version 3.1).\t\n+    //\n+    // g++ 3.0.x only:\n+    // The ABI specifies for pointer-to-member function types the format\n+    // <Q>M<T>F<R><B>E.  In other words, the qualifier <Q2> (see above) is\n+    // implicitely contained in <T> instead of explicitly part of the M format.\n+    // I am convinced that this is a bug in the ABI.  Unfortunately, this is\n+    // how we have to demangle things as it has a direct impact on the order\n+    // in which substitutions are stored.  This ill-formed design results in\n+    // rather ill-formed demangler code too however :/\n+    //\n+    // <Q2> is now explicitely part of the M format.\n+    // For some weird reason, g++ (3.2.1) does not add substitutions for\n+    // qualified member function pointers.  I think that is another bug.\n+    //\n+    template<typename Allocator>\n+      void\n+      qualifier_list<Allocator>::decode_qualifiers(\n+\t  string_type& prefix,\n+\t  string_type& postfix,\n+\t  bool member_function_pointer_qualifiers = false)\n+      {\n+\tfor(typename std::vector<qualifier<Allocator>, Allocator>::\n+\t    reverse_iterator iter = M_qualifier_starts.rbegin();\n+\t    iter != M_qualifier_starts.rend();)\n+\t{\n+\t  if (!member_function_pointer_qualifiers\n+\t      && !(*iter).part_of_substitution())\n+\t  {\n+\t    int saved_inside_substitution = M_demangler.M_inside_substitution;\n+\t    M_demangler.M_inside_substitution = 0;\n+\t    M_demangler.add_substitution((*iter).start_pos(), type);\n+\t    M_demangler.M_inside_substitution = saved_inside_substitution;\n+\t  }\n+\t  char qualifier_char = (*iter).first_qualifier();\n+\t  for(; qualifier_char; qualifier_char = (*iter).next_qualifier())\n+\t  {\n+\t    switch(qualifier_char)\n+\t    {\n+\t      case 'P':\n+\t\tprefix += \"*\";\n+\t\tbreak;\n+\t      case 'R':\n+\t\tprefix += \"&\";\n+\t\tbreak;\n+\t      case 'K':\n+\t\tprefix += \" const\";\n+\t\tcontinue;\n+\t      case 'V':\n+\t\tprefix += \" volatile\";\n+\t\tcontinue;\n+\t      case 'r':\n+\t\tprefix += \" restrict\";\n+\t\tcontinue;\n+\t      case 'A':\n+\t      {\n+\t\tstring_type index = (*iter).optional_type();\n+\t\tif (++iter != M_qualifier_starts.rend()\n+\t\t    && (*iter).first_qualifier() != 'A')\n+\t\t{\n+\t\t  prefix += \" (\";\n+\t\t  postfix = \") [\" + index + \"]\" + postfix;\n+\t\t}\n+\t\telse\n+\t\t  postfix = \"[\" + index + \"]\" + postfix;\n+\t\tbreak;\n+\t      }\n+\t      case 'M':\n+\t\tprefix += \" \";\n+\t\tprefix += (*iter).optional_type();\n+\t\tprefix += \"::*\";\n+\t\tbreak;\n+\t      case 'U':\n+\t\tprefix += \" \";\n+\t\tprefix += (*iter).optional_type();\n+\t\tbreak;\n+\t      case 'G':\t// Only here so we added a substitution.\n+\t\tbreak;\n+\t    }\n+\t    break;\n+\t  }\n+\t  if (qualifier_char != 'A')\n+\t    ++iter;\n+\t}\n+\tM_printing_suppressed = false;\n+      }\n+\n+    //\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_type_with_postfix(\n+\t  string_type& prefix, string_type& postfix,\n+\t  qualifier_list<Allocator>* qualifiers)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING2\n+\t    (qualifiers ? \"decode_type\" : \"decode_type[with qualifiers]\");\n+\t++M_inside_type;\n+\tbool recursive_template_param_or_substitution_call;\n+\tif (!(recursive_template_param_or_substitution_call = qualifiers))\n+\t    qualifiers = new qualifier_list<Allocator>(*this);\n+\t// First eat all qualifiers.\n+\tbool failure = false;\n+\tfor(;;)\t\t// So we can use 'continue' to eat the next qualifier.\n+\t{\n+\t  int start_pos = M_pos;\n+\t  switch(current())\n+\t  {\n+\t    case 'P':\n+\t      qualifiers->add_qualifier_start(pointer, start_pos,\n+\t\t  M_inside_substitution);\n+\t      eat_current();\n+\t      continue;\n+\t    case 'R':\n+\t      qualifiers->add_qualifier_start(reference, start_pos,\n+\t\t  M_inside_substitution);\n+\t      eat_current();\n+\t      continue;\n+\t    case 'K':\n+\t    case 'V':\n+\t    case 'r':\n+\t    {\n+\t      char c;\n+\t      int count = 0;\n+\t      do\n+\t      {\n+\t\t++count;\n+\t\tc = next();\n+\t      }\n+\t      while(c == 'K' || c == 'V' || c == 'r');\n+\t      qualifiers->add_qualifier_start(cv_qualifier, start_pos, count,\n+\t\t  M_inside_substitution);\n+\t      continue;\n+\t    }\n+\t    case 'U':\n+\t    {\n+\t      eat_current();\n+\t      string_type source_name;\n+\t      if (!decode_source_name(source_name))\n+\t      {\n+\t\tfailure = true;\n+\t\tbreak;\n+\t      }\n+\t      qualifiers->add_qualifier_start(vendor_extension, start_pos,\n+\t\t  source_name, M_inside_substitution);\n+\t      continue;\n+\t    }\n+\t    case 'A':\n+\t    {\n+\t      // <array-type> ::= A <positive dimension number> _ <element type>\n+\t      //              ::= A [<dimension expression>] _ <element type>\n+\t      //\n+\t      string_type index;\n+\t      int saved_pos;\n+\t      store(saved_pos);\n+\t      if (next() == 'n' || !decode_number(index))\n+\t      {\n+\t\trestore(saved_pos);\n+\t\tif (next() != '_' && !decode_expression(index))\n+\t\t{\n+\t\t  failure = true;\n+\t\t  break;\n+\t\t}\n+\t      }\n+\t      if (eat_current() != '_')\n+\t      {\n+\t\tfailure = true;\n+\t\tbreak;\n+\t      }\n+\t      qualifiers->add_qualifier_start(array, start_pos, index,\n+\t\t  M_inside_substitution);\n+\t      continue;\n+\t    }\n+\t    case 'M':\n+\t    {\n+\t      // <Q>M<C> or <Q>M<C><Q2>F<R><B>E\n+\t      eat_current();\n+\t      string_type class_type;\n+\t      if (!decode_type(class_type))\t\t// Substitution: \"<C>\".\n+\t      {\n+\t\tfailure = true;\n+\t\tbreak;\n+\t      }\n+\t      char c = current();\n+\t      if (c == 'F' || c == 'K' || c == 'V' || c == 'r')\n+\t\t  // Must be CV-qualifiers and a member function pointer.\n+\t      {\n+\t\t// <Q>M<C><Q2>F<R><B>E\t==> R (C::*Q)B Q2\n+\t\t//     substitutions: \"<C>\", \"F<R><B>E\" (<R> and <B>\n+\t\t//                    recursive), \"M<C><Q2>F<R><B>E\".\n+\t\tint count = 0;\n+\t\tint Q2_start_pos = M_pos;\n+\t\twhile(c == 'K' || c == 'V' || c == 'r')\t\t// Decode <Q2>.\n+\t\t{\n+\t\t  ++count;\n+\t\t  c = next();\n+\t\t}\n+\t\tqualifier_list<Allocator> class_type_qualifiers(*this);\n+\t\tif (count)\n+\t\t  class_type_qualifiers.\n+\t\t      add_qualifier_start(cv_qualifier, Q2_start_pos,\n+\t\t\t  count, M_inside_substitution);\n+\t\tstring_type member_function_qualifiers;\n+\t\t// It is unclear why g++ doesn't add a substitution for\n+\t\t// \"<Q2>F<R><B>E\" as it should I think.\n+\t\tstring_type member_function_qualifiers_postfix;\n+\t\tclass_type_qualifiers.\n+\t\t    decode_qualifiers(member_function_qualifiers,\n+\t\t\tmember_function_qualifiers_postfix, true);\n+\t\tmember_function_qualifiers +=\n+\t\t    member_function_qualifiers_postfix;\n+\t\t// I don't think this substitution is actually ever used.\n+\t\tint function_pos = M_pos;\n+\t\tif (eat_current() != 'F')\n+\t\t{\n+\t\t  failure = true;\n+\t\t  break;\n+\t\t}\n+\t\t// Return type.\n+\t\t// Constructors, destructors and conversion operators don't\n+\t\t// have a return type, but seem to never get here.\n+\t\tif (!decode_type_with_postfix(prefix, postfix))\n+\t\t    // substitution: <R> recursive\n+\t\t{\n+\t\t  failure = true;\n+\t\t  break;\n+\t\t}\n+\t\tprefix += \" (\";\n+\t\tprefix += class_type;\n+\t\tprefix += \"::*\";\n+\t\tstring_type bare_function_type;\n+\t\tif (!decode_bare_function_type(bare_function_type)\n+\t\t    || eat_current() != 'E')\t// Substitution: <B> recursive.\n+\t\t{\n+\t\t  failure = true;\n+\t\t  break;\n+\t\t}\n+\t\t// substitution: \"F<R><B>E\".\n+\t\tadd_substitution(function_pos, type);\n+\t\t// substitution: \"M<C><Q2>F<R><B>E\".\n+\t\tadd_substitution(start_pos, type);\n+\t\t// substitution: all qualified types if any.\n+\t\tqualifiers->decode_qualifiers(prefix, postfix);\n+\t\tprefix += \")\";\n+\t\tprefix += bare_function_type;\n+\t\tprefix += member_function_qualifiers;\n+\t\tgoto decode_type_exit;\n+\t      }\n+\t      qualifiers->add_qualifier_start(pointer_to_member, start_pos,\n+\t\t  class_type, M_inside_substitution);\n+\t      continue;\n+\t    }\n+\t    default:\n+\t      break;\n+\t  }\n+\t  break;\n+\t}\n+\tif (!failure)\n+\t{\n+\t  // <Q>G<T>     \t\t==> imaginary T Q\n+\t  //     substitutions: \"<T>\", \"G<T>\" (<T> recursive).\n+\t  // <Q>C<T>     \t\t==> complex T Q\n+\t  //     substitutions: \"<T>\", \"C<T>\" (<T> recursive).\n+\t  if (current() == 'C' || current() == 'G')\n+\t  {\n+\t    prefix += current() == 'C' ? \"complex \" : \"imaginary \";\n+\t    qualifiers->add_qualifier_start(complex_or_imaginary, M_pos,\n+\t\tM_inside_substitution);\n+\t    eat_current();\n+\t  }\n+\t  int start_pos = M_pos;\n+\t  switch(current())\n+\t  {\n+\t    case 'F':\n+\t    {\n+\t      // <Q>F<R><B>E \t\t==> R (Q)B\n+\t      //     substitution: \"<R>\", \"<B>\" (<B> recursive) and \"F<R><B>E\".\n+\t      eat_current();\n+\t      // Return type.\n+\t      if (!decode_type_with_postfix(prefix, postfix))\n+\t\t  // Substitution: \"<R>\".\n+\t      {\n+\t\tfailure = true;\n+\t\tbreak;\n+\t      }\n+\t      // Only array (pointer) types have a postfix.\n+\t      // In that case we don't want the space but\n+\t      // expect something like prefix is \"int (*\"\n+\t      // and postfix is \") [1]\".\n+\t      if (postfix.size() == 0)\n+\t\tprefix += ' ';\n+\t      prefix += '(';\n+\t      string_type bare_function_type;\n+\t      if (!decode_bare_function_type(bare_function_type)\n+\t\t  // substitution: \"<B>\" (<B> recursive).\n+\t\t  || eat_current() != 'E')\n+\t      {\n+\t\tfailure = true;\n+\t\tbreak;\n+\t      }\n+\t      add_substitution(start_pos, type);  // Substitution: \"F<R><B>E\".\n+\t      qualifiers->decode_qualifiers(prefix, postfix);\n+\t\t  // substitution: all qualified types, if any.\n+\t      prefix += \")\";\n+\t      prefix += bare_function_type;\n+\t      break;\n+\t    }\n+\t    case 'T':\n+\t      if (!decode_template_param(prefix, qualifiers))\n+\t      {\n+\t\tfailure = true;\n+\t\tbreak;\n+\t      }\n+\t      if (current() == 'I')\n+\t      {\n+\t\tadd_substitution(start_pos, template_template_param);\n+\t\t    // substitution: \"<template-template-param>\".\n+\t\tif (!decode_template_args(prefix))\n+\t\t{\n+\t\t  failure = true;\n+\t\t  break;\n+\t\t}\n+\t      }\n+\t      if (!recursive_template_param_or_substitution_call\n+\t\t  && qualifiers->suppressed())\n+\t      {\n+\t\tadd_substitution(start_pos, type);\n+\t\t    // substitution: \"<template-param>\" or\n+\t\t    // \"<template-template-param> <template-args>\".\n+\t\tqualifiers->decode_qualifiers(prefix, postfix);\n+\t\t    // substitution: all qualified types, if any.\n+\t      }\n+\t      break;\n+\t    case 'S':\n+\t      if (M_pos >= M_maxpos)\n+\t      {\n+\t\tfailure = true;\n+\t\tbreak;\n+\t      }\n+\t      if (M_str[M_pos + 1] != 't')\n+\t      {\n+\t\tif (!decode_substitution(prefix, qualifiers))\n+\t\t{\n+\t\t  failure = true;\n+\t\t  break;\n+\t\t}\n+\t\tif (current() == 'I')\n+\t\t{\n+\t\t  if (!decode_template_args(prefix))\n+\t\t  {\n+\t\t    failure = true;\n+\t\t    break;\n+\t\t  }\n+\t\t  if (!recursive_template_param_or_substitution_call\n+\t\t      && qualifiers->suppressed())\n+\t\t    add_substitution(start_pos, type);\n+\t\t\t// Substitution:\n+\t\t\t//   \"<template-template-param> <template-args>\".\n+\t\t}\n+\t\tif (!recursive_template_param_or_substitution_call\n+\t\t    && qualifiers->suppressed())\n+\t\t  qualifiers->decode_qualifiers(prefix, postfix);\n+\t\t      // Substitution: all qualified types, if any.\n+\t\tbreak;\n+\t      }\n+\t      /* Fall-through for St */\n+\t    case 'N':\n+\t    case 'Z':\n+\t    case '0':\n+\t    case '1':\n+\t    case '2':\n+\t    case '3':\n+\t    case '4':\n+\t    case '5':\n+\t    case '6':\n+\t    case '7':\n+\t    case '8':\n+\t    case '9':\n+\t      // <Q><T>      \t\t==> T Q\n+\t      //     substitutions: \"<T>\" (<T> recursive).\n+\t      if (!decode_class_enum_type(prefix))\n+\t      {\n+\t\tfailure = true;\n+\t\tbreak;\n+\t      }\n+\t      if (!recursive_template_param_or_substitution_call)\n+\t      {\n+\t\tadd_substitution(start_pos, type);\n+\t\t    // substitution: \"<class-enum-type>\".\n+\t\tqualifiers->decode_qualifiers(prefix, postfix);\n+\t\t    // substitution: all qualified types, if any.\n+\t      }\n+\t      else\n+\t\tqualifiers->printing_suppressed();\n+\t      break;\n+\t    default:\n+\t      // <Q><T>      \t\t==> T Q\n+\t      //     substitutions: \"<T>\" (<T> recursive).\n+\t      if (!decode_builtin_type(prefix))\n+\t      {\n+\t\tfailure = true;\n+\t\tbreak;\n+\t      }\n+\t      // If decode_type was called from decode_template_param then we\n+\t      // need to suppress calling qualifiers here in order to get a\n+\t      // substitution added anyway (for the <template-param>).\n+\t      if (!recursive_template_param_or_substitution_call)\n+\t\tqualifiers->decode_qualifiers(prefix, postfix);\n+\t      else\n+\t\tqualifiers->printing_suppressed();\n+\t      break;\n+\t  }\n+\t}\n+    decode_type_exit:\n+\t--M_inside_type;\n+\tif (!recursive_template_param_or_substitution_call)\n+\t  delete qualifiers;\n+\tif (failure)\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t_GLIBCPP_DEMANGLER_RETURN2;\n+      }\n+\n+    // <nested-name> ::= N [<CV-qualifiers>] <prefix> <unqualified-name> E\n+    //               ::= N [<CV-qualifiers>] <template-prefix> <template-args> E\n+    //\n+    // <prefix> ::= <prefix> <unqualified-name>\n+    //          ::= <template-prefix> <template-args>\n+    //          ::= # empty\n+    //          ::= <substitution>\n+    //\n+    // <template-prefix> ::= <prefix> <template unqualified-name>\n+    //                   ::= <substitution>\n+    //\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_nested_name(string_type& output,\n+\t\t\t\t\t     string_type& qualifiers)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_nested_name\");\n+\n+\tif (current() != 'N' || M_pos >= M_maxpos)\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\n+\t// <CV-qualifiers> ::= [r] [V] [K]  # restrict (C99), volatile, const\n+\tchar const* qualifiers_start = &M_str[M_pos + 1];\n+\tfor (char c = next(); c == 'K' || c == 'V' || c == 'r'; c = next());\n+\tfor (char const* qualifier_ptr = &M_str[M_pos - 1];\n+\t     qualifier_ptr >= qualifiers_start; --qualifier_ptr)\n+\t  switch(*qualifier_ptr)\n+\t  {\n+\t    case 'K':\n+\t      qualifiers += \" const\";\n+\t      break;\n+\t    case 'V':\n+\t      qualifiers += \" volatile\";\n+\t      break;\n+\t    case 'r':\n+\t      qualifiers += \" restrict\";\n+\t      break;\n+\t  }\n+\n+\tint number_of_prefixes = 0;\n+\tint substitution_start = M_pos;\n+\tfor(;;)\n+\t{\n+\t  ++number_of_prefixes;\n+\t  if (current() == 'S')\n+\t  {\n+\t    if (!decode_substitution(output))\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t  }\n+\t  else if (current() == 'I')\n+\t  {\n+\t    if (!decode_template_args(output))\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t    if (current() != 'E')\n+\t    {\n+\t      // substitution: \"<template-prefix> <template-args>\".\n+\t      add_substitution(substitution_start, nested_name_prefix,\n+\t\t  \t       number_of_prefixes);\n+\t    }\n+\t  }\n+\t  else\n+\t  {\n+\t    if (!decode_unqualified_name(output))\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t    if (current() != 'E')\n+\t    {\n+\t      // substitution: \"<prefix> <unqualified-name>\" or\n+\t      // \"<prefix> <template unqualified-name>\".\n+\t      add_substitution(substitution_start,\n+\t\t  (current() == 'I') ?  nested_name_template_prefix\n+\t\t                     : nested_name_prefix,\n+\t\t  number_of_prefixes);\n+\t    }\n+\t  }\n+\t  if (current() == 'E')\n+\t  {\n+\t    eat_current();\n+\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t  }\n+\t  if (current() != 'I')\n+\t    output += \"::\";\n+\t  else if (M_template_args_need_space)\n+\t    output += ' ';\n+\t  M_template_args_need_space = false;\n+\t}\n+\t_GLIBCPP_DEMANGLER_FAILURE;\n+      }\n+\n+    // <local-name> := Z <function encoding> E <entity name> [<discriminator>]\n+    //              := Z <function encoding> E s [<discriminator>]\n+    // <discriminator> := _ <non-negative number>\n+    //\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_local_name(string_type& output)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_local_name\");\n+\tif (current() != 'Z' || M_pos >= M_maxpos)\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\tif ((M_pos += decode_encoding(output, M_str + M_pos + 1,\n+\t\tM_maxpos - M_pos) + 1) < 0 || eat_current() != 'E')\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\toutput += \"::\";\n+\tif (current() == 's')\n+\t{\n+\t  eat_current();\n+\t  output += \"string literal\";\n+\t}\n+\telse\n+\t{\n+\t  string_type nested_name_qualifiers;\n+\t  if (!decode_name(output, nested_name_qualifiers))\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t  output += nested_name_qualifiers;\n+\t}\n+\tstring_type discriminator;\n+\tif (current() == '_' && next() != 'n' && !decode_number(discriminator))\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\t_GLIBCPP_DEMANGLER_RETURN;\n+      }\n+\n+    // <source-name> ::= <positive length number> <identifier>\n+    //\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_source_name(string_type& output)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_source_name\");\n+\tint length = current() - '0';\n+\tif (length < 1 || length > 9)\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\twhile(std::isdigit(next()))\n+\t  length = 10 * length + current() - '0';\n+\tchar const* ptr = &M_str[M_pos];\n+\tif (length > 11 && !strncmp(ptr, \"_GLOBAL_\", 8) && ptr[9] == 'N'\n+\t    && ptr[8] == ptr[10])\n+\t{\n+\t  output += \"(anonymous namespace)\";\n+\t  if ((M_pos += length) > M_maxpos + 1)\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t}\n+\telse\n+\t  while(length--)\n+\t  {\n+\t    if (current() == 0)\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t    output += eat_current();\n+\t  }\n+\t_GLIBCPP_DEMANGLER_RETURN;\n+      }\n+\n+    // <unqualified-name> ::= <operator-name>\t# Starts with lower case.\n+    //                    ::= <ctor-dtor-name>  # Starts with 'C' or 'D'.\n+    //                    ::= <source-name>   \t# Starts with a digit.\n+    //\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_unqualified_name(string_type& output)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_unqualified_name\");\n+\tif (std::isdigit(current()))\n+\t{\n+\t  if (!M_inside_template_args)\n+\t  {\n+\t    bool recursive_unqualified_name = (&M_function_name == &output);\n+\t    // This can be a recursive call when we are decoding\n+\t    // an <operator-name> that is a cast operator for a some\n+\t    // <unqualified-name>; for example \"operator Foo()\".\n+\t    // In that case this is thus not a ctor or dtor and we\n+\t    // are not interested in updating M_function_name.\n+\t    if (!recursive_unqualified_name)\n+\t      M_function_name.clear();\n+\t    M_name_is_template = false;\n+\t    M_name_is_cdtor = false;\n+\t    M_name_is_conversion_operator = false;\n+\t    if (!decode_source_name(M_function_name))\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t    if (!recursive_unqualified_name)\n+\t      output += M_function_name;\n+\t  }\n+\t  else if (!decode_source_name(output))\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t}\n+\tif (islower(current()))\n+\t{\n+\t  if (!M_inside_template_args)\n+\t  {\n+\t    M_function_name.clear();\n+\t    M_name_is_template = false;\n+\t    M_name_is_cdtor = false;\n+\t    M_name_is_conversion_operator = false;\n+\t    if (!decode_operator_name(M_function_name))\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t    output += M_function_name;\n+\t  }\n+\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t}\n+\tif (current() == 'C' || current() == 'D')\n+\t{\n+\t  if (M_inside_template_args)\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t  // <ctor-dtor-name> ::=\n+\t  //   C1\t# complete object (in-charge) constructor\n+\t  //   C2\t# base object (not-in-charge) constructor\n+\t  //   C3\t# complete object (in-charge) allocating constructor\n+\t  //   D0\t# deleting (in-charge) destructor\n+\t  //   D1\t# complete object (in-charge) destructor\n+\t  //   D2\t# base object (not-in-charge) destructor\n+\t  //\n+\t  if (current() == 'C')\n+\t  {\n+\t    char c = next();\n+\t    if (c < '1' || c > '3')\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t  }\n+\t  else\n+\t  {\n+\t    char c = next();\n+\t    if (c < '0' || c > '2')\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t    output += '~';\n+\t    M_saw_destructor = true;\n+\t  }\n+\t  M_name_is_cdtor = true;\n+\t  eat_current();\n+\t  output += M_function_name;\n+\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t}\n+\t_GLIBCPP_DEMANGLER_FAILURE;\n+      }\n+\n+    // <unscoped-name> ::=\n+    //   <unqualified-name>\t\t# Starts not with an 'S'\n+    //   St <unqualified-name>\t# ::std::\n+    //\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_unscoped_name(string_type& output)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_unscoped_name\");\n+\tif (current() == 'S')\n+\t{\n+\t  if (next() != 't')\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t  eat_current();\n+\t  output += \"std::\";\n+\t}\n+\tdecode_unqualified_name(output);\n+\t_GLIBCPP_DEMANGLER_RETURN;\n+      }\n+\n+    // <name> ::=\n+    //   <nested-name>\t\t\t\t# Starts with 'N'\n+    //   <unscoped-template-name> <template-args> # idem\n+    //   <local-name>\t\t\t\t# Starts with 'Z'\n+    //   <unscoped-name>\t\t\t# Starts with 'S', 'C', 'D',\n+    //   \t\t\t\t\t# a digit or a lower case\n+    //   \t\t\t\t\t# character.\n+    //\n+    // <unscoped-template-name> ::= <unscoped-name>\n+    //                          ::= <substitution>\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_name(string_type& output,\n+\t\t\t\t      string_type& nested_name_qualifiers)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_name\");\n+\tint substitution_start = M_pos;\n+\tif (current() == 'S' && (M_pos >= M_maxpos || M_str[M_pos + 1] != 't'))\n+\t{\n+\t  if (!decode_substitution(output))\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t}\n+\telse if (current() == 'N')\n+\t{\n+\t  decode_nested_name(output, nested_name_qualifiers);\n+\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t}\n+\telse if (current() == 'Z')\n+\t{\n+\t  decode_local_name(output);\n+\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t}\n+\telse if (!decode_unscoped_name(output))\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\tif (current() == 'I')\n+\t{\n+\t  // Must have been an <unscoped-template-name>.\n+\t  add_substitution(substitution_start, unscoped_template_name);\n+\t  if (!decode_template_args(output))\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t}\n+\tM_template_args_need_space = false;\n+\t_GLIBCPP_DEMANGLER_RETURN;\n+      }\n+\n+    // <call-offset> ::= h <nv-offset> _\n+    //               ::= v <v-offset> _\n+    // <nv-offset>   ::= <offset number> \n+    //     non-virtual base override\n+    //\n+    // <v-offset>    ::= <offset number> _ <virtual offset number>\n+    //     virtual base override, with vcall offset\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_call_offset(string_type&\n+#if _GLIBCPP_DEMANGLER_CWDEBUG\n+\t  output\n+#endif\n+\t  )\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_call_offset\");\n+\tif (current() == 'h')\n+\t{\n+\t  string_type dummy;\n+\t  eat_current();\n+\t  if (decode_number(dummy) && current() == '_')\n+\t  {\n+\t    eat_current();\n+\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t  }\n+\t}\n+\telse if (current() == 'v')\n+\t{\n+\t  string_type dummy;\n+\t  eat_current();\n+\t  if (decode_number(dummy) && current() == '_')\n+\t  {\n+\t    eat_current();\n+\t    if (decode_number(dummy) && current() == '_')\n+\t    {\n+\t      eat_current();\n+\t      _GLIBCPP_DEMANGLER_RETURN;\n+\t    }\n+\t  }\n+\t}\n+\t_GLIBCPP_DEMANGLER_FAILURE;\n+      }\n+\n+    //\n+    // <special-name> ::=\n+    //   TV <type>\t\t\t# virtual table\n+    //   TT <type>\t\t\t# VTT structure (construction\n+    //                                    vtable index).\n+    //   TI <type>\t\t\t# typeinfo structure\n+    //   TS <type>\t\t\t# typeinfo name (null-terminated\n+    //                                    byte string).\n+    //   GV <object name>\t\t# Guard variable for one-time\n+    //   \t\t\t\t  initialization of static objects in\n+    //   \t\t\t\t  a local scope.\n+    //   T <call-offset> <base encoding># base is the nominal target function\n+    //   \t\t\t\t  of thunk.\n+    //   Tc <call-offset> <call-offset> <base encoding> # base is the nominal\n+    //                                    target function of thunk; first\n+    //                                    call-offset is 'this' adjustment;\n+    //\t\t\t\t\t  second call-offset is result\n+    //\t\t\t\t\t  adjustment\n+    //\n+    template<typename Allocator>\n+      bool\n+      session<Allocator>::decode_special_name(string_type& output)\n+      {\n+\t_GLIBCPP_DEMANGLER_DOUT_ENTERING(\"decode_special_name\");\n+\tif (current() == 'G')\n+\t{\n+\t  if (next() != 'V')\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t  output += \"guard variable for \";\n+\t  string_type nested_name_qualifiers;\n+\t  eat_current();\n+\t  if (!decode_name(output, nested_name_qualifiers))\n+\t    _GLIBCPP_DEMANGLER_FAILURE;\n+\t  output += nested_name_qualifiers;\n+\t  _GLIBCPP_DEMANGLER_RETURN;\n+\t}\n+\telse if (current() != 'T')\n+\t  _GLIBCPP_DEMANGLER_FAILURE;\n+\tswitch(next())\n+\t{\n+\t  case 'V':\n+\t    output += \"vtable for \";\n+\t    eat_current();\n+\t    decode_type(output);\n+\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t  case 'T':\n+\t    output += \"VTT for \";\n+\t    eat_current();\n+\t    decode_type(output);\n+\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t  case 'I':\n+\t    output += \"typeinfo for \";\n+\t    eat_current();\n+\t    decode_type(output);\n+\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t  case 'S':\n+\t    output += \"typeinfo name for \";\n+\t    eat_current();\n+\t    decode_type(output);\n+\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t  case 'c':\n+\t    output += \"covariant return thunk to \";\n+\t    if (!decode_call_offset(output)\n+\t\t|| !decode_call_offset(output)\n+\t\t|| (M_pos += decode_encoding(output, M_str + M_pos,\n+\t\t    M_maxpos - M_pos + 1)) < 0)\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t  case 'C':\t\t// GNU extension?\n+\t  {\n+\t    string_type first;\n+\t    output += \"construction vtable for \";\n+\t    eat_current();\n+\t    if (!decode_type(first))\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t    while(std::isdigit(current()))\n+\t      eat_current();\n+\t    if (eat_current() != '_')\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t    if (!decode_type(output))\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t    output += \"-in-\";\n+\t    output += first;\n+\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t  }\n+\t  default:\n+\t    if (current() == 'v')\n+\t      output += \"virtual thunk to \";\n+\t    else\n+\t      output += \"non-virtual thunk to \";\n+\t    if (!decode_call_offset(output)\n+\t\t|| (M_pos += decode_encoding(output, M_str + M_pos,\n+\t\t    M_maxpos - M_pos + 1)) < 0)\n+\t      _GLIBCPP_DEMANGLER_FAILURE;\n+\t    _GLIBCPP_DEMANGLER_RETURN;\n+\t}\n+      }\n+\n+    // <encoding> ::=\n+    //   <function name> <bare-function-type>\t# Starts with 'C', 'D', 'N',\n+    //                                        \t  'S', a digit or a lower case\n+    //                                        \t  character.\n+    //   <data name>\t\t\t\t# Idem.\n+    //   <special-name>\t\t\t\t# Starts with 'T' or 'G'.\n+    template<typename Allocator>\n+      int\n+      session<Allocator>::decode_encoding(string_type& output,\n+\t\t\t\t\t  char const* in,\n+\t\t\t\t\t  int len)\n+      {\n+#if _GLIBCPP_DEMANGLER_CWDEBUG\n+\t_GLIBCPP_DEMANGLER_DOUT(dc::demangler,\n+\t    \"Output thus far: \\\"\" << output << '\"');\n+\tstring_type input(in, len > 0x40000000 ? strlen(in) : len);\n+\t_GLIBCPP_DEMANGLER_DOUT(\n+\t    dc::demangler, \"Entering decode_encoding(\\\"\" << input << \"\\\")\");\n+#endif\n+\tif (len <= 0)\n+\t  return INT_MIN;\n+\tsession<Allocator> demangler_session(in, len);\n+\tstring_type nested_name_qualifiers;\n+\tint saved_pos;\n+\tdemangler_session.store(saved_pos);\n+\tif (demangler_session.decode_special_name(output))\n+\t  return demangler_session.M_pos;\n+\tdemangler_session.restore(saved_pos);\n+\tstring_type name;\n+\tif (!demangler_session.decode_name(name, nested_name_qualifiers))\n+\t  return INT_MIN;\n+\tif (demangler_session.current() == 0\n+\t    || demangler_session.current() == 'E')\n+\t{\n+\t  output += name;\n+\t  output += nested_name_qualifiers;\n+\t  return demangler_session.M_pos;\n+\t}\n+\t// Must have been a <function name>.\n+\tif (demangler_session.M_name_is_template\n+\t    && !(demangler_session.M_name_is_cdtor\n+\t         || demangler_session.M_name_is_conversion_operator))\n+\t{\n+\t  if (!demangler_session.decode_type(output))\n+\t      // Return type of function\n+\t    return INT_MIN;\n+\t  output += ' ';\n+\t}\n+\toutput += name;\n+\tif (!demangler_session.decode_bare_function_type(output))\n+\t  return INT_MIN;\n+\toutput += nested_name_qualifiers;\n+\treturn demangler_session.M_pos;\n+      }\n+\n+    } // namespace demangler\n+\n+  // Public interface\n+  template<typename Allocator>\n+    struct demangle\n+    {\n+      typedef Allocator allocator_type;\n+      typedef std::basic_string<char, std::char_traits<char>, Allocator> \n+\t  string_type;\n+      static string_type symbol(char const* in);\n+      static string_type type(char const* in);\n+    };\n+\n+  // demangle::symbol()\n+  //\n+  // Demangle `input' which should be a mangled function name as for\n+  // instance returned by nm(1).\n+  template<typename Allocator>\n+    std::basic_string<char, std::char_traits<char>, Allocator>\n+    demangle<Allocator>::symbol(char const* input)\n+    {\n+      // <mangled-name> ::= _Z <encoding>\n+      // <mangled-name> ::= _GLOBAL_ _<type>_ _Z <encoding>\t\t\n+      //                    <type> can be I or D (GNU extension)\n+      typedef demangler::session<Allocator> demangler_type;\n+      string_type result;\n+      bool failure = (input[0] != '_');\n+\n+      if (!failure)\n+      {\n+\tif (input[1] == 'G')\n+\t{\n+\t  if (!strncmp(input, \"_GLOBAL__\", 9)\n+\t      && (input[9] == 'D' || input[9] == 'I')\n+\t      && input[10] == '_' && input[11] == '_' && input[12] == 'Z')\n+\t  {\n+\t    if (input[9] == 'D')\n+\t      result.assign(\"global destructors keyed to \", 28);\n+\t    else\n+\t      result.assign(\"global constructors keyed to \", 29);\n+\t    int cnt = demangler_type::decode_encoding(result, input + 13,\n+\t\t\t\t\t\t      INT_MAX);\n+\t    if (cnt < 0 || input[cnt + 13] != 0)\n+\t      failure = true;\n+\t  }\n+\t  else\n+\t    failure = true;\n+\t}\n+\telse if (input[1] == 'Z')\n+\t{\n+\t  int cnt = demangler_type::decode_encoding(result, input + 2,\n+\t\t\t\t\t\t    INT_MAX);\n+\t  if (cnt < 0 || input[cnt + 2] != 0)\n+\t    failure = true;\n+\t}\n+\telse\n+\t  failure = true;\n+      }\n+\n+      // Failure to demangle, return the mangled name.\n+      if (failure)\n+\tresult.assign(input, strlen(input));\n+\n+      return result;\n+    }\n+\n+  // demangle::type()\n+  // Demangle `input' which must be a zero terminated mangled type\n+  // name as for instance returned by std::type_info::name().\n+  template<typename Allocator>\n+    std::basic_string<char, std::char_traits<char>, Allocator> \n+    demangle<Allocator>::type(char const* input)\n+    {\n+      std::basic_string<char, std::char_traits<char>, Allocator> result;\n+      if (input == NULL)\n+\tresult = \"(null)\";\n+      else\n+      {\n+\tdemangler::session<Allocator> demangler_session(input, INT_MAX);\n+\tif (!demangler_session.decode_type(result)\n+\t    || demangler_session.remaining_input_characters())\n+\t{\n+\t  // Failure to demangle, return the mangled name.\n+\t  result = input;\t\t\t\t\n+\t}\n+      }\n+      return result;\n+    }\n+\n+} // namespace __gnu_cxx\n+\n+#endif // __DEMANGLE_H"}, {"sha": "3800860ca1efa505c3447782301fd462433a3bb4", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -121,6 +121,7 @@ sources = \\\n \tcomplex_io.cc \\\n \tconcept-inst.cc \\\n \tctype.cc \\\n+\tdemangle.cc \\\n \text-inst.cc \\\n \tfstream.cc \\\n \tfstream-inst.cc \\\n@@ -177,6 +178,13 @@ concept-inst.lo: concept-inst.cc\n concept-inst.o: concept-inst.cc\n \t$(CXXCOMPILE) -D_GLIBCPP_CONCEPT_CHECKS -fimplicit-templates -c $<\n \n+# Use special rules for the demangler, so that an additional implicit\n+# instantiation file is not necessary.\n+demangle.lo: demangle.cc\n+\t$(LTCXXCOMPILE) -fimplicit-templates -c $<\n+demangle.o: demangle.cc\n+\t$(CXXCOMPILE) -fimplicit-templates -c $<\n+\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually"}, {"sha": "4212497a4c69a633a562a2a2ce418931836386dc", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -203,6 +203,7 @@ sources = \\\n \tcomplex_io.cc \\\n \tconcept-inst.cc \\\n \tctype.cc \\\n+\tdemangle.cc \\\n \text-inst.cc \\\n \tfstream.cc \\\n \tfstream-inst.cc \\\n@@ -305,9 +306,9 @@ CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n libstdc___la_OBJECTS =  codecvt.lo complex_io.lo concept-inst.lo \\\n-ctype.lo ext-inst.lo fstream.lo fstream-inst.lo functexcept.lo \\\n-globals.lo io-inst.lo ios.lo istream-inst.lo limits.lo locale.lo \\\n-locale-inst.lo localename.lo misc-inst.lo ostream-inst.lo \\\n+ctype.lo demangle.lo ext-inst.lo fstream.lo fstream-inst.lo \\\n+functexcept.lo globals.lo io-inst.lo ios.lo istream-inst.lo limits.lo \\\n+locale.lo locale-inst.lo localename.lo misc-inst.lo ostream-inst.lo \\\n sstream-inst.lo stdexcept.lo stl-inst.lo streambuf-inst.lo \\\n string-inst.lo strstream.lo valarray-inst.lo wstring-inst.lo \\\n codecvt_members.lo collate_members.lo ctype_members.lo \\\n@@ -582,6 +583,13 @@ concept-inst.lo: concept-inst.cc\n concept-inst.o: concept-inst.cc\n \t$(CXXCOMPILE) -D_GLIBCPP_CONCEPT_CHECKS -fimplicit-templates -c $<\n \n+# Use special rules for the demangler, so that an additional implicit\n+# instantiation file is not necessary.\n+demangle.lo: demangle.cc\n+\t$(LTCXXCOMPILE) -fimplicit-templates -c $<\n+demangle.o: demangle.cc\n+\t$(CXXCOMPILE) -fimplicit-templates -c $<\n+\n # Added bits to build debug library.\n @GLIBCPP_BUILD_DEBUG_TRUE@all-local: build_debug\n @GLIBCPP_BUILD_DEBUG_TRUE@install-data-local: install_debug"}, {"sha": "93956502070f123b31c58e906e4ab6c5610c7011", "filename": "libstdc++-v3/src/demangle.cc", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Fsrc%2Fdemangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Fsrc%2Fdemangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdemangle.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,170 @@\n+// C++ IA64 / g++ v3 demangler  -*- C++ -*-\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Written by Carlo Wood <carlo@alinoe.com>\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cxxabi.h>\n+#include \"demangle.h\"\n+\n+// __cxa_demangle\n+//\n+// Demangle a C++ symbol or type name.\n+//\n+// `mangled-name' is a pointer to a null-terminated array of characters.\n+// It may be either an external name, i.e. with a \"_Z\" prefix, or an\n+// internal NTBS mangling, e.g. of a type for type_info.\n+//\n+// `buf' may be null.  If it is non-null, then n must also be non-null,\n+// and buf is a pointer to an array, of at least *n characters, that\n+// was allocated using malloc.\n+//\n+// `status' points to an int that is used as an error indicator. It is\n+// permitted to be null, in which case the user just doesn't get any\n+// detailed error information. \n+//\n+// Returns: a pointer to a null-terminated array of characters, the\n+//          demangled name.  Or NULL in case of failure.\n+//\n+// If there is an error in demangling, the return value is a null pointer.\n+// The user can examine *status to find out what kind of error occurred.\n+// Meaning of error indications:\n+//\n+//     *  0: success\n+//     * -1: memory allocation failure\n+//     * -2: invalid mangled name\n+//     * -3: invalid arguments (e.g. buf nonnull and n null) \n+//\n+\n+namespace __cxxabiv1 \n+{\n+  namespace \n+  {\n+    char* const error = 0;\n+\n+    enum status_codes \n+    {\n+      success = 0,\n+      memory_allocation_failure = -1,\n+      invalid_mangled_name = -2,\n+      invalid_argument = -3\n+    };\n+\n+    inline char*\n+    failure(status_codes error_code, int* status)\n+    {\n+      if (status)\n+\t*status = error_code;\n+      return error;\n+    }\n+\n+    char*\n+    finish(char const* demangled_name, size_t demangled_name_size,\n+\t   char* buf, size_t* n, int* status)\n+    {\n+      if (!buf || *n < demangled_name_size + 1)\n+      {\n+\tif (n)\n+\t  *n = demangled_name_size + 1;\n+\tbuf = (char*)realloc(buf, demangled_name_size + 1);\n+\tif (!buf)\n+\t  return failure(memory_allocation_failure, status);\n+      }\n+      if (status)\n+\t*status = success;\n+      std::strncpy(buf, demangled_name, demangled_name_size);\n+      buf[demangled_name_size] = 0;\n+      return buf;\n+    }\n+  } // namespace\n+\n+  char*\n+  __cxa_demangle(char const* mangled_name, char* buf, std::size_t* n, \n+\t\t int* status)\n+  {\n+    using namespace __gnu_cxx;\n+    typedef demangler::session<std::allocator<char> > session_type;\n+\n+    if (!mangled_name || (buf && !n))\n+      return failure(invalid_argument, status);\n+\n+    std::string result;\n+    if (mangled_name[0] == '_')\t\t\n+    {\n+      // External name?\n+      if (mangled_name[1] == 'Z')\t\t\n+      {\n+\t// C++ name?\n+\tint cnt = session_type::\n+\t    decode_encoding(result, mangled_name + 2, INT_MAX);\n+\tif (cnt < 0 || mangled_name[cnt + 2] != 0)\n+\t  return failure(invalid_mangled_name, status);\n+\treturn finish(result.data(), result.size(), buf, n, status);\n+      }\n+      else if (mangled_name[1] == 'G')\t\n+      {\n+\t// Possible _GLOBAL__ extension?\n+\tif (!std::strncmp(mangled_name, \"_GLOBAL__\", 9) \n+\t    && (mangled_name[9] == 'D' || mangled_name[9] == 'I')\n+\t    && mangled_name[10] == '_' && mangled_name[11] == '_' \n+\t    && mangled_name[12] == 'Z')\n+\t{\n+\t  if (mangled_name[9] == 'D')\n+\t    result.assign(\"global destructors keyed to \", 28);\n+\t  else\n+\t    result.assign(\"global constructors keyed to \", 29);\n+\t  int cnt = session_type::\n+\t      decode_encoding(result, mangled_name + 13, INT_MAX);\n+\t  if (cnt < 0 || mangled_name[cnt + 13] != 0)\n+\t    return failure(invalid_mangled_name, status);\n+\t  return finish(result.data(), result.size(), buf, n, status);\n+\t}\n+      }\n+    }\n+\n+    // Ambiguities are possible between extern \"C\" object names and\n+    // internal built-in type names, e.g. \"i\" may be either an object\n+    // named \"i\" or the built-in \"int\" type.  Such ambiguities should\n+    // be resolved to user names over built-in names.  Builtin types\n+    // are any single lower case character.  Any other single\n+    // character is not a mangled type so we can treat those the same\n+    // here.\n+    if (mangled_name[1] == 0)\n+      return finish(mangled_name, 1, buf, n, status);\n+\n+    // Not a built-in type or external name, try to demangle input as\n+    // NTBS mangled type name.\n+    session_type demangler_session(mangled_name, INT_MAX);\n+    if (!demangler_session.decode_type(result) \n+\t|| demangler_session.remaining_input_characters())\n+    {\n+      // Failure to demangle, assume extern \"C\" name.\n+      result = mangled_name;\t\t\n+    }\n+    return finish(result.data(), result.size(), buf, n, status);\n+  }\n+} // namespace __cxxabiv1"}, {"sha": "8ce9ee3da4c867cf27cc3e42b0977ecf91b97c32", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/01.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F01.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,37 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // extern \"C\" function \n+  // extern \"C\" float f(void) { };\n+  // T f\n+  verify_demangle(\"f\", \"f\");\n+\n+  return 0;\n+}"}, {"sha": "44558e1faed7dcedca525e398d5b19e91353f914", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/02.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F02.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F02.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F02.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,37 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // or variable \"f\" \n+  // int f;\n+  // B f\n+  verify_demangle(\"f\", \"f\");  \n+\n+  return 0;\n+}"}, {"sha": "f807189fb09d8c9de4cc38b7f5d5275599b2ee19", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/03.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F03.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,41 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+ // or a global namespace variable \"f\"\n+  /*\n+    namespace f\n+    {\n+    int f;\n+    }\n+  */\n+  verify_demangle(\"_ZN1f1fE\", \"f::f\");\n+\n+  return 0;\n+}"}, {"sha": "7705d8d71174f11ad41a13296a6402a01e44457d", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/04.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F04.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F04.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F04.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,37 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // void f() { };\n+  // int  f() { };\n+  // verify_demangle(\"_Z1fv\", \"f(void)\");\n+  verify_demangle(\"_Z1fv\", \"f()\");\n+\n+  return 0;\n+}"}, {"sha": "927b7e11d49465b8f12d327dd1b585707995f9ed", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/05.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F05.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F05.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F05.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,36 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // void f(int) { };\n+  // int  f(int) { };\n+  verify_demangle(\"_Z1fi\", \"f(int)\");\n+\n+  return 0;\n+}"}, {"sha": "47f07a3096fbe5fc99c7b9a66202f247c5f4f7d0", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/06.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F06.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F06.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F06.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,36 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // class bar { };\n+  // void foo(bar) { };\n+  verify_demangle(\"_Z3foo3bar\", \"foo(bar)\");\n+\n+  return 0;\n+}"}, {"sha": "e73c3dd5b93b975992971d47da5cfa1cf51f19a7", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/07.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F07.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F07.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F07.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,36 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // class X { };\n+  // int operator%(X, X) { };\n+  verify_demangle(\"_Zrm1XS_\", \"operator%(X, X)\");\n+\n+  return 0;\n+}"}, {"sha": "74394dc00bda7888b26e56770068aa33a34c8971", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/08.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F08.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F08.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F08.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,35 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+ // int operator+(X&, X&) { };\n+  verify_demangle(\"_ZplR1XS0_\", \"operator+(X&, X&)\"); // XXX\n+\n+  return 0;\n+}"}, {"sha": "8e56b104ab276cef9141e57d3c5ef5441adb5ada", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/09.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F09.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F09.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F09.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,35 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // int operator<< (X const&, X const&) { };\n+  verify_demangle(\"_ZlsRK1XS1_\", \"operator<<(X const&, X const&)\");\n+\n+  return 0;\n+}"}, {"sha": "597e83bbae8b723eb0fa376a785f788f8acd8769", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/10.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F10.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,40 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  /*\n+    template<typename T> \n+      class Foo \n+      { static int bar; };\n+    int Foo<int[4]>::bar;\n+  */\n+  verify_demangle(\"_ZN3FooIA4_iE3barE\", \"Foo<int[4]>::bar\");\n+\n+  return 0;\n+}"}, {"sha": "7201afbee5509f69d70dac6e71540f969eec67aa", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/11.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F11.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,38 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // template<typename T> void f(int) { }\n+  // template void f<int>(int);\n+  // NB: the return type is always explicitly encoded for template\n+  // functions taking parameters.\n+  verify_demangle(\"_Z1fIiEvi\", \"void f<int>(int)\");\n+\n+  return 0;\n+}"}, {"sha": "c0c31a21f595fa5d05f81f9d06b3f70536dd9939", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/12.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F12.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,39 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  /*\n+    class Duo { };\n+    template<typename T> void first(Duo) { }\n+    template void first<Duo>(Duo);\n+  */\n+  verify_demangle(\"_Z5firstI3DuoEvS0_\", \"void first<Duo>(Duo)\");\n+\n+  return 0;\n+}"}, {"sha": "43aae1f34b36193182f6c478910a93f04916b022", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/13.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F13.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F13.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F13.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,39 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  /*\n+    class Duo { };\n+    template<typename T> void first(T obj) { }\n+    template void first(Duo);\n+  */\n+  verify_demangle(\"_Z5firstI3DuoEvT_\", \"void first<Duo>(Duo)\");\n+\n+  return 0;\n+}"}, {"sha": "4bb70f643e085d05ee60014cdc29bc4b46333842", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/14.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F14.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,40 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  /*\n+    typedef void fun(double);\n+    template<typename I, typename T, typename J> void foo() { }\n+    template void foo<int, fun, int>();\n+  */\n+  //demangle(\"_Z3fooIiPFidEiEvv\", \"void foo<int, int (*)(double), int>(void)\");\n+  verify_demangle(\"_Z3fooIiFvdEiEvv\", \"void foo<int, void ()(double), int>()\");\n+\n+  return 0;\n+}"}, {"sha": "b79f1cc859e51bdd12124f409e846bd9b179f148", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/15.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F15.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F15.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F15.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,40 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  /* \n+     namespace N\n+     {\n+     int f;\n+     }\n+  */\n+  verify_demangle(\"_ZN1N1fE\", \"N::f\");\n+\n+  return 0;\n+}"}, {"sha": "5afc643a304ee602d2605fcb8e4f53be2ea038ed", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/16.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F16.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F16.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F16.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,46 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  /*\n+    namespace System\n+    {\n+    struct Sound\n+    {\n+    int beep();\n+    };\n+    \n+    int Sound::beep() { };\n+    }\n+  */\n+  // verify_demangle(\"_ZN6System5Sound4beepEv\", \"System::Sound::beep(void)\");\n+  verify_demangle(\"_ZN6System5Sound4beepEv\", \"System::Sound::beep()\");\n+\n+  return 0;\n+}"}, {"sha": "e9ce10586736d40953e0528296cef4494e3a964a", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/17.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F17.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,40 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  /* \n+     namespace Arena\n+     {\n+     int level;\n+     }\n+  */\n+  verify_demangle(\"_ZN5Arena5levelE\", \"Arena::level\");\n+\n+  return 0;\n+}"}, {"sha": "847568ca89c7759f808d3296ee57c81675104366", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/18.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F18.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F18.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F18.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,42 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+ /*\n+    template<typename T1, typename T2> struct Stack\n+    {\n+    static int level;\n+    int return_level() { return level; }\n+    };\n+    template struct Stack<int, int>;\n+  */\n+  verify_demangle(\"_ZN5StackIiiE5levelE\", \"Stack<int, int>::level\");\n+\n+  return 0;\n+}"}, {"sha": "f70a389f5bc893000c4a9e3c0e04255706a0c495", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/19.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F19.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F19.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F19.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,34 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  verify_demangle(\"_Z1fI1XEvPVN1AIT_E1TE\", \"void f<X>(A<X>::T volatile*)\");\n+\n+  return 0;\n+}"}, {"sha": "995171574372fb0fc8dddbcf2e6e4139ef29d67e", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/20.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F20.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,35 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  verify_demangle(\"_ZngILi42EEvN1AIXplT_Li2EEE1TE\", \n+       \"void operator-<42>(A<(42) + (2)>::T)\");\n+\n+  return 0;\n+}"}, {"sha": "debeb790fd2a0967ba9aa0afdd101269b2e00441", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/21.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F21.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F21.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F21.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,35 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  verify_demangle(\"_Z4makeI7FactoryiET_IT0_Ev\", \n+\t\t  \"Factory<int> make<Factory, int>()\");\n+\n+  return 0;\n+}"}, {"sha": "debeb790fd2a0967ba9aa0afdd101269b2e00441", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/22.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F22.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F22.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F22.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,35 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  verify_demangle(\"_Z4makeI7FactoryiET_IT0_Ev\", \n+\t\t  \"Factory<int> make<Factory, int>()\");\n+\n+  return 0;\n+}"}, {"sha": "02f55a8cffcf89d702c375a0f23945a7983c1131", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/23.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F23.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F23.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F23.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,34 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  verify_demangle(\"_Z3foo5Hello5WorldS0_S_\", \n+\t\t  \"foo(Hello, World, World, Hello)\");\n+  return 0;\n+}"}, {"sha": "e200574e873bea5451ea2bd73287398207816f0c", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/24.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F24.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F24.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F24.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,34 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  verify_demangle(\"_Z3fooPM2ABi\", \"foo(int AB::**)\");\n+\n+  return 0;\n+}"}, {"sha": "04ba05bad96ecbe5e6f0a8ad412ebefd936d262c", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/25.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F25.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F25.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F25.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,39 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // Equivalent \n+  // uncompressed, cp-dem\n+  //  verify_demangle(\"_ZlsRSoRKSs\", \"operator<<(std::basic_ostream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\");\n+  // compressed (good!), new __cxa_demangle\n+  verify_demangle(\"_ZlsRSoRKSs\", \n+\t\t  \"operator<<(std::ostream&, std::string const&)\");\n+\n+  return 0;\n+}"}, {"sha": "075a80515cb4f516f471bc049680832079e1de70", "filename": "libstdc++-v3/testsuite/demangle/abi_examples/26.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F26.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F26.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_examples%2F26.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,34 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  verify_demangle(\"_ZTI7a_class\", \"typeinfo for a_class\");\n+\n+  return 0;\n+}"}, {"sha": "f26ec7c615edc69f5c87fd5de830635fbb5f9f09", "filename": "libstdc++-v3/testsuite/demangle/abi_text/01.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F01.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,42 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Examples given in the IA64 C++ ABI \n+// http://www.codesourcery.com/cxx-abi/abi-examples.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  //  5.1.5 Type encodings.\n+  // int* volatile const restrict _far p;\n+  // cplus-dem FAIL\n+  // icc CORE\n+  // Equivalent as considered order-insensitive.\n+  // standard text\n+  // verify_demangle(\"U4_farrVKPi\", \"int* volatile const restrict _far\");\n+  // new __cxa_demangle\n+  verify_demangle(\"U4_farrVKPi\", \"int* restrict volatile const _far\");\n+\n+  return 0;\n+}"}, {"sha": "210ad98e687b556d35852881ba20eae9147d6e8d", "filename": "libstdc++-v3/testsuite/demangle/abi_text/02.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F02.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F02.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F02.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,42 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Specific examples mentioned in the IA64 C++ ABI text\n+// http://www.codesourcery.com/cxx-abi/abi.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // template<int I> void foo (int (&)[I + 1]) { };\n+  // template void foo<2> (int (&)[3]);    \n+  // Equivalent, but formatting difference in void argument and parentheses.\n+  // icc, __cxa_demangle\n+  verify_demangle(\"_Z3fooILi2EEvRAplT_Li1E_i\", \n+\t\t  \"void foo<2>(int (&) [(2) + (1)])\");\n+  // cplus-dem\n+  // verify_demangle(\"_Z3fooILi2EEvRAplT_Li1E_i\", \n+  //      \"void foo<(int)2>(int (&) [((int)2)+((int)1)])\");\n+\n+  return 0;\n+}"}, {"sha": "678fd287244464c0949972d2165a80497eb37f01", "filename": "libstdc++-v3/testsuite/demangle/abi_text/03.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F03.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,39 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Specific examples mentioned in the IA64 C++ ABI text\n+// http://www.codesourcery.com/cxx-abi/abi.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // struct A;\n+  // void f (void (A::*)() const) {}\n+  // cplus-dem FAIL\n+  // Equivalent, but formatting difference in void argument.\n+  verify_demangle(\"_Z1fM1AKFvvE\", \"f(void (A::*)() const)\");\n+  // verify_demangle(\"_Z1fM1AKFvvE\", \"f(void (A::*)(void) const)\");\n+\n+  return 0;\n+}"}, {"sha": "66f739fffc2dad009d3604d7b92e7d46312b7193", "filename": "libstdc++-v3/testsuite/demangle/abi_text/04.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F04.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F04.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F04.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,35 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Specific examples mentioned in the IA64 C++ ABI text\n+// http://www.codesourcery.com/cxx-abi/abi.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // void foo(char);\n+  verify_demangle(\"_Z3fooc\", \"foo(char)\"); \n+\n+  return 0;\n+}"}, {"sha": "ddada2cdbb3c785de9d543230a7abbd3cced7dab", "filename": "libstdc++-v3/testsuite/demangle/abi_text/05.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F05.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F05.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F05.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,39 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Specific examples mentioned in the IA64 C++ ABI text\n+// http://www.codesourcery.com/cxx-abi/abi.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // void foo(char);\n+  // template<void (&)(char)> struct CB { };\n+  // CB<foo> obj;\n+  // cplus-dem FAIL\n+  // standard text FAIL \"CB<foo>\"\n+  verify_demangle(\"2CBIL_Z3foocEE\", \"CB<foo(char)>\");\n+\n+  return 0;\n+}"}, {"sha": "01b09b407c6053b808621b62024d7aabae831cd5", "filename": "libstdc++-v3/testsuite/demangle/abi_text/06.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F06.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F06.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F06.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,38 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Specific examples mentioned in the IA64 C++ ABI text\n+// http://www.codesourcery.com/cxx-abi/abi.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // extern \"C\" bool IsEmpty(char *); \n+  // template<void (&)(char *)> struct CB;\n+  // CB<IsEmpty> is mangled as \n+  // cplus-dem FAIL\n+   verify_demangle(\"2CBIL_Z7IsEmptyEE\", \"CB<IsEmpty>\");\n+\n+  return 0;\n+}"}, {"sha": "2005dde6bafb5dff855319bfc090c8ee515f8acd", "filename": "libstdc++-v3/testsuite/demangle/abi_text/07.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F07.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F07.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F07.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,53 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Specific examples mentioned in the IA64 C++ ABI text\n+// http://www.codesourcery.com/cxx-abi/abi.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // 5.1.6 Scope Encoding \n+  /*\n+  namespace N \n+  {\n+    inline char* \n+    f(int i) \n+    {\n+      static char *p = \"Itanium C++ ABI\";  // p = 1, \"...\" = 2\n+      {  \n+\tstruct X \n+\t{                      // X = 3\n+\t  void g() {}\n+\t};   \n+      }\n+      return p[i];\n+    }\n+  }\n+  */\n+  // encoding of N::f::p (first local mangled entity)\n+  verify_demangle(\"_ZZN1N1fEiE1p\", \"N::f(int)::p\");\n+\n+  return 0;\n+}"}, {"sha": "f85ef43842949a8659e78fce10605be074cd29cb", "filename": "libstdc++-v3/testsuite/demangle/abi_text/08.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F08.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F08.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F08.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,35 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Specific examples mentioned in the IA64 C++ ABI text\n+// http://www.codesourcery.com/cxx-abi/abi.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // encoding of N::f::\"Itanium C++ ABI\" (no discriminator)\n+  verify_demangle(\"_ZZN1N1fEiEs\", \"N::f(int)::string literal\");\n+\n+  return 0;\n+}"}, {"sha": "66f03076f2aae705d27fcbb10cdb466c5c5fedb2", "filename": "libstdc++-v3/testsuite/demangle/abi_text/09.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F09.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F09.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F09.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,37 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Specific examples mentioned in the IA64 C++ ABI text\n+// http://www.codesourcery.com/cxx-abi/abi.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // encoding of N::f::X::g() \n+  // (third local mangled entity used as a class-qualifier) \n+  // cplus-dem FAIL\n+  // icc CORE\n+  verify_demangle(\"_ZNZN1N1fEiE1X1gE\", \"error code = -2: invalid mangled name\");\n+  return 0;\n+}"}, {"sha": "82f7392b23ed225307c007a9b1e41e5bc664aa30", "filename": "libstdc++-v3/testsuite/demangle/abi_text/10.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F10.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,35 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Specific examples mentioned in the IA64 C++ ABI text\n+// http://www.codesourcery.com/cxx-abi/abi.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  verify_demangle(\"_ZNZN1N1fEiE1X1gEv\", \n+\t\t  \"error code = -2: invalid mangled name\");\n+\n+  return 0;\n+}"}, {"sha": "7eed78762bf538f1accc439c59058a01beae83a3", "filename": "libstdc++-v3/testsuite/demangle/abi_text/11.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F11.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,42 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Specific examples mentioned in the IA64 C++ ABI text\n+// http://www.codesourcery.com/cxx-abi/abi.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // 5.1.7 Compression.\n+  // typedef void T();\n+  // struct S {};\n+  // void f(T*, T (S::*)) { }\n+  // Equivalent, void variance.\n+  // standard text, not possible\n+  // verify_demangle(\"_Z1fPFvvEM1SFvvE\", \"void f(T*, T (S::*))\");\n+  verify_demangle(\"_Z1fPFvvEM1SFvvE\", \"f(void (*)(), void (S::*)())\");\n+  // demangle(\"_Z1fPFvvEM1SFvvE\", \"f(void (*)(void), void (S::*)(void))\");\n+\n+  return 0;\n+}"}, {"sha": "25c92c54daf59a54ca957099bbe5f81af28cabd1", "filename": "libstdc++-v3/testsuite/demangle/abi_text/12.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F12.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,36 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Specific examples mentioned in the IA64 C++ ABI text\n+// http://www.codesourcery.com/cxx-abi/abi.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // N::T<int, int>::mf(N::T<double, double>)\n+  verify_demangle(\"_ZN1N1TIiiE2mfES0_IddE\", \n+\t\t  \"N::T<int, int>::mf(N::T<double, double>)\");\n+\n+  return 0;\n+}"}, {"sha": "63a64e0d47d9e3cb86b946a3cb29444c888e778d", "filename": "libstdc++-v3/testsuite/demangle/abi_text/13.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F13.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F13.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F13.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,35 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Specific examples mentioned in the IA64 C++ ABI text\n+// http://www.codesourcery.com/cxx-abi/abi.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // std::state\n+  verify_demangle(\"_ZSt5state\", \"std::state\"); \n+\n+  return 0;\n+}"}, {"sha": "358c6e1a6337020517efafa8ba639c20fba8b954", "filename": "libstdc++-v3/testsuite/demangle/abi_text/14.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fabi_text%2F14.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,35 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// Specific examples mentioned in the IA64 C++ ABI text\n+// http://www.codesourcery.com/cxx-abi/abi.html#mangling\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // std::_In::ward\n+  verify_demangle(\"_ZNSt3_In4wardE\", \"std::_In::ward\");\n+\n+  return 0;\n+}"}, {"sha": "6e7d702c289f8bb946995d631121279a8c89189e", "filename": "libstdc++-v3/testsuite/demangle/regression/3111-1.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F3111-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F3111-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F3111-1.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,33 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// c++/3111\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  verify_demangle(\"_Z1fKPFiiE\", \"f(int (* const)(int))\");\n+\n+  return 0;\n+}"}, {"sha": "fe6ceb3abed85e1ecd32a919e9d3988a2d339181", "filename": "libstdc++-v3/testsuite/demangle/regression/3111-2.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F3111-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F3111-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F3111-2.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,38 @@\n+// 2003-02-26  Carlo Wood  <carlo@alinoe.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// c++/3111\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // cplus-dem FAIL\n+  // icc FAIL\n+  // verify_demangle(\"_Z1fAszL_ZZNK1N1A1fEvE3foo_0E_i\", \n+  //       \"f(int[sizeof(N::A::f() const::foo())])\");\n+  verify_demangle(\"_Z1fAszL_ZZNK1N1A1fEvE3foo_0E_i\", \n+\t\t  \"f(int[sizeof(N::A::f() const::foo)])\");\n+\n+  return 0;\n+}"}, {"sha": "f05f097fe2f6d8e1a426a78347bdda1d1ef5caca", "filename": "libstdc++-v3/testsuite/demangle/regression/7986-01.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-01.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,33 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7986\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  // cplus-dem FAIL\n+  verify_demangle(\"_Z1fA37_iPS_\", \"f(int[37], int (*) [37])\");\n+\n+  return 0;\n+}"}, {"sha": "ae9d945cb01ceba249fb3fabc6368fffe247e933", "filename": "libstdc++-v3/testsuite/demangle/regression/7986-02.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-02.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-02.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-02.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,35 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7986\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // Equivalent, but formatting difference in void argument.\n+  //  verify_demangle(\"_Z1fM1AFivEPS0_\", \"f(int (A::*)(void), int (*)(void))\");\n+  verify_demangle(\"_Z1fM1AFivEPS0_\", \"f(int (A::*)(), int (*)())\");\n+\n+  return 0;\n+}"}, {"sha": "2596f9aa161a720a32d464e9a4efa98d569d31af", "filename": "libstdc++-v3/testsuite/demangle/regression/7986-03.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-03.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,34 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7986\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // cplus-dem FAIL\n+  verify_demangle(\"_Z1fPFPA1_ivE\", \"f(int (*(*)()) [1])\");\n+\n+  return 0;\n+}"}, {"sha": "23d1f1f9cd631ad93ae92ad2fc8546a6dc458246", "filename": "libstdc++-v3/testsuite/demangle/regression/7986-04.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-04.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-04.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-04.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,34 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7986\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // cplus-dem FAIL\n+  verify_demangle(\"_Z1fPKM1AFivE\", \"f(int (A::* const*)())\");\n+\n+  return 0;\n+}"}, {"sha": "b3393c903ff7824fcd5b40d350653d0e30fc3a3f", "filename": "libstdc++-v3/testsuite/demangle/regression/7986-05.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-05.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-05.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-05.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,34 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7986\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // cplus-dem FAIL  \n+  verify_demangle(\"_Z1jM1AFivEPS1_\", \"j(int (A::*)(), int (A::**)())\");\n+\n+  return 0;\n+}"}, {"sha": "360c70c1cfee6af9101b589948c3bfe1963ff0b5", "filename": "libstdc++-v3/testsuite/demangle/regression/7986-06.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-06.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-06.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-06.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,34 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7986\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // cplus-dem FAIL\n+  verify_demangle(\"_Z1sPA37_iPS0_\", \"s(int (*) [37], int (**) [37])\");\n+\n+  return 0;\n+}"}, {"sha": "933c4c61e425124e2c4406dff1fdc25f7087fd64", "filename": "libstdc++-v3/testsuite/demangle/regression/7986-07.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-07.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-07.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-07.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,35 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7986\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+ // cplus-dem FAIL\n+  verify_demangle(\"_Z3fooA30_A_i\", \"foo(int[30][])\");\n+\n+\n+  return 0;\n+}"}, {"sha": "2080085651830715c5b32970fa39d4c932ab47b3", "filename": "libstdc++-v3/testsuite/demangle/regression/7986-08.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-08.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-08.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-08.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,34 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7986\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // cplus-dem FAIL\n+  verify_demangle(\"_Z3kooPA28_A30_i\", \"koo(int (*) [28][30])\");\n+\n+  return 0;\n+}"}, {"sha": "18a18b35c54a5b3f3b6c2f44fc669603060d868d", "filename": "libstdc++-v3/testsuite/demangle/regression/7986-09.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-09.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-09.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-09.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,40 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7986\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+ // cplus-dem FAIL\n+  // Equivalent as considered order-insensitive?\n+  // standard text, icc FAIL\n+  //  verify_demangle(\"_ZlsRKU3fooU4bart1XS0_\", \n+  //     \"operator<<(X const foo bart&, X const foo bart)\");\n+  // new __cxa_demangle\n+  verify_demangle(\"_ZlsRKU3fooU4bart1XS0_\", \n+\t\t  \"operator<<(X bart foo const&, X bart)\");\n+\n+  return 0;\n+}"}, {"sha": "ff7fa4c3a6cbdb2ebc2872f0836bb5ccbfc7c6fc", "filename": "libstdc++-v3/testsuite/demangle/regression/7986-10.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-10.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,34 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7986\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  verify_demangle(\"_ZlsRKU3fooU4bart1XS2_\", \n+\t\t  \"operator<<(X bart foo const&, X bart foo const)\");\n+\n+  return 0;\n+}"}, {"sha": "49114d2c8ac0300429cf8387e7217404dfeab3c9", "filename": "libstdc++-v3/testsuite/demangle/regression/7986-11.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-11.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,34 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7986\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // cplus-dem FAIL\n+  verify_demangle(\"_Z1fM1AKFivE\", \"f(int (A::*)() const)\");\n+\n+  return 0;\n+}"}, {"sha": "64a400f781fa4e2f58d0f2bd699a4ed9f5c07aaf", "filename": "libstdc++-v3/testsuite/demangle/regression/7986-12.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986-12.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,47 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7986\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // ICE on figmative float template parameters?\n+  /*\n+  demangle(\"_Z3absILd1c1f1496f8a44219EEvv\", \"void abs<3.14159e-173>()\");\n+  demangle(\"_Z3absILd40092acd9e83e426EEvv\", \"void abs<3.1459>()\");\n+  demangl(\"_Z3absILe08042191a6cc56a2fe117becEEvv\", \"void abs<1.234e-2345l>()\");\n+  demangle(\"_Z3absILf4016147bEEvv\", \"void abs<2.345f>()\");\n+  demangle(\"_Z3absILfc1800000EEvv\", \" void abs<-16f>()\");\n+  demangle(\"_Z3absILe804bfff8000000000000000EEvv\", \"void abs<-1l>()\");\n+  */\n+\n+  // template<int D> void abs(void) { };\n+  // template void abs<11>(void);\n+  // Equivalent, but formatting difference in void argument.\n+  // verify_demangle(\"_Z3absILi11EEvv\", \"void abs<(int)11>()\");\n+  verify_demangle(\"_Z3absILi11EEvv\", \"void abs<11>()\");\n+\n+  return 0;\n+}"}, {"sha": "05fa6a71c29414808db207b56fc8e2aa5efdcc2f", "filename": "libstdc++-v3/testsuite/demangle/regression/7986.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F7986.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,32 @@\n+// 2003-02-26  Carlo Wood  <carlo@alinoe.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libcwd tests\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+\n+  return 0;\n+}"}, {"sha": "f40b90f30f64c1b63a6b80abebd25c162c1def31", "filename": "libstdc++-v3/testsuite/demangle/regression/8897.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F8897.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F8897.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2F8897.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,61 @@\n+// 2003-02-26  Martin v. Loewis  <martin@v.loewis.de>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// c++/8897\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  /*\n+    template<typename T1>\n+      struct A \n+      {\n+        template<typename T2>\n+\t  operator T2();\n+      };\n+    \n+    A<float> a;\n+    (int)a;\t\t<-- that function.\n+  */\n+  /*  \n+      Using \"operator int()\" is ambigious because that\n+      could be either:\n+    \n+      operator int();\n+      \n+      or\n+      \n+      template<typename T>\n+      operator T();      \n+      with T = int.\n+\n+      - Carlo Wood\n+  */\n+  // cplus-dem FAIL  \n+  // icc FAIL\n+  // new __cxa_demangle FAIL\n+  verify_demangle(\"_ZN1AIfEcvT_IiEEv\", \"A<float>::operator int<int>()\");\n+\n+  return 0;\n+}"}, {"sha": "cda35f6a808b3e995a2b108a566e8926e0dc1b29", "filename": "libstdc++-v3/testsuite/demangle/regression/cw-01.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-01.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,54 @@\n+// 2003-02-26  Carlo Wood  <carlo@alinoe.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libcwd tests\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  /*\n+class libcw_app_ct {\n+public:\n+  void dummy(char const*) { }\n+  template<typename T>\n+    static void add_option(void (T::*)(char const*), char const*, char, \n+                           char const*, char const*);\n+};\n+\n+template<typename T>\n+  void libcw_app_ct::add_option(void (T::*)(char const*), char const*, char, \n+                                char const*, char const*)\n+{ }\n+\n+void fn(void)\n+{\n+  // Instantiation.\n+  libcw_app_ct::add_option(&libcw_app_ct::dummy, \"\", '\\0', \"\", \"\");\n+}\n+*/\n+verify_demangle(\"_ZN12libcw_app_ct10add_optionIS_EEvMT_FvPKcES3_cS3_S3_\",\n+       \"void libcw_app_ct::add_option<libcw_app_ct>(void (libcw_app_ct::*)(char const*), char const*, char, char const*, char const*)\");\n+\n+  return 0;\n+}"}, {"sha": "7c0d613bee32a96587863ea16f1979ff9fa2e35c", "filename": "libstdc++-v3/testsuite/demangle/regression/cw-02.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-02.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-02.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-02.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,59 @@\n+// 2003-02-26  Carlo Wood  <carlo@alinoe.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libcwd tests\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+/*\n+namespace libcw {\n+  namespace debug {\n+    class memblk_types_manipulator_data_ct { };\n+  }\n+  template<typename T>\n+    class omanip_id_tct { };\n+  namespace {\n+    template<typename T>\n+      class compiler_bug_workaround {\n+      public:\n+\tstatic std::vector<int> ids;\n+      };\n+    template<typename T>\n+      std::vector<int> compiler_bug_workaround<T>::ids;\n+    typedef std::vector<libcw::omanip_id_tct<libcw::debug::memblk_types_manipulator_data_ct> > vector_t;\n+    compiler_bug_workaround<vector_t> dummy;\n+  }\n+}\n+\n+void g(void)\n+{\n+  // Instantiation.\n+  libcw::dummy.ids.size();\n+}\n+*/\n+  verify_demangle(\"_ZGVN5libcw24_GLOBAL__N_cbll.cc0ZhUKa23compiler_bug_workaroundISt6vectorINS_13omanip_id_tctINS_5debug32memblk_types_manipulator_data_ctEEESaIS6_EEE3idsE\", \"guard variable for libcw::(anonymous namespace)::compiler_bug_workaround<std::vector<libcw::omanip_id_tct<libcw::debug::memblk_types_manipulator_data_ct>, std::allocator<libcw::omanip_id_tct<libcw::debug::memblk_types_manipulator_data_ct> > > >::ids\");\n+\n+  return 0;\n+}"}, {"sha": "0ab62327e4ee704f592b62749c016f766337747f", "filename": "libstdc++-v3/testsuite/demangle/regression/cw-03.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-03.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-03.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-03.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,54 @@\n+// 2003-02-26  Carlo Wood  <carlo@alinoe.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libcwd tests\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+/*\n+namespace libcw {\n+  namespace _private_ {\n+    class GlobalObject { public: void dummy(std::ostream&) const; };\n+  }\n+  namespace debug {\n+    template<typename T>\n+      class cwprint_using_tct { };\n+    template<typename T>\n+      cwprint_using_tct<T> cwprint_using(T const&, void (T::*)(std::ostream&) const);\n+  }\n+}\n+\n+void h(void)\n+{\n+  // Instantiation.\n+  libcw::_private_::GlobalObject dummy;\n+  (void)libcw::debug::cwprint_using(dummy, &libcw::_private_::GlobalObject::dummy);\n+}\n+*/\n+  // cplus-dem CORE\n+  verify_demangle(\"_ZN5libcw5debug13cwprint_usingINS_9_private_12GlobalObjectEEENS0_17cwprint_using_tctIT_EERKS5_MS5_KFvRSt7ostreamE\", \"libcw::debug::cwprint_using_tct<libcw::_private_::GlobalObject> libcw::debug::cwprint_using<libcw::_private_::GlobalObject>(libcw::_private_::GlobalObject const&, void (libcw::_private_::GlobalObject::*)(std::ostream&) const)\");\n+\n+  return 0;\n+}"}, {"sha": "d2a7c09cdbc4aeee27f2bd5decc3f9f1d9e144bf", "filename": "libstdc++-v3/testsuite/demangle/regression/cw-04.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-04.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-04.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-04.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,45 @@\n+// 2003-02-26  Carlo Wood  <carlo@alinoe.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libcwd tests\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+\n+/*\n+class timer_event_request_base_ct { };\n+struct timer_greater { };\n+\n+void i(void)\n+{\n+  // Instantiation.\n+  std::priority_queue<timer_event_request_base_ct*, std::deque<timer_event_request_base_ct*>, timer_greater> dummy;\n+  dummy.top();\n+}\n+*/\n+  verify_demangle(\"_ZNKSt14priority_queueIP27timer_event_request_base_ctSt5dequeIS1_SaIS1_EE13timer_greaterE3topEv\", \"std::priority_queue<timer_event_request_base_ct*, std::deque<timer_event_request_base_ct*, std::allocator<timer_event_request_base_ct*> >, timer_greater>::top() const\");\n+\n+  return 0;\n+}"}, {"sha": "e56c834aeb5d2c9d1d5f50c3d4566c5ff43eb0e5", "filename": "libstdc++-v3/testsuite/demangle/regression/cw-05.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-05.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-05.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-05.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,51 @@\n+// 2003-02-26  Carlo Wood  <carlo@alinoe.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libcwd tests\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+/*\n+struct memory_block_st { };\n+namespace std {\n+  template<typename T, typename R = T const&, typename P = T const*>\n+    class _Deque_iterator {\n+    public:\n+      void operator==(_Deque_iterator const&) const { }\n+    };\n+}\n+\n+void j(void)\n+{\n+  // Instantiation.\n+  std::_Deque_iterator<memory_block_st*> dummy;\n+  dummy.operator==(dummy);\n+}\n+*/\n+  verify_demangle(\"_ZNKSt15_Deque_iteratorIP15memory_block_stRKS1_PS2_EeqERKS5_\",\n+       \"std::_Deque_iterator<memory_block_st*, memory_block_st* const&, memory_block_st* const*>::operator==(std::_Deque_iterator<memory_block_st*, memory_block_st* const&, memory_block_st* const*> const&) const\");\n+\n+  return 0;\n+}"}, {"sha": "5c22d177d9b80b1a601a02a930aa0f033fce9625", "filename": "libstdc++-v3/testsuite/demangle/regression/cw-06.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-06.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-06.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-06.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,51 @@\n+// 2003-02-26  Carlo Wood  <carlo@alinoe.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libcwd tests\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+/*\n+struct option { };\n+namespace std {\n+  template<typename T1, typename T2>\n+    class __normal_iterator {\n+    public:\n+      void operator-(__normal_iterator const&) const { }\n+    };\n+}\n+\n+void k(void)\n+{\n+  // Instantiation.\n+  std::__normal_iterator<option const*, std::vector<option> > dummy;\n+  dummy.operator-(dummy);\n+}\n+*/\n+  verify_demangle(\"_ZNKSt17__normal_iteratorIPK6optionSt6vectorIS0_SaIS0_EEEmiERKS6_\",\n+       \"std::__normal_iterator<option const*, std::vector<option, std::allocator<option> > >::operator-(std::__normal_iterator<option const*, std::vector<option, std::allocator<option> > > const&) const\");\n+\n+  return 0;\n+}"}, {"sha": "25f3661fe50a570a4de6a86ae92657a7e2bbc8c1", "filename": "libstdc++-v3/testsuite/demangle/regression/cw-07.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-07.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-07.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-07.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,62 @@\n+// 2003-02-26  Carlo Wood  <carlo@alinoe.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libcwd tests\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+\n+/*\n+\n+namespace libcw {\n+  namespace debug {\n+    class no_alloc_checking_allocator { };\n+  }\n+}\n+namespace std {\n+  template<typename T>\n+    class char_traits { };\n+  template<typename T, class _Traits, class _Alloc>\n+    class basic_string {\n+    public:\n+      template<typename T2>\n+\tchar* _S_construct(T2, T2, _Alloc const&) { return (char*)0; }\n+    };\n+}\n+\n+void l(void)\n+{\n+  // Instantiation.\n+  std::basic_string<char, std::char_traits<char>, \n+                    libcw::debug::no_alloc_checking_allocator> dummy;\n+  char* cp;\n+  libcw::debug::no_alloc_checking_allocator alloc;\n+  dummy._S_construct(cp, cp, alloc);\n+}\n+*/\n+  verify_demangle(\"_ZNSbIcSt11char_traitsIcEN5libcw5debug27no_alloc_checking_allocatorEE12_S_constructIPcEES6_T_S7_RKS3_\", \"char* std::basic_string<char, std::char_traits<char>, libcw::debug::no_alloc_checking_allocator>::_S_construct<char*>(char*, char*, libcw::debug::no_alloc_checking_allocator const&)\");\n+\n+  return 0;\n+}"}, {"sha": "25280a5151cf168b782fbada74a023d3fe68d004", "filename": "libstdc++-v3/testsuite/demangle/regression/cw-08.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-08.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-08.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-08.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,54 @@\n+// 2003-02-26  Carlo Wood  <carlo@alinoe.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libcwd tests\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+/*\n+class A { };\n+typedef A const* a4_t[4];\n+typedef a4_t* ap4_t;\n+class C {\n+public:\n+  ap4_t c;\n+};\n+template<typename T1, typename T2, typename T3>\n+  void f(T1, T2, T3, ap4_t, ap4_t (C::*)) { }\n+\n+void m(void)\n+{\n+  // Instantiation.\n+  A a;\n+  a4_t a4;\n+  f(a, &a, static_cast<A const*>(&a), &a4, &C::c);\n+}\n+*/\n+  // Equivalent, spacing differences with icc.\n+  // cplus-dem FAIL\n+  verify_demangle(\"_Z1fI1APS0_PKS0_EvT_T0_T1_PA4_S3_M1CS8_\", \"void f<A, A*, A const*>(A, A*, A const*, A const* (*) [4], A const* (* C::*) [4])\");\n+\n+  return 0;\n+}"}, {"sha": "0ad38f1d2919953b3008d2c422bd2d8e2228287c", "filename": "libstdc++-v3/testsuite/demangle/regression/cw-09.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-09.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-09.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-09.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,62 @@\n+// 2003-02-26  Carlo Wood  <carlo@alinoe.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libcwd tests\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+\n+/*\n+\n+void foo(int, int*, int**, int***, int****, int*****, int******, int*******, int********, int*********, int**********, int***********, int************, int*************, int**************, int***************)\n+{\n+}\n+\n+void n(void)\n+{\n+  int i0;\n+  int* i1;\n+  int** i2;\n+  int*** i3;\n+  int**** i4;\n+  int***** i5;\n+  int****** i6;\n+  int******* i7;\n+  int******** i8;\n+  int********* i9;\n+  int********** i10;\n+  int*********** i11;\n+  int************ i12;\n+  int************* i13;\n+  int************** i14;\n+  int*************** i15;\n+  foo(i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15);\n+}\n+*/\n+  // cplus-dem FAIL  \n+   verify_demangle(\"_Z3fooiPiPS_PS0_PS1_PS2_PS3_PS4_PS5_PS6_PS7_PS8_PS9_PSA_PSB_PSC_\", \"foo(int, int*, int**, int***, int****, int*****, int******, int*******, int********, int*********, int**********, int***********, int************, int*************, int**************, int***************)\");\n+\n+  return 0;\n+}"}, {"sha": "ab0da2af05f0eecbf6755ec811aab24d93c0ffe5", "filename": "libstdc++-v3/testsuite/demangle/regression/cw-10.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-10.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,52 @@\n+// 2003-02-26  Carlo Wood  <carlo@alinoe.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libcwd tests\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+\n+/*\n+\n+namespace std {\n+  template<typename T1, typename T2, typename T3>\n+    class D { };\n+  D<A*, A*&, A**> d;\n+  template<typename T1, typename T2, typename T3>\n+    D<T3, T3&, T3*> B(T1, T1, T2, T3*) { return d; }\n+}\n+\n+void o(void)\n+{\n+  std::D<A*, A* const&, A* const*> dummy1;\n+  std::D<A*, A*&, A**> dummy2;\n+  A* dummy3;\n+  std::B(dummy1, dummy1, dummy2, &dummy3);\n+}\n+*/\n+\n+    verify_demangle(\"_ZSt1BISt1DIP1ARKS2_PS3_ES0_IS2_RS2_PS2_ES2_ET0_T_SB_SA_PT1_\", \"std::D<A*, A*&, A**> std::B<std::D<A*, A* const&, A* const*>, std::D<A*, A*&, A**>, A*>(std::D<A*, A* const&, A* const*>, std::D<A*, A* const&, A* const*>, std::D<A*, A*&, A**>, A**)\");\n+    return 0;\n+}"}, {"sha": "d763e8c56af952a42b40446fb52900be8c6e618a", "filename": "libstdc++-v3/testsuite/demangle/regression/cw-11.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-11.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,34 @@\n+// 2003-02-26  Carlo Wood  <carlo@alinoe.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libcwd tests\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // cplus-dem CORE\n+  verify_demangle(\"_X11TransParseAddress\", \"_X11TransParseAddress\");\n+\n+  return 0;\n+}"}, {"sha": "cb6a40ee548a712621316defa4a82a3bae86b382", "filename": "libstdc++-v3/testsuite/demangle/regression/cw-12.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-12.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,88 @@\n+// 2003-02-26  Carlo Wood  <carlo@alinoe.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libcwd tests\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+/*\n+namespace std {\n+  template<bool b, int i>\n+    class __default_alloc_template { };\n+\n+  template<typename CHAR>\n+    class string_char_traits { };\n+\n+  template<class BASIC_STRING, class ADAPTOR>\n+    struct _Alloc_traits {\n+      static char _S_instanceless;\n+    };\n+  template<class BASIC_STRING, class ADAPTOR>\n+    char _Alloc_traits<BASIC_STRING, ADAPTOR>::_S_instanceless;\n+}\n+namespace libcw {\n+  namespace debug {\n+    namespace _private_ {\n+      template<typename CHAR, class ALLOCATOR, bool b>\n+\tclass allocator_adaptor { };\n+    }\n+  }\n+}\n+\n+char x;\n+void q(void)\n+{\n+  std::_Alloc_traits<\n+    std::basic_string<\n+      char,\n+      std::string_char_traits<char>,\n+      libcw::debug::_private_::allocator_adaptor<\n+\tchar,\n+        std::__default_alloc_template<false, 327664>,\n+\ttrue\n+      >\n+    >,\n+    libcw::debug::_private_::allocator_adaptor<\n+      std::basic_string<\n+\tchar,\n+        std::string_char_traits<char>,\n+\tlibcw::debug::_private_::allocator_adaptor<\n+\t  char,\n+\t  std::__default_alloc_template<false, 327664>,\n+\t  true\n+\t>\n+      >,\n+      std::__default_alloc_template<false, 327664>,\n+      true\n+    >\n+  > dummy1;\n+  x = dummy1._S_instanceless;\n+}\n+*/\n+    // cplus-dem FAIL \n+    verify_demangle(\"_ZNSt13_Alloc_traitsISbIcSt18string_char_traitsIcEN5libcw5debug9_private_17allocator_adaptorIcSt24__default_alloc_templateILb0ELi327664EELb1EEEENS5_IS9_S7_Lb1EEEE15_S_instancelessE\",\"std::_Alloc_traits<std::basic_string<char, std::string_char_traits<char>, libcw::debug::_private_::allocator_adaptor<char, std::__default_alloc_template<false, 327664>, true> >, libcw::debug::_private_::allocator_adaptor<std::basic_string<char, std::string_char_traits<char>, libcw::debug::_private_::allocator_adaptor<char, std::__default_alloc_template<false, 327664>, true> >, std::__default_alloc_template<false, 327664>, true> >::_S_instanceless\");\n+\n+  return 0;\n+}"}, {"sha": "8fe07fd44a688d5ca1f91549fb2fc148082a0ea0", "filename": "libstdc++-v3/testsuite/demangle/regression/cw-13.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-13.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-13.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-13.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,34 @@\n+// 2003-02-26  Carlo Wood  <carlo@alinoe.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libcwd tests\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+  // cplus-dem CORE\n+  verify_demangle(\"_GLOBAL__I__Z2fnv\", \"global constructors keyed to fn()\");\n+\n+  return 0;\n+}"}, {"sha": "613c0c8b32cf3c98567ec924916faca03613acb4", "filename": "libstdc++-v3/testsuite/demangle/regression/cw-14.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fcw-14.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,72 @@\n+// 2003-02-26  Carlo Wood  <carlo@alinoe.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// libcwd tests\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+\n+/*\n+struct G {\n+  int m(void) const { return 0; }\n+  int n(void) { return 0; }\n+};\n+\n+struct H {\n+  int m(void) const { return 0; }\n+  int n(void) { return 0; }\n+};\n+\n+template<typename T>\n+  class what\n+  {\n+  };\n+\n+template<typename T>\n+  class what2\n+  {\n+  };\n+\n+void r(int (G::*)(void),\n+       int (G::*)(void) const,\n+       G, // S_ \n+       int (H::*)(void), // M1HS0_\n+       int (G::*)(void), // S1_\n+       what<G const>, // what<S2_>\n+  what2<G const>, // what2<S8_>\n+    int (G::*)(void) const // S3_ \n+{\n+  G g;\n+  what<G const> y;\n+  what2<G const> y2;\n+  r(&G::n, &G::m, g, &H::n, &G::n, y, y2, &G::m);\n+}\n+*/\n+\n+  // cplus-dem CORE\n+verify_demangle(\"_Z1rM1GFivEMS_KFivES_M1HFivES1_4whatIKS_E5what2IS8_ES3_\",\n+\t\t\"r(int (G::*)(), int (G::*)() const, G, int (H::*)(), int (G::*)(), what<G const>, what2<G const>, int (G::*)() const)\");\n+\n+  return 0;\n+}"}, {"sha": "7bb8484d78c3a15782564f2f8c741e328d340d8d", "filename": "libstdc++-v3/testsuite/demangle/regression/old.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdemangle%2Fregression%2Fold.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -0,0 +1,31 @@\n+// 2003-02-26 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// IA 64 C++ ABI - 5.1 External Names (a.k.a. Mangling)\n+\n+#include <testsuite_hooks.h>\n+\n+// old libiberty tests for gnu-v3\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  verify_demangle(\"St9bad_alloc\", \"std::bad_alloc\");\n+  return 0;\n+}"}, {"sha": "3527779bc764d4bef7ea8634b17ffd25278bac29", "filename": "libstdc++-v3/testsuite/testsuite_hooks.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -40,6 +40,7 @@\n #include <stdexcept>\n #include <clocale>\n #include <locale>\n+#include <cxxabi.h>\n \n namespace __gnu_cxx_test\n {\n@@ -85,6 +86,39 @@ namespace __gnu_cxx_test\n   set_memory_limits(float) { }\n #endif \n \n+\n+  void \n+  verify_demangle(const char* mangled, const char* wanted)\n+  {\n+    int status = 0;\n+    const char* s = abi::__cxa_demangle(mangled, 0, 0, &status);\n+    if (!s)\n+      {\n+\tswitch (status)\n+\t  {\n+\t  case 0:\n+\t    s = \"error code = 0: success\";\n+\t    break;\n+\t  case -1:\n+\t    s = \"error code = -1: memory allocation failure\";\n+\t    break;\n+\t  case -2:\n+\t    s = \"error code = -2: invalid mangled name\";\n+\t    break;\n+\t  case -3:\n+\t    s = \"error code = -3: invalid arguments\";\n+\t    break;\n+\t  default:\n+\t    s = \"error code unknown - who knows what happened\";\n+\t  }\n+      }\n+\n+    std::string w(wanted);\n+    if (w != s)\n+      throw std::runtime_error(s);\n+  }\n+\n+  \n   // Useful exceptions.\n   class locale_data : public std::runtime_error \n   {"}, {"sha": "d13e86c75186e8693abc24d757202c83184e11fa", "filename": "libstdc++-v3/testsuite/testsuite_hooks.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h?ref=4ffbd0777c9cc458ce64322e0be0c6f3840ce5b4", "patch": "@@ -85,6 +85,12 @@ namespace __gnu_cxx_test\n   extern void\n   set_memory_limits(float __size = MEMLIMIT_MB);\n \n+\n+  // Check mangled name demangles (using __cxa_demangle) as expected.\n+  void\n+  verify_demangle(const char* mangled, const char* wanted);\n+\n+\n   // Simple callback structure for variable numbers of tests (all with\n   // same signature).  Assume all unit tests are of the signature\n   // void test01(); \n@@ -99,6 +105,7 @@ namespace __gnu_cxx_test\n   void \n   run_tests_wrapped_env(const char*, const char*, const func_callback&);\n \n+\n   // Test data types.\n   struct pod_char\n   {"}]}