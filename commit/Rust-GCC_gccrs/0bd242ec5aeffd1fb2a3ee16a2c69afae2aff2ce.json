{"sha": "0bd242ec5aeffd1fb2a3ee16a2c69afae2aff2ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJkMjQyZWM1YWVmZmQxZmIyYTNlZTE2YTJjNjlhZmFlMmFmZjJjZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-12T11:23:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-12T14:30:13Z"}, "message": "libstdc++: Make test memory_resource work without exceptions and RTTI\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/util/testsuite_allocator.h (memory_resource):\n\tRemove requirement for RTTI and exceptions to be enabled.", "tree": {"sha": "611a4c08fbdad2b11955678e7b627aecb95ec526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/611a4c08fbdad2b11955678e7b627aecb95ec526"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bd242ec5aeffd1fb2a3ee16a2c69afae2aff2ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd242ec5aeffd1fb2a3ee16a2c69afae2aff2ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd242ec5aeffd1fb2a3ee16a2c69afae2aff2ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd242ec5aeffd1fb2a3ee16a2c69afae2aff2ce/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9c310521182c9359cf23fa9b0c5057b35e8b53f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c310521182c9359cf23fa9b0c5057b35e8b53f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9c310521182c9359cf23fa9b0c5057b35e8b53f"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "1f7912ea6eb3afcd42e80445deecb7bdcd985ab0", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd242ec5aeffd1fb2a3ee16a2c69afae2aff2ce/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd242ec5aeffd1fb2a3ee16a2c69afae2aff2ce/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=0bd242ec5aeffd1fb2a3ee16a2c69afae2aff2ce", "patch": "@@ -763,7 +763,7 @@ namespace __gnu_test\n #endif // C++11\n \n #if __cplusplus >= 201703L\n-#if __cpp_aligned_new && __cpp_rtti && __cpp_exceptions\n+#if __cpp_aligned_new\n   // A concrete memory_resource, with error checking.\n   class memory_resource : public std::pmr::memory_resource\n   {\n@@ -842,9 +842,9 @@ namespace __gnu_test\n \t  if (p == a->p)\n \t    {\n \t      if (bytes != a->bytes)\n-\t\tthrow bad_size();\n+\t\t_S_throw<bad_size>();\n \t      if (alignment != a->alignment)\n-\t\tthrow bad_alignment();\n+\t\t_S_throw<bad_alignment>();\n #if __cpp_sized_deallocation\n \t      ::operator delete(p, bytes, std::align_val_t(alignment));\n #else\n@@ -857,19 +857,35 @@ namespace __gnu_test\n \t    }\n \t  aptr = &a->next;\n \t}\n-      throw bad_address();\n+      _S_throw<bad_address>();\n     }\n \n     bool\n     do_is_equal(const std::pmr::memory_resource& r) const noexcept override\n     {\n+#if __cpp_rtti\n       // Equality is determined by sharing the same allocation_lists object.\n       if (auto p = dynamic_cast<const memory_resource*>(&r))\n \treturn p->lists == lists;\n+#else\n+      if (this == &r) // Is this the best we can do without RTTI?\n+\treturn true;\n+#endif\n       return false;\n     }\n \n   private:\n+    template<typename E>\n+      static void\n+      _S_throw()\n+      {\n+#if __cpp_exceptions\n+\tthrow E();\n+#else\n+\t__builtin_abort();\n+#endif\n+      }\n+\n     struct allocation\n     {\n       void* p;\n@@ -905,7 +921,7 @@ namespace __gnu_test\n \n     allocation_lists* lists;\n   };\n-#endif // aligned-new && rtti\n+#endif // aligned-new\n \n   // Set the default resource, and restore the previous one on destruction.\n   struct default_resource_mgr"}]}