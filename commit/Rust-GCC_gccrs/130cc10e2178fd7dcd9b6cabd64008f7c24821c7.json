{"sha": "130cc10e2178fd7dcd9b6cabd64008f7c24821c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMwY2MxMGUyMTc4ZmQ3ZGNkOWI2Y2FiZDY0MDA4ZjdjMjQ4MjFjNw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-04-23T22:53:25Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-04-23T22:53:25Z"}, "message": "libphobos: Add D support for S/390 Linux\n\ngcc/d/ChangeLog:\n\n2019-04-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n\t    Robin Dapp  <rdapp@linux.ibm.com>\n\n\t* typeinfo.cc (create_typeinfo): Write typeinfo flags as uint.\n\ngcc/testsuite/ChangeLog:\n\n2019-04-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n\t    Robin Dapp  <rdapp@linux.ibm.com>\n\n\t* gdc.dg/link.d: Test if target d_runtime.\n\t* gdc.dg/runnable.d: Fix tests to work on BigEndian.\n\t* gdc.dg/simd.d: Likewise.\n\nlibphobos/ChangeLog:\n\n2019-04-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n\t    Robin Dapp  <rdapp@linux.ibm.com>\n\n\t* configure.tgt: Add s390*-linux* as a supported target.\n\t* libdruntime/gcc/sections/elf_shared.d: import gcc.builtins.\n\t(__tls_get_addr_internal): Declare.\n\t(TLS_DTV_OFFSET): Define as zero on SystemZ.\n\t(getTLSRange): Support getting TLS on SystemZ.\n\t* testsuite/libphobos.typeinfo/struct-align.d: New test.\n\nCo-Authored-By: Robin Dapp <rdapp@linux.ibm.com>\n\nFrom-SVN: r270523", "tree": {"sha": "b07fa89734c6f2b88d692e3c6de1be7495b87174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b07fa89734c6f2b88d692e3c6de1be7495b87174"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/130cc10e2178fd7dcd9b6cabd64008f7c24821c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/130cc10e2178fd7dcd9b6cabd64008f7c24821c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/130cc10e2178fd7dcd9b6cabd64008f7c24821c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9392bfa032b448839abadb523aff65b8ccb3dba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9392bfa032b448839abadb523aff65b8ccb3dba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9392bfa032b448839abadb523aff65b8ccb3dba"}], "stats": {"total": 83, "additions": 70, "deletions": 13}, "files": [{"sha": "a0a3266f1a2537e4eb31f973dee4b6910d69667e", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=130cc10e2178fd7dcd9b6cabd64008f7c24821c7", "patch": "@@ -1,3 +1,8 @@\n+2019-04-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\t    Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* typeinfo.cc (create_typeinfo): Write typeinfo flags as uint.\n+\n 2019-04-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* d-builtins.cc (d_init_versions): Add D_BetterC, D_ModuleInfo,"}, {"sha": "bbd3961181ddc8ab02086c7fa66eaa5d2e4fbb7e", "filename": "gcc/d/typeinfo.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/gcc%2Fd%2Ftypeinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/gcc%2Fd%2Ftypeinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypeinfo.cc?ref=130cc10e2178fd7dcd9b6cabd64008f7c24821c7", "patch": "@@ -860,7 +860,7 @@ class TypeInfoVisitor : public Visitor\n \tflags |= ClassFlags::noPointers;\n \n     Lhaspointers:\n-\tthis->layout_field (size_int (flags));\n+\tthis->layout_field (build_integer_cst (flags, d_uint_type));\n \n \t/* void *deallocator;  */\n \ttree ddtor = (cd->aggDelete)\n@@ -916,7 +916,7 @@ class TypeInfoVisitor : public Visitor\n \tif (cd->isCOMinterface ())\n \t  flags |= ClassFlags::isCOMclass;\n \n-\tthis->layout_field (size_int (flags));\n+\tthis->layout_field (build_integer_cst (flags, d_uint_type));\n \n \t/* void *deallocator;\n \t   OffsetTypeInfo[] m_offTi;  (not implemented)\n@@ -1049,7 +1049,7 @@ class TypeInfoVisitor : public Visitor\n     StructFlags::Type m_flags = 0;\n     if (ti->hasPointers ())\n       m_flags |= StructFlags::hasPointers;\n-    this->layout_field (size_int (m_flags));\n+    this->layout_field (build_integer_cst (m_flags, d_uint_type));\n \n     /* void function(void*) xdtor;  */\n     tree dtor = (sd->dtor) ? build_address (get_symbol_decl (sd->dtor))\n@@ -1063,7 +1063,7 @@ class TypeInfoVisitor : public Visitor\n       this->layout_field (null_pointer_node);\n \n     /* uint m_align;  */\n-    this->layout_field (size_int (ti->alignsize ()));\n+    this->layout_field (build_integer_cst (ti->alignsize (), d_uint_type));\n \n     if (global.params.is64bit)\n       {\n@@ -1531,8 +1531,8 @@ create_typeinfo (Type *type, Module *mod)\n \t\t\t\t      array_type_node, array_type_node,\n \t\t\t\t      ptr_type_node, ptr_type_node,\n \t\t\t\t      ptr_type_node, ptr_type_node,\n-\t\t\t\t      size_type_node, ptr_type_node,\n-\t\t\t\t      ptr_type_node, size_type_node,\n+\t\t\t\t      d_uint_type, ptr_type_node,\n+\t\t\t\t      ptr_type_node, d_uint_type,\n \t\t\t\t      ptr_type_node, argtype, argtype, NULL);\n \t    }\n \t  t->vtinfo = TypeInfoStructDeclaration::create (t);"}, {"sha": "66d0b6f7562a769a8dd77e3123e0065c40587be4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=130cc10e2178fd7dcd9b6cabd64008f7c24821c7", "patch": "@@ -1,3 +1,10 @@\n+2019-04-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\t    Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* gdc.dg/link.d: Test if target d_runtime.\n+\t* gdc.dg/runnable.d: Fix tests to work on BigEndian.\n+\t* gdc.dg/simd.d: Likewise.\n+\n 2019-04-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* gdc.test/fail_compilation/fail2456.d: New test."}, {"sha": "a8ca4ed5cb6db9b1d48c496d59aab5492db2db51", "filename": "gcc/testsuite/gdc.dg/link.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/gcc%2Ftestsuite%2Fgdc.dg%2Flink.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/gcc%2Ftestsuite%2Fgdc.dg%2Flink.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Flink.d?ref=130cc10e2178fd7dcd9b6cabd64008f7c24821c7", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do link { target arm*-*-* i?86-*-* x86_64-*-* } }\n+// { dg-do link { target d_runtime } }\n \n /******************************************/\n "}, {"sha": "484a9709bf3a053c262b0a05c4cf232e1cad0752", "filename": "gcc/testsuite/gdc.dg/runnable.d", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable.d?ref=130cc10e2178fd7dcd9b6cabd64008f7c24821c7", "patch": "@@ -890,12 +890,17 @@ struct S186\n     }\n }\n \n+static if (size_t.sizeof == 8)\n+    enum checkval = 0x0200000000000002;\n+else\n+    enum checkval = 0x02000002;\n+\n void check186(in S186 obj, byte fieldB)\n {\n     assert(obj.fieldA == 2);\n     assert(obj.fieldB == 0);\n     assert(obj.fieldC == 0);\n-    assert(obj._complete == 2);\n+    assert(obj._complete == checkval);\n     assert(fieldB == 0);\n }\n \n@@ -907,20 +912,20 @@ void test186a(size_t val)\n     assert(obj.fieldA == 2);\n     assert(obj.fieldB == 0);\n     assert(obj.fieldC == 0);\n-    assert(obj._complete == 2);\n+    assert(obj._complete == checkval);\n \n     obj = S186(val);\n     check186(obj, obj.fieldB);\n \n     assert(obj.fieldA == 2);\n     assert(obj.fieldB == 0);\n     assert(obj.fieldC == 0);\n-    assert(obj._complete == 2);\n+    assert(obj._complete == checkval);\n }\n \n void test186()\n {\n-    test186a(2);\n+    test186a(checkval);\n }\n \n /******************************************/"}, {"sha": "439c446837aad01929ff772bc0d6663bd706732b", "filename": "gcc/testsuite/gdc.dg/simd.d", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fsimd.d?ref=130cc10e2178fd7dcd9b6cabd64008f7c24821c7", "patch": "@@ -1576,7 +1576,10 @@ ubyte[16] foounsto()\n void testOPvecunsto()\n {\n     auto a = foounsto();\n-    assert(a == [0, 0, 64, 65, 0, 0, 64, 65, 0, 0, 64, 65, 0, 0, 64, 65]);\n+    version (LittleEndian)\n+        assert(a == [0, 0, 64, 65, 0, 0, 64, 65, 0, 0, 64, 65, 0, 0, 64, 65]);\n+    version (BigEndian)\n+        assert(a == [65, 64, 0, 0, 65, 64, 0, 0, 65, 64, 0, 0, 65, 64, 0, 0]);\n }\n \n /*****************************************/"}, {"sha": "e7d3319b21d57ddfb6f3fa22917eefd50a132806", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=130cc10e2178fd7dcd9b6cabd64008f7c24821c7", "patch": "@@ -1,3 +1,13 @@\n+2019-04-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\t    Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* configure.tgt: Add s390*-linux* as a supported target.\n+\t* libdruntime/gcc/sections/elf_shared.d: import gcc.builtins.\n+\t(__tls_get_addr_internal): Declare.\n+\t(TLS_DTV_OFFSET): Define as zero on SystemZ.\n+\t(getTLSRange): Support getting TLS on SystemZ.\n+\t* testsuite/libphobos.typeinfo/struct-align.d: New test.\n+\n 2019-04-23  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* configure.tgt: Add linux/riscv as supported target."}, {"sha": "a53a3c3c3be18f75ab53aa3a5ba942bf72794185", "filename": "libphobos/configure.tgt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/libphobos%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/libphobos%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure.tgt?ref=130cc10e2178fd7dcd9b6cabd64008f7c24821c7", "patch": "@@ -32,6 +32,9 @@ case \"${target}\" in\n   riscv*-*-linux*)\n \tLIBPHOBOS_SUPPORTED=yes\n \t;;\n+  s390*-linux*)\n+\tLIBPHOBOS_SUPPORTED=yes\n+\t;;\n   x86_64-*-kfreebsd*-gnu | i?86-*-kfreebsd*-gnu)\n \tLIBPHOBOS_SUPPORTED=yes\n \t;;"}, {"sha": "d92e4cd9c4e423e42a541b0261d2782f226d15ce", "filename": "libphobos/libdruntime/gcc/sections/elf_shared.d", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Felf_shared.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Felf_shared.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Felf_shared.d?ref=130cc10e2178fd7dcd9b6cabd64008f7c24821c7", "patch": "@@ -77,6 +77,7 @@ else\n     static assert(0, \"unimplemented\");\n }\n import core.sys.posix.pthread;\n+import gcc.builtins;\n import gcc.config;\n import rt.deh;\n import rt.dmain2;\n@@ -992,6 +993,7 @@ struct tls_index\n }\n \n extern(C) void* __tls_get_addr(tls_index* ti) nothrow @nogc;\n+extern(C) void* __tls_get_addr_internal(tls_index* ti) nothrow @nogc;\n \n /* The dynamic thread vector (DTV) pointers may point 0x8000 past the start of\n  * each TLS block. This is at least true for PowerPC and Mips platforms.\n@@ -1025,6 +1027,8 @@ else version (MIPS32)\n     enum TLS_DTV_OFFSET = 0x8000;\n else version (MIPS64)\n     enum TLS_DTV_OFFSET = 0x8000;\n+else version (SystemZ)\n+    enum TLS_DTV_OFFSET = 0x0;\n else\n     static assert( false, \"Platform not supported.\" );\n \n@@ -1041,5 +1045,12 @@ void[] getTLSRange(size_t mod, size_t sz) nothrow @nogc\n \n     // base offset\n     auto ti = tls_index(mod, 0);\n-    return (__tls_get_addr(&ti)-TLS_DTV_OFFSET)[0 .. sz];\n+    version (SystemZ)\n+    {\n+        auto idx = cast(void *)__tls_get_addr_internal(&ti)\n+            + cast(ulong)__builtin_thread_pointer();\n+        return idx[0 .. sz];\n+    }\n+    else\n+        return (__tls_get_addr(&ti)-TLS_DTV_OFFSET)[0 .. sz];\n }"}, {"sha": "72866517481ddfd9e66801885422b82b2c95ec00", "filename": "libphobos/testsuite/libphobos.typeinfo/struct-align.d", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/libphobos%2Ftestsuite%2Flibphobos.typeinfo%2Fstruct-align.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/130cc10e2178fd7dcd9b6cabd64008f7c24821c7/libphobos%2Ftestsuite%2Flibphobos.typeinfo%2Fstruct-align.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2Flibphobos.typeinfo%2Fstruct-align.d?ref=130cc10e2178fd7dcd9b6cabd64008f7c24821c7", "patch": "@@ -0,0 +1,13 @@\n+module structalign;\n+\n+void main ()\n+{\n+    struct K { int *a; };\n+    K k;\n+    auto ti = typeid (k);\n+\n+    assert (ti.flags () == 1);\n+\n+    auto ti2 = typeid (k.a);\n+    assert (ti.talign () == ti2.talign ());\n+}"}]}