{"sha": "7f940822816917fea276654514eccdc8eacd5e93", "node_id": "C_kwDOANBUbNoAKDdmOTQwODIyODE2OTE3ZmVhMjc2NjU0NTE0ZWNjZGM4ZWFjZDVlOTM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-31T08:05:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-31T08:05:02Z"}, "message": "builtins: Add various __builtin_*f{16,32,64,128,32x,64x,128x} builtins\n\nWhen working on libstdc++ extended float support in <cmath>, I found that\nwe need various builtins for the _Float{16,32,64,128,32x,64x,128x} types.\nGlibc 2.26 and later provides the underlying libm routines (except for\n_Float16 and _Float128x for the time being) and in libstdc++ I think we\nneed at least the _Float128 builtins on x86_64, i?86, powerpc64le and ia64\n(when long double is IEEE quad, we can handle it by using __builtin_*l\ninstead), because without the builtins the overloads couldn't be constexpr\n(say when it would declare the *f128 extern \"C\" routines itself and call\nthem).\n\nThe testcase covers just types of those builtins and their constant\nfolding, so doesn't need actual libm support.\n\n2022-10-31  Jakub Jelinek  <jakub@redhat.com>\n\n\t* builtin-types.def (BT_FLOAT16_PTR, BT_FLOAT32_PTR, BT_FLOAT64_PTR,\n\tBT_FLOAT128_PTR, BT_FLOAT32X_PTR, BT_FLOAT64X_PTR, BT_FLOAT128X_PTR):\n\tNew DEF_PRIMITIVE_TYPE.\n\t(BT_FN_INT_FLOAT16, BT_FN_INT_FLOAT32, BT_FN_INT_FLOAT64,\n\tBT_FN_INT_FLOAT128, BT_FN_INT_FLOAT32X, BT_FN_INT_FLOAT64X,\n\tBT_FN_INT_FLOAT128X, BT_FN_LONG_FLOAT16, BT_FN_LONG_FLOAT32,\n\tBT_FN_LONG_FLOAT64, BT_FN_LONG_FLOAT128, BT_FN_LONG_FLOAT32X,\n\tBT_FN_LONG_FLOAT64X, BT_FN_LONG_FLOAT128X, BT_FN_LONGLONG_FLOAT16,\n\tBT_FN_LONGLONG_FLOAT32, BT_FN_LONGLONG_FLOAT64,\n\tBT_FN_LONGLONG_FLOAT128, BT_FN_LONGLONG_FLOAT32X,\n\tBT_FN_LONGLONG_FLOAT64X, BT_FN_LONGLONG_FLOAT128X): New\n\tDEF_FUNCTION_TYPE_1.\n\t(BT_FN_FLOAT16_FLOAT16_FLOAT16PTR, BT_FN_FLOAT32_FLOAT32_FLOAT32PTR,\n\tBT_FN_FLOAT64_FLOAT64_FLOAT64PTR, BT_FN_FLOAT128_FLOAT128_FLOAT128PTR,\n\tBT_FN_FLOAT32X_FLOAT32X_FLOAT32XPTR,\n\tBT_FN_FLOAT64X_FLOAT64X_FLOAT64XPTR,\n\tBT_FN_FLOAT128X_FLOAT128X_FLOAT128XPTR, BT_FN_FLOAT16_FLOAT16_INT,\n\tBT_FN_FLOAT32_FLOAT32_INT, BT_FN_FLOAT64_FLOAT64_INT,\n\tBT_FN_FLOAT128_FLOAT128_INT, BT_FN_FLOAT32X_FLOAT32X_INT,\n\tBT_FN_FLOAT64X_FLOAT64X_INT, BT_FN_FLOAT128X_FLOAT128X_INT,\n\tBT_FN_FLOAT16_FLOAT16_INTPTR, BT_FN_FLOAT32_FLOAT32_INTPTR,\n\tBT_FN_FLOAT64_FLOAT64_INTPTR, BT_FN_FLOAT128_FLOAT128_INTPTR,\n\tBT_FN_FLOAT32X_FLOAT32X_INTPTR, BT_FN_FLOAT64X_FLOAT64X_INTPTR,\n\tBT_FN_FLOAT128X_FLOAT128X_INTPTR, BT_FN_FLOAT16_FLOAT16_LONG,\n\tBT_FN_FLOAT32_FLOAT32_LONG, BT_FN_FLOAT64_FLOAT64_LONG,\n\tBT_FN_FLOAT128_FLOAT128_LONG, BT_FN_FLOAT32X_FLOAT32X_LONG,\n\tBT_FN_FLOAT64X_FLOAT64X_LONG, BT_FN_FLOAT128X_FLOAT128X_LONG): New\n\tDEF_FUNCTION_TYPE_2.\n\t(BT_FN_FLOAT16_FLOAT16_FLOAT16_INTPTR,\n\tBT_FN_FLOAT32_FLOAT32_FLOAT32_INTPTR,\n\tBT_FN_FLOAT64_FLOAT64_FLOAT64_INTPTR,\n\tBT_FN_FLOAT128_FLOAT128_FLOAT128_INTPTR,\n\tBT_FN_FLOAT32X_FLOAT32X_FLOAT32X_INTPTR,\n\tBT_FN_FLOAT64X_FLOAT64X_FLOAT64X_INTPTR,\n\tBT_FN_FLOAT128X_FLOAT128X_FLOAT128X_INTPTR): New DEF_FUNCTION_TYPE_3.\n\t* builtins.def (ACOSH_TYPE, ATAN2_TYPE, ATANH_TYPE, COSH_TYPE,\n\tFDIM_TYPE, HUGE_VAL_TYPE, HYPOT_TYPE, ILOGB_TYPE, LDEXP_TYPE,\n\tLGAMMA_TYPE, LLRINT_TYPE, LOG10_TYPE, LRINT_TYPE, MODF_TYPE,\n\tNEXTAFTER_TYPE, REMQUO_TYPE, SCALBLN_TYPE, SCALBN_TYPE, SINH_TYPE):\n\tDefine and undefine later.\n\t(FMIN_TYPE, SQRT_TYPE): Undefine at a later line.\n\t(INF_TYPE): Define at a later line.\n\t(BUILT_IN_ACOSH, BUILT_IN_ACOS, BUILT_IN_ASINH, BUILT_IN_ASIN,\n\tBUILT_IN_ATAN2, BUILT_IN_ATANH, BUILT_IN_ATAN, BUILT_IN_CBRT,\n\tBUILT_IN_COSH, BUILT_IN_COS, BUILT_IN_ERFC, BUILT_IN_ERF,\n\tBUILT_IN_EXP2, BUILT_IN_EXP, BUILT_IN_EXPM1, BUILT_IN_FDIM,\n\tBUILT_IN_FMOD, BUILT_IN_FREXP, BUILT_IN_HYPOT, BUILT_IN_ILOGB,\n\tBUILT_IN_LDEXP, BUILT_IN_LGAMMA, BUILT_IN_LLRINT, BUILT_IN_LLROUND,\n\tBUILT_IN_LOG10, BUILT_IN_LOG1P, BUILT_IN_LOG2, BUILT_IN_LOGB,\n\tBUILT_IN_LOG, BUILT_IN_LRINT, BUILT_IN_LROUND, BUILT_IN_MODF,\n\tBUILT_IN_NEXTAFTER, BUILT_IN_POW, BUILT_IN_REMAINDER, BUILT_IN_REMQUO,\n\tBUILT_IN_SCALBLN, BUILT_IN_SCALBN, BUILT_IN_SINH, BUILT_IN_SIN,\n\tBUILT_IN_TANH, BUILT_IN_TAN, BUILT_IN_TGAMMA): Add\n\tDEF_EXT_LIB_FLOATN_NX_BUILTINS.\n\t(BUILT_IN_HUGE_VAL): Use HUGE_VAL_TYPE instead of INF_TYPE in\n\tDEF_GCC_FLOATN_NX_BUILTINS.\n\t* fold-const-call.cc (fold_const_call_ss): Add various CASE_CFN_*_FN:\n\tcases when CASE_CFN_* is present.\n\t(fold_const_call_sss): Likewise.\n\t* builtins.cc (mathfn_built_in_2): Use CASE_MATHFN_FLOATN instead of\n\tCASE_MATHFN for various builtins in SEQ_OF_CASE_MATHFN macro.\n\t(builtin_with_linkage_p): Add CASE_FLT_FN_FLOATN_NX for various\n\tbuiltins next to CASE_FLT_FN.\n\t* fold-const.cc (tree_call_nonnegative_warnv_p): Add CASE_CFN_*_FN:\n\tnext to CASE_CFN_*: for various builtins.\n\t* tree-call-cdce.cc (can_test_argument_range): Add\n\tCASE_FLT_FN_FLOATN_NX next to CASE_FLT_FN for various builtins.\n\t(edom_only_function): Likewise.\n\n\t* gcc.dg/torture/floatn-builtin.h: Add tests for newly added builtins.", "tree": {"sha": "a8da6f8e3d3e1dc52ad39d190084547401cac824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8da6f8e3d3e1dc52ad39d190084547401cac824"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f940822816917fea276654514eccdc8eacd5e93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f940822816917fea276654514eccdc8eacd5e93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f940822816917fea276654514eccdc8eacd5e93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f940822816917fea276654514eccdc8eacd5e93/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58685b939bb1738d23750fad29035f8055fd4315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58685b939bb1738d23750fad29035f8055fd4315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58685b939bb1738d23750fad29035f8055fd4315"}], "stats": {"total": 583, "additions": 531, "deletions": 52}, "files": [{"sha": "2dbed8ae05cedacabeafecc25f9d564764586a09", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f940822816917fea276654514eccdc8eacd5e93/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f940822816917fea276654514eccdc8eacd5e93/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=7f940822816917fea276654514eccdc8eacd5e93", "patch": "@@ -135,6 +135,27 @@ DEF_PRIMITIVE_TYPE (BT_CONST_DOUBLE_PTR,\n \t\t     (build_qualified_type (double_type_node,\n \t\t     \t\t\t    TYPE_QUAL_CONST)))\n DEF_PRIMITIVE_TYPE (BT_LONGDOUBLE_PTR, long_double_ptr_type_node)\n+DEF_PRIMITIVE_TYPE (BT_FLOAT16_PTR, (float16_type_node\n+\t\t\t\t      ? build_pointer_type (float16_type_node)\n+\t\t\t\t      : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_FLOAT32_PTR, (float32_type_node\n+\t\t\t\t      ? build_pointer_type (float32_type_node)\n+\t\t\t\t      : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_FLOAT64_PTR, (float64_type_node\n+\t\t\t\t      ? build_pointer_type (float64_type_node)\n+\t\t\t\t      : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_FLOAT128_PTR, (float128_type_node\n+\t\t\t\t      ? build_pointer_type (float128_type_node)\n+\t\t\t\t      : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_FLOAT32X_PTR, (float32x_type_node\n+\t\t\t\t      ? build_pointer_type (float32x_type_node)\n+\t\t\t\t      : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_FLOAT64X_PTR, (float64x_type_node\n+\t\t\t\t      ? build_pointer_type (float64x_type_node)\n+\t\t\t\t      : error_mark_node))\n+DEF_PRIMITIVE_TYPE (BT_FLOAT128X_PTR, (float128x_type_node\n+\t\t\t\t      ? build_pointer_type (float128x_type_node)\n+\t\t\t\t      : error_mark_node))\n DEF_PRIMITIVE_TYPE (BT_PID, pid_type_node)\n DEF_PRIMITIVE_TYPE (BT_SIZE, size_type_node)\n DEF_PRIMITIVE_TYPE (BT_CONST_SIZE,\n@@ -247,15 +268,36 @@ DEF_FUNCTION_TYPE_1 (BT_FN_INT_PTR, BT_INT, BT_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_FLOAT, BT_INT, BT_FLOAT)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_DOUBLE, BT_INT, BT_DOUBLE)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_LONGDOUBLE, BT_INT, BT_LONGDOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_FLOAT16, BT_INT, BT_FLOAT16)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_FLOAT32, BT_INT, BT_FLOAT32)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_FLOAT64, BT_INT, BT_FLOAT64)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_FLOAT128, BT_INT, BT_FLOAT128)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_FLOAT32X, BT_INT, BT_FLOAT32X)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_FLOAT64X, BT_INT, BT_FLOAT64X)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_FLOAT128X, BT_INT, BT_FLOAT128X)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_DFLOAT32, BT_INT, BT_DFLOAT32)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_DFLOAT64, BT_INT, BT_DFLOAT64)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_DFLOAT128, BT_INT, BT_DFLOAT128)\n DEF_FUNCTION_TYPE_1 (BT_FN_LONG_FLOAT, BT_LONG, BT_FLOAT)\n DEF_FUNCTION_TYPE_1 (BT_FN_LONG_DOUBLE, BT_LONG, BT_DOUBLE)\n DEF_FUNCTION_TYPE_1 (BT_FN_LONG_LONGDOUBLE, BT_LONG, BT_LONGDOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONG_FLOAT16, BT_LONG, BT_FLOAT16)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONG_FLOAT32, BT_LONG, BT_FLOAT32)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONG_FLOAT64, BT_LONG, BT_FLOAT64)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONG_FLOAT128, BT_LONG, BT_FLOAT128)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONG_FLOAT32X, BT_LONG, BT_FLOAT32X)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONG_FLOAT64X, BT_LONG, BT_FLOAT64X)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONG_FLOAT128X, BT_LONG, BT_FLOAT128X)\n DEF_FUNCTION_TYPE_1 (BT_FN_LONGLONG_FLOAT, BT_LONGLONG, BT_FLOAT)\n DEF_FUNCTION_TYPE_1 (BT_FN_LONGLONG_DOUBLE, BT_LONGLONG, BT_DOUBLE)\n DEF_FUNCTION_TYPE_1 (BT_FN_LONGLONG_LONGDOUBLE, BT_LONGLONG, BT_LONGDOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONGLONG_FLOAT16, BT_LONGLONG, BT_FLOAT16)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONGLONG_FLOAT32, BT_LONGLONG, BT_FLOAT32)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONGLONG_FLOAT64, BT_LONGLONG, BT_FLOAT64)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONGLONG_FLOAT128, BT_LONGLONG, BT_FLOAT128)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONGLONG_FLOAT32X, BT_LONGLONG, BT_FLOAT32X)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONGLONG_FLOAT64X, BT_LONGLONG, BT_FLOAT64X)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONGLONG_FLOAT128X, BT_LONGLONG, BT_FLOAT128X)\n DEF_FUNCTION_TYPE_1 (BT_FN_VOID_PTR, BT_VOID, BT_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_SIZE_CONST_STRING, BT_SIZE, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_CONST_STRING, BT_INT, BT_CONST_STRING)\n@@ -425,6 +467,20 @@ DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_DOUBLEPTR,\n \t\t     BT_DOUBLE, BT_DOUBLE, BT_DOUBLE_PTR)\n DEF_FUNCTION_TYPE_2 (BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLEPTR,\n \t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_LONGDOUBLE_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT16_FLOAT16_FLOAT16PTR,\n+\t\t     BT_FLOAT16, BT_FLOAT16, BT_FLOAT16_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT32_FLOAT32_FLOAT32PTR,\n+\t\t     BT_FLOAT32, BT_FLOAT32, BT_FLOAT32_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT64_FLOAT64_FLOAT64PTR,\n+\t\t     BT_FLOAT64, BT_FLOAT64, BT_FLOAT64_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT128_FLOAT128_FLOAT128PTR,\n+\t\t     BT_FLOAT128, BT_FLOAT128, BT_FLOAT128_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT32X_FLOAT32X_FLOAT32XPTR,\n+\t\t     BT_FLOAT32X, BT_FLOAT32X, BT_FLOAT32X_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT64X_FLOAT64X_FLOAT64XPTR,\n+\t\t     BT_FLOAT64X, BT_FLOAT64X, BT_FLOAT64X_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT128X_FLOAT128X_FLOAT128XPTR,\n+\t\t     BT_FLOAT128X, BT_FLOAT128X, BT_FLOAT128X_PTR)\n DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT_FLOAT_LONGDOUBLE,\n \t\t     BT_FLOAT, BT_FLOAT, BT_LONGDOUBLE)\n DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_LONGDOUBLE,\n@@ -435,12 +491,40 @@ DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_INT,\n \t\t     BT_DOUBLE, BT_DOUBLE, BT_INT)\n DEF_FUNCTION_TYPE_2 (BT_FN_LONGDOUBLE_LONGDOUBLE_INT,\n \t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_INT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT16_FLOAT16_INT,\n+\t\t     BT_FLOAT16, BT_FLOAT16, BT_INT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT32_FLOAT32_INT,\n+\t\t     BT_FLOAT32, BT_FLOAT32, BT_INT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT64_FLOAT64_INT,\n+\t\t     BT_FLOAT64, BT_FLOAT64, BT_INT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT128_FLOAT128_INT,\n+\t\t     BT_FLOAT128, BT_FLOAT128, BT_INT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT32X_FLOAT32X_INT,\n+\t\t     BT_FLOAT32X, BT_FLOAT32X, BT_INT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT64X_FLOAT64X_INT,\n+\t\t     BT_FLOAT64X, BT_FLOAT64X, BT_INT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT128X_FLOAT128X_INT,\n+\t\t     BT_FLOAT128X, BT_FLOAT128X, BT_INT)\n DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT_FLOAT_INTPTR,\n \t\t     BT_FLOAT, BT_FLOAT, BT_INT_PTR)\n DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_INTPTR,\n \t\t     BT_DOUBLE, BT_DOUBLE, BT_INT_PTR)\n DEF_FUNCTION_TYPE_2 (BT_FN_LONGDOUBLE_LONGDOUBLE_INTPTR,\n \t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT16_FLOAT16_INTPTR,\n+\t\t     BT_FLOAT16, BT_FLOAT16, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT32_FLOAT32_INTPTR,\n+\t\t     BT_FLOAT32, BT_FLOAT32, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT64_FLOAT64_INTPTR,\n+\t\t     BT_FLOAT64, BT_FLOAT64, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT128_FLOAT128_INTPTR,\n+\t\t     BT_FLOAT128, BT_FLOAT128, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT32X_FLOAT32X_INTPTR,\n+\t\t     BT_FLOAT32X, BT_FLOAT32X, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT64X_FLOAT64X_INTPTR,\n+\t\t     BT_FLOAT64X, BT_FLOAT64X, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT128X_FLOAT128X_INTPTR,\n+\t\t     BT_FLOAT128X, BT_FLOAT128X, BT_INT_PTR)\n DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT_INT_FLOAT,\n \t\t     BT_FLOAT, BT_INT, BT_FLOAT)\n DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_INT_DOUBLE,\n@@ -453,6 +537,20 @@ DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_LONG,\n \t\t     BT_DOUBLE, BT_DOUBLE, BT_LONG)\n DEF_FUNCTION_TYPE_2 (BT_FN_LONGDOUBLE_LONGDOUBLE_LONG,\n \t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_LONG)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT16_FLOAT16_LONG,\n+\t\t     BT_FLOAT16, BT_FLOAT16, BT_LONG)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT32_FLOAT32_LONG,\n+\t\t     BT_FLOAT32, BT_FLOAT32, BT_LONG)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT64_FLOAT64_LONG,\n+\t\t     BT_FLOAT64, BT_FLOAT64, BT_LONG)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT128_FLOAT128_LONG,\n+\t\t     BT_FLOAT128, BT_FLOAT128, BT_LONG)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT32X_FLOAT32X_LONG,\n+\t\t     BT_FLOAT32X, BT_FLOAT32X, BT_LONG)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT64X_FLOAT64X_LONG,\n+\t\t     BT_FLOAT64X, BT_FLOAT64X, BT_LONG)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT128X_FLOAT128X_LONG,\n+\t\t     BT_FLOAT128X, BT_FLOAT128X, BT_LONG)\n DEF_FUNCTION_TYPE_2 (BT_FN_INT_CONST_STRING_VALIST_ARG,\n \t\t     BT_INT, BT_CONST_STRING, BT_VALIST_ARG)\n DEF_FUNCTION_TYPE_2 (BT_FN_PTR_SIZE_SIZE,\n@@ -578,6 +676,20 @@ DEF_FUNCTION_TYPE_3 (BT_FN_DOUBLE_DOUBLE_DOUBLE_INTPTR,\n \t\t     BT_DOUBLE, BT_DOUBLE, BT_DOUBLE, BT_INT_PTR)\n DEF_FUNCTION_TYPE_3 (BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE_INTPTR,\n \t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_LONGDOUBLE, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT16_FLOAT16_FLOAT16_INTPTR,\n+\t\t     BT_FLOAT16, BT_FLOAT16, BT_FLOAT16, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT32_FLOAT32_FLOAT32_INTPTR,\n+\t\t     BT_FLOAT32, BT_FLOAT32, BT_FLOAT32, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT64_FLOAT64_FLOAT64_INTPTR,\n+\t\t     BT_FLOAT64, BT_FLOAT64, BT_FLOAT64, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT128_FLOAT128_FLOAT128_INTPTR,\n+\t\t     BT_FLOAT128, BT_FLOAT128, BT_FLOAT128, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT32X_FLOAT32X_FLOAT32X_INTPTR,\n+\t\t     BT_FLOAT32X, BT_FLOAT32X, BT_FLOAT32X, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT64X_FLOAT64X_FLOAT64X_INTPTR,\n+\t\t     BT_FLOAT64X, BT_FLOAT64X, BT_FLOAT64X, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT128X_FLOAT128X_FLOAT128X_INTPTR,\n+\t\t     BT_FLOAT128X, BT_FLOAT128X, BT_FLOAT128X, BT_INT_PTR)\n DEF_FUNCTION_TYPE_3 (BT_FN_VOID_FLOAT_FLOATPTR_FLOATPTR,\n \t\t     BT_VOID, BT_FLOAT, BT_FLOAT_PTR, BT_FLOAT_PTR)\n DEF_FUNCTION_TYPE_3 (BT_FN_VOID_DOUBLE_DOUBLEPTR_DOUBLEPTR,"}, {"sha": "80415df5c05d208cbdf04bd89e5a573d181da47a", "filename": "gcc/builtins.cc", "status": "modified", "additions": 92, "deletions": 48, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f940822816917fea276654514eccdc8eacd5e93/gcc%2Fbuiltins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f940822816917fea276654514eccdc8eacd5e93/gcc%2Fbuiltins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.cc?ref=7f940822816917fea276654514eccdc8eacd5e93", "patch": "@@ -1934,90 +1934,90 @@ mathfn_built_in_2 (tree type, combined_fn fn)\n   switch (fn)\n     {\n #define SEQ_OF_CASE_MATHFN\t\t\t\\\n-    CASE_MATHFN (ACOS)\t\t\t\t\\\n-    CASE_MATHFN (ACOSH)\t\t\t\t\\\n-    CASE_MATHFN (ASIN)\t\t\t\t\\\n-    CASE_MATHFN (ASINH)\t\t\t\t\\\n-    CASE_MATHFN (ATAN)\t\t\t\t\\\n-    CASE_MATHFN (ATAN2)\t\t\t\t\\\n-    CASE_MATHFN (ATANH)\t\t\t\t\\\n-    CASE_MATHFN (CBRT)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (ACOS)\t\t\t\\\n+    CASE_MATHFN_FLOATN (ACOSH)\t\t\t\\\n+    CASE_MATHFN_FLOATN (ASIN)\t\t\t\\\n+    CASE_MATHFN_FLOATN (ASINH)\t\t\t\\\n+    CASE_MATHFN_FLOATN (ATAN)\t\t\t\\\n+    CASE_MATHFN_FLOATN (ATAN2)\t\t\t\\\n+    CASE_MATHFN_FLOATN (ATANH)\t\t\t\\\n+    CASE_MATHFN_FLOATN (CBRT)\t\t\t\\\n     CASE_MATHFN_FLOATN (CEIL)\t\t\t\\\n     CASE_MATHFN (CEXPI)\t\t\t\t\\\n     CASE_MATHFN_FLOATN (COPYSIGN)\t\t\\\n-    CASE_MATHFN (COS)\t\t\t\t\\\n-    CASE_MATHFN (COSH)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (COS)\t\t\t\\\n+    CASE_MATHFN_FLOATN (COSH)\t\t\t\\\n     CASE_MATHFN (DREM)\t\t\t\t\\\n-    CASE_MATHFN (ERF)\t\t\t\t\\\n-    CASE_MATHFN (ERFC)\t\t\t\t\\\n-    CASE_MATHFN (EXP)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (ERF)\t\t\t\\\n+    CASE_MATHFN_FLOATN (ERFC)\t\t\t\\\n+    CASE_MATHFN_FLOATN (EXP)\t\t\t\\\n     CASE_MATHFN (EXP10)\t\t\t\t\\\n-    CASE_MATHFN (EXP2)\t\t\t\t\\\n-    CASE_MATHFN (EXPM1)\t\t\t\t\\\n-    CASE_MATHFN (FABS)\t\t\t\t\\\n-    CASE_MATHFN (FDIM)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (EXP2)\t\t\t\\\n+    CASE_MATHFN_FLOATN (EXPM1)\t\t\t\\\n+    CASE_MATHFN_FLOATN (FABS)\t\t\t\\\n+    CASE_MATHFN_FLOATN (FDIM)\t\t\t\\\n     CASE_MATHFN_FLOATN (FLOOR)\t\t\t\\\n     CASE_MATHFN_FLOATN (FMA)\t\t\t\\\n     CASE_MATHFN_FLOATN (FMAX)\t\t\t\\\n     CASE_MATHFN_FLOATN (FMIN)\t\t\t\\\n-    CASE_MATHFN (FMOD)\t\t\t\t\\\n-    CASE_MATHFN (FREXP)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (FMOD)\t\t\t\\\n+    CASE_MATHFN_FLOATN (FREXP)\t\t\t\\\n     CASE_MATHFN (GAMMA)\t\t\t\t\\\n     CASE_MATHFN_REENT (GAMMA) /* GAMMA_R */\t\\\n-    CASE_MATHFN (HUGE_VAL)\t\t\t\\\n-    CASE_MATHFN (HYPOT)\t\t\t\t\\\n-    CASE_MATHFN (ILOGB)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (HUGE_VAL)\t\t\\\n+    CASE_MATHFN_FLOATN (HYPOT)\t\t\t\\\n+    CASE_MATHFN_FLOATN (ILOGB)\t\t\t\\\n     CASE_MATHFN (ICEIL)\t\t\t\t\\\n     CASE_MATHFN (IFLOOR)\t\t\t\\\n-    CASE_MATHFN (INF)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (INF)\t\t\t\\\n     CASE_MATHFN (IRINT)\t\t\t\t\\\n     CASE_MATHFN (IROUND)\t\t\t\\\n     CASE_MATHFN (ISINF)\t\t\t\t\\\n     CASE_MATHFN (J0)\t\t\t\t\\\n     CASE_MATHFN (J1)\t\t\t\t\\\n     CASE_MATHFN (JN)\t\t\t\t\\\n     CASE_MATHFN (LCEIL)\t\t\t\t\\\n-    CASE_MATHFN (LDEXP)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (LDEXP)\t\t\t\\\n     CASE_MATHFN (LFLOOR)\t\t\t\\\n-    CASE_MATHFN (LGAMMA)\t\t\t\\\n+    CASE_MATHFN_FLOATN (LGAMMA)\t\t\t\\\n     CASE_MATHFN_REENT (LGAMMA) /* LGAMMA_R */\t\\\n     CASE_MATHFN (LLCEIL)\t\t\t\\\n     CASE_MATHFN (LLFLOOR)\t\t\t\\\n-    CASE_MATHFN (LLRINT)\t\t\t\\\n-    CASE_MATHFN (LLROUND)\t\t\t\\\n-    CASE_MATHFN (LOG)\t\t\t\t\\\n-    CASE_MATHFN (LOG10)\t\t\t\t\\\n-    CASE_MATHFN (LOG1P)\t\t\t\t\\\n-    CASE_MATHFN (LOG2)\t\t\t\t\\\n-    CASE_MATHFN (LOGB)\t\t\t\t\\\n-    CASE_MATHFN (LRINT)\t\t\t\t\\\n-    CASE_MATHFN (LROUND)\t\t\t\\\n-    CASE_MATHFN (MODF)\t\t\t\t\\\n-    CASE_MATHFN (NAN)\t\t\t\t\\\n-    CASE_MATHFN (NANS)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (LLRINT)\t\t\t\\\n+    CASE_MATHFN_FLOATN (LLROUND)\t\t\\\n+    CASE_MATHFN_FLOATN (LOG)\t\t\t\\\n+    CASE_MATHFN_FLOATN (LOG10)\t\t\t\\\n+    CASE_MATHFN_FLOATN (LOG1P)\t\t\t\\\n+    CASE_MATHFN_FLOATN (LOG2)\t\t\t\\\n+    CASE_MATHFN_FLOATN (LOGB)\t\t\t\\\n+    CASE_MATHFN_FLOATN (LRINT)\t\t\t\\\n+    CASE_MATHFN_FLOATN (LROUND)\t\t\t\\\n+    CASE_MATHFN_FLOATN (MODF)\t\t\t\\\n+    CASE_MATHFN_FLOATN (NAN)\t\t\t\\\n+    CASE_MATHFN_FLOATN (NANS)\t\t\t\\\n     CASE_MATHFN_FLOATN (NEARBYINT)\t\t\\\n-    CASE_MATHFN (NEXTAFTER)\t\t\t\\\n+    CASE_MATHFN_FLOATN (NEXTAFTER)\t\t\\\n     CASE_MATHFN (NEXTTOWARD)\t\t\t\\\n-    CASE_MATHFN (POW)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (POW)\t\t\t\\\n     CASE_MATHFN (POWI)\t\t\t\t\\\n     CASE_MATHFN (POW10)\t\t\t\t\\\n-    CASE_MATHFN (REMAINDER)\t\t\t\\\n-    CASE_MATHFN (REMQUO)\t\t\t\\\n+    CASE_MATHFN_FLOATN (REMAINDER)\t\t\\\n+    CASE_MATHFN_FLOATN (REMQUO)\t\t\t\\\n     CASE_MATHFN_FLOATN (RINT)\t\t\t\\\n     CASE_MATHFN_FLOATN (ROUND)\t\t\t\\\n     CASE_MATHFN_FLOATN (ROUNDEVEN)\t\t\\\n     CASE_MATHFN (SCALB)\t\t\t\t\\\n-    CASE_MATHFN (SCALBLN)\t\t\t\\\n-    CASE_MATHFN (SCALBN)\t\t\t\\\n+    CASE_MATHFN_FLOATN (SCALBLN)\t\t\\\n+    CASE_MATHFN_FLOATN (SCALBN)\t\t\t\\\n     CASE_MATHFN (SIGNBIT)\t\t\t\\\n     CASE_MATHFN (SIGNIFICAND)\t\t\t\\\n-    CASE_MATHFN (SIN)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (SIN)\t\t\t\\\n     CASE_MATHFN (SINCOS)\t\t\t\\\n-    CASE_MATHFN (SINH)\t\t\t\t\\\n+    CASE_MATHFN_FLOATN (SINH)\t\t\t\\\n     CASE_MATHFN_FLOATN (SQRT)\t\t\t\\\n-    CASE_MATHFN (TAN)\t\t\t\t\\\n-    CASE_MATHFN (TANH)\t\t\t\t\\\n-    CASE_MATHFN (TGAMMA)\t\t\t\\\n+    CASE_MATHFN_FLOATN (TAN)\t\t\t\\\n+    CASE_MATHFN_FLOATN (TANH)\t\t\t\\\n+    CASE_MATHFN_FLOATN (TGAMMA)\t\t\t\\\n     CASE_MATHFN_FLOATN (TRUNC)\t\t\t\\\n     CASE_MATHFN (Y0)\t\t\t\t\\\n     CASE_MATHFN (Y1)\t\t\t\t\\\n@@ -11350,27 +11350,43 @@ builtin_with_linkage_p (tree decl)\n     switch (DECL_FUNCTION_CODE (decl))\n     {\n       CASE_FLT_FN (BUILT_IN_ACOS):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_ACOS):\n       CASE_FLT_FN (BUILT_IN_ACOSH):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_ACOSH):\n       CASE_FLT_FN (BUILT_IN_ASIN):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_ASIN):\n       CASE_FLT_FN (BUILT_IN_ASINH):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_ASINH):\n       CASE_FLT_FN (BUILT_IN_ATAN):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_ATAN):\n       CASE_FLT_FN (BUILT_IN_ATANH):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_ATANH):\n       CASE_FLT_FN (BUILT_IN_ATAN2):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_ATAN2):\n       CASE_FLT_FN (BUILT_IN_CBRT):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_CBRT):\n       CASE_FLT_FN (BUILT_IN_CEIL):\n       CASE_FLT_FN_FLOATN_NX (BUILT_IN_CEIL):\n       CASE_FLT_FN (BUILT_IN_COPYSIGN):\n       CASE_FLT_FN_FLOATN_NX (BUILT_IN_COPYSIGN):\n       CASE_FLT_FN (BUILT_IN_COS):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_COS):\n       CASE_FLT_FN (BUILT_IN_COSH):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_COSH):\n       CASE_FLT_FN (BUILT_IN_ERF):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_ERF):\n       CASE_FLT_FN (BUILT_IN_ERFC):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_ERFC):\n       CASE_FLT_FN (BUILT_IN_EXP):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_EXP):\n       CASE_FLT_FN (BUILT_IN_EXP2):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_EXP2):\n       CASE_FLT_FN (BUILT_IN_EXPM1):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_EXPM1):\n       CASE_FLT_FN (BUILT_IN_FABS):\n       CASE_FLT_FN_FLOATN_NX (BUILT_IN_FABS):\n       CASE_FLT_FN (BUILT_IN_FDIM):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_FDIM):\n       CASE_FLT_FN (BUILT_IN_FLOOR):\n       CASE_FLT_FN_FLOATN_NX (BUILT_IN_FLOOR):\n       CASE_FLT_FN (BUILT_IN_FMA):\n@@ -11380,43 +11396,71 @@ builtin_with_linkage_p (tree decl)\n       CASE_FLT_FN (BUILT_IN_FMIN):\n       CASE_FLT_FN_FLOATN_NX (BUILT_IN_FMIN):\n       CASE_FLT_FN (BUILT_IN_FMOD):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_FMOD):\n       CASE_FLT_FN (BUILT_IN_FREXP):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_FREXP):\n       CASE_FLT_FN (BUILT_IN_HYPOT):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_HYPOT):\n       CASE_FLT_FN (BUILT_IN_ILOGB):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_ILOGB):\n       CASE_FLT_FN (BUILT_IN_LDEXP):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_LDEXP):\n       CASE_FLT_FN (BUILT_IN_LGAMMA):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_LGAMMA):\n       CASE_FLT_FN (BUILT_IN_LLRINT):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_LLRINT):\n       CASE_FLT_FN (BUILT_IN_LLROUND):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_LLROUND):\n       CASE_FLT_FN (BUILT_IN_LOG):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_LOG):\n       CASE_FLT_FN (BUILT_IN_LOG10):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_LOG10):\n       CASE_FLT_FN (BUILT_IN_LOG1P):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_LOG1P):\n       CASE_FLT_FN (BUILT_IN_LOG2):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_LOG2):\n       CASE_FLT_FN (BUILT_IN_LOGB):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_LOGB):\n       CASE_FLT_FN (BUILT_IN_LRINT):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_LRINT):\n       CASE_FLT_FN (BUILT_IN_LROUND):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_LROUND):\n       CASE_FLT_FN (BUILT_IN_MODF):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_MODF):\n       CASE_FLT_FN (BUILT_IN_NAN):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_NAN):\n       CASE_FLT_FN (BUILT_IN_NEARBYINT):\n       CASE_FLT_FN_FLOATN_NX (BUILT_IN_NEARBYINT):\n       CASE_FLT_FN (BUILT_IN_NEXTAFTER):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_NEXTAFTER):\n       CASE_FLT_FN (BUILT_IN_NEXTTOWARD):\n       CASE_FLT_FN (BUILT_IN_POW):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_POW):\n       CASE_FLT_FN (BUILT_IN_REMAINDER):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_REMAINDER):\n       CASE_FLT_FN (BUILT_IN_REMQUO):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_REMQUO):\n       CASE_FLT_FN (BUILT_IN_RINT):\n       CASE_FLT_FN_FLOATN_NX (BUILT_IN_RINT):\n       CASE_FLT_FN (BUILT_IN_ROUND):\n       CASE_FLT_FN_FLOATN_NX (BUILT_IN_ROUND):\n       CASE_FLT_FN (BUILT_IN_SCALBLN):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_SCALBLN):\n       CASE_FLT_FN (BUILT_IN_SCALBN):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_SCALBN):\n       CASE_FLT_FN (BUILT_IN_SIN):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_SIN):\n       CASE_FLT_FN (BUILT_IN_SINH):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_SINH):\n       CASE_FLT_FN (BUILT_IN_SINCOS):\n       CASE_FLT_FN (BUILT_IN_SQRT):\n       CASE_FLT_FN_FLOATN_NX (BUILT_IN_SQRT):\n       CASE_FLT_FN (BUILT_IN_TAN):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_TAN):\n       CASE_FLT_FN (BUILT_IN_TANH):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_TANH):\n       CASE_FLT_FN (BUILT_IN_TGAMMA):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_TGAMMA):\n       CASE_FLT_FN (BUILT_IN_TRUNC):\n       CASE_FLT_FN_FLOATN_NX (BUILT_IN_TRUNC):\n \treturn true;"}, {"sha": "42c005a7651c057fb074bf1cd49b4072dbee0111", "filename": "gcc/builtins.def", "status": "modified", "additions": 87, "deletions": 4, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f940822816917fea276654514eccdc8eacd5e93/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f940822816917fea276654514eccdc8eacd5e93/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=7f940822816917fea276654514eccdc8eacd5e93", "patch": "@@ -292,26 +292,40 @@ DEF_C99_C90RES_BUILTIN (BUILT_IN_ACOSF, \"acosf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_\n DEF_C99_BUILTIN        (BUILT_IN_ACOSH, \"acosh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ACOSHF, \"acoshf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ACOSHL, \"acoshl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#define ACOSH_TYPE(F) BT_FN_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_ACOSH, \"acosh\", ACOSH_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ACOSL, \"acosl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_ACOS, \"acos\", ACOSH_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C11_BUILTIN        (BUILT_IN_ALIGNED_ALLOC, \"aligned_alloc\", BT_FN_PTR_SIZE_SIZE, ATTR_ALLOC_WARN_UNUSED_RESULT_SIZE_2_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_ASIN, \"asin\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ASINF, \"asinf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ASINH, \"asinh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_ASINHF, \"asinhf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_ASINHL, \"asinhl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_ASINH, \"asinh\", ACOSH_TYPE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ASINL, \"asinl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_ASIN, \"asin\", ACOSH_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#undef ACOSH_TYPE\n DEF_LIB_BUILTIN        (BUILT_IN_ATAN, \"atan\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_LIB_BUILTIN        (BUILT_IN_ATAN2, \"atan2\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ATAN2F, \"atan2f\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ATAN2L, \"atan2l\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#define ATAN2_TYPE(F) BT_FN_##F##_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_ATAN2, \"atan2\", ATAN2_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#undef ATAN2_TYPE\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ATANF, \"atanf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_ATANH, \"atanh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ATANHF, \"atanhf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ATANHL, \"atanhl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#define ATANH_TYPE(F) BT_FN_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_ATANH, \"atanh\", ATANH_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ATANL, \"atanl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_ATAN, \"atan\", ATANH_TYPE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_CBRT, \"cbrt\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_CBRTF, \"cbrtf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_CBRTL, \"cbrtl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_CBRT, \"cbrt\", ATANH_TYPE, ATTR_MATHFN_FPROUNDING)\n+#undef ATANH_TYPE\n DEF_LIB_BUILTIN        (BUILT_IN_CEIL, \"ceil\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_CEILF, \"ceilf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_CEILL, \"ceill\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n@@ -329,26 +343,35 @@ DEF_C99_C90RES_BUILTIN (BUILT_IN_COSF, \"cosf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FP\n DEF_LIB_BUILTIN        (BUILT_IN_COSH, \"cosh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_COSHF, \"coshf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_COSHL, \"coshl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#define COSH_TYPE(F) BT_FN_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_COSH, \"cosh\", COSH_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_COSL, \"cosl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_COS, \"cos\", COSH_TYPE, ATTR_MATHFN_FPROUNDING)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_DREM, \"drem\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_DREMF, \"dremf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_DREML, \"dreml\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ERF, \"erf\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_ERFC, \"erfc\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ERFCF, \"erfcf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ERFCL, \"erfcl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_ERFC, \"erfc\", COSH_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ERFF, \"erff\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_ERFL, \"erfl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_ERF, \"erf\", COSH_TYPE, ATTR_MATHFN_FPROUNDING)\n DEF_LIB_BUILTIN        (BUILT_IN_EXP, \"exp\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C2X_BUILTIN        (BUILT_IN_EXP10, \"exp10\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C2X_BUILTIN        (BUILT_IN_EXP10F, \"exp10f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C2X_BUILTIN        (BUILT_IN_EXP10L, \"exp10l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_EXP2, \"exp2\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_EXP2F, \"exp2f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_EXP2L, \"exp2l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_EXP2, \"exp2\", COSH_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_EXPF, \"expf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_EXPL, \"expl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_EXP, \"exp\", COSH_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_EXPM1, \"expm1\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_EXPM1, \"expm1\", COSH_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#undef COSH_TYPE\n DEF_C99_BUILTIN        (BUILT_IN_EXPM1F, \"expm1f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_EXPM1L, \"expm1l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_LIB_BUILTIN        (BUILT_IN_FABS, \"fabs\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n@@ -363,6 +386,9 @@ DEF_C2X_BUILTIN        (BUILT_IN_FABSD128, \"fabsd128\", BT_FN_DFLOAT128_DFLOAT128\n DEF_C99_BUILTIN        (BUILT_IN_FDIM, \"fdim\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_FDIMF, \"fdimf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_FDIML, \"fdiml\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#define FDIM_TYPE(F) BT_FN_##F##_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_FDIM, \"fdim\", FDIM_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#undef FDIM_TYPE\n DEF_C99_BUILTIN        (BUILT_IN_FECLEAREXCEPT, \"feclearexcept\", BT_FN_INT_INT, ATTR_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_FEGETENV, \"fegetenv\", BT_FN_INT_FENV_T_PTR, ATTR_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_FEGETEXCEPTFLAG, \"fegetexceptflag\", BT_FN_INT_FEXCEPT_T_PTR_INT, ATTR_NOTHROW_LEAF_LIST)\n@@ -397,13 +423,17 @@ DEF_C99_BUILTIN        (BUILT_IN_FMINF, \"fminf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_C\n DEF_C99_BUILTIN        (BUILT_IN_FMINL, \"fminl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n #define FMIN_TYPE(F) BT_FN_##F##_##F##_##F\n DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_FMIN, \"fmin\", FMIN_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n-#undef FMIN_TYPE\n DEF_LIB_BUILTIN        (BUILT_IN_FMOD, \"fmod\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FMODF, \"fmodf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FMODL, \"fmodl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_FMOD, \"fmod\", FMIN_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#undef FMIN_TYPE\n DEF_LIB_BUILTIN        (BUILT_IN_FREXP, \"frexp\", BT_FN_DOUBLE_DOUBLE_INTPTR, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FREXPF, \"frexpf\", BT_FN_FLOAT_FLOAT_INTPTR, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FREXPL, \"frexpl\", BT_FN_LONGDOUBLE_LONGDOUBLE_INTPTR, ATTR_MATHFN_FPROUNDING_STORE)\n+#define FREXP_TYPE(F) BT_FN_##F##_##F##_INTPTR\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_FREXP, \"frexp\", FREXP_TYPE, ATTR_MATHFN_FPROUNDING_STORE)\n+#undef FREXP_TYPE\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMA, \"gamma\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMAF, \"gammaf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMAL, \"gammal\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_STORE)\n@@ -413,11 +443,15 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMAL_R, \"gammal_r\", BT_FN_LONGDOUBLE_LONGDOUB\n DEF_GCC_BUILTIN        (BUILT_IN_HUGE_VAL, \"huge_val\", BT_FN_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_HUGE_VALF, \"huge_valf\", BT_FN_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_HUGE_VALL, \"huge_vall\", BT_FN_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n-#define INF_TYPE(F) BT_FN_##F\n-DEF_GCC_FLOATN_NX_BUILTINS (BUILT_IN_HUGE_VAL, \"huge_val\", INF_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#define HUGE_VAL_TYPE(F) BT_FN_##F\n+DEF_GCC_FLOATN_NX_BUILTINS (BUILT_IN_HUGE_VAL, \"huge_val\", HUGE_VAL_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#undef HUGE_VAL_TYPE\n DEF_C99_BUILTIN        (BUILT_IN_HYPOT, \"hypot\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_HYPOTF, \"hypotf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_HYPOTL, \"hypotl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#define HYPOT_TYPE(F) BT_FN_##F##_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_HYPOT, \"hypot\", HYPOT_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#undef HYPOT_TYPE\n DEF_GCC_BUILTIN        (BUILT_IN_ICEIL, \"iceil\", BT_FN_INT_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_ICEILF, \"iceilf\", BT_FN_INT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_ICEILL, \"iceill\", BT_FN_INT_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n@@ -427,9 +461,13 @@ DEF_GCC_BUILTIN        (BUILT_IN_IFLOORL, \"ifloorl\", BT_FN_INT_LONGDOUBLE, ATTR_\n DEF_C99_BUILTIN        (BUILT_IN_ILOGB, \"ilogb\", BT_FN_INT_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ILOGBF, \"ilogbf\", BT_FN_INT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ILOGBL, \"ilogbl\", BT_FN_INT_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#define ILOGB_TYPE(F) BT_FN_INT_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_ILOGB, \"ilogb\", ILOGB_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#undef ILOGB_TYPE\n DEF_GCC_BUILTIN        (BUILT_IN_INF, \"inf\", BT_FN_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_INFF, \"inff\", BT_FN_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_INFL, \"infl\", BT_FN_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#define INF_TYPE(F) BT_FN_##F\n DEF_GCC_FLOATN_NX_BUILTINS (BUILT_IN_INF, \"inf\", INF_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n #undef INF_TYPE\n DEF_GCC_BUILTIN\t       (BUILT_IN_INFD32, \"infd32\", BT_FN_DFLOAT32, ATTR_CONST_NOTHROW_LEAF_LIST)\n@@ -456,12 +494,18 @@ DEF_GCC_BUILTIN        (BUILT_IN_LCEILL, \"lceill\", BT_FN_LONG_LONGDOUBLE, ATTR_C\n DEF_LIB_BUILTIN        (BUILT_IN_LDEXP, \"ldexp\", BT_FN_DOUBLE_DOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_LDEXPF, \"ldexpf\", BT_FN_FLOAT_FLOAT_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_LDEXPL, \"ldexpl\", BT_FN_LONGDOUBLE_LONGDOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#define LDEXP_TYPE(F) BT_FN_##F##_##F##_INT\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_LDEXP, \"ldexp\", LDEXP_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#undef LDEXP_TYPE\n DEF_GCC_BUILTIN        (BUILT_IN_LFLOOR, \"lfloor\", BT_FN_LONG_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_LFLOORF, \"lfloorf\", BT_FN_LONG_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_LFLOORL, \"lfloorl\", BT_FN_LONG_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_LGAMMA, \"lgamma\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_C99_BUILTIN        (BUILT_IN_LGAMMAF, \"lgammaf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_C99_BUILTIN        (BUILT_IN_LGAMMAL, \"lgammal\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_STORE)\n+#define LGAMMA_TYPE(F) BT_FN_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_LGAMMA, \"lgamma\", LGAMMA_TYPE, ATTR_MATHFN_FPROUNDING_STORE)\n+#undef LGAMMA_TYPE\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_LGAMMA_R, \"lgamma_r\", BT_FN_DOUBLE_DOUBLE_INTPTR, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_LGAMMAF_R, \"lgammaf_r\", BT_FN_FLOAT_FLOAT_INTPTR, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_LGAMMAL_R, \"lgammal_r\", BT_FN_LONGDOUBLE_LONGDOUBLE_INTPTR, ATTR_MATHFN_FPROUNDING_STORE)\n@@ -474,33 +518,51 @@ DEF_GCC_BUILTIN        (BUILT_IN_LLFLOORL, \"llfloorl\", BT_FN_LONGLONG_LONGDOUBLE\n DEF_C99_BUILTIN        (BUILT_IN_LLRINT, \"llrint\", BT_FN_LONGLONG_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LLRINTF, \"llrintf\", BT_FN_LONGLONG_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LLRINTL, \"llrintl\", BT_FN_LONGLONG_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#define LLRINT_TYPE(F) BT_FN_LONGLONG_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_LLRINT, \"llrint\", LLRINT_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LLROUND, \"llround\", BT_FN_LONGLONG_DOUBLE, ATTR_MATHFN_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LLROUNDF, \"llroundf\", BT_FN_LONGLONG_FLOAT, ATTR_MATHFN_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LLROUNDL, \"llroundl\", BT_FN_LONGLONG_LONGDOUBLE, ATTR_MATHFN_ERRNO)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_LLROUND, \"llround\", LLRINT_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#undef LLRINT_TYPE\n DEF_LIB_BUILTIN        (BUILT_IN_LOG, \"log\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_LIB_BUILTIN        (BUILT_IN_LOG10, \"log10\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_LOG10F, \"log10f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_LOG10L, \"log10l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#define LOG10_TYPE(F) BT_FN_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_LOG10, \"log10\", LOG10_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LOG1P, \"log1p\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LOG1PF, \"log1pf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LOG1PL, \"log1pl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_LOG1P, \"log1p\", LOG10_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LOG2, \"log2\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LOG2F, \"log2f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LOG2L, \"log2l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_LOG2, \"log2\", LOG10_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LOGB, \"logb\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LOGBF, \"logbf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LOGBL, \"logbl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_LOGB, \"logb\", LOG10_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_LOGF, \"logf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_LOGL, \"logl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_LOG, \"log\", LOG10_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#undef LOG10_TYPE\n DEF_C99_BUILTIN        (BUILT_IN_LRINT, \"lrint\", BT_FN_LONG_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LRINTF, \"lrintf\", BT_FN_LONG_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LRINTL, \"lrintl\", BT_FN_LONG_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#define LRINT_TYPE(F) BT_FN_LONG_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_LRINT, \"lrint\", LRINT_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LROUND, \"lround\", BT_FN_LONG_DOUBLE, ATTR_MATHFN_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LROUNDF, \"lroundf\", BT_FN_LONG_FLOAT, ATTR_MATHFN_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LROUNDL, \"lroundl\", BT_FN_LONG_LONGDOUBLE, ATTR_MATHFN_ERRNO)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_LROUND, \"lround\", LRINT_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#undef LRINT_TYPE\n DEF_LIB_BUILTIN        (BUILT_IN_MODF, \"modf\", BT_FN_DOUBLE_DOUBLE_DOUBLEPTR, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_MODFF, \"modff\", BT_FN_FLOAT_FLOAT_FLOATPTR, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_MODFL, \"modfl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLEPTR, ATTR_MATHFN_FPROUNDING_STORE)\n+#define MODF_TYPE(F) BT_FN_##F##_##F##_##F##PTR\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_MODF, \"modf\", MODF_TYPE, ATTR_MATHFN_FPROUNDING_STORE)\n+#undef MODF_TYPE\n DEF_C99_BUILTIN        (BUILT_IN_NAN, \"nan\", BT_FN_DOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_C99_BUILTIN        (BUILT_IN_NANF, \"nanf\", BT_FN_FLOAT_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_C99_BUILTIN        (BUILT_IN_NANL, \"nanl\", BT_FN_LONGDOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n@@ -527,6 +589,8 @@ DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_NEARBYINT, \"nearbyint\", NEARBYINT_TYPE,\n DEF_C99_BUILTIN        (BUILT_IN_NEXTAFTER, \"nextafter\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_NEXTAFTERF, \"nextafterf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_NEXTAFTERL, \"nextafterl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_ERRNO)\n+#define NEXTAFTER_TYPE(F) BT_FN_##F##_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_NEXTAFTER, \"nextafter\", NEXTAFTER_TYPE, ATTR_MATHFN_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_NEXTTOWARD, \"nexttoward\", BT_FN_DOUBLE_DOUBLE_LONGDOUBLE, ATTR_MATHFN_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_NEXTTOWARDF, \"nexttowardf\", BT_FN_FLOAT_FLOAT_LONGDOUBLE, ATTR_MATHFN_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_NEXTTOWARDL, \"nexttowardl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_ERRNO)\n@@ -539,12 +603,18 @@ DEF_GCC_BUILTIN        (BUILT_IN_POWI, \"powi\", BT_FN_DOUBLE_DOUBLE_INT, ATTR_MAT\n DEF_GCC_BUILTIN        (BUILT_IN_POWIF, \"powif\", BT_FN_FLOAT_FLOAT_INT, ATTR_MATHFN_FPROUNDING)\n DEF_GCC_BUILTIN        (BUILT_IN_POWIL, \"powil\", BT_FN_LONGDOUBLE_LONGDOUBLE_INT, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_POWL, \"powl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_POW, \"pow\", NEXTAFTER_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_REMAINDER, \"remainder\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_REMAINDERF, \"remainderf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_REMAINDERL, \"remainderl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_REMAINDER, \"remainder\", NEXTAFTER_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#undef NEXTAFTER_TYPE\n DEF_C99_BUILTIN        (BUILT_IN_REMQUO, \"remquo\", BT_FN_DOUBLE_DOUBLE_DOUBLE_INTPTR, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_C99_BUILTIN        (BUILT_IN_REMQUOF, \"remquof\", BT_FN_FLOAT_FLOAT_FLOAT_INTPTR, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_C99_BUILTIN        (BUILT_IN_REMQUOL, \"remquol\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE_INTPTR, ATTR_MATHFN_FPROUNDING_STORE)\n+#define REMQUO_TYPE(F) BT_FN_##F##_##F##_##F##_INTPTR\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_REMQUO, \"remquo\", REMQUO_TYPE, ATTR_MATHFN_FPROUNDING_STORE)\n+#undef REMQUO_TYPE\n DEF_C99_BUILTIN        (BUILT_IN_RINT, \"rint\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_RINTF, \"rintf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_RINTL, \"rintl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n@@ -569,9 +639,15 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_SCALBL, \"scalbl\", BT_FN_LONGDOUBLE_LONGDOUBLE_L\n DEF_C99_BUILTIN        (BUILT_IN_SCALBLN, \"scalbln\", BT_FN_DOUBLE_DOUBLE_LONG, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_SCALBLNF, \"scalblnf\", BT_FN_FLOAT_FLOAT_LONG, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_SCALBLNL, \"scalblnl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONG, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#define SCALBLN_TYPE(F) BT_FN_##F##_##F##_LONG\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_SCALBLN, \"scalbln\", SCALBLN_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#undef SCALBLN_TYPE\n DEF_C99_BUILTIN        (BUILT_IN_SCALBN, \"scalbn\", BT_FN_DOUBLE_DOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_SCALBNF, \"scalbnf\", BT_FN_FLOAT_FLOAT_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_SCALBNL, \"scalbnl\", BT_FN_LONGDOUBLE_LONGDOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#define SCALBN_TYPE(F) BT_FN_##F##_##F##_INT\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_SCALBN, \"scalbn\", SCALBN_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#undef SCALBN_TYPE\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBIT, \"signbit\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBITF, \"signbitf\", BT_FN_INT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBITL, \"signbitl\", BT_FN_INT_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n@@ -589,22 +665,29 @@ DEF_C99_C90RES_BUILTIN (BUILT_IN_SINF, \"sinf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FP\n DEF_LIB_BUILTIN        (BUILT_IN_SINH, \"sinh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_SINHF, \"sinhf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_SINHL, \"sinhl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#define SINH_TYPE(F) BT_FN_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_SINH, \"sinh\", SINH_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_SINL, \"sinl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_SIN, \"sin\", SINH_TYPE, ATTR_MATHFN_FPROUNDING)\n+#undef SINH_TYPE\n DEF_LIB_BUILTIN        (BUILT_IN_SQRT, \"sqrt\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_SQRTF, \"sqrtf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_SQRTL, \"sqrtl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n #define SQRT_TYPE(F) BT_FN_##F##_##F\n DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_SQRT, \"sqrt\", SQRT_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n-#undef SQRT_TYPE\n DEF_LIB_BUILTIN        (BUILT_IN_TAN, \"tan\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_TANF, \"tanf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_LIB_BUILTIN        (BUILT_IN_TANH, \"tanh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_TANHF, \"tanhf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_TANHL, \"tanhl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_TANH, \"tanh\", SQRT_TYPE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_TANL, \"tanl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_TAN, \"tan\", SQRT_TYPE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_TGAMMA, \"tgamma\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_TGAMMAF, \"tgammaf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_TGAMMAL, \"tgammal\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_TGAMMA, \"tgamma\", SQRT_TYPE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+#undef SQRT_TYPE\n DEF_C99_BUILTIN        (BUILT_IN_TRUNC, \"trunc\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_TRUNCF, \"truncf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_TRUNCL, \"truncl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)"}, {"sha": "5f158152807e50fc117e2763493d729ee66e1009", "filename": "gcc/fold-const-call.cc", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f940822816917fea276654514eccdc8eacd5e93/gcc%2Ffold-const-call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f940822816917fea276654514eccdc8eacd5e93/gcc%2Ffold-const-call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const-call.cc?ref=7f940822816917fea276654514eccdc8eacd5e93", "patch": "@@ -734,86 +734,109 @@ fold_const_call_ss (real_value *result, combined_fn fn,\n \t      && do_mpfr_arg1 (result, mpfr_sqrt, arg, format));\n \n     CASE_CFN_CBRT:\n+    CASE_CFN_CBRT_FN:\n       return do_mpfr_arg1 (result, mpfr_cbrt, arg, format);\n \n     CASE_CFN_ASIN:\n+    CASE_CFN_ASIN_FN:\n       return (real_compare (GE_EXPR, arg, &dconstm1)\n \t      && real_compare (LE_EXPR, arg, &dconst1)\n \t      && do_mpfr_arg1 (result, mpfr_asin, arg, format));\n \n     CASE_CFN_ACOS:\n+    CASE_CFN_ACOS_FN:\n       return (real_compare (GE_EXPR, arg, &dconstm1)\n \t      && real_compare (LE_EXPR, arg, &dconst1)\n \t      && do_mpfr_arg1 (result, mpfr_acos, arg, format));\n \n     CASE_CFN_ATAN:\n+    CASE_CFN_ATAN_FN:\n       return do_mpfr_arg1 (result, mpfr_atan, arg, format);\n \n     CASE_CFN_ASINH:\n+    CASE_CFN_ASINH_FN:\n       return do_mpfr_arg1 (result, mpfr_asinh, arg, format);\n \n     CASE_CFN_ACOSH:\n+    CASE_CFN_ACOSH_FN:\n       return (real_compare (GE_EXPR, arg, &dconst1)\n \t      && do_mpfr_arg1 (result, mpfr_acosh, arg, format));\n \n     CASE_CFN_ATANH:\n+    CASE_CFN_ATANH_FN:\n       return (real_compare (GE_EXPR, arg, &dconstm1)\n \t      && real_compare (LE_EXPR, arg, &dconst1)\n \t      && do_mpfr_arg1 (result, mpfr_atanh, arg, format));\n \n     CASE_CFN_SIN:\n+    CASE_CFN_SIN_FN:\n       return do_mpfr_arg1 (result, mpfr_sin, arg, format);\n \n     CASE_CFN_COS:\n+    CASE_CFN_COS_FN:\n       return do_mpfr_arg1 (result, mpfr_cos, arg, format);\n \n     CASE_CFN_TAN:\n+    CASE_CFN_TAN_FN:\n       return do_mpfr_arg1 (result, mpfr_tan, arg, format);\n \n     CASE_CFN_SINH:\n+    CASE_CFN_SINH_FN:\n       return do_mpfr_arg1 (result, mpfr_sinh, arg, format);\n \n     CASE_CFN_COSH:\n+    CASE_CFN_COSH_FN:\n       return do_mpfr_arg1 (result, mpfr_cosh, arg, format);\n \n     CASE_CFN_TANH:\n+    CASE_CFN_TANH_FN:\n       return do_mpfr_arg1 (result, mpfr_tanh, arg, format);\n \n     CASE_CFN_ERF:\n+    CASE_CFN_ERF_FN:\n       return do_mpfr_arg1 (result, mpfr_erf, arg, format);\n \n     CASE_CFN_ERFC:\n+    CASE_CFN_ERFC_FN:\n       return do_mpfr_arg1 (result, mpfr_erfc, arg, format);\n \n     CASE_CFN_TGAMMA:\n+    CASE_CFN_TGAMMA_FN:\n       return do_mpfr_arg1 (result, mpfr_gamma, arg, format);\n \n     CASE_CFN_EXP:\n+    CASE_CFN_EXP_FN:\n       return do_mpfr_arg1 (result, mpfr_exp, arg, format);\n \n     CASE_CFN_EXP2:\n+    CASE_CFN_EXP2_FN:\n       return do_mpfr_arg1 (result, mpfr_exp2, arg, format);\n \n     CASE_CFN_EXP10:\n     CASE_CFN_POW10:\n       return do_mpfr_arg1 (result, mpfr_exp10, arg, format);\n \n     CASE_CFN_EXPM1:\n+    CASE_CFN_EXPM1_FN:\n       return do_mpfr_arg1 (result, mpfr_expm1, arg, format);\n \n     CASE_CFN_LOG:\n+    CASE_CFN_LOG_FN:\n       return (real_compare (GT_EXPR, arg, &dconst0)\n \t      && do_mpfr_arg1 (result, mpfr_log, arg, format));\n \n     CASE_CFN_LOG2:\n+    CASE_CFN_LOG2_FN:\n       return (real_compare (GT_EXPR, arg, &dconst0)\n \t      && do_mpfr_arg1 (result, mpfr_log2, arg, format));\n \n     CASE_CFN_LOG10:\n+    CASE_CFN_LOG10_FN:\n       return (real_compare (GT_EXPR, arg, &dconst0)\n \t      && do_mpfr_arg1 (result, mpfr_log10, arg, format));\n \n     CASE_CFN_LOG1P:\n+    CASE_CFN_LOG1P_FN:\n       return (real_compare (GT_EXPR, arg, &dconstm1)\n \t      && do_mpfr_arg1 (result, mpfr_log1p, arg, format));\n \n@@ -877,6 +900,7 @@ fold_const_call_ss (real_value *result, combined_fn fn,\n       return false;\n \n     CASE_CFN_LOGB:\n+    CASE_CFN_LOGB_FN:\n       return fold_const_logb (result, arg, format);\n \n     CASE_CFN_SIGNIFICAND:\n@@ -909,6 +933,7 @@ fold_const_call_ss (wide_int *result, combined_fn fn,\n       return true;\n \n     CASE_CFN_ILOGB:\n+    CASE_CFN_ILOGB_FN:\n       /* For ilogb we don't know FP_ILOGB0, so only handle normal values.\n \t Proceed iff radix == 2.  In GCC, normalized significands are in\n \t the range [0.5, 1.0).  We want the exponent as if they were\n@@ -934,13 +959,17 @@ fold_const_call_ss (wide_int *result, combined_fn fn,\n \n     CASE_CFN_IROUND:\n     CASE_CFN_LROUND:\n+    CASE_CFN_LROUND_FN:\n     CASE_CFN_LLROUND:\n+    CASE_CFN_LLROUND_FN:\n       return fold_const_conversion (result, real_round, arg,\n \t\t\t\t    precision, format);\n \n     CASE_CFN_IRINT:\n     CASE_CFN_LRINT:\n+    CASE_CFN_LRINT_FN:\n     CASE_CFN_LLRINT:\n+    CASE_CFN_LLRINT_FN:\n       /* Not yet folded to a constant.  */\n       return false;\n \n@@ -1370,18 +1399,23 @@ fold_const_call_sss (real_value *result, combined_fn fn,\n     {\n     CASE_CFN_DREM:\n     CASE_CFN_REMAINDER:\n+    CASE_CFN_REMAINDER_FN:\n       return do_mpfr_arg2 (result, mpfr_remainder, arg0, arg1, format);\n \n     CASE_CFN_ATAN2:\n+    CASE_CFN_ATAN2_FN:\n       return do_mpfr_arg2 (result, mpfr_atan2, arg0, arg1, format);\n \n     CASE_CFN_FDIM:\n+    CASE_CFN_FDIM_FN:\n       return do_mpfr_arg2 (result, mpfr_dim, arg0, arg1, format);\n \n     CASE_CFN_FMOD:\n+    CASE_CFN_FMOD_FN:\n       return do_mpfr_arg2 (result, mpfr_fmod, arg0, arg1, format);\n \n     CASE_CFN_HYPOT:\n+    CASE_CFN_HYPOT_FN:\n       return do_mpfr_arg2 (result, mpfr_hypot, arg0, arg1, format);\n \n     CASE_CFN_COPYSIGN:\n@@ -1399,9 +1433,11 @@ fold_const_call_sss (real_value *result, combined_fn fn,\n       return do_mpfr_arg2 (result, mpfr_max, arg0, arg1, format);\n \n     CASE_CFN_POW:\n+    CASE_CFN_POW_FN:\n       return fold_const_pow (result, arg0, arg1, format);\n \n     CASE_CFN_NEXTAFTER:\n+    CASE_CFN_NEXTAFTER_FN:\n     CASE_CFN_NEXTTOWARD:\n       return fold_const_nextafter (result, arg0, arg1, format);\n \n@@ -1425,10 +1461,13 @@ fold_const_call_sss (real_value *result, combined_fn fn,\n   switch (fn)\n     {\n     CASE_CFN_LDEXP:\n+    CASE_CFN_LDEXP_FN:\n       return fold_const_builtin_load_exponent (result, arg0, arg1, format);\n \n     CASE_CFN_SCALBN:\n+    CASE_CFN_SCALBN_FN:\n     CASE_CFN_SCALBLN:\n+    CASE_CFN_SCALBLN_FN:\n       return (format->b == 2\n \t      && fold_const_builtin_load_exponent (result, arg0, arg1,\n \t\t\t\t\t\t   format));"}, {"sha": "16384a8dc0d212e88ba4d79e92a1a0d5e6f0540c", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f940822816917fea276654514eccdc8eacd5e93/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f940822816917fea276654514eccdc8eacd5e93/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=7f940822816917fea276654514eccdc8eacd5e93", "patch": "@@ -14797,16 +14797,25 @@ tree_call_nonnegative_warnv_p (tree type, combined_fn fn, tree arg0, tree arg1,\n   switch (fn)\n     {\n     CASE_CFN_ACOS:\n+    CASE_CFN_ACOS_FN:\n     CASE_CFN_ACOSH:\n+    CASE_CFN_ACOSH_FN:\n     CASE_CFN_CABS:\n     CASE_CFN_COSH:\n+    CASE_CFN_COSH_FN:\n     CASE_CFN_ERFC:\n+    CASE_CFN_ERFC_FN:\n     CASE_CFN_EXP:\n+    CASE_CFN_EXP_FN:\n     CASE_CFN_EXP10:\n     CASE_CFN_EXP2:\n+    CASE_CFN_EXP2_FN:\n     CASE_CFN_FABS:\n+    CASE_CFN_FABS_FN:\n     CASE_CFN_FDIM:\n+    CASE_CFN_FDIM_FN:\n     CASE_CFN_HYPOT:\n+    CASE_CFN_HYPOT_FN:\n     CASE_CFN_POW10:\n     CASE_CFN_FFS:\n     CASE_CFN_PARITY:\n@@ -14828,17 +14837,25 @@ tree_call_nonnegative_warnv_p (tree type, combined_fn fn, tree arg0, tree arg1,\n       return RECURSE (arg0);\n \n     CASE_CFN_ASINH:\n+    CASE_CFN_ASINH_FN:\n     CASE_CFN_ATAN:\n+    CASE_CFN_ATAN_FN:\n     CASE_CFN_ATANH:\n+    CASE_CFN_ATANH_FN:\n     CASE_CFN_CBRT:\n+    CASE_CFN_CBRT_FN:\n     CASE_CFN_CEIL:\n     CASE_CFN_CEIL_FN:\n     CASE_CFN_ERF:\n+    CASE_CFN_ERF_FN:\n     CASE_CFN_EXPM1:\n+    CASE_CFN_EXPM1_FN:\n     CASE_CFN_FLOOR:\n     CASE_CFN_FLOOR_FN:\n     CASE_CFN_FMOD:\n+    CASE_CFN_FMOD_FN:\n     CASE_CFN_FREXP:\n+    CASE_CFN_FREXP_FN:\n     CASE_CFN_ICEIL:\n     CASE_CFN_IFLOOR:\n     CASE_CFN_IRINT:\n@@ -14849,10 +14866,15 @@ tree_call_nonnegative_warnv_p (tree type, combined_fn fn, tree arg0, tree arg1,\n     CASE_CFN_LLCEIL:\n     CASE_CFN_LLFLOOR:\n     CASE_CFN_LLRINT:\n+    CASE_CFN_LLRINT_FN:\n     CASE_CFN_LLROUND:\n+    CASE_CFN_LLROUND_FN:\n     CASE_CFN_LRINT:\n+    CASE_CFN_LRINT_FN:\n     CASE_CFN_LROUND:\n+    CASE_CFN_LROUND_FN:\n     CASE_CFN_MODF:\n+    CASE_CFN_MODF_FN:\n     CASE_CFN_NEARBYINT:\n     CASE_CFN_NEARBYINT_FN:\n     CASE_CFN_RINT:\n@@ -14863,11 +14885,15 @@ tree_call_nonnegative_warnv_p (tree type, combined_fn fn, tree arg0, tree arg1,\n     CASE_CFN_ROUNDEVEN_FN:\n     CASE_CFN_SCALB:\n     CASE_CFN_SCALBLN:\n+    CASE_CFN_SCALBLN_FN:\n     CASE_CFN_SCALBN:\n+    CASE_CFN_SCALBN_FN:\n     CASE_CFN_SIGNBIT:\n     CASE_CFN_SIGNIFICAND:\n     CASE_CFN_SINH:\n+    CASE_CFN_SINH_FN:\n     CASE_CFN_TANH:\n+    CASE_CFN_TANH_FN:\n     CASE_CFN_TRUNC:\n     CASE_CFN_TRUNC_FN:\n       /* True if the 1st argument is nonnegative.  */\n@@ -14907,6 +14933,7 @@ tree_call_nonnegative_warnv_p (tree type, combined_fn fn, tree arg0, tree arg1,\n       return RECURSE (arg0);\n \n     CASE_CFN_POW:\n+    CASE_CFN_POW_FN:\n       /* True if the 1st argument is nonnegative or the second\n \t argument is an even integer valued real.  */\n       if (TREE_CODE (arg1) == REAL_CST)"}, {"sha": "304a459ee0b5e252e787fe9714fe9261c515c9c7", "filename": "gcc/testsuite/gcc.dg/torture/floatn-builtin.h", "status": "modified", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f940822816917fea276654514eccdc8eacd5e93/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-builtin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f940822816917fea276654514eccdc8eacd5e93/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-builtin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-builtin.h?ref=7f940822816917fea276654514eccdc8eacd5e93", "patch": "@@ -20,19 +20,101 @@\n extern void exit (int);\n extern void abort (void);\n \n+extern int test_i;\n+extern long int test_l;\n+extern long long int test_ll;\n extern TYPE test_type;\n extern __typeof (FN (__builtin_inf) ()) test_type;\n extern __typeof (FN (__builtin_huge_val) ()) test_type;\n extern __typeof (FN (__builtin_nan) (\"\")) test_type;\n extern __typeof (FN (__builtin_nans) (\"\")) test_type;\n extern __typeof (FN (__builtin_fabs) (0)) test_type;\n extern __typeof (FN (__builtin_copysign) (0, 0)) test_type;\n+extern __typeof (FN (__builtin_acosh) (0)) test_type;\n+extern __typeof (FN (__builtin_acos) (0)) test_type;\n+extern __typeof (FN (__builtin_asinh) (0)) test_type;\n+extern __typeof (FN (__builtin_asin) (0)) test_type;\n+extern __typeof (FN (__builtin_atanh) (0)) test_type;\n+extern __typeof (FN (__builtin_atan) (0)) test_type;\n+extern __typeof (FN (__builtin_cbrt) (0)) test_type;\n+extern __typeof (FN (__builtin_cosh) (0)) test_type;\n+extern __typeof (FN (__builtin_cos) (0)) test_type;\n+extern __typeof (FN (__builtin_erfc) (0)) test_type;\n+extern __typeof (FN (__builtin_erf) (0)) test_type;\n+extern __typeof (FN (__builtin_exp2) (0)) test_type;\n+extern __typeof (FN (__builtin_exp) (0)) test_type;\n+extern __typeof (FN (__builtin_expm1) (0)) test_type;\n+extern __typeof (FN (__builtin_lgamma) (0)) test_type;\n+extern __typeof (FN (__builtin_log10) (0)) test_type;\n+extern __typeof (FN (__builtin_log1p) (0)) test_type;\n+extern __typeof (FN (__builtin_log2) (0)) test_type;\n+extern __typeof (FN (__builtin_logb) (0)) test_type;\n+extern __typeof (FN (__builtin_log) (0)) test_type;\n+extern __typeof (FN (__builtin_nextafter) (0, 0)) test_type;\n+extern __typeof (FN (__builtin_sinh) (0)) test_type;\n+extern __typeof (FN (__builtin_sin) (0)) test_type;\n+extern __typeof (FN (__builtin_tanh) (0)) test_type;\n+extern __typeof (FN (__builtin_tan) (0)) test_type;\n+extern __typeof (FN (__builtin_tgamma) (0)) test_type;\n+extern __typeof (FN (__builtin_atan2) (0, 0)) test_type;\n+extern __typeof (FN (__builtin_fdim) (0, 0)) test_type;\n+extern __typeof (FN (__builtin_fmod) (0, 0)) test_type;\n+extern __typeof (FN (__builtin_frexp) (0, &test_i)) test_type;\n+extern __typeof (FN (__builtin_ldexp) (0, 0)) test_type;\n+extern __typeof (FN (__builtin_hypot) (0, 0)) test_type;\n+extern __typeof (FN (__builtin_ilogb) (0)) test_i;\n+extern __typeof (FN (__builtin_llrint) (0)) test_ll;\n+extern __typeof (FN (__builtin_llround) (0)) test_ll;\n+extern __typeof (FN (__builtin_lrint) (0)) test_l;\n+extern __typeof (FN (__builtin_lround) (0)) test_l;\n+extern __typeof (FN (__builtin_modf) (0, &test_type)) test_type;\n+extern __typeof (FN (__builtin_pow) (0, 0)) test_type;\n+extern __typeof (FN (__builtin_remainder) (0, 0)) test_type;\n+extern __typeof (FN (__builtin_remquo) (0, 0, &test_i)) test_type;\n+extern __typeof (FN (__builtin_scalbln) (0, 0L)) test_type;\n+extern __typeof (FN (__builtin_scalbn) (0, 0)) test_type;\n \n volatile TYPE inf_cst = FN (__builtin_inf) ();\n volatile TYPE huge_val_cst = FN (__builtin_huge_val) ();\n volatile TYPE nan_cst = FN (__builtin_nan) (\"\");\n volatile TYPE nans_cst = FN (__builtin_nans) (\"\");\n volatile TYPE neg0 = -CST (0.0), neg1 = -CST (1.0), one = 1.0;\n+volatile TYPE t1 = FN (__builtin_acosh) (CST (1.0));\n+volatile TYPE t2 = FN (__builtin_acos) (CST (1.0));\n+volatile TYPE t3 = FN (__builtin_asinh) (CST (0.0));\n+volatile TYPE t4 = FN (__builtin_asin) (CST (0.0));\n+volatile TYPE t5 = FN (__builtin_atanh) (CST (0.0));\n+volatile TYPE t6 = FN (__builtin_atan) (CST (0.0));\n+volatile TYPE t7 = FN (__builtin_cbrt) (CST (27.0));\n+volatile TYPE t8 = FN (__builtin_cosh) (CST (0.0));\n+volatile TYPE t9 = FN (__builtin_cos) (CST (0.0));\n+volatile TYPE t10 = FN (__builtin_erfc) (CST (0.0));\n+volatile TYPE t11 = FN (__builtin_erf) (CST (0.0));\n+volatile TYPE t12 = FN (__builtin_exp2) (CST (1.0));\n+volatile TYPE t13 = FN (__builtin_exp) (CST (0.0));\n+volatile TYPE t14 = FN (__builtin_expm1) (CST (0.0));\n+volatile TYPE t15 = FN (__builtin_log10) (CST (1.0));\n+volatile TYPE t16 = FN (__builtin_log1p) (CST (0.0));\n+volatile TYPE t17 = FN (__builtin_log2) (CST (1.0));\n+volatile TYPE t18 = FN (__builtin_logb) (CST (1.0));\n+volatile TYPE t19 = FN (__builtin_log) (CST (1.0));\n+volatile TYPE t20 = FN (__builtin_nextafter) (CST (0.0), CST (0.0));\n+volatile TYPE t21 = FN (__builtin_sinh) (CST (0.0));\n+volatile TYPE t22 = FN (__builtin_sin) (CST (0.0));\n+volatile TYPE t23 = FN (__builtin_tanh) (CST (0.0));\n+volatile TYPE t24 = FN (__builtin_tan) (CST (0.0));\n+volatile TYPE t25 = FN (__builtin_atan2) (CST (0.0), CST (1.0));\n+volatile TYPE t26 = FN (__builtin_fdim) (CST (0.0), CST (0.0));\n+volatile TYPE t27 = FN (__builtin_fmod) (CST (0.0), CST (1.0));\n+volatile TYPE t28 = FN (__builtin_ldexp) (CST (1.0), 1);\n+volatile TYPE t29 = FN (__builtin_hypot) (CST (3.0), CST (4.0));\n+volatile int t30 = FN (__builtin_ilogb) (CST (1.0));\n+volatile long long int t31 = FN (__builtin_llround) (CST (42.25));\n+volatile long int t32 = FN (__builtin_lround) (CST (42.25));\n+volatile TYPE t33 = FN (__builtin_pow) (CST (1.0), CST (2.0));\n+volatile TYPE t34 = FN (__builtin_remainder) (CST (7.0), CST (4.0));\n+volatile TYPE t35 = FN (__builtin_scalbln) (CST (1.0), 1L);\n+volatile TYPE t36 = FN (__builtin_scalbn) (CST (1.0), 1);\n \n int\n main (void)\n@@ -60,5 +142,77 @@ main (void)\n   r = FN (__builtin_copysign) (-inf_cst, one);\n   if (r != huge_val_cst)\n     abort ();\n+  if (t1 != CST (0.0))\n+    abort ();\n+  if (t2 != CST (0.0))\n+    abort ();\n+  if (t3 != CST (0.0))\n+    abort ();\n+  if (t4 != CST (0.0))\n+    abort ();\n+  if (t5 != CST (0.0))\n+    abort ();\n+  if (t6 != CST (0.0))\n+    abort ();\n+  if (t7 != CST (3.0))\n+    abort ();\n+  if (t8 != CST (1.0))\n+    abort ();\n+  if (t9 != CST (1.0))\n+    abort ();\n+  if (t10 != CST (1.0))\n+    abort ();\n+  if (t11 != CST (0.0))\n+    abort ();\n+  if (t12 != CST (2.0))\n+    abort ();\n+  if (t13 != CST (1.0))\n+    abort ();\n+  if (t14 != CST (0.0))\n+    abort ();\n+  if (t15 != CST (0.0))\n+    abort ();\n+  if (t16 != CST (0.0))\n+    abort ();\n+  if (t17 != CST (0.0))\n+    abort ();\n+  if (t18 != CST (0.0))\n+    abort ();\n+  if (t19 != CST (0.0))\n+    abort ();\n+  if (t20 != CST (0.0))\n+    abort ();\n+  if (t21 != CST (0.0))\n+    abort ();\n+  if (t22 != CST (0.0))\n+    abort ();\n+  if (t23 != CST (0.0))\n+    abort ();\n+  if (t24 != CST (0.0))\n+    abort ();\n+  if (t25 != CST (0.0))\n+    abort ();\n+  if (t26 != CST (0.0))\n+    abort ();\n+  if (t27 != CST (0.0))\n+    abort ();\n+  if (t28 != CST (2.0))\n+    abort ();\n+  if (t29 != CST (5.0))\n+    abort ();\n+  if (t30 != 0)\n+    abort ();\n+  if (t31 != 42)\n+    abort ();\n+  if (t32 != 42)\n+    abort ();\n+  if (t33 != CST (1.0))\n+    abort ();\n+  if (t34 != -CST (1.0))\n+    abort ();\n+  if (t35 != CST (2.0))\n+    abort ();\n+  if (t36 != CST (2.0))\n+    abort ();\n   exit (0);\n }"}, {"sha": "b4b14a016f7073c62de3a60b2e48c7bf05c32007", "filename": "gcc/tree-call-cdce.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f940822816917fea276654514eccdc8eacd5e93/gcc%2Ftree-call-cdce.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f940822816917fea276654514eccdc8eacd5e93/gcc%2Ftree-call-cdce.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.cc?ref=7f940822816917fea276654514eccdc8eacd5e93", "patch": "@@ -295,22 +295,35 @@ can_test_argument_range (gcall *call)\n     {\n     /* Trig functions.  */\n     CASE_FLT_FN (BUILT_IN_ACOS):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_ACOS):\n     CASE_FLT_FN (BUILT_IN_ASIN):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_ASIN):\n     /* Hyperbolic functions.  */\n     CASE_FLT_FN (BUILT_IN_ACOSH):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_ACOSH):\n     CASE_FLT_FN (BUILT_IN_ATANH):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_ATANH):\n     CASE_FLT_FN (BUILT_IN_COSH):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_COSH):\n     CASE_FLT_FN (BUILT_IN_SINH):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_SINH):\n     /* Log functions.  */\n     CASE_FLT_FN (BUILT_IN_LOG):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_LOG):\n     CASE_FLT_FN (BUILT_IN_LOG2):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_LOG2):\n     CASE_FLT_FN (BUILT_IN_LOG10):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_LOG10):\n     CASE_FLT_FN (BUILT_IN_LOG1P):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_LOG1P):\n     /* Exp functions.  */\n     CASE_FLT_FN (BUILT_IN_EXP):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_EXP):\n     CASE_FLT_FN (BUILT_IN_EXP2):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_EXP2):\n     CASE_FLT_FN (BUILT_IN_EXP10):\n     CASE_FLT_FN (BUILT_IN_EXPM1):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_EXPM1):\n     CASE_FLT_FN (BUILT_IN_POW10):\n     /* Sqrt.  */\n     CASE_FLT_FN (BUILT_IN_SQRT):\n@@ -337,15 +350,22 @@ edom_only_function (gcall *call)\n   switch (DECL_FUNCTION_CODE (gimple_call_fndecl (call)))\n     {\n     CASE_FLT_FN (BUILT_IN_ACOS):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_ACOS):\n     CASE_FLT_FN (BUILT_IN_ASIN):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_ASIN):\n     CASE_FLT_FN (BUILT_IN_ATAN):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_ATAN):\n     CASE_FLT_FN (BUILT_IN_COS):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_COS):\n     CASE_FLT_FN (BUILT_IN_SIGNIFICAND):\n     CASE_FLT_FN (BUILT_IN_SIN):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_SIN):\n     CASE_FLT_FN (BUILT_IN_SQRT):\n     CASE_FLT_FN_FLOATN_NX (BUILT_IN_SQRT):\n     CASE_FLT_FN (BUILT_IN_FMOD):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_FMOD):\n     CASE_FLT_FN (BUILT_IN_REMAINDER):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_REMAINDER):\n       return true;\n \n     default:"}]}