{"sha": "84237dbbf3c013e9f2347414df48bcba0a328db6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQyMzdkYmJmM2MwMTNlOWYyMzQ3NDE0ZGY0OGJjYmEwYTMyOGRiNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-11-11T11:46:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-11-11T11:46:10Z"}, "message": "stl_list.h (list<>::_M_create_node<>(_Args&&...), [...]): Add.\n\n2007-11-11  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_list.h (list<>::_M_create_node<>(_Args&&...),\n\t_M_insert<>(iterator, _Args&&...), push_front<>(_Args&&...),\n\tpush_back<>(_Args&&...)): Add.\n\t(list<>::emplace<>(iterator, _Args&&...), insert(iterator,\n\tvalue_type&&)): Declare.\n\t(splice(iterator, list&&), splice(iterator, list&&, iterator),\n\tsplice(iterator, list&&, iterator, iterator), merge(list&&),\n\tmerge(list&&, _StrictWeakOrdering)): Add C++0x signatures.\n\t* include/bits/list.tcc (list<>::emplace<>(iterator, _Args&&...),\n\tinsert(iterator, value_type&&)): Define.\n\t* include/debug/list (list<>::emplace<>(iterator, _Args&&...),\n\tinsert(iterator, value_type&&)): Add.\n\t(splice(iterator, list&&), splice(iterator, list&&, iterator),\n\tsplice(iterator, list&&, iterator, iterator), merge(list&&),\n\tmerge(list&&, _StrictWeakOrdering)): Add C++0x signatures, use\n\t_GLIBCXX_MOVE.\n\nFrom-SVN: r130082", "tree": {"sha": "0184e79d28fd8a7efea4d00614f785f17738456f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0184e79d28fd8a7efea4d00614f785f17738456f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84237dbbf3c013e9f2347414df48bcba0a328db6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84237dbbf3c013e9f2347414df48bcba0a328db6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84237dbbf3c013e9f2347414df48bcba0a328db6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84237dbbf3c013e9f2347414df48bcba0a328db6/comments", "author": null, "committer": null, "parents": [{"sha": "d4b5dc8945c2739a93c17b5d5b649e5c7d4179b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b5dc8945c2739a93c17b5d5b649e5c7d4179b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b5dc8945c2739a93c17b5d5b649e5c7d4179b9"}], "stats": {"total": 220, "additions": 208, "deletions": 12}, "files": [{"sha": "71b9311870e43173f55a5234fbfc39cfc1e7631a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84237dbbf3c013e9f2347414df48bcba0a328db6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84237dbbf3c013e9f2347414df48bcba0a328db6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=84237dbbf3c013e9f2347414df48bcba0a328db6", "patch": "@@ -1,3 +1,22 @@\n+2007-11-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_list.h (list<>::_M_create_node<>(_Args&&...),\n+\t_M_insert<>(iterator, _Args&&...), push_front<>(_Args&&...),\n+\tpush_back<>(_Args&&...)): Add.\n+\t(list<>::emplace<>(iterator, _Args&&...), insert(iterator,\n+\tvalue_type&&)): Declare.\n+\t(splice(iterator, list&&), splice(iterator, list&&, iterator),\n+\tsplice(iterator, list&&, iterator, iterator), merge(list&&),\n+\tmerge(list&&, _StrictWeakOrdering)): Add C++0x signatures.\n+\t* include/bits/list.tcc (list<>::emplace<>(iterator, _Args&&...),\n+\tinsert(iterator, value_type&&)): Define.\n+\t* include/debug/list (list<>::emplace<>(iterator, _Args&&...),\n+\tinsert(iterator, value_type&&)): Add.\n+\t(splice(iterator, list&&), splice(iterator, list&&, iterator),\n+\tsplice(iterator, list&&, iterator, iterator), merge(list&&),\n+\tmerge(list&&, _StrictWeakOrdering)): Add C++0x signatures, use\n+\t_GLIBCXX_MOVE.\n+\n 2007-11-09  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_deque.h (deque<>::operator=(deque&&)): Implement"}, {"sha": "a7fcfb395ff5ad44bd378e1da46550bf6c176de8", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84237dbbf3c013e9f2347414df48bcba0a328db6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84237dbbf3c013e9f2347414df48bcba0a328db6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=84237dbbf3c013e9f2347414df48bcba0a328db6", "patch": "@@ -80,6 +80,19 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t}\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, typename _Alloc>\n+    template<typename... _Args>\n+      typename list<_Tp, _Alloc>::iterator\n+      list<_Tp, _Alloc>::\n+      emplace(iterator __position, _Args&&... __args)\n+      {\n+\t_Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);\n+\t__tmp->hook(__position._M_node);\n+\treturn iterator(__tmp);\n+      }\n+#endif\n+\n   template<typename _Tp, typename _Alloc>\n     typename list<_Tp, _Alloc>::iterator\n     list<_Tp, _Alloc>::\n@@ -90,6 +103,18 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       return iterator(__tmp);\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, typename _Alloc>\n+    typename list<_Tp, _Alloc>::iterator\n+    list<_Tp, _Alloc>::\n+    insert(iterator __position, value_type&& __x)\n+    {\n+      _Node* __tmp = _M_create_node(std::move(__x));\n+      __tmp->hook(__position._M_node);\n+      return iterator(__tmp);\n+    }\n+#endif\n+\n   template<typename _Tp, typename _Alloc>\n     typename list<_Tp, _Alloc>::iterator\n     list<_Tp, _Alloc>::\n@@ -220,7 +245,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n   template<typename _Tp, typename _Alloc>\n     void\n     list<_Tp, _Alloc>::\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    merge(list&& __x)\n+#else\n     merge(list& __x)\n+#endif\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 300. list::merge() specification incomplete\n@@ -250,7 +279,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     template <typename _StrictWeakOrdering>\n       void\n       list<_Tp, _Alloc>::\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      merge(list&& __x, _StrictWeakOrdering __comp)\n+#else\n       merge(list& __x, _StrictWeakOrdering __comp)\n+#endif\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 300. list::merge() specification incomplete"}, {"sha": "3b143c212e819f3e9fb7dc536052bf18450db845", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 101, "deletions": 1, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84237dbbf3c013e9f2347414df48bcba0a328db6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84237dbbf3c013e9f2347414df48bcba0a328db6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=84237dbbf3c013e9f2347414df48bcba0a328db6", "patch": "@@ -463,6 +463,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  Allocates space for a new node and constructs a copy of @a x in it.\n        *  @endif\n        */\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       _Node*\n       _M_create_node(const value_type& __x)\n       {\n@@ -478,6 +479,25 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t  }\n \treturn __p;\n       }\n+#else\n+      template<typename... _Args>\n+        _Node*\n+        _M_create_node(_Args&&... __args)\n+\t{\n+\t  _Node* __p = this->_M_get_node();\n+\t  try\n+\t    {\n+\t      _M_get_Tp_allocator().construct(&__p->_M_data,\n+\t\t\t\t\t      std::forward<_Args>(__args)...);\n+\t    }\n+\t  catch(...)\n+\t    {\n+\t      _M_put_node(__p);\n+\t      __throw_exception_again;\n+\t    }\n+\t  return __p;\n+\t}\n+#endif\n \n     public:\n       // [23.2.2.1] construct/copy/destroy\n@@ -823,9 +843,16 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  done in constant time, and does not invalidate iterators and\n        *  references.\n        */\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push_front(const value_type& __x)\n       { this->_M_insert(begin(), __x); }\n+#else\n+      template<typename... _Args>\n+        void\n+        push_front(_Args&&... __args)\n+\t{ this->_M_insert(begin(), std::forward<_Args>(__args)...); }\n+#endif\n \n       /**\n        *  @brief  Removes first element.\n@@ -853,9 +880,16 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  in constant time, and does not invalidate iterators and\n        *  references.\n        */\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       push_back(const value_type& __x)\n       { this->_M_insert(end(), __x); }\n+#else\n+      template<typename... _Args>\n+        void\n+        push_back(_Args&&... __args)\n+\t{ this->_M_insert(end(), std::forward<_Args>(__args)...); }\n+#endif\n \n       /**\n        *  @brief  Removes last element.\n@@ -872,6 +906,24 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       pop_back()\n       { this->_M_erase(iterator(this->_M_impl._M_node._M_prev)); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Constructs object in %list before specified iterator.\n+       *  @param  position  A const_iterator into the %list.\n+       *  @param  args  Arguments.\n+       *  @return  An iterator that points to the inserted data.\n+       *\n+       *  This function will insert an object of type T constructed\n+       *  with T(std::forward<Args>(args)...) before the specified\n+       *  location.  Due to the nature of a %list this operation can\n+       *  be done in constant time, and does not invalidate iterators\n+       *  and references.\n+       */\n+      template<typename... _Args>\n+        iterator\n+        emplace(iterator __position, _Args&&... __args);\n+#endif\n+\n       /**\n        *  @brief  Inserts given value into %list before specified iterator.\n        *  @param  position  An iterator into the %list.\n@@ -886,6 +938,22 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       iterator\n       insert(iterator __position, const value_type& __x);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Inserts given rvalue into %list before specified iterator.\n+       *  @param  position  An iterator into the %list.\n+       *  @param  x  Data to be inserted.\n+       *  @return  An iterator that points to the inserted data.\n+       *\n+       *  This function will insert a copy of the given rvalue before\n+       *  the specified location.  Due to the nature of a %list this\n+       *  operation can be done in constant time, and does not\n+       *  invalidate iterators and references.\n+        */\n+      iterator\n+      insert(iterator __position, value_type&& __x);\n+#endif\n+\n       /**\n        *  @brief  Inserts a number of copies of given data into the %list.\n        *  @param  position  An iterator into the %list.\n@@ -1021,7 +1089,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  Requires this != @a x.\n        */\n       void\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      splice(iterator __position, list&& __x)\n+#else\n       splice(iterator __position, list& __x)\n+#endif\n       {\n \tif (!__x.empty())\n \t  {\n@@ -1041,7 +1113,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  inserts it into the current list before @a position.\n        */\n       void\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      splice(iterator __position, list&& __x, iterator __i)\n+#else\n       splice(iterator __position, list& __x, iterator __i)\n+#endif\n       {\n \titerator __j = __i;\n \t++__j;\n@@ -1067,7 +1143,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  Undefined if @a position is in [first,last).\n        */\n       void\n-      splice(iterator __position, list& __x, iterator __first, iterator __last)\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      splice(iterator __position, list&& __x, iterator __first,\n+\t     iterator __last)\n+#else\n+      splice(iterator __position, list& __x, iterator __first,\n+\t     iterator __last)\n+#endif\n       {\n \tif (__first != __last)\n \t  {\n@@ -1146,7 +1228,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  this list precede elements in @a x that are equal.\n        */\n       void\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      merge(list&& __x);\n+#else\n       merge(list& __x);\n+#endif\n \n       /**\n        *  @brief  Merge sorted lists according to comparison function.\n@@ -1162,7 +1248,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        */\n       template<typename _StrictWeakOrdering>\n         void\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+        merge(list&&, _StrictWeakOrdering);\n+#else\n         merge(list&, _StrictWeakOrdering);\n+#endif\n \n       /**\n        *  @brief  Reverse the elements in list.\n@@ -1253,12 +1343,22 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       { __position._M_node->transfer(__first._M_node, __last._M_node); }\n \n       // Inserts new element at position given and with value given.\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       void\n       _M_insert(iterator __position, const value_type& __x)\n       {\n         _Node* __tmp = _M_create_node(__x);\n         __tmp->hook(__position._M_node);\n       }\n+#else\n+     template<typename... _Args>\n+       void\n+       _M_insert(iterator __position, _Args&&... __args)\n+       {\n+\t _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);\n+\t __tmp->hook(__position._M_node);\n+       }\n+#endif\n \n       // Erases element at position given.\n       void"}, {"sha": "9b7f33bf4ca0b3225fe7e3de9eb6c25e49b11971", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 51, "deletions": 7, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84237dbbf3c013e9f2347414df48bcba0a328db6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84237dbbf3c013e9f2347414df48bcba0a328db6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=84237dbbf3c013e9f2347414df48bcba0a328db6", "patch": "@@ -301,13 +301,34 @@ namespace __debug\n \t_Base::pop_back();\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename... _Args>\n+        iterator\n+        emplace(iterator __position, _Args&&... __args)\n+\t{\n+\t  __glibcxx_check_insert(__position);\n+\t  return iterator(_Base::emplace(__position.base(),\n+\t\t\t\t\tstd::forward<_Args>(__args)...), this);\n+\t}\n+#endif\n+\n       iterator\n       insert(iterator __position, const _Tp& __x)\n       {\n \t__glibcxx_check_insert(__position);\n \treturn iterator(_Base::insert(__position.base(), __x), this);\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      iterator\n+      insert(iterator __position, _Tp&& __x)\n+      {\n+\t__glibcxx_check_insert(__position);\n+\treturn iterator(_Base::insert(__position.base(),\n+\t\t\t\t      std::move(__x)), this);\n+      }\n+#endif\n+\n       void\n       insert(iterator __position, size_type __n, const _Tp& __x)\n       {\n@@ -367,16 +388,24 @@ namespace __debug\n \n       // 23.2.2.4 list operations:\n       void\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      splice(iterator __position, list&& __x)\n+#else\n       splice(iterator __position, list& __x)\n+#endif\n       {\n \t_GLIBCXX_DEBUG_VERIFY(&__x != this,\n \t\t\t      _M_message(__gnu_debug::__msg_self_splice)\n \t\t\t      ._M_sequence(*this, \"this\"));\n-\tthis->splice(__position, __x, __x.begin(), __x.end());\n+\tthis->splice(__position, _GLIBCXX_MOVE(__x), __x.begin(), __x.end());\n       }\n \n       void\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      splice(iterator __position, list&& __x, iterator __i)\n+#else\n       splice(iterator __position, list& __x, iterator __i)\n+#endif\n       {\n \t__glibcxx_check_insert(__position);\n \n@@ -393,11 +422,18 @@ namespace __debug\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 250. splicing invalidates iterators\n \tthis->_M_transfer_iter(__i);\n-\t_Base::splice(__position.base(), __x._M_base(), __i.base());\n+\t_Base::splice(__position.base(), _GLIBCXX_MOVE(__x._M_base()),\n+\t\t      __i.base());\n       }\n \n       void\n-      splice(iterator __position, list& __x, iterator __first, iterator __last)\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      splice(iterator __position, list&& __x, iterator __first,\n+\t     iterator __last)\n+#else\n+      splice(iterator __position, list& __x, iterator __first,\n+\t     iterator __last)\n+#endif\n       {\n \t__glibcxx_check_insert(__position);\n \t__glibcxx_check_valid_range(__first, __last);\n@@ -422,8 +458,8 @@ namespace __debug\n \t    this->_M_transfer_iter(__victim);\n \t  }\n \n-\t_Base::splice(__position.base(), __x._M_base(), __first.base(),\n-\t\t      __last.base());\n+\t_Base::splice(__position.base(), _GLIBCXX_MOVE(__x._M_base()),\n+\t\t      __first.base(), __last.base());\n       }\n \n       void\n@@ -489,7 +525,11 @@ namespace __debug\n \t}\n \n       void\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      merge(list&& __x)\n+#else\n       merge(list& __x)\n+#endif\n       {\n \t__glibcxx_check_sorted(_Base::begin(), _Base::end());\n \t__glibcxx_check_sorted(__x.begin().base(), __x.end().base());\n@@ -498,12 +538,16 @@ namespace __debug\n \t    iterator __victim = __tmp++;\n \t    __victim._M_attach(&__x);\n \t  }\n-\t_Base::merge(__x._M_base());\n+\t_Base::merge(_GLIBCXX_MOVE(__x._M_base()));\n       }\n \n       template<class _Compare>\n         void\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+        merge(list&& __x, _Compare __comp)\n+#else\n         merge(list& __x, _Compare __comp)\n+#endif\n         {\n \t  __glibcxx_check_sorted_pred(_Base::begin(), _Base::end(), __comp);\n \t  __glibcxx_check_sorted_pred(__x.begin().base(), __x.end().base(),\n@@ -513,7 +557,7 @@ namespace __debug\n \t      iterator __victim = __tmp++;\n \t      __victim._M_attach(&__x);\n \t    }\n-\t  _Base::merge(__x._M_base(), __comp);\n+\t  _Base::merge(_GLIBCXX_MOVE(__x._M_base()), __comp);\n \t}\n \n       void"}, {"sha": "853e9300c1ec794418aef0f73cdced9402cf7a3f", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84237dbbf3c013e9f2347414df48bcba0a328db6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84237dbbf3c013e9f2347414df48bcba0a328db6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=84237dbbf3c013e9f2347414df48bcba0a328db6", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1236 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1326 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "ea84200d9a5987487705104e5cef1b43f82a2f1a", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84237dbbf3c013e9f2347414df48bcba0a328db6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84237dbbf3c013e9f2347414df48bcba0a328db6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=84237dbbf3c013e9f2347414df48bcba0a328db6", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1205 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1295 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "8283353bcf70c75f019cbd71040bb14c025f58cd", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84237dbbf3c013e9f2347414df48bcba0a328db6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84237dbbf3c013e9f2347414df48bcba0a328db6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=84237dbbf3c013e9f2347414df48bcba0a328db6", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1205 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1295 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "113b0b860ff6ba321d2128fd9505d0a70f67f419", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84237dbbf3c013e9f2347414df48bcba0a328db6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84237dbbf3c013e9f2347414df48bcba0a328db6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=84237dbbf3c013e9f2347414df48bcba0a328db6", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1205 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1295 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}]}