{"sha": "9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM5ZTk3YmRiNDNiYTZmOGFkZjY0ZGVmMDFkODRlZWQzZTBjZWVlMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-09-30T17:23:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-09-30T17:23:10Z"}, "message": "PR libstdc++/10975 (DR 453)\n\n2004-09-30  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/10975 (DR 453)\n\t* include/bits/sstream.tcc (seekoff): Don't fail if __beg == 0\n\tand __off == 0.\n\t* docs/html/ext/howto.html: Add an entry for DR 453.\n\t* testsuite/27_io/basic_stringbuf/seekoff/char/10975.cc: New.\n\t* testsuite/27_io/basic_stringbuf/seekoff/wchar_t/10975.cc: Likewise.\n\t* testsuite/27_io/basic_istream/tellg/char/1.cc: Tweak consistently.\n\t* testsuite/27_io/basic_ostream/tellp/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/tellp/char/2.cc: Likewise.\n\t* testsuite/27_io/basic_istream/seekg/char/2346-fstream.cc: Fix and\n\tmove to...\n\t* testsuite/27_io/basic_istream/seekp/char/2346-fstream.cc: ... here.\n\t* testsuite/27_io/basic_istream/seekg/char/2346-sstream.cc: Fix and\n\tmove to...\n\t* testsuite/27_io/basic_istream/seekp/char/2346-sstream.cc: ... here.\n\nFrom-SVN: r88341", "tree": {"sha": "9a7f73a4be8adc366858c718dea7bb595a83dffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a7f73a4be8adc366858c718dea7bb595a83dffd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/comments", "author": null, "committer": null, "parents": [{"sha": "84eeda0c97049b5339deb94181ce5a83a12400df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84eeda0c97049b5339deb94181ce5a83a12400df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84eeda0c97049b5339deb94181ce5a83a12400df"}], "stats": {"total": 200, "additions": 173, "deletions": 27}, "files": [{"sha": "2e928168b2872e2075ed8ac9307abb112dee0a42", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1", "patch": "@@ -1,3 +1,21 @@\n+2004-09-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/10975 (DR 453)\n+\t* include/bits/sstream.tcc (seekoff): Don't fail if __beg == 0\n+\tand __off == 0.\n+\t* docs/html/ext/howto.html: Add an entry for DR 453.\n+\t* testsuite/27_io/basic_stringbuf/seekoff/char/10975.cc: New.\n+\t* testsuite/27_io/basic_stringbuf/seekoff/wchar_t/10975.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/tellg/char/1.cc: Tweak consistently.\n+\t* testsuite/27_io/basic_ostream/tellp/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/tellp/char/2.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/seekg/char/2346-fstream.cc: Fix and\n+\tmove to...\n+\t* testsuite/27_io/basic_istream/seekp/char/2346-fstream.cc: ... here.\n+\t* testsuite/27_io/basic_istream/seekg/char/2346-sstream.cc: Fix and\n+\tmove to...\n+\t* testsuite/27_io/basic_istream/seekp/char/2346-sstream.cc: ... here.\n+\n 2004-09-29  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/std/std_sstream.h (basic_stringbuf(ios_base::openmode)):"}, {"sha": "5b4a69fb1f76c5739d7e7924c8454538932024e3", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1", "patch": "@@ -496,6 +496,12 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     </dt>\n     <dd>Replace &quot;new&quot; with &quot;::new&quot;.\n     </dd>\n+\n+    <dt><a href=\"lwg-active.html#453\">453</a>:\n+        <em>basic_stringbuf::seekoff need not always fail for an empty stream</em>\n+    </dt>\n+    <dd>Don't fail if the next pointer is null and newoff is zero.\n+    </dd>\n <!--\n     <dt><a href=\"lwg-defects.html#\"></a>:\n         <em></em>"}, {"sha": "1b1232e9175515807d96f898b1c6770c7938331b", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1", "patch": "@@ -142,8 +142,10 @@ namespace std\n       __testin &= !(__mode & ios_base::out);\n       __testout &= !(__mode & ios_base::in);\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 453. basic_stringbuf::seekoff need not always fail for an empty stream.\n       const char_type* __beg = __testin ? this->eback() : this->pbase();\n-      if (__beg && (__testin || __testout || __testboth))\n+      if ((__beg || !__off) && (__testin || __testout || __testboth))\n \t{\n \t  _M_update_egptr();\n "}, {"sha": "4bbe40be919bfd13a88230a59e7a6b3199e554a8", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/tellg/char/1.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2F1.cc?ref=9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1", "patch": "@@ -31,20 +31,23 @@\n void test01()\n {\n   using namespace std;\n+  typedef ios::off_type off_type;\n   typedef ios::pos_type pos_type;\n \n   bool test __attribute__((unused)) = true;\n   const char str_lit01[] = \"istream_seeks-1.tst\";\n \n   // in\n-  // test default ctors leave things in the same positions...\n   istringstream ist1;\n   pos_type p3 = ist1.tellg();\n \n   ifstream ifs1;\n   pos_type p4 = ifs1.tellg();\n \n-  VERIFY( p3 == p4 );\n+  // N.B. We implement the resolution of DR 453 and\n+  // istringstream::tellg() doesn't fail.\n+  VERIFY( p3 == pos_type(off_type(0)) );\n+  VERIFY( p4 == pos_type(off_type(-1)) );\n \n   // in\n   // test ctors leave things in the same positions..."}, {"sha": "29d52f1998818ca4bbcdd70e158d4bca4845897b", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/seekp/char/2346-fstream.cc", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2F2346-fstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2F2346-fstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2F2346-fstream.cc?ref=9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1", "patch": "@@ -1,6 +1,6 @@\n // 2000-06-29 bkoz\n \n-// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,11 +18,11 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-// 27.6.1.3 unformatted input functions\n-// NB: ostream has a particular \"seeks\" category. Adopt this for istreams too.\n+// 27.6.2.4  basic_ostream seek members  [lib.ostream.seeks]\n // @require@ %-*.tst %-*.txt\n // @diff@ %-*.tst %-*.txt\n \n+#include <ostream>\n #include <istream>\n #include <fstream>\n #include <testsuite_hooks.h>\n@@ -32,18 +32,18 @@ const int times = 10;\n \n void write_rewind(std::iostream& stream)\n {\n+  bool test __attribute__((unused)) = true;\n+\n   for (int j = 0; j < times; j++) \n     {\n-      bool test __attribute__((unused)) = true;\n-      std::streampos begin = stream.tellg();\n+      std::streampos begin = stream.tellp();\n       \n       for (int i = 0; i < times; ++i)\n \tstream << j << '-' << i << s << '\\n';\n       \n-      stream.seekg(begin);\n-      std::streampos end = stream.tellg(); \n-      std::streampos badpos = std::streampos(std::streambuf::off_type(-1));\n+      stream.seekp(begin);\n     }\n+  VERIFY( stream.good() );\n }\n \n void check_contents(std::iostream& stream)", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_istream/seekg/char/2346-fstream.cc"}, {"sha": "e0a7071cf31ca252fcbef6607a6eeba62f49395c", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/seekp/char/2346-sstream.cc", "status": "renamed", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2F2346-sstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2F2346-sstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2F2346-sstream.cc?ref=9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1", "patch": "@@ -1,6 +1,6 @@\n // 2000-06-29 bkoz\n \n-// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,9 +18,9 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-// 27.6.1.3 unformatted input functions\n-// NB: ostream has a particular \"seeks\" category. Adopt this for istreams too.\n+// 27.6.2.4  basic_ostream seek members  [lib.ostream.seeks]\n \n+#include <ostream>\n #include <istream>\n #include <sstream>\n #include <testsuite_hooks.h>\n@@ -30,18 +30,18 @@ const int times = 10;\n \n void write_rewind(std::iostream& stream)\n {\n+  bool test __attribute__((unused)) = true;\n+\n   for (int j = 0; j < times; j++) \n     {\n-      bool test __attribute__((unused)) = true;\n-      std::streampos begin = stream.tellg();\n+      std::streampos begin = stream.tellp();\n       \n       for (int i = 0; i < times; ++i)\n \tstream << j << '-' << i << s << '\\n';\n       \n-      stream.seekg(begin);\n-      std::streampos end = stream.tellg(); \n-      std::streampos badpos = std::streampos(std::streambuf::off_type(-1));\n+      stream.seekp(begin);\n     }\n+  VERIFY( stream.good() );\n }\n \n void check_contents(std::iostream& stream)\n@@ -65,6 +65,7 @@ void check_contents(std::iostream& stream)\n \n // stringstream\n // libstdc++/2346\n+// N.B. The original testcase was broken, using tellg/seekg in write_rewind.\n void test03()\n {\t \n   std::stringstream sstrm;", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_istream/seekg/char/2346-sstream.cc"}, {"sha": "27506636b03cf8e9654cba997b8df092c8d24a4e", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/tellp/char/1.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2F1.cc?ref=9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1", "patch": "@@ -1,6 +1,6 @@\n // 2000-06-29 bkoz\n \n-// Copyright (C) 2000, 2003 Free Software Foundation\n+// Copyright (C) 2000, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,24 +25,26 @@\n #include <fstream>\n #include <testsuite_hooks.h>\n \n-\n void test01()\n {\n   using namespace std;\n+  typedef ios::off_type off_type;\n   typedef ios::pos_type pos_type;\n \n   bool test __attribute__((unused)) = true;\n   const char str_lit01[] = \"ostream_seeks-1.txt\";\n \n   // out\n-  // test default ctors leave things in the same positions...\n   ostringstream ost1;\n   pos_type p1 = ost1.tellp();\n \n   ofstream ofs1;\n   pos_type p2 = ofs1.tellp();\n \n-  VERIFY( p1 == p2 );\n+  // N.B. We implement the resolution of DR 453 and\n+  // ostringstream::tellp() doesn't fail.\n+  VERIFY( p1 == pos_type(off_type(0)) );\n+  VERIFY( p2 == pos_type(off_type(-1)) );\n \n   // out\n   // test ctors leave things in the same positions..."}, {"sha": "acdc3b4cc75b7c5c25e7151596726f6d427af966", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/tellp/char/2.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2F2.cc?ref=9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1", "patch": "@@ -1,6 +1,6 @@\n // 2000-03-23 bkoz\n \n-// Copyright (C) 2000, 2003 Free Software Foundation\n+// Copyright (C) 2000, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,13 +33,13 @@ void test01()\n   ostringstream ost;\n   pos_type pos1;\n   pos1 = ost.tellp();\n-  VERIFY( pos1 == pos_type(-1) );\n+  VERIFY( pos1 == pos_type(off_type(0)) );\n   ost << \"RZA \";\n   pos1 = ost.tellp();\n-  VERIFY( pos1 == pos_type(4) );\n+  VERIFY( pos1 == pos_type(off_type(4)) );\n   ost << \"ghost dog: way of the samurai\";\n   pos1 = ost.tellp();\n-  VERIFY( pos1 == pos_type(33) );\n+  VERIFY( pos1 == pos_type(off_type(33)) );\n }                                    \n \n int main()"}, {"sha": "d97ecc98992bf242b96aafad427c2ed3ba416df5", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/seekoff/char/10975.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fchar%2F10975.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fchar%2F10975.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fchar%2F10975.cc?ref=9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1", "patch": "@@ -0,0 +1,57 @@\n+// 2004-09-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/10975\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  typedef streambuf::pos_type pos_type;\n+  typedef streambuf::off_type off_type;\n+\n+  const pos_type good = pos_type(off_type(0));\n+  const pos_type bad = pos_type(off_type(-1));\n+  pos_type p;\n+\n+  stringbuf sbuf;\n+  \n+  p = sbuf.pubseekoff(0, ios_base::cur, ios_base::in);\n+  VERIFY( p == good );\n+\n+  p = sbuf.pubseekoff(0, ios_base::beg, ios_base::out);\n+  VERIFY( p == good );\n+\n+  p = sbuf.pubseekoff(0, ios_base::end);\n+  VERIFY( p == good );\n+\n+  p = sbuf.pubseekoff(0, ios_base::cur);\n+  VERIFY( p == bad );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1fef6278eb831a6747620efbff1d200c37c1bfe2", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/seekoff/wchar_t/10975.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fwchar_t%2F10975.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fwchar_t%2F10975.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fseekoff%2Fwchar_t%2F10975.cc?ref=9c9e97bdb43ba6f8adf64def01d84eed3e0ceee1", "patch": "@@ -0,0 +1,57 @@\n+// 2004-09-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/10975\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  typedef wstreambuf::pos_type pos_type;\n+  typedef wstreambuf::off_type off_type;\n+\n+  const pos_type good = pos_type(off_type(0));\n+  const pos_type bad = pos_type(off_type(-1));\n+  pos_type p;\n+\n+  wstringbuf sbuf;\n+  \n+  p = sbuf.pubseekoff(0, ios_base::cur, ios_base::in);\n+  VERIFY( p == good );\n+\n+  p = sbuf.pubseekoff(0, ios_base::beg, ios_base::out);\n+  VERIFY( p == good );\n+\n+  p = sbuf.pubseekoff(0, ios_base::end);\n+  VERIFY( p == good );\n+\n+  p = sbuf.pubseekoff(0, ios_base::cur);\n+  VERIFY( p == bad );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}]}