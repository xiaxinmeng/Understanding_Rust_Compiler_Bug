{"sha": "fb7054160f2f4a3fb62c37f64235faf00a05a789", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI3MDU0MTYwZjJmNGEzZmI2MmMzN2Y2NDIzNWZhZjAwYTA1YTc4OQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-12-26T06:10:35Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-12-26T06:10:35Z"}, "message": "vterminate.cc: Move to...\n\n2002-12-25  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* src/vterminate.cc:  Move to...\n\t* libsupc++/vterminate.cc:  ...here.  New file.  Replace fprintf with\n\twritestr macro.  Slight reword to explanatory text.\n\t* libsupc++/eh_terminate.cc (__cxxabiv1::__terminate_handler,\n\t__cxxabiv1::__unexpected_handler):  Break definitions out to...\n\t* libsupc++/eh_unex_handler.cc:  ...here (new file), and...\n\t* libsupc++/eh_term_handler.cc:  ...here (new file).  Initialize\n\t__terminate_handler with __gnu_cxx::__verbose_terminate_handler\n\tinstead of std::abort.\n\n\t* libsupc++/Makefile.am (sources), src/Makefile.am (sources):  Update.\n\t* libsupc++/Makefile.in, src/Makefile.in:  Regenerate.\n\nFrom-SVN: r60505", "tree": {"sha": "29b72cf5b311ee7cdd1b193f946ea88ea56e84d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29b72cf5b311ee7cdd1b193f946ea88ea56e84d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb7054160f2f4a3fb62c37f64235faf00a05a789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb7054160f2f4a3fb62c37f64235faf00a05a789", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb7054160f2f4a3fb62c37f64235faf00a05a789", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb7054160f2f4a3fb62c37f64235faf00a05a789/comments", "author": null, "committer": null, "parents": [{"sha": "b21fb038c9fd9ecf5f5ce362a3d35d993f89b64b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21fb038c9fd9ecf5f5ce362a3d35d993f89b64b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b21fb038c9fd9ecf5f5ce362a3d35d993f89b64b"}], "stats": {"total": 311, "additions": 157, "deletions": 154}, "files": [{"sha": "62ce94360328cb2313efa298dee04b0d347af104", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fb7054160f2f4a3fb62c37f64235faf00a05a789", "patch": "@@ -1,3 +1,18 @@\n+2002-12-25  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* src/vterminate.cc:  Move to...\n+\t* libsupc++/vterminate.cc:  ...here.  New file.  Replace fprintf with\n+\twritestr macro.  Slight reword to explanatory text.\n+\t* libsupc++/eh_terminate.cc (__cxxabiv1::__terminate_handler,\n+\t__cxxabiv1::__unexpected_handler):  Break definitions out to...\n+\t* libsupc++/eh_unex_handler.cc:  ...here (new file), and...\n+\t* libsupc++/eh_term_handler.cc:  ...here (new file).  Initialize\n+\t__terminate_handler with __gnu_cxx::__verbose_terminate_handler\n+\tinstead of std::abort.\n+\n+\t* libsupc++/Makefile.am (sources), src/Makefile.am (sources):  Update.\n+\t* libsupc++/Makefile.in, src/Makefile.in:  Regenerate.\n+\n 2002-12-23  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* config/io/basic_file_stdio.cc (__basic_file::_M_open_mode):"}, {"sha": "7fd2f58e39617b28604397e2b70ac6d5832e3cf4", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=fb7054160f2f4a3fb62c37f64235faf00a05a789", "patch": "@@ -81,9 +81,11 @@ sources = \\\n \teh_exception.cc \\\n \teh_globals.cc \\\n \teh_personality.cc \\\n+\teh_term_handler.cc \\\n \teh_terminate.cc \\\n \teh_throw.cc \\\n \teh_type.cc \\\n+\teh_unex_handler.cc \\\n \tguard.cc \\\n \tnew_handler.cc \\\n \tnew_op.cc \\\n@@ -93,7 +95,8 @@ sources = \\\n \tpure.cc \\\n \ttinfo.cc \\\n \ttinfo2.cc \\\n-\tvec.cc\n+\tvec.cc \\\n+\tvterminate.cc\n \n libsupc___la_SOURCES = $(sources) $(c_sources)\n libsupc__convenience_la_SOURCES = $(sources) $(c_sources)"}, {"sha": "8e25f4d7863ae73dd68df114098cbb22cc074dff", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 28, "deletions": 68, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=fb7054160f2f4a3fb62c37f64235faf00a05a789", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -163,57 +163,28 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@\n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@\n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n GCC_INCLUDES = -I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include\n \n-INCLUDES = \\\n-\t$(GCC_INCLUDES) $(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n-\n-\n-headers = \\\n-\texception new typeinfo cxxabi.h exception_defines.h \n-\n-\n-c_sources = \\\n-\tcxa_demangle.c \\\n-\tdyn-string.c \n-\n-\n-sources = \\\n-\tdel_op.cc \\\n-\tdel_opnt.cc \\\n-\tdel_opv.cc \\\n-\tdel_opvnt.cc \\\n-\teh_alloc.cc \\\n-\teh_aux_runtime.cc \\\n-\teh_catch.cc \\\n-\teh_exception.cc \\\n-\teh_globals.cc \\\n-\teh_personality.cc \\\n-\teh_terminate.cc \\\n-\teh_throw.cc \\\n-\teh_type.cc \\\n-\tguard.cc \\\n-\tnew_handler.cc \\\n-\tnew_op.cc \\\n-\tnew_opnt.cc \\\n-\tnew_opv.cc \\\n-\tnew_opvnt.cc \\\n-\tpure.cc \\\n-\ttinfo.cc \\\n-\ttinfo2.cc \\\n-\tvec.cc\n+INCLUDES =  \t$(GCC_INCLUDES) $(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n+\n+\n+headers =  \texception new typeinfo cxxabi.h exception_defines.h \n+\n+\n+c_sources =  \tcxa_demangle.c \tdyn-string.c \n+\n+\n+sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \teh_alloc.cc \teh_aux_runtime.cc \teh_catch.cc \teh_exception.cc \teh_globals.cc \teh_personality.cc \teh_term_handler.cc \teh_terminate.cc \teh_throw.cc \teh_type.cc \teh_unex_handler.cc \tguard.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc \tvterminate.cc\n \n \n libsupc___la_SOURCES = $(sources) $(c_sources)\n@@ -227,28 +198,19 @@ LIBSUPCXX_CXXFLAGS = $(LIBSUPCXX_PICFLAGS)\n # Use special rules for pulling things out of libiberty.  These\n # objects should be compiled with the \"C\" compiler, not the C++\n # compiler, and also should not use the C++ includes.\n-C_COMPILE = \\\n-\t$(CC) $(DEFS) $(GCC_INCLUDES) \\\n-\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+C_COMPILE =  \t$(CC) $(DEFS) $(GCC_INCLUDES) \t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n \n \n # LTCOMPILE is copied from LTCXXCOMPILE below.\n-LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared --mode=compile $(CC) \\\n-\t    $(DEFS) $(GCC_INCLUDES) $(LIBSUPCXX_PICFLAGS) \\\n-            $(AM_CPPFLAGS) $(CPPFLAGS) \n+LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared --mode=compile $(CC) \t    $(DEFS) $(GCC_INCLUDES) $(LIBSUPCXX_PICFLAGS)             $(AM_CPPFLAGS) $(CPPFLAGS) \n \n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -272,9 +234,7 @@ AM_CXXFLAGS = \\\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-               --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -283,9 +243,7 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-          --mode=link $(CXX) \\\n-          @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared           --mode=link $(CXX)           @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -300,16 +258,18 @@ libsupc__convenience_la_LDFLAGS =\n libsupc__convenience_la_LIBADD = \n libsupc__convenience_la_OBJECTS =  del_op.lo del_opnt.lo del_opv.lo \\\n del_opvnt.lo eh_alloc.lo eh_aux_runtime.lo eh_catch.lo eh_exception.lo \\\n-eh_globals.lo eh_personality.lo eh_terminate.lo eh_throw.lo eh_type.lo \\\n-guard.lo new_handler.lo new_op.lo new_opnt.lo new_opv.lo new_opvnt.lo \\\n-pure.lo tinfo.lo tinfo2.lo vec.lo cxa_demangle.lo dyn-string.lo\n+eh_globals.lo eh_personality.lo eh_term_handler.lo eh_terminate.lo \\\n+eh_throw.lo eh_type.lo eh_unex_handler.lo guard.lo new_handler.lo \\\n+new_op.lo new_opnt.lo new_opv.lo new_opvnt.lo pure.lo tinfo.lo \\\n+tinfo2.lo vec.lo vterminate.lo cxa_demangle.lo dyn-string.lo\n libsupc___la_LDFLAGS = \n libsupc___la_LIBADD = \n libsupc___la_OBJECTS =  del_op.lo del_opnt.lo del_opv.lo del_opvnt.lo \\\n eh_alloc.lo eh_aux_runtime.lo eh_catch.lo eh_exception.lo eh_globals.lo \\\n-eh_personality.lo eh_terminate.lo eh_throw.lo eh_type.lo guard.lo \\\n-new_handler.lo new_op.lo new_opnt.lo new_opv.lo new_opvnt.lo pure.lo \\\n-tinfo.lo tinfo2.lo vec.lo cxa_demangle.lo dyn-string.lo\n+eh_personality.lo eh_term_handler.lo eh_terminate.lo eh_throw.lo \\\n+eh_type.lo eh_unex_handler.lo guard.lo new_handler.lo new_op.lo \\\n+new_opnt.lo new_opv.lo new_opvnt.lo pure.lo tinfo.lo tinfo2.lo vec.lo \\\n+vterminate.lo cxa_demangle.lo dyn-string.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)\n@@ -324,7 +284,7 @@ DIST_COMMON =  Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n SOURCES = $(libsupc__convenience_la_SOURCES) $(libsupc___la_SOURCES)\n OBJECTS = $(libsupc__convenience_la_OBJECTS) $(libsupc___la_OBJECTS)\n@@ -448,7 +408,7 @@ TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)\n \t  awk '    { files[$$0] = 1; } \\\n \t       END { for (i in files) print i; }'`; \\\n \ttest -z \"$(ETAGS_ARGS)$$unique$(LISP)$$tags\" \\\n-\t  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)\n+\t  || (cd $(srcdir) && etags -o $$here/TAGS $(ETAGS_ARGS) $$tags  $$unique $(LISP))\n \n mostlyclean-tags:\n "}, {"sha": "ff7b7edd957a89885646d8d67dbbdde4adc82498", "filename": "libstdc++-v3/libsupc++/eh_term_handler.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc?ref=fb7054160f2f4a3fb62c37f64235faf00a05a789", "patch": "@@ -0,0 +1,35 @@\n+// -*- C++ -*- std::terminate handler\n+// Copyright (C) 2002 Free Software Foundation\n+//\n+// This file is part of GNU CC.\n+//\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA. \n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include \"unwind-cxx.h\"\n+\n+/* The current installed user handler.  */\n+std::terminate_handler __cxxabiv1::__terminate_handler =\n+                                       __gnu_cxx::__verbose_terminate_handler;\n+"}, {"sha": "e416c91307b9e1172e4d96d3bf4b28c2fceee2d2", "filename": "libstdc++-v3/libsupc++/eh_terminate.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_terminate.cc?ref=fb7054160f2f4a3fb62c37f64235faf00a05a789", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- std::terminate, std::unexpected and friends.\n-// Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001 \n+// Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002\n // Free Software Foundation\n //\n // This file is part of GNU CC.\n@@ -36,10 +36,6 @@\n \n using namespace __cxxabiv1;\n \n-/* The current installed user handlers.  */\n-std::terminate_handler __cxxabiv1::__terminate_handler = std::abort;\n-std::unexpected_handler __cxxabiv1::__unexpected_handler = std::terminate;\n-\n void\n __cxxabiv1::__terminate (std::terminate_handler handler)\n {"}, {"sha": "2a4689d2b86befafe1c31de1f802b8c4ef54aee3", "filename": "libstdc++-v3/libsupc++/eh_unex_handler.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_unex_handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_unex_handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_unex_handler.cc?ref=fb7054160f2f4a3fb62c37f64235faf00a05a789", "patch": "@@ -0,0 +1,34 @@\n+// -*- C++ -*- std::unexpected handler\n+// Copyright (C) 2002 Free Software Foundation\n+//\n+// This file is part of GNU CC.\n+//\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA. \n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include \"unwind-cxx.h\"\n+\n+/* The current installed user handler.  */\n+std::unexpected_handler __cxxabiv1::__unexpected_handler = std::terminate;\n+"}, {"sha": "a8718fcd491b97d0a0256bfea2ade4847c85d74c", "filename": "libstdc++-v3/libsupc++/vterminate.cc", "status": "renamed", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvterminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvterminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvterminate.cc?ref=fb7054160f2f4a3fb62c37f64235faf00a05a789", "patch": "@@ -27,12 +27,20 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+#include <bits/c++config.h>\n #include <cstdlib>\n-#include <cstdio>\n #include <exception>\n #include <exception_defines.h>\n #include <cxxabi.h>\n \n+#ifdef _GLIBCPP_HAVE_UNISTD_H\n+# include <unistd.h>\n+# define writestr(str)  write(2, str, sizeof(str) - 1)\n+#else\n+# include <cstdio>\n+# define writestr(str)  std::fputs(str, stderr)\n+#endif\n+\n using namespace std;\n using namespace abi;\n \n@@ -57,8 +65,12 @@ namespace __gnu_cxx\n \t  \n \t  dem = __cxa_demangle(name, 0, 0, &status);\n \n-\t  fprintf(stderr, \"terminate called after throwing a `%s'\\n\", \n-\t\t  status == 0 ? dem : name);\n+\t  writestr(\"terminate called after throwing an instance of '\");\n+\t  if (status == 0)\n+\t    writestr(dem);\n+\t  else\n+\t    writestr(name);\n+\t  writestr(\"'\\n\");\n \n \t  if (status == 0)\n \t    free(dem);\n@@ -69,12 +81,17 @@ namespace __gnu_cxx\n \ttry { __throw_exception_again; }\n #ifdef __EXCEPTIONS\n \tcatch (exception &exc)\n-\t  { fprintf(stderr, \"  what(): %s\\n\", exc.what()); }\n+\t  {\n+\t    char const *w = exc.what();\n+\t    writestr(\"  what():  \");\n+\t    writestr(w);\n+\t    writestr(\"\\n\");\n+          }\n #endif\n \tcatch (...) { }\n       }\n     else\n-      fprintf(stderr, \"terminate called without an active exception\\n\");\n+      writestr(\"terminate called without an active exception\\n\");\n     \n     abort();\n   }", "previous_filename": "libstdc++-v3/src/vterminate.cc"}, {"sha": "0cffb7fd3ec6109e03114cd58759430704ed6bdc", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=fb7054160f2f4a3fb62c37f64235faf00a05a789", "patch": "@@ -143,7 +143,6 @@ sources = \\\n \tstring-inst.cc \\\n \tstrstream.cc \\\n \tvalarray-inst.cc \\\n-\tvterminate.cc \\\n \twstring-inst.cc \\\n \t${target_sources} \\\n \t${target_sources_extra}"}, {"sha": "f6ad9cf4926d57c1290ab749dd9006277b481744", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 18, "deletions": 74, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7054160f2f4a3fb62c37f64235faf00a05a789/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=fb7054160f2f4a3fb62c37f64235faf00a05a789", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -145,7 +145,7 @@ glibcpp_builddir = @glibcpp_builddir@\n toolexecdir = @glibcpp_toolexecdir@\n toolexeclibdir = @glibcpp_toolexeclibdir@\n toolexeclib_LTLIBRARIES = libstdc++.la\n-@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@version_arg = @GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@-Wl,--version-script=libstdc++-symbol.ver\n+@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@version_arg = -Wl,--version-script=libstdc++-symbol.ver\n @GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE@version_arg = \n \n # Compile flags that should be constant throughout the build, both for\n@@ -154,13 +154,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n \n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@\n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@\n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -170,80 +168,33 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t$(GLIBCPP_INCLUDES) \\\n-\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n-\t$(TOPLEVEL_INCLUDES)\n+INCLUDES =  \t-nostdinc++ \t$(GLIBCPP_INCLUDES) \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\n \n \n # Source files linked in via configuration/make substitution for a\n # particular target.\n-target_sources = \\\n-\tcodecvt_members.cc \\\n-\tcollate_members.cc \\\n-\tctype_members.cc \\\n-\tmessages_members.cc \\\n-\tmonetary_members.cc \\\n-\tnumeric_members.cc \\\n-\ttime_members.cc\n+target_sources =  \tcodecvt_members.cc \tcollate_members.cc \tctype_members.cc \tmessages_members.cc \tmonetary_members.cc \tnumeric_members.cc \ttime_members.cc\n \n \n # Source files linked in via configuration/make substitution for a\n # particular target, but with ad hoc naming rules.\n-target_sources_extra = \\\n-\tbasic_file.cc \\\n-\tc++locale.cc \n+target_sources_extra =  \tbasic_file.cc \tc++locale.cc \n \n \n # Sources present in the src directory.\n-sources = \\\n-\tbitset.cc \\\n-\tcodecvt.cc \\\n-\tcomplex_io.cc \\\n-\tconcept-inst.cc \\\n-\tctype.cc \\\n-\text-inst.cc \\\n-\tfstream.cc \\\n-\tfstream-inst.cc \\\n-\tfunctexcept.cc \\\n-\tglobals.cc \\\n-\tio-inst.cc \\\n-\tios.cc \\\n-\tistream-inst.cc \\\n-\tlimits.cc \\\n-\tlocale.cc \\\n-\tlocale-inst.cc \\\n-\tlocalename.cc \\\n-\tmisc-inst.cc \\\n-\tostream-inst.cc \\\n-\tsstream-inst.cc \\\n-\tstdexcept.cc \\\n-\tstl-inst.cc \\\n-\tstreambuf-inst.cc \\\n-\tstring-inst.cc \\\n-\tstrstream.cc \\\n-\tvalarray-inst.cc \\\n-\tvterminate.cc \\\n-\twstring-inst.cc \\\n-\t${target_sources} \\\n-\t${target_sources_extra}\n+sources =  \tbitset.cc \tcodecvt.cc \tcomplex_io.cc \tconcept-inst.cc \tctype.cc \text-inst.cc \tfstream.cc \tfstream-inst.cc \tfunctexcept.cc \tglobals.cc \tio-inst.cc \tios.cc \tistream-inst.cc \tlimits.cc \tlocale.cc \tlocale-inst.cc \tlocalename.cc \tmisc-inst.cc \tostream-inst.cc \tsstream-inst.cc \tstdexcept.cc \tstl-inst.cc \tstreambuf-inst.cc \tstring-inst.cc \tstrstream.cc \tvalarray-inst.cc \twstring-inst.cc \t${target_sources} \t${target_sources_extra}\n \n \n VPATH = $(top_srcdir)/src:$(top_srcdir)\n \n libstdc___la_SOURCES = $(sources)\n \n-libstdc___la_LIBADD = \\\n-\t$(top_builddir)/libmath/libmath.la @libio_la@ \\\n-\t$(top_builddir)/libsupc++/libsupc++convenience.la\n+libstdc___la_LIBADD =  \t$(top_builddir)/libmath/libmath.la @libio_la@ \t$(top_builddir)/libsupc++/libsupc++convenience.la\n \n \n libstdc___la_DEPENDENCIES = libstdc++-symbol.ver $(libstdc___la_LIBADD)\n \n-libstdc___la_LDFLAGS = \\\n-\t-version-info @libtool_VERSION@ ${version_arg} \\\n-\t-lm @LIBUNWIND_FLAG@ \n+libstdc___la_LDFLAGS =  \t-version-info @libtool_VERSION@ ${version_arg} \t-lm @LIBUNWIND_FLAG@ \n \n \n # Use special rules for the deprecated source files so that they find\n@@ -254,13 +205,8 @@ GLIBCPP_INCLUDE_DIR = @glibcpp_builddir@/include\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n-# as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS)  \n+# as the occasion call for it. \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS)  \n \n \n # libstdc++ libtool notes\n@@ -281,8 +227,7 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -291,8 +236,7 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n \n debugdir = debug\n@@ -310,8 +254,8 @@ concept-inst.lo ctype.lo ext-inst.lo fstream.lo fstream-inst.lo \\\n functexcept.lo globals.lo io-inst.lo ios.lo istream-inst.lo limits.lo \\\n locale.lo locale-inst.lo localename.lo misc-inst.lo ostream-inst.lo \\\n sstream-inst.lo stdexcept.lo stl-inst.lo streambuf-inst.lo \\\n-string-inst.lo strstream.lo valarray-inst.lo vterminate.lo \\\n-wstring-inst.lo codecvt_members.lo collate_members.lo ctype_members.lo \\\n+string-inst.lo strstream.lo valarray-inst.lo wstring-inst.lo \\\n+codecvt_members.lo collate_members.lo ctype_members.lo \\\n messages_members.lo monetary_members.lo numeric_members.lo \\\n time_members.lo basic_file.lo c++locale.lo\n CXXFLAGS = @CXXFLAGS@\n@@ -322,7 +266,7 @@ DIST_COMMON =  Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n SOURCES = $(libstdc___la_SOURCES)\n OBJECTS = $(libstdc___la_OBJECTS)\n@@ -434,7 +378,7 @@ TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)\n \t  awk '    { files[$$0] = 1; } \\\n \t       END { for (i in files) print i; }'`; \\\n \ttest -z \"$(ETAGS_ARGS)$$unique$(LISP)$$tags\" \\\n-\t  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)\n+\t  || (cd $(srcdir) && etags -o $$here/TAGS $(ETAGS_ARGS) $$tags  $$unique $(LISP))\n \n mostlyclean-tags:\n "}]}