{"sha": "b1875f5291aa2c8765bd46efea03354a2288f447", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE4NzVmNTI5MWFhMmM4NzY1YmQ0NmVmZWEwMzM1NGEyMjg4ZjQ0Nw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2006-10-22T17:40:21Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2006-10-22T17:40:21Z"}, "message": "config.gcc (i[34567]86-*-*): Add tmmintrin.h to extra_headers.\n\n2006-10-22  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config.gcc (i[34567]86-*-*): Add tmmintrin.h to extra_headers.\n\t(x86_64-*-*): Likewise.\n\n\t* config/i386/i386.c (pta_flags): Add PTA_SSSE3.\n\t(override_options): Check SSSE3.\n\t(ix86_builtins): Add IX86_BUILTIN_PHADDW, IX86_BUILTIN_PHADDD,\n\tIX86_BUILTIN_PHADDSW, IX86_BUILTIN_PHSUBW, IX86_BUILTIN_PHSUBD,\n\tIX86_BUILTIN_PHSUBSW, IX86_BUILTIN_PMADDUBSW,\n\tIX86_BUILTIN_PMULHRSW, IX86_BUILTIN_PSHUFB,\n\tIX86_BUILTIN_PSIGNB, IX86_BUILTIN_PSIGNW, IX86_BUILTIN_PSIGND,\n\tIX86_BUILTIN_PALIGNR, IX86_BUILTIN_PABSB, IX86_BUILTIN_PABSW,\n\tIX86_BUILTIN_PABSD, IX86_BUILTIN_PHADDW128,\n\tIX86_BUILTIN_PHADDD128, IX86_BUILTIN_PHADDSW128,\n\tIX86_BUILTIN_PHSUBW128, IX86_BUILTIN_PHSUBD128,\n\tIX86_BUILTIN_PHSUBSW128, IX86_BUILTIN_PMADDUBSW128,\n\tIX86_BUILTIN_PMULHRSW128, IX86_BUILTIN_PSHUFB128,\n\tIX86_BUILTIN_PSIGNB128, IX86_BUILTIN_PSIGNW128,\n\tIX86_BUILTIN_PSIGND128, IX86_BUILTIN_PALIGNR128,\n\tIX86_BUILTIN_PABSB128, IX86_BUILTIN_PABSW128 and\n\tIX86_BUILTIN_PABSD128.\n\t(bdesc_2arg): Add SSSE3.\n\t(bdesc_1arg): Likewise.\n\t(ix86_init_mmx_sse_builtins): Support SSSE3.\n\t(ix86_expand_builtin): Likewise.\n\t* config/i386/i386.h (TARGET_CPU_CPP_BUILTINS): Likewise.\n\n\t* config/i386/i386.md (UNSPEC_PSHUFB): New.\n\t(UNSPEC_PSIGN): Likewise.\n\t(UNSPEC_PALIGNR): Likewise.\n\tInclude mmx.md before sse.md.\n\n\t* config/i386/i386.opt: Add -mssse3.\n\n\t* config/i386/sse.md (ssse3_phaddwv8hi3): New pattern for SSSE3.\n\t(ssse3_phaddwv4hi3): Likewise.\n\t(ssse3_phadddv4si3): Likewise.\n\t(ssse3_phadddv2si3): Likewise.\n\t(ssse3_phaddswv8hi3): Likewise.\n\t(ssse3_phaddswv4hi3): Likewise.\n\t(ssse3_phsubwv8hi3): Likewise.\n\t(ssse3_phsubwv4hi3): Likewise.\n\t(ssse3_phsubdv4si3): Likewise.\n\t(ssse3_phsubdv2si3): Likewise.\n\t(ssse3_phsubswv8hi3): Likewise.\n\t(ssse3_phsubswv4hi3): Likewise.\n\t(ssse3_pmaddubswv8hi3): Likewise.\n\t(ssse3_pmaddubswv4hi3): Likewise.\n\t(ssse3_pmulhrswv8hi3): Likewise.\n\t(ssse3_pmulhrswv4hi3): Likewise.\n\t(ssse3_pshufbv16qi3): Likewise.\n\t(ssse3_pshufbv8qi3): Likewise.\n\t(ssse3_psign<mode>3): Likewise.\n\t(ssse3_psign<mode>3): Likewise.\n\t(ssse3_palignrti): Likewise.\n\t(ssse3_palignrdi): Likewise.\n\t(abs<mode>2): Likewise.\n\t(abs<mode>2): Likewise.\n\n\t* config/i386/tmmintrin.h: New file.\n\n\t* doc/extend.texi: Document SSSE3 built-in functions.\n\n\t* doc/invoke.texi: Document -mssse3/-mno-ssse3 switches.\n\nFrom-SVN: r117958", "tree": {"sha": "d3a0707c538fb3ff74500a1069822bb53d11d2d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3a0707c538fb3ff74500a1069822bb53d11d2d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1875f5291aa2c8765bd46efea03354a2288f447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1875f5291aa2c8765bd46efea03354a2288f447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1875f5291aa2c8765bd46efea03354a2288f447", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1875f5291aa2c8765bd46efea03354a2288f447/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e4be1fa8c986cb0e12fb2fed62790dd838f38ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4be1fa8c986cb0e12fb2fed62790dd838f38ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e4be1fa8c986cb0e12fb2fed62790dd838f38ed"}], "stats": {"total": 1363, "additions": 1353, "deletions": 10}, "files": [{"sha": "235b0037757a4077bcf5508c98119b6348a7dd8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1875f5291aa2c8765bd46efea03354a2288f447", "patch": "@@ -1,3 +1,69 @@\n+2006-10-22  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config.gcc (i[34567]86-*-*): Add tmmintrin.h to extra_headers.\n+\t(x86_64-*-*): Likewise.\n+\n+\t* config/i386/i386.c (pta_flags): Add PTA_SSSE3.\n+\t(override_options): Check SSSE3.\n+\t(ix86_builtins): Add IX86_BUILTIN_PHADDW, IX86_BUILTIN_PHADDD,\n+\tIX86_BUILTIN_PHADDSW, IX86_BUILTIN_PHSUBW, IX86_BUILTIN_PHSUBD,\n+\tIX86_BUILTIN_PHSUBSW, IX86_BUILTIN_PMADDUBSW,\n+\tIX86_BUILTIN_PMULHRSW, IX86_BUILTIN_PSHUFB,\n+\tIX86_BUILTIN_PSIGNB, IX86_BUILTIN_PSIGNW, IX86_BUILTIN_PSIGND,\n+\tIX86_BUILTIN_PALIGNR, IX86_BUILTIN_PABSB, IX86_BUILTIN_PABSW,\n+\tIX86_BUILTIN_PABSD, IX86_BUILTIN_PHADDW128,\n+\tIX86_BUILTIN_PHADDD128, IX86_BUILTIN_PHADDSW128,\n+\tIX86_BUILTIN_PHSUBW128, IX86_BUILTIN_PHSUBD128,\n+\tIX86_BUILTIN_PHSUBSW128, IX86_BUILTIN_PMADDUBSW128,\n+\tIX86_BUILTIN_PMULHRSW128, IX86_BUILTIN_PSHUFB128,\n+\tIX86_BUILTIN_PSIGNB128, IX86_BUILTIN_PSIGNW128,\n+\tIX86_BUILTIN_PSIGND128, IX86_BUILTIN_PALIGNR128,\n+\tIX86_BUILTIN_PABSB128, IX86_BUILTIN_PABSW128 and\n+\tIX86_BUILTIN_PABSD128.\n+\t(bdesc_2arg): Add SSSE3.\n+\t(bdesc_1arg): Likewise.\n+\t(ix86_init_mmx_sse_builtins): Support SSSE3.\n+\t(ix86_expand_builtin): Likewise.\n+\t* config/i386/i386.h (TARGET_CPU_CPP_BUILTINS): Likewise.\n+\n+\t* config/i386/i386.md (UNSPEC_PSHUFB): New.\n+\t(UNSPEC_PSIGN): Likewise.\n+\t(UNSPEC_PALIGNR): Likewise.\n+\tInclude mmx.md before sse.md.\n+\n+\t* config/i386/i386.opt: Add -mssse3.\n+\n+\t* config/i386/sse.md (ssse3_phaddwv8hi3): New pattern for SSSE3.\n+\t(ssse3_phaddwv4hi3): Likewise.\n+\t(ssse3_phadddv4si3): Likewise.\n+\t(ssse3_phadddv2si3): Likewise.\n+\t(ssse3_phaddswv8hi3): Likewise.\n+\t(ssse3_phaddswv4hi3): Likewise.\n+\t(ssse3_phsubwv8hi3): Likewise.\n+\t(ssse3_phsubwv4hi3): Likewise.\n+\t(ssse3_phsubdv4si3): Likewise.\n+\t(ssse3_phsubdv2si3): Likewise.\n+\t(ssse3_phsubswv8hi3): Likewise.\n+\t(ssse3_phsubswv4hi3): Likewise.\n+\t(ssse3_pmaddubswv8hi3): Likewise.\n+\t(ssse3_pmaddubswv4hi3): Likewise.\n+\t(ssse3_pmulhrswv8hi3): Likewise.\n+\t(ssse3_pmulhrswv4hi3): Likewise.\n+\t(ssse3_pshufbv16qi3): Likewise.\n+\t(ssse3_pshufbv8qi3): Likewise.\n+\t(ssse3_psign<mode>3): Likewise.\n+\t(ssse3_psign<mode>3): Likewise.\n+\t(ssse3_palignrti): Likewise.\n+\t(ssse3_palignrdi): Likewise.\n+\t(abs<mode>2): Likewise.\n+\t(abs<mode>2): Likewise.\n+\n+\t* config/i386/tmmintrin.h: New file.\n+\n+\t* doc/extend.texi: Document SSSE3 built-in functions.\n+\n+\t* doc/invoke.texi: Document -mssse3/-mno-ssse3 switches.\n+\n 2006-10-22  Ira Rosen  <irar@il.ibm.com>\n \n         * tree-vect-transform.c (vectorizable_load): Use the type of the"}, {"sha": "7545c38f17a63ce2a13775e95e41f045fc685112", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b1875f5291aa2c8765bd46efea03354a2288f447", "patch": "@@ -268,11 +268,13 @@ xscale-*-*)\n \t;;\n i[34567]86-*-*)\n \tcpu_type=i386\n-\textra_headers=\"mmintrin.h mm3dnow.h xmmintrin.h emmintrin.h pmmintrin.h\"\n+\textra_headers=\"mmintrin.h mm3dnow.h xmmintrin.h emmintrin.h\n+\t\t       pmmintrin.h tmmintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n-\textra_headers=\"mmintrin.h mm3dnow.h xmmintrin.h emmintrin.h pmmintrin.h\"\n+\textra_headers=\"mmintrin.h mm3dnow.h xmmintrin.h emmintrin.h\n+\t\t       pmmintrin.h tmmintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "d72120c63d0ecae0607308a4d048acbd0c806691", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 195, "deletions": 3, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b1875f5291aa2c8765bd46efea03354a2288f447", "patch": "@@ -1476,7 +1476,8 @@ override_options (void)\n \t  PTA_PREFETCH_SSE = 16,\n \t  PTA_3DNOW = 32,\n \t  PTA_3DNOW_A = 64,\n-\t  PTA_64BIT = 128\n+\t  PTA_64BIT = 128,\n+\t  PTA_SSSE3 = 256\n \t} flags;\n     }\n   const processor_alias_table[] =\n@@ -1684,6 +1685,9 @@ override_options (void)\n \tif (processor_alias_table[i].flags & PTA_SSE3\n \t    && !(target_flags_explicit & MASK_SSE3))\n \t  target_flags |= MASK_SSE3;\n+\tif (processor_alias_table[i].flags & PTA_SSSE3\n+\t    && !(target_flags_explicit & MASK_SSSE3))\n+\t  target_flags |= MASK_SSSE3;\n \tif (processor_alias_table[i].flags & PTA_PREFETCH_SSE)\n \t  x86_prefetch_sse = true;\n \tif (TARGET_64BIT && !(processor_alias_table[i].flags & PTA_64BIT))\n@@ -1860,6 +1864,10 @@ override_options (void)\n   if (!TARGET_80387)\n     target_flags |= MASK_NO_FANCY_MATH_387;\n \n+  /* Turn on SSE3 builtins for -mssse3.  */\n+  if (TARGET_SSSE3)\n+    target_flags |= MASK_SSE3;\n+\n   /* Turn on SSE2 builtins for -msse3.  */\n   if (TARGET_SSE3)\n     target_flags |= MASK_SSE2;\n@@ -14473,6 +14481,41 @@ enum ix86_builtins\n   IX86_BUILTIN_MONITOR,\n   IX86_BUILTIN_MWAIT,\n \n+  /* SSSE3.  */\n+  IX86_BUILTIN_PHADDW,\n+  IX86_BUILTIN_PHADDD,\n+  IX86_BUILTIN_PHADDSW,\n+  IX86_BUILTIN_PHSUBW,\n+  IX86_BUILTIN_PHSUBD,\n+  IX86_BUILTIN_PHSUBSW,\n+  IX86_BUILTIN_PMADDUBSW,\n+  IX86_BUILTIN_PMULHRSW,\n+  IX86_BUILTIN_PSHUFB,\n+  IX86_BUILTIN_PSIGNB,\n+  IX86_BUILTIN_PSIGNW,\n+  IX86_BUILTIN_PSIGND,\n+  IX86_BUILTIN_PALIGNR,\n+  IX86_BUILTIN_PABSB,\n+  IX86_BUILTIN_PABSW,\n+  IX86_BUILTIN_PABSD,\n+\n+  IX86_BUILTIN_PHADDW128,\n+  IX86_BUILTIN_PHADDD128,\n+  IX86_BUILTIN_PHADDSW128,\n+  IX86_BUILTIN_PHSUBW128,\n+  IX86_BUILTIN_PHSUBD128,\n+  IX86_BUILTIN_PHSUBSW128,\n+  IX86_BUILTIN_PMADDUBSW128,\n+  IX86_BUILTIN_PMULHRSW128,\n+  IX86_BUILTIN_PSHUFB128,\n+  IX86_BUILTIN_PSIGNB128,\n+  IX86_BUILTIN_PSIGNW128,\n+  IX86_BUILTIN_PSIGND128,\n+  IX86_BUILTIN_PALIGNR128,\n+  IX86_BUILTIN_PABSB128,\n+  IX86_BUILTIN_PABSW128,\n+  IX86_BUILTIN_PABSD128,\n+\n   IX86_BUILTIN_VEC_INIT_V2SI,\n   IX86_BUILTIN_VEC_INIT_V4HI,\n   IX86_BUILTIN_VEC_INIT_V8QI,\n@@ -14813,7 +14856,33 @@ static const struct builtin_description bdesc_2arg[] =\n   { MASK_SSE3, CODE_FOR_sse3_haddv4sf3, \"__builtin_ia32_haddps\", IX86_BUILTIN_HADDPS, 0, 0 },\n   { MASK_SSE3, CODE_FOR_sse3_haddv2df3, \"__builtin_ia32_haddpd\", IX86_BUILTIN_HADDPD, 0, 0 },\n   { MASK_SSE3, CODE_FOR_sse3_hsubv4sf3, \"__builtin_ia32_hsubps\", IX86_BUILTIN_HSUBPS, 0, 0 },\n-  { MASK_SSE3, CODE_FOR_sse3_hsubv2df3, \"__builtin_ia32_hsubpd\", IX86_BUILTIN_HSUBPD, 0, 0 }\n+  { MASK_SSE3, CODE_FOR_sse3_hsubv2df3, \"__builtin_ia32_hsubpd\", IX86_BUILTIN_HSUBPD, 0, 0 },\n+\n+  /* SSSE3 */\n+  { MASK_SSSE3, CODE_FOR_ssse3_phaddwv8hi3, \"__builtin_ia32_phaddw128\", IX86_BUILTIN_PHADDW128, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_phaddwv4hi3, \"__builtin_ia32_phaddw\", IX86_BUILTIN_PHADDW, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_phadddv4si3, \"__builtin_ia32_phaddd128\", IX86_BUILTIN_PHADDD128, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_phadddv2si3, \"__builtin_ia32_phaddd\", IX86_BUILTIN_PHADDD, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_phaddswv8hi3, \"__builtin_ia32_phaddsw128\", IX86_BUILTIN_PHADDSW128, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_phaddswv4hi3, \"__builtin_ia32_phaddsw\", IX86_BUILTIN_PHADDSW, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_phsubwv8hi3, \"__builtin_ia32_phsubw128\", IX86_BUILTIN_PHSUBW128, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_phsubwv4hi3, \"__builtin_ia32_phsubw\", IX86_BUILTIN_PHSUBW, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_phsubdv4si3, \"__builtin_ia32_phsubd128\", IX86_BUILTIN_PHSUBD128, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_phsubdv2si3, \"__builtin_ia32_phsubd\", IX86_BUILTIN_PHSUBD, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_phsubswv8hi3, \"__builtin_ia32_phsubsw128\", IX86_BUILTIN_PHSUBSW128, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_phsubswv4hi3, \"__builtin_ia32_phsubsw\", IX86_BUILTIN_PHSUBSW, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_pmaddubswv8hi3, \"__builtin_ia32_pmaddubsw128\", IX86_BUILTIN_PMADDUBSW128, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_pmaddubswv4hi3, \"__builtin_ia32_pmaddubsw\", IX86_BUILTIN_PMADDUBSW, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_pmulhrswv8hi3, \"__builtin_ia32_pmulhrsw128\", IX86_BUILTIN_PMULHRSW128, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_pmulhrswv4hi3, \"__builtin_ia32_pmulhrsw\", IX86_BUILTIN_PMULHRSW, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_pshufbv16qi3, \"__builtin_ia32_pshufb128\", IX86_BUILTIN_PSHUFB128, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_pshufbv8qi3, \"__builtin_ia32_pshufb\", IX86_BUILTIN_PSHUFB, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_psignv16qi3, \"__builtin_ia32_psignb128\", IX86_BUILTIN_PSIGNB128, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_psignv8qi3, \"__builtin_ia32_psignb\", IX86_BUILTIN_PSIGNB, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_psignv8hi3, \"__builtin_ia32_psignw128\", IX86_BUILTIN_PSIGNW128, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_psignv4hi3, \"__builtin_ia32_psignw\", IX86_BUILTIN_PSIGNW, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_psignv4si3, \"__builtin_ia32_psignd128\", IX86_BUILTIN_PSIGND128, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_ssse3_psignv2si3, \"__builtin_ia32_psignd\", IX86_BUILTIN_PSIGND, 0, 0 }\n };\n \n static const struct builtin_description bdesc_1arg[] =\n@@ -14860,6 +14929,14 @@ static const struct builtin_description bdesc_1arg[] =\n   /* SSE3 */\n   { MASK_SSE3, CODE_FOR_sse3_movshdup, 0, IX86_BUILTIN_MOVSHDUP, 0, 0 },\n   { MASK_SSE3, CODE_FOR_sse3_movsldup, 0, IX86_BUILTIN_MOVSLDUP, 0, 0 },\n+\n+  /* SSSE3 */\n+  { MASK_SSSE3, CODE_FOR_absv16qi2, \"__builtin_ia32_pabsb128\", IX86_BUILTIN_PABSB128, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_absv8qi2, \"__builtin_ia32_pabsb\", IX86_BUILTIN_PABSB, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_absv8hi2, \"__builtin_ia32_pabsw128\", IX86_BUILTIN_PABSW128, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_absv4hi2, \"__builtin_ia32_pabsw\", IX86_BUILTIN_PABSW, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_absv4si2, \"__builtin_ia32_pabsd128\", IX86_BUILTIN_PABSD128, 0, 0 },\n+  { MASK_SSSE3, CODE_FOR_absv2si2, \"__builtin_ia32_pabsd\", IX86_BUILTIN_PABSD, 0, 0 },\n };\n \n static void\n@@ -14994,6 +15071,16 @@ ix86_init_mmx_sse_builtins (void)\n   /* Normal vector unops.  */\n   tree v4sf_ftype_v4sf\n     = build_function_type_list (V4SF_type_node, V4SF_type_node, NULL_TREE);\n+  tree v16qi_ftype_v16qi\n+    = build_function_type_list (V16QI_type_node, V16QI_type_node, NULL_TREE);\n+  tree v8hi_ftype_v8hi\n+    = build_function_type_list (V8HI_type_node, V8HI_type_node, NULL_TREE);\n+  tree v4si_ftype_v4si\n+    = build_function_type_list (V4SI_type_node, V4SI_type_node, NULL_TREE);\n+  tree v8qi_ftype_v8qi\n+    = build_function_type_list (V8QI_type_node, V8QI_type_node, NULL_TREE);\n+  tree v4hi_ftype_v4hi\n+    = build_function_type_list (V4HI_type_node, V4HI_type_node, NULL_TREE);\n \n   /* Normal vector binops.  */\n   tree v4sf_ftype_v4sf_v4sf\n@@ -15013,6 +15100,12 @@ ix86_init_mmx_sse_builtins (void)\n \t\t\t\tlong_long_unsigned_type_node,\n \t\t\t\tlong_long_unsigned_type_node, NULL_TREE);\n \n+  tree di_ftype_di_di_int\n+    = build_function_type_list (long_long_unsigned_type_node,\n+\t\t\t\tlong_long_unsigned_type_node,\n+\t\t\t\tlong_long_unsigned_type_node,\n+\t\t\t\tinteger_type_node, NULL_TREE);\n+\n   tree v2si_ftype_v2sf\n     = build_function_type_list (V2SI_type_node, V2SF_type_node, NULL_TREE);\n   tree v2sf_ftype_v2si\n@@ -15114,6 +15207,9 @@ ix86_init_mmx_sse_builtins (void)\n   tree v2di_ftype_v2di_int\n     = build_function_type_list (V2DI_type_node,\n \t\t\t\tV2DI_type_node, integer_type_node, NULL_TREE);\n+  tree v2di_ftype_v2di_v2di_int\n+    = build_function_type_list (V2DI_type_node, V2DI_type_node,\n+\t\t\t\tV2DI_type_node, integer_type_node, NULL_TREE);\n   tree v4si_ftype_v4si_int\n     = build_function_type_list (V4SI_type_node,\n \t\t\t\tV4SI_type_node, integer_type_node, NULL_TREE);\n@@ -15236,6 +15332,50 @@ ix86_init_mmx_sse_builtins (void)\n       def_builtin (d->mask, d->name, type, d->code);\n     }\n \n+  /* Add all builtins that are more or less simple operations on 1 operand.  */\n+  for (i = 0, d = bdesc_1arg; i < ARRAY_SIZE (bdesc_1arg); i++, d++)\n+    {\n+      enum machine_mode mode;\n+      tree type;\n+\n+      if (d->name == 0)\n+\tcontinue;\n+      mode = insn_data[d->icode].operand[1].mode;\n+\n+      switch (mode)\n+\t{\n+\tcase V16QImode:\n+\t  type = v16qi_ftype_v16qi;\n+\t  break;\n+\tcase V8HImode:\n+\t  type = v8hi_ftype_v8hi;\n+\t  break;\n+\tcase V4SImode:\n+\t  type = v4si_ftype_v4si;\n+\t  break;\n+\tcase V2DFmode:\n+\t  type = v2df_ftype_v2df;\n+\t  break;\n+\tcase V4SFmode:\n+\t  type = v4sf_ftype_v4sf;\n+\t  break;\n+\tcase V8QImode:\n+\t  type = v8qi_ftype_v8qi;\n+\t  break;\n+\tcase V4HImode:\n+\t  type = v4hi_ftype_v4hi;\n+\t  break;\n+\tcase V2SImode:\n+\t  type = v2si_ftype_v2si;\n+\t  break;\n+\n+\tdefault:\n+\t  abort ();\n+\t}\n+\n+      def_builtin (d->mask, d->name, type, d->code);\n+    }\n+\n   /* Add the remaining MMX insns with somewhat more complicated types.  */\n   def_builtin (MASK_MMX, \"__builtin_ia32_emms\", void_ftype_void, IX86_BUILTIN_EMMS);\n   def_builtin (MASK_MMX, \"__builtin_ia32_psllw\", v4hi_ftype_v4hi_di, IX86_BUILTIN_PSLLW);\n@@ -15435,6 +15575,12 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (MASK_SSE3, \"__builtin_ia32_lddqu\",\n \t       v16qi_ftype_pcchar, IX86_BUILTIN_LDDQU);\n \n+  /* SSSE3.  */\n+  def_builtin (MASK_SSSE3, \"__builtin_ia32_palignr128\",\n+\t       v2di_ftype_v2di_v2di_int, IX86_BUILTIN_PALIGNR128);\n+  def_builtin (MASK_SSSE3, \"__builtin_ia32_palignr\", di_ftype_di_di_int,\n+\t       IX86_BUILTIN_PALIGNR);\n+\n   /* Access to the vec_init patterns.  */\n   ftype = build_function_type_list (V2SI_type_node, integer_type_node,\n \t\t\t\t    integer_type_node, NULL_TREE);\n@@ -15925,7 +16071,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   tree arglist = TREE_OPERAND (exp, 1);\n   tree arg0, arg1, arg2;\n   rtx op0, op1, op2, pat;\n-  enum machine_mode tmode, mode0, mode1, mode2;\n+  enum machine_mode tmode, mode0, mode1, mode2, mode3;\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n \n   switch (fcode)\n@@ -16297,6 +16443,52 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       return ix86_expand_unop_builtin (CODE_FOR_sse3_lddqu, arglist,\n \t\t\t\t       target, 1);\n \n+    case IX86_BUILTIN_PALIGNR:\n+    case IX86_BUILTIN_PALIGNR128:\n+      if (fcode == IX86_BUILTIN_PALIGNR)\n+\t{\n+\t  icode = CODE_FOR_ssse3_palignrdi;\n+\t  mode = DImode;\n+\t}\n+      else\n+\t{\n+\t  icode = CODE_FOR_ssse3_palignrti;\n+\t  mode = V2DImode;\n+\t}\n+      arg0 = TREE_VALUE (arglist);\n+      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      op2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+      tmode = insn_data[icode].operand[0].mode;\n+      mode1 = insn_data[icode].operand[1].mode;\n+      mode2 = insn_data[icode].operand[2].mode;\n+      mode3 = insn_data[icode].operand[3].mode;\n+\n+      if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n+\t{\n+\t  op0 = copy_to_reg (op0);\n+\t  op0 = simplify_gen_subreg (mode1, op0, GET_MODE (op0), 0);\n+\t}\n+      if (! (*insn_data[icode].operand[2].predicate) (op1, mode2))\n+\t{\n+\t  op1 = copy_to_reg (op1);\n+\t  op1 = simplify_gen_subreg (mode2, op1, GET_MODE (op1), 0);\n+\t}\n+      if (! (*insn_data[icode].operand[3].predicate) (op2, mode3))\n+\t{\n+\t  error (\"shift must be an immediate\");\n+\t  return const0_rtx;\n+\t}\n+      target = gen_reg_rtx (mode);\n+      pat = GEN_FCN (icode) (simplify_gen_subreg (tmode, target, mode, 0),\n+\t\t\t     op0, op1, op2);\n+      if (! pat)\n+\treturn 0;\n+      emit_insn (pat);\n+      return target;\n+\n     case IX86_BUILTIN_VEC_INIT_V2SI:\n     case IX86_BUILTIN_VEC_INIT_V4HI:\n     case IX86_BUILTIN_VEC_INIT_V8QI:"}, {"sha": "bebc91e77b918598f79040080288618edd0b9c3a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b1875f5291aa2c8765bd46efea03354a2288f447", "patch": "@@ -409,6 +409,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \tbuiltin_define (\"__SSE2__\");\t\t\t\t\\\n       if (TARGET_SSE3)\t\t\t\t\t\t\\\n \tbuiltin_define (\"__SSE3__\");\t\t\t\t\\\n+      if (TARGET_SSSE3)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__SSSE3__\");\t\t\t\t\\\n       if (TARGET_SSE_MATH && TARGET_SSE)\t\t\t\\\n \tbuiltin_define (\"__SSE_MATH__\");\t\t\t\\\n       if (TARGET_SSE_MATH && TARGET_SSE2)\t\t\t\\"}, {"sha": "049b86aa206986c066ca7250fcf5aef17c03987c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b1875f5291aa2c8765bd46efea03354a2288f447", "patch": "@@ -148,6 +148,11 @@\n    (UNSPEC_SP_TEST\t\t101)\n    (UNSPEC_SP_TLS_SET\t\t102)\n    (UNSPEC_SP_TLS_TEST\t\t103)\n+\n+   ; SSSE3\n+   (UNSPEC_PSHUFB\t\t120)\n+   (UNSPEC_PSIGN\t\t121)\n+   (UNSPEC_PALIGNR\t\t122)\n   ])\n \n (define_constants\n@@ -20954,6 +20959,6 @@\n   }\n   [(set_attr \"type\" \"multi\")])\n \n-(include \"sse.md\")\n (include \"mmx.md\")\n+(include \"sse.md\")\n (include \"sync.md\")"}, {"sha": "aa249205e24818bbac70467557cf44642976a234", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=b1875f5291aa2c8765bd46efea03354a2288f447", "patch": "@@ -197,6 +197,10 @@ msse3\n Target Report Mask(SSE3)\n Support MMX, SSE, SSE2 and SSE3 built-in functions and code generation\n \n+mssse3\n+Target Report Mask(SSSE3)\n+Support MMX, SSE, SSE2, SSE3 and SSSE3 built-in functions and code generation\n+\n msseregparm\n Target RejectNegative Mask(SSEREGPARM)\n Use SSE register passing conventions for SF and DF mode"}, {"sha": "1424149c1ab2aea50547549515f82990d3c6350e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 575, "deletions": 0, "changes": 575, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b1875f5291aa2c8765bd46efea03354a2288f447", "patch": "@@ -4000,3 +4000,578 @@\n ;; zero extended to 64bit, we only need to set up 32bit registers.\n   \"monitor\"\n   [(set_attr \"length\" \"3\")])\n+\n+;; SSSE3\n+(define_insn \"ssse3_phaddwv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+\t(vec_concat:V8HI\n+\t  (vec_concat:V4HI\n+\t    (vec_concat:V2HI\n+\t      (plus:HI\n+\t\t(vec_select:HI\n+\t\t  (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t  (parallel [(const_int 0)]))\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t      (plus:HI\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 2)]))\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 3)]))))\n+\t    (vec_concat:V2HI\n+\t      (plus:HI\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 4)]))\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 5)])))\n+\t      (plus:HI\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 6)]))\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 7)])))))\n+\t  (vec_concat:V4HI\n+\t    (vec_concat:V2HI\n+\t      (plus:HI\n+\t\t(vec_select:HI\n+\t\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")\n+\t\t  (parallel [(const_int 0)]))\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 1)])))\n+\t      (plus:HI\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 2)]))\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 3)]))))\n+\t    (vec_concat:V2HI\n+\t      (plus:HI\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 4)]))\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 5)])))\n+\t      (plus:HI\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 6)]))\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 7)])))))))]\n+  \"TARGET_SSSE3\"\n+  \"phaddw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"ssse3_phaddwv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+\t(vec_concat:V4HI\n+\t  (vec_concat:V2HI\n+\t    (plus:HI\n+\t      (vec_select:HI\n+\t\t(match_operand:V4HI 1 \"register_operand\" \"0\")\n+\t\t(parallel [(const_int 0)]))\n+\t      (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t    (plus:HI\n+\t      (vec_select:HI (match_dup 1) (parallel [(const_int 2)]))\n+\t      (vec_select:HI (match_dup 1) (parallel [(const_int 3)]))))\n+\t  (vec_concat:V2HI\n+\t    (plus:HI\n+\t      (vec_select:HI\n+\t\t(match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")\n+\t\t(parallel [(const_int 0)]))\n+\t      (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))\n+\t    (plus:HI\n+\t      (vec_select:HI (match_dup 2) (parallel [(const_int 2)]))\n+\t      (vec_select:HI (match_dup 2) (parallel [(const_int 3)]))))))]\n+  \"TARGET_SSSE3\"\n+  \"phaddw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"ssse3_phadddv4si3\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+\t(vec_concat:V4SI\n+\t  (vec_concat:V2SI\n+\t    (plus:SI\n+\t      (vec_select:SI\n+\t\t(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t(parallel [(const_int 0)]))\n+\t      (vec_select:SI (match_dup 1) (parallel [(const_int 1)])))\n+\t    (plus:SI\n+\t      (vec_select:SI (match_dup 1) (parallel [(const_int 2)]))\n+\t      (vec_select:SI (match_dup 1) (parallel [(const_int 3)]))))\n+\t  (vec_concat:V2SI\n+\t    (plus:SI\n+\t      (vec_select:SI\n+\t\t(match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n+\t\t(parallel [(const_int 0)]))\n+\t      (vec_select:SI (match_dup 2) (parallel [(const_int 1)])))\n+\t    (plus:SI\n+\t      (vec_select:SI (match_dup 2) (parallel [(const_int 2)]))\n+\t      (vec_select:SI (match_dup 2) (parallel [(const_int 3)]))))))]\n+  \"TARGET_SSSE3\"\n+  \"phaddd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"ssse3_phadddv2si3\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(vec_concat:V2SI\n+\t  (plus:SI\n+\t    (vec_select:SI\n+\t      (match_operand:V2SI 1 \"register_operand\" \"0\")\n+\t      (parallel [(const_int 0)]))\n+\t    (vec_select:SI (match_dup 1) (parallel [(const_int 1)])))\n+\t  (plus:SI\n+\t    (vec_select:SI\n+\t      (match_operand:V2SI 2 \"nonimmediate_operand\" \"ym\")\n+\t      (parallel [(const_int 0)]))\n+\t    (vec_select:SI (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"TARGET_SSSE3\"\n+  \"phaddd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"ssse3_phaddswv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+\t(vec_concat:V8HI\n+\t  (vec_concat:V4HI\n+\t    (vec_concat:V2HI\n+\t      (ss_plus:HI\n+\t\t(vec_select:HI\n+\t\t  (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t  (parallel [(const_int 0)]))\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t      (ss_plus:HI\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 2)]))\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 3)]))))\n+\t    (vec_concat:V2HI\n+\t      (ss_plus:HI\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 4)]))\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 5)])))\n+\t      (ss_plus:HI\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 6)]))\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 7)])))))\n+\t  (vec_concat:V4HI\n+\t    (vec_concat:V2HI\n+\t      (ss_plus:HI\n+\t\t(vec_select:HI\n+\t\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")\n+\t\t  (parallel [(const_int 0)]))\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 1)])))\n+\t      (ss_plus:HI\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 2)]))\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 3)]))))\n+\t    (vec_concat:V2HI\n+\t      (ss_plus:HI\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 4)]))\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 5)])))\n+\t      (ss_plus:HI\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 6)]))\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 7)])))))))]\n+  \"TARGET_SSSE3\"\n+  \"phaddsw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"ssse3_phaddswv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+\t(vec_concat:V4HI\n+\t  (vec_concat:V2HI\n+\t    (ss_plus:HI\n+\t      (vec_select:HI\n+\t\t(match_operand:V4HI 1 \"register_operand\" \"0\")\n+\t\t(parallel [(const_int 0)]))\n+\t      (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t    (ss_plus:HI\n+\t      (vec_select:HI (match_dup 1) (parallel [(const_int 2)]))\n+\t      (vec_select:HI (match_dup 1) (parallel [(const_int 3)]))))\n+\t  (vec_concat:V2HI\n+\t    (ss_plus:HI\n+\t      (vec_select:HI\n+\t\t(match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")\n+\t\t(parallel [(const_int 0)]))\n+\t      (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))\n+\t    (ss_plus:HI\n+\t      (vec_select:HI (match_dup 2) (parallel [(const_int 2)]))\n+\t      (vec_select:HI (match_dup 2) (parallel [(const_int 3)]))))))]\n+  \"TARGET_SSSE3\"\n+  \"phaddsw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"ssse3_phsubwv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+\t(vec_concat:V8HI\n+\t  (vec_concat:V4HI\n+\t    (vec_concat:V2HI\n+\t      (minus:HI\n+\t\t(vec_select:HI\n+\t\t  (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t  (parallel [(const_int 0)]))\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t      (minus:HI\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 2)]))\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 3)]))))\n+\t    (vec_concat:V2HI\n+\t      (minus:HI\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 4)]))\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 5)])))\n+\t      (minus:HI\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 6)]))\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 7)])))))\n+\t  (vec_concat:V4HI\n+\t    (vec_concat:V2HI\n+\t      (minus:HI\n+\t\t(vec_select:HI\n+\t\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")\n+\t\t  (parallel [(const_int 0)]))\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 1)])))\n+\t      (minus:HI\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 2)]))\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 3)]))))\n+\t    (vec_concat:V2HI\n+\t      (minus:HI\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 4)]))\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 5)])))\n+\t      (minus:HI\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 6)]))\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 7)])))))))]\n+  \"TARGET_SSSE3\"\n+  \"phsubw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"ssse3_phsubwv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+\t(vec_concat:V4HI\n+\t  (vec_concat:V2HI\n+\t    (minus:HI\n+\t      (vec_select:HI\n+\t\t(match_operand:V4HI 1 \"register_operand\" \"0\")\n+\t\t(parallel [(const_int 0)]))\n+\t      (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t    (minus:HI\n+\t      (vec_select:HI (match_dup 1) (parallel [(const_int 2)]))\n+\t      (vec_select:HI (match_dup 1) (parallel [(const_int 3)]))))\n+\t  (vec_concat:V2HI\n+\t    (minus:HI\n+\t      (vec_select:HI\n+\t\t(match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")\n+\t\t(parallel [(const_int 0)]))\n+\t      (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))\n+\t    (minus:HI\n+\t      (vec_select:HI (match_dup 2) (parallel [(const_int 2)]))\n+\t      (vec_select:HI (match_dup 2) (parallel [(const_int 3)]))))))]\n+  \"TARGET_SSSE3\"\n+  \"phsubw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"ssse3_phsubdv4si3\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+\t(vec_concat:V4SI\n+\t  (vec_concat:V2SI\n+\t    (minus:SI\n+\t      (vec_select:SI\n+\t\t(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t(parallel [(const_int 0)]))\n+\t      (vec_select:SI (match_dup 1) (parallel [(const_int 1)])))\n+\t    (minus:SI\n+\t      (vec_select:SI (match_dup 1) (parallel [(const_int 2)]))\n+\t      (vec_select:SI (match_dup 1) (parallel [(const_int 3)]))))\n+\t  (vec_concat:V2SI\n+\t    (minus:SI\n+\t      (vec_select:SI\n+\t\t(match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n+\t\t(parallel [(const_int 0)]))\n+\t      (vec_select:SI (match_dup 2) (parallel [(const_int 1)])))\n+\t    (minus:SI\n+\t      (vec_select:SI (match_dup 2) (parallel [(const_int 2)]))\n+\t      (vec_select:SI (match_dup 2) (parallel [(const_int 3)]))))))]\n+  \"TARGET_SSSE3\"\n+  \"phsubd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"ssse3_phsubdv2si3\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(vec_concat:V2SI\n+\t  (minus:SI\n+\t    (vec_select:SI\n+\t      (match_operand:V2SI 1 \"register_operand\" \"0\")\n+\t      (parallel [(const_int 0)]))\n+\t    (vec_select:SI (match_dup 1) (parallel [(const_int 1)])))\n+\t  (minus:SI\n+\t    (vec_select:SI\n+\t      (match_operand:V2SI 2 \"nonimmediate_operand\" \"ym\")\n+\t      (parallel [(const_int 0)]))\n+\t    (vec_select:SI (match_dup 2) (parallel [(const_int 1)])))))]\n+  \"TARGET_SSSE3\"\n+  \"phsubd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"ssse3_phsubswv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+\t(vec_concat:V8HI\n+\t  (vec_concat:V4HI\n+\t    (vec_concat:V2HI\n+\t      (ss_minus:HI\n+\t\t(vec_select:HI\n+\t\t  (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t  (parallel [(const_int 0)]))\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t      (ss_minus:HI\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 2)]))\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 3)]))))\n+\t    (vec_concat:V2HI\n+\t      (ss_minus:HI\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 4)]))\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 5)])))\n+\t      (ss_minus:HI\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 6)]))\n+\t\t(vec_select:HI (match_dup 1) (parallel [(const_int 7)])))))\n+\t  (vec_concat:V4HI\n+\t    (vec_concat:V2HI\n+\t      (ss_minus:HI\n+\t\t(vec_select:HI\n+\t\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")\n+\t\t  (parallel [(const_int 0)]))\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 1)])))\n+\t      (ss_minus:HI\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 2)]))\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 3)]))))\n+\t    (vec_concat:V2HI\n+\t      (ss_minus:HI\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 4)]))\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 5)])))\n+\t      (ss_minus:HI\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 6)]))\n+\t\t(vec_select:HI (match_dup 2) (parallel [(const_int 7)])))))))]\n+  \"TARGET_SSSE3\"\n+  \"phsubsw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"ssse3_phsubswv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+\t(vec_concat:V4HI\n+\t  (vec_concat:V2HI\n+\t    (ss_minus:HI\n+\t      (vec_select:HI\n+\t\t(match_operand:V4HI 1 \"register_operand\" \"0\")\n+\t\t(parallel [(const_int 0)]))\n+\t      (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t    (ss_minus:HI\n+\t      (vec_select:HI (match_dup 1) (parallel [(const_int 2)]))\n+\t      (vec_select:HI (match_dup 1) (parallel [(const_int 3)]))))\n+\t  (vec_concat:V2HI\n+\t    (ss_minus:HI\n+\t      (vec_select:HI\n+\t\t(match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")\n+\t\t(parallel [(const_int 0)]))\n+\t      (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))\n+\t    (ss_minus:HI\n+\t      (vec_select:HI (match_dup 2) (parallel [(const_int 2)]))\n+\t      (vec_select:HI (match_dup 2) (parallel [(const_int 3)]))))))]\n+  \"TARGET_SSSE3\"\n+  \"phsubsw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"ssse3_pmaddubswv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+\t(ss_plus:V8HI\n+\t  (mult:V8HI\n+\t    (zero_extend:V8HI\n+\t      (vec_select:V4QI\n+\t\t(match_operand:V16QI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t(parallel [(const_int 0)\n+\t\t\t   (const_int 2)\n+\t\t\t   (const_int 4)\n+\t\t\t   (const_int 6)\n+\t\t\t   (const_int 8)\n+\t\t\t   (const_int 10)\n+\t\t\t   (const_int 12)\n+\t\t\t   (const_int 14)])))\n+\t    (sign_extend:V8HI\n+\t      (vec_select:V8QI\n+\t\t(match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")\n+\t\t(parallel [(const_int 0)\n+\t\t\t   (const_int 2)\n+\t\t\t   (const_int 4)\n+\t\t\t   (const_int 6)\n+\t\t\t   (const_int 8)\n+\t\t\t   (const_int 10)\n+\t\t\t   (const_int 12)\n+\t\t\t   (const_int 14)]))))\n+\t  (mult:V8HI\n+\t    (zero_extend:V8HI\n+\t      (vec_select:V16QI (match_dup 1)\n+\t\t(parallel [(const_int 1)\n+\t\t\t   (const_int 3)\n+\t\t\t   (const_int 5)\n+\t\t\t   (const_int 7)\n+\t\t\t   (const_int 9)\n+\t\t\t   (const_int 11)\n+\t\t\t   (const_int 13)\n+\t\t\t   (const_int 15)])))\n+\t    (sign_extend:V8HI\n+\t      (vec_select:V16QI (match_dup 2)\n+\t\t(parallel [(const_int 1)\n+\t\t\t   (const_int 3)\n+\t\t\t   (const_int 5)\n+\t\t\t   (const_int 7)\n+\t\t\t   (const_int 9)\n+\t\t\t   (const_int 11)\n+\t\t\t   (const_int 13)\n+\t\t\t   (const_int 15)]))))))]\n+  \"TARGET_SSSE3\"\n+  \"pmaddubsw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"ssse3_pmaddubswv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+\t(ss_plus:V4HI\n+\t  (mult:V4HI\n+\t    (zero_extend:V4HI\n+\t      (vec_select:V4QI\n+\t\t(match_operand:V8QI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t(parallel [(const_int 0)\n+\t\t\t   (const_int 2)\n+\t\t\t   (const_int 4)\n+\t\t\t   (const_int 6)])))\n+\t    (sign_extend:V4HI\n+\t      (vec_select:V4QI\n+\t\t(match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")\n+\t\t(parallel [(const_int 0)\n+\t\t\t   (const_int 2)\n+\t\t\t   (const_int 4)\n+\t\t\t   (const_int 6)]))))\n+\t  (mult:V4HI\n+\t    (zero_extend:V4HI\n+\t      (vec_select:V8QI (match_dup 1)\n+\t\t(parallel [(const_int 1)\n+\t\t\t   (const_int 3)\n+\t\t\t   (const_int 5)\n+\t\t\t   (const_int 7)])))\n+\t    (sign_extend:V4HI\n+\t      (vec_select:V8QI (match_dup 2)\n+\t\t(parallel [(const_int 1)\n+\t\t\t   (const_int 3)\n+\t\t\t   (const_int 5)\n+\t\t\t   (const_int 7)]))))))]\n+  \"TARGET_SSSE3\"\n+  \"pmaddubsw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"ssse3_pmulhrswv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+\t(truncate:V8HI\n+\t  (lshiftrt:V8SI\n+\t    (plus:V8SI\n+\t      (lshiftrt:V8SI\n+\t\t(mult:V8SI\n+\t\t  (sign_extend:V8SI\n+\t\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"%0\"))\n+\t\t  (sign_extend:V8SI\n+\t\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))\n+\t\t(const_int 14))\n+\t      (const_vector:V8HI [(const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)]))\n+\t    (const_int 1))))]\n+  \"TARGET_SSSE3 && ix86_binary_operator_ok (MULT, V8HImode, operands)\"\n+  \"pmulhrsw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseimul\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"ssse3_pmulhrswv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+\t(truncate:V4HI\n+\t  (lshiftrt:V4SI\n+\t    (plus:V4SI\n+\t      (lshiftrt:V4SI\n+\t\t(mult:V4SI\n+\t\t  (sign_extend:V4SI\n+\t\t    (match_operand:V4HI 1 \"nonimmediate_operand\" \"%0\"))\n+\t\t  (sign_extend:V4SI\n+\t\t    (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))\n+\t\t(const_int 14))\n+\t      (const_vector:V4HI [(const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)]))\n+\t    (const_int 1))))]\n+  \"TARGET_SSSE3 && ix86_binary_operator_ok (MULT, V4HImode, operands)\"\n+  \"pmulhrsw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseimul\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"ssse3_pshufbv16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")]\n+\t\t       UNSPEC_PSHUFB))]\n+  \"TARGET_SSSE3\"\n+  \"pshufb\\t{%2, %0|%0, %2}\";\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"ssse3_pshufbv8qi3\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n+\t(unspec:V8QI [(match_operand:V8QI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")]\n+\t\t      UNSPEC_PSHUFB))]\n+  \"TARGET_SSSE3\"\n+  \"pshufb\\t{%2, %0|%0, %2}\";\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"ssse3_psign<mode>3\"\n+  [(set (match_operand:SSEMODE124 0 \"register_operand\" \"=x\")\n+\t(unspec:SSEMODE124 [(match_operand:SSEMODE124 1 \"register_operand\" \"0\")\n+\t\t\t    (match_operand:SSEMODE124 2 \"nonimmediate_operand\" \"xm\")]\n+\t\t\t    UNSPEC_PSIGN))]\n+  \"TARGET_SSSE3\"\n+  \"psign<ssevecsize>\\t{%2, %0|%0, %2}\";\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"ssse3_psign<mode>3\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y\")\n+\t(unspec:MMXMODEI [(match_operand:MMXMODEI 1 \"register_operand\" \"0\")\n+\t\t\t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\" \"ym\")]\n+\t\t\t  UNSPEC_PSIGN))]\n+  \"TARGET_SSSE3\"\n+  \"psign<mmxvecsize>\\t{%2, %0|%0, %2}\";\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"ssse3_palignrti\"\n+  [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n+\t(unspec:TI [(match_operand:TI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:TI 2 \"nonimmediate_operand\" \"xm\")\n+\t\t    (match_operand:SI 3 \"const_0_to_255_mul_8_operand\" \"n\")]\n+\t\t    UNSPEC_PALIGNR))]\n+  \"TARGET_SSSE3\"\n+{\n+  operands[3] = GEN_INT (INTVAL (operands[3]) / 8);\n+  return \"palignr\\t{%3, %2, %0|%0, %2, %3}\";\n+}\n+  [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"ssse3_palignrdi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:DI 2 \"nonimmediate_operand\" \"ym\")\n+\t\t    (match_operand:SI 3 \"const_0_to_255_mul_8_operand\" \"n\")]\n+\t\t    UNSPEC_PALIGNR))]\n+  \"TARGET_SSSE3\"\n+{\n+  operands[3] = GEN_INT (INTVAL (operands[3]) / 8);\n+  return \"palignr\\t{%3, %2, %0|%0, %2, %3}\";\n+}\n+  [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"abs<mode>2\"\n+  [(set (match_operand:SSEMODE124 0 \"register_operand\" \"=x\")\n+\t(abs:SSEMODE124 (match_operand:SSEMODE124 1 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSSE3\"\n+  \"pabs<ssevecsize>\\t{%1, %0|%0, %1}\";\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"abs<mode>2\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y\")\n+\t(abs:MMXMODEI (match_operand:MMXMODEI 1 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_SSSE3\"\n+  \"pabs<mmxvecsize>\\t{%1, %0|%0, %1}\";\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"mode\" \"DI\")])"}, {"sha": "e1bedc56135448a5c89991282315e4d5ee684754", "filename": "gcc/config/i386/tmmintrin.h", "status": "added", "additions": 448, "deletions": 0, "changes": 448, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fconfig%2Fi386%2Ftmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fconfig%2Fi386%2Ftmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ftmmintrin.h?ref=b1875f5291aa2c8765bd46efea03354a2288f447", "patch": "@@ -0,0 +1,448 @@\n+/* Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you include this header file into source\n+   files compiled by GCC, this header file does not by itself cause\n+   the resulting executable to be covered by the GNU General Public\n+   License.  This exception does not however invalidate any other\n+   reasons why the executable file might be covered by the GNU General\n+   Public License.  */\n+\n+/* Implemented from the specification included in the Intel C++ Compiler\n+   User Guide and Reference, version 9.1.  */\n+\n+#ifndef _TMMINTRIN_H_INCLUDED\n+#define _TMMINTRIN_H_INCLUDED\n+\n+#ifdef __SSSE3__\n+#include <pmmintrin.h>\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_hadd_epi16 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_phaddw128 ((__v8hi)__X, (__v8hi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_hadd_epi32 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_phaddd128 ((__v4si)__X, (__v4si)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_hadds_epi16 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_phaddsw128 ((__v8hi)__X, (__v8hi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_hadd_pi16 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_phaddw ((__v4hi)__X, (__v4hi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_hadd_pi32 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_phaddd ((__v2si)__X, (__v2si)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_hadds_pi16 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_phaddsw ((__v4hi)__X, (__v4hi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_hsub_epi16 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_phsubw128 ((__v8hi)__X, (__v8hi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_hsub_epi32 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_phsubd128 ((__v4si)__X, (__v4si)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_hsubs_epi16 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_phsubsw128 ((__v8hi)__X, (__v8hi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_hsub_pi16 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_phsubw ((__v4hi)__X, (__v4hi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_hsub_pi32 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_phsubd ((__v2si)__X, (__v2si)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_hsubs_pi16 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_phsubsw ((__v4hi)__X, (__v4hi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_maddubs_epi16 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_pmaddubsw128 ((__v16qi)__X, (__v16qi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_maddubs_pi16 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_pmaddubsw ((__v8qi)__X, (__v8qi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_mulhrs_epi16 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_pmulhrsw128 ((__v8hi)__X, (__v8hi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_mulhrs_pi16 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_pmulhrsw ((__v4hi)__X, (__v4hi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_shuffle_epi8 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_pshufb128 ((__v16qi)__X, (__v16qi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_shuffle_pi8 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_pshufb ((__v8qi)__X, (__v8qi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_sign_epi8 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_psignb128 ((__v16qi)__X, (__v16qi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_sign_epi16 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_psignw128 ((__v8hi)__X, (__v8hi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_sign_epi32 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_psignd128 ((__v4si)__X, (__v4si)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_sign_pi8 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_psignb ((__v8qi)__X, (__v8qi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_sign_pi16 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_psignw ((__v4hi)__X, (__v4hi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_sign_pi32 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_psignd ((__v2si)__X, (__v2si)__Y);\n+}\n+\n+#define _mm_alignr_epi8(__X, __Y, __N) \\\n+  ((__m128i)__builtin_ia32_palignr128 ((__v2di) __X, (__v2di) __Y, (__N) * 8))\n+\n+#define _mm_alignr_pi8(__X, __Y, __N) \\\n+  ((__m64)__builtin_ia32_palignr ((long long) (__X), (long long) (__Y), (__N) * 8))\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_abs_epi8 (__m128i __X)\n+{\n+  return (__m128i) __builtin_ia32_pabsb128 ((__v16qi)__X);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_abs_epi16 (__m128i __X)\n+{\n+  return (__m128i) __builtin_ia32_pabsw128 ((__v8hi)__X);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_abs_epi32 (__m128i __X)\n+{\n+  return (__m128i) __builtin_ia32_pabsd128 ((__v4si)__X);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_abs_pi8 (__m64 __X)\n+{\n+  return (__m64) __builtin_ia32_pabsb ((__v8qi)__X);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_abs_pi16 (__m64 __X)\n+{\n+  return (__m64) __builtin_ia32_pabsw ((__v4hi)__X);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_abs_pi32 (__m64 __X)\n+{\n+  return (__m64) __builtin_ia32_pabsd ((__v2si)__X);\n+}\n+\n+#endif /* __SSSE3__ */\n+\n+#endif /* _TMMINTRIN_H_INCLUDED */\n+/* Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 59 Temple Place - Suite 330,\n+   Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you include this header file into source\n+   files compiled by GCC, this header file does not by itself cause\n+   the resulting executable to be covered by the GNU General Public\n+   License.  This exception does not however invalidate any other\n+   reasons why the executable file might be covered by the GNU General\n+   Public License.  */\n+\n+/* Implemented from the specification included in the Intel C++ Compiler\n+   User Guide and Reference, version 9.1.  */\n+\n+#ifndef _TMMINTRIN_H_INCLUDED\n+#define _TMMINTRIN_H_INCLUDED\n+\n+#ifdef __SSSE3__\n+#include <pmmintrin.h>\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_hadd_epi16 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_phaddw128 ((__v8hi)__X, (__v8hi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_hadd_epi32 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_phaddd128 ((__v4si)__X, (__v4si)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_hadds_epi16 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_phaddsw128 ((__v8hi)__X, (__v8hi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_hadd_pi16 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_phaddw ((__v4hi)__X, (__v4hi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_hadd_pi32 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_phaddd ((__v2si)__X, (__v2si)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_hadds_pi16 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_phaddsw ((__v4hi)__X, (__v4hi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_hsub_epi16 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_phsubw128 ((__v8hi)__X, (__v8hi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_hsub_epi32 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_phsubd128 ((__v4si)__X, (__v4si)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_hsubs_epi16 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_phsubsw128 ((__v8hi)__X, (__v8hi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_hsub_pi16 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_phsubw ((__v4hi)__X, (__v4hi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_hsub_pi32 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_phsubd ((__v2si)__X, (__v2si)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_hsubs_pi16 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_phsubsw ((__v4hi)__X, (__v4hi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_maddubs_epi16 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_pmaddubsw128 ((__v16qi)__X, (__v16qi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_maddubs_pi16 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_pmaddubsw ((__v8qi)__X, (__v8qi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_mulhrs_epi16 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_pmulhrsw128 ((__v8hi)__X, (__v8hi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_mulhrs_pi16 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_pmulhrsw ((__v4hi)__X, (__v4hi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_shuffle_epi8 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_pshufb128 ((__v16qi)__X, (__v16qi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_shuffle_pi8 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_pshufb ((__v8qi)__X, (__v8qi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_sign_epi8 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_psignb128 ((__v16qi)__X, (__v16qi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_sign_epi16 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_psignw128 ((__v8hi)__X, (__v8hi)__Y);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_sign_epi32 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) __builtin_ia32_psignd128 ((__v4si)__X, (__v4si)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_sign_pi8 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_psignb ((__v8qi)__X, (__v8qi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_sign_pi16 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_psignw ((__v4hi)__X, (__v4hi)__Y);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_sign_pi32 (__m64 __X, __m64 __Y)\n+{\n+  return (__m64) __builtin_ia32_psignd ((__v2si)__X, (__v2si)__Y);\n+}\n+\n+#define _mm_alignr_epi8(__X, __Y, __N) \\\n+  ((__m128i)__builtin_ia32_palignr128 ((__v2di) __X, (__v2di) __Y, (__N) * 8))\n+\n+#define _mm_alignr_pi8(__X, __Y, __N) \\\n+  ((__m64)__builtin_ia32_palignr ((long long) (__X), (long long) (__Y), (__N) * 8))\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_abs_epi8 (__m128i __X)\n+{\n+  return (__m128i) __builtin_ia32_pabsb128 ((__v16qi)__X);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_abs_epi16 (__m128i __X)\n+{\n+  return (__m128i) __builtin_ia32_pabsw128 ((__v8hi)__X);\n+}\n+\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_abs_epi32 (__m128i __X)\n+{\n+  return (__m128i) __builtin_ia32_pabsd128 ((__v4si)__X);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_abs_pi8 (__m64 __X)\n+{\n+  return (__m64) __builtin_ia32_pabsb ((__v8qi)__X);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_abs_pi16 (__m64 __X)\n+{\n+  return (__m64) __builtin_ia32_pabsw ((__v4hi)__X);\n+}\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_abs_pi32 (__m64 __X)\n+{\n+  return (__m64) __builtin_ia32_pabsd ((__v2si)__X);\n+}\n+\n+#endif /* __SSSE3__ */\n+\n+#endif /* _TMMINTRIN_H_INCLUDED */"}, {"sha": "a12879ce5bafb8ab081e3a4789e568d7dd53acdc", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b1875f5291aa2c8765bd46efea03354a2288f447", "patch": "@@ -7169,6 +7169,52 @@ The following built-in functions are available when @option{-msse3} is used.\n Generates the @code{movddup} machine instruction as a load from memory.\n @end table\n \n+The following built-in functions are available when @option{-mssse3} is used.\n+All of them generate the machine instruction that is part of the name\n+with MMX registers.\n+\n+@smallexample\n+v2si __builtin_ia32_phaddd (v2si, v2si)\n+v4hi __builtin_ia32_phaddw (v4hi, v4hi)\n+v4hi __builtin_ia32_phaddsw (v4hi, v4hi)\n+v2si __builtin_ia32_phsubd (v2si, v2si)\n+v4hi __builtin_ia32_phsubw (v4hi, v4hi)\n+v4hi __builtin_ia32_phsubsw (v4hi, v4hi)\n+v8qi __builtin_ia32_pmaddubsw (v8qi, v8qi)\n+v4hi __builtin_ia32_pmulhrsw (v4hi, v4hi)\n+v8qi __builtin_ia32_pshufb (v8qi, v8qi)\n+v8qi __builtin_ia32_psignb (v8qi, v8qi)\n+v2si __builtin_ia32_psignd (v2si, v2si)\n+v4hi __builtin_ia32_psignw (v4hi, v4hi)\n+long long __builtin_ia32_palignr (long long, long long, int)\n+v8qi __builtin_ia32_pabsb (v8qi)\n+v2si __builtin_ia32_pabsd (v2si)\n+v4hi __builtin_ia32_pabsw (v4hi)\n+@end smallexample\n+\n+The following built-in functions are available when @option{-mssse3} is used.\n+All of them generate the machine instruction that is part of the name\n+with SSE registers.\n+\n+@smallexample\n+v4si __builtin_ia32_phaddd128 (v4si, v4si)\n+v8hi __builtin_ia32_phaddw128 (v8hi, v8hi)\n+v8hi __builtin_ia32_phaddsw128 (v8hi, v8hi)\n+v4si __builtin_ia32_phsubd128 (v4si, v4si)\n+v8hi __builtin_ia32_phsubw128 (v8hi, v8hi)\n+v8hi __builtin_ia32_phsubsw128 (v8hi, v8hi)\n+v16qi __builtin_ia32_pmaddubsw128 (v16qi, v16qi)\n+v8hi __builtin_ia32_pmulhrsw128 (v8hi, v8hi)\n+v16qi __builtin_ia32_pshufb128 (v16qi, v16qi)\n+v16qi __builtin_ia32_psignb128 (v16qi, v16qi)\n+v4si __builtin_ia32_psignd128 (v4si, v4si)\n+v8hi __builtin_ia32_psignw128 (v8hi, v8hi)\n+v2di __builtin_ia32_palignr (v2di, v2di, int)\n+v16qi __builtin_ia32_pabsb128 (v16qi)\n+v4si __builtin_ia32_pabsd128 (v4si)\n+v8hi __builtin_ia32_pabsw128 (v8hi)\n+@end smallexample\n+\n The following built-in functions are available when @option{-m3dnow} is used.\n All of them generate the machine instruction that is part of the name.\n "}, {"sha": "a5209927e599304f8fd6e02116eccdc911b8cc6d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1875f5291aa2c8765bd46efea03354a2288f447/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b1875f5291aa2c8765bd46efea03354a2288f447", "patch": "@@ -533,7 +533,7 @@ Objective-C and Objective-C++ Dialects}.\n -mno-fp-ret-in-387  -msoft-float  -msvr3-shlib @gol\n -mno-wide-multiply  -mrtd  -malign-double @gol\n -mpreferred-stack-boundary=@var{num} @gol\n--mmmx  -msse  -msse2 -msse3 -m3dnow @gol\n+-mmmx  -msse  -msse2 -msse3 -mssse3 -m3dnow @gol\n -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n -m96bit-long-double  -mregparm=@var{num}  -msseregparm @gol\n@@ -9568,6 +9568,8 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mno-sse2\n @item -msse3\n @itemx -mno-sse3\n+@item -mssse3\n+@itemx -mno-ssse3\n @item -m3dnow\n @itemx -mno-3dnow\n @opindex mmmx\n@@ -9577,9 +9579,10 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @opindex m3dnow\n @opindex mno-3dnow\n These switches enable or disable the use of instructions in the MMX,\n-SSE, SSE2 or 3DNow! extended instruction sets.  These extensions are\n-also available as built-in functions: see @ref{X86 Built-in Functions},\n-for details of the functions enabled and disabled by these switches.\n+SSE, SSE2, SSE3, SSSE3 or 3DNow! extended instruction sets.\n+These extensions are also available as built-in functions: see\n+@ref{X86 Built-in Functions}, for details of the functions enabled and\n+disabled by these switches.\n \n To have SSE/SSE2 instructions generated automatically from floating-point\n code (as opposed to 387 instructions), see @option{-mfpmath=sse}."}]}