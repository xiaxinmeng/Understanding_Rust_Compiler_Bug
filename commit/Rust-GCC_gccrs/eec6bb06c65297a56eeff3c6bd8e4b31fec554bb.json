{"sha": "eec6bb06c65297a56eeff3c6bd8e4b31fec554bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVjNmJiMDZjNjUyOTdhNTZlZWZmM2M2YmQ4ZTRiMzFmZWM1NTRiYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-01-26T23:21:45Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-01-26T23:21:45Z"}, "message": "Revert last change.\n\nFrom-SVN: r94291", "tree": {"sha": "c828ac0ac89a98ec49d783702a5abcc79e0be758", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c828ac0ac89a98ec49d783702a5abcc79e0be758"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eec6bb06c65297a56eeff3c6bd8e4b31fec554bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec6bb06c65297a56eeff3c6bd8e4b31fec554bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eec6bb06c65297a56eeff3c6bd8e4b31fec554bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec6bb06c65297a56eeff3c6bd8e4b31fec554bb/comments", "author": null, "committer": null, "parents": [{"sha": "78ef1e3d9fbe214ead3c117ec54a5c10da91a0df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78ef1e3d9fbe214ead3c117ec54a5c10da91a0df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78ef1e3d9fbe214ead3c117ec54a5c10da91a0df"}], "stats": {"total": 29, "additions": 8, "deletions": 21}, "files": [{"sha": "288527460ae8c9441d0fc451e99984c2e5a1ba1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec6bb06c65297a56eeff3c6bd8e4b31fec554bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec6bb06c65297a56eeff3c6bd8e4b31fec554bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eec6bb06c65297a56eeff3c6bd8e4b31fec554bb", "patch": "@@ -1,3 +1,7 @@\n+2005-01-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-decl.c, expmed.c, expr.c: Revert last change.\n+\n 2005-01-26  Richard Henderson  <rth@redhat.com>\n \n \tPR middle-end/18008"}, {"sha": "6673927eab608caa7a8bf3154d99ed460fd04db1", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec6bb06c65297a56eeff3c6bd8e4b31fec554bb/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec6bb06c65297a56eeff3c6bd8e4b31fec554bb/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=eec6bb06c65297a56eeff3c6bd8e4b31fec554bb", "patch": "@@ -5301,11 +5301,8 @@ finish_struct (tree t, tree fieldlist, tree attributes)\n \t    = tree_low_cst (DECL_INITIAL (*fieldlistp), 1);\n \t  tree type = TREE_TYPE (*fieldlistp);\n \t  if (width != TYPE_PRECISION (type))\n-\t    {\n-\t      TREE_TYPE (*fieldlistp)\n-\t        = build_nonstandard_integer_type (width, TYPE_UNSIGNED (type));\n-\t      DECL_MODE (*fieldlistp) = TYPE_MODE (TREE_TYPE (*fieldlistp));\n-\t    }\n+\t    TREE_TYPE (*fieldlistp)\n+\t      = build_nonstandard_integer_type (width, TYPE_UNSIGNED (type));\n \t  DECL_INITIAL (*fieldlistp) = 0;\n \t}\n       else"}, {"sha": "1091c454064a9be6e4e65183df22a8f63cf145ed", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec6bb06c65297a56eeff3c6bd8e4b31fec554bb/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec6bb06c65297a56eeff3c6bd8e4b31fec554bb/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=eec6bb06c65297a56eeff3c6bd8e4b31fec554bb", "patch": "@@ -878,7 +878,7 @@ store_fixed_bit_field (rtx op0, unsigned HOST_WIDE_INT offset,\n       if (GET_MODE (value) != mode)\n \t{\n \t  if ((REG_P (value) || GET_CODE (value) == SUBREG)\n-\t      && GET_MODE_SIZE (GET_MODE (value)) <= bitsize)\n+\t      && GET_MODE_SIZE (mode) < GET_MODE_SIZE (GET_MODE (value)))\n \t    value = gen_lowpart (mode, value);\n \t  else\n \t    value = convert_to_mode (mode, value, 1);"}, {"sha": "ed693a3166f6163371194766c2eee9af5627f7b8", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec6bb06c65297a56eeff3c6bd8e4b31fec554bb/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec6bb06c65297a56eeff3c6bd8e4b31fec554bb/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=eec6bb06c65297a56eeff3c6bd8e4b31fec554bb", "patch": "@@ -5215,21 +5215,7 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n \t  && TREE_CODE (TYPE_SIZE (TREE_TYPE (exp))) == INTEGER_CST\n \t  && compare_tree_int (TYPE_SIZE (TREE_TYPE (exp)), bitsize) != 0))\n     {\n-      rtx temp;\n-\n-      /* If EXP is a NOP_EXPR of precision less than its mode, then that\n-\t implies a mask operation.  If the precision is the same size as\n-\t the field we're storing into, that mask is redundant.  This is\n-\t particularly common with bit field assignments generated by the\n-\t C front end.  */\n-      if (TREE_CODE (exp) == NOP_EXPR\n-\t  && INTEGRAL_TYPE_P (TREE_TYPE (exp))\n-\t  && (TYPE_PRECISION (TREE_TYPE (exp))\n-\t      < GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (exp))))\n-\t  && bitsize == TYPE_PRECISION (TREE_TYPE (exp)))\n-\texp = TREE_OPERAND (exp, 0);\n-\n-      temp = expand_expr (exp, NULL_RTX, VOIDmode, 0);\n+      rtx temp = expand_expr (exp, NULL_RTX, VOIDmode, 0);\n \n       /* If BITSIZE is narrower than the size of the type of EXP\n \t we will be narrowing TEMP.  Normally, what's wanted are the"}]}