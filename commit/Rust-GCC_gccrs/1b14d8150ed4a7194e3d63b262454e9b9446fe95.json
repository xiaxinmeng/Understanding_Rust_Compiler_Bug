{"sha": "1b14d8150ed4a7194e3d63b262454e9b9446fe95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIxNGQ4MTUwZWQ0YTcxOTRlM2Q2M2IyNjI0NTRlOWI5NDQ2ZmU5NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-07-19T12:37:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-07-19T12:37:03Z"}, "message": "re PR tree-optimization/49742 (ICE for gcc.dg/vect/O3-pr39675-2.c on ARM)\n\ngcc/\n\tPR tree-optimization/49742\n\t* tree-data-ref.c (get_references_in_stmt): Treat the lhs of a call\n\tas a potential write.\n\nFrom-SVN: r176446", "tree": {"sha": "385291f03f96ddd5e27e38e3699d4190262d85a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/385291f03f96ddd5e27e38e3699d4190262d85a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b14d8150ed4a7194e3d63b262454e9b9446fe95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b14d8150ed4a7194e3d63b262454e9b9446fe95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b14d8150ed4a7194e3d63b262454e9b9446fe95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b14d8150ed4a7194e3d63b262454e9b9446fe95/comments", "author": null, "committer": null, "parents": [{"sha": "aaa7ad908187c88cf4eeaee10f0af1eb0b73e7f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaa7ad908187c88cf4eeaee10f0af1eb0b73e7f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaa7ad908187c88cf4eeaee10f0af1eb0b73e7f1"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "ee76d11065a83036dffa0878b8099b58ad559db6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b14d8150ed4a7194e3d63b262454e9b9446fe95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b14d8150ed4a7194e3d63b262454e9b9446fe95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b14d8150ed4a7194e3d63b262454e9b9446fe95", "patch": "@@ -1,3 +1,9 @@\n+2011-07-19  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/49742\n+\t* tree-data-ref.c (get_references_in_stmt): Treat the lhs of a call\n+\tas a potential write.\n+\n 2011-07-19  Richard Guenther  <rguenther@suse.de>\n \n \t* gimplify.c (gimplify_expr): Gimplify TRUTH_NOT_EXPR as"}, {"sha": "97be86c406d0c019178f43b7ed6dc706388fd2cc", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b14d8150ed4a7194e3d63b262454e9b9446fe95/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b14d8150ed4a7194e3d63b262454e9b9446fe95/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=1b14d8150ed4a7194e3d63b262454e9b9446fe95", "patch": "@@ -4158,33 +4158,37 @@ get_references_in_stmt (gimple stmt, VEC (data_ref_loc, heap) **references)\n \t  ref->pos = op1;\n \t  ref->is_read = true;\n \t}\n-\n-      if (DECL_P (*op0)\n-\t  || (REFERENCE_CLASS_P (*op0) && get_base_address (*op0)))\n-\t{\n-\t  ref = VEC_safe_push (data_ref_loc, heap, *references, NULL);\n-\t  ref->pos = op0;\n-\t  ref->is_read = false;\n-\t}\n     }\n   else if (stmt_code == GIMPLE_CALL)\n     {\n-      unsigned i, n = gimple_call_num_args (stmt);\n+      unsigned i, n;\n \n+      op0 = gimple_call_lhs_ptr (stmt);\n+      n = gimple_call_num_args (stmt);\n       for (i = 0; i < n; i++)\n \t{\n-\t  op0 = gimple_call_arg_ptr (stmt, i);\n+\t  op1 = gimple_call_arg_ptr (stmt, i);\n \n-\t  if (DECL_P (*op0)\n-\t      || (REFERENCE_CLASS_P (*op0) && get_base_address (*op0)))\n+\t  if (DECL_P (*op1)\n+\t      || (REFERENCE_CLASS_P (*op1) && get_base_address (*op1)))\n \t    {\n \t      ref = VEC_safe_push (data_ref_loc, heap, *references, NULL);\n-\t      ref->pos = op0;\n+\t      ref->pos = op1;\n \t      ref->is_read = true;\n \t    }\n \t}\n     }\n+  else\n+    return clobbers_memory;\n \n+  if (*op0\n+      && (DECL_P (*op0)\n+\t  || (REFERENCE_CLASS_P (*op0) && get_base_address (*op0))))\n+    {\n+      ref = VEC_safe_push (data_ref_loc, heap, *references, NULL);\n+      ref->pos = op0;\n+      ref->is_read = false;\n+    }\n   return clobbers_memory;\n }\n "}]}