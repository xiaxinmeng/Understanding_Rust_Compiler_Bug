{"sha": "292321a5cd9b5988a0e73adaa0ad637a9a17b4d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkyMzIxYTVjZDliNTk4OGEwZTczYWRhYTBhZDYzN2E5YTE3YjRkNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-06-15T07:32:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-06-15T07:32:43Z"}, "message": "df.h (FOR_EACH_ARTIFICIAL_USE, [...]): New macros.\n\ngcc/\n\t* df.h (FOR_EACH_ARTIFICIAL_USE, FOR_EACH_ARTIFICIAL_DEF): New macros.\n\t* cse.c (cse_extended_basic_block): Use them.\n\t* dce.c (mark_artificial_use): Likewise.\n\t* df-problems.c (df_rd_simulate_artificial_defs_at_top): Likewise.\n\t(df_lr_bb_local_compute, df_live_bb_local_compute): Likewise.\n\t(df_chain_remove_problem, df_chain_bb_dump): Likewise.\n\t(df_word_lr_bb_local_compute, df_note_bb_compute): Likewise.\n\t(df_simulate_initialize_backwards): Likewise.\n\t(df_simulate_finalize_backwards): Likewise.\n\t(df_simulate_initialize_forwards): Likewise.\n\t(df_md_simulate_artificial_defs_at_top): Likewise.\n\t* df-scan.c (df_reorganize_refs_by_reg_by_insn): Likewise.\n\t* regrename.c (init_rename_info): Likewise.\n\t* regstat.c (regstat_bb_compute_ri): Likewise.\n\t(regstat_bb_compute_calls_crossed): Likewise.\n\nFrom-SVN: r211679", "tree": {"sha": "12094325c8b60fc5ff9b26dd40bcb17e41bcfaa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12094325c8b60fc5ff9b26dd40bcb17e41bcfaa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bfac633a90588e96050f8767052d59efd7307cb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfac633a90588e96050f8767052d59efd7307cb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfac633a90588e96050f8767052d59efd7307cb1"}], "stats": {"total": 414, "additions": 171, "deletions": 243}, "files": [{"sha": "da8eb373d68c56f8568c7fab1e9af531d5d7717f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=292321a5cd9b5988a0e73adaa0ad637a9a17b4d4", "patch": "@@ -1,3 +1,21 @@\n+2014-06-15  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* df.h (FOR_EACH_ARTIFICIAL_USE, FOR_EACH_ARTIFICIAL_DEF): New macros.\n+\t* cse.c (cse_extended_basic_block): Use them.\n+\t* dce.c (mark_artificial_use): Likewise.\n+\t* df-problems.c (df_rd_simulate_artificial_defs_at_top): Likewise.\n+\t(df_lr_bb_local_compute, df_live_bb_local_compute): Likewise.\n+\t(df_chain_remove_problem, df_chain_bb_dump): Likewise.\n+\t(df_word_lr_bb_local_compute, df_note_bb_compute): Likewise.\n+\t(df_simulate_initialize_backwards): Likewise.\n+\t(df_simulate_finalize_backwards): Likewise.\n+\t(df_simulate_initialize_forwards): Likewise.\n+\t(df_md_simulate_artificial_defs_at_top): Likewise.\n+\t* df-scan.c (df_reorganize_refs_by_reg_by_insn): Likewise.\n+\t* regrename.c (init_rename_info): Likewise.\n+\t* regstat.c (regstat_bb_compute_ri): Likewise.\n+\t(regstat_bb_compute_calls_crossed): Likewise.\n+\n 2014-06-15  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* df.h (DF_INSN_INFO_MWS, FOR_EACH_INSN_INFO_DEF): New macros."}, {"sha": "147e3e372d1dc050e24e3da7ad39685541bf155f", "filename": "gcc/cse.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=292321a5cd9b5988a0e73adaa0ad637a9a17b4d4", "patch": "@@ -6406,14 +6406,11 @@ cse_extended_basic_block (struct cse_basic_block_data *ebb_data)\n \t edge pointing to that bb.  */\n       if (bb_has_eh_pred (bb))\n \t{\n-\t  df_ref *def_rec;\n+\t  df_ref def;\n \n-\t  for (def_rec = df_get_artificial_defs (bb->index); *def_rec; def_rec++)\n-\t    {\n-\t      df_ref def = *def_rec;\n-\t      if (DF_REF_FLAGS (def) & DF_REF_AT_TOP)\n-\t\tinvalidate (DF_REF_REG (def), GET_MODE (DF_REF_REG (def)));\n-\t    }\n+\t  FOR_EACH_ARTIFICIAL_DEF (def, bb->index)\n+\t    if (DF_REF_FLAGS (def) & DF_REF_AT_TOP)\n+\t      invalidate (DF_REF_REG (def), GET_MODE (DF_REF_REG (def)));\n \t}\n \n       optimize_this_for_speed_p = optimize_bb_for_speed_p (bb);"}, {"sha": "a11a4d8ea5aab59ea6b2c0ce67ca52d4ab451728", "filename": "gcc/dce.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=292321a5cd9b5988a0e73adaa0ad637a9a17b4d4", "patch": "@@ -661,16 +661,13 @@ mark_artificial_uses (void)\n {\n   basic_block bb;\n   struct df_link *defs;\n-  df_ref *use_rec;\n+  df_ref use;\n \n   FOR_ALL_BB_FN (bb, cfun)\n-    {\n-      for (use_rec = df_get_artificial_uses (bb->index);\n-\t   *use_rec; use_rec++)\n-\tfor (defs = DF_REF_CHAIN (*use_rec); defs; defs = defs->next)\n-\t  if (! DF_REF_IS_ARTIFICIAL (defs->ref))\n-\t    mark_insn (DF_REF_INSN (defs->ref), false);\n-    }\n+    FOR_EACH_ARTIFICIAL_USE (use, bb->index)\n+      for (defs = DF_REF_CHAIN (use); defs; defs = defs->next)\n+\tif (!DF_REF_IS_ARTIFICIAL (defs->ref))\n+\t  mark_insn (DF_REF_INSN (defs->ref), false);\n }\n \n "}, {"sha": "2855eb50cc9c2c075a74237a71e2fa5c9367e426", "filename": "gcc/df-problems.c", "status": "modified", "additions": 104, "deletions": 173, "changes": 277, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=292321a5cd9b5988a0e73adaa0ad637a9a17b4d4", "patch": "@@ -245,20 +245,17 @@ void\n df_rd_simulate_artificial_defs_at_top (basic_block bb, bitmap local_rd)\n {\n   int bb_index = bb->index;\n-  df_ref *def_rec;\n-  for (def_rec = df_get_artificial_defs (bb_index); *def_rec; def_rec++)\n-    {\n-      df_ref def = *def_rec;\n-      if (DF_REF_FLAGS (def) & DF_REF_AT_TOP)\n-\t{\n-\t  unsigned int dregno = DF_REF_REGNO (def);\n-\t  if (!(DF_REF_FLAGS (def) & (DF_REF_PARTIAL | DF_REF_CONDITIONAL)))\n-\t    bitmap_clear_range (local_rd,\n-\t\t\t\tDF_DEFS_BEGIN (dregno),\n-\t\t\t\tDF_DEFS_COUNT (dregno));\n-\t  bitmap_set_bit (local_rd, DF_REF_ID (def));\n-\t}\n-    }\n+  df_ref def;\n+  FOR_EACH_ARTIFICIAL_DEF (def, bb_index)\n+    if (DF_REF_FLAGS (def) & DF_REF_AT_TOP)\n+      {\n+\tunsigned int dregno = DF_REF_REGNO (def);\n+\tif (!(DF_REF_FLAGS (def) & (DF_REF_PARTIAL | DF_REF_CONDITIONAL)))\n+\t  bitmap_clear_range (local_rd,\n+\t\t\t      DF_DEFS_BEGIN (dregno),\n+\t\t\t      DF_DEFS_COUNT (dregno));\n+\tbitmap_set_bit (local_rd, DF_REF_ID (def));\n+      }\n }\n \n /* Add the effect of the defs of INSN to the reaching definitions bitmap\n@@ -834,30 +831,22 @@ df_lr_bb_local_compute (unsigned int bb_index)\n   basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   struct df_lr_bb_info *bb_info = df_lr_get_bb_info (bb_index);\n   rtx insn;\n-  df_ref *def_rec;\n-  df_ref *use_rec;\n   df_ref def, use;\n \n   /* Process the registers set in an exception handler.  */\n-  for (def_rec = df_get_artificial_defs (bb_index); *def_rec; def_rec++)\n-    {\n-      df_ref def = *def_rec;\n-      if ((DF_REF_FLAGS (def) & DF_REF_AT_TOP) == 0)\n-\t{\n-\t  unsigned int dregno = DF_REF_REGNO (def);\n-\t  bitmap_set_bit (&bb_info->def, dregno);\n-\t  bitmap_clear_bit (&bb_info->use, dregno);\n-\t}\n-    }\n+  FOR_EACH_ARTIFICIAL_DEF (def, bb_index)\n+    if ((DF_REF_FLAGS (def) & DF_REF_AT_TOP) == 0)\n+      {\n+\tunsigned int dregno = DF_REF_REGNO (def);\n+\tbitmap_set_bit (&bb_info->def, dregno);\n+\tbitmap_clear_bit (&bb_info->use, dregno);\n+      }\n \n   /* Process the hardware registers that are always live.  */\n-  for (use_rec = df_get_artificial_uses (bb_index); *use_rec; use_rec++)\n-    {\n-      df_ref use = *use_rec;\n-      /* Add use to set of uses in this BB.  */\n-      if ((DF_REF_FLAGS (use) & DF_REF_AT_TOP) == 0)\n-\tbitmap_set_bit (&bb_info->use, DF_REF_REGNO (use));\n-    }\n+  FOR_EACH_ARTIFICIAL_USE (use, bb_index)\n+    /* Add use to set of uses in this BB.  */\n+    if ((DF_REF_FLAGS (use) & DF_REF_AT_TOP) == 0)\n+      bitmap_set_bit (&bb_info->use, DF_REF_REGNO (use));\n \n   FOR_BB_INSNS_REVERSE (bb, insn)\n     {\n@@ -883,26 +872,20 @@ df_lr_bb_local_compute (unsigned int bb_index)\n   /* Process the registers set in an exception handler or the hard\n      frame pointer if this block is the target of a non local\n      goto.  */\n-  for (def_rec = df_get_artificial_defs (bb_index); *def_rec; def_rec++)\n-    {\n-      df_ref def = *def_rec;\n-      if (DF_REF_FLAGS (def) & DF_REF_AT_TOP)\n-\t{\n-\t  unsigned int dregno = DF_REF_REGNO (def);\n-\t  bitmap_set_bit (&bb_info->def, dregno);\n-\t  bitmap_clear_bit (&bb_info->use, dregno);\n-\t}\n-    }\n+  FOR_EACH_ARTIFICIAL_DEF (def, bb_index)\n+    if (DF_REF_FLAGS (def) & DF_REF_AT_TOP)\n+      {\n+\tunsigned int dregno = DF_REF_REGNO (def);\n+\tbitmap_set_bit (&bb_info->def, dregno);\n+\tbitmap_clear_bit (&bb_info->use, dregno);\n+      }\n \n #ifdef EH_USES\n   /* Process the uses that are live into an exception handler.  */\n-  for (use_rec = df_get_artificial_uses (bb_index); *use_rec; use_rec++)\n-    {\n-      df_ref use = *use_rec;\n-      /* Add use to set of uses in this BB.  */\n-      if (DF_REF_FLAGS (use) & DF_REF_AT_TOP)\n-\tbitmap_set_bit (&bb_info->use, DF_REF_REGNO (use));\n-    }\n+  FOR_EACH_ARTIFICIAL_USE (use, bb_index)\n+    /* Add use to set of uses in this BB.  */\n+    if (DF_REF_FLAGS (use) & DF_REF_AT_TOP)\n+      bitmap_set_bit (&bb_info->use, DF_REF_REGNO (use));\n #endif\n \n   /* If the df_live problem is not defined, such as at -O0 and -O1, we\n@@ -1455,7 +1438,7 @@ df_live_bb_local_compute (unsigned int bb_index)\n   basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   struct df_live_bb_info *bb_info = df_live_get_bb_info (bb_index);\n   rtx insn;\n-  df_ref def, *def_rec;\n+  df_ref def;\n   int luid = 0;\n \n   FOR_BB_INSNS (bb, insn)\n@@ -1494,11 +1477,8 @@ df_live_bb_local_compute (unsigned int bb_index)\n \t}\n     }\n \n-  for (def_rec = df_get_artificial_defs (bb_index); *def_rec; def_rec++)\n-    {\n-      df_ref def = *def_rec;\n-      bitmap_set_bit (&bb_info->gen, DF_REF_REGNO (def));\n-    }\n+  FOR_EACH_ARTIFICIAL_DEF (def, bb_index)\n+    bitmap_set_bit (&bb_info->gen, DF_REF_REGNO (def));\n }\n \n \n@@ -1974,17 +1954,15 @@ df_chain_remove_problem (void)\n   EXECUTE_IF_SET_IN_BITMAP (df_chain->out_of_date_transfer_functions, 0, bb_index, bi)\n     {\n       rtx insn;\n-      df_ref *def_rec;\n-      df_ref *use_rec;\n       df_ref def, use;\n       basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n \n       if (df_chain_problem_p (DF_DU_CHAIN))\n-\tfor (def_rec = df_get_artificial_defs (bb->index); *def_rec; def_rec++)\n-\t  DF_REF_CHAIN (*def_rec) = NULL;\n+\tFOR_EACH_ARTIFICIAL_DEF (def, bb_index)\n+\t  DF_REF_CHAIN (def) = NULL;\n       if (df_chain_problem_p (DF_UD_CHAIN))\n-\tfor (use_rec = df_get_artificial_uses (bb->index); *use_rec; use_rec++)\n-\t  DF_REF_CHAIN (*use_rec) = NULL;\n+\tFOR_EACH_ARTIFICIAL_USE (use, bb_index)\n+\t  DF_REF_CHAIN (use) = NULL;\n \n       FOR_BB_INSNS (bb, insn)\n \tif (INSN_P (insn))\n@@ -2180,48 +2158,35 @@ df_chain_bb_dump (basic_block bb, FILE *file, bool top)\n     return;\n   if (df_chain_problem_p (DF_UD_CHAIN))\n     {\n+      df_ref use;\n+\n       fprintf (file,\n \t       \";;  UD chains for artificial uses at %s\\n\",\n \t       top ? \"top\" : \"bottom\");\n-      df_ref *use_rec = df_get_artificial_uses (bb->index);\n-      if (*use_rec)\n-\t{\n-\t  while (*use_rec)\n-\t    {\n-\t      df_ref use = *use_rec;\n-\t      if ((top && (DF_REF_FLAGS (use) & DF_REF_AT_TOP))\n-\t\t  || (!top && !(DF_REF_FLAGS (use) & DF_REF_AT_TOP)))\n-\t\t{\n-\t\t  fprintf (file, \";;   reg %d \", DF_REF_REGNO (use));\n-\t\t  df_chain_dump (DF_REF_CHAIN (use), file);\n-\t\t  fprintf (file, \"\\n\");\n-\t\t}\n-\t      use_rec++;\n-\t    }\n-\t}\n+      FOR_EACH_ARTIFICIAL_USE (use, bb->index)\n+\tif ((top && (DF_REF_FLAGS (use) & DF_REF_AT_TOP))\n+\t    || (!top && !(DF_REF_FLAGS (use) & DF_REF_AT_TOP)))\n+\t  {\n+\t    fprintf (file, \";;   reg %d \", DF_REF_REGNO (use));\n+\t    df_chain_dump (DF_REF_CHAIN (use), file);\n+\t    fprintf (file, \"\\n\");\n+\t  }\n     }\n   if (df_chain_problem_p (DF_DU_CHAIN))\n     {\n+      df_ref def;\n+\n       fprintf (file,\n \t       \";;  DU chains for artificial defs at %s\\n\",\n \t       top ? \"top\" : \"bottom\");\n-      df_ref *def_rec = df_get_artificial_defs (bb->index);\n-      if (*def_rec)\n-\t{\n-\t  while (*def_rec)\n-\t    {\n-\t      df_ref def = *def_rec;\n-\n-\t      if ((top && (DF_REF_FLAGS (def) & DF_REF_AT_TOP))\n-\t\t  || (!top && !(DF_REF_FLAGS (def) & DF_REF_AT_TOP)))\n-\t\t{\n-\t\t  fprintf (file, \";;   reg %d \", DF_REF_REGNO (def));\n-\t\t  df_chain_dump (DF_REF_CHAIN (def), file);\n-\t\t  fprintf (file, \"\\n\");\n-\t\t}\n-\t      def_rec++;\n-\t    }\n-\t}\n+      FOR_EACH_ARTIFICIAL_DEF (def, bb->index)\n+\tif ((top && (DF_REF_FLAGS (def) & DF_REF_AT_TOP))\n+\t    || (!top && !(DF_REF_FLAGS (def) & DF_REF_AT_TOP)))\n+\t  {\n+\t    fprintf (file, \";;   reg %d \", DF_REF_REGNO (def));\n+\t    df_chain_dump (DF_REF_CHAIN (def), file);\n+\t    fprintf (file, \"\\n\");\n+\t  }\n     }\n }\n \n@@ -2503,22 +2468,14 @@ df_word_lr_bb_local_compute (unsigned int bb_index)\n   basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   struct df_word_lr_bb_info *bb_info = df_word_lr_get_bb_info (bb_index);\n   rtx insn;\n-  df_ref *def_rec;\n-  df_ref *use_rec;\n   df_ref def, use;\n \n   /* Ensure that artificial refs don't contain references to pseudos.  */\n-  for (def_rec = df_get_artificial_defs (bb_index); *def_rec; def_rec++)\n-    {\n-      df_ref def = *def_rec;\n-      gcc_assert (DF_REF_REGNO (def) < FIRST_PSEUDO_REGISTER);\n-    }\n+  FOR_EACH_ARTIFICIAL_DEF (def, bb_index)\n+    gcc_assert (DF_REF_REGNO (def) < FIRST_PSEUDO_REGISTER);\n \n-  for (use_rec = df_get_artificial_uses (bb_index); *use_rec; use_rec++)\n-    {\n-      df_ref use = *use_rec;\n-      gcc_assert (DF_REF_REGNO (use) < FIRST_PSEUDO_REGISTER);\n-    }\n+  FOR_EACH_ARTIFICIAL_USE (use, bb_index)\n+    gcc_assert (DF_REF_REGNO (use) < FIRST_PSEUDO_REGISTER);\n \n   FOR_BB_INSNS_REVERSE (bb, insn)\n     {\n@@ -3112,8 +3069,6 @@ df_note_bb_compute (unsigned int bb_index,\n {\n   basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   rtx insn;\n-  df_ref *def_rec;\n-  df_ref *use_rec;\n   df_ref def, use;\n   struct dead_debug_local debug;\n \n@@ -3130,30 +3085,25 @@ df_note_bb_compute (unsigned int bb_index,\n \n   /* Process the artificial defs and uses at the bottom of the block\n      to begin processing.  */\n-  for (def_rec = df_get_artificial_defs (bb_index); *def_rec; def_rec++)\n+  FOR_EACH_ARTIFICIAL_DEF (def, bb_index)\n     {\n-      df_ref def = *def_rec;\n-\n       if (REG_DEAD_DEBUGGING && dump_file)\n \tfprintf (dump_file, \"artificial def %d\\n\", DF_REF_REGNO (def));\n \n       if ((DF_REF_FLAGS (def) & DF_REF_AT_TOP) == 0)\n \tbitmap_clear_bit (live, DF_REF_REGNO (def));\n     }\n \n-  for (use_rec = df_get_artificial_uses (bb_index); *use_rec; use_rec++)\n-    {\n-      df_ref use = *use_rec;\n-      if ((DF_REF_FLAGS (use) & DF_REF_AT_TOP) == 0)\n-\t{\n-\t  unsigned int regno = DF_REF_REGNO (use);\n-\t  bitmap_set_bit (live, regno);\n+  FOR_EACH_ARTIFICIAL_USE (use, bb_index)\n+    if ((DF_REF_FLAGS (use) & DF_REF_AT_TOP) == 0)\n+      {\n+\tunsigned int regno = DF_REF_REGNO (use);\n+\tbitmap_set_bit (live, regno);\n \n-\t  /* Notes are not generated for any of the artificial registers\n-\t     at the bottom of the block.  */\n-\t  bitmap_set_bit (artificial_uses, regno);\n-\t}\n-    }\n+\t/* Notes are not generated for any of the artificial registers\n+\t   at the bottom of the block.  */\n+\tbitmap_set_bit (artificial_uses, regno);\n+      }\n \n   if (REG_DEAD_DEBUGGING && dump_file)\n     {\n@@ -3533,23 +3483,16 @@ df_simulate_fixup_sets (basic_block bb, bitmap live)\n void\n df_simulate_initialize_backwards (basic_block bb, bitmap live)\n {\n-  df_ref *def_rec;\n-  df_ref *use_rec;\n+  df_ref def, use;\n   int bb_index = bb->index;\n \n-  for (def_rec = df_get_artificial_defs (bb_index); *def_rec; def_rec++)\n-    {\n-      df_ref def = *def_rec;\n-      if ((DF_REF_FLAGS (def) & DF_REF_AT_TOP) == 0)\n-\tbitmap_clear_bit (live, DF_REF_REGNO (def));\n-    }\n+  FOR_EACH_ARTIFICIAL_DEF (def, bb_index)\n+    if ((DF_REF_FLAGS (def) & DF_REF_AT_TOP) == 0)\n+      bitmap_clear_bit (live, DF_REF_REGNO (def));\n \n-  for (use_rec = df_get_artificial_uses (bb_index); *use_rec; use_rec++)\n-    {\n-      df_ref use = *use_rec;\n-      if ((DF_REF_FLAGS (use) & DF_REF_AT_TOP) == 0)\n-\tbitmap_set_bit (live, DF_REF_REGNO (use));\n-    }\n+  FOR_EACH_ARTIFICIAL_USE (use, bb_index)\n+    if ((DF_REF_FLAGS (use) & DF_REF_AT_TOP) == 0)\n+      bitmap_set_bit (live, DF_REF_REGNO (use));\n }\n \n \n@@ -3573,26 +3516,20 @@ df_simulate_one_insn_backwards (basic_block bb, rtx insn, bitmap live)\n void\n df_simulate_finalize_backwards (basic_block bb, bitmap live)\n {\n-  df_ref *def_rec;\n+  df_ref def;\n #ifdef EH_USES\n-  df_ref *use_rec;\n+  df_ref use;\n #endif\n   int bb_index = bb->index;\n \n-  for (def_rec = df_get_artificial_defs (bb_index); *def_rec; def_rec++)\n-    {\n-      df_ref def = *def_rec;\n-      if (DF_REF_FLAGS (def) & DF_REF_AT_TOP)\n-\tbitmap_clear_bit (live, DF_REF_REGNO (def));\n-    }\n+  FOR_EACH_ARTIFICIAL_DEF (def, bb_index)\n+    if (DF_REF_FLAGS (def) & DF_REF_AT_TOP)\n+      bitmap_clear_bit (live, DF_REF_REGNO (def));\n \n #ifdef EH_USES\n-  for (use_rec = df_get_artificial_uses (bb_index); *use_rec; use_rec++)\n-    {\n-      df_ref use = *use_rec;\n-      if (DF_REF_FLAGS (use) & DF_REF_AT_TOP)\n-\tbitmap_set_bit (live, DF_REF_REGNO (use));\n-    }\n+  FOR_EACH_ARTIFICIAL_USE (use, bb_index)\n+    if (DF_REF_FLAGS (use) & DF_REF_AT_TOP)\n+      bitmap_set_bit (live, DF_REF_REGNO (use));\n #endif\n }\n /*----------------------------------------------------------------------------\n@@ -3614,15 +3551,12 @@ df_simulate_finalize_backwards (basic_block bb, bitmap live)\n void\n df_simulate_initialize_forwards (basic_block bb, bitmap live)\n {\n-  df_ref *def_rec;\n+  df_ref def;\n   int bb_index = bb->index;\n \n-  for (def_rec = df_get_artificial_defs (bb_index); *def_rec; def_rec++)\n-    {\n-      df_ref def = *def_rec;\n-      if (DF_REF_FLAGS (def) & DF_REF_AT_TOP)\n-\tbitmap_set_bit (live, DF_REF_REGNO (def));\n-    }\n+  FOR_EACH_ARTIFICIAL_DEF (def, bb_index)\n+    if (DF_REF_FLAGS (def) & DF_REF_AT_TOP)\n+      bitmap_set_bit (live, DF_REF_REGNO (def));\n }\n \n /* Simulate the forwards effects of INSN on the bitmap LIVE.  */\n@@ -4121,20 +4055,17 @@ void\n df_md_simulate_artificial_defs_at_top (basic_block bb, bitmap local_md)\n {\n   int bb_index = bb->index;\n-  df_ref *def_rec;\n-  for (def_rec = df_get_artificial_defs (bb_index); *def_rec; def_rec++)\n-    {\n-      df_ref def = *def_rec;\n-      if (DF_REF_FLAGS (def) & DF_REF_AT_TOP)\n-\t{\n-\t  unsigned int dregno = DF_REF_REGNO (def);\n-\t  if (DF_REF_FLAGS (def)\n-\t      & (DF_REF_PARTIAL | DF_REF_CONDITIONAL | DF_REF_MAY_CLOBBER))\n-\t    bitmap_set_bit (local_md, dregno);\n-\t  else\n-\t    bitmap_clear_bit (local_md, dregno);\n-\t}\n-    }\n+  df_ref def;\n+  FOR_EACH_ARTIFICIAL_DEF (def, bb_index)\n+    if (DF_REF_FLAGS (def) & DF_REF_AT_TOP)\n+      {\n+\tunsigned int dregno = DF_REF_REGNO (def);\n+\tif (DF_REF_FLAGS (def)\n+\t    & (DF_REF_PARTIAL | DF_REF_CONDITIONAL | DF_REF_MAY_CLOBBER))\n+\t  bitmap_set_bit (local_md, dregno);\n+\telse\n+\t  bitmap_clear_bit (local_md, dregno);\n+      }\n }\n \n "}, {"sha": "b2d51475bcf76c20779d7f0cca1e1bfd253e4ff0", "filename": "gcc/df-scan.c", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=292321a5cd9b5988a0e73adaa0ad637a9a17b4d4", "patch": "@@ -1639,19 +1639,18 @@ df_reorganize_refs_by_reg_by_insn (struct df_ref_info *ref_info,\n     {\n       basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n       rtx insn;\n-      df_ref *ref_rec;\n       df_ref def, use;\n \n       if (include_defs)\n-\tfor (ref_rec = df_get_artificial_defs (bb_index); *ref_rec; ref_rec++)\n+\tFOR_EACH_ARTIFICIAL_DEF (def, bb_index)\n \t  {\n-\t    unsigned int regno = DF_REF_REGNO (*ref_rec);\n+\t    unsigned int regno = DF_REF_REGNO (def);\n \t    ref_info->count[regno]++;\n \t  }\n       if (include_uses)\n-\tfor (ref_rec = df_get_artificial_uses (bb_index); *ref_rec; ref_rec++)\n+\tFOR_EACH_ARTIFICIAL_USE (use, bb_index)\n \t  {\n-\t    unsigned int regno = DF_REF_REGNO (*ref_rec);\n+\t    unsigned int regno = DF_REF_REGNO (use);\n \t    ref_info->count[regno]++;\n \t  }\n \n@@ -1694,33 +1693,30 @@ df_reorganize_refs_by_reg_by_insn (struct df_ref_info *ref_info,\n     {\n       basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n       rtx insn;\n-      df_ref *ref_rec;\n       df_ref def, use;\n \n       if (include_defs)\n-\tfor (ref_rec = df_get_artificial_defs (bb_index); *ref_rec; ref_rec++)\n+\tFOR_EACH_ARTIFICIAL_DEF (def, bb_index)\n \t  {\n-\t    df_ref ref = *ref_rec;\n-\t    unsigned int regno = DF_REF_REGNO (ref);\n+\t    unsigned int regno = DF_REF_REGNO (def);\n \t    if (regno >= start)\n \t      {\n \t\tunsigned int id\n \t\t  = ref_info->begin[regno] + ref_info->count[regno]++;\n-\t\tDF_REF_ID (ref) = id;\n-\t\tref_info->refs[id] = ref;\n+\t\tDF_REF_ID (def) = id;\n+\t\tref_info->refs[id] = def;\n \t      }\n \t  }\n       if (include_uses)\n-\tfor (ref_rec = df_get_artificial_uses (bb_index); *ref_rec; ref_rec++)\n+\tFOR_EACH_ARTIFICIAL_USE (use, bb_index)\n \t  {\n-\t    df_ref ref = *ref_rec;\n-\t    unsigned int regno = DF_REF_REGNO (ref);\n+\t    unsigned int regno = DF_REF_REGNO (def);\n \t    if (regno >= start)\n \t      {\n \t\tunsigned int id\n \t\t  = ref_info->begin[regno] + ref_info->count[regno]++;\n-\t\tDF_REF_ID (ref) = id;\n-\t\tref_info->refs[id] = ref;\n+\t\tDF_REF_ID (use) = id;\n+\t\tref_info->refs[id] = use;\n \t      }\n \t  }\n "}, {"sha": "482ac930c9c274dbdfb651a6e596f90799e8d7b9", "filename": "gcc/df.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=292321a5cd9b5988a0e73adaa0ad637a9a17b4d4", "patch": "@@ -775,6 +775,14 @@ struct df_d\n #define FOR_EACH_INSN_EQ_USE(ITER, INSN) \\\n   FOR_EACH_INSN_INFO_EQ_USE(ITER, DF_INSN_INFO_GET (INSN))\n \n+#define FOR_EACH_ARTIFICIAL_USE(ITER, BB_INDEX) \\\n+  for (df_ref *ITER##_ = df_get_artificial_uses (BB_INDEX); \\\n+       (ITER = *ITER##_); ++ITER##_)\n+\n+#define FOR_EACH_ARTIFICIAL_DEF(ITER, BB_INDEX) \\\n+  for (df_ref *ITER##_ = df_get_artificial_defs (BB_INDEX); \\\n+       (ITER = *ITER##_); ++ITER##_)\n+\n /* An obstack for bitmap not related to specific dataflow problems.\n    This obstack should e.g. be used for bitmaps with a short life time\n    such as temporary bitmaps.  This obstack is declared in df-core.c.  */"}, {"sha": "e46da019eb3e37661bd42a88c3b009383c41a332", "filename": "gcc/regrename.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=292321a5cd9b5988a0e73adaa0ad637a9a17b4d4", "patch": "@@ -533,7 +533,7 @@ static void\n init_rename_info (struct bb_rename_info *p, basic_block bb)\n {\n   int i;\n-  df_ref *def_rec;\n+  df_ref def;\n   HARD_REG_SET start_chains_set;\n \n   p->bb = bb;\n@@ -545,12 +545,9 @@ init_rename_info (struct bb_rename_info *p, basic_block bb)\n \n   CLEAR_HARD_REG_SET (live_in_chains);\n   REG_SET_TO_HARD_REG_SET (live_hard_regs, df_get_live_in (bb));\n-  for (def_rec = df_get_artificial_defs (bb->index); *def_rec; def_rec++)\n-    {\n-      df_ref def = *def_rec;\n-      if (DF_REF_FLAGS (def) & DF_REF_AT_TOP)\n-\tSET_HARD_REG_BIT (live_hard_regs, DF_REF_REGNO (def));\n-    }\n+  FOR_EACH_ARTIFICIAL_DEF (def, bb->index)\n+    if (DF_REF_FLAGS (def) & DF_REF_AT_TOP)\n+      SET_HARD_REG_BIT (live_hard_regs, DF_REF_REGNO (def));\n \n   /* Open chains based on information from (at least one) predecessor\n      block.  This gives us a chance later on to combine chains across"}, {"sha": "10135b3022c2fe5906b24040992ba1a784a56a47", "filename": "gcc/regstat.c", "status": "modified", "additions": 16, "deletions": 32, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/gcc%2Fregstat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292321a5cd9b5988a0e73adaa0ad637a9a17b4d4/gcc%2Fregstat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregstat.c?ref=292321a5cd9b5988a0e73adaa0ad637a9a17b4d4", "patch": "@@ -122,8 +122,6 @@ regstat_bb_compute_ri (unsigned int bb_index,\n {\n   basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   rtx insn;\n-  df_ref *def_rec;\n-  df_ref *use_rec;\n   df_ref def, use;\n   int luid = 0;\n   bitmap_iterator bi;\n@@ -139,23 +137,17 @@ regstat_bb_compute_ri (unsigned int bb_index,\n \n   /* Process the artificial defs and uses at the bottom of the block\n      to begin processing.  */\n-  for (def_rec = df_get_artificial_defs (bb_index); *def_rec; def_rec++)\n-    {\n-      df_ref def = *def_rec;\n-      if ((DF_REF_FLAGS (def) & DF_REF_AT_TOP) == 0)\n-\tbitmap_clear_bit (live, DF_REF_REGNO (def));\n-    }\n+  FOR_EACH_ARTIFICIAL_DEF (def, bb_index)\n+    if ((DF_REF_FLAGS (def) & DF_REF_AT_TOP) == 0)\n+      bitmap_clear_bit (live, DF_REF_REGNO (def));\n \n-  for (use_rec = df_get_artificial_uses (bb_index); *use_rec; use_rec++)\n-    {\n-      df_ref use = *use_rec;\n-      if ((DF_REF_FLAGS (use) & DF_REF_AT_TOP) == 0)\n-\t{\n-\t  regno = DF_REF_REGNO (use);\n-\t  bitmap_set_bit (live, regno);\n-\t  bitmap_set_bit (artificial_uses, regno);\n-\t}\n-    }\n+  FOR_EACH_ARTIFICIAL_USE (use, bb_index)\n+    if ((DF_REF_FLAGS (use) & DF_REF_AT_TOP) == 0)\n+      {\n+\tregno = DF_REF_REGNO (use);\n+\tbitmap_set_bit (live, regno);\n+\tbitmap_set_bit (artificial_uses, regno);\n+      }\n \n   FOR_BB_INSNS_REVERSE (bb, insn)\n     {\n@@ -441,27 +433,19 @@ regstat_bb_compute_calls_crossed (unsigned int bb_index, bitmap live)\n {\n   basic_block bb = BASIC_BLOCK_FOR_FN (cfun, bb_index);\n   rtx insn;\n-  df_ref *def_rec;\n-  df_ref *use_rec;\n   df_ref def, use;\n \n   bitmap_copy (live, df_get_live_out (bb));\n \n   /* Process the artificial defs and uses at the bottom of the block\n      to begin processing.  */\n-  for (def_rec = df_get_artificial_defs (bb_index); *def_rec; def_rec++)\n-    {\n-      df_ref def = *def_rec;\n-      if ((DF_REF_FLAGS (def) & DF_REF_AT_TOP) == 0)\n-\tbitmap_clear_bit (live, DF_REF_REGNO (def));\n-    }\n+  FOR_EACH_ARTIFICIAL_DEF (def, bb_index)\n+    if ((DF_REF_FLAGS (def) & DF_REF_AT_TOP) == 0)\n+      bitmap_clear_bit (live, DF_REF_REGNO (def));\n \n-  for (use_rec = df_get_artificial_uses (bb_index); *use_rec; use_rec++)\n-    {\n-      df_ref use = *use_rec;\n-      if ((DF_REF_FLAGS (use) & DF_REF_AT_TOP) == 0)\n-\tbitmap_set_bit (live, DF_REF_REGNO (use));\n-    }\n+  FOR_EACH_ARTIFICIAL_USE (use, bb_index)\n+    if ((DF_REF_FLAGS (use) & DF_REF_AT_TOP) == 0)\n+      bitmap_set_bit (live, DF_REF_REGNO (use));\n \n   FOR_BB_INSNS_REVERSE (bb, insn)\n     {"}]}