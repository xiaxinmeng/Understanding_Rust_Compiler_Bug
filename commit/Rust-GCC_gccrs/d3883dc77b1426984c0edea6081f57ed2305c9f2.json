{"sha": "d3883dc77b1426984c0edea6081f57ed2305c9f2", "node_id": "C_kwDOANBUbNoAKGQzODgzZGM3N2IxNDI2OTg0YzBlZGVhNjA4MWY1N2VkMjMwNWM5ZjI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-07T19:17:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-08T18:29:12Z"}, "message": "libstdc++: Find make_error_code and make_error_condition via ADL only\n\nThe new proposed resolution for LWG 3629 says that std::error_code and\nstd::error_condition should only use ADL to find their customization\npoints. This means we need to use a poison pill to prevent lookup from\nfinding overloads in the enclosing namespaces.\n\nWe can also remove the forward declarations of std::make_error_code and\nstd::make_error_condition, because they aren't needed now. ADL can find\nthem anyway (when std is an associated namespace), and unqualified name\nlookup will not (and should not) find them.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/system_error (__adl_only::make_error_code): Add\n\tdeleted function.\n\t(__adl_only::make_error_condition): Likewise.\n\t(error_code::error_code(ErrorCodeEnum)): Add using-declaration\n\tfor deleted function.\n\t(error_condition::error_condition(ErrorConditionEnum)):\n\tLikewise.\n\t* testsuite/19_diagnostics/error_code/cons/lwg3629.cc: New test.\n\t* testsuite/19_diagnostics/error_condition/cons/lwg3629.cc: New test.", "tree": {"sha": "3d9dc9f077efb7680a84a9e9f48f66cfad1e44f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d9dc9f077efb7680a84a9e9f48f66cfad1e44f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3883dc77b1426984c0edea6081f57ed2305c9f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3883dc77b1426984c0edea6081f57ed2305c9f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3883dc77b1426984c0edea6081f57ed2305c9f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3883dc77b1426984c0edea6081f57ed2305c9f2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a6564c9b277d9f93582605758d57457de696deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6564c9b277d9f93582605758d57457de696deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a6564c9b277d9f93582605758d57457de696deb"}], "stats": {"total": 114, "additions": 109, "deletions": 5}, "files": [{"sha": "e12bb2f0e1e9996e1dfe34395a7f53d04c54d39a", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3883dc77b1426984c0edea6081f57ed2305c9f2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3883dc77b1426984c0edea6081f57ed2305c9f2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=d3883dc77b1426984c0edea6081f57ed2305c9f2", "patch": "@@ -195,7 +195,11 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n    * @{\n    */\n \n-  error_code make_error_code(errc) noexcept;\n+namespace __adl_only\n+{\n+  void make_error_code() = delete;\n+  void make_error_condition() = delete;\n+}\n \n   /** Class error_code\n    *\n@@ -231,7 +235,10 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n     template<typename _ErrorCodeEnum,\n \t     typename = _Check<_ErrorCodeEnum>>\n       error_code(_ErrorCodeEnum __e) noexcept\n-      { *this = make_error_code(__e); }\n+      {\n+\tusing __adl_only::make_error_code;\n+\t*this = make_error_code(__e);\n+      }\n \n     error_code(const error_code&) = default;\n     error_code& operator=(const error_code&) = default;\n@@ -330,8 +337,6 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n     operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)\n     { return (__os << __e.category().name() << ':' << __e.value()); }\n \n-  error_condition make_error_condition(errc) noexcept;\n-\n   /** Class error_condition\n    *\n    * This class represents error conditions that may be visible at an API\n@@ -363,7 +368,10 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n     template<typename _ErrorConditionEnum,\n \t     typename = _Check<_ErrorConditionEnum>>\n       error_condition(_ErrorConditionEnum __e) noexcept\n-      { *this = make_error_condition(__e); }\n+      {\n+\tusing __adl_only::make_error_condition;\n+\t*this = make_error_condition(__e);\n+      }\n \n     error_condition(const error_condition&) = default;\n     error_condition& operator=(const error_condition&) = default;"}, {"sha": "b1e0b7f0c8182c564bf3e454370da7509b475d1e", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/cons/lwg3629.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3883dc77b1426984c0edea6081f57ed2305c9f2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2Flwg3629.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3883dc77b1426984c0edea6081f57ed2305c9f2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2Flwg3629.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2Flwg3629.cc?ref=d3883dc77b1426984c0edea6081f57ed2305c9f2", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do compile { target c++11 } }\n+\n+// 3629. make_error_code and make_error_condition are customization points\n+// Verify that make_error_code is looked up using ADL only.\n+\n+namespace user\n+{\n+  struct E1;\n+}\n+\n+// N.B. not in associated namespace of E1, and declared before <system_error>.\n+user::E1 make_error_code(user::E1);\n+\n+#include <future> // declares std::make_error_code(future_errc)\n+#include <system_error>\n+\n+namespace user\n+{\n+  struct E1\n+  {\n+    operator std::error_code() const;\n+  };\n+\n+  struct E2\n+  {\n+    operator std::future_errc() const;\n+  };\n+\n+  struct E3\n+  {\n+    operator std::errc() const;\n+  };\n+}\n+\n+template<> struct std::is_error_code_enum<user::E1> : std::true_type { };\n+template<> struct std::is_error_code_enum<user::E2> : std::true_type { };\n+template<> struct std::is_error_code_enum<user::E3> : std::true_type { };\n+\n+// ::make_error_code(E1) should not be found by name lookup.\n+std::error_code e1( user::E1{} ); // { dg-error \"here\" }\n+\n+// std::make_error_code(errc) should not be found by name lookup.\n+std::error_code e2( user::E2{} ); // { dg-error \"here\" }\n+\n+// std::make_error_code(future_errc) should not be found by name lookup.\n+std::error_code e3( user::E3{} ); // { dg-error \"here\" }\n+\n+// { dg-error \"use of deleted function\" \"\" { target *-*-* } 0 }"}, {"sha": "e34b53de8a1a3c12ebbdcc9b49e9f13f83ee702b", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/cons/lwg3629.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3883dc77b1426984c0edea6081f57ed2305c9f2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2Flwg3629.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3883dc77b1426984c0edea6081f57ed2305c9f2/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2Flwg3629.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2Flwg3629.cc?ref=d3883dc77b1426984c0edea6081f57ed2305c9f2", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do compile { target c++11 } }\n+\n+// 3629. make_error_code and make_error_condition are customization points\n+// Verify that make_error_condition is looked up using ADL only.\n+\n+namespace user\n+{\n+  struct E1;\n+}\n+\n+// N.B. not in associated namespace of E1, and declared before <system_error>.\n+user::E1 make_error_condition(user::E1);\n+\n+#include <future> // declares std::make_error_condition(future_errc)\n+#include <system_error>\n+\n+namespace user\n+{\n+  struct E1\n+  {\n+    operator std::error_code() const;\n+  };\n+\n+  struct E2\n+  {\n+    operator std::future_errc() const;\n+  };\n+\n+  struct E3\n+  {\n+    operator std::errc() const;\n+  };\n+}\n+\n+template<> struct std::is_error_condition_enum<user::E1> : std::true_type { };\n+template<> struct std::is_error_condition_enum<user::E2> : std::true_type { };\n+template<> struct std::is_error_condition_enum<user::E3> : std::true_type { };\n+\n+// ::make_error_condition(E1) should not be found by name lookup.\n+std::error_condition e1( user::E1{} ); // { dg-error \"here\" }\n+\n+// std::make_error_condition(errc) should not be found by name lookup.\n+std::error_condition e2( user::E2{} ); // { dg-error \"here\" }\n+\n+// std::make_error_condition(future_errc) should not be found by name lookup.\n+std::error_condition e3( user::E3{} ); // { dg-error \"here\" }\n+\n+// { dg-error \"use of deleted function\" \"\" { target *-*-* } 0 }"}]}