{"sha": "77b0efff1d56d9579cb964b5f34a5eaddf146715", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdiMGVmZmYxZDU2ZDk1NzljYjk2NGI1ZjM0YTVlYWRkZjE0NjcxNQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-11-11T19:11:44Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-11-11T19:11:44Z"}, "message": "re PR target/44749 (mep-elf fails to build)\n\n        PR target/44749\n        * config/mep/mep-protos.h (mep_legitimize_reload_address): Always\n        declare.  Change type of argument four to type int.\n        (mep_secondary_input_reload_class): Returns enum reg_class.\n        (mep_secondary_output_reload_class): Likewise.\n        (mep_function_value): Change types of arguments to cont_tree.\n        * config/mep/mep.c (mep_legitimize_reload_address): Change type of\n        argument four to type int.\n        (mep_secondary_input_reload_class): Returns enum reg_class.\n        (mep_secondary_output_reload_class): Likewise.\n        (mep_function_value): Change types of arguments to cont_tree.\n        * config/mep/mep.h (REGNO_REG_CLASS): Cast return value of\n        mep_regno_reg_class to enum reg_class.\n\nFrom-SVN: r166614", "tree": {"sha": "d3c5a27fdbc823c3b12b224f3ce343a40c01d045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3c5a27fdbc823c3b12b224f3ce343a40c01d045"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77b0efff1d56d9579cb964b5f34a5eaddf146715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77b0efff1d56d9579cb964b5f34a5eaddf146715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77b0efff1d56d9579cb964b5f34a5eaddf146715", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77b0efff1d56d9579cb964b5f34a5eaddf146715/comments", "author": null, "committer": null, "parents": [{"sha": "d6f62adad78d4dcb1af8cbc8515b86a9a3e46076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f62adad78d4dcb1af8cbc8515b86a9a3e46076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6f62adad78d4dcb1af8cbc8515b86a9a3e46076"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "df496e305e21f4f64fd05ab91f94a03c64430f44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b0efff1d56d9579cb964b5f34a5eaddf146715/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b0efff1d56d9579cb964b5f34a5eaddf146715/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77b0efff1d56d9579cb964b5f34a5eaddf146715", "patch": "@@ -1,3 +1,19 @@\n+2010-11-11  Joern Rennecke  <amylaar@spamcop.net>\n+\n+\tPR target/44749\n+\t* config/mep/mep-protos.h (mep_legitimize_reload_address): Always\n+\tdeclare.  Change type of argument four to type int.\n+\t(mep_secondary_input_reload_class): Returns enum reg_class.\n+\t(mep_secondary_output_reload_class): Likewise.\n+\t(mep_function_value): Change types of arguments to cont_tree.\n+\t* config/mep/mep.c (mep_legitimize_reload_address): Change type of\n+\targument four to type int.\n+\t(mep_secondary_input_reload_class): Returns enum reg_class.\n+\t(mep_secondary_output_reload_class): Likewise.\n+\t(mep_function_value): Change types of arguments to cont_tree.\n+\t* config/mep/mep.h (REGNO_REG_CLASS): Cast return value of\n+\tmep_regno_reg_class to enum reg_class.\n+\n 2010-11-11  Richard Henderson  <rth@redhat.com>\n \n \t* tree-ssa-math-opts.c (convert_mult_to_fma): Do not verify"}, {"sha": "857e6f21d599acba8bea6130027c656a99529cc0", "filename": "gcc/config/mep/mep-protos.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b0efff1d56d9579cb964b5f34a5eaddf146715/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b0efff1d56d9579cb964b5f34a5eaddf146715/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep-protos.h?ref=77b0efff1d56d9579cb964b5f34a5eaddf146715", "patch": "@@ -35,9 +35,7 @@ extern bool mep_vliw_jmp_match (rtx);\n extern bool mep_multi_slot (rtx);\n extern bool mep_legitimate_address (enum machine_mode, rtx, int);\n extern int mep_legitimize_address (rtx *, rtx, enum machine_mode);\n-#ifdef MAX_RELOADS\n-extern int mep_legitimize_reload_address (rtx *, enum machine_mode, int, enum reload_type, int);\n-#endif\n+extern int mep_legitimize_reload_address (rtx *, enum machine_mode, int, /*enum reload_type*/ int, int);\n extern int mep_core_address_length (rtx, int);\n extern int mep_cop_address_length (rtx, int);\n extern bool mep_expand_mov (rtx *, enum machine_mode);\n@@ -51,8 +49,8 @@ extern bool mep_legitimate_constant_p (rtx);\n extern const char *mep_emit_cbranch (rtx *, int);\n extern void mep_expand_call (rtx *, int);\n extern rtx mep_find_base_term (rtx);\n-extern int mep_secondary_input_reload_class (enum reg_class, enum machine_mode, rtx);\n-extern int mep_secondary_output_reload_class (enum reg_class, enum machine_mode, rtx);\n+extern enum reg_class mep_secondary_input_reload_class (enum reg_class, enum machine_mode, rtx);\n+extern enum reg_class mep_secondary_output_reload_class (enum reg_class, enum machine_mode, rtx);\n extern bool mep_secondary_memory_needed (enum reg_class, enum reg_class,\n \t\t\t\t\t enum machine_mode);\n extern void mep_expand_reload (rtx *, enum machine_mode);\n@@ -76,7 +74,7 @@ extern void mep_print_operand (FILE *, rtx, int);\n extern void mep_final_prescan_insn (rtx, rtx *, int);\n extern void mep_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);\n extern bool mep_return_in_memory (const_tree, const_tree);\n-extern rtx mep_function_value (tree, tree);\n+extern rtx mep_function_value (const_tree, const_tree);\n extern rtx mep_libcall_value (enum machine_mode);\n extern void mep_asm_output_opcode (FILE *, const char *);\n extern void mep_note_pragma_disinterrupt (const char *);"}, {"sha": "49954dba77e543e7b07f55b137517cb97c63b447", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b0efff1d56d9579cb964b5f34a5eaddf146715/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b0efff1d56d9579cb964b5f34a5eaddf146715/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=77b0efff1d56d9579cb964b5f34a5eaddf146715", "patch": "@@ -1270,9 +1270,11 @@ mep_legitimate_address (enum machine_mode mode, rtx x, int strict)\n \n int\n mep_legitimize_reload_address (rtx *x, enum machine_mode mode, int opnum,\n-\t\t\t       enum reload_type type,\n+\t\t\t       int type_i,\n \t\t\t       int ind_levels ATTRIBUTE_UNUSED)\n {\n+  enum reload_type type = (enum reload_type) type_i;\n+\n   if (GET_CODE (*x) == PLUS\n       && GET_CODE (XEXP (*x, 0)) == MEM\n       && GET_CODE (XEXP (*x, 1)) == REG)\n@@ -2097,7 +2099,7 @@ mep_secondary_copro_reload_class (enum reg_class rclass, rtx x)\n \n /* Copying X to register in RCLASS.  */\n \n-int\n+enum reg_class\n mep_secondary_input_reload_class (enum reg_class rclass,\n \t\t\t\t  enum machine_mode mode ATTRIBUTE_UNUSED,\n \t\t\t\t  rtx x)\n@@ -2118,12 +2120,12 @@ mep_secondary_input_reload_class (enum reg_class rclass,\n #if DEBUG_RELOAD\n   fprintf (stderr, \" - requires %s\\n\", reg_class_names[rv]);\n #endif\n-  return rv;\n+  return (enum reg_class) rv;\n }\n \n /* Copying register in RCLASS to X.  */\n \n-int\n+enum reg_class\n mep_secondary_output_reload_class (enum reg_class rclass,\n \t\t\t\t   enum machine_mode mode ATTRIBUTE_UNUSED,\n \t\t\t\t   rtx x)\n@@ -2145,7 +2147,7 @@ mep_secondary_output_reload_class (enum reg_class rclass,\n   fprintf (stderr, \" - requires %s\\n\", reg_class_names[rv]);\n #endif\n \n-  return rv;\n+  return (enum reg_class) rv;\n }\n \n /* Implement SECONDARY_MEMORY_NEEDED.  */\n@@ -3804,7 +3806,7 @@ mep_narrow_volatile_bitfield (void)\n /* Implement FUNCTION_VALUE.  All values are returned in $0.  */\n \n rtx\n-mep_function_value (tree type, tree func ATTRIBUTE_UNUSED)\n+mep_function_value (const_tree type, const_tree func ATTRIBUTE_UNUSED)\n {\n   if (TARGET_IVC2 && VECTOR_TYPE_P (type))\n     return gen_rtx_REG (TYPE_MODE (type), 48);"}, {"sha": "48d05b68d812028810188e9b9c1c585ca250ca12", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b0efff1d56d9579cb964b5f34a5eaddf146715/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b0efff1d56d9579cb964b5f34a5eaddf146715/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=77b0efff1d56d9579cb964b5f34a5eaddf146715", "patch": "@@ -396,7 +396,7 @@ enum reg_class\n   { 0xffffffff, 0xffffffff, 0xffffffff, 0x0001ffff }, /* ALL_REGS */ \\\n   }\n \n-#define REGNO_REG_CLASS(REGNO) mep_regno_reg_class (REGNO)\n+#define REGNO_REG_CLASS(REGNO) (enum reg_class) mep_regno_reg_class (REGNO)\n \n #define IRA_COVER_CLASSES { GENERAL_REGS, CONTROL_REGS, CR_REGS, CCR_REGS, LIM_REG_CLASSES }\n "}]}