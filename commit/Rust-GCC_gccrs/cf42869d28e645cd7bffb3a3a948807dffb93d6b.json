{"sha": "cf42869d28e645cd7bffb3a3a948807dffb93d6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y0Mjg2OWQyOGU2NDVjZDdiZmZiM2EzYTk0ODgwN2RmZmI5M2Q2Yg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-08-26T13:22:14Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-08-26T13:22:14Z"}, "message": "builtins.c (fold_builtin_bitop): New function to perform constant folding of ffs...\n\n\n\t* builtins.c (fold_builtin_bitop): New function to perform constant\n\tfolding of ffs, clz, ctz, popcount and parity builtin functions\n\tand their long and long long variants (such as ffsl and ffsll).\n\t(fold_builtin): fold_builtin_bitop when appropriate.\n\t* simplify-rtx.c (simplify_unary_operation): Honor both\n\tCLZ_DEFINED_VALUE_AT_ZERO and CTZ_DEFINED_VALUE_AT_ZERO when\n\tevaluating clz and ctz at compile-time, for operands wider\n\tthan HOST_WIDE_INT.\n\nFrom-SVN: r70806", "tree": {"sha": "c8a37390f8dba8c2397917760e73ce8179a365a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8a37390f8dba8c2397917760e73ce8179a365a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf42869d28e645cd7bffb3a3a948807dffb93d6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf42869d28e645cd7bffb3a3a948807dffb93d6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf42869d28e645cd7bffb3a3a948807dffb93d6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf42869d28e645cd7bffb3a3a948807dffb93d6b/comments", "author": null, "committer": null, "parents": [{"sha": "a103ca2cde431b09326d1378eaaefd45de7bc3af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a103ca2cde431b09326d1378eaaefd45de7bc3af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a103ca2cde431b09326d1378eaaefd45de7bc3af"}], "stats": {"total": 158, "additions": 147, "deletions": 11}, "files": [{"sha": "6c195ba1f4ea0ecb004b49f9bae8ae6e22899dd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf42869d28e645cd7bffb3a3a948807dffb93d6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf42869d28e645cd7bffb3a3a948807dffb93d6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf42869d28e645cd7bffb3a3a948807dffb93d6b", "patch": "@@ -1,3 +1,14 @@\n+2003-08-26  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (fold_builtin_bitop): New function to perform constant\n+\tfolding of ffs, clz, ctz, popcount and parity builtin functions\n+\tand their long and long long variants (such as ffsl and ffsll).\n+\t(fold_builtin): fold_builtin_bitop when appropriate.\n+\t* simplify-rtx.c (simplify_unary_operation): Honor both\n+\tCLZ_DEFINED_VALUE_AT_ZERO and CTZ_DEFINED_VALUE_AT_ZERO when\n+\tevaluating clz and ctz at compile-time, for operands wider\n+\tthan HOST_WIDE_INT.\n+\n 2003-08-26  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* builtins.c (build_function_call_expr): Don't set"}, {"sha": "227bb49c32efc310dc57eee2dc60bdc63a86c9c8", "filename": "gcc/builtins.c", "status": "modified", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf42869d28e645cd7bffb3a3a948807dffb93d6b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf42869d28e645cd7bffb3a3a948807dffb93d6b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=cf42869d28e645cd7bffb3a3a948807dffb93d6b", "patch": "@@ -162,6 +162,7 @@ static tree fold_builtin_cabs (tree, tree, tree);\n static tree fold_builtin_trunc (tree);\n static tree fold_builtin_floor (tree);\n static tree fold_builtin_ceil (tree);\n+static tree fold_builtin_bitop (tree);\n \n /* Initialize mathematical constants for constant folding builtins.\n    These constants need to be given to at least 160 bits precision.  */\n@@ -5770,6 +5771,114 @@ fold_builtin_ceil (tree exp)\n   return fold_trunc_transparent_mathfn (exp);\n }\n \n+/* Fold function call to builtin ffs, clz, ctz, popcount and parity\n+   and their long and long long variants (i.e. ffsl and ffsll).\n+   Return NULL_TREE if no simplification can be made.  */\n+\n+static tree\n+fold_builtin_bitop (tree exp)\n+{\n+  tree fndecl = get_callee_fndecl (exp);\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  tree arg;\n+\n+  if (! validate_arglist (arglist, INTEGER_TYPE, VOID_TYPE))\n+    return NULL_TREE;\n+\n+  /* Optimize for constant argument.  */\n+  arg = TREE_VALUE (arglist);\n+  if (TREE_CODE (arg) == INTEGER_CST && ! TREE_CONSTANT_OVERFLOW (arg))\n+    {\n+      HOST_WIDE_INT hi, width, result;\n+      unsigned HOST_WIDE_INT lo;\n+      tree type, t;\n+\n+      type = TREE_TYPE (arg);\n+      width = TYPE_PRECISION (type);\n+      lo = TREE_INT_CST_LOW (arg);\n+\n+      /* Clear all the bits that are beyond the type's precision.  */\n+      if (width > HOST_BITS_PER_WIDE_INT)\n+\t{\n+\t  hi = TREE_INT_CST_HIGH (arg);\n+\t  if (width < 2 * HOST_BITS_PER_WIDE_INT)\n+\t    hi &= ~((HOST_WIDE_INT) (-1) >> (width - HOST_BITS_PER_WIDE_INT));\n+\t}\n+      else\n+\t{\n+\t  hi = 0;\n+\t  if (width < HOST_BITS_PER_WIDE_INT)\n+\t    lo &= ~((unsigned HOST_WIDE_INT) (-1) << width);\n+\t}\n+\n+      switch (DECL_FUNCTION_CODE (fndecl))\n+\t{\n+\tcase BUILT_IN_FFS:\n+\tcase BUILT_IN_FFSL:\n+\tcase BUILT_IN_FFSLL:\n+\t  if (lo != 0)\n+\t    result = exact_log2 (lo & -lo) + 1;\n+\t  else if (hi != 0)\n+\t    result = HOST_BITS_PER_WIDE_INT + exact_log2 (hi & -hi) + 1;\n+\t  else\n+\t    result = 0;\n+\t  break;\n+\n+\tcase BUILT_IN_CLZ:\n+\tcase BUILT_IN_CLZL:\n+\tcase BUILT_IN_CLZLL:\n+\t  if (hi != 0)\n+\t    result = width - floor_log2 (hi) - 1 - HOST_BITS_PER_WIDE_INT;\n+\t  else if (lo != 0)\n+\t    result = width - floor_log2 (lo) - 1;\n+\t  else if (! CLZ_DEFINED_VALUE_AT_ZERO (TYPE_MODE (type), result))\n+\t    result = width;\n+\t  break;\n+\n+\tcase BUILT_IN_CTZ:\n+\tcase BUILT_IN_CTZL:\n+\tcase BUILT_IN_CTZLL:\n+\t  if (lo != 0)\n+\t    result = exact_log2 (lo & -lo);\n+\t  else if (hi != 0)\n+\t    result = HOST_BITS_PER_WIDE_INT + exact_log2 (hi & -hi);\n+\t  else if (! CTZ_DEFINED_VALUE_AT_ZERO (TYPE_MODE (type), result))\n+\t    result = width;\n+\t  break;\n+\n+\tcase BUILT_IN_POPCOUNT:\n+\tcase BUILT_IN_POPCOUNTL:\n+\tcase BUILT_IN_POPCOUNTLL:\n+\t  result = 0;\n+\t  while (lo)\n+\t    result++, lo &= lo - 1;\n+\t  while (hi)\n+\t    result++, hi &= hi - 1;\n+\t  break;\n+\n+\tcase BUILT_IN_PARITY:\n+\tcase BUILT_IN_PARITYL:\n+\tcase BUILT_IN_PARITYLL:\n+\t  result = 0;\n+\t  while (lo)\n+\t    result++, lo &= lo - 1;\n+\t  while (hi)\n+\t    result++, hi &= hi - 1;\n+\t  result &= 1;\n+\t  break;\n+\n+\tdefault:\n+\t  abort();\n+\t}\n+\n+      t = build_int_2 (result, 0);\n+      TREE_TYPE (t) = TREE_TYPE (exp);\n+      return t;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Used by constant folding to eliminate some builtin calls early.  EXP is\n    the CALL_EXPR of a call to a builtin function.  */\n \n@@ -6225,6 +6334,23 @@ fold_builtin (tree exp)\n     case BUILT_IN_NEARBYINTL:\n       return fold_trunc_transparent_mathfn (exp);\n \n+    case BUILT_IN_FFS:\n+    case BUILT_IN_FFSL:\n+    case BUILT_IN_FFSLL:\n+    case BUILT_IN_CLZ:\n+    case BUILT_IN_CLZL:\n+    case BUILT_IN_CLZLL:\n+    case BUILT_IN_CTZ:\n+    case BUILT_IN_CTZL:\n+    case BUILT_IN_CTZLL:\n+    case BUILT_IN_POPCOUNT:\n+    case BUILT_IN_POPCOUNTL:\n+    case BUILT_IN_POPCOUNTLL:\n+    case BUILT_IN_PARITY:\n+    case BUILT_IN_PARITYL:\n+    case BUILT_IN_PARITYLL:\n+      return fold_builtin_bitop (exp);\n+\n     default:\n       break;\n     }"}, {"sha": "919bea6aae2292a0c51ba359eaf5189a388acfd6", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf42869d28e645cd7bffb3a3a948807dffb93d6b/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf42869d28e645cd7bffb3a3a948807dffb93d6b/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=cf42869d28e645cd7bffb3a3a948807dffb93d6b", "patch": "@@ -649,24 +649,23 @@ simplify_unary_operation (enum rtx_code code, enum machine_mode mode,\n \n \tcase CLZ:\n \t  hv = 0;\n-\t  if (h1 == 0)\n-\t    lv = GET_MODE_BITSIZE (mode) - floor_log2 (l1) - 1;\n-\t  else\n+\t  if (h1 != 0)\n \t    lv = GET_MODE_BITSIZE (mode) - floor_log2 (h1) - 1\n \t      - HOST_BITS_PER_WIDE_INT;\n+\t  else if (l1 != 0)\n+\t    lv = GET_MODE_BITSIZE (mode) - floor_log2 (l1) - 1;\n+\t  else if (! CLZ_DEFINED_VALUE_AT_ZERO (mode, lv))\n+\t    lv = GET_MODE_BITSIZE (mode);\n \t  break;\n \n \tcase CTZ:\n \t  hv = 0;\n-\t  if (l1 == 0)\n-\t    {\n-\t      if (h1 == 0)\n-\t\tlv = GET_MODE_BITSIZE (mode);\n-\t      else\n-\t\tlv = HOST_BITS_PER_WIDE_INT + exact_log2 (h1 & -h1);\n-\t    }\n-\t  else\n+\t  if (l1 != 0)\n \t    lv = exact_log2 (l1 & -l1);\n+\t  else if (h1 != 0)\n+\t    lv = HOST_BITS_PER_WIDE_INT + exact_log2 (h1 & -h1);\n+\t  else if (! CTZ_DEFINED_VALUE_AT_ZERO (mode, lv))\n+\t    lv = GET_MODE_BITSIZE (mode);\n \t  break;\n \n \tcase POPCOUNT:"}]}