{"sha": "d4463dfc9b830354b3d803514798b2caca64fd48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ0NjNkZmM5YjgzMDM1NGIzZDgwMzUxNDc5OGIyY2FjYTY0ZmQ0OA==", "commit": {"author": {"name": "Jerry Quinn", "email": "jlquinn@optonline.net", "date": "2003-01-27T18:06:39Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2003-01-27T18:06:39Z"}, "message": "invoke.texi (Optimization Options): Group together optional and experimental flags.\n\n\t* gcc/doc/invoke.texi (Optimization Options): Group together\n\toptional and experimental flags.  Move trapv and bounds-check\n\tout of this section.\n\t(Code Gen Options): Move trapv and bounds-check to here.\n\nFrom-SVN: r61897", "tree": {"sha": "529ecb2c11546b462cdc2911d6d9e2b7e67419ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/529ecb2c11546b462cdc2911d6d9e2b7e67419ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4463dfc9b830354b3d803514798b2caca64fd48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4463dfc9b830354b3d803514798b2caca64fd48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4463dfc9b830354b3d803514798b2caca64fd48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4463dfc9b830354b3d803514798b2caca64fd48/comments", "author": {"login": "jlquinn", "id": 826841, "node_id": "MDQ6VXNlcjgyNjg0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/826841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlquinn", "html_url": "https://github.com/jlquinn", "followers_url": "https://api.github.com/users/jlquinn/followers", "following_url": "https://api.github.com/users/jlquinn/following{/other_user}", "gists_url": "https://api.github.com/users/jlquinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlquinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlquinn/subscriptions", "organizations_url": "https://api.github.com/users/jlquinn/orgs", "repos_url": "https://api.github.com/users/jlquinn/repos", "events_url": "https://api.github.com/users/jlquinn/events{/privacy}", "received_events_url": "https://api.github.com/users/jlquinn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3fe2438f3a889d795bf80b2a6d7cac75f962671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3fe2438f3a889d795bf80b2a6d7cac75f962671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3fe2438f3a889d795bf80b2a6d7cac75f962671"}], "stats": {"total": 437, "additions": 234, "deletions": 203}, "files": [{"sha": "c8c64b0d626780fd381349d3e38861bca44a70a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4463dfc9b830354b3d803514798b2caca64fd48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4463dfc9b830354b3d803514798b2caca64fd48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4463dfc9b830354b3d803514798b2caca64fd48", "patch": "@@ -1,3 +1,10 @@\n+2003-01-25  Jerry Quinn  <jlquinn@optonline.net>\n+\n+\t* gcc/doc/invoke.texi (Optimization Options): Group together\n+\toptional and experimental flags.  Move trapv and bounds-check\n+\tout of this section.\n+\t(Code Gen Options): Move trapv and bounds-check to here.\n+\n 2003-01-27  Josef Zlomek  <zlomekj@suse.cz>\n \n \t* gcse.c (constprop_register): Check NEXT_INSN (insn) != NULL."}, {"sha": "f8a03960d700bae0b07fb5c5ceb2d80a64c37f36", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 227, "deletions": 203, "changes": 430, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4463dfc9b830354b3d803514798b2caca64fd48/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4463dfc9b830354b3d803514798b2caca64fd48/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d4463dfc9b830354b3d803514798b2caca64fd48", "patch": "@@ -265,7 +265,6 @@ in the following sections.\n @gccoptlist{\n -falign-functions=@var{n}  -falign-jumps=@var{n} @gol\n -falign-labels=@var{n}  -falign-loops=@var{n}  @gol\n--fbounds-check @gol\n -fbranch-probabilities  -fcaller-saves -fcprop-registers @gol\n -fcse-follow-jumps  -fcse-skip-blocks  -fdata-sections @gol\n -fdelayed-branch  -fdelete-null-pointer-checks @gol\n@@ -291,7 +290,7 @@ in the following sections.\n -fsched-spec-load-dangerous  -fsignaling-nans @gol\n -fsingle-precision-constant  -fssa -fssa-ccp -fssa-dce @gol\n -fstrength-reduce  -fstrict-aliasing  -ftracer -fthread-jumps @gol\n--ftrapv -funroll-all-loops  -funroll-loops  @gol\n+-funroll-all-loops  -funroll-loops  @gol\n --param @var{name}=@var{value}\n -O  -O0  -O1  -O2  -O3  -Os}\n \n@@ -712,7 +711,8 @@ in the following sections.\n -fstack-limit-register=@var{reg}  -fstack-limit-symbol=@var{sym} @gol\n -fargument-alias  -fargument-noalias @gol\n -fargument-noalias-global  -fleading-underscore @gol\n--ftls-model=@var{model}}\n+-ftls-model=@var{model} @gol\n+-ftrapv -fbounds-check}\n @end table\n \n @menu\n@@ -3527,21 +3527,6 @@ can use the following flags in the rare cases when ``fine-tuning'' of\n optimizations to be performed is desired.\n \n @table @gcctabopt\n-@item -ffloat-store\n-@opindex ffloat-store\n-Do not store floating point variables in registers, and inhibit other\n-options that might change whether a floating point value is taken from a\n-register or memory.\n-\n-@cindex floating point precision\n-This option prevents undesirable excess precision on machines such as\n-the 68000 where the floating registers (of the 68881) keep more\n-precision than a @code{double} is supposed to have.  Similarly for the\n-x86 architecture.  For most programs, the excess precision does only\n-good, but a few programs rely on the precise definition of IEEE floating\n-point.  Use @option{-ffloat-store} for such programs, after modifying\n-them to store all pertinent intermediate computations into variables.\n-\n @item -fno-default-inline\n @opindex fno-default-inline\n Do not make member functions inline by default merely because they are\n@@ -3598,11 +3583,6 @@ Optimize sibling and tail recursive calls.\n \n Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n \n-@item -ftrapv\n-@opindex ftrapv\n-This option generates traps for signed overflow on addition, subtraction,\n-multiplication operations.\n-\n @item -fno-inline\n @opindex fno-inline\n Don't pay attention to the @code{inline} keyword.  Normally this option\n@@ -3704,89 +3684,6 @@ performed when this option is not used.\n \n The default is @option{-ffunction-cse}\n \n-@item -ffast-math\n-@opindex ffast-math\n-Sets @option{-fno-math-errno}, @option{-funsafe-math-optimizations}, @*\n-@option{-fno-trapping-math}, @option{-ffinite-math-only} and @*\n-@option{-fno-signaling-nans}.\n-\n-This option causes the preprocessor macro @code{__FAST_MATH__} to be defined.\n-\n-This option should never be turned on by any @option{-O} option since\n-it can result in incorrect output for programs which depend on\n-an exact implementation of IEEE or ISO rules/specifications for\n-math functions.\n-\n-@item -fno-math-errno\n-@opindex fno-math-errno\n-Do not set ERRNO after calling math functions that are executed\n-with a single instruction, e.g., sqrt.  A program that relies on\n-IEEE exceptions for math error handling may want to use this flag\n-for speed while maintaining IEEE arithmetic compatibility.\n-\n-This option should never be turned on by any @option{-O} option since\n-it can result in incorrect output for programs which depend on\n-an exact implementation of IEEE or ISO rules/specifications for\n-math functions.\n-\n-The default is @option{-fmath-errno}.\n-\n-@item -funsafe-math-optimizations\n-@opindex funsafe-math-optimizations\n-Allow optimizations for floating-point arithmetic that (a) assume\n-that arguments and results are valid and (b) may violate IEEE or\n-ANSI standards.  When used at link-time, it may include libraries\n-or startup files that change the default FPU control word or other\n-similar optimizations.\n-\n-This option should never be turned on by any @option{-O} option since\n-it can result in incorrect output for programs which depend on\n-an exact implementation of IEEE or ISO rules/specifications for\n-math functions.\n-\n-The default is @option{-fno-unsafe-math-optimizations}.\n-\n-@item -ffinite-math-only\n-@opindex ffinite-math-only\n-Allow optimizations for floating-point arithmetic that assume\n-that arguments and results are not NaNs or +-Infs.\n-\n-This option should never be turned on by any @option{-O} option since\n-it can result in incorrect output for programs which depend on\n-an exact implementation of IEEE or ISO rules/specifications.\n-\n-The default is @option{-fno-finite-math-only}.\n-\n-@item -fno-trapping-math\n-@opindex fno-trapping-math\n-Compile code assuming that floating-point operations cannot generate\n-user-visible traps.  These traps include division by zero, overflow,\n-underflow, inexact result and invalid operation.  This option implies\n-@option{-fno-signaling-nans}.  Setting this option may allow faster\n-code if one relies on ``non-stop'' IEEE arithmetic, for example.\n-\n-This option should never be turned on by any @option{-O} option since\n-it can result in incorrect output for programs which depend on\n-an exact implementation of IEEE or ISO rules/specifications for\n-math functions.\n-\n-The default is @option{-ftrapping-math}.\n-\n-@item -fsignaling-nans\n-@opindex fsignaling-nans\n-Compile code assuming that IEEE signaling NaNs may generate user-visible\n-traps during floating-point operations.  Setting this option disables\n-optimizations that may change the number of exceptions visible with\n-signaling NaNs.  This option implies @option{-ftrapping-math}.\n-\n-This option causes the preprocessor macro @code{__SUPPORT_SNAN__} to\n-be defined.\n-\n-The default is @option{-fno-signaling-nans}.\n-\n-This option is experimental and does not currently guarantee to\n-disable all GCC optimizations that affect signaling NaN behavior.\n-\n @item -fno-zero-initialized-in-bss\n @opindex fno-zero-initialized-in-bss\n If the target supports a BSS section, GCC by default puts variables that\n@@ -3800,13 +3697,6 @@ assumptions based on that.\n \n The default is @option{-fzero-initialized-in-bss}.\n \n-@item -fbounds-check\n-@opindex fbounds-check\n-For front-ends that support it, generate additional code to check that\n-indices used to access arrays are within the declared range.  This is\n-currently only supported by the Java and Fortran 77 front-ends, where\n-this option defaults to true and false respectively.\n-\n @item -fstrength-reduce\n @opindex fstrength-reduce\n Perform the optimizations of loop strength reduction and\n@@ -4003,28 +3893,6 @@ Allow speculative motion of more load instructions.  This only makes\n sense when scheduling before register allocation, i.e.@: with\n @option{-fschedule-insns} or at @option{-O2} or higher.\n \n-@item -ffunction-sections\n-@itemx -fdata-sections\n-@opindex ffunction-sections\n-@opindex fdata-sections\n-Place each function or data item into its own section in the output\n-file if the target supports arbitrary sections.  The name of the\n-function or the name of the data item determines the section's name\n-in the output file.\n-\n-Use these options on systems where the linker can perform optimizations\n-to improve locality of reference in the instruction space.  HPPA\n-processors running HP-UX and SPARC processors running Solaris 2 have\n-linkers with such optimizations.  Other systems using the ELF object format\n-as well as AIX may have these optimizations in the future.\n-\n-Only use these options when there are significant benefits from doing\n-so.  When you specify these options, the assembler and linker will\n-create larger object and executable files and will also be slower.\n-You will not be able to use @command{gprof} on all systems if you\n-specify this option and you may have problems with debugging if\n-you specify both this option and @option{-g}.\n-\n @item -fcaller-saves\n @opindex fcaller-saves\n Enable values to be allocated in registers that will be clobbered by\n@@ -4037,33 +3905,6 @@ those which have no call-preserved registers to use instead.\n \n Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n \n-@item -ftracer\n-@opindex ftracer\n-Perform tail duplication to enlarge superblock size. This transformation\n-simplifies the control flow of the function allowing other optimizations to do\n-better job.\n-\n-@item -funroll-loops\n-@opindex funroll-loops\n-Unroll loops whose number of iterations can be determined at compile\n-time or upon entry to the loop.  @option{-funroll-loops} implies both\n-@option{-fstrength-reduce} and @option{-frerun-cse-after-loop}.  This\n-option makes code larger, and may or may not make it run faster.\n-\n-@item -funroll-all-loops\n-@opindex funroll-all-loops\n-Unroll all loops, even if their number of iterations is uncertain when\n-the loop is entered.  This usually makes programs run more slowly.\n-@option{-funroll-all-loops} implies the same options as\n-@option{-funroll-loops},\n-\n-@item -fprefetch-loop-arrays\n-@opindex fprefetch-loop-arrays\n-If supported by the target machine, generate instructions to prefetch\n-memory to improve the performance of loops that access large arrays.\n-\n-Disabled at level @option{-Os}.\n-\n @item -fmove-all-movables\n @opindex fmove-all-movables\n Forces all invariant computations in loops to be moved\n@@ -4103,27 +3944,6 @@ other, a few use both.\n @option{-fpeephole} is enabled by default.\n @option{-fpeephole2} enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n \n-@item -fbranch-probabilities\n-@opindex fbranch-probabilities\n-After running a program compiled with @option{-fprofile-arcs}\n-(@pxref{Debugging Options,, Options for Debugging Your Program or\n-@command{gcc}}), you can compile it a second time using\n-@option{-fbranch-probabilities}, to improve optimizations based on\n-the number of times each branch was taken.  When the program\n-compiled with @option{-fprofile-arcs} exits it saves arc execution\n-counts to a file called @file{@var{sourcename}.da} for each source\n-file  The information in this data file is very dependent on the\n-structure of the generated code, so you must use the same source code\n-and the same optimization options for both compilations.\n-\n-With @option{-fbranch-probabilities}, GCC puts a @samp{REG_EXEC_COUNT}\n-note on the first instruction of each basic block, and a\n-@samp{REG_BR_PROB} note on each @samp{JUMP_INSN} and @samp{CALL_INSN}.\n-These can be used to improve optimization.  Currently, they are only\n-used in one place: in @file{reorg.c}, instead of guessing which path a\n-branch is mostly to take, the @samp{REG_BR_PROB} values are used to\n-exactly determine which path is taken more often.\n-\n @item -fno-guess-branch-probability\n @opindex fno-guess-branch-probability\n Do not guess branch probabilities using a randomized model.\n@@ -4270,6 +4090,218 @@ If @var{n} is not specified, use a machine-dependent default.\n \n Enabled at levels @option{-O2}, @option{-O3}.\n \n+@item -frename-registers\n+@opindex frename-registers\n+Attempt to avoid false dependencies in scheduled code by making use\n+of registers left over after register allocation.  This optimization\n+will most benefit processors with lots of registers.  It can, however,\n+make debugging impossible, since variables will no longer stay in\n+a ``home register''.\n+\n+Enabled at levels @option{-O3}.\n+\n+@item -fno-cprop-registers\n+@opindex fno-cprop-registers\n+After register allocation and post-register allocation instruction splitting,\n+we perform a copy-propagation pass to try to reduce scheduling dependencies\n+and occasionally eliminate the copy.\n+\n+Disabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n+\n+@end table\n+\n+The following options control compiler behavior regarding floating\n+point arithmetic.  These options trade off between speed and\n+correctness.  All must be specifically enabled.\n+\n+@table @gcctabopt\n+@item -ffloat-store\n+@opindex ffloat-store\n+Do not store floating point variables in registers, and inhibit other\n+options that might change whether a floating point value is taken from a\n+register or memory.\n+\n+@cindex floating point precision\n+This option prevents undesirable excess precision on machines such as\n+the 68000 where the floating registers (of the 68881) keep more\n+precision than a @code{double} is supposed to have.  Similarly for the\n+x86 architecture.  For most programs, the excess precision does only\n+good, but a few programs rely on the precise definition of IEEE floating\n+point.  Use @option{-ffloat-store} for such programs, after modifying\n+them to store all pertinent intermediate computations into variables.\n+\n+@item -ffast-math\n+@opindex ffast-math\n+Sets @option{-fno-math-errno}, @option{-funsafe-math-optimizations}, @*\n+@option{-fno-trapping-math}, @option{-ffinite-math-only} and @*\n+@option{-fno-signaling-nans}.\n+\n+This option causes the preprocessor macro @code{__FAST_MATH__} to be defined.\n+\n+This option should never be turned on by any @option{-O} option since\n+it can result in incorrect output for programs which depend on\n+an exact implementation of IEEE or ISO rules/specifications for\n+math functions.\n+\n+@item -fno-math-errno\n+@opindex fno-math-errno\n+Do not set ERRNO after calling math functions that are executed\n+with a single instruction, e.g., sqrt.  A program that relies on\n+IEEE exceptions for math error handling may want to use this flag\n+for speed while maintaining IEEE arithmetic compatibility.\n+\n+This option should never be turned on by any @option{-O} option since\n+it can result in incorrect output for programs which depend on\n+an exact implementation of IEEE or ISO rules/specifications for\n+math functions.\n+\n+The default is @option{-fmath-errno}.\n+\n+@item -funsafe-math-optimizations\n+@opindex funsafe-math-optimizations\n+Allow optimizations for floating-point arithmetic that (a) assume\n+that arguments and results are valid and (b) may violate IEEE or\n+ANSI standards.  When used at link-time, it may include libraries\n+or startup files that change the default FPU control word or other\n+similar optimizations.\n+\n+This option should never be turned on by any @option{-O} option since\n+it can result in incorrect output for programs which depend on\n+an exact implementation of IEEE or ISO rules/specifications for\n+math functions.\n+\n+The default is @option{-fno-unsafe-math-optimizations}.\n+\n+@item -ffinite-math-only\n+@opindex ffinite-math-only\n+Allow optimizations for floating-point arithmetic that assume\n+that arguments and results are not NaNs or +-Infs.\n+\n+This option should never be turned on by any @option{-O} option since\n+it can result in incorrect output for programs which depend on\n+an exact implementation of IEEE or ISO rules/specifications.\n+\n+The default is @option{-fno-finite-math-only}.\n+\n+@item -fno-trapping-math\n+@opindex fno-trapping-math\n+Compile code assuming that floating-point operations cannot generate\n+user-visible traps.  These traps include division by zero, overflow,\n+underflow, inexact result and invalid operation.  This option implies\n+@option{-fno-signaling-nans}.  Setting this option may allow faster\n+code if one relies on ``non-stop'' IEEE arithmetic, for example.\n+\n+This option should never be turned on by any @option{-O} option since\n+it can result in incorrect output for programs which depend on\n+an exact implementation of IEEE or ISO rules/specifications for\n+math functions.\n+\n+The default is @option{-ftrapping-math}.\n+\n+@item -fsignaling-nans\n+@opindex fsignaling-nans\n+Compile code assuming that IEEE signaling NaNs may generate user-visible\n+traps during floating-point operations.  Setting this option disables\n+optimizations that may change the number of exceptions visible with\n+signaling NaNs.  This option implies @option{-ftrapping-math}.\n+\n+This option causes the preprocessor macro @code{__SUPPORT_SNAN__} to\n+be defined.\n+\n+The default is @option{-fno-signaling-nans}.\n+\n+This option is experimental and does not currently guarantee to\n+disable all GCC optimizations that affect signaling NaN behavior.\n+\n+@item -fsingle-precision-constant\n+@opindex fsingle-precision-constant\n+Treat floating point constant as single precision constant instead of\n+implicitly converting it to double precision constant.\n+\n+\n+@end table\n+\n+The following options control optimizations that may improve\n+performance, but are not enabled by any @option{-O} options.  This\n+section includes experimental options that may produce broken code.\n+\n+@table @gcctabopt\n+@item -fbranch-probabilities\n+@opindex fbranch-probabilities\n+After running a program compiled with @option{-fprofile-arcs}\n+(@pxref{Debugging Options,, Options for Debugging Your Program or\n+@command{gcc}}), you can compile it a second time using\n+@option{-fbranch-probabilities}, to improve optimizations based on\n+the number of times each branch was taken.  When the program\n+compiled with @option{-fprofile-arcs} exits it saves arc execution\n+counts to a file called @file{@var{sourcename}.da} for each source\n+file  The information in this data file is very dependent on the\n+structure of the generated code, so you must use the same source code\n+and the same optimization options for both compilations.\n+\n+With @option{-fbranch-probabilities}, GCC puts a @samp{REG_EXEC_COUNT}\n+note on the first instruction of each basic block, and a\n+@samp{REG_BR_PROB} note on each @samp{JUMP_INSN} and @samp{CALL_INSN}.\n+These can be used to improve optimization.  Currently, they are only\n+used in one place: in @file{reorg.c}, instead of guessing which path a\n+branch is mostly to take, the @samp{REG_BR_PROB} values are used to\n+exactly determine which path is taken more often.\n+\n+@item -fnew-ra\n+@opindex fnew-ra\n+Use a graph coloring register allocator.  Currently this option is meant\n+for testing, so we are interested to hear about miscompilations with\n+@option{-fnew-ra}.\n+\n+@item -ftracer\n+@opindex ftracer\n+Perform tail duplication to enlarge superblock size. This transformation\n+simplifies the control flow of the function allowing other optimizations to do\n+better job.\n+\n+@item -funroll-loops\n+@opindex funroll-loops\n+Unroll loops whose number of iterations can be determined at compile\n+time or upon entry to the loop.  @option{-funroll-loops} implies both\n+@option{-fstrength-reduce} and @option{-frerun-cse-after-loop}.  This\n+option makes code larger, and may or may not make it run faster.\n+\n+@item -funroll-all-loops\n+@opindex funroll-all-loops\n+Unroll all loops, even if their number of iterations is uncertain when\n+the loop is entered.  This usually makes programs run more slowly.\n+@option{-funroll-all-loops} implies the same options as\n+@option{-funroll-loops},\n+\n+@item -fprefetch-loop-arrays\n+@opindex fprefetch-loop-arrays\n+If supported by the target machine, generate instructions to prefetch\n+memory to improve the performance of loops that access large arrays.\n+\n+Disabled at level @option{-Os}.\n+\n+@item -ffunction-sections\n+@itemx -fdata-sections\n+@opindex ffunction-sections\n+@opindex fdata-sections\n+Place each function or data item into its own section in the output\n+file if the target supports arbitrary sections.  The name of the\n+function or the name of the data item determines the section's name\n+in the output file.\n+\n+Use these options on systems where the linker can perform optimizations\n+to improve locality of reference in the instruction space.  HPPA\n+processors running HP-UX and SPARC processors running Solaris 2 have\n+linkers with such optimizations.  Other systems using the ELF object format\n+as well as AIX may have these optimizations in the future.\n+\n+Only use these options when there are significant benefits from doing\n+so.  When you specify these options, the assembler and linker will\n+create larger object and executable files and will also be slower.\n+You will not be able to use @code{gprof} on all systems if you\n+specify this option and you may have problems with debugging if\n+you specify both this option and @option{-g}.\n+\n @item -fssa\n @opindex fssa\n Perform optimizations in static single assignment form.  Each function's\n@@ -4287,28 +4319,8 @@ Perform Sparse Conditional Constant Propagation in SSA form.  Requires\n Perform aggressive dead-code elimination in SSA form.  Requires @option{-fssa}.\n Like @option{-fssa}, this is an experimental feature.\n \n-@item -fsingle-precision-constant\n-@opindex fsingle-precision-constant\n-Treat floating point constant as single precision constant instead of\n-implicitly converting it to double precision constant.\n-\n-@item -frename-registers\n-@opindex frename-registers\n-Attempt to avoid false dependencies in scheduled code by making use\n-of registers left over after register allocation.  This optimization\n-will most benefit processors with lots of registers.  It can, however,\n-make debugging impossible, since variables will no longer stay in\n-a ``home register''.\n-\n-Enabled at levels @option{-O3}.\n \n-@item -fno-cprop-registers\n-@opindex fno-cprop-registers\n-After register allocation and post-register allocation instruction splitting,\n-we perform a copy-propagation pass to try to reduce scheduling dependencies\n-and occasionally eliminate the copy.\n \n-Disabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n \n @item --param @var{name}=@var{value}\n @opindex param\n@@ -10578,6 +10590,18 @@ can figure out the other form by either removing @samp{no-} or adding\n it.\n \n @table @gcctabopt\n+@item -fbounds-check\n+@opindex fbounds-check\n+For front-ends that support it, generate additional code to check that\n+indices used to access arrays are within the declared range.  This is\n+currently only supported by the Java and Fortran 77 front-ends, where\n+this option defaults to true and false respectively.\n+\n+@item -ftrapv\n+@opindex ftrapv\n+This option generates traps for signed overflow on addition, subtraction,\n+multiplication operations.\n+\n @item -fexceptions\n @opindex fexceptions\n Enable exception handling.  Generates extra code needed to propagate"}]}