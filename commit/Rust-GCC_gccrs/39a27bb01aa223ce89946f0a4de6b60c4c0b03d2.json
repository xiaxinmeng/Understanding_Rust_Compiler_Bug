{"sha": "39a27bb01aa223ce89946f0a4de6b60c4c0b03d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlhMjdiYjAxYWEyMjNjZTg5OTQ2ZjBhNGRlNmI2MGM0YzBiMDNkMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-09-29T13:02:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-09-29T13:18:39Z"}, "message": "tree-optimization/97241 - fix ICE in reduction vectorization\n\nThe following moves an ad-hoc attempt at discovering the SLP node\nfor a stmt to the place where we can find it in lock-step when\nwe find the stmt itself.\n\n2020-09-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/97241\n\t* tree-vect-loop.c (vectorizable_reduction): Move finding\n\tthe SLP node for the reduction stmt to a better place.\n\n\t* gcc.dg/vect/pr97241.c: New testcase.", "tree": {"sha": "2284bd6563dd67e6d208e5e014fb0b8c0f5c9f13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2284bd6563dd67e6d208e5e014fb0b8c0f5c9f13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39a27bb01aa223ce89946f0a4de6b60c4c0b03d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a27bb01aa223ce89946f0a4de6b60c4c0b03d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39a27bb01aa223ce89946f0a4de6b60c4c0b03d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a27bb01aa223ce89946f0a4de6b60c4c0b03d2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1570930df659ff3ea6691f9ba8b84c8a189d85d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1570930df659ff3ea6691f9ba8b84c8a189d85d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1570930df659ff3ea6691f9ba8b84c8a189d85d"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "d4be8f6094006c359fb1b696fb56a9bd08616546", "filename": "gcc/testsuite/gcc.dg/vect/pr97241.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a27bb01aa223ce89946f0a4de6b60c4c0b03d2/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97241.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a27bb01aa223ce89946f0a4de6b60c4c0b03d2/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97241.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97241.c?ref=39a27bb01aa223ce89946f0a4de6b60c4c0b03d2", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 --param max-loop-header-insns=2\" } */\n+\n+short int *ev;\n+int l4;\n+\n+short int\n+a7 (void)\n+{\n+  short int uo = ev[0], ie = uo;\n+\n+  for (int kp = 0; kp < l4; kp += 4)\n+    {\n+      uo += ev[kp + 1];\n+      ie += ev[kp];\n+    }\n+\n+  return uo + ie;\n+}"}, {"sha": "ce5d95d7277ad2b4dfc6321dfc09b45eaf46a817", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a27bb01aa223ce89946f0a4de6b60c4c0b03d2/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a27bb01aa223ce89946f0a4de6b60c4c0b03d2/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=39a27bb01aa223ce89946f0a4de6b60c4c0b03d2", "patch": "@@ -6357,12 +6357,14 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n   gphi *reduc_def_phi = as_a <gphi *> (phi_info->stmt);\n \n   /* Verify following REDUC_IDX from the latch def leads us back to the PHI\n-     and compute the reduction chain length.  */\n+     and compute the reduction chain length.  Discover the real\n+     reduction operation stmt on the way (stmt_info and slp_for_stmt_info).  */\n   tree reduc_def = PHI_ARG_DEF_FROM_EDGE (reduc_def_phi,\n \t\t\t\t\t  loop_latch_edge (loop));\n   unsigned reduc_chain_length = 0;\n   bool only_slp_reduc_chain = true;\n   stmt_info = NULL;\n+  slp_tree slp_for_stmt_info = slp_node ? slp_node_instance->root : NULL;\n   while (reduc_def != PHI_RESULT (reduc_def_phi))\n     {\n       stmt_vec_info def = loop_vinfo->lookup_def (reduc_def);\n@@ -6405,6 +6407,8 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n \tstmt_info = vdef;\n       reduc_def = gimple_op (vdef->stmt, 1 + STMT_VINFO_REDUC_IDX (vdef));\n       reduc_chain_length++;\n+      if (!stmt_info && slp_node)\n+\tslp_for_stmt_info = SLP_TREE_CHILDREN (slp_for_stmt_info)[0];\n     }\n   /* PHIs should not participate in patterns.  */\n   gcc_assert (!STMT_VINFO_RELATED_STMT (phi_info));\n@@ -6491,17 +6495,6 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n      The last use is the reduction variable.  In case of nested cycle this\n      assumption is not true: we use reduc_index to record the index of the\n      reduction variable.  */\n-  /* ???  To get at invariant/constant uses on the SLP node we have to\n-     get to it here, slp_node is still the reduction PHI.  */\n-  slp_tree slp_for_stmt_info = NULL;\n-  if (slp_node)\n-    {\n-      slp_for_stmt_info = slp_node_instance->root;\n-      /* And then there's reduction chain with a conversion ...  */\n-      if (SLP_TREE_REPRESENTATIVE (slp_for_stmt_info) != stmt_info)\n-\tslp_for_stmt_info = SLP_TREE_CHILDREN (slp_for_stmt_info)[0];\n-      gcc_assert (SLP_TREE_REPRESENTATIVE (slp_for_stmt_info) == stmt_info);\n-    }\n   slp_tree *slp_op = XALLOCAVEC (slp_tree, op_type);\n   /* We need to skip an extra operand for COND_EXPRs with embedded\n      comparison.  */"}]}