{"sha": "58a6ef4b0981e35f8faa2363bbc8a3790c1381b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThhNmVmNGIwOTgxZTM1ZjhmYWEyMzYzYmJjOGEzNzkwYzEzODFiMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-12-15T16:19:37Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-12-15T16:19:37Z"}, "message": "partial_sum.h: Include new.\n\n2007-12-15  Benjamin Kosnik  <bkoz@redhat.com>\n\t    Paolo Carlini  <pcarlini@suse.de>\n\t\n\t* include/parallel/partial_sum.h: Include new. Fix for DR 402.\t\n\t* include/parallel/multiway_merge.h:Fix for DR 402.\n\t* include/parallel/losertree.h: Same.\n\t* include/parallel/quicksort.h: Same.\n\t* include/parallel/random_shuffle.h: Same.\n\t* include/parallel/multiway_mergesort.h: Same.\n\n\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\n\nFrom-SVN: r130956", "tree": {"sha": "6091c8780525e37a0870cfc480d0522a0efb4d9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6091c8780525e37a0870cfc480d0522a0efb4d9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0/comments", "author": null, "committer": null, "parents": [{"sha": "ffe3dcd9d54ecf2a3fd6bfb282eeb6c9c1f086aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe3dcd9d54ecf2a3fd6bfb282eeb6c9c1f086aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffe3dcd9d54ecf2a3fd6bfb282eeb6c9c1f086aa"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "a6a5d0f812c735fb1f562d685ddc01250b058c66", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=58a6ef4b0981e35f8faa2363bbc8a3790c1381b0", "patch": "@@ -1,3 +1,13 @@\n+2007-12-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n+\t\n+\t* include/parallel/partial_sum.h: Include new. Fix for DR 402.\t\n+\t* include/parallel/multiway_merge.h:Fix for DR 402.\n+\t* include/parallel/losertree.h: Same.\n+\t* include/parallel/quicksort.h: Same.\n+\t* include/parallel/random_shuffle.h: Same.\n+\t* include/parallel/multiway_mergesort.h: Same.\n+\t\n 2007-12-14  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/30127"}, {"sha": "2f2fae711da08f0624ef4637b4c270ce4e38d371", "filename": "libstdc++-v3/include/parallel/losertree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h?ref=58a6ef4b0981e35f8faa2363bbc8a3790c1381b0", "patch": "@@ -265,11 +265,11 @@ template<typename T, typename Comparator = std::less<T> >\n         {\n           // Construct all keys, so we can easily deconstruct them.\n           for (unsigned int i = 0; i < (2 * k); ++i)\n-            new(&(losers[i].key)) T(key);\n+            ::new(&(losers[i].key)) T(key);\n           first_insert = false;\n         }\n       else\n-        new(&(losers[pos].key)) T(key);\n+        ::new(&(losers[pos].key)) T(key);\n \n       losers[pos].sup = sup;\n       losers[pos].source = source;"}, {"sha": "818049cde855f98faedb03d952571c8968e3cd9a", "filename": "libstdc++-v3/include/parallel/multiway_merge.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h?ref=58a6ef4b0981e35f8faa2363bbc8a3790c1381b0", "patch": "@@ -800,7 +800,7 @@ template<\n       {\n         if (seqs_begin[pi].first != seqs_begin[pi].second)\n           {\n-            new(&(fe[nrs])) value_type(*(seqs_begin[pi].first));\n+            ::new(&(fe[nrs])) value_type(*(seqs_begin[pi].first));\n             source[nrs] = pi;\n             ++nrs;\n             total_length += _GLIBCXX_PARALLEL_LENGTH(seqs_begin[pi]);\n@@ -1582,7 +1582,7 @@ template<\n                                 _GLIBCXX_PARALLEL_LENGTH(seqs_begin[s]) * (double(i + 1) /\n                                 (num_samples + 1)) * (double(length)\n                                 / total_length));\n-                        new(&(samples[s * num_samples + i])) value_type(\n+                        ::new(&(samples[s * num_samples + i])) value_type(\n                             seqs_begin[s].first[sample_index]);\n                       }\n "}, {"sha": "e54185069c9dcbea39b567b8a36dd684c3fe1f74", "filename": "libstdc++-v3/include/parallel/multiway_mergesort.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h?ref=58a6ef4b0981e35f8faa2363bbc8a3790c1381b0", "patch": "@@ -139,7 +139,7 @@ template<typename RandomAccessIterator, typename _DifferenceTp>\n                   num_samples + 1, es);\n \n     for (difference_type i = 0; i < num_samples; i++)\n-      new(&(sd->samples[iam * num_samples + i])) value_type(\n+      ::new(&(sd->samples[iam * num_samples + i])) value_type(\n           sd->source[sd->starts[iam] + es[i + 1]]);\n \n     delete[] es;"}, {"sha": "e4a4276f3a4d7dac645941ec37c410be325faa66", "filename": "libstdc++-v3/include/parallel/partial_sum.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h?ref=58a6ef4b0981e35f8faa2363bbc8a3790c1381b0", "patch": "@@ -40,6 +40,7 @@\n #define _GLIBCXX_PARALLEL_PARTIAL_SUM_H 1\n \n #include <omp.h>\n+#include <new>\n #include <bits/stl_algobase.h>\n #include <parallel/parallel.h>\n #include <parallel/numericfwd.h>\n@@ -155,11 +156,11 @@ template<\n             *result = *begin;\n             parallel_partial_sum_basecase(begin + 1, begin + borders[1],\n                           result + 1, bin_op, *begin);\n-            new(&(sums[iam])) value_type(*(result + borders[1] - 1));\n+            ::new(&(sums[iam])) value_type(*(result + borders[1] - 1));\n           }\n         else\n           {\n-            new(&(sums[iam])) value_type(\n+            ::new(&(sums[iam])) value_type(\n                                 std::accumulate(begin + borders[iam] + 1,\n                                 begin + borders[iam + 1],\n                                 *(begin + borders[iam]),"}, {"sha": "d94a49d5251d9560119e9ea80eaa4cfc1abaf027", "filename": "libstdc++-v3/include/parallel/quicksort.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fquicksort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fquicksort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fquicksort.h?ref=58a6ef4b0981e35f8faa2363bbc8a3790c1381b0", "patch": "@@ -80,7 +80,7 @@ namespace __gnu_parallel\n       {\n         const unsigned long long index = static_cast<unsigned long long>(s)\n                         * n / num_samples;\n-        new(&(samples[s])) value_type(begin[index]);\n+        ::new(&(samples[s])) value_type(begin[index]);\n       }\n \n     __gnu_sequential::sort(samples, samples + num_samples, comp);"}, {"sha": "663962b43f326c5824883c3e7678eb150a8ee5f7", "filename": "libstdc++-v3/include/parallel/random_shuffle.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a6ef4b0981e35f8faa2363bbc8a3790c1381b0/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h?ref=58a6ef4b0981e35f8faa2363bbc8a3790c1381b0", "patch": "@@ -213,7 +213,7 @@ template<typename RandomAccessIterator, typename RandomNumberGenerator>\n         thread_index_t target_p = bin_proc[target_bin];\n \n         // Last column [d->num_threads] stays unchanged.\n-        new(&(temporaries[target_p][dist[target_bin + 1]++])) value_type(\n+        ::new(&(temporaries[target_p][dist[target_bin + 1]++])) value_type(\n               *(source + i + start));\n       }\n \n@@ -478,7 +478,7 @@ template<typename RandomAccessIterator, typename RandomNumberGenerator>\n \n         // Distribute according to oracles.\n         for (difference_type i = 0; i < n; ++i)\n-          new(&(target[(dist0[oracles[i]])++])) value_type(*(begin + i));\n+          ::new(&(target[(dist0[oracles[i]])++])) value_type(*(begin + i));\n \n         for (int b = 0; b < num_bins; ++b)\n           {"}]}