{"sha": "aa4e645e7674aec77ae6466c81e5c4d974cbb70c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE0ZTY0NWU3Njc0YWVjNzdhZTY0NjZjODFlNWM0ZDk3NGNiYjcwYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T17:10:21Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T17:10:21Z"}, "message": "config/c6x: Use rtx_insn\n\ngcc/\n\t* config/c6x/c6x-protos.h (c6x_get_unit_specifier): Strengthen\n\tparam from rtx to rtx_insn *.\n\t(c6x_final_prescan_insn): Likewise for first param.\n\n\t* config/c6x/c6x.c (c6x_current_insn): Likewise for this variable.\n\t(c6x_output_mi_thunk): Replace use of NULL_RTX with NULL.\n\t(c6x_expand_compare): Strengthen local \"insns\" from rtx to\n\trtx_insn *.\n\t(c6x_get_unit_specifier): Likewise for param \"insn\".\n\t(c6x_print_unit_specifier_field): Likewise.\n\t(c6x_final_prescan_insn): Likewise.\n\t(emit_add_sp_const): Likewise for local \"insn\".\n\t(c6x_expand_prologue): Likewise.\n\nFrom-SVN: r214440", "tree": {"sha": "4a170924734cd4d00d0c231bd138457a51a0e4ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a170924734cd4d00d0c231bd138457a51a0e4ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa4e645e7674aec77ae6466c81e5c4d974cbb70c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4e645e7674aec77ae6466c81e5c4d974cbb70c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4e645e7674aec77ae6466c81e5c4d974cbb70c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4e645e7674aec77ae6466c81e5c4d974cbb70c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd96e53ce791e1c80a634675ba98f0a3562761ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd96e53ce791e1c80a634675ba98f0a3562761ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd96e53ce791e1c80a634675ba98f0a3562761ee"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "984b99b7646fabe63d8f10ed97a2fa0eca7d051b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4e645e7674aec77ae6466c81e5c4d974cbb70c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4e645e7674aec77ae6466c81e5c4d974cbb70c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa4e645e7674aec77ae6466c81e5c4d974cbb70c", "patch": "@@ -1,3 +1,19 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/c6x/c6x-protos.h (c6x_get_unit_specifier): Strengthen\n+\tparam from rtx to rtx_insn *.\n+\t(c6x_final_prescan_insn): Likewise for first param.\n+\n+\t* config/c6x/c6x.c (c6x_current_insn): Likewise for this variable.\n+\t(c6x_output_mi_thunk): Replace use of NULL_RTX with NULL.\n+\t(c6x_expand_compare): Strengthen local \"insns\" from rtx to\n+\trtx_insn *.\n+\t(c6x_get_unit_specifier): Likewise for param \"insn\".\n+\t(c6x_print_unit_specifier_field): Likewise.\n+\t(c6x_final_prescan_insn): Likewise.\n+\t(emit_add_sp_const): Likewise for local \"insn\".\n+\t(c6x_expand_prologue): Likewise.\n+\n 2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/bfin/bfin-protos.h (asm_conditional_branch): Strengthen"}, {"sha": "78080dac446165ddf263c74ba6bdd2d6521be3fa", "filename": "gcc/config/c6x/c6x-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4e645e7674aec77ae6466c81e5c4d974cbb70c/gcc%2Fconfig%2Fc6x%2Fc6x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4e645e7674aec77ae6466c81e5c4d974cbb70c/gcc%2Fconfig%2Fc6x%2Fc6x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x-protos.h?ref=aa4e645e7674aec77ae6466c81e5c4d974cbb70c", "patch": "@@ -41,9 +41,9 @@ extern rtx c6x_subword (rtx, bool);\n extern void split_di (rtx *, int, rtx *, rtx *);\n extern bool c6x_valid_mask_p (HOST_WIDE_INT);\n \n-extern char c6x_get_unit_specifier (rtx);\n+extern char c6x_get_unit_specifier (rtx_insn *);\n \n-extern void c6x_final_prescan_insn(rtx insn, rtx *opvec, int noperands);\n+extern void c6x_final_prescan_insn(rtx_insn *insn, rtx *opvec, int noperands);\n \n extern int c6x_nsaved_regs (void);\n extern HOST_WIDE_INT c6x_initial_elimination_offset (int, int);"}, {"sha": "618963ba7c0225913fcec9ddacca3f303391e770", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa4e645e7674aec77ae6466c81e5c4d974cbb70c/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa4e645e7674aec77ae6466c81e5c4d974cbb70c/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=aa4e645e7674aec77ae6466c81e5c4d974cbb70c", "patch": "@@ -87,7 +87,7 @@ unsigned long c6x_insn_mask = C6X_DEFAULT_INSN_MASK;\n \n /* The instruction that is being output (as obtained from FINAL_PRESCAN_INSN).\n  */\n-static rtx c6x_current_insn = NULL_RTX;\n+static rtx_insn *c6x_current_insn = NULL;\n \n /* A decl we build to access __c6xabi_DSBT_base.  */\n static GTY(()) tree dsbt_decl;\n@@ -770,7 +770,7 @@ c6x_output_mi_thunk (FILE *file ATTRIBUTE_UNUSED,\n   /* The this parameter is passed as the first argument.  */\n   rtx this_rtx = gen_rtx_REG (Pmode, REG_A4);\n \n-  c6x_current_insn = NULL_RTX;\n+  c6x_current_insn = NULL;\n \n   xops[4] = XEXP (DECL_RTL (function), 0);\n   if (!vcall_offset)\n@@ -1566,7 +1566,7 @@ c6x_expand_compare (rtx comparison, enum machine_mode mode)\n \n       if (is_fp_libfunc)\n \t{\n-\t  rtx insns;\n+\t  rtx_insn *insns;\n \t  rtx libfunc;\n \t  switch (code)\n \t    {\n@@ -1971,7 +1971,7 @@ c6x_print_address_operand (FILE *file, rtx x, enum machine_mode mem_mode)\n    specifies the functional unit used by INSN.  */\n \n char\n-c6x_get_unit_specifier (rtx insn)\n+c6x_get_unit_specifier (rtx_insn *insn)\n {\n   enum attr_units units;\n \n@@ -2008,7 +2008,7 @@ c6x_get_unit_specifier (rtx insn)\n \n /* Prints the unit specifier field.  */\n static void\n-c6x_print_unit_specifier_field (FILE *file, rtx insn)\n+c6x_print_unit_specifier_field (FILE *file, rtx_insn *insn)\n {\n   enum attr_units units = get_attr_units (insn);\n   enum attr_cross cross = get_attr_cross (insn);\n@@ -2488,7 +2488,7 @@ c6x_preferred_rename_class (reg_class_t cl)\n \f\n /* Implements FINAL_PRESCAN_INSN.  */\n void\n-c6x_final_prescan_insn (rtx insn, rtx *opvec ATTRIBUTE_UNUSED,\n+c6x_final_prescan_insn (rtx_insn *insn, rtx *opvec ATTRIBUTE_UNUSED,\n \t\t\tint noperands ATTRIBUTE_UNUSED)\n {\n   c6x_current_insn = insn;\n@@ -2716,7 +2716,7 @@ emit_add_sp_const (HOST_WIDE_INT offset, bool frame_related_p)\n {\n   rtx to_add = GEN_INT (offset);\n   rtx orig_to_add = to_add;\n-  rtx insn;\n+  rtx_insn *insn;\n \n   if (offset == 0)\n     return;\n@@ -2753,7 +2753,8 @@ void\n c6x_expand_prologue (void)\n {\n   struct c6x_frame frame;\n-  rtx insn, mem;\n+  rtx_insn *insn;\n+  rtx mem;\n   int nsaved = 0;\n   HOST_WIDE_INT initial_offset, off, added_already;\n "}]}