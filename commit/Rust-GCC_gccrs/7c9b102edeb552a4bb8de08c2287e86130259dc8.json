{"sha": "7c9b102edeb552a4bb8de08c2287e86130259dc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M5YjEwMmVkZWI1NTJhNGJiOGRlMDhjMjI4N2U4NjEzMDI1OWRjOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-07-29T22:11:04Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-07-29T22:11:04Z"}, "message": "re PR libstdc++/14220 ([3.5] num_put::do_put() undesired float/double behavior)\n\n2004-07-29  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/14220\n\t* include/bits/locale_facets.tcc (num_put<>::_M_insert_float):\n\tDon't clip the precision passed down to __convert_from_v:\n\t22.2.2.2.2 nowhere says so.\n\t* testsuite/22_locale/num_put/put/char/14220.cc: New.\n\t* testsuite/22_locale/num_put/put/wchar_t/14220.c: Likewise.\n\nFrom-SVN: r85315", "tree": {"sha": "e02b45d2e1a79d2ca32ec4f6fe9a9bd2199304bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e02b45d2e1a79d2ca32ec4f6fe9a9bd2199304bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c9b102edeb552a4bb8de08c2287e86130259dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9b102edeb552a4bb8de08c2287e86130259dc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c9b102edeb552a4bb8de08c2287e86130259dc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9b102edeb552a4bb8de08c2287e86130259dc8/comments", "author": null, "committer": null, "parents": [{"sha": "118a8d02ca08c146be991ac3a10fa7c3b7743168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/118a8d02ca08c146be991ac3a10fa7c3b7743168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/118a8d02ca08c146be991ac3a10fa7c3b7743168"}], "stats": {"total": 138, "additions": 118, "deletions": 20}, "files": [{"sha": "4a2381afe6969b4e31566ab5b3d6dbd5e26af368", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9b102edeb552a4bb8de08c2287e86130259dc8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9b102edeb552a4bb8de08c2287e86130259dc8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7c9b102edeb552a4bb8de08c2287e86130259dc8", "patch": "@@ -1,3 +1,12 @@\n+2004-07-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/14220\n+\t* include/bits/locale_facets.tcc (num_put<>::_M_insert_float):\n+\tDon't clip the precision passed down to __convert_from_v:\n+\t22.2.2.2.2 nowhere says so.\n+\t* testsuite/22_locale/num_put/put/char/14220.cc: New.\n+\t* testsuite/22_locale/num_put/put/wchar_t/14220.c: Likewise.\n+\n 2004-07-29  Paolo Carlini  <pcarlini@suse.de>\n \n \t* docs/html/ext/lwg-active.html, lwg-defects.html: Import Revision 31."}, {"sha": "94a2cb8d81d0a5a2723875a66ae1a8baf352c7b5", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9b102edeb552a4bb8de08c2287e86130259dc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9b102edeb552a4bb8de08c2287e86130259dc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=7c9b102edeb552a4bb8de08c2287e86130259dc8", "patch": "@@ -1052,29 +1052,20 @@ namespace std\n \tconst locale& __loc = __io._M_getloc();\n \tconst __cache_type* __lc = __uc(__loc);\n \n-\t// Note: digits10 is rounded down: add 1 to ensure the maximum\n-\t// available precision.  Then, in general, one more 1 needs to\n-\t// be added since, when the %{g,G} conversion specifiers are\n-\t// chosen inside _S_format_float, the precision field is \"the\n-\t// maximum number of significant digits\", *not* the \"number of\n-\t// digits to appear after the decimal point\", as happens for\n-\t// %{e,E,f,F} (C99, 7.19.6.1,4).\n-\tconst int __max_digits = numeric_limits<_ValueT>::digits10 + 2;\n-\n \t// Use default precision if out of range.\n \tstreamsize __prec = __io.precision();\n-\tif (__prec > static_cast<streamsize>(__max_digits))\n-\t  __prec = static_cast<streamsize>(__max_digits);\n-\telse if (__prec < static_cast<streamsize>(0))\n+\tif (__prec < static_cast<streamsize>(0))\n \t  __prec = static_cast<streamsize>(6);\n \n+\tconst int __max_digits = numeric_limits<_ValueT>::digits10;\n+\n \t// [22.2.2.2.2] Stage 1, numeric conversion to character.\n \tint __len;\n \t// Long enough for the max format spec.\n \tchar __fbuf[16];\n \n #ifdef _GLIBCXX_USE_C99\n-\t// First try a buffer perhaps big enough (for sure sufficient\n+\t// First try a buffer perhaps big enough (most probably sufficient\n \t// for non-ios_base::fixed outputs)\n \tint __cs_size = __max_digits * 3;\n \tchar* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n@@ -1097,13 +1088,13 @@ namespace std\n \tconst int __max_exp = numeric_limits<_ValueT>::max_exponent10;\n \n \t// The size of the output string is computed as follows.\n-\t// ios_base::fixed outputs may need up to __max_exp+1 chars\n-\t// for the integer part + up to __max_digits chars for the\n-\t// fractional part + 3 chars for sign, decimal point, '\\0'. On\n-\t// the other hand, for non-fixed outputs __max_digits*3 chars\n-\t// are largely sufficient.\n-\tconst int __cs_size = __fixed ? __max_exp + __max_digits + 4\n-\t                              : __max_digits * 3;\n+\t// ios_base::fixed outputs may need up to __max_exp + 1 chars\n+\t// for the integer part + __prec chars for the fractional part\n+\t// + 3 chars for sign, decimal point, '\\0'. On the other hand,\n+\t// for non-fixed outputs __max_digits * 2 + __prec chars are\n+\t// largely sufficient.\n+\tconst int __cs_size = __fixed ? __max_exp + __prec + 4\n+\t                              : __max_digits * 2 + __prec;\n \tchar* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n \n \t__num_base::_S_format_float(__io, __fbuf, __mod);"}, {"sha": "ecaeec96d974ae9bf428980f87683b17c261ba0f", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/14220.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9b102edeb552a4bb8de08c2287e86130259dc8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F14220.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9b102edeb552a4bb8de08c2287e86130259dc8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F14220.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F14220.cc?ref=7c9b102edeb552a4bb8de08c2287e86130259dc8", "patch": "@@ -0,0 +1,49 @@\n+// 2004-04-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/14220\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  ostringstream oss;\n+  const num_put<char>& np = use_facet<num_put<char> >(oss.getloc());\n+\n+  const int precision = 1000;\n+\n+  oss.precision(precision);\n+  oss.setf(ios_base::fixed);\n+  np.put(oss.rdbuf(), oss, '+', 1.0);\n+  const string result = oss.str();\n+  VERIFY( result.size() == precision + 2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1319e569df6c1900a42e15406d6be2c30a07363e", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/14220.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9b102edeb552a4bb8de08c2287e86130259dc8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F14220.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9b102edeb552a4bb8de08c2287e86130259dc8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F14220.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F14220.cc?ref=7c9b102edeb552a4bb8de08c2287e86130259dc8", "patch": "@@ -0,0 +1,49 @@\n+// 2004-04-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/14220\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+  \n+  wostringstream oss;\n+  const num_put<wchar_t>& np = use_facet<num_put<wchar_t> >(oss.getloc());\n+\n+  const int precision = 1000;\n+\n+  oss.precision(precision);\n+  oss.setf(ios_base::fixed);\n+  np.put(oss.rdbuf(), oss, L'+', 1.0);\n+  const wstring result = oss.str();\n+  VERIFY( result.size() == precision + 2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}