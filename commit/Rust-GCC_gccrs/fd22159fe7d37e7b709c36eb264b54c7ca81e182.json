{"sha": "fd22159fe7d37e7b709c36eb264b54c7ca81e182", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQyMjE1OWZlN2QzN2U3YjcwOWMzNmViMjY0YjU0YzdjYTgxZTE4Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-01-15T17:52:36Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-01-15T17:52:36Z"}, "message": "overloads_int.cc: Fix norm test, use casts everywhere.\n\n2006-01-15  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/tr1/8_c_compatibility/complex/overloads_int.cc:\n\tFix norm test, use casts everywhere.\n\nFrom-SVN: r109725", "tree": {"sha": "14444be8e89bd889d07d4c47311c867f77a3f47b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14444be8e89bd889d07d4c47311c867f77a3f47b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd22159fe7d37e7b709c36eb264b54c7ca81e182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd22159fe7d37e7b709c36eb264b54c7ca81e182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd22159fe7d37e7b709c36eb264b54c7ca81e182", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd22159fe7d37e7b709c36eb264b54c7ca81e182/comments", "author": null, "committer": null, "parents": [{"sha": "02f08d219a3133e58fbac5d4e5f0ae1b96aeda21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f08d219a3133e58fbac5d4e5f0ae1b96aeda21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f08d219a3133e58fbac5d4e5f0ae1b96aeda21"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "93b2e0a11f8d702a987d12bf5319e08324aca456", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22159fe7d37e7b709c36eb264b54c7ca81e182/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22159fe7d37e7b709c36eb264b54c7ca81e182/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fd22159fe7d37e7b709c36eb264b54c7ca81e182", "patch": "@@ -1,3 +1,8 @@\n+2006-01-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/tr1/8_c_compatibility/complex/overloads_int.cc:\n+\tFix norm test, use casts everywhere.\n+\n 2006-01-14  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/testsuite_tr1.h: Add missing include; use std::__are_same."}, {"sha": "07b2f924d95611c2f38460d4c857a70d92f84918", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/complex/overloads_int.cc", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22159fe7d37e7b709c36eb264b54c7ca81e182/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22159fe7d37e7b709c36eb264b54c7ca81e182/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_int.cc?ref=fd22159fe7d37e7b709c36eb264b54c7ca81e182", "patch": "@@ -37,53 +37,59 @@ void test01()\n   const unsigned  u1 = 1;\n   const long      l1 = 1;\n   const double    f1 = 1.0f;\n-  const double    d0 = 0.0;\n   const double    d1 = 1.0;\n     \n   check_ret_type<double>(arg(i1));\n-  VERIFY( arg(i1) == arg(d1) );\n-  VERIFY( arg(i1) == arg(cmplx_d_type(d1, d0)) );\n+  VERIFY( arg(i1) == arg(double(i1)) );\n+  VERIFY( arg(i1) == arg(cmplx_d_type(double(i1))) );\n \n   check_ret_type<cmplx_d_type>(conj(i1));\n-  VERIFY( conj(i1) == conj(d1) );\n-  VERIFY( conj(i1) == conj(cmplx_d_type(d1, d0)) );\n+  VERIFY( conj(i1) == conj(double(i1)) );\n+  VERIFY( conj(i1) == conj(cmplx_d_type(double(i1))) );\n \n   check_ret_type<double>(imag(i1));\n-  VERIFY( imag(i1) == imag(d1) );\n-  VERIFY( imag(i1) == imag(cmplx_d_type(d1, d0)) );\n+  VERIFY( imag(i1) == imag(double(i1)) );\n+  VERIFY( imag(i1) == imag(cmplx_d_type(double(i1))) );\n \n   check_ret_type<double>(norm(i1));\n-  VERIFY( norm(i1) == norm(d1) );\n-  VERIFY( norm(i1) == norm(cmplx_d_type(d1, d0)) );\n+  VERIFY( norm(i1) == norm(double(i1)) );\n+  // std::norm<const complex<>&) is mathematically equivalent to just\n+  // this for a real, but the general algorithm goes through std::abs\n+  // and a multiplication.\n+  VERIFY( norm(i1) == double(i1) * double(i1) );\n \n   check_ret_type<cmplx_d_type>(polar(i1, i1));\n-  VERIFY( polar(i1, i1) == polar(d1, d1) );\n-\n-  // NB: According to the letter of 8.1.9/3 the return type\n-  //     should be a cmplx_d_type, but the existing overload\n-  //     std::pow(const complex<>&, int) wins.\n+  VERIFY( polar(i1, i1) == polar(double(i1), double(i1)) );\n+  // NB: According to the letter of 8.1.9/3 the return type should be a\n+  // cmplx_d_type, but the existing std::pow(const complex<>&, int) wins.\n   check_ret_type<cmplx_f_type>(pow(cmplx_f_type(f1, f1), i1));\n \n   check_ret_type<cmplx_d_type>(pow(cmplx_f_type(f1, f1), u1));\n   check_ret_type<cmplx_d_type>(pow(cmplx_f_type(f1, f1), l1));\n   check_ret_type<cmplx_d_type>(pow(cmplx_d_type(d1, d1), i1));\n \n-  // See above comment.\n-  // VERIFY( pow(cmplx_d_type(d1, d1), i1) == pow(cmplx_d_type(d1, d1), d1) );\n-  VERIFY( pow(cmplx_d_type(d1, d1), u1) == pow(cmplx_d_type(d1, d1), d1) );\n-  VERIFY( pow(cmplx_d_type(d1, d1), l1) == pow(cmplx_d_type(d1, d1), d1) );\n+  // See last comment.\n+  // VERIFY( pow(cmplx_d_type(d1, d1), i1)\n+  //         == pow(cmplx_d_type(d1, d1), double(i1)) );\n+  VERIFY( pow(cmplx_d_type(d1, d1), u1)\n+\t  == pow(cmplx_d_type(d1, d1), double(u1)) );\n+  VERIFY( pow(cmplx_d_type(d1, d1), l1)\n+\t  == pow(cmplx_d_type(d1, d1), double(l1)) );\n \n   check_ret_type<cmplx_d_type>(pow(i1, cmplx_f_type(f1, f1)));\n   check_ret_type<cmplx_d_type>(pow(u1, cmplx_f_type(f1, f1)));\n   check_ret_type<cmplx_d_type>(pow(l1, cmplx_f_type(f1, f1)));\n   check_ret_type<cmplx_d_type>(pow(i1, cmplx_d_type(d1, d1)));\n-  VERIFY( pow(i1, cmplx_d_type(d1, d1)) == pow(d1, cmplx_d_type(d1, d1)) );\n-  VERIFY( pow(u1, cmplx_d_type(d1, d1)) == pow(d1, cmplx_d_type(d1, d1)) );\n-  VERIFY( pow(l1, cmplx_d_type(d1, d1)) == pow(d1, cmplx_d_type(d1, d1)) );\n+  VERIFY( pow(i1, cmplx_d_type(d1, d1))\n+\t  == pow(double(i1), cmplx_d_type(d1, d1)) );\n+  VERIFY( pow(u1, cmplx_d_type(d1, d1))\n+\t  == pow(double(u1), cmplx_d_type(d1, d1)) );\n+  VERIFY( pow(l1, cmplx_d_type(d1, d1))\n+\t  == pow(double(l1), cmplx_d_type(d1, d1)) );\n \n   check_ret_type<double>(real(i1));\n-  VERIFY( real(i1) == real(d1) );\n-  VERIFY( real(i1) == real(cmplx_d_type(d1, d1)) );\n+  VERIFY( real(i1) == real(double(i1)) );\n+  VERIFY( real(i1) == real(cmplx_d_type(double(i1))) );\n }\n \n int main()"}]}