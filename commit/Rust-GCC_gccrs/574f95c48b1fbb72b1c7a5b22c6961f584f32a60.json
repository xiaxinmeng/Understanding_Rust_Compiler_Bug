{"sha": "574f95c48b1fbb72b1c7a5b22c6961f584f32a60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc0Zjk1YzQ4YjFmYmI3MmIxYzdhNWIyMmM2OTYxZjU4NGYzMmE2MA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-11-14T05:48:12Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-11-14T05:48:12Z"}, "message": "* gcc.c-torture/execute/20010122-1.c: Prevent unwanted inlining.\n\nFrom-SVN: r47002", "tree": {"sha": "3c0cafb67122ad244131fa3252e757f0b2936b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c0cafb67122ad244131fa3252e757f0b2936b1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/574f95c48b1fbb72b1c7a5b22c6961f584f32a60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574f95c48b1fbb72b1c7a5b22c6961f584f32a60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/574f95c48b1fbb72b1c7a5b22c6961f584f32a60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574f95c48b1fbb72b1c7a5b22c6961f584f32a60/comments", "author": null, "committer": null, "parents": [{"sha": "c6fa97288a4081e081edcb4946d8f552bde68f6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6fa97288a4081e081edcb4946d8f552bde68f6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6fa97288a4081e081edcb4946d8f552bde68f6f"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "0932909abf42258c6b713d8f11436dc6143cbcc9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574f95c48b1fbb72b1c7a5b22c6961f584f32a60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574f95c48b1fbb72b1c7a5b22c6961f584f32a60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=574f95c48b1fbb72b1c7a5b22c6961f584f32a60", "patch": "@@ -1,3 +1,7 @@\n+2001-11-14  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* gcc.c-torture/execute/20010122-1.c: Prevent unwanted inlining.\n+\n 2001-11-13  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/other/forscope1.C: New test."}, {"sha": "280e3d45c9eb3cc64466c57e3b24d2ab5aa3f68f", "filename": "gcc/testsuite/gcc.c-torture/execute/20010122-1.c", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574f95c48b1fbb72b1c7a5b22c6961f584f32a60/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010122-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574f95c48b1fbb72b1c7a5b22c6961f584f32a60/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010122-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010122-1.c?ref=574f95c48b1fbb72b1c7a5b22c6961f584f32a60", "patch": "@@ -4,71 +4,73 @@ extern void abort (void);\n extern void *alloca (__SIZE_TYPE__);\n char *dummy (void);\n \n+#define NOINLINE __attribute__((noinline))\n+\n void *save_ret1[6];\n void *test4a (char *);\n void *test5a (char *);\n void *test6a (char *);\n \n-void *test1 (void)\n+void NOINLINE *test1 (void)\n {\n   void * temp;\n   temp = __builtin_return_address (0);\n   return temp;\n }\n \n-void *test2 (void)\n+void NOINLINE *test2 (void)\n {\n   void * temp;\n   dummy ();\n   temp = __builtin_return_address (0);\n   return temp;\n }\n \n-void *test3 (void)\n+void NOINLINE *test3 (void)\n {\n   void * temp;\n   temp = __builtin_return_address (0);\n   dummy ();\n   return temp;\n }\n \n-void *test4 (void)\n+void NOINLINE *test4 (void)\n {\n   char * save = (char*) alloca (4);\n   \n   return test4a (save);\n }\n \n-void *test4a (char * p)\n+void *NOINLINE test4a (char * p)\n {\n   void * temp;\n   temp = __builtin_return_address (1);\n   return temp;\n }\n \n-void *test5 (void)\n+void NOINLINE *test5 (void)\n {\n   char * save = (char*) alloca (4);\n   \n   return test5a (save);\n }\n \n-void *test5a (char * p)\n+void NOINLINE *test5a (char * p)\n {\n   void * temp;\n   dummy ();\n   temp = __builtin_return_address (1);\n   return temp;\n }\n \n-void *test6 (void)\n+void NOINLINE *test6 (void)\n {\n   char * save = (char*) alloca (4);\n   \n   return test6a (save);\n }\n \n-void *test6a (char * p)\n+void NOINLINE *test6a (char * p)\n {\n   void * temp;\n   temp = __builtin_return_address (1);\n@@ -78,76 +80,72 @@ void *test6a (char * p)\n \n void *(*func1[6])(void) = { test1, test2, test3, test4, test5, test6 };\n \n-char * call_func1_ (int i)\n+char * NOINLINE call_func1 (int i)\n {\n   save_ret1[i] = func1[i] ();\n }\n \n-/* We dont' want call_func1_ to be inlined, so call it through a\n-   pointer.  */\n-void (*call_func1)(int) = call_func1_;\n-\n static void *ret_addr;\n void *save_ret2[6];\n void test10a (char *);\n void test11a (char *);\n void test12a (char *);\n \n-void test7 (void)\n+void NOINLINE test7 (void)\n {\n   ret_addr = __builtin_return_address (0);\n   return;\n }\n \n-void test8 (void)\n+void NOINLINE test8 (void)\n {\n   dummy ();\n   ret_addr = __builtin_return_address (0);\n   return;\n }\n \n-void test9 (void)\n+void NOINLINE test9 (void)\n {\n   ret_addr = __builtin_return_address (0);\n   dummy ();\n   return;\n }\n \n-void test10 (void)\n+void NOINLINE test10 (void)\n {\n   char * save = (char*) alloca (4);\n   \n   test10a (save);\n }\n \n-void test10a (char * p)\n+void NOINLINE test10a (char * p)\n {\n   ret_addr = __builtin_return_address (1);\n   return;\n }\n \n-void test11 (void)\n+void NOINLINE test11 (void)\n {\n   char * save = (char*) alloca (4);\n   \n   test11a (save);\n }\n \n-void test11a (char * p)\n+void NOINLINE test11a (char * p)\n {\n   dummy ();\n   ret_addr = __builtin_return_address (1);\n   return;\n }\n \n-void test12 (void)\n+void NOINLINE test12 (void)\n {\n   char * save = (char*) alloca (4);\n   \n   test12a (save);\n }\n \n-void test12a (char * p)\n+void NOINLINE test12a (char * p)\n {\n   ret_addr = __builtin_return_address (1);\n   dummy ();\n@@ -163,16 +161,12 @@ char * dummy (void)\n \n void (*func2[6])(void) = { test7, test8, test9, test10, test11, test12 };\n \n-void call_func2_ (int i)\n+void NOINLINE call_func2 (int i)\n {\n   func2[i] ();\n   save_ret2[i] = ret_addr;\n }\n \n-/* We dont' want call_func2_ to be inlined, so call it through a\n-   pointer.  */\n-void (*call_func2)(int) = call_func2_;\n-\n int main (void)\n {\n   int i;"}]}