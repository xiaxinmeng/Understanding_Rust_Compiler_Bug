{"sha": "8fd41e922d2568d85af160795ff825c0423ee363", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZkNDFlOTIyZDI1NjhkODVhZjE2MDc5NWZmODI1YzA0MjNlZTM2Mw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2015-12-22T00:10:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-12-22T00:10:07Z"}, "message": "go-gcc.cc (Gcc_backend::global_variable): If type is zero-sized, add a VIEW_CONVERT_EXPR to the tree.\n\n\t* go-gcc.cc (Gcc_backend::global_variable): If type is zero-sized,\n\tadd a VIEW_CONVERT_EXPR to the tree.\n\t(Gcc_backend::global_variable_set_init): Remove any\n\tVIEW_CONVERT_EXPR.\n\t(Gcc_backend::write_global_definitions): Likewise.\n\nFrom-SVN: r231888", "tree": {"sha": "18fba706531f0869a76fad9429712afb706dade7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18fba706531f0869a76fad9429712afb706dade7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fd41e922d2568d85af160795ff825c0423ee363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd41e922d2568d85af160795ff825c0423ee363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd41e922d2568d85af160795ff825c0423ee363", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd41e922d2568d85af160795ff825c0423ee363/comments", "author": null, "committer": null, "parents": [{"sha": "bf507c789e1aa34ce1c2bd31ccc6f39e7d8cd972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf507c789e1aa34ce1c2bd31ccc6f39e7d8cd972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf507c789e1aa34ce1c2bd31ccc6f39e7d8cd972"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "2a011ddc60ec46ea94b743dee06186b8b6b8fd55", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd41e922d2568d85af160795ff825c0423ee363/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd41e922d2568d85af160795ff825c0423ee363/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=8fd41e922d2568d85af160795ff825c0423ee363", "patch": "@@ -1,3 +1,11 @@\n+2015-12-21  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::global_variable): If type is zero-sized,\n+\tadd a VIEW_CONVERT_EXPR to the tree.\n+\t(Gcc_backend::global_variable_set_init): Remove any\n+\tVIEW_CONVERT_EXPR.\n+\t(Gcc_backend::write_global_definitions): Likewise.\n+\n 2015-11-30  Ian Lance Taylor  <iant@google.com>\n \n \tPR go/68477"}, {"sha": "cb196b32fdee6b7eaf1d6de3367179b77d6c8e5b", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd41e922d2568d85af160795ff825c0423ee363/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd41e922d2568d85af160795ff825c0423ee363/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=8fd41e922d2568d85af160795ff825c0423ee363", "patch": "@@ -2390,6 +2390,7 @@ Gcc_backend::global_variable(const std::string& package_name,\n     return this->error_variable();\n \n   // The GNU linker does not like dynamic variables with zero size.\n+  tree orig_type_tree = type_tree;\n   if ((is_external || !is_hidden) && int_size_in_bytes(type_tree) == 0)\n     type_tree = this->non_zero_size_type(type_tree);\n \n@@ -2419,6 +2420,10 @@ Gcc_backend::global_variable(const std::string& package_name,\n \n   go_preserve_from_gc(decl);\n \n+  if (orig_type_tree != type_tree)\n+    decl = fold_build1_loc(location.gcc_location(), VIEW_CONVERT_EXPR,\n+\t\t\t   orig_type_tree, decl);\n+\n   return new Bvariable(decl);\n }\n \n@@ -2434,6 +2439,10 @@ Gcc_backend::global_variable_set_init(Bvariable* var, Bexpression* expr)\n   tree var_decl = var->get_tree();\n   if (var_decl == error_mark_node)\n     return;\n+  // Undo the VIEW_CONVERT_EXPR that may have been added by\n+  // global_variable.\n+  if (TREE_CODE(var_decl) == VIEW_CONVERT_EXPR)\n+    var_decl = TREE_OPERAND(var_decl, 0);\n   DECL_INITIAL(var_decl) = expr_tree;\n \n   // If this variable goes in a unique section, it may need to go into\n@@ -3030,7 +3039,12 @@ Gcc_backend::write_global_definitions(\n     {\n       if ((*p)->get_tree() != error_mark_node)\n         {\n-          defs[i] = (*p)->get_tree();\n+\t  tree t = (*p)->get_tree();\n+\t  // Undo the VIEW_CONVERT_EXPR that may have been added by\n+\t  // global_variable.\n+\t  if (TREE_CODE(t) == VIEW_CONVERT_EXPR)\n+\t    t = TREE_OPERAND(t, 0);\n+          defs[i] = t;\n           go_preserve_from_gc(defs[i]);\n           ++i;\n         }"}]}