{"sha": "b929615a7c328c01cc7ebd7010938f504f6356b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkyOTYxNWE3YzMyOGMwMWNjN2ViZDcwMTA5MzhmNTA0ZjYzNTZiMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-01-26T16:34:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-01-26T16:34:58Z"}, "message": "mt_allocator.h (struct __per_type_pool_policy<,, [...]): Scale _M_chunk_size too with sizeof(_Tp)...\n\n2005-01-26  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/mt_allocator.h\n\t(struct __per_type_pool_policy<,, false>::_S_get_pool,\n\tstruct __per_type_pool_policy<,, true>::_S_get_pool): Scale\n\t_M_chunk_size too with sizeof(_Tp), otherwise the allocator\n\tbreaks down as soon as sizeof(_Tp) >~ _S_chunk_size / 128;\n\treduce to 64 the multiplier for _M_max_bytes (safer wrt\n\t_Binmap_type being a short); trivial reformattings.\n\t* testsuite/ext/mt_allocator/check_allocate_big_per_type.cc: New.\n\nFrom-SVN: r94268", "tree": {"sha": "735d411e5a31df0e5c2c6752a6afe49e32cbc2cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/735d411e5a31df0e5c2c6752a6afe49e32cbc2cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b929615a7c328c01cc7ebd7010938f504f6356b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b929615a7c328c01cc7ebd7010938f504f6356b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b929615a7c328c01cc7ebd7010938f504f6356b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b929615a7c328c01cc7ebd7010938f504f6356b3/comments", "author": null, "committer": null, "parents": [{"sha": "6f642f985272e36ec5bac248a65e912605727337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f642f985272e36ec5bac248a65e912605727337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f642f985272e36ec5bac248a65e912605727337"}], "stats": {"total": 102, "additions": 95, "deletions": 7}, "files": [{"sha": "2742f60f91d0b3bfacd0380aad1f05b7ea8b113f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b929615a7c328c01cc7ebd7010938f504f6356b3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b929615a7c328c01cc7ebd7010938f504f6356b3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b929615a7c328c01cc7ebd7010938f504f6356b3", "patch": "@@ -1,3 +1,14 @@\n+2005-01-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/mt_allocator.h\n+\t(struct __per_type_pool_policy<,, false>::_S_get_pool,\n+\tstruct __per_type_pool_policy<,, true>::_S_get_pool): Scale\n+\t_M_chunk_size too with sizeof(_Tp), otherwise the allocator\n+\tbreaks down as soon as sizeof(_Tp) >~ _S_chunk_size / 128;\n+\treduce to 64 the multiplier for _M_max_bytes (safer wrt\n+\t_Binmap_type being a short); trivial reformattings.\n+\t* testsuite/ext/mt_allocator/check_allocate_big_per_type.cc: New.\n+\n 2005-01-26  Paolo Carlini  <pcarlini@suse.de>\n \n \t* acinclude.m4 ([GLIBCXX_ENABLE_C99]): Add ac_c99_complex"}, {"sha": "de1656320a1b2f9599b87edce0aa363c5c6da3b8", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b929615a7c328c01cc7ebd7010938f504f6356b3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b929615a7c328c01cc7ebd7010938f504f6356b3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=b929615a7c328c01cc7ebd7010938f504f6356b3", "patch": "@@ -1,6 +1,6 @@\n // MT-optimized allocator -*- C++ -*-\n \n-// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -494,14 +494,25 @@ namespace __gnu_cxx\n       _S_get_pool()\n       { \n \t// Sane defaults for the _PoolTp.\n-\tconst static size_t __align = __alignof__(_Tp) >= sizeof(typename pool_type::_Block_record) ? __alignof__(_Tp) : sizeof(typename pool_type::_Block_record);\n-\tstatic __pool_base::_Tune _S_tune(__align, sizeof(_Tp) * 128, (sizeof(_Tp) * 2) >= __align ? sizeof(_Tp) * 2 : __align, __pool_base::_Tune::_S_chunk_size, __pool_base::_Tune::_S_max_threads, __pool_base::_Tune::_S_freelist_headroom, getenv(\"GLIBCXX_FORCE_NEW\") ? true : false);\n+\ttypedef typename pool_type::_Block_record _Block_record;\n+\tconst static size_t __align = (__alignof__(_Tp) >= sizeof(_Block_record)\n+\t\t\t\t       ? __alignof__(_Tp)\n+\t\t\t\t       : sizeof(_Block_record));\n+\n+\ttypedef typename __pool_base::_Tune _Tune;\n+\tstatic _Tune _S_tune(__align, sizeof(_Tp) * 64,\n+\t\t\t     sizeof(_Tp) * 2 >= __align ? sizeof(_Tp) * 2\n+\t\t\t                                : __align,\n+\t\t\t     sizeof(_Tp) * _Tune::_S_chunk_size,\n+\t\t\t     _Tune::_S_max_threads,\n+\t\t\t     _Tune::_S_freelist_headroom,\n+\t\t\t     getenv(\"GLIBCXX_FORCE_NEW\") ? true : false);\n \tstatic pool_type _S_pool(_S_tune);\n \treturn _S_pool;\n       }\n \n       static void\n-      _S_initialize_once() \n+      _S_initialize_once()\n       { \n \tstatic bool __init;\n \tif (__builtin_expect(__init == false, false))\n@@ -529,14 +540,25 @@ namespace __gnu_cxx\n       _S_get_pool()\n       { \n \t// Sane defaults for the _PoolTp.\n-\tconst static size_t __align = __alignof__(_Tp) >= sizeof(typename pool_type::_Block_record) ? __alignof__(_Tp) : sizeof(typename pool_type::_Block_record);\n-\tstatic __pool_base::_Tune _S_tune(__align, sizeof(_Tp) * 128, (sizeof(_Tp) * 2) >= __align ? sizeof(_Tp) * 2 : __align, __pool_base::_Tune::_S_chunk_size, __pool_base::_Tune::_S_max_threads, __pool_base::_Tune::_S_freelist_headroom, getenv(\"GLIBCXX_FORCE_NEW\") ? true : false);\n+\ttypedef typename pool_type::_Block_record _Block_record;\n+\tconst static size_t __align = (__alignof__(_Tp) >= sizeof(_Block_record)\n+\t\t\t\t       ? __alignof__(_Tp)\n+\t\t\t\t       : sizeof(_Block_record));\n+\n+\ttypedef typename __pool_base::_Tune _Tune;\n+\tstatic _Tune _S_tune(__align, sizeof(_Tp) * 64,\n+\t\t\t     sizeof(_Tp) * 2 >= __align ? sizeof(_Tp) * 2\n+                                                        : __align,\n+\t\t\t     sizeof(_Tp) * _Tune::_S_chunk_size,\n+\t\t\t     _Tune::_S_max_threads,\n+\t\t\t     _Tune::_S_freelist_headroom,\n+\t\t\t     getenv(\"GLIBCXX_FORCE_NEW\") ? true : false);\n \tstatic pool_type _S_pool(_S_tune);\n \treturn _S_pool;\n       }\n \n       static void\n-      _S_initialize_once() \n+      _S_initialize_once()\n       { \n \tstatic bool __init;\n \tif (__builtin_expect(__init == false, false))"}, {"sha": "2d3b5b14dbe33c82f76fa91d7717f7eeae2f098f", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/check_allocate_big_per_type.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b929615a7c328c01cc7ebd7010938f504f6356b3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_allocate_big_per_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b929615a7c328c01cc7ebd7010938f504f6356b3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_allocate_big_per_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_allocate_big_per_type.cc?ref=b929615a7c328c01cc7ebd7010938f504f6356b3", "patch": "@@ -0,0 +1,55 @@\n+// 2005-01-26  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <memory>\n+#include <ext/mt_allocator.h>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+struct big { char array[256]; };\n+\n+// __per_type_pool_policy\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef big value_type;\n+\n+  using __gnu_cxx::__pool;\n+  using __gnu_cxx::__per_type_pool_policy;\n+\n+#ifdef __GTHREADS\n+  typedef __per_type_pool_policy<value_type, __pool, true> policy_type;\n+#else\n+  typedef __per_type_pool_policy<value_type, __pool, false> policy_type;\n+#endif\n+  typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n+\n+  allocator_type a;\n+  allocator_type::pointer p1 = a.allocate(64);\n+  std::memset((void*)p1, 0, sizeof(big) * 64);\n+  a.deallocate(p1, 64);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}