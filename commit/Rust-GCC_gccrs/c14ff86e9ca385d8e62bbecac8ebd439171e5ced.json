{"sha": "c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE0ZmY4NmU5Y2EzODVkOGU2MmJiZWNhYzhlYmQ0MzkxNzFlNWNlZA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2005-07-26T15:41:49Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2005-07-26T15:41:49Z"}, "message": "extend.texi (Raw read/write Functions): New section.\n\n\t* doc/extend.texi (Raw read/write Functions): New section.\n\t* testsuite/gcc.target/frv/all-builtin-read8.c: New.\n\t* testsuite/gcc.target/frv/all-builtin-read16.c: New.\n\t* testsuite/gcc.target/frv/all-builtin-read32.c: New.\n\t* testsuite/gcc.target/frv/all-builtin-read64.c: New.\n\t* testsuite/gcc.target/frv/all-builtin-write8.c: New.\n\t* testsuite/gcc.target/frv/all-builtin-write16.c: New.\n\t* testsuite/gcc.target/frv/all-builtin-write32.c: New.\n\t* testsuite/gcc.target/frv/all-builtin-write64.c: New.\n\t* config/frv/frv.c: Add bdesc_loads global.\n\tAdd bdesc_stores global.\n\t(frv_init_builtins): Add support for __builtin_{read/write}*.\n\t(frv_volatile_memref): New.\n\t(frv_expand_load_builtin): New.\n\t(frv_expand_store_builtin): New.\n\t* config/frv/frv.h (frv_builtins): Add FRV_BUILTIN_SCAN,\n\tFRV_BUILTIN_READ8, FRV_BUILTIN_READ16, FRV_BUILTIN_READ32,\n\tFRV_BUILTIN_READ64, FRV_BUILTIN_WRITE8, FRV_BUILTIN_WRITE16,\n\tFRV_BUILTIN_WRITE32, FRV_BUILTIN_WRITE64.\n\t* config/frv/frv.md (unspecs): Add UNSPEC_BUILTIN_LOAD,\n\tUNSPEC_BUILTIN_STORE, UNSPEC_OPTIONAL_MEMBAR.\n\t(builtin_read_<mode>): New.\n\t(builtin_write_<mode>): New.\n\t(builtin_write64): New.\n\t(optional_membar_<mode>): New.\n\nFrom-SVN: r102388", "tree": {"sha": "c953489e8663c24a0dc08d181832b0f04316ac9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c953489e8663c24a0dc08d181832b0f04316ac9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db48745242e25f3b9b414cd9e01986fe2205ccc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db48745242e25f3b9b414cd9e01986fe2205ccc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db48745242e25f3b9b414cd9e01986fe2205ccc1"}], "stats": {"total": 297, "additions": 295, "deletions": 2}, "files": [{"sha": "8eed4352938c52d8f49c00ba3b8a120969f5af3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "patch": "@@ -1,3 +1,31 @@\n+2005-07-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* doc/extend.texi (Raw read/write Functions): New section.\n+\t* testsuite/gcc.target/frv/all-builtin-read8.c: New.\n+\t* testsuite/gcc.target/frv/all-builtin-read16.c: New.\n+\t* testsuite/gcc.target/frv/all-builtin-read32.c: New.\n+\t* testsuite/gcc.target/frv/all-builtin-read64.c: New.\n+\t* testsuite/gcc.target/frv/all-builtin-write8.c: New.\n+\t* testsuite/gcc.target/frv/all-builtin-write16.c: New.\n+\t* testsuite/gcc.target/frv/all-builtin-write32.c: New.\n+\t* testsuite/gcc.target/frv/all-builtin-write64.c: New.\n+\t* config/frv/frv.c: Add bdesc_loads global.\n+\tAdd bdesc_stores global.\n+\t(frv_init_builtins): Add support for __builtin_{read/write}*.\n+\t(frv_volatile_memref): New.\n+\t(frv_expand_load_builtin): New.\n+\t(frv_expand_store_builtin): New.\n+\t* config/frv/frv.h (frv_builtins): Add FRV_BUILTIN_SCAN,\n+\tFRV_BUILTIN_READ8, FRV_BUILTIN_READ16, FRV_BUILTIN_READ32,\n+\tFRV_BUILTIN_READ64, FRV_BUILTIN_WRITE8, FRV_BUILTIN_WRITE16,\n+\tFRV_BUILTIN_WRITE32, FRV_BUILTIN_WRITE64.\n+\t* config/frv/frv.md (unspecs): Add UNSPEC_BUILTIN_LOAD,\n+\tUNSPEC_BUILTIN_STORE, UNSPEC_OPTIONAL_MEMBAR.\n+\t(builtin_read_<mode>): New.\n+\t(builtin_write_<mode>): New.\n+\t(builtin_write64): New.\n+\t(optional_membar_<mode>): New.\n+\n 2005-07-26  J\"orn Rennecke <joern.rennecke@st.com>\n \n \t* emit-rtl.c (gen_lowpart_common): Compare size of MODE in bits"}, {"sha": "756ae633293de5fd190a1974aa8511a065aa315f", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "patch": "@@ -7953,6 +7953,35 @@ static struct builtin_description bdesc_voidacc[] =\n   { CODE_FOR_mdasaccs, \"__MDASACCS\", FRV_BUILTIN_MDASACCS, 0, 0 }\n };\n \n+/* Intrinsics that load a value and then issue a MEMBAR.\n+   The FLAGS field is the icode for the membar.  */\n+\n+static struct builtin_description bdesc_loads[] =\n+{\n+  { CODE_FOR_builtin_read_qi, \"__builtin_read8\", FRV_BUILTIN_READ8, 0,\n+    CODE_FOR_optional_membar_qi },\n+  { CODE_FOR_builtin_read_hi, \"__builtin_read16\", FRV_BUILTIN_READ16, 0,\n+    CODE_FOR_optional_membar_hi },\n+  { CODE_FOR_builtin_read_si, \"__builtin_read32\", FRV_BUILTIN_READ32, 0,\n+    CODE_FOR_optional_membar_si },\n+  { CODE_FOR_builtin_read_di, \"__builtin_read64\", FRV_BUILTIN_READ64, 0,\n+    CODE_FOR_optional_membar_di }\n+};\n+\n+/* Likewise stores.  */\n+\n+static struct builtin_description bdesc_stores[] =\n+{\n+  { CODE_FOR_builtin_write_qi, \"__builtin_write8\", FRV_BUILTIN_WRITE8, 0,\n+    CODE_FOR_optional_membar_qi },\n+  { CODE_FOR_builtin_write_hi, \"__builtin_write16\", FRV_BUILTIN_WRITE16, 0,\n+    CODE_FOR_optional_membar_hi },\n+  { CODE_FOR_builtin_write_si, \"__builtin_write32\", FRV_BUILTIN_WRITE32, 0,\n+    CODE_FOR_optional_membar_si },\n+  { CODE_FOR_builtin_write64, \"__builtin_write64\", FRV_BUILTIN_WRITE64, 0,\n+    CODE_FOR_optional_membar_di }\n+};\n+\n /* Initialize media builtins.  */\n \n static void\n@@ -7968,6 +7997,8 @@ frv_init_builtins (void)\n   tree sword2 = long_long_integer_type_node;\n   tree uword2 = long_long_unsigned_type_node;\n   tree uword4 = build_pointer_type (uword1);\n+  tree vptr   = build_pointer_type (build_type_variant (void_type_node, 0, 1));\n+  tree ubyte  = unsigned_char_type_node;\n   tree iacc   = integer_type_node;\n \n #define UNARY(RET, T1) \\\n@@ -8034,6 +8065,12 @@ frv_init_builtins (void)\n   tree sw2_ftype_iacc      = UNARY (sword2, iacc);\n   tree sw1_ftype_iacc      = UNARY (sword1, iacc);\n   tree void_ftype_ptr      = UNARY (voidt, const_ptr_type_node);\n+  tree uw1_ftype_vptr      = UNARY (uword1, vptr);\n+  tree uw2_ftype_vptr      = UNARY (uword2, vptr);\n+  tree void_ftype_vptr_ub  = BINARY (voidt, vptr, ubyte);\n+  tree void_ftype_vptr_uh  = BINARY (voidt, vptr, uhalf);\n+  tree void_ftype_vptr_uw1 = BINARY (voidt, vptr, uword1);\n+  tree void_ftype_vptr_uw2 = BINARY (voidt, vptr, uword2);\n \n   def_builtin (\"__MAND\", uw1_ftype_uw1_uw1, FRV_BUILTIN_MAND);\n   def_builtin (\"__MOR\", uw1_ftype_uw1_uw1, FRV_BUILTIN_MOR);\n@@ -8139,6 +8176,15 @@ frv_init_builtins (void)\n   def_builtin (\"__IACCsetl\", void_ftype_iacc_sw1, FRV_BUILTIN_IACCsetl);\n   def_builtin (\"__data_prefetch0\", void_ftype_ptr, FRV_BUILTIN_PREFETCH0);\n   def_builtin (\"__data_prefetch\", void_ftype_ptr, FRV_BUILTIN_PREFETCH);\n+  def_builtin (\"__builtin_read8\", uw1_ftype_vptr, FRV_BUILTIN_READ8);\n+  def_builtin (\"__builtin_read16\", uw1_ftype_vptr, FRV_BUILTIN_READ16);\n+  def_builtin (\"__builtin_read32\", uw1_ftype_vptr, FRV_BUILTIN_READ32);\n+  def_builtin (\"__builtin_read64\", uw2_ftype_vptr, FRV_BUILTIN_READ64);\n+\n+  def_builtin (\"__builtin_write8\", void_ftype_vptr_ub, FRV_BUILTIN_WRITE8);\n+  def_builtin (\"__builtin_write16\", void_ftype_vptr_uh, FRV_BUILTIN_WRITE16);\n+  def_builtin (\"__builtin_write32\", void_ftype_vptr_uw1, FRV_BUILTIN_WRITE32);\n+  def_builtin (\"__builtin_write64\", void_ftype_vptr_uw2, FRV_BUILTIN_WRITE64);\n \n #undef UNARY\n #undef BINARY\n@@ -8364,6 +8410,18 @@ frv_legitimize_argument (enum insn_code icode, int opnum, rtx arg)\n     return copy_to_mode_reg (mode, arg);\n }\n \n+/* Return a volatile memory reference of mode MODE whose address is ARG.  */\n+\n+static rtx\n+frv_volatile_memref (enum machine_mode mode, rtx arg)\n+{\n+  rtx mem;\n+\n+  mem = gen_rtx_MEM (mode, memory_address (mode, arg));\n+  MEM_VOLATILE_P (mem) = 1;\n+  return mem;\n+}\n+\n /* Expand builtins that take a single, constant argument.  At the moment,\n    only MHDSETS falls into this category.  */\n \n@@ -8612,6 +8670,39 @@ frv_expand_voidaccop_builtin (enum insn_code icode, tree arglist)\n   return NULL_RTX;\n }\n \n+/* Expand a __builtin_read* function.  ICODE is the instruction code for\n+   the load and MEMBAR_ICODE is the instruction code of the \"membar\".  */\n+\n+static rtx\n+frv_expand_load_builtin (enum insn_code icode, enum insn_code membar_icode,\n+\t\t\t tree arglist, rtx target)\n+{\n+  rtx op0 = frv_read_argument (& arglist);\n+\n+  target = frv_legitimize_target (icode, target);\n+  op0 = frv_volatile_memref (insn_data[membar_icode].operand[0].mode, op0);\n+  emit_insn (GEN_FCN (icode) (target, op0));\n+  emit_insn (GEN_FCN (membar_icode) (copy_rtx (op0)));\n+  return target;\n+}\n+\n+/* Likewise __builtin_write* functions, with ICODE being the instruction\n+   code of the store.  */\n+\n+static rtx\n+frv_expand_store_builtin (enum insn_code icode, enum insn_code membar_icode,\n+\t\t\t  tree arglist)\n+{\n+  rtx op0 = frv_read_argument (& arglist);\n+  rtx op1 = frv_read_argument (& arglist);\n+\n+  op0 = frv_volatile_memref (insn_data[membar_icode].operand[0].mode, op0);\n+  op1 = frv_legitimize_argument (icode, 1, op1);\n+  emit_insn (GEN_FCN (icode) (op0, op1));\n+  emit_insn (GEN_FCN (membar_icode) (copy_rtx (op0)));\n+  return NULL_RTX;\n+}\n+\n /* Expand the MDPACKH builtin.  It takes four unsigned short arguments and\n    each argument forms one word of the two double-word input registers.\n    ARGLIST is a TREE_LIST of the arguments and TARGET, if nonnull,\n@@ -8956,6 +9047,14 @@ frv_expand_builtin (tree exp,\n     if (d->code == fcode)\n       return frv_expand_prefetches (d->icode, arglist);\n \n+  for (i = 0, d = bdesc_loads; i < ARRAY_SIZE (bdesc_loads); i++, d++)\n+    if (d->code == fcode)\n+      return frv_expand_load_builtin (d->icode, d->flag, arglist, target);\n+\n+  for (i = 0, d = bdesc_stores; i < ARRAY_SIZE (bdesc_stores); i++, d++)\n+    if (d->code == fcode)\n+      return frv_expand_store_builtin (d->icode, d->flag, arglist);\n+\n   return 0;\n }\n "}, {"sha": "41c11c4feeed8876f5aa3706c584ddd6bd2cad44", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "patch": "@@ -2985,7 +2985,15 @@ enum frv_builtins\n   FRV_BUILTIN_IACCreadl,\n   FRV_BUILTIN_IACCsetll,\n   FRV_BUILTIN_IACCsetl,\n-  FRV_BUILTIN_SCAN\n+  FRV_BUILTIN_SCAN,\n+  FRV_BUILTIN_READ8,\n+  FRV_BUILTIN_READ16,\n+  FRV_BUILTIN_READ32,\n+  FRV_BUILTIN_READ64,\n+  FRV_BUILTIN_WRITE8,\n+  FRV_BUILTIN_WRITE16,\n+  FRV_BUILTIN_WRITE32,\n+  FRV_BUILTIN_WRITE64\n };\n #define FRV_BUILTIN_FIRST_NONMEDIA FRV_BUILTIN_SMUL\n "}, {"sha": "5b744bbc52328554c0f54965d7d1cc30cfe6a35a", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "patch": "@@ -41,6 +41,9 @@\n    (UNSPEC_EH_RETURN_EPILOGUE\t6)\n    (UNSPEC_GOT\t\t\t7)\n    (UNSPEC_LDD\t\t\t8)\n+   (UNSPEC_BUILTIN_LOAD\t\t9)\n+   (UNSPEC_BUILTIN_STORE\t10)\n+   (UNSPEC_OPTIONAL_MEMBAR\t11)\n \n    (UNSPEC_GETTLSOFF\t\t\t200)\n    (UNSPEC_TLS_LOAD_GOTTLSOFF12\t\t201)\n@@ -86,7 +89,9 @@\n    (FDPIC_REG\t\t\t15)\n    ])\n \n-\n+(define_mode_macro IMODE [QI HI SI DI])\n+(define_mode_attr IMODEsuffix [(QI \"b\") (HI \"h\") (SI \"\") (DI \"d\")])\n+(define_mode_attr BREADsuffix [(QI \"ub\") (HI \"uh\") (SI \"\") (DI \"d\")])\n \f\n ;; ::::::::::::::::::::\n ;; ::\n@@ -2162,7 +2167,45 @@\n   else\n     FAIL;\n }\")\n+\f\n+;; The load part of a __builtin_read* function.\n+;; Use UNSPECs to distinguish these patterns from normal moves.\n+(define_insn \"builtin_read_<mode>\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(zero_extend:SI (unspec:IMODE\n+\t\t\t [(match_operand:IMODE 1 \"memory_operand\" \"m\")]\n+\t\t\t UNSPEC_BUILTIN_LOAD)))]\n+  \"\"\n+  \"ld<BREADsuffix>%I1%U1 %M1,%0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"gload\")])\n+\n+;; The store part of a __builtin_write* function.\n+(define_insn \"builtin_write_<mode>\"\n+  [(set (match_operand:IMODE 0 \"memory_operand\" \"=m\")\n+\t(unspec:IMODE [(match_operand:IMODE 1 \"reg_or_0_operand\" \"dO\")]\n+\t\t      UNSPEC_BUILTIN_STORE))]\n+  \"\"\n+  \"st<IMODEsuffix>%I0%U0 %z1, %M0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"gstore\")])\n \n+;; This one has a different predicate for operand 1.\n+(define_insn \"builtin_write64\"\n+  [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"d\")]\n+\t\t   UNSPEC_BUILTIN_STORE))]\n+  \"\"\n+  \"std%I0%U0 %z1, %M0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"gstore\")])\n+\n+(define_insn \"optional_membar_<mode>\"\n+  [(set (match_operand:IMODE 0 \"memory_operand\" \"=m\")\n+\t(unspec:IMODE [(const_int 0)] UNSPEC_OPTIONAL_MEMBAR))]\n+  \"\"\n+  \"membar\"\n+  [(set_attr \"length\" \"4\")])\n \f\n ;; ::::::::::::::::::::\n ;; ::"}, {"sha": "dc02b62ae7af84b1e2c17b5e31c87bfa9452fa8b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "patch": "@@ -6044,6 +6044,7 @@ here in tabular form.\n * Argument Types::\n * Directly-mapped Integer Functions::\n * Directly-mapped Media Functions::\n+* Raw read/write Functions::\n * Other Built-in Functions::\n @end menu\n \n@@ -6398,6 +6399,27 @@ The functions listed below map directly to FR-V M-type instructions.\n @tab @code{MXOR @var{a},@var{b},@var{c}}\n @end multitable\n \n+@node Raw read/write Functions\n+@subsubsection Raw read/write Functions\n+\n+This sections describes built-in functions related to read and write\n+instructions to access memory.  These functions generate\n+@code{membar} instructions to flush the I/O load and stores where\n+appropriate, as described in Fujitsu's manual described above.\n+\n+@table @code\n+\n+@item unsigned char __builtin_read8 (void *@var{data})\n+@item unsigned short __builtin_read16 (void *@var{data})\n+@item unsigned long __builtin_read32 (void *@var{data})\n+@item unsigned long long __builtin_read64 (void *@var{data})\n+\n+@item void __builtin_write8 (void *@var{data}, unsigned char @var{datum})\n+@item void __builtin_write16 (void *@var{data}, unsigned short @var{datum})\n+@item void __builtin_write32 (void *@var{data}, unsigned long @var{datum})\n+@item void __builtin_write64 (void *@var{data}, unsigned long long @var{datum})\n+@end table\n+\n @node Other Built-in Functions\n @subsubsection Other Built-in Functions\n "}, {"sha": "362cc8468e0067e08bd11ff201e6c16edf163f92", "filename": "gcc/testsuite/gcc.target/frv/all-builtin-read16.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-read16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-read16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-read16.c?ref=c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+\n+unsigned short z;\n+\n+void foo (void *x)\n+{\n+  z = __builtin_read16 (x);\n+}\n+\n+/* { dg-final { scan-assembler \"lduh\" } } */\n+/* { dg-final { scan-assembler \"membar\" } } */"}, {"sha": "7e988a4378f91b904d4ce277413eee9439e56daf", "filename": "gcc/testsuite/gcc.target/frv/all-builtin-read32.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-read32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-read32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-read32.c?ref=c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+unsigned long z;\n+\n+void foo (void *x)\n+{\n+  z = __builtin_read32 (x);\n+}\n+\n+/* { dg-final { scan-assembler \"ld \" } } */\n+/* { dg-final { scan-assembler \"membar\" } } */"}, {"sha": "1d5b6562a4aced50bbacdaec66b0662ecabb438a", "filename": "gcc/testsuite/gcc.target/frv/all-builtin-read64.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-read64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-read64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-read64.c?ref=c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+\n+unsigned long long z;\n+\n+void foo (void *x)\n+{\n+  z = __builtin_read64 (x);\n+}\n+\n+/* { dg-final { scan-assembler \"ldd\" } } */\n+/* { dg-final { scan-assembler \"membar\" } } */"}, {"sha": "b53fb61797dbbb39745dd05a2a4b6c53c180d648", "filename": "gcc/testsuite/gcc.target/frv/all-builtin-read8.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-read8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-read8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-read8.c?ref=c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+\n+unsigned char z;\n+\n+void foo (void *x)\n+{\n+  z = __builtin_read8 (x);\n+}\n+\n+/* { dg-final { scan-assembler \"ldub\" } } */\n+/* { dg-final { scan-assembler \"membar\" } } */"}, {"sha": "f9f1cb517eeea5022f09d2611bef8ef2b3c546a6", "filename": "gcc/testsuite/gcc.target/frv/all-builtin-write16.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-write16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-write16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-write16.c?ref=c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+\n+unsigned short *addr;\n+unsigned short datum;\n+\n+void foo ()\n+{\n+  __builtin_write16 (addr, datum);\n+}\n+\n+/* { dg-final { scan-assembler \"sth\" } } */\n+/* { dg-final { scan-assembler \"membar\" } } */"}, {"sha": "b97715313c7c7d4f36da8bc1c01ec9ee3a2c3300", "filename": "gcc/testsuite/gcc.target/frv/all-builtin-write32.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-write32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-write32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-write32.c?ref=c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+\n+unsigned long *addr;\n+unsigned long datum;\n+\n+void foo ()\n+{\n+  __builtin_write32 (addr, datum);\n+}\n+\n+/* { dg-final { scan-assembler \"st \" } } */\n+/* { dg-final { scan-assembler \"membar\" } } */"}, {"sha": "eac50a266c7fdc8adbf1b73011e95ce44452f40c", "filename": "gcc/testsuite/gcc.target/frv/all-builtin-write64.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-write64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-write64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-write64.c?ref=c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+\n+unsigned long long *addr;\n+unsigned long long datum;\n+\n+void foo ()\n+{\n+  __builtin_write64 (addr, datum);\n+}\n+\n+/* { dg-final { scan-assembler \"std \" } } */\n+/* { dg-final { scan-assembler \"membar\" } } */"}, {"sha": "56e4f3e41b5c9dcb2d51eaa24b9b98a4f0eb735b", "filename": "gcc/testsuite/gcc.target/frv/all-builtin-write8.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-write8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14ff86e9ca385d8e62bbecac8ebd439171e5ced/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-write8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-builtin-write8.c?ref=c14ff86e9ca385d8e62bbecac8ebd439171e5ced", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+\n+unsigned char *addr;\n+unsigned char datum;\n+\n+void foo ()\n+{\n+  __builtin_write8 (addr, datum);\n+}\n+\n+/* { dg-final { scan-assembler \"stb\" } } */\n+/* { dg-final { scan-assembler \"membar\" } } */"}]}