{"sha": "17c168fe7fc4ce22110e9750191e0e30e115922d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdjMTY4ZmU3ZmM0Y2UyMjExMGU5NzUwMTkxZTBlMzBlMTE1OTIyZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-06-17T22:22:51Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-06-17T22:22:51Z"}, "message": "trans.c (set_gnu_expr_location_from_node): New static function.\n\n\t* gcc-interface/trans.c (set_gnu_expr_location_from_node): New static\n\tfunction.\n\t(gnat_to_gnu) <N_Expression_With_Actions>: New case.\n\tUse set_gnu_expr_location_from_node to set location information on the\n\tresult.\n\nFrom-SVN: r160949", "tree": {"sha": "de2c961be4920be189730cb63d67257e4bf4bfe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de2c961be4920be189730cb63d67257e4bf4bfe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17c168fe7fc4ce22110e9750191e0e30e115922d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c168fe7fc4ce22110e9750191e0e30e115922d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c168fe7fc4ce22110e9750191e0e30e115922d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c168fe7fc4ce22110e9750191e0e30e115922d/comments", "author": null, "committer": null, "parents": [{"sha": "8399a0cc2d64b1480c8dcc82af710c21ad1678b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8399a0cc2d64b1480c8dcc82af710c21ad1678b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8399a0cc2d64b1480c8dcc82af710c21ad1678b3"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "fde2d2588c62835768acab578c3a5c0c26ae7fb0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c168fe7fc4ce22110e9750191e0e30e115922d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c168fe7fc4ce22110e9750191e0e30e115922d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=17c168fe7fc4ce22110e9750191e0e30e115922d", "patch": "@@ -1,3 +1,11 @@\n+2010-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (set_gnu_expr_location_from_node): New static\n+\tfunction.\n+\t(gnat_to_gnu) <N_Expression_With_Actions>: New case.\n+\tUse set_gnu_expr_location_from_node to set location information on the\n+\tresult.\n+\n 2010-06-17  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Make-lang.in: Update dependencies.\n@@ -182,7 +190,8 @@\n \n 2010-06-17  Robert Dewar  <dewar@adacore.com>\n \n-\t* exp_ch4.adb: Minor reformatting\n+\t* exp_ch4.adb: Minor reformatting.\n+\n 2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sinfo.ads, sinfo.adb (Inherited_Discriminant): New flag on"}, {"sha": "4546c1849499167dbc56d855629076bd45c51d3b", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c168fe7fc4ce22110e9750191e0e30e115922d/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c168fe7fc4ce22110e9750191e0e30e115922d/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=17c168fe7fc4ce22110e9750191e0e30e115922d", "patch": "@@ -204,6 +204,7 @@ static tree extract_values (tree, tree);\n static tree pos_to_constructor (Node_Id, tree, Entity_Id);\n static tree maybe_implicit_deref (tree);\n static void set_expr_location_from_node (tree, Node_Id);\n+static void set_gnu_expr_location_from_node (tree, Node_Id);\n static int lvalue_required_p (Node_Id, tree, bool, bool, bool);\n \n /* Hooks for debug info back-ends, only supported and used in a restricted set\n@@ -5317,6 +5318,19 @@ gnat_to_gnu (Node_Id gnat_node)\n     /* Added Nodes  */\n     /****************/\n \n+    case N_Expression_With_Actions:\n+      gnu_result_type = get_unpadded_type (Etype (gnat_node));\n+      /* This construct doesn't define a scope so we don't wrap the statement\n+\t list in a BIND_EXPR; however, we wrap it in a SAVE_EXPR to protect it\n+\t from unsharing.  */\n+      gnu_result = build_stmt_group (Actions (gnat_node), false);\n+      gnu_result = build1 (SAVE_EXPR, void_type_node, gnu_result);\n+      TREE_SIDE_EFFECTS (gnu_result) = 1;\n+      gnu_expr = gnat_to_gnu (Expression (gnat_node));\n+      gnu_result\n+\t= build2 (COMPOUND_EXPR, TREE_TYPE (gnu_expr), gnu_result, gnu_expr);\n+      break;\n+\n     case N_Freeze_Entity:\n       start_stmt_group ();\n       process_freeze_entity (gnat_node);\n@@ -5536,17 +5550,11 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t\t\t  convert (gnu_result_type,\n \t\t\t\t\t   boolean_false_node));\n \n-  /* Set the location information on the result if it is a real expression.\n-     References can be reused for multiple GNAT nodes and they would get\n-     the location information of their last use.  Note that we may have\n+  /* Set the location information on the result.  Note that we may have\n      no result if we tried to build a CALL_EXPR node to a procedure with\n      no side-effects and optimization is enabled.  */\n-  if (gnu_result\n-      && EXPR_P (gnu_result)\n-      && TREE_CODE (gnu_result) != NOP_EXPR\n-      && !REFERENCE_CLASS_P (gnu_result)\n-      && !EXPR_HAS_LOCATION (gnu_result))\n-    set_expr_location_from_node (gnu_result, gnat_node);\n+  if (gnu_result && EXPR_P (gnu_result))\n+    set_gnu_expr_location_from_node (gnu_result, gnat_node);\n \n   /* If we're supposed to return something of void_type, it means we have\n      something we're elaborating for effect, so just return.  */\n@@ -7450,6 +7458,37 @@ set_expr_location_from_node (tree node, Node_Id gnat_node)\n \n   SET_EXPR_LOCATION (node, locus);\n }\n+\n+/* More elaborate version of set_expr_location_from_node to be used in more\n+   general contexts, for example the result of the translation of a generic\n+   GNAT node.  */\n+\n+static void\n+set_gnu_expr_location_from_node (tree node, Node_Id gnat_node)\n+{\n+  /* Set the location information on the node if it is a real expression.\n+     References can be reused for multiple GNAT nodes and they would get\n+     the location information of their last use.  Also make sure not to\n+     overwrite an existing location as it is probably more precise.  */\n+\n+  switch (TREE_CODE (node))\n+    {\n+    CASE_CONVERT:\n+    case NON_LVALUE_EXPR:\n+      break;\n+\n+    case COMPOUND_EXPR:\n+      if (EXPR_P (TREE_OPERAND (node, 1)))\n+\tset_gnu_expr_location_from_node (TREE_OPERAND (node, 1), gnat_node);\n+\n+      /* ... fall through ... */\n+\n+    default:\n+      if (!REFERENCE_CLASS_P (node) && !EXPR_HAS_LOCATION (node))\n+\tset_expr_location_from_node (node, gnat_node);\n+      break;\n+    }\n+}\n \f\n /* Return a colon-separated list of encodings contained in encoded Ada\n    name.  */"}]}