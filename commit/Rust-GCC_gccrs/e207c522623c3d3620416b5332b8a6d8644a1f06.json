{"sha": "e207c522623c3d3620416b5332b8a6d8644a1f06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIwN2M1MjI2MjNjM2QzNjIwNDE2YjUzMzJiOGE2ZDg2NDRhMWYwNg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-01-18T12:21:38Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-01-18T12:21:38Z"}, "message": "re PR fortran/55901 ([OOP] type is (character(len=*)) misinterpreted as array)\n\n2015-01-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/55901\n\t* primary.c (gfc_match_varspec): Exclude dangling associate-\n\tnames with dimension 0 from being counted as arrays.\n\t* resolve.c (resolve_assoc_var): Sub-strings are permissible\n\tfor associate-names, so exclude characters from the test for\n\tmisuse as arrays.\n\t* trans-decl.c (gfc_get_symbol_decl): Associate-names can use\n\tthe hidden string length variable of their associated target.\n\tSignal this by setting 'length' to a constant, if the decl for\n\tthe string length is a variable.\n\n2015-01-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/55901\n\t* gfortran.dg/associate_1.f03: Allow test for character with\n\tautomatic length.\n\nFrom-SVN: r219814", "tree": {"sha": "b4a34c50935449f36aaace2f13d03cbaffac2ad3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4a34c50935449f36aaace2f13d03cbaffac2ad3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e207c522623c3d3620416b5332b8a6d8644a1f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e207c522623c3d3620416b5332b8a6d8644a1f06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e207c522623c3d3620416b5332b8a6d8644a1f06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e207c522623c3d3620416b5332b8a6d8644a1f06/comments", "author": null, "committer": null, "parents": [{"sha": "d28701a2da0fbe188c551d9a698a4b72bf920246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d28701a2da0fbe188c551d9a698a4b72bf920246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d28701a2da0fbe188c551d9a698a4b72bf920246"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "e91159a8d01520812c3497df7c87441cb26de65e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e207c522623c3d3620416b5332b8a6d8644a1f06/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e207c522623c3d3620416b5332b8a6d8644a1f06/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e207c522623c3d3620416b5332b8a6d8644a1f06", "patch": "@@ -1,3 +1,16 @@\n+2015-01-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/55901\n+\t* primary.c (gfc_match_varspec): Exclude dangling associate-\n+\tnames with dimension 0 from being counted as arrays.\n+\t* resolve.c (resolve_assoc_var): Sub-strings are permissible\n+\tfor associate-names, so exclude characters from the test for\n+\tmisuse as arrays.\n+\t* trans-decl.c (gfc_get_symbol_decl): Associate-names can use\n+\tthe hidden string length variable of their associated target.\n+\tSignal this by setting 'length' to a constant, if the decl for\n+\tthe string length is a variable.\n+\n 2015-01-17  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/64578"}, {"sha": "141f8cc1ed6250e1cba3693727614f82b5b92907", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e207c522623c3d3620416b5332b8a6d8644a1f06/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e207c522623c3d3620416b5332b8a6d8644a1f06/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=e207c522623c3d3620416b5332b8a6d8644a1f06", "patch": "@@ -1857,7 +1857,10 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n      Thus if we have one and parentheses follow, we have to assume that it\n      actually is one for now.  The final decision will be made at\n      resolution time, of course.  */\n-  if (sym->assoc && gfc_peek_ascii_char () == '(')\n+  if (sym->assoc && gfc_peek_ascii_char () == '('\n+      && !(sym->assoc->dangling && sym->assoc->st\n+\t   && sym->assoc->st->n.sym\n+\t   && sym->assoc->st->n.sym->attr.dimension == 0))\n     sym->attr.dimension = 1;\n \n   if ((equiv_flag && gfc_peek_ascii_char () == '(')"}, {"sha": "a9645a0a2143249180ed97a6f9f35923851c8a38", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e207c522623c3d3620416b5332b8a6d8644a1f06/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e207c522623c3d3620416b5332b8a6d8644a1f06/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=e207c522623c3d3620416b5332b8a6d8644a1f06", "patch": "@@ -7935,8 +7935,11 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n   /* Finally resolve if this is an array or not.  */\n   if (sym->attr.dimension && target->rank == 0)\n     {\n-      gfc_error (\"Associate-name %qs at %L is used as array\",\n-\t\t sym->name, &sym->declared_at);\n+      /* primary.c makes the assumption that a reference to an associate\n+\t name followed by a left parenthesis is an array reference.  */\n+      if (sym->ts.type != BT_CHARACTER)\n+\tgfc_error (\"Associate-name %qs at %L is used as array\",\n+\t\t   sym->name, &sym->declared_at);\n       sym->attr.dimension = 0;\n       return;\n     }"}, {"sha": "5beb6f73fb1039457efad76bc9492aa9f2a383c6", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e207c522623c3d3620416b5332b8a6d8644a1f06/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e207c522623c3d3620416b5332b8a6d8644a1f06/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=e207c522623c3d3620416b5332b8a6d8644a1f06", "patch": "@@ -1494,9 +1494,18 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n     gfc_internal_error (\"intrinsic variable which isn't a procedure\");\n \n   /* Create string length decl first so that they can be used in the\n-     type declaration.  */\n+     type declaration.  For associate names, the target character\n+     length is used. Set 'length' to a constant so that if the\n+     string lenght is a variable, it is not finished a second time.  */\n   if (sym->ts.type == BT_CHARACTER)\n-    length = gfc_create_string_length (sym);\n+    {\n+      if (sym->attr.associate_var\n+\t  && sym->ts.u.cl->backend_decl\n+\t  && TREE_CODE (sym->ts.u.cl->backend_decl) == VAR_DECL)\n+\tlength = gfc_index_zero_node;\n+      else\n+\tlength = gfc_create_string_length (sym);\n+    }\n \n   /* Create the decl for the variable.  */\n   decl = build_decl (sym->declared_at.lb->location,\n@@ -1558,6 +1567,8 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n       /* Character variables need special handling.  */\n       gfc_allocate_lang_decl (decl);\n \n+      /* Associate names can use the hidden string length variable\n+\t of their associated target.  */\n       if (TREE_CODE (length) != INTEGER_CST)\n \t{\n \t  gfc_finish_var_decl (length, sym);"}, {"sha": "34e40ff8d4211398913ecf54aeafa6b6ecb20fb6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e207c522623c3d3620416b5332b8a6d8644a1f06/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e207c522623c3d3620416b5332b8a6d8644a1f06/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e207c522623c3d3620416b5332b8a6d8644a1f06", "patch": "@@ -1,3 +1,9 @@\n+2015-01-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/55901\n+\t* gfortran.dg/associate_1.f03: Allow test for character with\n+\tautomatic length.\n+\n 2015-01-17  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* gcc.target/powerpc/ppc-fpconv-4.c: Skip for -mpowerpc64."}, {"sha": "61fa1ac7831566c7c8c18092a4ab3c561397639a", "filename": "gcc/testsuite/gfortran.dg/associate_1.f03", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e207c522623c3d3620416b5332b8a6d8644a1f06/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e207c522623c3d3620416b5332b8a6d8644a1f06/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_1.f03?ref=e207c522623c3d3620416b5332b8a6d8644a1f06", "patch": "@@ -84,8 +84,7 @@ PROGRAM main\n   IF (tp%comp /= 5) CALL abort ()\n \n   ! Association to character variables.\n-  ! FIXME: Enable character test, once this works.\n-  !CALL test_char (5)\n+  CALL test_char (5)\n \n CONTAINS\n \n@@ -94,7 +93,6 @@ FUNCTION func ()\n     func = (/ 1, 3, 5 /)\n   END FUNCTION func\n \n-#if 0\n   ! Test association to character variable with automatic length.\n   SUBROUTINE test_char (n)\n     INTEGER, INTENT(IN) :: n\n@@ -109,6 +107,5 @@ SUBROUTINE test_char (n)\n     END ASSOCIATE\n     IF (str /= \"abcde\") CALL abort ()\n   END SUBROUTINE test_char\n-#endif\n \n END PROGRAM main"}]}