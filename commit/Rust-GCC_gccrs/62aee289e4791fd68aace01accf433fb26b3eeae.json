{"sha": "62aee289e4791fd68aace01accf433fb26b3eeae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJhZWUyODllNDc5MWZkNjhhYWNlMDFhY2NmNDMzZmIyNmIzZWVhZQ==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@codesourcery.com", "date": "2019-11-12T08:45:35Z"}, "committer": {"name": "Frederik Harwath", "email": "frederik@gcc.gnu.org", "date": "2019-11-12T08:45:35Z"}, "message": "Add OpenACC 2.6 `serial' construct support\n\n    The `serial' construct (cf. section 2.5.3 of the OpenACC 2.6 standard)\n    is equivalent to a `parallel' construct with clauses `num_gangs(1)\n    num_workers(1) vector_length(1)' implied.\n    These clauses are therefore not supported with the `serial'\n    construct. All the remaining clauses accepted with `parallel' are also\n    accepted with `serial'.\n\n    The `serial' construct is implemented like `parallel', except for\n    hardcoding dimensions rather than taking them from the relevant\n    clauses, in `expand_omp_target'.\n\n    Separate codes are used to denote the `serial' construct throughout the\n    middle end, even though the mapping of `serial' to an equivalent\n    `parallel' construct could have been done in the individual language\n    frontends. In particular, this allows to distinguish between compute\n    constructs in warnings, error messages, dumps etc.\n\n    2019-11-12  Maciej W. Rozycki  <macro@codesourcery.com>\n                Tobias Burnus  <tobias@codesourcery.com>\n                Frederik Harwath  <frederik@codesourcery.com>\n                Thomas Schwinge  <thomas@codesourcery.com>\n\n    gcc/\n    * gimple.h (gf_mask): Add GF_OMP_TARGET_KIND_OACC_SERIAL\n    enumeration constant.\n    (is_gimple_omp_oacc): Handle GF_OMP_TARGET_KIND_OACC_SERIAL.\n    (is_gimple_omp_offloaded): Likewise.\n    * gimplify.c (omp_region_type): Add ORT_ACC_SERIAL enumeration\n    constant.  Adjust the value of ORT_NONE accordingly.\n    (is_gimple_stmt): Handle OACC_SERIAL.\n    (oacc_default_clause): Handle ORT_ACC_SERIAL.\n    (gomp_needs_data_present): Likewise.\n    (gimplify_adjust_omp_clauses): Likewise.\n    (gimplify_omp_workshare): Handle OACC_SERIAL.\n    (gimplify_expr): Likewise.\n    * omp-expand.c (expand_omp_target):\n    Handle GF_OMP_TARGET_KIND_OACC_SERIAL.\n    (build_omp_regions_1, omp_make_gimple_edges): Likewise.\n    * omp-low.c (is_oacc_parallel): Rename function to...\n    (is_oacc_parallel_or_serial): ... this.\n    Handle GF_OMP_TARGET_KIND_OACC_SERIAL.\n    (scan_sharing_clauses): Adjust accordingly.\n    (scan_omp_for): Likewise.\n    (lower_oacc_head_mark): Likewise.\n    (convert_from_firstprivate_int): Likewise.\n    (lower_omp_target): Likewise.\n    (check_omp_nesting_restrictions): Handle\n    GF_OMP_TARGET_KIND_OACC_SERIAL.\n    (lower_oacc_reductions): Likewise.\n    (lower_omp_target): Likewise.\n    * tree.def (OACC_SERIAL): New tree code.\n    * tree-pretty-print.c (dump_generic_node): Handle OACC_SERIAL.\n\n    * doc/generic.texi (OpenACC): Document OACC_SERIAL.\n\n    gcc/c-family/\n    * c-pragma.h (pragma_kind): Add PRAGMA_OACC_SERIAL enumeration\n    constant.\n    * c-pragma.c (oacc_pragmas): Add \"serial\" entry.\n\n    gcc/c/\n    * c-parser.c (OACC_SERIAL_CLAUSE_MASK): New macro.\n    (c_parser_oacc_kernels_parallel): Rename function to...\n    (c_parser_oacc_compute): ... this.  Handle PRAGMA_OACC_SERIAL.\n    (c_parser_omp_construct): Update accordingly.\n\n    gcc/cp/\n    * constexpr.c (potential_constant_expression_1): Handle\n    OACC_SERIAL.\n    * parser.c (OACC_SERIAL_CLAUSE_MASK): New macro.\n    (cp_parser_oacc_kernels_parallel): Rename function to...\n    (cp_parser_oacc_compute): ... this.  Handle PRAGMA_OACC_SERIAL.\n    (cp_parser_omp_construct): Update accordingly.\n    (cp_parser_pragma): Handle PRAGMA_OACC_SERIAL.  Fix alphabetic\n    order.\n    * pt.c (tsubst_expr): Handle OACC_SERIAL.\n\n    gcc/fortran/\n    * gfortran.h (gfc_statement): Add ST_OACC_SERIAL_LOOP,\n    ST_OACC_END_SERIAL_LOOP, ST_OACC_SERIAL and ST_OACC_END_SERIAL\n    enumeration constants.\n    (gfc_exec_op): Add EXEC_OACC_SERIAL_LOOP and EXEC_OACC_SERIAL\n    enumeration constants.\n    * match.h (gfc_match_oacc_serial): New prototype.\n    (gfc_match_oacc_serial_loop): Likewise.\n    * dump-parse-tree.c (show_omp_node, show_code_node): Handle\n    EXEC_OACC_SERIAL_LOOP and EXEC_OACC_SERIAL.\n    * match.c (match_exit_cycle): Handle EXEC_OACC_SERIAL_LOOP.\n    * openmp.c (OACC_SERIAL_CLAUSES): New macro.\n    (gfc_match_oacc_serial_loop): New function.\n    (gfc_match_oacc_serial): Likewise.\n    (oacc_is_loop): Handle EXEC_OACC_SERIAL_LOOP.\n    (resolve_omp_clauses): Handle EXEC_OACC_SERIAL.\n    (oacc_code_to_statement): Handle EXEC_OACC_SERIAL and\n    EXEC_OACC_SERIAL_LOOP.\n    (gfc_resolve_oacc_directive): Likewise.\n    * parse.c (decode_oacc_directive) <'s'>: Add case for \"serial\"\n    and \"serial loop\".\n    (next_statement): Handle ST_OACC_SERIAL_LOOP and ST_OACC_SERIAL.\n    (gfc_ascii_statement): Likewise.  Handle ST_OACC_END_SERIAL_LOOP\n    and ST_OACC_END_SERIAL.\n    (parse_oacc_structured_block): Handle ST_OACC_SERIAL.\n    (parse_oacc_loop): Handle ST_OACC_SERIAL_LOOP and\n    ST_OACC_END_SERIAL_LOOP.\n    (parse_executable): Handle ST_OACC_SERIAL_LOOP and\n    ST_OACC_SERIAL.\n    (is_oacc): Handle EXEC_OACC_SERIAL_LOOP and EXEC_OACC_SERIAL.\n    * resolve.c (gfc_resolve_blocks, gfc_resolve_code): Likewise.\n    * st.c (gfc_free_statement): Likewise.\n    * trans-openmp.c (gfc_trans_oacc_construct): Handle\n    EXEC_OACC_SERIAL.\n    (gfc_trans_oacc_combined_directive): Handle\n    EXEC_OACC_SERIAL_LOOP.\n    (gfc_trans_oacc_directive): Handle EXEC_OACC_SERIAL_LOOP and\n    EXEC_OACC_SERIAL.\n    * trans.c (trans_code): Likewise.\n\n    gcc/testsuite/\n    * c-c++-common/goacc/parallel-dims.c: New test.\n    * gfortran.dg/goacc/parallel-dims.f90: New test.\n\n    libgomp/\n    * testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: New test.\n    * testsuite/libgomp.oacc-fortran/parallel-dims-aux.c: New test.\n    * testsuite/libgomp.oacc-fortran/parallel-dims.f89: New test.\n    * testsuite/libgomp.oacc-fortran/parallel-dims-2.f90: New test.\n\nReviewed-by: Thomas Schwinge <thomas@codesourcery.com>\n\n\nCo-Authored-By: Frederik Harwath <frederik@codesourcery.com>\nCo-Authored-By: Thomas Schwinge <thomas@codesourcery.com>\nCo-Authored-By: Tobias Burnus <tobias@codesourcery.com>\n\nFrom-SVN: r278082", "tree": {"sha": "083108bb2b5a367f3ad3ecc198ecf2273eb26661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/083108bb2b5a367f3ad3ecc198ecf2273eb26661"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62aee289e4791fd68aace01accf433fb26b3eeae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62aee289e4791fd68aace01accf433fb26b3eeae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62aee289e4791fd68aace01accf433fb26b3eeae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62aee289e4791fd68aace01accf433fb26b3eeae/comments", "author": null, "committer": null, "parents": [{"sha": "466183763cd52169d326f0c3a651e8e46adc8b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/466183763cd52169d326f0c3a651e8e46adc8b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/466183763cd52169d326f0c3a651e8e46adc8b73"}], "stats": {"total": 735, "additions": 678, "deletions": 57}, "files": [{"sha": "008e0db21de44513f55996122e087f29224a67e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -1,3 +1,40 @@\n+2019-11-12  Maciej W. Rozycki  <macro@codesourcery.com>\n+\t    Frederik Harwath  <frederik@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tgcc/\n+\t* gimple.h (gf_mask): Add GF_OMP_TARGET_KIND_OACC_SERIAL\n+\tenumeration constant.\n+\t(is_gimple_omp_oacc): Handle GF_OMP_TARGET_KIND_OACC_SERIAL.\n+\t(is_gimple_omp_offloaded): Likewise.\n+\t* gimplify.c (omp_region_type): Add ORT_ACC_SERIAL enumeration\n+\tconstant.  Adjust the value of ORT_NONE accordingly.\n+\t(is_gimple_stmt): Handle OACC_SERIAL.\n+\t(oacc_default_clause): Handle ORT_ACC_SERIAL.\n+\t(gomp_needs_data_present): Likewise.\n+\t(gimplify_adjust_omp_clauses): Likewise.\n+\t(gimplify_omp_workshare): Handle OACC_SERIAL.\n+\t(gimplify_expr): Likewise.\n+\t* omp-expand.c (expand_omp_target):\n+\tHandle GF_OMP_TARGET_KIND_OACC_SERIAL.\n+\t(build_omp_regions_1, omp_make_gimple_edges): Likewise.\n+\t* omp-low.c (is_oacc_parallel): Rename function to...\n+\t(is_oacc_parallel_or_serial): ... this.\n+\tHandle GF_OMP_TARGET_KIND_OACC_SERIAL.\n+\t(scan_sharing_clauses): Adjust accordingly.\n+\t(scan_omp_for): Likewise.\n+\t(lower_oacc_head_mark): Likewise.\n+\t(convert_from_firstprivate_int): Likewise.\n+\t(lower_omp_target): Likewise.\n+\t(check_omp_nesting_restrictions): Handle\n+\tGF_OMP_TARGET_KIND_OACC_SERIAL.\n+\t(lower_oacc_reductions): Likewise.\n+\t(lower_omp_target): Likewise.\n+\t* tree.def (OACC_SERIAL): New tree code.\n+\t* tree-pretty-print.c (dump_generic_node): Handle OACC_SERIAL.\n+\n+\t* doc/generic.texi (OpenACC): Document OACC_SERIAL.\n+\n 2019-11-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/92449"}, {"sha": "3af2c111198177cd63ff92e394b9017bed2bd457", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -1,3 +1,11 @@\n+2019-11-12  Maciej W. Rozycki  <macro@codesourcery.com>\n+\t    Frederik Harwath  <frederik@codesourcery.com>\n+\n+\tgcc/c-family/\n+\t* c-pragma.h (pragma_kind): Add PRAGMA_OACC_SERIAL enumeration\n+\tconstant.\n+\t* c-pragma.c (oacc_pragmas): Add \"serial\" entry.\n+\n 2019-11-08  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* c-common.h (gnu_vector_type_p): New function."}, {"sha": "158154ec1294a6d27c565cae9522199fc7ea45e6", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -1291,6 +1291,7 @@ static const struct omp_pragma_def oacc_pragmas[] = {\n   { \"loop\", PRAGMA_OACC_LOOP },\n   { \"parallel\", PRAGMA_OACC_PARALLEL },\n   { \"routine\", PRAGMA_OACC_ROUTINE },\n+  { \"serial\", PRAGMA_OACC_SERIAL },\n   { \"update\", PRAGMA_OACC_UPDATE },\n   { \"wait\", PRAGMA_OACC_WAIT }\n };"}, {"sha": "bfe681bb430aa7774852d2c42f16beea965d688d", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -38,6 +38,7 @@ enum pragma_kind {\n   PRAGMA_OACC_LOOP,\n   PRAGMA_OACC_PARALLEL,\n   PRAGMA_OACC_ROUTINE,\n+  PRAGMA_OACC_SERIAL,\n   PRAGMA_OACC_UPDATE,\n   PRAGMA_OACC_WAIT,\n "}, {"sha": "a7d86a20c746b1591845d68b11722189cf3b4b37", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -1,3 +1,13 @@\n+2019-11-12  Maciej W. Rozycki  <macro@codesourcery.com>\n+\t    Frederik Harwath  <frederik@codesourcery.com>\n+\n+\tgcc/c/\n+\t* c-parser.c (OACC_SERIAL_CLAUSE_MASK): New macro.\n+\t(c_parser_oacc_kernels_parallel): Rename function to...\n+\t(c_parser_oacc_compute): ... this.  Handle PRAGMA_OACC_SERIAL.\n+\t(c_parser_omp_construct): Update accordingly.\n+\n+\n 2019-11-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_translation_unit): Diagnose declare target"}, {"sha": "8d7ecf400a72e02d9a5a8571a825ed3fae7a0cf8", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -16280,6 +16280,11 @@ c_parser_oacc_loop (location_t loc, c_parser *parser, char *p_name,\n    # pragma acc parallel oacc-parallel-clause[optseq] new-line\n      structured-block\n \n+   OpenACC 2.6:\n+\n+   # pragma acc serial oacc-serial-clause[optseq] new-line\n+     structured-block\n+\n    LOC is the location of the #pragma token.\n */\n \n@@ -16316,10 +16321,24 @@ c_parser_oacc_loop (location_t loc, c_parser *parser, char *p_name,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_VECTOR_LENGTH)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WAIT) )\n \n+#define OACC_SERIAL_CLAUSE_MASK\t\t\t\t\t\\\n+\t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_ASYNC)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPY)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYIN)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYOUT)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_CREATE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEFAULT)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRIVATE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_FIRSTPRIVATE)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_REDUCTION)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WAIT) )\n+\n static tree\n-c_parser_oacc_kernels_parallel (location_t loc, c_parser *parser,\n-\t\t\t\tenum pragma_kind p_kind, char *p_name,\n-\t\t\t\tbool *if_p)\n+c_parser_oacc_compute (location_t loc, c_parser *parser,\n+\t\t       enum pragma_kind p_kind, char *p_name, bool *if_p)\n {\n   omp_clause_mask mask;\n   enum tree_code code;\n@@ -16335,6 +16354,11 @@ c_parser_oacc_kernels_parallel (location_t loc, c_parser *parser,\n       mask = OACC_PARALLEL_CLAUSE_MASK;\n       code = OACC_PARALLEL;\n       break;\n+    case PRAGMA_OACC_SERIAL:\n+      strcat (p_name, \" serial\");\n+      mask = OACC_SERIAL_CLAUSE_MASK;\n+      code = OACC_SERIAL;\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -20798,9 +20822,9 @@ c_parser_omp_construct (c_parser *parser, bool *if_p)\n       break;\n     case PRAGMA_OACC_KERNELS:\n     case PRAGMA_OACC_PARALLEL:\n+    case PRAGMA_OACC_SERIAL:\n       strcpy (p_name, \"#pragma acc\");\n-      stmt = c_parser_oacc_kernels_parallel (loc, parser, p_kind, p_name,\n-\t\t\t\t\t     if_p);\n+      stmt = c_parser_oacc_compute (loc, parser, p_kind, p_name, if_p);\n       break;\n     case PRAGMA_OACC_LOOP:\n       strcpy (p_name, \"#pragma acc\");"}, {"sha": "972ef791fa7b9380373dfd69eb09b14cd6591463", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -1,3 +1,17 @@\n+2019-11-12  Maciej W. Rozycki  <macro@codesourcery.com>\n+\t    Frederik Harwath  <frederik@codesourcery.com>\n+\n+\tgcc/cp/\n+\t* constexpr.c (potential_constant_expression_1): Handle\n+\tOACC_SERIAL.\n+\t* parser.c (OACC_SERIAL_CLAUSE_MASK): New macro.\n+\t(cp_parser_oacc_kernels_parallel): Rename function to...\n+\t(cp_parser_oacc_compute): ... this.  Handle PRAGMA_OACC_SERIAL.\n+\t(cp_parser_omp_construct): Update accordingly.\n+\t(cp_parser_pragma): Handle PRAGMA_OACC_SERIAL.  Fix alphabetic\n+\torder.\n+\t* pt.c (tsubst_expr): Handle OACC_SERIAL.\n+\n 2019-11-11  Jason Merrill  <jason@redhat.com>\n \n \tImplement P1946R0, Allow defaulting comparisons by value."}, {"sha": "8c79b0484fce444fd1341cd7c0cb9e917bcf7674", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -6986,6 +6986,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n     case OMP_DEPOBJ:\n     case OACC_PARALLEL:\n     case OACC_KERNELS:\n+    case OACC_SERIAL:\n     case OACC_DATA:\n     case OACC_HOST_DATA:\n     case OACC_LOOP:"}, {"sha": "f2fa7e83952f8c2ca7ba4f276332f5390e912c16", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -40175,6 +40175,10 @@ cp_parser_oacc_loop (cp_parser *parser, cp_token *pragma_tok, char *p_name,\n \n    # pragma acc parallel oacc-parallel-clause[optseq] new-line\n      structured-block\n+\n+   OpenACC 2.6:\n+\n+   # pragma acc serial oacc-serial-clause[optseq] new-line\n */\n \n #define OACC_KERNELS_CLAUSE_MASK\t\t\t\t\t\\\n@@ -40210,9 +40214,24 @@ cp_parser_oacc_loop (cp_parser *parser, cp_token *pragma_tok, char *p_name,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_VECTOR_LENGTH)       \\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WAIT) )\n \n+#define OACC_SERIAL_CLAUSE_MASK\t\t\t\t\t\t\\\n+\t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_ASYNC)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPY)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYIN)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYOUT)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_CREATE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEFAULT)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRIVATE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_FIRSTPRIVATE)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_REDUCTION)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WAIT) )\n+\n static tree\n-cp_parser_oacc_kernels_parallel (cp_parser *parser, cp_token *pragma_tok,\n-\t\t\t\t char *p_name, bool *if_p)\n+cp_parser_oacc_compute (cp_parser *parser, cp_token *pragma_tok,\n+\t\t\tchar *p_name, bool *if_p)\n {\n   omp_clause_mask mask;\n   enum tree_code code;\n@@ -40228,6 +40247,11 @@ cp_parser_oacc_kernels_parallel (cp_parser *parser, cp_token *pragma_tok,\n       mask = OACC_PARALLEL_CLAUSE_MASK;\n       code = OACC_PARALLEL;\n       break;\n+    case PRAGMA_OACC_SERIAL:\n+      strcat (p_name, \" serial\");\n+      mask = OACC_SERIAL_CLAUSE_MASK;\n+      code = OACC_SERIAL;\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -42047,9 +42071,9 @@ cp_parser_omp_construct (cp_parser *parser, cp_token *pragma_tok, bool *if_p)\n       break;\n     case PRAGMA_OACC_KERNELS:\n     case PRAGMA_OACC_PARALLEL:\n+    case PRAGMA_OACC_SERIAL:\n       strcpy (p_name, \"#pragma acc\");\n-      stmt = cp_parser_oacc_kernels_parallel (parser, pragma_tok, p_name,\n-\t\t\t\t\t      if_p);\n+      stmt = cp_parser_oacc_compute (parser, pragma_tok, p_name, if_p);\n       break;\n     case PRAGMA_OACC_LOOP:\n       strcpy (p_name, \"#pragma acc\");\n@@ -42716,8 +42740,9 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context, bool *if_p)\n     case PRAGMA_OACC_DATA:\n     case PRAGMA_OACC_HOST_DATA:\n     case PRAGMA_OACC_KERNELS:\n-    case PRAGMA_OACC_PARALLEL:\n     case PRAGMA_OACC_LOOP:\n+    case PRAGMA_OACC_PARALLEL:\n+    case PRAGMA_OACC_SERIAL:\n     case PRAGMA_OMP_ATOMIC:\n     case PRAGMA_OMP_CRITICAL:\n     case PRAGMA_OMP_DISTRIBUTE:"}, {"sha": "5a0efaa86c8b1c1217434d3d542e52aa7d761939", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -17991,6 +17991,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \n     case OACC_KERNELS:\n     case OACC_PARALLEL:\n+    case OACC_SERIAL:\n       tmp = tsubst_omp_clauses (OMP_CLAUSES (t), C_ORT_ACC, args, complain,\n \t\t\t\tin_decl);\n       stmt = begin_omp_parallel ();"}, {"sha": "badaaec389795fbcf5a6b90e830888f2cb25c5e1", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -2388,6 +2388,7 @@ compilation.\n @tindex OACC_KERNELS\n @tindex OACC_LOOP\n @tindex OACC_PARALLEL\n+@tindex OACC_SERIAL\n @tindex OACC_UPDATE\n \n All the statements starting with @code{OACC_} represent directives and\n@@ -2432,6 +2433,10 @@ See the description of the @code{OMP_FOR} code.\n \n Represents @code{#pragma acc parallel [clause1 @dots{} clauseN]}.\n \n+@item OACC_SERIAL\n+\n+Represents @code{#pragma acc serial [clause1 @dots{} clauseN]}.\n+\n @item OACC_UPDATE\n \n Represents @code{#pragma acc update [clause1 @dots{} clauseN]}."}, {"sha": "d92a6ad248042967aeaf9948e81bdb233948a2ac", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -1,3 +1,46 @@\n+2019-11-12  Maciej W. Rozycki  <macro@codesourcery.com>\n+\t    Frederik Harwath  <frederik@codesourcery.com>\n+\n+\tgcc/fortran/\n+\t* gfortran.h (gfc_statement): Add ST_OACC_SERIAL_LOOP,\n+\tST_OACC_END_SERIAL_LOOP, ST_OACC_SERIAL and ST_OACC_END_SERIAL\n+\tenumeration constants.\n+\t(gfc_exec_op): Add EXEC_OACC_SERIAL_LOOP and EXEC_OACC_SERIAL\n+\tenumeration constants.\n+\t* match.h (gfc_match_oacc_serial): New prototype.\n+\t(gfc_match_oacc_serial_loop): Likewise.\n+\t* dump-parse-tree.c (show_omp_node, show_code_node): Handle\n+\tEXEC_OACC_SERIAL_LOOP and EXEC_OACC_SERIAL.\n+\t* match.c (match_exit_cycle): Handle EXEC_OACC_SERIAL_LOOP.\n+\t* openmp.c (OACC_SERIAL_CLAUSES): New macro.\n+\t(gfc_match_oacc_serial_loop): New function.\n+\t(gfc_match_oacc_serial): Likewise.\n+\t(oacc_is_loop): Handle EXEC_OACC_SERIAL_LOOP.\n+\t(resolve_omp_clauses): Handle EXEC_OACC_SERIAL.\n+\t(oacc_code_to_statement): Handle EXEC_OACC_SERIAL and\n+\tEXEC_OACC_SERIAL_LOOP.\n+\t(gfc_resolve_oacc_directive): Likewise.\n+\t* parse.c (decode_oacc_directive) <'s'>: Add case for \"serial\"\n+\tand \"serial loop\".\n+\t(next_statement): Handle ST_OACC_SERIAL_LOOP and ST_OACC_SERIAL.\n+\t(gfc_ascii_statement): Likewise.  Handle ST_OACC_END_SERIAL_LOOP\n+\tand ST_OACC_END_SERIAL.\n+\t(parse_oacc_structured_block): Handle ST_OACC_SERIAL.\n+\t(parse_oacc_loop): Handle ST_OACC_SERIAL_LOOP and\n+\tST_OACC_END_SERIAL_LOOP.\n+\t(parse_executable): Handle ST_OACC_SERIAL_LOOP and\n+\tST_OACC_SERIAL.\n+\t(is_oacc): Handle EXEC_OACC_SERIAL_LOOP and EXEC_OACC_SERIAL.\n+\t* resolve.c (gfc_resolve_blocks, gfc_resolve_code): Likewise.\n+\t* st.c (gfc_free_statement): Likewise.\n+\t* trans-openmp.c (gfc_trans_oacc_construct): Handle\n+\tEXEC_OACC_SERIAL.\n+\t(gfc_trans_oacc_combined_directive): Handle\n+\tEXEC_OACC_SERIAL_LOOP.\n+\t(gfc_trans_oacc_directive): Handle EXEC_OACC_SERIAL_LOOP and\n+\tEXEC_OACC_SERIAL.\n+\t* trans.c (trans_code): Likewise.\n+\n 2019-11-11  Janne Blomqvist  <jb@gcc.gnu.org>\n \n         PR fortran/91828"}, {"sha": "253fe15b201def862e59138b242ed6ada0bafcb4", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -1654,6 +1654,8 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OACC_PARALLEL: name = \"PARALLEL\"; is_oacc = true; break;\n     case EXEC_OACC_KERNELS_LOOP: name = \"KERNELS LOOP\"; is_oacc = true; break;\n     case EXEC_OACC_KERNELS: name = \"KERNELS\"; is_oacc = true; break;\n+    case EXEC_OACC_SERIAL_LOOP: name = \"SERIAL LOOP\"; is_oacc = true; break;\n+    case EXEC_OACC_SERIAL: name = \"SERIAL\"; is_oacc = true; break;\n     case EXEC_OACC_DATA: name = \"DATA\"; is_oacc = true; break;\n     case EXEC_OACC_HOST_DATA: name = \"HOST_DATA\"; is_oacc = true; break;\n     case EXEC_OACC_LOOP: name = \"LOOP\"; is_oacc = true; break;\n@@ -1729,6 +1731,8 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OACC_PARALLEL:\n     case EXEC_OACC_KERNELS_LOOP:\n     case EXEC_OACC_KERNELS:\n+    case EXEC_OACC_SERIAL_LOOP:\n+    case EXEC_OACC_SERIAL:\n     case EXEC_OACC_DATA:\n     case EXEC_OACC_HOST_DATA:\n     case EXEC_OACC_LOOP:\n@@ -2918,6 +2922,8 @@ show_code_node (int level, gfc_code *c)\n     case EXEC_OACC_PARALLEL:\n     case EXEC_OACC_KERNELS_LOOP:\n     case EXEC_OACC_KERNELS:\n+    case EXEC_OACC_SERIAL_LOOP:\n+    case EXEC_OACC_SERIAL:\n     case EXEC_OACC_DATA:\n     case EXEC_OACC_HOST_DATA:\n     case EXEC_OACC_LOOP:"}, {"sha": "e962db59bc598779d6a4ca3be05c01ad4c816f3d", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -223,7 +223,8 @@ enum gfc_statement\n   ST_OACC_END_DATA, ST_OACC_HOST_DATA, ST_OACC_END_HOST_DATA, ST_OACC_LOOP,\n   ST_OACC_END_LOOP, ST_OACC_DECLARE, ST_OACC_UPDATE, ST_OACC_WAIT,\n   ST_OACC_CACHE, ST_OACC_KERNELS_LOOP, ST_OACC_END_KERNELS_LOOP,\n-  ST_OACC_ENTER_DATA, ST_OACC_EXIT_DATA, ST_OACC_ROUTINE,\n+  ST_OACC_SERIAL_LOOP, ST_OACC_END_SERIAL_LOOP, ST_OACC_SERIAL,\n+  ST_OACC_END_SERIAL, ST_OACC_ENTER_DATA, ST_OACC_EXIT_DATA, ST_OACC_ROUTINE,\n   ST_OACC_ATOMIC, ST_OACC_END_ATOMIC,\n   ST_OMP_ATOMIC, ST_OMP_BARRIER, ST_OMP_CRITICAL, ST_OMP_END_ATOMIC,\n   ST_OMP_END_CRITICAL, ST_OMP_END_DO, ST_OMP_END_MASTER, ST_OMP_END_ORDERED,\n@@ -2572,11 +2573,11 @@ enum gfc_exec_op\n   EXEC_BACKSPACE, EXEC_ENDFILE, EXEC_INQUIRE, EXEC_REWIND, EXEC_FLUSH,\n   EXEC_FORM_TEAM, EXEC_CHANGE_TEAM, EXEC_END_TEAM, EXEC_SYNC_TEAM,\n   EXEC_LOCK, EXEC_UNLOCK, EXEC_EVENT_POST, EXEC_EVENT_WAIT, EXEC_FAIL_IMAGE,\n-  EXEC_OACC_KERNELS_LOOP, EXEC_OACC_PARALLEL_LOOP, EXEC_OACC_ROUTINE,\n-  EXEC_OACC_PARALLEL, EXEC_OACC_KERNELS, EXEC_OACC_DATA, EXEC_OACC_HOST_DATA,\n-  EXEC_OACC_LOOP, EXEC_OACC_UPDATE, EXEC_OACC_WAIT, EXEC_OACC_CACHE,\n-  EXEC_OACC_ENTER_DATA, EXEC_OACC_EXIT_DATA, EXEC_OACC_ATOMIC,\n-  EXEC_OACC_DECLARE,\n+  EXEC_OACC_KERNELS_LOOP, EXEC_OACC_PARALLEL_LOOP, EXEC_OACC_SERIAL_LOOP,\n+  EXEC_OACC_ROUTINE, EXEC_OACC_PARALLEL, EXEC_OACC_KERNELS, EXEC_OACC_SERIAL,\n+  EXEC_OACC_DATA, EXEC_OACC_HOST_DATA, EXEC_OACC_LOOP, EXEC_OACC_UPDATE,\n+  EXEC_OACC_WAIT, EXEC_OACC_CACHE, EXEC_OACC_ENTER_DATA, EXEC_OACC_EXIT_DATA,\n+  EXEC_OACC_ATOMIC, EXEC_OACC_DECLARE,\n   EXEC_OMP_CRITICAL, EXEC_OMP_DO, EXEC_OMP_FLUSH, EXEC_OMP_MASTER,\n   EXEC_OMP_ORDERED, EXEC_OMP_PARALLEL, EXEC_OMP_PARALLEL_DO,\n   EXEC_OMP_PARALLEL_SECTIONS, EXEC_OMP_PARALLEL_WORKSHARE,"}, {"sha": "b5945049de550ba61af48842a248a31ab7555964", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -2860,7 +2860,8 @@ match_exit_cycle (gfc_statement st, gfc_exec_op op)\n       && o != NULL\n       && o->state == COMP_OMP_STRUCTURED_BLOCK\n       && (o->head->op == EXEC_OACC_LOOP\n-\t  || o->head->op == EXEC_OACC_PARALLEL_LOOP))\n+\t  || o->head->op == EXEC_OACC_PARALLEL_LOOP\n+\t  || o->head->op == EXEC_OACC_SERIAL_LOOP))\n     {\n       int collapse = 1;\n       gcc_assert (o->head->next != NULL"}, {"sha": "7f3d356cbe495d14f422c5661e32b7ccb82530cf", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -146,6 +146,8 @@ match gfc_match_oacc_kernels (void);\n match gfc_match_oacc_kernels_loop (void);\n match gfc_match_oacc_parallel (void);\n match gfc_match_oacc_parallel_loop (void);\n+match gfc_match_oacc_serial (void);\n+match gfc_match_oacc_serial_loop (void);\n match gfc_match_oacc_enter_data (void);\n match gfc_match_oacc_exit_data (void);\n match gfc_match_oacc_routine (void);"}, {"sha": "dc0521b40f0bd4723a3b252591262dd47c305b6f", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -1964,6 +1964,12 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n    | OMP_CLAUSE_COPY | OMP_CLAUSE_COPYIN | OMP_CLAUSE_COPYOUT\t\t      \\\n    | OMP_CLAUSE_CREATE | OMP_CLAUSE_PRESENT | OMP_CLAUSE_DEFAULT\t      \\\n    | OMP_CLAUSE_WAIT)\n+#define OACC_SERIAL_CLAUSES \\\n+  (omp_mask (OMP_CLAUSE_IF) | OMP_CLAUSE_ASYNC | OMP_CLAUSE_REDUCTION\t      \\\n+   | OMP_CLAUSE_COPY | OMP_CLAUSE_COPYIN | OMP_CLAUSE_COPYOUT\t\t      \\\n+   | OMP_CLAUSE_CREATE | OMP_CLAUSE_PRESENT | OMP_CLAUSE_DEVICEPTR\t      \\\n+   | OMP_CLAUSE_PRIVATE | OMP_CLAUSE_FIRSTPRIVATE | OMP_CLAUSE_DEFAULT\t      \\\n+   | OMP_CLAUSE_WAIT)\n #define OACC_DATA_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_IF) | OMP_CLAUSE_DEVICEPTR  | OMP_CLAUSE_COPY\t      \\\n    | OMP_CLAUSE_COPYIN | OMP_CLAUSE_COPYOUT | OMP_CLAUSE_CREATE\t\t      \\\n@@ -1977,6 +1983,8 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n   (OACC_LOOP_CLAUSES | OACC_PARALLEL_CLAUSES)\n #define OACC_KERNELS_LOOP_CLAUSES \\\n   (OACC_LOOP_CLAUSES | OACC_KERNELS_CLAUSES)\n+#define OACC_SERIAL_LOOP_CLAUSES \\\n+  (OACC_LOOP_CLAUSES | OACC_SERIAL_CLAUSES)\n #define OACC_HOST_DATA_CLAUSES omp_mask (OMP_CLAUSE_USE_DEVICE)\n #define OACC_DECLARE_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_COPY) | OMP_CLAUSE_COPYIN | OMP_CLAUSE_COPYOUT\t      \\\n@@ -2038,6 +2046,20 @@ gfc_match_oacc_kernels (void)\n }\n \n \n+match\n+gfc_match_oacc_serial_loop (void)\n+{\n+  return match_acc (EXEC_OACC_SERIAL_LOOP, OACC_SERIAL_LOOP_CLAUSES);\n+}\n+\n+\n+match\n+gfc_match_oacc_serial (void)\n+{\n+  return match_acc (EXEC_OACC_SERIAL, OACC_SERIAL_CLAUSES);\n+}\n+\n+\n match\n gfc_match_oacc_data (void)\n {\n@@ -3783,6 +3805,7 @@ oacc_is_loop (gfc_code *code)\n {\n   return code->op == EXEC_OACC_PARALLEL_LOOP\n \t || code->op == EXEC_OACC_KERNELS_LOOP\n+\t || code->op == EXEC_OACC_SERIAL_LOOP\n \t || code->op == EXEC_OACC_LOOP;\n }\n \n@@ -4626,7 +4649,9 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\t\t\t n->sym->name, name, &n->where);\n \t\t  }\n \t\tif (code\n-\t\t    && (oacc_is_loop (code) || code->op == EXEC_OACC_PARALLEL))\n+\t\t    && (oacc_is_loop (code)\n+\t\t\t|| code->op == EXEC_OACC_PARALLEL\n+\t\t\t|| code->op == EXEC_OACC_SERIAL))\n \t\t  check_array_not_assumed (n->sym, n->where, name);\n \t\telse if (n->sym->as && n->sym->as->type == AS_ASSUMED_SIZE)\n \t\t  gfc_error (\"Assumed size array %qs in %s clause at %L\",\n@@ -5818,6 +5843,8 @@ oacc_code_to_statement (gfc_code *code)\n       return ST_OACC_PARALLEL;\n     case EXEC_OACC_KERNELS:\n       return ST_OACC_KERNELS;\n+    case EXEC_OACC_SERIAL:\n+      return ST_OACC_SERIAL;\n     case EXEC_OACC_DATA:\n       return ST_OACC_DATA;\n     case EXEC_OACC_HOST_DATA:\n@@ -5826,6 +5853,8 @@ oacc_code_to_statement (gfc_code *code)\n       return ST_OACC_PARALLEL_LOOP;\n     case EXEC_OACC_KERNELS_LOOP:\n       return ST_OACC_KERNELS_LOOP;\n+    case EXEC_OACC_SERIAL_LOOP:\n+      return ST_OACC_SERIAL_LOOP;\n     case EXEC_OACC_LOOP:\n       return ST_OACC_LOOP;\n     case EXEC_OACC_ATOMIC:\n@@ -6163,6 +6192,7 @@ gfc_resolve_oacc_directive (gfc_code *code, gfc_namespace *ns ATTRIBUTE_UNUSED)\n     {\n     case EXEC_OACC_PARALLEL:\n     case EXEC_OACC_KERNELS:\n+    case EXEC_OACC_SERIAL:\n     case EXEC_OACC_DATA:\n     case EXEC_OACC_HOST_DATA:\n     case EXEC_OACC_UPDATE:\n@@ -6174,6 +6204,7 @@ gfc_resolve_oacc_directive (gfc_code *code, gfc_namespace *ns ATTRIBUTE_UNUSED)\n       break;\n     case EXEC_OACC_PARALLEL_LOOP:\n     case EXEC_OACC_KERNELS_LOOP:\n+    case EXEC_OACC_SERIAL_LOOP:\n     case EXEC_OACC_LOOP:\n       resolve_oacc_loop (code);\n       break;"}, {"sha": "e44cc6971983f60333d9d8ac51b6e8924d27caaa", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -683,6 +683,9 @@ decode_oacc_directive (void)\n       matcha (\"end parallel loop\", gfc_match_omp_eos_error,\n \t      ST_OACC_END_PARALLEL_LOOP);\n       matcha (\"end parallel\", gfc_match_omp_eos_error, ST_OACC_END_PARALLEL);\n+      matcha (\"end serial loop\", gfc_match_omp_eos_error,\n+\t      ST_OACC_END_SERIAL_LOOP);\n+      matcha (\"end serial\", gfc_match_omp_eos_error, ST_OACC_END_SERIAL);\n       matcha (\"enter data\", gfc_match_oacc_enter_data, ST_OACC_ENTER_DATA);\n       matcha (\"exit data\", gfc_match_oacc_exit_data, ST_OACC_EXIT_DATA);\n       break;\n@@ -705,6 +708,10 @@ decode_oacc_directive (void)\n     case 'r':\n       match (\"routine\", gfc_match_oacc_routine, ST_OACC_ROUTINE);\n       break;\n+    case 's':\n+      matcha (\"serial loop\", gfc_match_oacc_serial_loop, ST_OACC_SERIAL_LOOP);\n+      matcha (\"serial\", gfc_match_oacc_serial, ST_OACC_SERIAL);\n+      break;\n     case 'u':\n       matcha (\"update\", gfc_match_oacc_update, ST_OACC_UPDATE);\n       break;\n@@ -1583,7 +1590,8 @@ next_statement (void)\n   case ST_CRITICAL: \\\n   case ST_OACC_PARALLEL_LOOP: case ST_OACC_PARALLEL: case ST_OACC_KERNELS: \\\n   case ST_OACC_DATA: case ST_OACC_HOST_DATA: case ST_OACC_LOOP: \\\n-  case ST_OACC_KERNELS_LOOP: case ST_OACC_ATOMIC\n+  case ST_OACC_KERNELS_LOOP: case ST_OACC_SERIAL_LOOP: case ST_OACC_SERIAL: \\\n+  case ST_OACC_ATOMIC\n \n /* Declaration statements */\n \n@@ -2157,6 +2165,18 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OACC_END_KERNELS_LOOP:\n       p = \"!$ACC END KERNELS LOOP\";\n       break;\n+    case ST_OACC_SERIAL_LOOP:\n+      p = \"!$ACC SERIAL LOOP\";\n+      break;\n+    case ST_OACC_END_SERIAL_LOOP:\n+      p = \"!$ACC END SERIAL LOOP\";\n+      break;\n+    case ST_OACC_SERIAL:\n+      p = \"!$ACC SERIAL\";\n+      break;\n+    case ST_OACC_END_SERIAL:\n+      p = \"!$ACC END SERIAL\";\n+      break;\n     case ST_OACC_DATA:\n       p = \"!$ACC DATA\";\n       break;\n@@ -5065,6 +5085,9 @@ parse_oacc_structured_block (gfc_statement acc_st)\n     case ST_OACC_KERNELS:\n       acc_end_st = ST_OACC_END_KERNELS;\n       break;\n+    case ST_OACC_SERIAL:\n+      acc_end_st = ST_OACC_END_SERIAL;\n+      break;\n     case ST_OACC_DATA:\n       acc_end_st = ST_OACC_END_DATA;\n       break;\n@@ -5096,7 +5119,7 @@ parse_oacc_structured_block (gfc_statement acc_st)\n   pop_state ();\n }\n \n-/* Parse the statements of OpenACC loop/parallel loop/kernels loop.  */\n+/* Parse the statements of OpenACC 'loop', or combined compute 'loop'.  */\n \n static gfc_statement\n parse_oacc_loop (gfc_statement acc_st)\n@@ -5149,6 +5172,7 @@ parse_oacc_loop (gfc_statement acc_st)\n     gfc_warning (0, \"Redundant !$ACC END LOOP at %C\");\n   if ((acc_st == ST_OACC_PARALLEL_LOOP && st == ST_OACC_END_PARALLEL_LOOP) ||\n       (acc_st == ST_OACC_KERNELS_LOOP && st == ST_OACC_END_KERNELS_LOOP) ||\n+      (acc_st == ST_OACC_SERIAL_LOOP && st == ST_OACC_END_SERIAL_LOOP) ||\n       (acc_st == ST_OACC_LOOP && st == ST_OACC_END_LOOP))\n     {\n       gcc_assert (new_st.op == EXEC_NOP);\n@@ -5488,6 +5512,7 @@ parse_executable (gfc_statement st)\n \n \tcase ST_OACC_PARALLEL_LOOP:\n \tcase ST_OACC_KERNELS_LOOP:\n+\tcase ST_OACC_SERIAL_LOOP:\n \tcase ST_OACC_LOOP:\n \t  st = parse_oacc_loop (st);\n \t  if (st == ST_IMPLIED_ENDDO)\n@@ -5496,6 +5521,7 @@ parse_executable (gfc_statement st)\n \n \tcase ST_OACC_PARALLEL:\n \tcase ST_OACC_KERNELS:\n+\tcase ST_OACC_SERIAL:\n \tcase ST_OACC_DATA:\n \tcase ST_OACC_HOST_DATA:\n \t  parse_oacc_structured_block (st);\n@@ -6544,6 +6570,8 @@ is_oacc (gfc_state_data *sd)\n     case EXEC_OACC_PARALLEL:\n     case EXEC_OACC_KERNELS_LOOP:\n     case EXEC_OACC_KERNELS:\n+    case EXEC_OACC_SERIAL_LOOP:\n+    case EXEC_OACC_SERIAL:\n     case EXEC_OACC_DATA:\n     case EXEC_OACC_HOST_DATA:\n     case EXEC_OACC_LOOP:"}, {"sha": "2371a9e201f4b48205bf01b954446ed1ca8e9a66", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -10576,6 +10576,8 @@ gfc_resolve_blocks (gfc_code *b, gfc_namespace *ns)\n \tcase EXEC_OACC_PARALLEL:\n \tcase EXEC_OACC_KERNELS_LOOP:\n \tcase EXEC_OACC_KERNELS:\n+\tcase EXEC_OACC_SERIAL_LOOP:\n+\tcase EXEC_OACC_SERIAL:\n \tcase EXEC_OACC_DATA:\n \tcase EXEC_OACC_HOST_DATA:\n \tcase EXEC_OACC_LOOP:\n@@ -11539,6 +11541,8 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \t    case EXEC_OACC_PARALLEL:\n \t    case EXEC_OACC_KERNELS_LOOP:\n \t    case EXEC_OACC_KERNELS:\n+\t    case EXEC_OACC_SERIAL_LOOP:\n+\t    case EXEC_OACC_SERIAL:\n \t    case EXEC_OACC_DATA:\n \t    case EXEC_OACC_HOST_DATA:\n \t    case EXEC_OACC_LOOP:\n@@ -11952,6 +11956,8 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \tcase EXEC_OACC_PARALLEL:\n \tcase EXEC_OACC_KERNELS_LOOP:\n \tcase EXEC_OACC_KERNELS:\n+\tcase EXEC_OACC_SERIAL_LOOP:\n+\tcase EXEC_OACC_SERIAL:\n \tcase EXEC_OACC_DATA:\n \tcase EXEC_OACC_HOST_DATA:\n \tcase EXEC_OACC_LOOP:"}, {"sha": "12eed71e3a26d7d423a7624aa45e27d6ac2a3436", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -202,6 +202,8 @@ gfc_free_statement (gfc_code *p)\n     case EXEC_OACC_PARALLEL:\n     case EXEC_OACC_KERNELS_LOOP:\n     case EXEC_OACC_KERNELS:\n+    case EXEC_OACC_SERIAL_LOOP:\n+    case EXEC_OACC_SERIAL:\n     case EXEC_OACC_DATA:\n     case EXEC_OACC_HOST_DATA:\n     case EXEC_OACC_LOOP:"}, {"sha": "d9dfcabc65ef0737391a39f954afe5220a0aa7f8", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -3193,8 +3193,9 @@ gfc_trans_omp_code (gfc_code *code, bool force_empty)\n   return stmt;\n }\n \n-/* Trans OpenACC directives. */\n-/* parallel, kernels, data and host_data. */\n+/* Translate OpenACC 'parallel', 'kernels', 'serial', 'data', 'host_data'\n+   construct. */\n+\n static tree\n gfc_trans_oacc_construct (gfc_code *code)\n {\n@@ -3210,6 +3211,9 @@ gfc_trans_oacc_construct (gfc_code *code)\n       case EXEC_OACC_KERNELS:\n \tconstruct_code = OACC_KERNELS;\n \tbreak;\n+      case EXEC_OACC_SERIAL:\n+\tconstruct_code = OACC_SERIAL;\n+\tbreak;\n       case EXEC_OACC_DATA:\n \tconstruct_code = OACC_DATA;\n \tbreak;\n@@ -4017,7 +4021,9 @@ gfc_trans_omp_do (gfc_code *code, gfc_exec_op op, stmtblock_t *pblock,\n   return gfc_finish_block (&block);\n }\n \n-/* parallel loop and kernels loop. */\n+/* Translate combined OpenACC 'parallel loop', 'kernels loop', 'serial loop'\n+   construct. */\n+\n static tree\n gfc_trans_oacc_combined_directive (gfc_code *code)\n {\n@@ -4035,6 +4041,9 @@ gfc_trans_oacc_combined_directive (gfc_code *code)\n       case EXEC_OACC_KERNELS_LOOP:\n \tconstruct_code = OACC_KERNELS;\n \tbreak;\n+      case EXEC_OACC_SERIAL_LOOP:\n+\tconstruct_code = OACC_SERIAL;\n+\tbreak;\n       default:\n \tgcc_unreachable ();\n     }\n@@ -5267,9 +5276,11 @@ gfc_trans_oacc_directive (gfc_code *code)\n     {\n     case EXEC_OACC_PARALLEL_LOOP:\n     case EXEC_OACC_KERNELS_LOOP:\n+    case EXEC_OACC_SERIAL_LOOP:\n       return gfc_trans_oacc_combined_directive (code);\n     case EXEC_OACC_PARALLEL:\n     case EXEC_OACC_KERNELS:\n+    case EXEC_OACC_SERIAL:\n     case EXEC_OACC_DATA:\n     case EXEC_OACC_HOST_DATA:\n       return gfc_trans_oacc_construct (code);"}, {"sha": "d9b278199b75d9cc59c5e081284cd257a12f0625", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -2137,6 +2137,8 @@ trans_code (gfc_code * code, tree cond)\n \tcase EXEC_OACC_KERNELS_LOOP:\n \tcase EXEC_OACC_PARALLEL:\n \tcase EXEC_OACC_PARALLEL_LOOP:\n+\tcase EXEC_OACC_SERIAL:\n+\tcase EXEC_OACC_SERIAL_LOOP:\n \tcase EXEC_OACC_ENTER_DATA:\n \tcase EXEC_OACC_EXIT_DATA:\n \tcase EXEC_OACC_ATOMIC:"}, {"sha": "f59cc2aa31880fbb5b8ab9abeae8b15cf4a0a145", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -1676,6 +1676,9 @@ dump_gimple_omp_target (pretty_printer *buffer, gomp_target *gs,\n     case GF_OMP_TARGET_KIND_OACC_PARALLEL:\n       kind = \" oacc_parallel\";\n       break;\n+    case GF_OMP_TARGET_KIND_OACC_SERIAL:\n+      kind = \" oacc_serial\";\n+      break;\n     case GF_OMP_TARGET_KIND_OACC_DATA:\n       kind = \" oacc_data\";\n       break;"}, {"sha": "38c11f41156d237c5d45de9b221f5162cddd73eb", "filename": "gcc/gimple.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fgimple.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fgimple.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.def?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -359,7 +359,7 @@ DEFGSCODE(GIMPLE_OMP_SECTIONS_SWITCH, \"gimple_omp_sections_switch\", GSS_BASE)\n DEFGSCODE(GIMPLE_OMP_SINGLE, \"gimple_omp_single\", GSS_OMP_SINGLE_LAYOUT)\n \n /* GIMPLE_OMP_TARGET <BODY, CLAUSES, CHILD_FN> represents\n-   #pragma acc {kernels,parallel,data,enter data,exit data,update}\n+   #pragma acc {kernels,parallel,serial,data,enter data,exit data,update}\n    #pragma omp target {,data,update}\n    BODY is the sequence of statements inside the construct\n    (NULL for some variants)."}, {"sha": "5a190b1714dc9ee7e9b0c15eec6d315d7a9685cb", "filename": "gcc/gimple.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -177,11 +177,12 @@ enum gf_mask {\n     GF_OMP_TARGET_KIND_EXIT_DATA = 4,\n     GF_OMP_TARGET_KIND_OACC_PARALLEL = 5,\n     GF_OMP_TARGET_KIND_OACC_KERNELS = 6,\n-    GF_OMP_TARGET_KIND_OACC_DATA = 7,\n-    GF_OMP_TARGET_KIND_OACC_UPDATE = 8,\n-    GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA = 9,\n-    GF_OMP_TARGET_KIND_OACC_DECLARE = 10,\n-    GF_OMP_TARGET_KIND_OACC_HOST_DATA = 11,\n+    GF_OMP_TARGET_KIND_OACC_SERIAL = 7,\n+    GF_OMP_TARGET_KIND_OACC_DATA = 8,\n+    GF_OMP_TARGET_KIND_OACC_UPDATE = 9,\n+    GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA = 10,\n+    GF_OMP_TARGET_KIND_OACC_DECLARE = 11,\n+    GF_OMP_TARGET_KIND_OACC_HOST_DATA = 12,\n     GF_OMP_TEAMS_GRID_PHONY\t= 1 << 0,\n     GF_OMP_TEAMS_HOST\t\t= 1 << 1,\n \n@@ -6476,6 +6477,7 @@ is_gimple_omp_oacc (const gimple *stmt)\n \t{\n \tcase GF_OMP_TARGET_KIND_OACC_PARALLEL:\n \tcase GF_OMP_TARGET_KIND_OACC_KERNELS:\n+\tcase GF_OMP_TARGET_KIND_OACC_SERIAL:\n \tcase GF_OMP_TARGET_KIND_OACC_DATA:\n \tcase GF_OMP_TARGET_KIND_OACC_UPDATE:\n \tcase GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n@@ -6505,6 +6507,7 @@ is_gimple_omp_offloaded (const gimple *stmt)\n \tcase GF_OMP_TARGET_KIND_REGION:\n \tcase GF_OMP_TARGET_KIND_OACC_PARALLEL:\n \tcase GF_OMP_TARGET_KIND_OACC_KERNELS:\n+\tcase GF_OMP_TARGET_KIND_OACC_SERIAL:\n \t  return true;\n \tdefault:\n \t  return false;"}, {"sha": "87a6405451416bc6998ca52a76394e568d1ef75d", "filename": "gcc/gimplify.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -161,6 +161,7 @@ enum omp_region_type\n   ORT_ACC_DATA\t= ORT_ACC | ORT_TARGET_DATA, /* Data construct.  */\n   ORT_ACC_PARALLEL = ORT_ACC | ORT_TARGET,  /* Parallel construct */\n   ORT_ACC_KERNELS  = ORT_ACC | ORT_TARGET | 2,  /* Kernels construct.  */\n+  ORT_ACC_SERIAL   = ORT_ACC | ORT_TARGET | 4,  /* Serial construct.  */\n   ORT_ACC_HOST_DATA = ORT_ACC | ORT_TARGET_DATA | 2,  /* Host data.  */\n \n   /* Dummy OpenMP region, used to disable expansion of\n@@ -5551,6 +5552,7 @@ is_gimple_stmt (tree t)\n     case STATEMENT_LIST:\n     case OACC_PARALLEL:\n     case OACC_KERNELS:\n+    case OACC_SERIAL:\n     case OACC_DATA:\n     case OACC_HOST_DATA:\n     case OACC_DECLARE:\n@@ -7289,7 +7291,8 @@ oacc_default_clause (struct gimplify_omp_ctx *ctx, tree decl, unsigned flags)\n       break;\n \n     case ORT_ACC_PARALLEL:\n-      rkind = \"parallel\";\n+    case ORT_ACC_SERIAL:\n+      rkind = ctx->region_type == ORT_ACC_PARALLEL ? \"parallel\" : \"serial\";\n \n       if (is_private)\n \tflags |= GOVD_FIRSTPRIVATE;\n@@ -10098,10 +10101,11 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \t      break;\n \t    }\n \t  decl = OMP_CLAUSE_DECL (c);\n-\t  /* Data clauses associated with acc parallel reductions must be\n+\t  /* Data clauses associated with reductions must be\n \t     compatible with present_or_copy.  Warn and adjust the clause\n \t     if that is not the case.  */\n-\t  if (ctx->region_type == ORT_ACC_PARALLEL)\n+\t  if (ctx->region_type == ORT_ACC_PARALLEL\n+\t      || ctx->region_type == ORT_ACC_SERIAL)\n \t    {\n \t      tree t = DECL_P (decl) ? decl : TREE_OPERAND (decl, 0);\n \t      n = NULL;\n@@ -10277,7 +10281,8 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \t  decl = OMP_CLAUSE_DECL (c);\n \t  /* OpenACC reductions need a present_or_copy data clause.\n \t     Add one if necessary.  Emit error when the reduction is private.  */\n-\t  if (ctx->region_type == ORT_ACC_PARALLEL)\n+\t  if (ctx->region_type == ORT_ACC_PARALLEL\n+\t      || ctx->region_type == ORT_ACC_SERIAL)\n \t    {\n \t      n = splay_tree_lookup (ctx->variables, (splay_tree_key) decl);\n \t      if (n->value & (GOVD_PRIVATE | GOVD_FIRSTPRIVATE))\n@@ -12529,6 +12534,9 @@ gimplify_omp_workshare (tree *expr_p, gimple_seq *pre_p)\n     case OACC_PARALLEL:\n       ort = ORT_ACC_PARALLEL;\n       break;\n+    case OACC_SERIAL:\n+      ort = ORT_ACC_SERIAL;\n+      break;\n     case OACC_DATA:\n       ort = ORT_ACC_DATA;\n       break;\n@@ -12612,6 +12620,10 @@ gimplify_omp_workshare (tree *expr_p, gimple_seq *pre_p)\n       stmt = gimple_build_omp_target (body, GF_OMP_TARGET_KIND_OACC_PARALLEL,\n \t\t\t\t      OMP_CLAUSES (expr));\n       break;\n+    case OACC_SERIAL:\n+      stmt = gimple_build_omp_target (body, GF_OMP_TARGET_KIND_OACC_SERIAL,\n+\t\t\t\t      OMP_CLAUSES (expr));\n+      break;\n     case OMP_SECTIONS:\n       stmt = gimple_build_omp_sections (body, OMP_CLAUSES (expr));\n       break;\n@@ -13870,6 +13882,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \tcase OACC_DATA:\n \tcase OACC_KERNELS:\n \tcase OACC_PARALLEL:\n+\tcase OACC_SERIAL:\n \tcase OMP_SECTIONS:\n \tcase OMP_SINGLE:\n \tcase OMP_TARGET:\n@@ -14286,6 +14299,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t  && code != EH_ELSE_EXPR\n \t\t  && code != OACC_PARALLEL\n \t\t  && code != OACC_KERNELS\n+\t\t  && code != OACC_SERIAL\n \t\t  && code != OACC_DATA\n \t\t  && code != OACC_HOST_DATA\n \t\t  && code != OACC_DECLARE"}, {"sha": "6f945011cf5ae8f77e855c7ea0ee0f0249eef557", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -7901,19 +7901,22 @@ expand_omp_target (struct omp_region *region)\n   gimple *stmt;\n   edge e;\n   bool offloaded, data_region;\n+  int target_kind;\n \n   entry_stmt = as_a <gomp_target *> (last_stmt (region->entry));\n+  target_kind = gimple_omp_target_kind (entry_stmt);\n   new_bb = region->entry;\n \n   offloaded = is_gimple_omp_offloaded (entry_stmt);\n-  switch (gimple_omp_target_kind (entry_stmt))\n+  switch (target_kind)\n     {\n     case GF_OMP_TARGET_KIND_REGION:\n     case GF_OMP_TARGET_KIND_UPDATE:\n     case GF_OMP_TARGET_KIND_ENTER_DATA:\n     case GF_OMP_TARGET_KIND_EXIT_DATA:\n     case GF_OMP_TARGET_KIND_OACC_PARALLEL:\n     case GF_OMP_TARGET_KIND_OACC_KERNELS:\n+    case GF_OMP_TARGET_KIND_OACC_SERIAL:\n     case GF_OMP_TARGET_KIND_OACC_UPDATE:\n     case GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n     case GF_OMP_TARGET_KIND_OACC_DECLARE:\n@@ -7944,16 +7947,28 @@ expand_omp_target (struct omp_region *region)\n   entry_bb = region->entry;\n   exit_bb = region->exit;\n \n-  if (gimple_omp_target_kind (entry_stmt) == GF_OMP_TARGET_KIND_OACC_KERNELS)\n+  switch (target_kind)\n     {\n+    case GF_OMP_TARGET_KIND_OACC_KERNELS:\n       mark_loops_in_oacc_kernels_region (region->entry, region->exit);\n \n-      /* Further down, both OpenACC kernels and OpenACC parallel constructs\n-\t will be mappted to BUILT_IN_GOACC_PARALLEL, and to distinguish the\n-\t two, there is an \"oacc kernels\" attribute set for OpenACC kernels.  */\n+      /* Further down, all OpenACC compute constructs will be mapped to\n+\t BUILT_IN_GOACC_PARALLEL, and to distinguish between them, there\n+\t is an \"oacc kernels\" attribute set for OpenACC kernels.  */\n       DECL_ATTRIBUTES (child_fn)\n \t= tree_cons (get_identifier (\"oacc kernels\"),\n \t\t     NULL_TREE, DECL_ATTRIBUTES (child_fn));\n+      break;\n+    case GF_OMP_TARGET_KIND_OACC_SERIAL:\n+      /* Further down, all OpenACC compute constructs will be mapped to\n+\t BUILT_IN_GOACC_PARALLEL, and to distinguish between them, there\n+\t is an \"oacc serial\" attribute set for OpenACC serial.  */\n+      DECL_ATTRIBUTES (child_fn)\n+\t= tree_cons (get_identifier (\"oacc serial\"),\n+\t\t     NULL_TREE, DECL_ATTRIBUTES (child_fn));\n+      break;\n+    default:\n+      break;\n     }\n \n   if (offloaded)\n@@ -8156,8 +8171,9 @@ expand_omp_target (struct omp_region *region)\n       start_ix = BUILT_IN_GOMP_TARGET_ENTER_EXIT_DATA;\n       flags_i |= GOMP_TARGET_FLAG_EXIT_DATA;\n       break;\n-    case GF_OMP_TARGET_KIND_OACC_KERNELS:\n     case GF_OMP_TARGET_KIND_OACC_PARALLEL:\n+    case GF_OMP_TARGET_KIND_OACC_KERNELS:\n+    case GF_OMP_TARGET_KIND_OACC_SERIAL:\n       start_ix = BUILT_IN_GOACC_PARALLEL;\n       break;\n     case GF_OMP_TARGET_KIND_OACC_DATA:\n@@ -8352,7 +8368,18 @@ expand_omp_target (struct omp_region *region)\n \targs.quick_push (get_target_arguments (&gsi, entry_stmt));\n       break;\n     case BUILT_IN_GOACC_PARALLEL:\n-      oacc_set_fn_attrib (child_fn, clauses, &args);\n+      if (lookup_attribute (\"oacc serial\", DECL_ATTRIBUTES (child_fn)) != NULL)\n+\t{\n+\t  tree dims = NULL_TREE;\n+\t  unsigned int ix;\n+\n+\t  /* For serial constructs we set all dimensions to 1.  */\n+\t  for (ix = GOMP_DIM_MAX; ix--;)\n+\t    dims = tree_cons (NULL_TREE, integer_one_node, dims);\n+\t  oacc_replace_fn_attrib (child_fn, dims);\n+\t}\n+      else\n+\toacc_set_fn_attrib (child_fn, clauses, &args);\n       tagging = true;\n       /* FALLTHRU */\n     case BUILT_IN_GOACC_ENTER_EXIT_DATA:\n@@ -8913,6 +8940,7 @@ build_omp_regions_1 (basic_block bb, struct omp_region *parent,\n \t\tcase GF_OMP_TARGET_KIND_DATA:\n \t\tcase GF_OMP_TARGET_KIND_OACC_PARALLEL:\n \t\tcase GF_OMP_TARGET_KIND_OACC_KERNELS:\n+\t\tcase GF_OMP_TARGET_KIND_OACC_SERIAL:\n \t\tcase GF_OMP_TARGET_KIND_OACC_DATA:\n \t\tcase GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n \t\t  break;\n@@ -9167,6 +9195,7 @@ omp_make_gimple_edges (basic_block bb, struct omp_region **region,\n \tcase GF_OMP_TARGET_KIND_DATA:\n \tcase GF_OMP_TARGET_KIND_OACC_PARALLEL:\n \tcase GF_OMP_TARGET_KIND_OACC_KERNELS:\n+\tcase GF_OMP_TARGET_KIND_OACC_SERIAL:\n \tcase GF_OMP_TARGET_KIND_OACC_DATA:\n \tcase GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n \t  break;"}, {"sha": "781e7cbf27a25e3d94c17aa0f7d84bb4f65d8052", "filename": "gcc/omp-low.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -185,15 +185,18 @@ static tree scan_omp_1_op (tree *, int *, void *);\n       *handled_ops_p = false; \\\n       break;\n \n-/* Return true if CTX corresponds to an oacc parallel region.  */\n+/* Return true if CTX corresponds to an OpenACC 'parallel' or 'serial'\n+   region.  */\n \n static bool\n-is_oacc_parallel (omp_context *ctx)\n+is_oacc_parallel_or_serial (omp_context *ctx)\n {\n   enum gimple_code outer_type = gimple_code (ctx->stmt);\n   return ((outer_type == GIMPLE_OMP_TARGET)\n-\t  && (gimple_omp_target_kind (ctx->stmt)\n-\t      == GF_OMP_TARGET_KIND_OACC_PARALLEL));\n+\t  && ((gimple_omp_target_kind (ctx->stmt)\n+\t       == GF_OMP_TARGET_KIND_OACC_PARALLEL)\n+\t      || (gimple_omp_target_kind (ctx->stmt)\n+\t\t  == GF_OMP_TARGET_KIND_OACC_SERIAL)));\n }\n \n /* Return true if CTX corresponds to an oacc kernels region.  */\n@@ -1149,7 +1152,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t  goto do_private;\n \n \tcase OMP_CLAUSE_REDUCTION:\n-\t  if (is_oacc_parallel (ctx) || is_oacc_kernels (ctx))\n+\t  if (is_oacc_parallel_or_serial (ctx) || is_oacc_kernels (ctx))\n \t    ctx->local_reduction_clauses\n \t      = tree_cons (NULL, c, ctx->local_reduction_clauses);\n \t  /* FALLTHRU */\n@@ -2391,7 +2394,7 @@ scan_omp_for (gomp_for *stmt, omp_context *outer_ctx)\n     {\n       omp_context *tgt = enclosing_target_ctx (outer_ctx);\n \n-      if (!tgt || is_oacc_parallel (tgt))\n+      if (!tgt || is_oacc_parallel_or_serial (tgt))\n \tfor (tree c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n \t  {\n \t    char const *check = NULL;\n@@ -2417,7 +2420,7 @@ scan_omp_for (gomp_for *stmt, omp_context *outer_ctx)\n \t    if (check && OMP_CLAUSE_OPERAND (c, 0))\n \t      error_at (gimple_location (stmt),\n \t\t\t\"argument not permitted on %qs clause in\"\n-\t\t\t\" OpenACC %<parallel%>\", check);\n+\t\t\t\" OpenACC %<parallel%> or %<serial%>\", check);\n \t  }\n \n       if (tgt && is_oacc_kernels (tgt))\n@@ -2945,6 +2948,7 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t\t  {\n \t\t  case GF_OMP_TARGET_KIND_OACC_PARALLEL:\n \t\t  case GF_OMP_TARGET_KIND_OACC_KERNELS:\n+\t\t  case GF_OMP_TARGET_KIND_OACC_SERIAL:\n \t\t    ok = true;\n \t\t    break;\n \n@@ -3393,6 +3397,7 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t      stmt_name = \"target exit data\"; break;\n \t    case GF_OMP_TARGET_KIND_OACC_PARALLEL: stmt_name = \"parallel\"; break;\n \t    case GF_OMP_TARGET_KIND_OACC_KERNELS: stmt_name = \"kernels\"; break;\n+\t    case GF_OMP_TARGET_KIND_OACC_SERIAL: stmt_name = \"serial\"; break;\n \t    case GF_OMP_TARGET_KIND_OACC_DATA: stmt_name = \"data\"; break;\n \t    case GF_OMP_TARGET_KIND_OACC_UPDATE: stmt_name = \"update\"; break;\n \t    case GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n@@ -3410,6 +3415,8 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t      ctx_stmt_name = \"parallel\"; break;\n \t    case GF_OMP_TARGET_KIND_OACC_KERNELS:\n \t      ctx_stmt_name = \"kernels\"; break;\n+\t    case GF_OMP_TARGET_KIND_OACC_SERIAL:\n+\t      ctx_stmt_name = \"serial\"; break;\n \t    case GF_OMP_TARGET_KIND_OACC_DATA: ctx_stmt_name = \"data\"; break;\n \t    case GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n \t      ctx_stmt_name = \"host_data\"; break;\n@@ -6711,8 +6718,10 @@ lower_oacc_reductions (location_t loc, tree clauses, tree level, bool inner,\n \t\t    break;\n \n \t\t  case GIMPLE_OMP_TARGET:\n-\t\t    if (gimple_omp_target_kind (probe->stmt)\n-\t\t\t!= GF_OMP_TARGET_KIND_OACC_PARALLEL)\n+\t\t    if ((gimple_omp_target_kind (probe->stmt)\n+\t\t\t != GF_OMP_TARGET_KIND_OACC_PARALLEL)\n+\t\t\t&& (gimple_omp_target_kind (probe->stmt)\n+\t\t\t    != GF_OMP_TARGET_KIND_OACC_SERIAL))\n \t\t      goto do_lookup;\n \n \t\t    cls = gimple_omp_target_clauses (probe->stmt);\n@@ -7518,7 +7527,7 @@ lower_oacc_head_mark (location_t loc, tree ddvar, tree clauses,\n \n   /* In a parallel region, loops are implicitly INDEPENDENT.  */\n   omp_context *tgt = enclosing_target_ctx (ctx);\n-  if (!tgt || is_oacc_parallel (tgt))\n+  if (!tgt || is_oacc_parallel_or_serial (tgt))\n     tag |= OLF_INDEPENDENT;\n \n   if (tag & OLF_TILE)\n@@ -11357,6 +11366,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n     case GF_OMP_TARGET_KIND_EXIT_DATA:\n     case GF_OMP_TARGET_KIND_OACC_PARALLEL:\n     case GF_OMP_TARGET_KIND_OACC_KERNELS:\n+    case GF_OMP_TARGET_KIND_OACC_SERIAL:\n     case GF_OMP_TARGET_KIND_OACC_UPDATE:\n     case GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n     case GF_OMP_TARGET_KIND_OACC_DECLARE:\n@@ -11489,7 +11499,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \tif (!maybe_lookup_field (var, ctx))\n \t  continue;\n \n-\t/* Don't remap oacc parallel reduction variables, because the\n+\t/* Don't remap compute constructs' reduction variables, because the\n \t   intermediate result must be local to each gang.  */\n \tif (offloaded && !(OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n \t\t\t   && OMP_CLAUSE_MAP_IN_REDUCTION (c)))\n@@ -11531,7 +11541,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \tbreak;\n \n       case OMP_CLAUSE_FIRSTPRIVATE:\n-\tif (is_oacc_parallel (ctx))\n+\tif (is_oacc_parallel_or_serial (ctx))\n \t  goto oacc_firstprivate;\n \tmap_cnt++;\n \tvar = OMP_CLAUSE_DECL (c);\n@@ -11905,7 +11915,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t    break;\n \n \t  case OMP_CLAUSE_FIRSTPRIVATE:\n-\t    if (is_oacc_parallel (ctx))\n+\t    if (is_oacc_parallel_or_serial (ctx))\n \t      goto oacc_firstprivate_map;\n \t    ovar = OMP_CLAUSE_DECL (c);\n \t    if (omp_is_reference (ovar))\n@@ -12509,7 +12519,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n       gimple_seq fork_seq = NULL;\n       gimple_seq join_seq = NULL;\n \n-      if (is_oacc_parallel (ctx))\n+      if (is_oacc_parallel_or_serial (ctx))\n \t{\n \t  /* If there are reductions on the offloaded region itself, treat\n \t     them as a dummy GANG loop.  */"}, {"sha": "45fb8e5201847f6ddd78ca4b36394bcbc17d34b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -1,3 +1,12 @@\n+2019-11-12  Maciej W. Rozycki  <macro@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\t    Frederik Harwath  <frederik@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tgcc/testsuite/\n+\t* c-c++-common/goacc/parallel-dims.c: New test.\n+\t* gfortran.dg/goacc/parallel-dims.f90: New test.\n+\n 2019-11-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/92452"}, {"sha": "31c4ee349f2ca3c50d92bc8c41dc4b4c64e620f3", "filename": "gcc/testsuite/c-c++-common/goacc/parallel-dims-2.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-2.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -1,5 +1,7 @@\n-/* Invalid use of OpenACC parallelism dimensions clauses: num_gangs,\n-   num_workers, vector_length.  */\n+/* Invalid use of OpenACC parallelism dimensions clauses: 'num_gangs',\n+   'num_workers', 'vector_length'.  */\n+\n+/* See also '../../gfortran.dg/goacc/parallel-dims-2.f90'.  */\n \n void f(int i, float f)\n {\n@@ -255,4 +257,14 @@ void f(int i, float f)\n   vector_length(&f) /* { dg-error \"'vector_length' expression must be integral\" } */ \\\n   num_gangs( /* { dg-error \"expected (primary-|)expression before end of line\" \"TODO\" { xfail c } } */\n   ;\n+\n+\n+  /* The 'serial' construct doesn't allow these at all.  */\n+\n+#pragma acc serial num_gangs (1) /* { dg-error \"'num_gangs' is not valid for '#pragma acc serial'\" } */\n+  ;\n+#pragma acc serial num_workers (1) /* { dg-error \"'num_workers' is not valid for '#pragma acc serial'\" } */\n+  ;\n+#pragma acc serial vector_length (1) /* { dg-error \"'vector_length' is not valid for '#pragma acc serial'\" } */\n+  ;\n }"}, {"sha": "91a5c300a94c6d5a72e9c3b4e080ab61fff8f366", "filename": "gcc/testsuite/gfortran.dg/goacc/parallel-dims-2.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-dims-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-dims-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-dims-2.f90?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -0,0 +1,22 @@\n+! Invalid use of OpenACC parallelism dimensions clauses: 'num_gangs',\n+! 'num_workers', 'vector_length'.\n+\n+! See also '../../c-c++-common/goacc/parallel-dims-2.c'.\n+\n+subroutine f()\n+  !TODO 'kernels', 'parallel' testing per '../../c-c++-common/goacc/parallel-dims-2.c'.\n+  !TODO This should incorporate some of the testing done in 'sie.f95'.\n+\n+\n+  ! The 'serial' construct doesn't allow these at all.\n+\n+!$acc serial num_gangs (1)  ! { dg-error \"Failed to match clause at\" }\n+!$acc end serial  ! { dg-error \"Unexpected !.ACC END SERIAL statement\" }\n+\n+!$acc serial num_workers (1)  ! { dg-error \"Failed to match clause at\" }\n+!$acc end serial  ! { dg-error \"Unexpected !.ACC END SERIAL statement\" }\n+\n+!$acc serial vector_length (1)  ! { dg-error \"Failed to match clause at\" }\n+!$acc end serial  ! { dg-error \"Unexpected !.ACC END SERIAL statement\" }\n+\n+end subroutine f"}, {"sha": "1cf7a912133671347af550fddc97ccee09641d98", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -3223,6 +3223,10 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       pp_string (pp, \"#pragma acc kernels\");\n       goto dump_omp_clauses_body;\n \n+    case OACC_SERIAL:\n+      pp_string (pp, \"#pragma acc serial\");\n+      goto dump_omp_clauses_body;\n+\n     case OACC_DATA:\n       pp_string (pp, \"#pragma acc data\");\n       dump_omp_clauses (pp, OACC_DATA_CLAUSES (node), spc, flags);"}, {"sha": "e8bb4f37f802fe958cd6d3de8afb9365f586d2a5", "filename": "gcc/tree.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -1095,6 +1095,12 @@ DEFTREECODE (OACC_PARALLEL, \"oacc_parallel\", tcc_statement, 2)\n \n DEFTREECODE (OACC_KERNELS, \"oacc_kernels\", tcc_statement, 2)\n \n+/* OpenACC - #pragma acc serial [clause1 ... clauseN]\n+   Operand 0: OMP_BODY: Code to be executed sequentially.\n+   Operand 1: OMP_CLAUSES: List of clauses.  */\n+\n+DEFTREECODE (OACC_SERIAL, \"oacc_serial\", tcc_statement, 2)\n+\n /* OpenACC - #pragma acc data [clause1 ... clauseN]\n    Operand 0: OACC_DATA_BODY: Data construct body.\n    Operand 1: OACC_DATA_CLAUSES: List of clauses.  */"}, {"sha": "4bec90d9a729de78ee2a31acc4d6b2b57d934799", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -1622,7 +1622,8 @@ class auto_suppress_location_wrappers\n    treatment if OMP_CLAUSE_SIZE is zero.  */\n #define OMP_CLAUSE_MAP_MAYBE_ZERO_LENGTH_ARRAY_SECTION(NODE) \\\n   TREE_PROTECTED (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_MAP))\n-/* Nonzero if this map clause is for an ACC parallel reduction variable.  */\n+/* Nonzero if this map clause is for an OpenACC compute construct's reduction\n+   variable.  */\n #define OMP_CLAUSE_MAP_IN_REDUCTION(NODE) \\\n   TREE_PRIVATE (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_MAP))\n "}, {"sha": "734395936f05c594b65f3a234837f9433e889eb6", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -1,3 +1,13 @@\n+2019-11-12  Maciej W. Rozycki  <macro@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\t    Frederik Harwath  <frederik@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tlibgomp/\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: New test.\n+\t* testsuite/libgomp.oacc-fortran/parallel-dims-aux.c: New test.\n+\t* testsuite/libgomp.oacc-fortran/parallel-dims.f89: New test.\n+\n 2019-11-11  Tobias Burnus  <tobias@codesourcery.com>\n \t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n "}, {"sha": "a5edfc6ca1642799f21e80dcb8730fb701c32392", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-dims.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -1,6 +1,8 @@\n /* OpenACC parallelism dimensions clauses: num_gangs, num_workers,\n    vector_length.  */\n \n+/* See also '../libgomp.oacc-fortran/parallel-dims.f90'.  */\n+\n #include <limits.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -45,6 +47,8 @@ int main ()\n {\n   acc_init (acc_device_default);\n \n+  /* OpenACC parallel construct.  */\n+\n   /* Non-positive value.  */\n \n   /* GR, WS, VS.  */\n@@ -478,6 +482,8 @@ int main ()\n   }\n \n \n+  /* OpenACC kernels construct.  */\n+\n   /* We can't test parallelized OpenACC kernels constructs in this way: use of\n      the acc_gang, acc_worker, acc_vector functions will make the construct\n      unparallelizable.  */\n@@ -544,5 +550,72 @@ int main ()\n   }\n \n \n+  /* OpenACC serial construct.  */\n+\n+  /* GR, WS, VS.  */\n+  {\n+    int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n+    gangs_min = workers_min = vectors_min = INT_MAX;\n+    gangs_max = workers_max = vectors_max = INT_MIN;\n+#pragma acc serial /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n+  reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n+    {\n+      for (int i = 100; i > -100; i--)\n+\t{\n+\t  gangs_min = gangs_max = acc_gang ();\n+\t  workers_min = workers_max = acc_worker ();\n+\t  vectors_min = vectors_max = acc_vector ();\n+\t}\n+    }\n+    if (gangs_min != 0 || gangs_max != 1 - 1\n+\t|| workers_min != 0 || workers_max != 1 - 1\n+\t|| vectors_min != 0 || vectors_max != 1 - 1)\n+      __builtin_abort ();\n+  }\n+\n+  /* Composition of GP, WP, VP.  */\n+  {\n+    int vectors_actual = 1;  /* Implicit 'vector_length (1)' clause.  */\n+    int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n+    gangs_min = workers_min = vectors_min = INT_MAX;\n+    gangs_max = workers_max = vectors_max = INT_MIN;\n+#pragma acc serial copy (vectors_actual) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n+  copy (gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max)\n+    {\n+      if (acc_on_device (acc_device_nvidia))\n+\t{\n+\t  /* The GCC nvptx back end enforces vector_length (32).  */\n+\t  /* It's unclear if that's actually permissible here;\n+\t     <https://github.com/OpenACC/openacc-spec/issues/238> \"OpenACC\n+\t     'serial' construct might not actually be serial\".  */\n+\t  vectors_actual = 32;\n+\t}\n+#pragma acc loop gang reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n+      for (int i = 100; i > -100; i--)\n+#pragma acc loop worker reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n+\tfor (int j = 100; j > -100; j--)\n+#pragma acc loop vector reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n+\t  for (int k = 100 * vectors_actual; k > -100 * vectors_actual; k--)\n+\t    {\n+\t      gangs_min = gangs_max = acc_gang ();\n+\t      workers_min = workers_max = acc_worker ();\n+\t      vectors_min = vectors_max = acc_vector ();\n+\t    }\n+    }\n+    if (acc_get_device_type () == acc_device_nvidia)\n+      {\n+\tif (vectors_actual != 32)\n+\t  __builtin_abort ();\n+      }\n+    else\n+      if (vectors_actual != 1)\n+\t__builtin_abort ();\n+    if (gangs_min != 0 || gangs_max != 1 - 1\n+\t|| workers_min != 0 || workers_max != 1 - 1\n+\t|| vectors_min != 0 || vectors_max != vectors_actual - 1)\n+      __builtin_abort ();\n+  }\n+\n+\n   return 0;\n }"}, {"sha": "b5986f4afef7bbeb324ee3d6d0786d39599d2850", "filename": "libgomp/testsuite/libgomp.oacc-fortran/parallel-dims-aux.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims-aux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims-aux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims-aux.c?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -0,0 +1,45 @@\n+/* OpenACC parallelism dimensions clauses: num_gangs, num_workers,\n+   vector_length.  */\n+\n+/* Copied from '../libgomp.oacc-c-c++-common/parallel-dims.c'.  */\n+\n+/* Used by 'parallel-dims.f90'.  */\n+\n+#include <limits.h>\n+#include <openacc.h>\n+#include <gomp-constants.h>\n+\n+/* TODO: \"(int) acc_device_*\" casts because of the C++ acc_on_device wrapper\n+   not behaving as expected for -O0.  */\n+#pragma acc routine seq\n+/* static */ unsigned int __attribute__ ((optimize (\"O2\"))) acc_gang ()\n+{\n+  if (acc_on_device ((int) acc_device_host))\n+    return 0;\n+  else if (acc_on_device ((int) acc_device_nvidia))\n+    return __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+  else\n+    __builtin_abort ();\n+}\n+\n+#pragma acc routine seq\n+/* static */ unsigned int __attribute__ ((optimize (\"O2\"))) acc_worker ()\n+{\n+  if (acc_on_device ((int) acc_device_host))\n+    return 0;\n+  else if (acc_on_device ((int) acc_device_nvidia))\n+    return __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+  else\n+    __builtin_abort ();\n+}\n+\n+#pragma acc routine seq\n+/* static */ unsigned int __attribute__ ((optimize (\"O2\"))) acc_vector ()\n+{\n+  if (acc_on_device ((int) acc_device_host))\n+    return 0;\n+  else if (acc_on_device ((int) acc_device_nvidia))\n+    return __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n+  else\n+    __builtin_abort ();\n+}"}, {"sha": "1bfcd6ce0998ca11dbf036c917080994900764a8", "filename": "libgomp/testsuite/libgomp.oacc-fortran/parallel-dims.f90", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62aee289e4791fd68aace01accf433fb26b3eeae/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62aee289e4791fd68aace01accf433fb26b3eeae/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90?ref=62aee289e4791fd68aace01accf433fb26b3eeae", "patch": "@@ -0,0 +1,120 @@\n+! OpenACC parallelism dimensions clauses: num_gangs, num_workers,\n+! vector_length.\n+\n+! { dg-additional-sources parallel-dims-aux.c }\n+! { dg-do run }\n+! { dg-prune-output \"command-line option '-fintrinsic-modules-path=.*' is valid for Fortran but not for C\" }\n+\n+! See also '../libgomp.oacc-c-c++-common/parallel-dims.c'.\n+\n+module acc_routines\n+  implicit none (type, external)\n+\n+  interface\n+    integer function acc_gang() bind(C)\n+      !$acc routine seq\n+    end function acc_gang\n+\n+    integer function acc_worker() bind(C)\n+      !$acc routine seq\n+    end function acc_worker\n+\n+    integer function acc_vector() bind(C)\n+      !$acc routine seq\n+    end function acc_vector\n+  end interface\n+end module acc_routines\n+\n+program main\n+  use iso_c_binding\n+  use openacc\n+  use acc_routines\n+  implicit none (type, external)\n+\n+  integer :: gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max\n+  integer :: vectors_actual\n+  integer :: i, j, k\n+\n+  call acc_init (acc_device_default)\n+\n+  ! OpenACC parallel construct.\n+\n+  !TODO\n+\n+\n+  ! OpenACC kernels construct.\n+\n+  !TODO\n+\n+\n+  ! OpenACC serial construct.\n+\n+  ! GR, WS, VS.\n+\n+  gangs_min = huge(gangs_min) ! INT_MAX\n+  workers_min = huge(workers_min) ! INT_MAX\n+  vectors_min = huge(vectors_min) ! INT_MAX\n+  gangs_max = -huge(gangs_max) - 1  ! INT_MIN\n+  workers_max = -huge(gangs_max) - 1 ! INT_MIN\n+  vectors_max = -huge(gangs_max) - 1 ! INT_MIN\n+  !$acc serial &\n+  !$acc   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max) ! { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } }\n+  do i = 100, -99, -1\n+     gangs_min = acc_gang ();\n+     gangs_max = acc_gang ();\n+     workers_min = acc_worker ();\n+     workers_max = acc_worker ();\n+     vectors_min = acc_vector ();\n+     vectors_max = acc_vector ();\n+  end do\n+  !$acc end serial\n+  if (gangs_min /= 0 .or. gangs_max /= 1 - 1 &\n+      .or. workers_min /= 0 .or. workers_max /= 1 - 1 &\n+      .or. vectors_min /= 0 .or. vectors_max /= 1 - 1) &\n+    stop 1\n+\n+  ! Composition of GP, WP, VP.\n+\n+  vectors_actual = 1 ! Implicit 'vector_length (1)' clause.\n+  gangs_min = huge(gangs_min) ! INT_MAX\n+  workers_min = huge(workers_min) ! INT_MAX\n+  vectors_min = huge(vectors_min) ! INT_MAX\n+  gangs_max = -huge(gangs_max) - 1  ! INT_MIN\n+  workers_max = -huge(gangs_max) - 1 ! INT_MIN\n+  vectors_max = -huge(gangs_max) - 1 ! INT_MIN\n+  !$acc serial copy (vectors_actual) &\n+  !$acc   copy (gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max) ! { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } }\n+  if (acc_on_device (acc_device_nvidia)) then\n+     ! The GCC nvptx back end enforces vector_length (32).\n+     ! It's unclear if that's actually permissible here;\n+     ! <https://github.com/OpenACC/openacc-spec/issues/238> \"OpenACC 'serial'\n+     ! construct might not actually be serial\".\n+   vectors_actual = 32\n+  end if\n+  !$acc loop gang reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n+  do i = 100, -99, -1\n+     !$acc loop worker reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n+     do j = 100, -99, -1\n+        !$acc loop vector reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n+        do k = 100 * vectors_actual, -99 * vectors_actual, -1\n+           gangs_min = acc_gang ();\n+           gangs_max = acc_gang ();\n+           workers_min = acc_worker ();\n+           workers_max = acc_worker ();\n+           vectors_min = acc_vector ();\n+           vectors_max = acc_vector ();\n+        end do\n+     end do\n+  end do\n+  !$acc end serial\n+  if (acc_get_device_type () .eq. acc_device_nvidia) then\n+     if (vectors_actual /= 32) stop 2\n+  else\n+     if (vectors_actual /= 1) stop 3\n+  end if\n+  if (gangs_min /= 0 .or. gangs_max /= 1 - 1 &\n+      .or. workers_min /= 0 .or. workers_max /= 1 - 1 &\n+      .or. vectors_min /= 0 .or. vectors_max /= vectors_actual - 1) &\n+    stop 4\n+\n+end program main"}]}