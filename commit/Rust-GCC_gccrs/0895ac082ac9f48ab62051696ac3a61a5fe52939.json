{"sha": "0895ac082ac9f48ab62051696ac3a61a5fe52939", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg5NWFjMDgyYWM5ZjQ4YWI2MjA1MTY5NmFjM2E2MWE1ZmU1MjkzOQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2013-10-14T13:26:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T13:26:07Z"}, "message": "sem_ch3.adb, [...]: Minor reformatting.\n\n2013-10-14  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, sem_prag.adb, prj.ads: Minor reformatting.\n\nFrom-SVN: r203548", "tree": {"sha": "c2c5568682e5a23aaab38810fa1ff0f5be6a3324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2c5568682e5a23aaab38810fa1ff0f5be6a3324"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0895ac082ac9f48ab62051696ac3a61a5fe52939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0895ac082ac9f48ab62051696ac3a61a5fe52939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0895ac082ac9f48ab62051696ac3a61a5fe52939", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0895ac082ac9f48ab62051696ac3a61a5fe52939/comments", "author": null, "committer": null, "parents": [{"sha": "5ddcf7edb9fd375d92f7eb1e9f50f20f6849e0c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ddcf7edb9fd375d92f7eb1e9f50f20f6849e0c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ddcf7edb9fd375d92f7eb1e9f50f20f6849e0c4"}], "stats": {"total": 81, "additions": 41, "deletions": 40}, "files": [{"sha": "ed6716197176ee80981943e071e618e00358dfc2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0895ac082ac9f48ab62051696ac3a61a5fe52939/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0895ac082ac9f48ab62051696ac3a61a5fe52939/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0895ac082ac9f48ab62051696ac3a61a5fe52939", "patch": "@@ -1,3 +1,7 @@\n+2013-10-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, sem_prag.adb, prj.ads: Minor reformatting.\n+\n 2013-10-14  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_prag.adb (Analyze_Depends_In_Decl_Part):"}, {"sha": "089d0c76c0d8c0525639091d4e50b2cf8697c374", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0895ac082ac9f48ab62051696ac3a61a5fe52939/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0895ac082ac9f48ab62051696ac3a61a5fe52939/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=0895ac082ac9f48ab62051696ac3a61a5fe52939", "patch": "@@ -676,23 +676,23 @@ package Prj is\n                            Clean_Source_Artifacts       => No_Name_List);\n \n    type Language_Data is record\n-      Name          : Name_Id         := No_Name;\n+      Name : Name_Id := No_Name;\n       --  The name of the language in lower case\n \n-      Display_Name  : Name_Id         := No_Name;\n+      Display_Name : Name_Id := No_Name;\n       --  The name of the language, as found in attribute Languages\n \n-      Config        : Language_Config := No_Language_Config;\n+      Config : Language_Config := No_Language_Config;\n       --  Configuration of the language\n \n-      First_Source  : Source_Id       := No_Source;\n+      First_Source : Source_Id := No_Source;\n       --  Head of the list of sources of the language in the project\n \n       Mapping_Files : Mapping_Files_Htable.Instance :=\n                         Mapping_Files_Htable.Nil;\n       --  Hash table containing the mapping of the sources to their path names\n \n-      Next          : Language_Ptr  := No_Language_Index;\n+      Next : Language_Ptr := No_Language_Index;\n       --  Next language of the project\n \n    end record;\n@@ -1267,9 +1267,8 @@ package Prj is\n       ---------------\n \n       Languages : Language_Ptr := No_Language_Index;\n-      --  First index of the language data in the project.\n-      --  Traversing the list gives access to all the languages supported by\n-      --  the project.\n+      --  First index of the language data in the project. Traversing the list\n+      --  gives access to all the languages supported by the project.\n \n       --------------\n       -- Projects --"}, {"sha": "e81e61f215ae44e212a7e16c929035ded160bd00", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0895ac082ac9f48ab62051696ac3a61a5fe52939/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0895ac082ac9f48ab62051696ac3a61a5fe52939/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=0895ac082ac9f48ab62051696ac3a61a5fe52939", "patch": "@@ -2091,13 +2091,11 @@ package body Sem_Ch3 is\n \n       procedure Remove_Visible_Refinements (Spec_Id : Entity_Id) is\n          State_Elmt : Elmt_Id;\n-\n       begin\n          if Present (Abstract_States (Spec_Id)) then\n             State_Elmt := First_Elmt (Abstract_States (Spec_Id));\n             while Present (State_Elmt) loop\n                Set_Has_Visible_Refinement (Node (State_Elmt), False);\n-\n                Next_Elmt (State_Elmt);\n             end loop;\n          end if;"}, {"sha": "661b3d0f88323b9a2283b9186cbe95a35b73e4e5", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0895ac082ac9f48ab62051696ac3a61a5fe52939/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0895ac082ac9f48ab62051696ac3a61a5fe52939/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=0895ac082ac9f48ab62051696ac3a61a5fe52939", "patch": "@@ -525,12 +525,11 @@ package body Sem_Prag is\n          Item_Id  : Entity_Id;\n          Is_Input : Boolean;\n          Self_Ref : Boolean);\n-      --  Ensure that an item has a proper \"in\", \"in out\" or \"out\" mode\n-      --  depending on its function. If this is not the case, emit an error.\n-      --  Item and Item_Id denote the attributes of an item. Flag Is_Input\n-      --  should be set when item comes from an input list. Flag Self_Ref\n-      --  should be set when the item is an output and the dependency clause\n-      --  has operator \"+\".\n+      --  Ensure that an item has a proper IN, IN OUT, or OUT mode depending\n+      --  on its function. If this is not the case, emit an error. Item and\n+      --  Item_Id denote the attributes of an item. Flag Is_Input should be set\n+      --  when item comes from an input list. Flag Self_Ref should be set when\n+      --  the item is an output and the dependency clause has operator \"+\".\n \n       procedure Check_Usage\n         (Subp_Items : Elist_Id;\n@@ -763,9 +762,9 @@ package body Sem_Prag is\n                         Add_Item (Item_Id, Seen);\n                      end if;\n \n-                     --  Detect an illegal use of an input related to a null\n-                     --  output. Such input items cannot appear in other input\n-                     --  lists.\n+                     --  Detect illegal use of an input related to a null\n+                     --  output. Such input items cannot appear in other\n+                     --  input lists.\n \n                      if Is_Input\n                        and then Null_Output_Seen\n@@ -908,29 +907,29 @@ package body Sem_Prag is\n \n          if Is_Input then\n \n-            --  \"In\" and \"in out\" parameters already have the proper mode to\n-            --  act as input. \"Out\" parameters are valid inputs only when their\n-            --  type is unconstrained or tagged as their discriminants, array\n-            --  bouns or tags can be read. In general, states and variables\n-            --  are considered to have mode \"in out\" unless they are moded by\n-            --  pragma [Refined_]Global. In that case, the item must appear in\n-            --  an input global list.\n+            --  IN and IN OUT parameters already have the proper mode to act\n+            --  as input. OUT parameters are valid inputs only when their type\n+            --  is unconstrained or tagged as their discriminants, array bouns\n+            --  or tags can be read. In general, states and variables are\n+            --  considered to have mode IN OUT unless they are moded by pragma\n+            --  [Refined_]Global. In that case, the item must appear in an\n+            --  input global list.\n \n             if (Ekind (Item_Id) = E_Out_Parameter\n                  and then not Is_Unconstrained_Or_Tagged_Item (Item_Id))\n               or else\n-               (Global_Seen and then not Appears_In (Subp_Inputs, Item_Id))\n+                (Global_Seen and then not Appears_In (Subp_Inputs, Item_Id))\n             then\n                Error_Msg_NE\n-                 (\"item & must have mode in or in out\", Item, Item_Id);\n+                 (\"item & must have mode IN or `IN OUT`\", Item, Item_Id);\n             end if;\n \n          --  Self-referential output\n \n          elsif Self_Ref then\n \n             --  In general, states and variables are considered to have mode\n-            --  \"in out\" unless they are explicitly moded by pragma [Refined_]\n+            --  IN OUT unless they are explicitly moded by pragma [Refined_]\n             --  Global. If this is the case, then the item must appear in both\n             --  an input and output global list.\n \n@@ -941,10 +940,11 @@ package body Sem_Prag is\n                       and then\n                     Appears_In (Subp_Outputs, Item_Id))\n                then\n-                  Error_Msg_NE (\"item & must have mode in out\", Item, Item_Id);\n+                  Error_Msg_NE\n+                    (\"item & must have mode `IN OUT`\", Item, Item_Id);\n                end if;\n \n-            --  A self-referential out parameter of an unconstrained or tagged\n+            --  A self-referential OUT parameter of an unconstrained or tagged\n             --  type acts as an input because the discriminants, array bounds\n             --  or the tag may be read. Note that the presence of [Refined_]\n             --  Global is not significant here because the item is a parameter.\n@@ -954,27 +954,27 @@ package body Sem_Prag is\n             then\n                null;\n \n-            --  The remaining cases are \"in\", \"in out\" and \"out\" parameters. To\n-            --  qualify as self-referential item, the parameter must be of mode\n-            --  \"in out\".\n+            --  The remaining cases are IN, IN OUT, and OUT parameters. To\n+            --  qualify as self-referential item, the parameter must be of\n+            --  mode IN OUT.\n \n             elsif Ekind (Item_Id) /= E_In_Out_Parameter then\n-               Error_Msg_NE (\"item & must have mode in out\", Item, Item_Id);\n+               Error_Msg_NE (\"item & must have mode `IN OUT`\", Item, Item_Id);\n             end if;\n \n          --  Output\n \n-         --  \"In out\" and \"ou\" parameters already have the proper mode to act\n-         --  as output. In general, states and variables are considered to have\n-         --  mode \"in out\" unless they are moded by pragma [Refined_]Global.\n-         --  In that case, the item must appear in an output global list.\n+         --  IN OUT and OUT parameters already have the proper mode to act as\n+         --  output. In general, states and variables are considered to have\n+         --  mode IN OUT unless they are moded by pragma [Refined_]Global. In\n+         --  that case, the item must appear in an output global list.\n \n          elsif Ekind (Item_Id) = E_In_Parameter\n            or else\n              (Global_Seen and then not Appears_In (Subp_Outputs, Item_Id))\n          then\n             Error_Msg_NE\n-              (\"item & must have mode out or in out\", Item, Item_Id);\n+              (\"item & must have mode OUT or `IN OUT`\", Item, Item_Id);\n          end if;\n       end Check_Mode;\n "}]}