{"sha": "923158bee111f58152d9ce673d10656322460f5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIzMTU4YmVlMTExZjU4MTUyZDljZTY3M2QxMDY1NjMyMjQ2MGY1ZA==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2008-02-17T18:52:04Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2008-02-17T18:52:04Z"}, "message": "c-tree.texi: Use @dots{} and @enddots{} where appropriate.\n\n* doc/c-tree.texi: Use @dots{} and @enddots{} where appropriate.\n* doc/cfg.texi: Likewise.\n* doc/extend.texi: Likewise.\n* doc/gty.texi: Likewise.\n* doc/invoke.texi: Likewise.\n* doc/loop.texi: Likewise.\n* doc/md.texi: Likewise.\n* doc/passes.texi: Likewise.\n* doc/rtl.texi: Likewise.\n* doc/sourcebuild.texi: Likewise.\n* doc/tm.texi: Likewise.\n* doc/tree-ssa.texi: Likewise.\n\nFrom-SVN: r132381", "tree": {"sha": "ee13290ab136a405714bb15d927db8ba0cefe98e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee13290ab136a405714bb15d927db8ba0cefe98e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/923158bee111f58152d9ce673d10656322460f5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/923158bee111f58152d9ce673d10656322460f5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/923158bee111f58152d9ce673d10656322460f5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/923158bee111f58152d9ce673d10656322460f5d/comments", "author": null, "committer": null, "parents": [{"sha": "6df548d2d30d517e98adb449e5f21fed9cc05a9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df548d2d30d517e98adb449e5f21fed9cc05a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6df548d2d30d517e98adb449e5f21fed9cc05a9a"}], "stats": {"total": 91, "additions": 53, "deletions": 38}, "files": [{"sha": "cd44cbd22674af9a4d7f8542360e7a6d1e117930", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923158bee111f58152d9ce673d10656322460f5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923158bee111f58152d9ce673d10656322460f5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=923158bee111f58152d9ce673d10656322460f5d", "patch": "@@ -1,3 +1,18 @@\n+2008-02-17 Ralf Wildenhues <Ralf.Wildenhues@gmx.de>\n+\n+\t* doc/c-tree.texi: Use @dots{} and @enddots{} where appropriate.\n+\t* doc/cfg.texi: Likewise.\n+\t* doc/extend.texi: Likewise.\n+\t* doc/gty.texi: Likewise.\n+\t* doc/invoke.texi: Likewise.\n+\t* doc/loop.texi: Likewise.\n+\t* doc/md.texi: Likewise.\n+\t* doc/passes.texi: Likewise.\n+\t* doc/rtl.texi: Likewise.\n+\t* doc/sourcebuild.texi: Likewise.\n+\t* doc/tm.texi: Likewise.\n+\t* doc/tree-ssa.texi: Likewise.\n+\n 2008-02-17  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/35227"}, {"sha": "d7276894432109c2c60d1a9f0fa7e09a40053e77", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=923158bee111f58152d9ce673d10656322460f5d", "patch": "@@ -2537,7 +2537,7 @@ tree call, arg;\n call_expr_arg_iterator iter;\n FOR_EACH_CALL_EXPR_ARG (arg, iter, call)\n   /* arg is bound to successive arguments of call.  */\n-  ...;\n+  @dots{};\n @end smallexample\n \n For non-static\n@@ -2704,7 +2704,7 @@ analysis.\n \n @item OMP_PARALLEL\n \n-Represents @code{#pragma omp parallel [clause1 ... clauseN]}. It\n+Represents @code{#pragma omp parallel [clause1 @dots{} clauseN]}. It\n has four operands:\n \n Operand @code{OMP_PARALLEL_BODY} is valid while in GENERIC and\n@@ -2729,7 +2729,7 @@ variables.\n \n @item OMP_FOR\n \n-Represents @code{#pragma omp for [clause1 ... clauseN]}.  It\n+Represents @code{#pragma omp for [clause1 @dots{} clauseN]}.  It\n has 5 operands:\n \n Operand @code{OMP_FOR_BODY} contains the loop body.\n@@ -2762,7 +2762,7 @@ unspecified by the standard.\n \n @item OMP_SECTIONS\n \n-Represents @code{#pragma omp sections [clause1 ... clauseN]}.\n+Represents @code{#pragma omp sections [clause1 @dots{} clauseN]}.\n \n Operand @code{OMP_SECTIONS_BODY} contains the sections body,\n which in turn contains a set of @code{OMP_SECTION} nodes for"}, {"sha": "80440af9c06294c575be19e8c2812b1286f7d6ce", "filename": "gcc/doc/cfg.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Fcfg.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Fcfg.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcfg.texi?ref=923158bee111f58152d9ce673d10656322460f5d", "patch": "@@ -293,13 +293,13 @@ series of jumps,\n \n @smallexample\n   goto *x;\n-  [ ... ]\n+  [ @dots{} ]\n \n   goto *x;\n-  [ ... ]\n+  [ @dots{} ]\n \n   goto *x;\n-  [ ... ]\n+  [ @dots{} ]\n @end smallexample\n \n @noindent\n@@ -308,13 +308,13 @@ which has a much simpler flow graph:\n \n @smallexample\n   goto y;\n-  [ ... ]\n+  [ @dots{} ]\n \n   goto y;\n-  [ ... ]\n+  [ @dots{} ]\n \n   goto y;\n-  [ ... ]\n+  [ @dots{} ]\n \n y:\n   goto *x;"}, {"sha": "3d543073f4c2ae4e87d9e9d5ba784b260af02264", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=923158bee111f58152d9ce673d10656322460f5d", "patch": "@@ -11117,7 +11117,7 @@ macros are defined.\n \n Modifies the disposition of a diagnostic.  Note that not all\n diagnostics are modifiable; at the moment only warnings (normally\n-controlled by @samp{-W...}) can be controlled, and not all of them.\n+controlled by @samp{-W@dots{}}) can be controlled, and not all of them.\n Use @option{-fdiagnostics-show-option} to determine which diagnostics\n are controllable and which option controls them.\n "}, {"sha": "2ffa15194298a4195a66bc9fe5add09674c2a76b", "filename": "gcc/doc/gty.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Fgty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Fgty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgty.texi?ref=923158bee111f58152d9ce673d10656322460f5d", "patch": "@@ -96,14 +96,14 @@ The structure that immediately contains the current structure.\n @item %0\n The outermost structure that contains the current structure.\n @item %a\n-A partial expression of the form @code{[i1][i2]...} that indexes\n+A partial expression of the form @code{[i1][i2]@dots{}} that indexes\n the array item currently being marked.\n @end table\n \n For instance, suppose that you have a structure of the form\n @smallexample\n struct A @{\n-  ...\n+  @dots{}\n @};\n struct B @{\n   struct A foo[12];"}, {"sha": "1cb14ea11dc25d75ae37b9da4caf9cdf9ec96a31", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=923158bee111f58152d9ce673d10656322460f5d", "patch": "@@ -5012,7 +5012,7 @@ position in code.  Better debugging information is then generated\n (if the debugging information format supports this information).\n \n It is enabled by default when compiling with optimization (@option{-Os},\n-@option{-O}, @option{-O2}, ...), debugging information (@option{-g}) and\n+@option{-O}, @option{-O2}, @dots{}), debugging information (@option{-g}) and\n the debug info format supports it.\n \n @item -print-file-name=@var{library}"}, {"sha": "52e14fa8d3ef9f1cfb3e4511eb0becce78d41efc", "filename": "gcc/doc/loop.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Floop.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Floop.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Floop.texi?ref=923158bee111f58152d9ce673d10656322460f5d", "patch": "@@ -348,7 +348,7 @@ and step must be the same.  A variable has evolution\n loop) equivalent to @code{x_1} in the following example\n \n @smallexample\n-while (...)\n+while (@dots{})\n   @{\n     x_1 = phi (base, x_2);\n     x_2 = x_1 + step;"}, {"sha": "bd4150f35cab6eab4cd3b98fbd7c61c17a530cee", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=923158bee111f58152d9ce673d10656322460f5d", "patch": "@@ -7756,7 +7756,7 @@ rtx-based construct, such as a @code{define_insn},\n The syntax for defining a mode iterator is:\n \n @smallexample\n-(define_mode_iterator @var{name} [(@var{mode1} \"@var{cond1}\") ... (@var{moden} \"@var{condn}\")])\n+(define_mode_iterator @var{name} [(@var{mode1} \"@var{cond1}\") @dots{} (@var{moden} \"@var{condn}\")])\n @end smallexample\n \n This allows subsequent @file{.md} file constructs to use the mode suffix\n@@ -7823,7 +7823,7 @@ the mode in lower case, and @code{MODE}, which is the same thing in\n upper case.  You can define other attributes using:\n \n @smallexample\n-(define_mode_attr @var{name} [(@var{mode1} \"@var{value1}\") ... (@var{moden} \"@var{valuen}\")])\n+(define_mode_attr @var{name} [(@var{mode1} \"@var{value1}\") @dots{} (@var{moden} \"@var{valuen}\")])\n @end smallexample\n \n where @var{name} is the name of the attribute and @var{valuei}\n@@ -7833,7 +7833,7 @@ When GCC replaces some @var{:iterator} with @var{:mode}, it will scan\n each string and mode in the pattern for sequences of the form\n @code{<@var{iterator}:@var{attr}>}, where @var{attr} is the name of a\n mode attribute.  If the attribute is defined for @var{mode}, the whole\n-@code{<...>} sequence will be replaced by the appropriate attribute\n+@code{<@dots{}>} sequence will be replaced by the appropriate attribute\n value.\n \n For example, suppose an @file{.md} file has:\n@@ -7853,8 +7853,8 @@ Here is an example of using an attribute for a mode:\n @smallexample\n (define_mode_iterator LONG [SI DI])\n (define_mode_attr SHORT [(SI \"HI\") (DI \"SI\")])\n-(define_insn ...\n-  (sign_extend:LONG (match_operand:<LONG:SHORT> ...)) ...)\n+(define_insn @dots{}\n+  (sign_extend:LONG (match_operand:<LONG:SHORT> @dots{})) @dots{})\n @end smallexample\n \n The @code{@var{iterator}:} prefix may be omitted, in which case the\n@@ -7918,7 +7918,7 @@ Code iterators operate in a similar way to mode iterators.  @xref{Mode Iterators\n The construct:\n \n @smallexample\n-(define_code_iterator @var{name} [(@var{code1} \"@var{cond1}\") ... (@var{coden} \"@var{condn}\")])\n+(define_code_iterator @var{name} [(@var{code1} \"@var{cond1}\") @dots{} (@var{coden} \"@var{condn}\")])\n @end smallexample\n \n defines a pseudo rtx code @var{name} that can be instantiated as\n@@ -7936,7 +7936,7 @@ code in lower case, and @code{CODE}, the name of the code in upper case.\n Other attributes are defined using:\n \n @smallexample\n-(define_code_attr @var{name} [(@var{code1} \"@var{value1}\") ... (@var{coden} \"@var{valuen}\")])\n+(define_code_attr @var{name} [(@var{code1} \"@var{value1}\") @dots{} (@var{coden} \"@var{valuen}\")])\n @end smallexample\n \n Here's an example of code iterators in action, taken from the MIPS port:\n@@ -7985,7 +7985,7 @@ This is equivalent to:\n   DONE;\n @})\n \n-...\n+@dots{}\n @end smallexample\n \n @end ifset"}, {"sha": "526eb7674f5c8c38de880b6cc770b11de838d505", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=923158bee111f58152d9ce673d10656322460f5d", "patch": "@@ -168,7 +168,7 @@ what is present is useful, and a far sight better than nothing at all.\n \n TODO: describe the global variables set up by the pass manager,\n and a brief description of how a new pass should use it.\n-I need to look at what info rtl passes use first...\n+I need to look at what info rtl passes use first@enddots{}\n \n @node Tree-SSA passes\n @section Tree-SSA passes"}, {"sha": "90c56d909d4aa0b04adc6b34db53ec259c6755c6", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=923158bee111f58152d9ce673d10656322460f5d", "patch": "@@ -1904,7 +1904,7 @@ declarations and during RTL generation.  It should not appear in the\n ordinary insn chain.\n \n @findex concatn\n-@item (concatn@var{m} [@var{rtx} ...])\n+@item (concatn@var{m} [@var{rtx} @dots{}])\n This RTX represents the concatenation of all the @var{rtx} to make a\n single value.  Like @code{concat}, this should only appear in\n declarations, and not in the insn chain."}, {"sha": "d4b775345676080455e9d575a6f8d1a99483ef89", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=923158bee111f58152d9ce673d10656322460f5d", "patch": "@@ -971,7 +971,7 @@ This DejaGnu directive provides a list of compiler options, to be used\n if the target system matches @var{selector}, that replace the default\n options used for this set of tests.\n \n-@item @{ dg-add-options @var{feature} ... @}\n+@item @{ dg-add-options @var{feature} @dots{} @}\n Add any compiler options that are needed to access certain features.\n This directive does nothing on targets that enable the features by\n default, or that don't provide them at all.  It must come after\n@@ -1463,7 +1463,7 @@ These can be overridden by defining the environment variable\n \n @smallexample\n COMPAT_OPTIONS=\"[list [list @{@var{tst1}@} @{@var{alt1}@}]\n-  ...[list @{@var{tstn}@} @{@var{altn}@}]]\"\n+  @dots{}[list @{@var{tstn}@} @{@var{altn}@}]]\"\n @end smallexample\n \n where @var{tsti} and @var{alti} are lists of options, with @var{tsti}"}, {"sha": "2c1446f3807be4d48e6b712f2fdfbec24802f022", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=923158bee111f58152d9ce673d10656322460f5d", "patch": "@@ -3218,11 +3218,11 @@ This target hook allows the backend to emit frame-related insns that\n contain UNSPECs or UNSPEC_VOLATILEs.  The DWARF 2 call frame debugging\n info engine will invoke it on insns of the form\n @smallexample\n-(set (reg) (unspec [...] UNSPEC_INDEX))\n+(set (reg) (unspec [@dots{}] UNSPEC_INDEX))\n @end smallexample\n and\n @smallexample\n-(set (reg) (unspec_volatile [...] UNSPECV_INDEX)).\n+(set (reg) (unspec_volatile [@dots{}] UNSPECV_INDEX)).\n @end smallexample\n to let the backend emit the call frame instructions.  @var{label} is\n the CFI label attached to the insn, @var{pattern} is the pattern of"}, {"sha": "b6ba49380535513d7144ebb1bb27764411a4d262", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/923158bee111f58152d9ce673d10656322460f5d/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=923158bee111f58152d9ce673d10656322460f5d", "patch": "@@ -828,7 +828,7 @@ instance, given\n @{\n   int a, b, *p;\n \n-  if (...)\n+  if (@dots{})\n     p = &a;\n   else\n     p = &b;\n@@ -850,7 +850,7 @@ operands, use the @option{-vops} option to @option{-fdump-tree}:\n @{\n   int a, b, *p;\n \n-  if (...)\n+  if (@dots{})\n     p = &a;\n   else\n     p = &b;\n@@ -1207,9 +1207,9 @@ all the incoming versions of the variable to create a new name\n for it.  For instance,\n \n @smallexample\n-if (...)\n+if (@dots{})\n   a_1 = 5;\n-else if (...)\n+else if (@dots{})\n   a_2 = 2;\n else\n   a_3 = 13;\n@@ -1294,11 +1294,11 @@ Suppose that we insert new names @code{x_10} and @code{x_11} (lines\n      1\tL0:\n      2\tx_1 = PHI (0, x_5)\n      3\tif (x_1 < 10)\n-     4\t  x_10 = ...\n+     4\t  x_10 = @dots{}\n      5\t  if (x_1 > 7)\n      6\t    y_2 = 0\n      7\t  else\n-     8\t    x_11 = ...\n+     8\t    x_11 = @dots{}\n      9\t    y_3 = x_1 + x_7\n      10\t  endif\n      11\t  x_5 = x_1 + 1\n@@ -1390,7 +1390,7 @@ modifications should be bracketed between calls to\n     munge_stmt (tree stmt)\n     @{\n        push_stmt_changes (&stmt);\n-       ... rewrite STMT ...\n+       @dots{} rewrite STMT @dots{}\n        pop_stmt_changes (&stmt);\n     @}\n @end smallexample\n@@ -1666,7 +1666,7 @@ T, we add Vi to the may-aliases set for T@.  Meaning that\n after alias analysis, we will have:\n \n @smallexample\n-may-aliases(T) = @{ V1, V2, V3, ..., Vn @}\n+may-aliases(T) = @{ V1, V2, V3, @dots{}, Vn @}\n @end smallexample\n \n This means that every statement that references T, will get\n@@ -1677,7 +1677,7 @@ to the alias set of all the Vi variables:\n @smallexample\n may-aliases(V1) = @{ T @}\n may-aliases(V2) = @{ T @}\n-...\n+@dots{}\n may-aliases(Vn) = @{ T @}\n @end smallexample\n "}]}