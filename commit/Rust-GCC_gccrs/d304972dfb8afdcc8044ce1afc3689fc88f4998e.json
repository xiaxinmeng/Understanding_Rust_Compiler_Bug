{"sha": "d304972dfb8afdcc8044ce1afc3689fc88f4998e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMwNDk3MmRmYjhhZmRjYzgwNDRjZTFhZmMzNjg5ZmM4OGY0OTk4ZQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1993-06-10T20:30:36Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1993-06-10T20:30:36Z"}, "message": "More ELF changes.\n\nFrom-SVN: r4660", "tree": {"sha": "c304888d6f347bfe8c357919c3f835c968d9da73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c304888d6f347bfe8c357919c3f835c968d9da73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d304972dfb8afdcc8044ce1afc3689fc88f4998e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d304972dfb8afdcc8044ce1afc3689fc88f4998e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d304972dfb8afdcc8044ce1afc3689fc88f4998e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d304972dfb8afdcc8044ce1afc3689fc88f4998e/comments", "author": null, "committer": null, "parents": [{"sha": "0f0cfffb6d5e8f5c73f2fa056724974b3286e22f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f0cfffb6d5e8f5c73f2fa056724974b3286e22f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f0cfffb6d5e8f5c73f2fa056724974b3286e22f"}], "stats": {"total": 175, "additions": 171, "deletions": 4}, "files": [{"sha": "8a1cc54f4504aa4124e3a10f8db4cf41af4968f7", "filename": "gcc/config/i386/osfelf.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d304972dfb8afdcc8044ce1afc3689fc88f4998e/gcc%2Fconfig%2Fi386%2Fosfelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d304972dfb8afdcc8044ce1afc3689fc88f4998e/gcc%2Fconfig%2Fi386%2Fosfelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfelf.h?ref=d304972dfb8afdcc8044ce1afc3689fc88f4998e", "patch": "@@ -49,7 +49,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n %{!pic-*: %{!fpic: %{!fPIC: -mhalf-pic}}}\"\n \n #undef\tASM_SPEC\n-#define ASM_SPEC       \"\"\n+#define ASM_SPEC       \"%{v*: -v}\"\n \n #undef  LINK_SPEC\n #define LINK_SPEC      \"%{noshrlib: } %{glue: }\"\n@@ -63,3 +63,4 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define TARGET_VERSION_INTERNAL(STREAM) fputs (I386_VERSION, STREAM)\n #define TARGET_VERSION TARGET_VERSION_INTERNAL (stderr)\n \n+#undef OBJECT_FORMAT_ROSE"}, {"sha": "46ae32a0b402f58e936cccf97418c719b048347c", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 169, "deletions": 3, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d304972dfb8afdcc8044ce1afc3689fc88f4998e/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d304972dfb8afdcc8044ce1afc3689fc88f4998e/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=d304972dfb8afdcc8044ce1afc3689fc88f4998e", "patch": "@@ -36,11 +36,14 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define MASK_HALF_PIC     \t0x40000000\t/* Mask for half-pic code */\n #define MASK_HALF_PIC_DEBUG\t0x20000000\t/* Debug flag */\n #define MASK_ELF\t\t0x10000000\t/* ELF not rose */\n+#define MASK_NO_IDENT\t\t0x08000000\t/* suppress .ident */\n \n #define TARGET_HALF_PIC\t(target_flags & MASK_HALF_PIC)\n #define TARGET_DEBUG\t(target_flags & MASK_HALF_PIC_DEBUG)\n #define HALF_PIC_DEBUG\tTARGET_DEBUG\n #define TARGET_ELF\t(target_flags & MASK_ELF)\n+#define TARGET_ROSE\t((target_flags & MASK_ELF) == 0)\n+#define TARGET_IDENT\t((target_flags & MASK_NO_IDENT) == 0)\n \n #undef\tSUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES \\\n@@ -49,7 +52,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n      { \"debugb\",\t MASK_HALF_PIC_DEBUG},\t\t\t\t\\\n      { \"elf\",\t\t MASK_ELF},\t\t\t\t\t\\\n      { \"no-elf\",\t-MASK_ELF},\t\t\t\t\t\\\n-     { \"rose\",\t\t-MASK_ELF},\n+     { \"rose\",\t\t-MASK_ELF},\t\t\t\t\t\\\n+     { \"ident\",\t\t-MASK_NO_IDENT},\t\t\t\t\\\n+     { \"no-ident\",\t MASK_NO_IDENT},\n \n /* OSF/rose uses stabs, not dwarf.  */\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n@@ -92,7 +97,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n %{!pic-*: %{!fpic: %{!fPIC: -mhalf-pic}}}\"\n \n #undef\tASM_SPEC\n-#define ASM_SPEC       \"\"\n+#define ASM_SPEC       \"%{v*: -v}\"\n \n #undef  LINK_SPEC\n #define LINK_SPEC      \"%{v*: -v}                           \\\n@@ -233,6 +238,20 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #define OVERRIDE_OPTIONS\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n+  /*\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_ELF && TARGET_HALF_PIC)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      target_flags &= ~MASK_HALF_PIC;\t\t\t\t\t\\\n+      flag_pic = 1;\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  */\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_ROSE && flag_pic)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      target_flags |= MASK_HALF_PIC;\t\t\t\t\t\\\n+      flag_pic = 0;\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_HALF_PIC)\t\t\t\t\t\t\t\\\n     half_pic_init ();\t\t\t\t\t\t\t\\\n }\n@@ -310,6 +329,24 @@ while (0)\n }\n \n \n+/* Define the strings used for the special svr4 .type and .size directives.\n+   These strings generally do not vary from one system running svr4 to\n+   another, but if a given system (e.g. m88k running svr) needs to use\n+   different pseudo-op names for these, they may be overridden in the\n+   file which includes this one.  */\n+\n+#define TYPE_ASM_OP\t\".type\"\n+#define SIZE_ASM_OP\t\".size\"\n+#define WEAK_ASM_OP\t\".weak\"\n+\n+/* The following macro defines the format used to output the second\n+   operand of the .type assembler directive.  Different svr4 assemblers\n+   expect various different forms for this operand.  The one given here\n+   is just a default.  You may need to override it in your machine-\n+   specific tm.h file (depending upon the particulars of your assembler).  */\n+\n+#define TYPE_OPERAND_FMT\t\"@%s\"\n+\n /* A C statement (sans semicolon) to output to the stdio stream\n    STREAM any text necessary for declaring the name NAME of an\n    initialized variable which is being defined.  This macro must\n@@ -326,25 +363,154 @@ do\t\t\t\t\t\t\t\t\t\\\n  {\t\t\t\t\t\t\t\t\t\\\n    ASM_OUTPUT_LABEL(STREAM,NAME);                                       \\\n    HALF_PIC_DECLARE (NAME);\t\t\t\t\t\t\\\n+   if (TARGET_ELF)\t\t\t\t\t\t\t\\\n+     {\t\t\t\t\t\t\t\t\t\\\n+       fprintf (STREAM, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\\\n+       assemble_name (STREAM, NAME);\t\t\t\t\t\\\n+       putc (',', STREAM);\t\t\t\t\t\t\\\n+       fprintf (STREAM, TYPE_OPERAND_FMT, \"object\");\t\t\t\\\n+       putc ('\\n', STREAM);\t\t\t\t\t\t\\\n+       if (!flag_inhibit_size_directive)\t\t\t\t\\\n+\t {\t\t\t\t\t\t\t\t\\\n+\t   fprintf (STREAM, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\\\n+\t   assemble_name (STREAM, NAME);\t\t\t\t\\\n+\t   fprintf (STREAM, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (decl))); \\\n+\t }\t\t\t\t\t\t\t\t\\\n+     }\t\t\t\t\t\t\t\t\t\\\n  }\t\t\t\t\t\t\t\t\t\\\n while (0)\n \n /* This is how to declare a function name. */\n \n+#undef\tASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(STREAM,NAME,DECL)\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n  {\t\t\t\t\t\t\t\t\t\\\n-   ASM_OUTPUT_LABEL(STREAM,NAME);                                       \\\n+   ASM_OUTPUT_LABEL(STREAM,NAME);\t\t\t\t\t\\\n    HALF_PIC_DECLARE (NAME);\t\t\t\t\t\t\\\n+   if (TARGET_ELF)\t\t\t\t\t\t\t\\\n+     {\t\t\t\t\t\t\t\t\t\\\n+       fprintf (STREAM, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\\\n+       assemble_name (STREAM, NAME);\t\t\t\t\t\\\n+       putc (',', STREAM);\t\t\t\t\t\t\\\n+       fprintf (STREAM, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n+       putc ('\\n', STREAM);\t\t\t\t\t\t\\\n+       ASM_DECLARE_RESULT (STREAM, DECL_RESULT (DECL));\t\t\t\\\n+     }\t\t\t\t\t\t\t\t\t\\\n  }\t\t\t\t\t\t\t\t\t\\\n while (0)\n \n+/* Write the extra assembler code needed to declare a function's result.\n+   Most svr4 assemblers don't require any special declaration of the\n+   result value, but there are exceptions.  */\n+\n+#ifndef ASM_DECLARE_RESULT\n+#define ASM_DECLARE_RESULT(FILE, RESULT)\n+#endif\n+\n+/* This is how to declare the size of a function.  */\n+\n+#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    if (TARGET_ELF && !flag_inhibit_size_directive)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        char label[256];\t\t\t\t\t\t\\\n+\tstatic int labelno;\t\t\t\t\t\t\\\n+\tlabelno++;\t\t\t\t\t\t\t\\\n+\tASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\t\\\n+\tASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n+\tfprintf (FILE, \"/\\t%s\\t \", SIZE_ASM_OP);\t\t\t\\\n+\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n+        fprintf (FILE, \",\");\t\t\t\t\t\t\\\n+\tassemble_name (FILE, label);\t\t\t\t\t\\\n+        fprintf (FILE, \"-\");\t\t\t\t\t\t\\\n+\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n+\tputc ('\\n', FILE);\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+/* Attach a special .ident directive to the end of the file to identify\n+   the version of GCC which compiled this code.  The format of the\n+   .ident string is patterned after the ones produced by native svr4\n+   C compilers.  */\n+\n+#define IDENT_ASM_OP \".ident\"\n+\n+/* Allow #sccs in preprocessor.  */\n+\n+#define SCCS_DIRECTIVE\n+\n /* This says what to print at the end of the assembly file */\n #define ASM_FILE_END(STREAM)\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     if (HALF_PIC_P ())\t\t\t\t\t\t\t\\\n       HALF_PIC_FINISH (STREAM);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    if (TARGET_IDENT)\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tfprintf ((STREAM), \"\\t%s\\t\\\"GCC: (GNU) %s -O%d\",\t\t\\\n+\t\t IDENT_ASM_OP, version_string, optimize);\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (write_symbols == PREFERRED_DEBUGGING_TYPE)\t\t\t\\\n+\t  fprintf ((STREAM), \" -g%d\", (int)debug_info_level);\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\telse if (write_symbols == DBX_DEBUG)\t\t\t\t\\\n+\t  fprintf ((STREAM), \" -gstabs%d\", (int)debug_info_level);\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\telse if (write_symbols == DWARF_DEBUG)\t\t\t\t\\\n+\t  fprintf ((STREAM), \" -gdwarf%d\", (int)debug_info_level);\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\telse if (write_symbols != NO_DEBUG)\t\t\t\t\\\n+\t  fprintf ((STREAM), \" -g??%d\", (int)debug_info_level);\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (flag_omit_frame_pointer)\t\t\t\t\t\\\n+\t  fprintf ((STREAM), \" -fomit-frame-pointer\");\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (flag_strength_reduce)\t\t\t\t\t\\\n+\t  fprintf ((STREAM), \" -fstrength-reduce\");\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (flag_unroll_loops)\t\t\t\t\t\t\\\n+\t  fprintf ((STREAM), \" -funroll-loops\");\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (flag_force_mem)\t\t\t\t\t\t\\\n+\t  fprintf ((STREAM), \" -fforce-mem\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (flag_force_addr)\t\t\t\t\t\t\\\n+\t  fprintf ((STREAM), \" -fforce-addr\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (flag_inline_functions)\t\t\t\t\t\\\n+\t  fprintf ((STREAM), \" -finline-functions\");\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (flag_caller_saves)\t\t\t\t\t\t\\\n+\t  fprintf ((STREAM), \" -fcaller-saves\");\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (flag_pic)\t\t\t\t\t\t\t\\\n+\t  fprintf ((STREAM), (flag_pic > 1) ? \" -fPIC\" : \" -fpic\");\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (flag_inhibit_size_directive)\t\t\t\t\\\n+\t  fprintf ((STREAM), \" -finhibit-size-directive\");\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (flag_gnu_linker)\t\t\t\t\t\t\\\n+\t  fprintf ((STREAM), \" -fgnu-linker\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (profile_flag)\t\t\t\t\t\t\\\n+\t  fprintf ((STREAM), \" -p\");\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (profile_block_flag)\t\t\t\t\t\t\\\n+\t  fprintf ((STREAM), \" -a\");\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (TARGET_IEEE_FP)\t\t\t\t\t\t\\\n+\t  fprintf ((STREAM), \" -mieee-fp\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (TARGET_HALF_PIC)\t\t\t\t\t\t\\\n+\t  fprintf ((STREAM), \" -mhalf-pic\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tfprintf ((STREAM), (TARGET_486) ? \" -m486\" : \" -m386\");\t\t\\\n+\tfprintf ((STREAM), (TARGET_ELF) ? \" -melf\\\"\\n\" : \" -mrose\\\"\\n\"); \\\n+      }\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n "}]}