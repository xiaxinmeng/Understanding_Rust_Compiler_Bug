{"sha": "8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI1YmMzNzRiMWY0MmZiMTNhNzhjMDBjYmQ2NTU3YjMyNDhlNjZjNg==", "commit": {"author": {"name": "Chris Jefferson", "email": "chris@bubblescope.net", "date": "2005-12-26T10:53:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-12-26T10:53:42Z"}, "message": "mt_allocator.h (__mt_alloc::__mt_alloc): Remove name of unused parameter.\n\n2005-12-26  Chris Jefferson  <chris@bubblescope.net>\n\n\t* include/ext/mt_allocator.h (__mt_alloc::__mt_alloc): Remove\n\tname of unused parameter.\n\t* include/bits/stream_iterator.h (istream_iterator::istream_iterator):\n\tConstruct _M_value.\n\t* include/debug/functions.h (__check_valid_range): Add\n\t__attribute__((unused)).\n\t* include/tr1/hashtable (hashtable::end): Remove name of unused\n\tparameter.\n\t* include/tr1/tuple_iterate.h (tuple::tuple): Likewise.\n\t(tuple::operator=): Add __attribute__((unused)).\n\t* include/tr1/functional (Fnv_hash<4>::hash): Add static_cast.\n\t(Fnv_hash<8>::hash): Likewise.\n\n\t* testsuite/25_algorithms/iter_swap/20577.cc (swap): Remove name of\n\tunused parameter.\n\t* testsuite/25_algorithms/unique_copy/check_type.cc (S2::S2,X2::X2):\n\tLikewise.\n\t* testsuite/22_locale/ctype/narrow/char/19955.cc (do_narrow): Likewise.\n\t* testsuite/22_locale/ctype/is/char/9858.cc (Derived::do_is, \n\tDerived::do_scan_is, Derived::do_scan_not, Derived2::do_is,\n\tDerived2::do_scan_is, Derived2::do_scan_not): Likewise.\n\t* testsuite/22_locale/time_put/put/wchar_t/12439_1.cc (TP::do_put):\n\tLikewise.\n\t* testsuite/22_locale/time_put/put/wchar_t/12439_3.cc (TP::do_put):\n\tLikewise.\n\t* testsuite/22_locale/time_put/put/char/12439_1.cc (TP::do_put):\n\tLikewise.\n\t* testsuite/22_locale/time_put/put/char/12439_3.cc (TP::do_put):\n\tLikewise.\n\t* testsuite/testsuite_io.h (fail_num_get::do_get, fail_num_put::do_put):\n\tLikewise.\n\t* testsuite/25_algorithms/find/17441.cc (find): Likewise.\n\t* testsuite/23_containers/vector/cons/clear_allocator.cc\n\t(clear_alloc::clear_alloc): Likewise.\n\t* testsuite/23_containers/vector/bool/clear_allocator.cc\n\t(clear_alloc::clear_alloc): Likewise.\n\t* testsuite/23_containers/list/cons/clear_allocator.cc\n\t(clear_alloc::clear_alloc): Likewise.\n\t* testsuite/23_containers/set/modifiers/16728.cc (test_container):\n\tLikewise.\n\t* testsuite/27_io/basic_ios/cons/char/3.cc (char_traits::to_char_type,\n\tto_int_type): Likewise.\n\t* testsuite/27_io/basic_filebuf/imbue/12206.cc (codecvt::do_out, do_in,\n\tdo_unshift, do_length): Likewise.\n\t* testsuite/21_strings/basic_string/capacity/1.cc \n\t(operator==(A<T>,A<T>), operator<(A<T>,A<T>),\n\tchar_traits::to_char_type, char_traits::to_int_type): Likewise\n\t* testsuite/testsuite_character.h (ctype::do_is, ctype::do_scan_is,\n\tctype::do_scan_not, do_toupper, do_tolower): Likewise.\n\t* testsuite/25_algorithms/replace_copy/check_type.cc (Z::operator=):\n\tAdd missing return statement.\n\t* testsuite/25_algorithms/replace_copy_if/check_type.cc (Z::operator=):\n\tLikewise.\n\t* testsuite/testsuite_iterators.h (output_iterator_wrapper::operator=,\n\trandom_access_iterator_wrapper::operator==): Likewise.\n\t* testsuite/20_util/functional/binders/1.cc (s::f_int_int_const,\n\ts::f_int_int, s::f_int_void_const, s::f_int_void): Likewise.\n\t* testsuite/27_io/types/1.cc (test01): Likewise.\n\t* testsuite/27_io/basic_ostream/write/wchar_t/1.cc (test01): Likewise.\n\t* testsuite/27_io/basic_ostream/write/char/1.cc (test01): Likewise.\n\t* testsuite/21_strings/c_strings/wchar_t/24559.cc (main): Likewise.\n\t* testsuite/27_io/basic_istream/ignore/wchar_t/2.cc (check): Add static\n\tcast.\n\t* testsuite/27_io/basic_istream/ignore/char/2.cc (check): Likewise.\n\t* testsuite/27_io/basic_istream/getline/wchar_t/5.cc (check): Likewise.\n\t* testsuite/27_io/basic_istream/getline/char/5.cc (check): Likewise.\n\t* testsuite/testsuite_allocator.h (check_new): Likewise.\n\t(check_deallocate_null): Add missing return value.\n\t* testsuite/ext/pool_allocator/allocate_chunk.cc (test01):\n\tMake variable unsigned.\n\t* testsuite/23_containers/vector/modifiers/erase/1.cc (N,N1,N2,N3,N4,\n\tN5,test01): Likewise.\n\t* testsuite/26_numerics/valarray/valarray_subset_assignment.cc\n\t(check_array): Likewise.\n\t(main): Removed unused variable.\n\t* testsuite/27_io/basic_streambuf/in_avail/wchar_t/1.cc (test05):\n\tRemoved unused variable.\n\t* testsuite/27_io/basic_ostream/flush/wchar_t/1.cc (test01): Likewise.\n\t* testsuite/27_io/basic_ostream/flush/char/1.cc (test01): Likewise.\n\t* testsuite/27_io/basic_ostream/endl/wchar_t/1.cc (test01): Likewise.\n\t* testsuite/27_io/basic_ostream/endl/char/1.cc (test01): Likewise.\n\t* testsuite/27_io/basic_ostream/ends/wchar_t/1.cc (test01): Likewise.\n\t* testsuite/27_io/basic_ostream/ends/char/1.cc (test01): Likewise.\n\t* testsuite/tr1/2_general_utilities/memory/shared_ptr/\n\tassign/shared_ptr.cc (test01): Correct return type.\t\n\t* testsuite/27_io/basic_filebuf/close/char/2.cc (test_02):\n\tAdd default value to close_num.\n\nFrom-SVN: r109062", "tree": {"sha": "b1e0aec32dc6dc3e22a7bc93d413273c9bd3dfb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1e0aec32dc6dc3e22a7bc93d413273c9bd3dfb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/comments", "author": {"login": "ChrisJefferson", "id": 811527, "node_id": "MDQ6VXNlcjgxMTUyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/811527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisJefferson", "html_url": "https://github.com/ChrisJefferson", "followers_url": "https://api.github.com/users/ChrisJefferson/followers", "following_url": "https://api.github.com/users/ChrisJefferson/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisJefferson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisJefferson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisJefferson/subscriptions", "organizations_url": "https://api.github.com/users/ChrisJefferson/orgs", "repos_url": "https://api.github.com/users/ChrisJefferson/repos", "events_url": "https://api.github.com/users/ChrisJefferson/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisJefferson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a1a11b29e2cb4695463699aa14eb07c4eb83539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a1a11b29e2cb4695463699aa14eb07c4eb83539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a1a11b29e2cb4695463699aa14eb07c4eb83539"}], "stats": {"total": 331, "additions": 211, "deletions": 120}, "files": [{"sha": "f5c25b9640bcfc10c505266dff6187d174905635", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -1,3 +1,93 @@\n+2005-12-26  Chris Jefferson  <chris@bubblescope.net>\n+\n+\t* include/ext/mt_allocator.h (__mt_alloc::__mt_alloc): Remove\n+\tname of unused parameter.\n+\t* include/bits/stream_iterator.h (istream_iterator::istream_iterator):\n+\tConstruct _M_value.\n+\t* include/debug/functions.h (__check_valid_range): Add\n+\t__attribute__((unused)).\n+\t* include/tr1/hashtable (hashtable::end): Remove name of unused\n+\tparameter.\n+\t* include/tr1/tuple_iterate.h (tuple::tuple): Likewise.\n+\t(tuple::operator=): Add __attribute__((unused)).\n+\t* include/tr1/functional (Fnv_hash<4>::hash): Add static_cast.\n+\t(Fnv_hash<8>::hash): Likewise.\n+\n+\t* testsuite/25_algorithms/iter_swap/20577.cc (swap): Remove name of\n+\tunused parameter.\n+\t* testsuite/25_algorithms/unique_copy/check_type.cc (S2::S2,X2::X2):\n+\tLikewise.\n+\t* testsuite/22_locale/ctype/narrow/char/19955.cc (do_narrow): Likewise.\n+\t* testsuite/22_locale/ctype/is/char/9858.cc (Derived::do_is, \n+\tDerived::do_scan_is, Derived::do_scan_not, Derived2::do_is,\n+\tDerived2::do_scan_is, Derived2::do_scan_not): Likewise.\n+\t* testsuite/22_locale/time_put/put/wchar_t/12439_1.cc (TP::do_put):\n+\tLikewise.\n+\t* testsuite/22_locale/time_put/put/wchar_t/12439_3.cc (TP::do_put):\n+\tLikewise.\n+\t* testsuite/22_locale/time_put/put/char/12439_1.cc (TP::do_put):\n+\tLikewise.\n+\t* testsuite/22_locale/time_put/put/char/12439_3.cc (TP::do_put):\n+\tLikewise.\n+\t* testsuite/testsuite_io.h (fail_num_get::do_get, fail_num_put::do_put):\n+\tLikewise.\n+\t* testsuite/25_algorithms/find/17441.cc (find): Likewise.\n+\t* testsuite/23_containers/vector/cons/clear_allocator.cc\n+\t(clear_alloc::clear_alloc): Likewise.\n+\t* testsuite/23_containers/vector/bool/clear_allocator.cc\n+\t(clear_alloc::clear_alloc): Likewise.\n+\t* testsuite/23_containers/list/cons/clear_allocator.cc\n+\t(clear_alloc::clear_alloc): Likewise.\n+\t* testsuite/23_containers/set/modifiers/16728.cc (test_container):\n+\tLikewise.\n+\t* testsuite/27_io/basic_ios/cons/char/3.cc (char_traits::to_char_type,\n+\tto_int_type): Likewise.\n+\t* testsuite/27_io/basic_filebuf/imbue/12206.cc (codecvt::do_out, do_in,\n+\tdo_unshift, do_length): Likewise.\n+\t* testsuite/21_strings/basic_string/capacity/1.cc \n+\t(operator==(A<T>,A<T>), operator<(A<T>,A<T>),\n+\tchar_traits::to_char_type, char_traits::to_int_type): Likewise\n+\t* testsuite/testsuite_character.h (ctype::do_is, ctype::do_scan_is,\n+\tctype::do_scan_not, do_toupper, do_tolower): Likewise.\n+\t* testsuite/25_algorithms/replace_copy/check_type.cc (Z::operator=):\n+\tAdd missing return statement.\n+\t* testsuite/25_algorithms/replace_copy_if/check_type.cc (Z::operator=):\n+\tLikewise.\n+\t* testsuite/testsuite_iterators.h (output_iterator_wrapper::operator=,\n+\trandom_access_iterator_wrapper::operator==): Likewise.\n+\t* testsuite/20_util/functional/binders/1.cc (s::f_int_int_const,\n+\ts::f_int_int, s::f_int_void_const, s::f_int_void): Likewise.\n+\t* testsuite/27_io/types/1.cc (test01): Likewise.\n+\t* testsuite/27_io/basic_ostream/write/wchar_t/1.cc (test01): Likewise.\n+\t* testsuite/27_io/basic_ostream/write/char/1.cc (test01): Likewise.\n+\t* testsuite/21_strings/c_strings/wchar_t/24559.cc (main): Likewise.\n+\t* testsuite/27_io/basic_istream/ignore/wchar_t/2.cc (check): Add static\n+\tcast.\n+\t* testsuite/27_io/basic_istream/ignore/char/2.cc (check): Likewise.\n+\t* testsuite/27_io/basic_istream/getline/wchar_t/5.cc (check): Likewise.\n+\t* testsuite/27_io/basic_istream/getline/char/5.cc (check): Likewise.\n+\t* testsuite/testsuite_allocator.h (check_new): Likewise.\n+\t(check_deallocate_null): Add missing return value.\n+\t* testsuite/ext/pool_allocator/allocate_chunk.cc (test01):\n+\tMake variable unsigned.\n+\t* testsuite/23_containers/vector/modifiers/erase/1.cc (N,N1,N2,N3,N4,\n+\tN5,test01): Likewise.\n+\t* testsuite/26_numerics/valarray/valarray_subset_assignment.cc\n+\t(check_array): Likewise.\n+\t(main): Removed unused variable.\n+\t* testsuite/27_io/basic_streambuf/in_avail/wchar_t/1.cc (test05):\n+\tRemoved unused variable.\n+\t* testsuite/27_io/basic_ostream/flush/wchar_t/1.cc (test01): Likewise.\n+\t* testsuite/27_io/basic_ostream/flush/char/1.cc (test01): Likewise.\n+\t* testsuite/27_io/basic_ostream/endl/wchar_t/1.cc (test01): Likewise.\n+\t* testsuite/27_io/basic_ostream/endl/char/1.cc (test01): Likewise.\n+\t* testsuite/27_io/basic_ostream/ends/wchar_t/1.cc (test01): Likewise.\n+\t* testsuite/27_io/basic_ostream/ends/char/1.cc (test01): Likewise.\n+\t* testsuite/tr1/2_general_utilities/memory/shared_ptr/\n+\tassign/shared_ptr.cc (test01): Correct return type.\t\n+\t* testsuite/27_io/basic_filebuf/close/char/2.cc (test_02):\n+\tAdd default value to close_num.\n+\n 2005-12-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_algobase.h (fill(const _Deque_iterator&,"}, {"sha": "ce3e675bc6a5afb7b275495f4304f31329b2c2f7", "filename": "libstdc++-v3/include/bits/stream_iterator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -60,7 +60,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     public:\n       ///  Construct end of input stream iterator.\n       istream_iterator()\n-      : _M_stream(0), _M_ok(false) {}\n+      : _M_stream(0), _M_value(), _M_ok(false) {}\n \n       ///  Construct start of input stream iterator.\n       istream_iterator(istream_type& __s)"}, {"sha": "4f1c733d62ad8fe6f687daea80ecb730111b6c61", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -154,7 +154,8 @@ namespace __gnu_debug\n   template<typename _InputIterator>\n     inline _InputIterator\n     __check_valid_range(const _InputIterator& __first,\n-\t\t\tconst _InputIterator& __last)\n+\t\t\tconst _InputIterator& __last\n+\t\t\t__attribute__((__unused__)))\n     {\n       _GLIBCXX_DEBUG_ASSERT(__valid_range(__first, __last));\n       return __first;\n@@ -163,7 +164,8 @@ namespace __gnu_debug\n   /** Checks that __s is non-NULL or __n == 0, and then returns __s. */\n   template<typename _CharT, typename _Integer>\n     inline const _CharT*\n-    __check_string(const _CharT* __s, const _Integer& __n)\n+    __check_string(const _CharT* __s,\n+\t\t   const _Integer& __n __attribute__((__unused__)))\n     {\n #ifdef _GLIBCXX_DEBUG_PEDANTIC\n       _GLIBCXX_DEBUG_ASSERT(__s != 0 || __n == 0);"}, {"sha": "fb7e370f954fd33abac721a07836e22f2f134b28", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -631,7 +631,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       __mt_alloc(const __mt_alloc&) throw() { }\n \n       template<typename _Tp1, typename _Poolp1>\n-        __mt_alloc(const __mt_alloc<_Tp1, _Poolp1>& obj) throw() { }\n+        __mt_alloc(const __mt_alloc<_Tp1, _Poolp1>&) throw() { }\n \n       ~__mt_alloc() throw() { }\n "}, {"sha": "a8e3d3cce7ebda5bf35ebf4d73b20e48ddf3f5b5", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -1156,7 +1156,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       static std::size_t\n       hash(const char* first, std::size_t length)\n       {\n-\tstd::size_t result = 2166136261UL;\n+\tstd::size_t result = static_cast<std::size_t>(2166136261UL);\n \tfor (; length > 0; --length)\n \t  {\n \t    result ^= (std::size_t)*first++;\n@@ -1172,7 +1172,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       static std::size_t\n       hash(const char* first, std::size_t length)\n       {\n-\tstd::size_t result = 14695981039346656037ULL;\n+\tstd::size_t result = static_cast<std::size_t>(14695981039346656037ULL);\n \tfor (; length > 0; --length)\n \t  {\n \t    result ^= (std::size_t)*first++;"}, {"sha": "4cf4ae9c192e404b25133f9ac96716e5f2ef445f", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -1103,15 +1103,15 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       { return local_iterator(m_buckets[n]); }\n   \n       local_iterator\n-      end(size_type n)\n+      end(size_type)\n       { return local_iterator(0); }\n   \n       const_local_iterator\n       begin(size_type n) const\n       { return const_local_iterator(m_buckets[n]); }\n   \n       const_local_iterator\n-      end(size_type n) const\n+      end(size_type) const\n       { return const_local_iterator(0); }\n \n       float"}, {"sha": "320073bda52d045ae15741fe5837b3043e64b3eb", "filename": "libstdc++-v3/include/tr1/tuple_iterate.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_iterate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_iterate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_iterate.h?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -93,13 +93,13 @@ template<_GLIBCXX_TEMPLATE_PARAMS>\n \n #else\n \n-    tuple(const tuple& __in)\n+    tuple(const tuple&)\n     { }\n \n #endif\n \n     tuple&\n-    operator=(const tuple& __in)\n+    operator=(const tuple& __in __attribute__((__unused__)) )\n     {\n       _GLIBCXX_TUPLE_ASSIGN\n         return *this;"}, {"sha": "2d374e60fb0876712620a8d2163a88dca226c658", "filename": "libstdc++-v3/testsuite/20_util/functional/binders/1.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunctional%2Fbinders%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunctional%2Fbinders%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunctional%2Fbinders%2F1.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -27,12 +27,12 @@ struct s\n {\n   void f_void_int_const(int) const {}\n   void f_void_int(int) {}\n-  int f_int_int_const(int) const {}\n-  int f_int_int(int) {}\n+  int f_int_int_const(int) const { return 1; }\n+  int f_int_int(int) {return 1; }\n   void f_void_void_const() const {}\n   void f_void_void() {}\n-  int f_int_void_const() const {}\n-  int f_int_void() {}\n+  int f_int_void_const() const { return 1; }\n+  int f_int_void() { return 1; }\n };\n \n void test01(s& a)"}, {"sha": "3ea346996c391d1e3e3718568bf649c137db9258", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/1.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2F1.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -28,11 +28,11 @@ template<typename T>\n \n template<typename T>\n   bool\n-  operator==(const A<T>& a, const A<T>& b) { return true; }\n+  operator==(const A<T>&, const A<T>&) { return true; }\n \n template<typename T>\n   bool\n-  operator<(const A<T>& a, const A<T>& b) { return true; }\n+  operator<(const A<T>&, const A<T>&) { return true; }\n \n struct B { };\n \n@@ -104,11 +104,11 @@ namespace std\n       }\n \n       static char_type \n-      to_char_type(const int_type& __c)\n+      to_char_type(const int_type&)\n       { return char_type(); }\n \n       static int_type \n-      to_int_type(const char_type& __c) { return int_type(); }\n+      to_int_type(const char_type&) { return int_type(); }\n \n       static bool \n       eq_int_type(const int_type& __c1, const int_type& __c2)"}, {"sha": "3af6372e0c555f85449ac4a127e7657d51ec64da", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/char/9858.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F9858.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F9858.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F9858.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -39,15 +39,15 @@ class Derived : public std::ctype<char>\n   do_is(mask, char_type) const { return true; }\n \n   const char_type* \n-  do_is(const char_type* lo, const char_type* hi, mask* vec) const \n+  do_is(const char_type*, const char_type* hi, mask*) const \n   { return hi; }\n \n   const char_type* \n-  do_scan_is(mask m, const char_type* lo, const char_type* hi) const \n+  do_scan_is(mask, const char_type*, const char_type* hi) const \n   { return hi; }\n \n   const char_type* \n-  do_scan_not(mask m, const char_type* lo, const char_type* hi) const \n+  do_scan_not(mask, const char_type*, const char_type* hi) const \n   { return hi; }\n };\n \n@@ -58,15 +58,15 @@ class Derived2 : public Derived\n   do_is(mask, char_type) const { called = 1; return true; }\n \n   const char_type* \n-  do_is(const char_type* lo, const char_type* hi, mask* vec) const \n+  do_is(const char_type*, const char_type* hi, mask*) const \n   { called = 5; return hi; }\n \n   const char_type* \n-  do_scan_is(mask m, const char_type* lo, const char_type* hi) const \n+  do_scan_is(mask, const char_type*, const char_type* hi) const \n   { called = 10; return hi; }\n \n   const char_type* \n-  do_scan_not(mask m, const char_type* lo, const char_type* hi) const \n+  do_scan_not(mask, const char_type*, const char_type* hi) const \n   { called = 15; return hi; }\n };\n "}, {"sha": "9f944cc1dfbdaacb7d4a96dac71096b6e732e4f3", "filename": "libstdc++-v3/testsuite/22_locale/ctype/narrow/char/19955.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F19955.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F19955.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F19955.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -36,7 +36,7 @@ class Ctype1\n protected:\n   const char*\n   do_narrow(const char* lo, const char* hi,\n-\t    char dflt, char* to) const \n+\t    char, char* to) const \n   {\n     for (int i = 0; lo != hi; ++lo, ++to, ++i)\n       *to = *lo + i;"}, {"sha": "4680c7aecfa752f43b9b6b926d14d9c65b9dca0d", "filename": "libstdc++-v3/testsuite/22_locale/time_put/put/char/12439_1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fchar%2F12439_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fchar%2F12439_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fchar%2F12439_1.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -31,7 +31,7 @@ class TP : public std::time_put<char>\n \n protected:\n   iter_type do_put(iter_type s, std::ios_base&, char_type fill,\n-\t\t   const std::tm* t, char format, char modifier) const\n+\t\t   const std::tm*, char, char) const\n   {\n     fill_chars.push_back(fill);\n     return s;"}, {"sha": "4408565350e5d6f998a7808826a92d6e8519fc80", "filename": "libstdc++-v3/testsuite/22_locale/time_put/put/char/12439_3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fchar%2F12439_3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fchar%2F12439_3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fchar%2F12439_3.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -29,8 +29,8 @@ class TP : public std::time_put<char>\n   mutable std::string format_chars;\n \n protected:\n-  iter_type do_put(iter_type s, std::ios_base&, char_type fill,\n-\t\t   const std::tm* t, char format, char modifier) const\n+  iter_type do_put(iter_type s, std::ios_base&, char_type,\n+\t\t   const std::tm*, char format, char) const\n   {\n     format_chars.push_back(format);\n     return s;"}, {"sha": "7ef4643875bec43fac13cd10dfa599024e7fe9b4", "filename": "libstdc++-v3/testsuite/22_locale/time_put/put/wchar_t/12439_1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F12439_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F12439_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F12439_1.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -31,7 +31,7 @@ class TP : public std::time_put<wchar_t>\n \n protected:\n   iter_type do_put(iter_type s, std::ios_base&, char_type fill,\n-\t\t   const std::tm* t, char format, char modifier) const\n+\t\t   const std::tm*, char, char) const\n   {\n     fill_chars.push_back(fill);\n     return s;"}, {"sha": "82601e8295988658ba4151b735a4ff20bbb1699a", "filename": "libstdc++-v3/testsuite/22_locale/time_put/put/wchar_t/12439_3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F12439_3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F12439_3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F12439_3.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -29,8 +29,8 @@ class TP : public std::time_put<wchar_t>\n   mutable std::string format_chars;\n \n protected:\n-  iter_type do_put(iter_type s, std::ios_base&, char_type fill,\n-\t\t   const std::tm* t, char format, char modifier) const\n+  iter_type do_put(iter_type s, std::ios_base&, char_type,\n+\t\t   const std::tm*, char format, char) const\n   {\n     format_chars.push_back(format);\n     return s;"}, {"sha": "863688f1cae4e22a9a39e4008503af780dfd35aa", "filename": "libstdc++-v3/testsuite/23_containers/deque/cons/clear_allocator.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fclear_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fclear_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fclear_allocator.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -37,11 +37,11 @@ template<typename T>\n     clear_alloc() throw()\n     { }\n     \n-    clear_alloc(clear_alloc const& _wa) throw()\n+    clear_alloc(clear_alloc const&) throw() : new_allocator<T>() \n     { }\n     \n     template<typename T1>\n-    clear_alloc(clear_alloc<T1> const& _wa) throw()\n+    clear_alloc(clear_alloc<T1> const&) throw()\n       { }\n \n     virtual ~clear_alloc() throw()"}, {"sha": "0a62618ef787cbae8c38909b68ff06e616c3b31c", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/clear_allocator.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fclear_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fclear_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2Fclear_allocator.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -37,11 +37,11 @@ template<typename T>\n     clear_alloc() throw()\n     { }\n     \n-    clear_alloc(clear_alloc const& _wa) throw()\n+    clear_alloc(clear_alloc const&) throw() : new_allocator<T>() \n     { }\n     \n     template<typename T1>\n-      clear_alloc(clear_alloc<T1> const& _wa) throw()\n+    clear_alloc(clear_alloc<T1> const&) throw()\n       { }\n \n     virtual ~clear_alloc() throw()"}, {"sha": "2120f5bbff7a2072b59c00ee8bc0649adb67b5c3", "filename": "libstdc++-v3/testsuite/23_containers/set/modifiers/16728.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2F16728.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2F16728.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2F16728.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -75,7 +75,7 @@ template<typename Container>\n \n template<typename Container>\n   void\n-  test_container(Container obj, bool run_threaded = false)\n+  test_container(Container, bool run_threaded = false)\n   {\n     do_loop<Container>();\n     std::ostringstream comment;"}, {"sha": "bbb6523808f2a79abb4dc332fd649f0bdc9c7622", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/clear_allocator.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fclear_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fclear_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fclear_allocator.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -37,11 +37,11 @@ template<typename T>\n     clear_alloc() throw()\n     { }\n     \n-    clear_alloc(clear_alloc const& _wa) throw()\n+    clear_alloc(clear_alloc const&) throw() : new_allocator<T>() \n     { }\n     \n     template<typename T1>\n-      clear_alloc(clear_alloc<T1> const& _wa) throw()\n+      clear_alloc(clear_alloc<T1> const&) throw()\n       { }\n \n     virtual ~clear_alloc() throw()"}, {"sha": "787d2c09abb6a8283f01e9b2b1dafe7015f3c1eb", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/clear_allocator.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fclear_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fclear_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fclear_allocator.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -37,11 +37,11 @@ template<typename T>\n     clear_alloc() throw()\n     { }\n     \n-    clear_alloc(clear_alloc const& _wa) throw()\n+    clear_alloc(clear_alloc const&) throw() : new_allocator<T>() \n     { }\n     \n     template<typename T1>\n-      clear_alloc(clear_alloc<T1> const& _wa) throw()\n+    clear_alloc(clear_alloc<T1> const&) throw()\n       { }\n \n     virtual ~clear_alloc() throw()"}, {"sha": "0b2d497fefddfd6f119fc9624b7d76ebaa52c2c3", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/erase/1.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Ferase%2F1.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -29,12 +29,12 @@ const int A2[] = {0, 2, 3, 4, 10, 11, 12, 13, 14, 15};\n const int A3[] = {0, 2, 3, 4, 10, 11};\n const int A4[] = {4, 10, 11};\n const int A5[] = {4, 10};\n-const int  N = sizeof(A)  / sizeof(int);\n-const int N1 = sizeof(A1) / sizeof(int);\n-const int N2 = sizeof(A2) / sizeof(int);\n-const int N3 = sizeof(A3) / sizeof(int);\n-const int N4 = sizeof(A4) / sizeof(int);\n-const int N5 = sizeof(A5) / sizeof(int);\n+const unsigned int  N = sizeof(A)  / sizeof(int);\n+const unsigned int N1 = sizeof(A1) / sizeof(int);\n+const unsigned int N2 = sizeof(A2) / sizeof(int);\n+const unsigned int N3 = sizeof(A3) / sizeof(int);\n+const unsigned int N4 = sizeof(A4) / sizeof(int);\n+const unsigned int N5 = sizeof(A5) / sizeof(int);\n \n void\n test01()\n@@ -85,17 +85,17 @@ test02()\n   typedef vec_type::iterator          iterator_type;\n \n   vec_type v, v1, v2, v3, v4, v5;\n-  for (int i = 0; i < N; ++i)\n+  for (unsigned int i = 0; i < N; ++i)\n     v.push_back(std::vector<int>(1, A[i]));\n-  for (int i = 0; i < N1; ++i)\n+  for (unsigned int i = 0; i < N1; ++i)\n     v1.push_back(std::vector<int>(1, A1[i]));\n-  for (int i = 0; i < N2; ++i)\n+  for (unsigned int i = 0; i < N2; ++i)\n     v2.push_back(std::vector<int>(1, A2[i]));\n-  for (int i = 0; i < N3; ++i)\n+  for (unsigned int i = 0; i < N3; ++i)\n     v3.push_back(std::vector<int>(1, A3[i]));\n-  for (int i = 0; i < N4; ++i)\n+  for (unsigned int i = 0; i < N4; ++i)\n     v4.push_back(std::vector<int>(1, A4[i]));\n-  for (int i = 0; i < N5; ++i)\n+  for (unsigned int i = 0; i < N5; ++i)\n     v5.push_back(std::vector<int>(1, A5[i]));\n   \n   iterator_type it1 = v.erase(v.begin() + 1);"}, {"sha": "3d4b9066e7c16c17efa76e735cf0e9d507851bc2", "filename": "libstdc++-v3/testsuite/25_algorithms/find/17441.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2F17441.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2F17441.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2F17441.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -24,8 +24,8 @@ using namespace std;\n \n template<typename InputIterator, typename Tp>\n   InputIterator\n-  find(InputIterator first, InputIterator last,\n-       const Tp& val, input_iterator_tag)\n+  find(InputIterator first, InputIterator,\n+       const Tp&, input_iterator_tag)\n   { return first; }\n \n // libstdc++/17441"}, {"sha": "01d9628edb8248c4bff1e611011fe27d3a2521fe", "filename": "libstdc++-v3/testsuite/25_algorithms/iter_swap/20577.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fiter_swap%2F20577.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fiter_swap%2F20577.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fiter_swap%2F20577.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -47,7 +47,7 @@ test2()\n int int_swap_count;\n \n struct X {};\n-void swap(X& i, X& j)\n+void swap(X&, X&)\n { ++int_swap_count; }\n \n void"}, {"sha": "efdc14796cdd5f22c084ad4373942c852e538504", "filename": "libstdc++-v3/testsuite/25_algorithms/replace_copy/check_type.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy%2Fcheck_type.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -34,11 +34,11 @@ struct Z\n {\n   Z&\n   operator=(const X&)\n-  { }\n+  { return *this; }\n \n   Z&\n   operator=(const Y&)\n-  { }\n+  { return *this; }\n };\n \n bool"}, {"sha": "f95e2b9c8b15cdd6ed6c6d184fd3773bb4956f88", "filename": "libstdc++-v3/testsuite/25_algorithms/replace_copy_if/check_type.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2Fcheck_type.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -34,11 +34,11 @@ struct Z\n {\n   Z&\n   operator=(const X&)\n-  { }\n+  { return *this; }\n \n   Z&\n   operator=(const Y&)\n-  { }\n+  { return *this; }\n };\n \n bool"}, {"sha": "1fe11b189402f19c766930981bab4489e043fbf6", "filename": "libstdc++-v3/testsuite/25_algorithms/unique_copy/check_type.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2Fcheck_type.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -30,7 +30,7 @@ struct S1 { };\n \n struct S2\n {\n-  S2(const S1& s1) {}\n+  S2(const S1&) {}\n };\n \n bool \n@@ -40,7 +40,7 @@ struct X1 { };\n \n struct X2\n {\n-  X2(const X1& x1) {}\n+  X2(const X1&) {}\n };\n \n bool "}, {"sha": "4ce22afb31aa99f1d10a0590cb75a55878a63fde", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/valarray_subset_assignment.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fvalarray_subset_assignment.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fvalarray_subset_assignment.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2Fvalarray_subset_assignment.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -35,14 +35,13 @@\n \n bool check_array(std::valarray<double>& a, double b[])\n {\n-  for (int i=0; i < a.size(); i++)\n+  for (unsigned int i=0; i < a.size(); i++)\n     if (a[i] != b[i]) return false;\n   return true;\n }\n \n int main()\n {\n-  double dvar = 1.0;\n   std::valarray<double> val_d(10);  //  0 1 2 3 4 5 6 7 8 9 \n   std::valarray<double> val_d1(10); // 10 9 8 7 6 5 4 3 2 1\n "}, {"sha": "f96e041ecbb4be54efac551979407902c785db0d", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F2.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -43,7 +43,7 @@ const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n void test_02()\n {\n   bool test __attribute__((unused)) = true;\n-  int close_num;\n+  int close_num = 0;\n \n   // read (ext)\n   FILE* f2 = fopen(name_01, \"r\");"}, {"sha": "721e0333840c18d108dadccfe139b5b8639cb08b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/12206.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2F12206.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2F12206.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2F12206.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -65,21 +65,21 @@ namespace std\n     static locale::id id;\n     \n   protected:\n-    virtual result do_out(mbstate_t&, const Char* from,\n-\t\t\t  const Char* from_end,\n-\t\t\t  const Char*& from_next, char* to,\n-\t\t\t  char* to_limit, char*& to_next) const\n+    virtual result do_out(mbstate_t&, const Char*,\n+\t\t\t  const Char*,\n+\t\t\t  const Char*&, char*,\n+\t\t\t  char*, char*&) const\n     { return ok; }\n-    virtual result do_in(mbstate_t&, const char* from,\n-\t\t\t const char* from_end,\n-\t\t\t const char*& from_next, Char* to,\n-\t\t\t Char* to_limit, Char*& to_next) const\n+    virtual result do_in(mbstate_t&, const char*,\n+\t\t\t const char*,\n+\t\t\t const char*&, Char*,\n+\t\t\t Char*, Char*&) const\n     { return ok; }\n-    virtual result do_unshift(mbstate_t&, char* to, char*,\n-\t\t\t      char*& to_next) const\n+    virtual result do_unshift(mbstate_t&, char*, char*,\n+\t\t\t      char*&) const\n     { return noconv; }\n-    virtual int do_length(mbstate_t&, const char* from,\n-\t\t\t  const char* from_end, size_t max) const\n+    virtual int do_length(mbstate_t&, const char*,\n+\t\t\t  const char*, size_t) const\n     { return 1; }\n     virtual int do_encoding() const throw()\n     { return 1; }"}, {"sha": "d55d6ad46c7205e56ae7d589907c71337aeb6fab", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/cons/char/3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcons%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcons%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcons%2Fchar%2F3.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -100,11 +100,11 @@ namespace std\n       }\n \n       static char_type \n-      to_char_type(const int_type& __c)\n+      to_char_type(const int_type&)\n       { return char_type(); }\n \n       static int_type \n-      to_int_type(const char_type& __c) { return int_type(); }\n+      to_int_type(const char_type&) { return int_type(); }\n \n       static bool \n       eq_int_type(const int_type& __c1, const int_type& __c2)"}, {"sha": "dccaa9f938b90da64b62e1667fe1635644c5caa3", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/getline/char/5.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fchar%2F5.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -49,7 +49,8 @@ void check(istream& stream, const string& str, unsigned nchunks, char delim)\n   while (stream.getline(buf, sizeof(buf), delim))\n     {\n       index_new = str.find(delim, index);\n-      VERIFY( stream.gcount() == index_new - index + 1 );\n+      VERIFY( static_cast<string::size_type>(stream.gcount()) ==\n+\t      index_new - index + 1 );\n       VERIFY( !str.compare(index, index_new - index, buf) );\n       index = index_new + 1;\n       ++n;"}, {"sha": "19cd94ff4a41af62d0841f3a9410ea33552ca83d", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/getline/wchar_t/5.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fgetline%2Fwchar_t%2F5.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -51,7 +51,8 @@ check(wistream& stream, const wstring& str, unsigned nchunks, wchar_t delim)\n   while (stream.getline(buf, sizeof(buf) / sizeof(wchar_t), delim))\n     {\n       index_new = str.find(delim, index);\n-      VERIFY( stream.gcount() == index_new - index + 1 );\n+      VERIFY( static_cast<string::size_type>(stream.gcount()) ==\n+\t       index_new - index + 1 );\n       VERIFY( !str.compare(index, index_new - index, buf) );\n       index = index_new + 1;\n       ++n;"}, {"sha": "1ed3a8435e30eec428645f82272c6559958527a2", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/ignore/char/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fchar%2F2.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -49,7 +49,8 @@ void check(istream& stream, const string& str, unsigned nchunks, char delim)\n   while (stream.ignore(numeric_limits<streamsize>::max(), delim).good())\n     {\n       index_new = str.find(delim, index);\n-      VERIFY( stream.gcount() == index_new - index + 1 );\n+      VERIFY( static_cast<string::size_type>(stream.gcount()) ==\n+\t      index_new - index + 1 );\n       index = index_new + 1;\n       ++n;\n     }"}, {"sha": "0107f87dcef1343056bc2a59ce9b467903c6d7d5", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/ignore/wchar_t/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fignore%2Fwchar_t%2F2.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -51,7 +51,8 @@ check(wistream& stream, const wstring& str, unsigned nchunks, wchar_t delim)\n   while (stream.ignore(numeric_limits<streamsize>::max(), delim).good())\n     {\n       index_new = str.find(delim, index);\n-      VERIFY( stream.gcount() == index_new - index + 1 );\n+      VERIFY( static_cast<string::size_type>(stream.gcount()) ==\n+\t      index_new - index + 1 );\n       index = index_new + 1;\n       ++n;\n     }"}, {"sha": "8c14a5d47c7cbbd4f261ebb6a824804988483daa", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/endl/char/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fendl%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fendl%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fendl%2Fchar%2F1.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -28,7 +28,6 @@ void test01(void)\n {\n   bool test __attribute__((unused)) = true;\n \n-  const char str_lit01[] = \"  venice \";\n   const std::string str01(\" santa barbara \");\n   std::string str04;\n   std::string str05;"}, {"sha": "2214a7216bbd6e05369fcf070261ba2eeec05a99", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/endl/wchar_t/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fendl%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fendl%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fendl%2Fwchar_t%2F1.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -26,7 +26,6 @@ void test01(void)\n {\n   bool test __attribute__((unused)) = true;\n \n-  const wchar_t str_lit01[] = L\"  venice \";\n   const std::wstring str01(L\" santa barbara \");\n   std::wstring str04;\n   std::wstring str05;"}, {"sha": "88ace74a7fa2d328e0f426e027504cee78e7c5fd", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/ends/char/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fchar%2F1.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -28,7 +28,6 @@ void test01(void)\n {\n   bool test __attribute__((unused)) = true;\n \n-  const char str_lit01[] = \"  venice \";\n   const std::string str01(\" santa barbara \");\n   std::string str04;\n   std::string str05;"}, {"sha": "babae552737560bb9eefd1f73789f01ec3d9bbb0", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/ends/wchar_t/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fends%2Fwchar_t%2F1.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -26,7 +26,6 @@ void test01(void)\n {\n   bool test __attribute__((unused)) = true;\n \n-  const wchar_t str_lit01[] = L\"  venice \";\n   const std::wstring str01(L\" santa barbara \");\n   std::wstring str04;\n   std::wstring str05;"}, {"sha": "5ca3a2cb953742bb7aa695276206c2bc4ef2c079", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/flush/char/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F1.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -28,7 +28,6 @@ void test01(void)\n {\n   bool test __attribute__((unused)) = true;\n \n-  const char str_lit01[] = \"  venice \";\n   const std::string str01(\" santa barbara \");\n   std::string str04;\n   std::string str05;"}, {"sha": "34847e5b54c0b209770ce7f4248721c9f12c538b", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/flush/wchar_t/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fwchar_t%2F1.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -26,7 +26,6 @@ void test01(void)\n {\n   bool test __attribute__((unused)) = true;\n \n-  const wchar_t str_lit01[] = L\"  venice \";\n   const std::wstring str01(L\" santa barbara \");\n   std::wstring str04;\n   std::wstring str05;"}, {"sha": "7ac042e92c95067e8342233a62053428d694eea5", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/write/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fwrite%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fwrite%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fwrite%2Fchar%2F1.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -42,8 +42,8 @@ class Buf : public std::streambuf\n \n void test01()\n {\n-  bool test = true;\n-\n+  bool test __attribute__((unused)) = true;\n+  \n   Buf buf;\n   std::ostream os(&buf);\n "}, {"sha": "c0d317e4e14cfa8d2ef93ba49a6b351ae5e37a1d", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/write/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fwrite%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fwrite%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fwrite%2Fwchar_t%2F1.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -40,8 +40,8 @@ class Buf : public std::wstreambuf\n \n void test01()\n {\n-  bool test = true;\n-\n+  bool test __attribute__((unused)) = true;\n+  \n   Buf buf;\n   std::wostream os(&buf);\n "}, {"sha": "6ea710bab397f26a6cd89a50abb6b85db7458aea", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/in_avail/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fin_avail%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fin_avail%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fin_avail%2Fchar%2F1.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -39,7 +39,7 @@ void test05()\n   typedef size_t \t\t\tsize_type;\n \n   bool test __attribute__((unused)) = true;\n-  std::streamoff  \t\t\tstrmof_1, strmof_2;\n+  std::streamoff  \t\t\tstrmof_1;\n   testbuf\tsb01;\n \n   // int in_avail()"}, {"sha": "d25c9c25e1c7ddcc550439aedb401b6553fc718a", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/in_avail/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fin_avail%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fin_avail%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fin_avail%2Fwchar_t%2F1.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -39,7 +39,7 @@ void test05()\n   typedef size_t \t\t\tsize_type;\n \n   bool test __attribute__((unused)) = true;\n-  std::streamoff  \t\t\tstrmof_1, strmof_2;\n+  std::streamoff  \t\t\tstrmof_1;\n   testbuf\tsb01;\n \n   // int in_avail()"}, {"sha": "1d72d5d604d55d909e05d0245d9a2cffd94c0814", "filename": "libstdc++-v3/testsuite/ext/pool_allocator/allocate_chunk.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fallocate_chunk.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fallocate_chunk.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fallocate_chunk.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -53,7 +53,7 @@ void test01()\n   // The constant 20 comes from __pool_alloc_base::_M_refill. See\n   // also __pool_alloc_base::_M_allocate_chunk.\n   __pool_alloc<small> alloc_small;\n-  for (int i = 0; i < 20 * sizeof(big) / sizeof(small) + 1; ++i)\n+  for (unsigned int i = 0; i < 20 * sizeof(big) / sizeof(small) + 1; ++i)\n     alloc_small.allocate(1);\n }\n "}, {"sha": "a9e4847105b12d4c35762eeb8e8106a6ac8151d6", "filename": "libstdc++-v3/testsuite/testsuite_character.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -323,7 +323,7 @@ namespace std\n       { }\n \n       virtual bool\n-      do_is(mask m, char_type c) const\n+      do_is(mask, char_type) const\n       { return false; }\n \n       virtual const char_type*\n@@ -334,27 +334,27 @@ namespace std\n       }\n \n       virtual const char_type*\n-      do_scan_is(mask m, const char_type* low, const char_type* high) const\n+      do_scan_is(mask, const char_type*, const char_type* high) const\n       { return high; }\n \n       virtual const char_type*\n-      do_scan_not(mask m, const char_type* low, const char_type* high) const\n+      do_scan_not(mask, const char_type* low, const char_type*) const\n       { return low; }\n \n       virtual char_type\n       do_toupper(char_type c) const\n       { return c; }\n \n       virtual const char_type*\n-      do_toupper(char_type*  low, const char_type*  high) const\n+      do_toupper(char_type*, const char_type*  high) const\n       { return high; }\n \n       virtual char_type\n       do_tolower(char_type c) const\n       { return c; }\n \n       virtual const char_type*\n-      do_tolower(char_type*  low, const char_type*  high) const\n+      do_tolower(char_type*, const char_type*  high) const\n       { return high; }\n \n       virtual char_type"}, {"sha": "e6f1c03d6223ece8cbd154019b6230184e5cd125", "filename": "libstdc++-v3/testsuite/testsuite_io.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -214,57 +214,57 @@ namespace __gnu_test\n \n     protected:\n       iter_type \n-      do_get(iter_type a, iter_type, ios_base&, ios_base::iostate&, bool&) const\n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const\n       { throw facet_error(); return iter_type(); }\n \n       virtual iter_type \n       do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, long&) const\n       { throw facet_error(); return iter_type(); }\n       \n       virtual iter_type \n-      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, \n \t     unsigned short&) const\n       { throw facet_error(); return iter_type(); }\n       \n       virtual iter_type \n-      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, \n \t     unsigned int&) const\n       { throw facet_error(); return iter_type(); }\n       \n       virtual iter_type \n-      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, \n \t     unsigned long&) const\n       { throw facet_error(); return iter_type(); }\n \n #ifdef _GLIBCXX_USE_LONG_LONG \n       virtual iter_type \n-      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, \n \t     long long&) const\n       { throw facet_error(); return iter_type(); }\n       \n       virtual iter_type \n-      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, \n \t     unsigned long long&) const\n       { throw facet_error(); return iter_type(); }\n #endif\n \n       virtual iter_type \n-      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, \n \t     float&) const\n       { throw facet_error(); return iter_type(); }\n       \n       virtual iter_type \n-      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, \n \t     double&) const\n       { throw facet_error(); return iter_type(); }\n       \n       virtual iter_type \n-      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, \n \t     long double&) const\n       { throw facet_error(); return iter_type(); }\n       \n       virtual iter_type \n-      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, \n \t     void*&) const\n       { throw facet_error(); return iter_type(); }\n     };\n@@ -284,37 +284,37 @@ namespace __gnu_test\n \n     protected:\n       iter_type \n-      do_put(iter_type, ios_base&, char_type __fill, bool __v) const\n+      do_put(iter_type, ios_base&, char_type, bool) const\n       { throw facet_error(); return iter_type(NULL); }\n       \n       virtual iter_type \n-      do_put(iter_type, ios_base&, char_type __fill, long __v) const\n+      do_put(iter_type, ios_base&, char_type, long) const\n       { throw facet_error(); return iter_type(NULL); }\n \n       virtual iter_type \n-      do_put(iter_type, ios_base&, char_type __fill, unsigned long) const\n+      do_put(iter_type, ios_base&, char_type, unsigned long) const\n       { throw facet_error(); return iter_type(NULL); }\n \n #ifdef _GLIBCXX_USE_LONG_LONG \n       virtual iter_type \n-      do_put(iter_type, ios_base&, char_type __fill, long long __v) const\n+      do_put(iter_type, ios_base&, char_type, long long) const\n       { throw facet_error(); return iter_type(NULL); }\n \n       virtual iter_type \n-      do_put(iter_type, ios_base&, char_type __fill, unsigned long long) const\n+      do_put(iter_type, ios_base&, char_type, unsigned long long) const\n       { throw facet_error(); return iter_type(NULL); }\n #endif\n       \n       virtual iter_type \n-      do_put(iter_type, ios_base&, char_type __fill, double __v) const\n+      do_put(iter_type, ios_base&, char_type, double) const\n       { throw facet_error(); return iter_type(NULL); }\n \n       virtual iter_type \n-      do_put(iter_type, ios_base&, char_type __fill, long double __v) const\n+      do_put(iter_type, ios_base&, char_type, long double) const\n       { throw facet_error(); return iter_type(NULL); }\n       \n       virtual iter_type \n-      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const\n+      do_put(iter_type, ios_base&, char_type, const void*) const\n       { throw facet_error(); return iter_type(NULL); }\n     };\n "}, {"sha": "7119783c93b0e08865b6b38123e80041c825f67e", "filename": "libstdc++-v3/testsuite/testsuite_iterators.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_iterators.h?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -144,6 +144,7 @@ namespace __gnu_test\n     {\n       ptr = in.ptr;\n       SharedInfo = in.SharedInfo;\n+      return *this;\n     }\n \n     output_iterator_wrapper&\n@@ -394,6 +395,7 @@ namespace __gnu_test\n     {\n       this->ptr = in.ptr;\n       this->SharedInfo = in.SharedInfo;\n+      return *this;\n     }\n \n     random_access_iterator_wrapper&"}, {"sha": "93f90ce57ea8d30bb7faee7ee6dc5c1a4a4fe100", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/memory/shared_ptr/assign/assign.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fassign%2Fassign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fassign%2Fassign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fassign%2Fassign.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -44,7 +44,7 @@ struct reset_count_struct\n // 2.2.3.3 shared_ptr assignment [tr.util.smartptr.shared.assign]\n \n // Assignment from shared_ptr<Y>\n-int\n+void\n test01()\n {\n   reset_count_struct __attribute__((unused)) reset;"}, {"sha": "90ab7eec03f92c64b35ae53b4fbbaad1cffe0b90", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/memory/shared_ptr/assign/shared_ptr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fassign%2Fshared_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5bc374b1f42fb13a78c00cbd6557b3248e66c6/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fassign%2Fshared_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fassign%2Fshared_ptr.cc?ref=8b5bc374b1f42fb13a78c00cbd6557b3248e66c6", "patch": "@@ -57,7 +57,7 @@ struct reset_count_struct\n // 2.2.3.3 shared_ptr assignment [tr.util.smartptr.shared.assign]\n \n // Assignment from shared_ptr<Y>\n-int\n+void\n test01()\n {\n   reset_count_struct __attribute__((unused)) reset;"}]}