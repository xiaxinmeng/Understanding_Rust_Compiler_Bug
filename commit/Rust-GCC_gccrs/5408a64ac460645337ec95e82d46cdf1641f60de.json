{"sha": "5408a64ac460645337ec95e82d46cdf1641f60de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQwOGE2NGFjNDYwNjQ1MzM3ZWM5NWU4MmQ0NmNkZjE2NDFmNjBkZQ==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2016-06-13T17:59:12Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2016-06-13T17:59:12Z"}, "message": "altivec.h (vec_absd): New macro for vector absolute difference unsigned.\n\ngcc/ChangeLog:\n\n2016-06-13  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/altivec.h (vec_absd): New macro for vector absolute\n\tdifference unsigned.\n\t(vec_absdb): New macro for vector absolute difference unsigned\n\tbyte.\n\t(vec_absdh): New macro for vector absolute difference unsigned\n\thalf-word.\n\t(vec_absdw): New macro for vector absolute difference unsigned word.\n\t* config/rs6000/altivec.md (UNSPEC_VADU): New value.\n\t(vadu<mode>3): New insn.\n\t(*p9_vadu<mode>3): New insn.\n\t* config/rs6000/rs6000-builtin.def (vadub): New built-in\n\tdefinition.\n\t(vaduh): New built-in definition.\n\t(vaduw): New built-in definition.\n\t(vadu): New overloaded built-in definition.\n\t(vadub): New overloaded built-in definition.\n\t(vaduh): New overloaded built-in definition.\n\t(vaduw): New overloaded built-in definition.\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n\toverloaded vector absolute difference unsigned functions.\n\t* doc/extend.texi (PowerPC AltiVec Built-in Functions): Document\n\tthe ISA 3.0 vector absolute difference unsigned built-in functions.\n\ngcc/testsuite/ChangeLog:\n\n2016-06-13  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/vadsdu-0.c: New test.\n\t* gcc.target/powerpc/vadsdu-1.c: New test.\n\t* gcc.target/powerpc/vadsdu-2.c: New test.\n\t* gcc.target/powerpc/vadsdu-3.c: New test.\n\t* gcc.target/powerpc/vadsdu-4.c: New test.\n\t* gcc.target/powerpc/vadsdu-5.c: New test.\n\t* gcc.target/powerpc/vadsdub-1.c: New test.\n\t* gcc.target/powerpc/vadsdub-2.c: New test.\n\t* gcc.target/powerpc/vadsduh-1.c: New test.\n\t* gcc.target/powerpc/vadsduh-2.c: New test.\n\t* gcc.target/powerpc/vadsduw-1.c: New test.\n\t* gcc.target/powerpc/vadsduw-2.c: New test.\n\nFrom-SVN: r237390", "tree": {"sha": "c8e0b6a68b73c818254c85eb31065255e601adef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8e0b6a68b73c818254c85eb31065255e601adef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5408a64ac460645337ec95e82d46cdf1641f60de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5408a64ac460645337ec95e82d46cdf1641f60de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5408a64ac460645337ec95e82d46cdf1641f60de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5408a64ac460645337ec95e82d46cdf1641f60de/comments", "author": null, "committer": null, "parents": [{"sha": "ec67c62e3c3b4f2cc6f328135b87f562e20e1b75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec67c62e3c3b4f2cc6f328135b87f562e20e1b75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec67c62e3c3b4f2cc6f328135b87f562e20e1b75"}], "stats": {"total": 393, "additions": 393, "deletions": 0}, "files": [{"sha": "541c76ad076f6001f02b6bbbce5b11b38c25d79d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -1,3 +1,28 @@\n+2016-06-13  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/altivec.h (vec_absd): New macro for vector absolute\n+\tdifference unsigned.\n+\t(vec_absdb): New macro for vector absolute difference unsigned\n+\tbyte.\n+\t(vec_absdh): New macro for vector absolute difference unsigned\n+\thalf-word.\n+\t(vec_absdw): New macro for vector absolute difference unsigned word.\n+\t* config/rs6000/altivec.md (UNSPEC_VADU): New value.\n+\t(vadu<mode>3): New insn.\n+\t(*p9_vadu<mode>3): New insn.\n+\t* config/rs6000/rs6000-builtin.def (vadub): New built-in\n+\tdefinition.\n+\t(vaduh): New built-in definition.\n+\t(vaduw): New built-in definition.\n+\t(vadu): New overloaded built-in definition.\n+\t(vadub): New overloaded built-in definition.\n+\t(vaduh): New overloaded built-in definition.\n+\t(vaduw): New overloaded built-in definition.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n+\toverloaded vector absolute difference unsigned functions.\n+\t* doc/extend.texi (PowerPC AltiVec Built-in Functions): Document\n+\tthe ISA 3.0 vector absolute difference unsigned built-in functions.\n+\n 2016-06-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa-sccvn.c (vn_reference_lookup_3): Use a uniform test and"}, {"sha": "9123d969be9fab8b819d46e57eb1bc7c0f98ae3d", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -402,6 +402,11 @@\n #define vec_vprtybq __builtin_vec_vprtybq\n #endif\n \n+#define vec_absd __builtin_vec_vadu\n+#define vec_absdb __builtin_vec_vadub\n+#define vec_absdh __builtin_vec_vaduh\n+#define vec_absdw __builtin_vec_vaduw\n+\n #define vec_slv __builtin_vec_vslv\n #define vec_srv __builtin_vec_vsrv\n #endif"}, {"sha": "0cd67a4ec997908b347635e8bfb3de03ae7df275", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -114,6 +114,7 @@\n    UNSPEC_STVLXL\n    UNSPEC_STVRX\n    UNSPEC_STVRXL\n+   UNSPEC_VADU\n    UNSPEC_VSLV\n    UNSPEC_VSRV\n    UNSPEC_VMULWHUB\n@@ -3464,6 +3465,24 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"vecsimple\")])\n \n+;; Vector absolute difference unsigned\n+(define_expand \"vadu<mode>3\"\n+  [(set (match_operand:VI 0 \"register_operand\")\n+        (unspec:VI [(match_operand:VI 1 \"register_operand\")\n+\t\t    (match_operand:VI 2 \"register_operand\")]\n+         UNSPEC_VADU))]\n+  \"TARGET_P9_VECTOR\")\n+\n+;; Vector absolute difference unsigned\n+(define_insn \"*p9_vadu<mode>3\"\n+  [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n+        (unspec:VI [(match_operand:VI 1 \"register_operand\" \"v\")\n+\t\t    (match_operand:VI 2 \"register_operand\" \"v\")]\n+         UNSPEC_VADU))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vabsdu<wd> %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n ;; Vector count trailing zeros\n (define_insn \"*p9v_ctz<mode>2\"\n   [(set (match_operand:VI2 0 \"register_operand\" \"=v\")"}, {"sha": "80fe92a9d45b2eadfb72673e51642b22f326cb21", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -1757,6 +1757,17 @@ BU_P9V_AV_2 (VSRV,\t\t\"vsrv\",\t\t\tCONST, vsrv)\n BU_P9V_OVERLOAD_2 (VSLV,\t\"vslv\")\n BU_P9V_OVERLOAD_2 (VSRV,\t\"vsrv\")\n \n+/* 2 argument vector functions added in ISA 3.0 (power9). */\n+BU_P9V_AV_2 (VADUB,\t\t\"vadub\",\t\tCONST,  vaduv16qi3)\n+BU_P9V_AV_2 (VADUH,\t\t\"vaduh\",\t\tCONST,  vaduv8hi3)\n+BU_P9V_AV_2 (VADUW,\t\t\"vaduw\",\t\tCONST,  vaduv4si3)\n+\n+/* ISA 3.0 vector overloaded 2 argument functions. */\n+BU_P9V_OVERLOAD_2 (VADU,\t\"vadu\")\n+BU_P9V_OVERLOAD_2 (VADUB,\t\"vadub\")\n+BU_P9V_OVERLOAD_2 (VADUH,\t\"vaduh\")\n+BU_P9V_OVERLOAD_2 (VADUW,\t\"vaduw\")\n+\n \f\n /* 2 argument extended divide functions added in ISA 2.06.  */\n BU_P7_MISC_2 (DIVWE,\t\t\"divwe\",\tCONST,\tdive_si)"}, {"sha": "79a7e88a5ee0e15bc74f3008219b3b4793e428c4", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -4240,6 +4240,28 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P9V_BUILTIN_VEC_VCTZD, P9V_BUILTIN_VCTZD,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0, 0 },\n \n+  { P9V_BUILTIN_VEC_VADU, P9V_BUILTIN_VADUB,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VADU, P9V_BUILTIN_VADUH,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VADU, P9V_BUILTIN_VADUW,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, 0 },\n+\n+  { P9V_BUILTIN_VEC_VADUB, P9V_BUILTIN_VADUB,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, 0 },\n+\n+  { P9V_BUILTIN_VEC_VADUH, P9V_BUILTIN_VADUH,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI, 0 },\n+\n+  { P9V_BUILTIN_VEC_VADUW, P9V_BUILTIN_VADUW,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, 0 },\n+\n   { P8V_BUILTIN_VEC_VGBBD, P8V_BUILTIN_VGBBD,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0, 0 },\n   { P8V_BUILTIN_VEC_VGBBD, P8V_BUILTIN_VGBBD,"}, {"sha": "06d52b8ce0d21e6638e21acf27a6ef219bf1b7b2", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -17493,6 +17493,31 @@ result returned from the @code{vec_srv} function is a\n (0x07 & shift_distance[i]))},\n with this resulting value coerced to the @code{unsigned char} type.\n \n+The following built-in functions are available for the PowerPC family\n+of processors, starting with ISA 3.0 or later (@option{-mcpu=power9})\n+or with @option{-mpower9-vector}:\n+@smallexample\n+__vector unsigned char\n+vec_absd (__vector unsigned char arg1, __vector unsigned char arg2);\n+__vector unsigned short\n+vec_absd (__vector unsigned short arg1, __vector unsigned short arg2);\n+__vector unsigned int\n+vec_absd (__vector unsigned int arg1, __vector unsigned int arg2);\n+\n+__vector unsigned char\n+vec_absdb (__vector unsigned char arg1, __vector unsigned char arg2);\n+__vector unsigned short\n+vec_absdh (__vector unsigned short arg1, __vector unsigned short arg2);\n+__vector unsigned int\n+vec_absdw (__vector unsigned int arg1, __vector unsigned int arg2);\n+@end smallexample\n+\n+The @code{vec_absd}, @code{vec_absdb}, @code{vec_absdh}, and\n+@code{vec_absdw} built-in functions each computes the absolute\n+differences of the pairs of vector elements supplied in its two vector\n+arguments, placing the absolute differences into the corresponding\n+elements of the vector result.\n+\n If the cryptographic instructions are enabled (@option{-mcrypto} or\n @option{-mcpu=power8}), the following builtins are enabled.\n "}, {"sha": "cd8531b866a4b812621c63373b1e85bb131fec40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -1,3 +1,18 @@\n+2016-06-13  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/vadsdu-0.c: New test.\n+\t* gcc.target/powerpc/vadsdu-1.c: New test.\n+\t* gcc.target/powerpc/vadsdu-2.c: New test.\n+\t* gcc.target/powerpc/vadsdu-3.c: New test.\n+\t* gcc.target/powerpc/vadsdu-4.c: New test.\n+\t* gcc.target/powerpc/vadsdu-5.c: New test.\n+\t* gcc.target/powerpc/vadsdub-1.c: New test.\n+\t* gcc.target/powerpc/vadsdub-2.c: New test.\n+\t* gcc.target/powerpc/vadsduh-1.c: New test.\n+\t* gcc.target/powerpc/vadsduh-2.c: New test.\n+\t* gcc.target/powerpc/vadsduw-1.c: New test.\n+\t* gcc.target/powerpc/vadsduw-2.c: New test.\n+\n 2016-06-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/c99-init-2.c (c): Update expected error message."}, {"sha": "aa1d61de7411549b9f77fe958222d2baa9ad2028", "filename": "gcc/testsuite/gcc.target/powerpc/vadsdu-0.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-0.c?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target p9vector_hw } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+__vector unsigned int\n+doAbsoluteDifferenceUnsignedInt (__vector unsigned int *p,\n+\t\t\t\t __vector unsigned int *q)\n+{\n+  __vector unsigned int source_1, source_2;\n+  __vector unsigned int result;\n+\n+  source_1 = *p;\n+  source_2 = *q;\n+\n+  result = __builtin_vec_vadu (source_1, source_2);\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"vabsduw\" } } */"}, {"sha": "cf10283b199ce7246174aa9401f11242383f9374", "filename": "gcc/testsuite/gcc.target/powerpc/vadsdu-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-1.c?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target p9vector_hw } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+__vector unsigned int\n+doAbsoluteDifferenceUnsignedIntMacro (__vector unsigned int *p,\n+\t\t\t\t      __vector unsigned int *q)\n+{\n+  __vector unsigned int result, source_1, source_2;\n+\n+  source_1 = *p;\n+  source_2 = *q;\n+\n+  result = vec_absd (source_1, source_2);\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"vabsduw\" } } */"}, {"sha": "27ea2b3255932f2fb7c279c432dabbe384f8cb88", "filename": "gcc/testsuite/gcc.target/powerpc/vadsdu-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-2.c?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target p9vector_hw } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+__vector unsigned short\n+doAbsoluteDifferenceUnsignedShort (__vector unsigned short *p,\n+\t\t\t\t   __vector unsigned short *q)\n+{\n+  __vector unsigned short source_1, source_2;\n+  __vector unsigned short result;\n+\n+  source_1 = *p;\n+  source_2 = *q;\n+\n+  result = __builtin_vec_vadu (source_1, source_2);\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"vabsduh\" } } */"}, {"sha": "be0df32e2207a54b6efdab54c38b2011faf20b5d", "filename": "gcc/testsuite/gcc.target/powerpc/vadsdu-3.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-3.c?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target p9vector_hw } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+__vector unsigned short\n+doAbsoluteDifferenceUnsignedShortMacro (__vector unsigned short *p,\n+\t\t\t\t      __vector unsigned short *q)\n+{\n+  __vector unsigned short result, source_1, source_2;\n+\n+  source_1 = *p;\n+  source_2 = *q;\n+\n+  result = vec_absd (source_1, source_2);\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"vabsduh\" } } */"}, {"sha": "ffbd570c711e7980e6179858f0e0bd05236cb48a", "filename": "gcc/testsuite/gcc.target/powerpc/vadsdu-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-4.c?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target p9vector_hw } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+__vector unsigned char\n+doAbsoluteDifferenceUnsignedChar (__vector unsigned char *p,\n+\t\t\t\t  __vector unsigned char *q)\n+{\n+  __vector unsigned char source_1, source_2;\n+  __vector unsigned char result;\n+\n+  source_1 = *p;\n+  source_2 = *q;\n+\n+  result = __builtin_vec_vadu (source_1, source_2);\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"vabsdub\" } } */"}, {"sha": "20aa25efe21617223f31f433d2c9f939853483cd", "filename": "gcc/testsuite/gcc.target/powerpc/vadsdu-5.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdu-5.c?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target p9vector_hw } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+__vector unsigned char\n+doAbsoluteDifferenceUnsignedCharMacro (__vector unsigned char *p,\n+\t\t\t\t       __vector unsigned char *q)\n+{\n+  __vector unsigned char result, source_1, source_2;\n+\n+  source_1 = *p;\n+  source_2 = *q;\n+\n+  result = vec_absd (source_1, source_2);\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"vabsdub\" } } */"}, {"sha": "de1b9eef1cf5a864193d3f38ebbfa34d63f76a51", "filename": "gcc/testsuite/gcc.target/powerpc/vadsdub-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdub-1.c?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target p9vector_hw } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+__vector unsigned char\n+doAbsoluteDifferenceUnsigned (__vector unsigned char *p,\n+\t\t\t      __vector unsigned char *q)\n+{\n+  __vector unsigned char source_1, source_2;\n+  __vector unsigned char uc_result;\n+\n+  source_1 = *p;\n+  source_2 = *q;\n+\n+  uc_result = __builtin_vec_vadub (source_1, source_2);\n+  return uc_result;\n+}\n+\n+/* { dg-final { scan-assembler \"vabsdub\" } } */"}, {"sha": "de1b9eef1cf5a864193d3f38ebbfa34d63f76a51", "filename": "gcc/testsuite/gcc.target/powerpc/vadsdub-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsdub-2.c?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target p9vector_hw } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+__vector unsigned char\n+doAbsoluteDifferenceUnsigned (__vector unsigned char *p,\n+\t\t\t      __vector unsigned char *q)\n+{\n+  __vector unsigned char source_1, source_2;\n+  __vector unsigned char uc_result;\n+\n+  source_1 = *p;\n+  source_2 = *q;\n+\n+  uc_result = __builtin_vec_vadub (source_1, source_2);\n+  return uc_result;\n+}\n+\n+/* { dg-final { scan-assembler \"vabsdub\" } } */"}, {"sha": "c208790d8110f829e2089e146919dff27a1af213", "filename": "gcc/testsuite/gcc.target/powerpc/vadsduh-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsduh-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsduh-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsduh-1.c?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target p9vector_hw } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+__vector unsigned short\n+doAbsoluteDifferenceUnsigned (__vector unsigned short *p,\n+\t\t\t      __vector unsigned short *q)\n+{\n+  __vector unsigned short source_1, source_2;\n+  __vector unsigned short us_result;\n+\n+  source_1 = *p;\n+  source_2 = *q;\n+\n+  us_result = __builtin_vec_vaduh (source_1, source_2);\n+  return us_result;\n+}\n+\n+/* { dg-final { scan-assembler \"vabsduh\" } } */"}, {"sha": "5fa2157e18e9c5fbf99ea2978fe5dd77fc2b81ef", "filename": "gcc/testsuite/gcc.target/powerpc/vadsduh-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsduh-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsduh-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsduh-2.c?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target p9vector_hw } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+__vector unsigned short\n+doAbsoluteDifferenceUnsignedMacro (__vector unsigned short *p,\n+\t\t\t\t   __vector unsigned short *q)\n+{\n+  __vector unsigned short result, source_1, source_2;\n+\n+  source_1 = *p;\n+  source_2 = *q;\n+\n+  result = vec_absdh (source_1, source_2);\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"vabsduh\" } } */"}, {"sha": "6cb66ba4c9f8918e4d880360c34c8b485e0897c7", "filename": "gcc/testsuite/gcc.target/powerpc/vadsduw-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsduw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsduw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsduw-1.c?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target p9vector_hw } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+__vector unsigned int\n+doAbsoluteDifferenceUnsigned (__vector unsigned int *p,\n+\t\t\t      __vector unsigned int *q)\n+{\n+  __vector unsigned int source_1, source_2;\n+  __vector unsigned int ui_result;\n+\n+  source_1 = *p;\n+  source_2 = *q;\n+\n+  ui_result = __builtin_vec_vaduw (source_1, source_2);\n+  return ui_result;\n+}\n+\n+/* { dg-final { scan-assembler \"vabsduw\" } } */"}, {"sha": "a614cf6d4ae6427255419c548b435b09f984032d", "filename": "gcc/testsuite/gcc.target/powerpc/vadsduw-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsduw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5408a64ac460645337ec95e82d46cdf1641f60de/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsduw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvadsduw-2.c?ref=5408a64ac460645337ec95e82d46cdf1641f60de", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target p9vector_hw } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+__vector unsigned int\n+doAbsoluteDifferenceUnsignedMacro (__vector unsigned int *p,\n+\t\t\t\t   __vector unsigned int *q)\n+{\n+  __vector unsigned int result, source_1, source_2;\n+\n+  source_1 = *p;\n+  source_2 = *q;\n+\n+  result = vec_absdw (source_1, source_2);\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"vabsduw\" } } */"}]}