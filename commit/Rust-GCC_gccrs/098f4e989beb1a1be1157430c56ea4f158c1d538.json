{"sha": "098f4e989beb1a1be1157430c56ea4f158c1d538", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk4ZjRlOTg5YmViMWExYmUxMTU3NDMwYzU2ZWE0ZjE1OGMxZDUzOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-03T08:38:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-03T08:38:08Z"}, "message": "openmp: Assorted depend/affinity/iterator related fixes [PR100859]\n\nThe depend-iterator-3.C testcases shows various bugs.\n\n1) tsubst_omp_clauses didn't handle OMP_CLAUSE_AFFINITY (should be\n   handled like OMP_CLAUSE_DEPEND)\n2) because locators can be arbitrary lvalue expressions, we need\n   to allow for C++ array section base (especially when array section\n   is just an array reference) FIELD_DECLs, handle them as this->member,\n   but don't need to privatize in any way\n3) similarly for this as base\n4) depend(inout: this) is invalid, but for different reason than the reported\n   one, again this is an expression, but not lvalue expression, so that\n   should be reported\n5) the ctor/dtor cloning in the C++ FE (which is using walk_tree with\n   copy_tree_body_r) didn't handle iterators correctly, walk_tree normally\n   doesn't walk TREE_PURPOSE of TREE_LIST, and in the iterator case\n   that TREE_VEC contains also a BLOCK that needs special handling during\n   copy_tree_body_r\n\n2021-06-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/100859\ngcc/\n\t* tree-inline.c (copy_tree_body_r): Handle iterators on\n\tOMP_CLAUSE_AFFINITY or OMP_CLAUSE_DEPEND.\ngcc/c/\n\t* c-typeck.c (c_finish_omp_clauses): Move OMP_CLAUSE_AFFINITY\n\tafter depend only cases.\ngcc/cp/\n\t* semantics.c (handle_omp_array_sections_1): For\n\tOMP_CLAUSE_{AFFINITY,DEPEND} handle FIELD_DECL base using\n\tfinish_non_static_data_member and allow this as base.\n\t(finish_omp_clauses): Move OMP_CLAUSE_AFFINITY\n\tafter depend only cases.  Let this be diagnosed by !lvalue_p\n\tcase for OMP_CLAUSE_{AFFINITY,DEPEND} and remove useless\n\tassert.\n\t* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_AFFINITY.\ngcc/testsuite/\n\t* g++.dg/gomp/depend-iterator-3.C: New test.\n\t* g++.dg/gomp/this-1.C: Don't expect any diagnostics for\n\tthis as base expression of depend array section, expect a different\n\terror wording for this as depend locator and add testcases\n\tfor affinity clauses.", "tree": {"sha": "c4c9a0381fea204c577e7ebbb28eeef4c5e516e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4c9a0381fea204c577e7ebbb28eeef4c5e516e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/098f4e989beb1a1be1157430c56ea4f158c1d538", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/098f4e989beb1a1be1157430c56ea4f158c1d538", "html_url": "https://github.com/Rust-GCC/gccrs/commit/098f4e989beb1a1be1157430c56ea4f158c1d538", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/098f4e989beb1a1be1157430c56ea4f158c1d538/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bff9a7ec6e3b8bf9d9635445c94e6c166e6f43e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bff9a7ec6e3b8bf9d9635445c94e6c166e6f43e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bff9a7ec6e3b8bf9d9635445c94e6c166e6f43e1"}], "stats": {"total": 116, "additions": 94, "deletions": 22}, "files": [{"sha": "be3f4f09f6eac189ffcea66a6f58fccc3ab8c588", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098f4e989beb1a1be1157430c56ea4f158c1d538/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098f4e989beb1a1be1157430c56ea4f158c1d538/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=098f4e989beb1a1be1157430c56ea4f158c1d538", "patch": "@@ -14557,7 +14557,6 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    }\n \t  break;\n \n-\tcase OMP_CLAUSE_AFFINITY:\n \tcase OMP_CLAUSE_DEPEND:\n \t  t = OMP_CLAUSE_DECL (c);\n \t  if (t == NULL_TREE)\n@@ -14566,8 +14565,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t\t  == OMP_CLAUSE_DEPEND_SOURCE);\n \t      break;\n \t    }\n-\t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEPEND\n-\t      && OMP_CLAUSE_DEPEND_KIND (c) == OMP_CLAUSE_DEPEND_SINK)\n+\t  if (OMP_CLAUSE_DEPEND_KIND (c) == OMP_CLAUSE_DEPEND_SINK)\n \t    {\n \t      gcc_assert (TREE_CODE (t) == TREE_LIST);\n \t      for (; t; t = TREE_CHAIN (t))\n@@ -14595,6 +14593,9 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t}\n \t      break;\n \t    }\n+\t  /* FALLTHRU */\n+\tcase OMP_CLAUSE_AFFINITY:\n+\t  t = OMP_CLAUSE_DECL (c);\n \t  if (TREE_CODE (t) == TREE_LIST\n \t      && TREE_PURPOSE (t)\n \t      && TREE_CODE (TREE_PURPOSE (t)) == TREE_VEC)"}, {"sha": "15ef4882875a3a8495511dff108fb958ea866a9a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098f4e989beb1a1be1157430c56ea4f158c1d538/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098f4e989beb1a1be1157430c56ea4f158c1d538/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=098f4e989beb1a1be1157430c56ea4f158c1d538", "patch": "@@ -17399,6 +17399,7 @@ tsubst_omp_clauses (tree clauses, enum c_omp_region_type ort,\n \tcase OMP_CLAUSE_COPYPRIVATE:\n \tcase OMP_CLAUSE_UNIFORM:\n \tcase OMP_CLAUSE_DEPEND:\n+\tcase OMP_CLAUSE_AFFINITY:\n \tcase OMP_CLAUSE_FROM:\n \tcase OMP_CLAUSE_TO:\n \tcase OMP_CLAUSE_MAP:"}, {"sha": "d08c1ddabf93918a29bb105d447a490b83a561b6", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098f4e989beb1a1be1157430c56ea4f158c1d538/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098f4e989beb1a1be1157430c56ea4f158c1d538/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=098f4e989beb1a1be1157430c56ea4f158c1d538", "patch": "@@ -4968,7 +4968,11 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n \t  if (REFERENCE_REF_P (t))\n \t    t = TREE_OPERAND (t, 0);\n \t}\n-      if (!VAR_P (t) && TREE_CODE (t) != PARM_DECL)\n+      if (TREE_CODE (t) == FIELD_DECL\n+\t  && (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_AFFINITY\n+\t      || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEPEND))\n+\tret = finish_non_static_data_member (t, NULL_TREE, NULL_TREE);\n+      else if (!VAR_P (t) && TREE_CODE (t) != PARM_DECL)\n \t{\n \t  if (processing_template_decl && TREE_CODE (t) != OVERLOAD)\n \t    return NULL_TREE;\n@@ -4985,7 +4989,9 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n       else if (ort == C_ORT_OMP\n \t       && TREE_CODE (t) == PARM_DECL\n \t       && DECL_ARTIFICIAL (t)\n-\t       && DECL_NAME (t) == this_identifier)\n+\t       && DECL_NAME (t) == this_identifier\n+\t       && OMP_CLAUSE_CODE (c) != OMP_CLAUSE_AFFINITY\n+\t       && OMP_CLAUSE_CODE (c) != OMP_CLAUSE_DEPEND)\n \t{\n \t  error_at (OMP_CLAUSE_LOCATION (c),\n \t\t    \"%<this%> allowed in OpenMP only in %<declare simd%>\"\n@@ -7468,7 +7474,6 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    }\n \t  goto handle_field_decl;\n \n-\tcase OMP_CLAUSE_AFFINITY:\n \tcase OMP_CLAUSE_DEPEND:\n \t  t = OMP_CLAUSE_DECL (c);\n \t  if (t == NULL_TREE)\n@@ -7477,13 +7482,15 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t\t  == OMP_CLAUSE_DEPEND_SOURCE);\n \t      break;\n \t    }\n-\t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEPEND\n-\t      && OMP_CLAUSE_DEPEND_KIND (c) == OMP_CLAUSE_DEPEND_SINK)\n+\t  if (OMP_CLAUSE_DEPEND_KIND (c) == OMP_CLAUSE_DEPEND_SINK)\n \t    {\n \t      if (cp_finish_omp_clause_depend_sink (c))\n \t\tremove = true;\n \t      break;\n \t    }\n+\t  /* FALLTHRU */\n+\tcase OMP_CLAUSE_AFFINITY:\n+\t  t = OMP_CLAUSE_DECL (c);\n \t  if (TREE_CODE (t) == TREE_LIST\n \t      && TREE_PURPOSE (t)\n \t      && TREE_CODE (TREE_PURPOSE (t)) == TREE_VEC)\n@@ -7516,13 +7523,6 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    }\n \t  if (t == error_mark_node)\n \t    remove = true;\n-\t  else if (ort != C_ORT_ACC && t == current_class_ptr)\n-\t    {\n-\t      error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\"%<this%> allowed in OpenMP only in %<declare simd%>\"\n-\t\t\t\" clauses\");\n-\t      remove = true;\n-\t    }\n \t  else if (processing_template_decl && TREE_CODE (t) != OVERLOAD)\n \t    break;\n \t  else if (!lvalue_p (t))\n@@ -7543,11 +7543,9 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t   && TREE_CODE (TREE_OPERAND (t, 1)) == FIELD_DECL\n \t\t   && DECL_BIT_FIELD (TREE_OPERAND (t, 1)))\n \t    {\n-\t      gcc_assert (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEPEND\n-\t\t\t  || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_AFFINITY);\n \t      error_at (OMP_CLAUSE_LOCATION (c),\n \t\t\t\"bit-field %qE in %qs clause\", t,\n-\t\t\t  omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t\tomp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n \t      remove = true;\n \t    }\n \t  else if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEPEND"}, {"sha": "1a7f29a3f0f8cbc050371eed9e902bc3983f3715", "filename": "gcc/testsuite/g++.dg/gomp/depend-iterator-3.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098f4e989beb1a1be1157430c56ea4f158c1d538/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdepend-iterator-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098f4e989beb1a1be1157430c56ea4f158c1d538/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdepend-iterator-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdepend-iterator-3.C?ref=098f4e989beb1a1be1157430c56ea4f158c1d538", "patch": "@@ -0,0 +1,43 @@\n+// PR c++/100859\n+\n+struct S {\n+  S () {}\n+};\n+\n+struct W {\n+  S c[10];\n+  W () {\n+#pragma omp task affinity (iterator (i = 0 : 10 : 1): c[i])\n+    ;\n+#pragma omp task depend (iterator (i = 0 : 10 : 1), inout: c[i])\n+    ;\n+#pragma omp task affinity (this[0])\n+    ;\n+#pragma omp task depend (inout: this[0])\n+    ;\n+#pragma omp taskwait\n+  }\n+};\n+\n+template <typename T>\n+struct U {\n+  T c[10];\n+  U () {\n+#pragma omp task affinity (iterator (i = 0 : 10 : 1): c[i])\n+    ;\n+#pragma omp task depend (iterator (i = 0 : 10 : 1), inout: c[i])\n+    ;\n+#pragma omp task affinity (this[0])\n+    ;\n+#pragma omp task depend (inout: this[0])\n+    ;\n+#pragma omp taskwait\n+  }\n+};\n+\n+struct V : public U<S> {\n+  V () : U<S> () {}\n+};\n+\n+W w;\n+V v;"}, {"sha": "1bffc912c4a3bd030c21943b12fa0969332e5a86", "filename": "gcc/testsuite/g++.dg/gomp/this-1.C", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098f4e989beb1a1be1157430c56ea4f158c1d538/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fthis-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098f4e989beb1a1be1157430c56ea4f158c1d538/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fthis-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fthis-1.C?ref=098f4e989beb1a1be1157430c56ea4f158c1d538", "patch": "@@ -21,9 +21,13 @@ S::bar ()\n   #pragma omp for linear (this)\t\t\t// { dg-error \".this. allowed in OpenMP only in .declare simd. clauses\" }\n   for (int i = 0; i < 10; i++)\n     ;\n-  #pragma omp task depend(inout: this)\t\t// { dg-error \".this. allowed in OpenMP only in .declare simd. clauses\" }\n+  #pragma omp task depend(inout: this)\t\t// { dg-error \".this. is not lvalue expression nor array section in .depend. clause\" }\n     ;\n-  #pragma omp task depend(inout: this[0])\t// { dg-error \".this. allowed in OpenMP only in .declare simd. clauses\" }\n+  #pragma omp task depend(inout: this[0])\n+    ;\n+  #pragma omp task affinity(this)\t\t// { dg-error \".this. is not lvalue expression nor array section in .affinity. clause\" }\n+    ;\n+  #pragma omp task affinity(this[0])\n     ;\n   #pragma omp parallel private (this)\t\t// { dg-error \".this. allowed in OpenMP only in .declare simd. clauses\" }\n   {\n@@ -54,9 +58,13 @@ T<N>::bar ()\n   #pragma omp for linear (this)\t\t\t// { dg-error \".this. allowed in OpenMP only in .declare simd. clauses\" }\n   for (int i = 0; i < 10; i++)\n     ;\n-  #pragma omp task depend(inout: this)\t\t// { dg-error \".this. allowed in OpenMP only in .declare simd. clauses\" }\n+  #pragma omp task depend(inout: this)\t\t// { dg-error \".this. is not lvalue expression nor array section in .depend. clause\" }\n+    ;\n+  #pragma omp task depend(inout: this[0])\n+    ;\n+  #pragma omp task affinity(this)\t\t// { dg-error \".this. is not lvalue expression nor array section in .affinity. clause\" }\n     ;\n-  #pragma omp task depend(inout: this[0])\t// { dg-error \".this. allowed in OpenMP only in .declare simd. clauses\" }\n+  #pragma omp task affinity(this[0])\n     ;\n   #pragma omp parallel private (this)\t\t// { dg-error \".this. allowed in OpenMP only in .declare simd. clauses\" }\n   {"}, {"sha": "5396131e176b53cb7b25a9957013d16b3331bfe5", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/098f4e989beb1a1be1157430c56ea4f158c1d538/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/098f4e989beb1a1be1157430c56ea4f158c1d538/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=098f4e989beb1a1be1157430c56ea4f158c1d538", "patch": "@@ -1453,6 +1453,27 @@ copy_tree_body_r (tree *tp, int *walk_subtrees, void *data)\n \n \t  *walk_subtrees = 0;\n \t}\n+      else if (TREE_CODE (*tp) == OMP_CLAUSE\n+\t       && (OMP_CLAUSE_CODE (*tp) == OMP_CLAUSE_AFFINITY\n+\t\t   || OMP_CLAUSE_CODE (*tp) == OMP_CLAUSE_DEPEND))\n+\t{\n+\t  tree t = OMP_CLAUSE_DECL (*tp);\n+\t  if (TREE_CODE (t) == TREE_LIST\n+\t      && TREE_PURPOSE (t)\n+\t      && TREE_CODE (TREE_PURPOSE (t)) == TREE_VEC)\n+\t    {\n+\t      *walk_subtrees = 0;\n+\t      OMP_CLAUSE_DECL (*tp) = copy_node (t);\n+\t      t = OMP_CLAUSE_DECL (*tp);\n+\t      TREE_PURPOSE (t) = copy_node (TREE_PURPOSE (t));\n+\t      for (int i = 0; i <= 4; i++)\n+\t\twalk_tree (&TREE_VEC_ELT (TREE_PURPOSE (t), i),\n+\t\t\t   copy_tree_body_r, id, NULL);\n+\t      if (TREE_VEC_ELT (TREE_PURPOSE (t), 5))\n+\t\tremap_block (&TREE_VEC_ELT (TREE_PURPOSE (t), 5), id);\n+\t      walk_tree (&TREE_VALUE (t), copy_tree_body_r, id, NULL);\n+\t    }\n+\t}\n     }\n \n   /* Keep iterating.  */"}]}