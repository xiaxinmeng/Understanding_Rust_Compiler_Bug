{"sha": "acb0638db53d981829ee85e654ea8419acf8078b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNiMDYzOGRiNTNkOTgxODI5ZWU4NWU2NTRlYTg0MTlhY2Y4MDc4Yg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2001-08-05T16:56:47Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2001-08-05T16:56:47Z"}, "message": "New pattern for the combiner\n\nFrom-SVN: r44648", "tree": {"sha": "e236f6cc1dbd8a4ef8b6e5dc7037f83e69d22f5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e236f6cc1dbd8a4ef8b6e5dc7037f83e69d22f5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acb0638db53d981829ee85e654ea8419acf8078b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb0638db53d981829ee85e654ea8419acf8078b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb0638db53d981829ee85e654ea8419acf8078b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb0638db53d981829ee85e654ea8419acf8078b/comments", "author": null, "committer": null, "parents": [{"sha": "1ad72cef6d4385100a927336c7ccd042b59edf4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad72cef6d4385100a927336c7ccd042b59edf4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad72cef6d4385100a927336c7ccd042b59edf4b"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "c13028913b1250e6b00d9a29c00573945d24465c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0638db53d981829ee85e654ea8419acf8078b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0638db53d981829ee85e654ea8419acf8078b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=acb0638db53d981829ee85e654ea8419acf8078b", "patch": "@@ -15,6 +15,11 @@\n \t* config/ia64/ia64.c (ia64_sched_reorder): Defer scheduling of\n \tasms if other insns are available.\n \n+\t* config/ia64/ia64.c (condop_operator): New predicate.\n+\t* config/ia64/ia64.h (PREDICATE_CODES): Add it.\n+\t* config/ia64/ia64.md (cond_opsi2_internal and splitters): New\n+\tpatterns.\n+\n 2001-08-04  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* config/sh/sh.c (sh_asm_named_section): Fix typo in align"}, {"sha": "ce17c91dc3f0c12db094f2fc38a946e2f1d67054", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0638db53d981829ee85e654ea8419acf8078b/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0638db53d981829ee85e654ea8419acf8078b/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=acb0638db53d981829ee85e654ea8419acf8078b", "patch": "@@ -719,6 +719,19 @@ predicate_operator (op, mode)\n \t  && (code == EQ || code == NE));\n }\n \n+/* Return 1 if this operator can be used in a conditional operation.  */\n+\n+int\n+condop_operator (op, mode)\n+    register rtx op;\n+    enum machine_mode mode;\n+{\n+  enum rtx_code code = GET_CODE (op);\n+  return ((GET_MODE (op) == mode || mode == VOIDmode)\n+\t  && (code == PLUS || code == MINUS || code == AND\n+\t      || code == IOR || code == XOR));\n+}\n+\n /* Return 1 if this is the ar.lc register.  */\n \n int"}, {"sha": "f6b46938f8e75ade7574139f3b60e2c659e12316", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0638db53d981829ee85e654ea8419acf8078b/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0638db53d981829ee85e654ea8419acf8078b/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=acb0638db53d981829ee85e654ea8419acf8078b", "patch": "@@ -2664,6 +2664,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n { \"adjusted_comparison_operator\", {LT, GE, LTU, GEU}},\t\t\t\\\n { \"signed_inequality_operator\", {GE, GT, LE, LT}},\t\t\t\\\n { \"predicate_operator\", {NE, EQ}},\t\t\t\t\t\\\n+{ \"condop_operator\", {PLUS, MINUS, IOR, XOR, AND}},\t\t\t\\\n { \"ar_lc_reg_operand\", {REG}},\t\t\t\t\t\t\\\n { \"ar_ccv_reg_operand\", {REG}},\t\t\t\t\t\t\\\n { \"general_tfmode_operand\", {SUBREG, REG, CONST_DOUBLE, MEM}},\t\t\\"}, {"sha": "3590630f19294600bedefaa90fee6f5e61e112b3", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb0638db53d981829ee85e654ea8419acf8078b/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb0638db53d981829ee85e654ea8419acf8078b/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=acb0638db53d981829ee85e654ea8419acf8078b", "patch": "@@ -4495,6 +4495,82 @@\n \t\t\t\tVOIDmode, operands[1], const0_rtx);\n }\")\n \n+(define_insn \"*cond_opsi2_internal\"\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=r\")\n+\t(match_operator:SI 5 \"condop_operator\"\n+\t  [(if_then_else:SI\n+\t     (match_operator 6 \"predicate_operator\"\n+\t       [(match_operand:BI 1 \"register_operand\" \"c\")\n+\t        (const_int 0)])\n+\t     (match_operand:SI 2 \"gr_register_operand\" \"r\")\n+\t     (match_operand:SI 3 \"gr_register_operand\" \"r\"))\n+\t   (match_operand:SI 4 \"gr_register_operand\" \"r\")]))]\n+  \"\"\n+  \"#\"\n+  [(set_attr \"itanium_class\" \"ialu\")\n+   (set_attr \"predicable\" \"no\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"\")\n+\t(match_operator:SI 5 \"condop_operator\"\n+\t  [(if_then_else:SI\n+\t     (match_operator 6 \"predicate_operator\"\n+\t       [(match_operand:BI 1 \"register_operand\" \"\")\n+\t        (const_int 0)])\n+\t     (match_operand:SI 2 \"gr_register_operand\" \"\")\n+\t     (match_operand:SI 3 \"gr_register_operand\" \"\"))\n+\t   (match_operand:SI 4 \"gr_register_operand\" \"\")]))]\n+  \"reload_completed\"\n+  [(cond_exec\n+     (match_dup 6)\n+     (set (match_dup 0) (match_op_dup:SI 5 [(match_dup 2) (match_dup 4)])))\n+   (cond_exec\n+     (match_dup 7)\n+     (set (match_dup 0) (match_op_dup:SI 5 [(match_dup 3) (match_dup 4)])))]\n+  \"\n+{\n+  operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[6]) == NE ? EQ : NE,\n+\t\t\t\tVOIDmode, operands[1], const0_rtx);\n+}\")\n+\n+(define_insn \"*cond_opsi2_internal_b\"\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"=r\")\n+\t(match_operator:SI 5 \"condop_operator\"\n+\t  [(match_operand:SI 4 \"gr_register_operand\" \"r\")\n+\t   (if_then_else:SI\n+\t     (match_operator 6 \"predicate_operator\"\n+\t       [(match_operand:BI 1 \"register_operand\" \"c\")\n+\t        (const_int 0)])\n+\t     (match_operand:SI 2 \"gr_register_operand\" \"r\")\n+\t     (match_operand:SI 3 \"gr_register_operand\" \"r\"))]))]\n+  \"\"\n+  \"#\"\n+  [(set_attr \"itanium_class\" \"ialu\")\n+   (set_attr \"predicable\" \"no\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"gr_register_operand\" \"\")\n+\t(match_operator:SI 5 \"condop_operator\"\n+\t  [(match_operand:SI 4 \"gr_register_operand\" \"\")\n+\t   (if_then_else:SI\n+\t     (match_operator 6 \"predicate_operator\"\n+\t       [(match_operand:BI 1 \"register_operand\" \"\")\n+\t        (const_int 0)])\n+\t     (match_operand:SI 2 \"gr_register_operand\" \"\")\n+\t     (match_operand:SI 3 \"gr_register_operand\" \"\"))]))]\n+  \"reload_completed\"\n+  [(cond_exec\n+     (match_dup 6)\n+     (set (match_dup 0) (match_op_dup:SI 5 [(match_dup 4) (match_dup 2)])))\n+   (cond_exec\n+     (match_dup 7)\n+     (set (match_dup 0) (match_op_dup:SI 5 [(match_dup 4) (match_dup 3)])))]\n+  \"\n+{\n+  operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[6]) == NE ? EQ : NE,\n+\t\t\t\tVOIDmode, operands[1], const0_rtx);\n+}\")\n+\n \f\n ;; ::::::::::::::::::::\n ;; ::"}]}