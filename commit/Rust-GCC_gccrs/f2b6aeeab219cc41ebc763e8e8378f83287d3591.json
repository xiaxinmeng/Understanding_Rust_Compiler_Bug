{"sha": "f2b6aeeab219cc41ebc763e8e8378f83287d3591", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJiNmFlZWFiMjE5Y2M0MWViYzc2M2U4ZTgzNzhmODMyODdkMzU5MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-04-22T19:16:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-04-22T19:16:46Z"}, "message": "PR c++/87366 - wrong error with alias template.\n\nWith this testcase the code in template_args_equal to treat aliases as\ndistinct wasn't sufficient, because it only looked at the top level, whereas\nhere we have a reference to the alias.  So let's also handle treating them\nas distinct in structural_comptypes.  For GCC 10 I have a more comprehensive\npatch, but for GCC 9 let's go with this smaller change.\n\n\t* typeck.c (structural_comptypes): When comparing_specializations,\n\taliases are unequal.\n\t(comptypes): When comparing_specializations, do structural\n\tcomparison.\n\nFrom-SVN: r270494", "tree": {"sha": "5463b687bd25e7cba53974befa499a9967e41cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5463b687bd25e7cba53974befa499a9967e41cf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2b6aeeab219cc41ebc763e8e8378f83287d3591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b6aeeab219cc41ebc763e8e8378f83287d3591", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2b6aeeab219cc41ebc763e8e8378f83287d3591", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b6aeeab219cc41ebc763e8e8378f83287d3591/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e8dac32576fbde72a1ea44b567a2c10f332ecd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e8dac32576fbde72a1ea44b567a2c10f332ecd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e8dac32576fbde72a1ea44b567a2c10f332ecd2"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "d207d95256ef97669f0900abd422af9001fe65c1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b6aeeab219cc41ebc763e8e8378f83287d3591/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b6aeeab219cc41ebc763e8e8378f83287d3591/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f2b6aeeab219cc41ebc763e8e8378f83287d3591", "patch": "@@ -1,3 +1,11 @@\n+2019-04-22  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/87366 - wrong error with alias template.\n+\t* typeck.c (structural_comptypes): When comparing_specializations,\n+\taliases are unequal.\n+\t(comptypes): When comparing_specializations, do structural\n+\tcomparison.\n+\n 2019-04-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/90190 - CTAD with list-constructor."}, {"sha": "fff88ab8df4a0734471183f47c415281ab1fe96b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b6aeeab219cc41ebc763e8e8378f83287d3591/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b6aeeab219cc41ebc763e8e8378f83287d3591/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f2b6aeeab219cc41ebc763e8e8378f83287d3591", "patch": "@@ -1443,6 +1443,17 @@ structural_comptypes (tree t1, tree t2, int strict)\n       return false;\n     }\n \n+  /* Don't treat an alias template specialization with dependent\n+     arguments as equivalent to its underlying type when used as a\n+     template argument; we need them to be distinct so that we\n+     substitute into the specialization arguments at instantiation\n+     time.  And aliases can't be equivalent without being ==, so\n+     we don't need to look any deeper.  */\n+  if (comparing_specializations\n+      && (dependent_alias_template_spec_p (t1)\n+\t  || dependent_alias_template_spec_p (t2)))\n+    return false;\n+\n   /* If we get here, we know that from a target independent POV the\n      types are the same.  Make sure the target attributes are also\n      the same.  */\n@@ -1455,6 +1466,10 @@ structural_comptypes (tree t1, tree t2, int strict)\n bool\n comptypes (tree t1, tree t2, int strict)\n {\n+  if (strict == COMPARE_STRICT && comparing_specializations\n+      && (t1 != TYPE_CANONICAL (t1) || t2 != TYPE_CANONICAL (t2)))\n+    /* If comparing_specializations, treat dependent aliases as distinct.  */\n+    strict = COMPARE_STRUCTURAL;\n   if (strict == COMPARE_STRICT)\n     {\n       if (t1 == t2)"}, {"sha": "acdea77a3263fc48bd28a5462275d2ad39683c1e", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-66.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b6aeeab219cc41ebc763e8e8378f83287d3591/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-66.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b6aeeab219cc41ebc763e8e8378f83287d3591/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-66.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-66.C?ref=f2b6aeeab219cc41ebc763e8e8378f83287d3591", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/87366\n+// { dg-do compile { target c++11 } }\n+\n+struct A {};\n+struct B {};\n+\n+template <typename T> struct wrapper {};\n+\n+template <typename> struct enable_if_A { };\n+template<> struct enable_if_A<A> { using type = void; };\n+\n+template <typename T, typename = typename enable_if_A<T>::type> using ok_t = T;\n+\n+template <typename T> void not_even_called(wrapper<const ok_t<T>&> a);\n+\n+template <typename T> int called(wrapper<const T&> a);\n+\n+void test(wrapper<const B&>& val)\n+{\n+    called(val);\n+}"}]}