{"sha": "9869896730f3055850034c05c596828d517fa9a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg2OTg5NjczMGYzMDU1ODUwMDM0YzA1YzU5NjgyOGQ1MTdmYTlhMg==", "commit": {"author": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2020-01-10T19:29:36Z"}, "committer": {"name": "Stam Markianos-Wright", "email": "stammark@gcc.gnu.org", "date": "2020-01-10T19:29:36Z"}, "message": "aarch64.c (aarch64_invalid_conversion): New function for target hook.\n\ngcc/ChangeLog:\n\n2020-01-10  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\n\t* config/aarch64/aarch64.c (aarch64_invalid_conversion): New function\n\tfor target hook.\n\t(aarch64_invalid_unary_op): New function for target hook.\n\t(aarch64_invalid_binary_op): New function for target hook.\n\ngcc/testsuite/ChangeLog:\n\n2020-01-10  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\n\t* g++.target/aarch64/bfloat_cpp_typecheck.C: New test.\n\t* gcc.target/aarch64/bfloat16_scalar_typecheck.c: New test.\n\t* gcc.target/aarch64/bfloat16_vector_typecheck_1.c: New test.\n\t* gcc.target/aarch64/bfloat16_vector_typecheck_2.c: New test.\n\nFrom-SVN: r280130", "tree": {"sha": "5f70ea4537c666d259d4139bf3990363b4a39804", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f70ea4537c666d259d4139bf3990363b4a39804"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9869896730f3055850034c05c596828d517fa9a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9869896730f3055850034c05c596828d517fa9a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9869896730f3055850034c05c596828d517fa9a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9869896730f3055850034c05c596828d517fa9a2/comments", "author": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abbe1ed27355178223cd099fb73227f392416ea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abbe1ed27355178223cd099fb73227f392416ea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abbe1ed27355178223cd099fb73227f392416ea6"}], "stats": {"total": 827, "additions": 827, "deletions": 0}, "files": [{"sha": "034dc7d0a968de19ab1671d3ea3142ba3e56099e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9869896730f3055850034c05c596828d517fa9a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9869896730f3055850034c05c596828d517fa9a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9869896730f3055850034c05c596828d517fa9a2", "patch": "@@ -1,3 +1,10 @@\n+2020-01-10  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_invalid_conversion): New function\n+\tfor target hook.\n+\t(aarch64_invalid_unary_op): New function for target hook.\n+\t(aarch64_invalid_binary_op): New function for target hook.\n+\n 2020-01-10  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n \n \t* config.gcc: Add arm_bf16.h."}, {"sha": "ac89cc1f9c938455d33d8850d9ebfc0473cb73dc", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9869896730f3055850034c05c596828d517fa9a2/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9869896730f3055850034c05c596828d517fa9a2/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9869896730f3055850034c05c596828d517fa9a2", "patch": "@@ -21751,6 +21751,55 @@ aarch64_stack_protect_guard (void)\n   return NULL_TREE;\n }\n \n+/* Return the diagnostic message string if conversion from FROMTYPE to\n+   TOTYPE is not allowed, NULL otherwise.  */\n+\n+static const char *\n+aarch64_invalid_conversion (const_tree fromtype, const_tree totype)\n+{\n+  if (element_mode (fromtype) != element_mode (totype))\n+    {\n+      /* Do no allow conversions to/from BFmode scalar types.  */\n+      if (TYPE_MODE (fromtype) == BFmode)\n+\treturn N_(\"invalid conversion from type %<bfloat16_t%>\");\n+      if (TYPE_MODE (totype) == BFmode)\n+\treturn N_(\"invalid conversion to type %<bfloat16_t%>\");\n+    }\n+\n+  /* Conversion allowed.  */\n+  return NULL;\n+}\n+\n+/* Return the diagnostic message string if the unary operation OP is\n+   not permitted on TYPE, NULL otherwise.  */\n+\n+static const char *\n+aarch64_invalid_unary_op (int op, const_tree type)\n+{\n+  /* Reject all single-operand operations on BFmode except for &.  */\n+  if (element_mode (type) == BFmode && op != ADDR_EXPR)\n+    return N_(\"operation not permitted on type %<bfloat16_t%>\");\n+\n+  /* Operation allowed.  */\n+  return NULL;\n+}\n+\n+/* Return the diagnostic message string if the binary operation OP is\n+   not permitted on TYPE1 and TYPE2, NULL otherwise.  */\n+\n+static const char *\n+aarch64_invalid_binary_op (int op ATTRIBUTE_UNUSED, const_tree type1,\n+\t\t\t   const_tree type2)\n+{\n+  /* Reject all 2-operand operations on BFmode.  */\n+  if (element_mode (type1) == BFmode\n+      || element_mode (type2) == BFmode)\n+    return N_(\"operation not permitted on type %<bfloat16_t%>\");\n+\n+  /* Operation allowed.  */\n+  return NULL;\n+}\n+\n /* Implement TARGET_ASM_FILE_END for AArch64.  This adds the AArch64 GNU NOTE\n    section at the end if needed.  */\n #define GNU_PROPERTY_AARCH64_FEATURE_1_AND\t0xc0000000\n@@ -22001,6 +22050,15 @@ aarch64_libgcc_floating_mode_supported_p\n #undef TARGET_MANGLE_TYPE\n #define TARGET_MANGLE_TYPE aarch64_mangle_type\n \n+#undef TARGET_INVALID_CONVERSION\n+#define TARGET_INVALID_CONVERSION aarch64_invalid_conversion\n+\n+#undef TARGET_INVALID_UNARY_OP\n+#define TARGET_INVALID_UNARY_OP aarch64_invalid_unary_op\n+\n+#undef TARGET_INVALID_BINARY_OP\n+#define TARGET_INVALID_BINARY_OP aarch64_invalid_binary_op\n+\n #undef TARGET_VERIFY_TYPE_CONTEXT\n #define TARGET_VERIFY_TYPE_CONTEXT aarch64_verify_type_context\n "}, {"sha": "01e1794f62985a6ebca1e6e70cc3cd49d5370f28", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9869896730f3055850034c05c596828d517fa9a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9869896730f3055850034c05c596828d517fa9a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9869896730f3055850034c05c596828d517fa9a2", "patch": "@@ -1,3 +1,10 @@\n+2020-01-10  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\t* g++.target/aarch64/bfloat_cpp_typecheck.C: New test.\n+\t* gcc.target/aarch64/bfloat16_scalar_typecheck.c: New test.\n+\t* gcc.target/aarch64/bfloat16_vector_typecheck_1.c: New test.\n+\t* gcc.target/aarch64/bfloat16_vector_typecheck_2.c: New test.\n+\n 2020-01-10  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n \n \t* g++.dg/abi/mangle-neon-aarch64.C: Add Bfloat SIMD types to test."}, {"sha": "9203d91f8ff081954687b93af90590182716d2da", "filename": "gcc/testsuite/g++.target/aarch64/bfloat_cpp_typecheck.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9869896730f3055850034c05c596828d517fa9a2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fbfloat_cpp_typecheck.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9869896730f3055850034c05c596828d517fa9a2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fbfloat_cpp_typecheck.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fbfloat_cpp_typecheck.C?ref=9869896730f3055850034c05c596828d517fa9a2", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+/* { dg-additional-options \"-O3 --save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+void foo (void)\n+{\n+  bfloat16_t (); /* { dg-bogus {invalid conversion to type 'bfloat16_t'} \"\" { xfail *-*-* } } */\n+  bfloat16_t a = bfloat16_t(); /* { dg-bogus {invalid conversion to type 'bfloat16_t'} \"\" { xfail *-*-* } } */\n+  bfloat16_t (0x1234); /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16_t (0.1); /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+}"}, {"sha": "7c9188cf29da6587a678f280b672588777d2c030", "filename": "gcc/testsuite/gcc.target/aarch64/bfloat16_scalar_typecheck.c", "status": "added", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9869896730f3055850034c05c596828d517fa9a2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_scalar_typecheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9869896730f3055850034c05c596828d517fa9a2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_scalar_typecheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_scalar_typecheck.c?ref=9869896730f3055850034c05c596828d517fa9a2", "patch": "@@ -0,0 +1,219 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+/* { dg-additional-options \"-Wno-pedantic -O3 --save-temps\" }  */\n+\n+#include <arm_neon.h>\n+\n+bfloat16_t glob_bfloat;\n+\n+int is_an_int;\n+short is_a_short_int;\n+float is_a_float;\n+float is_a_float16;\n+double is_a_double;\n+\n+float *float_ptr;\n+\n+bfloat16_t foo1 (void) { return (bfloat16_t) 0x1234; } /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+bfloat16_t foo2 (void) { return (bfloat16_t) (short) 0x1234; } /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+\n+bfloat16_t footest (bfloat16_t scalar0)\n+{\n+\n+  /* Initialisation  */\n+\n+  bfloat16_t scalar1_1;\n+  bfloat16_t scalar1_2 = glob_bfloat;\n+  bfloat16_t scalar1_3 = 0;   /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16_t scalar1_4 = 0.1; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16_t scalar1_5 = is_a_float; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16_t scalar1_6 = is_an_int;  /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16_t scalar1_7 = is_a_float16; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16_t scalar1_8 = is_a_double; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16_t scalar1_9 = is_a_short_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+\n+  int initi_1_1 = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  float initi_1_2 = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  float16_t initi_1_3 = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  short initi_1_4 = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  double initi_1_5 = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+\n+  bfloat16_t scalar2_1 = {}; /* { dg-error {empty scalar initializer} } */\n+  bfloat16_t scalar2_2 = { glob_bfloat };\n+  bfloat16_t scalar2_3 = { 0 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16_t scalar2_4 = { 0.1 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16_t scalar2_5 = { is_a_float }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16_t scalar2_6 = { is_an_int }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16_t scalar2_7 = { is_a_float16 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16_t scalar2_8 = { is_a_double }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16_t scalar2_9 = { is_a_short_int }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+\n+  int initi_2_1 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  float initi_2_2 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  float16_t initi_2_3 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  short initi_2_4 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  double initi_2_5 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+\n+  /* Assignments.  */\n+\n+  glob_bfloat = glob_bfloat;\n+  glob_bfloat = 0;   /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  glob_bfloat = 0.1; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  glob_bfloat = is_a_float; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  glob_bfloat = is_an_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  glob_bfloat = is_a_float16; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  glob_bfloat = is_a_double; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  glob_bfloat = is_a_short_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+\n+  is_an_int = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  is_a_float = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  is_a_float16 = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  is_a_double = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  is_a_short_int = glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+\n+  /* Casting.  */\n+\n+  (void) glob_bfloat;\n+  (bfloat16_t) glob_bfloat;\n+\n+  (int) glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  (float) glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  (float16_t) glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  (double) glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  (short) glob_bfloat; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+\n+  (bfloat16_t) is_an_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16_t) is_a_float; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16_t) is_a_float16; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16_t) is_a_double; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16_t) is_a_short_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+\n+  /* Compound literals.  */\n+\n+  (bfloat16_t) {}; /* { dg-error {empty scalar initializer} } */\n+  (bfloat16_t) { glob_bfloat };\n+  (bfloat16_t) { 0 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16_t) { 0.1 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16_t) { is_a_float }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16_t) { is_an_int }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16_t) { is_a_float16 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16_t) { is_a_double }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16_t) { is_a_short_int }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+\n+  (int) { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  (float) { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  (float16_t) { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  (double) { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  (short) { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+\n+  /* Arrays and Structs.  */\n+\n+  typedef bfloat16_t array_type[2];\n+  extern bfloat16_t extern_array[];\n+\n+  bfloat16_t array[2];\n+  bfloat16_t zero_length_array[0];\n+  bfloat16_t empty_init_array[] = {};\n+  typedef bfloat16_t some_other_type[is_an_int];\n+\n+  struct struct1 {\n+    bfloat16_t a;\n+  };\n+\n+  union union1 {\n+    bfloat16_t a;\n+  };\n+\n+  /* Addressing and dereferencing.  */\n+\n+  bfloat16_t *bfloat_ptr = &scalar0;\n+  scalar0 = *bfloat_ptr;\n+\n+  /* Pointer assignment.  */\n+\n+  bfloat16_t *bfloat_ptr2 = bfloat_ptr;\n+  bfloat16_t *bfloat_ptr3 = array;\n+\n+  /* Pointer arithmetic.  */\n+\n+  ++bfloat_ptr;\n+  --bfloat_ptr;\n+  bfloat_ptr++;\n+  bfloat_ptr--;\n+  bfloat_ptr += 1;\n+  bfloat_ptr -= 1;\n+  bfloat_ptr - bfloat_ptr2;\n+  bfloat_ptr = &bfloat_ptr3[0];\n+  bfloat_ptr = &bfloat_ptr3[1];\n+\n+  /* Simple comparison.  */\n+  scalar0 > glob_bfloat; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  glob_bfloat == scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  scalar0 > is_a_float; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  is_a_float == scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  scalar0 > 0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  0 == scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  scalar0 > 0.1; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  0.1 == scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  scalar0 > is_an_int; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  is_an_int == scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+\n+  /* Pointer comparison.  */\n+\n+  bfloat_ptr == &scalar0;\n+  bfloat_ptr != &scalar0;\n+  bfloat_ptr < &scalar0;\n+  bfloat_ptr <= &scalar0;\n+  bfloat_ptr > &scalar0;\n+  bfloat_ptr >= &scalar0;\n+  bfloat_ptr == bfloat_ptr2;\n+  bfloat_ptr != bfloat_ptr2;\n+  bfloat_ptr < bfloat_ptr2;\n+  bfloat_ptr <= bfloat_ptr2;\n+  bfloat_ptr > bfloat_ptr2;\n+  bfloat_ptr >= bfloat_ptr2;\n+\n+  /* Conditional expressions.  */\n+\n+  0 ? scalar0 : scalar0;\n+  0 ? scalar0 : is_a_float; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  0 ? is_a_float : scalar0; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  0 ? scalar0 : 0; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  0 ? 0 : scalar0; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  0 ? 0.1 : scalar0; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  0 ? scalar0 : 0.1; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  0 ? bfloat_ptr : bfloat_ptr2;\n+  0 ? bfloat_ptr : float_ptr; /* { dg-error {pointer type mismatch in conditional expression} } */\n+  0 ? float_ptr : bfloat_ptr; /* { dg-error {pointer type mismatch in conditional expression} } */\n+\n+  scalar0 ? scalar0 : scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  scalar0 ? is_a_float : scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  scalar0 ? scalar0 : is_a_float; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  scalar0 ? is_a_float : is_a_float; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+\n+  /* Unary operators.  */\n+\n+  +scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  -scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  ~scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  !scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  *scalar0; /* { dg-error {invalid type argument of unary '\\*'} } */\n+  __real scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  __imag scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  ++scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  --scalar0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  scalar0++; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  scalar0--; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+\n+  /* Binary arithmetic operations.  */\n+\n+  scalar0 = glob_bfloat + *bfloat_ptr; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  scalar0 = glob_bfloat + 0.1; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  scalar0 = glob_bfloat + 0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  scalar0 = glob_bfloat + is_a_float; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+\n+  return scalar0;\n+}\n+"}, {"sha": "1a2aa9b3c1683edb0165dab565b135daf8403656", "filename": "gcc/testsuite/gcc.target/aarch64/bfloat16_vector_typecheck_1.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9869896730f3055850034c05c596828d517fa9a2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_vector_typecheck_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9869896730f3055850034c05c596828d517fa9a2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_vector_typecheck_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_vector_typecheck_1.c?ref=9869896730f3055850034c05c596828d517fa9a2", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+/* { dg-additional-options \"-O3 --save-temps -Wno-pedantic\" }  */\n+#include <arm_neon.h>\n+\n+bfloat16_t glob_bfloat;\n+bfloat16x4_t glob_bfloat_vec;\n+\n+float32x4_t is_a_float_vec;\n+float32x2_t is_a_float_pair;\n+\n+float16x4_t *float_ptr;\n+float16x4_t is_a_float16_vec;\n+\n+int32x4_t is_an_int_vec;\n+int32x2_t is_an_int_pair;\n+int16x4_t is_a_short_vec;\n+\n+int is_an_int;\n+short is_a_short_int;\n+float is_a_float;\n+float is_a_float16;\n+double is_a_double;\n+\n+/* Create a vector of 2 bfloat16_t.  */\n+typedef bfloat16_t v2bf __attribute__((vector_size(4)));\n+v2bf foo1 (void) { return (v2bf) 0x12345678; }\n+bfloat16x4_t foo2 (void) { return (bfloat16x4_t) 0x1234567812345678; }\n+\n+bfloat16x4_t footest (bfloat16x4_t vector0)\n+{\n+  /* Initialisation  */\n+\n+  bfloat16x4_t vector1_1;\n+  bfloat16x4_t vector1_2 = glob_bfloat_vec;\n+  bfloat16x4_t vector1_3 = is_a_float_vec; /* { dg-error {incompatible types when initializing type 'bfloat16x4_t' using type 'float32x4_t'} } */\n+  bfloat16x4_t vector1_4 = is_an_int_vec;  /* { dg-error {incompatible types when initializing type 'bfloat16x4_t' using type 'int32x4_t'} } */\n+  bfloat16x4_t vector1_5 = is_a_float16_vec; /* { dg-error {incompatible types when initializing type 'bfloat16x4_t' using type 'float16x4_t'} } */\n+  bfloat16x4_t vector1_6 = is_a_float_pair; /* { dg-error {incompatible types when initializing type 'bfloat16x4_t' using type 'float32x2_t'} } */\n+  bfloat16x4_t vector1_7 = is_an_int_pair; /* { dg-error {incompatible types when initializing type 'bfloat16x4_t' using type 'int32x2_t'} } */\n+  bfloat16x4_t vector1_8 = is_a_short_vec; /* { dg-error {incompatible types when initializing type 'bfloat16x4_t' using type 'int16x4_t'} } */\n+\n+  int32x4_t initi_1_1 = glob_bfloat_vec;   /* { dg-error {incompatible types when initializing type 'int32x4_t' using type 'bfloat16x4_t'} } */\n+  float32x4_t initi_1_2 = glob_bfloat_vec; /* { dg-error {incompatible types when initializing type 'float32x4_t' using type 'bfloat16x4_t'} } */\n+  float16x4_t initi_1_3 = glob_bfloat_vec; /* { dg-error {incompatible types when initializing type 'float16x4_t' using type 'bfloat16x4_t'} } */\n+  float32x2_t initi_1_4 = glob_bfloat_vec; /* { dg-error {incompatible types when initializing type 'float32x2_t' using type 'bfloat16x4_t'} } */\n+  int32x2_t initi_1_5 = glob_bfloat_vec;  /* { dg-error {incompatible types when initializing type 'int32x2_t' using type 'bfloat16x4_t'} } */\n+  int16x4_t initi_1_6 = glob_bfloat_vec;  /* { dg-error {incompatible types when initializing type 'int16x4_t' using type 'bfloat16x4_t'} } */\n+\n+  bfloat16x4_t vector2_1 = {};\n+  bfloat16x4_t vector2_2 = { glob_bfloat };\n+  bfloat16x4_t vector2_3 = { glob_bfloat, glob_bfloat, glob_bfloat, glob_bfloat };\n+  bfloat16x4_t vector2_4 = { 0 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16x4_t vector2_5 = { 0.1 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16x4_t vector2_6 = { is_a_float16 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16x4_t vector2_7 = { is_a_float }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16x4_t vector2_8 = { is_an_int }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16x4_t vector2_9 = { is_a_short_int }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16x4_t vector2_10 = { 0.0, 0, is_a_short_int, is_a_float }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+\n+  int32x4_t initi_2_1 = { glob_bfloat };   /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  float32x4_t initi_2_2 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  float16x4_t initi_2_3 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  float32x2_t initi_2_4 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  int32x2_t initi_2_5 = { glob_bfloat };   /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  int16x4_t initi_2_6 = { glob_bfloat };   /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+\n+  /* Assignments to/from vectors.  */\n+\n+  glob_bfloat_vec = glob_bfloat_vec;\n+  glob_bfloat_vec = 0;   /* { dg-error {incompatible types when assigning to type 'bfloat16x4_t' from type 'int'} } */\n+  glob_bfloat_vec = 0.1; /* { dg-error {incompatible types when assigning to type 'bfloat16x4_t' from type 'double'} } */\n+  glob_bfloat_vec = is_a_float_vec; /* { dg-error {incompatible types when assigning to type 'bfloat16x4_t' from type 'float32x4_t'} } */\n+  glob_bfloat_vec = is_an_int_vec; /* { dg-error {incompatible types when assigning to type 'bfloat16x4_t' from type 'int32x4_t'} } */\n+  glob_bfloat_vec = is_a_float16_vec; /* { dg-error {incompatible types when assigning to type 'bfloat16x4_t' from type 'float16x4_t'} } */\n+  glob_bfloat_vec = is_a_float_pair; /* { dg-error {incompatible types when assigning to type 'bfloat16x4_t' from type 'float32x2_t'} } */\n+  glob_bfloat_vec = is_an_int_pair; /* { dg-error {incompatible types when assigning to type 'bfloat16x4_t' from type 'int32x2_t'} } */\n+  glob_bfloat_vec = is_a_short_vec; /* { dg-error {incompatible types when assigning to type 'bfloat16x4_t' from type 'int16x4_t'} } */\n+\n+  is_an_int_vec = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type 'int32x4_t' from type 'bfloat16x4_t'} } */\n+  is_a_float_vec = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type 'float32x4_t' from type 'bfloat16x4_t'} } */\n+  is_a_float16_vec = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type 'float16x4_t' from type 'bfloat16x4_t'} } */\n+  is_a_float_pair = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type 'float32x2_t' from type 'bfloat16x4_t'} } */\n+  is_an_int_pair = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type 'int32x2_t' from type 'bfloat16x4_t'} } */\n+  is_a_short_vec = glob_bfloat_vec;/* { dg-error {incompatible types when assigning to type 'int16x4_t' from type 'bfloat16x4_t'} } */\n+\n+  /* Assignments to/from elements.  */\n+\n+  vector2_3[0] = glob_bfloat;\n+  vector2_3[0] = is_an_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  vector2_3[0] = is_a_short_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  vector2_3[0] = is_a_float; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  vector2_3[0] = is_a_float16; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  vector2_3[0] = 0; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  vector2_3[0] = 0.1; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+\n+  glob_bfloat = vector2_3[0];\n+  is_an_int = vector2_3[0]; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  is_a_short_int = vector2_3[0]; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  is_a_float = vector2_3[0]; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  is_a_float16 = vector2_3[0]; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+\n+  /* Compound literals.  */\n+\n+  (bfloat16x4_t) {};\n+\n+  (bfloat16x4_t) { 0 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16x4_t) { 0.1 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16x4_t) { is_a_float_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'float32x4_t'} } */\n+  (bfloat16x4_t) { is_an_int_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'int32x4_t'} } */\n+  (bfloat16x4_t) { is_a_float_pair }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'float32x2_t'} } */\n+  (bfloat16x4_t) { is_an_int_pair }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'int32x2_t'} } */\n+  (bfloat16x4_t) { is_a_float16_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'float16x4_t'} } */\n+  (bfloat16x4_t) { is_a_short_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'int16x4_t'} } */\n+\n+  (bfloat16x4_t) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'bfloat16x4_t'} } */\n+  (int32x4_t) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type 'int' using type 'bfloat16x4_t'} } */\n+  (float32x4_t) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type 'float' using type 'bfloat16x4_t'} } */\n+  (int32x2_t) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type 'int' using type 'bfloat16x4_t'} } */\n+  (float16x4_t) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type '__fp16' using type 'bfloat16x4_t'} } */\n+  (int16x4_t) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type 'short int' using type 'bfloat16x4_t'} } */\n+\n+  /* Casting.  */\n+\n+  (void) glob_bfloat_vec;\n+  (bfloat16x4_t) glob_bfloat_vec;\n+\n+  (bfloat16_t) glob_bfloat_vec; /* { dg-error {aggregate value used where a floating-point was expected} } */\n+  (short) glob_bfloat_vec; /* { dg-error {cannot convert a vector of type 'bfloat16x4_t' to type 'short int' which has different size} } */\n+  (int) glob_bfloat_vec; /* { dg-error {cannot convert a vector of type 'bfloat16x4_t' to type 'int' which has different size} } */\n+  (float16_t) glob_bfloat_vec; /* { dg-error {aggregate value used where a floating-point was expected} } */\n+  (float) glob_bfloat_vec; /* { dg-error {aggregate value used where a floating-point was expected} } */\n+  (double) glob_bfloat_vec; /* { dg-error {aggregate value used where a floating-point was expected} } */\n+\n+  (int32x4_t) glob_bfloat_vec; /* { dg-error {cannot convert a value of type 'bfloat16x4_t' to vector type '__Int32x4_t' which has different size} } */\n+  (float32x4_t) glob_bfloat_vec; /* { dg-error {cannot convert a value of type 'bfloat16x4_t' to vector type '__Float32x4_t' which has different size} } */\n+  (float16x4_t) glob_bfloat_vec;\n+  (int32x2_t) glob_bfloat_vec;\n+  (float32x2_t) glob_bfloat_vec;\n+  (int16x4_t) glob_bfloat_vec;\n+\n+  (bfloat16x4_t) is_an_int_vec; /* { dg-error {cannot convert a value of type 'int32x4_t' to vector type '__Bfloat16x4_t' which has different size} } */\n+  (bfloat16x4_t) is_a_float_vec; /* { dg-error {cannot convert a value of type 'float32x4_t' to vector type '__Bfloat16x4_t' which has different size} } */\n+  (bfloat16x4_t) is_a_float16_vec;\n+  (bfloat16x4_t) is_an_int_pair;\n+  (bfloat16x4_t) is_a_float_pair;\n+  (bfloat16x4_t) is_a_short_vec;\n+  (bfloat16x4_t) is_a_double; /* { dg-error {cannot convert value to a vector} } */\n+\n+  /* Arrays and Structs.  */\n+\n+  typedef bfloat16x4_t array_type[2];\n+  extern bfloat16x4_t extern_array[];\n+\n+  bfloat16x4_t array[2];\n+  bfloat16x4_t zero_length_array[0];\n+  bfloat16x4_t empty_init_array[] = {};\n+  typedef bfloat16x4_t some_other_type[is_an_int];\n+\n+  struct struct1 {\n+    bfloat16x4_t a;\n+  };\n+\n+  union union1 {\n+    bfloat16x4_t a;\n+  };\n+\n+  /* Addressing and dereferencing.  */\n+\n+  bfloat16x4_t *bfloat_ptr = &vector0;\n+  vector0 = *bfloat_ptr;\n+\n+  /* Pointer assignment.  */\n+\n+  bfloat16x4_t *bfloat_ptr2 = bfloat_ptr;\n+  bfloat16x4_t *bfloat_ptr3 = array;\n+\n+  /* Pointer arithmetic.  */\n+\n+  ++bfloat_ptr;\n+  --bfloat_ptr;\n+  bfloat_ptr++;\n+  bfloat_ptr--;\n+  bfloat_ptr += 1;\n+  bfloat_ptr -= 1;\n+  bfloat_ptr - bfloat_ptr2;\n+  bfloat_ptr = &bfloat_ptr3[0];\n+  bfloat_ptr = &bfloat_ptr3[1];\n+\n+  /* Simple comparison.  */\n+  vector0 > glob_bfloat_vec; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  glob_bfloat_vec == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 > is_a_float_vec; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  is_a_float_vec == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 > 0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  0 == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 > 0.1; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  0.1 == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 > is_an_int_vec; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  is_an_int_vec == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+\n+  /* Pointer comparison.  */\n+\n+  bfloat_ptr == &vector0;\n+  bfloat_ptr != &vector0;\n+  bfloat_ptr < &vector0;\n+  bfloat_ptr <= &vector0;\n+  bfloat_ptr > &vector0;\n+  bfloat_ptr >= &vector0;\n+  bfloat_ptr == bfloat_ptr2;\n+  bfloat_ptr != bfloat_ptr2;\n+  bfloat_ptr < bfloat_ptr2;\n+  bfloat_ptr <= bfloat_ptr2;\n+  bfloat_ptr > bfloat_ptr2;\n+  bfloat_ptr >= bfloat_ptr2;\n+\n+  /* Conditional expressions.  */\n+\n+  0 ? vector0 : vector0;\n+  0 ? vector0 : is_a_float_vec; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? is_a_float_vec : vector0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? vector0 : is_a_float16_vec; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? is_a_float16_vec : vector0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? vector0 : 0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? 0 : vector0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? 0.1 : vector0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? vector0 : 0.1; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? bfloat_ptr : bfloat_ptr2;\n+  0 ? bfloat_ptr : float_ptr; /* { dg-error {pointer type mismatch in conditional expression} } */\n+  0 ? float_ptr : bfloat_ptr; /* { dg-error {pointer type mismatch in conditional expression} } */\n+\n+  vector0 ? vector0 : vector0; /* { dg-error {used vector type where scalar is required} } */\n+  vector0 ? is_a_float16_vec : vector0; /* { dg-error {used vector type where scalar is required} } */\n+  vector0 ? vector0 : is_a_float16_vec; /* { dg-error {used vector type where scalar is required} } */\n+  vector0 ? is_a_float16_vec : is_a_float16_vec; /* { dg-error {used vector type where scalar is required} } */\n+\n+  /* Unary operators.  */\n+\n+  +vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  -vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  ~vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  !vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  *vector0; /* { dg-error {invalid type argument of unary '\\*'} } */\n+  __real vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  __imag vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  ++vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  --vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0++; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0--; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+\n+  /* Binary arithmetic operations.  */\n+\n+  vector0 = glob_bfloat_vec + *bfloat_ptr; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 = glob_bfloat_vec + 0.1; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 = glob_bfloat_vec + 0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 = glob_bfloat_vec + is_a_float_vec; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+\n+  return vector0;\n+}\n+"}, {"sha": "586d05a928fbf3682b35e7de584e5d5a49dba196", "filename": "gcc/testsuite/gcc.target/aarch64/bfloat16_vector_typecheck_2.c", "status": "added", "additions": 260, "deletions": 0, "changes": 260, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9869896730f3055850034c05c596828d517fa9a2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_vector_typecheck_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9869896730f3055850034c05c596828d517fa9a2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_vector_typecheck_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbfloat16_vector_typecheck_2.c?ref=9869896730f3055850034c05c596828d517fa9a2", "patch": "@@ -0,0 +1,260 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+/* { dg-additional-options \"-O3 --save-temps -Wno-pedantic\" }  */\n+#include <arm_neon.h>\n+\n+bfloat16_t glob_bfloat;\n+bfloat16x8_t glob_bfloat_vec;\n+\n+float32x4_t is_a_float_vec;\n+float64x2_t is_a_double_pair;\n+\n+float16x8_t *float_ptr;\n+float16x8_t is_a_float16_vec;\n+\n+int32x4_t is_an_int_vec;\n+int64x2_t is_a_long_int_pair;\n+int16x8_t is_a_short_vec;\n+\n+int is_an_int;\n+short is_a_short_int;\n+float is_a_float;\n+float is_a_float16;\n+double is_a_double;\n+\n+bfloat16x8_t foo3 (void) { return (bfloat16x8_t) 0x12345678123456781234567812345678; }\n+ /* { dg-error {integer constant is too large for its type} \"\" {target *-*-*} 27 } */\n+ /* { dg-error {cannot convert a value of type 'long int' to vector type '__Bfloat16x8_t' which has different size} \"\" {target *-*-*} 27 } */\n+\n+bfloat16x8_t footest (bfloat16x8_t vector0)\n+{\n+  /* Initialisation  */\n+\n+  bfloat16x8_t vector1_1;\n+  bfloat16x8_t vector1_2 = glob_bfloat_vec;\n+  bfloat16x8_t vector1_3 = is_a_float_vec; /* { dg-error {incompatible types when initializing type 'bfloat16x8_t' using type 'float32x4_t'} } */\n+  bfloat16x8_t vector1_4 = is_an_int_vec;  /* { dg-error {incompatible types when initializing type 'bfloat16x8_t' using type 'int32x4_t'} } */\n+  bfloat16x8_t vector1_5 = is_a_float16_vec; /* { dg-error {incompatible types when initializing type 'bfloat16x8_t' using type 'float16x8_t'} } */\n+  bfloat16x8_t vector1_6 = is_a_double_pair; /* { dg-error {incompatible types when initializing type 'bfloat16x8_t' using type 'float64x2_t'} } */\n+  bfloat16x8_t vector1_7 = is_a_long_int_pair; /* { dg-error {incompatible types when initializing type 'bfloat16x8_t' using type 'int64x2_t'} } */\n+  bfloat16x8_t vector1_8 = is_a_short_vec; /* { dg-error {incompatible types when initializing type 'bfloat16x8_t' using type 'int16x8_t'} } */\n+\n+  int32x4_t initi_1_1 = glob_bfloat_vec;   /* { dg-error {incompatible types when initializing type 'int32x4_t' using type 'bfloat16x8_t'} } */\n+  float32x4_t initi_1_2 = glob_bfloat_vec; /* { dg-error {incompatible types when initializing type 'float32x4_t' using type 'bfloat16x8_t'} } */\n+  float16x8_t initi_1_3 = glob_bfloat_vec; /* { dg-error {incompatible types when initializing type 'float16x8_t' using type 'bfloat16x8_t'} } */\n+  float64x2_t initi_1_4 = glob_bfloat_vec; /* { dg-error {incompatible types when initializing type 'float64x2_t' using type 'bfloat16x8_t'} } */\n+  int64x2_t initi_1_5 = glob_bfloat_vec;  /* { dg-error {incompatible types when initializing type 'int64x2_t' using type 'bfloat16x8_t'} } */\n+  int16x8_t initi_1_6 = glob_bfloat_vec;  /* { dg-error {incompatible types when initializing type 'int16x8_t' using type 'bfloat16x8_t'} } */\n+\n+  bfloat16x8_t vector2_1 = {};\n+  bfloat16x8_t vector2_2 = { glob_bfloat };\n+  bfloat16x8_t vector2_3 = { glob_bfloat, glob_bfloat, glob_bfloat, glob_bfloat };\n+  bfloat16x8_t vector2_4 = { 0 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16x8_t vector2_5 = { 0.1 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16x8_t vector2_6 = { is_a_float16 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16x8_t vector2_7 = { is_a_float }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16x8_t vector2_8 = { is_an_int }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16x8_t vector2_9 = { is_a_short_int }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  bfloat16x8_t vector2_10 = { 0.0, 0, is_a_short_int, is_a_float }; /* { dg-error \"invalid conversion to type 'bfloat16_t'\" } */\n+\n+  int32x4_t initi_2_1 = { glob_bfloat };   /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  float32x4_t initi_2_2 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  float16x8_t initi_2_3 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  float64x2_t initi_2_4 = { glob_bfloat }; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  int64x2_t initi_2_5 = { glob_bfloat };   /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  int16x8_t initi_2_6 = { glob_bfloat };   /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+\n+  /* Assignments to/from vectors.  */\n+\n+  glob_bfloat_vec = glob_bfloat_vec;\n+  glob_bfloat_vec = 0;   /* { dg-error {incompatible types when assigning to type 'bfloat16x8_t' from type 'int'} } */\n+  glob_bfloat_vec = 0.1; /* { dg-error {incompatible types when assigning to type 'bfloat16x8_t' from type 'double'} } */\n+  glob_bfloat_vec = is_a_float_vec; /* { dg-error {incompatible types when assigning to type 'bfloat16x8_t' from type 'float32x4_t'} } */\n+  glob_bfloat_vec = is_an_int_vec; /* { dg-error {incompatible types when assigning to type 'bfloat16x8_t' from type 'int32x4_t'} } */\n+  glob_bfloat_vec = is_a_float16_vec; /* { dg-error {incompatible types when assigning to type 'bfloat16x8_t' from type 'float16x8_t'} } */\n+  glob_bfloat_vec = is_a_double_pair; /* { dg-error {incompatible types when assigning to type 'bfloat16x8_t' from type 'float64x2_t'} } */\n+  glob_bfloat_vec = is_a_long_int_pair; /* { dg-error {incompatible types when assigning to type 'bfloat16x8_t' from type 'int64x2_t'} } */\n+  glob_bfloat_vec = is_a_short_vec; /* { dg-error {incompatible types when assigning to type 'bfloat16x8_t' from type 'int16x8_t'} } */\n+\n+  is_an_int_vec = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type 'int32x4_t' from type 'bfloat16x8_t'} } */\n+  is_a_float_vec = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type 'float32x4_t' from type 'bfloat16x8_t'} } */\n+  is_a_float16_vec = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type 'float16x8_t' from type 'bfloat16x8_t'} } */\n+  is_a_double_pair = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type 'float64x2_t' from type 'bfloat16x8_t'} } */\n+  is_a_long_int_pair = glob_bfloat_vec; /* { dg-error {incompatible types when assigning to type 'int64x2_t' from type 'bfloat16x8_t'} } */\n+  is_a_short_vec = glob_bfloat_vec;/* { dg-error {incompatible types when assigning to type 'int16x8_t' from type 'bfloat16x8_t'} } */\n+\n+  /* Assignments to/from elements.  */\n+\n+  vector2_3[0] = glob_bfloat;\n+  vector2_3[0] = is_an_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  vector2_3[0] = is_a_short_int; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  vector2_3[0] = is_a_float; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  vector2_3[0] = is_a_float16; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  vector2_3[0] = 0; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  vector2_3[0] = 0.1; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+\n+  glob_bfloat = vector2_3[0];\n+  is_an_int = vector2_3[0]; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  is_a_short_int = vector2_3[0]; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  is_a_float = vector2_3[0]; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+  is_a_float16 = vector2_3[0]; /* { dg-error {invalid conversion from type 'bfloat16_t'} } */\n+\n+  /* Compound literals.  */\n+\n+  (bfloat16x8_t) {};\n+\n+  (bfloat16x8_t) { 0 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16x8_t) { 0.1 }; /* { dg-error {invalid conversion to type 'bfloat16_t'} } */\n+  (bfloat16x8_t) { is_a_float_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'float32x4_t'} } */\n+  (bfloat16x8_t) { is_an_int_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'int32x4_t'} } */\n+  (bfloat16x8_t) { is_a_double_pair }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'float64x2_t'} } */\n+  (bfloat16x8_t) { is_a_long_int_pair }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'int64x2_t'} } */\n+  (bfloat16x8_t) { is_a_float16_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'float16x8_t'} } */\n+  (bfloat16x8_t) { is_a_short_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'int16x8_t'} } */\n+\n+  (bfloat16x8_t) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type '__bf16' using type 'bfloat16x8_t'} } */\n+  (int32x4_t) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type 'int' using type 'bfloat16x8_t'} } */\n+  (float32x4_t) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type 'float' using type 'bfloat16x8_t'} } */\n+  (int64x2_t) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type 'long int' using type 'bfloat16x8_t'} } */\n+  (float16x8_t) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type '__fp16' using type 'bfloat16x8_t'} } */\n+  (int16x8_t) { glob_bfloat_vec }; /* { dg-error {incompatible types when initializing type 'short int' using type 'bfloat16x8_t'} } */\n+\n+  /* Casting.  */\n+\n+  (void) glob_bfloat_vec;\n+  (bfloat16x8_t) glob_bfloat_vec;\n+\n+  (bfloat16_t) glob_bfloat_vec; /* { dg-error {aggregate value used where a floating-point was expected} } */\n+  (short) glob_bfloat_vec; /* { dg-error {cannot convert a vector of type 'bfloat16x8_t' to type 'short int' which has different size} } */\n+  (int) glob_bfloat_vec; /* { dg-error {cannot convert a vector of type 'bfloat16x8_t' to type 'int' which has different size} } */\n+  (float16_t) glob_bfloat_vec; /* { dg-error {aggregate value used where a floating-point was expected} } */\n+  (float) glob_bfloat_vec; /* { dg-error {aggregate value used where a floating-point was expected} } */\n+  (double) glob_bfloat_vec; /* { dg-error {aggregate value used where a floating-point was expected} } */\n+\n+  (int32x4_t) glob_bfloat_vec;\n+  (float32x4_t) glob_bfloat_vec;\n+  (float16x8_t) glob_bfloat_vec;\n+  (int64x2_t) glob_bfloat_vec;\n+  (float64x2_t) glob_bfloat_vec;\n+  (int16x8_t) glob_bfloat_vec;\n+\n+  (bfloat16x8_t) is_an_int_vec;\n+  (bfloat16x8_t) is_a_float_vec;\n+  (bfloat16x8_t) is_a_float16_vec;\n+  (bfloat16x8_t) is_a_long_int_pair;\n+  (bfloat16x8_t) is_a_double_pair;\n+  (bfloat16x8_t) is_a_short_vec;\n+\n+  /* Arrays and Structs.  */\n+\n+  typedef bfloat16x8_t array_type[2];\n+  extern bfloat16x8_t extern_array[];\n+\n+  bfloat16x8_t array[2];\n+  bfloat16x8_t zero_length_array[0];\n+  bfloat16x8_t empty_init_array[] = {};\n+  typedef bfloat16x8_t some_other_type[is_an_int];\n+\n+  struct struct1 {\n+    bfloat16x8_t a;\n+  };\n+\n+  union union1 {\n+    bfloat16x8_t a;\n+  };\n+\n+  /* Addressing and dereferencing.  */\n+\n+  bfloat16x8_t *bfloat_ptr = &vector0;\n+  vector0 = *bfloat_ptr;\n+\n+  /* Pointer assignment.  */\n+\n+  bfloat16x8_t *bfloat_ptr2 = bfloat_ptr;\n+  bfloat16x8_t *bfloat_ptr3 = array;\n+\n+  /* Pointer arithmetic.  */\n+\n+  ++bfloat_ptr;\n+  --bfloat_ptr;\n+  bfloat_ptr++;\n+  bfloat_ptr--;\n+  bfloat_ptr += 1;\n+  bfloat_ptr -= 1;\n+  bfloat_ptr - bfloat_ptr2;\n+  bfloat_ptr = &bfloat_ptr3[0];\n+  bfloat_ptr = &bfloat_ptr3[1];\n+\n+  /* Simple comparison.  */\n+  vector0 > glob_bfloat_vec; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  glob_bfloat_vec == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 > is_a_float_vec; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  is_a_float_vec == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 > 0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  0 == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 > 0.1; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  0.1 == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 > is_an_int_vec; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  is_an_int_vec == vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+\n+  /* Pointer comparison.  */\n+\n+  bfloat_ptr == &vector0;\n+  bfloat_ptr != &vector0;\n+  bfloat_ptr < &vector0;\n+  bfloat_ptr <= &vector0;\n+  bfloat_ptr > &vector0;\n+  bfloat_ptr >= &vector0;\n+  bfloat_ptr == bfloat_ptr2;\n+  bfloat_ptr != bfloat_ptr2;\n+  bfloat_ptr < bfloat_ptr2;\n+  bfloat_ptr <= bfloat_ptr2;\n+  bfloat_ptr > bfloat_ptr2;\n+  bfloat_ptr >= bfloat_ptr2;\n+\n+  /* Conditional expressions.  */\n+\n+  0 ? vector0 : vector0;\n+  0 ? vector0 : is_a_float_vec; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? is_a_float_vec : vector0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? vector0 : is_a_float16_vec; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? is_a_float16_vec : vector0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? vector0 : 0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? 0 : vector0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? 0.1 : vector0; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? vector0 : 0.1; /* { dg-error {type mismatch in conditional expression} } */\n+  0 ? bfloat_ptr : bfloat_ptr2;\n+  0 ? bfloat_ptr : float_ptr; /* { dg-error {pointer type mismatch in conditional expression} } */\n+  0 ? float_ptr : bfloat_ptr; /* { dg-error {pointer type mismatch in conditional expression} } */\n+\n+  vector0 ? vector0 : vector0; /* { dg-error {used vector type where scalar is required} } */\n+  vector0 ? is_a_float16_vec : vector0; /* { dg-error {used vector type where scalar is required} } */\n+  vector0 ? vector0 : is_a_float16_vec; /* { dg-error {used vector type where scalar is required} } */\n+  vector0 ? is_a_float16_vec : is_a_float16_vec; /* { dg-error {used vector type where scalar is required} } */\n+\n+  /* Unary operators.  */\n+\n+  +vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  -vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  ~vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  !vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  *vector0; /* { dg-error {invalid type argument of unary '\\*'} } */\n+  __real vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  __imag vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  ++vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  --vector0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0++; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0--; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+\n+  /* Binary arithmetic operations.  */\n+\n+  vector0 = glob_bfloat_vec + *bfloat_ptr; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 = glob_bfloat_vec + 0.1; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 = glob_bfloat_vec + 0; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+  vector0 = glob_bfloat_vec + is_a_float_vec; /* { dg-error {operation not permitted on type 'bfloat16_t'} } */\n+\n+  return vector0;\n+}\n+"}]}