{"sha": "a20f6f00bf53a4debcbf361256ed098f8e930850", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIwZjZmMDBiZjUzYTRkZWJjYmYzNjEyNTZlZDA5OGY4ZTkzMDg1MA==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2005-04-01T08:13:50Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2005-04-01T08:13:50Z"}, "message": "cygming.h (SUBTARGET_ATTRIBUTE_TABLE): Define, with entry for selectany attribute.\n\n\t* config/i386/cygming.h (SUBTARGET_ATTRIBUTE_TABLE): Define,\n\twith entry for selectany attribute.\n\t* config/i386/i386-protos.h (ix86_handle_selectany_attribute):\n\tDeclare.\n\t* config/i386/winnt.c (ix86_handle_selectany_attribute): Define.\n\t(i386_pe_asm_named_section): Handle sections generated by\n\tselectany attribute.\n\t* doc/extend.texi (selectany): Document attribute.\n\nFrom-SVN: r97377", "tree": {"sha": "9133f30c16e782e07da95fa27630f892ccaa5114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9133f30c16e782e07da95fa27630f892ccaa5114"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a20f6f00bf53a4debcbf361256ed098f8e930850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20f6f00bf53a4debcbf361256ed098f8e930850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a20f6f00bf53a4debcbf361256ed098f8e930850", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20f6f00bf53a4debcbf361256ed098f8e930850/comments", "author": null, "committer": null, "parents": [{"sha": "7c93c2cc4dd591cfc88bd058611befae64c6238a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c93c2cc4dd591cfc88bd058611befae64c6238a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c93c2cc4dd591cfc88bd058611befae64c6238a"}], "stats": {"total": 80, "additions": 76, "deletions": 4}, "files": [{"sha": "0a78483058df568e8e5c6e1d4255d434c0c68a9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20f6f00bf53a4debcbf361256ed098f8e930850/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20f6f00bf53a4debcbf361256ed098f8e930850/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a20f6f00bf53a4debcbf361256ed098f8e930850", "patch": "@@ -1,3 +1,14 @@\n+2005-04-01  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\t* config/i386/cygming.h (SUBTARGET_ATTRIBUTE_TABLE): Define,\n+\twith entry for selectany attribute.\n+\t* config/i386/i386-protos.h (ix86_handle_selectany_attribute):\n+\tDeclare.\n+\t* config/i386/winnt.c (ix86_handle_selectany_attribute): Define.\n+\t(i386_pe_asm_named_section): Handle sections generated by\n+\tselectany attribute.\n+\t* doc/extend.texi (selectany): Document attribute.\n+\n 2005-04-01  Paolo Bonzini  <bonzini@gnu.org>\n \t    Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "de731bb7ada374862e540c840d334ab40379620c", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20f6f00bf53a4debcbf361256ed098f8e930850/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20f6f00bf53a4debcbf361256ed098f8e930850/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=a20f6f00bf53a4debcbf361256ed098f8e930850", "patch": "@@ -418,6 +418,10 @@ extern int i386_pe_dllimport_name_p (const char *);\n #undef TARGET_USE_LOCAL_THUNK_ALIAS_P\n #define TARGET_USE_LOCAL_THUNK_ALIAS_P(DECL) (!DECL_ONE_ONLY (DECL))\n \n+#define SUBTARGET_ATTRIBUTE_TABLE \\\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */ \\\n+  { \"selectany\", 0, 0, true, false, false, ix86_handle_selectany_attribute }\n+\n #undef TREE\n \n #ifndef BUFSIZ"}, {"sha": "1ecc3aef1c1252d21afb02275fe685d01b4d776d", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20f6f00bf53a4debcbf361256ed098f8e930850/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20f6f00bf53a4debcbf361256ed098f8e930850/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=a20f6f00bf53a4debcbf361256ed098f8e930850", "patch": "@@ -216,6 +216,7 @@ extern int ix86_data_alignment (tree, int);\n extern int ix86_local_alignment (tree, int);\n extern int ix86_constant_alignment (tree, int);\n extern tree ix86_handle_shared_attribute (tree *, tree, tree, int, bool *);\n+extern tree ix86_handle_selectany_attribute (tree *, tree, tree, int, bool *); \n \n extern unsigned int i386_pe_section_type_flags (tree, const char *, int);\n extern void i386_pe_asm_named_section (const char *, unsigned int, tree);"}, {"sha": "ebd8db7525273d3fa17bbc8e773db6267ff4b957", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20f6f00bf53a4debcbf361256ed098f8e930850/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20f6f00bf53a4debcbf361256ed098f8e930850/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=a20f6f00bf53a4debcbf361256ed098f8e930850", "patch": "@@ -78,6 +78,36 @@ ix86_handle_shared_attribute (tree *node, tree name,\n \n   return NULL_TREE;\n }\n+\n+/* Handle a \"selectany\" attribute;\n+   arguments as in struct attribute_spec.handler.  */\n+tree\n+ix86_handle_selectany_attribute (tree *node, tree name,\n+\t\t\t         tree args ATTRIBUTE_UNUSED,\n+\t\t\t         int flags ATTRIBUTE_UNUSED,\n+\t\t\t\t bool *no_add_attrs)\n+{\n+  /* The attribute applies only to objects that are initialized and have\n+     external linkage,  */\t\n+  if (TREE_CODE (*node) == VAR_DECL && TREE_PUBLIC (*node)\n+      && (DECL_INITIAL (*node)\n+          /* If an object is initialized with a ctor, the static\n+\t     initialization and destruction code for it is present in\n+\t     each unit defining the object.  The code that calls the\n+\t     ctor is protected by a link-once guard variable, so that\n+\t     the object still has link-once semantics,  */\n+    \t  || TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (*node))))\n+    make_decl_one_only (*node);\n+  else\n+    {\t\n+      error (\"%qs attribute applies only to initialized variables\"\n+       \t     \" with external linkage\",  IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n \f\n /* Return the type that we should use to determine if DECL is\n    imported or exported.  */\n@@ -622,7 +652,7 @@ i386_pe_section_type_flags (tree decl, const char *name, int reloc)\n \n void\n i386_pe_asm_named_section (const char *name, unsigned int flags, \n-\t\t\t   tree decl ATTRIBUTE_UNUSED)\n+\t\t\t   tree decl)\n {\n   char flagchars[8], *f = flagchars;\n \n@@ -649,10 +679,16 @@ i386_pe_asm_named_section (const char *name, unsigned int flags,\n   if (flags & SECTION_LINKONCE)\n     {\n       /* Functions may have been compiled at various levels of\n-         optimization so we can't use `same_size' here.\n-         Instead, have the linker pick one.  */\n+\t optimization so we can't use `same_size' here.\n+\t Instead, have the linker pick one, without warning.\n+\t If 'selectany' attibute has been specified,  MS compiler\n+\t sets 'discard' characteristic, rather than telling linker\n+\t to warn of size or content mismatch, so do the same.  */ \n+      bool discard = (flags & SECTION_CODE)\n+\t\t      || lookup_attribute (\"selectany\",\n+\t\t\t\t\t   DECL_ATTRIBUTES (decl));\t \n       fprintf (asm_out_file, \"\\t.linkonce %s\\n\",\n-\t       (flags & SECTION_CODE ? \"discard\" : \"same_size\"));\n+\t       (discard  ? \"discard\" : \"same_size\"));\n     }\n }\n \f"}, {"sha": "48784af48b7071be84add2352869b5818b2990a4", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20f6f00bf53a4debcbf361256ed098f8e930850/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20f6f00bf53a4debcbf361256ed098f8e930850/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a20f6f00bf53a4debcbf361256ed098f8e930850", "patch": "@@ -3000,6 +3000,26 @@ struct S  __attribute__ ((vector_size (16))) foo;\n is invalid even if the size of the structure is the same as the size of\n the @code{int}.\n \n+@item selectany\n+The @code{selectany} attribute causes an initialized global variable to\n+have link-once semantics.  When multiple definitions of the variable are\n+encountered by the linker, the first is selected and the remainder are\n+discarded.  Following usage by the Microsoft compiler, the linker is told\n+@emph{not} to warn about size or content differences of the multiple\n+definitions.\n+\n+Although the primary usage of this attribute is for POD types, the\n+attribute can also be applied to global C++ objects that are initialized\n+by a constructor.  In this case, the static initialization and destruction\n+code for the object is emitted in each translation defining the object,\n+but the calls to the constructor and destructor are protected by a\n+link-once guard variable. \n+\n+The @code{selectany} attribute is only available on Microsoft Windows\n+targets.  You can use @code{__declspec (selectany)} as a synonym for\n+@code{__attribute__ ((selectany))} for compatibility with other\n+compilers.\n+\n @item weak\n The @code{weak} attribute is described in @xref{Function Attributes}.\n "}]}