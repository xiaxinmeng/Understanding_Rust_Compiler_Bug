{"sha": "9c0631a756c7409907a9302e77531a94d9cd6263", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMwNjMxYTc1NmM3NDA5OTA3YTkzMDJlNzc1MzFhOTRkOWNkNjI2Mw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2003-04-30T00:49:01Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2003-04-30T00:49:01Z"}, "message": "expr.c (emit_group_load): Dump parallels of simd types to memory.\n\n2003-04-29  Aldy Hernandez  <aldyh@redhat.com>\n\n        * expr.c (emit_group_load): Dump parallels of simd types to\n        memory.\n\nFrom-SVN: r66280", "tree": {"sha": "a1b6ae09de57e5566900ed964808e7ed0f31cf4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1b6ae09de57e5566900ed964808e7ed0f31cf4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c0631a756c7409907a9302e77531a94d9cd6263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0631a756c7409907a9302e77531a94d9cd6263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0631a756c7409907a9302e77531a94d9cd6263", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0631a756c7409907a9302e77531a94d9cd6263/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95b588cf1579b73cb3152ef77757de581e666bd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95b588cf1579b73cb3152ef77757de581e666bd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95b588cf1579b73cb3152ef77757de581e666bd6"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "af70aedd081b7446f012d47c1df5493aba2e9edf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0631a756c7409907a9302e77531a94d9cd6263/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0631a756c7409907a9302e77531a94d9cd6263/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c0631a756c7409907a9302e77531a94d9cd6263", "patch": "@@ -1,3 +1,8 @@\n+2003-04-29  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * expr.c (emit_group_load): Dump parallels of simd types to\n+        memory.\n+\n 2003-04-29  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* genautomata.c (add_vect): Check undefined value for range type"}, {"sha": "6f0b36cfadacbabfebfe2417529ae05928e46d89", "filename": "gcc/expr.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0631a756c7409907a9302e77531a94d9cd6263/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0631a756c7409907a9302e77531a94d9cd6263/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9c0631a756c7409907a9302e77531a94d9cd6263", "patch": "@@ -2363,6 +2363,19 @@ emit_group_load (dst, orig_src, ssize)\n \t  else\n \t    abort ();\n \t}\n+      /* FIXME: A SIMD parallel will eventually lead to a subreg of a\n+\t SIMD register, which is currently broken.  While we get GCC\n+\t to emit proper RTL for these cases, let's dump to memory.  */\n+      else if (VECTOR_MODE_P (GET_MODE (dst))\n+\t       && GET_CODE (src) == REG)\n+\t{\n+\t  int slen = GET_MODE_SIZE (GET_MODE (src));\n+\t  rtx mem;\n+\n+\t  mem = assign_stack_temp (GET_MODE (src), slen, 0);\n+\t  emit_move_insn (mem, src);\n+\t  tmps[i] = adjust_address (mem, mode, (int) bytepos);\n+\t}\n       else if (CONSTANT_P (src)\n \t       || (GET_CODE (src) == REG && GET_MODE (src) == mode))\n \ttmps[i] = src;"}]}