{"sha": "0927ce96c9f030dc7676ab4defbcd7e3f0ef61bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkyN2NlOTZjOWYwMzBkYzc2NzZhYjRkZWZiY2Q3ZTNmMGVmNjFiZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-04T23:22:26Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-04T23:22:26Z"}, "message": "ifcvt.c (noce_process_if_block): Fail if A or B modified between condition and jump.\n\n        * ifcvt.c (noce_process_if_block): Fail if A or B modified\n        between condition and jump.\n\nFrom-SVN: r33689", "tree": {"sha": "595dfafa27d306f4217c2dd9bae5848f058a3aff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/595dfafa27d306f4217c2dd9bae5848f058a3aff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0927ce96c9f030dc7676ab4defbcd7e3f0ef61bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0927ce96c9f030dc7676ab4defbcd7e3f0ef61bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0927ce96c9f030dc7676ab4defbcd7e3f0ef61bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0927ce96c9f030dc7676ab4defbcd7e3f0ef61bf/comments", "author": null, "committer": null, "parents": [{"sha": "00447f7d40ea8099cd30d99fb62b290e990665fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00447f7d40ea8099cd30d99fb62b290e990665fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00447f7d40ea8099cd30d99fb62b290e990665fa"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "79be885fc15c0cbae251420ca7577483a5fbcd4b", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0927ce96c9f030dc7676ab4defbcd7e3f0ef61bf/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0927ce96c9f030dc7676ab4defbcd7e3f0ef61bf/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=0927ce96c9f030dc7676ab4defbcd7e3f0ef61bf", "patch": "@@ -1054,11 +1054,6 @@ noce_process_if_block (test_bb, then_bb, else_bb, join_bb)\n   x = SET_DEST (set_a);\n   a = SET_SRC (set_a);\n \n-  /* X may not be mentioned between cond_earliest and the jump.  */\n-  for (insn = jump; insn != if_info.cond_earliest; insn = PREV_INSN (insn))\n-    if (INSN_P (insn) && reg_mentioned_p (x, insn))\n-      return FALSE;\n-\n   /* Look for the other potential set.  Make sure we've got equivalent\n      destinations.  */\n   /* ??? This is overconservative.  Storing to two different mems is\n@@ -1088,6 +1083,17 @@ noce_process_if_block (test_bb, then_bb, else_bb, join_bb)\n     }\n   b = (set_b ? SET_SRC (set_b) : x);\n \n+  /* X may not be mentioned in the range (cond_earliest, jump].  */\n+  for (insn = jump; insn != if_info.cond_earliest; insn = PREV_INSN (insn))\n+    if (INSN_P (insn) && reg_mentioned_p (x, insn))\n+      return FALSE;\n+\n+  /* A and B may not be modified in the range [cond_earliest, jump).  */\n+  for (insn = if_info.cond_earliest; insn != jump; insn = NEXT_INSN (insn))\n+    if (INSN_P (insn)\n+\t&& (modified_in_p (a, insn) || modified_in_p (b, insn)))\n+      return FALSE;\n+\n   /* Only operate on register destinations, and even then avoid extending\n      the lifetime of hard registers on small register class machines.  */\n   orig_x = x;"}]}