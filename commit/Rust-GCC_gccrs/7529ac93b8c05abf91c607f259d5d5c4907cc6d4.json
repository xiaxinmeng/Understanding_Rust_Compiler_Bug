{"sha": "7529ac93b8c05abf91c607f259d5d5c4907cc6d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUyOWFjOTNiOGMwNWFiZjkxYzYwN2YyNTlkNWQ1YzQ5MDdjYzZkNA==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-07-07T02:14:24Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-07-07T02:14:24Z"}, "message": "entered into RCS\n\nFrom-SVN: r1496", "tree": {"sha": "440caa60c123066e2caddabf2e315c5ffd336134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/440caa60c123066e2caddabf2e315c5ffd336134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7529ac93b8c05abf91c607f259d5d5c4907cc6d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7529ac93b8c05abf91c607f259d5d5c4907cc6d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7529ac93b8c05abf91c607f259d5d5c4907cc6d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7529ac93b8c05abf91c607f259d5d5c4907cc6d4/comments", "author": null, "committer": null, "parents": [{"sha": "592252adb8d84c69f69c7003913dcd02359b06c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592252adb8d84c69f69c7003913dcd02359b06c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/592252adb8d84c69f69c7003913dcd02359b06c3"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "250eb816cc9068940553b76f76f7bc132eada35e", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7529ac93b8c05abf91c607f259d5d5c4907cc6d4/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7529ac93b8c05abf91c607f259d5d5c4907cc6d4/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=7529ac93b8c05abf91c607f259d5d5c4907cc6d4", "patch": "@@ -804,15 +804,19 @@ operand_subword (op, i, validate_address, mode)\n       && GET_MODE_CLASS (mode) == MODE_FLOAT\n       && GET_MODE_SIZE (mode) == 2 * UNITS_PER_WORD\n       && GET_CODE (op) == CONST_DOUBLE)\n-    return GEN_INT (i ^ (WORDS_BIG_ENDIAN !=\n-/* The constant is stored in the host's word-ordering,\n-   but we want to access it in the target's word-ordering.  */\n+    {\n+      /* The constant is stored in the host's word-ordering,\n+\t but we want to access it in the target's word-ordering.  Some\n+\t compilers don't like a conditional inside macro args, so we have two\n+\t copies of the return.  */\n #ifdef HOST_WORDS_BIG_ENDIAN\n-\t\t\t 1\n+      return GEN_INT (i == WORDS_BIG_ENDIAN\n+\t\t      ? CONST_DOUBLE_HIGH (op) : CONST_DOUBLE_LOW (op));\n #else\n-\t\t\t 0\n+      return GEN_INT (i != WORDS_BIG_ENDIAN\n+\t\t      ? CONST_DOUBLE_HIGH (op) : CONST_DOUBLE_LOW (op));\n #endif\n-\t\t\t ) ? CONST_DOUBLE_HIGH (op) : CONST_DOUBLE_LOW (op));\n+    }\n \n   /* Single word float is a little harder, since single- and double-word\n      values often do not have the same high-order bits.  We have already"}]}