{"sha": "da1c7394b35e976cada33db496beeb50ccca4cb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGExYzczOTRiMzVlOTc2Y2FkYTMzZGI0OTZiZWViNTBjY2NhNGNiNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2007-03-05T19:45:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-03-05T19:45:20Z"}, "message": "c.opt (fgnu89-inline): New option.\n\n\t* c.opt (fgnu89-inline): New option.\n\t* c-opts.c (c_common_post_options): Set default value for\n\tflag_gnu89_inline.\n\t* c-decl.c (WANT_C99_INLINE_SEMANTICS): Remove.\n\t(pop_scope): Check flag_gnu89_inline rather than flag_isoc99 for\n\tinline functions.\n\t(diagnose_mismatched_decls, merge_decls, start_decl): Likewise.\n\t(grokdeclarator, start_function): Likewise.\n\t* c-cppbuiltin.c (c_cpp_builtins): Define either\n\t__GNUC_GNU_INLINE__ or __GNUC_STDC_INLINE__.\n\t* doc/invoke.texi (Option Summary): Mention -fgnu89-inline.\n\t(C Dialect Options): Document -fgnu89-inline.\n\t* doc/extend.texi (Function Attributes): Explain what the\n\tgnu_inline attribute does.\n\t* doc/cpp.texi (Common Predefined Macros): Document\n\t__GNUC_GNU_INLINE__ and __GNUC_STDC_INLINE__.\n\nFrom-SVN: r122565", "tree": {"sha": "2db6332a4e992877897bda68ab73c9bb0e30c4c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2db6332a4e992877897bda68ab73c9bb0e30c4c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da1c7394b35e976cada33db496beeb50ccca4cb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da1c7394b35e976cada33db496beeb50ccca4cb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da1c7394b35e976cada33db496beeb50ccca4cb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da1c7394b35e976cada33db496beeb50ccca4cb4/comments", "author": null, "committer": null, "parents": [{"sha": "3b6d448dbcf715ed169f1d197a928d10e0fcd959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b6d448dbcf715ed169f1d197a928d10e0fcd959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b6d448dbcf715ed169f1d197a928d10e0fcd959"}], "stats": {"total": 294, "additions": 259, "deletions": 35}, "files": [{"sha": "a27533fedfe28a979edf273aac9fb5b42f7f3214", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da1c7394b35e976cada33db496beeb50ccca4cb4", "patch": "@@ -1,3 +1,22 @@\n+2007-03-05  Ian Lance Taylor  <iant@google.com>\n+\n+\t* c.opt (fgnu89-inline): New option.\n+\t* c-opts.c (c_common_post_options): Set default value for\n+\tflag_gnu89_inline.\n+\t* c-decl.c (WANT_C99_INLINE_SEMANTICS): Remove.\n+\t(pop_scope): Check flag_gnu89_inline rather than flag_isoc99 for\n+\tinline functions.\n+\t(diagnose_mismatched_decls, merge_decls, start_decl): Likewise.\n+\t(grokdeclarator, start_function): Likewise.\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define either\n+\t__GNUC_GNU_INLINE__ or __GNUC_STDC_INLINE__.\n+\t* doc/invoke.texi (Option Summary): Mention -fgnu89-inline.\n+\t(C Dialect Options): Document -fgnu89-inline.\n+\t* doc/extend.texi (Function Attributes): Explain what the\n+\tgnu_inline attribute does.\n+\t* doc/cpp.texi (Common Predefined Macros): Document\n+\t__GNUC_GNU_INLINE__ and __GNUC_STDC_INLINE__.\n+\n 2007-03-05  Ian Lance Taylor  <iant@google.com>\n \n \tPR tree-optimization/31034"}, {"sha": "0239a1c3af8e1cdc0b9bcbb7624543faaf9bd9be", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=da1c7394b35e976cada33db496beeb50ccca4cb4", "patch": "@@ -1,5 +1,6 @@\n /* Define builtin-in macros for the C family front ends.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -495,6 +496,11 @@ c_cpp_builtins (cpp_reader *pfile)\n   /* Misc.  */\n   builtin_define_with_value (\"__VERSION__\", version_string, 1);\n \n+  if (flag_gnu89_inline)\n+    cpp_define (pfile, \"__GNUC_GNU_INLINE__\");\n+  else\n+    cpp_define (pfile, \"__GNUC_STDC_INLINE__\");\n+\n   /* Definitions for LP64 model.  */\n   if (TYPE_PRECISION (long_integer_type_node) == 64\n       && POINTER_SIZE == 64"}, {"sha": "b2bed24afd8771b69eea402c764038890a511e78", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=da1c7394b35e976cada33db496beeb50ccca4cb4", "patch": "@@ -1,6 +1,6 @@\n /* Process declarations and variables for C compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -62,12 +62,6 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"langhooks-def.h\"\n #include \"pointer-set.h\"\n \n-/* Set this to 1 if you want the standard ISO C99 semantics of 'inline'\n-   when you specify -std=c99 or -std=gnu99, and to 0 if you want\n-   behavior compatible with the nonstandard semantics implemented by\n-   GCC 2.95 through 4.2.  */\n-#define WANT_C99_INLINE_SEMANTICS 1\n-\n /* In grokdeclarator, distinguish syntactic contexts of declarators.  */\n enum decl_context\n { NORMAL,\t\t\t/* Ordinary declaration */\n@@ -803,7 +797,7 @@ pop_scope (void)\n \t  else if (DECL_DECLARED_INLINE_P (p)\n \t\t   && TREE_PUBLIC (p)\n \t\t   && !DECL_INITIAL (p)\n-\t\t   && flag_isoc99)\n+\t\t   && !flag_gnu89_inline)\n \t    pedwarn (\"inline function %q+D declared but never defined\", p);\n \n \t  goto common_symbol;\n@@ -1330,15 +1324,13 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t\t unit.  */\n \t      if ((!DECL_EXTERN_INLINE (olddecl)\n \t\t   || DECL_EXTERN_INLINE (newdecl)\n-#if WANT_C99_INLINE_SEMANTICS\n-\t\t   || (flag_isoc99\n+\t\t   || (!flag_gnu89_inline\n \t\t       && (!DECL_DECLARED_INLINE_P (olddecl)\n \t\t\t   || !lookup_attribute (\"gnu_inline\",\n \t\t\t\t\t\t DECL_ATTRIBUTES (olddecl)))\n \t\t       && (!DECL_DECLARED_INLINE_P (newdecl)\n \t\t\t   || !lookup_attribute (\"gnu_inline\",\n \t\t\t\t\t\t DECL_ATTRIBUTES (newdecl))))\n-#endif /* WANT_C99_INLINE_SEMANTICS */\n \t\t  )\n \t\t  && same_translation_unit_p (newdecl, olddecl))\n \t\t{\n@@ -1553,7 +1545,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t we still shouldn't warn.)  */\n       if (DECL_DECLARED_INLINE_P (newdecl) && !DECL_DECLARED_INLINE_P (olddecl)\n \t  && same_translation_unit_p (olddecl, newdecl)\n-\t  && ! flag_isoc99)\n+\t  && flag_gnu89_inline)\n \t{\n \t  if (TREE_USED (olddecl))\n \t    {\n@@ -1783,12 +1775,11 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t}\n     }\n \n-#if WANT_C99_INLINE_SEMANTICS\n   /* In c99, 'extern' declaration before (or after) 'inline' means this\n      function is not DECL_EXTERNAL, unless 'gnu_inline' attribute\n      is present.  */\n   if (TREE_CODE (newdecl) == FUNCTION_DECL\n-      && flag_isoc99\n+      && !flag_gnu89_inline\n       && (DECL_DECLARED_INLINE_P (newdecl)\n \t  || DECL_DECLARED_INLINE_P (olddecl))\n       && (!DECL_DECLARED_INLINE_P (newdecl)\n@@ -1797,7 +1788,6 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n       && DECL_EXTERNAL (newdecl)\n       && !lookup_attribute (\"gnu_inline\", DECL_ATTRIBUTES (newdecl)))\n     DECL_EXTERNAL (newdecl) = 0;\n-#endif /* WANT_C99_INLINE_SEMANTICS */\n \n   if (DECL_EXTERNAL (newdecl))\n     {\n@@ -3309,10 +3299,9 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n   /* Set attributes here so if duplicate decl, will have proper attributes.  */\n   decl_attributes (&decl, attributes, 0);\n \n-#if WANT_C99_INLINE_SEMANTICS\n   /* Handle gnu_inline attribute.  */\n   if (declspecs->inline_p\n-      && flag_isoc99\n+      && !flag_gnu89_inline\n       && TREE_CODE (decl) == FUNCTION_DECL\n       && lookup_attribute (\"gnu_inline\", DECL_ATTRIBUTES (decl)))\n     {\n@@ -3321,7 +3310,6 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n       else if (declspecs->storage_class != csc_static)\n \tDECL_EXTERNAL (decl) = !DECL_EXTERNAL (decl);\n     }\n-#endif /* WANT_C99_INLINE_SEMANTICS */\n \n   if (TREE_CODE (decl) == FUNCTION_DECL\n       && targetm.calls.promote_prototypes (TREE_TYPE (decl)))\n@@ -4819,11 +4807,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \t   in this file, C99 6.7.4p6.  In GNU C89, a function declared\n \t   'extern inline' is an external reference.  */\n \telse if (declspecs->inline_p && storage_class != csc_static)\n-#if WANT_C99_INLINE_SEMANTICS\n-\t  DECL_EXTERNAL (decl) = (storage_class == csc_extern) == !flag_isoc99;\n-#else\n-\t  DECL_EXTERNAL (decl) = (storage_class == csc_extern);\n-#endif\n+\t  DECL_EXTERNAL (decl) = ((storage_class == csc_extern)\n+\t\t\t\t  == flag_gnu89_inline);\n \telse\n \t  DECL_EXTERNAL (decl) = !initialized;\n \n@@ -6085,17 +6070,15 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n     warning (OPT_Wattributes, \"inline function %q+D given attribute noinline\",\n \t     decl1);\n \n-#if WANT_C99_INLINE_SEMANTICS\n   /* Handle gnu_inline attribute.  */\n   if (declspecs->inline_p\n-      && flag_isoc99\n+      && !flag_gnu89_inline\n       && TREE_CODE (decl1) == FUNCTION_DECL\n       && lookup_attribute (\"gnu_inline\", DECL_ATTRIBUTES (decl1)))\n     {\n       if (declspecs->storage_class != csc_static)\n \tDECL_EXTERNAL (decl1) = !DECL_EXTERNAL (decl1);\n     }\n-#endif /* WANT_C99_INLINE_SEMANTICS */\n \n   announce_function (decl1);\n "}, {"sha": "11dcf0a0bdec0ee2aeb208cf4a2a729474fb60b6", "filename": "gcc/c-opts.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=da1c7394b35e976cada33db496beeb50ccca4cb4", "patch": "@@ -1023,6 +1023,13 @@ c_common_post_options (const char **pfilename)\n   if (flag_inline_functions)\n     flag_inline_trees = 2;\n \n+  /* By default we use C99 inline semantics in GNU99 or C99 mode.  C99\n+     inline semantics are not supported in GNU89 or C89 mode.  */\n+  if (flag_gnu89_inline == -1)\n+    flag_gnu89_inline = !flag_isoc99;\n+  else if (!flag_gnu89_inline && !flag_isoc99)\n+    error (\"-fno-gnu89-inline is only supported in GNU99 or C99 mode\");\n+\n   /* If we are given more than one input file, we must use\n      unit-at-a-time mode.  */\n   if (num_in_fnames > 1)"}, {"sha": "3fb36867aae4fdf0876ff03731f4ef58e3c0ef8b", "filename": "gcc/c.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=da1c7394b35e976cada33db496beeb50ccca4cb4", "patch": "@@ -1,5 +1,5 @@\n ; Options for the C, ObjC, C++ and ObjC++ front ends.\n-; Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n+; Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -554,6 +554,10 @@ fgnu-runtime\n ObjC ObjC++\n Generate code for GNU runtime environment\n \n+fgnu89-inline\n+C Var(flag_gnu89_inline) Init(-1)\n+Use traditional GNU semantics for inline functions\n+\n fguiding-decls\n C++ ObjC++\n "}, {"sha": "f0e2bb9d78f867f73430d3ced49f11d76383155e", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=da1c7394b35e976cada33db496beeb50ccca4cb4", "patch": "@@ -2014,6 +2014,28 @@ functions.  You should not use these macros in any way unless you make\n sure that programs will execute with the same effect whether or not they\n are defined.  If they are defined, their value is 1.\n \n+@item __GNUC_GNU_INLINE__\n+GCC defines this macro if functions declared @code{inline} will be\n+handled in GCC's traditional gnu89 mode.  In this mode an @code{extern\n+inline} function will never be compiled as a standalone function, and\n+an @code{inline} function which is neither @code{extern} nor\n+@code{static} will always be compiled as a standalone function.\n+\n+@item __GNUC_STDC_INLINE__\n+GCC defines this macro if functions declared @code{inline} will be\n+handled according to the ISO C99 standard.  In this mode an\n+@code{extern inline} function will always be compiled as a standalone\n+externally visible function, and an @code{inline} function which is\n+neither @code{extern} nor @code{static} will never be compiled as a\n+standalone function.\n+\n+If this macro is defined, GCC supports the @code{gnu_inline} function\n+attribute as a way to always get the gnu89 behaviour.  Support for\n+this and @code{__GNUC_GNU_INLINE__} was added in GCC 4.1.3.  If\n+neither macro is defined, an older version of GCC is being used:\n+@code{inline} functions will be compiled in gnu89 mode, and the\n+@code{gnu_inline} function attribute will not be recognized.\n+\n @item __CHAR_UNSIGNED__\n GCC defines this macro if and only if the data type @code{char} is\n unsigned on the target machine.  It exists to cause the standard header"}, {"sha": "dfa4f5d4aa3a2cb3314e0d3d2822d08cb503be5a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=da1c7394b35e976cada33db496beeb50ccca4cb4", "patch": "@@ -1618,8 +1618,37 @@ if no optimization level was specified.\n \n @item gnu_inline\n @cindex @code{gnu_inline} function attribute\n-This attribute on an inline declaration results in the old GNU C89\n-inline behavior even in the ISO C99 mode.\n+This attribute should be used with a function which is also declared\n+with the @code{inline} keyword.  It directs GCC to treat the function\n+as if it were defined in gnu89 mode even when compiling in C99 or\n+gnu99 mode.\n+\n+If the function is declared @code{extern}, then this definition of the\n+function is used only for inlining.  In no case is the function\n+compiled as a standalone function, not even if you take its address\n+explicitly.  Such an address becomes an external reference, as if you\n+had only declared the function, and had not defined it.  This has\n+almost the effect of a macro.  The way to use this is to put a\n+function definition in a header file with this attribute, and put\n+another copy of the function, without @code{extern}, in a library\n+file.  The definition in the header file will cause most calls to the\n+function to be inlined.  If any uses of the function remain, they will\n+refer to the single copy in the library.  Note that the two\n+definitions of the functions need not be precisely the same, although\n+if they do not have the same effect your program may behave oddly.\n+\n+If the function is neither @code{extern} nor @code{static}, then the\n+function is compiled as a standalone function, as well as being\n+inlined where possible.\n+\n+This is how GCC traditionally handled functions declared\n+@code{inline}.  Since ISO C99 specifies a different semantics for\n+@code{inline}, this function attribute is provided as a transition\n+measure and as a useful feature in its own right.  This attribute is\n+available in GCC 4.1.3 and later.  It is available if either of the\n+preprocessor macros @code{__GNUC_GNU_INLINE__} or\n+@code{__GNUC_STDC_INLINE__} are defined.  @xref{Inline,,An Inline\n+Function is As Fast As a Macro}.\n \n @cindex @code{flatten} function attribute\n @item flatten\n@@ -3846,10 +3875,11 @@ also direct GCC to try to integrate all ``simple enough'' functions\n into their callers with the option @option{-finline-functions}.\n \n GCC implements three different semantics of declaring a function\n-inline.  One is available with @option{-std=gnu89} or when @code{gnu_inline}\n-attribute is present on all inline declarations, another when\n-@option{-std=c99} or @option{-std=gnu99}, and the third is used when\n-compiling C++.\n+inline.  One is available with @option{-std=gnu89} or\n+@option{-fgnu89-inline} or when @code{gnu_inline} attribute is present\n+on all inline declarations, another when @option{-std=c99} or\n+@option{-std=gnu99} (without @option{-fgnu89-inline}), and the third\n+is used when compiling C++.\n \n To declare a function inline, use the @code{inline} keyword in its\n declaration, like this:"}, {"sha": "85416349542e3bb4c3c05f4630d63a53fd57a0b8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=da1c7394b35e976cada33db496beeb50ccca4cb4", "patch": "@@ -166,7 +166,8 @@ in the following sections.\n \n @item C Language Options\n @xref{C Dialect Options,,Options Controlling C Dialect}.\n-@gccoptlist{-ansi  -std=@var{standard}  -aux-info @var{filename} @gol\n+@gccoptlist{-ansi  -std=@var{standard}  -fgnu89-inline @gol\n+-aux-info @var{filename} @gol\n -fno-asm  -fno-builtin  -fno-builtin-@var{function} @gol\n -fhosted  -ffreestanding -fopenmp -fms-extensions @gol\n -trigraphs  -no-integrated-cpp  -traditional  -traditional-cpp @gol\n@@ -1351,6 +1352,27 @@ the @code{inline} keyword in ISO C99) are not disabled.\n @xref{Standards,,Language Standards Supported by GCC}, for details of\n these standard versions.\n \n+@item -fgnu89-inline\n+@opindex fgnu89-inline\n+The option @option{-fgnu89-inline} tells GCC to use the traditional\n+GNU semantics for @code{inline} functions when in C99 mode.\n+@xref{Inline,,An Inline Function is As Fast As a Macro}.  This option\n+is accepted and ignored by GCC versions 4.1.3 up to but not including\n+4.3.  In GCC versions 4.3 and later it changes the behavior of GCC in\n+C99 mode.  Using this option is roughly equivalent to adding the\n+@code{gnu_inline} function attribute to all inline functions\n+(@pxref{Function Attributes}).\n+\n+The option @option{-fno-gnu89-inline} explicitly tells GCC to use the\n+C99 semantics for @code{inline} when in C99 or gnu99 mode (i.e., it\n+specifies the default behavior).  This option was first supported in\n+GCC 4.3.  This option is not supported in C89 or gnu89 mode.\n+\n+The preprocesor macros @code{__GNUC_GNU_INLINE__} and\n+@code{__GNUC_STDC_INLINE__} may be used to check which semantics are\n+in effect for @code{inline} functions.  @xref{Common Predefined\n+Macros,,,cpp.info,The C Preprocessor}.\n+\n @item -aux-info @var{filename}\n @opindex aux-info\n Output to the given filename prototyped declarations for all functions"}, {"sha": "d265ea062e22df9c021f16ed554555570a62d628", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da1c7394b35e976cada33db496beeb50ccca4cb4", "patch": "@@ -1,3 +1,10 @@\n+2007-03-05  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gcc.dg/inline-18.c: New test.\n+\t* gcc.dg/inline-19.c: New test.\n+\t* gcc.dg/inline-20.c: New test.\n+\t* gcc.dg/inline-21.c: New test.\n+\n 2007-03-05  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/14052"}, {"sha": "5a37195be94ab7ee3c12f095360dcd041675dc6f", "filename": "gcc/testsuite/gcc.dg/inline-18.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Ftestsuite%2Fgcc.dg%2Finline-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Ftestsuite%2Fgcc.dg%2Finline-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-18.c?ref=da1c7394b35e976cada33db496beeb50ccca4cb4", "patch": "@@ -0,0 +1,28 @@\n+/* Test -fgnu89-extern-inline.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -fgnu89-inline\" } */\n+/* { dg-final { scan-assembler \"func1\" } } */\n+/* { dg-final { scan-assembler-not \"func2\" } } */\n+/* { dg-final { scan-assembler \"func3\" } } */\n+/* { dg-final { scan-assembler \"func4\" } } */\n+\n+#ifndef __GNUC_GNU_INLINE__\n+#error __GNUC_GNU_INLINE__ is not defined\n+#endif\n+\n+#ifdef __GNUC_STDC_INLINE__\n+#error __GNUC_STDC_INLINE__ is defined\n+#endif\n+\n+extern inline int func1 (void) { return 0; }\n+inline int func1 (void) { return 1; }\n+\n+extern int func2 (void);\n+extern inline int func2 (void) { return 2; }\n+\n+inline int func3 (void);\n+inline int func3 (void) { return 3; }\n+\n+extern int func4 (void);\n+extern inline int func4 (void) { return 4; }\n+int func4 (void) { return 5; }"}, {"sha": "96dceb433561d6c0af7a3c16b2bbc7488cb2e79d", "filename": "gcc/testsuite/gcc.dg/inline-19.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Ftestsuite%2Fgcc.dg%2Finline-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Ftestsuite%2Fgcc.dg%2Finline-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-19.c?ref=da1c7394b35e976cada33db496beeb50ccca4cb4", "patch": "@@ -0,0 +1,28 @@\n+/* Test -fgnu89-extern-inline.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-fgnu89-inline\" } */\n+/* { dg-final { scan-assembler \"func1\" } } */\n+/* { dg-final { scan-assembler-not \"func2\" } } */\n+/* { dg-final { scan-assembler \"func3\" } } */\n+/* { dg-final { scan-assembler \"func4\" } } */\n+\n+#ifndef __GNUC_GNU_INLINE__\n+#error __GNUC_GNU_INLINE__ is not defined\n+#endif\n+\n+#ifdef __GNUC_STDC_INLINE__\n+#error __GNUC_STDC_INLINE__ is defined\n+#endif\n+\n+extern inline int func1 (void) { return 0; }\n+inline int func1 (void) { return 1; }\n+\n+extern int func2 (void);\n+extern inline int func2 (void) { return 2; }\n+\n+inline int func3 (void);\n+inline int func3 (void) { return 3; }\n+\n+extern int func4 (void);\n+extern inline int func4 (void) { return 4; }\n+int func4 (void) { return 5; }"}, {"sha": "31354abca90d1499fb27cb8f31ddd67edc857af9", "filename": "gcc/testsuite/gcc.dg/inline-20.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Ftestsuite%2Fgcc.dg%2Finline-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Ftestsuite%2Fgcc.dg%2Finline-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-20.c?ref=da1c7394b35e976cada33db496beeb50ccca4cb4", "patch": "@@ -0,0 +1,64 @@\n+/* Test -fno-gnu89-extern-inline.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -fno-gnu89-inline\" } */\n+/* { dg-final { scan-assembler-not \"dontgenerate\" } } */\n+/* { dg-final { scan-assembler \"func1\" } } */\n+/* { dg-final { scan-assembler \"func2\" } } */\n+/* { dg-final { scan-assembler \"func3\" } } */\n+/* { dg-final { scan-assembler \"func4\" } } */\n+/* { dg-final { scan-assembler \"func5\" } } */\n+/* { dg-final { scan-assembler \"func6\" } } */\n+/* { dg-final { scan-assembler \"func7\" } } */\n+/* { dg-final { scan-assembler \"func8\" } } */\n+/* { dg-final { scan-assembler \"func9\" } } */\n+\n+#ifdef __GNUC_GNU_INLINE__\n+#error __GNUC_GNU_INLINE__ is defined\n+#endif\n+\n+#ifndef __GNUC_STDC_INLINE__\n+#error __GNUC_STDC_INLINE__ is not defined\n+#endif\n+\n+inline int dontgenerate1 (void)\n+{\n+  return 1;\n+}\n+\n+inline int dontgenerate2 (void);\n+inline int dontgenerate2 (void)\n+{\n+  return 2;\n+}\n+\n+inline int dontgenerate3 (void)\n+{\n+  return 3;\n+}\n+inline int dontgenerate3 (void);\n+\n+extern inline int func1 (void) { return 1; }\n+\n+extern inline int func2 (void);\n+inline int func2 (void) { return 2; }\n+\n+inline int func3 (void) { return 3; }\n+extern inline int func3 (void);\n+\n+inline int func4 (void);\n+extern inline int func4 (void) { return 4; }\n+\n+extern inline int func5 (void) { return 5; }\n+inline int func5 (void);\n+\n+extern int func6 (void);\n+inline int func6 (void) { return 6; }\n+\n+inline int func7 (void) { return 7; }\n+extern int func7 (void);\n+\n+inline int func8 (void);\n+extern int func8 (void) { return 8; }\n+\n+extern int func9 (void) { return 9; }\n+inline int func9 (void);"}, {"sha": "c7f9a07b6ce5ff7ffe58a65b4a4d03f95a326421", "filename": "gcc/testsuite/gcc.dg/inline-21.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Ftestsuite%2Fgcc.dg%2Finline-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da1c7394b35e976cada33db496beeb50ccca4cb4/gcc%2Ftestsuite%2Fgcc.dg%2Finline-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-21.c?ref=da1c7394b35e976cada33db496beeb50ccca4cb4", "patch": "@@ -0,0 +1,4 @@\n+/* Test -fno-gnu89-extern-inline.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89 -fno-gnu89-inline\" } */\n+/* { dg-error \"only supported in GNU99 or C99 mode\" \"\" { target *-*-* } 0 } */"}]}