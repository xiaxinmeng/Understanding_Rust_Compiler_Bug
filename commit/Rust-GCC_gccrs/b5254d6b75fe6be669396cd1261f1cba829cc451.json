{"sha": "b5254d6b75fe6be669396cd1261f1cba829cc451", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUyNTRkNmI3NWZlNmJlNjY5Mzk2Y2QxMjYxZjFjYmE4MjljYzQ1MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-05T08:15:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-06T08:08:16Z"}, "message": "ipa/100373 - fix emutls lowering compare-debug issue\n\nemutls figured that tls uses in debug-insns need lowering but\nthat obviously has effects on code-generation as can be seen\nin the following IL diff with the new testcase:\n\n   <bb 2> [local count: 1073741824]:\n-  a = 0;\n+  # DEBUG BEGIN_STMT\n   _4 = __builtin___emutls_get_address (&__emutls_v.b);\n+  # DEBUG D#1 => *_4\n+  # DEBUG d => (long int) D#1\n+  # DEBUG BEGIN_STMT\n+  a = 0;\n+  # DEBUG BEGIN_STMT\n   *_4 = 0;\n   return;\n\nwhere it figured the debug use of b in the original\n\n  <bb 2> [local count: 1073741824]:\n  # DEBUG BEGIN_STMT\n  # DEBUG D#1 => b\n  # DEBUG d => (long int) D#1\n  # DEBUG BEGIN_STMT\n  a = 0;\n\nneeds lowering (it maybe does when we want to produce perfect\ndebug but that's just bad luck).\n\nThe following patch fixes this by avoiding to create a new\nemutls address when visiting debug stmts and instead resets them.\nAnother option might be to simply not lower debug stmt uses\nbut I have no way to verify actual debug info for this.\n\n2021-05-05  Richard Biener  <rguenther@suse.de>\n\n\tPR ipa/100373\n\t* tree-emutls.c (gen_emutls_addr): Pass in whether we're\n\tdealing with a debug use and only query existing addresses\n\tif so.\n\t(lower_emutls_1): Avoid splitting out addresses for debug\n\tstmts, reset the debug stmt when we fail to find existing\n\tlowered addresses.\n\t(lower_emutls_phi_arg): Set wi.stmt.\n\n\t* gcc.dg/pr100373.c: New testcase.", "tree": {"sha": "06c551fc0f78bc3c3a7c573ffdb5ae7dd8261f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06c551fc0f78bc3c3a7c573ffdb5ae7dd8261f28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5254d6b75fe6be669396cd1261f1cba829cc451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5254d6b75fe6be669396cd1261f1cba829cc451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5254d6b75fe6be669396cd1261f1cba829cc451", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5254d6b75fe6be669396cd1261f1cba829cc451/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fd7689cb29c725f732acbd8a0a71eef35518859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fd7689cb29c725f732acbd8a0a71eef35518859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fd7689cb29c725f732acbd8a0a71eef35518859"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "d4cd52a95deb03a61f511abb70f52aad16edf172", "filename": "gcc/testsuite/gcc.dg/pr100373.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5254d6b75fe6be669396cd1261f1cba829cc451/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100373.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5254d6b75fe6be669396cd1261f1cba829cc451/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100373.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr100373.c?ref=b5254d6b75fe6be669396cd1261f1cba829cc451", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcompare-debug\" } */\n+\n+int a;\n+_Thread_local int b;\n+void c()\n+{\n+  long d = b;\n+  a = 0;\n+  b = 0;\n+}"}, {"sha": "92cb6194f21a91039494451bc2d0cabdfbd00e45", "filename": "gcc/tree-emutls.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5254d6b75fe6be669396cd1261f1cba829cc451/gcc%2Ftree-emutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5254d6b75fe6be669396cd1261f1cba829cc451/gcc%2Ftree-emutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-emutls.c?ref=b5254d6b75fe6be669396cd1261f1cba829cc451", "patch": "@@ -394,13 +394,13 @@ struct lower_emutls_data\n    Append any new computation statements required to D->SEQ.  */\n \n static tree\n-gen_emutls_addr (tree decl, struct lower_emutls_data *d)\n+gen_emutls_addr (tree decl, struct lower_emutls_data *d, bool for_debug)\n {\n   /* Compute the address of the TLS variable with help from runtime.  */\n   tls_var_data *data = tls_map->get (varpool_node::get (decl));\n   tree addr = data->access;\n \n-  if (addr == NULL)\n+  if (addr == NULL && !for_debug)\n     {\n       varpool_node *cvar;\n       tree cdecl;\n@@ -480,7 +480,7 @@ lower_emutls_1 (tree *ptr, int *walk_subtrees, void *cb_data)\n \t    *ptr = t = unshare_expr (t);\n \n \t  /* If we're allowed more than just is_gimple_val, continue.  */\n-\t  if (!wi->val_only)\n+\t  if (!wi->val_only || is_gimple_debug (wi->stmt))\n \t    {\n \t      *walk_subtrees = 1;\n \t      return NULL_TREE;\n@@ -536,7 +536,15 @@ lower_emutls_1 (tree *ptr, int *walk_subtrees, void *cb_data)\n       return NULL_TREE;\n     }\n \n-  addr = gen_emutls_addr (t, d);\n+  addr = gen_emutls_addr (t, d, is_gimple_debug (wi->stmt));\n+  if (!addr)\n+    {\n+      gimple_debug_bind_reset_value (wi->stmt);\n+      update_stmt (wi->stmt);\n+      wi->changed = false;\n+      /* Stop walking operands.  */\n+      return error_mark_node;\n+    }\n   if (is_addr)\n     {\n       /* Replace \"&var\" with \"addr\" in the statement.  */\n@@ -590,6 +598,7 @@ lower_emutls_phi_arg (gphi *phi, unsigned int i,\n   memset (&wi, 0, sizeof (wi));\n   wi.info = d;\n   wi.val_only = true;\n+  wi.stmt = phi;\n   walk_tree (&pd->def, lower_emutls_1, &wi, NULL);\n \n   /* For normal statements, we let update_stmt do its job.  But for phi"}]}