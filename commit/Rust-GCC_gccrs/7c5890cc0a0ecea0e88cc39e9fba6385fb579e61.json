{"sha": "7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M1ODkwY2MwYTBlY2VhMGU4OGNjMzllOWZiYTYzODVmYjU3OWU2MQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2019-11-14T20:18:33Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-11-14T20:18:33Z"}, "message": "Support UTF-8 character constants for C2x.\n\nC2x adds u8'' character constants to C.  This patch adds the\ncorresponding GCC support.\n\nMost of the support was already present for C++ and just needed\nenabling for C2x.  However, in C2x these constants have type unsigned\nchar, which required corresponding adjustments in the compiler and the\npreprocessor to give them that type for C.\n\nFor C, it seems clear to me that having type unsigned char means the\nconstants are unsigned in the preprocessor (and thus treated as having\ntype uintmax_t in #if conditionals), so this patch implements that.  I\nincluded a conditional in the libcpp change to avoid affecting\nsignedness for C++, but I'm not sure if in fact these constants should\nalso be unsigned in the preprocessor for C++ in which case that\n!CPP_OPTION (pfile, cplusplus) conditional would not be needed.\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc/c:\n\t* c-parser.c (c_parser_postfix_expression)\n\t(c_parser_check_literal_zero): Handle CPP_UTF8CHAR.\n\t* gimple-parser.c (c_parser_gimple_postfix_expression): Likewise.\n\ngcc/c-family:\n\t* c-lex.c (lex_charconst): Make CPP_UTF8CHAR constants unsigned\n\tchar for C.\n\ngcc/testsuite:\n\t* gcc.dg/c11-utf8char-1.c, gcc.dg/c2x-utf8char-1.c,\n\tgcc.dg/c2x-utf8char-2.c, gcc.dg/c2x-utf8char-3.c,\n\tgcc.dg/gnu2x-utf8char-1.c: New tests.\n\nlibcpp:\n\t* charset.c (narrow_str_to_charconst): Make CPP_UTF8CHAR constants\n\tunsigned for C.\n\t* init.c (lang_defaults): Set utf8_char_literals for GNUC2X and\n\tSTDC2X.\n\nFrom-SVN: r278265", "tree": {"sha": "f751de7e59697865e2ffa028877728284227c355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f751de7e59697865e2ffa028877728284227c355"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3771033244b3ee1b53a8a00d734580b16384fdd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3771033244b3ee1b53a8a00d734580b16384fdd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3771033244b3ee1b53a8a00d734580b16384fdd3"}], "stats": {"total": 94, "additions": 91, "deletions": 3}, "files": [{"sha": "f4fdccc448afa28a5d4e0c5d685fd949c2824cdd", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "patch": "@@ -1,3 +1,8 @@\n+2019-11-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-lex.c (lex_charconst): Make CPP_UTF8CHAR constants unsigned\n+\tchar for C.\n+\n 2019-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-omp.c (c_omp_check_context_selector): Add nvidia to the list of"}, {"sha": "d446633f8145cfa1e112a4f68e472fdd405466d5", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "patch": "@@ -1376,7 +1376,9 @@ lex_charconst (const cpp_token *token)\n     type = char16_type_node;\n   else if (token->type == CPP_UTF8CHAR)\n     {\n-      if (flag_char8_t)\n+      if (!c_dialect_cxx ())\n+\ttype = unsigned_char_type_node;\n+      else if (flag_char8_t)\n         type = char8_type_node;\n       else\n         type = char_type_node;"}, {"sha": "b881cab75ded4a2055ef3452034d567fda293a3e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "patch": "@@ -1,3 +1,9 @@\n+2019-11-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_postfix_expression)\n+\t(c_parser_check_literal_zero): Handle CPP_UTF8CHAR.\n+\t* gimple-parser.c (c_parser_gimple_postfix_expression): Likewise.\n+\n 2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* c-typeck.c (build_conditional_expr): Use truth_type_for instead"}, {"sha": "8ce4e70a0fc0d224c6c0a5978d5fd359713381b4", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "patch": "@@ -8783,6 +8783,7 @@ c_parser_postfix_expression (c_parser *parser)\n     case CPP_CHAR:\n     case CPP_CHAR16:\n     case CPP_CHAR32:\n+    case CPP_UTF8CHAR:\n     case CPP_WCHAR:\n       expr.value = c_parser_peek_token (parser)->value;\n       /* For the purpose of warning when a pointer is compared with\n@@ -10459,6 +10460,7 @@ c_parser_check_literal_zero (c_parser *parser, unsigned *literal_zero_mask,\n     case CPP_WCHAR:\n     case CPP_CHAR16:\n     case CPP_CHAR32:\n+    case CPP_UTF8CHAR:\n       /* If a parameter is literal zero alone, remember it\n \t for -Wmemset-transposed-args warning.  */\n       if (integer_zerop (tok->value)"}, {"sha": "c16d0dfb88eaee99e2a97a4fb9129f05edb9c927", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "patch": "@@ -1395,6 +1395,7 @@ c_parser_gimple_postfix_expression (gimple_parser &parser)\n     case CPP_CHAR:\n     case CPP_CHAR16:\n     case CPP_CHAR32:\n+    case CPP_UTF8CHAR:\n     case CPP_WCHAR:\n       expr.value = c_parser_peek_token (parser)->value;\n       set_c_expr_source_range (&expr, tok_range);"}, {"sha": "51624b7212e42b5e963ac14c6834e761695d5c9e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "patch": "@@ -1,3 +1,9 @@\n+2019-11-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-utf8char-1.c, gcc.dg/c2x-utf8char-1.c,\n+\tgcc.dg/c2x-utf8char-2.c, gcc.dg/c2x-utf8char-3.c,\n+\tgcc.dg/gnu2x-utf8char-1.c: New tests.\n+\n 2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR testsuite/92366"}, {"sha": "26dbd92b3adea0efd6fd5f14774fb6b7a3404685", "filename": "gcc/testsuite/gcc.dg/c11-utf8char-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-utf8char-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-utf8char-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-utf8char-1.c?ref=7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "patch": "@@ -0,0 +1,7 @@\n+/* Test C2x UTF-8 characters.  Test not accepted for C11.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+#define z(x) 0\n+#define u8 z(\n+unsigned char a = u8'a');"}, {"sha": "76543afca82b0636d919e615c92755df13184859", "filename": "gcc/testsuite/gcc.dg/c2x-utf8char-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-utf8char-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-utf8char-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-utf8char-1.c?ref=7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "patch": "@@ -0,0 +1,29 @@\n+/* Test C2x UTF-8 characters.  Test valid usages.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+unsigned char a = u8'a';\n+_Static_assert (u8'a' == 97);\n+\n+unsigned char b = u8'\\0';\n+_Static_assert (u8'\\0' == 0);\n+\n+unsigned char c = u8'\\xff';\n+_Static_assert (u8'\\xff' == 255);\n+\n+unsigned char d = u8'\\377';\n+_Static_assert (u8'\\377' == 255);\n+\n+_Static_assert (sizeof (u8'a') == 1);\n+_Static_assert (sizeof (u8'\\0') == 1);\n+_Static_assert (sizeof (u8'\\xff') == 1);\n+_Static_assert (sizeof (u8'\\377') == 1);\n+\n+_Static_assert (_Generic (u8'a', unsigned char: 1, default: 2) == 1);\n+_Static_assert (_Generic (u8'\\0', unsigned char: 1, default: 2) == 1);\n+_Static_assert (_Generic (u8'\\xff', unsigned char: 1, default: 2) == 1);\n+_Static_assert (_Generic (u8'\\377', unsigned char: 1, default: 2) == 1);\n+\n+#if u8'\\0' - 1 < 0\n+#error \"UTF-8 constants not unsigned in preprocessor\"\n+#endif"}, {"sha": "4e6a2f6955f8b9fcf8d5a4a4861da482920e4c27", "filename": "gcc/testsuite/gcc.dg/c2x-utf8char-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-utf8char-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-utf8char-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-utf8char-2.c?ref=7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "patch": "@@ -0,0 +1,8 @@\n+/* Test C2x UTF-8 characters.  Character values not affected by\n+   different execution character set.  */\n+/* { dg-do compile } */\n+/* { dg-require-iconv \"IBM1047\" } */\n+/* { dg-options \"-std=c2x -pedantic-errors -fexec-charset=IBM1047\" } */\n+\n+_Static_assert (u8'a' == 97);\n+_Static_assert (u8'a' != (unsigned char) 'a');"}, {"sha": "7c489831998924d35534befa87bc4cb356eedbb9", "filename": "gcc/testsuite/gcc.dg/c2x-utf8char-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-utf8char-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-utf8char-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-utf8char-3.c?ref=7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "patch": "@@ -0,0 +1,8 @@\n+/* Test C2x UTF-8 characters.  Test errors for invalid code.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+unsigned char a = u8''; /* { dg-error \"empty character constant\" } */\n+unsigned char b = u8'ab'; /* { dg-error \"character constant too long for its type\" } */\n+unsigned char c = u8'\\u00ff'; /* { dg-error \"character constant too long for its type\" } */\n+unsigned char d = u8'\\x100'; /* { dg-error \"hex escape sequence out of range\" } */"}, {"sha": "9c3add2ae83ec6e53c165b9a267ee51e810c7068", "filename": "gcc/testsuite/gcc.dg/gnu2x-utf8char-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-utf8char-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-utf8char-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-utf8char-1.c?ref=7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "patch": "@@ -0,0 +1,5 @@\n+/* Test C2x UTF-8 characters.  Test accepted with -std=gnu2x.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu2x\" } */\n+\n+#include \"c2x-utf8char-1.c\""}, {"sha": "448f954d2ee15204c635f3dea4480cb7fbb37e0e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "patch": "@@ -1,3 +1,10 @@\n+2019-11-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* charset.c (narrow_str_to_charconst): Make CPP_UTF8CHAR constants\n+\tunsigned for C.\n+\t* init.c (lang_defaults): Set utf8_char_literals for GNUC2X and\n+\tSTDC2X.\n+\n 2019-11-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/91370 - Implement P1041R4 and P1139R2 - Stronger Unicode reqs"}, {"sha": "d4574415ac168d85fb0b1411015500b0e9fb1ecc", "filename": "libcpp/charset.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "patch": "@@ -1928,6 +1928,8 @@ narrow_str_to_charconst (cpp_reader *pfile, cpp_string str,\n   /* Multichar constants are of type int and therefore signed.  */\n   if (i > 1)\n     unsigned_p = 0;\n+  else if (type == CPP_UTF8CHAR && !CPP_OPTION (pfile, cplusplus))\n+    unsigned_p = 1;\n   else\n     unsigned_p = CPP_OPTION (pfile, unsigned_char);\n "}, {"sha": "f5f41b012f89440d5d695c76e9568d3faae82b33", "filename": "libcpp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5890cc0a0ecea0e88cc39e9fba6385fb579e61/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=7c5890cc0a0ecea0e88cc39e9fba6385fb579e61", "patch": "@@ -102,13 +102,13 @@ static const struct lang_flags lang_defaults[] =\n   /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0 },\n   /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0 },\n   /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0 },\n-  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     1 },\n+  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   1,      1,   1,     1 },\n   /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n   /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n   /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n   /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n   /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n-  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   1,     1 },\n+  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   1,      0,   1,     1 },\n   /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0 },\n   /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1,     0 },\n   /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1,     0 },"}]}