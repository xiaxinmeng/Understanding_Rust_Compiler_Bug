{"sha": "6e14af161c7d61b280c187b1a91a0fd853249bd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUxNGFmMTYxYzdkNjFiMjgwYzE4N2IxYTkxYTBmZDg1MzI0OWJkMQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-11-23T19:55:24Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-11-23T19:55:24Z"}, "message": "function.h (struct function): Remove calls_longjmp.\n\n\t* function.h (struct function): Remove calls_longjmp.\n\t(current_function_calls_longjmp): Delete.\n\t* tree.h (ECF_LONGJMP): Delete.\n\t(ECF_SIBCALL, ECF_PURE, ECF_SP_DEPRESSED, ECF_ALWAYS_RETURN)\n\t(ECF_LIBCALL_BLOCK): Everybody slide down one.\n\t(ECF_CONST, ECF_NORETURN, ECF_SIBCALL): Clarify comments.\n\t* builtins.c (expand_builtin_longjmp): Don't set\n\tcurrent_function_calls_longjmp.\n\t* calls.c (special_function_p): Mark longjmp and siglongjmp\n\twith ECF_NORETURN, not ECF_LONGJMP.\n\t(emit_call_1, expand_call, emit_library_call_value_1):\n\tDon't check for ECF_LONGJMP.\n\t* tree-cfg.c (make_exit_edges, is_ctrl_altering_stmt)\n\t(need_fake_edge_p): Likewise.\n\n\t* config/avr/avr.h, config/ip2k/ip2k.h: Don't define NON_SAVING_SETJMP.\n\t* system.h: Poison NON_SAVING_SETJMP.\n\t* function.c (use_register_for_decl)\n\t* gcse.c (compute_hash_table_work, compute_store_table)\n\t* postreload-gcse.c (record_opr_changes)\n\t* reload.c (find_equiv_reg)\n\t* reload1.c (reload)\n\t* config/i386/i386.c (ix86_can_use_return_insn_p):\n\tRemove code conditional on NON_SAVING_SETJMP.\n\t* doc/tm.texi: Delete documentation of NON_SAVING_SETJMP.\n\n\t* config/i386/sysv3.h: Delete file.\n\t* config/i386/i386.c (ix86_svr3_asm_out_constructor): Delete.\n\nFrom-SVN: r91101", "tree": {"sha": "67f41f708633dc69a022149ee3dee19b259e910b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67f41f708633dc69a022149ee3dee19b259e910b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e14af161c7d61b280c187b1a91a0fd853249bd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e14af161c7d61b280c187b1a91a0fd853249bd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e14af161c7d61b280c187b1a91a0fd853249bd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e14af161c7d61b280c187b1a91a0fd853249bd1/comments", "author": null, "committer": null, "parents": [{"sha": "e9c00ceb85406d1f78d1752f27742ac7bb05b47b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c00ceb85406d1f78d1752f27742ac7bb05b47b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9c00ceb85406d1f78d1752f27742ac7bb05b47b"}], "stats": {"total": 346, "additions": 81, "deletions": 265}, "files": [{"sha": "dbc9d4cc9e99cceb780c42f8fc6987257a2300a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 53, "deletions": 22, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e14af161c7d61b280c187b1a91a0fd853249bd1", "patch": "@@ -1,3 +1,34 @@\n+2004-11-23  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* function.h (struct function): Remove calls_longjmp.\n+\t(current_function_calls_longjmp): Delete.\n+\t* tree.h (ECF_LONGJMP): Delete.\n+\t(ECF_SIBCALL, ECF_PURE, ECF_SP_DEPRESSED, ECF_ALWAYS_RETURN)\n+\t(ECF_LIBCALL_BLOCK): Everybody slide down one.\n+\t(ECF_CONST, ECF_NORETURN, ECF_SIBCALL): Clarify comments.\n+\t* builtins.c (expand_builtin_longjmp): Don't set\n+\tcurrent_function_calls_longjmp.\n+\t* calls.c (special_function_p): Mark longjmp and siglongjmp\n+\twith ECF_NORETURN, not ECF_LONGJMP.\n+\t(emit_call_1, expand_call, emit_library_call_value_1):\n+\tDon't check for ECF_LONGJMP.\n+\t* tree-cfg.c (make_exit_edges, is_ctrl_altering_stmt)\n+\t(need_fake_edge_p): Likewise.\n+\n+\t* config/avr/avr.h, config/ip2k/ip2k.h: Don't define NON_SAVING_SETJMP.\n+\t* system.h: Poison NON_SAVING_SETJMP.\n+\t* function.c (use_register_for_decl)\n+\t* gcse.c (compute_hash_table_work, compute_store_table)\n+\t* postreload-gcse.c (record_opr_changes)\n+\t* reload.c (find_equiv_reg)\n+\t* reload1.c (reload)\n+\t* config/i386/i386.c (ix86_can_use_return_insn_p):\n+\tRemove code conditional on NON_SAVING_SETJMP.\n+\t* doc/tm.texi: Delete documentation of NON_SAVING_SETJMP.\n+\n+\t* config/i386/sysv3.h: Delete file.\n+\t* config/i386/i386.c (ix86_svr3_asm_out_constructor): Delete.\n+\n 2004-11-23  Dorit Naishlos  <dorit@il.ibm.com>\n \n \t* tree-vectorizer.c (vect_analyze_operations): Don't vectorize if\n@@ -64,18 +95,18 @@\n \tremoved.\n \t(DYNAMIC_CHAIN_ADDRESS): Use TARGET_PACKED_STACK.\n \t* config/s390/s390.md (\"allocate_stack\", \"restore_stack_block\")\n-\t(\"save_stack_nonlocal\", \"restore_stack_nonlocal\"): Modified to reflect \n+\t(\"save_stack_nonlocal\", \"restore_stack_nonlocal\"): Modified to reflect\n \tthe change in target switch semantics.\n \t* config/s390/tpf.h (TARGET_DEFAULT_BACKCHAIN): Removed.\n \t(TARGET_DEFAULT): MASK_BACKCHAIN added.\n \t* doc/invoke.texi: Added documentation for the new/changed options.\n \n 2004-11-23  Uros Bizjak  <uros@kss-loka.si>\n \n-        PR rtl-optimization/18614\n-        * simplify-rtx.c (simplify_binary_operation): Do not\n-        simplify inner elements of constant arguments of\n-        VEC_CONCAT insn.\n+\tPR rtl-optimization/18614\n+\t* simplify-rtx.c (simplify_binary_operation): Do not\n+\tsimplify inner elements of constant arguments of\n+\tVEC_CONCAT insn.\n \n 2004-11-23  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n@@ -110,7 +141,7 @@\n \t* tree-vectorizer.c (vect_create_data_ref_ptr): Use\n \tlang_hooks.types.type_for_size instead of integer_type_node for the\n \ttype of ptr_update.\n-\t\n+\n 2004-11-23  Ralf Corsepius <ralf.corsepius@rtems.org>\n \n \t* config.gcc (h8300-*-rtems*): Use h8300/t-rtems.\n@@ -189,7 +220,7 @@\n \tlogbdf2, logbxf2, ilogbsi2, *f2xm1xf2, *fscalexf4, expsf2,\n \texpdf2, expxf2, exp10sf2, exp10df2, exp10xf2, exp2sf2, exp2df2,\n \texp2xf2, expm1df2, expm1sf2, expm1xf2, frndintxf2, rintdf2,\n-\trintsf2, rintxf2, frndintxf2_floor, floordf2, floorsf2, \n+\trintsf2, rintxf2, frndintxf2_floor, floordf2, floorsf2,\n \tfloorxf2, frndintxf2_ceil, ceildf2, ceilsf2, ceilxf2,\n \tfrndintxf2_trunc, btruncdf2, btruncsf2, btruncxf2,\n \tfrndintxf2_mask_pm, nearbyintdf2, nearbyintsf2, nearbyintxf2):\n@@ -222,7 +253,7 @@\n 2004-11-22  Devang Patel  <dpatel@apple.com>\n \n \t* tree-if-conv.c (clean_predicate_lists): Clean all basic blocks.\n-\t\n+\n 2004-11-22  Devang Patel  <dpatel@apple.com>\n \n \t* tree-if-conv.c (if_convertable_phi_p): Rename to ...\n@@ -235,7 +266,7 @@\n \t(if_convertible_bb_p): ... new name.\n \t(if_convertable_loop_p): Rename to ...\n \t(if_convertible_loop_p): ... new name.\n-\t\n+\n 2004-11-22  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR target/18444\n@@ -319,7 +350,7 @@\n \n 2004-11-22 Daniel Berlin  <dberlin@dberlin.org>\n \n-        * tree-ssa.c (verify_ssa): SSA_OP_ALL_USES should be\n+\t* tree-ssa.c (verify_ssa): SSA_OP_ALL_USES should be\n \tSSA_OP_ALL_USES | SSA_OP_ALL_KILLS for verification purposes.\n \n 2004-11-22  David Edelsohn  <edelsohn@gnu.org>\n@@ -426,7 +457,7 @@\n \t(vect_update_niters_after_peeling): Use type of niters instead of\n \tinteger_type.\n \t(vect_transform_loop): Unify handling of known and unknown loop bound\n-\tcases. Call make_loop_iterate_ntimes instead of \n+\tcases. Call make_loop_iterate_ntimes instead of\n \tvect_transform_loop_bound.\n \n 2004-11-22  Andrew Pinski  <pinskia@physics.uc.edu>\n@@ -443,7 +474,7 @@\n 2004-11-22 Kazuhiro Inaoka <inaoka.kazuhiro@renesas.com>\n \n \t* config.gcc: Use t-slibgcc-elf to build libgcc_s.so on\n-        m32r*linux.\n+\tm32r*linux.\n \t* config/m32r/t-linux (SHLIB_MAPFILES): Override to use\n \tm32r/libgcc-glibc.ver.\n \t* config/m32r/libgcc-glibc.ver: Add New file.\n@@ -679,8 +710,8 @@\n \n 2004-11-19  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * simplify-rtx.c (simplify_ternary_operation): Use\n-        gen_int_mode.\n+\t* simplify-rtx.c (simplify_ternary_operation): Use\n+\tgen_int_mode.\n \n 2004-11-19  Kazu Hirata  <kazu@cs.umass.edu>\n \n@@ -733,12 +764,12 @@\n \t(slpeel_tree_peel_loop_to_edge): Call slpeel_make_loop_iterate_ntimes\n \twithout last two arguments. Update single_exit of loops.\n \t(vect_update_niters_after_peeling): Removed. Its functionality was\n-\tmoved to vect_do_peeling_for_alignment. \n+\tmoved to vect_do_peeling_for_alignment.\n \t(vect_do_peeling_for_loop_bound): New name for function previously\n \tcalled vect_transform_for_unknown_loop_bound.\n \t(vect_transform_loop_bound): Call slpeel_make_loop_iterate_ntimes\n \tinstead of code that duplicates the same functionality.\n-\t(vect_do_peeling_for_alignment): Functionality of   \n+\t(vect_do_peeling_for_alignment): Functionality of\n \tvect_update_niters_after_peeling moved here.\n \t(vect_transform_loop): Unify call to vect_do_peeling_for_loop_bound -\n \tpreviously named vect_transform_for_unknown_loop_bound - for both known\n@@ -912,7 +943,7 @@\n \taltivec_lvx_4sf): Rename and replace with ...\n \t(altivec_lvx_<mode>): ... mode macro version.\n \t(altivec_stvx_4si, altivec_stvx_8hi, altivec_stvx_16qi,\n-\taltivec_stvx_4sf): Rename and replace with ... \n+\taltivec_stvx_4sf): Rename and replace with ...\n \t(altivec_stvx_<mode>): ... mode macro version.\n \t(movv4si, movv8hi, movv16qi, movv4sf}): Replace with ...\n \t(mov<mode>): ... mode macro version.\n@@ -977,10 +1008,10 @@\n \n 2004-11-18  Uros Bizjak  <uros@kss-loka.si>\n \n-        * configure/i386/i386.md (*fix_trunch_1): Add \"&& 1\" to\n-        insn split constraint.\n-        (define_peephole2): Remove unneeded \"&& 1\" from peephole2\n-        constraints.\n+\t* configure/i386/i386.md (*fix_trunch_1): Add \"&& 1\" to\n+\tinsn split constraint.\n+\t(define_peephole2): Remove unneeded \"&& 1\" from peephole2\n+\tconstraints.\n \n 2004-11-18  Ben Elliston  <bje@au.ibm.com>\n \n@@ -996,7 +1027,7 @@\n \n \t* config/i386/i386.c (i386_solaris_elf_named_section): Mark with\n \tATTRIBUTE_UNUSED.\n-  \n+\n 2004-11-17  Zack Weinberg  <zack@codesourcery.com>\n \n \t* defaults.h, config/darwin.h: Don't define TARGET_SUPPORTS_HIDDEN."}, {"sha": "6c17e23acf93363ff739b006ca202c03150b760b", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6e14af161c7d61b280c187b1a91a0fd853249bd1", "patch": "@@ -708,8 +708,6 @@ expand_builtin_longjmp (rtx buf_addr, rtx value)\n      longer copying around a value that we don't care about.  */\n   gcc_assert (value == const1_rtx);\n \n-  current_function_calls_longjmp = 1;\n-\n   last = get_last_insn ();\n #ifdef HAVE_builtin_longjmp\n   if (HAVE_builtin_longjmp)"}, {"sha": "44806d4c8df7321f057173c390df27512e57e47e", "filename": "gcc/calls.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=6e14af161c7d61b280c187b1a91a0fd853249bd1", "patch": "@@ -435,7 +435,7 @@ emit_call_1 (rtx funexp, tree fntree, tree fndecl ATTRIBUTE_UNUSED,\n \n       if (rounded_stack_size != 0)\n \t{\n-\t  if (ecf_flags & (ECF_SP_DEPRESSED | ECF_NORETURN | ECF_LONGJMP))\n+\t  if (ecf_flags & (ECF_SP_DEPRESSED | ECF_NORETURN))\n \t    /* Just pretend we did the pop.  */\n \t    stack_pointer_delta -= rounded_stack_size;\n \t  else if (flag_defer_pop && inhibit_defer_pop == 0\n@@ -525,7 +525,7 @@ special_function_p (tree fndecl, int flags)\n \n \t  if (tname[1] == 'i'\n \t      && ! strcmp (tname, \"siglongjmp\"))\n-\t    flags |= ECF_LONGJMP;\n+\t    flags |= ECF_NORETURN;\n \t}\n       else if ((tname[0] == 'q' && tname[1] == 's'\n \t\t&& ! strcmp (tname, \"qsetjmp\"))\n@@ -535,7 +535,7 @@ special_function_p (tree fndecl, int flags)\n \n       else if (tname[0] == 'l' && tname[1] == 'o'\n \t       && ! strcmp (tname, \"longjmp\"))\n-\tflags |= ECF_LONGJMP;\n+\tflags |= ECF_NORETURN;\n     }\n \n   return flags;\n@@ -2174,7 +2174,7 @@ expand_call (tree exp, rtx target, int ignore)\n       || !targetm.function_ok_for_sibcall (fndecl, exp)\n       /* Functions that do not return exactly once may not be sibcall\n          optimized.  */\n-      || (flags & (ECF_RETURNS_TWICE | ECF_LONGJMP | ECF_NORETURN))\n+      || (flags & (ECF_RETURNS_TWICE | ECF_NORETURN))\n       || TYPE_VOLATILE (TREE_TYPE (TREE_TYPE (addr)))\n       /* If the called function is nested in the current one, it might access\n          some of the caller's arguments, but could clobber them beforehand if\n@@ -2753,7 +2753,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t if nonvolatile values are live.  For functions that cannot return,\n \t inform flow that control does not fall through.  */\n \n-      if ((flags & (ECF_NORETURN | ECF_LONGJMP)) || pass == 0)\n+      if ((flags & ECF_NORETURN) || pass == 0)\n \t{\n \t  /* The barrier must be emitted\n \t     immediately after the CALL_INSN.  Some ports emit more\n@@ -2779,9 +2779,6 @@ expand_call (tree exp, rtx target, int ignore)\n \t    }\n \t}\n \n-      if (flags & ECF_LONGJMP)\n-\tcurrent_function_calls_longjmp = 1;\n-\n       /* If value type not void, return an rtx for the value.  */\n \n       if (TYPE_MODE (TREE_TYPE (exp)) == VOIDmode\n@@ -2979,7 +2976,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t  normal_call_insns = insns;\n \n \t  /* Verify that we've deallocated all the stack we used.  */\n-\t  gcc_assert ((flags & (ECF_NORETURN | ECF_LONGJMP))\n+\t  gcc_assert ((flags & ECF_NORETURN)\n \t\t      || (old_stack_allocated\n \t\t\t  == stack_pointer_delta - pending_stack_adjust));\n \t}\n@@ -3694,7 +3691,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n      if nonvolatile values are live.  For functions that cannot return,\n      inform flow that control does not fall through.  */\n \n-  if (flags & (ECF_NORETURN | ECF_LONGJMP))\n+  if (flags & ECF_NORETURN)\n     {\n       /* The barrier note must be emitted\n \t immediately after the CALL_INSN.  Some ports emit more than"}, {"sha": "f1c6da00b055de7979f050c34492693228bae78d", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=6e14af161c7d61b280c187b1a91a0fd853249bd1", "patch": "@@ -196,8 +196,6 @@ extern int avr_asm_only_p;\n     1,1,/*  STACK */\t\t\t\t\\\n     1,1 /* arg pointer */  }\n \n-#define NON_SAVING_SETJMP 0\n-\n #define REG_ALLOC_ORDER {\t\t\t\\\n     24,25,\t\t\t\t\t\\\n     18,19,\t\t\t\t\t\\"}, {"sha": "3fca2f71c812480139038d7334510fd48afca3dd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6e14af161c7d61b280c187b1a91a0fd853249bd1", "patch": "@@ -924,9 +924,6 @@ static bool ix86_must_pass_in_stack (enum machine_mode mode, tree type);\n static bool ix86_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t    tree, bool);\n \n-#if defined (DO_GLOBAL_CTORS_BODY) && defined (HAS_INIT_SECTION)\n-static void ix86_svr3_asm_out_constructor (rtx, int);\n-#endif\n /* This function is only used on Solaris.  */\n static void i386_solaris_elf_named_section (const char *, unsigned int, tree)\n   ATTRIBUTE_UNUSED;\n@@ -3709,24 +3706,13 @@ symbolic_reference_mentioned_p (rtx op)\n    body of a function.  Do this only if the epilogue is simple, needing a\n    couple of insns.  Prior to reloading, we can't tell how many registers\n    must be saved, so return 0 then.  Return 0 if there is no frame\n-   marker to de-allocate.\n-\n-   If NON_SAVING_SETJMP is defined and true, then it is not possible\n-   for the epilogue to be simple, so return 0.  This is a special case\n-   since NON_SAVING_SETJMP will not cause regs_ever_live to change\n-   until final, but jump_optimize may need to know sooner if a\n-   `return' is OK.  */\n+   marker to de-allocate.  */\n \n int\n ix86_can_use_return_insn_p (void)\n {\n   struct ix86_frame frame;\n \n-#ifdef NON_SAVING_SETJMP\n-  if (NON_SAVING_SETJMP && current_function_calls_setjmp)\n-    return 0;\n-#endif\n-\n   if (! reload_completed || frame_pointer_needed)\n     return 0;\n \n@@ -14374,17 +14360,6 @@ ix86_rtx_costs (rtx x, int code, int outer_code, int *total)\n     }\n }\n \n-#if defined (DO_GLOBAL_CTORS_BODY) && defined (HAS_INIT_SECTION)\n-static void\n-ix86_svr3_asm_out_constructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n-{\n-  init_section ();\n-  fputs (\"\\tpushl $\", asm_out_file);\n-  assemble_name (asm_out_file, XSTR (symbol, 0));\n-  fputc ('\\n', asm_out_file);\n-}\n-#endif\n-\n #if TARGET_MACHO\n \n static int current_machopic_label_num;"}, {"sha": "b2643b14eb371b6cfcfae72eaa94cea6bf5d7b54", "filename": "gcc/config/i386/sysv3.h", "status": "removed", "additions": 0, "deletions": 105, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c00ceb85406d1f78d1752f27742ac7bb05b47b/gcc%2Fconfig%2Fi386%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c00ceb85406d1f78d1752f27742ac7bb05b47b/gcc%2Fconfig%2Fi386%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv3.h?ref=e9c00ceb85406d1f78d1752f27742ac7bb05b47b", "patch": "@@ -1,105 +0,0 @@\n-/* Definitions for Intel 386 running system V.\n-   Copyright (C) 1988, 1996, 2000, 2002 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#define TARGET_VERSION fprintf (stderr, \" (80386, ATT syntax)\"); \n-\n-/* Use crt1.o as a startup file and crtn.o as a closing file.  */\n-\n-#define STARTFILE_SPEC  \\\n-  \"%{pg:gcrt1.o%s}%{!pg:%{posix:%{p:mcrtp1.o%s}%{!p:crtp1.o%s}}%{!posix:%{p:mcrt1.o%s}%{!p:crt1.o%s}}} crtbegin.o%s\\\n-   %{p:-L/usr/lib/libp}%{pg:-L/usr/lib/libp}\"\n-\n-/* ??? There is a suggestion that -lg is needed here.\n-   Does anyone know whether this is right?  */\n-#define LIB_SPEC \"%{posix:-lcposix} %{shlib:-lc_s} -lc crtend.o%s crtn.o%s\"\n-\n-/* Specify predefined symbols in preprocessor.  */\n-\n-#define TARGET_OS_CPP_BUILTINS()\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-\tbuiltin_define_std (\"unix\");\t\t\\\n-\tbuiltin_assert (\"system=svr3\");\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n-#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n-\n-/* Writing `int' for a bit-field forces int alignment for the structure.  */\n-\n-#define PCC_BITFIELD_TYPE_MATTERS 1\n-\n-/* We want to be able to get DBX debugging information via -gstabs.  */\n-\n-#define DBX_DEBUGGING_INFO 1\n-\n-#undef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE SDB_DEBUG\n-\f\n-/* longjmp may fail to restore the registers if called from the same\n-   function that called setjmp.  To compensate, the compiler avoids\n-   putting variables in registers in functions that use both setjmp\n-   and longjmp.  */\n-\n-#define NON_SAVING_SETJMP \\\n-  (current_function_calls_setjmp && current_function_calls_longjmp)\n-\n-/* longjmp may fail to restore the stack pointer if the saved frame\n-   pointer is the same as the caller's frame pointer.  Requiring a frame\n-   pointer in any function that calls setjmp or longjmp avoids this\n-   problem, unless setjmp and longjmp are called from the same function.\n-   Since a frame pointer will be required in such a function, it is OK\n-   that the stack pointer is not restored.  */\n-\n-#undef SUBTARGET_FRAME_POINTER_REQUIRED\n-#define SUBTARGET_FRAME_POINTER_REQUIRED \\\n-  (current_function_calls_setjmp || current_function_calls_longjmp)\n-\n-/* Modify ASM_OUTPUT_LOCAL slightly to test -msvr3-shlib.  */\n-#undef ASM_OUTPUT_LOCAL\n-#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    int align = exact_log2 (ROUNDED);\t\t\t\\\n-    if (align > 2) align = 2;\t\t\t\t\\\n-    if (TARGET_SVR3_SHLIB)\t\t\t\t\\\n-      data_section ();\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\\\n-      bss_section ();\t\t\t\t\t\\\n-    ASM_OUTPUT_ALIGN ((FILE), align == -1 ? 2 : align);\t\\\n-    ASM_OUTPUT_LABEL ((FILE), (NAME));\t\t\t\\\n-    fprintf ((FILE), \"\\t.set .,.+%u\\n\", (int)(ROUNDED));\\\n-  } while (0)\n-\f\n-/* Define a few machine-specific details of the implementation of\n-   constructors.\n-\n-   The __CTORS_LIST__ goes in the .init section.  Define CTOR_LIST_BEGIN\n-   and CTOR_LIST_END to contribute to the .init section an instruction to\n-   push a word containing 0 (or some equivalent of that).  */\n-\n-#undef INIT_SECTION_ASM_OP\n-#define INIT_SECTION_ASM_OP     \"\\t.section .init,\\\"x\\\"\"\n-\n-#define CTOR_LIST_BEGIN\t\t\t\t\\\n-  asm (INIT_SECTION_ASM_OP);\t\t\t\\\n-  asm (\"pushl $0\")\n-#define CTOR_LIST_END CTOR_LIST_BEGIN\n-\n-#define TARGET_ASM_CONSTRUCTOR  ix86_svr3_asm_out_constructor"}, {"sha": "06381987ac6dbed056a514c7a3aac213d481d8ac", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=6e14af161c7d61b280c187b1a91a0fd853249bd1", "patch": "@@ -184,8 +184,6 @@ extern int target_flags;\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,/*r224..r255*/\\\n 1,1,1,1}\n \n-#define NON_SAVING_SETJMP 0\n-\n #define REG_ALLOC_ORDER {\t\t\t\\\n     0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,\t\\\n     0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,\t\\"}, {"sha": "72d49f3a9b6d5c472456ac2ba3fe7706e71d76cd", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=6e14af161c7d61b280c187b1a91a0fd853249bd1", "patch": "@@ -1983,14 +1983,6 @@ controlled by target switches, then GCC will automatically avoid using\n these registers when the target switches are opposed to them.)\n @end defmac\n \n-@defmac NON_SAVING_SETJMP\n-If this macro is defined and has a nonzero value, it means that\n-@code{setjmp} and related functions fail to save the registers, or that\n-@code{longjmp} fails to restore them.  To compensate, the compiler\n-avoids putting variables in registers in functions that use\n-@code{setjmp}.\n-@end defmac\n-\n @defmac INCOMING_REGNO (@var{out})\n Define this macro if the target machine has register windows.  This C\n expression returns the register number as seen by the called function"}, {"sha": "da78d3fe022be49f50f56bf53371297549ea4770", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=6e14af161c7d61b280c187b1a91a0fd853249bd1", "patch": "@@ -1926,14 +1926,6 @@ use_register_for_decl (tree decl)\n   if (DECL_ARTIFICIAL (decl))\n     return true;\n \n-#ifdef NON_SAVING_SETJMP\n-  /* Protect variables not declared \"register\" from setjmp.  */\n-  if (NON_SAVING_SETJMP\n-      && current_function_calls_setjmp\n-      && !DECL_REGISTER (decl))\n-    return false;\n-#endif\n-\n   return (optimize || DECL_REGISTER (decl));\n }\n "}, {"sha": "1c32c9fbc5b7951790adad8edba293dfb3e86808", "filename": "gcc/function.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=6e14af161c7d61b280c187b1a91a0fd853249bd1", "patch": "@@ -357,9 +357,6 @@ struct function GTY(())\n   /* Nonzero if function being compiled can call setjmp.  */\n   unsigned int calls_setjmp : 1;\n \n-  /* Nonzero if function being compiled can call longjmp.  */\n-  unsigned int calls_longjmp : 1;\n-\n   /* Nonzero if function being compiled can call alloca,\n      either as a subroutine or builtin.  */\n   unsigned int calls_alloca : 1;\n@@ -449,7 +446,6 @@ extern int trampolines_created;\n #define current_function_returns_pointer (cfun->returns_pointer)\n #define current_function_calls_setjmp (cfun->calls_setjmp)\n #define current_function_calls_alloca (cfun->calls_alloca)\n-#define current_function_calls_longjmp (cfun->calls_longjmp)\n #define current_function_calls_eh_return (cfun->calls_eh_return)\n #define current_function_has_computed_jump (cfun->has_computed_jump)\n #define current_function_contains_functions (cfun->contains_functions)"}, {"sha": "bddbbb4b57476a12b679591cdac4aacc04cf6bd2", "filename": "gcc/gcse.c", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=6e14af161c7d61b280c187b1a91a0fd853249bd1", "patch": "@@ -2126,16 +2126,8 @@ compute_hash_table_work (struct hash_table *table)\n \n \t  if (CALL_P (insn))\n \t    {\n-\t      bool clobbers_all = false;\n-#ifdef NON_SAVING_SETJMP\n-\t      if (NON_SAVING_SETJMP\n-\t\t  && find_reg_note (insn, REG_SETJMP, NULL_RTX))\n-\t\tclobbers_all = true;\n-#endif\n-\n \t      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-\t\tif (clobbers_all\n-\t\t    || TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n+\t\tif (TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n \t\t  record_last_reg_set_info (insn, regno);\n \n \t      mark_call (insn);\n@@ -5784,16 +5776,8 @@ compute_store_table (void)\n \n \t  if (CALL_P (insn))\n \t    {\n-\t      bool clobbers_all = false;\n-#ifdef NON_SAVING_SETJMP\n-\t      if (NON_SAVING_SETJMP\n-\t\t  && find_reg_note (insn, REG_SETJMP, NULL_RTX))\n-\t\tclobbers_all = true;\n-#endif\n-\n \t      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-\t\tif (clobbers_all\n-\t\t    || TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n+\t\tif (TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n \t\t  {\n \t\t    last_set_in[regno] = INSN_UID (insn);\n \t\t    SET_BIT (reg_set_in_block[bb->index], regno);\n@@ -5817,16 +5801,8 @@ compute_store_table (void)\n \n \t  if (CALL_P (insn))\n \t    {\n-\t      bool clobbers_all = false;\n-#ifdef NON_SAVING_SETJMP\n-\t      if (NON_SAVING_SETJMP\n-\t\t  && find_reg_note (insn, REG_SETJMP, NULL_RTX))\n-\t\tclobbers_all = true;\n-#endif\n-\n \t      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-\t\tif (clobbers_all\n-\t\t    || TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n+\t\tif (TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n \t\t  already_set[regno] = 1;\n \t    }\n \n@@ -5841,16 +5817,8 @@ compute_store_table (void)\n \t  note_stores (pat, reg_clear_last_set, last_set_in);\n \t  if (CALL_P (insn))\n \t    {\n-\t      bool clobbers_all = false;\n-#ifdef NON_SAVING_SETJMP\n-\t      if (NON_SAVING_SETJMP\n-\t\t  && find_reg_note (insn, REG_SETJMP, NULL_RTX))\n-\t\tclobbers_all = true;\n-#endif\n-\n \t      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-\t\tif ((clobbers_all\n-\t\t     || TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n+\t\tif (TEST_HARD_REG_BIT (regs_invalidated_by_call, regno)\n \t\t    && last_set_in[regno] == INSN_UID (insn))\n \t\t  last_set_in[regno] = 0;\n \t    }"}, {"sha": "24c233caea378bd9506efff67150c46e62b1e15f", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=6e14af161c7d61b280c187b1a91a0fd853249bd1", "patch": "@@ -712,17 +712,9 @@ record_opr_changes (rtx insn)\n   if (CALL_P (insn))\n     {\n       unsigned int regno;\n-      bool clobbers_all = false;\n-\n-#ifdef NON_SAVING_SETJMP\n-      if (NON_SAVING_SETJMP\n-\t  && find_reg_note (insn, REG_SETJMP, NULL_RTX))\n-\tclobbers_all = true;\n-#endif\n \n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-\tif (clobbers_all\n-\t    || TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n+\tif (TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n \t  record_last_reg_set_info (insn, regno);\n \n       if (! CONST_OR_PURE_CALL_P (insn))"}, {"sha": "9e219a0978c157a4b48b30c24fffab276a4e34e1", "filename": "gcc/reload.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=6e14af161c7d61b280c187b1a91a0fd853249bd1", "patch": "@@ -6693,10 +6693,6 @@ find_equiv_reg (rtx goal, rtx insn, enum reg_class class, int other,\n \t    for (i = 0; i < valuenregs; ++i)\n \t      if (call_used_regs[valueno + i])\n \t\treturn 0;\n-#ifdef NON_SAVING_SETJMP\n-\t  if (NON_SAVING_SETJMP && find_reg_note (p, REG_SETJMP, NULL))\n-\t    return 0;\n-#endif\n \t}\n \n       if (INSN_P (p))"}, {"sha": "9ffa798e1cf210345b357cc5657756e103a1ade4", "filename": "gcc/reload1.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=6e14af161c7d61b280c187b1a91a0fd853249bd1", "patch": "@@ -682,17 +682,6 @@ reload (rtx first, int global)\n       if (! call_used_regs[i] && ! fixed_regs[i] && ! LOCAL_REGNO (i))\n \tregs_ever_live[i] = 1;\n \n-#ifdef NON_SAVING_SETJMP\n-  /* A function that calls setjmp should save and restore all the\n-     call-saved registers on a system where longjmp clobbers them.  */\n-  if (NON_SAVING_SETJMP && current_function_calls_setjmp)\n-    {\n-      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\tif (! call_used_regs[i])\n-\t  regs_ever_live[i] = 1;\n-    }\n-#endif\n-\n   /* Find all the pseudo registers that didn't get hard regs\n      but do have known equivalent constants or memory slots.\n      These include parameters (known equivalent to parameter slots)"}, {"sha": "dfaec16f7f356d430069da8ae58aab8e5872cd13", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=6e14af161c7d61b280c187b1a91a0fd853249bd1", "patch": "@@ -657,7 +657,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tASM_OUTPUT_FILENAME ASM_OUTPUT_SOURCE_LINE FILE_NAME_JOINER\t   \\\n \tGDB_INV_REF_REGPARM_STABS_LETTER DBX_MEMPARM_STABS_LETTER\t   \\\n \tPUT_SDB_SRC_FILE STABS_GCC_MARKER DBX_OUTPUT_FUNCTION_END\t   \\\n-\tDBX_OUTPUT_GCC_MARKER DBX_FINISH_SYMBOL SDB_GENERATE_FAKE\n+\tDBX_OUTPUT_GCC_MARKER DBX_FINISH_SYMBOL SDB_GENERATE_FAKE\t   \\\n+\tNON_SAVING_SETJMP\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "bcd025f717d79528d766a3d0796798395659a415", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=6e14af161c7d61b280c187b1a91a0fd853249bd1", "patch": "@@ -552,7 +552,7 @@ make_exit_edges (basic_block bb)\n \t such a bloody pain to avoid creating edges for this case since\n \t all we do is remove these edges when we're done building the\n \t CFG.  */\n-      if (call_expr_flags (last) & (ECF_NORETURN | ECF_LONGJMP))\n+      if (call_expr_flags (last) & ECF_NORETURN)\n \t{\n \t  make_edge (bb, EXIT_BLOCK_PTR, EDGE_FAKE);\n \t  return;\n@@ -2546,7 +2546,7 @@ is_ctrl_altering_stmt (tree t)\n \treturn true;\n \n       /* A CALL_EXPR also alters control flow if it does not return.  */\n-      if (call_expr_flags (call) & (ECF_NORETURN | ECF_LONGJMP))\n+      if (call_expr_flags (call) & ECF_NORETURN)\n \treturn true;\n     }\n \n@@ -5148,8 +5148,7 @@ need_fake_edge_p (tree t)\n      leads to different results from -fbranch-probabilities.  */\n   call = get_call_expr_in (t);\n   if (call\n-      && !(call_expr_flags (call) & \n-\t   (ECF_NORETURN | ECF_LONGJMP | ECF_ALWAYS_RETURN)))\n+      && !(call_expr_flags (call) & (ECF_NORETURN | ECF_ALWAYS_RETURN)))\n     return true;\n \n   if (TREE_CODE (t) == ASM_EXPR"}, {"sha": "aa533a4f6f07c816ca4c6e45c64a9cde7edf5bc6", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e14af161c7d61b280c187b1a91a0fd853249bd1/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6e14af161c7d61b280c187b1a91a0fd853249bd1", "patch": "@@ -3648,9 +3648,11 @@ extern rtx emit_line_note (location_t);\n \n /* In calls.c */\n \n-/* Nonzero if this is a call to a `const' function.  */\n+/* Nonzero if this is a call to a function whose return value depends\n+   solely on its arguments, has no side effects, and does not read\n+   global memory.  */\n #define ECF_CONST\t\t1\n-/* Nonzero if this is a call to a `volatile' function.  */\n+/* Nonzero if this call will never return.  */\n #define ECF_NORETURN\t\t2\n /* Nonzero if this is a call to malloc or a related function.  */\n #define ECF_MALLOC\t\t4\n@@ -3660,21 +3662,18 @@ extern rtx emit_line_note (location_t);\n #define ECF_NOTHROW\t\t16\n /* Nonzero if this is a call to setjmp or a related function.  */\n #define ECF_RETURNS_TWICE\t32\n-/* Nonzero if this is a call to `longjmp'.  */\n-#define ECF_LONGJMP\t\t64\n-/* Nonzero if this is a syscall that makes a new process in the image of\n-   the current one.  */\n-#define ECF_SIBCALL\t\t128\n+/* Nonzero if this call replaces the current stack frame.  */\n+#define ECF_SIBCALL\t\t64\n /* Nonzero if this is a call to \"pure\" function (like const function,\n    but may read memory.  */\n-#define ECF_PURE\t\t256\n+#define ECF_PURE\t\t128\n /* Nonzero if this is a call to a function that returns with the stack\n    pointer depressed.  */\n-#define ECF_SP_DEPRESSED\t512\n+#define ECF_SP_DEPRESSED\t256\n /* Nonzero if this call is known to always return.  */\n-#define ECF_ALWAYS_RETURN\t1024\n+#define ECF_ALWAYS_RETURN\t512\n /* Create libcall block around the call.  */\n-#define ECF_LIBCALL_BLOCK\t2048\n+#define ECF_LIBCALL_BLOCK\t1024\n \n extern int flags_from_decl_or_type (tree);\n extern int call_expr_flags (tree);"}]}