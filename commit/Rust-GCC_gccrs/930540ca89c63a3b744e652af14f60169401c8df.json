{"sha": "930540ca89c63a3b744e652af14f60169401c8df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMwNTQwY2E4OWM2M2EzYjc0NGU2NTJhZjE0ZjYwMTY5NDAxYzhkZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-28T01:19:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-28T01:19:07Z"}, "message": "libgo: update to final Go 1.10 release\n    \n    Reviewed-on: https://go-review.googlesource.com/97517\n\nFrom-SVN: r258051", "tree": {"sha": "9c2123299cb544decd908a75955e6a1d1853c315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c2123299cb544decd908a75955e6a1d1853c315"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/930540ca89c63a3b744e652af14f60169401c8df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/930540ca89c63a3b744e652af14f60169401c8df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/930540ca89c63a3b744e652af14f60169401c8df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/930540ca89c63a3b744e652af14f60169401c8df/comments", "author": null, "committer": null, "parents": [{"sha": "5007cea32e36216ab6cdf08e714fc3507db7a142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5007cea32e36216ab6cdf08e714fc3507db7a142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5007cea32e36216ab6cdf08e714fc3507db7a142"}], "stats": {"total": 79, "additions": 67, "deletions": 12}, "files": [{"sha": "dae8040bccd50e6e6af36ca76dd193644104391b", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/930540ca89c63a3b744e652af14f60169401c8df/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/930540ca89c63a3b744e652af14f60169401c8df/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=930540ca89c63a3b744e652af14f60169401c8df", "patch": "@@ -1,4 +1,4 @@\n-8b3d6091801d485c74a9c92740c69673e39160b0\n+bd7fc3c85d874344b18bbb0a738ec94dfb43794b\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "b715f06010bf832377d752890d42cd2b11fc9752", "filename": "libgo/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/930540ca89c63a3b744e652af14f60169401c8df/libgo%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/930540ca89c63a3b744e652af14f60169401c8df/libgo%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMERGE?ref=930540ca89c63a3b744e652af14f60169401c8df", "patch": "@@ -1,4 +1,4 @@\n-20e228f2fdb44350c858de941dff4aea9f3127b8\n+bf86aec25972f3a100c3aa58a6abcbcc35bdea49\n \n The first line of this file holds the git revision number of the\n last merge done from the master library sources."}, {"sha": "95ec39eb99bde9f63aaf5e20b79a4264b5b80834", "filename": "libgo/VERSION", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/930540ca89c63a3b744e652af14f60169401c8df/libgo%2FVERSION", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/930540ca89c63a3b744e652af14f60169401c8df/libgo%2FVERSION", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FVERSION?ref=930540ca89c63a3b744e652af14f60169401c8df", "patch": "@@ -1 +1 @@\n-go1.10rc2\n+go1.10"}, {"sha": "52ff6b8fcd29073a5dcf12c13a72a0f018ec9f9a", "filename": "libgo/go/cmd/go/internal/load/pkg.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/930540ca89c63a3b744e652af14f60169401c8df/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fload%2Fpkg.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/930540ca89c63a3b744e652af14f60169401c8df/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fload%2Fpkg.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fload%2Fpkg.go?ref=930540ca89c63a3b744e652af14f60169401c8df", "patch": "@@ -1224,6 +1224,7 @@ func (p *Package) load(stk *ImportStack, bp *build.Package, err error) {\n // GNU binutils flagfile specifiers, sometimes called \"response files\").\n // To be conservative, we reject almost any arg beginning with non-alphanumeric ASCII.\n // We accept leading . _ and / as likely in file system paths.\n+// There is a copy of this function in cmd/compile/internal/gc/noder.go.\n func SafeArg(name string) bool {\n \tif name == \"\" {\n \t\treturn false"}, {"sha": "40d46023f29b432820a929120649c8aa3456977a", "filename": "libgo/go/cmd/go/internal/work/exec.go", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/930540ca89c63a3b744e652af14f60169401c8df/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Fexec.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/930540ca89c63a3b744e652af14f60169401c8df/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Fexec.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Fexec.go?ref=930540ca89c63a3b744e652af14f60169401c8df", "patch": "@@ -945,15 +945,20 @@ func splitPkgConfigOutput(out []byte) []string {\n // Calls pkg-config if needed and returns the cflags/ldflags needed to build the package.\n func (b *Builder) getPkgConfigFlags(p *load.Package) (cflags, ldflags []string, err error) {\n \tif pkgs := p.CgoPkgConfig; len(pkgs) > 0 {\n+\t\tvar pcflags []string\n+\t\tfor len(pkgs) > 0 && strings.HasPrefix(pkgs[0], \"--\") {\n+\t\t\tpcflags = append(pcflags, pkgs[0])\n+\t\t\tpkgs = pkgs[1:]\n+\t\t}\n \t\tfor _, pkg := range pkgs {\n \t\t\tif !load.SafeArg(pkg) {\n \t\t\t\treturn nil, nil, fmt.Errorf(\"invalid pkg-config package name: %s\", pkg)\n \t\t\t}\n \t\t}\n \t\tvar out []byte\n-\t\tout, err = b.runOut(p.Dir, p.ImportPath, nil, b.PkgconfigCmd(), \"--cflags\", \"--\", pkgs)\n+\t\tout, err = b.runOut(p.Dir, p.ImportPath, nil, b.PkgconfigCmd(), \"--cflags\", pcflags, \"--\", pkgs)\n \t\tif err != nil {\n-\t\t\tb.showOutput(nil, p.Dir, b.PkgconfigCmd()+\" --cflags \"+strings.Join(pkgs, \" \"), string(out))\n+\t\t\tb.showOutput(nil, p.Dir, b.PkgconfigCmd()+\" --cflags \"+strings.Join(pcflags, \" \")+strings.Join(pkgs, \" \"), string(out))\n \t\t\tb.Print(err.Error() + \"\\n\")\n \t\t\treturn nil, nil, errPrintedOutput\n \t\t}\n@@ -963,15 +968,15 @@ func (b *Builder) getPkgConfigFlags(p *load.Package) (cflags, ldflags []string,\n \t\t\t\treturn nil, nil, err\n \t\t\t}\n \t\t}\n-\t\tout, err = b.runOut(p.Dir, p.ImportPath, nil, b.PkgconfigCmd(), \"--libs\", \"--\", pkgs)\n+\t\tout, err = b.runOut(p.Dir, p.ImportPath, nil, b.PkgconfigCmd(), \"--libs\", pcflags, \"--\", pkgs)\n \t\tif err != nil {\n-\t\t\tb.showOutput(nil, p.Dir, b.PkgconfigCmd()+\" --libs \"+strings.Join(pkgs, \" \"), string(out))\n+\t\t\tb.showOutput(nil, p.Dir, b.PkgconfigCmd()+\" --libs \"+strings.Join(pcflags, \" \")+strings.Join(pkgs, \" \"), string(out))\n \t\t\tb.Print(err.Error() + \"\\n\")\n \t\t\treturn nil, nil, errPrintedOutput\n \t\t}\n \t\tif len(out) > 0 {\n \t\t\tldflags = strings.Fields(string(out))\n-\t\t\tif err := checkLinkerFlags(\"CFLAGS\", \"pkg-config --cflags\", ldflags); err != nil {\n+\t\t\tif err := checkLinkerFlags(\"LDFLAGS\", \"pkg-config --libs\", ldflags); err != nil {\n \t\t\t\treturn nil, nil, err\n \t\t\t}\n \t\t}"}, {"sha": "54fd6b978201847aef8749db3265f5c1b5c9c506", "filename": "libgo/go/cmd/go/internal/work/security.go", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/930540ca89c63a3b744e652af14f60169401c8df/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Fsecurity.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/930540ca89c63a3b744e652af14f60169401c8df/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Fsecurity.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Fsecurity.go?ref=930540ca89c63a3b744e652af14f60169401c8df", "patch": "@@ -34,6 +34,7 @@ import (\n \t\"fmt\"\n \t\"os\"\n \t\"regexp\"\n+\t\"strings\"\n )\n \n var re = regexp.MustCompile\n@@ -45,26 +46,42 @@ var validCompilerFlags = []*regexp.Regexp{\n \tre(`-O([^@\\-].*)`),\n \tre(`-W`),\n \tre(`-W([^@,]+)`), // -Wall but not -Wa,-foo.\n+\tre(`-f(no-)?blocks`),\n+\tre(`-f(no-)?common`),\n+\tre(`-f(no-)?constant-cfstrings`),\n+\tre(`-f(no-)?exceptions`),\n+\tre(`-finput-charset=([^@\\-].*)`),\n+\tre(`-f(no-)?lto`),\n+\tre(`-f(no-)?modules`),\n \tre(`-f(no-)?objc-arc`),\n \tre(`-f(no-)?omit-frame-pointer`),\n+\tre(`-f(no-)?openmp(-simd)?`),\n+\tre(`-f(no-)?permissive`),\n \tre(`-f(no-)?(pic|PIC|pie|PIE)`),\n+\tre(`-f(no-)?rtti`),\n \tre(`-f(no-)?split-stack`),\n \tre(`-f(no-)?stack-(.+)`),\n \tre(`-f(no-)?strict-aliasing`),\n \tre(`-fsanitize=(.+)`),\n \tre(`-g([^@\\-].*)?`),\n \tre(`-m(arch|cpu|fpu|tune)=([^@\\-].*)`),\n+\tre(`-m(no-)?avx[0-9a-z.]*`),\n+\tre(`-m(no-)?ms-bitfields`),\n \tre(`-m(no-)?stack-(.+)`),\n \tre(`-mmacosx-(.+)`),\n \tre(`-mnop-fun-dllimport`),\n+\tre(`-m(no-)?sse[0-9.]*`),\n+\tre(`-pedantic(-errors)?`),\n+\tre(`-pipe`),\n \tre(`-pthread`),\n-\tre(`-std=([^@\\-].*)`),\n+\tre(`-?-std=([^@\\-].*)`),\n \tre(`-x([^@\\-].*)`),\n }\n \n var validCompilerFlagsWithNextArg = []string{\n \t\"-D\",\n \t\"-I\",\n+\t\"-isystem\",\n \t\"-framework\",\n \t\"-x\",\n }\n@@ -79,23 +96,37 @@ var validLinkerFlags = []*regexp.Regexp{\n \tre(`-m(arch|cpu|fpu|tune)=([^@\\-].*)`),\n \tre(`-(pic|PIC|pie|PIE)`),\n \tre(`-pthread`),\n+\tre(`-?-static([-a-z0-9+]*)`),\n \n \t// Note that any wildcards in -Wl need to exclude comma,\n \t// since -Wl splits its argument at commas and passes\n \t// them all to the linker uninterpreted. Allowing comma\n \t// in a wildcard would allow tunnelling arbitrary additional\n \t// linker arguments through one of these.\n+\tre(`-Wl,--(no-)?as-needed`),\n+\tre(`-Wl,-Bdynamic`),\n+\tre(`-Wl,-Bstatic`),\n+\tre(`-Wl,--disable-new-dtags`),\n+\tre(`-Wl,--enable-new-dtags`),\n+\tre(`-Wl,--end-group`),\n+\tre(`-Wl,-framework,[^,@\\-][^,]+`),\n+\tre(`-Wl,-headerpad_max_install_names`),\n+\tre(`-Wl,--no-undefined`),\n \tre(`-Wl,-rpath,([^,@\\-][^,]+)`),\n+\tre(`-Wl,-search_paths_first`),\n+\tre(`-Wl,--start-group`),\n+\tre(`-Wl,-?-unresolved-symbols=[^,]+`),\n \tre(`-Wl,--(no-)?warn-([^,]+)`),\n \n-\tre(`[a-zA-Z0-9_].*\\.(o|obj|dll|dylib|so)`), // direct linker inputs: x.o or libfoo.so (but not -foo.o or @foo.o)\n+\tre(`[a-zA-Z0-9_/].*\\.(a|o|obj|dll|dylib|so)`), // direct linker inputs: x.o or libfoo.so (but not -foo.o or @foo.o)\n }\n \n var validLinkerFlagsWithNextArg = []string{\n \t\"-F\",\n \t\"-l\",\n \t\"-L\",\n \t\"-framework\",\n+\t\"-Wl,-framework\",\n }\n \n func checkCompilerFlags(name, source string, list []string) error {\n@@ -147,10 +178,21 @@ Args:\n \t\t\t\t\ti++\n \t\t\t\t\tcontinue Args\n \t\t\t\t}\n+\n+\t\t\t\t// Permit -Wl,-framework -Wl,name.\n+\t\t\t\tif i+1 < len(list) &&\n+\t\t\t\t\tstrings.HasPrefix(arg, \"-Wl,\") &&\n+\t\t\t\t\tstrings.HasPrefix(list[i+1], \"-Wl,\") &&\n+\t\t\t\t\tload.SafeArg(list[i+1][4:]) &&\n+\t\t\t\t\t!strings.Contains(list[i+1][4:], \",\") {\n+\t\t\t\t\ti++\n+\t\t\t\t\tcontinue Args\n+\t\t\t\t}\n+\n \t\t\t\tif i+1 < len(list) {\n-\t\t\t\t\treturn fmt.Errorf(\"invalid flag in %s: %s %s\", source, arg, list[i+1])\n+\t\t\t\t\treturn fmt.Errorf(\"invalid flag in %s: %s %s (see https://golang.org/s/invalidflag)\", source, arg, list[i+1])\n \t\t\t\t}\n-\t\t\t\treturn fmt.Errorf(\"invalid flag in %s: %s without argument\", source, arg)\n+\t\t\t\treturn fmt.Errorf(\"invalid flag in %s: %s without argument (see https://golang.org/s/invalidflag)\", source, arg)\n \t\t\t}\n \t\t}\n \tBad:"}, {"sha": "976501b81089069b9223811455362dbc9bcc53af", "filename": "libgo/go/cmd/go/internal/work/security_test.go", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/930540ca89c63a3b744e652af14f60169401c8df/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Fsecurity_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/930540ca89c63a3b744e652af14f60169401c8df/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Fsecurity_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Fsecurity_test.go?ref=930540ca89c63a3b744e652af14f60169401c8df", "patch": "@@ -132,6 +132,9 @@ var goodLinkerFlags = [][]string{\n \t{\"-l\", \"\u4e16\u754c\"},\n \t{\"-L\", \"framework\"},\n \t{\"-framework\", \"Chocolate\"},\n+\t{\"-Wl,-framework\", \"-Wl,Chocolate\"},\n+\t{\"-Wl,-framework,Chocolate\"},\n+\t{\"-Wl,-unresolved-symbols=ignore-all\"},\n }\n \n var badLinkerFlags = [][]string{\n@@ -185,6 +188,10 @@ var badLinkerFlags = [][]string{\n \t{\"-l\", \"-foo\"},\n \t{\"-framework\", \"-Caffeine\"},\n \t{\"-framework\", \"@Home\"},\n+\t{\"-Wl,-framework,-Caffeine\"},\n+\t{\"-Wl,-framework\", \"-Wl,@Home\"},\n+\t{\"-Wl,-framework\", \"@Home\"},\n+\t{\"-Wl,-framework,Chocolate,@Home\"},\n \t{\"-x\", \"--c\"},\n \t{\"-x\", \"@obj\"},\n \t{\"-Wl,-rpath,@foo\"},"}]}