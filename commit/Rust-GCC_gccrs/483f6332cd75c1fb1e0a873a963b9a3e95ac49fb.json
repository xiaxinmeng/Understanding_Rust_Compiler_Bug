{"sha": "483f6332cd75c1fb1e0a873a963b9a3e95ac49fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgzZjYzMzJjZDc1YzFmYjFlMGE4NzNhOTYzYjlhM2U5NWFjNDlmYg==", "commit": {"author": {"name": "Philip Blundell", "email": "pb@nexus.co.uk", "date": "1999-07-28T08:52:05Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-07-28T08:52:05Z"}, "message": "Patch from Phillip Blundell  <pb@nexus.co.uk>  to add arm/thumb uclinux support.\n\nFrom-SVN: r28312", "tree": {"sha": "a5ae5d2beeb1758dce7b13ba5eed55c2e8933d83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5ae5d2beeb1758dce7b13ba5eed55c2e8933d83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/comments", "author": null, "committer": null, "parents": [{"sha": "b7df86dc88edc01568f5d3f8a0559f7d4bc0278f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7df86dc88edc01568f5d3f8a0559f7d4bc0278f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7df86dc88edc01568f5d3f8a0559f7d4bc0278f"}], "stats": {"total": 471, "additions": 469, "deletions": 2}, "files": [{"sha": "8a1e081d74fa9472026f07e3e59a9aeca912f873", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=483f6332cd75c1fb1e0a873a963b9a3e95ac49fb", "patch": "@@ -1,3 +1,22 @@\n+1999-07-27  Philip Blundell  <pb@nexus.co.uk>\n+\n+\t* config/arm/telf.h: Include dbxelf.h.\n+ \t(CPP_PREDEFINES): Only define if not already defined.\n+\t(ASM_IDENTIFY_GCC): Likewise.\n+\t(SUBTARGET_EXTRA_SECTIONS): Likewise.\n+\t(SUBTARGET_EXTRA_SECTION_FUNCTIONS): Likewise.\n+\t* config/arm/thumb.h (LINK_SPEC): Only define if not already\n+\tdefined.\n+\t(DBX_DEBUGGING_INFO): Don't define.\n+\t* config/arm/linux-telf.h: New file.\n+\t* config/arm/linux-tgas.h: New file.\n+\t* config/arm/t-thumb-linux: New file.\n+\t* config/arm/uclinux-elf.h: New file.\n+\t* config/arm/uclinux-telf.h: New file.\n+\t* configure.in (arm-*-uclinux, thumb-*-linux-gnu,\n+\tthumb-*-uclinux): New targets.\n+\t* configure: Regenerate.\n+\n Tue Jul 27 23:20:21 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* pa.md (post_store, pre_load): New expanders."}, {"sha": "b6aca0b57b4c2bda0891d4fdcec9ef1dd2fb0f89", "filename": "gcc/config/arm/linux-telf.h", "status": "added", "additions": 207, "deletions": 0, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfig%2Farm%2Flinux-telf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfig%2Farm%2Flinux-telf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-telf.h?ref=483f6332cd75c1fb1e0a873a963b9a3e95ac49fb", "patch": "@@ -0,0 +1,207 @@\n+/* Definitions for Thumb running Linux-based GNU systems using ELF\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Contributed by Philip Blundell <philb@gnu.org>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* We have libgcc2.  */\n+#define HAVE_ATEXIT\n+\n+#define SUBTARGET_EXTRA_ASM_SPEC\t\\\n+\t\" %{fPIC:-k} %{fpic:-k}\"\n+\n+/* This was defined in linux.h.  Define it here also. */\n+#undef  DEFAULT_VTABLE_THUNKS\n+#define DEFAULT_VTABLE_THUNKS   1\n+\n+/* Handle #pragma weak and #pragma pack.  */\n+#define HANDLE_SYSV_PRAGMA\n+\n+/* Now we define the strings used to build the spec file.  */\n+#define LIB_SPEC \\\n+  \"%{shared: -lc} \\\n+   %{!shared: %{pthread:-lpthread} \\\n+\t%{profile:-lc_p} %{!profile: -lc}}\"\n+\n+/* Provide a STARTFILE_SPEC appropriate for GNU/Linux.  Here we add\n+   the GNU/Linux magical crtbegin.o file (see crtstuff.c) which\n+   provides part of the support for getting C++ file-scope static\n+   object constructed before entering `main'. */\n+   \n+#define STARTFILE_SPEC \\\n+  \"%{!shared: \\\n+     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} \\\n+\t\t       %{!p:%{profile:gcrt1.o%s} \\\n+\t\t\t %{!profile:crt1.o%s}}}} \\\n+   crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+\n+/* Provide a ENDFILE_SPEC appropriate for GNU/Linux.  Here we tack on\n+   the GNU/Linux magical crtend.o file (see crtstuff.c) which\n+   provides part of the support for getting C++ file-scope static\n+   object constructed before entering `main', followed by a normal\n+   GNU/Linux \"finalizer\" file, `crtn.o'.  */\n+\n+#define ENDFILE_SPEC \\\n+  \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n+\n+#define LINK_SPEC \"%{h*} %{version:-v} \\\n+   %{b} %{Wl,*:%*} \\\n+   %{static:-Bstatic} \\\n+   %{shared:-shared} \\\n+   %{symbolic:-Bsymbolic} \\\n+   %{rdynamic:-export-dynamic} \\\n+   %{!dynamic-linker:-dynamic-linker /lib/ld-linux.so.2} \\\n+   -X -mno-fpu -p \\\n+   %{mbig-endian:-EB} \\\n+   -m armelf_linux\"\n+\n+#define CPP_PREDEFINES \\\n+  \"-Dunix -Dthumb -D__thumb -Dlinux \\\n+-Asystem(unix) -Asystem(posix) -Acpu(arm) \\\n+-Amachine(arm) -D__ELF__\"\n+\n+/* Allow #sccs in preprocessor.  */\n+#define SCCS_DIRECTIVE\n+\n+#define USER_LABEL_PREFIX \t\"\"\t/* For ELF the default is no underscores */\n+#define LOCAL_LABEL_PREFIX \t\".\"\n+\n+/* Attach a special .ident directive to the end of the file to identify\n+   the version of GCC which compiled this code.  */\n+#define IDENT_ASM_OP \t\".ident\"\n+\n+/* Output #ident as a .ident.  */\n+#define ASM_OUTPUT_IDENT(FILE, NAME) \\\n+  fprintf (FILE, \"\\t%s\\t\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME);\n+  \n+#ifdef IDENTIFY_WITH_IDENT\n+#define ASM_IDENTIFY_GCC(FILE) /* nothing */\n+#define ASM_IDENTIFY_LANGUAGE(FILE)\t\t\t\\\n+ fprintf (FILE, \"\\t%s \\\"GCC (%s) %s\\\"\\n\", IDENT_ASM_OP,\t\\\n+\t lang_identify (), version_string)\n+#else\n+#define ASM_FILE_END(FILE)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t \t\t\t\\\n+      if (!flag_no_ident)\t\t\t\t\\\n+\tfprintf (FILE, \"\\t%s\\t\\\"GCC: (GNU) %s\\\"\\n\",\t\\\n+\t\t IDENT_ASM_OP, version_string);\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+#endif\n+\n+/* Support const sections and the ctors and dtors sections for g++.\n+   Note that there appears to be two different ways to support const\n+   sections at the moment.  You can either #define the symbol\n+   READONLY_DATA_SECTION (giving it some code which switches to the\n+   readonly data section) or else you can #define the symbols\n+   EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, SELECT_SECTION, and\n+   SELECT_RTX_SECTION.  We do both here just to be on the safe side.  */\n+#define USE_CONST_SECTION\t1\n+\n+/* Support for Constructors and Destructors.  */\n+#define READONLY_DATA_SECTION() const_section ()\n+\n+/* A default list of other sections which we might be \"in\" at any given\n+   time.  For targets that use additional sections (e.g. .tdesc) you\n+   should override this definition in the target-specific file which\n+   includes this file.  */\n+#define SUBTARGET_EXTRA_SECTIONS in_const,\n+\n+/* A default list of extra section function definitions.  For targets\n+   that use additional sections (e.g. .tdesc) you should override this\n+   definition in the target-specific file which includes this file.  */\n+#define SUBTARGET_EXTRA_SECTION_FUNCTIONS\tCONST_SECTION_FUNCTION\n+\n+extern void text_section ();\n+\n+#define CONST_SECTION_ASM_OP\t\".section\\t.rodata\"\n+\n+#define CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+const_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (!USE_CONST_SECTION)\t\t\t\t\t\t\\\n+    text_section ();\t\t\t\t\t\t\t\\\n+  else if (in_section != in_const)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\t\\\n+      in_section = in_const;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* A C statement or statements to switch to the appropriate\n+   section for output of DECL.  DECL is either a `VAR_DECL' node\n+   or a constant of some sort.  RELOC indicates whether forming\n+   the initial value of DECL requires link-time relocations.  */\n+#define SELECT_SECTION(DECL, RELOC)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (TREE_CODE (DECL) == STRING_CST)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (! flag_writable_strings)\t\t\t\t\t\\\n+\tconst_section ();\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tdata_section ();\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else if (TREE_CODE (DECL) == VAR_DECL)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if ((flag_pic && RELOC)\t\t\t\t\t\t\\\n+\t  || !TREE_READONLY (DECL) || TREE_SIDE_EFFECTS (DECL)\t\t\\\n+\t  || !DECL_INITIAL (DECL)\t\t\t\t\t\\\n+\t  || (DECL_INITIAL (DECL) != error_mark_node\t\t\t\\\n+\t      && !TREE_CONSTANT (DECL_INITIAL (DECL))))\t\t\t\\\n+\tdata_section ();\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tconst_section ();\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    const_section ();\t\t\t\t\t\t\t\\\n+}\n+\n+/* A C statement or statements to switch to the appropriate\n+   section for output of RTX in mode MODE.  RTX is some kind\n+   of constant in RTL.  The argument MODE is redundant except\n+   in the case of a `const_int' rtx.  Currently, these always\n+   go into the const section.  */\n+#define SELECT_RTX_SECTION(MODE, RTX) const_section ()\n+\n+/* On svr4, we *do* have support for the .init and .fini sections, and we\n+   can put stuff in there to be executed before and after `main'.  We let\n+   crtstuff.c and other files know this by defining the following symbols.\n+   The definitions say how to change sections to the .init and .fini\n+   sections.  This is the same for all known svr4 assemblers.  */\n+#define INIT_SECTION_ASM_OP\t\".section\\t.init\"\n+#define FINI_SECTION_ASM_OP\t\".section\\t.fini\"\n+\n+\n+/* This is how we tell the assembler that a symbol is weak.  */\n+#define ASM_WEAKEN_LABEL(FILE, NAME) \t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      fputs (\"\\t.weak\\t\", FILE);\t\t\\\n+      assemble_name (FILE, NAME); \t\t\\\n+      fputc ('\\n', FILE);\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+#include \"arm/telf.h\"\n+#include \"arm/linux-tgas.h\"\n+\n+/* Run-time Target Specification.  */\n+#undef TARGET_VERSION\n+#define TARGET_VERSION  fputs (\" (Thumb GNU/Linux)\", stderr);"}, {"sha": "5ca370a4021d34b0c1fea9ec8df6c6c79c93c851", "filename": "gcc/config/arm/linux-tgas.h", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfig%2Farm%2Flinux-tgas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfig%2Farm%2Flinux-tgas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-tgas.h?ref=483f6332cd75c1fb1e0a873a963b9a3e95ac49fb", "patch": "@@ -0,0 +1,84 @@\n+/* Definitions of target machine for GNU compiler.\n+   Thumb Linux-based GNU systems version.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Contributed by Russell King  <rmk92@ecs.soton.ac.uk>.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* We are using GAS, so stabs should work.  */\n+#ifndef DBX_DEBUGGING_INFO\n+#define DBX_DEBUGGING_INFO 1\n+#endif\n+\n+/* This is how we tell the assembler that a symbol is weak.\n+   GAS always supports weak symbols.  */\n+#define ASM_WEAKEN_LABEL(FILE, NAME) \t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      fputs (\"\\t.weak\\t\", FILE);\t\t\\\n+      assemble_name (FILE, NAME); \t\t\\\n+      fputc ('\\n', FILE);\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* This is used in ASM_FILE_START */\n+#undef  ARM_OS_NAME\n+#define ARM_OS_NAME \"Linux\"\n+\n+/* Unsigned chars produces much better code than signed.  */\n+#define DEFAULT_SIGNED_CHAR 0\n+\n+#undef  SUBTARGET_CPP_SPEC\n+#define SUBTARGET_CPP_SPEC  \"%{posix:-D_POSIX_SOURCE} %{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__}\"\n+\n+#undef  SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef  PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+#undef  WCHAR_TYPE\n+#define WCHAR_TYPE \"long int\"\n+\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+\n+/* Emit code to set up a trampoline and synchronise the caches.  */\n+#undef  INITIALIZE_TRAMPOLINE\n+#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 8)),\t\\\n+\t\t  CXT);\t\t\t\t\t\t\t\\\n+  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 12)),\t\\\n+\t\t  FNADDR);\t\t\t\t\t\t\\\n+  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__clear_cache\"),\t\\\n+\t\t     0, VOIDmode, 2, TRAMP, Pmode,\t\t\t\\\n+\t\t     plus_constant (TRAMP, TRAMPOLINE_SIZE), Pmode);\t\\\n+}\n+\n+#if 0\n+/* Clear the instruction cache from `beg' to `end'.  This makes an\n+   inline system call to SYS_cacheflush.  */\n+#define CLEAR_INSN_CACHE(BEG, END)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register unsigned long _beg __asm (\"a1\") = (unsigned long) (BEG);\t\\\n+  register unsigned long _end __asm (\"a2\") = (unsigned long) (END);\t\\\n+  register unsigned long _flg __asm (\"a3\") = 0;\t\t\t\t\\\n+  __asm __volatile (\"swi 0x9f0002\");\t\t\t\t\t\\\n+}\n+#endif"}, {"sha": "3cde74ccf97effa95075f6f1320f40f66ea5724d", "filename": "gcc/config/arm/t-thumb-linux", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfig%2Farm%2Ft-thumb-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfig%2Farm%2Ft-thumb-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-thumb-linux?ref=483f6332cd75c1fb1e0a873a963b9a3e95ac49fb", "patch": "@@ -0,0 +1,39 @@\n+# Just for these, we omit the frame pointer since it makes such a big\n+# difference.  It is then pointless adding debugging.\n+TARGET_LIBGCC2_CFLAGS = -fomit-frame-pointer -fPIC\n+LIBGCC2_DEBUG_CFLAGS = -g0\n+\n+# Don't build enquire\n+ENQUIRE=\n+\n+# Since libgcc1 is an assembler file, we can build it automatically for the\n+# cross-compiler.\n+CROSS_LIBGCC1 = libgcc1-asm.a\n+LIBGCC1 = libgcc1-asm.a\n+LIB1ASMSRC = arm/lib1thumb.asm\n+LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3  _dvmd_tls _call_via_rX _interwork_call_via_rX\n+\n+MULTILIB_OPTIONS     = mlittle-endian/mbig-endian\n+MULTILIB_DIRNAMES    = le be\n+MULTILIB_MATCHES     = mbig-endian=mbe mlittle-endian=mle\n+EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib\n+\n+LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\techo '#ifndef __ARMEB__' >> fp-bit.c\n+\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n+\techo '#endif' >> fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#ifndef __ARMEB__' > dp-bit.c\n+\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n+\techo '#define FLOAT_WORD_ORDER_MISMATCH' >> dp-bit.c\n+\techo '#endif' >> dp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n+"}, {"sha": "1ccf6b2b7af564d1b63ed3ff2ae34996416c436d", "filename": "gcc/config/arm/telf.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfig%2Farm%2Ftelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfig%2Farm%2Ftelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ftelf.h?ref=483f6332cd75c1fb1e0a873a963b9a3e95ac49fb", "patch": "@@ -21,7 +21,9 @@ Boston, MA 02111-1307, USA.  */\n \n #define OBJECT_FORMAT_ELF\n \n+#ifndef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-Dthumb -Dthumbelf -D__thumb -Acpu(arm) -Amachine(arm)\"\n+#endif\n \n #include \"arm/thumb.h\"\n \f\n@@ -45,6 +47,8 @@ extern int arm_structure_size_boundary;\n #define DWARF2_DEBUGGING_INFO\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n+/* Get the standard ELF stabs definitions.  */\n+#include \"dbxelf.h\"\n \f\n /* Note - it is important that these definitions match those in semi.h for the ARM port.  */\n #undef  LOCAL_LABEL_PREFIX\n@@ -54,8 +58,10 @@ extern int arm_structure_size_boundary;\n /* A C statement to output assembler commands which will identify the\n    object file as having been compiled with GNU CC (or another GNU\n    compiler).  */\n+#ifndef ASM_IDENTIFY_GCC\n #define ASM_IDENTIFY_GCC(STREAM)\t\t\t\t\\\n   fprintf (STREAM, \"%sgcc2_compiled.:\\n\", LOCAL_LABEL_PREFIX )\n+#endif\n \n #undef  ASM_FILE_START\n #define ASM_FILE_START(STREAM)\t\t\t\t\t\t\\\n@@ -189,7 +195,9 @@ extern int arm_structure_size_boundary;\n #undef  EXTRA_SECTIONS\n #define EXTRA_SECTIONS SUBTARGET_EXTRA_SECTIONS in_rdata, in_ctors, in_dtors\n \n+#ifndef SUBTARGET_EXTRA_SECTIONS\n #define SUBTARGET_EXTRA_SECTIONS\n+#endif\n \n /* A list of extra section function definitions.  */\n \n@@ -200,7 +208,9 @@ extern int arm_structure_size_boundary;\n   DTORS_SECTION_FUNCTION\t\\\n   SUBTARGET_EXTRA_SECTION_FUNCTIONS\n \n+#ifndef SUBTARGET_EXTRA_SECTION_FUNCTIONS\n #define SUBTARGET_EXTRA_SECTION_FUNCTIONS\n+#endif\n \n #define RDATA_SECTION_FUNCTION \\\n void\t\t\t\t\t\t\t\t\t\\"}, {"sha": "65d6d4ba9cc5276d371753ba173f578a8575b856", "filename": "gcc/config/arm/thumb.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfig%2Farm%2Fthumb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfig%2Farm%2Fthumb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb.h?ref=483f6332cd75c1fb1e0a873a963b9a3e95ac49fb", "patch": "@@ -50,7 +50,9 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n #define ASM_SPEC \"-marm7tdmi %{mthumb-interwork:-mthumb-interwork} %{mbig-endian:-EB}\"\n+#ifndef LINK_SPEC\n #define LINK_SPEC \"%{mbig-endian:-EB} -X\"\n+#endif\n \n #define TARGET_VERSION  fputs (\" (ARM/THUMB:generic)\", stderr);\n \n@@ -1238,8 +1240,6 @@ extern int making_const_table;\n \n /* Specific options for DBX Output */\n \n-#define DBX_DEBUGGING_INFO 1\n-\n #define DEFAULT_GDB_EXTENSIONS 1\n \n \f"}, {"sha": "ffa94ed5279fe32cd9e7c8e9ec305c6d5af9b5d4", "filename": "gcc/config/arm/uclinux-elf.h", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fuclinux-elf.h?ref=483f6332cd75c1fb1e0a873a963b9a3e95ac49fb", "patch": "@@ -0,0 +1,32 @@\n+/* Definitions for ARM running ucLinux using ELF\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Contributed by Philip Blundell <pb@nexus.co.uk>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"arm/linux-elf.h\"\n+\n+/* We don't want a PLT.  */\n+#undef  NEED_PLT_RELOC\n+#define NEED_PLT_RELOC 0\n+\n+#undef  TARGET_VERSION\n+#define TARGET_VERSION fputs (\" (ARM/ELF ucLinux)\", stderr);\n+\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT (ARM_FLAG_APCS_32 | ARM_FLAG_SHORT_BYTE | ARM_FLAG_SINGLE_PIC_BASE)"}, {"sha": "de2afdc6c9685f0da6e63611692ce96964ebacdc", "filename": "gcc/config/arm/uclinux-telf.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfig%2Farm%2Fuclinux-telf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfig%2Farm%2Fuclinux-telf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fuclinux-telf.h?ref=483f6332cd75c1fb1e0a873a963b9a3e95ac49fb", "patch": "@@ -0,0 +1,40 @@\n+/* Definitions for Thumb running ucLinux using ELF\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Contributed by Philip Blundell <pb@nexus.co.uk>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"arm/linux-telf.h\"\n+\n+#undef  TARGET_VERSION\n+#define TARGET_VERSION fputs (\" (Thumb/ELF ucLinux)\", stderr);\n+\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT (THUMB_FLAG_SINGLE_PIC_BASE)\n+\n+/* We don't want a PLT.  */\n+#undef  NEED_PLT_RELOC\n+#define NEED_PLT_RELOC 0\n+\n+/* On svr4, we *do* have support for the .init and .fini sections, and we\n+   can put stuff in there to be executed before and after `main'.  We let\n+   crtstuff.c and other files know this by defining the following symbols.\n+   The definitions say how to change sections to the .init and .fini\n+   sections.  This is the same for all known svr4 assemblers.  */\n+#define INIT_SECTION_ASM_OP\t\".section\\t.init\"\n+#define FINI_SECTION_ASM_OP\t\".section\\t.fini\""}, {"sha": "7912989511edba717d241a915f8957c9bdcc3789", "filename": "gcc/configure", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=483f6332cd75c1fb1e0a873a963b9a3e95ac49fb", "patch": "@@ -3203,6 +3203,10 @@ for machine in $build $host $target; do\n \t\t\t;;\n \t\tesac\n \t\t;;\n+\tarm*-*-uclinux*)\t\t# ARM ucLinux\n+\t\ttm_file=arm/uclinux-elf.h\n+\t\ttmake_file=arm/t-arm-elf\n+\t\t;;\n \tarm*-*-aout)\n \t\ttm_file=arm/aout.h\n \t\ttmake_file=arm/t-bare\n@@ -5601,6 +5605,20 @@ for machine in $build $host $target; do\n \t\tmd_file=arm/thumb.md\n \t\ttmake_file=arm/t-thumb-elf\n \t\t;;\n+\tthumb-*-linux-gnu*)\n+\t\ttm_file=arm/linux-telf.h\n+\t\tout_file=arm/thumb.c\n+\t\txm_file=arm/xm-thumb.h\n+\t\tmd_file=arm/thumb.md\n+\t\ttmake_file=arm/t-thumb-linux\n+\t\t;;\n+\tthumb-*-uclinux*)\n+\t\ttm_file=arm/uclinux-telf.h\n+\t\tout_file=arm/thumb.c\n+\t\tmd_file=arm/thumb.md\n+\t\ttmake_file=arm/t-thumb-linux\n+\t\txm_file=arm/xm-thumb.h\n+\t\t;;\n \tthumb-wrs-vxworks)\n \t\ttm_file=arm/tcoff.h\n \t\tout_file=arm/thumb.c"}, {"sha": "10166e2ba6fbb1134c842c65f3c6d8a900a55a0b", "filename": "gcc/configure.in", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483f6332cd75c1fb1e0a873a963b9a3e95ac49fb/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=483f6332cd75c1fb1e0a873a963b9a3e95ac49fb", "patch": "@@ -776,6 +776,10 @@ changequote([,])dnl\n \t\t\t;;\n \t\tesac\n \t\t;;\n+\tarm*-*-uclinux*)\t\t# ARM ucLinux\n+\t\ttm_file=arm/uclinux-elf.h\n+\t\ttmake_file=arm/t-arm-elf\n+\t\t;;\n \tarm*-*-aout)\n \t\ttm_file=arm/aout.h\n \t\ttmake_file=arm/t-bare\n@@ -3300,6 +3304,20 @@ changequote([,])dnl\n \t\tmd_file=arm/thumb.md\n \t\ttmake_file=arm/t-thumb-elf\n \t\t;;\n+\tthumb-*-linux-gnu*)\n+\t\ttm_file=arm/linux-telf.h\n+\t\tout_file=arm/thumb.c\n+\t\txm_file=arm/xm-thumb.h\n+\t\tmd_file=arm/thumb.md\n+\t\ttmake_file=arm/t-thumb-linux\n+\t\t;;\n+\tthumb-*-uclinux*)\n+\t\ttm_file=arm/uclinux-telf.h\n+\t\tout_file=arm/thumb.c\n+\t\tmd_file=arm/thumb.md\n+\t\ttmake_file=arm/t-thumb-linux\n+\t\txm_file=arm/xm-thumb.h\n+\t\t;;\n \tthumb-wrs-vxworks)\n \t\ttm_file=arm/tcoff.h\n \t\tout_file=arm/thumb.c"}]}