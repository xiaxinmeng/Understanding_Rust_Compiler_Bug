{"sha": "da72de4d8929608b064b486312ca8dd80cce47a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE3MmRlNGQ4OTI5NjA4YjA2NGI0ODYzMTJjYThkZDgwY2NlNDdhNA==", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "dkm@kataplop.net", "date": "2021-08-11T21:15:25Z"}, "committer": {"name": "Marc", "email": "dkm@kataplop.net", "date": "2021-08-12T09:17:58Z"}, "message": "Change name resolver's iterate_* functions to allow early exit\n\nThe callback now returns a bool for continuing the iteration (true) or stopping\nit (false).\nFixed the scanning for unused names without changing its behavior (always doing\nfull iteration).", "tree": {"sha": "decb6e01d0db2bb940bfc11fcf61e6de0fdf5eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/decb6e01d0db2bb940bfc11fcf61e6de0fdf5eb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da72de4d8929608b064b486312ca8dd80cce47a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da72de4d8929608b064b486312ca8dd80cce47a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da72de4d8929608b064b486312ca8dd80cce47a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da72de4d8929608b064b486312ca8dd80cce47a4/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0ba86c3bef853ff8a0c282c10c3e0cb1811a507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0ba86c3bef853ff8a0c282c10c3e0cb1811a507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0ba86c3bef853ff8a0c282c10c3e0cb1811a507"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "b8b50a0c07a92a3e4b7671fd08e6e6674d9f1535", "filename": "gcc/rust/resolve/rust-ast-resolve-unused.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da72de4d8929608b064b486312ca8dd80cce47a4/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da72de4d8929608b064b486312ca8dd80cce47a4/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h?ref=da72de4d8929608b064b486312ca8dd80cce47a4", "patch": "@@ -27,7 +27,7 @@ namespace Resolver {\n class ScanUnused\n {\n public:\n-  static void ScanRib (Rib *r)\n+  static bool ScanRib (Rib *r)\n   {\n     r->iterate_decls ([&] (NodeId decl_node_id, Location locus) -> bool {\n       CanonicalPath ident = CanonicalPath::create_empty ();\n@@ -43,14 +43,15 @@ class ScanUnused\n \t}\n       return true;\n     });\n+    return true;\n   }\n \n   static void Scan ()\n   {\n     auto resolver = Resolver::get ();\n-    resolver->iterate_name_ribs ([&] (Rib *r) -> void { ScanRib (r); });\n-    resolver->iterate_type_ribs ([&] (Rib *r) -> void { ScanRib (r); });\n-    resolver->iterate_label_ribs ([&] (Rib *r) -> void { ScanRib (r); });\n+    resolver->iterate_name_ribs ([&] (Rib *r) -> bool { return ScanRib (r); });\n+    resolver->iterate_type_ribs ([&] (Rib *r) -> bool { return ScanRib (r); });\n+    resolver->iterate_label_ribs ([&] (Rib *r) -> bool { return ScanRib (r); });\n   }\n };\n "}, {"sha": "6fac3d3cd016ce646bcc385d88a0fb8b0bd0613d", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da72de4d8929608b064b486312ca8dd80cce47a4/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da72de4d8929608b064b486312ca8dd80cce47a4/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=da72de4d8929608b064b486312ca8dd80cce47a4", "patch": "@@ -335,27 +335,30 @@ class Resolver\n     return it->second.size ();\n   }\n \n-  void iterate_name_ribs (std::function<void (Rib *)> cb)\n+  void iterate_name_ribs (std::function<bool (Rib *)> cb)\n   {\n     for (auto it = name_ribs.begin (); it != name_ribs.end (); it++)\n-      cb (it->second);\n+      if (!cb (it->second))\n+\tbreak;\n   }\n \n-  void iterate_type_ribs (std::function<void (Rib *)> cb)\n+  void iterate_type_ribs (std::function<bool (Rib *)> cb)\n   {\n     for (auto it = type_ribs.begin (); it != type_ribs.end (); it++)\n       {\n \tif (it->first == global_type_node_id)\n \t  continue;\n \n-\tcb (it->second);\n+\tif (!cb (it->second))\n+\t  break;\n       }\n   }\n \n-  void iterate_label_ribs (std::function<void (Rib *)> cb)\n+  void iterate_label_ribs (std::function<bool (Rib *)> cb)\n   {\n     for (auto it = label_ribs.begin (); it != label_ribs.end (); it++)\n-      cb (it->second);\n+      if (!cb (it->second))\n+\tbreak;\n   }\n \n private:"}]}