{"sha": "9ad19a66d751ab48515ef61f830e192ae4078b93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkMTlhNjZkNzUxYWI0ODUxNWVmNjFmODMwZTE5MmFlNDA3OGI5Mw==", "commit": {"author": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-07-06T06:14:59Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-07-14T06:16:56Z"}, "message": "Fortran  : Implicitly type parameter causes an invalid error PR96038\n\nIf a paramter to declared and initialised before its type is\ndeclared a bogus error is output at the type declaration\nidicating that initialisation is missing.\n\n2020-07-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n\ngcc/fortran/\n\n\tPR fortran/96038\n\t* decl.c (add_init_expr_sym):  For a symbol that is a\n\tparameter accept an initialisation if it does not have a\n\tvalue otherwise output a error and reject.\n\n2020-07-14  Mark Eggleston  <markeggleston@gcc.gnu.org>\n\ngcc/testsuite/\n\n\tPR fortran/96038\n\t* gfortran.dg/pr96038.f90: New test.", "tree": {"sha": "609958db50c9bfc59d705623e9e65e23cdaca652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/609958db50c9bfc59d705623e9e65e23cdaca652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ad19a66d751ab48515ef61f830e192ae4078b93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad19a66d751ab48515ef61f830e192ae4078b93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad19a66d751ab48515ef61f830e192ae4078b93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad19a66d751ab48515ef61f830e192ae4078b93/comments", "author": null, "committer": null, "parents": [{"sha": "ea69fcf9a036bbecd63c39f24b155b1c46953e0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea69fcf9a036bbecd63c39f24b155b1c46953e0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea69fcf9a036bbecd63c39f24b155b1c46953e0d"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "d854b2a0307733bc9ea5af01d239f2e97b1fa381", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad19a66d751ab48515ef61f830e192ae4078b93/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad19a66d751ab48515ef61f830e192ae4078b93/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=9ad19a66d751ab48515ef61f830e192ae4078b93", "patch": "@@ -1889,13 +1889,16 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp, locus *var_locus)\n \n   /* If this symbol is confirming an implicit parameter type,\n      then an initialization expression is not allowed.  */\n-  if (attr.flavor == FL_PARAMETER\n-      && sym->value != NULL\n-      && *initp != NULL)\n+  if (attr.flavor == FL_PARAMETER && sym->value != NULL)\n     {\n-      gfc_error (\"Initializer not allowed for PARAMETER %qs at %C\",\n-\t\t sym->name);\n-      return false;\n+      if (*initp != NULL)\n+\t{\n+\t  gfc_error (\"Initializer not allowed for PARAMETER %qs at %C\",\n+\t\t     sym->name);\n+\t  return false;\n+\t}\n+      else\n+\treturn true;\n     }\n \n   if (init == NULL)"}, {"sha": "f1098f33c1bb0a255131407cc0249e28c1adb431", "filename": "gcc/testsuite/gfortran.dg/pr96038.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad19a66d751ab48515ef61f830e192ae4078b93/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96038.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad19a66d751ab48515ef61f830e192ae4078b93/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96038.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96038.f90?ref=9ad19a66d751ab48515ef61f830e192ae4078b93", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do compile }\n+\n+function ifoo()\n+  parameter (n = 50)\n+  integer n\n+  ifoo = n\n+end\n+"}]}