{"sha": "d62f8f8dc77223ebe8623163b7e8bf818f49f037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYyZjhmOGRjNzcyMjNlYmU4NjIzMTYzYjdlOGJmODE4ZjQ5ZjAzNw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-02-11T06:48:53Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-02-11T06:48:53Z"}, "message": "2003-02-11  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/channels/DatagramChannel.java\n\t(write): Throws IOException.\n\t(connect): Throws IOException.\n\t(disconnect): Throws IOException.\n\t(read): Throws IOException.\n\t(receive): Throws IOException.\n\t(send): Throws IOException.\n\t* java/nio/channels/Pipe.java\n\t(open): Throws IOException.\n\t* java/nio/channels/SelectableChannel.java\n\t(configureBlocking): Throws IOException.\n\t* java/nio/channels/ServerSocketChannel.java\n\t(accept): Throws IOException.\n\t* java/nio/channels/SocketChannel.java\n\t(SocketChannel): Implements ByteChannel, ScatteringByteChannel,\n\tGatheringByteChannel.\n\t(read): Throws IOException.\n\t(write): Throws IOException.\n\t(finishConnect): Throws IOException.\n\t* java/nio/channels/spi/AbstractInterruptibleChannel.java\n\t(end): Throws AsynchronousCloseException.\n\t* java/nio/channels/spi/AbstractSelectableChannel.java\n\t(configureBlocking): Throws IOException.\n\t(implCloseChannel): Throws IOException.\n\t(implCloseSelectableChannel): Throws IOException.\n\t(implConfigureBlocking): Throws IOException.\n\t* java/nio/channels/spi/SelectorProvider.java\n\t(openDatagramChannel): Throws IOException.\n\t(openPipe): Throws IOException.\n\t(openSelector): Throws IOException.\n\t(openServerSocketChannel): Throws IOException.\n\t(openSocketChannel): Throws IOException.\n\nFrom-SVN: r62682", "tree": {"sha": "882970d5ce34ffb996f39f3ac4426c095669c176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/882970d5ce34ffb996f39f3ac4426c095669c176"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d62f8f8dc77223ebe8623163b7e8bf818f49f037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62f8f8dc77223ebe8623163b7e8bf818f49f037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d62f8f8dc77223ebe8623163b7e8bf818f49f037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62f8f8dc77223ebe8623163b7e8bf818f49f037/comments", "author": null, "committer": null, "parents": [{"sha": "e3b6a47f66e30920f97d8206c57bd881e3a175f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b6a47f66e30920f97d8206c57bd881e3a175f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b6a47f66e30920f97d8206c57bd881e3a175f7"}], "stats": {"total": 105, "additions": 78, "deletions": 27}, "files": [{"sha": "4cc93f3f7476c3bba708653f91c475434b333568", "filename": "libjava/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d62f8f8dc77223ebe8623163b7e8bf818f49f037", "patch": "@@ -1,3 +1,38 @@\n+2003-02-11  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/channels/DatagramChannel.java\n+\t(write): Throws IOException.\n+\t(connect): Throws IOException.\n+\t(disconnect): Throws IOException.\n+\t(read): Throws IOException.\n+\t(receive): Throws IOException.\n+\t(send): Throws IOException.\n+\t* java/nio/channels/Pipe.java\n+\t(open): Throws IOException.\n+\t* java/nio/channels/SelectableChannel.java\n+\t(configureBlocking): Throws IOException.\n+\t* java/nio/channels/ServerSocketChannel.java\n+\t(accept): Throws IOException.\n+\t* java/nio/channels/SocketChannel.java\n+\t(SocketChannel): Implements ByteChannel, ScatteringByteChannel,\n+\tGatheringByteChannel.\n+\t(read): Throws IOException.\n+\t(write): Throws IOException.\n+\t(finishConnect): Throws IOException.\n+\t* java/nio/channels/spi/AbstractInterruptibleChannel.java\n+\t(end): Throws AsynchronousCloseException.\n+\t* java/nio/channels/spi/AbstractSelectableChannel.java\n+\t(configureBlocking): Throws IOException.\n+\t(implCloseChannel): Throws IOException.\n+\t(implCloseSelectableChannel): Throws IOException.\n+\t(implConfigureBlocking): Throws IOException.\n+\t* java/nio/channels/spi/SelectorProvider.java\n+\t(openDatagramChannel): Throws IOException.\n+\t(openPipe): Throws IOException.\n+\t(openSelector): Throws IOException.\n+\t(openServerSocketChannel): Throws IOException.\n+\t(openSocketChannel): Throws IOException.\n+\n 2003-02-11  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/nio/FileLockImpl.java,"}, {"sha": "4a7ac9825f74346a23396b070d1c4b55ea8312dc", "filename": "libjava/java/nio/channels/DatagramChannel.java", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2Fjava%2Fnio%2Fchannels%2FDatagramChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2Fjava%2Fnio%2Fchannels%2FDatagramChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FDatagramChannel.java?ref=d62f8f8dc77223ebe8623163b7e8bf818f49f037", "patch": "@@ -88,7 +88,7 @@ public final long read (ByteBuffer[] dsts) throws IOException\n    * @exception IOException If an error occurs\n    * @exception NotYetConnectedException The channel's socket is not connected.\n    */\n-  public final long write (ByteBuffer[] srcs)\n+  public final long write (ByteBuffer[] srcs) throws IOException\n   {\n     long b = 0;\n     \n@@ -111,14 +111,15 @@ public final long write (ByteBuffer[] srcs)\n    * @exception SecurityException If a security manager has been installed and\n    * it does not permit datagrams to be sent to the given address.\n    */\n-  public abstract DatagramChannel connect (SocketAddress remote);\n+  public abstract DatagramChannel connect (SocketAddress remote)\n+    throws IOException;\n \n   /**\n    * Disonnects this channel's socket.\n    *\n    * @exception IOException If an error occurs\n    */\n-  public abstract DatagramChannel disconnect ();\n+  public abstract DatagramChannel disconnect () throws IOException;\n \n   /**\n    * Tells whether or not this channel's socket is connected.\n@@ -131,15 +132,16 @@ public final long write (ByteBuffer[] srcs)\n   /**\n    * Reads data from this channel.\n    */\n-  public abstract int read (ByteBuffer dst);\n+  public abstract int read (ByteBuffer dst) throws IOException;\n   \n   /**\n    * Reads data from this channel.\n    *\n    * @exception IOException If an error occurs.\n    * @exception NotYetConnectedException The channel's socket is not connected.\n    */\n-  public abstract long read (ByteBuffer[] dsts, int offset, int length);\n+  public abstract long read (ByteBuffer[] dsts, int offset, int length)\n+    throws IOException;\n  \n   /**\n    * Receives a datagram via this channel.\n@@ -154,7 +156,7 @@ public final long write (ByteBuffer[] srcs)\n    * @exception SecurityException If a security manager has been installed and\n    * it does not permit datagrams to be sent to the given address.\n    */\n-  public abstract SocketAddress receive (ByteBuffer dst);\n+  public abstract SocketAddress receive (ByteBuffer dst) throws IOException;\n  \n   /**\n    * Sends a datagram via this channel.\n@@ -169,7 +171,8 @@ public final long write (ByteBuffer[] srcs)\n    * @exception SecurityException If a security manager has been installed and\n    * it does not permit datagrams to be sent to the given address.\n    */\n-  public abstract int send (ByteBuffer src, SocketAddress target);\n+  public abstract int send (ByteBuffer src, SocketAddress target)\n+    throws IOException;\n  \n   /**\n    * Retrieves the channel's socket.\n@@ -182,15 +185,16 @@ public final long write (ByteBuffer[] srcs)\n    * @exception IOException If an error occurs.\n    * @exception NotYetConnectedException The channel's socket is not connected.\n    */\n-  public abstract int write (ByteBuffer src);\n+  public abstract int write (ByteBuffer src) throws IOException;\n   \n   /**\n    * Writes data to this channel.\n    *\n    * @exception IOException If an error occurs.\n    * @exception NotYetConnectedException The channel's socket is not connected.\n    */\n-  public abstract long write (ByteBuffer[] srcs, int offset, int length);\n+  public abstract long write (ByteBuffer[] srcs, int offset, int length)\n+    throws IOException;\n \n   /**\n    * Retrieves the valid operations for this channel."}, {"sha": "939d7b52ad2671cd9ebe20e4b73ec828aadd4672", "filename": "libjava/java/nio/channels/Pipe.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2Fjava%2Fnio%2Fchannels%2FPipe.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2Fjava%2Fnio%2Fchannels%2FPipe.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FPipe.java?ref=d62f8f8dc77223ebe8623163b7e8bf818f49f037", "patch": "@@ -37,6 +37,7 @@\n \n package java.nio.channels;\n \n+import java.io.IOException;\n import java.nio.channels.spi.AbstractSelectableChannel;\n import java.nio.channels.spi.SelectorProvider;\n \n@@ -104,7 +105,7 @@ protected Pipe()\n    * \n    * @exception IOException If an error occurs\n    */\n-  public static Pipe open()\n+  public static Pipe open() throws IOException\n   {\n     return SelectorProvider.provider ().openPipe();\n   }"}, {"sha": "72abac896541994055371877de067f8dd1c82e61", "filename": "libjava/java/nio/channels/SelectableChannel.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2Fjava%2Fnio%2Fchannels%2FSelectableChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2Fjava%2Fnio%2Fchannels%2FSelectableChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FSelectableChannel.java?ref=d62f8f8dc77223ebe8623163b7e8bf818f49f037", "patch": "@@ -37,6 +37,7 @@\n \n package java.nio.channels;\n \n+import java.io.IOException;\n import java.nio.channels.spi.AbstractInterruptibleChannel;\n import java.nio.channels.spi.SelectorProvider;\n \n@@ -67,7 +68,8 @@ protected SelectableChannel ()\n    * is registered with one or more selectors.\n    * @exception IOException If an error occurs.\n    */\n-  public abstract SelectableChannel configureBlocking (boolean block);\n+  public abstract SelectableChannel configureBlocking (boolean block)\n+    throws IOException;\n   \n   /**\n    * Tells whether this channel is blocking or not."}, {"sha": "e41af212623ef2587bdd0b0cb1b9c1af5c11feb9", "filename": "libjava/java/nio/channels/ServerSocketChannel.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2Fjava%2Fnio%2Fchannels%2FServerSocketChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2Fjava%2Fnio%2Fchannels%2FServerSocketChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FServerSocketChannel.java?ref=d62f8f8dc77223ebe8623163b7e8bf818f49f037", "patch": "@@ -73,7 +73,7 @@ public ServerSocketChannel (SelectorProvider provider)\n    * @exception SecurityException If a security manager has been installed and\n    * it does not permit access to the remote endpoint of the new connection.\n    */\n-  public abstract SocketChannel accept ();\n+  public abstract SocketChannel accept () throws IOException;\n   \n   /**\n    * Retrieves the channels socket."}, {"sha": "c22eb1d1945ea94e1104970095ff8bcd337bad20", "filename": "libjava/java/nio/channels/SocketChannel.java", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2Fjava%2Fnio%2Fchannels%2FSocketChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2Fjava%2Fnio%2Fchannels%2FSocketChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FSocketChannel.java?ref=d62f8f8dc77223ebe8623163b7e8bf818f49f037", "patch": "@@ -49,6 +49,7 @@\n  * @since 1.4\n  */\n abstract public class SocketChannel extends AbstractSelectableChannel\n+  implements ByteChannel, ScatteringByteChannel, GatheringByteChannel\n {\n   /**\n    * Initializes this socket.\n@@ -100,7 +101,7 @@ public static SocketChannel open (SocketAddress remote) throws IOException\n    * @exception IOException If an error occurs\n    * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n-  public final long read (ByteBuffer[] dsts)\n+  public final long read (ByteBuffer[] dsts) throws IOException\n   {\n     long b = 0;\n     \n@@ -118,7 +119,7 @@ public final long read (ByteBuffer[] dsts)\n    * @exception IOException If an error occurs\n    * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n-  public final long write (ByteBuffer[] dsts)\n+  public final long write (ByteBuffer[] dsts) throws IOException\n   {\n     long b = 0;\n \n@@ -144,7 +145,7 @@ public final int validOps ()\n    * @exception IOException If an error occurs\n    * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n-  public abstract int read (ByteBuffer dst);\n+  public abstract int read (ByteBuffer dst) throws IOException;\n \n   /**\n    * Connects the channel's socket to the remote address.\n@@ -179,7 +180,7 @@ public final int validOps ()\n    * @exception NoConnectionPendingException If this channel is not connected\n    * and a connection operation has not been initiated.\n    */\n-  public abstract boolean finishConnect ();\n+  public abstract boolean finishConnect () throws IOException;\n  \n   /**\n    * Tells whether or not the channel's socket is connected.\n@@ -197,7 +198,8 @@ public final int validOps ()\n    * @exception IOException If an error occurs\n    * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n-  public abstract long read (ByteBuffer[] dsts, int offset, int length);\n+  public abstract long read (ByteBuffer[] dsts, int offset, int length)\n+    throws IOException;\n  \n   /**\n    * Retrieves the channel's socket.\n@@ -210,13 +212,14 @@ public final int validOps ()\n    * @exception IOException If an error occurs\n    * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n-  public abstract int write (ByteBuffer src);\n+  public abstract int write (ByteBuffer src) throws IOException;\n   \n   /**\n    * Writes data to the channel.\n    *\n    * @exception IOException If an error occurs\n    * @exception NotYetConnectedException If this channel is not yet connected.\n    */\n-  public abstract long write (ByteBuffer[] srcs, int offset, int length);\n+  public abstract long write (ByteBuffer[] srcs, int offset, int length)\n+    throws IOException;\n }"}, {"sha": "dd4177a8a0129ecb4633c1f52b2e61ef6c9b3ff3", "filename": "libjava/java/nio/channels/spi/AbstractInterruptibleChannel.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractInterruptibleChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractInterruptibleChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractInterruptibleChannel.java?ref=d62f8f8dc77223ebe8623163b7e8bf818f49f037", "patch": "@@ -38,6 +38,7 @@\n package java.nio.channels.spi;\n \n import java.io.IOException;\n+import java.nio.channels.AsynchronousCloseException;\n import java.nio.channels.Channel;\n import java.nio.channels.InterruptibleChannel;\n \n@@ -84,6 +85,7 @@ public final void close () throws IOException\n    * I/O operation was interrupted.\n    */\n   protected final void end (boolean completed)\n+    throws AsynchronousCloseException\n   {\n   }   \n "}, {"sha": "b13bb4af24fe0f1c0918fd9d04f8776f0ba374be", "filename": "libjava/java/nio/channels/spi/AbstractSelectableChannel.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java?ref=d62f8f8dc77223ebe8623163b7e8bf818f49f037", "patch": "@@ -75,6 +75,7 @@ public final Object blockingLock ()\n    * Adjusts this channel's blocking mode.\n    */\n   public final SelectableChannel configureBlocking (boolean block)\n+    throws IOException\n   {\n     synchronized (LOCK)\n       {\n@@ -90,20 +91,21 @@ public final SelectableChannel configureBlocking (boolean block)\n    *\n    * @exception IOException If an error occurs\n    */\n-  protected final void implCloseChannel ()\n+  protected final void implCloseChannel () throws IOException\n   {\n     implCloseSelectableChannel ();\n   }\n \n   /**\n    * Closes this selectable channel.\n    */\n-  protected abstract void implCloseSelectableChannel ();\n+  protected abstract void implCloseSelectableChannel () throws IOException;\n   \n   /**\n    * Adjusts this channel's blocking mode.\n    */\n-  protected abstract void implConfigureBlocking (boolean block);\n+  protected abstract void implConfigureBlocking (boolean block)\n+    throws IOException;\n \n   /**\n    * Tells whether or not every I/O operation on this channel will block"}, {"sha": "157a341946773c86206faaf152f43e1832bb4c08", "filename": "libjava/java/nio/channels/spi/SelectorProvider.java", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FSelectorProvider.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62f8f8dc77223ebe8623163b7e8bf818f49f037/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FSelectorProvider.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FSelectorProvider.java?ref=d62f8f8dc77223ebe8623163b7e8bf818f49f037", "patch": "@@ -38,6 +38,7 @@\n package java.nio.channels.spi;\n \n /* import gnu.java.nio.channels.SelectorProviderImpl; */\n+import java.io.IOException;\n import java.nio.channels.DatagramChannel;\n import java.nio.channels.Pipe;\n import java.nio.channels.ServerSocketChannel;\n@@ -67,27 +68,28 @@ protected SelectorProvider ()\n   /**\n    * Opens a datagram channel.\n    */\n-  public abstract DatagramChannel openDatagramChannel ();\n+  public abstract DatagramChannel openDatagramChannel () throws IOException;\n   \n   /**\n    * Opens a pipe.\n    */\n-  public abstract Pipe openPipe ();\n+  public abstract Pipe openPipe () throws IOException;\n   \n   /**\n    * Opens a selector.\n    */\n-  public abstract AbstractSelector openSelector ();\n+  public abstract AbstractSelector openSelector () throws IOException;\n   \n   /**\n    * Opens a server socket channel.\n    */\n-  public abstract ServerSocketChannel openServerSocketChannel ();\n+  public abstract ServerSocketChannel openServerSocketChannel ()\n+    throws IOException;\n   \n   /**\n    * Opens a socket channel.\n    */\n-  public abstract SocketChannel openSocketChannel ();\n+  public abstract SocketChannel openSocketChannel () throws IOException;\n     \n   /**\n    * Returns the system-wide default selector provider for this invocation"}]}