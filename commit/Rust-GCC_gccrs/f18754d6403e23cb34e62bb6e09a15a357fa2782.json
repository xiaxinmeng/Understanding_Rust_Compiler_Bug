{"sha": "f18754d6403e23cb34e62bb6e09a15a357fa2782", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE4NzU0ZDY0MDNlMjNjYjM0ZTYyYmI2ZTA5YTE1YTM1N2ZhMjc4Mg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-25T20:43:11Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-25T20:43:11Z"}, "message": "c-opts.c (complain_wrong_lang, [...]): Remove.\n\n\t* c-opts.c (complain_wrong_lang, write_langs): Remove.\n\t(c_common_handle_option): Complaints about wrong language are\n\thandled in opts.c now.\n\t* opts.c (complain_wrong_lang, write_langs, handle_options): New.\n\t(find_opt): Fix thinko.\n\t(handle_option): Update prototype.  Complain about switches for\n\ta different front end.\n\t* opts.h (lang_names, handle_options): New.\n\t(handle_option): Remove.\n\t* opts.sh: Write out language names array.\n\t* toplev.c (parse_options_and_default_flags): Use handle_options.\n\nFrom-SVN: r68495", "tree": {"sha": "25f8abe318d6c95cb74e8c8f0c6880e9b296e4bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25f8abe318d6c95cb74e8c8f0c6880e9b296e4bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f18754d6403e23cb34e62bb6e09a15a357fa2782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18754d6403e23cb34e62bb6e09a15a357fa2782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18754d6403e23cb34e62bb6e09a15a357fa2782", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18754d6403e23cb34e62bb6e09a15a357fa2782/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37f2200463a45c51ccb631f74439475b135907cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37f2200463a45c51ccb631f74439475b135907cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37f2200463a45c51ccb631f74439475b135907cf"}], "stats": {"total": 255, "additions": 114, "deletions": 141}, "files": [{"sha": "fdf4f96201cf945632254e225c38bd66c564fcc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18754d6403e23cb34e62bb6e09a15a357fa2782/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18754d6403e23cb34e62bb6e09a15a357fa2782/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f18754d6403e23cb34e62bb6e09a15a357fa2782", "patch": "@@ -1,3 +1,17 @@\n+2003-06-25  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-opts.c (complain_wrong_lang, write_langs): Remove.\n+\t(c_common_handle_option): Complaints about wrong language are\n+\thandled in opts.c now.\n+\t* opts.c (complain_wrong_lang, write_langs, handle_options): New.\n+\t(find_opt): Fix thinko.\n+\t(handle_option): Update prototype.  Complain about switches for\n+\ta different front end.\n+\t* opts.h (lang_names, handle_options): New.\n+\t(handle_option): Remove.\n+\t* opts.sh: Write out language names array.\n+\t* toplev.c (parse_options_and_default_flags): Use handle_options.\n+\n 2003-06-25  H.J. Lu <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (MASK_SSE1): Removed."}, {"sha": "7febbf315a1482f864154837187bd5d2be01e3c9", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18754d6403e23cb34e62bb6e09a15a357fa2782/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18754d6403e23cb34e62bb6e09a15a357fa2782/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=f18754d6403e23cb34e62bb6e09a15a357fa2782", "patch": "@@ -102,8 +102,6 @@ static size_t include_cursor;\n \n static void missing_arg (enum opt_code);\n static void set_Wimplicit (int);\n-static void complain_wrong_lang (size_t, int);\n-static void write_langs (char *, int);\n static void print_help (void);\n static void handle_OPT_d (const char *);\n static void set_std_cxx98 (int);\n@@ -245,7 +243,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n {\n   const struct cl_option *option = &cl_options[scode];\n   enum opt_code code = (enum opt_code) scode;\n-  int result = 1, lang_mask;\n+  int result = 1;\n \n   if (code == N_OPTS)\n     {\n@@ -259,13 +257,6 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       return 1;\n     }\n \n-  lang_mask = lang_flags[(c_language << 1) + flag_objc];\n-  if (!(option->flags & lang_mask))\n-    {\n-      complain_wrong_lang (code, value);\n-      return 1;\n-    }\n-\n   if (arg == NULL && (option->flags & (CL_JOINED | CL_SEPARATE)))\n     {\n       missing_arg (code);\n@@ -1511,42 +1502,6 @@ handle_OPT_d (const char *arg)\n       }\n }\n \n-/* Write a slash-separated list of languages in FLAGS to BUF.  */\n-static void\n-write_langs (char *buf, int flags)\n-{\n-  *buf = '\\0';\n-  if (flags & CL_C)\n-    strcat (buf, \"C\");\n-  if (flags & CL_ObjC)\n-    {\n-      if (*buf)\n-\tstrcat (buf, \"/\");\n-      strcat (buf, \"ObjC\");\n-    }\n-  if (flags & CL_CXX)\n-    {\n-      if (*buf)\n-\tstrcat (buf, \"/\");\n-      strcat (buf, \"C++\");\n-    }\n-}\n-\n-/* Complain that switch OPT_INDEX does not apply to this front end.  */\n-static void\n-complain_wrong_lang (size_t opt_index, int on)\n-{\n-  char ok_langs[60], bad_langs[60];\n-  int ok_flags = cl_options[opt_index].flags;\n-\n-  write_langs (ok_langs, ok_flags);\n-  write_langs (bad_langs, ~ok_flags);\n-  /* Eventually this should become a hard error.  */\n-  warning (\"\\\"-%c%s%s\\\" is valid for %s but not for %s\",\n-\t   cl_options[opt_index].opt_text[0], on ? \"\" : \"no-\",\n-\t   cl_options[opt_index].opt_text + 1, ok_langs, bad_langs);\n-}\n-\n /* Handle --help output.  */\n static void\n print_help (void)"}, {"sha": "2a805957abff01e9814deef49bdb891db81bbb08", "filename": "gcc/opts.c", "status": "modified", "additions": 86, "deletions": 6, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18754d6403e23cb34e62bb6e09a15a357fa2782/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18754d6403e23cb34e62bb6e09a15a357fa2782/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=f18754d6403e23cb34e62bb6e09a15a357fa2782", "patch": "@@ -129,6 +129,10 @@ static size_t find_opt (const char *, int);\n static int common_handle_option (size_t scode, const char *arg, int value);\n static void handle_param (const char *);\n static void set_Wextra (int);\n+static unsigned int handle_option (char **argv, unsigned int lang_mask);\n+static char *write_langs (unsigned int lang_mask);\n+static void complain_wrong_lang (const char *, const struct cl_option *,\n+\t\t\t\t unsigned int lang_mask);\n \n /* Perform a binary search to find which option the command-line INPUT\n    matches.  Returns its index in the option array, and N_OPTS\n@@ -200,7 +204,7 @@ find_opt (const char *input, int lang_mask)\n \n \t  /* If we haven't remembered a prior match, remember this\n \t     one.  Any prior match is necessarily better.  */\n-\t  if (match_wrong_lang != cl_options_count)\n+\t  if (match_wrong_lang == cl_options_count)\n \t    match_wrong_lang = mn;\n \t}\n \n@@ -230,15 +234,62 @@ integral_argument (const char *arg)\n   return -1;\n }\n \n-/* Handle the switch beginning at ARGV, with ARGC remaining.  */\n-int\n-handle_option (int argc ATTRIBUTE_UNUSED, char **argv, int lang_mask)\n+/* Return a malloced slash-separated list of languages in MASK.  */\n+static char *\n+write_langs (unsigned int mask)\n+{\n+  unsigned int n = 0, len = 0;\n+  const char *lang_name;\n+  char *result;\n+\n+  for (n = 0; (lang_name = lang_names[n]) != 0; n++)\n+    if (mask & (1U << n))\n+      len += strlen (lang_name) + 1;\n+\n+  result = xmalloc (len);\n+  len = 0;\n+  for (n = 0; (lang_name = lang_names[n]) != 0; n++)\n+    if (mask & (1U << n))\n+      {\n+\tif (len)\n+\t  result[len++] = '/';\n+\tstrcpy (result + len, lang_name);\n+\tlen += strlen (lang_name);\n+      }\n+\n+  result[len] = 0;\n+\n+  return result;\n+}\n+\n+/* Complain that switch OPT_INDEX does not apply to this front end.  */\n+static void\n+complain_wrong_lang (const char *text, const struct cl_option *option,\n+\t\t     unsigned int lang_mask)\n+{\n+  char *ok_langs, *bad_lang;\n+\n+  ok_langs = write_langs (option->flags);\n+  bad_lang = write_langs (lang_mask);\n+\n+  /* Eventually this should become a hard error IMO.  */\n+  warning (\"command line option \\\"%s\\\" is valid for %s but not for %s\",\n+\t   text, ok_langs, bad_lang);\n+\n+  free (ok_langs);\n+  free (bad_lang);\n+}\n+\n+/* Handle the switch beginning at ARGV for the language indicated by\n+   LANG_MASK.  Returns the number of switches consumed.  */\n+static unsigned int\n+handle_option (char **argv, unsigned int lang_mask)\n {\n   size_t opt_index;\n   const char *opt, *arg = 0;\n   char *dup = 0;\n   int value = 1;\n-  int result = 0;\n+  unsigned int result = 0;\n   const struct cl_option *option;\n \n   opt = argv[0];\n@@ -273,7 +324,8 @@ handle_option (int argc ATTRIBUTE_UNUSED, char **argv, int lang_mask)\n \n       option = &cl_options[opt_index];\n \n-      /* Reject negative form of switches that don't take negatives.  */\n+      /* Reject negative form of switches that don't take negatives as\n+\t unrecognized.  */\n       if (!value && (option->flags & CL_REJECT_NEGATIVE))\n \tgoto done;\n \n@@ -308,6 +360,14 @@ handle_option (int argc ATTRIBUTE_UNUSED, char **argv, int lang_mask)\n \t  result = 2;\n \t}\n \n+      /* Now we've swallowed any potential argument, complain if this\n+\t is a switch for a different front end.  */\n+      if (!(option->flags & (lang_mask | CL_COMMON)))\n+\t{\n+\t  complain_wrong_lang (argv[0], option, lang_mask);\n+\t  goto done;\n+\t}\n+\n       /* If the switch takes an integer, convert it.  */\n       if (arg && (option->flags & CL_UINTEGER))\n \t{\n@@ -335,6 +395,26 @@ handle_option (int argc ATTRIBUTE_UNUSED, char **argv, int lang_mask)\n   return result;\n }\n \n+/* Decode and handle the vector of command line options.  LANG_MASK\n+   contains has a single bit set representing the current\n+   language.  */\n+void\n+handle_options (unsigned int argc, char **argv, unsigned int lang_mask)\n+{\n+  unsigned int n, i;\n+\n+  for (i = 1; i < argc; i += n)\n+    {\n+      n = handle_option (argv + i, lang_mask);\n+\n+      if (!n)\n+\t{\n+\t  n = 1;\n+\t  error (\"unrecognized command line option \\\"%s\\\"\", argv[i]);\n+\t}\n+    }\n+}\n+\n /* Handle target- and language-independent options.  Return zero to\n    generate an \"unknown option\" message.  */\n static int"}, {"sha": "4ee3ffe37e891c88822b0fc27da92a96ebb1d3c2", "filename": "gcc/opts.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18754d6403e23cb34e62bb6e09a15a357fa2782/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18754d6403e23cb34e62bb6e09a15a357fa2782/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=f18754d6403e23cb34e62bb6e09a15a357fa2782", "patch": "@@ -21,7 +21,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_OPTS_H\n #define GCC_OPTS_H\n \n-extern int handle_option (int argc, char **argv, int lang_mask);\n+extern void handle_options (unsigned int argc, char **argv,\n+\t\t\t    unsigned int lang_mask);\n \n struct cl_option\n {\n@@ -33,6 +34,7 @@ struct cl_option\n \n extern const struct cl_option cl_options[];\n extern const unsigned int cl_options_count;\n+extern const char *const lang_names[];\n \n #define CL_JOINED\t\t(1 << 24) /* If takes joined argument.  */\n #define CL_SEPARATE\t\t(1 << 25) /* If takes a separate argument.  */"}, {"sha": "2770f080ba0e6944c2b235076ebb0db2644bbaaf", "filename": "gcc/opts.sh", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18754d6403e23cb34e62bb6e09a15a357fa2782/gcc%2Fopts.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18754d6403e23cb34e62bb6e09a15a357fa2782/gcc%2Fopts.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.sh?ref=f18754d6403e23cb34e62bb6e09a15a357fa2782", "patch": "@@ -85,21 +85,26 @@ ${AWK} '\n \th_file = \"'${H_FILE}'\"\n \tcomma = \",\"\n \n+\tprint \"/* This file is auto-generated by opts.sh.  */\\n\" > c_file\n+\tprint \"#include \\\"\" h_file \"\\\"\"\t\t\t>> c_file\n+\tprint \"#include \\\"opts.h\\\"\\n\"\t\t\t>> c_file\n+\tprint \"const char * const lang_names[] =\\n{\"\t>> c_file\n+\n \tprint \"/* This file is auto-generated by opts.sh.  */\\n\" > h_file\n \tfor (i = 0; i < n_langs; i++) {\n \t    macros[i] = \"CL_\" langs[i]\n \t    gsub( \"[^A-Za-z0-9_]\", \"X\", macros[i] )\n \t    s = substr(\"         \", length (macros[i]))\n \t    print \"#define \" macros[i] s \" (1 << \" i \")\" >> h_file\n+\t    print \"  \\\"\" langs[i] \"\\\",\"\t\t\t>> c_file\n \t}\n-\tprint \"\\nenum opt_code\\n{\"\t\t\t>> h_file\n \n-\tprint \"/* This file is auto-generated by opts.sh.  */\\n\" > c_file\n-\tprint \"#include \\\"\" h_file \"\\\"\"\t\t\t>> c_file\n-\tprint \"#include \\\"opts.h\\\"\\n\"\t\t\t>> c_file\n+\tprint \"  0\\n};\\n\"\t\t\t\t>> c_file\n \tprint \"const unsigned int cl_options_count = N_OPTS;\\n\" >> c_file\n \tprint \"const struct cl_option cl_options[] =\\n{\" >> c_file\n \n+\tprint \"\\nenum opt_code\\n{\"\t\t\t>> h_file\n+\n \tfor (i = 0; i < n_opts; i++)\n \t    back_chain[i] = \"N_OPTS\";\n "}, {"sha": "eea60ebc256a168aadd8d2326c38ecdcd160b268", "filename": "gcc/testsuite/g++.old-deja/g++.law/memoized1.C", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37f2200463a45c51ccb631f74439475b135907cf/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fmemoized1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37f2200463a45c51ccb631f74439475b135907cf/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fmemoized1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fmemoized1.C?ref=37f2200463a45c51ccb631f74439475b135907cf", "patch": "@@ -1,28 +0,0 @@\n-// { dg-do assemble  }\n-// { dg-options \"-fsave-memoized\" }\n-// GROUPS passed memoized\n-class CArray\n-{\n-public:\n-  CArray();\n-};\n-class CBTree : public CArray\n-{\n-};\n-class CData\n-{\n-public:\n-  virtual               ~CData();\n-};\n-class CStr  : public CData\n-{\n-  inline int     Read();\n-  inline int     Write() const;\n-};\n-class CResource : private CBTree\n-{\n-  struct SResourceNode\n-  {\n-    CStr xKey;\n-  };\n-};"}, {"sha": "af06f221f12d699d7beaeeb074fe55e28cda9835", "filename": "gcc/testsuite/g++.old-deja/g++.mike/memoize1.C", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37f2200463a45c51ccb631f74439475b135907cf/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fmemoize1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37f2200463a45c51ccb631f74439475b135907cf/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fmemoize1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fmemoize1.C?ref=37f2200463a45c51ccb631f74439475b135907cf", "patch": "@@ -1,4 +0,0 @@\n-// { dg-do assemble  }\n-// { dg-options \"-fsave-memoized\" }\n-\n-#include <iostream>"}, {"sha": "68fbb29f20d5172ac01903cac5f31a8039f56935", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18754d6403e23cb34e62bb6e09a15a357fa2782/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18754d6403e23cb34e62bb6e09a15a357fa2782/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=f18754d6403e23cb34e62bb6e09a15a357fa2782", "patch": "@@ -4735,58 +4735,7 @@ parse_options_and_default_flags (int argc, char **argv)\n   OPTIMIZATION_OPTIONS (optimize, optimize_size);\n #endif\n \n-  /* Perform normal command line switch decoding.  */\n-  for (i = 1; i < argc;)\n-    {\n-      int processed;\n-\n-      /* Give the language a chance to decode the option for itself.  */\n-      processed = handle_option (argc - i, argv + i, lang_mask);\n-\n-      if (processed)\n-\ti += processed;\n-      else\n-\t{\n-\t  const char *option = NULL;\n-\t  const char *lang = NULL;\n-\t  unsigned int j;\n-\n-\t  /* It is possible that the command line switch is not valid for the\n-\t     current language, but it is valid for another language.  In order\n-\t     to be compatible with previous versions of the compiler (which\n-\t     did not issue an error message in this case) we check for this\n-\t     possibility here.  If we do find a match, then if extra_warnings\n-\t     is set we generate a warning message, otherwise we will just\n-\t     ignore the option.  */\n-\t  for (j = 0; j < ARRAY_SIZE (documented_lang_options); j++)\n-\t    {\n-\t      option = documented_lang_options[j].option;\n-\n-\t      if (option == NULL)\n-\t\tlang = documented_lang_options[j].description;\n-\t      else if (! strncmp (argv[i], option, strlen (option)))\n-\t\tbreak;\n-\t    }\n-\n-\t  if (j != ARRAY_SIZE (documented_lang_options))\n-\t    {\n-\t      if (extra_warnings)\n-\t\t{\n-\t\t  warning (\"ignoring command line option '%s'\", argv[i]);\n-\t\t  if (lang)\n-\t\t    warning\n-\t\t      (\"(it is valid for %s but not the selected language)\",\n-\t\t       lang);\n-\t\t}\n-\t    }\n-\t  else if (argv[i][0] == '-' && argv[i][1] == 'g')\n-\t    warning (\"`%s': unknown or unsupported -g option\", &argv[i][2]);\n-\t  else\n-\t    error (\"unrecognized option `%s'\", argv[i]);\n-\n-\t  i++;\n-\t}\n-    }\n+  handle_options (argc, argv, lang_mask);\n \n   if (flag_pie)\n     flag_pic = flag_pie;"}]}