{"sha": "9ca4c42a3b756e54a92ff8e1ac6c396b680b7839", "node_id": "C_kwDOANBUbNoAKDljYTRjNDJhM2I3NTZlNTRhOTJmZjhlMWFjNmMzOTZiNjgwYjc4Mzk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-29T12:48:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-29T12:48:15Z"}, "message": "libstdc++: Check for invalid syntax_option_type values in <regex>\n\nThe standard says that it is invalid for more than one grammar element\nto be set in a value of type regex_constants::syntax_option_type. This\nadds a check in the regex compiler andthrows an exception if an invalid\nvalue is used.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/regex_compiler.h (_Compiler::_S_validate): New\n\tfunction.\n\t* include/bits/regex_compiler.tcc (_Compiler::_Compiler): Use\n\t_S_validate to check flags.\n\t* include/bits/regex_error.h (_S_grammar): New error code for\n\tinternal use.\n\t* testsuite/28_regex/basic_regex/ctors/grammar.cc: New test.", "tree": {"sha": "4187c8480ee535d462759c7b7d1375e1c17c85fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4187c8480ee535d462759c7b7d1375e1c17c85fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ca4c42a3b756e54a92ff8e1ac6c396b680b7839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca4c42a3b756e54a92ff8e1ac6c396b680b7839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ca4c42a3b756e54a92ff8e1ac6c396b680b7839", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca4c42a3b756e54a92ff8e1ac6c396b680b7839/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b701e1f8f6870c0f8cb4050674da489101dd05a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b701e1f8f6870c0f8cb4050674da489101dd05a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b701e1f8f6870c0f8cb4050674da489101dd05a5"}], "stats": {"total": 86, "additions": 76, "deletions": 10}, "files": [{"sha": "62a49bf52cf89038da1a91d54419b378362496de", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca4c42a3b756e54a92ff8e1ac6c396b680b7839/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca4c42a3b756e54a92ff8e1ac6c396b680b7839/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=9ca4c42a3b756e54a92ff8e1ac6c396b680b7839", "patch": "@@ -143,6 +143,26 @@ namespace __detail\n \treturn ret;\n       }\n \n+      static _FlagT\n+      _S_validate(_FlagT __f)\n+      {\n+\tusing namespace regex_constants;\n+\tswitch (__f & (ECMAScript|basic|extended|awk|grep|egrep))\n+\t  {\n+\t  case ECMAScript:\n+\t  case basic:\n+\t  case extended:\n+\t  case awk:\n+\t  case grep:\n+\t  case egrep:\n+\t    return __f;\n+\t  case _FlagT(0):\n+\t    return __f | ECMAScript;\n+\t  default:\n+\t    std::__throw_regex_error(_S_grammar, \"conflicting grammar options\");\n+\t  }\n+      }\n+\n       _FlagT              _M_flags;\n       _ScannerT           _M_scanner;\n       shared_ptr<_RegexT> _M_nfa;"}, {"sha": "956262a12c9eaa6bee6758580fa056c409a151f9", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca4c42a3b756e54a92ff8e1ac6c396b680b7839/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca4c42a3b756e54a92ff8e1ac6c396b680b7839/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=9ca4c42a3b756e54a92ff8e1ac6c396b680b7839", "patch": "@@ -65,15 +65,7 @@ namespace __detail\n     _Compiler<_TraitsT>::\n     _Compiler(const _CharT* __b, const _CharT* __e,\n \t      const typename _TraitsT::locale_type& __loc, _FlagT __flags)\n-    : _M_flags((__flags\n-\t\t& (regex_constants::ECMAScript\n-\t\t   | regex_constants::basic\n-\t\t   | regex_constants::extended\n-\t\t   | regex_constants::grep\n-\t\t   | regex_constants::egrep\n-\t\t   | regex_constants::awk))\n-\t       ? __flags\n-\t       : __flags | regex_constants::ECMAScript),\n+    : _M_flags(_S_validate(__flags)),\n       _M_scanner(__b, __e, _M_flags, __loc),\n       _M_nfa(make_shared<_RegexT>(__loc, _M_flags)),\n       _M_traits(_M_nfa->_M_traits),"}, {"sha": "e7b7b420ec41fe91de6cb74ec335b5dbd29e73a7", "filename": "libstdc++-v3/include/bits/regex_error.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca4c42a3b756e54a92ff8e1ac6c396b680b7839/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca4c42a3b756e54a92ff8e1ac6c396b680b7839/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h?ref=9ca4c42a3b756e54a92ff8e1ac6c396b680b7839", "patch": "@@ -61,7 +61,8 @@ namespace regex_constants\n       _S_error_badrepeat,\n       _S_error_complexity,\n       _S_error_stack,\n-      _S_null\n+      _S_null,\n+      _S_grammar\n     };\n \n   /** The expression contained an invalid collating element name. */"}, {"sha": "fd8531c453059f19136024666e3ef0e20ffa12da", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/ctors/grammar.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca4c42a3b756e54a92ff8e1ac6c396b680b7839/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fgrammar.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca4c42a3b756e54a92ff8e1ac6c396b680b7839/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fgrammar.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2Fctors%2Fgrammar.cc?ref=9ca4c42a3b756e54a92ff8e1ac6c396b680b7839", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do run { target c++11 } }\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::regex re{\"\"};\n+  VERIFY( re.flags() & std::regex::ECMAScript );\n+\n+  std::regex re2{\"\", std::regex::flag_type{}};\n+  VERIFY( re2.flags() == std::regex::flag_type() ); // See also PR 83598\n+}\n+\n+void\n+test02()\n+{\n+  // A valid value of type syntax_option_type shall have at most one of the\n+  // grammar elements ECMAScript, basic, extended, awk, grep, egrep, set.\n+\n+  try\n+  {\n+    std::regex{\"\", std::regex::ECMAScript|std::regex::basic};\n+    VERIFY( false );\n+  }\n+  catch (const std::regex_error&)\n+  {\n+  }\n+\n+  try\n+  {\n+    std::regex{\"\", std::regex::extended|std::regex::basic};\n+    VERIFY( false );\n+  }\n+  catch (const std::regex_error&)\n+  {\n+  }\n+\n+  try\n+  {\n+    std::regex{\"\", std::regex::grep|std::regex::basic};\n+    VERIFY( false );\n+  }\n+  catch (const std::regex_error&)\n+  {\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}