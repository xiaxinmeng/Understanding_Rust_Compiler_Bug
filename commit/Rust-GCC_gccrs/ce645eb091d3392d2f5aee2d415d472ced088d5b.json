{"sha": "ce645eb091d3392d2f5aee2d415d472ced088d5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U2NDVlYjA5MWQzMzkyZDJmNWFlZTJkNDE1ZDQ3MmNlZDA4OGQ1Yg==", "commit": {"author": {"name": "Tim Shen", "email": "timshen91@gmail.com", "date": "2013-08-18T13:55:48Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2013-08-18T13:55:48Z"}, "message": "regex_automaton.h: _S_opcode_backref.\n\n2013-08-18  Tim Shen  <timshen91@gmail.com>\n\n\t* include/bits/regex_automaton.h: _S_opcode_backref.\n\t* include/bits/regex_automaton.tcc: Backref automaton support.\n\t* include/bits/regex_compiler.tcc: Parsing support.\n\t* include/bits/regex_executor.h: Add _M_traits for _DFSExecutor.\n\t* include/bits/regex_executor.tcc: Add _S_opcode_backref support.\n\t* testsuite/28_regex/algorithms/regex_match/ecma/string_backref.cc: New.\n\nFrom-SVN: r201825", "tree": {"sha": "22013172403588b68e75b4cfc627975a835c13e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22013172403588b68e75b4cfc627975a835c13e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce645eb091d3392d2f5aee2d415d472ced088d5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce645eb091d3392d2f5aee2d415d472ced088d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce645eb091d3392d2f5aee2d415d472ced088d5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce645eb091d3392d2f5aee2d415d472ced088d5b/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d5755efee57268b43d8fbf38c10cbdbf0a0dd04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d5755efee57268b43d8fbf38c10cbdbf0a0dd04"}], "stats": {"total": 209, "additions": 181, "deletions": 28}, "files": [{"sha": "6715e531f0b35cb471658e32cea762bf09410fba", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce645eb091d3392d2f5aee2d415d472ced088d5b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce645eb091d3392d2f5aee2d415d472ced088d5b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ce645eb091d3392d2f5aee2d415d472ced088d5b", "patch": "@@ -1,3 +1,12 @@\n+2013-08-18  Tim Shen  <timshen91@gmail.com>\n+\n+\t* include/bits/regex_automaton.h: _S_opcode_backref.\n+\t* include/bits/regex_automaton.tcc: Backref automaton support.\n+\t* include/bits/regex_compiler.tcc: Parsing support.\n+\t* include/bits/regex_executor.h: Add _M_traits for _DFSExecutor.\n+\t* include/bits/regex_executor.tcc: Add _S_opcode_backref support.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/string_backref.cc: New.\n+\n 2013-08-16  Tim Shen  <timshen91@gmail.com>\n \n \t* include/bits/regex.h (regex_traits<>::transform_primary):"}, {"sha": "b58071e7aea13e8fc318965e4409470400170358", "filename": "libstdc++-v3/include/bits/regex_automaton.h", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce645eb091d3392d2f5aee2d415d472ced088d5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce645eb091d3392d2f5aee2d415d472ced088d5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h?ref=ce645eb091d3392d2f5aee2d415d472ced088d5b", "patch": "@@ -53,6 +53,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n       _S_opcode_unknown       =   0,\n       _S_opcode_alternative   =   1,\n+      _S_opcode_backref       =   2,\n       _S_opcode_subexpr_begin =   4,\n       _S_opcode_subexpr_end   =   5,\n       _S_opcode_match         = 100,\n@@ -66,11 +67,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef int                        _OpcodeT;\n       typedef _Matcher<_CharT>           _MatcherT;\n \n-      _OpcodeT     _M_opcode;    // type of outgoing transition\n-      _StateIdT    _M_next;      // outgoing transition\n-      _StateIdT    _M_alt;       // for _S_opcode_alternative\n-      unsigned int _M_subexpr;   // for _S_opcode_subexpr_*\n-      _MatcherT    _M_matches;   // for _S_opcode_match\n+      _OpcodeT     _M_opcode;           // type of outgoing transition\n+      _StateIdT    _M_next;             // outgoing transition\n+      union // Since they are mutual exclusive.\n+      {\n+        _StateIdT    _M_alt;            // for _S_opcode_alternative\n+        unsigned int _M_subexpr;        // for _S_opcode_subexpr_*\n+        unsigned int _M_backref_index;  // for _S_opcode_backref\n+      };\n+      _MatcherT    _M_matches;          // for _S_opcode_match\n \n       explicit _State(_OpcodeT __opcode)\n       : _M_opcode(__opcode), _M_next(_S_invalid_state_id)\n@@ -82,8 +87,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { }\n \n       _State(_OpcodeT __opcode, unsigned __index)\n-      : _M_opcode(__opcode), _M_next(_S_invalid_state_id), _M_subexpr(__index)\n-      { }\n+      : _M_opcode(__opcode), _M_next(_S_invalid_state_id)\n+      {\n+        if (__opcode == _S_opcode_subexpr_begin\n+            || __opcode == _S_opcode_subexpr_end)\n+          _M_subexpr = __index;\n+        else if (__opcode == _S_opcode_backref)\n+          _M_backref_index = __index;\n+      }\n \n       _State(_StateIdT __next, _StateIdT __alt)\n       : _M_opcode(_S_opcode_alternative), _M_next(__next), _M_alt(__alt)\n@@ -174,34 +185,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_insert_subexpr_begin()\n       {\n         auto __id = _M_subexpr_count++;\n-        _M_paren_stack.push(__id);\n+        _M_paren_stack.push_back(__id);\n         this->push_back(_StateT(_S_opcode_subexpr_begin, __id));\n         return this->size()-1;\n       }\n \n       _StateIdT\n       _M_insert_subexpr_end()\n       {\n-        this->push_back(_StateT(_S_opcode_subexpr_end, _M_paren_stack.top()));\n-        _M_paren_stack.pop();\n+        this->push_back(_StateT(_S_opcode_subexpr_end, _M_paren_stack.back()));\n+        _M_paren_stack.pop_back();\n         return this->size()-1;\n       }\n \n-      void\n-      _M_set_backref(bool __b)\n-      { _M_has_backref = __b; }\n+      _StateIdT\n+      _M_insert_backref(unsigned int __index);\n \n #ifdef _GLIBCXX_DEBUG\n       std::ostream&\n       _M_dot(std::ostream& __ostr) const;\n #endif\n \n-      _FlagT                   _M_flags;\n-      _StateIdT                _M_start_state;\n-      _StateSet                _M_accepting_states;\n-      _SizeT                   _M_subexpr_count;\n-      bool                     _M_has_backref;\n-      std::stack<unsigned int> _M_paren_stack;\n+      _FlagT                    _M_flags;\n+      _StateIdT                 _M_start_state;\n+      _StateSet                 _M_accepting_states;\n+      _SizeT                    _M_subexpr_count;\n+      bool                      _M_has_backref;\n+      std::vector<unsigned int> _M_paren_stack;\n     };\n \n   /// Describes a sequence of one or more %_State, its current start"}, {"sha": "40a154790d2e22c601ba05c5701f5f2f930939c8", "filename": "libstdc++-v3/include/bits/regex_automaton.tcc", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce645eb091d3392d2f5aee2d415d472ced088d5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce645eb091d3392d2f5aee2d415d472ced088d5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc?ref=ce645eb091d3392d2f5aee2d415d472ced088d5b", "patch": "@@ -50,6 +50,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         case _S_opcode_subexpr_end:\n           ostr << \"subexpr end next=\" << _M_next << \" index=\" << _M_subexpr;\n           break;\n+        case _S_opcode_backref:\n+          ostr << \"backref next=\" << _M_next << \" index=\" << _M_backref_index;\n+          break;\n         case _S_opcode_match:\n           ostr << \"match next=\" << _M_next;\n           break;\n@@ -87,6 +90,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                  << _M_subexpr << \"\\\"];\\n\"\n                  << __id << \" -> \" << _M_next << \" [label=\\\"epsilon\\\"];\\n\";\n           break;\n+        case _S_opcode_backref:\n+          __ostr << __id << \" [label=\\\"\" << __id << \"\\\\nBACKREF \"\n+                 << _M_subexpr << \"\\\"];\\n\"\n+                 << __id << \" -> \" << _M_next << \" [label=\\\"<match>\\\"];\\n\";\n+          break;\n         case _S_opcode_match:\n           __ostr << __id << \" [label=\\\"\" << __id << \"\\\\nMATCH\\\"];\\n\"\n                  << __id << \" -> \" << _M_next << \" [label=\\\"<match>\\\"];\\n\";\n@@ -115,6 +123,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #endif\n \n+  template<typename _CharT, typename _TraitsT>\n+    _StateIdT _NFA<_CharT, _TraitsT>::\n+    _M_insert_backref(unsigned int __index)\n+    {\n+      // To figure out whether a backref is valid, a stack is used to store\n+      // unfinished sub-expressions. For example, when parsing\n+      // \"(a(b)(c\\\\1(d)))\" at '\\\\1', _M_subexpr_count is 3, indicating that 3\n+      // sub expressions are parsed or partially parsed(in the stack), aka,\n+      // \"(a..\", \"(b)\" and \"(c..\").\n+      // _M_paren_stack is {1, 3}, for incomplete \"(a..\" and \"(c..\". At this\n+      // time, \"\\\\2\" is valid, but \"\\\\1\" and \"\\\\3\" are not.\n+      if (__index >= _M_subexpr_count)\n+        __throw_regex_error(regex_constants::error_backref);\n+      for (auto __it : _M_paren_stack)\n+        if (__index == __it)\n+          __throw_regex_error(regex_constants::error_backref);\n+      _M_has_backref = true;\n+      this->push_back(_StateT(_S_opcode_backref, __index));\n+      return this->size()-1;\n+    }\n+\n   template<typename _CharT, typename _TraitsT>\n     _StateSeq<_CharT, _TraitsT>& _StateSeq<_CharT, _TraitsT>::\n     operator=(const _StateSeq& __rhs)"}, {"sha": "2a5e2c68655529d9d2906e72a4dbd3bdb1d64303", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce645eb091d3392d2f5aee2d415d472ced088d5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce645eb091d3392d2f5aee2d415d472ced088d5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=ce645eb091d3392d2f5aee2d415d472ced088d5b", "patch": "@@ -745,8 +745,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (_M_match_token(_ScannerT::_S_token_backref))\n \t{\n \t  // __m.push(_Matcher::_S_opcode_ordchar, _M_cur_value);\n-          _M_state_store._M_set_backref(true);\n-\t  //return true;\n+\t  _M_stack.push(_StateSeqT(_M_state_store, _M_state_store.\n+                                   _M_insert_backref(_M_cur_int_value(10))));\n+\t  return true;\n \t}\n       if (_M_match_token(_ScannerT::_S_token_subexpr_begin))\n \t{"}, {"sha": "0006a29b614bbb09fcf31fc3c2f182371053c3ee", "filename": "libstdc++-v3/include/bits/regex_executor.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce645eb091d3392d2f5aee2d415d472ced088d5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce645eb091d3392d2f5aee2d415d472ced088d5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h?ref=ce645eb091d3392d2f5aee2d415d472ced088d5b", "patch": "@@ -82,10 +82,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           __it.matched = false;\n       }\n \n-      _BiIter   _M_current;\n-      _BiIter   _M_end;\n+      _BiIter    _M_current;\n+      _BiIter    _M_end;\n       _ResultsT& _M_results;\n-      _FlagT    _M_flags;\n+      _FlagT     _M_flags;\n     };\n \n   template<typename _BiIter, typename _Alloc,\n@@ -96,16 +96,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       typedef _Executor<_BiIter, _Alloc, _CharT, _TraitsT> _BaseT;\n       typedef _NFA<_CharT, _TraitsT>                       _RegexT;\n-      typedef typename _BaseT::_ResultsT                    _ResultsT;\n+      typedef typename _BaseT::_ResultsT                   _ResultsT;\n       typedef regex_constants::match_flag_type             _FlagT;\n \n       _DFSExecutor(_BiIter        __begin,\n                    _BiIter        __end,\n-                   _ResultsT&      __results,\n+                   _ResultsT&     __results,\n                    const _RegexT& __nfa,\n                    _FlagT         __flags)\n       : _BaseT(__begin, __end, __results, __flags, __nfa._M_sub_count()),\n-        _M_nfa(__nfa)\n+        _M_traits(_TraitsT()), _M_nfa(__nfa)\n       { }\n \n       bool\n@@ -121,6 +121,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         bool\n         _M_dfs(_StateIdT __i);\n \n+      _TraitsT       _M_traits;\n       const _RegexT& _M_nfa;\n     };\n "}, {"sha": "08b4915a3e3ba8c7749489d83f9b45917b6c99d7", "filename": "libstdc++-v3/include/bits/regex_executor.tcc", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce645eb091d3392d2f5aee2d415d472ced088d5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce645eb091d3392d2f5aee2d415d472ced088d5b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc?ref=ce645eb091d3392d2f5aee2d415d472ced088d5b", "patch": "@@ -63,8 +63,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           __ret = _M_dfs<__match_mode>(__state._M_next);\n           break;\n         case _S_opcode_subexpr_end:\n-          __ret = _M_dfs<__match_mode>(__state._M_next);\n           __results.at(__state._M_subexpr).second = __current;\n+          __results.at(__state._M_subexpr).matched = true;\n+          __ret = _M_dfs<__match_mode>(__state._M_next);\n           __results.at(__state._M_subexpr).matched = __ret;\n           break;\n         case _S_opcode_match:\n@@ -75,6 +76,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n               --__current;\n             }\n           break;\n+        // First fetch the matched result from __results as __submatch;\n+        // then compare it with\n+        // (__current, __current + (__submatch.second - __submatch.first))\n+        // If matched, keep going; else just return to try another state.\n+        case _S_opcode_backref:\n+          {\n+            auto& __submatch = __results.at(__state._M_backref_index);\n+            if (!__submatch.matched)\n+              break;\n+            auto __last = __current;\n+            for (auto __tmp = __submatch.first;\n+                 __last != __end && __tmp != __submatch.second;\n+                 ++__tmp)\n+              ++__last;\n+            if (_M_traits.transform(__submatch.first, __submatch.second)\n+                == _M_traits.transform(__current, __last))\n+              {\n+                auto __backup = __current;\n+                __current = __last;\n+                __ret = _M_dfs<__match_mode>(__state._M_next);\n+                __current = __backup;\n+              }\n+          }\n+          break;\n         case _S_opcode_accept:\n           if (__match_mode)\n             __ret = __current == __end;"}, {"sha": "a828fea93c677eae54c830cb771b1177ea6700b1", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/ecma/string_backref.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce645eb091d3392d2f5aee2d415d472ced088d5b/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fstring_backref.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce645eb091d3392d2f5aee2d415d472ced088d5b/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fstring_backref.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fecma%2Fstring_backref.cc?ref=ce645eb091d3392d2f5aee2d415d472ced088d5b", "patch": "@@ -0,0 +1,78 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+//\n+// 2013-08-10  Tim Shen <timshen91@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.11.2 regex_match\n+// Tests ECMAScript back-refernce against a std::string.\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  regex re(\"([A-Z])\\\\1*\");\n+  smatch m;\n+  {\n+    string s = \"AAAA\";\n+    regex_match(s, m, re);\n+    VERIFY( m[0].matched );\n+    VERIFY( m[1].matched );\n+    VERIFY( std::string(m[0].first, m[0].second) == \"AAAA\" );\n+    VERIFY( std::string(m[1].first, m[1].second) == \"A\" );\n+  }\n+  {\n+    string s = \"BBBB\";\n+    regex_match(s, m, re);\n+    VERIFY( m[0].matched );\n+    VERIFY( m[1].matched );\n+    VERIFY( std::string(m[0].first, m[0].second) == \"BBBB\" );\n+    VERIFY( std::string(m[1].first, m[1].second) == \"B\" );\n+  }\n+  {\n+    string s = \"BBBA\";\n+    regex_match(s, m, re);\n+    VERIFY( !m[0].matched );\n+    VERIFY( !m[1].matched );\n+  }\n+  {\n+    try\n+      {\n+        regex re(\"(a(b)(c\\\\1(d)))\");\n+        VERIFY( false );\n+      }\n+    catch (...)\n+      {\n+        VERIFY( true );\n+      }\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}