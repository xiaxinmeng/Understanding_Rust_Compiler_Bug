{"sha": "a239aff82c3771242d957c0f744cf62b42ed2f2a", "node_id": "C_kwDOANBUbNoAKGEyMzlhZmY4MmMzNzcxMjQyZDk1N2MwZjc0NGNmNjJiNDJlZDJmMmE", "commit": {"author": {"name": "Mayshao", "email": "mayshao-oc@zhaoxin.com", "date": "2022-05-23T15:05:31Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-05-23T15:53:27Z"}, "message": "[x86_64]: Zhaoxin lujiazui enablement\n\nThis patch fix Zhaoxin CPU vendor ID detection problem and add zhaoxin\n\"lujiazui\" processor support.  Currently gcc can't recognize Zhaoxin CPU\n(vendor ID \"CentaurHauls\" and \"Shanghai\") if user use -march=native option,\nwhich is confusing for users.  This patch enables -march=native in zhaoxin\nfamily 7th processor and -march/-mtune=lujiazui, costs and tunning are set\naccording to the characteristics of the processor.\nWe add a new md file to describe lujiazui pipeline.\n\nTesting:\nBootstrap is ok, and no regressions for i386/x86-64 testsuite.\n\nBackground:\nRelated Zhaoxin linux kernel patch can be found at:\nhttps://lore.kernel.org/lkml/01042674b2f741b2aed1f797359bdffb@zhaoxin.com/\n\nRelated Zhaoxin glibc patch can be found at:\nhttps://sourceware.org/git/?p=glibc.git;a=commit;h=32ac0b988466785d6e3cc1dffc364bb26fc63193\n\ngcc/ChangeLog:\n\n\t* common/config/i386/cpuinfo.h (get_zhaoxin_cpu): Detect\n\tthe specific type of Zhaoxin CPU, and return Zhaoxin CPU name.\n\t(cpu_indicator_init): Handle Zhaoxin processors.\n\t* common/config/i386/i386-common.cc: Add lujiazui.\n\t* common/config/i386/i386-cpuinfo.h (enum processor_vendor): Add\n\tVENDOR_ZHAOXIN.\n\t(enum processor_types): Add ZHAOXIN_FAM7H.\n\t(enum processor_subtypes): Add ZHAOXIN_FAM7H_LUJIAZUI.\n\t* config.gcc: Add lujiazui.\n\t* config/i386/cpuid.h (signature_SHANGHAI_ebx): Add\n\tSignatures for zhaoxin\n\t(signature_SHANGHAI_ecx): Ditto.\n\t(signature_SHANGHAI_edx): Ditto.\n\t* config/i386/driver-i386.cc (host_detect_local_cpu): Let\n\t-march=native recognize lujiazui processors.\n\t* config/i386/i386-c.cc (ix86_target_macros_internal): Add lujiazui.\n\t* config/i386/i386-options.cc (m_LUJIAZUI): New_definition.\n\t* config/i386/i386.h (enum processor_type): Ditto.\n\t* config/i386/i386.md: Add lujiazui.\n\t* config/i386/x86-tune-costs.h (struct processor_costs): Add\n\tlujiazui costs.\n\t* config/i386/x86-tune-sched.cc (ix86_issue_rate): Add lujiazui.\n\t(ix86_adjust_cost): Ditto.\n\t* config/i386/x86-tune.def (X86_TUNE_SCHEDULE): Add lujiazui Tunnings.\n\t(X86_TUNE_PARTIAL_REG_DEPENDENCY): Ditto.\n\t(X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY): Ditto.\n\t(X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY): Ditto.\n\t(X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY): Ditto.\n\t(X86_TUNE_MOVX): Ditto.\n\t(X86_TUNE_MEMORY_MISMATCH_STALL): Ditto.\n\t(X86_TUNE_FUSE_CMP_AND_BRANCH_32): Ditto.\n\t(X86_TUNE_FUSE_CMP_AND_BRANCH_64): Ditto.\n\t(X86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS): Ditto.\n\t(X86_TUNE_FUSE_ALU_AND_BRANCH): Ditto.\n\t(X86_TUNE_ACCUMULATE_OUTGOING_ARGS): Ditto.\n\t(X86_TUNE_USE_LEAVE): Ditto.\n\t(X86_TUNE_PUSH_MEMORY): Ditto.\n\t(X86_TUNE_LCP_STALL): Ditto.\n\t(X86_TUNE_USE_INCDEC): Ditto.\n\t(X86_TUNE_INTEGER_DFMODE_MOVES): Ditto.\n\t(X86_TUNE_OPT_AGU): Ditto.\n\t(X86_TUNE_PREFER_KNOWN_REP_MOVSB_STOSB): Ditto.\n\t(X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES): Ditto.\n\t(X86_TUNE_USE_SAHF): Ditto.\n\t(X86_TUNE_USE_BT): Ditto.\n\t(X86_TUNE_AVOID_FALSE_DEP_FOR_BMI): Ditto.\n\t(X86_TUNE_ONE_IF_CONV_INSN): Ditto.\n\t(X86_TUNE_AVOID_MFENCE): Ditto.\n\t(X86_TUNE_EXPAND_ABS): Ditto.\n\t(X86_TUNE_USE_SIMODE_FIOP): Ditto.\n\t(X86_TUNE_USE_FFREEP): Ditto.\n\t(X86_TUNE_EXT_80387_CONSTANTS): Ditto.\n\t(X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL): Ditto.\n\t(X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL): Ditto.\n\t(X86_TUNE_SSE_TYPELESS_STORES): Ditto.\n\t(X86_TUNE_SSE_LOAD0_BY_PXOR): Ditto.\n\t* doc/extend.texi: Add details about lujiazui.\n\t* doc/invoke.texi: Add details about lujiazui.\n\t* config/i386/lujiazui.md: Introduce lujiazui cpu and include new md file.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/funcspec-56.inc: Test -arch=lujiauzi and -tune=lujiazui.\n\t* g++.target/i386/mv32.C: Ditto.\n\nSigned-off-by: mayshao <mayshao-oc@zhaoxin.com>", "tree": {"sha": "d1533cb2eaa1651152f0a3be15411fb825d1ee49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1533cb2eaa1651152f0a3be15411fb825d1ee49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a239aff82c3771242d957c0f744cf62b42ed2f2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a239aff82c3771242d957c0f744cf62b42ed2f2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a239aff82c3771242d957c0f744cf62b42ed2f2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a239aff82c3771242d957c0f744cf62b42ed2f2a/comments", "author": null, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6c04ac9fd9c7b5538a6f5f45e5f9dc22954764b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6c04ac9fd9c7b5538a6f5f45e5f9dc22954764b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6c04ac9fd9c7b5538a6f5f45e5f9dc22954764b"}], "stats": {"total": 1206, "additions": 1159, "deletions": 47}, "files": [{"sha": "adc02bc3d9833ad021937579699d54621569513c", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -526,6 +526,39 @@ get_intel_cpu (struct __processor_model *cpu_model,\n   return cpu;\n }\n \n+/* Get the specific type of ZHAOXIN CPU and return ZHAOXIN CPU name.\n+   Return NULL for unknown ZHAOXIN CPU.  */\n+\n+static inline const char *\n+get_zhaoxin_cpu (struct __processor_model *cpu_model,\n+\t\tstruct __processor_model2 *cpu_model2,\n+\t\tunsigned int *cpu_features2)\n+{\n+  const char *cpu = NULL;\n+  unsigned int family = cpu_model2->__cpu_family;\n+  unsigned int model = cpu_model2->__cpu_model;\n+\n+  switch (family)\n+    {\n+    /* ZHAOXIN family 7h.  */\n+    case 0x07:\n+      cpu_model->__cpu_type = ZHAOXIN_FAM7H;\n+      if (model == 0x3b)\n+\t{\n+\tcpu = \"lujiazui\";\n+\tCHECK___builtin_cpu_is (\"lujiazui\");\n+\tcpu_model->__cpu_features[0] &= ~(1U <<(FEATURE_AVX & 31));\n+\tcpu_features2[0] &= ~(1U <<((FEATURE_F16C - 32) & 31));\n+\tcpu_model->__cpu_subtype = ZHAOXIN_FAM7H_LUJIAZUI;\n+\t}\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  return cpu;\n+}\n+\n /* ECX and EDX are output of CPUID at level one.  */\n static inline void\n get_available_features (struct __processor_model *cpu_model,\n@@ -936,8 +969,27 @@ cpu_indicator_init (struct __processor_model *cpu_model,\n       get_amd_cpu (cpu_model, cpu_model2, cpu_features2);\n       cpu_model->__cpu_vendor = VENDOR_AMD;\n     }\n-  else if (vendor == signature_CENTAUR_ebx)\n+  else if (vendor == signature_CENTAUR_ebx && family < 0x07)\n     cpu_model->__cpu_vendor = VENDOR_CENTAUR;\n+  else if (vendor == signature_SHANGHAI_ebx\n+\t\t|| vendor == signature_CENTAUR_ebx)\n+    {\n+      /* Adjust model and family for ZHAOXIN CPUS.  */\n+      if (family == 0x07)\n+\t{\n+\t  model += extended_model;\n+\t}\n+\n+      cpu_model2->__cpu_family = family;\n+      cpu_model2->__cpu_model = model;\n+\n+      /* Find available features.  */\n+      get_available_features (cpu_model, cpu_model2, cpu_features2,\n+\t\t\t\t  ecx, edx);\n+      /* Get CPU type.  */\n+      get_zhaoxin_cpu (cpu_model, cpu_model2,cpu_features2);\n+      cpu_model->__cpu_vendor = VENDOR_ZHAOXIN;\n+    }\n   else if (vendor == signature_CYRIX_ebx)\n     cpu_model->__cpu_vendor = VENDOR_CYRIX;\n   else if (vendor == signature_NSC_ebx)"}, {"sha": "cb8781634921b1ef279472d902e59fab33826f18", "filename": "gcc/common/config/i386/i386-common.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -1817,6 +1817,7 @@ const char *const processor_names[] =\n   \"alderlake\",\n   \"rocketlake\",\n   \"intel\",\n+  \"lujiazui\",\n   \"geode\",\n   \"k6\",\n   \"athlon\",\n@@ -1995,6 +1996,13 @@ const pta processor_alias_table[] =\n   {\"nano-x4\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n       | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR, 0, P_NONE},\n+  {\"lujiazui\", PROCESSOR_LUJIAZUI, CPU_LUJIAZUI,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+\t| PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n+\t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_BMI | PTA_BMI2\n+\t| PTA_PRFCHW | PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT | PTA_FSGSBASE\n+\t| PTA_RDRND | PTA_MOVBE | PTA_ADX | PTA_RDSEED | PTA_POPCNT,\n+\tM_CPU_SUBTYPE (ZHAOXIN_FAM7H_LUJIAZUI), P_NONE},\n   {\"k8\", PROCESSOR_K8, CPU_K8,\n     PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n       | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR, 0, P_NONE},"}, {"sha": "643fbd9737849a70ee576a292c712d1eacc9f621", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -29,6 +29,7 @@ enum processor_vendor\n {\n   VENDOR_INTEL = 1,\n   VENDOR_AMD,\n+  VENDOR_ZHAOXIN,\n   VENDOR_OTHER,\n   VENDOR_CENTAUR,\n   VENDOR_CYRIX,\n@@ -56,6 +57,7 @@ enum processor_types\n   INTEL_GOLDMONT_PLUS,\n   INTEL_TREMONT,\n   AMDFAM19H,\n+  ZHAOXIN_FAM7H,\n   CPU_TYPE_MAX,\n   BUILTIN_CPU_TYPE_MAX = CPU_TYPE_MAX\n };\n@@ -89,6 +91,7 @@ enum processor_subtypes\n   INTEL_COREI7_ALDERLAKE,\n   AMDFAM19H_ZNVER3,\n   INTEL_COREI7_ROCKETLAKE,\n+  ZHAOXIN_FAM7H_LUJIAZUI,\n   CPU_SUBTYPE_MAX\n };\n "}, {"sha": "600ac357366686b9ca44c8d131a92f193a6e0883", "filename": "gcc/config.gcc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -665,7 +665,7 @@ slm nehalem westmere sandybridge ivybridge haswell broadwell bonnell \\\n silvermont knl knm skylake-avx512 cannonlake icelake-client icelake-server \\\n skylake goldmont goldmont-plus tremont cascadelake tigerlake cooperlake \\\n sapphirerapids alderlake rocketlake eden-x2 nano nano-1000 nano-2000 nano-3000 \\\n-nano-x2 eden-x4 nano-x4 x86-64 x86-64-v2 x86-64-v3 x86-64-v4 native\"\n+nano-x2 eden-x4 nano-x4 lujiazui x86-64 x86-64-v2 x86-64-v3 x86-64-v4 native\"\n \n # Additional x86 processors supported by --with-cpu=.  Each processor\n # MUST be separated by exactly one space.\n@@ -3790,6 +3790,10 @@ case ${target} in\n \tcpu=geode\n \tarch_without_sse2=yes\n \t;;\n+      lujiazui-*)\n+\tarch=lujiazui\n+\tcpu=lujiazui\n+\t;;\n       pentium2-*)\n \tarch=pentium2\n \tcpu=pentium2\n@@ -3899,6 +3903,10 @@ case ${target} in\n \tarch=k8\n \tcpu=k8\n \t;;\n+    lujiazui-*)\n+\tarch=lujiazui\n+\tcpu=lujiazui\n+\t;;\n       nocona-*)\n \tarch=nocona\n \tcpu=nocona"}, {"sha": "a4c2fed7edaba5a2b0cdf826770ff1cbcb3b06e3", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -204,6 +204,10 @@\n #define signature_VORTEX_ecx\t0x436f5320\n #define signature_VORTEX_edx\t0x36387865\n \n+#define signature_SHANGHAI_ebx\t0x68532020\n+#define signature_SHANGHAI_ecx\t0x20206961\n+#define signature_SHANGHAI_edx\t0x68676e61\n+\n #ifndef __x86_64__\n /* At least one cpu (Winchip 2) does not set %ebx and %ecx\n    for cpuid leaf 1. Forcibly zero the two registers before"}, {"sha": "3c702fdca33563eacb43af44f01ac20b3e94658b", "filename": "gcc/config/i386/driver-i386.cc", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fdriver-i386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fdriver-i386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.cc?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -438,7 +438,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t  || vendor == VENDOR_CYRIX\n \t  || vendor == VENDOR_NSC)\n \tcache = detect_caches_amd (ext_level);\n-      else if (vendor == VENDOR_INTEL)\n+      else if (vendor == VENDOR_INTEL\n+\t\t\t || vendor == VENDOR_ZHAOXIN)\n \t{\n \t  bool xeon_mp = (family == 15 && model == 6);\n \t  cache = detect_caches_intel (xeon_mp, max_level,\n@@ -518,6 +519,20 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t    processor = PROCESSOR_I486;\n \t}\n     }\n+  else if (vendor == VENDOR_ZHAOXIN)\n+    {\n+      processor = PROCESSOR_GENERIC;\n+\n+      switch (family)\n+\t{\n+\tcase 7:\n+\t  if (model == 0x3b)\n+\t    processor = PROCESSOR_LUJIAZUI;\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n   else\n     {\n       switch (family)\n@@ -773,6 +788,9 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n     case PROCESSOR_BTVER2:\n       cpu = \"btver2\";\n       break;\n+    case PROCESSOR_LUJIAZUI:\n+      cpu = \"lujiazui\";\n+      break;\n \n     default:\n       /* Use something reasonable.  */"}, {"sha": "eb0e3b36a764036a38f610014ec5c413a628466c", "filename": "gcc/config/i386/i386-c.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.cc?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -140,6 +140,10 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n       def_or_undef (parse_in, \"__btver2\");\n       def_or_undef (parse_in, \"__btver2__\");\n       break;\n+    case PROCESSOR_LUJIAZUI:\n+      def_or_undef (parse_in, \"__lujiazui\");\n+      def_or_undef (parse_in, \"__lujiazui__\");\n+      break;\n     case PROCESSOR_PENTIUM4:\n       def_or_undef (parse_in, \"__pentium4\");\n       def_or_undef (parse_in, \"__pentium4__\");\n@@ -332,6 +336,9 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     case PROCESSOR_BTVER2:\n       def_or_undef (parse_in, \"__tune_btver2__\");\n        break;\n+    case PROCESSOR_LUJIAZUI:\n+      def_or_undef (parse_in, \"__tune_lujiazui__\");\n+       break;\n     case PROCESSOR_PENTIUM4:\n       def_or_undef (parse_in, \"__tune_pentium4__\");\n       break;"}, {"sha": "e11f68186f58cda54c266239ac85c890c6429975", "filename": "gcc/config/i386/i386-options.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.cc?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -138,6 +138,8 @@ along with GCC; see the file COPYING3.  If not see\n #define m_TREMONT (HOST_WIDE_INT_1U<<PROCESSOR_TREMONT)\n #define m_INTEL (HOST_WIDE_INT_1U<<PROCESSOR_INTEL)\n \n+#define m_LUJIAZUI (HOST_WIDE_INT_1U<<PROCESSOR_LUJIAZUI)\n+\n #define m_GEODE (HOST_WIDE_INT_1U<<PROCESSOR_GEODE)\n #define m_K6 (HOST_WIDE_INT_1U<<PROCESSOR_K6)\n #define m_K6_GEODE (m_K6 | m_GEODE)\n@@ -755,6 +757,7 @@ static const struct processor_costs *processor_cost_table[] =\n   &alderlake_cost,\n   &icelake_cost,\n   &intel_cost,\n+  &lujiazui_cost,\n   &geode_cost,\n   &k6_cost,\n   &athlon_cost,"}, {"sha": "f16df633e84b33ee12f75d1704cd7368be0158a4", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -2243,6 +2243,7 @@ enum processor_type\n   PROCESSOR_ALDERLAKE,\n   PROCESSOR_ROCKETLAKE,\n   PROCESSOR_INTEL,\n+  PROCESSOR_LUJIAZUI,\n   PROCESSOR_GEODE,\n   PROCESSOR_K6,\n   PROCESSOR_ATHLON,"}, {"sha": "050dee7d43a95ab6367abc8b2e09b650f5397ada", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -473,8 +473,8 @@\n \f\n ;; Processor type.\n (define_attr \"cpu\" \"none,pentium,pentiumpro,geode,k6,athlon,k8,core2,nehalem,\n-\t\t    atom,slm,glm,haswell,generic,amdfam10,bdver1,bdver2,bdver3,\n-\t\t    bdver4,btver2,znver1,znver2,znver3\"\n+\t\t    atom,slm,glm,haswell,generic,lujiazui,amdfam10,bdver1,\n+\t\t    bdver2,bdver3,bdver4,btver2,znver1,znver2,znver3\"\n   (const (symbol_ref \"ix86_schedule\")))\n \n ;; A basic instruction type.  Refinements due to arguments to be\n@@ -1310,6 +1310,7 @@\n (include \"glm.md\")\n (include \"core2.md\")\n (include \"haswell.md\")\n+(include \"lujiazui.md\")\n \n \f\n ;; Operand and operator predicates and constraints"}, {"sha": "9046c09f28385d6413985f96834906febf636ed2", "filename": "gcc/config/i386/lujiazui.md", "status": "added", "additions": 844, "deletions": 0, "changes": 844, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Flujiazui.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Flujiazui.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flujiazui.md?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -0,0 +1,844 @@\n+;; Copyright (C) 2012-2022 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+;;\n+\n+;; Scheduling for ZHAOXIN lujiazui processor.\n+\n+;; Modeling automatons for decoders, execution pipes and AGU pipes.\n+(define_automaton \"lujiazui_decoder,lujiazui_core,lujiazui_agu\")\n+\n+;; The rules for the decoder are simple:\n+;;  - an instruction with 1 uop can be decoded by any of the three\n+;;    decoders in one cycle.\n+;;  - an instruction with 2 uops can be decoded by decoder 0 or decoder 1\n+;;    but still in only one cycle.\n+;;  - a complex (microcode) instruction can only be decoded by\n+;;    decoder 0, and this takes an unspecified number of cycles.\n+;;\n+;; The goal is to schedule such that we have a few-one-two uops sequence\n+;; in each cycle, to decode as many instructions per cycle as possible.\n+(define_cpu_unit \"lua_decoder0\" \"lujiazui_decoder\")\n+(define_cpu_unit \"lua_decoder1\" \"lujiazui_decoder\")\n+(define_cpu_unit \"lua_decoder2\" \"lujiazui_decoder\")\n+\n+;; We first wish to find an instruction for lua_decoder0, so exclude\n+;; lua_decoder1 and lua_decoder2 from being reserved until\n+;; lua_decoder0 is reserved, and also exclude lua_decoder2\n+;; from being reserved until lua_decoder1 is reserved.\n+(presence_set \"lua_decoder1\" \"lua_decoder0\")\n+(presence_set \"lua_decoder2\" \"lua_decoder0\")\n+(presence_set \"lua_decoder2\" \"lua_decoder1\")\n+\n+;; Most instructions can be decoded on any of the three decoders.\n+(define_reservation \"lua_decodern\" \"lua_decoder0|lua_decoder1|lua_decoder2\")\n+(define_reservation \"lua_decoder01\" \"lua_decoder0|lua_decoder1\")\n+\n+;; The out-of-order core has six pipelines.\n+;; Port 4, 5 are responsible for address calculations, load or store.\n+;; Port 0, 1, 2, 3 for everything else.\n+\n+(define_cpu_unit \"lua_p0,lua_p1,lua_p2,lua_p3\" \"lujiazui_core\")\n+(define_cpu_unit \"lua_p4,lua_p5\" \"lujiazui_agu\")\n+\n+(define_reservation \"lua_p03\" \"lua_p0|lua_p3\")\n+(define_reservation \"lua_p12\" \"lua_p1|lua_p2\")\n+(define_reservation \"lua_p1p2\" \"lua_p1+lua_p2\")\n+(define_reservation \"lua_p45\" \"lua_p4|lua_p5\")\n+(define_reservation \"lua_p4p5\" \"lua_p4+lua_p5\")\n+(define_reservation \"lua_p0p1p2p3\" \"lua_p0+lua_p1+lua_p2+lua_p3\")\n+\n+;; Only the irregular instructions have to be modeled here.\n+\n+;; Complex instruction.\n+(define_insn_reservation \"lua_complex_insn\" 6\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (eq_attr \"type\" \"other,multi,str\"))\n+\t\t\t \"lua_decoder0\")\n+\n+;; Call instruction.\n+(define_insn_reservation \"lua_call\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (eq_attr \"type\" \"call,callv\"))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p1\")\n+\n+;; MOV - integer moves.\n+(define_insn_reservation \"lua_imov\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"imov,imovx\")))\n+\t\t\t \"lua_decodern,lua_p12\")\n+\n+(define_insn_reservation \"lua_imov_load\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"imov,imovx\")))\n+\t\t\t \"lua_decoder01,lua_p45\")\n+\n+(define_insn_reservation \"lua_imov_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t\t   (eq_attr \"type\" \"imov\")))\n+\t\t\t \"lua_decodern,lua_p12+lua_p45\")\n+\n+(define_insn_reservation \"lua_icmov\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none,unknown\")\n+\t\t\t\t   (eq_attr \"type\" \"icmov\")))\n+\t\t\t \"lua_decodern,lua_p2\")\n+\n+(define_insn_reservation \"lua_icmov_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"icmov\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p2\")\n+\n+;; Push and pop.\n+(define_insn_reservation \"lua_push_reg\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t\t   (eq_attr \"type\" \"push\")))\n+\t\t\t \"lua_decodern,lua_p12+lua_p45\")\n+\n+(define_insn_reservation \"lua_push_mem\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"both\")\n+\t\t\t\t   (eq_attr \"type\" \"push\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p12+lua_p45\")\n+\n+(define_insn_reservation \"lua_pop_reg\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"pop\")))\n+\t\t\t \"lua_decoder01,lua_p45\")\n+\n+(define_insn_reservation \"lua_pop_mem\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"both\")\n+\t\t\t\t   (eq_attr \"type\" \"pop\")))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p12+lua_p45\")\n+\n+(define_insn_reservation \"lua_lea\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t\t  (eq_attr \"type\" \"lea\"))\n+\t\t\t \"hsw_decodern,lua_p45\")\n+\n+(define_insn_reservation \"lua_shift_rotate\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none,unknown\")\n+\t\t\t (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1\")))\n+\t\t\t \"lua_decodern,lua_p2\")\n+\n+(define_insn_reservation \"lua_shift_rotate_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p2\")\n+\n+(define_insn_reservation \"lua_shift_rotate_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1\")))\n+\t\t\t \"lua_decoder01,lua_p2,lua_p45\")\n+\n+(define_insn_reservation \"lua_shift_rotate_both\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"both\")\n+\t\t\t (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1\")))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p2,lua_p45\")\n+\n+(define_insn_reservation \"lua_branch\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"ibr\")))\n+\t\t\t \"lua_decodern,lua_p1\")\n+\n+(define_insn_reservation \"lua_indirect_branch_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"ibr\")))\n+\t\t\t \"lua_decodern,lua_p45,lua_p1\")\n+\n+(define_insn_reservation \"lua_leave\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (eq_attr \"type\" \"leave\"))\n+\t\t\t \"lua_decoder0,lua_p45+lua_p12,lua_p12\")\n+\n+;; Multiplication instructions.\n+\n+(define_insn_reservation \"lua_imul_qi\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"QI\")\n+\t\t\t\t\t(eq_attr \"type\" \"imul,imulx\"))))\n+\t\t\t \"lua_decodern,lua_p1p2\")\n+\n+(define_insn_reservation \"lua_imul_qi_mem\" 6\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"!none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"QI\")\n+\t\t\t\t\t(eq_attr \"type\" \"imul,imulx\"))))\n+\t\t\t \"lua_decoder01,lua_p1p2+lua_p45\")\n+\n+(define_insn_reservation \"lua_imul_hisi\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"HI,SI\")\n+\t\t\t\t\t(eq_attr \"type\" \"imul,imulx\"))))\n+\t\t\t \"lua_decoder0,lua_p1p2\")\n+\n+(define_insn_reservation \"lua_imul_hisi_mem\" 7\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"!none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"HI,SI\")\n+\t\t\t\t\t(eq_attr \"type\" \"imul,imulx\"))))\n+\t\t\t \"lua_decoder0,lua_p1p2+lua_p45\")\n+\n+(define_insn_reservation \"lua_imul_di\" 12\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DI\")\n+\t\t\t\t\t(eq_attr \"type\" \"imul,imulx\"))))\n+\t\t\t \"lua_decoder0,lua_p0p1p2p3\")\n+\n+(define_insn_reservation \"lua_imul_di_mem\" 16\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"!none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DI\")\n+\t\t\t\t\t(eq_attr \"type\" \"imul,imulx\"))))\n+\t\t\t \"lua_decoder0,lua_p0p1p2p3+lua_p45\")\n+\n+;; Division instructions.\n+\n+(define_insn_reservation \"lua_idiv_qi\" 21\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"QI\")\n+\t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n+\t\t\t \"lua_decoder0,lua_p0p1p2p3*21\")\n+\n+(define_insn_reservation \"lua_idiv_qi_load\" 25\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"QI\")\n+\t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p0p1p2p3*21\")\n+\n+(define_insn_reservation \"lua_idiv_hi\" 22\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"HI\")\n+\t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n+\t\t\t \"lua_decoder0,lua_p0p1p2p3*22\")\n+\n+(define_insn_reservation \"lua_idiv_hi_load\" 26\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"HI\")\n+\t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p0p1p2p3*22\")\n+\n+(define_insn_reservation \"lua_idiv_si\" 20\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SI\")\n+\t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n+\t\t\t \"lua_decoder0,lua_p0p1p2p3*20\")\n+\n+(define_insn_reservation \"lua_idiv_si_load\" 24\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SI\")\n+\t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p0p1p2p3*20\")\n+\n+(define_insn_reservation \"lua_idiv_di\" 150\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DI\")\n+\t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n+\t\t\t \"lua_decoder0,lua_p0p1p2p3*150\")\n+\n+(define_insn_reservation \"lua_idiv_di_load\" 154\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DI\")\n+\t\t\t\t\t(eq_attr \"type\" \"idiv\"))))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p0p1p2p3*150\")\n+\n+;; x87 floating point operations.\n+\n+(define_insn_reservation \"lua_fxch\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (eq_attr \"type\" \"fxch\"))\n+\t\t\t \"lua_decodern,lua_p1\")\n+\n+(define_insn_reservation \"lua_fop\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none,unknown\")\n+\t\t\t\t   (eq_attr \"type\" \"fop\")))\n+\t\t\t \"lua_decodern,lua_p0\")\n+\n+(define_insn_reservation \"lua_fop_load\" 7\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"fop\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p0\")\n+\n+(define_insn_reservation \"lua_fop_store\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t\t   (eq_attr \"type\" \"fop\")))\n+\t\t\t \"lua_decodern,lua_p0,lua_p45\")\n+\n+(define_insn_reservation \"lua_fop_both\" 7\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"both\")\n+\t\t\t\t   (eq_attr \"type\" \"fop\")))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p0,lua_p45\")\n+\n+(define_insn_reservation \"lua_fsgn\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (eq_attr \"type\" \"fsgn\"))\n+\t\t\t \"lua_decodern,lua_p0\")\n+\n+(define_insn_reservation \"lua_fistp\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"fistp\")))\n+\t\t\t \"lua_decodern,lua_p0\")\n+\n+(define_insn_reservation \"lua_fistp_mem\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"!none\")\n+\t\t\t\t   (eq_attr \"type\" \"fistp\")))\n+\t\t\t \"lua_decoder0,lua_p0+lua_p45\")\n+\n+(define_insn_reservation \"lua_fcmov\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (eq_attr \"type\" \"fcmov\"))\n+\t\t\t \"lua_decodern,lua_p0\")\n+\n+(define_insn_reservation \"lua_fcmp\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"fcmp\")))\n+\t\t\t \"lua_decodern,lua_p0\")\n+\n+(define_insn_reservation \"lua_fcmp_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"fcmp\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p0\")\n+\n+(define_insn_reservation \"lua_fmov\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"fmov\")))\n+\t\t\t \"lua_decodern,lua_p0\")\n+\n+(define_insn_reservation \"lua_fmov_load\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"!XF\")\n+\t\t\t\t\t(eq_attr \"type\" \"fmov\"))))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p0\")\n+\n+(define_insn_reservation \"lua_fmov_XF_load\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"XF\")\n+\t\t\t\t\t(eq_attr \"type\" \"fmov\"))))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p0\")\n+\n+(define_insn_reservation \"lua_fmov_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"!XF\")\n+\t\t\t\t\t(eq_attr \"type\" \"fmov\"))))\n+\t\t\t \"lua_decoder0,lua_p0,lua_p45\")\n+\n+(define_insn_reservation \"lua_fmov_XF_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"XF\")\n+\t\t\t\t\t(eq_attr \"type\" \"fmov\"))))\n+\t\t\t \"lua_decoder0,lua_p0,lua_p45\")\n+\n+(define_insn_reservation \"lua_fmul\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"fmul\")))\n+\t\t\t \"lua_decodern,lua_p3\")\n+\n+(define_insn_reservation \"lua_fmul_load\" 8\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"fp_int_src\" \"false\")\n+\t\t\t\t   (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t\t(eq_attr \"type\" \"fmul\"))))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p3\")\n+\n+(define_insn_reservation \"lua_fimul_load\" 8\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"fp_int_src\" \"true\")\n+\t\t\t\t   (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t\t(eq_attr \"type\" \"fmul\"))))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p3\")\n+\n+;; fdiv instructions.\n+\n+(define_insn_reservation \"lua_fdiv_SF\" 15\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n+\t\t\t\t    (eq_attr \"type\" \"fdiv,fpspc\"))))\n+\t\t\t \"lua_decodern,lua_p0*15\")\n+\n+(define_insn_reservation \"lua_fdiv_SF_load\" 19\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n+\t\t\t\t    (eq_attr \"type\" \"fdiv,fpspc\"))))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p0*15\")\n+\n+(define_insn_reservation \"lua_fdiv_DF\" 18\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DF\")\n+\t\t\t\t    (eq_attr \"type\" \"fdiv,fpspc\"))))\n+\t\t\t \"lua_decodern,lua_p0*18\")\n+\n+(define_insn_reservation \"lua_fdiv_DF_load\" 22\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DF\")\n+\t\t\t\t    (eq_attr \"type\" \"fdiv,fpspc\"))))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p0*18\")\n+\n+(define_insn_reservation \"lua_fdiv_XF\" 22\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"XF\")\n+\t\t\t\t    (eq_attr \"type\" \"fdiv,fpspc\"))))\n+\t\t\t \"lua_decoder0,lua_p0*22\")\n+\n+(define_insn_reservation \"lua_fdiv_XF_load\" 26\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"XF\")\n+\t\t\t\t    (eq_attr \"type\" \"fdiv,fpspc\"))))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p0*22\")\n+\n+;; MMX instructions.\n+\n+(define_insn_reservation \"lua_mmx_sse_add_shft\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t (eq_attr \"type\" \"mmxadd,sseiadd,mmxshft,sseishft\")))\n+\t\t\t \"lua_decodern,lua_p0\")\n+\n+(define_insn_reservation \"lua_mmx_sse_add_shft_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t (eq_attr \"type\" \"mmxadd,sseiadd,mmxshft,sseishft\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p0\")\n+\n+(define_insn_reservation \"lua_mmx_sse_add_shft_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t (eq_attr \"type\" \"mmxadd,sseiadd,mmxshft,sseishft\")))\n+\t\t\t \"lua_decodern,lua_p0,lua_p45\")\n+\n+(define_insn_reservation \"lua_mmx_mul\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"mmxmul,sseimul\")))\n+\t\t\t \"lua_decodern,lua_p3\")\n+\n+(define_insn_reservation \"lua_mmx_mul_load\" 9\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"mmxmul,sseimul\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p3\")\n+\n+(define_insn_reservation \"lua_mmxcvt\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"mmxcvt\")))\n+\t\t\t \"lua_decodern,lua_p03\")\n+\n+(define_insn_reservation \"lua_mmxcvt_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"mmxcvt\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p03\")\n+\n+;; The sfence instruction.\n+(define_insn_reservation \"lua_sse_sfence\" 13\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"unknown\")\n+\t\t\t\t   (eq_attr \"type\" \"sse\")))\n+\t\t\t \"lua_decoder0,lua_p45\")\n+\n+(define_insn_reservation \"lua_sse_SFDF\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"mode\" \"SF,DF\")\n+\t\t\t\t   (eq_attr \"type\" \"sse\")))\n+\t\t\t \"lua_decodern,lua_p0\")\n+\n+(define_insn_reservation \"lua_sse_V4SF\" 13\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"mode\" \"V4SF\")\n+\t\t\t\t   (eq_attr \"type\" \"sse\")))\n+\t\t\t \"lua_decodern,lua_p0\")\n+\n+(define_insn_reservation \"lua_sse_V8SF\" 19\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"mode\" \"V8SF,V4DF\")\n+\t\t\t\t   (eq_attr \"type\" \"sse\")))\n+\t\t\t \"lua_decodern,lua_p0\")\n+\n+(define_insn_reservation \"lua_sse_add1\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"sseadd1\")))\n+\t\t\t \"lua_decoder0,lua_p0\")\n+\n+(define_insn_reservation \"lua_sse_add1_load\" 8\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"sseadd1\")))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p0\")\n+\n+(define_insn_reservation \"lua_sse_cmp\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"ssecmp,ssecomi\")))\n+\t\t\t \"lua_decodern,lua_p0\")\n+\n+(define_insn_reservation \"lua_sse_cmp_load\" 7\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"ssecmp,ssecomi\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p0\")\n+\n+(define_insn_reservation \"lua_sse_logic\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"sselog,sselog1\")))\n+\t\t\t \"lua_decodern,lua_p03\")\n+\n+(define_insn_reservation \"lua_sse_logic_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"sselog,sselog1\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p03\")\n+\n+(define_insn_reservation \"lua_sse_add\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"sseadd\")))\n+\t\t\t \"lua_decodern,lua_p0\")\n+\n+(define_insn_reservation \"lua_sse_add_load\" 7\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"sseadd\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p0\")\n+\n+(define_insn_reservation \"lua_ssemul_ss_ps\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SF,V4SF,V8SF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssemul\"))))\n+\t\t\t \"lua_decodern,lua_p3\")\n+\n+(define_insn_reservation \"lua_ssemul_ss_ps_load\" 7\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SF,V4SF,V8SF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssemul\"))))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p3\")\n+\n+(define_insn_reservation \"lua_ssemul_sd_pd\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DF,V2DF,V4DF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssemul\"))))\n+\t\t\t \"lua_decodern,lua_p3\")\n+\n+(define_insn_reservation \"lua_ssemul_sd_pd_load\" 8\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DF,V2DF,V4DF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssemul\"))))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p3\")\n+\n+(define_insn_reservation \"lua_ssediv_SF\" 13\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"lua_decodern,lua_p0*13\")\n+\n+(define_insn_reservation \"lua_ssediv_load_SF\" 17\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p0*13\")\n+\n+(define_insn_reservation \"lua_ssediv_V4SF\" 23\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"lua_decodern,lua_p0*23\")\n+\n+(define_insn_reservation \"lua_ssediv_load_V4SF\" 27\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"V4SF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p0*23\")\n+\n+(define_insn_reservation \"lua_ssediv_V8SF\" 47\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"V8SF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"lua_decoder0,lua_p0*47\")\n+\n+(define_insn_reservation \"lua_ssediv_load_V8SF\" 51\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"V8SF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p0*47\")\n+\n+(define_insn_reservation \"lua_ssediv_SD\" 17\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"lua_decodern,lua_p0*17\")\n+\n+(define_insn_reservation \"lua_ssediv_load_SD\" 21\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"DF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p0*17\")\n+\n+(define_insn_reservation \"lua_ssediv_V2DF\" 30\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"V2DF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"lua_decodern,lua_p0*30\")\n+\n+(define_insn_reservation \"lua_ssediv_load_V2DF\" 34\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"V2DF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p0*30\")\n+\n+(define_insn_reservation \"lua_ssediv_V4DF\" 56\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"V4DF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"lua_decoder0,lua_p0*56\")\n+\n+(define_insn_reservation \"lua_ssediv_load_V4DF\" 60\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"V4DF\")\n+\t\t\t\t\t(eq_attr \"type\" \"ssediv\"))))\n+\t\t\t \"lua_decoder0,lua_p4p5,lua_p0*56\")\n+\n+\n+(define_insn_reservation \"lua_sseicvt_si\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SI\")\n+\t\t\t (and (match_operand:SF 1 \"memory_operand\")\n+\t\t\t\t\t(eq_attr \"type\" \"sseicvt\")))))\n+\t\t\t \"lua_decoder01,lua_p0\")\n+\n+(define_insn_reservation \"lua_sseicvt_si_load\" 6\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SI\")\n+\t\t\t (and (match_operand:SF 1 \"memory_operand\")\n+\t\t\t\t\t(eq_attr \"type\" \"sseicvt\")))))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p0\")\n+\n+(define_insn_reservation \"lua_sseicvtdf_si\" 3\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SI\")\n+\t\t\t (and (match_operand:DF 1 \"memory_operand\")\n+\t\t\t\t\t(eq_attr \"type\" \"sseicvt\")))))\n+\t\t\t \"lua_decodern,lua_p0\")\n+\n+(define_insn_reservation \"lua_sseicvtdf_si_load\" 7\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (and (eq_attr \"mode\" \"SI\")\n+\t\t\t (and (match_operand:DF 1 \"memory_operand\")\n+\t\t\t\t\t(eq_attr \"type\" \"sseicvt\")))))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p0\")\n+\n+(define_insn_reservation \"lua_ssecvt\" 6\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"ssecvt\")))\n+\t\t\t \"lua_decoder01,lua_p03\")\n+\n+(define_insn_reservation \"lua_ssecvt_load\" 10\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"ssecvt\")))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p03\")\n+\n+(define_insn_reservation \"lua_sse_mov\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"ssemov\")))\n+\t\t\t \"lua_decodern,lua_p03\")\n+\n+(define_insn_reservation \"lua_sse_mov_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"ssemov\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p03\")\n+\n+(define_insn_reservation \"lua_sse_mov_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t\t   (eq_attr \"type\" \"ssemov\")))\n+\t\t\t \"lua_decoder01,lua_p0,lua_p45\")\n+\n+(define_insn_reservation \"lua_insn_alu\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none,unknown\")\n+\t\t\t\t   (eq_attr \"type\" \"alu\")))\n+\t\t\t \"lua_decodern,lua_p12\")\n+\n+(define_insn_reservation \"lua_insn_alu_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"alu\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p12\")\n+\n+(define_insn_reservation \"lua_insn_alu_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t\t   (eq_attr \"type\" \"alu\")))\n+\t\t\t \"lua_decoder01,lua_p12,lua_p45\")\n+\n+(define_insn_reservation \"lua_insn_alu_both\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"both\")\n+\t\t\t\t   (eq_attr \"type\" \"alu\")))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p12,lua_p45\")\n+\n+(define_insn_reservation \"lua_insn_alu1\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none,unknown\")\n+\t\t\t\t   (eq_attr \"type\" \"alu1\")))\n+\t\t\t \"lua_decodern,lua_p12\")\n+\n+(define_insn_reservation \"lua_insn_alu1_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"alu1\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p12\")\n+\n+(define_insn_reservation \"lua_insn_alu1_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t\t   (eq_attr \"type\" \"alu1\")))\n+\t\t\t \"lua_decoder01,lua_p12,lua_p45\")\n+\n+(define_insn_reservation \"lua_insn_alu1_both\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"both\")\n+\t\t\t\t   (eq_attr \"type\" \"alu1\")))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p12,lua_p45\")\n+\n+(define_insn_reservation \"lua_insn_negnot_incdec\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"negnot,incdec\")))\n+\t\t\t \"lua_decodern,lua_p12\")\n+\n+(define_insn_reservation \"lua_insn_negnot_setcc\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"setcc\")))\n+\t\t\t \"lua_decodern,lua_p2\")\n+\n+(define_insn_reservation \"lua_insn_negnot_setcc_mem\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"!none\")\n+\t\t\t\t   (eq_attr \"type\" \"negnot,setcc\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p2,lua_p45\")\n+\n+(define_insn_reservation \"lua_insn_incdec_mem\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"!none\")\n+\t\t\t\t   (eq_attr \"type\" \"incdec\")))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p12,lua_p45\")\n+\n+(define_insn_reservation \"lua_insn_icmptest\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none,unknown\")\n+\t\t\t\t   (eq_attr \"type\" \"icmp,test\")))\n+\t\t\t \"lua_decodern,lua_p12\")\n+\n+(define_insn_reservation \"lua_insn_icmptest_load\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"icmp,test\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p12\")\n+\n+(define_insn_reservation \"lua_insn_icmptest_store\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"store\")\n+\t\t\t\t   (eq_attr \"type\" \"icmp,test\")))\n+\t\t\t \"lua_decoder01,lua_p12,lua_p45\")\n+\n+(define_insn_reservation \"lua_insn_icmptest_both\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"both\")\n+\t\t\t\t   (eq_attr \"type\" \"icmp,test\")))\n+\t\t\t \"lua_decoder0,lua_p45,lua_p12,lua_p45\")\n+\n+(define_insn_reservation \"lua_insn_sseishft1_mmx\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"none\")\n+\t\t\t\t   (eq_attr \"type\" \"sseishft1,mmx,mmxcmp\")))\n+\t\t\t \"lua_decodern,lua_p03\")\n+\n+(define_insn_reservation \"lua_insn_sseishft1_mmx_mem\" 5\n+\t\t\t (and (eq_attr \"cpu\" \"lujiazui\")\n+\t\t\t      (and (eq_attr \"memory\" \"load\")\n+\t\t\t\t   (eq_attr \"type\" \"sseishft1,mmx,mmxcmp\")))\n+\t\t\t \"lua_decoder01,lua_p45,lua_p03\")"}, {"sha": "ea34a939c68260f56112fe4b2978f35b2c9e9fe3", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -3088,6 +3088,121 @@ struct processor_costs intel_cost = {\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n \n+/* lujiazui_cost should produce code tuned for ZHAOXIN lujiazui CPU.  */\n+static stringop_algs lujiazui_memcpy[2] = {\n+  {libcall, {{32, loop, false}, {8192, rep_prefix_4_byte, false},\n+\t\t\t {-1, libcall, false}}},\n+  {libcall, {{12, unrolled_loop, true}, {32, loop, false},\n+\t\t\t {6144, rep_prefix_8_byte, false},\n+\t\t\t {-1, libcall, false}}}};\n+static stringop_algs lujiazui_memset[2] = {\n+  {libcall, {{32, loop, false}, {8192, rep_prefix_4_byte, false},\n+\t\t\t {-1, libcall, false}}},\n+  {libcall, {{12, loop, true}, {32, loop, false},\n+\t\t\t {640, rep_prefix_8_byte, false},\n+\t\t\t {-1, libcall, false}}}};\n+static const\n+struct processor_costs lujiazui_cost = {\n+  {\n+  /* Start of register allocator costs.  integer->integer move cost is 2.  */\n+  6,\t\t\t\t/* cost for loading QImode using movzbl.  */\n+  {6, 6, 6},\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {6, 6, 6},\t\t\t/* cost of storing integer registers.  */\n+  2,\t\t\t\t\t/* cost of reg,reg fld/fst.  */\n+  {6, 6, 8},\t\t\t/* cost of loading fp registers\n+\t\t\t\tin SFmode, DFmode and XFmode.  */\n+  {6, 6, 8},\t\t\t/* cost of storing fp registers\n+\t\t\t\tin SFmode, DFmode and XFmode.  */\n+  2,\t\t\t\t/* cost of moving MMX register.  */\n+  {6, 6},\t\t\t/* cost of loading MMX registers\n+\t\t\t\tin SImode and DImode.  */\n+  {6, 6},\t\t\t/* cost of storing MMX registers\n+\t\t\t\tin SImode and DImode.  */\n+  2, 3, 4,\t\t\t/* cost of moving XMM,YMM,ZMM register.  */\n+  {6, 6, 6, 10, 15},\t/* cost of loading SSE registers\n+\t\t\t\tin 32,64,128,256 and 512-bit.  */\n+  {6, 6, 6, 10, 15},\t/* cost of storing SSE registers\n+\t\t\t\tin 32,64,128,256 and 512-bit.  */\n+  6, 6,\t\t\t\t/* SSE->integer and integer->SSE moves.  */\n+  6, 6,\t\t\t\t/* mask->integer and integer->mask moves.  */\n+  {6, 6, 6},\t\t/* cost of loading mask register\n+\t\t\t\tin QImode, HImode, SImode.  */\n+  {6, 6, 6},\t\t/* cost if storing mask register\n+\t\t\t\tin QImode, HImode, SImode.  */\n+  2,\t\t\t\t/* cost of moving mask register.  */\n+  /* End of register allocator costs.  */\n+  },\n+\n+  COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction.  */\n+  COSTS_N_INSNS (1) + 1,\t\t/* cost of a lea instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* variable shift costs.  */\n+  COSTS_N_INSNS (1),\t\t\t/* constant shift costs.  */\n+  {COSTS_N_INSNS (2),\t\t\t/* cost of starting multiply for QI.  */\n+   COSTS_N_INSNS (3),\t\t\t/*\t\t\t\t HI.  */\n+   COSTS_N_INSNS (3),\t\t\t/*\t\t\t\t SI.  */\n+   COSTS_N_INSNS (12),\t\t\t/*\t\t\t\t DI.  */\n+   COSTS_N_INSNS (14)},\t\t/*\t\t\t\t other.  */\n+  0,\t\t\t\t/* cost of multiply per each bit set.  */\n+  {COSTS_N_INSNS (22),\t\t\t/* cost of a divide/mod for QI.  */\n+   COSTS_N_INSNS (24),\t\t\t/*\t\t\t    HI.  */\n+   COSTS_N_INSNS (24),\t\t\t/*\t\t\t    SI.  */\n+   COSTS_N_INSNS (150),\t\t\t/*\t\t\t    DI.  */\n+   COSTS_N_INSNS (152)},\t\t/*\t\t\t    other.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movsx.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movzx.  */\n+  8,\t\t\t\t\t/* \"large\" insn.  */\n+  17,\t\t\t\t\t/* MOVE_RATIO.  */\n+  6,\t\t\t\t\t/* CLEAR_RATIO.  */\n+  {6, 6, 6},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {6, 6, 6},\t\t\t/* cost of storing integer registers.  */\n+  {6, 6, 6, 10, 15},\t\t\t/* cost of loading SSE register\n+\t\t\t\tin 32bit, 64bit, 128bit, 256bit and 512bit.  */\n+  {6, 6, 6, 10, 15},\t\t\t/* cost of storing SSE register\n+\t\t\t\tin 32bit, 64bit, 128bit, 256bit and 512bit.  */\n+  {6, 6, 6, 10, 15},\t\t\t/* cost of unaligned loads.  */\n+  {6, 6, 6, 10, 15},\t\t\t/* cost of unaligned storess.  */\n+  2, 3, 4,\t\t\t/* cost of moving XMM,YMM,ZMM register.  */\n+  6,\t\t\t\t/* cost of moving SSE register to integer.  */\n+  18, 6,\t\t\t\t/* Gather load static, per_elt.  */\n+  18, 6,\t\t\t\t/* Gather store static, per_elt.  */\n+  32,\t\t\t\t  \t/* size of l1 cache.  */\n+  4096,\t\t\t\t\t/* size of l2 cache.  */\n+  64,\t\t\t\t\t/* size of prefetch block.  */\n+  /* Lujiazui processor never drop prefetches, like AMD processors.  */\n+  100,\t\t\t\t\t/* number of parallel prefetches.  */\n+  3,\t\t\t\t\t/* Branch cost.  */\n+  COSTS_N_INSNS (3),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of FMUL instruction.  */\n+  COSTS_N_INSNS (22),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of FABS instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of FCHS instruction.  */\n+  COSTS_N_INSNS (44),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (1),\t\t\t/* cost of cheap SSE instruction.  */\n+  COSTS_N_INSNS (3),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (3),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of FMA SS instruction.  */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of FMA SD instruction.  */\n+  COSTS_N_INSNS (13),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (17),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (32),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (60),\t\t\t/* cost of SQRTSD instruction.  */\n+  1, 4, 3, 3,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n+  lujiazui_memcpy,\n+  lujiazui_memset,\n+  COSTS_N_INSNS (4),\t\t\t/* cond_taken_branch_cost.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16:11:8\",\t\t\t\t/* Loop alignment.  */\n+  \"16:11:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n+};\n+\n /* Generic should produce code tuned for Core-i7 (and newer chips)\n    and btver1 (and newer chips).  */\n "}, {"sha": "1ffaeef037c34740020179fc9d7fb3f78d2e3f47", "filename": "gcc/config/i386/x86-tune-sched.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.cc?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -58,6 +58,7 @@ ix86_issue_rate (void)\n     case PROCESSOR_K8:\n     case PROCESSOR_AMDFAM10:\n     case PROCESSOR_BTVER1:\n+    case PROCESSOR_LUJIAZUI:\n       return 3;\n \n     case PROCESSOR_BDVER1:\n@@ -368,6 +369,7 @@ ix86_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n \n     case PROCESSOR_ATHLON:\n     case PROCESSOR_K8:\n+    case PROCESSOR_LUJIAZUI:\n       memory = get_attr_memory (insn);\n \n       /* Show ability of reorder buffer to hide latency of load by executing"}, {"sha": "540e45d02f942f2605e2d33fbb85c3131219c231", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 47, "deletions": 42, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -41,8 +41,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* X86_TUNE_SCHEDULE: Enable scheduling.  */\n DEF_TUNE (X86_TUNE_SCHEDULE, \"schedule\",\n           m_PENT | m_LAKEMONT | m_PPRO | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n-\t  | m_INTEL | m_KNL | m_KNM | m_K6_GEODE | m_AMD_MULTIPLE | m_GOLDMONT\n-\t  | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_INTEL | m_KNL | m_KNM | m_K6_GEODE | m_AMD_MULTIPLE | m_LUJIAZUI\n+     | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_PARTIAL_REG_DEPENDENCY: Enable more register renaming\n    on modern chips.  Prefer stores affecting whole integer register\n@@ -51,8 +51,8 @@ DEF_TUNE (X86_TUNE_SCHEDULE, \"schedule\",\n DEF_TUNE (X86_TUNE_PARTIAL_REG_DEPENDENCY, \"partial_reg_dependency\",\n           m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE | m_CORE_AVX2\n \t  | m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_GOLDMONT_PLUS | m_INTEL\n-\t  | m_KNL | m_KNM | m_AMD_MULTIPLE | m_TREMONT | m_ALDERLAKE\n-\t  | m_GENERIC)\n+\t  | m_KNL | m_KNM | m_AMD_MULTIPLE | m_LUJIAZUI | m_TREMONT\n+\t  | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY: This knob promotes all store\n    destinations to be 128bit to allow register renaming on 128bit SSE units,\n@@ -62,22 +62,23 @@ DEF_TUNE (X86_TUNE_PARTIAL_REG_DEPENDENCY, \"partial_reg_dependency\",\n    that can be partly masked by careful scheduling of moves.  */\n DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY, \"sse_partial_reg_dependency\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_AMDFAM10\n-\t  | m_BDVER | m_ZNVER | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_BDVER | m_ZNVER | m_LUJIAZUI | m_TREMONT | m_ALDERLAKE\n+\t  | m_GENERIC)\n \n /* X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY: This knob avoids\n    partial write to the destination in scalar SSE conversion from FP\n    to FP.  */\n DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY,\n \t  \"sse_partial_reg_fp_converts_dependency\",\n \t  m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_AMDFAM10\n-\t  | m_BDVER | m_ZNVER | m_ALDERLAKE | m_GENERIC)\n+\t  | m_BDVER | m_ZNVER | m_LUJIAZUI | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY: This knob avoids partial\n    write to the destination in scalar SSE conversion from integer to FP.  */\n DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY,\n \t  \"sse_partial_reg_converts_dependency\",\n \t  m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_AMDFAM10\n-\t  | m_BDVER | m_ZNVER | m_ALDERLAKE | m_GENERIC)\n+\t  | m_BDVER | m_ZNVER | m_LUJIAZUI | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_DEST_FALSE_DEP_FOR_GLC: This knob inserts zero-idiom before\n    several insns to break false dependency on the dest register for GLC\n@@ -108,39 +109,39 @@ DEF_TUNE (X86_TUNE_PARTIAL_FLAG_REG_STALL, \"partial_flag_reg_stall\",\n DEF_TUNE (X86_TUNE_MOVX, \"movx\",\n           m_PPRO | m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE\n \t  | m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_KNL | m_KNM | m_INTEL\n-\t  | m_GOLDMONT_PLUS | m_GEODE | m_AMD_MULTIPLE\n+\t  | m_GOLDMONT_PLUS | m_GEODE | m_AMD_MULTIPLE | m_LUJIAZUI\n \t  | m_CORE_AVX2 | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_MEMORY_MISMATCH_STALL: Avoid partial stores that are followed by\n    full sized loads.  */\n DEF_TUNE (X86_TUNE_MEMORY_MISMATCH_STALL, \"memory_mismatch_stall\",\n           m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_INTEL\n \t  | m_KNL | m_KNM | m_GOLDMONT | m_GOLDMONT_PLUS | m_AMD_MULTIPLE\n-\t  | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_LUJIAZUI | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_32: Fuse compare with a subsequent\n    conditional jump instruction for 32 bit TARGET.  */\n DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH_32, \"fuse_cmp_and_branch_32\",\n-\t  m_CORE_ALL | m_BDVER | m_ZNVER | m_GENERIC)\n+\t  m_CORE_ALL | m_BDVER | m_ZNVER | m_LUJIAZUI | m_GENERIC)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_64: Fuse compare with a subsequent\n    conditional jump instruction for TARGET_64BIT.  */\n DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH_64, \"fuse_cmp_and_branch_64\",\n \t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_BDVER\n-\t  | m_ZNVER | m_GENERIC)\n+\t  | m_ZNVER | m_LUJIAZUI | m_GENERIC)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS: Fuse compare with a\n    subsequent conditional jump instruction when the condition jump\n    check sign flag (SF) or overflow flag (OF).  */\n DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS, \"fuse_cmp_and_branch_soflags\",\n \t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_BDVER\n-\t  | m_ZNVER | m_GENERIC)\n+\t  | m_ZNVER | m_LUJIAZUI | m_GENERIC)\n \n /* X86_TUNE_FUSE_ALU_AND_BRANCH: Fuse alu with a subsequent conditional\n    jump instruction when the alu instruction produces the CCFLAG consumed by\n    the conditional jump instruction. */\n DEF_TUNE (X86_TUNE_FUSE_ALU_AND_BRANCH, \"fuse_alu_and_branch\",\n-          m_SANDYBRIDGE | m_CORE_AVX2 | m_GENERIC)\n+\t\t  m_SANDYBRIDGE | m_CORE_AVX2 | m_LUJIAZUI | m_GENERIC)\n \n \n /*****************************************************************************/\n@@ -157,7 +158,7 @@ DEF_TUNE (X86_TUNE_FUSE_ALU_AND_BRANCH, \"fuse_alu_and_branch\",\n \n DEF_TUNE (X86_TUNE_ACCUMULATE_OUTGOING_ARGS, \"accumulate_outgoing_args\",\n \t  m_PPRO | m_P4_NOCONA | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL\n-\t  | m_GOLDMONT | m_GOLDMONT_PLUS | m_ATHLON_K8)\n+\t  | m_GOLDMONT | m_GOLDMONT_PLUS | m_ATHLON_K8 | m_LUJIAZUI)\n \n /* X86_TUNE_PROLOGUE_USING_MOVE: Do not use push/pop in prologues that are\n    considered on critical path.  */\n@@ -171,15 +172,15 @@ DEF_TUNE (X86_TUNE_EPILOGUE_USING_MOVE, \"epilogue_using_move\",\n \n /* X86_TUNE_USE_LEAVE: Use \"leave\" instruction in epilogues where it fits.  */\n DEF_TUNE (X86_TUNE_USE_LEAVE, \"use_leave\",\n-\t  m_386 | m_CORE_ALL | m_K6_GEODE | m_AMD_MULTIPLE | m_TREMONT\n-\t  | m_ALDERLAKE | m_GENERIC)\n+\t  m_386 | m_CORE_ALL | m_K6_GEODE | m_AMD_MULTIPLE | m_LUJIAZUI\n+\t  | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_PUSH_MEMORY: Enable generation of \"push mem\" instructions.\n    Some chips, like 486 and Pentium works faster with separate load\n    and push instructions.  */\n DEF_TUNE (X86_TUNE_PUSH_MEMORY, \"push_memory\",\n           m_386 | m_P4_NOCONA | m_CORE_ALL | m_K6_GEODE | m_AMD_MULTIPLE\n-\t  | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_LUJIAZUI | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_SINGLE_PUSH: Enable if single push insn is preferred\n    over esp subtraction.  */\n@@ -234,7 +235,7 @@ DEF_TUNE (X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL, \"software_prefetching_benefi\n \n /* X86_TUNE_LCP_STALL: Avoid an expensive length-changing prefix stall\n    on 16-bit immediate moves into memory on Core2 and Corei7.  */\n-DEF_TUNE (X86_TUNE_LCP_STALL, \"lcp_stall\", m_CORE_ALL | m_GENERIC)\n+DEF_TUNE (X86_TUNE_LCP_STALL, \"lcp_stall\", m_CORE_ALL | m_LUJIAZUI | m_GENERIC)\n \n /* X86_TUNE_READ_MODIFY: Enable use of read-modify instructions such\n    as \"add mem, reg\".  */\n@@ -249,19 +250,20 @@ DEF_TUNE (X86_TUNE_READ_MODIFY, \"read_modify\", ~(m_PENT | m_LAKEMONT | m_PPRO))\n DEF_TUNE (X86_TUNE_USE_INCDEC, \"use_incdec\",\n           ~(m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE\n \t    | m_BONNELL | m_SILVERMONT | m_INTEL |  m_KNL | m_KNM | m_GOLDMONT\n-\t    | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC))\n+\t    | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_LUJIAZUI\n+\t    | m_GENERIC))\n \n /* X86_TUNE_INTEGER_DFMODE_MOVES: Enable if integer moves are preferred\n    for DFmode copies */\n DEF_TUNE (X86_TUNE_INTEGER_DFMODE_MOVES, \"integer_dfmode_moves\",\n           ~(m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n-\t    | m_KNL | m_KNM | m_INTEL | m_GEODE | m_AMD_MULTIPLE | m_GOLDMONT\n-\t    | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC))\n+\t    | m_KNL | m_KNM | m_INTEL | m_GEODE | m_AMD_MULTIPLE | m_LUJIAZUI\n+\t    | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC))\n \n /* X86_TUNE_OPT_AGU: Optimize for Address Generation Unit. This flag\n    will impact LEA instruction selection. */\n DEF_TUNE (X86_TUNE_OPT_AGU, \"opt_agu\", m_BONNELL | m_SILVERMONT | m_KNL\n-\t | m_KNM | m_GOLDMONT | m_GOLDMONT_PLUS | m_INTEL)\n+\t | m_KNM | m_GOLDMONT | m_GOLDMONT_PLUS | m_INTEL | m_LUJIAZUI)\n \n /* X86_TUNE_AVOID_LEA_FOR_ADDR: Avoid lea for address computation.  */\n DEF_TUNE (X86_TUNE_AVOID_LEA_FOR_ADDR, \"avoid_lea_for_addr\",\n@@ -294,7 +296,7 @@ DEF_TUNE (X86_TUNE_SINGLE_STRINGOP, \"single_stringop\", m_386 | m_P4_NOCONA)\n    move/set sequences of bytes with known size.  */\n DEF_TUNE (X86_TUNE_PREFER_KNOWN_REP_MOVSB_STOSB,\n \t  \"prefer_known_rep_movsb_stosb\",\n-\t  m_SKYLAKE | m_ALDERLAKE | m_TREMONT | m_CORE_AVX512)\n+\t  m_SKYLAKE | m_ALDERLAKE | m_TREMONT | m_CORE_AVX512 | m_LUJIAZUI)\n \n /* X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES: Enable generation of\n    compact prologues and epilogues by issuing a misaligned moves.  This\n@@ -303,15 +305,15 @@ DEF_TUNE (X86_TUNE_PREFER_KNOWN_REP_MOVSB_STOSB,\n    FIXME: This may actualy be a win on more targets than listed here.  */\n DEF_TUNE (X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES,\n \t  \"misaligned_move_string_pro_epilogues\",\n-\t  m_386 | m_486 | m_CORE_ALL | m_AMD_MULTIPLE | m_TREMONT\n+\t  m_386 | m_486 | m_CORE_ALL | m_AMD_MULTIPLE | m_LUJIAZUI | m_TREMONT\n \t  | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_USE_SAHF: Controls use of SAHF.  */\n DEF_TUNE (X86_TUNE_USE_SAHF, \"use_sahf\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n \t  | m_KNL | m_KNM | m_INTEL | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER\n-\t  | m_BTVER | m_ZNVER | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT\n-\t  | m_ALDERLAKE | m_GENERIC)\n+\t  | m_BTVER | m_ZNVER | m_LUJIAZUI | m_GOLDMONT | m_GOLDMONT_PLUS\n+\t  | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_USE_CLTD: Controls use of CLTD and CTQO instructions.  */\n DEF_TUNE (X86_TUNE_USE_CLTD, \"use_cltd\",\n@@ -321,13 +323,14 @@ DEF_TUNE (X86_TUNE_USE_CLTD, \"use_cltd\",\n /* X86_TUNE_USE_BT: Enable use of BT (bit test) instructions.  */\n DEF_TUNE (X86_TUNE_USE_BT, \"use_bt\",\n           m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL\n-\t  | m_LAKEMONT | m_AMD_MULTIPLE | m_GOLDMONT | m_GOLDMONT_PLUS\n-\t  | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_LAKEMONT | m_AMD_MULTIPLE | m_LUJIAZUI | m_GOLDMONT\n+\t  | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_AVOID_FALSE_DEP_FOR_BMI: Avoid false dependency\n    for bit-manipulation instructions.  */\n DEF_TUNE (X86_TUNE_AVOID_FALSE_DEP_FOR_BMI, \"avoid_false_dep_for_bmi\",\n-\t  m_SANDYBRIDGE | m_CORE_AVX2 | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  m_SANDYBRIDGE | m_CORE_AVX2 | m_TREMONT | m_ALDERLAKE | m_LUJIAZUI\n+     | m_GENERIC)\n \n /* X86_TUNE_ADJUST_UNROLL: This enables adjusting the unroll factor based\n    on hardware capabilities. Bdver3 hardware has a loop buffer which makes\n@@ -339,18 +342,19 @@ DEF_TUNE (X86_TUNE_ADJUST_UNROLL, \"adjust_unroll_factor\", m_BDVER3 | m_BDVER4)\n    if-converted sequence to one.  */\n DEF_TUNE (X86_TUNE_ONE_IF_CONV_INSN, \"one_if_conv_insn\",\n \t  m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_CORE_ALL | m_GOLDMONT\n-\t  | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_LUJIAZUI | m_GENERIC)\n \n /* X86_TUNE_AVOID_MFENCE: Use lock prefixed instructions instead of mfence.  */\n DEF_TUNE (X86_TUNE_AVOID_MFENCE, \"avoid_mfence\",\n-\t m_CORE_ALL | m_BDVER | m_ZNVER | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t m_CORE_ALL | m_BDVER | m_ZNVER | m_LUJIAZUI | m_TREMONT | m_ALDERLAKE\n+    | m_GENERIC)\n \n /* X86_TUNE_EXPAND_ABS: This enables a new abs pattern by\n    generating instructions for abs (x) = (((signed) x >> (W-1) ^ x) -\n    (signed) x >> (W-1)) instead of cmove or SSE max/abs instructions.  */\n DEF_TUNE (X86_TUNE_EXPAND_ABS, \"expand_abs\",\n \t  m_CORE_ALL | m_SILVERMONT | m_KNL | m_KNM | m_GOLDMONT\n-\t  | m_GOLDMONT_PLUS)\n+\t  | m_GOLDMONT_PLUS | m_LUJIAZUI)\n \n /*****************************************************************************/\n /* 387 instruction selection tuning                                          */\n@@ -367,17 +371,17 @@ DEF_TUNE (X86_TUNE_USE_HIMODE_FIOP, \"use_himode_fiop\",\n DEF_TUNE (X86_TUNE_USE_SIMODE_FIOP, \"use_simode_fiop\",\n           ~(m_PENT | m_LAKEMONT | m_PPRO | m_CORE_ALL | m_BONNELL\n \t    | m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_AMD_MULTIPLE\n-\t    | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE\n-\t    | m_GENERIC))\n+\t    | m_LUJIAZUI | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT\n+\t    | m_ALDERLAKE | m_GENERIC))\n \n /* X86_TUNE_USE_FFREEP: Use freep instruction instead of fstp.  */\n-DEF_TUNE (X86_TUNE_USE_FFREEP, \"use_ffreep\", m_AMD_MULTIPLE)\n+DEF_TUNE (X86_TUNE_USE_FFREEP, \"use_ffreep\", m_AMD_MULTIPLE | m_LUJIAZUI)\n \n /* X86_TUNE_EXT_80387_CONSTANTS: Use fancy 80387 constants, such as PI.  */\n DEF_TUNE (X86_TUNE_EXT_80387_CONSTANTS, \"ext_80387_constants\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n-\t  | m_KNL | m_KNM | m_INTEL | m_K6_GEODE | m_ATHLON_K8 | m_GOLDMONT\n-\t  | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_KNL | m_KNM | m_INTEL | m_K6_GEODE | m_ATHLON_K8 | m_LUJIAZUI\n+\t  | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /*****************************************************************************/\n /* SSE instruction selection tuning                                          */\n@@ -393,14 +397,14 @@ DEF_TUNE (X86_TUNE_GENERAL_REGS_SSE_SPILL, \"general_regs_sse_spill\",\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL, \"sse_unaligned_load_optimal\",\n \t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_SILVERMONT | m_KNL | m_KNM\n \t  | m_INTEL | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE\n-\t  | m_AMDFAM10 | m_BDVER | m_BTVER | m_ZNVER | m_GENERIC)\n+\t  | m_AMDFAM10 | m_BDVER | m_BTVER | m_ZNVER | m_LUJIAZUI | m_GENERIC)\n \n /* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL: Use movups for misaligned stores\n    instead of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL, \"sse_unaligned_store_optimal\",\n \t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_SILVERMONT | m_KNL | m_KNM\n-\t  | m_INTEL | m_GOLDMONT | m_GOLDMONT_PLUS\n-\t  | m_TREMONT | m_ALDERLAKE | m_BDVER | m_ZNVER | m_GENERIC)\n+\t  | m_INTEL | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE\n+\t  | m_BDVER | m_ZNVER | m_LUJIAZUI | m_GENERIC)\n \n /* X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL: Use packed single\n    precision 128bit instructions instead of double where possible.   */\n@@ -409,13 +413,14 @@ DEF_TUNE (X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL, \"sse_packed_single_insn_optim\n \n /* X86_TUNE_SSE_TYPELESS_STORES: Always movaps/movups for 128bit stores.   */\n DEF_TUNE (X86_TUNE_SSE_TYPELESS_STORES, \"sse_typeless_stores\",\n-\t  m_AMD_MULTIPLE | m_CORE_ALL | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  m_AMD_MULTIPLE | m_LUJIAZUI | m_CORE_ALL | m_TREMONT | m_ALDERLAKE\n+\t  | m_GENERIC)\n \n /* X86_TUNE_SSE_LOAD0_BY_PXOR: Always use pxor to load0 as opposed to\n    xorps/xorpd and other variants.  */\n DEF_TUNE (X86_TUNE_SSE_LOAD0_BY_PXOR, \"sse_load0_by_pxor\",\n \t  m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BDVER | m_BTVER | m_ZNVER\n-\t  | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n+\t  | m_LUJIAZUI | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_INTER_UNIT_MOVES_TO_VEC: Enable moves in from integer\n    to SSE registers.  If disabled, the moves will be done by storing"}, {"sha": "a2e2a303ff1f2db96bda4b70ca9eb338ee0a4fe2", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -21840,6 +21840,9 @@ Intel Knights Landing CPU.\n @item knm\n Intel Knights Mill CPU.\n \n+@item lujiazui\n+ZHAOXIN lujiazui CPU.\n+\n @item amdfam10h\n AMD Family 10h CPU.\n "}, {"sha": "8becba3952229644c7fecd5ba4457726535810b5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -31816,6 +31816,11 @@ VIA Nano Quad Core CPU with x86-64, MMX, SSE, SSE2, SSE3, SSSE3 and SSE4.1\n instruction set support.\n (No scheduling is implemented for this chip.)\n \n+@item lujiazui\n+ZHAOXIN lujiazui CPU with x86-64, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,\n+SSE4.2, AVX, POPCNT, AES, PCLMUL, RDRND, XSAVE, XSAVEOPT, FSGSBASE, CX16,\n+ABM, BMI, BMI2, F16C, FXSR, RDSEED instruction set support.\n+\n @item geode\n AMD Geode embedded processor with MMX and 3DNow!@: instruction set support.\n @end table"}, {"sha": "8f74352eb502f28e80e0a829b18c5c58bdc12c3c", "filename": "gcc/testsuite/g++.target/i386/mv32.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv32.C?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -0,0 +1,31 @@\n+// Test that dispatching can choose the right multiversion\n+// for ZHAOXIN CPU with the same internal GCC processor id\n+\n+// { dg-do run }\n+// { dg-require-ifunc \"\" }\n+// { dg-options \"-O2\" }\n+\n+#include <assert.h>\n+\n+int __attribute__ ((target(\"default\")))\n+foo ()\n+{\n+  return 0;\n+}\n+\n+int __attribute__ ((target(\"arch=lujiazui\"))) foo () {\n+  return 1;\n+}\n+\n+\n+int main ()\n+{\n+  int val = foo ();\n+\n+  if (__builtin_cpu_is (\"lujiazui\"))\n+    assert (val == 1);\n+  else\n+    assert (val == 0);\n+\n+  return 0;\n+}"}, {"sha": "b76dddb86a2c47aece42dfd857d52667dfdb55b2", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aff82c3771242d957c0f744cf62b42ed2f2a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=a239aff82c3771242d957c0f744cf62b42ed2f2a", "patch": "@@ -184,6 +184,7 @@ extern void test_arch_cooperlake (void)         __attribute__((__target__(\"arch=\n extern void test_arch_sapphirerapids (void)\t__attribute__((__target__(\"arch=sapphirerapids\")));\n extern void test_arch_alderlake (void)          __attribute__((__target__(\"arch=alderlake\")));\n extern void test_arch_rocketlake (void)         __attribute__((__target__(\"arch=rocketlake\")));\n+extern void test_arch_lujiazui (void)\t\t\t__attribute__((__target__(\"arch=lujiazui\")));\n extern void test_arch_k8 (void)\t\t\t__attribute__((__target__(\"arch=k8\")));\n extern void test_arch_k8_sse3 (void)\t\t__attribute__((__target__(\"arch=k8-sse3\")));\n extern void test_arch_opteron (void)\t\t__attribute__((__target__(\"arch=opteron\")));\n@@ -205,6 +206,7 @@ extern void test_tune_core2 (void)\t\t__attribute__((__target__(\"tune=core2\")));\n extern void test_tune_corei7 (void)\t\t__attribute__((__target__(\"tune=corei7\")));\n extern void test_tune_corei7_avx (void)\t\t__attribute__((__target__(\"tune=corei7-avx\")));\n extern void test_tune_core_avx2 (void)\t\t__attribute__((__target__(\"tune=core-avx2\")));\n+extern void test_tune_lujiazui (void)\t\t\t__attribute__((__target__(\"tune=lujiazui\")));\n extern void test_tune_k8 (void)\t\t\t__attribute__((__target__(\"tune=k8\")));\n extern void test_tune_k8_sse3 (void)\t\t__attribute__((__target__(\"tune=k8-sse3\")));\n extern void test_tune_opteron (void)\t\t__attribute__((__target__(\"tune=opteron\")));"}]}