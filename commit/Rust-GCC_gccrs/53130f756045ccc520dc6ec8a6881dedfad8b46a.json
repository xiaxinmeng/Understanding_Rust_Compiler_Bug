{"sha": "53130f756045ccc520dc6ec8a6881dedfad8b46a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMxMzBmNzU2MDQ1Y2NjNTIwZGM2ZWM4YTY4ODFkZWRmYWQ4YjQ2YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-10T14:24:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-10T14:24:03Z"}, "message": "re PR c++/49691 (ICE  in cp_parser_late_return_type_opt, at cp/parser.c:15562)\n\n\tPR c++/49691\n\t* parser.c (cp_parser_late_return_type_opt): Check quals parameter\n\trather than current_class_type to determine whether to set 'this'.\n\t(cp_parser_direct_declarator): Pass -1 to quals if member_p is false.\n\t(cp_parser_init_declarator): Pass down member_p.\n\nFrom-SVN: r176120", "tree": {"sha": "791dd149ab8ea0df82b255c78fc444837e3d1ae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/791dd149ab8ea0df82b255c78fc444837e3d1ae9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53130f756045ccc520dc6ec8a6881dedfad8b46a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53130f756045ccc520dc6ec8a6881dedfad8b46a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53130f756045ccc520dc6ec8a6881dedfad8b46a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53130f756045ccc520dc6ec8a6881dedfad8b46a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7746ff43a6f8e6e555464367c08e0a1f43eedc57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7746ff43a6f8e6e555464367c08e0a1f43eedc57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7746ff43a6f8e6e555464367c08e0a1f43eedc57"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "765c33bcaec30887415a62b3c0b05e95c5830b38", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53130f756045ccc520dc6ec8a6881dedfad8b46a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53130f756045ccc520dc6ec8a6881dedfad8b46a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=53130f756045ccc520dc6ec8a6881dedfad8b46a", "patch": "@@ -1,3 +1,11 @@\n+2011-07-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49691\n+\t* parser.c (cp_parser_late_return_type_opt): Check quals parameter\n+\trather than current_class_type to determine whether to set 'this'.\n+\t(cp_parser_direct_declarator): Pass -1 to quals if member_p is false.\n+\t(cp_parser_init_declarator): Pass down member_p.\n+\n 2011-07-09  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (build_vec_init_elt): Strip TARGET_EXPR."}, {"sha": "64be92335dad5e764db64986df200eaebcc51bf6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53130f756045ccc520dc6ec8a6881dedfad8b46a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53130f756045ccc520dc6ec8a6881dedfad8b46a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=53130f756045ccc520dc6ec8a6881dedfad8b46a", "patch": "@@ -14388,7 +14388,7 @@ cp_parser_init_declarator (cp_parser* parser,\n     = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n \t\t\t    &ctor_dtor_or_conv_p,\n \t\t\t    /*parenthesized_p=*/NULL,\n-\t\t\t    /*member_p=*/false);\n+\t\t\t    member_p);\n   /* Gather up the deferred checks.  */\n   stop_deferring_access_checks ();\n \n@@ -14971,8 +14971,8 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t  /* Parse the virt-specifier-seq.  */\n \t\t  virt_specifiers = cp_parser_virt_specifier_seq_opt (parser);\n \n-\t\t  late_return\n-\t\t    = cp_parser_late_return_type_opt (parser, cv_quals);\n+\t\t  late_return = (cp_parser_late_return_type_opt\n+\t\t\t\t (parser, member_p ? cv_quals : -1));\n \n \t\t  /* Create the function-declarator.  */\n \t\t  declarator = make_call_declarator (declarator,\n@@ -15538,7 +15538,10 @@ cp_parser_virt_specifier_seq_opt (cp_parser* parser)\n \n    -> trailing-type-specifier-seq abstract-declarator(opt)\n \n-   Returns the type indicated by the type-id.  */\n+   Returns the type indicated by the type-id.\n+\n+   QUALS is either a bitmask of cv_qualifiers or -1 for a non-member\n+   function.  */\n \n static tree\n cp_parser_late_return_type_opt (cp_parser* parser, cp_cv_quals quals)\n@@ -15555,7 +15558,7 @@ cp_parser_late_return_type_opt (cp_parser* parser, cp_cv_quals quals)\n   /* Consume the ->.  */\n   cp_lexer_consume_token (parser->lexer);\n \n-  if (current_class_type)\n+  if (quals >= 0)\n     {\n       /* DR 1207: 'this' is in scope in the trailing return type.  */\n       tree this_parm = build_this_parm (current_class_type, quals);"}, {"sha": "cfc09f049a2e05b768e654636a45382f9227b099", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53130f756045ccc520dc6ec8a6881dedfad8b46a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53130f756045ccc520dc6ec8a6881dedfad8b46a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53130f756045ccc520dc6ec8a6881dedfad8b46a", "patch": "@@ -1,3 +1,10 @@\n+2011-07-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/regress/regress6.C: New.\n+\t* g++.dg/parse/crash45.C: Adjust message.\n+\t* g++.dg/template/crash38.C: Adjust message.\n+\t* g++.dg/template/crash64.C: Adjust message.\n+\n 2011-07-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* c-c++-common/dfp/func-vararg-alternate-d128-2.c: Support x32."}, {"sha": "6de64c0b3476734f3754d658a4b26b7a17fc20d6", "filename": "gcc/testsuite/g++.dg/cpp0x/regress/regress6.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53130f756045ccc520dc6ec8a6881dedfad8b46a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fregress6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53130f756045ccc520dc6ec8a6881dedfad8b46a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fregress6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fregress6.C?ref=53130f756045ccc520dc6ec8a6881dedfad8b46a", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/49691\n+// { dg-options -std=c++0x }\n+\n+struct A { int x; };\n+A* f();\n+struct B {\n+  void g()\n+  {\n+    int(f()->x);\n+  }\n+};"}, {"sha": "d2fbc8ca97c2f29f46223172054773a642cdd67e", "filename": "gcc/testsuite/g++.dg/parse/crash45.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53130f756045ccc520dc6ec8a6881dedfad8b46a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53130f756045ccc520dc6ec8a6881dedfad8b46a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash45.C?ref=53130f756045ccc520dc6ec8a6881dedfad8b46a", "patch": "@@ -3,5 +3,5 @@\n \n struct A\n {\n-  template <class> int f (B);\t// { dg-error \"was not declared in this scope|cannot be a member template\" }\n+  template <class> int f (B);\t// { dg-error \"was not declared in this scope|cannot be a member template|has not been declared\" }\n };"}, {"sha": "f4cf299859cf7419fda5b63a8b1a81b2c48bdb42", "filename": "gcc/testsuite/g++.dg/template/crash38.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53130f756045ccc520dc6ec8a6881dedfad8b46a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53130f756045ccc520dc6ec8a6881dedfad8b46a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash38.C?ref=53130f756045ccc520dc6ec8a6881dedfad8b46a", "patch": "@@ -4,5 +4,5 @@ class A\n {\n   template<class R>\n   static void f(X&); // { dg-error \"\" }\n-  inline void A::f<void>(X&); // { dg-error \"f|expected\" }\n+  inline void A::f<void>(X&); // { dg-error \"f|expected|not been declared\" }\n };"}, {"sha": "1d8fd009803a82faa93fa8008d378a30c1cda9e5", "filename": "gcc/testsuite/g++.dg/template/crash64.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53130f756045ccc520dc6ec8a6881dedfad8b46a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash64.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53130f756045ccc520dc6ec8a6881dedfad8b46a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash64.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash64.C?ref=53130f756045ccc520dc6ec8a6881dedfad8b46a", "patch": "@@ -2,5 +2,5 @@\n \n struct A\n {\n-  template<int> void foo()(0); // { dg-error \"initializer\" } \n+  template<int> void foo()(0); // { dg-error \"\" }\n };"}]}