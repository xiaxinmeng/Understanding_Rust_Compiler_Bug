{"sha": "52eba77915ed77da53928905a731840249cf45d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJlYmE3NzkxNWVkNzdkYTUzOTI4OTA1YTczMTg0MDI0OWNmNDVkNQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-03-11T11:48:49Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-03-11T11:48:49Z"}, "message": "Improve JSON format: add function names for lines.\n\n2019-03-11  Martin Liska  <mliska@suse.cz>\n\n\t* gcov.c (output_intermediate_json_line): Print function\n\tname of each line.\n\t(output_json_intermediate_file): Add new argument.\n\t* doc/gcov.texi: Document the change.\n\nFrom-SVN: r269581", "tree": {"sha": "6e8653e59a9f286bdbd1b37d03682be267c93864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e8653e59a9f286bdbd1b37d03682be267c93864"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52eba77915ed77da53928905a731840249cf45d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52eba77915ed77da53928905a731840249cf45d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52eba77915ed77da53928905a731840249cf45d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52eba77915ed77da53928905a731840249cf45d5/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb90c0014070f4ace5bb88258b31c1d654162306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb90c0014070f4ace5bb88258b31c1d654162306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb90c0014070f4ace5bb88258b31c1d654162306"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "d4bfbece8338ceb6611494ee961de5730099ebba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eba77915ed77da53928905a731840249cf45d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eba77915ed77da53928905a731840249cf45d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52eba77915ed77da53928905a731840249cf45d5", "patch": "@@ -1,3 +1,10 @@\n+2019-03-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcov.c (output_intermediate_json_line): Print function\n+\tname of each line.\n+\t(output_json_intermediate_file): Add new argument.\n+\t* doc/gcov.texi: Document the change.\n+\n 2019-03-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/89588"}, {"sha": "0960e4acb26d052dea5d1a73ee87dcdc796ed222", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eba77915ed77da53928905a731840249cf45d5/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eba77915ed77da53928905a731840249cf45d5/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=52eba77915ed77da53928905a731840249cf45d5", "patch": "@@ -276,6 +276,7 @@ Each @var{line} has the following form:\n   \"count\": @var{count},\n   \"line_number\": @var{line_number},\n   \"unexecuted_block\": @var{unexecuted_block}\n+  \"function_name\": @var{function_name},\n @}\n @end smallexample\n \n@@ -294,6 +295,10 @@ Fields of the @var{line} element have following semantics:\n (not all statements on the line are executed)\n @end itemize\n \n+@item\n+@var{function_name}: a name of a function this @var{line} belongs to\n+(for a line with an inlined statements can be not set)\n+\n Each @var{branch} has the following form:\n \n @smallexample"}, {"sha": "37e787a18232d0813225cb1248a16562e45f4b21", "filename": "gcc/gcov.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eba77915ed77da53928905a731840249cf45d5/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eba77915ed77da53928905a731840249cf45d5/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=52eba77915ed77da53928905a731840249cf45d5", "patch": "@@ -1041,17 +1041,21 @@ process_args (int argc, char **argv)\n   return optind;\n }\n \n-/* Output intermediate LINE sitting on LINE_NUM to JSON OBJECT.  */\n+/* Output intermediate LINE sitting on LINE_NUM to JSON OBJECT.\n+   Add FUNCTION_NAME to the LINE.  */\n \n static void\n output_intermediate_json_line (json::array *object,\n-\t\t\t       line_info *line, unsigned line_num)\n+\t\t\t       line_info *line, unsigned line_num,\n+\t\t\t       const char *function_name)\n {\n   if (!line->exists)\n     return;\n \n   json::object *lineo = new json::object ();\n   lineo->set (\"line_number\", new json::number (line_num));\n+  if (function_name != NULL)\n+    lineo->set (\"function_name\", new json::string (function_name));\n   lineo->set (\"count\", new json::number (line->count));\n   lineo->set (\"unexecuted_block\",\n \t      new json::literal (line->has_unexecuted_block));\n@@ -1141,6 +1145,8 @@ output_json_intermediate_file (json::array *json_files, source_info *src)\n   json::array *lineso = new json::array ();\n   root->set (\"lines\", lineso);\n \n+  function_info *last_non_group_fn = NULL;\n+\n   for (unsigned line_num = 1; line_num <= src->lines.size (); line_num++)\n     {\n       vector<function_info *> *fns = src->get_functions_at_location (line_num);\n@@ -1150,17 +1156,23 @@ output_json_intermediate_file (json::array *json_files, source_info *src)\n \tfor (vector<function_info *>::iterator it2 = fns->begin ();\n \t     it2 != fns->end (); it2++)\n \t  {\n+\t    if (!(*it2)->is_group)\n+\t      last_non_group_fn = *it2;\n+\n \t    vector<line_info> &lines = (*it2)->lines;\n \t    for (unsigned i = 0; i < lines.size (); i++)\n \t      {\n \t\tline_info *line = &lines[i];\n-\t\toutput_intermediate_json_line (lineso, line, line_num + i);\n+\t\toutput_intermediate_json_line (lineso, line, line_num + i,\n+\t\t\t\t\t       (*it2)->m_name);\n \t      }\n \t  }\n \n       /* Follow with lines associated with the source file.  */\n       if (line_num < src->lines.size ())\n-\toutput_intermediate_json_line (lineso, &src->lines[line_num], line_num);\n+\toutput_intermediate_json_line (lineso, &src->lines[line_num], line_num,\n+\t\t\t\t       (last_non_group_fn != NULL\n+\t\t\t\t\t? last_non_group_fn->m_name : NULL));\n     }\n }\n "}]}