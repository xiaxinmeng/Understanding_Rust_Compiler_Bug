{"sha": "64f4bedf7ec92fe4afc7b666aa90363274713c3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRmNGJlZGY3ZWM5MmZlNGFmYzdiNjY2YWE5MDM2MzI3NDcxM2MzYg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-06-30T13:08:19Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-06-30T13:08:19Z"}, "message": "re PR fortran/32472 (ICE in trans-const.c:106 for REPEAT initialization expression of non-parameter)\n\n2007-06-30  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32472\n\t* simplify.c (gfc_simplify_repeat): Add handling of character\n\tliteral for first argument.\n\n2007-06-30  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30284\n\t* gfortran.dg/repeat_f90: New test.\n\nFrom-SVN: r126147", "tree": {"sha": "b41c5295a35ac928f337c34969abfcfe8e43472d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b41c5295a35ac928f337c34969abfcfe8e43472d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64f4bedf7ec92fe4afc7b666aa90363274713c3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f4bedf7ec92fe4afc7b666aa90363274713c3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64f4bedf7ec92fe4afc7b666aa90363274713c3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f4bedf7ec92fe4afc7b666aa90363274713c3b/comments", "author": null, "committer": null, "parents": [{"sha": "1760a1a86bf459482fff422ef2e3fed4f28ac910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1760a1a86bf459482fff422ef2e3fed4f28ac910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1760a1a86bf459482fff422ef2e3fed4f28ac910"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "9dd308425c2b8c55a56acc937751059154428a9e", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f4bedf7ec92fe4afc7b666aa90363274713c3b/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f4bedf7ec92fe4afc7b666aa90363274713c3b/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=64f4bedf7ec92fe4afc7b666aa90363274713c3b", "patch": "@@ -2858,6 +2858,7 @@ gfc_simplify_repeat (gfc_expr *e, gfc_expr *n)\n   gfc_expr *result;\n   int i, j, len, ncop, nlen;\n   mpz_t ncopies;\n+  bool have_length = false;\n \n   /* If NCOPIES isn't a constant, there's nothing we can do.  */\n   if (n->expr_type != EXPR_CONSTANT)\n@@ -2872,29 +2873,49 @@ gfc_simplify_repeat (gfc_expr *e, gfc_expr *n)\n     }\n \n   /* If we don't know the character length, we can do no more.  */\n-  if (e->ts.cl == NULL || e->ts.cl->length == NULL\n-      || e->ts.cl->length->expr_type != EXPR_CONSTANT)\n+  if (e->ts.cl && e->ts.cl->length\n+\t&& e->ts.cl->length->expr_type == EXPR_CONSTANT)\n+    {\n+      len = mpz_get_si (e->ts.cl->length->value.integer);\n+      have_length = true;\n+    }\n+  else if (e->expr_type == EXPR_CONSTANT\n+\t     && (e->ts.cl == NULL || e->ts.cl->length == NULL))\n+    {\n+      len = e->value.character.length;\n+    }\n+  else\n     return NULL;\n \n   /* If the source length is 0, any value of NCOPIES is valid\n      and everything behaves as if NCOPIES == 0.  */\n   mpz_init (ncopies);\n-  if (mpz_sgn (e->ts.cl->length->value.integer) == 0)\n+  if (len == 0)\n     mpz_set_ui (ncopies, 0);\n   else\n     mpz_set (ncopies, n->value.integer);\n \n   /* Check that NCOPIES isn't too large.  */\n-  if (mpz_sgn (e->ts.cl->length->value.integer) != 0)\n+  if (len)\n     {\n-      mpz_t max;\n+      mpz_t max, mlen;\n       int i;\n \n       /* Compute the maximum value allowed for NCOPIES: huge(cl) / len.  */\n       mpz_init (max);\n       i = gfc_validate_kind (BT_INTEGER, gfc_charlen_int_kind, false);\n-      mpz_tdiv_q (max, gfc_integer_kinds[i].huge,\n-\t\t  e->ts.cl->length->value.integer);\n+\n+      if (have_length)\n+\t{\n+\t  mpz_tdiv_q (max, gfc_integer_kinds[i].huge,\n+\t\t      e->ts.cl->length->value.integer);\n+\t}\n+      else\n+\t{\n+\t  mpz_init_set_si (mlen, len);\n+\t  mpz_tdiv_q (max, gfc_integer_kinds[i].huge, mlen);\n+\t  mpz_clear (mlen);\n+\t}\n \n       /* The check itself.  */\n       if (mpz_cmp (ncopies, max) > 0)\n@@ -2915,7 +2936,7 @@ gfc_simplify_repeat (gfc_expr *e, gfc_expr *n)\n   if (e->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  if (mpz_sgn (e->ts.cl->length->value.integer) != 0)\n+  if (len || mpz_sgn (e->ts.cl->length->value.integer) != 0)\n     {\n       const char *res = gfc_extract_int (n, &ncop);\n       gcc_assert (res == NULL);"}, {"sha": "5a763456aea331bfdc48887aa2027060b22e5b71", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f4bedf7ec92fe4afc7b666aa90363274713c3b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f4bedf7ec92fe4afc7b666aa90363274713c3b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=64f4bedf7ec92fe4afc7b666aa90363274713c3b", "patch": "@@ -1,3 +1,8 @@\n+2007-06-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30284\n+\t* gfortran.dg/repeat_f90: New test.\n+\n 2007-06-30  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR testsuite/25241"}, {"sha": "48acea53f1c724ff58351598bafb79582232b30b", "filename": "gcc/testsuite/gfortran.dg/repeat_5.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f4bedf7ec92fe4afc7b666aa90363274713c3b/gcc%2Ftestsuite%2Fgfortran.dg%2Frepeat_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f4bedf7ec92fe4afc7b666aa90363274713c3b/gcc%2Ftestsuite%2Fgfortran.dg%2Frepeat_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frepeat_5.f90?ref=64f4bedf7ec92fe4afc7b666aa90363274713c3b", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+!\n+! PR32472 -- character literals were not implemented in REPEAT.\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+!\n+  CHARACTER(len=1025) :: string2 = repeat('?',1025)\n+  print *, string2\n+end"}]}