{"sha": "23e28b42173b30e3ebe2b8e5765b01dc7fd60da2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNlMjhiNDIxNzNiMzBlM2ViZTJiOGU1NzY1YjAxZGM3ZmQ2MGRhMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-05-21T13:08:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-05-21T13:08:13Z"}, "message": "[multiple changes]\n\n2014-05-21  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_elab.adb, prj-dect.adb: Minor reformatting.\n\n2014-05-21  Robert Dewar  <dewar@adacore.com>\n\n\t* erroutc.ads: Minor comment addition.\n\n2014-05-21  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.ads: Add documentation for use of >*> tag.\n\t* restrict.adb: Make sure we use >*> tag for restriction warnings.\n\n2014-05-21  Gary Dismukes  <dismukes@adacore.com>\n\n\t* debug.adb: Add case of illegal overriding_indicator for a\n\tprotected subprogram body to description of -gnatd.E switch.\n\t* sem_ch6.adb (Verify_Overriding_Indicator): Issue error message\n\tfor cases of giving overriding_indicators on protected subprogram\n\tbodies, but change this to a warning if -gnatd.E is enabled. No\n\tlonger give a style warning about missing indicators on protected\n\tsubprogram bodies.\n\nFrom-SVN: r210704", "tree": {"sha": "975fd0944fae6262222dccf289f20d09a24008ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/975fd0944fae6262222dccf289f20d09a24008ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/comments", "author": null, "committer": null, "parents": [{"sha": "b7b92f15d30a1cae3d59af69dad849fe4025f24f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b92f15d30a1cae3d59af69dad849fe4025f24f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7b92f15d30a1cae3d59af69dad849fe4025f24f"}], "stats": {"total": 96, "additions": 77, "deletions": 19}, "files": [{"sha": "d65b3b0ac4c20912c0bca63e1772138f771336b2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=23e28b42173b30e3ebe2b8e5765b01dc7fd60da2", "patch": "@@ -1,3 +1,26 @@\n+2014-05-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_elab.adb, prj-dect.adb: Minor reformatting.\n+\n+2014-05-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* erroutc.ads: Minor comment addition.\n+\n+2014-05-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.ads: Add documentation for use of >*> tag.\n+\t* restrict.adb: Make sure we use >*> tag for restriction warnings.\n+\n+2014-05-21  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* debug.adb: Add case of illegal overriding_indicator for a\n+\tprotected subprogram body to description of -gnatd.E switch.\n+\t* sem_ch6.adb (Verify_Overriding_Indicator): Issue error message\n+\tfor cases of giving overriding_indicators on protected subprogram\n+\tbodies, but change this to a warning if -gnatd.E is enabled. No\n+\tlonger give a style warning about missing indicators on protected\n+\tsubprogram bodies.\n+\n 2014-05-21  Robert Dewar  <dewar@adacore.com>\n \n \t* prj.ads, sem_ch12.adb, prj.adb, exp_pakd.adb,"}, {"sha": "d5fae2774c608af2d1f336753bb3ee0a5652bc64", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=23e28b42173b30e3ebe2b8e5765b01dc7fd60da2", "patch": "@@ -614,6 +614,11 @@ package body Debug is\n    --\n    --          Errors relating to the new rules about not defining equality\n    --          too late so that composition of equality can be assured.\n+   --\n+   --          Errors relating to overriding indicators on protected subprogram\n+   --          bodies (not an Ada 2012 incompatibility, but might cause errors\n+   --          for existing programs assuming they were legal because GNAT\n+   --          formerly allowed them).\n \n    --  d.F  Sets GNATprove_Mode to True. This allows debugging the frontend in\n    --       the special mode used by GNATprove."}, {"sha": "a42d3dba75c1390ffa312479c04bc11b9ea4c7b4", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=23e28b42173b30e3ebe2b8e5765b01dc7fd60da2", "patch": "@@ -312,10 +312,10 @@ package Errout is\n    --    Insertion character < (Less Than: conditional warning message)\n    --      The character < appearing anywhere in a message is used for a\n    --      conditional error message. If Error_Msg_Warn is True, then the\n-   --      effect is the same as ? described above, and in particular << and\n-   --      <X< have the effect of ?? and ?X? respectively. If Error_Msg_Warn\n-   --      is False, then the < << or <X< sequence is ignored and the message\n-   --      is treated as a error rather than a warning.\n+   --      effect is the same as ? described above, and in particular <<\n+   --      <X< and <*< have the effect of ?? ?X? and ?*? respectively. If\n+   --      Error_Msg_Warn is False, then the < << or <X< sequence is ignored\n+   --      and the message is treated as a error rather than a warning.\n \n    --    Insertion character A-Z (Upper case letter: Ada reserved word)\n    --      If two or more upper case letters appear in the message, they are"}, {"sha": "c638aac1b1e94684d63b028d85d1189cfda4f3d7", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=23e28b42173b30e3ebe2b8e5765b01dc7fd60da2", "patch": "@@ -564,6 +564,10 @@ package Erroutc is\n    --  the corresponding warning string is returned (or the null string if no\n    --  Warning argument was present in the pragma). Tag is the error message\n    --  tag for the message in question or the null string if there is no tag.\n+   --\n+   --  Note: we have a null default for Tag to deal with calls from an old\n+   --  branch of gnat2why, which does not know about tags in the calls but\n+   --  which uses the latest version of erroutc.\n \n    function Warning_Treated_As_Error (Msg : String) return Boolean;\n    --  Returns True if the warning message Msg matches any of the strings"}, {"sha": "a4d07d8828b982c71e1ea13921e8d5409890ace3", "filename": "gcc/ada/prj-dect.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/gcc%2Fada%2Fprj-dect.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/gcc%2Fada%2Fprj-dect.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-dect.adb?ref=23e28b42173b30e3ebe2b8e5765b01dc7fd60da2", "patch": "@@ -215,10 +215,9 @@ package body Prj.Dect is\n       Name   : constant Name_Id := Name_Of (Current_Package, In_Tree);\n    begin\n       if (Qualif = Aggregate and then Name /= Snames.Name_Builder)\n-        or else\n-         (Qualif = Aggregate_Library\n-          and then Name /= Snames.Name_Builder\n-          and then Name /= Snames.Name_Install)\n+        or else (Qualif = Aggregate_Library\n+                  and then Name /= Snames.Name_Builder\n+                  and then Name /= Snames.Name_Install)\n       then\n          Error_Msg_Name_1 := Name;\n          Error_Msg"}, {"sha": "78591c1efcde14ef2db1f683896e25ba8182e097", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=23e28b42173b30e3ebe2b8e5765b01dc7fd60da2", "patch": "@@ -303,7 +303,7 @@ package body Restrict is\n          Error_Msg_Node_1 := N;\n          Error_Msg_Warn := No_Use_Of_Attribute_Warning (A_Id);\n          Error_Msg_N\n-           (\"<violation of restriction `No_Use_Of_Attribute '='> &`#\", N);\n+           (\"<*<violation of restriction `No_Use_Of_Attribute '='> &`#\", N);\n       end if;\n    end Check_Restriction_No_Use_Of_Attribute;\n \n@@ -336,7 +336,7 @@ package body Restrict is\n          Error_Msg_Node_1 := Id;\n          Error_Msg_Warn := No_Use_Of_Pragma_Warning (P_Id);\n          Error_Msg_N\n-           (\"<violation of restriction `No_Use_Of_Pragma '='> &`#\", Id);\n+           (\"<*<violation of restriction `No_Use_Of_Pragma '='> &`#\", Id);\n       end if;\n    end Check_Restriction_No_Use_Of_Pragma;\n \n@@ -645,7 +645,7 @@ package body Restrict is\n \n             if No_Dependences.Table (J).Warn then\n                Error_Msg\n-                 (\"??violation of restriction `No_Dependence '='> &`#\",\n+                 (\"?*?violation of restriction `No_Dependence '='> &`#\",\n                   Sloc (Err));\n             else\n                Error_Msg\n@@ -691,7 +691,7 @@ package body Restrict is\n          Error_Msg_Node_1 := Id;\n          Error_Msg_Warn := No_Specification_Of_Aspect_Warning (A_Id);\n          Error_Msg_N\n-           (\"<violation of restriction `No_Specification_Of_Aspect '='> &`#\",\n+           (\"<*<violation of restriction `No_Specification_Of_Aspect '='> &`#\",\n             Id);\n       end if;\n    end Check_Restriction_No_Specification_Of_Aspect;"}, {"sha": "a3364b8e832048cbea7b499df34063f071980873", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=23e28b42173b30e3ebe2b8e5765b01dc7fd60da2", "patch": "@@ -2782,6 +2782,16 @@ package body Sem_Ch6 is\n             elsif not Present (Overridden_Operation (Spec_Id)) then\n                Error_Msg_NE\n                  (\"subprogram& is not overriding\", Body_Spec, Spec_Id);\n+\n+            --  Overriding indicators aren't allowed for protected subprogram\n+            --  bodies (see the Confirmation in Ada Comment AC95-00213). Change\n+            --  this to a warning if -gnatd.E is enabled.\n+\n+            elsif Ekind (Scope (Spec_Id)) = E_Protected_Type then\n+               Error_Msg_Warn := Error_To_Warning;\n+               Error_Msg_N\n+                 (\"<overriding indicator not allowed for protected \"\n+                  & \"subprogram body\", Body_Spec);\n             end if;\n \n          elsif Must_Not_Override (Body_Spec) then\n@@ -2797,20 +2807,37 @@ package body Sem_Ch6 is\n                  (\"subprogram & overrides predefined operator \",\n                     Body_Spec, Spec_Id);\n \n-            --  If this is not a primitive operation or protected subprogram,\n-            --  then the overriding indicator is altogether illegal.\n+            --  Overriding indicators aren't allowed for protected subprogram\n+            --  bodies (see the Confirmation in Ada Comment AC95-00213). Change\n+            --  this to a warning if -gnatd.E is enabled.\n+\n+            elsif Ekind (Scope (Spec_Id)) = E_Protected_Type then\n+               Error_Msg_Warn := Error_To_Warning;\n \n-            elsif not Is_Primitive (Spec_Id)\n-              and then Ekind (Scope (Spec_Id)) /= E_Protected_Type\n-            then\n+               Error_Msg_N\n+                 (\"<overriding indicator not allowed \" &\n+                  \"for protected subprogram body\",\n+                  Body_Spec);\n+\n+            --  If this is not a primitive operation, then the overriding\n+            --  indicator is altogether illegal.\n+\n+            elsif not Is_Primitive (Spec_Id) then\n                Error_Msg_N\n                  (\"overriding indicator only allowed \" &\n                   \"if subprogram is primitive\",\n                   Body_Spec);\n             end if;\n \n+         --  If checking the style rule and the operation overrides, then\n+         --  issue a warning about a missing overriding_indicator. Protected\n+         --  subprogram bodies are excluded from this style checking, since\n+         --  they aren't primitives (even though their declarations can\n+         --  override) and aren't allowed to have an overriding_indicator.\n+\n          elsif Style_Check\n            and then Present (Overridden_Operation (Spec_Id))\n+           and then Ekind (Scope (Spec_Id)) /= E_Protected_Type\n          then\n             pragma Assert (Unit_Declaration_Node (Body_Id) = N);\n             Style.Missing_Overriding (N, Body_Id);"}, {"sha": "19c6aa29445fe4b7340c8794fd2bcc4a72f72b12", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=23e28b42173b30e3ebe2b8e5765b01dc7fd60da2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2503,7 +2503,7 @@ package body Sem_Elab is\n          Collect_Tasks (Declarations (N));\n       end if;\n \n-      --  We only perform detailed checks in all tasks are library level\n+      --  We only perform detailed checks in all tasks that are library level\n       --  entities. If the master is a subprogram or task, activation will\n       --  depend on the activation of the master itself.\n "}]}