{"sha": "90922b2d107a5f1c32b5c34f3b36aefe02c33a01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA5MjJiMmQxMDdhNWYxYzMyYjVjMzRmM2IzNmFlZmUwMmMzM2EwMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-01-13T09:45:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-01-13T09:45:57Z"}, "message": "complex (arg, [...]): Add, implementing TR1, 8.1.9.\n\n2006-01-13  Paolo Carlini  <pcarlini@suse.de>\n\t    Howard Hinnant  <hhinnant@apple.com>\n\n\t* include/tr1/complex (arg, conj, imag, norm, polar, pow, real):\n\tAdd, implementing TR1, 8.1.9.\n\t(__promote_2): New.\n\t* include/tr1/common.h: New, provides __promote, __promote_2.\n\t* include/Makefile.am: Add.\n\t* include/Makefile.in: Regenerate.\n\t* testsuite/testsuite_tr1.h (check_ret_type): New.\n\t* testsuite/tr1/8_c_compatibility/complex/overloads_int.cc: New.\n\t* testsuite/tr1/8_c_compatibility/complex/overloads_float.cc: New.\n\nCo-Authored-By: Howard Hinnant <hhinnant@apple.com>\n\nFrom-SVN: r109663", "tree": {"sha": "69cbc5ab4f5b1191894f34353c69e0d82d3b19db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69cbc5ab4f5b1191894f34353c69e0d82d3b19db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90922b2d107a5f1c32b5c34f3b36aefe02c33a01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90922b2d107a5f1c32b5c34f3b36aefe02c33a01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90922b2d107a5f1c32b5c34f3b36aefe02c33a01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/comments", "author": null, "committer": null, "parents": [{"sha": "952c7b74000865574276838db7365a76980839a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/952c7b74000865574276838db7365a76980839a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/952c7b74000865574276838db7365a76980839a0"}], "stats": {"total": 392, "additions": 384, "deletions": 8}, "files": [{"sha": "ca1b988e423003859a8658b0275fc9ae99fbd283", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=90922b2d107a5f1c32b5c34f3b36aefe02c33a01", "patch": "@@ -1,3 +1,16 @@\n+2006-01-13  Paolo Carlini  <pcarlini@suse.de>\n+\t    Howard Hinnant  <hhinnant@apple.com>\n+\n+\t* include/tr1/complex (arg, conj, imag, norm, polar, pow, real):\n+\tAdd, implementing TR1, 8.1.9.\n+\t(__promote_2): New.\n+\t* include/tr1/common.h: New, provides __promote, __promote_2.\n+\t* include/Makefile.am: Add.\n+\t* include/Makefile.in: Regenerate.\n+\t* testsuite/testsuite_tr1.h (check_ret_type): New.\n+\t* testsuite/tr1/8_c_compatibility/complex/overloads_int.cc: New.\n+\t* testsuite/tr1/8_c_compatibility/complex/overloads_float.cc: New.\n+\n 2006-01-12  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* acinclude.m4(GLIBCXX_CHECK_LINKER_FEATURES): Enable"}, {"sha": "faa23495f14e6536a3bedf9562bda1b47543fd68", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=90922b2d107a5f1c32b5c34f3b36aefe02c33a01", "patch": "@@ -483,6 +483,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/bind_repeat.h \\\n \t${tr1_srcdir}/bind_iterate.h \\\n \t${tr1_srcdir}/boost_shared_ptr.h \\\n+\t${tr1_srcdir}/common.h \\\n \t${tr1_srcdir}/complex \\\n \t${tr1_srcdir}/functional \\\n \t${tr1_srcdir}/functional_iterate.h \\"}, {"sha": "2425898ff29bf178edabacb18517782cd7142c54", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=90922b2d107a5f1c32b5c34f3b36aefe02c33a01", "patch": "@@ -701,6 +701,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/bind_repeat.h \\\n \t${tr1_srcdir}/bind_iterate.h \\\n \t${tr1_srcdir}/boost_shared_ptr.h \\\n+\t${tr1_srcdir}/common.h \\\n \t${tr1_srcdir}/complex \\\n \t${tr1_srcdir}/functional \\\n \t${tr1_srcdir}/functional_iterate.h \\"}, {"sha": "ca9559e463a619ffadf6eb7468e74e46746dd084", "filename": "libstdc++-v3/include/tr1/common.h", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcommon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcommon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcommon.h?ref=90922b2d107a5f1c32b5c34f3b36aefe02c33a01", "patch": "@@ -0,0 +1,66 @@\n+// Internal header for TR1 complex -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_COMMON_H\n+#define _TR1_COMMON_H 1\n+\n+#include <tr1/type_traits>\n+\n+// namespace std::tr1\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n+  template<typename _Tp, bool = is_integral<_Tp>::value>\n+    struct __promote\n+    { typedef double __type; };\n+\n+  template<typename _Tp>\n+    struct __promote<_Tp, false>\n+    { typedef _Tp __type; };\n+\n+  template<typename _Tp, typename _Up> \n+    struct __promote_2\n+    {\n+    private:\n+      typedef typename __promote<_Tp>::__type __type1;\n+      typedef typename __promote<_Up>::__type __type2;    \n+      \n+    public:\n+      typedef __typeof__(__type1() + __type2()) __type; \n+    };\n+\n+_GLIBCXX_END_NAMESPACE\n+} // namespace std\n+\n+#endif"}, {"sha": "39205afefdc823ba603c8691354bc71fca9ee70a", "filename": "libstdc++-v3/include/tr1/complex", "status": "modified", "additions": 99, "deletions": 7, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex?ref=90922b2d107a5f1c32b5c34f3b36aefe02c33a01", "patch": "@@ -35,6 +35,7 @@\n #define _TR1_COMPLEX 1\n \n #include \"../complex\"\n+#include <tr1/common.h>\n \n // namespace std::tr1\n namespace std\n@@ -51,7 +52,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n   template<typename _Tp> std::complex<_Tp> atanh(const std::complex<_Tp>&);\n   template<typename _Tp> std::complex<_Tp> fabs(const std::complex<_Tp>&);\n \n-  /// @brief acos(__z) [8.1.2]\n+  /// @brief acos(__z) [8.1.2].\n   //  Effects:  Behaves the same as C99 function cacos, defined\n   //            in subclause 7.3.5.1.\n   template<typename _Tp>\n@@ -87,7 +88,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     { return __complex_acos(__z); }\n #endif\n \n-  /// @brief asin(__z) [8.1.3]\n+  /// @brief asin(__z) [8.1.3].\n   //  Effects:  Behaves the same as C99 function casin, defined\n   //            in subclause 7.3.5.2.\n   template<typename _Tp>\n@@ -123,7 +124,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     { return __complex_asin(__z); }\n #endif\n   \n-  /// @brief atan(__z) [8.1.4]\n+  /// @brief atan(__z) [8.1.4].\n   //  Effects:  Behaves the same as C99 function catan, defined\n   //            in subclause 7.3.5.3.\n   template<typename _Tp>\n@@ -167,7 +168,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     { return __complex_atan(__z); }\n #endif\n \n-  /// @brief acosh(__z) [8.1.5]\n+  /// @brief acosh(__z) [8.1.5].\n   //  Effects:  Behaves the same as C99 function cacosh, defined\n   //            in subclause 7.3.6.1.\n   template<typename _Tp>\n@@ -206,7 +207,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     { return __complex_acosh(__z); }\n #endif\n \n-  /// @brief asinh(__z) [8.1.6]\n+  /// @brief asinh(__z) [8.1.6].\n   //  Effects:  Behaves the same as C99 function casin, defined\n   //            in subclause 7.3.6.2.\n   template<typename _Tp>\n@@ -245,7 +246,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     { return __complex_asinh(__z); }\n #endif\n \n-  /// @brief atanh(__z) [8.1.7]\n+  /// @brief atanh(__z) [8.1.7].\n   //  Effects:  Behaves the same as C99 function catanh, defined\n   //            in subclause 7.3.6.3.\n   template<typename _Tp>\n@@ -289,14 +290,105 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     { return __complex_atanh(__z); }\n #endif\n \n-  /// @brief fabs(__z) [8.1.8]\n+  /// @brief fabs(__z) [8.1.8].\n   //  Effects:  Behaves the same as C99 function cabs, defined\n   //            in subclause 7.3.8.1.\n   template<typename _Tp>\n     inline std::complex<_Tp>\n     fabs(const std::complex<_Tp>& __z)\n     { return std::abs(__z); }\n \n+\n+  /// @brief Additional overloads [8.1.9].\n+  //\n+\n+  // See common.h for the primary template.\n+  template<typename _Tp, typename _Up>\n+    struct __promote_2<std::complex<_Tp>, _Up>\n+    {\n+    public:\n+      typedef std::complex<typename __promote_2<_Tp, _Up>::__type> __type;\n+    };\n+\n+  template<typename _Tp, typename _Up>\n+    struct __promote_2<_Tp, std::complex<_Up> >\n+    {\n+    public:\n+      typedef std::complex<typename __promote_2<_Tp, _Up>::__type> __type;\n+    };\n+  \n+  template<typename _Tp, typename _Up>\n+    struct __promote_2<std::complex<_Tp>, std::complex<_Up> >\n+    {\n+    public:\n+      typedef std::complex<typename __promote_2<_Tp, _Up>::__type> __type;\n+    };\n+\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type\n+    arg(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return std::arg(std::complex<__type>(__x));\n+    }\n+\n+  template<typename _Tp>\n+    inline std::complex<typename __promote<_Tp>::__type>\n+    conj(_Tp __x)\n+    { return __x; }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type\n+    imag(_Tp)\n+    { return _Tp(); }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type\n+    norm(_Tp __x)\n+    {\n+      typedef typename __promote<_Tp>::__type __type;\n+      return __type(__x) * __type(__x);\n+    }\n+\n+  template<typename _Tp, typename _Up>\n+    inline std::complex<typename __promote_2<_Tp, _Up>::__type>\n+    polar(const _Tp& __rho, const _Up& __theta)\n+    {\n+      typedef typename __promote_2<_Tp, _Up>::__type __type;\n+      return std::polar(__type(__rho), __type(__theta));\n+    }\n+  \n+  template<typename _Tp, typename _Up>\n+    inline std::complex<typename __promote_2<_Tp, _Up>::__type>\n+    pow(const std::complex<_Tp>& __x, const _Up& __y)\n+    {\n+      typedef typename __promote_2<_Tp, _Up>::__type __type;\n+      return std::pow(std::complex<__type>(__x), __type(__y));\n+    }\n+\n+  template<typename _Tp, typename _Up>\n+    inline std::complex<typename __promote_2<_Tp, _Up>::__type>\n+    pow(const _Tp& __x, const std::complex<_Up>& __y)\n+    {\n+      typedef typename __promote_2<_Tp, _Up>::__type __type;\n+      return std::pow(__type(__x), std::complex<__type>(__y));\n+    }\n+\n+  template<typename _Tp, typename _Up>\n+    inline std::complex<typename __promote_2<_Tp, _Up>::__type>\n+    pow(const std::complex<_Tp>& __x, const std::complex<_Up>& __y)\n+    {\n+      typedef typename __promote_2<_Tp, _Up>::__type __type;\n+      return std::pow(std::complex<__type>(__x),\n+\t\t      std::complex<__type>(__y));\n+    }\n+\n+  template<typename _Tp>\n+    inline typename __promote<_Tp>::__type\n+    real(_Tp __x)\n+    { return __x; }\n+\n _GLIBCXX_END_NAMESPACE\n }\n "}, {"sha": "8fddc8890620db023946440a0280feb54e4ca31e", "filename": "libstdc++-v3/testsuite/testsuite_tr1.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h?ref=90922b2d107a5f1c32b5c34f3b36aefe02c33a01", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Testing utilities for the tr1 testsuite.\n //\n-// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -164,6 +164,13 @@ namespace __gnu_test\n     int foo_v()  volatile       { return 3; }\n     int foo_cv() const volatile { return 4; }\n   };\n+\n+  // For use in 8_c_compatibility.\n+  template<typename R, typename T>\n+    typename std::__enable_if<bool, std::tr1::is_same<R, T>::value>::__type\n+    check_ret_type(T)\n+    { return true; }\n+\n } // namespace __gnu_test\n \n #endif // _GLIBCXX_TESTSUITE_TR1_H"}, {"sha": "d03075a6a4bdcf350fc89b28c8be6db9131ff942", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/complex/overloads_float.cc", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_float.cc?ref=90922b2d107a5f1c32b5c34f3b36aefe02c33a01", "patch": "@@ -0,0 +1,109 @@\n+// 2006-01-12  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.1 Additions to header <complex>\n+\n+#include <tr1/complex>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  using namespace std::tr1;\n+  using namespace __gnu_test;\n+\n+  typedef std::complex<float>       cmplx_f_type;\n+  typedef std::complex<double>      cmplx_d_type;\n+  typedef std::complex<long double> cmplx_ld_type;\n+\n+  const float        f1 = 1.0f;\n+  const double       d1 = 1.0;\n+  const long double ld1 = 1.0l;\n+\n+  const cmplx_f_type  c_f1(f1, f1);\n+  const cmplx_d_type  c_d1(d1, d1);\n+  const cmplx_ld_type c_ld1(ld1, ld1);\n+\n+  check_ret_type<float>(arg(f1));\n+  check_ret_type<double>(arg(d1));\n+  check_ret_type<long double>(arg(ld1));\n+\n+  check_ret_type<cmplx_f_type>(conj(f1));\n+  check_ret_type<cmplx_d_type>(conj(d1));\n+  check_ret_type<cmplx_ld_type>(conj(ld1));\n+  \n+  check_ret_type<float>(imag(f1));\n+  check_ret_type<double>(imag(d1));\n+  check_ret_type<long double>(imag(ld1));\n+  \n+  check_ret_type<float>(norm(f1));\n+  check_ret_type<double>(norm(d1));\n+  check_ret_type<long double>(norm(ld1));\n+\n+  check_ret_type<cmplx_f_type>(polar(f1, f1));\n+  check_ret_type<cmplx_d_type>(polar(d1, f1));\n+  check_ret_type<cmplx_d_type>(polar(f1, d1));\n+  check_ret_type<cmplx_d_type>(polar(d1, d1));\n+  check_ret_type<cmplx_ld_type>(polar(ld1, d1));\n+  check_ret_type<cmplx_ld_type>(polar(d1, ld1));\n+  check_ret_type<cmplx_ld_type>(polar(ld1, f1));\n+  check_ret_type<cmplx_ld_type>(polar(f1, ld1));\n+  check_ret_type<cmplx_ld_type>(polar(ld1, ld1));\n+\n+  check_ret_type<cmplx_f_type>(pow(c_f1, f1));\n+  check_ret_type<cmplx_d_type>(pow(c_d1, f1));\n+  check_ret_type<cmplx_d_type>(pow(c_f1, d1));\n+  check_ret_type<cmplx_d_type>(pow(c_d1, d1));\n+  check_ret_type<cmplx_ld_type>(pow(c_ld1, d1));\n+  check_ret_type<cmplx_ld_type>(pow(c_d1, ld1));\n+  check_ret_type<cmplx_ld_type>(pow(c_ld1, f1));\n+  check_ret_type<cmplx_ld_type>(pow(c_f1, ld1));\n+  check_ret_type<cmplx_ld_type>(pow(c_ld1, ld1));\n+\n+  check_ret_type<cmplx_f_type>(pow(f1, c_f1));\n+  check_ret_type<cmplx_d_type>(pow(d1, c_f1));\n+  check_ret_type<cmplx_d_type>(pow(f1, c_d1));\n+  check_ret_type<cmplx_d_type>(pow(d1, c_d1));\n+  check_ret_type<cmplx_ld_type>(pow(ld1, c_d1));\n+  check_ret_type<cmplx_ld_type>(pow(d1, c_ld1));\n+  check_ret_type<cmplx_ld_type>(pow(ld1, c_f1));\n+  check_ret_type<cmplx_ld_type>(pow(f1, c_ld1));\n+  check_ret_type<cmplx_ld_type>(pow(ld1, c_ld1));\n+\n+  check_ret_type<cmplx_f_type>(pow(c_f1, c_f1));\n+  check_ret_type<cmplx_d_type>(pow(c_d1, c_f1));\n+  check_ret_type<cmplx_d_type>(pow(c_f1, c_d1));\n+  check_ret_type<cmplx_d_type>(pow(c_d1, c_d1));\n+  check_ret_type<cmplx_ld_type>(pow(c_ld1, c_d1));\n+  check_ret_type<cmplx_ld_type>(pow(c_d1, c_ld1));\n+  check_ret_type<cmplx_ld_type>(pow(c_ld1, c_f1));\n+  check_ret_type<cmplx_ld_type>(pow(c_f1, c_ld1));\n+  check_ret_type<cmplx_ld_type>(pow(c_ld1, c_ld1));\n+\n+  check_ret_type<float>(real(f1));\n+  check_ret_type<double>(real(d1));\n+  check_ret_type<long double>(real(ld1));\n+}\n+    \n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "97b4cd2faf9bc36e91d2093f9cf521d9160b28d5", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/complex/overloads_int.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90922b2d107a5f1c32b5c34f3b36aefe02c33a01/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_int.cc?ref=90922b2d107a5f1c32b5c34f3b36aefe02c33a01", "patch": "@@ -0,0 +1,87 @@\n+// 2006-01-12  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.1 Additions to header <complex>\n+\n+#include <tr1/complex>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+  using namespace __gnu_test;\n+\n+  typedef std::complex<float>  cmplx_f_type;\n+  typedef std::complex<double> cmplx_d_type;\n+\n+  const int       i1 = 1;\n+  const unsigned  u1 = 1;\n+  const long      l1 = 1;\n+  const double    f1 = 1.0f;\n+  const double    d0 = 0.0;\n+  const double    d1 = 1.0;\n+    \n+  check_ret_type<double>(arg(i1));\n+  VERIFY( arg(i1) == arg(d1) );\n+  VERIFY( arg(i1) == arg(cmplx_d_type(d1, d0)) );\n+\n+  check_ret_type<cmplx_d_type>(conj(i1));\n+  VERIFY( conj(i1) == conj(d1) );\n+  VERIFY( conj(i1) == conj(cmplx_d_type(d1, d0)) );\n+\n+  check_ret_type<double>(imag(i1));\n+  VERIFY( imag(i1) == imag(d1) );\n+  VERIFY( imag(i1) == imag(cmplx_d_type(d1, d0)) );\n+\n+  check_ret_type<double>(norm(i1));\n+  VERIFY( norm(i1) == norm(d1) );\n+  VERIFY( norm(i1) == norm(cmplx_d_type(d1, d0)) );\n+\n+  check_ret_type<cmplx_d_type>(polar(i1, i1));\n+  VERIFY( polar(i1, i1) == polar(d1, d1) );\n+\n+  // NB: According to the letter of 8.1.9/3 the return type\n+  //     should be a cmplx_d_type, but the existing overload\n+  //     std::pow(const complex<>&, int) wins.\n+  check_ret_type<cmplx_f_type>(pow(cmplx_f_type(f1, f1), i1));\n+\n+  check_ret_type<cmplx_d_type>(pow(cmplx_f_type(f1, f1), u1));\n+  check_ret_type<cmplx_d_type>(pow(cmplx_f_type(f1, f1), l1));\n+  check_ret_type<cmplx_d_type>(pow(cmplx_d_type(d1, d1), i1));\n+  VERIFY( pow(cmplx_d_type(d1, d1), i1) == pow(cmplx_d_type(d1, d1), d1) );\n+\n+  check_ret_type<cmplx_d_type>(pow(i1, cmplx_f_type(f1, f1)));\n+  check_ret_type<cmplx_d_type>(pow(u1, cmplx_f_type(f1, f1)));\n+  check_ret_type<cmplx_d_type>(pow(l1, cmplx_f_type(f1, f1)));\n+  check_ret_type<cmplx_d_type>(pow(i1, cmplx_d_type(d1, d1)));\n+  VERIFY( pow(i1, cmplx_d_type(d1, d1)) == pow(d1, cmplx_d_type(d1, d1)) );\n+\n+  check_ret_type<double>(real(i1));\n+  VERIFY( real(i1) == real(d1) );\n+  VERIFY( real(i1) == real(cmplx_d_type(d1, d1)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}