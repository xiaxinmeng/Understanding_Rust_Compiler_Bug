{"sha": "1985392242d9a6bf8b091f78143d3c1fa9ccd284", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk4NTM5MjI0MmQ5YTZiZjhiMDkxZjc4MTQzZDNjMWZhOWNjZDI4NA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-08-31T20:01:23Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-09-13T16:38:51Z"}, "message": "Clarify 'key_type_t' to 'location_t' as used for 'gcc/diagnostic-spec.h:nowarn_map'\n\nTo make it obvious what exactly the key type is.  No change in behavior.\n\n\tgcc/\n\t* diagnostic-spec.h (typedef xint_hash_t): Use 'location_t' instead of...\n\t(typedef key_type_t): ... this.  Remove.\n\t(nowarn_map): Document.\n\t* diagnostic-spec.c (nowarn_map): Likewise.\n\t* warning-control.cc (convert_to_key): Evolve functions into...\n\t(get_location): ... these.  Adjust all users.", "tree": {"sha": "bb9669251850505aa0e4979dfad8ec173f820acb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb9669251850505aa0e4979dfad8ec173f820acb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1985392242d9a6bf8b091f78143d3c1fa9ccd284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1985392242d9a6bf8b091f78143d3c1fa9ccd284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1985392242d9a6bf8b091f78143d3c1fa9ccd284", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1985392242d9a6bf8b091f78143d3c1fa9ccd284/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "accf94329d61933e6c58c1d7815fb08d8fc2afa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/accf94329d61933e6c58c1d7815fb08d8fc2afa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/accf94329d61933e6c58c1d7815fb08d8fc2afa5"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "eac5a3317c884b4d9016310157297923146b8715", "filename": "gcc/diagnostic-spec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1985392242d9a6bf8b091f78143d3c1fa9ccd284/gcc%2Fdiagnostic-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1985392242d9a6bf8b091f78143d3c1fa9ccd284/gcc%2Fdiagnostic-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-spec.c?ref=1985392242d9a6bf8b091f78143d3c1fa9ccd284", "patch": "@@ -105,7 +105,7 @@ nowarn_spec_t::nowarn_spec_t (opt_code opt)\n     }\n }\n \n-/* Map from location to its no-warning disposition.  */\n+/* A mapping from a 'location_t' to the warning spec set for it.  */\n \n GTY(()) xint_hash_map_t *nowarn_map;\n "}, {"sha": "9b3aaaa3ce673331fa17ca4118c8306bb6231d05", "filename": "gcc/diagnostic-spec.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1985392242d9a6bf8b091f78143d3c1fa9ccd284/gcc%2Fdiagnostic-spec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1985392242d9a6bf8b091f78143d3c1fa9ccd284/gcc%2Fdiagnostic-spec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-spec.h?ref=1985392242d9a6bf8b091f78143d3c1fa9ccd284", "patch": "@@ -130,12 +130,10 @@ operator!= (const nowarn_spec_t &lhs, const nowarn_spec_t &rhs)\n   return !(lhs == rhs);\n }\n \n-typedef location_t key_type_t;\n-typedef int_hash <key_type_t, 0, UINT_MAX> xint_hash_t;\n+typedef int_hash <location_t, 0, UINT_MAX> xint_hash_t;\n typedef hash_map<xint_hash_t, nowarn_spec_t> xint_hash_map_t;\n \n-/* A mapping from the location of an expression to the warning spec\n-   set for it.  */\n+/* A mapping from a 'location_t' to the warning spec set for it.  */\n extern GTY(()) xint_hash_map_t *nowarn_map;\n \n #endif // DIAGNOSTIC_SPEC_H_INCLUDED"}, {"sha": "8d6c0828445fc34b00e4af0bf638481fcd7ab993", "filename": "gcc/warning-control.cc", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1985392242d9a6bf8b091f78143d3c1fa9ccd284/gcc%2Fwarning-control.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1985392242d9a6bf8b091f78143d3c1fa9ccd284/gcc%2Fwarning-control.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwarning-control.cc?ref=1985392242d9a6bf8b091f78143d3c1fa9ccd284", "patch": "@@ -62,22 +62,22 @@ set_no_warning_bit (gimple *stmt, bool value)\n   stmt->no_warning = value;\n }\n \n-/* Return EXPR location or zero.  */\n+/* Return EXPR location or 'UNKNOWN_LOCATION'.  */\n \n-static inline key_type_t\n-convert_to_key (const_tree expr)\n+static inline location_t\n+get_location (const_tree expr)\n {\n   if (DECL_P (expr))\n     return DECL_SOURCE_LOCATION (expr);\n   if (EXPR_P (expr))\n     return EXPR_LOCATION (expr);\n-  return 0;\n+  return UNKNOWN_LOCATION;\n }\n \n-/* Return STMT location (may be zero).  */\n+/* Return STMT location (may be 'UNKNOWN_LOCATION').  */\n \n-static inline key_type_t\n-convert_to_key (const gimple *stmt)\n+static inline location_t\n+get_location (const gimple *stmt)\n {\n   return gimple_location (stmt);\n }\n@@ -87,25 +87,28 @@ convert_to_key (const gimple *stmt)\n static nowarn_spec_t *\n get_nowarn_spec (const_tree expr)\n {\n-  const key_type_t key = convert_to_key (expr);\n+  const location_t loc = get_location (expr);\n \n-  if (!get_no_warning_bit (expr) || !key)\n+  if (loc == UNKNOWN_LOCATION)\n     return NULL;\n \n-  return nowarn_map ? nowarn_map->get (key) : NULL;\n+  if (!get_no_warning_bit (expr))\n+    return NULL;\n+\n+  return nowarn_map ? nowarn_map->get (loc) : NULL;\n }\n \n /* Return the no-warning bitmap for stateemt STMT.  */\n \n static nowarn_spec_t *\n get_nowarn_spec (const gimple *stmt)\n {\n-  const key_type_t key = convert_to_key (stmt);\n+  const location_t loc = get_location (stmt);\n \n   if (!get_no_warning_bit (stmt))\n     return NULL;\n \n-  return nowarn_map ? nowarn_map->get (key) : NULL;\n+  return nowarn_map ? nowarn_map->get (loc) : NULL;\n }\n \n /* Return true if warning OPT is suppressed for decl/expression EXPR.\n@@ -153,9 +156,9 @@ suppress_warning (tree expr, opt_code opt /* = all_warnings */,\n   if (opt == no_warning)\n     return;\n \n-  const key_type_t key = convert_to_key (expr);\n+  const location_t loc = get_location (expr);\n \n-  supp = suppress_warning_at (key, opt, supp) || supp;\n+  supp = suppress_warning_at (loc, opt, supp) || supp;\n   set_no_warning_bit (expr, supp);\n }\n \n@@ -169,9 +172,9 @@ suppress_warning (gimple *stmt, opt_code opt /* = all_warnings */,\n   if (opt == no_warning)\n     return;\n \n-  const key_type_t key = convert_to_key (stmt);\n+  const location_t loc = get_location (stmt);\n \n-  supp = suppress_warning_at (key, opt, supp) || supp;\n+  supp = suppress_warning_at (loc, opt, supp) || supp;\n   set_no_warning_bit (stmt, supp);\n }\n \n@@ -181,21 +184,21 @@ suppress_warning (gimple *stmt, opt_code opt /* = all_warnings */,\n template <class ToType, class FromType>\n void copy_warning (ToType to, FromType from)\n {\n-  const key_type_t to_key = convert_to_key (to);\n+  const location_t to_loc = get_location (to);\n \n   if (nowarn_spec_t *from_map = get_nowarn_spec (from))\n     {\n       /* If there's an entry in the map the no-warning bit must be set.  */\n       gcc_assert (get_no_warning_bit (from));\n \n       gcc_checking_assert (nowarn_map);\n-      nowarn_map->put (to_key, *from_map);\n+      nowarn_map->put (to_loc, *from_map);\n       set_no_warning_bit (to, true);\n     }\n   else\n     {\n       if (nowarn_map)\n-\tnowarn_map->remove (to_key);\n+\tnowarn_map->remove (to_loc);\n \n       /* The no-warning bit might be set even if there's no entry\n \t in the map.  */"}]}