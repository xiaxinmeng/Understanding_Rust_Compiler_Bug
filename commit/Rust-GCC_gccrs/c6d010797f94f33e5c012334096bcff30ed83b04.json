{"sha": "c6d010797f94f33e5c012334096bcff30ed83b04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZkMDEwNzk3Zjk0ZjMzZTVjMDEyMzM0MDk2YmNmZjMwZWQ4M2IwNA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2005-02-17T21:09:23Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-02-17T21:09:23Z"}, "message": "builtins.c (expand_builtin_return_addr): Remove tem parameter.\n\n2005-02-17  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* builtins.c (expand_builtin_return_addr): Remove tem parameter.\n\ttem becomes a local variable which is set to the value of the\n\tback end defined INITIAL_FRAME_ADDRESS macro.\n\t(expand_builtin_frame_address): Omit the base parameter to\n\texpand_builtin_return_addr.\n\t(expand_builtin_profile_func): Likewise.\n\t* config/s390/s390.h (INITIAL_FRAME_ADDRESS_RTX): Define new macro.\n\t(DYNAMIC_CHAIN_ADDRESS): Remove the case for the initial frame.\n\t* doc/tm.texi: Documentation for INITIAL_FRAME_ADDRESS_RTX added.\n\nFrom-SVN: r95194", "tree": {"sha": "c5957feb8d6a2c09259a5ac5db59b14bd8b33815", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5957feb8d6a2c09259a5ac5db59b14bd8b33815"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6d010797f94f33e5c012334096bcff30ed83b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d010797f94f33e5c012334096bcff30ed83b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d010797f94f33e5c012334096bcff30ed83b04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d010797f94f33e5c012334096bcff30ed83b04/comments", "author": null, "committer": null, "parents": [{"sha": "7b210806753f58281323b6cc4a05f1ee4f5e19dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b210806753f58281323b6cc4a05f1ee4f5e19dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b210806753f58281323b6cc4a05f1ee4f5e19dc"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "86723f926ffed3893cf35e1c74887c57e98c0062", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d010797f94f33e5c012334096bcff30ed83b04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d010797f94f33e5c012334096bcff30ed83b04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6d010797f94f33e5c012334096bcff30ed83b04", "patch": "@@ -1,3 +1,15 @@\n+2005-02-17  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* builtins.c (expand_builtin_return_addr): Remove tem parameter.\n+\ttem becomes a local variable which is set to the value of the \n+\tback end defined INITIAL_FRAME_ADDRESS macro.\n+\t(expand_builtin_frame_address): Omit the base parameter to \n+\texpand_builtin_return_addr.\n+\t(expand_builtin_profile_func): Likewise.\n+\t* config/s390/s390.h (INITIAL_FRAME_ADDRESS_RTX): Define new macro.\n+\t(DYNAMIC_CHAIN_ADDRESS): Remove the case for the initial frame.\n+\t* doc/tm.texi: Documentation for INITIAL_FRAME_ADDRESS_RTX added.\n+\n 2005-02-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/s390/s390.c (s390_alloc_pool, s390_free_pool,"}, {"sha": "c214ef7ae201df8b0bbb1f6582b13825f796a7da", "filename": "gcc/builtins.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d010797f94f33e5c012334096bcff30ed83b04/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d010797f94f33e5c012334096bcff30ed83b04/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c6d010797f94f33e5c012334096bcff30ed83b04", "patch": "@@ -453,11 +453,16 @@ builtin_save_expr (tree exp)\n    address located within it (depending on FNDECL_CODE).  */\n \n static rtx\n-expand_builtin_return_addr (enum built_in_function fndecl_code, int count,\n-\t\t\t    rtx tem)\n+expand_builtin_return_addr (enum built_in_function fndecl_code, int count)\n {\n   int i;\n \n+#ifdef INITIAL_FRAME_ADDRESS_RTX\n+  rtx tem = INITIAL_FRAME_ADDRESS_RTX;\n+#else\n+  rtx tem = hard_frame_pointer_rtx;\n+#endif\n+\n   /* Some machines need special handling before we can access\n      arbitrary frames.  For example, on the sparc, we must first flush\n      all register windows to the stack.  */\n@@ -4221,8 +4226,7 @@ expand_builtin_frame_address (tree fndecl, tree arglist)\n     {\n       rtx tem\n \t= expand_builtin_return_addr (DECL_FUNCTION_CODE (fndecl),\n-\t\t\t\t      tree_low_cst (TREE_VALUE (arglist), 1),\n-\t\t\t\t      hard_frame_pointer_rtx);\n+\t\t\t\t      tree_low_cst (TREE_VALUE (arglist), 1));\n \n       /* Some ports cannot access arbitrary stack frames.  */\n       if (tem == NULL)\n@@ -4855,7 +4859,7 @@ expand_builtin_profile_func (bool exitp)\n \n   emit_library_call (which, LCT_NORMAL, VOIDmode, 2, this, Pmode,\n \t\t     expand_builtin_return_addr (BUILT_IN_RETURN_ADDRESS,\n-\t\t\t\t\t\t 0, hard_frame_pointer_rtx),\n+\t\t\t\t\t\t 0),\n \t\t     Pmode);\n \n   return const0_rtx;"}, {"sha": "a6b7a3afd519142ecde5568561bacccb3bb45f60", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d010797f94f33e5c012334096bcff30ed83b04/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d010797f94f33e5c012334096bcff30ed83b04/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=c6d010797f94f33e5c012334096bcff30ed83b04", "patch": "@@ -612,20 +612,22 @@ extern int current_function_outgoing_args_size;\n    the argument area.  */\n #define FIRST_PARM_OFFSET(FNDECL) 0\n \n+/* Defining this macro makes __builtin_frame_address(0) and \n+   __builtin_return_address(0) work with -fomit-frame-pointer.  */\n+#define INITIAL_FRAME_ADDRESS_RTX                                             \\\n+  (TARGET_PACKED_STACK ?                                                      \\\n+   plus_constant (arg_pointer_rtx, -UNITS_PER_WORD) :                         \\\n+   plus_constant (arg_pointer_rtx, -STACK_POINTER_OFFSET))\n+\n /* The return address of the current frame is retrieved\n    from the initial value of register RETURN_REGNUM.\n    For frames farther back, we use the stack slot where\n    the corresponding RETURN_REGNUM register was saved.  */\n+#define DYNAMIC_CHAIN_ADDRESS(FRAME)                                          \\\n+  (TARGET_PACKED_STACK ?                                                      \\\n+   plus_constant ((FRAME), STACK_POINTER_OFFSET - UNITS_PER_WORD) : (FRAME))\n \n-#define DYNAMIC_CHAIN_ADDRESS(FRAME)                                            \\\n-  (TARGET_PACKED_STACK ?                                                        \\\n-    ((FRAME) != hard_frame_pointer_rtx ?                                        \\\n-     plus_constant ((FRAME), STACK_POINTER_OFFSET - UNITS_PER_WORD) :           \\\n-     plus_constant (arg_pointer_rtx, -UNITS_PER_WORD)) :                        \\\n-     ((FRAME) != hard_frame_pointer_rtx ? (FRAME) :\t\t\t\t\\\n-      plus_constant (arg_pointer_rtx, -STACK_POINTER_OFFSET)))\n-\n-#define RETURN_ADDR_RTX(COUNT, FRAME)\t\t\t\t\t\t\\\n+#define RETURN_ADDR_RTX(COUNT, FRAME)\t\t\t\t\t      \\\n   s390_return_addr_rtx ((COUNT), DYNAMIC_CHAIN_ADDRESS ((FRAME)))\n \n /* In 31-bit mode, we need to mask off the high bit of return addresses.  */"}, {"sha": "023b907a49039fcf24dd2c284de477f51b4122d4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d010797f94f33e5c012334096bcff30ed83b04/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d010797f94f33e5c012334096bcff30ed83b04/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c6d010797f94f33e5c012334096bcff30ed83b04", "patch": "@@ -2931,6 +2931,18 @@ length of the outgoing arguments.  The default is correct for most\n machines.  See @file{function.c} for details.\n @end defmac\n \n+@defmac INITIAL_FRAME_ADDRESS_RTX\n+A C expression whose value is RTL representing the address of the initial\n+ stack frame. This address is passed to @code{RETURN_ADDR_RTX} and \n+@code{DYNAMIC_CHAIN_ADDRESS}.\n+If you don't define this macro, the default is to return \n+@code{hard_frame_pointer_rtx}.\n+This default is usually correct unless @code{-fomit-frame-pointer} is in \n+effect.\n+Define this macro in order to make @code{__builtin_frame_address (0)} and \n+@code{__builtin_return_address (0)} work even in absence of a hard frame pointer.\n+@end defmac\n+\n @defmac DYNAMIC_CHAIN_ADDRESS (@var{frameaddr})\n A C expression whose value is RTL representing the address in a stack\n frame where the pointer to the caller's frame is stored.  Assume that"}]}