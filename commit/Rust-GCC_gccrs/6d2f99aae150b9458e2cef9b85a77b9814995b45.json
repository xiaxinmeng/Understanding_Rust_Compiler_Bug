{"sha": "6d2f99aae150b9458e2cef9b85a77b9814995b45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQyZjk5YWFlMTUwYjk0NThlMmNlZjliODVhNzdiOTgxNDk5NWI0NQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-06-16T21:06:51Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-06-16T21:06:51Z"}, "message": "[arm][doc] Document new -march= syntax.\n\n\nThis adds documentation for the new extension options to -march= on ARM.\nI tried a number of different ways of formatting the information, but this\nseems the best, given what can be achieved in texinfo format.\n\n\t* doc/invoke.texi (ARM Options, -march=): Document new syntax and\n\tpermitted extensions.\n\nFrom-SVN: r249307", "tree": {"sha": "fd088c53a981ee4c9278ff8a7a5c89f48e8ce2f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd088c53a981ee4c9278ff8a7a5c89f48e8ce2f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d2f99aae150b9458e2cef9b85a77b9814995b45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d2f99aae150b9458e2cef9b85a77b9814995b45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d2f99aae150b9458e2cef9b85a77b9814995b45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d2f99aae150b9458e2cef9b85a77b9814995b45/comments", "author": null, "committer": null, "parents": [{"sha": "ffc126904bb2352b55e987a4a8f0c614a84afd79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffc126904bb2352b55e987a4a8f0c614a84afd79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffc126904bb2352b55e987a4a8f0c614a84afd79"}], "stats": {"total": 308, "additions": 278, "deletions": 30}, "files": [{"sha": "38b28ab8d8544cc01aeda56408c067d87c76ab4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d2f99aae150b9458e2cef9b85a77b9814995b45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d2f99aae150b9458e2cef9b85a77b9814995b45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d2f99aae150b9458e2cef9b85a77b9814995b45", "patch": "@@ -1,3 +1,8 @@\n+2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* doc/invoke.texi (ARM Options, -march=): Document new syntax and\n+\tpermitted extensions.\n+\n 2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm-cpus.in (armv7): Add extension +nofp."}, {"sha": "3567691cc324b46576bc9da2eec661e1e1fcd933", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 273, "deletions": 30, "changes": 303, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d2f99aae150b9458e2cef9b85a77b9814995b45/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d2f99aae150b9458e2cef9b85a77b9814995b45/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6d2f99aae150b9458e2cef9b85a77b9814995b45", "patch": "@@ -15158,48 +15158,291 @@ the default for all standard configurations.\n Generate code for a processor running in big-endian mode; the default is\n to compile code for a little-endian processor.\n \n-@item -march=@var{name}\n+@item -march=@var{name@r{[}+extension@dots{}@r{]}}\n @opindex march\n This specifies the name of the target ARM architecture.  GCC uses this\n name to determine what kind of instructions it can emit when generating\n assembly code.  This option can be used in conjunction with or instead\n-of the @option{-mcpu=} option.  Permissible names are: @samp{armv2},\n-@samp{armv2a}, @samp{armv3}, @samp{armv3m}, @samp{armv4}, @samp{armv4t},\n-@samp{armv5}, @samp{armv5e}, @samp{armv5t}, @samp{armv5te},\n-@samp{armv6}, @samp{armv6-m}, @samp{armv6j}, @samp{armv6k},\n-@samp{armv6kz}, @samp{armv6s-m},\n-@samp{armv6t2}, @samp{armv6z}, @samp{armv6zk},\n-@samp{armv7}, @samp{armv7-a}, @samp{armv7-m}, @samp{armv7-r}, @samp{armv7e-m},\n-@samp{armv7ve}, @samp{armv8-a}, @samp{armv8-a+crc}, @samp{armv8.1-a},\n-@samp{armv8.1-a+crc}, @samp{armv8-m.base}, @samp{armv8-m.main},\n-@samp{armv8-m.main+dsp}, @samp{iwmmxt}, @samp{iwmmxt2}.\n+of the @option{-mcpu=} option.\n+\n+Permissible names are:\n+@samp{armv4t},\n+@samp{armv5t}, @samp{armv5te},\n+@samp{armv6}, @samp{armv6j}, @samp{armv6k}, @samp{armv6kz}, @samp{armv6t2},\n+@samp{armv6z}, @samp{armv6zk},\n+@samp{armv7}, @samp{armv7-a}, @samp{armv7ve}, \n+@samp{armv8-a}, @samp{armv8.1-a}, @samp{armv8.2-a},\n+@samp{armv7-r},\n+@samp{armv6-m}, @samp{armv6s-m},\n+@samp{armv7-m}, @samp{armv7e-m},\n+@samp{armv8-m.base}, @samp{armv8-m.main},\n+@samp{iwmmxt} and @samp{iwmmxt2}.\n+\n+Additionally, the following architectures, which lack support for the\n+Thumb exection state, are recognized but support is deprecated:\n+@samp{armv2}, @samp{armv2a}, @samp{armv3}, @samp{armv3m},\n+@samp{armv4}, @samp{armv5} and @samp{armv5e}.\n+\n+Many of the architectures support extensions.  These can be added by\n+appending @samp{+@var{extension}} to the architecture name.  Extension\n+options are processed in order and capabilities accumulate.  An extension\n+will also enable any necessary base extensions\n+upon which it depends.  For example, the @samp{+crypto} extension\n+will always enable the @samp{+simd} extension.  The exception to the\n+additive construction is for extensions that are prefixed with\n+@samp{+no@dots{}}: these extensions disable the specified option and\n+any other extensions that may depend on the presence of that\n+extension.\n \n-Architecture revisions older than @samp{armv4t} are deprecated.\n+For example, @samp{-march=armv7-a+simd+nofp+vfpv4} is equivalent to\n+writing @samp{-march=armv7-a+vfpv4} since the @samp{+simd} option is\n+entirely disabled by the @samp{+nofp} option that follows it.\n \n-@option{-march=armv6s-m} is the @samp{armv6-m} architecture with support for\n-the (now mandatory) SVC instruction.\n+Most extension names are generically named, but have an effect that is\n+dependent upon the architecture to which it is applied.  For example,\n+the @samp{+simd} option can be applied to both @samp{armv7-a} and\n+@samp{armv8-a} architectures, but will enable the original ARMv7\n+Advanced SIMD (Neon) extensions for @samp{armv7-a} and the ARMv8-a\n+variant for @samp{armv8-a}.\n \n-@option{-march=armv6zk} is an alias for @samp{armv6kz}, existing for backwards\n-compatibility.\n+The table below lists the supported extensions for each architecture.\n+Architectures not mentioned do not support any extensions.\n \n-@option{-march=armv7ve} is the @samp{armv7-a} architecture with virtualization\n-extensions.\n+@table @samp\n+@item  armv5e\n+@itemx armv5te\n+@itemx armv6\n+@itemx armv6j\n+@itemx armv6k\n+@itemx armv6kz\n+@itemx armv6t2\n+@itemx armv6z\n+@itemx armv6zk\n+@table @samp\n+@item +fp\n+The VFPv2 floating-point instructions.  The extension @samp{+vfpv2} can be\n+used as an alias for this extension.\n \n-@option{-march=armv8-a+crc} enables code generation for the ARMv8-A\n-architecture together with the optional CRC32 extensions.\n+@item +nofp\n+Disable the floating-point instructions.\n+@end table\n \n-@option{-march=armv8.1-a} enables compiler support for the ARMv8.1-A\n-architecture.  This also enables the features provided by\n-@option{-march=armv8-a+crc}.\n+@item armv7\n+The common subset of the ARMv7-A, ARMv7-R and ARMv7-M architectures.\n+@table @samp\n+@item +fp\n+The VFPv3 floating-point instructions, with 16 double-precision\n+registers.  The extension @samp{+vfpv3-d16} can be used as an alias\n+for this extension.  Note that floating-point is not supported by the\n+base ARMv7-M architecture, but is compatible with both the ARMv7-A and\n+ARMv7-R architectures.\n+\n+@item +nofp\n+Disable the floating-point instructions.\n+@end table\n \n-@option{-march=armv8.2-a} enables compiler support for the ARMv8.2-A\n-architecture.  This also enables the features provided by\n-@option{-march=armv8.1-a}.\n+@item armv7-a\n+@table @samp\n+@item +fp\n+The VFPv3 floating-point instructions, with 16 double-precision\n+registers.  The extension @samp{+vfpv3-d16} can be used as an alias\n+for this extension.\n+\n+@item +simd\n+The Advanced SIMD (Neon) v1 and the VFPv3 floating-point instructions.\n+The extensions @samp{+neon} and @samp{+neon-vfpv3} can be used as aliases\n+for this extension.\n+\n+@item +vfpv3\n+The VFPv3 floating-point instructions, with 32 double-precision\n+registers.\n+\n+@item +vfpv3-d16-fp16\n+The VFPv3 floating-point instructions, with 16 double-precision\n+registers and the half-precision floating-point conversion operations.\n+\n+@item +vfpv3-fp16\n+The VFPv3 floating-point instructions, with 32 double-precision\n+registers and the half-precision floating-point conversion operations.\n+\n+@item +vfpv4-d16\n+The VFPv4 floating-point instructions, with 16 double-precision\n+registers.\n+\n+@item +vfpv4\n+The VFPv4 floating-point instructions, with 32 double-precision\n+registers.\n+\n+@item +neon-fp16\n+The Advanced SIMD (Neon) v1 and the VFPv3 floating-point instructions, with\n+the half-precision floating-point conversion operations.\n+\n+@item +neon-vfpv4\n+The Advanced SIMD (Neon) v2 and the VFPv4 floating-point instructions.\n+\n+@item +nosimd\n+Disable the Advanced SIMD instructions (does not disable floating point).\n+\n+@item +nofp\n+Disable the floating-point and Advanced SIMD instructions.\n+@end table\n+\n+@item armv7ve\n+The extended version of the ARMv7-A architecture with support for\n+virtualization.\n+@table @samp\n+@item +fp\n+The VFPv4 floating-point instructions, with 16 double-precision registers.\n+The extension @samp{+vfpv4-d16} can be used as an alias for this extension.\n+\n+@item +simd\n+The Advanced SIMD (Neon) v2 and the VFPv4 floating-point instructions.  The\n+extension @samp{+neon-vfpv4} can be used as an alias for this extension.\n+\n+@item +vfpv3-d16\n+The VFPv3 floating-point instructions, with 16 double-precision\n+registers.\n+\n+@item +vfpv3\n+The VFPv3 floating-point instructions, with 32 double-precision\n+registers.\n+\n+@item +vfpv3-d16-fp16\n+The VFPv3 floating-point instructions, with 16 double-precision\n+registers and the half-precision floating-point conversion operations.\n+\n+@item +vfpv3-fp16\n+The VFPv3 floating-point instructions, with 32 double-precision\n+registers and the half-precision floating-point conversion operations.\n+\n+@item +vfpv4-d16\n+The VFPv4 floating-point instructions, with 16 double-precision\n+registers.\n+\n+@item +vfpv4\n+The VFPv4 floating-point instructions, with 32 double-precision\n+registers.\n+\n+@item +neon\n+The Advanced SIMD (Neon) v1 and the VFPv3 floating-point instructions.\n+The extension @samp{+neon-vfpv3} can be used as an alias for this extension.\n+\n+@item +neon-fp16\n+The Advanced SIMD (Neon) v1 and the VFPv3 floating-point instructions, with\n+the half-precision floating-point conversion operations.\n+\n+@item +nosimd\n+Disable the Advanced SIMD instructions (does not disable floating point).\n+\n+@item +nofp\n+Disable the floating-point and Advanced SIMD instructions.\n+@end table\n \n-@option{-march=armv8.2-a+fp16} enables compiler support for the\n-ARMv8.2-A architecture with the optional FP16 instructions extension.\n-This also enables the features provided by @option{-march=armv8.1-a}\n-and implies @option{-mfp16-format=ieee}.\n+@item armv8-a\n+@table @samp\n+@item +crc\n+The Cyclic Redundancy Check (CRC) instructions.\n+@item +simd\n+The ARMv8 Advanced SIMD and floating-point instructions.\n+@item +crypto\n+The cryptographic instructions.\n+@item +nocrypto\n+Disable the cryptographic isntructions.\n+@item +nofp\n+Disable the floating-point, Advanced SIMD and cryptographic instructions.\n+@end table\n+\n+@item armv8.1-a\n+@table @samp\n+@item +simd\n+The ARMv8.1 Advanced SIMD and floating-point instructions.\n+\n+@item +crypto\n+The cryptographic instructions.  This also enables the Advanced SIMD and\n+floating-point instructions.\n+\n+@item +nocrypto\n+Disable the cryptographic isntructions.\n+\n+@item +nofp\n+Disable the floating-point, Advanced SIMD and cryptographic instructions.\n+@end table\n+\n+@item armv8.2-a\n+@table @samp\n+@item +fp16\n+The half-precision floating-point data processing instructions.\n+This also enables the Advanced SIMD and floating-point instructions.\n+\n+@item +simd\n+The ARMv8.1 Advanced SIMD and floating-point instructions.\n+\n+@item +crypto\n+The cryptographic instructions.  This also enables the Advanced SIMD and\n+floating-point instructions.\n+\n+@item +nocrypto\n+Disable the cryptographic extension.\n+\n+@item +nofp\n+Disable the floating-point, Advanced SIMD and cryptographic instructions.\n+@end table\n+\n+@item armv7-r\n+@table @samp\n+@item +fp.sp\n+The single-precision VFPv3 floating-point instructions.  The extension\n+@samp{+vfpv3xd} can be used as an alias for this extension.\n+\n+@item +fp\n+The VFPv3 floating-point instructions with 16 double-precision registers.\n+The extension +vfpv3-d16 can be used as an alias for this extension.\n+\n+@item +nofp\n+Disable the floating-point extension.\n+\n+@item +idiv\n+The ARM-state integer division instructions.\n+\n+@item +noidiv\n+Disable the ARM-state integer division extension.\n+@end table\n+\n+@item armv7e-m\n+@table @samp\n+@item +fp\n+The single-precision VFPv4 floating-point instructions.\n+\n+@item +fpv5\n+The single-precision FPv5 floating-point instructions.\n+\n+@item +fp.dp\n+The single- and double-precision FPv5 floating-point instructions.\n+\n+@item +nofp\n+Disable the floating-point extensions.\n+@end table\n+\n+@item  armv8-m.main\n+@table @samp\n+@item +dsp\n+The DSP instructions.\n+\n+@item +nodsp\n+Disable the DSP extension.\n+\n+@item +fp\n+The single-precision floating-point instructions.\n+\n+@item +fp.dp\n+The single- and double-precision floating-point instructions.\n+\n+@item +nofp\n+Disable the floating-point extension.\n+\n+@end table\n+\n+@end table\n \n @option{-march=native} causes the compiler to auto-detect the architecture\n of the build computer.  At present, this feature is only supported on"}]}