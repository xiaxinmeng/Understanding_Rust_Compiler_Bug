{"sha": "9ea52d27eca0c56c88a3941b413ef56950d9f5c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVhNTJkMjdlY2EwYzU2Yzg4YTM5NDFiNDEzZWY1Njk1MGQ5ZjVjMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-07T03:59:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-01-07T03:59:54Z"}, "message": "re PR middle-end/83699 (Many 64-bit SPARC gcc.dg/vect tests FAIL)\n\n\tPR rtl-optimization/83699\n\t* expmed.c (extract_bit_field_1): Restrict the vector usage of\n\textract_bit_field_as_subreg to cases in which the extracted\n\tvalue is also a vector.\n\nFrom-SVN: r256318", "tree": {"sha": "133af00754548097ceaf8d792693e0d26a6cee01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/133af00754548097ceaf8d792693e0d26a6cee01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ea52d27eca0c56c88a3941b413ef56950d9f5c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ea52d27eca0c56c88a3941b413ef56950d9f5c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ea52d27eca0c56c88a3941b413ef56950d9f5c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ea52d27eca0c56c88a3941b413ef56950d9f5c3/comments", "author": null, "committer": null, "parents": [{"sha": "064ee4de335fad071c3887f5bcd817d1f9e3e5ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/064ee4de335fad071c3887f5bcd817d1f9e3e5ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/064ee4de335fad071c3887f5bcd817d1f9e3e5ff"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "bade4b29349c2de0ea643be7409b9025c3ec25ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ea52d27eca0c56c88a3941b413ef56950d9f5c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ea52d27eca0c56c88a3941b413ef56950d9f5c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ea52d27eca0c56c88a3941b413ef56950d9f5c3", "patch": "@@ -1,5 +1,10 @@\n 2018-01-06  Richard Sandiford  <richard.sandiford@linaro.org>\n \n+\tPR rtl-optimization/83699\n+\t* expmed.c (extract_bit_field_1): Restrict the vector usage of\n+\textract_bit_field_as_subreg to cases in which the extracted\n+\tvalue is also a vector.\n+\n \t* lra-constraints.c (process_alt_operands): Test for the equivalence\n \tsubstitutions when detecting a possible reload cycle.\n "}, {"sha": "808b067c6703f789b75cebdbe212103ead18f7bb", "filename": "gcc/expmed.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ea52d27eca0c56c88a3941b413ef56950d9f5c3/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ea52d27eca0c56c88a3941b413ef56950d9f5c3/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=9ea52d27eca0c56c88a3941b413ef56950d9f5c3", "patch": "@@ -1738,16 +1738,10 @@ extract_bit_field_1 (rtx str_rtx, poly_uint64 bitsize, poly_uint64 bitnum,\n \t      return target;\n \t    }\n \t}\n-      /* Using subregs is useful if we're extracting the least-significant\n-\t vector element, or if we're extracting one register vector from\n-\t a multi-register vector.  extract_bit_field_as_subreg checks\n-\t for valid bitsize and bitnum, so we don't need to do that here.\n-\n-\t The mode check makes sure that we're extracting either\n-\t a single element or a subvector with the same element type.\n-\t If the modes aren't such a natural fit, fall through and\n-\t bitcast to integers first.  */\n-      if (GET_MODE_INNER (mode) == innermode)\n+      /* Using subregs is useful if we're extracting one register vector\n+\t from a multi-register vector.  extract_bit_field_as_subreg checks\n+\t for valid bitsize and bitnum, so we don't need to do that here.  */\n+      if (VECTOR_MODE_P (mode))\n \t{\n \t  rtx sub = extract_bit_field_as_subreg (mode, op0, bitsize, bitnum);\n \t  if (sub)"}]}