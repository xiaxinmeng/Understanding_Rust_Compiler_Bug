{"sha": "287ef129b68d25d219b167163a2494d82bee5820", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg3ZWYxMjliNjhkMjVkMjE5YjE2NzE2M2EyNDk0ZDgyYmVlNTgyMA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-02-11T17:44:05Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-02-11T17:44:05Z"}, "message": "PR tree-optimization/88771 - Misleading -Werror=array-bounds error\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/88771\n\t* gimple-ssa-warn-restrict.c (pass_wrestrict::gate): Also enable\n\twhen -Wstringop-overflow is set.\n\t(builtin_memref::builtin_memref): Adjust excessive upper bound\n\tonly when lower bound is not excessive.\n\t(maybe_diag_overlap): Detect and diagnose excessive bounds via\n\t-Wstringop-ovefflow.\n\t(maybe_diag_offset_bounds): Rename...\n\t(maybe_diag_access_bounds): ...to this.\n\t(check_bounds_or_overlap): Adjust for name change above.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/88771\n\t* gcc.dg/Wstringop-overflow-8.c: New test.\n\t* gcc.dg/Wstringop-overflow-9.c: New test.\n\t* gcc.dg/Warray-bounds-40.c: New test.\n\t* gcc.dg/builtin-stpncpy.c: Adjust.\n\t* gcc.dg/builtin-stringop-chk-4.c: Adjust.\n\t* g++.dg/opt/memcpy1.C: Adjust.\n\nFrom-SVN: r268775", "tree": {"sha": "cdd2b8ec87767d99ab4bcddece5ee1e1a452fe6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdd2b8ec87767d99ab4bcddece5ee1e1a452fe6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/287ef129b68d25d219b167163a2494d82bee5820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/287ef129b68d25d219b167163a2494d82bee5820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/287ef129b68d25d219b167163a2494d82bee5820", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/287ef129b68d25d219b167163a2494d82bee5820/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28a8cef1e240989c199dfd8538c826c134098f85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a8cef1e240989c199dfd8538c826c134098f85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28a8cef1e240989c199dfd8538c826c134098f85"}], "stats": {"total": 369, "additions": 319, "deletions": 50}, "files": [{"sha": "b08cd68d4aacde36d539ab628f1918c1b2ffa24d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287ef129b68d25d219b167163a2494d82bee5820/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287ef129b68d25d219b167163a2494d82bee5820/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=287ef129b68d25d219b167163a2494d82bee5820", "patch": "@@ -1,3 +1,16 @@\n+2019-02-11  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/88771\n+\t* gimple-ssa-warn-restrict.c (pass_wrestrict::gate): Also enable\n+\twhen -Wstringop-overflow is set.\n+\t(builtin_memref::builtin_memref): Adjust excessive upper bound\n+\tonly when lower bound is not excessive.\n+\t(maybe_diag_overlap): Detect and diagnose excessive bounds via\n+\t-Wstringop-ovefflow.\n+\t(maybe_diag_offset_bounds): Rename...\n+\t(maybe_diag_access_bounds): ...to this.\n+\t(check_bounds_or_overlap): Adjust for name change above.\n+\n 2019-02-11  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/87996"}, {"sha": "6643b89dd8822de372a4b067105d2f2470a7a395", "filename": "gcc/gimple-ssa-warn-restrict.c", "status": "modified", "additions": 53, "deletions": 14, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287ef129b68d25d219b167163a2494d82bee5820/gcc%2Fgimple-ssa-warn-restrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287ef129b68d25d219b167163a2494d82bee5820/gcc%2Fgimple-ssa-warn-restrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.c?ref=287ef129b68d25d219b167163a2494d82bee5820", "patch": "@@ -75,7 +75,7 @@ class pass_wrestrict : public gimple_opt_pass\n bool\n pass_wrestrict::gate (function *fun ATTRIBUTE_UNUSED)\n {\n-  return warn_array_bounds != 0 || warn_restrict != 0;\n+  return warn_array_bounds || warn_restrict || warn_stringop_overflow;\n }\n \n /* Class to walk the basic blocks of a function in dominator order.  */\n@@ -256,7 +256,7 @@ builtin_memref::builtin_memref (tree expr, tree size)\n       sizrange[1] = wi::to_offset (range[1]);\n       /* get_size_range returns SIZE_MAX for the maximum size.\n \t Constrain it to the real maximum of PTRDIFF_MAX.  */\n-      if (sizrange[1] > maxobjsize)\n+      if (sizrange[0] <= maxobjsize && sizrange[1] > maxobjsize)\n \tsizrange[1] = maxobjsize;\n     }\n   else\n@@ -1567,18 +1567,56 @@ maybe_diag_overlap (location_t loc, gimple *call, builtin_access &acs)\n   return true;\n }\n \n-/* Validate REF offsets in an expression passed as an argument to a CALL\n-   to a built-in function FUNC to make sure they are within the bounds\n-   of the referenced object if its size is known, or PTRDIFF_MAX otherwise.\n-   Both initial values of the offsets and their final value computed by\n-   the function by incrementing the initial value by the size are\n+/* Validate REF size and offsets in an expression passed as an argument\n+   to a CALL to a built-in function FUNC to make sure they are within\n+   the bounds of the referenced object if its size is known, or\n+   PTRDIFF_MAX otherwise.  DO_WARN is true when a diagnostic should\n+   be issued, false otherwise.\n+   Both initial values of the offsets and their final value computed\n+   by the function by incrementing the initial value by the size are\n    validated.  Return true if the offsets are not valid and a diagnostic\n-   has been issued.  */\n+   has been issued, or would have been issued if DO_WARN had been true.  */\n \n static bool\n-maybe_diag_offset_bounds (location_t loc, gimple *call, tree func, int strict,\n+maybe_diag_access_bounds (location_t loc, gimple *call, tree func, int strict,\n \t\t\t  const builtin_memref &ref, bool do_warn)\n {\n+  const offset_int maxobjsize = tree_to_shwi (max_object_size ());\n+\n+  /* Check for excessive size first and regardless of warning options\n+     since the result is used to make codegen decisions.  */\n+  if (ref.sizrange[0] > maxobjsize)\n+    {\n+      /* Return true without issuing a warning.  */\n+      if (!do_warn)\n+\treturn true;\n+\n+      if (ref.ref && TREE_NO_WARNING (ref.ref))\n+\treturn false;\n+\n+      if (warn_stringop_overflow)\n+\t{\n+\t  if (EXPR_HAS_LOCATION (ref.ptr))\n+\t    loc = EXPR_LOCATION (ref.ptr);\n+\n+\t  loc = expansion_point_location_if_in_system_header (loc);\n+\n+\t  if (ref.sizrange[0] == ref.sizrange[1])\n+\t    return warning_at (loc, OPT_Wstringop_overflow_,\n+\t\t\t       \"%G%qD specified bound %wu \"\n+\t\t\t       \"exceeds maximum object size %wu\",\n+\t\t\t       call, func, ref.sizrange[0].to_uhwi (),\n+\t\t\t       maxobjsize.to_uhwi ());\n+\n+\t  return warning_at (loc, OPT_Wstringop_overflow_,\n+\t\t\t     \"%G%qD specified bound between %wu and %wu \"\n+\t\t\t     \"exceeds maximum object size %wu\",\n+\t\t\t     call, func, ref.sizrange[0].to_uhwi (),\n+\t\t\t     ref.sizrange[1].to_uhwi (),\n+\t\t\t     maxobjsize.to_uhwi ());\n+\t}\n+    }\n+\n   /* Check for out-bounds pointers regardless of warning options since\n      the result is used to make codegen decisions.  */\n   offset_int ooboff[] = { ref.offrange[0], ref.offrange[1] };\n@@ -1616,11 +1654,12 @@ maybe_diag_offset_bounds (location_t loc, gimple *call, tree func, int strict,\n   if (oobref == error_mark_node)\n     {\n       if (ref.sizrange[0] == ref.sizrange[1])\n-\tsprintf (rangestr[1], \"%lli\", (long long) ref.sizrange[0].to_shwi ());\n+\tsprintf (rangestr[1], \"%llu\",\n+\t\t (unsigned long long) ref.sizrange[0].to_shwi ());\n       else\n \tsprintf (rangestr[1], \"[%lli, %lli]\",\n-\t\t (long long) ref.sizrange[0].to_shwi (),\n-\t\t (long long) ref.sizrange[1].to_shwi ());\n+\t\t (unsigned long long) ref.sizrange[0].to_uhwi (),\n+\t\t (unsigned long long) ref.sizrange[1].to_uhwi ());\n \n       tree type;\n \n@@ -1854,8 +1893,8 @@ check_bounds_or_overlap (gimple *call, tree dst, tree src, tree dstsize,\n   /* Validate offsets first to make sure they are within the bounds\n      of the destination object if its size is known, or PTRDIFF_MAX\n      otherwise.  */\n-  if (maybe_diag_offset_bounds (loc, call, func, strict, dstref, do_warn)\n-      || maybe_diag_offset_bounds (loc, call, func, strict, srcref, do_warn))\n+  if (maybe_diag_access_bounds (loc, call, func, strict, dstref, do_warn)\n+      || maybe_diag_access_bounds (loc, call, func, strict, srcref, do_warn))\n     {\n       if (do_warn)\n \tgimple_set_no_warning (call, true);"}, {"sha": "0c01d3960990dd963fd56e737ac73249448235c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287ef129b68d25d219b167163a2494d82bee5820/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287ef129b68d25d219b167163a2494d82bee5820/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=287ef129b68d25d219b167163a2494d82bee5820", "patch": "@@ -1,3 +1,13 @@\n+2019-02-11  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/88771\n+\t* gcc.dg/Wstringop-overflow-8.c: New test.\n+\t* gcc.dg/Wstringop-overflow-9.c: New test.\n+\t* gcc.dg/Warray-bounds-40.c: New test.\n+\t* gcc.dg/builtin-stpncpy.c: Adjust.\n+\t* gcc.dg/builtin-stringop-chk-4.c: Adjust.\n+\t* g++.dg/opt/memcpy1.C: Adjust.\n+\n 2019-02-11  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/87996"}, {"sha": "3862756083d0e7d14b599ecc188ec12a97fee736", "filename": "gcc/testsuite/g++.dg/opt/memcpy1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287ef129b68d25d219b167163a2494d82bee5820/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmemcpy1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287ef129b68d25d219b167163a2494d82bee5820/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmemcpy1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmemcpy1.C?ref=287ef129b68d25d219b167163a2494d82bee5820", "patch": "@@ -62,7 +62,7 @@ namespace CS\n       // OutV is initialized to SIZE_MAX in the ctor above causing\n       // the multiplication below to produce a very large number\n       // in excess of the maximum possible object size (SIZE_MAX/2).\n-      __builtin_memcpy (this->OutP, InP, OutV * sizeof (csVector2));   // { dg-warning \"specified size \\[0-9\\]+ exceeds maximum object size\" }\n+      __builtin_memcpy (this->OutP, InP, OutV * sizeof (csVector2));   // { dg-warning \"exceeds maximum object size\" }\n       return 0;\n     }\n   };"}, {"sha": "21827fbd92096a1bf76888f8c6a2cf899fcd99c8", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-40.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287ef129b68d25d219b167163a2494d82bee5820/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287ef129b68d25d219b167163a2494d82bee5820/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-40.c?ref=287ef129b68d25d219b167163a2494d82bee5820", "patch": "@@ -0,0 +1,73 @@\n+/* PR middle-end/88771 - Misleading -Werror=array-bounds error\n+   Verify that the warning issued for calls to \"bounded\" string\n+   functions when -Wstringop-overflow is disabled is -Warray-bounds\n+   with the right wording.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -Wno-stringop-overflow\" } */\n+\n+#define PTRDIFF_MAX   __PTRDIFF_MAX__\n+#define SIZE_MAX      __SIZE_MAX__\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern void* memcpy (void*, const void*, size_t);\n+extern void* memmove (void*, const void*, size_t);\n+extern void* memset (void*, int, size_t);\n+\n+extern char* stpncpy (char*, const char*, size_t);\n+\n+extern char* strncat (char*, const char*, size_t);\n+extern char* strncpy (char*, const char*, size_t);\n+\n+extern char* strndup (const char*, size_t);\n+\n+extern int strncmp (const char*, const char*, size_t);\n+extern int strncasecmp (const char*, const char*, size_t);\n+\n+extern size_t strnlen (const char*, size_t);\n+\n+extern char *d;\n+extern const char *s;\n+\n+\n+void test_memcpy (void)\n+{\n+  memcpy (d, s, SIZE_MAX);        /* { dg-warning \".memcpy. pointer overflow between offset 0 and size \\[0-9\\]+ \\\\\\[-Warray-bounds\" } */\n+}\n+\n+void test_memmove (void)\n+{\n+  memmove (d, s, SIZE_MAX - 1);   /* { dg-warning \".memmove. pointer overflow between offset 0 and size \\[0-9\\]+ \\\\\\[-Warray-bounds\" } */\n+}\n+\n+void test_memset (void)\n+{\n+  memset (d, 0, SIZE_MAX - 2);    /* { dg-warning \".memset. pointer overflow between offset 0 and size \\[0-9\\]+ \\\\\\[-Warray-bounds\" \"bug\" { xfail *-*-* } } */\n+}\n+\n+\n+char* test_stpncpy (void)\n+{\n+  return stpncpy (d, s, SIZE_MAX - 4);   /* { dg-warning \".stpncpy. pointer overflow between offset 0 and size \\[0-9\\]+ \\\\\\[-Warray-bounds\" } */\n+}\n+\n+\n+void test_strncat (void)\n+{\n+  strncat (d, s, SIZE_MAX - 3);   /* { dg-warning \".strncat. pointer overflow between offset 0 and size \\[0-9\\]+ \\\\\\[-Warray-bounds\" } */\n+}\n+\n+void test_strncpy (void)\n+{\n+  strncpy (d, s, SIZE_MAX - 4);   /* { dg-warning \".strncpy. pointer overflow between offset 0 and size \\[0-9\\]+ \\\\\\[-Warray-bounds\" } */\n+}\n+\n+char* test_strndup (void)\n+{\n+  return strndup (s, SIZE_MAX - 5);   /* { dg-warning \".strndup. pointer overflow between offset 0 and size \\[0-9\\]+ \\\\\\[-Warray-bounds\" \"bug\" { xfail *-*-* } } */\n+}\n+\n+size_t test_strnlen (void)\n+{\n+  return strnlen (s, SIZE_MAX - 6);   /* { dg-warning \".strnlen. pointer overflow between offset 0 and size \\[0-9\\]+ \\\\\\[-Warray-bounds\" \"bug\" { xfail *-*-* } } */\n+}"}, {"sha": "513d6b1d332be3c5ed091b28cd2be762b59af2b0", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-8.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287ef129b68d25d219b167163a2494d82bee5820/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287ef129b68d25d219b167163a2494d82bee5820/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-8.c?ref=287ef129b68d25d219b167163a2494d82bee5820", "patch": "@@ -0,0 +1,62 @@\n+/* PR tree-optimization/79220 - missing -Wstringop-overflow= on a memcpy\n+   overflow with a small power-of-2 size\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wno-array-bounds -Wstringop-overflow\" } */\n+\n+extern void* memcpy (void*, const void*, __SIZE_TYPE__);\n+extern void* memmove (void*, const void*, __SIZE_TYPE__);\n+extern void* memset (void*, int, __SIZE_TYPE__);\n+\n+char d[1];\n+\n+void test_memcpy_lit_2 (void)\n+{\n+  memcpy (d, \"01\", 2);          /* { dg-warning \"\\\\\\[-Wstringop-overflow\" } */\n+}\n+\n+void test_memcpy_lit_4 (void)\n+{\n+  memcpy (d, \"0123\", 4);        /* { dg-warning \"\\\\\\[-Wstringop-overflow\" } */\n+}\n+\n+void test_memmove_lit_8 (void)\n+{\n+  memmove (d, \"01234567\", 8);   /* { dg-warning \"\\\\\\[-Wstringop-overflow\" } */\n+}\n+\n+\n+void test_memcpy_ptr_2 (const void *s)\n+{\n+  memcpy (d, s, 2);             /* { dg-warning \"\\\\\\[-Wstringop-overflow\" } */\n+}\n+\n+void test_memcpy_ptr_4 (const void *s)\n+{\n+  memcpy (d, s, 4);             /* { dg-warning \"\\\\\\[-Wstringop-overflow\" } */\n+}\n+\n+void test_memcpy_ptr_8 (const void *s)\n+{\n+  memcpy (d, s, 8);             /* { dg-warning \"\\\\\\[-Wstringop-overflow\" } */\n+}\n+\n+\n+void test_memmove_ptr (const void *s)\n+{\n+  memmove (d, s, 8);            /* { dg-warning \"\\\\\\[-Wstringop-overflow\" } */\n+}\n+\n+void test_memset_2 (void)\n+{\n+  memset (d, 0, 2);             /* { dg-warning \"\\\\\\[-Wstringop-overflow\" } */\n+}\n+\n+void test_memset_4 (void)\n+{\n+  memset (d, 0, 4);             /* { dg-warning \"\\\\\\[-Wstringop-overflow\" } */\n+}\n+\n+void test_memset_8 (void)\n+{\n+  memset (d, 0, 8);             /* { dg-warning \"\\\\\\[-Wstringop-overflow\" } */\n+}"}, {"sha": "11db965c7ddcb07d254ea9fff02ee89e4dddac56", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-9.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287ef129b68d25d219b167163a2494d82bee5820/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287ef129b68d25d219b167163a2494d82bee5820/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-9.c?ref=287ef129b68d25d219b167163a2494d82bee5820", "patch": "@@ -0,0 +1,72 @@\n+/* PR middle-end/88771 - Misleading -Werror=array-bounds error\n+   Verify that the warning issued for calls to \"bounded\" string\n+   functions is -Wstringop-overflow with the right wording.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+#define PTRDIFF_MAX   __PTRDIFF_MAX__\n+#define SIZE_MAX      __SIZE_MAX__\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern void* memcpy (void*, const void*, size_t);\n+extern void* memmove (void*, const void*, size_t);\n+extern void* memset (void*, int, size_t);\n+\n+extern char* stpncpy (char*, const char*, size_t);\n+\n+extern char* strncat (char*, const char*, size_t);\n+extern char* strncpy (char*, const char*, size_t);\n+\n+extern char* strndup (const char*, size_t);\n+\n+extern int strncmp (const char*, const char*, size_t);\n+extern int strncasecmp (const char*, const char*, size_t);\n+\n+extern size_t strnlen (const char*, size_t);\n+\n+extern char *d;\n+extern const char *s;\n+\n+\n+void test_memcpy (void)\n+{\n+  memcpy (d, s, SIZE_MAX);        /* { dg-warning \".memcpy. specified bound \\[0-9\\]+ exceeds maximum object size \\[0-9\\]+ \\\\\\[-Wstringop-overflow=\\\\\\]\" } */\n+}\n+\n+void test_memmove (void)\n+{\n+  memmove (d, s, SIZE_MAX - 1);   /* { dg-warning \".memmove. specified bound \\[0-9\\]+ exceeds maximum object size \\[0-9\\]+ \\\\\\[-Wstringop-overflow=\\\\\\]\" } */\n+}\n+\n+void test_memset (void)\n+{\n+  memset (d, 0, SIZE_MAX - 2);    /* { dg-warning \".memset. specified \\(bound|size\\) \\[0-9\\]+ exceeds maximum object size \\[0-9\\]+ \\\\\\[-Wstringop-overflow=\\\\\\]\" } */\n+}\n+\n+\n+char* test_stpncpy (void)\n+{\n+  return stpncpy (d, s, SIZE_MAX - 4);   /* { dg-warning \".stpncpy. specified bound \\[0-9\\]+ exceeds maximum object size \\[0-9\\]+ \\\\\\[-Wstringop-overflow=\\\\\\]\" } */\n+}\n+\n+\n+void test_strncat (void)\n+{\n+  strncat (d, s, SIZE_MAX - 3);   /* { dg-warning \".strncat. specified bound \\[0-9\\]+ exceeds maximum object size \\[0-9\\]+ \\\\\\[-Wstringop-overflow=\\\\\\]\" } */\n+}\n+\n+void test_strncpy (void)\n+{\n+  strncpy (d, s, SIZE_MAX - 4);   /* { dg-warning \".strncpy. specified bound \\[0-9\\]+ exceeds maximum object size \\[0-9\\]+ \\\\\\[-Wstringop-overflow=\\\\\\]\" } */\n+}\n+\n+char* test_strndup (void)\n+{\n+  return strndup (s, SIZE_MAX - 5);   /* { dg-warning \".strndup. specified bound \\[0-9\\]+ exceeds maximum object size \\[0-9\\]+ \\\\\\[-Wstringop-overflow=\\\\\\]\" } */\n+}\n+\n+size_t test_strnlen (void)\n+{\n+  return strnlen (s, SIZE_MAX - 6);   /* { dg-warning \".strnlen. specified bound \\[0-9\\]+ exceeds maximum object size \\[0-9\\]+ \\\\\\[-Wstringop-overflow=\\\\\\]\" } */\n+}"}, {"sha": "4b7b0f2c14ff5d86400609430f917741df9cc14b", "filename": "gcc/testsuite/gcc.dg/builtin-stpncpy.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287ef129b68d25d219b167163a2494d82bee5820/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stpncpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287ef129b68d25d219b167163a2494d82bee5820/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stpncpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stpncpy.c?ref=287ef129b68d25d219b167163a2494d82bee5820", "patch": "@@ -35,7 +35,7 @@ void test_cst (char *d)\n \n   __builtin_stpncpy (d, \"123\", n);\n \n-  __builtin_stpncpy (d, \"123\", n + 1);    /* { dg-warning \"specified size \\[0-9\\]+ exceeds maximum object size \\[0-9\\]+\" } */\n+  __builtin_stpncpy (d, \"123\", n + 1);    /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size \\[0-9\\]+\" } */\n }\n \n \n@@ -73,5 +73,5 @@ void test_rng (char *d)\n \n   __builtin_stpncpy (d, \"123\", R (n - 1, n + 1));\n \n-  __builtin_stpncpy (d, \"123\", R (n + 1, n + 2));   /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size \\[0-9\\]+\" } */\n+  __builtin_stpncpy (d, \"123\", R (n + 1, n + 2));   /* { dg-warning \"specified bound between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size \\[0-9\\]+\" } */\n }"}, {"sha": "6e836c5d4d3f3a110b309d6eca73ee807ddc59a6", "filename": "gcc/testsuite/gcc.dg/builtin-stringop-chk-4.c", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287ef129b68d25d219b167163a2494d82bee5820/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287ef129b68d25d219b167163a2494d82bee5820/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stringop-chk-4.c?ref=287ef129b68d25d219b167163a2494d82bee5820", "patch": "@@ -102,13 +102,13 @@ void test_memcpy_range (void *d, const void *s)\n   memcpy (buf + size_max, s, UR (1, 2));  /* { dg-warning \"writing between 1 and 2 bytes into a region of size 0 overflows the destination\" \"excessive pointer offset\" { xfail *-*-* } } */\n \n   memcpy (buf, s, UR (ssize_max, size_max));   /* { dg-warning \"writing \\[0-9\\]+ or more bytes into a region of size 5 overflows the destination\" } */\n-  memcpy (buf, s, UR (ssize_max + 1, size_max));  /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n-  memcpy (buf, s, UR (size_max - 1, size_max));  /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n+  memcpy (buf, s, UR (ssize_max + 1, size_max));  /* { dg-warning \"specified \\(bound|size\\) between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n+  memcpy (buf, s, UR (size_max - 1, size_max));  /* { dg-warning \"specified \\(bound|size\\) between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n \n   /* Exercise memcpy into a destination of unknown size with excessive\n      number of bytes.  */\n   memcpy (d, s, UR (ssize_max, size_max));\n-  memcpy (d, s, UR (ssize_max + 1, size_max));   /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n+  memcpy (d, s, UR (ssize_max + 1, size_max));   /* { dg-warning \"specified \\(bound|size\\) between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n \n   memcpy (buf, s, SR (-1, 1));\n   memcpy (buf, s, SR (-3, 2));\n@@ -124,8 +124,8 @@ void test_memcpy_range (void *d, const void *s)\n   memcpy (d, s, SR (-9, 5));\n   memcpy (d, s, SR (-11, 6));\n \n-  memcpy (buf, s, SR (-2, -1));   /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n-  memcpy (d, s, SR (-2, -1));   /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n+  memcpy (buf, s, SR (-2, -1));   /* { dg-warning \"specified \\(bound|size\\) between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n+  memcpy (d, s, SR (-2, -1));   /* { dg-warning \"specified \\(bound|size\\) between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n \n   /* Even though the following calls are bounded by the range of N's\n      type they must not cause a warning for obvious reasons.  */\n@@ -187,13 +187,13 @@ void test_mempcpy_range (void *d, const void *s)\n   mempcpy (buf, s, UR (6, 7));  /* { dg-warning \"writing between 6 and 7 bytes into a region of size 5 overflows the destination\" } */\n \n   mempcpy (buf, s, UR (ssize_max, size_max));   /* { dg-warning \"writing \\[0-9\\]+ or more bytes into a region of size 5 overflows the destination\" } */\n-  mempcpy (buf, s, UR (ssize_max + 1, size_max));  /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n-  mempcpy (buf, s, UR (size_max - 1, size_max));  /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n+  mempcpy (buf, s, UR (ssize_max + 1, size_max));  /* { dg-warning \"specified \\(bound|size\\) between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n+  mempcpy (buf, s, UR (size_max - 1, size_max));  /* { dg-warning \"specified \\(bound|size\\) between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n \n   /* Exercise mempcpy into a destination of unknown size with excessive\n      number of bytes.  */\n   mempcpy (d, s, UR (ssize_max, size_max));\n-  mempcpy (d, s, UR (ssize_max + 1, size_max));   /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n+  mempcpy (d, s, UR (ssize_max + 1, size_max));   /* { dg-warning \"specified \\(bound|size\\) between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n }\n \n /* Test memset with a number of bytes bounded by a known range.  */\n@@ -213,13 +213,13 @@ void test_memset_range (void *d)\n   memset (buf, 0, UR (6, 7));  /* { dg-warning \"writing between 6 and 7 bytes into a region of size 5 overflows the destination\" } */\n \n   memset (buf, 0, UR (ssize_max, size_max));   /* { dg-warning \"writing \\[0-9\\]+ or more bytes into a region of size 5 overflows the destination\" } */\n-  memset (buf, 0, UR (ssize_max + 1, size_max));  /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n-  memset (buf, 0, UR (size_max - 1, size_max));  /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n+  memset (buf, 0, UR (ssize_max + 1, size_max));  /* { dg-warning \"specified \\(bound|size\\) between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n+  memset (buf, 0, UR (size_max - 1, size_max));  /* { dg-warning \"specified \\(bound|size\\) between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n \n   /* Exercise memset into a destination of unknown size with excessive\n      number of bytes.  */\n   memset (d, 0, UR (ssize_max, size_max));\n-  memset (d, 0, UR (ssize_max + 1, size_max));   /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n+  memset (d, 0, UR (ssize_max + 1, size_max));   /* { dg-warning \"specified \\(bound|size\\) between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n }\n \n /* Test bzero with a number of bytes bounded by a known range.  */\n@@ -239,13 +239,13 @@ void test_bzero_range (void *d)\n   bzero (buf, UR (6, 7));  /* { dg-warning \"writing between 6 and 7 bytes into a region of size 5 overflows the destination\" } */\n \n   bzero (buf, UR (ssize_max, size_max));   /* { dg-warning \"writing \\[0-9\\]+ or more bytes into a region of size 5 overflows the destination\" } */\n-  bzero (buf, UR (ssize_max + 1, size_max));  /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n-  bzero (buf, UR (size_max - 1, size_max));  /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n+  bzero (buf, UR (ssize_max + 1, size_max));  /* { dg-warning \"specified \\(bound|size\\) between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n+  bzero (buf, UR (size_max - 1, size_max));  /* { dg-warning \"specified \\(bound|size\\) between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n \n   /* Exercise bzero into a destination of unknown size with excessive\n      number of bytes.  */\n   bzero (d, UR (ssize_max, size_max));\n-  bzero (d, UR (ssize_max + 1, size_max));   /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n+  bzero (d, UR (ssize_max + 1, size_max));   /* { dg-warning \"specified \\(bound|size\\) between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n }\n \n /* Test strcat with an argument referencing a non-constant string of\n@@ -343,31 +343,31 @@ void test_strncat_range (void)\n \n   strncat (buf + 5, S (0), 0);\n \n-  strncat (buf + 5, S (0), 1);   /* { dg-warning \"specified bound 1 exceeds destination size 0\" } */\n-  strncat (buf + 5, S (1), 1);   /* { dg-warning \"specified bound 1 exceeds destination size 0\" } */\n+  strncat (buf + 5, S (0), 1);   /* { dg-warning \"specified \\(bound|size\\) 1 exceeds destination size 0\" } */\n+  strncat (buf + 5, S (1), 1);   /* { dg-warning \"specified \\(bound|size\\) 1 exceeds destination size 0\" } */\n \n   /* Strncat always appends a terminating null after copying the N\n      characters so the following triggers a warning pointing out\n      that specifying sizeof(buf) as the upper bound may cause\n      the nul to overflow the destination.  */\n-  strncat (buf, S (0), 5);   /* { dg-warning \"specified bound 5 equals destination size\" } */\n-  strncat (buf, S (0), 6);   /* { dg-warning \"specified bound 6 exceeds destination size 5\" } */\n+  strncat (buf, S (0), 5);   /* { dg-warning \"specified \\(bound|size\\) 5 equals destination size\" } */\n+  strncat (buf, S (0), 6);   /* { dg-warning \"specified \\(bound|size\\) 6 exceeds destination size 5\" } */\n \n   strncat (buf, S (1), 0);\n   strncat (buf, S (1), 1);\n   strncat (buf, S (1), 2);\n   strncat (buf, S (1), 3);\n   strncat (buf, S (1), 4);\n-  strncat (buf, S (1), 5);   /* { dg-warning \"specified bound 5 equals destination size\" } */\n-  strncat (buf, S (1), 6);   /* { dg-warning \"specified bound 6 exceeds destination size 5\" } */\n-  strncat (buf, S (2), 6);   /* { dg-warning \"specified bound 6 exceeds destination size 5\" } */\n+  strncat (buf, S (1), 5);   /* { dg-warning \"specified \\(bound|size\\) 5 equals destination size\" } */\n+  strncat (buf, S (1), 6);   /* { dg-warning \"specified \\(bound|size\\) 6 exceeds destination size 5\" } */\n+  strncat (buf, S (2), 6);   /* { dg-warning \"specified \\(bound|size\\) 6 exceeds destination size 5\" } */\n \n   /* The following could just as well say \"writing 6 bytes into a region\n      of size 5.  Either would be correct and probably equally as clear\n      in this case.  But when the length of the source string is not known\n      at all then the bound warning seems clearer.  */\n-  strncat (buf, S (5), 6);   /* { dg-warning \"specified bound 6 exceeds destination size 5\" } */\n-  strncat (buf, S (7), 6);   /* { dg-warning \"specified bound 6 exceeds destination size 5\" } */\n+  strncat (buf, S (5), 6);   /* { dg-warning \"specified \\(bound|size\\) 6 exceeds destination size 5\" } */\n+  strncat (buf, S (7), 6);   /* { dg-warning \"specified \\(bound|size\\) 6 exceeds destination size 5\" } */\n \n   {\n     /* The implementation of the warning isn't smart enough to determine\n@@ -392,17 +392,17 @@ void test_strncat_chk_range (char *d)\n   strncat_chk (buf, S (0), 2);\n   strncat_chk (buf, S (0), 3);\n   strncat_chk (buf, S (0), 4);\n-  strncat_chk (buf, S (0), 5);   /* { dg-warning \"specified bound 5 equals destination size\" } */\n+  strncat_chk (buf, S (0), 5);   /* { dg-warning \"specified \\(bound|size\\) 5 equals destination size\" } */\n \n   strncat_chk (buf, S (5), 1);\n   strncat_chk (buf, S (5), 2);\n   strncat_chk (buf, S (5), 3);\n   strncat_chk (buf, S (5), 4);\n-  strncat_chk (buf, S (5), 5);   /* { dg-warning \"specified bound 5 equals destination size\" } */\n+  strncat_chk (buf, S (5), 5);   /* { dg-warning \"specified \\(bound|size\\) 5 equals destination size\" } */\n \n-  strncat_chk (buf, S (5), 10);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds destination size 5\" } */\n+  strncat_chk (buf, S (5), 10);   /* { dg-warning \"specified \\(bound|size\\) \\[0-9\\]+ exceeds destination size 5\" } */\n \n-  strncat_chk (d, S (5), size_max);   /* { dg-warning \"specified bound \\[0-9\\]+ exceeds maximum object size \" } */\n+  strncat_chk (d, S (5), size_max);   /* { dg-warning \"specified \\(bound|size\\) \\[0-9\\]+ exceeds maximum object size \" } */\n }\n \n /* Test strncpy with a non-constant source string of length in a known\n@@ -426,15 +426,15 @@ void test_strncpy_string_range (char *d)\n \n   strncpy (buf, S (1), ssize_max - 1);   /* { dg-warning \"writing \\[0-9\\]+ bytes into a region of size 5\" } */\n   strncpy (buf, S (2), ssize_max);   /* { dg-warning \"writing \\[0-9\\]+ bytes into a region of size 5\" } */\n-  strncpy (buf, S (3), ssize_max + 1);   /* { dg-warning \"specified size \\[0-9\\]+ exceeds maximum object size\" } */\n-  strncpy (buf, S (4), size_max);   /* { dg-warning \"specified size \\[0-9\\]+ exceeds maximum object size\" } */\n+  strncpy (buf, S (3), ssize_max + 1);   /* { dg-warning \"specified \\(bound|size\\) \\[0-9\\]+ exceeds maximum object size\" } */\n+  strncpy (buf, S (4), size_max);   /* { dg-warning \"specified \\(bound|size\\) \\[0-9\\]+ exceeds maximum object size\" } */\n \n   /* Exercise strncpy into a destination of unknown size with a valid\n      and invalid constant number of bytes.  */\n   strncpy (d, S (1), ssize_max - 1);\n   strncpy (d, S (2), ssize_max);\n-  strncpy (d, S (3), ssize_max + 1);   /* { dg-warning \"specified size \\[0-9\\]+ exceeds maximum object size\" } */\n-  strncpy (d, S (4), size_max);   /* { dg-warning \"specified size \\[0-9\\]+ exceeds maximum object size\" } */\n+  strncpy (d, S (3), ssize_max + 1);   /* { dg-warning \"specified \\(bound|size\\) \\[0-9\\]+ exceeds maximum object size\" } */\n+  strncpy (d, S (4), size_max);   /* { dg-warning \"specified \\(bound|size\\) \\[0-9\\]+ exceeds maximum object size\" } */\n }\n \n /* Test strncpy with a non-constant source string of length in a known\n@@ -472,7 +472,7 @@ void test_strncpy_string_count_range (char *dst, const char *src)\n   strncpy (buf, S (1), UR (7, 8));   /* { dg-warning \"writing between 7 and 8 bytes into a region of size 5 \" } */\n   strncpy (buf, S (2), UR (ssize_max, ssize_max + 1));   /* { dg-warning \"writing \\[0-9\\]+ or more bytes into a region of size 5 \" } */\n \n-  strncpy (buf, S (2), UR (ssize_max + 1, ssize_max + 2));   /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n+  strncpy (buf, S (2), UR (ssize_max + 1, ssize_max + 2));   /* { dg-warning \"specified \\(bound|size\\) between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n \n   strncpy (buf + 5, S (0), UR (0, 1));\n   strncpy (buf + 5, S (1), UR (0, 1));\n@@ -500,5 +500,5 @@ void test_strncpy_string_count_range (char *dst, const char *src)\n \n   strncpy (dst, S (3), UR (ssize_max, ssize_max + 1));\n \n-  strncpy (dst, S (4), UR (ssize_max + 1, ssize_max + 2));   /* { dg-warning \"specified size between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n+  strncpy (dst, S (4), UR (ssize_max + 1, ssize_max + 2));   /* { dg-warning \"specified \\(bound|size\\) between \\[0-9\\]+ and \\[0-9\\]+ exceeds maximum object size\" } */\n }"}]}