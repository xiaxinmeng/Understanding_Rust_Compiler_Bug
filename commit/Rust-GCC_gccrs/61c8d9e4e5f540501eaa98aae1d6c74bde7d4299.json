{"sha": "61c8d9e4e5f540501eaa98aae1d6c74bde7d4299", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFjOGQ5ZTRlNWY1NDA1MDFlYWE5OGFhZTFkNmM3NGJkZTdkNDI5OQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@pc30.home", "date": "2020-02-23T10:27:37Z"}, "committer": {"name": "Paul Thomas", "email": "pault@pc30.home", "date": "2020-02-23T15:26:59Z"}, "message": "Patch for PR57710", "tree": {"sha": "2423e0ab193d90c86395ac2a852c7bb931153fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2423e0ab193d90c86395ac2a852c7bb931153fbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61c8d9e4e5f540501eaa98aae1d6c74bde7d4299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c8d9e4e5f540501eaa98aae1d6c74bde7d4299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61c8d9e4e5f540501eaa98aae1d6c74bde7d4299", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c8d9e4e5f540501eaa98aae1d6c74bde7d4299/comments", "author": null, "committer": null, "parents": [{"sha": "cd6016713aaae242660afb8ec69e17f61b2c2ad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd6016713aaae242660afb8ec69e17f61b2c2ad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd6016713aaae242660afb8ec69e17f61b2c2ad0"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "0449d281bf76c452dfaf8a61f227e2e21f311904", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c8d9e4e5f540501eaa98aae1d6c74bde7d4299/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c8d9e4e5f540501eaa98aae1d6c74bde7d4299/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=61c8d9e4e5f540501eaa98aae1d6c74bde7d4299", "patch": "@@ -8827,7 +8827,7 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \n \t  cdesc = gfc_create_var (cdesc, \"cdesc\");\n \t  DECL_ARTIFICIAL (cdesc) = 1;\n-  \n+\n \t  gfc_add_modify (&tmpblock, gfc_conv_descriptor_dtype (cdesc),\n \t  \t\t  gfc_get_dtype_rank_type (1, tmp));\n \t  gfc_conv_descriptor_lbound_set (&tmpblock, cdesc,\n@@ -8838,7 +8838,7 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t\t\t\t\t  gfc_index_one_node);\n \t  gfc_conv_descriptor_ubound_set (&tmpblock, cdesc,\n \t\t\t\t\t  gfc_index_zero_node, ubound);\n-  \n+\n \t  if (attr->dimension)\n \t    comp = gfc_conv_descriptor_data_get (comp);\n \t  else\n@@ -9116,10 +9116,14 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t      && (CLASS_DATA (c)->attr.allocatable\n \t\t  || CLASS_DATA (c)->attr.class_pointer))\n \t    {\n+\t      tree vptr_decl;\n+\n \t      /* Allocatable CLASS components.  */\n \t      comp = fold_build3_loc (input_location, COMPONENT_REF, ctype,\n \t\t\t\t      decl, cdecl, NULL_TREE);\n \n+\t      vptr_decl = gfc_class_vptr_get (comp);\n+\n \t      comp = gfc_class_data_get (comp);\n \t      if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (comp)))\n \t\tgfc_conv_descriptor_data_set (&fnblock, comp,\n@@ -9131,6 +9135,24 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t\t\t\t\t build_int_cst (TREE_TYPE (comp), 0));\n \t\t  gfc_add_expr_to_block (&fnblock, tmp);\n \t\t}\n+\n+\t      /* The dynamic type of a disassociated pointer or unallocated\n+\t\t allocatable variable is its declared type. An unlimited\n+\t\t polymorphic entity has no declared type.  */\n+\t      if (!UNLIMITED_POLY (c))\n+\t\t{\n+\t\t  vtab = gfc_find_derived_vtab (c->ts.u.derived);\n+\t\t  if (!vtab->backend_decl)\n+\t\t     gfc_get_symbol_decl (vtab);\n+\t\t  tmp = gfc_build_addr_expr (NULL_TREE, vtab->backend_decl);\n+\t\t}\n+\t      else\n+\t\ttmp = build_int_cst (TREE_TYPE (vptr_decl), 0);\n+\n+\t      tmp = fold_build2_loc (input_location, MODIFY_EXPR,\n+\t\t\t\t\t void_type_node, vptr_decl, tmp);\n+\t      gfc_add_expr_to_block (&fnblock, tmp);\n+\n \t      cmp_has_alloc_comps = false;\n \t    }\n \t  /* Coarrays need the component to be nulled before the api-call"}, {"sha": "3a81e749763bc2fec61340950df4195fc6513b0b", "filename": "gcc/testsuite/gfortran.dg/same_type_as_3.f03", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c8d9e4e5f540501eaa98aae1d6c74bde7d4299/gcc%2Ftestsuite%2Fgfortran.dg%2Fsame_type_as_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c8d9e4e5f540501eaa98aae1d6c74bde7d4299/gcc%2Ftestsuite%2Fgfortran.dg%2Fsame_type_as_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsame_type_as_3.f03?ref=61c8d9e4e5f540501eaa98aae1d6c74bde7d4299", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR57710.\n+!\n+! Contributed by Tobias Burnus  <burnus@gcc.gnu.org>\n+!\n+module m\n+  type t\n+  end type t\n+  type t2\n+    integer :: ii\n+    class(t), allocatable :: x\n+  end type t2\n+contains\n+  subroutine fini(x)\n+     type(t) :: x\n+  end subroutine fini\n+end module m\n+\n+use m\n+block\n+  type(t) :: z\n+  type(t2) :: y\n+  y%ii = 123\n+  if (.not. same_type_as(y%x, z)) call abort ()\n+end block\n+end"}]}