{"sha": "be3416c681291e5a3f6e68d311c958fb05bc7f41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUzNDE2YzY4MTI5MWU1YTNmNmU2OGQzMTFjOTU4ZmIwNWJjN2Y0MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T09:35:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T09:35:46Z"}, "message": "[multiple changes]\n\n2017-04-25  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* a-numaux.ads: Fix description of a-numaux-darwin\n\tand a-numaux-x86.\n\t(Double): Define to Long_Float.\n\t* a-numaux-vxworks.ads (Double): Likewise.\n\t* a-numaux-darwin.ads\n\t(Double): Likewise.\n\t* a-numaux-libc-x86.ads (Double): Define to Long_Long_Float.\n\t* a-numaux-x86.ads: Fix package description.\n\t* a-numaux-x86.adb (Is_Nan): Minor tweak.\n\t(Reduce): Adjust and complete description. Call Is_Nan instead of\n\ttesting manually. Use an integer temporary to hold rounded value.\n\t* a-numaux-darwin.adb (Reduce): Likewise.\n\t(Is_Nan): New function.\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Selected_Component): Additional refinement\n\ton analysis of prefix whose type is a current instance of a\n\tsynchronized type, but where the prefix itself is an entity that\n\tis an object.\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Replace_Target): When rewriting the RHS, preserve\n\tthe identity of callable entities therein, because they have been\n\tproperly resolved, and prefixed calls may have been rewritten\n\tas normal calls.\n\n2017-04-25  Patrick Bernardi  <bernardi@adacore.com>\n\n\t* exp_ch3.adb (Build_Init_Statements): Convert\n\tthe expression of the pragma/aspect Secondary_Stack_Size to\n\tinternal type System.Parameters.Size_Type before assigning\n\tit to the Secondary_Stack_Size component of the task type's\n\tcorresponding record.\n\n2017-04-25  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_eval.adb (Compile_Time_Compare): Reinstate the expr+literal\n\t(etc) optimizations when the type is modular and the offsets\n\tare equal.\n\n2017-04-25  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* s-osinte-freebsd.ads: Minor comment tweaks\n\n2017-04-25  Javier Miranda  <miranda@adacore.com>\n\n\t* urealp.adb (UR_Write): Reverse previous patch\n\tadding documentation on why we generate multiplications instead\n\tof divisions (needed to avoid expressions whose computation with\n\tlarge numbers may cause division by 0).\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* erroutc.adb (Set_Specific_Warning_Off,\n\tSet_Warnings_Mode_Off): Use the correct source file for\n\tStop. Was using Current_Source_File, which is only valid during\n\tparsing. Current_Source_File will have a leftover value from\n\twhatever file happened to be parsed last, because of a with_clause\n\tor something.\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* lib.ads, lib.adb (In_Internal_Unit): New functions similar\n\tto In_Predefined_Unit, but including GNAT units.\n\t* sem_util.ads, sem_util.adb (Should_Ignore_Pragma): Replace\n\twith Should_Ignore_Pragma_Par and Should_Ignore_Pragma_Sem,\n\tbecause Should_Ignore_Pragma was not working reliably outside\n\tthe parser, because Current_Source_File is not valid.\n\t* sem_prag.adb, exp_prag.adb: Call Should_Ignore_Pragma_Sem.\n\t* par-prag.adb: Call Should_Ignore_Pragma_Par.\n\nFrom-SVN: r247162", "tree": {"sha": "410efc9899fb1db9b7571359644e18354ea9f5e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/410efc9899fb1db9b7571359644e18354ea9f5e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be3416c681291e5a3f6e68d311c958fb05bc7f41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be3416c681291e5a3f6e68d311c958fb05bc7f41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be3416c681291e5a3f6e68d311c958fb05bc7f41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be3416c681291e5a3f6e68d311c958fb05bc7f41/comments", "author": null, "committer": null, "parents": [{"sha": "003d46d5f302b8b93ac6085e98926c009cc0dec4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/003d46d5f302b8b93ac6085e98926c009cc0dec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/003d46d5f302b8b93ac6085e98926c009cc0dec4"}], "stats": {"total": 307, "additions": 246, "deletions": 61}, "files": [{"sha": "c3a8ba48598febae8a21a164d651938bdd596b4a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -1,3 +1,78 @@\n+2017-04-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* a-numaux.ads: Fix description of a-numaux-darwin\n+\tand a-numaux-x86.\n+\t(Double): Define to Long_Float.\n+\t* a-numaux-vxworks.ads (Double): Likewise.\n+\t* a-numaux-darwin.ads\n+\t(Double): Likewise.\n+\t* a-numaux-libc-x86.ads (Double): Define to Long_Long_Float.\n+\t* a-numaux-x86.ads: Fix package description.\n+\t* a-numaux-x86.adb (Is_Nan): Minor tweak.\n+\t(Reduce): Adjust and complete description. Call Is_Nan instead of\n+\ttesting manually. Use an integer temporary to hold rounded value.\n+\t* a-numaux-darwin.adb (Reduce): Likewise.\n+\t(Is_Nan): New function.\n+\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Selected_Component): Additional refinement\n+\ton analysis of prefix whose type is a current instance of a\n+\tsynchronized type, but where the prefix itself is an entity that\n+\tis an object.\n+\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Replace_Target): When rewriting the RHS, preserve\n+\tthe identity of callable entities therein, because they have been\n+\tproperly resolved, and prefixed calls may have been rewritten\n+\tas normal calls.\n+\n+2017-04-25  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Init_Statements): Convert\n+\tthe expression of the pragma/aspect Secondary_Stack_Size to\n+\tinternal type System.Parameters.Size_Type before assigning\n+\tit to the Secondary_Stack_Size component of the task type's\n+\tcorresponding record.\n+\n+2017-04-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_eval.adb (Compile_Time_Compare): Reinstate the expr+literal\n+\t(etc) optimizations when the type is modular and the offsets\n+\tare equal.\n+\n+2017-04-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* s-osinte-freebsd.ads: Minor comment tweaks\n+\n+2017-04-25  Javier Miranda  <miranda@adacore.com>\n+\n+\t* urealp.adb (UR_Write): Reverse previous patch\n+\tadding documentation on why we generate multiplications instead\n+\tof divisions (needed to avoid expressions whose computation with\n+\tlarge numbers may cause division by 0).\n+\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* erroutc.adb (Set_Specific_Warning_Off,\n+\tSet_Warnings_Mode_Off): Use the correct source file for\n+\tStop. Was using Current_Source_File, which is only valid during\n+\tparsing. Current_Source_File will have a leftover value from\n+\twhatever file happened to be parsed last, because of a with_clause\n+\tor something.\n+\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* lib.ads, lib.adb (In_Internal_Unit): New functions similar\n+\tto In_Predefined_Unit, but including GNAT units.\n+\t* sem_util.ads, sem_util.adb (Should_Ignore_Pragma): Replace\n+\twith Should_Ignore_Pragma_Par and Should_Ignore_Pragma_Sem,\n+\tbecause Should_Ignore_Pragma was not working reliably outside\n+\tthe parser, because Current_Source_File is not valid.\n+\t* sem_prag.adb, exp_prag.adb: Call Should_Ignore_Pragma_Sem.\n+\t* par-prag.adb: Call Should_Ignore_Pragma_Par.\n+\n 2017-04-25  Arnaud Charlet  <charlet@adacore.com trojanek>\n \n \t* gnat1drv.adb (Gnat1Drv): Disable Generate_Processed_File in"}, {"sha": "3c4a10130365f8228fafbae49732d49543843a0c", "filename": "gcc/ada/a-numaux-darwin.adb", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fa-numaux-darwin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fa-numaux-darwin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numaux-darwin.adb?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                          (Apple OS X Version)                            --\n --                                                                          --\n---          Copyright (C) 1998-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,11 +36,17 @@ package body Ada.Numerics.Aux is\n    -- Local subprograms --\n    -----------------------\n \n+   function Is_Nan (X : Double) return Boolean;\n+   --  Return True iff X is a IEEE NaN value\n+\n    procedure Reduce (X : in out Double; Q : out Natural);\n-   --  Implements reduction of X by Pi/2. Q is the quadrant of the final\n-   --  result in the range 0 .. 3. The absolute value of X is at most Pi/4.\n+   --  Implement reduction of X by Pi/2. Q is the quadrant of the final\n+   --  result in the range 0..3. The absolute value of X is at most Pi/4.\n+   --  It is needed to avoid a loss of accuracy for sin near Pi and cos\n+   --  near Pi/2 due to the use of an insufficiently precise value of Pi\n+   --  in the range reduction.\n \n-   --  The following three functions implement Chebishev approximations\n+   --  The following two functions implement Chebishev approximations\n    --  of the trigonometric functions in their reduced domain.\n    --  These approximations have been computed using Maple.\n \n@@ -51,6 +57,10 @@ package body Ada.Numerics.Aux is\n    pragma Inline (Sine_Approx);\n    pragma Inline (Cosine_Approx);\n \n+   -------------------\n+   -- Cosine_Approx --\n+   -------------------\n+\n    function Cosine_Approx (X : Double) return Double is\n       XX : constant Double := X * X;\n    begin\n@@ -63,6 +73,10 @@ package body Ada.Numerics.Aux is\n               - 16#3.655E64869ECCE#E-14 + 1.0;\n    end Cosine_Approx;\n \n+   -----------------\n+   -- Sine_Approx --\n+   -----------------\n+\n    function Sine_Approx (X : Double) return Double is\n       XX : constant Double := X * X;\n    begin\n@@ -74,6 +88,17 @@ package body Ada.Numerics.Aux is\n               - 16#2.AAAAAAAAAAA44#E-01) * (XX * X) + X;\n    end Sine_Approx;\n \n+   ------------\n+   -- Is_Nan --\n+   ------------\n+\n+   function Is_Nan (X : Double) return Boolean is\n+   begin\n+      --  The IEEE NaN values are the only ones that do not equal themselves\n+\n+      return X /= X;\n+   end Is_Nan;\n+\n    ------------\n    -- Reduce --\n    ------------\n@@ -92,6 +117,7 @@ package body Ada.Numerics.Aux is\n                                                                  - P4, HM);\n       P6 : constant Double := Double'Model (Half_Pi - P1 - P2 - P3 - P4 - P5);\n       K  : Double;\n+      R  : Integer;\n \n    begin\n       --  For X < 2.0**HM, all products below are computed exactly.\n@@ -101,7 +127,7 @@ package body Ada.Numerics.Aux is\n       --  rounded result of X - K * (Pi / 2.0).\n \n       K := X * Two_Over_Pi;\n-      while abs K >= 2.0 ** HM loop\n+      while abs K >= 2.0**HM loop\n          K := K * M - (K * M - K);\n          X :=\n            (((((X - K * P1) - K * P2) - K * P3) - K * P4) - K * P5) - K * P6;\n@@ -110,14 +136,16 @@ package body Ada.Numerics.Aux is\n \n       --  If K is not a number (because X was not finite) raise exception\n \n-      if K /= K then\n+      if Is_Nan (K) then\n          raise Constraint_Error;\n       end if;\n \n-      K := Double'Rounding (K);\n-      Q := Integer (K) mod 4;\n-      X := (((((X - K * P1) - K * P2) - K * P3)\n-                  - K * P4) - K * P5) - K * P6;\n+      --  Go through an integer temporary so as to use machine instructions\n+\n+      R := Integer (Double'Rounding (K));\n+      Q := R mod 4;\n+      K := Double (R);\n+      X := (((((X - K * P1) - K * P2) - K * P3) - K * P4) - K * P5) - K * P6;\n    end Reduce;\n \n    ---------"}, {"sha": "a548798826a84bae157fa3c1653422cd6638ef25", "filename": "gcc/ada/a-numaux-darwin.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fa-numaux-darwin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fa-numaux-darwin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numaux-darwin.ads?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                          (Apple OS X Version)                            --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,7 +39,7 @@ package Ada.Numerics.Aux is\n \n    pragma Linker_Options (\"-lm\");\n \n-   type Double is digits 15;\n+   type Double is new Long_Float;\n    --  Type Double is the type used to call the C routines\n \n    --  The following functions have been implemented in Ada, since"}, {"sha": "3f59fabdce611802bd5912004e4285a93bed6ba0", "filename": "gcc/ada/a-numaux-libc-x86.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fa-numaux-libc-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fa-numaux-libc-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numaux-libc-x86.ads?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                       (C Library Version for x86)                        --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,7 +37,7 @@ package Ada.Numerics.Aux is\n \n    pragma Linker_Options (\"-lm\");\n \n-   type Double is digits 18;\n+   type Double is new Long_Long_Float;\n \n    --  We import these functions directly from C. Note that we label them\n    --  all as pure functions, because indeed all of them are in fact pure."}, {"sha": "25fcd2d420e3f7de1c2cfae56495004840c2c17a", "filename": "gcc/ada/a-numaux-vxworks.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fa-numaux-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fa-numaux-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numaux-vxworks.ads?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                       (C Library Version, VxWorks)                       --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,7 +36,7 @@\n package Ada.Numerics.Aux is\n    pragma Pure;\n \n-   type Double is digits 15;\n+   type Double is new Long_Float;\n    --  Type Double is the type used to call the C routines\n \n    --  We import these functions directly from C. Note that we label them"}, {"sha": "b6690d13abedf0598bc25edbaf19cf94464c19c4", "filename": "gcc/ada/a-numaux-x86.adb", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fa-numaux-x86.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fa-numaux-x86.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numaux-x86.adb?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -49,8 +49,11 @@ package body Ada.Numerics.Aux is\n    --  for values of Y in the open interval (-0.25, 0.25)\n \n    procedure Reduce (X : in out Double; Q : out Natural);\n-   --  Implements reduction of X by Pi/2. Q is the quadrant of the final\n-   --  result in the range 0 .. 3. The absolute value of X is at most Pi.\n+   --  Implement reduction of X by Pi/2. Q is the quadrant of the final\n+   --  result in the range 0..3. The absolute value of X is at most Pi/4.\n+   --  It is needed to avoid a loss of accuracy for sin near Pi and cos\n+   --  near Pi/2 due to the use of an insufficiently precise value of Pi\n+   --  in the range reduction.\n \n    pragma Inline (Is_Nan);\n    pragma Inline (Reduce);\n@@ -117,7 +120,7 @@ package body Ada.Numerics.Aux is\n    begin\n       --  The IEEE NaN values are the only ones that do not equal themselves\n \n-      return not (X = X);\n+      return X /= X;\n    end Is_Nan;\n \n    ---------\n@@ -154,32 +157,36 @@ package body Ada.Numerics.Aux is\n       P5 : constant Double := Double'Leading_Part (Half_Pi - P1 - P2 - P3\n                                                                  - P4, HM);\n       P6 : constant Double := Double'Model (Half_Pi - P1 - P2 - P3 - P4 - P5);\n-      K  : Double := X * Two_Over_Pi;\n+      K  : Double;\n+      R  : Integer;\n+\n    begin\n-      --  For X < 2.0**32, all products below are computed exactly.\n+      --  For X < 2.0**HM, all products below are computed exactly.\n       --  Due to cancellation effects all subtractions are exact as well.\n       --  As no double extended floating-point number has more than 75\n       --  zeros after the binary point, the result will be the correctly\n       --  rounded result of X - K * (Pi / 2.0).\n \n+      K := X * Two_Over_Pi;\n       while abs K >= 2.0**HM loop\n          K := K * M - (K * M - K);\n-         X := (((((X - K * P1) - K * P2) - K * P3)\n-                     - K * P4) - K * P5) - K * P6;\n+         X :=\n+           (((((X - K * P1) - K * P2) - K * P3) - K * P4) - K * P5) - K * P6;\n          K := X * Two_Over_Pi;\n       end loop;\n \n-      if K /= K then\n-\n-         --  K is not a number, because X was not finite\n+      --  If K is not a number (because X was not finite) raise exception\n \n+      if Is_Nan (K) then\n          raise Constraint_Error;\n       end if;\n \n-      K := Double'Rounding (K);\n-      Q := Integer (K) mod 4;\n-      X := (((((X - K * P1) - K * P2) - K * P3)\n-                  - K * P4) - K * P5) - K * P6;\n+      --  Go through an integer temporary so as to use machine instructions\n+\n+      R := Integer (Double'Rounding (K));\n+      Q := R mod 4;\n+      K := Double (R);\n+      X := (((((X - K * P1) - K * P2) - K * P3) - K * P4) - K * P5) - K * P6;\n    end Reduce;\n \n    ----------"}, {"sha": "4c98ef1604a81e061a5f74aa28e207615ef3096b", "filename": "gcc/ada/a-numaux-x86.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fa-numaux-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fa-numaux-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numaux-x86.ads?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                        (Machine Version for x86)                         --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,7 +30,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Version for the x86, using 64-bit IEEE format with inline asm statements\n+--  This version is for the x86 using the 80-bit x86 long double format with\n+--  inline asm statements.\n \n package Ada.Numerics.Aux is\n    pragma Pure;"}, {"sha": "2e7d1e38dbf6206ae25e774100d37b61c8dda73c", "filename": "gcc/ada/a-numaux.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fa-numaux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fa-numaux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numaux.ads?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                       (C Library Version, non-x86)                       --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,17 +40,18 @@\n --  This version here is for use with normal Unix math functions. Alternative\n --  versions are provided for special situations:\n \n---    a-numaux-darwin    For OS/X (special handling of sin/cos for accuracy)\n+--    a-numaux-darwin    For PowerPC/Darwin (special handling of sin/cos)\n --    a-numaux-libc-x86  For the x86, using 80-bit long double format\n---    a-numaux-x86       For the x86, using 64-bit IEEE (inline asm statements)\n+--    a-numaux-x86       For the x86, using 80-bit long double format with\n+--                       inline asm statements\n --    a-numaux-vxworks   For use on VxWorks (where we have no libm.a library)\n \n package Ada.Numerics.Aux is\n    pragma Pure;\n \n    pragma Linker_Options (\"-lm\");\n \n-   type Double is digits 15;\n+   type Double is new Long_Float;\n    --  Type Double is the type used to call the C routines\n \n    --  We import these functions directly from C. Note that we label them"}, {"sha": "cf1095c7ae5017ca6361c81ff354bc201cec8124", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -1447,7 +1447,7 @@ package body Erroutc is\n       Specific_Warnings.Append\n         ((Start      => Loc,\n           Msg        => new String'(Msg),\n-          Stop       => Source_Last (Current_Source_File),\n+          Stop       => Source_Last (Get_Source_File_Index (Loc)),\n           Reason     => Reason,\n           Open       => True,\n           Used       => Used,\n@@ -1531,7 +1531,7 @@ package body Erroutc is\n \n       Warnings.Append\n         ((Start  => Loc,\n-          Stop   => Source_Last (Current_Source_File),\n+          Stop   => Source_Last (Get_Source_File_Index (Loc)),\n           Reason => Reason));\n    end Set_Warnings_Mode_Off;\n "}, {"sha": "7e03e4ed640fdb73617cb7be745f2e8875a930f0", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -4274,7 +4274,7 @@ package body Exp_Aggr is\n       --  Check whether all components of the aggregate are compile-time known\n       --  values, and can be passed as is to the back-end without further\n       --  expansion.\n-      --  An Iterated_component_Association is treated as non-static, but there\n+      --  An Iterated_Component_Association is treated as non-static, but there\n       --  are possibilities for optimization here.\n \n       function Flatten"}, {"sha": "63a1e601def0fd61483b92508b907a56a141308a", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -2950,6 +2950,11 @@ package body Exp_Ch3 is\n                            Exp :=\n                              Unchecked_Convert_To\n                                (RTE (RE_Dispatching_Domain_Access), Exp);\n+\n+                        --  Conversion for Secondary_Stack_Size value\n+\n+                        elsif Nam = Name_Secondary_Stack_Size then\n+                           Exp := Convert_To (RTE (RE_Size_Type), Exp);\n                         end if;\n \n                         Actions := Build_Assignment (Id, Exp);"}, {"sha": "5267024bc6e8d8050ed2fd11da62e5bec46b4b48", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -1642,10 +1642,16 @@ package body Exp_Ch5 is\n          --  The expression will be reanalyzed when the enclosing assignment\n          --  is reanalyzed, so reset the entity, which may be a temporary\n          --  created during analysis, e.g. a loop variable for an iterated\n-         --  component association.\n+         --  component association. However, if entity is callable then\n+         --  resolution has established its proper identity (including in\n+         --  rewritten prefixed calls) so we must preserve it.\n \n          elsif Is_Entity_Name (N) then\n-            Set_Entity (N, Empty);\n+            if Present (Entity (N))\n+              and then not Is_Overloadable (Entity (N))\n+            then\n+               Set_Entity (N, Empty);\n+            end if;\n          end if;\n \n          Set_Analyzed (N, False);"}, {"sha": "b8490a74a2c18f38b1e3bfb5f1ac0d33d7d8429a", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -168,7 +168,7 @@ package body Exp_Prag is\n       --  the back end or the expander here does not get overenthusiastic and\n       --  start processing such a pragma!\n \n-      if Should_Ignore_Pragma (Pname) then\n+      if Should_Ignore_Pragma_Sem (N) then\n          Rewrite (N, Make_Null_Statement (Sloc (N)));\n          return;\n       end if;"}, {"sha": "ae9e29aa9277d66e94ab008dc4f578e6a7530954", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -893,6 +893,22 @@ package body Lib is\n       end if;\n    end In_Extended_Main_Source_Unit;\n \n+   ----------------------\n+   -- In_Internal_Unit --\n+   ----------------------\n+\n+   function In_Internal_Unit (N : Node_Or_Entity_Id) return Boolean is\n+   begin\n+      return In_Internal_Unit (Sloc (N));\n+   end In_Internal_Unit;\n+\n+   function In_Internal_Unit (S : Source_Ptr) return Boolean is\n+      Unit : constant Unit_Number_Type := Get_Source_Unit (S);\n+      File : constant File_Name_Type   := Unit_File_Name (Unit);\n+   begin\n+      return Is_Internal_File_Name (File);\n+   end In_Internal_Unit;\n+\n    ------------------------\n    -- In_Predefined_Unit --\n    ------------------------"}, {"sha": "3ee4125f59fe0be180541c82f67978b8698e9770", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -599,6 +599,11 @@ package Lib is\n    function In_Predefined_Unit (S : Source_Ptr) return Boolean;\n    --  Same function as above but argument is a source pointer\n \n+   function In_Internal_Unit (N : Node_Or_Entity_Id) return Boolean;\n+   function In_Internal_Unit (S : Source_Ptr) return Boolean;\n+   --  Same as In_Predefined_Unit, except units in the GNAT hierarchy are\n+   --  included.\n+\n    function In_Same_Code_Unit (N1, N2 : Node_Or_Entity_Id) return Boolean;\n    pragma Inline (In_Same_Code_Unit);\n    --  Determines if the two nodes or entities N1 and N2 are in the same"}, {"sha": "e3a1b3ff59fd5ff46fd03df9f90638b29e4bb104", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -294,7 +294,7 @@ begin\n \n    --  Ignore pragma previously flagged by Ignore_Pragma\n \n-   if Should_Ignore_Pragma (Prag_Name) then\n+   if Should_Ignore_Pragma_Par (Prag_Name) then\n       return Pragma_Node;\n    end if;\n "}, {"sha": "12854445bd3141bc4f3246c7c1f5f655e539ade4", "filename": "gcc/ada/s-osinte-freebsd.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fs-osinte-freebsd.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fs-osinte-freebsd.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-freebsd.ads?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -7,7 +7,7 @@\n --                                   S p e c                                --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "5e6642988a427fb5326f006f32ccc63deb8e0199", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -4914,6 +4914,7 @@ package body Sem_Ch4 is\n          --  expression of the same type, unless the selector designates a\n          --  public operation (otherwise that would represent an attempt to\n          --  reach an internal entity of another synchronized object).\n+\n          --  This is legal if prefix is an access to such type and there is\n          --  a dereference, or is a component with a dereferenced prefix.\n          --  It is also legal if the prefix is a component of a task type,\n@@ -4943,6 +4944,21 @@ package body Sem_Ch4 is\n                Set_Etype  (Sel, Any_Type);\n                return;\n             end if;\n+\n+         --  Another special case: the prefix may denote an object of the type\n+         --  (but not a type) in which case this is an external call and the\n+         --  operation must be public.\n+\n+         elsif In_Scope\n+           and then Is_Object_Reference (Original_Node (Prefix (N)))\n+           and then Is_Private_Op\n+         then\n+            Error_Msg_NE\n+              (\"invalid reference to private operation of some object of \"\n+               & \"type &\", N, Type_To_Use);\n+            Set_Entity (Sel, Any_Id);\n+            Set_Etype  (Sel, Any_Type);\n+            return;\n          end if;\n \n          --  If there is no visible entity with the given name or none of the"}, {"sha": "aebc0a625e2e146e609648a0bb005c18385779c8", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -10389,7 +10389,7 @@ package body Sem_Prag is\n \n       --  Ignore pragma if Ignore_Pragma applies\n \n-      if Should_Ignore_Pragma (Pname) then\n+      if Should_Ignore_Pragma_Sem (N) then\n          return;\n       end if;\n "}, {"sha": "ff3ee6e17b09e677b11f8f66ba194f36a6b16e37", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -20638,16 +20638,34 @@ package body Sem_Util is\n       Set_Alignment                 (T1, Alignment                 (T2));\n    end Set_Size_Info;\n \n+   ------------------------------\n+   -- Should_Ignore_Pragma_Par --\n+   ------------------------------\n+\n+   function Should_Ignore_Pragma_Par (Prag_Name : Name_Id) return Boolean is\n+      pragma Assert (Compiler_State = Parsing);\n+      --  This one can't work during semantic analysis, because we don't have a\n+      --  correct Current_Source_File.\n+\n+      Result : constant Boolean :=\n+        Get_Name_Table_Boolean3 (Prag_Name)\n+          and then not Is_Internal_File_Name (File_Name (Current_Source_File));\n+   begin\n+      return Result;\n+   end Should_Ignore_Pragma_Par;\n+\n    --------------------------\n-   -- Should_Ignore_Pragma --\n+   -- Should_Ignore_Pragma_Sem --\n    --------------------------\n \n-   function Should_Ignore_Pragma (Prag_Name : Name_Id) return Boolean is\n+   function Should_Ignore_Pragma_Sem (N : Node_Id) return Boolean is\n+      pragma Assert (Compiler_State = Analyzing);\n+      Prag_Name : constant Name_Id := Pragma_Name (N);\n+      Result : constant Boolean :=\n+        Get_Name_Table_Boolean3 (Prag_Name) and then not In_Internal_Unit (N);\n    begin\n-      return\n-        not Is_Internal_File_Name (File_Name (Current_Source_File))\n-          and then Get_Name_Table_Boolean3 (Prag_Name);\n-   end Should_Ignore_Pragma;\n+      return Result;\n+   end Should_Ignore_Pragma_Sem;\n \n    --------------------\n    -- Static_Boolean --"}, {"sha": "9b4ba0e118bae8897094355d18090c4c20a180c4", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -2359,10 +2359,12 @@ package Sem_Util is\n    function Scope_Is_Transient return Boolean;\n    --  True if the current scope is transient\n \n-   function Should_Ignore_Pragma (Prag_Name : Name_Id) return Boolean;\n+   function Should_Ignore_Pragma_Par (Prag_Name : Name_Id) return Boolean;\n+   function Should_Ignore_Pragma_Sem (N : Node_Id) return Boolean;\n    --  True if we should ignore pragmas with the specified name. In particular,\n    --  this returns True if pragma Ignore_Pragma applies, and we are not in a\n-   --  predefined unit.\n+   --  predefined unit. The _Par version should be called only from the parser;\n+   --  the _Sem version should be called only during semantic analysis.\n \n    function Static_Boolean (N : Node_Id) return Uint;\n    --  This function analyzes the given expression node and then resolves it"}, {"sha": "ae884e08bbdeb1547b00e901e5648bcd46014b5c", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -982,7 +982,7 @@ package Sinfo is\n    --  Compile_Time_Known_Aggregate (Flag18-Sem)\n    --    Present in N_Aggregate nodes. Set for aggregates which can be fully\n    --    evaluated at compile time without raising constraint error. Such\n-   --    aggregates can be passed as is the back end without any expansion.\n+   --    aggregates can be passed as is to the back end without any expansion.\n    --    See Exp_Aggr for specific conditions under which this flag gets set.\n \n    --  Componentwise_Assignment (Flag14-Sem)"}, {"sha": "235a10d54fc33a383c24c012b1928e01f7933b89", "filename": "gcc/ada/urealp.adb", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Furealp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3416c681291e5a3f6e68d311c958fb05bc7f41/gcc%2Fada%2Furealp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.adb?ref=be3416c681291e5a3f6e68d311c958fb05bc7f41", "patch": "@@ -1468,14 +1468,17 @@ package body Urealp is\n          Write_Str (\"#1.0#E\");\n          UI_Write (-Val.Den);\n \n-      --  Other constants with a base other than 10 are written using one\n-      --  of the following forms, depending on the sign of the number\n-      --  and the sign of the exponent (= minus denominator value)\n+      --  Other constants with a base other than 10 are written using one of\n+      --  the following forms, depending on the sign of the number and the\n+      --  sign of the exponent (= minus denominator value). See that we are\n+      --  replacing the division by a multiplication (updating accordingly the\n+      --  sign of the exponent) to generate an expression whose computation\n+      --  does not cause a division by 0 when base**exponent is very small.\n \n-      --    numerator.0/base**exponent\n-      --    numerator.0/base**-exponent\n+      --    numerator.0*base**exponent\n+      --    numerator.0*base**-exponent\n \n-      --  And of course an exponent of 0 can be omitted\n+      --  And of course an exponent of 0 can be omitted.\n \n       elsif Val.Rbase /= 0 then\n          if Brackets then\n@@ -1486,14 +1489,16 @@ package body Urealp is\n          Write_Str (\".0\");\n \n          if Val.Den /= 0 then\n-            Write_Char ('/');\n+            Write_Char ('*');\n             Write_Int (Val.Rbase);\n             Write_Str (\"**\");\n \n             if Val.Den <= 0 then\n                UI_Write (-Val.Den, Decimal);\n             else\n+               Write_Str (\"(-\");\n                UI_Write (Val.Den, Decimal);\n+               Write_Char (')');\n             end if;\n          end if;\n "}]}