{"sha": "bb64c9871c74e6da869cae60170a0966bf6aed2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI2NGM5ODcxYzc0ZTZkYTg2OWNhZTYwMTcwYTA5NjZiZjZhZWQyYw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1993-03-22T22:02:43Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1993-03-22T22:02:43Z"}, "message": "* (MUST_PASS_IN_STACK): Make machine parameter.\n\nFrom-SVN: r3831", "tree": {"sha": "bb88b9e7b01aad9f7bee5de8ab69addca9fa5bbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb88b9e7b01aad9f7bee5de8ab69addca9fa5bbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb64c9871c74e6da869cae60170a0966bf6aed2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb64c9871c74e6da869cae60170a0966bf6aed2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb64c9871c74e6da869cae60170a0966bf6aed2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb64c9871c74e6da869cae60170a0966bf6aed2c/comments", "author": null, "committer": null, "parents": [{"sha": "0fcad51326803e426a21669597f3d792aac93d76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fcad51326803e426a21669597f3d792aac93d76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fcad51326803e426a21669597f3d792aac93d76"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "5b0088c0595003039de491f1e7e3757fae3b4c2f", "filename": "gcc/expr.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb64c9871c74e6da869cae60170a0966bf6aed2c/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb64c9871c74e6da869cae60170a0966bf6aed2c/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=bb64c9871c74e6da869cae60170a0966bf6aed2c", "patch": "@@ -211,6 +211,11 @@ enum direction {none, upward, downward};  /* Value has this type.  */\n    So a value padded in memory at the upper end can't go in a register.\n    For a little-endian machine, the reverse is true.  */\n \n+/* ??? Perhaps later rename this to FUNCTION_ARG_MUST_PASS_IN_STACK?\n+   (although it is a little long).  */\n+\n+#ifndef MUST_PASS_IN_STACK\n+\n #if BYTES_BIG_ENDIAN\n #define MUST_PASS_IN_STACK_BAD_PADDING\tupward\n #else\n@@ -224,6 +229,7 @@ enum direction {none, upward, downward};  /* Value has this type.  */\n        || ((MODE) == BLKmode \t\t\t\t\\\n \t   && (FUNCTION_ARG_PADDING (MODE, TYPE)\t\\\n \t       == MUST_PASS_IN_STACK_BAD_PADDING))))\n+#endif\n \n /* Nonzero if type TYPE should be returned in memory.\n    Most machines can use the following default definition.  */"}]}