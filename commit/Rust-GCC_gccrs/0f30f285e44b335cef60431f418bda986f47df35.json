{"sha": "0f30f285e44b335cef60431f418bda986f47df35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYzMGYyODVlNDRiMzM1Y2VmNjA0MzFmNDE4YmRhOTg2ZjQ3ZGYzNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-12-16T10:03:54Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-12-16T10:03:54Z"}, "message": "re PR c++/13242 ([ABI] Incorrect mangling of template reference parameters)\n\ncp:\n\tPR c++/13242\n\tC++ ABI change. Mangling template parameters of reference type\n\t* mangle.c (write_template_args): Remove unreachable code.\n\t(write_template_arg): Look through an argument of reference type.\ntestsuite:\n\tPR c++/13242\n\t* g++.dg/abi/mangle19-1.C: New test.\n\t* g++.dg/abi/mangle19-2.C: New test.\n\nFrom-SVN: r74682", "tree": {"sha": "d619ba37e2f11c11c81e8d947feaa51ba9c8ef6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d619ba37e2f11c11c81e8d947feaa51ba9c8ef6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f30f285e44b335cef60431f418bda986f47df35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f30f285e44b335cef60431f418bda986f47df35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f30f285e44b335cef60431f418bda986f47df35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f30f285e44b335cef60431f418bda986f47df35/comments", "author": null, "committer": null, "parents": [{"sha": "a689d4e0ea6a94acd0cb585462f7f57f7c05be7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a689d4e0ea6a94acd0cb585462f7f57f7c05be7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a689d4e0ea6a94acd0cb585462f7f57f7c05be7c"}], "stats": {"total": 101, "additions": 71, "deletions": 30}, "files": [{"sha": "a04a3d340604e9c1e8d9bd4d3b86b6f89c3e057c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f30f285e44b335cef60431f418bda986f47df35/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f30f285e44b335cef60431f418bda986f47df35/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0f30f285e44b335cef60431f418bda986f47df35", "patch": "@@ -1,9 +1,16 @@\n-2003-12-16  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\r\n-\r\n-\tPR c++/2294\r\n-\t* name-lookup.c (push_overloaded_decl): always construct an OVERLOAD\r\n-\tif the declaration comes from an using declaration.\r\n-\r\n+2003-12-16  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/13242\n+\tC++ ABI change. Mangling template parameters of reference type\n+\t* mangle.c (write_template_args): Remove unreachable code.\n+\t(write_template_arg): Look through an argument of reference type.\n+\n+2003-12-16  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/2294\n+\t* name-lookup.c (push_overloaded_decl): always construct an OVERLOAD\n+\tif the declaration comes from an using declaration.\n+\n 2003-12-15  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/10926"}, {"sha": "fe01120bc5652b529a1db665661db3e8a23f50db", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f30f285e44b335cef60431f418bda986f47df35/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f30f285e44b335cef60431f418bda986f47df35/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=0f30f285e44b335cef60431f418bda986f47df35", "patch": "@@ -1845,37 +1845,25 @@ write_class_enum_type (const tree type)\n static void\n write_template_args (tree args)\n {\n+  int i;\n+  int length = TREE_VEC_LENGTH (args);\n+  \n   MANGLE_TRACE_TREE (\"template-args\", args);\n \n   write_char ('I');\n \n-  if (TREE_CODE (args) == TREE_VEC)\n-    {\n-      int i;\n-      int length = TREE_VEC_LENGTH (args);\n-      my_friendly_assert (length > 0, 20000422);\n+  my_friendly_assert (length > 0, 20000422);\n \n-      if (TREE_CODE (TREE_VEC_ELT (args, 0)) == TREE_VEC)\n-\t{\n-\t  /* We have nested template args.  We want the innermost template\n-\t     argument list.  */\n-\t  args = TREE_VEC_ELT (args, length - 1);\n-\t  length = TREE_VEC_LENGTH (args);\n-\t}\n-      for (i = 0; i < length; ++i)\n-\twrite_template_arg (TREE_VEC_ELT (args, i));\n-    }\n-  else \n+  if (TREE_CODE (TREE_VEC_ELT (args, 0)) == TREE_VEC)\n     {\n-      my_friendly_assert (TREE_CODE (args) == TREE_LIST, 20021014);\n-\n-      while (args)\n-\t{\n-\t  write_template_arg (TREE_VALUE (args));\n-\t  args = TREE_CHAIN (args);\n-\t}\n+      /* We have nested template args.  We want the innermost template\n+\t argument list.  */\n+      args = TREE_VEC_ELT (args, length - 1);\n+      length = TREE_VEC_LENGTH (args);\n     }\n-\n+  for (i = 0; i < length; ++i)\n+    write_template_arg (TREE_VEC_ELT (args, i));\n+  \n   write_char ('E');\n }\n \n@@ -2165,6 +2153,20 @@ write_template_arg (tree node)\n \t  code = TREE_CODE (node);\n \t}\n     }\n+  \n+  if (TREE_CODE (node) == NOP_EXPR\n+      && TREE_CODE (TREE_TYPE (node)) == REFERENCE_TYPE)\n+    {\n+      /* Template parameters can be of reference type. To maintain\n+\t internal consistency, such arguments use a conversion from\n+\t address of object to reference type.  */\n+      my_friendly_assert (TREE_CODE (TREE_OPERAND (node, 0)) == ADDR_EXPR,\n+\t\t\t  20031215);\n+      if (abi_version_at_least (2))\n+\tnode = TREE_OPERAND (TREE_OPERAND (node, 0), 0);\n+      else\n+\tG.need_abi_warning = 1;\n+    }\n \n   if (TYPE_P (node))\n     write_type (node);"}, {"sha": "496737d23c7c8dc0651ccbcf79c3f022d760b827", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f30f285e44b335cef60431f418bda986f47df35/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f30f285e44b335cef60431f418bda986f47df35/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f30f285e44b335cef60431f418bda986f47df35", "patch": "@@ -1,3 +1,9 @@\n+2003-12-16  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/13242\n+\t* g++.dg/abi/mangle19-1.C: New test.\n+\t* g++.dg/abi/mangle19-2.C: New test.\n+\n 2003-12-16  Hartmut Penner  <hpenner@de.ibm.com>\n \n \t* testsuite/gcc.dg/altivec-10.c: Test vec_cmple and vec_all_numeric."}, {"sha": "7cc946e240031642ecf31e5470a32047281701f0", "filename": "gcc/testsuite/g++.dg/abi/mangle19-1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f30f285e44b335cef60431f418bda986f47df35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle19-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f30f285e44b335cef60431f418bda986f47df35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle19-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle19-1.C?ref=0f30f285e44b335cef60431f418bda986f47df35", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile }\n+// { dg-options \"-fabi-version=2\" }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 15 Dec 2003 <nathan@codesourcery.com>\n+\n+// PR 13242\n+// mangled template arguments that are external objects incorrectly\n+\n+extern int N;\n+template <int &> struct S {};\n+void n (S<N>) {}\n+// { dg-final { scan-assembler \"\\n_Z1n1SILZ1NEE:\" } }"}, {"sha": "fbf1a07eb5305b9846453e15af5c824beca1c8fc", "filename": "gcc/testsuite/g++.dg/abi/mangle19-2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f30f285e44b335cef60431f418bda986f47df35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle19-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f30f285e44b335cef60431f418bda986f47df35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle19-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle19-2.C?ref=0f30f285e44b335cef60431f418bda986f47df35", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile }\n+// { dg-options \"-fabi-version=1 -Wabi\" }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 15 Dec 2003 <nathan@codesourcery.com>\n+\n+// PR 13242\n+// mangled template arguments that are external objects incorrectly\n+\n+extern int N;\n+template <int &> struct S {};\n+void n (S<N>) {}  // { dg-warning \"mangled name\" }\n+// { dg-final { scan-assembler \"\\n_Z1n1SIXadL_Z1NEEE:\" } }"}]}