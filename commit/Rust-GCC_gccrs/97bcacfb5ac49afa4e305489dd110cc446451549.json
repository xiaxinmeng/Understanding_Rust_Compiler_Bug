{"sha": "97bcacfb5ac49afa4e305489dd110cc446451549", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdiY2FjZmI1YWM0OWFmYTRlMzA1NDg5ZGQxMTBjYzQ0NjQ1MTU0OQ==", "commit": {"author": {"name": "Indu Bhagat", "email": "indu.bhagat@oracle.com", "date": "2021-07-06T23:02:38Z"}, "committer": {"name": "Indu Bhagat", "email": "indu.bhagat@oracle.com", "date": "2021-07-06T23:02:38Z"}, "message": "CTF testsuite: Remove explicit check on ctv_typeidx\n\nThe value of ctv_typeidx is the CTF type ID of the data type of the associated\nvariable.  The order in which the CTF types are added can change across\nplatforms and also as the code evolves, hence changing the CTF type ID. As\nthere is no direct and portable method of testing that the data type of a CTF\nvariable is of a specific kind, remove the check on ctv_typeidx.\n\nThis also fixes a subset of failures as seen on Darwin.\n\n2021-07-06  Indu Bhagat  <indu.bhagat@oracle.com>\n\ngcc/testsuite/ChangeLog:\n\n\tPR debug/101283\n\t* gcc.dg/debug/ctf/ctf-attr-mode-1.c: Remove the check for ctv_typeidx.", "tree": {"sha": "7d280735a354cfda1d4e4d25e3b459c88d94bd29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d280735a354cfda1d4e4d25e3b459c88d94bd29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97bcacfb5ac49afa4e305489dd110cc446451549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97bcacfb5ac49afa4e305489dd110cc446451549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97bcacfb5ac49afa4e305489dd110cc446451549", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97bcacfb5ac49afa4e305489dd110cc446451549/comments", "author": {"login": "ibhagatgnu", "id": 51812649, "node_id": "MDQ6VXNlcjUxODEyNjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/51812649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibhagatgnu", "html_url": "https://github.com/ibhagatgnu", "followers_url": "https://api.github.com/users/ibhagatgnu/followers", "following_url": "https://api.github.com/users/ibhagatgnu/following{/other_user}", "gists_url": "https://api.github.com/users/ibhagatgnu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibhagatgnu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibhagatgnu/subscriptions", "organizations_url": "https://api.github.com/users/ibhagatgnu/orgs", "repos_url": "https://api.github.com/users/ibhagatgnu/repos", "events_url": "https://api.github.com/users/ibhagatgnu/events{/privacy}", "received_events_url": "https://api.github.com/users/ibhagatgnu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibhagatgnu", "id": 51812649, "node_id": "MDQ6VXNlcjUxODEyNjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/51812649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibhagatgnu", "html_url": "https://github.com/ibhagatgnu", "followers_url": "https://api.github.com/users/ibhagatgnu/followers", "following_url": "https://api.github.com/users/ibhagatgnu/following{/other_user}", "gists_url": "https://api.github.com/users/ibhagatgnu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibhagatgnu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibhagatgnu/subscriptions", "organizations_url": "https://api.github.com/users/ibhagatgnu/orgs", "repos_url": "https://api.github.com/users/ibhagatgnu/repos", "events_url": "https://api.github.com/users/ibhagatgnu/events{/privacy}", "received_events_url": "https://api.github.com/users/ibhagatgnu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8db5f70f27b6de8139339ef1866eaa153c2bf67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8db5f70f27b6de8139339ef1866eaa153c2bf67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8db5f70f27b6de8139339ef1866eaa153c2bf67"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "c4801a726d285ad932b69577e3ad78f76ebbc94d", "filename": "gcc/testsuite/gcc.dg/debug/ctf/ctf-attr-mode-1.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97bcacfb5ac49afa4e305489dd110cc446451549/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fctf%2Fctf-attr-mode-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97bcacfb5ac49afa4e305489dd110cc446451549/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fctf%2Fctf-attr-mode-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fctf%2Fctf-attr-mode-1.c?ref=97bcacfb5ac49afa4e305489dd110cc446451549", "patch": "@@ -1,7 +1,10 @@\n /* Test CTF generation works well with ((mode)) attribute.\n \n    In this testcase, CTF should report type of bqi to be an enum and\n-   not an int.  */\n+   not an int.  Also, CTF for typedef of enum should exist.  However, there\n+   are no direct and portable methods of checking that a CTF type / CTF\n+   variable refers to a specific CTF type, so this testcase merely asserts\n+   for existence of individual CTF records.  */\n \n /* { dg-do compile )  */\n /* { dg-options \"-O0 -gctf -dA\" } */\n@@ -16,7 +19,5 @@\n /* { dg-final { scan-assembler-times \"\\[\\t \\]0x22000003\\[\\t \\]+\\[^\\n\\]*ctt_info\" 1 } } */\n /* { dg-final { scan-assembler-times \"\\[\\t \\]0x2a000000\\[\\t \\]+\\[^\\n\\]*ctt_info\" 1 } } */\n \n-/* { dg-final { scan-assembler-times \"\\[\\t \\]0x3\\[\\t \\]+\\[^\\n\\]*ctv_typeidx\" 1} } */\n-\n typedef enum { B1 = 1, B2 = 2, B3 = 3 } B;\n B __attribute__ ((mode (QI))) bqi;"}]}