{"sha": "49fe13f6d8cfe7f3450608a4444b2f9a5b04de35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlmZTEzZjZkOGNmZTdmMzQ1MDYwOGE0NDQ0YjJmOWE1YjA0ZGUzNQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2000-12-17T22:40:32Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-12-17T22:40:32Z"}, "message": "cpplib.h (struct cpp_reader): Remove references to string_pool and temp_string_pool.\n\n        * cpplib.h (struct cpp_reader): Remove references to string_pool\n        and temp_string_pool.\n        * cppinit.c (cpp_create_reader, cpp_cleanup): Similarly; using\n        ident_pool in place.\n        * cpplex.c (parse_number, unescaped_terminator_p, parse_string,\n        save_comment, cpp_token_as_text): Similarly.\n        * cpplib.c (do_define, glue_header_name, parse_assertion): Similarly.\n        * cppmacro.c (make_number_token, builtin_macro, lock_pools,\n        unlock_pools, stringify_arg, paste_tokens): Similarly.\n\nFrom-SVN: r38336", "tree": {"sha": "b4e313ee5aef2ba124bf4a22afc2b003099d78c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4e313ee5aef2ba124bf4a22afc2b003099d78c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35/comments", "author": null, "committer": null, "parents": [{"sha": "ed972b14ec2ef437ca42b0136fe466aed04fed7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed972b14ec2ef437ca42b0136fe466aed04fed7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed972b14ec2ef437ca42b0136fe466aed04fed7a"}], "stats": {"total": 55, "additions": 22, "deletions": 33}, "files": [{"sha": "31beacdb54165f0a82b2d39e95933538c06d543c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49fe13f6d8cfe7f3450608a4444b2f9a5b04de35", "patch": "@@ -1,3 +1,15 @@\n+2000-12-17  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cpplib.h (struct cpp_reader): Remove references to string_pool\n+        and temp_string_pool.\n+        * cppinit.c (cpp_create_reader, cpp_cleanup): Similarly; using\n+        ident_pool in place.\n+        * cpplex.c (parse_number, unescaped_terminator_p, parse_string,\n+        save_comment, cpp_token_as_text): Similarly.\n+        * cpplib.c (do_define, glue_header_name, parse_assertion): Similarly.\n+        * cppmacro.c (make_number_token, builtin_macro, lock_pools,\n+        unlock_pools, stringify_arg, paste_tokens): Similarly.\n+\n Sun Dec 17 12:41:48 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* dwarf2out.c (loc_descriptor_from_tree, case NOP_EXPR): New case."}, {"sha": "ea4bc6bc5192fdab7e71cbdc0511c665be139bc2", "filename": "gcc/cppinit.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=49fe13f6d8cfe7f3450608a4444b2f9a5b04de35", "patch": "@@ -513,18 +513,12 @@ cpp_create_reader (lang)\n   /* Identifier pool initially 8K.  Unaligned, permanent pool.  */\n   _cpp_init_pool (&pfile->ident_pool, 8 * 1024, 1, 0);\n \n-  /* String and number pool initially 4K.  Unaligned, temporary pool.  */\n-  _cpp_init_pool (&pfile->temp_string_pool, 4 * 1024, 1, 1);\n-\n   /* Argument pool initially 8K.  Aligned, temporary pool.  */\n   _cpp_init_pool (&pfile->argument_pool, 8 * 1024, 0, 1);\n \n   /* Macro pool initially 8K.  Aligned, permanent pool.  */\n   _cpp_init_pool (&pfile->macro_pool, 8 * 1024, 0, 0);\n \n-  /* Start with temporary pool.  */\n-  pfile->string_pool = &pfile->temp_string_pool;\n-\n   _cpp_init_hashtable (pfile);\n   _cpp_init_stacks (pfile);\n   _cpp_init_includes (pfile);\n@@ -568,7 +562,6 @@ cpp_cleanup (pfile)\n   _cpp_free_lookaheads (pfile);\n \n   _cpp_free_pool (&pfile->ident_pool);\n-  _cpp_free_pool (&pfile->temp_string_pool);\n   _cpp_free_pool (&pfile->macro_pool);\n   _cpp_free_pool (&pfile->argument_pool);\n "}, {"sha": "1dc401e8f08204dedbcef8169f4ac22d2728367b", "filename": "gcc/cpplex.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=49fe13f6d8cfe7f3450608a4444b2f9a5b04de35", "patch": "@@ -539,7 +539,7 @@ parse_number (pfile, number, c, leading_period)\n      int leading_period;\n {\n   cpp_buffer *buffer = pfile->buffer;\n-  cpp_pool *pool = pfile->string_pool;\n+  cpp_pool *pool = &pfile->ident_pool;\n   unsigned char *dest, *limit;\n \n   dest = POOL_FRONT (pool);\n@@ -618,7 +618,7 @@ unescaped_terminator_p (pfile, dest)\n   if (pfile->state.angled_headers)\n     return 1;\n \n-  start = POOL_FRONT (pfile->string_pool);\n+  start = POOL_FRONT (&pfile->ident_pool);\n \n   /* An odd number of consecutive backslashes represents an escaped\n      terminator.  */\n@@ -640,7 +640,7 @@ parse_string (pfile, token, terminator)\n      cppchar_t terminator;\n {\n   cpp_buffer *buffer = pfile->buffer;\n-  cpp_pool *pool = pfile->string_pool;\n+  cpp_pool *pool = &pfile->ident_pool;\n   unsigned char *dest, *limit;\n   cppchar_t c;\n   unsigned int nulls = 0;\n@@ -738,7 +738,7 @@ save_comment (pfile, token, from)\n      line, which we don't want to save in the comment.  */\n   if (pfile->buffer->read_ahead != EOF)\n     len--;\n-  buffer = _cpp_pool_alloc (pfile->string_pool, len);\n+  buffer = _cpp_pool_alloc (&pfile->ident_pool, len);\n   \n   token->type = CPP_COMMENT;\n   token->val.str.len = len;\n@@ -1378,7 +1378,7 @@ cpp_token_as_text (pfile, token)\n      const cpp_token *token;\n {\n   unsigned int len = cpp_token_len (token);\n-  unsigned char *start = _cpp_pool_alloc (&pfile->temp_string_pool, len), *end;\n+  unsigned char *start = _cpp_pool_alloc (&pfile->ident_pool, len), *end;\n \n   end = cpp_spell_token (pfile, token, start);\n   end[0] = '\\0';"}, {"sha": "76d6cc3c58080fee84ae580e8e67764ebbc55068", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=49fe13f6d8cfe7f3450608a4444b2f9a5b04de35", "patch": "@@ -457,15 +457,9 @@ do_define (pfile)\n \n   if (node)\n     {\n-      /* Use the permanent pool for storage.  */\n-      pfile->string_pool = &pfile->ident_pool;\n-\n       if (_cpp_create_definition (pfile, node))\n \tif (pfile->cb.define)\n \t  (*pfile->cb.define) (pfile, node);\n-\n-      /* Revert to the temporary pool.  */\n-      pfile->string_pool = &pfile->temp_string_pool;\n     }\n }\n \n@@ -531,7 +525,7 @@ glue_header_name (pfile, header)\n     cpp_error (pfile, \"missing terminating > character\");\n   else\n     {\n-      token_mem = _cpp_pool_alloc (pfile->string_pool, total_len);\n+      token_mem = _cpp_pool_alloc (&pfile->ident_pool, total_len);\n       memcpy (token_mem, buffer, total_len);\n \n       header->type = CPP_HEADER_NAME;\n@@ -1487,9 +1481,6 @@ parse_assertion (pfile, answerp, type)\n   /* We don't expand predicates or answers.  */\n   pfile->state.prevent_expansion++;\n \n-  /* Use the permanent pool for storage (for the answers).  */\n-  pfile->string_pool = &pfile->ident_pool;\n-\n   *answerp = 0;\n   cpp_get_token (pfile, &predicate);\n   if (predicate.type == CPP_EOF)\n@@ -1507,7 +1498,6 @@ parse_assertion (pfile, answerp, type)\n       result = cpp_lookup (pfile, sym, len + 1);\n     }\n \n-  pfile->string_pool = &pfile->temp_string_pool;\n   pfile->state.prevent_expansion--;\n   return result;\n }"}, {"sha": "32ebb747db23ca0de66765914cf6eef54906782f", "filename": "gcc/cpplib.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=49fe13f6d8cfe7f3450608a4444b2f9a5b04de35", "patch": "@@ -512,10 +512,8 @@ struct cpp_reader\n   /* Memory pools.  */\n   cpp_pool ident_pool;\t\t/* For all identifiers, and permanent\n \t\t\t\t   numbers and strings.  */\n-  cpp_pool temp_string_pool;\t/* For temporary numbers and strings.   */\n   cpp_pool macro_pool;\t\t/* For macro definitions.  Permanent.  */\n   cpp_pool argument_pool;\t/* For macro arguments.  Temporary.   */\n-  cpp_pool* string_pool;\t/* Either temp_string_pool or ident_pool.   */\n \n   /* Context stack.  */\n   struct cpp_context base_context;"}, {"sha": "8af9fab52ff3e11623e7117a7a14ad81e209dddd", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49fe13f6d8cfe7f3450608a4444b2f9a5b04de35/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=49fe13f6d8cfe7f3450608a4444b2f9a5b04de35", "patch": "@@ -125,7 +125,7 @@ make_number_token (pfile, token, number)\n      cpp_token *token;\n      int number;\n {\n-  unsigned char *buf = _cpp_pool_alloc (pfile->string_pool, 20);\n+  unsigned char *buf = _cpp_pool_alloc (&pfile->ident_pool, 20);\n \n   sprintf ((char *) buf, \"%d\", number);\n   token->type = CPP_NUMBER;\n@@ -162,7 +162,7 @@ builtin_macro (pfile, token)\n \t    buffer = buffer->prev;\n \n \tname = buffer->nominal_fname;\n-\tmake_string_token (pfile->string_pool, token,\n+\tmake_string_token (&pfile->ident_pool, token,\n \t\t\t   (const unsigned char *) name, strlen (name));\n       }\n       break;\n@@ -237,15 +237,13 @@ static void\n lock_pools (pfile)\n      cpp_reader *pfile;\n {\n-  _cpp_lock_pool (&pfile->temp_string_pool);\n   _cpp_lock_pool (&pfile->argument_pool);\n }\n \n static void\n unlock_pools (pfile)\n      cpp_reader *pfile;\n {\n-  _cpp_unlock_pool (&pfile->temp_string_pool);\n   _cpp_unlock_pool (&pfile->argument_pool);\n }\n \n@@ -288,7 +286,7 @@ stringify_arg (pfile, arg)\n      cpp_reader *pfile;\n      macro_arg *arg;\n {\n-  cpp_pool *pool = pfile->string_pool;\n+  cpp_pool *pool = &pfile->ident_pool;\n   unsigned char *start = POOL_FRONT (pool);\n   unsigned int i, escape_it, total_len = 0, backslash_count = 0;\n \n@@ -397,10 +395,8 @@ paste_tokens (pfile, lhs, rhs)\n     {\n       unsigned int total_len = cpp_token_len (lhs) + cpp_token_len (rhs);\n       unsigned char *result, *end;\n-      cpp_pool *pool;\n \n-      pool = type == CPP_NAME ? &pfile->ident_pool: pfile->string_pool;\n-      result = _cpp_pool_alloc (pool, total_len + 1);\n+      result = _cpp_pool_alloc (&pfile->ident_pool, total_len + 1);\n \n       /* Paste the spellings and null terminate.  */\n       end = cpp_spell_token (pfile, rhs, cpp_spell_token (pfile, lhs, result));"}]}