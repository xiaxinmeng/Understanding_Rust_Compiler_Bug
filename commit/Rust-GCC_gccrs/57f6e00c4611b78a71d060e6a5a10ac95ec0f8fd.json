{"sha": "57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdmNmUwMGM0NjExYjc4YTcxZDA2MGU2YTVhMTBhYzk1ZWMwZjhmZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T13:27:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T13:27:07Z"}, "message": "[multiple changes]\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_warn.adb (Warn_On_Constant_Valid_Condition): Do not consider\n\tcomparisons between non- scalar expressions expressions because\n\ttheir values cannot be invalidated.\n\t* sem_warn.ads (Warn_On_Constant_Valid_Condition): Update the\n\tcomment on usage.\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* par_sco.adb: Minor reformatting.\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspects_At_Freeze_Point): If entity\n\tis a type from an unfrozen local package, install package to\n\tcomplete the analysis of delayed aspects of the type.\n\n2017-04-25  Tristan Gingold  <gingold@adacore.com>\n\n\t* bingen.adb (System_Version_Control_Used): New variable.\n\t(Resolve_Binder_Options): Set the above variable.\n\t(Gen_Output_File_Ada): Conditionally call Gen_Versions.\n\t(Gen_Elab_Order): Emit blank line before.\n\n2017-04-25  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_cat.adb (Validate_RT_RAT_Component): Added\n\tan extra check to ignore incomplete types.\n\nFrom-SVN: r247228", "tree": {"sha": "b8a8972018a6a41508bfb012563dbf31e8fcbf45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8a8972018a6a41508bfb012563dbf31e8fcbf45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd/comments", "author": null, "committer": null, "parents": [{"sha": "628078425bbdfc487c569bf949ad5a334c13a006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628078425bbdfc487c569bf949ad5a334c13a006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/628078425bbdfc487c569bf949ad5a334c13a006"}], "stats": {"total": 113, "additions": 100, "deletions": 13}, "files": [{"sha": "1ecb385bc88968f5c17b59538fd178b91a7333b9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd", "patch": "@@ -1,3 +1,33 @@\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Constant_Valid_Condition): Do not consider\n+\tcomparisons between non- scalar expressions expressions because\n+\ttheir values cannot be invalidated.\n+\t* sem_warn.ads (Warn_On_Constant_Valid_Condition): Update the\n+\tcomment on usage.\n+\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* par_sco.adb: Minor reformatting.\n+\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspects_At_Freeze_Point): If entity\n+\tis a type from an unfrozen local package, install package to\n+\tcomplete the analysis of delayed aspects of the type.\n+\n+2017-04-25  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* bingen.adb (System_Version_Control_Used): New variable.\n+\t(Resolve_Binder_Options): Set the above variable.\n+\t(Gen_Output_File_Ada): Conditionally call Gen_Versions.\n+\t(Gen_Elab_Order): Emit blank line before.\n+\n+2017-04-25  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_cat.adb (Validate_RT_RAT_Component): Added\n+\tan extra check to ignore incomplete types.\n+\n 2017-04-25  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_prag.adb (Analyze_Pragma, case Pragma_Check): Remove"}, {"sha": "1757712e9210b631593289c8be1c506b4700f7b4", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -94,6 +94,12 @@ package body Bindgen is\n    --  Resolve_Binder_Options, and it is used to call a procedure that starts\n    --  slave processors.\n \n+   System_Version_Control_Used : Boolean := False;\n+   --  Flag indicating whether unit System.Version_Control is in the closure.\n+   --  This unit is implicitly withed by the compiler when Version or\n+   --  Body_Version attributes are used. If the package is not in the closure,\n+   --  the version definitions can be removed.\n+\n    Lib_Final_Built : Boolean := False;\n    --  Flag indicating whether the finalize_library rountine has been built\n \n@@ -1303,6 +1309,7 @@ package body Bindgen is\n \n    procedure Gen_Elab_Order (Elab_Order : Unit_Id_Array) is\n    begin\n+      WBI (\"\");\n       WBI (\"   --  BEGIN ELABORATION ORDER\");\n \n       for J in Elab_Order'Range loop\n@@ -1313,7 +1320,6 @@ package body Bindgen is\n       end loop;\n \n       WBI (\"   --  END ELABORATION ORDER\");\n-      WBI (\"\");\n    end Gen_Elab_Order;\n \n    --------------------------\n@@ -2259,7 +2265,16 @@ package body Bindgen is\n            Get_Main_Name & \"\"\");\");\n       end if;\n \n-      Gen_Versions;\n+      --  Generate version numbers for units, only if needed. Be very safe on\n+      --  the condition.\n+\n+      if not Configurable_Run_Time_On_Target\n+        or else System_Version_Control_Used\n+        or else not Bind_Main_Program\n+      then\n+         Gen_Versions;\n+      end if;\n+\n       Gen_Elab_Order (Elab_Order);\n \n       --  Spec is complete\n@@ -2865,6 +2880,11 @@ package body Bindgen is\n          Check_Package (System_BB_CPU_Primitives_Multiprocessors_Used,\n                         \"system.bb.cpu_primitives.multiprocessors%s\");\n \n+         --  Ditto for System.Version_Control, which is used for Version and\n+         --  Body_Version attributes.\n+\n+         Check_Package (System_Version_Control_Used,\n+                        \"system.version_control%s\");\n       end loop;\n    end Resolve_Binder_Options;\n "}, {"sha": "b3abb6dfbc6257dc0e99beee90d483200c9e8494", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd", "patch": "@@ -1688,15 +1688,15 @@ package body Par_SCO is\n                --  Pre/post can have checks in client units too because of\n                --  inheritance, so should they receive the same treatment???\n \n-               when Aspect_Invariant\n+               when Aspect_Dynamic_Predicate\n+                  | Aspect_Invariant\n                   | Aspect_Post\n                   | Aspect_Postcondition\n                   | Aspect_Pre\n                   | Aspect_Precondition\n-                  | Aspect_Type_Invariant\n-                  | Aspect_Dynamic_Predicate\n                   | Aspect_Predicate\n                   | Aspect_Static_Predicate\n+                  | Aspect_Type_Invariant\n                =>\n                   C1 := 'a';\n "}, {"sha": "e922fb35b1cddef8d61a50d933ed245cfa5303b4", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1975,7 +1975,9 @@ package body Sem_Cat is\n             U_Typ := Typ;\n          end if;\n \n-         if Comes_From_Source (Typ) and then Is_Type (Typ) then\n+         if Comes_From_Source (Typ) and then Is_Type (Typ)\n+           and then Ekind (Typ) /= E_Incomplete_Type\n+         then\n \n             --  Check that the type can be meaningfully transmitted to another\n             --  partition (E.2.2(8))."}, {"sha": "6485df20b3b3df29a9c1fd1d8b27d4b71f385140", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd", "patch": "@@ -51,6 +51,7 @@ with Sem_Aux;  use Sem_Aux;\n with Sem_Case; use Sem_Case;\n with Sem_Ch3;  use Sem_Ch3;\n with Sem_Ch6;  use Sem_Ch6;\n+with Sem_Ch7;  use Sem_Ch7;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Dim;  use Sem_Dim;\n with Sem_Disp; use Sem_Disp;\n@@ -1180,10 +1181,42 @@ package body Sem_Ch13 is\n    --  Start of processing for Analyze_Aspects_At_Freeze_Point\n \n    begin\n-      --  Must be visible in current scope\n+      --  Must be visible in current scope, but if this is a type from\n+      --  a nested package it may be frozen from an object declaration\n+      --  in the enclosing scope, so install the package declarations\n+      --  to complete the analysis of the aspects, if any. If the package\n+      --  itself is frozen the type will have been frozen as well.\n \n       if not Scope_Within_Or_Same (Current_Scope, Scope (E)) then\n-         return;\n+         if Is_Type (E)\n+           and then Ekind (Scope (E)) = E_Package\n+           and then not Is_Frozen (Scope (E))\n+         then\n+            declare\n+               Pack : constant Entity_Id := Scope (E);\n+\n+            begin\n+               Push_Scope (Pack);\n+               Install_Visible_Declarations (Pack);\n+               Install_Private_Declarations (Pack);\n+               Analyze_Aspects_At_Freeze_Point (E);\n+\n+               if Is_Private_Type (E)\n+                 and then Present (Full_View (E))\n+               then\n+                  Analyze_Aspects_At_Freeze_Point (Full_View (E));\n+               end if;\n+\n+               End_Package_Scope (Pack);\n+            end;\n+\n+         else\n+\n+            --  Aspects from other entities in different contexts are\n+            --  analyzed elsewhere.\n+\n+            return;\n+         end if;\n       end if;\n \n       --  Look for aspect specification entries for this entity"}, {"sha": "29d0a9df498e287b3278f81760685dbb5446b769", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd", "patch": "@@ -3275,10 +3275,12 @@ package body Sem_Warn is\n \n    begin\n       --  Determine the potential outcome of the comparison assuming that the\n-      --  operands are valid.\n+      --  scalar operands are valid.\n \n       if Constant_Condition_Warnings\n         and then Comes_From_Source (Original_Node (Op))\n+        and then Is_Scalar_Type (Etype (Left))\n+        and then Is_Scalar_Type (Etype (Right))\n \n         --  Do not consider instances because the check was already performed\n         --  in the generic."}, {"sha": "e19c1c76c06f9a88e62823ed6dc748f9f68d9e66", "filename": "gcc/ada/sem_warn.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd/gcc%2Fada%2Fsem_warn.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd/gcc%2Fada%2Fsem_warn.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.ads?ref=57f6e00c4611b78a71d060e6a5a10ac95ec0f8fd", "patch": "@@ -170,8 +170,8 @@ package Sem_Warn is\n \n    procedure Warn_On_Constant_Valid_Condition (Op : Node_Id);\n    --  Determine the outcome of evaluating conditional or relational operator\n-   --  Op assuming that its operands are valid. Emit a warning when the result\n-   --  of the evaluation is True or False.\n+   --  Op assuming that its scalar operands are valid. Emit a warning when the\n+   --  result of the evaluation is True or False.\n \n    procedure Warn_On_Known_Condition (C : Node_Id);\n    --  C is a node for a boolean expression resulting from a relational"}]}