{"sha": "9c6a2bee91dffed0edd40812552a2e5473e5fbb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2YTJiZWU5MWRmZmVkMGVkZDQwODEyNTUyYTJlNTQ3M2U1ZmJiMw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-08-31T17:19:20Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-08-31T17:19:20Z"}, "message": "arm-protos.h (arm_function_arg_advance): Delete.\n\n\t* config/arm/arm-protos.h (arm_function_arg_advance): Delete.\n\t(arm_function_arg): Delete.\n\t(arm_needs_doubleword_align): Take a const_tree.\n\t* config/arm/arm.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t* config/arm/arm.c (aapcs_select_call_coproc): Take a const_tree.\n\t(aapcs_layout_arg, arm_needs_doubleword_align): Likewise.\n\t(arm_function_arg): Make static.  Take a const_tree and a bool.\n\t(arm_function_arg_advance): Likewise.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r163683", "tree": {"sha": "d43f2c954e75d362cdd71a99f6057fab442d029c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d43f2c954e75d362cdd71a99f6057fab442d029c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c6a2bee91dffed0edd40812552a2e5473e5fbb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6a2bee91dffed0edd40812552a2e5473e5fbb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6a2bee91dffed0edd40812552a2e5473e5fbb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6a2bee91dffed0edd40812552a2e5473e5fbb3/comments", "author": null, "committer": null, "parents": [{"sha": "a478ffff9550d91bf85532b2c6bf66d3051016c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a478ffff9550d91bf85532b2c6bf66d3051016c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a478ffff9550d91bf85532b2c6bf66d3051016c5"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "d7d6a5d17374e110a46e4327e16cd0d0ad25d8bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6a2bee91dffed0edd40812552a2e5473e5fbb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6a2bee91dffed0edd40812552a2e5473e5fbb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c6a2bee91dffed0edd40812552a2e5473e5fbb3", "patch": "@@ -1,3 +1,15 @@\n+2010-08-31  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/arm/arm-protos.h (arm_function_arg_advance): Delete.\n+\t(arm_function_arg): Delete.\n+\t(arm_needs_doubleword_align): Take a const_tree.\n+\t* config/arm/arm.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/arm/arm.c (aapcs_select_call_coproc): Take a const_tree.\n+\t(aapcs_layout_arg, arm_needs_doubleword_align): Likewise.\n+\t(arm_function_arg): Make static.  Take a const_tree and a bool.\n+\t(arm_function_arg_advance): Likewise.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-08-31  Andi Kleen      <ak@linux.intel.com>\n \n \t* common.opt (fwhopr=): Update for -fwhopr=jobserver"}, {"sha": "79c11e2b0a0a5b6c79e5237764ddef5da4add252", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6a2bee91dffed0edd40812552a2e5473e5fbb3/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6a2bee91dffed0edd40812552a2e5473e5fbb3/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=9c6a2bee91dffed0edd40812552a2e5473e5fbb3", "patch": "@@ -153,13 +153,10 @@ extern unsigned int arm_sync_loop_insns (rtx , rtx *);\n extern bool arm_output_addr_const_extra (FILE *, rtx);\n \n #if defined TREE_CODE\n-extern rtx arm_function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n-extern void arm_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\t      tree, bool);\n extern void arm_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);\n extern bool arm_pad_arg_upward (enum machine_mode, const_tree);\n extern bool arm_pad_reg_upward (enum machine_mode, tree, int);\n-extern bool arm_needs_doubleword_align (enum machine_mode, tree);\n+extern bool arm_needs_doubleword_align (enum machine_mode, const_tree);\n #endif\n extern int arm_apply_result_size (void);\n extern rtx aapcs_libcall_value (enum machine_mode);"}, {"sha": "88444dbfc76a36d585a0f735d0da0df0e730472f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6a2bee91dffed0edd40812552a2e5473e5fbb3/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6a2bee91dffed0edd40812552a2e5473e5fbb3/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9c6a2bee91dffed0edd40812552a2e5473e5fbb3", "patch": "@@ -164,6 +164,10 @@ static void emit_constant_insn (rtx cond, rtx pattern);\n static rtx emit_set_insn (rtx, rtx);\n static int arm_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t  tree, bool);\n+static rtx arm_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t     const_tree, bool);\n+static void arm_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t      const_tree, bool);\n static rtx aapcs_allocate_return_reg (enum machine_mode, const_tree,\n \t\t\t\t      const_tree);\n static int aapcs_select_return_coproc (const_tree, const_tree);\n@@ -377,6 +381,10 @@ static const struct attribute_spec arm_attribute_table[] =\n #define TARGET_PASS_BY_REFERENCE arm_pass_by_reference\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES arm_arg_partial_bytes\n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG arm_function_arg\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE arm_function_arg_advance\n \n #undef  TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS arm_setup_incoming_varargs\n@@ -4178,7 +4186,7 @@ static struct\n \n static int\n aapcs_select_call_coproc (CUMULATIVE_ARGS *pcum, enum machine_mode mode, \n-\t\t\t  tree type)\n+\t\t\t  const_tree type)\n {\n   int i;\n \n@@ -4290,7 +4298,7 @@ aapcs_libcall_value (enum machine_mode mode)\n    numbers referred to here are those in the AAPCS.  */\n static void\n aapcs_layout_arg (CUMULATIVE_ARGS *pcum, enum machine_mode mode,\n-\t\t  tree type, int named)\n+\t\t  const_tree type, bool named)\n {\n   int nregs, nregs2;\n   int ncrn;\n@@ -4455,7 +4463,7 @@ arm_init_cumulative_args (CUMULATIVE_ARGS *pcum, tree fntype,\n \n /* Return true if mode/type need doubleword alignment.  */\n bool\n-arm_needs_doubleword_align (enum machine_mode mode, tree type)\n+arm_needs_doubleword_align (enum machine_mode mode, const_tree type)\n {\n   return (GET_MODE_ALIGNMENT (mode) > PARM_BOUNDARY\n \t  || (type && TYPE_ALIGN (type) > PARM_BOUNDARY));\n@@ -4473,11 +4481,17 @@ arm_needs_doubleword_align (enum machine_mode mode, tree type)\n    CUM is a variable of type CUMULATIVE_ARGS which gives info about\n     the preceding args and about the function being called.\n    NAMED is nonzero if this argument is a named parameter\n-    (otherwise it is an extra parameter matching an ellipsis).  */\n+    (otherwise it is an extra parameter matching an ellipsis).\n \n-rtx\n+   On the ARM, normally the first 16 bytes are passed in registers r0-r3; all\n+   other arguments are passed on the stack.  If (NAMED == 0) (which happens\n+   only in assign_parms, since TARGET_SETUP_INCOMING_VARARGS is\n+   defined), say it is passed in the stack (function_prologue will\n+   indeed make it pass in the stack if necessary).  */\n+\n+static rtx\n arm_function_arg (CUMULATIVE_ARGS *pcum, enum machine_mode mode,\n-\t\t  tree type, int named)\n+\t\t  const_tree type, bool named)\n {\n   int nregs;\n \n@@ -4550,9 +4564,13 @@ arm_arg_partial_bytes (CUMULATIVE_ARGS *pcum, enum machine_mode mode,\n   return 0;\n }\n \n-void\n+/* Update the data in PCUM to advance over an argument\n+   of mode MODE and data type TYPE.\n+   (TYPE is null for libcalls where that information may not be available.)  */\n+\n+static void\n arm_function_arg_advance (CUMULATIVE_ARGS *pcum, enum machine_mode mode,\n-\t\t\t  tree type, bool named)\n+\t\t\t  const_tree type, bool named)\n {\n   if (pcum->pcs_variant <= ARM_PCS_AAPCS_LOCAL)\n     {"}, {"sha": "5b66510563e36c79b700b496f3576ff61aafbbf4", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6a2bee91dffed0edd40812552a2e5473e5fbb3/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6a2bee91dffed0edd40812552a2e5473e5fbb3/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=9c6a2bee91dffed0edd40812552a2e5473e5fbb3", "patch": "@@ -1737,27 +1737,6 @@ typedef struct\n   MACHMODE aapcs_vfp_rmode;\n } CUMULATIVE_ARGS;\n \n-/* Define where to put the arguments to a function.\n-   Value is zero to push the argument on the stack,\n-   or a hard register in which to store the argument.\n-\n-   MODE is the argument's machine mode.\n-   TYPE is the data type of the argument (as a tree).\n-    This is null for libcalls where that information may\n-    not be available.\n-   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n-    the preceding args and about the function being called.\n-   NAMED is nonzero if this argument is a named parameter\n-    (otherwise it is an extra parameter matching an ellipsis).\n-\n-   On the ARM, normally the first 16 bytes are passed in registers r0-r3; all\n-   other arguments are passed on the stack.  If (NAMED == 0) (which happens\n-   only in assign_parms, since TARGET_SETUP_INCOMING_VARARGS is\n-   defined), say it is passed in the stack (function_prologue will\n-   indeed make it pass in the stack if necessary).  */\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  arm_function_arg (&(CUM), (MODE), (TYPE), (NAMED))\n-\n #define FUNCTION_ARG_PADDING(MODE, TYPE) \\\n   (arm_pad_arg_upward (MODE, TYPE) ? upward : downward)\n \n@@ -1776,12 +1755,6 @@ typedef struct\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n   arm_init_cumulative_args (&(CUM), (FNTYPE), (LIBNAME), (FNDECL))\n \n-/* Update the data in CUM to advance over an argument\n-   of mode MODE and data type TYPE.\n-   (TYPE is null for libcalls where that information may not be available.)  */\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\\n-  arm_function_arg_advance (&(CUM), (MODE), (TYPE), (NAMED))\n-\n /* If defined, a C expression that gives the alignment boundary, in bits, of an\n    argument with the specified mode and type.  If it is not defined,\n    `PARM_BOUNDARY' is used for all arguments.  */"}]}