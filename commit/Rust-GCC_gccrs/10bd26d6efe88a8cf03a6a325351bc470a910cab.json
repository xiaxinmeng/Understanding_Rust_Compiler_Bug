{"sha": "10bd26d6efe88a8cf03a6a325351bc470a910cab", "node_id": "C_kwDOANBUbNoAKDEwYmQyNmQ2ZWZlODhhOGNmMDNhNmEzMjUzNTFiYzQ3MGE5MTBjYWI", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2023-02-03T16:28:52Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2023-02-03T20:30:28Z"}, "message": "range-ops: Handle undefined ranges in frange op[12]_range [PR108647]\n\nThis patch gracefully handles undefined operand ranges for the floating\npoint op[12]_range operators.  This is very low risk, as we would have\nICEd otherwise.\n\nWe don't have a testcase that ICEs for floating point ranges, but it's\nonly a matter of time.  Besides, this dovetails nicely with the integer\nversions Jakub is testing.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/108647\n\t* range-op-float.cc (foperator_lt::op1_range): Handle undefined ranges.\n\t(foperator_lt::op2_range): Same.\n\t(foperator_le::op1_range): Same.\n\t(foperator_le::op2_range): Same.\n\t(foperator_gt::op1_range): Same.\n\t(foperator_gt::op2_range): Same.\n\t(foperator_ge::op1_range): Same.\n\t(foperator_ge::op2_range): Same.\n\t(foperator_unordered_lt::op1_range): Same.\n\t(foperator_unordered_lt::op2_range): Same.\n\t(foperator_unordered_le::op1_range): Same.\n\t(foperator_unordered_le::op2_range): Same.\n\t(foperator_unordered_gt::op1_range): Same.\n\t(foperator_unordered_gt::op2_range): Same.\n\t(foperator_unordered_ge::op1_range): Same.\n\t(foperator_unordered_ge::op2_range): Same.", "tree": {"sha": "04af29d9c439c3ac55ade0cb0d5f95862509ca40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04af29d9c439c3ac55ade0cb0d5f95862509ca40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10bd26d6efe88a8cf03a6a325351bc470a910cab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10bd26d6efe88a8cf03a6a325351bc470a910cab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10bd26d6efe88a8cf03a6a325351bc470a910cab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10bd26d6efe88a8cf03a6a325351bc470a910cab/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "093e2e1b201c0f324e0d8bfe6487aa2d470a13e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/093e2e1b201c0f324e0d8bfe6487aa2d470a13e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/093e2e1b201c0f324e0d8bfe6487aa2d470a13e7"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "ff42b95de4f2153641013d90262a484527153360", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bd26d6efe88a8cf03a6a325351bc470a910cab/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bd26d6efe88a8cf03a6a325351bc470a910cab/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=10bd26d6efe88a8cf03a6a325351bc470a910cab", "patch": "@@ -866,6 +866,8 @@ foperator_lt::op1_range (frange &r,\n       // The TRUE side of x < NAN is unreachable.\n       if (op2.known_isnan ())\n \tr.set_undefined ();\n+      else if (op2.undefined_p ())\n+\treturn false;\n       else if (build_lt (r, type, op2))\n \t{\n \t  r.clear_nan ();\n@@ -901,6 +903,8 @@ foperator_lt::op2_range (frange &r,\n       // The TRUE side of NAN < x is unreachable.\n       if (op1.known_isnan ())\n \tr.set_undefined ();\n+      else if (op1.undefined_p ())\n+\treturn false;\n       else if (build_gt (r, type, op1))\n \t{\n \t  r.clear_nan ();\n@@ -982,6 +986,8 @@ foperator_le::op1_range (frange &r,\n       // The TRUE side of x <= NAN is unreachable.\n       if (op2.known_isnan ())\n \tr.set_undefined ();\n+      else if (op2.undefined_p ())\n+\treturn false;\n       else if (build_le (r, type, op2))\n \tr.clear_nan ();\n       break;\n@@ -1013,6 +1019,8 @@ foperator_le::op2_range (frange &r,\n       // The TRUE side of NAN <= x is unreachable.\n       if (op1.known_isnan ())\n \tr.set_undefined ();\n+      else if (op1.undefined_p ())\n+\treturn false;\n       else if (build_ge (r, type, op1))\n \tr.clear_nan ();\n       break;\n@@ -1021,6 +1029,8 @@ foperator_le::op2_range (frange &r,\n       // On the FALSE side of NAN <= x, we know nothing about x.\n       if (op1.known_isnan ())\n \tr.set_varying (type);\n+      else if (op1.undefined_p ())\n+\treturn false;\n       else\n \tbuild_lt (r, type, op1);\n       break;\n@@ -1090,6 +1100,8 @@ foperator_gt::op1_range (frange &r,\n       // The TRUE side of x > NAN is unreachable.\n       if (op2.known_isnan ())\n \tr.set_undefined ();\n+      else if (op2.undefined_p ())\n+\treturn false;\n       else if (build_gt (r, type, op2))\n \t{\n \t  r.clear_nan ();\n@@ -1102,6 +1114,8 @@ foperator_gt::op1_range (frange &r,\n       // On the FALSE side of x > NAN, we know nothing about x.\n       if (op2.known_isnan ())\n \tr.set_varying (type);\n+      else if (op2.undefined_p ())\n+\treturn false;\n       else\n \tbuild_le (r, type, op2);\n       break;\n@@ -1125,6 +1139,8 @@ foperator_gt::op2_range (frange &r,\n       // The TRUE side of NAN > x is unreachable.\n       if (op1.known_isnan ())\n \tr.set_undefined ();\n+      else if (op1.undefined_p ())\n+\treturn false;\n       else if (build_lt (r, type, op1))\n \t{\n \t  r.clear_nan ();\n@@ -1137,6 +1153,8 @@ foperator_gt::op2_range (frange &r,\n       // On The FALSE side of NAN > x, we know nothing about x.\n       if (op1.known_isnan ())\n \tr.set_varying (type);\n+      else if (op1.undefined_p ())\n+\treturn false;\n       else\n \tbuild_ge (r, type, op1);\n       break;\n@@ -1206,6 +1224,8 @@ foperator_ge::op1_range (frange &r,\n       // The TRUE side of x >= NAN is unreachable.\n       if (op2.known_isnan ())\n \tr.set_undefined ();\n+      else if (op2.undefined_p ())\n+\treturn false;\n       else if (build_ge (r, type, op2))\n \tr.clear_nan ();\n       break;\n@@ -1214,6 +1234,8 @@ foperator_ge::op1_range (frange &r,\n       // On the FALSE side of x >= NAN, we know nothing about x.\n       if (op2.known_isnan ())\n \tr.set_varying (type);\n+      else if (op2.undefined_p ())\n+\treturn false;\n       else\n \tbuild_lt (r, type, op2);\n       break;\n@@ -1236,6 +1258,8 @@ foperator_ge::op2_range (frange &r, tree type,\n       // The TRUE side of NAN >= x is unreachable.\n       if (op1.known_isnan ())\n \tr.set_undefined ();\n+      else if (op1.undefined_p ())\n+\treturn false;\n       else if (build_le (r, type, op1))\n \tr.clear_nan ();\n       break;\n@@ -1244,6 +1268,8 @@ foperator_ge::op2_range (frange &r, tree type,\n       // On the FALSE side of NAN >= x, we know nothing about x.\n       if (op1.known_isnan ())\n \tr.set_varying (type);\n+      else if (op1.undefined_p ())\n+\treturn false;\n       else\n \tbuild_gt (r, type, op1);\n       break;\n@@ -1592,6 +1618,8 @@ foperator_unordered_lt::op1_range (frange &r, tree type,\n     case BRS_TRUE:\n       if (op2.known_isnan ())\n \tr.set_varying (type);\n+      else if (op2.undefined_p ())\n+\treturn false;\n       else\n \tbuild_lt (r, type, op2);\n       break;\n@@ -1601,6 +1629,8 @@ foperator_unordered_lt::op1_range (frange &r, tree type,\n       // impossible for op2 to be a NAN.\n       if (op2.known_isnan ())\n \tr.set_undefined ();\n+      else if (op2.undefined_p ())\n+\treturn false;\n       else if (build_ge (r, type, op2))\n \tr.clear_nan ();\n       break;\n@@ -1622,6 +1652,8 @@ foperator_unordered_lt::op2_range (frange &r, tree type,\n     case BRS_TRUE:\n       if (op1.known_isnan ())\n \tr.set_varying (type);\n+      else if (op1.undefined_p ())\n+\treturn false;\n       else\n \tbuild_gt (r, type, op1);\n       break;\n@@ -1631,6 +1663,8 @@ foperator_unordered_lt::op2_range (frange &r, tree type,\n       // impossible for op1 to be a NAN.\n       if (op1.known_isnan ())\n \tr.set_undefined ();\n+      else if (op1.undefined_p ())\n+\treturn false;\n       else if (build_le (r, type, op1))\n \tr.clear_nan ();\n       break;\n@@ -1686,6 +1720,8 @@ foperator_unordered_le::op1_range (frange &r, tree type,\n     case BRS_TRUE:\n       if (op2.known_isnan ())\n \tr.set_varying (type);\n+      else if (op2.undefined_p ())\n+\treturn false;\n       else\n \tbuild_le (r, type, op2);\n       break;\n@@ -1717,6 +1753,8 @@ foperator_unordered_le::op2_range (frange &r,\n     case BRS_TRUE:\n       if (op1.known_isnan ())\n \tr.set_varying (type);\n+      else if (op1.undefined_p ())\n+\treturn false;\n       else\n \tbuild_ge (r, type, op1);\n       break;\n@@ -1726,6 +1764,8 @@ foperator_unordered_le::op2_range (frange &r,\n       // impossible for op1 to be a NAN.\n       if (op1.known_isnan ())\n \tr.set_undefined ();\n+      else if (op1.undefined_p ())\n+\treturn false;\n       else if (build_lt (r, type, op1))\n \tr.clear_nan ();\n       break;\n@@ -1783,6 +1823,8 @@ foperator_unordered_gt::op1_range (frange &r,\n     case BRS_TRUE:\n       if (op2.known_isnan ())\n \tr.set_varying (type);\n+      else if (op2.undefined_p ())\n+\treturn false;\n       else\n \tbuild_gt (r, type, op2);\n       break;\n@@ -1792,6 +1834,8 @@ foperator_unordered_gt::op1_range (frange &r,\n       // impossible for op2 to be a NAN.\n       if (op2.known_isnan ())\n \tr.set_undefined ();\n+      else if (op2.undefined_p ())\n+\treturn false;\n       else if (build_le (r, type, op2))\n \tr.clear_nan ();\n       break;\n@@ -1814,6 +1858,8 @@ foperator_unordered_gt::op2_range (frange &r,\n     case BRS_TRUE:\n       if (op1.known_isnan ())\n \tr.set_varying (type);\n+      else if (op1.undefined_p ())\n+\treturn false;\n       else\n \tbuild_lt (r, type, op1);\n       break;\n@@ -1823,6 +1869,8 @@ foperator_unordered_gt::op2_range (frange &r,\n       // impossible for op1 to be a NAN.\n       if (op1.known_isnan ())\n \tr.set_undefined ();\n+      else if (op1.undefined_p ())\n+\treturn false;\n       else if (build_ge (r, type, op1))\n \tr.clear_nan ();\n       break;\n@@ -1880,6 +1928,8 @@ foperator_unordered_ge::op1_range (frange &r,\n     case BRS_TRUE:\n       if (op2.known_isnan ())\n \tr.set_varying (type);\n+      else if (op2.undefined_p ())\n+\treturn false;\n       else\n \tbuild_ge (r, type, op2);\n       break;\n@@ -1889,6 +1939,8 @@ foperator_unordered_ge::op1_range (frange &r,\n       // impossible for op2 to be a NAN.\n       if (op2.known_isnan ())\n \tr.set_undefined ();\n+      else if (op2.undefined_p ())\n+\treturn false;\n       else if (build_lt (r, type, op2))\n \tr.clear_nan ();\n       break;\n@@ -1910,6 +1962,8 @@ foperator_unordered_ge::op2_range (frange &r, tree type,\n     case BRS_TRUE:\n       if (op1.known_isnan ())\n \tr.set_varying (type);\n+      else if (op1.undefined_p ())\n+\treturn false;\n       else\n \tbuild_le (r, type, op1);\n       break;\n@@ -1919,6 +1973,8 @@ foperator_unordered_ge::op2_range (frange &r, tree type,\n       // impossible for op1 to be a NAN.\n       if (op1.known_isnan ())\n \tr.set_undefined ();\n+      else if (op1.undefined_p ())\n+\treturn false;\n       else if (build_gt (r, type, op1))\n \tr.clear_nan ();\n       break;"}]}