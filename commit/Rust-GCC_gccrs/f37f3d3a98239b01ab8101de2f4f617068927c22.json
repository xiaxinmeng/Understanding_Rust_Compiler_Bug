{"sha": "f37f3d3a98239b01ab8101de2f4f617068927c22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM3ZjNkM2E5ODIzOWIwMWFiODEwMWRlMmY0ZjYxNzA2ODkyN2MyMg==", "commit": {"author": {"name": "Yizhe", "email": "yizhe@pku.edu.cn", "date": "2021-02-17T10:26:45Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-19T10:34:59Z"}, "message": "Renamed `BaseRules::equals` back to `BaseRules::is_equal`\n\nInitially I thought `equals` is a better name because it fits the java\nusage. However there will be another `can_eq` method that adjust types,\nand in that case `is_equal` is a more consistent name.", "tree": {"sha": "76f9d278dc3b594af4f57b020cc4791da223657e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76f9d278dc3b594af4f57b020cc4791da223657e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f37f3d3a98239b01ab8101de2f4f617068927c22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f37f3d3a98239b01ab8101de2f4f617068927c22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f37f3d3a98239b01ab8101de2f4f617068927c22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f37f3d3a98239b01ab8101de2f4f617068927c22/comments", "author": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "496f773bdaa0be769c3d0e05b3598efa86dcefe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/496f773bdaa0be769c3d0e05b3598efa86dcefe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/496f773bdaa0be769c3d0e05b3598efa86dcefe1"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "30d821fe5d43df7c9dfa9b0b4954178814ef4069", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f37f3d3a98239b01ab8101de2f4f617068927c22/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f37f3d3a98239b01ab8101de2f4f617068927c22/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=f37f3d3a98239b01ab8101de2f4f617068927c22", "patch": "@@ -131,7 +131,7 @@ StructFieldType::unify (BaseType *other)\n }\n \n bool\n-StructFieldType::equals (const BaseType &other) const\n+StructFieldType::is_equal (const BaseType &other) const\n {\n   if (get_kind () != other.get_kind ())\n     {\n@@ -180,7 +180,7 @@ ADTType::unify (BaseType *other)\n }\n \n bool\n-ADTType::equals (const BaseType &other) const\n+ADTType::is_equal (const BaseType &other) const\n {\n   if (get_kind () != other.get_kind ())\n     {\n@@ -195,7 +195,7 @@ ADTType::equals (const BaseType &other) const\n \t}\n       for (int i = 0; i < num_fields (); i++)\n \t{\n-\t  if (!get_field (i)->equals (*other2.get_field (i)))\n+\t  if (!get_field (i)->is_equal (*other2.get_field (i)))\n \t    {\n \t      return false;\n \t    }\n@@ -251,7 +251,7 @@ TupleType::unify (BaseType *other)\n }\n \n bool\n-TupleType::equals (const BaseType &other) const\n+TupleType::is_equal (const BaseType &other) const\n {\n   if (get_kind () != other.get_kind ())\n     {\n@@ -266,7 +266,7 @@ TupleType::equals (const BaseType &other) const\n \t}\n       for (int i = 0; i < num_fields (); i++)\n \t{\n-\t  if (!get_field (i)->equals (*other2.get_field (i)))\n+\t  if (!get_field (i)->is_equal (*other2.get_field (i)))\n \t    {\n \t      return false;\n \t    }\n@@ -312,7 +312,7 @@ FnType::unify (BaseType *other)\n }\n \n bool\n-FnType::equals (const BaseType &other) const\n+FnType::is_equal (const BaseType &other) const\n {\n   if (get_kind () != other.get_kind ())\n     {\n@@ -321,15 +321,15 @@ FnType::equals (const BaseType &other) const\n   else\n     {\n       auto other2 = static_cast<const FnType &> (other);\n-      if (!get_return_type ()->equals (*other2.get_return_type ()))\n+      if (!get_return_type ()->is_equal (*other2.get_return_type ()))\n \treturn false;\n       if (num_params () != other2.num_params ())\n \treturn false;\n       for (int i = 0; i < num_params (); i++)\n \t{\n \t  auto lhs = param_at (i).second;\n \t  auto rhs = other2.param_at (i).second;\n-\t  if (!lhs->equals (*rhs))\n+\t  if (!lhs->is_equal (*rhs))\n \t    return false;\n \t}\n       return true;\n@@ -369,7 +369,7 @@ ArrayType::unify (BaseType *other)\n }\n \n bool\n-ArrayType::equals (const BaseType &other) const\n+ArrayType::is_equal (const BaseType &other) const\n {\n   if (get_kind () != other.get_kind ())\n     {\n@@ -634,7 +634,7 @@ ReferenceType::unify (BaseType *other)\n }\n \n bool\n-ReferenceType::equals (const BaseType &other) const\n+ReferenceType::is_equal (const BaseType &other) const\n {\n   if (get_kind () != other.get_kind ())\n     {"}, {"sha": "12a3bd5c3e8c07ad0eff7f01b1e6c3f0abc4be85", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f37f3d3a98239b01ab8101de2f4f617068927c22/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f37f3d3a98239b01ab8101de2f4f617068927c22/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=f37f3d3a98239b01ab8101de2f4f617068927c22", "patch": "@@ -77,7 +77,7 @@ class BaseType\n      ty are considered equal if they're of the same kind, and\n        1. (For ADTs, arrays, tuples, refs) have the same underlying ty\n        2. (For functions) have the same signature */\n-  virtual bool equals (const BaseType &other) const\n+  virtual bool is_equal (const BaseType &other) const\n   {\n     return get_kind () == other.get_kind ();\n   }\n@@ -208,7 +208,7 @@ class StructFieldType : public BaseType\n \n   BaseType *unify (BaseType *other) override;\n \n-  virtual bool equals (const BaseType &other) const override;\n+  virtual bool is_equal (const BaseType &other) const override;\n \n   std::string get_name () const { return name; }\n \n@@ -242,7 +242,7 @@ class TupleType : public BaseType\n \n   BaseType *unify (BaseType *other) override;\n \n-  virtual bool equals (const BaseType &other) const override;\n+  virtual bool is_equal (const BaseType &other) const override;\n \n   size_t num_fields () const { return fields.size (); }\n \n@@ -288,7 +288,7 @@ class ADTType : public BaseType\n \n   BaseType *unify (BaseType *other) override;\n \n-  virtual bool equals (const BaseType &other) const override;\n+  virtual bool is_equal (const BaseType &other) const override;\n \n   size_t num_fields () const { return fields.size (); }\n \n@@ -356,7 +356,7 @@ class FnType : public BaseType\n \n   BaseType *unify (BaseType *other) override;\n \n-  virtual bool equals (const BaseType &other) const override;\n+  virtual bool is_equal (const BaseType &other) const override;\n \n   size_t num_params () const { return params.size (); }\n \n@@ -410,7 +410,7 @@ class ArrayType : public BaseType\n \n   BaseType *unify (BaseType *other) override;\n \n-  virtual bool equals (const BaseType &other) const override;\n+  virtual bool is_equal (const BaseType &other) const override;\n \n   size_t get_capacity () const { return capacity; }\n \n@@ -632,7 +632,7 @@ class ReferenceType : public BaseType\n \n   BaseType *unify (BaseType *other) override;\n \n-  virtual bool equals (const BaseType &other) const override;\n+  virtual bool is_equal (const BaseType &other) const override;\n \n   BaseType *clone () final override;\n "}]}