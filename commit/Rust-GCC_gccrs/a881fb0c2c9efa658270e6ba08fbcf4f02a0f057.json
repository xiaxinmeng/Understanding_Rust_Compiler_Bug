{"sha": "a881fb0c2c9efa658270e6ba08fbcf4f02a0f057", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg4MWZiMGMyYzllZmE2NTgyNzBlNmJhMDhmYmNmNGYwMmEwZjA1Nw==", "commit": {"author": {"name": "Mike Stump", "email": "mikestump@comcast.net", "date": "2015-11-06T20:16:06Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2015-11-06T20:16:06Z"}, "message": "re PR debug/66728 (CONST_WIDE_INT causes corrupted DWARF debug info)\n\n\tPR debug/66728\n\t* dwarf2out.c (get_full_len): Return a value based upon the actual\n\tprecision needed for the value.\n\t(add_const_value_attribute): Use a maximal wide-int for\n\tCONST_WIDE_INTs, not VOIDmode.\n\t(output_die): Don't ever output NULL with printf.\n\n\t* rtl.h (get_precision of rtx_mode_t): Ensure we never process\n\tBLKmode nor VOIDmode values.\n\nFrom-SVN: r229885", "tree": {"sha": "f08a13e6d532e30dd7bd0b198bdf46530eddf820", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f08a13e6d532e30dd7bd0b198bdf46530eddf820"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a881fb0c2c9efa658270e6ba08fbcf4f02a0f057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a881fb0c2c9efa658270e6ba08fbcf4f02a0f057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a881fb0c2c9efa658270e6ba08fbcf4f02a0f057", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a881fb0c2c9efa658270e6ba08fbcf4f02a0f057/comments", "author": null, "committer": null, "parents": [{"sha": "8a64515099e64564542cbd09be7c9a21c2f580f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a64515099e64564542cbd09be7c9a21c2f580f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a64515099e64564542cbd09be7c9a21c2f580f3"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "6756e356cf95b961dc74211b96491d4980ceb43b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a881fb0c2c9efa658270e6ba08fbcf4f02a0f057/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a881fb0c2c9efa658270e6ba08fbcf4f02a0f057/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a881fb0c2c9efa658270e6ba08fbcf4f02a0f057", "patch": "@@ -1,3 +1,15 @@\n+2015-11-06  Mike Stump  <mikestump@comcast.net>\n+\n+\tPR debug/66728\n+\t* dwarf2out.c (get_full_len): Return a value based upon the actual\n+\tprecision needed for the value.\n+\t(add_const_value_attribute): Use a maximal wide-int for\n+\tCONST_WIDE_INTs, not VOIDmode.\n+\t(output_die): Don't ever output NULL with printf.\n+\n+\t* rtl.h (get_precision of rtx_mode_t): Ensure we never process\n+\tBLKmode nor VOIDmode values.\n+\n 2015-11-06  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic-color.c (color_dict): Eliminate \"caret\"; add \"range1\""}, {"sha": "48c22082b440f8aaa824b2670049141cdb169e9c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a881fb0c2c9efa658270e6ba08fbcf4f02a0f057/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a881fb0c2c9efa658270e6ba08fbcf4f02a0f057/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a881fb0c2c9efa658270e6ba08fbcf4f02a0f057", "patch": "@@ -368,12 +368,14 @@ dump_struct_debug (tree type, enum debug_info_usage usage,\n #endif\n \n /* Get the number of HOST_WIDE_INTs needed to represent the precision\n-   of the number.  */\n+   of the number.  Some constants have a large uniform precision, so\n+   we get the precision needed for the actual value of the number.  */\n \n static unsigned int\n get_full_len (const wide_int &op)\n {\n-  return ((op.get_precision () + HOST_BITS_PER_WIDE_INT - 1)\n+  int prec = wi::min_precision (op, UNSIGNED);\n+  return ((prec + HOST_BITS_PER_WIDE_INT - 1)\n \t  / HOST_BITS_PER_WIDE_INT);\n }\n \n@@ -9010,14 +9012,14 @@ output_die (dw_die_ref die)\n \t\t{\n \t\t  dw2_asm_output_data (l, a->dw_attr_val.v.val_wide->elt (i),\n \t\t\t\t       \"%s\", name);\n-\t\t  name = NULL;\n+\t\t  name = \"\";\n \t\t}\n \t    else\n \t      for (i = 0; i < len; ++i)\n \t\t{\n \t\t  dw2_asm_output_data (l, a->dw_attr_val.v.val_wide->elt (i),\n \t\t\t\t       \"%s\", name);\n-\t\t  name = NULL;\n+\t\t  name = \"\";\n \t\t}\n \t  }\n \t  break;\n@@ -15593,8 +15595,13 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n       return true;\n \n     case CONST_WIDE_INT:\n-      add_AT_wide (die, DW_AT_const_value,\n-\t\t   std::make_pair (rtl, GET_MODE (rtl)));\n+      {\n+\twide_int w1 = std::make_pair (rtl, MAX_MODE_INT);\n+\tunsigned int prec = MIN (wi::min_precision (w1, UNSIGNED),\n+\t\t\t\t (unsigned int)CONST_WIDE_INT_NUNITS (rtl) * HOST_BITS_PER_WIDE_INT);\n+\twide_int w = wi::zext (w1, prec);\n+\tadd_AT_wide (die, DW_AT_const_value, w);\n+      }\n       return true;\n \n     case CONST_DOUBLE:"}, {"sha": "194ed9ba9591bbae16ed06ed407420299349532f", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a881fb0c2c9efa658270e6ba08fbcf4f02a0f057/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a881fb0c2c9efa658270e6ba08fbcf4f02a0f057/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=a881fb0c2c9efa658270e6ba08fbcf4f02a0f057", "patch": "@@ -2086,6 +2086,7 @@ namespace wi\n inline unsigned int\n wi::int_traits <rtx_mode_t>::get_precision (const rtx_mode_t &x)\n {\n+  gcc_checking_assert (x.second != BLKmode && x.second != VOIDmode);\n   return GET_MODE_PRECISION (x.second);\n }\n "}]}