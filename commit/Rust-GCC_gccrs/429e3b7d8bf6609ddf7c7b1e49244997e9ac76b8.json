{"sha": "429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8", "node_id": "C_kwDOANBUbNoAKDQyOWUzYjdkOGJmNjYwOWRkZjdjN2IxZTQ5MjQ0OTk3ZTlhYzc2Yjg", "commit": {"author": {"name": "Oracle Public Cloud User", "email": "opc@qinzhao-aarch64-ol8.allregionaliads.osdevelopmeniad.oraclevcn.com", "date": "2021-11-01T15:14:26Z"}, "committer": {"name": "Oracle Public Cloud User", "email": "opc@qinzhao-aarch64-ol8.allregionaliads.osdevelopmeniad.oraclevcn.com", "date": "2021-11-01T15:14:26Z"}, "message": "PR 102281 (-ftrivial-auto-var-init=zero causes ice)\n\nDo not add call to __builtin_clear_padding when a variable is a gimple\nregister or it might not have padding.\n\ngcc/ChangeLog:\n\n2021-11-01  qing zhao  <qing.zhao@oracle.com>\n\n\t* gimplify.c (gimplify_decl_expr): Do not add call to\n\t__builtin_clear_padding when a variable is a gimple register\n\tor it might not have padding.\n\t(gimplify_init_constructor): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2021-11-01  qing zhao  <qing.zhao@oracle.com>\n\n\t* c-c++-common/pr102281.c: New test.\n\t* gcc.target/i386/auto-init-2.c: Adjust testing case.\n\t* gcc.target/i386/auto-init-4.c: Likewise.\n\t* gcc.target/i386/auto-init-6.c: Likewise.\n\t* gcc.target/aarch64/auto-init-6.c: Likewise.", "tree": {"sha": "3e51e8dee4d86a39bc67e44cf6432541a2ff0cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e51e8dee4d86a39bc67e44cf6432541a2ff0cd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8/comments", "author": null, "committer": null, "parents": [{"sha": "1d5c43db79b7ea14f0dc071beb40cf80de90eb86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5c43db79b7ea14f0dc071beb40cf80de90eb86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d5c43db79b7ea14f0dc071beb40cf80de90eb86"}], "stats": {"total": 65, "additions": 47, "deletions": 18}, "files": [{"sha": "c2ab96e7e1822db0353bb5bf852a2af435928181", "filename": "gcc/gimplify.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8", "patch": "@@ -1784,8 +1784,8 @@ gimple_add_init_for_auto_var (tree decl,\n    that padding is initialized to zero. So, we always initialize paddings\n    to zeroes regardless INIT_TYPE.\n    To do the padding initialization, we insert a call to\n-   __BUILTIN_CLEAR_PADDING (&decl, 0, for_auto_init = true).\n-   Note, we add an additional dummy argument for __BUILTIN_CLEAR_PADDING,\n+   __builtin_clear_padding (&decl, 0, for_auto_init = true).\n+   Note, we add an additional dummy argument for __builtin_clear_padding,\n    'for_auto_init' to distinguish whether this call is for automatic\n    variable initialization or not.\n    */\n@@ -1954,8 +1954,14 @@ gimplify_decl_expr (tree *stmt_p, gimple_seq *seq_p)\n \t     pattern initialization.\n \t     In order to make the paddings as zeroes for pattern init, We\n \t     should add a call to __builtin_clear_padding to clear the\n-\t     paddings to zero in compatiple with CLANG.  */\n-\t  if (flag_auto_var_init == AUTO_INIT_PATTERN)\n+\t     paddings to zero in compatiple with CLANG.\n+\t     We cannot insert this call if the variable is a gimple register\n+\t     since __builtin_clear_padding will take the address of the\n+\t     variable.  As a result, if a long double/_Complex long double\n+\t     variable will spilled into stack later, its padding is 0XFE.  */\n+\t  if (flag_auto_var_init == AUTO_INIT_PATTERN\n+\t      && !is_gimple_reg (decl)\n+\t      && clear_padding_type_may_have_padding_p (TREE_TYPE (decl)))\n \t    gimple_add_padding_init_for_auto_var (decl, is_vla, seq_p);\n \t}\n     }\n@@ -5384,12 +5390,19 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \n   /* If the user requests to initialize automatic variables, we\n      should initialize paddings inside the variable.  Add a call to\n-     __BUILTIN_CLEAR_PADDING (&object, 0, for_auto_init = true) to\n+     __builtin_clear_pading (&object, 0, for_auto_init = true) to\n      initialize paddings of object always to zero regardless of\n      INIT_TYPE.  Note, we will not insert this call if the aggregate\n      variable has be completely cleared already or it's initialized\n-     with an empty constructor.  */\n+     with an empty constructor.  We cannot insert this call if the\n+     variable is a gimple register since __builtin_clear_padding will take\n+     the address of the variable.  As a result, if a long double/_Complex long\n+     double variable will be spilled into stack later, its padding cannot\n+     be cleared with __builtin_clear_padding.  We should clear its padding\n+     when it is spilled into memory.  */\n   if (is_init_expr\n+      && !is_gimple_reg (object)\n+      && clear_padding_type_may_have_padding_p (type)\n       && ((AGGREGATE_TYPE_P (type) && !cleared && !is_empty_ctor)\n \t  || !AGGREGATE_TYPE_P (type))\n       && is_var_need_auto_init (object))"}, {"sha": "a961451b5a7c5e661ee13da648089fb2a635b820", "filename": "gcc/testsuite/c-c++-common/pr102281.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr102281.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr102281.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr102281.c?ref=429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8", "patch": "@@ -0,0 +1,17 @@\n+/* PR102281  */\n+/* { dg-do compile } */\n+/* { dg-options \"-ftrivial-auto-var-init=zero -Wno-psabi\" } */\n+long long var1;\n+float var2;\n+typedef long long V __attribute__((__vector_size__(2 * sizeof(long long))));\n+typedef float W __attribute__((__vector_size__(4 * sizeof(float)))); \n+\n+V foo (void)\n+{\n+  return (V) {var1}; \n+}\n+\n+W bar (void)\n+{\n+  return (W) {var2};\n+}"}, {"sha": "0456c66f49605e2d41ca49210d38ff7c5ffa2e06", "filename": "gcc/testsuite/gcc.target/aarch64/auto-init-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fauto-init-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fauto-init-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fauto-init-6.c?ref=429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8", "patch": "@@ -1,6 +1,6 @@\n /* Verify pattern initialization for complex type automatic variables.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=pattern\" } */\n \n \n _Complex long double result;\n@@ -15,4 +15,4 @@ _Complex long double foo()\n   return result;\n }\n \n-/* { dg-final { scan-rtl-dump-times \"0xfffffffffffffffe\\\\\\]\\\\\\) repeated x16\" 3 \"expand\" } } */\n+/* { dg-final { scan-assembler-times \"word\\t-16843010\" 14  } } */"}, {"sha": "0c59c62dacf0fb9df926e636bfc85c01f73117d6", "filename": "gcc/testsuite/gcc.target/i386/auto-init-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-2.c?ref=429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8", "patch": "@@ -29,7 +29,7 @@ void foo()\n   return;\n }\n \n-/* { dg-final { scan-rtl-dump-times \"0xfffffffffffffffe\" 2 \"expand\" } } */\n+/* { dg-final { scan-rtl-dump-times \"0xfffffffffffffffe\" 1 \"expand\" } } */\n /* { dg-final { scan-rtl-dump-times \"0xfffffffffffffefe\" 1 \"expand\" } } */\n /* { dg-final { scan-rtl-dump-times \"0xfffffffffefefefe\" 2 \"expand\" { target lp64 } } } */\n /* { dg-final { scan-rtl-dump-times \"0xfefefefefefefefe\" 3 \"expand\" { target lp64 } } } */"}, {"sha": "1803dd458424bf084917ca4bbf2aa9d27b6b926c", "filename": "gcc/testsuite/gcc.target/i386/auto-init-4.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-4.c?ref=429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8", "patch": "@@ -1,6 +1,6 @@\n /* Verify pattern initialization for floating point type automatic variables.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand -march=x86-64 -mtune=generic -msse\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=pattern -march=x86-64 -mtune=generic -msse\" } */\n \n long double result;\n \n@@ -14,8 +14,6 @@ long double foo()\n   return result;\n }\n \n-/* { dg-final { scan-rtl-dump-times \"0xfffffffffefefefe\" 1 \"expand\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-rtl-dump-times \"\\\\\\[0xfefefefefefefefe\\\\\\]\" 1 \"expand\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-rtl-dump-times \"0xfffffffffffffffe\\\\\\]\\\\\\) repeated x16\" 1 \"expand\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-rtl-dump-times \"0xfffffffffefefefe\" 2 \"expand\" { target ia32 } } } */\n-/* { dg-final { scan-rtl-dump-times \"\\\\\\[0xfefefefefefefefe\\\\\\]\" 2 \"expand\" { target ia32 } } } */\n+\n+/* { dg-final { scan-assembler-times \"long\\t-16843010\" 5  { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"long\\t-16843010\" 3  { target { ia32 } } } } */"}, {"sha": "339f8bc29660e1282fe82237bc7c2f04c6c2816a", "filename": "gcc/testsuite/gcc.target/i386/auto-init-6.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-6.c?ref=429e3b7d8bf6609ddf7c7b1e49244997e9ac76b8", "patch": "@@ -1,6 +1,6 @@\n /* Verify pattern initialization for complex type automatic variables.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand -march=x86-64 -mtune=generic -msse\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=pattern -march=x86-64 -mtune=generic -msse\" } */\n \n \n _Complex long double result;\n@@ -15,5 +15,6 @@ _Complex long double foo()\n   return result;\n }\n \n-/* { dg-final { scan-rtl-dump-times \"\\\\\\[0xfefefefefefefefe\\\\\\]\" 1 \"expand\" } } */\n-/* { dg-final { scan-rtl-dump-times \"0xfffffffffffffffe\\\\\\]\\\\\\) repeated x16\" 2 \"expand\" } } */\n+/* { dg-final { scan-assembler-times \"long\\t-16843010\" 10  { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"long\\t-16843010\" 6  { target { ia32 } } } } */\n+"}]}