{"sha": "68578d6efa09a5e5d3e7eca4de48f03b21f701c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg1NzhkNmVmYTA5YTVlNWQzZTdlY2E0ZGU0OGYwM2IyMWY3MDFjMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-28T12:26:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-28T12:26:50Z"}, "message": "re PR tree-optimization/92645 (Hand written vector code is 450 times slower when compiled with GCC compared to Clang)\n\n2019-11-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92645\n\t* tree-inline.c (remap_gimple_stmt): When the return value\n\tis not wanted, elide GIMPLE_RETURN.\n\n\t* gcc.dg/tree-ssa/inline-12.c: New testcase.\n\nFrom-SVN: r278807", "tree": {"sha": "4a1bdee96188de03b1806cdaee39d144f5802f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a1bdee96188de03b1806cdaee39d144f5802f3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68578d6efa09a5e5d3e7eca4de48f03b21f701c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68578d6efa09a5e5d3e7eca4de48f03b21f701c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68578d6efa09a5e5d3e7eca4de48f03b21f701c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68578d6efa09a5e5d3e7eca4de48f03b21f701c0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "78307657cf9675bc4aa2e77561c823834714b4c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78307657cf9675bc4aa2e77561c823834714b4c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78307657cf9675bc4aa2e77561c823834714b4c8"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "fe76b3e2b4a9c7601f2e80cc04ac8b6ffa01abe0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68578d6efa09a5e5d3e7eca4de48f03b21f701c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68578d6efa09a5e5d3e7eca4de48f03b21f701c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68578d6efa09a5e5d3e7eca4de48f03b21f701c0", "patch": "@@ -1,3 +1,9 @@\n+2019-11-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92645\n+\t* tree-inline.c (remap_gimple_stmt): When the return value\n+\tis not wanted, elide GIMPLE_RETURN.\n+\n 2019-11-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92645"}, {"sha": "a7533838f989f30da21f581be0cec774c4eba2ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68578d6efa09a5e5d3e7eca4de48f03b21f701c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68578d6efa09a5e5d3e7eca4de48f03b21f701c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68578d6efa09a5e5d3e7eca4de48f03b21f701c0", "patch": "@@ -1,3 +1,8 @@\n+2019-11-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92645\n+\t* gcc.dg/tree-ssa/inline-12.c: New testcase.\n+\n 2019-11-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92645"}, {"sha": "250d77eb04d6e81d19fe6b1a258bf7b264b68abd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/inline-12.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68578d6efa09a5e5d3e7eca4de48f03b21f701c0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68578d6efa09a5e5d3e7eca4de48f03b21f701c0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-12.c?ref=68578d6efa09a5e5d3e7eca4de48f03b21f701c0", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-einline\" } */\n+\n+void *foo (void *, int);\n+static inline void *mcp (void *src, int i)\n+{\n+  return foo (src, i);\n+}\n+void bar()\n+{\n+  int i;\n+  mcp (&i, 0);\n+}\n+\n+/* There should be exactly two assignments, one for both\n+   the original foo call and the inlined copy (plus a clobber\n+   that doesn't match here).  In particular bar should look like\n+     <bb 2> :\n+     _4 = foo (&i, 0);\n+     i ={v} {CLOBBER};\n+     return;  */\n+/* { dg-final { scan-tree-dump-times \" = \" 2 \"einline\" } } */"}, {"sha": "720f50eefecda2b7b1b03e87ee9988209015d83d", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68578d6efa09a5e5d3e7eca4de48f03b21f701c0/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68578d6efa09a5e5d3e7eca4de48f03b21f701c0/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=68578d6efa09a5e5d3e7eca4de48f03b21f701c0", "patch": "@@ -1541,9 +1541,12 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n \t assignment to the equivalent of the original RESULT_DECL.\n \t If RETVAL is just the result decl, the result decl has\n \t already been set (e.g. a recent \"foo (&result_decl, ...)\");\n-\t just toss the entire GIMPLE_RETURN.  */\n+\t just toss the entire GIMPLE_RETURN.  Likewise for when the\n+\t call doesn't want the return value.  */\n       if (retval\n \t  && (TREE_CODE (retval) != RESULT_DECL\n+\t      && (!id->call_stmt\n+\t\t  || gimple_call_lhs (id->call_stmt) != NULL_TREE)\n \t      && (TREE_CODE (retval) != SSA_NAME\n \t\t  || ! SSA_NAME_VAR (retval)\n \t\t  || TREE_CODE (SSA_NAME_VAR (retval)) != RESULT_DECL)))"}]}