{"sha": "85949949f2ffe0ab4f07e3ec859a876183418c28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU5NDk5NDlmMmZmZTBhYjRmMDdlM2VjODU5YTg3NjE4MzQxOGMyOA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-06-04T16:32:25Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-06-04T16:32:25Z"}, "message": "rs6000: wd -> wa\n\n\"wd\" is just \"wa\".\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"wd\"):\n\tDelete.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_wd.\n\t* config/rs6000/rs6000.md: Adjust.\n\t* config/rs6000/vsx.md: Adjust.\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271919", "tree": {"sha": "a5255573e56a57e8e4bc38adb3cfbe401b846785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5255573e56a57e8e4bc38adb3cfbe401b846785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85949949f2ffe0ab4f07e3ec859a876183418c28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85949949f2ffe0ab4f07e3ec859a876183418c28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85949949f2ffe0ab4f07e3ec859a876183418c28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85949949f2ffe0ab4f07e3ec859a876183418c28/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1598bfb0783d6ed34782981929d0c6b206698a1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1598bfb0783d6ed34782981929d0c6b206698a1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1598bfb0783d6ed34782981929d0c6b206698a1e"}], "stats": {"total": 97, "additions": 47, "deletions": 50}, "files": [{"sha": "61299f2cad75dc0643c9f2377c5b52e8a10ada4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85949949f2ffe0ab4f07e3ec859a876183418c28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85949949f2ffe0ab4f07e3ec859a876183418c28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85949949f2ffe0ab4f07e3ec859a876183418c28", "patch": "@@ -1,3 +1,15 @@\n+2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"wd\"):\n+\tDelete.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_wd.\n+\t* config/rs6000/rs6000.md: Adjust.\n+\t* config/rs6000/vsx.md: Adjust.\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (define_mode_attr Fv2): Delete."}, {"sha": "763e892f17f61dc866f57195ae2116fcaa27f4c5", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85949949f2ffe0ab4f07e3ec859a876183418c28/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85949949f2ffe0ab4f07e3ec859a876183418c28/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=85949949f2ffe0ab4f07e3ec859a876183418c28", "patch": "@@ -59,9 +59,6 @@\n ;; NOTE: For compatibility, \"wc\" is reserved to represent individual CR bits.\n ;; It is currently used for that purpose in LLVM.\n \n-(define_register_constraint \"wd\" \"rs6000_constraints[RS6000_CONSTRAINT_wd]\"\n-  \"VSX vector register to hold vector double data or NO_REGS.\")\n-\n (define_register_constraint \"we\" \"rs6000_constraints[RS6000_CONSTRAINT_we]\"\n   \"VSX register if the -mpower9-vector -m64 options were used or NO_REGS.\")\n "}, {"sha": "207162dcfa639a1870638c1601a0dc0a43ac1950", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85949949f2ffe0ab4f07e3ec859a876183418c28/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85949949f2ffe0ab4f07e3ec859a876183418c28/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=85949949f2ffe0ab4f07e3ec859a876183418c28", "patch": "@@ -2508,7 +2508,6 @@ rs6000_debug_reg_global (void)\n \t   \"f  reg_class = %s\\n\"\n \t   \"v  reg_class = %s\\n\"\n \t   \"wa reg_class = %s\\n\"\n-\t   \"wd reg_class = %s\\n\"\n \t   \"we reg_class = %s\\n\"\n \t   \"wf reg_class = %s\\n\"\n \t   \"wp reg_class = %s\\n\"\n@@ -2522,7 +2521,6 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_f]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_v]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wa]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wd]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_we]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wf]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wp]],\n@@ -3138,7 +3136,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \tv  - Altivec register.\n \twa - Any VSX register.\n \twc - Reserved to represent individual CR bits (used in LLVM).\n-\twd - Preferred register class for V2DFmode.\n \twf - Preferred register class for V4SFmode.\n \twn - always NO_REGS.\n \twr - GPR if 64-bit mode is permitted.\n@@ -3154,7 +3151,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n   if (TARGET_VSX)\n     {\n       rs6000_constraints[RS6000_CONSTRAINT_wa] = VSX_REGS;\n-      rs6000_constraints[RS6000_CONSTRAINT_wd] = VSX_REGS;\t/* V2DFmode  */\n       rs6000_constraints[RS6000_CONSTRAINT_wf] = VSX_REGS;\t/* V4SFmode  */\n     }\n "}, {"sha": "6719cc41cdd37342f9ca3b9f441496c54d1107a5", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85949949f2ffe0ab4f07e3ec859a876183418c28/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85949949f2ffe0ab4f07e3ec859a876183418c28/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=85949949f2ffe0ab4f07e3ec859a876183418c28", "patch": "@@ -1256,7 +1256,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_f,\t\t/* fpr registers for single values */\n   RS6000_CONSTRAINT_v,\t\t/* Altivec registers */\n   RS6000_CONSTRAINT_wa,\t\t/* Any VSX register */\n-  RS6000_CONSTRAINT_wd,\t\t/* VSX register for V2DF */\n   RS6000_CONSTRAINT_we,\t\t/* VSX register if ISA 3.0 vector. */\n   RS6000_CONSTRAINT_wf,\t\t/* VSX register for V4SF */\n   RS6000_CONSTRAINT_wp,\t\t/* VSX reg for IEEE 128-bit fp TFmode. */"}, {"sha": "4cf908278d80be3034fb53dc92b8387c51ddd73d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85949949f2ffe0ab4f07e3ec859a876183418c28/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85949949f2ffe0ab4f07e3ec859a876183418c28/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=85949949f2ffe0ab4f07e3ec859a876183418c28", "patch": "@@ -625,7 +625,7 @@\n \t\t\t(TF   \"f\")\n \t\t\t(TD   \"f\")\n \t\t\t(V4SF \"wf\")\n-\t\t\t(V2DF \"wd\")])\n+\t\t\t(V2DF \"wa\")])\n \n (define_mode_attr rreg2 [(SF   \"f\")\n \t\t\t (DF   \"d\")])"}, {"sha": "70276a848cf69ba53b489b0ed62ea01cdf6020d4", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 33, "deletions": 37, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85949949f2ffe0ab4f07e3ec859a876183418c28/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85949949f2ffe0ab4f07e3ec859a876183418c28/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=85949949f2ffe0ab4f07e3ec859a876183418c28", "patch": "@@ -112,8 +112,8 @@\n \t\t\t (V8HI  \"v\")\n \t\t\t (V4SI  \"v\")\n \t\t\t (V4SF  \"wf\")\n-\t\t\t (V2DI  \"wd\")\n-\t\t\t (V2DF  \"wd\")\n+\t\t\t (V2DI  \"wa\")\n+\t\t\t (V2DF  \"wa\")\n \t\t\t (DI\t\"wa\")\n \t\t\t (DF    \"wa\")\n \t\t\t (SF\t\"ww\")\n@@ -125,7 +125,7 @@\n ;; Map the register class used for float<->int conversions (floating point side)\n ;; VSr2 is the preferred register class, VSr3 is any register class that will\n ;; hold the data\n-(define_mode_attr VSr2\t[(V2DF  \"wd\")\n+(define_mode_attr VSr2\t[(V2DF  \"wa\")\n \t\t\t (V4SF  \"wf\")\n \t\t\t (DF    \"wa\")\n \t\t\t (SF\t\"ww\")\n@@ -144,14 +144,14 @@\n ;; Map the register class for sp<->dp float conversions, destination\n (define_mode_attr VSr4\t[(SF\t\"wa\")\n \t\t\t (DF\t\"f\")\n-\t\t\t (V2DF  \"wd\")\n+\t\t\t (V2DF  \"wa\")\n \t\t\t (V4SF\t\"v\")])\n \n ;; Map the register class for sp<->dp float conversions, source\n (define_mode_attr VSr5\t[(SF\t\"wa\")\n \t\t\t (DF\t\"f\")\n \t\t\t (V2DF  \"v\")\n-\t\t\t (V4SF\t\"wd\")])\n+\t\t\t (V4SF\t\"wa\")])\n \n ;; The VSX register class that a type can occupy, even if it is not the\n ;; preferred register class (VSr is the preferred register class that will get\n@@ -1919,15 +1919,13 @@\n   [(set_attr \"type\" \"vecfloat\")])\n \n (define_insn \"*vsx_fmav2df4\"\n-  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wd,wd,?wa,?wa\")\n+  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa,wa\")\n \t(fma:V2DF\n-\t  (match_operand:V2DF 1 \"vsx_register_operand\" \"%wd,wd,wa,wa\")\n-\t  (match_operand:V2DF 2 \"vsx_register_operand\" \"wd,0,wa,0\")\n-\t  (match_operand:V2DF 3 \"vsx_register_operand\" \"0,wd,0,wa\")))]\n+\t  (match_operand:V2DF 1 \"vsx_register_operand\" \"%wa,wa\")\n+\t  (match_operand:V2DF 2 \"vsx_register_operand\" \"wa,0\")\n+\t  (match_operand:V2DF 3 \"vsx_register_operand\" \"0,wa\")))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"@\n-   xvmaddadp %x0,%x1,%x2\n-   xvmaddmdp %x0,%x1,%x3\n    xvmaddadp %x0,%x1,%x2\n    xvmaddmdp %x0,%x1,%x3\"\n   [(set_attr \"type\" \"vecdouble\")])\n@@ -1980,17 +1978,15 @@\n   [(set_attr \"type\" \"vecfloat\")])\n \n (define_insn \"*vsx_nfmsv2df4\"\n-  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wd,wd,?wa,?wa\")\n+  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa,wa\")\n \t(neg:V2DF\n \t (fma:V2DF\n-\t   (match_operand:V2DF 1 \"vsx_register_operand\" \"%wd,wd,wa,wa\")\n-\t   (match_operand:V2DF 2 \"vsx_register_operand\" \"wd,0,wa,0\")\n+\t   (match_operand:V2DF 1 \"vsx_register_operand\" \"%wa,wa\")\n+\t   (match_operand:V2DF 2 \"vsx_register_operand\" \"wa,0\")\n \t   (neg:V2DF\n-\t     (match_operand:V2DF 3 \"vsx_register_operand\" \"0,wd,0,wa\")))))]\n+\t     (match_operand:V2DF 3 \"vsx_register_operand\" \"0,wa\")))))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"@\n-   xvnmsubadp %x0,%x1,%x2\n-   xvnmsubmdp %x0,%x1,%x3\n    xvnmsubadp %x0,%x1,%x2\n    xvnmsubmdp %x0,%x1,%x3\"\n   [(set_attr \"type\" \"vecdouble\")])\n@@ -2399,38 +2395,38 @@\n \n (define_insn \"vsx_xvcvdpsxws\"\n   [(set (match_operand:V4SI 0 \"vsx_register_operand\" \"=v,?wa\")\n-\t(unspec:V4SI [(match_operand:V2DF 1 \"vsx_register_operand\" \"wd,wa\")]\n+\t(unspec:V4SI [(match_operand:V2DF 1 \"vsx_register_operand\" \"wa,wa\")]\n \t\t     UNSPEC_VSX_CVDPSXWS))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvdpsxws %x0,%x1\"\n   [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"vsx_xvcvdpuxws\"\n   [(set (match_operand:V4SI 0 \"vsx_register_operand\" \"=v,?wa\")\n-\t(unspec:V4SI [(match_operand:V2DF 1 \"vsx_register_operand\" \"wd,wa\")]\n+\t(unspec:V4SI [(match_operand:V2DF 1 \"vsx_register_operand\" \"wa,wa\")]\n \t\t     UNSPEC_VSX_CVDPUXWS))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvdpuxws %x0,%x1\"\n   [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"vsx_xvcvsxdsp\"\n-  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wd,?wa\")\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,?wa\")\n \t(unspec:V4SF [(match_operand:V2DI 1 \"vsx_register_operand\" \"wf,wa\")]\n \t\t     UNSPEC_VSX_CVSXDSP))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvsxdsp %x0,%x1\"\n   [(set_attr \"type\" \"vecfloat\")])\n \n (define_insn \"vsx_xvcvuxdsp\"\n-  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wd,?wa\")\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,?wa\")\n \t(unspec:V4SF [(match_operand:V2DI 1 \"vsx_register_operand\" \"wf,wa\")]\n \t\t     UNSPEC_VSX_CVUXDSP))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvuxdsp %x0,%x1\"\n   [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"vsx_xvcdpsp\"\n-  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wd,?wa\")\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,?wa\")\n \t(unspec:V4SF [(match_operand:V2DF 1 \"vsx_register_operand\" \"wf,wa\")]\n \t\t     UNSPEC_VSX_XVCDPSP))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n@@ -2440,7 +2436,7 @@\n ;; Convert from 32-bit to 64-bit types\n ;; Provide both vector and scalar targets\n (define_insn \"vsx_xvcvsxwdp\"\n-  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wd,?wa\")\n+  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa,?wa\")\n \t(unspec:V2DF [(match_operand:V4SI 1 \"vsx_register_operand\" \"wf,wa\")]\n \t\t     UNSPEC_VSX_CVSXWDP))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n@@ -2456,7 +2452,7 @@\n   [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"vsx_xvcvuxwdp\"\n-  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wd,?wa\")\n+  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa,?wa\")\n \t(unspec:V2DF [(match_operand:V4SI 1 \"vsx_register_operand\" \"wf,wa\")]\n \t\t     UNSPEC_VSX_CVUXWDP))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n@@ -2473,15 +2469,15 @@\n \n (define_insn \"vsx_xvcvspsxds\"\n   [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=v,?wa\")\n-\t(unspec:V2DI [(match_operand:V4SF 1 \"vsx_register_operand\" \"wd,wa\")]\n+\t(unspec:V2DI [(match_operand:V4SF 1 \"vsx_register_operand\" \"wa,wa\")]\n \t\t     UNSPEC_VSX_CVSPSXDS))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvspsxds %x0,%x1\"\n   [(set_attr \"type\" \"vecdouble\")])\n \n (define_insn \"vsx_xvcvspuxds\"\n   [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=v,?wa\")\n-\t(unspec:V2DI [(match_operand:V4SF 1 \"vsx_register_operand\" \"wd,wa\")]\n+\t(unspec:V2DI [(match_operand:V4SF 1 \"vsx_register_operand\" \"wa,wa\")]\n \t\t     UNSPEC_VSX_CVSPUXDS))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvspuxds %x0,%x1\"\n@@ -2826,10 +2822,10 @@\n ;; since the xvrdpiz instruction does not truncate the value if the floating\n ;; point value is < LONG_MIN or > LONG_MAX.\n (define_insn \"*vsx_float_fix_v2df2\"\n-  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wd,?wa\")\n+  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa,?wa\")\n \t(float:V2DF\n \t (fix:V2DI\n-\t  (match_operand:V2DF 1 \"vsx_register_operand\" \"wd,?wa\"))))]\n+\t  (match_operand:V2DF 1 \"vsx_register_operand\" \"wa,?wa\"))))]\n   \"TARGET_HARD_FLOAT\n    && VECTOR_UNIT_VSX_P (V2DFmode) && flag_unsafe_math_optimizations\n    && !flag_trapping_math && TARGET_FRIZ\"\n@@ -3452,11 +3448,11 @@\n })\n \n (define_insn \"vsx_xxpermdi2_<mode>_1\"\n-  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=wd\")\n+  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"=wa\")\n \t(vec_select:VSX_D\n \t  (vec_concat:<VS_double>\n-\t    (match_operand:VSX_D 1 \"vsx_register_operand\" \"wd\")\n-\t    (match_operand:VSX_D 2 \"vsx_register_operand\" \"wd\"))\n+\t    (match_operand:VSX_D 1 \"vsx_register_operand\" \"wa\")\n+\t    (match_operand:VSX_D 2 \"vsx_register_operand\" \"wa\"))\n \t  (parallel [(match_operand 3 \"const_0_to_1_operand\" \"\")\n \t\t     (match_operand 4 \"const_2_to_3_operand\" \"\")])))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n@@ -4277,17 +4273,17 @@\n ;; Vector reduction insns and splitters\n \n (define_insn_and_split \"vsx_reduc_<VEC_reduc_name>_v2df\"\n-  [(set (match_operand:V2DF 0 \"vfloat_operand\" \"=&wd,&?wa,wd,?wa\")\n+  [(set (match_operand:V2DF 0 \"vfloat_operand\" \"=&wa,wa\")\n \t(VEC_reduc:V2DF\n \t (vec_concat:V2DF\n \t  (vec_select:DF\n-\t   (match_operand:V2DF 1 \"vfloat_operand\" \"wd,wa,wd,wa\")\n+\t   (match_operand:V2DF 1 \"vfloat_operand\" \"wa,wa\")\n \t   (parallel [(const_int 1)]))\n \t  (vec_select:DF\n \t   (match_dup 1)\n \t   (parallel [(const_int 0)])))\n \t (match_dup 1)))\n-   (clobber (match_scratch:V2DF 2 \"=0,0,&wd,&wa\"))]\n+   (clobber (match_scratch:V2DF 2 \"=0,&wa\"))]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"#\"\n   \"\"\n@@ -4345,19 +4341,19 @@\n ;; to the top element of the V2DF array without doing an extract.\n \n (define_insn_and_split \"*vsx_reduc_<VEC_reduc_name>_v2df_scalar\"\n-  [(set (match_operand:DF 0 \"vfloat_operand\" \"=&wa,&?wa,wa,?wa\")\n+  [(set (match_operand:DF 0 \"vfloat_operand\" \"=&wa,wa\")\n \t(vec_select:DF\n \t (VEC_reduc:V2DF\n \t  (vec_concat:V2DF\n \t   (vec_select:DF\n-\t    (match_operand:V2DF 1 \"vfloat_operand\" \"wd,wa,wd,wa\")\n+\t    (match_operand:V2DF 1 \"vfloat_operand\" \"wa,wa\")\n \t    (parallel [(const_int 1)]))\n \t   (vec_select:DF\n \t    (match_dup 1)\n \t    (parallel [(const_int 0)])))\n \t  (match_dup 1))\n \t (parallel [(const_int 1)])))\n-   (clobber (match_scratch:DF 2 \"=0,0,&wd,&wa\"))]\n+   (clobber (match_scratch:DF 2 \"=0,&wa\"))]\n   \"BYTES_BIG_ENDIAN && VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"#\"\n   \"\""}, {"sha": "7be8521bc57d2239e3f12909c6c61723b7edb1bb", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85949949f2ffe0ab4f07e3ec859a876183418c28/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85949949f2ffe0ab4f07e3ec859a876183418c28/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=85949949f2ffe0ab4f07e3ec859a876183418c28", "patch": "@@ -3196,7 +3196,7 @@ Altivec vector register\n @item wa\n Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n \n-When using any of the register constraints (@code{wa}, @code{wd}, @code{wf},\n+When using any of the register constraints (@code{wa}, @code{wf},\n @code{wp}, @code{wq}, or @code{ww})\n that take VSX registers, you must use @code{%x<n>} in the template so\n that the correct register is used.  Otherwise the register number\n@@ -3244,9 +3244,6 @@ asm (\"xsaddqp %x0,%x1,%x2\"\n @noindent\n is incorrect.\n \n-@item wd\n-VSX vector register to hold vector double data or NO_REGS.\n-\n @item we\n VSX register if the @option{-mcpu=power9} and @option{-m64} options\n were used or NO_REGS."}]}