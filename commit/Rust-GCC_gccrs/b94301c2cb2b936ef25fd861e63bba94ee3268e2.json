{"sha": "b94301c2cb2b936ef25fd861e63bba94ee3268e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk0MzAxYzJjYjJiOTM2ZWYyNWZkODYxZTYzYmJhOTRlZTMyNjhlMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-11-06T08:22:24Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-11-06T08:22:24Z"}, "message": "(expand_call)[ARGS_GROW_DOWNWARD] Fix fencepost error in calculating high_to_save and low_to_save.\n\n(expand_call)[ARGS_GROW_DOWNWARD] Fix fencepost error in\ncalculating high_to_save and low_to_save.  Use - high_to_save to\naddress stack_area.\n\nFrom-SVN: r2699", "tree": {"sha": "8f3a12fd81a574429818d0cafa2dfd8b1d1e87d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f3a12fd81a574429818d0cafa2dfd8b1d1e87d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b94301c2cb2b936ef25fd861e63bba94ee3268e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b94301c2cb2b936ef25fd861e63bba94ee3268e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b94301c2cb2b936ef25fd861e63bba94ee3268e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b94301c2cb2b936ef25fd861e63bba94ee3268e2/comments", "author": null, "committer": null, "parents": [{"sha": "931553d837d3df3c65d8255add17dff148d7d075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931553d837d3df3c65d8255add17dff148d7d075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/931553d837d3df3c65d8255add17dff148d7d075"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "c23fb829cd9ee696a13f0626b6b2e2263e1c4e95", "filename": "gcc/calls.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94301c2cb2b936ef25fd861e63bba94ee3268e2/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94301c2cb2b936ef25fd861e63bba94ee3268e2/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=b94301c2cb2b936ef25fd861e63bba94ee3268e2", "patch": "@@ -85,7 +85,7 @@ struct arg_data\n };\n \n #ifdef ACCUMULATE_OUTGOING_ARGS\n-/* A vector of one char per word of stack space.  A byte if non-zero if\n+/* A vector of one char per byte of stack space.  A byte if non-zero if\n    the corresponding stack location has been used.\n    This vector is used to prevent a function call within an argument from\n    clobbering any stack already set up.  */\n@@ -1437,7 +1437,11 @@ expand_call (exp, target, ignore)\n \n      Here we compute the boundary of the that needs to be saved, if any.  */\n \n+#ifdef ARGS_GROW_DOWNWARD\n+  for (i = 0; i < reg_parm_stack_space + 1; i++)\n+#else\n   for (i = 0; i < reg_parm_stack_space; i++)\n+#endif\n     {\n       if (i >=  highest_outgoing_arg_in_use\n \t  || stack_usage_map[i] == 0)\n@@ -1463,8 +1467,15 @@ expand_call (exp, target, ignore)\n \n       stack_area = gen_rtx (MEM, save_mode,\n \t\t\t    memory_address (save_mode,\n+\t\t\t\t\t    \n+#ifdef ARGS_GROW_DOWNWARD\n+\t\t\t\t\t    plus_constant (argblock,\n+\t\t\t\t\t\t\t   - high_to_save)\n+#else\n \t\t\t\t\t    plus_constant (argblock,\n-\t\t\t\t\t\t\t   low_to_save)));\n+\t\t\t\t\t\t\t   low_to_save)\n+#endif\n+\t\t\t\t\t    ));\n       if (save_mode == BLKmode)\n \t{\n \t  save_area = assign_stack_temp (BLKmode, num_to_save, 1);\n@@ -1759,7 +1770,12 @@ expand_call (exp, target, ignore)\n \t  rtx stack_area\n \t    = gen_rtx (MEM, save_mode,\n \t\t       memory_address (save_mode,\n-\t\t\t\t       plus_constant (argblock, low_to_save)));\n+#ifdef ARGS_GROW_DOWNWARD\n+\t\t\t\t       plus_constant (argblock, - high_to_save)\n+#else\n+\t\t\t\t       plus_constant (argblock, low_to_save)\n+#endif\n+\t\t\t\t       ));\n \n \t  if (save_mode != BLKmode)\n \t    emit_move_insn (stack_area, save_area);"}]}