{"sha": "1da4c3a71050c5dd82b1d72b84bfecb66f2d882b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRhNGMzYTcxMDUwYzVkZDgyYjFkNzJiODRiZmVjYjY2ZjJkODgyYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-03-13T22:11:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-03-13T22:11:46Z"}, "message": "sparc.c (struct_value_alias_set): New global variable.\n\n\t* config/sparc/sparc.c (struct_value_alias_set): New global variable.\n\t(sparc_override_options): Initialize it.\n\t(sparc_struct_value_rtx): Set it on the MEM to be returned.\n\nFrom-SVN: r96395", "tree": {"sha": "fcf2b0f81ffc50a649944251c5a2b3957c4c8e88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcf2b0f81ffc50a649944251c5a2b3957c4c8e88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1da4c3a71050c5dd82b1d72b84bfecb66f2d882b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1da4c3a71050c5dd82b1d72b84bfecb66f2d882b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1da4c3a71050c5dd82b1d72b84bfecb66f2d882b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1da4c3a71050c5dd82b1d72b84bfecb66f2d882b/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "053e7c38b330ffb596efb02e42e7e1c63519a39f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053e7c38b330ffb596efb02e42e7e1c63519a39f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053e7c38b330ffb596efb02e42e7e1c63519a39f"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "2a4a78e16278d293474f7c21f45e1d45ce01850b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da4c3a71050c5dd82b1d72b84bfecb66f2d882b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da4c3a71050c5dd82b1d72b84bfecb66f2d882b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1da4c3a71050c5dd82b1d72b84bfecb66f2d882b", "patch": "@@ -1,3 +1,9 @@\n+2005-03-14  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc.c (struct_value_alias_set): New global variable.\n+\t(sparc_override_options): Initialize it.\n+\t(sparc_struct_value_rtx): Set it on the MEM to be returned.\n+\n 2005-03-13  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/predicates.md (mem_or_easy_const_operand): Delete."}, {"sha": "1d791ccd1e3c9b640ccfe95047a1f5016d2488e5", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da4c3a71050c5dd82b1d72b84bfecb66f2d882b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da4c3a71050c5dd82b1d72b84bfecb66f2d882b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=1da4c3a71050c5dd82b1d72b84bfecb66f2d882b", "patch": "@@ -227,6 +227,9 @@ static int num_gfregs;\n /* The alias set for prologue/epilogue register save/restore.  */\n static GTY(()) int sparc_sr_alias_set;\n \n+/* The alias set for the structure return value.  */\n+static GTY(()) int struct_value_alias_set;\n+\n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n rtx sparc_compare_op0, sparc_compare_op1;\n@@ -700,8 +703,9 @@ sparc_override_options (void)\n   /* Do various machine dependent initializations.  */\n   sparc_init_modes ();\n \n-  /* Acquire a unique set number for our register saves and restores.  */\n+  /* Acquire unique alias sets for our private stuff.  */\n   sparc_sr_alias_set = new_alias_set ();\n+  struct_value_alias_set = new_alias_set ();\n \n   /* Set up function hooks.  */\n   init_machine_status = sparc_init_machine_status;\n@@ -6086,12 +6090,17 @@ sparc_struct_value_rtx (tree fndecl ATTRIBUTE_UNUSED, int incoming)\n     return 0;\n   else\n     {\n+      rtx mem;\n+\n       if (incoming)\n-\treturn gen_rtx_MEM (Pmode, plus_constant (frame_pointer_rtx,\n-\t\t\t\t\t\t  STRUCT_VALUE_OFFSET));\n+\tmem = gen_rtx_MEM (Pmode, plus_constant (frame_pointer_rtx,\n+\t\t\t\t\t\t STRUCT_VALUE_OFFSET));\n       else\n-\treturn gen_rtx_MEM (Pmode, plus_constant (stack_pointer_rtx,\n-\t\t\t\t\t\t  STRUCT_VALUE_OFFSET));\n+\tmem = gen_rtx_MEM (Pmode, plus_constant (stack_pointer_rtx,\n+\t\t\t\t\t\t STRUCT_VALUE_OFFSET));\n+\n+      set_mem_alias_set (mem, struct_value_alias_set);\n+      return mem;\n     }\n }\n "}]}