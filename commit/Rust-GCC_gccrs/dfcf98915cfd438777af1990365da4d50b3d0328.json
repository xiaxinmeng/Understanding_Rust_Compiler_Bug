{"sha": "dfcf98915cfd438777af1990365da4d50b3d0328", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZjZjk4OTE1Y2ZkNDM4Nzc3YWYxOTkwMzY1ZGE0ZDUwYjNkMDMyOA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-03-06T21:32:43Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-03-06T21:32:43Z"}, "message": "(modified_type_die): Initialize item_type to NULL.\n\nMove equate_type_number_to_die call before use of sub_die, and move\nrecursive modified_type_die calls on item_type after it.\n\nFrom-SVN: r13694", "tree": {"sha": "7bcb0f3c23ac1a9920b187e1764f03609e632dcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bcb0f3c23ac1a9920b187e1764f03609e632dcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfcf98915cfd438777af1990365da4d50b3d0328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfcf98915cfd438777af1990365da4d50b3d0328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfcf98915cfd438777af1990365da4d50b3d0328", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfcf98915cfd438777af1990365da4d50b3d0328/comments", "author": null, "committer": null, "parents": [{"sha": "b1357021b832988e12895b1fa3ca6a24c1677009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1357021b832988e12895b1fa3ca6a24c1677009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1357021b832988e12895b1fa3ca6a24c1677009"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "1f108df074131e377868f9c8991a7d65b6691ef2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfcf98915cfd438777af1990365da4d50b3d0328/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfcf98915cfd438777af1990365da4d50b3d0328/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=dfcf98915cfd438777af1990365da4d50b3d0328", "patch": "@@ -5194,7 +5194,7 @@ modified_type_die (type, is_const_type, is_volatile_type, context_die)\n   register enum tree_code code = TREE_CODE (type);\n   register dw_die_ref mod_type_die = NULL;\n   register dw_die_ref sub_die = NULL;\n-  register tree item_type;\n+  register tree item_type = NULL;\n \n   if (code != ERROR_MARK)\n     {\n@@ -5245,10 +5245,6 @@ modified_type_die (type, is_const_type, is_volatile_type, context_die)\n \t  add_AT_unsigned (mod_type_die, DW_AT_address_class, 0);\n #endif\n \t  item_type = TREE_TYPE (type);\n-\t  sub_die = modified_type_die (item_type,\n-\t\t\t\t       TYPE_READONLY (item_type),\n-\t\t\t\t       TYPE_VOLATILE (item_type),\n-\t\t\t\t       context_die);\n \t}\n       else if (code == REFERENCE_TYPE)\n \t{\n@@ -5258,10 +5254,6 @@ modified_type_die (type, is_const_type, is_volatile_type, context_die)\n \t  add_AT_unsigned (mod_type_die, DW_AT_address_class, 0);\n #endif \n \t  item_type = TREE_TYPE (type);\n-\t  sub_die = modified_type_die (item_type,\n-\t\t\t\t       TYPE_READONLY (item_type),\n-\t\t\t\t       TYPE_VOLATILE (item_type),\n-\t\t\t\t       context_die);\n \t}\n       else if (is_base_type (type))\n \t{\n@@ -5281,11 +5273,22 @@ modified_type_die (type, is_const_type, is_volatile_type, context_die)\n \t  assert (mod_type_die != NULL);\n \t}\n     }\n+  equate_type_number_to_die (type, mod_type_die);\n+  if (item_type)\n+    {\n+      /* We must do this after the equate_type_number_to_die call, in case\n+\t this is a recursive type.  This ensures that the modified_type_die\n+\t recursion will terminate even if the type is recursive.  Recursive\n+\t types are possible in Ada.  */\n+      sub_die = modified_type_die (item_type,\n+\t\t\t\t   TYPE_READONLY (item_type),\n+\t\t\t\t   TYPE_VOLATILE (item_type),\n+\t\t\t\t   context_die);\n+    }\n   if (sub_die != NULL)\n     {\n       add_AT_die_ref (mod_type_die, DW_AT_type, sub_die);\n     }\n-  equate_type_number_to_die (type, mod_type_die);\n   return mod_type_die;\n }\n "}]}