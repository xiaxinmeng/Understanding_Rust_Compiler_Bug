{"sha": "f2831cc91f95831e8ff6094262323e5413ffc3cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI4MzFjYzkxZjk1ODMxZThmZjYwOTQyNjIzMjNlNTQxM2ZmYzNjYg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-11-16T15:47:31Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-11-16T15:47:31Z"}, "message": "mn10300.h (PREFERRED_RELOAD_CLASS, [...]): Remove.\n\n\t* config/mn10300/mn10300.h (PREFERRED_RELOAD_CLASS,\n\tPREFERRED_OUTPUT_RELOAD_CLASS): Remove.\n\t* config/mn10300/mn10300.c (TARGET_PREFERRED_RELOAD_CLASS,\n\tTARGET_PREFERRED_OUTPUT_RELOAD_CLASS): Define.\n\t(mn10300_preferred_reload_class,\n\tmn10300_preferred_output_reload_class): New functions.\n\nFrom-SVN: r166805", "tree": {"sha": "77f80aff8a7a5fd3fd157ac2449305e66cb949c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77f80aff8a7a5fd3fd157ac2449305e66cb949c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2831cc91f95831e8ff6094262323e5413ffc3cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2831cc91f95831e8ff6094262323e5413ffc3cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2831cc91f95831e8ff6094262323e5413ffc3cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2831cc91f95831e8ff6094262323e5413ffc3cb/comments", "author": null, "committer": null, "parents": [{"sha": "64aad6898e8844529fa141d2795d72d369dc29be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64aad6898e8844529fa141d2795d72d369dc29be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64aad6898e8844529fa141d2795d72d369dc29be"}], "stats": {"total": 64, "additions": 43, "deletions": 21}, "files": [{"sha": "03c109aa28613c567e738e4021c2623eff58216e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2831cc91f95831e8ff6094262323e5413ffc3cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2831cc91f95831e8ff6094262323e5413ffc3cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2831cc91f95831e8ff6094262323e5413ffc3cb", "patch": "@@ -1,3 +1,12 @@\n+2010-11-16  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/mn10300/mn10300.h (PREFERRED_RELOAD_CLASS,\n+\tPREFERRED_OUTPUT_RELOAD_CLASS): Remove.\n+\t* config/mn10300/mn10300.c (TARGET_PREFERRED_RELOAD_CLASS,\n+\tTARGET_PREFERRED_OUTPUT_RELOAD_CLASS): Define.\n+\t(mn10300_preferred_reload_class,\n+\tmn10300_preferred_output_reload_class): New functions.\n+\n 2010-11-16  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* gensupport.c (MNEMONIC_ATTR_NAME, MNEMONIC_HTAB_SIZE): New"}, {"sha": "868208ada7e784f410dc624f4529b881faa4de3d", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2831cc91f95831e8ff6094262323e5413ffc3cb/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2831cc91f95831e8ff6094262323e5413ffc3cb/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=f2831cc91f95831e8ff6094262323e5413ffc3cb", "patch": "@@ -1270,6 +1270,35 @@ mn10300_store_multiple_operation (rtx op,\n   return mask;\n }\n \n+/* Implement TARGET_PREFERRED_RELOAD_CLASS.  */\n+\n+static reg_class_t\n+mn10300_preferred_reload_class (rtx x, reg_class_t rclass)\n+{\n+  if (x == stack_pointer_rtx && rclass != SP_REGS)\n+     return ADDRESS_OR_EXTENDED_REGS;\n+  else if (MEM_P (x)\n+\t   || (REG_P (x) \n+\t       && !HARD_REGISTER_P (x))\n+\t   || (GET_CODE (x) == SUBREG\n+\t       && REG_P (SUBREG_REG (x))\n+\t       && !HARD_REGISTER_P (SUBREG_REG (x))))\n+    return LIMIT_RELOAD_CLASS (GET_MODE (x), rclass);\n+  else\n+    return rclass;\n+}\n+\n+/* Implement TARGET_PREFERRED_OUTPUT_RELOAD_CLASS.  */\n+\n+static reg_class_t\n+mn10300_preferred_output_reload_class (rtx x, reg_class_t rclass)\n+{\n+  if (x == stack_pointer_rtx && rclass != SP_REGS)\n+    return ADDRESS_OR_EXTENDED_REGS;\n+\n+  return rclass;\n+}\n+\n /* What (if any) secondary registers are needed to move IN with mode\n    MODE into a register in register class RCLASS.\n \n@@ -2460,6 +2489,11 @@ mn10300_adjust_sched_cost (rtx insn, rtx link, rtx dep, int cost)\n #undef  TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\tmn10300_legitimate_address_p\n \n+#undef  TARGET_PREFERRED_RELOAD_CLASS\n+#define TARGET_PREFERRED_RELOAD_CLASS mn10300_preferred_reload_class\n+#undef  TARGET_PREFERRED_OUTPUT_RELOAD_CLASS\n+#define TARGET_PREFERRED_OUTPUT_RELOAD_CLASS mn10300_preferred_output_reload_class\n+\n #undef  TARGET_ASM_TRAMPOLINE_TEMPLATE\n #define TARGET_ASM_TRAMPOLINE_TEMPLATE mn10300_asm_trampoline_template\n #undef  TARGET_TRAMPOLINE_INIT"}, {"sha": "7367d1b2188e26d0ffccd1baa85c9cee5490186f", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2831cc91f95831e8ff6094262323e5413ffc3cb/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2831cc91f95831e8ff6094262323e5413ffc3cb/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=f2831cc91f95831e8ff6094262323e5413ffc3cb", "patch": "@@ -422,27 +422,6 @@ enum reg_class\n #define REG_OK_FOR_INDEX_P(X) \\\n   (REGNO_OK_FOR_INDEX_P (REGNO (X)))\n \n-/* Given an rtx X being reloaded into a reg required to be\n-   in class CLASS, return the class of reg to actually use.\n-   In general this is just CLASS; but on some machines\n-   in some cases it is preferable to use a more restrictive class.  */\n-\n-#define PREFERRED_RELOAD_CLASS(X,CLASS)\t\t\t\t\\\n-  ((X) == stack_pointer_rtx && (CLASS) != SP_REGS\t\t\\\n-   ? ADDRESS_OR_EXTENDED_REGS\t\t\t\t\t\\\n-   : (MEM_P (X)\t\t\t\t\t\t\t\\\n-      || (REG_P (X)\t\t\t\t\t\t\\\n-\t  && REGNO (X) >= FIRST_PSEUDO_REGISTER)\t\t\\\n-      || (GET_CODE (X) == SUBREG\t\t\t\t\\\n-\t  && REG_P (SUBREG_REG (X))\t\t\t\t\\\n-\t  && REGNO (SUBREG_REG (X)) >= FIRST_PSEUDO_REGISTER)\t\\\n-      ? LIMIT_RELOAD_CLASS (GET_MODE (X), CLASS)\t\t\\\n-      : (CLASS)))\n-\n-#define PREFERRED_OUTPUT_RELOAD_CLASS(X,CLASS) \\\n-  (X == stack_pointer_rtx && CLASS != SP_REGS \\\n-   ? ADDRESS_OR_EXTENDED_REGS : CLASS)\n-\n #define LIMIT_RELOAD_CLASS(MODE, CLASS) \\\n   (!TARGET_AM33 && (MODE == QImode || MODE == HImode) ? DATA_REGS : CLASS)\n "}]}