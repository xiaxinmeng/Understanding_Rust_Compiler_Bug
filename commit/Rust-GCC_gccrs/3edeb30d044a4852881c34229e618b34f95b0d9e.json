{"sha": "3edeb30d044a4852881c34229e618b34f95b0d9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VkZWIzMGQwNDRhNDg1Mjg4MWMzNDIyOWU2MThiMzRmOTViMGQ5ZQ==", "commit": {"author": {"name": "Dave Korn", "email": "dave.korn.cygwin@gmail.com", "date": "2010-10-07T14:44:47Z"}, "committer": {"name": "Dave Korn", "email": "davek@gcc.gnu.org", "date": "2010-10-07T14:44:47Z"}, "message": "config.gcc (c_target_objs): Don't add cygwin2.o.\n\n\t* config.gcc (c_target_objs)[i?86-*-pe|i?86-*-cygwin*]: Don't add\n\tcygwin2.o.\n\t(cxx_target_objs)[i?86-*-pe|i?86-*-cygwin*]: Likewise.\n\t(extra_gcc_objs)[i?86-*-pe|i?86-*-cygwin*]: Don't add cygwin1.o.\n\t* config/i386/t-cygwin (cygwin1.o): Delete build rule.\n\t(cygwin2.o): Likewise.\n\t* config/i386/cygwin1.c: Delete file.\n\t* config/i386/cygwin2.c: Likewise.\n\t* config/i386/cygwin.h (CPP_SPEC): Remove all %{mno-cygwin} specs and\n\tmake all {%!mno-cygwin} ones unconditional.\n\t(STARTFILE_SPEC): Likewise.\n\t(REAL_LIBGCC_SPEC): Likewise.\n\t(LIB_SPEC): Likewise.\n\t(CXX_WRAP_SPEC): Likewise.\n\t(LINK_SPEC): Likewise.\n\t(CYGWIN_MINGW_SUBDIR): Delete now-unused macro definition.\n\t(CYGWIN_MINGW_SUBDIR_LEN): Likewise.\n\t(cygwin_gplusplus_include_dir): Delete now-unused array.\n\t(GPLUSPLUS_INCLUDE_DIR): Don't redefine to point to it.\n\t(cygwin_gplusplus_tool_include_dir): Delete now-unused array.\n\t(GPLUSPLUS_TOOL_INCLUDE_DIR): Don't redefine to point to it.\n\t(cygwin_gplusplus_backward_include_dir): Delete now-unused array.\n\t(GPLUSPLUS_BACKWARD_INCLUDE_DIR): Don't redefine to point to it.\n\t(cygwin_local_include_dir): Delete now-unused array.\n\t(LOCAL_INCLUDE_DIR): Don't redefine to point to it.\n\t(cygwin_cross_include_dir): Delete now-unused array.\n\t(CROSS_INCLUDE_DIR): Don't redefine to point to it.\n\t(cygwin_tool_include_dir): Delete now-unused array.\n\t(TOOL_INCLUDE_DIR): Don't redefine to point to it.\n\t(cygwin_standard_include_dir): Delete now-unused array.\n\t(STANDARD_INCLUDE_DIR): Don't redefine to point to it.\n\t(GEN_CVT_ARRAY): Delete now-unused macro definition.\n\t(cvt_to_mingw): Delete now-unused array.\n\t(mingw_scan): Remove prototype of deleted function.\n\t(GCC_DRIVER_HOST_INITIALIZATION): Don't define now-unused target macro.\n\t* config/i386/cygming.opt (mcygwin): Delete target-specific option.\n\t* doc/invoke.texi (-mcygwin): Don't document removed option.\n\t(-mno-cygwin): Likewise.\n\nFrom-SVN: r165119", "tree": {"sha": "61f6677182acb448816542f358ee079174022c75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61f6677182acb448816542f358ee079174022c75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3edeb30d044a4852881c34229e618b34f95b0d9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3edeb30d044a4852881c34229e618b34f95b0d9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3edeb30d044a4852881c34229e618b34f95b0d9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3edeb30d044a4852881c34229e618b34f95b0d9e/comments", "author": {"login": "davek-cygwin", "id": 530057, "node_id": "MDQ6VXNlcjUzMDA1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/530057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davek-cygwin", "html_url": "https://github.com/davek-cygwin", "followers_url": "https://api.github.com/users/davek-cygwin/followers", "following_url": "https://api.github.com/users/davek-cygwin/following{/other_user}", "gists_url": "https://api.github.com/users/davek-cygwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/davek-cygwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davek-cygwin/subscriptions", "organizations_url": "https://api.github.com/users/davek-cygwin/orgs", "repos_url": "https://api.github.com/users/davek-cygwin/repos", "events_url": "https://api.github.com/users/davek-cygwin/events{/privacy}", "received_events_url": "https://api.github.com/users/davek-cygwin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4c37c1616cacf3e879e53eaefb675746173ebd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c37c1616cacf3e879e53eaefb675746173ebd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4c37c1616cacf3e879e53eaefb675746173ebd7"}], "stats": {"total": 389, "additions": 53, "deletions": 336}, "files": [{"sha": "87391d9703b39b331938fa42ddfe890f6c8e4394", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3edeb30d044a4852881c34229e618b34f95b0d9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3edeb30d044a4852881c34229e618b34f95b0d9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3edeb30d044a4852881c34229e618b34f95b0d9e", "patch": "@@ -1,3 +1,44 @@\n+2010-10-07  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\t* config.gcc (c_target_objs)[i?86-*-pe|i?86-*-cygwin*]: Don't add\n+\tcygwin2.o.\n+\t(cxx_target_objs)[i?86-*-pe|i?86-*-cygwin*]: Likewise.\n+\t(extra_gcc_objs)[i?86-*-pe|i?86-*-cygwin*]: Don't add cygwin1.o.\n+\t* config/i386/t-cygwin (cygwin1.o): Delete build rule.\n+\t(cygwin2.o): Likewise.\n+\t* config/i386/cygwin1.c: Delete file.\n+\t* config/i386/cygwin2.c: Likewise.\n+\t* config/i386/cygwin.h (CPP_SPEC): Remove all %{mno-cygwin} specs and\n+\tmake all {%!mno-cygwin} ones unconditional.\n+\t(STARTFILE_SPEC): Likewise.\n+\t(REAL_LIBGCC_SPEC): Likewise.\n+\t(LIB_SPEC): Likewise.\n+\t(CXX_WRAP_SPEC): Likewise.\n+\t(LINK_SPEC): Likewise.\n+\t(CYGWIN_MINGW_SUBDIR): Delete now-unused macro definition.\n+\t(CYGWIN_MINGW_SUBDIR_LEN): Likewise.\n+\t(cygwin_gplusplus_include_dir): Delete now-unused array.\n+\t(GPLUSPLUS_INCLUDE_DIR): Don't redefine to point to it.\n+\t(cygwin_gplusplus_tool_include_dir): Delete now-unused array.\n+\t(GPLUSPLUS_TOOL_INCLUDE_DIR): Don't redefine to point to it.\n+\t(cygwin_gplusplus_backward_include_dir): Delete now-unused array.\n+\t(GPLUSPLUS_BACKWARD_INCLUDE_DIR): Don't redefine to point to it.\n+\t(cygwin_local_include_dir): Delete now-unused array.\n+\t(LOCAL_INCLUDE_DIR): Don't redefine to point to it.\n+\t(cygwin_cross_include_dir): Delete now-unused array.\n+\t(CROSS_INCLUDE_DIR): Don't redefine to point to it.\n+\t(cygwin_tool_include_dir): Delete now-unused array.\n+\t(TOOL_INCLUDE_DIR): Don't redefine to point to it.\n+\t(cygwin_standard_include_dir): Delete now-unused array.\n+\t(STANDARD_INCLUDE_DIR): Don't redefine to point to it.\n+\t(GEN_CVT_ARRAY): Delete now-unused macro definition.\n+\t(cvt_to_mingw): Delete now-unused array.\n+\t(mingw_scan): Remove prototype of deleted function.\n+\t(GCC_DRIVER_HOST_INITIALIZATION): Don't define now-unused target macro.\n+\t* config/i386/cygming.opt (mcygwin): Delete target-specific option.\n+\t* doc/invoke.texi (-mcygwin): Don't document removed option.\n+\t(-mno-cygwin): Likewise.\n+\n 2010-10-07  Richard Guenther  <rguenther@suse.de>\n \n \t* machmode.h (mode_for_vector): Declare."}, {"sha": "5d3973c729d7ddc91b832314b6c97b901b5e641b", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3edeb30d044a4852881c34229e618b34f95b0d9e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3edeb30d044a4852881c34229e618b34f95b0d9e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3edeb30d044a4852881c34229e618b34f95b0d9e", "patch": "@@ -1410,9 +1410,8 @@ i[34567]86-*-pe | i[34567]86-*-cygwin*)\n \ttarget_gtfiles=\"\\$(srcdir)/config/i386/winnt.c\"\n \textra_options=\"${extra_options} i386/cygming.opt\"\n \textra_objs=\"winnt.o winnt-stubs.o\"\n-\tc_target_objs=\"${c_target_objs} cygwin2.o msformat-c.o\"\n-\tcxx_target_objs=\"${cxx_target_objs} cygwin2.o winnt-cxx.o msformat-c.o\"\n-\textra_gcc_objs=cygwin1.o\n+\tc_target_objs=\"${c_target_objs} msformat-c.o\"\n+\tcxx_target_objs=\"${cxx_target_objs} winnt-cxx.o msformat-c.o\"\n \tif test x$enable_threads = xyes; then\n \t\tthread_file='posix'\n \tfi"}, {"sha": "89d5d09d1aad60373ef0e37b46f9600555f90d4b", "filename": "gcc/config/i386/cygming.opt", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3edeb30d044a4852881c34229e618b34f95b0d9e/gcc%2Fconfig%2Fi386%2Fcygming.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3edeb30d044a4852881c34229e618b34f95b0d9e/gcc%2Fconfig%2Fi386%2Fcygming.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.opt?ref=3edeb30d044a4852881c34229e618b34f95b0d9e", "patch": "@@ -1,6 +1,6 @@\n ; Cygwin- and MinGW-specific options.\n \n-; Copyright (C) 2005, 2007, 2009 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2009, 2010 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -22,10 +22,6 @@ mconsole\n Target RejectNegative\n Create console application\n \n-mcygwin\n-Target\n-Use the Cygwin interface\n-\n mdll\n Target RejectNegative\n Generate code for a DLL"}, {"sha": "bedf1e735d4de0660df1186c88f37ed1b39e0128", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 9, "deletions": 173, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3edeb30d044a4852881c34229e618b34f95b0d9e/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3edeb30d044a4852881c34229e618b34f95b0d9e/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=3edeb30d044a4852881c34229e618b34f95b0d9e", "patch": "@@ -25,17 +25,14 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef CPP_SPEC\n #define CPP_SPEC \"%(cpp_cpu) %{posix:-D_POSIX_SOURCE} \\\n-  %{mno-win32:%{mno-cygwin: %emno-cygwin and mno-win32 are not compatible}} \\\n-  %{mno-cygwin:-D__MSVCRT__ -D__MINGW32__ %{!ansi:%{mthreads:-D_MT}}}\\\n-  %{!mno-cygwin:-D__CYGWIN32__ -D__CYGWIN__ %{!ansi:-Dunix} -D__unix__ -D__unix }\\\n-  %{mwin32|mno-cygwin:-DWIN32 -D_WIN32 -D__WIN32 -D__WIN32__ %{!ansi:-DWINNT}}\\\n-  %{!nostdinc:%{!mno-win32|mno-cygwin:-idirafter ../include/w32api%s -idirafter ../../include/w32api%s}}\\\n+  -D__CYGWIN32__ -D__CYGWIN__ %{!ansi:-Dunix} -D__unix__ -D__unix \\\n+  %{mwin32:-DWIN32 -D_WIN32 -D__WIN32 -D__WIN32__ %{!ansi:-DWINNT}} \\\n+  %{!nostdinc:%{!mno-win32:-idirafter ../include/w32api%s -idirafter ../../include/w32api%s}}\\\n \"\n \n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"\\\n-  %{shared|mdll: %{mno-cygwin:dllcrt2%O%s}}\\\n-  %{!shared: %{!mdll: %{!mno-cygwin:crt0%O%s} %{mno-cygwin:crt2%O%s}\\\n+  %{!shared: %{!mdll: crt0%O%s \\\n   %{pg:gcrt0%O%s}}}\\\n   crtbegin.o%s\"\n \n@@ -66,10 +63,7 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n #undef REAL_LIBGCC_SPEC\n-#define REAL_LIBGCC_SPEC \\\n-  \"%{mno-cygwin: %{mthreads:-lmingwthrd} -lmingw32} \\\n-   \" SHARED_LIBGCC_SPEC \" \\\n-   %{mno-cygwin:-lmoldname -lmingwex -lmsvcrt}\"\n+#define REAL_LIBGCC_SPEC SHARED_LIBGCC_SPEC\n \n /* We have to dynamic link to get to the system DLLs.  All of libc, libm and\n    the Unix stuff is in cygwin.dll.  The import library is called\n@@ -80,8 +74,7 @@ along with GCC; see the file COPYING3.  If not see\n #undef LIB_SPEC\n #define LIB_SPEC \"\\\n   %{pg:-lgmon} \\\n-  %{!mno-cygwin:-lcygwin} \\\n-  %{mno-cygwin:%{mthreads:-lmingwthrd} -lmingw32} \\\n+  -lcygwin \\\n   %{mwindows:-lgdi32 -lcomdlg32} \\\n   -ladvapi32 -lshell32 -luser32 -lkernel32\"\n \n@@ -108,7 +101,7 @@ along with GCC; see the file COPYING3.  If not see\n #define CXX_WRAP_SPEC_OPT \"muse-libstdc-wrappers\"\n #endif\n \n-#define CXX_WRAP_SPEC \"%{!mno-cygwin:%{\" CXX_WRAP_SPEC_OPT \":\" CXX_WRAP_SPEC_LIST \"}}\"\n+#define CXX_WRAP_SPEC \"%{\" CXX_WRAP_SPEC_OPT \":\" CXX_WRAP_SPEC_LIST \"}\"\n \n #else /* !defined (USE_CYGWIN_LIBSTDCXX_WRAPPERS)  */\n \n@@ -123,165 +116,8 @@ along with GCC; see the file COPYING3.  If not see\n   %{shared: %{mdll: %eshared and mdll are not compatible}} \\\n   %{shared: --shared} %{mdll:--dll} \\\n   %{static:-Bstatic} %{!static:-Bdynamic} \\\n-  %{shared|mdll: --enable-auto-image-base -e \\\n-    %{mno-cygwin:_DllMainCRTStartup@12} \\\n-    %{!mno-cygwin:__cygwin_dll_entry@12}}\\\n-  %{!mno-cygwin:--dll-search-prefix=cyg -tsaware}\"\n-\n-/* Allocate space for all of the machine-spec-specific stuff.\n-   Allocate enough space for cygwin -> mingw32  munging plus\n-   possible addition of \"/mingw\".  */\n-\n-#ifndef CYGWIN_MINGW_SUBDIR\n-#define CYGWIN_MINGW_SUBDIR \"/mingw\"\n-#endif\n-#define CYGWIN_MINGW_SUBDIR_LEN (sizeof (CYGWIN_MINGW_SUBDIR) - 1)\n-\n-#ifdef GPLUSPLUS_INCLUDE_DIR\n-char cygwin_gplusplus_include_dir[sizeof (GPLUSPLUS_INCLUDE_DIR) + 1\n-\t\t\t\t  + (CYGWIN_MINGW_SUBDIR_LEN)]\n-  = GPLUSPLUS_INCLUDE_DIR;\n-#undef GPLUSPLUS_INCLUDE_DIR\n-#define GPLUSPLUS_INCLUDE_DIR ((const char *) cygwin_gplusplus_include_dir)\n-#ifndef GEN_CVT_ARRAY\n-#define GEN_CVT_ARRAY\n-#endif\n-#endif\n-\n-#ifdef GPLUSPLUS_TOOL_INCLUDE_DIR\n-char cygwin_gplusplus_tool_include_dir[sizeof (GPLUSPLUS_TOOL_INCLUDE_DIR) + 1\n-\t\t\t\t       + CYGWIN_MINGW_SUBDIR_LEN]\n-  = GPLUSPLUS_TOOL_INCLUDE_DIR;\n-#undef GPLUSPLUS_TOOL_INCLUDE_DIR\n-#define GPLUSPLUS_TOOL_INCLUDE_DIR ((const char *) cygwin_gplusplus_tool_include_dir)\n-#ifndef GEN_CVT_ARRAY\n-#define GEN_CVT_ARRAY\n-#endif\n-#endif\n-\n-#ifdef GPLUSPLUS_BACKWARD_INCLUDE_DIR\n-char cygwin_gplusplus_backward_include_dir[sizeof (GPLUSPLUS_BACKWARD_INCLUDE_DIR)  + 1\n-\t\t\t\t\t   + CYGWIN_MINGW_SUBDIR_LEN]\n-  = GPLUSPLUS_BACKWARD_INCLUDE_DIR;\n-#undef GPLUSPLUS_BACKWARD_INCLUDE_DIR\n-#define GPLUSPLUS_BACKWARD_INCLUDE_DIR ((const char *) cygwin_gplusplus_backward_include_dir)\n-#ifndef GEN_CVT_ARRAY\n-#define GEN_CVT_ARRAY\n-#endif\n-#endif\n-\n-#ifdef LOCAL_INCLUDE_DIR\n-char cygwin_local_include_dir[sizeof (LOCAL_INCLUDE_DIR)  + 1\n-\t\t\t      + CYGWIN_MINGW_SUBDIR_LEN]\n-  = LOCAL_INCLUDE_DIR;\n-#undef LOCAL_INCLUDE_DIR\n-#define LOCAL_INCLUDE_DIR ((const char *) cygwin_local_include_dir)\n-#ifndef GEN_CVT_ARRAY\n-#define GEN_CVT_ARRAY\n-#endif\n-#endif\n-\n-#ifdef CROSS_INCLUDE_DIR\n-char cygwin_cross_include_dir[sizeof (CROSS_INCLUDE_DIR) + 1\n-\t\t\t      + CYGWIN_MINGW_SUBDIR_LEN]\n-  = CROSS_INCLUDE_DIR;\n-#undef CROSS_INCLUDE_DIR\n-#define CROSS_INCLUDE_DIR ((const char *) cygwin_cross_include_dir)\n-#ifndef GEN_CVT_ARRAY\n-#define GEN_CVT_ARRAY\n-#endif\n-#endif\n-\n-#ifdef TOOL_INCLUDE_DIR\n-char cygwin_tool_include_dir[sizeof (TOOL_INCLUDE_DIR) + 1\n-\t\t\t     + CYGWIN_MINGW_SUBDIR_LEN]\n-  = TOOL_INCLUDE_DIR;\n-#undef TOOL_INCLUDE_DIR\n-#define TOOL_INCLUDE_DIR ((const char *) cygwin_tool_include_dir)\n-\n-#ifndef CROSS_DIRECTORY_STRUCTURE\n-#undef STANDARD_INCLUDE_DIR\n-#define STANDARD_INCLUDE_DIR \"/usr/include\"\n-char cygwin_standard_include_dir[sizeof (STANDARD_INCLUDE_DIR) + 1\n-\t\t\t\t + CYGWIN_MINGW_SUBDIR_LEN]\n-  = STANDARD_INCLUDE_DIR;\n-#undef STANDARD_INCLUDE_DIR\n-#define STANDARD_INCLUDE_DIR ((const char *) cygwin_standard_include_dir)\n-#endif\n-\n-#ifndef GEN_CVT_ARRAY\n-#define GEN_CVT_ARRAY\n-#endif\n-#endif\n-\n-#ifndef GEN_CVT_ARRAY\n-extern char *cvt_to_mingw[];\n-#else\n-char *cvt_to_mingw[] =\n-  {\n-#ifdef GPLUSPLUS_INCLUDE_DIR\n-    cygwin_gplusplus_include_dir,\n-#endif\n-\n-#ifdef GPLUSPLUS_TOOL_INCLUDE_DIR\n-    cygwin_gplusplus_tool_include_dir,\n-#endif\n-\n-#ifdef GPLUSPLUS_BACKWARD_INCLUDE_DIR\n-    cygwin_gplusplus_backward_include_dir,\n-#endif\n-\n-#ifdef LOCAL_INCLUDE_DIR\n-    cygwin_local_include_dir,\n-#endif\n-\n-#ifdef CROSS_INCLUDE_DIR\n-    cygwin_cross_include_dir,\n-#endif\n-\n-#ifdef TOOL_INCLUDE_DIR\n-    cygwin_tool_include_dir,\n-#endif\n-\n-#ifdef STANDARD_INCLUDE_DIR\n-    cygwin_standard_include_dir,\n-#endif\n-\n-    NULL\n-  };\n-#undef GEN_CVT_ARRAY\n-#endif /*GEN_CVT_ARRAY*/\n-\n-void mingw_scan (unsigned int, const struct cl_decoded_option *,\n-\t\t const char **);\n-#if 1\n-#define GCC_DRIVER_HOST_INITIALIZATION \\\n-do \\\n-{ \\\n-  mingw_scan (decoded_options_count, decoded_options, &spec_machine);\t\\\n-  } \\\n-while (0)\n-#else\n-#define GCC_DRIVER_HOST_INITIALIZATION \\\n-do \\\n-{ \\\n-  char *cprefix = concat (tooldir_base_prefix, spec_machine, \\\n-\t\t\t  dir_separator_str, NULL); \\\n-  if (!IS_ABSOLUTE_PATH (cprefix)) \\\n-    cprefix = concat (standard_exec_prefix, spec_machine, dir_separator_str, \\\n-\t\t      spec_version, dir_separator_str, tooldir_prefix, NULL); \\\n-  add_prefix (&exec_prefixes,\\\n-\t      concat (cprefix, \"../../../../\", spec_machine, \"/bin/\", NULL), \\\n-\t      \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL); \\\n-  add_prefix (&exec_prefixes, cprefix, \\\n-\t      \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL); \\\n-  add_prefix (&startfile_prefixes,\\\n-\t      concat (standard_startfile_prefix, \"w32api\", NULL),\\\n-\t      \"GCC\", PREFIX_PRIORITY_LAST, 0, NULL);\\\n-  mingw_scan (decoded_options_count, decoded_options, &spec_machine);\t\\\n-  } \\\n-while (0)\n-#endif\n+  %{shared|mdll: --enable-auto-image-base -e __cygwin_dll_entry@12} \\\n+  --dll-search-prefix=cyg -tsaware\"\n \n /* Binutils does not handle weak symbols from dlls correctly.  For now,\n    do not use them unnecessarily in gthr-posix.h.  */"}, {"sha": "99d9d8f82439cbc999a4908a67747b9444de1a3d", "filename": "gcc/config/i386/cygwin1.c", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4c37c1616cacf3e879e53eaefb675746173ebd7/gcc%2Fconfig%2Fi386%2Fcygwin1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4c37c1616cacf3e879e53eaefb675746173ebd7/gcc%2Fconfig%2Fi386%2Fcygwin1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin1.c?ref=a4c37c1616cacf3e879e53eaefb675746173ebd7", "patch": "@@ -1,63 +0,0 @@\n-/* Helper routines for cygwin-specific command-line parsing.\n-   Contributed by Christopher Faylor (cgf@redhat.com)\n-   Copyright 2003, 2005, 2007, 2008 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"opts.h\"\n-#include <string.h>\n-\n-void\n-mingw_scan (unsigned int decoded_options_count,\n-\t    const struct cl_decoded_option *decoded_options,\n-            const char **spec_machine)\n-{\n-  unsigned int i;\n-  putenv (xstrdup (\"GCC_CYGWIN_MINGW=0\"));\n- \n-  for (i = 1; i < decoded_options_count; i++)\n-    switch (decoded_options[i].opt_index)\n-      {\n-      case OPT_mwin32:\n-\tif (decoded_options[i].value == 0)\n-\t  putenv (xstrdup (\"GCC_CYGWIN_WIN32=0\"));\n-\telse\n-\t  putenv (xstrdup (\"GCC_CYGWIN_WIN32=1\"));\n-\tbreak;\n-\n-      case OPT_mcygwin:\n-\tif (decoded_options[i].value == 0)\n-\t  {\n-\t    char *p = strstr (*spec_machine, \"-cygwin\");\n-\t    if (p)\n-\t      {\n-\t\tint len = p - *spec_machine;\n-\t\tchar *s = XNEWVEC (char, strlen (*spec_machine) + 3);\n-\t\tmemcpy (s, *spec_machine, len);\n-\t\tstrcpy (s + len, \"-mingw32\");\n-\t\t*spec_machine = s;\n-\t      }\n-\t    putenv (xstrdup (\"GCC_CYGWIN_MINGW=1\"));\n-\t  }\n-\tbreak;\n-      }\n-  return;\n-}"}, {"sha": "c48e2a52c7225fc81013806ff841c51b5681ae83", "filename": "gcc/config/i386/cygwin2.c", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4c37c1616cacf3e879e53eaefb675746173ebd7/gcc%2Fconfig%2Fi386%2Fcygwin2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4c37c1616cacf3e879e53eaefb675746173ebd7/gcc%2Fconfig%2Fi386%2Fcygwin2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin2.c?ref=a4c37c1616cacf3e879e53eaefb675746173ebd7", "patch": "@@ -1,66 +0,0 @@\n-/* Helper routines for cygwin-specific command-line parsing.\n-   Contributed by Christopher Faylor (cgf@redhat.com)\n-   Copyright 2003, 2007 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-\n-#include \"safe-ctype.h\"\n-#include <string.h>\n-\n-/*\n-static void remove_w32api (void);\n-*/\n-static void add_mingw (void);\n-static void set_mingw (void) __attribute__ ((constructor));\n-\n-static void\n-add_mingw (void)\n-{\n-  char **av;\n-  char *p;\n-  for (av = cvt_to_mingw; *av; av++)\n-    {\n-      int sawcygwin = 0;\n-      while ((p = strstr (*av, \"-cygwin\")))\n-\t{\n-\t  char *over = p + sizeof (\"-cygwin\") - 1;\n-\t  memmove (over + 1, over, strlen (over));\n-\t  memcpy (p, \"-mingw32\", sizeof(\"-mingw32\") - 1);\n-\t  p = ++over;\n-\t  while (ISALNUM (*p))\n-\t    p++;\n-\t  strcpy (over, p);\n-\t  sawcygwin = 1;\n-\t}\n-      if (!sawcygwin && !strstr (*av, \"mingw\"))\n-\tstrcat (*av, CYGWIN_MINGW_SUBDIR);\n-    }\n-}\n-\n-\n-static void\n-set_mingw (void)\n-{\n-  char *env = getenv (\"GCC_CYGWIN_MINGW\");\n-  if (env && *env == '1')\n-    add_mingw ();\n-}"}, {"sha": "f5eda91c0ef275a7a175db7f5d36f1ba4467d488", "filename": "gcc/config/i386/t-cygwin", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3edeb30d044a4852881c34229e618b34f95b0d9e/gcc%2Fconfig%2Fi386%2Ft-cygwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3edeb30d044a4852881c34229e618b34f95b0d9e/gcc%2Fconfig%2Fi386%2Ft-cygwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-cygwin?ref=3edeb30d044a4852881c34229e618b34f95b0d9e", "patch": "@@ -23,16 +23,6 @@\n LIBGCC2_INCLUDES += -I$(srcdir)/../winsup/include \\\n \t-I$(srcdir)/../winsup/cygwin/include\n \n-cygwin1.o: $(srcdir)/config/i386/cygwin1.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(TM_H) $(TM_P_H) opts.h\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t$(srcdir)/config/i386/cygwin1.c\n-\n-cygwin2.o: $(srcdir)/config/i386/cygwin2.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(TM_H) $(TM_P_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t$(srcdir)/config/i386/cygwin2.c\n-\n # Cygwin-specific parts of LIB_SPEC\n SHLIB_LC = -lcygwin -ladvapi32 -lshell32 -luser32 -lkernel32\n "}, {"sha": "776fdd0a6010d18fd1b02da2e761a275713e9457", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3edeb30d044a4852881c34229e618b34f95b0d9e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3edeb30d044a4852881c34229e618b34f95b0d9e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3edeb30d044a4852881c34229e618b34f95b0d9e", "patch": "@@ -17396,22 +17396,6 @@ instructing the linker to set the PE header subsystem type\n required for console applications.\n This is the default behavior for Cygwin and MinGW targets.\n \n-@item -mcygwin\n-@opindex mcygwin\n-This option is available for Cygwin targets.  It specifies that\n-the Cygwin internal interface is to be used for predefined\n-preprocessor macros, C runtime libraries and related linker\n-paths and options.  For Cygwin targets this is the default behavior.\n-This option is deprecated and will be removed in a future release.\n-\n-@item -mno-cygwin\n-@opindex mno-cygwin\n-This option is available for Cygwin targets.  It specifies that\n-the MinGW internal interface is to be used instead of Cygwin's, by\n-setting MinGW-related predefined macros and linker paths and default\n-library options.\n-This option is deprecated and will be removed in a future release.\n-\n @item -mdll\n @opindex mdll\n This option is available for Cygwin and MinGW targets.  It"}]}