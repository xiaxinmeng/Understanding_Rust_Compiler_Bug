{"sha": "ffb9f2f152d6ba3dc88802669466fd87744c12f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZiOWYyZjE1MmQ2YmEzZGM4ODgwMjY2OTQ2NmZkODc3NDRjMTJmNA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-09-10T20:03:36Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-09-10T20:03:36Z"}, "message": "protoize.c: Remove various __STDC__ and POSIX hacks.\n\n\t* protoize.c: Remove various __STDC__ and POSIX hacks.  Don't\n\tinclude directory headers.  Don't define strrchr.  Don't provide\n\tmy_* replacement functions.  Prefer PTR over `pointer_type'.\n\tDon't prototype system functions.  Don't redefine getopt.\n\n\t(shortpath, fancy_abort, notice, savestring, dupnstr, substr,\n\tsafe_read, safe_write, save_pointers, restore_pointers,\n\tis_id_char, in_system_include_dir, directory_specified_p,\n\tfile_excluded_p, unexpand_if_needed, abspath, check_aux_info,\n\tfind_corresponding_lparen, referenced_file_is_newer,\n\tsave_def_or_dec, munge_compile_params, gen_aux_info_file,\n\tprocess_aux_info_file, identify_lineno, check_source,\n\tseek_to_line, forward_to_next_token_char, output_bytes,\n\toutput_string, output_up_to, other_variable_style_function,\n\tfind_rightmost_formals_list, do_cleaning, careful_find_l_paren,\n\tdo_processing, is_syscalls_file, rename_c_file, find_extern_def,\n\tfind_static_definition, connect_defs_and_decs, add_local_decl,\n\tadd_global_decls, needs_to_be_converted, visit_each_hash_node,\n\tadd_symbol, lookup, free_def_dec, find_file, reverse_def_dec_list,\n\tedit_fn_declaration, edit_formals_lists, edit_fn_definition,\n\tscan_for_missed_items, edit_file, string_list_cons): Add static\n\tprototypes.\n\t(standard_exec_prefix, target_machine, target_version,\n\tdefault_syscalls_dir, string_list, string_list_cons, find_file,\n\tdo_cleaning): Constify a char*.\n\t(safe_read, safe_write): Use PTR, not a char*.\n\t(is_id_char): Take an int, not a char.\n\t(main): Add prototype.  Call return, not exit.\n\nFrom-SVN: r29274", "tree": {"sha": "ad8a25a96833c3d1fbc87acd60e97f76a8670f87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad8a25a96833c3d1fbc87acd60e97f76a8670f87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffb9f2f152d6ba3dc88802669466fd87744c12f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb9f2f152d6ba3dc88802669466fd87744c12f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb9f2f152d6ba3dc88802669466fd87744c12f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb9f2f152d6ba3dc88802669466fd87744c12f4/comments", "author": null, "committer": null, "parents": [{"sha": "944b921044d086fa5b6ed57e53605ff811526b67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944b921044d086fa5b6ed57e53605ff811526b67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/944b921044d086fa5b6ed57e53605ff811526b67"}], "stats": {"total": 311, "additions": 138, "deletions": 173}, "files": [{"sha": "0e52036b0b46364d2844081ad15ebcd8910c9ccb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9f2f152d6ba3dc88802669466fd87744c12f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9f2f152d6ba3dc88802669466fd87744c12f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffb9f2f152d6ba3dc88802669466fd87744c12f4", "patch": "@@ -1,3 +1,34 @@\n+Fri Sep 10 16:01:23 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* protoize.c: Remove various __STDC__ and POSIX hacks.  Don't\n+\tinclude directory headers.  Don't define strrchr.  Don't provide\n+\tmy_* replacement functions.  Prefer PTR over `pointer_type'.\n+\tDon't prototype system functions.  Don't redefine getopt.\n+\n+\t(shortpath, fancy_abort, notice, savestring, dupnstr, substr,\n+\tsafe_read, safe_write, save_pointers, restore_pointers,\n+\tis_id_char, in_system_include_dir, directory_specified_p,\n+\tfile_excluded_p, unexpand_if_needed, abspath, check_aux_info,\n+\tfind_corresponding_lparen, referenced_file_is_newer,\n+\tsave_def_or_dec, munge_compile_params, gen_aux_info_file,\n+\tprocess_aux_info_file, identify_lineno, check_source,\n+\tseek_to_line, forward_to_next_token_char, output_bytes,\n+\toutput_string, output_up_to, other_variable_style_function,\n+\tfind_rightmost_formals_list, do_cleaning, careful_find_l_paren,\n+\tdo_processing, is_syscalls_file, rename_c_file, find_extern_def,\n+\tfind_static_definition, connect_defs_and_decs, add_local_decl,\n+\tadd_global_decls, needs_to_be_converted, visit_each_hash_node,\n+\tadd_symbol, lookup, free_def_dec, find_file, reverse_def_dec_list,\n+\tedit_fn_declaration, edit_formals_lists, edit_fn_definition,\n+\tscan_for_missed_items, edit_file, string_list_cons): Add static\n+\tprototypes.\n+\t(standard_exec_prefix, target_machine, target_version,\n+\tdefault_syscalls_dir, string_list, string_list_cons, find_file,\n+\tdo_cleaning): Constify a char*.\n+\t(safe_read, safe_write): Use PTR, not a char*.\n+\t(is_id_char): Take an int, not a char.\n+\t(main): Add prototype.  Call return, not exit.\n+\n Fri Sep 10 16:48:26 1999  Andrew Haley  <aph@cygnus.com>\n \n \t* tree.c (type_hash_lookup): Check for equal TYPE_ALIGN fields"}, {"sha": "04aa7cfd5e982c98bc069ad4a9c231f66ba0e2ae", "filename": "gcc/protoize.c", "status": "modified", "additions": 107, "deletions": 173, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9f2f152d6ba3dc88802669466fd87744c12f4/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9f2f152d6ba3dc88802669466fd87744c12f4/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=ffb9f2f152d6ba3dc88802669466fd87744c12f4", "patch": "@@ -18,147 +18,59 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* Any reasonable C++ compiler should have all of the same features\n-   as __STDC__ plus more, so make sure that __STDC__ is defined if\n-   __cplusplus is defined.  */\n-\n-#if defined(__cplusplus) && !defined(__STDC__)\n-#define __STDC__ 1\n-#endif /* defined(__cplusplus) && !defined(__STDC__) */\n-\n-#if defined(__GNUC__) || defined (__GNUG__)\n-#define VOLATILE volatile\n-#else\n-#define VOLATILE\n-#endif\n-\n-#ifndef __STDC__\n-#define const\n-#define volatile\n-#endif\n-\n #include \"config.h\"\n-\n-#if 0\n-/* Users are not supposed to use _POSIX_SOURCE to say the\n-   system is a POSIX system.  That is not what _POSIX_SOURCE means! -- rms  */ \n-/* If the user asked for POSIX via _POSIX_SOURCE, turn on POSIX code.  */\n-#if defined(_POSIX_SOURCE) && !defined(POSIX)\n-#define POSIX\n-#endif\n-#endif /* 0 */\n-\n-#ifdef POSIX /* We should be able to define _POSIX_SOURCE unconditionally,\n-\t\tbut some systems respond in buggy ways to it,\n-\t\tincluding SunOS 4.1.1.  Which we don't classify as POSIX.  */\n-/* In case this is a POSIX system with an ANSI C compiler,\n-   ask for definition of all POSIX facilities.  */\n-#undef _POSIX_SOURCE\n-#define _POSIX_SOURCE\n-#endif\n-\n #include \"system.h\"\n #include \"intl.h\"\n-#undef abort\n \n-#if ! defined (_WIN32) || defined (__CYGWIN__) || defined (_UWIN)\n-#if defined(POSIX) || defined(CONCURRENT)\n-#include <dirent.h>\n-#else\n-#include <sys/dir.h>\n-#endif\n-#endif\n #include <setjmp.h>\n+#include <signal.h>\n+#undef abort\n \n-/* Some systems like Linux don't declare rindex if _POSIX_SOURCE is declared,\n-   but it normally does declare it.  This means that configure thinks we don't\n-   need to declare it.  Favor using strrchr if it is available.  */\n-\n-#ifndef strrchr\n-#ifndef HAVE_STRRCHR\n-#ifdef  HAVE_RINDEX\n-#define strrchr rindex\n-#endif\n-#endif\n-#endif\n-\n-/* Include getopt.h for the sake of getopt_long.\n-   We don't need the declaration of getopt, and it could conflict\n-   with something from a system header file, so effectively nullify that.  */\n-#define getopt getopt_loser\n+/* Include getopt.h for the sake of getopt_long. */\n #include \"getopt.h\"\n-#undef getopt\n \n extern char *version_string;\n \n-/* Systems which are compatible only with POSIX 1003.1-1988 (but *not*\n-   with POSIX 1003.1-1990), e.g. Ultrix 4.2, might not have\n-   const qualifiers in the prototypes in the system include files.\n-   Unfortunately, this can lead to GCC issuing lots of warnings for\n-   calls to the following functions.  To eliminate these warnings we\n-   provide the following #defines.  */\n-\n-#define my_access(file,flag)\taccess((char *)file, flag)\n-#define my_stat(file,pkt)\tstat((char *)file, pkt)\n-#ifdef __MINGW32__\n-#define my_link(file1, file2)\t-1\n-#else\n-#define my_link(file1, file2)\tlink((char *)file1, (char *)file2)\n-#endif\n-#define my_unlink(file)\t\tunlink((char *)file)\n-#define my_open(file, mode, flag)\topen((char *)file, mode, flag)\n-#define my_chmod(file, mode)\tchmod((char *)file, mode)\n-\n static void usage PARAMS ((void)) ATTRIBUTE_NORETURN;\n static void aux_info_corrupted PARAMS ((void)) ATTRIBUTE_NORETURN;\n static void declare_source_confusing PARAMS ((const char *)) ATTRIBUTE_NORETURN;\n-\n-/* Aliases for pointers to void.\n-   These were made to facilitate compilation with old brain-dead DEC C\n-   compilers which didn't properly grok `void*' types.  */\n-\n-typedef PTR pointer_type;\n-typedef const PTR const_pointer_type;\n-\n-#if defined(POSIX)\n-\n-#include <signal.h>\n-\n-#else /* !defined(POSIX) */\n-\n-/* Declaring stat or __flsbuf with a prototype\n-   causes conflicts with system headers on some systems.  */\n-\n-#if 0 /* These conflict with stdio.h on some systems.  */\n-extern int creat ();\n-extern int fprintf (FILE *, const char *, ...);\n-extern int printf (const char *, ...);\n-extern int open (const char *, int, ...);\n-extern int read ();\n-extern int write ();\n-#endif /* 0 */\n-extern int close ();\n-extern int fflush ();\n-extern int atoi ();\n-extern int puts ();\n-#ifndef fputs\t/* This may have been #defined by \"system.h\".  */\n-extern int fputs ();\n-#endif\n-#ifndef fputc   /* some systems define this as a macro. */\n-extern int fputc ();\n-#endif\n-extern int unlink ();\n-extern int access ();\n-\n-#if 0 /* size_t from sys/types.h may fail to match GCC.\n-\t If so, we would get a warning from this.  */\n-extern size_t   strlen ()\n-#endif\n-\n-#endif /* !defined (POSIX) */\n+static const char *shortpath PARAMS ((const char *, const char *));\n+extern void fancy_abort PARAMS ((void)) ATTRIBUTE_NORETURN;\n+static void notice PARAMS ((const char *, ...)) ATTRIBUTE_PRINTF_1;\n+static char *savestring PARAMS ((const char *, unsigned int));\n+static char *dupnstr PARAMS ((const char *, size_t));\n+static const char *substr PARAMS ((const char *, const char * const));\n+static int safe_read PARAMS ((int, PTR, int));\n+static void safe_write PARAMS ((int, PTR, int, const char *));\n+static void save_pointers PARAMS ((void));\n+static void restore_pointers PARAMS ((void));\n+static int is_id_char PARAMS ((int));\n+static int in_system_include_dir PARAMS ((const char *));\n+static int directory_specified_p PARAMS ((const char *));\n+static int file_excluded_p PARAMS ((const char *));\n+static char *unexpand_if_needed PARAMS ((const char *));\n+static char *abspath PARAMS ((const char *, const char *));\n+static void check_aux_info PARAMS ((int));\n+static const char *find_corresponding_lparen PARAMS ((const char *));\n+static int referenced_file_is_newer PARAMS ((const char *, time_t));\n+static void save_def_or_dec PARAMS ((const char *, int));\n+static void munge_compile_params PARAMS ((const char *));\n+static int gen_aux_info_file PARAMS ((const char *));\n+static void process_aux_info_file PARAMS ((const char *, int, int));\n+static int identify_lineno PARAMS ((const char *));\n+static void check_source PARAMS ((int, const char *));\n+static const char *seek_to_line PARAMS ((int));\n+static const char *forward_to_next_token_char PARAMS ((const char *));\n+static void output_bytes PARAMS ((const char *, size_t));\n+static void output_string PARAMS ((const char *));\n+static void output_up_to PARAMS ((const char *));\n+static int other_variable_style_function PARAMS ((const char *));\n+static const char *find_rightmost_formals_list PARAMS ((const char *));\n+static void do_cleaning PARAMS ((char *, const char *));\n+static const char *careful_find_l_paren PARAMS ((const char *));\n+static void do_processing PARAMS ((void));\n \n /* Look for these where the `const' qualifier is intentionally cast aside.  */\n-\n #define NONCONST\n \n /* Define a default place to find the SYSCALLS.X file.  */\n@@ -169,9 +81,9 @@ extern size_t   strlen ()\n #define STANDARD_EXEC_PREFIX \"/usr/local/lib/gcc-lib/\"\n #endif /* !defined STANDARD_EXEC_PREFIX */\n \n-static char *standard_exec_prefix = STANDARD_EXEC_PREFIX;\n-static char *target_machine = DEFAULT_TARGET_MACHINE;\n-static char *target_version = DEFAULT_TARGET_VERSION;\n+static const char * const standard_exec_prefix = STANDARD_EXEC_PREFIX;\n+static const char * const target_machine = DEFAULT_TARGET_MACHINE;\n+static const char * const target_version = DEFAULT_TARGET_VERSION;\n \n #ifndef GET_ENV_PATH_LIST\n #define GET_ENV_PATH_LIST(VAR,NAME)\tdo { (VAR) = getenv (NAME); } while (0)\n@@ -197,7 +109,7 @@ static const char syscalls_filename[] = \"SYSCALLS.c\";\n \n /* Default place to find the above file.  */\n \n-static char * default_syscalls_dir;\n+static const char * default_syscalls_dir;\n \n /* Variable to hold the complete absolutized filename of the SYSCALLS.c.X\n    file.  */\n@@ -288,10 +200,13 @@ struct default_include { const char *fname;\n /* Datatype for lists of directories or filenames.  */\n struct string_list\n {\n-  char *name;\n+  const char *name;\n   struct string_list *next;\n };\n \n+static struct string_list *string_list_cons PARAMS ((const char *,\n+\t\t\t\t\t\t     struct string_list *));\n+\n /* List of directories in which files should be converted.  */\n \n struct string_list *directory_list;\n@@ -336,6 +251,31 @@ typedef struct def_dec_info_struct def_dec_info;\n typedef struct file_info_struct file_info;\n typedef struct f_list_chain_item_struct f_list_chain_item;\n \n+#ifndef UNPROTOIZE\n+static int is_syscalls_file PARAMS ((const file_info *));\n+static void rename_c_file PARAMS ((const hash_table_entry *));\n+static const def_dec_info *find_extern_def PARAMS ((const def_dec_info *,\n+\t\t\t\t\t\t    const def_dec_info *));\n+static const def_dec_info *find_static_definition PARAMS ((const def_dec_info *));\n+static void connect_defs_and_decs PARAMS ((const hash_table_entry *));\n+static void add_local_decl PARAMS ((const def_dec_info *, const char *));\n+static void add_global_decls PARAMS ((const file_info *, const char *));\n+#endif /* ! UNPROTOIZE */\n+static int needs_to_be_converted PARAMS ((const file_info *));\n+static void visit_each_hash_node PARAMS ((const hash_table_entry *,\n+\t\t\t\t\t  void (*)(const hash_table_entry *)));\n+static hash_table_entry *add_symbol PARAMS ((hash_table_entry *, const char *));\n+static hash_table_entry *lookup PARAMS ((hash_table_entry *, const char *));\n+static void free_def_dec PARAMS ((def_dec_info *));\n+static file_info *find_file PARAMS ((const char *, int));\n+static void reverse_def_dec_list PARAMS ((const hash_table_entry *));\n+static void edit_fn_declaration PARAMS ((const def_dec_info *, const char *));\n+static int edit_formals_lists PARAMS ((const char *, unsigned int,\n+\t\t\t\t       const def_dec_info *));\n+static void edit_fn_definition PARAMS ((const def_dec_info *, const char *));\n+static void scan_for_missed_items PARAMS ((const file_info *));\n+static void edit_file PARAMS ((const hash_table_entry *));\n+\n /* In the struct below, note that the \"_info\" field has two different uses\n    depending on the type of hash table we are in (i.e. either the filenames\n    hash table or the function names hash table).  In the filenames hash table\n@@ -573,14 +513,8 @@ static const char * saved_clean_read_ptr;\n    attempt at editing will succeed.  */\n \n static char * saved_repl_write_ptr;\n-\n-/* Forward declaration.  */\n-\n-static const char *shortpath ();\n \f\n /* Translate and output an error message.  */\n-static void notice\t\t\tPARAMS ((const char *, ...))\n-  ATTRIBUTE_PRINTF_1;\n static void\n notice VPARAMS ((const char *msgid, ...))\n {\n@@ -667,7 +601,7 @@ substr (s1, s2)\n static int\n safe_read (desc, ptr, len)\n      int desc;\n-     char *ptr;\n+     PTR ptr;\n      int len;\n {\n   int left = len;\n@@ -695,9 +629,9 @@ safe_read (desc, ptr, len)\n static void\n safe_write (desc, ptr, len, out_fname)\n      int desc;\n-     char *ptr;\n+     PTR ptr;\n      int len;\n-     char *out_fname;\n+     const char *out_fname;\n {\n   while (len > 0) {\n     int written = write (desc, ptr, len);\n@@ -719,7 +653,7 @@ safe_write (desc, ptr, len, out_fname)\n \f\n /* Get setup to recover in case the edit we are about to do goes awry.  */\n \n-void\n+static void\n save_pointers ()\n {\n   saved_clean_read_ptr = clean_read_ptr;\n@@ -729,7 +663,7 @@ save_pointers ()\n /* Call this routine to recover our previous state whenever something looks\n    too confusing in the source code we are trying to edit.  */\n \n-void\n+static void\n restore_pointers ()\n {\n   clean_read_ptr = saved_clean_read_ptr;\n@@ -740,7 +674,7 @@ restore_pointers ()\n \n static int\n is_id_char (ch)\n-     unsigned char ch;\n+     int ch;\n {\n   return (ISALNUM (ch) || (ch == '_') || (ch == '$'));\n }\n@@ -791,7 +725,7 @@ file_could_be_converted (const char *path)\n {\n   char *const dir_name = (char *) alloca (strlen (path) + 1);\n \n-  if (my_access (path, R_OK))\n+  if (access (path, R_OK))\n     return 0;\n \n   {\n@@ -805,7 +739,7 @@ file_could_be_converted (const char *path)\n       abort ();  /* Should have been an absolutized filename.  */\n   }\n \n-  if (my_access (path, W_OK))\n+  if (access (path, W_OK))\n     return 0;\n \n   return 1;\n@@ -839,23 +773,23 @@ file_normally_convertible (const char *path)\n       abort ();  /* Should have been an absolutized filename.  */\n   }\n \n-  if (my_access (path, R_OK))\n+  if (access (path, R_OK))\n     {\n       if (!quiet_flag)\n         notice (\"%s: warning: no read access for file `%s'\\n\",\n \t\tpname, shortpath (NULL, path));\n       return 0;\n     }\n \n-  if (my_access (path, W_OK))\n+  if (access (path, W_OK))\n     {\n       if (!quiet_flag)\n         notice (\"%s: warning: no write access for file `%s'\\n\",\n \t\tpname, shortpath (NULL, path));\n       return 0;\n     }\n \n-  if (my_access (dir_name, W_OK))\n+  if (access (dir_name, W_OK))\n     {\n       if (!quiet_flag)\n         notice (\"%s: warning: no write access for dir containing `%s'\\n\",\n@@ -978,7 +912,7 @@ file_excluded_p (name)\n \n static struct string_list *\n string_list_cons (string, rest)\n-     char *string;\n+     const char *string;\n      struct string_list *rest;\n {\n   struct string_list *temp\n@@ -1001,7 +935,7 @@ string_list_cons (string, rest)\n static void\n visit_each_hash_node (hash_tab_p, func)\n      const hash_table_entry *hash_tab_p;\n-     void (*func)();\n+     void (*func) PARAMS ((const hash_table_entry *));\n {\n   const hash_table_entry *primary;\n \n@@ -1075,7 +1009,7 @@ static void\n free_def_dec (p)\n      def_dec_info *p;\n {\n-  free ((NONCONST pointer_type) p->ansi_decl);\n+  free ((NONCONST PTR) p->ansi_decl);\n \n #ifndef UNPROTOIZE\n   {\n@@ -1085,7 +1019,7 @@ free_def_dec (p)\n     for (curr = p->f_list_chain; curr; curr = next)\n       {\n         next = curr->chain_next;\n-        free ((NONCONST pointer_type) curr);\n+        free ((NONCONST PTR) curr);\n       }\n   }\n #endif /* !defined (UNPROTOIZE) */\n@@ -1378,7 +1312,7 @@ shortpath (cwd, filename)\n \n static file_info *\n find_file (filename, do_not_stat)\n-     char *filename;\n+     const char *filename;\n      int do_not_stat;\n {\n   hash_table_entry *hash_entry_p;\n@@ -1398,7 +1332,7 @@ find_file (filename, do_not_stat)\n         stat_buf.st_mtime = (time_t) 0;\n       else\n         {\n-          if (my_stat (filename, &stat_buf) == -1)\n+          if (stat (filename, &stat_buf) == -1)\n             {\n \t      int errno_val = errno;\n               notice (\"%s: %s: can't get status: %s\\n\",\n@@ -2076,7 +2010,7 @@ process_aux_info_file (base_source_filename, keep_it, is_syscalls)\n   /* Come here with must_create set to 1 if file is out of date.  */\n start_over: ;\n \n-  if (my_access (aux_info_filename, R_OK) == -1)\n+  if (access (aux_info_filename, R_OK) == -1)\n     {\n       if (errno == ENOENT)\n \t{\n@@ -2117,7 +2051,7 @@ start_over: ;\n \t  errors++;\n \t  return;\n \t}\n-      if (my_access (aux_info_filename, R_OK) == -1)\n+      if (access (aux_info_filename, R_OK) == -1)\n \t{\n \t  int errno_val = errno;\n \t  notice (\"%s: can't read aux info file `%s': %s\\n\",\n@@ -2133,7 +2067,7 @@ start_over: ;\n \n     /* Get some status information about this aux_info file.  */\n   \n-    if (my_stat (aux_info_filename, &stat_buf) == -1)\n+    if (stat (aux_info_filename, &stat_buf) == -1)\n       {\n \tint errno_val = errno;\n         notice (\"%s: can't get status of aux info file `%s': %s\\n\",\n@@ -2161,7 +2095,7 @@ start_over: ;\n \t   The code later on can fail to check the .c file\n \t   if it did not directly define any functions.  */\n \n-\tif (my_stat (base_source_filename, &stat_buf) == -1)\n+\tif (stat (base_source_filename, &stat_buf) == -1)\n \t  {\n \t    int errno_val = errno;\n \t    notice (\"%s: can't get status of aux info file `%s': %s\\n\",\n@@ -2183,7 +2117,7 @@ start_over: ;\n \n     /* Open the aux_info file.  */\n   \n-    if ((aux_info_file = my_open (aux_info_filename, O_RDONLY, 0444 )) == -1)\n+    if ((aux_info_file = open (aux_info_filename, O_RDONLY, 0444 )) == -1)\n       {\n \tint errno_val = errno;\n         notice (\"%s: can't open aux info file `%s' for reading: %s\\n\",\n@@ -2230,7 +2164,7 @@ start_over: ;\n      fails for some reason, don't even worry about it.  */\n \n   if (must_create && !keep_it)\n-    if (my_unlink (aux_info_filename) == -1)\n+    if (unlink (aux_info_filename) == -1)\n       {\n \tint errno_val = errno;\n \tnotice (\"%s: can't delete aux info file `%s': %s\\n\",\n@@ -2298,7 +2232,7 @@ start_over: ;\n               {\n                 free (aux_info_base);\n \t\tfree (aux_info_relocated_name);\n-                if (keep_it && my_unlink (aux_info_filename) == -1)\n+                if (keep_it && unlink (aux_info_filename) == -1)\n                   {\n \t\t    int errno_val = errno;\n                     notice (\"%s: can't delete file `%s': %s\\n\",\n@@ -2375,7 +2309,7 @@ rename_c_file (hp)\n   strcpy (new_filename, filename);\n   new_filename[last_char_index] = 'C';\n \n-  if (my_link (filename, new_filename) == -1)\n+  if (link (filename, new_filename) == -1)\n     {\n       int errno_val = errno;\n       notice (\"%s: warning: can't link file `%s' to `%s': %s\\n\",\n@@ -2385,7 +2319,7 @@ rename_c_file (hp)\n       return;\n     }\n \n-  if (my_unlink (filename) == -1)\n+  if (unlink (filename) == -1)\n     {\n       int errno_val = errno;\n       notice (\"%s: warning: can't delete file `%s': %s\\n\",\n@@ -3775,7 +3709,7 @@ edit_fn_definition (def_dec_p, clean_text_p)\n static void\n do_cleaning (new_clean_text_base, new_clean_text_limit)\n      char *new_clean_text_base;\n-     char *new_clean_text_limit;\n+     const char *new_clean_text_limit;\n {\n   char *scan_p;\n   int non_whitespace_since_newline = 0;\n@@ -4088,7 +4022,7 @@ edit_file (hp)\n   /* Find out the size (in bytes) of the original file.  */\n \n   /* The cast avoids an erroneous warning on AIX.  */\n-  if (my_stat ((char *)convert_filename, &stat_buf) == -1)\n+  if (stat (convert_filename, &stat_buf) == -1)\n     {\n       int errno_val = errno;\n       notice (\"%s: can't get status for file `%s': %s\\n\",\n@@ -4124,7 +4058,7 @@ edit_file (hp)\n \n     /* Open the file to be converted in READ ONLY mode.  */\n \n-    if ((input_file = my_open (convert_filename, O_RDONLY, 0444)) == -1)\n+    if ((input_file = open (convert_filename, O_RDONLY, 0444)) == -1)\n       {\n \tint errno_val = errno;\n         notice (\"%s: can't open file `%s' for reading: %s\\n\",\n@@ -4271,7 +4205,7 @@ edit_file (hp)\n   \n       strcpy (new_filename, convert_filename);\n       strcat (new_filename, save_suffix);\n-      if (my_link (convert_filename, new_filename) == -1)\n+      if (link (convert_filename, new_filename) == -1)\n         {\n \t  int errno_val = errno;\n \t  if (errno_val == EEXIST)\n@@ -4294,7 +4228,7 @@ edit_file (hp)\n         }\n     }\n \n-  if (my_unlink (convert_filename) == -1)\n+  if (unlink (convert_filename) == -1)\n     {\n       int errno_val = errno;\n       notice (\"%s: can't delete file `%s': %s\\n\",\n@@ -4337,7 +4271,7 @@ edit_file (hp)\n   /* Change the mode of the output file to match the original file.  */\n \n   /* The cast avoids an erroneous warning on AIX.  */\n-  if (my_chmod ((char *)convert_filename, stat_buf.st_mode) == -1)\n+  if (chmod (convert_filename, stat_buf.st_mode) == -1)\n     {\n       int errno_val = errno;\n       notice (\"%s: can't change mode of file `%s': %s\\n\",\n@@ -4481,6 +4415,8 @@ static struct option longopts[] =\n   {0, 0, 0, 0}\n };\n \n+extern int main PARAMS ((int, char **const));\n+\n int\n main (argc, argv)\n      int argc;\n@@ -4504,7 +4440,7 @@ main (argc, argv)\n     {\n       notice (\"%s: cannot get working directory: %s\\n\",\n \t      pname, xstrerror(errno));\n-      exit (FATAL_EXIT_CODE);\n+      return (FATAL_EXIT_CODE);\n     }\n \n   /* By default, convert the files in the current directory.  */\n@@ -4631,7 +4567,5 @@ main (argc, argv)\n       do_processing ();\n     }\n \n-  exit (errors ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n-\n-  return 1;\n+  return (errors ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }"}]}