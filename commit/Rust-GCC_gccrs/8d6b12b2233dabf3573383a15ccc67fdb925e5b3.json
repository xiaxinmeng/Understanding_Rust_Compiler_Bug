{"sha": "8d6b12b2233dabf3573383a15ccc67fdb925e5b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ2YjEyYjIyMzNkYWJmMzU3MzM4M2ExNWNjYzY3ZmRiOTI1ZTViMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-16T09:19:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-16T11:22:50Z"}, "message": "middle-end/102360 - adjust .DEFERRED_INIT expansion\n\nThis avoids using native_interpret_type when we cannot do it with\nthe original type of the variable, instead use an integer type\nfor the initialization and side-step the size limitation of\nnative_interpret_int.\n\n2021-09-16  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/102360\n\t* internal-fn.c (expand_DEFERRED_INIT): Make pattern-init\n\tof non-memory more robust.\n\n\t* g++.dg/pr102360.C: New testcase.", "tree": {"sha": "b0c07d6519e9b9d8a76d1ed8bd50ac99cb605a4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0c07d6519e9b9d8a76d1ed8bd50ac99cb605a4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d6b12b2233dabf3573383a15ccc67fdb925e5b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6b12b2233dabf3573383a15ccc67fdb925e5b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d6b12b2233dabf3573383a15ccc67fdb925e5b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6b12b2233dabf3573383a15ccc67fdb925e5b3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "275a076f762daaf0e1d6148a1da1d7222f1aea9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/275a076f762daaf0e1d6148a1da1d7222f1aea9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/275a076f762daaf0e1d6148a1da1d7222f1aea9f"}], "stats": {"total": 79, "additions": 64, "deletions": 15}, "files": [{"sha": "8312d08aab2a9dd1c346aecd8a46ee4856deb322", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6b12b2233dabf3573383a15ccc67fdb925e5b3/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6b12b2233dabf3573383a15ccc67fdb925e5b3/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=8d6b12b2233dabf3573383a15ccc67fdb925e5b3", "patch": "@@ -3045,23 +3045,18 @@ expand_DEFERRED_INIT (internal_fn, gcall *stmt)\n \n       if (init_type == AUTO_INIT_PATTERN)\n \t{\n-\t  tree alt_type = NULL_TREE;\n-\t  if (!can_native_interpret_type_p (var_type))\n-\t    {\n-\t      alt_type\n-\t\t= lang_hooks.types.type_for_mode (TYPE_MODE (var_type),\n-\t\t\t\t\t\t  TYPE_UNSIGNED (var_type));\n-\t      gcc_assert (can_native_interpret_type_p (alt_type));\n-\t    }\n-\n \t  unsigned char *buf = (unsigned char *) xmalloc (total_bytes);\n \t  memset (buf, INIT_PATTERN_VALUE, total_bytes);\n-\t  init = native_interpret_expr (alt_type ? alt_type : var_type,\n-\t\t\t\t\tbuf, total_bytes);\n-\t  gcc_assert (init);\n-\n-\t  if (alt_type)\n-\t    init = build1 (VIEW_CONVERT_EXPR, var_type, init);\n+\t  if (can_native_interpret_type_p (var_type))\n+\t    init = native_interpret_expr (var_type, buf, total_bytes);\n+\t  else\n+\t    {\n+\t      tree itype = build_nonstandard_integer_type\n+\t\t\t     (total_bytes * BITS_PER_UNIT, 1);\n+\t      wide_int w = wi::from_buffer (buf, total_bytes);\n+\t      init = build1 (VIEW_CONVERT_EXPR, var_type,\n+\t\t\t     wide_int_to_tree (itype, w));\n+\t    }\n \t}\n \n       expand_assignment (lhs, init, false);"}, {"sha": "fdf9e08b283b1b1ba8a9ad284d959f12cdb6084b", "filename": "gcc/testsuite/g++.dg/pr102360.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6b12b2233dabf3573383a15ccc67fdb925e5b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr102360.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6b12b2233dabf3573383a15ccc67fdb925e5b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr102360.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr102360.C?ref=8d6b12b2233dabf3573383a15ccc67fdb925e5b3", "patch": "@@ -0,0 +1,54 @@\n+// { dg-do compile }\n+// { dg-options \"-fno-tree-dse -O1 -ftrivial-auto-var-init=pattern\" }\n+\n+class A;\n+template <typename _Tp, int m, int n> class B {\n+public:\n+  _Tp val[m * n];\n+};\n+class C {\n+public:\n+  C(A);\n+};\n+struct D {\n+  D();\n+  unsigned long &operator[](int);\n+  unsigned long *p;\n+};\n+class A {\n+public:\n+  template <typename _Tp, int m, int n> A(const B<_Tp, m, n> &, bool);\n+  int rows, cols;\n+  unsigned char *data;\n+  unsigned char *datastart;\n+  unsigned char *dataend;\n+  unsigned char *datalimit;\n+  D step;\n+};\n+template <typename _Tp, int m, int n>\n+A::A(const B<_Tp, m, n> &p1, bool)\n+    : rows(m), cols(n) {\n+  step[0] = cols * sizeof(_Tp);\n+  datastart = data = (unsigned char *)p1.val;\n+  datalimit = dataend = datastart + rows * step[0];\n+}\n+class F {\n+public:\n+  static void compute(C);\n+  template <typename _Tp, int m, int n, int nm>\n+  static void compute(const B<_Tp, m, n> &, B<_Tp, nm, 1> &, B<_Tp, m, nm> &,\n+                      B<_Tp, n, nm> &);\n+};\n+D::D() {}\n+unsigned long &D::operator[](int p1) { return p[p1]; }\n+template <typename _Tp, int m, int n, int nm>\n+void F::compute(const B<_Tp, m, n> &, B<_Tp, nm, 1> &, B<_Tp, m, nm> &,\n+                B<_Tp, n, nm> &p4) {\n+  A a(p4, false);\n+  compute(a);\n+}\n+void fn1() {\n+  B<double, 4, 4> b, c, e;\n+  B<double, 4, 1> d;\n+  F::compute(b, d, c, e);\n+}"}]}