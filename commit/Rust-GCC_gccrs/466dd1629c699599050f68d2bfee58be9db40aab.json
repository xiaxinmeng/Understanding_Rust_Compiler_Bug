{"sha": "466dd1629c699599050f68d2bfee58be9db40aab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY2ZGQxNjI5YzY5OTU5OTA1MGY2OGQyYmZlZTU4YmU5ZGI0MGFhYg==", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2020-07-13T01:21:05Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2020-07-13T01:21:05Z"}, "message": "rs6000: Init V4SF vector without converting SP to DP\n\nMove V4SF to V4SI, init vector like V4SI and move to V4SF back.\nBetter instruction sequence could be generated on Power9:\n\nlfs + xxpermdi + xvcvdpsp + vmrgew\n=>\nlwz + (sldi + or) + mtvsrdd\n\nWith the patch followed, it could be continue optimized to:\n\nlwz + rldimi + mtvsrdd\n\nThe point is to use lwz to avoid converting the single-precision to\ndouble-precision upon load, pack four 32-bit data into one 128-bit\nregister directly.\n\ngcc/ChangeLog:\n\n2020-07-13  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_expand_vector_init):\n\tMove V4SF to V4SI, init vector like V4SI and move to V4SF back.", "tree": {"sha": "b7cff812d3ee52f3a4b9e8587984880c30fadf1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7cff812d3ee52f3a4b9e8587984880c30fadf1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/466dd1629c699599050f68d2bfee58be9db40aab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/466dd1629c699599050f68d2bfee58be9db40aab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/466dd1629c699599050f68d2bfee58be9db40aab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/466dd1629c699599050f68d2bfee58be9db40aab/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e28851b345461dd2d097abeb2d1ee4218191a1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e28851b345461dd2d097abeb2d1ee4218191a1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e28851b345461dd2d097abeb2d1ee4218191a1d"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "378f761e3fd04237b35a38d81be2e914e4aec230", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 37, "deletions": 18, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466dd1629c699599050f68d2bfee58be9db40aab/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466dd1629c699599050f68d2bfee58be9db40aab/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=466dd1629c699599050f68d2bfee58be9db40aab", "patch": "@@ -6498,29 +6498,48 @@ rs6000_expand_vector_init (rtx target, rtx vals)\n \t}\n       else\n \t{\n-\t  rtx dbl_even = gen_reg_rtx (V2DFmode);\n-\t  rtx dbl_odd  = gen_reg_rtx (V2DFmode);\n-\t  rtx flt_even = gen_reg_rtx (V4SFmode);\n-\t  rtx flt_odd  = gen_reg_rtx (V4SFmode);\n-\t  rtx op0 = force_reg (SFmode, XVECEXP (vals, 0, 0));\n-\t  rtx op1 = force_reg (SFmode, XVECEXP (vals, 0, 1));\n-\t  rtx op2 = force_reg (SFmode, XVECEXP (vals, 0, 2));\n-\t  rtx op3 = force_reg (SFmode, XVECEXP (vals, 0, 3));\n-\n-\t  /* Use VMRGEW if we can instead of doing a permute.  */\n \t  if (TARGET_P8_VECTOR)\n \t    {\n-\t      emit_insn (gen_vsx_concat_v2sf (dbl_even, op0, op2));\n-\t      emit_insn (gen_vsx_concat_v2sf (dbl_odd, op1, op3));\n-\t      emit_insn (gen_vsx_xvcvdpsp (flt_even, dbl_even));\n-\t      emit_insn (gen_vsx_xvcvdpsp (flt_odd, dbl_odd));\n-\t      if (BYTES_BIG_ENDIAN)\n-\t\temit_insn (gen_p8_vmrgew_v4sf_direct (target, flt_even, flt_odd));\n-\t      else\n-\t\temit_insn (gen_p8_vmrgew_v4sf_direct (target, flt_odd, flt_even));\n+\t      rtx tmp_sf[4];\n+\t      rtx tmp_si[4];\n+\t      rtx tmp_di[4];\n+\t      rtx mrg_di[4];\n+\t      for (i = 0; i < 4; i++)\n+\t\t{\n+\t\t  tmp_si[i] = gen_reg_rtx (SImode);\n+\t\t  tmp_di[i] = gen_reg_rtx (DImode);\n+\t\t  mrg_di[i] = gen_reg_rtx (DImode);\n+\t\t  tmp_sf[i] = force_reg (SFmode, XVECEXP (vals, 0, i));\n+\t\t  emit_insn (gen_movsi_from_sf (tmp_si[i], tmp_sf[i]));\n+\t\t  emit_insn (gen_zero_extendsidi2 (tmp_di[i], tmp_si[i]));\n+\t\t}\n+\n+\t      if (!BYTES_BIG_ENDIAN)\n+\t\t{\n+\t\t  std::swap (tmp_di[0], tmp_di[1]);\n+\t\t  std::swap (tmp_di[2], tmp_di[3]);\n+\t\t}\n+\n+\t      emit_insn (gen_ashldi3 (mrg_di[0], tmp_di[0], GEN_INT (32)));\n+\t      emit_insn (gen_iordi3 (mrg_di[1], mrg_di[0], tmp_di[1]));\n+\t      emit_insn (gen_ashldi3 (mrg_di[2], tmp_di[2], GEN_INT (32)));\n+\t      emit_insn (gen_iordi3 (mrg_di[3], mrg_di[2], tmp_di[3]));\n+\n+\t      rtx tmp_v2di = gen_reg_rtx (V2DImode);\n+\t      emit_insn (gen_vsx_concat_v2di (tmp_v2di, mrg_di[1], mrg_di[3]));\n+\t      emit_move_insn (target, gen_lowpart (V4SFmode, tmp_v2di));\n \t    }\n \t  else\n \t    {\n+\t      rtx dbl_even = gen_reg_rtx (V2DFmode);\n+\t      rtx dbl_odd  = gen_reg_rtx (V2DFmode);\n+\t      rtx flt_even = gen_reg_rtx (V4SFmode);\n+\t      rtx flt_odd  = gen_reg_rtx (V4SFmode);\n+\t      rtx op0 = force_reg (SFmode, XVECEXP (vals, 0, 0));\n+\t      rtx op1 = force_reg (SFmode, XVECEXP (vals, 0, 1));\n+\t      rtx op2 = force_reg (SFmode, XVECEXP (vals, 0, 2));\n+\t      rtx op3 = force_reg (SFmode, XVECEXP (vals, 0, 3));\n+\n \t      emit_insn (gen_vsx_concat_v2sf (dbl_even, op0, op1));\n \t      emit_insn (gen_vsx_concat_v2sf (dbl_odd, op2, op3));\n \t      emit_insn (gen_vsx_xvcvdpsp (flt_even, dbl_even));"}]}