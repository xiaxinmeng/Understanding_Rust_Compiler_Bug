{"sha": "ce1c98ea459813570b4588427030daa03958fda6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UxYzk4ZWE0NTk4MTM1NzBiNDU4ODQyNzAzMGRhYTAzOTU4ZmRhNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-03-28T08:59:30Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-03-28T08:59:30Z"}, "message": "java-tree.h (throw_node): Define as a single member of java_global_trees instead of a separate array.\n\n        * java-tree.h (throw_node): Define as a single member of\n        java_global_trees instead of a separate array.\n        (JTI_THROW_NODE): New.\n        * decl.c (throw_node): Don't declare.\n        (init_decl_processing): Init a scalar throw_node.\n        Don't register it for gc.\n        * check-init.c (check_init): Reference scalar throw_node.\n        * expr.c (build_java_athrow): Likewise.\n        * jcf-write.c (generate_bytecode_insns): Likewise.\n        * parse.h (BUILD_THROW): Likewise.\n\nFrom-SVN: r40922", "tree": {"sha": "4e0cd6667d1a644a7351591937d44f5c7b75db48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e0cd6667d1a644a7351591937d44f5c7b75db48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce1c98ea459813570b4588427030daa03958fda6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1c98ea459813570b4588427030daa03958fda6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce1c98ea459813570b4588427030daa03958fda6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1c98ea459813570b4588427030daa03958fda6/comments", "author": null, "committer": null, "parents": [{"sha": "da7da8f9773d5e6b2edde3d332df6f2f85ed3c51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7da8f9773d5e6b2edde3d332df6f2f85ed3c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da7da8f9773d5e6b2edde3d332df6f2f85ed3c51"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "8ccb4b29d03adb5f45266986f9924ce969174104", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1c98ea459813570b4588427030daa03958fda6/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1c98ea459813570b4588427030daa03958fda6/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ce1c98ea459813570b4588427030daa03958fda6", "patch": "@@ -1,3 +1,16 @@\n+2001-03-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* java-tree.h (throw_node): Define as a single member of\n+\tjava_global_trees instead of a separate array.\n+\t(JTI_THROW_NODE): New.\n+\t* decl.c (throw_node): Don't declare.\n+\t(init_decl_processing): Init a scalar throw_node.\n+\tDon't register it for gc.\n+\t* check-init.c (check_init): Reference scalar throw_node.\n+\t* expr.c (build_java_athrow): Likewise.\n+\t* jcf-write.c (generate_bytecode_insns): Likewise.\n+\t* parse.h (BUILD_THROW): Likewise.\n+\n 2001-03-28  Richard Henderson  <rth@redhat.com>\n \n \t* decl.c (end_java_method): Do not save and restore"}, {"sha": "74144020afbd0de1ac0dd3b50eb131c55c0e5f60", "filename": "gcc/java/check-init.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1c98ea459813570b4588427030daa03958fda6/gcc%2Fjava%2Fcheck-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1c98ea459813570b4588427030daa03958fda6/gcc%2Fjava%2Fcheck-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fcheck-init.c?ref=ce1c98ea459813570b4588427030daa03958fda6", "patch": "@@ -694,8 +694,7 @@ check_init (exp, before)\n \n \tfor ( ;  x != NULL_TREE;  x = TREE_CHAIN (x))\n \t  check_init (TREE_VALUE (x), before);\n-\tif (func == throw_node[0]\n-\t    || func == throw_node[1])\n+\tif (func == throw_node)\n \t  goto never_continues;\n       }\n       break;"}, {"sha": "c0b67b22d7caf20ea7533eb6fd528c2f43296815", "filename": "gcc/java/decl.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1c98ea459813570b4588427030daa03958fda6/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1c98ea459813570b4588427030daa03958fda6/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=ce1c98ea459813570b4588427030daa03958fda6", "patch": "@@ -72,8 +72,6 @@ tree decl_map;\n \n static tree pending_local_decls = NULL_TREE;\n \n-tree throw_node [2];\n-\n /* Push a local variable or stack slot into the decl_map,\n    and assign it an rtl. */\n \n@@ -727,18 +725,13 @@ init_decl_processing ()\n \t\t\t\t\t\t\t       t),\n \t\t\t\t\t  0, NOT_BUILT_IN,\n \t\t\t\t\t  NULL_PTR);\n-  throw_node[0] = builtin_function (\"_Jv_Throw\",\n-\t\t\t\t    build_function_type (ptr_type_node, t),\n-\t\t\t\t    0, NOT_BUILT_IN, NULL_PTR);\n+  throw_node = builtin_function ((USING_SJLJ_EXCEPTIONS\n+\t\t\t\t  ? \"_Jv_Throw\" : \"_Jv_Sjlj_Throw\"),\n+\t\t\t\t build_function_type (ptr_type_node, t),\n+\t\t\t\t 0, NOT_BUILT_IN, NULL_PTR);\n   /* Mark throw_nodes as `noreturn' functions with side effects.  */\n-  TREE_THIS_VOLATILE (throw_node[0]) = 1;\n-  TREE_SIDE_EFFECTS (throw_node[0]) = 1;\n-  t = tree_cons (NULL_TREE, ptr_type_node, endlink);\n-  throw_node[1] = builtin_function (\"_Jv_Sjlj_Throw\",\n-\t\t\t\t    build_function_type (ptr_type_node, t),\n-\t\t\t\t    0, NOT_BUILT_IN, NULL_PTR);\n-  TREE_THIS_VOLATILE (throw_node[1]) = 1;\n-  TREE_SIDE_EFFECTS (throw_node[1]) = 1;\n+  TREE_THIS_VOLATILE (throw_node) = 1;\n+  TREE_SIDE_EFFECTS (throw_node) = 1;\n   t = build_function_type (int_type_node, endlink);\n   soft_monitorenter_node \n     = builtin_function (\"_Jv_MonitorEnter\", t, 0, NOT_BUILT_IN,\n@@ -884,8 +877,6 @@ init_decl_processing ()\n   /* Register nodes with the garbage collector.  */\n   ggc_add_tree_root (java_global_trees, \n \t\t     sizeof (java_global_trees) / sizeof (tree));\n-  ggc_add_tree_root (throw_node,\n-\t\t     sizeof (throw_node) / sizeof (tree));\n   ggc_add_tree_root (predef_filenames,\n \t\t     sizeof (predef_filenames) / sizeof (tree));\n   ggc_add_tree_root (&decl_map, 1);"}, {"sha": "42c43aad5364cda6e1e69653aa35e609ebe2d14a", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1c98ea459813570b4588427030daa03958fda6/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1c98ea459813570b4588427030daa03958fda6/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=ce1c98ea459813570b4588427030daa03958fda6", "patch": "@@ -600,7 +600,7 @@ build_java_athrow (node)\n \n   call = build (CALL_EXPR,\n \t\tvoid_type_node,\n-\t\tbuild_address_of (throw_node[USING_SJLJ_EXCEPTIONS ? 1 : 0]),\n+\t\tbuild_address_of (throw_node),\n \t\tbuild_tree_list (NULL_TREE, node),\n \t\tNULL_TREE);\n   TREE_SIDE_EFFECTS (call) = 1;"}, {"sha": "01a0722d39b0bc5b084ee2b3036c379aab262ff9", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1c98ea459813570b4588427030daa03958fda6/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1c98ea459813570b4588427030daa03958fda6/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=ce1c98ea459813570b4588427030daa03958fda6", "patch": "@@ -321,6 +321,7 @@ enum java_tree_index\n \n   JTI_END_PARAMS_NODE,\n \n+  JTI_THROW_NODE,\n   JTI_ALLOC_OBJECT_NODE,\n   JTI_SOFT_INSTANCEOF_NODE,\n   JTI_SOFT_CHECKCAST_NODE,\n@@ -544,6 +545,8 @@ extern tree java_global_trees[JTI_MAX];\n   java_global_trees[JTI_END_PARAMS_NODE]\n \n /* References to internal libjava functions we use. */\n+#define throw_node \\\n+  java_global_trees[JTI_THROW_NODE]\n #define alloc_object_node \\\n   java_global_trees[JTI_ALLOC_OBJECT_NODE]\n #define soft_instanceof_node \\\n@@ -562,7 +565,6 @@ extern tree java_global_trees[JTI_MAX];\n   java_global_trees[JTI_SOFT_BADARRAYINDEX_NODE]\n #define soft_nullpointer_node \\\n   java_global_trees[JTI_SOFT_NULLPOINTER_NODE]\n-extern tree throw_node[];\n #define soft_checkarraystore_node \\\n   java_global_trees[JTI_SOFT_CHECKARRAYSTORE_NODE]\n #define soft_monitorenter_node \\"}, {"sha": "b84c86ebde2aec93643b433f0ba065760860999e", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1c98ea459813570b4588427030daa03958fda6/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1c98ea459813570b4588427030daa03958fda6/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=ce1c98ea459813570b4588427030daa03958fda6", "patch": "@@ -2513,8 +2513,7 @@ generate_bytecode_insns (exp, target, state)\n \t  }\n \telse if (f == soft_monitorenter_node\n \t\t || f == soft_monitorexit_node\n-\t\t || f == throw_node[0]\n-\t\t || f == throw_node[1])\n+\t\t || f == throw_node)\n \t  {\n \t    if (f == soft_monitorenter_node)\n \t      op = OPCODE_monitorenter;"}, {"sha": "9ca55d4aa472b4eef9437359607f62919b9adc28", "filename": "gcc/java/parse.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1c98ea459813570b4588427030daa03958fda6/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1c98ea459813570b4588427030daa03958fda6/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=ce1c98ea459813570b4588427030daa03958fda6", "patch": "@@ -669,13 +669,13 @@ typedef struct _jdeplist {\n     TREE_SIDE_EFFECTS (WHERE) = 1;\t\t\t\\\n   }\n \n-#define BUILD_THROW(WHERE, WHAT)\t\t\t\t\t    \\\n-  {\t\t\t\t\t\t\t\t\t    \\\n-    (WHERE) = \t\t\t\t\t\t\t\t    \\\n-      build (CALL_EXPR, void_type_node,\t\t\t\t\t    \\\n-\t     build_address_of (throw_node[USING_SJLJ_EXCEPTIONS ? 1 : 0]), \\\n-\t     build_tree_list (NULL_TREE, (WHAT)), NULL_TREE);\t\t    \\\n-    TREE_SIDE_EFFECTS ((WHERE)) = 1;\t\t\t\t\t    \\\n+#define BUILD_THROW(WHERE, WHAT)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    (WHERE) = \t\t\t\t\t\t\t\\\n+      build (CALL_EXPR, void_type_node,\t\t\t\t\\\n+\t     build_address_of (throw_node),\t\t\t\\\n+\t     build_tree_list (NULL_TREE, (WHAT)), NULL_TREE);\t\\\n+    TREE_SIDE_EFFECTS ((WHERE)) = 1;\t\t\t\t\\\n   }\n \n /* Set wfl_operator for the most accurate error location */"}]}