{"sha": "a8d3c98746098e2784be7144c1ccc9fcc34a0888", "node_id": "C_kwDOANBUbNoAKGE4ZDNjOTg3NDYwOThlMjc4NGJlNzE0NGMxY2NjOWZjYzM0YTA4ODg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-10T14:38:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-10T14:38:47Z"}, "message": "libstdc++: Add %j, %U, %w, %W time_get support, fix %y, %Y, %C, %p [PR77760]\n\nglibc strptime passes around some state, what fields in struct tm have been\nset and what needs to be finalized through possibly recursive calls, and\nat the end performs various finalizations, like applying %p so that it\nworks for both %I %p and %p %I orders, or applying century so that both\n%C %y and %y %C works, or computation of missing fields from others\n(e.g. from %Y and %j one can compute tm_mon, tm_mday and tm_wday,\nfrom %Y %U %w, %Y %W %w, %Y %U %a, or %Y %W %w one can compute\ntm_mon, tm_mday, tm_yday or e.g. from %Y %m %d one can compute tm_wday\nand tm_yday.\n\nAs the finalization is quite large and doesn't need to be a template\n(doesn't depend on any iterators or char types), I've put it into libstdc++,\nand left some padding in the state struct, so that perhaps in the future we\ncan track some more state without changing ABI.\n\nUnfortunately, there is an ugly problem that the standard mandates that\nget method calls the do_get virtual method and I don't see how we can\ncary on any state in between those calls (even if we did an ABI change\nfor the facets, the methods are const, so that I think multiple threads\ncould use the same time_get objects and we couldn't store state in there).\n\nThere is a hack for that for GCC (seems to work with ICC too, doesn't work\nwith clang++) if the do_get method isn't overriden we can pass the state\naround.\n\nFor both do_get_year and per IRC discussions also for %y, the behavior is\nif 1-2 digits are parsed, the year is treated according to POSIX 2008 %y\nrules (0-68 is 2000-2068, 69-99 is 1969-1999), if 3-4 digits are parsed,\nit is treated as %Y.\n\n2022-01-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libstdc++/77760\n\t* include/bits/locale_facets_nonio.h (__time_get_state): New struct.\n\t(time_get::_M_extract_via_format): Declare new method with\n\t__time_get_state& as an extra argument.\n\t* include/bits/locale_facets_nonio.tcc (_M_extract_via_format): Add\n\t__state argument, set various fields in it while parsing.  Handle %j,\n\t%U, %w and %W, fix up handling of %y, %Y and %C, don't adjust tm_hour\n\tfor %p immediately.  Add a wrapper around the method without the\n\t__state argument for backwards compatibility.\n\t(_M_extract_num): Remove all __len == 4 special cases.\n\t(time_get::do_get_time, time_get::do_get_date, time_get::do_get): Zero\n\tinitialize __state, pass it to _M_extract_via_format and finalize it\n\tat the end.\n\t(do_get_year): For 1-2 digit parsed years, map 0-68 to 2000-2068,\n\t69-99 to 1969-1999.  For 3-4 digit parsed years use that as year.\n\t(get): If do_get isn't overloaded from the locale_facets_nonio.tcc\n\tversion, don't call do_get but call _M_extract_via_format instead to\n\tpass around state.\n\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.30): Export _M_extract_via_format\n\twith extra __time_get_state and __time_get_state::_M_finalize_state.\n\t* src/c++98/locale_facets.cc (is_leap, day_of_the_week,\n\tday_of_the_year): New functions in anon namespace.\n\t(mon_yday): New var in anon namespace.\n\t(__time_get_state::_M_finalize_state): Define.\n\t* testsuite/22_locale/time_get/get/char/4.cc: New test.\n\t* testsuite/22_locale/time_get/get/wchar_t/4.cc: New test.\n\t* testsuite/22_locale/time_get/get_year/char/1.cc (test01): Parse 197\n\tas year 197AD instead of error.\n\t* testsuite/22_locale/time_get/get_year/char/5.cc (test01): Parse 1 as\n\tyear 2001 instead of error.\n\t* testsuite/22_locale/time_get/get_year/char/6.cc: New test.\n\t* testsuite/22_locale/time_get/get_year/wchar_t/1.cc (test01): Parse\n\t197 as year 197AD instead of error.\n\t* testsuite/22_locale/time_get/get_year/wchar_t/5.cc (test01): Parse\n\t1 as year 2001 instead of error.\n\t* testsuite/22_locale/time_get/get_year/wchar_t/6.cc: New test.", "tree": {"sha": "aa4b7c7d9031a5d49656f13d42d122c0c9b5f941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa4b7c7d9031a5d49656f13d42d122c0c9b5f941"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8d3c98746098e2784be7144c1ccc9fcc34a0888", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8d3c98746098e2784be7144c1ccc9fcc34a0888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8d3c98746098e2784be7144c1ccc9fcc34a0888", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8d3c98746098e2784be7144c1ccc9fcc34a0888/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68c2e9e9234cb301e9e81792cad233a41e797792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c2e9e9234cb301e9e81792cad233a41e797792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c2e9e9234cb301e9e81792cad233a41e797792"}], "stats": {"total": 1081, "additions": 1031, "deletions": 50}, "files": [{"sha": "dedee8c1b0a6a08de2bf68ba4d65d542315a3165", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=a8d3c98746098e2784be7144c1ccc9fcc34a0888", "patch": "@@ -628,7 +628,7 @@ GLIBCXX_3.4 {\n     _ZNSt8time_get*;\n     _ZNKSt8time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE1*;\n     _ZNKSt8time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE8*;\n-    _ZNKSt8time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE21*;\n+    _ZNKSt8time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE21*PK[cw];\n \n     # std::time_get_byname\n     _ZNSt15time_get_bynameI[cw]*EEEC[12]EPKc[jmy];\n@@ -1887,7 +1887,9 @@ GLIBCXX_3.4.21 {\n     _ZNKSt7__cxx119money_putI*;\n     _ZNKSt7__cxx1110moneypunctI*;\n     _ZNKSt7__cxx118numpunctI*;\n-    _ZNKSt7__cxx118time_getI*;\n+    _ZNKSt7__cxx118time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE[13-9]*;\n+    _ZNKSt7__cxx118time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE21*PK[cw];\n+    _ZNKSt7__cxx118time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE24*;\n \n     _ZSt9has_facetINSt7__cxx117collate*;\n     _ZSt9has_facetINSt7__cxx118messages*;\n@@ -2427,6 +2429,12 @@ GLIBCXX_3.4.30 {\n     # Only defined #if ! __GXX_TYPEINFO_EQUALITY_INLINE\n     _ZNKSt9type_info7__equalERKS_;\n \n+    # std::time_get\n+    _ZNKSt8time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE21*__time_get_state;\n+    _ZNKSt7__cxx118time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE21*__time_get_state;\n+\n+    _ZNSt16__time_get_state17_M_finalize_stateEP2tm;\n+\n } GLIBCXX_3.4.29;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "71a82af5ee32d760782855fc8380273dbd2723e6", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h?ref=a8d3c98746098e2784be7144c1ccc9fcc34a0888", "patch": "@@ -355,6 +355,30 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  struct __time_get_state\n+  {\n+    // Finalize state.\n+    void\n+    _M_finalize_state(tm* __tm);\n+\n+    unsigned int _M_have_I : 1;\n+    unsigned int _M_have_wday : 1;\n+    unsigned int _M_have_yday : 1;\n+    unsigned int _M_have_mon : 1;\n+    unsigned int _M_have_mday : 1;\n+    unsigned int _M_have_uweek : 1;\n+    unsigned int _M_have_wweek : 1;\n+    unsigned int _M_have_century : 1;\n+    unsigned int _M_is_pm : 1;\n+    unsigned int _M_want_century : 1;\n+    unsigned int _M_want_xday : 1;\n+    unsigned int _M_pad1 : 5;\n+    unsigned int _M_week_no : 6;\n+    unsigned int _M_pad2 : 10;\n+    int _M_century;\n+    int _M_pad3;\n+  };\n+\n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   /**\n@@ -756,6 +780,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _M_extract_via_format(iter_type __beg, iter_type __end, ios_base& __io,\n \t\t\t    ios_base::iostate& __err, tm* __tm,\n \t\t\t    const _CharT* __format) const;\n+\n+      // Extract on a component-by-component basis, via __format argument, with\n+      // state.\n+      iter_type\n+      _M_extract_via_format(iter_type __beg, iter_type __end, ios_base& __io,\n+\t\t\t    ios_base::iostate& __err, tm* __tm,\n+\t\t\t    const _CharT* __format,\n+\t\t\t    __time_get_state &__state) const;\n     };\n \n   template<typename _CharT, typename _InIter>"}, {"sha": "647378233740e07c408a19b1dc01f75a09558a67", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 223, "deletions": 38, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=a8d3c98746098e2784be7144c1ccc9fcc34a0888", "patch": "@@ -691,7 +691,8 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n     time_get<_CharT, _InIter>::\n     _M_extract_via_format(iter_type __beg, iter_type __end, ios_base& __io,\n \t\t\t  ios_base::iostate& __err, tm* __tm,\n-\t\t\t  const _CharT* __format) const\n+\t\t\t  const _CharT* __format,\n+\t\t\t  __time_get_state &__state) const\n     {\n       const locale& __loc = __io._M_getloc();\n       const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);\n@@ -722,7 +723,10 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \t\t  __beg = _M_extract_name(__beg, __end, __mem, __days,\n \t\t\t\t\t  14, __io, __tmperr);\n \t\t  if (!__tmperr)\n-\t\t    __tm->tm_wday = __mem % 7;\n+\t\t    {\n+\t\t      __tm->tm_wday = __mem % 7;\n+\t\t      __state._M_have_wday = 1;\n+\t\t    }\n \t\t  break;\n \t\tcase 'h':\n \t\tcase 'b':\n@@ -734,14 +738,31 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \t\t  __beg = _M_extract_name(__beg, __end, __mem,\n \t\t\t\t\t  __months, 24, __io, __tmperr);\n \t\t  if (!__tmperr)\n-\t\t    __tm->tm_mon = __mem % 12;\n+\t\t    {\n+\t\t      __tm->tm_mon = __mem % 12;\n+\t\t      __state._M_have_mon = 1;\n+\t\t      __state._M_want_xday = 1;\n+\t\t    }\n \t\t  break;\n \t\tcase 'c':\n \t\t  // Default time and date representation.\n \t\t  const char_type*  __dt[2];\n \t\t  __tp._M_date_time_formats(__dt);\n \t\t  __beg = _M_extract_via_format(__beg, __end, __io, __tmperr, \n-\t\t\t\t\t\t__tm, __dt[0]);\n+\t\t\t\t\t\t__tm, __dt[0], __state);\n+\t\t  if (!__tmperr)\n+\t\t    __state._M_want_xday = 1;\n+\t\t  break;\n+\t\tcase 'C':\n+\t\t  // Century.\n+\t\t  __beg = _M_extract_num(__beg, __end, __mem, 0, 99, 2,\n+\t\t\t\t\t __io, __tmperr);\n+\t\t  if (!__tmperr)\n+\t\t    {\n+\t\t      __state._M_century = __mem;\n+\t\t      __state._M_have_century = 1;\n+\t\t      __state._M_want_xday = 1;\n+\t\t    }\n \t\t  break;\n \t\tcase 'd':\n \t\tcase 'e':\n@@ -751,35 +772,60 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \t\t  __beg = _M_extract_num(__beg, __end, __mem, 1, 31, 2,\n \t\t\t\t\t __io, __tmperr);\n \t\t  if (!__tmperr)\n-\t\t    __tm->tm_mday = __mem;\n+\t\t    {\n+\t\t      __tm->tm_mday = __mem;\n+\t\t      __state._M_have_mday = 1;\n+\t\t      __state._M_want_xday = 1;\n+\t\t    }\n \t\t  break;\n \t\tcase 'D':\n \t\t  // Equivalent to %m/%d/%y.[tm_mon, tm_mday, tm_year]\n \t\t  __cs = \"%m/%d/%y\";\n \t\t  __ctype.widen(__cs, __cs + 9, __wcs);\n \t\t  __beg = _M_extract_via_format(__beg, __end, __io, __tmperr, \n-\t\t\t\t\t\t__tm, __wcs);\n+\t\t\t\t\t\t__tm, __wcs, __state);\n+\t\t  if (!__tmperr)\n+\t\t    __state._M_want_xday = 1;\n \t\t  break;\n \t\tcase 'H':\n \t\t  // Hour [00, 23]. [tm_hour]\n \t\t  __beg = _M_extract_num(__beg, __end, __mem, 0, 23, 2,\n \t\t\t\t\t __io, __tmperr);\n \t\t  if (!__tmperr)\n-\t\t    __tm->tm_hour = __mem;\n+\t\t    {\n+\t\t      __tm->tm_hour = __mem;\n+\t\t      __state._M_have_I = 0;\n+\t\t    }\n \t\t  break;\n \t\tcase 'I':\n \t\t  // Hour [01, 12]. [tm_hour]\n \t\t  __beg = _M_extract_num(__beg, __end, __mem, 1, 12, 2,\n \t\t\t\t\t __io, __tmperr);\n \t\t  if (!__tmperr)\n-\t\t    __tm->tm_hour = __mem % 12;\n+\t\t    {\n+\t\t      __tm->tm_hour = __mem % 12;\n+\t\t      __state._M_have_I = 1;\n+\t\t    }\n+\t\t  break;\n+\t\tcase 'j':\n+\t\t  // Day number of year.\n+\t\t  __beg = _M_extract_num(__beg, __end, __mem, 1, 366, 3,\n+\t\t\t\t\t __io, __tmperr);\n+\t\t  if (!__tmperr)\n+\t\t    {\n+\t\t      __tm->tm_yday = __mem - 1;\n+\t\t      __state._M_have_yday = 1;\n+\t\t    }\n \t\t  break;\n \t\tcase 'm':\n \t\t  // Month [01, 12]. [tm_mon]\n \t\t  __beg = _M_extract_num(__beg, __end, __mem, 1, 12, 2, \n \t\t\t\t\t __io, __tmperr);\n \t\t  if (!__tmperr)\n-\t\t    __tm->tm_mon = __mem - 1;\n+\t\t    {\n+\t\t      __tm->tm_mon = __mem - 1;\n+\t\t      __state._M_have_mon = 1;\n+\t\t    }\n \t\t  break;\n \t\tcase 'M':\n \t\t  // Minute [00, 59]. [tm_min]\n@@ -802,23 +848,22 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \t\t    break;\n \t\t  __beg = _M_extract_name(__beg, __end, __mem, __ampm,\n \t\t\t\t\t  2, __io, __tmperr);\n-\t\t  // FIXME: This only works if %I comes before %p.\n \t\t  if (!__tmperr && __mem)\n-\t\t    __tm->tm_hour += 12;\n+\t\t    __state._M_is_pm = 1;\n \t\t  break;\n \t\tcase 'r':\n \t\t  // Locale's 12-hour clock time format (in C %I:%M:%S %p).\n \t\t  const char_type*  __ampm_format;\n \t\t  __tp._M_am_pm_format(&__ampm_format);\n \t\t  __beg = _M_extract_via_format(__beg, __end, __io, __tmperr,\n-\t\t\t\t\t\t__tm, __ampm_format);\n+\t\t\t\t\t\t__tm, __ampm_format, __state);\n \t\t  break;\n \t\tcase 'R':\n \t\t  // Equivalent to (%H:%M).\n \t\t  __cs = \"%H:%M\";\n \t\t  __ctype.widen(__cs, __cs + 6, __wcs);\n \t\t  __beg = _M_extract_via_format(__beg, __end, __io, __tmperr, \n-\t\t\t\t\t\t__tm, __wcs);\n+\t\t\t\t\t\t__tm, __wcs, __state);\n \t\t  break;\n \t\tcase 'S':\n \t\t  // Seconds. [tm_sec]\n@@ -830,41 +875,105 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n #endif\n \t\t\t\t\t __io, __tmperr);\n \t\t  if (!__tmperr)\n-\t\t  __tm->tm_sec = __mem;\n+\t\t    __tm->tm_sec = __mem;\n \t\t  break;\n \t\tcase 'T':\n \t\t  // Equivalent to (%H:%M:%S).\n \t\t  __cs = \"%H:%M:%S\";\n \t\t  __ctype.widen(__cs, __cs + 9, __wcs);\n \t\t  __beg = _M_extract_via_format(__beg, __end, __io, __tmperr, \n-\t\t\t\t\t\t__tm, __wcs);\n+\t\t\t\t\t\t__tm, __wcs, __state);\n+\t\t  break;\n+\t\tcase 'U':\n+\t\t  // Week number of the year (Sunday as first day of week).\n+\t\t  __beg = _M_extract_num(__beg, __end, __mem, 0, 53, 2,\n+\t\t\t\t\t __io, __tmperr);\n+\t\t  if (!__tmperr)\n+\t\t    {\n+\t\t      __state._M_week_no = __mem;\n+\t\t      __state._M_have_uweek = 1;\n+\t\t    }\n+\t\t  break;\n+\t\tcase 'w':\n+\t\t  // Weekday [tm_wday]\n+\t\t  __beg = _M_extract_num(__beg, __end, __mem, 0, 6, 1,\n+\t\t\t\t\t __io, __tmperr);\n+\t\t  if (!__tmperr)\n+\t\t    {\n+\t\t      __tm->tm_wday = __mem;\n+\t\t      __state._M_have_wday = 1;\n+\t\t    }\n+\t\t  break;\n+\t\tcase 'W':\n+\t\t  // Week number of the year (Monday as first day of week).\n+\t\t  __beg = _M_extract_num(__beg, __end, __mem, 0, 53, 2,\n+\t\t\t\t\t __io, __tmperr);\n+\t\t  if (!__tmperr)\n+\t\t    {\n+\t\t      __state._M_week_no = __mem;\n+\t\t      __state._M_have_wweek = 1;\n+\t\t    }\n \t\t  break;\n \t\tcase 'x':\n \t\t  // Locale's date.\n \t\t  const char_type*  __dates[2];\n \t\t  __tp._M_date_formats(__dates);\n \t\t  __beg = _M_extract_via_format(__beg, __end, __io, __tmperr, \n-\t\t\t\t\t\t__tm, __dates[0]);\n+\t\t\t\t\t\t__tm, __dates[0], __state);\n \t\t  break;\n \t\tcase 'X':\n \t\t  // Locale's time.\n \t\t  const char_type*  __times[2];\n \t\t  __tp._M_time_formats(__times);\n \t\t  __beg = _M_extract_via_format(__beg, __end, __io, __tmperr, \n-\t\t\t\t\t\t__tm, __times[0]);\n+\t\t\t\t\t\t__tm, __times[0], __state);\n \t\t  break;\n \t\tcase 'y':\n-\t\tcase 'C': // C99\n-\t\t  // Two digit year.\n+\t\t  // The last 2 digits of year.\n+\t\t  __beg = _M_extract_num(__beg, __end, __mem, 0, 99, 2,\n+\t\t\t\t\t __io, __tmperr);\n+\t\t  if (!__tmperr)\n+\t\t    {\n+\t\t      __state._M_want_century = 1;\n+\t\t      __state._M_want_xday = 1;\n+\t\t      // As an extension, if the 2 digits are followed by\n+\t\t      // 1-2 further digits, treat it like %Y.\n+\t\t      __c = 0;\n+\t\t      if (__beg != __end)\n+\t\t\t__c = __ctype.narrow(*__beg, '*');\n+\t\t      if (__c >= '0' && __c <= '9')\n+\t\t\t{\n+\t\t\t  ++__beg;\n+\t\t\t  __mem = __mem * 10 + (__c - '0');\n+\t\t\t  if (__beg != __end)\n+\t\t\t    {\n+\t\t\t      __c = __ctype.narrow(*__beg, '*');\n+\t\t\t      if (__c >= '0' && __c <= '9')\n+\t\t\t\t{\n+\t\t\t\t  ++__beg;\n+\t\t\t\t  __mem = __mem * 10 + (__c - '0');\n+\t\t\t\t}\n+\t\t\t    }\n+\t\t\t  __mem -= 1900;\n+\t\t\t  __state._M_want_century = 0;\n+\t\t\t}\n+\t\t      // Otherwise, as per POSIX 2008, 00-68 is 2000-2068,\n+\t\t      // while 69-99 is 1969-1999.\n+\t\t      else if (__mem < 69)\n+\t\t\t__mem += 100;\n+\t\t      __tm->tm_year = __mem;\n+\t\t    }\n+\t\t  break;\n \t\tcase 'Y':\n-\t\t  // Year [1900).\n-\t\t  // NB: We parse either two digits, implicitly years since\n-\t\t  // 1900, or 4 digits, full year.  In both cases we can \n-\t\t  // reconstruct [tm_year].  See also libstdc++/26701.\n+\t\t  // Year.\n \t\t  __beg = _M_extract_num(__beg, __end, __mem, 0, 9999, 4,\n \t\t\t\t\t __io, __tmperr);\n \t\t  if (!__tmperr)\n-\t\t    __tm->tm_year = __mem < 0 ? __mem + 100 : __mem - 1900;\n+\t\t    {\n+\t\t      __tm->tm_year = __mem - 1900;\n+\t\t      __state._M_want_century = 0;\n+\t\t      __state._M_want_xday = 1;\n+\t\t    }\n \t\t  break;\n \t\tcase 'Z':\n \t\t  // Timezone info.\n@@ -925,6 +1034,18 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n       return __beg;\n     }\n \n+  template<typename _CharT, typename _InIter>\n+    _InIter\n+    time_get<_CharT, _InIter>::\n+    _M_extract_via_format(iter_type __beg, iter_type __end, ios_base& __io,\n+\t\t\t  ios_base::iostate& __err, tm* __tm,\n+\t\t\t  const _CharT* __format) const\n+    {\n+      __time_get_state __state = __time_get_state();\n+      return _M_extract_via_format(__beg, __end, __io, __err, __tm,\n+\t\t\t\t   __format, __state);\n+    }\n+\n   template<typename _CharT, typename _InIter>\n     _InIter\n     time_get<_CharT, _InIter>::\n@@ -949,13 +1070,7 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \t  else\n \t    break;\n \t}\n-      // Special encoding for do_get_year, 'y', and 'Y' above.\n-      if (__len == 4 && __i == 2)\n-\t__member = __value - 100;\n-      else if (__len == 4 && __i == 4)\n-\t__member = __value;\n-      else if (__len == 2 && __i && __i <= 2\n-\t       && __value >= __min && __value <= __max)\n+      if (__i && __value >= __min && __value <= __max)\n \t__member = __value;\n       else\n \t__err |= ios_base::failbit;\n@@ -1212,8 +1327,10 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n       const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);\n       const char_type*  __times[2];\n       __tp._M_time_formats(__times);\n+      __time_get_state __state = __time_get_state();\n       __beg = _M_extract_via_format(__beg, __end, __io, __err, \n-\t\t\t\t    __tm, __times[0]);\n+\t\t\t\t    __tm, __times[0], __state);\n+      __state._M_finalize_state(__tm);\n       if (__beg == __end)\n \t__err |= ios_base::eofbit;\n       return __beg;\n@@ -1229,8 +1346,10 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n       const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);\n       const char_type*  __dates[2];\n       __tp._M_date_formats(__dates);\n+      __time_get_state __state = __time_get_state();\n       __beg = _M_extract_via_format(__beg, __end, __io, __err, \n-\t\t\t\t    __tm, __dates[0]);\n+\t\t\t\t    __tm, __dates[0], __state);\n+      __state._M_finalize_state(__tm);\n       if (__beg == __end)\n \t__err |= ios_base::eofbit;\n       return __beg;\n@@ -1296,11 +1415,38 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n     {\n       int __tmpyear;\n       ios_base::iostate __tmperr = ios_base::goodbit;\n+      const locale& __loc = __io._M_getloc();\n+      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n \n-      __beg = _M_extract_num(__beg, __end, __tmpyear, 0, 9999, 4,\n+      __beg = _M_extract_num(__beg, __end, __tmpyear, 0, 99, 2,\n \t\t\t     __io, __tmperr);\n       if (!__tmperr)\n-\t__tm->tm_year = __tmpyear < 0 ? __tmpyear + 100 : __tmpyear - 1900;\n+\t{\n+\t  char __c = 0;\n+\t  if (__beg != __end)\n+\t    __c = __ctype.narrow(*__beg, '*');\n+\t  // For 1-2 digit year, assume 69-99 is 1969-1999, 0-68 is 2000-2068.\n+\t  // For 3-4 digit year, use it as year.\n+\t  // __tm->tm_year needs year - 1900 though.\n+\t  if (__c >= '0' && __c <= '9')\n+\t    {\n+\t      ++__beg;\n+\t      __tmpyear = __tmpyear * 10 + (__c - '0');\n+\t      if (__beg != __end)\n+\t\t{\n+\t\t  __c = __ctype.narrow(*__beg, '*');\n+\t\t  if (__c >= '0' && __c <= '9')\n+\t\t    {\n+\t\t      ++__beg;\n+\t\t      __tmpyear = __tmpyear * 10 + (__c - '0');\n+\t\t    }\n+\t\t}\n+\t      __tmpyear -= 1900;\n+\t    }\n+\t  else if (__tmpyear < 69)\n+\t    __tmpyear += 100;\n+\t  __tm->tm_year = __tmpyear;\n+\t}\n       else\n \t__err |= ios_base::failbit;\n \n@@ -1321,6 +1467,21 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n       const locale& __loc = __io._M_getloc();\n       ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);\n       __err = ios_base::goodbit;\n+      bool __use_state = false;\n+#if __GNUC__ >= 5\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wpmf-conversions\"\n+      // Nasty hack.  The C++ standard mandates that get invokes the do_get\n+      // virtual method, but unfortunately at least without an ABI change\n+      // for the facets we can't keep state across the different do_get\n+      // calls.  So e.g. if __fmt is \"%p %I:%M:%S\", we can't handle it\n+      // properly, because we first handle the %p am/pm specifier and only\n+      // later the 12-hour format specifier.\n+      if ((void*)(this->*(&time_get::do_get)) == (void*)(&time_get::do_get))\n+\t__use_state = true;\n+#pragma GCC diagnostic pop\n+#endif\n+      __time_get_state __state = __time_get_state();\n       while (__fmt != __fmtend &&\n              __err == ios_base::goodbit)\n         {\n@@ -1331,6 +1492,7 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n             }\n           else if (__ctype.narrow(*__fmt, 0) == '%')\n             {\n+\t      const char_type* __fmt_start = __fmt;\n               char __format;\n               char __mod = 0;\n               if (++__fmt == __fmtend)\n@@ -1351,8 +1513,26 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n                   __err = ios_base::failbit;\n                   break;\n                 }\n-              __s = this->do_get(__s, __end, __io, __err, __tm, __format,\n-\t\t\t\t __mod);\n+\t      if (__use_state)\n+\t\t{\n+\t\t  char_type __new_fmt[4];\n+\t\t  __new_fmt[0] = __fmt_start[0];\n+\t\t  __new_fmt[1] = __fmt_start[1];\n+\t\t  if (__mod)\n+\t\t    {\n+\t\t      __new_fmt[2] = __fmt_start[2];\n+\t\t      __new_fmt[3] = char_type();\n+\t\t    }\n+\t\t  else\n+\t\t    __new_fmt[2] = char_type();\n+\t\t  __s = _M_extract_via_format(__s, __end, __io, __err, __tm,\n+\t\t\t\t\t      __new_fmt, __state);\n+\t\t  if (__s == __end)\n+\t\t    __err |= ios_base::eofbit;\n+\t\t}\n+\t      else\n+\t\t__s = this->do_get(__s, __end, __io, __err, __tm, __format,\n+\t\t\t\t   __mod);\n               ++__fmt;\n             }\n           else if (__ctype.is(ctype_base::space, *__fmt))\n@@ -1379,6 +1559,8 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n               break;\n             }\n         }\n+      if (__use_state)\n+\t__state._M_finalize_state(__tm);\n       return __s;\n     }\n \n@@ -1408,7 +1590,10 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n           __fmt[3] = char_type();\n         }\n \n-      __beg = _M_extract_via_format(__beg, __end, __io, __err, __tm, __fmt);\n+      __time_get_state __state = __time_get_state();\n+      __beg = _M_extract_via_format(__beg, __end, __io, __err, __tm, __fmt,\n+\t\t\t\t    __state);\n+      __state._M_finalize_state(__tm);\n       if (__beg == __end)\n \t__err |= ios_base::eofbit;\n       return __beg;"}, {"sha": "1293a37e6427f78553cb157dba2332bf200aa432", "filename": "libstdc++-v3/src/c++98/locale_facets.cc", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_facets.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_facets.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_facets.cc?ref=a8d3c98746098e2784be7144c1ccc9fcc34a0888", "patch": "@@ -134,5 +134,115 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                                   __grouping_tmp.size());\n   }\n \n+  namespace\n+  {\n+    bool\n+    is_leap(int year)\n+    {\n+      return (year % 100 != 0 || year % 400 == 0) && year % 4 == 0;\n+    }\n+\n+    const unsigned short int mon_yday[2][13] =\n+    {\n+      // Normal years.\n+      { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 },\n+      // Leap years.\n+      { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 }\n+    };\n+\n+    int\n+    day_of_the_week (int year, int mon, int mday)\n+    {\n+      // We know that January 1st 1970 was a Thursday (= 4).  Compute the\n+      // difference between this date and the one in arguments and so\n+      // determine the weekday.\n+      int corr_year = 1900 + year - (mon < 2);\n+      int wday = (-473\n+\t\t  + (365 * (year - 70))\n+\t\t  + (corr_year / 4)\n+\t\t  - ((corr_year / 4) / 25) + ((corr_year / 4) % 25 < 0)\n+\t\t  + (((corr_year / 4) / 25) / 4)\n+\t\t  + mon_yday[0][mon]\n+\t\t  + mday - 1);\n+      return ((wday % 7) + 7) % 7;\n+    }\n+\n+    // Compute the day of the year.\n+    int\n+    day_of_the_year (tm *tm)\n+    {\n+      return (mon_yday[is_leap (1900 + tm->tm_year)][tm->tm_mon]\n+\t      + (tm->tm_mday - 1));\n+    }\n+  }\n+\n+  // Finalize time_get state.\n+  void\n+  __time_get_state::\n+  _M_finalize_state(tm* tm)\n+  {\n+    if (_M_have_I && _M_is_pm)\n+      tm->tm_hour += 12;\n+    if (_M_have_century)\n+      {\n+\tif (_M_want_century)\n+\t  tm->tm_year = tm->tm_year % 100;\n+\telse\n+\t  tm->tm_year = 0;\n+\ttm->tm_year += (_M_century - 19) * 100;\n+      }\n+    if (_M_want_xday && !_M_have_wday)\n+      {\n+\tif (!(_M_have_mon && _M_have_mday) && _M_have_yday)\n+\t  {\n+\t    // We don't have tm_mon and/or tm_mday, compute them.\n+\t    int t_mon = 0;\n+\t    while (mon_yday[is_leap(1900 + tm->tm_year)][t_mon]\n+\t\t   <= tm->tm_yday)\n+\t      ++t_mon;\n+\t    if (!_M_have_mon)\n+\t      tm->tm_mon = t_mon - 1;\n+\t    if (!_M_have_mday)\n+\t      tm->tm_mday\n+\t\t= (tm->tm_yday\n+\t\t   - mon_yday[is_leap(1900 + tm->tm_year)][t_mon - 1] + 1);\n+\t    _M_have_mon = 1;\n+\t    _M_have_mday = 1;\n+\t  }\n+\t// Don't crash in day_of_the_week if tm_mon is uninitialized.\n+\tif (_M_have_mon || (unsigned) tm->tm_mon <= 11)\n+\t  tm->tm_wday\n+\t    = day_of_the_week (tm->tm_year, tm->tm_mon, tm->tm_mday);\n+      }\n+    if (_M_want_xday\n+\t&& !_M_have_yday\n+\t&& (_M_have_mon || (unsigned) tm->tm_mon <= 11))\n+      tm->tm_yday = day_of_the_year (tm);\n+    if ((_M_have_uweek || _M_have_wweek) && _M_have_wday)\n+      {\n+\tint w_offset = _M_have_uweek ? 0 : 1;\n+\tint wday = day_of_the_week (tm->tm_year, 0, 1);\n+\n+\tif (!_M_have_yday)\n+\t  tm->tm_yday = ((7 - (wday - w_offset)) % 7\n+\t\t\t + (_M_week_no - 1) * 7\n+\t\t\t + (tm->tm_wday - w_offset + 7) % 7);\n+\n+\tif (!_M_have_mday || !_M_have_mon)\n+\t  {\n+\t    int t_mon = 0;\n+\t    while (mon_yday[is_leap(1900 + tm->tm_year)][t_mon]\n+\t\t   <= tm->tm_yday)\n+\t      ++t_mon;\n+\t    if (!_M_have_mon)\n+\t      tm->tm_mon = t_mon - 1;\n+\t    if (!_M_have_mday)\n+\t      tm->tm_mday\n+\t\t= (tm->tm_yday\n+\t\t   - mon_yday[is_leap(1900 + tm->tm_year)][t_mon - 1] + 1);\n+\t  }\n+      }\n+  }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "d0619f9de1fc4ac0121538d9c1f83249da083156", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get/char/4.cc", "status": "added", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fchar%2F4.cc?ref=a8d3c98746098e2784be7144c1ccc9fcc34a0888", "patch": "@@ -0,0 +1,243 @@\n+// { dg-do run { target c++11 } }\n+\n+// Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <locale>\n+#include <sstream>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+\n+  locale loc_c = locale::classic();\n+\n+  istringstream iss;\n+  iss.imbue(loc_c);\n+  const time_get<char>& tget = use_facet<time_get<char>>(iss.getloc());\n+  typedef istreambuf_iterator<char> iter;\n+  const iter end;\n+\n+  tm time;\n+  ios_base::iostate err = ios_base::badbit;\n+\n+  iss.str(\"PM01:38:12\");\n+  string format = \"%p%I:%M:%S\";\n+  time = tm();\n+  auto ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t      format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_hour == 13 );\n+  VERIFY( time.tm_min == 38 );\n+  VERIFY( time.tm_sec == 12 );\n+\n+  iss.str(\"05 37\");\n+  format = \"%C %y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 537 - 1900 );\n+\n+  iss.str(\"68\");\n+  format = \"%y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2068 - 1900 );\n+\n+  iss.str(\"69\");\n+  format = \"%y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 1969 - 1900 );\n+\n+  iss.str(\"03-Feb-2003\");\n+  format = \"%d-%b-%Y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2003 - 1900 );\n+  VERIFY( time.tm_mon == 1 );\n+  VERIFY( time.tm_mday == 3 );\n+  VERIFY( time.tm_wday == 1 );\n+  VERIFY( time.tm_yday == 33 );\n+\n+  iss.str(\"16-Dec-2020\");\n+  format = \"%d-%b-%Y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2020 - 1900 );\n+  VERIFY( time.tm_mon == 11 );\n+  VERIFY( time.tm_mday == 16 );\n+  VERIFY( time.tm_wday == 3 );\n+  VERIFY( time.tm_yday == 350 );\n+\n+  iss.str(\"16-Dec-2021\");\n+  format = \"%d-%b-%Y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2021 - 1900 );\n+  VERIFY( time.tm_mon == 11 );\n+  VERIFY( time.tm_mday == 16 );\n+  VERIFY( time.tm_wday == 4 );\n+  VERIFY( time.tm_yday == 349 );\n+\n+  iss.str(\"253 2020\");\n+  format = \"%j %Y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2020 - 1900 );\n+  VERIFY( time.tm_mon == 8 );\n+  VERIFY( time.tm_mday == 9 );\n+  VERIFY( time.tm_wday == 3 );\n+  VERIFY( time.tm_yday == 252 );\n+\n+  iss.str(\"233 2021\");\n+  format = \"%j %Y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2021 - 1900 );\n+  VERIFY( time.tm_mon == 7 );\n+  VERIFY( time.tm_mday == 21 );\n+  VERIFY( time.tm_wday == 6 );\n+  VERIFY( time.tm_yday == 232 );\n+\n+  iss.str(\"2020 23 3\");\n+  format = \"%Y %U %w\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2020 - 1900 );\n+  VERIFY( time.tm_mon == 5 );\n+  VERIFY( time.tm_mday == 10 );\n+  VERIFY( time.tm_wday == 3 );\n+  VERIFY( time.tm_yday == 161 );\n+\n+  iss.str(\"2020 23 3\");\n+  format = \"%Y %W %w\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2020 - 1900 );\n+  VERIFY( time.tm_mon == 5 );\n+  VERIFY( time.tm_mday == 10 );\n+  VERIFY( time.tm_wday == 3 );\n+  VERIFY( time.tm_yday == 161 );\n+\n+  iss.str(\"2021 43 Fri\");\n+  format = \"%Y %W %a\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2021 - 1900 );\n+  VERIFY( time.tm_mon == 9 );\n+  VERIFY( time.tm_mday == 29 );\n+  VERIFY( time.tm_wday == 5 );\n+  VERIFY( time.tm_yday == 301 );\n+\n+  iss.str(\"2024 23 3\");\n+  format = \"%Y %U %w\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2024 - 1900 );\n+  VERIFY( time.tm_mon == 5 );\n+  VERIFY( time.tm_mday == 12 );\n+  VERIFY( time.tm_wday == 3 );\n+  VERIFY( time.tm_yday == 163 );\n+\n+  iss.str(\"2024 23 3\");\n+  format = \"%Y %W %w\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2024 - 1900 );\n+  VERIFY( time.tm_mon == 5 );\n+  VERIFY( time.tm_mday == 5 );\n+  VERIFY( time.tm_wday == 3 );\n+  VERIFY( time.tm_yday == 156 );\n+\n+  // As an extension, parse also 4 digit years.\n+  iss.str(\"0068\");\n+  format = \"%y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 68 - 1900 );\n+\n+  iss.str(\"0069\");\n+  format = \"%y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 69 - 1900 );\n+\n+  iss.str(\"1492\");\n+  format = \"%y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 1492 - 1900 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0518842692fe98f12dd23204e4a3f2623b445db9", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get/wchar_t/4.cc", "status": "added", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fwchar_t%2F4.cc?ref=a8d3c98746098e2784be7144c1ccc9fcc34a0888", "patch": "@@ -0,0 +1,243 @@\n+// { dg-do run { target c++11 } }\n+\n+// Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <locale>\n+#include <sstream>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+\n+  locale loc_c = locale::classic();\n+\n+  wistringstream iss;\n+  iss.imbue(loc_c);\n+  const time_get<wchar_t>& tget = use_facet<time_get<wchar_t>>(iss.getloc());\n+  typedef istreambuf_iterator<wchar_t> iter;\n+  const iter end;\n+\n+  tm time;\n+  ios_base::iostate err = ios_base::badbit;\n+\n+  iss.str(L\"PM01:38:12\");\n+  wstring format = L\"%p%I:%M:%S\";\n+  time = tm();\n+  auto ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t      format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_hour == 13 );\n+  VERIFY( time.tm_min == 38 );\n+  VERIFY( time.tm_sec == 12 );\n+\n+  iss.str(L\"05 37\");\n+  format = L\"%C %y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 537 - 1900 );\n+\n+  iss.str(L\"68\");\n+  format = L\"%y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2068 - 1900 );\n+\n+  iss.str(L\"69\");\n+  format = L\"%y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 1969 - 1900 );\n+\n+  iss.str(L\"03-Feb-2003\");\n+  format = L\"%d-%b-%Y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2003 - 1900 );\n+  VERIFY( time.tm_mon == 1 );\n+  VERIFY( time.tm_mday == 3 );\n+  VERIFY( time.tm_wday == 1 );\n+  VERIFY( time.tm_yday == 33 );\n+\n+  iss.str(L\"16-Dec-2020\");\n+  format = L\"%d-%b-%Y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2020 - 1900 );\n+  VERIFY( time.tm_mon == 11 );\n+  VERIFY( time.tm_mday == 16 );\n+  VERIFY( time.tm_wday == 3 );\n+  VERIFY( time.tm_yday == 350 );\n+\n+  iss.str(L\"16-Dec-2021\");\n+  format = L\"%d-%b-%Y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2021 - 1900 );\n+  VERIFY( time.tm_mon == 11 );\n+  VERIFY( time.tm_mday == 16 );\n+  VERIFY( time.tm_wday == 4 );\n+  VERIFY( time.tm_yday == 349 );\n+\n+  iss.str(L\"253 2020\");\n+  format = L\"%j %Y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2020 - 1900 );\n+  VERIFY( time.tm_mon == 8 );\n+  VERIFY( time.tm_mday == 9 );\n+  VERIFY( time.tm_wday == 3 );\n+  VERIFY( time.tm_yday == 252 );\n+\n+  iss.str(L\"233 2021\");\n+  format = L\"%j %Y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2021 - 1900 );\n+  VERIFY( time.tm_mon == 7 );\n+  VERIFY( time.tm_mday == 21 );\n+  VERIFY( time.tm_wday == 6 );\n+  VERIFY( time.tm_yday == 232 );\n+\n+  iss.str(L\"2020 23 3\");\n+  format = L\"%Y %U %w\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2020 - 1900 );\n+  VERIFY( time.tm_mon == 5 );\n+  VERIFY( time.tm_mday == 10 );\n+  VERIFY( time.tm_wday == 3 );\n+  VERIFY( time.tm_yday == 161 );\n+\n+  iss.str(L\"2020 23 3\");\n+  format = L\"%Y %W %w\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2020 - 1900 );\n+  VERIFY( time.tm_mon == 5 );\n+  VERIFY( time.tm_mday == 10 );\n+  VERIFY( time.tm_wday == 3 );\n+  VERIFY( time.tm_yday == 161 );\n+\n+  iss.str(L\"2021 43 Fri\");\n+  format = L\"%Y %W %a\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2021 - 1900 );\n+  VERIFY( time.tm_mon == 9 );\n+  VERIFY( time.tm_mday == 29 );\n+  VERIFY( time.tm_wday == 5 );\n+  VERIFY( time.tm_yday == 301 );\n+\n+  iss.str(L\"2024 23 3\");\n+  format = L\"%Y %U %w\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2024 - 1900 );\n+  VERIFY( time.tm_mon == 5 );\n+  VERIFY( time.tm_mday == 12 );\n+  VERIFY( time.tm_wday == 3 );\n+  VERIFY( time.tm_yday == 163 );\n+\n+  iss.str(L\"2024 23 3\");\n+  format = L\"%Y %W %w\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 2024 - 1900 );\n+  VERIFY( time.tm_mon == 5 );\n+  VERIFY( time.tm_mday == 5 );\n+  VERIFY( time.tm_wday == 3 );\n+  VERIFY( time.tm_yday == 156 );\n+\n+  // As an extension, parse also 4 digit years.\n+  iss.str(L\"0068\");\n+  format = L\"%y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 68 - 1900 );\n+\n+  iss.str(L\"0069\");\n+  format = L\"%y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 69 - 1900 );\n+\n+  iss.str(L\"1492\");\n+  format = L\"%y\";\n+  time = tm();\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+\t\t format.data(), format.data()+format.size());\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( ret == end );\n+  VERIFY( time.tm_year == 1492 - 1900 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e6f53de4a5520c5f28e320eb181457c7e3c87c3f", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F1.cc?ref=a8d3c98746098e2784be7144c1ccc9fcc34a0888", "patch": "@@ -76,8 +76,8 @@ void test01()\n   errorstate = good;\n   iterator_type ret03 = tim_get.get_year(is_it03, end, iss, errorstate,\n \t\t\t\t\t &time03);\n-  VERIFY( time03.tm_year == 3 );\n-  VERIFY( errorstate == ios_base::failbit );\n+  VERIFY( time03.tm_year == 197 - 1900 );\n+  VERIFY( errorstate == good );\n   VERIFY( *ret03 == 'd' );\n \n   iss.str(\"71d71\");"}, {"sha": "c4544479828f703a0ef62af587c6f75041e3010b", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/char/5.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F5.cc?ref=a8d3c98746098e2784be7144c1ccc9fcc34a0888", "patch": "@@ -49,12 +49,13 @@ void test01()\n \n   const string str0 = \"1\";\n   tg.get_year(str0.begin(), str0.end(), iss, err, &tm0);\n-  VERIFY( err == (failbit | eofbit) );\n-  VERIFY( tm0.tm_year == 0 );\n+  VERIFY( err == eofbit );\n+  VERIFY( tm0.tm_year == 2001 - 1900 );\n \n   const string str1 = \"1997 \";\n+  err = goodbit;\n   iter_type end1 = tg.get_year(str1.begin(), str1.end(), iss, err, &tm1);\n-  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( err == goodbit );\n   VERIFY( tm1.tm_year == time_sanity.tm_year );\n   VERIFY( *end1 ==  ' ' );\n }"}, {"sha": "e50afa6aa7321f7b8ae213584f03c0a358126cc8", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/char/6.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F6.cc?ref=a8d3c98746098e2784be7144c1ccc9fcc34a0888", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2001-2022 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  locale loc_c = locale::classic();\n+\n+  iterator_type end;\n+\n+  istringstream iss;\n+  iss.imbue(loc_c);\n+  const time_get<char>& tim_get = use_facet<time_get<char> >(iss.getloc());\n+  ios_base::iostate errorstate = ios_base::goodbit;\n+\n+  iss.str(\"69\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  tim_get.get_year(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( time01.tm_year == 1969 - 1900 );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(\"68 \");\n+  iterator_type is_it02(iss);\n+  tm time02;\n+  errorstate = ios_base::goodbit;\n+  iterator_type ret02 = tim_get.get_year(is_it02, end, iss, errorstate,\n+\t\t\t\t\t &time02);\n+  VERIFY( time02.tm_year == 2068 - 1900 );\n+  VERIFY( errorstate == ios_base::goodbit );\n+  VERIFY( *ret02 == ' ' );\n+\n+  iss.str(\"0069\");\n+  iterator_type is_it03(iss);\n+  tm time03;\n+  errorstate = ios_base::goodbit;\n+  iterator_type ret03 = tim_get.get_year(is_it03, end, iss, errorstate,\n+\t\t\t\t\t &time03);\n+  VERIFY( time03.tm_year == 69 - 1900 );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(\"0068\");\n+  iterator_type is_it04(iss);\n+  tm time04;\n+  errorstate = ios_base::goodbit;\n+  iterator_type ret04 = tim_get.get_year(is_it04, end, iss, errorstate,\n+\t\t\t\t\t &time04);\n+  VERIFY( time04.tm_year == 68 - 1900 );\n+  VERIFY( errorstate == ios_base::eofbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ba95fb91520c14a15870b822be677e19dfd20374", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F1.cc?ref=a8d3c98746098e2784be7144c1ccc9fcc34a0888", "patch": "@@ -76,8 +76,8 @@ void test01()\n   errorstate = good;\n   iterator_type ret03 = tim_get.get_year(is_it03, end, iss, errorstate,\n \t\t\t\t\t &time03);\n-  VERIFY( time03.tm_year == 3 );\n-  VERIFY( errorstate == ios_base::failbit );\n+  VERIFY( time03.tm_year == 197 - 1900 );\n+  VERIFY( errorstate == good );\n   VERIFY( *ret03 == L'd' );\n \n   iss.str(L\"71d71\");"}, {"sha": "c1ee71015aaa34f1d28421516ea52bfa93eafaa8", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/wchar_t/5.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F5.cc?ref=a8d3c98746098e2784be7144c1ccc9fcc34a0888", "patch": "@@ -49,12 +49,13 @@ void test01()\n \n   const wstring str0 = L\"1\";\n   tg.get_year(str0.begin(), str0.end(), iss, err, &tm0);\n-  VERIFY( err == (failbit | eofbit) );\n-  VERIFY( tm0.tm_year == 0 );\n+  VERIFY( err == eofbit );\n+  VERIFY( tm0.tm_year == 2001 - 1900 );\n \n   const wstring str1 = L\"1997 \";\n+  err = goodbit;\n   iter_type end1 = tg.get_year(str1.begin(), str1.end(), iss, err, &tm1);\n-  VERIFY( err == (failbit | eofbit) );\n+  VERIFY( err == goodbit );\n   VERIFY( tm1.tm_year == time_sanity.tm_year );\n   VERIFY( *end1 ==  L' ' );\n }"}, {"sha": "f6e32b7f781e8af7711cc6c8492534415dda367b", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/wchar_t/6.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d3c98746098e2784be7144c1ccc9fcc34a0888/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F6.cc?ref=a8d3c98746098e2784be7144c1ccc9fcc34a0888", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2001-2022 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  locale loc_c = locale::classic();\n+\n+  iterator_type end;\n+\n+  wistringstream iss;\n+  iss.imbue(loc_c);\n+  const time_get<wchar_t>& tim_get = use_facet<time_get<wchar_t> >(iss.getloc());\n+  ios_base::iostate errorstate = ios_base::goodbit;\n+\n+  iss.str(L\"69\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  tim_get.get_year(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( time01.tm_year == 1969 - 1900 );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(L\"68 \");\n+  iterator_type is_it02(iss);\n+  tm time02;\n+  errorstate = ios_base::goodbit;\n+  iterator_type ret02 = tim_get.get_year(is_it02, end, iss, errorstate,\n+\t\t\t\t\t &time02);\n+  VERIFY( time02.tm_year == 2068 - 1900 );\n+  VERIFY( errorstate == ios_base::goodbit );\n+  VERIFY( *ret02 == L' ' );\n+\n+  iss.str(L\"0069\");\n+  iterator_type is_it03(iss);\n+  tm time03;\n+  errorstate = ios_base::goodbit;\n+  iterator_type ret03 = tim_get.get_year(is_it03, end, iss, errorstate,\n+\t\t\t\t\t &time03);\n+  VERIFY( time03.tm_year == 69 - 1900 );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(L\"0068\");\n+  iterator_type is_it04(iss);\n+  tm time04;\n+  errorstate = ios_base::goodbit;\n+  iterator_type ret04 = tim_get.get_year(is_it04, end, iss, errorstate,\n+\t\t\t\t\t &time04);\n+  VERIFY( time04.tm_year == 68 - 1900 );\n+  VERIFY( errorstate == ios_base::eofbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}