{"sha": "5ab10c42b36e0705d544502e750b65ba7ce5ab8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFiMTBjNDJiMzZlMDcwNWQ1NDQ1MDJlNzUwYjY1YmE3Y2U1YWI4Yw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-04T19:42:57Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-04T19:42:57Z"}, "message": "(init_decl_processing): Create complex types.\n\n(grokdeclarator): Handle complex keyword.\nDistinguish int-by-default from int keyword.\n\nFrom-SVN: r3642", "tree": {"sha": "35a938f439d91bd52535826418f1ee111a413a06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35a938f439d91bd52535826418f1ee111a413a06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ab10c42b36e0705d544502e750b65ba7ce5ab8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab10c42b36e0705d544502e750b65ba7ce5ab8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab10c42b36e0705d544502e750b65ba7ce5ab8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab10c42b36e0705d544502e750b65ba7ce5ab8c/comments", "author": null, "committer": null, "parents": [{"sha": "74428a8ece0bb296c151f3583681c5e350e364ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74428a8ece0bb296c151f3583681c5e350e364ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74428a8ece0bb296c151f3583681c5e350e364ae"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "e1c5b0d55608203aec94a893accc294c7ffe2735", "filename": "gcc/c-decl.c", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab10c42b36e0705d544502e750b65ba7ce5ab8c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab10c42b36e0705d544502e750b65ba7ce5ab8c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=5ab10c42b36e0705d544502e750b65ba7ce5ab8c", "patch": "@@ -128,6 +128,11 @@ tree float_type_node;\n tree double_type_node;\n tree long_double_type_node;\n \n+tree complex_integer_type_node;\n+tree complex_float_type_node;\n+tree complex_double_type_node;\n+tree complex_long_double_type_node;\n+\n tree intQI_type_node;\n tree intHI_type_node;\n tree intSI_type_node;\n@@ -2663,6 +2668,30 @@ init_decl_processing ()\n \t\t\tlong_double_type_node));\n   layout_type (long_double_type_node);\n \n+  complex_integer_type_node = make_node (COMPLEX_TYPE);\n+  pushdecl (build_decl (TYPE_DECL, get_identifier (\"complex int\"),\n+\t\t\tcomplex_integer_type_node));\n+  TREE_TYPE (complex_integer_type_node) = integer_type_node;\n+  layout_type (complex_integer_type_node);\n+\n+  complex_float_type_node = make_node (COMPLEX_TYPE);\n+  pushdecl (build_decl (TYPE_DECL, get_identifier (\"complex float\"),\n+\t\t\tcomplex_float_type_node));\n+  TREE_TYPE (complex_float_type_node) = float_type_node;\n+  layout_type (complex_float_type_node);\n+\n+  complex_double_type_node = make_node (COMPLEX_TYPE);\n+  pushdecl (build_decl (TYPE_DECL, get_identifier (\"complex double\"),\n+\t\t\tcomplex_double_type_node));\n+  TREE_TYPE (complex_double_type_node) = double_type_node;\n+  layout_type (complex_double_type_node);\n+\n+  complex_long_double_type_node = make_node (COMPLEX_TYPE);\n+  pushdecl (build_decl (TYPE_DECL, get_identifier (\"complex long double\"),\n+\t\t\tcomplex_long_double_type_node));\n+  TREE_TYPE (complex_long_double_type_node) = long_double_type_node;\n+  layout_type (complex_long_double_type_node);\n+\n   wchar_type_node\n     = TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (WCHAR_TYPE)));\n   wchar_type_size = TYPE_PRECISION (wchar_type_node);\n@@ -3616,6 +3645,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n   int inlinep;\n   int explicit_int = 0;\n   int explicit_char = 0;\n+  int defaulted_int = 0;\n   tree typedef_decl = 0;\n   char *name;\n   tree typedef_type = 0;\n@@ -3759,7 +3789,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n   if (type)\n     size_varies = C_TYPE_VARIABLE_SIZE (type);\n \n-  /* No type at all: default to `int', and set EXPLICIT_INT\n+  /* No type at all: default to `int', and set DEFAULTED_INT\n      because it was not a user-defined typedef.  */\n \n   if (type == 0)\n@@ -3768,7 +3798,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  && ! (specbits & ((1 << (int) RID_LONG) | (1 << (int) RID_SHORT)\n \t\t\t    | (1 << (int) RID_SIGNED) | (1 << (int) RID_UNSIGNED))))\n \twarn_about_return_type = 1;\n-      explicit_int = 1;\n+      defaulted_int = 1;\n       type = integer_type_node;\n     }\n \n@@ -3810,7 +3840,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n       else\n \t{\n \t  ok = 1;\n-\t  if (!explicit_int && !explicit_char && pedantic)\n+\t  if (!explicit_int && !defaulted_int && !explicit_char && pedantic)\n \t    {\n \t      pedwarn (\"long, short, signed or unsigned used invalidly for `%s'\",\n \t\t       name);\n@@ -3835,7 +3865,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n       || (bitfield && flag_traditional\n \t  && (! explicit_flag_signed_bitfields || !flag_signed_bitfields))\n       || (bitfield && ! flag_signed_bitfields\n-\t  && (explicit_int || explicit_char\n+\t  && (explicit_int || defaulted_int || explicit_char\n \t      /* A typedef for plain `int' without `signed'\n \t\t can be controlled just like plain `int'.  */\n \t      || ! (typedef_decl != 0\n@@ -3865,6 +3895,21 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n     type = long_integer_type_node;\n   else if (specbits & 1 << (int) RID_SHORT)\n     type = short_integer_type_node;\n+  else if (specbits & 1 << (int) RID_COMPLEX)\n+    {\n+      if (defaulted_int)\n+\ttype = complex_double_type_node;\n+      else if (type == integer_type_node)\n+\ttype = complex_integer_type_node;\n+      else if (type == float_type_node)\n+\ttype = complex_float_type_node;\n+      else if (type == double_type_node)\n+\ttype = complex_double_type_node;\n+      else if (type == long_double_type_node)\n+\ttype = complex_long_double_type_node;\n+      else\n+\terror (\"invalid complex type\");\n+    }\n \n   /* Set CONSTP if this declaration is `const', whether by\n      explicit specification or via a typedef."}]}