{"sha": "9bad074fa55f03f99348ed5132d6d439571f5e51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJhZDA3NGZhNTVmMDNmOTkzNDhlZDUxMzJkNmQ0Mzk1NzFmNWU1MQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-03-07T23:10:54Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-03-07T23:10:54Z"}, "message": "(va_start): Change __SH3E___ to __SH3E__.\n\n(va_arg): Add little-endian SH3E support.  Fix big-endian version\nto work for arguments smaller than the word size.\n\nFrom-SVN: r11492", "tree": {"sha": "65e8ebb2832f732b5dcb823a1fc3fe0824389ca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65e8ebb2832f732b5dcb823a1fc3fe0824389ca7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bad074fa55f03f99348ed5132d6d439571f5e51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bad074fa55f03f99348ed5132d6d439571f5e51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bad074fa55f03f99348ed5132d6d439571f5e51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bad074fa55f03f99348ed5132d6d439571f5e51/comments", "author": null, "committer": null, "parents": [{"sha": "ddaf4c9114124df0305df1eeb8e1452b42c3c771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddaf4c9114124df0305df1eeb8e1452b42c3c771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddaf4c9114124df0305df1eeb8e1452b42c3c771"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "5c873cbb4d7b82dc50c6a716fa145a998f3929a0", "filename": "gcc/ginclude/va-sh.h", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bad074fa55f03f99348ed5132d6d439571f5e51/gcc%2Fginclude%2Fva-sh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bad074fa55f03f99348ed5132d6d439571f5e51/gcc%2Fginclude%2Fva-sh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-sh.h?ref=9bad074fa55f03f99348ed5132d6d439571f5e51", "patch": "@@ -62,7 +62,7 @@ __extension__ \\\n #define va_alist  __builtin_va_alist\n #define va_dcl    int __builtin_va_alist;...\n \n-#ifdef __SH3E___\n+#ifdef __SH3E__\n \n #define va_start(AP) \\\n __extension__ \\\n@@ -124,8 +124,6 @@ enum __va_type_classes {\n #ifdef __SH3E__\n \n #ifdef __LITTLE_ENDIAN__\n-#warning SH3e little endian varargs/stdarg support has not been written yet.\n-#endif\n \n #define va_arg(pvar,TYPE)\t\t\t\t\t\\\n __extension__\t\t\t\t\t\t\t\\\n@@ -143,21 +141,60 @@ __extension__\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      __va_greg *__r;\t\t\t\t\t\t\\\n-      if (pvar.__va_next_o + ((sizeof (TYPE) + 3) / 4) <= pvar.__va_next_o_limit) \t\t\\\n+      __va_greg *_r;\t\t\t\t\t\t\\\n+      if (pvar.__va_next_o + ((sizeof (TYPE) + 3) / 4)\t\t\\\n+\t  <= pvar.__va_next_o_limit) \t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n-\t  __r = (__va_greg *) pvar.__va_next_o;\t\t\t\\\n-          pvar.__va_next_o += (sizeof (TYPE) + 3) / 4;\t\t\\\n+\t  _r = pvar.__va_next_o;\t\t\t\t\\\n+\t  pvar.__va_next_o += (sizeof (TYPE) + 3) / 4;\t\t\\\n \t}\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n-          __r = (__va_greg *) pvar.__va_next_stack;             \\\n-          pvar.__va_next_stack += (sizeof (TYPE) + 3) / 4;\t\\\n+\t  _r = pvar.__va_next_stack;\t\t\t\t\\\n+\t  pvar.__va_next_stack += (sizeof (TYPE) + 3) / 4;\t\\\n \t}\t\t\t\t\t\t\t\\\n+      __result = (char *) _r;\t\t\t\t\t\\\n+    } \t\t\t\t\t\t\t\t\\\n+  (TYPE *) __result;}))\n+\n+#else /* ! __LITTLE_ENDIAN__ */\n+\n+#define va_arg(pvar,TYPE)\t\t\t\t\t\\\n+__extension__\t\t\t\t\t\t\t\\\n+(*({int __type = __builtin_classify_type (* (TYPE *) 0);\t\\\n+  void * __result;\t\t\t\t\t\t\\\n+  if (__type == __real_type_class && sizeof(TYPE) == 4)\t\t\\\n+\t\t\t\t\t\t/* float? */\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      __va_freg *__r;\t\t\t\t\t\t\\\n+      if (pvar.__va_next_fp < pvar.__va_next_fp_limit)\t\t\\\n+\t__r = (__va_freg *) pvar.__va_next_fp++;\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\t__r = (__va_freg *) pvar.__va_next_stack++;\t\t\\\n       __result = (char *) __r;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      __va_greg *_r;\t\t\t\t\t\t\\\n+      if (pvar.__va_next_o + ((sizeof (TYPE) + 3) / 4)\t\t\\\n+\t  <= pvar.__va_next_o_limit) \t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  pvar.__va_next_o += (sizeof (TYPE) + 3) / 4;\t\t\\\n+\t  _r = pvar.__va_next_o;\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  pvar.__va_next_stack += (sizeof (TYPE) + 3) / 4;\t\\\n+\t  _r = pvar.__va_next_stack;\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      __result = ((char *) _r\t\t\t\t\t\\\n+\t\t  - (sizeof (TYPE) < 4 ? sizeof (TYPE)\t\t\\\n+\t\t     : ((sizeof (TYPE) + 3) / 4) * 4));\t\t\\\n     } \t\t\t\t\t\t\t\t\\\n   (TYPE *) __result;}))\n \n+#endif /* __LITTLE_ENDIAN__ */\n+\n #else /* ! SH3E */\n \n #ifdef __LITTLE_ENDIAN__"}]}