{"sha": "3441f1062c9aefab4a89f3d68a80a55323d9aec8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ0MWYxMDYyYzlhZWZhYjRhODlmM2Q2OGE4MGE1NTMyM2Q5YWVjOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-09-28T01:23:58Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-09-28T01:23:58Z"}, "message": "typelist.h (type_to_type): Remove.\n\n2006-09-27  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/typelist.h (type_to_type): Remove.\n\t* include/ext/throw_allocator.h (assert_allocatod): Remove.\n\t(check_allocated(label)): New.\n\t(print_to_string): Print numerical output correctly.\n\n\t* testsuite/ext/pb_ds/example/hash_resize_neg.cc: Adjust line numbers.\n\n\t* testsuite/util/regression/rand/priority_queue/detail/\n\toperator_fn_imps.hpp: Set and clear label, throw\n        probability. Check only allocations of the marked label.\n\t* testsuite/util/regression/rand/assoc/detail/\n\toperator_fn_imps.hpp: Same.\n\n\t* testsuite/performance/ext/pb_ds/text_find_timing.cc: Adjustments for\n        removal of type_to_type.\n\t* testsuite/performance/ext/pb_ds/\n\thash_random_int_erase_mem_usage.cc: Same.\n\t* testsuite/performance/ext/pb_ds/tree_text_insert_timing.cc: Same.\n\t* testsuite/performance/ext/pb_ds/\n\tpriority_queue_text_push_timing.cc: Same.\n\t* testsuite/performance/ext/pb_ds/\n\trandom_int_subscript_find_timing.cc: Same.\n\t* testsuite/performance/ext/pb_ds/tree_split_join_timing.cc: Same.\n\t* testsuite/performance/ext/pb_ds/random_int_find_timing.cc: Same.\n\t* testsuite/performance/ext/pb_ds/\n\tmultimap_text_insert_mem_usage.hpp: Same.\n\t* testsuite/performance/ext/pb_ds/\n\tpriority_queue_random_int_push_timing.cc: Same.\n\t* testsuite/performance/ext/pb_ds/multimap_text_find_timing.hpp: Same.\n\t* testsuite/performance/ext/pb_ds/\n\tpriority_queue_text_modify_timing.hpp: Same.\n\t* testsuite/performance/ext/pb_ds/\n\ttree_order_statistics_timing.cc: Same.\n\t* testsuite/performance/ext/pb_ds/\n\tpriority_queue_text_push_pop_timing.cc: Same.\n\t* testsuite/performance/ext/pb_ds/\n\tpriority_queue_text_join_timing.cc: Same.\n\t* testsuite/performance/ext/pb_ds/\n\tpriority_queue_random_int_push_pop_timing.cc: Same.\n\t* testsuite/performance/ext/pb_ds/\n\trandom_int_subscript_insert_timing.cc: Same.\n\t* testsuite/performance/ext/pb_ds/tree_text_lor_find_timing.cc: Same.\n\t* testsuite/performance/ext/pb_ds/\n\tmultimap_text_insert_timing.hpp: Same.\n\t* testsuite/performance/ext/pb_ds/\n\tpriority_queue_text_pop_mem_usage.cc: Same.\n\t* testsuite/performance/ext/pb_ds/\n\thash_zlob_random_int_find_timing.cc: Same. \n\t* testsuite/util/regression/trait/assoc/type_trait.hpp: Same.\n\t* testsuite/util/regression/rand/priority_queue/\n\trand_regression_test.hpp: Same.\n\t* testsuite/util/regression/rand/assoc/detail/\n\tconstructor_destructor_fn_imps.hpp: Same.\n\t* testsuite/util/regression/rand/assoc/detail/insert_fn_imps.hpp: Same.\n\t* testsuite/util/regression/rand/assoc/rand_regression_test.hpp: Same.\n\t* testsuite/util/regression/rand/assoc/\n\tcontainer_rand_regression_test.hpp: Same.\n\t* testsuite/util/regression/assoc/common_type.hpp: Same.\n\t* testsuite/util/regression/basic_type.hpp: Same.\n\t* testsuite/util/common_type/assoc/common_type.hpp: Same.\n\t* testsuite/util/common_type/assoc/string_form.hpp: Same.\n\t* testsuite/util/common_type/assoc/template_policy.hpp: Same.\n\t* testsuite/util/common_type/assoc/native_set.hpp: Same.\n\t* testsuite/util/performance/priority_queue/mem_usage/\n\tpop_test.hpp: Same.\n\t* testsuite/util/performance/priority_queue/timing/\n\tpush_pop_test.hpp: Same.\n\t* testsuite/util/performance/priority_queue/timing/join_test.hpp: Same.\n\t* testsuite/util/performance/priority_queue/timing/push_test.hpp: Same.\n\t* testsuite/util/performance/priority_queue/timing/\n\tmodify_test.hpp: Same.\n\t* testsuite/util/performance/assoc/mem_usage/\n\tmultimap_insert_test.hpp: Same.\n\t* testsuite/util/performance/assoc/mem_usage/erase_test.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/\n\tmultimap_insert_test.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/\n\tsubscript_find_test.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/find_test.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/\n\tsubscript_insert_test.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/insert_test.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/\n\ttree_order_statistics_test.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/multimap_find_test.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/\n\ttree_split_join_test.hpp: Same.\n\t* testsuite/util/performance/assoc/multimap_common_type.hpp: Same.\n\t* testsuite/util/testsuite_common_types.h: Same.\n\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tconstructor_destructor_no_store_hash_fn_imps.hpp: Typedef\n        normalization, consistency in member names between cc and gp hash\n        tables, formatting fixes.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\terase_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tinsert_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tconstructor_destructor_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tinsert_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/trace_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tconstructor_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\terase_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tconstructor_destructor_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\terase_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tinsert_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tconstructor_destructor_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tinsert_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/trace_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tconstructor_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\terase_no_store_hash_fn_imps.hpp: Same.\n\n\t* include/ext/pb_ds/assoc_container.hpp: Formatting fixes.\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_prime_size_policy_imp.hpp: Same.\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_standard_resize_policy_imp.hpp: Same.\n\t* include/ext/pb_ds/detail/types_traits.hpp: Same.\n\t* include/ext/pb_ds/detail/constructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp: Same.\n\t* include/ext/pb_ds/detail/hash_fn/ranged_probe_fn.hpp: Same.\n\t* include/ext/pb_ds/detail/hash_fn/\n\tdirect_mod_range_hashing_imp.hpp: Same.\n\t* include/ext/pb_ds/detail/hash_fn/mask_based_range_hashing.hpp: Same.\n\t* include/ext/pb_ds/detail/hash_fn/\n\tdirect_mask_range_hashing_imp.hpp: Same.\n\nFrom-SVN: r117268", "tree": {"sha": "ef3e103ee11eb8b6a01a51a23e8726e0d33c90d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef3e103ee11eb8b6a01a51a23e8726e0d33c90d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3441f1062c9aefab4a89f3d68a80a55323d9aec8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3441f1062c9aefab4a89f3d68a80a55323d9aec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3441f1062c9aefab4a89f3d68a80a55323d9aec8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3441f1062c9aefab4a89f3d68a80a55323d9aec8/comments", "author": null, "committer": null, "parents": [{"sha": "0a1f02df6b895c5c4cf975b0a22f22dec7e25741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a1f02df6b895c5c4cf975b0a22f22dec7e25741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a1f02df6b895c5c4cf975b0a22f22dec7e25741"}], "stats": {"total": 4178, "additions": 1542, "deletions": 2636}, "files": [{"sha": "b1cdaf66669372c844acdde4af66c7e41ecf133f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -1,3 +1,152 @@\n+2006-09-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/typelist.h (type_to_type): Remove.\n+\t* include/ext/throw_allocator.h (assert_allocatod): Remove.\n+\t(check_allocated(label)): New.\n+\t(print_to_string): Print numerical output correctly.\n+\n+\t* testsuite/ext/pb_ds/example/hash_resize_neg.cc: Adjust line numbers.\n+\n+\t* testsuite/util/regression/rand/priority_queue/detail/\n+\toperator_fn_imps.hpp: Set and clear label, throw\n+        probability. Check only allocations of the marked label.\n+\t* testsuite/util/regression/rand/assoc/detail/\n+\toperator_fn_imps.hpp: Same.\n+\n+\t* testsuite/performance/ext/pb_ds/text_find_timing.cc: Adjustments for\n+        removal of type_to_type.\n+\t* testsuite/performance/ext/pb_ds/\n+\thash_random_int_erase_mem_usage.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/tree_text_insert_timing.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/\n+\tpriority_queue_text_push_timing.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/\n+\trandom_int_subscript_find_timing.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/tree_split_join_timing.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/random_int_find_timing.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/\n+\tmultimap_text_insert_mem_usage.hpp: Same.\n+\t* testsuite/performance/ext/pb_ds/\n+\tpriority_queue_random_int_push_timing.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/multimap_text_find_timing.hpp: Same.\n+\t* testsuite/performance/ext/pb_ds/\n+\tpriority_queue_text_modify_timing.hpp: Same.\n+\t* testsuite/performance/ext/pb_ds/\n+\ttree_order_statistics_timing.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/\n+\tpriority_queue_text_push_pop_timing.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/\n+\tpriority_queue_text_join_timing.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/\n+\tpriority_queue_random_int_push_pop_timing.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/\n+\trandom_int_subscript_insert_timing.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/tree_text_lor_find_timing.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/\n+\tmultimap_text_insert_timing.hpp: Same.\n+\t* testsuite/performance/ext/pb_ds/\n+\tpriority_queue_text_pop_mem_usage.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/\n+\thash_zlob_random_int_find_timing.cc: Same. \n+\t* testsuite/util/regression/trait/assoc/type_trait.hpp: Same.\n+\t* testsuite/util/regression/rand/priority_queue/\n+\trand_regression_test.hpp: Same.\n+\t* testsuite/util/regression/rand/assoc/detail/\n+\tconstructor_destructor_fn_imps.hpp: Same.\n+\t* testsuite/util/regression/rand/assoc/detail/insert_fn_imps.hpp: Same.\n+\t* testsuite/util/regression/rand/assoc/rand_regression_test.hpp: Same.\n+\t* testsuite/util/regression/rand/assoc/\n+\tcontainer_rand_regression_test.hpp: Same.\n+\t* testsuite/util/regression/assoc/common_type.hpp: Same.\n+\t* testsuite/util/regression/basic_type.hpp: Same.\n+\t* testsuite/util/common_type/assoc/common_type.hpp: Same.\n+\t* testsuite/util/common_type/assoc/string_form.hpp: Same.\n+\t* testsuite/util/common_type/assoc/template_policy.hpp: Same.\n+\t* testsuite/util/common_type/assoc/native_set.hpp: Same.\n+\t* testsuite/util/performance/priority_queue/mem_usage/\n+\tpop_test.hpp: Same.\n+\t* testsuite/util/performance/priority_queue/timing/\n+\tpush_pop_test.hpp: Same.\n+\t* testsuite/util/performance/priority_queue/timing/join_test.hpp: Same.\n+\t* testsuite/util/performance/priority_queue/timing/push_test.hpp: Same.\n+\t* testsuite/util/performance/priority_queue/timing/\n+\tmodify_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/mem_usage/\n+\tmultimap_insert_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/mem_usage/erase_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/\n+\tmultimap_insert_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/\n+\tsubscript_find_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/find_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/\n+\tsubscript_insert_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/insert_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/\n+\ttree_order_statistics_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/multimap_find_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/\n+\ttree_split_join_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/multimap_common_type.hpp: Same.\n+\t* testsuite/util/testsuite_common_types.h: Same.\n+\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tconstructor_destructor_no_store_hash_fn_imps.hpp: Typedef\n+        normalization, consistency in member names between cc and gp hash\n+        tables, formatting fixes.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\terase_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tinsert_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tconstructor_destructor_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tinsert_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/trace_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tconstructor_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\terase_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tconstructor_destructor_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\terase_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tinsert_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tconstructor_destructor_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tinsert_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/trace_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tconstructor_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\terase_no_store_hash_fn_imps.hpp: Same.\n+\n+\t* include/ext/pb_ds/assoc_container.hpp: Formatting fixes.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_prime_size_policy_imp.hpp: Same.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_standard_resize_policy_imp.hpp: Same.\n+\t* include/ext/pb_ds/detail/types_traits.hpp: Same.\n+\t* include/ext/pb_ds/detail/constructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp: Same.\n+\t* include/ext/pb_ds/detail/hash_fn/ranged_probe_fn.hpp: Same.\n+\t* include/ext/pb_ds/detail/hash_fn/\n+\tdirect_mod_range_hashing_imp.hpp: Same.\n+\t* include/ext/pb_ds/detail/hash_fn/mask_based_range_hashing.hpp: Same.\n+\t* include/ext/pb_ds/detail/hash_fn/\n+\tdirect_mask_range_hashing_imp.hpp: Same.\n+\t\n 2006-09-27  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/29217"}, {"sha": "271cc7600f14ec4e1fed38d8f7db5d21f0f7fa63", "filename": "libstdc++-v3/include/ext/pb_ds/assoc_container.hpp", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -184,22 +184,22 @@ namespace pb_ds\n     // Constructor taking some policy objects. r_hash_fn will be\n     // copied by the Hash_Fn object of the container object.\n     cc_hash_table(const hash_fn& h) \n-      : base_type(h) { }\n+    : base_type(h) { }\n \n     // Constructor taking some policy objects. r_hash_fn will be\n     // copied by the hash_fn object of the container object, and\n     // r_eq_fn will be copied by the eq_fn object of the container\n     // object.\n     cc_hash_table(const hash_fn& h, const eq_fn& e)\n-      : base_type(h, e) { }\n+    : base_type(h, e) { }\n \n     // Constructor taking some policy objects. r_hash_fn will be\n     // copied by the hash_fn object of the container object, r_eq_fn\n     // will be copied by the eq_fn object of the container object, and\n     // r_comb_hash_fn will be copied by the comb_hash_fn object of the\n     // container object.\n     cc_hash_table(const hash_fn& h, const eq_fn& e, const comb_hash_fn& ch)\n-      : base_type(h, e, ch) { }\n+    : base_type(h, e, ch) { }\n \n     // Constructor taking some policy objects. r_hash_fn will be\n     // copied by the hash_fn object of the container object, r_eq_fn\n@@ -209,7 +209,7 @@ namespace pb_ds\n     // resize_policy object of the container object.\n     cc_hash_table(const hash_fn& h, const eq_fn& e, const comb_hash_fn& ch, \n \t\t  const resize_policy& rp)    \n-      : base_type(h, e, ch, rp) { }\n+    : base_type(h, e, ch, rp) { }\n \n     // Constructor taking __iterators to a range of value_types. The\n     // value_types between first_it and last_it will be inserted into\n@@ -223,7 +223,7 @@ namespace pb_ds\n     // last_it will be inserted into the container object.\n     template<typename It>\n     cc_hash_table(It first, It last, const hash_fn& h)\n-      : base_type(h)\n+    : base_type(h)\n     { copy_from_range(first, last); }\n \n     // Constructor taking __iterators to a range of value_types and\n@@ -234,7 +234,7 @@ namespace pb_ds\n     // object.\n     template<typename It>\n     cc_hash_table(It first, It last, const hash_fn& h, const eq_fn& e)\n-      : base_type(h, e)\n+    : base_type(h, e)\n     { copy_from_range(first, last); }\n \n     // Constructor taking __iterators to a range of value_types and\n@@ -247,7 +247,7 @@ namespace pb_ds\n     template<typename It>\n     cc_hash_table(It first, It last, const hash_fn& h, const eq_fn& e,\n \t\t  const comb_hash_fn& ch)\n-      : base_type(h, e, ch)\n+    : base_type(h, e, ch)\n     { copy_from_range(first, last); }\n \n     // Constructor taking __iterators to a range of value_types and\n@@ -261,11 +261,11 @@ namespace pb_ds\n     template<typename It>\n     cc_hash_table(It first, It last, const hash_fn& h, const eq_fn& e, \n \t\t  const comb_hash_fn& ch, const resize_policy& rp)\n-      : base_type(h, e, ch, rp)\n+    : base_type(h, e, ch, rp)\n     { copy_from_range(first, last); }\n \n     cc_hash_table(const cc_hash_table& other)\n-      : base_type((const base_type&)other)\n+    : base_type((const base_type&)other)\n     { }\n \n     virtual\n@@ -274,7 +274,7 @@ namespace pb_ds\n     cc_hash_table& \n     operator=(const cc_hash_table& other)\n     {\n-      if (this !=& other)\n+      if (this != &other)\n \t{\n \t  cc_hash_table tmp(other);\n \t  swap(tmp);\n@@ -323,22 +323,22 @@ namespace pb_ds\n     // Constructor taking some policy objects. r_hash_fn will be\n     // copied by the hash_fn object of the container object.\n     gp_hash_table(const hash_fn& h)\n-      : base_type(h) { }\n+    : base_type(h) { }\n \n     // Constructor taking some policy objects. r_hash_fn will be\n     // copied by the hash_fn object of the container object, and\n     // r_eq_fn will be copied by the eq_fn object of the container\n     // object.\n     gp_hash_table(const hash_fn& h, const eq_fn& e)\n-      : base_type(h, e) { }\n+    : base_type(h, e) { }\n \n     // Constructor taking some policy objects. r_hash_fn will be\n     // copied by the hash_fn object of the container object, r_eq_fn\n     // will be copied by the eq_fn object of the container object, and\n     // r_comb_probe_fn will be copied by the comb_probe_fn object of\n     // the container object.\n     gp_hash_table(const hash_fn& h, const eq_fn& e, const comb_probe_fn& cp)\n-      : base_type(h, e, cp) { }\n+    : base_type(h, e, cp) { }\n \n     // Constructor taking some policy objects. r_hash_fn will be\n     // copied by the hash_fn object of the container object, r_eq_fn\n@@ -348,7 +348,7 @@ namespace pb_ds\n     // probe_fn object of the container object.\n     gp_hash_table(const hash_fn& h, const eq_fn& e, const comb_probe_fn& cp, \n \t\t  const probe_fn& p)\n-      : base_type(h, e, cp, p) { }\n+    : base_type(h, e, cp, p) { }\n \n     // Constructor taking some policy objects. r_hash_fn will be\n     // copied by the hash_fn object of the container object, r_eq_fn\n@@ -359,7 +359,7 @@ namespace pb_ds\n     // copied by the Resize_Policy object of the container object.\n     gp_hash_table(const hash_fn& h, const eq_fn& e, const comb_probe_fn& cp, \n \t\t  const probe_fn& p, const resize_policy& rp)\n-      : base_type(h, e, cp, p, rp) { }\n+    : base_type(h, e, cp, p, rp) { }\n \n     // Constructor taking __iterators to a range of value_types. The\n     // value_types between first_it and last_it will be inserted into\n@@ -374,7 +374,7 @@ namespace pb_ds\n     // will be copied by the hash_fn object of the container object.\n     template<typename It>\n     gp_hash_table(It first, It last, const hash_fn& h)\n-      : base_type(h)\n+    : base_type(h)\n     { base_type::copy_from_range(first, last); }\n \n     // Constructor taking __iterators to a range of value_types and\n@@ -385,7 +385,7 @@ namespace pb_ds\n     // object.\n     template<typename It>\n     gp_hash_table(It first, It last, const hash_fn& h, const eq_fn& e)\n-      : base_type(h, e)\n+    : base_type(h, e)\n     { base_type::copy_from_range(first, last); }\n \n     // Constructor taking __iterators to a range of value_types and\n@@ -398,7 +398,7 @@ namespace pb_ds\n     template<typename It>\n     gp_hash_table(It first, It last, const hash_fn& h, const eq_fn& e, \n \t\t  const comb_probe_fn& cp)\n-      : base_type(h, e, cp)\n+    : base_type(h, e, cp)\n     { base_type::copy_from_range(first, last); }\n \n     // Constructor taking __iterators to a range of value_types and\n@@ -412,7 +412,7 @@ namespace pb_ds\n     template<typename It>\n     gp_hash_table(It first, It last, const hash_fn& h, const eq_fn& e, \n \t\t  const comb_probe_fn& cp, const probe_fn& p)\n-      : base_type(h, e, cp, p)\n+    : base_type(h, e, cp, p)\n     { base_type::copy_from_range(first, last); }\n \n     // Constructor taking __iterators to a range of value_types and\n@@ -429,11 +429,11 @@ namespace pb_ds\n     gp_hash_table(It first, It last, const hash_fn& h, const eq_fn& e, \n \t\t  const comb_probe_fn& cp, const probe_fn& p, \n \t\t  const resize_policy& rp)\n-      : base_type(h, e, cp, p, rp)\n+    : base_type(h, e, cp, p, rp)\n     { base_type::copy_from_range(first, last); }\n \n     gp_hash_table(const gp_hash_table& other)\n-      : base_type((const base_type&)other)\n+    : base_type((const base_type&)other)\n     { }\n \n     virtual\n@@ -442,7 +442,7 @@ namespace pb_ds\n     gp_hash_table& \n     operator=(const gp_hash_table& other)\n     {\n-      if (this !=& other)\n+      if (this != &other)\n \t{\n \t  gp_hash_table tmp(other);\n \t  swap(tmp);\n@@ -458,7 +458,7 @@ namespace pb_ds\n #undef PB_DS_BASE_C_DEC\n \n \n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\\\n+#define PB_DS_BASE_C_DEC \\\n   container_base<Key, Mapped, Tag, Policy_Tl, Allocator>\n \n   // An abstract basic tree-like (tree, trie) associative container.\n@@ -484,10 +484,10 @@ namespace pb_ds\n #undef PB_DS_BASE_C_DEC\n \n \n-#define PB_DS_TREE_NODE_AND_IT_TRAITS_C_DEC\t\t\t\t\\\n+#define PB_DS_TREE_NODE_AND_IT_TRAITS_C_DEC \\\n   detail::tree_traits<Key, Mapped,Cmp_Fn,Node_Update,Tag, Allocator>\n \n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n+#define PB_DS_BASE_C_DEC \\\n   basic_tree<Key,Mapped,Tag,typename PB_DS_TREE_NODE_AND_IT_TRAITS_C_DEC::node_update, \\\n \t     typename __gnu_cxx::typelist::create2<Cmp_Fn, PB_DS_TREE_NODE_AND_IT_TRAITS_C_DEC >::type, Allocator>\n \n@@ -511,7 +511,7 @@ namespace pb_ds\n     // Constructor taking some policy objects. r_cmp_fn will be copied\n     // by the Cmp_Fn object of the container object.\n     tree(const cmp_fn& c)\n-      : base_type(c) { }\n+    : base_type(c) { }\n \n     // Constructor taking __iterators to a range of value_types. The\n     // value_types between first_it and last_it will be inserted into\n@@ -530,15 +530,15 @@ namespace pb_ds\n     { base_type::copy_from_range(first, last); }\n \n     tree(const tree& other)\n-      : base_type((const base_type&)other) { }\n+    : base_type((const base_type&)other) { }\n \n     virtual\n     ~tree() { }\n \n     tree& \n     operator=(const tree& other)\n     {\n-      if (this !=& other)\n+      if (this != &other)\n \t{\n \t  tree tmp(other);\n \t  swap(tmp);\n@@ -555,10 +555,10 @@ namespace pb_ds\n #undef PB_DS_TREE_NODE_AND_IT_TRAITS_C_DEC\n \n \n-#define PB_DS_TRIE_NODE_AND_ITS_TRAITS\t\t\t\t\t\\\n+#define PB_DS_TRIE_NODE_AND_ITS_TRAITS \\\n   detail::trie_traits<Key,Mapped,E_Access_Traits,Node_Update,Tag,Allocator>\n \n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n+#define PB_DS_BASE_C_DEC \\\n   basic_tree<Key,Mapped,Tag, typename PB_DS_TRIE_NODE_AND_ITS_TRAITS::node_update, \\\n \t     typename __gnu_cxx::typelist::create2<E_Access_Traits, PB_DS_TRIE_NODE_AND_ITS_TRAITS >::type, Allocator>\n \n@@ -588,7 +588,7 @@ namespace pb_ds\n     // be copied by the E_Access_Traits object of the container\n     // object.\n     trie(const e_access_traits& t)\n-      : base_type(t) { }\n+    : base_type(t) { }\n \n     // Constructor taking __iterators to a range of value_types. The\n     // value_types between first_it and last_it will be inserted into\n@@ -602,19 +602,19 @@ namespace pb_ds\n     // last_it will be inserted into the container object.\n     template<typename It>\n     trie(It first, It last, const e_access_traits& t)\n-      : base_type(t)\n+    : base_type(t)\n     { base_type::copy_from_range(first, last); }\n \n     trie(const trie& other)\n-      : base_type((const base_type&)other) { }\n+    : base_type((const base_type&)other) { }\n \n     virtual\n     ~trie() { }\n \n     trie& \n     operator=(const trie& other)\n     {\n-      if (this !=& other)\n+      if (this != &other)\n \t{\n \t  trie tmp(other);\n \t  swap(tmp);\n@@ -661,7 +661,7 @@ namespace pb_ds\n     { base_type::copy_from_range(first, last); }\n \n     list_update(const list_update& other)\n-      : base_type((const base_type&)other) { }\n+    : base_type((const base_type&)other) { }\n \n     virtual\n     ~list_update() { }"}, {"sha": "93035e860796ab1fdb9e5013d0ee7f5a32c89763", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp", "status": "modified", "additions": 102, "deletions": 187, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -66,9 +66,9 @@ namespace pb_ds\n   {\n \n #define PB_DS_CLASS_T_DEC \\\n-    template<typename Key, typename Mapped, class Hash_Fn, \\\n-\t     class Eq_Fn, class Allocator, bool Store_Hash, \\\n-\t     class Comb_Hash_Fn, class Resize_Policy>\n+    template<typename Key, typename Mapped, typename Hash_Fn, \\\n+\t     typename Eq_Fn, typename Allocator, bool Store_Hash, \\\n+\t     typename Comb_Hash_Fn, typename Resize_Policy>\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_CLASS_NAME cc_ht_map_data_\n@@ -113,12 +113,12 @@ namespace pb_ds\n     // <011i$i0|\\|-<|-|4i|\\|i|\\|g |-|4$|-| 74813.\n     template<typename Key,\n \t     typename Mapped,\n-\t     class Hash_Fn,\n-\t     class Eq_Fn,\n-\t     class Allocator,\n+\t     typename Hash_Fn,\n+\t     typename Eq_Fn,\n+\t     typename Allocator,\n \t     bool Store_Hash,\n-\t     class Comb_Hash_Fn,\n-\t     class Resize_Policy >\n+\t     typename Comb_Hash_Fn,\n+\t     typename Resize_Policy >\n     class PB_DS_CLASS_NAME:\n #ifdef _GLIBCXX_DEBUG\n       protected PB_DS_MAP_DEBUG_BASE_C_DEC,\n@@ -128,48 +128,42 @@ namespace pb_ds\n       public PB_DS_RANGED_HASH_FN_C_DEC,\n       public PB_DS_TYPES_TRAITS_C_DEC\n     {\n-\n     private:\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::comp_hash comp_hash;\n-\n-      struct entry : public PB_DS_TYPES_TRAITS_C_DEC::stored_value_type\n+      typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n+      typedef typename traits_base::comp_hash comp_hash;\n+      typedef typename traits_base::value_type value_type_;\n+      typedef typename traits_base::pointer pointer_;\n+      typedef typename traits_base::const_pointer const_pointer_;\n+      typedef typename traits_base::reference reference_;\n+      typedef typename traits_base::const_reference const_reference_;\n+      typedef typename traits_base::store_extra_false_type store_hash_false_type;\n+      typedef typename traits_base::store_extra_true_type store_hash_true_type;\n+      typedef typename traits_base::no_throw_copies_false_type no_throw_copies_false_type;\n+      typedef typename traits_base::no_throw_copies_true_type no_throw_copies_true_type;\n+\n+      struct entry : public traits_base::stored_value_type\n       {\n \ttypename Allocator::template rebind<entry>::other::pointer m_p_next;\n       };\n \n-      typedef\n-      typename Allocator::template rebind<entry>::other\n-      entry_allocator;\n+      typedef cond_dealtor<entry, Allocator> cond_dealtor_t;\n \n+      typedef typename Allocator::template rebind<entry>::other entry_allocator;\n       typedef typename entry_allocator::pointer entry_pointer;\n-\n       typedef typename entry_allocator::const_pointer const_entry_pointer;\n-\n       typedef typename entry_allocator::reference entry_reference;\n+      typedef typename entry_allocator::const_reference const_entry_reference;\n \n-      typedef\n-      typename entry_allocator::const_reference\n-      const_entry_reference;\n-\n-      typedef\n-      typename Allocator::template rebind<entry_pointer>::other\n-      entry_pointer_allocator;\n-\n+      typedef typename Allocator::template rebind<entry_pointer>::other entry_pointer_allocator;\n       typedef typename entry_pointer_allocator::pointer entry_pointer_array;\n \n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::value_type value_type_;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::pointer pointer_;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_pointer\n-      const_pointer_;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::reference reference_;\n+      typedef PB_DS_RANGED_HASH_FN_C_DEC ranged_hash_fn_base;\n+      typedef PB_DS_HASH_EQ_FN_C_DEC hash_eq_fn_base;\n+      typedef Resize_Policy resize_base;\n \n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_reference\n-      const_reference_;\n+#ifdef _GLIBCXX_DEBUG\n+      typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n+#endif \n \n #define PB_DS_GEN_POS std::pair<entry_pointer, typename Allocator::size_type>\n \n@@ -181,69 +175,34 @@ namespace pb_ds\n #undef PB_DS_GEN_POS\n \n     public:\n-\n+      typedef Allocator allocator;\n       typedef typename Allocator::size_type size_type;\n-\n       typedef typename Allocator::difference_type difference_type;\n-\n       typedef Hash_Fn hash_fn;\n-\n       typedef Eq_Fn eq_fn;\n-\n-      typedef Allocator allocator;\n-\n       typedef Comb_Hash_Fn comb_hash_fn;\n-\n       typedef Resize_Policy resize_policy;\n \n       enum\n \t{\n \t  store_hash = Store_Hash\n \t};\n \n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_type key_type;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_pointer key_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_key_pointer\n-      const_key_pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_reference key_reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_key_reference\n-      const_key_reference;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::mapped_type mapped_type;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::mapped_pointer\n-      mapped_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_mapped_pointer\n-      const_mapped_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::mapped_reference\n-      mapped_reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_mapped_reference\n-      const_mapped_reference;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::value_type value_type;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::pointer pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::const_pointer const_pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::reference reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_reference\n-      const_reference;\n+      typedef typename traits_base::key_type key_type;\n+      typedef typename traits_base::key_pointer key_pointer;\n+      typedef typename traits_base::const_key_pointer const_key_pointer;\n+      typedef typename traits_base::key_reference key_reference;\n+      typedef typename traits_base::const_key_reference const_key_reference;\n+      typedef typename traits_base::mapped_type mapped_type;\n+      typedef typename traits_base::mapped_pointer mapped_pointer;\n+      typedef typename traits_base::const_mapped_pointer const_mapped_pointer;\n+      typedef typename traits_base::mapped_reference mapped_reference;\n+      typedef typename traits_base::const_mapped_reference const_mapped_reference;\n+      typedef typename traits_base::value_type value_type;\n+      typedef typename traits_base::pointer pointer;\n+      typedef typename traits_base::const_pointer const_pointer;\n+      typedef typename traits_base::reference reference;\n+      typedef typename traits_base::const_reference const_reference;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       typedef point_iterator_ point_iterator;\n@@ -265,29 +224,28 @@ namespace pb_ds\n \n       typedef const_iterator_ const_iterator;\n \n-    public:\n-\n       PB_DS_CLASS_NAME();\n \n-      PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn);\n+      PB_DS_CLASS_NAME(const Hash_Fn&);\n \n-      PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn);\n+      PB_DS_CLASS_NAME(const Hash_Fn&, const Eq_Fn&);\n \n-      PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Hash_Fn& r_comb_hash_fn);\n+      PB_DS_CLASS_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Hash_Fn&);\n \n-      PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Hash_Fn& r_comb_hash_fn, const Resize_Policy& r_resize_policy);\n+      PB_DS_CLASS_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Hash_Fn&, \n+\t\t       const Resize_Policy&);\n \n-      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other);\n+      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC&);\n \n       virtual\n       ~PB_DS_CLASS_NAME();\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(PB_DS_CLASS_C_DEC&);\n \n       template<typename It>\n       void\n-      copy_from_range(It first_it, It last_it);\n+      copy_from_range(It, It);\n \n       void\n       initialize();\n@@ -327,9 +285,7 @@ namespace pb_ds\n \n       inline std::pair<point_iterator, bool>\n       insert(const_reference r_val)\n-      {\n-\treturn insert_imp(r_val, traits_base::m_store_extra_indicator);\n-      }\n+      { return insert_imp(r_val, traits_base::m_store_extra_indicator); }\n \n       inline mapped_reference\n       operator[](const_key_reference r_key)\n@@ -343,10 +299,10 @@ namespace pb_ds\n       }\n \n       inline point_iterator\n-      find(const_key_reference r_key);\n+      find(const_key_reference);\n \n       inline const_point_iterator\n-      find(const_key_reference r_key) const;\n+      find(const_key_reference) const;\n \n       inline point_iterator\n       find_end();\n@@ -355,11 +311,11 @@ namespace pb_ds\n       find_end() const;\n \n       inline bool\n-      erase(const_key_reference r_key);\n+      erase(const_key_reference);\n \n       template<typename Pred>\n       inline size_type\n-      erase_if(Pred pred);\n+      erase_if(Pred);\n \n       void\n       clear();\n@@ -387,38 +343,6 @@ namespace pb_ds\n #endif \n \n     private:\n-      typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n-\n-      typedef PB_DS_RANGED_HASH_FN_C_DEC ranged_hash_fn_base;\n-\n-      typedef PB_DS_HASH_EQ_FN_C_DEC hash_eq_fn_base;\n-\n-      typedef Resize_Policy resize_base;\n-\n-#ifdef _GLIBCXX_DEBUG\n-      typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n-#endif \n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::store_extra_false_type\n-      store_hash_false_type;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::store_extra_true_type\n-      store_hash_true_type;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::\n-      no_throw_copies_false_type\n-      no_throw_copies_false_type;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::\n-      no_throw_copies_true_type\n-      no_throw_copies_true_type;\n-\n-    private:\n-\n       void\n       deallocate_all();\n \n@@ -441,27 +365,27 @@ namespace pb_ds\n       resize_imp_no_exceptions_reassign_pointer(entry_pointer, entry_pointer_array, store_hash_false_type);\n \n       inline entry_pointer\n-      resize_imp_no_exceptions_reassign_pointer(entry_pointer p_e, entry_pointer_array a_p_entries_resized, store_hash_true_type);\n+      resize_imp_no_exceptions_reassign_pointer(entry_pointer, entry_pointer_array, store_hash_true_type);\n \n       void\n-      deallocate_links_in_list(entry_pointer p_e);\n+      deallocate_links_in_list(entry_pointer);\n \n       inline entry_pointer\n-      get_entry(const_reference r_val, no_throw_copies_false_type);\n+      get_entry(const_reference, no_throw_copies_false_type);\n \n       inline entry_pointer\n-      get_entry(const_reference r_val, no_throw_copies_true_type);\n+      get_entry(const_reference, no_throw_copies_true_type);\n \n       inline void\n-      rels_entry(entry_pointer p_e);\n+      rels_entry(entry_pointer);\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       inline mapped_reference\n       subscript_imp(const_key_reference r_key, store_hash_false_type)\n       {\n \t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n         const size_type pos = ranged_hash_fn_base::operator()(r_key);\n-\tentry_pointer p_e = m_a_p_entries[pos];\n+\tentry_pointer p_e = m_entries[pos];\n \tresize_base::notify_insert_search_start();\n \n \twhile (p_e != NULL \n@@ -487,7 +411,7 @@ namespace pb_ds\n       {\n \t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n \tcomp_hash pos_hash_pair = ranged_hash_fn_base::operator()(r_key);\n-\tentry_pointer p_e = m_a_p_entries[pos_hash_pair.first];\n+\tentry_pointer p_e = m_entries[pos_hash_pair.first];\n \tresize_base::notify_insert_search_start();\n \twhile (p_e != NULL && \n \t       !hash_eq_fn_base::operator()(p_e->m_value.first, p_e->m_hash, r_key, pos_hash_pair.second))\n@@ -504,15 +428,16 @@ namespace pb_ds\n \t  }\n \n \t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n-\treturn insert_new_imp(value_type(r_key, mapped_type()), pos_hash_pair)->second;\n+\treturn insert_new_imp(value_type(r_key, mapped_type()), \n+\t\t\t      pos_hash_pair)->second;\n       }\n #endif \n \n       inline std::pair<point_iterator, bool>\n-      insert_imp(const_reference r_val, store_hash_false_type);\n+      insert_imp(const_reference, store_hash_false_type);\n \n       inline std::pair<point_iterator, bool>\n-      insert_imp(const_reference r_val, store_hash_true_type);\n+      insert_imp(const_reference, store_hash_true_type);\n \n       inline pointer\n       insert_new_imp(const_reference r_val, size_type pos)\n@@ -521,11 +446,11 @@ namespace pb_ds\n \t  pos = ranged_hash_fn_base::operator()(PB_DS_V2F(r_val));\n \n \t// Following lines might throw an exception.\n-\tentry_pointer p_e = get_entry(r_val, PB_DS_TYPES_TRAITS_C_DEC::m_no_throw_copies_indicator);\n+\tentry_pointer p_e = get_entry(r_val, traits_base::m_no_throw_copies_indicator);\n \n \t// At this point no exceptions can be thrown.\n-\tp_e->m_p_next = m_a_p_entries[pos];\n-\tm_a_p_entries[pos] = p_e;\n+\tp_e->m_p_next = m_entries[pos];\n+\tm_entries[pos] = p_e;\n \tresize_base::notify_inserted(++m_num_used_e);\n \n \t_GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(r_val));)\n@@ -540,12 +465,12 @@ namespace pb_ds\n \tif (do_resize_if_needed())\n \t  r_pos_hash_pair = ranged_hash_fn_base::operator()(PB_DS_V2F(r_val));\n \n-\tentry_pointer p_e = get_entry(r_val, PB_DS_TYPES_TRAITS_C_DEC::m_no_throw_copies_indicator);\n+\tentry_pointer p_e = get_entry(r_val, traits_base::m_no_throw_copies_indicator);\n \n \t// At this point no exceptions can be thrown.\n \tp_e->m_hash = r_pos_hash_pair.second;\n-\tp_e->m_p_next = m_a_p_entries[r_pos_hash_pair.first];\n-\tm_a_p_entries[r_pos_hash_pair.first] = p_e;\n+\tp_e->m_p_next = m_entries[r_pos_hash_pair.first];\n+\tm_entries[r_pos_hash_pair.first] = p_e;\n \tresize_base::notify_inserted(++m_num_used_e);\n \t_GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(r_val));)\n \t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n@@ -555,7 +480,7 @@ namespace pb_ds\n       inline pointer\n       find_key_pointer(const_key_reference r_key, store_hash_false_type)\n       {\n-\tentry_pointer p_e = m_a_p_entries[ranged_hash_fn_base::operator()(r_key)];\n+\tentry_pointer p_e = m_entries[ranged_hash_fn_base::operator()(r_key)];\n \tresize_base::notify_find_search_start();\n \twhile (p_e != NULL && \n \t       !hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), r_key))\n@@ -579,7 +504,7 @@ namespace pb_ds\n       find_key_pointer(const_key_reference r_key, store_hash_true_type)\n       {\n \tcomp_hash pos_hash_pair = ranged_hash_fn_base::operator()(r_key);\n-\tentry_pointer p_e = m_a_p_entries[pos_hash_pair.first];\n+\tentry_pointer p_e = m_entries[pos_hash_pair.first];\n \tresize_base::notify_find_search_start();\n \twhile (p_e != NULL && \n \t       !hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value),\n@@ -602,17 +527,18 @@ namespace pb_ds\n       }\n \n       inline bool\n-      erase_in_pos_imp(const_key_reference r_key, size_type pos);\n+      erase_in_pos_imp(const_key_reference, size_type);\n \n       inline bool\n-      erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair);\n+      erase_in_pos_imp(const_key_reference, const comp_hash&);\n \n       inline void\n-      erase_entry_pointer(entry_pointer& r_p_e);\n+      erase_entry_pointer(entry_pointer&);\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       void\n-      inc_it_state(pointer& r_p_value, std::pair<entry_pointer, size_type>& r_pos) const\n+      inc_it_state(pointer& r_p_value, \n+\t\t   std::pair<entry_pointer, size_type>& r_pos) const\n       {\n \tinc_it_state((const_mapped_pointer& )r_p_value, r_pos);\n       }\n@@ -626,15 +552,15 @@ namespace pb_ds\n \tr_pos.first = r_pos.first->m_p_next;\n \tif (r_pos.first != NULL)\n \t  {\n-\t    r_p_value =& r_pos.first->m_value;\n+\t    r_p_value = &r_pos.first->m_value;\n \t    return;\n \t  }\n \n-\tfor (++r_pos.second; r_pos.second < m_num_e_p; ++r_pos.second)\n-\t  if (m_a_p_entries[r_pos.second] != NULL)\n+\tfor (++r_pos.second; r_pos.second < m_num_e; ++r_pos.second)\n+\t  if (m_entries[r_pos.second] != NULL)\n \t    {\n-\t      r_pos.first = m_a_p_entries[r_pos.second];\n-\t      r_p_value =& r_pos.first->m_value;\n+\t      r_pos.first = m_entries[r_pos.second];\n+\t      r_p_value = &r_pos.first->m_value;\n \t      return;\n \t    }\n \tr_p_value = NULL;\n@@ -644,11 +570,11 @@ namespace pb_ds\n       get_start_it_state(pointer& r_p_value, \n \t\t\t std::pair<entry_pointer, size_type>& r_pos) const\n       {\n-\tfor (r_pos.second = 0; r_pos.second < m_num_e_p; ++r_pos.second)\n-\t  if (m_a_p_entries[r_pos.second] != NULL)\n+\tfor (r_pos.second = 0; r_pos.second < m_num_e; ++r_pos.second)\n+\t  if (m_entries[r_pos.second] != NULL)\n \t    {\n-\t      r_pos.first = m_a_p_entries[r_pos.second];\n-\t      r_p_value =& r_pos.first->m_value;\n+\t      r_pos.first = m_entries[r_pos.second];\n+\t      r_p_value = &r_pos.first->m_value;\n \t      return;\n \t    }\n \tr_p_value = NULL;\n@@ -673,31 +599,22 @@ namespace pb_ds\n #endif \n \n     private:\n-      static entry_allocator s_entry_allocator;\n-\n-      static entry_pointer_allocator s_entry_pointer_allocator;\n-\n-      typedef cond_dealtor< entry, Allocator> cond_dealtor_t;\n-\n-      entry_pointer_array m_a_p_entries;\n-\n-      size_type m_num_e_p;\n-\n-      size_type m_num_used_e;\n-\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       friend class iterator_;\n #endif \n \n       friend class const_iterator_;\n \n-      static iterator s_end_it;\n+      static entry_allocator \t\ts_entry_allocator;\n+      static entry_pointer_allocator \ts_entry_pointer_allocator;\n+      static iterator \t\t\ts_end_it;\n+      static const_iterator \t\ts_const_end_it;\n+      static point_iterator \t\ts_find_end_it;\n+      static const_point_iterator \ts_const_find_end_it;\n \n-      static const_iterator s_const_end_it;\n-\n-      static point_iterator s_find_end_it;\n-\n-      static const_point_iterator s_const_find_end_it;\n+      size_type \t\t\tm_num_e;\n+      size_type \t\t\tm_num_used_e;\n+      entry_pointer_array \t\tm_entries;\n \n       enum\n \t{\n@@ -727,10 +644,8 @@ namespace pb_ds\n #undef PB_DS_TYPES_TRAITS_C_DEC\n #undef PB_DS_MAP_DEBUG_BASE_C_DEC\n #undef PB_DS_CLASS_NAME\n-\n #undef PB_DS_V2F\n #undef PB_DS_V2S\n-\n #undef PB_DS_STATIC_ASSERT\n \n   } // namespace detail"}, {"sha": "7273b0ff522753f3e428977011e09298b89d11f4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 24, "deletions": 33, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -67,9 +67,8 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME() :\n   ranged_hash_fn_base(resize_base::get_nearest_larger_size(1)),\n-  m_a_p_entries(s_entry_pointer_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n-  m_num_e_p(resize_base::get_nearest_larger_size(1)),\n-  m_num_used_e(0)\n+  m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n+  m_entries(s_entry_pointer_allocator.allocate(m_num_e))\n {\n   initialize();\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n@@ -79,9 +78,8 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn) :\n   ranged_hash_fn_base(resize_base::get_nearest_larger_size(1), r_hash_fn),\n-  m_a_p_entries(s_entry_pointer_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n-  m_num_e_p(resize_base::get_nearest_larger_size(1)),\n-  m_num_used_e(0)\n+  m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n+  m_entries(s_entry_pointer_allocator.allocate(m_num_e))\n {\n   initialize();\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n@@ -92,13 +90,12 @@ PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn) :\n   PB_DS_HASH_EQ_FN_C_DEC(r_eq_fn),\n   ranged_hash_fn_base(resize_base::get_nearest_larger_size(1), r_hash_fn),\n-  m_a_p_entries(s_entry_pointer_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n-  m_num_e_p(resize_base::get_nearest_larger_size(1)),\n-  m_num_used_e(0)\n+  m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n+  m_entries(s_entry_pointer_allocator.allocate(m_num_e))\n {\n-  std::fill(m_a_p_entries, m_a_p_entries + m_num_e_p, (entry_pointer)NULL);\n+  std::fill(m_entries, m_entries + m_num_e, (entry_pointer)NULL);\n   Resize_Policy::notify_cleared();\n-  ranged_hash_fn_base::notify_resized(m_num_e_p);\n+  ranged_hash_fn_base::notify_resized(m_num_e);\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n }\n \n@@ -107,11 +104,9 @@ PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Hash_Fn& r_comb_hash_fn) :\n   PB_DS_HASH_EQ_FN_C_DEC(r_eq_fn),\n   ranged_hash_fn_base(resize_base::get_nearest_larger_size(1),\n-\t\t      r_hash_fn,\n-\t\t      r_comb_hash_fn),\n-  m_a_p_entries(s_entry_pointer_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n-  m_num_e_p(resize_base::get_nearest_larger_size(1)),\n-  m_num_used_e(0)\n+\t\t      r_hash_fn, r_comb_hash_fn),\n+  m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n+  m_entries(s_entry_pointer_allocator.allocate(m_num_e))\n {\n   initialize();\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n@@ -123,11 +118,9 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Hash\n   PB_DS_HASH_EQ_FN_C_DEC(r_eq_fn),\n   Resize_Policy(r_resize_policy),\n   ranged_hash_fn_base(resize_base::get_nearest_larger_size(1),\n-\t\t      r_hash_fn,\n-\t\t      r_comb_hash_fn),\n-  m_a_p_entries(s_entry_pointer_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n-  m_num_e_p(resize_base::get_nearest_larger_size(1)),\n-  m_num_used_e(0)\n+\t\t      r_hash_fn, r_comb_hash_fn),\n+  m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n+  m_entries(s_entry_pointer_allocator.allocate(m_num_e))\n {\n   initialize();\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n@@ -140,19 +133,17 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n   map_debug_base(other),\n #endif \n   PB_DS_HASH_EQ_FN_C_DEC(other),\n-  resize_base(other),\n-  ranged_hash_fn_base(other),\n-  m_a_p_entries(m_a_p_entries = s_entry_pointer_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n-  m_num_e_p(resize_base::get_nearest_larger_size(1)),\n-  m_num_used_e(0)\n+  resize_base(other), ranged_hash_fn_base(other),\n+  m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n+  m_entries(m_entries = s_entry_pointer_allocator.allocate(m_num_e))\n {\n   initialize();\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n     try\n       {\n         copy_from_range(other.begin(), other.end());\n       }\n-    catch(...)\n+    catch (...)\n       {\n         deallocate_all();\n         throw;\n@@ -173,8 +164,8 @@ swap(PB_DS_CLASS_C_DEC& other)\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n \n-  std::swap(m_a_p_entries, other.m_a_p_entries);\n-  std::swap(m_num_e_p, other.m_num_e_p);\n+  std::swap(m_entries, other.m_entries);\n+  std::swap(m_num_e, other.m_num_e);\n   std::swap(m_num_used_e, other.m_num_used_e);\n   ranged_hash_fn_base::swap(other);\n   hash_eq_fn_base::swap(other);\n@@ -191,16 +182,16 @@ PB_DS_CLASS_C_DEC::\n deallocate_all()\n {\n   clear();\n-  s_entry_pointer_allocator.deallocate(m_a_p_entries, m_num_e_p);\n+  s_entry_pointer_allocator.deallocate(m_entries, m_num_e);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n initialize()\n {\n-  std::fill(m_a_p_entries, m_a_p_entries + m_num_e_p, entry_pointer(NULL));\n-  Resize_Policy::notify_resized(m_num_e_p);\n+  std::fill(m_entries, m_entries + m_num_e, entry_pointer(NULL));\n+  Resize_Policy::notify_resized(m_num_e);\n   Resize_Policy::notify_cleared();\n-  ranged_hash_fn_base::notify_resized(m_num_e_p);\n+  ranged_hash_fn_base::notify_resized(m_num_e);\n }"}, {"sha": "7c38d1092e297148ee75625e4a930f04f0b2d140", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -55,7 +55,7 @@ constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, integral\n \n   // At this point no exceptions can be thrown.\n \n-  p_e->m_p_next = m_a_p_entries[pos];\n-  m_a_p_entries[pos] = p_e;\n+  p_e->m_p_next = m_entries[pos];\n+  m_entries[pos] = p_e;\n   _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(r_key);)\n }"}, {"sha": "6ebd1f722b770535099d7e7a6ebe0eb7954f92a9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -55,9 +55,9 @@ constructor_insert_new_imp(const_reference r_val, size_type pos, true_type)\n \t\t\t\ttraits_base::s_no_throw_copies_indicator);\n \n   // At this point no exceptions can be thrown.\n-  p_e->m_p_next = m_a_p_entries[pos];\n+  p_e->m_p_next = m_entries[pos];\n   p_e->m_hash = ranged_hash_fn_base::operator()((const_key_reference)(PB_DS_V2F(p_e->m_value))).second;\n \n-  m_a_p_entries[pos] = p_e;\n+  m_entries[pos] = p_e;\n   _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(r_key);)\n }"}, {"sha": "61cbfa90d2e13a79d8360b09e453883e8f900907", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/debug_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -52,7 +52,7 @@ PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n   map_debug_base::check_size(m_num_used_e);\n-  assert_entry_pointer_array_valid(m_a_p_entries);\n+  assert_entry_pointer_array_valid(m_entries);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -61,7 +61,7 @@ PB_DS_CLASS_C_DEC::\n assert_entry_pointer_array_valid(const entry_pointer_array a_p_entries) const\n {\n   size_type iterated_num_used_e = 0;\n-  for (size_type pos = 0; pos < m_num_e_p; ++pos)\n+  for (size_type pos = 0; pos < m_num_e; ++pos)\n     {\n       entry_pointer p_e = a_p_entries[pos];\n       while (p_e != NULL)"}, {"sha": "3a821385028fb9980186c92b764ae137ab230332", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -70,25 +70,25 @@ erase_if(Pred pred)\n {\n   size_type num_ersd = 0;\n \n-  for (size_type pos = 0; pos < m_num_e_p; ++pos)\n+  for (size_type pos = 0; pos < m_num_e; ++pos)\n     {\n       typedef\n \ttypename PB_DS_TYPES_TRAITS_C_DEC::const_reference\n \tconst_reference;\n \n-      while (m_a_p_entries[pos] != NULL&& \n-\t     pred(m_a_p_entries[pos]->m_value))\n+      while (m_entries[pos] != NULL&& \n+\t     pred(m_entries[pos]->m_value))\n         {\n \t  ++num_ersd;\n \n-\t  entry_pointer p_next_e = m_a_p_entries[pos]->m_p_next;\n+\t  entry_pointer p_next_e = m_entries[pos]->m_p_next;\n \n-\t  erase_entry_pointer(m_a_p_entries[pos]);\n+\t  erase_entry_pointer(m_entries[pos]);\n \n-\t  m_a_p_entries[pos] = p_next_e;\n+\t  m_entries[pos] = p_next_e;\n         }\n \n-      entry_pointer p_e = m_a_p_entries[pos];\n+      entry_pointer p_e = m_entries[pos];\n \n       while (p_e != NULL&&  p_e->m_p_next != NULL)\n         {\n@@ -113,9 +113,9 @@ void\n PB_DS_CLASS_C_DEC::\n clear()\n {\n-  for (size_type pos = 0; pos < m_num_e_p; ++pos)\n-    while (m_a_p_entries[pos] != NULL)\n-      erase_entry_pointer(m_a_p_entries[pos]);\n+  for (size_type pos = 0; pos < m_num_e; ++pos)\n+    while (m_entries[pos] != NULL)\n+      erase_entry_pointer(m_entries[pos]);\n \n   do_resize_if_needed_no_throw();\n "}, {"sha": "298c580c34e7d678ecf928e322667135e401c239", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -63,7 +63,7 @@ erase_in_pos_imp(const_key_reference r_key, size_type pos)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n-    entry_pointer p_e = m_a_p_entries[pos];\n+    entry_pointer p_e = m_entries[pos];\n \n   resize_base::notify_erase_search_start();\n \n@@ -88,7 +88,7 @@ erase_in_pos_imp(const_key_reference r_key, size_type pos)\n       _GLIBCXX_DEBUG_ONLY(map_debug_base::\n \t\t     check_key_exists(r_key);)\n \n-        erase_entry_pointer(m_a_p_entries[pos]);\n+        erase_entry_pointer(m_entries[pos]);\n \n       do_resize_if_needed_no_throw();\n "}, {"sha": "ddd898bdc7ca36a1ffe5bf8ded6b2c0dddda4561", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -52,7 +52,7 @@ erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n-    entry_pointer p_e = m_a_p_entries[r_pos_hash_pair.first];\n+    entry_pointer p_e = m_entries[r_pos_hash_pair.first];\n \n   resize_base::notify_erase_search_start();\n \n@@ -80,7 +80,7 @@ erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n       _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(\n \t\t\t\t\t\t      r_key);)\n \n-        erase_entry_pointer(m_a_p_entries[r_pos_hash_pair.first]);\n+        erase_entry_pointer(m_entries[r_pos_hash_pair.first]);\n \n       do_resize_if_needed_no_throw();\n "}, {"sha": "41815c866080cc7460727b6b1fd2a2469db98163", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/insert_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -58,7 +58,7 @@ insert_imp(const_reference r_val, store_hash_false_type)\n \n   const size_type pos = ranged_hash_fn_base::operator()(r_key);\n \n-  entry_pointer p_e = m_a_p_entries[pos];\n+  entry_pointer p_e = m_entries[pos];\n \n   resize_base::notify_insert_search_start();\n "}, {"sha": "73a0aa9a02b1e9dcaad3eda9dcaeadf0eb5c0028", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/insert_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -58,7 +58,7 @@ insert_imp(const_reference r_val, store_hash_true_type)\n \n   comp_hash pos_hash_pair = ranged_hash_fn_base::operator()(r_key);\n \n-  entry_pointer p_e = m_a_p_entries[pos_hash_pair.first];\n+  entry_pointer p_e = m_entries[pos_hash_pair.first];\n \n   resize_base::notify_insert_search_start();\n "}, {"sha": "fb692b50940a7f20a761ed27a2d1e938cb2dac19", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -52,7 +52,7 @@ do_resize_if_needed()\n   if (!resize_base::is_resize_needed())\n     return (false);\n \n-  resize_imp(resize_base::get_new_size(        m_num_e_p, m_num_used_e));\n+  resize_imp(resize_base::get_new_size(        m_num_e, m_num_used_e));\n \n   return (true);\n }\n@@ -76,7 +76,7 @@ do_resize_if_needed_no_throw()\n \n   try\n     {\n-      resize_imp(resize_base::get_new_size(            m_num_e_p, m_num_used_e));\n+      resize_imp(resize_base::get_new_size(            m_num_e, m_num_used_e));\n     }\n   catch(...)\n     { }\n@@ -91,10 +91,10 @@ resize_imp(size_type new_size)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n-    if (new_size == m_num_e_p)\n+    if (new_size == m_num_e)\n       return;\n \n-  const size_type old_size = m_num_e_p;\n+  const size_type old_size = m_num_e;\n \n   entry_pointer_array a_p_entries_resized;\n \n@@ -108,7 +108,7 @@ resize_imp(size_type new_size)\n \n       a_p_entries_resized = s_entry_pointer_allocator.allocate(new_size);\n \n-      m_num_e_p = new_size;\n+      m_num_e = new_size;\n     }\n   catch(...)\n     {\n@@ -131,23 +131,23 @@ void\n PB_DS_CLASS_C_DEC::\n resize_imp_no_exceptions(size_type new_size, entry_pointer_array a_p_entries_resized, size_type old_size)\n {\n-  std::fill(a_p_entries_resized, a_p_entries_resized + m_num_e_p,(entry_pointer)NULL);\n+  std::fill(a_p_entries_resized, a_p_entries_resized + m_num_e,(entry_pointer)NULL);\n \n   for (size_type pos = 0; pos < old_size; ++pos)\n     {\n-      entry_pointer p_e = m_a_p_entries[pos];\n+      entry_pointer p_e = m_entries[pos];\n \n       while (p_e != NULL)\n \tp_e = resize_imp_no_exceptions_reassign_pointer(p_e,  a_p_entries_resized,  traits_base::m_store_extra_indicator);\n     }\n \n-  m_num_e_p = new_size;\n+  m_num_e = new_size;\n \n   _GLIBCXX_DEBUG_ONLY(assert_entry_pointer_array_valid(a_p_entries_resized);)\n \n-    s_entry_pointer_allocator.deallocate(m_a_p_entries, old_size);\n+    s_entry_pointer_allocator.deallocate(m_entries, old_size);\n \n-  m_a_p_entries = a_p_entries_resized;\n+  m_entries = a_p_entries_resized;\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }"}, {"sha": "e40a45c60ab88184e968ea4b112513856b9da6a2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/trace_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ftrace_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -51,14 +51,14 @@ void\n PB_DS_CLASS_C_DEC::\n trace() const\n {\n-  std::cerr << static_cast<unsigned long>(m_num_e_p) << \" \" <<\n+  std::cerr << static_cast<unsigned long>(m_num_e) << \" \" <<\n     static_cast<unsigned long>(m_num_used_e) << std::endl;\n \n-  for (size_type i = 0; i < m_num_e_p; ++i)\n+  for (size_type i = 0; i < m_num_e; ++i)\n     {\n       std::cerr << static_cast<unsigned long>(i) << \" \";\n \n-      trace_list(m_a_p_entries[i]);\n+      trace_list(m_entries[i]);\n \n       std::cerr << std::endl;\n     }"}, {"sha": "91763669c767019cfe1cb76b6a18daf99435ee1e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 22, "deletions": 41, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fconstructors_destructor_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -49,7 +49,8 @@ PB_DS_CLASS_NAME()\n { }\n \n inline\n-PB_DS_CLASS_NAME(const PB_DS_CLASS_NAME& other) : base_type((const base_type&)other)\n+PB_DS_CLASS_NAME(const PB_DS_CLASS_NAME& other) \n+: base_type((const base_type&)other)\n { }\n \n template<typename T0>\n@@ -69,60 +70,40 @@ PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2) : base_type(t0, t1, t2)\n \n template<typename T0, typename T1, typename T2, typename T3>\n inline\n-PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3) : base_type(t0, t1, t2, t3)\n+PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3) \n+: base_type(t0, t1, t2, t3)\n { }\n \n-template<typename T0,\n-\t typename T1,\n-\t typename T2,\n-\t typename T3,\n-\t typename T4>\n+template<typename T0, typename T1, typename T2, typename T3, typename T4>\n inline\n-PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4) : base_type(t0, t1, t2, t3, t4)\n+PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4) \n+: base_type(t0, t1, t2, t3, t4)\n { }\n \n-template<typename T0,\n-\t typename T1,\n-\t typename T2,\n-\t typename T3,\n-\t typename T4,\n+template<typename T0, typename T1, typename T2, typename T3, typename T4,\n \t typename T5>\n inline\n-PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5) : base_type(t0, t1, t2, t3, t4, t5)\n+PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5) \n+: base_type(t0, t1, t2, t3, t4, t5)\n { }\n \n-template<typename T0,\n-\t typename T1,\n-\t typename T2,\n-\t typename T3,\n-\t typename T4,\n-\t typename T5,\n-\t typename T6>\n+template<typename T0, typename T1, typename T2, typename T3, typename T4,\n+\t typename T5, typename T6>\n inline\n-PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6) : base_type(t0, t1, t2, t3, t4, t5, t6)\n+PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6) \n+: base_type(t0, t1, t2, t3, t4, t5, t6)\n { }\n \n-template<typename T0,\n-\t typename T1,\n-\t typename T2,\n-\t typename T3,\n-\t typename T4,\n-\t typename T5,\n-\t typename T6,\n-\t typename T7>\n+template<typename T0, typename T1, typename T2, typename T3, typename T4,\n+\t typename T5, typename T6, typename T7>\n inline\n-PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7) : base_type(t0, t1, t2, t3, t4, t5, t6, t7)\n+PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7) \n+: base_type(t0, t1, t2, t3, t4, t5, t6, t7)\n { }\n \n-template<typename T0,\n-\t typename T1,\n-\t typename T2,\n-\t typename T3,\n-\t typename T4,\n-\t typename T5,\n-\t typename T6,\n-\t typename T7,\n-\t typename T8>\n+template<typename T0, typename T1, typename T2, typename T3, typename T4,\n+\t typename T5, typename T6, typename T7, typename T8>\n inline\n-PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8) : base_type(t0, t1, t2, t3, t4, t5, t6, t7, t8)\n+PB_DS_CLASS_NAME(T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8)\n+: base_type(t0, t1, t2, t3, t4, t5, t6, t7, t8)\n { }"}, {"sha": "fa1d9b204e926965361ebd0c181863ba9404f30f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 44, "deletions": 50, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -61,79 +61,76 @@ copy_from_range(It first_it, It last_it)\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME() :\n-  ranged_probe_fn_base(resize_base::get_nearest_larger_size(1)),\n-  m_a_entries(s_entry_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n-  m_num_e(resize_base::get_nearest_larger_size(1)),\n-  m_num_used_e(0)\n+PB_DS_CLASS_NAME() \n+: ranged_probe_fn_base(resize_base::get_nearest_larger_size(1)),\n+  m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n+  m_entries(s_entry_allocator.allocate(m_num_e))\n {\n   initialize();\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn)    :\n-  ranged_probe_fn_base(resize_base::get_nearest_larger_size(1), r_hash_fn),\n-  m_a_entries(s_entry_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n-  m_num_e(resize_base::get_nearest_larger_size(1)),\n-  m_num_used_e(0)\n+PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn)    \n+: ranged_probe_fn_base(resize_base::get_nearest_larger_size(1), r_hash_fn),\n+  m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n+  m_entries(s_entry_allocator.allocate(m_num_e))\n {\n   initialize();\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn) :\n-  hash_eq_fn_base(r_eq_fn),\n+PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn) \n+: hash_eq_fn_base(r_eq_fn),\n   ranged_probe_fn_base(resize_base::get_nearest_larger_size(1), r_hash_fn),\n-  m_a_entries(s_entry_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n-  m_num_e(resize_base::get_nearest_larger_size(1)),\n-  m_num_used_e(0)\n+  m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n+  m_entries(s_entry_allocator.allocate(m_num_e))\n {\n   initialize();\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Probe_Fn& r_comb_hash_fn) :\n-  hash_eq_fn_base(r_eq_fn),\n+PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, \n+\t\t const Comb_Probe_Fn& r_comb_hash_fn) \n+: hash_eq_fn_base(r_eq_fn),\n   ranged_probe_fn_base(resize_base::get_nearest_larger_size(1),\n \t\t       r_hash_fn, r_comb_hash_fn),\n-  m_a_entries(s_entry_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n-  m_num_e(resize_base::get_nearest_larger_size(1)),\n-  m_num_used_e(0)\n+  m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n+  m_entries(s_entry_allocator.allocate(m_num_e))\n {\n   initialize();\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Probe_Fn& r_comb_hash_fn, const Probe_Fn& r_probe_fn) :\n-  hash_eq_fn_base(r_eq_fn),\n+PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, \n+\t\t const Comb_Probe_Fn& comb_hash_fn, const Probe_Fn& probe_fn) \n+: hash_eq_fn_base(r_eq_fn),\n   ranged_probe_fn_base(resize_base::get_nearest_larger_size(1),\n-\t\t       r_hash_fn, r_comb_hash_fn, r_probe_fn),\n-  m_a_entries(s_entry_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n-  m_num_e(resize_base::get_nearest_larger_size(1)),\n-  m_num_used_e(0)\n+\t\t       r_hash_fn, comb_hash_fn, probe_fn),\n+  m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n+  m_entries(s_entry_allocator.allocate(m_num_e))\n {\n   initialize();\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Probe_Fn& r_comb_hash_fn, const Probe_Fn& r_probe_fn, const Resize_Policy& r_resize_policy) :\n-  hash_eq_fn_base(r_eq_fn),\n-  resize_base(r_resize_policy),\n+PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, \n+\t\t const Comb_Probe_Fn& comb_hash_fn, const Probe_Fn& probe_fn, \n+\t\t const Resize_Policy& r_resize_policy) \n+: hash_eq_fn_base(r_eq_fn), resize_base(r_resize_policy),\n   ranged_probe_fn_base(resize_base::get_nearest_larger_size(1),\n-\t\t       r_hash_fn, r_comb_hash_fn, r_probe_fn),\n-  m_a_entries(s_entry_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n-  m_num_e(resize_base::get_nearest_larger_size(1)),\n-  m_num_used_e(0)\n+\t\t       r_hash_fn, comb_hash_fn, probe_fn),\n+  m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n+  m_entries(s_entry_allocator.allocate(m_num_e))\n {\n   initialize();\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n@@ -148,37 +145,34 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n   hash_eq_fn_base(other),\n   resize_base(other),\n   ranged_probe_fn_base(other),\n-  m_a_entries(s_entry_allocator.allocate(other.m_num_e)),\n   m_num_e(other.m_num_e),\n-  m_num_used_e(other.m_num_used_e)\n+  m_num_used_e(other.m_num_used_e),\n+  m_entries(s_entry_allocator.allocate(m_num_e))\n {\n   for (size_type i = 0; i < m_num_e; ++i)\n-    m_a_entries[i].m_stat = (entry_status)empty_entry_status;\n+    m_entries[i].m_stat = (entry_status)empty_entry_status;\n \n   try\n     {\n       for (size_type i = 0; i < m_num_e; ++i)\n         {\n-\t  m_a_entries[i].m_stat = other.m_a_entries[i].m_stat;\n-\t  if (m_a_entries[i].m_stat == valid_entry_status)\n-\t    new (m_a_entries + i) entry(other.m_a_entries[i]);\n+\t  m_entries[i].m_stat = other.m_entries[i].m_stat;\n+\t  if (m_entries[i].m_stat == valid_entry_status)\n+\t    new (m_entries + i) entry(other.m_entries[i]);\n         }\n     }\n-  catch(...)\n+  catch (...)\n     {\n       deallocate_all();\n       throw;\n     }\n-\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n ~PB_DS_CLASS_NAME()\n-{\n-  deallocate_all();\n-}\n+{ deallocate_all(); }\n \n PB_DS_CLASS_T_DEC\n void\n@@ -187,9 +181,9 @@ swap(PB_DS_CLASS_C_DEC& other)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n-  std::swap(m_a_entries, other.m_a_entries);\n   std::swap(m_num_e, other.m_num_e);\n   std::swap(m_num_used_e, other.m_num_used_e);\n+  std::swap(m_entries, other.m_entries);\n   ranged_probe_fn_base::swap(other);\n   hash_eq_fn_base::swap(other);\n   resize_base::swap(other);\n@@ -204,8 +198,8 @@ PB_DS_CLASS_C_DEC::\n deallocate_all()\n {\n   clear();\n-  erase_all_valid_entries(m_a_entries, m_num_e);\n-  s_entry_allocator.deallocate(m_a_entries, m_num_e);\n+  erase_all_valid_entries(m_entries, m_num_e);\n+  s_entry_allocator.deallocate(m_entries, m_num_e);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -215,7 +209,7 @@ erase_all_valid_entries(entry_array a_entries_resized, size_type size)\n {\n   for (size_type pos = 0; pos < size; ++pos)\n     {\n-      entry_pointer p_e =& a_entries_resized[pos];\n+      entry_pointer p_e = &a_entries_resized[pos];\n       if (p_e->m_stat == valid_entry_status)\n \tp_e->m_value.~value_type();\n     }\n@@ -230,6 +224,6 @@ initialize()\n   Resize_Policy::notify_cleared();\n   ranged_probe_fn_base::notify_resized(m_num_e);\n   for (size_type i = 0; i < m_num_e; ++i)\n-    m_a_entries[i].m_stat = (entry_status)empty_entry_status;\n+    m_entries[i].m_stat = empty_entry_status;\n }\n "}, {"sha": "72d2a19f3bc77b964a6d57088a5ae93e697e7877", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -50,9 +50,9 @@ inline void\n PB_DS_CLASS_C_DEC::\n constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, integral_constant<int,false>)\n {\n-  _GLIBCXX_DEBUG_ASSERT(m_a_entries[pos].m_stat != valid_entry_status);\n+  _GLIBCXX_DEBUG_ASSERT(m_entries[pos].m_stat != valid_entry_status);\n \n-  entry* const p_e = m_a_entries + pos;\n+  entry* const p_e = m_entries + pos;\n \n   new (&p_e->m_value) mapped_value_type(r_val);\n "}, {"sha": "d532b84b0b8bf7d81a2bf95a4f8d51fad22d275a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -50,9 +50,9 @@ inline void\n PB_DS_CLASS_C_DEC::\n constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, true_type)\n {\n-  _GLIBCXX_DEBUG_ASSERT(m_a_entries[pos].m_stat != valid_entry_status);\n+  _GLIBCXX_DEBUG_ASSERT(m_entries[pos].m_stat != valid_entry_status);\n \n-  entry* const p_e = m_a_entries + pos;\n+  entry* const p_e = m_entries + pos;\n \n   new (&p_e->m_value) mapped_value_type(r_val);\n "}, {"sha": "fd8ca9abe12a210d8541fa460bd64766876c6a72", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/debug_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -52,7 +52,7 @@ PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n   map_debug_base::check_size(m_num_used_e);\n-  assert_entry_array_valid(m_a_entries, traits_base::m_store_extra_indicator);\n+  assert_entry_array_valid(m_entries, traits_base::m_store_extra_indicator);\n }\n \n #include <ext/pb_ds/detail/gp_hash_table_map_/debug_no_store_hash_fn_imps.hpp>"}, {"sha": "9da8507258634fabdca6711fbdfcb452e7a7021f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -50,18 +50,9 @@ PB_DS_CLASS_C_DEC::\n erase_entry(entry_pointer p_e)\n {\n   _GLIBCXX_DEBUG_ASSERT(p_e->m_stat = valid_entry_status);\n-\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::erase_existing(\n-\t\t\t\t\t\tPB_DS_V2F(p_e->m_value));)\n-\n-    typedef\n-    typename PB_DS_TYPES_TRAITS_C_DEC::stored_value_type\n-    stored_value_type;\n-\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::erase_existing(PB_DS_V2F(p_e->m_value));)\n   p_e->m_value.~value_type();\n-\n   p_e->m_stat = erased_entry_status;\n-\n   _GLIBCXX_DEBUG_ASSERT(m_num_used_e > 0);\n   resize_base::notify_erased(--m_num_used_e);\n }\n@@ -73,14 +64,11 @@ clear()\n {\n   for (size_type pos = 0; pos < m_num_e; ++pos)\n     {\n-      entry_pointer p_e =& m_a_entries[pos];\n-\n+      entry_pointer p_e = &m_entries[pos];\n       if (p_e->m_stat == valid_entry_status)\n \terase_entry(p_e);\n     }\n-\n   do_resize_if_needed_no_throw();\n-\n   resize_base::notify_cleared();\n }\n \n@@ -91,36 +79,28 @@ PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-\n-    size_type num_ersd = 0;\n-\n+  size_type num_ersd = 0;\n   for (size_type pos = 0; pos < m_num_e; ++pos)\n     {\n-      entry_pointer p_e =& m_a_entries[pos];\n-\n+      entry_pointer p_e = &m_entries[pos];\n       if (p_e->m_stat == valid_entry_status)\n \tif (pred(p_e->m_value))\n \t  {\n \t    ++num_ersd;\n-\n \t    erase_entry(p_e);\n \t  }\n     }\n \n   do_resize_if_needed_no_throw();\n-\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-\n-    return (num_ersd);\n+  return num_ersd;\n }\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n erase(const_key_reference r_key)\n-{\n-  return (erase_imp(r_key, traits_base::m_store_extra_indicator));\n-}\n+{ return erase_imp(r_key, traits_base::m_store_extra_indicator); }\n \n #include <ext/pb_ds/detail/gp_hash_table_map_/erase_no_store_hash_fn_imps.hpp>\n #include <ext/pb_ds/detail/gp_hash_table_map_/erase_store_hash_fn_imps.hpp>"}, {"sha": "94d1f871b9a94637505d608e04d7b3daa1caf30b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -63,7 +63,7 @@ erase_imp(const_key_reference r_key,  false_type)\n       const size_type pos =\n \tranged_probe_fn_base::operator()(                r_key,  hash, i);\n \n-      entry* const p_e = m_a_entries + pos;\n+      entry* const p_e = m_entries + pos;\n \n       switch(p_e->m_stat)\n         {"}, {"sha": "77f1aa31de8ea7e8b24bb51f4b91c038600b442a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -61,7 +61,7 @@ erase_imp(const_key_reference r_key,  true_type)\n     {\n       const size_type pos = ranged_probe_fn_base::operator()(            r_key, pos_hash_pair.second, i);\n \n-      entry* const p_e = m_a_entries + pos;\n+      entry* const p_e = m_entries + pos;\n \n       switch(p_e->m_stat)\n         {"}, {"sha": "604dc40043f06400637cc15bd41445a1133f345d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/find_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -50,8 +50,7 @@ PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    return ((find_key_pointer(r_key, traits_base::m_store_extra_indicator)));\n+   return find_key_pointer(r_key, traits_base::m_store_extra_indicator);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -60,24 +59,18 @@ PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key) const\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    return (const_cast<PB_DS_CLASS_C_DEC& >(*this).\n-\t    find_key_pointer(r_key, traits_base::m_store_extra_indicator));\n+  return const_cast<PB_DS_CLASS_C_DEC&>(*this).find_key_pointer(r_key, traits_base::m_store_extra_indicator);\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n find_end()\n-{\n-  return (NULL);\n-}\n+{ return NULL; }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n PB_DS_CLASS_C_DEC::\n find_end() const\n-{\n-  return (NULL);\n-}\n+{ return NULL; }\n "}, {"sha": "4d527bad2cc817d211e6dba95d261282d309faa9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp", "status": "modified", "additions": 177, "deletions": 354, "changes": 531, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -62,18 +62,10 @@ namespace pb_ds\n {\n   namespace detail\n   {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\ttypename Key,\t\t\\\n-\t\t\t\t\t\ttypename Mapped,\t\\\n-\t\t\t\t\t\tclass Hash_Fn,\t\t\\\n-\t\t\t\t\t\tclass Eq_Fn,\t\t\\\n-\t\t\t\t\t\tclass Allocator,\t\\\n-\t\t\t\t\t\tbool Store_Hash,\t\\\n-\t\t\t\t\t\tclass Comb_Probe_Fn,\t\\\n-\t\t\t\t\t\tclass Probe_Fn,\t\t\\\n-\t\t\t\t\t\tclass Resize_Policy>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Mapped, typename Hash_Fn, typename Eq_Fn, \\\n+\t     typename Allocator, bool Store_Hash, typename Comb_Probe_Fn, \\\n+\t     typename Probe_Fn,\ttypename Resize_Policy>\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_CLASS_NAME gp_ht_map_data_\n@@ -83,43 +75,21 @@ namespace pb_ds\n #define PB_DS_CLASS_NAME gp_ht_map_no_data_\n #endif \n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    PB_DS_CLASS_NAME<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tMapped,\t\t\\\n-\t\t\t\t\t\tHash_Fn,\t\\\n-\t\t\t\t\t\tEq_Fn,\t\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tStore_Hash,\t\\\n-\t\t\t\t\t\tComb_Probe_Fn,\t\\\n-\t\t\t\t\t\tProbe_Fn,\t\\\n-\t\t\t\t\t\tResize_Policy>\n-\n-#define PB_DS_HASH_EQ_FN_C_DEC\t\t\t\t\t\\\n-    hash_eq_fn<\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tEq_Fn,\t\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tStore_Hash>\n-\n-#define PB_DS_RANGED_PROBE_FN_C_DEC\t\t\t\t\t\\\n-    ranged_probe_fn<\t\t\t\t\t\\\n-\t\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\t\tHash_Fn,\t\\\n-\t\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\t\tComb_Probe_Fn,\t\\\n-\t\t\t\t\t\t\tProbe_Fn,\t\\\n-\t\t\t\t\t\t\tStore_Hash>\n-\n-#define PB_DS_TYPES_TRAITS_C_DEC\t\t\t\t\\\n-    types_traits<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tMapped,\t\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tStore_Hash>\n+#define PB_DS_CLASS_C_DEC \\\n+    PB_DS_CLASS_NAME<Key, Mapped, Hash_Fn, Eq_Fn, Allocator,\t\\\n+\t\t     Store_Hash, Comb_Probe_Fn, Probe_Fn, Resize_Policy>\n+\n+#define PB_DS_HASH_EQ_FN_C_DEC \\\n+    hash_eq_fn<Key, Eq_Fn, Allocator, Store_Hash>\n+\n+#define PB_DS_RANGED_PROBE_FN_C_DEC \\\n+    ranged_probe_fn<Key, Hash_Fn, Allocator, Comb_Probe_Fn, Probe_Fn, Store_Hash>\n+\n+#define PB_DS_TYPES_TRAITS_C_DEC \\\n+    types_traits<Key, Mapped, Allocator, Store_Hash>\n \n #ifdef _GLIBCXX_DEBUG\n-#define PB_DS_MAP_DEBUG_BASE_C_DEC\t\t\t\t\t\\\n+#define PB_DS_MAP_DEBUG_BASE_C_DEC \\\n     map_debug_base<Key, Eq_Fn, typename Allocator::template rebind<Key>::other::const_reference>\n #endif \n \n@@ -133,21 +103,19 @@ namespace pb_ds\n #define PB_DS_V2S(X) Mapped()\n #endif \n \n-#define PB_DS_STATIC_ASSERT(UNIQUE, E)\t\t\t\t\t\\\n-    typedef\t\t\t\t\t\t\t\t\\\n-    static_assert_dumclass<\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\tsizeof(static_assert<(bool)(E)>)> \\\n+#define PB_DS_STATIC_ASSERT(UNIQUE, E) \\\n+    typedef static_assert_dumclass<sizeof(static_assert<(bool)(E)>)> \\\n     UNIQUE##static_assert_type\n \n     template<typename Key,\n \t     typename Mapped,\n-\t     class Hash_Fn,\n-\t     class Eq_Fn,\n-\t     class Allocator,\n+\t     typename Hash_Fn,\n+\t     typename Eq_Fn,\n+\t     typename Allocator,\n \t     bool Store_Hash,\n-\t     class Comb_Probe_Fn,\n-\t     class Probe_Fn,\n-\t     class Resize_Policy>\n+\t     typename Comb_Probe_Fn,\n+\t     typename Probe_Fn,\n+\t     typename Resize_Policy>\n     class PB_DS_CLASS_NAME :\n #ifdef _GLIBCXX_DEBUG\n       protected PB_DS_MAP_DEBUG_BASE_C_DEC,\n@@ -157,33 +125,46 @@ namespace pb_ds\n       public PB_DS_RANGED_PROBE_FN_C_DEC,\n       public PB_DS_TYPES_TRAITS_C_DEC\n     {\n-\n     private:\n+      typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n+      typedef typename traits_base::store_extra_false_type store_hash_false_type;\n+      typedef typename traits_base::store_extra_true_type store_hash_true_type;\n+      typedef typename traits_base::value_type value_type_;\n+      typedef typename traits_base::pointer pointer_;\n+      typedef typename traits_base::const_pointer const_pointer_;\n+      typedef typename traits_base::reference reference_;\n+      typedef typename traits_base::const_reference const_reference_;\n+      typedef typename traits_base::comp_hash comp_hash;\n+\n+      enum entry_status\n+\t{\n+\t  empty_entry_status,\n+\t  valid_entry_status,\n+\t  erased_entry_status\n+\t} __attribute__ ((packed));\n \n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::store_extra_false_type\n-      store_hash_false_type;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::store_extra_true_type\n-      store_hash_true_type;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::value_type value_type_;\n+      struct entry : public traits_base::stored_value_type\n+      {\n+\tentry_status m_stat;\n+      };\n \n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::pointer pointer_;\n+      typedef typename Allocator::template rebind<entry>::other entry_allocator;\n+      typedef typename entry_allocator::pointer entry_pointer;\n+      typedef typename entry_allocator::const_pointer const_entry_pointer;\n+      typedef typename entry_allocator::reference entry_reference;\n+      typedef typename entry_allocator::const_reference const_entry_reference;\n+      typedef typename entry_allocator::pointer entry_array;\n \n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_pointer\n-      const_pointer_;\n+      typedef PB_DS_RANGED_PROBE_FN_C_DEC ranged_probe_fn_base;\n \n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::reference reference_;\n+#ifdef _GLIBCXX_DEBUG\n+      typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n+#endif \n \n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_reference\n-      const_reference_;\n+      typedef PB_DS_HASH_EQ_FN_C_DEC hash_eq_fn_base;\n+      typedef Resize_Policy resize_base;\n \n-#define PB_DS_GEN_POS\t\t\t\t\\\n-      typename Allocator::size_type\n+#define PB_DS_GEN_POS typename Allocator::size_type\n \n #include <ext/pb_ds/detail/unordered_iterator/const_point_iterator.hpp>\n #include <ext/pb_ds/detail/unordered_iterator/point_iterator.hpp>\n@@ -193,107 +174,71 @@ namespace pb_ds\n #undef PB_DS_GEN_POS\n \n     public:\n-\n+      typedef Allocator allocator;\n       typedef typename Allocator::size_type size_type;\n-\n       typedef typename Allocator::difference_type difference_type;\n-\n       typedef Hash_Fn hash_fn;\n-\n       typedef Eq_Fn eq_fn;\n-\n-      typedef Allocator allocator;\n-\n       typedef Probe_Fn probe_fn;\n-\n       typedef Comb_Probe_Fn comb_probe_fn;\n-\n       typedef Resize_Policy resize_policy;\n \n       enum\n \t{\n \t  store_hash = Store_Hash\n \t};\n \n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_type key_type;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_pointer key_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_key_pointer\n-      const_key_pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::key_reference key_reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_key_reference\n-      const_key_reference;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::mapped_type mapped_type;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::mapped_pointer\n-      mapped_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_mapped_pointer\n-      const_mapped_pointer;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::mapped_reference\n-      mapped_reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_mapped_reference\n-      const_mapped_reference;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::value_type value_type;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::pointer pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::const_pointer const_pointer;\n-\n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::reference reference;\n-\n-      typedef\n-      typename PB_DS_TYPES_TRAITS_C_DEC::const_reference\n-      const_reference;\n+      typedef typename traits_base::key_type key_type;\n+      typedef typename traits_base::key_pointer key_pointer;\n+      typedef typename traits_base::const_key_pointer const_key_pointer;\n+      typedef typename traits_base::key_reference key_reference;\n+      typedef typename traits_base::const_key_reference const_key_reference;\n+      typedef typename traits_base::mapped_type mapped_type;\n+      typedef typename traits_base::mapped_pointer mapped_pointer;\n+      typedef typename traits_base::const_mapped_pointer const_mapped_pointer;\n+      typedef typename traits_base::mapped_reference mapped_reference;\n+      typedef typename traits_base::const_mapped_reference const_mapped_reference;\n+      typedef typename traits_base::value_type value_type;\n+      typedef typename traits_base::pointer pointer;\n+      typedef typename traits_base::const_pointer const_pointer;\n+      typedef typename traits_base::reference reference;\n+      typedef typename traits_base::const_reference const_reference;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       typedef point_iterator_ point_iterator;\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n       typedef const_point_iterator_ point_iterator;\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n       typedef const_point_iterator_ const_point_iterator;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       typedef iterator_ iterator;\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n       typedef const_iterator_ iterator;\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n       typedef const_iterator_ const_iterator;\n \n-    public:\n-\n       PB_DS_CLASS_NAME();\n \n-      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other);\n+      PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC&);\n \n-      PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn);\n+      PB_DS_CLASS_NAME(const Hash_Fn&);\n \n-      PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn);\n+      PB_DS_CLASS_NAME(const Hash_Fn&, const Eq_Fn&);\n \n-      PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Probe_Fn& r_comb_probe_fn);\n+      PB_DS_CLASS_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Probe_Fn&);\n \n-      PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Probe_Fn& r_comb_probe_fn, const Probe_Fn& r_probe_fn);\n+      PB_DS_CLASS_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Probe_Fn&, \n+\t\t       const Probe_Fn&);\n \n-      PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Probe_Fn& r_comb_probe_fn, const Probe_Fn& r_probe_fn, const Resize_Policy& r_resize_policy);\n+      PB_DS_CLASS_NAME(const Hash_Fn&, const Eq_Fn&, const Comb_Probe_Fn&, \n+\t\t       const Probe_Fn&, const Resize_Policy&);\n \n       template<typename It>\n       void\n@@ -348,20 +293,18 @@ namespace pb_ds\n       insert(const_reference r_val)\n       {\n \t_GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-\n-\t  return (insert_imp(r_val, traits_base::m_store_extra_indicator));\n+        return insert_imp(r_val, traits_base::m_store_extra_indicator);\n       }\n \n       inline mapped_reference\n       operator[](const_key_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-\treturn (subscript_imp(r_key, traits_base::m_store_extra_indicator));\n-#else // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+\treturn subscript_imp(r_key, traits_base::m_store_extra_indicator);\n+#else \n \tinsert(r_key);\n-\n-\treturn (traits_base::s_null_mapped);\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+        return traits_base::s_null_mapped;\n+#endif\n       }\n \n       inline point_iterator\n@@ -409,66 +352,20 @@ namespace pb_ds\n #endif \n \n     private:\n-      typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n-\n-      enum ENTRY_STATUS\n-\t{\n-\t  empty_entry_status,\n-\t  valid_entry_status,\n-\t  erased_entry_status\n-\t};\n-\n-      typedef char entry_status;\n-\n-      struct entry : public PB_DS_TYPES_TRAITS_C_DEC::stored_value_type\n-      {\n-\tentry_status m_stat;\n-      };\n-\n-      typedef\n-      typename Allocator::template rebind<entry>::other\n-      entry_allocator;\n-\n-      typedef typename entry_allocator::pointer entry_pointer;\n-\n-      typedef typename entry_allocator::const_pointer const_entry_pointer;\n-\n-      typedef typename entry_allocator::reference entry_reference;\n-\n-      typedef\n-      typename entry_allocator::const_reference\n-      const_entry_reference;\n-\n-      typedef typename entry_allocator::pointer entry_array;\n-\n-      typedef PB_DS_RANGED_PROBE_FN_C_DEC ranged_probe_fn_base;\n-\n-#ifdef _GLIBCXX_DEBUG\n-      typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n-#endif \n-\n-      typedef PB_DS_HASH_EQ_FN_C_DEC hash_eq_fn_base;\n-\n-      typedef Resize_Policy resize_base;\n-\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       friend class iterator_;\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n       friend class const_iterator_;\n \n-      typedef typename PB_DS_TYPES_TRAITS_C_DEC::comp_hash comp_hash;\n-\n-    private:\n-\n       void\n       deallocate_all();\n \n       void\n       initialize();\n \n       void\n-      erase_all_valid_entries(entry_array a_entries_resized, size_type size);\n+      erase_all_valid_entries(entry_array, size_type);\n \n       inline bool\n       do_resize_if_needed();\n@@ -477,175 +374,145 @@ namespace pb_ds\n       do_resize_if_needed_no_throw();\n \n       void\n-      resize_imp(size_type new_size);\n+      resize_imp(size_type);\n \n       virtual void\n-      do_resize(size_type new_size);\n+      do_resize(size_type);\n \n       void\n-      resize_imp(entry_array a_entries_resized, size_type old_size);\n+      resize_imp(entry_array, size_type);\n \n       inline void\n-      resize_imp_reassign(entry_pointer p_e, entry_array a_entries_resized, store_hash_false_type);\n+      resize_imp_reassign(entry_pointer, entry_array, store_hash_false_type);\n \n       inline void\n-      resize_imp_reassign(entry_pointer p_e, entry_array a_entries_resized, store_hash_true_type);\n+      resize_imp_reassign(entry_pointer, entry_array, store_hash_true_type);\n \n       inline size_type\n-      find_ins_pos(const_key_reference r_key, store_hash_false_type);\n+      find_ins_pos(const_key_reference, store_hash_false_type);\n \n       inline comp_hash\n-      find_ins_pos(const_key_reference r_key, store_hash_true_type);\n+      find_ins_pos(const_key_reference, store_hash_true_type);\n \n       inline std::pair<point_iterator, bool>\n-      insert_imp(const_reference r_val, store_hash_false_type);\n+      insert_imp(const_reference, store_hash_false_type);\n \n       inline std::pair<point_iterator, bool>\n-      insert_imp(const_reference r_val, store_hash_true_type);\n+      insert_imp(const_reference, store_hash_true_type);\n \n       inline pointer\n       insert_new_imp(const_reference r_val, size_type pos)\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(m_a_entries[pos].m_stat != valid_entry_status);\n+\t_GLIBCXX_DEBUG_ASSERT(m_entries[pos].m_stat != valid_entry_status);\n \n \tif (do_resize_if_needed())\n \t  pos = find_ins_pos(PB_DS_V2F(r_val),\n \t\t\t     traits_base::m_store_extra_indicator);\n \n-\t_GLIBCXX_DEBUG_ASSERT(m_a_entries[pos].m_stat != valid_entry_status);\n-\n-\tentry* const p_e = m_a_entries + pos;\n+\t_GLIBCXX_DEBUG_ASSERT(m_entries[pos].m_stat != valid_entry_status);\n \n+\tentry* const p_e = m_entries + pos;\n \tnew (&p_e->m_value) value_type(r_val);\n-\n \tp_e->m_stat = valid_entry_status;\n-\n \tresize_base::notify_inserted(++m_num_used_e);\n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::\n-\t\t       insert_new(PB_DS_V2F(p_e->m_value));)\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(p_e->m_value));)\n \n-\t  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-\t  return (&p_e->m_value);\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\treturn &p_e->m_value;\n       }\n \n       inline pointer\n       insert_new_imp(const_reference r_val, comp_hash& r_pos_hash_pair)\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(m_a_entries[r_pos_hash_pair.first].m_stat !=\n+\t_GLIBCXX_DEBUG_ASSERT(m_entries[r_pos_hash_pair.first].m_stat !=\n \t\t\t valid_entry_status);\n \n \tif (do_resize_if_needed())\n-\t  r_pos_hash_pair = find_ins_pos(\n-\t\t\t\t\t PB_DS_V2F(r_val),\n+\t  r_pos_hash_pair = find_ins_pos(PB_DS_V2F(r_val),\n \t\t\t\t\t traits_base::m_store_extra_indicator);\n \n-\t_GLIBCXX_DEBUG_ASSERT(m_a_entries[r_pos_hash_pair.first].m_stat !=\n-\t\t\t valid_entry_status);\n-\n-\tentry* const p_e = m_a_entries + r_pos_hash_pair.first;\n+\t_GLIBCXX_DEBUG_ASSERT(m_entries[r_pos_hash_pair.first].m_stat !=\n+\t\t\t      valid_entry_status);\n \n+\tentry* const p_e = m_entries + r_pos_hash_pair.first;\n \tnew (&p_e->m_value) value_type(r_val);\n-\n \tp_e->m_hash = r_pos_hash_pair.second;\n-\n \tp_e->m_stat = valid_entry_status;\n \n \tresize_base::notify_inserted(++m_num_used_e);\n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(\n-\t\t\t\t\t\t  PB_DS_V2F(p_e->m_value));)\n-\n-\t  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(p_e->m_value));)\n \n-\t  return (&p_e->m_value);\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\treturn &p_e->m_value;\n       }\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       inline mapped_reference\n-      subscript_imp(const_key_reference r_key, store_hash_false_type)\n+      subscript_imp(const_key_reference key, store_hash_false_type)\n       {\n \t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n-\t  const size_type pos =\n-\t  find_ins_pos(r_key, traits_base::m_store_extra_indicator);\n+\tconst size_type pos = find_ins_pos(key, \n+\t\t\t\t\t traits_base::m_store_extra_indicator);\n \n-\tentry_pointer p_e =& m_a_entries[pos];\n+\tentry_pointer p_e =& m_entries[pos];\n \n \tif (p_e->m_stat != valid_entry_status)\n-\t  return (insert_new_imp(\n-\t\t\t\t value_type(\n-\t\t\t\t\t    r_key,\n-\t\t\t\t\t    mapped_type()),\n-\t\t\t\t pos)->second);\n-\n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n+\t  return insert_new_imp(value_type(key, mapped_type()), pos)->second;\n \n-\t  return (p_e->m_value.second);\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(key);)\t  \n+\treturn p_e->m_value.second;\n       }\n \n       inline mapped_reference\n-      subscript_imp(const_key_reference r_key, store_hash_true_type)\n+      subscript_imp(const_key_reference key, store_hash_true_type)\n       {\n \t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n-\t  comp_hash pos_hash_pair =\n-\t  find_ins_pos(r_key, traits_base::m_store_extra_indicator);\n+\tcomp_hash pos_hash_pair =\n+\t  find_ins_pos(key, traits_base::m_store_extra_indicator);\n \n-\tif (m_a_entries[pos_hash_pair.first].m_stat != valid_entry_status)\n-\t  return (insert_new_imp(\n-\t\t\t\t value_type(\n-\t\t\t\t\t    r_key,\n-\t\t\t\t\t    mapped_type()),\n-\t\t\t\t pos_hash_pair)->second);\n+\tif (m_entries[pos_hash_pair.first].m_stat != valid_entry_status)\n+\t  return insert_new_imp(value_type(key, mapped_type()),\n+\t\t\t\t pos_hash_pair)->second;\n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n-\n-\treturn ((m_a_entries + pos_hash_pair.first)->m_value.second);\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(key));\n+\treturn (m_entries + pos_hash_pair.first)->m_value.second;\n       }\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif\n \n       inline pointer\n-      find_key_pointer(const_key_reference r_key, store_hash_false_type)\n+      find_key_pointer(const_key_reference key, store_hash_false_type)\n       {\n-\tconst size_type hash = ranged_probe_fn_base::operator()(r_key);\n-\n+\tconst size_type hash = ranged_probe_fn_base::operator()(key);\n \tsize_type i;\n-\n \tresize_base::notify_find_search_start();\n \n \t// Loop until entry is found or until all possible entries accessed.\n-\n \tfor (i = 0; i < m_num_e; ++i)\n \t  {\n-\t    const size_type pos =\n-\t      ranged_probe_fn_base::operator()(                    r_key, hash, i);\n-\n-\t    entry* const p_e = m_a_entries + pos;\n+\t    const size_type pos = ranged_probe_fn_base::operator()(key, hash, i);\n \n-\t    switch(p_e->m_stat)\n+\t    entry* const p_e = m_entries + pos;\n+\t    switch (p_e->m_stat)\n \t      {\n \t      case empty_entry_status:\n \t\t{\n \t\t  resize_base::notify_find_search_end();\n+\t\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(key);)\n \n-\t\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::\n-\t\t\t\t check_key_does_not_exist(r_key);)\n-\n-\t\t    return (NULL);\n+\t\t    return NULL;\n \t\t}\n \t\tbreak;\n \t      case valid_entry_status:\n-\t\tif (hash_eq_fn_base::operator()(\n-\t\t\t\t\t\tPB_DS_V2F(p_e->m_value),\n-\t\t\t\t\t\tr_key))\n+\t\tif (hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), key))\n \t\t  {\n \t\t    resize_base::notify_find_search_end();\n+\t\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(key);)\n \n-\t\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n-\n-\t\t      return ((pointer)&p_e->m_value);\n+\t\t    return pointer(&p_e->m_value);\n \t\t  }\n \t\tbreak;\n \t      case erased_entry_status:\n@@ -657,55 +524,44 @@ namespace pb_ds\n \t    resize_base::notify_find_search_collision();\n \t  }\n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::\n-\t\t       check_key_does_not_exist(r_key);)\n-\n-\t  resize_base::notify_find_search_end();\n-\n-\treturn (NULL);\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(key);)\n+\tresize_base::notify_find_search_end();\n+\treturn NULL;\n       }\n \n       inline pointer\n-      find_key_pointer(const_key_reference r_key, store_hash_true_type)\n+      find_key_pointer(const_key_reference key, store_hash_true_type)\n       {\n-\tcomp_hash pos_hash_pair = ranged_probe_fn_base::operator()(r_key);\n-\n+\tcomp_hash pos_hash_pair = ranged_probe_fn_base::operator()(key);\n \tsize_type i;\n-\n \tresize_base::notify_find_search_start();\n \n \t// Loop until entry is found or until all possible entries accessed.\n-\n \tfor (i = 0; i < m_num_e; ++i)\n \t  {\n \t    const size_type pos =\n-\t      ranged_probe_fn_base::operator()(                    r_key, pos_hash_pair.second, i);\n+\t      ranged_probe_fn_base::operator()(key, pos_hash_pair.second, i);\n \n-\t    entry* const p_e = m_a_entries + pos;\n+\t    entry* const p_e = m_entries + pos;\n \n \t    switch(p_e->m_stat)\n \t      {\n \t      case empty_entry_status:\n \t\t{\n \t\t  resize_base::notify_find_search_end();\n+\t\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(key);)\n \n-\t\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::\n-\t\t\t\t check_key_does_not_exist(r_key);)\n-\n-\t\t    return (NULL);\n+\t\t  return NULL;\n \t\t}\n \t\tbreak;\n \t      case valid_entry_status:\n-\t\tif (hash_eq_fn_base::operator()(\n-\t\t\t\t\t\tPB_DS_V2F(p_e->m_value),\n+\t\tif (hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value),\n \t\t\t\t\t\tp_e->m_hash,\n-\t\t\t\t\t\tr_key, pos_hash_pair.second))\n+\t\t\t\t\t\tkey, pos_hash_pair.second))\n \t\t  {\n \t\t    resize_base::notify_find_search_end();\n-\n-\t\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n-\n-\t\t      return ((pointer)&p_e->m_value);\n+\t\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(key);)\n+\t\t    return pointer(&p_e->m_value);\n \t\t  }\n \t\tbreak;\n \t      case erased_entry_status:\n@@ -717,48 +573,39 @@ namespace pb_ds\n \t    resize_base::notify_find_search_collision();\n \t  }\n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::\n-\t\t       check_key_does_not_exist(r_key);)\n-\n-\t  resize_base::notify_find_search_end();\n-\n-\treturn (NULL);\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(key);)\n+\tresize_base::notify_find_search_end();\n+\treturn NULL;\n       }\n \n       inline bool\n-      erase_imp(const_key_reference r_key,  true_type);\n+      erase_imp(const_key_reference, true_type);\n \n       inline bool\n-      erase_imp(const_key_reference r_key,  false_type);\n+      erase_imp(const_key_reference, false_type);\n \n       inline void\n       erase_entry(entry_pointer p_e);\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       void\n       inc_it_state(pointer& r_p_value, size_type& r_pos) const\n-      {\n-\tinc_it_state((const_mapped_pointer& )r_p_value, r_pos);\n-      }\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+      { inc_it_state((const_mapped_pointer& )r_p_value, r_pos); }\n+#endif \n \n       void\n       inc_it_state(const_pointer& r_p_value, size_type& r_pos) const\n       {\n \t_GLIBCXX_DEBUG_ASSERT(r_p_value != NULL);\n-\n \tfor (++r_pos; r_pos < m_num_e; ++r_pos)\n \t  {\n-\t    const_entry_pointer p_e =& m_a_entries[r_pos];\n-\n+\t    const_entry_pointer p_e =& m_entries[r_pos];\n \t    if (p_e->m_stat == valid_entry_status)\n \t      {\n \t\tr_p_value =& p_e->m_value;\n-\n \t\treturn;\n \t      }\n \t  }\n-\n \tr_p_value = NULL;\n       }\n \n@@ -767,16 +614,13 @@ namespace pb_ds\n       {\n \tfor (r_pos = 0; r_pos < m_num_e; ++r_pos)\n \t  {\n-\t    const_entry_pointer p_e =& m_a_entries[r_pos];\n-\n+\t    const_entry_pointer p_e = &m_entries[r_pos];\n \t    if (p_e->m_stat == valid_entry_status)\n \t      {\n-\t\tr_p_value =& p_e->m_value;\n-\n+\t\tr_p_value = &p_e->m_value;\n \t\treturn;\n \t      }\n \t  }\n-\n \tr_p_value = NULL;\n       }\n \n@@ -785,49 +629,36 @@ namespace pb_ds\n       {\n \tfor (r_pos = 0; r_pos < m_num_e; ++r_pos)\n \t  {\n-\t    entry_pointer p_e =& m_a_entries[r_pos];\n-\n+\t    entry_pointer p_e = &m_entries[r_pos];\n \t    if (p_e->m_stat == valid_entry_status)\n \t      {\n-\t\tr_p_value =& p_e->m_value;\n-\n+\t\tr_p_value = &p_e->m_value;\n \t\treturn;\n \t      }\n \t  }\n-\n \tr_p_value = NULL;\n       }\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_entry_array_valid(const entry_array a_entries, \n-\t\t\t       store_hash_false_type) const;\n+      assert_entry_array_valid(const entry_array, store_hash_false_type) const;\n \n       void\n-      assert_entry_array_valid(const entry_array a_entries, \n-\t\t\t       store_hash_true_type) const;\n+      assert_entry_array_valid(const entry_array, store_hash_true_type) const;\n #endif \n \n-    private:\n-      static entry_allocator s_entry_allocator;\n-\n-      entry_pointer m_a_entries;\n-\n-      size_type m_num_e;\n-\n-      size_type m_num_used_e;\n+      static entry_allocator \ts_entry_allocator;\n+      static iterator \t\ts_end_it;\n+      static const_iterator \ts_const_end_it;\n \n-      static iterator s_end_it;\n-\n-      static const_iterator s_const_end_it;\n+      size_type \t\tm_num_e;\n+      size_type \t\tm_num_used_e;\n+      entry_pointer \t\tm_entries;\n \n       enum\n \t{\n-\t  store_hash_ok =\n-\t  !Store_Hash ||\n-\t  !is_same<\n-\t  Hash_Fn,\n-\t  pb_ds::null_hash_fn>::value\n+\t  store_hash_ok = !Store_Hash \n+\t                  || !is_same<Hash_Fn, pb_ds::null_hash_fn>::value\n \t};\n \n       PB_DS_STATIC_ASSERT(sth, store_hash_ok);\n@@ -845,22 +676,14 @@ namespace pb_ds\n #include <ext/pb_ds/detail/gp_hash_table_map_/trace_fn_imps.hpp>\n \n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_HASH_EQ_FN_C_DEC\n-\n #undef PB_DS_RANGED_PROBE_FN_C_DEC\n-\n #undef PB_DS_TYPES_TRAITS_C_DEC\n-\n #undef PB_DS_MAP_DEBUG_BASE_C_DEC\n-\n #undef PB_DS_CLASS_NAME\n-\n #undef PB_DS_V2F\n #undef PB_DS_V2S\n-\n #undef PB_DS_STATIC_ASSERT\n \n   } // namespace detail"}, {"sha": "dcb712e303dde7b3f2d680c5b11587febbda79ba", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/insert_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -68,7 +68,7 @@ find_ins_pos(const_key_reference r_key, store_hash_false_type)\n \n       _GLIBCXX_DEBUG_ASSERT(pos < m_num_e);\n \n-      entry* const p_e = m_a_entries + pos;\n+      entry* const p_e = m_entries + pos;\n \n       switch(p_e->m_stat)\n         {\n@@ -122,12 +122,12 @@ insert_imp(const_reference r_val, store_hash_false_type)\n   const size_type pos =\n     find_ins_pos(r_key, traits_base::m_store_extra_indicator);\n \n-  if (m_a_entries[pos].m_stat == valid_entry_status)\n+  if (m_entries[pos].m_stat == valid_entry_status)\n     {\n       _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n \n         return (std::make_pair(\n-\t\t\t       & (m_a_entries + pos)->m_value,\n+\t\t\t       & (m_entries + pos)->m_value,\n \t\t\t       false));\n     }\n "}, {"sha": "4ef9b202d79b261d4105c61739ac76b60f826ec1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/insert_store_hash_fn_imps.hpp", "status": "modified", "additions": 14, "deletions": 36, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -51,35 +51,29 @@ PB_DS_CLASS_C_DEC::\n find_ins_pos(const_key_reference r_key, store_hash_true_type)\n {\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-\n-    comp_hash pos_hash_pair = ranged_probe_fn_base::operator()(r_key);\n+  comp_hash pos_hash_pair = ranged_probe_fn_base::operator()(r_key);\n \n   size_type i;\n \n   /* The insertion position is initted to a non-legal value to indicate\n    *     that it has not been initted yet.\n    */\n   size_type ins_pos = m_num_e;\n-\n   resize_base::notify_insert_search_start();\n-\n   for (i = 0; i < m_num_e; ++i)\n     {\n-      const size_type pos =\n-\tranged_probe_fn_base::operator()(r_key, pos_hash_pair.second, i);\n-\n-      entry* const p_e = m_a_entries + pos;\n+      const size_type pos = ranged_probe_fn_base::operator()(r_key, pos_hash_pair.second, i);\n \n+      entry* const p_e = m_entries + pos;\n       switch(p_e->m_stat)\n         {\n         case empty_entry_status:\n \t  {\n             resize_base::notify_insert_search_end();\n \n-            _GLIBCXX_DEBUG_ONLY(\n-\t\t\t   map_debug_base::check_key_does_not_exist(r_key);)\n+            _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n \n-\t      return ((ins_pos == m_num_e)?\n+\t      return ((ins_pos == m_num_e) ?\n \t\t      std::make_pair(pos, pos_hash_pair.second) :\n \t\t      std::make_pair(ins_pos, pos_hash_pair.second));\n \t  }\n@@ -89,32 +83,23 @@ find_ins_pos(const_key_reference r_key, store_hash_true_type)\n \t    ins_pos = pos;\n \t  break;\n         case valid_entry_status:\n-\t  if (hash_eq_fn_base::operator()(\n-\t\t\t\t\t  PB_DS_V2F(p_e->m_value),\n-\t\t\t\t\t  p_e->m_hash,\n-\t\t\t\t\t  r_key,\n-\t\t\t\t\t  pos_hash_pair.second))\n+\t  if (hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), p_e->m_hash,\n+\t\t\t\t\t  r_key, pos_hash_pair.second))\n             {\n \t      resize_base::notify_insert_search_end();\n-\n \t      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n-\n-                return (std::make_pair(pos, pos_hash_pair.second));\n+              return std::make_pair(pos, pos_hash_pair.second);\n             }\n \t  break;\n         default:\n \t  _GLIBCXX_DEBUG_ASSERT(0);\n         };\n-\n       resize_base::notify_insert_search_collision();\n     }\n-\n   resize_base::notify_insert_search_end();\n-\n   if (ins_pos == m_num_e)\n     throw insert_error();\n-\n-  return (std::make_pair(ins_pos, pos_hash_pair.second));\n+  return std::make_pair(ins_pos, pos_hash_pair.second);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -123,25 +108,18 @@ PB_DS_CLASS_C_DEC::\n insert_imp(const_reference r_val, store_hash_true_type)\n {\n   const_key_reference r_key = PB_DS_V2F(r_val);\n-\n-  comp_hash pos_hash_pair =\n-    find_ins_pos(r_key, traits_base::m_store_extra_indicator);\n+  comp_hash pos_hash_pair = find_ins_pos(r_key, \n+\t\t\t\t\t traits_base::m_store_extra_indicator);\n \n   _GLIBCXX_DEBUG_ASSERT(pos_hash_pair.first < m_num_e);\n-\n-  entry_pointer p_e =& m_a_entries[pos_hash_pair.first];\n-\n+  entry_pointer p_e =& m_entries[pos_hash_pair.first];\n   if (p_e->m_stat == valid_entry_status)\n     {\n       _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n-\n-      return (std::make_pair(&p_e->m_value, false));\n+      return std::make_pair(&p_e->m_value, false);\n     }\n \n   _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n-\n-  return (std::make_pair(\n-\t\t\t insert_new_imp(r_val, pos_hash_pair),\n-\t\t\t true));\n+  return std::make_pair(insert_new_imp(r_val, pos_hash_pair), true);\n }\n "}, {"sha": "d7998048cfedc58bffe3fcc2739a1d6e8a6b47b1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 19, "deletions": 36, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -50,21 +50,16 @@ PB_DS_CLASS_C_DEC::\n do_resize_if_needed()\n {\n   if (!resize_base::is_resize_needed())\n-    return (false);\n-\n-  resize_imp(resize_base::get_new_size(        m_num_e, m_num_used_e));\n-\n-  return (true);\n+    return false;\n+  resize_imp(resize_base::get_new_size(m_num_e, m_num_used_e));\n+  return true;\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-do_resize(size_type size)\n-{\n-  resize_imp(resize_base::get_nearest_larger_size(\n-\t\t\t\t\t\t  size));\n-}\n+do_resize(size_type n)\n+{ resize_imp(resize_base::get_nearest_larger_size(n)); }\n \n PB_DS_CLASS_T_DEC\n inline void\n@@ -76,13 +71,13 @@ do_resize_if_needed_no_throw()\n \n   try\n     {\n-      resize_imp(resize_base::get_new_size(            m_num_e, m_num_used_e));\n+      resize_imp(resize_base::get_new_size(m_num_e, m_num_used_e));\n     }\n-  catch(...)\n+  catch (...)\n     { }\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n void\n@@ -91,23 +86,19 @@ resize_imp(size_type new_size)\n {\n #ifdef PB_DS_REGRESSION\n   typename Allocator::group_throw_prob_adjustor adjust(m_num_e);\n-#endif // #ifdef PB_DS_REGRESSION\n+#endif \n \n   if (new_size == m_num_e)\n     return;\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\n-    const size_type old_size = m_num_e;\n-\n+  const size_type old_size = m_num_e;\n   entry_array a_entries_resized = NULL;\n \n   // Following line might throw an exception.\n-\n   a_entries_resized = s_entry_allocator.allocate(new_size);\n \n   ranged_probe_fn_base::notify_resized(new_size);\n-\n   m_num_e = new_size;\n \n   for (size_type i = 0; i < m_num_e; ++i)\n@@ -117,42 +108,34 @@ resize_imp(size_type new_size)\n     {\n       resize_imp(a_entries_resized, old_size);\n     }\n-  catch(...)\n+  catch (...)\n     {\n       erase_all_valid_entries(a_entries_resized, new_size);\n-\n       m_num_e = old_size;\n-\n       s_entry_allocator.deallocate(a_entries_resized, new_size);\n-\n       ranged_probe_fn_base::notify_resized(old_size);\n-\n       throw;\n     }\n \n   // At this point no exceptions can be thrown.\n-\n   _GLIBCXX_DEBUG_ONLY(assert_entry_array_valid(a_entries_resized, traits_base::m_store_extra_indicator);)\n \n-    Resize_Policy::notify_resized(new_size);\n-\n-  erase_all_valid_entries(m_a_entries, old_size);\n-\n-  s_entry_allocator.deallocate(m_a_entries, old_size);\n-\n-  m_a_entries = a_entries_resized;\n-\n+  Resize_Policy::notify_resized(new_size);\n+  erase_all_valid_entries(m_entries, old_size);\n+  s_entry_allocator.deallocate(m_entries, old_size);\n+  m_entries = a_entries_resized;\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n resize_imp(entry_array a_entries_resized, size_type old_size)\n {\n   for (size_type pos = 0; pos < old_size; ++pos)\n-    if (m_a_entries[pos].m_stat == valid_entry_status)\n-      resize_imp_reassign(m_a_entries + pos,  a_entries_resized,  traits_base::m_store_extra_indicator);\n+    if (m_entries[pos].m_stat == valid_entry_status)\n+      resize_imp_reassign(m_entries + pos, a_entries_resized, \n+\t\t\t  traits_base::m_store_extra_indicator);\n }\n \n #include <ext/pb_ds/detail/gp_hash_table_map_/resize_no_store_hash_fn_imps.hpp>"}, {"sha": "78240c4219c0ca7a179e0d84fbcc5aab5b6c8f45", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/trace_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ftrace_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -58,7 +58,7 @@ trace() const\n     {\n       std::cerr << static_cast<unsigned long>(i) << \" \";\n \n-      switch(m_a_entries[i].m_stat)\n+      switch(m_entries[i].m_stat)\n         {\n \tcase empty_entry_status:\n \t  std::cerr << \"<empty>\";\n@@ -67,7 +67,7 @@ trace() const\n \t  std::cerr << \"<erased>\";\n \t  break;\n \tcase valid_entry_status:\n-\t  std::cerr << PB_DS_V2F(m_a_entries[i].m_value);\n+\t  std::cerr << PB_DS_V2F(m_entries[i].m_value);\n \t  break;\n \tdefault:\n \t  _GLIBCXX_DEBUG_ASSERT(0);"}, {"sha": "5295134a5c9e89e25fc2c35cd798f4960c60e501", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/direct_mask_range_hashing_imp.hpp", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fdirect_mask_range_hashing_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fdirect_mask_range_hashing_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fdirect_mask_range_hashing_imp.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -48,23 +48,17 @@ PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n-{\n-  mask_based_base::swap(other);\n-}\n+{ mask_based_base::swap(other); }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n notify_resized(size_type size)\n-{\n-  mask_based_base::notify_resized(size);\n-}\n+{ mask_based_base::notify_resized(size); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n operator()(size_type hash) const\n-{\n-  return (mask_based_base::range_hash(hash));\n-}\n+{ return mask_based_base::range_hash(hash); }\n "}, {"sha": "5edff69aa95483deb4222577a5736d3d9a76403f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/direct_mod_range_hashing_imp.hpp", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fdirect_mod_range_hashing_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fdirect_mod_range_hashing_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fdirect_mod_range_hashing_imp.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -48,23 +48,17 @@ PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n-{\n-  mod_based_base::swap(other);\n-}\n+{ mod_based_base::swap(other); }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-notify_resized(size_type size)\n-{\n-  mod_based_base::notify_resized(size);\n-}\n+notify_resized(size_type n)\n+{ mod_based_base::notify_resized(n); }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n operator()(size_type hash) const\n-{\n-  return (mod_based_base::range_hash(hash));\n-}\n+{ return mod_based_base::range_hash(hash); }\n "}, {"sha": "4aa1894bade4b47a1447675aab9acc53017d11ab", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/mask_based_range_hashing.hpp", "status": "modified", "additions": 12, "deletions": 40, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fmask_based_range_hashing.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fmask_based_range_hashing.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fmask_based_range_hashing.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -49,39 +49,32 @@\n \n namespace pb_ds\n {\n-\n   namespace detail\n   {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename Size_Type>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    mask_based_range_hashing<\t\t\t\t\t\\\n-\t\t\t\t\t\tSize_Type>\n+#define PB_DS_CLASS_T_DEC template<typename Size_Type>\n+#define PB_DS_CLASS_C_DEC mask_based_range_hashing<Size_Type>\n \n     template<typename Size_Type>\n     class mask_based_range_hashing\n     {\n     protected:\n       typedef Size_Type size_type;\n \n-    protected:\n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(mask_based_range_hashing& other)\n+      { std::swap(m_mask, other.m_mask); }\n \n       void\n       notify_resized(size_type size);\n \n       inline size_type\n-      range_hash(size_type hash) const;\n+      range_hash(size_type hash) const\n+      { return size_type(hash & m_mask); }\n \n     private:\n-      size_type m_mask;\n-\n-      const static size_type s_num_bits_in_size_type;\n-\n-      const static size_type s_highest_bit_1;\n+      size_type \t\tm_mask;\n+      const static size_type \ts_num_bits_in_size_type;\n+      const static size_type \ts_highest_bit_1;\n     };\n \n     PB_DS_CLASS_T_DEC\n@@ -90,52 +83,31 @@ namespace pb_ds\n       sizeof(typename PB_DS_CLASS_C_DEC::size_type) << 3;\n \n     PB_DS_CLASS_T_DEC\n-    const typename PB_DS_CLASS_C_DEC::size_type PB_DS_CLASS_C_DEC::s_highest_bit_1 =\n-\t\t\t\t\t\t       static_cast<typename PB_DS_CLASS_C_DEC::size_type>(1) << (s_num_bits_in_size_type - 1);\n-\n-    PB_DS_CLASS_T_DEC\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    swap(PB_DS_CLASS_C_DEC& other)\n-    {\n-      std::swap(m_mask, other.m_mask);\n-    }\n+    const typename PB_DS_CLASS_C_DEC::size_type PB_DS_CLASS_C_DEC::s_highest_bit_1 = static_cast<typename PB_DS_CLASS_C_DEC::size_type>(1) << (s_num_bits_in_size_type - 1);\n \n+ \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     notify_resized(size_type size)\n     {\n       size_type i = 0;\n-\n       while (size ^ s_highest_bit_1)\n \t{\n \t  size <<= 1;\n-\n \t  ++i;\n \t}\n \n       m_mask = 1;\n-\n       i += 2;\n-\n       while (i++ < s_num_bits_in_size_type)\n         m_mask = (m_mask << 1) ^ 1;\n     }\n \n-    PB_DS_CLASS_T_DEC\n-    inline typename PB_DS_CLASS_C_DEC::size_type\n-    PB_DS_CLASS_C_DEC::\n-    range_hash(size_type hash) const\n-    {\n-      return (hash&  m_mask);\n-    }\n-\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n \n   } // namespace detail\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_MASK_BASED_RANGE_HASHING_HPP\n+#endif"}, {"sha": "d4b834dd34f39764cab83ad788d56e2bf2011b17", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/ranged_probe_fn.hpp", "status": "modified", "additions": 62, "deletions": 149, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -57,48 +57,29 @@ namespace pb_ds\n   namespace detail\n   {\n     template<typename Key,\n-\t     class Hash_Fn,\n-\t     class Allocator,\n-\t     class Comb_Probe_Fn,\n-\t     class Probe_Fn,\n+\t     typename Hash_Fn,\n+\t     typename Allocator,\n+\t     typename Comb_Probe_Fn,\n+\t     typename Probe_Fn,\n \t     bool Store_Hash>\n     class ranged_probe_fn;\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\ttypename Key,\t\t\\\n-\t\t\t\t\t\tclass Hash_Fn,\t\t\\\n-\t\t\t\t\t\tclass Allocator,\t\\\n-\t\t\t\t\t\tclass Comb_Probe_Fn,\t\\\n-\t\t\t\t\t\tclass Probe_Fn>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    ranged_probe_fn<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tHash_Fn,\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tComb_Probe_Fn,\t\\\n-\t\t\t\t\t\tProbe_Fn,\t\\\n-\t\t\t\t\t\tfalse>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Hash_Fn, typename Allocator, \\\n+\t     typename Comb_Probe_Fn, typename Probe_Fn>\n+\n+#define PB_DS_CLASS_C_DEC \\\n+    ranged_probe_fn<Key, Hash_Fn, Allocator, Comb_Probe_Fn, Probe_Fn, false>\n \n     /**\n      * Specialization 1- The client supplies a probe function and a ranged\n      *    probe function, and requests that hash values not be stored.\n      **/\n-    template<typename Key,\n-\t     class Hash_Fn,\n-\t     class Allocator,\n-\t     class Comb_Probe_Fn,\n-\t     class Probe_Fn>\n-    class ranged_probe_fn<\n-      Key,\n-      Hash_Fn,\n-      Allocator,\n-      Comb_Probe_Fn,\n-      Probe_Fn,\n-      false> : public Hash_Fn,\n-\t       public Comb_Probe_Fn,\n-\t       public Probe_Fn\n+    template<typename Key, typename Hash_Fn, typename Allocator,\n+\t     typename Comb_Probe_Fn, typename Probe_Fn>\n+    class ranged_probe_fn<Key, Hash_Fn, Allocator, Comb_Probe_Fn,\n+\t\t\t  Probe_Fn, false> \n+    : public Hash_Fn, public Comb_Probe_Fn, public Probe_Fn\n     {\n     protected:\n       typedef typename Allocator::size_type size_type;\n@@ -138,112 +119,77 @@ namespace pb_ds\n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_probe_fn(size_type size)\n-    {\n-      Comb_Probe_Fn::notify_resized(size);\n-    }\n+    { Comb_Probe_Fn::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn) :\n       Hash_Fn(r_hash_fn)\n-    {\n-      Comb_Probe_Fn::notify_resized(size);\n-    }\n+    { Comb_Probe_Fn::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Probe_Fn& r_comb_probe_fn) :\n       Hash_Fn(r_hash_fn),\n       Comb_Probe_Fn(r_comb_probe_fn)\n-    {\n-      comb_probe_fn_base::notify_resized(size);\n-    }\n+    { comb_probe_fn_base::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Probe_Fn& r_comb_probe_fn, const Probe_Fn& r_probe_fn) :\n       Hash_Fn(r_hash_fn),\n       Comb_Probe_Fn(r_comb_probe_fn),\n       Probe_Fn(r_probe_fn)\n-    {\n-      comb_probe_fn_base::notify_resized(size);\n-    }\n+    { comb_probe_fn_base::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     swap(PB_DS_CLASS_C_DEC& other)\n     {\n       comb_probe_fn_base::swap(other);\n-\n-      std::swap((Hash_Fn& )(*this), (Hash_Fn& )other);\n+      std::swap((Hash_Fn& )(*this), (Hash_Fn&)other);\n     }\n \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     notify_resized(size_type size)\n-    {\n-      comb_probe_fn_base::notify_resized(size);\n-    }\n+    { comb_probe_fn_base::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::size_type\n     PB_DS_CLASS_C_DEC::\n     operator()(const_key_reference r_key) const\n-    {\n-      return (comb_probe_fn_base::operator()(\n-\t\t\t\t\t     hash_fn_base::operator()(r_key)));\n-    }\n+    { return comb_probe_fn_base::operator()(hash_fn_base::operator()(r_key)); }\n \n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::size_type\n     PB_DS_CLASS_C_DEC::\n-    operator()(const_key_reference /*r_key*/, size_type hash, size_type i) const\n+    operator()(const_key_reference, size_type hash, size_type i) const\n     {\n-      return (comb_probe_fn_base::operator()(\n-\t\t\t\t\t     hash + probe_fn_base::operator()(i)));\n+      return comb_probe_fn_base::operator()(hash + probe_fn_base::operator()(i));\n     }\n \n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\ttypename Key,\t\t\\\n-\t\t\t\t\t\tclass Hash_Fn,\t\t\\\n-\t\t\t\t\t\tclass Allocator,\t\\\n-\t\t\t\t\t\tclass Comb_Probe_Fn,\t\\\n-\t\t\t\t\t\tclass Probe_Fn>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    ranged_probe_fn<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tHash_Fn,\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tComb_Probe_Fn,\t\\\n-\t\t\t\t\t\tProbe_Fn,\t\\\n-\t\t\t\t\t\ttrue>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, class Hash_Fn, class Allocator,\t\\\n+\t     class Comb_Probe_Fn, class Probe_Fn>\n+\n+#define PB_DS_CLASS_C_DEC \\\n+    ranged_probe_fn<Key, Hash_Fn, Allocator, Comb_Probe_Fn, Probe_Fn, true>\n \n     /**\n      * Specialization 2- The client supplies a probe function and a ranged\n      *    probe function, and requests that hash values not be stored.\n      **/\n-    template<typename Key,\n-\t     class Hash_Fn,\n-\t     class Allocator,\n-\t     class Comb_Probe_Fn,\n-\t     class Probe_Fn>\n-    class ranged_probe_fn<\n-      Key,\n-      Hash_Fn,\n-      Allocator,\n-      Comb_Probe_Fn,\n-      Probe_Fn,\n-      true> :\n-      public Hash_Fn,\n-      public Comb_Probe_Fn,\n-      public Probe_Fn\n+    template<typename Key, typename Hash_Fn, typename Allocator,\n+\t     typename Comb_Probe_Fn, typename Probe_Fn>\n+    class ranged_probe_fn<Key, Hash_Fn, Allocator, Comb_Probe_Fn, \n+\t\t\t  Probe_Fn, true> \n+    : public Hash_Fn, public Comb_Probe_Fn, public Probe_Fn\n     {\n     protected:\n       typedef typename Allocator::size_type size_type;\n@@ -260,14 +206,16 @@ namespace pb_ds\n \n       typedef typename key_allocator::const_reference const_key_reference;\n \n-    protected:\n       ranged_probe_fn(size_type size);\n \n       ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn);\n \n-      ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Probe_Fn& r_comb_probe_fn);\n+      ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, \n+\t\t      const Comb_Probe_Fn& r_comb_probe_fn);\n \n-      ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Probe_Fn& r_comb_probe_fn, const Probe_Fn& r_probe_fn);\n+      ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, \n+\t\t      const Comb_Probe_Fn& r_comb_probe_fn, \n+\t\t      const Probe_Fn& r_probe_fn);\n \n       void\n       swap(PB_DS_CLASS_C_DEC& other);\n@@ -298,14 +246,17 @@ namespace pb_ds\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Probe_Fn& r_comb_probe_fn) :\n+    ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, \n+\t\t    const Comb_Probe_Fn& r_comb_probe_fn) :\n       Hash_Fn(r_hash_fn),\n       Comb_Probe_Fn(r_comb_probe_fn)\n     { comb_probe_fn_base::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Probe_Fn& r_comb_probe_fn, const Probe_Fn& r_probe_fn) :\n+    ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, \n+\t\t    const Comb_Probe_Fn& r_comb_probe_fn, \n+\t\t    const Probe_Fn& r_probe_fn) :\n       Hash_Fn(r_hash_fn),\n       Comb_Probe_Fn(r_comb_probe_fn),\n       Probe_Fn(r_probe_fn)\n@@ -338,7 +289,7 @@ namespace pb_ds\n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::size_type\n     PB_DS_CLASS_C_DEC::\n-    operator()(const_key_reference /*r_key*/, size_type hash, size_type i) const\n+    operator()(const_key_reference, size_type hash, size_type i) const\n     {\n       return comb_probe_fn_base::operator()(hash + probe_fn_base::operator()(i));\n     }\n@@ -360,33 +311,14 @@ namespace pb_ds\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<typename Key, class Allocator, class Comb_Probe_Fn>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    ranged_probe_fn<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tnull_hash_fn,\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tComb_Probe_Fn,\t\\\n-\t\t\t\t\t\tnull_probe_fn,\t\\\n-\t\t\t\t\t\tfalse>\n-\n     /**\n      * Specialization 3 and 4- The client does not supply a hash function or\n      *    probe function, and requests that hash values not be stored.\n      **/\n-    template<typename Key, class Allocator, class Comb_Probe_Fn>\n-    class ranged_probe_fn<\n-      Key,\n-      null_hash_fn,\n-      Allocator,\n-      Comb_Probe_Fn,\n-      null_probe_fn,\n-      false> :\n-      public Comb_Probe_Fn,\n-      public null_hash_fn,\n-      public null_probe_fn\n+    template<typename Key, typename Allocator, typename Comb_Probe_Fn>\n+    class ranged_probe_fn<Key, null_hash_fn, Allocator, Comb_Probe_Fn, \n+\t\t\t  null_probe_fn, false> \n+    : public Comb_Probe_Fn, public null_hash_fn, public null_probe_fn\n     {\n     protected:\n       typedef typename Allocator::size_type size_type;\n@@ -397,42 +329,23 @@ namespace pb_ds\n \n       typedef typename key_allocator::const_reference const_key_reference;\n \n-    protected:\n-      ranged_probe_fn(size_type size);\n+      ranged_probe_fn(size_type size)\n+      { Comb_Probe_Fn::notify_resized(size); }\n \n-      ranged_probe_fn(size_type size, const Comb_Probe_Fn& r_comb_probe_fn);\n+      ranged_probe_fn(size_type size, const Comb_Probe_Fn& r_comb_probe_fn)\n+      : Comb_Probe_Fn(r_comb_probe_fn)\n+      { }\n \n-      ranged_probe_fn(size_type size, const null_hash_fn& r_null_hash_fn, const Comb_Probe_Fn& r_comb_probe_fn, const null_probe_fn& r_null_probe_fn);\n+      ranged_probe_fn(size_type size, const null_hash_fn& r_null_hash_fn, \n+\t\t      const Comb_Probe_Fn& r_comb_probe_fn, \n+\t\t      const null_probe_fn& r_null_probe_fn)\n+      : Comb_Probe_Fn(r_comb_probe_fn)\n+      { }\n \n       void\n-      swap(PB_DS_CLASS_C_DEC& other);\n+      swap(ranged_probe_fn& other)\n+      { comb_probe_fn_base::swap(other); }\n     };\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    ranged_probe_fn(size_type size)\n-    { Comb_Probe_Fn::notify_resized(size); }\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    ranged_probe_fn(size_type size, const Comb_Probe_Fn& r_comb_probe_fn) :\n-      Comb_Probe_Fn(r_comb_probe_fn)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    ranged_probe_fn(size_type size, const null_hash_fn& r_null_hash_fn, const Comb_Probe_Fn& r_comb_probe_fn, const null_probe_fn& r_null_probe_fn) :\n-      Comb_Probe_Fn(r_comb_probe_fn)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    swap(PB_DS_CLASS_C_DEC& other)\n-    { comb_probe_fn_base::swap(other); }\n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n   } // namespace detail\n } // namespace pb_ds\n "}, {"sha": "b3854318bf0ee7a5c862e25fcd61c49d025c9d4f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -353,7 +353,7 @@ namespace pb_ds\n \tif (pot_it != end()&&  !Cmp_Fn::operator()(r_key, PB_DS_V2F(*pot_it)))\n \t  {\n \t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n-\t    return (++pot_it);\n+\t    return ++pot_it;\n \t  }\n \n \t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n@@ -362,17 +362,17 @@ namespace pb_ds\n \n       inline const_point_iterator\n       upper_bound(const_key_reference r_key) const\n-      { return const_cast<PB_DS_CLASS_C_DEC& >(*this).upper_bound(r_key); }\n+      { return const_cast<PB_DS_CLASS_C_DEC&>(*this).upper_bound(r_key); }\n \n       inline point_iterator\n       find(const_key_reference r_key)\n       {\n \t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n \titerator pot_it = lower_bound(r_key);\n-\tif (pot_it != end()&&  !Cmp_Fn::operator()(r_key, PB_DS_V2F(*pot_it)))\n+\tif (pot_it != end() && !Cmp_Fn::operator()(r_key, PB_DS_V2F(*pot_it)))\n \t  {\n \t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n-\t    return (pot_it);\n+\t    return pot_it;\n \t  }\n \n \t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key));"}, {"sha": "18f24bd7b294836c192bf49b761486497097cbfd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_prime_size_policy_imp.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_prime_size_policy_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_prime_size_policy_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_prime_size_policy_imp.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -127,8 +127,8 @@ namespace detail\n PB_DS_CLASS_T_DEC\n inline\n PB_DS_CLASS_C_DEC::\n-hash_prime_size_policy(size_type start_size) : m_start_size(start_size)\n-{ m_start_size = get_nearest_larger_size(start_size); }\n+hash_prime_size_policy(size_type n) : m_start_size(n)\n+{ m_start_size = get_nearest_larger_size(n); }\n \n PB_DS_CLASS_T_DEC\n inline void\n@@ -139,10 +139,10 @@ swap(PB_DS_CLASS_C_DEC& other)\n PB_DS_CLASS_T_DEC\n inline PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n-get_nearest_larger_size(size_type size) const\n+get_nearest_larger_size(size_type n) const\n {\n   const std::size_t* const p_upper = std::upper_bound(detail::g_a_sizes, \n-\t\t     detail::g_a_sizes + detail::num_distinct_sizes, size);\n+\t\t     detail::g_a_sizes + detail::num_distinct_sizes, n);\n \n   if (p_upper == detail::g_a_sizes + detail::num_distinct_sizes)\n     throw resize_error();\n@@ -152,12 +152,12 @@ get_nearest_larger_size(size_type size) const\n PB_DS_CLASS_T_DEC\n inline PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n-get_nearest_smaller_size(size_type size) const\n+get_nearest_smaller_size(size_type n) const\n {\n   const size_t* p_lower = std::lower_bound(detail::g_a_sizes, \n-\t\t       detail::g_a_sizes + detail::num_distinct_sizes, size);\n+\t\t       detail::g_a_sizes + detail::num_distinct_sizes, n);\n \n-  if (*p_lower >= size&&  p_lower != detail::g_a_sizes)\n+  if (*p_lower >= n &&  p_lower != detail::g_a_sizes)\n     --p_lower;\n   if (*p_lower < m_start_size)\n     return m_start_size;"}, {"sha": "e6edf0254b8ed0eca84cf0766d026906b7a7200b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_standard_resize_policy_imp.hpp", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_standard_resize_policy_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_standard_resize_policy_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_standard_resize_policy_imp.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -49,23 +49,21 @@\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-hash_standard_resize_policy() :\n-  m_size(Size_Policy::get_nearest_larger_size(1))\n+hash_standard_resize_policy() \n+: m_size(Size_Policy::get_nearest_larger_size(1))\n { trigger_policy_base::notify_externally_resized(m_size); }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-hash_standard_resize_policy(const Size_Policy& r_size_policy) :\n-  Size_Policy(r_size_policy),\n-  m_size(Size_Policy::get_nearest_larger_size(1))\n+hash_standard_resize_policy(const Size_Policy& r_size_policy) \n+: Size_Policy(r_size_policy), m_size(Size_Policy::get_nearest_larger_size(1))\n { trigger_policy_base::notify_externally_resized(m_size); }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n hash_standard_resize_policy(const Size_Policy& r_size_policy, \n-\t\t\t    const Trigger_Policy& r_trigger_policy) :\n-  Size_Policy(r_size_policy),\n-  Trigger_Policy(r_trigger_policy),\n+\t\t\t    const Trigger_Policy& r_trigger_policy) \n+: Size_Policy(r_size_policy), Trigger_Policy(r_trigger_policy),\n   m_size(Size_Policy::get_nearest_larger_size(1))\n { trigger_policy_base::notify_externally_resized(m_size); }\n \n@@ -167,8 +165,7 @@ typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n get_new_size(size_type size, size_type num_used_e) const\n {\n-  if (trigger_policy_base::\n-      is_grow_needed(size, num_used_e))\n+  if (trigger_policy_base::is_grow_needed(size, num_used_e))\n     return size_policy_base::get_nearest_larger_size(size);\n   return size_policy_base::get_nearest_smaller_size(size);\n }\n@@ -197,24 +194,23 @@ PB_DS_CLASS_C_DEC::\n resize(size_type new_size)\n {\n   PB_DS_STATIC_ASSERT(access, external_size_access);\n-  size_type actual_new_size = size_policy_base::get_nearest_larger_size(1);\n-  while (actual_new_size < new_size)\n+  size_type actual_size = size_policy_base::get_nearest_larger_size(1);\n+  while (actual_size < new_size)\n     {\n-      const size_type pot =\n-\tsize_policy_base::get_nearest_larger_size(actual_new_size);\n+      const size_type pot = size_policy_base::get_nearest_larger_size(actual_size);\n \n-      if (pot == actual_new_size&&  pot < new_size)\n+      if (pot == actual_size && pot < new_size)\n \tthrow resize_error();\n-      actual_new_size = pot;\n+      actual_size = pot;\n     }\n \n-  if (actual_new_size > 0)\n-    --actual_new_size;\n+  if (actual_size > 0)\n+    --actual_size;\n \n   const size_type old_size = m_size;\n   try\n     {\n-      do_resize(actual_new_size - 1);\n+      do_resize(actual_size - 1);\n     }\n   catch(insert_error& )\n     {"}, {"sha": "b51e252cd29085004c6ba53662f1682b01638807", "filename": "libstdc++-v3/include/ext/pb_ds/detail/types_traits.hpp", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -55,47 +55,34 @@ namespace pb_ds\n {\n   namespace detail\n   {\n-\n-    template<typename Key, typename Mapped, class Allocator, bool Store_Extra>\n+    template<typename Key, typename Mapped, typename Alloc, bool Store_Extra>\n     struct vt_base_selector\n     {\n-      typedef value_type_base< Key, Mapped, Allocator, Store_Extra> type;\n+      typedef value_type_base<Key, Mapped, Alloc, Store_Extra> type;\n     };\n \n-    template<typename Key, typename Mapped, class Allocator, bool Store_Extra>\n+    template<typename Key, typename Mapped, typename Alloc, bool Store_Extra>\n     struct types_traits \n-    : public vt_base_selector<Key, Mapped, Allocator, Store_Extra>::type\n+    : public vt_base_selector<Key, Mapped, Alloc, Store_Extra>::type\n     {\n \n-      typedef typename Allocator::template rebind< Key>::other key_allocator;\n-\n+      typedef typename Alloc::template rebind< Key>::other key_allocator;\n       typedef typename key_allocator::value_type key_type;\n-\n       typedef typename key_allocator::pointer key_pointer;\n-\n       typedef typename key_allocator::const_pointer const_key_pointer;\n-\n       typedef typename key_allocator::reference key_reference;\n-\n       typedef typename key_allocator::const_reference const_key_reference;\n-\n-      typedef typename Allocator::size_type size_type;\n-\n+      typedef typename Alloc::size_type size_type;\n       typedef false_type store_extra_false_type;\n-\n       typedef true_type store_extra_true_type;\n-\n-      integral_constant<int,Store_Extra> m_store_extra_indicator;\n-\n       typedef false_type no_throw_copies_false_type;\n-\n       typedef true_type no_throw_copies_true_type;\n \n-      typename no_throw_copies<Key, Mapped>::indicator\n-      m_no_throw_copies_indicator;\n+      integral_constant<int, Store_Extra> m_store_extra_indicator;\n+      typename no_throw_copies<Key, Mapped>::indicator m_no_throw_copies_indicator;\n \n       // Extra value (used when the extra value is stored with each value).\n-      typedef typename comp_hash_< size_type>::comp_hash comp_hash;\n+      typedef typename comp_hash_<size_type>::comp_hash comp_hash;\n     };\n \n   } // namespace detail"}, {"sha": "a65b64c756cc948c3b9fc569faa0cb9708d4bdbd", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 67, "deletions": 31, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -135,11 +135,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     static void\n     throw_conditionally();\n \n+    // See if a particular address and size has been allocated by this\n+    // allocator.\n     static void\n-    assert_allocatod(const void*, size_t);\n+    check_allocated(void*, size_t);\n \n+    // See if a given label has been allocated by this allocator.\n     static void\n-    check_allocated(void*, size_t);\n+    check_allocated(size_t);\n \n   private:\n     typedef std::pair<size_t, size_t> \t\talloc_data_type;\n@@ -171,13 +174,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     class throw_allocator : public throw_allocator_base\n     {\n     public:\n-      typedef size_t \t\tsize_type;\n-      typedef ptrdiff_t \tdifference_type;\n-      typedef T* \t\tpointer;\n-      typedef const T* \t\tconst_pointer;\n-      typedef T& \t\treference;\n-      typedef const T& \t\tconst_reference;\n-      typedef T \t\tvalue_type;\n+      typedef size_t \t\t\t\tsize_type;\n+      typedef ptrdiff_t \t\t\tdifference_type;\n+      typedef T \t\t\t\tvalue_type;\n+      typedef value_type* \t\t\tpointer;\n+      typedef const value_type* \t\tconst_pointer;\n+      typedef value_type& \t\t\treference;\n+      typedef const value_type& \t\tconst_reference;\n+\n \n       template<typename U>\n       struct rebind\n@@ -187,44 +191,48 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n       throw_allocator() throw() { }\n \n-      throw_allocator(const throw_allocator<T>&) throw() { }\n+      throw_allocator(const throw_allocator&) throw() { }\n \n-      template <class U>\n+      template<typename U>\n       throw_allocator(const throw_allocator<U>&) throw() { }\n \n       ~throw_allocator() throw() { }\n \n       size_type\n       max_size() const throw()\n-      { return std::allocator<T>().max_size(); }\n+      { return std::allocator<value_type>().max_size(); }\n \n       pointer\n       allocate(size_type num, std::allocator<void>::const_pointer hint = 0)\n       {\n \tthrow_conditionally();\n-\tT* const a = std::allocator<T>().allocate(num, hint);\n-\tinsert(a, sizeof(T) * num);\n+\tvalue_type* const a = std::allocator<value_type>().allocate(num, hint);\n+\tinsert(a, sizeof(value_type) * num);\n \treturn a;\n       }\n \n       void\n       construct(pointer p, const T& val)\n-      { return std::allocator<T>().construct(p, val); }\n+      { return std::allocator<value_type>().construct(p, val); }\n \n       void\n       destroy(pointer p)\n-      {\tstd::allocator<T>().destroy(p); }\n+      { std::allocator<value_type>().destroy(p); }\n \n       void\n       deallocate(pointer p, size_type num)\n       {\n-\terase(p, sizeof(T) * num);\n-\tstd::allocator<T>().deallocate(p, num);\n+\terase(p, sizeof(value_type) * num);\n+\tstd::allocator<value_type>().deallocate(p, num);\n       }\n \n       void\n       check_allocated(pointer p, size_type num)\n-      { throw_allocator_base::check_allocated(p, sizeof(T) * num); }\n+      { throw_allocator_base::check_allocated(p, sizeof(value_type) * num); }\n+\n+      void\n+      check_allocated(size_type label)\n+      { throw_allocator_base::check_allocated(label); }\n     };\n \n   template<typename T>\n@@ -333,7 +341,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     const_iterator found_it = _S_map.find(p);\n     if (found_it == _S_map.end())\n       {\n-\tstd::string error(\"throw_allocator_base::check_allocated\");\n+\tstd::string error(\"throw_allocator_base::check_allocated by value \");\n \terror += \"null erase!\";\n \terror += '\\n';\n \tprint_to_string(error, make_entry(p, size));\n@@ -342,7 +350,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n     if (found_it->second.second != size)\n       {\n-\tstd::string error(\"throw_allocator_base::check_allocated\");\n+\tstd::string error(\"throw_allocator_base::check_allocated by value \");\n \terror += \"wrong-size erase!\";\n \terror += '\\n';\n \tprint_to_string(error, make_entry(p, size));\n@@ -351,6 +359,27 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       }\n   }\n \n+  void\n+  throw_allocator_base::check_allocated(size_t label)\n+  {\n+    std::string found;\n+    const_iterator it = _S_map.begin();\n+    while (it != _S_map.end())\n+      {\n+\tif (it->second.first == label)\n+\t  print_to_string(found, *it);\n+\t++it;\n+      }\n+\n+    if (!found.empty())\n+      {\n+\tstd::string error(\"throw_allocator_base::check_allocated by label \");\n+\terror += '\\n';\n+\terror += found;\n+\tthrow std::logic_error(error);\n+      }\t\n+  }\n+\n   void\n   throw_allocator_base::throw_conditionally()\n   {\n@@ -361,21 +390,28 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   void\n   throw_allocator_base::print_to_string(std::string& s)\n   {\n-    const_iterator it = throw_allocator_base::_S_map.begin();\n-    const_iterator end_it = throw_allocator_base::_S_map.end();\n-    for (; it != end_it; ++it)\n-      print_to_string(s, *it);\n-    s += '\\n';\n+    const_iterator begin = throw_allocator_base::_S_map.begin();\n+    const_iterator end = throw_allocator_base::_S_map.end();\n+    for (; begin != end; ++begin)\n+      print_to_string(s, *begin);\n   }\n \n   void\n   throw_allocator_base::print_to_string(std::string& s, const_reference ref)\n   {\n-    s += reinterpret_cast<const unsigned long>(ref.first);\n-    s += \": \";\n-    s += ref.second.first ;\n-    s += \", \";\n-    s += ref.second.second;\n+    char buf[40];\n+    const char tab('\\t');\n+    s += \"address: \";\n+    sprintf(buf, \"%p\", ref.first);\n+    s += buf;\n+    s += tab;\n+    s += \"label: \";\n+    sprintf(buf, \"%u\", ref.second.first);\n+    s += buf;\n+    s += tab;\n+    s += \"size: \";\n+    sprintf(buf, \"%u\", ref.second.second);\n+    s += buf;\n     s += '\\n';\n   }\n "}, {"sha": "1c99783923d6108da8e473e9d32bf0442566cf6c", "filename": "libstdc++-v3/include/ext/typelist.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -125,12 +125,6 @@ namespace typelist\n {\n namespace detail\n {\n-  template<typename Type>\n-    struct type_to_type\n-    {\n-      typedef Type type;\n-    };\n-\n   template<typename Fn, typename Typelist_Chain>\n     struct apply_;\n \n@@ -140,7 +134,7 @@ namespace detail\n       void\n       operator() (Fn& f)\n       {\n-\tf.operator()(type_to_type<Hd>());\n+\tf.operator()(Hd());\n \tapply_<Fn, Tl> next;\n \tnext(f);\n       }"}, {"sha": "ebf4330f2fa83d3b54563fb2ebf03b867395f8a7", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/hash_resize_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_resize_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_resize_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_resize_neg.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -70,5 +70,5 @@ int main()\n   h.resize(20); // { dg-error \"instantiated from\" }\n }\n \n-// { dg-error \"invalid\" \"\" { target *-*-* } 199 } \n+// { dg-error \"invalid\" \"\" { target *-*-* } 196 } \n // { dg-excess-errors \"member function\" } "}, {"sha": "b22b342ebddf4bf327463f8e8bcda0d80e7d50ee", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/hash_random_int_erase_mem_usage.cc", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fhash_random_int_erase_mem_usage.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fhash_random_int_erase_mem_usage.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fhash_random_int_erase_mem_usage.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -77,7 +77,7 @@ main(int argc, char* a_p_argv[])\n     {\n       xml_test_performance_formatter fmt(\"Size\", \"Memory (bytes)\");\n \n-      typedef std::vector< int> vec_t;\n+      typedef std::vector<int> vec_t;\n       vec_t a_v(vm);\n       twister_rand_gen g;\n       for (size_t i = 0; i < vm; ++i)\n@@ -87,23 +87,16 @@ main(int argc, char* a_p_argv[])\n       erase_test<vec_t::const_iterator> tst(b,  vn, vs, vm);\n       typedef mem_track_allocator<char> alloc_t;\n       {\n-\ttypedef\n-\t  hash_common_types<int, pb_ds::null_mapped_type, int_hash,\n-\t  std::equal_to<int>, alloc_t>::performance_tl\n-\t  tl_t;\n+\ttypedef hash_common_types<int, pb_ds::null_mapped_type, int_hash, std::equal_to<int>, alloc_t>::performance_tl tl_t;\n \n \ttl_t tl;\n \t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n-\ttypedef\n-\t  native_hash_set<int, 8, int_hash,\n-\t  std::equal_to<int>,\n-\t  std::less<int>, alloc_t>\n-\t  native_t;\n+\ttypedef native_hash_set<int, 8, int_hash, std::equal_to<int>, std::less<int>, alloc_t> native_t;\n \n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n+\ttst(native_t());\n       }\n     }\n   catch (...)\n@@ -118,18 +111,16 @@ void\n usage()\n {\n   using namespace std;\n-  cerr << \"usage: hash_random_int_erase_if_test <vn> <vs> <vm>\" <<\n-    endl << endl;\n-\n-  cerr <<\n-    \"This test checks the performance of various associative containers \"\n-    \"using their erase method. \" << endl;\n-  cerr << \"Specifically, it does the following:\"    << endl;\n-  cerr << \"*  Creates a vector of random integers \"    << endl;\n-  cerr << \"*  Inserts the elements into the container\"    << endl;\n-  cerr << \"*  Erases all the elements, except one, from the constainer\" << endl;\n-\n-  cerr << endl << endl;\n+  cerr << \"usage: hash_random_int_erase_if_test <vn> <vs> <vm>\" \n+       << endl << endl;\n+\n+  cerr << \"This test checks the performance of various associative containers \"\n+          \"using their erase method. \" << endl;\n+  cerr << \"Specifically, it does the following:\" << endl;\n+  cerr << \"*  Creates a vector of random integers \" << endl;\n+  cerr << \"*  Inserts the elements into the container\" << endl;\n+  cerr << \"*  Erases all the elements, except one, from the constainer\" \n+       << endl << endl;\n \n   cerr << \"vn = minimum size of the vector\" << endl;\n   cerr << \"vs = step size of the vector\" << endl;"}, {"sha": "602ff530e249731cfd020799a35fd7824b3d09f8", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/hash_zlob_random_int_find_timing.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fhash_zlob_random_int_find_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fhash_zlob_random_int_find_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fhash_zlob_random_int_find_timing.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -85,8 +85,8 @@ main(int argc, char* a_p_argv[])\n       typedef find_test<vec_t::const_iterator> test_t;\n       test_t tst(b, b, vn, vs, vm, vn, vs, vm);\n       {\n-\ttypedef native_hash_map< int, char> native_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n+\ttypedef native_hash_map<int, char> native_t;\n+\ttst(native_t());\n       }\n \n       {"}, {"sha": "61a91f4dda406da07b6cfe74b08c7ad854248ad2", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/multimap_text_find_timing.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_find_timing.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_find_timing.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_find_timing.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -107,14 +107,14 @@ main(int argc, char* a_p_argv[])\n \ttypedef native_hash_multimap<std::string, int, 8, string_hash_fn> native_t;\n \ttypedef multimap_find_test<vec_t::const_iterator, true> test_type;\n \ttest_type tst(b, prm* ratio_n, prm* ratio_s, prm* ratio_m);\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n+\ttst(native_t());\n       }\n \n       {\n \ttypedef native_multimap<std::string, int> native_t;\n \ttypedef multimap_find_test<vec_t::const_iterator, true> test_type;\n \ttest_type tst(b, prm* ratio_n, prm* ratio_s, prm* ratio_m);\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n+\ttst(native_t());\n       }\n     }\n   catch (...)"}, {"sha": "5a5f3ea65000e6526b6358342790276fb2e14320", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/multimap_text_insert_mem_usage.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -116,7 +116,7 @@ main(int argc, char* a_p_argv[])\n       test_type tst(b,  prm* ratio_n, prm* ratio_s, prm* ratio_m);\n       {\n \ttypedef native_multimap<string_t, int, std::less<string_t>, alloc_t> native_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n+\ttst(native_t());\n       }\n \n       {\n@@ -130,7 +130,7 @@ main(int argc, char* a_p_argv[])\n \t  alloc_t>\n \t  native_t;\n \n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n+\ttst(native_t());\n       }\n     }\n   catch (...)"}, {"sha": "cdf7e94f910cca861640465d64690cec0ffb6f3e", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/multimap_text_insert_timing.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_insert_timing.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -105,14 +105,14 @@ main(int argc, char* a_p_argv[])\n \ttypedef native_hash_multimap<std::string, int, 8, string_hash_fn> native_t;\n \ttypedef multimap_insert_test<vec_t::const_iterator, true> test_type;\n \ttest_type tst(b,  prm*  ratio_n, prm*  ratio_s, prm*  ratio_m);\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n+\ttst(native_t());\n       }\n \n       {\n \ttypedef native_multimap<std::string, int> native_t;\n \ttypedef multimap_insert_test<vec_t::const_iterator, true> test_type;\n \ttest_type tst(b, prm* ratio_n, prm* ratio_s, prm* ratio_m);\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n+\ttst(native_t());\n       }\n     }\n   catch (...)"}, {"sha": "4487c27cf70da9c6c0f9cc9c75fec974c15388a0", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/priority_queue_random_int_push_pop_timing.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_pop_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_pop_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_pop_timing.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -88,12 +88,12 @@ main(int argc, char* a_p_argv[])\n \n       {\n \ttypedef native_priority_queue<int, true> native_pq_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n+\ttst(native_pq_t());\n       }\n \n       {\n \ttypedef native_priority_queue<int, false> native_pq_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n+\ttst(native_pq_t());\n       }\n     }\n   catch(...)"}, {"sha": "b867f9b79e7daa9b24b86099c44b0aa2186b6b0e", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/priority_queue_random_int_push_timing.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_random_int_push_timing.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -86,12 +86,12 @@ main(int argc, char* a_p_argv[])\n \n       {\n \ttypedef native_priority_queue<int, true> native_pq_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n+\ttst(native_pq_t());\n       }\n \n       {\n \ttypedef native_priority_queue<int, false> native_pq_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n+\ttst(native_pq_t());\n       }\n     }\n   catch (...)"}, {"sha": "4add14795cbd767f23c5cd38bf21c95fe03c506d", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/priority_queue_text_join_timing.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_join_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_join_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_join_timing.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -106,12 +106,12 @@ main(int argc, char* a_p_argv[])\n \n       {\n \ttypedef native_priority_queue<std::string, true> native_pq_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n+\ttst(native_pq_t());\n       }\n \n       {\n \ttypedef native_priority_queue<std::string, false> native_pq_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n+\ttst(native_pq_t());\n       }\n     }\n   catch(...)"}, {"sha": "4eadff4f6d117486cf36cb3118ec5b1a2734c79b", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/priority_queue_text_modify_timing.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_timing.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_timing.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_modify_timing.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -92,12 +92,12 @@ main(int argc, char* a_p_argv[])\n \n       {\n \ttypedef native_priority_queue<std::string, true> native_pq_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n+\ttst(native_pq_t());\n       }\n \n       {\n \ttypedef native_priority_queue<std::string, false> native_pq_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n+\ttst(native_pq_t());\n       }\n     }\n   catch (...)"}, {"sha": "681ad71d6eb58ecb6049603ed5c9d30f6013d78b", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/priority_queue_text_pop_mem_usage.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_pop_mem_usage.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_pop_mem_usage.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_pop_mem_usage.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -88,12 +88,12 @@ main(int argc, char* a_p_argv[])\n \n       {\n \ttypedef native_priority_queue<string_t, true, std::less<string_t>, mem_track_allocator<string_t> > native_pq_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n+\ttst(native_pq_t());\n       }\n \n       {\n \ttypedef native_priority_queue<string_t, false, std::less<string_t>, mem_track_allocator<string_t> > native_pq_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n+\ttst(native_pq_t());\n       }\n     }\n   catch (...)"}, {"sha": "a02f50b6d5a61b2d47361dfee3458970109a72c0", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/priority_queue_text_push_pop_timing.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_push_pop_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_push_pop_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_push_pop_timing.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -85,12 +85,12 @@ main(int argc, char* a_p_argv[])\n \n       {\n \ttypedef native_priority_queue<std::string, true> native_pq_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n+\ttst(native_pq_t());\n       }\n \n       {\n \ttypedef native_priority_queue<std::string, false> native_pq_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n+\ttst(native_pq_t());\n       }\n     }\n   catch(...)"}, {"sha": "cd60912051a88f9a36464c1b6e6969178bb3b2c4", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/priority_queue_text_push_timing.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_push_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_push_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_push_timing.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -85,12 +85,12 @@ main(int argc, char* a_p_argv[])\n \n       {\n \ttypedef native_priority_queue<std::string, true> native_pq_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n+\ttst(native_pq_t());\n       }\n \n       {\n \ttypedef native_priority_queue<std::string, false> native_pq_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_pq_t>());\n+\ttst(native_pq_t());\n       }\n     }\n   catch(...)"}, {"sha": "409685dd64efa5bed3307d06cf9926e1be08d8a2", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/random_int_find_timing.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_find_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_find_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_find_timing.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -82,12 +82,12 @@ main(int argc, char* a_p_argv[])\n       test_t tst(b, b, vn, vs, vm, vn, vs, vm);\n       {\n \ttypedef native_hash_map< int, char> native_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n+\ttst(native_t());\n       }\n \n       {\n \ttypedef native_map< int, char> native_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n+\ttst(native_t());\n       }\n \n       {"}, {"sha": "d500bd39f0d6a32b6e5dc650b6a496bd3fb610e9", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/random_int_subscript_find_timing.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_subscript_find_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_subscript_find_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_subscript_find_timing.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -94,12 +94,12 @@ main(int argc, char* a_p_argv[])\n \n       {\n \ttypedef native_hash_map<int, size_t> native_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n+\ttst(native_t());\n       }\n \n       {\n \ttypedef native_map< int, size_t> native_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n+\ttst(native_t());\n       }\n     }\n   catch (...)"}, {"sha": "09a13fec66b0d426f131d1e4e2415209258e7583", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/random_int_subscript_insert_timing.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_subscript_insert_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_subscript_insert_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Frandom_int_subscript_insert_timing.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -94,12 +94,12 @@ main(int argc, char* a_p_argv[])\n \n       {\n \ttypedef native_hash_map< int, size_t> native_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n+\ttst(native_t());\n       }\n \n       {\n \ttypedef native_map< int, size_t> native_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_t>());\n+\ttst(native_t());\n       }\n     }\n   catch(...)"}, {"sha": "cc88399463f9e4006a7b8d88f459a3c93e3931a5", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/text_find_timing.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftext_find_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftext_find_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftext_find_timing.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -93,11 +93,11 @@ main(int argc, char* a_p_argv[])\n \n       {\n \ttypedef native_map<std::string, char> native_map_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_map_t>());\n+\ttst(native_map_t());\n \n #ifdef PB_DS_USE_TR1\n \ttypedef native_hash_map<std::string, char, 8, string_hash_fn> native_hash_map_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_hash_map_t>());\n+\ttst(native_hash_map_t());\n \n \ttypedef\n \t  native_hash_map<\n@@ -114,7 +114,7 @@ main(int argc, char* a_p_argv[])\n \t  true>\n \t  sth_native_hash_map_t;\n \n-\ttst(__gnu_cxx::typelist::detail::type_to_type<sth_native_hash_map_t>());\n+\ttst(sth_native_hash_map_t());\n #endif\n       }\n     }"}, {"sha": "5909b56b5a30c607f8c6ea72039c41419834b9d2", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/tree_order_statistics_timing.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_order_statistics_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_order_statistics_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_order_statistics_timing.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -80,7 +80,7 @@ main(int argc, char* a_p_argv[])\n \ttypedef tree_order_statistics_test<false> test_t;\n \ttest_t tst(vn, vs, vm);\n \ttypedef native_set<int> native_set_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_set_t>());\n+\ttst(native_set_t());\n       }\n     }\n   catch(...)"}, {"sha": "3a27eb2a0b73ed0cf637feaa57de9cfa4fd584fb", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/tree_split_join_timing.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_split_join_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_split_join_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_split_join_timing.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -81,7 +81,7 @@ main(int argc, char* a_p_argv[])\n \ttypedef tree_split_join_test<false> test_t;\n \ttest_t tst(vn, vs, vm);\n \ttypedef native_set<int> native_set_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_set_t>());\n+\ttst(native_set_t());\n       }\n     }\n   catch(...)"}, {"sha": "5ee6f90be3c9eb2ed2348adfdaff70a4a89721ef", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/tree_text_insert_timing.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_text_insert_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_text_insert_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_text_insert_timing.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -89,7 +89,7 @@ main(int argc, char* a_p_argv[])\n \n       {\n \ttypedef native_map<std::string, char> native_map_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_map_t>());\n+\ttst(native_map_t());\n       }\n     }\n   catch (...)"}, {"sha": "da7bdedca74d924bbfe44df6c66c1a262f169b8a", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/tree_text_lor_find_timing.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_text_lor_find_timing.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_text_lor_find_timing.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Ftree_text_lor_find_timing.cc?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -80,7 +80,7 @@ main(int argc, char* a_p_argv[])\n       test_t tst(b, b, vn, vs, vm, vn, vs, vm);\n       {\n \ttypedef native_map<std::string, char> native_set_t;\n-\ttst(__gnu_cxx::typelist::detail::type_to_type<native_set_t>());\n+\ttst(native_set_t());\n       }\n \n       {"}, {"sha": "209208747f4e473eef2c105d730a3f9331fceb88", "filename": "libstdc++-v3/testsuite/util/common_type/assoc/common_type.hpp", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fcommon_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fcommon_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fcommon_type.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -53,19 +53,13 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     template<typename Key,\n \t     typename Data,\n-\t     class Hash_Fn =\n-\t     typename pb_ds::detail::default_hash_fn<\n-      Key>::type,\n-\t     class Eq_Fn =\n-\t     std::equal_to<Key>,\n-\t     class Allocator =\n-\t     std::allocator<std::pair<const Key, Data> > >\n+\t     class Hash_Fn = typename pb_ds::detail::default_hash_fn<Key>::type,\n+\t     class Eq_Fn = std::equal_to<Key>,\n+\t     class Allocator = std::allocator<std::pair<const Key, Data> > >\n     struct hash_common_types\n     {\n     private:"}, {"sha": "b34364b132df8555497e2d0da9cfab6a433ae25a", "filename": "libstdc++-v3/testsuite/util/common_type/assoc/native_set.hpp", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fnative_set.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fnative_set.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fnative_set.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -54,29 +54,19 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    std::set<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\tKey,\t\\\n-\t\t\t\t\t\t\t\tCmp_Fn,\t\\\n-\t\t\t\t\t\t\t\ttypename Allocator::template rebind< \\\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tKey>::other>\n-\n     template<typename Key, class Cmp_Fn = std::less<Key>,\n-\t     class Allocator =\n-\t     std::allocator<char> >\n+\t     class Allocator = std::allocator<char> >\n     class native_set : public PB_DS_BASE_C_DEC\n     {\n     private:\n-      typedef PB_DS_BASE_C_DEC base_type;\n+      typedef std::set<Key, Cmp_Fn, typename Allocator::template rebind<Key>::other> base_type;\n \n     public:\n       typedef native_tree_tag container_category;\n \n-      typedef typename PB_DS_BASE_C_DEC::const_iterator const_iterator;\n+      typedef typename base_type::const_iterator const_iterator;\n \n     public:\n       native_set() : base_type()\n@@ -91,21 +81,14 @@ namespace pb_ds\n \n       static std::string\n       name()\n-      {\n-        return (\"n_set\");\n-      }\n+      { return (\"n_set\"); }\n \n       static std::string\n       desc()\n-      {\n-        return (make_xml_tag(            \"type\", \"value\", \"std_set\"));\n-      }\n+      { return (make_xml_tag(\"type\", \"value\", \"std_set\")); }\n     };\n-\n-#undef PB_DS_BASE_C_DEC\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_NATIVE_SET_HPP\n+#endif\n+"}, {"sha": "f29f29d24e036625c0189393ee5cc529d33176d2", "filename": "libstdc++-v3/testsuite/util/common_type/assoc/string_form.hpp", "status": "modified", "additions": 40, "deletions": 89, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fstring_form.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fstring_form.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Fstring_form.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -63,13 +63,10 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n       template<typename Cntnr>\n       struct pb_ds_string_form\n       {\n@@ -81,158 +78,112 @@ namespace pb_ds\n \tprivate:\n \t  template<typename D_Cntnr>\n \t  static std::string\n-\t  name(__gnu_cxx::typelist::detail::type_to_type<D_Cntnr>)\n-\t  {\n-            return (\"mmap_\" + pb_ds_string_form<D_Cntnr>::name());\n-\t  }\n+\t  name(D_Cntnr)\n+\t  { return (\"mmap_\" + pb_ds_string_form<D_Cntnr>::name()); }\n \n \t  template<typename D_Cntnr>\n \t  static std::string\n-\t  desc(__gnu_cxx::typelist::detail::type_to_type<D_Cntnr>)\n-\t  {\n-            return (pb_ds_string_form<D_Cntnr>::desc());\n-\t  }\n+\t  desc(D_Cntnr)\n+\t  { return pb_ds_string_form<D_Cntnr>::desc(); }\n \n \t  static std::string\n-\t  name(__gnu_cxx::typelist::detail::type_to_type<size_t>)\n-\t  {\n-            return (\"map\");\n-\t  }\n+\t  name(size_t)\n+\t  { return (\"map\"); }\n \n \t  static std::string\n-\t  desc(__gnu_cxx::typelist::detail::type_to_type<size_t>)\n-\t  {\n-            return (\"\");\n-\t  }\n+\t  desc(size_t)\n+\t  { return (\"\"); }\n \n \t  static std::string\n-\t  name(__gnu_cxx::typelist::detail::type_to_type<basic_type>)\n-\t  {\n-            return (\"map\");\n-\t  }\n+\t  name(basic_type)\n+\t  { return (\"map\"); }\n \n \t  static std::string\n-\t  desc(__gnu_cxx::typelist::detail::type_to_type<basic_type>)\n-\t  {\n-            return (\"\");\n-\t  }\n+\t  desc(basic_type)\n+\t  { return (\"\"); }\n \n \t  static std::string\n-\t  name(__gnu_cxx::typelist::detail::type_to_type<int>)\n-\t  {\n-            return (\"map\");\n-\t  }\n+\t  name(int)\n+\t  { return (\"map\"); }\n \n \t  static std::string\n-\t  desc(__gnu_cxx::typelist::detail::type_to_type<int>)\n-\t  {\n-            return (\"\");\n-\t  }\n+\t  desc(int)\n+\t  { return (\"\"); }\n \n \t  static std::string\n-\t  name(__gnu_cxx::typelist::detail::type_to_type<char>)\n-\t  {\n-            return (\"map\");\n-\t  }\n+\t  name(char)\n+\t  { return (\"map\"); }\n \n \t  static std::string\n-\t  desc(__gnu_cxx::typelist::detail::type_to_type<char>)\n-\t  {\n-            return (\"\");\n-\t  }\n+\t  desc(char)\n+\t  { return (\"\"); }\n \n \t  static std::string\n-\t  name(__gnu_cxx::typelist::detail::type_to_type<pb_ds::null_mapped_type>)\n-\t  {\n-            return (\"set\");\n-\t  }\n+\t  name(pb_ds::null_mapped_type)\n+\t  { return (\"set\"); }\n \n \t  static std::string\n-\t  desc(__gnu_cxx::typelist::detail::type_to_type<pb_ds::null_mapped_type>)\n-\t  {\n-            return (\"\");\n-\t  }\n+\t  desc(pb_ds::null_mapped_type)\n+\t  { return (\"\"); }\n \n \tpublic:\n \t  static std::string\n \t  name()\n-\t  {\n-            return (name(__gnu_cxx::typelist::detail::type_to_type<mapped_type>()));\n-\t  }\n+\t  { return name(mapped_type()); }\n \n \t  static std::string\n \t  desc()\n-\t  {\n-            return (desc(__gnu_cxx::typelist::detail::type_to_type<mapped_type>()));\n-\t  }\n+\t  { return desc(mapped_type()); }\n \t};\n \n \ttypedef\n-        detail::ds_string_form<\n-\t  Cntnr,\n-\t  typename Cntnr::container_category>\n+        detail::ds_string_form<Cntnr, typename Cntnr::container_category>\n         ds_string_form_t;\n \n       public:\n \tstatic std::string\n         name()\n-\t{\n-\t  return (ds_string_form_t::name() + mapped_string_form::name());\n-\t}\n+\t{ return (ds_string_form_t::name() + mapped_string_form::name()); }\n \n \tstatic std::string\n         desc()\n-\t{\n-\t  return (ds_string_form_t::desc() + mapped_string_form::desc());\n-\t}\n+\t{ return (ds_string_form_t::desc() + mapped_string_form::desc()); }\n       };\n \n       template<typename Cntnr>\n       struct native_string_form\n       {\n \tstatic std::string\n         name()\n-\t{\n-\t  return (Cntnr::name());\n-\t}\n+\t{ return Cntnr::name(); }\n \n \tstatic std::string\n         desc()\n-\t{\n-\t  return (Cntnr::desc());\n-\t}\n+\t{ return Cntnr::desc(); }\n       };\n \n       template<typename Cntnr, class Tag>\n-      struct tag_select_string_form : public pb_ds_string_form<\n-        Cntnr>\n+      struct tag_select_string_form : public pb_ds_string_form<Cntnr>\n       { };\n \n       template<typename Cntnr>\n-      struct tag_select_string_form<\n-        Cntnr,\n-        native_hash_tag> : public native_string_form<\n-        Cntnr>\n+      struct tag_select_string_form<Cntnr, native_hash_tag> \n+      : public native_string_form<Cntnr>\n       { };\n \n       template<typename Cntnr>\n-      struct tag_select_string_form<\n-        Cntnr,\n-        native_tree_tag> : public native_string_form<\n-        Cntnr>\n+      struct tag_select_string_form<Cntnr, native_tree_tag> \n+      : public native_string_form<Cntnr>\n       { };\n-\n     } // namespace detail\n \n     template<typename Cntnr>\n-    struct string_form : public detail::tag_select_string_form<\n-      Cntnr,\n-      typename Cntnr::container_category>\n+    struct string_form \n+    : public detail::tag_select_string_form<Cntnr, \n+\t\t\t\t\t    typename Cntnr::container_category>\n     { };\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_STRING_FORM_HPP\n+#endif\n "}, {"sha": "10f03dadd06ee7b08134ac331c04783fb2001e75", "filename": "libstdc++-v3/testsuite/util/common_type/assoc/template_policy.hpp", "status": "modified", "additions": 34, "deletions": 54, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Ftemplate_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Ftemplate_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fcommon_type%2Fassoc%2Ftemplate_policy.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -54,28 +54,22 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     template<typename Allocator>\n-    struct direct_mask_range_hashing_t_ : public pb_ds::direct_mask_range_hashing<\n-      typename Allocator::size_type>\n+    struct direct_mask_range_hashing_t_ \n+    : public pb_ds::direct_mask_range_hashing<typename Allocator::size_type>\n     {\n-      typedef\n-      pb_ds::direct_mask_range_hashing<\n-\ttypename Allocator::size_type>\n-      base_type;\n+      typedef typename Allocator::size_type size_type;\n+      typedef pb_ds::direct_mask_range_hashing<size_type> base_type;\n     };\n \n     template<typename Allocator>\n-    struct direct_mod_range_hashing_t_ : public pb_ds::direct_mod_range_hashing<\n-      typename Allocator::size_type>\n+    struct direct_mod_range_hashing_t_ \n+    : public pb_ds::direct_mod_range_hashing<typename Allocator::size_type>\n     {\n-      typedef\n-      pb_ds::direct_mod_range_hashing<\n-\ttypename Allocator::size_type>\n-      base_type;\n+      typedef typename Allocator::size_type size_type;\n+      typedef pb_ds::direct_mod_range_hashing<size_type> base_type;\n     };\n \n     template<typename Allocator,\n@@ -84,22 +78,16 @@ namespace pb_ds\n \t     typename Allocator::size_type Max_Load_Nom,\n \t     typename Allocator::size_type Max_Load_Denom,\n \t     bool External_Access>\n-    struct hash_load_check_resize_trigger_t_ : public pb_ds::hash_load_check_resize_trigger<\n-      External_Access,\n-      typename Allocator::size_type>\n+    struct hash_load_check_resize_trigger_t_ \n+    : public pb_ds::hash_load_check_resize_trigger<External_Access,\n+\t\t\t\t\t\t   typename Allocator::size_type>\n     {\n-      typedef\n-      pb_ds::hash_load_check_resize_trigger<\n-\tExternal_Access,\n-\ttypename Allocator::size_type>\n-      base_type;\n+      typedef typename Allocator::size_type size_type;\n+      typedef pb_ds::hash_load_check_resize_trigger<External_Access, size_type>  base_type;\n \n       inline\n-      hash_load_check_resize_trigger_t_() : base_type(\n-\t\t\t\t\t\t      static_cast<float>(Min_Load_Nom) /\n-\t\t\t\t\t\t      static_cast<float>(Min_Load_Denom),\n-\t\t\t\t\t\t      static_cast<float>(Max_Load_Nom) /\n-\t\t\t\t\t\t      static_cast<float>(Max_Load_Denom))\n+      hash_load_check_resize_trigger_t_() \n+      : base_type(static_cast<float>(Min_Load_Nom) / static_cast<float>(Min_Load_Denom), static_cast<float>(Max_Load_Nom) / static_cast<float>(Max_Load_Denom))\n       { }\n \n       enum\n@@ -113,20 +101,16 @@ namespace pb_ds\n \t     typename Allocator::size_type Load_Nom,\n \t     typename Allocator::size_type Load_Denom,\n \t     bool External_Access>\n-    struct cc_hash_max_collision_check_resize_trigger_t_ : public pb_ds::cc_hash_max_collision_check_resize_trigger<\n-      External_Access,\n+    struct cc_hash_max_collision_check_resize_trigger_t_ \n+    : public pb_ds::cc_hash_max_collision_check_resize_trigger<External_Access,\n       typename Allocator::size_type>\n     {\n-      typedef\n-      pb_ds::cc_hash_max_collision_check_resize_trigger<\n-\tExternal_Access,\n-\ttypename Allocator::size_type>\n-      base_type;\n+      typedef typename Allocator::size_type size_type;\n+      typedef pb_ds::cc_hash_max_collision_check_resize_trigger<External_Access, size_type> base_type;\n \n       inline\n-      cc_hash_max_collision_check_resize_trigger_t_() : base_type(\n-\t\t\t\t\t\t\t\t  static_cast<float>(Load_Nom) /\n-\t\t\t\t\t\t\t\t  static_cast<float>(Load_Denom))\n+      cc_hash_max_collision_check_resize_trigger_t_() \n+      : base_type(static_cast<float>(Load_Nom) / static_cast<float>(Load_Denom))\n       { }\n \n       enum\n@@ -140,36 +124,32 @@ namespace pb_ds\n     { };\n \n     template<typename Allocator>\n-    struct hash_exponential_size_policy_t_ : public pb_ds::hash_exponential_size_policy<\n-      typename Allocator::size_type>\n-    {\n-      // Nothing\n-    };\n+    struct hash_exponential_size_policy_t_ \n+    : public pb_ds::hash_exponential_size_policy<typename Allocator::size_type>\n+    { };\n \n     template<typename Key, class Allocator>\n-    struct linear_probe_fn_t_ : public pb_ds::linear_probe_fn<\n-      typename Allocator::size_type>\n+    struct linear_probe_fn_t_ \n+    : public pb_ds::linear_probe_fn<typename Allocator::size_type>\n     { };\n \n     template<typename Key, class Allocator>\n-    struct quadratic_probe_fn_t_ : public pb_ds::quadratic_probe_fn<\n-      typename Allocator::size_type>\n+    struct quadratic_probe_fn_t_ \n+    : public pb_ds::quadratic_probe_fn<typename Allocator::size_type>\n     { };\n \n     template<typename Allocator, typename Allocator::size_type Max_Count>\n-    struct counter_lu_policy_t_ : public pb_ds::counter_lu_policy<\n-      Max_Count,\n-      Allocator>\n+    struct counter_lu_policy_t_ \n+    : public pb_ds::counter_lu_policy<Max_Count, Allocator>\n     {\n-      typedef pb_ds::counter_lu_policy< Max_Count, Allocator> base_type;\n+      typedef pb_ds::counter_lu_policy<Max_Count, Allocator> base_type;\n     };\n \n-    struct move_to_front_lu_policy_t_ : public pb_ds::move_to_front_lu_policy<>\n+    struct move_to_front_lu_policy_t_ \n+    : public pb_ds::move_to_front_lu_policy<>\n     { };\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_TEMPLATE_POLICY_HPP\n+#endif \n "}, {"sha": "82f5634f14bca3c6df826e61887ce9a3dffa37ba", "filename": "libstdc++-v3/testsuite/util/performance/assoc/mem_usage/erase_test.hpp", "status": "modified", "additions": 19, "deletions": 48, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Ferase_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Ferase_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Ferase_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -55,91 +55,62 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename It>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    erase_test<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tIt>\n-\n     template<typename It>\n     class erase_test\n     {\n     public:\n-      erase_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm);\n+      erase_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm)\n+      :\tm_ins_b(ins_b), m_ins_vn(ins_vn), m_ins_vs(ins_vs), m_ins_vm(ins_vm)\n+      { }\n \n       template<typename Cntnr>\n-      void\n-      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n+        void\n+        operator()(Cntnr);\n \n     private:\n-      erase_test(const erase_test& );\n+      erase_test(const erase_test&);\n \n-    private:\n-      const It m_ins_b;\n-\n-      const size_t m_ins_vn;\n-      const size_t m_ins_vs;\n-      const size_t m_ins_vm;\n+      const It \t\tm_ins_b;\n+      const size_t \tm_ins_vn;\n+      const size_t \tm_ins_vs;\n+      const size_t \tm_ins_vm;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    erase_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm) :\n-      m_ins_b(ins_b),\n-      m_ins_vn(ins_vn),\n-      m_ins_vs(ins_vs),\n-      m_ins_vm(ins_vm)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n+    template<typename It>\n     template<typename Cntnr>\n     void\n-    PB_DS_CLASS_C_DEC::\n-    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+    erase_test<It>::\n+    operator()(Cntnr)\n     {\n-      xml_result_set_performance_formatter res_set_fmt(\n-\t\t\t\t\t\t       string_form<Cntnr>::name(),\n-\t\t\t\t\t\t       string_form<Cntnr>::desc());\n+      typedef string_form<Cntnr> sform_type;\n+      typedef xml_result_set_performance_formatter formatter_type;\n+      formatter_type res_set_fmt(sform_type::name(), sform_type::desc());\n \n-      for (size_t size_i = 0; m_ins_vn + size_i*  m_ins_vs < m_ins_vm; ++size_i)\n+      for (size_t i = 0; m_ins_vn + i * m_ins_vs < m_ins_vm; ++i)\n \t{\n-\t  const size_t ins_size = m_ins_vn + size_i*  m_ins_vs;\n+\t  const size_t ins_size = m_ins_vn + i * m_ins_vs;\n \n \t  It ins_it_b = m_ins_b;\n \t  It ins_it_e = m_ins_b;\n \t  std::advance(ins_it_e, ins_size);\n \n \t  mem_track_allocator<char> alloc;\n-\n \t  const size_t init_mem = alloc.get_total();\n-\n \t  Cntnr cntnr(ins_it_b, ins_it_e);\n \n \t  while (cntnr.size() > 1)\n             cntnr.erase(*cntnr.begin());\n \n \t  const size_t final_mem = alloc.get_total();\n-\n \t  assert(final_mem > init_mem);\n-\n \t  const size_t delta_mem = final_mem - init_mem;\n-\n \t  res_set_fmt.add_res(ins_size, static_cast<double>(delta_mem));\n \t}\n     }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_ERASE_TEST_HPP\n+#endif\n "}, {"sha": "85ea8a6903f8c15593018c7475d72fc68edd020e", "filename": "libstdc++-v3/testsuite/util/performance/assoc/mem_usage/multimap_insert_test.hpp", "status": "modified", "additions": 23, "deletions": 63, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Fmultimap_insert_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Fmultimap_insert_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Fmultimap_insert_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -55,134 +55,94 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename It, bool Native>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    multimap_insert_test<\t\t\t\t\\\n-\t\t\t\t\t\tIt,\t\\\n-\t\t\t\t\t\tNative>\n-\n     template<typename It, bool Native>\n     class multimap_insert_test\n     {\n     public:\n-      multimap_insert_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm);\n+      multimap_insert_test(It b, size_t ins_vn, size_t ins_vs, size_t ins_vm):\n+      m_ins_b(b), m_ins_vn(ins_vn), m_ins_vs(ins_vs), m_ins_vm(ins_vm)\n+      { }\n \n       template<typename Cntnr>\n       void\n-      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n+      operator()(Cntnr);\n \n     private:\n-      multimap_insert_test(const multimap_insert_test& );\n+      multimap_insert_test(const multimap_insert_test&);\n \n       template<typename Cntnr>\n       size_t\n-      insert(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e, pb_ds::detail::true_type);\n+      insert(Cntnr, It ins_it_b, It ins_it_e, pb_ds::detail::true_type);\n \n       template<typename Cntnr>\n       size_t\n-      insert(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e, pb_ds::detail::false_type);\n+      insert(Cntnr, It ins_it_b, It ins_it_e, pb_ds::detail::false_type);\n \n-    private:\n       const It m_ins_b;\n-\n       const size_t m_ins_vn;\n       const size_t m_ins_vs;\n       const size_t m_ins_vm;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    multimap_insert_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm) :\n-      m_ins_b(ins_b),\n-      m_ins_vn(ins_vn),\n-      m_ins_vs(ins_vs),\n-      m_ins_vm(ins_vm)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n+    template<typename It, bool Native>\n     template<typename Cntnr>\n     void\n-    PB_DS_CLASS_C_DEC::\n-    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+    multimap_insert_test<It, Native>::\n+    operator()(Cntnr)\n     {\n-      xml_result_set_performance_formatter res_set_fmt(\n-\t\t\t\t\t\t       string_form<Cntnr>::name(),\n-\t\t\t\t\t\t       string_form<Cntnr>::desc());\n+      typedef xml_result_set_performance_formatter formatter_type;\n+      formatter_type res_set_fmt(string_form<Cntnr>::name(),\n+\t\t\t\t string_form<Cntnr>::desc());\n \n-      for (size_t size_i = 0; m_ins_vn + size_i*  m_ins_vs < m_ins_vm; ++size_i)\n+      for (size_t i = 0; m_ins_vn + i * m_ins_vs < m_ins_vm; ++i)\n \t{\n-\t  const size_t ins_size = m_ins_vn + size_i*  m_ins_vs;\n-\n+\t  const size_t ins_size = m_ins_vn + i * m_ins_vs;\n \t  It ins_it_b = m_ins_b;\n \t  It ins_it_e = m_ins_b;\n \t  std::advance(ins_it_e, ins_size);\n \n-\t  const size_t delta_mem = insert(__gnu_cxx::typelist::detail::type_to_type<Cntnr>(),\n-\t\t\t\t\t  ins_it_b,\n-\t\t\t\t\t  ins_it_e,\n+\t  const size_t delta_mem = insert(Cntnr(), ins_it_b, ins_it_e,\n \t\t\t\t\t  pb_ds::detail::integral_constant<int,Native>());\n \n \t  res_set_fmt.add_res(ins_size, static_cast<double>(delta_mem));\n \t}\n     }\n \n-    PB_DS_CLASS_T_DEC\n+    template<typename It, bool Native>\n     template<typename Cntnr>\n     size_t\n-    PB_DS_CLASS_C_DEC::\n-    insert(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e, pb_ds::detail::true_type)\n+    multimap_insert_test<It, Native>::\n+    insert(Cntnr, It ins_it_b, It ins_it_e, pb_ds::detail::true_type)\n     {\n       mem_track_allocator<char> alloc;\n-\n       const size_t init_mem = alloc.get_total();\n-\n       Cntnr cntnr;\n-\n       for (It ins_it = ins_it_b; ins_it != ins_it_e; ++ins_it)\n         cntnr.insert((typename Cntnr::const_reference)(*ins_it));\n-\n       const size_t final_mem = alloc.get_total();\n-\n       assert(final_mem > init_mem);\n-\n       return (final_mem - init_mem);\n     }\n \n-    PB_DS_CLASS_T_DEC\n+    template<typename It, bool Native>\n     template<typename Cntnr>\n     size_t\n-    PB_DS_CLASS_C_DEC::\n-    insert(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e, pb_ds::detail::false_type)\n+    multimap_insert_test<It, Native>::\n+    insert(Cntnr, It ins_it_b, It ins_it_e, pb_ds::detail::false_type)\n     {\n       mem_track_allocator<char> alloc;\n-\n       const size_t init_mem = alloc.get_total();\n-\n       Cntnr cntnr;\n-\n       for (It ins_it = ins_it_b; ins_it != ins_it_e; ++ins_it)\n         cntnr[ins_it->first].insert(ins_it->second);\n-\n       const size_t final_mem = alloc.get_total();\n-\n       assert(final_mem > init_mem);\n-\n       return (final_mem - init_mem);\n     }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_MULTIMAP_INSERT_TEST_HPP\n+#endif \n "}, {"sha": "e0bb1e95d739e8673b8a7b8f85bff308595a7306", "filename": "libstdc++-v3/testsuite/util/performance/assoc/multimap_common_type.hpp", "status": "modified", "additions": 28, "deletions": 55, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmultimap_common_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmultimap_common_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmultimap_common_type.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -52,39 +52,31 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n-      struct int_hash : public std::unary_function<\n-        int,\n-        size_t>\n+      struct int_hash : public std::unary_function<int, size_t>\n       {\n \tinline size_t\n         operator()(const int i) const\n-\t{\n-\t  return (static_cast<size_t>(i));\n-\t}\n+\t{ return (static_cast<size_t>(i)); }\n       };\n \n-      template<typename Key, class Allocator = std::allocator<char> >\n+      template<typename Key, typename Allocator = std::allocator<char> >\n       struct hash_set_tl_t\n       {\n \ttypedef\n         typename pb_ds::test::hash_common_types<\n \t  Key,\n \t  pb_ds::null_mapped_type,\n \t  int_hash,\n-\t  std::equal_to<\n-\t  Key>,\n+\t  std::equal_to<Key>,\n \t  Allocator>::performance_min_tl\n         type;\n       };\n \n-      template<typename Key, class Allocator = std::allocator<char> >\n+      template<typename Key, typename Allocator = std::allocator<char> >\n       struct lu_set_tl_t\n       {\n \ttypedef\n@@ -99,8 +91,7 @@ namespace pb_ds\n \n       template<typename Key,\n \t       class Sec_Tl,\n-\t       class Allocator = std::allocator<\n-        char> >\n+\t       typename Allocator = std::allocator<char> >\n       struct hash_mmap_tl_t\n       {\n       private:\n@@ -138,8 +129,7 @@ namespace pb_ds\n \n       template<typename Key,\n \t       class Sec_Tl,\n-\t       class Allocator = std::allocator<\n-        char> >\n+\t       typename Allocator = std::allocator<char> >\n       struct tree_mmap_tl_t\n       {\n       private:\n@@ -166,95 +156,78 @@ namespace pb_ds\n         type;\n       };\n \n-      template<typename Key, typename Mapped, class Allocator>\n+      template<typename Key, typename Mapped, typename Allocator>\n       struct hash_hash_mmap_tl_t\n       {\n       private:\n-\ttypedef typename hash_set_tl_t< Mapped, Allocator>::type sec_tl_t;\n+\ttypedef typename hash_set_tl_t<Mapped, Allocator>::type sec_tl_t;\n \n       public:\n-\ttypedef typename hash_mmap_tl_t< Key, sec_tl_t, Allocator>::type type;\n+\ttypedef typename hash_mmap_tl_t<Key, sec_tl_t, Allocator>::type type;\n       };\n \n-      template<typename Key, typename Mapped, class Allocator>\n+      template<typename Key, typename Mapped, typename Allocator>\n       struct tree_hash_mmap_tl_t\n       {\n       private:\n-\ttypedef typename hash_set_tl_t< Mapped, Allocator>::type sec_tl_t;\n+\ttypedef typename hash_set_tl_t<Mapped, Allocator>::type sec_tl_t;\n \n       public:\n-\ttypedef typename tree_mmap_tl_t< Key, sec_tl_t, Allocator>::type type;\n+\ttypedef typename tree_mmap_tl_t<Key, sec_tl_t, Allocator>::type type;\n       };\n \n-      template<typename Key, typename Mapped, class Allocator>\n+      template<typename Key, typename Mapped, typename Allocator>\n       struct tree_lu_mmap_tl_t\n       {\n       private:\n-\ttypedef typename lu_set_tl_t< Mapped, Allocator>::type sec_tl_t;\n+\ttypedef typename lu_set_tl_t<Mapped, Allocator>::type sec_tl_t;\n \n       public:\n-\ttypedef typename tree_mmap_tl_t< Key, sec_tl_t, Allocator>::type type;\n+\ttypedef typename tree_mmap_tl_t<Key, sec_tl_t, Allocator>::type type;\n       };\n \n-      template<typename Key, typename Mapped, class Allocator>\n+      template<typename Key, typename Mapped, typename Allocator>\n       struct hash_lu_mmap_tl_t\n       {\n       private:\n-\ttypedef typename lu_set_tl_t< Mapped, Allocator>::type sec_tl_t;\n+\ttypedef typename lu_set_tl_t<Mapped, Allocator>::type sec_tl_t;\n \n       public:\n-\ttypedef typename hash_mmap_tl_t< Key, sec_tl_t, Allocator>::type type;\n+\ttypedef typename hash_mmap_tl_t<Key, sec_tl_t, Allocator>::type type;\n       };\n-\n     } // namespace detail\n \n-    template<typename Key, typename Mapped, class Allocator>\n+    template<typename Key, typename Mapped, typename Allocator>\n     struct mmap_tl_t\n     {\n     private:\n       typedef\n-      typename detail::hash_hash_mmap_tl_t<\n-      Key,\n-      Mapped,\n-      Allocator>::type\n+      typename detail::hash_hash_mmap_tl_t<Key, Mapped, Allocator>::type\n       hh_mmap_tl_t;\n \n       typedef\n-      typename detail::hash_lu_mmap_tl_t<\n-\tKey,\n-\tMapped,\n-\tAllocator>::type\n+      typename detail::hash_lu_mmap_tl_t<Key, Mapped, Allocator>::type\n       hl_mmap_tl_t;\n \n       typedef\n-      typename detail::tree_hash_mmap_tl_t<\n-\tKey,\n-\tMapped,\n-\tAllocator>::type\n+      typename detail::tree_hash_mmap_tl_t<Key, Mapped, Allocator>::type\n       th_mmap_tl_t;\n \n       typedef\n-      typename detail::tree_lu_mmap_tl_t<\n-\tKey,\n-\tMapped,\n-\tAllocator>::type\n+      typename detail::tree_lu_mmap_tl_t<Key, Mapped, Allocator>::type\n       tl_mmap_tl_t;\n \n     public:\n       typedef\n-      typename __gnu_cxx::typelist::append<\n-      hl_mmap_tl_t,\n-      typename __gnu_cxx::typelist::append<\n-      hh_mmap_tl_t,\n-      typename __gnu_cxx::typelist::append<\n-      th_mmap_tl_t,\n+      typename __gnu_cxx::typelist::append<hl_mmap_tl_t,\n+      typename __gnu_cxx::typelist::append<hh_mmap_tl_t,\n+      typename __gnu_cxx::typelist::append<th_mmap_tl_t,\n       tl_mmap_tl_t>::type>::type>::type\n       type;\n     };\n \n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_MULTIMAP_RANDOM_INT_INSERT_TEST_COMMON_TYPE_HPP\n+#endif\n "}, {"sha": "bffac262247a0774c5c79a01f4efe6962ecc36a0", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/find_test.hpp", "status": "modified", "additions": 33, "deletions": 76, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ffind_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ffind_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ffind_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -54,20 +54,16 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n       template<typename It, class Cntnr, bool LOR>\n       class find_find_functor\n       {\n       public:\n-        find_find_functor(Cntnr& r_container,  It fnd_it_b,  It fnd_it_e) : m_r_container(r_container),\n-\t\t\t\t\t\t\t\t\t    m_fnd_it_b(fnd_it_b),\n-\t\t\t\t\t\t\t\t\t    m_fnd_it_e(fnd_it_e)\n+        find_find_functor(Cntnr& contnr,  It fnd_it_b,  It fnd_it_e) \n+\t: m_contnr(contnr), m_fnd_it_b(fnd_it_b), m_fnd_it_e(fnd_it_e)\n \t{ }\n \n \tvoid\n@@ -76,123 +72,91 @@ namespace pb_ds\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n \t      It fnd_it = m_fnd_it_b;\n-\n \t      while (fnd_it != m_fnd_it_e)\n-                ++m_r_container.find((fnd_it++)->first)->second;\n+                ++m_contnr.find((fnd_it++)->first)->second;\n \t    }\n \t}\n \n       private:\n-\tCntnr& m_r_container;\n-\n+\tCntnr& m_contnr;\n \tconst It m_fnd_it_b;\n \tconst It m_fnd_it_e;\n       };\n \n       template<typename It, class Cntnr>\n-      class find_find_functor<\n-\tIt,\n-\tCntnr,\n-\ttrue>\n+      class find_find_functor<It, Cntnr, true>\n       {\n       public:\n-        find_find_functor(Cntnr& r_container,  It fnd_it_b,  It fnd_it_e) : m_r_container(r_container),\n-\t\t\t\t\t\t\t\t\t    m_fnd_it_b(fnd_it_b),\n-\t\t\t\t\t\t\t\t\t    m_fnd_it_e(fnd_it_e)\n+        find_find_functor(Cntnr& contnr,  It fnd_it_b,  It fnd_it_e) \n+\t: m_contnr(contnr), m_fnd_it_b(fnd_it_b), m_fnd_it_e(fnd_it_e)\n \t{ }\n \n \tvoid\n         operator()(std::size_t resolution)\n \t{\n \t  It fnd_it = m_fnd_it_b;\n-\n \t  while (fnd_it != m_fnd_it_e)\n \t    {\n \t      for (std::size_t i = 0; i < resolution; ++i)\n-                ++m_r_container.find(fnd_it->first)->second;\n-\n+                ++m_contnr.find(fnd_it->first)->second;\n \t      ++fnd_it;\n \t    }\n \t}\n \n       private:\n-\tCntnr& m_r_container;\n-\n+\tCntnr& m_contnr;\n \tconst It m_fnd_it_b;\n \tconst It m_fnd_it_e;\n       };\n-\n     } // namespace detail\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename It, bool LOR>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    find_test<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tIt,\t\\\n-\t\t\t\t\t\tLOR>\n-\n     template<typename It, bool LOR = false>\n     class find_test : private pb_ds::test::detail::timing_test_base\n     {\n     public:\n-      find_test(It ins_b, It fnd_it_b, size_t ins_vn, size_t ins_vs, size_t ins_vm, size_t fnd_vn, size_t fnd_vs, size_t fnd_vm);\n+      find_test(It ins_b, It fnd_it_b, size_t ins_vn, size_t ins_vs, \n+\t\tsize_t ins_vm, size_t fnd_vn, size_t fnd_vs, size_t fnd_vm):\n+      m_ins_b(ins_b), m_fnd_it_b(fnd_it_b), m_ins_vn(ins_vn), m_ins_vs(ins_vs),\n+      m_ins_vm(ins_vm), m_fnd_vn(fnd_vn), m_fnd_vs(fnd_vs), m_fnd_vm(fnd_vm)\n+      { }\n \n       template<typename Cntnr>\n       void\n-      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n+      operator()(Cntnr);\n \n     private:\n       find_test(const find_test& );\n \n     private:\n-      const It m_ins_b;\n-\n-      const It m_fnd_it_b;\n-\n-      const size_t m_ins_vn;\n-      const size_t m_ins_vs;\n-      const size_t m_ins_vm;\n-\n-      const size_t m_fnd_vn;\n-      const size_t m_fnd_vs;\n-      const size_t m_fnd_vm;\n+      const It \t\tm_ins_b;\n+      const It \t\tm_fnd_it_b;\n+      const size_t \tm_ins_vn;\n+      const size_t \tm_ins_vs;\n+      const size_t \tm_ins_vm;\n+      const size_t \tm_fnd_vn;\n+      const size_t \tm_fnd_vs;\n+      const size_t \tm_fnd_vm;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    find_test(It ins_b, It fnd_it_b, size_t ins_vn, size_t ins_vs, size_t ins_vm, size_t fnd_vn, size_t fnd_vs, size_t fnd_vm) :\n-      m_ins_b(ins_b),\n-      m_fnd_it_b(fnd_it_b),\n-      m_ins_vn(ins_vn),\n-      m_ins_vs(ins_vs),\n-      m_ins_vm(ins_vm),\n-      m_fnd_vn(fnd_vn),\n-      m_fnd_vs(fnd_vs),\n-      m_fnd_vm(fnd_vm)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n+    template<typename It, bool LOR>\n     template<typename Cntnr>\n     void\n-    PB_DS_CLASS_C_DEC::\n-    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+    find_test<It, LOR>::\n+    operator()(Cntnr)\n     {\n-      xml_result_set_performance_formatter res_set_fmt(\n-\t\t\t\t\t\t       string_form<Cntnr>::name(),\n-\t\t\t\t\t\t       string_form<Cntnr>::desc());\n+      typedef string_form<Cntnr> sform_type;\n+      typedef xml_result_set_performance_formatter formatter_type;\n+      formatter_type res_set_fmt(sform_type::name(), sform_type::desc());\n \n-      for (size_t size_i = 0; m_ins_vn + size_i*  m_ins_vs < m_ins_vm; ++size_i)\n+      for (size_t i = 0; m_ins_vn + i * m_ins_vs < m_ins_vm; ++i)\n \t{\n-\t  const size_t v = m_ins_vn + size_i*  m_ins_vs;\n-\t  const size_t fnd_size = m_fnd_vn + size_i*  m_fnd_vs;\n-\n+\t  const size_t v = m_ins_vn + i * m_ins_vs;\n+\t  const size_t fnd_size = m_fnd_vn + i * m_fnd_vs;\n \t  It ins_it_b = m_ins_b;\n \t  It ins_it_e = m_ins_b;\n \t  std::advance(ins_it_e, v);\n \n \t  Cntnr test_container(ins_it_b, ins_it_e);\n-\n \t  It fnd_it_b = m_fnd_it_b;\n \t  It fnd_it_e = m_fnd_it_b;\n \t  std::advance(fnd_it_e, fnd_size);\n@@ -202,18 +166,11 @@ namespace pb_ds\n \n \t  const double res =\n             pb_ds::test::detail::timing_test_base::operator()(fn);\n-\n \t  res_set_fmt.add_res(v, res / fnd_size);\n \t}\n     }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_FIND_TEST_HPP\n+#endif \n "}, {"sha": "c1ff8eb064a22b6707edbd1ab80769fb31a578b2", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/insert_test.hpp", "status": "modified", "additions": 19, "deletions": 48, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Finsert_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Finsert_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Finsert_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -55,19 +55,16 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n       template<typename It, class Cntnr>\n       class insert_insert_functor\n       {\n       public:\n-        insert_insert_functor(It ins_it_b,  It ins_it_e) : m_ins_it_b(ins_it_b),\n-\t\t\t\t\t\t\t   m_ins_it_e(ins_it_e)\n+        insert_insert_functor(It ins_it_b,  It ins_it_e) \n+\t: m_ins_it_b(ins_it_b), m_ins_it_e(ins_it_e)\n \t{ }\n \n \tvoid\n@@ -76,7 +73,6 @@ namespace pb_ds\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n \t      Cntnr cntnr;\n-\n \t      for (It ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n                 cntnr.insert((typename Cntnr::const_reference)(*ins_it));\n \t    }\n@@ -86,64 +82,46 @@ namespace pb_ds\n \tconst It m_ins_it_b;\n \tconst It m_ins_it_e;\n       };\n-\n     } // namespace detail\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename It>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    insert_test<\t\t\t\t\t\\\n-\t\t\t\t\t\tIt>\n-\n     template<typename It>\n     class insert_test : private pb_ds::test::detail::timing_test_base\n     {\n     public:\n-      insert_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm);\n+      insert_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm)\n+      :  m_ins_b(ins_b), m_ins_vn(ins_vn), m_ins_vs(ins_vs), m_ins_vm(ins_vm)\n+      { }\n \n       template<typename Cntnr>\n       void\n-      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n+      operator()(Cntnr);\n \n     private:\n       insert_test(const insert_test& );\n \n       template<typename Cntnr>\n       void\n-      insert(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e);\n+      insert(Cntnr, It ins_it_b, It ins_it_e);\n \n-    private:\n       const It m_ins_b;\n-\n       const size_t m_ins_vn;\n       const size_t m_ins_vs;\n       const size_t m_ins_vm;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    insert_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm) :\n-      m_ins_b(ins_b),\n-      m_ins_vn(ins_vn),\n-      m_ins_vs(ins_vs),\n-      m_ins_vm(ins_vm)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n+    template<typename It>\n     template<typename Cntnr>\n     void\n-    PB_DS_CLASS_C_DEC::\n-    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+    insert_test<It>::\n+    operator()(Cntnr)\n     {\n-      xml_result_set_performance_formatter res_set_fmt(\n-\t\t\t\t\t\t       string_form<Cntnr>::name(),\n-\t\t\t\t\t\t       string_form<Cntnr>::desc());\n+      typedef xml_result_set_performance_formatter formatter_type;\n+      formatter_type res_set_fmt(string_form<Cntnr>::name(),\n+\t\t\t\t string_form<Cntnr>::desc());\n \n-      for (size_t size_i = 0; m_ins_vn + size_i*  m_ins_vs < m_ins_vm; ++size_i)\n+      for (size_t i = 0; m_ins_vn + i*  m_ins_vs < m_ins_vm; ++i)\n \t{\n-\t  const size_t v = m_ins_vn + size_i*  m_ins_vs;\n-\n+\t  const size_t v = m_ins_vn + i*  m_ins_vs;\n \t  It ins_it_b = m_ins_b;\n \t  It ins_it_e = m_ins_b;\n \t  std::advance(ins_it_e, v);\n@@ -158,25 +136,18 @@ namespace pb_ds\n \t}\n     }\n \n-    PB_DS_CLASS_T_DEC\n+    template<typename It>\n     template<typename Cntnr>\n     void\n-    PB_DS_CLASS_C_DEC::\n-    insert(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e)\n+    insert_test<It>::\n+    insert(Cntnr, It ins_it_b, It ins_it_e)\n     {\n       Cntnr cntnr;\n-\n       for (It ins_it = ins_it_b; ins_it != ins_it_e; ++ins_it)\n         cntnr.insert((typename Cntnr::const_reference)(*ins_it));\n     }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_INSERT_TEST_HPP\n+#endif\n "}, {"sha": "5f64ebb7deb5fc819c83aa7bb7f5cd8804340b59", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/multimap_find_test.hpp", "status": "modified", "additions": 37, "deletions": 90, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_find_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_find_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_find_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -54,37 +54,31 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n       template<typename It, class Cntnr, bool Native>\n       class multimap_find_functor\n       {\n       public:\n-        multimap_find_functor(const Cntnr& r_container,  It fnd_it_b,  It fnd_it_e) : m_r_container(r_container),\n-\t\t\t\t\t\t\t\t\t\t      m_fnd_it_b(fnd_it_b),\n-\t\t\t\t\t\t\t\t\t\t      m_fnd_it_e(fnd_it_e)\n+        multimap_find_functor(const Cntnr& container, It fnd_it_b, It fnd_it_e)\n+\t: m_r_container(container), m_fnd_it_b(fnd_it_b), m_fnd_it_e(fnd_it_e)\n \t{ }\n \n \tvoid\n         operator()(std::size_t resolution)\n \t{\n \t  size_t not_found_count = 0;\n-\n+\t  typedef typename Cntnr::const_point_iterator iterator_type;\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n-\t      typename Cntnr::const_point_iterator prm_end_it = m_r_container.end();\n-\n+\t      iterator_type end = m_r_container.end();\n \t      for (It fnd_it = m_fnd_it_b; fnd_it != m_fnd_it_e; ++fnd_it)\n \t\t{\n-\t\t  typename Cntnr::const_point_iterator prm_it = m_r_container.find(fnd_it->first);\n-\n-\t\t  if (prm_it == prm_end_it ||\n-\t\t      prm_it->second.find(fnd_it->second) == prm_it->second.end())\n+\t\t  iterator_type it = m_r_container.find(fnd_it->first);\n+\t\t  if (it == end ||\n+\t\t      it->second.find(fnd_it->second) == it->second.end())\n                     ++not_found_count;\n \t\t}\n \t    }\n@@ -95,34 +89,29 @@ namespace pb_ds\n \n       private:\n \tconst Cntnr& m_r_container;\n-\n \tconst It m_fnd_it_b;\n \tconst It m_fnd_it_e;\n       };\n \n       template<typename It, class Cntnr>\n-      class multimap_find_functor<\n-\tIt,\n-\tCntnr,\n-\ttrue>\n+      class multimap_find_functor<It, Cntnr, true>\n       {\n       public:\n-        multimap_find_functor(const Cntnr& r_container,  It fnd_it_b,  It fnd_it_e) : m_r_container(r_container),\n-\t\t\t\t\t\t\t\t\t\t      m_fnd_it_b(fnd_it_b),\n-\t\t\t\t\t\t\t\t\t\t      m_fnd_it_e(fnd_it_e)\n+        multimap_find_functor(const Cntnr& container, It fnd_it_b, It fnd_it_e)\n+\t: m_r_container(container), m_fnd_it_b(fnd_it_b), m_fnd_it_e(fnd_it_e)\n \t{ }\n \n \tvoid\n         operator()(std::size_t resolution)\n \t{\n+\t  typedef typename Cntnr::const_reference const_reference;\n \t  size_t not_found_count = 0;\n-\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n \t      Cntnr cntnr;\n-\n \t      for (It fnd_it = m_fnd_it_b; fnd_it != m_fnd_it_e; ++fnd_it)\n-                if (m_r_container.find((typename Cntnr::const_reference)(*fnd_it)) == m_r_container.end())\n+                if (m_r_container.find(const_reference(*fnd_it)) \n+\t\t    == m_r_container.end())\n \t\t  ++not_found_count;\n \t    }\n \n@@ -132,80 +121,67 @@ namespace pb_ds\n \n       private:\n \tconst Cntnr& m_r_container;\n-\n \tconst It m_fnd_it_b;\n \tconst It m_fnd_it_e;\n       };\n-\n     } // namespace detail\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename It, bool Native>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    multimap_find_test<\t\t\t\t\t\\\n-\t\t\t\t\t\tIt,\t\\\n-\t\t\t\t\t\tNative>\n \n     template<typename It, bool Native>\n     class multimap_find_test : private pb_ds::test::detail::timing_test_base\n     {\n     public:\n-      multimap_find_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm);\n+      multimap_find_test(It ins_b, size_t ins_vn, size_t vs, size_t ins_vm)\n+      : m_ins_b(ins_b), m_ins_vn(ins_vn), m_ins_vs(vs), m_ins_vm(ins_vm)\n+      { }\n \n       template<typename Cntnr>\n       void\n-      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n+      operator()(Cntnr);\n \n     private:\n-      multimap_find_test(const multimap_find_test& );\n+      multimap_find_test(const multimap_find_test&);\n \n       template<typename Cntnr>\n       Cntnr\n-      init(It ins_b, It ins_e, __gnu_cxx::typelist::detail::type_to_type<Cntnr>, pb_ds::detail::true_type);\n+      init(It ins_b, It ins_e, Cntnr, pb_ds::detail::true_type)\n+      { return Cntnr(ins_b, ins_e); }\n \n       template<typename Cntnr>\n       Cntnr\n-      init(It ins_b, It ins_e, __gnu_cxx::typelist::detail::type_to_type<Cntnr>, pb_ds::detail::false_type);\n+      init(It ins_b, It ins_e, Cntnr, pb_ds::detail::false_type)\n+      {\n+\tCntnr ret;\n+\tfor (It it = ins_b; it != ins_e; ++it)\n+\t  ret[it->first].insert(it->second);\n+\treturn ret;\n+      }\n \n-    private:\n       const It m_ins_b;\n-\n       const size_t m_ins_vn;\n       const size_t m_ins_vs;\n       const size_t m_ins_vm;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    multimap_find_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm) :\n-      m_ins_b(ins_b),\n-      m_ins_vn(ins_vn),\n-      m_ins_vs(ins_vs),\n-      m_ins_vm(ins_vm)\n-    { }\n \n-    PB_DS_CLASS_T_DEC\n+    template<typename It, bool Native>\n     template<typename Cntnr>\n     void\n-    PB_DS_CLASS_C_DEC::\n-    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+    multimap_find_test<It, Native>::\n+    operator()(Cntnr)\n     {\n-      xml_result_set_performance_formatter res_set_fmt(\n-\t\t\t\t\t\t       string_form<Cntnr>::name(),\n-\t\t\t\t\t\t       string_form<Cntnr>::desc());\n+      typedef xml_result_set_performance_formatter formatter_type;\n+      formatter_type res_set_fmt(string_form<Cntnr>::name(),\n+\t\t\t\t string_form<Cntnr>::desc());\n \n-      for (size_t size_i = 0; m_ins_vn + size_i*  m_ins_vs < m_ins_vm; ++size_i)\n+      for (size_t i = 0; m_ins_vn + i * m_ins_vs < m_ins_vm; ++i)\n \t{\n-\t  const size_t v = m_ins_vn + size_i*  m_ins_vs;\n-\n+\t  const size_t v = m_ins_vn + i * m_ins_vs;\n \t  It ins_it_b = m_ins_b;\n \t  It ins_it_e = m_ins_b;\n \t  std::advance(ins_it_e, v);\n \n-\t  Cntnr c = init(ins_it_b,\n-\t\t\t ins_it_e,\n-\t\t\t __gnu_cxx::typelist::detail::type_to_type<Cntnr>(),\n+\t  Cntnr c = init(ins_it_b, ins_it_e, Cntnr(),\n \t\t\t pb_ds::detail::integral_constant<int,Native>());\n \n \t  pb_ds::test::detail::multimap_find_functor<It, Cntnr, Native>\n@@ -217,37 +193,8 @@ namespace pb_ds\n \t  res_set_fmt.add_res(v, res / v);\n \t}\n     }\n-\n-    PB_DS_CLASS_T_DEC\n-    template<typename Cntnr>\n-    Cntnr\n-    PB_DS_CLASS_C_DEC::\n-    init(It ins_b, It ins_e, __gnu_cxx::typelist::detail::type_to_type<Cntnr>, pb_ds::detail::true_type)\n-    {\n-      return Cntnr(ins_b, ins_e);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    template<typename Cntnr>\n-    Cntnr\n-    PB_DS_CLASS_C_DEC::\n-    init(It ins_b, It ins_e, __gnu_cxx::typelist::detail::type_to_type<Cntnr>, pb_ds::detail::false_type)\n-    {\n-      Cntnr ret;\n-\n-      for (It it = ins_b; it != ins_e; ++it)\n-        ret[it->first].insert(it->second);\n-\n-      return ret;\n-    }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_MULTIMAP_INSERT_TEST_HPP\n+#endif \n "}, {"sha": "e911f85948366eb0492a9dd08e69dd2bdefd3b4b", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/multimap_insert_test.hpp", "status": "modified", "additions": 19, "deletions": 52, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_insert_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_insert_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_insert_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -54,19 +54,16 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n       template<typename It, class Cntnr, bool Native>\n       class multimap_insert_functor\n       {\n       public:\n-        multimap_insert_functor(It ins_it_b,  It ins_it_e) : m_ins_it_b(ins_it_b),\n-\t\t\t\t\t\t\t     m_ins_it_e(ins_it_e)\n+        multimap_insert_functor(It ins_it_b, It ins_it_e) \n+\t: m_ins_it_b(ins_it_b), m_ins_it_e(ins_it_e)\n \t{ }\n \n \tvoid\n@@ -75,7 +72,6 @@ namespace pb_ds\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n \t      Cntnr cntnr;\n-\n \t      for (It ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n                 cntnr[ins_it->first].insert(ins_it->second);\n \t    }\n@@ -87,14 +83,11 @@ namespace pb_ds\n       };\n \n       template<typename It, class Cntnr>\n-      class multimap_insert_functor<\n-\tIt,\n-\tCntnr,\n-\ttrue>\n+      class multimap_insert_functor<It, Cntnr, true>\n       {\n       public:\n-        multimap_insert_functor(It ins_it_b,  It ins_it_e) : m_ins_it_b(ins_it_b),\n-\t\t\t\t\t\t\t     m_ins_it_e(ins_it_e)\n+        multimap_insert_functor(It ins_it_b,  It ins_it_e) \n+\t: m_ins_it_b(ins_it_b), m_ins_it_e(ins_it_e)\n \t{ }\n \n \tvoid\n@@ -103,7 +96,6 @@ namespace pb_ds\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n \t      Cntnr cntnr;\n-\n \t      for (It ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n                 cntnr.insert((typename Cntnr::const_reference)(*ins_it));\n \t    }\n@@ -113,61 +105,43 @@ namespace pb_ds\n \tconst It m_ins_it_b;\n \tconst It m_ins_it_e;\n       };\n-\n     } // namespace detail\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename It, bool Native>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    multimap_insert_test<\t\t\t\t\\\n-\t\t\t\t\t\tIt,\t\\\n-\t\t\t\t\t\tNative>\n-\n     template<typename It, bool Native>\n     class multimap_insert_test : private pb_ds::test::detail::timing_test_base\n     {\n     public:\n-      multimap_insert_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm);\n+      multimap_insert_test(It b, size_t ins_vn, size_t ins_vs, size_t ins_vm) \n+      : m_ins_b(b), m_ins_vn(ins_vn), m_ins_vs(ins_vs), m_ins_vm(ins_vm)\n+      { }\n \n       template<typename Cntnr>\n       void\n-      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n+      operator()(Cntnr);\n \n     private:\n-      multimap_insert_test(const multimap_insert_test& );\n+      multimap_insert_test(const multimap_insert_test&);\n \n     private:\n       const It m_ins_b;\n-\n       const size_t m_ins_vn;\n       const size_t m_ins_vs;\n       const size_t m_ins_vm;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    multimap_insert_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm) :\n-      m_ins_b(ins_b),\n-      m_ins_vn(ins_vn),\n-      m_ins_vs(ins_vs),\n-      m_ins_vm(ins_vm)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n+    template<typename It, bool Native>\n     template<typename Cntnr>\n     void\n-    PB_DS_CLASS_C_DEC::\n-    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+    multimap_insert_test<It, Native>::\n+    operator()(Cntnr)\n     {\n-      xml_result_set_performance_formatter res_set_fmt(\n-\t\t\t\t\t\t       string_form<Cntnr>::name(),\n-\t\t\t\t\t\t       string_form<Cntnr>::desc());\n+      typedef xml_result_set_performance_formatter formatter_type;\n+      formatter_type res_set_fmt(string_form<Cntnr>::name(),\n+\t\t\t\t string_form<Cntnr>::desc());\n \n-      for (size_t size_i = 0; m_ins_vn + size_i*  m_ins_vs < m_ins_vm; ++size_i)\n+      for (size_t i = 0; m_ins_vn + i * m_ins_vs < m_ins_vm; ++i)\n \t{\n-\t  const size_t v = m_ins_vn + size_i*  m_ins_vs;\n-\n+\t  const size_t v = m_ins_vn + i * m_ins_vs;\n \t  It ins_it_b = m_ins_b;\n \t  It ins_it_e = m_ins_b;\n \t  std::advance(ins_it_e, v);\n@@ -177,18 +151,11 @@ namespace pb_ds\n \n \t  const double res =\n             pb_ds::test::detail::timing_test_base::operator()(fn);\n-\n \t  res_set_fmt.add_res(v, res / v);\n \t}\n     }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_MULTIMAP_INSERT_TEST_HPP\n+#endif\n "}, {"sha": "6415cd8ece0457c64d6d38c5c44256abc1c14329", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/subscript_find_test.hpp", "status": "modified", "additions": 20, "deletions": 51, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fsubscript_find_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fsubscript_find_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fsubscript_find_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -53,20 +53,16 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n       template<typename It, class Cntnr>\n       class subscript_find_functor\n       {\n       public:\n-        subscript_find_functor(Cntnr& r_container,  It fnd_it_b,  It fnd_it_e) : m_r_container(r_container),\n-\t\t\t\t\t\t\t\t\t\t m_fnd_it_b(fnd_it_b),\n-\t\t\t\t\t\t\t\t\t\t m_fnd_it_e(fnd_it_e)\n+        subscript_find_functor(Cntnr& container,  It fnd_it_b,  It fnd_it_e) \n+\t: m_r_container(container), m_fnd_it_b(fnd_it_b), m_fnd_it_e(fnd_it_e)\n \t{ }\n \n \tvoid\n@@ -75,10 +71,8 @@ namespace pb_ds\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n \t      It fnd_it = m_fnd_it_b;\n-\n \t      while (fnd_it != m_fnd_it_e)\n                 ++m_r_container[(fnd_it++)->first];\n-\n \t      ++fnd_it;\n \t    }\n \t}\n@@ -91,67 +85,48 @@ namespace pb_ds\n \n     } // namespace detail\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename It>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    subscript_find_test<\t\t\t\t\\\n-\t\t\t\t\t\tIt>\n-\n     template<typename It>\n     class subscript_find_test : private pb_ds::test::detail::timing_test_base\n     {\n     public:\n-      subscript_find_test(It ins_b, It fnd_b, size_t ins_vn, size_t ins_vs, size_t ins_vm, size_t fnd_vn, size_t fnd_vs, size_t fnd_vm);\n+      subscript_find_test(It ins_b, It b, size_t ins_vn, size_t ins_vs, \n+\t\t\t  size_t ins_vm, size_t vn, size_t vs, size_t vm)\n+      : m_ins_b(ins_b), m_fnd_b(b), m_ins_vn(ins_vn), m_ins_vs(ins_vs),\n+\tm_ins_vm(ins_vm), m_fnd_vn(vn), m_fnd_vs(vs), m_fnd_vm(vm)\n+      { }\n \n       template<typename Cntnr>\n       void\n-      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n+      operator()(Cntnr);\n \n     private:\n-      subscript_find_test(const subscript_find_test& );\n+      subscript_find_test(const subscript_find_test&);\n \n     private:\n       const It m_ins_b;\n-\n       const It m_fnd_b;\n-\n       const size_t m_ins_vn;\n       const size_t m_ins_vs;\n       const size_t m_ins_vm;\n-\n       const size_t m_fnd_vn;\n       const size_t m_fnd_vs;\n       const size_t m_fnd_vm;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    subscript_find_test(It ins_b, It fnd_b, size_t ins_vn, size_t ins_vs, size_t ins_vm, size_t fnd_vn, size_t fnd_vs, size_t fnd_vm) :\n-      m_ins_b(ins_b),\n-      m_fnd_b(fnd_b),\n-      m_ins_vn(ins_vn),\n-      m_ins_vs(ins_vs),\n-      m_ins_vm(ins_vm),\n-      m_fnd_vn(fnd_vn),\n-      m_fnd_vs(fnd_vs),\n-      m_fnd_vm(fnd_vm)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    template<typename Cntnr>\n+   template<typename It>\n+   template<typename Cntnr>\n     void\n-    PB_DS_CLASS_C_DEC::\n-    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+    subscript_find_test<It>::\n+    operator()(Cntnr)\n     {\n-      xml_result_set_performance_formatter res_set_fmt(\n-\t\t\t\t\t\t       string_form<Cntnr>::name(),\n-\t\t\t\t\t\t       string_form<Cntnr>::desc());\n+      typedef xml_result_set_performance_formatter formatter_type;\n+      formatter_type res_set_fmt(string_form<Cntnr>::name(),\n+\t\t\t\t string_form<Cntnr>::desc());\n \n-      for (size_t size_i = 0; m_ins_vn + size_i*  m_ins_vs < m_ins_vm; ++size_i)\n+      for (size_t i = 0; m_ins_vn + i*  m_ins_vs < m_ins_vm; ++i)\n \t{\n-\t  const size_t v = m_ins_vn + size_i*  m_ins_vs;\n-\t  const size_t fnd_size = m_fnd_vn + size_i*  m_fnd_vs;\n+\t  const size_t v = m_ins_vn + i*  m_ins_vs;\n+\t  const size_t fnd_size = m_fnd_vn + i*  m_fnd_vs;\n \n \t  It ins_it_b = m_ins_b;\n \t  It ins_it_e = m_ins_b;\n@@ -172,14 +147,8 @@ namespace pb_ds\n \t  res_set_fmt.add_res(v, res / fnd_size);\n \t}\n     }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_SUBSCRIPT_TEST_HPP\n+#endif \n "}, {"sha": "1e067c0e9de3650f26611828e8cef8e9a163716c", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/subscript_insert_test.hpp", "status": "modified", "additions": 17, "deletions": 48, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fsubscript_insert_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fsubscript_insert_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fsubscript_insert_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -55,19 +55,16 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n       template<typename It, class Cntnr>\n       class subscript_insert_functor\n       {\n       public:\n-        subscript_insert_functor(It ins_it_b,  It ins_it_e) : m_ins_it_b(ins_it_b),\n-\t\t\t\t\t\t\t      m_ins_it_e(ins_it_e)\n+        subscript_insert_functor(It ins_it_b,  It ins_it_e) \n+\t: m_ins_it_b(ins_it_b), m_ins_it_e(ins_it_e)\n \t{ }\n \n \tvoid\n@@ -76,7 +73,6 @@ namespace pb_ds\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n \t      Cntnr cntnr;\n-\n \t      for (It ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n                 ++cntnr[ins_it->first];\n \t    }\n@@ -89,71 +85,50 @@ namespace pb_ds\n \n     } // namespace detail\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename It>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    subscript_insert_test<\t\t\t\t\\\n-\t\t\t\t\t\tIt>\n-\n     template<typename It>\n     class subscript_insert_test : private pb_ds::test::detail::timing_test_base\n     {\n     public:\n-      subscript_insert_test(It ins_b, It fnd_b, size_t ins_vn, size_t ins_vs, size_t ins_vm, size_t fnd_vn, size_t fnd_vs, size_t fnd_vm);\n+      subscript_insert_test(It ins_b, It b, size_t ins_vn, size_t ins_vs, \n+\t\t\t    size_t ins_vm, size_t vn, size_t vs, size_t vm)\n+      : m_ins_b(ins_b), m_fnd_b(b), m_ins_vn(ins_vn), m_ins_vs(ins_vs), \n+\tm_ins_vm(ins_vm), m_fnd_vn(vn), m_fnd_vs(vs), m_fnd_vm(vm)\n+      { }\n \n       template<typename Cntnr>\n       void\n-      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n+      operator()(Cntnr);\n \n     private:\n       subscript_insert_test(const subscript_insert_test& );\n \n     private:\n       const It m_ins_b;\n-\n       const It m_fnd_b;\n-\n       const size_t m_ins_vn;\n       const size_t m_ins_vs;\n       const size_t m_ins_vm;\n-\n       const size_t m_fnd_vn;\n       const size_t m_fnd_vs;\n       const size_t m_fnd_vm;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    subscript_insert_test(It ins_b, It fnd_b, size_t ins_vn, size_t ins_vs, size_t ins_vm, size_t fnd_vn, size_t fnd_vs, size_t fnd_vm) :\n-      m_ins_b(ins_b),\n-      m_fnd_b(fnd_b),\n-      m_ins_vn(ins_vn),\n-      m_ins_vs(ins_vs),\n-      m_ins_vm(ins_vm),\n-      m_fnd_vn(fnd_vn),\n-      m_fnd_vs(fnd_vs),\n-      m_fnd_vm(fnd_vm)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n+    template<typename It>\n     template<typename Cntnr>\n     void\n-    PB_DS_CLASS_C_DEC::\n-    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+    subscript_insert_test<It>::\n+    operator()(Cntnr)\n     {\n-      xml_result_set_performance_formatter res_set_fmt(\n-\t\t\t\t\t\t       string_form<Cntnr>::name(),\n-\t\t\t\t\t\t       string_form<Cntnr>::desc());\n+      typedef xml_result_set_performance_formatter formatter_type;\n+      formatter_type res_set_fmt(string_form<Cntnr>::name(),\n+\t\t\t\t string_form<Cntnr>::desc());\n \n-      for (size_t size_i = 0; m_ins_vn + size_i*  m_ins_vs < m_ins_vm; ++size_i)\n+      for (size_t i = 0; m_ins_vn + i * m_ins_vs < m_ins_vm; ++i)\n \t{\n-\t  const size_t v = m_ins_vn + size_i*  m_ins_vs;\n-\n+\t  const size_t v = m_ins_vn + i * m_ins_vs;\n \t  It ins_it_b = m_ins_b;\n \t  It ins_it_e = m_ins_b;\n \t  std::advance(ins_it_e, v);\n-\n \t  pb_ds::test::detail::subscript_insert_functor<It, Cntnr>\n             fn(ins_it_b, ins_it_e);\n \n@@ -163,14 +138,8 @@ namespace pb_ds\n \t  res_set_fmt.add_res(v, res / v);\n \t}\n     }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_SUBSCRIPT_TEST_HPP\n+#endif \n "}, {"sha": "7e5e3d794744b0a8f06f2888c87cafee082d64ad", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/tree_order_statistics_test.hpp", "status": "modified", "additions": 25, "deletions": 62, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ftree_order_statistics_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ftree_order_statistics_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ftree_order_statistics_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -54,24 +54,19 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n-#define PB_DS_STATIC_ASSERT(UNIQUE, E)\t\t\t\t\t\\\n-      typedef\t\t\t\t\t\t\t\t\\\n-      pb_ds::detail::static_assert_dumclass<\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\tsizeof(pb_ds::detail::static_assert<(bool)(E)>)> \\\n-      UNIQUE##static_assert_type\n+#define PB_DS_STATIC_ASSERT(UNIQUE, E) \\\n+      typedef \\\n+      pb_ds::detail::static_assert_dumclass<sizeof(pb_ds::detail::static_assert<(bool)(E)>)> UNIQUE##static_assert_type\n \n       template<typename Cntnr, bool Native>\n       class order_statistics_functor\n       {\n       public:\n-        order_statistics_functor(Cntnr& r_container) : m_r_container(r_container)\n+        order_statistics_functor(Cntnr& container) : m_r_container(container)\n \t{ }\n \n \tvoid\n@@ -80,20 +75,16 @@ namespace pb_ds\n \t  enum\n \t    {\n \t      support_detected =\n-\t      pb_ds::test::detail::tree_supports_order_statistics<\n-\t      Cntnr>::value\n+\t      pb_ds::test::detail::tree_supports_order_statistics<Cntnr>::value\n \t    };\n \n \t  PB_DS_STATIC_ASSERT(correct_type, support_detected);\n \n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n \t      typename Cntnr::const_iterator it = m_r_container.begin();\n-\n \t      typename Cntnr::const_iterator e = m_r_container.end();\n-\n \t      const size_t max_size = m_r_container.size();\n-\n \t      while (it != e)\n \t\tif (m_r_container.order_of_key(*(it++)) > max_size)\n \t\t  abort();\n@@ -105,31 +96,25 @@ namespace pb_ds\n       };\n \n       template<typename Cntnr>\n-      class order_statistics_functor<\n-\tCntnr,\n-\tfalse>\n+      class order_statistics_functor<Cntnr, false>\n       {\n       public:\n-        order_statistics_functor(Cntnr& r_container) : m_r_container(r_container)\n+        order_statistics_functor(Cntnr& container) : m_r_container(container)\n \t{ }\n \n \tvoid\n         operator()(std::size_t resolution)\n \t{\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n-\t      typename Cntnr::const_iterator b = m_r_container.begin();\n-\n-\t      typename Cntnr::const_iterator e = m_r_container.end();\n-\n-\t      typename Cntnr::const_iterator it = b;\n-\n+\t      typedef typename Cntnr::const_iterator const_iterator;\n+\t      const_iterator b = m_r_container.begin();\n+\t      const_iterator e = m_r_container.end();\n+\t      const_iterator it = b;\n \t      const size_t max_size = m_r_container.size();\n-\n \t      while (it != e)\n \t\t{\n-\t\t  typename Cntnr::const_iterator f_it = m_r_container.find(*(it++));\n-\n+\t\t  const_iterator f_it = m_r_container.find(*(it++));\n \t\t  if (static_cast<size_t>(std::distance(b, f_it)) > max_size)\n \t\t    abort();\n \t\t}\n@@ -139,25 +124,20 @@ namespace pb_ds\n       private:\n \tCntnr& m_r_container;\n       };\n-\n     } // namespace detail\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<bool Support_Order_Statistics>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    tree_order_statistics_test<\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\tSupport_Order_Statistics>\n-\n     template<bool Support_Order_Statistics>\n-    class tree_order_statistics_test : private pb_ds::test::detail::timing_test_base\n+    class tree_order_statistics_test \n+    : private pb_ds::test::detail::timing_test_base\n     {\n     public:\n-      tree_order_statistics_test(size_t vn, size_t vs, size_t vm);\n+      tree_order_statistics_test(size_t vn, size_t vs, size_t vm)\n+      : m_vn(vn), m_vs(vs), m_vm(vm)\n+      { }\n \n       template<typename Cntnr>\n       void\n-      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n+      operator()(Cntnr);\n \n     private:\n       tree_order_statistics_test(const tree_order_statistics_test& );\n@@ -176,28 +156,19 @@ namespace pb_ds\n       const size_t m_vm;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    tree_order_statistics_test(size_t vn, size_t vs, size_t vm) :\n-      m_vn(vn),\n-      m_vs(vs),\n-      m_vm(vm)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n+    template<bool Support_Order_Statistics>\n     template<typename Cntnr>\n     void\n-    PB_DS_CLASS_C_DEC::\n-    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+    tree_order_statistics_test<Support_Order_Statistics>::\n+    operator()(Cntnr)\n     {\n-      xml_result_set_performance_formatter res_set_fmt(\n-\t\t\t\t\t\t       string_form<Cntnr>::name(),\n-\t\t\t\t\t\t       string_form<Cntnr>::desc());\n+      typedef xml_result_set_performance_formatter formatter_type;\n+      formatter_type res_set_fmt(string_form<Cntnr>::name(), \n+\t\t\t\t string_form<Cntnr>::desc());\n \n       for (size_t v = m_vn; v < m_vm; v += m_vs)\n \t{\n \t  Cntnr cntnr;\n-\n \t  for (size_t ins = 0; ins < v; ++ ins)\n             cntnr.insert((typename Cntnr::value_type)ins);\n \n@@ -210,16 +181,8 @@ namespace pb_ds\n \t  res_set_fmt.add_res(v, res / v);\n \t}\n     }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n-#undef PB_DS_STATIC_ASSERT\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_TREE_ORDER_STATISTICS_TEST_HPP\n+#endif \n "}, {"sha": "6c906522e371b91723f6d6f74bea3573ea0c38fb", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/tree_split_join_test.hpp", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ftree_split_join_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ftree_split_join_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Ftree_split_join_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -54,13 +54,10 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n       template<typename Cntnr, bool Support_Split_Join>\n       class split_join_functor\n       {\n@@ -75,11 +72,8 @@ namespace pb_ds\n \t    {\n \t      typename Cntnr::const_iterator mid_it = m_r_container.begin();\n \t      std::advance(mid_it, m_r_container.size() / 2);\n-\n \t      Cntnr other;\n-\n \t      m_r_container.split(*mid_it, other);\n-\n \t      m_r_container.join(other);\n \t    }\n \t}\n@@ -89,9 +83,7 @@ namespace pb_ds\n       };\n \n       template<typename Cntnr>\n-      class split_join_functor<\n-\tCntnr,\n-\tfalse>\n+      class split_join_functor<Cntnr, false>\n       {\n       public:\n         split_join_functor(Cntnr& r_container) : m_r_container(r_container)\n@@ -116,16 +108,8 @@ namespace pb_ds\n       private:\n \tCntnr& m_r_container;\n       };\n-\n     } // namespace detail\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<bool Support_Split_Join>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    tree_split_join_test<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tSupport_Split_Join>\n-\n     template<bool Support_Split_Join>\n     class tree_split_join_test : private pb_ds::test::detail::timing_test_base\n     {\n@@ -134,7 +118,7 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n+      operator()(Cntnr);\n \n     private:\n       tree_split_join_test(const tree_split_join_test& );\n@@ -145,28 +129,27 @@ namespace pb_ds\n       const size_t m_vm;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n+    template<bool Support_Split_Join>\n+    tree_split_join_test<Support_Split_Join>::\n     tree_split_join_test(size_t vn, size_t vs, size_t vm) :\n       m_vn(vn),\n       m_vs(vs),\n       m_vm(vm)\n     { }\n \n-    PB_DS_CLASS_T_DEC\n+    template<bool Support_Split_Join>\n     template<typename Cntnr>\n     void\n-    PB_DS_CLASS_C_DEC::\n-    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+    tree_split_join_test<Support_Split_Join>::\n+    operator()(Cntnr)\n     {\n-      xml_result_set_performance_formatter res_set_fmt(\n-\t\t\t\t\t\t       string_form<Cntnr>::name(),\n-\t\t\t\t\t\t       string_form<Cntnr>::desc());\n+      typedef xml_result_set_performance_formatter formatter_type;\n+      formatter_type res_set_fmt(string_form<Cntnr>::name(),\n+\t\t\t\t string_form<Cntnr>::desc());\n \n       for (size_t v = m_vn; v < m_vm; v += m_vs)\n \t{\n \t  Cntnr cntnr;\n-\n \t  for (size_t ins = 0; ins < v; ++ ins)\n             cntnr.insert((typename Cntnr::value_type)ins);\n \n@@ -175,18 +158,11 @@ namespace pb_ds\n \n \t  const double res =\n             pb_ds::test::detail::timing_test_base::operator()(fn);\n-\n \t  res_set_fmt.add_res(v, res);\n \t}\n     }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_TREE_SPLIT_JOIN_TEST_HPP\n+#endif \n "}, {"sha": "d6d6464d7742bb65b35206a5782365880836c947", "filename": "libstdc++-v3/testsuite/util/performance/priority_queue/mem_usage/pop_test.hpp", "status": "modified", "additions": 13, "deletions": 43, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Fmem_usage%2Fpop_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Fmem_usage%2Fpop_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Fmem_usage%2Fpop_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -55,93 +55,63 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename It>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    pop_test<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tIt>\n-\n     template<typename It>\n     class pop_test\n     {\n     public:\n-      pop_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm);\n+      pop_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm)\n+      : m_ins_b(ins_b), m_ins_vn(ins_vn), m_ins_vs(ins_vs), m_ins_vm(ins_vm)\n+      { }\n \n       template<typename Cntnr>\n       void\n-      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n+      operator()(Cntnr);\n \n     private:\n-      pop_test(const pop_test& );\n+      pop_test(const pop_test&);\n \n-    private:\n       const It m_ins_b;\n-\n       const size_t m_ins_vn;\n       const size_t m_ins_vs;\n       const size_t m_ins_vm;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    pop_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm) :\n-      m_ins_b(ins_b),\n-      m_ins_vn(ins_vn),\n-      m_ins_vs(ins_vs),\n-      m_ins_vm(ins_vm)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n+    template<typename It>\n     template<typename Cntnr>\n     void\n-    PB_DS_CLASS_C_DEC::\n-    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+    pop_test<It>::\n+    operator()(Cntnr)\n     {\n-      xml_result_set_performance_formatter res_set_fmt(\n-\t\t\t\t\t\t       string_form<Cntnr>::name(),\n-\t\t\t\t\t\t       string_form<Cntnr>::desc());\n+      typedef xml_result_set_performance_formatter formatter_type;\n+     formatter_type res_set_fmt(string_form<Cntnr>::name(),\n+\t\t\t\tstring_form<Cntnr>::desc());\n \n-      for (size_t size_i = 0; m_ins_vn + size_i*  m_ins_vs < m_ins_vm; ++size_i)\n+      for (size_t i = 0; m_ins_vn + i * m_ins_vs < m_ins_vm; ++i)\n \t{\n-\t  const size_t ins_size = m_ins_vn + size_i*  m_ins_vs;\n-\n+\t  const size_t ins_size = m_ins_vn + i * m_ins_vs;\n \t  It ins_it_b = m_ins_b;\n \t  It ins_it_e = m_ins_b;\n \t  std::advance(ins_it_e, ins_size);\n \n \t  mem_track_allocator<char> alloc;\n \n \t  const size_t init_mem = alloc.get_total();\n-\n \t  Cntnr cntnr;\n-\n \t  for (It ins_it =    ins_it_b; ins_it != ins_it_e; ++ins_it)\n             cntnr.push(ins_it->first);\n \n \t  while (cntnr.size() > 1)\n             cntnr.pop();\n \n \t  const size_t final_mem = alloc.get_total();\n-\n \t  assert(final_mem > init_mem);\n-\n \t  const size_t delta_mem = final_mem - init_mem;\n-\n \t  res_set_fmt.add_res(ins_size, static_cast<double>(delta_mem));\n \t}\n     }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n #endif // #ifndef PB_DS_POP_TEST_HPP"}, {"sha": "2e3dde281c85a355972b0c604e217524e5f92b30", "filename": "libstdc++-v3/testsuite/util/performance/priority_queue/timing/join_test.hpp", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fjoin_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fjoin_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fjoin_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -116,25 +116,21 @@ namespace pb_ds\n     template<typename It>\n     class join_test : private pb_ds::test::detail::timing_test_base\n     {\n-      const It \t\tm_ins_b;\n-      const size_t \tm_ins_vn;\n-      const size_t \tm_ins_vs;\n-      const size_t \tm_ins_vm;\n-\n     public:\n       join_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm)\n-\t: m_ins_b(ins_b), m_ins_vn(ins_vn), m_ins_vs(ins_vs), m_ins_vm(ins_vm)\n+      : m_ins_b(ins_b), m_ins_vn(ins_vn), m_ins_vs(ins_vs), m_ins_vm(ins_vm)\n       { }\n \n       template<typename Cntnr>\n       void\n-      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+      operator()(Cntnr)\n       {\n \tusing pb_ds::test::detail::double_push_functor;\n \tusing pb_ds::test::detail::double_push_join_functor;\n \ttypedef pb_ds::test::detail::timing_test_base base_type;\n-\ttypedef xml_result_set_performance_formatter result_type;\n-\tresult_type res(string_form<Cntnr>::name(), string_form<Cntnr>::desc());\n+\ttypedef xml_result_set_performance_formatter formatter_type;\n+\tformatter_type res(string_form<Cntnr>::name(), \n+\t\t\t   string_form<Cntnr>::desc());\n \t  \n \tfor (size_t n = 0; m_ins_vn + n*  m_ins_vs < m_ins_vm; ++n)\n \t  {\n@@ -148,8 +144,7 @@ namespace pb_ds\n \t    double_push_join_functor<It, Cntnr> double_push_join_fn(b, e);\n \t    const double double_push_join_res = base_type::operator()(double_push_join_fn);\n \t      \n-\t    const double effective_delta = std::max(double_push_join_res - double_push_res,\n-\t\t\t\t\t\t    base_type::min_time_res());\n+\t    const double effective_delta = std::max(double_push_join_res - double_push_res, base_type::min_time_res());\n \t    res.add_res(v, effective_delta / v);\n \t  }\n       }\n@@ -159,16 +154,21 @@ namespace pb_ds\n \n       template<typename Cntnr>\n       void\n-      join(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It b, It e)\n+      join(Cntnr, It b, It e)\n       {\n \tCntnr cntnr;\n \ttypedef typename Cntnr::const_reference const_reference;\n \tfor (It it = b; it != e; ++it)\n \t  cntnr.join(const_reference(*it));\n       }\n+\n+      const It \t\tm_ins_b;\n+      const size_t \tm_ins_vn;\n+      const size_t \tm_ins_vs;\n+      const size_t \tm_ins_vm;\n     };\n   } // namespace test\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_JOIN_TEST_HPP\n+#endif \n "}, {"sha": "4e76bb5d8947bfa6c4cd9825c806d48058ee876c", "filename": "libstdc++-v3/testsuite/util/performance/priority_queue/timing/modify_test.hpp", "status": "modified", "additions": 89, "deletions": 138, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fmodify_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fmodify_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fmodify_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -55,34 +55,30 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n       template<typename It, class Cntnr, class Tag>\n       class push_functor\n       {\n       public:\n-        push_functor(It ins_it_b,  It ins_it_e) : m_ins_it_b(ins_it_b),\n-\t\t\t\t\t\t  m_ins_it_e(ins_it_e)\n+        push_functor(It ins_it_b,  It ins_it_e) \n+\t: m_ins_it_b(ins_it_b), m_ins_it_e(ins_it_e)\n \t{ }\n \n \tvoid\n         operator()(std::size_t resolution)\n \t{\n+\t  typedef typename Cntnr::point_iterator point_iterator;\n+\t  typedef typename Cntnr::const_reference const_reference;\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n \t      Cntnr c;\n-\n-\t      typedef std::vector< typename Cntnr::point_iterator> it_vec_t;\n-\n+\t      typedef std::vector<point_iterator> it_vec_t;\n \t      it_vec_t m_a_its;\n-\n \t      for (It ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n-                m_a_its.push_back(c.push((typename Cntnr::const_reference)(ins_it->first)));\n+                m_a_its.push_back(c.push(const_reference(ins_it->first)));\n \t    }\n \t}\n \n@@ -94,10 +90,14 @@ namespace pb_ds\n       template<typename It, class Cntnr, class Tag>\n       class push_modify_functor\n       {\n+      private:\n+\ttypedef typename Cntnr::point_iterator point_iterator;\n+\ttypedef typename Cntnr::const_reference const_reference;\n+\ttypedef typename Cntnr::value_type value_type;\n+\n       public:\n-        push_modify_functor(It ins_it_b,  It ins_it_e,  typename Cntnr::value_type mod_val) : m_ins_it_b(ins_it_b),\n-\t\t\t\t\t\t\t\t\t\t\t      m_ins_it_e(ins_it_e),\n-\t\t\t\t\t\t\t\t\t\t\t      m_mod_val(mod_val)\n+        push_modify_functor(It ins_it_b, It ins_it_e, value_type mod_val) \n+\t: m_ins_it_b(ins_it_b), m_ins_it_e(ins_it_e), m_mod_val(mod_val)\n \t{ }\n \n \tvoid\n@@ -106,16 +106,12 @@ namespace pb_ds\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n \t      Cntnr c;\n-\n-\t      typedef std::vector< typename Cntnr::point_iterator> it_vec_t;\n-\n+\t      typedef std::vector<typename Cntnr::point_iterator> it_vec_t;\n \t      it_vec_t m_a_its;\n-\n \t      for (It ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n-                m_a_its.push_back(c.push((typename Cntnr::const_reference)(ins_it->first)));\n+                m_a_its.push_back(c.push(const_reference(ins_it->first)));\n \n \t      typename it_vec_t::iterator mod_it = m_a_its.begin();\n-\n \t      while (mod_it != m_a_its.end())\n                 c.modify(*mod_it++, m_mod_val);\n \t    }\n@@ -124,30 +120,26 @@ namespace pb_ds\n       private:\n \tconst It m_ins_it_b;\n \tconst It m_ins_it_e;\n-\n-\tconst typename Cntnr::value_type m_mod_val;\n+\tconst value_type m_mod_val;\n       };\n \n       template<typename It, class Cntnr>\n-      class push_functor<\n-\tIt,\n-\tCntnr,\n-\tpb_ds::binary_heap_tag>\n+      class push_functor<It, Cntnr, pb_ds::binary_heap_tag>\n       {\n       public:\n-        push_functor(It ins_it_b,  It ins_it_e) : m_ins_it_b(ins_it_b),\n-\t\t\t\t\t\t  m_ins_it_e(ins_it_e)\n+        push_functor(It ins_it_b,  It ins_it_e) \n+\t: m_ins_it_b(ins_it_b), m_ins_it_e(ins_it_e)\n \t{ }\n \n \tvoid\n         operator()(std::size_t resolution)\n \t{\n+\t  typedef typename Cntnr::const_reference const_reference;\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n \t      Cntnr c;\n-\n \t      for (It ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n-                c.push((typename Cntnr::const_reference)(ins_it->first));\n+                c.push(const_reference(ins_it->first));\n \t    }\n \t}\n \n@@ -157,15 +149,16 @@ namespace pb_ds\n       };\n \n       template<typename It, class Cntnr>\n-      class push_modify_functor<\n-\tIt,\n-\tCntnr,\n-\tpb_ds::binary_heap_tag>\n+      class push_modify_functor<It, Cntnr, pb_ds::binary_heap_tag>\n       {\n+      private:\n+\ttypedef typename Cntnr::iterator iterator;\n+\ttypedef typename Cntnr::const_reference const_reference;\n+\ttypedef typename Cntnr::value_type value_type;\n+\n       public:\n-        push_modify_functor(It ins_it_b,  It ins_it_e,  typename Cntnr::value_type mod_val) : m_ins_it_b(ins_it_b),\n-\t\t\t\t\t\t\t\t\t\t\t      m_ins_it_e(ins_it_e),\n-\t\t\t\t\t\t\t\t\t\t\t      m_mod_val(mod_val)\n+        push_modify_functor(It ins_it_b, It ins_it_e, value_type mod_val) \n+\t: m_ins_it_b(ins_it_b), m_ins_it_e(ins_it_e), m_mod_val(mod_val)\n \t{ }\n \n \tvoid\n@@ -174,21 +167,17 @@ namespace pb_ds\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n \t      Cntnr c;\n-\n \t      It ins_it;\n-\n \t      for (ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n-                c.push((typename Cntnr::const_reference)(ins_it->first));\n+                c.push(const_reference(ins_it->first));\n \n \t      for (ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n \t\t{\n \t\t  bool modified = false;\n-\n-\t\t  for (typename Cntnr::iterator it = c.begin(); !modified&&  it != c.end(); ++it)\n+\t\t  for (iterator it = c.begin(); !modified && it != c.end(); ++it)\n                     if (*it == ins_it->first)\n \t\t      {\n                         c.modify(it, m_mod_val);\n-\n                         modified = true;\n \t\t      }\n \t\t}\n@@ -198,30 +187,27 @@ namespace pb_ds\n       private:\n \tconst It m_ins_it_b;\n \tconst It m_ins_it_e;\n-\n-\tconst typename Cntnr::value_type m_mod_val;\n+\tconst value_type m_mod_val;\n       };\n \n       template<typename It, class Cntnr>\n-      class push_functor<\n-\tIt,\n-\tCntnr,\n-\tpb_ds::test::native_pq_tag>\n+      class push_functor<It, Cntnr, pb_ds::test::native_pq_tag>\n       {\n       public:\n-        push_functor(It ins_it_b,  It ins_it_e) : m_ins_it_b(ins_it_b),\n-\t\t\t\t\t\t  m_ins_it_e(ins_it_e)\n+        push_functor(It ins_it_b,  It ins_it_e) \n+\t: m_ins_it_b(ins_it_b), m_ins_it_e(ins_it_e)\n \t{ }\n \n \tvoid\n         operator()(std::size_t resolution)\n \t{\n+\t  typedef typename Cntnr::const_reference const_reference;\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n \t      Cntnr c;\n \n \t      for (It ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n-                c.push((typename Cntnr::const_reference)(ins_it->first));\n+                c.push(const_reference(ins_it->first));\n \t    }\n \t}\n \n@@ -231,15 +217,15 @@ namespace pb_ds\n       };\n \n       template<typename It, class Cntnr>\n-      class push_modify_functor<\n-\tIt,\n-\tCntnr,\n-\tpb_ds::test::native_pq_tag>\n+      class push_modify_functor<It, Cntnr, pb_ds::test::native_pq_tag>\n       {\n+      private:\n+\ttypedef typename Cntnr::value_type value_type;\n+\ttypedef typename Cntnr::const_reference const_reference;\n+\n       public:\n-        push_modify_functor(It ins_it_b,  It ins_it_e,  typename Cntnr::value_type mod_val) : m_ins_it_b(ins_it_b),\n-\t\t\t\t\t\t\t\t\t\t\t      m_ins_it_e(ins_it_e),\n-\t\t\t\t\t\t\t\t\t\t\t      m_mod_val(mod_val)\n+        push_modify_functor(It ins_it_b,  It ins_it_e, value_type mod_val) \n+\t: m_ins_it_b(ins_it_b), m_ins_it_e(ins_it_e), m_mod_val(mod_val)\n \t{ }\n \n \tvoid\n@@ -248,12 +234,9 @@ namespace pb_ds\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n \t      Cntnr c;\n-\n \t      It ins_it;\n-\n \t      for (ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n-                c.push((typename Cntnr::const_reference)(ins_it->first));\n-\n+                c.push(const_reference(ins_it->first));\n \t      for (ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n                 c.modify(ins_it->first, m_mod_val);\n \t    }\n@@ -262,126 +245,94 @@ namespace pb_ds\n       private:\n \tconst It m_ins_it_b;\n \tconst It m_ins_it_e;\n-\n-\tconst typename Cntnr::value_type m_mod_val;\n+\tconst value_type m_mod_val;\n       };\n-\n     } // namespace detail\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename It>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    modify_test<\t\t\t\t\t\\\n-\t\t\t\t\t\tIt>\n-\n     template<typename It>\n     class modify_test : private pb_ds::test::detail::timing_test_base\n     {\n     public:\n-      modify_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm, bool m_modify_up);\n+      modify_test(It b, size_t vn, size_t vs, size_t vm, bool modify_up)\n+      : m_ins_b(b), m_ins_vn(vn), m_ins_vs(vs), m_ins_vm(vm),\n+      m_modify_up(modify_up)\n+      { }\n \n       template<typename Cntnr>\n       void\n-      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n+      operator()(Cntnr);\n \n     private:\n-      modify_test(const modify_test& );\n+      modify_test(const modify_test&);\n \n       template<typename Cntnr>\n       void\n-      modify(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e);\n+      modify(Cntnr, It ins_it_b, It ins_it_e)\n+      {\n+\ttypedef typename Cntnr::const_reference const_reference;\n+\tCntnr cntnr;\t\n+\tfor (It ins_it = ins_it_b; ins_it != ins_it_e; ++ins_it)\n+\t  cntnr.modify(const_reference(*ins_it));\n+      }\n \n-    private:\n       const It m_ins_b;\n-\n       const size_t m_ins_vn;\n       const size_t m_ins_vs;\n       const size_t m_ins_vm;\n-\n       const bool m_modify_up;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    modify_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm, bool modify_up) :\n-      m_ins_b(ins_b),\n-      m_ins_vn(ins_vn),\n-      m_ins_vs(ins_vs),\n-      m_ins_vm(ins_vm),\n-      m_modify_up(modify_up)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n+    template<typename It>\n     template<typename Cntnr>\n     void\n-    PB_DS_CLASS_C_DEC::\n-    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+    modify_test<It>::\n+    operator()(Cntnr)\n     {\n-      xml_result_set_performance_formatter res_set_fmt(\n-\t\t\t\t\t\t       string_form<Cntnr>::name(),\n-\t\t\t\t\t\t       string_form<Cntnr>::desc());\n-\n-      for (size_t size_i = 0; m_ins_vn + size_i*  m_ins_vs < m_ins_vm; ++size_i)\n-\t{\n-\t  const size_t v = m_ins_vn + size_i*  m_ins_vs;\n+      typedef typename Cntnr::value_type value_type;\n+      typedef typename Cntnr::container_category container_category;\n+      typedef typename Cntnr::const_reference const_reference;\n+      typedef pb_ds::test::detail::timing_test_base timing_test_base;\n \n-\t  It ins_it_b = m_ins_b;\n-\t  It ins_it_e = m_ins_b;\n-\t  std::advance(ins_it_e, v);\n+      typedef xml_result_set_performance_formatter formatter_type;\n+      formatter_type res_set_fmt(string_form<Cntnr>::name(),\n+\t\t\t\t string_form<Cntnr>::desc());\n \n-\t  pb_ds::test::detail::push_functor<It, Cntnr, typename Cntnr::container_category>\n-            push_fn(ins_it_b, ins_it_e);\n+      for (size_t i = 0; m_ins_vn + i * m_ins_vs < m_ins_vm; ++i)\n+\t{\n+\t  const size_t v = m_ins_vn + i * m_ins_vs;\n+\t  It  b = m_ins_b;\n+\t  It e = m_ins_b;\n+\t  std::advance(e, v);\n \n-\t  const double push_res =\n-            pb_ds::test::detail::timing_test_base::operator()(push_fn);\n+\t  pb_ds::test::detail::push_functor<It, Cntnr, container_category>\n+            push_fn( b, e);\n \n-\t  typename Cntnr::value_type mod_val = ins_it_b->first;\n+\t  const double push_res = timing_test_base::operator()(push_fn);\n \n+\t  value_type val = b->first;\n \t  {\n             Cntnr mod_val_container;\n-            for (It mod_val_it = ins_it_b; mod_val_it != ins_it_e; ++mod_val_it)\n+            for (It mod_val_it = b; mod_val_it != e; ++mod_val_it)\n \t      {\n-                typename Cntnr::value_type pot = mod_val_it->first;\n-\n-                if (m_modify_up == mod_val_container.get_cmp_fn()(mod_val, pot))\n-\t\t  mod_val = pot;\n+                value_type pot = mod_val_it->first;\n+                if (m_modify_up == mod_val_container.get_cmp_fn()(val, pot))\n+\t\t  val = pot;\n \t      }\n \t  }\n \n-\t  pb_ds::test::detail::push_modify_functor<It, Cntnr, typename Cntnr::container_category>\n-            push_modify_fn(ins_it_b, ins_it_e, mod_val);\n+\t  pb_ds::test::detail::push_modify_functor<It, Cntnr, container_category>\n+            push_modify_fn(b, e, val);\n \n-\t  const double push_modify_res =\n-            pb_ds::test::detail::timing_test_base::operator()(push_modify_fn);\n+\t  const double push_modify_res = timing_test_base::operator()(push_modify_fn);\n \n-\t  const double effective_delta = std::max(\n-\t\t\t\t\t\t  push_modify_res - push_res,\n-\t\t\t\t\t\t  pb_ds::test::detail::timing_test_base::min_time_res());\n+\t  const double effective_delta = std::max(push_modify_res - push_res,\n+\t\t\t\t\t     timing_test_base::min_time_res());\n \n \t  res_set_fmt.add_res(v, effective_delta / v);\n \t}\n     }\n-\n-    PB_DS_CLASS_T_DEC\n-    template<typename Cntnr>\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    modify(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e)\n-    {\n-      Cntnr cntnr;\n-\n-      for (It ins_it = ins_it_b; ins_it != ins_it_e; ++ins_it)\n-        cntnr.modify((typename Cntnr::const_reference)(*ins_it));\n-    }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_JOIN_TEST_HPP\n+#endif\n "}, {"sha": "ef04c3258cc1c7f5528eec8671c9d6ec402b2d7c", "filename": "libstdc++-v3/testsuite/util/performance/priority_queue/timing/push_pop_test.hpp", "status": "modified", "additions": 24, "deletions": 58, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fpush_pop_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fpush_pop_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fpush_pop_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -55,19 +55,16 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n       template<typename It, class Cntnr>\n       class push_pop_push_pop_functor\n       {\n       public:\n-        push_pop_push_pop_functor(It ins_it_b,  It ins_it_e) : m_ins_it_b(ins_it_b),\n-\t\t\t\t\t\t\t       m_ins_it_e(ins_it_e)\n+        push_pop_push_pop_functor(It ins_it_b,  It ins_it_e) \n+\t: m_ins_it_b(ins_it_b), m_ins_it_e(ins_it_e)\n \t{ }\n \n \tvoid\n@@ -76,10 +73,8 @@ namespace pb_ds\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n \t      Cntnr cntnr;\n-\n \t      for (It ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n                 cntnr.push((typename Cntnr::const_reference)(ins_it->first));\n-\n \t      while (!cntnr.empty())\n                 cntnr.pop();\n \t    }\n@@ -92,61 +87,50 @@ namespace pb_ds\n \n     } // namespace detail\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename It>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    push_pop_test<\t\t\t\t\t\\\n-\t\t\t\t\t\tIt>\n-\n     template<typename It>\n     class push_pop_test : private pb_ds::test::detail::timing_test_base\n     {\n     public:\n-      push_pop_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm);\n+      push_pop_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm)\n+      : m_ins_b(ins_b), m_ins_vn(ins_vn), m_ins_vs(ins_vs), m_ins_vm(ins_vm)\n+      { }\n \n       template<typename Cntnr>\n       void\n-      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n+      operator()(Cntnr);\n \n     private:\n-      push_pop_test(const push_pop_test& );\n+      push_pop_test(const push_pop_test&);\n \n       template<typename Cntnr>\n       void\n-      push(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e);\n+      push(Cntnr, It ins_it_b, It ins_it_e)\n+      {\n+\tCntnr cntnr;\n+\tfor (It ins_it = ins_it_b; ins_it != ins_it_e; ++ins_it)\n+\t  cntnr.push((typename Cntnr::const_reference)(*ins_it));\n+      }\n \n-    private:\n       const It m_ins_b;\n-\n       const size_t m_ins_vn;\n       const size_t m_ins_vs;\n       const size_t m_ins_vm;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    push_pop_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm) :\n-      m_ins_b(ins_b),\n-      m_ins_vn(ins_vn),\n-      m_ins_vs(ins_vs),\n-      m_ins_vm(ins_vm)\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n+ \n+    template<typename It>\n     template<typename Cntnr>\n     void\n-    PB_DS_CLASS_C_DEC::\n-    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+    push_pop_test<It>::\n+    operator()(Cntnr)\n     {\n-      xml_result_set_performance_formatter res_set_fmt(\n-\t\t\t\t\t\t       string_form<Cntnr>::name(),\n-\t\t\t\t\t\t       string_form<Cntnr>::desc());\n-\n-      for (size_t size_i = 0; m_ins_vn + size_i*  m_ins_vs < m_ins_vm; ++size_i)\n+      typedef xml_result_set_performance_formatter formatter_type;\n+      formatter_type res_set_fmt(string_form<Cntnr>::name(), \n+\t\t\t\t string_form<Cntnr>::desc());\n+ \n+      for (size_t i = 0; m_ins_vn + i * m_ins_vs < m_ins_vm; ++i)\n \t{\n-\t  const size_t v = m_ins_vn + size_i*  m_ins_vs;\n-\n+\t  const size_t v = m_ins_vn + i * m_ins_vs;\n \t  It ins_it_b = m_ins_b;\n \t  It ins_it_e = m_ins_b;\n \t  std::advance(ins_it_e, v);\n@@ -160,26 +144,8 @@ namespace pb_ds\n \t  res_set_fmt.add_res(v, res / v);\n \t}\n     }\n-\n-    PB_DS_CLASS_T_DEC\n-    template<typename Cntnr>\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    push(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e)\n-    {\n-      Cntnr cntnr;\n-\n-      for (It ins_it = ins_it_b; ins_it != ins_it_e; ++ins_it)\n-        cntnr.push((typename Cntnr::const_reference)(*ins_it));\n-    }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_PUSH_TEST_HPP\n+#endif \n "}, {"sha": "d6f280501dd49c009706b76206299d32a6d7404a", "filename": "libstdc++-v3/testsuite/util/performance/priority_queue/timing/push_test.hpp", "status": "modified", "additions": 19, "deletions": 47, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fpush_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fpush_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fpush_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -55,19 +55,16 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n       template<typename It, class Cntnr>\n       class push_push_functor\n       {\n       public:\n-        push_push_functor(It ins_it_b,  It ins_it_e) : m_ins_it_b(ins_it_b),\n-\t\t\t\t\t\t       m_ins_it_e(ins_it_e)\n+        push_push_functor(It ins_it_b,  It ins_it_e) \n+\t: m_ins_it_b(ins_it_b), m_ins_it_e(ins_it_e)\n \t{ }\n \n \tvoid\n@@ -76,7 +73,6 @@ namespace pb_ds\n \t  for (std::size_t i = 0; i < resolution; ++i)\n \t    {\n \t      Cntnr cntnr;\n-\n \t      for (It ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n                 cntnr.push((typename Cntnr::const_reference)(ins_it->first));\n \t    }\n@@ -86,64 +82,47 @@ namespace pb_ds\n \tconst It m_ins_it_b;\n \tconst It m_ins_it_e;\n       };\n-\n     } // namespace detail\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename It>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    push_test<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tIt>\n-\n     template<typename It>\n     class push_test : private pb_ds::test::detail::timing_test_base\n     {\n     public:\n-      push_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm);\n+      push_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm)\n+      : m_ins_b(ins_b), m_ins_vn(ins_vn), m_ins_vs(ins_vs), m_ins_vm(ins_vm)\n+      { }\n \n       template<typename Cntnr>\n       void\n-      operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>);\n+      operator()(Cntnr);\n \n     private:\n       push_test(const push_test& );\n \n       template<typename Cntnr>\n       void\n-      push(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e);\n+      push(Cntnr, It ins_it_b, It ins_it_e);\n \n-    private:\n       const It m_ins_b;\n-\n       const size_t m_ins_vn;\n       const size_t m_ins_vs;\n       const size_t m_ins_vm;\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    push_test(It ins_b, size_t ins_vn, size_t ins_vs, size_t ins_vm) :\n-      m_ins_b(ins_b),\n-      m_ins_vn(ins_vn),\n-      m_ins_vs(ins_vs),\n-      m_ins_vm(ins_vm)\n-    { }\n \n-    PB_DS_CLASS_T_DEC\n+    template<typename It>\n     template<typename Cntnr>\n     void\n-    PB_DS_CLASS_C_DEC::\n-    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+    push_test<It>::\n+    operator()(Cntnr)\n     {\n-      xml_result_set_performance_formatter res_set_fmt(\n-\t\t\t\t\t\t       string_form<Cntnr>::name(),\n-\t\t\t\t\t\t       string_form<Cntnr>::desc());\n+      typedef xml_result_set_performance_formatter formatter_type;\n+      formatter_type res_set_fmt(string_form<Cntnr>::name(),\n+\t\t\t\t string_form<Cntnr>::desc());\n \n-      for (size_t size_i = 0; m_ins_vn + size_i*  m_ins_vs < m_ins_vm; ++size_i)\n+      for (size_t i = 0; m_ins_vn + i * m_ins_vs < m_ins_vm; ++i)\n \t{\n-\t  const size_t v = m_ins_vn + size_i*  m_ins_vs;\n-\n+\t  const size_t v = m_ins_vn + i * m_ins_vs;\n \t  It ins_it_b = m_ins_b;\n \t  It ins_it_e = m_ins_b;\n \t  std::advance(ins_it_e, v);\n@@ -158,25 +137,18 @@ namespace pb_ds\n \t}\n     }\n \n-    PB_DS_CLASS_T_DEC\n+    template<typename It>\n     template<typename Cntnr>\n     void\n-    PB_DS_CLASS_C_DEC::\n-    push(__gnu_cxx::typelist::detail::type_to_type<Cntnr>, It ins_it_b, It ins_it_e)\n+    push_test<It>::\n+    push(Cntnr, It ins_it_b, It ins_it_e)\n     {\n       Cntnr cntnr;\n-\n       for (It ins_it = ins_it_b; ins_it != ins_it_e; ++ins_it)\n         cntnr.push((typename Cntnr::const_reference)(*ins_it));\n     }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_PUSH_TEST_HPP\n+#endif \n "}, {"sha": "0f86f38da3da8dd9c28538549869698428aeac9d", "filename": "libstdc++-v3/testsuite/util/regression/assoc/common_type.hpp", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fassoc%2Fcommon_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fassoc%2Fcommon_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fassoc%2Fcommon_type.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -58,13 +58,14 @@ namespace test\n \n   struct hash\n   {\n-    typedef alloc_type::rebind<basic_type>::other::const_reference const_key_reference;\n+    typedef alloc_type::rebind<basic_type>::other basic_type_rebind;\n+    typedef basic_type_rebind::const_reference const_reference;\n+    typedef basic_type::const_iterator const_iterator;\n \n     size_t\n-    operator()(const_key_reference r_key) const\n+    operator()(const_reference r_key) const\n     {\n       size_t ret = 0;\n-      typedef basic_type::const_iterator const_iterator;\n       for (const_iterator it = r_key.begin(); it != r_key.end(); ++it)\n \tret = ret * 5 + static_cast<size_t>(*it);\n       return ret;\n@@ -141,4 +142,4 @@ namespace test\n } // namespace test\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_RAND_REGRESSION_TEST_COMMON_TYPE_HPP\n+#endif "}, {"sha": "ad93bf47142a6aa3baa1660f203b9e12694266a3", "filename": "libstdc++-v3/testsuite/util/regression/basic_type.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fbasic_type.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fbasic_type.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fbasic_type.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -101,4 +101,4 @@ namespace test\n } // namespace test\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_BASIC_TYPE_HPP\n+#endif "}, {"sha": "3f77c219e00d71611ca35d8529ad906831c74417", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/container_rand_regression_test.hpp", "status": "modified", "additions": 25, "deletions": 45, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fcontainer_rand_regression_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fcontainer_rand_regression_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fcontainer_rand_regression_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -128,25 +128,17 @@ namespace detail\n     operator()();\n \n   private:\n-    typedef Cntnr cntnr;\n-\n-    typedef typename cntnr::allocator allocator;\n-\n-    typedef typename cntnr::size_type size_type;\n-\n-    typedef twister_rand_gen gen;\n-\n-    typedef regression_test_traits<Cntnr> test_traits;\n-\n-    typedef pb_ds::container_traits<Cntnr> container_traits;\n-\n-    typedef typename test_traits::key_type key_type;\n-\n-    typedef typename test_traits::const_key_reference const_key_reference;\n-\n-    typedef typename test_traits::value_type value_type;\n-\n-    typedef typename test_traits::native_type native_type;\n+    typedef Cntnr \t\t\t\t\tcntnr;\n+    typedef typename cntnr::allocator \t\t\tallocator;\n+    typedef typename cntnr::size_type \t\t\tsize_type;\n+    typedef regression_test_traits<Cntnr> \t\ttest_traits;\n+    typedef typename test_traits::key_type \t\tkey_type;\n+    typedef typename test_traits::const_key_reference\tconst_key_reference;\n+    typedef typename test_traits::value_type \t\tvalue_type;\n+    typedef typename test_traits::native_type \t\tnative_type;\n+    typedef twister_rand_gen \t\t\t\tgen;\n+    typedef pb_ds::container_traits<Cntnr> \t\tcontainer_traits;\n+    typedef __gnu_cxx::throw_allocator<char> \t\talloc_t;\n \n     enum op\n       {\n@@ -156,10 +148,6 @@ namespace detail\n \tother_op\n       };\n \n-    typedef __gnu_cxx::throw_allocator<char> alloc_t;\n-\n-  private:\n-\n     op\n     get_next_op();\n \n@@ -440,7 +428,6 @@ namespace detail\n     void\n     print_container(const cntnr&, std::ostream& r_os = std::cerr) const;\n \n-  private:\n     struct destructor_printer\n     {\n       destructor_printer(const std::string& r_msg) \n@@ -464,27 +451,20 @@ namespace detail\n       bool m_print;\n     };\n \n-  private:\n-    const unsigned long m_seed;\n-\n-    const size_t m_n;\n-    const size_t m_m;\n-    const double m_tp;\n-    const double m_ip;\n-    const double m_ep;\n-    const double m_cp;\n-    const double m_mp;\n-    const bool m_disp;\n-\n-    twister_rand_gen m_g;\n-\n-    Cntnr* m_p_c;\n-\n-    native_type m_native_c;\n-\n-    alloc_t m_alloc;\n-\n-    size_t m_i;\n+    const unsigned long \tm_seed;\n+    const size_t \t\tm_n;\n+    const size_t \t\tm_m;\n+    const double \t\tm_tp;\n+    const double \t\tm_ip;\n+    const double \t\tm_ep;\n+    const double \t\tm_cp;\n+    const double \t\tm_mp;\n+    const bool \t\t\tm_disp;\n+    twister_rand_gen \t\tm_g;\n+    Cntnr* \t\t\tm_p_c;\n+    native_type \t\tm_native_c;\n+    alloc_t \t\t\tm_alloc;\n+    size_t \t\t\tm_i;\n   };\n \n #include <regression/rand/assoc/detail/constructor_destructor_fn_imps.hpp>"}, {"sha": "66a7077470fe590e599d6d7ad9b915d4fb3c2c9f", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/detail/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 63, "deletions": 174, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Fconstructor_destructor_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -46,19 +46,12 @@\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-container_rand_regression_test(unsigned long seed, size_t n, size_t m, double tp, double ip, double ep, double cp, double mp, bool disp) :\n-  m_seed((seed == 0)?\n-\t twister_rand_gen::get_time_determined_seed():\n-\t seed),\n-  m_n(n),\n-  m_m(m),\n-  m_tp(tp),\n-  m_ip(ip),\n-  m_ep(ep),\n-  m_cp(cp),\n-  m_mp(mp),\n-  m_disp(disp),\n-  m_p_c(NULL)\n+container_rand_regression_test(unsigned long seed, size_t n, size_t m, \n+\t\t\t       double tp, double ip, double ep, double cp, \n+\t\t\t       double mp, bool disp) \n+: m_seed((seed == 0) ? twister_rand_gen::get_time_determined_seed() : seed),\n+  m_n(n), m_m(m), m_tp(tp), m_ip(ip), m_ep(ep), m_cp(cp), m_mp(mp),\n+  m_disp(disp), m_p_c(NULL)\n { }\n \n PB_DS_CLASS_T_DEC\n@@ -72,24 +65,21 @@ PB_DS_CLASS_C_DEC::\n default_constructor()\n {\n   PB_DS_TRACE(\"default_constructor\");\n-\n   bool done = true;\n-\n   m_alloc.set_throw_prob(m_tp);\n \n   try\n     {\n       m_p_c = new Cntnr;\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch(__gnu_cxx::forced_exception_error&)\n     {\n       done = false;\n     }\n \n   if (m_p_c != NULL)\n     PB_DS_COND_COMPARE(*m_p_c, m_native_c);\n-\n-  return (done);\n+  return done;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -98,19 +88,12 @@ PB_DS_CLASS_C_DEC::\n swap()\n {\n   PB_DS_TRACE(\"swap\");\n-\n   m_alloc.set_throw_prob(0);\n-\n   Cntnr* p_c = new Cntnr;\n-\n   m_alloc.set_throw_prob(1);\n-\n   p_c->swap(*m_p_c);\n-\n   std::swap(p_c, m_p_c);\n-\n   delete p_c;\n-\n   PB_DS_COND_COMPARE(*m_p_c, m_native_c);\n }\n \n@@ -120,20 +103,14 @@ PB_DS_CLASS_C_DEC::\n copy_constructor()\n {\n   PB_DS_TRACE(\"copy_constructor\");\n-\n   bool done = true;\n-\n   Cntnr* p_c = NULL;\n-\n   m_alloc.set_throw_prob(m_tp);\n-\n-  typename alloc_t::group_throw_prob_adjustor\n-    adjust(m_p_c->size());\n+  typename alloc_t::group_throw_prob_adjustor adjust(m_p_c->size());\n \n   try\n     {\n       p_c = new Cntnr(*m_p_c);\n-\n       std::swap(p_c, m_p_c);\n     }\n   catch(__gnu_cxx::forced_exception_error& )\n@@ -142,10 +119,8 @@ copy_constructor()\n     }\n \n   delete p_c;\n-\n   PB_DS_COND_COMPARE(*m_p_c, m_native_c);\n-\n-  return (done);\n+  return done;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -154,22 +129,15 @@ PB_DS_CLASS_C_DEC::\n assignment_operator()\n {\n   PB_DS_TRACE(\"assignment operator\");\n-\n   bool done = true;\n-\n   Cntnr* p_c = NULL;\n-\n   m_alloc.set_throw_prob(m_tp);\n-\n-  typename alloc_t::group_throw_prob_adjustor\n-    adjust(m_p_c->size());\n+  typename alloc_t::group_throw_prob_adjustor adjust(m_p_c->size());\n \n   try\n     {\n       p_c = new Cntnr();\n-\n       * p_c =* m_p_c;\n-\n       std::swap(p_c, m_p_c);\n     }\n   catch(__gnu_cxx::forced_exception_error& )\n@@ -178,10 +146,8 @@ assignment_operator()\n     }\n \n   delete p_c;\n-\n   PB_DS_COND_COMPARE(*m_p_c, m_native_c);\n-\n-  return (done);\n+  return done;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -190,8 +156,7 @@ PB_DS_CLASS_C_DEC::\n it_constructor()\n {\n   PB_DS_TRACE(\"it_constructor\");\n-\n-  return (it_constructor_imp(typename Cntnr::container_category()));\n+  return it_constructor_imp(typename Cntnr::container_category());\n }\n \n PB_DS_CLASS_T_DEC\n@@ -200,13 +165,9 @@ PB_DS_CLASS_C_DEC::\n it_constructor_imp(pb_ds::cc_hash_tag)\n {\n   bool done = true;\n-\n   Cntnr* p_c = NULL;\n-\n   m_alloc.set_throw_prob(m_tp);\n-\n-  typename alloc_t::group_throw_prob_adjustor\n-    adjust(m_p_c->size());\n+  typename alloc_t::group_throw_prob_adjustor adjust(m_p_c->size());\n \n   try\n     {\n@@ -217,69 +178,52 @@ it_constructor_imp(pb_ds::cc_hash_tag)\n \t  m_native_c.clear();\n \t  break;\n         case 1:\n-\t  p_c = new Cntnr(m_p_c->get_hash_fn(),\n-\t\t\t  m_p_c->get_eq_fn());\n+\t  p_c = new Cntnr(m_p_c->get_hash_fn(), m_p_c->get_eq_fn());\n \t  m_native_c.clear();\n \t  break;\n         case 2:\n-\t  p_c = new Cntnr(m_p_c->get_hash_fn(),\n-\t\t\t  m_p_c->get_eq_fn(),\n+\t  p_c = new Cntnr(m_p_c->get_hash_fn(), m_p_c->get_eq_fn(),\n \t\t\t  m_p_c->get_comb_hash_fn());\n \t  m_native_c.clear();\n \t  break;\n         case 3:\n-\t  p_c = new Cntnr(m_p_c->get_hash_fn(),\n-\t\t\t  m_p_c->get_eq_fn(),\n+\t  p_c = new Cntnr(m_p_c->get_hash_fn(), m_p_c->get_eq_fn(),\n \t\t\t  m_p_c->get_comb_hash_fn(),\n \t\t\t  m_p_c->get_resize_policy());\n \t  m_native_c.clear();\n \t  break;\n         case 4:\n-\t  p_c = new Cntnr(m_p_c->begin(),\n-\t\t\t  m_p_c->end());\n+\t  p_c = new Cntnr(m_p_c->begin(), m_p_c->end());\n \t  break;\n         case 5:\n-\t  p_c = new Cntnr(m_p_c->begin(),\n-\t\t\t  m_p_c->end(),\n-\t\t\t  m_p_c->get_hash_fn());\n+\t  p_c = new Cntnr(m_p_c->begin(), m_p_c->end(), m_p_c->get_hash_fn());\n \t  break;\n         case 6:\n-\t  p_c = new Cntnr(m_p_c->begin(),\n-\t\t\t  m_p_c->end(),\n-\t\t\t  m_p_c->get_hash_fn(),\n+\t  p_c = new Cntnr(m_p_c->begin(), m_p_c->end(), m_p_c->get_hash_fn(),\n \t\t\t  m_p_c->get_eq_fn());\n \t  break;\n         case 7:\n-\t  p_c = new Cntnr(m_p_c->begin(),\n-\t\t\t  m_p_c->end(),\n-\t\t\t  m_p_c->get_hash_fn(),\n-\t\t\t  m_p_c->get_eq_fn(),\n-\t\t\t  m_p_c->get_comb_hash_fn());\n+\t  p_c = new Cntnr(m_p_c->begin(), m_p_c->end(), m_p_c->get_hash_fn(),\n+\t\t\t  m_p_c->get_eq_fn(), m_p_c->get_comb_hash_fn());\n \t  break;\n         case 8:\n-\t  p_c = new Cntnr(m_p_c->begin(),\n-\t\t\t  m_p_c->end(),\n-\t\t\t  m_p_c->get_hash_fn(),\n-\t\t\t  m_p_c->get_eq_fn(),\n-\t\t\t  m_p_c->get_comb_hash_fn(),\n+\t  p_c = new Cntnr(m_p_c->begin(), m_p_c->end(), m_p_c->get_hash_fn(),\n+\t\t\t  m_p_c->get_eq_fn(), m_p_c->get_comb_hash_fn(),\n \t\t\t  m_p_c->get_resize_policy());\n \t  break;\n         default:\n-\t  PB_DS_THROW_IF_FAILED(                    false,  \"\",  m_p_c, & m_native_c);\n+\t  PB_DS_THROW_IF_FAILED(false, \"\",  m_p_c, & m_native_c);\n         };\n-\n       std::swap(p_c, m_p_c);\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch (__gnu_cxx::forced_exception_error&)\n     {\n       done = false;\n     }\n \n   delete p_c;\n-\n   PB_DS_COND_COMPARE(*m_p_c, m_native_c);\n-\n-  return (done);\n+  return done;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -288,13 +232,9 @@ PB_DS_CLASS_C_DEC::\n it_constructor_imp(pb_ds::gp_hash_tag)\n {\n   bool done = true;\n-\n   Cntnr* p_c = NULL;\n-\n   m_alloc.set_throw_prob(m_tp);\n-\n-  typename alloc_t::group_throw_prob_adjustor\n-    adjust(m_p_c->size());\n+  typename alloc_t::group_throw_prob_adjustor adjust(m_p_c->size());\n \n   try\n     {\n@@ -305,95 +245,68 @@ it_constructor_imp(pb_ds::gp_hash_tag)\n \t  m_native_c.clear();\n \t  break;\n         case 1:\n-\t  p_c = new Cntnr(m_p_c->get_hash_fn(),\n-\t\t\t  m_p_c->get_eq_fn());\n+\t  p_c = new Cntnr(m_p_c->get_hash_fn(), m_p_c->get_eq_fn());\n \t  m_native_c.clear();\n \t  break;\n         case 2:\n-\t  p_c = new Cntnr(m_p_c->get_hash_fn(),\n-\t\t\t  m_p_c->get_eq_fn(),\n+\t  p_c = new Cntnr(m_p_c->get_hash_fn(), m_p_c->get_eq_fn(),\n \t\t\t  m_p_c->get_comb_probe_fn());\n \t  m_native_c.clear();\n \t  break;\n         case 3:\n-\t  p_c = new Cntnr(m_p_c->get_hash_fn(),\n-\t\t\t  m_p_c->get_eq_fn(),\n+\t  p_c = new Cntnr(m_p_c->get_hash_fn(), m_p_c->get_eq_fn(),\n \t\t\t  m_p_c->get_comb_probe_fn());\n \t  m_native_c.clear();\n \t  break;\n         case 4:\n-\t  p_c = new Cntnr(m_p_c->get_hash_fn(),\n-\t\t\t  m_p_c->get_eq_fn(),\n-\t\t\t  m_p_c->get_comb_probe_fn(),\n-\t\t\t  m_p_c->get_probe_fn());\n+\t  p_c = new Cntnr(m_p_c->get_hash_fn(), m_p_c->get_eq_fn(),\n+\t\t\t  m_p_c->get_comb_probe_fn(), m_p_c->get_probe_fn());\n \t  m_native_c.clear();\n \t  break;\n         case 5:\n-\t  p_c = new Cntnr(m_p_c->get_hash_fn(),\n-\t\t\t  m_p_c->get_eq_fn(),\n-\t\t\t  m_p_c->get_comb_probe_fn(),\n-\t\t\t  m_p_c->get_probe_fn(),\n+\t  p_c = new Cntnr(m_p_c->get_hash_fn(), m_p_c->get_eq_fn(),\n+\t\t\t  m_p_c->get_comb_probe_fn(), m_p_c->get_probe_fn(),\n \t\t\t  m_p_c->get_resize_policy());\n \t  m_native_c.clear();\n \t  break;\n         case 6:\n-\t  p_c = new Cntnr(m_p_c->begin(),\n-\t\t\t  m_p_c->end(),\n-\t\t\t  m_p_c->get_hash_fn());\n+\t  p_c = new Cntnr(m_p_c->begin(), m_p_c->end(), m_p_c->get_hash_fn());\n \t  break;\n         case 7:\n-\t  p_c = new Cntnr(m_p_c->begin(),\n-\t\t\t  m_p_c->end(),\n-\t\t\t  m_p_c->get_hash_fn(),\n+\t  p_c = new Cntnr(m_p_c->begin(), m_p_c->end(), m_p_c->get_hash_fn(),\n \t\t\t  m_p_c->get_eq_fn());\n \t  break;\n         case 8:\n-\t  p_c = new Cntnr(m_p_c->begin(),\n-\t\t\t  m_p_c->end(),\n-\t\t\t  m_p_c->get_hash_fn(),\n-\t\t\t  m_p_c->get_eq_fn(),\n-\t\t\t  m_p_c->get_comb_probe_fn());\n+\t  p_c = new Cntnr(m_p_c->begin(), m_p_c->end(), m_p_c->get_hash_fn(),\n+\t\t\t  m_p_c->get_eq_fn(), m_p_c->get_comb_probe_fn());\n \t  break;\n         case 9:\n-\t  p_c = new Cntnr(m_p_c->begin(),\n-\t\t\t  m_p_c->end(),\n-\t\t\t  m_p_c->get_hash_fn(),\n-\t\t\t  m_p_c->get_eq_fn(),\n-\t\t\t  m_p_c->get_comb_probe_fn());\n+\t  p_c = new Cntnr(m_p_c->begin(), m_p_c->end(), m_p_c->get_hash_fn(),\n+\t\t\t  m_p_c->get_eq_fn(), m_p_c->get_comb_probe_fn());\n \t  break;\n         case 10:\n-\t  p_c = new Cntnr(m_p_c->begin(),\n-\t\t\t  m_p_c->end(),\n-\t\t\t  m_p_c->get_hash_fn(),\n-\t\t\t  m_p_c->get_eq_fn(),\n-\t\t\t  m_p_c->get_comb_probe_fn(),\n+\t  p_c = new Cntnr(m_p_c->begin(), m_p_c->end(), m_p_c->get_hash_fn(),\n+\t\t\t  m_p_c->get_eq_fn(), m_p_c->get_comb_probe_fn(),\n \t\t\t  m_p_c->get_probe_fn());\n \t  break;\n         case 11:\n-\t  p_c = new Cntnr(m_p_c->begin(),\n-\t\t\t  m_p_c->end(),\n-\t\t\t  m_p_c->get_hash_fn(),\n-\t\t\t  m_p_c->get_eq_fn(),\n-\t\t\t  m_p_c->get_comb_probe_fn(),\n-\t\t\t  m_p_c->get_probe_fn(),\n-\t\t\t  m_p_c->get_resize_policy());\n+\t  p_c = new Cntnr(m_p_c->begin(), m_p_c->end(), m_p_c->get_hash_fn(),\n+\t\t\t  m_p_c->get_eq_fn(), m_p_c->get_comb_probe_fn(),\n+\t\t\t  m_p_c->get_probe_fn(), m_p_c->get_resize_policy());\n \t  break;\n         default:\n-\t  PB_DS_THROW_IF_FAILED(                    false,  \"\",  m_p_c, & m_native_c);\n+\t  PB_DS_THROW_IF_FAILED(false, \"\",  m_p_c, & m_native_c);\n         };\n-\n       std::swap(p_c, m_p_c);\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch (__gnu_cxx::forced_exception_error&)\n     {\n       done = false;\n     }\n \n   delete p_c;\n-\n   PB_DS_COND_COMPARE(*m_p_c, m_native_c);\n-\n-  return (done);\n+  return done;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -402,13 +315,9 @@ PB_DS_CLASS_C_DEC::\n it_constructor_imp(pb_ds::tree_tag)\n {\n   bool done = true;\n-\n   Cntnr* p_c = NULL;\n-\n   m_alloc.set_throw_prob(m_tp);\n-\n-  typename alloc_t::group_throw_prob_adjustor\n-    adjust(m_p_c->size());\n+  typename alloc_t::group_throw_prob_adjustor adjust(m_p_c->size());\n \n   try\n     {\n@@ -419,26 +328,21 @@ it_constructor_imp(pb_ds::tree_tag)\n \t  m_native_c.clear();\n \t  break;\n         case 1:\n-\t  p_c = new Cntnr(m_p_c->begin(),\n-\t\t\t  m_p_c->end(),\n-\t\t\t  m_p_c->get_cmp_fn());\n+\t  p_c = new Cntnr(m_p_c->begin(), m_p_c->end(), m_p_c->get_cmp_fn());\n \t  break;\n         default:\n-\t  PB_DS_THROW_IF_FAILED(                false,  \"\",  m_p_c, & m_native_c);\n+\t  PB_DS_THROW_IF_FAILED(false, \"\",  m_p_c, &m_native_c);\n         };\n-\n       std::swap(p_c, m_p_c);\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch (__gnu_cxx::forced_exception_error&)\n     {\n       done = false;\n     }\n \n   delete p_c;\n-\n   PB_DS_COND_COMPARE(*m_p_c, m_native_c);\n-\n-  return (done);\n+  return done;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -447,31 +351,23 @@ PB_DS_CLASS_C_DEC::\n it_constructor_imp(pb_ds::list_update_tag)\n {\n   bool done = true;\n-\n   Cntnr* p_c = NULL;\n-\n   m_alloc.set_throw_prob(m_tp);\n-\n-  typename alloc_t::group_throw_prob_adjustor\n-    adjust(m_p_c->size());\n+  typename alloc_t::group_throw_prob_adjustor adjust(m_p_c->size());\n \n   try\n     {\n-      p_c = new Cntnr(m_p_c->begin(),\n-\t\t      m_p_c->end());\n-\n+      p_c = new Cntnr(m_p_c->begin(), m_p_c->end());\n       std::swap(p_c, m_p_c);\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch (__gnu_cxx::forced_exception_error&)\n     {\n       done = false;\n     }\n \n   delete p_c;\n-\n   PB_DS_COND_COMPARE(*m_p_c, m_native_c);\n-\n-  return (done);\n+  return done;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -480,13 +376,9 @@ PB_DS_CLASS_C_DEC::\n it_constructor_imp(pb_ds::pat_trie_tag)\n {\n   bool done = true;\n-\n   Cntnr* p_c = NULL;\n-\n   m_alloc.set_throw_prob(m_tp);\n-\n-  typename alloc_t::group_throw_prob_adjustor\n-    adjust(m_p_c->size());\n+  typename alloc_t::group_throw_prob_adjustor adjust(m_p_c->size());\n \n   try\n     {\n@@ -497,25 +389,22 @@ it_constructor_imp(pb_ds::pat_trie_tag)\n \t  m_native_c.clear();\n \t  break;\n         case 1:\n-\t  p_c = new Cntnr(m_p_c->begin(),\n-\t\t\t  m_p_c->end(),\n+\t  p_c = new Cntnr(m_p_c->begin(), m_p_c->end(), \n \t\t\t  m_p_c->get_e_access_traits());\n \t  break;\n         default:\n-\t  PB_DS_THROW_IF_FAILED(                    false,  \"\",  m_p_c, & m_native_c);\n+\t  PB_DS_THROW_IF_FAILED(false, \"\",  m_p_c, & m_native_c);\n         };\n \n       std::swap(p_c, m_p_c);\n     }\n-  catch(__gnu_cxx::forced_exception_error& )\n+  catch (__gnu_cxx::forced_exception_error&)\n     {\n       done = false;\n     }\n \n   delete p_c;\n-\n   PB_DS_COND_COMPARE(*m_p_c, m_native_c);\n-\n-  return (done);\n+  return done;\n }\n "}, {"sha": "78fc38907b6288df1befdcea96d9ff7bd9fe6926", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/detail/insert_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Finsert_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -64,22 +64,22 @@ insert()\n \n         if (ins_ret.second)\n \t  {\n-            PB_DS_THROW_IF_FAILED(!existed, \"\", m_p_c, & m_native_c);\n+            PB_DS_THROW_IF_FAILED(!existed, \"\", m_p_c, &m_native_c);\n \t  }\n         else\n \t  {\n-            PB_DS_THROW_IF_FAILED(existed, \"\", m_p_c, & m_native_c);\n-            PB_DS_THROW_IF_FAILED(found_it == ins_ret.first, \"\", m_p_c, & m_native_c);\n+            PB_DS_THROW_IF_FAILED(existed, \"\", m_p_c, &m_native_c);\n+            PB_DS_THROW_IF_FAILED(found_it == ins_ret.first, \"\", m_p_c, &m_native_c);\n \t  }\n         m_native_c.insert(test_traits::native_value(v));\n       }\n-    catch(__gnu_cxx::forced_exception_error& )\n+    catch(__gnu_cxx::forced_exception_error&)\n       {\n         done = false;\n       }\n-    catch(pb_ds::insert_error& )\n+    catch(pb_ds::insert_error&)\n       {\n-        PB_DS_THROW_IF_FAILED(false, \"\", m_p_c, & m_native_c);\n+        PB_DS_THROW_IF_FAILED(false, \"\", m_p_c, &m_native_c);\n       }\n \n   PB_DS_COND_COMPARE(*m_p_c, m_native_c);"}, {"sha": "323376480d3d067982e15cc2f2e8a632ef19645c", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/detail/operator_fn_imps.hpp", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Foperator_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Foperator_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Fdetail%2Foperator_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -41,22 +41,28 @@\n \n /**\n  * @file operator_fn_imps.hpp\n- * Containsert a random regression test for a specific container type.\n+ * Contains a random regression test for a specific container type.\n  */\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n operator()()\n {\n-  xml_result_set_regression_formatter* p_fmt = NULL;\n+  typedef xml_result_set_regression_formatter formatter_type;\n+  formatter_type* p_fmt = NULL;\n \n   if (m_disp)\n-    p_fmt = new xml_result_set_regression_formatter(string_form<Cntnr>::name(),\n-\t\t\t\t\t\t    string_form<Cntnr>::desc());\n+    p_fmt = new formatter_type(string_form<Cntnr>::name(),\n+\t\t\t       string_form<Cntnr>::desc());\n \n   m_g.init(m_seed);\n+\n+  // Track allocation from this point only.\n+  const size_t memory_label = 775;\n   m_alloc.init(m_seed);\n+  m_alloc.set_label(memory_label);  \n+\n   prog_bar pb(m_n, std::cout, m_disp);\n   m_i = 0;\n \n@@ -65,10 +71,8 @@ operator()()\n       for (m_i = 0; m_i < m_n; ++m_i)\n         {\n \t  PB_DS_TRACE(\"Op #\" << static_cast<unsigned long>(m_i));\n-\n \t  allocator::set_label(m_i);\n-\n-\t  switch(m_i)\n+\t  switch (m_i)\n             {\n             case 0:\n \t      PB_DS_RUN_MTHD(default_constructor);\n@@ -157,34 +161,40 @@ operator()()\n \t\t      get_set_loads();\n \t\t      break;\n                     default:\n-\t\t      PB_DS_THROW_IF_FAILED(false, \"\", m_p_c, & m_native_c);\n+\t\t      PB_DS_THROW_IF_FAILED(false, \"\", m_p_c, &m_native_c);\n                     }\n \t\t  break;\n                 default:\n-\t\t  PB_DS_THROW_IF_FAILED(false, \"\", m_p_c, & m_native_c);\n+\t\t  PB_DS_THROW_IF_FAILED(false, \"\", m_p_c, &m_native_c);\n                 };\n             }\n \n \t  pb.inc();\n         }\n     }\n-  catch(...)\n+  catch (...)\n     {\n       std::cerr << \"Failed at index \" << static_cast<unsigned long>(m_i) \n \t\t<< std::endl;\n       delete m_p_c;\n       throw;\n     }\n \n+  // Clean up, then check for allocation by special label, set above.\n   delete m_p_c;\n \n-  if (!m_alloc.throw_allocator<char>::empty())\n+  try \n+    { m_alloc.check_allocated(memory_label); }\n+  catch (...)\n     {\n       std::cerr << \"detected leaks!\" << std::endl;\n       std::cerr << m_alloc << std::endl;\n       PB_DS_THROW_IF_FAILED(false, \"\", m_p_c, &m_native_c);\n     }\n \n+  // Reset throw probability.\n+  m_alloc.set_throw_prob(0);\n+\n   if (m_disp)\n     {\n       std::cout << std::endl;\n@@ -200,17 +210,17 @@ get_next_op()\n   const double prob = m_g.get_prob();\n \n   if (prob < m_ip)\n-    return (insert_op);\n+    return insert_op;\n \n   if (prob < m_ip + m_ep)\n-    return (erase_op);\n+    return erase_op;\n \n   if (prob < m_ip + m_ep + m_cp)\n-    return (clear_op);\n+    return clear_op;\n \n   PB_DS_THROW_IF_FAILED(prob <= 1, prob, m_p_c, &m_native_c);\n \n-  return (other_op);\n+  return other_op;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -222,15 +232,14 @@ get_next_sub_op(size_t max)\n   const double delta = 1 / static_cast<double>(max);\n   size_t i = 0;\n   while (true)\n-    if (p <= (i + 1)*  delta)\n+    if (p <= (i + 1) * delta)\n       {\n \tPB_DS_THROW_IF_FAILED(i < max,\n \t\t\t      static_cast<unsigned long>(i) << \" \" <<\n \t\t\t      static_cast<unsigned long>(max),\n-\t\t\t      m_p_c,\n-\t\t\t      & m_native_c);\n+\t\t\t      m_p_c, &m_native_c);\n \n-\treturn (i);\n+\treturn i;\n       }\n     else\n       ++i;"}, {"sha": "2081c7c8b2d83316f69d6e7b2f8d55108bfe885a", "filename": "libstdc++-v3/testsuite/util/regression/rand/assoc/rand_regression_test.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Frand_regression_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Frand_regression_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fassoc%2Frand_regression_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -76,7 +76,7 @@ namespace detail\n \n     template<typename Cntnr>\n     void\n-    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+    operator()(Cntnr)\n     {\n       unsigned long ul = static_cast<unsigned long>(m_sd);\n       container_rand_regression_test<Cntnr> t(ul, m_n, m_n, m_tp, m_ip, \n@@ -145,12 +145,12 @@ namespace detail\n \tdetail::rand_reg_test tst(sd, n, m, tp, ip, ep, cp, mp, disp);\n \t__gnu_cxx::typelist::apply(tst, tl);\n       }\n-    catch(...)\n+    catch (...)\n       {\n \tstd::cerr << \"Test failed with seed \" << sd << std::endl;\n \tif (disp)\n \t  delete p_fmt;\n-\treturn -1;\n+\tthrow;\n       }\n \n     if (disp)"}, {"sha": "7a34b8121676af9b2434a4ee8a73ce3f7ee4ba3c", "filename": "libstdc++-v3/testsuite/util/regression/rand/priority_queue/detail/operator_fn_imps.hpp", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Foperator_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Foperator_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Fdetail%2Foperator_fn_imps.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -49,14 +49,20 @@ void\n PB_DS_CLASS_C_DEC::\n operator()()\n {\n-  xml_result_set_regression_formatter* p_fmt = NULL;\n+  typedef xml_result_set_regression_formatter formatter_type;\n+  formatter_type* p_fmt = NULL;\n \n   if (m_disp)\n-    p_fmt = new xml_result_set_regression_formatter(string_form<Cntnr>::name(),\n-\t\t\t\t\t\t    string_form<Cntnr>::desc());\n+    p_fmt = new formatter_type(string_form<Cntnr>::name(),\n+\t\t\t       string_form<Cntnr>::desc());\n \n   m_g.init(m_seed);\n+\n+  // Track allocation from this point only.\n+  const size_t memory_label = 775;\n   m_alloc.init(m_seed);\n+  m_alloc.set_label(memory_label);  \n+\n   prog_bar pb(m_n, std::cout, m_disp);\n   m_i = 0;\n \n@@ -140,22 +146,29 @@ operator()()\n \t  pb.inc();\n         }\n     }\n-  catch(...)\n+  catch (...)\n     {\n       std::cerr << \"Failed at index \" << static_cast<unsigned long>(m_i) \n \t\t<< std::endl;\n       delete m_p_c;\n       throw;\n     }\n+\n+  // Clean up, then check for allocation by special label, set above.\n   delete m_p_c;\n \n-  if (!m_alloc.throw_allocator<char>::empty())\n+  try \n+    { m_alloc.check_allocated(memory_label); }\n+  catch (...)\n     {\n       std::cerr << \"detected leaks!\" << std::endl;\n       std::cerr << m_alloc << std::endl;\n       PB_DS_THROW_IF_FAILED(false, \"\", m_p_c, &m_native_c);\n     }\n \n+  // Reset throw probability.\n+  m_alloc.set_throw_prob(0);\n+\n   if (m_disp)\n     {\n       std::cout << std::endl;"}, {"sha": "0d4c960fb856e014848b17d7f0db4d43c804ef21", "filename": "libstdc++-v3/testsuite/util/regression/rand/priority_queue/rand_regression_test.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Frand_regression_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Frand_regression_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Frand%2Fpriority_queue%2Frand_regression_test.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -76,7 +76,7 @@ namespace detail\n \n     template<typename Cntnr>\n     void\n-    operator()(__gnu_cxx::typelist::detail::type_to_type<Cntnr>)\n+    operator()(Cntnr)\n     {\n       unsigned long ul = static_cast<unsigned long>(m_sd);\n       container_rand_regression_test<Cntnr> t(ul, m_n, m_n, m_tp, m_ip, m_dp, "}, {"sha": "df8b66fcbc8e6c6c7505be785a741aa1fa42ab76", "filename": "libstdc++-v3/testsuite/util/regression/trait/assoc/type_trait.hpp", "status": "modified", "additions": 21, "deletions": 61, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Fassoc%2Ftype_trait.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Fassoc%2Ftype_trait.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Fassoc%2Ftype_trait.hpp?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -52,110 +52,70 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n       template<typename Cntnr>\n       struct regression_test_type_traits\n       {\n-\n-      public:\n-\n \ttypedef Cntnr cntnr;\n-\n \ttypedef typename cntnr::key_type key_type;\n-\n \ttypedef typename cntnr::const_key_reference const_key_reference;\n-\n \ttypedef typename cntnr::value_type value_type;\n-\n \ttypedef typename cntnr::const_reference const_reference;\n-\n \ttypedef typename cntnr::mapped_type mapped_type;\n-\n \ttypedef typename cntnr::const_mapped_reference const_mapped_reference;\n \n-      public:\n-\n \ttemplate<typename Gen>\n \tstatic key_type\n         generate_key(Gen& r_gen, size_t max)\n-\t{\n-\t  return (basic_type(r_gen, max));\n-\t}\n+\t{ return basic_type(r_gen, max); }\n \n \ttemplate<typename Gen>\n \tstatic value_type\n         generate_value(Gen& r_gen, size_t max)\n-\t{\n-\t  return (generate_value(r_gen, max,\n-\t\t\t\t __gnu_cxx::typelist::detail::type_to_type<value_type>()));\n-\t}\n+\t{ return generate_value(r_gen, max, value_type()); }\n \n \tstatic const_key_reference\n         extract_key(const_reference r_val)\n-\t{\n-\t  return extract_key_imp(r_val);\n-\t}\n+\t{ return extract_key_imp(r_val); }\n \n       private:\n-\ttypedef\n-        typename Cntnr::allocator::template rebind<\n-\tbasic_type>::other::const_reference\n-        basic_type_const_reference;\n-\n-\ttypedef\n-        typename Cntnr::allocator::template rebind<\n-\t  std::pair<\n-\t  basic_type,\n-\t  basic_type> >::other::const_reference\n-        basic_type_pair_const_reference;\n+\ttypedef typename cntnr::allocator::template rebind<basic_type>::other\n+\tbasic_type_rebind;\n+\t\n+\ttypedef typename basic_type_rebind::const_reference basic_type_const_reference;\n+\n+\ttypedef typename cntnr::allocator::template rebind<std::pair<basic_type, basic_type> >::other pair_type_rebind;\n+\ttypedef typename pair_type_rebind::const_reference pair_type_const_reference;\n \n-      private:\n \ttemplate<typename Gen>\n \tstatic value_type\n-        generate_value(Gen& r_gen, size_t max,  __gnu_cxx::typelist::detail::type_to_type<pb_ds::null_mapped_type>)\n-\t{\n-\t  return (basic_type(r_gen, max));\n-\t}\n+        generate_value(Gen& r_gen, size_t max, pb_ds::null_mapped_type)\n+\t{ return basic_type(r_gen, max); }\n \n \ttemplate<typename Gen>\n \tstatic value_type\n-        generate_value(Gen& r_gen, size_t max, __gnu_cxx::typelist::detail::type_to_type<basic_type>)\n-\t{\n-\t  return (basic_type(r_gen, max));\n-\t}\n+        generate_value(Gen& r_gen, size_t max, basic_type)\n+\t{ return basic_type(r_gen, max); }\n \n \ttemplate<typename Gen>\n \tstatic value_type\n-        generate_value(Gen& r_gen, size_t max, __gnu_cxx::typelist::detail::type_to_type<std::pair<const basic_type, basic_type> >)\n-\t{\n-\t  return (std::make_pair(basic_type(r_gen, max), basic_type(r_gen, max)));\n-\t}\n+        generate_value(Gen& gen, size_t max, \n+\t\t       std::pair<const basic_type, basic_type>)\n+\t{ return std::make_pair(basic_type(gen, max), basic_type(gen, max)); }\n \n \tstatic const_key_reference\n         extract_key_imp(basic_type_const_reference r_val)\n-\t{\n-\t  return r_val;\n-\t}\n+\t{ return r_val; }\n \n \tstatic const_key_reference\n-        extract_key_imp(basic_type_pair_const_reference r_val)\n-\t{\n-\t  return r_val.first;\n-\t}\n+        extract_key_imp(pair_type_const_reference r_val)\n+\t{ return r_val.first; }\n       };\n-\n-#undef PB_DS_BASE_C_DEC\n-\n     } // namespace detail\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_REGRESSION_TEST_TYPE_TRAIT_HPP\n+#endif "}, {"sha": "bcb36e71f0f47487cff9b8495b14595e9458886f", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3441f1062c9aefab4a89f3d68a80a55323d9aec8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=3441f1062c9aefab4a89f3d68a80a55323d9aec8", "patch": "@@ -385,7 +385,7 @@ template<bool Thread>\n \n     template<class Container>\n       void\n-      operator()(__gnu_cxx::typelist::detail::type_to_type<Container>)\n+      operator()(Container)\n       {\n \tconst int i = 20000;\n \ttest_container<Container, i, Thread>(_M_filename); "}]}