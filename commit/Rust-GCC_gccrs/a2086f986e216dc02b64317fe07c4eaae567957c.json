{"sha": "a2086f986e216dc02b64317fe07c4eaae567957c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIwODZmOTg2ZTIxNmRjMDJiNjQzMTdmZTA3YzRlYWFlNTY3OTU3Yw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-07-16T10:49:55Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-07-16T12:57:17Z"}, "message": "coroutines: Spelling corrections in comments [NFC].\n\nCorrect some typos.\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc: Correct some spelling errors\n\tin comments.", "tree": {"sha": "d8de3b1d22ab9021010f3741ffc7ea1949e08cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8de3b1d22ab9021010f3741ffc7ea1949e08cc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2086f986e216dc02b64317fe07c4eaae567957c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2086f986e216dc02b64317fe07c4eaae567957c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2086f986e216dc02b64317fe07c4eaae567957c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2086f986e216dc02b64317fe07c4eaae567957c/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53a1cb8e74950a72dbb9eb1d5d57480f885a2276", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53a1cb8e74950a72dbb9eb1d5d57480f885a2276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53a1cb8e74950a72dbb9eb1d5d57480f885a2276"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "d6b584eef587ec4ea8bab255010e7491feef3806", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2086f986e216dc02b64317fe07c4eaae567957c/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2086f986e216dc02b64317fe07c4eaae567957c/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=a2086f986e216dc02b64317fe07c4eaae567957c", "patch": "@@ -110,7 +110,7 @@ struct coroutine_info_hasher : ggc_ptr_hash<coroutine_info>\n \n static GTY (()) hash_table<coroutine_info_hasher> *coroutine_info_table;\n \n-/* We will initialise state lazily.  */\n+/* We will initialize state lazily.  */\n static bool coro_initialized = false;\n \n /* Return a hash value for the entry pointed to by INFO.\n@@ -261,7 +261,7 @@ static GTY(()) tree void_coro_handle_type;\n static tree\n find_coro_traits_template_decl (location_t kw)\n {\n-  /* If we are missing fundmental information, such as the traits, (or the\n+  /* If we are missing fundamental information, such as the traits, (or the\n      declaration found is not a type template), then don't emit an error for\n      every keyword in a TU, just do it once.  */\n   static bool traits_error_emitted = false;\n@@ -1102,7 +1102,7 @@ finish_co_yield_expr (location_t kw, tree expr)\n   return op;\n }\n \n-/* Check and build a co_return statememt.\n+/* Check and build a co_return statement.\n    First that it's valid to have a co_return keyword here.\n    If it is, then check and build the p.return_{void(),value(expr)}.\n    These are built against a proxy for the promise, which will be filled\n@@ -1519,7 +1519,7 @@ struct coro_aw_data\n   unsigned index;  /* This is our current resume index.  */\n };\n \n-/* Lighweight search for the first await expression in tree-walk order.\n+/* Lightweight search for the first await expression in tree-walk order.\n    returns:\n      The first await expression found in STMT.\n      NULL_TREE if there are none.\n@@ -1538,13 +1538,13 @@ co_await_find_in_subtree (tree *stmt, int *do_subtree ATTRIBUTE_UNUSED, void *d)\n   return NULL_TREE;\n }\n \n-/* Starting with a statment:\n+/* Starting with a statement:\n \n    stmt => some tree containing one or more await expressions.\n \n    We replace the statement with:\n    <STATEMENT_LIST> {\n-      initialise awaitable\n+      initialize awaitable\n       if (!ready)\n \t{\n \t  suspension context.\n@@ -1731,7 +1731,7 @@ expand_one_await_expression (tree *stmt, tree *await_expr, void *d)\n \n   *await_expr = resume_call; /* Replace the co_await expr with its result.  */\n   append_to_statement_list_force (saved_statement, &stmt_list);\n-  /* Get a pointer to the revised statment.  */\n+  /* Get a pointer to the revised statement.  */\n   tree *revised = tsi_stmt_ptr (tsi_last (stmt_list));\n   if (needs_dtor)\n     {\n@@ -2161,7 +2161,7 @@ build_actor_fn (location_t loc, tree coro_frame_type, tree actor, tree fnbody,\n \t  bool existed;\n \t  param_info &parm = param_uses->get_or_insert (arg, &existed);\n \t  if (!parm.body_uses)\n-\t    continue; /* Wasn't used in the orignal function body.  */\n+\t    continue; /* Wasn't used in the original function body.  */\n \n \t  tree fld_ref = lookup_member (coro_frame_type, parm.field_id,\n \t\t\t\t\t/*protect=*/1, /*want_type=*/0,\n@@ -3231,7 +3231,7 @@ await_statement_walker (tree *stmt, int *do_subtree, void *d)\n \t       if (cond) then stmt1 else stmt2.  */\n \t    tree if_stmt = *stmt;\n \t    /* We treat the condition as if it was a stand-alone statement,\n-\t       to see if there are any await expressions which will be analysed\n+\t       to see if there are any await expressions which will be analyzed\n \t       and registered.  */\n \t    if ((res = cp_walk_tree (&IF_COND (if_stmt),\n \t\tanalyze_expression_awaits, d, &visited)))\n@@ -3885,7 +3885,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n   (void) coro_make_frame_entry (&field_list, \"__self_h\", handle_type, fn_start);\n \n   /* Now add in fields for function params (if there are any).\n-     We do not attempt elision of copies at this stage, we do analyse the\n+     We do not attempt elision of copies at this stage, we do analyze the\n      uses and build worklists to replace those when the state machine is\n      lowered.  */\n \n@@ -4018,7 +4018,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n   add_decl_expr (coro_fp);\n \n   /* The CO_FRAME internal function is a mechanism to allow the middle end\n-     to adjust the allocation in response to optimisations.  We provide the\n+     to adjust the allocation in response to optimizations.  We provide the\n      current conservative estimate of the frame size (as per the current)\n      computed layout.  */\n   tree frame_size = TYPE_SIZE_UNIT (coro_frame_type);"}]}