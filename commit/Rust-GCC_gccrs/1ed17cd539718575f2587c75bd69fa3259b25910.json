{"sha": "1ed17cd539718575f2587c75bd69fa3259b25910", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVkMTdjZDUzOTcxODU3NWYyNTg3Yzc1YmQ2OWZhMzI1OWIyNTkxMA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2005-05-12T18:31:38Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2005-05-12T18:31:38Z"}, "message": "directives.c (#sccs table entry): Mark IN_I, consistent with #ident.\n\nlibcpp:\n\t* directives.c (#sccs table entry): Mark IN_I, consistent with #ident.\n\t(do_sccs): Delete function definition, #define to do_ident.\n\t(do_ident): Don't hardwire directive name.\ngcc:\n\t* doc/cpp.texi: Document that #sccs is a synonym for #ident.\n\nFrom-SVN: r99623", "tree": {"sha": "9ebe805cfe29bfc038fef679e1dd507371ffc36c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ebe805cfe29bfc038fef679e1dd507371ffc36c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ed17cd539718575f2587c75bd69fa3259b25910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed17cd539718575f2587c75bd69fa3259b25910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ed17cd539718575f2587c75bd69fa3259b25910", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed17cd539718575f2587c75bd69fa3259b25910/comments", "author": null, "committer": null, "parents": [{"sha": "4588b60480b8f66f78a56cb43d6813af76f9a29f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4588b60480b8f66f78a56cb43d6813af76f9a29f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4588b60480b8f66f78a56cb43d6813af76f9a29f"}], "stats": {"total": 259, "additions": 132, "deletions": 127}, "files": [{"sha": "566158517735c2313c317cb2a400d4210d42ee60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 111, "deletions": 107, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed17cd539718575f2587c75bd69fa3259b25910/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed17cd539718575f2587c75bd69fa3259b25910/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ed17cd539718575f2587c75bd69fa3259b25910", "patch": "@@ -1,5 +1,9 @@\n+2005-05-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* doc/cpp.texi: Document that #sccs is a synonym for #ident.\n+\n 2005-05-12  Daniel Berlin  <dberlin@dberlin.org>\n-\t\n+\n \tFix PR tree-optimization/21532\n \t* tree-ssa-pre.c (create_expression_by_pieces): stmt\n \tneeds to go onto the inserted_exprs list.\n@@ -55,7 +59,7 @@\n \t(ia64_cannot_force_const_mem): New.\n \t(tls_symbolic_operand_type): New.\n \t(ia64_legitimate_constant_p): New.\n-\t(ia64_expand_load_address): Return true on success.  Improve \n+\t(ia64_expand_load_address): Return true on success.  Improve\n \tchecks for when we should not split.\n \t(ia64_expand_tls_address): New addend operand.  Distribute it\n \tas appropriate to the tls_kind.  Delay referencing gp.\n@@ -70,7 +74,7 @@\n \tia64_expand_load_address and FAIL or DONE as appropriate.\n \t(load_fptr): Only accept after reload.\n \t(load_fptr_internal1, gprel64_offset, load_gprel64, load_symptr_high,\n-\tload_symptr_low, load_ltoff_dtpmod, \n+\tload_symptr_low, load_ltoff_dtpmod,\n \t(load_dtpmod): New.\n \t(load_dtprel): Only accept tls symbols.\n \t(load_dtprel64, load_dtprel22): Likewise.\n@@ -251,7 +255,7 @@\n \n \t* Makefile.in (gtype-desc.o, build/genautomata.o)\n \t(build/varray.o): Depend on $(VARRAY_H).\n-\t\n+\n 2005-05-10  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-optimize.c (init_tree_optimization_passes): Re-organize\n@@ -324,7 +328,7 @@\n \n \t* config/s390/s390.md: Add comment lines for 'f' and 't' constraint\n \tletters.\n-\t\n+\n 2005-05-10  Adrian Straetling  <straetling@de.ibm.com>\n \n \t* config/s390/s390.md: (\"anddi3\",\"andsi3\",\"andhi3\",\"andqi3\"): Merge.\n@@ -361,7 +365,7 @@\n \tno return value pattern.\n \n 2005-05-10  Grigory Zagorodnev  <grigory.zagorodnev@intel.com>\n-            H.J. Lu  <hongjiu.lu@intel.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* libgcov.c (create_file_directory): New function. Create\n \tdirectory for the given file name.\n@@ -453,7 +457,7 @@\n \t(movdf_insn_v9only_vis): Rename into movdf_insn_sp32_v9.\n \t(movdf_insn_sp64_novis): Delete.\n \t(movdf_insn_sp64_vis): Rename into movdf_insn_sp64.\n-\t(movdf_no_e_insn_sp64): Use register_or_zero_operand. \n+\t(movdf_no_e_insn_sp64): Use register_or_zero_operand.\n \tRename into movdf_insn_sp64_no_fpu.\n \t(movtf expander): Use register_or_zero_operand.\n \t(movtf_insn_sp32): Delete.\n@@ -505,9 +509,9 @@\n \n 2005-05-09  David Edelsohn  <edelsohn@gnu.org>\n \n-        PR target/21477\n-        * config/rs6000/rs6000.md (add_op2): New.\n-        (add<mode>3): Use it.\n+\tPR target/21477\n+\t* config/rs6000/rs6000.md (add_op2): New.\n+\t(add<mode>3): Use it.\n \n 2005-05-09  Richard Earnshaw  <richard.earnshaw@arm.com>\n \n@@ -577,14 +581,14 @@\n \ts390_short_displacement, addr_generation_dependency_p,\n \tlegitimate_reload_constant_p, legitimate_address_p): Change return type\n \tinto 'bool'.\n-\t(s390_tm_ccmode): Change type of parameter \"mixed\" into 'bool'. \n+\t(s390_tm_ccmode): Change type of parameter \"mixed\" into 'bool'.\n \t* config/s390/s390.c: (s390_match_ccmode,\n \tsymbolic_reference_mentioned_p, tls_symbolic_reference_mentioned_p,\n \tlegitimate_reload_constant_p): Change return type into 'bool'.\n \t(preferred_la_operand_p,legitimate_la_operand_p, legitimate_address_p):\n-\tLikewise.  Additionally adapted comment.  \n+\tLikewise.  Additionally adapted comment.\n \t(s390_extra_constraint_p): Change Comment to reflect 'int' return type.\n-\t(s390_tm_ccmode): Change type of parameter \"mixed\" into 'bool'. \n+\t(s390_tm_ccmode): Change type of parameter \"mixed\" into 'bool'.\n \t(s390_decompose_address): Change the type of the internal flags\n \t\"pointer\", \"base_ptr\", \"indx_ptr\", and the return value into 'bool'.\n \t(struct s390_address): Change type of \"pointer\" into bool.\n@@ -621,7 +625,7 @@\n \ts390_add_pool_insn, s390_find_pool, s390_add_constant,\n \ts390_find_constant, s390_add_execute, s390_find_execute,\n \ts390_execute_label, s390_execute_target, s390_dump_pool,\n-\ts390_dump_execute, s390_alloc_pool, s390_free_pool): Remove prototypes. \n+\ts390_dump_execute, s390_alloc_pool, s390_free_pool): Remove prototypes.\n \tMove target macro definitions to the end of the file.  Move several\n \tfunctions within the file to assure correct compiling.\n \n@@ -701,7 +705,7 @@\n \n 2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n \n-\t* config/s390/s390.c: (s390_adjust_priority): Adapt to changed \n+\t* config/s390/s390.c: (s390_adjust_priority): Adapt to changed\n \tattribute names.\n \t* config/s390/2084.md: (\"x_fsimpd\", \"x_fsimps\", \"x_fdivd\", \"x_fdivs\",\n \t\"x_floadd\", \"x_floads\", \"x_fstored\", \"x_fstores\"): Rename to\n@@ -747,7 +751,7 @@\n \n 2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n \n-\t* config/s390/s390.md: (\"DSI\", \"SCOND\"): New mode \n+\t* config/s390/s390.md: (\"DSI\", \"SCOND\"): New mode\n \tmacros.\n \t(\"E\", \"g\"): New mode attributes.\n \t(\"*adddi3_alc_cc\", \"*addsi3_alc_cc\"): Merge.\n@@ -808,7 +812,7 @@\n \t(\"*tsthi\", \"*tstqi\"): Merge.\n \t(\"*tsthi_cconly\", \"tstqi_cconly\"): Merge.\n \t(\"*sethighhisi\", \"*sethighqisi\"): Merge.\n-\t \n+\n 2005-05-09  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* crtstuff.c, integrate.h, tree-scalar-evolution.h,\n@@ -860,7 +864,7 @@\n \n 2005-05-09  David Ung  <davidu@mips.com>\n \n-\t* config/mips/mips.h (processor_type): Add names for the 24K. \n+\t* config/mips/mips.h (processor_type): Add names for the 24K.\n \t* config/mips/mips.c (mips_cpu_info_table): Add names for the 24K\n \tprocessor family.\n \t* config/mips/mips.md (cnv_mode): New attribute for recording the\n@@ -873,7 +877,7 @@\n \t(fix_truncsfsi2_insn, fix_truncsfsi2_macro): Changed mode to SF and\n \tsetup cnv_mode.\n \t* config/mips/24k.md: New file, contains 24k DFA pipeline\n-\tdescription. \n+\tdescription.\n \n 2005-05-09  Nathan Sidwell  <nathan@codesourcery.com>\n \n@@ -1025,7 +1029,7 @@\n \t* libgcov.c: Remove unneeded comment about config.h.\n \t* unwind-dw2-fde-glibc.c: Do not inlude auto-host.h.\n \t* config.in, configure: Regenerated.\n-\t\n+\n 2005-05-08  Nathan Sidwell  <nathan@codesourcery.com>\n \t    Falk Hueffner  <falk@debian.org>\n \n@@ -1300,7 +1304,7 @@\n \t* config/m32r/m32r.h (INITIAL_ELIMINATION_OFFSET): Likewise.\n \t* config/m32r/m32r.md (\t*movsi_insn, *zero_branch_insn,\n \t*rev_zero_branch_insn): Likewise.\n-\t\n+\n 2005-05-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/20961\n@@ -1601,7 +1605,7 @@\n \t* configure.ac: Use AC_C_BIGENDIAN instead of AC_C_BIGENDIAN_CROSS.\n \tUse AC_CHECK_SIZEOF instead of AC_COMPILE_CHECK_SIZEOF.\n \t* configure, config.in: Regenerate.\n-\t\n+\n 2005-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/21265\n@@ -1738,14 +1742,14 @@\n \n 2005-05-03  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* lambda-code.c (gcc_loop_to_lambda_loop, \n+\t* lambda-code.c (gcc_loop_to_lambda_loop,\n \tlambda_loopnest_to_gcc_loopnest, phi_loop_edge_uses_def,\n \tstmt_is_bumper_for_loop, perfect_nest_p, replace_uses_of_x_with_y): Use\n \tgeneric operand interface.\n \t* tree-data-ref.c (find_data_references_in_loop): Use generic interface.\n \t* tree-dfa.c (collect_dfa_stats_r, mark_new_vars_to_rename): Use\n \tgeneric operand interface.\n-\t* tree-flow-inline.h (delink_imm_use, link_imm_use_to_list, \n+\t* tree-flow-inline.h (delink_imm_use, link_imm_use_to_list,\n \tlink_imm_use, link_imm_use_stmt, relink_imm_use, relink_imm_use_stmt,\n \tnext_safe_imm_use, has_zero_uses, has_single_use, single_imm_use,\n \tnum_imm_uses): Use ssa_use_operand_t.\n@@ -1759,12 +1763,12 @@\n \t(op_iter_next_use, op_iter_next_def, op_iter_next_tree, op_iter_init,\n \top_iter_next_tree): Use new operand implementation.\n \t(clear_and_done_ssa_iter): New.  Initialize a blank operand iterator.\n-\t(op_iter_init_use, op_iter_init_def, op_iter_init_tree): Add iterator \n+\t(op_iter_init_use, op_iter_init_def, op_iter_init_tree): Add iterator\n \ttype check.\n-\t(op_iter_next_mustdef, op_iter_next_maydef, \n+\t(op_iter_next_mustdef, op_iter_next_maydef,\n \top_iter_next_must_and_may_def): Delete. Replace with...\n \t(op_iter_next_maymustdef): New.  Combine must and may next operations.\n-\t(op_iter_init_maydef, op_iter_init_mustdef, \n+\t(op_iter_init_maydef, op_iter_init_mustdef,\n \top_iter_init_must_and_may_def): Use new interface.\n \t(single_ssa_tree_operand ): New.  Process single operands only as trees.\n \t(single_ssa_use_operand): New.  Process single operands only as uses.\n@@ -1781,21 +1785,21 @@\n \t(struct stmt_ann_d): Operands field no longer require GTY().\n \t(vn_compute, vn_lookup_or_add, vn_add, vn_lookup): Change prototype.\n \t* tree-into-ssa.c (mark_def_sites): Use SSA_OP_VMUSTKILL.\n-\t* tree-outof-ssa.c (check_replaceable, find_replaceable_in_bb, \n+\t* tree-outof-ssa.c (check_replaceable, find_replaceable_in_bb,\n \tdump_replaceable_exprs, rewrite_trees): Use generic interface.\n-\t* tree-phinodes.c (make_phi_node, release_phi_node, resize_phi_node): \n+\t* tree-phinodes.c (make_phi_node, release_phi_node, resize_phi_node):\n \tUse use_operand_p instead of ssa_imm_use_t *.\n \t* tree-pretty-print.c (dump_vops): check if operands are active before\n \tdumping virtual operands.\n \t* tree-sra.c (sra_walk_function): Use ZERO_SSA_OPERANDS.\n \t* tree-ssa-ccp.c (likely_value): Use ZERO_SSA_OPERANDS.\n \t(ccp_fold): Use new interface.\n \t(ccp_visit_stmt): Remove unused variables and code.\n-\t(convert_to_gimple_builtin): Insert statements before calling \n+\t(convert_to_gimple_builtin): Insert statements before calling\n \tmark_new_vars_to_rename.\n \t* tree-ssa-copy.c (stmt_may_generate_copy): Use ZERO_SSA_OPERANDS.\n \t(copy_prop_visit_cond_stmt): Use generic interface.\n-\t* tree-ssa-dom.c (struct expr_hash_elt): Use stmt pointer, not the \n+\t* tree-ssa-dom.c (struct expr_hash_elt): Use stmt pointer, not the\n \tannotation in table.\n \t(thread_across_edge): Use generic interface.\n \t(initialize_hash_element): Initialzie with stmt, not annotation.\n@@ -1804,21 +1808,21 @@\n \t(avail_expr_hash, real_avail_expr_hash, avail_expr_eq): Use generic\n \tinterface.\n \t* tree-ssa-dse.c (dse_optimize_stmt): Use ZERO_SSA_OPERANDS.\n-\t* tree-ssa-loop-ivopts.c (find_invariants_stmt, \n-\tfind_interesting_uses_stmt, protect_loop_closed_ssa_form_use): Use \n+\t* tree-ssa-loop-ivopts.c (find_invariants_stmt,\n+\tfind_interesting_uses_stmt, protect_loop_closed_ssa_form_use): Use\n \tgeneric operand interface.\n \t* tree-ssa-loop-niter.c (chain_of_csts_start, get_val_for): Use generic\n \tinterface.\n \t* tree-ssa-loop-unswitch.c (tree_may_unswitch_on): Use Generic operand\n \tInterface.\n \t* tree-ssa-operands.c (struct opbuild_list_d): New.  Operand build type.\n-\t(build_defs, build_uses, build_v_may_defs, build_vuses, \n+\t(build_defs, build_uses, build_v_may_defs, build_vuses,\n \tbuild_v_must_defs): Change type to struct opbuild_list_d.\n \t(ops_active): New.  Operands active boolean.\n \t(operand_memory, operand_memory_index): New.  Operand memory managers.\n \t(allocate_def_optype, allocate_use_optype, allocate_v_may_def_optype,\n \tallocate_vuse_optype, allocate_v_must_def_optype): Delete.\n-\t(free_uses, free_defs, free_vuses, free_v_may_defs, free_v_must_defs): \n+\t(free_uses, free_defs, free_vuses, free_v_may_defs, free_v_must_defs):\n \tChange from functions to static variable list heads.\n \t(opbuild_initialize_virtual): New.  Initialize a virtual build list.\n \t(opbuild_initialize_real): New.  Initialize a virtual build list.\n@@ -1838,13 +1842,13 @@\n \t(ssa_operand_alloc): New.  Allocate memory from an operand chunk.\n \t(correct_use_link): Use use_operand_p.\n \t(finalize_ssa_uses, finalize_ssa_v_may_defs, finalize_ssa_defs,\n-\tfinalize_ssa_vuses, finalize_ssa_v_must_defs): New implmentation. \n+\tfinalize_ssa_vuses, finalize_ssa_v_must_defs): New implmentation.\n \t(cleanup_v_may_defs): Use new implmentation.\n-\t(finalize_ssa_stmt_operands, start_ssa_stmt_operands): New \n+\t(finalize_ssa_stmt_operands, start_ssa_stmt_operands): New\n \timplementation.\n-\t(append_def, append_use, append_v_may_def, append_vuse, \n+\t(append_def, append_use, append_v_may_def, append_vuse,\n \tappend_v_must_def): Call opbuild_append routine instead of using varray.\n-\t(build_ssa_operands): Simplify to simply use stmt, don't maintain a \n+\t(build_ssa_operands): Simplify to simply use stmt, don't maintain a\n \tglobal parse_old_ops variable.\n \t(free_ssa_operands): New implementation.\n \t(update_stmt_operands): Move.  Change argument to build_ssa_operands.\n@@ -1855,7 +1859,7 @@\n \t(add_call_clobber_ops, add_call_read_ops): Initialize opbuild list\n \trather than a varray.\n \t(verify_imm_links): Use use_operand_p.\n-\t(dump_immediate_uses_for): If the immediate use variable is a virtual \n+\t(dump_immediate_uses_for): If the immediate use variable is a virtual\n \tvariable, show the virtual ops in the stmt.\n \t* tree-ssa-operands.h (def_operand_p): No longer a structure.\n \t(NULL_DEF_OPERAND_P): Now a #define.\n@@ -1869,11 +1873,11 @@\n \t(STMT_USE_OPS, NUM_USES, SET_USE_OP, STMT_DEF_OPS, NUM_DEFS, SET_DEF_OP,\n \tSTMT_V_MAY_DEF_OPS, NUM_V_MAY_DEFS, SET_V_MAY_DEF_RESULT,\n \tSET_V_MAY_DEF_OP, STMT_VUSE_OPS, NUM_VUSES, SET_VUSE_OP,\n-\tSTMT_V_MUST_DEF_OPS, NUM_V_MUST_DEFS, SET_V_MUST_DEF_RESULT, \n+\tSTMT_V_MUST_DEF_OPS, NUM_V_MUST_DEFS, SET_V_MUST_DEF_RESULT,\n \tSET_V_MUST_DEF_KILL): Delete.\n-\t(V_MAY_DEF_OPS, V_MAY_DEF_RESULT_PTR, V_MAY_DEF_RESULT, \n+\t(V_MAY_DEF_OPS, V_MAY_DEF_RESULT_PTR, V_MAY_DEF_RESULT,\n \tV_MAY_DEF_OP_PTR, V_MAY_DEF_OP): Rename to MAYDEF_*.\n-\t(V_MUST_DEF_OPS, V_MUST_DEF_RESULT_PTR, V_MUST_DEF_RESULT, \n+\t(V_MUST_DEF_OPS, V_MUST_DEF_RESULT_PTR, V_MUST_DEF_RESULT,\n \tV_MUST_DEF_KILL_PTR, V_MUST_DEF_KILL): Rename to MUSTDEF_*.\n \t(enum ssa_op_iter_type): Operand iterator typechecking values.\n \t(struct ssa_operand_iterator_d): Use linked lists of operands.\n@@ -1883,20 +1887,20 @@\n \t(FOR_EACH_PHI_ARG): New.  Iterate over PHI arguments.\n \t(FOR_EACH_PHI_OR_STMT_USE): New.  Iterate over PHI or stmt uses.\n \t(FOR_EACH_PHI_OR_STMT_DEF): New.  Iterate over PHI or stmt defs.\n-\t(SINGLE_SSA_TREE_OPERAND, SINGLE_SSA_USE_OPERAND, \n+\t(SINGLE_SSA_TREE_OPERAND, SINGLE_SSA_USE_OPERAND,\n \tSINGLE_SSA_DEF_OPERAND, ZERO_SSA_OPERANDS, NUM_SSA_OPERANDS): New.\n \t* tree-ssa-opfinalize.h: New.  Function templates for expansion.\n \t(FINALIZE_ALLOC): Expands into alloc_def, alloc_use, alloc_maydef,\n \talloc_vuse, and alloc_mustdef.\n-\t(FINALIZE_FUNC): Expands into finalize_ssa_def_ops, \n+\t(FINALIZE_FUNC): Expands into finalize_ssa_def_ops,\n \tfinalize_ssa_use_ops, finalize_ssa_v_may_def_ops, finalize_ssa_vuse_ops,\n \tand finalize_ssa_v_must_def_ops.\n \t* tree-ssa-pre.c (add_to_sets): Pass tree to vn_add.\n \t(create_value_expr_from): Use stmt not vuse_optype as a parameter. Pass\n \tstmt around.\n \t(compute_avail): Use generic iterator interface.\n \t* tree-ssa-propagate.c (first_vdef): Use generic operand interface.\n-\t(stmt_makes_single_load, stmt_makes_single_store): Use \n+\t(stmt_makes_single_load, stmt_makes_single_store): Use\n \tZERO_SSA_OPERANDS.\n \t* tree-ssa-sink.c (is_hidden_global_store): Use ZERO_SSA_OPERANDS.\n \t(statement_sink_location): Use generic interface.\n@@ -1908,14 +1912,14 @@\n \t* tree-tailcall.c (find_tail_calls): Use ZERO_SSA_OPERANDS.\n \t(eliminate_tail_call): Use generic operand interface.\n \t* tree-vect-analyze.c (vect_analyze_data_refs): Use ZERO_SSA_OPERANDS.\n-\t(vect_mark_relevant, vect_mark_stmts_to_be_vectorized): Use generic \n+\t(vect_mark_relevant, vect_mark_stmts_to_be_vectorized): Use generic\n \tinterface.\n-\t* tree-vect-transform.c (update_vuses_to_preheader): Use generic \n+\t* tree-vect-transform.c (update_vuses_to_preheader): Use generic\n \tinterface.\n \t* tree-vectorizer.c (rename_variables_in_bb): Use generic interface.\n \t* tree-vn.c (struct val_expr_pair_d): Cache statment pointer instead of\n \tvuse_optype.\n-\t(vn_compute, val_expr_pair_hash, vn_add, vn_lookup, vn_lookup_or_add): \n+\t(vn_compute, val_expr_pair_hash, vn_add, vn_lookup, vn_lookup_or_add):\n \tUse statement pointer instead of vuse_optype.  Use generic interface.\n \t* tree-vrp.c (maybe_add_assert_expr): Use generic interface.\n \t(stmt_interesting_for_vrp, vrp_visit_stmt): Use ZERO_SSA_OPERANDS.\n@@ -2046,38 +2050,38 @@\n \n 2005-05-02  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * c-common.c (resolve_overloaded_builtin): Forward to target\n-        hook for BUILT_IN_MD built-ins.\n-        * c-typeck.c (finish_call_expr): Call resolve_overloaded_builtin\n-        for all types of built-in.\n-        * target-def.h (TARGET_RESOLVE_OVERLOADED_BUILTIN): New.  Use it\n-        in the definition of the target hooks struct.\n-        * target.h (struct gcc_target): Add resolve_overloaded_builtin.\n-        * config/rs6000/altivec.h: Rewritten.\n-        * config/rs6000/rs6000-c.c (struct altivec_builtin_types,\n-        altivec_resolve_overloaded_builtin, altivec_build_resolved_builtin,\n-        rs6000_builtin_type, rs6000_builtin_type_compatible,\n-        altivec_overloaded_builtins, rs6000_builtin_type,\n-        rs6000_builtin_type_compatible): New.\n-        * config/rs6000/rs6000.c (rs6000_builtin_types, rs6000_builtin_decls):\n-        New.\n-        (def_builtin): Turn into a function.  Check for duplicates and store\n-        the builtin into rs6000_builtin_decls.\n-        (bdesc_3arg, bdesc_dst, bdesc_altivec_preds, bdesc_2arg,\n-        bdesc_1arg): Add overloaded builtins.\n-        (altivec_expand_builtin): Check for unresolved overloaded builtins,\n-        do not support ALTIVEC_COMPILETIME_ERROR.\n-        (rs6000_init_builtins): Add opaque 128-bit vector, and internal\n-        nodes to represent front-end types.\n-        (altivec_init_builtins, rs6000_common_init_builtins): Create builtins\n-        with opaque arguments and/or return values.\n-        * config/rs6000/rs6000.h (enum rs6000_builtins): Remove\n-        ALTIVEC_COMPILETIME_ERROR and add Altivec overloaded builtins.\n-        (rs6000_builtin_type_index): New.\n-        (is_ev64_opaque_type): Rename to...\n-        (rs6000_is_opaque_type): ... this.\n-        (rs6000_cpu_cpp_builtins): Install the resolve_overloaded_builtin\n-        target hook.\n+\t* c-common.c (resolve_overloaded_builtin): Forward to target\n+\thook for BUILT_IN_MD built-ins.\n+\t* c-typeck.c (finish_call_expr): Call resolve_overloaded_builtin\n+\tfor all types of built-in.\n+\t* target-def.h (TARGET_RESOLVE_OVERLOADED_BUILTIN): New.  Use it\n+\tin the definition of the target hooks struct.\n+\t* target.h (struct gcc_target): Add resolve_overloaded_builtin.\n+\t* config/rs6000/altivec.h: Rewritten.\n+\t* config/rs6000/rs6000-c.c (struct altivec_builtin_types,\n+\taltivec_resolve_overloaded_builtin, altivec_build_resolved_builtin,\n+\trs6000_builtin_type, rs6000_builtin_type_compatible,\n+\taltivec_overloaded_builtins, rs6000_builtin_type,\n+\trs6000_builtin_type_compatible): New.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_types, rs6000_builtin_decls):\n+\tNew.\n+\t(def_builtin): Turn into a function.  Check for duplicates and store\n+\tthe builtin into rs6000_builtin_decls.\n+\t(bdesc_3arg, bdesc_dst, bdesc_altivec_preds, bdesc_2arg,\n+\tbdesc_1arg): Add overloaded builtins.\n+\t(altivec_expand_builtin): Check for unresolved overloaded builtins,\n+\tdo not support ALTIVEC_COMPILETIME_ERROR.\n+\t(rs6000_init_builtins): Add opaque 128-bit vector, and internal\n+\tnodes to represent front-end types.\n+\t(altivec_init_builtins, rs6000_common_init_builtins): Create builtins\n+\twith opaque arguments and/or return values.\n+\t* config/rs6000/rs6000.h (enum rs6000_builtins): Remove\n+\tALTIVEC_COMPILETIME_ERROR and add Altivec overloaded builtins.\n+\t(rs6000_builtin_type_index): New.\n+\t(is_ev64_opaque_type): Rename to...\n+\t(rs6000_is_opaque_type): ... this.\n+\t(rs6000_cpu_cpp_builtins): Install the resolve_overloaded_builtin\n+\ttarget hook.\n \n 2005-05-02  Kazu Hirata  <kazu@cs.umass.edu>\n \n@@ -2298,7 +2302,7 @@\n \tPR tree-optimization/21272\n \tPR tree-optimization/21266\n \t* tree-if-conv.c (find_phi_replacement_condition): Fix think-o.\n-\t\n+\n 2005-04-29  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-flow-inline.h: Fix a comment typo.\n@@ -2351,7 +2355,7 @@\n \t* config/arm/elf.h (TARGET_ASM_CONSTRUCTOR): Define.\n \t(SUPPORTS_INIT_PRIORITY): Evaluate to false for EABI based targets.\n \t* doc/tm.texi (INIT_ARRAY_SECTION_ASM_OP): Document.\n-\t(FINI_ARRAY_SECTION_ASM_OP): Likewise.  \n+\t(FINI_ARRAY_SECTION_ASM_OP): Likewise.\n \n 2005-04-29  Nathan Sidwell  <nathan@codesourcery.com>\n \n@@ -2399,7 +2403,7 @@\n \t* dbxout.c (have_used_extensions): Remove.\n \t(dbxout_type_fileds, dbxout_type, dbxout_symbol): Remove use of\n \thave_used_extensions.\n-\t\n+\n 2005-04-28  James E Wilson  <wilson@specifixinc.com>\n \n \t* doc/install.texi: Update -enable-languages info.  Correct path to\n@@ -2524,7 +2528,7 @@\n \n 2005-04-27  Caroline Tice  <ctice@apple.com>\n \n-        * bb-reorder.c (find_rarely_executed_basic_blocks_and_crossing_edges):\n+\t* bb-reorder.c (find_rarely_executed_basic_blocks_and_crossing_edges):\n \tRemove targetm.have_named_sections test.\n \t(fix_edges_for_rarely_executed_code): Likewise.\n \t(insert_section_boundary_note): Likewise.\n@@ -2590,7 +2594,7 @@\n \t(default_section_type_flags_1):  Get cold text section name from\n \tfunction struct if there is one; Set flags correctly for\n \tcold text section if there is not a current function struct.\n-\t\n+\n 2005-04-27  Richard Guenther  <rguenth@gcc.gnu.org>\n \n \t* tree-ssa-propagate.c (set_rhs): Revert last change.\n@@ -2644,7 +2648,7 @@\n \t* rtl.h (optimize_save_area_alloca): Likewise...\n \t* passes.c (rest_of_compilation): and don't call it any more.\n \t* reg-notes.def (SAVE_AREA): Delete.\n-\t\n+\n 2005-04-27  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/fp-bit.c (abort): Add noreturn attribute.\n@@ -2724,7 +2728,7 @@\n \t* dbxout.c (dbxout_type): Check use_gnu_debug_info_extensions.\n \n 2005-04-27  Matt Thomas <matt@3am-software.com>\n-            Jan-Benedict Glaw <jbglaw@microdata-pos.de>\n+\t    Jan-Benedict Glaw <jbglaw@microdata-pos.de>\n \n \t* config/vax/vax.c (vax_rtx_costs): Whitespace cleanup.\n \t(vax_output_mi_thunk): Ditto.\n@@ -2811,7 +2815,7 @@\n \n \t* config/vax/vax.c (legitimate_constant_address_p): New.  Formerly\n \tCONSTANT_ADDRESS_P in config/vax/vax.h\n-\t(legitimate_constant_p): Added.  Formerly CONSTANT_P in vax.h. \n+\t(legitimate_constant_p): Added.  Formerly CONSTANT_P in vax.h.\n \t(INDEX_REGISTER_P): New.\n \t(BASE_REGISTER_P): New.\n \t(indirectable_constant_address_p): New.  Adapted from\n@@ -2971,7 +2975,7 @@\n 2005-04-25  Devang Patel <dpatel@apple.com>\n \n \t* dbxout.c (dbxout_type): Emit attribute vector.\n-\t\n+\n 2005-04-05  Paul Brook  <paul@codesourcery.com>\n \n \t* target-def.h (TARGET_CXX_USE_AEABI_ATEXIT): Define.\n@@ -3061,7 +3065,7 @@\n 2005-04-24  Devang Patel  <dpatel@apple.com>\n \n \t*  config/rs6000/darwin.h (ASM_OUTPUT_MAX_SKIP_ALIGN): New.\n-\t\n+\n 2005-04-24  Ian Lance Taylor  <ian@airs.com>\n \n \t* c-semantics.c (build_stmt): Remove test of specific tree codes\n@@ -3249,7 +3253,7 @@\n \tconfig/stormy16/stormy16.c, config/v850/v850-c.c,\n \tconfig/v850/v850.c, config/xtensa/xtensa.c: Adjust warning()\n \tcallers.\n-\t\n+\n 2005-04-23  Richard Henderson  <rth@redhat.com>\n \n \tPR rtl-opt/21102\n@@ -3597,7 +3601,7 @@\n \n \t* builtins.c (gimplify_va_arg_expr): Reword comments to avoid\n \t'abort'. Use gcc_assert and gcc_unreachable as appropriate.\n-\t* c-format.c (get_constant, decode_format_attr, get_flag_spec, \n+\t* c-format.c (get_constant, decode_format_attr, get_flag_spec,\n \tfind_char_info_specifier_index,\n \tfind_length_info_modifier_index): Likewise.\n \t* c-typeck.c (composite_type, pop_init_level): Likewise.\n@@ -3616,7 +3620,7 @@\n \tfinal.c (this_is_asm_operands, shorten_branches, final_scan_insn,\n \toutput_operand): Likewise\n \tflow.c (recompute_reg_usage): Likewise\n-\t* function.c (assign_stack_temp_for_type, assign_temp, \n+\t* function.c (assign_stack_temp_for_type, assign_temp,\n \thandle_epilogue_set): Likewise\n \t* genextract.c (main): Likewise\n \t* gimplify.c (mostly_copy_tree_r, gimplify_return_expr,\n@@ -3643,7 +3647,7 @@\n \tvectors.\n \t(gcc_loop_to_lambda_loop, gcc_loopnest_to_lambda_loopnest,\n \tlbv_to_gcc_expression, lle_to_gcc_expression,\n-\tlambda_loopnest_to_gcc_loopnest, can_convert_to_perfect_nest, \n+\tlambda_loopnest_to_gcc_loopnest, can_convert_to_perfect_nest,\n \tperfect_nestify): Likewise.\n \tlambda.h (gcc_loopnest_to_lambda_loopnest,\n \tlambda_loopnest_to_gcc_loopnest): Likewise.\n@@ -3757,7 +3761,7 @@\n \tcgraph_mark_inline_edge, cgraph_default_inline_p): Declare.\n \t* cgraphunit.c (cgraph_default_inline_p,\n \tcgraph_decide_inlining_incrementally,  ncalls_inlined,\n-\tnfunctions_inlined, initial_insns, overall_insns, \n+\tnfunctions_inlined, initial_insns, overall_insns,\n \tcgraph_estimate_size_after_inlining, cgraph_estimate_growth,\n \tcgraph_clone_inlined_nodes, cgraph_mark_inline_edge,\n \tcgraph_mark_inline, cgraph_check_inline_limits,\n@@ -3825,7 +3829,7 @@\n \t* tree.h: Likewise.\n \t* vec.h: Likewise.\n \t* tree-flow-inline.h (relink_imm_use): Use gcc_assert.\n-\t\n+\n \t* optabs.c (prepare_cmp_insn, emit_cmp_and_jump_insns): Reword\n \tcomments to avoid 'abort'.  Use gcc_assert as necessary.\n \t* opts.c (common_handle_option): Likewise.\n@@ -3835,7 +3839,7 @@\n \t* regmove.c (try_auto_increment): Likewise.\n \t* reload.c (find_valid_class, find_reloads_toplev,\n \tfind_equiv_reg): Likewise.\n-\t* reload1.c (reload, forget_old_reloads_1, function_invariant_p, \n+\t* reload1.c (reload, forget_old_reloads_1, function_invariant_p,\n \tmerge_assigned_reloads): Likewise.\n \t* tree-inline.c (inline_forbidden_p_1,\n \testimate_num_insns_1): Likewise.\n@@ -3847,7 +3851,7 @@\n \tget_indirect_ref_operands, create_ssa_artficial_load_stmt): Likewise.\n \t* tree-ssa-pre.c (find_or_generate_expression): Likewise.\n \t* tree-ssanames.c (release_ssa_name): Likewise.\n-\t* tree.c (int_bit_position, int_byte_position, tree_low_cst, \n+\t* tree.c (int_bit_position, int_byte_position, tree_low_cst,\n \twalk_tree): Likewise.\n \n \t* tree-ssa-operands.c (verify_abort): Fold into ..\n@@ -3864,7 +3868,7 @@\n \t* tree-if-conv.c (find_phi_replacement_condition): Avoid generating\n \tx = !(a == b) : p , q;.\n \t(pass_if_conversion): Verify stmts and flow.\n-\t\n+\n 2005-04-21  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* optabs.c (gen_conditional_trap): Restore #define.\n@@ -4003,7 +4007,7 @@\n \t(push_macro_expansion):  Chain on new macro. Process multiple\n \targs, create follow on expansion. Return follow on argument.\n \t(macro_input): Deal with multiple arguments.\n-\t\n+\n \t* tree.h: Define VEC(tree,heap) and VEC(tree,gc).\n \t(struct tree_binfo): Adjust.\n \t* basic-block.h: Define VEC(edge,gc).\n@@ -4054,11 +4058,11 @@\n \tlookup_avail_expr, record_range): Likewise.\n \t* tree-ssa-pre.c: Define VEC(basic_block,heap).\n \t(compute_antic_aux): Adjust.\n-\t(inserted_exprs, create_expression_by_pieces, \n-\tinsert_into_preds_of_block, eliminate, mark_operand_necessary, \n+\t(inserted_exprs, create_expression_by_pieces,\n+\tinsert_into_preds_of_block, eliminate, mark_operand_necessary,\n \tremove_dead_inserted_code, fini_pre): Likewise.\n \t* tree-ssa-propagate.c (interesting_ssa_edges): Adjust.\n-\t(varying_ssa_edges, add_ssa_edge, process_ssa_edge_worklist. \n+\t(varying_ssa_edges, add_ssa_edge, process_ssa_edge_worklist.\n \tssa_prop_init): Likewise.\n \t* tree-ssa.c: Define VEC(bitmap,heap).\n \t(verify_name_tags): Adjust.\n@@ -4070,7 +4074,7 @@\n \t* varasm.c: Remove alias_pair pointer typedef, define\n \tVEC(alias_pair,gc).\n \t(finish_aliases_1, finish_aliases_2, assemble_alias): Adjust.\n-\t\n+\n \t* config/pa/pa.c (typedef extern_symbol): Typedef the structure,\n \tnot a pointer to it.  Create an object vector.\n \t(extern_symbols): Turn into an object vector.\n@@ -4408,7 +4412,7 @@\n \n 2005-04-19  Paul Brook  <paul@codesourcery.com>\n \n-\t* config/arm/arm.c (arm_init_libfuncs): Clear mod optabs. \n+\t* config/arm/arm.c (arm_init_libfuncs): Clear mod optabs.\n \n 2005-04-19  Andrew Haley  <aph@redhat.com>\n \n@@ -4498,7 +4502,7 @@\n 2005-04-18  Devang Patel  <dpatel@apple.com>\n \n \t* config/rs6000/atlivec.md (mulv4si3): New pattern.\n-\t\n+\n 2005-04-18  James A. Morrison  <phython@gcc.gnu.org>\n \n \tPR tree-optimization/20922"}, {"sha": "e9c64078e1ad1b030937abfaa882dfd4e18c1ea9", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed17cd539718575f2587c75bd69fa3259b25910/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed17cd539718575f2587c75bd69fa3259b25910/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=1ed17cd539718575f2587c75bd69fa3259b25910", "patch": "@@ -3372,18 +3372,15 @@ current file to be treated as if it came from a system header.\n @chapter Other Directives\n \n @findex #ident\n+@findex #sccs\n The @samp{#ident} directive takes one argument, a string constant.  On\n some systems, that string constant is copied into a special segment of\n-the object file.  On other systems, the directive is ignored.\n-\n-This directive is not part of the C standard, but it is not an official\n-GNU extension either.  We believe it came from System V@.\n+the object file.  On other systems, the directive is ignored.  The\n+@samp{#sccs} directive is a synonym for @samp{#ident}.\n \n-@findex #sccs\n-The @samp{#sccs} directive is recognized, because it appears in the\n-header files of some systems.  It is a very old, obscure, extension\n-which we did not invent, and we have been unable to find any\n-documentation of what it should do, so GCC simply ignores it.\n+These directives are not part of the C standard, but they are not\n+official GNU extensions either.  What historical information we have\n+been able to find, suggests they originated with System V@.\n \n @cindex null directive\n The @dfn{null directive} consists of a @samp{#} followed by a newline,"}, {"sha": "c13a0679b3b3a2982ba79660910534ba80ce26ab", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed17cd539718575f2587c75bd69fa3259b25910/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed17cd539718575f2587c75bd69fa3259b25910/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=1ed17cd539718575f2587c75bd69fa3259b25910", "patch": "@@ -1,3 +1,9 @@\n+2005-05-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* directives.c (#sccs table entry): Mark IN_I, consistent with #ident.\n+\t(do_sccs): Delete function definition, #define to do_ident.\n+\t(do_ident): Don't hardwire directive name.\n+\n 2005-05-12  Ryota Kunisawa  <kunisawa@access.co.jp>\n \n \tPR bootstrap/21230\n@@ -26,7 +32,7 @@\n \tfflush, fgetc, fgets, ferror, fread): Redefine to the associated\n \t_unlocked function.\n \t(fwrite_unlocked): Fix prototype.\n-\t\n+\n \t* configure, config.in: Regenerate.\n \n 2005-04-05  Jakub Jelinek  <jakub@redhat.com>\n@@ -58,7 +64,7 @@\n \t* lex.c (forms_identifier_p): Disable UCNs in C89 mode.\n \n 2005-03-14  Geoffrey Keating  <geoffk@apple.com>\n-\t\n+\n \t* init.c (cpp_create_reader): Default warn_normalize to normalized_C.\n \t* charset.c: Update for new format of ucnid.h.\n \t(ucn_valid_in_identifier): Update for new format of ucnid.h.\n@@ -119,7 +125,7 @@\n \n \t* directives.c (do_line): Save sysp early before line table is\n \trealloc'ed.\n-\t\n+\n 2005-02-20  Zack Weinberg  <zack@codesourcery.com>\n \n \tPR 18785"}, {"sha": "672415b8d61968dbba43577808e766b644b9f79a", "filename": "libcpp/directives.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed17cd539718575f2587c75bd69fa3259b25910/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed17cd539718575f2587c75bd69fa3259b25910/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=1ed17cd539718575f2587c75bd69fa3259b25910", "patch": "@@ -157,7 +157,10 @@ D(ident,\tT_IDENT,\tEXTENSION, IN_I)\t   /*     11 */ \\\n D(import,\tT_IMPORT,\tEXTENSION, INCL | EXPAND)  /* 0 ObjC */\t\\\n D(assert,\tT_ASSERT,\tEXTENSION, 0)\t\t   /* 0 SVR4 */\t\\\n D(unassert,\tT_UNASSERT,\tEXTENSION, 0)\t\t   /* 0 SVR4 */\t\\\n-D(sccs,\t\tT_SCCS,\t\tEXTENSION, 0)\t\t   /* 0 SVR4? */\n+D(sccs,\t\tT_SCCS,\t\tEXTENSION, IN_I)\t   /* 0 SVR4? */\n+\n+/* #sccs is synonymous with #ident.  */\n+#define do_sccs do_ident\n \n /* Use the table to generate a series of prototypes, an enum for the\n    directive names, and an array of directive handlers.  */\n@@ -953,7 +956,8 @@ do_ident (cpp_reader *pfile)\n   const cpp_token *str = cpp_get_token (pfile);\n \n   if (str->type != CPP_STRING)\n-    cpp_error (pfile, CPP_DL_ERROR, \"invalid #ident directive\");\n+    cpp_error (pfile, CPP_DL_ERROR, \"invalid #%s directive\",\n+\t       pfile->directive->name);\n   else if (pfile->cb.ident)\n     pfile->cb.ident (pfile, pfile->directive_line, &str->val.str);\n \n@@ -1474,12 +1478,6 @@ cpp_handle_deferred_pragma (cpp_reader *pfile, const cpp_string *s)\n   CPP_OPTION (pfile, defer_pragmas) = saved_defer_pragmas;\n }\n \n-/* Ignore #sccs on all systems.  */\n-static void\n-do_sccs (cpp_reader *pfile ATTRIBUTE_UNUSED)\n-{\n-}\n-\n /* Handle #ifdef.  */\n static void\n do_ifdef (cpp_reader *pfile)"}]}