{"sha": "13de7ec4a54cf53805b2d45f8efef170cb8cfab7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNkZTdlYzRhNTRjZjUzODA1YjJkNDVmOGVmZWYxNzBjYjhjZmFiNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-06-15T14:03:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-06-15T14:03:09Z"}, "message": "class.c (dfs_accumulate_vtbl_inits): Just point to the base we're sharing a ctor vtable with.\n\n\t* class.c (dfs_accumulate_vtbl_inits): Just point to the base we're\n\tsharing a ctor vtable with.  Merge code for cases 1 and 2.\n\t(binfo_ctor_vtable): New fn.\n\t(build_vtt_inits, dfs_build_secondary_vptr_vtt_inits): Use it.\n\nFrom-SVN: r43399", "tree": {"sha": "3e1a41b0ce734321305faf1fb5a7c8cadd47a602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e1a41b0ce734321305faf1fb5a7c8cadd47a602"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13de7ec4a54cf53805b2d45f8efef170cb8cfab7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13de7ec4a54cf53805b2d45f8efef170cb8cfab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13de7ec4a54cf53805b2d45f8efef170cb8cfab7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13de7ec4a54cf53805b2d45f8efef170cb8cfab7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a8bb5cfe688fabfd8b957e355b563cfd2e84f5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a8bb5cfe688fabfd8b957e355b563cfd2e84f5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a8bb5cfe688fabfd8b957e355b563cfd2e84f5c"}], "stats": {"total": 214, "additions": 79, "deletions": 135}, "files": [{"sha": "342949eb00e552de77253e405b058ca33223205c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13de7ec4a54cf53805b2d45f8efef170cb8cfab7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13de7ec4a54cf53805b2d45f8efef170cb8cfab7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=13de7ec4a54cf53805b2d45f8efef170cb8cfab7", "patch": "@@ -1,3 +1,10 @@\n+2001-06-15  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* class.c (dfs_accumulate_vtbl_inits): Just point to the base we're\n+\tsharing a ctor vtable with.  Merge code for cases 1 and 2.\n+\t(binfo_ctor_vtable): New fn.\n+\t(build_vtt_inits, dfs_build_secondary_vptr_vtt_inits): Use it.\n+\n 2001-06-14  Jason Merrill  <jason_merrill@redhat.com>\n \n \t* class.c (dfs_find_final_overrider): Fix logic."}, {"sha": "dc2b8d2d05ee8a05eea9de7aaa779b7c598f6fba", "filename": "gcc/cp/class.c", "status": "modified", "additions": 72, "deletions": 135, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13de7ec4a54cf53805b2d45f8efef170cb8cfab7/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13de7ec4a54cf53805b2d45f8efef170cb8cfab7/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=13de7ec4a54cf53805b2d45f8efef170cb8cfab7", "patch": "@@ -7252,6 +7252,31 @@ get_original_base (base_binfo, binfo)\n   return NULL;\n }\n \n+/* When building a secondary VTT, BINFO_VTABLE is set to a TREE_LIST with\n+   PURPOSE the RTTI_BINFO, VALUE the real vtable pointer for this binfo,\n+   and CHAIN the vtable pointer for this binfo after construction is\n+   complete.  VALUE can also be another BINFO, in which case we recurse. */\n+\n+static tree\n+binfo_ctor_vtable (binfo)\n+     tree binfo;\n+{\n+  tree vt;\n+\n+  while (1)\n+    {\n+      vt = BINFO_VTABLE (binfo);\n+      if (TREE_CODE (vt) == TREE_LIST)\n+\tvt = TREE_VALUE (vt);\n+      if (TREE_CODE (vt) == TREE_VEC)\n+\tbinfo = vt;\n+      else\n+\tbreak;\n+    }\n+\n+  return vt;\n+}\n+\n /* Recursively build the VTT-initializer for BINFO (which is in the\n    hierarchy dominated by T).  INITS points to the end of the initializer\n    list to date.  INDEX is the VTT index where the next element will be\n@@ -7288,9 +7313,7 @@ build_vtt_inits (binfo, t, inits, index)\n     }\n \n   /* Add the address of the primary vtable for the complete object.  */\n-  init = BINFO_VTABLE (binfo);\n-  if (TREE_CODE (init) == TREE_LIST)\n-    init = TREE_VALUE (init);\n+  init = binfo_ctor_vtable (binfo);\n   *inits = build_tree_list (NULL_TREE, init);\n   inits = &TREE_CHAIN (*inits);\n   if (top_level_p)\n@@ -7427,9 +7450,7 @@ dfs_build_secondary_vptr_vtt_inits (binfo, data)\n       while (BINFO_PRIMARY_BASE_OF (binfo))\n         binfo = BINFO_PRIMARY_BASE_OF (binfo);\n     }\n-  init = BINFO_VTABLE (binfo);\n-  if (TREE_CODE (init) == TREE_LIST)\n-    init = TREE_VALUE (init);\n+  init = binfo_ctor_vtable (binfo);\n   TREE_VALUE (l) = tree_cons (NULL_TREE, init, TREE_VALUE (l));\n \n   return NULL_TREE;\n@@ -7621,142 +7642,58 @@ dfs_accumulate_vtbl_inits (binfo, orig_binfo, rtti_binfo, t, l)\n   tree vtbl = NULL_TREE;\n   int ctor_vtbl_p = !same_type_p (BINFO_TYPE (rtti_binfo), t);\n \n-  if (ctor_vtbl_p)\n+  if (ctor_vtbl_p\n+      && TREE_VIA_VIRTUAL (orig_binfo) && BINFO_PRIMARY_P (orig_binfo))\n     {\n-      tree primary = binfo;\n-      tree orig_primary = orig_binfo;\n-      \n-      if (TREE_VIA_VIRTUAL (orig_binfo) && BINFO_PRIMARY_P (orig_binfo))\n-\t{\n-\t  /* In the hierarchy of BINFO_TYPE (RTTI_BINFO), this is a\n-             primary virtual base.  If it is not the same primary in\n-             the hierarchy of T, we'll need to generate a ctor vtable\n-             for it, to place at its location in T.  If it is the same\n-             primary, we still need a VTT entry for the vtable, but it\n-             should point to the ctor vtable for the base it is a\n-             primary for within the sub-hierarchy of RTTI_BINFO.\n+      /* In the hierarchy of BINFO_TYPE (RTTI_BINFO), this is a\n+\t primary virtual base.  If it is not the same primary in\n+\t the hierarchy of T, we'll need to generate a ctor vtable\n+\t for it, to place at its location in T.  If it is the same\n+\t primary, we still need a VTT entry for the vtable, but it\n+\t should point to the ctor vtable for the base it is a\n+\t primary for within the sub-hierarchy of RTTI_BINFO.\n \t      \n-\t     There are three possible cases:\n+\t There are three possible cases:\n \t      \n-             1) We are in the same place.\n-\t     2) We are a primary base within a lost primary virtual base of\n-\t     RTTI_BINFO.\n-\t     3) We are not primary to anything else in RTTI_BINFO.  */\n+\t 1) We are in the same place.\n+\t 2) We are a primary base within a lost primary virtual base of\n+\t RTTI_BINFO.\n+\t 3) We are not primary to anything else in RTTI_BINFO.  */\n \t  \n-\t  if (tree_int_cst_equal (BINFO_OFFSET (orig_binfo),\n-\t\t\t\t  size_diffop (BINFO_OFFSET (binfo),\n-\t\t\t\t\t       BINFO_OFFSET (rtti_binfo))))\n-\t    {\n-\t      /* Case 1: We're in the same place relative to\n-\t     \t RTTI_BINFO as we were in the complete type, so we are\n-\t     \t primary either to RTTI_BINFO or one of its secondary\n-\t     \t bases.  */\n-\t      \n-\t      /* Walk down our until we either find the last\n-\t     \t primary base or rtti_binfo.  */\n-\t      tree b = BINFO_PRIMARY_BASE_OF (binfo);\n-\n-\t      for (; b; b = BINFO_PRIMARY_BASE_OF (b))\n-\t\t{\n-\t\t  tree probe;\n+      tree b = BINFO_PRIMARY_BASE_OF (binfo);\n+      tree last = NULL_TREE;\n+      tree primary = NULL_TREE;\n \n-\t\t  /* See if B is still within the hierarchy starting\n-\t\t     at RTTI_BINFO. */\n-\t\t  for (probe = b; probe;\n-\t\t       probe = BINFO_INHERITANCE_CHAIN (probe))\n-\t\t    if (probe == rtti_binfo)\n-\t\t      break;\n-\t\t  \n-\t\t  if (!probe)\n-\t\t    break;\n-\t\t  \n-\t\t  primary = b;\n-\t\t  orig_primary = BINFO_PRIMARY_BASE_OF (orig_primary);\n-\t\t}\n-\t    }\n-\t  else\n-\t    {\n-\t      /* Case 2 or 3: We're not in the same place.  We might\n-\t         still be primary to something within a lost primary\n-\t         virtual base of RTTI_BINFO.  */\n-\t      tree b;\n-\t      tree last = binfo;\n-\t      tree orig_last = orig_binfo;\n-\n-\t      /* First, look through the bases we are primary to for a\n-\t     \t virtual base.  */\n-\t      for (b = BINFO_PRIMARY_BASE_OF (binfo);\n-\t\t   b;\n-\t\t   b = BINFO_PRIMARY_BASE_OF (b))\n-\t\t{\n-\t\t  if (!TREE_VIA_VIRTUAL (b))\n-\t\t    {\n-\t\t      /* See if B is still within the hierarchy starting\n-\t\t\t at RTTI_BINFO. */\n-\t\t      tree probe;\n-\n-\t\t      for (probe = b; probe;\n-\t\t\t   probe = BINFO_INHERITANCE_CHAIN (probe))\n-\t\t\tif (probe == rtti_binfo)\n-\t\t\t  break;\n-\t\t      if (!probe)\n-\t\t\t{\n-\t\t\t  b = NULL_TREE;\n-\t\t\t  break;\n-\t\t\t}\n-\t\t    }\n-\t\t  \n-\t\t  last = b;\n-\t\t  if (orig_last)\n-\t\t    orig_last = BINFO_PRIMARY_BASE_OF (orig_last);\n-\t\t  if (TREE_VIA_VIRTUAL (b))\n-\t\t    break;\n-\t\t}\n-\t      /* If we run out of primary links, keep looking down our\n-\t     \t inheritance chain; we might be an indirect primary of\n-\t     \t a virtual base.  */\n-\t      if (b == NULL_TREE)\n-\t\tfor (b = last; b; b = BINFO_INHERITANCE_CHAIN (b))\n-\t\t  if (TREE_VIA_VIRTUAL (b))\n-\t\t    break;\n-\n-\t      /* If we found a virtual base B and it is a base of\n-\t     \t RTTI_BINFO, we share our vtable with LAST, i.e. the\n-\t     \t derived-most base within B of which we are a primary.\n-\t     \t Otherwise, we get our own.  */\n-\t      if (b && binfo_for_vbase (BINFO_TYPE (b),\n-\t\t\t\t\tBINFO_TYPE (rtti_binfo)))\n-\t\t{\n-\t\t  my_friendly_assert (orig_last, 20010611);\n-\t\t  primary = last;\n-\t\t  orig_primary = orig_last;\n-\t\t}\n-\t    }\n-\t}\n-      \n-      vtbl = BINFO_VTABLE (primary);\n-      if (vtbl && TREE_CODE (vtbl) == TREE_LIST\n-\t  && TREE_PURPOSE (vtbl) == rtti_binfo)\n-\t{\n-\t  vtbl = TREE_VALUE (vtbl);\n-\t  if (primary == binfo)\n-\t    /* We created this vtable because we met its primary base\n-\t       earlier in the inheritance graph walk of\n-\t       RTTI_BINFO.  */\n-\t    return inits;\n-\t}\n-      else if (primary != binfo)\n+      /* First, look through the bases we are primary to for RTTI_BINFO\n+\t or a virtual base.  */\n+      for (; b; b = BINFO_PRIMARY_BASE_OF (b))\n \t{\n-\t  /* We're the primary of some binfo that we've not yet\n-\t     met in the inheritance graph walk of RTTI_BINFO. We\n-\t     must create that vtable now. */\n-\t  inits = dfs_accumulate_vtbl_inits (primary, orig_primary,\n-\t\t\t\t\t     rtti_binfo, t, l);\n-\t  vtbl = BINFO_VTABLE (primary);\n-\t  vtbl = TREE_VALUE (vtbl);\n+\t  last = b;\n+\t  if (TREE_VIA_VIRTUAL (b) || b == rtti_binfo)\n+\t    break;\n \t}\n-      else\n-\tvtbl = NULL;\n+      /* If we run out of primary links, keep looking down our\n+\t inheritance chain; we might be an indirect primary.  */\n+      if (b == NULL_TREE)\n+\tfor (b = last; b; b = BINFO_INHERITANCE_CHAIN (b))\n+\t  if (TREE_VIA_VIRTUAL (b) || b == rtti_binfo)\n+\t    break;\n+\n+      /* If we found RTTI_BINFO, this is case 1.  If we found a virtual\n+\t base B and it is a base of RTTI_BINFO, this is case 2.  In\n+\t either case, we share our vtable with LAST, i.e. the\n+\t derived-most base within B of which we are a primary.  */\n+      if (b == rtti_binfo\n+\t  || (b && binfo_for_vbase (BINFO_TYPE (b),\n+\t\t\t\t    BINFO_TYPE (rtti_binfo))))\n+\tprimary = last;\n+      /* Otherwise, this is case 3 and we get our own.  */\n+\n+      if (primary)\n+\t/* We're the primary of some binfo that we may not have\n+\t   met in the inheritance graph walk of RTTI_BINFO.  Just\n+\t   point to it.  */\n+\tvtbl = primary;\n     }\n   else if (!BINFO_NEW_VTABLE_MARKED (orig_binfo, BINFO_TYPE (rtti_binfo)))\n     return inits;"}]}