{"sha": "bce6f76013fd5f2e88a235231231c7879597220c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNlNmY3NjAxM2ZkNWYyZTg4YTIzNTIzMTIzMWM3ODc5NTk3MjIwYw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-01-12T21:54:41Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-01-12T21:54:41Z"}, "message": "(-Wformat-overflow): ...to this.\n\n\ngcc/c-family/ChangeLog:\n\n\t(-Wformat-overflow): ...to this.\n\ngcc/ChangeLog:\n\n\tto -Wformat-overflow.\n\t* gimple-ssa-sprintf.c (pass_sprintf_length::gate): Adjust.\n\t(min_bytes_remaining): Same.\n\t(get_string_length): Same.\n\t(format_string): Same.\n\t(format_directive): Same.\n\t(add_bytes): Same.\n\t(pass_sprintf_length::handle_gimple_call): Same.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr78138.c: Adjust.\n\t* gcc.dg/pr78768.c: Adjust.\n\t* gcc.dg/tree-ssa/builtin-sprintf-4.c: Adjust.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-1.c: Adjust.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-2.c: Adjust.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-3.c: Adjust.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-4.c: Adjust.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-6.c: Adjust.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-7.c: Adjust.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-8.c: Adjust.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-9.c: Adjust.\n\t* gcc.dg/tree-ssa/pr78605.c: Adjust.\n\t* gcc.dg/tree-ssa/pr78622.c: Adjust.\n\nFrom-SVN: r244385", "tree": {"sha": "a53d2324aab56f9e4903424eceb3477b0f56152e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a53d2324aab56f9e4903424eceb3477b0f56152e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bce6f76013fd5f2e88a235231231c7879597220c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce6f76013fd5f2e88a235231231c7879597220c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bce6f76013fd5f2e88a235231231c7879597220c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce6f76013fd5f2e88a235231231c7879597220c/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3eefa646f4c90689953d63d6ef861692a858fd61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eefa646f4c90689953d63d6ef861692a858fd61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eefa646f4c90689953d63d6ef861692a858fd61"}], "stats": {"total": 159, "additions": 95, "deletions": 64}, "files": [{"sha": "dc749ab0e3a5a499417677ac7d3aedb1dcb386f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -1,3 +1,14 @@\n+2017-01-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tto -Wformat-overflow.\n+\t* gimple-ssa-sprintf.c (pass_sprintf_length::gate): Adjust.\n+\t(min_bytes_remaining): Same.\n+\t(get_string_length): Same.\n+\t(format_string): Same.\n+\t(format_directive): Same.\n+\t(add_bytes): Same.\n+\t(pass_sprintf_length::handle_gimple_call): Same.\n+\n 2017-01-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gimple-ssa-sprintf.c (try_substitute_return_value): Remove"}, {"sha": "774ca4e0edae7abe8d60c49546cf3956a5f9aa9e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -1,3 +1,7 @@\n+2017-01-12  Martin Sebor  <msebor@redhat.com>\n+\n+\t(-Wformat-overflow): ...to this.\n+\n 2017-01-11  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/78768"}, {"sha": "33caeb2cded7b07a5023f92a844689e4dcfc83a4", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -520,15 +520,15 @@ Wformat-extra-args\n C ObjC C++ ObjC++ Var(warn_format_extra_args) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0)\n Warn if passing too many arguments to a function for its format string.\n \n-Wformat-length\n-C ObjC C++ LTO ObjC++ Warning Alias(Wformat-length=, 1, 0)\n-Warn about function calls with format strings that write past the end\n-of the destination region.  Same as -Wformat-length=1.\n-\n Wformat-nonliteral\n C ObjC C++ ObjC++ Var(warn_format_nonliteral) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 2, 0)\n Warn about format strings that are not literals.\n \n+Wformat-overflow\n+C ObjC C++ LTO ObjC++ Warning Alias(Wformat-overflow=, 1, 0)\n+Warn about function calls with format strings that write past the end\n+of the destination region.  Same as -Wformat-overflow=1.\n+\n Wformat-security\n C ObjC C++ ObjC++ Var(warn_format_security) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 2, 0)\n Warn about possible security problems with format functions.\n@@ -554,8 +554,8 @@ Wformat=\n C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_format) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall, 1, 0)\n Warn about printf/scanf/strftime/strfmon format string anomalies.\n \n-Wformat-length=\n-C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_format_length) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0)\n+Wformat-overflow=\n+C ObjC C++ LTO ObjC++ Joined RejectNegative UInteger Var(warn_format_overflow) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0)\n Warn about function calls with format strings that write past the end\n of the destination region.\n "}, {"sha": "69f0adb8400f52e066a73d8300ec77bfe2da330e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -274,8 +274,8 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-div-by-zero  -Wdouble-promotion  -Wduplicated-cond @gol\n -Wempty-body  -Wenum-compare  -Wno-endif-labels  -Wexpansion-to-defined @gol\n -Werror  -Werror=*  -Wfatal-errors  -Wfloat-equal  -Wformat  -Wformat=2 @gol\n--Wno-format-contains-nul  -Wno-format-extra-args  -Wformat-length=@var{n} @gol\n--Wformat-nonliteral @gol\n+-Wno-format-contains-nul  -Wno-format-extra-args  @gol\n+-Wformat-nonliteral -Wformat-overflow=@var{n} @gol\n -Wformat-security  -Wformat-signedness  -Wformat-truncation=@var{n} @gol\n -Wformat-y2k  -Wframe-address @gol\n -Wframe-larger-than=@var{len}  -Wno-free-nonheap-object  -Wjump-misses-init @gol\n@@ -3957,10 +3957,10 @@ in the case of @code{scanf} formats, this option suppresses the\n warning if the unused arguments are all pointers, since the Single\n Unix Specification says that such unused arguments are allowed.\n \n-@item -Wformat-length\n-@itemx -Wformat-length=@var{level}\n-@opindex Wformat-length\n-@opindex Wno-format-length\n+@item -Wformat-overflow\n+@itemx -Wformat-overflow=@var{level}\n+@opindex Wformat-overflow\n+@opindex Wno-format-overflow\n Warn about calls to formatted input/output functions such as @code{sprintf}\n and @code{vsprintf} that might overflow the destination buffer.  When the\n exact number of bytes written by a format directive cannot be determined\n@@ -3970,11 +3970,11 @@ will in most cases improve the accuracy of the warning, it may also\n result in false positives.\n \n @table @gcctabopt\n-@item -Wformat-length\n-@item -Wformat-length=1\n-@opindex Wformat-length\n-@opindex Wno-format-length\n-Level @var{1} of @option{-Wformat-length} enabled by @option{-Wformat}\n+@item -Wformat-overflow\n+@item -Wformat-overflow=1\n+@opindex Wformat-overflow\n+@opindex Wno-format-overflow\n+Level @var{1} of @option{-Wformat-overflow} enabled by @option{-Wformat}\n employs a conservative approach that warns only about calls that most\n likely overflow the buffer.  At this level, numeric arguments to format\n directives with unknown values are assumed to have the value of one, and\n@@ -3997,7 +3997,7 @@ void f (int a, int b)\n @}\n @end smallexample\n \n-@item -Wformat-length=2\n+@item -Wformat-overflow=2\n Level @var{2} warns also about calls that might overflow the destination\n buffer given an argument of sufficient length or magnitude.  At level\n @var{2}, unknown numeric arguments are assumed to have the minimum\n@@ -4086,13 +4086,13 @@ compile-time it is estimated based on heuristics that depend on\n the @var{level} argument and on optimization.  While enabling optimization\n will in most cases improve the accuracy of the warning, it may also result\n in false positives.  Except as noted otherwise, the option uses the same\n-logic @option{-Wformat-length}.\n+logic @option{-Wformat-overflow}.\n \n @table @gcctabopt\n @item -Wformat-truncation\n @item -Wformat-truncation=1\n @opindex Wformat-truncation\n-@opindex Wno-format-length\n+@opindex Wno-format-overflow\n Level @var{1} of @option{-Wformat-truncation} enabled by @option{-Wformat}\n employs a conservative approach that warns only about calls to bounded\n functions whose return value is unused and that will most likely result\n@@ -8458,7 +8458,7 @@ if (snprintf (buf, \"%08x\", i) >= sizeof buf)\n \n The @option{-fprintf-return-value} option relies on other optimizations\n and yields best results with @option{-O2}.  It works in tandem with the\n-@option{-Wformat-length} and @option{-Wformat-truncation} options.\n+@option{-Wformat-overflow} and @option{-Wformat-truncation} options.\n The @option{-fprintf-return-value} option is enabled by default.\n \n @item -fno-peephole"}, {"sha": "e6a6a80c27b4cb61f57aba392aaec3300fd85359", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -141,7 +141,7 @@ pass_sprintf_length::gate (function *)\n      not optimizing and the pass is being invoked early, or when\n      optimizing and the pass is being invoked during optimization\n      (i.e., \"late\").  */\n-  return ((warn_format_length > 0 || flag_printf_return_value)\n+  return ((warn_format_overflow > 0 || flag_printf_return_value)\n \t  && (optimize > 0) == fold_return_value);\n }\n \n@@ -651,7 +651,7 @@ min_bytes_remaining (unsigned HOST_WIDE_INT navail, const format_result &res)\n   if (HOST_WIDE_INT_MAX <= navail)\n     return navail;\n \n-  if (1 < warn_format_length || res.knownrange)\n+  if (warn_format_overflow > 1 || res.knownrange)\n     {\n       /* At level 2, or when all directives output an exact number\n \t of bytes or when their arguments were bounded by known\n@@ -728,7 +728,7 @@ struct pass_sprintf_length::call_info\n   /* Return the warning option corresponding to the called function.  */\n   int warnopt () const\n   {\n-    return bounded ? OPT_Wformat_truncation_ : OPT_Wformat_length_;\n+    return bounded ? OPT_Wformat_truncation_ : OPT_Wformat_overflow_;\n   }\n };\n \n@@ -1653,7 +1653,7 @@ get_string_length (tree str)\n       fmtresult res;\n \n       res.range.min = (tree_fits_uhwi_p (lenrange[0])\n-\t\t       ? tree_to_uhwi (lenrange[0]) : 1 < warn_format_length);\n+\t\t       ? tree_to_uhwi (lenrange[0]) : warn_format_overflow > 1);\n       res.range.max = (tree_fits_uhwi_p (lenrange[1])\n \t\t       ? tree_to_uhwi (lenrange[1]) : HOST_WIDE_INT_M1U);\n \n@@ -1693,12 +1693,12 @@ format_string (const conversion_spec &spec, tree arg)\n      to a \"%lc\" directive adjusted for precision but not field width.\n      6 is the longest UTF-8 sequence for a single wide character.  */\n   const unsigned HOST_WIDE_INT max_bytes_for_unknown_wc\n-    = (0 <= prec ? prec : 1 < warn_format_length ? 6 : 1);\n+    = (0 <= prec ? prec : warn_format_overflow > 1 ? 6 : 1);\n \n   /* The maximum number of bytes for an unknown string argument to either\n      a \"%s\" or \"%ls\" directive adjusted for precision but not field width.  */\n   const unsigned HOST_WIDE_INT max_bytes_for_unknown_str\n-    = (0 <= prec ? prec : 1 < warn_format_length);\n+    = (0 <= prec ? prec : warn_format_overflow > 1);\n \n   /* The result is bounded unless overriddden for a non-constant string\n      of an unknown length.  */\n@@ -1718,7 +1718,7 @@ format_string (const conversion_spec &spec, tree arg)\n \t     is the smaller of either 0 (at level 1) or 1 (at level 2)\n \t     and WIDTH, and the maximum is MB_CUR_MAX in the selected\n \t     locale, which is unfortunately, unknown.  */\n-\t  res.range.min = 1 == warn_format_length ? !nul : nul < 1;\n+\t  res.range.min = warn_format_overflow == 1 ? !nul : nul < 1;\n \t  res.range.max = max_bytes_for_unknown_wc;\n \t  /* The range above is good enough to issue warnings but not\n \t     for value range propagation, so clear BOUNDED.  */\n@@ -1756,7 +1756,7 @@ format_string (const conversion_spec &spec, tree arg)\n \t    {\n \t      bounded = false;\n \n-\t      if (warn_format_length > 1)\n+\t      if (warn_format_overflow > 1)\n \t\t{\n \t\t  /* Leave the minimum number of bytes the wide string\n \t\t     converts to equal to its length and set the maximum\n@@ -2038,7 +2038,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n \t\t\t    || warn_format_trunc > 1))\n \t\t       || (!info.bounded\n \t\t\t   && (spec.specifier == 's'\n-\t\t\t       || 1 < warn_format_length))))\n+\t\t\t       || warn_format_overflow > 1))))\n \t    {\n \t      /* The maximum directive output is longer than there is\n \t\t room in the destination and the output length is either\n@@ -2114,7 +2114,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n   if (!minunder4k || fmtres.range.max > 4095)\n     res->under4k = false;\n \n-  if (!warned && 1 < warn_format_length\n+  if (!warned && warn_format_overflow > 1\n       && (!minunder4k || fmtres.range.max > 4095))\n     {\n       /* The directive output may be longer than the maximum required\n@@ -2151,7 +2151,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n \n   if (!warned\n       && (exceedmin\n-\t  || (1 < warn_format_length\n+\t  || (warn_format_overflow > 1\n \t      && res->number_chars_max > target_int_max ())))\n     {\n       /* The directive output causes the total length of output\n@@ -2229,15 +2229,15 @@ add_bytes (const pass_sprintf_length::call_info &info,\n      are bounded by the arrays they are known to refer to.  */\n   if (!res->warned\n       && (avail_range.max < nbytes\n-\t  || ((res->knownrange || 1 < warn_format_length)\n+\t  || ((res->knownrange || warn_format_overflow > 1)\n \t      && avail_range.min < nbytes)))\n     {\n       /* Set NAVAIL to the number of available bytes used to decide\n \t whether or not to issue a warning below.  The exact kind of\n \t warning will depend on AVAIL_RANGE.  */\n       unsigned HOST_WIDE_INT navail = avail_range.max;\n       if (nbytes <= navail && avail_range.min < HOST_WIDE_INT_MAX\n-\t  && (res->knownrange || 1 < warn_format_length))\n+\t  && (res->knownrange || warn_format_overflow > 1))\n \tnavail = avail_range.min;\n \n       /* Compute the offset of the first format character that is beyond\n@@ -2346,7 +2346,7 @@ add_bytes (const pass_sprintf_length::call_info &info,\n \n   if (!res->warned\n       && (exceedmin\n-\t  || (1 < warn_format_length\n+\t  || (warn_format_overflow > 1\n \t      && (res->number_chars_max - !end) > target_int_max ())))\n     {\n       /* The function's output exceeds INT_MAX bytes.  */\n@@ -2356,7 +2356,7 @@ add_bytes (const pass_sprintf_length::call_info &info,\n \t warning will depend on AVAIL_RANGE.  */\n       unsigned HOST_WIDE_INT navail = avail_range.max;\n       if (nbytes <= navail && avail_range.min < HOST_WIDE_INT_MAX\n-\t  && (res->bounded || 1 < warn_format_length))\n+\t  && (res->bounded || warn_format_overflow > 1))\n \tnavail = avail_range.min;\n \n       /* Compute the offset of the first format character that is beyond\n@@ -3037,7 +3037,7 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator *gsi)\n \t  if (range_type == VR_RANGE)\n \t    {\n \t      dstsize\n-\t\t= (warn_format_length < 2\n+\t\t= (warn_format_overflow < 2\n \t\t   ? wi::fits_uhwi_p (max) ? max.to_uhwi () : max.to_shwi ()\n \t\t   : wi::fits_uhwi_p (min) ? min.to_uhwi () : min.to_shwi ());\n \t    }"}, {"sha": "8bf8bf2db39ec4ae31fbdb7ff06517e75ee3a233", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -1,3 +1,19 @@\n+2017-01-12  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/pr78138.c: Adjust.\n+\t* gcc.dg/pr78768.c: Adjust.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-4.c: Adjust.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-1.c: Adjust.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-2.c: Adjust.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-3.c: Adjust.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-4.c: Adjust.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-6.c: Adjust.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-7.c: Adjust.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-8.c: Adjust.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-9.c: Adjust.\n+\t* gcc.dg/tree-ssa/pr78605.c: Adjust.\n+\t* gcc.dg/tree-ssa/pr78622.c: Adjust.\n+\n 2017-01-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/tree-ssa/builtin-snprintf-1.c: New test."}, {"sha": "b62febd9fdfb4e631b379a0abb5793d3851c8390", "filename": "gcc/testsuite/gcc.c-torture/execute/pr78622.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78622.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78622.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78622.c?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -1,6 +1,6 @@\n-/* PR middle-end/78622 - [7 Regression] -Wformat-length/-fprintf-return-value\n+/* PR middle-end/78622 - [7 Regression] -Wformat-overflow/-fprintf-return-value\n    incorrect with overflow/wrapping\n-   { dg-additional-options \"-Wformat-length=2\" } */\n+   { dg-additional-options \"-Wformat-overflow=2\" } */\n \n __attribute__((noinline, noclone)) int\n foo (int x)"}, {"sha": "cfc5a8cb0f51d531dde60ca602d7b23c20645393", "filename": "gcc/testsuite/gcc.dg/pr78138.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78138.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78138.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78138.c?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -1,7 +1,7 @@\n /* PR middle-end/78138 - missing warnings on buffer overflow with non-constant\n    source length\n    { dg-do compile }\n-   { dg-options \"-O2 -Wformat-length\" } */\n+   { dg-options \"-O2 -Wformat-overflow\" } */\n \n char d [5];\n "}, {"sha": "ca1fc43bccd2866ed8d1e491f83209d52f512ee4", "filename": "gcc/testsuite/gcc.dg/pr78768.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78768.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78768.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78768.c?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -1,14 +1,14 @@\n-/* PR c/78768 - -Walloca-larger-than and -Wformat-length warnings disabled\n+/* PR c/78768 - -Walloca-larger-than and -Wformat-overflow warnings disabled\n    by -flto\n   { dg-do run }\n   { dg-require-effective-target lto }\n-  { dg-options \"-O2 -Walloca-larger-than=10 -Wformat -Wformat-length -flto\" } */\n+  { dg-options \"-O2 -Walloca-larger-than=10 -Wformat -Wformat-overflow -flto\" } */\n \n int main (void)\n {\n   char *d = (char *)__builtin_alloca (12);  /* { dg-warning \"argument to .alloca. is too large\" } */\n \n-  __builtin_sprintf (d, \"%32s\", \"x\");   /* { dg-warning \"directive writing 32 bytes into a region of size 12\" \"-Wformat-length\" { xfail *-*-* } } */\n+  __builtin_sprintf (d, \"%32s\", \"x\");   /* { dg-warning \"directive writing 32 bytes into a region of size 12\" \"-Wformat-overflow\" { xfail *-*-* } } */\n \n   return 0;\n }"}, {"sha": "08993a24356e6bc4a953cbb429292c921b864ef3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-4.c?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -1,7 +1,7 @@\n /* PR middle-end/78461 - [7 Regression] ICE: in operator+=, at\n    gimple-ssa-sprintf.c:214\n    Disable warnings to exercise code paths through the pass that may\n-   not be exercised when the -Wformat-length option is in effect.  */\n+   not be exercised when the -Wformat-overflow option is in effect.  */\n /* { dg-compile }\n    { dg-options \"-O2 -fdump-tree-optimized -w\" } */\n "}, {"sha": "bf4e57a8bd257f4124cd873bd01ea9d2a92b5919", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Wformat -Wformat-length=1 -ftrack-macro-expansion=0\" } */\n+/* { dg-options \"-Wformat -Wformat-overflow=1 -ftrack-macro-expansion=0\" } */\n /* { dg-require-effective-target int32plus } */\n \n /* When debugging, define LINE to the line number of the test case to exercise\n@@ -1028,7 +1028,7 @@ void test_sprintf_chk_e_const (void)\n   T (12, \"%Le\", 9.9999999e+99L);/* { dg-warning \"terminating nul\" } */\n }\n \n-/* At -Wformat-length level 1 unknown numbers are assumed to have\n+/* At -Wformat-overflow level 1 unknown numbers are assumed to have\n    the value one, and unknown strings are assumed to have a zero\n    length.  */\n "}, {"sha": "d5bb0a8f716a03e4492e5d8f9f33bbd2b9bcddec", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-2.c?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=c99 -Wformat -Wformat-length=2 -ftrack-macro-expansion=0\" } */\n+/* { dg-options \"-std=c99 -Wformat -Wformat-overflow=2 -ftrack-macro-expansion=0\" } */\n \n /* When debugging, define LINE to the line number of the test case to exercise\n    and avoid exercising any of the others.  The buffer and objsize macros"}, {"sha": "e0f3f68b7cbc88c1988af970f3155259f88c5e65", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -4,7 +4,7 @@\n    -O2 (-ftree-vrp) is necessary for the tests involving ranges to pass,\n    otherwise -O1 is sufficient.\n    { dg-do compile }\n-   { dg-options \"-O2 -Wformat -Wformat-length=1 -ftrack-macro-expansion=0\" } */\n+   { dg-options \"-O2 -Wformat -Wformat-overflow=1 -ftrack-macro-expansion=0\" } */\n \n typedef __SIZE_TYPE__ size_t;\n "}, {"sha": "2eadfcd46ff91c4da30accccf1300050aa6eee0d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-4.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-4.c?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Wformat -Wformat-length=1 -fdiagnostics-show-caret\" } */\n+/* { dg-options \"-Wformat -Wformat-overflow=1 -fdiagnostics-show-caret\" } */\n \n extern int sprintf (char*, const char*, ...);\n \n@@ -17,7 +17,7 @@ void test (void)\n    sprintf (dst + 2, \"1\", 0);\n                      ^~~\n      { dg-end-multiline-output \"\" }\n-     { dg-begin-multiline-output \"-Wformat-length output\" }\n+     { dg-begin-multiline-output \"-Wformat-overflow output\" }\n    sprintf (dst + 2, \"1\", 0);\n                       ~^\n      { dg-end-multiline-output \"\" }\n@@ -35,7 +35,7 @@ void test (void)\n    sprintf (dst, \"1234\", 0);\n                  ^~~~~~\n      { dg-end-multiline-output \"\" }\n-     { dg-begin-multiline-output \"-Wformat-length output\" }\n+     { dg-begin-multiline-output \"-Wformat-overflow output\" }\n    sprintf (dst, \"1234\", 0);\n                      ^\n      { dg-end-multiline-output \"\" }\n@@ -54,7 +54,7 @@ void test (void)\n    sprintf (dst, \"12345\", 0);\n                  ^~~~~~~\n      { dg-end-multiline-output \"\" }\n-     { dg-begin-multiline-output \"-Wformat-length output\" }\n+     { dg-begin-multiline-output \"-Wformat-overflow output\" }\n    sprintf (dst, \"12345\", 0);\n                      ^~\n      { dg-end-multiline-output \"\" }\n@@ -68,7 +68,7 @@ void test (void)\n   sprintf (dst + 2, \"%-s\", \"1\");\n   /* { dg-warning \"writing a terminating nul past the end of the destination\" \"warning\" { target *-*-* } .-1 }\n      { dg-message \"format output 2 bytes into a destination of size 1\" \"note\" { target *-*-* } .-2 }\n-     { dg-begin-multiline-output \"-Wformat-length output\" }\n+     { dg-begin-multiline-output \"-Wformat-overflow output\" }\n    sprintf (dst + 2, \"%-s\", \"1\");\n                       ~~~^\n      { dg-end-multiline-output \"\" }\n@@ -80,7 +80,7 @@ void test (void)\n   sprintf (dst + 2, \"%-s\", \"abcd\");\n   /* { dg-warning \".%-s. directive writing 4 bytes into a region of size 1\" \"warning\" { target *-*-* } .-1 }\n      { dg-message \"format output 5 bytes into a destination of size 1\" \"note\" { target *-*-* } .-2 }\n-     { dg-begin-multiline-output \"-Wformat-length output\" }\n+     { dg-begin-multiline-output \"-Wformat-overflow output\" }\n    sprintf (dst + 2, \"%-s\", \"abcd\");\n                       ^~~   ~~~~~~\n      { dg-end-multiline-output \"\" }"}, {"sha": "16ea8eed7efd4f5fe8c7e181f0888e5fc719e981", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-6.c?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -1,8 +1,8 @@\n-/* PR middle-end/77721 - -Wformat-length not uses arg range for converted vars\n+/* PR middle-end/77721 - -Wformat-overflow not uses arg range for converted vars\n    Test to verify that the correct range information is made available to the\n    -Wformat-lenght check to prevent warnings.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Wformat -Wformat-length -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -Wformat -Wformat-overflow -fdump-tree-optimized\" } */\n \n void abort (void);\n int snprintf (char*, __SIZE_TYPE__, const char*, ...);"}, {"sha": "1bb9d623db0712c125b2f59c3dea222b19700cf6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-7.c?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -2,7 +2,7 @@\n    precision\n    { dg-do compile }\n    { dg-require-effective-target int32plus }\n-   { dg-options \"-Wformat-length -ftrack-macro-expansion=0\" } */\n+   { dg-options \"-Wformat-overflow -ftrack-macro-expansion=0\" } */\n \n #define INT_MAX __INT_MAX__\n #define INT_MIN (-INT_MAX - 1)"}, {"sha": "4844c62d6615566ff8119eb5a37cdd5d2f6c12b7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-8.c?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -1,7 +1,7 @@\n /* PR middle-end/78519 - missing warning for sprintf %s with null pointer\n    Also exercises null destination pointer and null format string.\n    { dg-do compile }\n-   { dg-options \"-O2 -Wformat -Wformat-length -Wno-nonnull -ftrack-macro-expansion=0\" } */\n+   { dg-options \"-O2 -Wformat -Wformat-overflow -Wno-nonnull -ftrack-macro-expansion=0\" } */\n \n typedef __builtin_va_list va_list;\n "}, {"sha": "4b331ab260560954e5d7178f50eebf4b6a3ad702", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-9.c?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -2,7 +2,7 @@\n    Test to verify the correctness of ranges of output computed for floating\n    point directives.\n    { dg-do compile }\n-   { dg-options \"-O2 -Wformat -Wformat-length -ftrack-macro-expansion=0\" } */\n+   { dg-options \"-O2 -Wformat -Wformat-overflow -ftrack-macro-expansion=0\" } */\n \n typedef __builtin_va_list va_list;\n "}, {"sha": "141a12c3fd1f4d2b82558ba621d30b4887790ef8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr78605.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78605.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78605.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78605.c?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -1,6 +1,6 @@\n-/* PR middle-end/78605 - bogus -Wformat-length=1 with %f\n+/* PR middle-end/78605 - bogus -Wformat-overflow=1 with %f\n    { dg-do compile }\n-   { dg-options \"-O2 -Wall -Wextra -Wformat-length=1\" } */\n+   { dg-options \"-O2 -Wall -Wextra -Wformat-overflow=1\" } */\n \n char d[10];\n "}, {"sha": "b672710028d8a24c7d23b2d2b522ccc4a72ff224", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr78622.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78622.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce6f76013fd5f2e88a235231231c7879597220c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78622.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78622.c?ref=bce6f76013fd5f2e88a235231231c7879597220c", "patch": "@@ -1,7 +1,7 @@\n-/* PR middle-end/78622 - [7 Regression] -Wformat-length/-fprintf-return-value\n+/* PR middle-end/78622 - [7 Regression] -Wformat-overflow/-fprintf-return-value\n    incorrect with overflow/wrapping\n    { dg-do compile }\n-   { dg-options \"-Wformat-length=2\" }\n+   { dg-options \"-Wformat-overflow=2\" }\n    The h and hh length modifiers are a C99 feature (see PR 78959).\n    { dg-require-effective-target c99_runtime }  */\n "}]}