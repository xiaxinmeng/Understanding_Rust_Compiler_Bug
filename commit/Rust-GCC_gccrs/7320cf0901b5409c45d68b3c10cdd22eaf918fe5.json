{"sha": "7320cf0901b5409c45d68b3c10cdd22eaf918fe5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMyMGNmMDkwMWI1NDA5YzQ1ZDY4YjNjMTBjZGQyMmVhZjkxOGZlNQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-01-29T17:36:18Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-01-29T17:36:18Z"}, "message": "re PR fortran/47531 (SHAPE misses KIND= support)\n\n2011-01-29  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/47531\n        * check.c (gfc_check_shape): Support kind argument in SHAPE.\n        * intrinsic.c (add_functions): Ditto.\n        * resolve.c (gfc_resolve_shape): Ditto.\n        * simplify.c (gfc_simplify_shape): Ditto.\n        * intrinsic.h (gfc_check_shape, gfc_resolve_shape,\n        gfc_simplify_shape): Update prototypes.\n        * intrinisc.text (SHAPE): Document kind argument.\n\n2011-01-29  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/47531\n        * gfortran.dg/shape_6.f90: New.\n\nFrom-SVN: r169392", "tree": {"sha": "c8b7235eb4cb4f52b10b3bfed25bfdc84d8ed608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8b7235eb4cb4f52b10b3bfed25bfdc84d8ed608"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7320cf0901b5409c45d68b3c10cdd22eaf918fe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7320cf0901b5409c45d68b3c10cdd22eaf918fe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7320cf0901b5409c45d68b3c10cdd22eaf918fe5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd228fecfcb2471f40415f714ccb50278c9f7692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd228fecfcb2471f40415f714ccb50278c9f7692", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd228fecfcb2471f40415f714ccb50278c9f7692"}], "stats": {"total": 97, "additions": 78, "deletions": 19}, "files": [{"sha": "b1df4053d52bf8752aecb2602017257f8e4547db", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7320cf0901b5409c45d68b3c10cdd22eaf918fe5", "patch": "@@ -1,3 +1,14 @@\n+2011-01-29  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/47531\n+\t* check.c (gfc_check_shape): Support kind argument in SHAPE.\n+\t* intrinsic.c (add_functions): Ditto.\n+\t* resolve.c (gfc_resolve_shape): Ditto.\n+\t* simplify.c (gfc_simplify_shape): Ditto.\n+\t* intrinsic.h (gfc_check_shape, gfc_resolve_shape,\n+\tgfc_simplify_shape): Update prototypes.\n+\t* intrinisc.text (SHAPE): Document kind argument.\n+\n 2011-01-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/47507"}, {"sha": "adb4b95368d3205befcdeabc955641f745e5b206", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=7320cf0901b5409c45d68b3c10cdd22eaf918fe5", "patch": "@@ -3255,7 +3255,7 @@ gfc_check_set_exponent (gfc_expr *x, gfc_expr *i)\n \n \n gfc_try\n-gfc_check_shape (gfc_expr *source)\n+gfc_check_shape (gfc_expr *source, gfc_expr *kind)\n {\n   gfc_array_ref *ar;\n \n@@ -3271,6 +3271,13 @@ gfc_check_shape (gfc_expr *source)\n       return FAILURE;\n     }\n \n+  if (kind_check (kind, 1, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+  if (kind && gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: '%s' intrinsic \"\n+\t\t\t      \"with KIND argument at %L\",\n+\t\t\t      gfc_current_intrinsic, &kind->where) == FAILURE)\n+    return FAILURE;\n+\n   return SUCCESS;\n }\n "}, {"sha": "80dbaa8dd4a79ed31d13465aa60481e4e6503e29", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=7320cf0901b5409c45d68b3c10cdd22eaf918fe5", "patch": "@@ -2541,9 +2541,10 @@ add_functions (void)\n \n   make_generic (\"set_exponent\", GFC_ISYM_SET_EXPONENT, GFC_STD_F95);\n \n-  add_sym_1 (\"shape\", GFC_ISYM_SHAPE, CLASS_INQUIRY, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n+  add_sym_2 (\"shape\", GFC_ISYM_SHAPE, CLASS_INQUIRY, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_shape, gfc_simplify_shape, gfc_resolve_shape,\n-\t     src, BT_REAL, dr, REQUIRED);\n+\t     src, BT_REAL, dr, REQUIRED,\n+\t     kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"shape\", GFC_ISYM_SHAPE, GFC_STD_F95);\n "}, {"sha": "033bae0f68cc7a5bd158c80f80432597c7a063f6", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=7320cf0901b5409c45d68b3c10cdd22eaf918fe5", "patch": "@@ -135,7 +135,7 @@ gfc_try gfc_check_selected_char_kind (gfc_expr *);\n gfc_try gfc_check_selected_int_kind (gfc_expr *);\n gfc_try gfc_check_selected_real_kind (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_try gfc_check_set_exponent (gfc_expr *, gfc_expr *);\n-gfc_try gfc_check_shape (gfc_expr *);\n+gfc_try gfc_check_shape (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_shift (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_size (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_try gfc_check_sign (gfc_expr *, gfc_expr *);\n@@ -360,7 +360,7 @@ gfc_expr *gfc_simplify_selected_int_kind (gfc_expr *);\n gfc_expr *gfc_simplify_selected_real_kind (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_set_exponent (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_sign (gfc_expr *, gfc_expr *);\n-gfc_expr *gfc_simplify_shape (gfc_expr *);\n+gfc_expr *gfc_simplify_shape (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_shifta (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_shiftl (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_shiftr (gfc_expr *, gfc_expr *);\n@@ -531,7 +531,7 @@ void gfc_resolve_scan (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n void gfc_resolve_second_sub (gfc_code *);\n void gfc_resolve_secnds (gfc_expr *, gfc_expr *);\n void gfc_resolve_set_exponent (gfc_expr *, gfc_expr *, gfc_expr *);\n-void gfc_resolve_shape (gfc_expr *, gfc_expr *);\n+void gfc_resolve_shape (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_shift (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_sign (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_signal (gfc_expr *, gfc_expr *, gfc_expr *);"}, {"sha": "d8a97c55971afdceae658b5417631cb85828850c", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=7320cf0901b5409c45d68b3c10cdd22eaf918fe5", "patch": "@@ -10836,26 +10836,29 @@ END PROGRAM\n Determines the shape of an array.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Inquiry function\n \n @item @emph{Syntax}:\n-@code{RESULT = SHAPE(SOURCE)}\n+@code{RESULT = SHAPE(SOURCE [, KIND])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n @item @var{SOURCE} @tab Shall be an array or scalar of any type. \n If @var{SOURCE} is a pointer it must be associated and allocatable \n arrays must be allocated.\n+@item @var{KIND}   @tab (Optional) An @code{INTEGER} initialization\n+expression indicating the kind parameter of the result.\n @end multitable\n \n @item @emph{Return value}:\n An @code{INTEGER} array of rank one with as many elements as @var{SOURCE} \n has dimensions. The elements of the resulting array correspond to the extend\n of @var{SOURCE} along the respective dimensions. If @var{SOURCE} is a scalar,\n-the result is the rank one array of size zero.\n+the result is the rank one array of size zero. If @var{KIND} is absent, the\n+return value has the default integer kind otherwise the specified kind.\n \n @item @emph{Example}:\n @smallexample"}, {"sha": "ec9dd422fb626e12f8f351e6397bf8069a2909b9", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=7320cf0901b5409c45d68b3c10cdd22eaf918fe5", "patch": "@@ -2185,10 +2185,15 @@ gfc_resolve_set_exponent (gfc_expr *f, gfc_expr *x,\n \n \n void\n-gfc_resolve_shape (gfc_expr *f, gfc_expr *array)\n+gfc_resolve_shape (gfc_expr *f, gfc_expr *array, gfc_expr *kind)\n {\n   f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_default_integer_kind;\n+\n+  if (kind)\n+    f->ts.kind = mpz_get_si (kind->value.integer);\n+  else\n+    f->ts.kind = gfc_default_integer_kind;\n+\n   f->rank = 1;\n   f->shape = gfc_get_shape (1);\n   mpz_init_set_ui (f->shape[0], array->rank);"}, {"sha": "ba8804401bf53b774bc21e4202406e7aae1f2c33", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=7320cf0901b5409c45d68b3c10cdd22eaf918fe5", "patch": "@@ -5496,20 +5496,19 @@ gfc_simplify_set_exponent (gfc_expr *x, gfc_expr *i)\n \n \n gfc_expr *\n-gfc_simplify_shape (gfc_expr *source)\n+gfc_simplify_shape (gfc_expr *source, gfc_expr *kind)\n {\n   mpz_t shape[GFC_MAX_DIMENSIONS];\n   gfc_expr *result, *e, *f;\n   gfc_array_ref *ar;\n   int n;\n   gfc_try t;\n+  int k = get_kind (BT_INTEGER, kind, \"SHAPE\", gfc_default_integer_kind);\n \n-  if (source->rank == 0)\n-    return gfc_get_array_expr (BT_INTEGER, gfc_default_integer_kind,\n-\t\t\t       &source->where);\n+  result = gfc_get_array_expr (BT_INTEGER, k, &source->where);\n \n-  result = gfc_get_array_expr (BT_INTEGER, gfc_default_integer_kind,\n-\t\t\t       &source->where);\n+  if (source->rank == 0)\n+    return result;\n \n   if (source->expr_type == EXPR_VARIABLE)\n     {\n@@ -5530,8 +5529,7 @@ gfc_simplify_shape (gfc_expr *source)\n \n   for (n = 0; n < source->rank; n++)\n     {\n-      e = gfc_get_constant_expr (BT_INTEGER, gfc_default_integer_kind,\n-\t\t\t\t &source->where);\n+      e = gfc_get_constant_expr (BT_INTEGER, k, &source->where);\n \n       if (t == SUCCESS)\n \t{"}, {"sha": "0468506d4159e40ebffcd651f0582ec13888e732", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7320cf0901b5409c45d68b3c10cdd22eaf918fe5", "patch": "@@ -1,3 +1,8 @@\n+2011-01-29  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/47531\n+\t* gfortran.dg/shape_6.f90: New.\n+\n 2011-01-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/47434"}, {"sha": "d68f7bef58a3ca0dc33aba5be0fd278aa774f723", "filename": "gcc/testsuite/gfortran.dg/shape_6.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ftestsuite%2Fgfortran.dg%2Fshape_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7320cf0901b5409c45d68b3c10cdd22eaf918fe5/gcc%2Ftestsuite%2Fgfortran.dg%2Fshape_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fshape_6.f90?ref=7320cf0901b5409c45d68b3c10cdd22eaf918fe5", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do compile }\n+!\n+! PR fortran/47531\n+!\n+! Contributed by James Van Buskirk\n+!\n+! Check for the presence of the optional kind= argument\n+! of F2003.\n+!\n+\n+program bug1\n+   use ISO_C_BINDING\n+   implicit none\n+   real,allocatable :: weevil(:,:)\n+\n+   write(*,*) achar(64,C_CHAR)\n+   write(*,*) char(64,C_CHAR)\n+   write(*,*) iachar('A',C_INTPTR_T)\n+   write(*,*) ichar('A',C_INTPTR_T)\n+   write(*,*) len('A',C_INTPTR_T)\n+   write(*,*) len_trim('A',C_INTPTR_T)\n+   allocate(weevil(2,2))\n+   weevil = 42\n+   write(*,*) ceiling(weevil,C_INTPTR_T)\n+   write(*,*) floor(weevil,C_INTPTR_T)\n+   write(*,*) shape(weevil,C_INTPTR_T)\n+   write(*,*) storage_size(weevil,C_INTPTR_T)\n+end program bug1\n+"}]}