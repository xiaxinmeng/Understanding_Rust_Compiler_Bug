{"sha": "f7e4e4847c4b252bb232191d28c05439e7c85612", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdlNGU0ODQ3YzRiMjUyYmIyMzIxOTFkMjhjMDU0MzllN2M4NTYxMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-09-03T18:27:39Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-09-03T18:27:39Z"}, "message": "re PR c++/23699 (rejects static int as non constant after \"extern template\")\n\n\tPR c++/23699\n\t* decl2.c (mark_used): Always instantiate static data members\n\tinitialized by constant expressions.\n\t* pt.c (instantiate_decl): Instantiate the initializers for static\n\tdata members initialized by constant expressions.\n\nFrom-SVN: r103807", "tree": {"sha": "462c8d93c505a7da70361030d09b9e124b3fb9b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/462c8d93c505a7da70361030d09b9e124b3fb9b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7e4e4847c4b252bb232191d28c05439e7c85612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e4e4847c4b252bb232191d28c05439e7c85612", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7e4e4847c4b252bb232191d28c05439e7c85612", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e4e4847c4b252bb232191d28c05439e7c85612/comments", "author": null, "committer": null, "parents": [{"sha": "2725073463dfe4d70a5111f6723a2f4ea36ba875", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2725073463dfe4d70a5111f6723a2f4ea36ba875", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2725073463dfe4d70a5111f6723a2f4ea36ba875"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "b159077d4b0fc9c0e3d6b52294d6b8c604fe2599", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e4e4847c4b252bb232191d28c05439e7c85612/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e4e4847c4b252bb232191d28c05439e7c85612/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f7e4e4847c4b252bb232191d28c05439e7c85612", "patch": "@@ -11371,6 +11371,7 @@ instantiate_decl (tree d, int defer_ok,\n   bool pattern_defined;\n   int need_push;\n   location_t saved_loc = input_location;\n+  bool external_p;\n \n   /* This function should only be used to instantiate templates for\n      functions and static member variables.  */\n@@ -11488,17 +11489,32 @@ instantiate_decl (tree d, int defer_ok,\n       pop_access_scope (d);\n     }\n \n-  /* Do not instantiate templates that we know will be defined\n-     elsewhere.  */\n-  if (DECL_INTERFACE_KNOWN (d)\n-      && DECL_REALLY_EXTERN (d)\n-      && ! (TREE_CODE (d) == FUNCTION_DECL\n-\t    && DECL_INLINE (d)))\n+  /* Check to see whether we know that this template will be\n+     instantiated in some other file, as with \"extern template\"\n+     extension.  */\n+  external_p = (DECL_INTERFACE_KNOWN (d) && DECL_REALLY_EXTERN (d));\n+  /* In general, we do not instantiate such templates...  */\n+  if (external_p\n+      /* ... but we instantiate inline functions so that we can inline\n+\t them and ... */\n+      && ! (TREE_CODE (d) == FUNCTION_DECL && DECL_INLINE (d))\n+      /* ... we instantiate static data members whose values are\n+\t needed in integral constant expressions.  */\n+      && ! (TREE_CODE (d) == VAR_DECL \n+\t    && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (d)))\n     goto out;\n   /* Defer all other templates, unless we have been explicitly\n-     forbidden from doing so.  We restore the source position here\n-     because it's used by add_pending_template.  */\n-  else if (! pattern_defined || defer_ok)\n+     forbidden from doing so.  */\n+  if (/* If there is no definition, we cannot instantiate the\n+\t template.  */\n+      ! pattern_defined \n+      /* If it's OK to postpone instantiation, do so.  */\n+      || defer_ok\n+      /* If this is a static data member that will be defined\n+\t elsewhere, we don't want to instantiate the entire data\n+\t member, but we do want to instantiate the initializer so that\n+\t we can substitute that elsewhere.  */\n+      || (external_p && TREE_CODE (d) == VAR_DECL))\n     {\n       /* The definition of the static data member is now required so\n \t we must substitute the initializer.  */\n@@ -11514,6 +11530,8 @@ instantiate_decl (tree d, int defer_ok,\n \t  pop_nested_class ();\n \t}\n \n+      /* We restore the source position here because it's used by\n+\t add_pending_template.  */\n       input_location = saved_loc;\n \n       if (at_eof && !pattern_defined\n@@ -11528,7 +11546,10 @@ instantiate_decl (tree d, int defer_ok,\n \tpedwarn\n \t  (\"explicit instantiation of %qD but no definition available\", d);\n \n-      add_pending_template (d);\n+      /* ??? Historically, we have instantiated inline functions, even\n+\t when marked as \"extern template\".  */\n+      if (!(external_p && TREE_CODE (d) == VAR_DECL))\n+\tadd_pending_template (d);\n       goto out;\n     }\n   /* Tell the repository that D is available in this translation unit"}]}