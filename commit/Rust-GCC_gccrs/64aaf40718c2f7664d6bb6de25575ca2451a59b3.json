{"sha": "64aaf40718c2f7664d6bb6de25575ca2451a59b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRhYWY0MDcxOGMyZjc2NjRkNmJiNmRlMjU1NzVjYTI0NTFhNTliMw==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-04-08T04:00:02Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-04-08T04:00:02Z"}, "message": "cppexp.c (parse_charconst): Null does not end character constants.\n\n\t* cppexp.c (parse_charconst): Null does not end character\n\tconstants.\n\t* cppinit.c (ISTABLE): Null character handled as whitespace.\n\t* cpplex.c (null_warning):  new function.\n\t(skip_string): Emit warning if nulls encountered.\n\t(_cpp_skip_hspace): Emit warning if nulls encountered.\n\t(_cpp_lex_token): Emit warning if nulls encountered.  Drop\n\tthem.\n\t* cpp.texi: Update.\n\nFrom-SVN: r33013", "tree": {"sha": "54f1e456f876159b92452e63265ec5cc24bf17b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54f1e456f876159b92452e63265ec5cc24bf17b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64aaf40718c2f7664d6bb6de25575ca2451a59b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64aaf40718c2f7664d6bb6de25575ca2451a59b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64aaf40718c2f7664d6bb6de25575ca2451a59b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64aaf40718c2f7664d6bb6de25575ca2451a59b3/comments", "author": null, "committer": null, "parents": [{"sha": "62828c0078f54356ccc4d81136bd2ef6c68e9b7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62828c0078f54356ccc4d81136bd2ef6c68e9b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62828c0078f54356ccc4d81136bd2ef6c68e9b7b"}], "stats": {"total": 125, "additions": 107, "deletions": 18}, "files": [{"sha": "c3c5b54150322fd2a79b8a9b71a3978474184d4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64aaf40718c2f7664d6bb6de25575ca2451a59b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64aaf40718c2f7664d6bb6de25575ca2451a59b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64aaf40718c2f7664d6bb6de25575ca2451a59b3", "patch": "@@ -1,3 +1,15 @@\n+2000-04-08  Neil Booth  <NeilB@earthling.net>\n+\n+\t* cppexp.c (parse_charconst): Null does not end character\n+\tconstants.\n+\t* cppinit.c (ISTABLE): Null character handled as whitespace.\n+\t* cpplex.c (null_warning):  new function.\n+\t(skip_string): Emit warning if nulls encountered.\n+\t(_cpp_skip_hspace): Emit warning if nulls encountered.\n+\t(_cpp_lex_token): Emit warning if nulls encountered.  Drop\n+\tthem.\n+\t* cpp.texi: Update.\n+\n 2000-04-07  Richard Henderson  <rth@cygnus.com>\n \n \t* flow.c (loop_depth): Remove."}, {"sha": "e0442a1c46cb8bbbb7a45f1de575184ed31c842a", "filename": "gcc/cpp.texi", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64aaf40718c2f7664d6bb6de25575ca2451a59b3/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64aaf40718c2f7664d6bb6de25575ca2451a59b3/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=64aaf40718c2f7664d6bb6de25575ca2451a59b3", "patch": "@@ -138,6 +138,7 @@ and this may cause problems with other languages.\n \n @node Global Actions, Directives, Top, Top\n @section Transformations Made Globally\n+@cindex ASCII NUL handling\n \n Most C preprocessor features are inactive unless you give specific directives\n to request their use.  (Preprocessing directives are lines starting with\n@@ -214,6 +215,43 @@ This exception is relevant only if you use the @samp{-trigraphs}\n option to enable trigraph processing.  @xref{Invocation}.\n @end itemize\n \n+The preprocessor handles null characters embedded in the input file\n+depending upon the context in which the null appears.  Note that here we\n+are referring not to the two-character escape sequence \"\\0\", but to the\n+single character ASCII NUL.\n+\n+There are three different contexts in which a null character may\n+appear:-\n+\n+@itemize @bullet\n+@item\n+Within comments.  Here, null characters are silently ignored.\n+\n+@item\n+Within a string or character constant.  Here the preprocessor emits a\n+warning, but preserves the null character and passes it through to the\n+output file.\n+\n+@item\n+In any other context, the preprocessor issues a warning, and discards\n+the null character.  In all other respects the preprocessor treats it\n+like whitespace, combining it with any surrounding whitespace to become\n+a single whitespace token.  Representing the null character by \"^@@\",\n+this means that code like\n+\n+@example\n+#define X^@@1\n+@end example\n+\n+is equivalent to\n+\n+@example\n+#define X 1\n+@end example\n+\n+and X is defined with replacement text \"1\".\n+@end itemize\n+\n @node Directives, Header Files, Global Actions, Top\n @section Preprocessing Directives\n "}, {"sha": "31790999eef541295c7ced8805c2222d6f4c33aa", "filename": "gcc/cppexp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64aaf40718c2f7664d6bb6de25575ca2451a59b3/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64aaf40718c2f7664d6bb6de25575ca2451a59b3/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=64aaf40718c2f7664d6bb6de25575ca2451a59b3", "patch": "@@ -274,7 +274,7 @@ parse_charconst (pfile, start, end)\n   while (ptr < end)\n     {\n       c = *ptr++;\n-      if (c == '\\'' || c == '\\0')\n+      if (c == '\\'')\n \tbreak;\n       else if (c == '\\\\')\n \t{"}, {"sha": "f4391ff006d9cc3fef8fc7c073a5b1f9573754cb", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64aaf40718c2f7664d6bb6de25575ca2451a59b3/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64aaf40718c2f7664d6bb6de25575ca2451a59b3/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=64aaf40718c2f7664d6bb6de25575ca2451a59b3", "patch": "@@ -265,7 +265,7 @@ ISTABLE\n \n   N('1') N('2') N('3') N('4') N('5') N('6') N('7') N('8') N('9') N('0')\n \n-  H(' ') H('\\t') H('\\v') H('\\f')\n+  H('\\0') H(' ') H('\\t') H('\\v') H('\\f')\n \n   S('\\n')\n END"}, {"sha": "b8a1b0711619b50c76e48213f8a287111dfd626f", "filename": "gcc/cpplex.c", "status": "modified", "additions": 55, "deletions": 16, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64aaf40718c2f7664d6bb6de25575ca2451a59b3/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64aaf40718c2f7664d6bb6de25575ca2451a59b3/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=64aaf40718c2f7664d6bb6de25575ca2451a59b3", "patch": "@@ -45,6 +45,7 @@ static void skip_string\t\tPARAMS ((cpp_reader *, int));\n static void parse_string\tPARAMS ((cpp_reader *, int));\n static U_CHAR *find_position\tPARAMS ((U_CHAR *, U_CHAR *, unsigned long *));\n static int null_cleanup\t\tPARAMS ((cpp_buffer *, cpp_reader *));\n+static void null_warning        PARAMS ((cpp_reader *, unsigned int));\n \n /* Re-allocates PFILE->token_buffer so it will hold at least N more chars.  */\n \n@@ -381,23 +382,38 @@ copy_comment (pfile, m)\n   return ' ';\n }\n \n+static void\n+null_warning (pfile, count)\n+     cpp_reader *pfile;\n+     unsigned int count;\n+{\n+  if (count == 1)\n+    cpp_warning (pfile, \"embedded null character ignored\");\n+  else\n+    cpp_warning (pfile, \"embedded null characters ignored\");\n+}\n+\n /* Skip whitespace \\-newline and comments.  Does not macro-expand.  */\n \n void\n _cpp_skip_hspace (pfile)\n      cpp_reader *pfile;\n {\n+  unsigned int null_count = 0;\n   int c;\n+\n   while (1)\n     {\n       c = GETC();\n       if (c == EOF)\n-\treturn;\n+\tgoto out;\n       else if (is_hspace(c))\n \t{\n \t  if ((c == '\\f' || c == '\\v') && CPP_PEDANTIC (pfile))\n \t    cpp_pedwarn (pfile, \"%s in preprocessing directive\",\n \t\t\t c == '\\f' ? \"formfeed\" : \"vertical tab\");\n+\t  else if (c == '\\0')\n+\t    null_count++;\n \t}\n       else if (c == '\\r')\n \t{\n@@ -423,6 +439,9 @@ _cpp_skip_hspace (pfile)\n \tbreak;\n     }\n   FORWARD(-1);\n+ out:\n+  if (null_count)\n+    null_warning (pfile, null_count);\n }\n \n /* Read and discard the rest of the current line.  */\n@@ -505,8 +524,9 @@ skip_string (pfile, c)\n      int c;\n {\n   long start_line, start_column;\n-  cpp_buf_line_and_col (cpp_file_buffer (pfile), &start_line, &start_column);\n+  unsigned int null_count = 0;\n \n+  cpp_buf_line_and_col (cpp_file_buffer (pfile), &start_line, &start_column);\n   while (1)\n     {\n       int cc = GETC();\n@@ -521,8 +541,12 @@ skip_string (pfile, c)\n \t\t\t\t pfile->multiline_string_line, -1,\n \t\t\t \"possible real start of unterminated constant\");\n \t  pfile->multiline_string_line = 0;\n-\t  return;\n+\t  goto out;\n \n+\tcase '\\0':\n+\t  null_count++;\n+\t  break;\n+\t  \n \tcase '\\n':\n \t  CPP_BUMP_LINE (pfile);\n \t  /* In Fortran and assembly language, silently terminate\n@@ -533,7 +557,7 @@ skip_string (pfile, c)\n \t      || CPP_OPTION (pfile, lang_asm))\n \t    {\n \t      FORWARD(-1);\n-\t      return;\n+\t      goto out;\n \t    }\n \t  /* Character constants may not extend over multiple lines.\n \t     In Standard C, neither may strings.  We accept multiline\n@@ -543,7 +567,7 @@ skip_string (pfile, c)\n \t      cpp_error_with_line (pfile, start_line, start_column,\n \t\t\t\t   \"unterminated character constant\");\n \t      FORWARD(-1);\n-\t      return;\n+\t      goto out;\n \t    }\n \t  if (CPP_PEDANTIC (pfile) && pfile->multiline_string_line == 0)\n \t    cpp_pedwarn_with_line (pfile, start_line, start_column,\n@@ -570,10 +594,16 @@ skip_string (pfile, c)\n \tcase '\\\"':\n \tcase '\\'':\n \t  if (cc == c)\n-\t    return;\n+\t    goto out;\n \t  break;\n \t}\n     }\n+\n+ out:\n+  if (null_count == 1)\n+    cpp_warning (pfile, \"null character in string or character constant\");\n+  else if (null_count > 1)\n+    cpp_warning (pfile, \"null characters in string or character constant\");\n }\n \n /* Parse a string and copy it to the output.  */\n@@ -976,16 +1006,25 @@ _cpp_lex_token (pfile)\n     _cpp_parse_name (pfile, c);\n     return CPP_MACRO;\n \n-    case ' ': case '\\t': case '\\v': case '\\f':\n-      for (;;)\n-\t{\n-\t  CPP_PUTC (pfile, c);\n-\t  c = PEEKC ();\n-\t  if (c == EOF || !is_hspace(c))\n-\t    break;\n-\t  FORWARD(1);\n-\t}\n-      return CPP_HSPACE;\n+    case ' ':  case '\\t':  case '\\v': case '\\f': case '\\0':\n+      {\n+\tint null_count = 0;\n+\n+\tfor (;;)\n+\t  {\n+\t    if (c == '\\0')\n+\t      null_count++;\n+\t    else\n+\t      CPP_PUTC (pfile, c);\n+\t    c = PEEKC ();\n+\t    if (c == EOF || !is_hspace(c))\n+\t      break;\n+\t    FORWARD(1);\n+\t  }\n+\tif (null_count)\n+\t  null_warning (pfile, null_count);\n+\treturn CPP_HSPACE;\n+      }\n \n     case '\\r':\n       if (CPP_BUFFER (pfile)->has_escapes)"}]}