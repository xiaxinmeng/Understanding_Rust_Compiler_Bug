{"sha": "cc4b51708785f9482c6b2874daafa4fcc121d5d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M0YjUxNzA4Nzg1Zjk0ODJjNmIyODc0ZGFhZmE0ZmNjMTIxZDVkMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-10-07T14:34:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-10-07T14:34:44Z"}, "message": "target.def (units_per_simd_word): Rename to ...\n\n2010-10-07  Richard Guenther  <rguenther@suse.de>\n\n\t* target.def (units_per_simd_word): Rename to ...\n\t(preferred_simd_mode): ... this.  Return mode instead of size.\n\t* targhooks.c (default_units_per_simd_word): Rename to ...\n\t(default_preferred_simd_mode): ... this.  Return word_mode.\n\t* targhooks.h (default_preferred_simd_mode): Declare.\n\t* config/arm/arm.c (arm_units_per_simd_word): Rename to ...\n\t(arm_preferred_simd_mode): ... this.  Re-implement.\n\t* config/i386/i386.c (ix86_units_per_simd_word): Rename to ...\n\t(ix86_preferred_simd_mode): ... this.  Re-implement.\n\t* config/sparc/sparc.c (sparc_units_per_simd_word): Rename to ...\n\t(sparc_preferred_simd_mode): ... this.  Re-implement.\n\t* config/mips/mips.c (mips_units_per_simd_word): Rename to ...\n\t(mips_preferred_simd_mode): ... this.  Re-implement.\n\t* config/rs6000/rs6000.c (rs6000_units_per_simd_word): Rename to ...\n\t(rs6000_preferred_simd_mode): ... this.  Re-implement.\n\t* tree-vect-stmts.c (get_vectype_for_scalar_type): Adjust.\n\t* doc/tm.texi.in (TARGET_VECTORIZE_UNITS_PER_SIMD_WORD): Remove.\n\t(TARGET_VECTORIZE_PREFERRED_SIMD_MODE): Document.\n\t* doc/tm.texi: Update.\n\nFrom-SVN: r165114", "tree": {"sha": "e369542c279196e8b7be20440bc887cf9eed16f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e369542c279196e8b7be20440bc887cf9eed16f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc4b51708785f9482c6b2874daafa4fcc121d5d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4b51708785f9482c6b2874daafa4fcc121d5d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc4b51708785f9482c6b2874daafa4fcc121d5d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4b51708785f9482c6b2874daafa4fcc121d5d1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "65dcb9012117bf260ab72b9703e659685e9877e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65dcb9012117bf260ab72b9703e659685e9877e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65dcb9012117bf260ab72b9703e659685e9877e4"}], "stats": {"total": 255, "additions": 186, "deletions": 69}, "files": [{"sha": "20df6bb94b21877cde2dc737532570ef0f467efc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc4b51708785f9482c6b2874daafa4fcc121d5d1", "patch": "@@ -1,3 +1,25 @@\n+2010-10-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* target.def (units_per_simd_word): Rename to ...\n+\t(preferred_simd_mode): ... this.  Return mode instead of size.\n+\t* targhooks.c (default_units_per_simd_word): Rename to ...\n+\t(default_preferred_simd_mode): ... this.  Return word_mode.\n+\t* targhooks.h (default_preferred_simd_mode): Declare.\n+\t* config/arm/arm.c (arm_units_per_simd_word): Rename to ...\n+\t(arm_preferred_simd_mode): ... this.  Re-implement.\n+\t* config/i386/i386.c (ix86_units_per_simd_word): Rename to ...\n+\t(ix86_preferred_simd_mode): ... this.  Re-implement.\n+\t* config/sparc/sparc.c (sparc_units_per_simd_word): Rename to ...\n+\t(sparc_preferred_simd_mode): ... this.  Re-implement.\n+\t* config/mips/mips.c (mips_units_per_simd_word): Rename to ...\n+\t(mips_preferred_simd_mode): ... this.  Re-implement.\n+\t* config/rs6000/rs6000.c (rs6000_units_per_simd_word): Rename to ...\n+\t(rs6000_preferred_simd_mode): ... this.  Re-implement.\n+\t* tree-vect-stmts.c (get_vectype_for_scalar_type): Adjust.\n+\t* doc/tm.texi.in (TARGET_VECTORIZE_UNITS_PER_SIMD_WORD): Remove.\n+\t(TARGET_VECTORIZE_PREFERRED_SIMD_MODE): Document.\n+\t* doc/tm.texi: Update.\n+\n 2010-10-07  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/45869"}, {"sha": "8ad312ed7439e4c079cde0a21da65b07c2a3f648", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=cc4b51708785f9482c6b2874daafa4fcc121d5d1", "patch": "@@ -240,7 +240,7 @@ static rtx arm_trampoline_adjust_address (rtx);\n static rtx arm_pic_static_addr (rtx orig, rtx reg);\n static bool cortex_a9_sched_adjust_cost (rtx, rtx, rtx, int *);\n static bool xscale_sched_adjust_cost (rtx, rtx, rtx, int *);\n-static unsigned int arm_units_per_simd_word (enum machine_mode);\n+static enum machine_mode arm_preferred_simd_mode (enum machine_mode);\n static bool arm_class_likely_spilled_p (reg_class_t);\n static bool arm_vector_alignment_reachable (const_tree type, bool is_packed);\n static bool arm_builtin_support_vector_misalignment (enum machine_mode mode,\n@@ -381,8 +381,8 @@ static const struct attribute_spec arm_attribute_table[] =\n #define TARGET_SHIFT_TRUNCATION_MASK arm_shift_truncation_mask\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P arm_vector_mode_supported_p\n-#undef TARGET_VECTORIZE_UNITS_PER_SIMD_WORD\n-#define TARGET_VECTORIZE_UNITS_PER_SIMD_WORD arm_units_per_simd_word\n+#undef TARGET_VECTORIZE_PREFERRED_SIMD_MODE\n+#define TARGET_VECTORIZE_PREFERRED_SIMD_MODE arm_preferred_simd_mode\n \n #undef  TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG arm_reorg\n@@ -21998,11 +21998,42 @@ arm_vector_mode_supported_p (enum machine_mode mode)\n    registers when autovectorizing for Neon, at least until multiple vector\n    widths are supported properly by the middle-end.  */\n \n-static unsigned int\n-arm_units_per_simd_word (enum machine_mode mode ATTRIBUTE_UNUSED)\n+static enum machine_mode\n+arm_preferred_simd_mode (enum machine_mode mode)\n {\n-  return (TARGET_NEON\n-\t  ? (TARGET_NEON_VECTORIZE_QUAD ? 16 : 8) : UNITS_PER_WORD);\n+  if (TARGET_NEON)\n+    switch (mode)\n+      {\n+      case SFmode:\n+\treturn TARGET_NEON_VECTORIZE_QUAD ? V4SFmode : V2SFmode;\n+      case SImode:\n+\treturn TARGET_NEON_VECTORIZE_QUAD ? V4SImode : V2SImode;\n+      case HImode:\n+\treturn TARGET_NEON_VECTORIZE_QUAD ? V8HImode : V4HImode;\n+      case QImode:\n+\treturn TARGET_NEON_VECTORIZE_QUAD ? V16QImode : V8QImode;\n+      case DImode:\n+\tif (TARGET_NEON_VECTORIZE_QUAD)\n+\t  return V2DImode;\n+\tbreak;\n+\n+      default:;\n+      }\n+\n+  if (TARGET_REALLY_IWMMXT)\n+    switch (mode)\n+      {\n+      case SImode:\n+\treturn V2SImode;\n+      case HImode:\n+\treturn V4HImode;\n+      case QImode:\n+\treturn V8QImode;\n+\n+      default:;\n+      }\n+\n+  return word_mode;\n }\n \n /* Implement TARGET_CLASS_LIKELY_SPILLED_P."}, {"sha": "74ded78f800e12d94f526f4ce8d75e055dc96ab7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cc4b51708785f9482c6b2874daafa4fcc121d5d1", "patch": "@@ -32962,23 +32962,35 @@ has_dispatch (rtx insn, int action)\n /* ??? No autovectorization into MMX or 3DNOW until we can reliably\n    place emms and femms instructions.  */\n \n-static unsigned int\n-ix86_units_per_simd_word (enum machine_mode mode)\n+static enum machine_mode\n+ix86_preferred_simd_mode (enum machine_mode mode)\n {\n   /* Disable double precision vectorizer if needed.  */\n   if (mode == DFmode && !TARGET_VECTORIZE_DOUBLE)\n-    return UNITS_PER_WORD;\n+    return word_mode;\n \n-#if 0\n-  /*  FIXME: AVX has 32byte floating point vector operations and 16byte\n-      integer vector operations.  But vectorizer doesn't support\n-      different sizes for integer and floating point vectors.  We limit\n-      vector size to 16byte.  */\n-  if (TARGET_AVX)\n-    return (mode == DFmode || mode == SFmode) ? 32 : 16;\n-  else\n-#endif\n-    return TARGET_SSE ? 16 : UNITS_PER_WORD;\n+  if (!TARGET_AVX && !TARGET_SSE)\n+    return word_mode;\n+\n+  switch (mode)\n+    {\n+    case SFmode:\n+      return TARGET_AVX ? V8SFmode : V4SFmode;\n+    case DFmode:\n+      return TARGET_AVX ? V4DFmode : V2DFmode;\n+    case DImode:\n+      return V2DImode;\n+    case SImode:\n+      return V4SImode;\n+    case HImode:\n+      return V8HImode;\n+    case QImode:\n+      return V16QImode;\n+\n+    default:;\n+    }\n+\n+  return word_mode;\n }\n \n /* Initialize the GCC target structure.  */\n@@ -33238,9 +33250,9 @@ ix86_units_per_simd_word (enum machine_mode mode)\n #undef TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK\n #define TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK \\\n   ix86_vectorize_builtin_vec_perm_ok\n-#undef TARGET_VECTORIZE_UNITS_PER_SIMD_WORD\n-#define TARGET_VECTORIZE_UNITS_PER_SIMD_WORD \\\n-  ix86_units_per_simd_word\n+#undef TARGET_VECTORIZE_PREFERRED_SIMD_MODE\n+#define TARGET_VECTORIZE_PREFERRED_SIMD_MODE \\\n+  ix86_preferred_simd_mode\n \n #undef TARGET_SET_CURRENT_FUNCTION\n #define TARGET_SET_CURRENT_FUNCTION ix86_set_current_function"}, {"sha": "6555470dca3442a24f29f8d168cd0ceee0908c0b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=cc4b51708785f9482c6b2874daafa4fcc121d5d1", "patch": "@@ -11140,12 +11140,15 @@ mips_scalar_mode_supported_p (enum machine_mode mode)\n   return default_scalar_mode_supported_p (mode);\n }\n \f\n-/* Implement TARGET_VECTORIZE_UNITS_PER_SIMD_WORD.  */\n+/* Implement TARGET_VECTORIZE_PREFERRED_SIMD_MODE.  */\n \n-static unsigned int\n-mips_units_per_simd_word (enum machine_mode mode ATTRIBUTE_UNUSED)\n+static enum machine_mode\n+mips_preferred_simd_mode (enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n-  return TARGET_PAIRED_SINGLE_FLOAT ? 8 : UNITS_PER_WORD;\n+  if (TARGET_PAIRED_SINGLE_FLOAT\n+      && mode == SFmode)\n+    return V2SFmode;\n+  return word_mode;\n }\n \n /* Implement TARGET_INIT_LIBFUNCS.  */\n@@ -16524,8 +16527,8 @@ mips_shift_truncation_mask (enum machine_mode mode)\n #undef TARGET_SCALAR_MODE_SUPPORTED_P\n #define TARGET_SCALAR_MODE_SUPPORTED_P mips_scalar_mode_supported_p\n \n-#undef TARGET_VECTORIZE_UNITS_PER_SIMD_WORD\n-#define TARGET_VECTORIZE_UNITS_PER_SIMD_WORD mips_units_per_simd_word\n+#undef TARGET_VECTORIZE_PREFERRED_SIMD_MODE\n+#define TARGET_VECTORIZE_PREFERRED_SIMD_MODE mips_preferred_simd_mode\n \n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS mips_init_builtins"}, {"sha": "91b26124c5cc42a6ce02124705d4085a540ae84e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cc4b51708785f9482c6b2874daafa4fcc121d5d1", "patch": "@@ -1086,7 +1086,7 @@ static bool rs6000_builtin_support_vector_misalignment (enum\n \t\t\t\t\t\t\tint, bool);\n static int rs6000_builtin_vectorization_cost (enum vect_cost_for_stmt,\n                                               tree, int);\n-static unsigned int rs6000_units_per_simd_word (enum machine_mode);\n+static enum machine_mode rs6000_preferred_simd_mode (enum machine_mode);\n \n static void def_builtin (int, const char *, tree, int);\n static bool rs6000_vector_alignment_reachable (const_tree, bool);\n@@ -1492,9 +1492,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST\n #define TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST \\\n   rs6000_builtin_vectorization_cost\n-#undef TARGET_VECTORIZE_UNITS_PER_SIMD_WORD\n-#define TARGET_VECTORIZE_UNITS_PER_SIMD_WORD \\\n-  rs6000_units_per_simd_word\n+#undef TARGET_VECTORIZE_PREFERRED_SIMD_MODE\n+#define TARGET_VECTORIZE_PREFERRED_SIMD_MODE \\\n+  rs6000_preferred_simd_mode\n \n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS rs6000_init_builtins\n@@ -3595,16 +3595,46 @@ rs6000_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n     }\n }\n \n-/* Implement targetm.vectorize.units_per_simd_word.  */\n+/* Implement targetm.vectorize.preferred_simd_mode.  */\n \n-static unsigned int\n-rs6000_units_per_simd_word (enum machine_mode mode ATTRIBUTE_UNUSED)\n+static enum machine_mode\n+rs6000_preferred_simd_mode (enum machine_mode mode)\n {\n-  return (TARGET_VSX ? UNITS_PER_VSX_WORD\n-\t  : (TARGET_ALTIVEC ? UNITS_PER_ALTIVEC_WORD\n-\t     : (TARGET_SPE ? UNITS_PER_SPE_WORD\n-\t\t: (TARGET_PAIRED_FLOAT ? UNITS_PER_PAIRED_WORD\n-\t\t   : UNITS_PER_WORD))));\n+  if (TARGET_VSX)\n+    switch (mode)\n+      {\n+      case DFmode:\n+\treturn V2DFmode;\n+      default:;\n+      }\n+  if (TARGET_ALTIVEC || TARGET_VSX)\n+    switch (mode)\n+      {\n+      case SFmode:\n+\treturn V4SFmode;\n+      case DImode:\n+\treturn V2DImode;\n+      case SImode:\n+\treturn V4SImode;\n+      case HImode:\n+\treturn V8HImode;\n+      case QImode:\n+\treturn V16QImode;\n+      default:;\n+      }\n+  if (TARGET_SPE)\n+    switch (mode)\n+      {\n+      case SFmode:\n+\treturn V2SFmode;\n+      case SImode:\n+\treturn V2SImode;\n+      default:;\n+      }\n+  if (TARGET_PAIRED_FLOAT\n+      && mode == SFmode)\n+    return V2SFmode;\n+  return word_mode;\n }\n \n /* Handle generic options of the form -mfoo=yes/no."}, {"sha": "d672d8f6e3ef4e50cd0ae04d93052365ecf347a2", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=cc4b51708785f9482c6b2874daafa4fcc121d5d1", "patch": "@@ -435,7 +435,7 @@ static bool sparc_can_eliminate (const int, const int);\n static const char *sparc_mangle_type (const_tree);\n #endif\n static void sparc_trampoline_init (rtx, tree, rtx);\n-static unsigned int sparc_units_per_simd_word (enum machine_mode);\n+static enum machine_mode sparc_preferred_simd_mode (enum machine_mode);\n \f\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n /* Table of valid machine attributes.  */\n@@ -573,8 +573,8 @@ static bool fpu_option_set = false;\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P sparc_vector_mode_supported_p\n \n-#undef TARGET_VECTORIZE_UNITS_PER_SIMD_WORD\n-#define TARGET_VECTORIZE_UNITS_PER_SIMD_WORD sparc_units_per_simd_word\n+#undef TARGET_VECTORIZE_PREFERRED_SIMD_MODE\n+#define TARGET_VECTORIZE_PREFERRED_SIMD_MODE sparc_preferred_simd_mode\n \n #undef TARGET_DWARF_HANDLE_FRAME_UNSPEC\n #define TARGET_DWARF_HANDLE_FRAME_UNSPEC sparc_dwarf_handle_frame_unspec\n@@ -6244,12 +6244,25 @@ sparc_vector_mode_supported_p (enum machine_mode mode)\n   return TARGET_VIS && VECTOR_MODE_P (mode) ? true : false;\n }\n \f\n-/* Implement the TARGET_VECTORIZE_UNITS_PER_SIMD_WORD target hook.  */\n+/* Implement the TARGET_VECTORIZE_PREFERRED_SIMD_MODE target hook.  */\n \n-static unsigned int\n-sparc_units_per_simd_word (enum machine_mode mode ATTRIBUTE_UNUSED)\n+static enum machine_mode\n+sparc_preferred_simd_mode (enum machine_mode mode)\n {\n-  return TARGET_VIS ? 8 : UNITS_PER_WORD;\n+  if (TARGET_VIS)\n+    switch (mode)\n+      {\n+      case SImode:\n+\treturn V2SImode;\n+      case HImode:\n+\treturn V4HImode;\n+      case QImode:\n+\treturn V8QImode;\n+\n+      default:;\n+      }\n+\n+  return word_mode;\n }\n \f\n /* Return the string to output an unconditional branch to LABEL, which is"}, {"sha": "afa1971695e19c9bfc951404892a2feacddb15fb", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=cc4b51708785f9482c6b2874daafa4fcc121d5d1", "patch": "@@ -5743,10 +5743,10 @@ the elements in the vectors should be of type @var{type}.  @var{is_packed}\n parameter is true if the memory access is defined in a packed struct.\n @end deftypefn\n \n-@deftypefn {Target Hook} {unsigned int} TARGET_VECTORIZE_UNITS_PER_SIMD_WORD (enum machine_mode @var{mode})\n-This hook should return th number of units in the vectors that the\n-vectorizer can produce for scalar mode @var{mode}.  The default is\n-equal to @code{UNITS_PER_WORD}, because the vectorizer can do some\n+@deftypefn {Target Hook} {enum machine_mode} TARGET_VECTORIZE_PREFERRED_SIMD_MODE (enum machine_mode @var{mode})\n+This hook should return the preferred mode for vectorizing scalar\n+mode @var{mode}.  The default is\n+equal to @code{word_mode}, because the vectorizer can do some\n transformations even in absence of specialized @acronym{SIMD} hardware.\n @end deftypefn\n "}, {"sha": "8489027e41b674310ea73fddd8e123d3baa9c100", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=cc4b51708785f9482c6b2874daafa4fcc121d5d1", "patch": "@@ -5741,10 +5741,10 @@ the elements in the vectors should be of type @var{type}.  @var{is_packed}\n parameter is true if the memory access is defined in a packed struct.\n @end deftypefn\n \n-@hook TARGET_VECTORIZE_UNITS_PER_SIMD_WORD\n-This hook should return th number of units in the vectors that the\n-vectorizer can produce for scalar mode @var{mode}.  The default is\n-equal to @code{UNITS_PER_WORD}, because the vectorizer can do some\n+@hook TARGET_VECTORIZE_PREFERRED_SIMD_MODE\n+This hook should return the preferred mode for vectorizing scalar\n+mode @var{mode}.  The default is\n+equal to @code{word_mode}, because the vectorizer can do some\n transformations even in absence of specialized @acronym{SIMD} hardware.\n @end deftypefn\n "}, {"sha": "f104ae8069ebe0bbb9730db86c0b3c32b4bc0026", "filename": "gcc/target.def", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=cc4b51708785f9482c6b2874daafa4fcc121d5d1", "patch": "@@ -880,13 +880,14 @@ DEFHOOK\n  (enum machine_mode mode, const_tree type, int misalignment, bool is_packed),\n  default_builtin_support_vector_misalignment)\n \n-/* Return units per SIMD word.  */\n+/* Returns the preferred mode for SIMD operations for the specified\n+   scalar mode.  */\n DEFHOOK\n-(units_per_simd_word,\n+(preferred_simd_mode,\n  \"\",\n- unsigned int,\n+ enum machine_mode,\n  (enum machine_mode mode),\n- default_units_per_simd_word)\n+ default_preferred_simd_mode)\n \n HOOK_VECTOR_END (vectorize)\n "}, {"sha": "0a65b2acc9235fc399fcc158a99eb318269ed0fe", "filename": "gcc/targhooks.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=cc4b51708785f9482c6b2874daafa4fcc121d5d1", "patch": "@@ -979,10 +979,10 @@ default_builtin_support_vector_misalignment (enum machine_mode mode,\n /* By default, only attempt to parallelize bitwise operations, and\n    possibly adds/subtracts using bit-twiddling.  */\n \n-unsigned int\n-default_units_per_simd_word (enum machine_mode mode ATTRIBUTE_UNUSED)\n+enum machine_mode\n+default_preferred_simd_mode (enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n-  return UNITS_PER_WORD;\n+  return word_mode;\n }\n \n /* Determine whether or not a pointer mode is valid. Assume defaults"}, {"sha": "a705d7e8586bb15f6e428bde79e9ec0b84d1bf1b", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=cc4b51708785f9482c6b2874daafa4fcc121d5d1", "patch": "@@ -86,7 +86,7 @@ extern bool\n default_builtin_support_vector_misalignment (enum machine_mode mode,\n \t\t\t\t\t     const_tree,\n \t\t\t\t\t     int, bool);\n-extern unsigned int default_units_per_simd_word (enum machine_mode mode);\n+extern enum machine_mode default_preferred_simd_mode (enum machine_mode mode);\n \n /* These are here, and not in hooks.[ch], because not all users of\n    hooks.h include tm.h, and thus we don't have CUMULATIVE_ARGS.  */"}, {"sha": "8fba200f874201c4abf4da173e051badb6eab681", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4b51708785f9482c6b2874daafa4fcc121d5d1/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=cc4b51708785f9482c6b2874daafa4fcc121d5d1", "patch": "@@ -4793,12 +4793,12 @@ tree\n get_vectype_for_scalar_type (tree scalar_type)\n {\n   enum machine_mode inner_mode = TYPE_MODE (scalar_type);\n+  enum machine_mode simd_mode;\n   unsigned int nbytes = GET_MODE_SIZE (inner_mode);\n   int nunits;\n   tree vectype;\n \n-  if (nbytes == 0\n-      || (nbytes >= targetm.vectorize.units_per_simd_word (inner_mode)))\n+  if (nbytes == 0)\n     return NULL_TREE;\n \n   /* We can't build a vector type of elements with alignment bigger than\n@@ -4814,9 +4814,14 @@ get_vectype_for_scalar_type (tree scalar_type)\n       && GET_MODE_BITSIZE (inner_mode) != TYPE_PRECISION (scalar_type))\n     return NULL_TREE;\n \n-  /* FORNOW: Only a single vector size per mode\n-    (TARGET_VECTORIZE_UNITS_PER_SIMD_WORD) is expected.  */\n-  nunits = targetm.vectorize.units_per_simd_word (inner_mode) / nbytes;\n+  if (GET_MODE_CLASS (inner_mode) != MODE_INT\n+      && GET_MODE_CLASS (inner_mode) != MODE_FLOAT)\n+    return NULL_TREE;\n+\n+  simd_mode = targetm.vectorize.preferred_simd_mode (inner_mode);\n+  nunits = GET_MODE_SIZE (simd_mode) / nbytes;\n+  if (nunits <= 1)\n+    return NULL_TREE;\n \n   vectype = build_vector_type (scalar_type, nunits);\n   if (vect_print_dump_info (REPORT_DETAILS))"}]}