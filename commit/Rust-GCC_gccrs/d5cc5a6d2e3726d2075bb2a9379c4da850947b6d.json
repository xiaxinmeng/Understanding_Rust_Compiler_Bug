{"sha": "d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "node_id": "C_kwDOANBUbNoAKGQ1Y2M1YTZkMmUzNzI2ZDIwNzViYjJhOTM3OWM0ZGE4NTA5NDdiNmQ", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-10-10T08:19:38Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:06:13Z"}, "message": "arm: improve tests and fix vdwdupq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vdwdupq_m_wb_u<mode>_insn): Fix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u16.c : Improve test.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u8.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u16.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u8.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_n_u16.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_n_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_n_u8.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_wb_u16.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_wb_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_wb_u8.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u8.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u16.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u8.c : Likewise.", "tree": {"sha": "cddadff2587f1da32f03ea21d4a557f1f80fa40d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cddadff2587f1da32f03ea21d4a557f1f80fa40d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3f4295ad19f205862fe21ab49db090e7d295557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f4295ad19f205862fe21ab49db090e7d295557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f4295ad19f205862fe21ab49db090e7d295557"}], "stats": {"total": 758, "additions": 655, "deletions": 103}, "files": [{"sha": "58ffe03c4995412e4f7293d2295f4042ec79a781", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -9195,7 +9195,7 @@\n \t VDWDUPQ_M))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vpst\\;\\tvdwdupt.u%#<V_sz_elem>\\t%q2, %3, %R4, %5\"\n+  \"vpst\\;vdwdupt.u%#<V_sz_elem>\\t%q2, %3, %R4, %5\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n "}, {"sha": "8f53f5ef0cbf1cca5ca266b85b731bbd043b2e36", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u16.c", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u16.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_m (inactive, a, b, 1, p);\n+  return vdwdupq_m_n_u16 (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n {\n   return vdwdupq_m (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t inactive, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, 1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "30e971fb7331a6933fb627def865dbe079ccc23c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u32.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u32.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_m (inactive, a, b, 4, p);\n+  return vdwdupq_m_n_u32 (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_m (inactive, a, b, 4, p);\n+  return vdwdupq_m (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t inactive, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, 1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0abc19a231854edafb6472b55f84194c0e278d1e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_m_n_u8.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_n_u8.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_m (inactive, a, b, 4, p);\n+  return vdwdupq_m_n_u8 (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_m (inactive, a, b, 4, p);\n+  return vdwdupq_m (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t inactive, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, 1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b3e6affbf8f61a0e7d454daff6bd0340b8125578", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u16.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u16.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n-foo (uint16x8_t inactive, uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo (uint16x8_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_m (inactive, a, b, 8, p);\n+  return vdwdupq_m_wb_u16 (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n-foo1 (uint16x8_t inactive, uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo1 (uint16x8_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_m (inactive, a, b, 8, p);\n+  return vdwdupq_m (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t inactive, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, 1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "60c52b0d850a36bb8c827bad695529a5d1e4baaa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u32.c", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u32.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n-foo (uint32x4_t inactive, uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo (uint32x4_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_m (inactive, a, b, 1, p);\n+  return vdwdupq_m_wb_u32 (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n-foo1 (uint32x4_t inactive, uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo1 (uint32x4_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n   return vdwdupq_m (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t inactive, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, 1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "459321a7984062b21ee4aadf0f065ebab77285bd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_m_wb_u8.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_m_wb_u8.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n-foo (uint8x16_t inactive, uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo (uint8x16_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_m (inactive, a, b, 2, p);\n+  return vdwdupq_m_wb_u8 (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n-foo1 (uint8x16_t inactive, uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo1 (uint8x16_t inactive, uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_m (inactive, a, b, 2, p);\n+  return vdwdupq_m (inactive, a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t inactive, mve_pred16_t p)\n+{\n+  return vdwdupq_m (inactive, 1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9f76dbf35ebc3193f76754c0b739b36ea9bc319a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_n_u16.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u16.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvdwdup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint32_t a, uint32_t b)\n {\n-  return vdwdupq_n_u16 (a, b, 2);\n+  return vdwdupq_n_u16 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vdwdup.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvdwdup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint32_t a, uint32_t b)\n {\n-  return vdwdupq_u16 (a, b, 2);\n+  return vdwdupq_u16 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vdwdup.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvdwdup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 ()\n+{\n+  return vdwdupq_u16 (1, 1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "962f766b496445357b814dcb39f4dc443767f5fc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_n_u32.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u32.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvdwdup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32_t a, uint32_t b)\n {\n-  return vdwdupq_n_u32 (a, b, 8);\n+  return vdwdupq_n_u32 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vdwdup.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvdwdup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32_t a, uint32_t b)\n {\n-  return vdwdupq_u32 (a, b, 8);\n+  return vdwdupq_u32 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vdwdup.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvdwdup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 ()\n+{\n+  return vdwdupq_u32 (1, 1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c73b1b6966136ec02abcd0ea3200619efbe82922", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_n_u8.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_n_u8.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvdwdup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint32_t a, uint32_t b)\n {\n-  return vdwdupq_n_u8 (a, b, 4);\n+  return vdwdupq_n_u8 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vdwdup.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvdwdup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint32_t a, uint32_t b)\n {\n-  return vdwdupq_u8 (a, b, 4);\n+  return vdwdupq_u8 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vdwdup.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvdwdup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 ()\n+{\n+  return vdwdupq_u8 (1, 1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3b1968d78aa3360f104e70383e99f5f390481eb6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_wb_u16.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u16.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvdwdup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint32_t *a, uint32_t b)\n {\n-  return vdwdupq_wb_u16 (a, b, 2);\n+  return vdwdupq_wb_u16 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vdwdup.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvdwdup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint32_t *a, uint32_t b)\n {\n-  return vdwdupq_u16 (a, b, 2);\n+  return vdwdupq_u16 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vdwdup.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvdwdup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 ()\n+{\n+  return vdwdupq_u16 (1, 1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "8554f62ee6b23011465365954758f6aaf54529c5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_wb_u32.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u32.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvdwdup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32_t *a, uint32_t b)\n {\n-  return vdwdupq_wb_u32 (a, b, 8);\n+  return vdwdupq_wb_u32 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vdwdup.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvdwdup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32_t *a, uint32_t b)\n {\n-  return vdwdupq_u32 (a, b, 8);\n+  return vdwdupq_u32 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vdwdup.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvdwdup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 ()\n+{\n+  return vdwdupq_u32 (1, 1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "eb91a80daf514f5d607f7b128075fde7b19fcdbf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_wb_u8.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_wb_u8.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvdwdup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint32_t *a, uint32_t b)\n {\n-  return vdwdupq_wb_u8 (a, b, 4);\n+  return vdwdupq_wb_u8 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vdwdup.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvdwdup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint32_t *a, uint32_t b)\n {\n-  return vdwdupq_u8 (a, b, 4);\n+  return vdwdupq_u8 (a, b, 1);\n }\n \n-/* { dg-final { scan-assembler \"vdwdup.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvdwdup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 ()\n+{\n+  return vdwdupq_u8 (1, 1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9c0fd1e253cb7f0ee5cc3fc3f1bdb913de7c04ae", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u16.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u16.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint32_t a, uint32_t b, mve_pred16_t p)\n {\n   return vdwdupq_x_n_u16 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint32_t a, uint32_t b, mve_pred16_t p)\n {\n   return vdwdupq_x_u16 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (mve_pred16_t p)\n+{\n+  return vdwdupq_x_u16 (1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3107e2fdbbebf53dd91138db6f70524010cec410", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u32.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u32.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_x_n_u32 (a, b, 4, p);\n+  return vdwdupq_x_n_u32 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_x_u32 (a, b, 4, p);\n+  return vdwdupq_x_u32 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (mve_pred16_t p)\n+{\n+  return vdwdupq_x_u32 (1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "03d01e0dd4329d5812ee80579c000db1486e8845", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u8.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u8.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_x_n_u8 (a, b, 4, p);\n+  return vdwdupq_x_n_u8 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint32_t a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_x_u8 (a, b, 4, p);\n+  return vdwdupq_x_u8 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (mve_pred16_t p)\n+{\n+  return vdwdupq_x_u8 (1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f7dca660c03815f7387a7234b21780d906c9c897", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u16.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u16.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n-foo (uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo (uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_x_wb_u16 (a, b, 8, p);\n+  return vdwdupq_x_wb_u16 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n-foo1 (uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo1 (uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_x_u16 (a, b, 8, p);\n+  return vdwdupq_x_u16 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (mve_pred16_t p)\n+{\n+  return vdwdupq_x_u16 (1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "032ae94e8c30e2608f4cf054aafb42f8b4ce4f0a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u32.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u32.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n-foo (uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo (uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n   return vdwdupq_x_wb_u32 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n-foo1 (uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo1 (uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n   return vdwdupq_x_u32 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (mve_pred16_t p)\n+{\n+  return vdwdupq_x_u32 (1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5d238a7a8659a0b7ed7fed458747da146022f2c0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u8.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u8.c?ref=d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n-foo (uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo (uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_x_wb_u8 (a, b, 2, p);\n+  return vdwdupq_x_wb_u8 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n-foo1 (uint32_t * a, uint32_t b, mve_pred16_t p)\n+foo1 (uint32_t *a, uint32_t b, mve_pred16_t p)\n {\n-  return vdwdupq_x_u8 (a, b, 2, p);\n+  return vdwdupq_x_u8 (a, b, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vdwdupt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvdwdupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (mve_pred16_t p)\n+{\n+  return vdwdupq_x_u8 (1, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}