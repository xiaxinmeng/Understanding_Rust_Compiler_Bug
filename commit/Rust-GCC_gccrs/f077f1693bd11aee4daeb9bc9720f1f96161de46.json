{"sha": "f077f1693bd11aee4daeb9bc9720f1f96161de46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA3N2YxNjkzYmQxMWFlZTRkYWViOWJjOTcyMGYxZjk2MTYxZGU0Ng==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2003-01-15T22:50:41Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2003-01-15T22:50:41Z"}, "message": "m68hc11.h (ASM_SPEC): Handle -m68hcs12...\n\n\t* config/m68hc11/m68hc11.h (ASM_SPEC): Handle -m68hcs12; Pass -mshort\n\tand -mshort-double to the assembler to specify the ABI.\n\t(LINK_SPEC): Likewise.\n\t(CPP_SPEC): Pass HCS12 specific define.\n\t(MASK_M68S12): New define.\n\t(TARGET_M68S12): Likewise.\n\t(TARGET_SWITCHES): New options -m68hcs12 and -m68S12.\n\t(TARGET_VERSION): Update.\n\t* config/m68hc11/m68hc12.h (CPP_SPEC): Pass HCS12 specific define.\n\t(LINK_SPEC): Update.\n\t(ASM_SPEC): Update.\n\t* config/m68hc11/m68hc11.c (m68hc11_asm_file_start): Update.\n\t* doc/invoke.texi (M68hc1x Options): Document -m68hcs12.\n\nFrom-SVN: r61358", "tree": {"sha": "12c38b19c0fe8b1b2bebc77e0833956cc4ad0fe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12c38b19c0fe8b1b2bebc77e0833956cc4ad0fe7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f077f1693bd11aee4daeb9bc9720f1f96161de46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f077f1693bd11aee4daeb9bc9720f1f96161de46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f077f1693bd11aee4daeb9bc9720f1f96161de46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f077f1693bd11aee4daeb9bc9720f1f96161de46/comments", "author": null, "committer": null, "parents": [{"sha": "09d096a8d7f2822f73cb60fae6748df3e76b2835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09d096a8d7f2822f73cb60fae6748df3e76b2835", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09d096a8d7f2822f73cb60fae6748df3e76b2835"}], "stats": {"total": 81, "additions": 64, "deletions": 17}, "files": [{"sha": "ca7b57f18dc4ac80adea99890fa31d0a6bc8cab3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f077f1693bd11aee4daeb9bc9720f1f96161de46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f077f1693bd11aee4daeb9bc9720f1f96161de46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f077f1693bd11aee4daeb9bc9720f1f96161de46", "patch": "@@ -1,3 +1,19 @@\n+2003-01-15  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* config/m68hc11/m68hc11.h (ASM_SPEC): Handle -m68hcs12; Pass -mshort\n+\tand -mshort-double to the assembler to specify the ABI.\n+\t(LINK_SPEC): Likewise.\n+\t(CPP_SPEC): Pass HCS12 specific define.\n+\t(MASK_M68S12): New define.\n+\t(TARGET_M68S12): Likewise.\n+\t(TARGET_SWITCHES): New options -m68hcs12 and -m68S12.\n+\t(TARGET_VERSION): Update.\n+\t* config/m68hc11/m68hc12.h (CPP_SPEC): Pass HCS12 specific define.\n+\t(LINK_SPEC): Update.\n+\t(ASM_SPEC): Update.\n+\t* config/m68hc11/m68hc11.c (m68hc11_asm_file_start): Update.\n+\t* doc/invoke.texi (M68hc1x Options): Document -m68hcs12.\n+\n 2003-01-15  Stephane Carrez  <stcarrez@nerim.fr>\n \n \t* config/m68hc11/m68hc11.md (\"return\"): Use emit_jump_insn to emit"}, {"sha": "cb9593fe23862c4034620506cdabdbde5213ab2a", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f077f1693bd11aee4daeb9bc9720f1f96161de46/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f077f1693bd11aee4daeb9bc9720f1f96161de46/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=f077f1693bd11aee4daeb9bc9720f1f96161de46", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for code generation on Motorola 68HC11 and 68HC12.\n-   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@nerim.fr)\n \n This file is part of GNU CC.\n@@ -5509,7 +5509,10 @@ m68hc11_asm_file_start (out, main_file)\n      const char *main_file;\n {\n   fprintf (out, \";;;-----------------------------------------\\n\");\n-  fprintf (out, \";;; Start MC68HC11 gcc assembly output\\n\");\n+  fprintf (out, \";;; Start %s gcc assembly output\\n\",\n+           TARGET_M6811\n+           ? \"MC68HC11\"\n+           : TARGET_M68S12 ? \"MC68HCS12\" : \"MC68HC12\");\n   fprintf (out, \";;; gcc compiler %s\\n\", version_string);\n   print_options (out);\n   fprintf (out, \";;;-----------------------------------------\\n\");"}, {"sha": "2c72cec1d431eb9dd20e866906f2cadbec0c2c9e", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f077f1693bd11aee4daeb9bc9720f1f96161de46/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f077f1693bd11aee4daeb9bc9720f1f96161de46/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=f077f1693bd11aee4daeb9bc9720f1f96161de46", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Motorola 68HC11 and 68HC12.\n-   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@nerim.fr)\n \n This file is part of GNU CC.\n@@ -43,13 +43,22 @@ Boston, MA 02111-1307, USA.\n \n /* Compile and assemble for a 68hc11 unless there is a -m68hc12 option.  */\n #ifndef ASM_SPEC\n-#define ASM_SPEC       \"%{m68hc12:-m68hc12}%{!m68hc12:-m68hc11}\"\n+#define ASM_SPEC                                                \\\n+\"%{m68hc12:-m68hc12}\"                                           \\\n+\"%{m68hcs12:-m68hcs12}\"                                         \\\n+\"%{!m68hc12:%{!m68hcs12:-m68hc11}} \"                            \\\n+\"%{mshort:-mshort}%{!mshort:-mlong} \"                           \\\n+\"%{fshort-double:-mshort-double}%{!fshort-double:-mlong-double}\"\n #endif\n \n /* We need to tell the linker the target elf format.  Just pass an\n    emulation option.  This can be overridden by -Wl option of gcc.  */\n #ifndef LINK_SPEC\n-#define LINK_SPEC      \"%{m68hc12:-m m68hc12elf}%{!m68hc12:-m m68hc11elf} %{mrelax:-relax}\"\n+#define LINK_SPEC                                               \\\n+\"%{m68hc12:-m m68hc12elf}\"                                      \\\n+\"%{m68hcs12:-m m68hc12elf}\"                                     \\\n+\"%{!m68hc12:%{!m68hcs12:-m m68hc11elf}} \"                       \\\n+\"%{!mnorelax:%{!m68hc12:%{!m68hcs12:-relax}}}\"\n #endif\n \n #ifndef LIB_SPEC\n@@ -65,7 +74,8 @@ Boston, MA 02111-1307, USA.\n \"%{mshort:-D__HAVE_SHORT_INT__ -D__INT__=16}\\\n  %{!mshort:-D__INT__=32}\\\n  %{m68hc12:-Dmc6812 -DMC6812 -Dmc68hc12}\\\n- %{!m68hc12:-Dmc6811 -DMC6811 -Dmc68hc11}\\\n+ %{m68hcs12:-Dmc6812 -DMC6812 -Dmc68hcs12}\\\n+ %{!m68hc12:%{!m68hcs12:-Dmc6811 -DMC6811 -Dmc68hc11}}\\\n  %{fshort-double:-D__HAVE_SHORT_DOUBLE__}\\\n  %{mlong-calls:-D__USE_RTC__}\"\n #endif\n@@ -118,15 +128,16 @@ extern short *reg_renumber;\t/* def in local_alloc.c */\n #define MASK_SHORT              0002\t/* Compile with 16-bit `int' */\n #define MASK_AUTO_INC_DEC       0004\n #define MASK_M6811              0010\n-#define MASK_M6812              0020\n-#define MASK_NO_DIRECT_MODE     0040\n-#define MASK_MIN_MAX            0100\n-#define MASK_LONG_CALLS         0200\n+#define MASK_M68S12             0040\n+#define MASK_NO_DIRECT_MODE     0100\n+#define MASK_MIN_MAX            0200\n+#define MASK_LONG_CALLS         0400\n \n #define TARGET_OP_TIME\t\t(optimize && optimize_size == 0)\n #define TARGET_SHORT            (target_flags & MASK_SHORT)\n #define TARGET_M6811            (target_flags & MASK_M6811)\n #define TARGET_M6812            (target_flags & MASK_M6812)\n+#define TARGET_M68S12           (target_flags & MASK_M68S12)\n #define TARGET_AUTO_INC_DEC     (target_flags & MASK_AUTO_INC_DEC)\n #define TARGET_MIN_MAX          (target_flags & MASK_MIN_MAX)\n #define TARGET_NO_DIRECT_MODE   (target_flags & MASK_NO_DIRECT_MODE)\n@@ -178,10 +189,14 @@ extern short *reg_renumber;\t/* def in local_alloc.c */\n     N_(\"Compile for a 68HC11\")},\t\t\t\t\\\n   { \"68hc12\", MASK_M6812,\t\t\t\t\t\\\n     N_(\"Compile for a 68HC12\")},\t\t\t\t\\\n+  { \"68hcs12\", MASK_M6812 | MASK_M68S12,\t\t\t\\\n+    N_(\"Compile for a 68HCS12\")},\t\t\t\t\\\n   { \"6811\",   MASK_M6811,\t\t\t\t\t\\\n     N_(\"Compile for a 68HC11\")},\t\t\t\t\\\n   { \"6812\",   MASK_M6812,\t\t\t\t\t\\\n     N_(\"Compile for a 68HC12\")},\t\t\t\t\\\n+  { \"68S12\",  MASK_M6812 | MASK_M68S12,\t\t\t\t\\\n+    N_(\"Compile for a 68HCS12\")},\t\t\t\t\\\n   { \"\", TARGET_DEFAULT, 0 }}\n \n /* This macro is similar to `TARGET_SWITCHES' but defines names of\n@@ -214,7 +229,7 @@ extern const char *m68hc11_soft_reg_count;\n #endif\n \n /* Print subsidiary information on the compiler version in use.  */\n-#define TARGET_VERSION\t\tfprintf (stderr, \" (MC68HC11/MC68HC12)\")\n+#define TARGET_VERSION\tfprintf (stderr, \" (MC68HC11/MC68HC12/MC68HCS12)\")\n \n /* Sometimes certain combinations of command options do not make\n    sense on a particular target machine.  You can define a macro"}, {"sha": "498763e5c06a184e9e45b7a3be15c5111f0e27ff", "filename": "gcc/config/m68hc11/m68hc12.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f077f1693bd11aee4daeb9bc9720f1f96161de46/gcc%2Fconfig%2Fm68hc11%2Fm68hc12.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f077f1693bd11aee4daeb9bc9720f1f96161de46/gcc%2Fconfig%2Fm68hc11%2Fm68hc12.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc12.h?ref=f077f1693bd11aee4daeb9bc9720f1f96161de46", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for m68hc12.\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n-   Contributed by Stephane Carrez (stcarrez@worldnet.fr).\n+   Copyright (C) 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n+   Contributed by Stephane Carrez (stcarrez@nerim.fr).\n \n This file is part of GNU CC.\n \n@@ -20,19 +20,26 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Compile and assemble for a 68hc12 unless there is a -m68hc11 option.  */\n-#define ASM_SPEC       \"%{m68hc11:-m68hc11}%{!m68hc11:-m68hc12}\"\n+#define ASM_SPEC                                                \\\n+\"%{m68hc11:-m68hc11}\"                                           \\\n+\"%{m68hcs12:-m68hcs12}\"                                         \\\n+\"%{!m68hc11:%{!m68hcs12:-m68hc12}}\"\n #define LIB_SPEC       \"\"\n #define CC1_SPEC       \"\"\n \n /* We need to tell the linker the target elf format.  Just pass an\n    emulation option.  This can be overridden by -Wl option of gcc.  */\n-#define LINK_SPEC      \"%{m68hc11:-m m68hc11elf}%{!m68hc11:-m m68hc12elf}\"\n+#define LINK_SPEC                                               \\\n+\"%{m68hc11:-m m68hc11elf}\"                                      \\\n+\"%{m68hcs12:-m m68hc12elf}\"                                     \\\n+\"%{!m68hc11:%{!m68hcs12:-m m68hc11elf}} %{mrelax:-relax}\"\n \n #define CPP_SPEC  \\\n \"%{mshort:-D__HAVE_SHORT_INT__ -D__INT__=16}\\\n  %{!mshort:-D__INT__=32}\\\n  %{m68hc11:-Dmc6811 -DMC6811 -Dmc68hc11}\\\n- %{!m68hc11:-Dmc6812 -DMC6812 -Dmc68hc12}\\\n+ %{!m68hc11:%{!m68hc12:-Dmc6812 -DMC6812 -Dmc68hc12}}\\\n+ %{m68hcs12:-Dmc6812 -DMC6812 -Dmc68hcs12}\\\n  %{fshort-double:-D__HAVE_SHORT_DOUBLE__}\"\n \n /* Default target_flags if no switches specified.  */"}, {"sha": "34b597a092599e0a86b48fa93f2bb0059aebac39", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f077f1693bd11aee4daeb9bc9720f1f96161de46/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f077f1693bd11aee4daeb9bc9720f1f96161de46/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f077f1693bd11aee4daeb9bc9720f1f96161de46", "patch": "@@ -345,7 +345,7 @@ in the following sections.\n \n @emph{M68hc1x Options}\n @gccoptlist{\n--m6811  -m6812  -m68hc11  -m68hc12 @gol\n+-m6811  -m6812  -m68hc11  -m68hc12   -m68hcs12 @gol\n -mauto-incdec  -minmax  -mlong-calls  -mshort @gol\n -msoft-reg-count=@var{count}}\n \n@@ -5505,6 +5505,12 @@ when the compiler is configured for 68HC11-based systems.\n Generate output for a 68HC12.  This is the default\n when the compiler is configured for 68HC12-based systems.\n \n+@item -m68S12\n+@itemx -m68hcs12\n+@opindex m68S12\n+@opindex m68hcs12\n+Generate output for a 68HCS12.  \n+\n @item -mauto-incdec\n @opindex mauto-incdec\n Enable the use of 68HC12 pre and post auto-increment and auto-decrement"}]}