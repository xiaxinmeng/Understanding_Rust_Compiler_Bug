{"sha": "64a483047afac29c0c6dbf0b8855d39df2fbc176", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRhNDgzMDQ3YWZhYzI5YzBjNmRiZjBiODg1NWQzOWRmMmZiYzE3Ng==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1993-04-04T22:57:55Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1993-04-04T22:57:55Z"}, "message": "(FUNCTION_OUTGOING_VALUE): Remove.\n\n(FUNCTION_VALUE_REGNO_P): Return regs depend on TARGET_SNAKE.\n\nFrom-SVN: r4012", "tree": {"sha": "d9aa6f980e0a5a5d052920637669c3d526e5ac56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9aa6f980e0a5a5d052920637669c3d526e5ac56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64a483047afac29c0c6dbf0b8855d39df2fbc176", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a483047afac29c0c6dbf0b8855d39df2fbc176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a483047afac29c0c6dbf0b8855d39df2fbc176", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a483047afac29c0c6dbf0b8855d39df2fbc176/comments", "author": null, "committer": null, "parents": [{"sha": "6b5b46f2aae7a12fb88833790ffcafaed5068474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b5b46f2aae7a12fb88833790ffcafaed5068474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b5b46f2aae7a12fb88833790ffcafaed5068474"}], "stats": {"total": 5, "additions": 1, "deletions": 4}, "files": [{"sha": "2a613a6694269a950b1e21557a84e266ccb5c1ef", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a483047afac29c0c6dbf0b8855d39df2fbc176/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a483047afac29c0c6dbf0b8855d39df2fbc176/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=64a483047afac29c0c6dbf0b8855d39df2fbc176", "patch": "@@ -702,9 +702,6 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FP_REGS, GENERAL_OR_FP_REGS,\n \t\t\t\t       TYPE_MODE (VALTYPE) == DFmode) ? \\\n \t\t\t\t      (TARGET_SNAKE ? 44 : 32) : 28))\n \n-#define FUNCTION_OUTGOING_VALUE(VALTYPE, FUNC)  \\\n-  FUNCTION_VALUE(VALTYPE, FUNC)\n-\n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n \n@@ -715,7 +712,7 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FP_REGS, GENERAL_OR_FP_REGS,\n /* 1 if N is a possible register number for a function value\n    as seen by the caller.  */\n \n-#define FUNCTION_VALUE_REGNO_P(N) ((N) == 28 || (N) == 32 || (N) == 44)\n+#define FUNCTION_VALUE_REGNO_P(N) ((N) == 28 || (N) == (TARGET_SNAKE ? 44 : 32))\n \n /* 1 if N is a possible register number for function argument passing.  */\n "}]}