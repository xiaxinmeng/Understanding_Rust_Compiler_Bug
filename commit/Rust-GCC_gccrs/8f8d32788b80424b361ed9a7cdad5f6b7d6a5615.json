{"sha": "8f8d32788b80424b361ed9a7cdad5f6b7d6a5615", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4ZDMyNzg4YjgwNDI0YjM2MWVkOWE3Y2RhZDVmNmI3ZDZhNTYxNQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1999-03-02T09:25:31Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-03-02T09:25:31Z"}, "message": "Rename gxx_include_dir to gcc_gxx_include_dir\nFix computation of gcc_tooldir.\n\nFrom-SVN: r25537", "tree": {"sha": "42aac305a72b4f86dcdb1e33c97ddd0c67114b1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42aac305a72b4f86dcdb1e33c97ddd0c67114b1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f8d32788b80424b361ed9a7cdad5f6b7d6a5615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8d32788b80424b361ed9a7cdad5f6b7d6a5615", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8d32788b80424b361ed9a7cdad5f6b7d6a5615", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8d32788b80424b361ed9a7cdad5f6b7d6a5615/comments", "author": null, "committer": null, "parents": [{"sha": "71c91078fc9dc30a8bf1cfccd432054511288fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c91078fc9dc30a8bf1cfccd432054511288fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71c91078fc9dc30a8bf1cfccd432054511288fae"}], "stats": {"total": 126, "additions": 96, "deletions": 30}, "files": [{"sha": "67bb7e3248dd89e45063a4bd0c990eeada50161f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8d32788b80424b361ed9a7cdad5f6b7d6a5615/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8d32788b80424b361ed9a7cdad5f6b7d6a5615/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f8d32788b80424b361ed9a7cdad5f6b7d6a5615", "patch": "@@ -1,3 +1,15 @@\n+Tue Mar  2 09:24:10 1999  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* configure.in (gxx_include_dir): Rename to\n+\tgcc_gxx_include_dir in order to prevent it being overridden by\n+\ta top level Makefile.\n+\t(gcc_tooldir): If $exec_prefix != $prefix then use the\n+\tdifference between the two as the basis for gcc_tooldir.\n+\n+\t* configure: Rebuild.\n+\n+\t* Makefile.in: Rename gxx_include_dir to gcc_gxx_include_dir.\n+\n Tue Mar  2 16:45:31 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* unroll.c (copy_loop_body): Don't make extra copies of"}, {"sha": "a73df5e8b05aa162c4a857bb7d3016acc91b5897", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8d32788b80424b361ed9a7cdad5f6b7d6a5615/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8d32788b80424b361ed9a7cdad5f6b7d6a5615/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=8f8d32788b80424b361ed9a7cdad5f6b7d6a5615", "patch": "@@ -274,7 +274,7 @@ gcc_tooldir = @gcc_tooldir@\n # Since tooldir does not exist at build-time, use -B$(build_tooldir)/bin/\n build_tooldir = $(exec_prefix)/$(target_alias)\n # Directory in which the compiler finds g++ includes.\n-gxx_include_dir= @gxx_include_dir@\n+gcc_gxx_include_dir= @gcc_gxx_include_dir@\n # Directory to search for site-specific includes.\n includedir = $(local_prefix)/include\n # assertdir is overridden in cross-make.\n@@ -637,7 +637,7 @@ FLAGS_TO_PASS = \\\n \t\"exec_prefix=$(exec_prefix)\" \\\n \t\"prefix=$(prefix)\" \\\n \t\"local_prefix=$(local_prefix)\" \\\n-\t\"gxx_include_dir=$(gxx_include_dir)\" \\\n+\t\"gxx_include_dir=$(gcc_gxx_include_dir)\" \\\n \t\"tooldir=$(tooldir)\" \\\n \t\"gcc_tooldir=$(gcc_tooldir)\" \\\n \t\"bindir=$(bindir)\" \\\n@@ -1947,7 +1947,7 @@ cccp.o: cccp.c $(CONFIG_H) intl.h pcp.h version.c config.status system.h \\\n            mbchar.h prefix.h Makefile.in\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n-\t  -DGPLUSPLUS_INCLUDE_DIR=\\\"$(gxx_include_dir)\\\" \\\n+\t  -DGPLUSPLUS_INCLUDE_DIR=\\\"$(gcc_gxx_include_dir)\\\" \\\n \t  -DLOCAL_INCLUDE_DIR=\\\"$(includedir)\\\" \\\n \t  -DCROSS_INCLUDE_DIR=\\\"$(gcc_tooldir)/sys-include\\\" \\\n \t  -DTOOL_INCLUDE_DIR=\\\"$(gcc_tooldir)/include\\\" \\\n@@ -1981,7 +1981,7 @@ cppinit.o:  cppalloc.c $(CONFIG_H) cpplib.h intl.h system.h \\\n \t\tcpphash.h prefix.h output.h Makefile\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n-\t  -DGPLUSPLUS_INCLUDE_DIR=\\\"$(gxx_include_dir)\\\" \\\n+\t  -DGPLUSPLUS_INCLUDE_DIR=\\\"$(gcc_gxx_include_dir)\\\" \\\n \t  -DLOCAL_INCLUDE_DIR=\\\"$(includedir)\\\" \\\n \t  -DCROSS_INCLUDE_DIR=\\\"$(gcc_tooldir)/sys-include\\\" \\\n \t  -DTOOL_INCLUDE_DIR=\\\"$(gcc_tooldir)/include\\\" \\\n@@ -2004,7 +2004,7 @@ protoize.o: protoize.c $(srcdir)/../include/getopt.h $(CONFIG_H) system.h \\\n    Makefile\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n           -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n-\t  -DGPLUSPLUS_INCLUDE_DIR=\\\"$(gxx_include_dir)\\\" \\\n+\t  -DGPLUSPLUS_INCLUDE_DIR=\\\"$(gcc_gxx_include_dir)\\\" \\\n \t  -DCROSS_INCLUDE_DIR=\\\"$(gcc_tooldir)/sys-include\\\" \\\n \t  -DTOOL_INCLUDE_DIR=\\\"$(gcc_tooldir)/include\\\" \\\n \t  -DLOCAL_INCLUDE_DIR=\\\"$(includedir)\\\" \\\n@@ -2015,7 +2015,7 @@ unprotoize.o: unprotoize.c protoize.c $(srcdir)/../include/getopt.h \\\n    $(CONFIG_H) system.h Makefile\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n           -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n-\t  -DGPLUSPLUS_INCLUDE_DIR=\\\"$(gxx_include_dir)\\\" \\\n+\t  -DGPLUSPLUS_INCLUDE_DIR=\\\"$(gcc_gxx_include_dir)\\\" \\\n \t  -DCROSS_INCLUDE_DIR=\\\"$(gcc_tooldir)/sys-include\\\" \\\n \t  -DTOOL_INCLUDE_DIR=\\\"$(gcc_tooldir)/include\\\" \\\n \t  -DLOCAL_INCLUDE_DIR=\\\"$(includedir)\\\" \\"}, {"sha": "f4d09cfc87982a5f6e8cc39b173bdf7eb0225832", "filename": "gcc/configure", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8d32788b80424b361ed9a7cdad5f6b7d6a5615/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8d32788b80424b361ed9a7cdad5f6b7d6a5615/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=8f8d32788b80424b361ed9a7cdad5f6b7d6a5615", "patch": "@@ -731,25 +731,28 @@ if test x$local_prefix = x; then\n \tlocal_prefix=/usr/local\n fi\n \n-gxx_include_dir=\n+# Don't set gcc_gxx_include_dir to gxx_include_dir since that's only\n+# passed in by the toplevel make and thus we'd get different behavior\n+# depending on where we built the sources.\n+gcc_gxx_include_dir=\n # Specify the g++ header file directory\n # Check whether --with-gxx-include-dir or --without-gxx-include-dir was given.\n if test \"${with_gxx_include_dir+set}\" = set; then\n   withval=\"$with_gxx_include_dir\"\n   case \"${withval}\" in\n yes)\t{ echo \"configure: error: bad value ${withval} given for g++ include directory\" 1>&2; exit 1; } ;;\n no)\t;;\n-*)\tgxx_include_dir=$with_gxx_include_dir ;;\n+*)\tgcc_gxx_include_dir=$with_gxx_include_dir ;;\n esac\n fi\n \n \n-if test x${gxx_include_dir} = x; then\n+if test x${gcc_gxx_include_dir} = x; then\n   if test x${enable_version_specific_runtime_libs} = xyes; then\n-    gxx_include_dir='${libsubdir}/include/g++'\n+    gcc_gxx_include_dir='${libsubdir}/include/g++'\n   else\n     topsrcdir=${srcdir}/.. . ${srcdir}/../config.if\n-    gxx_include_dir=\"\\$(libsubdir)/\\$(unlibsubdir)/..\\`echo \\$(exec_prefix) | sed -e 's|^\\$(prefix)||' -e 's|/[^/]*|/..|g'\\`/include/g++\"-${libstdcxx_interface}\n+    gcc_gxx_include_dir=\"\\$(libsubdir)/\\$(unlibsubdir)/..\\`echo \\$(exec_prefix) | sed -e 's|^\\$(prefix)||' -e 's|/[^/]*|/..|g'\\`/include/g++\"-${libstdcxx_interface}\n   fi\n fi\n \n@@ -8338,16 +8341,39 @@ if test x$enable_haifa != x; then\n     done\n fi\n \n-# if $(exec_prefix) is not the same as $(prefix), then do not use a relative\n-# directory to get to $gcc_tooldir.  Also handle the case where the user did\n-# not specify a value for exec_prefix.\n+# If $(exec_prefix) exists and is not the same as $(prefix), then compute an\n+# absolute path for gcc_tooldir based on inserting the number of up-directory\n+# movements required to get from $(exec_prefix) to $(prefix) into the basic\n+# $(libsubdir)/@(unlibsubdir) based path.\n # Don't set gcc_tooldir to tooldir since that's only passed in by the toplevel\n # make and thus we'd get different behavior depending on where we built the\n # sources.\n if test x$exec_prefix = xNONE -o x$exec_prefix = x$prefix; then\n     gcc_tooldir='$(libsubdir)/$(unlibsubdir)/../$(target_alias)'\n else\n-    gcc_tooldir='$(exec_prefix)'/${target_alias}\n+# An explanation of the sed strings:\n+#  -e 's|^\\$(prefix)||'   matches and eliminates 'prefix' from 'exec_prefix'\n+#  -e 's|/$||'            match a trailing forward slash and eliminates it\n+#  -e 's|^[^/]|/|'        forces the string to start with a forward slash (*)\n+#  -e 's|/[^/]*|../|g'    replaces each occurance of /<directory> with ../\n+#\n+# (*) Note this pattern overwrites the first character of the string\n+# with a forward slash if one is not already present.  This is not a\n+# problem because the exact names of the sub-directories concerned is\n+# unimportant, just the number of them matters.\n+#\n+# The practical upshot of these patterns is like this:\n+#\n+#  prefix     exec_prefix        result\n+#  ------     -----------        ------\n+#   /foo        /foo/bar          ../\n+#   /foo/       /foo/bar          ../\n+#   /foo        /foo/bar/         ../\n+#   /foo/       /foo/bar/         ../\n+#   /foo        /foo/bar/ugg      ../../\n+#\n+    gcc_tooldir=\"$(libsubdir)/$(unlibsubdir)/\\`echo \\$(exec_prefix) |\n+sed -e 's|^\\$(prefix)||' -e 's|/$||' -e 's|^[^/]|/|' -e 's|/[^/]*|../|g'\\`$(target_alias)\"\n fi\n \n \n@@ -8699,7 +8725,7 @@ s%@JAVAGC@%$JAVAGC%g\n s%@gcc_version@%$gcc_version%g\n s%@gcc_version_trigger@%$gcc_version_trigger%g\n s%@local_prefix@%$local_prefix%g\n-s%@gxx_include_dir@%$gxx_include_dir%g\n+s%@gcc_gxx_include_dir@%$gcc_gxx_include_dir%g\n s%@fixincludes@%$fixincludes%g\n s%@build_install_headers_dir@%$build_install_headers_dir%g\n s%@build_exeext@%$build_exeext%g"}, {"sha": "e7a0a498f253263c80741aaba58eb04e51fbd2d4", "filename": "gcc/configure.in", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8d32788b80424b361ed9a7cdad5f6b7d6a5615/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8d32788b80424b361ed9a7cdad5f6b7d6a5615/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=8f8d32788b80424b361ed9a7cdad5f6b7d6a5615", "patch": "@@ -149,24 +149,27 @@ if test x$local_prefix = x; then\n \tlocal_prefix=/usr/local\n fi\n \n-gxx_include_dir=\n+# Don't set gcc_gxx_include_dir to gxx_include_dir since that's only\n+# passed in by the toplevel make and thus we'd get different behavior\n+# depending on where we built the sources.\n+gcc_gxx_include_dir=\n # Specify the g++ header file directory\n AC_ARG_WITH(gxx-include-dir,\n [  --with-gxx-include-dir=DIR\n                           specifies directory to put g++ header files.],\n [case \"${withval}\" in\n yes)\tAC_MSG_ERROR(bad value ${withval} given for g++ include directory) ;;\n no)\t;;\n-*)\tgxx_include_dir=$with_gxx_include_dir ;;\n+*)\tgcc_gxx_include_dir=$with_gxx_include_dir ;;\n esac])\n \n-if test x${gxx_include_dir} = x; then\n+if test x${gcc_gxx_include_dir} = x; then\n   if test x${enable_version_specific_runtime_libs} = xyes; then\n-    gxx_include_dir='${libsubdir}/include/g++'\n+    gcc_gxx_include_dir='${libsubdir}/include/g++'\n   else\n     topsrcdir=${srcdir}/.. . ${srcdir}/../config.if\n changequote(<<, >>)dnl\n-    gxx_include_dir=\"\\$(libsubdir)/\\$(unlibsubdir)/..\\`echo \\$(exec_prefix) | sed -e 's|^\\$(prefix)||' -e 's|/[^/]*|/..|g'\\`/include/g++\"-${libstdcxx_interface}\n+    gcc_gxx_include_dir=\"\\$(libsubdir)/\\$(unlibsubdir)/..\\`echo \\$(exec_prefix) | sed -e 's|^\\$(prefix)||' -e 's|/[^/]*|/..|g'\\`/include/g++\"-${libstdcxx_interface}\n changequote([, ])dnl\n   fi\n fi\n@@ -195,7 +198,7 @@ AC_ARG_ENABLE(c-cpplib,\n if test x$enable_c_cpplib != xno; then\n   extra_c_objs=\"${extra_c_objs} libcpp.a\"\n   extra_cxx_objs=\"${extra_cxx_objs} ../libcpp.a\"\n-  extra_c_flags=-DUSE_CPPLIB=1\n+  extra_c_flags=\"${extra_c_flags} -DUSE_CPPLIB=1\"\n   cpp_main=cppmain\n fi)\n \n@@ -226,7 +229,7 @@ AC_ARG_ENABLE(init-priority,\n   --disable-init-priority conform to ISO C++ rules for ordering static objects\n \t\t\t  (i.e. initialized in order of declaration). ],\n if test x$enable_init_priority != xno; then\n-  extra_c_flags=-DUSE_INIT_PRIORITY\n+  extra_c_flags=\"${extra_c_flags} -DUSE_INIT_PRIORITY\"\n fi)\n \n # Enable threads\n@@ -803,7 +806,7 @@ changequote([,])dnl\n \t\t;;\n \thppa*-*-openbsd*)\n \t\ttarget_cpu_default=\"MASK_SNAKE\"\n-     tmake_file=pa/t-openbsd\n+\t\ttmake_file=pa/t-openbsd\n \t\t;;\n \thppa1.1-*-pro*)\n \t\ttm_file=\"pa/pa-pro.h ${tm_file} pa/pa-pro-end.h libgloss.h\"\n@@ -3369,7 +3372,7 @@ changequote([,])dnl\n \t\t\txarm[23678] | xarm250 | xarm[67][01]0 \\\n \t\t\t| xarm7m | xarm7dm | xarm7dmi | xarm7tdmi \\\n \t\t\t| xarm7100 | xarm7500 | xarm7500fe | xarm810 \\\n-\t\t\t| xstrongarm | xstrongarm110)\n+\t\t\t| xstrongarm | xstrongarm110 | xstrongarm1100)\n \t\t\t\ttarget_cpu_default2=\"TARGET_CPU_$with_cpu\"\n \t\t\t\t;;\n \n@@ -4225,16 +4228,41 @@ if test x$enable_haifa != x; then\n     done\n fi\n \n-# if $(exec_prefix) is not the same as $(prefix), then do not use a relative\n-# directory to get to $gcc_tooldir.  Also handle the case where the user did\n-# not specify a value for exec_prefix.\n+# If $(exec_prefix) exists and is not the same as $(prefix), then compute an\n+# absolute path for gcc_tooldir based on inserting the number of up-directory\n+# movements required to get from $(exec_prefix) to $(prefix) into the basic\n+# $(libsubdir)/@(unlibsubdir) based path.\n # Don't set gcc_tooldir to tooldir since that's only passed in by the toplevel\n # make and thus we'd get different behavior depending on where we built the\n # sources.\n if test x$exec_prefix = xNONE -o x$exec_prefix = x$prefix; then\n     gcc_tooldir='$(libsubdir)/$(unlibsubdir)/../$(target_alias)'\n else\n-    gcc_tooldir='$(exec_prefix)'/${target_alias}\n+changequote(<<, >>)dnl\n+# An explanation of the sed strings:\n+#  -e 's|^\\$(prefix)||'   matches and eliminates 'prefix' from 'exec_prefix'\n+#  -e 's|/$||'            match a trailing forward slash and eliminates it\n+#  -e 's|^[^/]|/|'        forces the string to start with a forward slash (*)\n+#  -e 's|/[^/]*|../|g'    replaces each occurance of /<directory> with ../\n+#\n+# (*) Note this pattern overwrites the first character of the string\n+# with a forward slash if one is not already present.  This is not a\n+# problem because the exact names of the sub-directories concerned is\n+# unimportant, just the number of them matters.\n+#\n+# The practical upshot of these patterns is like this:\n+#\n+#  prefix     exec_prefix        result\n+#  ------     -----------        ------\n+#   /foo        /foo/bar          ../\n+#   /foo/       /foo/bar          ../\n+#   /foo        /foo/bar/         ../\n+#   /foo/       /foo/bar/         ../\n+#   /foo        /foo/bar/ugg      ../../\n+#\n+    gcc_tooldir=\"$(libsubdir)/$(unlibsubdir)/\\`echo \\$(exec_prefix) |\n+sed -e 's|^\\$(prefix)||' -e 's|/$||' -e 's|^[^/]|/|' -e 's|/[^/]*|../|g'\\`$(target_alias)\"\n+changequote([, ])dnl\n fi\n AC_SUBST(gcc_tooldir)\n \n@@ -4290,7 +4318,7 @@ AC_SUBST(JAVAGC)\n AC_SUBST(gcc_version)\n AC_SUBST(gcc_version_trigger)\n AC_SUBST(local_prefix)\n-AC_SUBST(gxx_include_dir)\n+AC_SUBST(gcc_gxx_include_dir)\n AC_SUBST(fixincludes)\n AC_SUBST(build_install_headers_dir)\n AC_SUBST(build_exeext)"}]}