{"sha": "2efa40870b12c4b3a07d35bf3e242e54d03e96dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVmYTQwODcwYjEyYzRiM2EwN2QzNWJmM2UyNDJlNTRkMDNlOTZkYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-07-18T18:25:32Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-07-18T18:25:32Z"}, "message": "passes.c (init_optimization_passes): Introduce macros for constructing the tree of passes (INSERT_PASSES_AFTER...\n\n\t* passes.c (init_optimization_passes): Introduce macros for\n\tconstructing the tree of passes (INSERT_PASSES_AFTER,\n\tPUSH_INSERT_PASSES_WITHIN, POP_INSERT_PASSES,\n\tTERMINATE_PASS_LIST).\n\nFrom-SVN: r201037", "tree": {"sha": "edb5b887e478b72ff012265b435730846e422d1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edb5b887e478b72ff012265b435730846e422d1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2efa40870b12c4b3a07d35bf3e242e54d03e96dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efa40870b12c4b3a07d35bf3e242e54d03e96dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2efa40870b12c4b3a07d35bf3e242e54d03e96dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efa40870b12c4b3a07d35bf3e242e54d03e96dc/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bc404e1b8c6c0a6edb2be4e840619e6992eef0bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc404e1b8c6c0a6edb2be4e840619e6992eef0bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc404e1b8c6c0a6edb2be4e840619e6992eef0bd"}], "stats": {"total": 115, "additions": 63, "deletions": 52}, "files": [{"sha": "f4c8f96a52a7c22238770e66a479297e94ec04ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efa40870b12c4b3a07d35bf3e242e54d03e96dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efa40870b12c4b3a07d35bf3e242e54d03e96dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2efa40870b12c4b3a07d35bf3e242e54d03e96dc", "patch": "@@ -1,3 +1,10 @@\n+2013-07-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* passes.c (init_optimization_passes): Introduce macros for\n+\tconstructing the tree of passes (INSERT_PASSES_AFTER,\n+\tPUSH_INSERT_PASSES_WITHIN, POP_INSERT_PASSES,\n+\tTERMINATE_PASS_LIST).\n+\n 2013-07-18  Vladimir Makarov  <vmakarov@redhat.com>\n \t    Wei Mi  <wmi@google.com>\n "}, {"sha": "6ca4134ee54f0c03e58010066e5f04b0b61de00d", "filename": "gcc/passes.c", "status": "modified", "additions": 56, "deletions": 52, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efa40870b12c4b3a07d35bf3e242e54d03e96dc/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efa40870b12c4b3a07d35bf3e242e54d03e96dc/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=2efa40870b12c4b3a07d35bf3e242e54d03e96dc", "patch": "@@ -1282,13 +1282,26 @@ init_optimization_passes (void)\n {\n   struct opt_pass **p;\n \n+#define INSERT_PASSES_AFTER(PASS) \\\n+  p = &(PASS);\n+\n+#define PUSH_INSERT_PASSES_WITHIN(PASS) \\\n+  { \\\n+    struct opt_pass **p = &(PASS).pass.sub;\n+\n+#define POP_INSERT_PASSES() \\\n+  }\n+\n #define NEXT_PASS(PASS)  (p = next_pass_1 (p, &((PASS).pass)))\n \n+#define TERMINATE_PASS_LIST() \\\n+  *p = NULL;\n+\n  /* All passes needed to lower the function into shape optimizers can\n     operate on.  These passes are always run first on the function, but\n     backend might produce already lowered functions that are not processed\n     by these passes.  */\n-  p = &all_lowering_passes;\n+  INSERT_PASSES_AFTER (all_lowering_passes)\n   NEXT_PASS (pass_warn_unused_result);\n   NEXT_PASS (pass_diagnose_omp_blocks);\n   NEXT_PASS (pass_diagnose_tm_blocks);\n@@ -1302,15 +1315,14 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_warn_function_return);\n   NEXT_PASS (pass_expand_omp);\n   NEXT_PASS (pass_build_cgraph_edges);\n-  *p = NULL;\n+  TERMINATE_PASS_LIST ()\n \n   /* Interprocedural optimization passes.  */\n-  p = &all_small_ipa_passes;\n+  INSERT_PASSES_AFTER (all_small_ipa_passes)\n   NEXT_PASS (pass_ipa_free_lang_data);\n   NEXT_PASS (pass_ipa_function_and_variable_visibility);\n   NEXT_PASS (pass_early_local_passes);\n-    {\n-      struct opt_pass **p = &pass_early_local_passes.pass.sub;\n+  PUSH_INSERT_PASSES_WITHIN (pass_early_local_passes)\n       NEXT_PASS (pass_fixup_cfg);\n       NEXT_PASS (pass_init_datastructures);\n \n@@ -1320,8 +1332,7 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_inline_parameters);\n       NEXT_PASS (pass_early_inline);\n       NEXT_PASS (pass_all_early_optimizations);\n-\t{\n-\t  struct opt_pass **p = &pass_all_early_optimizations.pass.sub;\n+      PUSH_INSERT_PASSES_WITHIN (pass_all_early_optimizations)\n \t  NEXT_PASS (pass_remove_cgraph_callee_edges);\n \t  NEXT_PASS (pass_rename_ssa_copies);\n \t  NEXT_PASS (pass_ccp);\n@@ -1346,52 +1357,50 @@ init_optimization_passes (void)\n \t     early optimizations again.  It is thus good idea to do this\n \t     late.  */\n           NEXT_PASS (pass_split_functions);\n-\t}\n+      POP_INSERT_PASSES ()\n       NEXT_PASS (pass_release_ssa_names);\n       NEXT_PASS (pass_rebuild_cgraph_edges);\n       NEXT_PASS (pass_inline_parameters);\n-    }\n+  POP_INSERT_PASSES ()\n   NEXT_PASS (pass_ipa_free_inline_summary);\n   NEXT_PASS (pass_ipa_tree_profile);\n-    {\n-      struct opt_pass **p = &pass_ipa_tree_profile.pass.sub;\n+  PUSH_INSERT_PASSES_WITHIN (pass_ipa_tree_profile)\n       NEXT_PASS (pass_feedback_split_functions);\n-    }\n+  POP_INSERT_PASSES ()\n   NEXT_PASS (pass_ipa_increase_alignment);\n   NEXT_PASS (pass_ipa_tm);\n   NEXT_PASS (pass_ipa_lower_emutls);\n-  *p = NULL;\n+  TERMINATE_PASS_LIST ()\n \n-  p = &all_regular_ipa_passes;\n+  INSERT_PASSES_AFTER (all_regular_ipa_passes)\n   NEXT_PASS (pass_ipa_whole_program_visibility);\n   NEXT_PASS (pass_ipa_profile);\n   NEXT_PASS (pass_ipa_cp);\n   NEXT_PASS (pass_ipa_cdtor_merge);\n   NEXT_PASS (pass_ipa_inline);\n   NEXT_PASS (pass_ipa_pure_const);\n   NEXT_PASS (pass_ipa_reference);\n-  *p = NULL;\n+  TERMINATE_PASS_LIST ()\n \n-  p = &all_lto_gen_passes;\n+  INSERT_PASSES_AFTER (all_lto_gen_passes)\n   NEXT_PASS (pass_ipa_lto_gimple_out);\n   NEXT_PASS (pass_ipa_lto_finish_out);  /* This must be the last LTO pass.  */\n-  *p = NULL;\n+  TERMINATE_PASS_LIST ()\n \n   /* Simple IPA passes executed after the regular passes.  In WHOPR mode the\n      passes are executed after partitioning and thus see just parts of the\n      compiled unit.  */\n-  p = &all_late_ipa_passes;\n+  INSERT_PASSES_AFTER (all_late_ipa_passes)\n   NEXT_PASS (pass_ipa_pta);\n-  *p = NULL;\n+  TERMINATE_PASS_LIST ()\n \n   /* These passes are run after IPA passes on every function that is being\n      output to the assembler file.  */\n-  p = &all_passes;\n+  INSERT_PASSES_AFTER (all_passes)\n   NEXT_PASS (pass_fixup_cfg);\n   NEXT_PASS (pass_lower_eh_dispatch);\n   NEXT_PASS (pass_all_optimizations);\n-    {\n-      struct opt_pass **p = &pass_all_optimizations.pass.sub;\n+  PUSH_INSERT_PASSES_WITHIN (pass_all_optimizations)\n       NEXT_PASS (pass_remove_cgraph_callee_edges);\n       /* Initial scalar cleanups before alias computation.\n \t They ensure memory accesses are not indirect wherever possible.  */\n@@ -1454,8 +1463,7 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_asan);\n       NEXT_PASS (pass_tsan);\n       NEXT_PASS (pass_tree_loop);\n-\t{\n-\t  struct opt_pass **p = &pass_tree_loop.pass.sub;\n+      PUSH_INSERT_PASSES_WITHIN (pass_tree_loop)\n \t  NEXT_PASS (pass_tree_loop_init);\n \t  NEXT_PASS (pass_lim);\n \t  NEXT_PASS (pass_copy_prop);\n@@ -1467,29 +1475,27 @@ init_optimization_passes (void)\n \t  NEXT_PASS (pass_loop_distribution);\n \t  NEXT_PASS (pass_copy_prop);\n \t  NEXT_PASS (pass_graphite);\n-\t    {\n-\t      struct opt_pass **p = &pass_graphite.pass.sub;\n+\t  PUSH_INSERT_PASSES_WITHIN (pass_graphite)\n \t      NEXT_PASS (pass_graphite_transforms);\n \t      NEXT_PASS (pass_lim);\n \t      NEXT_PASS (pass_copy_prop);\n \t      NEXT_PASS (pass_dce_loop);\n-\t    }\n+\t  POP_INSERT_PASSES ()\n \t  NEXT_PASS (pass_iv_canon);\n \t  NEXT_PASS (pass_parallelize_loops);\n \t  NEXT_PASS (pass_if_conversion);\n \t  NEXT_PASS (pass_vectorize);\n-\t    {\n-\t      struct opt_pass **p = &pass_vectorize.pass.sub;\n+          PUSH_INSERT_PASSES_WITHIN (pass_vectorize)\n \t      NEXT_PASS (pass_dce_loop);\n-\t    }\n+          POP_INSERT_PASSES ()\n           NEXT_PASS (pass_predcom);\n \t  NEXT_PASS (pass_complete_unroll);\n \t  NEXT_PASS (pass_slp_vectorize);\n \t  NEXT_PASS (pass_loop_prefetch);\n \t  NEXT_PASS (pass_iv_optimize);\n \t  NEXT_PASS (pass_lim);\n \t  NEXT_PASS (pass_tree_loop_done);\n-\t}\n+      POP_INSERT_PASSES ()\n       NEXT_PASS (pass_lower_vector_ssa);\n       NEXT_PASS (pass_cse_reciprocals);\n       NEXT_PASS (pass_reassoc);\n@@ -1524,10 +1530,9 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_rename_ssa_copies);\n       NEXT_PASS (pass_uncprop);\n       NEXT_PASS (pass_local_pure_const);\n-    }\n+  POP_INSERT_PASSES ()\n   NEXT_PASS (pass_all_optimizations_g);\n-    {\n-      struct opt_pass **p = &pass_all_optimizations_g.pass.sub;\n+  PUSH_INSERT_PASSES_WITHIN (pass_all_optimizations_g)\n       NEXT_PASS (pass_remove_cgraph_callee_edges);\n       NEXT_PASS (pass_strip_predict_hints);\n       /* Lower remaining pieces of GIMPLE.  */\n@@ -1551,14 +1556,13 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_late_warn_uninitialized);\n       NEXT_PASS (pass_uncprop);\n       NEXT_PASS (pass_local_pure_const);\n-    }\n+  POP_INSERT_PASSES ()\n   NEXT_PASS (pass_tm_init);\n-    {\n-      struct opt_pass **p = &pass_tm_init.pass.sub;\n+  PUSH_INSERT_PASSES_WITHIN (pass_tm_init)\n       NEXT_PASS (pass_tm_mark);\n       NEXT_PASS (pass_tm_memopt);\n       NEXT_PASS (pass_tm_edges);\n-    }\n+  POP_INSERT_PASSES ()\n   NEXT_PASS (pass_lower_vector);\n   NEXT_PASS (pass_lower_complex_O0);\n   NEXT_PASS (pass_asan_O0);\n@@ -1573,8 +1577,7 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_expand);\n \n   NEXT_PASS (pass_rest_of_compilation);\n-    {\n-      struct opt_pass **p = &pass_rest_of_compilation.pass.sub;\n+  PUSH_INSERT_PASSES_WITHIN (pass_rest_of_compilation)\n       NEXT_PASS (pass_instantiate_virtual_regs);\n       NEXT_PASS (pass_into_cfg_layout_mode);\n       NEXT_PASS (pass_jump);\n@@ -1594,16 +1597,15 @@ init_optimization_passes (void)\n \t sooner, but we want the profile feedback to work more\n \t efficiently.  */\n       NEXT_PASS (pass_loop2);\n-\t{\n-\t  struct opt_pass **p = &pass_loop2.pass.sub;\n+      PUSH_INSERT_PASSES_WITHIN (pass_loop2)\n \t  NEXT_PASS (pass_rtl_loop_init);\n \t  NEXT_PASS (pass_rtl_move_loop_invariants);\n \t  NEXT_PASS (pass_rtl_unswitch);\n \t  NEXT_PASS (pass_rtl_unroll_and_peel_loops);\n \t  NEXT_PASS (pass_rtl_doloop);\n \t  NEXT_PASS (pass_rtl_loop_done);\n-\t  *p = NULL;\n-\t}\n+\t  TERMINATE_PASS_LIST ()\n+      POP_INSERT_PASSES ()\n       NEXT_PASS (pass_web);\n       NEXT_PASS (pass_rtl_cprop);\n       NEXT_PASS (pass_cse2);\n@@ -1628,8 +1630,7 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_ira);\n       NEXT_PASS (pass_reload);\n       NEXT_PASS (pass_postreload);\n-\t{\n-\t  struct opt_pass **p = &pass_postreload.pass.sub;\n+      PUSH_INSERT_PASSES_WITHIN (pass_postreload)\n \t  NEXT_PASS (pass_postreload_cse);\n \t  NEXT_PASS (pass_gcse2);\n \t  NEXT_PASS (pass_split_after_reload);\n@@ -1651,11 +1652,10 @@ init_optimization_passes (void)\n \t  NEXT_PASS (pass_split_before_sched2);\n \t  NEXT_PASS (pass_sched2);\n \t  NEXT_PASS (pass_stack_regs);\n-\t    {\n-\t      struct opt_pass **p = &pass_stack_regs.pass.sub;\n+\t  PUSH_INSERT_PASSES_WITHIN (pass_stack_regs)\n \t      NEXT_PASS (pass_split_before_regstack);\n \t      NEXT_PASS (pass_stack_regs_run);\n-\t    }\n+\t  POP_INSERT_PASSES ()\n \t  NEXT_PASS (pass_compute_alignments);\n \t  NEXT_PASS (pass_duplicate_computed_gotos);\n \t  NEXT_PASS (pass_variable_tracking);\n@@ -1669,13 +1669,17 @@ init_optimization_passes (void)\n \t  NEXT_PASS (pass_set_nothrow_function_flags);\n \t  NEXT_PASS (pass_dwarf2_frame);\n \t  NEXT_PASS (pass_final);\n-\t}\n+      POP_INSERT_PASSES ()\n       NEXT_PASS (pass_df_finish);\n-    }\n+  POP_INSERT_PASSES ()\n   NEXT_PASS (pass_clean_state);\n-  *p = NULL;\n+  TERMINATE_PASS_LIST ()\n \n+#undef INSERT_PASSES_AFTER\n+#undef PUSH_INSERT_PASSES_WITHIN\n+#undef POP_INSERT_PASSES\n #undef NEXT_PASS\n+#undef TERMINATE_PASS_LIST\n \n   /* Register the passes with the tree dump code.  */\n   register_dump_files (all_lowering_passes, PROP_gimple_any);"}]}