{"sha": "a8d0467e650910986afba4b0b9ed863f9138729c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThkMDQ2N2U2NTA5MTA5ODZhZmJhNGIwYjllZDg2M2Y5MTM4NzI5Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-06-17T08:06:58Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-06-17T08:06:58Z"}, "message": "dbxout.c (dbxout_source_line_counter): New global variable.\n\n\t* dbxout.c (dbxout_source_line_counter): New global variable.\n\tMark it with GTY(()).\n\t(dbxout_source_line): Increment dbxout_source_line_counter\n\tand pass it to ASM_OUTPUT_SOURCE_LINE.\n\t* sdbout.c (sdbout_source_line_counter): New global variable.\n\tMark it with GTY(()).\n\t(unnamed_struct_number): Mark it with GTY(()).\n\t(sdbout_source_line): Increment sdbout_source_line_counter\n\tand pass it to ASM_OUTPUT_SOURCE_LINE.\n\t* xcoffout.c (ASM_OUTPUT_SOURCE_LINE): Add third parameter\n\t(xcoffout_source_line): Pass 0 as third argument to\n\tASM_OUTPUT_SOURCE_LINE.\n\t(xcoffout_begin_prologue): Likewise.\n\t* config/dbxout.h (ASM_OUTPUT_SOURCE_LINE): Add third parameter.\n\tUse it instead of 'sym_lineno' but without incrementing it.\n\t* config/dbxelf.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n\t* config/lynx.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n\t* config/ptx4.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n\t* config/alpha/alpha.c (alpha_start_function): Pass 0 as third\n\targument to ASM_OUTPUT_SOURCE_LINE.\n\t* config/alpha/alpha.h (ASM_OUTPUT_SOURCE_LINE): Add third parameter.\n\t* config/arm/aout.h: Remove useless comment.\n\t* config/avr/avr.h (ASM_OUTPUT_SOURCE_LINE): Add third parameter.\n\t* config/i960/i960.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n\t* config/m32r/m32r.h (ASM_OUTPUT_SOURCE_LINE): Add third parameter.\n\tUse it instead of 'sym_lineno' but without incrementing it.\n\t* config/m68k/hp320.h (ASM_OUTPUT_SOURCE_LINE): Add third parameter.\n\t* config/mcore/mcore-pe.h (ASM_OUTPUT_SOURCE_LINE): Add third\n\tparameter. Use it instead of 'sym_lineno' but without incrementing it.\n\t* config/mips/mips.c (mips_output_function_prologue): Pass 0 as third\n\targument to ASM_OUTPUT_SOURCE_LINE.\n\t* config/mips/mips.h (ASM_OUTPUT_SOURCE_LINE): Add third parameter.\n\t* config/mmix/mmix.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n\t* config/pa/som.h (ASM_OUTPUT_SOURCE_LINE): Add third parameter.\n\tUse it instead of 'sym_lineno' but without incrementing it.\n\t* config/rs6000/linux64.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n\t* config/sh/elf.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n\t* config/sparc/aout.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n\t* config/sparc/pbd.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n\t* doc/tm.texi (ASM_OUTPUT_SOURCE_LINE): Document third parameter.\n\nFrom-SVN: r68072", "tree": {"sha": "98d6f0492483bbcc24e337cccf53625556e15f44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98d6f0492483bbcc24e337cccf53625556e15f44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8d0467e650910986afba4b0b9ed863f9138729c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8d0467e650910986afba4b0b9ed863f9138729c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8d0467e650910986afba4b0b9ed863f9138729c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8d0467e650910986afba4b0b9ed863f9138729c/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "730cf8223861736f94452b3d0047f95c29e3ad19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730cf8223861736f94452b3d0047f95c29e3ad19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/730cf8223861736f94452b3d0047f95c29e3ad19"}], "stats": {"total": 192, "additions": 114, "deletions": 78}, "files": [{"sha": "1c81e12be4f916f0d0fe9f095605d1345ac0398f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -1,3 +1,46 @@\n+2003-06-17  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* dbxout.c (dbxout_source_line_counter): New global variable.\n+\tMark it with GTY(()).\n+\t(dbxout_source_line): Increment dbxout_source_line_counter\n+\tand pass it to ASM_OUTPUT_SOURCE_LINE.\n+\t* sdbout.c (sdbout_source_line_counter): New global variable.\n+\tMark it with GTY(()).\n+\t(unnamed_struct_number): Mark it with GTY(()).\n+\t(sdbout_source_line): Increment sdbout_source_line_counter\n+\tand pass it to ASM_OUTPUT_SOURCE_LINE.\n+\t* xcoffout.c (ASM_OUTPUT_SOURCE_LINE): Add third parameter\n+\t(xcoffout_source_line): Pass 0 as third argument to\n+\tASM_OUTPUT_SOURCE_LINE.\n+\t(xcoffout_begin_prologue): Likewise.\n+\t* config/dbxout.h (ASM_OUTPUT_SOURCE_LINE): Add third parameter.\n+\tUse it instead of 'sym_lineno' but without incrementing it.\n+\t* config/dbxelf.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n+\t* config/lynx.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n+\t* config/ptx4.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n+\t* config/alpha/alpha.c (alpha_start_function): Pass 0 as third\n+\targument to ASM_OUTPUT_SOURCE_LINE.\n+\t* config/alpha/alpha.h (ASM_OUTPUT_SOURCE_LINE): Add third parameter.\n+\t* config/arm/aout.h: Remove useless comment.\n+\t* config/avr/avr.h (ASM_OUTPUT_SOURCE_LINE): Add third parameter.\n+\t* config/i960/i960.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n+\t* config/m32r/m32r.h (ASM_OUTPUT_SOURCE_LINE): Add third parameter.\n+\tUse it instead of 'sym_lineno' but without incrementing it.\n+\t* config/m68k/hp320.h (ASM_OUTPUT_SOURCE_LINE): Add third parameter.\n+\t* config/mcore/mcore-pe.h (ASM_OUTPUT_SOURCE_LINE): Add third\n+\tparameter. Use it instead of 'sym_lineno' but without incrementing it.\n+\t* config/mips/mips.c (mips_output_function_prologue): Pass 0 as third\n+\targument to ASM_OUTPUT_SOURCE_LINE.\n+\t* config/mips/mips.h (ASM_OUTPUT_SOURCE_LINE): Add third parameter.\n+\t* config/mmix/mmix.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n+\t* config/pa/som.h (ASM_OUTPUT_SOURCE_LINE): Add third parameter.\n+\tUse it instead of 'sym_lineno' but without incrementing it.\n+\t* config/rs6000/linux64.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n+\t* config/sh/elf.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n+\t* config/sparc/aout.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n+\t* config/sparc/pbd.h (ASM_OUTPUT_SOURCE_LINE): Likewise.\n+\t* doc/tm.texi (ASM_OUTPUT_SOURCE_LINE): Document third parameter.\n+\n 2003-06-17  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips-protos.h (mips_expand_block_move): Declare."}, {"sha": "cb937df34ceac75ea6f64f324547bd83a2957634", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -7232,7 +7232,7 @@ alpha_start_function (FILE *file, const char *fnname,\n #ifdef ASM_OUTPUT_SOURCE_LINE\n       if (debug_info_level != DINFO_LEVEL_TERSE)\n         ASM_OUTPUT_SOURCE_LINE (file,\n-\t\t\t\tDECL_SOURCE_LINE (current_function_decl));\n+\t\t\t\tDECL_SOURCE_LINE (current_function_decl), 0);\n #endif\n     }\n "}, {"sha": "7ba7b15483fdf708d2dca29edd60ed7f98e9dbc0", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -1778,7 +1778,7 @@ extern long alpha_auto_offset;\n #define DEBUGGER_ARG_OFFSET(OFFSET, X) (OFFSET + alpha_arg_offset)\n \n \n-#define ASM_OUTPUT_SOURCE_LINE(STREAM, LINE)\t\t\t\t\\\n+#define ASM_OUTPUT_SOURCE_LINE(STREAM, LINE, COUNTER)\t\t\t\\\n   alpha_output_lineno (STREAM, LINE)\n \n #define ASM_OUTPUT_SOURCE_FILENAME(STREAM, NAME)\t\t\t\\"}, {"sha": "263c33432a4a5cd7145335c7c1cf9aefbc0a8d72", "filename": "gcc/config/arm/aout.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Farm%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Farm%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faout.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -291,9 +291,6 @@\n #define ASM_OUTPUT_ALIGNED_BSS(STREAM, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss (STREAM, DECL, NAME, SIZE, ALIGN)\n #endif\n-     \n-/* Output a source line for the debugger.  */\n-/* #define ASM_OUTPUT_SOURCE_LINE(STREAM,LINE) */\n \n /* Output a #ident directive.  */\n #ifndef ASM_OUTPUT_IDENT"}, {"sha": "4bdad07206163830b82b9b878fa6057ec0575da6", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -1718,7 +1718,8 @@ progmem_section ()\t\t\t\t\t\t\t      \\\n    time-saving assumptions that are valid for ordinary compiler\n    output.  */\n \n-#define ASM_OUTPUT_SOURCE_LINE(STREAM, LINE) fprintf (STREAM,\"/* line: %d */\\n\",LINE)\n+#define ASM_OUTPUT_SOURCE_LINE(STREAM, LINE, COUNTER) \\\n+  fprintf (STREAM,\"/* line: %d */\\n\",LINE)\n /* A C statement to output DBX or SDB debugging information before\n    code for line number LINE of the current source file to the stdio\n    stream STREAM."}, {"sha": "c7f675768c6ad134c786ed80c6d93aea6a3a3141", "filename": "gcc/config/dbxcoff.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fdbxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fdbxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdbxcoff.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -55,23 +55,21 @@ Boston, MA 02111-1307, USA.  */\n    current function.  */\n \n #undef ASM_OUTPUT_SOURCE_LINE\n-#define ASM_OUTPUT_SOURCE_LINE(FILE, LINE)\t\t\t\\\n+#define ASM_OUTPUT_SOURCE_LINE(FILE, LINE, COUNTER)\t\t\\\n { if (write_symbols == SDB_DEBUG) {\t\t\t\t\\\n     fprintf ((FILE), \"\\t.ln\\t%d\\n\",\t\t\t\t\\\n \t     ((sdb_begin_function_line > -1)\t\t\t\\\n \t      ? (LINE) - sdb_begin_function_line : 1));\t\t\\\n   } else if (write_symbols == DBX_DEBUG) {\t\t\t\\\n-    static int sym_lineno = 1;\t\t\t\t\t\\\n     char buffer[256];\t\t\t\t\t\t\\\n-    ASM_GENERATE_INTERNAL_LABEL (buffer, \"LM\", sym_lineno);\t\\\n+    ASM_GENERATE_INTERNAL_LABEL (buffer, \"LM\", COUNTER);\t\\\n     fprintf (FILE, \".stabn 68,0,%d,\", LINE);\t\t\t\\\n     assemble_name (FILE, buffer);\t\t\t\t\\\n     putc ('-', FILE);\t\t\t\t\t\t\\\n     assemble_name (FILE,\t\t\t\t\t\\\n \t\t   XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0)); \\\n     putc ('\\n', FILE);\t\t\t\t\t\t\\\n-    (*targetm.asm_out.internal_label) (FILE, \"LM\", sym_lineno);\t\t\\\n-    sym_lineno++;\t\t\t\t\t\t\\\n+    (*targetm.asm_out.internal_label) (FILE, \"LM\", COUNTER);\t\\\n   } }\n \n /* When generating stabs debugging, use N_BINCL entries.  */"}, {"sha": "dc048320e7ce8a63cd8a3b6d14d980ab572e0379", "filename": "gcc/config/dbxelf.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fdbxelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fdbxelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdbxelf.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -57,20 +57,18 @@ Boston, MA 02111-1307, USA.  */\n    current function.  */\n \n #undef  ASM_OUTPUT_SOURCE_LINE\n-#define ASM_OUTPUT_SOURCE_LINE(FILE, LINE)\t\t\t\t\\\n+#define ASM_OUTPUT_SOURCE_LINE(FILE, LINE, COUNTER)\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    static int sym_lineno = 1;\t\t\t\t\t\t\\\n     char temp[256];\t\t\t\t\t\t\t\\\n-    ASM_GENERATE_INTERNAL_LABEL (temp, \"LM\", sym_lineno);\t\t\\\n+    ASM_GENERATE_INTERNAL_LABEL (temp, \"LM\", COUNTER);\t\t\t\\\n     fprintf (FILE, \"\\t.stabn 68,0,%d,\", LINE);\t\t\t\t\\\n     assemble_name (FILE, temp);\t\t\t\t\t\t\\\n     putc ('-', FILE);\t\t\t\t\t\t\t\\\n     assemble_name (FILE,\t\t\t\t\t\t\\\n \t\t   XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));\\\n     putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-    (*targetm.asm_out.internal_label) (FILE, \"LM\", sym_lineno);\t\t\t\\\n-    sym_lineno += 1;\t\t\t\t\t\t\t\\\n+    (*targetm.asm_out.internal_label) (FILE, \"LM\", COUNTER);\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n "}, {"sha": "8af0a70cd9f08226517e2ef9f8453f3d65a5e917", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -1206,7 +1206,7 @@ extern struct rtx_def *i960_compare_op0, *i960_compare_op1;\n /* This is how to output a note to DBX telling it the line number\n    to which the following sequence of instructions corresponds.  */\n \n-#define ASM_OUTPUT_SOURCE_LINE(FILE, LINE)\t\t\t\\\n+#define ASM_OUTPUT_SOURCE_LINE(FILE, LINE, COUNTER)\t\t\\\n { if (write_symbols == SDB_DEBUG) {\t\t\t\t\\\n     fprintf ((FILE), \"\\t.ln\t%d\\n\",\t\t\t\t\\\n \t     (sdb_begin_function_line\t\t\t\t\\"}, {"sha": "267f499e2216796cea43d45b6625b82ca674f61e", "filename": "gcc/config/lynx.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flynx.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -84,14 +84,12 @@ Boston, MA 02111-1307, USA.  */\n \t   \"\\t.text\\n\\t.stabs \\\"\\\",%d,0,0,Letext\\nLetext:\\n\", N_SO)\n \n #undef  ASM_OUTPUT_SOURCE_LINE\n-#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\\\n-  { static int sym_lineno = 1;\t\t\t\t\\\n-    fprintf (file, \".stabn 68,0,%d,.LM%d-\",\t\t\\\n-\t     line, sym_lineno);\t\t\t\t\\\n+#define ASM_OUTPUT_SOURCE_LINE(file, line, counter)\t\\\n+  { fprintf (file, \".stabn 68,0,%d,.LM%d-\",\t\t\\\n+\t     line, counter);\t\t\t\t\\\n     assemble_name (file,\t\t\t\t\\\n \t\t   XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0)); \\\n-    fprintf (file, \"\\n.LM%d:\\n\", sym_lineno);\t\t\\\n-    sym_lineno += 1; }\n+    fprintf (file, \"\\n.LM%d:\\n\", counter); }\n \n /* Handle #pragma pack and sometimes #pragma weak.  */\n "}, {"sha": "b4906838bd3c2dbd02768027af779a9d2db5cf40", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -1545,19 +1545,17 @@ do {\t\t\t\t\t\t\t\t\t\\\n    of a word.  */\n \n #undef\tASM_OUTPUT_SOURCE_LINE\n-#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\t\t\\\n+#define ASM_OUTPUT_SOURCE_LINE(file, line, counter)\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      static int sym_lineno = 1;\t\t\t\t\t\\\n       fprintf (file, \".stabn 68,0,%d,.LM%d-\",\t\t\t\t\\\n-\t       line, sym_lineno);\t\t\t\t\t\\\n+\t       line, counter);\t\t\t\t\t\t\\\n       assemble_name\t\t\t\t\t\t\t\\\n \t(file, XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));\t\\\n       fprintf (file, (optimize_size || TARGET_M32R)\t\t\t\\\n \t       ? \"\\n\\t.debugsym .LM%d\\n\"\t\t\t\t\\\n \t       : \"\\n.LM%d:\\n\",\t\t\t\t\t\t\\\n-\t       sym_lineno);\t\t\t\t\t\t\\\n-      sym_lineno += 1;\t\t\t\t\t\t\t\\\n+\t       counter);\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "0830707334d0e80651719e793ccd93982be47085", "filename": "gcc/config/m68k/hp320.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fm68k%2Fhp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fm68k%2Fhp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -276,7 +276,7 @@ do {\t\t\t\t\t\\\n   fprintf (FILE, \"\\tspace %u\\n\", (int)(SIZE))\n \n #define ASM_OUTPUT_SOURCE_FILENAME(FILE, FILENAME)\n-#define ASM_OUTPUT_SOURCE_LINE(FILE, LINENO)\n+#define ASM_OUTPUT_SOURCE_LINE(FILE, LINENO, COUNTER)\n \n /* Output a float value (represented as a C double) as an immediate operand.\n    This macro is a 68k-specific macro.  */"}, {"sha": "2aaa9772f6602aa44090a30666e89e168c16d15f", "filename": "gcc/config/mcore/mcore-pe.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -116,22 +116,20 @@ drectve_section ()\t\t\t\t\t\t\\\n   while (0)\n \n #undef  ASM_OUTPUT_SOURCE_LINE\n-#define ASM_OUTPUT_SOURCE_LINE(FILE, LINE)\t\t\t\t  \\\n+#define ASM_OUTPUT_SOURCE_LINE(FILE, LINE, COUNTER)\t\t\t  \\\n   {\t\t\t\t\t\t\t\t\t  \\\n     if (write_symbols == DBX_DEBUG)\t\t\t\t\t  \\\n       {\t\t\t\t\t\t\t\t\t  \\\n-        static int sym_lineno = 1;\t\t\t\t\t  \\\n         char buffer[256];\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n-        ASM_GENERATE_INTERNAL_LABEL (buffer, \"LM\", sym_lineno);\t\t  \\\n+        ASM_GENERATE_INTERNAL_LABEL (buffer, \"LM\", COUNTER);\t\t  \\\n         fprintf (FILE, \".stabn 68,0,%d,\", LINE);\t\t\t  \\\n         assemble_name (FILE, buffer);\t\t\t\t\t  \\\n         putc ('-', FILE);\t\t\t\t\t\t  \\\n         assemble_name (FILE,\t\t\t\t\t\t  \\\n \t\t   XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0)); \\\n         putc ('\\n', FILE);\t\t\t\t\t\t  \\\n-        (*targetm.asm_out.internal_label) (FILE, \"LM\", sym_lineno);\t\t  \\\n-        sym_lineno ++;\t\t\t\t\t\t\t  \\\n+        (*targetm.asm_out.internal_label) (FILE, \"LM\", COUNTER);\t  \\\n       }\t\t\t\t\t\t\t\t\t  \\\n   }\n "}, {"sha": "c55d4480338e0494d092435b550d6f5cd9972906", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -6884,7 +6884,7 @@ mips_output_function_prologue (file, size)\n \n #ifdef SDB_DEBUGGING_INFO\n   if (debug_info_level != DINFO_LEVEL_TERSE && write_symbols == SDB_DEBUG)\n-    ASM_OUTPUT_SOURCE_LINE (file, DECL_SOURCE_LINE (current_function_decl));\n+    ASM_OUTPUT_SOURCE_LINE (file, DECL_SOURCE_LINE (current_function_decl), 0);\n #endif\n \n   /* In mips16 mode, we may need to generate a 32 bit to handle"}, {"sha": "b00c52ab0c04001ea679296713542e33d69f4a2c", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -3704,7 +3704,7 @@ while (0)\n #endif\n \n #ifndef ASM_OUTPUT_SOURCE_LINE\n-#define ASM_OUTPUT_SOURCE_LINE(STREAM, LINE)\t\t\t\t\\\n+#define ASM_OUTPUT_SOURCE_LINE(STREAM, LINE, COUNTER)\t\t\\\n   mips_output_lineno (STREAM, LINE)\n #endif\n "}, {"sha": "fbfd91bf9440ed1d1185c2c9093e70ee9dad2716", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -939,7 +939,7 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n #define OUTPUT_QUOTED_STRING(STREAM, STRING) \\\n  mmix_output_quoted_string (STREAM, STRING, strlen (STRING))\n \n-#define ASM_OUTPUT_SOURCE_LINE(STREAM, LINE) \\\n+#define ASM_OUTPUT_SOURCE_LINE(STREAM, LINE, COUNTER) \\\n  mmix_asm_output_source_line  (STREAM, LINE)\n \n #define TARGET_ASM_NAMED_SECTION default_elf_asm_named_section"}, {"sha": "9a8d53d3a26f14bb152201716a2e0f725730e24f", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -30,18 +30,17 @@ Boston, MA 02111-1307, USA.  */\n /* We make the first line stab special to avoid adding several\n    gross hacks to GAS.  */\n #undef  ASM_OUTPUT_SOURCE_LINE\n-#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\\\n-  { static int sym_lineno = 1;\t\t\t\t\\\n-    static tree last_function_decl = NULL;\t\t\\\n+#define ASM_OUTPUT_SOURCE_LINE(file, line, counter)\t\\\n+  { static tree last_function_decl = NULL;\t\t\\\n     if (current_function_decl == last_function_decl)\t\\\n       fprintf (file, \"\\t.stabn 68,0,%d,L$M%d-%s\\nL$M%d:\\n\",\t\\\n-\t       line, sym_lineno,\t\t\t\\\n+\t       line, counter,\t\t\t\\\n \t       XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0) + 1, \\\n-\t       sym_lineno);\t\t\t\t\\\n+\t       counter);\t\t\t\t\\\n     else\t\t\t\t\t\t\\\n       fprintf (file, \"\\t.stabn 68,0,%d,0\\n\", line);\t\\\n     last_function_decl = current_function_decl;\t\t\\\n-    sym_lineno += 1; }\n+  }\n \n /* gdb needs a null N_SO at the end of each file for scattered loading.  */\n "}, {"sha": "2ce83798b7c7cb982d5efa1e90db8e044c6618cc", "filename": "gcc/config/ptx4.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fptx4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fptx4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fptx4.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -184,16 +184,14 @@ Boston, MA 02111-1307, USA.\n    current function.  */\n \n #undef ASM_OUTPUT_SOURCE_LINE\n-#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\t\t\\\n+#define ASM_OUTPUT_SOURCE_LINE(file, line, counter)\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    static int sym_lineno = 1;\t\t\t\t\t\t\\\n     fprintf (file, \".stabn 68,0,%d,.LM%d-\",\t\t\t\t\\\n-\t     line, sym_lineno);\t\t\t\t\t\t\\\n+\t     line, counter);\t\t\t\t\t\t\\\n     assemble_name (file,\t\t\t\t\t\t\\\n \t\t   XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));\\\n-    fprintf (file, \"\\n.LM%d:\\n\", sym_lineno);\t\t\t\t\\\n-    sym_lineno += 1;\t\t\t\t\t\t\t\\\n+    fprintf (file, \"\\n.LM%d:\\n\", counter);\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n "}, {"sha": "51193905545f75d07eb68349e52a6262a6f1edb5", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -443,12 +443,11 @@\n /* This is the same as the dbxelf.h version, except that we need to\n    use the function code label, not the function descriptor.  */\n #undef\tASM_OUTPUT_SOURCE_LINE\n-#define\tASM_OUTPUT_SOURCE_LINE(FILE, LINE)\t\t\t\t\\\n+#define\tASM_OUTPUT_SOURCE_LINE(FILE, LINE, COUNTER)\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    static int sym_lineno = 1;\t\t\t\t\t\t\\\n     char temp[256];\t\t\t\t\t\t\t\\\n-    ASM_GENERATE_INTERNAL_LABEL (temp, \"LM\", sym_lineno);\t\t\\\n+    ASM_GENERATE_INTERNAL_LABEL (temp, \"LM\", COUNTER);\t\t\t\\\n     fprintf (FILE, \"\\t.stabn 68,0,%d,\", LINE);\t\t\t\t\\\n     assemble_name (FILE, temp);\t\t\t\t\t\t\\\n     putc ('-', FILE);\t\t\t\t\t\t\t\\\n@@ -457,8 +456,7 @@ do\t\t\t\t\t\t\t\t\t\\\n     assemble_name (FILE,\t\t\t\t\t\t\\\n \t\t   XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));\\\n     putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-    (*targetm.asm_out.internal_label) (FILE, \"LM\", sym_lineno);\t\t\\\n-    sym_lineno += 1;\t\t\t\t\t\t\t\\\n+    (*targetm.asm_out.internal_label) (FILE, \"LM\", COUNTER);\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n "}, {"sha": "f2d6dc08ddfc57de2a11a9193e441a7baff3fe39", "filename": "gcc/config/sh/elf.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fsh%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fsh%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Felf.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -91,16 +91,14 @@ Boston, MA 02111-1307, USA.  */\n   sprintf ((STRING), \"*%s%s%ld\", LOCAL_LABEL_PREFIX, (PREFIX), (long)(NUM))\n \n #undef  ASM_OUTPUT_SOURCE_LINE\n-#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\t\t\\\n+#define ASM_OUTPUT_SOURCE_LINE(file, line, counter)\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    static int sym_lineno = 1;\t\t\t\t\t\t\\\n     asm_fprintf ((file), \".stabn 68,0,%d,%LLM%d-\",\t\t\t\\\n-\t     (line), sym_lineno);\t\t\t\t\t\\\n+\t     (line), (counter));\t\t\t\t\t\\\n     assemble_name ((file),\t\t\t\t\t\t\\\n \t\t   XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));\\\n-    asm_fprintf ((file), \"\\n%LLM%d:\\n\", sym_lineno);\t\t\t\\\n-    sym_lineno += 1;\t\t\t\t\t\t\t\\\n+    asm_fprintf ((file), \"\\n%LLM%d:\\n\", (counter));\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n "}, {"sha": "1031048df696210ec068b72c75a68b6651d031cb", "filename": "gcc/config/sparc/aout.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fsparc%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fsparc%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Faout.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -59,8 +59,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n    This is needed for SunOS 4.0, and should not hurt for 3.2\n    versions either.  */\n-#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\\\n-  { static int sym_lineno = 1;\t\t\t\t\\\n-    fprintf (file, \".stabn 68,0,%d,LM%d\\nLM%d:\\n\",\t\\\n-\t     line, sym_lineno, sym_lineno);\t\t\\\n-    sym_lineno += 1; }\n+#define ASM_OUTPUT_SOURCE_LINE(file, line, counter)\t\\\n+  fprintf (file, \".stabn 68,0,%d,LM%d\\nLM%d:\\n\",\t\\\n+\t   line, counter, counter)"}, {"sha": "e3b591a6316bffdcebf8efda334f22078cb6643e", "filename": "gcc/config/sparc/pbd.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fsparc%2Fpbd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fconfig%2Fsparc%2Fpbd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fpbd.h?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -140,10 +140,8 @@ Boston, MA 02111-1307, USA.  */\n /* This is needed for SunOS 4.0, and should not hurt for 3.2\n    versions either.  */\n #undef ASM_OUTPUT_SOURCE_LINE\n-#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\\\n-  { static int sym_lineno = 1;\t\t\t\t\\\n-    fprintf (file, \".stabn 68,0,%d,.LM%d\\n.LM%d:\\n\",\t\\\n-\t     line, sym_lineno, sym_lineno);\t\t\\\n-    sym_lineno += 1; }\n+#define ASM_OUTPUT_SOURCE_LINE(file, line, counter)\t\\\n+  fprintf (file, \".stabn 68,0,%d,.LM%d\\n.LM%d:\\n\",\t\\\n+\t   line, counter, counter)\n \n #define ASM_INT_OP \"\\t.long \""}, {"sha": "5a00d46555693d5e2c6c423fad152cb823aa7d11", "filename": "gcc/dbxout.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -193,6 +193,10 @@ static GTY(()) int next_file_number;\n \n static GTY(()) int scope_labelno;\n \n+/* A counter for dbxout_source_line.  */\n+\n+static GTY(()) int dbxout_source_line_counter;\n+\n /* Nonzero if we have actually used any of the GDB extensions\n    to the debugging format.  The idea is that we use them for the\n    first time only if there's a strong reason, but once we have done that,\n@@ -638,7 +642,8 @@ dbxout_source_line (lineno, filename)\n   dbxout_source_file (asmfile, filename);\n \n #ifdef ASM_OUTPUT_SOURCE_LINE\n-  ASM_OUTPUT_SOURCE_LINE (asmfile, lineno);\n+  dbxout_source_line_counter += 1;\n+  ASM_OUTPUT_SOURCE_LINE (asmfile, lineno, dbxout_source_line_counter);\n #else\n   fprintf (asmfile, \"%s%d,0,%d\\n\", ASM_STABD_OP, N_SLINE, lineno);\n #endif"}, {"sha": "6a686e93643f34502dd059cdfd3ecef832198689", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -6242,10 +6242,12 @@ the assembler source.  So you can use it to canonicalize the format\n of the filename using this macro.\n \n @findex ASM_OUTPUT_SOURCE_LINE\n-@item ASM_OUTPUT_SOURCE_LINE (@var{stream}, @var{line})\n+@item ASM_OUTPUT_SOURCE_LINE (@var{stream}, @var{line}, @var{counter})\n A C statement to output DBX or SDB debugging information before code\n for line number @var{line} of the current source file to the\n-stdio stream @var{stream}.\n+stdio stream @var{stream}. @var{counter} is the number of time the\n+macro was invoked, including the current invocation; it is intended\n+to generate unique labels in the assembly output.\n \n This macro need not be defined if the standard form of debugging\n information for the debugger in use is appropriate."}, {"sha": "54dcc799f40f630eec5d22e8c9800e285d57793b", "filename": "gcc/sdbout.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -51,6 +51,14 @@ AT&T C compiler.  From the example below I would conclude the following:\n \n static GTY(()) tree anonymous_types;\n \n+/* Counter for sdbout_source_line.  */\n+\n+static GTY(()) int sdbout_source_line_counter;\n+\n+/* Counter to generate unique \"names\" for nameless struct members.  */\n+\n+static GTY(()) int unnamed_struct_number;\n+\n #ifdef SDB_DEBUGGING_INFO\n \n #include \"rtl.h\"\n@@ -88,9 +96,6 @@ static GTY(()) tree anonymous_types;\n \n int sdb_begin_function_line = -1;\n \n-/* Counter to generate unique \"names\" for nameless struct members.  */\n-\n-static int unnamed_struct_number = 0;\n \n extern FILE *asm_out_file;\n \n@@ -1527,6 +1532,9 @@ sdbout_end_block (unsigned int line, unsigned int n ATTRIBUTE_UNUSED)\n   PUT_SDB_BLOCK_END (line - sdb_begin_function_line);\n }\n \n+/* Output a line number symbol entry for source file FILENAME and line\n+   number LINE.  */\n+\n static void\n sdbout_source_line (line, filename)\n      unsigned int line;\n@@ -1536,7 +1544,8 @@ sdbout_source_line (line, filename)\n   if ((int) line > sdb_begin_function_line)\n     {\n #ifdef ASM_OUTPUT_SOURCE_LINE\n-      ASM_OUTPUT_SOURCE_LINE (asm_out_file, line);\n+      sdbout_source_line_counter += 1;\n+      ASM_OUTPUT_SOURCE_LINE (asm_out_file, line, sdbout_source_line_counter);\n #else\n       fprintf (asm_out_file, \"\\t.ln\\t%d\\n\",\n \t       ((sdb_begin_function_line > -1)"}, {"sha": "faf8717e82b5df469b0294f7b689d5dd6cc633f4", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8d0467e650910986afba4b0b9ed863f9138729c/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=a8d0467e650910986afba4b0b9ed863f9138729c", "patch": "@@ -78,7 +78,7 @@ const char *xcoff_lastfile;\n ((xcoff_inlining) ? (LINENO) : (LINENO) - xcoff_begin_function_line)\n \n /* Output source line numbers via \".line\" rather than \".stabd\".  */\n-#define ASM_OUTPUT_SOURCE_LINE(FILE,LINENUM) \t\t\t\t   \\\n+#define ASM_OUTPUT_SOURCE_LINE(FILE,LINENUM,COUNTER)\t\t\t   \\\n   do\t\t\t\t\t\t\t\t\t   \\\n     {\t\t\t\t\t\t\t\t\t   \\\n       if (xcoff_begin_function_line >= 0)\t\t\t\t   \\\n@@ -323,7 +323,7 @@ xcoffout_source_line (line, filename)\n \n   xcoffout_source_file (asm_out_file, filename, inline_p);\n \n-  ASM_OUTPUT_SOURCE_LINE (asm_out_file, line);\n+  ASM_OUTPUT_SOURCE_LINE (asm_out_file, line, 0);\n }\n \f\n /* Output the symbols defined in block number DO_BLOCK.\n@@ -461,7 +461,7 @@ xcoffout_begin_prologue (line, file)\n   xcoffout_block (DECL_INITIAL (current_function_decl), 0,\n \t\t  DECL_ARGUMENTS (current_function_decl));\n \n-  ASM_OUTPUT_SOURCE_LINE (asm_out_file, line);\n+  ASM_OUTPUT_SOURCE_LINE (asm_out_file, line, 0);\n }\n \n /* Called at end of function (before epilogue)."}]}