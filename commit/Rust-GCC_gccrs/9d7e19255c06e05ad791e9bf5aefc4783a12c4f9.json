{"sha": "9d7e19255c06e05ad791e9bf5aefc4783a12c4f9", "node_id": "C_kwDOANBUbNoAKDlkN2UxOTI1NWMwNmUwNWFkNzkxZTliZjVhZWZjNDc4M2ExMmM0Zjk", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2020-01-14T10:46:42Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-01-16T09:22:14Z"}, "message": "Add VxWorks fixincludes hack, open posix API for C++\n\nWhen system headers expose a strict \"open\" prototype with\n3 args, arrange to expose a C++ overload with only two.\n\n2021-01-10  Olivier Hainque  <hainque@adacore.com>\n\n\t* inclhack.def (vxworks_math_h_fp_c99): New hack.\n\t* tests/base/fcntl.h: Update.\n\t* fixincl.x: Regenerate.", "tree": {"sha": "91fcd21a49ed8f11db1fae5e2502a95df489ed83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91fcd21a49ed8f11db1fae5e2502a95df489ed83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d7e19255c06e05ad791e9bf5aefc4783a12c4f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d7e19255c06e05ad791e9bf5aefc4783a12c4f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d7e19255c06e05ad791e9bf5aefc4783a12c4f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d7e19255c06e05ad791e9bf5aefc4783a12c4f9/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "943fad67028c7164ddf9f818877394f74c06f254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943fad67028c7164ddf9f818877394f74c06f254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/943fad67028c7164ddf9f818877394f74c06f254"}], "stats": {"total": 137, "additions": 132, "deletions": 5}, "files": [{"sha": "b5cea5a43afce0f019d4d91888c11fcb6eed7f0b", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 58, "deletions": 5, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d7e19255c06e05ad791e9bf5aefc4783a12c4f9/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d7e19255c06e05ad791e9bf5aefc4783a12c4f9/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=9d7e19255c06e05ad791e9bf5aefc4783a12c4f9", "patch": "@@ -2,11 +2,11 @@\n  *\n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  *\n- * It has been AutoGen-ed  January 15, 2022 at 10:53:57 PM by AutoGen 5.18.16\n+ * It has been AutoGen-ed  January 15, 2022 at 10:54:24 PM by AutoGen 5.18.16\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Sat Jan 15 22:53:57 UTC 2022\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Sat Jan 15 22:54:24 UTC 2022\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 265 fixup descriptions.\n+ * This file contains 266 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -10469,6 +10469,53 @@ static const char* apzVxworks_RegsPatch[] = {\n     \"#include <arch/../regs.h>\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Vxworks_Posix_Open fix\n+ */\n+tSCC zVxworks_Posix_OpenName[] =\n+     \"vxworks_posix_open\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zVxworks_Posix_OpenList[] =\n+  \"fcntl.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzVxworks_Posix_OpenMachs[] = {\n+        \"*-*-vxworks*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zVxworks_Posix_OpenSelect0[] =\n+       \"extern int.*open \\\\(const char \\\\*[ a-z]*, int[ a-z]*, int[ a-z]*\\\\);\";\n+\n+#define    VXWORKS_POSIX_OPEN_TEST_CT  1\n+static tTestDesc aVxworks_Posix_OpenTests[] = {\n+  { TT_EGREP,    zVxworks_Posix_OpenSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Vxworks_Posix_Open\n+ */\n+static const char* apzVxworks_Posix_OpenPatch[] = {\n+    \"format\",\n+    \"%0\\n\\n\\\n+#if defined(__cplusplus)\\n\\\n+extern \\\"C++\\\" {\\n\\\n+  inline int open (const char *, int) __attribute__((__always_inline__));\\n\\n\\\n+  inline int\\n\\\n+  open (const char *name, int flags)\\n\\\n+  {\\n\\\n+    return open (name, flags, 0);\\n\\\n+  }\\n\\\n+}\\n\\\n+#endif\\n\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Vxworks_Time fix\n@@ -10795,9 +10842,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          304\n+#define REGEX_COUNT          305\n #define MACH_LIST_SIZE_LIMIT 187\n-#define FIX_COUNT            265\n+#define FIX_COUNT            266\n \n /*\n  *  Enumerate the fixes\n@@ -11060,6 +11107,7 @@ typedef enum {\n     VXWORKS_NEEDS_VXWORKS_FIXIDX,\n     VXWORKS_NEXT_YVALS_FIXIDX,\n     VXWORKS_REGS_FIXIDX,\n+    VXWORKS_POSIX_OPEN_FIXIDX,\n     VXWORKS_TIME_FIXIDX,\n     VXWORKS_WRITE_CONST_FIXIDX,\n     VXWORKS_IOLIB_INCLUDE_UNISTD_FIXIDX,\n@@ -12356,6 +12404,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      VXWORKS_REGS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aVxworks_RegsTests,   apzVxworks_RegsPatch, 0 },\n \n+  {  zVxworks_Posix_OpenName,    zVxworks_Posix_OpenList,\n+     apzVxworks_Posix_OpenMachs,\n+     VXWORKS_POSIX_OPEN_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aVxworks_Posix_OpenTests,   apzVxworks_Posix_OpenPatch, 0 },\n+\n   {  zVxworks_TimeName,    zVxworks_TimeList,\n      apzVxworks_TimeMachs,\n      VXWORKS_TIME_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "8400d0c696b529c1bb882ba750ea6bab7601ac8c", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d7e19255c06e05ad791e9bf5aefc4783a12c4f9/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d7e19255c06e05ad791e9bf5aefc4783a12c4f9/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=9d7e19255c06e05ad791e9bf5aefc4783a12c4f9", "patch": "@@ -5296,6 +5296,47 @@ fix = {\n     test_text   = \"#include <regs.h>\\n\";\n };\n \n+/*\n+ * Likewise, open's posix interface allows two or three arguments and\n+ * some VxWorks headers expose only a strict 3 arguments version.  Merely\n+ * changing the prototype into a varargs one is risky as the implementation\n+ * would receive garbage in the third arg for calls providing only two,\n+ * which libstdc++ does.  We simply provide an always inline overload for C++\n+ * instead.\n+ *\n+ * Both fcntl.h and ioLib.h might \"feature\" such a prototype for _WRS_KERNEL.\n+ * The latter #includes the former though (since 1992 according to the embedded\n+ * log), so just leave ioLib.h alone.\n+ */\n+fix = {\n+    hackname    = vxworks_posix_open;\n+    mach        = \"*-*-vxworks*\";\n+    files       = fcntl.h;\n+\n+    select      = \"extern int.*open \\\\(const char \\\\*[ a-z]*, int[ a-z]*, int[ a-z]*\\\\);\";\n+    c_fix       = format;\n+    c_fix_arg = << _EOArg_\n+%0\n+\n+#if defined(__cplusplus)\n+extern \"C++\" {\n+  inline int open (const char *, int) __attribute__((__always_inline__));\n+\n+  inline int\n+  open (const char *name, int flags)\n+  {\n+    return open (name, flags, 0);\n+  }\n+}\n+#endif\n+\n+_EOArg_;\n+\n+    test_text   =\n+      \"extern int open (const char *, int, int);\\n\"\n+      \"extern int open (const char *name, int flags, int mode );\\n\";\n+};\n+\n /*\n  *  Another bad dependency in VxWorks 5.2 <time.h>.\n  */"}, {"sha": "fe0e56a99f80c8fb9b5b5e9da8208c119d764be1", "filename": "fixincludes/tests/base/fcntl.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d7e19255c06e05ad791e9bf5aefc4783a12c4f9/fixincludes%2Ftests%2Fbase%2Ffcntl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d7e19255c06e05ad791e9bf5aefc4783a12c4f9/fixincludes%2Ftests%2Fbase%2Ffcntl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Ffcntl.h?ref=9d7e19255c06e05ad791e9bf5aefc4783a12c4f9", "patch": "@@ -18,6 +18,39 @@ extern \"C\" {\n #if defined( AAB_AIX_FCNTL_CHECK )\n \n #endif  /* AAB_AIX_FCNTL_CHECK */\n+\n+\n+#if defined( VXWORKS_POSIX_OPEN_CHECK )\n+extern int open (const char *, int, int);\n+\n+#if defined(__cplusplus)\n+extern \"C++\" {\n+  inline int open (const char *, int) __attribute__((__always_inline__));\n+\n+  inline int\n+  open (const char *name, int flags)\n+  {\n+    return open (name, flags, 0);\n+  }\n+}\n+#endif\n+\n+extern int open (const char *name, int flags, int mode );\n+\n+#if defined(__cplusplus)\n+extern \"C++\" {\n+  inline int open (const char *, int) __attribute__((__always_inline__));\n+\n+  inline int\n+  open (const char *name, int flags)\n+  {\n+    return open (name, flags, 0);\n+  }\n+}\n+#endif\n+\n+\n+#endif  /* VXWORKS_POSIX_OPEN_CHECK */\n #ifdef __cplusplus\n }\n #endif"}]}