{"sha": "0b433de68e3c57285ab7f12fd5eee42898b9d5c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI0MzNkZTY4ZTNjNTcyODVhYjdmMTJmZDVlZWU0Mjg5OGI5ZDVjNg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-02-27T00:16:01Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-02-27T00:16:01Z"}, "message": "[multiple changes]\n\nSat Feb 27 01:12:40 1999  Jeffrey A Law  (law@cygnus.com)\n        * md.texi (prologue,epilogue): Document named patterns.\nFri Feb 26 19:31:25 1999  Dave Love  <fx@gnu.org>\n        * md.texi, invoke.texi: Fix unterminated @xrefs.\n\nFrom-SVN: r25477", "tree": {"sha": "e953bf8032cd58c17cc83cad46c07b94747ddb2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e953bf8032cd58c17cc83cad46c07b94747ddb2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b433de68e3c57285ab7f12fd5eee42898b9d5c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b433de68e3c57285ab7f12fd5eee42898b9d5c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b433de68e3c57285ab7f12fd5eee42898b9d5c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b433de68e3c57285ab7f12fd5eee42898b9d5c6/comments", "author": null, "committer": null, "parents": [{"sha": "665431699036e1b9bd2317d452579a6fc6af9482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665431699036e1b9bd2317d452579a6fc6af9482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/665431699036e1b9bd2317d452579a6fc6af9482"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "662bb07c92cf481652a4f6c32c92d5038cb85529", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b433de68e3c57285ab7f12fd5eee42898b9d5c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b433de68e3c57285ab7f12fd5eee42898b9d5c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b433de68e3c57285ab7f12fd5eee42898b9d5c6", "patch": "@@ -1,3 +1,11 @@\n+Sat Feb 27 01:12:40 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* md.texi (prologue,epilogue): Document named patterns.\n+\n+Fri Feb 26 19:31:25 1999  Dave Love  <fx@gnu.org>\n+\n+\t* md.texi, invoke.texi: Fix unterminated @xrefs.\n+\n Fri Feb 26 15:33:45 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* genattrtab.c (simplify_knowing): Fix uninitialized read"}, {"sha": "3c938124c2ac6d2f53c12043e5b82298248f09c1", "filename": "gcc/invoke.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b433de68e3c57285ab7f12fd5eee42898b9d5c6/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b433de68e3c57285ab7f12fd5eee42898b9d5c6/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=0b433de68e3c57285ab7f12fd5eee42898b9d5c6", "patch": "@@ -5058,7 +5058,7 @@ there.\n You can specify that an individual function is called with this calling\n sequence with the function attribute @samp{stdcall}.  You can also\n override the @samp{-mrtd} option by using the function attribute\n-@samp{cdecl}. @xref{Function Attributes}\n+@samp{cdecl}.  @xref{Function Attributes}.\n \n @strong{Warning:} this calling convention is incompatible with the one\n normally used on Unix, so you cannot use it if you need to call\n@@ -5084,7 +5084,8 @@ supported letters are: @code{a} allocate EAX; @code{b} allocate EBX;\n Control how many registers are used to pass integer arguments.  By\n default, no registers are used to pass arguments, and at most 3\n registers can be used.  You can control this behavior for a specific\n-function by using the function attribute @samp{regparm}.   @xref{Function Attributes}\n+function by using the function attribute @samp{regparm}.\n+@xref{Function Attributes}.\n \n @strong{Warning:} if you use this switch, and\n @var{num} is nonzero, then you must build all modules with the same\n@@ -5729,7 +5730,7 @@ All variants support @samp{-mcpu=base}, this is the default.\n Put functions, data, and readonly data in @var{text section},\n @var{data section}, and @var{readonly data section} respectively\n by default.  This can be overridden with the @code{section} attribute.\n-@xref{Variable Attributes}\n+@xref{Variable Attributes}.\n \n @end table\n "}, {"sha": "907df37080e8a90e3b2e9535d96f3953d9d04acd", "filename": "gcc/md.texi", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b433de68e3c57285ab7f12fd5eee42898b9d5c6/gcc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b433de68e3c57285ab7f12fd5eee42898b9d5c6/gcc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmd.texi?ref=0b433de68e3c57285ab7f12fd5eee42898b9d5c6", "patch": "@@ -2181,7 +2181,7 @@ pattern or a @samp{tst@var{m}} pattern.\n \n Machines that use a pseudo register for the condition code value, or\n where the mode used for the comparison depends on the condition being\n-tested, should also use the above mechanism.  @xref{Jump Patterns}\n+tested, should also use the above mechanism.  @xref{Jump Patterns}.\n \n The above discussion also applies to the @samp{mov@var{mode}cc} and\n @samp{s@var{cond}} patterns.\n@@ -2558,6 +2558,40 @@ pattern to some special register.\n This pattern must be defined if @code{RETURN_ADDR_RTX} does not yield\n something that can be reliably and permanently modified, i.e. a fixed\n hard register or a stack memory reference.\n+\n+@cindex @code{prologue} instruction pattern\n+@item @samp{prologue}\n+This pattern, if defined, emits RTL for entry to a function.  The function\n+entry is resposible for setting up the stack frame, initializing the frame\n+pointer register, saving callee saved registers, etc.\n+\n+Using a prologue pattern is generally preferred over defining\n+@code{FUNCTION_PROLOGUE} to emit assembly code for the prologue.\n+\n+The @code{prologue} pattern is particularly useful for targets which perform\n+instruction scheduling.\n+\n+@cindex @code{epilogue} instruction pattern\n+@item @samp{epilogue}\n+This pattern, if defined, emits RTL for exit from a function.  The function\n+exit is resposible for deallocating the stack frame, restoring callee saved\n+registers and emitting the return instruction.\n+\n+Using an epilogue pattern is generally preferred over defining\n+@code{FUNCTION_EPILOGUE} to emit assembly code for the prologue.\n+\n+The @code{epilogue} pattern is particularly useful for targets which perform\n+instruction scheduling or which have delay slots for their return instruction.\n+\n+@cindex @code{sibcall_epilogue} instruction pattern\n+@item @samp{sibcall_epilogue}\n+This pattern, if defined, emits RTL for exit from a function without the final\n+branch back to the calling function.  This pattern will be emitted before any\n+sibling call (aka tail call) sites.\n+\n+The @code{sibcall_epilogue} pattern must not clobber any arguments used for\n+parameter passing or any stack slots for arguments passed to the current\n+function.  \n @end table\n \n @node Pattern Ordering"}]}