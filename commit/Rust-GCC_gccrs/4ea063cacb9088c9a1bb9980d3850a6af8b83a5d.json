{"sha": "4ea063cacb9088c9a1bb9980d3850a6af8b83a5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVhMDYzY2FjYjkwODhjOWExYmI5OTgwZDM4NTBhNmFmOGI4M2E1ZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-14T00:38:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-14T00:38:07Z"}, "message": "re PR go/50654 (Many Go tests fail on emutls targets)\n\n\tPR go/50654\nruntime: Reload m and g if necessary after getcontext returns.\n\nFrom-SVN: r184188", "tree": {"sha": "9781b494c634c61dbb0c3c9e68e0efae56301b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9781b494c634c61dbb0c3c9e68e0efae56301b42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ea063cacb9088c9a1bb9980d3850a6af8b83a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea063cacb9088c9a1bb9980d3850a6af8b83a5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ea063cacb9088c9a1bb9980d3850a6af8b83a5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea063cacb9088c9a1bb9980d3850a6af8b83a5d/comments", "author": null, "committer": null, "parents": [{"sha": "09578bcd52d81e43a11caac178ee78073a2eb6fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09578bcd52d81e43a11caac178ee78073a2eb6fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09578bcd52d81e43a11caac178ee78073a2eb6fc"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "609920a561971cda3dfbae75ddf50c9fea951ab5", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea063cacb9088c9a1bb9980d3850a6af8b83a5d/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea063cacb9088c9a1bb9980d3850a6af8b83a5d/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=4ea063cacb9088c9a1bb9980d3850a6af8b83a5d", "patch": "@@ -309,6 +309,8 @@ static void runtime_mcall(void (*)(G*)) __attribute__ ((noinline));\n static void\n runtime_mcall(void (*pfn)(G*))\n {\n+\tM *mp;\n+\tG *gp;\n #ifndef USING_SPLIT_STACK\n \tint i;\n #endif\n@@ -317,28 +319,45 @@ runtime_mcall(void (*pfn)(G*))\n \t// collector.\n \t__builtin_unwind_init();\n \n-\tif(g == m->g0)\n+\tmp = m;\n+\tgp = g;\n+\tif(gp == mp->g0)\n \t\truntime_throw(\"runtime: mcall called on m->g0 stack\");\n \n-\tif(g != nil) {\n+\tif(gp != nil) {\n \n #ifdef USING_SPLIT_STACK\n \t\t__splitstack_getcontext(&g->stack_context[0]);\n #else\n-\t\tg->gcnext_sp = &i;\n+\t\tgp->gcnext_sp = &i;\n #endif\n-\t\tg->fromgogo = false;\n-\t\tgetcontext(&g->context);\n+\t\tgp->fromgogo = false;\n+\t\tgetcontext(&gp->context);\n+\n+\t\t// When we return from getcontext, we may be running\n+\t\t// in a new thread.  That means that m and g may have\n+\t\t// changed.  They are global variables so we will\n+\t\t// reload them, but the addresses of m and g may be\n+\t\t// cached in our local stack frame, and those\n+\t\t// addresses may be wrong.  Call functions to reload\n+\t\t// the values for this thread.\n+\t\tmp = runtime_m();\n+\t\tgp = runtime_g();\n \t}\n-\tif (g == nil || !g->fromgogo) {\n+\tif (gp == nil || !gp->fromgogo) {\n #ifdef USING_SPLIT_STACK\n-\t\t__splitstack_setcontext(&m->g0->stack_context[0]);\n+\t\t__splitstack_setcontext(&mp->g0->stack_context[0]);\n #endif\n-\t\tm->g0->entry = (byte*)pfn;\n-\t\tm->g0->param = g;\n-\t\tg = m->g0;\n-\t\tfixcontext(&m->g0->context);\n-\t\tsetcontext(&m->g0->context);\n+\t\tmp->g0->entry = (byte*)pfn;\n+\t\tmp->g0->param = gp;\n+\n+\t\t// It's OK to set g directly here because this case\n+\t\t// can not occur if we got here via a setcontext to\n+\t\t// the getcontext call just above.\n+\t\tg = mp->g0;\n+\n+\t\tfixcontext(&mp->g0->context);\n+\t\tsetcontext(&mp->g0->context);\n \t\truntime_throw(\"runtime: mcall function returned\");\n \t}\n }"}]}