{"sha": "8e89b5b5fbe131046e8f8905c455a52fd9378e28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU4OWI1YjVmYmUxMzEwNDZlOGY4OTA1YzQ1NWE1MmZkOTM3OGUyOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-02-11T15:07:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-02-11T15:07:40Z"}, "message": "re PR tree-optimization/56264 (ICE in check_loop_closed_ssa_use, at  tree-ssa-loop-manip.c:557)\n\n2013-02-11  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56264\n\t* cfgloop.h (fix_loop_structure): Adjust prototype.\n\t* loop-init.c (fix_loop_structure): Return the number of\n\tnewly discovered loops.\n\t* tree-cfgcleanup.c (repair_loop_structures): When new loops\n\tare discovered, do a full loop-closed SSA rewrite.\n\n\t* gcc.dg/torture/pr56264.c: New testcase.\n\nFrom-SVN: r195941", "tree": {"sha": "51f6d16e5f451e7162e917a8e60c40e7bd15004f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51f6d16e5f451e7162e917a8e60c40e7bd15004f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e89b5b5fbe131046e8f8905c455a52fd9378e28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e89b5b5fbe131046e8f8905c455a52fd9378e28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e89b5b5fbe131046e8f8905c455a52fd9378e28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e89b5b5fbe131046e8f8905c455a52fd9378e28/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4a4b56dc7ff0bb336abd777cb8f2437cd05909b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4a4b56dc7ff0bb336abd777cb8f2437cd05909b"}], "stats": {"total": 61, "additions": 54, "deletions": 7}, "files": [{"sha": "0cdcc3c692a3f4f6bee69efd288425d1777261da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e89b5b5fbe131046e8f8905c455a52fd9378e28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e89b5b5fbe131046e8f8905c455a52fd9378e28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e89b5b5fbe131046e8f8905c455a52fd9378e28", "patch": "@@ -1,3 +1,12 @@\n+2013-02-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56264\n+\t* cfgloop.h (fix_loop_structure): Adjust prototype.\n+\t* loop-init.c (fix_loop_structure): Return the number of\n+\tnewly discovered loops.\n+\t* tree-cfgcleanup.c (repair_loop_structures): When new loops\n+\tare discovered, do a full loop-closed SSA rewrite.\n+\n 2013-02-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56273"}, {"sha": "0b2af724e10024043ede1ad14b5433d1241bd7f8", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e89b5b5fbe131046e8f8905c455a52fd9378e28/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e89b5b5fbe131046e8f8905c455a52fd9378e28/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=8e89b5b5fbe131046e8f8905c455a52fd9378e28", "patch": "@@ -216,7 +216,7 @@ extern void flow_loop_dump (const struct loop *, FILE *,\n struct loop *alloc_loop (void);\n extern void flow_loop_free (struct loop *);\n int flow_loop_nodes_find (basic_block, struct loop *);\n-void fix_loop_structure (bitmap changed_bbs);\n+unsigned fix_loop_structure (bitmap changed_bbs);\n bool mark_irreducible_loops (void);\n void release_recorded_exits (void);\n void record_loop_exits (void);"}, {"sha": "5b3fd63b2e8904f761dc09b4cad2dd31b431e25b", "filename": "gcc/loop-init.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e89b5b5fbe131046e8f8905c455a52fd9378e28/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e89b5b5fbe131046e8f8905c455a52fd9378e28/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=8e89b5b5fbe131046e8f8905c455a52fd9378e28", "patch": "@@ -171,16 +171,19 @@ loop_optimizer_finalize (void)\n    the latch, and loops did not get new subloops (new loops might possibly\n    get created, but we are not interested in them).  Fix up the mess.\n \n-   If CHANGED_BBS is not NULL, basic blocks whose loop has changed are\n-   marked in it.  */\n+   If CHANGED_BBS is not NULL, basic blocks whose loop depth has changed are\n+   marked in it.\n \n-void\n+   Returns the number of new discovered loops.  */\n+\n+unsigned\n fix_loop_structure (bitmap changed_bbs)\n {\n   basic_block bb;\n   int record_exits = 0;\n   loop_iterator li;\n   struct loop *loop;\n+  unsigned old_nloops;\n \n   timevar_push (TV_LOOP_INIT);\n \n@@ -228,6 +231,10 @@ fix_loop_structure (bitmap changed_bbs)\n       delete_loop (loop);\n     }\n \n+  /* Remember the number of loops so we can return how many new loops\n+     flow_loops_find discovered.  */\n+  old_nloops = number_of_loops ();\n+\n   /* Re-compute loop structure in-place.  */\n   flow_loops_find (current_loops);\n \n@@ -253,6 +260,8 @@ fix_loop_structure (bitmap changed_bbs)\n #endif\n \n   timevar_pop (TV_LOOP_INIT);\n+\n+  return number_of_loops () - old_nloops;\n }\n \f\n /* Gate for the RTL loop superpass.  The actual passes are subpasses."}, {"sha": "f5ada1c25867e85e7372f15a8aaeaf79a9a53913", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e89b5b5fbe131046e8f8905c455a52fd9378e28/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e89b5b5fbe131046e8f8905c455a52fd9378e28/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e89b5b5fbe131046e8f8905c455a52fd9378e28", "patch": "@@ -1,3 +1,8 @@\n+2013-02-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56264\n+\t* gcc.dg/torture/pr56264.c: New testcase.\n+\n 2013-02-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56273"}, {"sha": "ca5eb47ff6b88489306f22bb542cc6d6026935af", "filename": "gcc/testsuite/gcc.dg/torture/pr56264.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e89b5b5fbe131046e8f8905c455a52fd9378e28/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56264.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e89b5b5fbe131046e8f8905c455a52fd9378e28/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56264.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56264.c?ref=8e89b5b5fbe131046e8f8905c455a52fd9378e28", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\r\n+/* { dg-options \"-funswitch-loops\" } */\r\n+\r\n+int a, b, c;\r\n+\r\n+void f(void)\r\n+{\r\n+  if(b)\r\n+    {\r\n+      for(a = 0; a < 1; a++)\r\n+\tlbl:\r\n+\t    c = c && b ? : 0;\r\n+\r\n+      c = 0;\r\n+      goto lbl;\r\n+    }\r\n+\r\n+  if(a)\r\n+    goto lbl;\r\n+}\r"}, {"sha": "94e616b7cf68a112149b94515110a3ede0a0d507", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e89b5b5fbe131046e8f8905c455a52fd9378e28/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e89b5b5fbe131046e8f8905c455a52fd9378e28/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=8e89b5b5fbe131046e8f8905c455a52fd9378e28", "patch": "@@ -707,18 +707,22 @@ static void\n repair_loop_structures (void)\n {\n   bitmap changed_bbs;\n+  unsigned n_new_loops;\n \n   calculate_dominance_info (CDI_DOMINATORS);\n \n   timevar_push (TV_REPAIR_LOOPS);\n   changed_bbs = BITMAP_ALLOC (NULL);\n-  fix_loop_structure (changed_bbs);\n+  n_new_loops = fix_loop_structure (changed_bbs);\n \n   /* This usually does nothing.  But sometimes parts of cfg that originally\n      were inside a loop get out of it due to edge removal (since they\n-     become unreachable by back edges from latch).  */\n+     become unreachable by back edges from latch).  Also a former\n+     irreducible loop can become reducible - in this case force a full\n+     rewrite into loop-closed SSA form.  */\n   if (loops_state_satisfies_p (LOOP_CLOSED_SSA))\n-    rewrite_into_loop_closed_ssa (changed_bbs, TODO_update_ssa);\n+    rewrite_into_loop_closed_ssa (n_new_loops ? NULL : changed_bbs,\n+\t\t\t\t  TODO_update_ssa);\n \n   BITMAP_FREE (changed_bbs);\n "}]}