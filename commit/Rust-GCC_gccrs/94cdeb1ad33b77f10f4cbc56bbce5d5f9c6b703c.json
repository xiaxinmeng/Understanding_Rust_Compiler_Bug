{"sha": "94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRjZGViMWFkMzNiNzdmMTBmNGNiYzU2YmJjZTVkNWY5YzZiNzAzYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-07-18T13:17:03Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-07-18T13:17:03Z"}, "message": "builtins.c (max_builtin, [...]): Replace calls to build with buildN.\n\n\n\t* builtins.c (max_builtin, min_builtin,\n\tjava_build_function_call_expr): Replace calls to build with buildN.\n\t* class.c (build_class_ref, build_static_field_ref,\n\tget_dispatch_table, make_class_data, layout_class_method): Likewise.\n\t* constants.c (build_ref_from_constant_pool): Likewise.\n\t* decl.c (update_aliases, push_jvm_slot, poplevel, finish_method,\n\tadd_stmt_to_compound): Likewise.\n\t* except.c (build_exception_object_ref, expand_end_java_handler):\n\tLikewise.\n\t* java-gimplify.c (java_gimplify_case_expr,\n\tjava_gimplify_default_expr, java_gimplify_block,\n\tjava_gimplify_new_array_init, java_gimplify_try_expr): Likewise.\n\t* jcf-write.c (generate_bytecode_insns): Likewise.\n\t* typeck.c (convert_ieee_real_to_integer): Likewise.\n\nFrom-SVN: r84894", "tree": {"sha": "1f13dfd1858fc89f9b7558e0830a0adc266edb2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f13dfd1858fc89f9b7558e0830a0adc266edb2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/comments", "author": null, "committer": null, "parents": [{"sha": "3d23e0184a2917a9e5b1ef56b7a3c99d6398f08d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d23e0184a2917a9e5b1ef56b7a3c99d6398f08d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d23e0184a2917a9e5b1ef56b7a3c99d6398f08d"}], "stats": {"total": 225, "additions": 121, "deletions": 104}, "files": [{"sha": "308aaa3693551fb11d4f7d2094ebf1f23904aa61", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c", "patch": "@@ -1,3 +1,20 @@\n+2004-07-18  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (max_builtin, min_builtin,\n+\tjava_build_function_call_expr): Replace calls to build with buildN.\n+\t* class.c (build_class_ref, build_static_field_ref,\n+\tget_dispatch_table, make_class_data, layout_class_method): Likewise.\n+\t* constants.c (build_ref_from_constant_pool): Likewise.\n+\t* decl.c (update_aliases, push_jvm_slot, poplevel, finish_method,\n+\tadd_stmt_to_compound): Likewise.\n+\t* except.c (build_exception_object_ref, expand_end_java_handler):\n+\tLikewise.\n+\t* java-gimplify.c (java_gimplify_case_expr,\n+\tjava_gimplify_default_expr, java_gimplify_block,\n+\tjava_gimplify_new_array_init, java_gimplify_try_expr): Likewise.\n+\t* jcf-write.c (generate_bytecode_insns): Likewise.\n+\t* typeck.c (convert_ieee_real_to_integer): Likewise.\n+\n 2004-07-17  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* java-tree.h (builtin_function): Declare."}, {"sha": "8068c0415a12f6f47954393d68e1818299a35468", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c", "patch": "@@ -96,17 +96,17 @@ static GTY(()) struct builtin_record java_builtins[] =\n static tree\n max_builtin (tree method_return_type, tree method_arguments)\n {\n-  return fold (build (MAX_EXPR, method_return_type,\n-\t\t      TREE_VALUE (method_arguments),\n-\t\t      TREE_VALUE (TREE_CHAIN (method_arguments))));\n+  return fold (build2 (MAX_EXPR, method_return_type,\n+\t\t       TREE_VALUE (method_arguments),\n+\t\t       TREE_VALUE (TREE_CHAIN (method_arguments))));\n }\n \n static tree\n min_builtin (tree method_return_type, tree method_arguments)\n {\n-  return fold (build (MIN_EXPR, method_return_type,\n-\t\t      TREE_VALUE (method_arguments),\n-\t\t      TREE_VALUE (TREE_CHAIN (method_arguments))));\n+  return fold (build2 (MIN_EXPR, method_return_type,\n+\t\t       TREE_VALUE (method_arguments),\n+\t\t       TREE_VALUE (TREE_CHAIN (method_arguments))));\n }\n \n static tree\n@@ -123,8 +123,8 @@ java_build_function_call_expr (tree fn, tree arglist)\n   tree call_expr;\n \n   call_expr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)), fn);\n-  call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n-\t\t     call_expr, arglist, NULL_TREE);\n+  call_expr = build3 (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n+\t\t      call_expr, arglist, NULL_TREE);\n   TREE_SIDE_EFFECTS (call_expr) = 1;\n   return fold (call_expr);\n }"}, {"sha": "64e44090f402a6c2a1bce2ea9228ce3aaf7238b1", "filename": "gcc/java/class.c", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c", "patch": "@@ -1050,8 +1050,8 @@ build_class_ref (tree type)\n \t\tabort ();\n \n \t      prim_class = lookup_class (get_identifier (prim_class_name));\n-\t      return build (COMPONENT_REF, NULL_TREE,\n-\t\t\t    prim_class, TYPE_identifier_node, NULL_TREE);\n+\t      return build3 (COMPONENT_REF, NULL_TREE,\n+\t\t\t     prim_class, TYPE_identifier_node, NULL_TREE);\n \t    }\n \t  decl_name = TYPE_NAME (type);\n \t  if (TREE_CODE (decl_name) == TYPE_DECL)\n@@ -1115,9 +1115,9 @@ build_static_field_ref (tree fdecl)\n \t= build_int_2 (get_symbol_table_index \n \t\t       (fdecl, &TYPE_ATABLE_METHODS (output_class)), 0);\n       tree field_address\n-\t= build (ARRAY_REF, build_pointer_type (TREE_TYPE (fdecl)), \n-\t\t TYPE_ATABLE_DECL (output_class), table_index,\n-\t\t NULL_TREE, NULL_TREE);\n+\t= build4 (ARRAY_REF, build_pointer_type (TREE_TYPE (fdecl)), \n+\t\t  TYPE_ATABLE_DECL (output_class), table_index,\n+\t\t  NULL_TREE, NULL_TREE);\n       return fold (build1 (INDIRECT_REF, TREE_TYPE (fdecl), \n \t\t\t   field_address));\n     }\n@@ -1129,9 +1129,9 @@ build_static_field_ref (tree fdecl)\n       tree fld;\n       int field_index = 0;\n       ref = build1 (INDIRECT_REF, class_type_node, ref);\n-      ref = build (COMPONENT_REF, field_ptr_type_node, ref,\n-\t\t   lookup_field (&class_type_node, fields_ident),\n-\t\t   NULL_TREE);\n+      ref = build3 (COMPONENT_REF, field_ptr_type_node, ref,\n+\t\t    lookup_field (&class_type_node, fields_ident),\n+\t\t    NULL_TREE);\n \n       for (fld = TYPE_FIELDS (fclass); ; fld = TREE_CHAIN (fld))\n \t{\n@@ -1144,15 +1144,15 @@ build_static_field_ref (tree fdecl)\n \t    field_index++;\n \t}\n       field_index *= int_size_in_bytes (field_type_node);\n-      ref = fold (build (PLUS_EXPR, field_ptr_type_node,\n-\t\t\t ref, build_int_2 (field_index, 0)));\n+      ref = fold (build2 (PLUS_EXPR, field_ptr_type_node,\n+\t\t\t  ref, build_int_2 (field_index, 0)));\n       ref = build1 (INDIRECT_REF, field_type_node, ref);\n-      ref = build (COMPONENT_REF, field_info_union_node,\n-\t\t   ref, lookup_field (&field_type_node, info_ident),\n-\t\t   NULL_TREE);\n-      ref = build (COMPONENT_REF, ptr_type_node,\n-\t\t   ref, TREE_CHAIN (TYPE_FIELDS (field_info_union_node)),\n-\t\t   NULL_TREE);\n+      ref = build3 (COMPONENT_REF, field_info_union_node,\n+\t\t    ref, lookup_field (&field_type_node, info_ident),\n+\t\t    NULL_TREE);\n+      ref = build3 (COMPONENT_REF, ptr_type_node,\n+\t\t    ref, TREE_CHAIN (TYPE_FIELDS (field_info_union_node)),\n+\t\t    NULL_TREE);\n       ref = build1 (NOP_EXPR, build_pointer_type (TREE_TYPE (fdecl)), ref);\n       return fold (build1 (INDIRECT_REF, TREE_TYPE(fdecl), ref));\n     }\n@@ -1421,8 +1421,8 @@ get_dispatch_table (tree type, tree this_class_addr)\n \t  if (TARGET_VTABLE_USES_DESCRIPTORS)\n \t    for (j = 0; j < TARGET_VTABLE_USES_DESCRIPTORS; ++j)\n \t      {\n-\t\ttree fdesc = build (FDESC_EXPR, nativecode_ptr_type_node, \n-\t\t\t\t    method, build_int_2 (j, 0));\n+\t\ttree fdesc = build2 (FDESC_EXPR, nativecode_ptr_type_node, \n+\t\t\t\t     method, build_int_2 (j, 0));\n \t\tTREE_CONSTANT (fdesc) = 1;\n \t\tTREE_INVARIANT (fdesc) = 1;\n \t        list = tree_cons (NULL_TREE, fdesc, list);\n@@ -1712,9 +1712,10 @@ make_class_data (tree type)\n \n   START_RECORD_CONSTRUCTOR (temp, object_type_node);\n   PUSH_FIELD_VALUE (temp, \"vtable\",\n-\t\t    build (PLUS_EXPR, dtable_ptr_type,\n-\t\t\t   build1 (ADDR_EXPR, dtable_ptr_type, class_dtable_decl),\n-\t\t\t   dtable_start_offset));\n+\t\t    build2 (PLUS_EXPR, dtable_ptr_type,\n+\t\t\t    build1 (ADDR_EXPR, dtable_ptr_type,\n+\t\t\t\t    class_dtable_decl),\n+\t\t\t    dtable_start_offset));\n   if (! flag_hash_synchronization)\n     PUSH_FIELD_VALUE (temp, \"sync_info\", null_pointer_node);\n   FINISH_RECORD_CONSTRUCTOR (temp);\n@@ -1750,9 +1751,10 @@ make_class_data (tree type)\n   else\n     PUSH_FIELD_VALUE (cons, \"vtable\",\n \t\t      dtable_decl == NULL_TREE ? null_pointer_node\n-\t\t      : build (PLUS_EXPR, dtable_ptr_type,\n-\t\t\t       build1 (ADDR_EXPR, dtable_ptr_type, dtable_decl),\n-\t\t\t       dtable_start_offset));\n+\t\t      : build2 (PLUS_EXPR, dtable_ptr_type,\n+\t\t\t\tbuild1 (ADDR_EXPR, dtable_ptr_type,\n+\t\t\t\t\tdtable_decl),\n+\t\t\t\tdtable_start_offset));\n   if (TYPE_OTABLE_METHODS (type) == NULL_TREE)\n     {\n       PUSH_FIELD_VALUE (cons, \"otable\", null_pointer_node);\n@@ -2274,8 +2276,8 @@ layout_class_method (tree this_class, tree super_class,\n \t       && dtable_count)\n \t{\n \t  set_method_index (method_decl, dtable_count);\n-\t  dtable_count = fold (build (PLUS_EXPR, integer_type_node,\n-\t\t\t\t      dtable_count, integer_one_node));\n+\t  dtable_count = fold (build2 (PLUS_EXPR, integer_type_node,\n+\t\t\t\t       dtable_count, integer_one_node));\n \t}\n     }\n "}, {"sha": "d84477297cafcf6c5b7026dcff5a5d8390d6f29c", "filename": "gcc/java/constants.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c", "patch": "@@ -425,8 +425,8 @@ build_ref_from_constant_pool (int index)\n {\n   tree d = build_constant_data_ref ();\n   tree i = build_int_2 (index, 0);\n-  return build (ARRAY_REF, TREE_TYPE (TREE_TYPE (d)), d, i,\n-\t\tNULL_TREE, NULL_TREE);\n+  return build4 (ARRAY_REF, TREE_TYPE (TREE_TYPE (d)), d, i,\n+\t\t NULL_TREE, NULL_TREE);\n }\n \n /* Build an initializer for the constants field of the current constant pool."}, {"sha": "761ebb2b70c961bc5242afe54a79f0442de3eaa5", "filename": "gcc/java/decl.c", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c", "patch": "@@ -113,8 +113,7 @@ update_aliases (tree decl, int index)\n \t  && TYPE_MODE (type) == TYPE_MODE (TREE_TYPE (tmp)))\n \t{\n \t  tree src = build1 (NOP_EXPR, TREE_TYPE (tmp), decl);\n-\t  java_add_stmt \n-\t    (build (MODIFY_EXPR, TREE_TYPE (tmp), tmp, src));\n+\t  java_add_stmt (build2 (MODIFY_EXPR, TREE_TYPE (tmp), tmp, src));\n \t}\n       tmp = DECL_LOCAL_SLOT_CHAIN (tmp);      \n     }\n@@ -139,8 +138,7 @@ push_jvm_slot (int index, tree decl)\n \t  /* At the point of its creation this decl inherits whatever\n \t     is in the slot.  */\n \t  tree src = build1 (NOP_EXPR, TREE_TYPE (decl), tmp);\n-\t  java_add_stmt \n-\t    (build (MODIFY_EXPR, TREE_TYPE (decl), decl, src));\t\n+\t  java_add_stmt (build2 (MODIFY_EXPR, TREE_TYPE (decl), decl, src));\t\n \t  break;\n \t}\n       tmp = DECL_LOCAL_SLOT_CHAIN (tmp);\n@@ -1345,7 +1343,7 @@ poplevel (int keep, int reverse, int functionbody)\n \t    }\n \t  *var = NULL;\n \t    \n-\t  bind =  build (BIND_EXPR, TREE_TYPE (block), BLOCK_VARS (block), \n+\t  bind = build3 (BIND_EXPR, TREE_TYPE (block), BLOCK_VARS (block), \n \t\t\t BLOCK_EXPR_BODY (block), block);\n \t  BIND_EXPR_BODY (bind) = current_binding_level->stmts;\n \t  \n@@ -1800,9 +1798,8 @@ finish_method (tree fndecl)\n \tlock = DECL_ARGUMENTS (fndecl);\n       BUILD_MONITOR_ENTER (enter, lock);\n       BUILD_MONITOR_EXIT (exit, lock);\n-      *tp = build (COMPOUND_EXPR, void_type_node,\n-\t\t   enter,\n-\t\t   build (TRY_FINALLY_EXPR, void_type_node, *tp, exit));\n+      *tp = build2 (COMPOUND_EXPR, void_type_node, enter,\n+\t\t    build2 (TRY_FINALLY_EXPR, void_type_node, *tp, exit));\n     }\n \n   /* Prepend class initialization for static methods reachable from\n@@ -1812,11 +1809,11 @@ finish_method (tree fndecl)\n       && ! CLASS_INTERFACE (TYPE_NAME (DECL_CONTEXT (fndecl))))\n     {\n       tree clas = DECL_CONTEXT (fndecl);\n-      tree init = build (CALL_EXPR, void_type_node,\n-\t\t\t build_address_of (soft_initclass_node),\n-\t\t\t build_tree_list (NULL_TREE, build_class_ref (clas)),\n-\t\t\t NULL_TREE);\n-      *tp = build (COMPOUND_EXPR, TREE_TYPE (*tp), init, *tp);\n+      tree init = build3 (CALL_EXPR, void_type_node,\n+\t\t\t  build_address_of (soft_initclass_node),\n+\t\t\t  build_tree_list (NULL_TREE, build_class_ref (clas)),\n+\t\t\t  NULL_TREE);\n+      *tp = build2 (COMPOUND_EXPR, TREE_TYPE (*tp), init, *tp);\n     }\n \n   /* Convert function tree to GENERIC prior to inlining.  */\n@@ -1881,9 +1878,9 @@ add_stmt_to_compound (tree existing, tree type, tree stmt)\n     return existing;\n   else if (existing)\n     {\n-      tree expr = build (COMPOUND_EXPR, type, existing, stmt);\n-      TREE_SIDE_EFFECTS (expr)\n-\t= TREE_SIDE_EFFECTS (existing) | TREE_SIDE_EFFECTS (stmt);\n+      tree expr = build2 (COMPOUND_EXPR, type, existing, stmt);\n+      TREE_SIDE_EFFECTS (expr) = TREE_SIDE_EFFECTS (existing)\n+\t\t\t\t | TREE_SIDE_EFFECTS (stmt);\n       return expr;\n     }\n   else"}, {"sha": "b45f79a4aa3c92edfeb999360c9c27fb4f7c847a", "filename": "gcc/java/except.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c", "patch": "@@ -412,9 +412,9 @@ build_exception_object_ref (tree type)\n \n   /* Java only passes object via pointer and doesn't require adjusting.\n      The java object is immediately before the generic exception header.  */\n-  obj = build (EXC_PTR_EXPR, build_pointer_type (type));\n-  obj = build (MINUS_EXPR, TREE_TYPE (obj), obj,\n-\t       TYPE_SIZE_UNIT (TREE_TYPE (obj)));\n+  obj = build0 (EXC_PTR_EXPR, build_pointer_type (type));\n+  obj = build2 (MINUS_EXPR, TREE_TYPE (obj), obj,\n+\t\tTYPE_SIZE_UNIT (TREE_TYPE (obj)));\n   obj = build1 (INDIRECT_REF, type, obj);\n \n   return obj;\n@@ -441,11 +441,11 @@ expand_end_java_handler (struct eh_range *range)\n       type = prepare_eh_table_type (type);\n \n       {\n-\ttree catch_expr \n-\t  = build (CATCH_EXPR, void_type_node, type,\n-\t\t   build (GOTO_EXPR, void_type_node, TREE_VALUE (handler)));\n-\ttree try_catch_expr = build (TRY_CATCH_EXPR, void_type_node,\n-\t\t\t\t     *get_stmts (), catch_expr);\t\n+\ttree catch_expr = build2 (CATCH_EXPR, void_type_node, type,\n+\t\t\t\t  build1 (GOTO_EXPR, void_type_node,\n+\t\t\t\t\t  TREE_VALUE (handler)));\n+\ttree try_catch_expr = build2 (TRY_CATCH_EXPR, void_type_node,\n+\t\t\t\t      *get_stmts (), catch_expr);\t\n \t*get_stmts () = try_catch_expr;\n       }\n     }"}, {"sha": "64cb7ceb88e3d62effbc05345fc115d624bc9058", "filename": "gcc/java/java-gimplify.c", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2Fjava-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2Fjava-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-gimplify.c?ref=94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c", "patch": "@@ -144,15 +144,15 @@ static tree\n java_gimplify_case_expr (tree expr)\n {\n   tree label = create_artificial_label ();\n-  return build (CASE_LABEL_EXPR, void_type_node,\n-\t\tTREE_OPERAND (expr, 0), NULL_TREE, label);\n+  return build3 (CASE_LABEL_EXPR, void_type_node,\n+\t\t TREE_OPERAND (expr, 0), NULL_TREE, label);\n }\n \n static tree\n java_gimplify_default_expr (tree expr ATTRIBUTE_UNUSED)\n {\n   tree label = create_artificial_label ();\n-  return build (CASE_LABEL_EXPR, void_type_node, NULL_TREE, NULL_TREE, label);\n+  return build3 (CASE_LABEL_EXPR, void_type_node, NULL_TREE, NULL_TREE, label);\n }\n \n /* Gimplify BLOCK into a BIND_EXPR.  */\n@@ -187,7 +187,7 @@ java_gimplify_block (tree java_block)\n       BLOCK_SUBBLOCKS (outer) = chainon (BLOCK_SUBBLOCKS (outer), block);\n     }\n \n-  return build (BIND_EXPR, TREE_TYPE (java_block), decls, body, block);\n+  return build3 (BIND_EXPR, TREE_TYPE (java_block), decls, body, block);\n }\n \n /* Gimplify a NEW_ARRAY_INIT node into array/element assignments.  */\n@@ -204,11 +204,12 @@ java_gimplify_new_array_init (tree exp)\n   tree values = CONSTRUCTOR_ELTS (init);\n \n   tree array_ptr_type = build_pointer_type (array_type);\n-  tree block = build (BLOCK, array_ptr_type);\n+  tree block = build0 (BLOCK, array_ptr_type);\n   tree tmp = build_decl (VAR_DECL, get_identifier (\"<tmp>\"), array_ptr_type);\n-  tree array = build_decl (VAR_DECL, get_identifier (\"<array>\"), array_ptr_type);\n-  tree body = build (MODIFY_EXPR, array_ptr_type, tmp,\n-\t\t     build_new_array (element_type, length));\n+  tree array = build_decl (VAR_DECL, get_identifier (\"<array>\"),\n+\t\t\t   array_ptr_type);\n+  tree body = build2 (MODIFY_EXPR, array_ptr_type, tmp,\n+\t\t      build_new_array (element_type, length));\n \n   int index = 0;\n \n@@ -220,20 +221,20 @@ java_gimplify_new_array_init (tree exp)\n     {\n       /* FIXME: Should use build_java_arrayaccess here, but avoid\n \t bounds checking.  */\n-      tree lhs = build (COMPONENT_REF, TREE_TYPE (data_field),    \n-\t\t\tbuild_java_indirect_ref (array_type, tmp, 0),\n-\t\t\tdata_field, NULL_TREE);\n-      tree assignment = build (MODIFY_EXPR, element_type,\n-  \t\t\t       build (ARRAY_REF, element_type, lhs,\n-\t\t\t\t      build_int_2 (index++, 0),\n-\t\t\t\t      NULL_TREE, NULL_TREE),\n-\t\t\t       TREE_VALUE (values));\n-      body = build (COMPOUND_EXPR, element_type, body, assignment);\n+      tree lhs = build3 (COMPONENT_REF, TREE_TYPE (data_field),    \n+\t\t\t build_java_indirect_ref (array_type, tmp, 0),\n+\t\t\t data_field, NULL_TREE);\n+      tree assignment = build2 (MODIFY_EXPR, element_type,\n+\t\t\t\tbuild4 (ARRAY_REF, element_type, lhs,\n+\t\t\t\t\tbuild_int_2 (index++, 0),\n+\t\t\t\t\tNULL_TREE, NULL_TREE),\n+\t\t\t\tTREE_VALUE (values));\n+      body = build2 (COMPOUND_EXPR, element_type, body, assignment);\n       values = TREE_CHAIN (values);\n     }\n \n-  body = build (COMPOUND_EXPR, array_ptr_type, body,\n-\t\tbuild (MODIFY_EXPR, array_ptr_type, array, tmp));\n+  body = build2 (COMPOUND_EXPR, array_ptr_type, body,\n+\t\t build2 (MODIFY_EXPR, array_ptr_type, array, tmp));\n   TREE_CHAIN (tmp) = array;\n   BLOCK_VARS (block) = tmp;\n   BLOCK_EXPR_BODY (block) = body;\n@@ -252,16 +253,16 @@ java_gimplify_try_expr (tree try_expr)\n     {\n       tree java_catch = TREE_OPERAND (handler, 0);\n       tree catch_type = TREE_TYPE (TREE_TYPE (BLOCK_EXPR_DECLS (java_catch)));\n-      tree expr = build (CATCH_EXPR, void_type_node,\n-\t\t\t prepare_eh_table_type (catch_type),\n-\t\t\t handler);\n+      tree expr = build2 (CATCH_EXPR, void_type_node,\n+\t\t\t  prepare_eh_table_type (catch_type),\n+\t\t\t  handler);\n       if (catch)\n-\tcatch = build (COMPOUND_EXPR, void_type_node, catch, expr);\n+\tcatch = build2 (COMPOUND_EXPR, void_type_node, catch, expr);\n       else\n \tcatch = expr;\n       handler = TREE_CHAIN (handler);\n     }\n-  return build (TRY_CATCH_EXPR, void_type_node, body, catch);\n+  return build2 (TRY_CATCH_EXPR, void_type_node, body, catch);\n }\n \n /* Dump a tree of some kind.  This is a convenience wrapper for the"}, {"sha": "a41c355444196ed538f0e58ca59a152bfe2699aa", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c", "patch": "@@ -2067,8 +2067,8 @@ generate_bytecode_insns (tree exp, int target, struct jcf_partial *state)\n \n \t    /* This function correctly handles the case where the LHS\n \t       of a binary expression is NULL_TREE.  */\n-\t    rhs = build (TREE_CODE (rhs), TREE_TYPE (rhs),\n-\t\t\t NULL_TREE, TREE_OPERAND (rhs, 1));\n+\t    rhs = build2 (TREE_CODE (rhs), TREE_TYPE (rhs),\n+\t\t\t  NULL_TREE, TREE_OPERAND (rhs, 1));\n \t  }\n \n \tgenerate_bytecode_insns (rhs, STACK_TARGET, state);\n@@ -2490,9 +2490,9 @@ generate_bytecode_insns (tree exp, int target, struct jcf_partial *state)\n \ttree x;\n \tif (TREE_SIDE_EFFECTS (op0) || TREE_SIDE_EFFECTS (op1))\n \t  abort ();\n-\tx = build (COND_EXPR, TREE_TYPE (exp), \n-\t\t   build (code, boolean_type_node, op0, op1), \n-\t\t   op0, op1);\t  \n+\tx = build3 (COND_EXPR, TREE_TYPE (exp), \n+\t\t    build2 (code, boolean_type_node, op0, op1), \n+\t\t    op0, op1);\t  \n \tgenerate_bytecode_insns (x, target, state);\n \tbreak;\n       }\t\t\t\t\t     "}, {"sha": "8a174395530bbed39df308fa92a87a280c95859a", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=94cdeb1ad33b77f10f4cbc56bbce5d5f9c6b703c", "patch": "@@ -83,22 +83,22 @@ convert_ieee_real_to_integer (tree type, tree expr)\n   tree result;\n   expr = save_expr (expr);\n \n-  result = build (COND_EXPR, type,\n-\t\t  build (NE_EXPR, boolean_type_node, expr, expr),\n-\t\t  convert (type, integer_zero_node),\n-\t\t  convert_to_integer (type, expr));\n+  result = build3 (COND_EXPR, type,\n+\t\t   build2 (NE_EXPR, boolean_type_node, expr, expr),\n+\t\t   convert (type, integer_zero_node),\n+\t\t   convert_to_integer (type, expr));\n \t\t  \n-  result = build (COND_EXPR, type, \n-\t\t  build (LE_EXPR, boolean_type_node, expr, \n-\t\t\t convert (TREE_TYPE (expr), TYPE_MIN_VALUE (type))),\n-\t\t  TYPE_MIN_VALUE (type),\n-\t\t  result);\n-\n-  result = build (COND_EXPR, type,\n-\t\t  build (GE_EXPR, boolean_type_node, expr, \n-\t\t\t convert (TREE_TYPE (expr), TYPE_MAX_VALUE (type))),\t\n-\t\t  TYPE_MAX_VALUE (type),\n-\t\t  result);\n+  result = build3 (COND_EXPR, type, \n+\t\t   build2 (LE_EXPR, boolean_type_node, expr, \n+\t\t\t   convert (TREE_TYPE (expr), TYPE_MIN_VALUE (type))),\n+\t\t   TYPE_MIN_VALUE (type),\n+\t\t   result);\n+\n+  result = build3 (COND_EXPR, type,\n+\t\t   build2 (GE_EXPR, boolean_type_node, expr, \n+\t\t\t   convert (TREE_TYPE (expr), TYPE_MAX_VALUE (type))),\t\n+\t\t   TYPE_MAX_VALUE (type),\n+\t\t   result);\n \n   return result;\n }  "}]}