{"sha": "3c076c9642fd8877def0a0597ec7e4adfb5aa3b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MwNzZjOTY0MmZkODg3N2RlZjBhMDU5N2VjN2U0YWRmYjVhYTNiMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-28T07:44:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-28T07:44:07Z"}, "message": "gimple-fold: Fix buffer overflow in fold_array_ctor_reference [PR93454]\n\nlibgcrypt FAILs to build on aarch64-linux with\n*** stack smashing detected ***: terminated\nwhen gcc is compiled with -D_FORTIFY_SOURCE=2.  The problem is if\nfold_array_ctor_reference is called with size equal to or very close to\nMAX_BITSIZE_MODE_ANY_MODE bits and non-zero inner_offset.\nThe first native_encode_expr is called with that inner_offset and bufoff 0,\nthe subsequent ones with offset of 0, and bufoff elt_size - inner_offset,\n2 * elt_size - inner_offset etc.  So, e.g. on the testcase where we start\nwith inner_offset 1 and size is e.g. 256 bytes and elt_size 4 bytes\nwe then call native_encode_expr at bufoff 251 and then 255, but that one\noverwrites 3 bytes beyond the buf array.\nThe following patch fixes that.  In addition, it avoids calling\nelt_size.to_uhwi () all the time, and punts if elt_sz would be too large.\n\n2020-01-28  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/93454\n\t* gimple-fold.c (fold_array_ctor_reference): Perform\n\telt_size.to_uhwi () just once, instead of calling it in every\n\titeration.  Punt if that value is above size of the temporary\n\tbuffer.  Decrease third native_encode_expr argument when\n\tbufoff + elt_sz is above size of buf.\n\n\t* gcc.dg/pr93454.c: New test.", "tree": {"sha": "199493ac71d414ed3c771e3672533ebae48b35a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/199493ac71d414ed3c771e3672533ebae48b35a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c076c9642fd8877def0a0597ec7e4adfb5aa3b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c076c9642fd8877def0a0597ec7e4adfb5aa3b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c076c9642fd8877def0a0597ec7e4adfb5aa3b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c076c9642fd8877def0a0597ec7e4adfb5aa3b3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c08c983015e675f555d57a30e15d918abef2b93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c08c983015e675f555d57a30e15d918abef2b93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c08c983015e675f555d57a30e15d918abef2b93"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "6db98ed94d0077b93e493d3fb9db01cc6e323dbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c076c9642fd8877def0a0597ec7e4adfb5aa3b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c076c9642fd8877def0a0597ec7e4adfb5aa3b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c076c9642fd8877def0a0597ec7e4adfb5aa3b3", "patch": "@@ -1,3 +1,12 @@\n+2020-01-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/93454\n+\t* gimple-fold.c (fold_array_ctor_reference): Perform\n+\telt_size.to_uhwi () just once, instead of calling it in every\n+\titeration.  Punt if that value is above size of the temporary\n+\tbuffer.  Decrease third native_encode_expr argument when\n+\tbufoff + elt_sz is above size of buf.\n+\n 2020-01-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/mips/mips.c (mips_declare_object_name)"}, {"sha": "ed2259222694aae4be9fc03e42c3df9bbe51b560", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c076c9642fd8877def0a0597ec7e4adfb5aa3b3/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c076c9642fd8877def0a0597ec7e4adfb5aa3b3/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=3c076c9642fd8877def0a0597ec7e4adfb5aa3b3", "patch": "@@ -6665,12 +6665,14 @@ fold_array_ctor_reference (tree type, tree ctor,\n   /* And offset within the access.  */\n   inner_offset = offset % (elt_size.to_uhwi () * BITS_PER_UNIT);\n \n-  if (size > elt_size.to_uhwi () * BITS_PER_UNIT)\n+  unsigned HOST_WIDE_INT elt_sz = elt_size.to_uhwi ();\n+  if (size > elt_sz * BITS_PER_UNIT)\n     {\n       /* native_encode_expr constraints.  */\n       if (size > MAX_BITSIZE_MODE_ANY_MODE\n \t  || size % BITS_PER_UNIT != 0\n-\t  || inner_offset % BITS_PER_UNIT != 0)\n+\t  || inner_offset % BITS_PER_UNIT != 0\n+\t  || elt_sz > MAX_BITSIZE_MODE_ANY_MODE / BITS_PER_UNIT)\n \treturn NULL_TREE;\n \n       unsigned ctor_idx;\n@@ -6701,10 +6703,11 @@ fold_array_ctor_reference (tree type, tree ctor,\n       index = wi::umax (index, access_index);\n       do\n \t{\n-\t  int len = native_encode_expr (val, buf + bufoff,\n-\t\t\t\t\telt_size.to_uhwi (),\n+\t  if (bufoff + elt_sz > sizeof (buf))\n+\t    elt_sz = sizeof (buf) - bufoff;\n+\t  int len = native_encode_expr (val, buf + bufoff, elt_sz,\n \t\t\t\t\tinner_offset / BITS_PER_UNIT);\n-\t  if (len != elt_size - inner_offset / BITS_PER_UNIT)\n+\t  if (len != (int) elt_sz - inner_offset / BITS_PER_UNIT)\n \t    return NULL_TREE;\n \t  inner_offset = 0;\n \t  bufoff += len;"}, {"sha": "44d8e674465653059a93e06a74f432cc887404e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c076c9642fd8877def0a0597ec7e4adfb5aa3b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c076c9642fd8877def0a0597ec7e4adfb5aa3b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c076c9642fd8877def0a0597ec7e4adfb5aa3b3", "patch": "@@ -1,3 +1,8 @@\n+2020-01-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/93454\n+\t* gcc.dg/pr93454.c: New test.\n+\n 2020-01-27  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93451"}, {"sha": "84c47cfa3edc6c8a32f66bd0cdf82c8403a01365", "filename": "gcc/testsuite/gcc.dg/pr93454.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c076c9642fd8877def0a0597ec7e4adfb5aa3b3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93454.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c076c9642fd8877def0a0597ec7e4adfb5aa3b3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93454.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr93454.c?ref=3c076c9642fd8877def0a0597ec7e4adfb5aa3b3", "patch": "@@ -0,0 +1,25 @@\n+/* PR tree-optimization/93454 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g\" } */\n+\n+#if __SIZEOF_INT__ == 4 && __CHAR_BIT__ == 8\n+#define A(n) n, n + 0x01010101, n + 0x02020202, n + 0x03030303\n+#define B(n) A (n), A (n + 0x04040404), A (n + 0x08080808), A (n + 0x0c0c0c0c)\n+#define C(n) B (n), B (n + 0x10101010), B (n + 0x20202020), B (n + 0x30303030)\n+#define D(n) C (n), C (n + 0x40404040), C (n + 0x80808080U), C (n + 0xc0c0c0c0U)\n+const unsigned int a[64] = { C (0) };\n+const unsigned int b[256] = { D (0) };\n+const unsigned int c[32] = { B (0), B (0x10101010) };\n+const unsigned int d[16] = { B (0) };\n+const unsigned int e[8] = { A (0), A (0x04040404) };\n+\n+void\n+foo (void)\n+{\n+  const unsigned char *s = ((const unsigned char *) a) + 1;\n+  const unsigned char *t = ((const unsigned char *) b) + 1;\n+  const unsigned char *u = ((const unsigned char *) c) + 1;\n+  const unsigned char *v = ((const unsigned char *) d) + 1;\n+  const unsigned char *w = ((const unsigned char *) e) + 1;\n+}\n+#endif"}]}