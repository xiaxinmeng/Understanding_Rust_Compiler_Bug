{"sha": "a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTliYThiYTU2YzE2ZTgwZmQ5MTM0ODIyYmRmZTM0ZjU2NWY0Y2NmNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2012-10-18T08:36:06Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2012-10-18T08:36:06Z"}, "message": "move.h (move_if_noexcept): Mark constexpr.\n\n2012-10-17  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/move.h (move_if_noexcept): Mark constexpr.\n\t* include/std/array (front, back): Same.\n\t* include/std/chrono: Add comment.\n\t* include/std/tuple (__tuple_compare): Mark __eq, __less constexpr.\n\t(operator ==, <, >, !=, <=, >=): Same.\n\t* testsuite/20_util/forward/c_neg.cc: Adjust line numbers.\n\t* testsuite/20_util/forward/f_neg.cc: Same.\n\t* testsuite/20_util/move_if_noexcept/constexpr.cc: New.\n\t* testsuite/20_util/tuple/comparison_operators/constexpr.cc: New.\n\t* testsuite/20_util/tuple/creation_functions/constexpr.cc: Add.\n\t* testsuite/23_containers/array/element_access/\n\tconstexpr_element_access.cc: Same.\n\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Adjust\n\tline numbers.\n\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\n\tSame.\n\n\t* testsuite/20_util/tuple/comparison_operators/35480_neg.cc:\n          Temporarily add dg-excess-errors.\n\nFrom-SVN: r192556", "tree": {"sha": "4b2998e8222d758131a6b3f6b82324e81255caff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b2998e8222d758131a6b3f6b82324e81255caff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/comments", "author": null, "committer": null, "parents": [{"sha": "21676429323df89107360981500ca774e5be45ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21676429323df89107360981500ca774e5be45ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21676429323df89107360981500ca774e5be45ee"}], "stats": {"total": 209, "additions": 177, "deletions": 32}, "files": [{"sha": "709f47986c02c683ab0143e774e2f914a4170dd6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "patch": "@@ -1,3 +1,25 @@\n+2012-10-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/move.h (move_if_noexcept): Mark constexpr.\n+\t* include/std/array (front, back): Same.\n+\t* include/std/chrono: Add comment.\n+\t* include/std/tuple (__tuple_compare): Mark __eq, __less constexpr.\n+\t(operator ==, <, >, !=, <=, >=): Same.\n+\t* testsuite/20_util/forward/c_neg.cc: Adjust line numbers.\n+\t* testsuite/20_util/forward/f_neg.cc: Same.\n+\t* testsuite/20_util/move_if_noexcept/constexpr.cc: New.\n+\t* testsuite/20_util/tuple/comparison_operators/constexpr.cc: New.\n+\t* testsuite/20_util/tuple/creation_functions/constexpr.cc: Add.\n+\t* testsuite/23_containers/array/element_access/\n+\tconstexpr_element_access.cc: Same.\n+\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Adjust\n+\tline numbers.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\n+\tSame.\n+\n+\t* testsuite/20_util/tuple/comparison_operators/35480_neg.cc:\n+          Temporarily add dg-excess-errors.\n+\n 2012-10-16  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/debug/formatter.h (_Debug_msg_id): Add"}, {"sha": "236f0de300ab2d6053e144987a414505319ad6f5", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "patch": "@@ -1,6 +1,6 @@\n // Move, forward and identity for C++0x + swap -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2007-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -65,7 +65,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @{\n    */\n \n-  // forward (as per N3143)\n   /**\n    *  @brief  Forward an lvalue.\n    *  @return The parameter cast to the specified type.\n@@ -117,7 +116,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  type is copyable, in which case an lvalue-reference is returned instead.\n    */\n   template<typename _Tp>\n-    inline typename\n+    inline constexpr typename\n     conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type\n     move_if_noexcept(_Tp& __x) noexcept\n     { return std::move(__x); }"}, {"sha": "15dd6c13222ea430f0026e081576515877ea683f", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "patch": "@@ -198,17 +198,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       front()\n       { return *begin(); }\n \n-      const_reference \n+      constexpr const_reference \n       front() const\n-      { return *begin(); }\n+      { return _AT_Type::_S_ref(_M_elems, 0); }\n \n       reference \n       back()\n       { return _Nm ? *(end() - 1) : *end(); }\n \n-      const_reference \n+      constexpr const_reference \n       back() const\n-      { return _Nm ? *(end() - 1) : *end(); }\n+      { \n+\treturn _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1) \n+ \t           : _AT_Type::_S_ref(_M_elems, _Nm); \n+      }\n \n       pointer\n       data() noexcept"}, {"sha": "d920a7dd379898a7add1c3bdde907bfbbf4d023b", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "patch": "@@ -250,7 +250,10 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \t// 20.11.5.1 construction / copy / destroy\n \tconstexpr duration() = default;\n \n-\tconstexpr duration(const duration&) = default;\n+\t// NB: Make constexpr implicit. This cannot be explicitly\n+\t// constexpr, as any UDT that is not a literal type with a\n+\t// constexpr copy constructor will be ill-formed.\n+\tduration(const duration&) = default;\n \n \ttemplate<typename _Rep2, typename = typename\n \t       enable_if<is_convertible<_Rep2, rep>::value"}, {"sha": "b4985d280d88229b24eef7bbe68e33022c7e5081", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "patch": "@@ -775,14 +775,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<std::size_t __i, std::size_t __j, typename _Tp, typename _Up>\n     struct __tuple_compare<0, __i, __j, _Tp, _Up>\n     {\n-      static bool \n+      static constexpr bool \n       __eq(const _Tp& __t, const _Up& __u)\n       {\n \treturn (get<__i>(__t) == get<__i>(__u) &&\n \t\t__tuple_compare<0, __i + 1, __j, _Tp, _Up>::__eq(__t, __u));\n       }\n      \n-      static bool \n+      static constexpr bool \n       __less(const _Tp& __t, const _Up& __u)\n       {\n \treturn ((get<__i>(__t) < get<__i>(__u))\n@@ -794,55 +794,55 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<std::size_t __i, typename _Tp, typename _Up>\n     struct __tuple_compare<0, __i, __i, _Tp, _Up>\n     {\n-      static bool \n+      static constexpr bool \n       __eq(const _Tp&, const _Up&) { return true; }\n      \n-      static bool \n+      static constexpr bool \n       __less(const _Tp&, const _Up&) { return false; }\n     };\n \n   template<typename... _TElements, typename... _UElements>\n-    bool\n+    constexpr bool\n     operator==(const tuple<_TElements...>& __t,\n \t       const tuple<_UElements...>& __u)\n     {\n       typedef tuple<_TElements...> _Tp;\n       typedef tuple<_UElements...> _Up;\n-      return (__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,\n+      return bool(__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,\n \t      0, tuple_size<_Tp>::value, _Tp, _Up>::__eq(__t, __u));\n     }\n \n   template<typename... _TElements, typename... _UElements>\n-    bool\n+    constexpr bool\n     operator<(const tuple<_TElements...>& __t,\n \t      const tuple<_UElements...>& __u)\n     {\n       typedef tuple<_TElements...> _Tp;\n       typedef tuple<_UElements...> _Up;\n-      return (__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,\n+      return bool(__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,\n \t      0, tuple_size<_Tp>::value, _Tp, _Up>::__less(__t, __u));\n     }\n \n   template<typename... _TElements, typename... _UElements>\n-    inline bool\n+    inline constexpr bool\n     operator!=(const tuple<_TElements...>& __t,\n \t       const tuple<_UElements...>& __u)\n     { return !(__t == __u); }\n \n   template<typename... _TElements, typename... _UElements>\n-    inline bool\n+    inline constexpr bool\n     operator>(const tuple<_TElements...>& __t,\n \t      const tuple<_UElements...>& __u)\n     { return __u < __t; }\n \n   template<typename... _TElements, typename... _UElements>\n-    inline bool\n+    inline constexpr bool\n     operator<=(const tuple<_TElements...>& __t,\n \t       const tuple<_UElements...>& __u)\n     { return !(__u < __t); }\n \n   template<typename... _TElements, typename... _UElements>\n-    inline bool\n+    inline constexpr bool\n     operator>=(const tuple<_TElements...>& __t,\n \t       const tuple<_UElements...>& __u)\n     { return !(__t < __u); }\n@@ -858,7 +858,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename... _Elements>\n-    constexpr tuple<_Elements&&...>\n+    tuple<_Elements&&...>\n     forward_as_tuple(_Elements&&... __args) noexcept\n     { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }\n "}, {"sha": "1e573ec2757d25c05af52ffb2cfa3f96685b2817", "filename": "libstdc++-v3/testsuite/20_util/forward/c_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fc_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fc_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fc_neg.cc?ref=a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2010-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 90 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 89 }\n \n #include <list>\n "}, {"sha": "d4a9c7a2af63d53afca6200a134560657f51cc4a", "filename": "libstdc++-v3/testsuite/20_util/forward/f_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Ff_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Ff_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Ff_neg.cc?ref=a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2010-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 90 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 89 }\n \n #include <utility>\n "}, {"sha": "4811b17cbd9c8e4fd06073ba6dbaf5bd338528c9", "filename": "libstdc++-v3/testsuite/20_util/move_if_noexcept/constexpr.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmove_if_noexcept%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmove_if_noexcept%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmove_if_noexcept%2Fconstexpr.cc?ref=a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+struct simple\n+{\n+  int i;\n+};\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  constexpr simple s { 5 };\n+  constexpr auto s2  __attribute__((unused)) = std::move_if_noexcept(s);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "eb4c213eddb9141df66109c1360b9a68ca0ed9ba", "filename": "libstdc++-v3/testsuite/20_util/tuple/comparison_operators/35480_neg.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2F35480_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2F35480_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2F35480_neg.cc?ref=a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,3 +31,4 @@ void test01()\n   if ( t1 == t2 ) {}  // { dg-error \"here\" }\n }\n // { dg-prune-output \"incomplete type\" }\n+// { dg-excess-errors \"body of constexpr function\" }"}, {"sha": "0efb4c3da91f9e3b94087e46d8adf5331d230d5a", "filename": "libstdc++-v3/testsuite/20_util/tuple/comparison_operators/constexpr.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2Fconstexpr.cc?ref=a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+#include <testsuite_common_types.h>\n+\n+int main()\n+{\n+  __gnu_test::constexpr_comparison_operators test;\n+  test.operator()<std::tuple<int, int>>();\n+  return 0;\n+}"}, {"sha": "6c260605c05e6b1162ad682dd046bdec5e7edfaa", "filename": "libstdc++-v3/testsuite/20_util/tuple/creation_functions/constexpr.cc", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc?ref=a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -45,6 +45,50 @@ test_make_tuple()\n   }\n }\n \n+#if 0\n+// forward_as_tuple\n+void\n+test_forward_as_tuple()\n+{\n+  {\n+    typedef std::tuple<int, float> tuple_type;\n+    constexpr tuple_type p1 __attribute__((unused))\n+      = std::forward_as_tuple(22, 22.222);\n+  }\n+\n+  {\n+    typedef std::tuple<int, float, int> tuple_type;\n+    constexpr tuple_type p1 __attribute__((unused))\n+      = std::forward_as_tuple(22, 22.222, 77799);\n+  }\n+}\n+#endif\n+\n+#if 0\n+// tie\n+void\n+test_tie()\n+{\n+  {\n+    int i(22);\n+    float f(22.222);\n+    typedef std::tuple<int, float> tuple_type;\n+    constexpr tuple_type p1 __attribute__((unused))\n+      = std::tie(i, f);\n+  }\n+\n+  {\n+    int i(22);\n+    float f(22.222);\n+    int ii(77799);\n+\n+    typedef std::tuple<int, float, int> tuple_type;\n+    constexpr tuple_type p1 __attribute__((unused))\n+      = std::tie(i, f, ii);\n+  }\n+}\n+#endif\n+\n // get\n void\n test_get()"}, {"sha": "ec46ac0d38899ea8a8cbb3b5876b7f88104ed3ee", "filename": "libstdc++-v3/testsuite/23_containers/array/element_access/constexpr_element_access.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fconstexpr_element_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fconstexpr_element_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fconstexpr_element_access.cc?ref=a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2011-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,5 +27,7 @@ int main()\n   constexpr array_type a = { { 0, 55, 66, 99, 4115, 2 } };\n   constexpr auto v1 __attribute__((unused)) = a[1];\n   constexpr auto v2 __attribute__((unused)) = a.at(2);\n+  constexpr auto v3 __attribute__((unused)) = a.front();\n+  constexpr auto v4 __attribute__((unused)) = a.back();\n   return 0;\n }"}, {"sha": "7c7a365cb4e425aca4102f4952e276160822ddfc", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc?ref=a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "patch": "@@ -27,6 +27,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 288 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 296 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 304 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 291 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 299 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 307 }"}, {"sha": "3c642c800b057b2c91379ad286f7b2a1d3306b89", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc?ref=a9ba8ba56c16e80fd9134822bdfe34f565f4ccf4", "patch": "@@ -22,4 +22,4 @@\n \n typedef std::tuple_element<1, std::array<int, 1>>::type type;\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 280 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 283 }"}]}