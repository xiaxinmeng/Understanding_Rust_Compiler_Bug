{"sha": "428bd076370600c0054dae8f386ed7c230cb7add", "node_id": "C_kwDOANBUbNoAKDQyOGJkMDc2MzcwNjAwYzAwNTRkYWU4ZjM4NmVkN2MyMzBjYjdhZGQ", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-03-15T20:44:07Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-17T16:33:49Z"}, "message": "Unify HIR::IfLetExprConseqIf{,Let} into HIR::IfLetExprConseqElse\n\nThis should allow for 'if let' expressions to be lowered more easily.\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-block.h\n\t(CompileConditionalBlocks::visit): Remove IfLetExprConseqIf{,Let} visitors.\n\t(CompileExprWithBlock::visit): Remove IfLetExprConseqIf{,Let} visitors.\n\t* backend/rust-compile-expr.h\n\t(CompileExpr::visit): Remove IfLetExprConseqIf{,Let} visitors.\n\t* checks/errors/rust-unsafe-checker.cc\n\t(UnsafeChecker::visit): Remove IfLetExprConseqIf{,Let} visitors.\n\t* checks/errors/rust-unsafe-checker.h\n\t(UnsafeChecker::visit): Remove IfLetExprConseqIf{,Let} visitors.\n\t* checks/errors/rust-const-checker.cc\n\t(ConstChecker::visit): Remove IfLetExprConseqIf{,Let} visitors.\n\t* checks/errors/rust-const-checker.h\n\t(ConstChecker::visit): Remove IfLetExprConseqIf{,Let} visitors.\n\t* checks/errors/privacy/rust-privacy-reporter.cc\n\t(PrivacyReporter::visit): Remove IfLetExprConseqIf{,Let} visitors.\n\t* checks/errors/privacy/rust-privacy-reporter.h\n\t(PrivacyReporter::visit): Remove IfLetExprConseqIf{,Let} visitors.\n\t* hir/tree/rust-hir-expr.h\n\t(class IfLetExprConseqElse): Make else_block ExprWithBlock.\n\t(class IfLetExprConseqIf): Remove.\n\t(class IfLetExprConseqIfLet): Remove.\n\t* hir/tree/rust-hir-full-decls.h\n\t(class IfLetExprConseqIf): Remove.\n\t(class IfLetExprConseqIfLet): Remove.\n\t* hir/tree/rust-hir.cc\n\t(IfLetExprConseqElse::as_string): Adjust output.\n\t(IfLetExprConseqIf::as_string): Remove.\n\t(IfLetExprConseqIfLet::as_string): Remove.\n\t(IfLetExprConseqIf::accept_vis): Remove.\n\t(IfLetExprConseqIfLet::accept_vis): Remove.\n\t* hir/tree/rust-hir-visitor.h\n\t(HIRFullVisitor::visit): Remove IfLetExprConseqIf{,Let} visitors.\n\t(HIRFullVisitorBase::visit): Remove IfLetExprConseqIf{,Let} visitors.\n\t(HIRExpressionVisitor::visit): Remove IfLetExprConseqIf{,Let} visitors.\n\t* hir/rust-hir-dump.cc\n\t(Dump::visit): Remove IfLetExprConseqIf{,Let} visitors.\n\t* hir/rust-hir-dump.h\n\t(Dump::visit): Remove IfLetExprConseqIf{,Let} visitors.\n\t* typecheck/rust-hir-type-check-expr.h\n\t(TypeCheckExpr::visit): Remove IfLetExprConseqIf{,Let} visitors.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "64332f860345ccc922ff19bf5d3086625910d650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64332f860345ccc922ff19bf5d3086625910d650"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/428bd076370600c0054dae8f386ed7c230cb7add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/428bd076370600c0054dae8f386ed7c230cb7add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/428bd076370600c0054dae8f386ed7c230cb7add", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/428bd076370600c0054dae8f386ed7c230cb7add/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167"}], "stats": {"total": 264, "additions": 4, "deletions": 260}, "files": [{"sha": "4afa5ddfa44b4bcf382a979d2775f8e0a696269e", "filename": "gcc/rust/backend/rust-compile-block.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-block.h?ref=428bd076370600c0054dae8f386ed7c230cb7add", "patch": "@@ -98,8 +98,6 @@ class CompileConditionalBlocks : public HIRCompileBase,\n   void visit (HIR::ForLoopExpr &) override {}\n   void visit (HIR::IfLetExpr &) override {}\n   void visit (HIR::IfLetExprConseqElse &) override {}\n-  void visit (HIR::IfLetExprConseqIf &) override {}\n-  void visit (HIR::IfLetExprConseqIfLet &) override {}\n   void visit (HIR::MatchExpr &) override {}\n   void visit (HIR::AwaitExpr &) override {}\n   void visit (HIR::AsyncBlockExpr &) override {}\n@@ -184,8 +182,6 @@ class CompileExprWithBlock : public HIRCompileBase,\n   void visit (HIR::ForLoopExpr &) override {}\n   void visit (HIR::IfLetExpr &) override {}\n   void visit (HIR::IfLetExprConseqElse &) override {}\n-  void visit (HIR::IfLetExprConseqIf &) override {}\n-  void visit (HIR::IfLetExprConseqIfLet &) override {}\n   void visit (HIR::MatchExpr &) override {}\n   void visit (HIR::AwaitExpr &) override {}\n   void visit (HIR::AsyncBlockExpr &) override {}"}, {"sha": "5f6e54b681203ece64ddfb2637e83329f28c9179", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=428bd076370600c0054dae8f386ed7c230cb7add", "patch": "@@ -78,8 +78,6 @@ class CompileExpr : private HIRCompileBase, protected HIR::HIRExpressionVisitor\n   void visit (HIR::WhileLetLoopExpr &) override {}\n   void visit (HIR::IfLetExpr &) override {}\n   void visit (HIR::IfLetExprConseqElse &) override {}\n-  void visit (HIR::IfLetExprConseqIf &) override {}\n-  void visit (HIR::IfLetExprConseqIfLet &) override {}\n \n   // lets not worry about async yet....\n   void visit (HIR::AwaitExpr &) override {}"}, {"sha": "52af05c8c2367b6f2029ebf492d0d5db96e2aca6", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.cc", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc?ref=428bd076370600c0054dae8f386ed7c230cb7add", "patch": "@@ -561,22 +561,6 @@ PrivacyReporter::visit (HIR::IfLetExprConseqElse &)\n   // TODO: We need to visit the else_block as well\n }\n \n-void\n-PrivacyReporter::visit (HIR::IfLetExprConseqIf &)\n-{\n-  // TODO: We need to visit the if_let_expr\n-  // TODO: We need to visit the if_block as well\n-  // TODO: We need to visit the else_block as well\n-}\n-\n-void\n-PrivacyReporter::visit (HIR::IfLetExprConseqIfLet &)\n-{\n-  // TODO: We need to visit the if_let_expr\n-  // TODO: We need to visit the if_block as well\n-  // TODO: We need to visit the else_block as well\n-}\n-\n void\n PrivacyReporter::visit (HIR::MatchExpr &expr)\n {"}, {"sha": "61b581993cec59e242f20e5413afa768b6aede77", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h?ref=428bd076370600c0054dae8f386ed7c230cb7add", "patch": "@@ -124,8 +124,6 @@ types\n   virtual void visit (HIR::IfExprConseqElse &expr);\n   virtual void visit (HIR::IfLetExpr &expr);\n   virtual void visit (HIR::IfLetExprConseqElse &expr);\n-  virtual void visit (HIR::IfLetExprConseqIf &expr);\n-  virtual void visit (HIR::IfLetExprConseqIfLet &expr);\n   virtual void visit (HIR::MatchExpr &expr);\n   virtual void visit (HIR::AwaitExpr &expr);\n   virtual void visit (HIR::AsyncBlockExpr &expr);"}, {"sha": "23b90c9e83fee40db5291e618bba098fe8a675d3", "filename": "gcc/rust/checks/errors/rust-const-checker.cc", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc?ref=428bd076370600c0054dae8f386ed7c230cb7add", "patch": "@@ -515,22 +515,6 @@ ConstChecker::visit (IfLetExprConseqElse &expr)\n   // TODO: Visit else expression\n }\n \n-void\n-ConstChecker::visit (IfLetExprConseqIf &expr)\n-{\n-  expr.get_scrutinee_expr ()->accept_vis (*this);\n-  expr.get_if_block ()->accept_vis (*this);\n-}\n-\n-void\n-ConstChecker::visit (IfLetExprConseqIfLet &expr)\n-{\n-  expr.get_scrutinee_expr ()->accept_vis (*this);\n-  expr.get_if_block ()->accept_vis (*this);\n-\n-  // TODO: Visit conseq if let expression\n-}\n-\n void\n ConstChecker::visit (MatchExpr &expr)\n {"}, {"sha": "e3b096583b5b9b8da1e81f2d84b6329212e1aa4e", "filename": "gcc/rust/checks/errors/rust-const-checker.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h?ref=428bd076370600c0054dae8f386ed7c230cb7add", "patch": "@@ -131,8 +131,6 @@ class ConstChecker : public HIRFullVisitor\n   virtual void visit (IfExprConseqElse &expr) override;\n   virtual void visit (IfLetExpr &expr) override;\n   virtual void visit (IfLetExprConseqElse &expr) override;\n-  virtual void visit (IfLetExprConseqIf &expr) override;\n-  virtual void visit (IfLetExprConseqIfLet &expr) override;\n   virtual void visit (MatchExpr &expr) override;\n   virtual void visit (AwaitExpr &expr) override;\n   virtual void visit (AsyncBlockExpr &expr) override;"}, {"sha": "5293cbe0d1107d71a46b2d1fc3ecebaeb05c8750", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=428bd076370600c0054dae8f386ed7c230cb7add", "patch": "@@ -617,22 +617,6 @@ UnsafeChecker::visit (IfLetExprConseqElse &expr)\n   // TODO: Visit else expression\n }\n \n-void\n-UnsafeChecker::visit (IfLetExprConseqIf &expr)\n-{\n-  expr.get_scrutinee_expr ()->accept_vis (*this);\n-  expr.get_if_block ()->accept_vis (*this);\n-}\n-\n-void\n-UnsafeChecker::visit (IfLetExprConseqIfLet &expr)\n-{\n-  expr.get_scrutinee_expr ()->accept_vis (*this);\n-  expr.get_if_block ()->accept_vis (*this);\n-\n-  // TODO: Visit conseq if let expression\n-}\n-\n void\n UnsafeChecker::visit (MatchExpr &expr)\n {"}, {"sha": "7eab61ca4f0f8443fac1fbde47ffa546a2f5038c", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=428bd076370600c0054dae8f386ed7c230cb7add", "patch": "@@ -113,8 +113,6 @@ class UnsafeChecker : public HIRFullVisitor\n   virtual void visit (IfExprConseqElse &expr) override;\n   virtual void visit (IfLetExpr &expr) override;\n   virtual void visit (IfLetExprConseqElse &expr) override;\n-  virtual void visit (IfLetExprConseqIf &expr) override;\n-  virtual void visit (IfLetExprConseqIfLet &expr) override;\n   virtual void visit (MatchExpr &expr) override;\n   virtual void visit (AwaitExpr &expr) override;\n   virtual void visit (AsyncBlockExpr &expr) override;"}, {"sha": "694a809aa44ff7ed1b8e242967261248e7fa58a7", "filename": "gcc/rust/hir/rust-hir-dump.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.cc?ref=428bd076370600c0054dae8f386ed7c230cb7add", "patch": "@@ -314,12 +314,6 @@ Dump::visit (IfLetExpr &)\n void\n Dump::visit (IfLetExprConseqElse &)\n {}\n-void\n-Dump::visit (IfLetExprConseqIf &)\n-{}\n-void\n-Dump::visit (IfLetExprConseqIfLet &)\n-{}\n \n void\n Dump::visit (MatchExpr &)"}, {"sha": "ebdad505851d12c5cef356542ea7d15d28b99297", "filename": "gcc/rust/hir/rust-hir-dump.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.h?ref=428bd076370600c0054dae8f386ed7c230cb7add", "patch": "@@ -98,8 +98,6 @@ class Dump : public HIRFullVisitor\n   virtual void visit (IfExprConseqElse &) override;\n   virtual void visit (IfLetExpr &) override;\n   virtual void visit (IfLetExprConseqElse &) override;\n-  virtual void visit (IfLetExprConseqIf &) override;\n-  virtual void visit (IfLetExprConseqIfLet &) override;\n \n   virtual void visit (MatchExpr &) override;\n   virtual void visit (AwaitExpr &) override;"}, {"sha": "73fa1f506544de6b4b08366223e7d8741f51def2", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 3, "deletions": 137, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=428bd076370600c0054dae8f386ed7c230cb7add", "patch": "@@ -3448,7 +3448,7 @@ class IfLetExpr : public ExprWithBlock\n  * end */\n class IfLetExprConseqElse : public IfLetExpr\n {\n-  std::unique_ptr<BlockExpr> else_block;\n+  std::unique_ptr<ExprWithBlock> else_block;\n \n public:\n   std::string as_string () const override;\n@@ -3466,7 +3466,7 @@ class IfLetExprConseqElse : public IfLetExpr\n \n   // copy constructor with clone\n   IfLetExprConseqElse (IfLetExprConseqElse const &other)\n-    : IfLetExpr (other), else_block (other.else_block->clone_block_expr ())\n+    : IfLetExpr (other), else_block (other.else_block->clone_expr_with_block ())\n   {}\n \n   // overload assignment operator to clone\n@@ -3476,7 +3476,7 @@ class IfLetExprConseqElse : public IfLetExpr\n     // match_arm_patterns = other.match_arm_patterns;\n     // value = other.value->clone_expr();\n     // if_block = other.if_block->clone_block_expr();\n-    else_block = other.else_block->clone_block_expr ();\n+    else_block = other.else_block->clone_expr_with_block ();\n     // outer_attrs = other.outer_attrs;\n \n     return *this;\n@@ -3512,140 +3512,6 @@ class IfLetExprConseqElse : public IfLetExpr\n   }\n };\n \n-/* HIR node representing \"if let\" expression with an \"else if\" expression at the\n- * end */\n-class IfLetExprConseqIf : public IfLetExpr\n-{\n-  std::unique_ptr<IfExpr> if_expr;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  IfLetExprConseqIf (Analysis::NodeMapping mappings,\n-\t\t     std::vector<std::unique_ptr<Pattern> > match_arm_patterns,\n-\t\t     std::unique_ptr<Expr> value,\n-\t\t     std::unique_ptr<BlockExpr> if_block,\n-\t\t     std::unique_ptr<IfExpr> if_expr, Location locus)\n-    : IfLetExpr (std::move (mappings), std::move (match_arm_patterns),\n-\t\t std::move (value), std::move (if_block), locus),\n-      if_expr (std::move (if_expr))\n-  {}\n-  // again, outer attributes not allowed\n-\n-  // copy constructor with clone\n-  IfLetExprConseqIf (IfLetExprConseqIf const &other)\n-    : IfLetExpr (other), if_expr (other.if_expr->clone_if_expr ())\n-  {}\n-\n-  // overload assignment operator to clone\n-  IfLetExprConseqIf &operator= (IfLetExprConseqIf const &other)\n-  {\n-    IfLetExpr::operator= (other);\n-    // match_arm_patterns = other.match_arm_patterns;\n-    // value = other.value->clone_expr();\n-    // if_block = other.if_block->clone_block_expr();\n-    if_expr = other.if_expr->clone_if_expr ();\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  IfLetExprConseqIf (IfLetExprConseqIf &&other) = default;\n-  IfLetExprConseqIf &operator= (IfLetExprConseqIf &&other) = default;\n-\n-  void accept_vis (HIRFullVisitor &vis) override;\n-  void accept_vis (HIRExpressionVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  IfLetExprConseqIf *clone_expr_impl () const override\n-  {\n-    return new IfLetExprConseqIf (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  IfLetExprConseqIf *clone_expr_with_block_impl () const override\n-  {\n-    return new IfLetExprConseqIf (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  IfLetExprConseqIf *clone_if_let_expr_impl () const override\n-  {\n-    return new IfLetExprConseqIf (*this);\n-  }\n-};\n-\n-/* HIR node representing \"if let\" expression with an \"else if let\" expression at\n- * the end */\n-class IfLetExprConseqIfLet : public IfLetExpr\n-{\n-  std::unique_ptr<IfLetExpr> if_let_expr;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  IfLetExprConseqIfLet (\n-    Analysis::NodeMapping mappings,\n-    std::vector<std::unique_ptr<Pattern> > match_arm_patterns,\n-    std::unique_ptr<Expr> value, std::unique_ptr<BlockExpr> if_block,\n-    std::unique_ptr<IfLetExpr> if_let_expr, Location locus)\n-    : IfLetExpr (std::move (mappings), std::move (match_arm_patterns),\n-\t\t std::move (value), std::move (if_block), locus),\n-      if_let_expr (std::move (if_let_expr))\n-  {}\n-  // outer attributes not allowed\n-\n-  // copy constructor with clone\n-  IfLetExprConseqIfLet (IfLetExprConseqIfLet const &other)\n-    : IfLetExpr (other), if_let_expr (other.if_let_expr->clone_if_let_expr ())\n-  {}\n-\n-  // overload assignment operator to clone\n-  IfLetExprConseqIfLet &operator= (IfLetExprConseqIfLet const &other)\n-  {\n-    IfLetExpr::operator= (other);\n-    // match_arm_patterns = other.match_arm_patterns;\n-    // value = other.value->clone_expr();\n-    // if_block = other.if_block->clone_block_expr();\n-    if_let_expr = other.if_let_expr->clone_if_let_expr ();\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  IfLetExprConseqIfLet (IfLetExprConseqIfLet &&other) = default;\n-  IfLetExprConseqIfLet &operator= (IfLetExprConseqIfLet &&other) = default;\n-\n-  void accept_vis (HIRFullVisitor &vis) override;\n-  void accept_vis (HIRExpressionVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  IfLetExprConseqIfLet *clone_expr_impl () const override\n-  {\n-    return new IfLetExprConseqIfLet (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  IfLetExprConseqIfLet *clone_expr_with_block_impl () const override\n-  {\n-    return new IfLetExprConseqIfLet (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  IfLetExprConseqIfLet *clone_if_let_expr_impl () const override\n-  {\n-    return new IfLetExprConseqIfLet (*this);\n-  }\n-};\n-\n // Match arm expression\n struct MatchArm\n {"}, {"sha": "76117ebef688901b720b8ae4b977a0ddcab7b60a", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=428bd076370600c0054dae8f386ed7c230cb7add", "patch": "@@ -119,8 +119,6 @@ class IfExpr;\n class IfExprConseqElse;\n class IfLetExpr;\n class IfLetExprConseqElse;\n-class IfLetExprConseqIf;\n-class IfLetExprConseqIfLet;\n struct MatchArm;\n // class MatchCase;\n // class MatchCaseBlockExpr;"}, {"sha": "63db0d79d0073dc7df8f81c896dadda839701912", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=428bd076370600c0054dae8f386ed7c230cb7add", "patch": "@@ -83,8 +83,6 @@ class HIRFullVisitor\n   virtual void visit (IfExprConseqElse &expr) = 0;\n   virtual void visit (IfLetExpr &expr) = 0;\n   virtual void visit (IfLetExprConseqElse &expr) = 0;\n-  virtual void visit (IfLetExprConseqIf &expr) = 0;\n-  virtual void visit (IfLetExprConseqIfLet &expr) = 0;\n   virtual void visit (MatchExpr &expr) = 0;\n   virtual void visit (AwaitExpr &expr) = 0;\n   virtual void visit (AsyncBlockExpr &expr) = 0;\n@@ -224,8 +222,6 @@ class HIRFullVisitorBase : public HIRFullVisitor\n   virtual void visit (IfExprConseqElse &) override {}\n   virtual void visit (IfLetExpr &) override {}\n   virtual void visit (IfLetExprConseqElse &) override {}\n-  virtual void visit (IfLetExprConseqIf &) override {}\n-  virtual void visit (IfLetExprConseqIfLet &) override {}\n \n   virtual void visit (MatchExpr &) override {}\n   virtual void visit (AwaitExpr &) override {}\n@@ -458,8 +454,6 @@ class HIRExpressionVisitor\n   virtual void visit (IfExprConseqElse &expr) = 0;\n   virtual void visit (IfLetExpr &expr) = 0;\n   virtual void visit (IfLetExprConseqElse &expr) = 0;\n-  virtual void visit (IfLetExprConseqIf &expr) = 0;\n-  virtual void visit (IfLetExprConseqIfLet &expr) = 0;\n   virtual void visit (MatchExpr &expr) = 0;\n   virtual void visit (AwaitExpr &expr) = 0;\n   virtual void visit (AsyncBlockExpr &expr) = 0;"}, {"sha": "92e002cad31096249b4b81d842ea1b2ed67f3583", "filename": "gcc/rust/hir/tree/rust-hir.cc", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc?ref=428bd076370600c0054dae8f386ed7c230cb7add", "patch": "@@ -1560,27 +1560,7 @@ IfLetExprConseqElse::as_string () const\n {\n   std::string str = IfLetExpr::as_string ();\n \n-  str += \"\\n Else block expr: \" + else_block->as_string ();\n-\n-  return str;\n-}\n-\n-std::string\n-IfLetExprConseqIf::as_string () const\n-{\n-  std::string str = IfLetExpr::as_string ();\n-\n-  str += \"\\n Else if expr: \\n  \" + if_expr->as_string ();\n-\n-  return str;\n-}\n-\n-std::string\n-IfLetExprConseqIfLet::as_string () const\n-{\n-  std::string str = IfLetExpr::as_string ();\n-\n-  str += \"\\n Else if let expr: \\n  \" + if_let_expr->as_string ();\n+  str += \"\\n Else expr: \" + else_block->as_string ();\n \n   return str;\n }\n@@ -4129,18 +4109,6 @@ IfLetExprConseqElse::accept_vis (HIRFullVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-IfLetExprConseqIf::accept_vis (HIRFullVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-IfLetExprConseqIfLet::accept_vis (HIRFullVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n MatchExpr::accept_vis (HIRFullVisitor &vis)\n {\n@@ -4891,18 +4859,6 @@ RangeFromToInclExpr::accept_vis (HIRExpressionVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-IfLetExprConseqIfLet::accept_vis (HIRExpressionVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-IfLetExprConseqIf::accept_vis (HIRExpressionVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n IfLetExprConseqElse::accept_vis (HIRExpressionVisitor &vis)\n {"}, {"sha": "4e67d8207983c27225b18ee39cedd82a70b83e70", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/428bd076370600c0054dae8f386ed7c230cb7add/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=428bd076370600c0054dae8f386ed7c230cb7add", "patch": "@@ -76,8 +76,6 @@ class TypeCheckExpr : private TypeCheckBase, private HIR::HIRExpressionVisitor\n   void visit (HIR::WhileLetLoopExpr &) override {}\n   void visit (HIR::ForLoopExpr &) override {}\n   void visit (HIR::IfLetExprConseqElse &) override {}\n-  void visit (HIR::IfLetExprConseqIf &) override {}\n-  void visit (HIR::IfLetExprConseqIfLet &) override {}\n   void visit (HIR::AwaitExpr &) override {}\n   void visit (HIR::AsyncBlockExpr &) override {}\n "}]}