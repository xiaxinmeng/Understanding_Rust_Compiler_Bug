{"sha": "3a5a75b53a278188c21a2a2dc53ebf309a2b1a09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E1YTc1YjUzYTI3ODE4OGMyMWEyYTJkYzUzZWJmMzA5YTJiMWEwOQ==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2016-10-26T16:17:54Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2016-10-26T16:17:54Z"}, "message": "Adapt atomic compare and swap to ARMv8-M Baseline\n\n2016-10-26  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    * config/arm/sync.md (atomic_compare_and_swap<mode>_1): Add new ARMv8-M\n    Baseline only alternatives to (i) hold store atomic success value in a\n    return register rather than a scratch register, (ii) use a low register\n    for it and to (iii) ensure the cbranchsi insn generated by the split\n    respect the constraints of Thumb-1 cbranchsi4_insn and\n    cbranchsi4_scratch.\n    * config/arm/thumb1.md (cbranchsi4_insn): Add comment to indicate\n    constraints must match those in atomic_compare_and_swap.\n    (cbranchsi4_scratch): Likewise.\n\nFrom-SVN: r241578", "tree": {"sha": "e2400171a48808237a6f4ea911f76f522370f9ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2400171a48808237a6f4ea911f76f522370f9ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a5a75b53a278188c21a2a2dc53ebf309a2b1a09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5a75b53a278188c21a2a2dc53ebf309a2b1a09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a5a75b53a278188c21a2a2dc53ebf309a2b1a09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5a75b53a278188c21a2a2dc53ebf309a2b1a09/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12286f25cddbf8e8b3a810442ffa4959da315c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12286f25cddbf8e8b3a810442ffa4959da315c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12286f25cddbf8e8b3a810442ffa4959da315c31"}], "stats": {"total": 52, "additions": 38, "deletions": 14}, "files": [{"sha": "12f9c0294758f7b1a6b40d6c29028e42c6b6beaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5a75b53a278188c21a2a2dc53ebf309a2b1a09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5a75b53a278188c21a2a2dc53ebf309a2b1a09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a5a75b53a278188c21a2a2dc53ebf309a2b1a09", "patch": "@@ -1,3 +1,15 @@\n+2016-10-26  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/sync.md (atomic_compare_and_swap<mode>_1): Add new ARMv8-M\n+\tBaseline only alternatives to (i) hold store atomic success value in a\n+\treturn register rather than a scratch register, (ii) use a low register\n+\tfor it and to (iii) ensure the cbranchsi insn generated by the split\n+\trespect the constraints of Thumb-1 cbranchsi4_insn and\n+\tcbranchsi4_scratch.\n+\t* config/arm/thumb1.md (cbranchsi4_insn): Add comment to indicate\n+\tconstraints must match those in atomic_compare_and_swap.\n+\t(cbranchsi4_scratch): Likewise.\n+\n 2016-10-26  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* config/arm/arm.c (arm_expand_compare_and_swap): Add new bdst local"}, {"sha": "583b0af27d04ee8fba174e034a4c7b20760c38aa", "filename": "gcc/config/arm/sync.md", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5a75b53a278188c21a2a2dc53ebf309a2b1a09/gcc%2Fconfig%2Farm%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5a75b53a278188c21a2a2dc53ebf309a2b1a09/gcc%2Fconfig%2Farm%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsync.md?ref=3a5a75b53a278188c21a2a2dc53ebf309a2b1a09", "patch": "@@ -189,57 +189,63 @@\n   DONE;\n })\n \n+;; Constraints of this pattern must be at least as strict as those of the\n+;; cbranchsi operations in thumb1.md and aim to be as permissive.\n (define_insn_and_split \"atomic_compare_and_swap<mode>_1\"\n-  [(set (match_operand 0 \"cc_register_operand\" \"=&c\")\t\t;; bool out\n+  [(set (match_operand 0 \"cc_register_operand\" \"=&c,&l,&l,&l\")\t\t;; bool out\n \t(unspec_volatile:CC_Z [(const_int 0)] VUNSPEC_ATOMIC_CAS))\n-   (set (match_operand:SI 1 \"s_register_operand\" \"=&r\")\t\t;; val out\n+   (set (match_operand:SI 1 \"s_register_operand\" \"=&r,&l,&0,&l*h\")\t;; val out\n \t(zero_extend:SI\n-\t  (match_operand:NARROW 2 \"mem_noofs_operand\" \"+Ua\")))\t;; memory\n+\t  (match_operand:NARROW 2 \"mem_noofs_operand\" \"+Ua,Ua,Ua,Ua\")))\t;; memory\n    (set (match_dup 2)\n \t(unspec_volatile:NARROW\n-\t  [(match_operand:SI 3 \"arm_add_operand\" \"rIL\")\t\t;; expected\n-\t   (match_operand:NARROW 4 \"s_register_operand\" \"r\")\t;; desired\n+\t  [(match_operand:SI 3 \"arm_add_operand\" \"rIL,lIL*h,J,*r\")\t;; expected\n+\t   (match_operand:NARROW 4 \"s_register_operand\" \"r,r,r,r\")\t;; desired\n \t   (match_operand:SI 5 \"const_int_operand\")\t\t;; is_weak\n \t   (match_operand:SI 6 \"const_int_operand\")\t\t;; mod_s\n \t   (match_operand:SI 7 \"const_int_operand\")]\t\t;; mod_f\n \t  VUNSPEC_ATOMIC_CAS))\n-   (clobber (match_scratch:SI 8 \"=&r\"))]\n+   (clobber (match_scratch:SI 8 \"=&r,X,X,X\"))]\n   \"<sync_predtab>\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n   {\n     arm_split_compare_and_swap (operands);\n     DONE;\n-  })\n+  }\n+  [(set_attr \"arch\" \"32,v8mb,v8mb,v8mb\")])\n \n (define_mode_attr cas_cmp_operand\n   [(SI \"arm_add_operand\") (DI \"cmpdi_operand\")])\n (define_mode_attr cas_cmp_str\n   [(SI \"rIL\") (DI \"rDi\")])\n \n+;; Constraints of this pattern must be at least as strict as those of the\n+;; cbranchsi operations in thumb1.md and aim to be as permissive.\n (define_insn_and_split \"atomic_compare_and_swap<mode>_1\"\n-  [(set (match_operand 0 \"cc_register_operand\" \"=&c\")\t\t;; bool out\n+  [(set (match_operand 0 \"cc_register_operand\" \"=&c,&l,&l,&l\")\t\t;; bool out\n \t(unspec_volatile:CC_Z [(const_int 0)] VUNSPEC_ATOMIC_CAS))\n-   (set (match_operand:SIDI 1 \"s_register_operand\" \"=&r\")\t;; val out\n-\t(match_operand:SIDI 2 \"mem_noofs_operand\" \"+Ua\"))\t;; memory\n+   (set (match_operand:SIDI 1 \"s_register_operand\" \"=&r,&l,&0,&l*h\")\t;; val out\n+\t(match_operand:SIDI 2 \"mem_noofs_operand\" \"+Ua,Ua,Ua,Ua\"))\t;; memory\n    (set (match_dup 2)\n \t(unspec_volatile:SIDI\n-\t  [(match_operand:SIDI 3 \"<cas_cmp_operand>\" \"<cas_cmp_str>\") ;; expect\n-\t   (match_operand:SIDI 4 \"s_register_operand\" \"r\")\t;; desired\n+\t  [(match_operand:SIDI 3 \"<cas_cmp_operand>\" \"<cas_cmp_str>,lIL*h,J,*r\") ;; expect\n+\t   (match_operand:SIDI 4 \"s_register_operand\" \"r,r,r,r\")\t;; desired\n \t   (match_operand:SI 5 \"const_int_operand\")\t\t;; is_weak\n \t   (match_operand:SI 6 \"const_int_operand\")\t\t;; mod_s\n \t   (match_operand:SI 7 \"const_int_operand\")]\t\t;; mod_f\n \t  VUNSPEC_ATOMIC_CAS))\n-   (clobber (match_scratch:SI 8 \"=&r\"))]\n+   (clobber (match_scratch:SI 8 \"=&r,X,X,X\"))]\n   \"<sync_predtab>\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n   {\n     arm_split_compare_and_swap (operands);\n     DONE;\n-  })\n+  }\n+  [(set_attr \"arch\" \"32,v8mb,v8mb,v8mb\")])\n \n (define_insn_and_split \"atomic_exchange<mode>\"\n   [(set (match_operand:QHSD 0 \"s_register_operand\" \"=&r\")\t;; output"}, {"sha": "67f2878b45fe47abaaf24d97213613d1572dcd91", "filename": "gcc/config/arm/thumb1.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5a75b53a278188c21a2a2dc53ebf309a2b1a09/gcc%2Fconfig%2Farm%2Fthumb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5a75b53a278188c21a2a2dc53ebf309a2b1a09/gcc%2Fconfig%2Farm%2Fthumb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb1.md?ref=3a5a75b53a278188c21a2a2dc53ebf309a2b1a09", "patch": "@@ -1059,6 +1059,9 @@\n \t    (const_string \"multiple\")))]\n )\n \n+;; Changes to the constraints of this pattern must be propagated to those of\n+;; atomic compare_and_swap splitters in sync.md.  These must be at least as\n+;; strict as the constraints here and aim to be as permissive.\n (define_insn \"cbranchsi4_insn\"\n   [(set (pc) (if_then_else\n \t      (match_operator 0 \"arm_comparison_operator\"\n@@ -1120,6 +1123,9 @@\n    (set_attr \"type\" \"multiple\")]\n )\n \n+;; Changes to the constraints of this pattern must be propagated to those of\n+;; atomic compare_and_swap splitters in sync.md.  These must be at least as\n+;; strict as the constraints here and aim to be as permissive.\n (define_insn \"cbranchsi4_scratch\"\n   [(set (pc) (if_then_else\n \t      (match_operator 4 \"arm_comparison_operator\""}]}