{"sha": "a68d4b75929b0247ce8dfd6e63e8ef17d2549111", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY4ZDRiNzU5MjliMDI0N2NlOGRmZDZlNjNlOGVmMTdkMjU0OTExMQ==", "commit": {"author": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1997-06-09T22:24:52Z"}, "committer": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1997-06-09T22:24:52Z"}, "message": "reload1.c (reload): Use xmalloc instead of alloca for the label offsets in OFFSETS_AT and...\n\n\t* reload1.c (reload): Use xmalloc instead of alloca for the label\n\toffsets in OFFSETS_AT and OFFSETS_KNOWN_AT.\n\nFrom-SVN: r14194", "tree": {"sha": "4344369a4c3bc65cec3a6572f52ed0d0c614409c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4344369a4c3bc65cec3a6572f52ed0d0c614409c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a68d4b75929b0247ce8dfd6e63e8ef17d2549111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a68d4b75929b0247ce8dfd6e63e8ef17d2549111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a68d4b75929b0247ce8dfd6e63e8ef17d2549111", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a68d4b75929b0247ce8dfd6e63e8ef17d2549111/comments", "author": null, "committer": null, "parents": [{"sha": "812059fe0e3b3a255369db4be0f0a38b324bba66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/812059fe0e3b3a255369db4be0f0a38b324bba66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/812059fe0e3b3a255369db4be0f0a38b324bba66"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "ed6a07d000bf279d908cbbdedf5212efab2e5edb", "filename": "gcc/reload1.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68d4b75929b0247ce8dfd6e63e8ef17d2549111/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68d4b75929b0247ce8dfd6e63e8ef17d2549111/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=a68d4b75929b0247ce8dfd6e63e8ef17d2549111", "patch": "@@ -545,6 +545,11 @@ reload (first, global, dumpfile)\n   register rtx insn;\n   register struct elim_table *ep;\n \n+  /* The two pointers used to track the true location of the memory used\n+     for label offsets.  */\n+  char *real_known_ptr = NULL_PTR;\n+  int (*real_at_ptr)[NUM_ELIMINABLE_REGS];\n+\n   int something_changed;\n   int something_needs_reloads;\n   int something_needs_elimination;\n@@ -751,13 +756,17 @@ reload (first, global, dumpfile)\n   num_labels = max_label_num () - get_first_label_num ();\n \n   /* Allocate the tables used to store offset information at labels.  */\n-  offsets_known_at = (char *) alloca (num_labels);\n-  offsets_at\n+  /* We used to use alloca here, but the size of what it would try to\n+     allocate would occasionally cause it to exceed the stack limit and\n+     cause a core dump.  */\n+  real_known_ptr = xmalloc (num_labels);\n+  real_at_ptr\n     = (int (*)[NUM_ELIMINABLE_REGS])\n-      alloca (num_labels * NUM_ELIMINABLE_REGS * sizeof (int));\n+    xmalloc (num_labels * NUM_ELIMINABLE_REGS * sizeof (int));\n \n-  offsets_known_at -= get_first_label_num ();\n-  offsets_at -= get_first_label_num ();\n+  offsets_known_at = real_known_ptr - get_first_label_num ();\n+  offsets_at\n+    = (int (*)[NUM_ELIMINABLE_REGS]) (real_at_ptr - get_first_label_num ());\n \n   /* Alter each pseudo-reg rtx to contain its hard reg number.\n      Assign stack slots to the pseudos that lack hard regs or equivalents.\n@@ -789,7 +798,11 @@ reload (first, global, dumpfile)\n       break;\n \n   if (i == max_regno && num_eliminable == 0 && ! caller_save_needed)\n-    return;\n+    {\n+      free (real_known_ptr);\n+      free (real_at_ptr);\n+      return;\n+    }\n #endif\n \n   /* Compute the order of preference for hard registers to spill.\n@@ -2154,6 +2167,11 @@ reload (first, global, dumpfile)\n   reg_equiv_constant = 0;\n   reg_equiv_memory_loc = 0;\n \n+  if (real_known_ptr)\n+    free (real_known_ptr);\n+  if (real_at_ptr)\n+    free (real_at_ptr);\n+\n   if (scratch_list)\n     free (scratch_list);\n   scratch_list = 0;"}]}