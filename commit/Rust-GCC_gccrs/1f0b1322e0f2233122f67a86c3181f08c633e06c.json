{"sha": "1f0b1322e0f2233122f67a86c3181f08c633e06c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYwYjEzMjJlMGYyMjMzMTIyZjY3YTg2YzMxODFmMDhjNjMzZTA2Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-06-06T09:51:33Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-06-06T09:51:33Z"}, "message": "utils.c (gnat_internal_attribute_table): Add support for noinline and noclone attributes.\n\n\t* gcc-interface/utils.c (gnat_internal_attribute_table): Add support\n\tfor noinline and noclone attributes.\n\t(handle_noinline_attribute): New handler.\n\t(handle_noclone_attribute): Likewise.\n\nFrom-SVN: r237127", "tree": {"sha": "a5881ce6dffaea37772b84ad18bdf56725af502a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5881ce6dffaea37772b84ad18bdf56725af502a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f0b1322e0f2233122f67a86c3181f08c633e06c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f0b1322e0f2233122f67a86c3181f08c633e06c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f0b1322e0f2233122f67a86c3181f08c633e06c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f0b1322e0f2233122f67a86c3181f08c633e06c/comments", "author": null, "committer": null, "parents": [{"sha": "5a4916beb895932ff9a68716f36fb47b4d059c49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4916beb895932ff9a68716f36fb47b4d059c49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a4916beb895932ff9a68716f36fb47b4d059c49"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "92292bea058560a9b379f60473beae9c3b4231cc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f0b1322e0f2233122f67a86c3181f08c633e06c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f0b1322e0f2233122f67a86c3181f08c633e06c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1f0b1322e0f2233122f67a86c3181f08c633e06c", "patch": "@@ -1,3 +1,10 @@\n+2016-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (gnat_internal_attribute_table): Add support\n+\tfor noinline and noclone attributes.\n+\t(handle_noinline_attribute): New handler.\n+\t(handle_noclone_attribute): Likewise.\n+\n 2016-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (process_type): Beef up comment."}, {"sha": "831b6e035aa80f17d93be543c8f221737112f19c", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f0b1322e0f2233122f67a86c3181f08c633e06c/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f0b1322e0f2233122f67a86c3181f08c633e06c/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=1f0b1322e0f2233122f67a86c3181f08c633e06c", "patch": "@@ -90,6 +90,8 @@ static tree handle_novops_attribute (tree *, tree, tree, int, bool *);\n static tree handle_nonnull_attribute (tree *, tree, tree, int, bool *);\n static tree handle_sentinel_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_noinline_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_noclone_attribute (tree *, tree, tree, int, bool *);\n static tree handle_leaf_attribute (tree *, tree, tree, int, bool *);\n static tree handle_always_inline_attribute (tree *, tree, tree, int, bool *);\n static tree handle_malloc_attribute (tree *, tree, tree, int, bool *);\n@@ -121,6 +123,10 @@ const struct attribute_spec gnat_internal_attribute_table[] =\n     false },\n   { \"noreturn\",     0, 0,  true,  false, false, handle_noreturn_attribute,\n     false },\n+  { \"noinline\",     0, 0,  true,  false, false, handle_noinline_attribute,\n+    false },\n+  { \"noclone\",      0, 0,  true,  false, false, handle_noclone_attribute,\n+    false },\n   { \"leaf\",         0, 0,  true,  false, false, handle_leaf_attribute,\n     false },\n   { \"always_inline\",0, 0,  true,  false, false, handle_always_inline_attribute,\n@@ -5963,6 +5969,51 @@ handle_noreturn_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   return NULL_TREE;\n }\n \n+/* Handle a \"noinline\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_noinline_attribute (tree *node, tree name,\n+\t\t\t   tree ARG_UNUSED (args),\n+\t\t\t   int ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    {\n+      if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (*node)))\n+\t{\n+\t  warning (OPT_Wattributes, \"%qE attribute ignored due to conflict \"\n+\t\t   \"with attribute %qs\", name, \"always_inline\");\n+\t  *no_add_attrs = true;\n+\t}\n+      else\n+\tDECL_UNINLINABLE (*node) = 1;\n+    }\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Handle a \"noclone\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_noclone_attribute (tree *node, tree name,\n+\t\t\t  tree ARG_UNUSED (args),\n+\t\t\t  int ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"leaf\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}]}