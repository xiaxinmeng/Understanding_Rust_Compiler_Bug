{"sha": "8c8ca873216387bc26046615c806b96f0345ff9d", "node_id": "C_kwDOANBUbNoAKDhjOGNhODczMjE2Mzg3YmMyNjA0NjYxNWM4MDZiOTZmMDM0NWZmOWQ", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-22T09:44:18Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-24T06:38:27Z"}, "message": "Remove use_equiv_p in vr-values.cc\n\nWith no equivalences, the use_equiv_p argument in various methods in\nsimplify_using_ranges is always false.  This means we can remove all\ncalls to compare_names, along with the function.\n\ngcc/ChangeLog:\n\n\t* vr-values.cc (simplify_using_ranges::compare_names): Remove.\n\t(vrp_evaluate_conditional_warnv_with_ops): Remove call to\n\tcompare_names.\n\t(simplify_using_ranges::vrp_visit_cond_stmt): Remove use_equiv_p\n\targument to vrp_evaluate_conditional_warnv_with_ops.\n\t* vr-values.h (class simplify_using_ranges): Remove\n\tcompare_names.\n\tRemove use_equiv_p to vrp_evaluate_conditional_warnv_with_ops.", "tree": {"sha": "f77ee63ce4ff3d978704e24de488e85d51ffd7c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f77ee63ce4ff3d978704e24de488e85d51ffd7c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c8ca873216387bc26046615c806b96f0345ff9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c8ca873216387bc26046615c806b96f0345ff9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c8ca873216387bc26046615c806b96f0345ff9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c8ca873216387bc26046615c806b96f0345ff9d/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22f402963f1152988982ea1ffd98b2e823905c42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f402963f1152988982ea1ffd98b2e823905c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22f402963f1152988982ea1ffd98b2e823905c42"}], "stats": {"total": 131, "additions": 3, "deletions": 128}, "files": [{"sha": "a1f7346f2ff04d9cad20e9257679e5a08bbdaf18", "filename": "gcc/vr-values.cc", "status": "modified", "additions": 2, "deletions": 125, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8ca873216387bc26046615c806b96f0345ff9d/gcc%2Fvr-values.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8ca873216387bc26046615c806b96f0345ff9d/gcc%2Fvr-values.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.cc?ref=8c8ca873216387bc26046615c806b96f0345ff9d", "patch": "@@ -667,124 +667,6 @@ simplify_using_ranges::compare_name_with_value\n   return retval;\n }\n \n-/* Given a comparison code COMP and names N1 and N2, compare all the\n-   ranges equivalent to N1 against all the ranges equivalent to N2\n-   to determine the value of N1 COMP N2.  Return the same value\n-   returned by compare_ranges.  Set *STRICT_OVERFLOW_P to indicate\n-   whether we relied on undefined signed overflow in the comparison.  */\n-\n-\n-tree\n-simplify_using_ranges::compare_names (enum tree_code comp, tree n1, tree n2,\n-\t\t\t\t      bool *strict_overflow_p, gimple *s)\n-{\n-  /* ?? These bitmaps are NULL as there are no longer any equivalences\n-     available in the value_range*.  */\n-  bitmap e1 = NULL;\n-  bitmap e2 = NULL;\n-\n-  /* Use the fake bitmaps if e1 or e2 are not available.  */\n-  static bitmap s_e1 = NULL, s_e2 = NULL;\n-  static bitmap_obstack *s_obstack = NULL;\n-  if (s_obstack == NULL)\n-    {\n-      s_obstack = XNEW (bitmap_obstack);\n-      bitmap_obstack_initialize (s_obstack);\n-      s_e1 = BITMAP_ALLOC (s_obstack);\n-      s_e2 = BITMAP_ALLOC (s_obstack);\n-    }\n-  if (e1 == NULL)\n-    e1 = s_e1;\n-  if (e2 == NULL)\n-    e2 = s_e2;\n-\n-  /* Add N1 and N2 to their own set of equivalences to avoid\n-     duplicating the body of the loop just to check N1 and N2\n-     ranges.  */\n-  bitmap_set_bit (e1, SSA_NAME_VERSION (n1));\n-  bitmap_set_bit (e2, SSA_NAME_VERSION (n2));\n-\n-  /* If the equivalence sets have a common intersection, then the two\n-     names can be compared without checking their ranges.  */\n-  if (bitmap_intersect_p (e1, e2))\n-    {\n-      bitmap_clear_bit (e1, SSA_NAME_VERSION (n1));\n-      bitmap_clear_bit (e2, SSA_NAME_VERSION (n2));\n-\n-      return (comp == EQ_EXPR || comp == GE_EXPR || comp == LE_EXPR)\n-\t     ? boolean_true_node\n-\t     : boolean_false_node;\n-    }\n-\n-  /* Start at -1.  Set it to 0 if we do a comparison without relying\n-     on overflow, or 1 if all comparisons rely on overflow.  */\n-  int used_strict_overflow = -1;\n-\n-  /* Otherwise, compare all the equivalent ranges.  First, add N1 and\n-     N2 to their own set of equivalences to avoid duplicating the body\n-     of the loop just to check N1 and N2 ranges.  */\n-  bitmap_iterator bi1;\n-  unsigned i1;\n-  EXECUTE_IF_SET_IN_BITMAP (e1, 0, i1, bi1)\n-    {\n-      if (!ssa_name (i1))\n-\tcontinue;\n-\n-      value_range tem_vr1;\n-      const value_range *vr1 = get_vr_for_comparison (i1, &tem_vr1, s);\n-\n-      tree t = NULL_TREE, retval = NULL_TREE;\n-      bitmap_iterator bi2;\n-      unsigned i2;\n-      EXECUTE_IF_SET_IN_BITMAP (e2, 0, i2, bi2)\n-\t{\n-\t  if (!ssa_name (i2))\n-\t    continue;\n-\n-\t  bool sop = false;\n-\n-\t  value_range tem_vr2;\n-\t  const value_range *vr2 = get_vr_for_comparison (i2, &tem_vr2, s);\n-\n-\t  t = compare_ranges (comp, vr1, vr2, &sop);\n-\t  if (t)\n-\t    {\n-\t      /* If we get different answers from different members\n-\t\t of the equivalence set this check must be in a dead\n-\t\t code region.  Folding it to a trap representation\n-\t\t would be correct here.  For now just return don't-know.  */\n-\t      if (retval != NULL && t != retval)\n-\t\t{\n-\t\t  bitmap_clear_bit (e1, SSA_NAME_VERSION (n1));\n-\t\t  bitmap_clear_bit (e2, SSA_NAME_VERSION (n2));\n-\t\t  return NULL_TREE;\n-\t\t}\n-\t      retval = t;\n-\n-\t      if (!sop)\n-\t\tused_strict_overflow = 0;\n-\t      else if (used_strict_overflow < 0)\n-\t\tused_strict_overflow = 1;\n-\t    }\n-\t}\n-\n-      if (retval)\n-\t{\n-\t  bitmap_clear_bit (e1, SSA_NAME_VERSION (n1));\n-\t  bitmap_clear_bit (e2, SSA_NAME_VERSION (n2));\n-\t  if (used_strict_overflow > 0)\n-\t    *strict_overflow_p = true;\n-\t  return retval;\n-\t}\n-    }\n-\n-  /* None of the equivalent ranges are useful in computing this\n-     comparison.  */\n-  bitmap_clear_bit (e1, SSA_NAME_VERSION (n1));\n-  bitmap_clear_bit (e2, SSA_NAME_VERSION (n2));\n-  return NULL_TREE;\n-}\n-\n /* Helper function for vrp_evaluate_conditional_warnv & other\n    optimizers.  */\n \n@@ -815,7 +697,6 @@ simplify_using_ranges::vrp_evaluate_conditional_warnv_with_ops\n \t\t\t\t\t\t(gimple *stmt,\n \t\t\t\t\t\t enum tree_code code,\n \t\t\t\t\t\t tree op0, tree op1,\n-\t\t\t\t\t\t bool use_equiv_p,\n \t\t\t\t\t\t bool *strict_overflow_p,\n \t\t\t\t\t\t bool *only_ranges)\n {\n@@ -899,11 +780,7 @@ simplify_using_ranges::vrp_evaluate_conditional_warnv_with_ops\n     return ret;\n   if (only_ranges)\n     *only_ranges = false;\n-  /* Do not use compare_names during propagation, it's quadratic.  */\n-  if (TREE_CODE (op0) == SSA_NAME && TREE_CODE (op1) == SSA_NAME\n-      && use_equiv_p)\n-    return compare_names (code, op0, op1, strict_overflow_p, stmt);\n-  else if (TREE_CODE (op0) == SSA_NAME)\n+  if (TREE_CODE (op0) == SSA_NAME)\n     return compare_name_with_value (code, op0, op1, strict_overflow_p, stmt);\n   else if (TREE_CODE (op1) == SSA_NAME)\n     return compare_name_with_value (swap_tree_comparison (code), op1, op0,\n@@ -949,7 +826,7 @@ simplify_using_ranges::vrp_visit_cond_stmt (gcond *stmt, edge *taken_edge_p)\n \t\t\t\t\t\t gimple_cond_code (stmt),\n \t\t\t\t\t\t gimple_cond_lhs (stmt),\n \t\t\t\t\t\t gimple_cond_rhs (stmt),\n-\t\t\t\t\t\t false, &sop, NULL);\n+\t\t\t\t\t\t &sop, NULL);\n   if (val)\n     *taken_edge_p = find_taken_edge (gimple_bb (stmt), val);\n "}, {"sha": "6ad9fb2b81d8ea5af3bae9ffadfccee026d97767", "filename": "gcc/vr-values.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8ca873216387bc26046615c806b96f0345ff9d/gcc%2Fvr-values.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8ca873216387bc26046615c806b96f0345ff9d/gcc%2Fvr-values.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.h?ref=8c8ca873216387bc26046615c806b96f0345ff9d", "patch": "@@ -37,8 +37,7 @@ class simplify_using_ranges\n private:\n   void vrp_visit_cond_stmt (gcond *, edge *);\n   tree vrp_evaluate_conditional_warnv_with_ops (gimple *stmt, enum tree_code,\n-\t\t\t\t\t\ttree, tree, bool,\n-\t\t\t\t\t\tbool *, bool *);\n+\t\t\t\t\t\ttree, tree, bool *, bool *);\n   bool simplify_casted_cond (gcond *);\n   bool simplify_truth_ops_using_ranges (gimple_stmt_iterator *, gimple *);\n   bool simplify_div_or_mod_using_ranges (gimple_stmt_iterator *, gimple *);\n@@ -54,7 +53,6 @@ class simplify_using_ranges\n   bool two_valued_val_range_p (tree, tree *, tree *, gimple *);\n   bool op_with_boolean_value_range_p (tree, gimple *);\n   tree compare_name_with_value (enum tree_code, tree, tree, bool *, gimple *);\n-  tree compare_names (enum tree_code, tree, tree, bool *, gimple *s);\n   const value_range *get_vr_for_comparison (int, value_range *, gimple *s);\n   tree vrp_evaluate_conditional_warnv_with_ops_using_ranges (enum tree_code,\n \t\t\t\t\t\t\t     tree, tree,"}]}