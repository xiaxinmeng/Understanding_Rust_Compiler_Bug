{"sha": "0a31a09adf52b63ab1e99d588a45d5313035ffc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEzMWEwOWFkZjUyYjYzYWIxZTk5ZDU4OGE0NWQ1MzEzMDM1ZmZjMg==", "commit": {"author": {"name": "Bill Seurer", "email": "seurer@linux.vnet.ibm.com", "date": "2016-04-28T16:01:52Z"}, "committer": {"name": "Bill Seurer", "email": "seurer@gcc.gnu.org", "date": "2016-04-28T16:01:52Z"}, "message": "This patch adds support for the signed and unsigned int versions of the...\n\nThis patch adds support for the signed and unsigned int versions of the\nvec_adde altivec builtins from the Power Architecture 64-Bit ELF V2 ABI\nOpenPOWER ABI for Linux Supplement (16 July 2015 Version 1.1). There are\nmany of the builtins that are missing and this is the first of a series\nof patches to add them.\n\nThere aren't instructions for the int versions of vec_adde so the\noutput code is built from other built-ins that do have instructions\nwhich in this case is just two vec_adds with a vec_and to ensure the\ncarry vector is comprised of only the values 0 or 1.\n\nThe new test cases are executable tests which verify that the generated\ncode produces expected values. C macros were used so that the same\ntest case could be used for both the signed and unsigned versions. An\nextra executable test case is also included to ensure that the modified\nsupport for the __int128 versions of vec_adde is not broken. The same\ntest case could not be used for both int and __int128 because of some\ndifferences in loading and storing the vectors.\n\nBootstrapped and tested on powerpc64le-unknown-linux-gnu with no\nregressions. Is this ok for trunk?\n\n[gcc]\n\n2016-04-28  Bill Seurer  <seurer@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000-builtin.def (vec_adde): Change vec_adde to a\n\tspecial case builtin.\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Remove\n\tALTIVEC_BUILTIN_VEC_ADDE.\n\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin): Add\n\tsupport for ALTIVEC_BUILTIN_VEC_ADDE.\n\t* config/rs6000/rs6000.c (altivec_init_builtins): Add definition\n\tfor __builtin_vec_adde.\n\n[gcc/testsuite]\n\n2016-04-28  Bill Seurer  <seurer@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/vec-adde.c: New test.\n\t* gcc.target/powerpc/vec-adde-int128.c: New test.\n\nFrom-SVN: r235577", "tree": {"sha": "815b7ca188aec3bf1ebe9db84f4fcf2eaac04a32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/815b7ca188aec3bf1ebe9db84f4fcf2eaac04a32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a31a09adf52b63ab1e99d588a45d5313035ffc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a31a09adf52b63ab1e99d588a45d5313035ffc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a31a09adf52b63ab1e99d588a45d5313035ffc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a31a09adf52b63ab1e99d588a45d5313035ffc2/comments", "author": {"login": "BillSeurer", "id": 8561221, "node_id": "MDQ6VXNlcjg1NjEyMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/8561221?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BillSeurer", "html_url": "https://github.com/BillSeurer", "followers_url": "https://api.github.com/users/BillSeurer/followers", "following_url": "https://api.github.com/users/BillSeurer/following{/other_user}", "gists_url": "https://api.github.com/users/BillSeurer/gists{/gist_id}", "starred_url": "https://api.github.com/users/BillSeurer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BillSeurer/subscriptions", "organizations_url": "https://api.github.com/users/BillSeurer/orgs", "repos_url": "https://api.github.com/users/BillSeurer/repos", "events_url": "https://api.github.com/users/BillSeurer/events{/privacy}", "received_events_url": "https://api.github.com/users/BillSeurer/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ddffba914b25228f477c726c564ee18078e0cb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ddffba914b25228f477c726c564ee18078e0cb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ddffba914b25228f477c726c564ee18078e0cb9"}], "stats": {"total": 243, "additions": 237, "deletions": 6}, "files": [{"sha": "c5cfea6bf9b7fb05c734e7dcd654051f37b98696", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a31a09adf52b63ab1e99d588a45d5313035ffc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a31a09adf52b63ab1e99d588a45d5313035ffc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a31a09adf52b63ab1e99d588a45d5313035ffc2", "patch": "@@ -1,3 +1,14 @@\n+2016-04-28  Bill Seurer  <seurer@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin.def (vec_adde): Change vec_adde to a\n+\tspecial case builtin.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Remove\n+\tALTIVEC_BUILTIN_VEC_ADDE.\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin): Add\n+\tsupport for ALTIVEC_BUILTIN_VEC_ADDE.\n+\t* config/rs6000/rs6000.c (altivec_init_builtins): Add definition\n+\tfor __builtin_vec_adde.\n+\n 2016-04-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.md (sse4_1_round<mode>2): Add avx512f alternative."}, {"sha": "930d778c941cbaaed90275c86eb8bb64c928051a", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a31a09adf52b63ab1e99d588a45d5313035ffc2/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a31a09adf52b63ab1e99d588a45d5313035ffc2/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=0a31a09adf52b63ab1e99d588a45d5313035ffc2", "patch": "@@ -951,7 +951,6 @@ BU_ALTIVEC_X (VEC_EXT_V4SF,\t\"vec_ext_v4sf\",     CONST)\n    before we get to the point about classifying the builtin type.  */\n \n /* 3 argument Altivec overloaded builtins.  */\n-BU_ALTIVEC_OVERLOAD_3 (ADDE,\t   \"adde\")\n BU_ALTIVEC_OVERLOAD_3 (ADDEC,\t   \"addec\")\n BU_ALTIVEC_OVERLOAD_3 (MADD,       \"madd\")\n BU_ALTIVEC_OVERLOAD_3 (MADDS,      \"madds\")\n@@ -1137,6 +1136,7 @@ BU_ALTIVEC_OVERLOAD_P (VCMPGT_P,   \"vcmpgt_p\")\n BU_ALTIVEC_OVERLOAD_P (VCMPGE_P,   \"vcmpge_p\")\n \n /* Overloaded Altivec builtins that are handled as special cases.  */\n+BU_ALTIVEC_OVERLOAD_X (ADDE,\t   \"adde\")\n BU_ALTIVEC_OVERLOAD_X (CTF,\t   \"ctf\")\n BU_ALTIVEC_OVERLOAD_X (CTS,\t   \"cts\")\n BU_ALTIVEC_OVERLOAD_X (CTU,\t   \"ctu\")"}, {"sha": "5d20e0356369175b89eab38e9f3a9e155ce061f7", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 59, "deletions": 5, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a31a09adf52b63ab1e99d588a45d5313035ffc2/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a31a09adf52b63ab1e99d588a45d5313035ffc2/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=0a31a09adf52b63ab1e99d588a45d5313035ffc2", "patch": "@@ -842,11 +842,6 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V1TI, 0 },\n   { ALTIVEC_BUILTIN_VEC_ADDC, P8V_BUILTIN_VADDCUQ,\n     RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_ADDE, P8V_BUILTIN_VADDEUQM,\n-    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI,\n-    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI },\n-  { ALTIVEC_BUILTIN_VEC_ADDE, P8V_BUILTIN_VADDEUQM,\n-    RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_V1TI },\n   { ALTIVEC_BUILTIN_VEC_ADDEC, P8V_BUILTIN_VADDECUQ,\n     RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI,\n     RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI },\n@@ -4515,6 +4510,65 @@ assignment for unaligned loads and stores\");\n     warning (OPT_Wdeprecated, \"vec_lvsr is deprecated for little endian; use \\\n assignment for unaligned loads and stores\");\n \n+  if (fcode == ALTIVEC_BUILTIN_VEC_ADDE)\n+    {\n+      /* vec_adde needs to be special cased because there is no instruction\n+\t  for the {un}signed int version.  */\n+      if (nargs != 3)\n+\t{\n+\t  error (\"vec_adde only accepts 3 arguments\");\n+\t  return error_mark_node;\n+\t}\n+\n+      tree arg0 = (*arglist)[0];\n+      tree arg0_type = TREE_TYPE (arg0);\n+      tree arg1 = (*arglist)[1];\n+      tree arg1_type = TREE_TYPE (arg1);\n+      tree arg2 = (*arglist)[2];\n+      tree arg2_type = TREE_TYPE (arg2);\n+\n+      /* All 3 arguments must be vectors of (signed or unsigned) (int or\n+\t  __int128) and the types must match.  */\n+      if ((arg0_type != arg1_type) || (arg1_type != arg2_type))\n+\tgoto bad; \n+      if (TREE_CODE (arg0_type) != VECTOR_TYPE)\n+\tgoto bad; \n+\n+      switch (TYPE_MODE (TREE_TYPE (arg0_type)))\n+\t{\n+\t  /* For {un}signed ints, \n+\t     vec_adde (va, vb, carryv) == vec_add (vec_add (va, vb), \n+\t\t\t\t\t\tvec_and (carryv, 0x1)).  */\n+\t  case SImode:\n+\t    {\n+\t      vec<tree, va_gc> *params = make_tree_vector();\n+\t      vec_safe_push (params, arg0);\n+\t      vec_safe_push (params, arg1);\n+\t      tree call = altivec_resolve_overloaded_builtin\n+\t\t (loc, rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_ADD], params);\n+\t      tree const1 = build_vector_from_val (arg0_type, \n+\t\t build_int_cstu(TREE_TYPE (arg0_type), 1));\n+\t      tree and_expr = fold_build2_loc (loc, BIT_AND_EXPR,\n+\t\t\t\targ0_type, arg2, const1);\n+\t      params = make_tree_vector();\n+\t      vec_safe_push (params, call);\n+\t      vec_safe_push (params, and_expr);\n+\t      return altivec_resolve_overloaded_builtin\n+\t\t (loc, rs6000_builtin_decls[ALTIVEC_BUILTIN_VEC_ADD], params);\n+\t    }\n+\t  /* For {un}signed __int128s use the vaddeuqm instruction\n+\t\tdirectly.  */\n+\t  case TImode:\n+\t    return altivec_resolve_overloaded_builtin\n+\t\t(loc, rs6000_builtin_decls[P8V_BUILTIN_VEC_VADDEUQM], arglist);\n+\n+\t  /* Types other than {un}signed int and {un}signed __int128\n+\t\tare errors.  */\n+\t  default:\n+\t    goto bad;\n+\t}\n+    }\n+\n   /* For now treat vec_splats and vec_promote as the same.  */\n   if (fcode == ALTIVEC_BUILTIN_VEC_SPLATS\n       || fcode == ALTIVEC_BUILTIN_VEC_PROMOTE)"}, {"sha": "0e6923483e0e6d6e2b3e9a780621e51968b95245", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a31a09adf52b63ab1e99d588a45d5313035ffc2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a31a09adf52b63ab1e99d588a45d5313035ffc2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0a31a09adf52b63ab1e99d588a45d5313035ffc2", "patch": "@@ -15690,6 +15690,10 @@ altivec_init_builtins (void)\n     = build_function_type_list (opaque_V4SI_type_node,\n \t\t\t\topaque_V4SI_type_node, opaque_V4SI_type_node,\n \t\t\t\tinteger_type_node, NULL_TREE);\n+  tree opaque_ftype_opaque_opaque_opaque\n+    = build_function_type_list (opaque_V4SI_type_node,\n+\t\t\t\topaque_V4SI_type_node, opaque_V4SI_type_node,\n+\t\t\t\topaque_V4SI_type_node, NULL_TREE);\n   tree int_ftype_int_opaque_opaque\n     = build_function_type_list (integer_type_node,\n                                 integer_type_node, opaque_V4SI_type_node,\n@@ -15926,6 +15930,9 @@ altivec_init_builtins (void)\n   def_builtin (\"__builtin_vec_cts\", opaque_ftype_opaque_int, ALTIVEC_BUILTIN_VEC_CTS);\n   def_builtin (\"__builtin_vec_ctu\", opaque_ftype_opaque_int, ALTIVEC_BUILTIN_VEC_CTU);\n \n+  def_builtin (\"__builtin_vec_adde\", opaque_ftype_opaque_opaque_opaque,\n+\t\tALTIVEC_BUILTIN_VEC_ADDE);\n+\n   /* Cell builtins.  */\n   def_builtin (\"__builtin_altivec_lvlx\",  v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVLX);\n   def_builtin (\"__builtin_altivec_lvlxl\", v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVLXL);"}, {"sha": "00616c895e1c25b3ded1151350a4b197b717fb40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a31a09adf52b63ab1e99d588a45d5313035ffc2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a31a09adf52b63ab1e99d588a45d5313035ffc2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a31a09adf52b63ab1e99d588a45d5313035ffc2", "patch": "@@ -1,3 +1,8 @@\n+2016-04-28  Bill Seurer  <seurer@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-adde.c: New test.\n+\t* gcc.target/powerpc/vec-adde-int128.c: New test.\n+\n 2016-04-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.target/i386/avx-vround-1.c: New test."}, {"sha": "f78622f11f2e226b0813e9270d1c14a5ca1c068c", "filename": "gcc/testsuite/gcc.target/powerpc/vec-adde-int128.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a31a09adf52b63ab1e99d588a45d5313035ffc2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-adde-int128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a31a09adf52b63ab1e99d588a45d5313035ffc2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-adde-int128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-adde-int128.c?ref=0a31a09adf52b63ab1e99d588a45d5313035ffc2", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run { target { powerpc64-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O3\" } */\n+\n+/* Test that the vec_adde builtin works as expected.  */\n+\n+#include \"altivec.h\"\n+\n+#define N 4096\n+\n+void abort ();\n+\n+#define define_test_functions(STYPE, NAMESUFFIX) \\\n+\\\n+STYPE result_##NAMESUFFIX[N]; \\\n+STYPE addend1_##NAMESUFFIX[N]; \\\n+STYPE addend2_##NAMESUFFIX[N]; \\\n+STYPE carry_##NAMESUFFIX[N]; \\\n+STYPE expected_##NAMESUFFIX[N]; \\\n+\\\n+__attribute__((noinline)) void vector_tests_##NAMESUFFIX () \\\n+{ \\\n+  int i; \\\n+  vector STYPE v1, v2, v3, tmp; \\\n+  for (i = 0; i < N; i+=16/sizeof(STYPE)) { \\\n+    /* result=addend1+addend2+(carry & 0x1) */ \\\n+    v1 = (vector STYPE) { addend1_##NAMESUFFIX[i] }; \\\n+    v2 = (vector STYPE) { addend2_##NAMESUFFIX[i] }; \\\n+    v3 = (vector STYPE) { carry_##NAMESUFFIX[i] }; \\\n+\\\n+    tmp = vec_adde (v1, v2, v3); \\\n+    result_##NAMESUFFIX[i] = tmp[0]; \\\n+  } \\\n+} \\\n+\\\n+__attribute__((noinline)) void init_##NAMESUFFIX () \\\n+{ \\\n+  int i; \\\n+  for (i = 0; i < N; ++i) { \\\n+    result_##NAMESUFFIX[i] = 0; \\\n+    addend1_##NAMESUFFIX[i] = 1; \\\n+    addend2_##NAMESUFFIX[i] = 2; \\\n+    carry_##NAMESUFFIX[i] = (i%12); \\\n+    expected_##NAMESUFFIX[i] = addend1_##NAMESUFFIX[i] + \\\n+\t\taddend2_##NAMESUFFIX[i] + (carry_##NAMESUFFIX[i] & 0x1); \\\n+  } \\\n+} \\\n+\\\n+__attribute__((noinline)) void verify_results_##NAMESUFFIX () \\\n+{ \\\n+  for (int i = 0; i < N; ++i) { \\\n+    if (result_##NAMESUFFIX[i] != expected_##NAMESUFFIX[i]) \\\n+      abort(); \\\n+  } \\\n+}\n+\n+\n+#define execute_test_functions(STYPE, NAMESUFFIX) \\\n+{ \\\n+  init_##NAMESUFFIX (); \\\n+  vector_tests_##NAMESUFFIX (); \\\n+  verify_results_##NAMESUFFIX (); \\\n+}\n+\n+\n+define_test_functions(signed __int128, si128);\n+define_test_functions(unsigned __int128, ui128);\n+\n+int main ()\n+{\n+  execute_test_functions(signed __int128, si128);\n+  execute_test_functions(unsigned __int128, ui128);\n+\n+  return 0;\n+}\n+\n+"}, {"sha": "b7d5b44b7a771e1ee2f95e2ebec69ef835bce9c8", "filename": "gcc/testsuite/gcc.target/powerpc/vec-adde.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a31a09adf52b63ab1e99d588a45d5313035ffc2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-adde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a31a09adf52b63ab1e99d588a45d5313035ffc2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-adde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-adde.c?ref=0a31a09adf52b63ab1e99d588a45d5313035ffc2", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run { target { powerpc64-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O3\" } */\n+\n+/* Test that the vec_adde builtin works as expected.  */\n+\n+#include \"altivec.h\"\n+\n+#define N 4096\n+\n+void abort ();\n+\n+#define define_test_functions(STYPE, NAMESUFFIX) \\\n+\\\n+STYPE result_##NAMESUFFIX[N]; \\\n+STYPE addend1_##NAMESUFFIX[N]; \\\n+STYPE addend2_##NAMESUFFIX[N]; \\\n+STYPE carry_##NAMESUFFIX[N]; \\\n+STYPE expected_##NAMESUFFIX[N]; \\\n+\\\n+__attribute__((noinline)) void vector_tests_##NAMESUFFIX () \\\n+{ \\\n+  int i; \\\n+  vector STYPE v1, v2, v3, tmp; \\\n+  for (i = 0; i < N; i+=16/sizeof(STYPE)) { \\\n+    /* result=addend1+addend2+(carry & 0x1) */ \\\n+    v1 = vec_vsx_ld (0, &addend1_##NAMESUFFIX[i]); \\\n+    v2 = vec_vsx_ld (0, &addend2_##NAMESUFFIX[i]); \\\n+    v3 = vec_vsx_ld (0, &carry_##NAMESUFFIX[i]); \\\n+\\\n+    tmp = vec_adde (v1, v2, v3); \\\n+    vec_vsx_st (tmp, 0, &result_##NAMESUFFIX[i]); \\\n+  } \\\n+} \\\n+\\\n+__attribute__((noinline)) void init_##NAMESUFFIX () \\\n+{ \\\n+  int i; \\\n+  for (i = 0; i < N; ++i) { \\\n+    result_##NAMESUFFIX[i] = 0; \\\n+    addend1_##NAMESUFFIX[i] = 1; \\\n+    addend2_##NAMESUFFIX[i] = 2; \\\n+    carry_##NAMESUFFIX[i] = (i%12); \\\n+    expected_##NAMESUFFIX[i] = addend1_##NAMESUFFIX[i] + \\\n+\t\taddend2_##NAMESUFFIX[i] + (carry_##NAMESUFFIX[i] & 0x1); \\\n+  } \\\n+} \\\n+\\\n+__attribute__((noinline)) void verify_results_##NAMESUFFIX () \\\n+{ \\\n+  for (int i = 0; i < N; ++i) { \\\n+    if (result_##NAMESUFFIX[i] != expected_##NAMESUFFIX[i]) \\\n+      abort(); \\\n+  } \\\n+}\n+\n+\n+#define execute_test_functions(STYPE, NAMESUFFIX) \\\n+{ \\\n+  init_##NAMESUFFIX (); \\\n+  vector_tests_##NAMESUFFIX (); \\\n+  verify_results_##NAMESUFFIX (); \\\n+}\n+\n+\n+define_test_functions(signed int, si);\n+define_test_functions(unsigned int, ui);\n+\n+int main ()\n+{\n+  execute_test_functions(signed int, si);\n+  execute_test_functions(unsigned int, ui);\n+\n+  return 0;\n+}\n+\n+"}]}