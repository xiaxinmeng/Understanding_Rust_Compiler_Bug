{"sha": "bb6b3973cc5738eab821d4fd8a61d14266d8a503", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI2YjM5NzNjYzU3MzhlYWI4MjFkNGZkOGE2MWQxNDI2NmQ4YTUwMw==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2015-09-17T07:54:07Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2015-09-17T07:54:07Z"}, "message": "Fix LRA regressions on 64-bit SPARC.\n\ngcc/\n\t* config/sparc/sparc-protos.h (sparc_secondary_memory_needed):\n\tDeclare.\n\t* config/sparc/sparc.c (sparc_secondary_memory_needed): New\n\tfunction.\n\t* config/sparc/sparc.h (SECONDARY_MEMORY_NEEDED): Use it.\n\t(HARD_REGNO_CALLER_SAVE_MODE): Define.\n\t* config/sparc/sparc.md (sethi_di_medlow, losum_di_medlow, seth44)\n\t(setm44, setl44, sethh, setlm, sethm, setlo, embmedany_sethi)\n\t(embmedany_losum, embmedany_brsum, embmedany_textuhi)\n\t(embmedany_texthi, embmedany_textulo, embmedany_textlo): Do not\n\tprovide when flag_pic.\n\nFrom-SVN: r227847", "tree": {"sha": "62b6211ecb209431b31681e6cf383e38e7b7a0d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62b6211ecb209431b31681e6cf383e38e7b7a0d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb6b3973cc5738eab821d4fd8a61d14266d8a503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6b3973cc5738eab821d4fd8a61d14266d8a503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb6b3973cc5738eab821d4fd8a61d14266d8a503", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6b3973cc5738eab821d4fd8a61d14266d8a503/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5415a9ebcc06c18bda279c284d98e9b8ff8af22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5415a9ebcc06c18bda279c284d98e9b8ff8af22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5415a9ebcc06c18bda279c284d98e9b8ff8af22"}], "stats": {"total": 82, "additions": 61, "deletions": 21}, "files": [{"sha": "42faf2ed5426be78edd025bda290e4d392e0dc1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6b3973cc5738eab821d4fd8a61d14266d8a503/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6b3973cc5738eab821d4fd8a61d14266d8a503/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb6b3973cc5738eab821d4fd8a61d14266d8a503", "patch": "@@ -1,3 +1,17 @@\n+2015-09-17  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sparc-protos.h (sparc_secondary_memory_needed):\n+\tDeclare.\n+\t* config/sparc/sparc.c (sparc_secondary_memory_needed): New\n+\tfunction.\n+\t* config/sparc/sparc.h (SECONDARY_MEMORY_NEEDED): Use it.\n+\t(HARD_REGNO_CALLER_SAVE_MODE): Define.\n+\t* config/sparc/sparc.md (sethi_di_medlow, losum_di_medlow, seth44)\n+\t(setm44, setl44, sethh, setlm, sethm, setlo, embmedany_sethi)\n+\t(embmedany_losum, embmedany_brsum, embmedany_textuhi)\n+\t(embmedany_texthi, embmedany_textulo, embmedany_textlo): Do not\n+\tprovide when flag_pic.\n+\n 2015-09-17  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.c (label_ref_list_d_pool): Adjust to"}, {"sha": "18192fd2e8d38d3fe5e86e4192e65ba0c9d36612", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6b3973cc5738eab821d4fd8a61d14266d8a503/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6b3973cc5738eab821d4fd8a61d14266d8a503/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=bb6b3973cc5738eab821d4fd8a61d14266d8a503", "patch": "@@ -62,6 +62,8 @@ extern bool constant_address_p (rtx);\n extern bool legitimate_pic_operand_p (rtx);\n extern rtx sparc_legitimize_reload_address (rtx, machine_mode, int, int,\n \t\t\t\t\t    int, int *win);\n+extern bool sparc_secondary_memory_needed (enum reg_class, enum reg_class,\n+\t\t\t\t\t   machine_mode);\n extern void load_got_register (void);\n extern void sparc_emit_call_insn (rtx, rtx);\n extern void sparc_defer_case_vector (rtx, rtx, int);"}, {"sha": "f4ad68d8c2032c974db2372aa2ad0abbe6e602c5", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6b3973cc5738eab821d4fd8a61d14266d8a503/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6b3973cc5738eab821d4fd8a61d14266d8a503/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=bb6b3973cc5738eab821d4fd8a61d14266d8a503", "patch": "@@ -12283,6 +12283,26 @@ sparc_expand_vector_init (rtx target, rtx vals)\n   emit_move_insn (target, mem);\n }\n \n+bool sparc_secondary_memory_needed (enum reg_class class1, enum reg_class class2,\n+\t\t\t\t    machine_mode mode)\n+{\n+  if (FP_REG_CLASS_P (class1) != FP_REG_CLASS_P (class2))\n+    {\n+      if (! TARGET_VIS3\n+\t  || GET_MODE_SIZE (mode) > 8\n+\t  || GET_MODE_SIZE (mode) < 4)\n+\treturn true;\n+      return false;\n+    }\n+\n+  if (GET_MODE_SIZE (mode) == 4\n+      && ((class1 == FP_REGS && class2 == EXTRA_FP_REGS)\n+\t  || (class1 == EXTRA_FP_REGS && class2 == FP_REGS)))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Implement TARGET_SECONDARY_RELOAD.  */\n \n static reg_class_t"}, {"sha": "1f26232d280fa9d6f58d242212b073f7ebf997dd", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6b3973cc5738eab821d4fd8a61d14266d8a503/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6b3973cc5738eab821d4fd8a61d14266d8a503/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=bb6b3973cc5738eab821d4fd8a61d14266d8a503", "patch": "@@ -747,6 +747,12 @@ extern int sparc_mode_class[];\n    register window instruction in the prologue.  */\n #define HARD_REGNO_RENAME_OK(FROM, TO) ((FROM) != 1)\n \n+/* Select a register mode required for caller save of hard regno REGNO.  */\n+#define HARD_REGNO_CALLER_SAVE_MODE(REGNO, NREGS, MODE) \\\n+    (((MODE) == VOIDmode) ? \\\n+     choose_hard_reg_mode ((REGNO), (NREGS), false) : \\\n+     (MODE))\n+\n #define MODES_TIEABLE_P(MODE1, MODE2) sparc_modes_tieable_p (MODE1, MODE2)\n \n /* Specify the registers used for certain standard purposes.\n@@ -1044,12 +1050,10 @@ extern char leaf_reg_remap[];\n   (SPARC_SETHI_P ((unsigned HOST_WIDE_INT) (X) & GET_MODE_MASK (SImode)))\n \n /* On SPARC when not VIS3 it is not possible to directly move data\n-   between GENERAL_REGS and FP_REGS.  */\n+   between GENERAL_REGS and FP_REGS.  We also cannot move 4-byte values\n+   between FP_REGS and EXTRA_FP_REGS.  */\n #define SECONDARY_MEMORY_NEEDED(CLASS1, CLASS2, MODE) \\\n-  ((FP_REG_CLASS_P (CLASS1) != FP_REG_CLASS_P (CLASS2)) \\\n-   && (! TARGET_VIS3 \\\n-       || GET_MODE_SIZE (MODE) > 8 \\\n-       || GET_MODE_SIZE (MODE) < 4))\n+  sparc_secondary_memory_needed (CLASS1, CLASS2, MODE)\n \n /* Get_secondary_mem widens its argument to BITS_PER_WORD which loses on v9\n    because the movsi and movsf patterns don't handle r/f moves."}, {"sha": "e6a18313b1b874a11c79e37ae68bd43b5b8e2ba3", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6b3973cc5738eab821d4fd8a61d14266d8a503/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6b3973cc5738eab821d4fd8a61d14266d8a503/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=bb6b3973cc5738eab821d4fd8a61d14266d8a503", "patch": "@@ -1745,105 +1745,105 @@\n (define_insn \"*sethi_di_medlow\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (match_operand:DI 1 \"symbolic_operand\" \"\")))]\n-  \"TARGET_CM_MEDLOW && check_pic (1)\"\n+  \"TARGET_CM_MEDLOW && !flag_pic\"\n   \"sethi\\t%%hi(%a1), %0\")\n \n (define_insn \"*losum_di_medlow\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (match_operand:DI 2 \"symbolic_operand\" \"\")))]\n-  \"TARGET_CM_MEDLOW\"\n+  \"TARGET_CM_MEDLOW && !flag_pic\"\n   \"or\\t%1, %%lo(%a2), %0\")\n \n (define_insn \"seth44\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")] UNSPEC_SETH44)))]\n-  \"TARGET_CM_MEDMID\"\n+  \"TARGET_CM_MEDMID && !flag_pic\"\n   \"sethi\\t%%h44(%a1), %0\")\n \n (define_insn \"setm44\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (unspec:DI [(match_operand:DI 2 \"symbolic_operand\" \"\")] UNSPEC_SETM44)))]\n-  \"TARGET_CM_MEDMID\"\n+  \"TARGET_CM_MEDMID && !flag_pic\"\n   \"or\\t%1, %%m44(%a2), %0\")\n \n (define_insn \"setl44\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (match_operand:DI 2 \"symbolic_operand\" \"\")))]\n-  \"TARGET_CM_MEDMID\"\n+  \"TARGET_CM_MEDMID && !flag_pic\"\n   \"or\\t%1, %%l44(%a2), %0\")\n \n (define_insn \"sethh\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")] UNSPEC_SETHH)))]\n-  \"TARGET_CM_MEDANY\"\n+  \"TARGET_CM_MEDANY && !flag_pic\"\n   \"sethi\\t%%hh(%a1), %0\")\n \n (define_insn \"setlm\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")] UNSPEC_SETLM)))]\n-  \"TARGET_CM_MEDANY\"\n+  \"TARGET_CM_MEDANY && !flag_pic\"\n   \"sethi\\t%%lm(%a1), %0\")\n \n (define_insn \"sethm\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (unspec:DI [(match_operand:DI 2 \"symbolic_operand\" \"\")] UNSPEC_EMB_SETHM)))]\n-  \"TARGET_CM_MEDANY\"\n+  \"TARGET_CM_MEDANY && !flag_pic\"\n   \"or\\t%1, %%hm(%a2), %0\")\n \n (define_insn \"setlo\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (match_operand:DI 2 \"symbolic_operand\" \"\")))]\n-  \"TARGET_CM_MEDANY\"\n+  \"TARGET_CM_MEDANY && !flag_pic\"\n   \"or\\t%1, %%lo(%a2), %0\")\n \n (define_insn \"embmedany_sethi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (unspec:DI [(match_operand:DI 1 \"data_segment_operand\" \"\")] UNSPEC_EMB_HISUM)))]\n-  \"TARGET_CM_EMBMEDANY && check_pic (1)\"\n+  \"TARGET_CM_EMBMEDANY && !flag_pic\"\n   \"sethi\\t%%hi(%a1), %0\")\n \n (define_insn \"embmedany_losum\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (match_operand:DI 2 \"data_segment_operand\" \"\")))]\n-  \"TARGET_CM_EMBMEDANY\"\n+  \"TARGET_CM_EMBMEDANY && !flag_pic\"\n   \"add\\t%1, %%lo(%a2), %0\")\n \n (define_insn \"embmedany_brsum\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")] UNSPEC_EMB_HISUM))]\n-  \"TARGET_CM_EMBMEDANY\"\n+  \"TARGET_CM_EMBMEDANY && !flag_pic\"\n   \"add\\t%1, %_, %0\")\n \n (define_insn \"embmedany_textuhi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (unspec:DI [(match_operand:DI 1 \"text_segment_operand\" \"\")] UNSPEC_EMB_TEXTUHI)))]\n-  \"TARGET_CM_EMBMEDANY && check_pic (1)\"\n+  \"TARGET_CM_EMBMEDANY && !flag_pic\"\n   \"sethi\\t%%uhi(%a1), %0\")\n \n (define_insn \"embmedany_texthi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (unspec:DI [(match_operand:DI 1 \"text_segment_operand\" \"\")] UNSPEC_EMB_TEXTHI)))]\n-  \"TARGET_CM_EMBMEDANY && check_pic (1)\"\n+  \"TARGET_CM_EMBMEDANY && !flag_pic\"\n   \"sethi\\t%%hi(%a1), %0\")\n \n (define_insn \"embmedany_textulo\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (unspec:DI [(match_operand:DI 2 \"text_segment_operand\" \"\")] UNSPEC_EMB_TEXTULO)))]\n-  \"TARGET_CM_EMBMEDANY\"\n+  \"TARGET_CM_EMBMEDANY && !flag_pic\"\n   \"or\\t%1, %%ulo(%a2), %0\")\n \n (define_insn \"embmedany_textlo\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (match_operand:DI 2 \"text_segment_operand\" \"\")))]\n-  \"TARGET_CM_EMBMEDANY\"\n+  \"TARGET_CM_EMBMEDANY && !flag_pic\"\n   \"or\\t%1, %%lo(%a2), %0\")\n \n ;; Now some patterns to help reload out a bit."}]}