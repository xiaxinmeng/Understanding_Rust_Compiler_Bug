{"sha": "833229510cb13aa643a6005f60882daec616e2b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMzMjI5NTEwY2IxM2FhNjQzYTYwMDVmNjA4ODJkYWVjNjE2ZTJiNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-04-24T16:18:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-04-24T16:18:46Z"}, "message": "c-common.h (check_builtin_function_arguments): Declare.\n\n2008-04-24  Richard Guenther  <rguenther@suse.de>\n\n\t* c-common.h (check_builtin_function_arguments): Declare.\n\t* c-common.c (validate_nargs): New function.\n\t(check_builtin_function_arguments): Likewise.\n\t* c-typeck.c (build_function_call): Call\n\tcheck_builtin_function_arguments.\n\t* builtins.c (fold_builtin_classify): Remove error reporting code.\n\t(fold_builtin_unordered_cmp): Likewise.\n\t(fold_builtin_1): Likewise.\n\t(fold_builtin_n): Likewise.\n\n\tcp/\n\t* typeck.c (cp_build_function_call): Call\n\tcheck_builtin_function_arguments.\n\n\t* gcc.dg/builtin-constant_p-1.c: New testcase.\n\t* gcc.dg/builtin-errors.c: Adjust expected error.\n\nFrom-SVN: r134635", "tree": {"sha": "35dd8b11788bce7a6dab65c4d291872b84068f45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35dd8b11788bce7a6dab65c4d291872b84068f45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/833229510cb13aa643a6005f60882daec616e2b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833229510cb13aa643a6005f60882daec616e2b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833229510cb13aa643a6005f60882daec616e2b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833229510cb13aa643a6005f60882daec616e2b7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "194ac52ab4a35f22abafaec46ac22ac303a61ab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/194ac52ab4a35f22abafaec46ac22ac303a61ab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/194ac52ab4a35f22abafaec46ac22ac303a61ab8"}], "stats": {"total": 198, "additions": 128, "deletions": 70}, "files": [{"sha": "c7b850aa4ac82606810385d8026d1ae1bee90df2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833229510cb13aa643a6005f60882daec616e2b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833229510cb13aa643a6005f60882daec616e2b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=833229510cb13aa643a6005f60882daec616e2b7", "patch": "@@ -1,3 +1,15 @@\n+2008-04-24  Richard Guenther  <rguenther@suse.de>\n+\n+\t* c-common.h (check_builtin_function_arguments): Declare.\n+\t* c-common.c (validate_nargs): New function.\n+\t(check_builtin_function_arguments): Likewise.\n+\t* c-typeck.c (build_function_call): Call\n+\tcheck_builtin_function_arguments.\n+\t* builtins.c (fold_builtin_classify): Remove error reporting code.\n+\t(fold_builtin_unordered_cmp): Likewise.\n+\t(fold_builtin_1): Likewise.\n+\t(fold_builtin_n): Likewise.\n+\n 2008-04-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/36008"}, {"sha": "54cbde53e0e8cc231fa11651bb792ac472609c24", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 67, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=833229510cb13aa643a6005f60882daec616e2b7", "patch": "@@ -9645,11 +9645,7 @@ fold_builtin_classify (tree fndecl, tree arg, int builtin_index)\n   REAL_VALUE_TYPE r;\n \n   if (!validate_arg (arg, REAL_TYPE))\n-    {\n-      error (\"non-floating-point argument to function %qs\",\n-\t     IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n-      return error_mark_node;\n-    }\n+    return NULL_TREE;\n \n   switch (builtin_index)\n     {\n@@ -9733,12 +9729,6 @@ fold_builtin_unordered_cmp (tree fndecl, tree arg0, tree arg1,\n     cmp_type = type0;\n   else if (code0 == INTEGER_TYPE && code1 == REAL_TYPE)\n     cmp_type = type1;\n-  else\n-    {\n-      error (\"non-floating-point argument to function %qs\",\n-\t\t IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n-      return error_mark_node;\n-    }\n \n   arg0 = fold_convert (cmp_type, arg0);\n   arg1 = fold_convert (cmp_type, arg1);\n@@ -10087,15 +10077,6 @@ fold_builtin_1 (tree fndecl, tree arg0, bool ignore)\n     case BUILT_IN_ISNAND128:\n       return fold_builtin_classify (fndecl, arg0, BUILT_IN_ISNAN);\n \n-    case BUILT_IN_ISNORMAL:\n-      if (!validate_arg (arg0, REAL_TYPE))\n-\t{\n-\t  error (\"non-floating-point argument to function %qs\",\n-\t\t IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n-\t  return error_mark_node;\n-\t}\n-      break;\n-\n     case BUILT_IN_PRINTF:\n     case BUILT_IN_PRINTF_UNLOCKED:\n     case BUILT_IN_VPRINTF:\n@@ -10441,55 +10422,8 @@ fold_builtin_4 (tree fndecl, tree arg0, tree arg1, tree arg2, tree arg3,\n static tree\n fold_builtin_n (tree fndecl, tree *args, int nargs, bool ignore)\n {\n-  enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n   tree ret = NULL_TREE;\n \n-  /* Verify the number of arguments for type-generic and thus variadic\n-     builtins.  */\n-  switch (fcode)\n-    {\n-    case BUILT_IN_ISFINITE:\n-    case BUILT_IN_ISINF:\n-    case BUILT_IN_ISNAN:\n-    case BUILT_IN_ISNORMAL:\n-      if (nargs < 1)\n-\t{\n-\t  error (\"too few arguments to function %qs\",\n-\t\t IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n-\t  return error_mark_node;\n-\t}\n-      else if (nargs > 1)\n-\t{\n-\t  error (\"too many arguments to function %qs\",\n-\t\t IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n-\t  return error_mark_node;\n-\t}\n-      break;\n-\n-    case BUILT_IN_ISGREATER:\n-    case BUILT_IN_ISGREATEREQUAL:\n-    case BUILT_IN_ISLESS:\n-    case BUILT_IN_ISLESSEQUAL:\n-    case BUILT_IN_ISLESSGREATER:\n-    case BUILT_IN_ISUNORDERED:\n-      if (nargs < 2)\n-\t{\n-\t  error (\"too few arguments to function %qs\",\n-\t\t IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n-\t  return error_mark_node;\n-\t}\n-      else if (nargs > 2)\n-\t{\n-\t  error (\"too many arguments to function %qs\",\n-\t\t IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n-\t  return error_mark_node;\n-\t}\n-      break;\n-\n-    default:\n-      break;\n-    }\n-\n   switch (nargs)\n     {\n     case 0:"}, {"sha": "36e1c3d34421e0f6342386baa70e5a3fc6643965", "filename": "gcc/c-common.c", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=833229510cb13aa643a6005f60882daec616e2b7", "patch": "@@ -6631,6 +6631,85 @@ check_function_arguments_recurse (void (*callback)\n   (*callback) (ctx, param, param_num);\n }\n \n+/* Checks the number of arguments NARGS against the required number\n+   REQUIRED and issues an error if there is a mismatch.  Returns true\n+   if the number of arguments is correct, otherwise false.  */\n+\n+static bool\n+validate_nargs (tree fndecl, int nargs, int required)\n+{\n+  if (nargs < required)\n+    {\n+      error (\"not enough arguments to function %qE\", fndecl);\n+      return false;\n+    }\n+  else if (nargs > required)\n+    {\n+      error (\"too many arguments to function %qE\", fndecl);\n+      return false;\n+    }\n+  return true;\n+}\n+\n+/* Verifies the NARGS arguments ARGS to the builtin function FNDECL.\n+   Returns false if there was an error, otherwise true.  */\n+\n+bool\n+check_builtin_function_arguments (tree fndecl, int nargs, tree *args)\n+{\n+  if (!DECL_BUILT_IN (fndecl)\n+      || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)\n+    return true;\n+\n+  switch (DECL_FUNCTION_CODE (fndecl))\n+    {\n+    case BUILT_IN_CONSTANT_P:\n+      return validate_nargs (fndecl, nargs, 1);\n+\n+    case BUILT_IN_ISFINITE:\n+    case BUILT_IN_ISINF:\n+    case BUILT_IN_ISNAN:\n+    case BUILT_IN_ISNORMAL:\n+      if (validate_nargs (fndecl, nargs, 1))\n+\t{\n+\t  if (TREE_CODE (TREE_TYPE (args[0])) != REAL_TYPE)\n+\t    {\n+\t      error (\"non-floating-point argument in call to \"\n+\t\t     \"function %qE\", fndecl);\n+\t      return false;\n+\t    }\n+\t  return true;\n+\t}\n+      return false;\n+\n+    case BUILT_IN_ISGREATER:\n+    case BUILT_IN_ISGREATEREQUAL:\n+    case BUILT_IN_ISLESS:\n+    case BUILT_IN_ISLESSEQUAL:\n+    case BUILT_IN_ISLESSGREATER:\n+    case BUILT_IN_ISUNORDERED:\n+      if (validate_nargs (fndecl, nargs, 2))\n+\t{\n+\t  enum tree_code code0, code1;\n+\t  code0 = TREE_CODE (TREE_TYPE (args[0]));\n+\t  code1 = TREE_CODE (TREE_TYPE (args[1]));\n+\t  if (!((code0 == REAL_TYPE && code1 == REAL_TYPE)\n+\t\t|| (code0 == REAL_TYPE && code1 == INTEGER_TYPE)\n+\t\t|| (code0 == INTEGER_TYPE && code1 == REAL_TYPE)))\n+\t    {\n+\t      error (\"non-floating-point arguments in call to \"\n+\t\t     \"function %qE\", fndecl);\n+\t      return false;\n+\t    }\n+\t  return true;\n+\t}\n+      return false;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n /* Function to help qsort sort FIELD_DECLs by name order.  */\n \n int"}, {"sha": "c403bee634392547d6058a799d3ea96abaea1cb1", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=833229510cb13aa643a6005f60882daec616e2b7", "patch": "@@ -666,6 +666,7 @@ extern void check_function_arguments_recurse (void (*)\n \t\t\t\t\t       unsigned HOST_WIDE_INT),\n \t\t\t\t\t      void *, tree,\n \t\t\t\t\t      unsigned HOST_WIDE_INT);\n+extern bool check_builtin_function_arguments (tree, int, tree *);\n extern void check_function_format (tree, int, tree *);\n extern void set_Wformat (int);\n extern tree handle_format_attribute (tree *, tree, tree, int, bool *);"}, {"sha": "2f8428210d708a7c81baee24bbd9e16d2cd446bb", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=833229510cb13aa643a6005f60882daec616e2b7", "patch": "@@ -2443,8 +2443,14 @@ build_function_call (tree function, tree params)\n   if (nargs < 0)\n     return error_mark_node;\n \n-  /* Check that the arguments to the function are valid.  */\n+  /* Check that arguments to builtin functions match the expectations.  */\n+  if (fundecl\n+      && DECL_BUILT_IN (fundecl)\n+      && DECL_BUILT_IN_CLASS (fundecl) == BUILT_IN_NORMAL\n+      && !check_builtin_function_arguments (fundecl, nargs, argarray))\n+    return error_mark_node;\n \n+  /* Check that the arguments to the function are valid.  */\n   check_function_arguments (TYPE_ATTRIBUTES (fntype), nargs, argarray,\n \t\t\t    TYPE_ARG_TYPES (fntype));\n "}, {"sha": "cb7e4226dce2503a5ab1186c9313e01098a2aa42", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=833229510cb13aa643a6005f60882daec616e2b7", "patch": "@@ -1,3 +1,8 @@\n+2008-04-24  Richard Guenther  <rguenther@suse.de>\n+\n+\t* typeck.c (cp_build_function_call): Call\n+\tcheck_builtin_function_arguments.\n+\n 2008-04-23  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* typeck.c (get_member_function_from_ptrfunc): Don't set TREE_INVARIANT."}, {"sha": "cd733bfe326d12fc71b85032d69ac8c3d7eb6504", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=833229510cb13aa643a6005f60882daec616e2b7", "patch": "@@ -2889,9 +2889,15 @@ cp_build_function_call (tree function, tree params, tsubst_flags_t complain)\n   if (nargs < 0)\n     return error_mark_node;\n \n+  /* Check that arguments to builtin functions match the expectations.  */\n+  if (fndecl\n+      && DECL_BUILT_IN (fndecl)\n+      && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n+      && !check_builtin_function_arguments (fndecl, nargs, argarray))\n+    return error_mark_node;\n+\n   /* Check for errors in format strings and inappropriately\n      null parameters.  */\n-\n   check_function_arguments (TYPE_ATTRIBUTES (fntype), nargs, argarray,\n \t\t\t    parm_types);\n "}, {"sha": "c747fc1a631341a1f898e7c92bdf42fd530c4819", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=833229510cb13aa643a6005f60882daec616e2b7", "patch": "@@ -1,3 +1,8 @@\n+2008-04-24  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/builtin-constant_p-1.c: New testcase.\n+\t* gcc.dg/builtin-errors.c: Adjust expected error.\n+\n 2008-04-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/36008"}, {"sha": "b0b34f4a1e170a185c62168d9575329bddc9c498", "filename": "gcc/testsuite/gcc.dg/builtin-constant_p-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-constant_p-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-constant_p-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-constant_p-1.c?ref=833229510cb13aa643a6005f60882daec616e2b7", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+\n+int main()\n+{\n+  if (__builtin_constant_p ()) /* { dg-error \"not enough\" } */\n+    return 0;\n+  if (__builtin_constant_p (5, 6)) /* { dg-error \"too many\" } */\n+    return 1;\n+  return 0;\n+}"}, {"sha": "9f401bba1a02ca377083157a3eb58de950226028", "filename": "gcc/testsuite/gcc.dg/builtins-error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833229510cb13aa643a6005f60882daec616e2b7/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-error.c?ref=833229510cb13aa643a6005f60882daec616e2b7", "patch": "@@ -9,7 +9,7 @@ int test1(struct X x)\n \n int test2(double x)\n {\n-  return __builtin_isgreater(x); /* { dg-error \"too few arguments\" } */\n+  return __builtin_isgreater(x); /* { dg-error \"not enough arguments\" } */\n }\n \n int test3(double x)"}]}