{"sha": "53ef4e3a942fc5848690dbf36e67c8c68f7fbae4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNlZjRlM2E5NDJmYzU4NDg2OTBkYmYzNmU2N2M4YzY4ZjdmYmFlNA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-01-08T17:40:18Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-01-08T17:40:18Z"}, "message": "x86: Don't generate vzeroupper if caller passes AVX/AVX512 registers\n\nThere is no need to generate vzeroupper if caller passes arguments in\nAVX/AVX512 registers.\n\nTested on i686 and x86-64 with and without --with-arch=native.\n\ngcc/\n\n\tPR target/88717\n\t* config/i386/i386.c (ix86_avx_u128_mode_exit): Call\n\tix86_avx_u128_mode_entry.\n\ngcc/testsuite/\n\n\tPR target/88717\n\t* gcc.target/i386/pr88717.c: New test.\n\nFrom-SVN: r267732", "tree": {"sha": "b75eaa394782bb9221e5084e081b6ccc59507845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b75eaa394782bb9221e5084e081b6ccc59507845"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53ef4e3a942fc5848690dbf36e67c8c68f7fbae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ef4e3a942fc5848690dbf36e67c8c68f7fbae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53ef4e3a942fc5848690dbf36e67c8c68f7fbae4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ef4e3a942fc5848690dbf36e67c8c68f7fbae4/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e01ffb47c6fec6d52f254390bf863b4ca0fa32e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e01ffb47c6fec6d52f254390bf863b4ca0fa32e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e01ffb47c6fec6d52f254390bf863b4ca0fa32e2"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "7b4f6e5270b2603eae870d303bb6a2c56eb1edcd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ef4e3a942fc5848690dbf36e67c8c68f7fbae4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ef4e3a942fc5848690dbf36e67c8c68f7fbae4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53ef4e3a942fc5848690dbf36e67c8c68f7fbae4", "patch": "@@ -1,3 +1,9 @@\n+2019-01-08  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/88717\n+\t* config/i386/i386.c (ix86_avx_u128_mode_exit): Call\n+\tix86_avx_u128_mode_entry.\n+\n 2019-01-08  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/88753"}, {"sha": "bd48e080f465f6b0a97cab2d20110dd3f3c01b5a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ef4e3a942fc5848690dbf36e67c8c68f7fbae4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ef4e3a942fc5848690dbf36e67c8c68f7fbae4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=53ef4e3a942fc5848690dbf36e67c8c68f7fbae4", "patch": "@@ -19137,7 +19137,10 @@ ix86_avx_u128_mode_exit (void)\n   if (reg && ix86_check_avx_upper_register (reg))\n     return AVX_U128_DIRTY;\n \n-  return AVX_U128_CLEAN;\n+  /* Exit mode is set to AVX_U128_DIRTY if there are 256bit or 512bit\n+     modes used in function arguments, otherwise return AVX_U128_CLEAN.\n+   */\n+  return ix86_avx_u128_mode_entry ();\n }\n \n /* Return a mode that ENTITY is assumed to be"}, {"sha": "28439297735b9221fa94b9885ffd0f7b7dfb4f1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ef4e3a942fc5848690dbf36e67c8c68f7fbae4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ef4e3a942fc5848690dbf36e67c8c68f7fbae4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53ef4e3a942fc5848690dbf36e67c8c68f7fbae4", "patch": "@@ -1,3 +1,8 @@\n+2019-01-08  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/88717\n+\t* gcc.target/i386/pr88717.c: New test.\n+\n 2019-01-08  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88548 - this accepted in static member functions."}, {"sha": "01680998f1b0932a7ee38298350a99c1e1ffb290", "filename": "gcc/testsuite/gcc.target/i386/pr88717.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ef4e3a942fc5848690dbf36e67c8c68f7fbae4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88717.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ef4e3a942fc5848690dbf36e67c8c68f7fbae4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88717.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88717.c?ref=53ef4e3a942fc5848690dbf36e67c8c68f7fbae4", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mvzeroupper\" } */\n+\n+#include <immintrin.h>\n+\n+__m128\n+foo1 (__m256 x)\n+{\n+  return _mm256_castps256_ps128 (x);\n+}\n+\n+void\n+foo2 (float *p, __m256 x)\n+{\n+  *p = ((__v8sf)x)[0];\n+}\n+\n+void\n+foo3 (float *p, __m512 x)\n+{\n+  *p = ((__v16sf)x)[0];\n+}\n+\n+/* { dg-final { scan-assembler-not \"vzeroupper\" } } */"}]}