{"sha": "8e7f98dff6b98e4029637d6376a51b6d43116f04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU3Zjk4ZGZmNmI5OGU0MDI5NjM3ZDYzNzZhNTFiNmQ0MzExNmYwNA==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2018-02-16T17:35:13Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2018-02-16T17:35:13Z"}, "message": "altivec.h: Remove vec_vextract4b and vec_vinsert4b.\n\ngcc/ChangeLog:\n\n2018-02-16  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/altivec.h: Remove vec_vextract4b and vec_vinsert4b.\n\t* config/rs6000/rs6000-builtin.def: Remove macro expansion for\n\tVEXTRACT4B, VINSERT4B, VINSERT4B_DI and VEXTRACT4B.\n\t* config/rs6000/rs6000.c: Remove case statements for\n\tP9V_BUILTIN_VEXTRACT4B, P9V_BUILTIN_VEC_VEXTRACT4B,\n\tP9V_BUILTIN_VINSERT4B, P9V_BUILTIN_VINSERT4B_DI,\n\tand P9V_BUILTIN_VEC_VINSERT4B.\n\t* config/rs6000/rs6000-c.c (altivec_expand_builtin): Remove entries for\n\tP9V_BUILTIN_VEC_VEXTRACT4B and P9V_BUILTIN_VEC_VINSERT4B.\n\t* config/rs6000/vsx.md:\n\t* doc/extend.texi: Remove vec_vextract4b, non ABI definitions for\n\tvec_insert4b.\n\ngcc/testsuite/ChangeLog:\n\n2018-02-16  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/p9-vinsert4b-1.c: Remove test file for non-ABI\n\ttests.\n\t* gcc.target/powerpc/p9-vinsert4b-2.c: Remove test file for non-ABI\n\ttests.\n\nFrom-SVN: r257748", "tree": {"sha": "2781e20d7e7938ded39f9e2465c85fccee7dbaa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2781e20d7e7938ded39f9e2465c85fccee7dbaa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e7f98dff6b98e4029637d6376a51b6d43116f04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e7f98dff6b98e4029637d6376a51b6d43116f04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e7f98dff6b98e4029637d6376a51b6d43116f04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e7f98dff6b98e4029637d6376a51b6d43116f04/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8bf56035d234817d01bd26bf9ee7e64f790e692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8bf56035d234817d01bd26bf9ee7e64f790e692", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8bf56035d234817d01bd26bf9ee7e64f790e692"}], "stats": {"total": 226, "additions": 23, "deletions": 203}, "files": [{"sha": "78ea3af2f3b58f0071d85618d2ccf48bcfb1d53c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7f98dff6b98e4029637d6376a51b6d43116f04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7f98dff6b98e4029637d6376a51b6d43116f04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e7f98dff6b98e4029637d6376a51b6d43116f04", "patch": "@@ -1,3 +1,18 @@\n+2018-02-16  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/altivec.h: Remove vec_vextract4b and vec_vinsert4b.\n+\t* config/rs6000/rs6000-builtin.def: Remove macro expansion for\n+\tVEXTRACT4B, VINSERT4B, VINSERT4B_DI and VEXTRACT4B.\n+\t* config/rs6000/rs6000.c: Remove case statements for\n+\tP9V_BUILTIN_VEXTRACT4B, P9V_BUILTIN_VEC_VEXTRACT4B,\n+\tP9V_BUILTIN_VINSERT4B, P9V_BUILTIN_VINSERT4B_DI,\n+\tand P9V_BUILTIN_VEC_VINSERT4B.\n+\t* config/rs6000/rs6000-c.c (altivec_expand_builtin): Remove entries for\n+\tP9V_BUILTIN_VEC_VEXTRACT4B and P9V_BUILTIN_VEC_VINSERT4B.\n+\t* config/rs6000/vsx.md:\n+\t* doc/extend.texi: Remove vec_vextract4b, non ABI definitions for\n+\tvec_insert4b.\n+\n 2018-02-16  Carl Love  <cel@us.ibm.com>\n \n \t* config/rs6000/altivec.h: Add builtin names vec_extract4b"}, {"sha": "1e495e69c422ea1bc8d1c170ee4e3e2a17e7ae88", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7f98dff6b98e4029637d6376a51b6d43116f04/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7f98dff6b98e4029637d6376a51b6d43116f04/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=8e7f98dff6b98e4029637d6376a51b6d43116f04", "patch": "@@ -433,8 +433,6 @@\n #define vec_vctzd __builtin_vec_vctzd\n #define vec_vctzh __builtin_vec_vctzh\n #define vec_vctzw __builtin_vec_vctzw\n-#define vec_vextract4b __builtin_vec_vextract4b\n-#define vec_vinsert4b __builtin_vec_vinsert4b\n #define vec_extract4b __builtin_vec_extract4b\n #define vec_insert4b __builtin_vec_insert4b\n #define vec_vprtyb __builtin_vec_vprtyb"}, {"sha": "16fb18d53147c81582ecd35c8cf92775657b8173", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7f98dff6b98e4029637d6376a51b6d43116f04/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7f98dff6b98e4029637d6376a51b6d43116f04/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=8e7f98dff6b98e4029637d6376a51b6d43116f04", "patch": "@@ -2226,9 +2226,6 @@ BU_P9V_AV_2 (VEXTUWLX, \"vextuwlx\",\t\tCONST,\tvextuwlx)\n BU_P9V_AV_2 (VEXTUWRX, \"vextuwrx\",\t\tCONST,\tvextuwrx)\n \n /* Insert/extract 4 byte word into a vector.  */\n-BU_P9V_VSX_2 (VEXTRACT4B,   \"vextract4b\",\tCONST,\tvextract4b)\n-BU_P9V_VSX_3 (VINSERT4B,    \"vinsert4b\",\tCONST,\tvinsert4b)\n-BU_P9V_VSX_3 (VINSERT4B_DI, \"vinsert4b_di\",\tCONST,\tvinsert4b_di)\n BU_P9V_VSX_3 (INSERT4B,    \"insert4b\",\t\tCONST,  insert4b)\n BU_P9V_VSX_2 (EXTRACT4B,   \"extract4b\", \tCONST,  extract4b)\n \n@@ -2292,13 +2289,11 @@ BU_P9V_OVERLOAD_2 (LXVL,\t\"lxvl\")\n BU_P9V_OVERLOAD_2 (XL_LEN_R,\t\"xl_len_r\")\n BU_P9V_OVERLOAD_2 (VEXTULX,\t\"vextulx\")\n BU_P9V_OVERLOAD_2 (VEXTURX,\t\"vexturx\")\n-BU_P9V_OVERLOAD_2 (VEXTRACT4B,\t\"vextract4b\")\n BU_P9V_OVERLOAD_2 (EXTRACT4B,  \"extract4b\")\n \n /* ISA 3.0 Vector scalar overloaded 3 argument functions */\n BU_P9V_OVERLOAD_3 (STXVL,\t\"stxvl\")\n BU_P9V_OVERLOAD_3 (XST_LEN_R,\t\"xst_len_r\")\n-BU_P9V_OVERLOAD_3 (VINSERT4B,\t\"vinsert4b\")\n BU_P9V_OVERLOAD_3 (INSERT4B,    \"insert4b\")\n \n /* Overloaded CMPNE support was implemented prior to Power 9,"}, {"sha": "56370787b466681810691b3c361ec2fea60a6499", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7f98dff6b98e4029637d6376a51b6d43116f04/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7f98dff6b98e4029637d6376a51b6d43116f04/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=8e7f98dff6b98e4029637d6376a51b6d43116f04", "patch": "@@ -5431,10 +5431,6 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P9V_BUILTIN_VEC_VCTZLSBB, P9V_BUILTIN_VCTZLSBB_V4SI,\n     RS6000_BTI_INTSI, RS6000_BTI_V4SI, 0, 0 },\n \n-  { P9V_BUILTIN_VEC_VEXTRACT4B, P9V_BUILTIN_VEXTRACT4B,\n-    RS6000_BTI_INTDI, RS6000_BTI_V16QI, RS6000_BTI_UINTSI, 0 },\n-  { P9V_BUILTIN_VEC_VEXTRACT4B, P9V_BUILTIN_VEXTRACT4B,\n-    RS6000_BTI_INTDI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTSI, 0 },\n   { P9V_BUILTIN_VEC_EXTRACT4B, P9V_BUILTIN_EXTRACT4B,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, 0 },\n \n@@ -5502,27 +5498,6 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P9V_BUILTIN_VEC_INSERT4B, P9V_BUILTIN_INSERT4B,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V4SI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n-  { P9V_BUILTIN_VEC_VINSERT4B, P9V_BUILTIN_VINSERT4B,\n-    RS6000_BTI_V16QI, RS6000_BTI_V4SI,\n-    RS6000_BTI_V16QI, RS6000_BTI_UINTSI },\n-  { P9V_BUILTIN_VEC_VINSERT4B, P9V_BUILTIN_VINSERT4B,\n-    RS6000_BTI_V16QI, RS6000_BTI_unsigned_V4SI,\n-    RS6000_BTI_V16QI, RS6000_BTI_UINTSI },\n-  { P9V_BUILTIN_VEC_VINSERT4B, P9V_BUILTIN_VINSERT4B,\n-    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V4SI,\n-    RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTSI },\n-  { P9V_BUILTIN_VEC_VINSERT4B, P9V_BUILTIN_VINSERT4B_DI,\n-    RS6000_BTI_V16QI, RS6000_BTI_INTDI,\n-    RS6000_BTI_V16QI, RS6000_BTI_UINTDI },\n-  { P9V_BUILTIN_VEC_VINSERT4B, P9V_BUILTIN_VINSERT4B_DI,\n-    RS6000_BTI_V16QI, RS6000_BTI_UINTDI,\n-    RS6000_BTI_V16QI, RS6000_BTI_UINTDI },\n-  { P9V_BUILTIN_VEC_VINSERT4B, P9V_BUILTIN_VINSERT4B_DI,\n-    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTDI,\n-    RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTDI },\n-  { P9V_BUILTIN_VEC_VINSERT4B, P9V_BUILTIN_VINSERT4B_DI,\n-    RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTDI,\n-    RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTDI },\n \n   { P8V_BUILTIN_VEC_VADDECUQ, P8V_BUILTIN_VADDECUQ,\n     RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_V1TI, RS6000_BTI_V1TI },"}, {"sha": "4a6c4590ff70531d0bd76bddf7eb5797600d2804", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7f98dff6b98e4029637d6376a51b6d43116f04/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7f98dff6b98e4029637d6376a51b6d43116f04/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8e7f98dff6b98e4029637d6376a51b6d43116f04", "patch": "@@ -15741,8 +15741,6 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n     case VSX_BUILTIN_VEC_EXT_V1TI:\n       return altivec_expand_vec_ext_builtin (exp, target);\n \n-    case P9V_BUILTIN_VEXTRACT4B:\n-    case P9V_BUILTIN_VEC_VEXTRACT4B:\n     case P9V_BUILTIN_VEC_EXTRACT4B:\n       arg1 = CALL_EXPR_ARG (exp, 1);\n       STRIP_NOPS (arg1);\n@@ -15758,9 +15756,6 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n \t}\n       break;\n \n-    case P9V_BUILTIN_VINSERT4B:\n-    case P9V_BUILTIN_VINSERT4B_DI:\n-    case P9V_BUILTIN_VEC_VINSERT4B:\n     case P9V_BUILTIN_VEC_INSERT4B:\n       arg2 = CALL_EXPR_ARG (exp, 2);\n       STRIP_NOPS (arg2);"}, {"sha": "2fd0404d0122d75ad55b84977818f73b20abf113", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7f98dff6b98e4029637d6376a51b6d43116f04/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7f98dff6b98e4029637d6376a51b6d43116f04/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=8e7f98dff6b98e4029637d6376a51b6d43116f04", "patch": "@@ -5245,93 +5245,6 @@\n   \"xxinsertw %x0,%x1,%3\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_expand \"vextract4b\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\")\n-\t(unspec:DI [(match_operand:V16QI 1 \"vsx_register_operand\")\n-\t\t    (match_operand:QI 2 \"const_0_to_12_operand\")]\n-\t\t   UNSPEC_XXEXTRACTUW))]\n-  \"TARGET_P9_VECTOR\"\n-{\n-  if (!VECTOR_ELT_ORDER_BIG)\n-    operands[2] = GEN_INT (12 - INTVAL (operands[2]));\n-})\n-\n-(define_insn_and_split \"*vextract4b_internal\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=wj,r\")\n-\t(unspec:DI [(match_operand:V16QI 1 \"vsx_register_operand\" \"wa,v\")\n-\t\t    (match_operand:QI 2 \"const_0_to_12_operand\" \"n,n\")]\n-\t\t   UNSPEC_XXEXTRACTUW))]\n-  \"TARGET_P9_VECTOR\"\n-  \"@\n-   xxextractuw %x0,%x1,%2\n-   #\"\n-  \"&& reload_completed && int_reg_operand (operands[0], DImode)\"\n-  [(const_int 0)]\n-{\n-  rtx op0 = operands[0];\n-  rtx op1 = operands[1];\n-  rtx op2 = operands[2];\n-  rtx op0_si = gen_rtx_REG (SImode, REGNO (op0));\n-  rtx op1_v4si = gen_rtx_REG (V4SImode, REGNO (op1));\n-\n-  emit_move_insn (op0, op2);\n-  if (VECTOR_ELT_ORDER_BIG)\n-    emit_insn (gen_vextuwlx (op0_si, op0_si, op1_v4si));\n-  else\n-    emit_insn (gen_vextuwrx (op0_si, op0_si, op1_v4si));\n-  DONE;\n-}\n-  [(set_attr \"type\" \"vecperm\")])\n-\n-(define_expand \"vinsert4b\"\n-  [(set (match_operand:V16QI 0 \"vsx_register_operand\")\n-\t(unspec:V16QI [(match_operand:V4SI 1 \"vsx_register_operand\")\n-\t\t       (match_operand:V16QI 2 \"vsx_register_operand\")\n-\t\t       (match_operand:QI 3 \"const_0_to_12_operand\")]\n-\t\t   UNSPEC_XXINSERTW))]\n-  \"TARGET_P9_VECTOR\"\n-{\n-  if (!VECTOR_ELT_ORDER_BIG)\n-    {\n-      rtx op1 = operands[1];\n-      rtx v4si_tmp = gen_reg_rtx (V4SImode);\n-      emit_insn (gen_vsx_xxpermdi_v4si_be (v4si_tmp, op1, op1, const1_rtx));\n-      operands[1] = v4si_tmp;\n-      operands[3] = GEN_INT (12 - INTVAL (operands[3]));\n-    }\n-})\n-\n-(define_insn \"*vinsert4b_internal\"\n-  [(set (match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\")\n-\t(unspec:V16QI [(match_operand:V4SI 1 \"vsx_register_operand\" \"wa\")\n-\t\t       (match_operand:V16QI 2 \"vsx_register_operand\" \"0\")\n-\t\t       (match_operand:QI 3 \"const_0_to_12_operand\" \"n\")]\n-\t\t   UNSPEC_XXINSERTW))]\n-  \"TARGET_P9_VECTOR\"\n-  \"xxinsertw %x0,%x1,%3\"\n-  [(set_attr \"type\" \"vecperm\")])\n-\n-(define_expand \"vinsert4b_di\"\n-  [(set (match_operand:V16QI 0 \"vsx_register_operand\")\n-\t(unspec:V16QI [(match_operand:DI 1 \"vsx_register_operand\")\n-\t\t       (match_operand:V16QI 2 \"vsx_register_operand\")\n-\t\t       (match_operand:QI 3 \"const_0_to_12_operand\")]\n-\t\t   UNSPEC_XXINSERTW))]\n-  \"TARGET_P9_VECTOR\"\n-{\n-  if (!VECTOR_ELT_ORDER_BIG)\n-    operands[3] = GEN_INT (12 - INTVAL (operands[3]));\n-})\n-\n-(define_insn \"*vinsert4b_di_internal\"\n-  [(set (match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\")\n-\t(unspec:V16QI [(match_operand:DI 1 \"vsx_register_operand\" \"wj\")\n-\t\t       (match_operand:V16QI 2 \"vsx_register_operand\" \"0\")\n-\t\t       (match_operand:QI 3 \"const_0_to_12_operand\" \"n\")]\n-\t\t   UNSPEC_XXINSERTW))]\n-  \"TARGET_P9_VECTOR\"\n-  \"xxinsertw %x0,%x1,%3\"\n-  [(set_attr \"type\" \"vecperm\")])\n \n ;; Generate vector extract four float 32 values from left four elements\n ;; of eight element vector of float 16 values."}, {"sha": "d38840e491291601f59df1a29f82a1a0d99b266b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7f98dff6b98e4029637d6376a51b6d43116f04/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7f98dff6b98e4029637d6376a51b6d43116f04/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8e7f98dff6b98e4029637d6376a51b6d43116f04", "patch": "@@ -19055,21 +19055,12 @@ vector unsigned short vec_vctzh (vector unsigned short);\n vector int vec_vctzw (vector int);\n vector unsigned int vec_vctzw (vector int);\n \n-long long vec_vextract4b (const vector signed char, const int);\n-vector unsigned long long vec_extract4b (vector unsigned char,\n-                                         const int);\n-long long vec_extract4b (const vector signed char, const int);\n-long long vec_vextract4b (const vector unsigned char, const int);\n+vector unsigned long long vec_extract4b (vector unsigned char, const int);\n \n vector unsigned char vec_insert4b (vector signed int, vector unsigned char,\n                                    const int);\n vector unsigned char vec_insert4b (vector unsigned int, vector unsigned char,\n                                    const int);\n-vector signed char vec_insert4b (vector int, vector signed char, const int);\n-vector unsigned char vec_insert4b (vector unsigned int, vector unsigned char,\n-                                   const int);\n-vector signed char vec_insert4b (long long, vector signed char, const int);\n-vector unsigned char vec_insert4b (long long, vector unsigned char, const int);\n \n vector unsigned int vec_parity_lsbb (vector signed int);\n vector unsigned int vec_parity_lsbb (vector unsigned int);"}, {"sha": "b77afed11b7a42533559e8795784a84ab74581e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e7f98dff6b98e4029637d6376a51b6d43116f04/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e7f98dff6b98e4029637d6376a51b6d43116f04/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e7f98dff6b98e4029637d6376a51b6d43116f04", "patch": "@@ -1,3 +1,10 @@\n+2018-02-16  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/p9-vinsert4b-1.c: Remove test file for non-ABI\n+\ttests.\n+\t* gcc.target/powerpc/p9-vinsert4b-2.c: Remove test file for non-ABI\n+\ttests.\n+\n 2018-02-16  Carl Love  <cel@us.ibm.com>\n \n \t* gcc.target/powerpc/builtins-7-p9-runnable.c: New runnable test file"}, {"sha": "fa1ba75470567cb3c71d988e7dc56cb7f62c1523", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vinsert4b-1.c", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vinsert4b-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vinsert4b-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vinsert4b-1.c?ref=b8bf56035d234817d01bd26bf9ee7e64f790e692", "patch": "@@ -1,39 +0,0 @@\n-/* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n-/* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9 -O2\" } */\n-\n-#include <altivec.h>\n-\n-vector signed char\n-vins_v4si (vector int *vi, vector signed char *vc)\n-{\n-  return vec_vinsert4b (*vi, *vc, 1);\n-}\n-\n-vector unsigned char\n-vins_di (long di, vector unsigned char *vc)\n-{\n-  return vec_vinsert4b (di, *vc, 2);\n-}\n-\n-vector char\n-vins_di2 (long *p_di, vector char *vc)\n-{\n-  return vec_vinsert4b (*p_di, *vc, 3);\n-}\n-\n-vector unsigned char\n-vins_di0 (vector unsigned char *vc)\n-{\n-  return vec_vinsert4b (0, *vc, 4);\n-}\n-\n-long\n-vext (vector signed char *vc)\n-{\n-  return vec_vextract4b (*vc, 5);\n-}\n-\n-/* { dg-final { scan-assembler \"xxextractuw\\|vextuw\\[lr\\]x\" } } */\n-/* { dg-final { scan-assembler \"xxinsertw\" } } */"}, {"sha": "3b5872ebec6f52dd6ce9e5c510ed4b2dddf81a8f", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vinsert4b-2.c", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vinsert4b-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vinsert4b-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vinsert4b-2.c?ref=b8bf56035d234817d01bd26bf9ee7e64f790e692", "patch": "@@ -1,30 +0,0 @@\n-/* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n-/* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9 -O2\" } */\n-\n-#include <altivec.h>\n-\n-vector signed char\n-ins_v4si (vector int vi, vector signed char vc)\n-{\n-  return vec_vinsert4b (vi, vc, 13);\t/* { dg-error \"vec_vinsert4b\" } */\n-}\n-\n-vector unsigned char\n-ins_di (long di, vector unsigned char vc, long n)\n-{\n-  return vec_vinsert4b (di, vc, n);\t/* { dg-error \"vec_vinsert4b\" } */\n-}\n-\n-long\n-vext1 (vector signed char vc)\n-{\n-  return vec_vextract4b (vc, 13);\t/* { dg-error \"vec_vextract4b\" } */\n-}\n-\n-long\n-vextn (vector unsigned char vc, long n)\n-{\n-  return vec_vextract4b (vc, n);\t/* { dg-error \"vec_vextract4b\" } */\n-}"}]}