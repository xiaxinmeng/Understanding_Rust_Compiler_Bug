{"sha": "6b318bf2bfa83bd5bd814cb7bbc15ad282db9f28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIzMThiZjJiZmE4M2JkNWJkODE0Y2I3YmJjMTVhZDI4MmRiOWYyOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-01-27T08:53:38Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-01-27T08:53:38Z"}, "message": "decl.c (gnat_to_gnu_entity): For an aliased object with an unconstrained nominal subtype and if...\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: For an aliased\n\tobject with an unconstrained nominal subtype and if optimization isn't\n\tenabled, create a special VAR_DECL for debugging purposes.\n\nFrom-SVN: r183605", "tree": {"sha": "b58c5fff78f5551c34d2620ef83fabfacbefdddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b58c5fff78f5551c34d2620ef83fabfacbefdddd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b318bf2bfa83bd5bd814cb7bbc15ad282db9f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b318bf2bfa83bd5bd814cb7bbc15ad282db9f28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b318bf2bfa83bd5bd814cb7bbc15ad282db9f28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b318bf2bfa83bd5bd814cb7bbc15ad282db9f28/comments", "author": null, "committer": null, "parents": [{"sha": "a76358008e043e0666940a98d1bcb1411bd4519a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a76358008e043e0666940a98d1bcb1411bd4519a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a76358008e043e0666940a98d1bcb1411bd4519a"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "361a1fa91e2832f655e17f6a2e93824d910a12c9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b318bf2bfa83bd5bd814cb7bbc15ad282db9f28/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b318bf2bfa83bd5bd814cb7bbc15ad282db9f28/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6b318bf2bfa83bd5bd814cb7bbc15ad282db9f28", "patch": "@@ -1,3 +1,9 @@\n+2012-01-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: For an aliased\n+\tobject with an unconstrained nominal subtype and if optimization isn't\n+\tenabled, create a special VAR_DECL for debugging purposes.\n+\n 2012-01-23  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_prag.ads, sem_prag.adb: Minor reformatting."}, {"sha": "a373061d452b7ab07bd3d19d2e90990d848b2442", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b318bf2bfa83bd5bd814cb7bbc15ad282db9f28/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b318bf2bfa83bd5bd814cb7bbc15ad282db9f28/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=6b318bf2bfa83bd5bd814cb7bbc15ad282db9f28", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2011, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -889,10 +889,11 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    && Is_Array_Type (Etype (gnat_entity))\n \t    && !type_annotate_only)\n \t  {\n-\t    tree gnu_fat\n-\t      = TREE_TYPE (gnat_to_gnu_type (Base_Type (Etype (gnat_entity))));\n+\t    tree gnu_array\n+\t      = gnat_to_gnu_type (Base_Type (Etype (gnat_entity)));\n \t    gnu_type\n-\t      = build_unc_object_type_from_ptr (gnu_fat, gnu_type,\n+\t      = build_unc_object_type_from_ptr (TREE_TYPE (gnu_array),\n+\t\t\t\t\t\tgnu_type,\n \t\t\t\t\t\tconcat_name (gnu_entity_name,\n \t\t\t\t\t\t\t     \"UNC\"),\n \t\t\t\t\t\tdebug_info_p);\n@@ -1468,6 +1469,41 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t      }\n \t  }\n \n+\t/* If this is an aliased object with an unconstrained nominal subtype\n+\t   and optimization isn't enabled, create a VAR_DECL for debugging\n+\t   purposes whose type is a thin reference (the reference counterpart\n+\t   of a thin pointer), so that it will be directly initialized to the\n+\t   address of the array part.  */\n+\telse if (Is_Constr_Subt_For_UN_Aliased (Etype (gnat_entity))\n+\t\t && Is_Array_Type (Etype (gnat_entity))\n+\t\t && !type_annotate_only\n+\t\t && !optimize\n+\t\t && debug_info_p)\n+\t  {\n+\t    tree gnu_array\n+\t      = gnat_to_gnu_type (Base_Type (Etype (gnat_entity)));\n+\t    tree gnu_thin_type\n+\t      = build_reference_type (TYPE_OBJECT_RECORD_TYPE (gnu_array));\n+\t    tree gnu_ref, gnu_debug_decl;\n+\n+\t    /* In case the object with the template has already been indirectly\n+\t       allocated, we have nothing to do here.  */\n+\t    if (TYPE_IS_THIN_POINTER_P (gnu_type))\n+\t      gnu_ref = gnu_decl;\n+\t    else\n+\t      gnu_ref = build_unary_op (ADDR_EXPR, NULL_TREE, gnu_decl);\n+\t    gnu_ref = convert (gnu_thin_type, gnu_ref);\n+\n+\t    gnu_debug_decl\n+\t      = create_var_decl (gnu_entity_name, gnu_ext_name,\n+\t\t\t\t gnu_thin_type, NULL_TREE, const_flag,\n+\t\t\t\t Is_Public (gnat_entity), !definition,\n+\t\t\t\t static_p, attr_list, gnat_entity);\n+\t    SET_DECL_VALUE_EXPR (gnu_debug_decl, gnu_ref);\n+\t    DECL_HAS_VALUE_EXPR_P (gnu_debug_decl) = 1;\n+\t    DECL_IGNORED_P (gnu_decl) = 1;\n+\t  }\n+\n \t/* If this is a constant and we are defining it or it generates a real\n \t   symbol at the object level and we are referencing it, we may want\n \t   or need to have a true variable to represent it:"}]}