{"sha": "2e9ceb77befba5b08e2e27eeed70550e5be570b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU5Y2ViNzdiZWZiYTViMDhlMmUyN2VlZWQ3MDU1MGU1YmU1NzBiMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-04-02T11:48:56Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-04-02T11:48:56Z"}, "message": "re PR c++/14007 (Incorrect use of const partial specialization for reference template argument)\n\ncp:\n\tPR c++/14007\n\t* pt.c (check_cv_quals_for_unify): Correct logic for disallowed\n\tcv-qualifier unification.\n\t* tree.c (cp_build_qualified_type_real): Renable DR295 logic.\ntestsuite:\n\tPR c++/14007\n\t* g++.dg/template/unify5.C: New.\n\t* g++.dg/template/unify6.C: New.\n\t* g++.dg/template/qualttp20.C: Adjust.\n\t* g++.old-deja/g++.jason/report.C: Adjust.\n\t* g++.old-deja/g++.other/qual1.C: Adjust.\n\nFrom-SVN: r80351", "tree": {"sha": "13ad1a30020e4179013face1ceb42aab4c129129", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13ad1a30020e4179013face1ceb42aab4c129129"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e9ceb77befba5b08e2e27eeed70550e5be570b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e9ceb77befba5b08e2e27eeed70550e5be570b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e9ceb77befba5b08e2e27eeed70550e5be570b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e9ceb77befba5b08e2e27eeed70550e5be570b2/comments", "author": null, "committer": null, "parents": [{"sha": "efe4ba3d352d1e1e4badcfa4982ad3007b94ef51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe4ba3d352d1e1e4badcfa4982ad3007b94ef51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efe4ba3d352d1e1e4badcfa4982ad3007b94ef51"}], "stats": {"total": 108, "additions": 76, "deletions": 32}, "files": [{"sha": "73aa9144902686103c0312c8bf98a9c06a989551", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2e9ceb77befba5b08e2e27eeed70550e5be570b2", "patch": "@@ -1,3 +1,10 @@\n+2004-04-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/14007\n+\t* pt.c (check_cv_quals_for_unify): Correct logic for disallowed\n+\tcv-qualifier unification.\n+\t* tree.c (cp_build_qualified_type_real): Renable DR295 logic.\n+\n 2004-04-02  Jan Hubicka  <jh@suse.cz>\n \n \t* cp-lang. (LANG_HOOKS_UPDATE_DECL_AFTER_SAVING): Define."}, {"sha": "fd38b0a381c0fb6ae6bf12afd89b71bf098f7b29", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2e9ceb77befba5b08e2e27eeed70550e5be570b2", "patch": "@@ -9543,7 +9543,7 @@ template_decl_level (tree decl)\n \n /* Decide whether ARG can be unified with PARM, considering only the\n    cv-qualifiers of each type, given STRICT as documented for unify.\n-   Returns nonzero iff the unification is OK on that basis.*/\n+   Returns nonzero iff the unification is OK on that basis. */\n \n static int\n check_cv_quals_for_unify (int strict, tree arg, tree parm)\n@@ -9553,15 +9553,22 @@ check_cv_quals_for_unify (int strict, tree arg, tree parm)\n \n   if (TREE_CODE (parm) == TEMPLATE_TYPE_PARM)\n     {\n-      /* If the cvr quals of parm will not unify with ARG, they'll be\n-\t ignored in instantiation, so we have to do the same here.  */\n-      if (TREE_CODE (arg) == REFERENCE_TYPE)\n-\tparm_quals &= ~(TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE);\n-      if (!POINTER_TYPE_P (arg) &&\n-\t  TREE_CODE (arg) != TEMPLATE_TYPE_PARM)\n-\tparm_quals &= ~TYPE_QUAL_RESTRICT;\n+      /*  Although a CVR qualifier is ignored when being applied to a\n+          substituted template parameter ([8.3.2]/1 for example), that\n+          does not apply during deduction [14.8.2.4]/1, (even though\n+          that is not explicitly mentioned, [14.8.2.4]/9 indicates\n+          this). */\n+      if ((TREE_CODE (arg) == REFERENCE_TYPE\n+\t   || TREE_CODE (arg) == FUNCTION_TYPE\n+\t   || TREE_CODE (arg) == METHOD_TYPE)\n+\t  && (parm_quals & (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE)))\n+\treturn 0;\n+\n+      if ((!POINTER_TYPE_P (arg) && TREE_CODE (arg) != TEMPLATE_TYPE_PARM)\n+\t  && (parm_quals & TYPE_QUAL_RESTRICT))\n+\treturn 0;\n     }\n-  \n+\n   if (!(strict & (UNIFY_ALLOW_MORE_CV_QUAL | UNIFY_ALLOW_OUTER_MORE_CV_QUAL))\n       && (arg_quals & parm_quals) != parm_quals)\n     return 0;"}, {"sha": "adf3b3911145a605a5451006cdb19d72d92e8ccd", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=2e9ceb77befba5b08e2e27eeed70550e5be570b2", "patch": "@@ -433,11 +433,6 @@ cp_build_qualified_type_real (tree type,\n {\n   tree result;\n   int bad_quals = TYPE_UNQUALIFIED;\n-  /* We keep bad function qualifiers separate, so that we can decide\n-     whether to implement DR 295 or not. DR 295 break existing code,\n-     unfortunately. Remove this variable to implement the defect\n-     report.  */\n-  int bad_func_quals = TYPE_UNQUALIFIED;\n \n   if (type == error_mark_node)\n     return type;\n@@ -507,8 +502,6 @@ cp_build_qualified_type_real (tree type,\n \t  || TREE_CODE (type) == METHOD_TYPE))\n     {\n       bad_quals |= type_quals & (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE);\n-      if (TREE_CODE (type) != REFERENCE_TYPE)\n-\tbad_func_quals |= type_quals & (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE);\n       type_quals &= ~(TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE);\n     }\n   \n@@ -527,21 +520,17 @@ cp_build_qualified_type_real (tree type,\n     /*OK*/;\n   else if (!(complain & (tf_error | tf_ignore_bad_quals)))\n     return error_mark_node;\n-  else if (bad_func_quals && !(complain & tf_error))\n-    return error_mark_node;\n   else\n     {\n       if (complain & tf_ignore_bad_quals)\n  \t/* We're not going to warn about constifying things that can't\n  \t   be constified.  */\n  \tbad_quals &= ~TYPE_QUAL_CONST;\n-      bad_quals |= bad_func_quals;\n       if (bad_quals)\n  \t{\n  \t  tree bad_type = build_qualified_type (ptr_type_node, bad_quals);\n  \n- \t  if (!(complain & tf_ignore_bad_quals)\n-\t      || bad_func_quals)\n+ \t  if (!(complain & tf_ignore_bad_quals))\n  \t    error (\"`%V' qualifiers cannot be applied to `%T'\",\n \t\t   bad_type, type);\n  \t}"}, {"sha": "420a53d49a412a4f8c81cdf2c4d478b4739f8891", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e9ceb77befba5b08e2e27eeed70550e5be570b2", "patch": "@@ -1,3 +1,12 @@\n+2004-04-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/14007\n+\t* g++.dg/template/unify5.C: New.\n+\t* g++.dg/template/unify6.C: New.\n+\t* g++.dg/template/qualttp20.C: Adjust.\n+\t* g++.old-deja/g++.jason/report.C: Adjust.\n+\t* g++.old-deja/g++.other/qual1.C: Adjust.\n+\n 2004-04-01  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14803"}, {"sha": "e58e2d2748d8abd754b753e0bcb100b3dc285b67", "filename": "gcc/testsuite/g++.dg/template/qualttp20.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C?ref=2e9ceb77befba5b08e2e27eeed70550e5be570b2", "patch": "@@ -19,17 +19,17 @@ template <typename T> struct B1 : T\n   typedef typename T::myT __restrict__ p;// { dg-warning \"ignoring `__restrict__'\" \"\" { xfail *-*-* } }\n \n   // The following are DR 295 dependent\n-  typedef typename T::myT volatile *myvolatile; // { dg-error \"qualifiers\" \"\"  }\n-  typename T::myT volatile *a;    // { dg-error \"qualifiers\" \"\" }\n-  myvolatile b;\t\t\t // { dg-error \"qualifiers\" \"\" }\n+  typedef typename T::myT volatile *myvolatile;\n+  typename T::myT volatile *a;\n+  myvolatile b;\n };\n template <typename T> struct B2 : T\n {\n   // The following are DR 295 dependent\n-  typedef typename T::myT const *myconst; // { dg-error \"qualifiers\" \"\" }\n-  typename T::myT const *a; // { dg-error \"qualifiers\" \"\" }\n-  myconst b; // { dg-error \"qualifiers\" \"\" }\n+  typedef typename T::myT const *myconst;\n+  typename T::myT const *a;\n+  myconst b;\n };\n \n B1<AS> b1;\t// { dg-error \"instantiated\" \"\" }\n-B2<AS> b2;      // { dg-error \"instantiated\" \"\" }\t\n+B2<AS> b2;"}, {"sha": "6928f1f842961eefffa79c0d7c55b5b553b9d0ad", "filename": "gcc/testsuite/g++.dg/template/unify5.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify5.C?ref=2e9ceb77befba5b08e2e27eeed70550e5be570b2", "patch": "@@ -0,0 +1,10 @@\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 1 Apr 2004 <nathan@codesourcery.com>\n+// Origin:Matt Austern <austern@apple.com>\n+\n+// PR:c++/14007\n+\n+template <typename T> struct X {};  // #1\n+template <typename T> struct X<const T>; //#2\n+template struct X<int&>; //#3"}, {"sha": "ee6a8ce0fdb41ab2327bcb8e2d198872210e6ac1", "filename": "gcc/testsuite/g++.dg/template/unify6.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify6.C?ref=2e9ceb77befba5b08e2e27eeed70550e5be570b2", "patch": "@@ -0,0 +1,22 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 1 Apr 2004 <nathan@codesourcery.com>\n+\n+void Baz ();\n+\n+template <typename T> void Foo1 (T *); // #1\n+template <typename T> void Foo1 (T const *a) {a (1);} // #2\n+\n+template <typename T> T const *Foo2 (T *);\n+\n+template <typename T> void Foo3 (T *, T const * = 0);\n+\n+void Bar ()\n+{\n+  Foo1 (&Baz); // #1\n+\n+  Foo2 (&Baz);\n+\n+  Foo3 (&Baz);\n+\n+  Foo3 (&Baz, &Baz); // { dg-error \"no matching function\" \"\" }\n+}"}, {"sha": "13557f166ef2f3f910916983cd778af876c59b4b", "filename": "gcc/testsuite/g++.old-deja/g++.jason/report.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C?ref=2e9ceb77befba5b08e2e27eeed70550e5be570b2", "patch": "@@ -47,8 +47,8 @@ class X{\n \n typedef int const * bart ();\n //The following is DR295 dependant\n-typedef bart const * const * bar2; // { dg-error \"\" } constifying qualifiers\n-typedef bart volatile * const * bar2v; // { dg-error \"\" } qualifiers\n+typedef bart const * const * bar2;\n+typedef bart volatile * const * bar2v;\n \n bar2 baz (X::Y y)\n {\t\t\t\t// { dg-error \"\" } in this context"}, {"sha": "b6eba42ddcfa46d083a8dad5c0e9bc4a22a63171", "filename": "gcc/testsuite/g++.old-deja/g++.other/qual1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fqual1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9ceb77befba5b08e2e27eeed70550e5be570b2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fqual1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fqual1.C?ref=2e9ceb77befba5b08e2e27eeed70550e5be570b2", "patch": "@@ -11,8 +11,8 @@ class C\n public:\n   func_type *Function;\n   // The following is DR 295 dependent\n-  const func_type* function(void) { return Function; } // { dg-error \"\" } constifying\n-  volatile func_type* functionv(void); // { dg-error \"\" } qualifier\n+  const func_type* function(void) { return Function; }\n+  volatile func_type* functionv(void);\n } action;\n \n void work(const char *source)"}]}