{"sha": "a778c4e72121c5b705e7d9448effe43e32dc4943", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc3OGM0ZTcyMTIxYzViNzA1ZTdkOTQ0OGVmZmU0M2UzMmRjNDk0Mw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-08-30T11:52:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-08-30T11:52:13Z"}, "message": "re PR tree-optimization/41186 (VN doesn't look through non-aliasing by offset memcpy)\n\n2009-08-30  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/41186\n\t* tree-ssa-alias.c (ptr_deref_may_alias_ref_p): Remove.\n\t(ao_ref_init_from_ptr_and_size): New function.\n\t(ref_maybe_used_by_call_p_1): Be more precise tracking\n\tused ranges for builtin functions.\n\t(ref_maybe_used_by_call_p): Adjust.\n\t(call_may_clobber_ref_p_1): Be more precise tracking clobbered\n\tranges for builtin functions.\n\t* tree-ssa-alias.h (ao_ref_init_from_ptr_and_size): Declare.\n\n\t* g++.dg/torture/pr41186.C: New testcase.\n\t* g++.dg/tree-ssa/pr41186.C: Likewise.\n\nFrom-SVN: r151226", "tree": {"sha": "472a7d66ee84dccb85b005956f034ca58e36abc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/472a7d66ee84dccb85b005956f034ca58e36abc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a778c4e72121c5b705e7d9448effe43e32dc4943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a778c4e72121c5b705e7d9448effe43e32dc4943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a778c4e72121c5b705e7d9448effe43e32dc4943", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a778c4e72121c5b705e7d9448effe43e32dc4943/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01d93568e892e196fbc28454f9f9e3553cbfcd7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d93568e892e196fbc28454f9f9e3553cbfcd7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d93568e892e196fbc28454f9f9e3553cbfcd7e"}], "stats": {"total": 162, "additions": 142, "deletions": 20}, "files": [{"sha": "ec6c3cc3655283f21d08a2987d7a5b13c60295a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a778c4e72121c5b705e7d9448effe43e32dc4943/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a778c4e72121c5b705e7d9448effe43e32dc4943/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a778c4e72121c5b705e7d9448effe43e32dc4943", "patch": "@@ -1,3 +1,15 @@\n+2009-08-30  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/41186\n+\t* tree-ssa-alias.c (ptr_deref_may_alias_ref_p): Remove.\n+\t(ao_ref_init_from_ptr_and_size): New function.\n+\t(ref_maybe_used_by_call_p_1): Be more precise tracking\n+\tused ranges for builtin functions.\n+\t(ref_maybe_used_by_call_p): Adjust.\n+\t(call_may_clobber_ref_p_1): Be more precise tracking clobbered\n+\tranges for builtin functions.\n+\t* tree-ssa-alias.h (ao_ref_init_from_ptr_and_size): Declare.\n+\n 2009-08-30  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR target/41081"}, {"sha": "3173f578ce90e1237d4c4233ca74fb12fe8f3a35", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a778c4e72121c5b705e7d9448effe43e32dc4943/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a778c4e72121c5b705e7d9448effe43e32dc4943/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a778c4e72121c5b705e7d9448effe43e32dc4943", "patch": "@@ -1,3 +1,9 @@\n+2009-08-30  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/41186\n+\t* g++.dg/torture/pr41186.C: New testcase.\n+\t* g++.dg/tree-ssa/pr41186.C: Likewise.\n+\n 2009-08-30  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/41187"}, {"sha": "fdfee2cd373fa0cb9d65ccc0791d175d29b61762", "filename": "gcc/testsuite/g++.dg/torture/pr41186.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a778c4e72121c5b705e7d9448effe43e32dc4943/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr41186.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a778c4e72121c5b705e7d9448effe43e32dc4943/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr41186.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr41186.C?ref=a778c4e72121c5b705e7d9448effe43e32dc4943", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+\n+struct Foo {\n+  Foo() {};\n+  int i;\n+  short f;\n+};\n+struct Bar : public Foo {\n+  Bar() {};\n+  short b;\n+};\n+\n+extern \"C\" void abort(void);\n+\n+int main()\n+{\n+  Bar b1, b2;\n+  b2.i = 0;\n+  b1.f = 0;\n+  b1.b = 1;\n+  b2.f = 1;\n+  b2.b = 2;\n+  static_cast<Foo&>(b1) = static_cast<Foo&>(b2);\n+  if (b1.i != 0 || b1.b != 1)\n+    abort ();\n+  if (b1.f != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "91f21a8c643ef1e0c813fe94eaac23964a685cb5", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr41186.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a778c4e72121c5b705e7d9448effe43e32dc4943/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr41186.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a778c4e72121c5b705e7d9448effe43e32dc4943/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr41186.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr41186.C?ref=a778c4e72121c5b705e7d9448effe43e32dc4943", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre-details\" } */\n+\n+struct Foo {\n+  Foo() {};\n+  int i;\n+  short f;\n+};\n+struct Bar : public Foo {\n+  Bar() {};\n+  short b;\n+};\n+\n+extern \"C\" void abort(void);\n+\n+int main()\n+{\n+  Bar b1, b2;\n+  b2.i = 0;\n+  b1.f = 0;\n+  b1.b = 1;\n+  b2.f = 1;\n+  b2.b = 2;\n+  static_cast<Foo&>(b1) = static_cast<Foo&>(b2);\n+  if (b1.i != 0 || b1.b != 1)\n+    abort ();\n+  if (b1.f != 1)\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Replaced b1.b with 1\" \"fre\" } } */\n+/* { dg-final { scan-tree-dump \"Replaced b1.i with 0\" \"fre\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"Replaced b1.f with 1\" \"fre\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "7e83a84b82ce063dac09d617b5aa1c082bd8c269", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 59, "deletions": 20, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a778c4e72121c5b705e7d9448effe43e32dc4943/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a778c4e72121c5b705e7d9448effe43e32dc4943/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=a778c4e72121c5b705e7d9448effe43e32dc4943", "patch": "@@ -302,14 +302,6 @@ ptr_deref_may_alias_ref_p_1 (tree ptr, ao_ref *ref)\n   return true;\n }\n \n-static bool\n-ptr_deref_may_alias_ref_p (tree ptr, tree ref)\n-{\n-  ao_ref r;\n-  ao_ref_init (&r, ref);\n-  return ptr_deref_may_alias_ref_p_1 (ptr, &r);\n-}\n-\n \n /* Dump alias information on FILE.  */\n \n@@ -490,6 +482,34 @@ ao_ref_alias_set (ao_ref *ref)\n   return ref->ref_alias_set;\n }\n \n+/* Init an alias-oracle reference representation from a gimple pointer\n+   PTR and a gimple size SIZE in bytes.  If SIZE is NULL_TREE the the\n+   size is assumed to be unknown.  The access is assumed to be only\n+   to or after of the pointer target, not before it.  */\n+\n+void\n+ao_ref_init_from_ptr_and_size (ao_ref *ref, tree ptr, tree size)\n+{\n+  HOST_WIDE_INT t1, t2;\n+  ref->ref = NULL_TREE;\n+  if (TREE_CODE (ptr) == ADDR_EXPR)\n+    ref->base = get_ref_base_and_extent (TREE_OPERAND (ptr, 0),\n+\t\t\t\t\t &ref->offset, &t1, &t2);\n+  else\n+    {\n+      ref->base = build1 (INDIRECT_REF, char_type_node, ptr);\n+      ref->offset = 0;\n+    }\n+  if (size\n+      && host_integerp (size, 0)\n+      && TREE_INT_CST_LOW (size) * 8 / 8 == TREE_INT_CST_LOW (size))\n+    ref->max_size = ref->size = TREE_INT_CST_LOW (size) * 8;\n+  else\n+    ref->max_size = ref->size = -1;\n+  ref->ref_alias_set = 0;\n+  ref->base_alias_set = 0;\n+}\n+\n /* Return 1 if TYPE1 and TYPE2 are to be considered equivalent for the\n    purpose of TBAA.  Return 0 if they are distinct and -1 if we cannot\n    decide.  */\n@@ -854,7 +874,7 @@ refs_output_dependent_p (tree store1, tree store2)\n    otherwise return false.  */\n \n static bool\n-ref_maybe_used_by_call_p_1 (gimple call, tree ref)\n+ref_maybe_used_by_call_p_1 (gimple call, ao_ref *ref)\n {\n   tree base, callee;\n   unsigned i;\n@@ -865,7 +885,7 @@ ref_maybe_used_by_call_p_1 (gimple call, tree ref)\n       && (flags & (ECF_CONST|ECF_NOVOPS)))\n     goto process_args;\n \n-  base = get_base_address (ref);\n+  base = ao_ref_base (ref);\n   if (!base)\n     return true;\n \n@@ -899,8 +919,14 @@ ref_maybe_used_by_call_p_1 (gimple call, tree ref)\n \tcase BUILT_IN_STRCAT:\n \tcase BUILT_IN_STRNCAT:\n \t  {\n-\t    tree src = gimple_call_arg (call, 1);\n-\t    return ptr_deref_may_alias_ref_p (src, ref);\n+\t    ao_ref dref;\n+\t    tree size = NULL_TREE;\n+\t    if (gimple_call_num_args (call) == 3)\n+\t      size = gimple_call_arg (call, 2);\n+\t    ao_ref_init_from_ptr_and_size (&dref,\n+\t\t\t\t\t   gimple_call_arg (call, 1),\n+\t\t\t\t\t   size);\n+\t    return refs_may_alias_p_1 (&dref, ref, false);\n \t  }\n \t/* The following builtins do not read from memory.  */\n \tcase BUILT_IN_FREE:\n@@ -1004,9 +1030,13 @@ ref_maybe_used_by_call_p_1 (gimple call, tree ref)\n \top = TREE_OPERAND (op, 0);\n \n       if (TREE_CODE (op) != SSA_NAME\n-\t  && !is_gimple_min_invariant (op)\n-\t  && refs_may_alias_p (op, ref))\n-\treturn true;\n+\t  && !is_gimple_min_invariant (op))\n+\t{\n+\t  ao_ref r;\n+\t  ao_ref_init (&r, op);\n+\t  if (refs_may_alias_p_1 (&r, ref, true))\n+\t    return true;\n+\t}\n     }\n \n   return false;\n@@ -1015,7 +1045,10 @@ ref_maybe_used_by_call_p_1 (gimple call, tree ref)\n static bool\n ref_maybe_used_by_call_p (gimple call, tree ref)\n {\n-  bool res = ref_maybe_used_by_call_p_1 (call, ref);\n+  ao_ref r;\n+  bool res;\n+  ao_ref_init (&r, ref);\n+  res = ref_maybe_used_by_call_p_1 (call, &r);\n   if (res)\n     ++alias_stats.ref_maybe_used_by_call_p_may_alias;\n   else\n@@ -1106,15 +1139,21 @@ call_may_clobber_ref_p_1 (gimple call, ao_ref *ref)\n \tcase BUILT_IN_STPNCPY:\n \tcase BUILT_IN_STRCAT:\n \tcase BUILT_IN_STRNCAT:\n+\tcase BUILT_IN_MEMSET:\n \t  {\n-\t    tree dest = gimple_call_arg (call, 0);\n-\t    return ptr_deref_may_alias_ref_p_1 (dest, ref);\n+\t    ao_ref dref;\n+\t    tree size = NULL_TREE;\n+\t    if (gimple_call_num_args (call) == 3)\n+\t      size = gimple_call_arg (call, 2);\n+\t    ao_ref_init_from_ptr_and_size (&dref,\n+\t\t\t\t\t   gimple_call_arg (call, 0),\n+\t\t\t\t\t   size);\n+\t    return refs_may_alias_p_1 (&dref, ref, false);\n \t  }\n \t/* Freeing memory kills the pointed-to memory.  More importantly\n \t   the call has to serve as a barrier for moving loads and stores\n-\t   across it.  Same is true for memset.  */\n+\t   across it.  */\n \tcase BUILT_IN_FREE:\n-\tcase BUILT_IN_MEMSET:\n \t  {\n \t    tree ptr = gimple_call_arg (call, 0);\n \t    return ptr_deref_may_alias_ref_p_1 (ptr, ref);"}, {"sha": "497069258367f2c1b8c30671c45b6cee0708c2ac", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a778c4e72121c5b705e7d9448effe43e32dc4943/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a778c4e72121c5b705e7d9448effe43e32dc4943/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=a778c4e72121c5b705e7d9448effe43e32dc4943", "patch": "@@ -88,6 +88,7 @@ typedef struct ao_ref_s\n \n /* In tree-ssa-alias.c  */\n extern void ao_ref_init (ao_ref *, tree);\n+extern void ao_ref_init_from_ptr_and_size (ao_ref *, tree, tree);\n extern tree ao_ref_base (ao_ref *);\n extern alias_set_type ao_ref_alias_set (ao_ref *);\n extern bool ptr_deref_may_alias_global_p (tree);"}]}