{"sha": "7e169899559dd04cbde3bf6e0599720e6918a461", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UxNjk4OTk1NTlkZDA0Y2JkZTNiZjZlMDU5OTcyMGU2OTE4YTQ2MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-09-11T19:14:51Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-09-11T19:14:51Z"}, "message": "utils.c (maybe_unconstrained_array): In the reference to unconstrained array case, deal with each branch of a COND_EXPR.\n\n\t* gcc-interface/utils.c (maybe_unconstrained_array): In the reference\n\tto unconstrained array case, deal with each branch of a COND_EXPR.\n\t* gcc-interface/utils2.c (build_allocator): Deal with each branch of\n\ta COND_EXPR in the initializer, if present.\n\nFrom-SVN: r178766", "tree": {"sha": "f19f0298aa8dad59a5d734a4bb0796ab0a2169e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f19f0298aa8dad59a5d734a4bb0796ab0a2169e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e169899559dd04cbde3bf6e0599720e6918a461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e169899559dd04cbde3bf6e0599720e6918a461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e169899559dd04cbde3bf6e0599720e6918a461", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e169899559dd04cbde3bf6e0599720e6918a461/comments", "author": null, "committer": null, "parents": [{"sha": "819a653eee396dc4db95ddc3c87805acab08c2de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/819a653eee396dc4db95ddc3c87805acab08c2de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/819a653eee396dc4db95ddc3c87805acab08c2de"}], "stats": {"total": 82, "additions": 71, "deletions": 11}, "files": [{"sha": "fd84feb80642415c0af3d2a01f86287b667e8753", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e169899559dd04cbde3bf6e0599720e6918a461/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e169899559dd04cbde3bf6e0599720e6918a461/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7e169899559dd04cbde3bf6e0599720e6918a461", "patch": "@@ -1,3 +1,10 @@\n+2011-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (maybe_unconstrained_array): In the reference\n+\tto unconstrained array case, deal with each branch of a COND_EXPR.\n+\t* gcc-interface/utils2.c (build_allocator): Deal with each branch of\n+\ta COND_EXPR in the initializer, if present.\n+\n 2011-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (maybe_pad_type): Do not try to change the form"}, {"sha": "0176c3ea0c43fc5f01c35c62eb932f5ab664dc18", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e169899559dd04cbde3bf6e0599720e6918a461/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e169899559dd04cbde3bf6e0599720e6918a461/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=7e169899559dd04cbde3bf6e0599720e6918a461", "patch": "@@ -4241,22 +4241,44 @@ tree\n maybe_unconstrained_array (tree exp)\n {\n   enum tree_code code = TREE_CODE (exp);\n-  tree new_exp;\n \n   switch (TREE_CODE (TREE_TYPE (exp)))\n     {\n     case UNCONSTRAINED_ARRAY_TYPE:\n       if (code == UNCONSTRAINED_ARRAY_REF)\n \t{\n-\t  new_exp = TREE_OPERAND (exp, 0);\n-\t  new_exp\n-\t    = build_unary_op (INDIRECT_REF, NULL_TREE,\n-\t\t\t      build_component_ref (new_exp, NULL_TREE,\n-\t\t\t\t\t\t   TYPE_FIELDS\n-\t\t\t\t\t\t   (TREE_TYPE (new_exp)),\n-\t\t\t\t\t\t   false));\n-\t  TREE_READONLY (new_exp) = TREE_READONLY (exp);\n-\t  return new_exp;\n+\t  const bool read_only = TREE_READONLY (exp);\n+\t  exp = TREE_OPERAND (exp, 0);\n+\t  if (TREE_CODE (exp) == COND_EXPR)\n+\t    {\n+\t      tree op1\n+\t\t= build_unary_op (INDIRECT_REF, NULL_TREE,\n+\t\t\t\t  build_component_ref (TREE_OPERAND (exp, 1),\n+\t\t\t\t\t\t       NULL_TREE,\n+\t\t\t\t\t\t       TYPE_FIELDS\n+\t\t\t\t\t\t       (TREE_TYPE (exp)),\n+\t\t\t\t\t\t       false));\n+\t      tree op2\n+\t\t= build_unary_op (INDIRECT_REF, NULL_TREE,\n+\t\t\t\t  build_component_ref (TREE_OPERAND (exp, 2),\n+\t\t\t\t\t\t       NULL_TREE,\n+\t\t\t\t\t\t       TYPE_FIELDS\n+\t\t\t\t\t\t       (TREE_TYPE (exp)),\n+\t\t\t\t\t\t       false));\n+\n+\t      exp = build3 (COND_EXPR,\n+\t\t\t    TREE_TYPE (TREE_TYPE (TYPE_FIELDS\n+\t\t\t\t\t          (TREE_TYPE (exp)))),\n+\t\t\t    TREE_OPERAND (exp, 0), op1, op2);\n+\t    }\n+\t  else\n+\t    exp = build_unary_op (INDIRECT_REF, NULL_TREE,\n+\t\t\t\t  build_component_ref (exp, NULL_TREE,\n+\t\t\t\t\t\t       TYPE_FIELDS\n+\t\t\t\t\t\t       (TREE_TYPE (exp)),\n+\t\t\t\t\t\t       false));\n+\t  TREE_READONLY (exp) = read_only;\n+\t  return exp;\n \t}\n \n       else if (code == NULL_EXPR)\n@@ -4270,7 +4292,8 @@ maybe_unconstrained_array (tree exp)\n \t it contains a template.  */\n       if (TYPE_PADDING_P (TREE_TYPE (exp)))\n \t{\n-\t  new_exp = convert (TREE_TYPE (TYPE_FIELDS (TREE_TYPE (exp))), exp);\n+\t  tree new_exp\n+\t    = convert (TREE_TYPE (TYPE_FIELDS (TREE_TYPE (exp))), exp);\n \t  if (TREE_CODE (TREE_TYPE (new_exp)) == RECORD_TYPE\n \t      && TYPE_CONTAINS_TEMPLATE_P (TREE_TYPE (new_exp)))\n \t    return"}, {"sha": "87cb269a140f7842316bc21a765c822c90887d9e", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e169899559dd04cbde3bf6e0599720e6918a461/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e169899559dd04cbde3bf6e0599720e6918a461/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=7e169899559dd04cbde3bf6e0599720e6918a461", "patch": "@@ -2046,6 +2046,16 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n   if (init && TREE_CODE (init) == NULL_EXPR)\n     return build1 (NULL_EXPR, result_type, TREE_OPERAND (init, 0));\n \n+  /* If the initializer, if present, is a COND_EXPR, deal with each branch.  */\n+  else if (init && TREE_CODE (init) == COND_EXPR)\n+    return build3 (COND_EXPR, result_type, TREE_OPERAND (init, 0),\n+\t\t   build_allocator (type, TREE_OPERAND (init, 1), result_type,\n+\t\t\t\t    gnat_proc, gnat_pool, gnat_node,\n+\t\t\t\t    ignore_init_type),\n+\t\t   build_allocator (type, TREE_OPERAND (init, 2), result_type,\n+\t\t\t\t    gnat_proc, gnat_pool, gnat_node,\n+\t\t\t\t    ignore_init_type));\n+\n   /* If RESULT_TYPE is a fat or thin pointer, set SIZE to be the sum of the\n      sizes of the object and its template.  Allocate the whole thing and\n      fill in the parts that are known.  */"}, {"sha": "3544a279972f3bda6a566b013ad7a4f49037349f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e169899559dd04cbde3bf6e0599720e6918a461/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e169899559dd04cbde3bf6e0599720e6918a461/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e169899559dd04cbde3bf6e0599720e6918a461", "patch": "@@ -1,3 +1,7 @@\n+2011-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/cond_expr2.ad[sb]: New test.\n+\n 2011-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/atomic5.ad[sb]: New test."}, {"sha": "02e3ee3826622a493245dc5aff6f38f500ef7920", "filename": "gcc/testsuite/gnat.dg/cond_expr2.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e169899559dd04cbde3bf6e0599720e6918a461/gcc%2Ftestsuite%2Fgnat.dg%2Fcond_expr2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e169899559dd04cbde3bf6e0599720e6918a461/gcc%2Ftestsuite%2Fgnat.dg%2Fcond_expr2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcond_expr2.adb?ref=7e169899559dd04cbde3bf6e0599720e6918a461", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnat12\" }\n+\n+package body Cond_Expr2 is\n+\n+  function F (X : integer) return String is\n+  begin\n+    return (if X > 0 then \"positive\" else \"negative\");\n+  end;\n+\n+end Cond_Expr2;"}, {"sha": "11c8229746513eaa983d4a25e3ecb4d8f41b9293", "filename": "gcc/testsuite/gnat.dg/cond_expr2.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e169899559dd04cbde3bf6e0599720e6918a461/gcc%2Ftestsuite%2Fgnat.dg%2Fcond_expr2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e169899559dd04cbde3bf6e0599720e6918a461/gcc%2Ftestsuite%2Fgnat.dg%2Fcond_expr2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcond_expr2.ads?ref=7e169899559dd04cbde3bf6e0599720e6918a461", "patch": "@@ -0,0 +1,5 @@\n+package Cond_Expr2 is\n+\n+  function F (X : integer) return String;\n+\n+end Cond_Expr2;"}]}