{"sha": "894e9d29adadc13e9841f43df32a07939480846d", "node_id": "C_kwDOANBUbNoAKDg5NGU5ZDI5YWRhZGMxM2U5ODQxZjQzZGYzMmEwNzkzOTQ4MDg0NmQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-10T16:17:52Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-10T16:51:03Z"}, "message": "Handle generic Slices and Arrays\n\nSlices and Arrays are covariant types which means they can contain elements\nwhich bind generics such as ADT or FnTypes. This means substitutions can be\nrecursive and this gives the typechecker a chance to handle this recursion\non these types.", "tree": {"sha": "79d5a16c370b33a5082597aa160766bff658b8ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79d5a16c370b33a5082597aa160766bff658b8ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/894e9d29adadc13e9841f43df32a07939480846d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894e9d29adadc13e9841f43df32a07939480846d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/894e9d29adadc13e9841f43df32a07939480846d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894e9d29adadc13e9841f43df32a07939480846d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a620a228c1d79d4725efd5d6ed5f0ebe398e6787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a620a228c1d79d4725efd5d6ed5f0ebe398e6787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a620a228c1d79d4725efd5d6ed5f0ebe398e6787"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "5f1781635cce97193dcf98fe2e42e36dce7b8721", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894e9d29adadc13e9841f43df32a07939480846d/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894e9d29adadc13e9841f43df32a07939480846d/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=894e9d29adadc13e9841f43df32a07939480846d", "patch": "@@ -221,11 +221,19 @@ class SubstMapperInternal : public TyTy::TyVisitor\n     resolved = type.handle_substitions (mappings);\n   }\n \n+  void visit (TyTy::ArrayType &type) override\n+  {\n+    resolved = type.handle_substitions (mappings);\n+  }\n+\n+  void visit (TyTy::SliceType &type) override\n+  {\n+    resolved = type.handle_substitions (mappings);\n+  }\n+\n   // nothing to do for these\n   void visit (TyTy::InferType &) override { gcc_unreachable (); }\n   void visit (TyTy::FnPtr &) override { gcc_unreachable (); }\n-  void visit (TyTy::ArrayType &) override { gcc_unreachable (); }\n-  void visit (TyTy::SliceType &) override { gcc_unreachable (); }\n   void visit (TyTy::BoolType &) override { gcc_unreachable (); }\n   void visit (TyTy::IntType &) override { gcc_unreachable (); }\n   void visit (TyTy::UintType &) override { gcc_unreachable (); }"}, {"sha": "8d5cc5e511a216d5d080d709fc41207f992dad7e", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894e9d29adadc13e9841f43df32a07939480846d/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894e9d29adadc13e9841f43df32a07939480846d/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=894e9d29adadc13e9841f43df32a07939480846d", "patch": "@@ -1508,6 +1508,22 @@ ArrayType::clone () const\n \t\t\telement_type, get_combined_refs ());\n }\n \n+ArrayType *\n+ArrayType::handle_substitions (SubstitutionArgumentMappings mappings)\n+{\n+  auto mappings_table = Analysis::Mappings::get ();\n+\n+  ArrayType *ref = static_cast<ArrayType *> (clone ());\n+  ref->set_ty_ref (mappings_table->get_next_hir_id ());\n+\n+  // might be &T or &ADT so this needs to be recursive\n+  auto base = ref->get_element_type ();\n+  BaseType *concrete = Resolver::SubstMapperInternal::Resolve (base, mappings);\n+  ref->element_type = TyVar (concrete->get_ty_ref ());\n+\n+  return ref;\n+}\n+\n void\n SliceType::accept_vis (TyVisitor &vis)\n {\n@@ -1581,6 +1597,22 @@ SliceType::clone () const\n \t\t\tget_combined_refs ());\n }\n \n+SliceType *\n+SliceType::handle_substitions (SubstitutionArgumentMappings mappings)\n+{\n+  auto mappings_table = Analysis::Mappings::get ();\n+\n+  SliceType *ref = static_cast<SliceType *> (clone ());\n+  ref->set_ty_ref (mappings_table->get_next_hir_id ());\n+\n+  // might be &T or &ADT so this needs to be recursive\n+  auto base = ref->get_element_type ();\n+  BaseType *concrete = Resolver::SubstMapperInternal::Resolve (base, mappings);\n+  ref->element_type = TyVar (concrete->get_ty_ref ());\n+\n+  return ref;\n+}\n+\n void\n BoolType::accept_vis (TyVisitor &vis)\n {"}, {"sha": "82262abab0926de36dbc1abee1abf08b64df6cbb", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894e9d29adadc13e9841f43df32a07939480846d/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894e9d29adadc13e9841f43df32a07939480846d/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=894e9d29adadc13e9841f43df32a07939480846d", "patch": "@@ -1665,6 +1665,8 @@ class ArrayType : public BaseType\n \n   HIR::Expr &get_capacity_expr () const { return capacity_expr; }\n \n+  ArrayType *handle_substitions (SubstitutionArgumentMappings mappings);\n+\n private:\n   TyVar element_type;\n   HIR::Expr &capacity_expr;\n@@ -1710,6 +1712,8 @@ class SliceType : public BaseType\n     return get_element_type ()->is_concrete ();\n   }\n \n+  SliceType *handle_substitions (SubstitutionArgumentMappings mappings);\n+\n private:\n   TyVar element_type;\n };"}]}