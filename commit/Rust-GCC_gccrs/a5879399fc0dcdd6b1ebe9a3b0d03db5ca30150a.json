{"sha": "a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU4NzkzOTlmYzBkY2RkNmIxZWJlOWEzYjBkMDNkYjVjYTMwMTUwYQ==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-02-07T11:14:43Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-03-02T16:42:39Z"}, "message": "amdgcn: Extend reductions to all types\n\nAdd support for V64DFmode addition, and V64DImode min, max.  There's no\ndirect hardware support for these, so we use regular vector instructions\nand separate lane shift instructions.\n\nAlso add support for V64QI and V64HI reductions. Some of these require\nadditional extends and truncates, because AMD GCN has 32-bit vector lanes.\n\n2020-03-02  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/gcn-valu.md (dpp_move<mode>): New.\n\t(reduc_insn): Use 'U' and 'B' operand codes.\n\t(reduc_<reduc_op>_scal_<mode>): Allow all types.\n\t(reduc_<reduc_op>_scal_v64di): Delete.\n\t(*<reduc_op>_dpp_shr_<mode>): Allow all 1reg types.\n\t(*plus_carry_dpp_shr_v64si): Change to ...\n\t(*plus_carry_dpp_shr_<mode>): ... this and allow all 1reg int types.\n\t(mov_from_lane63_v64di): Change to ...\n\t(mov_from_lane63_<mode>): ... this, and allow all 64-bit modes.\n\t* config/gcn/gcn.c (gcn_expand_dpp_shr_insn): Increase buffer size.\n\tSupport UNSPEC_MOV_DPP_SHR output formats.\n\t(gcn_expand_reduc_scalar): Add \"use_moves\" reductions.\n\tAdd \"use_extends\" reductions.\n\t(print_operand_address): Add 'I' and 'U' codes.\n\t* config/gcn/gcn.md (unspec): Add UNSPEC_MOV_DPP_SHR.", "tree": {"sha": "1f0a536919b0cc8d9bafa57461602ea40557688e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f0a536919b0cc8d9bafa57461602ea40557688e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ce38183001095c804b45bab0370ff50b34f886f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ce38183001095c804b45bab0370ff50b34f886f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ce38183001095c804b45bab0370ff50b34f886f"}], "stats": {"total": 206, "additions": 147, "deletions": 59}, "files": [{"sha": "0d65434de4d5c68ee51bda430cb34c6094841092", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a", "patch": "@@ -1,3 +1,21 @@\n+2020-03-02  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (dpp_move<mode>): New.\n+\t(reduc_insn): Use 'U' and 'B' operand codes.\n+\t(reduc_<reduc_op>_scal_<mode>): Allow all types.\n+\t(reduc_<reduc_op>_scal_v64di): Delete.\n+\t(*<reduc_op>_dpp_shr_<mode>): Allow all 1reg types.\n+\t(*plus_carry_dpp_shr_v64si): Change to ...\n+\t(*plus_carry_dpp_shr_<mode>): ... this and allow all 1reg int types.\n+\t(mov_from_lane63_v64di): Change to ...\n+\t(mov_from_lane63_<mode>): ... this, and allow all 64-bit modes.\n+\t* config/gcn/gcn.c (gcn_expand_dpp_shr_insn): Increase buffer size.\n+\tSupport UNSPEC_MOV_DPP_SHR output formats.\n+\t(gcn_expand_reduc_scalar): Add \"use_moves\" reductions.\n+\tAdd \"use_extends\" reductions.\n+\t(print_operand_address): Add 'I' and 'U' codes.\n+\t* config/gcn/gcn.md (unspec): Add UNSPEC_MOV_DPP_SHR.\n+\n 2020-03-02  Martin Liska  <mliska@suse.cz>\n \n \t* lto-wrapper.c: Fix typo in comment about"}, {"sha": "a8034f77798194cc1289a33e1c2625cf63bff291", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 37, "deletions": 39, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a", "patch": "@@ -985,6 +985,20 @@\n   [(set_attr \"type\" \"vmult\")\n    (set_attr \"length\" \"24\")])\n \n+(define_insn \"@dpp_move<mode>\"\n+  [(set (match_operand:VEC_REG_MODE 0 \"register_operand\"    \"=v\")\n+\t(unspec:VEC_REG_MODE\n+\t  [(match_operand:VEC_REG_MODE 1 \"register_operand\" \" v\")\n+\t   (match_operand:SI 2 \"const_int_operand\"\t    \" n\")]\n+\t  UNSPEC_MOV_DPP_SHR))]\n+  \"\"\n+  {\n+    return gcn_expand_dpp_shr_insn (<MODE>mode, \"v_mov_b32\",\n+\t\t\t\t    UNSPEC_MOV_DPP_SHR, INTVAL (operands[2]));\n+  }\n+  [(set_attr \"type\" \"vop_dpp\")\n+   (set_attr \"length\" \"16\")])\n+\n ;; }}}\n ;; {{{ ALU special case: add/sub\n \n@@ -2969,15 +2983,15 @@\n \t\t\t     (UNSPEC_SMAX_DPP_SHR \"v_max%i0\")\n \t\t\t     (UNSPEC_UMIN_DPP_SHR \"v_min%u0\")\n \t\t\t     (UNSPEC_UMAX_DPP_SHR \"v_max%u0\")\n-\t\t\t     (UNSPEC_PLUS_DPP_SHR \"v_add%u0\")\n-\t\t\t     (UNSPEC_AND_DPP_SHR  \"v_and%b0\")\n-\t\t\t     (UNSPEC_IOR_DPP_SHR  \"v_or%b0\")\n-\t\t\t     (UNSPEC_XOR_DPP_SHR  \"v_xor%b0\")])\n+\t\t\t     (UNSPEC_PLUS_DPP_SHR \"v_add%U0\")\n+\t\t\t     (UNSPEC_AND_DPP_SHR  \"v_and%B0\")\n+\t\t\t     (UNSPEC_IOR_DPP_SHR  \"v_or%B0\")\n+\t\t\t     (UNSPEC_XOR_DPP_SHR  \"v_xor%B0\")])\n \n (define_expand \"reduc_<reduc_op>_scal_<mode>\"\n   [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\")\n \t(unspec:<SCALAR_MODE>\n-\t  [(match_operand:VEC_1REG_MODE 1 \"register_operand\")]\n+\t  [(match_operand:VEC_ALLREG_MODE 1 \"register_operand\")]\n \t  REDUC_UNSPEC))]\n   \"\"\n   {\n@@ -2990,29 +3004,15 @@\n     DONE;\n   })\n \n-(define_expand \"reduc_<reduc_op>_scal_v64di\"\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(unspec:DI\n-\t  [(match_operand:V64DI 1 \"register_operand\")]\n-\t  REDUC_2REG_UNSPEC))]\n-  \"\"\n-  {\n-    rtx tmp = gcn_expand_reduc_scalar (V64DImode, operands[1],\n-\t\t\t\t       <reduc_unspec>);\n-\n-    /* The result of the reduction is in lane 63 of tmp.  */\n-    emit_insn (gen_mov_from_lane63_v64di (operands[0], tmp));\n-\n-    DONE;\n-  })\n \n (define_insn \"*<reduc_op>_dpp_shr_<mode>\"\n-  [(set (match_operand:VEC_1REG_MODE 0 \"register_operand\"   \"=v\")\n-\t(unspec:VEC_1REG_MODE\n-\t  [(match_operand:VEC_1REG_MODE 1 \"register_operand\" \"v\")\n-\t   (match_operand:VEC_1REG_MODE 2 \"register_operand\" \"v\")\n-\t   (match_operand:SI 3 \"const_int_operand\"\t     \"n\")]\n+  [(set (match_operand:VEC_ALL1REG_MODE 0 \"register_operand\"   \"=v\")\n+\t(unspec:VEC_ALL1REG_MODE\n+\t  [(match_operand:VEC_ALL1REG_MODE 1 \"register_operand\" \"v\")\n+\t   (match_operand:VEC_ALL1REG_MODE 2 \"register_operand\" \"v\")\n+\t   (match_operand:SI 3 \"const_int_operand\"\t\t\"n\")]\n \t  REDUC_UNSPEC))]\n+  ; GCN3 requires a carry out, GCN5 not\n   \"!(TARGET_GCN3 && SCALAR_INT_MODE_P (<SCALAR_MODE>mode)\n      && <reduc_unspec> == UNSPEC_PLUS_DPP_SHR)\"\n   {\n@@ -3051,18 +3051,17 @@\n \n ; Special cases for addition.\n \n-(define_insn \"*plus_carry_dpp_shr_v64si\"\n-  [(set (match_operand:V64SI 0 \"register_operand\"   \"=v\")\n-\t(unspec:V64SI\n-\t  [(match_operand:V64SI 1 \"register_operand\" \"v\")\n-\t   (match_operand:V64SI 2 \"register_operand\" \"v\")\n-\t   (match_operand:SI 3 \"const_int_operand\"   \"n\")]\n+(define_insn \"*plus_carry_dpp_shr_<mode>\"\n+  [(set (match_operand:VEC_ALL1REG_INT_MODE 0 \"register_operand\"   \"=v\")\n+\t(unspec:VEC_ALL1REG_INT_MODE\n+\t  [(match_operand:VEC_ALL1REG_INT_MODE 1 \"register_operand\" \"v\")\n+\t   (match_operand:VEC_ALL1REG_INT_MODE 2 \"register_operand\" \"v\")\n+\t   (match_operand:SI 3 \"const_int_operand\"\t\t    \"n\")]\n \t  UNSPEC_PLUS_CARRY_DPP_SHR))\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   {\n-    const char *insn = TARGET_GCN3 ? \"v_add%u0\" : \"v_add_co%u0\";\n-    return gcn_expand_dpp_shr_insn (V64SImode, insn,\n+    return gcn_expand_dpp_shr_insn (V64SImode, \"v_add%^_u32\",\n \t\t\t\t    UNSPEC_PLUS_CARRY_DPP_SHR,\n \t\t\t\t    INTVAL (operands[3]));\n   }\n@@ -3080,8 +3079,7 @@\n    (clobber (reg:DI VCC_REG))]\n   \"\"\n   {\n-    const char *insn = TARGET_GCN3 ? \"v_addc%u0\" : \"v_addc_co%u0\";\n-    return gcn_expand_dpp_shr_insn (V64SImode, insn,\n+    return gcn_expand_dpp_shr_insn (V64SImode, \"v_addc%^_u32\",\n \t\t\t\t    UNSPEC_PLUS_CARRY_IN_DPP_SHR,\n \t\t\t\t    INTVAL (operands[3]));\n   }\n@@ -3134,10 +3132,10 @@\n    (set_attr \"exec\" \"none,*\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"mov_from_lane63_v64di\"\n-  [(set (match_operand:DI 0 \"register_operand\"\t     \"=Sg,v\")\n-\t(unspec:DI\n-\t  [(match_operand:V64DI 1 \"register_operand\"   \"v,v\")]\n+(define_insn \"mov_from_lane63_<mode>\"\n+  [(set (match_operand:<SCALAR_MODE> 0 \"register_operand\"  \"=Sg,v\")\n+\t(unspec:<SCALAR_MODE>\n+\t  [(match_operand:VEC_2REG_MODE 1 \"register_operand\" \"v,v\")]\n \t  UNSPEC_MOV_FROM_LANE63))]\n   \"\"\n   \"@"}, {"sha": "12438cf6eb4fc713ecad6b8753c419aaa32ec4d3", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 91, "deletions": 20, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a", "patch": "@@ -4121,7 +4121,7 @@ char *\n gcn_expand_dpp_shr_insn (machine_mode mode, const char *insn,\n \t\t\t int unspec, int shift)\n {\n-  static char buf[64];\n+  static char buf[128];\n   const char *dpp;\n   const char *vcc_in = \"\";\n   const char *vcc_out = \"\";\n@@ -4162,7 +4162,13 @@ gcn_expand_dpp_shr_insn (machine_mode mode, const char *insn,\n       gcc_unreachable ();\n     }\n \n-  sprintf (buf, \"%s\\t%%0%s, %%1, %%2%s %s\", insn, vcc_out, vcc_in, dpp);\n+  if (unspec == UNSPEC_MOV_DPP_SHR && vgpr_2reg_mode_p (mode))\n+    sprintf (buf, \"%s\\t%%L0, %%L1 %s\\n\\t%s\\t%%H0, %%H1 %s\",\n+\t     insn, dpp, insn, dpp);\n+  else if (unspec == UNSPEC_MOV_DPP_SHR)\n+    sprintf (buf, \"%s\\t%%0, %%1 %s\", insn, dpp);\n+  else\n+    sprintf (buf, \"%s\\t%%0%s, %%1, %%2%s %s\", insn, vcc_out, vcc_in, dpp);\n \n   return buf;\n }\n@@ -4176,44 +4182,89 @@ gcn_expand_dpp_shr_insn (machine_mode mode, const char *insn,\n rtx\n gcn_expand_reduc_scalar (machine_mode mode, rtx src, int unspec)\n {\n-  rtx tmp = gen_reg_rtx (mode);\n+  machine_mode orig_mode = mode;\n+  bool use_moves = (((unspec == UNSPEC_SMIN_DPP_SHR\n+\t\t      || unspec == UNSPEC_SMAX_DPP_SHR\n+\t\t      || unspec == UNSPEC_UMIN_DPP_SHR\n+\t\t      || unspec == UNSPEC_UMAX_DPP_SHR)\n+\t\t     && mode == V64DImode)\n+\t\t    || (unspec == UNSPEC_PLUS_DPP_SHR\n+\t\t\t&& mode == V64DFmode));\n+  rtx_code code = (unspec == UNSPEC_SMIN_DPP_SHR ? SMIN\n+\t\t   : unspec == UNSPEC_SMAX_DPP_SHR ? SMAX\n+\t\t   : unspec == UNSPEC_UMIN_DPP_SHR ? UMIN\n+\t\t   : unspec == UNSPEC_UMAX_DPP_SHR ? UMAX\n+\t\t   : unspec == UNSPEC_PLUS_DPP_SHR ? PLUS\n+\t\t   : UNKNOWN);\n+  bool use_extends = ((unspec == UNSPEC_SMIN_DPP_SHR\n+\t\t       || unspec == UNSPEC_SMAX_DPP_SHR\n+\t\t       || unspec == UNSPEC_UMIN_DPP_SHR\n+\t\t       || unspec == UNSPEC_UMAX_DPP_SHR)\n+\t\t      && (mode == V64QImode\n+\t\t\t  || mode == V64HImode));\n+  bool unsignedp = (unspec == UNSPEC_UMIN_DPP_SHR\n+\t\t    || unspec == UNSPEC_UMAX_DPP_SHR);\n   bool use_plus_carry = unspec == UNSPEC_PLUS_DPP_SHR\n \t\t\t&& GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n \t\t\t&& (TARGET_GCN3 || mode == V64DImode);\n \n   if (use_plus_carry)\n     unspec = UNSPEC_PLUS_CARRY_DPP_SHR;\n \n+  if (use_extends)\n+    {\n+      rtx tmp = gen_reg_rtx (V64SImode);\n+      convert_move (tmp, src, unsignedp);\n+      src = tmp;\n+      mode = V64SImode;\n+    }\n+\n   /* Perform reduction by first performing the reduction operation on every\n      pair of lanes, then on every pair of results from the previous\n      iteration (thereby effectively reducing every 4 lanes) and so on until\n      all lanes are reduced.  */\n+  rtx in, out = src;\n   for (int i = 0, shift = 1; i < 6; i++, shift <<= 1)\n     {\n       rtx shift_val = gen_rtx_CONST_INT (VOIDmode, shift);\n-      rtx insn = gen_rtx_SET (tmp,\n-\t\t\t      gen_rtx_UNSPEC (mode,\n-\t\t\t\t\t      gen_rtvec (3,\n-\t\t\t\t\t\t\t src, src, shift_val),\n-\t\t\t\t\t      unspec));\n-\n-      /* Add clobber for instructions that set the carry flags.  */\n-      if (use_plus_carry)\n+      in = out;\n+      out = gen_reg_rtx (mode);\n+\n+      if (use_moves)\n \t{\n-\t  rtx clobber = gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t\t\t gen_rtx_REG (DImode, VCC_REG));\n-\t  insn = gen_rtx_PARALLEL (VOIDmode,\n-\t\t\t\t   gen_rtvec (2, insn, clobber));\n+\t  rtx tmp = gen_reg_rtx (mode);\n+\t  emit_insn (gen_dpp_move (mode, tmp, in, shift_val));\n+\t  emit_insn (gen_rtx_SET (out, gen_rtx_fmt_ee (code, mode, tmp, in)));\n \t}\n+      else\n+\t{\n+\t  rtx insn = gen_rtx_SET (out,\n+\t\t\t\t  gen_rtx_UNSPEC (mode,\n+\t\t\t\t\t\t  gen_rtvec (3, in, in,\n+\t\t\t\t\t\t\t     shift_val),\n+\t\t\t\t\t\t  unspec));\n+\n+\t  /* Add clobber for instructions that set the carry flags.  */\n+\t  if (use_plus_carry)\n+\t    {\n+\t      rtx clobber = gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t\t\t     gen_rtx_REG (DImode, VCC_REG));\n+\t      insn = gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t\t       gen_rtvec (2, insn, clobber));\n+\t    }\n \n-      emit_insn (insn);\n+\t  emit_insn (insn);\n+\t}\n+    }\n \n-      /* The source operands for every iteration after the first\n-\t   should be TMP.  */\n-      src = tmp;\n+  if (use_extends)\n+    {\n+      rtx tmp = gen_reg_rtx (orig_mode);\n+      convert_move (tmp, out, unsignedp);\n+      out = tmp;\n     }\n \n-  return tmp;\n+  return out;\n }\n \n /* Implement TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST.  */\n@@ -5442,7 +5493,9 @@ print_operand_address (FILE *file, rtx mem)\n    b - print operand size as untyped operand (b8/b16/b32/b64)\n    B - print operand size as SI/DI untyped operand (b32/b32/b32/b64)\n    i - print operand size as untyped operand (i16/b32/i64)\n+   I - print operand size as SI/DI untyped operand(i32/b32/i64)\n    u - print operand size as untyped operand (u16/u32/u64)\n+   U - print operand size as SI/DI untyped operand(u32/u64)\n    o - print operand size as memory access size for loads\n        (ubyte/ushort/dword/dwordx2/wordx3/dwordx4)\n    s - print operand size as memory access size for stores\n@@ -5537,9 +5590,12 @@ print_operand (FILE *file, rtx x, int code)\n       fputs (\")\", file);\n       return;\n     case 'i':\n+    case 'I':\n     case 'u':\n+    case 'U':\n       {\n \tbool signed_p = code == 'i';\n+\tbool min32_p = code == 'I' || code == 'U';\n \tconst char *s = \"\";\n \tmachine_mode mode = GET_MODE (x);\n \tif (VECTOR_MODE_P (mode))\n@@ -5573,6 +5629,21 @@ print_operand (FILE *file, rtx x, int code)\n \t      output_operand_lossage (\"invalid operand %%xn code\");\n \t      return;\n \t    }\n+\telse if (min32_p)\n+\t  switch (GET_MODE_SIZE (mode))\n+\t    {\n+\t    case 1:\n+\t    case 2:\n+\t    case 4:\n+\t      s = signed_p ? \"_i32\" : \"_u32\";\n+\t      break;\n+\t    case 8:\n+\t      s = signed_p ? \"_i64\" : \"_u64\";\n+\t      break;\n+\t    default:\n+\t      output_operand_lossage (\"invalid operand %%xn code\");\n+\t      return;\n+\t    }\n \telse\n \t  switch (GET_MODE_SIZE (mode))\n \t    {"}, {"sha": "d1a94cbe7b075471c795a890c003fc6ceedecebb", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=a5879399fc0dcdd6b1ebe9a3b0d03db5ca30150a", "patch": "@@ -76,6 +76,7 @@\n   UNSPEC_PLUS_DPP_SHR\n   UNSPEC_PLUS_CARRY_DPP_SHR UNSPEC_PLUS_CARRY_IN_DPP_SHR\n   UNSPEC_AND_DPP_SHR UNSPEC_IOR_DPP_SHR UNSPEC_XOR_DPP_SHR\n+  UNSPEC_MOV_DPP_SHR\n   UNSPEC_MOV_FROM_LANE63\n   UNSPEC_GATHER\n   UNSPEC_SCATTER])"}]}