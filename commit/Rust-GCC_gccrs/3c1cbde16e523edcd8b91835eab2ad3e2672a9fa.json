{"sha": "3c1cbde16e523edcd8b91835eab2ad3e2672a9fa", "node_id": "C_kwDOANBUbNoAKDNjMWNiZGUxNmU1MjNlZGNkOGI5MTgzNWVhYjJhZDNlMjY3MmE5ZmE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-05T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-05T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "e30fab9239b22e064cb7daf931708d2c34dc140e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e30fab9239b22e064cb7daf931708d2c34dc140e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa/comments", "author": null, "committer": null, "parents": [{"sha": "6e3419529d4e3284172f9965b4993b9f184f34d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e3419529d4e3284172f9965b4993b9f184f34d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e3419529d4e3284172f9965b4993b9f184f34d2"}], "stats": {"total": 257, "additions": 256, "deletions": 1}, "files": [{"sha": "c2a10852869454a16c6094736851fb03ea25f788", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=3c1cbde16e523edcd8b91835eab2ad3e2672a9fa", "patch": "@@ -1,3 +1,7 @@\n+2022-02-04  Martin Liska  <mliska@suse.cz>\n+\n+\t* fixinc.in: Use cd OLDDIR instead of cd .. .\n+\n 2022-02-03  Martin Liska  <mliska@suse.cz>\n \n \t* fixinc.in: Use mkdir -p rather that a loop."}, {"sha": "79bbf440cf2ed155793fd563ecbf880f914cfd7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c1cbde16e523edcd8b91835eab2ad3e2672a9fa", "patch": "@@ -1,3 +1,110 @@\n+2022-02-04  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.cc (resolve_vec_mul): Accept args and types\n+\tparameters instead of arglist and nargs.  Simplify accordingly.  Remove\n+\tunnecessary test for argument count mismatch.\n+\t(resolve_vec_cmpne): Likewise.\n+\t(resolve_vec_adde_sube): Likewise.\n+\t(resolve_vec_addec_subec): Likewise.\n+\t(altivec_resolve_overloaded_builtin): Move overload special handling\n+\tafter the gathering of arguments into args[] and types[] and the test\n+\tfor correct number of arguments.  Don't perform the test for correct\n+\tnumber of arguments for certain special cases.  Call the other special\n+\tcases with args and types instead of arglist and nargs.\n+\n+2022-02-04  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/100808\n+\t* doc/extend.texi (Basic PowerPC Built-in Functions Available on ISA\n+\t3.1): Provide consistent type names.  Remove unnecessary semicolons.\n+\tFix bad line breaks.\n+\n+2022-02-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/104380\n+\t* config/rs6000/rs6000.cc (rs6000_mangle_decl_assembler_name): Also\n+\tadjust mangling of __builtin*printf_chk.\n+\n+2022-02-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/cpp.texi (Variadic Macros): Replace C++2a with C++20.\n+\n+2022-02-04  Richard Biener  <rguenther@suse.de>\n+\t    Bin Cheng   <bin.cheng@linux.alibaba.com>\n+\n+\tPR tree-optimization/100499\n+\t* fold-const.h (multiple_of_p): Add nowrap parameter, defaulted\n+\tto true.\n+\t* fold-const.cc (multiple_of_p): Likewise.  Honor it for\n+\tMULT_EXPR, PLUS_EXPR and MINUS_EXPR and pass it along,\n+\tswitching to false for conversions.\n+\t* tree-ssa-loop-niter.cc (number_of_iterations_ne): Do not\n+\tclaim the outermost expression does not wrap when calling\n+\tmultiple_of_p.  Refactor the check done to check the\n+\toriginal IV, avoiding a bias that might wrap.\n+\n+2022-02-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* fold-const.cc (multiple_of_p): Re-write and move LSHIFT_EXPR\n+\thandling.\n+\n+2022-02-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR debug/104366\n+\t* dwarf2out.cc (dwarf2out_finish): Empty base_types.\n+\t(dwarf2out_early_finish): Likewise.\n+\n+2022-02-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/104356\n+\t* match.pd (X / bool_range_Y is X): Add guard.\n+\t(X / X is one): Likewise.\n+\t(X / abs (X) is X < 0 ? -1 : 1): Likewise.\n+\t(X / -X is -1): Likewise.\n+\t(1 / X -> X == 1): Likewise.\n+\n+2022-02-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103641\n+\t* tree-vect-patterns.cc (vect_synth_mult_by_constant):\n+\tPass the vector mode to choose_mult_variant.\n+\n+2022-02-04  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR rtl-optimization/101885\n+\t* combine.cc (try_combine): When splitting a parallel into two\n+\tsequential sets, check not only that the first doesn't clobber\n+\tthe second but also that the second doesn't clobber the first.\n+\n+2022-02-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/90348\n+\tPR middle-end/104092\n+\t* tree-core.h (clobber_kind): New enum.\n+\t(tree_base::u::bits::address_space): Document use in CONSTRUCTORs.\n+\t* tree.h (CLOBBER_KIND): Add.\n+\t(build_clobber): Add clobber kind argument, defaulted to\n+\tCLOBBER_UNDEF.\n+\t* tree.cc (build_clobber): Likewise.\n+\t* gimple.h (gimple_clobber_p): New overload with specified kind.\n+\t* tree-streamer-in.cc (streamer_read_tree_bitfields): Stream\n+\tCLOBBER_KIND.\n+\t* tree-streamer-out.cc (streamer_write_tree_bitfields):\n+\tLikewise.\n+\t* tree-pretty-print.cc (dump_generic_node): Mark EOL CLOBBERs.\n+\t* gimplify.cc (gimplify_bind_expr): Build storage end-of-life clobbers\n+\twith CLOBBER_EOL.\n+\t(gimplify_target_expr): Likewise.\n+\t* tree-inline.cc (expand_call_inline): Likewise.\n+\t* tree-ssa-ccp.cc (insert_clobber_before_stack_restore): Likewise.\n+\t* gimple-ssa-warn-access.cc (pass_waccess::check_stmt): Only treat\n+\tCLOBBER_EOL clobbers as ending lifetime of storage.\n+\n+2022-02-04  Martin Sebor  <msebor@redhat.com>\n+\n+\t* pointer-query.h (pointer_query::cache_type): Use auto_vec for auto\n+\tcleanup.\n+\n 2022-02-03  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/104260"}, {"sha": "03a6142cf38f5ff43b599f992a85b03679e4bb92", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3c1cbde16e523edcd8b91835eab2ad3e2672a9fa", "patch": "@@ -1 +1 @@\n-20220204\n+20220205"}, {"sha": "99d72e0df29c91c0f02e9d829f3d8bb752c2994e", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=3c1cbde16e523edcd8b91835eab2ad3e2672a9fa", "patch": "@@ -1,3 +1,9 @@\n+2022-02-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/90348\n+\tPR middle-end/104092\n+\t* lto-common.cc (compare_tree_sccs_1): Compare CLOBBER_KIND.\n+\n 2022-02-02  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/104333"}, {"sha": "ee16e185b51f9afd6afa2be7575caf6527210b1a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c1cbde16e523edcd8b91835eab2ad3e2672a9fa", "patch": "@@ -1,3 +1,51 @@\n+2022-02-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/104380\n+\t* gcc.dg/pr104380.c: New test.\n+\n+2022-02-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/104356\n+\t* gnat.dg/opt97.adb: New test.\n+\n+2022-02-04  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/builtins-1.c: Limit -mbig.\n+\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-0.c: Limit -mbig.\n+\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-1.c: Limit -mbig.\n+\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-2.c: Remove target selector.\n+\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-3.c: Only powerpc*-linux.\n+\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-4.c: Only powerpc*-linux*.\n+\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-0.c: Limit -mbig.\n+\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-1.c: Limit -mbig.\n+\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-2.c: Remove target selector.\n+\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-3.c: Only powerpc*-linux*.\n+\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-4.c: Only powerpc*-linux*.\n+\n+2022-02-04  Richard Biener  <rguenther@suse.de>\n+\t    Bin Cheng   <bin.cheng@linux.alibaba.com>\n+\n+\tPR tree-optimization/100499\n+\t* gcc.dg/torture/pr100499-1.c: New testcase.\n+\t* gcc.dg/torture/pr100499-2.c: Likewise.\n+\t* gcc.dg/torture/pr100499-3.c: Likewise.\n+\n+2022-02-04  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR rtl-optimization/101885\n+\t* gcc.dg/pr101885.c: New test case.\n+\n+2022-02-04  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/104092\n+\t* gcc.target/aarch64/sve/acle/general/pr104092.c: New test.\n+\n+2022-02-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/90348\n+\tPR middle-end/104092\n+\t* gcc.dg/pr87052.c: Adjust.\n+\n 2022-02-03  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/104079"}, {"sha": "7905565c42088299f6d9ede9cd1ec983629b5908", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=3c1cbde16e523edcd8b91835eab2ad3e2672a9fa", "patch": "@@ -1,3 +1,15 @@\n+2022-02-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/allocate-1.f90: Remove spurious\n+\tSTOP of previous commit.\n+\n+2022-02-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/allocate-1.c (is_64bit_aligned): Renamed\n+\tfrom is_64bit_aligned_.\n+\t* testsuite/libgomp.fortran/allocate-1.f90: Fix interface decl\n+\tand use it, more implicit none, remove unused argument.\n+\n 2022-02-03  David Seifert  <soap@gentoo.org>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "1aac80133ae9adab5a1f12f1571a482db649f554", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1cbde16e523edcd8b91835eab2ad3e2672a9fa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3c1cbde16e523edcd8b91835eab2ad3e2672a9fa", "patch": "@@ -1,3 +1,81 @@\n+2022-02-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/filesystem/dir-common.h (_Dir_base::openat): Change return\n+\ttype to use portable posix::DIR alias.\n+\n+2022-02-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/c_compatibility/stdatomic.h [__clang__]: Use\n+\t#include_next <stdatomic.h>.\n+\n+2022-02-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/bits/fs_ops.h (fs::copy_file): Remove\n+\tnoexcept.\n+\t(fs::create_directories): Likewise.\n+\t(fs::remove_all): Likewise.\n+\t* src/filesystem/ops.cc (fs::copy_file): Remove noexcept.\n+\t(fs::create_directories): Likewise.\n+\t(fs::remove_all): Likewise.\n+\n+2022-02-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/104161\n+\t* acinclude.m4 (GLIBCXX_CHECK_FILESYSTEM_DEPS): Check for dirfd\n+\tand unlinkat.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* include/bits/fs_dir.h (recursive_directory_iterator): Declare\n+\tremove_all overloads as friends.\n+\t(recursive_directory_iterator::__erase): Declare new member\n+\tfunction.\n+\t* include/bits/fs_fwd.h (remove, remove_all): Declare.\n+\t* src/c++17/fs_dir.cc (_Dir): Add filename_only parameter to\n+\tconstructor. Pass file descriptor argument to base constructor.\n+\t(_Dir::dir_and_pathname, _Dir::open_subdir, _Dir::do_unlink)\n+\t(_Dir::unlink, _Dir::rmdir): Define new member functions.\n+\t(directory_iterator): Pass filename_only argument to _Dir\n+\tconstructor.\n+\t(recursive_directory_iterator::_Dir_stack): Adjust constructor\n+\tparameters to take a _Dir rvalue instead of creating one.\n+\t(_Dir_stack::orig): Add data member for storing original path.\n+\t(_Dir_stack::report_error): Define new member function.\n+\t(__directory_iterator_nofollow): Move here from dir-common.h and\n+\tfix value to be a power of two.\n+\t(__directory_iterator_filename_only): Define new constant.\n+\t(recursive_directory_iterator): Construct _Dir object and move\n+\tinto _M_dirs stack. Pass skip_permission_denied argument to first\n+\tadvance call.\n+\t(recursive_directory_iterator::increment): Use _Dir::open_subdir.\n+\t(recursive_directory_iterator::__erase): Define new member\n+\tfunction.\n+\t* src/c++17/fs_ops.cc (ErrorReporter, do_remove_all): Remove.\n+\t(fs::remove_all): Use new recursive_directory_iterator::__erase\n+\tmember function.\n+\t* src/filesystem/dir-common.h (_Dir_base): Add int parameter to\n+\tconstructor and use openat to implement nofollow semantics.\n+\t(_Dir_base::fdcwd, _Dir_base::set_close_on_exec, _Dir_base::openat):\n+\tDefine new member functions.\n+\t(__directory_iterator_nofollow): Move to fs_dir.cc.\n+\t* src/filesystem/dir.cc (_Dir): Pass file descriptor argument to\n+\tbase constructor.\n+\t(_Dir::dir_and_pathname, _Dir::open_subdir): Define new member\n+\tfunctions.\n+\t(recursive_directory_iterator::_Dir_stack): Adjust constructor\n+\tparameters to take a _Dir rvalue instead of creating one.\n+\t(recursive_directory_iterator): Check for new nofollow option.\n+\tConstruct _Dir object and move into _M_dirs stack. Pass\n+\tskip_permission_denied argument to first advance call.\n+\t(recursive_directory_iterator::increment): Use _Dir::open_subdir.\n+\t* src/filesystem/ops.cc (fs::remove_all): Use C++17 remove_all.\n+\n+2022-02-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/allocator.h: Qualify std::allocator_traits in\n+\tdeprecated warnings.\n+\t* libsupc++/exception (uncaught_exception): Add suggestion to\n+\tdeprecated warning.\n+\n 2022-02-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/c++17/fs_dir.cc (fs::recursive_directory_iterator::pop):"}]}