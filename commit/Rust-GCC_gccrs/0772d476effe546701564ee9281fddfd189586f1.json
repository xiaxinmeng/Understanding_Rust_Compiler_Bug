{"sha": "0772d476effe546701564ee9281fddfd189586f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc3MmQ0NzZlZmZlNTQ2NzAxNTY0ZWU5MjgxZmRkZmQxODk1ODZmMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-10-14T03:20:37Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-10-14T03:20:37Z"}, "message": "i386: Implement vec_perm_const<mode>.\n\nFrom-SVN: r179955", "tree": {"sha": "705eec7815466c67d53b2837ca3cd560759f373e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/705eec7815466c67d53b2837ca3cd560759f373e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0772d476effe546701564ee9281fddfd189586f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0772d476effe546701564ee9281fddfd189586f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0772d476effe546701564ee9281fddfd189586f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0772d476effe546701564ee9281fddfd189586f1/comments", "author": null, "committer": null, "parents": [{"sha": "f6293442ba64f9225c4643438bb385eb0c34087a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6293442ba64f9225c4643438bb385eb0c34087a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6293442ba64f9225c4643438bb385eb0c34087a"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "81d4f99582a1872efe8bfff10aba2d6b47898d63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0772d476effe546701564ee9281fddfd189586f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0772d476effe546701564ee9281fddfd189586f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0772d476effe546701564ee9281fddfd189586f1", "patch": "@@ -4,6 +4,11 @@\n \n \t* config/rs6000/spu.md (vec_permv16qi): New pattern.\n \n+\t* config/i386/i386.c (ix86_expand_vec_perm_const): New.\n+\t* config/i386/i386-protos.h: Update.\n+\t* config/i386/sse.md (VEC_PERM_CONST): New mode iterator.\n+\t(vec_perm_const<VEC_PERM_CONST>): New expander.\n+\n 2011-10-13  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/sse.md (vec_set<mode>): Change V_128 iterator mode"}, {"sha": "bdac6ff06664f4c198c7de0de7d58e99de24e534", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0772d476effe546701564ee9281fddfd189586f1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0772d476effe546701564ee9281fddfd189586f1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=0772d476effe546701564ee9281fddfd189586f1", "patch": "@@ -124,6 +124,7 @@ extern bool ix86_expand_fp_movcc (rtx[]);\n extern bool ix86_expand_fp_vcond (rtx[]);\n extern bool ix86_expand_int_vcond (rtx[]);\n extern void ix86_expand_vec_perm (rtx[]);\n+extern bool ix86_expand_vec_perm_const (rtx[]);\n extern void ix86_expand_sse_unpack (rtx[], bool, bool);\n extern bool ix86_expand_int_addcc (rtx[]);\n extern rtx ix86_expand_call (rtx, rtx, rtx, rtx, rtx, bool);"}, {"sha": "df6267b664c93c131ba27c6959be0e635af7fa71", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0772d476effe546701564ee9281fddfd189586f1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0772d476effe546701564ee9281fddfd189586f1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0772d476effe546701564ee9281fddfd189586f1", "patch": "@@ -36132,6 +36132,67 @@ ix86_expand_vec_perm_builtin (tree exp)\n   return CONST0_RTX (d.vmode);\n }\n \n+bool\n+ix86_expand_vec_perm_const (rtx operands[4])\n+{\n+  struct expand_vec_perm_d d;\n+  int i, nelt, which;\n+  rtx sel;\n+\n+  d.target = operands[0];\n+  d.op0 = operands[1];\n+  d.op1 = operands[2];\n+  sel = operands[3];\n+\n+  d.vmode = GET_MODE (d.target);\n+  gcc_assert (VECTOR_MODE_P (d.vmode));\n+  d.nelt = nelt = GET_MODE_NUNITS (d.vmode);\n+  d.testing_p = false;\n+\n+  gcc_assert (GET_CODE (sel) == CONST_VECTOR);\n+  gcc_assert (XVECLEN (sel, 0) == nelt);\n+\n+  for (i = which = 0; i < nelt; ++i)\n+    {\n+      rtx e = XVECEXP (sel, 0, i);\n+      int ei = INTVAL (e) & (2 * nelt - 1);\n+\n+      which |= (ei < nelt ? 1 : 2);\n+      d.perm[i] = ei;\n+    }\n+\n+  switch (which)\n+    {\n+    default:\n+      gcc_unreachable();\n+\n+    case 3:\n+      if (!rtx_equal_p (d.op0, d.op1))\n+\tbreak;\n+\n+      /* The elements of PERM do not suggest that only the first operand\n+\t is used, but both operands are identical.  Allow easier matching\n+\t of the permutation by folding the permutation into the single\n+\t input vector.  */\n+      for (i = 0; i < nelt; ++i)\n+\tif (d.perm[i] >= nelt)\n+\t  d.perm[i] -= nelt;\n+      /* FALLTHRU */\n+\n+    case 1:\n+      d.op1 = d.op0;\n+      break;\n+\n+    case 2:\n+      for (i = 0; i < nelt; ++i)\n+        d.perm[i] -= nelt;\n+      d.op0 = d.op1;\n+      break;\n+    }\n+\n+  return ix86_expand_vec_perm_builtin_1 (&d);\n+}\n+\n /* Implement targetm.vectorize.builtin_vec_perm_ok.  */\n \n static bool"}, {"sha": "d5e2de520b2b917b93526ff12fe13a5ad3dcfc79", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0772d476effe546701564ee9281fddfd189586f1/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0772d476effe546701564ee9281fddfd189586f1/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=0772d476effe546701564ee9281fddfd189586f1", "patch": "@@ -6236,6 +6236,27 @@\n   DONE;\n })\n \n+(define_mode_iterator VEC_PERM_CONST\n+  [(V4SF \"TARGET_SSE\") (V4SI \"TARGET_SSE\")\n+   (V2DF \"TARGET_SSE\") (V2DI \"TARGET_SSE\")\n+   (V16QI \"TARGET_SSE2\") (V8HI \"TARGET_SSE2\")\n+   (V8SF \"TARGET_AVX\") (V4DF \"TARGET_AVX\")\n+   (V8SI \"TARGET_AVX\") (V4DI \"TARGET_AVX\")\n+   (V32QI \"TARGET_AVX2\") (V16HI \"TARGET_AVX2\")])\n+\n+(define_expand \"vec_perm_const<mode>\"\n+  [(match_operand:VEC_PERM_CONST 0 \"register_operand\" \"\")\n+   (match_operand:VEC_PERM_CONST 1 \"register_operand\" \"\")\n+   (match_operand:VEC_PERM_CONST 2 \"register_operand\" \"\")\n+   (match_operand:<sseintvecmode> 3 \"\" \"\")]\n+  \"\"\n+{\n+  if (ix86_expand_vec_perm_const (operands))\n+    DONE;\n+  else\n+    FAIL;\n+})\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel bitwise logical operations"}]}