{"sha": "8e2f453de3969c4789b96205febc36d9c3ce022a", "node_id": "C_kwDOANBUbNoAKDhlMmY0NTNkZTM5NjljNDc4OWI5NjIwNWZlYmMzNmQ5YzNjZTAyMmE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-05T10:54:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-07T11:20:24Z"}, "message": "libstdc++: Use bold style for DR titles in the manual\n\nThis matches how the issues are styled in the LWG issues list, and also\nallows us to use italics for \"cv\" (e.g. in issue 2487).\n\nlibstdc++-v3/ChangeLog:\n\n\t* doc/xml/manual/intro.xml: Add role=\"bold\" attribute to\n\temphasis elements for issue titles.\n\t* doc/html/manual/bugs.html: Regenerate.", "tree": {"sha": "8256497c0f008cbf1453f280eff1587b7c24c4f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8256497c0f008cbf1453f280eff1587b7c24c4f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e2f453de3969c4789b96205febc36d9c3ce022a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e2f453de3969c4789b96205febc36d9c3ce022a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e2f453de3969c4789b96205febc36d9c3ce022a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e2f453de3969c4789b96205febc36d9c3ce022a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b8a77eba5efbc6d9556f026774fa1447675602c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8a77eba5efbc6d9556f026774fa1447675602c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b8a77eba5efbc6d9556f026774fa1447675602c"}], "stats": {"total": 787, "additions": 390, "deletions": 397}, "files": [{"sha": "58600cd6ede0cc832ba3b720b27f539278dc6d30", "filename": "libstdc++-v3/doc/html/manual/bugs.html", "status": "modified", "additions": 200, "deletions": 200, "changes": 400, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e2f453de3969c4789b96205febc36d9c3ce022a/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e2f453de3969c4789b96205febc36d9c3ce022a/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html?ref=8e2f453de3969c4789b96205febc36d9c3ce022a", "patch": "@@ -26,597 +26,597 @@\n \tof style.  Note that we usually do not make changes to the\n \tcode until an issue has reached <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\" target=\"_top\">DR</a> status.\n       </p><div class=\"variablelist\"><dl class=\"variablelist\"><dt><a id=\"manual.bugs.dr5\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#5\" target=\"_top\">5</a>:\n-\t<span class=\"emphasis\"><em>string::compare specification questionable</em></span>\n+\t<span class=\"bold\"><strong>string::compare specification questionable</strong></span>\n     </span></dt><dd><p>This should be two overloaded functions rather than a single function.\n     </p></dd><dt><a id=\"manual.bugs.dr17\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#17\" target=\"_top\">17</a>:\n-\t<span class=\"emphasis\"><em>Bad bool parsing</em></span>\n+\t<span class=\"bold\"><strong>Bad bool parsing</strong></span>\n     </span></dt><dd><p>Apparently extracting Boolean values was messed up...\n     </p></dd><dt><a id=\"manual.bugs.dr19\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#19\" target=\"_top\">19</a>:\n-\t<span class=\"emphasis\"><em>\"Noconv\" definition too vague</em></span>\n+\t<span class=\"bold\"><strong>\"Noconv\" definition too vague</strong></span>\n     </span></dt><dd><p>If <code class=\"code\">codecvt::do_in</code> returns <code class=\"code\">noconv</code> there are\n \tno changes to the values in <code class=\"code\">[to, to_limit)</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr22\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#22\" target=\"_top\">22</a>:\n-\t<span class=\"emphasis\"><em>Member open vs flags</em></span>\n+\t<span class=\"bold\"><strong>Member open vs flags</strong></span>\n     </span></dt><dd><p>Re-opening a file stream does <span class=\"emphasis\"><em>not</em></span> clear the state flags.\n     </p></dd><dt><a id=\"manual.bugs.dr23\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#23\" target=\"_top\">23</a>:\n-\t<span class=\"emphasis\"><em>Num_get overflow result</em></span>\n+\t<span class=\"bold\"><strong>Num_get overflow result</strong></span>\n     </span></dt><dd><p>Implement the proposed resolution.\n     </p></dd><dt><a id=\"manual.bugs.dr25\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#25\" target=\"_top\">25</a>:\n-\t<span class=\"emphasis\"><em>String operator&lt;&lt; uses width() value wrong</em></span>\n+\t<span class=\"bold\"><strong>String operator&lt;&lt; uses width() value wrong</strong></span>\n     </span></dt><dd><p>Padding issues.\n     </p></dd><dt><a id=\"manual.bugs.dr48\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#48\" target=\"_top\">48</a>:\n-\t<span class=\"emphasis\"><em>Use of non-existent exception constructor</em></span>\n+\t<span class=\"bold\"><strong>Use of non-existent exception constructor</strong></span>\n     </span></dt><dd><p>An instance of <code class=\"code\">ios_base::failure</code> is constructed instead.\n     </p></dd><dt><a id=\"manual.bugs.dr49\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#49\" target=\"_top\">49</a>:\n-\t<span class=\"emphasis\"><em>Underspecification of ios_base::sync_with_stdio</em></span>\n+\t<span class=\"bold\"><strong>Underspecification of ios_base::sync_with_stdio</strong></span>\n     </span></dt><dd><p>The return type is the <span class=\"emphasis\"><em>previous</em></span> state of synchronization.\n     </p></dd><dt><a id=\"manual.bugs.dr50\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#50\" target=\"_top\">50</a>:\n-\t<span class=\"emphasis\"><em>Copy constructor and assignment operator of ios_base</em></span>\n+\t<span class=\"bold\"><strong>Copy constructor and assignment operator of ios_base</strong></span>\n     </span></dt><dd><p>These members functions are declared <code class=\"code\">private</code> and are\n \tthus inaccessible.  Specifying the correct semantics of\n \t\"copying stream state\" was deemed too complicated.\n     </p></dd><dt><a id=\"manual.bugs.dr60\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#60\" target=\"_top\">60</a>:\n-\t<span class=\"emphasis\"><em>What is a formatted input function?</em></span>\n+\t<span class=\"bold\"><strong>What is a formatted input function?</strong></span>\n     </span></dt><dd><p>This DR made many widespread changes to <code class=\"code\">basic_istream</code>\n \tand <code class=\"code\">basic_ostream</code> all of which have been implemented.\n     </p></dd><dt><a id=\"manual.bugs.dr63\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#63\" target=\"_top\">63</a>:\n-\t<span class=\"emphasis\"><em>Exception-handling policy for unformatted output</em></span>\n+\t<span class=\"bold\"><strong>Exception-handling policy for unformatted output</strong></span>\n     </span></dt><dd><p>Make the policy consistent with that of formatted input, unformatted\n \tinput, and formatted output.\n     </p></dd><dt><a id=\"manual.bugs.dr68\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#68\" target=\"_top\">68</a>:\n-\t<span class=\"emphasis\"><em>Extractors for char* should store null at end</em></span>\n+\t<span class=\"bold\"><strong>Extractors for char* should store null at end</strong></span>\n     </span></dt><dd><p>And they do now.  An editing glitch in the last item in the list of\n \t[27.6.1.2.3]/7.\n     </p></dd><dt><a id=\"manual.bugs.dr74\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#74\" target=\"_top\">74</a>:\n-\t<span class=\"emphasis\"><em>Garbled text for codecvt::do_max_length</em></span>\n+\t<span class=\"bold\"><strong>Garbled text for codecvt::do_max_length</strong></span>\n     </span></dt><dd><p>The text of the standard was gibberish.  Typos gone rampant.\n     </p></dd><dt><a id=\"manual.bugs.dr75\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#75\" target=\"_top\">75</a>:\n-\t<span class=\"emphasis\"><em>Contradiction in codecvt::length's argument types</em></span>\n+\t<span class=\"bold\"><strong>Contradiction in codecvt::length's argument types</strong></span>\n     </span></dt><dd><p>Change the first parameter to <code class=\"code\">stateT&amp;</code> and implement\n \tthe new effects paragraph.\n     </p></dd><dt><a id=\"manual.bugs.dr83\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#83\" target=\"_top\">83</a>:\n-\t<span class=\"emphasis\"><em>string::npos vs. string::max_size()</em></span>\n+\t<span class=\"bold\"><strong>string::npos vs. string::max_size()</strong></span>\n     </span></dt><dd><p>Safety checks on the size of the string should test against\n \t<code class=\"code\">max_size()</code> rather than <code class=\"code\">npos</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr90\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#90\" target=\"_top\">90</a>:\n-\t<span class=\"emphasis\"><em>Incorrect description of operator&gt;&gt; for strings</em></span>\n+\t<span class=\"bold\"><strong>Incorrect description of operator&gt;&gt; for strings</strong></span>\n     </span></dt><dd><p>The effect contain <code class=\"code\">isspace(c,getloc())</code> which must be\n \treplaced by <code class=\"code\">isspace(c,is.getloc())</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr91\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#91\" target=\"_top\">91</a>:\n-\t<span class=\"emphasis\"><em>Description of operator&gt;&gt; and getline() for string&lt;&gt;\n-\t    might cause endless loop</em></span>\n+\t<span class=\"bold\"><strong>Description of operator&gt;&gt; and getline() for string&lt;&gt;\n+\t    might cause endless loop</strong></span>\n     </span></dt><dd><p>They behave as a formatted input function and as an unformatted\n \tinput function, respectively (except that <code class=\"code\">getline</code> is\n \tnot required to set <code class=\"code\">gcount</code>).\n     </p></dd><dt><a id=\"manual.bugs.dr103\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#103\" target=\"_top\">103</a>:\n-\t<span class=\"emphasis\"><em>set::iterator is required to be modifiable, but this allows\n-\t    modification of keys.</em></span>\n+\t<span class=\"bold\"><strong>set::iterator is required to be modifiable, but this allows\n+\t    modification of keys.</strong></span>\n     </span></dt><dd><p>For associative containers where the value type is the same as\n \tthe key type, both <code class=\"code\">iterator</code> and <code class=\"code\">const_iterator\n \t</code> are constant iterators.\n     </p></dd><dt><a id=\"manual.bugs.dr109\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#109\" target=\"_top\">109</a>:\n-\t<span class=\"emphasis\"><em>Missing binders for non-const sequence elements</em></span>\n+\t<span class=\"bold\"><strong>Missing binders for non-const sequence elements</strong></span>\n     </span></dt><dd><p>The <code class=\"code\">binder1st</code> and <code class=\"code\">binder2nd</code> didn't have an\n \t<code class=\"code\">operator()</code> taking a non-const parameter.\n     </p></dd><dt><a id=\"manual.bugs.dr110\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#110\" target=\"_top\">110</a>:\n-\t<span class=\"emphasis\"><em>istreambuf_iterator::equal not const</em></span>\n+\t<span class=\"bold\"><strong>istreambuf_iterator::equal not const</strong></span>\n     </span></dt><dd><p>This was not a const member function.  Note that the DR says to\n \treplace the function with a const one; we have instead provided an\n \toverloaded version with identical contents.\n     </p></dd><dt><a id=\"manual.bugs.dr117\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#117\" target=\"_top\">117</a>:\n-\t<span class=\"emphasis\"><em>basic_ostream uses nonexistent num_put member functions</em></span>\n+\t<span class=\"bold\"><strong>basic_ostream uses nonexistent num_put member functions</strong></span>\n     </span></dt><dd><p><code class=\"code\">num_put::put()</code> was overloaded on the wrong types.\n     </p></dd><dt><a id=\"manual.bugs.dr118\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#118\" target=\"_top\">118</a>:\n-\t<span class=\"emphasis\"><em>basic_istream uses nonexistent num_get member functions</em></span>\n+\t<span class=\"bold\"><strong>basic_istream uses nonexistent num_get member functions</strong></span>\n     </span></dt><dd><p>Same as 117, but for <code class=\"code\">num_get::get()</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr129\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#129\" target=\"_top\">129</a>:\n-\t<span class=\"emphasis\"><em>Need error indication from seekp() and seekg()</em></span>\n+\t<span class=\"bold\"><strong>Need error indication from seekp() and seekg()</strong></span>\n     </span></dt><dd><p>These functions set <code class=\"code\">failbit</code> on error now.\n     </p></dd><dt><a id=\"manual.bugs.dr130\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#130\" target=\"_top\">130</a>:\n-\t<span class=\"emphasis\"><em>Return type of container::erase(iterator) differs for associative containers</em></span>\n+\t<span class=\"bold\"><strong>Return type of container::erase(iterator) differs for associative containers</strong></span>\n     </span></dt><dd><p>Make member <code class=\"code\">erase</code> return iterator for <code class=\"code\">set</code>, <code class=\"code\">multiset</code>, <code class=\"code\">map</code>, <code class=\"code\">multimap</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr136\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#136\" target=\"_top\">136</a>:\n-\t<span class=\"emphasis\"><em>seekp, seekg setting wrong streams?</em></span>\n+\t<span class=\"bold\"><strong>seekp, seekg setting wrong streams?</strong></span>\n     </span></dt><dd><p><code class=\"code\">seekp</code> should only set the output stream, and\n \t<code class=\"code\">seekg</code> should only set the input stream.\n     </p></dd><dt><a id=\"manual.bugs.dr167\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#167\" target=\"_top\">167</a>:\n-\t<span class=\"emphasis\"><em>Improper use of traits_type::length()</em></span>\n+\t<span class=\"bold\"><strong>Improper use of traits_type::length()</strong></span>\n     </span></dt><dd><p><code class=\"code\">op&lt;&lt;</code> with a <code class=\"code\">const char*</code> was\n \tcalculating an incorrect number of characters to write.\n     </p></dd><dt><a id=\"manual.bugs.dr169\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#169\" target=\"_top\">169</a>:\n-\t<span class=\"emphasis\"><em>Bad efficiency of overflow() mandated</em></span>\n+\t<span class=\"bold\"><strong>Bad efficiency of overflow() mandated</strong></span>\n     </span></dt><dd><p>Grow efficiently the internal array object.\n     </p></dd><dt><a id=\"manual.bugs.dr171\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#171\" target=\"_top\">171</a>:\n-\t<span class=\"emphasis\"><em>Strange seekpos() semantics due to joint position</em></span>\n+\t<span class=\"bold\"><strong>Strange seekpos() semantics due to joint position</strong></span>\n     </span></dt><dd><p>Quite complex to summarize...\n     </p></dd><dt><a id=\"manual.bugs.dr181\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#181\" target=\"_top\">181</a>:\n-\t<span class=\"emphasis\"><em>make_pair() unintended behavior</em></span>\n+\t<span class=\"bold\"><strong>make_pair() unintended behavior</strong></span>\n     </span></dt><dd><p>This function used to take its arguments as reference-to-const, now\n \tit copies them (pass by value).\n     </p></dd><dt><a id=\"manual.bugs.dr195\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#195\" target=\"_top\">195</a>:\n-\t<span class=\"emphasis\"><em>Should basic_istream::sentry's constructor ever set eofbit?</em></span>\n+\t<span class=\"bold\"><strong>Should basic_istream::sentry's constructor ever set eofbit?</strong></span>\n     </span></dt><dd><p>Yes, it can, specifically if EOF is reached while skipping whitespace.\n     </p></dd><dt><a id=\"manual.bugs.dr206\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#206\" target=\"_top\">206</a>:\n-\t<span class=\"emphasis\"><em><code class=\"code\">operator new(size_t, nothrow)</code> may become\n-          unlinked to ordinary <code class=\"code\">operator new</code> if ordinary\n-          version replaced\n-        </em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">operator new(size_t, nothrow)</code> may become\n+\t  unlinked to ordinary <code class=\"code\">operator new</code> if ordinary\n+\t  version replaced\n+\t</strong></span>\n     </span></dt><dd><p>The <code class=\"code\">nothrow</code> forms of new and delete were\n       changed to call the throwing forms, handling any exception by\n       catching it and returning a null pointer.\n     </p></dd><dt><a id=\"manual.bugs.dr211\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#211\" target=\"_top\">211</a>:\n-\t<span class=\"emphasis\"><em>operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</em></span>\n+\t<span class=\"bold\"><strong>operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</strong></span>\n     </span></dt><dd><p>If nothing is extracted into the string, <code class=\"code\">op&gt;&gt;</code> now\n \tsets <code class=\"code\">failbit</code> (which can cause an exception, etc., etc.).\n     </p></dd><dt><a id=\"manual.bugs.dr214\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#214\" target=\"_top\">214</a>:\n-\t<span class=\"emphasis\"><em>set::find() missing const overload</em></span>\n+\t<span class=\"bold\"><strong>set::find() missing const overload</strong></span>\n     </span></dt><dd><p>Both <code class=\"code\">set</code> and <code class=\"code\">multiset</code> were missing\n \toverloaded find, lower_bound, upper_bound, and equal_range functions\n \tfor const instances.\n     </p></dd><dt><a id=\"manual.bugs.dr231\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#231\" target=\"_top\">231</a>:\n-\t<span class=\"emphasis\"><em>Precision in iostream?</em></span>\n+\t<span class=\"bold\"><strong>Precision in iostream?</strong></span>\n     </span></dt><dd><p>For conversion from a floating-point type, <code class=\"code\">str.precision()</code>\n \tis specified in the conversion specification.\n     </p></dd><dt><a id=\"manual.bugs.dr233\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#233\" target=\"_top\">233</a>:\n-\t<span class=\"emphasis\"><em>Insertion hints in associative containers</em></span>\n+\t<span class=\"bold\"><strong>Insertion hints in associative containers</strong></span>\n     </span></dt><dd><p>Implement N1780, first check before then check after, insert as close\n \tto hint as possible.\n     </p></dd><dt><a id=\"manual.bugs.dr235\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#235\" target=\"_top\">235</a>:\n-\t<span class=\"emphasis\"><em>No specification of default ctor for reverse_iterator</em></span>\n+\t<span class=\"bold\"><strong>No specification of default ctor for reverse_iterator</strong></span>\n     </span></dt><dd><p>The declaration of <code class=\"code\">reverse_iterator</code> lists a default constructor.\n \tHowever, no specification is given what this constructor should do.\n     </p></dd><dt><a id=\"manual.bugs.dr241\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#241\" target=\"_top\">241</a>:\n-\t<span class=\"emphasis\"><em>Does unique_copy() require CopyConstructible and Assignable?</em></span>\n+\t<span class=\"bold\"><strong>Does unique_copy() require CopyConstructible and Assignable?</strong></span>\n     </span></dt><dd><p>Add a helper for forward_iterator/output_iterator, fix the existing\n \tone for input_iterator/output_iterator to not rely on Assignability.\n     </p></dd><dt><a id=\"manual.bugs.dr243\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#243\" target=\"_top\">243</a>:\n-\t<span class=\"emphasis\"><em>get and getline when sentry reports failure</em></span>\n+\t<span class=\"bold\"><strong>get and getline when sentry reports failure</strong></span>\n     </span></dt><dd><p>Store a null character only if the character array has a non-zero size.\n     </p></dd><dt><a id=\"manual.bugs.dr251\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#251\" target=\"_top\">251</a>:\n-\t<span class=\"emphasis\"><em>basic_stringbuf missing allocator_type</em></span>\n+\t<span class=\"bold\"><strong>basic_stringbuf missing allocator_type</strong></span>\n     </span></dt><dd><p>This nested typedef was originally not specified.\n     </p></dd><dt><a id=\"manual.bugs.dr253\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#253\" target=\"_top\">253</a>:\n-\t<span class=\"emphasis\"><em>valarray helper functions are almost entirely useless</em></span>\n+\t<span class=\"bold\"><strong>valarray helper functions are almost entirely useless</strong></span>\n     </span></dt><dd><p>Make the copy constructor and copy-assignment operator declarations\n \tpublic in gslice_array, indirect_array, mask_array, slice_array; provide\n \tdefinitions.\n     </p></dd><dt><a id=\"manual.bugs.dr265\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#265\" target=\"_top\">265</a>:\n-\t<span class=\"emphasis\"><em>std::pair::pair() effects overly restrictive</em></span>\n+\t<span class=\"bold\"><strong>std::pair::pair() effects overly restrictive</strong></span>\n     </span></dt><dd><p>The default ctor would build its members from copies of temporaries;\n \tnow it simply uses their respective default ctors.\n     </p></dd><dt><a id=\"manual.bugs.dr266\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#266\" target=\"_top\">266</a>:\n-\t<span class=\"emphasis\"><em>bad_exception::~bad_exception() missing Effects clause</em></span>\n+\t<span class=\"bold\"><strong>bad_exception::~bad_exception() missing Effects clause</strong></span>\n     </span></dt><dd><p>The <code class=\"code\">bad_</code>* classes no longer have destructors (they\n \tare trivial), since no description of them was ever given.\n     </p></dd><dt><a id=\"manual.bugs.dr271\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#271\" target=\"_top\">271</a>:\n-\t<span class=\"emphasis\"><em>basic_iostream missing typedefs</em></span>\n+\t<span class=\"bold\"><strong>basic_iostream missing typedefs</strong></span>\n     </span></dt><dd><p>The typedefs it inherits from its base classes can't be used, since\n \t(for example) <code class=\"code\">basic_iostream&lt;T&gt;::traits_type</code> is ambiguous.\n     </p></dd><dt><a id=\"manual.bugs.dr275\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#275\" target=\"_top\">275</a>:\n-\t<span class=\"emphasis\"><em>Wrong type in num_get::get() overloads</em></span>\n+\t<span class=\"bold\"><strong>Wrong type in num_get::get() overloads</strong></span>\n     </span></dt><dd><p>Similar to 118.\n     </p></dd><dt><a id=\"manual.bugs.dr280\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#280\" target=\"_top\">280</a>:\n-\t<span class=\"emphasis\"><em>Comparison of reverse_iterator to const reverse_iterator</em></span>\n+\t<span class=\"bold\"><strong>Comparison of reverse_iterator to const reverse_iterator</strong></span>\n     </span></dt><dd><p>Add global functions with two template parameters.\n \t(NB: not added for now a templated assignment operator)\n     </p></dd><dt><a id=\"manual.bugs.dr292\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#292\" target=\"_top\">292</a>:\n-\t<span class=\"emphasis\"><em>Effects of a.copyfmt (a)</em></span>\n+\t<span class=\"bold\"><strong>Effects of a.copyfmt (a)</strong></span>\n     </span></dt><dd><p>If <code class=\"code\">(this == &amp;rhs)</code> do nothing.\n     </p></dd><dt><a id=\"manual.bugs.dr300\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#300\" target=\"_top\">300</a>:\n-\t<span class=\"emphasis\"><em>List::merge() specification incomplete</em></span>\n+\t<span class=\"bold\"><strong>List::merge() specification incomplete</strong></span>\n     </span></dt><dd><p>If <code class=\"code\">(this == &amp;x)</code> do nothing.\n     </p></dd><dt><a id=\"manual.bugs.dr303\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#303\" target=\"_top\">303</a>:\n-\t<span class=\"emphasis\"><em>Bitset input operator underspecified</em></span>\n+\t<span class=\"bold\"><strong>Bitset input operator underspecified</strong></span>\n     </span></dt><dd><p>Basically, compare the input character to\n \t\t    <code class=\"code\">is.widen(0)</code> and <code class=\"code\">is.widen(1)</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr305\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#305\" target=\"_top\">305</a>:\n-\t<span class=\"emphasis\"><em>Default behavior of codecvt&lt;wchar_t, char,\n-\t\t  mbstate_t&gt;::length()</em></span>\n+\t<span class=\"bold\"><strong>Default behavior of codecvt&lt;wchar_t, char,\n+\t\t  mbstate_t&gt;::length()</strong></span>\n     </span></dt><dd><p>Do not specify what <code class=\"code\">codecvt&lt;wchar_t, char,\n \t\t    mbstate_t&gt;::do_length</code> must return.\n     </p></dd><dt><a id=\"manual.bugs.dr328\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#328\" target=\"_top\">328</a>:\n-\t<span class=\"emphasis\"><em>Bad sprintf format modifier in\n-\t\t  money_put&lt;&gt;::do_put()</em></span>\n+\t<span class=\"bold\"><strong>Bad sprintf format modifier in\n+\t\t  money_put&lt;&gt;::do_put()</strong></span>\n     </span></dt><dd><p>Change the format string to \"%.0Lf\".\n     </p></dd><dt><a id=\"manual.bugs.dr365\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#365\" target=\"_top\">365</a>:\n-\t<span class=\"emphasis\"><em>Lack of const-qualification in clause 27</em></span>\n+\t<span class=\"bold\"><strong>Lack of const-qualification in clause 27</strong></span>\n     </span></dt><dd><p>Add const overloads of <code class=\"code\">is_open</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr387\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#387\" target=\"_top\">387</a>:\n-\t<span class=\"emphasis\"><em>std::complex over-encapsulated</em></span>\n+\t<span class=\"bold\"><strong>std::complex over-encapsulated</strong></span>\n     </span></dt><dd><p>Add the <code class=\"code\">real(T)</code> and <code class=\"code\">imag(T)</code>\n \t\t    members;  in C++11 mode, also adjust the existing\n \t\t    <code class=\"code\">real()</code> and <code class=\"code\">imag()</code> members and\n \t\t    free functions.\n     </p></dd><dt><a id=\"manual.bugs.dr389\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#389\" target=\"_top\">389</a>:\n-\t<span class=\"emphasis\"><em>Const overload of valarray::operator[] returns\n-\t\t  by value</em></span>\n+\t<span class=\"bold\"><strong>Const overload of valarray::operator[] returns\n+\t\t  by value</strong></span>\n     </span></dt><dd><p>Change it to return a <code class=\"code\">const T&amp;</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr396\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#396\" target=\"_top\">396</a>:\n-\t<span class=\"emphasis\"><em>what are characters zero and one</em></span>\n+\t<span class=\"bold\"><strong>what are characters zero and one</strong></span>\n     </span></dt><dd><p>Implement the proposed resolution.\n     </p></dd><dt><a id=\"manual.bugs.dr402\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#402\" target=\"_top\">402</a>:\n-\t<span class=\"emphasis\"><em>Wrong new expression in [some_]allocator::construct</em></span>\n+\t<span class=\"bold\"><strong>Wrong new expression in [some_]allocator::construct</strong></span>\n     </span></dt><dd><p>Replace \"new\" with \"::new\".\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-closed.html#408\" target=\"_top\">408</a>:\n-\t<span class=\"emphasis\"><em>\n+\t<span class=\"bold\"><strong>\n \tIs vector&lt;reverse_iterator&lt;char*&gt; &gt; forbidden?\n-\t</em></span>\n+\t</strong></span>\n     </span></dt><dd><p>Tweak the debug-mode checks in _Safe_iterator.\n     </p></dd><dt><a id=\"manual.bugs.dr409\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#409\" target=\"_top\">409</a>:\n-\t<span class=\"emphasis\"><em>Closing an fstream should clear the error state</em></span>\n+\t<span class=\"bold\"><strong>Closing an fstream should clear the error state</strong></span>\n     </span></dt><dd><p>Have <code class=\"code\">open</code> clear the error flags.\n     </p></dd><dt><a id=\"manual.bugs.dr415\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#415\" target=\"_top\">415</a>:\n-\t<span class=\"emphasis\"><em>Behavior of std::ws</em></span>\n+\t<span class=\"bold\"><strong>Behavior of std::ws</strong></span>\n     </span></dt><dd><p>Change it to be an unformatted input function\n       (i.e. construct a sentry and catch exceptions).\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-closed.html#431\" target=\"_top\">431</a>:\n-\t<span class=\"emphasis\"><em>Swapping containers with unequal allocators</em></span>\n+\t<span class=\"bold\"><strong>Swapping containers with unequal allocators</strong></span>\n     </span></dt><dd><p>Implement Option 3, as per N1599.\n     </p></dd><dt><a id=\"manual.bugs.dr432\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#432\" target=\"_top\">432</a>:\n-\t<span class=\"emphasis\"><em>stringbuf::overflow() makes only one write position\n-\t    available</em></span>\n+\t<span class=\"bold\"><strong>stringbuf::overflow() makes only one write position\n+\t    available</strong></span>\n     </span></dt><dd><p>Implement the resolution, beyond DR 169.\n     </p></dd><dt><a id=\"manual.bugs.dr434\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#434\" target=\"_top\">434</a>:\n-\t<span class=\"emphasis\"><em>bitset::to_string() hard to use</em></span>\n+\t<span class=\"bold\"><strong>bitset::to_string() hard to use</strong></span>\n     </span></dt><dd><p>Add three overloads, taking fewer template arguments.\n     </p></dd><dt><a id=\"manual.bugs.dr438\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#438\" target=\"_top\">438</a>:\n-\t<span class=\"emphasis\"><em>Ambiguity in the \"do the right thing\" clause</em></span>\n+\t<span class=\"bold\"><strong>Ambiguity in the \"do the right thing\" clause</strong></span>\n     </span></dt><dd><p>Implement the resolution, basically cast less.\n     </p></dd><dt><a id=\"manual.bugs.dr445\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#445\" target=\"_top\">445</a>:\n-\t<span class=\"emphasis\"><em>iterator_traits::reference unspecified for some iterator categories</em></span>\n+\t<span class=\"bold\"><strong>iterator_traits::reference unspecified for some iterator categories</strong></span>\n     </span></dt><dd><p>Change <code class=\"code\">istreambuf_iterator::reference</code> in C++11 mode.\n     </p></dd><dt><a id=\"manual.bugs.dr453\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#453\" target=\"_top\">453</a>:\n-\t<span class=\"emphasis\"><em>basic_stringbuf::seekoff need not always fail for an empty stream</em></span>\n+\t<span class=\"bold\"><strong>basic_stringbuf::seekoff need not always fail for an empty stream</strong></span>\n     </span></dt><dd><p>Don't fail if the next pointer is null and newoff is zero.\n     </p></dd><dt><a id=\"manual.bugs.dr455\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#455\" target=\"_top\">455</a>:\n-\t<span class=\"emphasis\"><em>cerr::tie() and wcerr::tie() are overspecified</em></span>\n+\t<span class=\"bold\"><strong>cerr::tie() and wcerr::tie() are overspecified</strong></span>\n     </span></dt><dd><p>Initialize cerr tied to cout and wcerr tied to wcout.\n     </p></dd><dt><a id=\"manual.bugs.dr464\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#464\" target=\"_top\">464</a>:\n-\t<span class=\"emphasis\"><em>Suggestion for new member functions in standard containers</em></span>\n+\t<span class=\"bold\"><strong>Suggestion for new member functions in standard containers</strong></span>\n     </span></dt><dd><p>Add <code class=\"code\">data()</code> to <code class=\"code\">std::vector</code> and\n \t<code class=\"code\">at(const key_type&amp;)</code> to <code class=\"code\">std::map</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr467\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#467\" target=\"_top\">467</a>:\n-\t<span class=\"emphasis\"><em>char_traits::lt(), compare(), and memcmp()</em></span>\n+\t<span class=\"bold\"><strong>char_traits::lt(), compare(), and memcmp()</strong></span>\n     </span></dt><dd><p>Change <code class=\"code\">lt</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr508\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#508\" target=\"_top\">508</a>:\n-\t<span class=\"emphasis\"><em>Bad parameters for ranlux64_base_01</em></span>\n+\t<span class=\"bold\"><strong>Bad parameters for ranlux64_base_01</strong></span>\n     </span></dt><dd><p>Fix the parameters.\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-closed.html#512\" target=\"_top\">512</a>:\n-\t<span class=\"emphasis\"><em>Seeding subtract_with_carry_01 from a single unsigned long</em></span>\n+\t<span class=\"bold\"><strong>Seeding subtract_with_carry_01 from a single unsigned long</strong></span>\n     </span></dt><dd><p>Construct a <code class=\"code\">linear_congruential</code> engine and seed with it.\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-closed.html#526\" target=\"_top\">526</a>:\n-\t<span class=\"emphasis\"><em>Is it undefined if a function in the standard changes in\n-\t    parameters?</em></span>\n+\t<span class=\"bold\"><strong>Is it undefined if a function in the standard changes in\n+\t    parameters?</strong></span>\n     </span></dt><dd><p>Use &amp;value.\n     </p></dd><dt><a id=\"manual.bugs.dr538\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#538\" target=\"_top\">538</a>:\n-\t<span class=\"emphasis\"><em>241 again: Does unique_copy() require CopyConstructible\n-\t    and Assignable?</em></span>\n+\t<span class=\"bold\"><strong>241 again: Does unique_copy() require CopyConstructible\n+\t    and Assignable?</strong></span>\n     </span></dt><dd><p>In case of input_iterator/output_iterator rely on Assignability of\n \tinput_iterator' value_type.\n     </p></dd><dt><a id=\"manual.bugs.dr539\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#539\" target=\"_top\">539</a>:\n-\t<span class=\"emphasis\"><em>partial_sum and adjacent_difference should mention\n-\t    requirements</em></span>\n+\t<span class=\"bold\"><strong>partial_sum and adjacent_difference should mention\n+\t    requirements</strong></span>\n     </span></dt><dd><p>We were almost doing the right thing, just use std::move\n \tin adjacent_difference.\n     </p></dd><dt><a id=\"manual.bugs.dr541\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#541\" target=\"_top\">541</a>:\n-\t<span class=\"emphasis\"><em>shared_ptr template assignment and void</em></span>\n+\t<span class=\"bold\"><strong>shared_ptr template assignment and void</strong></span>\n     </span></dt><dd><p>Add an auto_ptr&lt;void&gt; specialization.\n     </p></dd><dt><a id=\"manual.bugs.dr543\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#543\" target=\"_top\">543</a>:\n-\t<span class=\"emphasis\"><em>valarray slice default constructor</em></span>\n+\t<span class=\"bold\"><strong>valarray slice default constructor</strong></span>\n     </span></dt><dd><p>Follow the straightforward proposed resolution.\n     </p></dd><dt><a id=\"manual.bugs.dr550\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#550\" target=\"_top\">550</a>:\n-\t<span class=\"emphasis\"><em>What should the return type of pow(float,int) be?</em></span>\n+\t<span class=\"bold\"><strong>What should the return type of pow(float,int) be?</strong></span>\n     </span></dt><dd><p>In C++11 mode, remove the pow(float,int), etc., signatures.\n     </p></dd><dt><a id=\"manual.bugs.dr581\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#581\" target=\"_top\">581</a>:\n-\t<span class=\"emphasis\"><em><code class=\"code\">flush()</code> not unformatted function</em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">flush()</code> not unformatted function</strong></span>\n     </span></dt><dd><p>Change it to be a unformatted output function (i.e. construct a sentry and catch exceptions).\n     </p></dd><dt><a id=\"manual.bugs.dr586\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#586\" target=\"_top\">586</a>:\n-\t<span class=\"emphasis\"><em>string inserter not a formatted function</em></span>\n+\t<span class=\"bold\"><strong>string inserter not a formatted function</strong></span>\n     </span></dt><dd><p>Change it to be a formatted output function (i.e. catch exceptions).\n     </p></dd><dt><a id=\"manual.bugs.dr596\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#596\" target=\"_top\">596</a>:\n-\t<span class=\"emphasis\"><em>27.8.1.3 Table 112 omits \"a+\" and \"a+b\" modes</em></span>\n+\t<span class=\"bold\"><strong>27.8.1.3 Table 112 omits \"a+\" and \"a+b\" modes</strong></span>\n     </span></dt><dd><p>Add the missing modes to fopen_mode.\n     </p></dd><dt><a id=\"manual.bugs.dr630\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#630\" target=\"_top\">630</a>:\n-\t<span class=\"emphasis\"><em>arrays of valarray</em></span>\n+\t<span class=\"bold\"><strong>arrays of valarray</strong></span>\n     </span></dt><dd><p>Implement the simple resolution.\n     </p></dd><dt><a id=\"manual.bugs.dr660\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#660\" target=\"_top\">660</a>:\n-\t<span class=\"emphasis\"><em>Missing bitwise operations</em></span>\n+\t<span class=\"bold\"><strong>Missing bitwise operations</strong></span>\n     </span></dt><dd><p>Add the missing operations.\n     </p></dd><dt><a id=\"manual.bugs.dr691\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#691\" target=\"_top\">691</a>:\n-\t<span class=\"emphasis\"><em>const_local_iterator cbegin, cend missing from TR1</em></span>\n+\t<span class=\"bold\"><strong>const_local_iterator cbegin, cend missing from TR1</strong></span>\n     </span></dt><dd><p>In C++11 mode add cbegin(size_type) and cend(size_type)\n \t\t    to the unordered containers.\n     </p></dd><dt><a id=\"manual.bugs.dr693\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#693\" target=\"_top\">693</a>:\n-\t<span class=\"emphasis\"><em>std::bitset::all() missing</em></span>\n+\t<span class=\"bold\"><strong>std::bitset::all() missing</strong></span>\n     </span></dt><dd><p>Add it, consistently with the discussion.\n     </p></dd><dt><a id=\"manual.bugs.dr695\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#695\" target=\"_top\">695</a>:\n-\t<span class=\"emphasis\"><em>ctype&lt;char&gt;::classic_table() not accessible</em></span>\n+\t<span class=\"bold\"><strong>ctype&lt;char&gt;::classic_table() not accessible</strong></span>\n     </span></dt><dd><p>Make the member functions table and classic_table public.\n     </p></dd><dt><a id=\"manual.bugs.dr696\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#696\" target=\"_top\">696</a>:\n-\t<span class=\"emphasis\"><em>istream::operator&gt;&gt;(int&amp;) broken</em></span>\n+\t<span class=\"bold\"><strong>istream::operator&gt;&gt;(int&amp;) broken</strong></span>\n     </span></dt><dd><p>Implement the straightforward resolution.\n     </p></dd><dt><a id=\"manual.bugs.dr761\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#761\" target=\"_top\">761</a>:\n-\t<span class=\"emphasis\"><em>unordered_map needs an at() member function</em></span>\n+\t<span class=\"bold\"><strong>unordered_map needs an at() member function</strong></span>\n     </span></dt><dd><p>In C++11 mode, add at() and at() const.\n     </p></dd><dt><a id=\"manual.bugs.dr775\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#775\" target=\"_top\">775</a>:\n-\t<span class=\"emphasis\"><em>Tuple indexing should be unsigned?</em></span>\n+\t<span class=\"bold\"><strong>Tuple indexing should be unsigned?</strong></span>\n     </span></dt><dd><p>Implement the int -&gt; size_t replacements.\n     </p></dd><dt><a id=\"manual.bugs.dr776\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#776\" target=\"_top\">776</a>:\n-\t<span class=\"emphasis\"><em>Undescribed assign function of std::array</em></span>\n+\t<span class=\"bold\"><strong>Undescribed assign function of std::array</strong></span>\n     </span></dt><dd><p>In C++11 mode, remove assign, add fill.\n     </p></dd><dt><a id=\"manual.bugs.dr781\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#781\" target=\"_top\">781</a>:\n-\t<span class=\"emphasis\"><em>std::complex should add missing C99 functions</em></span>\n+\t<span class=\"bold\"><strong>std::complex should add missing C99 functions</strong></span>\n     </span></dt><dd><p>In C++11 mode, add std::proj.\n     </p></dd><dt><a id=\"manual.bugs.dr809\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#809\" target=\"_top\">809</a>:\n-\t<span class=\"emphasis\"><em>std::swap should be overloaded for array types</em></span>\n+\t<span class=\"bold\"><strong>std::swap should be overloaded for array types</strong></span>\n     </span></dt><dd><p>Add the overload.\n     </p></dd><dt><a id=\"manual.bugs.dr853\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#853\" target=\"_top\">853</a>:\n-\t<span class=\"emphasis\"><em>to_string needs updating with zero and one</em></span>\n+\t<span class=\"bold\"><strong>to_string needs updating with zero and one</strong></span>\n     </span></dt><dd><p>Update / add the signatures.\n     </p></dd><dt><a id=\"manual.bugs.dr865\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#865\" target=\"_top\">865</a>:\n-\t<span class=\"emphasis\"><em>More algorithms that throw away information</em></span>\n+\t<span class=\"bold\"><strong>More algorithms that throw away information</strong></span>\n     </span></dt><dd><p>The traditional HP / SGI return type and value is blessed\n \t\t    by the resolution of the DR.\n     </p></dd><dt><a id=\"manual.bugs.dr1203\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1203\" target=\"_top\">1203</a>:\n-       <span class=\"emphasis\"><em>More useful rvalue stream insertion</em></span>\n+\t<span class=\"bold\"><strong>More useful rvalue stream insertion</strong></span>\n     </span></dt><dd><p>Return the stream as its original type, not the base class.\n     </p></dd><dt><a id=\"manual.bugs.dr1339\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1339\" target=\"_top\">1339</a>:\n-       <span class=\"emphasis\"><em>uninitialized_fill_n should return the end of its range</em></span>\n+\t<span class=\"bold\"><strong>uninitialized_fill_n should return the end of its range</strong></span>\n     </span></dt><dd><p>Return the end of the filled range.\n     </p></dd><dt><a id=\"manual.bugs.dr2021\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2021\" target=\"_top\">2021</a>:\n-       <span class=\"emphasis\"><em>Further incorrect uses of <code class=\"code\">result_of</code></em></span>\n+\t<span class=\"bold\"><strong>Further incorrect uses of <code class=\"code\">result_of</code></strong></span>\n     </span></dt><dd><p>Correctly decay types in signature of <code class=\"code\">std::async</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr2049\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2049\" target=\"_top\">2049</a>:\n-\t<span class=\"emphasis\"><em><code class=\"code\">is_destructible</code> underspecified</em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">is_destructible</code> underspecified</strong></span>\n     </span></dt><dd><p>Handle non-object types.\n     </p></dd><dt><a id=\"manual.bugs.dr2056\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2056\" target=\"_top\">2056</a>:\n-\t<span class=\"emphasis\"><em>future_errc enums start with value 0 (invalid value for broken_promise)</em></span>\n+\t<span class=\"bold\"><strong>future_errc enums start with value 0 (invalid value for broken_promise)</strong></span>\n     </span></dt><dd><p>Reorder enumerators.\n     </p></dd><dt><a id=\"manual.bugs.dr2059\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2059\" target=\"_top\">2059</a>:\n-\t<span class=\"emphasis\"><em>C++0x ambiguity problem with map::erase</em></span>\n+\t<span class=\"bold\"><strong>C++0x ambiguity problem with map::erase</strong></span>\n     </span></dt><dd><p>Add additional overloads.\n     </p></dd><dt><a id=\"manual.bugs.dr2062\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2062\" target=\"_top\">2062</a>:\n-\t<span class=\"emphasis\"><em>2062. Effect contradictions w/o no-throw guarantee of <code class=\"code\">std::function</code> swaps</em></span>\n+\t<span class=\"bold\"><strong>2062. Effect contradictions w/o no-throw guarantee of <code class=\"code\">std::function</code> swaps</strong></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code> to swap functions.\n     </p></dd><dt><a id=\"manual.bugs.dr2063\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2063\" target=\"_top\">2063</a>:\n-\t<span class=\"emphasis\"><em>Contradictory requirements for string move assignment</em></span>\n+\t<span class=\"bold\"><strong>Contradictory requirements for string move assignment</strong></span>\n     </span></dt><dd><p>Respect propagation trait for move assignment.\n     </p></dd><dt><a id=\"manual.bugs.dr2064\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2064\" target=\"_top\">2064</a>:\n-\t<span class=\"emphasis\"><em>More noexcept issues in basic_string</em></span>\n+\t<span class=\"bold\"><strong>More noexcept issues in basic_string</strong></span>\n     </span></dt><dd><p>Add noexcept to the comparison operators.\n     </p></dd><dt><a id=\"manual.bugs.dr2067\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2067\" target=\"_top\">2067</a>:\n-\t<span class=\"emphasis\"><em>packaged_task should have deleted copy c'tor with const parameter</em></span>\n+\t<span class=\"bold\"><strong>packaged_task should have deleted copy c'tor with const parameter</strong></span>\n     </span></dt><dd><p>Fix signatures.\n     </p></dd><dt><a id=\"manual.bugs.dr2101\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2101\" target=\"_top\">2101</a>:\n-\t<span class=\"emphasis\"><em>Some transformation types can produce impossible types</em></span>\n+\t<span class=\"bold\"><strong>Some transformation types can produce impossible types</strong></span>\n     </span></dt><dd><p>Use the referenceable type concept.\n     </p></dd><dt><a id=\"manual.bugs.dr2106\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2106\" target=\"_top\">2106</a>:\n-\t<span class=\"emphasis\"><em>move_iterator wrapping iterators returning prvalues</em></span>\n+\t<span class=\"bold\"><strong>move_iterator wrapping iterators returning prvalues</strong></span>\n     </span></dt><dd><p>Change the <code class=\"code\">reference</code> type.\n     </p></dd><dt><a id=\"manual.bugs.dr2108\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2108\" target=\"_top\">2108</a>:\n-\t<span class=\"emphasis\"><em>No way to identify allocator types that always compare equal</em></span>\n+\t<span class=\"bold\"><strong>No way to identify allocator types that always compare equal</strong></span>\n     </span></dt><dd><p>Define and use <code class=\"code\">is_always_equal</code> even for C++11.\n     </p></dd><dt><a id=\"manual.bugs.dr2118\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2118\" target=\"_top\">2118</a>:\n-\t<span class=\"emphasis\"><em><code class=\"code\">unique_ptr</code> for array does not support cv qualification conversion of actual argument</em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">unique_ptr</code> for array does not support cv qualification conversion of actual argument</strong></span>\n     </span></dt><dd><p>Adjust constraints to allow safe conversions.\n     </p></dd><dt><a id=\"manual.bugs.dr2127\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2127\" target=\"_top\">2127</a>:\n-\t<span class=\"emphasis\"><em>Move-construction with <code class=\"code\">raw_storage_iterator</code></em></span>\n+\t<span class=\"bold\"><strong>Move-construction with <code class=\"code\">raw_storage_iterator</code></strong></span>\n     </span></dt><dd><p>Add assignment operator taking an rvalue.\n     </p></dd><dt><a id=\"manual.bugs.dr2132\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2132\" target=\"_top\">2132</a>:\n-\t<span class=\"emphasis\"><em><code class=\"code\">std::function</code> ambiguity</em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">std::function</code> ambiguity</strong></span>\n     </span></dt><dd><p>Constrain the constructor to only accept callable types.\n     </p></dd><dt><a id=\"manual.bugs.dr2141\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2141\" target=\"_top\">2141</a>:\n-\t<span class=\"emphasis\"><em><code class=\"code\">common_type</code> trait produces reference types</em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">common_type</code> trait produces reference types</strong></span>\n     </span></dt><dd><p>Use <code class=\"code\">decay</code> for the result type.\n     </p></dd><dt><a id=\"manual.bugs.dr2144\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2144\" target=\"_top\">2144</a>:\n-\t<span class=\"emphasis\"><em>Missing <code class=\"code\">noexcept</code> specification in <code class=\"code\">type_index</code></em></span>\n+\t<span class=\"bold\"><strong>Missing <code class=\"code\">noexcept</code> specification in <code class=\"code\">type_index</code></strong></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code>\n     </p></dd><dt><a id=\"manual.bugs.dr2145\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2145\" target=\"_top\">2145</a>:\n-\t<span class=\"emphasis\"><em><code class=\"code\">error_category</code> default constructor</em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">error_category</code> default constructor</strong></span>\n     </span></dt><dd><p>Declare a public constexpr constructor.\n     </p></dd><dt><a id=\"manual.bugs.dr2162\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2162\" target=\"_top\">2162</a>:\n-\t<span class=\"emphasis\"><em><code class=\"code\">allocator_traits::max_size</code> missing <code class=\"code\">noexcept</code></em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">allocator_traits::max_size</code> missing <code class=\"code\">noexcept</code></strong></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr2187\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2187\" target=\"_top\">2187</a>:\n-\t<span class=\"emphasis\"><em><code class=\"code\">vector&lt;bool&gt;</code> is missing <code class=\"code\">emplace</code> and <code class=\"code\">emplace_back</code> member functions</em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">vector&lt;bool&gt;</code> is missing <code class=\"code\">emplace</code> and <code class=\"code\">emplace_back</code> member functions</strong></span>\n     </span></dt><dd><p>Add <code class=\"code\">emplace</code> and <code class=\"code\">emplace_back</code> member functions.\n     </p></dd><dt><a id=\"manual.bugs.dr2192\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2192\" target=\"_top\">2192</a>:\n-\t<span class=\"emphasis\"><em>Validity and return type of <code class=\"code\">std::abs(0u)</code> is unclear</em></span>\n+\t<span class=\"bold\"><strong>Validity and return type of <code class=\"code\">std::abs(0u)</code> is unclear</strong></span>\n     </span></dt><dd><p>Move all declarations to a common header and remove the\n     generic <code class=\"code\">abs</code> which accepted unsigned arguments.\n     </p></dd><dt><a id=\"manual.bugs.dr2196\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2196\" target=\"_top\">2196</a>:\n-\t<span class=\"emphasis\"><em>Specification of <code class=\"code\">is_*[copy/move]_[constructible/assignable]</code> unclear for non-referencable types</em></span>\n+\t<span class=\"bold\"><strong>Specification of <code class=\"code\">is_*[copy/move]_[constructible/assignable]</code> unclear for non-referencable types</strong></span>\n     </span></dt><dd><p>Use the referenceable type concept.\n     </p></dd><dt><a id=\"manual.bugs.dr2212\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2212\" target=\"_top\">2212</a>:\n-\t<span class=\"emphasis\"><em><code class=\"code\">tuple_size</code> for <code class=\"code\">const pair</code> request <code class=\"code\">&lt;tuple&gt;</code> header</em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">tuple_size</code> for <code class=\"code\">const pair</code> request <code class=\"code\">&lt;tuple&gt;</code> header</strong></span>\n     </span></dt><dd><p>The <code class=\"code\">tuple_size</code> and <code class=\"code\">tuple_element</code>\n     partial specializations are defined in <code class=\"code\">&lt;utility&gt;</code> which\n     is included by <code class=\"code\">&lt;array&gt;</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr2296\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2296\" target=\"_top\">2296</a>:\n-\t<span class=\"emphasis\"><em><code class=\"code\">std::addressof</code> should be constexpr</em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">std::addressof</code> should be constexpr</strong></span>\n     </span></dt><dd><p>Use <code class=\"code\">__builtin_addressof</code> and add\n     <code class=\"code\">constexpr</code> to <code class=\"code\">addressof</code> for C++17 and later.\n     </p></dd><dt><a id=\"manual.bugs.dr2306\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2306\" target=\"_top\">2306</a>:\n-\t<span class=\"emphasis\"><em><code class=\"code\">match_results::reference</code> should be <code class=\"code\">value_type&amp;</code>, not <code class=\"code\">const value_type&amp;</code></em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">match_results::reference</code> should be <code class=\"code\">value_type&amp;</code>, not <code class=\"code\">const value_type&amp;</code></strong></span>\n     </span></dt><dd><p>Change typedef.\n     </p></dd><dt><a id=\"manual.bugs.dr2313\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2313\" target=\"_top\">2313</a>:\n-\t<span class=\"emphasis\"><em><code class=\"code\">tuple_size</code> should always derive from <code class=\"code\">integral_constant&lt;size_t, N&gt;</code></em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">tuple_size</code> should always derive from <code class=\"code\">integral_constant&lt;size_t, N&gt;</code></strong></span>\n     </span></dt><dd><p>Update definitions of the partial specializations for const and volatile types.\n     </p></dd><dt><a id=\"manual.bugs.dr2328\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2328\" target=\"_top\">2328</a>:\n-       <span class=\"emphasis\"><em>Rvalue stream extraction should use perfect forwarding</em></span>\n+\t<span class=\"bold\"><strong>Rvalue stream extraction should use perfect forwarding</strong></span>\n     </span></dt><dd><p>Use perfect forwarding for right operand.\n     </p></dd><dt><a id=\"manual.bugs.dr2329\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2329\" target=\"_top\">2329</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">regex_match()/regex_search()</code> with <code class=\"code\">match_results</code> should forbid temporary strings</em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">regex_match()/regex_search()</code> with <code class=\"code\">match_results</code> should forbid temporary strings</strong></span>\n     </span></dt><dd><p>Add deleted overloads for rvalue strings.\n     </p></dd><dt><a id=\"manual.bugs.dr2332\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2332\" target=\"_top\">2332</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">regex_iterator/regex_token_iterator</code> should forbid temporary regexes</em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">regex_iterator/regex_token_iterator</code> should forbid temporary regexes</strong></span>\n     </span></dt><dd><p>Add deleted constructors.\n     </p></dd><dt><a id=\"manual.bugs.dr2354\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2354\" target=\"_top\">2332</a>:\n-       <span class=\"emphasis\"><em>Unnecessary copying when inserting into maps with braced-init syntax</em></span>\n+\t<span class=\"bold\"><strong>Unnecessary copying when inserting into maps with braced-init syntax</strong></span>\n     </span></dt><dd><p>Add overloads of <code class=\"code\">insert</code> taking <code class=\"code\">value_type&amp;&amp;</code> rvalues.\n     </p></dd><dt><a id=\"manual.bugs.dr2399\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2399\" target=\"_top\">2399</a>:\n-\t<span class=\"emphasis\"><em><code class=\"code\">shared_ptr</code>'s constructor from <code class=\"code\">unique_ptr</code> should be constrained</em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">shared_ptr</code>'s constructor from <code class=\"code\">unique_ptr</code> should be constrained</strong></span>\n     </span></dt><dd><p>Constrain the constructor to require convertibility.\n     </p></dd><dt><a id=\"manual.bugs.dr2400\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2400\" target=\"_top\">2400</a>:\n-\t<span class=\"emphasis\"><em><code class=\"code\">shared_ptr</code>'s <code class=\"code\">get_deleter()</code> should use <code class=\"code\">addressof()</code></em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">shared_ptr</code>'s <code class=\"code\">get_deleter()</code> should use <code class=\"code\">addressof()</code></strong></span>\n     </span></dt><dd><p>Use <code class=\"code\">addressof</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr2401\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2401\" target=\"_top\">2401</a>:\n-\t<span class=\"emphasis\"><em><code class=\"code\">std::function</code> needs more <code class=\"code\">noexcept</code></em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">std::function</code> needs more <code class=\"code\">noexcept</code></strong></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code> to the assignment and comparisons.\n     </p></dd><dt><a id=\"manual.bugs.dr2407\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2407\" target=\"_top\">2407</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">packaged_task(allocator_arg_t, const Allocator&amp;, F&amp;&amp;)</code>\n+\t<span class=\"bold\"><strong><code class=\"code\">packaged_task(allocator_arg_t, const Allocator&amp;, F&amp;&amp;)</code>\n                  should neither be constrained nor <code class=\"code\">explicit</code>\n-       </em></span>\n+\t</strong></span>\n     </span></dt><dd><p>Remove <code class=\"code\">explicit</code> from the constructor.\n     </p></dd><dt><a id=\"manual.bugs.dr2408\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2408\" target=\"_top\">2408</a>:\n-       <span class=\"emphasis\"><em>SFINAE-friendly\n+\t<span class=\"bold\"><strong>SFINAE-friendly\n          <code class=\"code\">common_type</code>/<code class=\"code\">iterator_traits</code>\n          is missing in C++14\n-       </em></span>\n+\t</strong></span>\n     </span></dt><dd><p>Make <code class=\"code\">iterator_traits</code> empty if any of the\n       types is not present in the iterator.\n       Make <code class=\"code\">common_type&lt;&gt;</code> empty.\n     </p></dd><dt><a id=\"manual.bugs.dr2415\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2415\" target=\"_top\">2415</a>:\n-       <span class=\"emphasis\"><em>Inconsistency between <code class=\"code\">unique_ptr</code> and <code class=\"code\">shared_ptr</code></em></span>\n+\t<span class=\"bold\"><strong>Inconsistency between <code class=\"code\">unique_ptr</code> and <code class=\"code\">shared_ptr</code></strong></span>\n     </span></dt><dd><p>Create empty an <code class=\"code\">shared_ptr</code> from an empty\n                     <code class=\"code\">unique_ptr</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr2418\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2418\" target=\"_top\">2418</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">apply</code> does not work with member pointers</em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">apply</code> does not work with member pointers</strong></span>\n     </span></dt><dd><p>Use <code class=\"code\">mem_fn</code> for member pointers.\n     </p></dd><dt><a id=\"manual.bugs.dr2440\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2440\" target=\"_top\">2440</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">seed_seq::size()</code> should be <code class=\"code\">noexcept</code></em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">seed_seq::size()</code> should be <code class=\"code\">noexcept</code></strong></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr2441\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2441\" target=\"_top\">2441</a>:\n-       <span class=\"emphasis\"><em>Exact-width atomic typedefs should be provided</em></span>\n+\t<span class=\"bold\"><strong>Exact-width atomic typedefs should be provided</strong></span>\n     </span></dt><dd><p>Define the typedefs.\n     </p></dd><dt><a id=\"manual.bugs.dr2442\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2442\" target=\"_top\">2442</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">call_once()</code> shouldn't <code class=\"code\">DECAY_COPY()</code></em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">call_once()</code> shouldn't <code class=\"code\">DECAY_COPY()</code></strong></span>\n     </span></dt><dd><p>Remove indirection through call wrapper that made copies\n     of arguments and forward arguments straight to <code class=\"code\">std::invoke</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr2454\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2454\" target=\"_top\">2454</a>:\n-       <span class=\"emphasis\"><em>Add <code class=\"code\">raw_storage_iterator::base()</code> member\n-       </em></span>\n+\t<span class=\"bold\"><strong>Add <code class=\"code\">raw_storage_iterator::base()</code> member\n+\t</strong></span>\n     </span></dt><dd><p>Add the <code class=\"code\">base()</code> member function.\n     </p></dd><dt><a id=\"manual.bugs.dr2455\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2455\" target=\"_top\">2455</a>:\n-       <span class=\"emphasis\"><em>Allocator default construction should be allowed to throw\n-       </em></span>\n+\t<span class=\"bold\"><strong>Allocator default construction should be allowed to throw\n+\t</strong></span>\n     </span></dt><dd><p>Make <code class=\"code\">noexcept</code> specifications conditional.\n     </p></dd><dt><a id=\"manual.bugs.dr2458\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2458\" target=\"_top\">2458</a>:\n-       <span class=\"emphasis\"><em>N3778 and new library deallocation signatures\n-       </em></span>\n+\t<span class=\"bold\"><strong>N3778 and new library deallocation signatures\n+\t</strong></span>\n     </span></dt><dd><p>Remove unused overloads.\n     </p></dd><dt><a id=\"manual.bugs.dr2459\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2459\" target=\"_top\">2459</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">std::polar</code> should require a non-negative rho\n-       </em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">std::polar</code> should require a non-negative rho\n+\t</strong></span>\n     </span></dt><dd><p>Add debug mode assertion.\n     </p></dd><dt><a id=\"manual.bugs.dr2465\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2465\" target=\"_top\">2465</a>:\n-       <span class=\"emphasis\"><em>SFINAE-friendly <code class=\"code\">common_type</code> is nearly impossible\n+\t<span class=\"bold\"><strong>SFINAE-friendly <code class=\"code\">common_type</code> is nearly impossible\n        to specialize correctly and regresses key functionality\n-       </em></span>\n+\t</strong></span>\n     </span></dt><dd><p>Detect whether <code class=\"code\">decay_t</code> changes either type\n       and use the decayed types if so.\n     </p></dd><dt><a id=\"manual.bugs.dr2466\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2466\" target=\"_top\">2466</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">allocator_traits::max_size()</code> default behavior is incorrect\n-       </em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">allocator_traits::max_size()</code> default behavior is incorrect\n+\t</strong></span>\n     </span></dt><dd><p>Divide by the object type.\n     </p></dd><dt><a id=\"manual.bugs.dr2484\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2484\" target=\"_top\">2484</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">rethrow_if_nested()</code>  is doubly unimplementable\n-       </em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">rethrow_if_nested()</code>  is doubly unimplementable\n+\t</strong></span>\n     </span></dt><dd><p>Avoid using <code class=\"code\">dynamic_cast</code> when it would be\n     ill-formed.\n     </p></dd><dt><a id=\"manual.bugs.dr2487\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2487\" target=\"_top\">2487</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">bind()</code> should be <code class=\"code\">const</code>-overloaded\n-      not cv-overloaded\n-       </em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">bind()</code> should be <code class=\"code\">const</code>-overloaded\n+\tnot <span class=\"emphasis\"><em>cv</em></span>-overloaded\n+\t</strong></span>\n     </span></dt><dd><p>Deprecate volatile-qualified <code class=\"code\">operator()</code>\n     for C++17, make it ill-formed for C++20.\n     </p></dd><dt><a id=\"manual.bugs.dr2499\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2499\" target=\"_top\">2499</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">operator&gt;&gt;(basic_istream&amp;, CharT*)</code> makes it hard to avoid buffer overflows\n-       </em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">operator&gt;&gt;(basic_istream&amp;, CharT*)</code> makes it hard to avoid buffer overflows\n+\t</strong></span>\n     </span></dt><dd><p>Replace <code class=\"code\">operator&gt;&gt;(basic_istream&amp;, CharT*)</code>\n      and other overloads writing through pointers.\n     </p></dd><dt><a id=\"manual.bugs.dr2537\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2537\" target=\"_top\">2537</a>:\n-       <span class=\"emphasis\"><em>Constructors for <code class=\"code\">priority_queue</code> taking allocators\n+\t<span class=\"bold\"><strong>Constructors for <code class=\"code\">priority_queue</code> taking allocators\n \t should call <code class=\"code\">make_heap</code>\n-       </em></span>\n+\t</strong></span>\n     </span></dt><dd><p>Call <code class=\"code\">make_heap</code>.\n     </p></dd><dt><a id=\"manual.bugs.dr2566\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2566\" target=\"_top\">2566</a>:\n-       <span class=\"emphasis\"><em>Requirements on the first template parameter of container adaptors\n-       </em></span>\n+\t<span class=\"bold\"><strong>Requirements on the first template parameter of container adaptors\n+\t</strong></span>\n     </span></dt><dd><p>Add static assertions to enforce the requirement.\n     </p></dd><dt><a id=\"manual.bugs.dr2583\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2583\" target=\"_top\">2583</a>:\n-       <span class=\"emphasis\"><em>There is no way to supply an allocator for <code class=\"code\">basic_string(str, pos)</code>\n-       </em></span>\n+\t<span class=\"bold\"><strong>There is no way to supply an allocator for <code class=\"code\">basic_string(str, pos)</code>\n+\t</strong></span>\n     </span></dt><dd><p>Add new constructor.\n     </p></dd><dt><a id=\"manual.bugs.dr2586\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2586\" target=\"_top\">2586</a>:\n-       <span class=\"emphasis\"><em>Wrong value category used in <code class=\"code\">scoped_allocator_adaptor::construct()</code>\n-       </em></span>\n+\t<span class=\"bold\"><strong>Wrong value category used in <code class=\"code\">scoped_allocator_adaptor::construct()</code>\n+\t</strong></span>\n     </span></dt><dd><p>Change internal helper for uses-allocator construction\n       to always check using const lvalue allocators.\n     </p></dd><dt><a id=\"manual.bugs.dr2684\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2684\" target=\"_top\">2684</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">priority_queue</code> lacking comparator typedef\n-       </em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">priority_queue</code> lacking comparator typedef\n+\t</strong></span>\n     </span></dt><dd><p>Define the <code class=\"code\">value_compare</code> typedef.\n     </p></dd><dt><a id=\"manual.bugs.dr2735\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2735\" target=\"_top\">2735</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">std::abs(short)</code>,\n+\t<span class=\"bold\"><strong><code class=\"code\">std::abs(short)</code>,\n \t <code class=\"code\">std::abs(signed char)</code> and others should return\n \t <code class=\"code\">int</code> instead of <code class=\"code\">double</code> in order to be\n \t compatible with C++98 and C\n-       </em></span>\n+\t</strong></span>\n     </span></dt><dd><p>Resolved by the changes for\n       <a class=\"link\" href=\"bugs.html#manual.bugs.dr2192\">2192</a>.\n     </p></dd><dt><a id=\"manual.bugs.dr2770\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2770\" target=\"_top\">2770</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">tuple_size&lt;const T&gt;</code> specialization is not\n+\t<span class=\"bold\"><strong><code class=\"code\">tuple_size&lt;const T&gt;</code> specialization is not\n \t SFINAE compatible and breaks decomposition declarations\n-       </em></span>\n+\t</strong></span>\n     </span></dt><dd><p>Safely detect <code class=\"code\">tuple_size&lt;T&gt;::value</code> and\n       only use it if valid.\n     </p></dd><dt><a id=\"manual.bugs.dr2781\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2781\" target=\"_top\">2781</a>:\n-       <span class=\"emphasis\"><em>Contradictory requirements for <code class=\"code\">std::function</code>\n+\t<span class=\"bold\"><strong>Contradictory requirements for <code class=\"code\">std::function</code>\n          and <code class=\"code\">std::reference_wrapper</code>\n-       </em></span>\n+\t</strong></span>\n     </span></dt><dd><p>Remove special handling for <code class=\"code\">reference_wrapper</code>\n       arguments and store them directly as the target object.\n     </p></dd><dt><a id=\"manual.bugs.dr2802\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2802\" target=\"_top\">2802</a>:\n-       <span class=\"emphasis\"><em>Add noexcept to several <code class=\"code\">shared_ptr</code> related\n+\t<span class=\"bold\"><strong>Add noexcept to several <code class=\"code\">shared_ptr</code> related\n          functions\n-       </em></span>\n+\t</strong></span>\n     </span></dt><dd><p>Add noexcept.\n     </p></dd><dt><a id=\"manual.bugs.dr2873\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2873\" target=\"_top\">2873</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">shared_ptr</code> constructor requirements for a deleter\n-       </em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">shared_ptr</code> constructor requirements for a deleter\n+\t</strong></span>\n     </span></dt><dd><p>Use rvalues for deleters.\n     </p></dd><dt><a id=\"manual.bugs.dr2921\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2921\" target=\"_top\">2921</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">packaged_task</code> and type-erased allocators\n-       </em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">packaged_task</code> and type-erased allocators\n+\t</strong></span>\n     </span></dt><dd><p>For C++17 mode, remove the constructors taking\n       an allocator argument.\n     </p></dd><dt><a id=\"manual.bugs.dr2942\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2942\" target=\"_top\">2942</a>:\n-       <span class=\"emphasis\"><em>LWG 2873's resolution missed\n+\t<span class=\"bold\"><strong>LWG 2873's resolution missed\n          <code class=\"code\">weak_ptr::owner_before</code>\n-       </em></span>\n+\t</strong></span>\n     </span></dt><dd><p>Add noexcept.\n     </p></dd><dt><a id=\"manual.bugs.dr2996\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2996\" target=\"_top\">2996</a>:\n-       <span class=\"emphasis\"><em>Missing rvalue overloads for\n+\t<span class=\"bold\"><strong>Missing rvalue overloads for\n          <code class=\"code\">shared_ptr</code> operations\n-       </em></span>\n+\t</strong></span>\n     </span></dt><dd><p>Add additional constructor and cast overloads.\n     </p></dd><dt><a id=\"manual.bugs.dr2993\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2993\" target=\"_top\">2993</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">reference_wrapper&lt;T&gt;</code> conversion from <code class=\"code\">T&amp;&amp;</code>\n-       </em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">reference_wrapper&lt;T&gt;</code> conversion from <code class=\"code\">T&amp;&amp;</code>\n+\t</strong></span>\n     </span></dt><dd><p>Replaced the constructors with a constrained template,\n       to prevent participation in overload resolution when not valid.\n     </p></dd><dt><a id=\"manual.bugs.dr3074\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#3074\" target=\"_top\">3074</a>:\n-       <span class=\"emphasis\"><em>Non-member functions for <code class=\"code\">valarray</code> should only deduce from the <code class=\"code\">valarray</code>\n-       </em></span>\n+\t<span class=\"bold\"><strong>Non-member functions for <code class=\"code\">valarray</code> should only deduce from the <code class=\"code\">valarray</code>\n+\t</strong></span>\n     </span></dt><dd><p>Change scalar operands to be non-deduced context, so that\n       they will allow conversions from other types to the value_type.\n     </p></dd><dt><a id=\"manual.bugs.dr3076\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#3076\" target=\"_top\">3076</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">basic_string</code> CTAD ambiguity\n-       </em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">basic_string</code> CTAD ambiguity\n+\t</strong></span>\n     </span></dt><dd><p>Change constructors to constrained templates.\n     </p></dd><dt><a id=\"manual.bugs.dr3096\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#3096\" target=\"_top\">3096</a>:\n-       <span class=\"emphasis\"><em><code class=\"code\">path::lexically_relative</code> is confused by trailing slashes\n-       </em></span>\n+\t<span class=\"bold\"><strong><code class=\"code\">path::lexically_relative</code> is confused by trailing slashes\n+\t</strong></span>\n     </span></dt><dd><p>Implement the fix for trailing slashes.\n     </p></dd></dl></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"license.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"status.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"setup.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">License\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a02.\u00a0Setup</td></tr></table></div></body></html>\n\\ No newline at end of file"}, {"sha": "dee01c821596d0fedfddc5df625cc0cce15497f5", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 190, "deletions": 197, "changes": 387, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e2f453de3969c4789b96205febc36d9c3ce022a/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e2f453de3969c4789b96205febc36d9c3ce022a/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=8e2f453de3969c4789b96205febc36d9c3ce022a", "patch": "@@ -241,112 +241,112 @@ requirements of the license of GCC.\n \n       <variablelist>\n     <varlistentry xml:id=\"manual.bugs.dr5\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#5\">5</link>:\n-\t<emphasis>string::compare specification questionable</emphasis>\n+\t<emphasis role=\"bold\">string::compare specification questionable</emphasis>\n     </term>\n     <listitem><para>This should be two overloaded functions rather than a single function.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr17\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#17\">17</link>:\n-\t<emphasis>Bad bool parsing</emphasis>\n+\t<emphasis role=\"bold\">Bad bool parsing</emphasis>\n     </term>\n     <listitem><para>Apparently extracting Boolean values was messed up...\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr19\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#19\">19</link>:\n-\t<emphasis>\"Noconv\" definition too vague</emphasis>\n+\t<emphasis role=\"bold\">\"Noconv\" definition too vague</emphasis>\n     </term>\n     <listitem><para>If <code>codecvt::do_in</code> returns <code>noconv</code> there are\n \tno changes to the values in <code>[to, to_limit)</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr22\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#22\">22</link>:\n-\t<emphasis>Member open vs flags</emphasis>\n+\t<emphasis role=\"bold\">Member open vs flags</emphasis>\n     </term>\n     <listitem><para>Re-opening a file stream does <emphasis>not</emphasis> clear the state flags.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr23\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#23\">23</link>:\n-\t<emphasis>Num_get overflow result</emphasis>\n+\t<emphasis role=\"bold\">Num_get overflow result</emphasis>\n     </term>\n     <listitem><para>Implement the proposed resolution.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr25\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#25\">25</link>:\n-\t<emphasis>String operator&lt;&lt; uses width() value wrong</emphasis>\n+\t<emphasis role=\"bold\">String operator&lt;&lt; uses width() value wrong</emphasis>\n     </term>\n     <listitem><para>Padding issues.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr48\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#48\">48</link>:\n-\t<emphasis>Use of non-existent exception constructor</emphasis>\n+\t<emphasis role=\"bold\">Use of non-existent exception constructor</emphasis>\n     </term>\n     <listitem><para>An instance of <code>ios_base::failure</code> is constructed instead.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr49\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#49\">49</link>:\n-\t<emphasis>Underspecification of ios_base::sync_with_stdio</emphasis>\n+\t<emphasis role=\"bold\">Underspecification of ios_base::sync_with_stdio</emphasis>\n     </term>\n     <listitem><para>The return type is the <emphasis>previous</emphasis> state of synchronization.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr50\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#50\">50</link>:\n-\t<emphasis>Copy constructor and assignment operator of ios_base</emphasis>\n+\t<emphasis role=\"bold\">Copy constructor and assignment operator of ios_base</emphasis>\n     </term>\n     <listitem><para>These members functions are declared <code>private</code> and are\n \tthus inaccessible.  Specifying the correct semantics of\n \t\"copying stream state\" was deemed too complicated.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr60\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#60\">60</link>:\n-\t<emphasis>What is a formatted input function?</emphasis>\n+\t<emphasis role=\"bold\">What is a formatted input function?</emphasis>\n     </term>\n     <listitem><para>This DR made many widespread changes to <code>basic_istream</code>\n \tand <code>basic_ostream</code> all of which have been implemented.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr63\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#63\">63</link>:\n-\t<emphasis>Exception-handling policy for unformatted output</emphasis>\n+\t<emphasis role=\"bold\">Exception-handling policy for unformatted output</emphasis>\n     </term>\n     <listitem><para>Make the policy consistent with that of formatted input, unformatted\n \tinput, and formatted output.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr68\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#68\">68</link>:\n-\t<emphasis>Extractors for char* should store null at end</emphasis>\n+\t<emphasis role=\"bold\">Extractors for char* should store null at end</emphasis>\n     </term>\n     <listitem><para>And they do now.  An editing glitch in the last item in the list of\n \t[27.6.1.2.3]/7.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr74\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#74\">74</link>:\n-\t<emphasis>Garbled text for codecvt::do_max_length</emphasis>\n+\t<emphasis role=\"bold\">Garbled text for codecvt::do_max_length</emphasis>\n     </term>\n     <listitem><para>The text of the standard was gibberish.  Typos gone rampant.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr75\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#75\">75</link>:\n-\t<emphasis>Contradiction in codecvt::length's argument types</emphasis>\n+\t<emphasis role=\"bold\">Contradiction in codecvt::length's argument types</emphasis>\n     </term>\n     <listitem><para>Change the first parameter to <code>stateT&amp;</code> and implement\n \tthe new effects paragraph.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr83\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#83\">83</link>:\n-\t<emphasis>string::npos vs. string::max_size()</emphasis>\n+\t<emphasis role=\"bold\">string::npos vs. string::max_size()</emphasis>\n     </term>\n     <listitem><para>Safety checks on the size of the string should test against\n \t<code>max_size()</code> rather than <code>npos</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr90\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#90\">90</link>:\n-\t<emphasis>Incorrect description of operator&gt;&gt; for strings</emphasis>\n+\t<emphasis role=\"bold\">Incorrect description of operator&gt;&gt; for strings</emphasis>\n     </term>\n     <listitem><para>The effect contain <code>isspace(c,getloc())</code> which must be\n \treplaced by <code>isspace(c,is.getloc())</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr91\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#91\">91</link>:\n-\t<emphasis>Description of operator&gt;&gt; and getline() for string&lt;&gt;\n+\t<emphasis role=\"bold\">Description of operator&gt;&gt; and getline() for string&lt;&gt;\n \t    might cause endless loop</emphasis>\n     </term>\n     <listitem><para>They behave as a formatted input function and as an unformatted\n@@ -355,7 +355,7 @@ requirements of the license of GCC.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr103\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#103\">103</link>:\n-\t<emphasis>set::iterator is required to be modifiable, but this allows\n+\t<emphasis role=\"bold\">set::iterator is required to be modifiable, but this allows\n \t    modification of keys.</emphasis>\n     </term>\n     <listitem><para>For associative containers where the value type is the same as\n@@ -364,240 +364,233 @@ requirements of the license of GCC.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr109\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#109\">109</link>:\n-\t<emphasis>Missing binders for non-const sequence elements</emphasis>\n+\t<emphasis role=\"bold\">Missing binders for non-const sequence elements</emphasis>\n     </term>\n     <listitem><para>The <code>binder1st</code> and <code>binder2nd</code> didn't have an\n \t<code>operator()</code> taking a non-const parameter.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr110\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#110\">110</link>:\n-\t<emphasis>istreambuf_iterator::equal not const</emphasis>\n+\t<emphasis role=\"bold\">istreambuf_iterator::equal not const</emphasis>\n     </term>\n     <listitem><para>This was not a const member function.  Note that the DR says to\n \treplace the function with a const one; we have instead provided an\n \toverloaded version with identical contents.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr117\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#117\">117</link>:\n-\t<emphasis>basic_ostream uses nonexistent num_put member functions</emphasis>\n+\t<emphasis role=\"bold\">basic_ostream uses nonexistent num_put member functions</emphasis>\n     </term>\n     <listitem><para><code>num_put::put()</code> was overloaded on the wrong types.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr118\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#118\">118</link>:\n-\t<emphasis>basic_istream uses nonexistent num_get member functions</emphasis>\n+\t<emphasis role=\"bold\">basic_istream uses nonexistent num_get member functions</emphasis>\n     </term>\n     <listitem><para>Same as 117, but for <code>num_get::get()</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr129\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#129\">129</link>:\n-\t<emphasis>Need error indication from seekp() and seekg()</emphasis>\n+\t<emphasis role=\"bold\">Need error indication from seekp() and seekg()</emphasis>\n     </term>\n     <listitem><para>These functions set <code>failbit</code> on error now.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr130\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#130\">130</link>:\n-\t<emphasis>Return type of container::erase(iterator) differs for associative containers</emphasis>\n+\t<emphasis role=\"bold\">Return type of container::erase(iterator) differs for associative containers</emphasis>\n     </term>\n     <listitem><para>Make member <code>erase</code> return iterator for <code>set</code>, <code>multiset</code>, <code>map</code>, <code>multimap</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr136\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#136\">136</link>:\n-\t<emphasis>seekp, seekg setting wrong streams?</emphasis>\n+\t<emphasis role=\"bold\">seekp, seekg setting wrong streams?</emphasis>\n     </term>\n     <listitem><para><code>seekp</code> should only set the output stream, and\n \t<code>seekg</code> should only set the input stream.\n     </para></listitem></varlistentry>\n \n-<!--<varlistentry><term><ulink url=\"&DR;#159\">159</ulink>:\n-\t<emphasis>Strange use of underflow()</emphasis>\n-    </term>\n-    <listitem><para>In fstream.tcc, the basic_filebuf&lt;&gt;::showmanyc() function\n-\tshould probably not be calling <code>underflow()</code>.\n-    </para></listitem></varlistentry> -->\n-\n     <varlistentry xml:id=\"manual.bugs.dr167\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#167\">167</link>:\n-\t<emphasis>Improper use of traits_type::length()</emphasis>\n+\t<emphasis role=\"bold\">Improper use of traits_type::length()</emphasis>\n     </term>\n     <listitem><para><code>op&lt;&lt;</code> with a <code>const char*</code> was\n \tcalculating an incorrect number of characters to write.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr169\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#169\">169</link>:\n-\t<emphasis>Bad efficiency of overflow() mandated</emphasis>\n+\t<emphasis role=\"bold\">Bad efficiency of overflow() mandated</emphasis>\n     </term>\n     <listitem><para>Grow efficiently the internal array object.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr171\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#171\">171</link>:\n-\t<emphasis>Strange seekpos() semantics due to joint position</emphasis>\n+\t<emphasis role=\"bold\">Strange seekpos() semantics due to joint position</emphasis>\n     </term>\n     <listitem><para>Quite complex to summarize...\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr181\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#181\">181</link>:\n-\t<emphasis>make_pair() unintended behavior</emphasis>\n+\t<emphasis role=\"bold\">make_pair() unintended behavior</emphasis>\n     </term>\n     <listitem><para>This function used to take its arguments as reference-to-const, now\n \tit copies them (pass by value).\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr195\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#195\">195</link>:\n-\t<emphasis>Should basic_istream::sentry's constructor ever set eofbit?</emphasis>\n+\t<emphasis role=\"bold\">Should basic_istream::sentry's constructor ever set eofbit?</emphasis>\n     </term>\n     <listitem><para>Yes, it can, specifically if EOF is reached while skipping whitespace.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr206\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#206\">206</link>:\n-\t<emphasis><code>operator new(size_t, nothrow)</code> may become\n-          unlinked to ordinary <code>operator new</code> if ordinary\n-          version replaced\n-        </emphasis>\n+\t<emphasis role=\"bold\"><code>operator new(size_t, nothrow)</code> may become\n+\t  unlinked to ordinary <code>operator new</code> if ordinary\n+\t  version replaced\n+\t</emphasis>\n     </term>\n     <listitem><para>The <code>nothrow</code> forms of new and delete were\n       changed to call the throwing forms, handling any exception by\n       catching it and returning a null pointer.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr211\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#211\">211</link>:\n-\t<emphasis>operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</emphasis>\n+\t<emphasis role=\"bold\">operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</emphasis>\n     </term>\n     <listitem><para>If nothing is extracted into the string, <code>op&gt;&gt;</code> now\n \tsets <code>failbit</code> (which can cause an exception, etc., etc.).\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr214\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#214\">214</link>:\n-\t<emphasis>set::find() missing const overload</emphasis>\n+\t<emphasis role=\"bold\">set::find() missing const overload</emphasis>\n     </term>\n     <listitem><para>Both <code>set</code> and <code>multiset</code> were missing\n \toverloaded find, lower_bound, upper_bound, and equal_range functions\n \tfor const instances.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr231\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#231\">231</link>:\n-\t<emphasis>Precision in iostream?</emphasis>\n+\t<emphasis role=\"bold\">Precision in iostream?</emphasis>\n     </term>\n     <listitem><para>For conversion from a floating-point type, <code>str.precision()</code>\n \tis specified in the conversion specification.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr233\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#233\">233</link>:\n-\t<emphasis>Insertion hints in associative containers</emphasis>\n+\t<emphasis role=\"bold\">Insertion hints in associative containers</emphasis>\n     </term>\n     <listitem><para>Implement N1780, first check before then check after, insert as close\n \tto hint as possible.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr235\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#235\">235</link>:\n-\t<emphasis>No specification of default ctor for reverse_iterator</emphasis>\n+\t<emphasis role=\"bold\">No specification of default ctor for reverse_iterator</emphasis>\n     </term>\n     <listitem><para>The declaration of <code>reverse_iterator</code> lists a default constructor.\n \tHowever, no specification is given what this constructor should do.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr241\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#241\">241</link>:\n-\t<emphasis>Does unique_copy() require CopyConstructible and Assignable?</emphasis>\n+\t<emphasis role=\"bold\">Does unique_copy() require CopyConstructible and Assignable?</emphasis>\n     </term>\n     <listitem><para>Add a helper for forward_iterator/output_iterator, fix the existing\n \tone for input_iterator/output_iterator to not rely on Assignability.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr243\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#243\">243</link>:\n-\t<emphasis>get and getline when sentry reports failure</emphasis>\n+\t<emphasis role=\"bold\">get and getline when sentry reports failure</emphasis>\n     </term>\n     <listitem><para>Store a null character only if the character array has a non-zero size.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr251\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#251\">251</link>:\n-\t<emphasis>basic_stringbuf missing allocator_type</emphasis>\n+\t<emphasis role=\"bold\">basic_stringbuf missing allocator_type</emphasis>\n     </term>\n     <listitem><para>This nested typedef was originally not specified.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr253\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#253\">253</link>:\n-\t<emphasis>valarray helper functions are almost entirely useless</emphasis>\n+\t<emphasis role=\"bold\">valarray helper functions are almost entirely useless</emphasis>\n     </term>\n     <listitem><para>Make the copy constructor and copy-assignment operator declarations\n \tpublic in gslice_array, indirect_array, mask_array, slice_array; provide\n \tdefinitions.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr265\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#265\">265</link>:\n-\t<emphasis>std::pair::pair() effects overly restrictive</emphasis>\n+\t<emphasis role=\"bold\">std::pair::pair() effects overly restrictive</emphasis>\n     </term>\n     <listitem><para>The default ctor would build its members from copies of temporaries;\n \tnow it simply uses their respective default ctors.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr266\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#266\">266</link>:\n-\t<emphasis>bad_exception::~bad_exception() missing Effects clause</emphasis>\n+\t<emphasis role=\"bold\">bad_exception::~bad_exception() missing Effects clause</emphasis>\n     </term>\n     <listitem><para>The <code>bad_</code>* classes no longer have destructors (they\n \tare trivial), since no description of them was ever given.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr271\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#271\">271</link>:\n-\t<emphasis>basic_iostream missing typedefs</emphasis>\n+\t<emphasis role=\"bold\">basic_iostream missing typedefs</emphasis>\n     </term>\n     <listitem><para>The typedefs it inherits from its base classes can't be used, since\n \t(for example) <code>basic_iostream&lt;T&gt;::traits_type</code> is ambiguous.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr275\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#275\">275</link>:\n-\t<emphasis>Wrong type in num_get::get() overloads</emphasis>\n+\t<emphasis role=\"bold\">Wrong type in num_get::get() overloads</emphasis>\n     </term>\n     <listitem><para>Similar to 118.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr280\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#280\">280</link>:\n-\t<emphasis>Comparison of reverse_iterator to const reverse_iterator</emphasis>\n+\t<emphasis role=\"bold\">Comparison of reverse_iterator to const reverse_iterator</emphasis>\n     </term>\n     <listitem><para>Add global functions with two template parameters.\n \t(NB: not added for now a templated assignment operator)\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr292\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#292\">292</link>:\n-\t<emphasis>Effects of a.copyfmt (a)</emphasis>\n+\t<emphasis role=\"bold\">Effects of a.copyfmt (a)</emphasis>\n     </term>\n     <listitem><para>If <code>(this == &amp;rhs)</code> do nothing.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr300\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#300\">300</link>:\n-\t<emphasis>List::merge() specification incomplete</emphasis>\n+\t<emphasis role=\"bold\">List::merge() specification incomplete</emphasis>\n     </term>\n     <listitem><para>If <code>(this == &amp;x)</code> do nothing.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr303\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#303\">303</link>:\n-\t<emphasis>Bitset input operator underspecified</emphasis>\n+\t<emphasis role=\"bold\">Bitset input operator underspecified</emphasis>\n     </term>\n     <listitem><para>Basically, compare the input character to\n \t\t    <code>is.widen(0)</code> and <code>is.widen(1)</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr305\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#305\">305</link>:\n-\t<emphasis>Default behavior of codecvt&lt;wchar_t, char,\n+\t<emphasis role=\"bold\">Default behavior of codecvt&lt;wchar_t, char,\n \t\t  mbstate_t&gt;::length()</emphasis>\n     </term>\n     <listitem><para>Do not specify what <code>codecvt&lt;wchar_t, char,\n \t\t    mbstate_t&gt;::do_length</code> must return.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr328\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#328\">328</link>:\n-\t<emphasis>Bad sprintf format modifier in\n+\t<emphasis role=\"bold\">Bad sprintf format modifier in\n \t\t  money_put&lt;&gt;::do_put()</emphasis>\n     </term>\n     <listitem><para>Change the format string to \"%.0Lf\".\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr365\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#365\">365</link>:\n-\t<emphasis>Lack of const-qualification in clause 27</emphasis>\n+\t<emphasis role=\"bold\">Lack of const-qualification in clause 27</emphasis>\n     </term>\n     <listitem><para>Add const overloads of <code>is_open</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr387\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#387\">387</link>:\n-\t<emphasis>std::complex over-encapsulated</emphasis>\n+\t<emphasis role=\"bold\">std::complex over-encapsulated</emphasis>\n     </term>\n     <listitem><para>Add the <code>real(T)</code> and <code>imag(T)</code>\n \t\t    members;  in C++11 mode, also adjust the existing\n@@ -606,711 +599,711 @@ requirements of the license of GCC.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr389\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#389\">389</link>:\n-\t<emphasis>Const overload of valarray::operator[] returns\n+\t<emphasis role=\"bold\">Const overload of valarray::operator[] returns\n \t\t  by value</emphasis>\n     </term>\n     <listitem><para>Change it to return a <code>const T&amp;</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr396\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#396\">396</link>:\n-\t<emphasis>what are characters zero and one</emphasis>\n+\t<emphasis role=\"bold\">what are characters zero and one</emphasis>\n     </term>\n     <listitem><para>Implement the proposed resolution.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr402\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#402\">402</link>:\n-\t<emphasis>Wrong new expression in [some_]allocator::construct</emphasis>\n+\t<emphasis role=\"bold\">Wrong new expression in [some_]allocator::construct</emphasis>\n     </term>\n     <listitem><para>Replace \"new\" with \"::new\".\n     </para></listitem></varlistentry>\n \n     <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-closed.html#408\">408</link>:\n-\t<emphasis>\n+\t<emphasis role=\"bold\">\n \tIs vector&lt;reverse_iterator&lt;char*&gt; &gt; forbidden?\n \t</emphasis>\n     </term>\n     <listitem><para>Tweak the debug-mode checks in _Safe_iterator.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr409\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#409\">409</link>:\n-\t<emphasis>Closing an fstream should clear the error state</emphasis>\n+\t<emphasis role=\"bold\">Closing an fstream should clear the error state</emphasis>\n     </term>\n     <listitem><para>Have <code>open</code> clear the error flags.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr415\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#415\">415</link>:\n-\t<emphasis>Behavior of std::ws</emphasis>\n+\t<emphasis role=\"bold\">Behavior of std::ws</emphasis>\n     </term>\n     <listitem><para>Change it to be an unformatted input function\n       (i.e. construct a sentry and catch exceptions).\n     </para></listitem></varlistentry>\n \n     <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-closed.html#431\">431</link>:\n-\t<emphasis>Swapping containers with unequal allocators</emphasis>\n+\t<emphasis role=\"bold\">Swapping containers with unequal allocators</emphasis>\n     </term>\n     <listitem><para>Implement Option 3, as per N1599.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr432\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#432\">432</link>:\n-\t<emphasis>stringbuf::overflow() makes only one write position\n+\t<emphasis role=\"bold\">stringbuf::overflow() makes only one write position\n \t    available</emphasis>\n     </term>\n     <listitem><para>Implement the resolution, beyond DR 169.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr434\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#434\">434</link>:\n-\t<emphasis>bitset::to_string() hard to use</emphasis>\n+\t<emphasis role=\"bold\">bitset::to_string() hard to use</emphasis>\n     </term>\n     <listitem><para>Add three overloads, taking fewer template arguments.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr438\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#438\">438</link>:\n-\t<emphasis>Ambiguity in the \"do the right thing\" clause</emphasis>\n+\t<emphasis role=\"bold\">Ambiguity in the \"do the right thing\" clause</emphasis>\n     </term>\n     <listitem><para>Implement the resolution, basically cast less.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr445\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#445\">445</link>:\n-\t<emphasis>iterator_traits::reference unspecified for some iterator categories</emphasis>\n+\t<emphasis role=\"bold\">iterator_traits::reference unspecified for some iterator categories</emphasis>\n     </term>\n     <listitem><para>Change <code>istreambuf_iterator::reference</code> in C++11 mode.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr453\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#453\">453</link>:\n-\t<emphasis>basic_stringbuf::seekoff need not always fail for an empty stream</emphasis>\n+\t<emphasis role=\"bold\">basic_stringbuf::seekoff need not always fail for an empty stream</emphasis>\n     </term>\n     <listitem><para>Don't fail if the next pointer is null and newoff is zero.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr455\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#455\">455</link>:\n-\t<emphasis>cerr::tie() and wcerr::tie() are overspecified</emphasis>\n+\t<emphasis role=\"bold\">cerr::tie() and wcerr::tie() are overspecified</emphasis>\n     </term>\n     <listitem><para>Initialize cerr tied to cout and wcerr tied to wcout.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr464\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#464\">464</link>:\n-\t<emphasis>Suggestion for new member functions in standard containers</emphasis>\n+\t<emphasis role=\"bold\">Suggestion for new member functions in standard containers</emphasis>\n     </term>\n     <listitem><para>Add <code>data()</code> to <code>std::vector</code> and\n \t<code>at(const key_type&amp;)</code> to <code>std::map</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr467\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#467\">467</link>:\n-\t<emphasis>char_traits::lt(), compare(), and memcmp()</emphasis>\n+\t<emphasis role=\"bold\">char_traits::lt(), compare(), and memcmp()</emphasis>\n     </term>\n     <listitem><para>Change <code>lt</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr508\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#508\">508</link>:\n-\t<emphasis>Bad parameters for ranlux64_base_01</emphasis>\n+\t<emphasis role=\"bold\">Bad parameters for ranlux64_base_01</emphasis>\n     </term>\n     <listitem><para>Fix the parameters.\n     </para></listitem></varlistentry>\n \n     <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-closed.html#512\">512</link>:\n-\t<emphasis>Seeding subtract_with_carry_01 from a single unsigned long</emphasis>\n+\t<emphasis role=\"bold\">Seeding subtract_with_carry_01 from a single unsigned long</emphasis>\n     </term>\n     <listitem><para>Construct a <code>linear_congruential</code> engine and seed with it.\n     </para></listitem></varlistentry>\n \n     <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-closed.html#526\">526</link>:\n-\t<emphasis>Is it undefined if a function in the standard changes in\n+\t<emphasis role=\"bold\">Is it undefined if a function in the standard changes in\n \t    parameters?</emphasis>\n     </term>\n     <listitem><para>Use &amp;value.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr538\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#538\">538</link>:\n-\t<emphasis>241 again: Does unique_copy() require CopyConstructible\n+\t<emphasis role=\"bold\">241 again: Does unique_copy() require CopyConstructible\n \t    and Assignable?</emphasis>\n     </term>\n     <listitem><para>In case of input_iterator/output_iterator rely on Assignability of\n \tinput_iterator' value_type.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr539\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#539\">539</link>:\n-\t<emphasis>partial_sum and adjacent_difference should mention\n+\t<emphasis role=\"bold\">partial_sum and adjacent_difference should mention\n \t    requirements</emphasis>\n     </term>\n     <listitem><para>We were almost doing the right thing, just use std::move\n \tin adjacent_difference.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr541\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#541\">541</link>:\n-\t<emphasis>shared_ptr template assignment and void</emphasis>\n+\t<emphasis role=\"bold\">shared_ptr template assignment and void</emphasis>\n     </term>\n     <listitem><para>Add an auto_ptr&lt;void&gt; specialization.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr543\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#543\">543</link>:\n-\t<emphasis>valarray slice default constructor</emphasis>\n+\t<emphasis role=\"bold\">valarray slice default constructor</emphasis>\n     </term>\n     <listitem><para>Follow the straightforward proposed resolution.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr550\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#550\">550</link>:\n-\t<emphasis>What should the return type of pow(float,int) be?</emphasis>\n+\t<emphasis role=\"bold\">What should the return type of pow(float,int) be?</emphasis>\n     </term>\n     <listitem><para>In C++11 mode, remove the pow(float,int), etc., signatures.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr581\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#581\">581</link>:\n-\t<emphasis><code>flush()</code> not unformatted function</emphasis>\n+\t<emphasis role=\"bold\"><code>flush()</code> not unformatted function</emphasis>\n     </term>\n     <listitem><para>Change it to be a unformatted output function (i.e. construct a sentry and catch exceptions).\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr586\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#586\">586</link>:\n-\t<emphasis>string inserter not a formatted function</emphasis>\n+\t<emphasis role=\"bold\">string inserter not a formatted function</emphasis>\n     </term>\n     <listitem><para>Change it to be a formatted output function (i.e. catch exceptions).\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr596\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#596\">596</link>:\n-\t<emphasis>27.8.1.3 Table 112 omits \"a+\" and \"a+b\" modes</emphasis>\n+\t<emphasis role=\"bold\">27.8.1.3 Table 112 omits \"a+\" and \"a+b\" modes</emphasis>\n     </term>\n     <listitem><para>Add the missing modes to fopen_mode.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr630\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#630\">630</link>:\n-\t<emphasis>arrays of valarray</emphasis>\n+\t<emphasis role=\"bold\">arrays of valarray</emphasis>\n     </term>\n     <listitem><para>Implement the simple resolution.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr660\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#660\">660</link>:\n-\t<emphasis>Missing bitwise operations</emphasis>\n+\t<emphasis role=\"bold\">Missing bitwise operations</emphasis>\n     </term>\n     <listitem><para>Add the missing operations.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr691\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#691\">691</link>:\n-\t<emphasis>const_local_iterator cbegin, cend missing from TR1</emphasis>\n+\t<emphasis role=\"bold\">const_local_iterator cbegin, cend missing from TR1</emphasis>\n     </term>\n     <listitem><para>In C++11 mode add cbegin(size_type) and cend(size_type)\n \t\t    to the unordered containers.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr693\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#693\">693</link>:\n-\t<emphasis>std::bitset::all() missing</emphasis>\n+\t<emphasis role=\"bold\">std::bitset::all() missing</emphasis>\n     </term>\n     <listitem><para>Add it, consistently with the discussion.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr695\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#695\">695</link>:\n-\t<emphasis>ctype&lt;char&gt;::classic_table() not accessible</emphasis>\n+\t<emphasis role=\"bold\">ctype&lt;char&gt;::classic_table() not accessible</emphasis>\n     </term>\n     <listitem><para>Make the member functions table and classic_table public.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr696\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#696\">696</link>:\n-\t<emphasis>istream::operator&gt;&gt;(int&amp;) broken</emphasis>\n+\t<emphasis role=\"bold\">istream::operator&gt;&gt;(int&amp;) broken</emphasis>\n     </term>\n     <listitem><para>Implement the straightforward resolution.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr761\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#761\">761</link>:\n-\t<emphasis>unordered_map needs an at() member function</emphasis>\n+\t<emphasis role=\"bold\">unordered_map needs an at() member function</emphasis>\n     </term>\n     <listitem><para>In C++11 mode, add at() and at() const.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr775\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#775\">775</link>:\n-\t<emphasis>Tuple indexing should be unsigned?</emphasis>\n+\t<emphasis role=\"bold\">Tuple indexing should be unsigned?</emphasis>\n     </term>\n     <listitem><para>Implement the int -&gt; size_t replacements.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr776\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#776\">776</link>:\n-\t<emphasis>Undescribed assign function of std::array</emphasis>\n+\t<emphasis role=\"bold\">Undescribed assign function of std::array</emphasis>\n     </term>\n     <listitem><para>In C++11 mode, remove assign, add fill.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr781\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#781\">781</link>:\n-\t<emphasis>std::complex should add missing C99 functions</emphasis>\n+\t<emphasis role=\"bold\">std::complex should add missing C99 functions</emphasis>\n     </term>\n     <listitem><para>In C++11 mode, add std::proj.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr809\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#809\">809</link>:\n-\t<emphasis>std::swap should be overloaded for array types</emphasis>\n+\t<emphasis role=\"bold\">std::swap should be overloaded for array types</emphasis>\n     </term>\n     <listitem><para>Add the overload.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr853\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#853\">853</link>:\n-\t<emphasis>to_string needs updating with zero and one</emphasis>\n+\t<emphasis role=\"bold\">to_string needs updating with zero and one</emphasis>\n     </term>\n     <listitem><para>Update / add the signatures.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr865\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#865\">865</link>:\n-\t<emphasis>More algorithms that throw away information</emphasis>\n+\t<emphasis role=\"bold\">More algorithms that throw away information</emphasis>\n     </term>\n     <listitem><para>The traditional HP / SGI return type and value is blessed\n \t\t    by the resolution of the DR.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr1203\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#1203\">1203</link>:\n-       <emphasis>More useful rvalue stream insertion</emphasis>\n+\t<emphasis role=\"bold\">More useful rvalue stream insertion</emphasis>\n     </term>\n     <listitem><para>Return the stream as its original type, not the base class.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr1339\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#1339\">1339</link>:\n-       <emphasis>uninitialized_fill_n should return the end of its range</emphasis>\n+\t<emphasis role=\"bold\">uninitialized_fill_n should return the end of its range</emphasis>\n     </term>\n     <listitem><para>Return the end of the filled range.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2021\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2021\">2021</link>:\n-       <emphasis>Further incorrect uses of <code>result_of</code></emphasis>\n+\t<emphasis role=\"bold\">Further incorrect uses of <code>result_of</code></emphasis>\n     </term>\n     <listitem><para>Correctly decay types in signature of <code>std::async</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2049\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2049\">2049</link>:\n-\t<emphasis><code>is_destructible</code> underspecified</emphasis>\n+\t<emphasis role=\"bold\"><code>is_destructible</code> underspecified</emphasis>\n     </term>\n     <listitem><para>Handle non-object types.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2056\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2056\">2056</link>:\n-\t<emphasis>future_errc enums start with value 0 (invalid value for broken_promise)</emphasis>\n+\t<emphasis role=\"bold\">future_errc enums start with value 0 (invalid value for broken_promise)</emphasis>\n     </term>\n     <listitem><para>Reorder enumerators.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2059\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2059\">2059</link>:\n-\t<emphasis>C++0x ambiguity problem with map::erase</emphasis>\n+\t<emphasis role=\"bold\">C++0x ambiguity problem with map::erase</emphasis>\n     </term>\n     <listitem><para>Add additional overloads.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2062\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2062\">2062</link>:\n-\t<emphasis>2062. Effect contradictions w/o no-throw guarantee of <code>std::function</code> swaps</emphasis>\n+\t<emphasis role=\"bold\">2062. Effect contradictions w/o no-throw guarantee of <code>std::function</code> swaps</emphasis>\n     </term>\n     <listitem><para>Add <code>noexcept</code> to swap functions.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2063\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2063\">2063</link>:\n-\t<emphasis>Contradictory requirements for string move assignment</emphasis>\n+\t<emphasis role=\"bold\">Contradictory requirements for string move assignment</emphasis>\n     </term>\n     <listitem><para>Respect propagation trait for move assignment.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2064\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2064\">2064</link>:\n-\t<emphasis>More noexcept issues in basic_string</emphasis>\n+\t<emphasis role=\"bold\">More noexcept issues in basic_string</emphasis>\n     </term>\n     <listitem><para>Add noexcept to the comparison operators.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2067\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2067\">2067</link>:\n-\t<emphasis>packaged_task should have deleted copy c'tor with const parameter</emphasis>\n+\t<emphasis role=\"bold\">packaged_task should have deleted copy c'tor with const parameter</emphasis>\n     </term>\n     <listitem><para>Fix signatures.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2101\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2101\">2101</link>:\n-\t<emphasis>Some transformation types can produce impossible types</emphasis>\n+\t<emphasis role=\"bold\">Some transformation types can produce impossible types</emphasis>\n     </term>\n     <listitem><para>Use the referenceable type concept.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2106\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2106\">2106</link>:\n-\t<emphasis>move_iterator wrapping iterators returning prvalues</emphasis>\n+\t<emphasis role=\"bold\">move_iterator wrapping iterators returning prvalues</emphasis>\n     </term>\n     <listitem><para>Change the <code>reference</code> type.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2108\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2108\">2108</link>:\n-\t<emphasis>No way to identify allocator types that always compare equal</emphasis>\n+\t<emphasis role=\"bold\">No way to identify allocator types that always compare equal</emphasis>\n     </term>\n     <listitem><para>Define and use <code>is_always_equal</code> even for C++11.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2118\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2118\">2118</link>:\n-\t<emphasis><code>unique_ptr</code> for array does not support cv qualification conversion of actual argument</emphasis>\n+\t<emphasis role=\"bold\"><code>unique_ptr</code> for array does not support cv qualification conversion of actual argument</emphasis>\n     </term>\n     <listitem><para>Adjust constraints to allow safe conversions.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2127\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2127\">2127</link>:\n-\t<emphasis>Move-construction with <code>raw_storage_iterator</code></emphasis>\n+\t<emphasis role=\"bold\">Move-construction with <code>raw_storage_iterator</code></emphasis>\n     </term>\n     <listitem><para>Add assignment operator taking an rvalue.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2132\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2132\">2132</link>:\n-\t<emphasis><code>std::function</code> ambiguity</emphasis>\n+\t<emphasis role=\"bold\"><code>std::function</code> ambiguity</emphasis>\n     </term>\n     <listitem><para>Constrain the constructor to only accept callable types.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2141\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2141\">2141</link>:\n-\t<emphasis><code>common_type</code> trait produces reference types</emphasis>\n+\t<emphasis role=\"bold\"><code>common_type</code> trait produces reference types</emphasis>\n     </term>\n     <listitem><para>Use <code>decay</code> for the result type.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2144\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2144\">2144</link>:\n-\t<emphasis>Missing <code>noexcept</code> specification in <code>type_index</code></emphasis>\n+\t<emphasis role=\"bold\">Missing <code>noexcept</code> specification in <code>type_index</code></emphasis>\n     </term>\n     <listitem><para>Add <code>noexcept</code>\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2145\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2145\">2145</link>:\n-\t<emphasis><code>error_category</code> default constructor</emphasis>\n+\t<emphasis role=\"bold\"><code>error_category</code> default constructor</emphasis>\n     </term>\n     <listitem><para>Declare a public constexpr constructor.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2162\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2162\">2162</link>:\n-\t<emphasis><code>allocator_traits::max_size</code> missing <code>noexcept</code></emphasis>\n+\t<emphasis role=\"bold\"><code>allocator_traits::max_size</code> missing <code>noexcept</code></emphasis>\n     </term>\n     <listitem><para>Add <code>noexcept</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2187\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2187\">2187</link>:\n-\t<emphasis><code>vector&lt;bool&gt;</code> is missing <code>emplace</code> and <code>emplace_back</code> member functions</emphasis>\n+\t<emphasis role=\"bold\"><code>vector&lt;bool&gt;</code> is missing <code>emplace</code> and <code>emplace_back</code> member functions</emphasis>\n     </term>\n     <listitem><para>Add <code>emplace</code> and <code>emplace_back</code> member functions.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2192\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2192\">2192</link>:\n-\t<emphasis>Validity and return type of <code>std::abs(0u)</code> is unclear</emphasis>\n+\t<emphasis role=\"bold\">Validity and return type of <code>std::abs(0u)</code> is unclear</emphasis>\n     </term>\n     <listitem><para>Move all declarations to a common header and remove the\n     generic <code>abs</code> which accepted unsigned arguments.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2196\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2196\">2196</link>:\n-\t<emphasis>Specification of <code>is_*[copy/move]_[constructible/assignable]</code> unclear for non-referencable types</emphasis>\n+\t<emphasis role=\"bold\">Specification of <code>is_*[copy/move]_[constructible/assignable]</code> unclear for non-referencable types</emphasis>\n     </term>\n     <listitem><para>Use the referenceable type concept.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2212\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2212\">2212</link>:\n-\t<emphasis><code>tuple_size</code> for <code>const pair</code> request <code>&lt;tuple&gt;</code> header</emphasis>\n+\t<emphasis role=\"bold\"><code>tuple_size</code> for <code>const pair</code> request <code>&lt;tuple&gt;</code> header</emphasis>\n     </term>\n     <listitem><para>The <code>tuple_size</code> and <code>tuple_element</code>\n     partial specializations are defined in <code>&lt;utility&gt;</code> which\n     is included by <code>&lt;array&gt;</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2296\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2296\">2296</link>:\n-\t<emphasis><code>std::addressof</code> should be constexpr</emphasis>\n+\t<emphasis role=\"bold\"><code>std::addressof</code> should be constexpr</emphasis>\n     </term>\n     <listitem><para>Use <code>__builtin_addressof</code> and add\n     <code>constexpr</code> to <code>addressof</code> for C++17 and later.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2306\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2306\">2306</link>:\n-\t<emphasis><code>match_results::reference</code> should be <code>value_type&amp;</code>, not <code>const value_type&amp;</code></emphasis>\n+\t<emphasis role=\"bold\"><code>match_results::reference</code> should be <code>value_type&amp;</code>, not <code>const value_type&amp;</code></emphasis>\n     </term>\n     <listitem><para>Change typedef.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2313\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2313\">2313</link>:\n-\t<emphasis><code>tuple_size</code> should always derive from <code>integral_constant&lt;size_t, N&gt;</code></emphasis>\n+\t<emphasis role=\"bold\"><code>tuple_size</code> should always derive from <code>integral_constant&lt;size_t, N&gt;</code></emphasis>\n     </term>\n     <listitem><para>Update definitions of the partial specializations for const and volatile types.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2328\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2328\">2328</link>:\n-       <emphasis>Rvalue stream extraction should use perfect forwarding</emphasis>\n+\t<emphasis role=\"bold\">Rvalue stream extraction should use perfect forwarding</emphasis>\n     </term>\n     <listitem><para>Use perfect forwarding for right operand.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2329\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2329\">2329</link>:\n-       <emphasis><code>regex_match()/regex_search()</code> with <code>match_results</code> should forbid temporary strings</emphasis>\n+\t<emphasis role=\"bold\"><code>regex_match()/regex_search()</code> with <code>match_results</code> should forbid temporary strings</emphasis>\n     </term>\n     <listitem><para>Add deleted overloads for rvalue strings.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2332\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2332\">2332</link>:\n-       <emphasis><code>regex_iterator/regex_token_iterator</code> should forbid temporary regexes</emphasis>\n+\t<emphasis role=\"bold\"><code>regex_iterator/regex_token_iterator</code> should forbid temporary regexes</emphasis>\n     </term>\n     <listitem><para>Add deleted constructors.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2354\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2354\">2332</link>:\n-       <emphasis>Unnecessary copying when inserting into maps with braced-init syntax</emphasis>\n+\t<emphasis role=\"bold\">Unnecessary copying when inserting into maps with braced-init syntax</emphasis>\n     </term>\n     <listitem><para>Add overloads of <code>insert</code> taking <code>value_type&amp;&amp;</code> rvalues.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2399\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2399\">2399</link>:\n-\t<emphasis><code>shared_ptr</code>'s constructor from <code>unique_ptr</code> should be constrained</emphasis>\n+\t<emphasis role=\"bold\"><code>shared_ptr</code>'s constructor from <code>unique_ptr</code> should be constrained</emphasis>\n     </term>\n     <listitem><para>Constrain the constructor to require convertibility.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2400\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2400\">2400</link>:\n-\t<emphasis><code>shared_ptr</code>'s <code>get_deleter()</code> should use <code>addressof()</code></emphasis>\n+\t<emphasis role=\"bold\"><code>shared_ptr</code>'s <code>get_deleter()</code> should use <code>addressof()</code></emphasis>\n     </term>\n     <listitem><para>Use <code>addressof</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2401\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2401\">2401</link>:\n-\t<emphasis><code>std::function</code> needs more <code>noexcept</code></emphasis>\n+\t<emphasis role=\"bold\"><code>std::function</code> needs more <code>noexcept</code></emphasis>\n     </term>\n     <listitem><para>Add <code>noexcept</code> to the assignment and comparisons.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2407\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2407\">2407</link>:\n-       <emphasis><code>packaged_task(allocator_arg_t, const Allocator&amp;, F&amp;&amp;)</code>\n+\t<emphasis role=\"bold\"><code>packaged_task(allocator_arg_t, const Allocator&amp;, F&amp;&amp;)</code>\n                  should neither be constrained nor <code>explicit</code>\n-       </emphasis>\n+\t</emphasis>\n     </term>\n     <listitem><para>Remove <code>explicit</code> from the constructor.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2408\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2408\">2408</link>:\n-       <emphasis>SFINAE-friendly\n+\t<emphasis role=\"bold\">SFINAE-friendly\n          <code>common_type</code>/<code>iterator_traits</code>\n          is missing in C++14\n-       </emphasis>\n+\t</emphasis>\n     </term>\n     <listitem><para>Make <code>iterator_traits</code> empty if any of the\n       types is not present in the iterator.\n       Make <code>common_type&lt;&gt;</code> empty.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2415\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2415\">2415</link>:\n-       <emphasis>Inconsistency between <code>unique_ptr</code> and <code>shared_ptr</code></emphasis>\n+\t<emphasis role=\"bold\">Inconsistency between <code>unique_ptr</code> and <code>shared_ptr</code></emphasis>\n     </term>\n     <listitem><para>Create empty an <code>shared_ptr</code> from an empty\n                     <code>unique_ptr</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2418\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2418\">2418</link>:\n-       <emphasis><code>apply</code> does not work with member pointers</emphasis>\n+\t<emphasis role=\"bold\"><code>apply</code> does not work with member pointers</emphasis>\n     </term>\n     <listitem><para>Use <code>mem_fn</code> for member pointers.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2440\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2440\">2440</link>:\n-       <emphasis><code>seed_seq::size()</code> should be <code>noexcept</code></emphasis>\n+\t<emphasis role=\"bold\"><code>seed_seq::size()</code> should be <code>noexcept</code></emphasis>\n     </term>\n     <listitem><para>Add <code>noexcept</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2441\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2441\">2441</link>:\n-       <emphasis>Exact-width atomic typedefs should be provided</emphasis>\n+\t<emphasis role=\"bold\">Exact-width atomic typedefs should be provided</emphasis>\n     </term>\n     <listitem><para>Define the typedefs.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2442\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2442\">2442</link>:\n-       <emphasis><code>call_once()</code> shouldn't <code>DECAY_COPY()</code></emphasis>\n+\t<emphasis role=\"bold\"><code>call_once()</code> shouldn't <code>DECAY_COPY()</code></emphasis>\n     </term>\n     <listitem><para>Remove indirection through call wrapper that made copies\n     of arguments and forward arguments straight to <code>std::invoke</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2454\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2454\">2454</link>:\n-       <emphasis>Add <code>raw_storage_iterator::base()</code> member\n-       </emphasis>\n+\t<emphasis role=\"bold\">Add <code>raw_storage_iterator::base()</code> member\n+\t</emphasis>\n     </term>\n     <listitem><para>Add the <code>base()</code> member function.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2455\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2455\">2455</link>:\n-       <emphasis>Allocator default construction should be allowed to throw\n-       </emphasis>\n+\t<emphasis role=\"bold\">Allocator default construction should be allowed to throw\n+\t</emphasis>\n     </term>\n     <listitem><para>Make <code>noexcept</code> specifications conditional.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2458\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2458\">2458</link>:\n-       <emphasis>N3778 and new library deallocation signatures\n-       </emphasis>\n+\t<emphasis role=\"bold\">N3778 and new library deallocation signatures\n+\t</emphasis>\n     </term>\n     <listitem><para>Remove unused overloads.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2459\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2459\">2459</link>:\n-       <emphasis><code>std::polar</code> should require a non-negative rho\n-       </emphasis>\n+\t<emphasis role=\"bold\"><code>std::polar</code> should require a non-negative rho\n+\t</emphasis>\n     </term>\n     <listitem><para>Add debug mode assertion.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2465\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2465\">2465</link>:\n-       <emphasis>SFINAE-friendly <code>common_type</code> is nearly impossible\n+\t<emphasis role=\"bold\">SFINAE-friendly <code>common_type</code> is nearly impossible\n        to specialize correctly and regresses key functionality\n-       </emphasis>\n+\t</emphasis>\n     </term>\n     <listitem><para>Detect whether <code>decay_t</code> changes either type\n       and use the decayed types if so.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2466\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2466\">2466</link>:\n-       <emphasis><code>allocator_traits::max_size()</code> default behavior is incorrect\n-       </emphasis>\n+\t<emphasis role=\"bold\"><code>allocator_traits::max_size()</code> default behavior is incorrect\n+\t</emphasis>\n     </term>\n     <listitem><para>Divide by the object type.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2484\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2484\">2484</link>:\n-       <emphasis><code>rethrow_if_nested()</code>  is doubly unimplementable\n-       </emphasis>\n+\t<emphasis role=\"bold\"><code>rethrow_if_nested()</code>  is doubly unimplementable\n+\t</emphasis>\n     </term>\n     <listitem><para>Avoid using <code>dynamic_cast</code> when it would be\n     ill-formed.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2487\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2487\">2487</link>:\n-       <emphasis><code>bind()</code> should be <code>const</code>-overloaded\n-      not cv-overloaded\n-       </emphasis>\n+\t<emphasis role=\"bold\"><code>bind()</code> should be <code>const</code>-overloaded\n+\tnot <emphasis>cv</emphasis>-overloaded\n+\t</emphasis>\n     </term>\n     <listitem><para>Deprecate volatile-qualified <code>operator()</code>\n     for C++17, make it ill-formed for C++20.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2499\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2499\">2499</link>:\n-       <emphasis><code>operator>>(basic_istream&amp;, CharT*)</code> makes it hard to avoid buffer overflows\n-       </emphasis>\n+\t<emphasis role=\"bold\"><code>operator>>(basic_istream&amp;, CharT*)</code> makes it hard to avoid buffer overflows\n+\t</emphasis>\n     </term>\n     <listitem><para>Replace <code>operator>>(basic_istream&amp;, CharT*)</code>\n      and other overloads writing through pointers.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2537\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2537\">2537</link>:\n-       <emphasis>Constructors for <code>priority_queue</code> taking allocators\n+\t<emphasis role=\"bold\">Constructors for <code>priority_queue</code> taking allocators\n \t should call <code>make_heap</code>\n-       </emphasis>\n+\t</emphasis>\n     </term>\n     <listitem><para>Call <code>make_heap</code>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2566\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2566\">2566</link>:\n-       <emphasis>Requirements on the first template parameter of container adaptors\n-       </emphasis>\n+\t<emphasis role=\"bold\">Requirements on the first template parameter of container adaptors\n+\t</emphasis>\n     </term>\n     <listitem><para>Add static assertions to enforce the requirement.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2583\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2583\">2583</link>:\n-       <emphasis>There is no way to supply an allocator for <code>basic_string(str, pos)</code>\n-       </emphasis>\n+\t<emphasis role=\"bold\">There is no way to supply an allocator for <code>basic_string(str, pos)</code>\n+\t</emphasis>\n     </term>\n     <listitem><para>Add new constructor.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2586\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2586\">2586</link>:\n-       <emphasis>Wrong value category used in <code>scoped_allocator_adaptor::construct()</code>\n-       </emphasis>\n+\t<emphasis role=\"bold\">Wrong value category used in <code>scoped_allocator_adaptor::construct()</code>\n+\t</emphasis>\n     </term>\n     <listitem><para>Change internal helper for uses-allocator construction\n       to always check using const lvalue allocators.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2684\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2684\">2684</link>:\n-       <emphasis><code>priority_queue</code> lacking comparator typedef\n-       </emphasis>\n+\t<emphasis role=\"bold\"><code>priority_queue</code> lacking comparator typedef\n+\t</emphasis>\n     </term>\n     <listitem><para>Define the <code>value_compare</code> typedef.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2735\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2735\">2735</link>:\n-       <emphasis><code>std::abs(short)</code>,\n+\t<emphasis role=\"bold\"><code>std::abs(short)</code>,\n \t <code>std::abs(signed char)</code> and others should return\n \t <code>int</code> instead of <code>double</code> in order to be\n \t compatible with C++98 and C\n-       </emphasis>\n+\t</emphasis>\n     </term>\n     <listitem><para>Resolved by the changes for\n       <link linkend=\"manual.bugs.dr2192\">2192</link>.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2770\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2770\">2770</link>:\n-       <emphasis><code>tuple_size&lt;const T&gt;</code> specialization is not\n+\t<emphasis role=\"bold\"><code>tuple_size&lt;const T&gt;</code> specialization is not\n \t SFINAE compatible and breaks decomposition declarations\n-       </emphasis>\n+\t</emphasis>\n     </term>\n     <listitem><para>Safely detect <code>tuple_size&lt;T&gt;::value</code> and\n       only use it if valid.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2781\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2781\">2781</link>:\n-       <emphasis>Contradictory requirements for <code>std::function</code>\n+\t<emphasis role=\"bold\">Contradictory requirements for <code>std::function</code>\n          and <code>std::reference_wrapper</code>\n-       </emphasis>\n+\t</emphasis>\n     </term>\n     <listitem><para>Remove special handling for <code>reference_wrapper</code>\n       arguments and store them directly as the target object.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2802\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2802\">2802</link>:\n-       <emphasis>Add noexcept to several <code>shared_ptr</code> related\n+\t<emphasis role=\"bold\">Add noexcept to several <code>shared_ptr</code> related\n          functions\n-       </emphasis>\n+\t</emphasis>\n     </term>\n     <listitem><para>Add noexcept.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2873\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2873\">2873</link>:\n-       <emphasis><code>shared_ptr</code> constructor requirements for a deleter\n-       </emphasis>\n+\t<emphasis role=\"bold\"><code>shared_ptr</code> constructor requirements for a deleter\n+\t</emphasis>\n     </term>\n     <listitem><para>Use rvalues for deleters.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2921\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2921\">2921</link>:\n-       <emphasis><code>packaged_task</code> and type-erased allocators\n-       </emphasis>\n+\t<emphasis role=\"bold\"><code>packaged_task</code> and type-erased allocators\n+\t</emphasis>\n     </term>\n     <listitem><para>For C++17 mode, remove the constructors taking\n       an allocator argument.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2942\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2942\">2942</link>:\n-       <emphasis>LWG 2873's resolution missed\n+\t<emphasis role=\"bold\">LWG 2873's resolution missed\n          <code>weak_ptr::owner_before</code>\n-       </emphasis>\n+\t</emphasis>\n     </term>\n     <listitem><para>Add noexcept.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2996\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2996\">2996</link>:\n-       <emphasis>Missing rvalue overloads for\n+\t<emphasis role=\"bold\">Missing rvalue overloads for\n          <code>shared_ptr</code> operations\n-       </emphasis>\n+\t</emphasis>\n     </term>\n     <listitem><para>Add additional constructor and cast overloads.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr2993\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2993\">2993</link>:\n-       <emphasis><code>reference_wrapper&lt;T&gt;</code> conversion from <code>T&amp;&amp;</code>\n-       </emphasis>\n+\t<emphasis role=\"bold\"><code>reference_wrapper&lt;T&gt;</code> conversion from <code>T&amp;&amp;</code>\n+\t</emphasis>\n     </term>\n     <listitem><para>Replaced the constructors with a constrained template,\n       to prevent participation in overload resolution when not valid.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr3074\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#3074\">3074</link>:\n-       <emphasis>Non-member functions for <code>valarray</code> should only deduce from the <code>valarray</code>\n-       </emphasis>\n+\t<emphasis role=\"bold\">Non-member functions for <code>valarray</code> should only deduce from the <code>valarray</code>\n+\t</emphasis>\n     </term>\n     <listitem><para>Change scalar operands to be non-deduced context, so that\n       they will allow conversions from other types to the value_type.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr3076\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#3076\">3076</link>:\n-       <emphasis><code>basic_string</code> CTAD ambiguity\n-       </emphasis>\n+\t<emphasis role=\"bold\"><code>basic_string</code> CTAD ambiguity\n+\t</emphasis>\n     </term>\n     <listitem><para>Change constructors to constrained templates.\n     </para></listitem></varlistentry>\n \n     <varlistentry xml:id=\"manual.bugs.dr3096\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#3096\">3096</link>:\n-       <emphasis><code>path::lexically_relative</code> is confused by trailing slashes\n-       </emphasis>\n+\t<emphasis role=\"bold\"><code>path::lexically_relative</code> is confused by trailing slashes\n+\t</emphasis>\n     </term>\n     <listitem><para>Implement the fix for trailing slashes.\n     </para></listitem></varlistentry>"}]}