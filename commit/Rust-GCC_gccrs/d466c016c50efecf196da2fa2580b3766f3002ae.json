{"sha": "d466c016c50efecf196da2fa2580b3766f3002ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ2NmMwMTZjNTBlZmVjZjE5NmRhMmZhMjU4MGIzNzY2ZjMwMDJhZQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2001-05-11T00:23:46Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-05-11T00:23:46Z"}, "message": "cse.c (cse_insn): Mostly remove first hunk of code which collapsed a computed jump into an...\n\n        * cse.c (cse_insn): Mostly remove first hunk of code which collapsed\n        a computed jump into an unconditional jump.\n        In second hunk of code for collapsing computed and conditional jumps\n        into unconditional jumps, reemit the jump in additional cases.\n\nFrom-SVN: r41953", "tree": {"sha": "9bf173c8776b5b1ef61f9b9b504a5ad7e05abb16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bf173c8776b5b1ef61f9b9b504a5ad7e05abb16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d466c016c50efecf196da2fa2580b3766f3002ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d466c016c50efecf196da2fa2580b3766f3002ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d466c016c50efecf196da2fa2580b3766f3002ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d466c016c50efecf196da2fa2580b3766f3002ae/comments", "author": null, "committer": null, "parents": [{"sha": "f3ce87a905ce61afa08033b7eebdeb9fe46f1fd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ce87a905ce61afa08033b7eebdeb9fe46f1fd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ce87a905ce61afa08033b7eebdeb9fe46f1fd6"}], "stats": {"total": 50, "additions": 20, "deletions": 30}, "files": [{"sha": "41ca4032911c9795ed3c2476ef6c0793839f2002", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466c016c50efecf196da2fa2580b3766f3002ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466c016c50efecf196da2fa2580b3766f3002ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d466c016c50efecf196da2fa2580b3766f3002ae", "patch": "@@ -5,6 +5,11 @@\n \n Thu May 10 14:45:44 2001  Jeffrey A Law  (law@cygnus.com)\n \n+\t* cse.c (cse_insn): Mostly remove first hunk of code which collapsed\n+\ta computed jump into an unconditional jump.\n+\tIn second hunk of code for collapsing computed and conditional jumps\n+\tinto unconditional jumps, reemit the jump in additional cases.\n+\n \t* jump.c (jump_optimize_1): Do not wrap the new jump target\n \tinside a LABEL_REF; gen_jump will do that automatically.\n "}, {"sha": "f3978e4b257048c3b96650e2b34d6bce671767de", "filename": "gcc/cse.c", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466c016c50efecf196da2fa2580b3766f3002ae/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466c016c50efecf196da2fa2580b3766f3002ae/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=d466c016c50efecf196da2fa2580b3766f3002ae", "patch": "@@ -5518,31 +5518,17 @@ cse_insn (insn, libcall_insn)\n \t     check for this separately here.  We will delete such an\n \t     insn below.\n \n-\t     Tablejump insns contain a USE of the table, so simply replacing\n-\t     the operand with the constant won't match.  This is simply an\n-\t     unconditional branch, however, and is therefore valid.  Just\n-\t     insert the substitution here and we will delete and re-emit\n-\t     the insn later.  */\n-\n+\t     For other cases such as a table jump or conditional jump\n+\t     where we know the ultimate target, go ahead and replace the\n+\t     operand.  While that may not make a valid insn, we will\n+\t     reemit the jump below (and also insert any necessary\n+\t     barriers).  */\n \t  if (n_sets == 1 && dest == pc_rtx\n \t      && (trial == pc_rtx\n \t\t  || (GET_CODE (trial) == LABEL_REF\n \t\t      && ! condjump_p (insn))))\n \t    {\n-\t      if (trial == pc_rtx)\n-\t\t{\n-\t\t  SET_SRC (sets[i].rtl) = trial;\n-\t\t  cse_jumps_altered = 1;\n-\t\t  break;\n-\t\t}\n-\n-\t      PATTERN (insn) = gen_jump (XEXP (trial, 0));\n-\t      INSN_CODE (insn) = -1;\n-\n-\t      if (NEXT_INSN (insn) != 0\n-\t\t  && GET_CODE (NEXT_INSN (insn)) != BARRIER)\n-\t\temit_barrier_after (insn);\n-\n+\t      SET_SRC (sets[i].rtl) = trial;\n \t      cse_jumps_altered = 1;\n \t      break;\n \t    }\n@@ -5804,25 +5790,24 @@ cse_insn (insn, libcall_insn)\n \t}\n \n       /* If this SET is now setting PC to a label, we know it used to\n-\t be a conditional or computed branch.  So we see if we can follow\n-\t it.  If it was a computed branch, delete it and re-emit.  */\n+\t be a conditional or computed branch.  */\n       else if (dest == pc_rtx && GET_CODE (src) == LABEL_REF)\n \t{\n-\t  /* If this is not in the format for a simple branch and\n-\t     we are the only SET in it, re-emit it.  */\n-\t  if (! simplejump_p (insn) && n_sets == 1)\n+\t  /* We reemit the jump in as many cases as possible just in\n+\t     case the form of an unconditional jump is significantly\n+\t     different than a computed jump or conditional jump.\n+\n+\t     If this insn has multiple sets, then reemitting the\n+\t     jump is nontrivial.  So instead we just force rerecognition\n+\t     and hope for the best.  */\n+\t  if (n_sets == 1)\n \t    {\n \t      rtx new = emit_jump_insn_before (gen_jump (XEXP (src, 0)), insn);\n \t      JUMP_LABEL (new) = XEXP (src, 0);\n \t      LABEL_NUSES (XEXP (src, 0))++;\n \t      insn = new;\n \t    }\n \t  else\n-\t    /* Otherwise, force rerecognition, since it probably had\n-\t       a different pattern before.\n-\t       This shouldn't really be necessary, since whatever\n-\t       changed the source value above should have done this.\n-\t       Until the right place is found, might as well do this here.  */\n \t    INSN_CODE (insn) = -1;\n \n \t  never_reached_warning (insn);"}]}