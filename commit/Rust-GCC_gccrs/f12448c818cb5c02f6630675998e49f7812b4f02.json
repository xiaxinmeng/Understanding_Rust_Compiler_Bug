{"sha": "f12448c818cb5c02f6630675998e49f7812b4f02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEyNDQ4YzgxOGNiNWMwMmY2NjMwNjc1OTk4ZTQ5Zjc4MTJiNGYwMg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2003-03-04T05:54:39Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2003-03-04T05:54:39Z"}, "message": "reload.c (reload_adjust_reg_for_mode): New function.\n\n* reload.c (reload_adjust_reg_for_mode): New function.\n(subst_reloads): Call it.\n(operands_match_p): Adjust registers using HARD_REGNO_NREGS.\n* reload.h (reload_adjust_reg_for_mode): Declare.\n* reload1.c (emit_input_reload_insns, emit_output_reload_insns):\nCall it.\n\nFrom-SVN: r63766", "tree": {"sha": "9c4b3b8fc4da20af305ea602c1a3ce677c8ef72c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c4b3b8fc4da20af305ea602c1a3ce677c8ef72c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f12448c818cb5c02f6630675998e49f7812b4f02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12448c818cb5c02f6630675998e49f7812b4f02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f12448c818cb5c02f6630675998e49f7812b4f02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12448c818cb5c02f6630675998e49f7812b4f02/comments", "author": null, "committer": null, "parents": [{"sha": "fd4290d6c7057c42a129e1b5001226d255419db7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd4290d6c7057c42a129e1b5001226d255419db7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd4290d6c7057c42a129e1b5001226d255419db7"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "fe99d98e98672a42a3979b434fb822616444c5a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12448c818cb5c02f6630675998e49f7812b4f02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12448c818cb5c02f6630675998e49f7812b4f02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f12448c818cb5c02f6630675998e49f7812b4f02", "patch": "@@ -1,3 +1,12 @@\n+2003-03-04  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* reload.c (reload_adjust_reg_for_mode): New function.\n+\t(subst_reloads): Call it.\n+\t(operands_match_p): Adjust registers using HARD_REGNO_NREGS.\n+\t* reload.h (reload_adjust_reg_for_mode): Declare.\n+\t* reload1.c (emit_input_reload_insns, emit_output_reload_insns):\n+\tCall it.\n+\n 2003-03-03  James E Wilson  <wilson@tuliptree.org>\n \n \t* optabs.c (add_equal_note): Delete SUBREG_REG use."}, {"sha": "de1b1a93e2506087e061b60bc98efe95301da285", "filename": "gcc/reload.c", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12448c818cb5c02f6630675998e49f7812b4f02/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12448c818cb5c02f6630675998e49f7812b4f02/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=f12448c818cb5c02f6630675998e49f7812b4f02", "patch": "@@ -2137,10 +2137,10 @@ operands_match_p (x, y)\n \t (reg:SI 1) will be considered the same register.  */\n       if (WORDS_BIG_ENDIAN && GET_MODE_SIZE (GET_MODE (x)) > UNITS_PER_WORD\n \t  && i < FIRST_PSEUDO_REGISTER)\n-\ti += (GET_MODE_SIZE (GET_MODE (x)) / UNITS_PER_WORD) - 1;\n+\ti += HARD_REGNO_NREGS (i, GET_MODE (x)) - 1;\n       if (WORDS_BIG_ENDIAN && GET_MODE_SIZE (GET_MODE (y)) > UNITS_PER_WORD\n \t  && j < FIRST_PSEUDO_REGISTER)\n-\tj += (GET_MODE_SIZE (GET_MODE (y)) / UNITS_PER_WORD) - 1;\n+\tj += HARD_REGNO_NREGS (j, GET_MODE (y)) - 1;\n \n       return i == j;\n     }\n@@ -5954,7 +5954,7 @@ subst_reloads (insn)\n \t     do the wrong thing if RELOADREG is multi-word.  RELOADREG\n \t     will always be a REG here.  */\n \t  if (GET_MODE (reloadreg) != r->mode && r->mode != VOIDmode)\n-\t    reloadreg = gen_rtx_REG (r->mode, REGNO (reloadreg));\n+\t    reloadreg = reload_adjust_reg_for_mode (reloadreg, r->mode);\n \n \t  /* If we are putting this into a SUBREG and RELOADREG is a\n \t     SUBREG, we would be making nested SUBREGs, so we have to fix\n@@ -6934,6 +6934,26 @@ regno_clobbered_p (regno, insn, mode, sets)\n   return 0;\n }\n \n+/* Find the low part, with mode MODE, of a hard regno RELOADREG.  */\n+rtx\n+reload_adjust_reg_for_mode (reloadreg, mode)\n+     rtx reloadreg;\n+     enum machine_mode mode;\n+{\n+  int regno;\n+\n+  if (GET_MODE (reloadreg) == mode)\n+    return reloadreg;\n+\n+  regno = REGNO (reloadreg);\n+\n+  if (WORDS_BIG_ENDIAN)\n+    regno += HARD_REGNO_NREGS (regno, GET_MODE (reloadreg))\n+      - HARD_REGNO_NREGS (regno, mode);\n+\n+  return gen_rtx_REG (mode, regno);\n+}\n+\n static const char *const reload_when_needed_name[] =\n {\n   \"RELOAD_FOR_INPUT\","}, {"sha": "7fc4f49da40b4d9aca3fd697242f1e741ec038d1", "filename": "gcc/reload.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12448c818cb5c02f6630675998e49f7812b4f02/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12448c818cb5c02f6630675998e49f7812b4f02/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=f12448c818cb5c02f6630675998e49f7812b4f02", "patch": "@@ -1,6 +1,6 @@\n /* Communication between reload.c and reload1.c.\n    Copyright (C) 1987, 1991, 1992, 1993, 1994, 1995, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -385,3 +385,7 @@ extern void cleanup_subreg_operands PARAMS ((rtx));\n /* Debugging support.  */\n extern void debug_reload_to_stream PARAMS ((FILE *));\n extern void debug_reload PARAMS ((void));\n+\n+/* Compute the actual register we should reload to, in case we're\n+   reloading to/from a register that is wider than a word.  */\n+extern rtx reload_adjust_reg_for_mode PARAMS ((rtx, enum machine_mode));"}, {"sha": "e4549478d38a872c8acedbf761dd6e50671de8cd", "filename": "gcc/reload1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12448c818cb5c02f6630675998e49f7812b4f02/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12448c818cb5c02f6630675998e49f7812b4f02/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=f12448c818cb5c02f6630675998e49f7812b4f02", "patch": "@@ -6319,7 +6319,7 @@ emit_input_reload_insns (chain, rl, old, j)\n      must always be a REG here.  */\n \n   if (GET_MODE (reloadreg) != mode)\n-    reloadreg = gen_rtx_REG (mode, REGNO (reloadreg));\n+    reloadreg = reload_adjust_reg_for_mode (reloadreg, mode);\n   while (GET_CODE (oldequiv) == SUBREG && GET_MODE (oldequiv) != mode)\n     oldequiv = SUBREG_REG (oldequiv);\n   if (GET_MODE (oldequiv) != VOIDmode\n@@ -6568,8 +6568,8 @@ emit_input_reload_insns (chain, rl, old, j)\n \t\t\toldequiv = old, real_oldequiv = real_old;\n \t\t      else\n \t\t\tsecond_reload_reg\n-\t\t\t  = gen_rtx_REG (new_mode,\n-\t\t\t\t\t REGNO (second_reload_reg));\n+\t\t\t  = reload_adjust_reg_for_mode (second_reload_reg,\n+\t\t\t\t\t\t\tnew_mode);\n \t\t    }\n \t\t}\n \t    }\n@@ -6691,7 +6691,7 @@ emit_output_reload_insns (chain, rl, j)\n     }\n \n   if (GET_MODE (reloadreg) != mode)\n-    reloadreg = gen_rtx_REG (mode, REGNO (reloadreg));\n+    reloadreg = reload_adjust_reg_for_mode (reloadreg, mode);\n \n #ifdef SECONDARY_OUTPUT_RELOAD_CLASS\n \n@@ -6732,7 +6732,7 @@ emit_output_reload_insns (chain, rl, j)\n \t\t= rld[secondary_reload].secondary_out_icode;\n \n \t      if (GET_MODE (reloadreg) != mode)\n-\t\treloadreg = gen_rtx_REG (mode, REGNO (reloadreg));\n+\t\treloadreg = reload_adjust_reg_for_mode (reloadreg, mode);\n \n \t      if (tertiary_icode != CODE_FOR_nothing)\n \t\t{"}]}