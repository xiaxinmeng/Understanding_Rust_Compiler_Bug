{"sha": "c329c9bbcdb6975c359a26df577ab6d65a6b9263", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMyOWM5YmJjZGI2OTc1YzM1OWEyNmRmNTc3YWI2ZDY1YTZiOTI2Mw==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-12-27T21:40:06Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-12-27T21:40:06Z"}, "message": "(length attribute): Branches may be expanded to two instructions by the assembler.\n\n(length attribute): Branches may be expanded to two\n\tinstructions by the assembler.\n\t(DFmode bcnd pattern): Don't try to fill the delay slot.\n\t(CCmode bbx patterns): Reverse the 1/0, not the condition.\n(BLKmode load/store patterns): New.\n\t(call_block_move, call_movstrsi_loop): Allow any mode for the preload.\n\nFrom-SVN: r2928", "tree": {"sha": "f48a4c216e70516f1250a5434d50738d1605497f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f48a4c216e70516f1250a5434d50738d1605497f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c329c9bbcdb6975c359a26df577ab6d65a6b9263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c329c9bbcdb6975c359a26df577ab6d65a6b9263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c329c9bbcdb6975c359a26df577ab6d65a6b9263", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c329c9bbcdb6975c359a26df577ab6d65a6b9263/comments", "author": null, "committer": null, "parents": [{"sha": "23f5bf99f023fdd49ef2f77d884833ce08136942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23f5bf99f023fdd49ef2f77d884833ce08136942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23f5bf99f023fdd49ef2f77d884833ce08136942"}], "stats": {"total": 137, "additions": 97, "deletions": 40}, "files": [{"sha": "c95e07f0d487fc3f3da03f24c3b5a8e209db6ce0", "filename": "gcc/config/m88k/m88k.md", "status": "modified", "additions": 97, "deletions": 40, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c329c9bbcdb6975c359a26df577ab6d65a6b9263/gcc%2Fconfig%2Fm88k%2Fm88k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c329c9bbcdb6975c359a26df577ab6d65a6b9263/gcc%2Fconfig%2Fm88k%2Fm88k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.md?ref=c329c9bbcdb6975c359a26df577ab6d65a6b9263", "patch": "@@ -2,7 +2,7 @@\n ;;  Copyright (C) 1988, 1989, 1990, 1991 Free Software Foundation, Inc.\n ;;  Contributed by Michael Tiemann (tiemann@mcc.com)\n ;;  Additional changes by Michael Meissner (meissner@osf.org)\n-;;  Currently supported by Tom Wood (wood@dg-rtp.dg.com)\n+;;  Version 2 port by Tom Wood (Tom_Wood@NeXT.com)\n \n ;; This file is part of GNU CC.\n \n@@ -28,7 +28,7 @@\n (define_expand \"m88k_sccs_id\"\n   [(match_operand:SI 0 \"\" \"\")]\n   \"\"\n-  \"{ static char sccs_id[] = \\\"@(#)m88k.md\t2.3.2.2 11/05/92 09:03:51\\\";\n+  \"{ static char sccs_id[] = \\\"@(#)m88k.md\t2.3.3.2 12/16/92 08:26:12\\\";\n      FAIL; }\")\n \f\n ;; Attribute specifications\n@@ -60,7 +60,7 @@\n ; Length in # of instructions of each insn.  The values are not exact, but\n ; are safe.\n (define_attr \"length\" \"\"\n-  (cond [(eq_attr \"type\" \"marith\")\n+  (cond [(eq_attr \"type\" \"marith,weird,branch\")\n \t (const_int 2)]\n \t(const_int 1)))\n \n@@ -834,15 +834,16 @@\n       operands[3] = op2;\n     }\n   if (GET_CODE (operands[3]) == LABEL_REF)\n-    return \\\"bcnd%. 0x5,%1,%3\\;bcnd %#ne0,%d1,%3\\\";\n+    return \\\"bcnd 0x5,%1,%3\\;bcnd %#ne0,%d1,%3\\\";\n \n   operands[3] = gen_label_rtx ();\n   label_num = XINT (operands[3], 3);\n-  output_asm_insn (\\\"bcnd%. 0x5,%1,%3\\;bcnd %#eq0,%d1,%2\\\", operands);\n+  output_asm_insn (\\\"bcnd 0x5,%1,%3\\;bcnd %#eq0,%d1,%2\\\", operands);\n   output_label (label_num);\n   return \\\"\\\";\n }\"\n-  [(set_attr \"type\" \"branch\")])\n+  [(set_attr \"type\" \"weird\")\n+   (set_attr \"length\" \"3\")])\n \f\n ;; Recognize bb0 and bb1 instructions.  These use two unusual template\n ;; patterns, %Lx and %Px.  %Lx outputs a 1 if operand `x' is a LABEL_REF\n@@ -1372,7 +1373,7 @@\n \t (match_operand 2 \"pc_or_label_ref\" \"\")\n \t (match_operand 3 \"pc_or_label_ref\" \"\")))]\n   \"\"\n-  \"bb1%. %R3%C0,%1,%P2%P3\"\n+  \"bb%L2 %C0,%1,%P2%P3\"\n   [(set_attr \"type\" \"branch\")])\n \n (define_insn \"\"\n@@ -1385,7 +1386,7 @@\n \t (match_operand 2 \"pc_or_label_ref\" \"\")\n \t (match_operand 3 \"pc_or_label_ref\" \"\")))]\n   \"\"\n-  \"bb0%. %R3%C0,%1,%P2%P3\"\n+  \"bb%L3 %C0,%1,%P2%P3\"\n   [(set_attr \"type\" \"branch\")])\n \f\n (define_insn \"locate1\"\n@@ -1439,15 +1440,15 @@\n     || operands[1] == const0_rtx)\"\n   \"@\n    or %0,%#r0,%1\n-   %V1ld %0,%1\n-   %v0st %r1,%0\n+   %V1ld\\\\t %0,%1\n+   %v0st\\\\t %r1,%0\n    subu %0,%#r0,%n1\n    set %0,%#r0,%s1\n    mov.s %0,%1\n    mov.s %0,%1\n    mov %0,%1\n-   %V1ld %0,%1\n-   %v0st %1,%0\"\n+   %V1ld\\\\t %0,%1\n+   %v0st\\\\t %1,%0\"\n   [(set_attr \"type\" \"arith,load,store,arith,bit,mov,mov,mov,load,store\")])\n \n (define_insn \"\"\n@@ -1496,8 +1497,8 @@\n     || operands[1] == const0_rtx)\"\n   \"@\n    or %0,%#r0,%h1\n-   %V1ld.hu %0,%1\n-   %v0st.h %r1,%0\n+   %V1ld.hu\\\\t %0,%1\n+   %v0st.h\\\\t %r1,%0\n    subu %0,%#r0,%H1\"\n   [(set_attr \"type\" \"arith,load,store,arith\")])\n \n@@ -1528,8 +1529,8 @@\n     || operands[1] == const0_rtx)\"\n   \"@\n    or %0,%#r0,%q1\n-   %V1ld.bu %0,%1\n-   %v0st.b %r1,%0\n+   %V1ld.bu\\\\t %0,%1\n+   %v0st.b\\\\t %r1,%0\n    subu %r0,%#r0,%Q1\"\n   [(set_attr \"type\" \"arith,load,store,arith\")])\n \n@@ -1567,13 +1568,13 @@\n   \"\"\n   \"@\n    or %0,%#r0,%1\\;or %d0,%#r0,%d1\n-   %V1ld.d %0,%1\n-   %v0st.d %1,%0\n+   %V1ld.d\\\\t %0,%1\n+   %v0st.d\\\\t %1,%0\n    mov.d %0,%1\n    mov.d %0,%1\n    mov %0,%1\n-   %V1ld.d %0,%1\n-   %v0st.d %1,%0\"\n+   %V1ld.d\\\\t %0,%1\n+   %v0st.d\\\\t %1,%0\"\n   [(set_attr \"type\" \"marith,loadd,store,mov,mov,mov,loadd,store\")])\n \n (define_insn \"\"\n@@ -1621,7 +1622,7 @@\n ;      return \\\"or %0,%#r0,0\\;or %d0,%#r0,0\\\";\n ;    case 1:\n ;      operands[1] = adj_offsettable_operand (operands[0], 4);\n-;      return \\\"%v0st %#r0,%0\\;st %#r0,%1\\\";\n+;      return \\\"%v0st\\\\t %#r0,%0\\;st %#r0,%1\\\";\n ;    }\n ;}\")\n \n@@ -1640,13 +1641,13 @@\n   \"\"\n   \"@\n    or %0,%#r0,%1\\;or %d0,%#r0,%d1\n-   %V1ld.d %0,%1\n-   %v0st.d %1,%0\n+   %V1ld.d\\\\t %0,%1\n+   %v0st.d\\\\t %1,%0\n    mov.d %0,%1\n    mov.d %0,%1\n    mov %0,%1\n-   %V1ld.d %0,%1\n-   %v0st.d %1,%0\"\n+   %V1ld.d\\\\t %0,%1\n+   %v0st.d\\\\t %1,%0\"\n   [(set_attr \"type\" \"marith,loadd,store,mov,mov,mov,loadd,store\")])\n \n (define_insn \"\"\n@@ -1692,13 +1693,13 @@\n   \"\"\n   \"@\n    or %0,%#r0,%1\n-   %V1ld %0,%1\n-   %v0st %r1,%0\n+   %V1ld\\\\t %0,%1\n+   %v0st\\\\t %r1,%0\n    mov.s %0,%1\n    mov.s %0,%1\n    mov %0,%1\n-   %V1ld %0,%1\n-   %v0st %r1,%0\"\n+   %V1ld\\\\t %0,%1\n+   %v0st\\\\t %r1,%0\"\n   [(set_attr \"type\" \"arith,load,store,mov,mov,mov,load,store\")])\n \n (define_insn \"\"\n@@ -1733,6 +1734,62 @@\n   DONE;\n }\")\n \n+(define_insn \"\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n+\t(match_operand:BLK 1 \"memory_operand\" \"m\"))]\n+  \"\"\n+  \"%V1ld.bu\\\\t %0,%1\"\n+  [(set_attr \"type\" \"load\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(match_operand:BLK 1 \"memory_operand\" \"m\"))]\n+  \"\"\n+  \"%V1ld.hu\\\\t %0,%1\"\n+  [(set_attr \"type\" \"load\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operand:BLK 1 \"memory_operand\" \"m\"))]\n+  \"\"\n+  \"%V1ld\\\\t %0,%1\"\n+  [(set_attr \"type\" \"load\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(match_operand:BLK 1 \"memory_operand\" \"m\"))]\n+  \"\"\n+  \"%V1ld.d\\\\t %0,%1\"\n+  [(set_attr \"type\" \"loadd\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n+\t(match_operand:QI 1 \"register_operand\" \"r\"))]\n+  \"\"\n+  \"%v0st.b\\\\t %1,%0\"\n+  [(set_attr \"type\" \"store\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n+\t(match_operand:HI 1 \"register_operand\" \"r\"))]\n+  \"\"\n+  \"%v0st.h\\\\t %1,%0\"\n+  [(set_attr \"type\" \"store\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n+\t(match_operand:SI 1 \"register_operand\" \"r\"))]\n+  \"\"\n+  \"%v0st\\\\t %1,%0\"\n+  [(set_attr \"type\" \"store\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n+\t(match_operand:DI 1 \"register_operand\" \"r\"))]\n+  \"\"\n+  \"%v0st.d\\\\t %1,%0\"\n+  [(set_attr \"type\" \"store\")])\n+\n ;; Call a non-looping block move library function (e.g. __movstrSI96x64).\n ;; operand 0 is the function name\n ;; operand 1 is the destination pointer\n@@ -1766,7 +1823,7 @@\n   [(set (reg:SI 3) (minus:SI (match_operand:SI 2 \"register_operand\" \"\")\n \t\t\t     (match_operand:SI 3 \"immediate_operand\" \"\")))\n    (set (match_operand:SI 5 \"register_operand\" \"\")\n-\t(match_operand:SI 4 \"memory_operand\" \"\"))\n+\t(match_operand 4 \"memory_operand\" \"\"))\n    (set (reg:SI 2) (minus:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t\t     (match_dup 3)))\n    (set (reg:SI 6) (match_operand:SI 6 \"immediate_operand\" \"\"))\n@@ -1802,7 +1859,7 @@\n   \"@\n    mask %0,%1,0xffff\n    or %0,%#r0,%h1\n-   %V1ld.hu %0,%1\"\n+   %V1ld.hu\\\\t %0,%1\"\n   [(set_attr \"type\" \"arith,arith,load\")])\n \n (define_expand \"zero_extendqihi2\"\n@@ -1824,7 +1881,7 @@\n   \"@\n    mask %0,%1,0xff\n    or %0,%#r0,%q1\n-   %V1ld.bu %0,%1\"\n+   %V1ld.bu\\\\t %0,%1\"\n   [(set_attr \"type\" \"arith,arith,load\")])\n \n (define_expand \"zero_extendqisi2\"\n@@ -1851,7 +1908,7 @@\n   \"@\n    mask %0,%1,0xff\n    or %0,%#r0,%q1\n-   %V1ld.bu %0,%1\"\n+   %V1ld.bu\\\\t %0,%1\"\n   [(set_attr \"type\" \"arith,arith,load\")])\n \f\n ;;- sign extension instructions\n@@ -1885,7 +1942,7 @@\n    ext %0,%1,16<0>\n    or %0,%#r0,%h1\n    subu %0,%#r0,%H1\n-   %V1ld.h %0,%1\"\n+   %V1ld.h\\\\t %0,%1\"\n   [(set_attr \"type\" \"bit,arith,arith,load\")])\n \n (define_expand \"extendqihi2\"\n@@ -1908,7 +1965,7 @@\n    ext %0,%1,8<0>\n    or %0,%#r0,%q1\n    subu %0,%#r0,%Q1\n-   %V1ld.b %0,%1\"\n+   %V1ld.b\\\\t %0,%1\"\n   [(set_attr \"type\" \"bit,arith,arith,load\")])\n \n (define_expand \"extendqisi2\"\n@@ -1931,7 +1988,7 @@\n    ext %0,%1,8<0>\n    or %0,%#r0,%q1\n    subu %0,%#r0,%Q1\n-   %V1ld.b %0,%1\"\n+   %V1ld.b\\\\t %0,%1\"\n   [(set_attr \"type\" \"bit,arith,arith,load\")])\n \f\n ;; Conversions between float and double.\n@@ -2966,31 +3023,31 @@\n \t(ashiftrt:SI (match_operand:SI 1 \"memory_operand\" \"m\")\n \t\t     (const_int 24)))]\n   \"! SCALED_ADDRESS_P (XEXP (operands[1], 0))\"\n-  \"%V1ld.b %0,%1\"\n+  \"%V1ld.b\\\\t %0,%1\"\n   [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"memory_operand\" \"m\")\n \t\t     (const_int 24)))]\n   \"! SCALED_ADDRESS_P (XEXP (operands[1], 0))\"\n-  \"%V1ld.bu %0,%1\"\n+  \"%V1ld.bu\\\\t %0,%1\"\n   [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ashiftrt:SI (match_operand:SI 1 \"memory_operand\" \"m\")\n \t\t     (const_int 16)))]\n   \"! SCALED_ADDRESS_P (XEXP (operands[1], 0))\"\n-  \"%V1ld.h %0,%1\"\n+  \"%V1ld.h\\\\t %0,%1\"\n   [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"memory_operand\" \"m\")\n \t\t     (const_int 16)))]\n   \"! SCALED_ADDRESS_P (XEXP (operands[1], 0))\"\n-  \"%V1ld.hu %0,%1\"\n+  \"%V1ld.hu\\\\t %0,%1\"\n   [(set_attr \"type\" \"load\")])\n \f\n ;;- arithmetic shift instructions."}]}