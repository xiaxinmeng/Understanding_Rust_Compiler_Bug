{"sha": "be2b68e4cd63e50f4dd5fca247b9a919fb0013a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUyYjY4ZTRjZDYzZTUwZjRkZDVmY2EyNDdiOWE5MTlmYjAwMTNhMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-11-13T13:51:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-11-13T13:51:34Z"}, "message": "re PR tree-optimization/87962 (ICE in vect_get_vec_def_for_operand_1, at tree-vect-stmts.c:1485)\n\n2018-11-13  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/87962\n\t* tree-vect-loop.c (vect_is_simple_reduction): More reliably\n\tdetect outer reduction for disqualifying in-loop uses.\n\n\t* gcc.dg/pr87962.c: New testcase.\n\nFrom-SVN: r266071", "tree": {"sha": "4195b8bd3d01d316a9a6390f21fb723aa650477f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4195b8bd3d01d316a9a6390f21fb723aa650477f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be2b68e4cd63e50f4dd5fca247b9a919fb0013a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be2b68e4cd63e50f4dd5fca247b9a919fb0013a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be2b68e4cd63e50f4dd5fca247b9a919fb0013a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be2b68e4cd63e50f4dd5fca247b9a919fb0013a0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a28dfaafc5afd06419408048b664a843b2739086", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a28dfaafc5afd06419408048b664a843b2739086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a28dfaafc5afd06419408048b664a843b2739086"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "95ea4cdc6852b981ba464845164bdb64428424d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2b68e4cd63e50f4dd5fca247b9a919fb0013a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2b68e4cd63e50f4dd5fca247b9a919fb0013a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be2b68e4cd63e50f4dd5fca247b9a919fb0013a0", "patch": "@@ -1,3 +1,9 @@\n+2018-11-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87962\n+\t* tree-vect-loop.c (vect_is_simple_reduction): More reliably\n+\tdetect outer reduction for disqualifying in-loop uses.\n+\n 2018-11-13  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87967"}, {"sha": "bc4530845fc0f77afdcdf5c5eb20b3607b7f92ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2b68e4cd63e50f4dd5fca247b9a919fb0013a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2b68e4cd63e50f4dd5fca247b9a919fb0013a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be2b68e4cd63e50f4dd5fca247b9a919fb0013a0", "patch": "@@ -1,3 +1,8 @@\n+2018-11-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87962\n+\t* gcc.dg/pr87962.c: New testcase.\n+\n 2018-11-13  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87967"}, {"sha": "6a551d3d5c8d922675f5a1cb999c2bd9350e2936", "filename": "gcc/testsuite/gcc.dg/pr87962.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2b68e4cd63e50f4dd5fca247b9a919fb0013a0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87962.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2b68e4cd63e50f4dd5fca247b9a919fb0013a0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87962.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87962.c?ref=be2b68e4cd63e50f4dd5fca247b9a919fb0013a0", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-additional-options \"-march=bdver2\" { target { x86_64-*-* i?86-*-* } } } */\n+\n+int a, b;\n+\n+int c()\n+{\n+  long d, e;\n+  while (a) {\n+      a++;\n+      b = 0;\n+      for (; b++ - 2; d = d >> 1)\n+\te += d;\n+  }\n+  return e;\n+}"}, {"sha": "a6f0b823ddafeef3bbbb5ec872f4054103b90b09", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2b68e4cd63e50f4dd5fca247b9a919fb0013a0/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2b68e4cd63e50f4dd5fca247b9a919fb0013a0/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=be2b68e4cd63e50f4dd5fca247b9a919fb0013a0", "patch": "@@ -2807,11 +2807,11 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n   gphi *phi = as_a <gphi *> (phi_info->stmt);\n   struct loop *loop = (gimple_bb (phi))->loop_father;\n   struct loop *vect_loop = LOOP_VINFO_LOOP (loop_info);\n+  bool nested_in_vect_loop = flow_loop_nested_p (vect_loop, loop);\n   gimple *phi_use_stmt = NULL;\n   enum tree_code orig_code, code;\n   tree op1, op2, op3 = NULL_TREE, op4 = NULL_TREE;\n   tree type;\n-  int nloop_uses;\n   tree name;\n   imm_use_iterator imm_iter;\n   use_operand_p use_p;\n@@ -2827,7 +2827,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n      can be constant.  See PR60382.  */\n   if (has_zero_uses (phi_name))\n     return NULL;\n-  nloop_uses = 0;\n+  unsigned nphi_def_loop_uses = 0;\n   FOR_EACH_IMM_USE_FAST (use_p, imm_iter, phi_name)\n     {\n       gimple *use_stmt = USE_STMT (use_p);\n@@ -2843,20 +2843,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n           return NULL;\n         }\n \n-      /* For inner loop reductions in nested vectorization there are no\n-         constraints on the number of uses in the inner loop.  */\n-      if (loop == vect_loop->inner)\n-\tcontinue;\n-\n-      nloop_uses++;\n-      if (nloop_uses > 1)\n-        {\n-          if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t     \"reduction value used in loop.\\n\");\n-          return NULL;\n-        }\n-\n+      nphi_def_loop_uses++;\n       phi_use_stmt = use_stmt;\n     }\n \n@@ -2894,26 +2881,32 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n       return NULL;\n     }\n \n-  nloop_uses = 0;\n+  unsigned nlatch_def_loop_uses = 0;\n   auto_vec<gphi *, 3> lcphis;\n+  bool inner_loop_of_double_reduc = false;\n   FOR_EACH_IMM_USE_FAST (use_p, imm_iter, name)\n     {\n       gimple *use_stmt = USE_STMT (use_p);\n       if (is_gimple_debug (use_stmt))\n \tcontinue;\n       if (flow_bb_inside_loop_p (loop, gimple_bb (use_stmt)))\n-\tnloop_uses++;\n+\tnlatch_def_loop_uses++;\n       else\n-\t/* We can have more than one loop-closed PHI.  */\n-\tlcphis.safe_push (as_a <gphi *> (use_stmt));\n+\t{\n+\t  /* We can have more than one loop-closed PHI.  */\n+\t  lcphis.safe_push (as_a <gphi *> (use_stmt));\n+\t  if (nested_in_vect_loop\n+\t      && (STMT_VINFO_DEF_TYPE (loop_info->lookup_stmt (use_stmt))\n+\t\t  == vect_double_reduction_def))\n+\t    inner_loop_of_double_reduc = true;\n+\t}\n     }\n \n   /* If this isn't a nested cycle or if the nested cycle reduction value\n      is used ouside of the inner loop we cannot handle uses of the reduction\n      value.  */\n-  bool nested_in_vect_loop = flow_loop_nested_p (vect_loop, loop);\n-  if ((!nested_in_vect_loop || !lcphis.is_empty ())\n-      && nloop_uses > 1)\n+  if ((!nested_in_vect_loop || inner_loop_of_double_reduc)\n+      && (nlatch_def_loop_uses > 1 || nphi_def_loop_uses > 1))\n     {\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,"}]}