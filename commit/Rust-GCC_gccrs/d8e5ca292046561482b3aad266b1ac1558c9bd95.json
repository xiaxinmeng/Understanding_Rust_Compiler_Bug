{"sha": "d8e5ca292046561482b3aad266b1ac1558c9bd95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlNWNhMjkyMDQ2NTYxNDgyYjNhYWQyNjZiMWFjMTU1OGM5YmQ5NQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2019-11-05T13:27:59Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2019-11-05T13:27:59Z"}, "message": "IBM Z: Fix testsuite useable_hw check\n\nThis fixes various issues with the useable_hw check in s390.exp.  The\ncheck is supposed to verify whether a testcase can be run on the\ncurrent hardware.\n\n- the test never returned true for -m31 because vzero is not available\n  in ESA mode and -m31 defaults to -mesa\n- the missing v0 clobber on the vzero instruction made the check fail\n  if the stack pointer got saved in f0\n- the lcbb instruction used for checking whether we are on a z13\n  also requires vx.  Replace it with an instruction from the generic\n  instruction set extensions.\n- no support for z14 and z15 so far\n\ngcc/testsuite/ChangeLog:\n\n2019-11-05  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* gcc.target/s390/s390.exp\n\t(check_effective_target_s390_useable_hw): Add inline asm for z14\n\tand z15. Replace instruction for z13 with lochiz. Add register\n\tclobbers. Check also for __zarch__ when doing the __VX__ test.\n\nFrom-SVN: r277830", "tree": {"sha": "21d59ec37757d323bd1c84e7bfe372dbf1d5ef33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21d59ec37757d323bd1c84e7bfe372dbf1d5ef33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8e5ca292046561482b3aad266b1ac1558c9bd95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e5ca292046561482b3aad266b1ac1558c9bd95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e5ca292046561482b3aad266b1ac1558c9bd95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e5ca292046561482b3aad266b1ac1558c9bd95/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76d8b4d1ada1d9a6c1408b9b94b0baa31d1f3c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d8b4d1ada1d9a6c1408b9b94b0baa31d1f3c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76d8b4d1ada1d9a6c1408b9b94b0baa31d1f3c0c"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "2af8f738dabf340277eaaaef8b9f7c237b5de32f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e5ca292046561482b3aad266b1ac1558c9bd95/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e5ca292046561482b3aad266b1ac1558c9bd95/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8e5ca292046561482b3aad266b1ac1558c9bd95", "patch": "@@ -1,3 +1,10 @@\n+2019-11-05  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/s390.exp\n+\t(check_effective_target_s390_useable_hw): Add inline asm for z14\n+\tand z15. Replace instruction for z13 with lochiz. Add register\n+\tclobbers. Check also for __zarch__ when doing the __VX__ test.\n+\n 2019-11-05  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/arm/attr-crypto.c: Skip if -mpure-code is used."}, {"sha": "b4057b00f146f76dbe2475ab557f934f9702b5cf", "filename": "gcc/testsuite/gcc.target/s390/s390.exp", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e5ca292046561482b3aad266b1ac1558c9bd95/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e5ca292046561482b3aad266b1ac1558c9bd95/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp?ref=d8e5ca292046561482b3aad266b1ac1558c9bd95", "patch": "@@ -87,18 +87,22 @@ proc check_effective_target_s390_useable_hw { } {\n \tint main (void)\n \t{\n \t    asm (\".machinemode zarch\" : : );\n-\t#if __ARCH__ >= 11\n-\t    asm (\"lcbb %%r2,0(%%r15),0\" : : );\n+\t#if __ARCH__ >= 13\n+\t    asm (\"ncrk %%r2,%%r2,%%r2\" : : : \"r2\");\n+\t#elif __ARCH__ >= 12\n+\t    asm (\"agh %%r2,0(%%r15)\" : : : \"r2\");\n+\t#elif __ARCH__ >= 11\n+\t    asm (\"lochiz %%r2,42\" : : : \"r2\");\n \t#elif __ARCH__ >= 10\n-\t    asm (\"risbgn %%r2,%%r2,0,0,0\" : : );\n+\t    asm (\"risbgn %%r2,%%r2,0,0,0\" : : : \"r2\");\n \t#elif __ARCH__ >= 9\n-\t    asm (\"sgrk %%r2,%%r2,%%r2\" : : );\n+\t    asm (\"sgrk %%r2,%%r2,%%r2\" : : : \"r2\");\n \t#elif __ARCH__ >= 8\n-\t    asm (\"rosbg %%r2,%%r2,0,0,0\" : : );\n+\t    asm (\"rosbg %%r2,%%r2,0,0,0\" : : : \"r2\");\n \t#elif __ARCH__ >= 7\n-\t    asm (\"nilf %%r2,0\" : : );\n+\t    asm (\"nilf %%r2,0\" : : : \"r2\");\n \t#elif __ARCH__ >= 6\n-\t    asm (\"lay %%r2,0(%%r15)\" : : );\n+\t    asm (\"lay %%r2,0(%%r15)\" : : : \"r2\");\n \t#elif __ARCH__ >= 5\n \t    asm (\"tam\" : : );\n \t#endif\n@@ -108,8 +112,8 @@ proc check_effective_target_s390_useable_hw { } {\n \t    asm (\"etnd %0\" : \"=d\" (nd));\n \t  }\n \t#endif\n-\t#ifdef __VX__\n-\t    asm (\"vzero %%v0\" : : );\n+\t#if defined (__VX__) && defined (__zarch__)\n+\t    asm (\"vzero %%v0\" : : : \"v0\");\n \t#endif\n \t  return 0;\n \t}"}]}