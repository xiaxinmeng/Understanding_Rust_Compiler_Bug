{"sha": "73d28034382a7ba65ec46d6a1cebd828f32b16c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNkMjgwMzQzODJhN2JhNjVlYzQ2ZDZhMWNlYmQ4MjhmMzJiMTZjOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-10-27T20:24:31Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-10-27T20:24:31Z"}, "message": "decl.c (purpose_member_field): New static function.\n\n\t* gcc-interface/decl.c (purpose_member_field): New static function.\n\t(annotate_rep): Use it instead of purpose_member.\n\nFrom-SVN: r153616", "tree": {"sha": "9b464e77c6b2ce6811550a99c1c7c80f30a27a17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b464e77c6b2ce6811550a99c1c7c80f30a27a17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73d28034382a7ba65ec46d6a1cebd828f32b16c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d28034382a7ba65ec46d6a1cebd828f32b16c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73d28034382a7ba65ec46d6a1cebd828f32b16c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d28034382a7ba65ec46d6a1cebd828f32b16c9/comments", "author": null, "committer": null, "parents": [{"sha": "b7da9fd42dca6efbba34efa78539bfa14b3f4e39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7da9fd42dca6efbba34efa78539bfa14b3f4e39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7da9fd42dca6efbba34efa78539bfa14b3f4e39"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "5c269d15c7405062726b87ec94e3bcd181ad2c97", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d28034382a7ba65ec46d6a1cebd828f32b16c9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d28034382a7ba65ec46d6a1cebd828f32b16c9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=73d28034382a7ba65ec46d6a1cebd828f32b16c9", "patch": "@@ -1,3 +1,8 @@\n+2009-10-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (purpose_member_field): New static function.\n+\t(annotate_rep): Use it instead of purpose_member.\n+\n 2009-10-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* raise-gcc (db_region_for): Use _Unwind_GetIPInfo instead of"}, {"sha": "c3766ee99b74c517e1d2b94a280429ee1898e617", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d28034382a7ba65ec46d6a1cebd828f32b16c9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d28034382a7ba65ec46d6a1cebd828f32b16c9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=73d28034382a7ba65ec46d6a1cebd828f32b16c9", "patch": "@@ -7231,6 +7231,23 @@ annotate_object (Entity_Id gnat_entity, tree gnu_type, tree size, bool by_ref)\n \t\t   UI_From_Int (TYPE_ALIGN (gnu_type) / BITS_PER_UNIT));\n }\n \n+/* Return first element of field list whose TREE_PURPOSE is ELEM or whose\n+   DECL_ORIGINAL_FIELD of TREE_PURPOSE is ELEM.  Return NULL_TREE if there\n+   is no such element in the list.  */\n+\n+static tree\n+purpose_member_field (const_tree elem, tree list)\n+{\n+  while (list)\n+    {\n+      tree field = TREE_PURPOSE (list);\n+      if (elem == field || elem == DECL_ORIGINAL_FIELD (field))\n+\treturn list;\n+      list = TREE_CHAIN (list);\n+    }\n+  return NULL_TREE;\n+}\n+\n /* Given GNAT_ENTITY, a record type, and GNU_TYPE, its corresponding GCC type,\n    set Component_Bit_Offset and Esize of the components to the position and\n    size used by Gigi.  */\n@@ -7254,11 +7271,12 @@ annotate_rep (Entity_Id gnat_entity, tree gnu_type)\n \t|| (Ekind (gnat_field) == E_Discriminant\n \t    && !Is_Unchecked_Union (Scope (gnat_field))))\n       {\n-\ttree parent_offset, t;\n-\n-\tt = purpose_member (gnat_to_gnu_field_decl (gnat_field), gnu_list);\n+\ttree t = purpose_member_field (gnat_to_gnu_field_decl (gnat_field),\n+\t\t\t\t       gnu_list);\n \tif (t)\n \t  {\n+\t    tree parent_offset;\n+\n \t    if (type_annotate_only && Is_Tagged_Type (gnat_entity))\n \t      {\n \t\t/* In this mode the tag and parent components are not"}]}