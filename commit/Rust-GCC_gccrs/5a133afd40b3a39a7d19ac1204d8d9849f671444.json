{"sha": "5a133afd40b3a39a7d19ac1204d8d9849f671444", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWExMzNhZmQ0MGIzYTM5YTdkMTlhYzEyMDRkOGQ5ODQ5ZjY3MTQ0NA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-01-25T19:46:43Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-01-25T19:46:43Z"}, "message": "df.c (df_ref_create, [...]): Kill BB argument.\n\n\t* df.c (df_ref_create, df_ref_record_1, df_ref_record): Kill BB argument.\n\t* df.h (struct ref): Kill B.\n\t(DF_REF_BB, DF_REF_BBNO): Use BLOCK_FOR_INSN.\n\n\t* basic-block.h (PROP_EQUAL_NOTES): New flag.\n\t* flow.c (propagate_one_insn): Use it.\n\t(mark_used_regs): Handle NIL.\n\nFrom-SVN: r49220", "tree": {"sha": "e0c0962c279aea5a858138daa5832989b12e2bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0c0962c279aea5a858138daa5832989b12e2bf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a133afd40b3a39a7d19ac1204d8d9849f671444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a133afd40b3a39a7d19ac1204d8d9849f671444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a133afd40b3a39a7d19ac1204d8d9849f671444", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a133afd40b3a39a7d19ac1204d8d9849f671444/comments", "author": null, "committer": null, "parents": [{"sha": "3d8dd3c05117db6bb03971f0c4034833416e180b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8dd3c05117db6bb03971f0c4034833416e180b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d8dd3c05117db6bb03971f0c4034833416e180b"}], "stats": {"total": 51, "additions": 32, "deletions": 19}, "files": [{"sha": "75a1007cc22a278cbcb4d18ff621248bac7ec6c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a133afd40b3a39a7d19ac1204d8d9849f671444/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a133afd40b3a39a7d19ac1204d8d9849f671444/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a133afd40b3a39a7d19ac1204d8d9849f671444", "patch": "@@ -1,3 +1,13 @@\n+Fri Jan 25 20:43:56 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* df.c (df_ref_create, df_ref_record_1, df_ref_record): Kill BB argument.\n+\t* df.h (struct ref): Kill B.\n+\t(DF_REF_BB, DF_REF_BBNO): Use BLOCK_FOR_INSN.\n+\n+\t* basic-block.h (PROP_EQUAL_NOTES): New flag.\n+\t* flow.c (propagate_one_insn): Use it.\n+\t(mark_used_regs): Handle NIL.\n+\n 2001-01-25  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* config/stormy16/stormy16.md (tablejump_pcrel): Use a MEM"}, {"sha": "1bc1d780f197e3f5aa8368bd3cb31a99294e50fc", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a133afd40b3a39a7d19ac1204d8d9849f671444/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a133afd40b3a39a7d19ac1204d8d9849f671444/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=5a133afd40b3a39a7d19ac1204d8d9849f671444", "patch": "@@ -560,6 +560,7 @@ enum update_life_extent\n #define PROP_ALLOW_CFG_CHANGES\t32\t/* Allow the CFG to be changed\n \t\t\t\t\t   by dead code removal.  */\n #define PROP_AUTOINC\t\t64\t/* Create autoinc mem references.  */\n+#define PROP_EQUAL_NOTES\t128\t/* Take into account REG_EQUAL notes.  */\n #define PROP_FINAL\t\t127\t/* All of the above.  */\n \n #define CLEANUP_EXPENSIVE\t1\t/* Do relativly expensive optimizations"}, {"sha": "08483ef033bbd78adbffd45e576e7138c5807c90", "filename": "gcc/df.c", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a133afd40b3a39a7d19ac1204d8d9849f671444/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a133afd40b3a39a7d19ac1204d8d9849f671444/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=5a133afd40b3a39a7d19ac1204d8d9849f671444", "patch": "@@ -226,13 +226,13 @@ static void df_refs_unlink PARAMS ((struct df *, bitmap));\n #endif\n \n static struct ref *df_ref_create PARAMS((struct df *,\n-\t\t\t\t\t rtx, rtx *, basic_block, rtx,\n+\t\t\t\t\t rtx, rtx *, rtx,\n \t\t\t\t\t enum df_ref_type, enum df_ref_flags));\n static void df_ref_record_1 PARAMS((struct df *, rtx, rtx *,\n-\t\t\t\t    basic_block, rtx, enum df_ref_type,\n+\t\t\t\t    rtx, enum df_ref_type,\n \t\t\t\t    enum df_ref_flags));\n static void df_ref_record PARAMS((struct df *, rtx, rtx *,\n-\t\t\t\t  basic_block bb, rtx, enum df_ref_type,\n+\t\t\t\t  rtx, enum df_ref_type,\n \t\t\t\t  enum df_ref_flags));\n static void df_def_record_1 PARAMS((struct df *, rtx, basic_block, rtx));\n static void df_defs_record PARAMS((struct df *, rtx, basic_block, rtx));\n@@ -794,11 +794,10 @@ df_use_unlink (df, use)\n /* Create a new ref of type DF_REF_TYPE for register REG at address\n    LOC within INSN of BB.  */\n static struct ref *\n-df_ref_create (df, reg, loc, bb, insn, ref_type, ref_flags)\n+df_ref_create (df, reg, loc, insn, ref_type, ref_flags)\n      struct df *df;\n      rtx reg;\n      rtx *loc;\n-     basic_block bb;\n      rtx insn;\n      enum df_ref_type ref_type;\n      enum df_ref_flags ref_flags;\n@@ -810,7 +809,6 @@ df_ref_create (df, reg, loc, bb, insn, ref_type, ref_flags)\n \t\t\t\t\t   sizeof (*this_ref));\n   DF_REF_REG (this_ref) = reg;\n   DF_REF_LOC (this_ref) = loc;\n-  DF_REF_BB (this_ref) = bb;\n   DF_REF_INSN (this_ref) = insn;\n   DF_REF_CHAIN (this_ref) = 0;\n   DF_REF_TYPE (this_ref) = ref_type;\n@@ -848,27 +846,25 @@ df_ref_create (df, reg, loc, bb, insn, ref_type, ref_flags)\n /* Create a new reference of type DF_REF_TYPE for a single register REG,\n    used inside the LOC rtx of INSN.  */\n static void\n-df_ref_record_1 (df, reg, loc, bb, insn, ref_type, ref_flags)\n+df_ref_record_1 (df, reg, loc, insn, ref_type, ref_flags)\n      struct df *df;\n      rtx reg;\n      rtx *loc;\n-     basic_block bb;\n      rtx insn;\n      enum df_ref_type ref_type;\n      enum df_ref_flags ref_flags;\n {\n-  df_ref_create (df, reg, loc, bb, insn, ref_type, ref_flags);\n+  df_ref_create (df, reg, loc, insn, ref_type, ref_flags);\n }\n \n \n /* Create new references of type DF_REF_TYPE for each part of register REG\n    at address LOC within INSN of BB.  */\n static void\n-df_ref_record (df, reg, loc, bb, insn, ref_type, ref_flags)\n+df_ref_record (df, reg, loc, insn, ref_type, ref_flags)\n      struct df *df;\n      rtx reg;\n      rtx *loc;\n-     basic_block bb;\n      rtx insn;\n      enum df_ref_type ref_type;\n      enum df_ref_flags ref_flags;\n@@ -910,11 +906,11 @@ df_ref_record (df, reg, loc, bb, insn, ref_type, ref_flags)\n \n       for (i = regno; i < endregno; i++)\n \tdf_ref_record_1 (df, gen_rtx_REG (reg_raw_mode[i], i),\n-\t\t\t loc, bb, insn, ref_type, ref_flags);\n+\t\t\t loc, insn, ref_type, ref_flags);\n     }\n   else\n     {\n-      df_ref_record_1 (df, reg, loc, bb, insn, ref_type, ref_flags);\n+      df_ref_record_1 (df, reg, loc, insn, ref_type, ref_flags);\n     }\n }\n \n@@ -978,7 +974,7 @@ df_def_record_1 (df, x, bb, insn)\n   \n     if (GET_CODE (dst) == REG\n         || (GET_CODE (dst) == SUBREG && GET_CODE (SUBREG_REG (dst)) == REG))\n-      df_ref_record (df, dst, loc, bb, insn, DF_REF_REG_DEF, flags);\n+      df_ref_record (df, dst, loc, insn, DF_REF_REG_DEF, flags);\n }\n \n \n@@ -1070,7 +1066,7 @@ df_uses_record (df, loc, ref_type, bb, insn, flags)\n \n     case REG:\n       /* See a register (or subreg) other than being set.  */\n-      df_ref_record (df, x, loc, bb, insn, ref_type, flags);\n+      df_ref_record (df, x, loc, insn, ref_type, flags);\n       return;\n \n     case SET:\n@@ -1161,7 +1157,7 @@ df_uses_record (df, loc, ref_type, bb, insn, flags)\n     case PRE_MODIFY:\n     case POST_MODIFY:\n       /* Catch the def of the register being modified.  */\n-      df_ref_record (df, XEXP (x, 0), &XEXP (x, 0), bb, insn, DF_REF_REG_DEF, DF_REF_READ_WRITE);\n+      df_ref_record (df, XEXP (x, 0), &XEXP (x, 0), insn, DF_REF_REG_DEF, DF_REF_READ_WRITE);\n \n       /* ... Fall through to handle uses ...  */\n "}, {"sha": "7f4e4be71efc3c910290575fff9ece829900b4da", "filename": "gcc/df.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a133afd40b3a39a7d19ac1204d8d9849f671444/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a133afd40b3a39a7d19ac1204d8d9849f671444/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=5a133afd40b3a39a7d19ac1204d8d9849f671444", "patch": "@@ -57,7 +57,6 @@ enum df_ref_flags\n struct ref\n {\n   rtx reg;\t\t\t/* The register referenced.  */\n-  basic_block bb;\t\t/* BB containing ref.  */\n   rtx insn;\t\t\t/* Insn containing ref.  */\n   rtx *loc;\t\t\t/* Loc is the location of the reg.  */\n   struct df_link *chain;\t/* Head of def-use or use-def chain.  */\n@@ -175,8 +174,8 @@ struct df_map\n #define DF_REF_REG(REF) ((REF)->reg)\n #define DF_REF_LOC(REF) ((REF)->loc)\n #endif\n-#define DF_REF_BB(REF) ((REF)->bb)\n-#define DF_REF_BBNO(REF) ((REF)->bb->index)\n+#define DF_REF_BB(REF) (BLOCK_FOR_INSN ((REF)->insn))\n+#define DF_REF_BBNO(REF) (BLOCK_FOR_INSN ((REF)->insn)->index)\n #define DF_REF_INSN(REF) ((REF)->insn)\n #define DF_REF_INSN_UID(REF) (INSN_UID ((REF)->insn))\n #define DF_REF_TYPE(REF) ((REF)->type)"}, {"sha": "0325300197ed71991b82cb761f23c7c67dec4e4c", "filename": "gcc/flow.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a133afd40b3a39a7d19ac1204d8d9849f671444/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a133afd40b3a39a7d19ac1204d8d9849f671444/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=5a133afd40b3a39a7d19ac1204d8d9849f671444", "patch": "@@ -1633,6 +1633,7 @@ propagate_one_insn (pbi, insn)\n     ;\n   else\n     {\n+      rtx note;\n       /* Any regs live at the time of a call instruction must not go\n \t in a register clobbered by calls.  Find all regs now live and\n \t record this for them.  */\n@@ -1688,6 +1689,10 @@ propagate_one_insn (pbi, insn)\n       /* Record uses.  */\n       if (! insn_is_dead)\n \tmark_used_regs (pbi, PATTERN (insn), NULL_RTX, insn);\n+      if ((flags & PROP_EQUAL_NOTES)\n+\t  && ((note = find_reg_note (insn, REG_EQUAL, NULL_RTX))\n+\t      || (note = find_reg_note (insn, REG_EQUIV, NULL_RTX))))\n+\tmark_used_regs (pbi, XEXP (note, 0), NULL_RTX, insn);\n \n       /* Sometimes we may have inserted something before INSN (such as a move)\n \t when we make an auto-inc.  So ensure we will scan those insns.  */\n@@ -3616,6 +3621,8 @@ mark_used_regs (pbi, x, cond, insn)\n   int flags = pbi->flags;\n \n  retry:\n+  if (!x)\n+    return;\n   code = GET_CODE (x);\n   switch (code)\n     {"}]}