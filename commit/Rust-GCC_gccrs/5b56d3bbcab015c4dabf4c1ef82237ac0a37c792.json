{"sha": "5b56d3bbcab015c4dabf4c1ef82237ac0a37c792", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI1NmQzYmJjYWIwMTVjNGRhYmY0YzFlZjgyMjM3YWMwYTM3Yzc5Mg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-04-27T09:47:13Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-27T09:47:13Z"}, "message": "varasm.c (decode_addr_const): Handle special case of INDIRECT_REF.\n\n\t* varasm.c (decode_addr_const): Handle special case of INDIRECT_REF.\n\t(const_hash_1) <VECTOR_CST>: New case.\n\t(compare_constant) <VECTOR_CST>: Likewise.\n\t<ADDR_EXPR>: Deal with LABEL_REFs.\n\t(copy_constant) <VECTOR_CST>: New case.\n\nFrom-SVN: r158776", "tree": {"sha": "d9c22fd584d78d444cfd08cad923263f90e6469a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9c22fd584d78d444cfd08cad923263f90e6469a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b56d3bbcab015c4dabf4c1ef82237ac0a37c792", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b56d3bbcab015c4dabf4c1ef82237ac0a37c792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b56d3bbcab015c4dabf4c1ef82237ac0a37c792", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b56d3bbcab015c4dabf4c1ef82237ac0a37c792/comments", "author": null, "committer": null, "parents": [{"sha": "fa5f5e275ffb6346e1f35180cd3a7283c98340dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5f5e275ffb6346e1f35180cd3a7283c98340dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa5f5e275ffb6346e1f35180cd3a7283c98340dd"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "e254eec84977b392854d2f3c3efb78ac00914d71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b56d3bbcab015c4dabf4c1ef82237ac0a37c792/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b56d3bbcab015c4dabf4c1ef82237ac0a37c792/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b56d3bbcab015c4dabf4c1ef82237ac0a37c792", "patch": "@@ -1,3 +1,11 @@\n+2010-04-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* varasm.c (decode_addr_const): Handle special case of INDIRECT_REF.\n+\t(const_hash_1) <VECTOR_CST>: New case.\n+\t(compare_constant) <VECTOR_CST>: Likewise.\n+\t<ADDR_EXPR>: Deal with LABEL_REFs.\n+\t(copy_constant) <VECTOR_CST>: New case.\n+\n 2010-04-27  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_propagate_frequency): New function."}, {"sha": "35b65a932e33130f5f99491ada93420a47388c5d", "filename": "gcc/varasm.c", "status": "modified", "additions": 67, "deletions": 2, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b56d3bbcab015c4dabf4c1ef82237ac0a37c792/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b56d3bbcab015c4dabf4c1ef82237ac0a37c792/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=5b56d3bbcab015c4dabf4c1ef82237ac0a37c792", "patch": "@@ -2802,6 +2802,11 @@ decode_addr_const (tree exp, struct addr_const *value)\n \t\t     * tree_low_cst (TREE_OPERAND (target, 1), 0));\n \t  target = TREE_OPERAND (target, 0);\n \t}\n+      else if (TREE_CODE (target) == INDIRECT_REF\n+\t       && TREE_CODE (TREE_OPERAND (target, 0)) == NOP_EXPR\n+\t       && TREE_CODE (TREE_OPERAND (TREE_OPERAND (target, 0), 0))\n+\t\t  == ADDR_EXPR)\n+\ttarget = TREE_OPERAND (TREE_OPERAND (TREE_OPERAND (target, 0), 0), 0);\n       else\n \tbreak;\n     }\n@@ -2894,6 +2899,18 @@ const_hash_1 (const tree exp)\n       return (const_hash_1 (TREE_REALPART (exp)) * 5\n \t      + const_hash_1 (TREE_IMAGPART (exp)));\n \n+    case VECTOR_CST:\n+      {\n+\ttree link;\n+\n+\thi = 7 + TYPE_VECTOR_SUBPARTS (TREE_TYPE (exp));\n+\n+\tfor (link = TREE_VECTOR_CST_ELTS (exp); link; link = TREE_CHAIN (link))\n+\t    hi = hi * 563 + const_hash_1 (TREE_VALUE (link));\n+\n+\treturn hi;\n+      }\n+\n     case CONSTRUCTOR:\n       {\n \tunsigned HOST_WIDE_INT idx;\n@@ -3022,6 +3039,27 @@ compare_constant (const tree t1, const tree t2)\n       return (compare_constant (TREE_REALPART (t1), TREE_REALPART (t2))\n \t      && compare_constant (TREE_IMAGPART (t1), TREE_IMAGPART (t2)));\n \n+    case VECTOR_CST:\n+      {\n+        tree link1, link2;\n+\n+        if (TYPE_VECTOR_SUBPARTS (TREE_TYPE (t1))\n+\t    != TYPE_VECTOR_SUBPARTS (TREE_TYPE (t2)))\n+\t  return 0;\n+\n+\tlink2 = TREE_VECTOR_CST_ELTS (t2);\n+\tfor (link1 = TREE_VECTOR_CST_ELTS (t1);\n+\t     link1;\n+\t     link1 = TREE_CHAIN (link1))\n+\t  {\n+\t    if (!compare_constant (TREE_VALUE (link1), TREE_VALUE (link2)))\n+\t      return 0;\n+\t    link2 = TREE_CHAIN (link2);\n+\t  }\n+\t\n+\treturn 1;\n+      }\n+\n     case CONSTRUCTOR:\n       {\n \tVEC(constructor_elt, gc) *v1, *v2;\n@@ -3082,11 +3120,34 @@ compare_constant (const tree t1, const tree t2)\n     case FDESC_EXPR:\n       {\n \tstruct addr_const value1, value2;\n+\tenum rtx_code code;\n+\tint ret;\n \n \tdecode_addr_const (t1, &value1);\n \tdecode_addr_const (t2, &value2);\n-\treturn (value1.offset == value2.offset\n-\t\t&& strcmp (XSTR (value1.base, 0), XSTR (value2.base, 0)) == 0);\n+\n+\tif (value1.offset != value2.offset)\n+\t  return 0;\n+\n+\tcode = GET_CODE (value1.base);\n+\tif (code != GET_CODE (value2.base))\n+\t  return 0;\n+\n+\tswitch (code)\n+\t  {\n+\t  case SYMBOL_REF:\n+\t    ret = (strcmp (XSTR (value1.base, 0), XSTR (value2.base, 0)) == 0);\n+\t    break;\n+\n+\t  case LABEL_REF:\n+\t    ret = (CODE_LABEL_NUMBER (XEXP (value1.base, 0))\n+\t           == CODE_LABEL_NUMBER (XEXP (value2.base, 0)));\n+\t    break;\n+\n+\t  default:\n+\t    gcc_unreachable ();\n+\t  }\n+\treturn ret;\n       }\n \n     case PLUS_EXPR:\n@@ -3147,6 +3208,10 @@ copy_constant (tree exp)\n       return build1 (TREE_CODE (exp), TREE_TYPE (exp),\n \t\t     copy_constant (TREE_OPERAND (exp, 0)));\n \n+    case VECTOR_CST:\n+      return build_vector (TREE_TYPE (exp),\n+\t\t\t   copy_list (TREE_VECTOR_CST_ELTS (exp)));\n+\n     case CONSTRUCTOR:\n       {\n \ttree copy = copy_node (exp);"}]}