{"sha": "a451882123524de1b9b175af97a1cdd32e5f25c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ1MTg4MjEyMzUyNGRlMWI5YjE3NWFmOTdhMWNkZDMyZTVmMjVjMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-08-02T10:48:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-08-02T10:48:42Z"}, "message": "[AArch64] Add support for 16-bit FMOV immediates\n\naarch64_float_const_representable_p was still returning false for\nHFmode, so we wouldn't use 16-bit FMOV immediate.  E.g. before the\npatch:\n\n    __fp16 foo (void) { return 0x1.1p-3; }\n\ngave:\n\n       mov     w0, 12352\n       fmov    h0, w0\n\nwith -march=armv8.2-a+fp16, whereas now it gives:\n\n       fmov    h0, 1.328125e-1\n\n2018-08-02  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_float_const_representable_p):\n\tAllow HFmode constants if TARGET_FP_F16INST.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/f16_mov_immediate_1.c: Expect fmov immediate\n\tto be used.\n\t* gcc.target/aarch64/f16_mov_immediate_2.c: Likewise.\n\t* gcc.target/aarch64/f16_mov_immediate_3.c: Force +nofp16.\n\t* gcc.target/aarch64/sve/single_1.c: Except fmov immediate to be used\n\tfor .h.\n\t* gcc.target/aarch64/sve/single_2.c: Likewise.\n\t* gcc.target/aarch64/sve/single_3.c: Likewise.\n\t* gcc.target/aarch64/sve/single_4.c: Likewise.\n\nFrom-SVN: r263250", "tree": {"sha": "fe9c8181de8fc36ce8b02190fa468fdbf4ba4939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe9c8181de8fc36ce8b02190fa468fdbf4ba4939"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a451882123524de1b9b175af97a1cdd32e5f25c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a451882123524de1b9b175af97a1cdd32e5f25c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a451882123524de1b9b175af97a1cdd32e5f25c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a451882123524de1b9b175af97a1cdd32e5f25c1/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "363b395bad6e45bb5d6e4924ff4f49400653f011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/363b395bad6e45bb5d6e4924ff4f49400653f011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/363b395bad6e45bb5d6e4924ff4f49400653f011"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "3f22b090cea736e151e2fb37a7ea2ff64f547f27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a451882123524de1b9b175af97a1cdd32e5f25c1", "patch": "@@ -1,3 +1,8 @@\n+2018-08-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_float_const_representable_p):\n+\tAllow HFmode constants if TARGET_FP_F16INST.\n+\n 2018-08-02  Jackson Woodruff  <jackson.woodruff@arm.com>\n \n \tPR target/86014"}, {"sha": "1e86d6e68f04d335714a8572d0cf135a13480b84", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a451882123524de1b9b175af97a1cdd32e5f25c1", "patch": "@@ -14969,8 +14969,8 @@ aarch64_float_const_representable_p (rtx x)\n   if (!CONST_DOUBLE_P (x))\n     return false;\n \n-  /* We don't support HFmode constants yet.  */\n-  if (GET_MODE (x) == VOIDmode || GET_MODE (x) == HFmode)\n+  if (GET_MODE (x) == VOIDmode\n+      || (GET_MODE (x) == HFmode && !TARGET_FP_F16INST))\n     return false;\n \n   r = *CONST_DOUBLE_REAL_VALUE (x);"}, {"sha": "b5a46b47353a228674fef4712565e2e8f71e72d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a451882123524de1b9b175af97a1cdd32e5f25c1", "patch": "@@ -1,3 +1,15 @@\n+2018-08-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/f16_mov_immediate_1.c: Expect fmov immediate\n+\tto be used.\n+\t* gcc.target/aarch64/f16_mov_immediate_2.c: Likewise.\n+\t* gcc.target/aarch64/f16_mov_immediate_3.c: Force +nofp16.\n+\t* gcc.target/aarch64/sve/single_1.c: Except fmov immediate to be used\n+\tfor .h.\n+\t* gcc.target/aarch64/sve/single_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/single_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/single_4.c: Likewise.\n+\n 2018-08-02  Jackson Woodruff  <jackson.woodruff@arm.com>\n \n \tPR target/86014"}, {"sha": "4411ecfed0bb791f5c715d5dfacf14bd2d7f3a61", "filename": "gcc/testsuite/gcc.target/aarch64/f16_mov_immediate_1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ff16_mov_immediate_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ff16_mov_immediate_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ff16_mov_immediate_1.c?ref=a451882123524de1b9b175af97a1cdd32e5f25c1", "patch": "@@ -44,6 +44,6 @@ __fp16 f5 ()\n   return a;\n }\n \n-/* { dg-final { scan-assembler-times \"mov\\tw\\[0-9\\]+, #?19520\"           3 } } */\n-/* { dg-final { scan-assembler-times \"movi\\tv\\[0-9\\]+\\\\\\.4h, 0xbc, lsl 8\"  1 } } */\n-/* { dg-final { scan-assembler-times \"movi\\tv\\[0-9\\]+\\\\\\.4h, 0x4c, lsl 8\"  1 } } */\n+/* { dg-final { scan-assembler-times {fmov\\th[0-9]+, #?1\\.7e\\+1}  3 } } */\n+/* { dg-final { scan-assembler-times {fmov\\th[0-9]+, #?-1\\.0e\\+0} 1 } } */\n+/* { dg-final { scan-assembler-times {fmov\\th[0-9]+, #?1\\.6e\\+1}  1 } } */"}, {"sha": "53c43240a36486cc37de11872f0d77aa777be315", "filename": "gcc/testsuite/gcc.target/aarch64/f16_mov_immediate_2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ff16_mov_immediate_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ff16_mov_immediate_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ff16_mov_immediate_2.c?ref=a451882123524de1b9b175af97a1cdd32e5f25c1", "patch": "@@ -40,6 +40,4 @@ float16_t f3(void)\n /* { dg-final { scan-assembler-times \"movi\\tv\\[0-9\\]+\\\\\\.4h, 0x5c, lsl 8\" 1 } } */\n /* { dg-final { scan-assembler-times \"movi\\tv\\[0-9\\]+\\\\\\.4h, 0x7c, lsl 8\" 1 } } */\n \n-/* { dg-final { scan-assembler-times \"mov\\tw\\[0-9\\]+, 19520\"              1 } } */\n-/* { dg-final { scan-assembler-times \"fmov\\th\\[0-9\\], w\\[0-9\\]+\"          1 } } */\n-\n+/* { dg-final { scan-assembler-times {fmov\\th[0-9]+, #?1.7e\\+1}           1 } } */"}, {"sha": "63d950a8694d66f29225b5fc8793c8ae0f8cc604", "filename": "gcc/testsuite/gcc.target/aarch64/f16_mov_immediate_3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ff16_mov_immediate_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ff16_mov_immediate_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ff16_mov_immediate_3.c?ref=a451882123524de1b9b175af97a1cdd32e5f25c1", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n \n+#pragma GCC target \"+nofp16\"\n+\n __fp16 f4 ()\n {\n   __fp16 a = 0.1;"}, {"sha": "11b88aef7cca89ef10ac8bc35fb13cf125677d28", "filename": "gcc/testsuite/gcc.target/aarch64/sve/single_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_1.c?ref=a451882123524de1b9b175af97a1cdd32e5f25c1", "patch": "@@ -36,7 +36,7 @@ TEST_LOOP (double, 3.0)\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, #6\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #7\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #8\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #15360\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #1\\.0e\\+0\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0e\\+0\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #3\\.0e\\+0\\n} 1 } } */\n "}, {"sha": "1fbf4892c81c98512457fe186c6f16f813dfc39f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/single_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_2.c?ref=a451882123524de1b9b175af97a1cdd32e5f25c1", "patch": "@@ -12,7 +12,7 @@\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, #6\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #7\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #8\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #15360\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #1\\.0e\\+0\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0e\\+0\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #3\\.0e\\+0\\n} 1 } } */\n "}, {"sha": "a3688b692a19c845901c0818bc96f5967ead1585", "filename": "gcc/testsuite/gcc.target/aarch64/sve/single_3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_3.c?ref=a451882123524de1b9b175af97a1cdd32e5f25c1", "patch": "@@ -12,7 +12,7 @@\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, #6\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #7\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #8\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #15360\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #1\\.0e\\+0\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0e\\+0\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #3\\.0e\\+0\\n} 1 } } */\n "}, {"sha": "08965d39ffd14068680ab20c1d5fd1a5cbc55e6b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/single_4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a451882123524de1b9b175af97a1cdd32e5f25c1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_4.c?ref=a451882123524de1b9b175af97a1cdd32e5f25c1", "patch": "@@ -12,7 +12,7 @@\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, #6\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #7\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #8\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #15360\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #1\\.0e\\+0\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0e\\+0\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #3\\.0e\\+0\\n} 1 } } */\n "}]}