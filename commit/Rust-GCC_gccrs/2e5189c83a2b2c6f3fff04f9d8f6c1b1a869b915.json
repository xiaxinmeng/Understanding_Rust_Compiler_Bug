{"sha": "2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU1MTg5YzgzYTJiMmM2ZjNmZmYwNGY5ZDhmNmMxYjFhODY5YjkxNQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-11-22T20:55:53Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-11-22T20:55:53Z"}, "message": "safe_local_iterator.h (_Safe_local_iterator<>): Remove _M_bucket, use same information in normal local_iterator.\n\n2013-11-22  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/safe_local_iterator.h (_Safe_local_iterator<>):\n\tRemove _M_bucket, use same information in normal local_iterator.\n\t(operator==): Remove redundant _M_can_compare check.\n\t* include/debug/safe_local_iterator.tcc: Adapt.\n\t* include/debug/unordered_set: Likewise.\n\t* include/debug/unordered_map: Likewise.\n\nFrom-SVN: r205289", "tree": {"sha": "0840632898ccd27c88a324a308ee5eb3f51ea60c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0840632898ccd27c88a324a308ee5eb3f51ea60c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915/comments", "author": null, "committer": null, "parents": [{"sha": "79a8482c13b5892bdcd0f56bcae1a1b461a65997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a8482c13b5892bdcd0f56bcae1a1b461a65997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79a8482c13b5892bdcd0f56bcae1a1b461a65997"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "ae34a28ba0d50c319c6e3b7bc72f0a72f99886f5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915", "patch": "@@ -1,3 +1,12 @@\n+2013-11-22  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/safe_local_iterator.h (_Safe_local_iterator<>):\n+\tRemove _M_bucket, use same information in normal local_iterator.\n+\t(operator==): Remove redundant _M_can_compare check.\n+\t* include/debug/safe_local_iterator.tcc: Adapt.\n+\t* include/debug/unordered_set: Likewise.\n+\t* include/debug/unordered_map: Likewise.\n+\n 2013-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/Makefile.am (check_DEJAGNU_normal_targets): Add 10."}, {"sha": "5b8d2efc99c4dcea9c9c56f9dffa0a08943cb34f", "filename": "libstdc++-v3/include/debug/safe_local_iterator.h", "status": "modified", "additions": 19, "deletions": 28, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h?ref=2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915", "patch": "@@ -58,9 +58,6 @@ namespace __gnu_debug\n       /// The underlying iterator\n       _Iterator _M_current;\n \n-      /// The bucket this local iterator belongs to \n-      size_type _M_bucket;\n-\n       /// Determine if this is a constant iterator.\n       bool\n       _M_constant() const\n@@ -89,10 +86,8 @@ namespace __gnu_debug\n        * @pre @p seq is not NULL\n        * @post this is not singular\n        */\n-      _Safe_local_iterator(const _Iterator& __i, size_type __bucket,\n-\t\t\t   const _Sequence* __seq)\n-      : _Safe_local_iterator_base(__seq, _M_constant()), _M_current(__i),\n-\t_M_bucket(__bucket)\n+      _Safe_local_iterator(const _Iterator& __i, const _Sequence* __seq)\n+      : _Safe_local_iterator_base(__seq, _M_constant()), _M_current(__i)\n       {\n \t_GLIBCXX_DEBUG_VERIFY(!this->_M_singular(),\n \t\t\t      _M_message(__msg_init_singular)\n@@ -104,12 +99,12 @@ namespace __gnu_debug\n        */\n       _Safe_local_iterator(const _Safe_local_iterator& __x)\n       : _Safe_local_iterator_base(__x, _M_constant()),\n-\t_M_current(__x._M_current), _M_bucket(__x._M_bucket)\n+\t_M_current(__x._M_current)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// DR 408. Is vector<reverse_iterator<char*> > forbidden?\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t      || __x._M_current == _Iterator(),\n+\t\t\t      || __x.base() == _Iterator(),\n \t\t\t      _M_message(__msg_init_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n@@ -127,7 +122,7 @@ namespace __gnu_debug\n \t      typename _Sequence::local_iterator::iterator_type>::__value,\n \t\t\t\t\t  _Sequence>::__type>& __x)\n \t: _Safe_local_iterator_base(__x, _M_constant()),\n-\t  _M_current(__x.base()), _M_bucket(__x._M_bucket)\n+\t  _M_current(__x.base())\n \t{\n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // DR 408. Is vector<reverse_iterator<char*> > forbidden?\n@@ -147,12 +142,11 @@ namespace __gnu_debug\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// DR 408. Is vector<reverse_iterator<char*> > forbidden?\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t      || __x._M_current == _Iterator(),\n+\t\t\t      || __x.base() == _Iterator(),\n \t\t\t      _M_message(__msg_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n \t_M_current = __x._M_current;\n-\t_M_bucket = __x._M_bucket;\n \tthis->_M_attach(__x._M_sequence);\n \treturn *this;\n       }\n@@ -225,7 +219,7 @@ namespace __gnu_debug\n        * @brief Return the bucket\n        */\n       size_type\n-      bucket() const { return _M_bucket; }\n+      bucket() const { return _M_current._M_bucket; }\n \n       /**\n        * @brief Conversion to underlying non-debug iterator to allow\n@@ -266,38 +260,35 @@ namespace __gnu_debug\n       _M_get_sequence() const\n       { return static_cast<_Sequence*>(_M_sequence); }\n \n-      /// Is this iterator equal to the sequence's begin() iterator?\n+      /// Is this iterator equal to the sequence's begin(bucket) iterator?\n       bool _M_is_begin() const\n-      { return base() == _M_get_sequence()->_M_base().begin(_M_bucket); }\n+      { return base() == _M_get_sequence()->_M_base().begin(bucket()); }\n \n-      /// Is this iterator equal to the sequence's end() iterator?\n+      /// Is this iterator equal to the sequence's end(bucket) iterator?\n       bool _M_is_end() const\n-      { return base() == _M_get_sequence()->_M_base().end(_M_bucket); }\n+      { return base() == _M_get_sequence()->_M_base().end(bucket()); }\n \n       /// Is this iterator part of the same bucket as the other one?\n-      template <typename _Other>\n-\tbool _M_in_same_bucket(const _Safe_local_iterator<_Other,\n-\t\t\t\t\t\t_Sequence>& __other) const\n-\t{ return _M_bucket == __other.bucket(); }\n+      template<typename _Other>\n+\tbool\n+\t_M_in_same_bucket(const _Safe_local_iterator<_Other,\n+\t\t\t\t\t\t     _Sequence>& __other) const\n+\t{ return bucket() == __other.bucket(); }\n     };\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n     operator==(const _Safe_local_iterator<_IteratorL, _Sequence>& __lhs,\n \t       const _Safe_local_iterator<_IteratorR, _Sequence>& __rhs)\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_compare_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n       _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n \t\t\t    _M_message(__msg_compare_different)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n-      _GLIBCXX_DEBUG_VERIFY(__lhs._M_can_compare(__rhs),\n-\t\t\t    _M_message(__msg_compare_different)\n-\t\t\t    ._M_iterator(__lhs, \"lhs\")\n-\t\t\t    ._M_iterator(__rhs, \"rhs\"));\n       _GLIBCXX_DEBUG_VERIFY(__lhs._M_in_same_bucket(__rhs),\n \t\t\t    _M_message(__msg_local_iter_compare_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n@@ -310,7 +301,7 @@ namespace __gnu_debug\n     operator==(const _Safe_local_iterator<_Iterator, _Sequence>& __lhs,\n \t       const _Safe_local_iterator<_Iterator, _Sequence>& __rhs)\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_compare_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));\n@@ -350,7 +341,7 @@ namespace __gnu_debug\n     operator!=(const _Safe_local_iterator<_Iterator, _Sequence>& __lhs,\n \t       const _Safe_local_iterator<_Iterator, _Sequence>& __rhs)\n     {\n-      _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n+      _GLIBCXX_DEBUG_VERIFY(!__lhs._M_singular() && !__rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_compare_bad)\n \t\t\t    ._M_iterator(__lhs, \"lhs\")\n \t\t\t    ._M_iterator(__rhs, \"rhs\"));"}, {"sha": "bef22fcaf46ac985a687ece78a90774b9a225d4d", "filename": "libstdc++-v3/include/debug/safe_local_iterator.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.tcc?ref=2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915", "patch": "@@ -38,7 +38,7 @@ namespace __gnu_debug\n     {\n       if (!_M_can_compare(__rhs))\n \treturn false;\n-      if (_M_bucket != __rhs._M_bucket)\n+      if (bucket() != __rhs.bucket())\n \treturn false;\n \n       /* Determine if we can order the iterators without the help of"}, {"sha": "c4be6ea79b306220d05d3d81a5b78f5bc5a45652", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915", "patch": "@@ -208,42 +208,42 @@ namespace __debug\n       begin(size_type __b)\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn local_iterator(_Base::begin(__b), __b, this);\n+\treturn local_iterator(_Base::begin(__b), this);\n       }\n \n       local_iterator\n       end(size_type __b)\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn local_iterator(_Base::end(__b), __b, this);\n+\treturn local_iterator(_Base::end(__b), this);\n       }\n \n       const_local_iterator\n       begin(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn const_local_iterator(_Base::begin(__b), __b, this);\n+\treturn const_local_iterator(_Base::begin(__b), this);\n       }\n \n       const_local_iterator\n       end(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn const_local_iterator(_Base::end(__b), __b, this);\n+\treturn const_local_iterator(_Base::end(__b), this);\n       }\n \n       const_local_iterator\n       cbegin(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn const_local_iterator(_Base::cbegin(__b), __b, this);\n+\treturn const_local_iterator(_Base::cbegin(__b), this);\n       }\n \n       const_local_iterator\n       cend(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn const_local_iterator(_Base::cend(__b), __b, this);\n+\treturn const_local_iterator(_Base::cend(__b), this);\n       }\n \n       size_type\n@@ -664,42 +664,42 @@ namespace __debug\n       begin(size_type __b)\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn local_iterator(_Base::begin(__b), __b, this);\n+\treturn local_iterator(_Base::begin(__b), this);\n       }\n \n       local_iterator\n       end(size_type __b)\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn local_iterator(_Base::end(__b), __b, this);\n+\treturn local_iterator(_Base::end(__b), this);\n       }\n \n       const_local_iterator\n       begin(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn const_local_iterator(_Base::begin(__b), __b, this);\n+\treturn const_local_iterator(_Base::begin(__b), this);\n       }\n \n       const_local_iterator\n       end(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn const_local_iterator(_Base::end(__b), __b, this);\n+\treturn const_local_iterator(_Base::end(__b), this);\n       }\n \n       const_local_iterator\n       cbegin(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn const_local_iterator(_Base::cbegin(__b), __b, this);\n+\treturn const_local_iterator(_Base::cbegin(__b), this);\n       }\n \n       const_local_iterator\n       cend(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn const_local_iterator(_Base::cend(__b), __b, this);\n+\treturn const_local_iterator(_Base::cend(__b), this);\n       }\n \n       size_type"}, {"sha": "4923be8c7ea0ee6f14d7675db34c1ab20d7d273e", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=2e5189c83a2b2c6f3fff04f9d8f6c1b1a869b915", "patch": "@@ -207,42 +207,42 @@ namespace __debug\n       begin(size_type __b)\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn local_iterator(_Base::begin(__b), __b, this);\n+\treturn local_iterator(_Base::begin(__b), this);\n       }\n \n       local_iterator\n       end(size_type __b)\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn local_iterator(_Base::end(__b), __b, this);\n+\treturn local_iterator(_Base::end(__b), this);\n       }\n \n       const_local_iterator\n       begin(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn const_local_iterator(_Base::begin(__b), __b, this);\n+\treturn const_local_iterator(_Base::begin(__b), this);\n       }\n \n       const_local_iterator\n       end(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn const_local_iterator(_Base::end(__b), __b, this);\n+\treturn const_local_iterator(_Base::end(__b), this);\n       }\n \n       const_local_iterator\n       cbegin(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn const_local_iterator(_Base::cbegin(__b), __b, this);\n+\treturn const_local_iterator(_Base::cbegin(__b), this);\n       }\n \n       const_local_iterator\n       cend(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn const_local_iterator(_Base::cend(__b), __b, this);\n+\treturn const_local_iterator(_Base::cend(__b), this);\n       }\n \n       size_type\n@@ -658,42 +658,42 @@ namespace __debug\n       begin(size_type __b)\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn local_iterator(_Base::begin(__b), __b, this);\n+\treturn local_iterator(_Base::begin(__b), this);\n       }\n \n       local_iterator\n       end(size_type __b)\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn local_iterator(_Base::end(__b), __b, this);\n+\treturn local_iterator(_Base::end(__b), this);\n       }\n \n       const_local_iterator\n       begin(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn const_local_iterator(_Base::begin(__b), __b, this);\n+\treturn const_local_iterator(_Base::begin(__b), this);\n       }\n \n       const_local_iterator\n       end(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn const_local_iterator(_Base::end(__b), __b, this);\n+\treturn const_local_iterator(_Base::end(__b), this);\n       }\n \n       const_local_iterator\n       cbegin(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn const_local_iterator(_Base::cbegin(__b), __b, this);\n+\treturn const_local_iterator(_Base::cbegin(__b), this);\n       }\n \n       const_local_iterator\n       cend(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n-\treturn const_local_iterator(_Base::cend(__b), __b, this);\n+\treturn const_local_iterator(_Base::cend(__b), this);\n       }\n \n       size_type"}]}