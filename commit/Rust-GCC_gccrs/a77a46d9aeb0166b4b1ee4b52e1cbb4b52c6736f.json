{"sha": "a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc3YTQ2ZDlhZWIwMTY2YjRiMWVlNGI1MmUxY2JiNGI1MmM2NzM2Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-03T14:03:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-03T14:41:11Z"}, "message": "libstdc++: Suppress redundant definitions of inline variables\n\nIn C++17 the out-of-class definitions for static constexpr variables are\nredundant, because they are implicitly inline. This change avoids\n\"redundant redeclaration\" warnings from -Wsystem-headers -Wdeprecated.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/random.tcc (linear_congruential_engine): Do not\n\tdefine static constexpr members when they are implicitly inline.\n\t* include/std/ratio (ratio, __ratio_multiply, __ratio_divide)\n\t(__ratio_add, __ratio_subtract): Likewise.\n\t* include/std/type_traits (integral_constant): Likewise.\n\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error\n\tline number.", "tree": {"sha": "69bfd04ec514391c0e5202128e930e43229601ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69bfd04ec514391c0e5202128e930e43229601ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c6759e41607f9edbbe25be18bd322d6a0408238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c6759e41607f9edbbe25be18bd322d6a0408238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c6759e41607f9edbbe25be18bd322d6a0408238"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "0be50d90e8a99550f61d2fe2f291344785d86255", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f", "patch": "@@ -91,6 +91,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   } // namespace __detail\n   /// @endcond\n \n+#if ! __cpp_inline_variables\n   template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n     constexpr _UIntType\n     linear_congruential_engine<_UIntType, __a, __c, __m>::multiplier;\n@@ -106,6 +107,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n     constexpr _UIntType\n     linear_congruential_engine<_UIntType, __a, __c, __m>::default_seed;\n+#endif\n \n   /**\n    * Seeds the LCR with integral value @p __s, adjusted so that the"}, {"sha": "92f6d4b9ea195b4b98dea63a91576d78e79b482f", "filename": "libstdc++-v3/include/std/ratio", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio?ref=a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f", "patch": "@@ -279,11 +279,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef ratio<num, den> type;\n     };\n \n+#if ! __cpp_inline_variables\n   template<intmax_t _Num, intmax_t _Den>\n     constexpr intmax_t ratio<_Num, _Den>::num;\n \n   template<intmax_t _Num, intmax_t _Den>\n     constexpr intmax_t ratio<_Num, _Den>::den;\n+#endif\n \n   /// @cond undocumented\n \n@@ -307,11 +309,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr intmax_t den = type::den;\n     };\n \n+#if ! __cpp_inline_variables\n   template<typename _R1, typename _R2>\n     constexpr intmax_t __ratio_multiply<_R1, _R2>::num;\n \n   template<typename _R1, typename _R2>\n     constexpr intmax_t __ratio_multiply<_R1, _R2>::den;\n+#endif\n \n   /// @endcond\n \n@@ -334,11 +338,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr intmax_t den = type::den;\n     };\n \n+#if ! __cpp_inline_variables\n   template<typename _R1, typename _R2>\n     constexpr intmax_t __ratio_divide<_R1, _R2>::num;\n \n   template<typename _R1, typename _R2>\n     constexpr intmax_t __ratio_divide<_R1, _R2>::den;\n+#endif\n \n   /// @endcond\n \n@@ -512,11 +518,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr intmax_t den = type::den;\n     };\n \n+#if ! __cpp_inline_variables\n   template<typename _R1, typename _R2>\n     constexpr intmax_t __ratio_add<_R1, _R2>::num;\n \n   template<typename _R1, typename _R2>\n     constexpr intmax_t __ratio_add<_R1, _R2>::den;\n+#endif\n \n   /// @endcond\n \n@@ -537,11 +545,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr intmax_t den = type::den;\n     };\n \n+#if ! __cpp_inline_variables\n   template<typename _R1, typename _R2>\n     constexpr intmax_t __ratio_subtract<_R1, _R2>::num;\n \n   template<typename _R1, typename _R2>\n     constexpr intmax_t __ratio_subtract<_R1, _R2>::den;\n+#endif\n \n   /// @endcond\n "}, {"sha": "46edde905f8dde70a02449f351b38ee32f741af1", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f", "patch": "@@ -73,8 +73,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n     };\n \n+#if ! __cpp_inline_variables\n   template<typename _Tp, _Tp __v>\n     constexpr _Tp integral_constant<_Tp, __v>::value;\n+#endif\n \n   /// The type used as a compile-time boolean with true value.\n   using true_type =  integral_constant<bool, true>;"}, {"sha": "8fba7144d8a3e2a87f65295617760ce2fcd43c6a", "filename": "libstdc++-v3/testsuite/26_numerics/random/pr60037-neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc?ref=a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f", "patch": "@@ -12,4 +12,4 @@ auto x = std::generate_canonical<std::size_t,\n \n // { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 169 }\n \n-// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3350 }\n+// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3352 }"}]}