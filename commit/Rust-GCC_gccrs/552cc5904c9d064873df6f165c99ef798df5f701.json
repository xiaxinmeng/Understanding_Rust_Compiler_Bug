{"sha": "552cc5904c9d064873df6f165c99ef798df5f701", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUyY2M1OTA0YzlkMDY0ODczZGY2ZjE2NWM5OWVmNzk4ZGY1ZjcwMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-05-02T07:46:05Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-05-02T07:46:05Z"}, "message": "decl.c (elaborate_reference_1): Do not bother about operand #2 for COMPONENT_REF.\n\n\t* gcc-interface/decl.c (elaborate_reference_1): Do not bother about\n\toperand #2 for COMPONENT_REF.\n\t* gcc-interface/utils2.c (gnat_save_expr): Likewise.\n\t(gnat_protect_expr): Likewise.\n\t(gnat_stabilize_reference_1): Likewise.\n\t(gnat_rewrite_reference): Do not bother about operand #3 for ARRAY_REF.\n\t(get_inner_constant_reference): Likewise.\n\t(gnat_invariant_expr): Likewise.\n\t* gcc-interface/trans.c (fold_constant_decl_in_expr): Likewise.\n\nFrom-SVN: r235701", "tree": {"sha": "a35710fb0fe0f1de07e28239a0d7129a910e6748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a35710fb0fe0f1de07e28239a0d7129a910e6748"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/552cc5904c9d064873df6f165c99ef798df5f701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552cc5904c9d064873df6f165c99ef798df5f701", "html_url": "https://github.com/Rust-GCC/gccrs/commit/552cc5904c9d064873df6f165c99ef798df5f701", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552cc5904c9d064873df6f165c99ef798df5f701/comments", "author": null, "committer": null, "parents": [{"sha": "6b9933b9b483b37bbed0a83e6631fff8de14a1f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b9933b9b483b37bbed0a83e6631fff8de14a1f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b9933b9b483b37bbed0a83e6631fff8de14a1f8"}], "stats": {"total": 48, "additions": 30, "deletions": 18}, "files": [{"sha": "590ecee24b8abb8e1d7f4e06108d77861ad0a3db", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552cc5904c9d064873df6f165c99ef798df5f701/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552cc5904c9d064873df6f165c99ef798df5f701/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=552cc5904c9d064873df6f165c99ef798df5f701", "patch": "@@ -1,3 +1,15 @@\n+2016-05-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (elaborate_reference_1): Do not bother about\n+\toperand #2 for COMPONENT_REF.\n+\t* gcc-interface/utils2.c (gnat_save_expr): Likewise.\n+\t(gnat_protect_expr): Likewise.\n+\t(gnat_stabilize_reference_1): Likewise.\n+\t(gnat_rewrite_reference): Do not bother about operand #3 for ARRAY_REF.\n+\t(get_inner_constant_reference): Likewise.\n+\t(gnat_invariant_expr): Likewise.\n+\t* gcc-interface/trans.c (fold_constant_decl_in_expr): Likewise.\n+\n 2016-05-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (Range_to_gnu): New static function."}, {"sha": "f3d2b52671d414b30249ac409fdce6bf80cb00ba", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552cc5904c9d064873df6f165c99ef798df5f701/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552cc5904c9d064873df6f165c99ef798df5f701/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=552cc5904c9d064873df6f165c99ef798df5f701", "patch": "@@ -6656,7 +6656,7 @@ elaborate_reference_1 (tree ref, void *data)\n       && TYPE_IS_FAT_POINTER_P (TREE_TYPE (TREE_OPERAND (ref, 0))))\n     return build3 (COMPONENT_REF, TREE_TYPE (ref),\n \t\t   elaborate_reference_1 (TREE_OPERAND (ref, 0), data),\n-\t\t   TREE_OPERAND (ref, 1), TREE_OPERAND (ref, 2));\n+\t\t   TREE_OPERAND (ref, 1), NULL_TREE);\n \n   sprintf (suffix, \"EXP%d\", ++er->n);\n   return"}, {"sha": "4febc04264b9a6195be2ff30640d82fc60c95bd2", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552cc5904c9d064873df6f165c99ef798df5f701/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552cc5904c9d064873df6f165c99ef798df5f701/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=552cc5904c9d064873df6f165c99ef798df5f701", "patch": "@@ -955,14 +955,21 @@ fold_constant_decl_in_expr (tree exp)\n \n       return DECL_INITIAL (exp);\n \n-    case BIT_FIELD_REF:\n     case COMPONENT_REF:\n       op0 = fold_constant_decl_in_expr (TREE_OPERAND (exp, 0));\n       if (op0 == TREE_OPERAND (exp, 0))\n \treturn exp;\n \n-      return fold_build3 (code, TREE_TYPE (exp), op0, TREE_OPERAND (exp, 1),\n-\t\t\t  TREE_OPERAND (exp, 2));\n+      return fold_build3 (COMPONENT_REF, TREE_TYPE (exp), op0,\n+\t\t\t  TREE_OPERAND (exp, 1), NULL_TREE);\n+\n+    case BIT_FIELD_REF:\n+      op0 = fold_constant_decl_in_expr (TREE_OPERAND (exp, 0));\n+      if (op0 == TREE_OPERAND (exp, 0))\n+\treturn exp;\n+\n+      return fold_build3 (BIT_FIELD_REF, TREE_TYPE (exp), op0,\n+\t\t\t  TREE_OPERAND (exp, 1), TREE_OPERAND (exp, 2));\n \n     case ARRAY_REF:\n     case ARRAY_RANGE_REF:\n@@ -974,7 +981,7 @@ fold_constant_decl_in_expr (tree exp)\n \treturn exp;\n \n       return fold (build4 (code, TREE_TYPE (exp), op0, TREE_OPERAND (exp, 1),\n-\t\t\t   TREE_OPERAND (exp, 2), TREE_OPERAND (exp, 3)));\n+\t\t\t   TREE_OPERAND (exp, 2), NULL_TREE));\n \n     case REALPART_EXPR:\n     case IMAGPART_EXPR:"}, {"sha": "67799df429e4bb2c19fda5d8425a503a99471b00", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/552cc5904c9d064873df6f165c99ef798df5f701/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/552cc5904c9d064873df6f165c99ef798df5f701/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=552cc5904c9d064873df6f165c99ef798df5f701", "patch": "@@ -2510,7 +2510,7 @@ gnat_save_expr (tree exp)\n   if (code == COMPONENT_REF\n       && TYPE_IS_FAT_POINTER_P (TREE_TYPE (TREE_OPERAND (exp, 0))))\n     return build3 (code, type, gnat_save_expr (TREE_OPERAND (exp, 0)),\n-\t\t   TREE_OPERAND (exp, 1), TREE_OPERAND (exp, 2));\n+\t\t   TREE_OPERAND (exp, 1), NULL_TREE);\n \n   return save_expr (exp);\n }\n@@ -2562,7 +2562,7 @@ gnat_protect_expr (tree exp)\n   if (code == COMPONENT_REF\n       && TYPE_IS_FAT_POINTER_P (TREE_TYPE (TREE_OPERAND (exp, 0))))\n     return build3 (code, type, gnat_protect_expr (TREE_OPERAND (exp, 0)),\n-\t\t   TREE_OPERAND (exp, 1), TREE_OPERAND (exp, 2));\n+\t\t   TREE_OPERAND (exp, 1), NULL_TREE);\n \n   /* If this is a fat pointer or a scalar, just make a SAVE_EXPR.  Likewise\n      for a CALL_EXPR as large objects are returned via invisible reference\n@@ -2610,7 +2610,7 @@ gnat_stabilize_reference_1 (tree e, void *data)\n \tresult\n \t  = build3 (code, type,\n \t\t    gnat_stabilize_reference_1 (TREE_OPERAND (e, 0), data),\n-\t\t    TREE_OPERAND (e, 1), TREE_OPERAND (e, 2));\n+\t\t    TREE_OPERAND (e, 1), NULL_TREE);\n       /* If the expression has side-effects, then encase it in a SAVE_EXPR\n \t so that it will only be evaluated once.  */\n       /* The tcc_reference and tcc_comparison classes could be handled as\n@@ -2718,7 +2718,7 @@ gnat_rewrite_reference (tree ref, rewrite_fn func, void *data, tree *init)\n \t\t  gnat_rewrite_reference (TREE_OPERAND (ref, 0), func, data,\n \t\t\t\t\t  init),\n \t\t  func (TREE_OPERAND (ref, 1), data),\n-\t\t  TREE_OPERAND (ref, 2), TREE_OPERAND (ref, 3));\n+\t\t  TREE_OPERAND (ref, 2), NULL_TREE);\n       break;\n \n     case COMPOUND_EXPR:\n@@ -2796,17 +2796,14 @@ get_inner_constant_reference (tree exp)\n \t  break;\n \n \tcase COMPONENT_REF:\n-\t  if (TREE_OPERAND (exp, 2))\n-\t    return NULL_TREE;\n-\n \t  if (!TREE_CONSTANT (DECL_FIELD_OFFSET (TREE_OPERAND (exp, 1))))\n \t    return NULL_TREE;\n \t  break;\n \n \tcase ARRAY_REF:\n \tcase ARRAY_RANGE_REF:\n \t  {\n-\t    if (TREE_OPERAND (exp, 2) || TREE_OPERAND (exp, 3))\n+\t    if (TREE_OPERAND (exp, 2))\n \t      return NULL_TREE;\n \n \t    tree array_type = TREE_TYPE (TREE_OPERAND (exp, 0));\n@@ -2934,16 +2931,12 @@ gnat_invariant_expr (tree expr)\n       switch (TREE_CODE (t))\n \t{\n \tcase COMPONENT_REF:\n-\t  if (TREE_OPERAND (t, 2))\n-\t    return NULL_TREE;\n \t  invariant_p |= DECL_INVARIANT_P (TREE_OPERAND (t, 1));\n \t  break;\n \n \tcase ARRAY_REF:\n \tcase ARRAY_RANGE_REF:\n-\t  if (!TREE_CONSTANT (TREE_OPERAND (t, 1))\n-\t      || TREE_OPERAND (t, 2)\n-\t      || TREE_OPERAND (t, 3))\n+\t  if (!TREE_CONSTANT (TREE_OPERAND (t, 1)) || TREE_OPERAND (t, 2))\n \t    return NULL_TREE;\n \t  break;\n "}]}