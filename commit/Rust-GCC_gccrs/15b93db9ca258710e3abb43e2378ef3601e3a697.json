{"sha": "15b93db9ca258710e3abb43e2378ef3601e3a697", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTViOTNkYjljYTI1ODcxMGUzYWJiNDNlMjM3OGVmMzYwMWUzYTY5Nw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-01-16T20:13:23Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2019-01-16T20:13:23Z"}, "message": "Fix ICE due to \"combine\" creating unreachable EH blocks (PR target/88861)\n\nPR target/88861 reports an ICE in \"ce2\" due to an unreachable\nbasic block.\n\nThe block becomes unreachable in \"combine\" when delete_noop_moves\ndeletes an insn with a REG_EH_REGION, deleting the EH edge, the\nonly edge leading to the basic block.\n\nNormally, rest_of_handle_combine would call cleanup_cfg, deleting\nunreachable blocks, if combine_instructions returns true, and\ncombine_instructions does return true for some cases of edge-removal,\nbut it doesn't for this case, leading to the ICE.\n\nThis patch updates delete_noop_moves so that it returns true if\nit deletes any edges, and passes that through to combine_instructions,\nso that it too will return true if any edges were deleted, ensuring that\ncleanup_cfg will be called by rest_of_handle_combine for this case,\ndeleting the now-unreachable block, and fixing the ICE.\n\ngcc/ChangeLog:\n\tPR target/88861\n\t* combine.c (delete_noop_moves): Convert to \"bool\" return,\n\treturning true if any edges are eliminated.\n\t(combine_instructions): Also return true if delete_noop_moves\n\treturns true.\n\ngcc/testsuite/ChangeLog:\n\tPR target/88861\n\t* g++.dg/torture/pr88861.C: New test.\n\nFrom-SVN: r267984", "tree": {"sha": "843768dfbe9461304aa053363cc987e1a4fe8b18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/843768dfbe9461304aa053363cc987e1a4fe8b18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15b93db9ca258710e3abb43e2378ef3601e3a697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b93db9ca258710e3abb43e2378ef3601e3a697", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15b93db9ca258710e3abb43e2378ef3601e3a697", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b93db9ca258710e3abb43e2378ef3601e3a697/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "ec90897cae3b30f80d293acc069b7a4d56ce00bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b93db9ca258710e3abb43e2378ef3601e3a697/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b93db9ca258710e3abb43e2378ef3601e3a697/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15b93db9ca258710e3abb43e2378ef3601e3a697", "patch": "@@ -1,3 +1,11 @@\n+2019-01-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR target/88861\n+\t* combine.c (delete_noop_moves): Convert to \"bool\" return,\n+\treturning true if any edges are eliminated.\n+\t(combine_instructions): Also return true if delete_noop_moves\n+\treturns true.\n+\n 2019-01-16  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c (aarch64_simd_expand_args): Use"}, {"sha": "c108f657c88a5f2af43fd7b70b3e9b2ac78970f9", "filename": "gcc/combine.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b93db9ca258710e3abb43e2378ef3601e3a697/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b93db9ca258710e3abb43e2378ef3601e3a697/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=15b93db9ca258710e3abb43e2378ef3601e3a697", "patch": "@@ -983,14 +983,17 @@ combine_validate_cost (rtx_insn *i0, rtx_insn *i1, rtx_insn *i2, rtx_insn *i3,\n }\n \n \n-/* Delete any insns that copy a register to itself.  */\n+/* Delete any insns that copy a register to itself.\n+   Return true if the CFG was changed.  */\n \n-static void\n+static bool\n delete_noop_moves (void)\n {\n   rtx_insn *insn, *next;\n   basic_block bb;\n \n+  bool edges_deleted = false;\n+\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n       for (insn = BB_HEAD (bb); insn != NEXT_INSN (BB_END (bb)); insn = next)\n@@ -1001,10 +1004,12 @@ delete_noop_moves (void)\n \t      if (dump_file)\n \t\tfprintf (dump_file, \"deleting noop move %d\\n\", INSN_UID (insn));\n \n-\t      delete_insn_and_edges (insn);\n+\t      edges_deleted |= delete_insn_and_edges (insn);\n \t    }\n \t}\n     }\n+\n+  return edges_deleted;\n }\n \n \f\n@@ -1143,8 +1148,8 @@ insn_a_feeds_b (rtx_insn *a, rtx_insn *b)\n /* Main entry point for combiner.  F is the first insn of the function.\n    NREGS is the first unused pseudo-reg number.\n \n-   Return nonzero if the combiner has turned an indirect jump\n-   instruction into a direct jump.  */\n+   Return nonzero if the CFG was changed (e.g. if the combiner has\n+   turned an indirect jump instruction into a direct jump).  */\n static int\n combine_instructions (rtx_insn *f, unsigned int nregs)\n {\n@@ -1529,7 +1534,7 @@ combine_instructions (rtx_insn *f, unsigned int nregs)\n   default_rtl_profile ();\n   clear_bb_flags ();\n   new_direct_jump_p |= purge_all_dead_edges ();\n-  delete_noop_moves ();\n+  new_direct_jump_p |= delete_noop_moves ();\n \n   /* Clean up.  */\n   obstack_free (&insn_link_obstack, NULL);"}, {"sha": "d662e2a90a2c9c331a034d6dfd8a8895861d9d75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b93db9ca258710e3abb43e2378ef3601e3a697/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b93db9ca258710e3abb43e2378ef3601e3a697/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15b93db9ca258710e3abb43e2378ef3601e3a697", "patch": "@@ -1,3 +1,8 @@\n+2019-01-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR target/88861\n+\t* g++.dg/torture/pr88861.C: New test.\n+\n 2019-01-16  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR debug/88046"}, {"sha": "d2b6a4b7a4703269412a0fb0416daef3e3c45024", "filename": "gcc/testsuite/g++.dg/torture/pr88861.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b93db9ca258710e3abb43e2378ef3601e3a697/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr88861.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b93db9ca258710e3abb43e2378ef3601e3a697/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr88861.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr88861.C?ref=15b93db9ca258710e3abb43e2378ef3601e3a697", "patch": "@@ -0,0 +1,11 @@\n+// { dg-options \"-fnon-call-exceptions\" }\n+\n+struct Ax {\n+  int n, a[];\n+};\n+\n+int i = 12345678;\n+int main() {\n+  static Ax s{456, i};\n+  ((s.a[0]) ? (void)0 : (void)0);\n+}"}]}