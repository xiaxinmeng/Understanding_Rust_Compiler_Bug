{"sha": "add37d3bf4f375bb202abdc7cf7768f27fc968d7", "node_id": "C_kwDOANBUbNoAKGFkZDM3ZDNiZjRmMzc1YmIyMDJhYmRjN2NmNzc2OGYyN2ZjOTY4ZDc", "commit": {"author": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2022-01-07T06:20:44Z"}, "committer": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2022-01-07T06:36:42Z"}, "message": "rs6000: Define a pattern for mffscrni.  If the RN is a constant, it can call gen_rs6000_mffscrni directly.\n\ngcc/\n\t* config/rs6000/rs6000.md (rs6000_mffscrni): Define.\n\t(rs6000_set_fpscr_rn): Change the type of operand[0] from DI to SI.\n\tCall gen_rs6000_mffscrni when operand[0] is a const_0_to_3_operand.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/mffscrni_p9.c: New testcase for mffscrni.\n\t* gcc.target/powerpc/test_fpscr_rn_builtin.c: Test mffscrn and mffscrni\n\tseparately.", "tree": {"sha": "6b1e73061a6c6f645bc43c64885244e50dbbe5ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b1e73061a6c6f645bc43c64885244e50dbbe5ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/add37d3bf4f375bb202abdc7cf7768f27fc968d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/add37d3bf4f375bb202abdc7cf7768f27fc968d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/add37d3bf4f375bb202abdc7cf7768f27fc968d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/add37d3bf4f375bb202abdc7cf7768f27fc968d7/comments", "author": null, "committer": null, "parents": [{"sha": "765693be1c8dc91fe612e7a499c5e41ba398ab96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765693be1c8dc91fe612e7a499c5e41ba398ab96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/765693be1c8dc91fe612e7a499c5e41ba398ab96"}], "stats": {"total": 48, "additions": 38, "deletions": 10}, "files": [{"sha": "6ecb0bd61424002ae22ff2ae0a2ccf22b586ffda", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/add37d3bf4f375bb202abdc7cf7768f27fc968d7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/add37d3bf4f375bb202abdc7cf7768f27fc968d7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=add37d3bf4f375bb202abdc7cf7768f27fc968d7", "patch": "@@ -6320,6 +6320,14 @@\n    \"mffscrn %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n+(define_insn \"rs6000_mffscrni\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d\")\n+\t(unspec_volatile:DF [(match_operand:SI 1 \"const_0_to_3_operand\" \"n\")]\n+\t\t\t    UNSPECV_MFFSCRN))]\n+   \"TARGET_P9_MISC\"\n+   \"mffscrni %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n (define_insn \"rs6000_mffscdrn\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d\")\n    (unspec_volatile:DF [(const_int 0)] UNSPECV_MFFSCDRN))\n@@ -6329,7 +6337,7 @@\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"rs6000_set_fpscr_rn\"\n- [(match_operand:DI 0 \"reg_or_cint_operand\")]\n+ [(match_operand:SI 0 \"reg_or_cint_operand\")]\n   \"TARGET_HARD_FLOAT\"\n {\n   rtx tmp_df = gen_reg_rtx (DFmode);\n@@ -6338,9 +6346,14 @@\n      new rounding mode bits from operands[0][62:63] into FPSCR[62:63].  */\n   if (TARGET_P9_MISC)\n     {\n-      rtx src_df = force_reg (DImode, operands[0]);\n-      src_df = simplify_gen_subreg (DFmode, src_df, DImode, 0);\n-      emit_insn (gen_rs6000_mffscrn (tmp_df, src_df));\n+      if (const_0_to_3_operand (operands[0], VOIDmode))\n+\temit_insn (gen_rs6000_mffscrni (tmp_df, operands[0]));\n+      else\n+\t{\n+\t  rtx op0 = convert_to_mode (DImode, operands[0], false);\n+\t  rtx src_df = simplify_gen_subreg (DFmode, op0, DImode, 0);\n+\t  emit_insn (gen_rs6000_mffscrn (tmp_df, src_df));\n+\t}\n       DONE;\n     }\n \n@@ -6362,7 +6375,8 @@\n       rtx tmp_di = gen_reg_rtx (DImode);\n \n       /* Extract new RN mode from operand.  */\n-      emit_insn (gen_anddi3 (tmp_rn, operands[0], GEN_INT (0x3)));\n+      rtx op0 = convert_to_mode (DImode, operands[0], false);\n+      emit_insn (gen_anddi3 (tmp_rn, op0, GEN_INT (3)));\n \n       /* Insert new RN mode into FSCPR.  */\n       emit_insn (gen_rs6000_mffs (tmp_df));"}, {"sha": "d97c6db8002006a6c6fa51379ef832ef796608e0", "filename": "gcc/testsuite/gcc.target/powerpc/mffscrni_p9.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/add37d3bf4f375bb202abdc7cf7768f27fc968d7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmffscrni_p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/add37d3bf4f375bb202abdc7cf7768f27fc968d7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmffscrni_p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmffscrni_p9.c?ref=add37d3bf4f375bb202abdc7cf7768f27fc968d7", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power9\" } */\n+/* { dg-final { scan-assembler-times {\\mmffscrni\\M} 1 } } */\n+\n+void foo ()\n+{\n+  int val = 2;\n+  __builtin_set_fpscr_rn (val);\n+}"}, {"sha": "04707ad8a5616ca2675b21a95593838b13764c4c", "filename": "gcc/testsuite/gcc.target/powerpc/test_fpscr_rn_builtin.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/add37d3bf4f375bb202abdc7cf7768f27fc968d7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftest_fpscr_rn_builtin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/add37d3bf4f375bb202abdc7cf7768f27fc968d7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftest_fpscr_rn_builtin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ftest_fpscr_rn_builtin.c?ref=add37d3bf4f375bb202abdc7cf7768f27fc968d7", "patch": "@@ -8,6 +8,10 @@\n #define RN_MASK  0x3LL             /* RN field mask */\n \n void abort (void);\n+void __attribute__ ((noipa)) wrap_set_fpscr_rn (int val)\n+{\n+  __builtin_set_fpscr_rn (val);\n+}\n \n int main ()\n {\n@@ -43,7 +47,8 @@ int main ()\n     }\t\t  \n \n   /* Test float rounding mode builtin with const value argument.  */\n-  __builtin_set_fpscr_rn(3);\n+  val = 3;\n+  __builtin_set_fpscr_rn (val);\n   conv_val.d = __builtin_mffs();\n   ll_value = conv_val.ll & RN_MASK;\n \n@@ -58,7 +63,7 @@ int main ()\n     }\t\t  \n \n   val = 2;\n-  __builtin_set_fpscr_rn(val);\n+  __builtin_set_fpscr_rn (val);\n   conv_val.d = __builtin_mffs();\n   ll_value = conv_val.ll & RN_MASK;\n \n@@ -74,7 +79,7 @@ int main ()\n \n   /* Reset to 0 for testing */\n   val = 0;\n-  __builtin_set_fpscr_rn(val);\n+  __builtin_set_fpscr_rn (val);\n \n   __builtin_mtfsb1(31);\n   conv_val.d = __builtin_mffs();\n@@ -157,7 +162,7 @@ int main ()\n \n   /* Test builtin float rounding mode with variable as argument.  */\n   val = 0;\n-  __builtin_set_fpscr_rn(val);\n+  wrap_set_fpscr_rn (val);\n   conv_val.d = __builtin_mffs();\n   ll_value = conv_val.ll & RN_MASK;\n \n@@ -172,7 +177,7 @@ int main ()\n     }\t\t  \n \n   val = 3;\n-  __builtin_set_fpscr_rn(val);\n+  wrap_set_fpscr_rn (val);\n   conv_val.d = __builtin_mffs();\n   ll_value = conv_val.ll & RN_MASK;\n "}]}