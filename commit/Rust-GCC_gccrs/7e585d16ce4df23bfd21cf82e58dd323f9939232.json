{"sha": "7e585d16ce4df23bfd21cf82e58dd323f9939232", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U1ODVkMTZjZTRkZjIzYmZkMjFjZjgyZTU4ZGQzMjNmOTkzOTIzMg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-06-19T22:28:28Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-06-19T22:28:28Z"}, "message": "c-parse.in (undeclared_variable_notice): Moved to c-typeck.c.\n\n\t* c-parse.in (undeclared_variable_notice): Moved to c-typeck.c.\n\t(primary: IDENTIFIER): Just call build_external_ref.\n\t* c-parse.y, c-parse.c, objc/objc-parse.y, objc/objc-parse.c:\n\tRegenerate.\n\t* c-lex.c (lastiddecl): Remove.\n\t(yylex): Replace all instances of lastiddecl with local\n\tvariables.\n\n\t* c-typeck.c (build_external_ref): New function.  Treat decls\n\twith C_DECL_ANTICIPATED mostly the same as nonexistent decls.\n\tLook up the decl from the id here.  Call lookup_objc_ivar.\n\t* c-lang.c (lookup_objc_ivar): Stub.\n\t* objc/objc-act.c (lookup_objc_ivar): New function.\n\n\t* c-tree.h: Prototype lookup_objc_ivar and build_external_ref.\n\t* c-lex.h: Don't declare lastiddecl.\n\nFrom-SVN: r34602", "tree": {"sha": "f8653d51128340a6406078646bbab4019565ca16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8653d51128340a6406078646bbab4019565ca16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e585d16ce4df23bfd21cf82e58dd323f9939232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e585d16ce4df23bfd21cf82e58dd323f9939232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e585d16ce4df23bfd21cf82e58dd323f9939232", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e585d16ce4df23bfd21cf82e58dd323f9939232/comments", "author": null, "committer": null, "parents": [{"sha": "2f1034940abd6330b54ba614df5cd1795fd76557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f1034940abd6330b54ba614df5cd1795fd76557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f1034940abd6330b54ba614df5cd1795fd76557"}], "stats": {"total": 2802, "additions": 1137, "deletions": 1665}, "files": [{"sha": "e0e8ae61d50eca3f25b1e8b5d3ebe76d26d408e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 105, "deletions": 86, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e585d16ce4df23bfd21cf82e58dd323f9939232", "patch": "@@ -1,3 +1,22 @@\n+2000-06-19  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* c-parse.in (undeclared_variable_notice): Moved to c-typeck.c.\n+\t(primary: IDENTIFIER): Just call build_external_ref.\n+\t* c-parse.y, c-parse.c, objc/objc-parse.y, objc/objc-parse.c:\n+\tRegenerate.\n+\t* c-lex.c (lastiddecl): Remove.\n+\t(yylex): Replace all instances of lastiddecl with local\n+\tvariables.\n+\n+\t* c-typeck.c (build_external_ref): New function.  Treat decls\n+\twith C_DECL_ANTICIPATED mostly the same as nonexistent decls.\n+\tLook up the decl from the id here.  Call lookup_objc_ivar.\n+\t* c-lang.c (lookup_objc_ivar): Stub.\n+\t* objc/objc-act.c (lookup_objc_ivar): New function.\n+\n+\t* c-tree.h: Prototype lookup_objc_ivar and build_external_ref.\n+\t* c-lex.h: Don't declare lastiddecl.\n+\n 2000-06-19  Benjamin Chelf  <chelf@codesourcery.com>\n \n \t* c-common.h (IF_COND): Added documentation.\n@@ -28,9 +47,9 @@\n \t(STMT_EXPR_STMT): Likewise.\n \t(LABEL_STMT_LABEL): Likewise.\n \n-\t* c-common.def: Added documenetion for SRCLOC, EXPR_STMT, \n-\tCOMPOUND_STMT, DECL_STMT, IF_STMT, FOR_STMT, WHILE_STMT, DO_STMT, \n-\tRETURN_STMT, BREAK_STMT, CONTINUE_STMT, SWITCH_STMT, GOTO_STMT, \n+\t* c-common.def: Added documenetion for SRCLOC, EXPR_STMT,\n+\tCOMPOUND_STMT, DECL_STMT, IF_STMT, FOR_STMT, WHILE_STMT, DO_STMT,\n+\tRETURN_STMT, BREAK_STMT, CONTINUE_STMT, SWITCH_STMT, GOTO_STMT,\n \tLABEL_STMT, ASM_STMT, SCOPE_STMT, CASE_LABEL, STMT_EXPR.\n \n 2000-06-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n@@ -114,7 +133,7 @@ Sat Jun 17 10:33:59 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(enum c_tree_code): New enum.\n \n \t* c-lex.c (init_parse): Added call to add_c_tree_codes.\n-\t\n+\n 2000-06-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* fixinc/inclhack.def (ctrl_quotes_def, io_quotes_def): Modify\n@@ -200,7 +219,7 @@ Wed Jun 14 23:46:26 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \tSCOPE_STMT, CASE_LABEL, STMT_EXPR.\n \n \t* gencheck.c (tree_codes[]): Added '#include \"c-common.def\"'.\n-\t\n+\n 2000-06-14  David O'Brien  <obrien@FreeBSD.org>\n \n \t* gcc.c (main): Quiet compiler warnings.  argv is assumed to be\n@@ -409,7 +428,7 @@ Mon Jun 12 17:04:17 2000  Jeffrey A Law  (law@cygnus.com)\n \n 2000-06-12  J. David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n-        * config/float-vax.h: Add GFLOAT defines.\n+\t* config/float-vax.h: Add GFLOAT defines.\n \n Mon Jun  12  9:44:00 2000  Mark Klein  <mklein@dis.com>\n \n@@ -482,8 +501,8 @@ Mon Jun  12  9:44:00 2000  Mark Klein  <mklein@dis.com>\n \n 2000-06-09  Rodney Brown  <RodneyBrown@mynd.com>\n \n-        * mcore-protos.h: discards const warning removal.\n-        * mcore.c: discards const warning removal.\n+\t* mcore-protos.h: discards const warning removal.\n+\t* mcore.c: discards const warning removal.\n \n 2000-06-09  Kazu Hirata  <kazu@hxi.com>\n \n@@ -509,7 +528,7 @@ Mon Jun  12  9:44:00 2000  Mark Klein  <mklein@dis.com>\n \tobstack tricks (this routine is no longer a bottleneck).\n \t* tree.c (make_node): Clear the new node always.\n \t(make_tree_vec): Likewise.\n-\t(tree_cons): Clear the common structure always.  \n+\t(tree_cons): Clear the common structure always.\n \t(build1): Likewise; also, clear TREE_COMPLEXITY.\n \t* gengenrtl.c: Use puts wherever possible.  Remove extra\n \tnewlines.\n@@ -593,7 +612,7 @@ Fri Jun  9 20:35:13 2000  Denis Chertykov  <denisc@overta.ru>\n \tASM_OUTPUT_DWARF_CONST_DOUBLE.\n \t* tree.c (host_integerp): Accept unsigned HOST_WIDE_INT values when\n \tpos is zero.\n-\t\n+\n \t* config/ia64/ia64-protos.h (ia64_output_end_prologue): Add.\n \t(output_function_prologue): Fix mispelling.\n \t(output_function_prologue, output_function_epilogue): Reorder to\n@@ -604,7 +623,7 @@ Fri Jun  9 20:35:13 2000  Denis Chertykov  <denisc@overta.ru>\n \t(ia64_output_end_prologue): New function.\n \t(process_set): Emit \".restore sp\" for epilogue stack restores.\n \t* config/ia64/ia64.h (FUNCTION_END_PROLOGUE): Define.\n-\t\n+\n 2000-06-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* dbxout.c (dbxout_type_fields): Don't segfault on fields with\n@@ -621,7 +640,7 @@ Fri Jun  9 20:35:13 2000  Denis Chertykov  <denisc@overta.ru>\n 2000-06-07  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* c-decl.c (pushdecl): Do not call COMPLETE_TYPE_P on\n-\terror_mark_node. \n+\terror_mark_node.\n \t* print-tree.c (print_node): The transparent_union_flag means\n \tdifferent things for unions and arrays.  Do not inspect it\n \twith TYPE_TRANSPARENT_UNION.\n@@ -659,7 +678,7 @@ Wed Jun  7 20:34:33 2000  Denis Chertykov  <denisc@overta.ru>\n \n 2000-06-06  Philipp Thomas  <pthomas@suse.de>\n \n-        * configure.in (AC_C_INLINE): Added.\n+\t* configure.in (AC_C_INLINE): Added.\n \t* aclocal.m4 (AM_WITH_NLS): Enable --with-included-gettext by default.\n \t* configure: Regenerate.\n \n@@ -673,8 +692,8 @@ Wed Jun  7 20:34:33 2000  Denis Chertykov  <denisc@overta.ru>\n \t* c-lex.c (doing_objc_thang): Remove.\n \t* c-tree.h (doing_objc_thang): Make it a macro.\n \t* objc/objc-act.c (lang_decode_option): Set c_language, not\n-\tdoing_objc_thang. \n-\t\n+\tdoing_objc_thang.\n+\n 2000-06-06  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* diagnostic.c (output_maximum_width): Remove.\n@@ -688,7 +707,7 @@ Wed Jun  7 20:34:33 2000  Denis Chertykov  <denisc@overta.ru>\n \t(output_clear): Tweak.\n \t(line_wrapper_printf): Adjust call to init_output_buffer.\n \t(vline_wrapper_message_with_location): Likewise.  Use\n-\toutput_destroy_prefix. \n+\toutput_destroy_prefix.\n \t(v_message_with_decl): Likewise.\n \n \t* diagnostic.h (struct output_buffer): Constify prefix.\n@@ -733,7 +752,7 @@ Tue Jun  6 19:25:32 2000  Philippe De Muyter  <phdm@macqel.be>\n 2000-06-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* m68k.c (legitimize_pic_address): Move prototype ...\n-\t\n+\n \t* m68k-protos.h (legitimize_pic_address): ... here.\n \n \t* m68k.md (legitimize_pic_address): Delete prototypes.\n@@ -850,16 +869,16 @@ Mon Jun  5 06:46:28 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(dyn-string.o): Delete rule.\n \t* dyn-string.c: Delete file\n \t* dyn-string.h: Likewise.\n-\t\n+\n 2000-06-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (intl.*): Honor non-zero exit codes in the intl\n \tsubdir.\n \n 2000-06-03  Geoff Keating  <geoffk@cygnus.com>\n \n-        * alias.c (record_component_aliases): Don't inspect\n-        DECL_NONADDRESSABLE_P of non-FIELD_DECL components of structures.\n+\t* alias.c (record_component_aliases): Don't inspect\n+\tDECL_NONADDRESSABLE_P of non-FIELD_DECL components of structures.\n \n Sat Jun  3 19:05:30 2000  Michael Meissner  <meissner@redhat.com>\n \n@@ -939,7 +958,7 @@ Fri Jun  2 19:31:03 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* c-common.h (c_get_alias_set): Don't declare.\n \t* c-decl.c (init_decl_processing): Don't set lang_get_alias_set.\n \t* expr.h (lang_get_alias_set): Declare as function, not pointer.\n-\t\n+\n 2000-06-02  Bruce Korb  <bkorb@gnu.org>\n \n \t* fixinc/server.c(sig_handler):  resume closing server on SIGPIPE\n@@ -983,7 +1002,7 @@ Fri Jun  2 00:22:52 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* cpplex.c (maybe_macroexpand): Use CPP_WTRADITIONAL.  Improve\n \terror message.\n-\t* cpplib.c (parse_include): Remove support for VAX-C \n+\t* cpplib.c (parse_include): Remove support for VAX-C\n \t\"#include starlet\" misfeature.\n \n 2000-05-31 Laurynas Biveinis <lauras@softhome.net>\n@@ -1019,7 +1038,7 @@ Thu Jun  1 09:37:35 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \t* config/i386/i386-protos.h (ix86_use_fcomi_compare): Declare.\n \t* config/i386/i386.md (*fp_jcc_3, *fp_jcc_4): Disable if we\n \twill use FCOMI.\n-\t\n+\n 2000-06-01  Richard Henderson  <rth@cygnus.com>\n \n \t* Makefile.in (c-decl.o): Depend on $(EXPR_H), not expr.h.\n@@ -1046,7 +1065,7 @@ Thu Jun  1 09:37:35 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \n 2000-05-31  Richard Henderson  <rth@cygnus.com>\n \n-\t* ifcvt.c (merge_if_block): Be prepared for JOIN to have no \n+\t* ifcvt.c (merge_if_block): Be prepared for JOIN to have no\n \tremaining edges.\n \t(find_if_block): Allow THEN with no outgoing edges.\n \t* flow.c (merge_blocks_nomove): Remove a barrier not following\n@@ -1055,7 +1074,7 @@ Thu Jun  1 09:37:35 2000  Clinton Popetz  <cpopetz@cygnus.com>\n 2000-05-31  Richard Henderson  <rth@cygnus.com>\n \n \t* flow.c (propagate_block): Move initialization of mem_set_list ...\n-\t(init_propagate_block_info): ... here.  Also track blocks with \n+\t(init_propagate_block_info): ... here.  Also track blocks with\n \tno successors; don't scan insns if ! PROP_SCAN_DEAD_CODE.\n \n 2000-05-31  Richard Henderson  <rth@cygnus.com>\n@@ -1072,7 +1091,7 @@ Thu Jun  1 09:37:35 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \n 2000-05-31  Philipp Thomas  <pthomas@suse.de>\n \n-\t* configure.in (enable-nls): Enable if build == host, i.e. when \n+\t* configure.in (enable-nls): Enable if build == host, i.e. when\n \tnot building a canadian cross compiler.\n \t(enable-maintainer-mode): Added for use with i18n.\n \t* aclocal.m4 (AM_GNU_GETTEXT): Only build catalogs that are a\n@@ -1180,7 +1199,7 @@ Wed May 31 08:07:52 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(get_alias_set, new_alias_set, lang_get_alias_set): Deleted from here.\n \t* varasm.c (make_function_rtl, make_decl_rtl): Call set_mem_attributes.\n \t(output_constant_def, force_const_mem): Likewise.\n-\t\n+\n \t* flow.c (propagate_block): If block has no successors, stores to\n \tframe are dead if not used.\n \n@@ -1240,7 +1259,7 @@ Tue May 30 09:57:32 2000  Philippe De Muyter  <phdm@macqel.be>\n \n 2000-05-29  Richard Earnshaw (rearnsha@arm.com)\n \n-\t* flow.c (mark_used_reg): If a register is unconditionally live, \n+\t* flow.c (mark_used_reg): If a register is unconditionally live,\n \tremove any conditional death information.\n \n 2000-05-29  Richard Henderson  <rth@cygnus.com>\n@@ -1327,7 +1346,7 @@ Tue May 30 09:57:32 2000  Philippe De Muyter  <phdm@macqel.be>\n \n \t* toplev.c (rest_of_compilation): Set no_new_pseudos after flow1;\n \tinstead track register_life_up_to_date.  Toggle no_new_pseudos\n-\taround if_convert.  \n+\taround if_convert.\n \n 2000-05-28  Geoff Keating  <geoffk@cygnus.com>\n \n@@ -1337,7 +1356,7 @@ Tue May 30 09:57:32 2000  Philippe De Muyter  <phdm@macqel.be>\n Sun May 28 18:37:07 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \n \t* lcm.c (make_preds_opaque): Fix comment.\n-\t(optimize_mode_switching): Use NORMAL_MODE instead of \n+\t(optimize_mode_switching): Use NORMAL_MODE instead of\n \tMODE_USES_IN_EXIT_BLOCK.  Change leftover instance of\n \tFP_MODE_NONE to no_mode.  Rename MODE_AT_ENTRY to NORMAL_MODE.\n \tHandle insertions before an existing NOTE_INSN_BASIC_BLOCK.\n@@ -1536,11 +1555,11 @@ Sun May 28 23:26:59 2000  Philippe De Muyter <phdm@macqel.be>\n \t(gen_insn): Put all insns on the same obstack.\n \t(main): Generate prototypes for everything unconditionally.\n \n-\t* configure.in: Add AC_CHECK_TYPE(ssize_t).  Remove commented \n+\t* configure.in: Add AC_CHECK_TYPE(ssize_t).  Remove commented\n \tout check for wchar_t.\n \t* acconfig.h: Add template for ssize_t.  Remove @TOP@.\n-\t* system.h: Add infrastructure for defining missing   \n-\tTYPE_MAX/TYPE_MIN macros.  Use it to provide fallback  \n+\t* system.h: Add infrastructure for defining missing\n+\tTYPE_MAX/TYPE_MIN macros.  Use it to provide fallback\n \tdefinitions of UCHAR_MAX and SSIZE_MAX.\n \t* configure: Regenerate.\n \t* config.in: Regenerate.\n@@ -1676,7 +1695,7 @@ Sat May 27 11:01:27 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n 2000-05-26  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* flow.c (find_label_refs): New function.\n-\t(find_basic_blocks_1): Call it for each alternative of a call \n+\t(find_basic_blocks_1): Call it for each alternative of a call\n \tplaceholder.\n \n 2000-05-26  Richard Earnshaw  <rearnsha@arm.com>\n@@ -1759,7 +1778,7 @@ Sat May 27 11:01:27 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* except.h (can_throw): Declare it.\n \t* except.c (can_throw): Give it external linkage.\n \t* resource.c (find_dead_or_set_registers): Use can_throw.\n-\t\n+\n 2000-05-25  Richard Henderson  <rth@cygnus.com>\n \n \t* flow.c (mark_set_1): Don't record conditionally dead memory.\n@@ -1839,7 +1858,7 @@ Sat May 27 11:01:27 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \tfrom frame.c.\n \t* frame.c: Remove all DWARF 2 specific code.\n \t* config/ia64/frame-ia64.c: New file.\n-\t(gthread_stuff): Make all gthread available with \n+\t(gthread_stuff): Make all gthread available with\n \tIA64_UNWIND_INFO.\n \t(dwarf_fde): Define an IA64 struct for dwarf_fde.\n \t(__register_frame_info, __register_frame): Move to common area of file.\n@@ -1862,15 +1881,15 @@ Sat May 27 11:01:27 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(execute_one_ia64_descriptor): Execute one descriptor record.\n \t(rse_address_add): Calculate the position of a local reg in memory.\n \t(normalize_reg_loc): Turn a location descriptor into a memory address.\n-\t(maybe_normalize_reg_loc): Only normalize a descriptor if it falls \n+\t(maybe_normalize_reg_loc): Only normalize a descriptor if it falls\n \twithin a specified PC offset range.\n \t(get_real_reg_value): Given a register location, retrieve its value.\n \t(set_real_reg_value): Change the value of a register location.\n \t(copy_reg_value): Copy reg values, if needed.\n \t(copy_saved_reg_state): Copy all registers that need to be copied.\n \t(process_state_between): Normalize all frame register records that\n \tfall within the specified PC range.\n-\t(frame_translate): Take a processed frame description, and turn \n+\t(frame_translate): Take a processed frame description, and turn\n \teverything into addresses.\n \t(build_ia64_frame_state ): Find and create frame state record for a PC.\n \t(get_personality): Get the personality routine for a given frame.\n@@ -1887,35 +1906,35 @@ Sat May 27 11:01:27 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(struct unw_p_record, unw_b_record, unw_x_record) : New unwind records.\n \t(struct unw_r_record, unwind_record): New unwind record structs.\n \t(struct unwind_info_ptr): Unwind information layout.\n-\t(IA64_UNW_LOC_TYPE_*): Macros for different types for location \n+\t(IA64_UNW_LOC_TYPE_*): Macros for different types for location\n \tdescriptors.\n \t(struct ia64_reg_loc): Register location description.\n \t(struct ia64_frame_state): Location of all registers in a frame.\n \t(struct object): Add pc_base and fde_end for IA64_UNWIND_INFO.\n \t* libgcc2.c (__ia64_personality_v1): Personality routine.\n \t(__calc_caller_bsp): Calculate the bsp register for the caller's\n \tframe.\n-\t(ia64_throw_helper): Figure out who to return to and set up the \n+\t(ia64_throw_helper): Figure out who to return to and set up the\n \tregisters.\n \t(__throw): Throw routine.\n \n \t* output.h (assemble_eh_align, assemble_eh_label): New functions\n-\tto generate EH info where we want it.\t\n+\tto generate EH info where we want it.\n \t(assemble_eh_integer): New function.\n \t* toplev.c (compile_file): Output module level exception table for\n \tnon-ia64 targets.\n-\t(main): Set exceptions_via_longjump and flag_new_exceptions based \n+\t(main): Set exceptions_via_longjump and flag_new_exceptions based\n \ton IA64_UNWIND_INFO too.\n \n \t* varasm.c (assemble_eh_label): Generate a label via\n \tASM_OUTPUT_EH_LABEL if it has been specified.\n-\t(assemble_eh_align): Generate an alignment directive via \n+\t(assemble_eh_align): Generate an alignment directive via\n \tASM_OUTPUT_EH_ALIGN if it has been specified.\n \t(assemble_eh_label): Generate an integer value via\n \tASM_OUTPUT_EH_type if they have been specified.\n \t* config/ia64/ia64.c (rtx_needs_barrier): Add flushrs.\n \t(ia64_init_builtins): Add __builtin_ia64_bsp\n-\tand __builtin_ia64_flushrs.\t\n+\tand __builtin_ia64_flushrs.\n \t(ia64_expand_builtin): Add IA64_BUILTIN_BSP and\n \tIA64_BUILTIN_FLUSHRS.\n \t* config/ia64/ia64.h (ia64_builtins): Add IA64_BUILTIN_BSP and\n@@ -1930,7 +1949,7 @@ Sat May 27 11:01:27 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* config/ia64/t-ia64 (LIB2ADDEH): Add.\n \t* Makefile.in (LIB2ADDEH): Add.\n \t(LIB2ADD): Use LIB2ADDEH.\n-\t\n+\n 2000-05-24  Richard Henderson  <rth@cygnus.com>\n \n \t* recog.c (offsettable_address_p): If mode size is zero, assume\n@@ -2069,17 +2088,17 @@ Tue May 23 13:58:52 2000  Philippe De Muyter  <phdm@macqel.be>\n 2000-05-23  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* simplify-rtx.c (SIGN_EXTEND): New macro.\n-\t(simplify_unary_operation, simplify_binary_operation, \n+\t(simplify_unary_operation, simplify_binary_operation,\n \tsimplify_relational_operation): Use SIGN_EXTEND.  Make low\n-\thalves of (low, high) pairs unsigned if they weren't already.       \n+\thalves of (low, high) pairs unsigned if they weren't already.\n \t(simplify_ternary_operation): Cast INTVAL to unsigned before\n \tcomparing to a MODE_BITSIZE.\n \n 2000-05-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* aclocal.m4 (gcc_AC_CHECK_DECL, gcc_AC_CHECK_DECLS): New macros\n \trewritten from the internals of gcc_AC_NEED_DECLARATION{S}.\n-\t\n+\n \t* configure.in (gcc_AC_CHECK_DECLS): Call this instead of\n \tgcc_AC_NEED_DECLARATIONS.\n \n@@ -2123,7 +2142,7 @@ Tue May 23 06:50:29 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2000-05-22  Richard Henderson  <rth@cygnus.com>\n \n-\t* function.c (thread_prologue_and_epilogue_insns): Make sure \n+\t* function.c (thread_prologue_and_epilogue_insns): Make sure\n \texisting line number notes appear after the prologue.\n \n Mon May 22 21:49:00 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n@@ -2149,7 +2168,7 @@ Mon May 22 13:14:03 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* optabs.c (can_extend_p): Allow unsignedp to have any nonzero value.\n \t(gen_extend_insn, can_fix_p, can_float_p): Likewise.\n-\t\n+\n \t* final.c (final_scan_insn, case NOTE_INSN_FUNCTION_BEG): Remove\n \tdangling \"else\" that causes \"break\" to be conditional.\n \tAlso remove unneeded code at start.\n@@ -2208,7 +2227,7 @@ Sun May 21 16:42:31 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* gensupport.c (process_rtx): Use XVEC to initialize vector\n \tslot of 'split'.\n \n-\t* print-rtl.c: If DEBUG_REGISTER_NAMES, define static \n+\t* print-rtl.c: If DEBUG_REGISTER_NAMES, define static\n \tdebug_reg_names instead of static reg_names.  If not, define\n \tglobal reg_names.\n \t* regclass.c: Don't define global reg_names unless\n@@ -2360,15 +2379,15 @@ Fri May 19 18:16:31 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n Fri May 19 12:05:13 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \n-\t* ssa.c (convert_from_ssa): Tell life_analysis we need death \n+\t* ssa.c (convert_from_ssa): Tell life_analysis we need death\n \tnotes.\n \t(make_regs_equivalent_over_bad_edges): Only look at abnormal\n \tcritical edges.\n \n 2000-05-19  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpphash.c (funlike_macroexpand): Make sure not to walk p1\n-\tpast l1 when deleting whitespace and markers.              \n+\tpast l1 when deleting whitespace and markers.\n \n \t* cpplex.c (_cpp_scan_until): Clear AUX field of tokens.\n \t* cpplib.c (do_unassert): Put the list to compare against on\n@@ -2520,7 +2539,7 @@ Thu May 18 12:10:18 2000  Philippe De Muyter  <phdm@macqel.be>\n \tas normal directives.\n \t(do_define): Don't set parsing_define_directive.  Use\n \t_cpp_scan_until.  The list does not have a VSPACE at the end.\n-\t(do_if): Save, clear, and restore only_seen_white around \n+\t(do_if): Save, clear, and restore only_seen_white around\n \t_cpp_parse_expr.\n \t(skip_if_group): s/CPP_DIRECTIVE/CPP_HASH/\n \t(do_assert, do_unassert): Rewrite.\n@@ -2817,7 +2836,7 @@ Mon May 15 19:01:42 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t* config/rs6000/rs6000.h (RETURN_ADDRESS_OFFSET): Correct for\n \t64-bit ABI.\n \n-\t* config/rs6000/rs6000.c (logical_operand): Rewrite to take MODE \n+\t* config/rs6000/rs6000.c (logical_operand): Rewrite to take MODE\n \tinto account.\n \t(logical_u_operand): Delete.\n \t(non_logical_cint_operand): Rewrite to take MODE into account.\n@@ -2835,7 +2854,7 @@ Mon May 15 19:01:42 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t* config/rs6000/rs6000.h (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): There\n \tis no such thing as a DImode CONST_DOUBLE.\n \t* config/rs6000/rs6000.c (output_toc): Likewise.\n-\t\n+\n \t* config/rs6000/rs6000.c (output_cbranch): Don't output prediction\n \tcodes when old mnemonics are in use.  Print register names\n \tfor cc registers when requested.\n@@ -2864,22 +2883,22 @@ Sun May 14 17:58:59 2000  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* mklibgcc.in (building libgcc1) [Xlibgcc1.a]: Do not use unset\n \tvariables $src and $dst.\n-\t\n+\n 2000-05-13  Gabriel Dos Reis <gdr@codesourcery.com>\n \n \t* diagnostic.h (DIAGNOSTICS_SHOW_PREFIX_ONCE): New macro.\n \t(DIAGNOSTICS_SHOW_PREFIX_NEVER): Likewise.\n \t(DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE): Likewise.\n \t(struct output_buffer: emitted_prefix_p, prefixing_rule): New\n-\tfields. \n+\tfields.\n \t(set_message_prefixing_rule): Declare.\n \n \t* diagnostic.c: (current_prefixing_rule): New variable.\n \t(set_message_prefixing_rule): Define.\n \t(output_set_prefix): Adjust buffer->emitted_prefix_p.\n \t(init_output_buffer): Adjust Initialization.\n \t(output_emit_prefix): Rewrite.  Take prefixing rules into account.\n-\t\n+\n Sat May 13 11:05:47 2000  Philippe De Muyter  <phdm@macqel.be>\n \n \t* ifcvt.c (if_convert): Do not free NULL.\n@@ -3153,7 +3172,7 @@ Wed 10 May 09:36:47 2000  Neil Booth  <NeilB@earthling.net>\n \n \t* cpplex.c (spell_token): New function.\n \t(spell_string, spell_comment, spell_name): fold into\n-\tspell_token.\t\n+\tspell_token.\n \t(I, S): Add macros.\n \t(E, H): Remove macros.\n \t(save_comment): Save comment opening characters too.\n@@ -3250,7 +3269,7 @@ Tue May  9 20:52:43 2000  Denis Chertykov  <denisc@overta.ru>\n  \t* config/avr/avr-protos.h (extra_constraint): change a type of\n \tsecond argument from char to int to avoid warnings.\n \t(asm_output_byte): Likewise.\n-\t\n+\n \t* config/avr/avr.c (MAX_LD_OFFSET) New macro.\n \t(initial_elimination_offset): Handle elimination from\n \tFRAME_POINTER_REGNUM to STACK_POINTER_REGNUM.\n@@ -3276,7 +3295,7 @@ Tue May  9 20:52:43 2000  Denis Chertykov  <denisc@overta.ru>\n \tscratch register. Run `fatal_insn' if shift count is a CONSTANT_P,\n \tbut not a CONST_INT.\n \t(lshrqi3_out): Coding style modifications. Run `fatal_insn' if\n-\tshift count is a CONSTANT_P, but not a CONST_INT. \n+\tshift count is a CONSTANT_P, but not a CONST_INT.\n \t(extra_constraint): change a type of\n \tsecond argument from char to int to avoid warnings.\n \t(asm_output_byte): Likewise.\n@@ -3294,7 +3313,7 @@ Tue May  9 20:52:43 2000  Denis Chertykov  <denisc@overta.ru>\n \t(lshrqi3): Shift count uses constraints 'n' instead of 'i'.\n \t(call_insn): Correct test for which_alternative == 1 (was 0).\n \t(call_value_insn): Likewise.\n-\t\n+\n \t* config/avr/t-avr: Remove definition of FLOAT while generates\n \tfp-bit.c\n \n@@ -3310,7 +3329,7 @@ Tue May  9 16:30:27 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t* calls.c (expand_call): Reorganize somewhat in order\n \tto avoid unnecesary recalculation inside loop and make\n \ttail call failure code cleaner.\n-\t\n+\n Tue May  9 06:30:20 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* alias.c (nonlocal_reference_p): Minor reformatting.\n@@ -3593,7 +3612,7 @@ Sun May  7 00:54:57 EDT 2000  John Wehle  (john@feith.com)\n \t* arm.c (thumb_code): Define it.\n \t(arm_override_options): Set it.\n \t* arm.h (thumb_code): Declare it.\n-\t\n+\n 2000-05-06  Richard Earnshaw (reanrsha@arm.com)\n \n \t* arm-protos.h (arm_dllexport_name_p, arm_dllimport_name_p): Constify.\n@@ -3602,7 +3621,7 @@ Sun May  7 00:54:57 EDT 2000  John Wehle  (john@feith.com)\n \n \t* arm.c (arm_gen_load_multiple, arm_gen_store_mulitple): Don't add\n \tbogus clobber to insns.\n-\t(load_multiple_operation, store_mulitple_operation): Don't check \n+\t(load_multiple_operation, store_mulitple_operation): Don't check\n \tfor it.\n \t* arm.md (ldmsi_postinc, stmsi_postinc): Adjust accordingly.\n \n@@ -3611,7 +3630,7 @@ Sun May  7 00:54:57 EDT 2000  John Wehle  (john@feith.com)\n \t* arm.md (call_value_symbol): Remove predicate from op2.\n \n \t* arm.h (SPECIAL_MODE_PREDICATES): Define.\n-\t\n+\n Sat May  6 06:25:56 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* expr.c (get_subtarget): New function.\n@@ -3634,7 +3653,7 @@ Sat May  6 06:25:56 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t-maix64\tis error.\n \t* rs6000.c (print_operand): Fix lossage typo.\n \t(output_cbranch): Remove \"cr\" decoration for now.\n-\t* rs6000.h (ASM_OUTPUT_DEF_FROM_DECLS): Make alias 'const char *'. \n+\t* rs6000.h (ASM_OUTPUT_DEF_FROM_DECLS): Make alias 'const char *'.\n \n Sat May  6 06:55:32 2000  Denis Chertykov  <denisc@overta.ru>\n \n@@ -3649,7 +3668,7 @@ Sat May  6 06:55:32 2000  Denis Chertykov  <denisc@overta.ru>\n \n \t* c-common.c (decl_attributes):  For TYPE_DECLs attach the\n \tattribute to the decl.\n-\t* c-decl.c (pushdecl): Propagate the USED attribute to the \n+\t* c-decl.c (pushdecl): Propagate the USED attribute to the\n \ttype copy.\n \n 2000-05-05  Richard Henderson  <rth@cygnus.com>\n@@ -3670,7 +3689,7 @@ Sat May  6 06:55:32 2000  Denis Chertykov  <denisc@overta.ru>\n \n Fri May  5 10:29:21 2000  Marc Espie <espie@cvs.openbsd.org>\n \n-\t* config/openbsd.h (LINK_SPEC): pass correct flags to ld \n+\t* config/openbsd.h (LINK_SPEC): pass correct flags to ld\n \tto support -shared, on platforms with dynamic libraries.\n \n Fri May  5 10:27:06 2000  Philippe De Muyter  <phdm@macqel.be>\n@@ -3783,20 +3802,20 @@ Thu May  4 14:37:23 2000  Jeffrey A Law  (law@cygnus.com)\n \n 2000-05-04  Mumit Khan  <khan@xraylith.wisc.edu>\n \n-\t* i386/cygwin.h (CPP_PREDEFINES): Don't define __STDC__. Move \n+\t* i386/cygwin.h (CPP_PREDEFINES): Don't define __STDC__. Move\n \tattribute macros from here ...\n \t(CPP_SPEC): to here.\n \t* i386/mingw32.h (CPP_PREDEFINES): Likewise.\n \t(CPP_SPEC): Likewise.\n-\t* i386/crtdll.h (CPP_PREDEFINES): Delete attribute macros. \n+\t* i386/crtdll.h (CPP_PREDEFINES): Delete attribute macros.\n \n \t* Makefile.in ($(HOST_PREFIX_1)gensupport.o): Add build rule.\n \t(libgcc.a): Pass LIB1ASMSRC to libgcc.mk.\n \n 2000-05-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* bb-reorder.c (get_next_bb_note, get_prev_bb_note): Prototype.\n-\t\n+\n \t* diagnostic (vbuild_message_string, build_message_string,\n \tbuild_location_prefix, output_get_prefix, init_output_buffer,\n \toutput_notice, vline_wrapper_message_with_location,\n@@ -3880,7 +3899,7 @@ Thu May  4 09:45:12 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \tMEM_COPY_ATTRIBUTES.\n \n 2000-05-03  Robert Lipe <robertlipe@usa.net>\n-\t\n+\n \t* configure.in (i[34567]86-*-isc*) [tmake_file]: Add t-i386bare\n \tto suppress libgcc1.\n \t(i[34567]86-*-sco3.2v5*) Likewise.\n@@ -4078,15 +4097,15 @@ Wed May  3 12:40:53 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \t* Makefile.in (HOST_RTL): Depend on gensupport.\n \t(gensupport.o) New rule.\n \t* genattr.c: Use gensupport for reading .md files.\n-\t* genattrtab.c: Ditto. \n-\t* gencodes.c: Ditto. \n-\t* genconfig.c: Ditto. \n-\t* genemit.c: Ditto. \n-\t* genextract.c: Ditto. \n-\t* genflags.c: Ditto. \n-\t* genopinit.c: Ditto. \n-\t* genoutput.c: Ditto. \n-\t* genpeep.c: Ditto. \n+\t* genattrtab.c: Ditto.\n+\t* gencodes.c: Ditto.\n+\t* genconfig.c: Ditto.\n+\t* genemit.c: Ditto.\n+\t* genextract.c: Ditto.\n+\t* genflags.c: Ditto.\n+\t* genopinit.c: Ditto.\n+\t* genoutput.c: Ditto.\n+\t* genpeep.c: Ditto.\n \t* genrecog.c: Ditto.\n \t* rtl.def (define_insn_and_split): New DEF_RTL_EXPR.\n \t* md.texi (Insn Splitting): Document define_insn_and_split.\n@@ -4123,11 +4142,11 @@ Tue May  2 23:38:37 2000  Jason Eckhardt  <jle@cygnus.com>\n \n Tue May  2 18:20:31 2000  Donald Lindsay  <dlindsay@hound.cygnus.com>\n \n-\t* config/mips/mips.c (mips_build_va_list,mips_va_start,mips_va_arg): new \n+\t* config/mips/mips.c (mips_build_va_list,mips_va_start,mips_va_arg): new\n \tABI for varargs, across all MIPS. This is incompatible because the\n \tva_list (__builtin_va_list) structure is different, so a compilation\n \tunit passing a va_list and a compilation unit being passed one, should\n-\tboth be compiled with the same ABI. (The old structure had two \n+\tboth be compiled with the same ABI. (The old structure had two\n \tpointers, now it has three.)\n \n Tue May  2 19:18:43 2000  Jason Eckhardt  <jle@cygnus.com>\n@@ -4208,7 +4227,7 @@ Tue May  2 17:06:53 2000  Jason Eckhardt  <jle@cygnus.com>\n \t* config/ia64/ia64.c (ia64_encode_section_info): Handle the case\n \twhere this function is called for the second time on a decl that\n \thas had its section info changed in such a way as to move it out\n-\tof small data/bss.  \n+\tof small data/bss.\n \t* config/ia64/ia64.h (REDO_SECTION_INFO_P): New definition.\n \n 2000-05-01  Richard Henderson  <rth@cygnus.com>"}, {"sha": "620ed78c67644034ac2fe3c165e496e264569bf9", "filename": "gcc/c-lang.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=7e585d16ce4df23bfd21cf82e58dd323f9939232", "patch": "@@ -171,6 +171,15 @@ build_objc_string (len, str)\n   return NULL_TREE;\n }\n \n+/* Used by c-typeck.c (build_external_ref), but only for objc.  */\n+\n+tree\n+lookup_objc_ivar (id)\n+     tree id ATTRIBUTE_UNUSED;\n+{\n+  return 0;\n+}\n+\n /* Called at end of parsing, but before end-of-file processing.  */\n \n void"}, {"sha": "41a88b0e667ab4ab85e7d904827df365b4fff11f", "filename": "gcc/c-lex.c", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=7e585d16ce4df23bfd21cf82e58dd323f9939232", "patch": "@@ -126,12 +126,6 @@ put_back (ch)\n \n int linemode;\n \n-/* the declaration found for the last IDENTIFIER token read in.\n-   yylex must look this up to detect typedefs, which get token type TYPENAME,\n-   so it is left around in case the identifier is not a typedef but is\n-   used in a context which makes it a reference to a variable.  */\n-tree lastiddecl;\n-\n extern int yydebug;\n \n /* File used for outputting assembler code.  */\n@@ -1400,10 +1394,10 @@ yylex ()\n \t    /* Only return OBJECTNAME if it is a typedef.  */\n \t    if (doing_objc_thang && value == OBJECTNAME)\n \t      {\n-\t\tlastiddecl = lookup_name(yylval.ttype);\n+\t\ttree decl = lookup_name(yylval.ttype);\n \n-\t\tif (lastiddecl == NULL_TREE\n-\t\t    || TREE_CODE (lastiddecl) != TYPE_DECL)\n+\t\tif (decl == NULL_TREE\n+\t\t    || TREE_CODE (decl) != TYPE_DECL)\n \t\t  value = IDENTIFIER;\n \t      }\n \n@@ -1422,24 +1416,26 @@ yylex ()\n \n       if (value == IDENTIFIER)\n \t{\n+\t  tree decl;\n+\n  \t  if (token_buffer[0] == '@')\n \t    error(\"invalid identifier `%s'\", token_buffer);\n \n           yylval.ttype = get_identifier (token_buffer);\n-\t  lastiddecl = lookup_name (yylval.ttype);\n+\t  decl = lookup_name (yylval.ttype);\n \n-\t  if (lastiddecl != 0 && TREE_CODE (lastiddecl) == TYPE_DECL)\n+\t  if (decl != 0 && TREE_CODE (decl) == TYPE_DECL)\n \t    value = TYPENAME;\n \t  /* A user-invisible read-only initialized variable\n \t     should be replaced by its value.\n \t     We handle only strings since that's the only case used in C.  */\n-\t  else if (lastiddecl != 0 && TREE_CODE (lastiddecl) == VAR_DECL\n-\t\t   && DECL_IGNORED_P (lastiddecl)\n-\t\t   && TREE_READONLY (lastiddecl)\n-\t\t   && DECL_INITIAL (lastiddecl) != 0\n-\t\t   && TREE_CODE (DECL_INITIAL (lastiddecl)) == STRING_CST)\n+\t  else if (decl != 0 && TREE_CODE (decl) == VAR_DECL\n+\t\t   && DECL_IGNORED_P (decl)\n+\t\t   && TREE_READONLY (decl)\n+\t\t   && DECL_INITIAL (decl) != 0\n+\t\t   && TREE_CODE (DECL_INITIAL (decl)) == STRING_CST)\n \t    {\n-\t      tree stringval = DECL_INITIAL (lastiddecl);\n+\t      tree stringval = DECL_INITIAL (decl);\n \n \t      /* Copy the string value so that we won't clobber anything\n \t\t if we put something in the TREE_CHAIN of this one.  */"}, {"sha": "532027e7b11ae9281897ef39e922a0f1e9d0f89c", "filename": "gcc/c-lex.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fc-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fc-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.h?ref=7e585d16ce4df23bfd21cf82e58dd323f9939232", "patch": "@@ -69,12 +69,6 @@ enum rid\n    It is indexed by a RID_... value.  */\n extern tree ridpointers[(int) RID_MAX];\n \n-/* the declaration found for the last IDENTIFIER token read in.\n-   yylex must look this up to detect typedefs, which get token type TYPENAME,\n-   so it is left around in case the identifier is not a typedef but is\n-   used in a context which makes it a reference to a variable.  */\n-extern tree lastiddecl;\n-\n extern char *token_buffer;\t/* Pointer to token buffer.  */\n \n extern tree make_pointer_declarator PARAMS ((tree, tree));"}, {"sha": "6d730c83abe4f3dde03e235e0545fa38b960b747", "filename": "gcc/c-parse.c", "status": "modified", "additions": 378, "deletions": 472, "changes": 850, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.c?ref=7e585d16ce4df23bfd21cf82e58dd323f9939232", "patch": "@@ -120,9 +120,6 @@ static tree prefix_attributes = NULL_TREE;\n /* Stack of saved values of current_declspecs and prefix_attributes.  */\n static tree declspec_stack;\n \n-/* 1 if we explained undeclared var errors.  */\n-static int undeclared_variable_notice;\n-\n /* For __extension__, save/restore the warning flags which are\n    controlled by __extension__.  */\n #define SAVE_WARN_FLAGS()\t\\\n@@ -383,47 +380,47 @@ static const short yyrhs[] = {    -1,\n \n #if YYDEBUG != 0\n static const short yyrline[] = { 0,\n-   236,   241,   255,   257,   257,   258,   260,   262,   263,   271,\n-   275,   285,   289,   293,   295,   297,   298,   299,   304,   311,\n-   313,   317,   321,   327,   329,   333,   337,   343,   345,   349,\n-   355,   357,   360,   362,   364,   366,   368,   370,   372,   376,\n-   380,   383,   386,   389,   393,   395,   398,   401,   405,   433,\n-   439,   442,   445,   448,   450,   452,   456,   460,   464,   466,\n-   469,   473,   500,   502,   504,   506,   508,   510,   512,   514,\n-   516,   518,   520,   522,   524,   526,   530,   532,   536,   538,\n-   541,   545,   547,   554,   557,   565,   576,   674,   675,   677,\n-   683,   685,   708,   717,   719,   721,   725,   731,   733,   738,\n-   740,   748,   750,   751,   761,   766,   768,   769,   770,   777,\n-   782,   786,   789,   797,   802,   804,   805,   806,   813,   823,\n-   827,   832,   836,   840,   844,   846,   848,   857,   860,   864,\n-   866,   868,   873,   877,   880,   884,   887,   889,   901,   904,\n-   906,   908,   912,   916,   918,   921,   934,   937,   941,   943,\n-   951,   952,   953,   957,   959,   965,   966,   967,   970,   972,\n-   975,   977,   980,   983,   989,   996,   998,  1005,  1012,  1015,\n-  1022,  1025,  1029,  1032,  1036,  1041,  1044,  1048,  1051,  1053,\n-  1055,  1057,  1064,  1066,  1067,  1068,  1073,  1075,  1077,  1079,\n-  1084,  1088,  1091,  1093,  1098,  1100,  1101,  1104,  1104,  1107,\n-  1110,  1112,  1114,  1117,  1119,  1122,  1128,  1130,  1134,  1148,\n-  1156,  1160,  1174,  1182,  1189,  1191,  1196,  1199,  1204,  1206,\n-  1208,  1215,  1217,  1225,  1231,  1236,  1238,  1240,  1247,  1249,\n-  1255,  1261,  1263,  1265,  1270,  1272,  1279,  1281,  1284,  1287,\n-  1291,  1294,  1298,  1301,  1305,  1310,  1312,  1316,  1318,  1320,\n-  1322,  1326,  1328,  1330,  1333,  1335,  1338,  1342,  1344,  1347,\n-  1349,  1354,  1357,  1362,  1364,  1366,  1380,  1386,  1399,  1404,\n-  1409,  1411,  1416,  1418,  1422,  1426,  1430,  1440,  1442,  1447,\n-  1452,  1455,  1459,  1462,  1466,  1469,  1472,  1475,  1479,  1482,\n-  1486,  1490,  1492,  1494,  1496,  1498,  1500,  1502,  1504,  1508,\n-  1516,  1524,  1526,  1528,  1532,  1534,  1537,  1540,  1550,  1552,\n-  1557,  1559,  1562,  1576,  1579,  1582,  1584,  1586,  1590,  1594,\n-  1600,  1618,  1623,  1628,  1631,  1645,  1654,  1658,  1662,  1666,\n-  1672,  1676,  1681,  1684,  1689,  1692,  1693,  1709,  1714,  1717,\n-  1729,  1731,  1741,  1751,  1752,  1759,  1761,  1773,  1777,  1791,\n-  1797,  1803,  1804,  1809,  1814,  1818,  1822,  1833,  1840,  1847,\n-  1854,  1865,  1871,  1874,  1879,  1902,  1932,  1963,  1994,  2009,\n-  2023,  2027,  2031,  2034,  2039,  2041,  2044,  2046,  2050,  2055,\n-  2058,  2064,  2069,  2074,  2076,  2085,  2086,  2092,  2094,  2104,\n-  2106,  2110,  2113,  2119,  2128,  2136,  2144,  2153,  2166,  2171,\n-  2176,  2178,  2187,  2190,  2195,  2198,  2202\n+   233,   238,   252,   254,   254,   255,   257,   259,   260,   268,\n+   272,   282,   286,   290,   292,   294,   295,   296,   301,   308,\n+   310,   314,   318,   324,   326,   330,   334,   340,   342,   346,\n+   352,   354,   357,   359,   361,   363,   365,   367,   369,   373,\n+   377,   380,   383,   386,   390,   392,   395,   398,   402,   430,\n+   436,   439,   442,   445,   447,   449,   453,   457,   461,   463,\n+   466,   470,   497,   499,   501,   503,   505,   507,   509,   511,\n+   513,   515,   517,   519,   521,   523,   527,   529,   533,   535,\n+   538,   542,   544,   551,   554,   562,   573,   580,   581,   583,\n+   589,   591,   614,   623,   625,   627,   631,   637,   639,   644,\n+   646,   654,   656,   657,   667,   672,   674,   675,   676,   683,\n+   688,   692,   695,   703,   708,   710,   711,   712,   719,   729,\n+   733,   738,   742,   746,   750,   752,   754,   763,   766,   770,\n+   772,   774,   779,   783,   786,   790,   793,   795,   807,   810,\n+   812,   814,   818,   822,   824,   827,   840,   843,   847,   849,\n+   857,   858,   859,   863,   865,   871,   872,   873,   876,   878,\n+   881,   883,   886,   889,   895,   902,   904,   911,   918,   921,\n+   928,   931,   935,   938,   942,   947,   950,   954,   957,   959,\n+   961,   963,   970,   972,   973,   974,   979,   981,   983,   985,\n+   990,   994,   997,   999,  1004,  1006,  1007,  1010,  1010,  1013,\n+  1016,  1018,  1020,  1023,  1025,  1028,  1034,  1036,  1040,  1054,\n+  1062,  1066,  1080,  1088,  1095,  1097,  1102,  1105,  1110,  1112,\n+  1114,  1121,  1123,  1131,  1137,  1142,  1144,  1146,  1153,  1155,\n+  1161,  1167,  1169,  1171,  1176,  1178,  1185,  1187,  1190,  1193,\n+  1197,  1200,  1204,  1207,  1211,  1216,  1218,  1222,  1224,  1226,\n+  1228,  1232,  1234,  1236,  1239,  1241,  1244,  1248,  1250,  1253,\n+  1255,  1260,  1263,  1268,  1270,  1272,  1286,  1292,  1305,  1310,\n+  1315,  1317,  1322,  1324,  1328,  1332,  1336,  1346,  1348,  1353,\n+  1358,  1361,  1365,  1368,  1372,  1375,  1378,  1381,  1385,  1388,\n+  1392,  1396,  1398,  1400,  1402,  1404,  1406,  1408,  1410,  1414,\n+  1422,  1430,  1432,  1434,  1438,  1440,  1443,  1446,  1456,  1458,\n+  1463,  1465,  1468,  1482,  1485,  1488,  1490,  1492,  1496,  1500,\n+  1506,  1524,  1529,  1534,  1537,  1551,  1560,  1564,  1568,  1572,\n+  1578,  1582,  1587,  1590,  1595,  1598,  1599,  1615,  1620,  1623,\n+  1635,  1637,  1647,  1657,  1658,  1665,  1667,  1679,  1683,  1697,\n+  1703,  1709,  1710,  1715,  1720,  1724,  1728,  1739,  1746,  1753,\n+  1760,  1771,  1777,  1780,  1785,  1808,  1838,  1869,  1900,  1915,\n+  1929,  1933,  1937,  1940,  1945,  1947,  1950,  1952,  1956,  1961,\n+  1964,  1970,  1975,  1980,  1982,  1991,  1992,  1998,  2000,  2010,\n+  2012,  2016,  2019,  2025,  2034,  2042,  2050,  2059,  2072,  2077,\n+  2082,  2084,  2093,  2096,  2101,  2104,  2108\n };\n #endif\n \n@@ -1274,7 +1271,7 @@ static const short yycheck[] = {    38,\n     48,    49,    50,    51,    52,    53,    54,    55,    56,    57\n };\n /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */\n-#line 3 \"/usr/lib/bison.simple\"\n+#line 3 \"/usr/share/misc/bison.simple\"\n /* This file comes from bison-1.28.  */\n \n /* Skeleton output parser for bison,\n@@ -1488,7 +1485,7 @@ __yy_memcpy (char *to, char *from, unsigned int count)\n #endif\n #endif\n \f\n-#line 217 \"/usr/lib/bison.simple\"\n+#line 217 \"/usr/share/misc/bison.simple\"\n \n /* The user can define YYPARSE_PARAM as the name of an argument to be passed\n    into yyparse.  The argument should have type void *.\n@@ -1817,14 +1814,14 @@ yyparse(YYPARSE_PARAM_ARG)\n   switch (yyn) {\n \n case 1:\n-#line 237 \"c-parse.y\"\n+#line 234 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids an empty source file\");\n \t\t  finish_file ();\n \t\t;\n     break;}\n case 2:\n-#line 242 \"c-parse.y\"\n+#line 239 \"c-parse.y\"\n {\n \t\t  /* In case there were missing closebraces,\n \t\t     get us back to the global binding level.  */\n@@ -1834,15 +1831,15 @@ case 2:\n \t\t;\n     break;}\n case 3:\n-#line 256 \"c-parse.y\"\n+#line 253 \"c-parse.y\"\n {yyval.ttype = NULL_TREE; ;\n     break;}\n case 5:\n-#line 257 \"c-parse.y\"\n+#line 254 \"c-parse.y\"\n {yyval.ttype = NULL_TREE; ;\n     break;}\n case 9:\n-#line 264 \"c-parse.y\"\n+#line 261 \"c-parse.y\"\n { STRIP_NOPS (yyvsp[-2].ttype);\n \t\t  if ((TREE_CODE (yyvsp[-2].ttype) == ADDR_EXPR\n \t\t       && TREE_CODE (TREE_OPERAND (yyvsp[-2].ttype, 0)) == STRING_CST)\n@@ -1852,11 +1849,11 @@ case 9:\n \t\t    error (\"argument of `asm' is not a constant string\"); ;\n     break;}\n case 10:\n-#line 272 \"c-parse.y\"\n+#line 269 \"c-parse.y\"\n { RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;\n     break;}\n case 11:\n-#line 277 \"c-parse.y\"\n+#line 274 \"c-parse.y\"\n { if (pedantic)\n \t\t    error (\"ANSI C forbids data definition with no type or storage class\");\n \t\t  else if (!flag_traditional)\n@@ -1867,162 +1864,162 @@ case 11:\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 12:\n-#line 286 \"c-parse.y\"\n+#line 283 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 13:\n-#line 290 \"c-parse.y\"\n+#line 287 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 14:\n-#line 294 \"c-parse.y\"\n+#line 291 \"c-parse.y\"\n { pedwarn (\"empty declaration\"); ;\n     break;}\n case 15:\n-#line 296 \"c-parse.y\"\n+#line 293 \"c-parse.y\"\n { shadow_tag (yyvsp[-1].ttype); ;\n     break;}\n case 18:\n-#line 300 \"c-parse.y\"\n+#line 297 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C does not allow extra `;' outside of a function\"); ;\n     break;}\n case 19:\n-#line 306 \"c-parse.y\"\n+#line 303 \"c-parse.y\"\n { if (! start_function (current_declspecs, yyvsp[0].ttype,\n \t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); ;\n     break;}\n case 20:\n-#line 311 \"c-parse.y\"\n+#line 308 \"c-parse.y\"\n { store_parm_decls (); ;\n     break;}\n case 21:\n-#line 313 \"c-parse.y\"\n+#line 310 \"c-parse.y\"\n { finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 22:\n-#line 318 \"c-parse.y\"\n+#line 315 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 23:\n-#line 322 \"c-parse.y\"\n+#line 319 \"c-parse.y\"\n { if (! start_function (current_declspecs, yyvsp[0].ttype,\n \t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); ;\n     break;}\n case 24:\n-#line 327 \"c-parse.y\"\n+#line 324 \"c-parse.y\"\n { store_parm_decls (); ;\n     break;}\n case 25:\n-#line 329 \"c-parse.y\"\n+#line 326 \"c-parse.y\"\n { finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 26:\n-#line 334 \"c-parse.y\"\n+#line 331 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 27:\n-#line 338 \"c-parse.y\"\n+#line 335 \"c-parse.y\"\n { if (! start_function (NULL_TREE, yyvsp[0].ttype,\n \t\t\t\t\tprefix_attributes, NULL_TREE))\n \t\t    YYERROR1;\n \t\t  reinit_parse_for_function (); ;\n     break;}\n case 28:\n-#line 343 \"c-parse.y\"\n+#line 340 \"c-parse.y\"\n { store_parm_decls (); ;\n     break;}\n case 29:\n-#line 345 \"c-parse.y\"\n+#line 342 \"c-parse.y\"\n { finish_function (0); \n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 30:\n-#line 350 \"c-parse.y\"\n+#line 347 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 33:\n-#line 361 \"c-parse.y\"\n+#line 358 \"c-parse.y\"\n { yyval.code = ADDR_EXPR; ;\n     break;}\n case 34:\n-#line 363 \"c-parse.y\"\n+#line 360 \"c-parse.y\"\n { yyval.code = NEGATE_EXPR; ;\n     break;}\n case 35:\n-#line 365 \"c-parse.y\"\n+#line 362 \"c-parse.y\"\n { yyval.code = CONVERT_EXPR; ;\n     break;}\n case 36:\n-#line 367 \"c-parse.y\"\n+#line 364 \"c-parse.y\"\n { yyval.code = PREINCREMENT_EXPR; ;\n     break;}\n case 37:\n-#line 369 \"c-parse.y\"\n+#line 366 \"c-parse.y\"\n { yyval.code = PREDECREMENT_EXPR; ;\n     break;}\n case 38:\n-#line 371 \"c-parse.y\"\n+#line 368 \"c-parse.y\"\n { yyval.code = BIT_NOT_EXPR; ;\n     break;}\n case 39:\n-#line 373 \"c-parse.y\"\n+#line 370 \"c-parse.y\"\n { yyval.code = TRUTH_NOT_EXPR; ;\n     break;}\n case 40:\n-#line 377 \"c-parse.y\"\n+#line 374 \"c-parse.y\"\n { yyval.ttype = build_compound_expr (yyvsp[0].ttype); ;\n     break;}\n case 41:\n-#line 382 \"c-parse.y\"\n+#line 379 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 43:\n-#line 388 \"c-parse.y\"\n+#line 385 \"c-parse.y\"\n { yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 44:\n-#line 390 \"c-parse.y\"\n+#line 387 \"c-parse.y\"\n { chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;\n     break;}\n case 46:\n-#line 396 \"c-parse.y\"\n+#line 393 \"c-parse.y\"\n { yyval.ttype = build_indirect_ref (yyvsp[0].ttype, \"unary *\"); ;\n     break;}\n case 47:\n-#line 399 \"c-parse.y\"\n+#line 396 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;\n     break;}\n case 48:\n-#line 402 \"c-parse.y\"\n+#line 399 \"c-parse.y\"\n { yyval.ttype = build_unary_op (yyvsp[-1].code, yyvsp[0].ttype, 0);\n \t\t  overflow_warning (yyval.ttype); ;\n     break;}\n case 49:\n-#line 406 \"c-parse.y\"\n+#line 403 \"c-parse.y\"\n { tree label = lookup_label (yyvsp[0].ttype);\n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids `&&'\");\n@@ -2037,61 +2034,61 @@ case 49:\n \t\t;\n     break;}\n case 50:\n-#line 434 \"c-parse.y\"\n+#line 431 \"c-parse.y\"\n { skip_evaluation--;\n \t\t  if (TREE_CODE (yyvsp[0].ttype) == COMPONENT_REF\n \t\t      && DECL_C_BIT_FIELD (TREE_OPERAND (yyvsp[0].ttype, 1)))\n \t\t    error (\"`sizeof' applied to a bit-field\");\n \t\t  yyval.ttype = c_sizeof (TREE_TYPE (yyvsp[0].ttype)); ;\n     break;}\n case 51:\n-#line 440 \"c-parse.y\"\n+#line 437 \"c-parse.y\"\n { skip_evaluation--;\n \t\t  yyval.ttype = c_sizeof (groktypename (yyvsp[-1].ttype)); ;\n     break;}\n case 52:\n-#line 443 \"c-parse.y\"\n+#line 440 \"c-parse.y\"\n { skip_evaluation--;\n \t\t  yyval.ttype = c_alignof_expr (yyvsp[0].ttype); ;\n     break;}\n case 53:\n-#line 446 \"c-parse.y\"\n+#line 443 \"c-parse.y\"\n { skip_evaluation--;\n \t\t  yyval.ttype = c_alignof (groktypename (yyvsp[-1].ttype)); ;\n     break;}\n case 54:\n-#line 449 \"c-parse.y\"\n+#line 446 \"c-parse.y\"\n { yyval.ttype = build_unary_op (REALPART_EXPR, yyvsp[0].ttype, 0); ;\n     break;}\n case 55:\n-#line 451 \"c-parse.y\"\n+#line 448 \"c-parse.y\"\n { yyval.ttype = build_unary_op (IMAGPART_EXPR, yyvsp[0].ttype, 0); ;\n     break;}\n case 56:\n-#line 453 \"c-parse.y\"\n+#line 450 \"c-parse.y\"\n { yyval.ttype = build_va_arg (yyvsp[-3].ttype, groktypename (yyvsp[-1].ttype)); ;\n     break;}\n case 57:\n-#line 457 \"c-parse.y\"\n+#line 454 \"c-parse.y\"\n { skip_evaluation++; ;\n     break;}\n case 58:\n-#line 461 \"c-parse.y\"\n+#line 458 \"c-parse.y\"\n { skip_evaluation++; ;\n     break;}\n case 60:\n-#line 467 \"c-parse.y\"\n+#line 464 \"c-parse.y\"\n { tree type = groktypename (yyvsp[-2].ttype);\n \t\t  yyval.ttype = build_c_cast (type, yyvsp[0].ttype); ;\n     break;}\n case 61:\n-#line 470 \"c-parse.y\"\n+#line 467 \"c-parse.y\"\n { start_init (NULL_TREE, NULL, 0);\n \t\t  yyvsp[-2].ttype = groktypename (yyvsp[-2].ttype);\n \t\t  really_start_incremental_init (yyvsp[-2].ttype); ;\n     break;}\n case 62:\n-#line 474 \"c-parse.y\"\n+#line 471 \"c-parse.y\"\n { const char *name;\n \t\t  tree result = pop_init_level (0);\n \t\t  tree type = yyvsp[-5].ttype;\n@@ -2118,90 +2115,90 @@ case 62:\n \t\t;\n     break;}\n case 64:\n-#line 503 \"c-parse.y\"\n+#line 500 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 65:\n-#line 505 \"c-parse.y\"\n+#line 502 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 66:\n-#line 507 \"c-parse.y\"\n+#line 504 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 67:\n-#line 509 \"c-parse.y\"\n+#line 506 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 68:\n-#line 511 \"c-parse.y\"\n+#line 508 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 69:\n-#line 513 \"c-parse.y\"\n+#line 510 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 70:\n-#line 515 \"c-parse.y\"\n+#line 512 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 71:\n-#line 517 \"c-parse.y\"\n+#line 514 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 72:\n-#line 519 \"c-parse.y\"\n+#line 516 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 73:\n-#line 521 \"c-parse.y\"\n+#line 518 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 74:\n-#line 523 \"c-parse.y\"\n+#line 520 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 75:\n-#line 525 \"c-parse.y\"\n+#line 522 \"c-parse.y\"\n { yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 76:\n-#line 527 \"c-parse.y\"\n+#line 524 \"c-parse.y\"\n { yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));\n \t\t  skip_evaluation += yyvsp[-1].ttype == boolean_false_node; ;\n     break;}\n case 77:\n-#line 530 \"c-parse.y\"\n+#line 527 \"c-parse.y\"\n { skip_evaluation -= yyvsp[-3].ttype == boolean_false_node;\n \t\t  yyval.ttype = parser_build_binary_op (TRUTH_ANDIF_EXPR, yyvsp[-3].ttype, yyvsp[0].ttype); ;\n     break;}\n case 78:\n-#line 533 \"c-parse.y\"\n+#line 530 \"c-parse.y\"\n { yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));\n \t\t  skip_evaluation += yyvsp[-1].ttype == boolean_true_node; ;\n     break;}\n case 79:\n-#line 536 \"c-parse.y\"\n+#line 533 \"c-parse.y\"\n { skip_evaluation -= yyvsp[-3].ttype == boolean_true_node;\n \t\t  yyval.ttype = parser_build_binary_op (TRUTH_ORIF_EXPR, yyvsp[-3].ttype, yyvsp[0].ttype); ;\n     break;}\n case 80:\n-#line 539 \"c-parse.y\"\n+#line 536 \"c-parse.y\"\n { yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));\n \t\t  skip_evaluation += yyvsp[-1].ttype == boolean_false_node; ;\n     break;}\n case 81:\n-#line 542 \"c-parse.y\"\n+#line 539 \"c-parse.y\"\n { skip_evaluation += ((yyvsp[-4].ttype == boolean_true_node)\n \t\t\t\t      - (yyvsp[-4].ttype == boolean_false_node)); ;\n     break;}\n case 82:\n-#line 545 \"c-parse.y\"\n+#line 542 \"c-parse.y\"\n { skip_evaluation -= yyvsp[-6].ttype == boolean_true_node;\n \t\t  yyval.ttype = build_conditional_expr (yyvsp[-6].ttype, yyvsp[-3].ttype, yyvsp[0].ttype); ;\n     break;}\n case 83:\n-#line 548 \"c-parse.y\"\n+#line 545 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids omitting the middle term of a ?: expression\");\n \t\t  /* Make sure first operand is calculated only once.  */\n@@ -2210,12 +2207,12 @@ case 83:\n \t\t  skip_evaluation += yyvsp[-1].ttype == boolean_true_node; ;\n     break;}\n case 84:\n-#line 555 \"c-parse.y\"\n+#line 552 \"c-parse.y\"\n { skip_evaluation -= yyvsp[-4].ttype == boolean_true_node;\n \t\t  yyval.ttype = build_conditional_expr (yyvsp[-4].ttype, yyvsp[-3].ttype, yyvsp[0].ttype); ;\n     break;}\n case 85:\n-#line 558 \"c-parse.y\"\n+#line 555 \"c-parse.y\"\n { char class;\n \t\t  yyval.ttype = build_modify_expr (yyvsp[-2].ttype, NOP_EXPR, yyvsp[0].ttype);\n \t\t  class = TREE_CODE_CLASS (TREE_CODE (yyval.ttype));\n@@ -2225,7 +2222,7 @@ case 85:\n \t\t;\n     break;}\n case 86:\n-#line 566 \"c-parse.y\"\n+#line 563 \"c-parse.y\"\n { char class;\n \t\t  yyval.ttype = build_modify_expr (yyvsp[-2].ttype, yyvsp[-1].code, yyvsp[0].ttype);\n \t\t  /* This inhibits warnings in truthvalue_conversion.  */\n@@ -2236,122 +2233,31 @@ case 86:\n \t\t;\n     break;}\n case 87:\n-#line 578 \"c-parse.y\"\n+#line 575 \"c-parse.y\"\n {\n-\t\t  yyval.ttype = lastiddecl;\n-\t\t  if (!yyval.ttype || yyval.ttype == error_mark_node)\n-\t\t    {\n-\t\t      if (yychar == YYEMPTY)\n-\t\t\tyychar = YYLEX;\n-\t\t      if (yychar == '(')\n-\t\t\t{\n-\t\t\t    {\n-\t\t\t      /* Ordinary implicit function declaration.  */\n-\t\t\t      yyval.ttype = implicitly_declare (yyvsp[0].ttype);\n-\t\t\t      assemble_external (yyval.ttype);\n-\t\t\t      TREE_USED (yyval.ttype) = 1;\n-\t\t\t    }\n-\t\t\t}\n-\t\t      else if (current_function_decl == 0)\n-\t\t\t{\n-\t\t\t  error (\"`%s' undeclared here (not in a function)\",\n-\t\t\t\t IDENTIFIER_POINTER (yyvsp[0].ttype));\n-\t\t\t  yyval.ttype = error_mark_node;\n-\t\t\t}\n-\t\t      else\n-\t\t\t{\n-\t\t\t    {\n-\t\t\t      if (IDENTIFIER_GLOBAL_VALUE (yyvsp[0].ttype) != error_mark_node\n-\t\t\t\t  || IDENTIFIER_ERROR_LOCUS (yyvsp[0].ttype) != current_function_decl)\n-\t\t\t\t{\n-\t\t\t\t  error (\"`%s' undeclared (first use in this function)\",\n-\t\t\t\t\t IDENTIFIER_POINTER (yyvsp[0].ttype));\n-\n-\t\t\t\t  if (! undeclared_variable_notice)\n-\t\t\t\t    {\n-\t\t\t\t      error (\"(Each undeclared identifier is reported only once\");\n-\t\t\t\t      error (\"for each function it appears in.)\");\n-\t\t\t\t      undeclared_variable_notice = 1;\n-\t\t\t\t    }\n-\t\t\t\t}\n-\t\t\t      yyval.ttype = error_mark_node;\n-\t\t\t      /* Prevent repeated error messages.  */\n-\t\t\t      IDENTIFIER_GLOBAL_VALUE (yyvsp[0].ttype) = error_mark_node;\n-\t\t\t      IDENTIFIER_ERROR_LOCUS (yyvsp[0].ttype) = current_function_decl;\n-\t\t\t    }\n-\t\t\t}\n-\t\t    }\n-\t\t  else if (TREE_TYPE (yyval.ttype) == error_mark_node)\n-\t\t    yyval.ttype = error_mark_node;\n-\t\t  else if (C_DECL_ANTICIPATED (yyval.ttype))\n-\t\t    {\n-\t\t      /* The first time we see a build-in function used,\n-\t\t\t if it has not been declared.  */\n-\t\t      C_DECL_ANTICIPATED (yyval.ttype) = 0;\n-\t\t      if (yychar == YYEMPTY)\n-\t\t\tyychar = YYLEX;\n-\t\t      if (yychar == '(')\n-\t\t\t{\n-\t\t\t  /* Omit the implicit declaration we\n-\t\t\t     would ordinarily do, so we don't lose\n-\t\t\t     the actual built in type.\n-\t\t\t     But print a diagnostic for the mismatch.  */\n-\t\t\t    if (TREE_CODE (yyval.ttype) != FUNCTION_DECL)\n-\t\t\t      error (\"`%s' implicitly declared as function\",\n-\t\t\t\t     IDENTIFIER_POINTER (DECL_NAME (yyval.ttype)));\n-\t\t\t  else if ((TYPE_MODE (TREE_TYPE (TREE_TYPE (yyval.ttype)))\n-\t\t\t\t    != TYPE_MODE (integer_type_node))\n-\t\t\t\t   && !VOID_TYPE_P (TREE_TYPE (TREE_TYPE (yyval.ttype))))\n-\t\t\t    pedwarn (\"type mismatch in implicit declaration for built-in function `%s'\",\n-\t\t\t\t     IDENTIFIER_POINTER (DECL_NAME (yyval.ttype)));\n-\t\t\t  /* If it really returns void, change that to int.  */\n-\t\t\t  if (TREE_TYPE (TREE_TYPE (yyval.ttype)) == void_type_node)\n-\t\t\t    TREE_TYPE (yyval.ttype)\n-\t\t\t      = build_function_type (integer_type_node,\n-\t\t\t\t\t\t     TYPE_ARG_TYPES (TREE_TYPE (yyval.ttype)));\n-\t\t\t}\n-\t\t      else\n-\t\t\tpedwarn (\"built-in function `%s' used without declaration\",\n-\t\t\t\t IDENTIFIER_POINTER (DECL_NAME (yyval.ttype)));\n-\n-\t\t      /* Do what we would ordinarily do when a fn is used.  */\n-\t\t      assemble_external (yyval.ttype);\n-\t\t      TREE_USED (yyval.ttype) = 1;\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      assemble_external (yyval.ttype);\n-\t\t      TREE_USED (yyval.ttype) = 1;\n-\t\t    }\n-\n-\t\t  if (TREE_CODE (yyval.ttype) == CONST_DECL)\n-\t\t    {\n-\t\t      yyval.ttype = DECL_INITIAL (yyval.ttype);\n-\t\t      /* This is to prevent an enum whose value is 0\n-\t\t\t from being considered a null pointer constant.  */\n-\t\t      yyval.ttype = build1 (NOP_EXPR, TREE_TYPE (yyval.ttype), yyval.ttype);\n-\t\t      TREE_CONSTANT (yyval.ttype) = 1;\n-\t\t    }\n+\t\t  if (yychar == YYEMPTY)\n+\t\t    yychar = YYLEX;\n+\t\t  yyval.ttype = build_external_ref (yyvsp[0].ttype, yychar == '(');\n \t\t;\n     break;}\n case 89:\n-#line 676 \"c-parse.y\"\n+#line 582 \"c-parse.y\"\n { yyval.ttype = combine_strings (yyvsp[0].ttype); ;\n     break;}\n case 90:\n-#line 678 \"c-parse.y\"\n+#line 584 \"c-parse.y\"\n { char class = TREE_CODE_CLASS (TREE_CODE (yyvsp[-1].ttype));\n \t\t  if (class == 'e' || class == '1'\n \t\t      || class == '2' || class == '<')\n \t\t    C_SET_EXP_ORIGINAL_CODE (yyvsp[-1].ttype, ERROR_MARK);\n \t\t  yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 91:\n-#line 684 \"c-parse.y\"\n+#line 590 \"c-parse.y\"\n { yyval.ttype = error_mark_node; ;\n     break;}\n case 92:\n-#line 686 \"c-parse.y\"\n+#line 592 \"c-parse.y\"\n { tree rtl_exp;\n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids braced-groups within expressions\");\n@@ -2376,7 +2282,7 @@ case 92:\n \t\t;\n     break;}\n case 93:\n-#line 709 \"c-parse.y\"\n+#line 615 \"c-parse.y\"\n {\n \t\t  /* Make sure we call expand_end_stmt_expr.  Otherwise\n \t\t     we are likely to lose sequences and crash later.  */\n@@ -2387,79 +2293,79 @@ case 93:\n \t\t;\n     break;}\n case 94:\n-#line 718 \"c-parse.y\"\n+#line 624 \"c-parse.y\"\n { yyval.ttype = build_function_call (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 95:\n-#line 720 \"c-parse.y\"\n+#line 626 \"c-parse.y\"\n { yyval.ttype = build_array_ref (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 96:\n-#line 722 \"c-parse.y\"\n+#line 628 \"c-parse.y\"\n {\n \t\t    yyval.ttype = build_component_ref (yyvsp[-2].ttype, yyvsp[0].ttype);\n \t\t;\n     break;}\n case 97:\n-#line 726 \"c-parse.y\"\n+#line 632 \"c-parse.y\"\n {\n                   tree expr = build_indirect_ref (yyvsp[-2].ttype, \"->\");\n \n                     yyval.ttype = build_component_ref (expr, yyvsp[0].ttype);\n \t\t;\n     break;}\n case 98:\n-#line 732 \"c-parse.y\"\n+#line 638 \"c-parse.y\"\n { yyval.ttype = build_unary_op (POSTINCREMENT_EXPR, yyvsp[-1].ttype, 0); ;\n     break;}\n case 99:\n-#line 734 \"c-parse.y\"\n+#line 640 \"c-parse.y\"\n { yyval.ttype = build_unary_op (POSTDECREMENT_EXPR, yyvsp[-1].ttype, 0); ;\n     break;}\n case 101:\n-#line 741 \"c-parse.y\"\n+#line 647 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  if (warn_traditional && !in_system_header)\n \t\t    warning (\"Use of ANSI string concatenation\");\n \t\t;\n     break;}\n case 104:\n-#line 753 \"c-parse.y\"\n+#line 659 \"c-parse.y\"\n { c_mark_varargs ();\n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C does not permit use of `varargs.h'\"); ;\n     break;}\n case 105:\n-#line 763 \"c-parse.y\"\n+#line 669 \"c-parse.y\"\n { ;\n     break;}\n case 110:\n-#line 779 \"c-parse.y\"\n+#line 685 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 111:\n-#line 783 \"c-parse.y\"\n+#line 689 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\t\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 112:\n-#line 787 \"c-parse.y\"\n+#line 693 \"c-parse.y\"\n { shadow_tag_warned (yyvsp[-1].ttype, 1);\n \t\t  pedwarn (\"empty declaration\"); ;\n     break;}\n case 113:\n-#line 790 \"c-parse.y\"\n+#line 696 \"c-parse.y\"\n { pedwarn (\"empty declaration\"); ;\n     break;}\n case 114:\n-#line 799 \"c-parse.y\"\n+#line 705 \"c-parse.y\"\n { ;\n     break;}\n case 119:\n-#line 814 \"c-parse.y\"\n+#line 720 \"c-parse.y\"\n { pending_xref_error ();\n \t\t  declspec_stack = tree_cons (prefix_attributes,\n \t\t\t\t\t      current_declspecs,\n@@ -2468,304 +2374,304 @@ case 119:\n \t\t\t\t     &current_declspecs, &prefix_attributes); ;\n     break;}\n case 120:\n-#line 824 \"c-parse.y\"\n+#line 730 \"c-parse.y\"\n { prefix_attributes = chainon (prefix_attributes, yyvsp[0].ttype); ;\n     break;}\n case 121:\n-#line 829 \"c-parse.y\"\n+#line 735 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 122:\n-#line 833 \"c-parse.y\"\n+#line 739 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 123:\n-#line 837 \"c-parse.y\"\n+#line 743 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 124:\n-#line 841 \"c-parse.y\"\n+#line 747 \"c-parse.y\"\n { current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 125:\n-#line 845 \"c-parse.y\"\n+#line 751 \"c-parse.y\"\n { shadow_tag (yyvsp[-1].ttype); ;\n     break;}\n case 126:\n-#line 847 \"c-parse.y\"\n+#line 753 \"c-parse.y\"\n { pedwarn (\"empty declaration\"); ;\n     break;}\n case 127:\n-#line 849 \"c-parse.y\"\n+#line 755 \"c-parse.y\"\n { RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;\n     break;}\n case 128:\n-#line 859 \"c-parse.y\"\n+#line 765 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 129:\n-#line 861 \"c-parse.y\"\n+#line 767 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[0].ttype, tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[-2].ttype)); ;\n     break;}\n case 130:\n-#line 865 \"c-parse.y\"\n+#line 771 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 131:\n-#line 867 \"c-parse.y\"\n+#line 773 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 132:\n-#line 869 \"c-parse.y\"\n+#line 775 \"c-parse.y\"\n { if (extra_warnings)\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER (yyvsp[0].ttype));\n \t\t  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 133:\n-#line 874 \"c-parse.y\"\n+#line 780 \"c-parse.y\"\n { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 134:\n-#line 879 \"c-parse.y\"\n+#line 785 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 135:\n-#line 881 \"c-parse.y\"\n+#line 787 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[0].ttype, tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[-2].ttype)); ;\n     break;}\n case 136:\n-#line 886 \"c-parse.y\"\n+#line 792 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 137:\n-#line 888 \"c-parse.y\"\n+#line 794 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 138:\n-#line 890 \"c-parse.y\"\n+#line 796 \"c-parse.y\"\n { if (extra_warnings)\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER (yyvsp[0].ttype));\n \t\t  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 139:\n-#line 903 \"c-parse.y\"\n+#line 809 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 140:\n-#line 905 \"c-parse.y\"\n+#line 811 \"c-parse.y\"\n { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, NULL_TREE); ;\n     break;}\n case 141:\n-#line 907 \"c-parse.y\"\n+#line 813 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 142:\n-#line 909 \"c-parse.y\"\n+#line 815 \"c-parse.y\"\n { yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 143:\n-#line 914 \"c-parse.y\"\n+#line 820 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE);\n \t\t  TREE_STATIC (yyval.ttype) = 1; ;\n     break;}\n case 144:\n-#line 917 \"c-parse.y\"\n+#line 823 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 145:\n-#line 919 \"c-parse.y\"\n+#line 825 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);\n \t\t  TREE_STATIC (yyval.ttype) = 1; ;\n     break;}\n case 146:\n-#line 922 \"c-parse.y\"\n+#line 828 \"c-parse.y\"\n { if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER (yyvsp[0].ttype));\n \t\t  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);\n \t\t  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;\n     break;}\n case 147:\n-#line 936 \"c-parse.y\"\n+#line 842 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 148:\n-#line 938 \"c-parse.y\"\n+#line 844 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[0].ttype, tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[-2].ttype)); ;\n     break;}\n case 149:\n-#line 942 \"c-parse.y\"\n+#line 848 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 150:\n-#line 944 \"c-parse.y\"\n+#line 850 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 153:\n-#line 954 \"c-parse.y\"\n+#line 860 \"c-parse.y\"\n { /* For a typedef name, record the meaning, not the name.\n \t\t     In case of `foo foo, bar;'.  */\n \t\t  yyval.ttype = lookup_name (yyvsp[0].ttype); ;\n     break;}\n case 154:\n-#line 958 \"c-parse.y\"\n+#line 864 \"c-parse.y\"\n { yyval.ttype = TREE_TYPE (yyvsp[-1].ttype); ;\n     break;}\n case 155:\n-#line 960 \"c-parse.y\"\n+#line 866 \"c-parse.y\"\n { yyval.ttype = groktypename (yyvsp[-1].ttype); ;\n     break;}\n case 163:\n-#line 982 \"c-parse.y\"\n+#line 888 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 164:\n-#line 984 \"c-parse.y\"\n+#line 890 \"c-parse.y\"\n { if (TREE_CHAIN (yyvsp[-1].ttype)) yyvsp[-1].ttype = combine_strings (yyvsp[-1].ttype);\n \t\t  yyval.ttype = yyvsp[-1].ttype;\n \t\t;\n     break;}\n case 165:\n-#line 991 \"c-parse.y\"\n+#line 897 \"c-parse.y\"\n { yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,\n \t\t\t\t\t  yyvsp[-1].ttype, prefix_attributes);\n \t\t  start_init (yyval.ttype, yyvsp[-2].ttype, global_bindings_p ()); ;\n     break;}\n case 166:\n-#line 996 \"c-parse.y\"\n+#line 902 \"c-parse.y\"\n { finish_init ();\n \t\t  finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype); ;\n     break;}\n case 167:\n-#line 999 \"c-parse.y\"\n+#line 905 \"c-parse.y\"\n { tree d = start_decl (yyvsp[-2].ttype, current_declspecs, 0,\n \t\t\t\t       yyvsp[0].ttype, prefix_attributes);\n \t\t  finish_decl (d, NULL_TREE, yyvsp[-1].ttype); \n                 ;\n     break;}\n case 168:\n-#line 1007 \"c-parse.y\"\n+#line 913 \"c-parse.y\"\n { yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,\n \t\t\t\t\t  yyvsp[-1].ttype, prefix_attributes);\n \t\t  start_init (yyval.ttype, yyvsp[-2].ttype, global_bindings_p ()); ;\n     break;}\n case 169:\n-#line 1012 \"c-parse.y\"\n+#line 918 \"c-parse.y\"\n { finish_init ();\n \t\t  decl_attributes (yyvsp[-1].ttype, yyvsp[-3].ttype, prefix_attributes);\n \t\t  finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype); ;\n     break;}\n case 170:\n-#line 1016 \"c-parse.y\"\n+#line 922 \"c-parse.y\"\n { tree d = start_decl (yyvsp[-2].ttype, current_declspecs, 0,\n \t\t\t\t       yyvsp[0].ttype, prefix_attributes);\n \t\t  finish_decl (d, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 171:\n-#line 1024 \"c-parse.y\"\n+#line 930 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 172:\n-#line 1026 \"c-parse.y\"\n+#line 932 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 173:\n-#line 1031 \"c-parse.y\"\n+#line 937 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 174:\n-#line 1033 \"c-parse.y\"\n+#line 939 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 175:\n-#line 1038 \"c-parse.y\"\n+#line 944 \"c-parse.y\"\n { yyval.ttype = yyvsp[-2].ttype; ;\n     break;}\n case 176:\n-#line 1043 \"c-parse.y\"\n+#line 949 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 177:\n-#line 1045 \"c-parse.y\"\n+#line 951 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 178:\n-#line 1050 \"c-parse.y\"\n+#line 956 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 179:\n-#line 1052 \"c-parse.y\"\n+#line 958 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 180:\n-#line 1054 \"c-parse.y\"\n+#line 960 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-3].ttype, build_tree_list (NULL_TREE, yyvsp[-1].ttype)); ;\n     break;}\n case 181:\n-#line 1056 \"c-parse.y\"\n+#line 962 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-5].ttype, tree_cons (NULL_TREE, yyvsp[-3].ttype, yyvsp[-1].ttype)); ;\n     break;}\n case 182:\n-#line 1058 \"c-parse.y\"\n+#line 964 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 188:\n-#line 1076 \"c-parse.y\"\n+#line 982 \"c-parse.y\"\n { really_start_incremental_init (NULL_TREE); ;\n     break;}\n case 189:\n-#line 1078 \"c-parse.y\"\n+#line 984 \"c-parse.y\"\n { yyval.ttype = pop_init_level (0); ;\n     break;}\n case 190:\n-#line 1080 \"c-parse.y\"\n+#line 986 \"c-parse.y\"\n { yyval.ttype = error_mark_node; ;\n     break;}\n case 191:\n-#line 1086 \"c-parse.y\"\n+#line 992 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids empty initializer braces\"); ;\n     break;}\n case 197:\n-#line 1102 \"c-parse.y\"\n+#line 1008 \"c-parse.y\"\n { set_init_label (yyvsp[-1].ttype); ;\n     break;}\n case 200:\n-#line 1109 \"c-parse.y\"\n+#line 1015 \"c-parse.y\"\n { push_init_level (0); ;\n     break;}\n case 201:\n-#line 1111 \"c-parse.y\"\n+#line 1017 \"c-parse.y\"\n { process_init_element (pop_init_level (0)); ;\n     break;}\n case 202:\n-#line 1113 \"c-parse.y\"\n+#line 1019 \"c-parse.y\"\n { process_init_element (yyvsp[0].ttype); ;\n     break;}\n case 206:\n-#line 1124 \"c-parse.y\"\n+#line 1030 \"c-parse.y\"\n { set_init_label (yyvsp[0].ttype); ;\n     break;}\n case 207:\n-#line 1129 \"c-parse.y\"\n+#line 1035 \"c-parse.y\"\n { set_init_index (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 208:\n-#line 1131 \"c-parse.y\"\n+#line 1037 \"c-parse.y\"\n { set_init_index (yyvsp[-1].ttype, NULL_TREE); ;\n     break;}\n case 209:\n-#line 1136 \"c-parse.y\"\n+#line 1042 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids nested functions\");\n \n@@ -2779,16 +2685,16 @@ case 209:\n \t\t  reinit_parse_for_function (); ;\n     break;}\n case 210:\n-#line 1148 \"c-parse.y\"\n+#line 1054 \"c-parse.y\"\n { store_parm_decls (); ;\n     break;}\n case 211:\n-#line 1156 \"c-parse.y\"\n+#line 1062 \"c-parse.y\"\n { finish_function (1);\n \t\t  pop_function_context (); ;\n     break;}\n case 212:\n-#line 1162 \"c-parse.y\"\n+#line 1068 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids nested functions\");\n \n@@ -2802,216 +2708,216 @@ case 212:\n \t\t  reinit_parse_for_function (); ;\n     break;}\n case 213:\n-#line 1174 \"c-parse.y\"\n+#line 1080 \"c-parse.y\"\n { store_parm_decls (); ;\n     break;}\n case 214:\n-#line 1182 \"c-parse.y\"\n+#line 1088 \"c-parse.y\"\n { finish_function (1);\n \t\t  pop_function_context (); ;\n     break;}\n case 217:\n-#line 1198 \"c-parse.y\"\n+#line 1104 \"c-parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 218:\n-#line 1200 \"c-parse.y\"\n+#line 1106 \"c-parse.y\"\n { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 219:\n-#line 1205 \"c-parse.y\"\n+#line 1111 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 220:\n-#line 1207 \"c-parse.y\"\n+#line 1113 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;\n     break;}\n case 221:\n-#line 1209 \"c-parse.y\"\n+#line 1115 \"c-parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 222:\n-#line 1216 \"c-parse.y\"\n+#line 1122 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 224:\n-#line 1227 \"c-parse.y\"\n+#line 1133 \"c-parse.y\"\n { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 225:\n-#line 1232 \"c-parse.y\"\n+#line 1138 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, NULL_TREE);\n \t\t  if (! flag_isoc99)\n \t\t    error (\"`[*]' in parameter declaration only allowed in ISO C 99\");\n \t\t;\n     break;}\n case 226:\n-#line 1237 \"c-parse.y\"\n+#line 1143 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 227:\n-#line 1239 \"c-parse.y\"\n+#line 1145 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;\n     break;}\n case 228:\n-#line 1241 \"c-parse.y\"\n+#line 1147 \"c-parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 229:\n-#line 1248 \"c-parse.y\"\n+#line 1154 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 231:\n-#line 1257 \"c-parse.y\"\n+#line 1163 \"c-parse.y\"\n { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 232:\n-#line 1262 \"c-parse.y\"\n+#line 1168 \"c-parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 233:\n-#line 1264 \"c-parse.y\"\n+#line 1170 \"c-parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 234:\n-#line 1266 \"c-parse.y\"\n+#line 1172 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, NULL_TREE);\n \t\t  if (! flag_isoc99)\n \t\t    error (\"`[*]' in parameter declaration only allowed in ISO C 99\");\n \t\t;\n     break;}\n case 235:\n-#line 1271 \"c-parse.y\"\n+#line 1177 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 236:\n-#line 1273 \"c-parse.y\"\n+#line 1179 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;\n     break;}\n case 237:\n-#line 1280 \"c-parse.y\"\n+#line 1186 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 239:\n-#line 1286 \"c-parse.y\"\n+#line 1192 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 240:\n-#line 1288 \"c-parse.y\"\n+#line 1194 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 241:\n-#line 1293 \"c-parse.y\"\n+#line 1199 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 242:\n-#line 1295 \"c-parse.y\"\n+#line 1201 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 243:\n-#line 1300 \"c-parse.y\"\n+#line 1206 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 244:\n-#line 1302 \"c-parse.y\"\n+#line 1208 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 245:\n-#line 1307 \"c-parse.y\"\n+#line 1213 \"c-parse.y\"\n { yyval.ttype = start_struct (RECORD_TYPE, yyvsp[-1].ttype);\n \t\t  /* Start scope of tag before parsing components.  */\n \t\t;\n     break;}\n case 246:\n-#line 1311 \"c-parse.y\"\n+#line 1217 \"c-parse.y\"\n { yyval.ttype = finish_struct (yyvsp[-3].ttype, yyvsp[-2].ttype, chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;\n     break;}\n case 247:\n-#line 1313 \"c-parse.y\"\n+#line 1219 \"c-parse.y\"\n { yyval.ttype = finish_struct (start_struct (RECORD_TYPE, NULL_TREE),\n \t\t\t\t      yyvsp[-2].ttype, chainon (yyvsp[-4].ttype, yyvsp[0].ttype));\n \t\t;\n     break;}\n case 248:\n-#line 1317 \"c-parse.y\"\n+#line 1223 \"c-parse.y\"\n { yyval.ttype = xref_tag (RECORD_TYPE, yyvsp[0].ttype); ;\n     break;}\n case 249:\n-#line 1319 \"c-parse.y\"\n+#line 1225 \"c-parse.y\"\n { yyval.ttype = start_struct (UNION_TYPE, yyvsp[-1].ttype); ;\n     break;}\n case 250:\n-#line 1321 \"c-parse.y\"\n+#line 1227 \"c-parse.y\"\n { yyval.ttype = finish_struct (yyvsp[-3].ttype, yyvsp[-2].ttype, chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;\n     break;}\n case 251:\n-#line 1323 \"c-parse.y\"\n+#line 1229 \"c-parse.y\"\n { yyval.ttype = finish_struct (start_struct (UNION_TYPE, NULL_TREE),\n \t\t\t\t      yyvsp[-2].ttype, chainon (yyvsp[-4].ttype, yyvsp[0].ttype));\n \t\t;\n     break;}\n case 252:\n-#line 1327 \"c-parse.y\"\n+#line 1233 \"c-parse.y\"\n { yyval.ttype = xref_tag (UNION_TYPE, yyvsp[0].ttype); ;\n     break;}\n case 253:\n-#line 1329 \"c-parse.y\"\n+#line 1235 \"c-parse.y\"\n { yyval.ttype = start_enum (yyvsp[-1].ttype); ;\n     break;}\n case 254:\n-#line 1331 \"c-parse.y\"\n+#line 1237 \"c-parse.y\"\n { yyval.ttype = finish_enum (yyvsp[-4].ttype, nreverse (yyvsp[-3].ttype),\n \t\t\t\t    chainon (yyvsp[-7].ttype, yyvsp[0].ttype)); ;\n     break;}\n case 255:\n-#line 1334 \"c-parse.y\"\n+#line 1240 \"c-parse.y\"\n { yyval.ttype = start_enum (NULL_TREE); ;\n     break;}\n case 256:\n-#line 1336 \"c-parse.y\"\n+#line 1242 \"c-parse.y\"\n { yyval.ttype = finish_enum (yyvsp[-4].ttype, nreverse (yyvsp[-3].ttype),\n \t\t\t\t    chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;\n     break;}\n case 257:\n-#line 1339 \"c-parse.y\"\n+#line 1245 \"c-parse.y\"\n { yyval.ttype = xref_tag (ENUMERAL_TYPE, yyvsp[0].ttype); ;\n     break;}\n case 261:\n-#line 1350 \"c-parse.y\"\n+#line 1256 \"c-parse.y\"\n { if (pedantic && ! flag_isoc99)\n \t\t    pedwarn (\"comma at end of enumerator list\"); ;\n     break;}\n case 262:\n-#line 1356 \"c-parse.y\"\n+#line 1262 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 263:\n-#line 1358 \"c-parse.y\"\n+#line 1264 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  pedwarn (\"no semicolon at end of struct or union\"); ;\n     break;}\n case 264:\n-#line 1363 \"c-parse.y\"\n+#line 1269 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 265:\n-#line 1365 \"c-parse.y\"\n+#line 1271 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 266:\n-#line 1367 \"c-parse.y\"\n+#line 1273 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"extra semicolon in struct or union specified\"); ;\n     break;}\n case 267:\n-#line 1382 \"c-parse.y\"\n+#line 1288 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 268:\n-#line 1387 \"c-parse.y\"\n+#line 1293 \"c-parse.y\"\n {\n \t\t  /* Support for unnamed structs or unions as members of \n \t\t     structs or unions (which is [a] useful and [b] supports \n@@ -3026,164 +2932,164 @@ case 268:\n \t\t;\n     break;}\n case 269:\n-#line 1400 \"c-parse.y\"\n+#line 1306 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 270:\n-#line 1405 \"c-parse.y\"\n+#line 1311 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids member declarations with no members\");\n \t\t  shadow_tag(yyvsp[0].ttype);\n \t\t  yyval.ttype = NULL_TREE; ;\n     break;}\n case 271:\n-#line 1410 \"c-parse.y\"\n+#line 1316 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 272:\n-#line 1412 \"c-parse.y\"\n+#line 1318 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;\n     break;}\n case 274:\n-#line 1419 \"c-parse.y\"\n+#line 1325 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 275:\n-#line 1424 \"c-parse.y\"\n+#line 1330 \"c-parse.y\"\n { yyval.ttype = grokfield (yyvsp[-3].filename, yyvsp[-2].lineno, yyvsp[-1].ttype, current_declspecs, NULL_TREE);\n \t\t  decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 276:\n-#line 1428 \"c-parse.y\"\n+#line 1334 \"c-parse.y\"\n { yyval.ttype = grokfield (yyvsp[-5].filename, yyvsp[-4].lineno, yyvsp[-3].ttype, current_declspecs, yyvsp[-1].ttype);\n \t\t  decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 277:\n-#line 1431 \"c-parse.y\"\n+#line 1337 \"c-parse.y\"\n { yyval.ttype = grokfield (yyvsp[-4].filename, yyvsp[-3].lineno, NULL_TREE, current_declspecs, yyvsp[-1].ttype);\n \t\t  decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;\n     break;}\n case 279:\n-#line 1443 \"c-parse.y\"\n+#line 1349 \"c-parse.y\"\n { if (yyvsp[-2].ttype == error_mark_node)\n \t\t    yyval.ttype = yyvsp[-2].ttype;\n \t\t  else\n \t\t    yyval.ttype = chainon (yyvsp[0].ttype, yyvsp[-2].ttype); ;\n     break;}\n case 280:\n-#line 1448 \"c-parse.y\"\n+#line 1354 \"c-parse.y\"\n { yyval.ttype = error_mark_node; ;\n     break;}\n case 281:\n-#line 1454 \"c-parse.y\"\n+#line 1360 \"c-parse.y\"\n { yyval.ttype = build_enumerator (yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 282:\n-#line 1456 \"c-parse.y\"\n+#line 1362 \"c-parse.y\"\n { yyval.ttype = build_enumerator (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 283:\n-#line 1461 \"c-parse.y\"\n+#line 1367 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 284:\n-#line 1463 \"c-parse.y\"\n+#line 1369 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 285:\n-#line 1468 \"c-parse.y\"\n+#line 1374 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 287:\n-#line 1474 \"c-parse.y\"\n+#line 1380 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 288:\n-#line 1476 \"c-parse.y\"\n+#line 1382 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 289:\n-#line 1481 \"c-parse.y\"\n+#line 1387 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 290:\n-#line 1483 \"c-parse.y\"\n+#line 1389 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 291:\n-#line 1488 \"c-parse.y\"\n+#line 1394 \"c-parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 292:\n-#line 1491 \"c-parse.y\"\n+#line 1397 \"c-parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 293:\n-#line 1493 \"c-parse.y\"\n+#line 1399 \"c-parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 294:\n-#line 1495 \"c-parse.y\"\n+#line 1401 \"c-parse.y\"\n { yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 295:\n-#line 1497 \"c-parse.y\"\n+#line 1403 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 296:\n-#line 1499 \"c-parse.y\"\n+#line 1405 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;\n     break;}\n case 297:\n-#line 1501 \"c-parse.y\"\n+#line 1407 \"c-parse.y\"\n { yyval.ttype = build_nt (CALL_EXPR, NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;\n     break;}\n case 298:\n-#line 1503 \"c-parse.y\"\n+#line 1409 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 299:\n-#line 1505 \"c-parse.y\"\n+#line 1411 \"c-parse.y\"\n { yyval.ttype = build_nt (ARRAY_REF, NULL_TREE, NULL_TREE); ;\n     break;}\n case 300:\n-#line 1509 \"c-parse.y\"\n+#line 1415 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 301:\n-#line 1518 \"c-parse.y\"\n+#line 1424 \"c-parse.y\"\n {\n \t\t  if (pedantic && yyvsp[0].ends_in_label)\n \t\t    pedwarn (\"ANSI C forbids label at end of compound statement\");\n \t\t;\n     break;}\n case 303:\n-#line 1527 \"c-parse.y\"\n+#line 1433 \"c-parse.y\"\n { yyval.ends_in_label = yyvsp[0].ends_in_label; ;\n     break;}\n case 304:\n-#line 1529 \"c-parse.y\"\n+#line 1435 \"c-parse.y\"\n { yyval.ends_in_label = 0; ;\n     break;}\n case 308:\n-#line 1541 \"c-parse.y\"\n+#line 1447 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  pushlevel (0);\n \t\t  clear_last_expr ();\n \t\t  expand_start_bindings (0);\n \t\t;\n     break;}\n case 310:\n-#line 1553 \"c-parse.y\"\n+#line 1459 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids label declarations\"); ;\n     break;}\n case 313:\n-#line 1564 \"c-parse.y\"\n+#line 1470 \"c-parse.y\"\n { tree link;\n \t\t  for (link = yyvsp[-1].ttype; link; link = TREE_CHAIN (link))\n \t\t    {\n@@ -3194,37 +3100,37 @@ case 313:\n \t\t;\n     break;}\n case 314:\n-#line 1578 \"c-parse.y\"\n+#line 1484 \"c-parse.y\"\n {;\n     break;}\n case 316:\n-#line 1582 \"c-parse.y\"\n+#line 1488 \"c-parse.y\"\n { compstmt_count++; ;\n     break;}\n case 317:\n-#line 1585 \"c-parse.y\"\n+#line 1491 \"c-parse.y\"\n { yyval.ttype = convert (void_type_node, integer_zero_node); ;\n     break;}\n case 318:\n-#line 1587 \"c-parse.y\"\n+#line 1493 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), 1, 0);\n \t\t  yyval.ttype = poplevel (1, 1, 0); ;\n     break;}\n case 319:\n-#line 1591 \"c-parse.y\"\n+#line 1497 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), kept_level_p (), 0);\n \t\t  yyval.ttype = poplevel (kept_level_p (), 0, 0); ;\n     break;}\n case 320:\n-#line 1595 \"c-parse.y\"\n+#line 1501 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  expand_end_bindings (getdecls (), kept_level_p (), 0);\n \t\t  yyval.ttype = poplevel (kept_level_p (), 0, 0); ;\n     break;}\n case 321:\n-#line 1602 \"c-parse.y\"\n+#line 1508 \"c-parse.y\"\n { if (current_function_decl == 0)\n \t\t    {\n \t\t      error (\"braced-group within expression allowed only inside a function\");\n@@ -3242,11 +3148,11 @@ case 321:\n \t\t;\n     break;}\n case 322:\n-#line 1619 \"c-parse.y\"\n+#line 1525 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 325:\n-#line 1633 \"c-parse.y\"\n+#line 1539 \"c-parse.y\"\n { emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);\n \t\t  c_expand_start_cond (truthvalue_conversion (yyvsp[-1].ttype), 0, \n \t\t\t\t       compstmt_count);\n@@ -3256,7 +3162,7 @@ case 325:\n \t\t  position_after_white_space (); ;\n     break;}\n case 326:\n-#line 1647 \"c-parse.y\"\n+#line 1553 \"c-parse.y\"\n { stmt_count++;\n \t\t  compstmt_count++;\n \t\t  emit_line_note (yyvsp[-2].filename, yyvsp[-1].lineno);\n@@ -3266,43 +3172,43 @@ case 326:\n \t\t  position_after_white_space (); ;\n     break;}\n case 327:\n-#line 1655 \"c-parse.y\"\n+#line 1561 \"c-parse.y\"\n { expand_loop_continue_here (); ;\n     break;}\n case 328:\n-#line 1659 \"c-parse.y\"\n+#line 1565 \"c-parse.y\"\n { yyval.filename = input_filename; ;\n     break;}\n case 329:\n-#line 1663 \"c-parse.y\"\n+#line 1569 \"c-parse.y\"\n { yyval.lineno = lineno; ;\n     break;}\n case 330:\n-#line 1668 \"c-parse.y\"\n+#line 1574 \"c-parse.y\"\n { ;\n     break;}\n case 331:\n-#line 1673 \"c-parse.y\"\n+#line 1579 \"c-parse.y\"\n { ;\n     break;}\n case 332:\n-#line 1678 \"c-parse.y\"\n+#line 1584 \"c-parse.y\"\n { yyval.ends_in_label = yyvsp[0].ends_in_label; ;\n     break;}\n case 333:\n-#line 1683 \"c-parse.y\"\n+#line 1589 \"c-parse.y\"\n { yyval.ends_in_label = 0; ;\n     break;}\n case 334:\n-#line 1685 \"c-parse.y\"\n+#line 1591 \"c-parse.y\"\n { yyval.ends_in_label = 1; ;\n     break;}\n case 335:\n-#line 1691 \"c-parse.y\"\n+#line 1597 \"c-parse.y\"\n { stmt_count++; ;\n     break;}\n case 337:\n-#line 1694 \"c-parse.y\"\n+#line 1600 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);\n /* It appears that this should not be done--that a non-lvalue array\n@@ -3320,19 +3226,19 @@ case 337:\n \t\t  iterator_expand (yyvsp[-1].ttype); ;\n     break;}\n case 338:\n-#line 1710 \"c-parse.y\"\n+#line 1616 \"c-parse.y\"\n { c_expand_start_else ();\n \t\t  yyvsp[-1].itype = stmt_count;\n \t\t  position_after_white_space (); ;\n     break;}\n case 339:\n-#line 1714 \"c-parse.y\"\n+#line 1620 \"c-parse.y\"\n { c_expand_end_cond ();\n \t\t  if (extra_warnings && stmt_count == yyvsp[-3].itype)\n \t\t    warning (\"empty body in an else-statement\"); ;\n     break;}\n case 340:\n-#line 1718 \"c-parse.y\"\n+#line 1624 \"c-parse.y\"\n { c_expand_end_cond ();\n \t\t  /* This warning is here instead of in simple_if, because we\n \t\t     do not want a warning if an empty if is followed by an\n@@ -3343,11 +3249,11 @@ case 340:\n \t\t\t\t\t\t\"empty body in an if-statement\"); ;\n     break;}\n case 341:\n-#line 1730 \"c-parse.y\"\n+#line 1636 \"c-parse.y\"\n { c_expand_end_cond (); ;\n     break;}\n case 342:\n-#line 1732 \"c-parse.y\"\n+#line 1638 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-2].filename, yyvsp[-1].lineno);\n \t\t  /* The emit_nop used to come before emit_line_note,\n@@ -3359,7 +3265,7 @@ case 342:\n \t\t  emit_nop (); ;\n     break;}\n case 343:\n-#line 1742 \"c-parse.y\"\n+#line 1648 \"c-parse.y\"\n { /* Don't start the loop till we have succeeded\n \t\t     in parsing the end test.  This is to make sure\n \t\t     that we end every loop we start.  */\n@@ -3370,22 +3276,22 @@ case 343:\n \t\t  position_after_white_space (); ;\n     break;}\n case 344:\n-#line 1751 \"c-parse.y\"\n+#line 1657 \"c-parse.y\"\n { expand_end_loop (); ;\n     break;}\n case 345:\n-#line 1754 \"c-parse.y\"\n+#line 1660 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  expand_exit_loop_if_false (NULL_PTR,\n \t\t\t\t\t     truthvalue_conversion (yyvsp[-2].ttype));\n \t\t  expand_end_loop (); ;\n     break;}\n case 346:\n-#line 1760 \"c-parse.y\"\n+#line 1666 \"c-parse.y\"\n { expand_end_loop (); ;\n     break;}\n case 347:\n-#line 1763 \"c-parse.y\"\n+#line 1669 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);\n \t\t  /* See comment in `while' alternative, above.  */\n@@ -3398,12 +3304,12 @@ case 347:\n \t\t;\n     break;}\n case 348:\n-#line 1775 \"c-parse.y\"\n+#line 1681 \"c-parse.y\"\n { yyvsp[0].lineno = lineno;\n \t\t  yyval.filename = input_filename; ;\n     break;}\n case 349:\n-#line 1778 \"c-parse.y\"\n+#line 1684 \"c-parse.y\"\n { \n \t\t  /* Start the loop.  Doing this after parsing\n \t\t     all the expressions ensures we will end the loop.  */\n@@ -3418,7 +3324,7 @@ case 349:\n \t\t  position_after_white_space (); ;\n     break;}\n case 350:\n-#line 1791 \"c-parse.y\"\n+#line 1697 \"c-parse.y\"\n { /* Emit the increment expression, with a line number.  */\n \t\t  emit_line_note (yyvsp[-4].filename, yyvsp[-5].lineno);\n \t\t  expand_loop_continue_here ();\n@@ -3427,44 +3333,44 @@ case 350:\n \t\t  expand_end_loop (); ;\n     break;}\n case 351:\n-#line 1798 \"c-parse.y\"\n+#line 1704 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);\n \t\t  c_expand_start_case (yyvsp[-1].ttype);\n \t\t  position_after_white_space (); ;\n     break;}\n case 352:\n-#line 1803 \"c-parse.y\"\n+#line 1709 \"c-parse.y\"\n { expand_end_case (yyvsp[-3].ttype); ;\n     break;}\n case 353:\n-#line 1805 \"c-parse.y\"\n+#line 1711 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);\n \t\t  if ( ! expand_exit_something ())\n \t\t    error (\"break statement not within loop or switch\"); ;\n     break;}\n case 354:\n-#line 1810 \"c-parse.y\"\n+#line 1716 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);\n \t\t  if (! expand_continue_loop (NULL_PTR))\n \t\t    error (\"continue statement not within a loop\"); ;\n     break;}\n case 355:\n-#line 1815 \"c-parse.y\"\n+#line 1721 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);\n \t\t  c_expand_return (NULL_TREE); ;\n     break;}\n case 356:\n-#line 1819 \"c-parse.y\"\n+#line 1725 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-4].filename, yyvsp[-3].lineno);\n \t\t  c_expand_return (yyvsp[-1].ttype); ;\n     break;}\n case 357:\n-#line 1823 \"c-parse.y\"\n+#line 1729 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-7].filename, yyvsp[-6].lineno);\n \t\t  STRIP_NOPS (yyvsp[-2].ttype);\n@@ -3476,31 +3382,31 @@ case 357:\n \t\t    error (\"argument of `asm' is not a constant string\"); ;\n     break;}\n case 358:\n-#line 1834 \"c-parse.y\"\n+#line 1740 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-9].filename, yyvsp[-8].lineno);\n \t\t  c_expand_asm_operands (yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE, NULL_TREE,\n \t\t\t\t\t yyvsp[-6].ttype == ridpointers[(int)RID_VOLATILE],\n \t\t\t\t\t input_filename, lineno); ;\n     break;}\n case 359:\n-#line 1841 \"c-parse.y\"\n+#line 1747 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-11].filename, yyvsp[-10].lineno);\n \t\t  c_expand_asm_operands (yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE,\n \t\t\t\t\t yyvsp[-8].ttype == ridpointers[(int)RID_VOLATILE],\n \t\t\t\t\t input_filename, lineno); ;\n     break;}\n case 360:\n-#line 1849 \"c-parse.y\"\n+#line 1755 \"c-parse.y\"\n { stmt_count++;\n \t\t  emit_line_note (yyvsp[-13].filename, yyvsp[-12].lineno);\n \t\t  c_expand_asm_operands (yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype,\n \t\t\t\t\t yyvsp[-10].ttype == ridpointers[(int)RID_VOLATILE],\n \t\t\t\t\t input_filename, lineno); ;\n     break;}\n case 361:\n-#line 1855 \"c-parse.y\"\n+#line 1761 \"c-parse.y\"\n { tree decl;\n \t\t  stmt_count++;\n \t\t  emit_line_note (yyvsp[-4].filename, yyvsp[-3].lineno);\n@@ -3513,15 +3419,15 @@ case 361:\n \t\t;\n     break;}\n case 362:\n-#line 1866 \"c-parse.y\"\n+#line 1772 \"c-parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids `goto *expr;'\");\n \t\t  stmt_count++;\n \t\t  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);\n \t\t  expand_computed_goto (convert (ptr_type_node, yyvsp[-1].ttype)); ;\n     break;}\n case 365:\n-#line 1881 \"c-parse.y\"\n+#line 1787 \"c-parse.y\"\n {\n \t    /* The value returned by this action is  */\n \t    /*      1 if everything is OK */ \n@@ -3544,14 +3450,14 @@ case 365:\n \t  ;\n     break;}\n case 366:\n-#line 1902 \"c-parse.y\"\n+#line 1808 \"c-parse.y\"\n {\n \t    if (yyvsp[-1].itype)\n \t      iterator_for_loop_end (yyvsp[-3].ttype);\n \t  ;\n     break;}\n case 367:\n-#line 1933 \"c-parse.y\"\n+#line 1839 \"c-parse.y\"\n { register tree value = check_case_value (yyvsp[-1].ttype);\n \t\t  register tree label\n \t\t    = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n@@ -3584,7 +3490,7 @@ case 367:\n \t\t  position_after_white_space (); ;\n     break;}\n case 368:\n-#line 1964 \"c-parse.y\"\n+#line 1870 \"c-parse.y\"\n { register tree value1 = check_case_value (yyvsp[-3].ttype);\n \t\t  register tree value2 = check_case_value (yyvsp[-1].ttype);\n \t\t  register tree label\n@@ -3617,7 +3523,7 @@ case 368:\n \t\t  position_after_white_space (); ;\n     break;}\n case 369:\n-#line 1995 \"c-parse.y\"\n+#line 1901 \"c-parse.y\"\n {\n \t\t  tree duplicate;\n \t\t  register tree label\n@@ -3634,7 +3540,7 @@ case 369:\n \t\t  position_after_white_space (); ;\n     break;}\n case 370:\n-#line 2010 \"c-parse.y\"\n+#line 1916 \"c-parse.y\"\n { tree label = define_label (input_filename, lineno, yyvsp[-2].ttype);\n \t\t  stmt_count++;\n \t\t  emit_nop ();\n@@ -3646,52 +3552,52 @@ case 370:\n \t\t  position_after_white_space (); ;\n     break;}\n case 371:\n-#line 2025 \"c-parse.y\"\n+#line 1931 \"c-parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  yyval.ttype = NULL_TREE; ;\n     break;}\n case 372:\n-#line 2028 \"c-parse.y\"\n+#line 1934 \"c-parse.y\"\n { emit_line_note (input_filename, lineno); ;\n     break;}\n case 373:\n-#line 2033 \"c-parse.y\"\n+#line 1939 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 375:\n-#line 2040 \"c-parse.y\"\n+#line 1946 \"c-parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 378:\n-#line 2047 \"c-parse.y\"\n+#line 1953 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;\n     break;}\n case 379:\n-#line 2052 \"c-parse.y\"\n+#line 1958 \"c-parse.y\"\n { yyval.ttype = build_tree_list (yyvsp[-3].ttype, yyvsp[-1].ttype); ;\n     break;}\n case 380:\n-#line 2057 \"c-parse.y\"\n+#line 1963 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, combine_strings (yyvsp[0].ttype), NULL_TREE); ;\n     break;}\n case 381:\n-#line 2059 \"c-parse.y\"\n+#line 1965 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, combine_strings (yyvsp[0].ttype), yyvsp[-2].ttype); ;\n     break;}\n case 382:\n-#line 2065 \"c-parse.y\"\n+#line 1971 \"c-parse.y\"\n { pushlevel (0);\n \t\t  clear_parm_order ();\n \t\t  declare_parm_level (0); ;\n     break;}\n case 383:\n-#line 2069 \"c-parse.y\"\n+#line 1975 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  parmlist_tags_warning ();\n \t\t  poplevel (0, 0, 0); ;\n     break;}\n case 385:\n-#line 2077 \"c-parse.y\"\n+#line 1983 \"c-parse.y\"\n { tree parm;\n \t\t  if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids forward parameter declarations\");\n@@ -3701,19 +3607,19 @@ case 385:\n \t\t  clear_parm_order (); ;\n     break;}\n case 386:\n-#line 2085 \"c-parse.y\"\n+#line 1991 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 387:\n-#line 2087 \"c-parse.y\"\n+#line 1993 \"c-parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, NULL_TREE, NULL_TREE); ;\n     break;}\n case 388:\n-#line 2093 \"c-parse.y\"\n+#line 1999 \"c-parse.y\"\n { yyval.ttype = get_parm_info (0); ;\n     break;}\n case 389:\n-#line 2095 \"c-parse.y\"\n+#line 2001 \"c-parse.y\"\n { yyval.ttype = get_parm_info (0);\n \t\t  /* Gcc used to allow this as an extension.  However, it does\n \t\t     not work for all targets, and thus has been disabled.\n@@ -3725,23 +3631,23 @@ case 389:\n \t\t;\n     break;}\n case 390:\n-#line 2105 \"c-parse.y\"\n+#line 2011 \"c-parse.y\"\n { yyval.ttype = get_parm_info (1); ;\n     break;}\n case 391:\n-#line 2107 \"c-parse.y\"\n+#line 2013 \"c-parse.y\"\n { yyval.ttype = get_parm_info (0); ;\n     break;}\n case 392:\n-#line 2112 \"c-parse.y\"\n+#line 2018 \"c-parse.y\"\n { push_parm_decl (yyvsp[0].ttype); ;\n     break;}\n case 393:\n-#line 2114 \"c-parse.y\"\n+#line 2020 \"c-parse.y\"\n { push_parm_decl (yyvsp[0].ttype); ;\n     break;}\n case 394:\n-#line 2121 \"c-parse.y\"\n+#line 2027 \"c-parse.y\"\n { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t yyvsp[-1].ttype),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n@@ -3751,7 +3657,7 @@ case 394:\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 395:\n-#line 2129 \"c-parse.y\"\n+#line 2035 \"c-parse.y\"\n { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t yyvsp[-1].ttype),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n@@ -3761,7 +3667,7 @@ case 395:\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 396:\n-#line 2137 \"c-parse.y\"\n+#line 2043 \"c-parse.y\"\n { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t yyvsp[-1].ttype),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n@@ -3771,7 +3677,7 @@ case 396:\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 397:\n-#line 2145 \"c-parse.y\"\n+#line 2051 \"c-parse.y\"\n { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t yyvsp[-1].ttype),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n@@ -3781,7 +3687,7 @@ case 397:\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 398:\n-#line 2154 \"c-parse.y\"\n+#line 2060 \"c-parse.y\"\n { yyval.ttype = build_tree_list (build_tree_list (current_declspecs,\n \t\t\t\t\t\t\t yyvsp[-1].ttype),\n \t\t\t\t\tbuild_tree_list (prefix_attributes,\n@@ -3791,50 +3697,50 @@ case 398:\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack); ;\n     break;}\n case 399:\n-#line 2167 \"c-parse.y\"\n+#line 2073 \"c-parse.y\"\n { pushlevel (0);\n \t\t  clear_parm_order ();\n \t\t  declare_parm_level (1); ;\n     break;}\n case 400:\n-#line 2171 \"c-parse.y\"\n+#line 2077 \"c-parse.y\"\n { yyval.ttype = yyvsp[0].ttype;\n \t\t  parmlist_tags_warning ();\n \t\t  poplevel (0, 0, 0); ;\n     break;}\n case 402:\n-#line 2179 \"c-parse.y\"\n+#line 2085 \"c-parse.y\"\n { tree t;\n \t\t  for (t = yyvsp[-1].ttype; t; t = TREE_CHAIN (t))\n \t\t    if (TREE_VALUE (t) == NULL_TREE)\n \t\t      error (\"`...' in old-style identifier list\");\n \t\t  yyval.ttype = tree_cons (NULL_TREE, NULL_TREE, yyvsp[-1].ttype); ;\n     break;}\n case 403:\n-#line 2189 \"c-parse.y\"\n+#line 2095 \"c-parse.y\"\n { yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 404:\n-#line 2191 \"c-parse.y\"\n+#line 2097 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;\n     break;}\n case 405:\n-#line 2197 \"c-parse.y\"\n+#line 2103 \"c-parse.y\"\n { yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;\n     break;}\n case 406:\n-#line 2199 \"c-parse.y\"\n+#line 2105 \"c-parse.y\"\n { yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;\n     break;}\n case 407:\n-#line 2204 \"c-parse.y\"\n+#line 2110 \"c-parse.y\"\n { yyval.ttype = SAVE_WARN_FLAGS();\n \t\t  pedantic = 0;\n \t\t  warn_pointer_arith = 0; ;\n     break;}\n }\n    /* the action file gets copied in in place of this dollarsign */\n-#line 543 \"/usr/lib/bison.simple\"\n+#line 543 \"/usr/share/misc/bison.simple\"\n \f\n   yyvsp -= yylen;\n   yyssp -= yylen;\n@@ -4054,5 +3960,5 @@ case 407:\n     }\n   return 1;\n }\n-#line 2209 \"c-parse.y\"\n+#line 2115 \"c-parse.y\"\n "}, {"sha": "7efe9cd6b20796538fb538912e7f9fed2d61e8de", "filename": "gcc/c-parse.in", "status": "modified", "additions": 3, "deletions": 166, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=7e585d16ce4df23bfd21cf82e58dd323f9939232", "patch": "@@ -226,9 +226,6 @@ static tree prefix_attributes = NULL_TREE;\n /* Stack of saved values of current_declspecs and prefix_attributes.  */\n static tree declspec_stack;\n \n-/* 1 if we explained undeclared var errors.  */\n-static int undeclared_variable_notice;\n-\n /* For __extension__, save/restore the warning flags which are\n    controlled by __extension__.  */\n #define SAVE_WARN_FLAGS()\t\\\n@@ -628,169 +625,9 @@ expr_no_commas:\n primary:\n \tIDENTIFIER\n \t\t{\n-\t\t  $$ = lastiddecl;\n-\t\t  if (!$$ || $$ == error_mark_node)\n-\t\t    {\n-\t\t      if (yychar == YYEMPTY)\n-\t\t\tyychar = YYLEX;\n-\t\t      if (yychar == '(')\n-\t\t\t{\n-ifobjc\n-\t\t\t  tree decl;\n-\n-\t\t\t  if (objc_receiver_context\n-\t\t\t      && ! (objc_receiver_context\n-\t\t\t\t    && strcmp (IDENTIFIER_POINTER ($1), \"super\")))\n-\t\t\t    /* we have a message to super */\n-\t\t\t    $$ = get_super_receiver ();\n-\t\t\t  else if (objc_method_context\n-\t\t\t\t   && (decl = is_ivar (objc_ivar_chain, $1)))\n-\t\t\t    {\n-\t\t\t      if (is_private (decl))\n-\t\t\t\t$$ = error_mark_node;\n-\t\t\t      else\n-\t\t\t\t$$ = build_ivar_reference ($1);\n-\t\t\t    }\n-\t\t\t  else\n-end ifobjc\n-\t\t\t    {\n-\t\t\t      /* Ordinary implicit function declaration.  */\n-\t\t\t      $$ = implicitly_declare ($1);\n-\t\t\t      assemble_external ($$);\n-\t\t\t      TREE_USED ($$) = 1;\n-\t\t\t    }\n-\t\t\t}\n-\t\t      else if (current_function_decl == 0)\n-\t\t\t{\n-\t\t\t  error (\"`%s' undeclared here (not in a function)\",\n-\t\t\t\t IDENTIFIER_POINTER ($1));\n-\t\t\t  $$ = error_mark_node;\n-\t\t\t}\n-\t\t      else\n-\t\t\t{\n-ifobjc\n-\t\t\t  tree decl;\n-\n-\t\t          if (objc_receiver_context\n-\t\t\t      && ! strcmp (IDENTIFIER_POINTER ($1), \"super\"))\n-\t\t\t    /* we have a message to super */\n-\t\t\t    $$ = get_super_receiver ();\n-\t\t\t  else if (objc_method_context\n-\t\t\t\t   && (decl = is_ivar (objc_ivar_chain, $1)))\n-\t\t\t    {\n-\t\t\t      if (is_private (decl))\n-\t\t\t\t$$ = error_mark_node;\n-\t\t\t      else\n-\t\t\t\t$$ = build_ivar_reference ($1);\n-\t\t\t    }\n-\t\t\t  else\n-end ifobjc\n-\t\t\t    {\n-\t\t\t      if (IDENTIFIER_GLOBAL_VALUE ($1) != error_mark_node\n-\t\t\t\t  || IDENTIFIER_ERROR_LOCUS ($1) != current_function_decl)\n-\t\t\t\t{\n-\t\t\t\t  error (\"`%s' undeclared (first use in this function)\",\n-\t\t\t\t\t IDENTIFIER_POINTER ($1));\n-\n-\t\t\t\t  if (! undeclared_variable_notice)\n-\t\t\t\t    {\n-\t\t\t\t      error (\"(Each undeclared identifier is reported only once\");\n-\t\t\t\t      error (\"for each function it appears in.)\");\n-\t\t\t\t      undeclared_variable_notice = 1;\n-\t\t\t\t    }\n-\t\t\t\t}\n-\t\t\t      $$ = error_mark_node;\n-\t\t\t      /* Prevent repeated error messages.  */\n-\t\t\t      IDENTIFIER_GLOBAL_VALUE ($1) = error_mark_node;\n-\t\t\t      IDENTIFIER_ERROR_LOCUS ($1) = current_function_decl;\n-\t\t\t    }\n-\t\t\t}\n-\t\t    }\n-\t\t  else if (TREE_TYPE ($$) == error_mark_node)\n-\t\t    $$ = error_mark_node;\n-\t\t  else if (C_DECL_ANTICIPATED ($$))\n-\t\t    {\n-\t\t      /* The first time we see a build-in function used,\n-\t\t\t if it has not been declared.  */\n-\t\t      C_DECL_ANTICIPATED ($$) = 0;\n-\t\t      if (yychar == YYEMPTY)\n-\t\t\tyychar = YYLEX;\n-\t\t      if (yychar == '(')\n-\t\t\t{\n-\t\t\t  /* Omit the implicit declaration we\n-\t\t\t     would ordinarily do, so we don't lose\n-\t\t\t     the actual built in type.\n-\t\t\t     But print a diagnostic for the mismatch.  */\n-ifobjc\n-\t\t\t  if (objc_method_context\n-\t\t\t      && is_ivar (objc_ivar_chain, $1))\n-\t\t\t    error (\"Instance variable `%s' implicitly declared as function\",\n-\t\t\t\t   IDENTIFIER_POINTER (DECL_NAME ($$)));\n-\t\t\t  else\n-end ifobjc\n-\t\t\t    if (TREE_CODE ($$) != FUNCTION_DECL)\n-\t\t\t      error (\"`%s' implicitly declared as function\",\n-\t\t\t\t     IDENTIFIER_POINTER (DECL_NAME ($$)));\n-\t\t\t  else if ((TYPE_MODE (TREE_TYPE (TREE_TYPE ($$)))\n-\t\t\t\t    != TYPE_MODE (integer_type_node))\n-\t\t\t\t   && !VOID_TYPE_P (TREE_TYPE (TREE_TYPE ($$))))\n-\t\t\t    pedwarn (\"type mismatch in implicit declaration for built-in function `%s'\",\n-\t\t\t\t     IDENTIFIER_POINTER (DECL_NAME ($$)));\n-\t\t\t  /* If it really returns void, change that to int.  */\n-\t\t\t  if (TREE_TYPE (TREE_TYPE ($$)) == void_type_node)\n-\t\t\t    TREE_TYPE ($$)\n-\t\t\t      = build_function_type (integer_type_node,\n-\t\t\t\t\t\t     TYPE_ARG_TYPES (TREE_TYPE ($$)));\n-\t\t\t}\n-\t\t      else\n-\t\t\tpedwarn (\"built-in function `%s' used without declaration\",\n-\t\t\t\t IDENTIFIER_POINTER (DECL_NAME ($$)));\n-\n-\t\t      /* Do what we would ordinarily do when a fn is used.  */\n-\t\t      assemble_external ($$);\n-\t\t      TREE_USED ($$) = 1;\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      assemble_external ($$);\n-\t\t      TREE_USED ($$) = 1;\n-ifobjc\n-\t\t      /* we have a definition - still check if iVariable */\n-\n-\t\t      if (!objc_receiver_context\n-\t\t\t  || (objc_receiver_context\n-\t\t\t      && strcmp (IDENTIFIER_POINTER ($1), \"super\")))\n-                        {\n-\t\t\t  tree decl;\n-\n-\t\t\t  if (objc_method_context\n-\t\t\t      && (decl = is_ivar (objc_ivar_chain, $1)))\n-                            {\n-                              if (IDENTIFIER_LOCAL_VALUE ($1))\n-                                warning (\"local declaration of `%s' hides instance variable\",\n-\t                                 IDENTIFIER_POINTER ($1));\n-                              else\n- \t\t\t\t{\n- \t\t\t\t  if (is_private (decl))\n- \t\t\t\t    $$ = error_mark_node;\n- \t\t\t\t  else\n- \t\t\t\t    $$ = build_ivar_reference ($1);\n- \t\t\t\t}\n-                            }\n-\t\t\t}\n-                      else /* we have a message to super */\n-\t\t        $$ = get_super_receiver ();\n-end ifobjc\n-\t\t    }\n-\n-\t\t  if (TREE_CODE ($$) == CONST_DECL)\n-\t\t    {\n-\t\t      $$ = DECL_INITIAL ($$);\n-\t\t      /* This is to prevent an enum whose value is 0\n-\t\t\t from being considered a null pointer constant.  */\n-\t\t      $$ = build1 (NOP_EXPR, TREE_TYPE ($$), $$);\n-\t\t      TREE_CONSTANT ($$) = 1;\n-\t\t    }\n+\t\t  if (yychar == YYEMPTY)\n+\t\t    yychar = YYLEX;\n+\t\t  $$ = build_external_ref ($1, yychar == '(');\n \t\t}\n \t| CONSTANT\n \t| string"}, {"sha": "e7c1d880e66cc573adb68aa8a7aee40f078a4a28", "filename": "gcc/c-parse.y", "status": "modified", "additions": 3, "deletions": 97, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.y?ref=7e585d16ce4df23bfd21cf82e58dd323f9939232", "patch": "@@ -201,9 +201,6 @@ static tree prefix_attributes = NULL_TREE;\n /* Stack of saved values of current_declspecs and prefix_attributes.  */\n static tree declspec_stack;\n \n-/* 1 if we explained undeclared var errors.  */\n-static int undeclared_variable_notice;\n-\n /* For __extension__, save/restore the warning flags which are\n    controlled by __extension__.  */\n #define SAVE_WARN_FLAGS()\t\\\n@@ -576,100 +573,9 @@ expr_no_commas:\n primary:\n \tIDENTIFIER\n \t\t{\n-\t\t  $$ = lastiddecl;\n-\t\t  if (!$$ || $$ == error_mark_node)\n-\t\t    {\n-\t\t      if (yychar == YYEMPTY)\n-\t\t\tyychar = YYLEX;\n-\t\t      if (yychar == '(')\n-\t\t\t{\n-\t\t\t    {\n-\t\t\t      /* Ordinary implicit function declaration.  */\n-\t\t\t      $$ = implicitly_declare ($1);\n-\t\t\t      assemble_external ($$);\n-\t\t\t      TREE_USED ($$) = 1;\n-\t\t\t    }\n-\t\t\t}\n-\t\t      else if (current_function_decl == 0)\n-\t\t\t{\n-\t\t\t  error (\"`%s' undeclared here (not in a function)\",\n-\t\t\t\t IDENTIFIER_POINTER ($1));\n-\t\t\t  $$ = error_mark_node;\n-\t\t\t}\n-\t\t      else\n-\t\t\t{\n-\t\t\t    {\n-\t\t\t      if (IDENTIFIER_GLOBAL_VALUE ($1) != error_mark_node\n-\t\t\t\t  || IDENTIFIER_ERROR_LOCUS ($1) != current_function_decl)\n-\t\t\t\t{\n-\t\t\t\t  error (\"`%s' undeclared (first use in this function)\",\n-\t\t\t\t\t IDENTIFIER_POINTER ($1));\n-\n-\t\t\t\t  if (! undeclared_variable_notice)\n-\t\t\t\t    {\n-\t\t\t\t      error (\"(Each undeclared identifier is reported only once\");\n-\t\t\t\t      error (\"for each function it appears in.)\");\n-\t\t\t\t      undeclared_variable_notice = 1;\n-\t\t\t\t    }\n-\t\t\t\t}\n-\t\t\t      $$ = error_mark_node;\n-\t\t\t      /* Prevent repeated error messages.  */\n-\t\t\t      IDENTIFIER_GLOBAL_VALUE ($1) = error_mark_node;\n-\t\t\t      IDENTIFIER_ERROR_LOCUS ($1) = current_function_decl;\n-\t\t\t    }\n-\t\t\t}\n-\t\t    }\n-\t\t  else if (TREE_TYPE ($$) == error_mark_node)\n-\t\t    $$ = error_mark_node;\n-\t\t  else if (C_DECL_ANTICIPATED ($$))\n-\t\t    {\n-\t\t      /* The first time we see a build-in function used,\n-\t\t\t if it has not been declared.  */\n-\t\t      C_DECL_ANTICIPATED ($$) = 0;\n-\t\t      if (yychar == YYEMPTY)\n-\t\t\tyychar = YYLEX;\n-\t\t      if (yychar == '(')\n-\t\t\t{\n-\t\t\t  /* Omit the implicit declaration we\n-\t\t\t     would ordinarily do, so we don't lose\n-\t\t\t     the actual built in type.\n-\t\t\t     But print a diagnostic for the mismatch.  */\n-\t\t\t    if (TREE_CODE ($$) != FUNCTION_DECL)\n-\t\t\t      error (\"`%s' implicitly declared as function\",\n-\t\t\t\t     IDENTIFIER_POINTER (DECL_NAME ($$)));\n-\t\t\t  else if ((TYPE_MODE (TREE_TYPE (TREE_TYPE ($$)))\n-\t\t\t\t    != TYPE_MODE (integer_type_node))\n-\t\t\t\t   && !VOID_TYPE_P (TREE_TYPE (TREE_TYPE ($$))))\n-\t\t\t    pedwarn (\"type mismatch in implicit declaration for built-in function `%s'\",\n-\t\t\t\t     IDENTIFIER_POINTER (DECL_NAME ($$)));\n-\t\t\t  /* If it really returns void, change that to int.  */\n-\t\t\t  if (TREE_TYPE (TREE_TYPE ($$)) == void_type_node)\n-\t\t\t    TREE_TYPE ($$)\n-\t\t\t      = build_function_type (integer_type_node,\n-\t\t\t\t\t\t     TYPE_ARG_TYPES (TREE_TYPE ($$)));\n-\t\t\t}\n-\t\t      else\n-\t\t\tpedwarn (\"built-in function `%s' used without declaration\",\n-\t\t\t\t IDENTIFIER_POINTER (DECL_NAME ($$)));\n-\n-\t\t      /* Do what we would ordinarily do when a fn is used.  */\n-\t\t      assemble_external ($$);\n-\t\t      TREE_USED ($$) = 1;\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      assemble_external ($$);\n-\t\t      TREE_USED ($$) = 1;\n-\t\t    }\n-\n-\t\t  if (TREE_CODE ($$) == CONST_DECL)\n-\t\t    {\n-\t\t      $$ = DECL_INITIAL ($$);\n-\t\t      /* This is to prevent an enum whose value is 0\n-\t\t\t from being considered a null pointer constant.  */\n-\t\t      $$ = build1 (NOP_EXPR, TREE_TYPE ($$), $$);\n-\t\t      TREE_CONSTANT ($$) = 1;\n-\t\t    }\n+\t\t  if (yychar == YYEMPTY)\n+\t\t    yychar = YYLEX;\n+\t\t  $$ = build_external_ref ($1, yychar == '(');\n \t\t}\n \t| CONSTANT\n \t| string"}, {"sha": "7c86e2676d06a6cb5aad318b9ab18a90bd767d12", "filename": "gcc/c-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=7e585d16ce4df23bfd21cf82e58dd323f9939232", "patch": "@@ -163,6 +163,7 @@ extern tree maybe_building_objc_message_expr    PARAMS ((void));\n extern tree maybe_objc_method_name\t\tPARAMS ((tree));\n extern int recognize_objc_keyword\t\tPARAMS ((void));\n extern tree build_objc_string\t\t\tPARAMS ((int, const char *));\n+extern tree lookup_objc_ivar\t\t\tPARAMS ((tree));\n \f\n /* in c-parse.in */\n extern void c_parse_init\t\t\tPARAMS ((void));\n@@ -263,6 +264,7 @@ extern tree default_conversion                  PARAMS ((tree));\n extern tree build_component_ref                 PARAMS ((tree, tree));\n extern tree build_indirect_ref                  PARAMS ((tree, const char *));\n extern tree build_array_ref                     PARAMS ((tree, tree));\n+extern tree build_external_ref\t\t\tPARAMS ((tree, int));\n extern tree build_function_call                 PARAMS ((tree, tree));\n extern tree parser_build_binary_op              PARAMS ((enum tree_code,\n \t\t\t\t\t\t\t tree, tree));"}, {"sha": "ec7eaf99ea8a993bfb61049f2045b74832088a08", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=7e585d16ce4df23bfd21cf82e58dd323f9939232", "patch": "@@ -47,6 +47,9 @@ Boston, MA 02111-1307, USA.  */\n    message within this initializer.  */\n static int missing_braces_mentioned;\n \n+/* 1 if we explained undeclared var errors.  */\n+static int undeclared_variable_notice;\n+\n static tree qualify_type\t\tPARAMS ((tree, tree));\n static int comp_target_types\t\tPARAMS ((tree, tree));\n static int function_types_compatible_p\tPARAMS ((tree, tree));\n@@ -1389,6 +1392,95 @@ build_array_ref (array, index)\n   }\n }\n \f\n+/* Build an external reference to identifier ID.  FUN indicates\n+   whether this will be used for a function call.  */\n+tree\n+build_external_ref (id, fun)\n+     tree id;\n+     int fun;\n+{\n+  tree ref;\n+  tree decl = lookup_name (id);\n+  tree objc_ivar = lookup_objc_ivar (id);\n+\n+  if (!decl || decl == error_mark_node || C_DECL_ANTICIPATED (decl))\n+    {\n+      if (objc_ivar)\n+\tref = objc_ivar;\n+      else if (fun)\n+\t{\n+\t  if (!decl || decl == error_mark_node)\n+\t    /* Ordinary implicit function declaration.  */\n+\t    ref = implicitly_declare (id);\n+\t  else\n+\t    {\n+\t      /* Implicit declaration of built-in function.  Don't\n+\t\t change the built-in declaration, but don't let this\n+\t\t go by silently, either.  */\n+\t      pedwarn (\"implicit declaration of function `%s'\",\n+\t\t       IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\t      C_DECL_ANTICIPATED (decl) = 0;  /* only issue this warning once */\n+\t      ref = decl;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  /* Reference to undeclared variable, including reference to\n+\t     builtin outside of function-call context.  */\n+\t  if (current_function_decl == 0)\n+\t    error (\"`%s' undeclared here (not in a function)\",\n+\t\t   IDENTIFIER_POINTER (id));\n+\t  else\n+\t    {\n+\t      if (IDENTIFIER_GLOBAL_VALUE (id) != error_mark_node\n+\t\t  || IDENTIFIER_ERROR_LOCUS (id) != current_function_decl)\n+\t\t{\n+\t\t  error (\"`%s' undeclared (first use in this function)\",\n+\t\t\t IDENTIFIER_POINTER (id));\n+\n+\t\t  if (! undeclared_variable_notice)\n+\t\t    {\n+\t\t      error (\"(Each undeclared identifier is reported only once\");\n+\t\t      error (\"for each function it appears in.)\");\n+\t\t      undeclared_variable_notice = 1;\n+\t\t    }\n+\t\t}\n+\t      IDENTIFIER_GLOBAL_VALUE (id) = error_mark_node;\n+\t      IDENTIFIER_ERROR_LOCUS (id) = current_function_decl;\n+\t    }\n+\t  return error_mark_node;\n+\t}\n+    }\n+  else\n+    {\n+      /* Properly declared variable or function reference.  */\n+      if (!objc_ivar)\n+\tref = decl;\n+      else if (decl != objc_ivar && IDENTIFIER_LOCAL_VALUE (id))\n+\t{\n+\t  warning (\"local declaration of `%s' hides instance variable\",\n+\t\t   IDENTIFIER_POINTER (id));\n+\t  ref = decl;\n+\t}\n+      else\n+\tref = objc_ivar;\n+    }\n+\n+  if (TREE_TYPE (ref) == error_mark_node)\n+    return error_mark_node;\n+\n+  assemble_external (ref);\n+  TREE_USED (ref) = 1;\n+\n+  if (TREE_CODE (ref) == CONST_DECL)\n+    {\n+      ref = DECL_INITIAL (ref);\n+      TREE_CONSTANT (ref) = 1;\n+    }\n+\n+  return ref;\n+}\n+\n /* Build a function call to function FUNCTION with parameters PARAMS.\n    PARAMS is a list--a chain of TREE_LIST nodes--in which the\n    TREE_VALUE of each node is a parameter-expression."}, {"sha": "ac33492a10f9da22ba97c4865321b9c199ddf90c", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=7e585d16ce4df23bfd21cf82e58dd323f9939232", "patch": "@@ -8614,3 +8614,24 @@ objc_act_parse_init ()\n   ggc_add_root (&nst_method_hash_list, 1, sizeof nst_method_hash_list, ggc_mark_hash_table);\n   ggc_add_root (&cls_method_hash_list, 1, sizeof cls_method_hash_list, ggc_mark_hash_table);\n }\n+\n+/* Look up ID as an instance variable.  */\n+tree\n+lookup_objc_ivar (id)\n+     tree id;\n+{\n+  tree decl;\n+\n+  if (objc_receiver_context && !strcmp (IDENTIFIER_POINTER (id), \"super\"))\n+    /* we have a message to super */\n+    return get_super_receiver ();\n+  else if (objc_method_context && (decl = is_ivar (objc_ivar_chain, id)))\n+    {\n+      if (is_private (decl))\n+\treturn error_mark_node;\n+      else\n+        return build_ivar_reference (id);\n+    }\n+  else\n+    return 0;\n+}"}, {"sha": "78040a2c4bc9255a6d21a7be903d8c12e700aa07", "filename": "gcc/objc/objc-parse.c", "status": "modified", "additions": 508, "deletions": 663, "changes": 1171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fobjc%2Fobjc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fobjc%2Fobjc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.c?ref=7e585d16ce4df23bfd21cf82e58dd323f9939232"}, {"sha": "b6f15b20b2774b19434621c6a3e9b1df7f144288", "filename": "gcc/objc/objc-parse.y", "status": "modified", "additions": 3, "deletions": 158, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fobjc%2Fobjc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e585d16ce4df23bfd21cf82e58dd323f9939232/gcc%2Fobjc%2Fobjc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.y?ref=7e585d16ce4df23bfd21cf82e58dd323f9939232", "patch": "@@ -213,9 +213,6 @@ static tree prefix_attributes = NULL_TREE;\n /* Stack of saved values of current_declspecs and prefix_attributes.  */\n static tree declspec_stack;\n \n-/* 1 if we explained undeclared var errors.  */\n-static int undeclared_variable_notice;\n-\n /* For __extension__, save/restore the warning flags which are\n    controlled by __extension__.  */\n #define SAVE_WARN_FLAGS()\t\\\n@@ -607,161 +604,9 @@ expr_no_commas:\n primary:\n \tIDENTIFIER\n \t\t{\n-\t\t  $$ = lastiddecl;\n-\t\t  if (!$$ || $$ == error_mark_node)\n-\t\t    {\n-\t\t      if (yychar == YYEMPTY)\n-\t\t\tyychar = YYLEX;\n-\t\t      if (yychar == '(')\n-\t\t\t{\n-\t\t\t  tree decl;\n-\n-\t\t\t  if (objc_receiver_context\n-\t\t\t      && ! (objc_receiver_context\n-\t\t\t\t    && strcmp (IDENTIFIER_POINTER ($1), \"super\")))\n-\t\t\t    /* we have a message to super */\n-\t\t\t    $$ = get_super_receiver ();\n-\t\t\t  else if (objc_method_context\n-\t\t\t\t   && (decl = is_ivar (objc_ivar_chain, $1)))\n-\t\t\t    {\n-\t\t\t      if (is_private (decl))\n-\t\t\t\t$$ = error_mark_node;\n-\t\t\t      else\n-\t\t\t\t$$ = build_ivar_reference ($1);\n-\t\t\t    }\n-\t\t\t  else\n-\t\t\t    {\n-\t\t\t      /* Ordinary implicit function declaration.  */\n-\t\t\t      $$ = implicitly_declare ($1);\n-\t\t\t      assemble_external ($$);\n-\t\t\t      TREE_USED ($$) = 1;\n-\t\t\t    }\n-\t\t\t}\n-\t\t      else if (current_function_decl == 0)\n-\t\t\t{\n-\t\t\t  error (\"`%s' undeclared here (not in a function)\",\n-\t\t\t\t IDENTIFIER_POINTER ($1));\n-\t\t\t  $$ = error_mark_node;\n-\t\t\t}\n-\t\t      else\n-\t\t\t{\n-\t\t\t  tree decl;\n-\n-\t\t          if (objc_receiver_context\n-\t\t\t      && ! strcmp (IDENTIFIER_POINTER ($1), \"super\"))\n-\t\t\t    /* we have a message to super */\n-\t\t\t    $$ = get_super_receiver ();\n-\t\t\t  else if (objc_method_context\n-\t\t\t\t   && (decl = is_ivar (objc_ivar_chain, $1)))\n-\t\t\t    {\n-\t\t\t      if (is_private (decl))\n-\t\t\t\t$$ = error_mark_node;\n-\t\t\t      else\n-\t\t\t\t$$ = build_ivar_reference ($1);\n-\t\t\t    }\n-\t\t\t  else\n-\t\t\t    {\n-\t\t\t      if (IDENTIFIER_GLOBAL_VALUE ($1) != error_mark_node\n-\t\t\t\t  || IDENTIFIER_ERROR_LOCUS ($1) != current_function_decl)\n-\t\t\t\t{\n-\t\t\t\t  error (\"`%s' undeclared (first use in this function)\",\n-\t\t\t\t\t IDENTIFIER_POINTER ($1));\n-\n-\t\t\t\t  if (! undeclared_variable_notice)\n-\t\t\t\t    {\n-\t\t\t\t      error (\"(Each undeclared identifier is reported only once\");\n-\t\t\t\t      error (\"for each function it appears in.)\");\n-\t\t\t\t      undeclared_variable_notice = 1;\n-\t\t\t\t    }\n-\t\t\t\t}\n-\t\t\t      $$ = error_mark_node;\n-\t\t\t      /* Prevent repeated error messages.  */\n-\t\t\t      IDENTIFIER_GLOBAL_VALUE ($1) = error_mark_node;\n-\t\t\t      IDENTIFIER_ERROR_LOCUS ($1) = current_function_decl;\n-\t\t\t    }\n-\t\t\t}\n-\t\t    }\n-\t\t  else if (TREE_TYPE ($$) == error_mark_node)\n-\t\t    $$ = error_mark_node;\n-\t\t  else if (C_DECL_ANTICIPATED ($$))\n-\t\t    {\n-\t\t      /* The first time we see a build-in function used,\n-\t\t\t if it has not been declared.  */\n-\t\t      C_DECL_ANTICIPATED ($$) = 0;\n-\t\t      if (yychar == YYEMPTY)\n-\t\t\tyychar = YYLEX;\n-\t\t      if (yychar == '(')\n-\t\t\t{\n-\t\t\t  /* Omit the implicit declaration we\n-\t\t\t     would ordinarily do, so we don't lose\n-\t\t\t     the actual built in type.\n-\t\t\t     But print a diagnostic for the mismatch.  */\n-\t\t\t  if (objc_method_context\n-\t\t\t      && is_ivar (objc_ivar_chain, $1))\n-\t\t\t    error (\"Instance variable `%s' implicitly declared as function\",\n-\t\t\t\t   IDENTIFIER_POINTER (DECL_NAME ($$)));\n-\t\t\t  else\n-\t\t\t    if (TREE_CODE ($$) != FUNCTION_DECL)\n-\t\t\t      error (\"`%s' implicitly declared as function\",\n-\t\t\t\t     IDENTIFIER_POINTER (DECL_NAME ($$)));\n-\t\t\t  else if ((TYPE_MODE (TREE_TYPE (TREE_TYPE ($$)))\n-\t\t\t\t    != TYPE_MODE (integer_type_node))\n-\t\t\t\t   && !VOID_TYPE_P (TREE_TYPE (TREE_TYPE ($$))))\n-\t\t\t    pedwarn (\"type mismatch in implicit declaration for built-in function `%s'\",\n-\t\t\t\t     IDENTIFIER_POINTER (DECL_NAME ($$)));\n-\t\t\t  /* If it really returns void, change that to int.  */\n-\t\t\t  if (TREE_TYPE (TREE_TYPE ($$)) == void_type_node)\n-\t\t\t    TREE_TYPE ($$)\n-\t\t\t      = build_function_type (integer_type_node,\n-\t\t\t\t\t\t     TYPE_ARG_TYPES (TREE_TYPE ($$)));\n-\t\t\t}\n-\t\t      else\n-\t\t\tpedwarn (\"built-in function `%s' used without declaration\",\n-\t\t\t\t IDENTIFIER_POINTER (DECL_NAME ($$)));\n-\n-\t\t      /* Do what we would ordinarily do when a fn is used.  */\n-\t\t      assemble_external ($$);\n-\t\t      TREE_USED ($$) = 1;\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      assemble_external ($$);\n-\t\t      TREE_USED ($$) = 1;\n-\t\t      /* we have a definition - still check if iVariable */\n-\n-\t\t      if (!objc_receiver_context\n-\t\t\t  || (objc_receiver_context\n-\t\t\t      && strcmp (IDENTIFIER_POINTER ($1), \"super\")))\n-                        {\n-\t\t\t  tree decl;\n-\n-\t\t\t  if (objc_method_context\n-\t\t\t      && (decl = is_ivar (objc_ivar_chain, $1)))\n-                            {\n-                              if (IDENTIFIER_LOCAL_VALUE ($1))\n-                                warning (\"local declaration of `%s' hides instance variable\",\n-\t                                 IDENTIFIER_POINTER ($1));\n-                              else\n- \t\t\t\t{\n- \t\t\t\t  if (is_private (decl))\n- \t\t\t\t    $$ = error_mark_node;\n- \t\t\t\t  else\n- \t\t\t\t    $$ = build_ivar_reference ($1);\n- \t\t\t\t}\n-                            }\n-\t\t\t}\n-                      else /* we have a message to super */\n-\t\t        $$ = get_super_receiver ();\n-\t\t    }\n-\n-\t\t  if (TREE_CODE ($$) == CONST_DECL)\n-\t\t    {\n-\t\t      $$ = DECL_INITIAL ($$);\n-\t\t      /* This is to prevent an enum whose value is 0\n-\t\t\t from being considered a null pointer constant.  */\n-\t\t      $$ = build1 (NOP_EXPR, TREE_TYPE ($$), $$);\n-\t\t      TREE_CONSTANT ($$) = 1;\n-\t\t    }\n+\t\t  if (yychar == YYEMPTY)\n+\t\t    yychar = YYLEX;\n+\t\t  $$ = build_external_ref ($1, yychar == '(');\n \t\t}\n \t| CONSTANT\n \t| string"}]}