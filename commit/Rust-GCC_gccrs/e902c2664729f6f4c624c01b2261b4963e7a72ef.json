{"sha": "e902c2664729f6f4c624c01b2261b4963e7a72ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkwMmMyNjY0NzI5ZjZmNGM2MjRjMDFiMjI2MWI0OTYzZTdhNzJlZg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2012-07-26T14:23:51Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2012-07-26T14:23:51Z"}, "message": "mn10300.c (REG_SAVE_BYTES): Delete.\n\n\t* config/mn10300/mn10300.c (REG_SAVE_BYTES): Delete.\n\t(mn10300_get_live_callee_saved_regs): If requested return a count\n\tof the number of bytes in the mask.\n\t(mn10300_expand_prologue): Add argument to invocation of\n\tmn10300_get_live_callee_regs.\n\t(mn10300_expand_epilogue): Compute reg_save_bytes by calling\n\tmn10300_get_live_callee_saved_regs.\n\t(mn10300_initial_offset): Likewise.\n\t* config/mn10300/mn10300-protos.h (mn10300_get_live_callee_saved_regs):\n\tUpdate prototype.\n\t* config/mn10300/mn10300.md (return_ret): Add argument to\n\tinvocation of mn10300_get_live_callee_saved_regs.\n\nFrom-SVN: r189892", "tree": {"sha": "926ec22e906c5b74ad2932f58ac01b54f9967243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/926ec22e906c5b74ad2932f58ac01b54f9967243"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e902c2664729f6f4c624c01b2261b4963e7a72ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e902c2664729f6f4c624c01b2261b4963e7a72ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e902c2664729f6f4c624c01b2261b4963e7a72ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e902c2664729f6f4c624c01b2261b4963e7a72ef/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d38933a0032bf9b04639575267bcb25e8c6a4463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38933a0032bf9b04639575267bcb25e8c6a4463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d38933a0032bf9b04639575267bcb25e8c6a4463"}], "stats": {"total": 73, "additions": 48, "deletions": 25}, "files": [{"sha": "ab768846c0b92218c787ef6eb99f7ab7991940c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e902c2664729f6f4c624c01b2261b4963e7a72ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e902c2664729f6f4c624c01b2261b4963e7a72ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e902c2664729f6f4c624c01b2261b4963e7a72ef", "patch": "@@ -1,3 +1,18 @@\n+2012-07-26  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/mn10300/mn10300.c (REG_SAVE_BYTES): Delete.\n+\t(mn10300_get_live_callee_saved_regs): If requested return a count\n+\tof the number of bytes in the mask.\n+\t(mn10300_expand_prologue): Add argument to invocation of\n+\tmn10300_get_live_callee_regs.\n+\t(mn10300_expand_epilogue): Compute reg_save_bytes by calling\n+\tmn10300_get_live_callee_saved_regs.\n+\t(mn10300_initial_offset): Likewise.\n+\t* config/mn10300/mn10300-protos.h (mn10300_get_live_callee_saved_regs):\n+\tUpdate prototype.\n+\t* config/mn10300/mn10300.md (return_ret): Add argument to\n+\tinvocation of mn10300_get_live_callee_saved_regs.\n+\n 2012-07-26  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR regression/54084"}, {"sha": "b6760e8e40722d6ae0222ba0976d43f5a0970a8a", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e902c2664729f6f4c624c01b2261b4963e7a72ef/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e902c2664729f6f4c624c01b2261b4963e7a72ef/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=e902c2664729f6f4c624c01b2261b4963e7a72ef", "patch": "@@ -25,7 +25,7 @@ extern int   mn10300_legitimate_pic_operand_p (rtx);\n extern rtx   mn10300_legitimize_reload_address (rtx, enum machine_mode,\n \t\t\t\t\t\tint, int, int);\n extern bool  mn10300_function_value_regno_p (const unsigned int);\n-extern int   mn10300_get_live_callee_saved_regs (void);\n+extern unsigned int   mn10300_get_live_callee_saved_regs (unsigned int *);\n extern bool  mn10300_hard_regno_mode_ok (unsigned int, enum machine_mode);\n extern bool  mn10300_modes_tieable (enum machine_mode, enum machine_mode);\n extern const char *mn10300_output_add (rtx[3], bool);"}, {"sha": "a8a4050ebdfa4da0dbd40b2b767595ccbd19c0a2", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e902c2664729f6f4c624c01b2261b4963e7a72ef/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e902c2664729f6f4c624c01b2261b4963e7a72ef/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=e902c2664729f6f4c624c01b2261b4963e7a72ef", "patch": "@@ -57,18 +57,6 @@ int mn10300_protect_label;\n /* Selected processor type for tuning.  */\n enum processor_type mn10300_tune_cpu = PROCESSOR_DEFAULT;\n \n-/* The size of the callee register save area.  Right now we save everything\n-   on entry since it costs us nothing in code size.  It does cost us from a\n-   speed standpoint, so we want to optimize this sooner or later.  */\n-#define REG_SAVE_BYTES (4 * df_regs_ever_live_p (2)\t\t\\\n-\t\t\t+ 4 * df_regs_ever_live_p (3)\t\t\\\n-\t\t        + 4 * df_regs_ever_live_p (6)\t\t\\\n-\t\t\t+ 4 * df_regs_ever_live_p (7)\t\t\\\n-\t\t\t+ 16 * (df_regs_ever_live_p (14)\t\\\n-\t\t\t\t|| df_regs_ever_live_p (15)\t\\\n-\t\t\t\t|| df_regs_ever_live_p (16)\t\\\n-\t\t\t\t|| df_regs_ever_live_p (17)))\n-\n #define CC_FLAG_Z\t1\n #define CC_FLAG_N\t2\n #define CC_FLAG_C\t4\n@@ -635,20 +623,35 @@ mn10300_can_use_rets_insn (void)\n \n /* Returns the set of live, callee-saved registers as a bitmask.  The\n    callee-saved extended registers cannot be stored individually, so\n-   all of them will be included in the mask if any one of them is used.  */\n+   Also returns the number of bytes in the registers in the mask if\n+   BYTES_SAVED is not NULL.  */\n \n-int\n-mn10300_get_live_callee_saved_regs (void)\n+unsigned int\n+mn10300_get_live_callee_saved_regs (unsigned int * bytes_saved)\n {\n   int mask;\n   int i;\n+  unsigned int count;\n \n-  mask = 0;\n+  count = mask = 0;\n   for (i = 0; i <= LAST_EXTENDED_REGNUM; i++)\n     if (df_regs_ever_live_p (i) && ! call_really_used_regs[i])\n-      mask |= (1 << i);\n+      {\n+\tmask |= (1 << i);\n+\t++ count;\n+      }\n+\n   if ((mask & 0x3c000) != 0)\n-    mask |= 0x3c000;\n+    {\n+      for (i = 0x04000; i < 0x40000; i <<= 1)\n+\tif ((mask & i) == 0)\n+\t  ++ count;\n+      \n+      mask |= 0x3c000;\n+    }\n+\n+  if (bytes_saved)\n+    * bytes_saved = count * UNITS_PER_WORD;\n \n   return mask;\n }\n@@ -742,7 +745,7 @@ mn10300_expand_prologue (void)\n   HOST_WIDE_INT size = mn10300_frame_size ();\n \n   /* If we use any of the callee-saved registers, save them now.  */\n-  mn10300_gen_multiple_store (mn10300_get_live_callee_saved_regs ());\n+  mn10300_gen_multiple_store (mn10300_get_live_callee_saved_regs (NULL));\n \n   if (TARGET_AM33_2 && fp_regs_to_save ())\n     {\n@@ -999,8 +1002,10 @@ void\n mn10300_expand_epilogue (void)\n {\n   HOST_WIDE_INT size = mn10300_frame_size ();\n-  int reg_save_bytes = REG_SAVE_BYTES;\n-  \n+  unsigned int reg_save_bytes;\n+\n+  mn10300_get_live_callee_saved_regs (& reg_save_bytes);\n+\n   if (TARGET_AM33_2 && fp_regs_to_save ())\n     {\n       int num_regs_to_save = fp_regs_to_save (), i;\n@@ -1220,7 +1225,7 @@ mn10300_expand_epilogue (void)\n   if (mn10300_can_use_rets_insn ())\n     emit_jump_insn (ret_rtx);\n   else\n-    emit_jump_insn (gen_return_ret (GEN_INT (size + REG_SAVE_BYTES)));\n+    emit_jump_insn (gen_return_ret (GEN_INT (size + reg_save_bytes)));\n }\n \n /* Recognize the PARALLEL rtx generated by mn10300_gen_multiple_store().\n@@ -1435,7 +1440,10 @@ mn10300_initial_offset (int from, int to)\n      is the size of the callee register save area.  */\n   if (from == ARG_POINTER_REGNUM)\n     {\n-      diff += REG_SAVE_BYTES;\n+      unsigned int reg_save_bytes;\n+\n+      mn10300_get_live_callee_saved_regs (& reg_save_bytes);\n+      diff += reg_save_bytes;\n       diff += 4 * fp_regs_to_save ();\n     }\n "}, {"sha": "ee92b68a535a54abdb3cd3f5f88722e879cff067", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e902c2664729f6f4c624c01b2261b4963e7a72ef/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e902c2664729f6f4c624c01b2261b4963e7a72ef/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=e902c2664729f6f4c624c01b2261b4963e7a72ef", "patch": "@@ -2048,7 +2048,7 @@\n {\n   /* The RETF insn is up to 3 cycles faster than RET.  */\n   fputs ((mn10300_can_use_retf_insn () ? \"\\tretf \" : \"\\tret \"), asm_out_file);\n-  mn10300_print_reg_list (asm_out_file, mn10300_get_live_callee_saved_regs ());\n+  mn10300_print_reg_list (asm_out_file, mn10300_get_live_callee_saved_regs (NULL));\n   fprintf (asm_out_file, \",%d\\n\", (int) INTVAL (operands[0]));\n   return \"\";\n })"}]}