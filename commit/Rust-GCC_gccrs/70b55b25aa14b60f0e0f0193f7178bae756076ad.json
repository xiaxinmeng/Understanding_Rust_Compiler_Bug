{"sha": "70b55b25aa14b60f0e0f0193f7178bae756076ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBiNTViMjVhYTE0YjYwZjBlMGYwMTkzZjcxNzhiYWU3NTYwNzZhZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-08T10:04:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-08T10:04:46Z"}, "message": "postreload: Fix autoinc handling in reload_cse_move2add [PR94516]\n\nThe following testcase shows two separate issues caused by the cselib\nchanges.\nOne is that through the cselib sp tracking improvements on\n... r12 = rsp; rsp -= 8; push cst1; push cst2; push cst3; call\nrsp += 32; rsp -= 8; push cst4; push cst5; push cst6; call\nrsp += 32; rsp -= 8; push cst7; push cst8; push cst9; call\nrsp += 32\nreload_cse_simplify_set decides to optimize the rsp += 32 insns\ninto rsp = r12 because cselib figures that the r12 register holds the right\nvalue.  From the pure cost perspective that seems like a win and on its own\nat least for -Os that would be beneficial, except that there are those\nrsp -= 8 stack adjustments after it, where rsp += 32; rsp -= 8; is optimized\ninto rsp += 24; by the csa pass, but rsp = r12; rsp -= 8 can't.  Dunno\nwhat to do about this part, the PR has a hack in a comment.\n\nAnyway, the following patch fixes the other part, which isn't a missed\noptimization, but a wrong-code issue.  The problem is that the pushes of\nconstant are on x86 represented through PRE_MODIFY and while\nmove2add_note_store has some code to handle {PRE,POST}_{INC,DEC} without\nREG_INC note, it doesn't handle {PRE,POST}_MODIFY (that would be enough\nto fix this testcase).  But additionally it looks misplaced, because\nmove2add_note_store is only called on the rtxes that are stored into,\nwhile RTX_AUTOINC can happen not just in those, but anywhere else in the\ninstruction (e.g. pop insn can have autoinc in the SET_SRC MEM).\nREG_INC note seems to be required for any autoinc except for stack pointer\nautoinc which doesn't have those notes, so this patch just handles\nthe sp autoinc after the REG_INC note handling loop.\n\n2020-04-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/94516\n\t* postreload.c: Include rtl-iter.h.\n\t(reload_cse_move2add): Handle SP autoinc here by FOR_EACH_SUBRTX_VAR\n\tlooking for all MEMs with RTX_AUTOINC operand.\n\t(move2add_note_store): Remove {PRE,POST}_{INC,DEC} handling.\n\n\t* gcc.dg/torture/pr94516.c: New test.", "tree": {"sha": "7a936b54fdd0b5ee4d715cdd6cdf7f5b4a22116b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a936b54fdd0b5ee4d715cdd6cdf7f5b4a22116b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70b55b25aa14b60f0e0f0193f7178bae756076ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b55b25aa14b60f0e0f0193f7178bae756076ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70b55b25aa14b60f0e0f0193f7178bae756076ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b55b25aa14b60f0e0f0193f7178bae756076ad/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ed1ff7ecbfbaef0a6dfd116f562192f08c50bb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed1ff7ecbfbaef0a6dfd116f562192f08c50bb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed1ff7ecbfbaef0a6dfd116f562192f08c50bb7"}], "stats": {"total": 71, "additions": 60, "deletions": 11}, "files": [{"sha": "d432912a9738f071e586066d0612df50738fed64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b55b25aa14b60f0e0f0193f7178bae756076ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b55b25aa14b60f0e0f0193f7178bae756076ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70b55b25aa14b60f0e0f0193f7178bae756076ad", "patch": "@@ -1,3 +1,11 @@\n+2020-04-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/94516\n+\t* postreload.c: Include rtl-iter.h.\n+\t(reload_cse_move2add): Handle SP autoinc here by FOR_EACH_SUBRTX_VAR\n+\tlooking for all MEMs with RTX_AUTOINC operand.\n+\t(move2add_note_store): Remove {PRE,POST}_{INC,DEC} handling.\n+\n 2020-04-08  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* omp-grid.c (grid_eliminate_combined_simd_part): Use"}, {"sha": "8849679ae0fa0c2016d8d6514c5bb5eb42f5f73c", "filename": "gcc/postreload.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b55b25aa14b60f0e0f0193f7178bae756076ad/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b55b25aa14b60f0e0f0193f7178bae756076ad/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=70b55b25aa14b60f0e0f0193f7178bae756076ad", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"dbgcnt.h\"\n #include \"function-abi.h\"\n+#include \"rtl-iter.h\"\n \n static int reload_cse_noop_set_p (rtx);\n static bool reload_cse_simplify (rtx_insn *, rtx);\n@@ -2090,6 +2091,21 @@ reload_cse_move2add (rtx_insn *first)\n \t\t}\n \t    }\n \t}\n+\n+      /* There are no REG_INC notes for SP autoinc.  */\n+      subrtx_var_iterator::array_type array;\n+      FOR_EACH_SUBRTX_VAR (iter, array, PATTERN (insn), NONCONST)\n+\t{\n+\t  rtx mem = *iter;\n+\t  if (mem\n+\t      && MEM_P (mem)\n+\t      && GET_RTX_CLASS (GET_CODE (XEXP (mem, 0))) == RTX_AUTOINC)\n+\t    {\n+\t      if (XEXP (XEXP (mem, 0), 0) == stack_pointer_rtx)\n+\t\treg_mode[STACK_POINTER_REGNUM] = VOIDmode;\n+\t    }\n+\t}\n+\n       note_stores (insn, move2add_note_store, insn);\n \n       /* If INSN is a conditional branch, we try to extract an\n@@ -2144,17 +2160,6 @@ move2add_note_store (rtx dst, const_rtx set, void *data)\n   unsigned int regno = 0;\n   scalar_int_mode mode;\n \n-  /* Some targets do argument pushes without adding REG_INC notes.  */\n-\n-  if (MEM_P (dst))\n-    {\n-      dst = XEXP (dst, 0);\n-      if (GET_CODE (dst) == PRE_INC || GET_CODE (dst) == POST_INC\n-\t  || GET_CODE (dst) == PRE_DEC || GET_CODE (dst) == POST_DEC)\n-\treg_mode[REGNO (XEXP (dst, 0))] = VOIDmode;\n-      return;\n-    }\n-\n   if (GET_CODE (dst) == SUBREG)\n     regno = subreg_regno (dst);\n   else if (REG_P (dst))"}, {"sha": "f0d7dae5719e3b3c14c88e265e49738803455870", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b55b25aa14b60f0e0f0193f7178bae756076ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b55b25aa14b60f0e0f0193f7178bae756076ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70b55b25aa14b60f0e0f0193f7178bae756076ad", "patch": "@@ -1,3 +1,8 @@\n+2020-04-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/94516\n+\t* gcc.dg/torture/pr94516.c: New test.\n+\n 2020-04-08  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR middle-end/94120"}, {"sha": "b1b68ce57741ba2d7277e784d5ee6e7849c97f70", "filename": "gcc/testsuite/gcc.dg/torture/pr94516.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b55b25aa14b60f0e0f0193f7178bae756076ad/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr94516.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b55b25aa14b60f0e0f0193f7178bae756076ad/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr94516.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr94516.c?ref=70b55b25aa14b60f0e0f0193f7178bae756076ad", "patch": "@@ -0,0 +1,31 @@\n+/* PR rtl-optimization/94516 */\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fpie\" { target pie } } */\n+\n+struct S { unsigned char *a; unsigned int b; };\n+typedef int V __attribute__((vector_size (sizeof (int) * 4)));\n+\n+__attribute__((noipa)) void\n+foo (const char *a, const char *b, const char *c, const struct S *d, int e, int f, int g, int h, int i)\n+{\n+  V v = { 1, 2, 3, 4 };\n+  asm volatile (\"\" : : \"g\" (&v) : \"memory\");\n+  v += (V) { 5, 6, 7, 8 };\n+  asm volatile (\"\" : : \"g\" (&v) : \"memory\");\n+}\n+\n+__attribute__((noipa)) void\n+bar (void)\n+{\n+  const struct S s = { \"foobarbaz\", 9 };\n+  foo (\"foo\", (const char *) 0, \"corge\", &s, 0, 1, 0, -12, -31);\n+  foo (\"bar\", \"quux\", \"qux\", &s, 0, 0, 9, 0, 0);\n+  foo (\"baz\", (const char *) 0, \"qux\", &s, 1, 0, 0, -12, -32);\n+}\n+\n+int\n+main ()\n+{\n+  bar ();\n+  return 0;\n+}"}]}