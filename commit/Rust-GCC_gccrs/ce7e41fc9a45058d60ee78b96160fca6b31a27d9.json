{"sha": "ce7e41fc9a45058d60ee78b96160fca6b31a27d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U3ZTQxZmM5YTQ1MDU4ZDYwZWU3OGI5NjE2MGZjYTZiMzFhMjdkOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-11-22T00:41:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-11-22T00:41:38Z"}, "message": "tree-vect-generic.c (optimize_vector_constructor): New function.\n\n\t* tree-vect-generic.c (optimize_vector_constructor): New function.\n\t(expand_vector_operations_1): Call it.\n\n\t* gcc.dg/vect/vect-124.c: New test.\n\nFrom-SVN: r205240", "tree": {"sha": "b5b01c9e38eaea6ede613aa9a9bbbdd6bc1698cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5b01c9e38eaea6ede613aa9a9bbbdd6bc1698cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce7e41fc9a45058d60ee78b96160fca6b31a27d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce7e41fc9a45058d60ee78b96160fca6b31a27d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce7e41fc9a45058d60ee78b96160fca6b31a27d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce7e41fc9a45058d60ee78b96160fca6b31a27d9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "061bdebb8b9762fabff9712edffc3f4a18ebac87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/061bdebb8b9762fabff9712edffc3f4a18ebac87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/061bdebb8b9762fabff9712edffc3f4a18ebac87"}], "stats": {"total": 126, "additions": 126, "deletions": 0}, "files": [{"sha": "33f32b3b890a53cd9239b3a82574336ebc523168", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce7e41fc9a45058d60ee78b96160fca6b31a27d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce7e41fc9a45058d60ee78b96160fca6b31a27d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce7e41fc9a45058d60ee78b96160fca6b31a27d9", "patch": "@@ -1,3 +1,8 @@\n+2013-11-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-vect-generic.c (optimize_vector_constructor): New function.\n+\t(expand_vector_operations_1): Call it.\n+\n 2013-11-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_expand_special_args_builtin): Use"}, {"sha": "220a5eca77fb4d3a7faaffaae5ee7486ab3dd701", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce7e41fc9a45058d60ee78b96160fca6b31a27d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce7e41fc9a45058d60ee78b96160fca6b31a27d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ce7e41fc9a45058d60ee78b96160fca6b31a27d9", "patch": "@@ -1,3 +1,7 @@\n+2013-11-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/vect/vect-124.c: New test.\n+\n 2013-11-21  Cary Coutant  <ccoutant@google.com>\n \n \t* gcc.dg/debug/dwarf2/mlt1.c: New test."}, {"sha": "dc81c3169c76d8190e2af4447d119924c1ddc876", "filename": "gcc/testsuite/gcc.dg/vect/vect-124.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce7e41fc9a45058d60ee78b96160fca6b31a27d9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-124.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce7e41fc9a45058d60ee78b96160fca6b31a27d9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-124.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-124.c?ref=ce7e41fc9a45058d60ee78b96160fca6b31a27d9", "patch": "@@ -0,0 +1,28 @@\n+#include \"tree-vect.h\"\n+\n+#ifndef N\n+#define N 64\n+#endif\n+\n+int a[N];\n+\n+__attribute__((noinline, noclone)) void\n+foo (int x)\n+{\n+  int i;\n+  for (i = 0; i < N; i++, x += 3)\n+    a[i] = x;\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  \n+  check_vect ();\n+  foo (6);\n+  for (i = 0; i < N; i++)\n+    if (a[i] != i * 3 + 6)\n+      abort ();\n+  return 0;\n+}"}, {"sha": "fc1c7b14fb9fe7876ed85ad72d59e959047fed85", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce7e41fc9a45058d60ee78b96160fca6b31a27d9/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce7e41fc9a45058d60ee78b96160fca6b31a27d9/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=ce7e41fc9a45058d60ee78b96160fca6b31a27d9", "patch": "@@ -988,6 +988,84 @@ expand_vector_operation (gimple_stmt_iterator *gsi, tree type, tree compute_type\n \t\t\t\t    gimple_assign_rhs1 (assign),\n \t\t\t\t    gimple_assign_rhs2 (assign), code);\n }\n+\n+/* Try to optimize\n+   a_5 = { b_7, b_7 + 3, b_7 + 6, b_7 + 9 };\n+   style stmts into:\n+   _9 = { b_7, b_7, b_7, b_7 };\n+   a_5 = _9 + { 0, 3, 6, 9 };\n+   because vector splat operation is usually more efficient\n+   than piecewise initialization of the vector.  */\n+\n+static void\n+optimize_vector_constructor (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  tree lhs = gimple_assign_lhs (stmt);\n+  tree rhs = gimple_assign_rhs1 (stmt);\n+  tree type = TREE_TYPE (rhs);\n+  unsigned int i, j, nelts = TYPE_VECTOR_SUBPARTS (type);\n+  bool all_same = true;\n+  constructor_elt *elt;\n+  tree *cst;\n+  gimple g;\n+  tree base = NULL_TREE;\n+\n+  if (nelts <= 2 || CONSTRUCTOR_NELTS (rhs) != nelts)\n+    return;\n+  FOR_EACH_VEC_SAFE_ELT (CONSTRUCTOR_ELTS (rhs), i, elt)\n+    if (TREE_CODE (elt->value) != SSA_NAME\n+\t|| TREE_CODE (TREE_TYPE (elt->value)) == VECTOR_TYPE)\n+      return;\n+    else\n+      {\n+\ttree this_base = elt->value;\n+\tif (this_base != CONSTRUCTOR_ELT (rhs, 0)->value)\n+\t  all_same = false;\n+\tfor (j = 0; j < nelts + 1; j++)\n+\t  {\n+\t    g = SSA_NAME_DEF_STMT (this_base);\n+\t    if (is_gimple_assign (g)\n+\t\t&& gimple_assign_rhs_code (g) == PLUS_EXPR\n+\t\t&& TREE_CODE (gimple_assign_rhs2 (g)) == INTEGER_CST\n+\t\t&& TREE_CODE (gimple_assign_rhs1 (g)) == SSA_NAME\n+\t\t&& !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (gimple_assign_rhs1 (g)))\n+\t      this_base = gimple_assign_rhs1 (g);\n+\t    else\n+\t      break;\n+\t  }\n+\tif (i == 0)\n+\t  base = this_base;\n+\telse if (this_base != base)\n+\t  return;\n+      }\n+  if (all_same)\n+    return;\n+  cst = XALLOCAVEC (tree, nelts);\n+  for (i = 0; i < nelts; i++)\n+    {\n+      tree this_base = CONSTRUCTOR_ELT (rhs, i)->value;;\n+      cst[i] = build_zero_cst (TREE_TYPE (base));\n+      while (this_base != base)\n+\t{\n+\t  g = SSA_NAME_DEF_STMT (this_base);\n+\t  cst[i] = fold_binary (PLUS_EXPR, TREE_TYPE (base),\n+\t\t\t\tcst[i], gimple_assign_rhs2 (g));\n+\t  if (cst[i] == NULL_TREE\n+\t      || TREE_CODE (cst[i]) != INTEGER_CST\n+\t      || TREE_OVERFLOW (cst[i]))\n+\t    return;\n+\t  this_base = gimple_assign_rhs1 (g);\n+\t}\n+    }\n+  for (i = 0; i < nelts; i++)\n+    CONSTRUCTOR_ELT (rhs, i)->value = base;\n+  g = gimple_build_assign (make_ssa_name (type, NULL), rhs);\n+  gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+  g = gimple_build_assign_with_ops (PLUS_EXPR, lhs, gimple_assign_lhs (g),\n+\t\t\t\t    build_vector (type, cst));\n+  gsi_replace (gsi, g, false);\n+}\n \f\n /* Return a type for the widest vector mode whose components are of type\n    TYPE, or NULL_TREE if none is found.  */\n@@ -1278,6 +1356,17 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n       expand_vector_condition (gsi);\n       return;\n     }\n+\n+  if (code == CONSTRUCTOR\n+      && TREE_CODE (lhs) == SSA_NAME\n+      && VECTOR_MODE_P (TYPE_MODE (TREE_TYPE (lhs)))\n+      && !gimple_clobber_p (stmt)\n+      && optimize)\n+    {\n+      optimize_vector_constructor (gsi);\n+      return;\n+    }\n+\n   if (rhs_class != GIMPLE_UNARY_RHS && rhs_class != GIMPLE_BINARY_RHS)\n     return;\n "}]}