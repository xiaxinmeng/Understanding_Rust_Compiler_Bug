{"sha": "292f38694a71cd35b5eb3239e39bff7bf2b244e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkyZjM4Njk0YTcxY2QzNWI1ZWIzMjM5ZTM5YmZmN2JmMmIyNDRlNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-04-27T05:03:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-27T05:03:35Z"}, "message": "flow.c (propagate_one_insn): Break out from propagate_block.\n\n        * flow.c (propagate_one_insn): Break out from propagate_block.\n        (init_propagate_block_info): Likewise.\n        (free_propagate_block_info): Likewise.\n        (propagate_block): Use them.  Export.\n        * basic-block.h: Declare them all.\n\nFrom-SVN: r33460", "tree": {"sha": "90175835ba5241d36507c7d8a595c87194368f89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90175835ba5241d36507c7d8a595c87194368f89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/292f38694a71cd35b5eb3239e39bff7bf2b244e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292f38694a71cd35b5eb3239e39bff7bf2b244e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/292f38694a71cd35b5eb3239e39bff7bf2b244e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292f38694a71cd35b5eb3239e39bff7bf2b244e4/comments", "author": null, "committer": null, "parents": [{"sha": "7f8a79ba7ef4483fe205890213a5584c76683d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8a79ba7ef4483fe205890213a5584c76683d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f8a79ba7ef4483fe205890213a5584c76683d45"}], "stats": {"total": 533, "additions": 290, "deletions": 243}, "files": [{"sha": "5598f71cada5bc8726346a0b3c1c3a266d780f78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292f38694a71cd35b5eb3239e39bff7bf2b244e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292f38694a71cd35b5eb3239e39bff7bf2b244e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=292f38694a71cd35b5eb3239e39bff7bf2b244e4", "patch": "@@ -1,3 +1,11 @@\n+2000-04-26  Richard Henderson  <rth@cygnus.com>\n+\n+\t* flow.c (propagate_one_insn): Break out from propagate_block.\n+\t(init_propagate_block_info): Likewise.\n+\t(free_propagate_block_info): Likewise.\n+\t(propagate_block): Use them.  Export.\n+\t* basic-block.h: Declare them all.\n+\n 2000-04-26  Richard Henderson  <rth@cygnus.com>\n \n \t* basic-block.h (life_analysis): Declare here ..."}, {"sha": "f9eb268458a585674ecb51c372a20e2985adc503", "filename": "gcc/basic-block.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292f38694a71cd35b5eb3239e39bff7bf2b244e4/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292f38694a71cd35b5eb3239e39bff7bf2b244e4/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=292f38694a71cd35b5eb3239e39bff7bf2b244e4", "patch": "@@ -431,6 +431,13 @@ extern void life_analysis\tPARAMS ((rtx, FILE *, int));\n extern void update_life_info\tPARAMS ((sbitmap, enum update_life_extent,\n \t\t\t\t\t int));\n extern int count_or_remove_death_notes\tPARAMS ((sbitmap, int));\n+extern void propagate_block\tPARAMS ((basic_block, regset, regset, int));\n+\n+struct propagate_block_info;\n+extern rtx propagate_one_insn\tPARAMS ((struct propagate_block_info *, rtx));\n+extern struct propagate_block_info *init_propagate_block_info\n+  PARAMS ((basic_block, regset, regset, int));\n+extern void free_propagate_block_info PARAMS ((struct propagate_block_info *));\n \n /* In lcm.c */\n extern struct edge_list *pre_edge_lcm \tPARAMS ((FILE *, int, sbitmap *,"}, {"sha": "dbff5de3c70623bbabefba5114df14cd6254b3ae", "filename": "gcc/flow.c", "status": "modified", "additions": 275, "deletions": 243, "changes": 518, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/292f38694a71cd35b5eb3239e39bff7bf2b244e4/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/292f38694a71cd35b5eb3239e39bff7bf2b244e4/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=292f38694a71cd35b5eb3239e39bff7bf2b244e4", "patch": "@@ -329,8 +329,6 @@ static int set_phi_alternative_reg      PARAMS ((rtx, int, int, void *));\n static void calculate_global_regs_live\tPARAMS ((sbitmap, sbitmap, int));\n static void propagate_block_delete_insn PARAMS ((basic_block, rtx));\n static rtx propagate_block_delete_libcall PARAMS ((basic_block, rtx, rtx));\n-static void propagate_block\t\tPARAMS ((basic_block, regset,\n-\t\t\t\t\t\t regset, int));\n static int insn_dead_p\t\t\tPARAMS ((struct propagate_block_info *,\n \t\t\t\t\t\t rtx, int, rtx));\n static int libcall_dead_p\t\tPARAMS ((struct propagate_block_info *,\n@@ -3267,285 +3265,319 @@ propagate_block_delete_libcall (bb, insn, note)\n   return before;\n }\n \n-/* Compute the registers live at the beginning of a basic block BB from\n-   those live at the end.\n-\n-   When called, REG_LIVE contains those live at the end.  On return, it\n-   contains those live at the beginning.\n+/* Update the life-status of regs for one insn.  Return the previous insn.  */\n \n-   LOCAL_SET, if non-null, will be set with all registers killed by \n-   this basic block.  */\n-\n-static void\n-propagate_block (bb, live, local_set, flags)\n-     basic_block bb;\n-     regset live;\n-     regset local_set;\n-     int flags;\n+rtx\n+propagate_one_insn (pbi, insn)\n+     struct propagate_block_info *pbi;\n+     rtx insn;\n {\n-  struct propagate_block_info pbi;\n-  rtx insn, prev;\n-  regset_head new_live_head, new_dead_head;\n-  \n-  pbi.bb = bb;\n-  pbi.reg_live = live;\n-  pbi.mem_set_list = NULL_RTX;\n-  pbi.local_set = local_set;\n-  pbi.cc0_live = 0;\n-  pbi.flags = flags;\n+  rtx prev = PREV_INSN (insn);\n+  int flags = pbi->flags;\n+  int insn_is_dead = 0;\n+  int libcall_is_dead = 0;\n+  rtx note;\n+  int i;\n \n-  if (flags & (PROP_LOG_LINKS | PROP_AUTOINC))\n-    pbi.reg_next_use = (rtx *) xcalloc (max_reg_num (), sizeof (rtx));\n-  else\n-    pbi.reg_next_use = NULL;\n+  if (! INSN_P (insn))\n+    return prev;\n \n-  pbi.new_live = INITIALIZE_REG_SET (new_live_head);\n-  pbi.new_dead = INITIALIZE_REG_SET (new_dead_head);\n+  note = find_reg_note (insn, REG_RETVAL, NULL_RTX);\n+  if (flags & PROP_SCAN_DEAD_CODE)\n+    {\n+      insn_is_dead = insn_dead_p (pbi, PATTERN (insn), 0,\n+\t\t\t\t  REG_NOTES (insn));\n+      libcall_is_dead = (insn_is_dead && note != 0\n+\t\t\t && libcall_dead_p (pbi, PATTERN (insn),\n+\t\t\t\t\t    note, insn));\n+    }\n+\n+  /* We almost certainly don't want to delete prologue or epilogue\n+     instructions.  Warn about probable compiler losage.  */\n+  if (insn_is_dead\n+      && reload_completed\n+      && (((HAVE_epilogue || HAVE_prologue)\n+\t   && prologue_epilogue_contains (insn))\n+\t  || (HAVE_sibcall_epilogue\n+\t      && sibcall_epilogue_contains (insn))))\n+    {\n+      if (flags & PROP_KILL_DEAD_CODE)\n+\t{ \n+\t  warning (\"ICE: would have deleted prologue/epilogue insn\");\n+\t  if (!inhibit_warnings)\n+\t    debug_rtx (insn);\n+\t}\n+      libcall_is_dead = insn_is_dead = 0;\n+    }\n \n-  if (flags & PROP_REG_INFO)\n+  /* If an instruction consists of just dead store(s) on final pass,\n+     delete it.  */\n+  if ((flags & PROP_KILL_DEAD_CODE) && insn_is_dead)\n     {\n-      register int i;\n+      if (libcall_is_dead)\n+\t{\n+\t  prev = propagate_block_delete_libcall (pbi->bb, insn, note);\n+\t  insn = NEXT_INSN (prev);\n+\t}\n+      else\n+\tpropagate_block_delete_insn (pbi->bb, insn);\n \n-      /* Process the regs live at the end of the block.\n-\t Mark them as not local to any one basic block. */\n-      EXECUTE_IF_SET_IN_REG_SET (live, 0, i,\n-\t\t\t\t {\n-\t\t\t\t   REG_BASIC_BLOCK (i) = REG_BLOCK_GLOBAL;\n-\t\t\t\t });\n+      /* CC0 is now known to be dead.  Either this insn used it,\n+\t in which case it doesn't anymore, or clobbered it,\n+\t so the next insn can't use it.  */\n+      pbi->cc0_live = 0;\n+\n+      return prev;\n     }\n \n-  /* Scan the block an insn at a time from end to beginning.  */\n+  /* See if this is an increment or decrement that can be merged into\n+     a following memory address.  */\n+#ifdef AUTO_INC_DEC\n+  {\n+    register rtx x = single_set (insn);\n+\n+    /* Does this instruction increment or decrement a register?  */\n+    if (!reload_completed\n+\t&& (flags & PROP_AUTOINC)\n+\t&& x != 0\n+\t&& GET_CODE (SET_DEST (x)) == REG\n+\t&& (GET_CODE (SET_SRC (x)) == PLUS\n+\t    || GET_CODE (SET_SRC (x)) == MINUS)\n+\t&& XEXP (SET_SRC (x), 0) == SET_DEST (x)\n+\t&& GET_CODE (XEXP (SET_SRC (x), 1)) == CONST_INT\n+\t/* Ok, look for a following memory ref we can combine with.\n+\t   If one is found, change the memory ref to a PRE_INC\n+\t   or PRE_DEC, cancel this insn, and return 1.\n+\t   Return 0 if nothing has been done.  */\n+\t&& try_pre_increment_1 (pbi, insn))\n+      return prev;\n+  }\n+#endif /* AUTO_INC_DEC */\n \n-  for (insn = bb->end; ; insn = prev)\n+  CLEAR_REG_SET (pbi->new_live);\n+  CLEAR_REG_SET (pbi->new_dead);\n+\n+  /* If this is not the final pass, and this insn is copying the value of\n+     a library call and it's dead, don't scan the insns that perform the\n+     library call, so that the call's arguments are not marked live.  */\n+  if (libcall_is_dead)\n+    {\n+      /* Record the death of the dest reg.  */\n+      mark_set_regs (pbi, PATTERN (insn), insn);\n+\n+      insn = XEXP (note, 0);\n+      return PREV_INSN (insn);\n+    }\n+  else if (GET_CODE (PATTERN (insn)) == SET\n+\t   && SET_DEST (PATTERN (insn)) == stack_pointer_rtx\n+\t   && GET_CODE (SET_SRC (PATTERN (insn))) == PLUS\n+\t   && XEXP (SET_SRC (PATTERN (insn)), 0) == stack_pointer_rtx\n+\t   && GET_CODE (XEXP (SET_SRC (PATTERN (insn)), 1)) == CONST_INT)\n+    /* We have an insn to pop a constant amount off the stack.\n+       (Such insns use PLUS regardless of the direction of the stack,\n+       and any insn to adjust the stack by a constant is always a pop.)\n+       These insns, if not dead stores, have no effect on life.  */\n+    ;\n+  else\n     {\n-      prev = PREV_INSN (insn);\n+      /* Any regs live at the time of a call instruction must not go\n+\t in a register clobbered by calls.  Find all regs now live and\n+\t record this for them.  */\n \n-      if (GET_CODE (insn) == NOTE)\n-\t{\n-\t  /* If this is a call to `setjmp' et al,\n-\t     warn if any non-volatile datum is live.  */\n+      if (GET_CODE (insn) == CALL_INSN && (flags & PROP_REG_INFO))\n+\tEXECUTE_IF_SET_IN_REG_SET (pbi->reg_live, 0, i,\n+\t\t\t\t   { REG_N_CALLS_CROSSED (i)++; });\n \n-\t  if ((flags & PROP_REG_INFO)\n-\t      && NOTE_LINE_NUMBER (insn) == NOTE_INSN_SETJMP)\n-\t    IOR_REG_SET (regs_live_at_setjmp, pbi.reg_live);\n+      /* Record sets.  Do this even for dead instructions, since they\n+\t would have killed the values if they hadn't been deleted.  */\n+      mark_set_regs (pbi, PATTERN (insn), insn);\n+\n+      if (GET_CODE (insn) == CALL_INSN)\n+\t{\n+\t  register int i;\n+\t  rtx note, cond;\n+\n+\t  cond = NULL_RTX;\n+\t  if (GET_CODE (PATTERN (insn)) == COND_EXEC)\n+\t    cond = COND_EXEC_TEST (PATTERN (insn));\n+\n+\t  /* Non-constant calls clobber memory.  */\n+\t  if (! CONST_CALL_P (insn))\n+\t    free_EXPR_LIST_list (&pbi->mem_set_list);\n+\n+\t  /* There may be extra registers to be clobbered.  */\n+\t  for (note = CALL_INSN_FUNCTION_USAGE (insn);\n+\t       note;\n+\t       note = XEXP (note, 1))\n+\t    if (GET_CODE (XEXP (note, 0)) == CLOBBER)\n+\t      mark_set_1 (pbi, XEXP (XEXP (note, 0), 0), cond, insn);\n+\n+\t  /* Calls change all call-used and global registers.  */\n+\t  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\t    if (call_used_regs[i] && ! global_regs[i]\n+\t\t&& ! fixed_regs[i])\n+\t      {\n+\t\tint dummy;\n+\t\tmark_set_reg (pbi, gen_rtx_REG (reg_raw_mode[i], i),\n+\t\t\t      cond, &dummy, &dummy);\n+\t      }\n \t}\n \n-      /* Update the life-status of regs for this insn.\n-\t First DEAD gets which regs are set in this insn\n-\t then LIVE gets which regs are used in this insn.\n-\t Then the regs live before the insn\n-\t are those live after, with DEAD regs turned off,\n-\t and then LIVE regs turned on.  */\n+      /* If an insn doesn't use CC0, it becomes dead since we assume\n+\t that every insn clobbers it.  So show it dead here;\n+\t mark_used_regs will set it live if it is referenced.  */\n+      pbi->cc0_live = 0;\n+\n+      /* Record uses.  */\n+      if (! insn_is_dead)\n+\tmark_used_regs (pbi, PATTERN (insn), NULL_RTX, insn);\n \n-      else if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      /* Sometimes we may have inserted something before INSN (such as a move)\n+\t when we make an auto-inc.  So ensure we will scan those insns.  */\n+#ifdef AUTO_INC_DEC\n+      prev = PREV_INSN (insn);\n+#endif\n+\n+      if (! insn_is_dead && GET_CODE (insn) == CALL_INSN)\n \t{\n \t  register int i;\n-\t  rtx note = find_reg_note (insn, REG_RETVAL, NULL_RTX);\n-\t  int insn_is_dead = 0;\n-\t  int libcall_is_dead = 0;\n+\t  rtx note, cond;\n+\n+\t  cond = NULL_RTX;\n+\t  if (GET_CODE (PATTERN (insn)) == COND_EXEC)\n+\t    cond = COND_EXEC_TEST (PATTERN (insn));\n+\n+\t  /* Calls use their arguments.  */\n+\t  for (note = CALL_INSN_FUNCTION_USAGE (insn);\n+\t       note;\n+\t       note = XEXP (note, 1))\n+\t    if (GET_CODE (XEXP (note, 0)) == USE)\n+\t      mark_used_regs (pbi, XEXP (XEXP (note, 0), 0),\n+\t\t\t      cond, insn);\n+\n+\t  /* The stack ptr is used (honorarily) by a CALL insn.  */\n+\t  SET_REGNO_REG_SET (pbi->reg_live, STACK_POINTER_REGNUM);\n+\n+\t  /* Calls may also reference any of the global registers,\n+\t     so they are made live.  */\n+\t  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\t    if (global_regs[i])\n+\t      mark_used_reg (pbi, gen_rtx_REG (reg_raw_mode[i], i),\n+\t\t\t     cond, insn);\n+\t}\n+    }\n \n-\t  if (flags & PROP_SCAN_DEAD_CODE)\n-\t    {\n-\t      insn_is_dead = insn_dead_p (&pbi, PATTERN (insn), 0,\n-\t\t\t\t\t  REG_NOTES (insn));\n-\t      libcall_is_dead = (insn_is_dead && note != 0\n-\t                         && libcall_dead_p (&pbi, PATTERN (insn),\n-\t\t\t\t\t\t    note, insn));\n-\t    }\n+  /* Update reg_live for the registers killed and used.  */\n+  AND_COMPL_REG_SET (pbi->reg_live, pbi->new_dead);\n+  IOR_REG_SET (pbi->reg_live, pbi->new_live);\n \n-\t  /* We almost certainly don't want to delete prologue or epilogue\n-\t     instructions.  Warn about probable compiler losage.  */\n-\t  if (insn_is_dead\n-\t      && reload_completed\n-\t      && (((HAVE_epilogue || HAVE_prologue)\n-\t\t   && prologue_epilogue_contains (insn))\n-\t\t  || (HAVE_sibcall_epilogue\n-\t\t      && sibcall_epilogue_contains (insn))))\n-\t    {\n-\t      if (flags & PROP_KILL_DEAD_CODE)\n-\t        { \n-\t      \t  warning (\"ICE: would have deleted prologue/epilogue insn\");\n-\t      \t  if (!inhibit_warnings)\n-\t  \t    debug_rtx (insn);\n-\t        }\n-\t      libcall_is_dead = insn_is_dead = 0;\n-\t    }\n+  /* On final pass, update counts of how many insns in which each reg\n+     is live.  */\n+  if (flags & PROP_REG_INFO)\n+    EXECUTE_IF_SET_IN_REG_SET (pbi->reg_live, 0, i,\n+\t\t\t       { REG_LIVE_LENGTH (i)++; });\n \n-\t  /* If an instruction consists of just dead store(s) on final pass,\n-\t     delete it.  */\n-\t  if ((flags & PROP_KILL_DEAD_CODE) && insn_is_dead)\n-\t    {\n-\t      if (libcall_is_dead)\n-\t\t{\n-\t\t  prev = propagate_block_delete_libcall (bb, insn, note);\n-\t\t  insn = NEXT_INSN (prev);\n-\t\t}\n-\t      else\n-\t\tpropagate_block_delete_insn (bb, insn);\n+  return prev;\n+}\n \n-\t      /* CC0 is now known to be dead.  Either this insn used it,\n-\t\t in which case it doesn't anymore, or clobbered it,\n-\t\t so the next insn can't use it.  */\n-\t      pbi.cc0_live = 0;\n+/* Initialize a propagate_block_info struct for public consumption.\n+   Note that the structure itself is opaque to this file, but that\n+   the user can use the regsets provided here.  */\n \n-\t      goto flushed;\n-\t    }\n+struct propagate_block_info *\n+init_propagate_block_info (bb, live, local_set, flags)\n+     basic_block bb;\n+     regset live;\n+     regset local_set;\n+     int flags;\n+{\n+  struct propagate_block_info *pbi = xmalloc (sizeof(*pbi));\n \n-\t  /* See if this is an increment or decrement that can be\n-\t     merged into a following memory address.  */\n-#ifdef AUTO_INC_DEC\n-\t  {\n-\t    register rtx x = single_set (insn);\n-\n-\t    /* Does this instruction increment or decrement a register?  */\n-\t    if (!reload_completed\n-\t\t&& (flags & PROP_AUTOINC)\n-\t\t&& x != 0\n-\t\t&& GET_CODE (SET_DEST (x)) == REG\n-\t\t&& (GET_CODE (SET_SRC (x)) == PLUS\n-\t\t    || GET_CODE (SET_SRC (x)) == MINUS)\n-\t\t&& XEXP (SET_SRC (x), 0) == SET_DEST (x)\n-\t\t&& GET_CODE (XEXP (SET_SRC (x), 1)) == CONST_INT\n-\t\t/* Ok, look for a following memory ref we can combine with.\n-\t\t   If one is found, change the memory ref to a PRE_INC\n-\t\t   or PRE_DEC, cancel this insn, and return 1.\n-\t\t   Return 0 if nothing has been done.  */\n-\t\t&& try_pre_increment_1 (&pbi, insn))\n-\t      goto flushed;\n-\t  }\n-#endif /* AUTO_INC_DEC */\n+  pbi->bb = bb;\n+  pbi->reg_live = live;\n+  pbi->mem_set_list = NULL_RTX;\n+  pbi->local_set = local_set;\n+  pbi->cc0_live = 0;\n+  pbi->flags = flags;\n \n-\t  CLEAR_REG_SET (pbi.new_live);\n-\t  CLEAR_REG_SET (pbi.new_dead);\n+  if (flags & (PROP_LOG_LINKS | PROP_AUTOINC))\n+    pbi->reg_next_use = (rtx *) xcalloc (max_reg_num (), sizeof (rtx));\n+  else\n+    pbi->reg_next_use = NULL;\n \n-\t  /* If this is not the final pass, and this insn is copying the\n-\t     value of a library call and it's dead, don't scan the\n-\t     insns that perform the library call, so that the call's\n-\t     arguments are not marked live.  */\n-\t  if (libcall_is_dead)\n-\t    {\n-\t      /* Record the death of the dest reg.  */\n-\t      mark_set_regs (&pbi, PATTERN (insn), insn);\n+  pbi->new_live = BITMAP_XMALLOC ();\n+  pbi->new_dead = BITMAP_XMALLOC ();\n \n-\t      insn = XEXP (note, 0);\n-\t      prev = PREV_INSN (insn);\n-\t    }\n-\t  else if (GET_CODE (PATTERN (insn)) == SET\n-\t\t   && SET_DEST (PATTERN (insn)) == stack_pointer_rtx\n-\t\t   && GET_CODE (SET_SRC (PATTERN (insn))) == PLUS\n-\t\t   && XEXP (SET_SRC (PATTERN (insn)), 0) == stack_pointer_rtx\n-\t\t   && GET_CODE (XEXP (SET_SRC (PATTERN (insn)), 1)) == CONST_INT)\n-\t    /* We have an insn to pop a constant amount off the stack.\n-\t       (Such insns use PLUS regardless of the direction of the stack,\n-\t       and any insn to adjust the stack by a constant is always a pop.)\n-\t       These insns, if not dead stores, have no effect on life.  */\n-\t    ;\n-\t  else\n-\t    {\n-\t      /* Any regs live at the time of a call instruction\n-\t\t must not go in a register clobbered by calls.\n-\t\t Find all regs now live and record this for them.  */\n-\n-\t      if (GET_CODE (insn) == CALL_INSN\n-\t\t  && (flags & PROP_REG_INFO))\n-\t\tEXECUTE_IF_SET_IN_REG_SET (pbi.reg_live, 0, i,\n-\t\t\t\t\t   { REG_N_CALLS_CROSSED (i)++; });\n-\n-\t      /* Record sets.  Do this even for dead instructions,\n-\t\t since they would have killed the values if they hadn't\n-\t\t been deleted.  */\n-\t      mark_set_regs (&pbi, PATTERN (insn), insn);\n-\n-\t      /* If an insn doesn't use CC0, it becomes dead since we \n-\t\t assume that every insn clobbers it.  So show it dead here;\n-\t\t mark_used_regs will set it live if it is referenced.  */\n-\t      pbi.cc0_live = 0;\n-\n-\t      /* Record uses.  */\n-\t      if (! insn_is_dead)\n-\t\tmark_used_regs (&pbi, PATTERN (insn), NULL_RTX, insn);\n-\n-\t      /* Sometimes we may have inserted something before INSN\n-\t\t (such as a move) when we make an auto-inc.  So ensure\n-\t\t we will scan those insns.  */\n-#ifdef AUTO_INC_DEC\n-\t      prev = PREV_INSN (insn);\n-#endif\n+  return pbi;\n+}\n \n-\t      if (! insn_is_dead && GET_CODE (insn) == CALL_INSN)\n-\t\t{\n-\t\t  register int i;\n-\t\t  rtx note, cond;\n+/* Release a propagate_block_info struct.  */\n \n-\t\t  cond = NULL_RTX;\n-\t\t  if (GET_CODE (PATTERN (insn)) == COND_EXEC)\n-\t\t    cond = COND_EXEC_TEST (PATTERN (insn));\n+void\n+free_propagate_block_info (pbi)\n+     struct propagate_block_info *pbi;\n+{\n+  free_EXPR_LIST_list (&pbi->mem_set_list);\n \n-\t\t  /* Non-constant calls clobber memory.  */\n-\t\t  if (! CONST_CALL_P (insn))\n-\t\t    free_EXPR_LIST_list (&pbi.mem_set_list);\n+  BITMAP_XFREE (pbi->new_live);\n+  BITMAP_XFREE (pbi->new_dead);\n \n-\t\t  /* There may be extra registers to be clobbered.  */\n-\t          for (note = CALL_INSN_FUNCTION_USAGE (insn);\n-\t\t       note;\n-\t\t       note = XEXP (note, 1))\n-\t\t    if (GET_CODE (XEXP (note, 0)) == CLOBBER)\n-\t\t      mark_set_1 (&pbi, XEXP (XEXP (note, 0), 0),\n-\t\t\t\t  cond, insn);\n-\n-\t\t  /* Calls change all call-used and global registers.  */\n-\t\t  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\t\t    if (call_used_regs[i] && ! global_regs[i]\n-\t\t\t&& ! fixed_regs[i])\n-\t\t      {\n-\t\t\tint dummy;\n-\t\t        mark_set_reg (&pbi, gen_rtx_REG (reg_raw_mode[i], i),\n-\t\t\t\t      cond, &dummy, &dummy);\n-\t\t      }\n-\n-\t\t  /* Calls use their arguments.  */\n-\t          for (note = CALL_INSN_FUNCTION_USAGE (insn);\n-\t\t       note;\n-\t\t       note = XEXP (note, 1))\n-\t\t    if (GET_CODE (XEXP (note, 0)) == USE)\n-\t\t      mark_used_regs (&pbi, XEXP (XEXP (note, 0), 0),\n-\t\t\t\t      cond, insn);\n-\n-\t\t  /* The stack ptr is used (honorarily) by a CALL insn.  */\n-\t\t  SET_REGNO_REG_SET (pbi.new_live, STACK_POINTER_REGNUM);\n-\n-\t\t  /* Calls may also reference any of the global registers,\n-\t\t     so they are made live.  */\n-\t\t  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\t\t    if (global_regs[i])\n-\t\t      mark_used_reg (&pbi, gen_rtx_REG (reg_raw_mode[i], i),\n-\t\t\t\t     cond, insn);\n-\t\t}\n-\t    }\n+  if (pbi->reg_next_use)\n+    free (pbi->reg_next_use);\n \n-\t  /* Update reg_live for the registers killed and used.  */\n-\t  AND_COMPL_REG_SET (pbi.reg_live, pbi.new_dead);\n-\t  IOR_REG_SET (pbi.reg_live, pbi.new_live);\n+  free (pbi);\n+}\n+\n+/* Compute the registers live at the beginning of a basic block BB from\n+   those live at the end.\n+\n+   When called, REG_LIVE contains those live at the end.  On return, it\n+   contains those live at the beginning.\n+\n+   LOCAL_SET, if non-null, will be set with all registers killed by \n+   this basic block.  */\n+\n+void\n+propagate_block (bb, live, local_set, flags)\n+     basic_block bb;\n+     regset live;\n+     regset local_set;\n+     int flags;\n+{\n+  struct propagate_block_info *pbi;\n+  rtx insn, prev;\n+  \n+  pbi = init_propagate_block_info (bb, live, local_set, flags);\n+\n+  if (flags & PROP_REG_INFO)\n+    {\n+      register int i;\n+\n+      /* Process the regs live at the end of the block.\n+\t Mark them as not local to any one basic block. */\n+      EXECUTE_IF_SET_IN_REG_SET (live, 0, i,\n+\t\t\t\t { REG_BASIC_BLOCK (i) = REG_BLOCK_GLOBAL; });\n+    }\n+\n+  /* Scan the block an insn at a time from end to beginning.  */\n+\n+  for (insn = bb->end; ; insn = prev)\n+    {\n+      /* If this is a call to `setjmp' et al, warn if any\n+\t non-volatile datum is live.  */\n+      if ((flags & PROP_REG_INFO)\n+\t  && GET_CODE (insn) == NOTE\n+\t  && NOTE_LINE_NUMBER (insn) == NOTE_INSN_SETJMP)\n+\tIOR_REG_SET (regs_live_at_setjmp, pbi->reg_live);\n+\n+      prev = propagate_one_insn (pbi, insn);\n \n-\t  /* On final pass, update counts of how many insns in which\n-\t     each reg is live.  */\n-\t  if (flags & PROP_REG_INFO)\n-\t    EXECUTE_IF_SET_IN_REG_SET (pbi.reg_live, 0, i,\n-\t\t\t\t       { REG_LIVE_LENGTH (i)++; });\n-\t}\n-    flushed:\n       if (insn == bb->head)\n \tbreak;\n     }\n \n-  FREE_REG_SET (pbi.new_live);\n-  FREE_REG_SET (pbi.new_dead);\n-  free_EXPR_LIST_list (&pbi.mem_set_list);\n-\n-  if (pbi.reg_next_use)\n-    free (pbi.reg_next_use);\n+  free_propagate_block_info (pbi);\n }\n-\n \f\n /* Return 1 if X (the body of an insn, or part of it) is just dead stores\n    (SET expressions whose destinations are registers dead after the insn)."}]}