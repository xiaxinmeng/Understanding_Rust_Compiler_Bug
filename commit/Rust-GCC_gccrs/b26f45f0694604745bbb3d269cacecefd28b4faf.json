{"sha": "b26f45f0694604745bbb3d269cacecefd28b4faf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI2ZjQ1ZjA2OTQ2MDQ3NDViYmIzZDI2OWNhY2VjZWZkMjhiNGZhZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-04-28T12:56:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-04-28T12:56:53Z"}, "message": "PR libstdc++/80553 don't allow destroying non-destructible types\n\n\tPR libstdc++/80553\n\t* include/bits/stl_construct.h (_Destroy, _Destroy_n): Add static\n\tassertions to ensure type is destructible.\n\t(destroy_at, destroy, destroy_n): Move from stl_uninitialized.h.\n\t* include/bits/stl_uninitialized.h (destroy_at, destroy, destroy_n):\n\tMove to stl_construct.h.\n\t* testsuite/20_util/specialized_algorithms/memory_management_tools/\n\tdestroy_neg.cc: New test.\n\t* testsuite/23_containers/vector/cons/destructible_neg.cc: New test.\n\nFrom-SVN: r247379", "tree": {"sha": "e6ff20fa205ecfc3e0c7d6c978c8066aa11c02ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6ff20fa205ecfc3e0c7d6c978c8066aa11c02ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b26f45f0694604745bbb3d269cacecefd28b4faf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b26f45f0694604745bbb3d269cacecefd28b4faf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b26f45f0694604745bbb3d269cacecefd28b4faf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b26f45f0694604745bbb3d269cacecefd28b4faf/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38233afdcff80a2bb7ec7693f0d71497facbdd3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38233afdcff80a2bb7ec7693f0d71497facbdd3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38233afdcff80a2bb7ec7693f0d71497facbdd3b"}], "stats": {"total": 214, "additions": 164, "deletions": 50}, "files": [{"sha": "6d78fcdd7385913d4fcb20ddc38c3817c777fcdb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b26f45f0694604745bbb3d269cacecefd28b4faf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b26f45f0694604745bbb3d269cacecefd28b4faf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b26f45f0694604745bbb3d269cacecefd28b4faf", "patch": "@@ -1,5 +1,15 @@\n 2017-04-28  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/80553\n+\t* include/bits/stl_construct.h (_Destroy, _Destroy_n): Add static\n+\tassertions to ensure type is destructible.\n+\t(destroy_at, destroy, destroy_n): Move from stl_uninitialized.h.\n+\t* include/bits/stl_uninitialized.h (destroy_at, destroy, destroy_n):\n+\tMove to stl_construct.h.\n+\t* testsuite/20_util/specialized_algorithms/memory_management_tools/\n+\tdestroy_neg.cc: New test.\n+\t* testsuite/23_containers/vector/cons/destructible_neg.cc: New test.\n+\n \t* testsuite/17_intro/headers/c++1998/stdc++_assert_neg.cc: Remove\n \tsuperfluous \"\" in dg-error.\n "}, {"sha": "71483b46ab29e1f2ecbb177d055e0d2778cc77d1", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b26f45f0694604745bbb3d269cacecefd28b4faf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b26f45f0694604745bbb3d269cacecefd28b4faf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=b26f45f0694604745bbb3d269cacecefd28b4faf", "patch": "@@ -128,6 +128,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n                        _Value_type;\n+#if __cplusplus >= 201103L\n+      // A deleted destructor is trivial, this ensures we reject such types:\n+      static_assert(is_destructible<_Value_type>::value,\n+\t\t    \"value type is destructible\");\n+#endif\n       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::\n \t__destroy(__first, __last);\n     }\n@@ -151,10 +156,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _ForwardIterator, typename _Size>\n         static _ForwardIterator\n         __destroy_n(_ForwardIterator __first, _Size __count)\n-      {\n-\t std::advance(__first, __count);\n-\t return __first;\n-      }\n+\t{\n+\t  std::advance(__first, __count);\n+\t  return __first;\n+\t}\n     };\n \n   /**\n@@ -168,6 +173,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n                        _Value_type;\n+#if __cplusplus >= 201103L\n+      // A deleted destructor is trivial, this ensures we reject such types:\n+      static_assert(is_destructible<_Value_type>::value,\n+\t\t    \"value type is destructible\");\n+#endif\n       return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::\n \t__destroy_n(__first, __count);\n     }\n@@ -196,6 +206,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Destroy(__first, __last);\n     }\n \n+#if __cplusplus > 201402L\n+  template <typename _Tp>\n+    inline void\n+    destroy_at(_Tp* __location)\n+    {\n+      std::_Destroy(__location);\n+    }\n+\n+  template <typename _ForwardIterator>\n+    inline void\n+    destroy(_ForwardIterator __first, _ForwardIterator __last)\n+    {\n+      std::_Destroy(__first, __last);\n+    }\n+\n+  template <typename _ForwardIterator, typename _Size>\n+    inline _ForwardIterator\n+    destroy_n(_ForwardIterator __first, _Size __count)\n+    {\n+      return std::_Destroy_n(__first, __count);\n+    }\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "c2ba863ed984646d04682dd56158c2d0f0a85b6a", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 23, "deletions": 46, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b26f45f0694604745bbb3d269cacecefd28b4faf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b26f45f0694604745bbb3d269cacecefd28b4faf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=b26f45f0694604745bbb3d269cacecefd28b4faf", "patch": "@@ -831,77 +831,54 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline void\n     uninitialized_default_construct(_ForwardIterator __first,\n \t\t\t\t    _ForwardIterator __last)\n-  {\n-    __uninitialized_default_novalue(__first, __last);\n-  }\n+    {\n+      __uninitialized_default_novalue(__first, __last);\n+    }\n \n   template <typename _ForwardIterator, typename _Size>\n     inline _ForwardIterator\n     uninitialized_default_construct_n(_ForwardIterator __first, _Size __count)\n-  {\n-    return __uninitialized_default_novalue_n(__first, __count);\n-  }\n+    {\n+      return __uninitialized_default_novalue_n(__first, __count);\n+    }\n \n   template <typename _ForwardIterator>\n     inline void\n     uninitialized_value_construct(_ForwardIterator __first,\n \t\t\t\t  _ForwardIterator __last)\n-  {\n-    return __uninitialized_default(__first, __last);\n-  }\n+    {\n+      return __uninitialized_default(__first, __last);\n+    }\n \n   template <typename _ForwardIterator, typename _Size>\n     inline _ForwardIterator\n     uninitialized_value_construct_n(_ForwardIterator __first, _Size __count)\n-  {\n-    return __uninitialized_default_n(__first, __count);\n-  }\n+    {\n+      return __uninitialized_default_n(__first, __count);\n+    }\n \n   template <typename _InputIterator, typename _ForwardIterator>\n     inline _ForwardIterator\n     uninitialized_move(_InputIterator __first, _InputIterator __last,\n \t\t       _ForwardIterator __result)\n-  {\n-    return std::uninitialized_copy\n-      (_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n-       _GLIBCXX_MAKE_MOVE_ITERATOR(__last), __result);\n-  }\n+    {\n+      return std::uninitialized_copy\n+\t(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n+\t _GLIBCXX_MAKE_MOVE_ITERATOR(__last), __result);\n+    }\n \n   template <typename _InputIterator, typename _Size, typename _ForwardIterator>\n     inline pair<_InputIterator, _ForwardIterator>\n     uninitialized_move_n(_InputIterator __first, _Size __count,\n \t\t\t _ForwardIterator __result)\n-  {\n-    auto __res = std::__uninitialized_copy_n_pair\n-      (_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n-       __count, __result);\n-    return {__res.first.base(), __res.second};\n-  }\n-\n-  template <typename _Tp>\n-    inline void\n-    destroy_at(_Tp* __location)\n-  {\n-    std::_Destroy(__location);\n-  }\n-\n-  template <typename _ForwardIterator>\n-    inline void\n-    destroy(_ForwardIterator __first, _ForwardIterator __last)\n-  {\n-    std::_Destroy(__first, __last);\n-  }\n-\n-  template <typename _ForwardIterator, typename _Size>\n-    inline _ForwardIterator\n-    destroy_n(_ForwardIterator __first, _Size __count)\n-  {\n-    return std::_Destroy_n(__first, __count);\n-  }\n-\n+    {\n+      auto __res = std::__uninitialized_copy_n_pair\n+\t(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n+\t __count, __result);\n+      return {__res.first.base(), __res.second};\n+    }\n #endif\n \n-\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "663b2c0f7a7cef6723379c331a88968eddce79c5", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/memory_management_tools/destroy_neg.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b26f45f0694604745bbb3d269cacecefd28b4faf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fmemory_management_tools%2Fdestroy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b26f45f0694604745bbb3d269cacecefd28b4faf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fmemory_management_tools%2Fdestroy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fmemory_management_tools%2Fdestroy_neg.cc?ref=b26f45f0694604745bbb3d269cacecefd28b4faf", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <memory>\n+\n+// This has a trivial destructor, but should not be destructible!\n+struct DeletedDtor {\n+  ~DeletedDtor() = delete;\n+};\n+\n+void\n+test01()\n+{\n+  alignas(DeletedDtor) unsigned char buf[sizeof(DeletedDtor)];\n+  auto p = ::new (buf) DeletedDtor();\n+  std::destroy(p, p + 1);\t// { dg-error \"here\" }\n+  std::destroy_n(p, 1);\t\t// { dg-error \"here\" }\n+}\n+\n+class PrivateDtor {\n+  ~PrivateDtor() { }\n+};\n+\n+void\n+test02()\n+{\n+  alignas(PrivateDtor) unsigned char buf[sizeof(PrivateDtor)];\n+  auto p = ::new (buf) PrivateDtor();\n+  std::destroy(p, p + 1);\t// { dg-error \"here\" }\n+  std::destroy_n(p, 1);\t\t// { dg-error \"here\" }\n+}\n+\n+// { dg-error \"value type is destructible\" \"\" { target *-*-* } 0 }"}, {"sha": "48985955451c12aaf47a3954a159d86e91d6023b", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/destructible_neg.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b26f45f0694604745bbb3d269cacecefd28b4faf/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fdestructible_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b26f45f0694604745bbb3d269cacecefd28b4faf/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fdestructible_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fdestructible_neg.cc?ref=b26f45f0694604745bbb3d269cacecefd28b4faf", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <vector>\n+\n+// PR libstdc++/80553\n+\n+struct DeletedDtor {\n+  ~DeletedDtor() = delete;\n+};\n+\n+class PrivateDtor {\n+  ~PrivateDtor() { }\n+};\n+\n+void\n+test01()\n+{\n+  std::vector<DeletedDtor> v; // { dg-error \"here\" }\n+}\n+\n+void\n+test02()\n+{\n+  std::vector<PrivateDtor> v; // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"value type is destructible\" \"\" { target *-*-* } 0 }"}]}