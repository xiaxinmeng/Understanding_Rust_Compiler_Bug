{"sha": "815eb852a2d293331eba2e241a986b8641d4da1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE1ZWI4NTJhMmQyOTMzMzFlYmEyZTI0MWE5ODZiODY0MWQ0ZGExZg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-12-11T06:48:06Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-12-12T17:07:45Z"}, "message": "libstdc++: Fix _GLIBCXX_DEBUG mode constexpr compatibility\n\nThe __glibcxx_check_can_[increment|decrement]_range macros are using the\n_GLIBCXX_DEBUG_VERIFY_COND_AT macro which is not constexpr compliant and will produce nasty\ndiagnostics rather than the std::__failed_assertion dedicated to constexpr. Replace it with\ncorrect _GLIBCXX_DEBUG_VERIFY_AT_F.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/debug/macros.h (__glibcxx_check_can_increment_range): Replace\n\t_GLIBCXX_DEBUG_VERIFY_COND_AT usage with _GLIBCXX_DEBUG_VERIFY_AT_F.\n\t(__glibcxx_check_can_decrement_range): Likewise.\n\t* testsuite/25_algorithms/copy_backward/constexpr.cc (test03): New.\n\t* testsuite/25_algorithms/copy/debug/constexpr_neg.cc: New test.\n\t* testsuite/25_algorithms/copy_backward/debug/constexpr_neg.cc: New test.\n\t* testsuite/25_algorithms/equal/constexpr_neg.cc: New test.\n\t* testsuite/25_algorithms/equal/debug/constexpr_neg.cc: New test.", "tree": {"sha": "87144b47033444a9bbb696bffbaf43c1d5af1c30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87144b47033444a9bbb696bffbaf43c1d5af1c30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/815eb852a2d293331eba2e241a986b8641d4da1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815eb852a2d293331eba2e241a986b8641d4da1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/815eb852a2d293331eba2e241a986b8641d4da1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815eb852a2d293331eba2e241a986b8641d4da1f/comments", "author": null, "committer": null, "parents": [{"sha": "ff2dfdef2f2e01c579dd280daa1d81fbeb4d7ac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2dfdef2f2e01c579dd280daa1d81fbeb4d7ac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff2dfdef2f2e01c579dd280daa1d81fbeb4d7ac5"}], "stats": {"total": 214, "additions": 210, "deletions": 4}, "files": [{"sha": "a69310d9a12879b84cde56d9c48d805f3a62f8eb", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815eb852a2d293331eba2e241a986b8641d4da1f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815eb852a2d293331eba2e241a986b8641d4da1f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=815eb852a2d293331eba2e241a986b8641d4da1f", "patch": "@@ -98,13 +98,13 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__can_advance(_First, _Size),\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     typename __gnu_debug::_Distance_traits<__decltype(_First1)>::__type __dist;\\\n-    _GLIBCXX_DEBUG_VERIFY_COND_AT(\t\t\t\t\t\\\n+    _GLIBCXX_DEBUG_VERIFY_AT_F(\t\t\t\t\t\t\\\n \t\t\t__gnu_debug::__valid_range(_First1, _Last1, __dist),\\\n \t\t\t_M_message(__gnu_debug::__msg_valid_range)\t\\\n \t\t\t._M_iterator(_First1, #_First1)\t\t\t\\\n \t\t\t._M_iterator(_Last1, #_Last1),\t\t\t\\\n \t\t\t__FILE__,__LINE__,__PRETTY_FUNCTION__);\t\t\\\n-    _GLIBCXX_DEBUG_VERIFY_COND_AT(\t\t\t\t\t\\\n+    _GLIBCXX_DEBUG_VERIFY_AT_F(\t\t\t\t\t\t\\\n \t\t\t__gnu_debug::__can_advance(_First2, __dist.first),\\\n \t\t\t_M_message(__gnu_debug::__msg_iter_subscript_oob)\\\n \t\t\t._M_iterator(_First2, #_First2)\t\t\t\\\n@@ -116,13 +116,13 @@ _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__can_advance(_First, _Size),\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     typename __gnu_debug::_Distance_traits<__decltype(_First1)>::__type __dist;\\\n-    _GLIBCXX_DEBUG_VERIFY_COND_AT(\t\t\t\t\t\\\n+    _GLIBCXX_DEBUG_VERIFY_AT_F(\t\t\t\t\t\t\\\n \t\t\t__gnu_debug::__valid_range(_First1, _Last1, __dist),\\\n \t\t\t_M_message(__gnu_debug::__msg_valid_range)\t\\\n \t\t\t._M_iterator(_First1, #_First1)\t\t\t\\\n \t\t\t._M_iterator(_Last1, #_Last1),\t\t\t\\\n \t\t\t__FILE__,__LINE__,__PRETTY_FUNCTION__);\t\t\\\n-    _GLIBCXX_DEBUG_VERIFY_COND_AT(\t\t\t\t\t\\\n+    _GLIBCXX_DEBUG_VERIFY_AT_F(\t\t\t\t\t\t\\\n \t\t\t__gnu_debug::__can_advance(_First2, -__dist.first),\\\n \t\t\t_M_message(__gnu_debug::__msg_iter_subscript_oob)\\\n \t\t\t._M_iterator(_First2, #_First2)\t\t\t\\"}, {"sha": "fc66a2f8fca1ed2f877ee6315e8be48b7198a48e", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/debug/constexpr_neg.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815eb852a2d293331eba2e241a986b8641d4da1f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fdebug%2Fconstexpr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815eb852a2d293331eba2e241a986b8641d4da1f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fdebug%2Fconstexpr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2Fdebug%2Fconstexpr_neg.cc?ref=815eb852a2d293331eba2e241a986b8641d4da1f", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a xfail *-*-* } }\n+// { dg-require-debug-mode \"\"  }\n+\n+#include <algorithm>\n+#include <array>\n+\n+constexpr bool\n+test1()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  std::array<int, 12> ma0{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n+\n+  const auto out6 = std::copy(ca0.begin() + 8, ca0.begin(), ma0.begin() + 2);\n+\n+  return out6 == ma0.begin() + 10;\n+}\n+\n+static_assert(test1()); // { dg-error \"non-constant condition\" }\n+\n+constexpr bool\n+test2()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  std::array<int, 12> ma0{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n+\n+  const auto out6 = std::copy(ca0.begin(), ca0.begin() + 8, ma0.begin() + 10);\n+\n+  return out6 == ma0.begin() + 18;\n+}\n+\n+static_assert(test2()); // { dg-error \"is outside the bounds\" }\n+\n+// { dg-prune-output \"in 'constexpr' expansion\" }\n+// { dg-prune-output \"failed_assertion\" }\n+// { dg-prune-output \"non-constant condition\" }"}, {"sha": "b98cb0dd17f6c6e45a336b69b93a208775a412e9", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_backward/constexpr.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815eb852a2d293331eba2e241a986b8641d4da1f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815eb852a2d293331eba2e241a986b8641d4da1f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fconstexpr.cc?ref=815eb852a2d293331eba2e241a986b8641d4da1f", "patch": "@@ -52,3 +52,15 @@ test02()\n }\n \n static_assert(test02());\n+\n+constexpr bool\n+test03()\n+{\n+  std::array<int, 12> ma0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  const auto out7 = std::copy_backward(ma0.begin(), ma0.begin() + 8,\n+\t\t\t\t       ma0.begin() + 10);\n+\n+  return out7 == ma0.begin() + 2 && *out7 == 0 && *(ma0.begin() + 9) == 7;\n+}\n+\n+static_assert(test03());"}, {"sha": "6e2dc2f8f9db04da4a99571c83d22699a6367cef", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_backward/debug/constexpr_neg.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815eb852a2d293331eba2e241a986b8641d4da1f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fdebug%2Fconstexpr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815eb852a2d293331eba2e241a986b8641d4da1f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fdebug%2Fconstexpr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fdebug%2Fconstexpr_neg.cc?ref=815eb852a2d293331eba2e241a986b8641d4da1f", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a xfail *-*-* } }\n+// { dg-require-debug-mode \"\"  }\n+\n+#include <algorithm>\n+#include <array>\n+\n+constexpr bool\n+test()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  std::array<int, 12> ma0{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n+\n+  const auto out7 = std::copy_backward(ca0.begin() + 8, ca0.begin(),\n+\t\t\t\t       ma0.begin() + 10);\n+\n+  return true;\n+}\n+\n+static_assert(test()); // { dg-error \"non-constant condition\" }\n+\n+// { dg-prune-output \"in 'constexpr' expansion\" }\n+// { dg-prune-output \"failed_assertion\" }"}, {"sha": "206c1cf406d97540b6e69c7b2669e185f65c1c1c", "filename": "libstdc++-v3/testsuite/25_algorithms/equal/constexpr_neg.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815eb852a2d293331eba2e241a986b8641d4da1f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fconstexpr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815eb852a2d293331eba2e241a986b8641d4da1f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fconstexpr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fconstexpr_neg.cc?ref=815eb852a2d293331eba2e241a986b8641d4da1f", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a xfail *-*-* } }\n+// { dg-require-normal-mode \"\" }\n+\n+#include <algorithm>\n+#include <array>\n+\n+constexpr bool\n+test01()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  constexpr std::array<int, 12> ca1{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  const auto outa = std::equal(ca0.end(), ca0.begin(), ca1.begin());\n+  return outa;\n+}\n+\n+static_assert(test01()); // { dg-error \"outside the bounds\" }\n+\n+constexpr bool\n+test02()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  constexpr std::array<int, 11> ca1{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}};\n+\n+  const auto outa = std::equal(ca0.begin(), ca0.end(), ca1.begin());\n+  return outa;\n+}\n+\n+static_assert(test02()); // { dg-error \"outside the bounds\" }\n+\n+// { dg-prune-output \"non-constant condition\" }\n+// { dg-prune-output \"in 'constexpr'\" }"}, {"sha": "3a6903c9d00a1390bbf80d3f584694d854623d9e", "filename": "libstdc++-v3/testsuite/25_algorithms/equal/debug/constexpr_neg.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815eb852a2d293331eba2e241a986b8641d4da1f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fdebug%2Fconstexpr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815eb852a2d293331eba2e241a986b8641d4da1f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fdebug%2Fconstexpr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fdebug%2Fconstexpr_neg.cc?ref=815eb852a2d293331eba2e241a986b8641d4da1f", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <algorithm>\n+#include <array>\n+\n+constexpr bool\n+test01()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  constexpr std::array<int, 12> ca1{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+\n+  const auto outa = std::equal(ca0.end(), ca0.begin(), ca1.begin());\n+  return outa;\n+}\n+\n+static_assert(test01()); // { dg-error }\n+\n+constexpr bool\n+test02()\n+{\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n+  constexpr std::array<int, 11> ca1{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}};\n+\n+  const auto outa = std::equal(ca0.begin(), ca0.end(), ca1.begin());\n+  return outa;\n+}\n+\n+static_assert(test02()); // { dg-error \"outside the bounds\" }\n+\n+// { dg-prune-output \"non-constant condition\" }\n+// { dg-prune-output \"in 'constexpr'\" }\n+// { dg-prune-output \"failed_assertion\" }"}]}