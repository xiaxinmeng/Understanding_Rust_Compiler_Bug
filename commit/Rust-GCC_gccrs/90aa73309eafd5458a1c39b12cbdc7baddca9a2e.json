{"sha": "90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBhYTczMzA5ZWFmZDU0NThhMWMzOWIxMmNiZGM3YmFkZGNhOWEyZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-01-13T14:57:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-01-13T14:57:33Z"}, "message": "Define cxx11-abi effective target for libstdc++ tests\n\n\tPR libstdc++/79075\n\t* testsuite/lib/libstdc++.exp (check_v3_target_filesystem_ts): Remove\n\tredundant option from cxxflags.\n\t(check_effective_target_cxx11-abi): Define.\n\t* testsuite/21_strings/basic_string/allocator/71964.cc: Use cxx11-abi\n\teffective target.\n\t* testsuite/21_strings/basic_string/allocator/char/copy.cc: Likewise.\n\t* testsuite/21_strings/basic_string/allocator/char/copy_assign.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/allocator/char/minimal.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/allocator/char/move.cc: Likewise.\n\t* testsuite/21_strings/basic_string/allocator/char/move_assign.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/allocator/char/noexcept.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/allocator/char/swap.cc: Likewise.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/copy.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/copy_assign.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/minimal.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/move.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/move_assign.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/noexcept.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/swap.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/61347.cc: Likewise.\n\t* testsuite/27_io/basic_fstream/cons/base.cc: Likewise.\n\t* testsuite/27_io/ios_base/failure/cxx11.cc: Likewise.\n\nFrom-SVN: r244440", "tree": {"sha": "d7615f1f896b708d351df878de4082dd8d4de116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7615f1f896b708d351df878de4082dd8d4de116"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5dcfacf4390abe657d186eff582835e8d1b8370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5dcfacf4390abe657d186eff582835e8d1b8370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5dcfacf4390abe657d186eff582835e8d1b8370"}], "stats": {"total": 193, "additions": 101, "deletions": 92}, "files": [{"sha": "a52fc9616196330dbcc293e0e1a5bcc2ac08ccb3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -1,3 +1,40 @@\n+2017-01-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/79075\n+\t* testsuite/lib/libstdc++.exp (check_v3_target_filesystem_ts): Remove\n+\tredundant option from cxxflags.\n+\t(check_effective_target_cxx11-abi): Define.\n+\t* testsuite/21_strings/basic_string/allocator/71964.cc: Use cxx11-abi\n+\teffective target.\n+\t* testsuite/21_strings/basic_string/allocator/char/copy.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/allocator/char/copy_assign.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/char/minimal.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/char/move.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/allocator/char/move_assign.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/char/noexcept.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/char/swap.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/copy.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/copy_assign.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/minimal.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/move.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/move_assign.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/noexcept.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/swap.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/61347.cc: Likewise.\n+\t* testsuite/27_io/basic_fstream/cons/base.cc: Likewise.\n+\t* testsuite/27_io/ios_base/failure/cxx11.cc: Likewise.\n+\n 2017-01-13  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR libstdc++/78389"}, {"sha": "70e5cf88dc9e2fa8bdcc85224cc3f64761a6364c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/71964.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2F71964.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2F71964.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2F71964.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -16,6 +16,8 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <testsuite_hooks.h>\n@@ -58,13 +60,10 @@ operator!=(const mv_allocator<T>&, const mv_allocator<U>&) { return false; }\n void\n test01()\n {\n-  // COW strings don't support C++11 allocators\n-#if _GLIBCXX_USE_CXX11_ABI\n   std::basic_string<char, std::char_traits<char>, mv_allocator<char>> s;\n   auto t = std::move(s);\n   VERIFY( s.get_allocator().moved_from );\n   VERIFY( t.get_allocator().moved_to );\n-#endif\n }\n \n int"}, {"sha": "bdcadaf1e02a458c2d3d5e4a0c82560b2677c674", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/copy.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -16,12 +16,13 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n  \n-#if _GLIBCXX_USE_CXX11_ABI\n using C = char;\n const C c = 'a';\n using traits = std::char_traits<C>;\n@@ -86,9 +87,3 @@ int main()\n   test03();\n   return 0;\n }\n-#else\n-int main()\n-{\n-  // COW strings don't support C++11 allocators\n-}\n-#endif"}, {"sha": "32ee708f3c6671a3ab5f9378871c7543f560b767", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/copy_assign.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy_assign.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -16,12 +16,13 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n  \n-#if _GLIBCXX_USE_CXX11_ABI\n using C = char;\n const C c = 'a';\n using traits = std::char_traits<C>;\n@@ -104,9 +105,3 @@ int main()\n   test02();\n   return 0;\n }\n-#else\n-int main()\n-{\n-  // COW strings don't support C++11 allocators\n-}\n-#endif"}, {"sha": "46b4215bcf2c7e8d64d9c7bedc4e72ec89712486", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/minimal.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fminimal.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -16,13 +16,14 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <memory>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n  \n-#if _GLIBCXX_USE_CXX11_ABI\n using C = char;\n const C c = 'a';\n using traits = std::char_traits<C>;\n@@ -40,9 +41,6 @@ void test01()\n   v.assign(1, c);\n   v.assign(100, c);\n }\n-#else\n-void test01() { }\n-#endif\n \n int main()\n {"}, {"sha": "820b3ed479103d743bb429c3d90bb7f76f8baaa2", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/move.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fmove.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -16,12 +16,13 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n-#if _GLIBCXX_USE_CXX11_ABI\n using C = char;\n const C c = 'a';\n using traits = std::char_traits<C>;\n@@ -56,9 +57,3 @@ int main()\n   test02();\n   return 0;\n }\n-#else\n-int main()\n-{\n-  // COW strings don't support C++11 allocators\n-}\n-#endif"}, {"sha": "df85a0b2861c1241363e7385c6bcbb187cf17d0b", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/move_assign.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fmove_assign.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -16,12 +16,13 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n  \n-#if _GLIBCXX_USE_CXX11_ABI\n using C = char;\n const C c = 'a';\n using traits = std::char_traits<C>;\n@@ -149,9 +150,3 @@ int main()\n   test03();\n   return 0;\n }\n-#else\n-int main()\n-{\n-  // COW strings don't support C++11 allocators\n-}\n-#endif"}, {"sha": "90aca89a10c2e696fd13f0a3808e86574bc2a24e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/noexcept.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fnoexcept.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -16,11 +16,12 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <testsuite_allocator.h>\n  \n-#if _GLIBCXX_USE_CXX11_ABI\n using C = char;\n const C c = 'a';\n using traits = std::char_traits<C>;\n@@ -57,4 +58,3 @@ void test03()\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n   static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }\n-#endif"}, {"sha": "a7d9bdf96c45abde0532ee2906cb0875d42bed87", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/swap.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fswap.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -16,12 +16,13 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n  \n-#if _GLIBCXX_USE_CXX11_ABI\n using C = char;\n const C c = 'a';\n using traits = std::char_traits<C>;\n@@ -79,9 +80,3 @@ int main()\n   test02();\n   return 0;\n }\n-#else\n-int main()\n-{\n-  // COW strings don't support C++11 allocators\n-}\n-#endif"}, {"sha": "add276c4e71a44ae3d3e9e79ac073a910fccd46a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/copy.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -16,12 +16,13 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n  \n-#if _GLIBCXX_USE_CXX11_ABI\n using C = wchar_t;\n const C c = L'a';\n using traits = std::char_traits<C>;\n@@ -86,9 +87,3 @@ int main()\n   test03();\n   return 0;\n }\n-#else\n-int main()\n-{\n-  // COW strings don't support C++11 allocators\n-}\n-#endif"}, {"sha": "89593ba8faa9e18abd4ed98cd93dfcd65fcf7808", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/copy_assign.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy_assign.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -16,12 +16,13 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n  \n-#if _GLIBCXX_USE_CXX11_ABI\n using C = wchar_t;\n const C c = L'a';\n using traits = std::char_traits<C>;\n@@ -104,9 +105,3 @@ int main()\n   test02();\n   return 0;\n }\n-#else\n-int main()\n-{\n-  // COW strings don't support C++11 allocators\n-}\n-#endif"}, {"sha": "f8e98853c16d8535012e2db03654173cc5edf108", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/minimal.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fminimal.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -16,13 +16,14 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <memory>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n  \n-#if _GLIBCXX_USE_CXX11_ABI\n using C = wchar_t;\n const C c = L'a';\n using traits = std::char_traits<C>;\n@@ -40,9 +41,6 @@ void test01()\n   v.assign(1, c);\n   v.assign(100, c);\n }\n-#else\n-void test01() { }\n-#endif\n \n int main()\n {"}, {"sha": "8db947fd8ff0e1ebbbfdcbdac9bdca69f411c062", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/move.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fmove.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -16,12 +16,13 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n \n-#if _GLIBCXX_USE_CXX11_ABI\n using C = wchar_t;\n const C c = L'a';\n using traits = std::char_traits<C>;\n@@ -56,9 +57,3 @@ int main()\n   test02();\n   return 0;\n }\n-#else\n-int main()\n-{\n-  // COW strings don't support C++11 allocators\n-}\n-#endif"}, {"sha": "9d282fcec9453082a0fc5f59dd613ddc487b0071", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/move_assign.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fmove_assign.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -16,12 +16,13 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n  \n-#if _GLIBCXX_USE_CXX11_ABI\n using C = wchar_t;\n const C c = L'a';\n using traits = std::char_traits<C>;\n@@ -149,9 +150,3 @@ int main()\n   test03();\n   return 0;\n }\n-#else\n-int main()\n-{\n-  // COW strings don't support C++11 allocators\n-}\n-#endif"}, {"sha": "c107737ee7023af95fe56944584cb229206e3dac", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/noexcept.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fnoexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fnoexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fnoexcept.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -16,11 +16,12 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <testsuite_allocator.h>\n  \n-#if _GLIBCXX_USE_CXX11_ABI\n using C = wchar_t;\n const C c = L'a';\n using traits = std::char_traits<C>;\n@@ -57,4 +58,3 @@ void test03()\n   static_assert( noexcept( v1 = std::move(v2) ), \"Move assign cannot throw\" );\n   static_assert( noexcept( v1.swap(v2) ), \"Swap cannot throw\" );\n }\n-#endif"}, {"sha": "842fb55d6e622071c72f85bcc7786149473ab6ad", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/swap.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fswap.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -16,12 +16,13 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n+// COW strings don't support C++11 allocators:\n+// { dg-require-effective-target cxx11-abi }\n \n #include <string>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n  \n-#if _GLIBCXX_USE_CXX11_ABI\n using C = wchar_t;\n const C c = L'a';\n using traits = std::char_traits<C>;\n@@ -79,9 +80,3 @@ int main()\n   test02();\n   return 0;\n }\n-#else\n-int main()\n-{\n-  // COW strings don't support C++11 allocators\n-}\n-#endif"}, {"sha": "526ab329fa59fceba66560e4859e7acf9cf521d3", "filename": "libstdc++-v3/testsuite/23_containers/list/61347.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F61347.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F61347.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F61347.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -1,6 +1,7 @@\n-// { dg-options \"-O2 -D_GLIBCXX_USE_CXX11_ABI\" }\n+// { dg-options \"-O2\" }\n // { dg-do run { target c++11 } }\n // { dg-require-normal-mode \"\" }\n+// { dg-require-effective-target cxx11-abi }\n \n // Copyright (C) 2015-2017 Free Software Foundation, Inc.\n //"}, {"sha": "3b9436dedf096e1ce05aa6494de41425a1168984", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/cons/base.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fbase.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fbase.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fbase.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -15,8 +15,9 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-O0 -D_GLIBCXX_USE_CXX11_ABI=1\" }\n+// { dg-options \"-O0\" }\n // { dg-do link { target c++11 } }\n+// { dg-require-effective-target cxx11-abi }\n \n #include <fstream>\n #include <string>"}, {"sha": "46b68b1c961ac9696968208064cf839bc6b39c68", "filename": "libstdc++-v3/testsuite/27_io/ios_base/failure/cxx11.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fcxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fcxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fcxx11.cc?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -16,11 +16,11 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n+// { dg-require-effective-target cxx11-abi }\n \n #include <ios>\n #include <testsuite_hooks.h>\n \n-#if _GLIBCXX_USE_CXX11_ABI\n using test_type = std::ios_base::failure;\n \n static_assert( std::is_base_of<std::system_error, test_type>::value, \"base\" );\n@@ -51,6 +51,3 @@ main()\n   test01();\n   test02();\n }\n-#else\n-int main() { }\n-#endif"}, {"sha": "b081d8a5b9007144de77cdccdc54a8b3aa14d93c", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90aa73309eafd5458a1c39b12cbdc7baddca9a2e/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=90aa73309eafd5458a1c39b12cbdc7baddca9a2e", "patch": "@@ -1968,7 +1968,7 @@ proc check_v3_target_filesystem_ts { } {\n \tclose $f\n \n \tset cxxflags_saved $cxxflags\n-\tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror -std=gnu++11\"\n+\tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n \n \tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n \tset cxxflags $cxxflags_saved\n@@ -1983,6 +1983,34 @@ proc check_v3_target_filesystem_ts { } {\n     return $et_filesystem_ts\n }\n \n+# Return 1 if the \"cxx11\" ABI is in use using the current flags, 0 otherwise.\n+proc check_effective_target_cxx11-abi { } {\n+    global cxxflags\n+\n+    # Set up and preprocess a C++ test program that depends\n+    # on the new ABI being enabled.\n+    set src cxx11_abi[pid].cc\n+\n+    set f [open $src \"w\"]\n+    puts $f \"#include <bits/c++config.h>\"\n+    puts $f \"#if ! _GLIBCXX_USE_CXX11_ABI\"\n+    puts $f \"#  error old ABI in use\"\n+    puts $f \"#endif\"\n+    close $f\n+\n+    set lines [v3_target_compile $src /dev/null preprocess \"\"]\n+    file delete $src\n+\n+    if [string match \"\" $lines] {\n+        # No error message, preprocessing succeeded.\n+        verbose \"check_v3_cxx11_abi: `1'\" 2\n+        return 1\n+    }\n+\n+    verbose \"check_v3_cxx11_abi: `0'\" 2\n+    return 0\n+}\n+\n set additional_prunes \"\"\n \n if { [info exists env(GCC_RUNTEST_PARALLELIZE_DIR)] \\"}]}