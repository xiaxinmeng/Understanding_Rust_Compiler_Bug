{"sha": "e4f0e06b2f50594ce13153319337c0eb8d9b2589", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRmMGUwNmIyZjUwNTk0Y2UxMzE1MzMxOTMzN2MwZWI4ZDliMjU4OQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-13T12:44:22Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-13T12:44:22Z"}, "message": "Add default revisions argument for git_check_commit.py.\n\n\t* gcc-changelog/git_check_commit.py: Add default argument HEAD\n\tfor revisions and improve error message output.", "tree": {"sha": "0fb16b378eaed834a9cd0ae33f018daa0dc47c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fb16b378eaed834a9cd0ae33f018daa0dc47c3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4f0e06b2f50594ce13153319337c0eb8d9b2589", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl6766YACgkQTcGC3A+n\nN4WF+QgApQg7WE/69rJyDtzEyEvlV3ZYhNCajVx2rRZI6i3Hd247H+bjQWAfWV+S\namlI4JtPyFtxfuu8ogGUGmbAVTkCA0XFhlhG0KmHPcxFjMjzDgUUssyaS960ryfl\nF+uEb04iKqkjQ9/a6py+YWmPWGofyxTa9oneg2CoaN6t0sXzlxuQ9Fff7TqpbiZZ\nDioGc+pyXyNi7jlgN5jP0FVhd2IDPLtBQ27puV8vEFda6QlxFR3L52Yeaet1Nbme\n/qGsOPkT1hrSSJ2KaeIVOfSLeXCOYCaUZciZpkvIiIz+TYd+6hNoz6Iy9kpJp8kj\n+g/RlVcDkTtcd6kiJ9a6Gu3oK9GJRw==\n=DpiC\n-----END PGP SIGNATURE-----", "payload": "tree 0fb16b378eaed834a9cd0ae33f018daa0dc47c3a\nparent b8333fc6f87655c3c1b9c93129b88d239b2fcaf9\nauthor Martin Liska <mliska@suse.cz> 1589373862 +0200\ncommitter Martin Liska <mliska@suse.cz> 1589373862 +0200\n\nAdd default revisions argument for git_check_commit.py.\n\n\t* gcc-changelog/git_check_commit.py: Add default argument HEAD\n\tfor revisions and improve error message output.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f0e06b2f50594ce13153319337c0eb8d9b2589", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4f0e06b2f50594ce13153319337c0eb8d9b2589", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f0e06b2f50594ce13153319337c0eb8d9b2589/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8333fc6f87655c3c1b9c93129b88d239b2fcaf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8333fc6f87655c3c1b9c93129b88d239b2fcaf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8333fc6f87655c3c1b9c93129b88d239b2fcaf9"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "f07b049535b34e09a00f7df5a62a78357ba579bc", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f0e06b2f50594ce13153319337c0eb8d9b2589/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f0e06b2f50594ce13153319337c0eb8d9b2589/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=e4f0e06b2f50594ce13153319337c0eb8d9b2589", "patch": "@@ -1,3 +1,8 @@\n+2020-05-13  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_check_commit.py: Add default argument HEAD\n+\tfor revisions and improve error message output.\n+\n 2020-05-13  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Restore print_output syntax"}, {"sha": "8553c90a96f52a1447b27b20c575e108396b7577", "filename": "contrib/gcc-changelog/git_check_commit.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f0e06b2f50594ce13153319337c0eb8d9b2589/contrib%2Fgcc-changelog%2Fgit_check_commit.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f0e06b2f50594ce13153319337c0eb8d9b2589/contrib%2Fgcc-changelog%2Fgit_check_commit.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Fgit_check_commit.py?ref=e4f0e06b2f50594ce13153319337c0eb8d9b2589", "patch": "@@ -22,7 +22,7 @@\n \n parser = argparse.ArgumentParser(description='Check git ChangeLog format '\n                                  'of a commit')\n-parser.add_argument('revisions',\n+parser.add_argument('revisions', default='HEAD', nargs='?',\n                     help='Git revisions (e.g. hash~5..hash or just hash)')\n parser.add_argument('-g', '--git-path', default='.',\n                     help='Path to git repository')\n@@ -36,9 +36,9 @@\n retval = 0\n for git_commit in parse_git_revisions(args.git_path, args.revisions,\n                                       not args.allow_non_strict_mode):\n-    print('Checking %s' % git_commit.hexsha)\n+    res = 'OK' if git_commit.success else 'FAILED'\n+    print('Checking %s: %s' % (git_commit.hexsha, res))\n     if git_commit.success:\n-        print('OK')\n         if args.print_changelog:\n             git_commit.print_output()\n     else:"}]}