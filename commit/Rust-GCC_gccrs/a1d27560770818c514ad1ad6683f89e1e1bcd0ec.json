{"sha": "a1d27560770818c514ad1ad6683f89e1e1bcd0ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFkMjc1NjA3NzA4MThjNTE0YWQxYWQ2NjgzZjg5ZTFlMWJjZDBlYw==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-07-20T01:49:17Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-07-20T01:49:17Z"}, "message": "vect: Recog mul_highpart pattern [PR100696]\n\nThis patch is to extend the existing pattern mulhs handlings\nto cover normal multiply highpart pattern recognization, it\nintroduces one new internal function IFN_MULH for 1:1 map to\n[su]mul_highpart optab.  Since it covers MULT_HIGHPART_EXPR\nwith optab support, i386 part change is to ensure it follows\nthe consistent costing path.\n\nBootstrapped & regtested on powerpc64le-linux-gnu P9,\nx86_64-redhat-linux and aarch64-linux-gnu.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/100696\n\t* internal-fn.c (first_commutative_argument): Add info for IFN_MULH.\n\t* internal-fn.def (IFN_MULH): New internal function.\n\t* tree-vect-patterns.c (vect_recog_mulhs_pattern): Add support to\n\trecog normal multiply highpart as IFN_MULH.\n\t* config/i386/i386.c (ix86_add_stmt_cost): Adjust for combined\n\tfunction CFN_MULH.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/100696\n\t* gcc.target/i386/pr100637-3w.c: Adjust for mul_highpart recog.", "tree": {"sha": "46cd1dff533809eb536b88b81536eefb0815624f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46cd1dff533809eb536b88b81536eefb0815624f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1d27560770818c514ad1ad6683f89e1e1bcd0ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d27560770818c514ad1ad6683f89e1e1bcd0ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1d27560770818c514ad1ad6683f89e1e1bcd0ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d27560770818c514ad1ad6683f89e1e1bcd0ec/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21ea2f9320d31d3d925031a8ba189d9b19e52bc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21ea2f9320d31d3d925031a8ba189d9b19e52bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21ea2f9320d31d3d925031a8ba189d9b19e52bc1"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "ff96134fb37a62e7bc2d8d1626e18641a59d68e0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d27560770818c514ad1ad6683f89e1e1bcd0ec/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d27560770818c514ad1ad6683f89e1e1bcd0ec/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a1d27560770818c514ad1ad6683f89e1e1bcd0ec", "patch": "@@ -22568,6 +22568,9 @@ ix86_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \t\t\t\t   mode == SFmode ? ix86_cost->fmass\n \t\t\t\t   : ix86_cost->fmasd);\n \tbreak;\n+      case CFN_MULH:\n+\tstmt_cost = ix86_multiplication_cost (ix86_cost, mode);\n+\tbreak;\n       default:\n \tbreak;\n       }"}, {"sha": "1360a00f0b93a002fbd59a1b3179b5f5093581a2", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d27560770818c514ad1ad6683f89e1e1bcd0ec/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d27560770818c514ad1ad6683f89e1e1bcd0ec/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=a1d27560770818c514ad1ad6683f89e1e1bcd0ec", "patch": "@@ -3703,6 +3703,7 @@ first_commutative_argument (internal_fn fn)\n     case IFN_FNMS:\n     case IFN_AVG_FLOOR:\n     case IFN_AVG_CEIL:\n+    case IFN_MULH:\n     case IFN_MULHS:\n     case IFN_MULHRS:\n     case IFN_FMIN:"}, {"sha": "3ac9ae68b2a6e8365c059824ef0864d7bf04fc2c", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d27560770818c514ad1ad6683f89e1e1bcd0ec/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d27560770818c514ad1ad6683f89e1e1bcd0ec/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=a1d27560770818c514ad1ad6683f89e1e1bcd0ec", "patch": "@@ -169,6 +169,8 @@ DEF_INTERNAL_SIGNED_OPTAB_FN (AVG_FLOOR, ECF_CONST | ECF_NOTHROW, first,\n DEF_INTERNAL_SIGNED_OPTAB_FN (AVG_CEIL, ECF_CONST | ECF_NOTHROW, first,\n \t\t\t      savg_ceil, uavg_ceil, binary)\n \n+DEF_INTERNAL_SIGNED_OPTAB_FN (MULH, ECF_CONST | ECF_NOTHROW, first,\n+\t\t\t      smul_highpart, umul_highpart, binary)\n DEF_INTERNAL_SIGNED_OPTAB_FN (MULHS, ECF_CONST | ECF_NOTHROW, first,\n \t\t\t      smulhs, umulhs, binary)\n DEF_INTERNAL_SIGNED_OPTAB_FN (MULHRS, ECF_CONST | ECF_NOTHROW, first,"}, {"sha": "4ea467b4af5b50ecfb8760cbb2aae02832df61d0", "filename": "gcc/testsuite/gcc.target/i386/pr100637-3w.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d27560770818c514ad1ad6683f89e1e1bcd0ec/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-3w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d27560770818c514ad1ad6683f89e1e1bcd0ec/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-3w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-3w.c?ref=a1d27560770818c514ad1ad6683f89e1e1bcd0ec", "patch": "@@ -1,6 +1,6 @@\n /* PR target/100637 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -msse4\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse4 -fno-vect-cost-model\" } */\n \n short r[2], a[2], b[2];\n unsigned short ur[2], ua[2], ub[2];\n@@ -13,7 +13,7 @@ void mulh (void)\n     r[i] = ((int) a[i] * b[i]) >> 16;\n }\n \n-/* { dg-final { scan-assembler \"pmulhw\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler \"pmulhw\" } } */\n \n void mulhu (void)\n {\n@@ -23,7 +23,7 @@ void mulhu (void)\n     ur[i] = ((unsigned int) ua[i] * ub[i]) >> 16;\n }\n \n-/* { dg-final { scan-assembler \"pmulhuw\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler \"pmulhuw\" } } */\n \n void mulhrs (void)\n {"}, {"sha": "70bb751865b2cbac05e66ae8bc0620b1c470f2f1", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d27560770818c514ad1ad6683f89e1e1bcd0ec/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d27560770818c514ad1ad6683f89e1e1bcd0ec/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=a1d27560770818c514ad1ad6683f89e1e1bcd0ec", "patch": "@@ -1934,8 +1934,15 @@ vect_recog_over_widening_pattern (vec_info *vinfo,\n \n    1) Multiply high with scaling\n      TYPE res = ((TYPE) a * (TYPE) b) >> c;\n+     Here, c is bitsize (TYPE) / 2 - 1.\n+\n    2) ... or also with rounding\n      TYPE res = (((TYPE) a * (TYPE) b) >> d + 1) >> 1;\n+     Here, d is bitsize (TYPE) / 2 - 2.\n+\n+   3) Normal multiply high\n+     TYPE res = ((TYPE) a * (TYPE) b) >> e;\n+     Here, e is bitsize (TYPE) / 2.\n \n    where only the bottom half of res is used.  */\n \n@@ -1980,7 +1987,6 @@ vect_recog_mulhs_pattern (vec_info *vinfo,\n   stmt_vec_info mulh_stmt_info;\n   tree scale_term;\n   internal_fn ifn;\n-  unsigned int expect_offset;\n \n   /* Check for the presence of the rounding term.  */\n   if (gimple_assign_rhs_code (rshift_input_stmt) == PLUS_EXPR)\n@@ -2029,25 +2035,37 @@ vect_recog_mulhs_pattern (vec_info *vinfo,\n \n       /* Get the scaling term.  */\n       scale_term = gimple_assign_rhs2 (plus_input_stmt);\n+      /* Check that the scaling factor is correct.  */\n+      if (TREE_CODE (scale_term) != INTEGER_CST)\n+\treturn NULL;\n+\n+      /* Check pattern 2).  */\n+      if (wi::to_widest (scale_term) + target_precision + 2\n+\t  != TYPE_PRECISION (lhs_type))\n+\treturn NULL;\n \n-      expect_offset = target_precision + 2;\n       ifn = IFN_MULHRS;\n     }\n   else\n     {\n       mulh_stmt_info = rshift_input_stmt_info;\n       scale_term = gimple_assign_rhs2 (last_stmt);\n+      /* Check that the scaling factor is correct.  */\n+      if (TREE_CODE (scale_term) != INTEGER_CST)\n+\treturn NULL;\n \n-      expect_offset = target_precision + 1;\n-      ifn = IFN_MULHS;\n+      /* Check for pattern 1).  */\n+      if (wi::to_widest (scale_term) + target_precision + 1\n+\t  == TYPE_PRECISION (lhs_type))\n+\tifn = IFN_MULHS;\n+      /* Check for pattern 3).  */\n+      else if (wi::to_widest (scale_term) + target_precision\n+\t       == TYPE_PRECISION (lhs_type))\n+\tifn = IFN_MULH;\n+      else\n+\treturn NULL;\n     }\n \n-  /* Check that the scaling factor is correct.  */\n-  if (TREE_CODE (scale_term) != INTEGER_CST\n-      || wi::to_widest (scale_term) + expect_offset\n-\t   != TYPE_PRECISION (lhs_type))\n-    return NULL;\n-\n   /* Check whether the scaling input term can be seen as two widened\n      inputs multiplied together.  */\n   vect_unpromoted_value unprom_mult[2];"}]}