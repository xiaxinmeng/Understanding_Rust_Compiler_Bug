{"sha": "2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ2M2JjMzk4ZjcyMjFlZGJlYzNlM2YxZDRlY2JhY2FjODdjYjNhNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-01-26T21:34:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-01-26T21:34:10Z"}, "message": "re PR c++/68782 (bad reference member formed with constexpr)\n\n\tPR c++/68782\n\ngcc/\n\t* tree.c (recompute_constructor_flags): Split out from\n\tbuild_constructor.\n\t(verify_constructor_flags): New.\n\t* tree.h: Declare them.\ngcc/cp/\n\t* constexpr.c (cxx_eval_bare_aggregate): Update TREE_CONSTANT\n\tand TREE_SIDE_EFFECTS.\n\t(cxx_eval_constant_expression) [CONSTRUCTOR]: Call\n\tverify_constructor_flags.\n\nFrom-SVN: r232847", "tree": {"sha": "d035f1d3c7a75a68a3d60f7179cbe147b4437151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d035f1d3c7a75a68a3d60f7179cbe147b4437151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3671c99673af214992ef23e4fd9a28ab2417f33a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3671c99673af214992ef23e4fd9a28ab2417f33a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3671c99673af214992ef23e4fd9a28ab2417f33a"}], "stats": {"total": 161, "additions": 141, "deletions": 20}, "files": [{"sha": "043dd88bf6184eb625fcdaeab4a636640aad959b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5", "patch": "@@ -1,3 +1,11 @@\n+2016-01-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/68782\n+\t* tree.c (recompute_constructor_flags): Split out from\n+\tbuild_constructor.\n+\t(verify_constructor_flags): New.\n+\t* tree.h: Declare them.\n+\n 2016-01-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR rtl-optimization/69217"}, {"sha": "dee9e4d3a9322bbc715d07058f23a0cdb23b9b4a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5", "patch": "@@ -1,3 +1,11 @@\n+2016-01-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/68782\n+\t* constexpr.c (cxx_eval_bare_aggregate): Update TREE_CONSTANT\n+\tand TREE_SIDE_EFFECTS.\n+\t(cxx_eval_constant_expression) [CONSTRUCTOR]: Call\n+\tverify_constructor_flags.\n+\n 2016-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/68357"}, {"sha": "eed7308fb1a46304f91fb73bbfa3cef90b4a40e4", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5", "patch": "@@ -2214,7 +2214,10 @@ cxx_eval_bare_aggregate (const constexpr_ctx *ctx, tree t,\n   vec<constructor_elt, va_gc> **p = &CONSTRUCTOR_ELTS (ctx->ctor);\n   vec_alloc (*p, vec_safe_length (v));\n \n-  unsigned i; tree index, value;\n+  unsigned i;\n+  tree index, value;\n+  bool constant_p = true;\n+  bool side_effects_p = false;\n   FOR_EACH_CONSTRUCTOR_ELT (v, i, index, value)\n     {\n       constexpr_ctx new_ctx;\n@@ -2231,6 +2234,11 @@ cxx_eval_bare_aggregate (const constexpr_ctx *ctx, tree t,\n \tbreak;\n       if (elt != value)\n \tchanged = true;\n+\n+      if (!TREE_CONSTANT (elt))\n+\tconstant_p = false;\n+      if (TREE_SIDE_EFFECTS (elt))\n+\tside_effects_p = true;\n       if (index && TREE_CODE (index) == COMPONENT_REF)\n \t{\n \t  /* This is an initialization of a vfield inside a base\n@@ -2264,6 +2272,8 @@ cxx_eval_bare_aggregate (const constexpr_ctx *ctx, tree t,\n   /* We're done building this CONSTRUCTOR, so now we can interpret an\n      element without an explicit initializer as value-initialized.  */\n   CONSTRUCTOR_NO_IMPLICIT_ZERO (t) = false;\n+  TREE_CONSTANT (t) = constant_p;\n+  TREE_SIDE_EFFECTS (t) = side_effects_p;\n   if (VECTOR_TYPE_P (TREE_TYPE (t)))\n     t = fold (t);\n   return t;\n@@ -2826,6 +2836,8 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n     }\n   type = TREE_TYPE (object);\n   bool no_zero_init = true;\n+\n+  vec<tree,va_gc> *ctors = make_tree_vector ();\n   while (!refs->is_empty())\n     {\n       if (*valp == NULL_TREE)\n@@ -2837,6 +2849,8 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \t subobjects will also be zero-initialized.  */\n       no_zero_init = CONSTRUCTOR_NO_IMPLICIT_ZERO (*valp);\n \n+      vec_safe_push (ctors, *valp);\n+\n       enum tree_code code = TREE_CODE (type);\n       type = refs->pop();\n       tree index = refs->pop();\n@@ -2889,14 +2903,36 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n       /* The hash table might have moved since the get earlier.  */\n       valp = ctx->values->get (object);\n       if (TREE_CODE (init) == CONSTRUCTOR)\n-\t/* An outer ctx->ctor might be pointing to *valp, so just replace\n-\t   its contents.  */\n-\tCONSTRUCTOR_ELTS (*valp) = CONSTRUCTOR_ELTS (init);\n+\t{\n+\t  /* An outer ctx->ctor might be pointing to *valp, so replace\n+\t     its contents.  */\n+\t  CONSTRUCTOR_ELTS (*valp) = CONSTRUCTOR_ELTS (init);\n+\t  TREE_CONSTANT (*valp) = TREE_CONSTANT (init);\n+\t  TREE_SIDE_EFFECTS (*valp) = TREE_SIDE_EFFECTS (init);\n+\t}\n       else\n \t*valp = init;\n     }\n   else\n-    *valp = init;\n+    {\n+      *valp = init;\n+\n+      /* Update TREE_CONSTANT and TREE_SIDE_EFFECTS on enclosing\n+\t CONSTRUCTORs.  */\n+      tree elt;\n+      unsigned i;\n+      bool c = TREE_CONSTANT (init);\n+      bool s = TREE_SIDE_EFFECTS (init);\n+      if (!c || s)\n+\tFOR_EACH_VEC_SAFE_ELT (ctors, i, elt)\n+\t  {\n+\t    if (!c)\n+\t      TREE_CONSTANT (elt) = false;\n+\t    if (s)\n+\t      TREE_SIDE_EFFECTS (elt) = true;\n+\t  }\n+    }\n+  release_tree_vector (ctors);\n \n   if (*non_constant_p)\n     return t;\n@@ -3579,9 +3615,17 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \n     case CONSTRUCTOR:\n       if (TREE_CONSTANT (t))\n-\t/* Don't re-process a constant CONSTRUCTOR, but do fold it to\n-\t   VECTOR_CST if applicable.  */\n-\treturn fold (t);\n+\t{\n+\t  /* Don't re-process a constant CONSTRUCTOR, but do fold it to\n+\t     VECTOR_CST if applicable.  */\n+\t  /* FIXME after GCC 6 branches, make the verify unconditional.  */\n+\t  if (CHECKING_P)\n+\t    verify_constructor_flags (t);\n+\t  else\n+\t    recompute_constructor_flags (t);\n+\t  if (TREE_CONSTANT (t))\n+\t    return fold (t);\n+\t}\n       r = cxx_eval_bare_aggregate (ctx, t, lval,\n \t\t\t\t   non_constant_p, overflow_p);\n       break;"}, {"sha": "805d026269d03dbae8768d37165fbfbeee3a256d", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-aggr2.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-aggr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-aggr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-aggr2.C?ref=2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/68782\n+// { dg-do compile { target c++11 } }\n+\n+#define assert(X) do { if (!(X)) __builtin_abort(); } while (0)\n+\n+struct holder { int& value; };\n+\n+constexpr holder from_value(int& value)\n+{ return { value }; }\n+\n+struct aggr { int i; };\n+\n+constexpr holder from_aggr(aggr& a)\n+{ return from_value(a.i); }\n+\n+int main()\n+{\n+    aggr a { 42 };\n+\n+    // these don't fire\n+    assert( &from_value(a.i).value != nullptr );\n+    assert( &a.i == &from_value(a.i).value );\n+\n+    // those do\n+    assert( &from_aggr(a).value != nullptr );\n+    assert( &a.i == &from_aggr(a).value );\n+}"}, {"sha": "fa7646b14e1fc5b0ddc1891dfc8d004c723ccc76", "filename": "gcc/tree.c", "status": "modified", "additions": 44, "deletions": 12, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5", "patch": "@@ -1790,34 +1790,66 @@ build_vector_from_val (tree vectype, tree sc)\n     }\n }\n \n-/* Return a new CONSTRUCTOR node whose type is TYPE and whose values\n-   are in the vec pointed to by VALS.  */\n-tree\n-build_constructor (tree type, vec<constructor_elt, va_gc> *vals)\n+/* Something has messed with the elements of CONSTRUCTOR C after it was built;\n+   calculate TREE_CONSTANT and TREE_SIDE_EFFECTS.  */\n+\n+void\n+recompute_constructor_flags (tree c)\n {\n-  tree c = make_node (CONSTRUCTOR);\n   unsigned int i;\n-  constructor_elt *elt;\n+  tree val;\n   bool constant_p = true;\n   bool side_effects_p = false;\n+  vec<constructor_elt, va_gc> *vals = CONSTRUCTOR_ELTS (c);\n \n-  TREE_TYPE (c) = type;\n-  CONSTRUCTOR_ELTS (c) = vals;\n-\n-  FOR_EACH_VEC_SAFE_ELT (vals, i, elt)\n+  FOR_EACH_CONSTRUCTOR_VALUE (vals, i, val)\n     {\n       /* Mostly ctors will have elts that don't have side-effects, so\n \t the usual case is to scan all the elements.  Hence a single\n \t loop for both const and side effects, rather than one loop\n \t each (with early outs).  */\n-      if (!TREE_CONSTANT (elt->value))\n+      if (!TREE_CONSTANT (val))\n \tconstant_p = false;\n-      if (TREE_SIDE_EFFECTS (elt->value))\n+      if (TREE_SIDE_EFFECTS (val))\n \tside_effects_p = true;\n     }\n \n   TREE_SIDE_EFFECTS (c) = side_effects_p;\n   TREE_CONSTANT (c) = constant_p;\n+}\n+\n+/* Make sure that TREE_CONSTANT and TREE_SIDE_EFFECTS are correct for\n+   CONSTRUCTOR C.  */\n+\n+void\n+verify_constructor_flags (tree c)\n+{\n+  unsigned int i;\n+  tree val;\n+  bool constant_p = TREE_CONSTANT (c);\n+  bool side_effects_p = TREE_SIDE_EFFECTS (c);\n+  vec<constructor_elt, va_gc> *vals = CONSTRUCTOR_ELTS (c);\n+\n+  FOR_EACH_CONSTRUCTOR_VALUE (vals, i, val)\n+    {\n+      if (constant_p && !TREE_CONSTANT (val))\n+\tinternal_error (\"non-constant element in constant CONSTRUCTOR\");\n+      if (!side_effects_p && TREE_SIDE_EFFECTS (val))\n+\tinternal_error (\"side-effects element in no-side-effects CONSTRUCTOR\");\n+    }\n+}\n+\n+/* Return a new CONSTRUCTOR node whose type is TYPE and whose values\n+   are in the vec pointed to by VALS.  */\n+tree\n+build_constructor (tree type, vec<constructor_elt, va_gc> *vals)\n+{\n+  tree c = make_node (CONSTRUCTOR);\n+\n+  TREE_TYPE (c) = type;\n+  CONSTRUCTOR_ELTS (c) = vals;\n+\n+  recompute_constructor_flags (c);\n \n   return c;\n }"}, {"sha": "f789785ed25ff1169a28f348224888e7cfc0b135", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2d63bc398f7221edbec3e3f1d4ecbacac87cb3a5", "patch": "@@ -3918,6 +3918,8 @@ extern tree build_vector_stat (tree, tree * MEM_STAT_DECL);\n #define build_vector(t,v) build_vector_stat (t, v MEM_STAT_INFO)\n extern tree build_vector_from_ctor (tree, vec<constructor_elt, va_gc> *);\n extern tree build_vector_from_val (tree, tree);\n+extern void recompute_constructor_flags (tree);\n+extern void verify_constructor_flags (tree);\n extern tree build_constructor (tree, vec<constructor_elt, va_gc> *);\n extern tree build_constructor_single (tree, tree, tree);\n extern tree build_constructor_from_list (tree, tree);"}]}