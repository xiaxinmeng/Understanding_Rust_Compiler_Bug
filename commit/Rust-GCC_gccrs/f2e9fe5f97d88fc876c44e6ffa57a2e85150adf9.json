{"sha": "f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJlOWZlNWY5N2Q4OGZjODc2YzQ0ZTZmZmE1N2EyZTg1MTUwYWRmOQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-13T16:28:26Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-13T16:28:26Z"}, "message": "PR c/94040 - ICE on a call to an invalid redeclaration of strftime\n\ngcc/c/ChangeLog:\n\n\tPR c/94040\n\t* c-decl.c (builtin_structptr_type_count): New constant.\n\t(match_builtin_function_types): Reject decls that are incompatible\n\tin types pointed to by pointers.\n\t(diagnose_mismatched_decls): Adjust comments.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/94040\n\t* gcc.dg/Wbuiltin-declaration-mismatch-12.c: Relax test to look\n\tfor warning name rather than the exact text.\n\t* gcc.dg/Wbuiltin-declaration-mismatch-14.c: New test.\n\t* gcc.dg/Wbuiltin-declaration-mismatch-15.c: New test.\n\t* gcc.dg/pr62090.c: Prune expected warning.\n\t* gcc.dg/pr89314.c: Look for warning name rather than text.", "tree": {"sha": "4efc5313286608ccae0b5b9224a5c4381b76064c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4efc5313286608ccae0b5b9224a5c4381b76064c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ae8bc027743d7c2d25f90d6752a1f4e0dc153cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ae8bc027743d7c2d25f90d6752a1f4e0dc153cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ae8bc027743d7c2d25f90d6752a1f4e0dc153cf"}], "stats": {"total": 225, "additions": 198, "deletions": 27}, "files": [{"sha": "d3a3b2fc78412e205e0d5d769411e8a112c33f50", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9", "patch": "@@ -1,3 +1,11 @@\n+2020-03-13  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/94040\n+\t* c-decl.c (builtin_structptr_type_count): New constant.\n+\t(match_builtin_function_types): Reject decls that are incompatible\n+\tin types pointed to by pointers.\n+\t(diagnose_mismatched_decls): Adjust comments.\n+\n 2020-03-05  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/93577"}, {"sha": "87a0734b7154a8151246a1b8e5ea6f9e0254d96d", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 42, "deletions": 24, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9", "patch": "@@ -1641,13 +1641,17 @@ c_bind (location_t loc, tree decl, bool is_global)\n }\n \f\n \n-/* Stores the first FILE*, const struct tm* etc. argument type (whatever it\n-   is) seen in a declaration of a file I/O etc. built-in.  Subsequent\n-   declarations of such built-ins are expected to refer to it rather than to\n-   fileptr_type_node etc. which is just void* (or to any other type).\n+/* Stores the first FILE*, const struct tm* etc. argument type (whatever\n+   it is) seen in a declaration of a file I/O etc. built-in, corresponding\n+   to the builtin_structptr_types array.  Subsequent declarations of such\n+   built-ins are expected to refer to it rather than to fileptr_type_node,\n+   etc. which is just void* (or to any other type).\n    Used only by match_builtin_function_types.  */\n \n-static GTY(()) tree last_structptr_types[6];\n+static const unsigned builtin_structptr_type_count\n+  = sizeof builtin_structptr_types / sizeof builtin_structptr_types[0];\n+\n+static GTY(()) tree last_structptr_types[builtin_structptr_type_count];\n \n /* Returns true if types T1 and T2 representing return types or types\n    of function arguments are close enough to be considered interchangeable\n@@ -1692,10 +1696,13 @@ match_builtin_function_types (tree newtype, tree oldtype,\n   tree newargs = TYPE_ARG_TYPES (newtype);\n   tree tryargs = newargs;\n \n-  gcc_checking_assert ((sizeof (last_structptr_types)\n-\t\t\t/ sizeof (last_structptr_types[0]))\n-\t\t       == (sizeof (builtin_structptr_types)\n-\t\t\t   / sizeof (builtin_structptr_types[0])));\n+  const unsigned nlst\n+    = sizeof last_structptr_types / sizeof last_structptr_types[0];\n+  const unsigned nbst\n+    = sizeof builtin_structptr_types / sizeof builtin_structptr_types[0];\n+\n+  gcc_checking_assert (nlst == nbst);\n+\n   for (unsigned i = 1; oldargs || newargs; ++i)\n     {\n       if (!oldargs\n@@ -1710,11 +1717,12 @@ match_builtin_function_types (tree newtype, tree oldtype,\n       if (!types_close_enough_to_match (oldtype, newtype))\n \treturn NULL_TREE;\n \n-      unsigned j = (sizeof (builtin_structptr_types)\n-\t\t    / sizeof (builtin_structptr_types[0]));\n+      unsigned j = nbst;\n       if (POINTER_TYPE_P (oldtype))\n-\tfor (j = 0; j < (sizeof (builtin_structptr_types)\n-\t\t\t / sizeof (builtin_structptr_types[0])); ++j)\n+\t/* Iterate over well-known struct types like FILE (whose types\n+\t   aren't known to us) and compare the pointer to each to\n+\t   the pointer argument.  */\n+\tfor (j = 0; j < nbst; ++j)\n \t  {\n \t    if (TREE_VALUE (oldargs) != builtin_structptr_types[j].node)\n \t      continue;\n@@ -1734,13 +1742,26 @@ match_builtin_function_types (tree newtype, tree oldtype,\n \t      last_structptr_types[j] = newtype;\n \t    break;\n \t  }\n-      if (j == (sizeof (builtin_structptr_types)\n-\t\t/ sizeof (builtin_structptr_types[0]))\n-\t  && !*strict\n-\t  && !comptypes (oldtype, newtype))\n+\n+      if (j == nbst && !comptypes (oldtype, newtype))\n \t{\n-\t  *argno = i;\n-\t  *strict = oldtype;\n+\t  if (POINTER_TYPE_P (oldtype))\n+\t    {\n+\t      /* For incompatible pointers, only reject differences in\n+\t\t the unqualified variants of the referenced types but\n+\t\t consider differences in qualifiers as benign (report\n+\t\t those to caller via *STRICT below).  */\n+\t      tree oldref = TYPE_MAIN_VARIANT (TREE_TYPE (oldtype));\n+\t      tree newref = TYPE_MAIN_VARIANT (TREE_TYPE (newtype));\n+\t      if (!comptypes (oldref, newref))\n+\t\treturn NULL_TREE;\n+\t    }\n+\n+\t  if (!*strict)\n+\t    {\n+\t      *argno = i;\n+\t      *strict = oldtype;\n+\t    }\n \t}\n \n       oldargs = TREE_CHAIN (oldargs);\n@@ -1965,9 +1986,8 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t{\n \t  /* Accept \"harmless\" mismatches in function types such\n \t     as missing qualifiers or int vs long when they're the same\n-\t     size.  However, with -Wextra in effect, diagnose return and\n-\t     argument types that are incompatible according to language\n-\t     rules.  */\n+\t     size.  However, diagnose return and argument types that are\n+\t     incompatible according to language rules.  */\n \t  tree mismatch_expect;\n \t  unsigned mismatch_argno;\n \n@@ -2002,8 +2022,6 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \n \t  if (mismatch_expect && extra_warnings)\n \t    {\n-\t      /* If types match only loosely, print a warning but accept\n-\t\t the redeclaration.  */\n \t      location_t newloc = DECL_SOURCE_LOCATION (newdecl);\n \t      bool warned = false;\n \t      if (mismatch_argno)"}, {"sha": "a379b4039d7ac4636bedc14cd642fbeb41734270", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9", "patch": "@@ -1,3 +1,13 @@\n+2020-03-13  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/94040\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-12.c: Relax test to look\n+\tfor warning name rather than the exact text.\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-14.c: New test.\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-15.c: New test.\n+\t* gcc.dg/pr62090.c: Prune expected warning.\n+\t* gcc.dg/pr89314.c: Look for warning name rather than text.\n+\n 2020-03-13  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/pr64409.c: Do not limit compilation to x32 targets."}, {"sha": "f12ef6afb103d5fe793cc90337dd02f384438ec6", "filename": "gcc/testsuite/gcc.dg/Wbuiltin-declaration-mismatch-12.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-12.c?ref=f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9", "patch": "@@ -3,6 +3,6 @@\n    { dg-do compile }\n    { dg-options \"-Wbuiltin-declaration-mismatch -Wextra\" } */\n \n-extern void __clear_cache (char*, char*);   /* { dg-warning \"mismatch in argument 1 type of built-in function .__clear_cache.; expected .void \\\\\\*.\" } */\n+extern void __clear_cache (char*, char*);      // { dg-warning \"\\\\\\[-Wbuiltin-declaration-mismatch\" }\n \n-void __builtin_prefetch (const char *, ...);   /* { dg-warning \"mismatch in argument 1 type of built-in function .__builtin_prefetch.; expected .const void \\\\\\*.\" } */\n+void __builtin_prefetch (const char *, ...);   // { dg-warning \"\\\\\\[-Wbuiltin-declaration-mismatch\" }"}, {"sha": "cc536d714313e8d3fd33733251f65d7b89c0ec73", "filename": "gcc/testsuite/gcc.dg/Wbuiltin-declaration-mismatch-14.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-14.c?ref=f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9", "patch": "@@ -0,0 +1,77 @@\n+/* PR c/94040 - ICE on a call to an invalid redeclaration of strftime\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct tm;\n+\n+size_t strftime (char *, size_t, int *, struct tm *);   // { dg-warning \"-Wbuiltin-declaration-mismatch\" }\n+\n+size_t call_strftime (char *d, size_t n, int *f, struct tm *t)\n+{\n+  size_t r = 0;\n+  r += strftime (0, 0, 0, 0);\n+  r += strftime (d, 0, 0, 0);\n+  r += strftime (d, n, 0, 0);\n+  r += strftime (d, n, f, 0);\n+  r += strftime (d, n, f, t);\n+  return r;\n+}\n+\n+\n+char* strchr (char*, char*); // { dg-warning \"-Wbuiltin-declaration-mismatch\" }\n+\n+// Verify that missing/extra qualifiers aren't diagnosed without -Wextra.\n+\n+int strcmp (char*, char*);\n+int strncmp (volatile char*, volatile char*, size_t);\n+\n+// Verify that a difference in pointers is diagnosed.\n+\n+size_t strlen (const char**);\n+// { dg-warning \"-Wbuiltin-declaration-mismatch\" \"pointer\" { target *-*-* } .-1 }\n+\n+ size_t strnlen (const char* const*, size_t);\n+// { dg-warning \"-Wbuiltin-declaration-mismatch\" \"pointer\" { target *-*-* } .-1 }\n+\n+\n+// Verify that calls to the compatibly-redeclared built-ins are treated\n+// as those to the built-ins and diagnosed.\n+\n+int test_builtin_calls (size_t n)\n+{\n+  int r = 0;\n+  r += strcmp ((char*)0, \"\");               // { dg-warning \"\\\\\\[-Wnonnull]\" }\n+  r += strcmp (\"\", (char*)0);               // { dg-warning \"\\\\\\[-Wnonnull]\" }\n+\n+  r += strncmp ((char*)0, \"\", n);           // { dg-warning \"\\\\\\[-Wnonnull]\" }\n+  r += strncmp (\"\", (char*)0, n);           // { dg-warning \"\\\\\\[-Wnonnull]\" }\n+\n+  return r;\n+}\n+\n+\n+// Verify that calls to the incompatibly-redeclared built-ins are not\n+// treated as those to the built-ins by the middle-end.  It doesn't\n+// matter if the front-end diagnoses them but the middle-end should\n+// not because it shouldn't recognize them as built-ins.\n+\n+#pragma GCC optimize \"2\"\n+\n+size_t test_nonbuiltin_calls (char *s, int c)\n+{\n+  void *null = 0;\n+\n+  char *r;\n+  r = strchr ((char*)null, s);\n+  r = strchr (r, (char*)null);\n+  *s = *r;   // use the result\n+\n+  size_t n = 0;\n+  n += strftime (0, 0, 0, 0);\n+  n += strlen ((const char**)null);\n+  n += strnlen ((const char**)null, n);\n+\n+  return n;\n+}"}, {"sha": "3c32a5fc54559c011ea9d77fb2ab42a261bb5d36", "filename": "gcc/testsuite/gcc.dg/Wbuiltin-declaration-mismatch-15.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbuiltin-declaration-mismatch-15.c?ref=f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9", "patch": "@@ -0,0 +1,56 @@\n+/* PR c/94040 - ICE on a call to an invalid redeclaration of strftime\n+   { dg-do compile }\n+   { dg-options \"-Wall -Wextra\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+struct tm;\n+\n+size_t strftime (const char *, size_t, char *, struct tm *);\n+// { dg-warning \"-Wbuiltin-declaration-mismatch\" \"arg 1\" { target *-*-* } .-1 }\n+\n+// Verify that missing/extra qualifiers are diagnosed with -Wextra.\n+\n+int strcmp (char*, const char*);\n+// { dg-warning \"-Wbuiltin-declaration-mismatch\" \"arg 1\" { target *-*-* } .-1 }\n+\n+int strncmp (const char*, volatile char*, size_t);\n+// { dg-warning \"-Wbuiltin-declaration-mismatch\" \"arg 2\" { target *-*-* } .-1 }\n+\n+size_t strlen (char*);\n+// { dg-warning \"-Wbuiltin-declaration-mismatch\" \"arg 1\" { target *-*-* } .-1 }\n+\n+\n+// Verify that calls to built-ins declared with missing/extra qualifiers\n+// are still treated as those to built-ins by the front-end.\n+\n+int test_builtin_calls_fe (size_t n)\n+{\n+  int r = 0;\n+  r += strcmp ((char*)0, \"\");               // { dg-warning \"\\\\\\[-Wnonnull]\" }\n+  r += strcmp (\"\", (char*)0);               // { dg-warning \"\\\\\\[-Wnonnull]\" }\n+\n+  r += strncmp ((char*)0, \"\", n);           // { dg-warning \"\\\\\\[-Wnonnull]\" }\n+  r += strncmp (\"\", (char*)0, n);           // { dg-warning \"\\\\\\[-Wnonnull]\" }\n+\n+  r += strlen ((char*)0);                   // { dg-warning \"\\\\\\[-Wnonnull]\" }\n+  return r;\n+}\n+\n+\n+// Ditto but by the middle-end.\n+\n+#pragma GCC optimize \"2\"\n+\n+int test_builtin_calls_me (void)\n+{\n+  char *null1 = 0;\n+  char *null2 = null1;\n+  char *null3 = null2;\n+\n+  int r = 0;\n+  r += strcmp (null1, \"123\");               // { dg-warning \"\\\\\\[-Wnonnull]\" }\n+  r += strncmp (\"2345\", null2, 4);          // { dg-warning \"\\\\\\[-Wnonnull]\" }\n+  r += strlen (null3);                      // { dg-warning \"\\\\\\[-Wnonnull]\" }\n+  return r;\n+}"}, {"sha": "42f1345e646111e8fb0be9f169c2d700aec93fe5", "filename": "gcc/testsuite/gcc.dg/pr62090.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr62090.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr62090.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr62090.c?ref=f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9", "patch": "@@ -15,3 +15,5 @@ log_bad_request ()\n {\n   b += sprintf (0, \"foo\");\n }\n+\n+/* { dg-prune-output \"\\\\\\[-Wbuiltin-declaration-mismatch]\" } */"}, {"sha": "27b3a510bfd0ce2ea509ed74544e417317acec8f", "filename": "gcc/testsuite/gcc.dg/pr89314.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89314.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89314.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr89314.c?ref=f2e9fe5f97d88fc876c44e6ffa57a2e85150adf9", "patch": "@@ -2,7 +2,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -Wbuiltin-declaration-mismatch -Wextra\" } */\n \n-extern __SIZE_TYPE__ strlen (const float *);\t/* { dg-warning \"mismatch in argument 1 type of built-in function\" } */\n+extern __SIZE_TYPE__ strlen (const float *);\t/* { dg-warning \"\\\\\\[-Wbuiltin-declaration-mismatch\" } */\n void bar (void);\n \n void"}]}