{"sha": "717b209147986b24d6c73dbdcbbc09b24baaac00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE3YjIwOTE0Nzk4NmIyNGQ2YzczZGJkY2JiYzA5YjI0YmFhYWMwMA==", "commit": {"author": {"name": "Scott Gilbertson", "email": "scottg@mantatest.com", "date": "2004-07-12T16:26:07Z"}, "committer": {"name": "Scott Gilbertson", "email": "sgilbertson@gcc.gnu.org", "date": "2004-07-12T16:26:07Z"}, "message": "XCanvasPeer.java (createImage): Implement.\n\n2004-07-12  Scott Gilbertson  <scottg@mantatest.com>\n\n\t* gnu/awt/xlib/XCanvasPeer.java (createImage): Implement.\n\t* gnu/awt/xlib/XOffScreenImage.java\n\t  (XOffScreenImage): Add ImageConsumer interface. Add ColorModel\n\t  constructor argument. Add constructor using ImageProducer.\n\t  (getSource): Implement.\n\t  (imageComplete): New method.\n\t  (setColorModel): New method.\n\t  (setDimensions): New method.\n\t  (setHints): New method.\n\t  (setPixels): New method.\n\t  (setProperties): New method.\n\t* gnu/gcj/xlib/GC.java (drawPoint): New native method.\n\t* gnu/gcj/xlib/natGC.cc (drawPoint): New native method.\n\nFrom-SVN: r84564", "tree": {"sha": "1efe02e68e033589728d6cc19a9a1e9e107a2380", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1efe02e68e033589728d6cc19a9a1e9e107a2380"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/717b209147986b24d6c73dbdcbbc09b24baaac00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/717b209147986b24d6c73dbdcbbc09b24baaac00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/717b209147986b24d6c73dbdcbbc09b24baaac00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/717b209147986b24d6c73dbdcbbc09b24baaac00/comments", "author": null, "committer": null, "parents": [{"sha": "ccb14335ce321105a0d0a131f8236334d2fa72e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccb14335ce321105a0d0a131f8236334d2fa72e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccb14335ce321105a0d0a131f8236334d2fa72e8"}], "stats": {"total": 145, "additions": 140, "deletions": 5}, "files": [{"sha": "e8b80b6ce24f84981d9cfae34b2d2499be6681e7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717b209147986b24d6c73dbdcbbc09b24baaac00/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717b209147986b24d6c73dbdcbbc09b24baaac00/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=717b209147986b24d6c73dbdcbbc09b24baaac00", "patch": "@@ -1,3 +1,19 @@\n+2004-07-12  Scott Gilbertson  <scottg@mantatest.com>\n+\n+\t* gnu/awt/xlib/XCanvasPeer.java (createImage): Implement.\n+\t* gnu/awt/xlib/XOffScreenImage.java\n+\t  (XOffScreenImage): Add ImageConsumer interface. Add ColorModel\n+\t  constructor argument. Add constructor using ImageProducer.\n+\t  (getSource): Implement.\n+\t  (imageComplete): New method.\n+\t  (setColorModel): New method.\n+\t  (setDimensions): New method.\n+\t  (setHints): New method.\n+\t  (setPixels): New method.\n+\t  (setProperties): New method.\n+\t* gnu/gcj/xlib/GC.java (drawPoint): New native method. \n+\t* gnu/gcj/xlib/natGC.cc (drawPoint): New native method.\n+\n 2004-07-11  Bryce McKinlay  <mckinlay@redhat.com>\n \n \tPR libgcj/16478\t"}, {"sha": "5daee59dcd711f08815454a3d8515195099bb972", "filename": "libjava/gnu/awt/xlib/XCanvasPeer.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717b209147986b24d6c73dbdcbbc09b24baaac00/libjava%2Fgnu%2Fawt%2Fxlib%2FXCanvasPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717b209147986b24d6c73dbdcbbc09b24baaac00/libjava%2Fgnu%2Fawt%2Fxlib%2FXCanvasPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fxlib%2FXCanvasPeer.java?ref=717b209147986b24d6c73dbdcbbc09b24baaac00", "patch": "@@ -210,11 +210,11 @@ public int checkImage(Image img, int width, int height, ImageObserver o)\n   }\n   public Image createImage(ImageProducer prod)\n   {\n-    throw new UnsupportedOperationException(\"FIXME, not implemented\");\n+    return new XOffScreenImage (config, window, prod, config.getColorModel());\n   }\n   public Image createImage(int width, int height)\n   {\n-    return new XOffScreenImage (config, window, width, height);\n+    return new XOffScreenImage (config, window, width, height, config.getColorModel());\n   }\n   public void dispose()\n   {"}, {"sha": "0ea6c1b3a0ae22dc0b4e04034355acc6d228e19b", "filename": "libjava/gnu/awt/xlib/XOffScreenImage.java", "status": "modified", "additions": 108, "deletions": 3, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717b209147986b24d6c73dbdcbbc09b24baaac00/libjava%2Fgnu%2Fawt%2Fxlib%2FXOffScreenImage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717b209147986b24d6c73dbdcbbc09b24baaac00/libjava%2Fgnu%2Fawt%2Fxlib%2FXOffScreenImage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fxlib%2FXOffScreenImage.java?ref=717b209147986b24d6c73dbdcbbc09b24baaac00", "patch": "@@ -15,6 +15,7 @@\n import java.awt.image.ColorModel;\n import java.awt.image.ImageObserver;\n import java.awt.image.ImageProducer;\n+import java.awt.image.ImageConsumer;\n import java.util.Hashtable;\n import gnu.awt.j2d.DirectRasterGraphics;\n import gnu.awt.j2d.Graphics2DImpl;\n@@ -23,6 +24,7 @@\n import gnu.gcj.xlib.Pixmap;\n import gnu.gcj.xlib.Screen;\n import gnu.gcj.xlib.Visual;\n+import gnu.gcj.xlib.GC;\n \n /** Image class for xlib off-screen buffers.\n  * The image is stored in a server-side pixmap for best performance.\n@@ -34,26 +36,53 @@\n  * @author  scott gilbertson <scottg@mantatest.com> <sgilbertson@cogeco.ca>\n  */\n public class XOffScreenImage extends Image \n-                             implements IntegerGraphicsState.ScreenCoupledImage\n+                             implements IntegerGraphicsState.ScreenCoupledImage,\n+                             ImageConsumer\n {\n   private Pixmap pixmap;\n   private XGraphicsConfiguration config;\n   private int width;\n   private int height;\n+  private Drawable drawable;\n+  private ImageProducer prod;\n+  private GC gc;\n+  private ColorModel pixmapColorModel;\n   \n   /** Create a new XOffScreenImage\n    * @param config Graphics configuration, to compare against on-screen \n    *               components and to create the appropriate Graphics\n    * @param drawable The drawable with which the image is compatible\n    * @param width The width of the image\n    * @param height The height of the image\n+   * @param cm The ColorModel associated with drawable\n    */\n-  XOffScreenImage (XGraphicsConfiguration config, Drawable drawable, int width, int height)\n+  XOffScreenImage (XGraphicsConfiguration config, Drawable drawable, int width, int height, ColorModel cm)\n   {\n     this.config = config;\n     this.width = width;\n     this.height = height;\n+    this.drawable = drawable;\n+    pixmapColorModel = cm;\n     pixmap = new Pixmap (drawable, width, height, drawable.getDepth ());\n+    gc = GC.create (pixmap);\n+  }\n+  \n+  /** Create a new XOffScreenImage and obtain image data from an ImageProducer\n+   * @param config Graphics configuration, to compare against on-screen \n+   *               components and to create the appropriate Graphics\n+   * @param drawable The drawable with which the image is compatible\n+   * @param prod The source of image data for this image\n+   * @param cm The ColorModel associated with drawable\n+   */\n+  XOffScreenImage (XGraphicsConfiguration config, Drawable drawable, ImageProducer prod, ColorModel cm)\n+  {\n+    this.config = config;\n+    this.width = 0;  // size will be overridden in a moment\n+    this.height = 0;\n+    this.drawable = drawable;\n+    this.prod = prod;\n+    pixmapColorModel = cm;\n+    prod.startProduction (this);\n   }\n   \n   /** Get the pixmap which contains this image\n@@ -120,7 +149,10 @@ public int getHeight ()\n    */\n   public ImageProducer getSource ()\n   {\n-    throw new UnsupportedOperationException (\"getSource not supported\");\n+    if (prod == null)\n+      throw new UnsupportedOperationException (\"getSource not supported\");\n+    else\n+      return prod;\n   }\n   \n   /** Returns the width of the image, or -1 if it is unknown.  If the\n@@ -172,4 +204,77 @@ public GraphicsConfiguration getGraphicsConfiguration ()\n   {\n     return config;\n   }\n+  \n+  public void imageComplete (int status)\n+  {\n+  }\n+  \n+  public void setColorModel (ColorModel model)\n+  {\n+  }\n+  \n+  public void setDimensions (int width, int height)\n+  {\n+    this.width = width;\n+    this.height = height;\n+    pixmap = new Pixmap (drawable, width, height, drawable.getDepth ());\n+    gc = GC.create (pixmap);\n+  }\n+  \n+  public void setHints (int flags)\n+  {\n+  }\n+  \n+  public void setPixels (int x, int y, int w, int h, ColorModel model, int[] pixels, int offset, int scansize)\n+  {\n+    int idx = 0;\n+    float[] normalizedComponents = new float [4];\n+    int[] unnormalizedComponents = { 0, 0, 0, 0xff };\n+    normalizedComponents[3] = 1;\n+    for (int yp=y; yp < (y + h); yp++)\n+    {\n+      for (int xp=x; xp < (x + w); xp++)\n+      {\n+        int p = (yp - y) * scansize + (xp - x) + offset;\n+        // FIXME: there HAS to be a more efficient mechanism for color mapping\n+        normalizedComponents[0] = (float)model.getRed (pixels[p]) / 255F;\n+        normalizedComponents[1] = (float)model.getGreen (pixels[p]) / 255F;\n+        normalizedComponents[2] = (float)model.getBlue (pixels[p]) / 255F;\n+        pixmapColorModel.getUnnormalizedComponents (normalizedComponents, 0,\n+          unnormalizedComponents, 0);\n+        int pixelColor = pixmapColorModel.getDataElement (unnormalizedComponents, 0);\n+        gc.setForeground (pixelColor);\n+        gc.drawPoint (xp, yp);\n+      }\n+    }\n+  }\n+  \n+  public void setPixels (int x, int y, int w, int h, ColorModel model, byte[] pixels, int offset, int scansize)\n+  {\n+    int idx = 0;\n+    float[] normalizedComponents = new float [4];\n+    int[] unnormalizedComponents = { 0, 0, 0, 0xff };\n+    normalizedComponents[3] = 1;\n+    for (int yp=y; yp < (y + h); yp++)\n+    {\n+      for (int xp=x; xp < (x + w); xp++)\n+      {\n+        // FIXME: there HAS to be a more efficient mechanism for color mapping\n+        int p = (yp - y) * scansize + (xp - x) + offset;\n+        normalizedComponents[0] = (float)model.getRed (pixels[p]) / 255F;\n+        normalizedComponents[1] = (float)model.getGreen (pixels[p]) / 255F;\n+        normalizedComponents[2] = (float)model.getBlue (pixels[p]) / 255F;\n+        pixmapColorModel.getUnnormalizedComponents (normalizedComponents, 0,\n+          unnormalizedComponents, 0);\n+        int pixelColor = pixmapColorModel.getDataElement (unnormalizedComponents, 0);\n+        gc.setForeground (pixelColor);\n+        gc.drawPoint (xp, yp);\n+      }\n+    }\n+  }\n+  \n+  public void setProperties (Hashtable props)\n+  {\n+  }\n+  \n }"}, {"sha": "1a47cf66da93a5c32a036f1345ef0367c1f41fca", "filename": "libjava/gnu/gcj/xlib/GC.java", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717b209147986b24d6c73dbdcbbc09b24baaac00/libjava%2Fgnu%2Fgcj%2Fxlib%2FGC.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717b209147986b24d6c73dbdcbbc09b24baaac00/libjava%2Fgnu%2Fgcj%2Fxlib%2FGC.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fxlib%2FGC.java?ref=717b209147986b24d6c73dbdcbbc09b24baaac00", "patch": "@@ -132,6 +132,11 @@ public native void fillArc(int x, int y, int w, int h,\n   public native void clearArea(int x, int y, int w, int h,\n \t\t\t       boolean exposures);\n \n+  /** Draw a point using the current foreground color\n+   * @param x The x coordinate at which to draw\n+   * @param t The y coordinate at which to draw\n+   */\n+  public native void drawPoint (int x, int y);\n \n   public native void putImage(XImage image,\n \t\t\t      int srcX, int srcY,"}, {"sha": "4529ebb609fb82cf553edf98b88bc4bdb7e1658e", "filename": "libjava/gnu/gcj/xlib/natGC.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717b209147986b24d6c73dbdcbbc09b24baaac00/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatGC.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717b209147986b24d6c73dbdcbbc09b24baaac00/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatGC.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fxlib%2FnatGC.cc?ref=717b209147986b24d6c73dbdcbbc09b24baaac00", "patch": "@@ -117,6 +117,15 @@ void gnu::gcj::xlib::GC::drawString(jstring text, jint x, jint y)\n   XDrawString16(dpy, drawableXID, gc, x, y, xwchars, length);\n }\n \n+void gnu::gcj::xlib::GC::drawPoint(jint x, jint y)\n+{\n+  Display* display = target->getDisplay();\n+  ::Display* dpy = (::Display*) (display->display);\n+  ::Drawable drawableXID = target->getXID();\n+  ::GC gc = (::GC) structure;\n+  XDrawPoint (dpy, drawableXID, gc, x, y);\n+}\n+\n void gnu::gcj::xlib::GC::drawLine(jint x1, jint y1, jint x2, jint y2)\n {\n   Display* display = target->getDisplay();"}]}