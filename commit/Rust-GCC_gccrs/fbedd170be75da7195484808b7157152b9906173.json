{"sha": "fbedd170be75da7195484808b7157152b9906173", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJlZGQxNzBiZTc1ZGE3MTk1NDg0ODA4YjcxNTcxNTJiOTkwNjE3Mw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2016-09-26T20:13:21Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2016-09-26T20:13:21Z"}, "message": "Fix fallthrough comments for Ada, Solaris/x86, SPARC\n\n\tgcc:\n\t* config/i386/i386.c (ix86_print_operand)\n\t[HAVE_AS_IX86_CMOV_SUN_SYNTAX]: Add gcc_fallthrough.\n\t* config/sparc/sparc.c (check_pic): Add fallthrough comment.\n\t(epilogue_renumber): Likewise.\n\n\tgcc/ada:\n\t* gcc-interface/decl.c: Fix fall through comment formatting.\n\t* gcc-interface/misc.c: Likewise.\n\t* gcc-interface/trans.c: Likewise.\n\t* gcc-interface/utils.c: Likewise.\n\t* gcc-interface/utils2.c: Likewise.\n\nFrom-SVN: r240509", "tree": {"sha": "b37e490b1419791aca763a6d47ac22de295fefa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b37e490b1419791aca763a6d47ac22de295fefa9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbedd170be75da7195484808b7157152b9906173", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbedd170be75da7195484808b7157152b9906173", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbedd170be75da7195484808b7157152b9906173", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbedd170be75da7195484808b7157152b9906173/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a184e37f0c1e72404b92c1bef9aa812b75b16fd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a184e37f0c1e72404b92c1bef9aa812b75b16fd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a184e37f0c1e72404b92c1bef9aa812b75b16fd8"}], "stats": {"total": 84, "additions": 52, "deletions": 32}, "files": [{"sha": "5bca0c2e45bc93cbcc5c6f84a5b51dedb32f58bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbedd170be75da7195484808b7157152b9906173/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbedd170be75da7195484808b7157152b9906173/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbedd170be75da7195484808b7157152b9906173", "patch": "@@ -1,3 +1,10 @@\n+2016-09-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/i386/i386.c (ix86_print_operand)\n+\t[HAVE_AS_IX86_CMOV_SUN_SYNTAX]: Add gcc_fallthrough.\n+\t* config/sparc/sparc.c (check_pic): Add fallthrough comment.\n+\t(epilogue_renumber): Likewise.\n+\n 2016-09-26  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR middle-end/77719"}, {"sha": "032d5cd7e9d0c16eda869aa85aa365aeac8430a6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbedd170be75da7195484808b7157152b9906173/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbedd170be75da7195484808b7157152b9906173/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fbedd170be75da7195484808b7157152b9906173", "patch": "@@ -1,3 +1,11 @@\n+2016-09-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* gcc-interface/decl.c: Fix fall through comment formatting.\n+\t* gcc-interface/misc.c: Likewise.\n+\t* gcc-interface/trans.c: Likewise.\n+\t* gcc-interface/utils.c: Likewise.\n+\t* gcc-interface/utils2.c: Likewise.\n+\n 2016-09-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity): Use"}, {"sha": "60dc32c9cd040964f49b639f32bf7e86b2354ff6", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbedd170be75da7195484808b7157152b9906173/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbedd170be75da7195484808b7157152b9906173/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=fbedd170be75da7195484808b7157152b9906173", "patch": "@@ -596,7 +596,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \tgnu_expr\n \t  = gnat_to_gnu_external (Expression (Declaration_Node (gnat_entity)));\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case E_Exception:\n     case E_Loop_Parameter:\n@@ -3369,7 +3369,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t  break;\n \t}\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case E_Record_Subtype:\n       /* If Cloned_Subtype is Present it means this record subtype has\n@@ -3804,7 +3804,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t    break;\n \t}\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case E_Allocator_Type:\n     case E_Access_Type:\n@@ -6882,7 +6882,7 @@ choices_to_gnu (tree operand, Node_Id choices)\n \t      break;\n \t    }\n \n-\t  /* ... fall through ... */\n+\t  /* fall through */\n \n \tcase N_Character_Literal:\n \tcase N_Integer_Literal:\n@@ -8089,7 +8089,7 @@ annotate_value (tree gnu_size)\n       else\n \treturn Uint_Minus_1;\n \n-      /* Fall through... */\n+      /* fall through */\n \n     default:\n       return No_Uint;"}, {"sha": "6d8480327b6ea68a533352c968b6af9b78c97583", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbedd170be75da7195484808b7157152b9906173/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbedd170be75da7195484808b7157152b9906173/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=fbedd170be75da7195484808b7157152b9906173", "patch": "@@ -157,7 +157,7 @@ gnat_handle_option (size_t scode, const char *arg, int value, int kind,\n     case OPT_gant:\n       warning (0, \"%<-gnat%> misspelled as %<-gant%>\");\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case OPT_gnat:\n     case OPT_gnatO:\n@@ -486,13 +486,13 @@ gnat_print_type (FILE *file, tree node, int indent)\n       else\n \tprint_node (file, \"index type\", TYPE_INDEX_TYPE (node), indent + 4);\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n       print_node_brief (file, \"RM size\", TYPE_RM_SIZE (node), indent + 4);\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case REAL_TYPE:\n       print_node_brief (file, \"RM min\", TYPE_RM_MIN_VALUE (node), indent + 4);"}, {"sha": "7b560b57239bebe4cb1e00062dba40683ee1c7d5", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbedd170be75da7195484808b7157152b9906173/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbedd170be75da7195484808b7157152b9906173/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=fbedd170be75da7195484808b7157152b9906173", "patch": "@@ -844,7 +844,7 @@ lvalue_required_p (Node_Id gnat_node, tree gnu_type, bool constant,\n \t\t && Ekind (Entity (gnat_temp)) == E_Enumeration_Literal))\n \t  return 1;\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case N_Slice:\n       /* Only the array expression can require an lvalue.  */\n@@ -890,7 +890,7 @@ lvalue_required_p (Node_Id gnat_node, tree gnu_type, bool constant,\n \tif (!constant)\n \t  return 1;\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case N_Type_Conversion:\n     case N_Qualified_Expression:\n@@ -914,7 +914,7 @@ lvalue_required_p (Node_Id gnat_node, tree gnu_type, bool constant,\n \t\t\t\t  get_unpadded_type (Etype (gnat_parent)),\n \t\t\t\t  true, false, true);\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     default:\n       return 0;\n@@ -1681,7 +1681,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t  break;\n \t}\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case Attr_Access:\n     case Attr_Unchecked_Access:\n@@ -1938,7 +1938,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t  break;\n \t}\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case Attr_Length:\n       {\n@@ -2393,7 +2393,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n       /* We treat Model as identical to Machine.  This is true for at least\n \t IEEE and some other nice floating-point systems.  */\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case Attr_Machine:\n       /* The trick is to force the compiler to store the result in memory so\n@@ -2537,7 +2537,7 @@ Case_Statement_to_gnu (Node_Id gnat_node)\n \t\t  break;\n \t\t}\n \n-\t      /* ... fall through ... */\n+\t      /* fall through */\n \n \t    case N_Character_Literal:\n \t    case N_Integer_Literal:\n@@ -4007,7 +4007,7 @@ node_is_atomic (Node_Id gnat_node)\n \t  && Has_Atomic_Components (Entity (Prefix (gnat_node))))\n \treturn true;\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case N_Explicit_Dereference:\n       return Is_Atomic (Etype (gnat_node));\n@@ -4123,7 +4123,7 @@ atomic_access_required_p (Node_Id gnat_node, bool *sync)\n       /* Nothing to do if we are the prefix of an attribute, since we do not\n \t want an atomic access for things like 'Size.  */\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case N_Reference:\n       /* The N_Reference node is like an attribute.  */\n@@ -6580,7 +6580,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  break;\n \t}\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case N_Op_Eq:\n     case N_Op_Ne:\n@@ -6747,7 +6747,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  break;\n \t}\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case N_Op_Minus:\n     case N_Op_Abs:\n@@ -8344,7 +8344,7 @@ gnat_gimplify_expr (tree *expr_p, gimple_seq *pre_p,\n \t    break;\n \t  }\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     default:\n       return GS_UNHANDLED;\n@@ -9867,7 +9867,7 @@ set_gnu_expr_location_from_node (tree node, Node_Id gnat_node)\n       if (EXPR_P (TREE_OPERAND (node, 1)))\n \tset_gnu_expr_location_from_node (TREE_OPERAND (node, 1), gnat_node);\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     default:\n       if (!REFERENCE_CLASS_P (node) && !EXPR_HAS_LOCATION (node))"}, {"sha": "4d61f52e0e46e082de6ac158576c67639c5db630", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbedd170be75da7195484808b7157152b9906173/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbedd170be75da7195484808b7157152b9906173/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=fbedd170be75da7195484808b7157152b9906173", "patch": "@@ -3166,7 +3166,7 @@ create_subprog_decl (tree name, tree asm_name, tree type, tree param_decl_list,\n \t\t\t\t    NULL_TREE, NULL_TREE),\n \t\t\t ATTR_FLAG_TYPE_IN_PLACE);\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case is_enabled:\n       DECL_DECLARED_INLINE_P (subprog_decl) = 1;\n@@ -4271,6 +4271,8 @@ convert (tree type, tree expr)\n \t  return expr;\n \t}\n \n+      /* fall through */\n+\n     case CONSTRUCTOR:\n       /* If we are converting a CONSTRUCTOR to a mere type variant, or to\n \t another padding type around the same type, just make a new one in\n@@ -4508,7 +4510,7 @@ convert (tree type, tree expr)\n \t\t\t\t\t  convert (TREE_TYPE (type),\n \t\t\t\t\t\t   TYPE_MIN_VALUE (type))));\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n@@ -4585,7 +4587,7 @@ convert (tree type, tree expr)\n \t  return gnat_build_constructor (type, v);\n \t}\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case ARRAY_TYPE:\n       /* In these cases, assume the front-end has validated the conversion.\n@@ -4701,7 +4703,7 @@ convert_to_index_type (tree expr)\n \t  break;\n       }\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case NON_LVALUE_EXPR:\n       return fold_build1 (code, sizetype,"}, {"sha": "8cb97fb942046f4116c61f7205fb3e7fb92f5a01", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbedd170be75da7195484808b7157152b9906173/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbedd170be75da7195484808b7157152b9906173/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=fbedd170be75da7195484808b7157152b9906173", "patch": "@@ -180,7 +180,7 @@ known_alignment (tree exp)\n \t  return known_alignment (t);\n       }\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     default:\n       /* For other pointer expressions, we assume that the pointed-to object\n@@ -1011,7 +1011,7 @@ build_binary_op (enum tree_code op_code, tree result_type,\n       if (!operation_type)\n \toperation_type = TREE_TYPE (left_type);\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case ARRAY_RANGE_REF:\n       /* First look through conversion between type variants.  Note that\n@@ -1230,7 +1230,7 @@ build_binary_op (enum tree_code op_code, tree result_type,\n \top_code = MINUS_EXPR;\n       modulus = NULL_TREE;\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     case PLUS_EXPR:\n     case MINUS_EXPR:\n@@ -1244,7 +1244,7 @@ build_binary_op (enum tree_code op_code, tree result_type,\n \t  = gnat_type_for_mode (TYPE_MODE (operation_type),\n \t\t\t\tTYPE_UNSIGNED (operation_type));\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     default:\n     common:\n@@ -1466,7 +1466,7 @@ build_unary_op (enum tree_code op_code, tree result_type, tree operand)\n \t    return build_unary_op (ADDR_EXPR, result_type,\n \t\t\t\t   TREE_OPERAND (operand, 0));\n \n-\t  /* ... fallthru ... */\n+\t  /* fallthru */\n \n \tcase VIEW_CONVERT_EXPR:\n \t  /* If this just a variant conversion or if the conversion doesn't\n@@ -1487,7 +1487,7 @@ build_unary_op (enum tree_code op_code, tree result_type, tree operand)\n \tcase CONST_DECL:\n \t  operand = DECL_CONST_CORRESPONDING_VAR (operand);\n \n-\t  /* ... fall through ... */\n+\t  /* fall through */\n \n \tdefault:\n \tcommon:\n@@ -1648,7 +1648,7 @@ build_unary_op (enum tree_code op_code, tree result_type, tree operand)\n \t  }\n       }\n \n-      /* ... fall through ... */\n+      /* fall through */\n \n     default:\n       gcc_assert (operation_type == base_type);"}, {"sha": "256893b34d389c6ee874f54738b13ac57eadcbe4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbedd170be75da7195484808b7157152b9906173/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbedd170be75da7195484808b7157152b9906173/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fbedd170be75da7195484808b7157152b9906173", "patch": "@@ -17918,6 +17918,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n #ifdef HAVE_AS_IX86_CMOV_SUN_SYNTAX\n \t  if (ASSEMBLER_DIALECT == ASM_ATT)\n \t    putc ('.', file);\n+\t  gcc_fallthrough ();\n #endif\n \n \tcase 'C':"}, {"sha": "c622b6674e24089ca9a84b96ceb84dd701fbafab", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbedd170be75da7195484808b7157152b9906173/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbedd170be75da7195484808b7157152b9906173/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=fbedd170be75da7195484808b7157152b9906173", "patch": "@@ -3833,6 +3833,7 @@ check_pic (int i)\n \t\t      || (GET_CODE (XEXP (op, 0)) == MINUS\n \t\t\t  && XEXP (XEXP (op, 0), 0) == sparc_got ()\n \t\t\t  && GET_CODE (XEXP (XEXP (op, 0), 1)) == CONST)));\n+      /* fallthrough */\n     case 2:\n     default:\n       return 1;\n@@ -8372,6 +8373,7 @@ epilogue_renumber (register rtx *where, int test)\n \treturn 1;\n       if (! test && REGNO (*where) >= 24 && REGNO (*where) < 32)\n \t*where = gen_rtx_REG (GET_MODE (*where), OUTGOING_REGNO (REGNO(*where)));\n+      /* fallthrough */\n     case SCRATCH:\n     case CC0:\n     case PC:"}]}