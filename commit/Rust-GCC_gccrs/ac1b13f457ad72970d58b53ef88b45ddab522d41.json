{"sha": "ac1b13f457ad72970d58b53ef88b45ddab522d41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMxYjEzZjQ1N2FkNzI5NzBkNThiNTNlZjg4YjQ1ZGRhYjUyMmQ0MQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-12-08T06:39:00Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-12-08T06:39:00Z"}, "message": "c-common.c (verify_tree): Don't check code length if we know we are handling tcc_unary.\n\n\t* c-common.c (verify_tree): Don't check code length if we know\n\twe are handling tcc_unary.\n\t* print_tree.c (print_node): Remove code to handle RTL\n\tappearing as a part of a tree node.\n\t* tree-gimple.c (recalculate_side_effects): Rename fro as len.\n\t* tree.c (build1_stat): Don't check TREE_CODE_LENGTH.\n\t(PROCESS_ARG): Don't refer to fro.\n\t(build2_stat, build3_stat, build4_stat): Don't compute fro.\n\nFrom-SVN: r91855", "tree": {"sha": "b3753723eec1f756b6a00d572ba8b10d57776fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3753723eec1f756b6a00d572ba8b10d57776fb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac1b13f457ad72970d58b53ef88b45ddab522d41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1b13f457ad72970d58b53ef88b45ddab522d41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac1b13f457ad72970d58b53ef88b45ddab522d41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1b13f457ad72970d58b53ef88b45ddab522d41/comments", "author": null, "committer": null, "parents": [{"sha": "7fd64ba3723e2217309315b2399ae13b247574df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fd64ba3723e2217309315b2399ae13b247574df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fd64ba3723e2217309315b2399ae13b247574df"}], "stats": {"total": 53, "additions": 18, "deletions": 35}, "files": [{"sha": "9c032694b1ed209fbd0f50726d4f944de79cbb79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1b13f457ad72970d58b53ef88b45ddab522d41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1b13f457ad72970d58b53ef88b45ddab522d41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac1b13f457ad72970d58b53ef88b45ddab522d41", "patch": "@@ -1,3 +1,14 @@\n+2004-12-08  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-common.c (verify_tree): Don't check code length if we know\n+\twe are handling tcc_unary.\n+\t* print_tree.c (print_node): Remove code to handle RTL\n+\tappearing as a part of a tree node.\n+\t* tree-gimple.c (recalculate_side_effects): Rename fro as len.\n+\t* tree.c (build1_stat): Don't check TREE_CODE_LENGTH.\n+\t(PROCESS_ARG): Don't refer to fro.\n+\t(build2_stat, build3_stat, build4_stat): Don't compute fro.\n+\n 2004-12-07  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/18293"}, {"sha": "a6f303b814e8da5a106ba5e526d96253e6d485b5", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1b13f457ad72970d58b53ef88b45ddab522d41/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1b13f457ad72970d58b53ef88b45ddab522d41/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ac1b13f457ad72970d58b53ef88b45ddab522d41", "patch": "@@ -1365,8 +1365,6 @@ verify_tree (tree x, struct tlist **pbefore_sp, struct tlist **pno_sp,\n \t Other non-expressions need not be processed.  */\n       if (cl == tcc_unary)\n \t{\n-\t  if (TREE_CODE_LENGTH (code) == 0)\n-\t    return;\n \t  x = TREE_OPERAND (x, 0);\n \t  writer = 0;\n \t  goto restart;"}, {"sha": "caba37765fc1a8ee4cea78d13ae8a524878e2c86", "filename": "gcc/print-tree.c", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1b13f457ad72970d58b53ef88b45ddab522d41/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1b13f457ad72970d58b53ef88b45ddab522d41/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=ac1b13f457ad72970d58b53ef88b45ddab522d41", "patch": "@@ -158,7 +158,6 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n   enum machine_mode mode;\n   enum tree_code_class class;\n   int len;\n-  int first_rtl;\n   int i;\n   expanded_location xloc;\n \n@@ -591,29 +590,12 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \n       len = TREE_CODE_LENGTH (TREE_CODE (node));\n \n-      /* Some nodes contain rtx's, not trees,\n-\t after a certain point.  Print the rtx's as rtx's.  */\n-      first_rtl = TREE_CODE_LENGTH (TREE_CODE (node));\n-\n       for (i = 0; i < len; i++)\n \t{\n-\t  if (i >= first_rtl)\n-\t    {\n-\t      indent_to (file, indent + 4);\n-\t      fprintf (file, \"rtl %d \", i);\n-\t      if (TREE_OPERAND (node, i))\n-\t\tprint_rtl (file, (rtx) TREE_OPERAND (node, i));\n-\t      else\n-\t\tfprintf (file, \"(nil)\");\n-\t      fprintf (file, \"\\n\");\n-\t    }\n-\t  else\n-\t    {\n-\t      char temp[10];\n+\t  char temp[10];\n \n-\t      sprintf (temp, \"arg %d\", i);\n-\t      print_node (file, temp, TREE_OPERAND (node, i), indent + 4);\n-\t    }\n+\t  sprintf (temp, \"arg %d\", i);\n+\t  print_node (file, temp, TREE_OPERAND (node, i), indent + 4);\n \t}\n \n       print_node (file, \"chain\", TREE_CHAIN (node), indent + 4);"}, {"sha": "0253676d79c79ededc30ac55e37be35998985768", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1b13f457ad72970d58b53ef88b45ddab522d41/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1b13f457ad72970d58b53ef88b45ddab522d41/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=ac1b13f457ad72970d58b53ef88b45ddab522d41", "patch": "@@ -443,7 +443,7 @@ void\n recalculate_side_effects (tree t)\n {\n   enum tree_code code = TREE_CODE (t);\n-  int fro = TREE_CODE_LENGTH (code);\n+  int len = TREE_CODE_LENGTH (code);\n   int i;\n \n   switch (TREE_CODE_CLASS (code))\n@@ -472,7 +472,7 @@ recalculate_side_effects (tree t)\n     case tcc_binary:      /* a binary arithmetic expression */\n     case tcc_reference:   /* a reference */\n       TREE_SIDE_EFFECTS (t) = TREE_THIS_VOLATILE (t);\n-      for (i = 0; i < fro; ++i)\n+      for (i = 0; i < len; ++i)\n \t{\n \t  tree op = TREE_OPERAND (t, i);\n \t  if (op && TREE_SIDE_EFFECTS (op))"}, {"sha": "0b41c7186b21423a05c9f1ca724c4033b658c4cf", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1b13f457ad72970d58b53ef88b45ddab522d41/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1b13f457ad72970d58b53ef88b45ddab522d41/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ac1b13f457ad72970d58b53ef88b45ddab522d41", "patch": "@@ -2495,7 +2495,7 @@ build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n   TREE_COMPLEXITY (t) = 0;\n   TREE_OPERAND (t, 0) = node;\n   TREE_BLOCK (t) = NULL_TREE;\n-  if (node && !TYPE_P (node) && TREE_CODE_LENGTH (code) != 0)\n+  if (node && !TYPE_P (node))\n     {\n       TREE_SIDE_EFFECTS (t) = TREE_SIDE_EFFECTS (node);\n       TREE_READONLY (t) = TREE_READONLY (node);\n@@ -2551,7 +2551,7 @@ build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n #define PROCESS_ARG(N)\t\t\t\\\n   do {\t\t\t\t\t\\\n     TREE_OPERAND (t, N) = arg##N;\t\\\n-    if (arg##N &&!TYPE_P (arg##N) && fro > N) \\\n+    if (arg##N &&!TYPE_P (arg##N))\t\\\n       {\t\t\t\t\t\\\n         if (TREE_SIDE_EFFECTS (arg##N))\t\\\n \t  side_effects = 1;\t\t\\\n@@ -2569,7 +2569,6 @@ build2_stat (enum tree_code code, tree tt, tree arg0, tree arg1 MEM_STAT_DECL)\n {\n   bool constant, read_only, side_effects, invariant;\n   tree t;\n-  int fro;\n \n   gcc_assert (TREE_CODE_LENGTH (code) == 2);\n \n@@ -2580,7 +2579,6 @@ build2_stat (enum tree_code code, tree tt, tree arg0, tree arg1 MEM_STAT_DECL)\n      result based on those same flags for the arguments.  But if the\n      arguments aren't really even `tree' expressions, we shouldn't be trying\n      to do this.  */\n-  fro = TREE_CODE_LENGTH (code);\n \n   /* Expressions without side effects may be constant if their\n      arguments are as well.  */\n@@ -2610,15 +2608,12 @@ build3_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n {\n   bool constant, read_only, side_effects, invariant;\n   tree t;\n-  int fro;\n \n   gcc_assert (TREE_CODE_LENGTH (code) == 3);\n \n   t = make_node_stat (code PASS_MEM_STAT);\n   TREE_TYPE (t) = tt;\n \n-  fro = TREE_CODE_LENGTH (code);\n-\n   side_effects = TREE_SIDE_EFFECTS (t);\n \n   PROCESS_ARG(0);\n@@ -2659,15 +2654,12 @@ build4_stat (enum tree_code code, tree tt, tree arg0, tree arg1,\n {\n   bool constant, read_only, side_effects, invariant;\n   tree t;\n-  int fro;\n \n   gcc_assert (TREE_CODE_LENGTH (code) == 4);\n \n   t = make_node_stat (code PASS_MEM_STAT);\n   TREE_TYPE (t) = tt;\n \n-  fro = TREE_CODE_LENGTH (code);\n-\n   side_effects = TREE_SIDE_EFFECTS (t);\n \n   PROCESS_ARG(0);"}]}