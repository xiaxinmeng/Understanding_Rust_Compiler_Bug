{"sha": "f6ec1d11632ab0a33dacb5043ac4819d5a91759e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZlYzFkMTE2MzJhYjBhMzNkYWNiNTA0M2FjNDgxOWQ1YTkxNzU5ZQ==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@ispras.ru", "date": "2007-02-02T16:57:18Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2007-02-02T16:57:18Z"}, "message": "re PR target/29682 (ICE: in change_pattern, at haifa-sched.c:4066 with -O3 -msched-control-spec)\n\n\tPR target/29682\n\t* config/ia64/ia64.c (ia64_speculate_insn): Restrict to memory loads to\n\tgeneral or fp registers.  Add comments.\n\t* config/ia64/ia64.md (reg_pred_prefix): Add comment.\n\n\tPR target/29682\n\t* gcc-target/ia64/pr29682.c: New test.\n\nFrom-SVN: r121510", "tree": {"sha": "a4617b210981196e4316dfc4c93c9716e964254d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4617b210981196e4316dfc4c93c9716e964254d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6ec1d11632ab0a33dacb5043ac4819d5a91759e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ec1d11632ab0a33dacb5043ac4819d5a91759e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ec1d11632ab0a33dacb5043ac4819d5a91759e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ec1d11632ab0a33dacb5043ac4819d5a91759e/comments", "author": null, "committer": null, "parents": [{"sha": "b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e18eee4b56ed8d4003d1fb92acb5f7dbf43748"}], "stats": {"total": 82, "additions": 80, "deletions": 2}, "files": [{"sha": "e5f0a4db038adcf6569ae5a248dc718ba01c4441", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ec1d11632ab0a33dacb5043ac4819d5a91759e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ec1d11632ab0a33dacb5043ac4819d5a91759e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6ec1d11632ab0a33dacb5043ac4819d5a91759e", "patch": "@@ -1,3 +1,10 @@\n+2007-02-02  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n+\n+\tPR target/29682\n+\t* config/ia64/ia64.c (ia64_speculate_insn): Restrict to memory loads to\n+\tgeneral or fp registers.  Add comments.\n+\t* config/ia64/ia64.md (reg_pred_prefix): Add comment.\n+\n 2007-02-02  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* pointer-set.c (insert_aux): Only return insertion slot."}, {"sha": "aebfc1ad32db698252f5955413f60d9b3554e4cb", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ec1d11632ab0a33dacb5043ac4819d5a91759e/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ec1d11632ab0a33dacb5043ac4819d5a91759e/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=f6ec1d11632ab0a33dacb5043ac4819d5a91759e", "patch": "@@ -6786,13 +6786,19 @@ ia64_speculate_insn (rtx insn, ds_t ts, rtx *new_pat)\n   if (GET_CODE (pat) == COND_EXEC)\n     pat = COND_EXEC_CODE (pat);\n \n+  /* This should be a SET ...  */\n   if (GET_CODE (pat) != SET)\n     return -1;\n+\n   reg = SET_DEST (pat);\n-  if (!REG_P (reg))\n+  /* ... to the general/fp register ...  */\n+  if (!REG_P (reg) || !(GR_REGNO_P (REGNO (reg)) || FP_REGNO_P (REGNO (reg))))\n     return -1;\n \n-  mem = SET_SRC (pat);  \n+  /* ... from the mem ...  */\n+  mem = SET_SRC (pat);\n+\n+  /* ... that can, possibly, be a zero_extend ...  */\n   if (GET_CODE (mem) == ZERO_EXTEND)\n     {\n       mem = XEXP (mem, 0);\n@@ -6801,6 +6807,7 @@ ia64_speculate_insn (rtx insn, ds_t ts, rtx *new_pat)\n   else\n     extend_p = false;\n \n+  /* ... or a speculative load.  */\n   if (GET_CODE (mem) == UNSPEC)\n     {\n       int code;\n@@ -6817,8 +6824,12 @@ ia64_speculate_insn (rtx insn, ds_t ts, rtx *new_pat)\n       mem = XVECEXP (mem, 0, 0);\n       gcc_assert (MEM_P (mem));\n     }\n+\n+  /* Source should be a mem ...  */\n   if (!MEM_P (mem))\n     return -1;\n+\n+  /* ... addressed by a register.  */\n   mem_reg = XEXP (mem, 0);\n   if (!REG_P (mem_reg))\n     return -1;\n@@ -6835,6 +6846,7 @@ ia64_speculate_insn (rtx insn, ds_t ts, rtx *new_pat)\n \n   extract_insn_cached (insn);\n   gcc_assert (reg == recog_data.operand[0] && mem == recog_data.operand[1]);\n+\n   *new_pat = ia64_gen_spec_insn (insn, ts, mode_no, gen_p != 0, extend_p);\n \n   return gen_p;"}, {"sha": "e573c55653c4a50d31df60c47ac8704c1cdfeba4", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ec1d11632ab0a33dacb5043ac4819d5a91759e/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ec1d11632ab0a33dacb5043ac4819d5a91759e/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=f6ec1d11632ab0a33dacb5043ac4819d5a91759e", "patch": "@@ -474,6 +474,9 @@\n \n (define_mode_attr mem_constr [(BI \"*m\") (QI \"m\") (HI \"m\") (SI \"m\") (DI \"m,Q\") (SF \"Q,m\") (DF \"Q,m\") (XF \"m\") (TI \"Q\")])\n \n+;; Define register predicate prefix.\n+;; We can generate speculative loads only for general and fp registers - this\n+;; is constrainted in ia64.c: ia64_speculate_insn ().\n (define_mode_attr reg_pred_prefix [(BI \"gr\") (QI \"gr\") (HI \"gr\") (SI \"gr\") (DI \"grfr\") (SF \"grfr\") (DF \"grfr\") (XF \"fr\") (TI \"fr\")])\n \n (define_mode_attr ld_class [(BI \"ld\") (QI \"ld\") (HI \"ld\") (SI \"ld\") (DI \"ld,fld\") (SF \"fld,ld\") (DF \"fld,ld\") (XF \"fld\") (TI \"fldp\")])"}, {"sha": "fd48ccd53ca4dca87ae9c346a9ffa47e355754b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ec1d11632ab0a33dacb5043ac4819d5a91759e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ec1d11632ab0a33dacb5043ac4819d5a91759e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6ec1d11632ab0a33dacb5043ac4819d5a91759e", "patch": "@@ -1,3 +1,8 @@\n+2007-02-02  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n+\n+\tPR target/29682\n+\t* gcc-target/ia64/pr29682.c: New test.\n+\n 2007-02-02  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/30284"}, {"sha": "ecca32392d07bed6e9228758b1964e2defa7b88e", "filename": "gcc/testsuite/gcc.target/ia64/pr29682.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ec1d11632ab0a33dacb5043ac4819d5a91759e/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr29682.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ec1d11632ab0a33dacb5043ac4819d5a91759e/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr29682.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr29682.c?ref=f6ec1d11632ab0a33dacb5043ac4819d5a91759e", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile { target ia64-*-* } } */\n+/* { dg-options \"-O3 -msched-control-spec\" } */\n+typedef long unsigned int size_t;\n+typedef unsigned char uint8_t;\n+typedef unsigned int uint32_t;\n+typedef uint8_t byte;\n+typedef enum pgpArmor_e\n+{\n+  PGPARMOR_ERR_CRC_CHECK = -7, PGPARMOR_ERR_BODY_DECODE =\n+    -3, PGPARMOR_ERR_UNKNOWN_ARMOR_TYPE = -2, PGPARMOR_ERR_NO_BEGIN_PGP =\n+    -1, PGPARMOR_NONE = 0, PGPARMOR_MESSAGE = 1, PGPARMOR_PUBKEY =\n+    5, PGPARMOR_PRIVKEY = 6, PGPARMOR_SECKEY = 7\n+}\n+pgpArmor;\n+pgpCRC (const byte * octets, size_t len)\n+{\n+  unsigned int crc = 0xb704ce;\n+  int i;\n+  while (len--)\n+    {\n+      for (i = 0; i < 8; i++)\n+\t{\n+\t  crc <<= 1;\n+\t  if (crc & 0x1000000)\n+\t    crc ^= 0x1864cfb;\n+\t}\n+    }\n+}\n+pgpReadPkts (const char *fn, const byte ** pkt, size_t * pktlen)\n+{\n+  const byte *b = ((void *) 0);\n+  const char *enc = ((void *) 0);\n+  byte *dec;\n+  size_t declen;\n+  uint32_t crcpkt, crc;\n+  int pstate = 0;\n+  pgpArmor ec = PGPARMOR_ERR_NO_BEGIN_PGP;\n+    {\n+      switch (pstate)\n+\t{\n+\tcase 0:\n+\t  if (b64decode (enc, (void **) &dec, &declen) != 0)\n+\t    {\n+\t      goto exit;\n+\t    }\n+\t  crc = pgpCRC (dec, declen);\n+\t}\n+    }\n+exit:if (ec > PGPARMOR_NONE && pkt)\n+    *pkt = b;\n+}"}]}