{"sha": "31bee964798d25ac83e513de6858b69c3a9624be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFiZWU5NjQ3OThkMjVhYzgzZTUxM2RlNjg1OGI2OWMzYTk2MjRiZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-10-06T07:03:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-10-06T07:03:23Z"}, "message": "re PR tree-optimization/82436 (465.tonto ICE in vect_get_slp_vect_defs, at tree-vect-slp.c:3410)\n\n2017-10-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/82436\n\t* tree-vect-slp.c (vect_supported_load_permutation_p): More\n\tconservatively choose the vectorization factor when checking\n\twhether we can perform the required load permutation.\n\t(vect_transform_slp_perm_load): Assert when we may not fail.\n\n\t* gcc.dg/vect/pr82436.c: New testcase.\n\nFrom-SVN: r253473", "tree": {"sha": "206f6d8187527031fe3d1075b68b8c1e72222ced", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/206f6d8187527031fe3d1075b68b8c1e72222ced"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31bee964798d25ac83e513de6858b69c3a9624be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31bee964798d25ac83e513de6858b69c3a9624be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31bee964798d25ac83e513de6858b69c3a9624be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31bee964798d25ac83e513de6858b69c3a9624be/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "604d1669d6d1d3106032f5e7ab6062cb270cdf88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604d1669d6d1d3106032f5e7ab6062cb270cdf88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604d1669d6d1d3106032f5e7ab6062cb270cdf88"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "06aaa06f75d956c3c2e1565a04674b5a3babc65d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bee964798d25ac83e513de6858b69c3a9624be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bee964798d25ac83e513de6858b69c3a9624be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31bee964798d25ac83e513de6858b69c3a9624be", "patch": "@@ -1,3 +1,11 @@\n+2017-10-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/82436\n+\t* tree-vect-slp.c (vect_supported_load_permutation_p): More\n+\tconservatively choose the vectorization factor when checking\n+\twhether we can perform the required load permutation.\n+\t(vect_transform_slp_perm_load): Assert when we may not fail.\n+\n 2017-10-05  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Correct error"}, {"sha": "dd39b78e7ab299957b4e1cbf8586012597d0f322", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bee964798d25ac83e513de6858b69c3a9624be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bee964798d25ac83e513de6858b69c3a9624be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31bee964798d25ac83e513de6858b69c3a9624be", "patch": "@@ -1,3 +1,8 @@\n+2017-10-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/82436\n+\t* gcc.dg/vect/pr82436.c: New testcase.\n+\n 2017-10-05  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* gcc.dg/Wincompatible-pointer-types-1.c: New test."}, {"sha": "4129e15447f8b318679a1b48e8dcfac6f2925cc2", "filename": "gcc/testsuite/gcc.dg/vect/pr82436.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bee964798d25ac83e513de6858b69c3a9624be/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr82436.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bee964798d25ac83e513de6858b69c3a9624be/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr82436.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr82436.c?ref=31bee964798d25ac83e513de6858b69c3a9624be", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Ofast -fno-tree-scev-cprop\" } */\n+/* { dg-additional-options \"-mavx2\" { target { x86_64-*-* i?86-*-* } } } */\n+\n+struct reflection_type\n+{\n+  int h;\n+  int k;\n+  int l;\n+  double f_exp;\n+  double f_sigma;\n+  _Complex double f_calc;\n+  double f_pred;\n+  double i_exp;\n+  double i_sigma;\n+  double i_pred;\n+};\n+\n+double y, w;\n+int foo (struct reflection_type *r, int n, unsigned s)\n+{\n+  int i;\n+  y = 0;\n+  w = 0;\n+  for (i = 1; i < n; ++i)\n+    {\n+      struct reflection_type *x = &r[i*s];\n+      double fpred = x->f_pred;\n+      double fexp = x->f_exp;\n+      double tem = (fpred - fexp);\n+      y += __builtin_fabs (tem / x->f_sigma);\n+      w += __builtin_fabs (tem / fexp);\n+    }\n+  return i;\n+}"}, {"sha": "bc81b3d4b046d2421dcfd055631f076423f444cb", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bee964798d25ac83e513de6858b69c3a9624be/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bee964798d25ac83e513de6858b69c3a9624be/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=31bee964798d25ac83e513de6858b69c3a9624be", "patch": "@@ -1629,14 +1629,20 @@ vect_supported_load_permutation_p (slp_instance slp_instn)\n       return true;\n     }\n \n-  /* For loop vectorization verify we can generate the permutation.  */\n+  /* For loop vectorization verify we can generate the permutation.  Be\n+     conservative about the vectorization factor, there are permutations\n+     that will use three vector inputs only starting from a specific factor\n+     and the vectorization factor is not yet final.\n+     ???  The SLP instance unrolling factor might not be the maximum one.  */\n   unsigned n_perms;\n+  unsigned test_vf\n+    = least_common_multiple (SLP_INSTANCE_UNROLLING_FACTOR (slp_instn),\n+\t\t\t     LOOP_VINFO_VECT_FACTOR\n+\t\t\t       (STMT_VINFO_LOOP_VINFO (vinfo_for_stmt (stmt))));\n   FOR_EACH_VEC_ELT (SLP_INSTANCE_LOADS (slp_instn), i, node)\n     if (node->load_permutation.exists ()\n-\t&& !vect_transform_slp_perm_load\n-\t      (node, vNULL, NULL,\n-\t       SLP_INSTANCE_UNROLLING_FACTOR (slp_instn), slp_instn, true,\n-\t       &n_perms))\n+\t&& !vect_transform_slp_perm_load (node, vNULL, NULL, test_vf,\n+\t\t\t\t\t  slp_instn, true, &n_perms))\n       return false;\n \n   return true;\n@@ -3613,6 +3619,7 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n \t\t  dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM,\n \t\t\t\t    stmt, 0);\n \t\t}\n+\t      gcc_assert (analyze_only);\n \t      return false;\n \t    }\n \n@@ -3636,6 +3643,7 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n \t\t\tdump_printf (MSG_MISSED_OPTIMIZATION, \"%d \", mask[i]);\n \t\t      dump_printf (MSG_MISSED_OPTIMIZATION, \"}\\n\");\n \t\t    }\n+\t\t  gcc_assert (analyze_only);\n \t\t  return false;\n \t\t}\n "}]}