{"sha": "82d4f39092f2326e7097edff2ddbfb3a4516c86e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJkNGYzOTA5MmYyMzI2ZTcwOTdlZGZmMmRkYmZiM2E0NTE2Yzg2ZQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-02-19T10:32:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-19T10:32:17Z"}, "message": "par-ch9.adb, [...]: Minor reformatting.\n\n2014-02-19  Robert Dewar  <dewar@adacore.com>\n\n\t* par-ch9.adb, exp_ch5.adb, sem_ch5.adb, exp_attr.adb, sem_util.adb,\n\tsem_util.ads, sem_ch13.adb, sem_ch13.ads: Minor reformatting.\n\nFrom-SVN: r207882", "tree": {"sha": "4ef5d203fb9a75b2440f6fd6a287a91a74f0985a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ef5d203fb9a75b2440f6fd6a287a91a74f0985a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82d4f39092f2326e7097edff2ddbfb3a4516c86e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d4f39092f2326e7097edff2ddbfb3a4516c86e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82d4f39092f2326e7097edff2ddbfb3a4516c86e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d4f39092f2326e7097edff2ddbfb3a4516c86e/comments", "author": null, "committer": null, "parents": [{"sha": "dd2bf554e085d52c64d9596bc4843751e082804b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2bf554e085d52c64d9596bc4843751e082804b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd2bf554e085d52c64d9596bc4843751e082804b"}], "stats": {"total": 183, "additions": 101, "deletions": 82}, "files": [{"sha": "478b5fffd8d6b8e1ac38e84d6df2f0effc5f1599", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=82d4f39092f2326e7097edff2ddbfb3a4516c86e", "patch": "@@ -1,3 +1,8 @@\n+2014-02-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-ch9.adb, exp_ch5.adb, sem_ch5.adb, exp_attr.adb, sem_util.adb,\n+\tsem_util.ads, sem_ch13.adb, sem_ch13.ads: Minor reformatting.\n+\n 2014-02-19  Ed Schonberg  <schonberg@adacore.com>\n \n \t* style.adb (Missing_Overriding): Warning does not apply in"}, {"sha": "21472b652037f4bd2651ee6114a5c136e8fbe8a1", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=82d4f39092f2326e7097edff2ddbfb3a4516c86e", "patch": "@@ -1346,7 +1346,7 @@ package body Exp_Attr is\n \n       case Id is\n \n-      --  Attributes related to Ada 2012 iterators (placeholder ???)\n+      --  Attributes related to Ada 2012 iterators\n \n       when Attribute_Constant_Indexing    |\n            Attribute_Default_Iterator     |"}, {"sha": "3afd2bd7cc611b8032e88a7067685cb1b707c414", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=82d4f39092f2326e7097edff2ddbfb3a4516c86e", "patch": "@@ -104,6 +104,8 @@ package body Exp_Ch5 is\n    --  might be filled with components from child types).\n \n    procedure Expand_Formal_Container_Loop (Typ : Entity_Id; N : Node_Id);\n+   --  Use the primitives specified in an Iterable aspect to expand a loop\n+   --  over a so-called formal container, primarily for SPARK usage.\n \n    procedure Expand_Iterator_Loop (N : Node_Id);\n    --  Expand loop over arrays and containers that uses the form \"for X of C\""}, {"sha": "d2aeb5a797a23cebd55e202bc4179d521c8aa827", "filename": "gcc/ada/par-ch9.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2Fpar-ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2Fpar-ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch9.adb?ref=82d4f39092f2326e7097edff2ddbfb3a4516c86e", "patch": "@@ -149,11 +149,11 @@ package body Ch9 is\n             --  null statement, so if a parsing error produces an empty list,\n             --  patch it now.\n \n-            if\n-              No (First (Statements (Handled_Statement_Sequence (Task_Node))))\n+            if No (First (Statements\n+                           (Handled_Statement_Sequence (Task_Node))))\n             then\n                Set_Statements (Handled_Statement_Sequence (Task_Node),\n-                   New_List (Make_Null_Statement (Token_Ptr)));\n+                 New_List (Make_Null_Statement (Token_Ptr)));\n             end if;\n          end if;\n "}, {"sha": "23dba37de8f9bdc40a4d09f4a4758a417802bd63", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=82d4f39092f2326e7097edff2ddbfb3a4516c86e", "patch": "@@ -4291,6 +4291,7 @@ package body Sem_Ch13 is\n \n          when Attribute_Iterable =>\n             Analyze (Expr);\n+\n             if Nkind (Expr) /= N_Aggregate then\n                Error_Msg_N (\"aspect Iterable must be an aggregate\", Expr);\n             end if;\n@@ -4304,6 +4305,7 @@ package body Sem_Ch13 is\n                   if not Is_Entity_Name (Expression (Assoc)) then\n                      Error_Msg_N (\"value must be a function\", Assoc);\n                   end if;\n+\n                   Next (Assoc);\n                end loop;\n             end;\n@@ -11269,12 +11271,12 @@ package body Sem_Ch13 is\n    ------------------------------\n \n    procedure Validate_Iterable_Aspect (Typ : Entity_Id; ASN : Node_Id) is\n-      Scop           : constant Entity_Id := Scope (Typ);\n-      Assoc          : Node_Id;\n-      Expr           : Node_Id;\n+      Scop   : constant Entity_Id := Scope (Typ);\n+      Assoc  : Node_Id;\n+      Expr   : Node_Id;\n \n-      Prim           : Node_Id;\n-      Cursor         : Entity_Id;\n+      Prim   : Node_Id;\n+      Cursor : Entity_Id;\n \n       First_Id       : Entity_Id;\n       Next_Id        : Entity_Id;\n@@ -11284,6 +11286,10 @@ package body Sem_Ch13 is\n       procedure Check_Signature (Op : Entity_Id; Num_Formals : Positive);\n       --  Verify that primitive has two parameters of the proper types.\n \n+      ---------------------\n+      -- Check_Signature --\n+      ---------------------\n+\n       procedure Check_Signature (Op : Entity_Id; Num_Formals : Positive) is\n          F1, F2 : Entity_Id;\n \n@@ -11293,9 +11299,8 @@ package body Sem_Ch13 is\n          end if;\n \n          F1 := First_Formal (Op);\n-         if No (F1)\n-           or else Etype (F1) /= Typ\n-         then\n+\n+         if No (F1) or else Etype (F1) /= Typ then\n             Error_Msg_N (\"first parameter must be container type\", Op);\n          end if;\n \n@@ -11306,9 +11311,8 @@ package body Sem_Ch13 is\n \n          else\n             F2 := Next_Formal (F1);\n-            if No (F2)\n-              or else Etype (F2) /= Cursor\n-            then\n+\n+            if No (F2) or else Etype (F2) /= Cursor then\n                Error_Msg_N (\"second parameter must be cursor\", Op);\n             end if;\n \n@@ -11318,19 +11322,20 @@ package body Sem_Ch13 is\n          end if;\n       end Check_Signature;\n \n+   --  Start of processing for Validate_Iterable_Aspect\n+\n    begin\n-      --  There must be a cursor type declared in the same package.\n+      --  There must be a cursor type declared in the same package\n \n       declare\n          E : Entity_Id;\n \n       begin\n          Cursor := Empty;\n+\n          E := First_Entity (Scop);\n          while Present (E) loop\n-            if Chars (E) = Name_Cursor\n-               and then Is_Type (E)\n-            then\n+            if Chars (E) = Name_Cursor and then Is_Type (E) then\n                Cursor := E;\n                exit;\n             end if;\n@@ -11362,6 +11367,7 @@ package body Sem_Ch13 is\n          end if;\n \n          Prim := First (Choices (Assoc));\n+\n          if Nkind (Prim) /= N_Identifier\n            or else Present (Next (Prim))\n          then\n@@ -11370,19 +11376,22 @@ package body Sem_Ch13 is\n          elsif Chars (Prim) = Name_First then\n             First_Id := Entity (Expr);\n             Check_Signature (First_Id, 1);\n+\n             if Etype (First_Id) /= Cursor then\n                Error_Msg_NE (\"First must return Cursor\", Expr, First_Id);\n             end if;\n \n          elsif Chars (Prim) = Name_Next then\n             Next_Id := Entity (Expr);\n             Check_Signature (Next_Id, 2);\n+\n             if Etype (Next_Id) /= Cursor then\n                Error_Msg_NE (\"Next must return Cursor\", Expr, First_Id);\n             end if;\n \n          elsif Chars (Prim) = Name_Has_Element then\n             Has_Element_Id := Entity (Expr);\n+\n             if Etype (Has_Element_Id) /= Standard_Boolean then\n                Error_Msg_NE\n                 (\"Has_Element must return Boolean\", Expr, First_Id);"}, {"sha": "222ae06c6a827d49b1399391603e4d4c86a353ef", "filename": "gcc/ada/sem_ch13.ads", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2Fsem_ch13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2Fsem_ch13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.ads?ref=82d4f39092f2326e7097edff2ddbfb3a4516c86e", "patch": "@@ -133,46 +133,45 @@ package Sem_Ch13 is\n    --  Esize and RM_Size are reset to the allowed minimum value in T.\n \n    function Rep_Item_Too_Early (T : Entity_Id; N : Node_Id) return Boolean;\n-   --  Called at the start of processing a representation clause or a\n-   --  representation pragma. Used to check that the representation item\n-   --  is not being applied to an incomplete type or to a generic formal\n-   --  type or a type derived from a generic formal type. Returns False if\n-   --  no such error occurs. If this error does occur, appropriate error\n-   --  messages are posted on node N, and True is returned.\n+   --  Called at start of processing a representation clause/pragma. Used to\n+   --  check that the representation item is not being applied to an incomplete\n+   --  type or to a generic formal type or a type derived from a generic formal\n+   --  type. Returns False if no such error occurs. If this error does occur,\n+   --  appropriate error messages are posted on node N, and True is returned.\n \n    function Rep_Item_Too_Late\n      (T     : Entity_Id;\n       N     : Node_Id;\n       FOnly : Boolean := False) return Boolean;\n    --  Called at the start of processing a representation clause or a\n-   --  representation pragma. Used to check that a representation item\n-   --  for entity T does not appear too late (according to the rules in\n-   --  RM 13.1(9) and RM 13.1(10)). N is the associated node, which in\n-   --  the pragma case is the pragma or representation clause itself, used\n-   --  for placing error messages if the item is too late.\n+   --  representation pragma. Used to check that a representation item for\n+   --  entity T does not appear too late (according to the rules in RM 13.1(9)\n+   --  and RM 13.1(10)). N is the associated node, which in the pragma case\n+   --  is the pragma or representation clause itself, used for placing error\n+   --  messages if the item is too late.\n    --\n    --  Fonly is a flag that causes only the freezing rule (para 9) to be\n-   --  applied, and the tests of para 10 are skipped. This is appropriate\n-   --  for both subtype related attributes (Alignment and Size) and for\n-   --  stream attributes, which, although certainly not subtype related\n-   --  attributes, clearly should not be subject to the para 10 restrictions\n-   --  (see AI95-00137). Similarly, we also skip the para 10 restrictions for\n+   --  applied, and the tests of para 10 are skipped. This is appropriate for\n+   --  both subtype related attributes (Alignment and Size) and for stream\n+   --  attributes, which, although certainly not subtype related attributes,\n+   --  clearly should not be subject to the para 10 restrictions (see\n+   --  AI95-00137). Similarly, we also skip the para 10 restrictions for\n    --  the Storage_Size case where they also clearly do not apply, and for\n    --  Stream_Convert which is in the same category as the stream attributes.\n    --\n-   --  If the rep item is too late, an appropriate message is output and\n-   --  True is returned, which is a signal that the caller should abandon\n-   --  processing for the item. If the item is not too late, then False\n-   --  is returned, and the caller can continue processing the item.\n+   --  If the rep item is too late, an appropriate message is output and True\n+   --  is returned, which is a signal that the caller should abandon processing\n+   --  for the item. If the item is not too late, then False is returned, and\n+   --  the caller can continue processing the item.\n    --\n    --  If no error is detected, this call also as a side effect links the\n    --  representation item onto the head of the representation item chain\n    --  (referenced by the First_Rep_Item field of the entity).\n    --\n-   --  Note: Rep_Item_Too_Late must be called with the underlying type in\n-   --  the case of a private or incomplete type. The protocol is to first\n-   --  check for Rep_Item_Too_Early using the initial entity, then take the\n-   --  underlying type, then call Rep_Item_Too_Late on the result.\n+   --  Note: Rep_Item_Too_Late must be called with the underlying type in the\n+   --  case of a private or incomplete type. The protocol is to first check for\n+   --  Rep_Item_Too_Early using the initial entity, then take the underlying\n+   --  type, then call Rep_Item_Too_Late on the result.\n    --\n    --  Note: Calls to Rep_Item_Too_Late are ignored for the case of attribute\n    --  definition clauses which have From_Aspect_Specification set. This is\n@@ -328,7 +327,8 @@ package Sem_Ch13 is\n \n    procedure Validate_Iterable_Aspect (Typ : Entity_Id; ASN : Node_Id);\n    --  For SPARK 2014 formal containers. The expression has the form of an\n-   --  aggregate, and each entry must denote a function with the proper\n-   --  syntax for First, Next, and Has_Element. Optionally an Element primitive\n-   --  may also be defined.\n+   --  aggregate, and each entry must denote a function with the proper syntax\n+   --  for First, Next, and Has_Element. Optionally an Element primitive may\n+   --  also be defined.\n+\n end Sem_Ch13;"}, {"sha": "02a7c9957846275567435ebb6bd32f05608b363b", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=82d4f39092f2326e7097edff2ddbfb3a4516c86e", "patch": "@@ -1912,7 +1912,7 @@ package body Sem_Ch5 is\n                else\n                   Error_Msg_NE\n                     (\"\\to iterate directly over the elements of a container, \"\n-                      & \"write `of &`\", Name (N), Original_Node (Name (N)));\n+                     & \"write `of &`\", Name (N), Original_Node (Name (N)));\n                end if;\n             end if;\n "}, {"sha": "ceef8fab44842796fc43ac67227c4c6f6de9b69d", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=82d4f39092f2326e7097edff2ddbfb3a4516c86e", "patch": "@@ -6629,6 +6629,7 @@ package body Sem_Util is\n    is\n       Funcs : constant Node_Id := Find_Value_Of_Aspect (Typ, Aspect_Iterable);\n       Assoc : Node_Id;\n+\n    begin\n       if No (Funcs) then\n          return Empty;\n@@ -9334,9 +9335,10 @@ package body Sem_Util is\n    ---------------------------\n \n    function Is_Container_Element (Exp : Node_Id) return Boolean is\n-      Loc      : constant Source_Ptr := Sloc (Exp);\n-      Pref     : constant Node_Id   := Prefix (Exp);\n-      Call     : Node_Id;\n+      Loc  : constant Source_Ptr := Sloc (Exp);\n+      Pref : constant Node_Id   := Prefix (Exp);\n+\n+      Call : Node_Id;\n       --  Call to an indexing aspect\n \n       Cont_Typ : Entity_Id;\n@@ -9348,19 +9350,24 @@ package body Sem_Util is\n       Indexing : Entity_Id;\n       Is_Const : Boolean;\n       --  Indicates that constant indexing is used, and the element is thus\n-      --  a constant\n+      --  a constant.\n \n-      Ref_Typ  : Entity_Id;\n-      --  The reference type returned by the indexing operation.\n+      Ref_Typ : Entity_Id;\n+      --  The reference type returned by the indexing operation\n \n    begin\n       --  If C is a container, in a context that imposes the element type of\n       --  that container, the indexing notation C (X) is rewritten as:\n-      --               Indexing (C, X).Discr.all\n+\n+      --    Indexing (C, X).Discr.all\n+\n       --  where Indexing is one of the indexing aspects of the container.\n       --  If the context does not require a reference, the construct can be\n-      --  rewritten as Element (C, X).\n-      --  First, verify that the construct has the proper form.\n+      --  rewritten as\n+\n+      --    Element (C, X)\n+\n+      --  First, verify that the construct has the proper form\n \n       if not Expander_Active then\n          return False;\n@@ -9372,8 +9379,8 @@ package body Sem_Util is\n          return False;\n \n       else\n-         Call     := Prefix (Pref);\n-         Ref_Typ  := Etype (Call);\n+         Call    := Prefix (Pref);\n+         Ref_Typ := Etype (Call);\n       end if;\n \n       if not Has_Implicit_Dereference (Ref_Typ)\n@@ -9383,24 +9390,24 @@ package body Sem_Util is\n          return False;\n       end if;\n \n-      --  Retrieve type of container object, and its iterator aspects.\n+      --  Retrieve type of container object, and its iterator aspects\n \n       Cont_Typ := Etype (First (Parameter_Associations (Call)));\n-      Indexing :=\n-         Find_Value_Of_Aspect (Cont_Typ, Aspect_Constant_Indexing);\n+      Indexing := Find_Value_Of_Aspect (Cont_Typ, Aspect_Constant_Indexing);\n       Is_Const := False;\n+\n       if No (Indexing) then\n \n-         --  Container should have at least one indexing operation.\n+         --  Container should have at least one indexing operation\n \n          return False;\n \n       elsif Entity (Name (Call)) /= Entity (Indexing) then\n \n          --  This may be a variable indexing operation\n \n-         Indexing :=\n-           Find_Value_Of_Aspect (Cont_Typ, Aspect_Variable_Indexing);\n+         Indexing := Find_Value_Of_Aspect (Cont_Typ, Aspect_Variable_Indexing);\n+\n          if No (Indexing)\n            or else Entity (Name (Call)) /= Entity (Indexing)\n          then\n@@ -9412,9 +9419,8 @@ package body Sem_Util is\n       end if;\n \n       Elem_Typ := Find_Value_Of_Aspect (Cont_Typ, Aspect_Iterator_Element);\n-      if No (Elem_Typ)\n-        or else Entity (Elem_Typ) /= Etype (Exp)\n-      then\n+\n+      if No (Elem_Typ) or else Entity (Elem_Typ) /= Etype (Exp) then\n          return False;\n       end if;\n \n@@ -9441,10 +9447,9 @@ package body Sem_Util is\n                   return False;\n \n                elsif Nkind_In\n-                 (Nkind (Parent (Par)),\n-                     N_Function_Call,\n-                     N_Procedure_Call_Statement,\n-                     N_Entry_Call_Statement)\n+                 (Nkind (Parent (Par)), N_Function_Call,\n+                                        N_Procedure_Call_Statement,\n+                                        N_Entry_Call_Statement)\n                then\n                   --  Check that the element is not part of an actual for an\n                   --  in-out parameter.\n@@ -9457,9 +9462,7 @@ package body Sem_Util is\n                      F := First_Formal (Entity (Name (Parent (Par))));\n                      A := First (Parameter_Associations (Parent (Par)));\n                      while Present (F) loop\n-                        if A = Par\n-                          and then Ekind (F) /= E_In_Parameter\n-                        then\n+                        if A = Par and then Ekind (F) /= E_In_Parameter then\n                            return False;\n                         end if;\n \n@@ -9468,7 +9471,7 @@ package body Sem_Util is\n                      end loop;\n                   end;\n \n-                  --  in_parameter in a call:  element is not modified.\n+                  --  E_In_Parameter in a call: element is not modified.\n \n                   exit;\n                end if;\n@@ -9479,7 +9482,7 @@ package body Sem_Util is\n       end if;\n \n       --  The expression has the proper form and the context requires the\n-      --  element type. Retrieve the Element function of the container, and\n+      --  element type. Retrieve the Element function of the container and\n       --  rewrite the construct as a call to it.\n \n       declare\n@@ -9498,7 +9501,7 @@ package body Sem_Util is\n          else\n             Rewrite (Exp,\n               Make_Function_Call (Loc,\n-                Name => New_Occurrence_Of (Node (Op), Loc),\n+                Name                   => New_Occurrence_Of (Node (Op), Loc),\n                 Parameter_Associations => Parameter_Associations (Call)));\n             Analyze_And_Resolve (Exp, Entity (Elem_Typ));\n             return True;"}, {"sha": "139f6d6f75742f38a79ed00a80a0e83b6c0ca20f", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82d4f39092f2326e7097edff2ddbfb3a4516c86e/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=82d4f39092f2326e7097edff2ddbfb3a4516c86e", "patch": "@@ -1111,13 +1111,13 @@ package Sem_Util is\n    function Is_Container_Element (Exp : Node_Id) return Boolean;\n    --  This routine recognizes expressions that denote an element of one of\n    --  the predefined containers, when the source only contains an indexing\n-   --  operation and an implicit dereference is inserted by the compiler. In\n-   --  the absence of this optimization, the indexing creates a temporary\n+   --  operation and an implicit dereference is inserted by the compiler.\n+   --  In the absence of this optimization, the indexing creates a temporary\n    --  controlled cursor that sets the tampering bit of the container, and\n    --  restricts the use of the convenient notation C (X) to contexts that\n-   --  do not check the tampering bit (e.g.  C.Include (X,  C (Y)).\n-   --  Exp is an explicit dereference. The transformation applies when it\n-   --  has the form  F (X).Discr.all.\n+   --  do not check the tampering bit (e.g. C.Include (X, C (Y)). Exp is an\n+   --  explicit dereference. The transformation applies when it has the form\n+   --  F (X).Discr.all.\n \n    function Is_Controlling_Limited_Procedure\n      (Proc_Nam : Entity_Id) return Boolean;"}]}