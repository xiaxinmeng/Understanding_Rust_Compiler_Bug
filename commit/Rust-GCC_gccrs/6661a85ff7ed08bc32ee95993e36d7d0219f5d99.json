{"sha": "6661a85ff7ed08bc32ee95993e36d7d0219f5d99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY2MWE4NWZmN2VkMDhiYzMyZWU5NTk5M2UzNmQ3ZDAyMTlmNWQ5OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-05-31T14:59:00Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-05-31T14:59:00Z"}, "message": "parser.c (cp_parser_simple_type_specifier): Explicitly test against NULL_TREE.\n\n\t* parser.c (cp_parser_simple_type_specifier): Explicitly test\n\tagainst NULL_TREE.\n\nFrom-SVN: r82486", "tree": {"sha": "56467fe80be98eb1ee4f34b8812ddad0d3fc7cc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56467fe80be98eb1ee4f34b8812ddad0d3fc7cc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6661a85ff7ed08bc32ee95993e36d7d0219f5d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6661a85ff7ed08bc32ee95993e36d7d0219f5d99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6661a85ff7ed08bc32ee95993e36d7d0219f5d99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6661a85ff7ed08bc32ee95993e36d7d0219f5d99/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1aae9cdcf2517fb75451442eb9e93f77db09cd7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aae9cdcf2517fb75451442eb9e93f77db09cd7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aae9cdcf2517fb75451442eb9e93f77db09cd7a"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "d06d4d84eda638db7b5aa5c987742bf5569f6762", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6661a85ff7ed08bc32ee95993e36d7d0219f5d99/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6661a85ff7ed08bc32ee95993e36d7d0219f5d99/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6661a85ff7ed08bc32ee95993e36d7d0219f5d99", "patch": "@@ -1,3 +1,8 @@\n+2004-05-31  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* parser.c (cp_parser_simple_type_specifier): Explicitly test\n+\tagainst NULL_TREE.\n+\n 2004-05-31  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* call.c, class.c, cp-tree.def, decl2.c, name-lookup.c, pt.c,"}, {"sha": "f98de0c93c92b24cd387b1e1ce23bedd7d71b2ba", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6661a85ff7ed08bc32ee95993e36d7d0219f5d99/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6661a85ff7ed08bc32ee95993e36d7d0219f5d99/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6661a85ff7ed08bc32ee95993e36d7d0219f5d99", "patch": "@@ -8960,7 +8960,8 @@ cp_parser_simple_type_specifier (cp_parser* parser, cp_parser_flags flags,\n \t\t\t\t\t\t/*typename_keyword_p=*/false,\n \t\t\t\t\t\t/*check_dependency_p=*/true,\n \t\t\t\t\t\t/*type_p=*/false,\n-\t\t\t\t\t\t/*is_declaration=*/false));\n+\t\t\t\t\t\t/*is_declaration=*/false)\n+\t   != NULL_TREE);\n       /* If we have seen a nested-name-specifier, and the next token\n \t is `template', then we are using the template-id production.  */\n       if (parser->scope"}]}