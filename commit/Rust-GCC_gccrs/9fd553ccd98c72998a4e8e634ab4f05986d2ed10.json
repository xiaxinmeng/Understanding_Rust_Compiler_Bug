{"sha": "9fd553ccd98c72998a4e8e634ab4f05986d2ed10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZkNTUzY2NkOThjNzI5OThhNGU4ZTYzNGFiNGYwNTk4NmQyZWQxMA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-22T00:17:21Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-22T00:17:21Z"}, "message": "In libobjc/: 2010-12-22 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-12-22  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc-private/objc-list.h: Reindented file.  No code changes.\n\t* objc-private/sarray.h: Same change.\n\nFrom-SVN: r168150", "tree": {"sha": "043bbd39f673b75b991f38fa6c983b3f34dbcb15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/043bbd39f673b75b991f38fa6c983b3f34dbcb15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fd553ccd98c72998a4e8e634ab4f05986d2ed10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd553ccd98c72998a4e8e634ab4f05986d2ed10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fd553ccd98c72998a4e8e634ab4f05986d2ed10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd553ccd98c72998a4e8e634ab4f05986d2ed10/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8637d320f1a1806dd9452c280a69f7daf3547fed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8637d320f1a1806dd9452c280a69f7daf3547fed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8637d320f1a1806dd9452c280a69f7daf3547fed"}], "stats": {"total": 204, "additions": 112, "deletions": 92}, "files": [{"sha": "e75730251d073a2551e9f6a87dfbaa51b3171f80", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd553ccd98c72998a4e8e634ab4f05986d2ed10/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd553ccd98c72998a4e8e634ab4f05986d2ed10/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=9fd553ccd98c72998a4e8e634ab4f05986d2ed10", "patch": "@@ -1,3 +1,8 @@\n+2010-12-22  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-private/objc-list.h: Reindented file.  No code changes.\n+\t* objc-private/sarray.h: Same change.\n+\n 2010-12-22  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-private/accessors.h: Removed 'extern \"C\"' guards.  This"}, {"sha": "989b9c9d4cb0b855924c5937df879758c4b83306", "filename": "libobjc/objc-private/objc-list.h", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd553ccd98c72998a4e8e634ab4f05986d2ed10/libobjc%2Fobjc-private%2Fobjc-list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd553ccd98c72998a4e8e634ab4f05986d2ed10/libobjc%2Fobjc-private%2Fobjc-list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fobjc-list.h?ref=9fd553ccd98c72998a4e8e634ab4f05986d2ed10", "patch": "@@ -1,5 +1,5 @@\n /* Generic single linked list to keep various information \n-   Copyright (C) 1993, 1994, 1996, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1994, 1996, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Kresten Krab Thorup.\n \n This file is part of GCC.\n@@ -23,68 +23,71 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-\n #ifndef __GNU_OBJC_LIST_H\n #define __GNU_OBJC_LIST_H\n \n-struct objc_list {\n+struct objc_list\n+{\n   void *head;\n   struct objc_list *tail;\n };\n \n-/* Return a cons cell produced from (head . tail) */\n-\n+/* Return a cons cell produced from (head . tail).  */\n static inline struct objc_list* \n-list_cons(void* head, struct objc_list* tail)\n+list_cons (void* head, struct objc_list* tail)\n {\n   struct objc_list* cell;\n \n-  cell = (struct objc_list*)objc_malloc(sizeof(struct objc_list));\n+  cell = (struct objc_list*)objc_malloc (sizeof (struct objc_list));\n   cell->head = head;\n   cell->tail = tail;\n   return cell;\n }\n \n-/* Remove the element at the head by replacing it by its successor */\n-\n+/* Remove the element at the head by replacing it by its\n+   successor.  */\n static inline void\n-list_remove_head(struct objc_list** list)\n+list_remove_head (struct objc_list** list)\n {\n   if ((*list)->tail)\n     {\n-      struct objc_list* tail = (*list)->tail; /* fetch next */\n-      *(*list) = *tail;\t\t/* copy next to list head */\n-      objc_free(tail);\t\t\t/* free next */\n+      /* Fetch next.  */\n+      struct objc_list* tail = (*list)->tail;\n+\n+      /* Copy next to list head.  */\n+      *(*list) = *tail;\n+\n+      /* Free next.  */\n+      objc_free (tail);\n     }\n-  else\t\t\t\t/* only one element in list */\n+  else\n     {\n-      objc_free(*list);\n+      /* Inly one element in list.  */\n+      objc_free (*list);\n       (*list) = 0;\n     }\n }\n \n \n-/* Map FUNCTION over all elements in LIST */\n-\n+/* Map FUNCTION over all elements in LIST.  */\n static inline void\n-list_mapcar(struct objc_list* list, void(*function)(void*))\n+list_mapcar (struct objc_list* list, void(*function)(void*))\n {\n-  while(list)\n+  while (list)\n     {\n-      (*function)(list->head);\n+      (*function) (list->head);\n       list = list->tail;\n     }\n }\n \n-/* Free list (backwards recursive) */\n-\n+/* Free list (backwards recursive).  */\n static inline void\n-list_free(struct objc_list* list)\n+list_free (struct objc_list* list)\n {\n   if(list)\n     {\n-      list_free(list->tail);\n-      objc_free(list);\n+      list_free (list->tail);\n+      objc_free (list);\n     }\n }\n "}, {"sha": "12fad921f2806eb0900ad15e8c96cff172ff8ba5", "filename": "libobjc/objc-private/sarray.h", "status": "modified", "additions": 79, "deletions": 67, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd553ccd98c72998a4e8e634ab4f05986d2ed10/libobjc%2Fobjc-private%2Fsarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd553ccd98c72998a4e8e634ab4f05986d2ed10/libobjc%2Fobjc-private%2Fsarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fsarray.h?ref=9fd553ccd98c72998a4e8e634ab4f05986d2ed10", "patch": "@@ -1,5 +1,5 @@\n /* Sparse Arrays for Objective C dispatch tables\n-   Copyright (C) 1993, 1995, 1996, 2004, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996, 2004, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Kresten Krab Thorup.\n \n This file is part of GCC.\n@@ -26,8 +26,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifndef __sarray_INCLUDE_GNU\n #define __sarray_INCLUDE_GNU\n \n-#define OBJC_SPARSE2\t\t/* 2-level sparse array */\n-/* #define OBJC_SPARSE3 */      /* 3-level sparse array */\n+#define OBJC_SPARSE2\t\t/* 2-level sparse array.  */\n+/* #define OBJC_SPARSE3 */      /* 3-level sparse array.  */\n \n #ifdef OBJC_SPARSE2\n extern const char* __objc_sparse2_id;\n@@ -44,186 +44,198 @@ extern int nindices;\n extern int narrays;\n extern int idxsize;\n \n-/* An unsigned integer of same size as a pointer */\n-#define SIZET_BITS (sizeof(size_t)*8)\n+/* An unsigned integer of same size as a pointer.  */\n+#define SIZET_BITS (sizeof (size_t) * 8)\n \n-#if defined(__sparc__) || defined(OBJC_SPARSE2)\n+#if defined (__sparc__) || defined (OBJC_SPARSE2)\n #define PRECOMPUTE_SELECTORS\n #endif\n \n #ifdef OBJC_SPARSE3\n \n-/* Buckets are 8 words each */\n+/* Buckets are 8 words each.  */\n #define BUCKET_BITS 3\n-#define BUCKET_SIZE (1<<BUCKET_BITS)\n-#define BUCKET_MASK (BUCKET_SIZE-1)\n+#define BUCKET_SIZE (1 << BUCKET_BITS)\n+#define BUCKET_MASK (BUCKET_SIZE - 1)\n \n-/* Indices are 16 words each */\n+/* Indices are 16 words each.  */\n #define INDEX_BITS 4\n-#define INDEX_SIZE (1<<INDEX_BITS)\n-#define INDEX_MASK (INDEX_SIZE-1)\n+#define INDEX_SIZE (1 << INDEX_BITS)\n+#define INDEX_MASK (INDEX_SIZE - 1)\n \n-#define INDEX_CAPACITY (BUCKET_SIZE*INDEX_SIZE)\n+#define INDEX_CAPACITY (BUCKET_SIZE * INDEX_SIZE)\n \n #else /* OBJC_SPARSE2 */\n \n-/* Buckets are 32 words each */\n+/* Buckets are 32 words each.  */\n #define BUCKET_BITS 5\n-#define BUCKET_SIZE (1<<BUCKET_BITS)\n-#define BUCKET_MASK (BUCKET_SIZE-1)\n+#define BUCKET_SIZE (1 << BUCKET_BITS)\n+#define BUCKET_MASK (BUCKET_SIZE - 1)\n \n #endif /* OBJC_SPARSE2 */\n \n typedef size_t sidx;\n \n #ifdef PRECOMPUTE_SELECTORS\n \n-struct soffset {\n+struct soffset\n+{\n #ifdef OBJC_SPARSE3\n-  unsigned int unused : SIZET_BITS/4;\n-  unsigned int eoffset : SIZET_BITS/4;\n-  unsigned int boffset : SIZET_BITS/4;\n-  unsigned int ioffset : SIZET_BITS/4;\n+  unsigned int unused : SIZET_BITS / 4;\n+  unsigned int eoffset : SIZET_BITS / 4;\n+  unsigned int boffset : SIZET_BITS / 4;\n+  unsigned int ioffset : SIZET_BITS / 4;\n #else /* OBJC_SPARSE2 */\n #ifdef __sparc__\n   unsigned long boffset : (SIZET_BITS - 2) - BUCKET_BITS;\n   unsigned int eoffset : BUCKET_BITS;\n   unsigned int unused  : 2;\n #else\n-  unsigned int boffset : SIZET_BITS/2;\n-  unsigned int eoffset : SIZET_BITS/2;\n+  unsigned int boffset : SIZET_BITS / 2;\n+  unsigned int eoffset : SIZET_BITS / 2;\n #endif\n #endif /* OBJC_SPARSE2 */\n };\n \n-union sofftype {\n+union sofftype\n+{\n   struct soffset off;\n   sidx idx;\n };\n \n #endif /* not PRECOMPUTE_SELECTORS */\n \n-union sversion {\n+union sversion\n+{\n   int\tversion;\n   void *next_free;\n };\n \n-struct sbucket {\n-  void* elems[BUCKET_SIZE];\t/* elements stored in array */\n-  union sversion\tversion;\t\t/* used for copy-on-write */\n+struct sbucket\n+{\n+  /* Elements stored in array.  */\n+  void* elems[BUCKET_SIZE];\n+\n+  /* Used for copy-on-write.  */\n+  union sversion version;\n };\n \n #ifdef OBJC_SPARSE3\n \n-struct sindex {\n+struct sindex\n+{\n   struct sbucket* buckets[INDEX_SIZE];\n-  union sversion\tversion;\t\t/* used for copy-on-write */\n+\n+  /* Used for copy-on-write. */\n+  union sversion version;\t\t\n };\n \n #endif /* OBJC_SPARSE3 */\n \n-struct sarray {\n+struct sarray\n+{\n #ifdef OBJC_SPARSE3\n   struct sindex** indices;\n   struct sindex* empty_index;\n #else /* OBJC_SPARSE2 */\n   struct sbucket** buckets;\n #endif  /* OBJC_SPARSE2 */\n   struct sbucket* empty_bucket;\n-  union sversion\tversion;\t\t/* used for copy-on-write */\n+\n+  /* Used for copy-on-write. */\n+  union sversion version;\n+\n   short ref_count;\n   struct sarray* is_copy_of;\n   size_t capacity;\n };\n \n-struct sarray* sarray_new(int, void* default_element);\n-void sarray_free(struct sarray*);\n-struct sarray* sarray_lazy_copy(struct sarray*);\n-void sarray_realloc(struct sarray*, int new_size);\n-void sarray_at_put(struct sarray*, sidx indx, void* elem);\n-void sarray_at_put_safe(struct sarray*, sidx indx, void* elem);\n+struct sarray* sarray_new (int, void* default_element);\n+void sarray_free (struct sarray*);\n+struct sarray* sarray_lazy_copy (struct sarray*);\n+void sarray_realloc (struct sarray*, int new_size);\n+void sarray_at_put (struct sarray*, sidx indx, void* elem);\n+void sarray_at_put_safe (struct sarray*, sidx indx, void* elem);\n \n-struct sarray* sarray_hard_copy(struct sarray*); /* ... like the name? */\n-void sarray_remove_garbage(void);\n+struct sarray* sarray_hard_copy (struct sarray*); /* ... like the name ?  */\n+void sarray_remove_garbage (void);\n \f\n \n #ifdef PRECOMPUTE_SELECTORS\n-/* Transform soffset values to ints and vica verca */\n+/* Transform soffset values to ints and vice versa.  */\n static inline unsigned int\n-soffset_decode(sidx indx)\n+soffset_decode (sidx indx)\n {\n   union sofftype x;\n   x.idx = indx;\n #ifdef OBJC_SPARSE3\n   return x.off.eoffset\n-    + (x.off.boffset*BUCKET_SIZE)\n-      + (x.off.ioffset*INDEX_CAPACITY);\n+    + (x.off.boffset * BUCKET_SIZE)\n+    + (x.off.ioffset * INDEX_CAPACITY);\n #else /* OBJC_SPARSE2 */\n-  return x.off.eoffset + (x.off.boffset*BUCKET_SIZE);\n+  return x.off.eoffset + (x.off.boffset * BUCKET_SIZE);\n #endif /* OBJC_SPARSE2 */\n }\n \n static inline sidx\n-soffset_encode(size_t offset)\n+soffset_encode (size_t offset)\n {\n   union sofftype x;\n-  x.off.eoffset = offset%BUCKET_SIZE;\n+  x.off.eoffset = offset % BUCKET_SIZE;\n #ifdef OBJC_SPARSE3\n-  x.off.boffset = (offset/BUCKET_SIZE)%INDEX_SIZE;\n-  x.off.ioffset = offset/INDEX_CAPACITY;\n+  x.off.boffset = (offset / BUCKET_SIZE) % INDEX_SIZE;\n+  x.off.ioffset = offset / INDEX_CAPACITY;\n #else /* OBJC_SPARSE2 */\n-  x.off.boffset = offset/BUCKET_SIZE;\n+  x.off.boffset = offset / BUCKET_SIZE;\n #endif\n   return (sidx)x.idx;\n }\n \n #else /* not PRECOMPUTE_SELECTORS */\n \n static inline size_t\n-soffset_decode(sidx indx)\n+soffset_decode (sidx indx)\n {\n   return indx;\n }\n \n static inline sidx\n-soffset_encode(size_t offset)\n+soffset_encode (size_t offset)\n {\n   return offset;\n }\n #endif /* not PRECOMPUTE_SELECTORS */\n \n-/* Get element from the Sparse array `array' at offset `indx' */\n-\n-static inline void* sarray_get(struct sarray* array, sidx indx)\n+/* Get element from the Sparse array `array' at offset `indx'.  */\n+static inline void* sarray_get (struct sarray* array, sidx indx)\n {\n #ifdef PRECOMPUTE_SELECTORS\n   union sofftype x;\n   x.idx = indx;\n #ifdef OBJC_SPARSE3\n-  return \n-    array->\n-      indices[x.off.ioffset]->\n-\tbuckets[x.off.boffset]->\n-\t  elems[x.off.eoffset];\n+  return array->\n+    indices[x.off.ioffset]->\n+    buckets[x.off.boffset]->\n+    elems[x.off.eoffset];\n #else /* OBJC_SPARSE2 */\n   return array->buckets[x.off.boffset]->elems[x.off.eoffset];\n #endif /* OBJC_SPARSE2 */\n #else /* not PRECOMPUTE_SELECTORS */\n #ifdef OBJC_SPARSE3\n   return array->\n-    indices[indx/INDEX_CAPACITY]->\n-      buckets[(indx/BUCKET_SIZE)%INDEX_SIZE]->\n-\telems[indx%BUCKET_SIZE];\n+    indices[indx / INDEX_CAPACITY]->\n+    buckets[(indx / BUCKET_SIZE) % INDEX_SIZE]->\n+    elems[indx % BUCKET_SIZE];\n #else /* OBJC_SPARSE2 */\n-  return array->buckets[indx/BUCKET_SIZE]->elems[indx%BUCKET_SIZE];\n+  return array->buckets[indx / BUCKET_SIZE]->elems[indx % BUCKET_SIZE];\n #endif /* not OBJC_SPARSE3 */\n #endif /* not PRECOMPUTE_SELECTORS */\n }\n \n-static inline void* sarray_get_safe(struct sarray* array, sidx indx)\n+static inline void* sarray_get_safe (struct sarray* array, sidx indx)\n {\n-  if(soffset_decode(indx) < array->capacity)\n-    return sarray_get(array, indx);\n+  if (soffset_decode (indx) < array->capacity)\n+    return sarray_get (array, indx);\n   else\n     return (array->empty_bucket->elems[0]);\n }"}]}