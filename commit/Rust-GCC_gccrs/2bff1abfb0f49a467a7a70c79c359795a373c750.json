{"sha": "2bff1abfb0f49a467a7a70c79c359795a373c750", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJmZjFhYmZiMGY0OWE0NjdhN2E3MGM3OWMzNTk3OTVhMzczYzc1MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-07-16T06:46:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-07-16T06:46:48Z"}, "message": "* config/mips/mips.md: Remove mips16 define_peepholes.\n\nFrom-SVN: r84803", "tree": {"sha": "33646a0a81a6a03c310f3db8f37ba57d85c091a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33646a0a81a6a03c310f3db8f37ba57d85c091a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bff1abfb0f49a467a7a70c79c359795a373c750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bff1abfb0f49a467a7a70c79c359795a373c750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bff1abfb0f49a467a7a70c79c359795a373c750", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bff1abfb0f49a467a7a70c79c359795a373c750/comments", "author": null, "committer": null, "parents": [{"sha": "ed2e3d339515787f8e6f6f151d9a75ae5be64bf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2e3d339515787f8e6f6f151d9a75ae5be64bf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed2e3d339515787f8e6f6f151d9a75ae5be64bf8"}], "stats": {"total": 119, "additions": 4, "deletions": 115}, "files": [{"sha": "ae093686d96e1db9362257e50550eeaf2a6824fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bff1abfb0f49a467a7a70c79c359795a373c750/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bff1abfb0f49a467a7a70c79c359795a373c750/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bff1abfb0f49a467a7a70c79c359795a373c750", "patch": "@@ -1,3 +1,7 @@\n+2004-07-16  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.md: Remove mips16 define_peepholes.\n+\n 2004-07-16  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-ssa-pre.c (init_pre): Connect infinite loops to exit."}, {"sha": "b94c759e94c6c13ac816b25a08a2d2734fda957a", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bff1abfb0f49a467a7a70c79c359795a373c750/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bff1abfb0f49a467a7a70c79c359795a373c750/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=2bff1abfb0f49a467a7a70c79c359795a373c750", "patch": "@@ -7634,121 +7634,6 @@ dsrl\\t%3,%3,1\\n\\\n   \".align\\t%0\"\n   [(set (attr \"length\") (symbol_ref \"(1 << INTVAL (operands[0])) - 1\"))])\n \f\n-;;\n-;;  ....................\n-;;\n-;;\tmips16 peepholes\n-;;\n-;;  ....................\n-;;\n-\n-;; On the mips16, reload will sometimes decide that a pseudo register\n-;; should go into $24, and then later on have to reload that register.\n-;; When that happens, we get a load of a general register followed by\n-;; a move from the general register to $24 followed by a branch.\n-;; These peepholes catch the common case, and fix it to just use the\n-;; general register for the branch.\n-\n-(define_peephole\n-  [(set (match_operand:SI 0 \"register_operand\" \"=t\")\n-\t(match_operand:SI 1 \"register_operand\" \"d\"))\n-   (set (pc)\n-\t(if_then_else (match_operator:SI 2 \"equality_op\" [(match_dup 0)\n-\t\t\t\t\t\t\t  (const_int 0)])\n-\t\t      (match_operand 3 \"pc_or_label_operand\" \"\")\n-\t\t      (match_operand 4 \"pc_or_label_operand\" \"\")))]\n-  \"TARGET_MIPS16\n-   && GET_CODE (operands[0]) == REG\n-   && REGNO (operands[0]) == 24\n-   && dead_or_set_p (insn, operands[0])\n-   && GET_CODE (operands[1]) == REG\n-   && M16_REG_P (REGNO (operands[1]))\"\n-{\n-  if (operands[3] != pc_rtx)\n-    return \"b%C2z\\t%1,%3\";\n-  else\n-    return \"b%N2z\\t%1,%4\";\n-}\n-  [(set_attr \"type\"\t\"branch\")\n-   (set_attr \"mode\"\t\"none\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-(define_peephole\n-  [(set (match_operand:DI 0 \"register_operand\" \"=t\")\n-\t(match_operand:DI 1 \"register_operand\" \"d\"))\n-   (set (pc)\n-\t(if_then_else (match_operator:DI 2 \"equality_op\" [(match_dup 0)\n-\t\t\t\t\t\t\t  (const_int 0)])\n-\t\t      (match_operand 3 \"pc_or_label_operand\" \"\")\n-\t\t      (match_operand 4 \"pc_or_label_operand\" \"\")))]\n-  \"TARGET_MIPS16 && TARGET_64BIT\n-   && GET_CODE (operands[0]) == REG\n-   && REGNO (operands[0]) == 24\n-   && dead_or_set_p (insn, operands[0])\n-   && GET_CODE (operands[1]) == REG\n-   && M16_REG_P (REGNO (operands[1]))\"\n-{\n-  if (operands[3] != pc_rtx)\n-    return \"b%C2z\\t%1,%3\";\n-  else\n-    return \"b%N2z\\t%1,%4\";\n-}\n-  [(set_attr \"type\"\t\"branch\")\n-   (set_attr \"mode\"\t\"none\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-;; We can also have the reverse reload: reload will spill $24 into\n-;; another register, and then do a branch on that register when it\n-;; could have just stuck with $24.\n-\n-(define_peephole\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(match_operand:SI 1 \"register_operand\" \"t\"))\n-   (set (pc)\n-\t(if_then_else (match_operator:SI 2 \"equality_op\" [(match_dup 0)\n-\t\t\t\t\t\t\t  (const_int 0)])\n-\t\t      (match_operand 3 \"pc_or_label_operand\" \"\")\n-\t\t      (match_operand 4 \"pc_or_label_operand\" \"\")))]\n-  \"TARGET_MIPS16\n-   && GET_CODE (operands[1]) == REG\n-   && REGNO (operands[1]) == 24\n-   && GET_CODE (operands[0]) == REG\n-   && M16_REG_P (REGNO (operands[0]))\n-   && dead_or_set_p (insn, operands[0])\"\n-{\n-  if (operands[3] != pc_rtx)\n-    return \"bt%C2z\\t%3\";\n-  else\n-    return \"bt%N2z\\t%4\";\n-}\n-  [(set_attr \"type\"\t\"branch\")\n-   (set_attr \"mode\"\t\"none\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-(define_peephole\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(match_operand:DI 1 \"register_operand\" \"t\"))\n-   (set (pc)\n-\t(if_then_else (match_operator:DI 2 \"equality_op\" [(match_dup 0)\n-\t\t\t\t\t\t\t  (const_int 0)])\n-\t\t      (match_operand 3 \"pc_or_label_operand\" \"\")\n-\t\t      (match_operand 4 \"pc_or_label_operand\" \"\")))]\n-  \"TARGET_MIPS16 && TARGET_64BIT\n-   && GET_CODE (operands[1]) == REG\n-   && REGNO (operands[1]) == 24\n-   && GET_CODE (operands[0]) == REG\n-   && M16_REG_P (REGNO (operands[0]))\n-   && dead_or_set_p (insn, operands[0])\"\n-{\n-  if (operands[3] != pc_rtx)\n-    return \"bt%C2z\\t%3\";\n-  else\n-    return \"bt%N2z\\t%4\";\n-}\n-  [(set_attr \"type\"\t\"branch\")\n-   (set_attr \"mode\"\t\"none\")\n-   (set_attr \"length\"\t\"8\")])\n-\n (define_split\n   [(match_operand 0 \"small_data_pattern\")]\n   \"reload_completed\""}]}