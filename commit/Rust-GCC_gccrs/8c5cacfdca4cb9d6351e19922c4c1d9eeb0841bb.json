{"sha": "8c5cacfdca4cb9d6351e19922c4c1d9eeb0841bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM1Y2FjZmRjYTRjYjlkNjM1MWUxOTkyMmM0YzFkOWVlYjA4NDFiYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-30T08:59:15Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-30T08:59:15Z"}, "message": "ia64.c (ia64_function_value): Use PARALLEL for aggregates with XF/XCmode.\n\n        * config/ia64/ia64.c (ia64_function_value): Use PARALLEL for\n        aggregates with XF/XCmode.\n\nFrom-SVN: r92728", "tree": {"sha": "27760f7dcd301cd2fbaaa0e29305fecad641dd00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27760f7dcd301cd2fbaaa0e29305fecad641dd00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c5cacfdca4cb9d6351e19922c4c1d9eeb0841bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5cacfdca4cb9d6351e19922c4c1d9eeb0841bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c5cacfdca4cb9d6351e19922c4c1d9eeb0841bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5cacfdca4cb9d6351e19922c4c1d9eeb0841bb/comments", "author": null, "committer": null, "parents": [{"sha": "9503e7909cf99156a4798df2bc6a6f6b9c07a3a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9503e7909cf99156a4798df2bc6a6f6b9c07a3a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9503e7909cf99156a4798df2bc6a6f6b9c07a3a1"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "3be00ebfeccc0c32e97c8a917dc6598ad2659905", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5cacfdca4cb9d6351e19922c4c1d9eeb0841bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5cacfdca4cb9d6351e19922c4c1d9eeb0841bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c5cacfdca4cb9d6351e19922c4c1d9eeb0841bb", "patch": "@@ -1,3 +1,8 @@\n+2004-12-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/ia64.c (ia64_function_value): Use PARALLEL for \n+\taggregates with XF/XCmode.\n+\n 2004-12-29  Richard Henderson  <rth@redhat.com>\n \n \t* target.h (targetm.calls.arg_partial_bytes): New.\n@@ -71,7 +76,7 @@\n \t* config/mcore/mcore.h (FUNCTION_ARG_PARTIAL_NREGS): Remove.\n \t* config/mcore/mcore.c (mcore_arg_partial_bytes): Rename from\n \tmcore_function_arg_partial_nregs.  Adjust to return bytes.\n-        (TARGET_ARG_PARTIAL_BYTES): New.\n+\t(TARGET_ARG_PARTIAL_BYTES): New.\n \t* config/mcore/mcore-protos.h: Update.\n \n \t* config/mips/mips.h (FUNCTION_ARG_PARTIAL_NREGS): Remove.\n@@ -109,13 +114,13 @@\n \t* config/sparc/sparc.h (FUNCTION_ARG_PARTIAL_NREGS): Remove.\n \t* config/sparc/sparc.c (sparc_arg_partial_bytes): Rename from\n \tfunction_arg_partial_nregs.  Adjust to return bytes.\n-        (TARGET_ARG_PARTIAL_BYTES): New.\n+\t(TARGET_ARG_PARTIAL_BYTES): New.\n \t* config/sparc/sparc-protos.h: Update.\n \n \t* config/v850/v850.h (FUNCTION_ARG_PARTIAL_NREGS): Remove.\n \t* config/v850/v850.c (v850_arg_partial_bytes): Rename from\n-        function_arg_partial_nregs.  Adjust to return bytes.\n-        (TARGET_ARG_PARTIAL_BYTES): New.\n+\tfunction_arg_partial_nregs.  Adjust to return bytes.\n+\t(TARGET_ARG_PARTIAL_BYTES): New.\n \t* config/v850/v850-protos.h: Update.\n \n 2004-12-30  Hans-Peter Nilsson  <hp@bitrange.com>"}, {"sha": "2d819c6ac3fd434d888863d394515bc8a6d72560", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5cacfdca4cb9d6351e19922c4c1d9eeb0841bb/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5cacfdca4cb9d6351e19922c4c1d9eeb0841bb/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=8c5cacfdca4cb9d6351e19922c4c1d9eeb0841bb", "patch": "@@ -3522,8 +3522,24 @@ ia64_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n     return gen_rtx_REG (mode, FR_ARG_FIRST);\n   else\n     {\n+      bool need_parallel = false;\n+\n+      /* In big-endian mode, we need to manage the layout of aggregates\n+\t in the registers so that we get the bits properly aligned in\n+\t the highpart of the registers.  */\n       if (BYTES_BIG_ENDIAN\n \t  && (mode == BLKmode || (valtype && AGGREGATE_TYPE_P (valtype))))\n+\tneed_parallel = true;\n+\n+      /* Something like struct S { long double x; char a[0] } is not an\n+\t HFA structure, and therefore doesn't go in fp registers.  But\n+\t the middle-end will give it XFmode anyway, and XFmode values\n+\t don't normally fit in integer registers.  So we need to smuggle\n+\t the value inside a parallel.  */\n+      else if (mode == XFmode || mode == XCmode)\n+\tneed_parallel = true;\n+\n+      if (need_parallel)\n \t{\n \t  rtx loc[8];\n \t  int offset;\n@@ -3542,8 +3558,8 @@ ia64_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n \t    }\n \t  return gen_rtx_PARALLEL (mode, gen_rtvec_v (i, loc));\n \t}\n-      else\n-\treturn gen_rtx_REG (mode, GR_RET_FIRST);\n+\n+      return gen_rtx_REG (mode, GR_RET_FIRST);\n     }\n }\n "}]}