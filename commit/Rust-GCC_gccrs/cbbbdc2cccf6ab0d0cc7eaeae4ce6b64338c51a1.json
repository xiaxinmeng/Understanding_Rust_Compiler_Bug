{"sha": "cbbbdc2cccf6ab0d0cc7eaeae4ce6b64338c51a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JiYmRjMmNjY2Y2YWIwZDBjYzdlYWVhZTRjZTZiNjQzMzhjNTFhMQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2006-01-23T15:14:53Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2006-01-23T15:14:53Z"}, "message": "r110121@banpei:  zack | 2006-01-22 14:39:11 -0800\n \n         * Makefile.in: Consolidate most rules that use $(CC_FOR_BUILD) and/or\n         $(RUN_GEN).  Use pattern rules to factor out as much boilerplate as\n         practical.  Eliminate per-generator-program link rules.\n\nFrom-SVN: r110117", "tree": {"sha": "b0d6538630c378c371e99d8760936fbf1bd22752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0d6538630c378c371e99d8760936fbf1bd22752"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbbbdc2cccf6ab0d0cc7eaeae4ce6b64338c51a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbbbdc2cccf6ab0d0cc7eaeae4ce6b64338c51a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbbbdc2cccf6ab0d0cc7eaeae4ce6b64338c51a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbbbdc2cccf6ab0d0cc7eaeae4ce6b64338c51a1/comments", "author": null, "committer": null, "parents": [{"sha": "bac9efeaebb5cb047d731cf8a0590c69f83b4842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bac9efeaebb5cb047d731cf8a0590c69f83b4842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bac9efeaebb5cb047d731cf8a0590c69f83b4842"}], "stats": {"total": 645, "additions": 257, "deletions": 388}, "files": [{"sha": "e2855d8f77439a9c9ec12a2526bd64bb8ed42f85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 59, "deletions": 53, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbbdc2cccf6ab0d0cc7eaeae4ce6b64338c51a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbbdc2cccf6ab0d0cc7eaeae4ce6b64338c51a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbbbdc2cccf6ab0d0cc7eaeae4ce6b64338c51a1", "patch": "@@ -1,3 +1,9 @@\n+2006-01-22  Zack Weinberg  <zackw@panix.com>\n+\n+\t* Makefile.in: Consolidate most rules that use $(CC_FOR_BUILD) and/or\n+\t$(RUN_GEN).  Use pattern rules to factor out as much boilerplate as\n+\tpractical.  Eliminate per-generator-program link rules.\n+\n 2006-01-23  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/24437\n@@ -169,14 +175,14 @@\n \n 2006-01-20  Dirk Mueller  <dmueller@suse.com>\n \n-        PR c++/5520\n-        * c-parser.c (c_parser_if_body): Use build_empty_stmt()\n-        instead of a special NOP marker.\n-        * c-typeck.c (c_finish_if_stmt): Remove obsoleted special\n-        NOP marker handling.\n-        * c-common.h (empty_body_warning): Add forward declaration.\n-        * c-common.c (empty_body_warning): Add (from c_finish_if_stmt).\n-        Now uses IS_EMPTY_STMT() instead of special NOP markers.\n+\tPR c++/5520\n+\t* c-parser.c (c_parser_if_body): Use build_empty_stmt()\n+\tinstead of a special NOP marker.\n+\t* c-typeck.c (c_finish_if_stmt): Remove obsoleted special\n+\tNOP marker handling.\n+\t* c-common.h (empty_body_warning): Add forward declaration.\n+\t* c-common.c (empty_body_warning): Add (from c_finish_if_stmt).\n+\tNow uses IS_EMPTY_STMT() instead of special NOP markers.\n \n 2005-01-20  Paul Brook  <paul@codesourcery.com>\n \n@@ -211,11 +217,11 @@\n \n 2005-01-19  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n-\tPR rtl-optimization/25799 \n+\tPR rtl-optimization/25799\n \t* df-problems.c (df_ru_confluence_n, df_rd_confluence_n):\n \tCorrected confluence operator to remove bits from op2 before oring\n \twith op1 rather than removing bits from op1.\n-        (df_ru_transfer_function): Corrected test on wrong bitmap which\n+\t(df_ru_transfer_function): Corrected test on wrong bitmap which\n \tcaused infinite loop.  Both of these problems were introduced in\n \tthe dataflow rewrite.\n \n@@ -298,7 +304,7 @@\n \tfor the TARGET_DEEP_BRANCH_PREDICTION case.\n \n 2006-01-19  Jan Hubicka  <jh@suse.cz>\n-            H.J. Lu  <hongjiu.lu@intel.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n \t    Evandro Menezes <evandro.menezes@amd.com>\n \n \t* invoke.texi (generic): Document\n@@ -495,7 +501,7 @@\n \n \t* tree-vrp.c (extract_range_from_assert): Refine the result range\n \tif the variable referenced by the ASSERT_EXPR has a range and\n-\teither the tentative result range or the previous range is a \n+\teither the tentative result range or the previous range is a\n \tVR_ANTI_RANGE.\n \n 2006-01-19  Richard Sandiford  <richard@codesourcery.com>\n@@ -521,13 +527,13 @@\n 2006-01-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.md (\"Y\", \"y\"): New mode attribute.\n-\t(\"*cmpdi_ccs\", \"*cmpsi_ccs\", \"*adddi3_imm_cc\", \"*adddi3_carry1_cc\", \n+\t(\"*cmpdi_ccs\", \"*cmpsi_ccs\", \"*adddi3_imm_cc\", \"*adddi3_carry1_cc\",\n \t\"*adddi3_carry1_cconly\", \"*adddi3_carry2_cc\", \"*adddi3_carry2_cconly\",\n-\t\"*adddi3_cc\", \"*adddi3_cconly\", \"*adddi3_cconly2\", \"*adddi3_64\", \n-\t\"*addsi3_imm_cc\", \"*addsi3_carry1_cc\", \n+\t\"*adddi3_cc\", \"*adddi3_cconly\", \"*adddi3_cconly2\", \"*adddi3_64\",\n+\t\"*addsi3_imm_cc\", \"*addsi3_carry1_cc\",\n \t\"*addsi3_carry1_cconly\", \"*addsi3_carry2_cc\", \"*addsi3_carr2_cconly\",\n \t\"*addsi3_cc\", \"*addsi3_cconly\", \"*addsi3_cconly2\",\n-\t\"*subdi3_borrow_cc\", \"*subdi3_borrow_cconly\", \"*subdi3_cc\", \n+\t\"*subdi3_borrow_cc\", \"*subdi3_borrow_cconly\", \"*subdi3_cc\",\n \t\"*subdi3_cc2\", \"*subdi3_cconly\", \"*subdi3_cconly2\", \"*subdi3_64\",\n \t\"*subsi3_borrow_cc\", \"*subsi3_borrow_cconly\", \"*subsi3_cc\",\n \t\"*subsi3_cc2\", \"*subsi3_cconly\", \"*subsi3_cconly\", \"*subsi3_cconly2\",\n@@ -536,7 +542,7 @@\n \t\"*add<mode>3_carry2_cc\", \"*add<mode>3_carry2_cconly\", \"*add<mode>3_cc\",\n \t\"*add<mode>3_cconly\", \"*add<mode>3_cconly2\", \"*add<mode>3_imm_cc\",\n \t\"*sub<mode>3_borrow_cc\", \"*sub<mode>3_borrow_cconly\",\n-\t\"*sub<mode>3_cc\", \"*sub<mode>3_cc2\", \"*sub<mode>3_cconly\", \n+\t\"*sub<mode>3_cc\", \"*sub<mode>3_cc2\", \"*sub<mode>3_cconly\",\n \t\"*sub<mode>3_cconly2\"): New insn patterns.\n \t(\"addsi3\", \"subsi3\"): New expanders.\n \n@@ -640,7 +646,7 @@\n \t(add_may_alias): Ditto.\n \t(replace_may_alias): Ditto.\n \t(get_nmt_for): Ditto.\n-\t(create_global_var): \n+\t(create_global_var):\n \t(is_escape_site): Return an escape_type enumeration.\n \t* tree-flow-inline.h (is_call_clobbered):  Global var does not\n \timply call clobbered.\n@@ -650,13 +656,13 @@\n \t* tree-dfa.c (dump_variable): If details is on, dump the reason\n \tfor escaping.\n \t* tree-outof-ssa.c (create_temp): Copy escape mask from original\n-\tvariable. \n+\tvariable.\n \t* tree-flow.h (struct ptr_info_def): Add escape mask member.\n \t(struct var_ann_d): Ditto.\n \t(enum escape_type): New.\n \t(mark_call_clobbered): Adjust prototype.\n \t* tree-ssa-structalias.c (update_alias_info): Unmodifiable vars\n-\tare never call clobbered. \n+\tare never call clobbered.\n \tRecord reasons for escaping.\n \t* tree-ssa-structalias.h (is_escape_site): Update prototype.\n \t* tree-ssa-operands.c (ssa_call_clobbered_cache_valid): Remove.\n@@ -673,7 +679,7 @@\n \tAdd use of PURE_CONST information.\n \t(add_call_read_ops): Remove use of cache.\n \tAdd use of static not_read information.\n-\t\n+\n 2006-01-18  Alexandre Oliva  <aoliva@redhat.com>\n \n \tIntroduce TLS descriptors for i386 and x86_64.\n@@ -725,7 +731,7 @@\n \t(ashrdi3): Likewise.\n \t(aeabi_lasr): Likewise.\n \t(lshrdi3): Likewise.\n-\t(aeabi_llsr): Likewise. \n+\t(aeabi_llsr): Likewise.\n \t2005-03-10  Julian Brown  <julian@codesourcery.com>\n \t* config.gcc: Disable shared libgcc for SymbianOS.\n \t* config/arm/t-symbian (LIB2ADDEH): Include config/arm/pr-support.c.\n@@ -1199,7 +1205,7 @@\n \t(override_options): Use the size_cost.branch_cost as the default\n \tix86_branch_cost when optimizing for size.\n \n-2006-01-18  Ben Elliston  <bje@au.ibm.com>\t\n+2006-01-18  Ben Elliston  <bje@au.ibm.com>\n \n \t* Makefile.in (D32PBIT_FUNCS): New.\n \t(D64PBIT_FUNCS, D128PBIT_FUNCS): Likewise.\n@@ -1212,7 +1218,7 @@\n \t* doc/libgcc.texi (Decimal float library routines): New node.\n \t* config/dfp-bit.h, config/dfp-bit.c: New files.\n \n-2006-01-18  Ben Elliston  <bje@au.ibm.com>\t\n+2006-01-18  Ben Elliston  <bje@au.ibm.com>\n \n \t* expr.c (emit_move_change_mode): Always adjust addresses, not\n \tjust during reload.  Copy replacements only during reload.\n@@ -1316,7 +1322,7 @@\n \tMerge from gomp branch:\n \t* Makefile.in (TREE_INLINE_H): New.  Use it as needed.\n \t* tree-inline.h (struct copy_body_data): Move from tree-inline.c\n-\tand rename from struct inline_data.  Rename callee* to dst*; \n+\tand rename from struct inline_data.  Rename callee* to dst*;\n \tcaller* to src*; add copy_decl hook, transform_call_graph_edges,\n \ttransform_new_cfg, transform_return_to_modify, and\n \ttransform_lang_insert_block flags; remove cloning_p, versioning_p,\n@@ -1435,7 +1441,7 @@\n \t* doc/invoke.texi: Add documentation for -frtl-abstract-sequences.\n \n 2006-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n-            Roger Sayle  <roger@eyesopen.com> \n+\t    Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (fold_minmax): New static function.\n \t(fold_binary) <MIN_EXPR>: Call it.\n@@ -1677,7 +1683,7 @@\n \tused to communicate with thread_through_all_blocks.\n \t* tree-flow.h (thread_through_all_blocks): Update prototype.\n \t(register_jump_thread): Prototype.\n-\t\n+\n 2006-01-11  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* df-core.c (df_compact_blocks, df_bb_replace): Use\n@@ -1709,7 +1715,7 @@\n 2005-01-11  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* Makefile.in: Removed rotted odf.c entry.\n-\t\n+\n 2006-01-11  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR target/25706\n@@ -1783,27 +1789,27 @@\n \tPR tree-optimization/24123\n \n \t* Makefile.in (tree-ssa-math-opts.o): Adjust dependencies.\n-        * tree-cfg.c (single_noncomplex_succ): New.\n-        * tree-flow.h (single_noncomplex_succ): Declare it.\n-        * tree-ssa-math-opts.c (enum place_reciprocal): Remove.\n-        * tree-ssa-math-opts.c (enum place_reciprocal): Remove.\n-        (struct occurrence, occ_head, occ_pool, is_divide_by, compute_merit,\n+\t* tree-cfg.c (single_noncomplex_succ): New.\n+\t* tree-flow.h (single_noncomplex_succ): Declare it.\n+\t* tree-ssa-math-opts.c (enum place_reciprocal): Remove.\n+\t* tree-ssa-math-opts.c (enum place_reciprocal): Remove.\n+\t(struct occurrence, occ_head, occ_pool, is_divide_by, compute_merit,\n \tinsert_bb, register_division_in, insert_reciprocals,\n \treplace_reciprocal, free_bb): New.\n-        (execute_cse_reciprocals_1): Rewritten.\n-        (execute_cse_reciprocals): Adjust calls to execute_cse_reciprocals_1.\n-        Do not commit any edge insertion.  Always compute dominators and\n-        create the allocation pool.\n-        * target-def.h (TARGET_MIN_DIVISIONS_FOR_RECIP_MUL): New.\n+\t(execute_cse_reciprocals_1): Rewritten.\n+\t(execute_cse_reciprocals): Adjust calls to execute_cse_reciprocals_1.\n+\tDo not commit any edge insertion.  Always compute dominators and\n+\tcreate the allocation pool.\n+\t* target-def.h (TARGET_MIN_DIVISIONS_FOR_RECIP_MUL): New.\n \t* target.h (struct gcc_target): Add min_divistions_for_recip_mul.\n \t* targhooks.c (default_min_divistions_for_recip_mul): New.\n \t* targhooks.h (default_min_divistions_for_recip_mul): New prototype.\n-        * passes.c (init_optimization_passes): Run recip after tree loop\n-        optimizations.\n-        * doc/tm.texi (Misc): Document TARGET_MIN_DIVISIONS_FOR_RECIP_MUL.\n+\t* passes.c (init_optimization_passes): Run recip after tree loop\n+\toptimizations.\n+\t* doc/tm.texi (Misc): Document TARGET_MIN_DIVISIONS_FOR_RECIP_MUL.\n \n 2005-01-11  Danny Berlin <dberlin@dberlin.org>\n-            Kenneth Zadeck <zadeck@naturalbridge.com>\n+\t    Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* df.h (DF_SCAN, DF_RU, DF_RD, DF_LR, DF_UR, DF_UREC, DF_CHAIN,\n \tDF_RI, DF_LAST_PROBLEM_PLUS1, DF_DU_CHAIN, DF_UD_CHAIN,\n@@ -1859,7 +1865,7 @@\n \tdf_ref_remove, df_insn_refs_delete, df_refs_delete,\n \tdf_reorganize_refs, df_set_state, df_hard_reg_init,\n \tdf_read_modify_subreg_p) New public functions.\n-        * df-core.c: The core dataflow solver and glue routines for rtl\n+\t* df-core.c: The core dataflow solver and glue routines for rtl\n \tdataflow.\n \t(df_init, df_add_problem, df_set_blocks, df_finish,\n \tdf_hybrid_search_forward, df_hybrid_search_backward,\n@@ -1927,17 +1933,17 @@\n \tdf_ri_compute, df_ri_free, df_ri_dump, df_ri_add_problem,\n \tdf_reg_lifetime): New functions.\n \t* df.c: Deleted file.\n-        * ddg.c (create_ddg_dep_no_link, build_inter_loop_deps): Made code\n+\t* ddg.c (create_ddg_dep_no_link, build_inter_loop_deps): Made code\n \tconsistent with new df api.\n-        * modulo-sched.c (sms_schedule, rest_of_handle_sms,\n-        rest_of_handle_sms): Ditto.\n-        * web.c (unionfind_union, union_defs, entry_register, web_main):\n+\t* modulo-sched.c (sms_schedule, rest_of_handle_sms,\n+\trest_of_handle_sms): Ditto.\n+\t* web.c (unionfind_union, union_defs, entry_register, web_main):\n \tDitto.\n \t* loop_invariant.c (invariant_for_use, hash_invariant_expr_1,\n \tinvariant_expr_equal_p, find_defs, check_dependencies,\n \tfind_invariant_insn, find_invariants_to_move, move_invariant_reg,\n \tfree_inv_motion_data, move_loop_invariants): Ditto.\n-\t* Makefile.in (df.c, df-scan.c df-problems.c df-core.c): \n+\t* Makefile.in (df.c, df-scan.c df-problems.c df-core.c):\n \tUpdate dependencies.\n \t(odf.c): Added defective entry that was deleted later in day.\n \t* sched-deps.c (sched_analyze_1): Ditto.\n@@ -2399,8 +2405,8 @@\n \t    Richard Henderson  <rth@redhat.com>\n \n \tMerge from gomp-branch:\n-        * varasm.c (assemble_variable): Handle thread-local COMMON data.\n-        * defaults.h (ASM_OUTPUT_TLS_COMMON): Define.\n+\t* varasm.c (assemble_variable): Handle thread-local COMMON data.\n+\t* defaults.h (ASM_OUTPUT_TLS_COMMON): Define.\n \n 2006-01-03  Paolo Bonzini  <bonzini@gnu.org>\n \n@@ -2496,7 +2502,7 @@\n \tDon't clear have_location_lists.\n \n 2006-01-02  Eric Botcazou  <ebotcazou@adacore.com>\n-            Jan Hubicka  <jh@suse.cz>\n+\t    Jan Hubicka  <jh@suse.cz>\n \n \t* cfglayout.c (fixup_reorder_chain): Remove kludge for the\n \tcase of conditional jump jumping to the next instruction.\n@@ -2510,8 +2516,8 @@\n \n 2006-01-02  Paolo Bonzini  <bonzini@gnu.org>\n \n-        PR target/25259\n-        * Makefile.in (DECNUMINC): Include libdecnumber's build directory.\n+\tPR target/25259\n+\t* Makefile.in (DECNUMINC): Include libdecnumber's build directory.\n \n 2006-01-02  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n "}, {"sha": "6e8553c50997643c445ea28d8df8282cd95df018", "filename": "gcc/Makefile.in", "status": "modified", "additions": 198, "deletions": 335, "changes": 533, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbbbdc2cccf6ab0d0cc7eaeae4ce6b64338c51a1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbbbdc2cccf6ab0d0cc7eaeae4ce6b64338c51a1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=cbbbdc2cccf6ab0d0cc7eaeae4ce6b64338c51a1", "patch": "@@ -1367,6 +1367,8 @@ $(SPECS): xgcc$(exeext)\n gcc-cross: xgcc$(exeext)\n \tcp xgcc$(exeext) gcc-cross$(exeext)\n \n+dummy-checksum.o : dummy-checksum.c\n+\n cc1-dummy$(exeext): $(C_OBJS) dummy-checksum.o $(BACKEND) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(C_OBJS) dummy-checksum.o \\\n \t  $(BACKEND) $(LIBS)\n@@ -1708,27 +1710,6 @@ gccspec.o: gccspec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H)\n \n cppspec.o: cppspec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H)\n \n-build/genchecksum$(build_exeext) : build/genchecksum.o $(BUILD_LIBDEPS)\n-\t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t build/genchecksum.o $(BUILD_LIBS)\n-\n-build/genchecksum.o : genchecksum.c $(BCONFIG_H) $(SYSTEM_H) $(MD5_H)\n-\n-dummy-checksum.o : dummy-checksum.c\n-\n-tree-check.h: s-check ; @true\n-s-check : build/gencheck$(build_exeext)\n-\t$(RUN_GEN) build/gencheck$(build_exeext) > tmp-check.h\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-check.h tree-check.h\n-\t$(STAMP) s-check\n-\n-build/gencheck$(build_exeext) : build/gencheck.o $(BUILD_LIBDEPS)\n-\t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t build/gencheck.o $(BUILD_LIBS)\n-\n-build/gencheck.o : gencheck.c gencheck.h tree.def $(BCONFIG_H) $(SYSTEM_H) \\\n-\tcoretypes.h $(GTM_H) $(lang_tree_files)\n-\n gencheck.h : s-gencheck ; @true\n s-gencheck : Makefile\n \tltf=\"$(lang_tree_files)\"; for f in $$ltf; do \\\n@@ -2657,188 +2638,121 @@ s-mddeps: $(md_file) $(MD_INCLUDES) build/genmddeps$(build_exeext)\n \t$(SHELL) $(srcdir)/../move-if-change tmp-mddeps mddeps.mk\n \t$(STAMP) s-mddeps\n \n-# The following pair of rules has this effect:\n-# genconfig is run only if the md has changed since genconfig was last run;\n-# but the file insn-config.h is touched only when its contents actually change.\n-\n-# Each of the other insn-* files is handled by a similar pair of rules.\n-\n-# This causes an anomaly in the results of make -n\n-# because insn-* is older than s-*\n-# and thus make -n thinks that insn-* will be updated\n-# and force recompilation of things that depend on it.\n-# We use move-if-change precisely to avoid such recompilation.\n-# But there is no way to teach make -n that it will be avoided.\n-\n-# Each of the insn-*.[ch] rules has a semicolon at the end,\n-# for otherwise the system Make on SunOS 4.1 never tries\n-# to recompile insn-*.o.  To avoid problems and extra noise from\n-# versions of make which don't like empty commands (nothing after the\n-# trailing `;'), we call true for each.\n-\n-insn-config.h: s-config ; @true\n-s-config : $(MD_DEPS) build/genconfig$(build_exeext)\n-\t$(RUN_GEN) build/genconfig$(build_exeext) $(md_file) > tmp-config.h\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-config.h insn-config.h\n-\t$(STAMP) s-config\n-\n-insn-conditions.c: s-conditions ; @true\n-s-conditions : $(MD_DEPS) build/genconditions$(build_exeext)\n-\t$(RUN_GEN) build/genconditions$(build_exeext) $(md_file) > tmp-conditions.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-conditions.c insn-conditions.c\n-\t$(STAMP) s-conditions\n-\n-build/insn-conditions.o : insn-conditions.c $(CONFIG_H) $(SYSTEM_H) \\\n-  $(GTM_H) $(RTL_H) $(TM_P_H) $(REGS_H) $(FUNCTION_H) $(RECOG_H) real.h output.h \\\n-  $(FLAGS_H) hard-reg-set.h $(RESOURCE_H) toplev.h reload.h gensupport.h \\\n-  insn-constants.h coretypes.h\n+# Header dependencies for generated source files.\n+genrtl.o : genrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t$(RTL_H)\\\n+  $(GGC_H)\n+insn-attrtab.o : insn-attrtab.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n+  $(TM_H) $(RTL_H) $(REGS_H) real.h output.h $(INSN_ATTR_H)\t\t\\\n+  insn-config.h toplev.h $(RECOG_H) $(TM_P_H) $(FLAGS_H)\n+insn-emit.o : insn-emit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\\\n+  $(RTL_H) $(EXPR_H) real.h output.h insn-config.h $(OPTABS_H)\t\t\\\n+  reload.h $(RECOG_H) toplev.h $(FUNCTION_H) $(FLAGS_H) hard-reg-set.h\t\\\n+  $(RESOURCE_H) $(TM_P_H) $(BASIC_BLOCK_H)\n+insn-extract.o : insn-extract.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n+  $(TM_H) $(RTL_H) toplev.h insn-config.h $(RECOG_H)\n+insn-modes.o : insn-modes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t$(TM_H) \\\n+  $(MACHMODE_H) real.h\n+insn-opinit.o : insn-opinit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n+  $(TM_H) $(RTL_H) insn-config.h $(FLAGS_H) $(RECOG_H) $(EXPR_H)\t\\\n+  $(OPTABS_H) reload.h\n+insn-output.o : insn-output.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n+  $(TM_H) $(RTL_H) $(GGC_H) $(REGS_H) real.h conditions.h\t\t\\\n+  hard-reg-set.h insn-config.h $(INSN_ATTR_H) $(EXPR_H) output.h\t\\\n+  $(RECOG_H) $(FUNCTION_H) toplev.h $(FLAGS_H) insn-codes.h $(TM_P_H)\t\\\n+  $(TARGET_H)\n+insn-peep.o : insn-peep.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\\\n+  $(RTL_H) $(REGS_H) output.h real.h insn-config.h $(RECOG_H) except.h\t\\\n+  $(FUNCTION_H) $(TM_P_H)\n+insn-preds.o : insn-preds.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\t\\\n+  $(TM_H) $(RTL_H) $(TREE_H) insn-config.h $(RECOG_H) real.h output.h\t\\\n+  $(FLAGS_H) $(FUNCTION_H) hard-reg-set.h $(RESOURCE_H) $(TM_P_H)\t\t\\\n+  toplev.h reload.h $(REGS_H)\n+insn-recog.o : insn-recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\t\\\n+  $(TM_H) $(RTL_H) insn-config.h $(RECOG_H) real.h output.h $(FLAGS_H)\t\\\n+  $(FUNCTION_H) hard-reg-set.h $(RESOURCE_H) $(TM_P_H) toplev.h reload.h\n+\n+# For each of the files generated by running a generator program over\n+# the machine description, the following pair of static pattern rules\n+# runs the generator program only if the machine description has changed,\n+# but touches the target file only when its contents actually change.\n+# The \"; @true\" construct forces Make to recheck the timestamp on the\n+# target file.\n+\n+simple_generated_h = insn-attr.h insn-codes.h insn-config.h\t\\\n+\t\t     insn-constants.h insn-flags.h \n+\n+simple_generated_c = insn-attrtab.c insn-conditions.c insn-emit.c \\\n+\t\t     insn-extract.c insn-opinit.c insn-output.c \\\n+\t\t     insn-peep.c insn-recog.c\n+\n+$(simple_generated_h): insn-%.h: s-%; @true\n+\n+$(simple_generated_h:insn-%.h=s-%): s-%: $(MD_DEPS) build/gen%$(build_exeext)\n+\t$(RUN_GEN) build/gen$*$(build_exeext) $(md_file) > tmp-$*.h\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-$*.h insn-$*.h\n+\t$(STAMP) s-$*\n+\n+$(simple_generated_c): insn-%.c: s-%; @true\n+$(simple_generated_c:insn-%.c=s-%): s-%: $(MD_DEPS) build/gen%$(build_exeext)\n+\t$(RUN_GEN) build/gen$*$(build_exeext) $(md_file) > tmp-$*.c\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-$*.c insn-$*.c\n+\t$(STAMP) s-$*\n+\n+# gencheck doesn't read the machine description, and the file produced\n+# doesn't use the insn-* convention.\n+tree-check.h: s-check ; @true\n+s-check : build/gencheck$(build_exeext)\n+\t$(RUN_GEN) build/gencheck$(build_exeext) > tmp-check.h\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-check.h tree-check.h\n+\t$(STAMP) s-check\n \n-build/dummy-conditions.o : dummy-conditions.c\n+# These files are generated by running the same generator more than\n+# once with different options, so they have custom rules.  The\n+# stampfile idiom is the same.\n+genrtl.c: s-genrtl; @true\n+genrtl.h: s-genrtl-h; @true\n \n-insn-flags.h: s-flags ; @true\n-s-flags : $(MD_DEPS) build/genflags$(build_exeext)\n-\t$(RUN_GEN) build/genflags$(build_exeext) $(md_file) > tmp-flags.h\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-flags.h insn-flags.h\n-\t$(STAMP) s-flags\n-\n-insn-codes.h: s-codes ; @true\n-s-codes : $(MD_DEPS) build/gencodes$(build_exeext)\n-\t$(RUN_GEN) build/gencodes$(build_exeext) $(md_file) > tmp-codes.h\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-codes.h insn-codes.h\n-\t$(STAMP) s-codes\n-\n-insn-constants.h: s-constants ; @true\n-s-constants : $(MD_DEPS) build/genconstants$(build_exeext)\n-\t$(RUN_GEN) build/genconstants$(build_exeext) $(md_file) > tmp-constants.h\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-constants.h insn-constants.h\n-\t$(STAMP) s-constants\n-\n-insn-emit.o : insn-emit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  $(RTL_H) $(EXPR_H) real.h output.h insn-config.h $(OPTABS_H) reload.h \\\n-  $(RECOG_H) toplev.h $(FUNCTION_H) $(FLAGS_H) hard-reg-set.h $(RESOURCE_H) \\\n-  $(TM_P_H) $(BASIC_BLOCK_H)\n-\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) -c insn-emit.c \\\n-\t  $(OUTPUT_OPTION)\n-\n-insn-emit.c: s-emit ; @true\n-s-emit : $(MD_DEPS) build/genemit$(build_exeext)\n-\t$(RUN_GEN) build/genemit$(build_exeext) $(md_file) > tmp-emit.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-emit.c insn-emit.c\n-\t$(STAMP) s-emit\n-\n-insn-recog.o : insn-recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  $(RTL_H) insn-config.h $(RECOG_H) real.h output.h $(FLAGS_H)  $(FUNCTION_H) \\\n-  hard-reg-set.h $(RESOURCE_H) $(TM_P_H) toplev.h reload.h\n-\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) -c insn-recog.c \\\n-\t  $(OUTPUT_OPTION)\n-\n-insn-recog.c: s-recog ; @true\n-s-recog : $(MD_DEPS) build/genrecog$(build_exeext)\n-\t$(RUN_GEN) build/genrecog$(build_exeext) $(md_file) > tmp-recog.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-recog.c insn-recog.c\n-\t$(STAMP) s-recog\n-\n-insn-opinit.o : insn-opinit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  $(RTL_H) insn-config.h $(FLAGS_H) $(RECOG_H) $(EXPR_H) $(OPTABS_H) reload.h\n-\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) -c insn-opinit.c \\\n-\t  $(OUTPUT_OPTION)\n-\n-insn-opinit.c: s-opinit ; @true\n-s-opinit : $(MD_DEPS) build/genopinit$(build_exeext)\n-\t$(RUN_GEN) build/genopinit$(build_exeext) $(md_file) > tmp-opinit.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-opinit.c insn-opinit.c\n-\t$(STAMP) s-opinit\n-\n-insn-extract.o : insn-extract.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  $(RTL_H) toplev.h insn-config.h $(RECOG_H)\n-\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) -c insn-extract.c \\\n-\t  $(OUTPUT_OPTION)\n-\n-insn-extract.c: s-extract ; @true\n-s-extract : $(MD_DEPS) build/genextract$(build_exeext)\n-\t$(RUN_GEN) build/genextract$(build_exeext) $(md_file) > tmp-extract.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-extract.c insn-extract.c\n-\t$(STAMP) s-extract\n-\n-insn-peep.o : insn-peep.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  $(RTL_H) $(REGS_H) output.h real.h insn-config.h $(RECOG_H) except.h \\\n-  $(FUNCTION_H) $(TM_P_H)\n-\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) -c insn-peep.c \\\n-\t  $(OUTPUT_OPTION)\n-\n-insn-peep.c: s-peep ; @true\n-s-peep : $(MD_DEPS) build/genpeep$(build_exeext)\n-\t$(RUN_GEN) build/genpeep$(build_exeext) $(md_file) > tmp-peep.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-peep.c insn-peep.c\n-\t$(STAMP) s-peep\n-\n-insn-attrtab.o : insn-attrtab.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  $(RTL_H) $(REGS_H) real.h output.h $(INSN_ATTR_H) insn-config.h toplev.h \\\n-  $(RECOG_H) $(TM_P_H) $(FLAGS_H)\n-\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) -c insn-attrtab.c \\\n-\t  $(OUTPUT_OPTION)\n-\n-insn-attr.h: s-attr ; @true\n-s-attr : $(MD_DEPS) build/genattr$(build_exeext)\n-\t$(RUN_GEN) build/genattr$(build_exeext) $(md_file) > tmp-attr.h\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-attr.h insn-attr.h\n-\t$(STAMP) s-attr\n-\n-insn-attrtab.c: s-attrtab ; @true\n-s-attrtab : $(MD_DEPS) build/genattrtab$(build_exeext)\n-\t$(RUN_GEN) build/genattrtab$(build_exeext) $(md_file) > tmp-attrtab.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-attrtab.c insn-attrtab.c\n-\t$(STAMP) s-attrtab\n-\n-insn-output.o : insn-output.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  $(RTL_H) $(GGC_H) $(REGS_H) real.h conditions.h hard-reg-set.h \\\n-  insn-config.h $(INSN_ATTR_H) $(EXPR_H) output.h $(RECOG_H) $(FUNCTION_H) \\\n-  toplev.h $(FLAGS_H) insn-codes.h $(TM_P_H) $(TARGET_H)\n-\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) -c insn-output.c \\\n-\t  $(OUTPUT_OPTION)\n-\n-insn-output.c: s-output ; @true\n-s-output : $(MD_DEPS) build/genoutput$(build_exeext)\n-\t$(RUN_GEN) build/genoutput$(build_exeext) $(md_file) > tmp-output.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-output.c insn-output.c\n-\t$(STAMP) s-output\n-\n-genrtl.o : genrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-  $(GGC_H)\n-genrtl.c genrtl.h : s-genrtl; @true\n s-genrtl: build/gengenrtl$(build_exeext)\n-\t$(RUN_GEN) build/gengenrtl$(build_exeext) -h > tmp-genrtl.h\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-genrtl.h genrtl.h\n \t$(RUN_GEN) build/gengenrtl$(build_exeext) > tmp-genrtl.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-genrtl.c genrtl.c\n \t$(STAMP) s-genrtl\n \n-insn-modes.o : insn-modes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-\t       $(MACHMODE_H) real.h\n-min-insn-modes.c insn-modes.c insn-modes.h : s-modes ; @true\n+s-genrtl-h: build/gengenrtl$(build_exeext)\n+\t$(RUN_GEN) build/gengenrtl$(build_exeext) -h > tmp-genrtl.h\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-genrtl.h genrtl.h\n+\t$(STAMP) s-genrtl-h\n+\n+insn-modes.c: s-modes; @true\n+insn-modes.h: s-modes-h; @true\n+min-insn-modes.c: s-modes-m; @true\n \n s-modes: build/genmodes$(build_exeext)\n+\t$(RUN_GEN) build/genmodes$(build_exeext) > tmp-modes.c\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-modes.c insn-modes.c\n+\t$(STAMP) s-modes\n+\n+s-modes-h: build/genmodes$(build_exeext)\n \t$(RUN_GEN) build/genmodes$(build_exeext) -h > tmp-modes.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-modes.h insn-modes.h\n+\t$(STAMP) s-modes-h\n+\n+s-modes-m: build/genmodes$(build_exeext)\n \t$(RUN_GEN) build/genmodes$(build_exeext) -m > tmp-min-modes.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-min-modes.c min-insn-modes.c\n-\t$(RUN_GEN) build/genmodes$(build_exeext) > tmp-modes.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-modes.c insn-modes.c\n-\t$(STAMP) s-modes\n+\t$(STAMP) s-modes-m\n \n-insn-preds.c tm-preds.h: s-preds; @true\n+insn-preds.c: s-preds; @true\n+tm-preds.h: s-preds-h; @true\n \n s-preds: $(MD_DEPS) build/genpreds$(build_exeext)\n-\t$(RUN_GEN) build/genpreds$(build_exeext) -h $(md_file) > tmp-preds.h\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-preds.h tm-preds.h\n \t$(RUN_GEN) build/genpreds$(build_exeext) $(md_file) > tmp-preds.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-preds.c insn-preds.c\n \t$(STAMP) s-preds\n \n-insn-preds.o : insn-preds.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-  $(RTL_H) $(TREE_H) insn-config.h $(RECOG_H) real.h output.h $(FLAGS_H) \\\n-  $(FUNCTION_H) hard-reg-set.h $(RESOURCE_H) $(TM_P_H) toplev.h reload.h \\\n-  $(REGS_H)\n+s-preds-h: $(MD_DEPS) build/genpreds$(build_exeext)\n+\t$(RUN_GEN) build/genpreds$(build_exeext) -h $(md_file) > tmp-preds.h\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-preds.h tm-preds.h\n+\t$(STAMP) s-preds-h\n \n GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(CPP_ID_DATA_H) $(host_xm_file_list) \\\n@@ -2938,177 +2852,126 @@ s-gtype: build/gengtype$(build_exeext) $(GTFILES)\n \t$(STAMP) s-gtype\n \n #\f\n-# Compile the programs that generate insn-* from the machine description.\n-# They are compiled with $(CC_FOR_BUILD), and associated libraries,\n-# since they need to run on this machine\n-# even if GCC is being compiled to run on some other machine.\n-\n-# $(CONFIG_H) is omitted from the deps of the gen*.o\n-# because these programs don't really depend on anything\n-# about the target machine.  They do depend on config.h itself,\n-# since that describes the host machine.\n-\n-# The names of programs that run on the \"build\" machine.\n-genprognames=genconfig genflags gencodes genemit genopinit genrecog \\\n-\t     genextract genpeep genattr genoutput\n-\n-# The names of the executable files for those programs.\n-genprogs=$(genprognames:%=build/%$(build_exeext))\n-\n-# Object files used in those programs.\n-genobjnames=$(genprognames:%=%.o) read-rtl.o gensupport.o genattrtab.o \\\n-        genautomata.o gengenrtl.o genmodes.o genpreds.o gengtype.o \\\n-\tgenconstants.o gen-protos.o scan.o fix-header.o scan-decls.o \\\n-\tgencheck.o dummy-conditions.o genconditions.o errors.o ggc-none.o \\\n-\tmin-insn-modes.o rtl.o print-rtl.o varray.o gcov-iov.o \\\n-\tinsn-conditions.o gengtype-lex.o gengtype-yacc.o genmddeps.o \\\n-\tgenchecksum.o\n-\n-genobjs=$(genobjnames:%=build/%)\n-\n-$(genprogs): %$(build_exeext): %.o  $(BUILD_RTL) $(BUILD_SUPPORT) \\\n-\t\t\t       $(BUILD_PRINT) $(BUILD_ERRORS) \\\n-\t                       $(BUILD_LIBDEPS)\n-\t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t\t$< $(BUILD_RTL) $(BUILD_SUPPORT) $(BUILD_PRINT) \\\n-\t\t$(BUILD_ERRORS) $(BUILD_LIBS)\n+# How to compile object files to run on the build machine.\n \n-$(genobjs): %.o :  # dependencies provided by explicit rule later\n+build/%.o :  # dependencies provided by explicit rule later\n \t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) -o $@ $<\n \n-build/read-rtl.o: read-rtl.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n-  $(RTL_BASE_H) $(OBSTACK_H) $(HASHTAB_H)\n-\n-build/gensupport.o: gensupport.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(GTM_H) $(RTL_BASE_H) $(OBSTACK_H) errors.h $(HASHTAB_H) gensupport.h\n-\n-build/genconfig.o : genconfig.c $(RTL_BASE_H) $(BCONFIG_H) \\\n-  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n-\n-build/genflags.o : genflags.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H) \\\n-  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n-\n-build/gencodes.o : gencodes.c $(RTL_BASE_H) $(BCONFIG_H) \\\n-  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n-\n-build/genmddeps$(build_exeext) : build/genmddeps.o $(BUILD_RTL) \\\n-  $(BUILD_EARLY_SUPPORT) $(BUILD_ERRORS) $(BUILD_LIBDEPS)\n-\t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t build/genmddeps.o $(BUILD_EARLY_SUPPORT) $(BUILD_RTL) \\\n-\t $(BUILD_ERRORS) $(BUILD_LIBS)\n-\n-build/genmddeps.o: genmddeps.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(GTM_H) $(RTL_BASE_H) errors.h gensupport.h\n-\n-build/genconstants$(build_exeext) : build/genconstants.o $(BUILD_RTL) \\\n-  $(BUILD_EARLY_SUPPORT) $(BUILD_ERRORS) $(BUILD_LIBDEPS)\n-\t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t build/genconstants.o $(BUILD_EARLY_SUPPORT) $(BUILD_RTL) \\\n-\t $(BUILD_ERRORS) $(BUILD_LIBS)\n-\n-build/genconstants.o : genconstants.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) \\\n-  coretypes.h $(GTM_H) errors.h\n+# Header dependencies for the programs that generate source code.\n+# These are library modules...\n+build/dummy-conditions.o : dummy-conditions.c\n+build/errors.o : errors.c $(BCONFIG_H) $(SYSTEM_H) errors.h\n+build/gensupport.o: gensupport.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n+  $(GTM_H) $(RTL_BASE_H) $(OBSTACK_H) errors.h $(HASHTAB_H)\t\t\\\n+  gensupport.h\n+build/ggc-none.o : ggc-none.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h \t\\\n+  $(GGC_H)\n+build/min-insn-modes.o : min-insn-modes.c $(BCONFIG_H) $(SYSTEM_H)\t\\\n+  $(MACHMODE_H)\n+build/print-rtl.o: print-rtl.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n+  $(GTM_H) $(RTL_BASE_H)\n+build/read-rtl.o: read-rtl.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n+  $(GTM_H) $(RTL_BASE_H) $(OBSTACK_H) $(HASHTAB_H)\n+build/rtl.o: rtl.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H)\t\\\n+  $(RTL_H) real.h $(GGC_H) errors.h\n+build/varray.o: varray.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H)\t\\\n+  $(VARRAY_H) $(RTL_BASE_H) $(GGC_H) $(TREE_H) bitmap.h errors.h\n+build/insn-conditions.o : insn-conditions.c $(CONFIG_H) $(SYSTEM_H)\t\\\n+  $(GTM_H) $(RTL_H) $(TM_P_H) $(REGS_H) $(FUNCTION_H) $(RECOG_H) real.h\t\\\n+  output.h $(FLAGS_H) hard-reg-set.h $(RESOURCE_H) toplev.h reload.h\t\\\n+  gensupport.h insn-constants.h coretypes.h\n \n-build/genemit.o : genemit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) \\\n+# ...these are the programs themselves.\n+build/genattr.o : genattr.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   coretypes.h $(GTM_H) errors.h gensupport.h\n-\n-build/genopinit.o : genopinit.c $(RTL_BASE_H) $(BCONFIG_H) \\\n-  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n-\n-build/genrecog.o : genrecog.c $(RTL_BASE_H) $(BCONFIG_H) \\\n-  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n-\n-build/genextract.o : genextract.c $(RTL_BASE_H) $(BCONFIG_H) \\\n-  $(SYSTEM_H) coretypes.h $(GTM_H) insn-config.h errors.h gensupport.h\n-\n-build/genpeep.o : genpeep.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) \\\n+build/genattrtab.o : genattrtab.c $(RTL_BASE_H) $(OBSTACK_H)\t\t\\\n+  $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(GGC_H)\t\\\n+  gensupport.h genattrtab.h\n+build/genautomata.o : genautomata.c $(RTL_BASE_H) $(OBSTACK_H)\t\t\\\n+  $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(VARRAY_H)\t\\\n+  genattrtab.h $(HASHTAB_H)\n+build/gencheck.o : gencheck.c gencheck.h tree.def $(BCONFIG_H) $(GTM_H)\t\\\n+\t$(SYSTEM_H) coretypes.h $(lang_tree_files)\n+build/genchecksum.o : genchecksum.c $(BCONFIG_H) $(SYSTEM_H) $(MD5_H)\n+build/gencodes.o : gencodes.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   coretypes.h $(GTM_H) errors.h gensupport.h\n-\n-build/genattr.o : genattr.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) \\\n+build/genconditions.o : genconditions.c $(RTL_BASE_H) $(BCONFIG_H)\t\\\n+  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h\n+build/genconfig.o : genconfig.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   coretypes.h $(GTM_H) errors.h gensupport.h\n-\n-build/genattrtab$(build_exeext) : build/genattrtab.o build/genautomata.o \\\n-  $(BUILD_RTL) $(BUILD_SUPPORT) $(BUILD_PRINT) $(BUILD_ERRORS) \\\n-  $(BUILD_VARRAY) $(BUILD_LIBDEPS)\n-\t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t build/genattrtab.o build/genautomata.o \\\n-\t $(BUILD_RTL) $(BUILD_SUPPORT) $(BUILD_PRINT) $(BUILD_ERRORS) \\\n-\t $(BUILD_VARRAY) $(BUILD_LIBS) -lm\n-\n-build/genattrtab.o : genattrtab.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H) \\\n-  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(GGC_H) gensupport.h genattrtab.h\n-\n-build/genautomata.o : genautomata.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H) \\\n-  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(VARRAY_H) genattrtab.h \\\n-  $(HASHTAB_H)\n-\n-build/genoutput.o : genoutput.c $(RTL_BASE_H) $(BCONFIG_H) \\\n+build/genconstants.o : genconstants.c $(RTL_BASE_H) $(BCONFIG_H)\t\\\n+  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h\n+build/genemit.o : genemit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n+  coretypes.h $(GTM_H) errors.h gensupport.h\n+build/genextract.o : genextract.c $(RTL_BASE_H) $(BCONFIG_H)\t\t\\\n+  $(SYSTEM_H) coretypes.h $(GTM_H) insn-config.h errors.h gensupport.h\n+build/genflags.o : genflags.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H)\t\\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n-\n-build/gengenrtl$(build_exeext) : build/gengenrtl.o $(BUILD_ERRORS) \\\n-  $(BUILD_LIBDEPS)\n-\t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t build/gengenrtl.o $(BUILD_ERRORS) $(BUILD_LIBS)\n-\n build/gengenrtl.o : gengenrtl.c $(BCONFIG_H) $(SYSTEM_H) rtl.def\n+build/gengtype-lex.o : gengtype-lex.c gengtype.h gengtype-yacc.h\t\\\n+  $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H) vec.h\n+build/gengtype-yacc.o : gengtype-yacc.c gengtype.h $(BCONFIG_H)\t\t\\\n+  $(SYSTEM_H) coretypes.h $(GTM_H)\n+build/gengtype.o : gengtype.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n+  $(GTM_H) gengtype.h gtyp-gen.h rtl.def insn-notes.def errors.h\n+build/genmddeps.o: genmddeps.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n+  $(GTM_H) $(RTL_BASE_H) errors.h gensupport.h\n+build/genmodes.o : genmodes.c $(BCONFIG_H) $(SYSTEM_H) errors.h\t\t\\\n+  $(HASHTAB_H) machmode.def $(extra_modes_file)\n+build/genopinit.o : genopinit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n+  coretypes.h $(GTM_H) errors.h gensupport.h\n+build/genoutput.o : genoutput.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n+  coretypes.h $(GTM_H) errors.h gensupport.h\n+build/genpeep.o : genpeep.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n+  coretypes.h $(GTM_H) errors.h gensupport.h\n+build/genpreds.o : genpreds.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n+  coretypes.h $(GTM_H) errors.h gensupport.h $(OBSTACK_H)\n+build/genrecog.o : genrecog.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n+  coretypes.h $(GTM_H) errors.h gensupport.h\n \n-build/genmodes$(build_exeext) : build/genmodes.o $(BUILD_ERRORS) \\\n-  $(BUILD_LIBDEPS)\n-\t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t build/genmodes.o $(BUILD_ERRORS) $(BUILD_LIBS)\n-\n-build/genmodes.o : genmodes.c $(BCONFIG_H) $(SYSTEM_H) errors.h $(HASHTAB_H) \\\n-\t     machmode.def $(extra_modes_file)\n+# Compile the programs that generate insn-* from the machine description.\n+# They are compiled with $(CC_FOR_BUILD), and associated libraries,\n+# since they need to run on this machine\n+# even if GCC is being compiled to run on some other machine.\n \n-build/genpreds$(build_exeext) : build/genpreds.o $(BUILD_RTL) \\\n-  $(BUILD_EARLY_SUPPORT) $(BUILD_PRINT) $(BUILD_ERRORS) $(BUILD_LIBDEPS)\n+# As a general rule...\n+build/gen%$(build_exeext): build/gen%.o $(BUILD_LIBDEPS)\n \t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t build/genpreds.o $(BUILD_RTL) $(BUILD_EARLY_SUPPORT) $(BUILD_PRINT) \\\n-\t $(BUILD_ERRORS) $(BUILD_LIBS)\n+\t    $(filter-out $(BUILD_LIBDEPS), $^) $(BUILD_LIBS)\n \n-build/genpreds.o : genpreds.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) \\\n-  coretypes.h $(GTM_H) errors.h gensupport.h $(OBSTACK_H)\n+# All these programs have the same additional dependency set.\n+genprognormal = attr codes config emit extract flags opinit output peep recog\n+$(genprognormal:%=build/gen%$(build_exeext)): $(BUILD_RTL) $(BUILD_SUPPORT) \\\n+  $(BUILD_PRINT) $(BUILD_ERRORS)\n \n-build/gengtype$(build_exeext) : build/gengtype.o build/gengtype-lex.o \\\n-  build/gengtype-yacc.o $(BUILD_LIBDEPS) $(BUILD_ERRORS)\n-\t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t build/gengtype.o build/gengtype-lex.o build/gengtype-yacc.o \\\n-\t $(BUILD_ERRORS) $(BUILD_LIBS)\n+# And all of these, but it's a different set.\n+genprogearly = mddeps constants conditions preds\n+$(genprogearly:%=build/gen%$(build_exeext)): $(BUILD_RTL) $(BUILD_ERRORS) \\\n+  $(BUILD_EARLY_SUPPORT)\n+build/genpreds$(build_exeext) : $(BUILD_PRINT)\n \n-build/gengtype.o : gengtype.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n-  gengtype.h gtyp-gen.h rtl.def insn-notes.def errors.h\n+build/gengenrtl$(build_exeext) : $(BUILD_ERRORS)\n+build/genmodes$(build_exeext) : $(BUILD_ERRORS)\n \n-build/gengtype-lex.o : gengtype-lex.c gengtype.h gengtype-yacc.h \\\n-  $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H) vec.h\n+# These programs are made from more than one source file.\n+# The primary source file comes from the pattern rule above.\n+build/genattrtab$(build_exeext) : build/genautomata.o \\\n+  $(BUILD_RTL) $(BUILD_SUPPORT) $(BUILD_PRINT) $(BUILD_ERRORS) \\\n+  $(BUILD_VARRAY)\n+build/genattrtab$(build_exeext) : BUILD_LIBS += -lm\n \n-build/gengtype-yacc.o : gengtype-yacc.c gengtype.h $(BCONFIG_H) $(SYSTEM_H) \\\n-  coretypes.h $(GTM_H)\n+build/gengtype$(build_exeext) : build/gengtype-lex.o \\\n+  build/gengtype-yacc.o $(BUILD_ERRORS)\n \n+# Generated source files for gengtype.\n gengtype-lex.c : gengtype-lex.l\n \t-$(FLEX) $(FLEXFLAGS) -o$@ $<\n-\n-gengtype-yacc.c gengtype-yacc.h: gengtype-yacc.y\n-\t-$(BISON) $(BISONFLAGS) -d -o gengtype-yacc.c $<\n-\n-build/genconditions$(build_exeext) : build/genconditions.o \\\n-  $(BUILD_EARLY_SUPPORT) $(BUILD_RTL) $(BUILD_ERRORS) $(BUILD_LIBDEPS)\n-\t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t build/genconditions.o $(BUILD_EARLY_SUPPORT) $(BUILD_RTL) \\\n-\t $(BUILD_ERRORS) $(BUILD_LIBS)\n-\n-build/genconditions.o : genconditions.c $(RTL_BASE_H) $(BCONFIG_H) \\\n-  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h\n-\n-build/errors.o : errors.c $(BCONFIG_H) $(SYSTEM_H) errors.h\n-build/ggc-none.o : ggc-none.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GGC_H)\n-build/min-insn-modes.o : min-insn-modes.c $(BCONFIG_H) $(SYSTEM_H) \\\n-  $(MACHMODE_H)\n-build/rtl.o: rtl.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H) $(RTL_H) \\\n-  real.h $(GGC_H) errors.h\n-build/print-rtl.o: print-rtl.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n-  $(RTL_BASE_H)\n-build/varray.o: varray.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H) \\\n-  $(VARRAY_H) $(RTL_BASE_H) $(GGC_H) $(TREE_H) bitmap.h errors.h\n+# This is a pattern rule solely so that Make knows it need not run the\n+# command twice.  The modifier to $@ ensures that Bison is asked to\n+# produce a .c file, whether or not Make decides it needs the .h file\n+# first.\n+gengtype-y%.c gengtype-y%.h: gengtype-y%.y\n+\t-$(BISON) $(BISONFLAGS) -d -o $(@:.h=.c) $<\n \n #\f\n # Remake internationalization support.\n@@ -3208,7 +3071,7 @@ test-protoize-simple: ./protoize ./unprotoize $(GCC_PASSES)\n # gcov-iov.c is run on the build machine to generate gcov-iov.h from version.c\n build/gcov-iov.o: gcov-iov.c $(BCONFIG_H) coretypes.h $(GTM_H) \\\n   $(SYSTEM_H) coretypes.h $(TM_H)\n- \n+\n build/gcov-iov$(build_exeext): build/gcov-iov.o\n \t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) build/gcov-iov.o -o $@\n "}]}