{"sha": "b638c908a7f43892dfe69f58d83cff2ca0a5872b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYzOGM5MDhhN2Y0Mzg5MmRmZTY5ZjU4ZDgzY2ZmMmNhMGE1ODcyYg==", "commit": {"author": {"name": "Ajit Agarwal", "email": "ajitkum@xilinx.com", "date": "2016-01-21T17:15:52Z"}, "committer": {"name": "Michael Eager", "email": "eager@gcc.gnu.org", "date": "2016-01-21T17:15:52Z"}, "message": "Issue wic prefetch instruction at call site. \nThis optimization is enabled with  microblaze target flag mxl-prefetch.\n\nFrom-SVN: r232683", "tree": {"sha": "d4d457c365715aba843c07500952889c615ccf25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4d457c365715aba843c07500952889c615ccf25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b638c908a7f43892dfe69f58d83cff2ca0a5872b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b638c908a7f43892dfe69f58d83cff2ca0a5872b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b638c908a7f43892dfe69f58d83cff2ca0a5872b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b638c908a7f43892dfe69f58d83cff2ca0a5872b/comments", "author": null, "committer": null, "parents": [{"sha": "128c78a6fbc2a6c1cd827fb133331343731838aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/128c78a6fbc2a6c1cd827fb133331343731838aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/128c78a6fbc2a6c1cd827fb133331343731838aa"}], "stats": {"total": 183, "additions": 183, "deletions": 0}, "files": [{"sha": "c72db017bae0ac62ec233e8508b22dd14156a752", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b638c908a7f43892dfe69f58d83cff2ca0a5872b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b638c908a7f43892dfe69f58d83cff2ca0a5872b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b638c908a7f43892dfe69f58d83cff2ca0a5872b", "patch": "@@ -1,3 +1,17 @@\n+2016-01-21  Ajit Agarwal  <ajitkum@xilinx.com>\n+\n+\t* config/microblaze/microblaze.c\n+\t(get_branch_target): New.\n+\t(insert_wic_for_ilb_runout): New.\n+\t(insert_wic): New.\n+\t(microblaze_machine_dependent_reorg): New.\n+\t(TARGET_MACHINE_DEPENDENT_REORG): Define macro.\n+\t* config/microblaze/microblaze.md\n+\t(UNSPEC_IPREFETCH): Define.\n+\t(iprefetch): New pattern\n+\t* config/microblaze/microblaze.opt\n+\t(mxl-prefetch): New flag.\n+\n 2016-01-21  Ajit Agarwal  <ajitkum@xilinx.com>\n \n \t* config/microblaze/microblaze.h"}, {"sha": "baff67a89c9f76f8295ffc626926c398b78f130c", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b638c908a7f43892dfe69f58d83cff2ca0a5872b/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b638c908a7f43892dfe69f58d83cff2ca0a5872b/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=b638c908a7f43892dfe69f58d83cff2ca0a5872b", "patch": "@@ -43,6 +43,9 @@\n #include \"output.h\"\n #include \"builtins.h\"\n #include \"rtl-iter.h\"\n+#include \"cfgloop.h\"\n+#include \"insn-addr.h\"\n+#include \"cfgrtl.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -3607,6 +3610,151 @@ microblaze_legitimate_constant_p (machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n   return true;\n }\n \n+static rtx\n+get_branch_target (rtx branch)\n+{\n+  if (CALL_P (branch))\n+    {\n+      rtx call;\n+\n+      call = XVECEXP (PATTERN (branch), 0, 0);\n+      if (GET_CODE (call) == SET)\n+        call = SET_SRC (call);\n+      if (GET_CODE (call) != CALL)\n+        abort ();\n+      return XEXP (XEXP (call, 0), 0);\n+    }\n+}\n+\n+/* Heuristics to identify where to insert at the\n+   fall through path of the caller function. If there\n+   is a call after the caller branch delay slot then\n+   we dont generate the instruction prefetch instruction.\n+\n+   Scan up to 32 instructions after the call and checks\n+   for the JUMP and call instruction . If there is a call\n+   or JUMP instruction in the range of 32 instruction \"wic\"\n+   instruction wont be generated. Otherwise insert the \"wic\"\n+   instruction in the fall through of the call instruction\n+   four instruction after the call. before_4 is used for\n+   the position to insert \"wic\" instructions. before_16 is\n+   used to check for call and JUMP instruction for first\n+   15 insns.  */\n+\n+static void\n+insert_wic_for_ilb_runout (rtx_insn *first)\n+{\n+  rtx_insn *insn;\n+  rtx_insn *before_4 = 0;\n+  rtx_insn *before_16 = 0;\n+  int addr_offset = 0;\n+  int length;\n+  int wic_addr0 = 128 * 4;\n+  int wic_addr1 = 128 * 4;\n+\n+  int first_addr = INSN_ADDRESSES (INSN_UID (first));\n+\n+  for (insn = first; insn; insn = NEXT_INSN (insn))\n+    if (INSN_P (insn))\n+      {\n+        addr_offset = INSN_ADDRESSES (INSN_UID (insn)) - first_addr;\n+        length = get_attr_length (insn);\n+        if (before_4 == 0 && addr_offset + length >= 4 * 4)\n+          before_4 = insn;\n+\n+        if (JUMP_P(insn))\n+          return;\n+        if (before_16 == 0 && addr_offset + length >= 14 * 4)\n+          before_16 = insn;\n+        if (CALL_P (insn) || tablejump_p (insn, 0, 0))\n+          return;\n+        if (addr_offset + length >= 32 * 4)\n+          {\n+            gcc_assert (before_4 && before_16);\n+            if (wic_addr0 > 4 * 4)\n+              {\n+                insn =\n+                  emit_insn_before (gen_iprefetch\n+                                    (gen_int_mode (addr_offset, SImode)),\n+                                    before_4);\n+                recog_memoized (insn);\n+                INSN_LOCATION (insn) = INSN_LOCATION (before_4);\n+                INSN_ADDRESSES_NEW (insn, INSN_ADDRESSES (INSN_UID (before_4)));\n+                return;\n+              }\n+           }\n+       }\n+}\n+\n+/* Insert instruction prefetch instruction at the fall\n+   through path of the function call.  */\n+\n+static void\n+insert_wic (void)\n+{\n+  rtx_insn *insn;\n+  int i, j;\n+  basic_block bb, prev = 0;\n+  rtx branch_target = 0;\n+\n+  shorten_branches (get_insns ());\n+\n+  for (i = 0; i < n_basic_blocks_for_fn (cfun) - 1; i++)\n+     {\n+       edge e;\n+       edge_iterator ei;\n+       bool simple_loop = false;\n+\n+       bb = BASIC_BLOCK_FOR_FN (cfun, i);\n+\n+       if (bb == NULL)\n+         continue;\n+\n+       if ((prev != 0) && (prev != bb))\n+         continue;\n+       else\n+         prev = 0;\n+\n+       FOR_EACH_EDGE (e, ei, bb->preds)\n+         if (e->src == bb)\n+           {\n+             simple_loop = true;\n+             prev= e->dest;\n+             break;\n+           }\n+\n+       for (insn = BB_END (bb); insn; insn = PREV_INSN (insn))\n+          {\n+            if (INSN_P (insn) && !simple_loop\n+               && CALL_P(insn))\n+              {\n+                if ((branch_target = get_branch_target (insn)))\n+                  insert_wic_for_ilb_runout (\n+                    next_active_insn (next_active_insn (insn)));\n+              }\n+              if (insn == BB_HEAD (bb))\n+                break;\n+           }\n+      }\n+}\n+\n+/* The reorg function defined through the macro\n+   TARGET_MACHINE_DEPENDENT_REORG.  */\n+\n+static void\n+microblaze_machine_dependent_reorg (void)\n+{\n+  if (TARGET_PREFETCH)\n+    {\n+      compute_bb_for_insn ();\n+      loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n+      shorten_branches (get_insns ());\n+      insert_wic ();\n+      loop_optimizer_finalize ();\n+      free_bb_for_insn ();\n+      return;\n+    }\n+}\n \f\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO      microblaze_encode_section_info\n@@ -3699,6 +3847,9 @@ microblaze_legitimate_constant_p (machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n #undef TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P microblaze_legitimate_constant_p\n \n+#undef TARGET_MACHINE_DEPENDENT_REORG\n+#define TARGET_MACHINE_DEPENDENT_REORG microblaze_machine_dependent_reorg\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-microblaze.h\""}, {"sha": "85776237c1ada892da7f00352c3bdfc82ead59e0", "filename": "gcc/config/microblaze/microblaze.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b638c908a7f43892dfe69f58d83cff2ca0a5872b/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b638c908a7f43892dfe69f58d83cff2ca0a5872b/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md?ref=b638c908a7f43892dfe69f58d83cff2ca0a5872b", "patch": "@@ -43,6 +43,9 @@\n   (UNSPEC_TLS           106)    ;; jump table\n ])\n \n+(define_c_enum \"unspec\" [\n+  UNSPEC_IPREFETCH\n+])\n \n ;;----------------------------------------------------\n ;; Instruction Attributes\n@@ -508,6 +511,17 @@\n   (set_attr \"mode\"\t\"SI\")\n   (set_attr \"length\"\t\"4,8\")])\n \n+(define_insn \"iprefetch\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"n\")] UNSPEC_IPREFETCH)\n+   (clobber (mem:BLK (scratch)))]\n+   \"TARGET_PREFETCH\"\n+  {\n+    operands[2] = gen_rtx_REG (SImode, MB_ABI_ASM_TEMP_REGNUM);\n+    return \"mfs\\t%2,rpc\\n\\twic\\t%2,r0\";\n+  }\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\"  \"SI\")\n+   (set_attr \"length\"    \"8\")])\n \n ;;----------------------------------------------------------------\n ;; Double Precision Subtraction"}, {"sha": "51734b4ed8fce7cd665b7a72ae8639e8fc7300a9", "filename": "gcc/config/microblaze/microblaze.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b638c908a7f43892dfe69f58d83cff2ca0a5872b/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b638c908a7f43892dfe69f58d83cff2ca0a5872b/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.opt?ref=b638c908a7f43892dfe69f58d83cff2ca0a5872b", "patch": "@@ -123,5 +123,9 @@ mxl-mode-novectors\n Target Mask(XL_MODE_NOVECTORS)\n Description for mxl-mode-novectors.\n \n+mxl-prefetch\n+Target Mask(PREFETCH)\n+Use hardware prefetch instruction\n+\n mxl-mode-xilkernel\n Target"}]}