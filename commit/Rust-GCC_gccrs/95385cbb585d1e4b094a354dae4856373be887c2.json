{"sha": "95385cbb585d1e4b094a354dae4856373be887c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUzODVjYmI1ODVkMWU0YjA5NGEzNTRkYWU0ODU2MzczYmU4ODdjMg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2002-01-10T02:51:02Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-01-10T02:51:02Z"}, "message": "rs6000.c (altivec_expand_builtin): Add support for mtvscr, dssall, mfvscr, dss, lvsl, lvsr, dstt, dst, dstst, dststt.\n\n\t* config/rs6000/rs6000.c (altivec_expand_builtin): Add support for\n\tmtvscr, dssall, mfvscr, dss, lvsl, lvsr, dstt, dst, dstst, dststt.\n\t(altivec_init_builtins): Same.\n\t(altivec_expand_unop_builtin): Return NULL_RTX on error.\n\t(altivec_expand_binop_builtin): Same.\n\t(altivec_expand_ternop_builtin): Same.\n\t(bdesc_dst): New.\n\n\t* config/rs6000/rs6000.md (\"altivec_mtvscr\"): New.\n\t(\"altivec_vctuxs\"): Fix typo.\n\t(\"altivec_vnmsubfp\"): Same.\n\t(\"altivec_dssall\"): New.\n\t(\"altivec_mfvscr\"): New.\n\t(\"altivec_dss\"): New.\n\t(\"altivec_lvsl\"): New.\n\t(\"altivec_lvsr\"): New.\n\t(\"altivec_dstt\"): New.\n\t(\"altivec_dstst\"): New.\n\t(\"altivec_dststt\"): New.\n\t(\"altivec_dst\"): New.\n\n\t* config/rs6000/rs6000.h (rs6000_builtins): Add mtvscr, dssall,\n\tmfvscr, dss, lvsl, lvsr, dstt, dstst, dststt, dst.\n\nFrom-SVN: r48708", "tree": {"sha": "1b629106a7673dfd39be5c4590a284a88b191e2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b629106a7673dfd39be5c4590a284a88b191e2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95385cbb585d1e4b094a354dae4856373be887c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95385cbb585d1e4b094a354dae4856373be887c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95385cbb585d1e4b094a354dae4856373be887c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95385cbb585d1e4b094a354dae4856373be887c2/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4ac76b4f1674a89ac14937e052c7f28d0de0b95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ac76b4f1674a89ac14937e052c7f28d0de0b95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ac76b4f1674a89ac14937e052c7f28d0de0b95"}], "stats": {"total": 309, "additions": 289, "deletions": 20}, "files": [{"sha": "c30acc70ca5fd48c301bae83f0948f536939ad6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95385cbb585d1e4b094a354dae4856373be887c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95385cbb585d1e4b094a354dae4856373be887c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95385cbb585d1e4b094a354dae4856373be887c2", "patch": "@@ -1,3 +1,32 @@\n+2002-01-08  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* testuite/gcc.dg/altivec-4.c: Add test for mtvscr, dssall,\n+\tmfvscr, dss, lvsl, lvsr, dstt, dstst, dststt, dst.\n+\n+\t* config/rs6000/rs6000.c (altivec_expand_builtin): Add support for\n+\tmtvscr, dssall, mfvscr, dss, lvsl, lvsr, dstt, dst, dstst, dststt.\n+\t(altivec_init_builtins): Same.\n+\t(altivec_expand_unop_builtin): Return NULL_RTX on error.\n+\t(altivec_expand_binop_builtin): Same.\n+\t(altivec_expand_ternop_builtin): Same.\n+\t(bdesc_dst): New.\n+\n+\t* config/rs6000/rs6000.md (\"altivec_mtvscr\"): New.\n+\t(\"altivec_vctuxs\"): Fix typo.\n+\t(\"altivec_vnmsubfp\"): Same.\n+\t(\"altivec_dssall\"): New.\n+\t(\"altivec_mfvscr\"): New.\n+\t(\"altivec_dss\"): New.\n+\t(\"altivec_lvsl\"): New.\n+\t(\"altivec_lvsr\"): New.\n+\t(\"altivec_dstt\"): New.\n+\t(\"altivec_dstst\"): New.\n+\t(\"altivec_dststt\"): New.\n+\t(\"altivec_dst\"): New.\n+\n+\t* config/rs6000/rs6000.h (rs6000_builtins): Add mtvscr, dssall,\n+\tmfvscr, dss, lvsl, lvsr, dstt, dstst, dststt, dst.\n+\n 2002-01-09  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.md (prologue_mcount): Remove lituse_jsr reloc."}, {"sha": "b8b0453bfb2be0a8ee7f94520cc3bee6d06cbf98", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 173, "deletions": 16, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95385cbb585d1e4b094a354dae4856373be887c2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95385cbb585d1e4b094a354dae4856373be887c2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=95385cbb585d1e4b094a354dae4856373be887c2", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines used for code generation on IBM RS/6000.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, \n-   2000, 2001 Free Software Foundation, Inc.\n+   2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n This file is part of GNU CC.\n@@ -3240,6 +3240,16 @@ static const struct builtin_description bdesc_3arg[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_vsldoi_4sf, \"__builtin_altivec_vsldoi_4sf\", ALTIVEC_BUILTIN_VSLDOI_4SF },\n };\n \n+/* DST operations: void foo (void *, const int, const char).  */\n+\n+static const struct builtin_description bdesc_dst[] =\n+{\n+  { MASK_ALTIVEC, CODE_FOR_altivec_dst, \"__builtin_altivec_dst\", ALTIVEC_BUILTIN_DST },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_dstt, \"__builtin_altivec_dstt\", ALTIVEC_BUILTIN_DSTT },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_dstst, \"__builtin_altivec_dstst\", ALTIVEC_BUILTIN_DSTST },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_dststt, \"__builtin_altivec_dststt\", ALTIVEC_BUILTIN_DSTSTT }\n+};\n+\n /* Simple binary operations: VECc = foo (VECa, VECb).  */\n \n static const struct builtin_description bdesc_2arg[] =\n@@ -3410,7 +3420,7 @@ altivec_expand_unop_builtin (icode, arglist, target)\n \n   /* If we got invalid arguments bail out before generating bad rtl.  */\n   if (arg0 == error_mark_node)\n-    return target;\n+    return NULL_RTX;\n \n   if (target == 0\n       || GET_MODE (target) != tmode\n@@ -3444,7 +3454,7 @@ altivec_expand_binop_builtin (icode, arglist, target)\n \n   /* If we got invalid arguments bail out before generating bad rtl.  */\n   if (arg0 == error_mark_node || arg1 == error_mark_node)\n-    return target;\n+    return NULL_RTX;\n \n   if (target == 0\n       || GET_MODE (target) != tmode\n@@ -3485,7 +3495,7 @@ altivec_expand_ternop_builtin (icode, arglist, target)\n   if (arg0 == error_mark_node\n       || arg1 == error_mark_node\n       || arg2 == error_mark_node)\n-    return target;\n+    return NULL_RTX;\n \n   if (target == 0\n       || GET_MODE (target) != tmode\n@@ -3516,9 +3526,9 @@ altivec_expand_builtin (exp, target)\n   enum insn_code icode;\n   tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n   tree arglist = TREE_OPERAND (exp, 1);\n-  tree arg0, arg1;\n-  rtx op0, op1, pat;\n-  enum machine_mode tmode, mode0, mode1;\n+  tree arg0, arg1, arg2;\n+  rtx op0, op1, op2, pat;\n+  enum machine_mode tmode, mode0, mode1, mode2;\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n   \n   switch (fcode)\n@@ -3622,9 +3632,8 @@ altivec_expand_builtin (exp, target)\n \top1 = copy_to_mode_reg (mode1, op1);\n \n       pat = GEN_FCN (icode) (op0, op1);\n-      if (! pat)\n-\treturn 0;\n-      emit_insn (pat);\n+      if (pat)\n+\temit_insn (pat);\n       return NULL_RTX;\n \n     case ALTIVEC_BUILTIN_ST_INTERNAL_8hi:\n@@ -3642,9 +3651,8 @@ altivec_expand_builtin (exp, target)\n \top1 = copy_to_mode_reg (mode1, op1);\n \n       pat = GEN_FCN (icode) (op0, op1);\n-      if (! pat)\n-\treturn 0;\n-      emit_insn (pat);\n+      if (pat)\n+\temit_insn (pat);\n       return NULL_RTX;\n \n     case ALTIVEC_BUILTIN_ST_INTERNAL_4si:\n@@ -3662,9 +3670,8 @@ altivec_expand_builtin (exp, target)\n \top1 = copy_to_mode_reg (mode1, op1);\n \n       pat = GEN_FCN (icode) (op0, op1);\n-      if (! pat)\n-\treturn 0;\n-      emit_insn (pat);\n+      if (pat)\n+\temit_insn (pat);\n       return NULL_RTX;\n \n     case ALTIVEC_BUILTIN_ST_INTERNAL_4sf:\n@@ -3682,12 +3689,103 @@ altivec_expand_builtin (exp, target)\n \top1 = copy_to_mode_reg (mode1, op1);\n \n       pat = GEN_FCN (icode) (op0, op1);\n+      if (pat)\n+\temit_insn (pat);\n+      return NULL_RTX;\n+\n+    case ALTIVEC_BUILTIN_MFVSCR:\n+      icode = CODE_FOR_altivec_mfvscr;\n+      tmode = insn_data[icode].operand[0].mode;\n+\n+      if (target == 0\n+\t  || GET_MODE (target) != tmode\n+\t  || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n+\ttarget = gen_reg_rtx (tmode);\n+      \n+      pat = GEN_FCN (icode) (target);\n       if (! pat)\n \treturn 0;\n       emit_insn (pat);\n+      return target;\n+\n+    case ALTIVEC_BUILTIN_MTVSCR:\n+      icode = CODE_FOR_altivec_mtvscr;\n+      arg0 = TREE_VALUE (arglist);\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      mode0 = insn_data[icode].operand[0].mode;\n+\n+      /* If we got invalid arguments bail out before generating bad rtl.  */\n+      if (arg0 == error_mark_node)\n+\treturn NULL_RTX;\n+\n+      if (! (*insn_data[icode].operand[0].predicate) (op0, mode0))\n+\top0 = copy_to_mode_reg (mode0, op0);\n+\n+      pat = GEN_FCN (icode) (op0);\n+      if (pat)\n+\temit_insn (pat);\n+      return NULL_RTX;\n+      \n+    case ALTIVEC_BUILTIN_DSSALL:\n+      emit_insn (gen_altivec_dssall ());\n+      return NULL_RTX;\n+\n+    case ALTIVEC_BUILTIN_DSS:\n+      icode = CODE_FOR_altivec_dss;\n+      arg0 = TREE_VALUE (arglist);\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      mode0 = insn_data[icode].operand[0].mode;\n+\n+      /* If we got invalid arguments bail out before generating bad rtl.  */\n+      if (arg0 == error_mark_node)\n+\treturn NULL_RTX;\n+\n+      if (! (*insn_data[icode].operand[0].predicate) (op0, mode0))\n+\top0 = copy_to_mode_reg (mode0, op0);\n+\n+      emit_insn (gen_altivec_dss (op0));\n       return NULL_RTX;\n     }\n \n+  /* Handle DST variants.  */\n+  d = (struct builtin_description *) bdesc_dst;\n+  for (i = 0; i < sizeof (bdesc_dst) / sizeof *d; i++, d++)\n+    if (d->code == fcode)\n+      {\n+\targ0 = TREE_VALUE (arglist);\n+\targ1 = TREE_VALUE (TREE_CHAIN (arglist));\n+\targ2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+\top0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+\top1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+\top2 = expand_expr (arg2, NULL_RTX, VOIDmode, 0);\n+\tmode0 = insn_data[d->icode].operand[0].mode;\n+\tmode1 = insn_data[d->icode].operand[1].mode;\n+\tmode2 = insn_data[d->icode].operand[2].mode;\n+\n+\t/* Invalid arguments, bail out before generating bad rtl.  */\n+\tif (arg0 == error_mark_node\n+\t    || arg1 == error_mark_node\n+\t    || arg2 == error_mark_node)\n+\t  return NULL_RTX;\n+\n+\tif (! (*insn_data[d->icode].operand[0].predicate) (op0, mode0))\n+\t  op0 = copy_to_mode_reg (mode0, op0);\n+\tif (! (*insn_data[d->icode].operand[1].predicate) (op1, mode1))\n+\t  op1 = copy_to_mode_reg (mode1, op1);\n+\n+\tif (GET_CODE (op2) != CONST_INT || INTVAL (op2) > 3)\n+\t  {\n+\t    error (\"argument 3 of `%s' must be a 2-bit literal\", d->name);\n+\t    return NULL_RTX;\n+\t  }\n+\n+\tpat = GEN_FCN (d->icode) (op0, op1, op2);\n+\tif (pat != 0)\n+\t  emit_insn (pat);\n+\n+\treturn NULL_RTX;\n+      }\n+\n   /* Handle simple unary operations.  */\n   d = (struct builtin_description *) bdesc_1arg;\n   for (i = 0; i < sizeof (bdesc_1arg) / sizeof *d; i++, d++)\n@@ -3700,6 +3798,14 @@ altivec_expand_builtin (exp, target)\n     if (d->code == fcode)\n       return altivec_expand_binop_builtin (d->icode, arglist, target);\n \n+  /* LVS* are funky.  We initialized them differently.  */\n+  if (fcode == ALTIVEC_BUILTIN_LVSL)\n+    return altivec_expand_binop_builtin (CODE_FOR_altivec_lvsl,\n+\t\t\t\t\t arglist, target);\n+  if (fcode == ALTIVEC_BUILTIN_LVSR)\n+    return altivec_expand_binop_builtin (CODE_FOR_altivec_lvsr,\n+\t\t\t\t\t arglist, target);\n+\n   /* Handle simple ternary operations.  */\n   d = (struct builtin_description *) bdesc_3arg;\n   for (i = 0; i < sizeof  (bdesc_3arg) / sizeof *d; i++, d++)\n@@ -3746,6 +3852,7 @@ altivec_init_builtins (void)\n   tree endlink = void_list_node;\n \n   tree pint_type_node = build_pointer_type (integer_type_node);\n+  tree pvoid_type_node = build_pointer_type (void_type_node);\n   tree pshort_type_node = build_pointer_type (short_integer_type_node);\n   tree pchar_type_node = build_pointer_type (char_type_node);\n   tree pfloat_type_node = build_pointer_type (float_type_node);\n@@ -3820,6 +3927,15 @@ altivec_init_builtins (void)\n     = build_function_type (V8HI_type_node,\n \t\t\t   tree_cons (NULL_TREE, V16QI_type_node, endlink));\n \n+  /* void foo (void *, int, char/literal).  */\n+  tree void_ftype_pvoid_int_char\n+    = build_function_type (void_type_node,\n+\t\t\t   tree_cons (NULL_TREE, pvoid_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    char_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+\n   /* void foo (int *, V4SI).  */\n   tree void_ftype_pint_v4si\n     = build_function_type (void_type_node,\n@@ -3845,6 +3961,30 @@ altivec_init_builtins (void)\n \t\t\t\t      tree_cons (NULL_TREE, V4SF_type_node,\n \t\t\t\t\t\t endlink)));\n \n+  /* void foo (V4SI).  */\n+  tree void_ftype_v4si\n+    = build_function_type (void_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t      endlink));\n+\n+  /* void foo (char).  */\n+  tree void_ftype_qi\n+    = build_function_type (void_type_node,\n+\t\t\t   tree_cons (NULL_TREE, char_type_node,\n+\t\t\t\t      endlink));\n+\n+  /* void foo (void).  */\n+  tree void_ftype_void\n+    = build_function_type (void_type_node,\n+\t\t\t   tree_cons (NULL_TREE, void_type_node,\n+\t\t\t\t      endlink));\n+\n+  /* vshort foo (void).  */\n+  tree v8hi_ftype_void\n+    = build_function_type (V8HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, void_type_node,\n+\t\t\t\t      endlink));\n+\n   tree v4si_ftype_v4si_v4si\n     = build_function_type (V4SI_type_node,\n \t\t\t   tree_cons (NULL_TREE, V4SI_type_node,\n@@ -4045,6 +4185,12 @@ altivec_init_builtins (void)\n \t\t\t\t      tree_cons (NULL_TREE, V16QI_type_node,\n \t\t\t\t\t\t endlink)));\n \n+  tree v16qi_ftype_int_pvoid\n+    = build_function_type (V16QI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, pvoid_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n   tree int_ftype_v8hi_v8hi\n     = build_function_type (integer_type_node,\n \t\t\t   tree_cons (NULL_TREE, V8HI_type_node,\n@@ -4059,6 +4205,12 @@ altivec_init_builtins (void)\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_8hi\", void_ftype_pshort_v8hi, ALTIVEC_BUILTIN_ST_INTERNAL_8hi);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_16qi\", v16qi_ftype_pchar, ALTIVEC_BUILTIN_LD_INTERNAL_16qi);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_st_internal_16qi\", void_ftype_pchar_v16qi, ALTIVEC_BUILTIN_ST_INTERNAL_16qi);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_mtvscr\", void_ftype_v4si, ALTIVEC_BUILTIN_MTVSCR);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_mfvscr\", v8hi_ftype_void, ALTIVEC_BUILTIN_MFVSCR);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_dssall\", void_ftype_void, ALTIVEC_BUILTIN_DSSALL);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_dss\", void_ftype_qi, ALTIVEC_BUILTIN_DSS);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvsl\", v16qi_ftype_int_pvoid, ALTIVEC_BUILTIN_LVSL);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_lvsr\", v16qi_ftype_int_pvoid, ALTIVEC_BUILTIN_LVSR);\n \n   /* Add the simple ternary operators.  */\n   d = (struct builtin_description *) bdesc_3arg;\n@@ -4153,6 +4305,11 @@ altivec_init_builtins (void)\n       def_builtin (d->mask, d->name, type, d->code);\n     }\n \n+  /* Add the DST variants.  */\n+  d = (struct builtin_description *) bdesc_dst;\n+  for (i = 0; i < sizeof (bdesc_dst) / sizeof *d; i++, d++)\n+    def_builtin (d->mask, d->name, void_ftype_pvoid_int_char, d->code);\n+\n   /* Add the simple binary operators.  */\n   d = (struct builtin_description *) bdesc_2arg;\n   for (i = 0; i < sizeof (bdesc_2arg) / sizeof *d; i++, d++)"}, {"sha": "36e9e9900b3d1fb0709060c0cf3e8d857e186e97", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95385cbb585d1e4b094a354dae4856373be887c2/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95385cbb585d1e4b094a354dae4856373be887c2/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=95385cbb585d1e4b094a354dae4856373be887c2", "patch": "@@ -2967,5 +2967,15 @@ enum rs6000_builtins\n   ALTIVEC_BUILTIN_VCMPGTSW_P,\n   ALTIVEC_BUILTIN_VCMPGTUB_P,\n   ALTIVEC_BUILTIN_VCMPGTUH_P,\n-  ALTIVEC_BUILTIN_VCMPGTUW_P\n+  ALTIVEC_BUILTIN_VCMPGTUW_P,\n+  ALTIVEC_BUILTIN_MTVSCR,\n+  ALTIVEC_BUILTIN_MFVSCR,\n+  ALTIVEC_BUILTIN_DSSALL,\n+  ALTIVEC_BUILTIN_DSS,\n+  ALTIVEC_BUILTIN_LVSL,\n+  ALTIVEC_BUILTIN_LVSR,\n+  ALTIVEC_BUILTIN_DSTT,\n+  ALTIVEC_BUILTIN_DSTST,\n+  ALTIVEC_BUILTIN_DSTSTT,\n+  ALTIVEC_BUILTIN_DST\n };"}, {"sha": "364a7e7dc90dd79dd8a65cfebb9021cebec394a3", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 76, "deletions": 3, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95385cbb585d1e4b094a354dae4856373be887c2/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95385cbb585d1e4b094a354dae4856373be887c2/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=95385cbb585d1e4b094a354dae4856373be887c2", "patch": "@@ -14268,7 +14268,7 @@\n \t\t\t       (match_operand:V4SF 2 \"register_operand\" \"v\"))\n \t  \t    (match_operand:V4SF 3 \"register_operand\" \"v\")))]\n   \"TARGET_ALTIVEC\"\n-  \"vmmsubfp %0,%1,%2,%3\"\n+  \"vnmsubfp %0,%1,%2,%3\"\n   [(set_attr \"type\" \"vecfloat\")])\n \n \n@@ -15142,7 +15142,7 @@\n         (unspec:V4SI [(match_operand:V4SF 1 \"register_operand\" \"v\")\n                       (match_operand:QI 2 \"immediate_operand\" \"i\")] 153))]\n   \"TARGET_ALTIVEC\"\n-  \"vctusx %0, %1, %2\"\n+  \"vctuxs %0, %1, %2\"\n   [(set_attr \"type\" \"vecfloat\")])\n \n (define_insn \"altivec_vctsxs\"\n@@ -15399,4 +15399,77 @@\n                       (match_operand:V8HI 2 \"register_operand\" \"v\")] 185))]\n   \"TARGET_ALTIVEC\"\n   \"vcmpgtsh. %0,%1,%2\"\n-[(set_attr \"type\" \"veccmp\")])\n+  [(set_attr \"type\" \"veccmp\")])\n+\n+(define_insn \"altivec_mtvscr\"\n+  [(unspec [(match_operand:V4SI 0 \"register_operand\" \"v\")] 186)]\n+  \"TARGET_ALTIVEC\"\n+  \"mtvscr %0\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"altivec_mfvscr\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+\t(unspec:V8HI [(const_int 0)] 187))]\n+  \"TARGET_ALTIVEC\"\n+  \"mfvscr %0\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"altivec_dssall\"\n+  [(unspec [(const_int 0)] 188)]\n+  \"TARGET_ALTIVEC\"\n+  \"dssall\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"altivec_dss\"\n+  [(unspec [(match_operand:QI 0 \"immediate_operand\" \"i\")] 189)]\n+  \"TARGET_ALTIVEC\"\n+  \"dss %0\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"altivec_dst\"\n+  [(unspec [(match_operand:SI 0 \"register_operand\" \"b\")\n+\t    (match_operand:SI 1 \"register_operand\" \"r\")\n+\t    (match_operand:QI 2 \"immediate_operand\" \"i\")] 190)]\n+  \"TARGET_ALTIVEC\"\n+  \"dst %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"altivec_dstt\"\n+  [(unspec [(match_operand:SI 0 \"register_operand\" \"b\")\n+\t    (match_operand:SI 1 \"register_operand\" \"r\")\n+\t    (match_operand:QI 2 \"immediate_operand\" \"i\")] 191)]\n+  \"TARGET_ALTIVEC\"\n+  \"dstt %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"altivec_dstst\"\n+  [(unspec [(match_operand:SI 0 \"register_operand\" \"b\")\n+\t    (match_operand:SI 1 \"register_operand\" \"r\")\n+\t    (match_operand:QI 2 \"immediate_operand\" \"i\")] 192)]\n+  \"TARGET_ALTIVEC\"\n+  \"dstst %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"altivec_dststt\"\n+  [(unspec [(match_operand:SI 0 \"register_operand\" \"b\")\n+\t    (match_operand:SI 1 \"register_operand\" \"r\")\n+\t    (match_operand:QI 2 \"immediate_operand\" \"i\")] 193)]\n+  \"TARGET_ALTIVEC\"\n+  \"dststt %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"altivec_lvsl\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+\t(unspec:V16QI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t       (match_operand:SI 2 \"register_operand\" \"r\")] 194))]\n+  \"TARGET_ALTIVEC\"\n+  \"lvsl %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+(define_insn \"altivec_lvsr\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+\t(unspec:V16QI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t       (match_operand:SI 2 \"register_operand\" \"r\")] 195))]\n+  \"TARGET_ALTIVEC\"\n+  \"lvsr %0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")])"}]}