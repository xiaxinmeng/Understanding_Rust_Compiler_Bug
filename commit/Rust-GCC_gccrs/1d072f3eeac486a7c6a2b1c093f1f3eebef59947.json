{"sha": "1d072f3eeac486a7c6a2b1c093f1f3eebef59947", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQwNzJmM2VlYWM0ODZhN2M2YTJiMWMwOTNmMWYzZWViZWY1OTk0Nw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-04-24T08:17:06Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-04-24T12:47:31Z"}, "message": "coroutines, testsuite: Add test for fixed pr [PR94288]\n\nThis is a version of the reproducer in the PR, usable on\nmultiple platforms.", "tree": {"sha": "834228fa4d91c00f0f132987f4b3b6edd9c8d428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/834228fa4d91c00f0f132987f4b3b6edd9c8d428"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d072f3eeac486a7c6a2b1c093f1f3eebef59947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d072f3eeac486a7c6a2b1c093f1f3eebef59947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d072f3eeac486a7c6a2b1c093f1f3eebef59947", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d072f3eeac486a7c6a2b1c093f1f3eebef59947/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3685c5adf5c0b30268cb8f95c89e4c4a3240ae6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3685c5adf5c0b30268cb8f95c89e4c4a3240ae6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3685c5adf5c0b30268cb8f95c89e4c4a3240ae6f"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "33edc25076d966d0b1e90b48ff69bf90ca8628a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d072f3eeac486a7c6a2b1c093f1f3eebef59947/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d072f3eeac486a7c6a2b1c093f1f3eebef59947/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d072f3eeac486a7c6a2b1c093f1f3eebef59947", "patch": "@@ -1,3 +1,8 @@\n+2020-04-24 Iain Sandoe <iain@sandoe.co.uk>\n+\n+\tPR c++/94288\n+\t* g++.dg/coroutines/pr94288.C: New test.\n+\n 2020-04-24  Alexandre Oliva <oliva@adacore.com>\n \n \t* lib/target-supports.exp (check_effective_target_fileio): New."}, {"sha": "2557e3e0f2bb133688d0247dbd5043dadb6cfda1", "filename": "gcc/testsuite/g++.dg/coroutines/pr94288.C", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d072f3eeac486a7c6a2b1c093f1f3eebef59947/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94288.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d072f3eeac486a7c6a2b1c093f1f3eebef59947/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94288.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94288.C?ref=1d072f3eeac486a7c6a2b1c093f1f3eebef59947", "patch": "@@ -0,0 +1,70 @@\n+//  { dg-additional-options  \"-w\" }\n+\n+#include \"coro.h\"\n+\n+#include <vector>\n+\n+template <typename T> struct promise {\n+  T _value;\n+  coro::coroutine_handle<> _continuation = nullptr;\n+\n+  struct final_awaitable {\n+    bool _has_continuation;\n+    final_awaitable(bool has_continuation)\n+        : _has_continuation(has_continuation) {}\n+\n+    bool await_ready() const noexcept { return !_has_continuation; }\n+\n+    template <typename Promise>\n+    coro::coroutine_handle<>\n+    await_suspend(coro::coroutine_handle<Promise> coro) noexcept {\n+      return coro.promise()._continuation;\n+    }\n+\n+    void await_resume() noexcept {}\n+  };\n+\n+  auto get_return_object() noexcept {\n+    return coro::coroutine_handle<promise>::from_promise(*this);\n+  }\n+\n+  auto initial_suspend() noexcept { return coro::suspend_always(); }\n+\n+  auto final_suspend() noexcept {\n+    return final_awaitable(_continuation != nullptr);\n+  }\n+\n+  void return_value(T value) { _value = value; }\n+\n+  void unhandled_exception() { /*std::terminate();*/ }\n+\n+};\n+\n+template <typename T> struct task {\n+  using promise_type = promise<T>;\n+  coro::coroutine_handle<promise<T>> _handle;\n+\n+  task(coro::coroutine_handle<promise<T>> handle) : _handle(handle) {}\n+\n+  bool await_ready() noexcept { return _handle.done(); }\n+\n+  coro::coroutine_handle<>\n+  await_suspend(coro::coroutine_handle<> handle) noexcept {\n+    _handle.promise()._continuation = handle;\n+    return _handle;\n+  }\n+\n+  T await_resume() noexcept { return _handle.promise()._value; }\n+};\n+\n+task<std::vector<int>> foo()\n+{\n+  co_return std::vector<int>();\n+}\n+\n+task<int> bar()\n+{\n+  while ((co_await foo()).empty()) {\n+  }\n+  co_return 0;\n+}"}]}