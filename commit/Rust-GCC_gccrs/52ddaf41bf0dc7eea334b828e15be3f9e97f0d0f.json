{"sha": "52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJkZGFmNDFiZjBkYzdlZWEzMzRiODI4ZTE1YmUzZjllOTdmMGQwZg==", "commit": {"author": {"name": "Paul Kienzle", "email": "pkienzle@nist.gov", "date": "2004-03-10T09:16:12Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-03-10T09:16:12Z"}, "message": "re PR libstdc++/13450 (std::pow(std::complex<double>(-1.,0.),0.5) yields (NaN,0))\n\n2004-03-10  Paul Kienzle  <pkienzle@nist.gov>\n\t    Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/13450\n\t* include/std/std_complex.h (pow(const complex&, const _Tp&),\n\tpow(const _Tp&, const complex&)): Use cmath pow only when safe.\n\t* testsuite/26_numerics/complex/13450.cc: New.\n\n\t* testsuite/26_numerics/cmath/overloads.C: Rename to overloads.cc.\n\t* testsuite/26_numerics/complex/pow.C: Rename to pow.cc and fix.\n\nFrom-SVN: r79227", "tree": {"sha": "4b71efb5adf002e92b61121c55148848d34fdc3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b71efb5adf002e92b61121c55148848d34fdc3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f/comments", "author": null, "committer": null, "parents": [{"sha": "ecc7568da6e6f2776c123b0021568d73a1ff0a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc7568da6e6f2776c123b0021568d73a1ff0a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecc7568da6e6f2776c123b0021568d73a1ff0a03"}], "stats": {"total": 99, "additions": 92, "deletions": 7}, "files": [{"sha": "265b25a3e71acfc97087781afc29f0dbde8648c1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f", "patch": "@@ -1,6 +1,17 @@\n+2004-03-10  Paul Kienzle  <pkienzle@nist.gov>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/13450\n+\t* include/std/std_complex.h (pow(const complex&, const _Tp&),\n+\tpow(const _Tp&, const complex&)): Use cmath pow only when safe.\n+\t* testsuite/26_numerics/complex/13450.cc: New.\n+\n+\t* testsuite/26_numerics/cmath/overloads.C: Rename to overloads.cc.\n+\t* testsuite/26_numerics/complex/pow.C: Rename to pow.cc and fix.\n+\n 2004-03-10  Jerry Quinn  <jlquinn@optonline.net>\n \n-\tPR 3247\n+\tPR libstdc++/3247\n \t* include/bits/gslice_array.h (gslice_array()): Make public.\n \t(operator=(gslice_array)): Make public.  Implement.\n \t* include/bits/indirect_array.h (indirect_array()): Make public."}, {"sha": "d997867c58865757d64248ae7d7e06169b6eea22", "filename": "libstdc++-v3/include/std/std_complex.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h?ref=52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f", "patch": "@@ -705,7 +705,7 @@ namespace std\n     complex<_Tp>\n     pow(const complex<_Tp>& __x, const _Tp& __y)\n     {\n-      if (__x.imag() == _Tp())\n+      if (__x.imag() == _Tp() && __x.real() > _Tp())\n         return pow(__x.real(), __y);\n \n       complex<_Tp> __t = log(__x);\n@@ -723,9 +723,8 @@ namespace std\n     inline complex<_Tp>\n     pow(const _Tp& __x, const complex<_Tp>& __y)\n     {\n-      return __x == _Tp()\n-        ? _Tp()\n-        : std::polar(pow(__x, __y.real()), __y.imag() * log(__x));\n+      return __x > _Tp() ? polar(pow(__x, __y.real()), __y.imag() * log(__x))\n+\t                 : pow(complex<_Tp>(__x, _Tp()), __y);\n     }\n \n   // 26.2.3  complex specializations"}, {"sha": "4d41a9640b474c19dd77a056ff281ce374476b0f", "filename": "libstdc++-v3/testsuite/26_numerics/cmath/overloads.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2Foverloads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2Foverloads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2Foverloads.cc?ref=52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f", "previous_filename": "libstdc++-v3/testsuite/26_numerics/cmath/overloads.C"}, {"sha": "9df257db599de08869ac3edea9430014a680b628", "filename": "libstdc++-v3/testsuite/26_numerics/complex/13450.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2F13450.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2F13450.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2F13450.cc?ref=52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f", "patch": "@@ -0,0 +1,75 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 26.2.8 complex transcendentals\n+\n+#include <complex>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  void test01_do(T a, T b)\n+  {\n+    using namespace std;\n+    bool test __attribute__((unused)) = true;\n+    typedef complex<T> cplx;\n+\n+    T eps = numeric_limits<T>::epsilon() * 10;\n+    \n+    cplx ref = pow(cplx(a, T()), cplx(b, T()));\n+    cplx res1 = pow(a, cplx(b, T()));\n+    cplx res2 = pow(cplx(a, T()), b);\n+    \n+    VERIFY( abs(ref - res1) < eps );\n+    VERIFY( abs(ref - res2) < eps );\n+    VERIFY( abs(res1 - res2) < eps );\n+  }\n+\n+// libstdc++/13450\n+void test01()\n+{\n+  float f1 = -1.0f;\n+  float f2 = 0.5f;\n+  test01_do(f1, f2);\n+\n+  f1 = -3.2f;\n+  f2 = 1.4f;\n+  test01_do(f1, f2);\n+\n+  double d1 = -1.0;\n+  double d2 = 0.5;\n+  test01_do(d1, d2);\n+\n+  d1 = -3.2;\n+  d2 = 1.4;\n+  test01_do(d1, d2);\n+\n+  long double ld1 = -1.0l;\n+  long double ld2 = 0.5l;\n+  test01_do(ld1, ld2);\n+\n+  ld1 = -3.2l;\n+  ld2 = 1.4l;\n+  test01_do(ld1, ld2);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "58d0fc5909b60c3ea9eb705ce09788b5c1c0ab4a", "filename": "libstdc++-v3/testsuite/26_numerics/complex/pow.cc", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fpow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fpow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fpow.cc?ref=52ddaf41bf0dc7eea334b828e15be3f9e97f0d0f", "patch": "@@ -6,9 +6,9 @@\n \n int main()\n {\n-   std::complex<double> z(0, 1) ;\n+   std::complex<double> z;\n \n-   VERIFY(pow(z, 1.0/3.0) == 0.0);\n+   VERIFY( pow(z, 1.0/3.0) == 0.0 );\n \n    return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/26_numerics/complex/pow.C"}]}