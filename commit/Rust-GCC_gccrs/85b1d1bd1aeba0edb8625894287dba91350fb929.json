{"sha": "85b1d1bd1aeba0edb8625894287dba91350fb929", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODViMWQxYmQxYWViYTBlZGI4NjI1ODk0Mjg3ZGJhOTEzNTBmYjkyOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2009-11-25T19:32:37Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-11-25T19:32:37Z"}, "message": "predicates.md (emms_operation): New predicate.\n\n\t* config/i386/predicates.md (emms_operation): New predicate.\n\t(vzeroupper_operation): Ditto.\n\t(vzeroall_operation): Improve pattern recognition.\n\t* config/i386/sse.md (avx_vzeroupper_rex64): Remove insn pattern.\n\t(avx_vzeroupper): Change insn pattern to expander.\n\t(*avx_vzeroupper): New insn pattern.  Use vzeroupper_operation\n\tpredicate.\n\t(*avx_vzeroall): Remove operands 1 and 2.\n\t* config/i386/mmx.md (mmx_emms): Change insn pattern to expander.\n\t(mmx_femms): Ditto.\n\t(*mmx_emms): New insn pattern.  Use emms_operation predicate.\n\t(*mmx_femms): Ditto.\n\t* config/i386/i386.c (enum ix86_builtins)\n\t<IX86_BUILTIN_VZEROUPPER_REX64>: Remove.\n\t(struct builtin_description) <CODE_FOR_avx_vzeroupper_rex64>:\n\tRemove initailization.\n\t<CODE_FOR_avx_vzeroupper>: Unconditionally initialize here.\n\nFrom-SVN: r154649", "tree": {"sha": "de5cb0022bf5f27ba2fbef2e3ef42138e51f0084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de5cb0022bf5f27ba2fbef2e3ef42138e51f0084"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85b1d1bd1aeba0edb8625894287dba91350fb929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b1d1bd1aeba0edb8625894287dba91350fb929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85b1d1bd1aeba0edb8625894287dba91350fb929", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b1d1bd1aeba0edb8625894287dba91350fb929/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5115f061bf337a8e3474b95615c716b7bb4a9df6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5115f061bf337a8e3474b95615c716b7bb4a9df6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5115f061bf337a8e3474b95615c716b7bb4a9df6"}], "stats": {"total": 253, "additions": 165, "deletions": 88}, "files": [{"sha": "557946011254ebfe57ab2efbaed1cd2929e918b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b1d1bd1aeba0edb8625894287dba91350fb929/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b1d1bd1aeba0edb8625894287dba91350fb929/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85b1d1bd1aeba0edb8625894287dba91350fb929", "patch": "@@ -1,3 +1,23 @@\n+2009-11-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (emms_operation): New predicate.\n+\t(vzeroupper_operation): Ditto.\n+\t(vzeroall_operation): Improve pattern recognition.\n+\t* config/i386/sse.md (avx_vzeroupper_rex64): Remove insn pattern.\n+\t(avx_vzeroupper): Change insn pattern to expander.\n+\t(*avx_vzeroupper): New insn pattern.  Use vzeroupper_operation\n+\tpredicate.\n+\t(*avx_vzeroall): Remove operands 1 and 2.\n+\t* config/i386/mmx.md (mmx_emms): Change insn pattern to expander.\n+\t(mmx_femms): Ditto.\n+\t(*mmx_emms): New insn pattern.  Use emms_operation predicate.\n+\t(*mmx_femms): Ditto.\n+\t* config/i386/i386.c (enum ix86_builtins)\n+\t<IX86_BUILTIN_VZEROUPPER_REX64>: Remove.\n+\t(struct builtin_description) <CODE_FOR_avx_vzeroupper_rex64>:\n+\tRemove initailization.\n+\t<CODE_FOR_avx_vzeroupper>: Unconditionally initialize here.\n+\t\n 2009-11-25  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.md (consttable_4): Handle (high ...)."}, {"sha": "5bce7a4d0dbba4c5672a2b8e759d8ccbde887128", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b1d1bd1aeba0edb8625894287dba91350fb929/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b1d1bd1aeba0edb8625894287dba91350fb929/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=85b1d1bd1aeba0edb8625894287dba91350fb929", "patch": "@@ -20941,7 +20941,6 @@ enum ix86_builtins\n   IX86_BUILTIN_EXTRACTF128SI256,\n   IX86_BUILTIN_VZEROALL,\n   IX86_BUILTIN_VZEROUPPER,\n-  IX86_BUILTIN_VZEROUPPER_REX64,\n   IX86_BUILTIN_VPERMILVARPD,\n   IX86_BUILTIN_VPERMILVARPS,\n   IX86_BUILTIN_VPERMILVARPD256,\n@@ -21465,8 +21464,7 @@ static const struct builtin_description bdesc_special_args[] =\n \n   /* AVX */\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vzeroall, \"__builtin_ia32_vzeroall\", IX86_BUILTIN_VZEROALL, UNKNOWN, (int) VOID_FTYPE_VOID },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vzeroupper, 0, IX86_BUILTIN_VZEROUPPER, UNKNOWN, (int) VOID_FTYPE_VOID },\n-  { OPTION_MASK_ISA_AVX | OPTION_MASK_ISA_64BIT, CODE_FOR_avx_vzeroupper_rex64, 0, IX86_BUILTIN_VZEROUPPER_REX64, UNKNOWN, (int) VOID_FTYPE_VOID },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vzeroupper, \"__builtin_ia32_vzeroupper\", IX86_BUILTIN_VZEROUPPER, UNKNOWN, (int) VOID_FTYPE_VOID },\n \n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vbroadcastss, \"__builtin_ia32_vbroadcastss\", IX86_BUILTIN_VBROADCASTSS, UNKNOWN, (int) V4SF_FTYPE_PCFLOAT },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vbroadcastsd256, \"__builtin_ia32_vbroadcastsd256\", IX86_BUILTIN_VBROADCASTSD256, UNKNOWN, (int) V4DF_FTYPE_PCDOUBLE },\n@@ -22481,12 +22479,6 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin_const (OPTION_MASK_ISA_PCLMUL, \"__builtin_ia32_pclmulqdq128\",\n \t\t     V2DI_FTYPE_V2DI_V2DI_INT, IX86_BUILTIN_PCLMULQDQ128);\n \n-  /* AVX */\n-  def_builtin (OPTION_MASK_ISA_AVX, \"__builtin_ia32_vzeroupper\",\n-\t       VOID_FTYPE_VOID,\n-\t       (TARGET_64BIT ? IX86_BUILTIN_VZEROUPPER_REX64\n-\t\t: IX86_BUILTIN_VZEROUPPER));\n-\n   /* MMX access to the vec_init patterns.  */\n   def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_vec_init_v2si\",\n \t\t     V2SI_FTYPE_INT_INT, IX86_BUILTIN_VEC_INIT_V2SI);"}, {"sha": "83c54b28f3a282f7afb87355eb90dcab0a1cf771", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 56, "deletions": 38, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b1d1bd1aeba0edb8625894287dba91350fb929/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b1d1bd1aeba0edb8625894287dba91350fb929/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=85b1d1bd1aeba0edb8625894287dba91350fb929", "patch": "@@ -1640,48 +1640,66 @@\n   [(set_attr \"type\" \"mmxcvt\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"mmx_emms\"\n-  [(unspec_volatile [(const_int 0)] UNSPECV_EMMS)\n-   (clobber (reg:XF ST0_REG))\n-   (clobber (reg:XF ST1_REG))\n-   (clobber (reg:XF ST2_REG))\n-   (clobber (reg:XF ST3_REG))\n-   (clobber (reg:XF ST4_REG))\n-   (clobber (reg:XF ST5_REG))\n-   (clobber (reg:XF ST6_REG))\n-   (clobber (reg:XF ST7_REG))\n-   (clobber (reg:DI MM0_REG))\n-   (clobber (reg:DI MM1_REG))\n-   (clobber (reg:DI MM2_REG))\n-   (clobber (reg:DI MM3_REG))\n-   (clobber (reg:DI MM4_REG))\n-   (clobber (reg:DI MM5_REG))\n-   (clobber (reg:DI MM6_REG))\n-   (clobber (reg:DI MM7_REG))]\n+(define_expand \"mmx_emms\"\n+  [(match_par_dup 0 [(const_int 0)])]\n+  \"TARGET_MMX\"\n+{\n+  int regno;\n+\n+  operands[0] = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (17));\n+\n+  XVECEXP (operands[0], 0, 0)\n+    = gen_rtx_UNSPEC_VOLATILE (VOIDmode, gen_rtvec (1, const0_rtx),\n+\t\t\t       UNSPECV_EMMS);\n+\n+  for (regno = 0; regno < 8; regno++)\n+    {\n+      XVECEXP (operands[0], 0, regno + 1)\n+\t= gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t   gen_rtx_REG (XFmode, FIRST_STACK_REG + regno));\n+\n+      XVECEXP (operands[0], 0, regno + 9)\n+\t= gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t   gen_rtx_REG (DImode, FIRST_MMX_REG + regno));\n+    }\n+})\n+\n+(define_insn \"*mmx_emms\"\n+  [(match_parallel 0 \"emms_operation\"\n+    [(unspec_volatile [(const_int 0)] UNSPECV_EMMS)])]\n   \"TARGET_MMX\"\n   \"emms\"\n   [(set_attr \"type\" \"mmx\")\n    (set_attr \"modrm\" \"0\")\n-   (set_attr \"memory\" \"unknown\")])\n-\n-(define_insn \"mmx_femms\"\n-  [(unspec_volatile [(const_int 0)] UNSPECV_FEMMS)\n-   (clobber (reg:XF ST0_REG))\n-   (clobber (reg:XF ST1_REG))\n-   (clobber (reg:XF ST2_REG))\n-   (clobber (reg:XF ST3_REG))\n-   (clobber (reg:XF ST4_REG))\n-   (clobber (reg:XF ST5_REG))\n-   (clobber (reg:XF ST6_REG))\n-   (clobber (reg:XF ST7_REG))\n-   (clobber (reg:DI MM0_REG))\n-   (clobber (reg:DI MM1_REG))\n-   (clobber (reg:DI MM2_REG))\n-   (clobber (reg:DI MM3_REG))\n-   (clobber (reg:DI MM4_REG))\n-   (clobber (reg:DI MM5_REG))\n-   (clobber (reg:DI MM6_REG))\n-   (clobber (reg:DI MM7_REG))]\n+   (set_attr \"memory\" \"none\")])\n+\n+(define_expand \"mmx_femms\"\n+  [(match_par_dup 0 [(const_int 0)])]\n+  \"TARGET_3DNOW\"\n+{\n+  int regno;\n+\n+  operands[0] = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (17));\n+\n+  XVECEXP (operands[0], 0, 0)\n+    = gen_rtx_UNSPEC_VOLATILE (VOIDmode, gen_rtvec (1, const0_rtx),\n+\t\t\t       UNSPECV_FEMMS);\n+\n+  for (regno = 0; regno < 8; regno++)\n+    {\n+      XVECEXP (operands[0], 0, regno + 1)\n+\t= gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t   gen_rtx_REG (XFmode, FIRST_STACK_REG + regno));\n+\n+      XVECEXP (operands[0], 0, regno + 9)\n+\t= gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t   gen_rtx_REG (DImode, FIRST_MMX_REG + regno));\n+    }\n+})\n+\n+(define_insn \"*mmx_femms\"\n+  [(match_parallel 0 \"emms_operation\"\n+    [(unspec_volatile [(const_int 0)] UNSPECV_FEMMS)])]\n   \"TARGET_3DNOW\"\n   \"femms\"\n   [(set_attr \"type\" \"mmx\")"}, {"sha": "7200a6a2167059f8aa694b9f634ae4032d984aa1", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 65, "deletions": 2, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b1d1bd1aeba0edb8625894287dba91350fb929/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b1d1bd1aeba0edb8625894287dba91350fb929/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=85b1d1bd1aeba0edb8625894287dba91350fb929", "patch": "@@ -1132,15 +1132,78 @@\n   (and (match_code \"mem\")\n        (match_test \"MEM_ALIGN (op) < GET_MODE_ALIGNMENT (mode)\")))\n \n+;; Return 1 if OP is a emms operation, known to be a PARALLEL.\n+(define_predicate \"emms_operation\"\n+  (match_code \"parallel\")\n+{\n+  unsigned i;\n+\n+  if (XVECLEN (op, 0) != 17)\n+    return 0;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      rtx elt = XVECEXP (op, 0, i+1);\n+\n+      if (GET_CODE (elt) != CLOBBER\n+\t  || GET_CODE (SET_DEST (elt)) != REG\n+\t  || GET_MODE (SET_DEST (elt)) != XFmode\n+\t  || REGNO (SET_DEST (elt)) != FIRST_STACK_REG + i)\n+        return 0;\n+\n+      elt = XVECEXP (op, 0, i+9);\n+\n+      if (GET_CODE (elt) != CLOBBER\n+\t  || GET_CODE (SET_DEST (elt)) != REG\n+\t  || GET_MODE (SET_DEST (elt)) != DImode\n+\t  || REGNO (SET_DEST (elt)) != FIRST_MMX_REG + i)\n+\treturn 0;\n+    }\n+  return 1;\n+})\n+\n ;; Return 1 if OP is a vzeroall operation, known to be a PARALLEL.\n (define_predicate \"vzeroall_operation\"\n   (match_code \"parallel\")\n {\n-  int nregs = TARGET_64BIT ? 16 : 8;\n+  unsigned i, nregs = TARGET_64BIT ? 16 : 8;\n \n-  if (XVECLEN (op, 0) != nregs + 1)\n+  if ((unsigned) XVECLEN (op, 0) != 1 + nregs)\n     return 0;\n \n+  for (i = 0; i < nregs; i++)\n+    {\n+      rtx elt = XVECEXP (op, 0, i+1);\n+\n+      if (GET_CODE (elt) != SET\n+\t  || GET_CODE (SET_DEST (elt)) != REG\n+\t  || GET_MODE (SET_DEST (elt)) != V8SImode\n+\t  || REGNO (SET_DEST (elt)) != SSE_REGNO (i)\n+\t  || SET_SRC (elt) != CONST0_RTX (V8SImode))\n+\treturn 0;\n+    }\n+  return 1;\n+})\n+\n+;; Return 1 if OP is a vzeroupper operation, known to be a PARALLEL.\n+(define_predicate \"vzeroupper_operation\"\n+  (match_code \"parallel\")\n+{\n+  unsigned i, nregs = TARGET_64BIT ? 16 : 8;\n+ \n+  if ((unsigned) XVECLEN (op, 0) != 1 + nregs)\n+    return 0;\n+\n+  for (i = 0; i < nregs; i++)\n+    {\n+      rtx elt = XVECEXP (op, 0, i+1);\n+\n+      if (GET_CODE (elt) != CLOBBER\n+\t  || GET_CODE (SET_DEST (elt)) != REG\n+\t  || GET_MODE (SET_DEST (elt)) != V8SImode\n+\t  || REGNO (SET_DEST (elt)) != SSE_REGNO (i))\n+\treturn 0;\n+    }\n   return 1;\n })\n "}, {"sha": "4944facc63d874d8b72c81021dbc7438d3aa0df7", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 23, "deletions": 39, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b1d1bd1aeba0edb8625894287dba91350fb929/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b1d1bd1aeba0edb8625894287dba91350fb929/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=85b1d1bd1aeba0edb8625894287dba91350fb929", "patch": "@@ -12033,9 +12033,7 @@\n \n (define_insn \"*avx_vzeroall\"\n   [(match_parallel 0 \"vzeroall_operation\"\n-    [(unspec_volatile [(const_int 0)] UNSPECV_VZEROALL)\n-     (set (match_operand 1 \"register_operand\" \"=x\")\n-          (match_operand 2 \"const0_operand\" \"X\"))])]\n+    [(unspec_volatile [(const_int 0)] UNSPECV_VZEROALL)])]\n   \"TARGET_AVX\"\n   \"vzeroall\"\n   [(set_attr \"type\" \"sse\")\n@@ -12045,43 +12043,29 @@\n    (set_attr \"mode\" \"OI\")])\n \n ;; vzeroupper clobbers the upper 128bits of AVX registers.\n-(define_insn \"avx_vzeroupper\"\n-  [(unspec_volatile [(const_int 0)] UNSPECV_VZEROUPPER)\n-   (clobber (reg:V8SI XMM0_REG))\n-   (clobber (reg:V8SI XMM1_REG))\n-   (clobber (reg:V8SI XMM2_REG))\n-   (clobber (reg:V8SI XMM3_REG))\n-   (clobber (reg:V8SI XMM4_REG))\n-   (clobber (reg:V8SI XMM5_REG))\n-   (clobber (reg:V8SI XMM6_REG))\n-   (clobber (reg:V8SI XMM7_REG))]\n-  \"TARGET_AVX && !TARGET_64BIT\"\n-  \"vzeroupper\"\n-  [(set_attr \"type\" \"sse\")\n-   (set_attr \"modrm\" \"0\")\n-   (set_attr \"memory\" \"none\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"OI\")])\n+(define_expand \"avx_vzeroupper\"\n+  [(match_par_dup 0 [(const_int 0)])]\n+  \"TARGET_AVX\"\n+{\n+  int nregs = TARGET_64BIT ? 16 : 8;\n+  int regno;\n \n-(define_insn \"avx_vzeroupper_rex64\"\n-  [(unspec_volatile [(const_int 0)] UNSPECV_VZEROUPPER)\n-   (clobber (reg:V8SI XMM0_REG))\n-   (clobber (reg:V8SI XMM1_REG))\n-   (clobber (reg:V8SI XMM2_REG))\n-   (clobber (reg:V8SI XMM3_REG))\n-   (clobber (reg:V8SI XMM4_REG))\n-   (clobber (reg:V8SI XMM5_REG))\n-   (clobber (reg:V8SI XMM6_REG))\n-   (clobber (reg:V8SI XMM7_REG))\n-   (clobber (reg:V8SI XMM8_REG))\n-   (clobber (reg:V8SI XMM9_REG))\n-   (clobber (reg:V8SI XMM10_REG))\n-   (clobber (reg:V8SI XMM11_REG))\n-   (clobber (reg:V8SI XMM12_REG))\n-   (clobber (reg:V8SI XMM13_REG))\n-   (clobber (reg:V8SI XMM14_REG))\n-   (clobber (reg:V8SI XMM15_REG))]\n-  \"TARGET_AVX && TARGET_64BIT\"\n+  operands[0] = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (nregs + 1));\n+\n+  XVECEXP (operands[0], 0, 0)\n+    = gen_rtx_UNSPEC_VOLATILE (VOIDmode, gen_rtvec (1, const0_rtx),\n+\t\t\t       UNSPECV_VZEROUPPER);\n+\n+  for (regno = 0; regno < nregs; regno++)\n+    XVECEXP (operands[0], 0, regno + 1)\n+      = gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t gen_rtx_REG (V8SImode, SSE_REGNO (regno)));\n+})\n+\n+(define_insn \"*avx_vzeroupper\"\n+  [(match_parallel 0 \"vzeroupper_operation\"\n+    [(unspec_volatile [(const_int 0)] UNSPECV_VZEROUPPER)])]\n+  \"TARGET_AVX\"\n   \"vzeroupper\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"modrm\" \"0\")"}]}