{"sha": "d822f4bbd714c6595f70cc68888dcebecfb6662d", "node_id": "C_kwDOANBUbNoAKGQ4MjJmNGJiZDcxNGM2NTk1ZjcwY2M2ODg4OGRjZWJlY2ZiNjY2MmQ", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-05-27T14:51:30Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-05-27T16:01:51Z"}, "message": "c++: Fix ICE with -Wmismatched-tags [PR105725]\n\nHere we ICE with -Wmismatched-tags on something like\n\n  template <class T>\n  bool B<T, enable_if_t<is_class_v<class T::foo>>>;\n\nSpecifically, the \"class T::foo\" bit.  There, class_decl_loc_t::add gets\na TYPENAME_TYPE as TYPE, rather than a class/union type, so checking\nTYPE_BEING_DEFINED will crash.  I think it's OK to allow a TYPENAME_TYPE to\nslip into that function; we just shouldn't consider the 'class' tag redundant\n(which works as a 'typename').  In fact, every other compiler *requires* it.\n\n\tPR c++/105725\n\ngcc/cp/ChangeLog:\n\n\t* parser.cc (class_decl_loc_t::add): Check CLASS_TYPE_P.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Wmismatched-tags-10.C: New test.", "tree": {"sha": "160001393e90df8bce2b1930c7ebe8bc495d6360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/160001393e90df8bce2b1930c7ebe8bc495d6360"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d822f4bbd714c6595f70cc68888dcebecfb6662d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d822f4bbd714c6595f70cc68888dcebecfb6662d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d822f4bbd714c6595f70cc68888dcebecfb6662d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d822f4bbd714c6595f70cc68888dcebecfb6662d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca4b95069ca7dbf0be3a5aae053631e7a1b20103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4b95069ca7dbf0be3a5aae053631e7a1b20103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca4b95069ca7dbf0be3a5aae053631e7a1b20103"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "9a9f859974a0c6bfcd478b370ad106778df8e2d4", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d822f4bbd714c6595f70cc68888dcebecfb6662d/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d822f4bbd714c6595f70cc68888dcebecfb6662d/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=d822f4bbd714c6595f70cc68888dcebecfb6662d", "patch": "@@ -33666,7 +33666,8 @@ class_decl_loc_t::add (cp_parser *parser, location_t key_loc,\n   bool key_redundant = (!def_p && !decl_p\n \t\t\t&& (decl == type_decl\n \t\t\t    || TREE_CODE (decl) == TEMPLATE_DECL\n-\t\t\t    || TYPE_BEING_DEFINED (type)));\n+\t\t\t    || (CLASS_TYPE_P (type)\n+\t\t\t\t&& TYPE_BEING_DEFINED (type))));\n \n   if (key_redundant\n       && class_key != class_type\n@@ -33704,7 +33705,7 @@ class_decl_loc_t::add (cp_parser *parser, location_t key_loc,\n \t}\n       else\n \t{\n-\t  /* TYPE was previously defined in some unknown precompiled hdeader.\n+\t  /* TYPE was previously defined in some unknown precompiled header.\n \t     Simply add a record of its definition at an unknown location and\n \t     proceed below to add a reference to it at the current location.\n \t     (Declarations in precompiled headers that are not definitions"}, {"sha": "d7e10743bb44afd7c405b7d430ed4e7d8eeb4a7b", "filename": "gcc/testsuite/g++.dg/warn/Wmismatched-tags-10.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d822f4bbd714c6595f70cc68888dcebecfb6662d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-tags-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d822f4bbd714c6595f70cc68888dcebecfb6662d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-tags-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-tags-10.C?ref=d822f4bbd714c6595f70cc68888dcebecfb6662d", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/105725\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-Wall -Wmismatched-tags\" }\n+\n+template <bool> struct enable_if;\n+template <bool Cond> using enable_if_t = typename enable_if<Cond>::type;\n+template <typename> bool is_class_v;\n+template <class, class> bool B;\n+template <class T>\n+bool B<T, enable_if_t<is_class_v<class T::foo>>>;"}]}