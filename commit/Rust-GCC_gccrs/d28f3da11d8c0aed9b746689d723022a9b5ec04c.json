{"sha": "d28f3da11d8c0aed9b746689d723022a9b5ec04c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI4ZjNkYTExZDhjMGFlZDliNzQ2Njg5ZDcyMzAyMmE5YjVlYzA0Yw==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2021-01-21T14:54:54Z"}, "committer": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2021-02-17T14:13:55Z"}, "message": "openacc: Fix lowering for derived-type mappings through array elements\n\nThis patch fixes lowering of derived-type mappings which select elements\nof arrays of derived types, and similar. These would previously lead\nto ICEs.\n\nWith this change, OpenACC directives can pass through constructs that\nare no longer recognized by the gimplifier, hence alterations are needed\nthere also.\n\ngcc/fortran/\n\t* trans-openmp.c (gfc_trans_omp_clauses): Handle element selection\n\tfor arrays of derived types.\n\ngcc/\n\t* gimplify.c (gimplify_scan_omp_clauses): Handle ATTACH_DETACH\n\tfor non-decls.\n\ngcc/testsuite/\n\t* gfortran.dg/goacc/array-with-dt-1.f90: New test.\n\t* gfortran.dg/goacc/array-with-dt-3.f90: Likewise.\n\t* gfortran.dg/goacc/array-with-dt-4.f90: Likewise.\n\t* gfortran.dg/goacc/array-with-dt-5.f90: Likewise.\n\t* gfortran.dg/goacc/derived-chartypes-1.f90: Re-enable test.\n\t* gfortran.dg/goacc/derived-chartypes-2.f90: Likewise.\n\t* gfortran.dg/goacc/derived-classtypes-1.f95: Uncomment\n\tpreviously-broken directives.\n\nlibgomp/\n\t* testsuite/libgomp.oacc-fortran/derivedtypes-arrays-1.f90: New test.\n\t* testsuite/libgomp.oacc-fortran/update-dt-array.f90: Likewise.", "tree": {"sha": "be418cc1b24ed10a5a1c516f2a2368cbcff5bae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be418cc1b24ed10a5a1c516f2a2368cbcff5bae7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d28f3da11d8c0aed9b746689d723022a9b5ec04c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d28f3da11d8c0aed9b746689d723022a9b5ec04c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d28f3da11d8c0aed9b746689d723022a9b5ec04c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d28f3da11d8c0aed9b746689d723022a9b5ec04c/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7768cadb4246117964a9ba159740da3b9c20811d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7768cadb4246117964a9ba159740da3b9c20811d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7768cadb4246117964a9ba159740da3b9c20811d"}], "stats": {"total": 435, "additions": 344, "deletions": 91}, "files": [{"sha": "67e370f8b57779efe3cbdfa8f4865a92057675ae", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 111, "deletions": 81, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=d28f3da11d8c0aed9b746689d723022a9b5ec04c", "patch": "@@ -2675,6 +2675,32 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t      tree decl = gfc_trans_omp_variable (n->sym, false);\n \t      if (DECL_P (decl))\n \t\tTREE_ADDRESSABLE (decl) = 1;\n+\n+\t      gfc_ref *lastref = NULL;\n+\n+\t      if (n->expr)\n+\t\tfor (gfc_ref *ref = n->expr->ref; ref; ref = ref->next)\n+\t\t  if (ref->type == REF_COMPONENT || ref->type == REF_ARRAY)\n+\t\t    lastref = ref;\n+\n+\t      bool allocatable = false, pointer = false;\n+\n+\t      if (lastref && lastref->type == REF_COMPONENT)\n+\t\t{\n+\t\t  gfc_component *c = lastref->u.c.component;\n+\n+\t\t  if (c->ts.type == BT_CLASS)\n+\t\t    {\n+\t\t      pointer = CLASS_DATA (c)->attr.class_pointer;\n+\t\t      allocatable = CLASS_DATA (c)->attr.allocatable;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      pointer = c->attr.pointer;\n+\t\t      allocatable = c->attr.allocatable;\n+\t\t    }\n+\t\t}\n+\n \t      if (n->expr == NULL\n \t\t  || (n->expr->ref->type == REF_ARRAY\n \t\t      && n->expr->ref->u.ar.type == AR_FULL))\n@@ -2911,74 +2937,79 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t}\n \t      else if (n->expr\n \t\t       && n->expr->expr_type == EXPR_VARIABLE\n-\t\t       && n->expr->ref->type == REF_COMPONENT)\n+\t\t       && n->expr->ref->type == REF_ARRAY\n+\t\t       && !n->expr->ref->next)\n \t\t{\n-\t\t  gfc_ref *lastcomp;\n-\n-\t\t  for (gfc_ref *ref = n->expr->ref; ref; ref = ref->next)\n-\t\t    if (ref->type == REF_COMPONENT)\n-\t\t      lastcomp = ref;\n-\n-\t\t  symbol_attribute sym_attr;\n-\n-\t\t  if (lastcomp->u.c.component->ts.type == BT_CLASS)\n-\t\t    sym_attr = CLASS_DATA (lastcomp->u.c.component)->attr;\n-\t\t  else\n-\t\t    sym_attr = lastcomp->u.c.component->attr;\n-\n+\t\t  /* An array element or array section which is not part of a\n+\t\t     derived type, etc.  */\n+\t\t  bool element = n->expr->ref->u.ar.type == AR_ELEMENT;\n+\t\t  gfc_trans_omp_array_section (block, n, decl, element,\n+\t\t\t\t\t       GOMP_MAP_POINTER, node, node2,\n+\t\t\t\t\t       node3, node4);\n+\t\t}\n+\t      else if (n->expr\n+\t\t       && n->expr->expr_type == EXPR_VARIABLE\n+\t\t       && (n->expr->ref->type == REF_COMPONENT\n+\t\t\t   || n->expr->ref->type == REF_ARRAY)\n+\t\t       && lastref\n+\t\t       && lastref->type == REF_COMPONENT\n+\t\t       && lastref->u.c.component->ts.type != BT_CLASS\n+\t\t       && lastref->u.c.component->ts.type != BT_DERIVED\n+\t\t       && !lastref->u.c.component->attr.dimension)\n+\t\t{\n+\t\t  /* Derived type access with last component being a scalar.  */\n \t\t  gfc_init_se (&se, NULL);\n \n-\t\t  if (!sym_attr.dimension\n-\t\t      && lastcomp->u.c.component->ts.type != BT_CLASS\n-\t\t      && lastcomp->u.c.component->ts.type != BT_DERIVED)\n+\t\t  gfc_conv_expr (&se, n->expr);\n+\t\t  gfc_add_block_to_block (block, &se.pre);\n+\t\t  /* For BT_CHARACTER a pointer is returned.  */\n+\t\t  OMP_CLAUSE_DECL (node)\n+\t\t    = POINTER_TYPE_P (TREE_TYPE (se.expr))\n+\t\t      ? build_fold_indirect_ref (se.expr) : se.expr;\n+\t\t  gfc_add_block_to_block (block, &se.post);\n+\t\t  if (pointer || allocatable)\n \t\t    {\n-\t\t      /* Last component is a scalar.  */\n-\t\t      gfc_conv_expr (&se, n->expr);\n-\t\t      gfc_add_block_to_block (block, &se.pre);\n-\t\t      /* For BT_CHARACTER a pointer is returned.  */\n-\t\t      OMP_CLAUSE_DECL (node)\n+\t\t      node2 = build_omp_clause (input_location,\n+\t\t\t\t\t\tOMP_CLAUSE_MAP);\n+\t\t      gomp_map_kind kind\n+\t\t\t= (openacc ? GOMP_MAP_ATTACH_DETACH\n+\t\t\t\t   : GOMP_MAP_ALWAYS_POINTER);\n+\t\t      OMP_CLAUSE_SET_MAP_KIND (node2, kind);\n+\t\t      OMP_CLAUSE_DECL (node2)\n \t\t\t= POINTER_TYPE_P (TREE_TYPE (se.expr))\n-\t\t\t  ? build_fold_indirect_ref (se.expr) : se.expr;\n-\t\t      gfc_add_block_to_block (block, &se.post);\n-\t\t      if (sym_attr.pointer || sym_attr.allocatable)\n+\t\t\t  ? se.expr\n+\t\t\t  : gfc_build_addr_expr (NULL, se.expr);\n+\t\t      OMP_CLAUSE_SIZE (node2) = size_int (0);\n+\t\t      if (!openacc\n+\t\t\t  && n->expr->ts.type == BT_CHARACTER\n+\t\t\t  && n->expr->ts.deferred)\n \t\t\t{\n-\t\t\t  node2 = build_omp_clause (input_location,\n+\t\t\t  gcc_assert (se.string_length);\n+\t\t\t  tree tmp\n+\t\t\t    = gfc_get_char_type (n->expr->ts.kind);\n+\t\t\t  OMP_CLAUSE_SIZE (node)\n+\t\t\t    = fold_build2 (MULT_EXPR, size_type_node,\n+\t\t\t\t\t   fold_convert (size_type_node,\n+\t\t\t\t\t       se.string_length),\n+\t\t\t\t\t   TYPE_SIZE_UNIT (tmp));\n+\t\t\t  node3 = build_omp_clause (input_location,\n \t\t\t\t\t\t    OMP_CLAUSE_MAP);\n-\t\t\t  OMP_CLAUSE_SET_MAP_KIND (node2,\n-\t\t\t\t\t\t   openacc\n-\t\t\t\t\t\t   ? GOMP_MAP_ATTACH_DETACH\n-\t\t\t\t\t\t   : GOMP_MAP_ALWAYS_POINTER);\n-\t\t\t  OMP_CLAUSE_DECL (node2)\n-\t\t\t    = POINTER_TYPE_P (TREE_TYPE (se.expr))\n-\t\t\t      ? se.expr :  gfc_build_addr_expr (NULL, se.expr);\n-\t\t\t  OMP_CLAUSE_SIZE (node2) = size_int (0);\n-\t\t\t  if (!openacc\n-\t\t\t      && n->expr->ts.type == BT_CHARACTER\n-\t\t\t      && n->expr->ts.deferred)\n-\t\t\t    {\n-\t\t\t      gcc_assert (se.string_length);\n-\t\t\t      tree tmp = gfc_get_char_type (n->expr->ts.kind);\n-\t\t\t      OMP_CLAUSE_SIZE (node)\n-\t\t\t\t= fold_build2 (MULT_EXPR, size_type_node,\n-\t\t\t\t\t       fold_convert (size_type_node,\n-\t\t\t\t\t\t\t     se.string_length),\n-\t\t\t\t\t       TYPE_SIZE_UNIT (tmp));\n-\t\t\t      node3 = build_omp_clause (input_location,\n-\t\t\t\t\t\t\tOMP_CLAUSE_MAP);\n-\t\t\t      OMP_CLAUSE_SET_MAP_KIND (node3, GOMP_MAP_TO);\n-\t\t\t      OMP_CLAUSE_DECL (node3) = se.string_length;\n-\t\t\t      OMP_CLAUSE_SIZE (node3)\n-\t\t\t\t= TYPE_SIZE_UNIT (gfc_charlen_type_node);\n-\t\t\t    }\n+\t\t\t  OMP_CLAUSE_SET_MAP_KIND (node3, GOMP_MAP_TO);\n+\t\t\t  OMP_CLAUSE_DECL (node3) = se.string_length;\n+\t\t\t  OMP_CLAUSE_SIZE (node3)\n+\t\t\t    = TYPE_SIZE_UNIT (gfc_charlen_type_node);\n \t\t\t}\n-\t\t      goto finalize_map_clause;\n \t\t    }\n-\n+\t\t}\n+\t      else if (n->expr\n+\t\t       && n->expr->expr_type == EXPR_VARIABLE\n+\t\t       && (n->expr->ref->type == REF_COMPONENT\n+\t\t\t   || n->expr->ref->type == REF_ARRAY))\n+\t\t{\n+\t\t  gfc_init_se (&se, NULL);\n \t\t  se.expr = gfc_maybe_dereference_var (n->sym, decl);\n \n-\t\t  for (gfc_ref *ref = n->expr->ref;\n-\t\t       ref && ref != lastcomp->next;\n-\t\t       ref = ref->next)\n+\t\t  for (gfc_ref *ref = n->expr->ref; ref; ref = ref->next)\n \t\t    {\n \t\t      if (ref->type == REF_COMPONENT)\n \t\t\t{\n@@ -2987,24 +3018,30 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \n \t\t\t  gfc_conv_component_ref (&se, ref);\n \t\t\t}\n+\t\t      else if (ref->type == REF_ARRAY)\n+\t\t\t{\n+\t\t\t  if (ref->u.ar.type == AR_ELEMENT && ref->next)\n+\t\t\t    gfc_conv_array_ref (&se, &ref->u.ar, n->expr,\n+\t\t\t\t\t\t&n->expr->where);\n+\t\t\t  else\n+\t\t\t    gcc_assert (!ref->next);\n+\t\t\t}\n \t\t      else\n-\t\t\tsorry (\"unhandled derived-type component\");\n+\t\t\tsorry (\"unhandled expression type\");\n \t\t    }\n \n \t\t  tree inner = se.expr;\n \n \t\t  /* Last component is a derived type or class pointer.  */\n-\t\t  if (lastcomp->u.c.component->ts.type == BT_DERIVED\n-\t\t      || lastcomp->u.c.component->ts.type == BT_CLASS)\n+\t\t  if (lastref->type == REF_COMPONENT\n+\t\t      && (lastref->u.c.component->ts.type == BT_DERIVED\n+\t\t\t  || lastref->u.c.component->ts.type == BT_CLASS))\n \t\t    {\n-\t\t      bool pointer\n-\t\t\t= (lastcomp->u.c.component->ts.type == BT_CLASS\n-\t\t\t   ? sym_attr.class_pointer : sym_attr.pointer);\n-\t\t      if (pointer || (openacc && sym_attr.allocatable))\n+\t\t      if (pointer || (openacc && allocatable))\n \t\t\t{\n \t\t\t  tree data, size;\n \n-\t\t\t  if (lastcomp->u.c.component->ts.type == BT_CLASS)\n+\t\t\t  if (lastref->u.c.component->ts.type == BT_CLASS)\n \t\t\t    {\n \t\t\t      data = gfc_class_data_get (inner);\n \t\t\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (data)));\n@@ -3035,9 +3072,8 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t\t    = TYPE_SIZE_UNIT (TREE_TYPE (inner));\n \t\t\t}\n \t\t    }\n-\t\t  else if (lastcomp->next\n-\t\t\t   && lastcomp->next->type == REF_ARRAY\n-\t\t\t   && lastcomp->next->u.ar.type == AR_FULL)\n+\t\t  else if (lastref->type == REF_ARRAY\n+\t\t\t   && lastref->u.ar.type == AR_FULL)\n \t\t    {\n \t\t      /* Just pass the (auto-dereferenced) decl through for\n \t\t\t bare attach and detach clauses.  */\n@@ -3131,27 +3167,21 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t      else\n \t\t\tOMP_CLAUSE_DECL (node) = inner;\n \t\t    }\n-\t\t  else  /* An array element or section.  */\n+\t\t  else if (lastref->type == REF_ARRAY)\n \t\t    {\n-\t\t      bool element\n-\t\t\t= (lastcomp->next\n-\t\t\t   && lastcomp->next->type == REF_ARRAY\n-\t\t\t   && lastcomp->next->u.ar.type == AR_ELEMENT);\n-\n+\t\t      /* An array element or section.  */\n+\t\t      bool element = lastref->u.ar.type == AR_ELEMENT;\n \t\t      gomp_map_kind kind = (openacc ? GOMP_MAP_ATTACH_DETACH\n \t\t\t\t\t\t    : GOMP_MAP_ALWAYS_POINTER);\n \t\t      gfc_trans_omp_array_section (block, n, inner, element,\n \t\t\t\t\t\t   kind, node, node2, node3,\n \t\t\t\t\t\t   node4);\n \t\t    }\n+\t\t  else\n+\t\t    gcc_unreachable ();\n \t\t}\n-\t      else  /* An array element or array section.  */\n-\t\t{\n-\t\t  bool element = n->expr->ref->u.ar.type == AR_ELEMENT;\n-\t\t  gfc_trans_omp_array_section (block, n, decl, element,\n-\t\t\t\t\t       GOMP_MAP_POINTER, node, node2,\n-\t\t\t\t\t       node3, node4);\n-\t\t}\n+\t      else\n+\t\tsorry (\"unhandled expression\");\n \n \t      finalize_map_clause:\n "}, {"sha": "caf25ccdd5c7abdf60dc7adc3de0197cf90dd637", "filename": "gcc/gimplify.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=d28f3da11d8c0aed9b746689d723022a9b5ec04c", "patch": "@@ -9413,6 +9413,18 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\t\t}\n \t\t    }\n \t\t}\n+\t      else if ((code == OACC_ENTER_DATA\n+\t\t\t|| code == OACC_EXIT_DATA\n+\t\t\t|| code == OACC_DATA\n+\t\t\t|| code == OACC_PARALLEL\n+\t\t\t|| code == OACC_KERNELS\n+\t\t\t|| code == OACC_SERIAL)\n+\t\t       && OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_ATTACH_DETACH)\n+\t\t{\n+\t\t  gomp_map_kind k = (code == OACC_EXIT_DATA\n+\t\t\t\t     ? GOMP_MAP_DETACH : GOMP_MAP_ATTACH);\n+\t\t  OMP_CLAUSE_SET_MAP_KIND (c, k);\n+\t\t}\n \n \t      if (gimplify_expr (pd, pre_p, NULL, is_gimple_lvalue, fb_lvalue)\n \t\t  == GS_ERROR)"}, {"sha": "4a3ff0ef3a75f128fc22d302b28fdfd1f8a6ecc0", "filename": "gcc/testsuite/gfortran.dg/goacc/array-with-dt-1.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-1.f90?ref=d28f3da11d8c0aed9b746689d723022a9b5ec04c", "patch": "@@ -0,0 +1,11 @@\n+type t\n+   integer, allocatable :: A(:,:)\n+end type t\n+\n+type(t), allocatable :: b(:)\n+\n+!$acc update host(b)\n+!$acc update host(b(:))\n+!$acc update host(b(1)%A)\n+!$acc update host(b(1)%A(:,:))\n+end"}, {"sha": "dcb63657f2bb9ec3e43c4aace2e3bec099cd09a2", "filename": "gcc/testsuite/gfortran.dg/goacc/array-with-dt-3.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-3.f90?ref=d28f3da11d8c0aed9b746689d723022a9b5ec04c", "patch": "@@ -0,0 +1,14 @@\n+type t2\n+   integer :: A(200,200)\n+end type t2\n+type t\n+   integer, allocatable :: A(:,:)\n+end type t\n+\n+type(t2),allocatable :: c(:)\n+type(t), allocatable :: d(:)\n+\n+!$acc exit data delete(c(1)%A)\n+!$acc exit data delete(d(1)%A)\n+\n+end"}, {"sha": "637d5f57e1c1d8f1d91c0dfd0d1c6c9c08441e5b", "filename": "gcc/testsuite/gfortran.dg/goacc/array-with-dt-4.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-4.f90?ref=d28f3da11d8c0aed9b746689d723022a9b5ec04c", "patch": "@@ -0,0 +1,18 @@\n+type t4\n+  integer, allocatable :: quux(:)\n+end type t4\n+type t3\n+  type(t4), pointer :: qux(:)\n+end type t3\n+type t2\n+  type(t3), allocatable :: bar(:)\n+end type t2\n+type t\n+  type(t2), allocatable :: foo(:)\n+end type t\n+\n+type(t), allocatable :: c(:)\n+\n+!$acc enter data copyin(c(5)%foo(4)%bar(3)%qux(2)%quux(:))\n+!$acc exit data delete(c(5)%foo(4)%bar(3)%qux(2)%quux(:))\n+end"}, {"sha": "900587b7eaf691800c15dc387475bc7691990472", "filename": "gcc/testsuite/gfortran.dg/goacc/array-with-dt-5.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Farray-with-dt-5.f90?ref=d28f3da11d8c0aed9b746689d723022a9b5ec04c", "patch": "@@ -0,0 +1,12 @@\n+type t2\n+  integer :: bar\n+end type t2\n+type t\n+  type(t2), pointer :: foo\n+end type t\n+\n+type(t) :: c\n+\n+!$acc enter data copyin(c%foo)\n+\n+end"}, {"sha": "e4d360e1262b3988d18247d435f46b79762d5d66", "filename": "gcc/testsuite/gfortran.dg/goacc/derived-chartypes-1.f90", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-1.f90?ref=d28f3da11d8c0aed9b746689d723022a9b5ec04c", "patch": "@@ -1,6 +1,3 @@\n-! This currently ICEs. Avoid that.\n-! { dg-skip-if \"PR98979\" { *-*-* } }\n-\n type :: type1\n   character(len=35) :: a\n end type type1"}, {"sha": "cca6443e7fcf5bf0ba957c3fb97a18ca2956839e", "filename": "gcc/testsuite/gfortran.dg/goacc/derived-chartypes-2.f90", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-chartypes-2.f90?ref=d28f3da11d8c0aed9b746689d723022a9b5ec04c", "patch": "@@ -1,6 +1,3 @@\n-! This currently ICEs. Avoid that.\n-! { dg-skip-if \"PR98979\" { *-*-* } }\n-\n type :: type1\n   character(len=35,kind=4) :: a\n end type type1"}, {"sha": "85a2e1d373d0758eb35ae1a1b8ac7933d74c7858", "filename": "gcc/testsuite/gfortran.dg/goacc/derived-classtypes-1.f95", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-classtypes-1.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28f3da11d8c0aed9b746689d723022a9b5ec04c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-classtypes-1.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fderived-classtypes-1.f95?ref=d28f3da11d8c0aed9b746689d723022a9b5ec04c", "patch": "@@ -71,7 +71,7 @@\n !$acc enter data copyin(bar)\n !$acc enter data copyin(bar%b)\n !$acc enter data copyin(qux)\n-!!$acc enter data copyin(qux%c)\n+!$acc enter data copyin(qux%c)\n !$acc enter data copyin(quux)\n !$acc enter data copyin(quux%d)\n !$acc enter data copyin(fred)\n@@ -86,7 +86,7 @@\n !$acc enter data copyin(pbar)\n !$acc enter data copyin(pbar%b)\n !$acc enter data copyin(pqux)\n-!!$acc enter data copyin(pqux%c)\n+!$acc enter data copyin(pqux%c)\n !$acc enter data copyin(pquux)\n !$acc enter data copyin(pquux%d)\n !$acc enter data copyin(pfred)\n@@ -101,7 +101,7 @@\n !$acc enter data copyin(cbar)\n !$acc enter data copyin(cbar%b)\n !$acc enter data copyin(cqux)\n-!!$acc enter data copyin(cqux%c)\n+!$acc enter data copyin(cqux%c)\n !$acc enter data copyin(cquux)\n !$acc enter data copyin(cquux%d)\n !$acc enter data copyin(cfred)\n@@ -116,7 +116,7 @@\n !$acc enter data copyin(acbar)\n !$acc enter data copyin(acbar%b)\n !$acc enter data copyin(acqux)\n-!!$acc enter data copyin(acqux%c)\n+!$acc enter data copyin(acqux%c)\n !$acc enter data copyin(acquux)\n !$acc enter data copyin(acquux%d)\n !$acc enter data copyin(acfred)"}, {"sha": "644ad1f6b2fc9a2591e265f1a5bca2e493483ac0", "filename": "libgomp/testsuite/libgomp.oacc-fortran/derivedtypes-arrays-1.f90", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28f3da11d8c0aed9b746689d723022a9b5ec04c/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderivedtypes-arrays-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28f3da11d8c0aed9b746689d723022a9b5ec04c/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderivedtypes-arrays-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderivedtypes-arrays-1.f90?ref=d28f3da11d8c0aed9b746689d723022a9b5ec04c", "patch": "@@ -0,0 +1,109 @@\n+! { dg-do run }\n+\n+type type1\n+  integer, allocatable :: arr1(:,:)\n+end type type1\n+\n+type type2\n+  type(type1) :: t1\n+end type type2\n+\n+type type3\n+  type(type2) :: t2(20)\n+end type type3\n+\n+type type4\n+  type(type3), allocatable :: t3(:)\n+end type type4\n+\n+integer :: i, j, k\n+\n+type(type4), allocatable :: var1(:)\n+type(type4) :: var2\n+type(type3) :: var3\n+\n+allocate(var1(1:20))\n+do i=1,20\n+  allocate(var1(i)%t3(1:20))\n+  do j=1,20\n+    do k=1,20\n+      allocate(var1(i)%t3(j)%t2(k)%t1%arr1(1:20,1:20))\n+    end do\n+  end do\n+end do\n+\n+allocate(var2%t3(1:20))\n+do i=1,20\n+  do j=1,20\n+    allocate(var2%t3(i)%t2(j)%t1%arr1(1:20,1:20))\n+  end do\n+end do\n+\n+do i=1,20\n+  do j=1,20\n+    do k=1,20\n+      var1(i)%t3(j)%t2(k)%t1%arr1(:,:) = 0\n+    end do\n+    var2%t3(i)%t2(j)%t1%arr1(:,:) = 0\n+  end do\n+end do\n+\n+!$acc enter data copyin(var2%t3(4)%t2(3)%t1%arr1(:,:))\n+!$acc enter data copyin(var1(5)%t3(4)%t2(3)%t1%arr1(:,:))\n+\n+var2%t3(4)%t2(3)%t1%arr1(:,:) = 5\n+var1(5)%t3(4)%t2(3)%t1%arr1(:,:) = 4\n+\n+!$acc update device(var2%t3(4)%t2(3)%t1%arr1)\n+!$acc update device(var1(5)%t3(4)%t2(3)%t1%arr1)\n+\n+!$acc exit data copyout(var1(5)%t3(4)%t2(3)%t1%arr1(:,:))\n+!$acc exit data copyout(var2%t3(4)%t2(3)%t1%arr1(:,:))\n+\n+do i=1,20\n+  do j=1,20\n+    do k=1,20\n+      if (i.eq.5 .and. j.eq.4 .and. k.eq.3) then\n+        if (any(var1(i)%t3(j)%t2(k)%t1%arr1 .ne. 4)) stop 1\n+      else\n+        if (any(var1(i)%t3(j)%t2(k)%t1%arr1 .ne. 0)) stop 2\n+      end if\n+    end do\n+    if (i.eq.4 .and. j.eq.3) then\n+      if (any(var2%t3(i)%t2(j)%t1%arr1 .ne. 5)) stop 3\n+    else\n+      if (any(var2%t3(i)%t2(j)%t1%arr1 .ne. 0)) stop 4\n+    end if\n+  end do\n+end do\n+\n+do i=1,20\n+  allocate(var3%t2(i)%t1%arr1(1:20, 1:20))\n+  var3%t2(i)%t1%arr1(:,:) = 0\n+end do\n+\n+!$acc enter data copyin(var3)\n+!$acc enter data copyin(var3%t2(:))\n+!$acc enter data copyin(var3%t2(5)%t1)\n+!$acc data copyin(var3%t2(5)%t1%arr1)\n+\n+!$acc serial present(var3%t2(5)%t1%arr1)\n+var3%t2(5)%t1%arr1(:,:) = 6\n+!$acc end serial\n+\n+!$acc update host(var3%t2(5)%t1%arr1)\n+\n+!$acc end data\n+!$acc exit data delete(var3%t2(5)%t1)\n+!$acc exit data delete(var3%t2)\n+!$acc exit data delete(var3)\n+\n+do i=1,20\n+  if (i.eq.5) then\n+    if (any(var3%t2(i)%t1%arr1.ne.6)) stop 5\n+  else\n+    if (any(var3%t2(i)%t1%arr1.ne.0)) stop 6\n+  end if\n+end do\n+\n+end"}, {"sha": "d796eddceda534d496804fadfee842913f4a3fce", "filename": "libgomp/testsuite/libgomp.oacc-fortran/update-dt-array.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28f3da11d8c0aed9b746689d723022a9b5ec04c/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fupdate-dt-array.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28f3da11d8c0aed9b746689d723022a9b5ec04c/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fupdate-dt-array.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fupdate-dt-array.f90?ref=d28f3da11d8c0aed9b746689d723022a9b5ec04c", "patch": "@@ -0,0 +1,53 @@\n+! { dg-do run }\n+\n+program myprog\n+\n+  type mytype\n+    integer, allocatable :: myarr(:,:)\n+  end type mytype\n+  integer :: i\n+\n+  type(mytype), allocatable :: typearr(:)\n+\n+  allocate(typearr(1:100))\n+\n+  do i=1,100\n+    allocate(typearr(i)%myarr(1:100,1:100))\n+  end do\n+\n+  do i=1,100\n+    typearr(i)%myarr(:,:) = 0\n+  end do\n+\n+  !$acc enter data copyin(typearr)\n+\n+  do i=1,100\n+    !$acc enter data copyin(typearr(i)%myarr)\n+  end do\n+\n+  i=33\n+  typearr(i)%myarr(:,:) = 50\n+\n+  !$acc update device(typearr(i)%myarr(:,:))\n+\n+  do i=1,100\n+    !$acc exit data copyout(typearr(i)%myarr)\n+  end do\n+\n+  !$acc exit data delete(typearr)\n+\n+  do i=1,100\n+    if (i.eq.33) then\n+      if (any(typearr(i)%myarr.ne.50)) stop 1\n+    else\n+      if (any(typearr(i)%myarr.ne.0)) stop 2\n+    end if\n+  end do\n+\n+  do i=1,100\n+    deallocate(typearr(i)%myarr)\n+  end do\n+\n+  deallocate(typearr)\n+\n+end program myprog"}]}