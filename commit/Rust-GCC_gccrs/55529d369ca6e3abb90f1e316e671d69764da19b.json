{"sha": "55529d369ca6e3abb90f1e316e671d69764da19b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU1MjlkMzY5Y2E2ZTNhYmI5MGYxZTMxNmU2NzFkNjk3NjRkYTE5Yg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2012-08-29T00:46:36Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2012-08-29T00:46:36Z"}, "message": "Replace alloca with xmalloc/free\n\n\tPR binutils/14526\n\t* argv.c (buildargv): Replace alloca with xmalloc/free.\n\nFrom-SVN: r190766", "tree": {"sha": "025a9561217264a4ed32568da7a6233f8c8b8df5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/025a9561217264a4ed32568da7a6233f8c8b8df5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55529d369ca6e3abb90f1e316e671d69764da19b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55529d369ca6e3abb90f1e316e671d69764da19b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55529d369ca6e3abb90f1e316e671d69764da19b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55529d369ca6e3abb90f1e316e671d69764da19b/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09ba405a485fa6b65c3d231c059ed07cc704b1f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09ba405a485fa6b65c3d231c059ed07cc704b1f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09ba405a485fa6b65c3d231c059ed07cc704b1f1"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "f06dcb52a66834596dcc7a28822212bd23fdb593", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55529d369ca6e3abb90f1e316e671d69764da19b/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55529d369ca6e3abb90f1e316e671d69764da19b/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=55529d369ca6e3abb90f1e316e671d69764da19b", "patch": "@@ -1,3 +1,8 @@\n+2011-08-28  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR binutils/14526\n+\t* argv.c (buildargv): Replace alloca with xmalloc/free.\n+\n 2012-08-17  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* floatformat.c (floatformat_to_double): Correctly handle numbers"}, {"sha": "4cef3bc5b5b90492d923abb280452b19133849b7", "filename": "libiberty/argv.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55529d369ca6e3abb90f1e316e671d69764da19b/libiberty%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55529d369ca6e3abb90f1e316e671d69764da19b/libiberty%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fargv.c?ref=55529d369ca6e3abb90f1e316e671d69764da19b", "patch": "@@ -191,7 +191,7 @@ char **buildargv (const char *input)\n \n   if (input != NULL)\n     {\n-      copybuf = (char *) alloca (strlen (input) + 1);\n+      copybuf = (char *) xmalloc (strlen (input) + 1);\n       /* Is a do{}while to always execute the loop once.  Always return an\n \t argv, even for null strings.  See NOTES above, test case below. */\n       do\n@@ -297,6 +297,8 @@ char **buildargv (const char *input)\n \t  consume_whitespace (&input);\n \t}\n       while (*input != EOS);\n+\n+      free (copybuf);\n     }\n   return (argv);\n }"}]}