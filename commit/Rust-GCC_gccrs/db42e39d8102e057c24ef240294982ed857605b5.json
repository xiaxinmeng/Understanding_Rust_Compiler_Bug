{"sha": "db42e39d8102e057c24ef240294982ed857605b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI0MmUzOWQ4MTAyZTA1N2MyNGVmMjQwMjk0OTgyZWQ4NTc2MDViNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-07-09T20:43:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-07-09T20:43:06Z"}, "message": "dwarf2: Reduce some redundant definitions.\n\nMove some definitions to defaults.h; some simply aren't needed\nanymore in the respective dwarf2{cfi,out}.c files.\n\n        * defaults.h (DWARF_CIE_DATA_ALIGNMENT, DWARF_FRAME_RETURN_COLUMN,\n        DWARF_FRAME_REGNUM, DWARF2_FRAME_REG_OUT): Move from ...\n        * dwarf2cfi.c: ... here.\n        (PTR_SIZE, DWARF_OFFSET_SIZE, DWARF_INITIAL_LENGTH_SIZE): Remove.\n        (DWARF_ROUND, DWARF_CIE_ID): Remove.\n        * dwarf2out.c (INCOMING_RETURN_ADDR_RTX): Remove.\n        (DWARF2_FRAME_REG_OUT, DWARF_CIE_DATA_ALIGNMENT): Remove.\n        (DWARF_FRAME_RETURN_COLUMN, DWARF_FRAME_REGNUM): Remove.\n\nFrom-SVN: r176102", "tree": {"sha": "fe412d2bc3a742d749bc063bc62d8d6a13b4dc76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe412d2bc3a742d749bc063bc62d8d6a13b4dc76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db42e39d8102e057c24ef240294982ed857605b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db42e39d8102e057c24ef240294982ed857605b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db42e39d8102e057c24ef240294982ed857605b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db42e39d8102e057c24ef240294982ed857605b5/comments", "author": null, "committer": null, "parents": [{"sha": "a8e5c0e77e06f7776efcb59cf79562a2a16fb1df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8e5c0e77e06f7776efcb59cf79562a2a16fb1df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8e5c0e77e06f7776efcb59cf79562a2a16fb1df"}], "stats": {"total": 161, "additions": 44, "deletions": 117}, "files": [{"sha": "b0290cdf6ef49156a1ac6f5f5940a1544bf6aaac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db42e39d8102e057c24ef240294982ed857605b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db42e39d8102e057c24ef240294982ed857605b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db42e39d8102e057c24ef240294982ed857605b5", "patch": "@@ -1,3 +1,14 @@\n+2011-07-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* defaults.h (DWARF_CIE_DATA_ALIGNMENT, DWARF_FRAME_RETURN_COLUMN,\n+\tDWARF_FRAME_REGNUM, DWARF2_FRAME_REG_OUT): Move from ...\n+\t* dwarf2cfi.c: ... here.\n+\t(PTR_SIZE, DWARF_OFFSET_SIZE, DWARF_INITIAL_LENGTH_SIZE): Remove.\n+\t(DWARF_ROUND, DWARF_CIE_ID): Remove.\n+\t* dwarf2out.c (INCOMING_RETURN_ADDR_RTX): Remove.\n+\t(DWARF2_FRAME_REG_OUT, DWARF_CIE_DATA_ALIGNMENT): Remove.\n+\t(DWARF_FRAME_RETURN_COLUMN, DWARF_FRAME_REGNUM): Remove.\n+\n 2011-07-09  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2cfi.c (cie_return_save): New."}, {"sha": "6bacb3c01394caa687c046ccc4a0b1802cfc04ce", "filename": "gcc/defaults.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db42e39d8102e057c24ef240294982ed857605b5/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db42e39d8102e057c24ef240294982ed857605b5/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=db42e39d8102e057c24ef240294982ed857605b5", "patch": "@@ -413,13 +413,46 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define DWARF_FRAME_REGISTERS FIRST_PSEUDO_REGISTER\n #endif\n \n+/* Offsets recorded in opcodes are a multiple of this alignment factor.  */\n+#ifndef DWARF_CIE_DATA_ALIGNMENT\n+#ifdef STACK_GROWS_DOWNWARD\n+#define DWARF_CIE_DATA_ALIGNMENT (-((int) UNITS_PER_WORD))\n+#else\n+#define DWARF_CIE_DATA_ALIGNMENT ((int) UNITS_PER_WORD)\n+#endif\n+#endif\n+\n+/* The DWARF 2 CFA column which tracks the return address.  Normally this\n+   is the column for PC, or the first column after all of the hard\n+   registers.  */\n+#ifndef DWARF_FRAME_RETURN_COLUMN\n+#ifdef PC_REGNUM\n+#define DWARF_FRAME_RETURN_COLUMN\tDWARF_FRAME_REGNUM (PC_REGNUM)\n+#else\n+#define DWARF_FRAME_RETURN_COLUMN\tDWARF_FRAME_REGISTERS\n+#endif\n+#endif\n+\n /* How to renumber registers for dbx and gdb.  If not defined, assume\n    no renumbering is necessary.  */\n \n #ifndef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n #endif\n \n+/* The mapping from gcc register number to DWARF 2 CFA column number.\n+   By default, we just provide columns for all registers.  */\n+#ifndef DWARF_FRAME_REGNUM\n+#define DWARF_FRAME_REGNUM(REG) DBX_REGISTER_NUMBER (REG)\n+#endif\n+\n+/* Map register numbers held in the call frame info that gcc has\n+   collected using DWARF_FRAME_REGNUM to those that should be output in\n+   .debug_frame and .eh_frame.  */\n+#ifndef DWARF2_FRAME_REG_OUT\n+#define DWARF2_FRAME_REG_OUT(REGNO, FOR_EH) (REGNO)\n+#endif\n+\n /* Default sizes for base C types.  If the sizes are different for\n    your target, you should override these values by defining the\n    appropriate symbols in your tm.h file.  */"}, {"sha": "28f9b938a2adb774d48b17cb08ee3661f4e72c04", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db42e39d8102e057c24ef240294982ed857605b5/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db42e39d8102e057c24ef240294982ed857605b5/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=db42e39d8102e057c24ef240294982ed857605b5", "patch": "@@ -55,88 +55,8 @@ along with GCC; see the file COPYING3.  If not see\n #define INCOMING_RETURN_ADDR_RTX  (gcc_unreachable (), NULL_RTX)\n #endif\n \n-/* The size of the target's pointer type.  */\n-#ifndef PTR_SIZE\n-#define PTR_SIZE (POINTER_SIZE / BITS_PER_UNIT)\n-#endif\n-\n /* Maximum size (in bytes) of an artificially generated label.  */\n #define MAX_ARTIFICIAL_LABEL_BYTES\t30\n-\n-/* The size of addresses as they appear in the Dwarf 2 data.\n-   Some architectures use word addresses to refer to code locations,\n-   but Dwarf 2 info always uses byte addresses.  On such machines,\n-   Dwarf 2 addresses need to be larger than the architecture's\n-   pointers.  */\n-#ifndef DWARF2_ADDR_SIZE\n-#define DWARF2_ADDR_SIZE (POINTER_SIZE / BITS_PER_UNIT)\n-#endif\n-\n-/* The size in bytes of a DWARF field indicating an offset or length\n-   relative to a debug info section, specified to be 4 bytes in the\n-   DWARF-2 specification.  The SGI/MIPS ABI defines it to be the same\n-   as PTR_SIZE.  */\n-\n-#ifndef DWARF_OFFSET_SIZE\n-#define DWARF_OFFSET_SIZE 4\n-#endif\n-\n-/* According to the (draft) DWARF 3 specification, the initial length\n-   should either be 4 or 12 bytes.  When it's 12 bytes, the first 4\n-   bytes are 0xffffffff, followed by the length stored in the next 8\n-   bytes.\n-\n-   However, the SGI/MIPS ABI uses an initial length which is equal to\n-   DWARF_OFFSET_SIZE.  It is defined (elsewhere) accordingly.  */\n-\n-#ifndef DWARF_INITIAL_LENGTH_SIZE\n-#define DWARF_INITIAL_LENGTH_SIZE (DWARF_OFFSET_SIZE == 4 ? 4 : 12)\n-#endif\n-\n-/* Round SIZE up to the nearest BOUNDARY.  */\n-#define DWARF_ROUND(SIZE,BOUNDARY) \\\n-  ((((SIZE) + (BOUNDARY) - 1) / (BOUNDARY)) * (BOUNDARY))\n-\n-/* Offsets recorded in opcodes are a multiple of this alignment factor.  */\n-#ifndef DWARF_CIE_DATA_ALIGNMENT\n-#ifdef STACK_GROWS_DOWNWARD\n-#define DWARF_CIE_DATA_ALIGNMENT (-((int) UNITS_PER_WORD))\n-#else\n-#define DWARF_CIE_DATA_ALIGNMENT ((int) UNITS_PER_WORD)\n-#endif\n-#endif\n-\n-/* CIE identifier.  */\n-#if HOST_BITS_PER_WIDE_INT >= 64\n-#define DWARF_CIE_ID \\\n-  (unsigned HOST_WIDE_INT) (DWARF_OFFSET_SIZE == 4 ? DW_CIE_ID : DW64_CIE_ID)\n-#else\n-#define DWARF_CIE_ID DW_CIE_ID\n-#endif\n-\n-/* The DWARF 2 CFA column which tracks the return address.  Normally this\n-   is the column for PC, or the first column after all of the hard\n-   registers.  */\n-#ifndef DWARF_FRAME_RETURN_COLUMN\n-#ifdef PC_REGNUM\n-#define DWARF_FRAME_RETURN_COLUMN\tDWARF_FRAME_REGNUM (PC_REGNUM)\n-#else\n-#define DWARF_FRAME_RETURN_COLUMN\tDWARF_FRAME_REGISTERS\n-#endif\n-#endif\n-\n-/* The mapping from gcc register number to DWARF 2 CFA column number.  By\n-   default, we just provide columns for all registers.  */\n-#ifndef DWARF_FRAME_REGNUM\n-#define DWARF_FRAME_REGNUM(REG) DBX_REGISTER_NUMBER (REG)\n-#endif\n-\n-/* Map register numbers held in the call frame info that gcc has\n-   collected using DWARF_FRAME_REGNUM to those that should be output in\n-   .debug_frame and .eh_frame.  */\n-#ifndef DWARF2_FRAME_REG_OUT\n-#define DWARF2_FRAME_REG_OUT(REGNO, FOR_EH) (REGNO)\n-#endif\n \f\n /* A vector of call frame insns for the CIE.  */\n cfi_vec cie_cfi_vec;"}, {"sha": "4431655af6a08a88fb50572fce0adccd692fa347", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db42e39d8102e057c24ef240294982ed857605b5/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db42e39d8102e057c24ef240294982ed857605b5/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=db42e39d8102e057c24ef240294982ed857605b5", "patch": "@@ -122,17 +122,6 @@ int vms_file_stats_name (const char *, long long *, long *, char *, int *);\n  #pragma GCC poison DWARF2_UNWIND_INFO DWARF2_FRAME_INFO\n #endif\n \n-#ifndef INCOMING_RETURN_ADDR_RTX\n-#define INCOMING_RETURN_ADDR_RTX  (gcc_unreachable (), NULL_RTX)\n-#endif\n-\n-/* Map register numbers held in the call frame info that gcc has\n-   collected using DWARF_FRAME_REGNUM to those that should be output in\n-   .debug_frame and .eh_frame.  */\n-#ifndef DWARF2_FRAME_REG_OUT\n-#define DWARF2_FRAME_REG_OUT(REGNO, FOR_EH) (REGNO)\n-#endif\n-\n /* The size of the target's pointer type.  */\n #ifndef PTR_SIZE\n #define PTR_SIZE (POINTER_SIZE / BITS_PER_UNIT)\n@@ -211,15 +200,6 @@ static GTY(()) section *debug_frame_section;\n #define DWARF_ROUND(SIZE,BOUNDARY) \\\n   ((((SIZE) + (BOUNDARY) - 1) / (BOUNDARY)) * (BOUNDARY))\n \n-/* Offsets recorded in opcodes are a multiple of this alignment factor.  */\n-#ifndef DWARF_CIE_DATA_ALIGNMENT\n-#ifdef STACK_GROWS_DOWNWARD\n-#define DWARF_CIE_DATA_ALIGNMENT (-((int) UNITS_PER_WORD))\n-#else\n-#define DWARF_CIE_DATA_ALIGNMENT ((int) UNITS_PER_WORD)\n-#endif\n-#endif\n-\n /* CIE identifier.  */\n #if HOST_BITS_PER_WIDE_INT >= 64\n #define DWARF_CIE_ID \\\n@@ -309,23 +289,6 @@ static GTY(()) rtx current_unit_personality;\n #define LN_PROLOG_AS_LABEL\t\"LASLTP\"\n #define LN_PROLOG_END_LABEL\t\"LELTP\"\n #define DIE_LABEL_PREFIX\t\"DW\"\n-\n-/* The DWARF 2 CFA column which tracks the return address.  Normally this\n-   is the column for PC, or the first column after all of the hard\n-   registers.  */\n-#ifndef DWARF_FRAME_RETURN_COLUMN\n-#ifdef PC_REGNUM\n-#define DWARF_FRAME_RETURN_COLUMN\tDWARF_FRAME_REGNUM (PC_REGNUM)\n-#else\n-#define DWARF_FRAME_RETURN_COLUMN\tDWARF_FRAME_REGISTERS\n-#endif\n-#endif\n-\n-/* The mapping from gcc register number to DWARF 2 CFA column number.  By\n-   default, we just provide columns for all registers.  */\n-#ifndef DWARF_FRAME_REGNUM\n-#define DWARF_FRAME_REGNUM(REG) DBX_REGISTER_NUMBER (REG)\n-#endif\n \f\n /* Match the base name of a file to the base name of a compilation unit. */\n "}]}