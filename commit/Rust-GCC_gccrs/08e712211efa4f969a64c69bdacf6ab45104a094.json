{"sha": "08e712211efa4f969a64c69bdacf6ab45104a094", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhlNzEyMjExZWZhNGY5NjlhNjRjNjliZGFjZjZhYjQ1MTA0YTA5NA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-14T16:59:58Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-15T15:17:22Z"}, "message": "c++: Improve printing of pointers-to-members [PR97406, PR85901]\n\nThis PR points out that when printing the parameter mapping for a\npointer-to-member-function, the output was truncated:\n\n  [with T = void (X::*]\n\nFixed by printing the abstract declarator for pointers-to-members in\ncxx_pretty_printer::type_id.  So now we print:\n\n  [with T = void (X::*)()]\n\nBut when I tried a pointer-to-data-member, I got\n\n  [with T = \u2018offset_type\u2019 not supported by simple_type_specifier)\u2018offset_type\u2019 not supported by direct_abstract_declarator]\n\nso had to fix that too so that we now print:\n\n  [with T = int X::*]\n\nor\n\n  [with T = int (X::*)[5]]\n\nwhen the type is an array type.  Which is what PR85901 was about.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97406\n\tPR c++/85901\n\t* cxx-pretty-print.c (pp_cxx_type_specifier_seq): Handle OFFSET_TYPE.\n\t(cxx_pretty_printer::abstract_declarator): Fix the printing of ')'.\n\t(cxx_pretty_printer::direct_abstract_declarator): Handle OFFSET_TYPE.\n\t(cxx_pretty_printer::type_id): Likewise.  Print the abstract declarator\n\tfor pointers-to-members.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97406\n\tPR c++/85901\n\t* g++.dg/diagnostic/ptrtomem1.C: New test.\n\t* g++.dg/diagnostic/ptrtomem2.C: New test.", "tree": {"sha": "6d0c834ab11719a8d7b94c5f9c866ebcb321063b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d0c834ab11719a8d7b94c5f9c866ebcb321063b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08e712211efa4f969a64c69bdacf6ab45104a094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e712211efa4f969a64c69bdacf6ab45104a094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08e712211efa4f969a64c69bdacf6ab45104a094", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e712211efa4f969a64c69bdacf6ab45104a094/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2ff7d26722297558601fd943f8165a59833e8f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ff7d26722297558601fd943f8165a59833e8f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ff7d26722297558601fd943f8165a59833e8f9"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "058b9c2f4fc8a17d3ce6c95df309808fbce06610", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e712211efa4f969a64c69bdacf6ab45104a094/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e712211efa4f969a64c69bdacf6ab45104a094/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=08e712211efa4f969a64c69bdacf6ab45104a094", "patch": "@@ -1420,6 +1420,16 @@ pp_cxx_type_specifier_seq (cxx_pretty_printer *pp, tree t)\n \t}\n       /* fall through */\n \n+    case OFFSET_TYPE:\n+      if (TYPE_PTRDATAMEM_P (t))\n+\t{\n+\t  pp_cxx_type_specifier_seq (pp, TREE_TYPE (t));\n+\t  pp_cxx_whitespace (pp);\n+\t  pp_cxx_ptr_operator (pp, t);\n+\t  break;\n+\t}\n+      /* fall through */\n+\n     default:\n       if (!(TREE_CODE (t) == FUNCTION_DECL && DECL_CONSTRUCTOR_P (t)))\n \tpp_c_specifier_qualifier_list (pp, t);\n@@ -1753,7 +1763,20 @@ pp_cxx_function_definition (cxx_pretty_printer *pp, tree t)\n void\n cxx_pretty_printer::abstract_declarator (tree t)\n {\n-  if (TYPE_PTRMEM_P (t))\n+  /* pp_cxx_ptr_operator prints '(' for a pointer-to-member function,\n+     or a pointer-to-data-member of array type:\n+\n+       void (X::*)()\n+       int (X::*)[5]\n+\n+     but not for a pointer-to-data-member of non-array type:\n+\n+       int X::*\n+\n+     so be mindful of that.  */\n+  if (TYPE_PTRMEMFUNC_P (t)\n+      || (TYPE_PTRDATAMEM_P (t)\n+\t  && TREE_CODE (TREE_TYPE (t)) == ARRAY_TYPE))\n     pp_cxx_right_paren (this);\n   else if (INDIRECT_TYPE_P (t))\n     {\n@@ -1785,6 +1808,11 @@ cxx_pretty_printer::direct_abstract_declarator (tree t)\n \tdirect_abstract_declarator (TYPE_PTRMEMFUNC_FN_TYPE (t));\n       break;\n \n+    case OFFSET_TYPE:\n+      if (TYPE_PTRDATAMEM_P (t))\n+\tdirect_abstract_declarator (TREE_TYPE (t));\n+      break;\n+\n     case METHOD_TYPE:\n     case FUNCTION_TYPE:\n       pp_cxx_parameter_declaration_clause (this, t);\n@@ -1837,7 +1865,10 @@ cxx_pretty_printer::type_id (tree t)\n     case UNDERLYING_TYPE:\n     case DECLTYPE_TYPE:\n     case TEMPLATE_ID_EXPR:\n+    case OFFSET_TYPE:\n       pp_cxx_type_specifier_seq (this, t);\n+      if (TYPE_PTRMEM_P (t))\n+\tabstract_declarator (t);\n       break;\n \n     case TYPE_PACK_EXPANSION:"}, {"sha": "bb1327f7af1317bba1c7945492fa088167f79a09", "filename": "gcc/testsuite/g++.dg/diagnostic/ptrtomem1.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e712211efa4f969a64c69bdacf6ab45104a094/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fptrtomem1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e712211efa4f969a64c69bdacf6ab45104a094/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fptrtomem1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fptrtomem1.C?ref=08e712211efa4f969a64c69bdacf6ab45104a094", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/97406\n+// { dg-do compile { target c++20 } }\n+\n+struct X {\n+  void f() { }\n+  int a;\n+  int arr[5];\n+};\n+\n+// Duplicated so that I can check dg-message.\n+template<typename T>\n+requires (sizeof(T)==1) // { dg-message {\\[with T = void \\(X::\\*\\)\\(\\)\\]} }\n+void f1(T)\n+{ }\n+\n+template<typename T>\n+requires (sizeof(T)==1) // { dg-message {\\[with T = int X::\\*\\]} }\n+void f2(T)\n+{ }\n+\n+template<typename T>\n+requires (sizeof(T)==1) // dg-message {\\[with T = int \\(X::\\*\\)\\[5\\]\\]} }\n+void f3(T)\n+{ }\n+\n+int main()\n+{\n+  f1(&X::f); // { dg-error \"no matching function for call\" }\n+  f2(&X::a); // { dg-error \"no matching function for call\" }\n+  f3(&X::arr); // { dg-error \"no matching function for call\" }\n+}"}, {"sha": "f3b29a07a9904493578bb9591edfd9e3bb222d56", "filename": "gcc/testsuite/g++.dg/diagnostic/ptrtomem2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e712211efa4f969a64c69bdacf6ab45104a094/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fptrtomem2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e712211efa4f969a64c69bdacf6ab45104a094/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fptrtomem2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fptrtomem2.C?ref=08e712211efa4f969a64c69bdacf6ab45104a094", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/85901\n+// { dg-do compile { target c++11 } }\n+\n+template<class> struct A;\n+\n+template<class U>\n+struct A<int U::*> {\n+    template<class TT>\n+    static auto c(int U::*p, TT o) -> decltype(o.*p); // { dg-message {A<int U::\\*>} }\n+};\n+\n+struct X {};\n+\n+int x = A<int X::*>::c(); // { dg-error \"no matching function for call\" }"}]}