{"sha": "faaf14368b72d741b4ea5bcb6b8cb172fb847c43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFhZjE0MzY4YjcyZDc0MWI0ZWE1YmNiNmI4Y2IxNzJmYjg0N2M0Mw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-05-16T15:34:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-05-16T15:34:12Z"}, "message": "re PR tree-optimization/22303 (CCP does not handle STRING_CSTs)\n\n2006-05-16  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/22303\n\t* tree-ssa-ccp.c (fold_const_aggregate_ref): Handle reads\n\tfrom STRING_CSTs.\n\t(evaluate_stmt): Fall back to fold_const_aggregate_ref, if\n\tccp_fold did not simplify the statement.\n\n\t* gcc.dg/tree-ssa/ssa-ccp-13.c: New testcase.\n\nFrom-SVN: r113826", "tree": {"sha": "edbdd4f49cf5e328f497b63f183f1354221dafa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edbdd4f49cf5e328f497b63f183f1354221dafa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faaf14368b72d741b4ea5bcb6b8cb172fb847c43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faaf14368b72d741b4ea5bcb6b8cb172fb847c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faaf14368b72d741b4ea5bcb6b8cb172fb847c43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faaf14368b72d741b4ea5bcb6b8cb172fb847c43/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14c7833ccd0392c40505c4f707abc7ef64af7972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c7833ccd0392c40505c4f707abc7ef64af7972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14c7833ccd0392c40505c4f707abc7ef64af7972"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "c7bfa59c0ec4aae9081e15d5fc48dd7871fcf413", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faaf14368b72d741b4ea5bcb6b8cb172fb847c43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faaf14368b72d741b4ea5bcb6b8cb172fb847c43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=faaf14368b72d741b4ea5bcb6b8cb172fb847c43", "patch": "@@ -1,3 +1,11 @@\n+2006-05-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/22303\n+\t* tree-ssa-ccp.c (fold_const_aggregate_ref): Handle reads\n+\tfrom STRING_CSTs.\n+\t(evaluate_stmt): Fall back to fold_const_aggregate_ref, if\n+\tccp_fold did not simplify the statement.\n+\n 2006-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR driver/26885"}, {"sha": "ec6b784ffd1118eb5b6dcdf94913eabdcd3c4bb4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faaf14368b72d741b4ea5bcb6b8cb172fb847c43/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faaf14368b72d741b4ea5bcb6b8cb172fb847c43/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=faaf14368b72d741b4ea5bcb6b8cb172fb847c43", "patch": "@@ -1,3 +1,8 @@\n+2006-05-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/22303\n+\t* gcc.dg/tree-ssa/ssa-ccp-13.c: New testcase.\n+\n 2006-05-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/27573"}, {"sha": "d35adee514d6078f5221ad3f00ea4da85495f4b7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-13.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faaf14368b72d741b4ea5bcb6b8cb172fb847c43/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faaf14368b72d741b4ea5bcb6b8cb172fb847c43/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-13.c?ref=faaf14368b72d741b4ea5bcb6b8cb172fb847c43", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+static const char f[3] = \"?\";\n+\n+int foo()\n+{\n+  int i = 0;\n+  return f[i] != '?';\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 0;\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+"}, {"sha": "53050e68429ab9a75177e209feb5487a542c41cd", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faaf14368b72d741b4ea5bcb6b8cb172fb847c43/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faaf14368b72d741b4ea5bcb6b8cb172fb847c43/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=faaf14368b72d741b4ea5bcb6b8cb172fb847c43", "patch": "@@ -1011,7 +1011,8 @@ fold_const_aggregate_ref (tree t)\n \t}\n \n       if (ctor == NULL_TREE\n-\t  || TREE_CODE (ctor) != CONSTRUCTOR\n+\t  || (TREE_CODE (ctor) != CONSTRUCTOR\n+\t      && TREE_CODE (ctor) != STRING_CST)\n \t  || !TREE_STATIC (ctor))\n \treturn NULL_TREE;\n \n@@ -1036,6 +1037,20 @@ fold_const_aggregate_ref (tree t)\n \t  return NULL_TREE;\n \t}\n \n+      /* Fold read from constant string.  */\n+      if (TREE_CODE (ctor) == STRING_CST)\n+\t{\n+\t  if ((TYPE_MODE (TREE_TYPE (t))\n+\t       == TYPE_MODE (TREE_TYPE (TREE_TYPE (ctor))))\n+\t      && (GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (TREE_TYPE (ctor))))\n+\t          == MODE_INT)\n+\t      && GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (TREE_TYPE (ctor)))) == 1\n+\t      && compare_tree_int (idx, TREE_STRING_LENGTH (ctor)) < 0)\n+\t    return build_int_cst (TREE_TYPE (t), (TREE_STRING_POINTER (ctor)\n+\t\t\t\t\t          [TREE_INT_CST_LOW (idx)]));\n+\t  return NULL_TREE;\n+\t}\n+\n       /* Whoo-hoo!  I'll fold ya baby.  Yeah!  */\n       FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ctor), cnt, cfield, cval)\n \tif (tree_int_cst_equal (cfield, idx))\n@@ -1104,7 +1119,7 @@ static prop_value_t\n evaluate_stmt (tree stmt)\n {\n   prop_value_t val;\n-  tree simplified;\n+  tree simplified = NULL_TREE;\n   ccp_lattice_t likelyvalue = likely_value (stmt);\n \n   val.mem_ref = NULL_TREE;\n@@ -1115,14 +1130,14 @@ evaluate_stmt (tree stmt)\n     simplified = ccp_fold (stmt);\n   /* If the statement is likely to have a VARYING result, then do not\n      bother folding the statement.  */\n-  else if (likelyvalue == VARYING)\n+  if (likelyvalue == VARYING)\n     simplified = get_rhs (stmt);\n   /* If the statement is an ARRAY_REF or COMPONENT_REF into constant\n      aggregates, extract the referenced constant.  Otherwise the\n      statement is likely to have an UNDEFINED value, and there will be\n      nothing to do.  Note that fold_const_aggregate_ref returns\n      NULL_TREE if the first case does not match.  */\n-  else\n+  else if (!simplified)\n     simplified = fold_const_aggregate_ref (get_rhs (stmt));\n \n   if (simplified && is_gimple_min_invariant (simplified))"}]}