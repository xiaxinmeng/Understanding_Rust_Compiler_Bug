{"sha": "1ea83c404e82d276524f8af3ac51bd23600bfd24", "node_id": "C_kwDOANBUbNoAKDFlYTgzYzQwNGU4MmQyNzY1MjRmOGFmM2FjNTFiZDIzNjAwYmZkMjQ", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-29T11:47:25Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-05-04T14:01:44Z"}, "message": "ast: Lower SimplePaths properly", "tree": {"sha": "c73a9082aeec397c4b57658e79d1d15180dae4ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c73a9082aeec397c4b57658e79d1d15180dae4ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ea83c404e82d276524f8af3ac51bd23600bfd24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea83c404e82d276524f8af3ac51bd23600bfd24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ea83c404e82d276524f8af3ac51bd23600bfd24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea83c404e82d276524f8af3ac51bd23600bfd24/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "285aabdd3b2d8ee7c158eee34241ba52a31b19d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285aabdd3b2d8ee7c158eee34241ba52a31b19d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/285aabdd3b2d8ee7c158eee34241ba52a31b19d3"}], "stats": {"total": 152, "additions": 135, "deletions": 17}, "files": [{"sha": "2aec8a95a5af4e9df6d07fafa9e8e9867b6c6933", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=1ea83c404e82d276524f8af3ac51bd23600bfd24", "patch": "@@ -85,6 +85,7 @@ GRS_OBJS = \\\n     rust/rust-ast-lower.o \\\n     rust/rust-ast-lower-base.o \\\n     rust/rust-ast-lower-pattern.o \\\n+    rust/rust-ast-lower-item.o \\\n     rust/rust-name-resolver.o \\\n     rust/rust-ast-resolve.o \\\n     rust/rust-ast-resolve-base.o \\"}, {"sha": "45072d36a7a6f01b15e1466d0be56c823713b04a", "filename": "gcc/rust/hir/rust-ast-lower-item.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc?ref=1ea83c404e82d276524f8af3ac51bd23600bfd24", "patch": "@@ -0,0 +1,73 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-ast-lower-item.h\"\n+\n+namespace Rust {\n+namespace HIR {\n+\n+HIR::SimplePath\n+ASTLoweringSimplePath::translate (const AST::SimplePath &path)\n+{\n+  ASTLoweringSimplePath resolver;\n+\n+  return resolver.lower (path);\n+}\n+\n+HIR::SimplePathSegment\n+ASTLoweringSimplePath::lower (const AST::SimplePathSegment &segment)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  auto node_id = segment.get_node_id ();\n+\n+  auto mapping = Analysis::NodeMapping (crate_num, node_id,\n+\t\t\t\t\tmappings->get_next_hir_id (crate_num),\n+\t\t\t\t\tUNKNOWN_LOCAL_DEFID);\n+\n+  auto hir_seg = HIR::SimplePathSegment (mapping);\n+\n+  mappings->insert_node_to_hir (crate_num, node_id, mapping.get_hirid ());\n+  mappings->insert_simple_path_segment (crate_num, node_id, &segment);\n+\n+  return hir_seg;\n+}\n+\n+HIR::SimplePath\n+ASTLoweringSimplePath::lower (const AST::SimplePath &path)\n+{\n+  auto segments = std::vector<HIR::SimplePathSegment> ();\n+  for (auto &segment : path.get_segments ())\n+    segments.emplace_back (lower (segment));\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  auto node_id = path.get_node_id ();\n+\n+  auto mapping = Analysis::NodeMapping (crate_num, node_id,\n+\t\t\t\t\tmappings->get_next_hir_id (crate_num),\n+\t\t\t\t\tUNKNOWN_LOCAL_DEFID);\n+\n+  auto lowered = HIR::SimplePath (std::move (segments), mapping);\n+\n+  mappings->insert_node_to_hir (crate_num, node_id, mapping.get_hirid ());\n+  mappings->insert_simple_path (crate_num, node_id, &path);\n+\n+  return lowered;\n+}\n+\n+} // namespace HIR\n+} // namespace Rust"}, {"sha": "6da50fe42628cd2793d8622105dba55743018611", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=1ea83c404e82d276524f8af3ac51bd23600bfd24", "patch": "@@ -826,6 +826,15 @@ class ASTLoweringItem : public ASTLoweringBase\n   HIR::Item *translated;\n };\n \n+class ASTLoweringSimplePath : public ASTLoweringBase\n+{\n+public:\n+  static HIR::SimplePath translate (const AST::SimplePath &path);\n+\n+  HIR::SimplePathSegment lower (const AST::SimplePathSegment &segment);\n+  HIR::SimplePath lower (const AST::SimplePath &path);\n+};\n+\n } // namespace HIR\n } // namespace Rust\n "}, {"sha": "a3850514b0938224f2a6e3af841ceab10e448c50", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=1ea83c404e82d276524f8af3ac51bd23600bfd24", "patch": "@@ -46,7 +46,8 @@ translate_visibility (const AST::Visibility &vis)\n     case AST::Visibility::PUB_CRATE:\n     case AST::Visibility::PUB_SUPER:\n     case AST::Visibility::PUB_IN_PATH:\n-      return Visibility (Visibility::VisType::PUBLIC, vis.get_path ());\n+      return Visibility (Visibility::VisType::PUBLIC,\n+\t\t\t ASTLoweringSimplePath::translate (vis.get_path ()));\n       break;\n     }\n "}, {"sha": "8ef11945b13f865be2ab5cade0ff5f4d15628b84", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=1ea83c404e82d276524f8af3ac51bd23600bfd24", "patch": "@@ -123,7 +123,8 @@ Visibility::as_string () const\n     case PRIVATE:\n       return std::string (\"private\");\n     case PUBLIC:\n-      return std::string (\"pub(in \") + path.as_string () + std::string (\")\");\n+      return std::string (\"pub(in \") + path.get_mappings ().as_string ()\n+\t     + std::string (\")\");\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "c1dcf7651f58137259d8f38fa57942aa58a2c323", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=1ea83c404e82d276524f8af3ac51bd23600bfd24", "patch": "@@ -562,14 +562,13 @@ struct Visibility\n \n private:\n   VisType vis_type;\n-  AST::SimplePath path;\n+  HIR::SimplePath path;\n \n   // should this store location info?\n \n public:\n-  // Creates a Visibility - TODO make constructor protected or private?\n   Visibility (VisType vis_type,\n-\t      AST::SimplePath path = AST::SimplePath::create_empty ())\n+\t      HIR::SimplePath path = HIR::SimplePath::create_error ())\n     : vis_type (vis_type), path (std::move (path))\n   {}\n \n@@ -582,7 +581,9 @@ struct Visibility\n   // Creates an error visibility.\n   static Visibility create_error ()\n   {\n-    return Visibility (ERROR, AST::SimplePath::create_empty ());\n+    return Visibility (ERROR,\n+\t\t       HIR::SimplePath ({},\n+\t\t\t\t\tAnalysis::NodeMapping::get_error ()));\n   }\n \n   VisType get_vis_type () const { return vis_type; }"}, {"sha": "e3ad838425215cb1ebd7c046611dddc69f796c01", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=1ea83c404e82d276524f8af3ac51bd23600bfd24", "patch": "@@ -946,6 +946,36 @@ class QualifiedPathInType : public TypeNoBounds\n \n   Location get_locus () { return locus; }\n };\n+\n+class SimplePathSegment\n+{\n+  Analysis::NodeMapping mappings;\n+\n+public:\n+  SimplePathSegment (Analysis::NodeMapping mappings) : mappings (mappings) {}\n+\n+  const Analysis::NodeMapping &get_mappings () const { return mappings; }\n+};\n+\n+class SimplePath\n+{\n+  std::vector<SimplePathSegment> segments;\n+  Analysis::NodeMapping mappings;\n+\n+public:\n+  SimplePath (std::vector<SimplePathSegment> segments,\n+\t      Analysis::NodeMapping mappings)\n+    : segments (std::move (segments)), mappings (mappings)\n+  {}\n+\n+  static HIR::SimplePath create_error ()\n+  {\n+    return HIR::SimplePath ({}, Analysis::NodeMapping::get_error ());\n+  }\n+\n+  const Analysis::NodeMapping &get_mappings () const { return mappings; }\n+};\n+\n } // namespace HIR\n } // namespace Rust\n "}, {"sha": "66d3e415471d407fd5d8095c480e985da9acf335", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=1ea83c404e82d276524f8af3ac51bd23600bfd24", "patch": "@@ -428,7 +428,7 @@ Mappings::lookup_hir_path_expr_seg (CrateNum crateNum, HirId id)\n \n void\n Mappings::insert_simple_path_segment (CrateNum crateNum, HirId id,\n-\t\t\t\t      AST::SimplePathSegment *path)\n+\t\t\t\t      const AST::SimplePathSegment *path)\n {\n   rust_assert (lookup_simple_path_segment (crateNum, id) == nullptr);\n \n@@ -437,7 +437,7 @@ Mappings::insert_simple_path_segment (CrateNum crateNum, HirId id,\n   insert_location (crateNum, id, path->get_locus ());\n }\n \n-AST::SimplePathSegment *\n+const AST::SimplePathSegment *\n Mappings::lookup_simple_path_segment (CrateNum crateNum, HirId id)\n {\n   auto it = astSimplePathSegmentMappings.find (crateNum);\n@@ -453,7 +453,7 @@ Mappings::lookup_simple_path_segment (CrateNum crateNum, HirId id)\n \n void\n Mappings::insert_simple_path (CrateNum crateNum, HirId id,\n-\t\t\t      AST::SimplePath *path)\n+\t\t\t      const AST::SimplePath *path)\n {\n   rust_assert (lookup_simple_path (crateNum, id) == nullptr);\n \n@@ -462,7 +462,7 @@ Mappings::insert_simple_path (CrateNum crateNum, HirId id,\n   insert_location (crateNum, id, path->get_locus ());\n }\n \n-AST::SimplePath *\n+const AST::SimplePath *\n Mappings::lookup_simple_path (CrateNum crateNum, HirId id)\n {\n   auto it = astSimplePathMappings.find (crateNum);"}, {"sha": "0bb870b491069e3af0d5f6510ee98f05bf2a96d2", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea83c404e82d276524f8af3ac51bd23600bfd24/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=1ea83c404e82d276524f8af3ac51bd23600bfd24", "patch": "@@ -161,12 +161,13 @@ class Mappings\n   HIR::PathExprSegment *lookup_hir_path_expr_seg (CrateNum crateNum, HirId id);\n \n   void insert_simple_path_segment (CrateNum crateNum, HirId id,\n-\t\t\t\t   AST::SimplePathSegment *path);\n-  AST::SimplePathSegment *lookup_simple_path_segment (CrateNum crateNum,\n-\t\t\t\t\t\t      HirId id);\n+\t\t\t\t   const AST::SimplePathSegment *path);\n+  const AST::SimplePathSegment *lookup_simple_path_segment (CrateNum crateNum,\n+\t\t\t\t\t\t\t    HirId id);\n \n-  void insert_simple_path (CrateNum crateNum, HirId id, AST::SimplePath *path);\n-  AST::SimplePath *lookup_simple_path (CrateNum crateNum, HirId id);\n+  void insert_simple_path (CrateNum crateNum, HirId id,\n+\t\t\t   const AST::SimplePath *path);\n+  const AST::SimplePath *lookup_simple_path (CrateNum crateNum, HirId id);\n \n   void insert_hir_generic_param (CrateNum crateNum, HirId id,\n \t\t\t\t HIR::GenericParam *expr);\n@@ -351,8 +352,9 @@ class Mappings\n   std::map<CrateNum, std::map<HirId, HIR::TraitItem *>> hirTraitItemMappings;\n   std::map<CrateNum, std::map<HirId, HIR::ExternalItem *>>\n     hirExternItemMappings;\n-  std::map<CrateNum, std::map<HirId, AST::SimplePath *>> astSimplePathMappings;\n-  std::map<CrateNum, std::map<HirId, AST::SimplePathSegment *>>\n+  std::map<CrateNum, std::map<HirId, const AST::SimplePath *>>\n+    astSimplePathMappings;\n+  std::map<CrateNum, std::map<HirId, const AST::SimplePathSegment *>>\n     astSimplePathSegmentMappings;\n   std::map<CrateNum, std::map<HirId, HIR::PathExprSegment *>>\n     hirPathSegMappings;"}]}