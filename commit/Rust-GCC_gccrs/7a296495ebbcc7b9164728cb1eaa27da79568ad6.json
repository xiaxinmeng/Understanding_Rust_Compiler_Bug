{"sha": "7a296495ebbcc7b9164728cb1eaa27da79568ad6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EyOTY0OTVlYmJjYzdiOTE2NDcyOGNiMWVhYTI3ZGE3OTU2OGFkNg==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2010-04-16T08:04:05Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2010-04-16T08:04:05Z"}, "message": "add accumulate-outgoing-args and omit-frame-pointer for SH\n\nFrom-SVN: r158399", "tree": {"sha": "d2acf806d73665f1b80c0eb7407efc988aacf884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2acf806d73665f1b80c0eb7407efc988aacf884"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a296495ebbcc7b9164728cb1eaa27da79568ad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a296495ebbcc7b9164728cb1eaa27da79568ad6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a296495ebbcc7b9164728cb1eaa27da79568ad6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a296495ebbcc7b9164728cb1eaa27da79568ad6/comments", "author": null, "committer": null, "parents": [{"sha": "169afcb99f761eddccf83acad755c50d997247c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/169afcb99f761eddccf83acad755c50d997247c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/169afcb99f761eddccf83acad755c50d997247c8"}], "stats": {"total": 108, "additions": 87, "deletions": 21}, "files": [{"sha": "032af2b8d8c1c1e7d0a4bd37f44a64188313cef0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a296495ebbcc7b9164728cb1eaa27da79568ad6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a296495ebbcc7b9164728cb1eaa27da79568ad6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a296495ebbcc7b9164728cb1eaa27da79568ad6", "patch": "@@ -1,3 +1,17 @@\n+2010-04-16  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* config/sh/sh.h (sh_frame_pointer_required): New function.\n+\t* config/sh/sh.h (TARGET_FRAME_POINTER_REQUIRED): New macro.\n+\t(flag_omit_frame_pointer) Set.\n+\t(MASK_ACCUMULATE_OUTGOING_ARGS) Define and Set.\n+\t(rounded_frame_size): Adjust size with outgoing_args_size.\n+\t(sh_set_return_address): Must return from stack pointer.\n+\t* gcc/config/sh/sh.h (CAN_DEBUG_WITHOUT_FP): Define.\n+\t(SUBTARGET_FRAME_POINTER_REQUIRED): Define.\n+\t(ACCUMULATE_OUTGOING_ARGS): Define.\n+\t* doc/invoke.texi (maccumulate-outgoing-args): Document for SH.\n+\t* gcc/config/sh/sh.opt: (maccumulate-outgoing-args): New option.\n+\n 2010-04-15  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR target/43471"}, {"sha": "04b98c1eb22fb811dc66432ca571b9926e341a33", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 45, "deletions": 12, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a296495ebbcc7b9164728cb1eaa27da79568ad6/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a296495ebbcc7b9164728cb1eaa27da79568ad6/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=7a296495ebbcc7b9164728cb1eaa27da79568ad6", "patch": "@@ -189,6 +189,7 @@ static void pop (int);\n static void push_regs (HARD_REG_SET *, int);\n static int calc_live_regs (HARD_REG_SET *);\n static HOST_WIDE_INT rounded_frame_size (int);\n+static bool sh_frame_pointer_required (void);\n static rtx mark_constant_pool_use (rtx);\n static tree sh_handle_interrupt_handler_attribute (tree *, tree, tree, int, bool *);\n static tree sh_handle_resbank_handler_attribute (tree *, tree,\n@@ -503,6 +504,9 @@ static const struct attribute_spec sh_attribute_table[] =\n #undef TARGET_DWARF_CALLING_CONVENTION\n #define TARGET_DWARF_CALLING_CONVENTION sh_dwarf_calling_convention\n \n+#undef TARGET_FRAME_POINTER_REQUIRED\n+#define TARGET_FRAME_POINTER_REQUIRED sh_frame_pointer_required\n+\n /* Return regmode weight for insn.  */\n #define INSN_REGMODE_WEIGHT(INSN, MODE)  regmode_weight[((MODE) == SImode) ? 0 : 1][INSN_UID (INSN)]\n \n@@ -666,7 +670,6 @@ sh_optimization_options (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n {\n   if (level)\n     {\n-      flag_omit_frame_pointer = 2;\n       if (!size)\n \tsh_div_str = \"inv:minlat\";\n     }\n@@ -856,16 +859,7 @@ sh_override_options (void)\n     if (! VALID_REGISTER_P (ADDREGNAMES_REGNO (regno)))\n       sh_additional_register_names[regno][0] = '\\0';\n \n-  if (flag_omit_frame_pointer == 2)\n-   {\n-     /* The debugging information is sufficient,\n-        but gdb doesn't implement this yet */\n-     if (0)\n-      flag_omit_frame_pointer\n-        = (PREFERRED_DEBUGGING_TYPE == DWARF2_DEBUG);\n-     else\n-      flag_omit_frame_pointer = 0;\n-   }\n+  flag_omit_frame_pointer = (PREFERRED_DEBUGGING_TYPE == DWARF2_DEBUG);\n \n   if ((flag_pic && ! TARGET_PREFERGOT)\n       || (TARGET_SHMEDIA && !TARGET_PT_FIXED))\n@@ -897,6 +891,24 @@ sh_override_options (void)\n \tflag_schedule_insns = 0;\n     }\n \n+    if ((target_flags_explicit & MASK_ACCUMULATE_OUTGOING_ARGS) == 0)\n+       target_flags |= MASK_ACCUMULATE_OUTGOING_ARGS;\n+\n+  /* Unwind info is not correct around the CFG unless either a frame \n+     pointer is present or M_A_O_A is set.  Fixing this requires rewriting \n+     unwind info generation to be aware of the CFG and propagating states \n+     around edges.  */\n+  if ((flag_unwind_tables || flag_asynchronous_unwind_tables\n+       || flag_exceptions || flag_non_call_exceptions)   \n+      && flag_omit_frame_pointer\n+      && !(target_flags & MASK_ACCUMULATE_OUTGOING_ARGS))\n+    {\n+      if (target_flags_explicit & MASK_ACCUMULATE_OUTGOING_ARGS)\n+\twarning (0, \"unwind tables currently require either a frame pointer \"\n+\t\t \"or -maccumulate-outgoing-args for correctness\");\n+      target_flags |= MASK_ACCUMULATE_OUTGOING_ARGS;\n+    }\n+\n   /* Unwinding with -freorder-blocks-and-partition does not work on this\n      architecture, because it requires far jumps to label crossing between\n      hot/cold sections which are rejected on this architecture.  */\n@@ -6583,6 +6595,9 @@ rounded_frame_size (int pushed)\n   HOST_WIDE_INT size = get_frame_size ();\n   HOST_WIDE_INT align = STACK_BOUNDARY / BITS_PER_UNIT;\n \n+  if (ACCUMULATE_OUTGOING_ARGS)\n+    size += crtl->outgoing_args_size;\n+\n   return ((size + pushed + align - 1) & -align) - pushed;\n }\n \n@@ -7431,7 +7446,11 @@ sh_set_return_address (rtx ra, rtx tmp)\n     pr_offset = rounded_frame_size (d);\n \n   emit_insn (GEN_MOV (tmp, GEN_INT (pr_offset)));\n-  emit_insn (GEN_ADD3 (tmp, tmp, hard_frame_pointer_rtx));\n+\n+  if (frame_pointer_needed)\n+    emit_insn (GEN_ADD3 (tmp, tmp, hard_frame_pointer_rtx));\n+  else\n+    emit_insn (GEN_ADD3 (tmp, tmp, stack_pointer_rtx));\n \n   tmp = gen_frame_mem (Pmode, tmp);\n   emit_insn (GEN_MOV (tmp, ra));\n@@ -10936,6 +10955,20 @@ sh_vector_mode_supported_p (enum machine_mode mode)\n   return false;\n }\n \n+bool\n+sh_frame_pointer_required (void)\n+{\n+/* If needed override this in other tm.h files to cope with various OS \n+   lossage requiring a frame pointer.  */\n+  if (SUBTARGET_FRAME_POINTER_REQUIRED)\n+    return true;\n+\n+  if (crtl->profile)\n+    return true;\n+\n+  return false;\n+}\n+\n /* Implements target hook dwarf_calling_convention.  Return an enum\n    of dwarf_calling_convention.  */\n int"}, {"sha": "f870ba69e98a390161bf46693b001753bcc4e1e7", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a296495ebbcc7b9164728cb1eaa27da79568ad6/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a296495ebbcc7b9164728cb1eaa27da79568ad6/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=7a296495ebbcc7b9164728cb1eaa27da79568ad6", "patch": "@@ -98,8 +98,15 @@ do { \\\n \t\t  ? \"__LITTLE_ENDIAN__\" : \"__BIG_ENDIAN__\"); \\\n } while (0)\n \n-/* We can not debug without a frame pointer.  */\n-/* #define CAN_DEBUG_WITHOUT_FP */\n+#define CAN_DEBUG_WITHOUT_FP \n+\n+/* Value should be nonzero if functions must have frame pointers.\n+   Zero means the frame pointer need not be set up (and parms may be accessed\n+   via the stack pointer) in functions that seem suitable.  */\n+\n+#ifndef SUBTARGET_FRAME_POINTER_REQUIRED\n+#define SUBTARGET_FRAME_POINTER_REQUIRED 0\n+#endif\n \n #define CONDITIONAL_REGISTER_USAGE do\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n@@ -2633,11 +2640,9 @@ extern int current_function_interrupt;\n \n #define SIDI_OFF (TARGET_LITTLE_ENDIAN ? 0 : 4)\n \n-/* ??? Define ACCUMULATE_OUTGOING_ARGS?  This is more efficient than pushing\n-   and popping arguments.  However, we do have push/pop instructions, and\n-   rather limited offsets (4 bits) in load/store instructions, so it isn't\n-   clear if this would give better code.  If implemented, should check for\n-   compatibility problems.  */\n+/* Better to allocate once the maximum space for outgoing args in the\n+   prologue rather than duplicate around each call.  */\n+#define ACCUMULATE_OUTGOING_ARGS TARGET_ACCUMULATE_OUTGOING_ARGS\n \n #define SH_DYNAMIC_SHIFT_COST \\\n   (TARGET_HARD_SH4 ? 1 : TARGET_SH3 ? (TARGET_SMALLCODE ? 1 : 2) : 20)"}, {"sha": "95e2ca439d550a955fb93318fc165c87859cb0b2", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a296495ebbcc7b9164728cb1eaa27da79568ad6/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a296495ebbcc7b9164728cb1eaa27da79568ad6/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=7a296495ebbcc7b9164728cb1eaa27da79568ad6", "patch": "@@ -200,6 +200,10 @@ m5-compact-nofpu\n Target RejectNegative Condition(SUPPORT_SH5_32MEDIA_NOFPU)\n Generate FPU-less SHcompact code\n \n+maccumulate-outgoing-args\n+Target Report Mask(ACCUMULATE_OUTGOING_ARGS)\n+Reserve space for outgoing arguments in the function prologue\n+\n madjust-unroll\n Target Report Mask(ADJUST_UNROLL) Condition(SUPPORT_ANY_SH5)\n Throttle unrolling to avoid thrashing target registers unless the unroll benefit outweighs this"}, {"sha": "8dcba6ee0c8642e7b1e8e6907b22d5d348a63436", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a296495ebbcc7b9164728cb1eaa27da79568ad6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a296495ebbcc7b9164728cb1eaa27da79568ad6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7a296495ebbcc7b9164728cb1eaa27da79568ad6", "patch": "@@ -826,7 +826,7 @@ See RS/6000 and PowerPC Options.\n -mprefergot  -musermode -multcost=@var{number} -mdiv=@var{strategy} @gol\n -mdivsi3_libfunc=@var{name} -mfixed-range=@var{register-range} @gol\n -madjust-unroll -mindexed-addressing -mgettrcost=@var{number} -mpt-fixed @gol\n--minvalid-symbols}\n+-maccumulate-outgoing-args -minvalid-symbols}\n \n @emph{SPARC Options}\n @gccoptlist{-mcpu=@var{cpu-type} @gol\n@@ -16137,6 +16137,12 @@ by inserting a test to skip a number of operations in this case; this test\n slows down the case of larger dividends.  inv20u assumes the case of a such\n a small dividend to be unlikely, and inv20l assumes it to be likely.\n \n+@item -maccumulate-outgoing-args\n+@opindex maccumulate-outgoing-args\n+Reserve space once for outgoing arguments in the function prologue rather \n+than around each call.  Generally beneficial for performance and size.  Also\n+needed for unwinding to avoid changing the stack frame around conditional code.\n+\n @item -mdivsi3_libfunc=@var{name}\n @opindex mdivsi3_libfunc=@var{name}\n Set the name of the library function used for 32 bit signed division to"}, {"sha": "a029d982b25c91a28007e882df6f7246ffb3fd40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a296495ebbcc7b9164728cb1eaa27da79568ad6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a296495ebbcc7b9164728cb1eaa27da79568ad6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a296495ebbcc7b9164728cb1eaa27da79568ad6", "patch": "@@ -1,3 +1,7 @@\n+2010-04-16  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* g++.dg/torture/pr36191.C: Enable for SH.\n+\n 2010-04-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/wide_boolean.adb: New test."}, {"sha": "175707d1baf3c922753ff0b19eaadc9b929ffda6", "filename": "gcc/testsuite/g++.dg/torture/pr36191.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a296495ebbcc7b9164728cb1eaa27da79568ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr36191.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a296495ebbcc7b9164728cb1eaa27da79568ad6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr36191.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr36191.C?ref=7a296495ebbcc7b9164728cb1eaa27da79568ad6", "patch": "@@ -1,7 +1,7 @@\n // PR c++/36191\n // { dg-do compile }\n // { dg-options \"-fnon-call-exceptions\" }\n-// { dg-skip-if \"Frame pointer required for unwind tables\" { sh*-*-* m68k*-*-* fido*-*-* } \"-fomit-frame-pointer\" \"\" }\n+// { dg-skip-if \"Frame pointer required for unwind tables\" { m68k*-*-* fido*-*-* } \"-fomit-frame-pointer\" \"\" }\n \n __complex__ double\n foo (__complex__ double x, double y)"}]}