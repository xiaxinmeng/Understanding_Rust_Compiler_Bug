{"sha": "377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc3ZjMwYzAwZjNiOGI4YjBkYTc0OGRiYjlkOTg4ZmE2N2E4ZWMyZg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-09-20T15:15:36Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-09-20T15:15:36Z"}, "message": "re PR libstdc++/77619 (uninitialized_meow_construct and friends not exception safe)\n\n\tPR libstdc++/77619\n\t* include/bits/stl_construct.h: (_Construct_novalue): New.\n\t(_Destroy_n_aux, _Destroy_n): New.\n\t* include/bits/stl_uninitialized.h: (type_traits):\n\tNew include in C++11 mode.\n\t(__uninitialized_default_novalue_1): New.\n\t(__uninitialized_default_novalue_n_1): Likewise.\n\t(__uninitialized_default_novalue): Likewise.\n\t(__uninitialized_default_novalue_n): Likewise.\n\t(__uninitialized_copy_n_pair): Likewise.\n\t(uninitialized_default_construct):\n\tUse __uninitialized_default_novalue.\n\t(uninitialized_default_construct_n):\n\tUse __uninitialized_default_novalue_n.\n\t(uninitialized_value_construct): Use __uninitialized_default.\n\t(uninitialized_value_construct_n): Use __uninitialized_default_n.\n\t(uninitialized_move): Use uninitialized_copy.\n\t(uninitialized_move_n): Use __uninitialized_copy_n_pair.\n\t(destroy_at): Use _Destroy.\n\t(destroy): Likewise.\n\t(destroy_n): Likewise.\n\t* testsuite/20_util/specialized_algorithms/\n\tmemory_management_tools/1.cc: Add tests for exceptions,\n\tadd tests for trivial cases for construct and move.\n\nFrom-SVN: r240264", "tree": {"sha": "356ee8f4d2f55dc7174b1dfcb39e330821546d25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/356ee8f4d2f55dc7174b1dfcb39e330821546d25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d9cf8015969054f044ee815f0308e7130c59b83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9cf8015969054f044ee815f0308e7130c59b83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d9cf8015969054f044ee815f0308e7130c59b83"}], "stats": {"total": 440, "additions": 410, "deletions": 30}, "files": [{"sha": "3981509f5d9ceef1d5b99727a4e69157bcd70f60", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f", "patch": "@@ -1,3 +1,30 @@\n+2016-09-20  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR libstdc++/77619\n+\t* include/bits/stl_construct.h: (_Construct_novalue): New.\n+\t(_Destroy_n_aux, _Destroy_n): New.\n+\t* include/bits/stl_uninitialized.h: (type_traits):\n+\tNew include in C++11 mode.\n+\t(__uninitialized_default_novalue_1): New.\n+\t(__uninitialized_default_novalue_n_1): Likewise.\n+\t(__uninitialized_default_novalue): Likewise.\n+\t(__uninitialized_default_novalue_n): Likewise.\n+\t(__uninitialized_copy_n_pair): Likewise.\n+\t(uninitialized_default_construct):\n+\tUse __uninitialized_default_novalue.\n+\t(uninitialized_default_construct_n):\n+\tUse __uninitialized_default_novalue_n.\n+\t(uninitialized_value_construct): Use __uninitialized_default.\n+\t(uninitialized_value_construct_n): Use __uninitialized_default_n.\n+\t(uninitialized_move): Use uninitialized_copy.\n+\t(uninitialized_move_n): Use __uninitialized_copy_n_pair.\n+\t(destroy_at): Use _Destroy.\n+\t(destroy): Likewise.\n+\t(destroy_n): Likewise.\n+\t* testsuite/20_util/specialized_algorithms/\n+\tmemory_management_tools/1.cc: Add tests for exceptions,\n+\tadd tests for trivial cases for construct and move.\n+\n 2016-09-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* python/libstdcxx/v6/xmethods.py (DequeWorkerBase.__init__)"}, {"sha": "4a771c4f0d19379a84c9d47c8656a6807ed3072c", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f", "patch": "@@ -84,6 +84,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #endif\n \n+  template<typename _T1>\n+    inline void\n+    _Construct_novalue(_T1* __p)\n+    { ::new(static_cast<void*>(__p)) _T1; }\n+\n   /**\n    * Destroy the object pointed to by a pointer type.\n    */\n@@ -127,6 +132,46 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__destroy(__first, __last);\n     }\n \n+  template<bool>\n+    struct _Destroy_n_aux\n+    {\n+      template<typename _ForwardIterator, typename _Size>\n+        static _ForwardIterator\n+        __destroy_n(_ForwardIterator __first, _Size __count)\n+\t{\n+\t  for (; __count > 0; (void)++__first, --__count)\n+\t    std::_Destroy(std::__addressof(*__first));\n+\t  return __first;\n+\t}\n+    };\n+\n+  template<>\n+    struct _Destroy_n_aux<true>\n+    {\n+      template<typename _ForwardIterator, typename _Size>\n+        static _ForwardIterator\n+        __destroy_n(_ForwardIterator __first, _Size __count)\n+      {\n+\t std::advance(__first, __count);\n+\t return __first;\n+      }\n+    };\n+\n+  /**\n+   * Destroy a range of objects.  If the value_type of the object has\n+   * a trivial destructor, the compiler should optimize all of this\n+   * away, otherwise the objects' destructors must be invoked.\n+   */\n+  template<typename _ForwardIterator, typename _Size>\n+    inline _ForwardIterator\n+    _Destroy_n(_ForwardIterator __first, _Size __count)\n+    {\n+      typedef typename iterator_traits<_ForwardIterator>::value_type\n+                       _Value_type;\n+      return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::\n+\t__destroy_n(__first, __count);\n+    }\n+\n   /**\n    * Destroy a range of objects using the supplied allocator.  For\n    * nondefault allocators we do not optimize away invocation of "}, {"sha": "ef2e584c1b3dda40b096c048deb7d99e99485213", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 155, "deletions": 30, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f", "patch": "@@ -60,6 +60,10 @@\n #include <utility>\n #endif\n \n+#if __cplusplus >= 201103L\n+#include <type_traits>\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -640,6 +644,100 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\tallocator<_Tp>&)\n     { return std::__uninitialized_default_n(__first, __n); }\n \n+  template<bool _TrivialValueType>\n+    struct __uninitialized_default_novalue_1\n+    {\n+      template<typename _ForwardIterator>\n+\tstatic void\n+\t__uninit_default_novalue(_ForwardIterator __first,\n+\t\t\t\t _ForwardIterator __last)\n+\t{\n+\t  _ForwardIterator __cur = __first;\n+\t  __try\n+\t    {\n+\t      for (; __cur != __last; ++__cur)\n+\t\tstd::_Construct_novalue(std::__addressof(*__cur));\n+\t    }\n+\t  __catch(...)\n+\t    {\n+\t      std::_Destroy(__first, __cur);\n+\t      __throw_exception_again;\n+\t    }\n+\t}\n+    };\n+\n+  template<>\n+    struct __uninitialized_default_novalue_1<true>\n+    {\n+      template<typename _ForwardIterator>\n+        static void\n+        __uninit_default_novalue(_ForwardIterator __first,\n+\t\t\t\t _ForwardIterator __last)\n+\t{\n+\t}\n+    };\n+\n+  template<bool _TrivialValueType>\n+    struct __uninitialized_default_novalue_n_1\n+    {\n+      template<typename _ForwardIterator, typename _Size>\n+\tstatic _ForwardIterator\n+\t__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)\n+\t{\n+\t  _ForwardIterator __cur = __first;\n+\t  __try\n+\t    {\n+\t      for (; __n > 0; --__n, ++__cur)\n+\t\tstd::_Construct_novalue(std::__addressof(*__cur));\n+\t      return __cur;\n+\t    }\n+\t  __catch(...)\n+\t    {\n+\t      std::_Destroy(__first, __cur);\n+\t      __throw_exception_again;\n+\t    }\n+\t}\n+    };\n+\n+  template<>\n+    struct __uninitialized_default_novalue_n_1<true>\n+    {\n+      template<typename _ForwardIterator, typename _Size>\n+\tstatic _ForwardIterator\n+\t__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)\n+\t{\n+\t}\n+    };\n+\n+  // __uninitialized_default_novalue\n+  // Fills [first, last) with std::distance(first, last) default-initialized\n+  // value_types(s).\n+  template<typename _ForwardIterator>\n+    inline void\n+    __uninitialized_default_novalue(_ForwardIterator __first,\n+\t\t\t\t    _ForwardIterator __last)\n+    {\n+      typedef typename iterator_traits<_ForwardIterator>::value_type\n+\t_ValueType;\n+\n+      std::__uninitialized_default_novalue_1<\n+\tis_trivially_default_constructible<_ValueType>::value>::\n+\t__uninit_default_novalue(__first, __last);\n+    }\n+\n+  // __uninitialized_default_n\n+  // Fills [first, first + n) with n default-initialized value_type(s).\n+  template<typename _ForwardIterator, typename _Size>\n+    inline _ForwardIterator\n+    __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)\n+    {\n+      typedef typename iterator_traits<_ForwardIterator>::value_type\n+\t_ValueType;\n+\n+      return __uninitialized_default_novalue_n_1<\n+\tis_trivially_default_constructible<_ValueType>::value>::\n+\t__uninit_default_novalue_n(__first, __n);\n+    }\n \n   template<typename _InputIterator, typename _Size,\n \t   typename _ForwardIterator>\n@@ -669,6 +767,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t   random_access_iterator_tag)\n     { return std::uninitialized_copy(__first, __first + __n, __result); }\n \n+  template<typename _InputIterator, typename _Size,\n+\t   typename _ForwardIterator>\n+    pair<_InputIterator, _ForwardIterator>\n+    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,\n+\t\t\t   _ForwardIterator __result, input_iterator_tag)\n+    {\n+      _ForwardIterator __cur = __result;\n+      __try\n+\t{\n+\t  for (; __n > 0; --__n, ++__first, ++__cur)\n+\t    std::_Construct(std::__addressof(*__cur), *__first);\n+\t  return {__first, __cur};\n+\t}\n+      __catch(...)\n+\t{\n+\t  std::_Destroy(__result, __cur);\n+\t  __throw_exception_again;\n+\t}\n+    }\n+\n+  template<typename _RandomAccessIterator, typename _Size,\n+\t   typename _ForwardIterator>\n+    inline pair<_RandomAccessIterator, _ForwardIterator>\n+    __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,\n+\t\t\t   _ForwardIterator __result,\n+\t\t\t   random_access_iterator_tag)\n+    {\n+      auto __second_res = uninitialized_copy(__first, __first + __n, __result);\n+      auto __first_res = std::next(__first, __n);\n+      return {__first_res, __second_res};\n+    }\n+\n   /**\n    *  @brief Copies the range [first,first+n) into result.\n    *  @param  __first  An input iterator.\n@@ -684,6 +814,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t _ForwardIterator __result)\n     { return std::__uninitialized_copy_n(__first, __n, __result,\n \t\t\t\t\t std::__iterator_category(__first)); }\n+\n+  template<typename _InputIterator, typename _Size, typename _ForwardIterator>\n+    inline pair<_InputIterator, _ForwardIterator>\n+    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,\n+\t\t\t      _ForwardIterator __result)\n+    {\n+      return\n+\tstd::__uninitialized_copy_n_pair(__first, __n, __result,\n+\t\t\t\t\t std::__iterator_category(__first));\n+    }\n+\n #endif\n \n #if __cplusplus > 201402L\n@@ -692,87 +833,71 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     uninitialized_default_construct(_ForwardIterator __first,\n \t\t\t\t    _ForwardIterator __last)\n   {\n-    for (; __first != __last; ++__first)\n-      ::new (static_cast<void*>(std::__addressof(*__first)))\n-\t  typename iterator_traits<_ForwardIterator>::value_type;\n+    __uninitialized_default_novalue(__first, __last);\n   }\n \n   template <typename _ForwardIterator, typename _Size>\n     inline _ForwardIterator\n     uninitialized_default_construct_n(_ForwardIterator __first, _Size __count)\n   {\n-    for (; __count > 0; (void)++__first, --__count)\n-      ::new (static_cast<void*>(std::__addressof(*__first)))\n-\t  typename iterator_traits<_ForwardIterator>::value_type;\n-    return __first;\n+    return __uninitialized_default_novalue_n(__first, __count);\n   }\n \n   template <typename _ForwardIterator>\n     inline void\n     uninitialized_value_construct(_ForwardIterator __first,\n \t\t\t\t  _ForwardIterator __last)\n   {\n-    for (; __first != __last; ++__first)\n-      ::new (static_cast<void*>(std::__addressof(*__first)))\n-\t  typename iterator_traits<_ForwardIterator>::value_type();\n+    return __uninitialized_default(__first, __last);\n   }\n \n   template <typename _ForwardIterator, typename _Size>\n     inline _ForwardIterator\n     uninitialized_value_construct_n(_ForwardIterator __first, _Size __count)\n   {\n-    for (; __count > 0; (void)++__first, --__count)\n-      ::new (static_cast<void*>(std::__addressof(*__first)))\n-\t  typename iterator_traits<_ForwardIterator>::value_type();\n-    return __first;\n+    return __uninitialized_default_n(__first, __count);\n   }\n \n   template <typename _InputIterator, typename _ForwardIterator>\n     inline _ForwardIterator\n     uninitialized_move(_InputIterator __first, _InputIterator __last,\n \t\t       _ForwardIterator __result)\n   {\n-    for (; __first != __last; (void)++__result, ++__first)\n-      ::new (static_cast<void*>(std::__addressof(*__result)))\n-\t  typename\n-\t  iterator_traits<_ForwardIterator>::value_type(std::move(*__first));\n-    return __result;\n+    return std::uninitialized_copy\n+      (_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n+       _GLIBCXX_MAKE_MOVE_ITERATOR(__last), __result);\n   }\n \n   template <typename _InputIterator, typename _Size, typename _ForwardIterator>\n     inline pair<_InputIterator, _ForwardIterator>\n     uninitialized_move_n(_InputIterator __first, _Size __count,\n \t\t\t _ForwardIterator __result)\n   {\n-    for (; __count > 0; ++__result, (void) ++__first, --__count)\n-      ::new (static_cast<void*>(std::__addressof(*__result)))\n-\t  typename\n-\t  iterator_traits<_ForwardIterator>::value_type(std::move(*__first));\n-    return {__first, __result};\n+    auto __res = std::__uninitialized_copy_n_pair\n+      (_GLIBCXX_MAKE_MOVE_ITERATOR(__first),\n+       __count, __result);\n+    return {__res.first.base(), __res.second};\n   }\n \n   template <typename _Tp>\n     inline void\n     destroy_at(_Tp* __location)\n   {\n-    __location->~_Tp();\n+    std::_Destroy(__location);\n   }\n \n   template <typename _ForwardIterator>\n     inline void\n     destroy(_ForwardIterator __first, _ForwardIterator __last)\n   {\n-    for (; __first != __last; ++__first)\n-      std::destroy_at(std::__addressof(*__first));\n+    std::_Destroy(__first, __last);\n   }\n \n   template <typename _ForwardIterator, typename _Size>\n     inline _ForwardIterator\n     destroy_n(_ForwardIterator __first, _Size __count)\n   {\n-    for (; __count > 0; (void)++__first, --__count)\n-      std::destroy_at(std::__addressof(*__first));\n-    return __first;\n+    return std::_Destroy_n(__first, __count);\n   }\n \n #endif"}, {"sha": "84a68579344b19f275f3f14acfef2f5551297cef", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/memory_management_tools/1.cc", "status": "modified", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fmemory_management_tools%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fmemory_management_tools%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fmemory_management_tools%2F1.cc?ref=377f30c00f3b8b8b0da748dbb9d988fa67a8ec2f", "patch": "@@ -21,14 +21,40 @@\n #include <testsuite_hooks.h>\n #include <string>\n #include <array>\n+#include <sstream>\n \n int del_count = 0;\n+int ctor_count = 0;\n+int throw_after = 0;\n \n struct DelCount\n {\n   ~DelCount() { ++del_count; }\n };\n \n+struct ThrowAfterN\n+{\n+  ThrowAfterN()\n+  {\n+    if (++ctor_count == throw_after) {\n+      std::ostringstream os;\n+      os << \"ThrowAfterN(), ctor_count: \" << ctor_count\n+\t << \" throw_after: \" << throw_after << std::endl;\n+      throw std::runtime_error(os.str());\n+    }\n+  }\n+  ThrowAfterN(ThrowAfterN&&)\n+  {\n+    if (++ctor_count == throw_after) {\n+      std::ostringstream os;\n+      os << \"ThrowAfterN(), ctor_count: \" << ctor_count\n+\t << \" throw_after: \" << throw_after << std::endl;\n+      throw std::runtime_error(os.str());\n+    }\n+  }\n+  DelCount dc;\n+};\n+\n void test01()\n {\n   char test_data[] = \"123456\";\n@@ -118,6 +144,153 @@ void test09()\n   free(target);\n }\n \n+void test10()\n+{\n+  char* x = (char*)malloc(sizeof(char)*10);\n+  for (int i = 0; i < 10; ++i) new (x+i) char;\n+  std::destroy(x, x+10);\n+  free(x);\n+}\n+\n+void test11()\n+{\n+  char* x = (char*)malloc(sizeof(char)*10);\n+  for (int i = 0; i < 10; ++i) new (x+i) char;\n+  std::destroy_n(x, 10);\n+  free(x);\n+}\n+\n+void test12()\n+{\n+  throw_after = 5;\n+  del_count = 0;\n+  ctor_count = 0;\n+  ThrowAfterN* target =\n+    (ThrowAfterN*)malloc(sizeof(ThrowAfterN)*10);\n+  try {\n+    std::uninitialized_default_construct(target, target+10);\n+  } catch (...) {\n+  }\n+  VERIFY(ctor_count == 5);\n+  VERIFY(del_count == 5);\n+  throw_after = 0;\n+  del_count = 0;\n+  ctor_count = 0;\n+}\n+\n+void test13()\n+{\n+  throw_after = 5;\n+  del_count = 0;\n+  ctor_count = 0;\n+  ThrowAfterN* target =\n+    (ThrowAfterN*)malloc(sizeof(ThrowAfterN)*10);\n+  try {\n+    std::uninitialized_value_construct(target, target+10);\n+  } catch (...) {\n+  }\n+  VERIFY(ctor_count == 5);\n+  VERIFY(del_count == 5);\n+  throw_after = 0;\n+  del_count = 0;\n+  ctor_count = 0;\n+}\n+\n+void test14()\n+{\n+  throw_after = 5;\n+  del_count = 0;\n+  ctor_count = 0;\n+  ThrowAfterN* target =\n+    (ThrowAfterN*)malloc(sizeof(ThrowAfterN)*10);\n+  try {\n+    std::uninitialized_default_construct_n(target, 10);\n+  } catch (...) {\n+  }\n+  VERIFY(ctor_count == 5);\n+  VERIFY(del_count == 5);\n+  throw_after = 0;\n+  del_count = 0;\n+  ctor_count = 0;\n+}\n+\n+void test15()\n+{\n+  throw_after = 5;\n+  del_count = 0;\n+  ctor_count = 0;\n+  ThrowAfterN* target =\n+    (ThrowAfterN*)malloc(sizeof(ThrowAfterN)*10);\n+  try {\n+    std::uninitialized_value_construct_n(target, 10);\n+  } catch (...) {\n+  }\n+  VERIFY(ctor_count == 5);\n+  VERIFY(del_count == 5);\n+  throw_after = 0;\n+  del_count = 0;\n+  ctor_count = 0;\n+}\n+\n+void test16()\n+{\n+  std::vector<ThrowAfterN> source(10);\n+  del_count = 0;\n+  ctor_count = 0;\n+  throw_after = 5;\n+  throw_after = 5;\n+  ThrowAfterN* target =\n+    (ThrowAfterN*)malloc(sizeof(ThrowAfterN)*10);\n+  try {\n+    std::uninitialized_move(source.begin(), source.end(), target);\n+  } catch (...) {\n+  }\n+  VERIFY(ctor_count == 5);\n+  VERIFY(del_count == 5);\n+  throw_after = 0;\n+  del_count = 0;\n+  ctor_count = 0;\n+}\n+\n+void test17()\n+{\n+  std::vector<ThrowAfterN> source(10);\n+  del_count = 0;\n+  ctor_count = 0;\n+  throw_after = 5;\n+  ThrowAfterN* target =\n+    (ThrowAfterN*)malloc(sizeof(ThrowAfterN)*10);\n+  try {\n+    std::uninitialized_move_n(source.begin(), 10, target);\n+  } catch (...) {\n+  }\n+  VERIFY(ctor_count == 5);\n+  VERIFY(del_count == 5);\n+  throw_after = 0;\n+  del_count = 0;\n+  ctor_count = 0;\n+}\n+\n+void test18()\n+{\n+  char test_source[] = \"123456\";\n+  char test_target[] = \"000000\";\n+  std::uninitialized_move(std::begin(test_source),\n+\t\t\t  std::end(test_source),\n+\t\t\t  test_target);\n+  VERIFY(std::string(test_target) == \"123456\");\n+}\n+\n+void test19()\n+{\n+  char test_source[] = \"123456\";\n+  char test_target[] = \"000000\";\n+  std::uninitialized_move_n(std::begin(test_source),\n+\t\t\t    6,\n+\t\t\t    test_target);\n+  VERIFY(std::string(test_target) == \"123456\");\n+}\n+\n int main()\n {\n   test01();\n@@ -129,4 +302,14 @@ int main()\n   test07();\n   test08();\n   test09();\n+  test10();\n+  test11();\n+  test12();\n+  test13();\n+  test14();\n+  test15();\n+  test16();\n+  test17();\n+  test18();\n+  test19();\n }"}]}