{"sha": "54533a0b36101d77e146f1d88e8dfcaad467730a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ1MzNhMGIzNjEwMWQ3N2UxNDZmMWQ4OGU4ZGZjYWFkNDY3NzMwYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-22T11:17:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-22T11:17:01Z"}, "message": "[multiple changes]\n\n2014-01-22  Jerome Guitton  <guitton@adacore.com>\n\n\t* mlib-tgt-specific-vxworks.adb (Get_Target_Suffix): Replace xscale by\n\tarm.\n\n2014-01-22  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi, gnat_ugn.texi: Document passive task optimization\n\nFrom-SVN: r206919", "tree": {"sha": "f0c8d4732732c4f922c4c8e15657948940521012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0c8d4732732c4f922c4c8e15657948940521012"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54533a0b36101d77e146f1d88e8dfcaad467730a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54533a0b36101d77e146f1d88e8dfcaad467730a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54533a0b36101d77e146f1d88e8dfcaad467730a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54533a0b36101d77e146f1d88e8dfcaad467730a/comments", "author": null, "committer": null, "parents": [{"sha": "3044bbe427434f1dcd74a01130aab9935316d3ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3044bbe427434f1dcd74a01130aab9935316d3ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3044bbe427434f1dcd74a01130aab9935316d3ad"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "68a641495b35a3cfb61b2e88c8c77848a36a2f42", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54533a0b36101d77e146f1d88e8dfcaad467730a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54533a0b36101d77e146f1d88e8dfcaad467730a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=54533a0b36101d77e146f1d88e8dfcaad467730a", "patch": "@@ -1,3 +1,12 @@\n+2014-01-22  Jerome Guitton  <guitton@adacore.com>\n+\n+\t* mlib-tgt-specific-vxworks.adb (Get_Target_Suffix): Replace xscale by\n+\tarm.\n+\n+2014-01-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi, gnat_ugn.texi: Document passive task optimization\n+\n 2014-01-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/Makefile.in: Minor fixes."}, {"sha": "adf4ec20a9de708a37d795fbb014558f6094ed13", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54533a0b36101d77e146f1d88e8dfcaad467730a/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54533a0b36101d77e146f1d88e8dfcaad467730a/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=54533a0b36101d77e146f1d88e8dfcaad467730a", "patch": "@@ -5060,6 +5060,9 @@ desired.  If the argument @code{No} is present, the task must not be\n optimized.  GNAT does not attempt to optimize any tasks in this manner\n (since protected objects are available in place of passive tasks).\n \n+For more information on the subject of passive tasks, see the section\n+``Passive Task Optimization'' in the GNAT Users Guide.\n+\n @node Pragma Persistent_BSS\n @unnumberedsec Pragma Persistent_BSS\n @findex Persistent_BSS"}, {"sha": "c84b0a9430bab607686cefa394e4885993e26f7f", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54533a0b36101d77e146f1d88e8dfcaad467730a/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54533a0b36101d77e146f1d88e8dfcaad467730a/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=54533a0b36101d77e146f1d88e8dfcaad467730a", "patch": "@@ -10154,6 +10154,7 @@ some guidelines on debugging optimized code.\n * Other Optimization Switches::\n * Optimization and Strict Aliasing::\n * Aliased Variables and Optimization::\n+* Passive Task Optimization::\n \n @ifset vms\n * Coverage Analysis::\n@@ -10999,6 +11000,48 @@ inhibits optimizations that assume the value cannot be assigned.\n This means that the above example will in fact \"work\" reliably,\n that is, it will produce the expected results.\n \n+@node Passive Task Optimization\n+@subsection Passive Task Optimization\n+@cindex Passive Task\n+\n+A passive task is one which is sufficiently simple that\n+in theory a compiler could recognize it an implement it\n+efficiently without creating a new thread. The original design\n+of Ada 83 had in mind this kind of passive task optimization, but\n+only a few Ada 83 compilers attempted it. The problem was that\n+it was difficult to determine the exact conditions under which\n+the optimization was possible. The result is a very fragile\n+optimization where a very minor change in the program can\n+suddenly silently make a task non-optimizable.\n+\n+With the revisiting of this issue in Ada 95, there was general\n+agreement that this approach was fundamentally flawed, and the\n+notion of protected types was introduced. When using protected\n+types, the restrictions are well defined, and you KNOW that the\n+operations will be optimized, and furthermore this optimized\n+performance is fully portable.\n+\n+Although it would theoretically be possible for GNAT to attempt to\n+do this optimization, but it really doesn't make sense in the\n+context of Ada 95, and none of the Ada 95 compilers implement\n+this optimization as far as we know. In particular GNAT never\n+attempts to perform this optimization.\n+\n+In any new Ada 95 code that is written, you should always\n+use protected types in place of tasks that might be able to\n+be optimized in this manner.\n+Of course this does not help if you have legacy Ada 83 code\n+that depends on this optimization, but it is unusual to encounter\n+a case where the performance gains from this optimization\n+are significant.\n+\n+Your program should work correctly without this optimization. If\n+you have performance problems, then the most practical\n+approach is to figure out exactly where these performance problems\n+arise, and update those particular tasks to be protected types. Note\n+that typically clients of the tasks who call entries, will not have\n+to be modified, only the task definition itself.\n+\n @ifset vms\n @node Coverage Analysis\n @subsection Coverage Analysis"}, {"sha": "29abd80147f6050e22c4fdab80fbfeb6fe709c14", "filename": "gcc/ada/mlib-tgt-specific-vxworks.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54533a0b36101d77e146f1d88e8dfcaad467730a/gcc%2Fada%2Fmlib-tgt-specific-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54533a0b36101d77e146f1d88e8dfcaad467730a/gcc%2Fada%2Fmlib-tgt-specific-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmlib-tgt-specific-vxworks.adb?ref=54533a0b36101d77e146f1d88e8dfcaad467730a", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -157,7 +157,7 @@ package body MLib.Tgt.Specific is\n          return \"sparc\";\n       elsif Target_Name (Target_Name'First .. Index) = \"sparc64\" then\n          return \"sparc64\";\n-      elsif Target_Name (Target_Name'First .. Index) = \"xscale\" then\n+      elsif Target_Name (Target_Name'First .. Index) = \"arm\" then\n          return \"arm\";\n       elsif Target_Name (Target_Name'First .. Index) = \"i586\" then\n          return \"pentium\";"}]}