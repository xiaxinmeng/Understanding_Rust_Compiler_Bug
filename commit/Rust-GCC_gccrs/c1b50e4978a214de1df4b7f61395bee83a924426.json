{"sha": "c1b50e4978a214de1df4b7f61395bee83a924426", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFiNTBlNDk3OGEyMTRkZTFkZjRiN2Y2MTM5NWJlZTgzYTkyNDQyNg==", "commit": {"author": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-01-16T15:37:57Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-01-16T15:37:57Z"}, "message": "dbxout.c (lastfile, cwd): Fix `unused' warning.\n\n\t* dbxout.c (lastfile, cwd): Fix `unused' warning.\n\t* dwarf2out.c (fde_table_in_use, current_funcdef_fde,\n\tdw_cfi_oprnd1_desc, dw_cfi_oprnd2_desc, next_die_offset,\n\tis_main_source, file_table, decl_die_table_in_use,\n\tabbrev_die_table_in_use, line_info_table_in_use,\n\tseparate_line_info_table_in_use, pubname_table_in_use,\n\tarange_table_in_use, ranges_table_in_use,\n\tcurrent_function_has_inlines): Likewise.\n\t* flow.c (life_analysis): Likewise.\n\t* genemit.c (gen_insn): Likewise.\n\t* protoize.c (cplus_suffix): Likewise.\n\nFrom-SVN: r61392", "tree": {"sha": "8e1daad7c2e283ef9a752a13edb569be18027b32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e1daad7c2e283ef9a752a13edb569be18027b32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1b50e4978a214de1df4b7f61395bee83a924426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b50e4978a214de1df4b7f61395bee83a924426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b50e4978a214de1df4b7f61395bee83a924426", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b50e4978a214de1df4b7f61395bee83a924426/comments", "author": null, "committer": null, "parents": [{"sha": "93d8c755c1c1ff211f75564b877a490e2df70384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d8c755c1c1ff211f75564b877a490e2df70384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93d8c755c1c1ff211f75564b877a490e2df70384"}], "stats": {"total": 63, "additions": 45, "deletions": 18}, "files": [{"sha": "468ee0969d386c01aacab024776c1be26e75c823", "filename": "gcc/dbxout.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b50e4978a214de1df4b7f61395bee83a924426/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b50e4978a214de1df4b7f61395bee83a924426/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=c1b50e4978a214de1df4b7f61395bee83a924426", "patch": "@@ -137,14 +137,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define STABS_GCC_MARKER \"gcc2_compiled.\"\n #endif\n \n-/* Last source file name mentioned in a NOTE insn.  */\n-\n-static const char *lastfile;\n-\n-/* Current working directory.  */\n-\n-static const char *cwd;\n-\n enum typestatus {TYPE_UNSEEN, TYPE_XREF, TYPE_DEFINED};\n \n /* Structure recording information about a C data type.\n@@ -202,6 +194,14 @@ static GTY(()) int next_file_number;\n \n #if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n \n+/* Last source file name mentioned in a NOTE insn.  */\n+\n+static const char *lastfile;\n+\n+/* Current working directory.  */\n+\n+static const char *cwd;\n+\n /* Nonzero if we have actually used any of the GDB extensions\n    to the debugging format.  The idea is that we use them for the\n    first time only if there's a strong reason, but once we have done that,"}, {"sha": "f16d3b221150a1f01b4a21a951102fb2c9449ffc", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b50e4978a214de1df4b7f61395bee83a924426/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b50e4978a214de1df4b7f61395bee83a924426/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c1b50e4978a214de1df4b7f61395bee83a924426", "patch": "@@ -279,8 +279,10 @@ static GTY((length (\"fde_table_allocated\"))) dw_fde_ref fde_table;\n /* Number of elements currently allocated for fde_table.  */\n static unsigned fde_table_allocated;\n \n+#if defined (DWARF2_DEBUGGING_INFO) || defined (DWARF2_UNWIND_INFO)\n /* Number of elements in fde_table currently in use.  */\n static unsigned fde_table_in_use;\n+#endif\n \n /* Size (in elements) of increments by which we may expand the\n    fde_table.  */\n@@ -289,11 +291,13 @@ static unsigned fde_table_in_use;\n /* A list of call frame insns for the CIE.  */\n static GTY(()) dw_cfi_ref cie_cfi_head;\n \n+#if defined (DWARF2_DEBUGGING_INFO) || defined (DWARF2_UNWIND_INFO)\n /* Some DWARF extensions (e.g., MIPS/SGI) implement a subprogram\n    attribute that accelerates the lookup of the FDE associated\n    with the subprogram.  This variable holds the table index of the FDE\n    associated with the current function (body) definition.  */\n static unsigned current_funcdef_fde;\n+#endif\n \n struct indirect_string_node GTY(())\n {\n@@ -324,10 +328,6 @@ static void reg_save\t\t\tPARAMS ((const char *, unsigned,\n static void initial_return_save\t\tPARAMS ((rtx));\n static long stack_adjust_offset\t\tPARAMS ((rtx));\n static void output_cfi\t\t\tPARAMS ((dw_cfi_ref, dw_fde_ref, int));\n-static enum dw_cfi_oprnd_type dw_cfi_oprnd1_desc \n-   PARAMS ((enum dwarf_call_frame_info cfi));\n-static enum dw_cfi_oprnd_type dw_cfi_oprnd2_desc \n-   PARAMS ((enum dwarf_call_frame_info cfi));\n static void output_call_frame_info\tPARAMS ((int));\n static void dwarf2out_stack_adjust\tPARAMS ((rtx));\n static void queue_reg_save\t\tPARAMS ((const char *, rtx, long));\n@@ -1699,6 +1699,8 @@ dwarf2out_frame_debug (insn)\n #endif\n \n /* Describe for the GTY machinery what parts of dw_cfi_oprnd1 are used.  */\n+static enum dw_cfi_oprnd_type dw_cfi_oprnd1_desc \n+   PARAMS ((enum dwarf_call_frame_info cfi));\n \n static enum dw_cfi_oprnd_type\n dw_cfi_oprnd1_desc (cfi)\n@@ -1744,6 +1746,8 @@ dw_cfi_oprnd1_desc (cfi)\n }\n \n /* Describe for the GTY machinery what parts of dw_cfi_oprnd2 are used.  */\n+static enum dw_cfi_oprnd_type dw_cfi_oprnd2_desc \n+   PARAMS ((enum dwarf_call_frame_info cfi));\n \n static enum dw_cfi_oprnd_type\n dw_cfi_oprnd2_desc (cfi)\n@@ -3436,16 +3440,20 @@ limbo_die_node;\n    is not made available by the GCC front-end.  */\n #define\tDWARF_LINE_DEFAULT_IS_STMT_START 1\n \n+#ifdef DWARF2_DEBUGGING_INFO\n /* This location is used by calc_die_sizes() to keep track\n    the offset of each DIE within the .debug_info section.  */\n static unsigned long next_die_offset;\n+#endif\n \n /* Record the root of the DIE's built for the current compilation unit.  */\n static GTY(()) dw_die_ref comp_unit_die;\n \n+#ifdef DWARF2_DEBUGGING_INFO\n /* We need special handling in dwarf2out_start_source_file if it is\n    first one.  */\n static int is_main_source;\n+#endif\n \n /* A list of DIEs with a NULL parent waiting to be relocated.  */\n static GTY(()) limbo_die_node *limbo_die_list;\n@@ -3463,8 +3471,10 @@ struct file_table\n    table.  */\n #define FILE_TABLE_INCREMENT 64\n \n+#ifdef DWARF2_DEBUGGING_INFO\n /* Filenames referenced by this compilation unit.  */\n static struct file_table file_table;\n+#endif\n \n /* A pointer to the base of a table of references to DIE's that describe\n    declarations.  The table is indexed by DECL_UID() which is a unique\n@@ -3474,8 +3484,10 @@ static GTY((length (\"decl_die_table_allocated\"))) dw_die_ref *decl_die_table;\n /* Number of elements currently allocated for the decl_die_table.  */\n static unsigned decl_die_table_allocated;\n \n+#ifdef DWARF2_DEBUGGING_INFO\n /* Number of elements in decl_die_table currently in use.  */\n static unsigned decl_die_table_in_use;\n+#endif\n \n /* Size (in elements) of increments by which we may expand the\n    decl_die_table.  */\n@@ -3490,8 +3502,10 @@ static GTY((length (\"abbrev_die_table_allocated\")))\n /* Number of elements currently allocated for abbrev_die_table.  */\n static unsigned abbrev_die_table_allocated;\n \n+#ifdef DWARF2_DEBUGGING_INFO\n /* Number of elements in type_die_table currently in use.  */\n static unsigned abbrev_die_table_in_use;\n+#endif\n \n /* Size (in elements) of increments by which we may expand the\n    abbrev_die_table.  */\n@@ -3505,8 +3519,10 @@ static GTY((length (\"line_info_table_allocated\")))\n /* Number of elements currently allocated for line_info_table.  */\n static unsigned line_info_table_allocated;\n \n+#ifdef DWARF2_DEBUGGING_INFO\n /* Number of elements in line_info_table currently in use.  */\n static unsigned line_info_table_in_use;\n+#endif\n \n /* A pointer to the base of a table that contains line information\n    for each source code line outside of .text in the compilation unit.  */\n@@ -3516,8 +3532,10 @@ static GTY ((length (\"separate_line_info_table_allocated\")))\n /* Number of elements currently allocated for separate_line_info_table.  */\n static unsigned separate_line_info_table_allocated;\n \n+#ifdef DWARF2_DEBUGGING_INFO\n /* Number of elements in separate_line_info_table currently in use.  */\n static unsigned separate_line_info_table_in_use;\n+#endif\n \n /* Size (in elements) of increments by which we may expand the\n    line_info_table.  */\n@@ -3530,8 +3548,10 @@ static GTY ((length (\"pubname_table_allocated\"))) pubname_ref pubname_table;\n /* Number of elements currently allocated for pubname_table.  */\n static unsigned pubname_table_allocated;\n \n+#ifdef DWARF2_DEBUGGING_INFO\n /* Number of elements in pubname_table currently in use.  */\n static unsigned pubname_table_in_use;\n+#endif\n \n /* Size (in elements) of increments by which we may expand the\n    pubname_table.  */\n@@ -3543,8 +3563,10 @@ static GTY((length (\"arange_table_allocated\"))) dw_die_ref *arange_table;\n /* Number of elements currently allocated for arange_table.  */\n static unsigned arange_table_allocated;\n \n+#ifdef DWARF2_DEBUGGING_INFO\n /* Number of elements in arange_table currently in use.  */\n static unsigned arange_table_in_use;\n+#endif\n \n /* Size (in elements) of increments by which we may expand the\n    arange_table.  */\n@@ -3556,6 +3578,7 @@ static GTY ((length (\"ranges_table_allocated\"))) dw_ranges_ref ranges_table;\n /* Number of elements currently allocated for ranges_table.  */\n static unsigned ranges_table_allocated;\n \n+#ifdef DWARF2_DEBUGGING_INFO\n /* Number of elements in ranges_table currently in use.  */\n static unsigned ranges_table_in_use;\n \n@@ -3568,6 +3591,7 @@ static unsigned have_location_lists;\n \n /* Record whether the function being analyzed contains inlined functions.  */\n static int current_function_has_inlines;\n+#endif\n #if 0 && defined (MIPS_DEBUGGING_INFO)\n static int comp_unit_has_inlines;\n #endif"}, {"sha": "81f1be101cfc203081d157593cf11a64ccd2210d", "filename": "gcc/flow.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b50e4978a214de1df4b7f61395bee83a924426/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b50e4978a214de1df4b7f61395bee83a924426/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=c1b50e4978a214de1df4b7f61395bee83a924426", "patch": "@@ -416,8 +416,8 @@ life_analysis (f, file, flags)\n      FILE *file;\n      int flags;\n {\n-  int i;\n #ifdef ELIMINABLE_REGS\n+  int i;\n   static const struct {const int from, to; } eliminables[] = ELIMINABLE_REGS;\n #endif\n \n@@ -436,8 +436,11 @@ life_analysis (f, file, flags)\n \n #ifdef CANNOT_CHANGE_MODE_CLASS\n   if (flags & PROP_REG_INFO)\n-    for (i=0; i < NUM_MACHINE_MODES; ++i)\n-      INIT_REG_SET (&subregs_of_mode[i]);\n+    {\n+      int j;\n+      for (j=0; j < NUM_MACHINE_MODES; ++j)\n+\tINIT_REG_SET (&subregs_of_mode[j]);\n+    }\n #endif\n \n   if (! optimize)"}, {"sha": "b86dc994419fc74e7bf672ef977d21fae73bfee2", "filename": "gcc/genemit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b50e4978a214de1df4b7f61395bee83a924426/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b50e4978a214de1df4b7f61395bee83a924426/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=c1b50e4978a214de1df4b7f61395bee83a924426", "patch": "@@ -404,7 +404,7 @@ gen_insn (insn, lineno)\n       printf (\"operand%d\", i);\n   printf (\")\\n\");\n   for (i = 0; i < operands; i++)\n-    printf (\"     rtx operand%d;\\n\", i);\n+    printf (\"     rtx operand%d ATTRIBUTE_UNUSED;\\n\", i);\n   printf (\"{\\n\");\n \n   /* Output code to construct and return the rtl for the instruction body */"}, {"sha": "dfaa38051e16db31d5e4c88397bdee16db2b012f", "filename": "gcc/protoize.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b50e4978a214de1df4b7f61395bee83a924426/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b50e4978a214de1df4b7f61395bee83a924426/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=c1b50e4978a214de1df4b7f61395bee83a924426", "patch": "@@ -140,12 +140,12 @@ static const char * const aux_info_suffix = AUX_INFO_SUFFIX;\n \n static const char * const save_suffix = SAVE_SUFFIX;\n \n+#ifndef UNPROTOIZE\n+\n /* String to attach to C filenames renamed to C++.  */\n \n static const char * const cplus_suffix = CPLUS_FILE_SUFFIX;\n \n-#ifndef UNPROTOIZE\n-\n /* File name of the file which contains descriptions of standard system\n    routines.  Note that we never actually do anything with this file per se,\n    but we do read in its corresponding aux_info file.  */"}]}