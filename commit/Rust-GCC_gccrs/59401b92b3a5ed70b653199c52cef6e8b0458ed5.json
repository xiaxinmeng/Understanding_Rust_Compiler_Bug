{"sha": "59401b92b3a5ed70b653199c52cef6e8b0458ed5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk0MDFiOTJiM2E1ZWQ3MGI2NTMxOTljNTJjZWY2ZThiMDQ1OGVkNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-09-09T11:52:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-09-09T11:52:51Z"}, "message": "gimple.h (fold_stmt_inplace): Adjust to take a gimple_stmt_iterator instead of a statement.\n\n2011-09-09  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple.h (fold_stmt_inplace): Adjust to take a gimple_stmt_iterator\n\tinstead of a statement.\n\t* gimple-fold.c (fold_stmt_inplace): Likewise.\n\t* sese.c (graphite_copy_stmts_from_block): Adjust.\n\t* tree-ssa-dom.c (propagate_rhs_into_lhs): Likewise.\n\t* tree-ssa-forwprop.c (forward_propagate_into_comparison): Use\n\tfold_stmt.\n\t(forward_propagate_addr_into_variable_array_index): Likewise.\n\t(forward_propagate_addr_expr_1): adjust.\n\t(associate_plusminus): Likewise.\n\t(ssa_forward_propagate_and_combine): Likewise.\n\t* tree-ssa-mathopts.c (replace_reciprocal): Adjust.\n\t(execute_cse_reciprocals): Likewise.\n\t* tree-ssa.c (insert_debug_temp_for_var_def): Adjust.\n\nFrom-SVN: r178726", "tree": {"sha": "c282772d3ec2eb3a961c9a3e6b384f035193577f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c282772d3ec2eb3a961c9a3e6b384f035193577f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59401b92b3a5ed70b653199c52cef6e8b0458ed5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59401b92b3a5ed70b653199c52cef6e8b0458ed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59401b92b3a5ed70b653199c52cef6e8b0458ed5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59401b92b3a5ed70b653199c52cef6e8b0458ed5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf13d9cf5071386d37ea4d5687d05b83fc9cc2b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf13d9cf5071386d37ea4d5687d05b83fc9cc2b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf13d9cf5071386d37ea4d5687d05b83fc9cc2b7"}], "stats": {"total": 107, "additions": 65, "deletions": 42}, "files": [{"sha": "8a7e54a3b1cf94ab9807d2949a9e28eb4275ab18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59401b92b3a5ed70b653199c52cef6e8b0458ed5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59401b92b3a5ed70b653199c52cef6e8b0458ed5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59401b92b3a5ed70b653199c52cef6e8b0458ed5", "patch": "@@ -1,3 +1,20 @@\n+2011-09-09  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple.h (fold_stmt_inplace): Adjust to take a gimple_stmt_iterator\n+\tinstead of a statement.\n+\t* gimple-fold.c (fold_stmt_inplace): Likewise.\n+\t* sese.c (graphite_copy_stmts_from_block): Adjust.\n+\t* tree-ssa-dom.c (propagate_rhs_into_lhs): Likewise.\n+\t* tree-ssa-forwprop.c (forward_propagate_into_comparison): Use\n+\tfold_stmt.\n+\t(forward_propagate_addr_into_variable_array_index): Likewise.\n+\t(forward_propagate_addr_expr_1): adjust.\n+\t(associate_plusminus): Likewise.\n+\t(ssa_forward_propagate_and_combine): Likewise.\n+\t* tree-ssa-mathopts.c (replace_reciprocal): Adjust.\n+\t(execute_cse_reciprocals): Likewise.\n+\t* tree-ssa.c (insert_debug_temp_for_var_def): Adjust.\n+\n 2011-09-09  Nick Clifton  <nickc@redhat.com>\n \n \t* config/mn10300/mn10300.c (mn10300_split_and_operand_count):"}, {"sha": "d8da030971443d9bfb2709417f44af64659214de", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59401b92b3a5ed70b653199c52cef6e8b0458ed5/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59401b92b3a5ed70b653199c52cef6e8b0458ed5/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=59401b92b3a5ed70b653199c52cef6e8b0458ed5", "patch": "@@ -1286,20 +1286,20 @@ fold_stmt (gimple_stmt_iterator *gsi)\n   return fold_stmt_1 (gsi, false);\n }\n \n-/* Perform the minimal folding on statement STMT.  Only operations like\n+/* Perform the minimal folding on statement *GSI.  Only operations like\n    *&x created by constant propagation are handled.  The statement cannot\n    be replaced with a new one.  Return true if the statement was\n    changed, false otherwise.\n-   The statement STMT should be in valid gimple form but may\n+   The statement *GSI should be in valid gimple form but may\n    be in unfolded state as resulting from for example constant propagation\n    which can produce *&x = 0.  */\n \n bool\n-fold_stmt_inplace (gimple stmt)\n+fold_stmt_inplace (gimple_stmt_iterator *gsi)\n {\n-  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n-  bool changed = fold_stmt_1 (&gsi, true);\n-  gcc_assert (gsi_stmt (gsi) == stmt);\n+  gimple stmt = gsi_stmt (*gsi);\n+  bool changed = fold_stmt_1 (gsi, true);\n+  gcc_assert (gsi_stmt (*gsi) == stmt);\n   return changed;\n }\n "}, {"sha": "46d8373085fbdacec0bbbd0333714b5b0303ebe0", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59401b92b3a5ed70b653199c52cef6e8b0458ed5/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59401b92b3a5ed70b653199c52cef6e8b0458ed5/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=59401b92b3a5ed70b653199c52cef6e8b0458ed5", "patch": "@@ -5068,7 +5068,7 @@ extern void dump_gimple_statistics (void);\n void gimplify_and_update_call_from_tree (gimple_stmt_iterator *, tree);\n tree gimple_fold_builtin (gimple);\n bool fold_stmt (gimple_stmt_iterator *);\n-bool fold_stmt_inplace (gimple);\n+bool fold_stmt_inplace (gimple_stmt_iterator *);\n tree get_symbol_constant_value (tree);\n tree canonicalize_constructor_val (tree);\n extern tree maybe_fold_and_comparisons (enum tree_code, tree, tree, "}, {"sha": "492667e26e691c4a1ff19ff6f99dfcd4849888e5", "filename": "gcc/sese.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59401b92b3a5ed70b653199c52cef6e8b0458ed5/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59401b92b3a5ed70b653199c52cef6e8b0458ed5/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=59401b92b3a5ed70b653199c52cef6e8b0458ed5", "patch": "@@ -620,7 +620,10 @@ graphite_copy_stmts_from_block (basic_block bb, basic_block new_bb,\n \n       if (rename_uses (copy, rename_map, &gsi_tgt, region, loop, iv_map,\n \t\t       gloog_error))\n-\tfold_stmt_inplace (copy);\n+\t{\n+\t  gcc_assert (gsi_stmt (gsi_tgt) == copy);\n+\t  fold_stmt_inplace (&gsi_tgt);\n+\t}\n \n       update_stmt (copy);\n     }"}, {"sha": "3902b5ce5c90cfa02129afb5d28bf11c10240040", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59401b92b3a5ed70b653199c52cef6e8b0458ed5/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59401b92b3a5ed70b653199c52cef6e8b0458ed5/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=59401b92b3a5ed70b653199c52cef6e8b0458ed5", "patch": "@@ -2656,7 +2656,10 @@ propagate_rhs_into_lhs (gimple stmt, tree lhs, tree rhs, bitmap interesting_name\n              GIMPLE_ASSIGN, and there is no way to effect such a\n              transformation in-place.  We might want to consider\n              using the more general fold_stmt here.  */\n-\t  fold_stmt_inplace (use_stmt);\n+\t    {\n+\t      gimple_stmt_iterator gsi = gsi_for_stmt (use_stmt);\n+\t      fold_stmt_inplace (&gsi);\n+\t    }\n \n \t  /* Sometimes propagation can expose new operands to the\n \t     renamer.  */"}, {"sha": "a8737dac933ada0d28dd71466bde645c3b04d033", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59401b92b3a5ed70b653199c52cef6e8b0458ed5/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59401b92b3a5ed70b653199c52cef6e8b0458ed5/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=59401b92b3a5ed70b653199c52cef6e8b0458ed5", "patch": "@@ -477,8 +477,8 @@ forward_propagate_into_comparison (gimple_stmt_iterator *gsi)\n   if (tmp)\n     {\n       gimple_assign_set_rhs_from_tree (gsi, tmp);\n-      fold_stmt_inplace (stmt);\n-      update_stmt (stmt);\n+      fold_stmt (gsi);\n+      update_stmt (gsi_stmt (*gsi));\n \n       if (TREE_CODE (rhs1) == SSA_NAME)\n \tcfg_changed |= remove_prop_source_from_use (rhs1);\n@@ -764,12 +764,8 @@ forward_propagate_addr_into_variable_array_index (tree offset,\n \t}\n     }\n   gimple_assign_set_rhs_from_tree (use_stmt_gsi, new_rhs);\n-  use_stmt = gsi_stmt (*use_stmt_gsi);\n-\n-  /* That should have created gimple, so there is no need to\n-     record information to undo the propagation.  */\n-  fold_stmt_inplace (use_stmt);\n-  tidy_after_forward_propagate_addr (use_stmt);\n+  fold_stmt (use_stmt_gsi);\n+  tidy_after_forward_propagate_addr (gsi_stmt (*use_stmt_gsi));\n   return true;\n }\n \n@@ -982,7 +978,7 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n \t  TREE_OPERAND (rhs, 0) = new_ptr;\n \t  TREE_OPERAND (rhs, 1)\n \t    = double_int_to_tree (TREE_TYPE (TREE_OPERAND (rhs, 1)), off);\n-\t  fold_stmt_inplace (use_stmt);\n+\t  fold_stmt_inplace (use_stmt_gsi);\n \t  tidy_after_forward_propagate_addr (use_stmt);\n \t  return res;\n \t}\n@@ -1018,7 +1014,7 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n \t  gimple_assign_set_rhs1 (use_stmt,\n \t\t\t\t  unshare_expr (TREE_OPERAND (def_rhs, 0)));\n \t  *def_rhs_basep = saved;\n-\t  fold_stmt_inplace (use_stmt);\n+\t  fold_stmt_inplace (use_stmt_gsi);\n \t  tidy_after_forward_propagate_addr (use_stmt);\n \t  return res;\n \t}\n@@ -1906,12 +1902,12 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n    always permitted.  Returns true if the CFG was changed.  */\n \n static bool\n-associate_plusminus (gimple stmt)\n+associate_plusminus (gimple_stmt_iterator *gsi)\n {\n+  gimple stmt = gsi_stmt (*gsi);\n   tree rhs1 = gimple_assign_rhs1 (stmt);\n   tree rhs2 = gimple_assign_rhs2 (stmt);\n   enum tree_code code = gimple_assign_rhs_code (stmt);\n-  gimple_stmt_iterator gsi;\n   bool changed;\n \n   /* We can't reassociate at all for saturating types.  */\n@@ -1986,7 +1982,6 @@ associate_plusminus (gimple stmt)\n      via commutating the addition and contracting operations to zero\n      by reassociation.  */\n \n-  gsi = gsi_for_stmt (stmt);\n   if (TREE_CODE (rhs1) == SSA_NAME)\n     {\n       gimple def_stmt = SSA_NAME_DEF_STMT (rhs1);\n@@ -2006,8 +2001,8 @@ associate_plusminus (gimple stmt)\n \t\t\t  ? TREE_CODE (def_rhs2) : NEGATE_EXPR);\n \t\t  rhs1 = def_rhs2;\n \t\t  rhs2 = NULL_TREE;\n-\t\t  gimple_assign_set_rhs_with_ops (&gsi, code, rhs1, NULL_TREE);\n-\t\t  gcc_assert (gsi_stmt (gsi) == stmt);\n+\t\t  gimple_assign_set_rhs_with_ops (gsi, code, rhs1, NULL_TREE);\n+\t\t  gcc_assert (gsi_stmt (*gsi) == stmt);\n \t\t  gimple_set_modified (stmt, true);\n \t\t}\n \t      else if (operand_equal_p (def_rhs2, rhs2, 0)\n@@ -2017,8 +2012,8 @@ associate_plusminus (gimple stmt)\n \t\t  code = TREE_CODE (def_rhs1);\n \t\t  rhs1 = def_rhs1;\n \t\t  rhs2 = NULL_TREE;\n-\t\t  gimple_assign_set_rhs_with_ops (&gsi, code, rhs1, NULL_TREE);\n-\t\t  gcc_assert (gsi_stmt (gsi) == stmt);\n+\t\t  gimple_assign_set_rhs_with_ops (gsi, code, rhs1, NULL_TREE);\n+\t\t  gcc_assert (gsi_stmt (*gsi) == stmt);\n \t\t  gimple_set_modified (stmt, true);\n \t\t}\n \t      else if (TREE_CODE (rhs2) == INTEGER_CST\n@@ -2068,8 +2063,8 @@ associate_plusminus (gimple stmt)\n \t\t  code = INTEGER_CST;\n \t\t  rhs1 = build_int_cst_type (TREE_TYPE (rhs2), -1);\n \t\t  rhs2 = NULL_TREE;\n-\t\t  gimple_assign_set_rhs_with_ops (&gsi, code, rhs1, NULL_TREE);\n-\t\t  gcc_assert (gsi_stmt (gsi) == stmt);\n+\t\t  gimple_assign_set_rhs_with_ops (gsi, code, rhs1, NULL_TREE);\n+\t\t  gcc_assert (gsi_stmt (*gsi) == stmt);\n \t\t  gimple_set_modified (stmt, true);\n \t\t}\n \t      else if (code == PLUS_EXPR\n@@ -2079,8 +2074,8 @@ associate_plusminus (gimple stmt)\n \t\t  code = NEGATE_EXPR;\n \t\t  rhs1 = def_rhs1;\n \t\t  rhs2 = NULL_TREE;\n-\t\t  gimple_assign_set_rhs_with_ops (&gsi, code, rhs1, NULL_TREE);\n-\t\t  gcc_assert (gsi_stmt (gsi) == stmt);\n+\t\t  gimple_assign_set_rhs_with_ops (gsi, code, rhs1, NULL_TREE);\n+\t\t  gcc_assert (gsi_stmt (*gsi) == stmt);\n \t\t  gimple_set_modified (stmt, true);\n \t\t}\n \t    }\n@@ -2106,8 +2101,8 @@ associate_plusminus (gimple stmt)\n \t\t\t  ? NEGATE_EXPR : TREE_CODE (def_rhs2));\n \t\t  rhs1 = def_rhs2;\n \t\t  rhs2 = NULL_TREE;\n-\t\t  gimple_assign_set_rhs_with_ops (&gsi, code, rhs1, NULL_TREE);\n-\t\t  gcc_assert (gsi_stmt (gsi) == stmt);\n+\t\t  gimple_assign_set_rhs_with_ops (gsi, code, rhs1, NULL_TREE);\n+\t\t  gcc_assert (gsi_stmt (*gsi) == stmt);\n \t\t  gimple_set_modified (stmt, true);\n \t\t}\n \t      else if (operand_equal_p (def_rhs2, rhs1, 0)\n@@ -2118,8 +2113,8 @@ associate_plusminus (gimple stmt)\n \t\t\t  ? TREE_CODE (def_rhs1) : NEGATE_EXPR);\n \t\t  rhs1 = def_rhs1;\n \t\t  rhs2 = NULL_TREE;\n-\t\t  gimple_assign_set_rhs_with_ops (&gsi, code, rhs1, NULL_TREE);\n-\t\t  gcc_assert (gsi_stmt (gsi) == stmt);\n+\t\t  gimple_assign_set_rhs_with_ops (gsi, code, rhs1, NULL_TREE);\n+\t\t  gcc_assert (gsi_stmt (*gsi) == stmt);\n \t\t  gimple_set_modified (stmt, true);\n \t\t}\n \t      else if (TREE_CODE (rhs1) == INTEGER_CST\n@@ -2168,8 +2163,8 @@ associate_plusminus (gimple stmt)\n \t\t  code = INTEGER_CST;\n \t\t  rhs1 = build_int_cst_type (TREE_TYPE (rhs1), -1);\n \t\t  rhs2 = NULL_TREE;\n-\t\t  gimple_assign_set_rhs_with_ops (&gsi, code, rhs1, NULL_TREE);\n-\t\t  gcc_assert (gsi_stmt (gsi) == stmt);\n+\t\t  gimple_assign_set_rhs_with_ops (gsi, code, rhs1, NULL_TREE);\n+\t\t  gcc_assert (gsi_stmt (*gsi) == stmt);\n \t\t  gimple_set_modified (stmt, true);\n \t\t}\n \t    }\n@@ -2179,7 +2174,7 @@ associate_plusminus (gimple stmt)\n out:\n   if (gimple_modified_p (stmt))\n     {\n-      fold_stmt_inplace (stmt);\n+      fold_stmt_inplace (gsi);\n       update_stmt (stmt);\n       if (maybe_clean_or_replace_eh_stmt (stmt, stmt)\n \t  && gimple_purge_dead_eh_edges (gimple_bb (stmt)))\n@@ -2438,7 +2433,7 @@ ssa_forward_propagate_and_combine (void)\n \t      else if (is_gimple_min_invariant (rhs))\n \t\t{\n \t\t  /* Make sure to fold &a[0] + off_1 here.  */\n-\t\t  fold_stmt_inplace (stmt);\n+\t\t  fold_stmt_inplace (&gsi);\n \t\t  update_stmt (stmt);\n \t\t  if (gimple_assign_rhs_code (stmt) == POINTER_PLUS_EXPR)\n \t\t    gsi_next (&gsi);\n@@ -2495,7 +2490,7 @@ ssa_forward_propagate_and_combine (void)\n \t\t  changed = simplify_bitwise_binary (&gsi);\n \t\telse if (code == PLUS_EXPR\n \t\t\t || code == MINUS_EXPR)\n-\t\t  changed = associate_plusminus (stmt);\n+\t\t  changed = associate_plusminus (&gsi);\n \t\telse if (CONVERT_EXPR_CODE_P (code)\n \t\t\t || code == FLOAT_EXPR\n \t\t\t || code == FIX_TRUNC_EXPR)"}, {"sha": "ed99802b3b201f85376dd0282169732a7bffb643", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59401b92b3a5ed70b653199c52cef6e8b0458ed5/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59401b92b3a5ed70b653199c52cef6e8b0458ed5/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=59401b92b3a5ed70b653199c52cef6e8b0458ed5", "patch": "@@ -398,9 +398,10 @@ replace_reciprocal (use_operand_p use_p)\n   if (optimize_bb_for_speed_p (bb)\n       && occ->recip_def && use_stmt != occ->recip_def_stmt)\n     {\n+      gimple_stmt_iterator gsi = gsi_for_stmt (use_stmt);\n       gimple_assign_set_rhs_code (use_stmt, MULT_EXPR);\n       SET_USE (use_p, occ->recip_def);\n-      fold_stmt_inplace (use_stmt);\n+      fold_stmt_inplace (&gsi);\n       update_stmt (use_stmt);\n     }\n }\n@@ -610,8 +611,9 @@ execute_cse_reciprocals (void)\n \n \t\t  FOR_EACH_IMM_USE_STMT (stmt, ui, arg1)\n \t\t    {\n+\t\t      gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n \t\t      gimple_assign_set_rhs_code (stmt, MULT_EXPR);\n-\t\t      fold_stmt_inplace (stmt);\n+\t\t      fold_stmt_inplace (&gsi);\n \t\t      update_stmt (stmt);\n \t\t    }\n \t\t}"}, {"sha": "a01159380774ef31a9c7ac34efb23ae33eece629", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59401b92b3a5ed70b653199c52cef6e8b0458ed5/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59401b92b3a5ed70b653199c52cef6e8b0458ed5/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=59401b92b3a5ed70b653199c52cef6e8b0458ed5", "patch": "@@ -471,7 +471,10 @@ insert_debug_temp_for_var_def (gimple_stmt_iterator *gsi, tree var)\n \t  /* If we didn't replace uses with a debug decl fold the\n \t     resulting expression.  Otherwise we end up with invalid IL.  */\n \t  if (TREE_CODE (value) != DEBUG_EXPR_DECL)\n-\t    fold_stmt_inplace (stmt);\n+\t    {\n+\t      gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n+\t      fold_stmt_inplace (&gsi);\n+\t    }\n \t}\n       else\n \tgimple_debug_bind_reset_value (stmt);"}]}