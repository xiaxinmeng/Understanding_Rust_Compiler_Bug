{"sha": "6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFiMTZkZDlhZDVkYWEwNzllMGFkMzMxMmIxMzI0YTRkZDUxYjhiYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-08-25T21:08:28Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-08-25T21:08:28Z"}, "message": "predict.c (expensive_function_p): New.\n\n\t* predict.c (expensive_function_p): New.\n\t* rtl.h (expensive_function_p): Declare.\n\t* i386.c (FAST_PROLOGUE_INSN_COUNT): New constant.\n\t(use_fast_prologue_epilogue): New static variable.\n\t(expand_prologue): Set it; emit short prologues if unset.\n\t(expand_epilogue): Likewise.\n\nFrom-SVN: r45176", "tree": {"sha": "148dfc2b03bed81cf63c2e3eb8ec9d70ddd5db7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/148dfc2b03bed81cf63c2e3eb8ec9d70ddd5db7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb/comments", "author": null, "committer": null, "parents": [{"sha": "033c017cb2c0234ef0518856ce8310a11626c5b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033c017cb2c0234ef0518856ce8310a11626c5b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/033c017cb2c0234ef0518856ce8310a11626c5b3"}], "stats": {"total": 76, "additions": 73, "deletions": 3}, "files": [{"sha": "4b32717d194af090f7931a7701391b49761c8892", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb", "patch": "@@ -1,3 +1,12 @@\n+Sat Aug 25 23:07:35 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* predict.c (expensive_function_p): New.\n+\t* rtl.h (expensive_function_p): Declare.\n+\t* i386.c (FAST_PROLOGUE_INSN_COUNT): New constant.\n+\t(use_fast_prologue_epilogue): New static variable.\n+\t(expand_prologue): Set it; emit short prologues if unset.\n+\t(expand_epilogue): Likewise.\n+\n 2001-08-22  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* config.gcc: Add stormy16-*-elf case."}, {"sha": "23612b60907bce4cc935e66cb83b98de0ab74460", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb", "patch": "@@ -319,6 +319,14 @@ const int x86_accumulate_outgoing_args = m_ATHLON | m_PENT4 | m_PPRO;\n const int x86_prologue_using_move = m_ATHLON | m_PENT4 | m_PPRO;\n const int x86_epilogue_using_move = m_ATHLON | m_PENT4 | m_PPRO;\n \n+/* In case the avreage insn count for single function invocation is\n+   lower than this constant, emit fast (but longer) prologue and\n+   epilogue code.  */\n+#define FAST_PROLOGUE_INSN_COUNT 30\n+/* Set by prologue expander and used by epilogue expander to determine\n+   the style used.  */\n+static int use_fast_prologue_epilogue;\n+\n #define AT_BP(mode) (gen_rtx_MEM ((mode), hard_frame_pointer_rtx))\n \n const char * const hi_reg_name[] = HI_REGISTER_NAMES;\n@@ -2653,9 +2661,15 @@ ix86_expand_prologue ()\n \t\t\t\t  || current_function_uses_const_pool)\n \t\t      && !TARGET_64BIT);\n   struct ix86_frame frame;\n-  int use_mov = (TARGET_PROLOGUE_USING_MOVE && !optimize_size);\n+  int use_mov = 0;\n   HOST_WIDE_INT allocate;\n \n+  if (TARGET_PROLOGUE_USING_MOVE && !optimize_size)\n+    {\n+      use_fast_prologue_epilogue\n+\t = !expensive_function_p (FAST_PROLOGUE_INSN_COUNT);\n+      use_mov = use_fast_prologue_epilogue;\n+    }\n   ix86_compute_frame_layout (&frame);\n \n   /* Note: AT&T enter does NOT have reversed args.  Enter is probably\n@@ -2794,10 +2808,11 @@ ix86_expand_epilogue (style)\n      tuning in future.  */\n   if ((!sp_valid && frame.nregs <= 1)\n       || (TARGET_EPILOGUE_USING_MOVE && !optimize_size\n+\t  && use_fast_prologue_epilogue\n \t  && (frame.nregs > 1 || frame.to_allocate))\n       || (frame_pointer_needed && !frame.nregs && frame.to_allocate)\n       || (frame_pointer_needed && TARGET_USE_LEAVE && !optimize_size\n-\t  && frame.nregs == 1)\n+\t  && use_fast_prologue_epilogue && frame.nregs == 1)\n       || style == 2)\n     {\n       /* Restore registers.  We can use ebp or esp to address the memory\n@@ -2844,7 +2859,7 @@ ix86_expand_epilogue (style)\n \t\t    GEN_INT (frame.to_allocate\n \t\t\t     + frame.nregs * UNITS_PER_WORD)));\n       /* If not an i386, mov & pop is faster than \"leave\".  */\n-      else if (TARGET_USE_LEAVE || optimize_size)\n+      else if (TARGET_USE_LEAVE || optimize_size || !use_fast_prologue_epilogue)\n \temit_insn (TARGET_64BIT ? gen_leave_rex64 () : gen_leave ());\n       else\n \t{"}, {"sha": "70460ab3b46f5f75bed0d1dc8cdbcd0f26ecd2a8", "filename": "gcc/predict.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb", "patch": "@@ -782,6 +782,51 @@ counts_to_freqs ()\n     }\n }\n \n+/* Return true if function is likely to be expensive, so there is no point\n+   to optimizer performance of prologue, epilogue or do inlining at the\n+   expense of code size growth.  THRESHOLD is the limit of number\n+   of isntructions function can execute at average to be still considered\n+   not expensive.  */\n+bool\n+expensive_function_p (threshold)\n+\tint threshold;\n+{\n+  unsigned int sum = 0;\n+  int i;\n+  int limit;\n+\n+  /* We can not compute accurately for large thresholds due to scaled\n+     frequencies.  */\n+  if (threshold > BB_FREQ_MAX)\n+    abort ();\n+\n+  /* Frequencies are out of range.  This eighter means that function contains\n+     internal loop executing more than BB_FREQ_MAX times or profile feedback\n+     is available and function has not been executed at all.  */\n+  if (ENTRY_BLOCK_PTR->frequency == 0)\n+    return true;\n+    \n+  /* Maximally BB_FREQ_MAX^2 so overflow won't happen.  */\n+  limit = ENTRY_BLOCK_PTR->frequency * threshold;\n+  for (i = 0; i < n_basic_blocks; i++)\n+    {\n+      basic_block bb = BASIC_BLOCK (i);\n+      rtx insn;\n+\n+      for (insn = bb->head; insn != NEXT_INSN (bb->end);\n+\t   insn = NEXT_INSN (insn))\n+\t{\n+\t  if (active_insn_p (insn))\n+\t    {\n+\t      sum += bb->frequency;\n+\t      if (sum > limit)\n+\t\treturn true;\n+\t    }\n+\t}\n+    }\n+  return false;\n+}\n+\n /* Estimate basic blocks frequency by given branch probabilities.  */\n static void\n estimate_bb_frequencies (loops)"}, {"sha": "3a0a019f0f0cba95f5df73ccb2cc7481eeb18d08", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=6ab16dd9ad5daa079e0ad3312b1324a4dd51b8bb", "patch": "@@ -2028,4 +2028,5 @@ extern void if_convert\t\t\tPARAMS ((int));\n \n /* In predict.c */\n extern void invert_br_probabilities\tPARAMS ((rtx));\n+extern bool expensive_function_p\tPARAMS ((int));\n #endif /* ! GCC_RTL_H */"}]}