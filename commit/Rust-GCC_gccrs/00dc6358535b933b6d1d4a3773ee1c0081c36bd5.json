{"sha": "00dc6358535b933b6d1d4a3773ee1c0081c36bd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkYzYzNTg1MzViOTMzYjZkMWQ0YTM3NzNlZTFjMDA4MWMzNmJkNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-07-16T00:16:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-07-16T00:16:25Z"}, "message": "decl2.c (arg_assoc_class): Also look at template arguments, if any.\n\n\t* decl2.c (arg_assoc_class): Also look at template arguments, if any.\n\t(arg_assoc): Handle error_mark_node and multiple levels of TREE_LIST.\n\t* lex.c (looking_for_typename): Don't initialize.\n\t* decl2.c (ambiguous_decl): Clarify error message.\n\t* decl.c (push_using_directive): Iterate over namespaces used\n\tindirectly.\n\nFrom-SVN: r21205", "tree": {"sha": "148abff06e7e9fb026243a36003f513ed572239d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/148abff06e7e9fb026243a36003f513ed572239d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00dc6358535b933b6d1d4a3773ee1c0081c36bd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00dc6358535b933b6d1d4a3773ee1c0081c36bd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00dc6358535b933b6d1d4a3773ee1c0081c36bd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00dc6358535b933b6d1d4a3773ee1c0081c36bd5/comments", "author": null, "committer": null, "parents": [{"sha": "e3a038596392fda6f5ddf2f308c2ad568359ae57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a038596392fda6f5ddf2f308c2ad568359ae57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3a038596392fda6f5ddf2f308c2ad568359ae57"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "37a85a73d27c64d3e10b557db33f665bf1987e01", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dc6358535b933b6d1d4a3773ee1c0081c36bd5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dc6358535b933b6d1d4a3773ee1c0081c36bd5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=00dc6358535b933b6d1d4a3773ee1c0081c36bd5", "patch": "@@ -1,3 +1,15 @@\n+1998-07-15  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (arg_assoc_class): Also look at template arguments, if any.\n+\t(arg_assoc): Handle error_mark_node and multiple levels of TREE_LIST.\n+\n+\t* lex.c (looking_for_typename): Don't initialize.\n+\n+\t* decl2.c (ambiguous_decl): Clarify error message.\n+\n+\t* decl.c (push_using_directive): Iterate over namespaces used\n+\tindirectly.\n+\n 1998-07-15  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* decl2.c (add_using_namespace): Iterate over namespaces used"}, {"sha": "e3f226cac4d69e6e601900c09f69af10d63754ef", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dc6358535b933b6d1d4a3773ee1c0081c36bd5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dc6358535b933b6d1d4a3773ee1c0081c36bd5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=00dc6358535b933b6d1d4a3773ee1c0081c36bd5", "patch": "@@ -3856,11 +3856,17 @@ push_using_directive (used, ancestor)\n      tree ancestor;\n {\n   tree ud = current_binding_level->using_directives;\n+  tree iter;\n   \n   /* Check if we already have this. */\n   if (purpose_member (used, ud) != NULL_TREE)\n     return NULL_TREE;\n- \n+\n+  /* Recursively add all namespaces used. */\n+  for (iter = DECL_NAMESPACE_USING (used); iter; iter = TREE_CHAIN (iter))\n+    push_using_directive (TREE_PURPOSE (iter), ancestor);\n+\n+  ud = current_binding_level->using_directives;\n   ud = perm_tree_cons (used, ancestor, ud);\n   current_binding_level->using_directives = ud;\n   return ud;"}, {"sha": "2e8d569aa310269b8e44dd85713a78d31983dcd2", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dc6358535b933b6d1d4a3773ee1c0081c36bd5/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dc6358535b933b6d1d4a3773ee1c0081c36bd5/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=00dc6358535b933b6d1d4a3773ee1c0081c36bd5", "patch": "@@ -3937,9 +3937,9 @@ ambiguous_decl (name, old, new)\n       else\n \t{\n \t  /* Some declarations are functions, some are not. */\n-\t  cp_error (\"ambiguous definition `%D' used\", name);\n-\t  cp_error_at (\"first definition here\", BINDING_VALUE (old));\n-\t  cp_error_at (\"other definition here\", BINDING_VALUE (new));\n+\t  cp_error (\"use of `%D' is ambiguous\", name);\n+\t  cp_error_at (\"  first declared as `%#D' here\", BINDING_VALUE (old));\n+\t  cp_error_at (\"  also declared as `%#D' here\", BINDING_VALUE (new));\n \t  return error_mark_node;\n \t}\n     }\n@@ -4239,6 +4239,15 @@ arg_assoc_class (k, type)\n \t    && decl_namespace (TREE_VALUE (list)) == context)\n \t  if (add_function (k, TREE_VALUE (list)))\n \t    return 1;\n+\n+  /* Process template arguments.  */\n+  if (CLASSTYPE_TEMPLATE_INFO (type))\n+    {\n+      list = innermost_args (CLASSTYPE_TI_ARGS (type), 0);\n+      for (i = 0; i < TREE_VEC_LENGTH (list); ++i)\n+\targ_assoc (k, TREE_VEC_ELT (list, i));\n+    }\n+\n   return 0;\n }\n \n@@ -4316,6 +4325,9 @@ arg_assoc (k, n)\n      struct arg_lookup* k;\n      tree n;\n {\n+  if (n == error_mark_node)\n+    return 0;\n+\n   if (TREE_CODE_CLASS (TREE_CODE (n)) == 't')\n     return arg_assoc_type (k, n);\n \n@@ -4324,7 +4336,7 @@ arg_assoc (k, n)\n \n   if (TREE_CODE (n) == ADDR_EXPR)\n     n = TREE_OPERAND (n, 0);\n-  if (TREE_CODE (n) == TREE_LIST)\n+  while (TREE_CODE (n) == TREE_LIST)\n     n = TREE_VALUE (n);\n \n   my_friendly_assert (TREE_CODE (n) == OVERLOAD, 980715);"}, {"sha": "62d061b6a44e609b155c872bdec7e37968fe492e", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dc6358535b933b6d1d4a3773ee1c0081c36bd5/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dc6358535b933b6d1d4a3773ee1c0081c36bd5/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=00dc6358535b933b6d1d4a3773ee1c0081c36bd5", "patch": "@@ -2737,7 +2737,7 @@ readescape (ignore_ptr)\n /* Value is 1 (or 2) if we should try to make the next identifier look like\n    a typename (when it may be a local variable or a class variable).\n    Value is 0 if we treat this name in a default fashion.  */\n-int looking_for_typename = 0;\n+int looking_for_typename;\n \n #ifdef __GNUC__\n __inline"}]}