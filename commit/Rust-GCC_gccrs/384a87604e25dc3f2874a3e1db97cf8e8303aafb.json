{"sha": "384a87604e25dc3f2874a3e1db97cf8e8303aafb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg0YTg3NjA0ZTI1ZGMzZjI4NzRhM2UxZGI5N2NmOGU4MzAzYWFmYg==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2005-07-03T05:21:42Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2005-07-03T05:21:42Z"}, "message": "sh.c (sh_output_mi_thunk): Initialize and clean up the minimal CFG stuff always when optimize > 0.\n\n\t* config/sh/sh.c (sh_output_mi_thunk): Initialize and clean\n\tup the minimal CFG stuff always when optimize > 0.  Call\n\tsplit_all_insns_noflow in PIC case if needed.\n\nFrom-SVN: r101546", "tree": {"sha": "e19a81cd06f8aaeeda2146256450b72d5549e393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e19a81cd06f8aaeeda2146256450b72d5549e393"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/384a87604e25dc3f2874a3e1db97cf8e8303aafb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/384a87604e25dc3f2874a3e1db97cf8e8303aafb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/384a87604e25dc3f2874a3e1db97cf8e8303aafb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/384a87604e25dc3f2874a3e1db97cf8e8303aafb/comments", "author": null, "committer": null, "parents": [{"sha": "365ff3b926415e416da5fc0ab9b31a17ec52275f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/365ff3b926415e416da5fc0ab9b31a17ec52275f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/365ff3b926415e416da5fc0ab9b31a17ec52275f"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "37d410571fb633c29ece8fcf1950b5b18a5bf700", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384a87604e25dc3f2874a3e1db97cf8e8303aafb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384a87604e25dc3f2874a3e1db97cf8e8303aafb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=384a87604e25dc3f2874a3e1db97cf8e8303aafb", "patch": "@@ -1,3 +1,9 @@\n+2005-07-03  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (sh_output_mi_thunk): Initialize and clean\n+\tup the minimal CFG stuff always when optimize > 0.  Call\n+\tsplit_all_insns_noflow in PIC case if needed.\n+\n 2005-07-02  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n             Christian Ehrhardt <ehrhardt@mathematik.uni-ulm.de>\n "}, {"sha": "6e8e299f3048c4b11ae3957b9c7c12c41e1ec3cb", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/384a87604e25dc3f2874a3e1db97cf8e8303aafb/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/384a87604e25dc3f2874a3e1db97cf8e8303aafb/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=384a87604e25dc3f2874a3e1db97cf8e8303aafb", "patch": "@@ -9619,39 +9619,44 @@ sh_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   insn_locators_initialize ();\n   insns = get_insns ();\n \n-  if (optimize > 0 && flag_schedule_insns_after_reload)\n+  if (optimize > 0)\n     {\n       /* Initialize the bitmap obstacks.  */\n       bitmap_obstack_initialize (NULL);\n       bitmap_obstack_initialize (&reg_obstack);\n       if (! cfun->cfg)\n \tinit_flow ();\n       rtl_register_cfg_hooks ();\n+      init_rtl_bb_info (ENTRY_BLOCK_PTR);\n+      init_rtl_bb_info (EXIT_BLOCK_PTR);\n+      ENTRY_BLOCK_PTR->flags |= BB_RTL;\n+      EXIT_BLOCK_PTR->flags |= BB_RTL;\n       find_basic_blocks (insns);\n-      life_analysis (dump_file, PROP_FINAL);\n \n-      split_all_insns (1);\n+      if (flag_schedule_insns_after_reload)\n+\t{\n+\t  life_analysis (dump_file, PROP_FINAL);\n+\n+\t  split_all_insns (1);\n \n-      schedule_insns (dump_file);\n+\t  schedule_insns (dump_file);\n+\t}\n+      /* We must split jmp insn in PIC case.  */\n+      else if (flag_pic)\n+\tsplit_all_insns_noflow ();\n     }\n \n   sh_reorg ();\n \n   if (optimize > 0 && flag_delayed_branch)\n-    {\n-      if (! cfun->cfg)\n-\t{\n-\t  init_flow ();\n-\t  find_basic_blocks (insns);\n-\t}\n-      dbr_schedule (insns, dump_file);\n-    }\n+    dbr_schedule (insns, dump_file);\n+\n   shorten_branches (insns);\n   final_start_function (insns, file, 1);\n   final (insns, file, 1);\n   final_end_function ();\n \n-  if (optimize > 0 && flag_schedule_insns_after_reload)\n+  if (optimize > 0)\n     {\n       /* Release all memory allocated by flow.  */\n       free_basic_block_vars ();"}]}