{"sha": "2786cbadc7943950874df60f65da3f6a081162d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc4NmNiYWRjNzk0Mzk1MDg3NGRmNjBmNjVkYTNmNmEwODExNjJkOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-05-06T18:36:48Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-05-06T18:36:48Z"}, "message": "-fno-common change\n\nFrom-SVN: r11940", "tree": {"sha": "be78d9090c203f4f4af7523158cd4c1fe16087a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be78d9090c203f4f4af7523158cd4c1fe16087a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2786cbadc7943950874df60f65da3f6a081162d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2786cbadc7943950874df60f65da3f6a081162d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2786cbadc7943950874df60f65da3f6a081162d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2786cbadc7943950874df60f65da3f6a081162d9/comments", "author": null, "committer": null, "parents": [{"sha": "7b8b9722a4c9b7789d3d1bfcc12f23d49eb0b1bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8b9722a4c9b7789d3d1bfcc12f23d49eb0b1bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b8b9722a4c9b7789d3d1bfcc12f23d49eb0b1bf"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "3c9018ad268711fd10300114180d501d0d1c52ab", "filename": "gcc/c-common.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2786cbadc7943950874df60f65da3f6a081162d9/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2786cbadc7943950874df60f65da3f6a081162d9/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2786cbadc7943950874df60f65da3f6a081162d9", "patch": "@@ -37,7 +37,7 @@ Boston, MA 02111-1307, USA.  */\n \n extern struct obstack permanent_obstack;\n \n-enum attrs {A_PACKED, A_NOCOMMON, A_NORETURN, A_CONST, A_T_UNION,\n+enum attrs {A_PACKED, A_NOCOMMON, A_COMMON, A_NORETURN, A_CONST, A_T_UNION,\n \t    A_CONSTRUCTOR, A_DESTRUCTOR, A_MODE, A_SECTION, A_ALIGNED,\n \t    A_UNUSED, A_FORMAT, A_WEAK, A_ALIAS};\n \n@@ -263,6 +263,7 @@ init_attributes ()\n {\n   add_attribute (A_PACKED, \"packed\", 0, 0, 0);\n   add_attribute (A_NOCOMMON, \"nocommon\", 0, 0, 1);\n+  add_attribute (A_COMMON, \"common\", 0, 0, 1);\n   add_attribute (A_NORETURN, \"noreturn\", 0, 0, 1);\n   add_attribute (A_NORETURN, \"volatile\", 0, 0, 1);\n   add_attribute (A_UNUSED, \"unused\", 0, 0, 1);\n@@ -358,6 +359,13 @@ decl_attributes (node, attributes, prefix_attributes)\n \t    warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n \t  break;\n \n+\tcase A_COMMON:\n+\t  if (TREE_CODE (decl) == VAR_DECL)\n+\t    DECL_COMMON (decl) = 1;\n+\t  else\n+\t    warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+\t  break;\n+\n \tcase A_NORETURN:\n \t  if (TREE_CODE (decl) == FUNCTION_DECL)\n \t    TREE_THIS_VOLATILE (decl) = 1;"}, {"sha": "e031546960cfd79a0ca8a127fa77a57fba575a2a", "filename": "gcc/c-decl.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2786cbadc7943950874df60f65da3f6a081162d9/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2786cbadc7943950874df60f65da3f6a081162d9/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=2786cbadc7943950874df60f65da3f6a081162d9", "patch": "@@ -3611,9 +3611,13 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     gen_aux_info_record (decl, 0, 0, TYPE_ARG_TYPES (TREE_TYPE (decl)) != 0);\n \n-  /* For C and Objective-C, we by default put things in .common when\n-     possible.  */\n-  DECL_COMMON (decl) = 1;\n+  /* ANSI specifies that a tentative definition which is not merged with\n+     a non-tentative definition behaves exactly like a definition with an\n+     initializer equal to zero.  (Section 3.7.2)\n+     -fno-common gives strict ANSI behavior.  Usually you don't want it.\n+     This matters only for variables with external linkage.  */\n+  if (! flag_no_common)\n+    DECL_COMMON (decl) = 1;\n \n   /* Set attributes here so if duplicate decl, will have proper attributes.  */\n   decl_attributes (decl, attributes, prefix_attributes);"}, {"sha": "4de4e121b016723a0f8ebfe47089b1327cf8b4c6", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2786cbadc7943950874df60f65da3f6a081162d9/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2786cbadc7943950874df60f65da3f6a081162d9/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=2786cbadc7943950874df60f65da3f6a081162d9", "patch": "@@ -405,7 +405,7 @@ end_final (filename)\n       }\n \n       /* Make space for the table of counts.  */\n-      if (flag_no_common || size == 0)\n+      if (size == 0)\n \t{\n \t  /* Realign data section.  */\n \t  ASM_OUTPUT_ALIGN (asm_out_file, align);"}, {"sha": "5712f1943bd0f9639110af2ae8cee13b321a152a", "filename": "gcc/flags.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2786cbadc7943950874df60f65da3f6a081162d9/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2786cbadc7943950874df60f65da3f6a081162d9/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=2786cbadc7943950874df60f65da3f6a081162d9", "patch": "@@ -315,7 +315,8 @@ extern int flag_pedantic_errors;\n \n extern int flag_pic;\n \n-/* Nonzero means place uninitialized global data in the bss section.  */\n+/* Nonzero means don't place uninitialized global data in common storage\n+   by default.  */\n \n extern int flag_no_common;\n "}, {"sha": "c89069be89ab6c52cf020c4cb69667df76da5275", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2786cbadc7943950874df60f65da3f6a081162d9/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2786cbadc7943950874df60f65da3f6a081162d9/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2786cbadc7943950874df60f65da3f6a081162d9", "patch": "@@ -482,7 +482,8 @@ int flag_short_temps;\n \n int flag_pic;\n \n-/* Nonzero means place uninitialized global data in the bss section. */\n+/* Nonzero means don't place uninitialized global data in common storage\n+   by default. */\n \n int flag_no_common;\n "}, {"sha": "468387c346bd76f507d0064307f7eea4c13ce66b", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2786cbadc7943950874df60f65da3f6a081162d9/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2786cbadc7943950874df60f65da3f6a081162d9/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=2786cbadc7943950874df60f65da3f6a081162d9", "patch": "@@ -1229,18 +1229,11 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \n   /* Handle uninitialized definitions.  */\n \n-  /* ANSI specifies that a tentative definition which is not merged with\n-     a non-tentative definition behaves exactly like a definition with an\n-     initializer equal to zero.  (Section 3.7.2)\n-     -fno-common gives strict ANSI behavior.  Usually you don't want it.\n-     This matters only for variables with external linkage.  */\n-\n   if ((DECL_INITIAL (decl) == 0 || DECL_INITIAL (decl) == error_mark_node)\n       /* If the target can't output uninitialized but not common global data\n \t in .bss, then we have to use .data.  */\n #if ! defined (ASM_OUTPUT_BSS) && ! defined (ASM_OUTPUT_ALIGNED_BSS)\n-      && (! flag_no_common || ! TREE_PUBLIC (decl))\n-      && DECL_COMMON (decl)\n+      && (DECL_COMMON (decl) || ! TREE_PUBLIC (decl))\n #endif\n       && ! dont_output_data)\n     {\n@@ -1286,7 +1279,6 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n       if (TREE_PUBLIC (decl)\n #if defined (ASM_OUTPUT_BSS) || defined (ASM_OUTPUT_ALIGNED_BSS)\n \t  && DECL_COMMON (decl)\n-\t  && ! flag_no_common\n #endif\n \t  )\n \t{"}]}