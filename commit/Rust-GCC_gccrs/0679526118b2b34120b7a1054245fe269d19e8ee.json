{"sha": "0679526118b2b34120b7a1054245fe269d19e8ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY3OTUyNjExOGIyYjM0MTIwYjdhMTA1NDI0NWZlMjY5ZDE5ZThlZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-06-09T15:41:23Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-06-09T15:41:23Z"}, "message": "cgraph.h (varpool_first_static_initializer, [...]): Make checking only when checking enabled.\n\n\t* cgraph.h (varpool_first_static_initializer,\n\tvarpool_next_static_initializer): Make checking only when\n\tchecking enabled.\n\t* tree-vectorizer.h (vinfo_for_stmt): Remove check.\n\t(set_vinfo_for_stmt, get_earlier_stmt, is_loop_header_bb_p): Change\n\tgcc_assert to gcc_checking_assert.\n\t* tree-flow-inline.h (gimple_vop, get_var_ann, relink_imm_use, phi_nodes\n\tset_phi_nodes, phi_arg_index_from_use, op_iter_next_use,\n\top_iter_next_def, op_iter_next_tree, op_iter_init, op_iter_init_use,\n\top_iter_init_phiuse, op_iter_init_phidef, array_ref_contains_indirect_ref,\n\tref_contains_array_ref): Use gcc_checking_assert.\n\t* emit-rtl.h (set_first_insn, set_last_insn): Likewise.\n\t* tree-ssa-live.h (var_to_partition, var_to_partition_to_var,\n\tpartition_is_global, live_on_entry, live_on_exit,\n\tlive_merge_and_clear): Likewise.\n\t* system.h (gcc_checking_assert): New macro.\n\nFrom-SVN: r160489", "tree": {"sha": "a4c4e0746614916994fd84f1f77c014d6733416d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4c4e0746614916994fd84f1f77c014d6733416d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0679526118b2b34120b7a1054245fe269d19e8ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0679526118b2b34120b7a1054245fe269d19e8ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0679526118b2b34120b7a1054245fe269d19e8ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0679526118b2b34120b7a1054245fe269d19e8ee/comments", "author": null, "committer": null, "parents": [{"sha": "ded396e753b304ffc3f32b91ccff3b816f478547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ded396e753b304ffc3f32b91ccff3b816f478547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ded396e753b304ffc3f32b91ccff3b816f478547"}], "stats": {"total": 112, "additions": 64, "deletions": 48}, "files": [{"sha": "bc5886e8a47760aa0fdac4b63355179ab50e7b68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0679526118b2b34120b7a1054245fe269d19e8ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0679526118b2b34120b7a1054245fe269d19e8ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0679526118b2b34120b7a1054245fe269d19e8ee", "patch": "@@ -1,3 +1,23 @@\n+2010-06-09  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.h (varpool_first_static_initializer,\n+\tvarpool_next_static_initializer): Make checking only when\n+\tchecking enabled.\n+\t* tree-vectorizer.h (vinfo_for_stmt): Remove check.\n+\t(set_vinfo_for_stmt, get_earlier_stmt, is_loop_header_bb_p): Change\n+\tgcc_assert to gcc_checking_assert.\n+\t* tree-flow-inline.h (gimple_vop, get_var_ann, relink_imm_use, phi_nodes\n+\tset_phi_nodes, phi_arg_index_from_use, op_iter_next_use,\n+\top_iter_next_def, op_iter_next_tree, op_iter_init, op_iter_init_use,\n+\top_iter_init_phiuse, op_iter_init_phidef, array_ref_contains_indirect_ref,\n+\tref_contains_array_ref): Use gcc_checking_assert.\n+\t* emit-rtl.h (set_first_insn, set_last_insn): Likewise.\n+\t* tree-ssa-live.h (var_to_partition, var_to_partition_to_var,\n+\tpartition_is_global, live_on_entry, live_on_exit,\n+\tlive_merge_and_clear): Likewise.\n+\t* system.h (gcc_checking_assert): New macro.\n+\t* gimple.h (set_bb_seq): Use gcc_checking_assert.\n+\n 2010-06-09  Jason Merrill  <jason@redhat.com>\n \n \t* Makefile.in (TAGS): Collect tags info from c-family."}, {"sha": "2c7ddbf123cca83955bf3c364ef1355dcbef60ad", "filename": "gcc/cgraph.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0679526118b2b34120b7a1054245fe269d19e8ee/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0679526118b2b34120b7a1054245fe269d19e8ee/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=0679526118b2b34120b7a1054245fe269d19e8ee", "patch": "@@ -724,7 +724,7 @@ varpool_first_static_initializer (void)\n   struct varpool_node *node;\n   for (node = varpool_nodes_queue; node; node = node->next_needed)\n     {\n-      gcc_assert (TREE_CODE (node->decl) == VAR_DECL);\n+      gcc_checking_assert (TREE_CODE (node->decl) == VAR_DECL);\n       if (DECL_INITIAL (node->decl))\n \treturn node;\n     }\n@@ -737,7 +737,7 @@ varpool_next_static_initializer (struct varpool_node *node)\n {\n   for (node = node->next_needed; node; node = node->next_needed)\n     {\n-      gcc_assert (TREE_CODE (node->decl) == VAR_DECL);\n+      gcc_checking_assert (TREE_CODE (node->decl) == VAR_DECL);\n       if (DECL_INITIAL (node->decl))\n \treturn node;\n     }"}, {"sha": "1b2c162b785bff838d33a3a6957d2ac0ba19249d", "filename": "gcc/emit-rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0679526118b2b34120b7a1054245fe269d19e8ee/gcc%2Femit-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0679526118b2b34120b7a1054245fe269d19e8ee/gcc%2Femit-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.h?ref=0679526118b2b34120b7a1054245fe269d19e8ee", "patch": "@@ -76,7 +76,7 @@ get_insns (void)\n static inline void\n set_first_insn (rtx insn)\n {\n-  gcc_assert (!insn || !PREV_INSN (insn));\n+  gcc_checking_assert (!insn || !PREV_INSN (insn));\n   crtl->emit.x_first_insn = insn;\n }\n \n@@ -93,7 +93,7 @@ get_last_insn (void)\n static inline void\n set_last_insn (rtx insn)\n {\n-  gcc_assert (!insn || !NEXT_INSN (insn));\n+  gcc_checking_assert (!insn || !NEXT_INSN (insn));\n   crtl->emit.x_last_insn = insn;\n }\n "}, {"sha": "210a62271cd409d38a8701177ecddc55b3a0fbf1", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0679526118b2b34120b7a1054245fe269d19e8ee/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0679526118b2b34120b7a1054245fe269d19e8ee/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=0679526118b2b34120b7a1054245fe269d19e8ee", "patch": "@@ -246,7 +246,7 @@ bb_seq (const_basic_block bb)\n static inline void\n set_bb_seq (basic_block bb, gimple_seq seq)\n {\n-  gcc_assert (!(bb->flags & BB_RTL));\n+  gcc_checking_assert (!(bb->flags & BB_RTL));\n   bb->il.gimple->seq = seq;\n }\n "}, {"sha": "085df7d4e9b5a5b8206d5a338f9c8634cb452ef0", "filename": "gcc/system.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0679526118b2b34120b7a1054245fe269d19e8ee/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0679526118b2b34120b7a1054245fe269d19e8ee/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=0679526118b2b34120b7a1054245fe269d19e8ee", "patch": "@@ -601,6 +601,12 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n #define gcc_assert(EXPR) ((void)(0 && (EXPR)))\n #endif\n \n+#ifdef ENABLE_CHECKING\n+#define gcc_checking_assert(EXPR) gcc_assert (EXPR)\n+#else\n+#define gcc_checking_assert(EXPR) ((void)(0 && (EXPR)))\n+#endif\n+\n /* Use gcc_unreachable() to mark unreachable locations (like an\n    unreachable default case of a switch.  Do not use gcc_assert(0).  */\n #if (GCC_VERSION >= 4005) && !ENABLE_ASSERT_CHECKING"}, {"sha": "b1e1251c7061cf6d6ef11b900ba692ffd9c3bcb5", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0679526118b2b34120b7a1054245fe269d19e8ee/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0679526118b2b34120b7a1054245fe269d19e8ee/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=0679526118b2b34120b7a1054245fe269d19e8ee", "patch": "@@ -48,7 +48,7 @@ gimple_referenced_vars (const struct function *fun)\n static inline tree\n gimple_vop (const struct function *fun)\n {\n-  gcc_assert (fun && fun->gimple_df);\n+  gcc_checking_assert (fun && fun->gimple_df);\n   return fun->gimple_df->vop;\n }\n \n@@ -141,7 +141,7 @@ static inline var_ann_t\n get_var_ann (tree var)\n {\n   var_ann_t *p = DECL_VAR_ANN_PTR (var);\n-  gcc_assert (p);\n+  gcc_checking_assert (p);\n   return *p ? *p : create_var_ann (var);\n }\n \n@@ -222,7 +222,7 @@ link_imm_use (ssa_use_operand_t *linknode, tree def)\n       root = &(SSA_NAME_IMM_USE_NODE (def));\n #ifdef ENABLE_CHECKING\n       if (linknode->use)\n-        gcc_assert (*(linknode->use) == def);\n+        gcc_checking_assert (*(linknode->use) == def);\n #endif\n       link_imm_use_to_list (linknode, root);\n     }\n@@ -254,7 +254,7 @@ static inline void\n relink_imm_use (ssa_use_operand_t *node, ssa_use_operand_t *old)\n {\n   /* The node one had better be in the same list.  */\n-  gcc_assert (*(old->use) == *(node->use));\n+  gcc_checking_assert (*(old->use) == *(node->use));\n   node->prev = old->prev;\n   node->next = old->next;\n   if (old->prev)\n@@ -507,7 +507,7 @@ gimple_phi_arg_has_location (gimple gs, size_t i)\n static inline gimple_seq\n phi_nodes (const_basic_block bb)\n {\n-  gcc_assert (!(bb->flags & BB_RTL));\n+  gcc_checking_assert (!(bb->flags & BB_RTL));\n   if (!bb->il.gimple)\n     return NULL;\n   return bb->il.gimple->phi_nodes;\n@@ -520,7 +520,7 @@ set_phi_nodes (basic_block bb, gimple_seq seq)\n {\n   gimple_stmt_iterator i;\n \n-  gcc_assert (!(bb->flags & BB_RTL));\n+  gcc_checking_assert (!(bb->flags & BB_RTL));\n   bb->il.gimple->phi_nodes = seq;\n   if (seq)\n     for (i = gsi_start (seq); !gsi_end_p (i); gsi_next (&i))\n@@ -541,7 +541,6 @@ phi_arg_index_from_use (use_operand_p use)\n      pointer arithmetic.  */\n \n   phi = USE_STMT (use);\n-  gcc_assert (gimple_code (phi) == GIMPLE_PHI);\n \n   element = (struct phi_arg_d *)use;\n   root = gimple_phi_arg (phi, 0);\n@@ -641,9 +640,7 @@ static inline use_operand_p\n op_iter_next_use (ssa_op_iter *ptr)\n {\n   use_operand_p use_p;\n-#ifdef ENABLE_CHECKING\n-  gcc_assert (ptr->iter_type == ssa_op_iter_use);\n-#endif\n+  gcc_checking_assert (ptr->iter_type == ssa_op_iter_use);\n   if (ptr->uses)\n     {\n       use_p = USE_OP_PTR (ptr->uses);\n@@ -663,9 +660,7 @@ static inline def_operand_p\n op_iter_next_def (ssa_op_iter *ptr)\n {\n   def_operand_p def_p;\n-#ifdef ENABLE_CHECKING\n-  gcc_assert (ptr->iter_type == ssa_op_iter_def);\n-#endif\n+  gcc_checking_assert (ptr->iter_type == ssa_op_iter_def);\n   if (ptr->defs)\n     {\n       def_p = DEF_OP_PTR (ptr->defs);\n@@ -681,9 +676,7 @@ static inline tree\n op_iter_next_tree (ssa_op_iter *ptr)\n {\n   tree val;\n-#ifdef ENABLE_CHECKING\n-  gcc_assert (ptr->iter_type == ssa_op_iter_tree);\n-#endif\n+  gcc_checking_assert (ptr->iter_type == ssa_op_iter_tree);\n   if (ptr->uses)\n     {\n       val = USE_OP (ptr->uses);\n@@ -725,8 +718,8 @@ op_iter_init (ssa_op_iter *ptr, gimple stmt, int flags)\n {\n   /* We do not support iterating over virtual defs or uses without\n      iterating over defs or uses at the same time.  */\n-  gcc_assert ((!(flags & SSA_OP_VDEF) || (flags & SSA_OP_DEF))\n-\t      && (!(flags & SSA_OP_VUSE) || (flags & SSA_OP_USE)));\n+  gcc_checking_assert ((!(flags & SSA_OP_VDEF) || (flags & SSA_OP_DEF))\n+\t\t       && (!(flags & SSA_OP_VUSE) || (flags & SSA_OP_USE)));\n   ptr->defs = (flags & (SSA_OP_DEF|SSA_OP_VDEF)) ? gimple_def_ops (stmt) : NULL;\n   if (!(flags & SSA_OP_VDEF)\n       && ptr->defs\n@@ -749,8 +742,8 @@ op_iter_init (ssa_op_iter *ptr, gimple stmt, int flags)\n static inline use_operand_p\n op_iter_init_use (ssa_op_iter *ptr, gimple stmt, int flags)\n {\n-  gcc_assert ((flags & SSA_OP_ALL_DEFS) == 0\n-\t      && (flags & SSA_OP_USE));\n+  gcc_checking_assert ((flags & SSA_OP_ALL_DEFS) == 0\n+\t\t       && (flags & SSA_OP_USE));\n   op_iter_init (ptr, stmt, flags);\n   ptr->iter_type = ssa_op_iter_use;\n   return op_iter_next_use (ptr);\n@@ -761,8 +754,8 @@ op_iter_init_use (ssa_op_iter *ptr, gimple stmt, int flags)\n static inline def_operand_p\n op_iter_init_def (ssa_op_iter *ptr, gimple stmt, int flags)\n {\n-  gcc_assert ((flags & SSA_OP_ALL_USES) == 0\n-\t      && (flags & SSA_OP_DEF));\n+  gcc_checking_assert ((flags & SSA_OP_ALL_USES) == 0\n+\t\t       && (flags & SSA_OP_DEF));\n   op_iter_init (ptr, stmt, flags);\n   ptr->iter_type = ssa_op_iter_def;\n   return op_iter_next_def (ptr);\n@@ -897,7 +890,7 @@ op_iter_init_phiuse (ssa_op_iter *ptr, gimple phi, int flags)\n   clear_and_done_ssa_iter (ptr);\n   ptr->done = false;\n \n-  gcc_assert ((flags & (SSA_OP_USE | SSA_OP_VIRTUAL_USES)) != 0);\n+  gcc_checking_assert ((flags & (SSA_OP_USE | SSA_OP_VIRTUAL_USES)) != 0);\n \n   comp = (is_gimple_reg (phi_def) ? SSA_OP_USE : SSA_OP_VIRTUAL_USES);\n \n@@ -926,7 +919,7 @@ op_iter_init_phidef (ssa_op_iter *ptr, gimple phi, int flags)\n   clear_and_done_ssa_iter (ptr);\n   ptr->done = false;\n \n-  gcc_assert ((flags & (SSA_OP_DEF | SSA_OP_VIRTUAL_DEFS)) != 0);\n+  gcc_checking_assert ((flags & (SSA_OP_DEF | SSA_OP_VIRTUAL_DEFS)) != 0);\n \n   comp = (is_gimple_reg (phi_def) ? SSA_OP_DEF : SSA_OP_VIRTUAL_DEFS);\n \n@@ -1125,7 +1118,7 @@ unmodifiable_var_p (const_tree var)\n static inline bool\n array_ref_contains_indirect_ref (const_tree ref)\n {\n-  gcc_assert (TREE_CODE (ref) == ARRAY_REF);\n+  gcc_checking_assert (TREE_CODE (ref) == ARRAY_REF);\n \n   do {\n     ref = TREE_OPERAND (ref, 0);\n@@ -1140,7 +1133,7 @@ array_ref_contains_indirect_ref (const_tree ref)\n static inline bool\n ref_contains_array_ref (const_tree ref)\n {\n-  gcc_assert (handled_component_p (ref));\n+  gcc_checking_assert (handled_component_p (ref));\n \n   do {\n     if (TREE_CODE (ref) == ARRAY_REF)"}, {"sha": "c2af48b98509d0a8df1114abb32398bba08c3ea5", "filename": "gcc/tree-ssa-live.h", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0679526118b2b34120b7a1054245fe269d19e8ee/gcc%2Ftree-ssa-live.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0679526118b2b34120b7a1054245fe269d19e8ee/gcc%2Ftree-ssa-live.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.h?ref=0679526118b2b34120b7a1054245fe269d19e8ee", "patch": "@@ -144,7 +144,6 @@ var_to_partition (var_map map, tree var)\n {\n   int part;\n \n-  gcc_assert (TREE_CODE (var) == SSA_NAME);\n   part = partition_find (map->var_partition, SSA_NAME_VERSION (var));\n   if (map->partition_to_view)\n     part = map->partition_to_view[part];\n@@ -172,8 +171,8 @@ var_to_partition_to_var (var_map map, tree var)\n static inline int\n basevar_index (var_map map, int partition)\n {\n-  gcc_assert (partition >= 0\n-\t      && partition <= (int) num_var_partitions (map));\n+  gcc_checking_assert (partition >= 0\n+\t      \t       && partition <= (int) num_var_partitions (map));\n   return map->partition_to_base_index[partition];\n }\n \n@@ -271,7 +270,7 @@ extern void dump_live_info (FILE *, tree_live_info_p, int);\n static inline int\n partition_is_global (tree_live_info_p live, int p)\n {\n-  gcc_assert (live->global);\n+  gcc_checking_assert (live->global);\n   return bitmap_bit_p (live->global, p);\n }\n \n@@ -282,9 +281,9 @@ partition_is_global (tree_live_info_p live, int p)\n static inline bitmap\n live_on_entry (tree_live_info_p live, basic_block bb)\n {\n-  gcc_assert (live->livein);\n-  gcc_assert (bb != ENTRY_BLOCK_PTR);\n-  gcc_assert (bb != EXIT_BLOCK_PTR);\n+  gcc_checking_assert (live->livein\n+\t\t       && bb != ENTRY_BLOCK_PTR\n+\t\t       && bb != EXIT_BLOCK_PTR);\n \n   return live->livein[bb->index];\n }\n@@ -296,9 +295,9 @@ live_on_entry (tree_live_info_p live, basic_block bb)\n static inline bitmap\n live_on_exit (tree_live_info_p live, basic_block bb)\n {\n-  gcc_assert (live->liveout);\n-  gcc_assert (bb != ENTRY_BLOCK_PTR);\n-  gcc_assert (bb != EXIT_BLOCK_PTR);\n+  gcc_checking_assert (live->liveout\n+\t\t       && bb != ENTRY_BLOCK_PTR\n+\t\t       && bb != EXIT_BLOCK_PTR);\n \n   return live->liveout[bb->index];\n }\n@@ -319,8 +318,7 @@ live_var_map (tree_live_info_p live)\n static inline void\n live_merge_and_clear (tree_live_info_p live, int p1, int p2)\n {\n-  gcc_assert (live->livein[p1]);\n-  gcc_assert (live->livein[p2]);\n+  gcc_checking_assert (live->livein[p1] && live->livein[p2]);\n   bitmap_ior_into (live->livein[p1], live->livein[p2]);\n   bitmap_zero (live->livein[p2]);\n }"}, {"sha": "bf6769c69a71218fd711c4d6afdfdd181f73137b", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0679526118b2b34120b7a1054245fe269d19e8ee/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0679526118b2b34120b7a1054245fe269d19e8ee/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=0679526118b2b34120b7a1054245fe269d19e8ee", "patch": "@@ -567,7 +567,6 @@ vinfo_for_stmt (gimple stmt)\n   if (uid == 0)\n     return NULL;\n \n-  gcc_assert (uid <= VEC_length (vec_void_p, stmt_vec_info_vec));\n   return (stmt_vec_info) VEC_index (vec_void_p, stmt_vec_info_vec, uid - 1);\n }\n \n@@ -577,7 +576,7 @@ set_vinfo_for_stmt (gimple stmt, stmt_vec_info info)\n   unsigned int uid = gimple_uid (stmt);\n   if (uid == 0)\n     {\n-      gcc_assert (info);\n+      gcc_checking_assert (info);\n       uid = VEC_length (vec_void_p, stmt_vec_info_vec) + 1;\n       gimple_set_uid (stmt, uid);\n       VEC_safe_push (vec_void_p, heap, stmt_vec_info_vec, (vec_void_p) info);\n@@ -603,8 +602,8 @@ get_earlier_stmt (gimple stmt1, gimple stmt2)\n   if (uid1 == 0 || uid2 == 0)\n     return NULL;\n \n-  gcc_assert (uid1 <= VEC_length (vec_void_p, stmt_vec_info_vec));\n-  gcc_assert (uid2 <= VEC_length (vec_void_p, stmt_vec_info_vec));\n+  gcc_checking_assert (uid1 <= VEC_length (vec_void_p, stmt_vec_info_vec)\n+\t\t       && uid2 <= VEC_length (vec_void_p, stmt_vec_info_vec));\n \n   if (uid1 < uid2)\n     return stmt1;\n@@ -632,7 +631,7 @@ is_loop_header_bb_p (basic_block bb)\n {\n   if (bb == (bb->loop_father)->header)\n     return true;\n-  gcc_assert (EDGE_COUNT (bb->preds) == 1);\n+  gcc_checking_assert (EDGE_COUNT (bb->preds) == 1);\n   return false;\n }\n "}]}