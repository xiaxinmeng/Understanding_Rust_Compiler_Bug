{"sha": "b16fd5fd8afe6f95c8ae44e759971e605c31f97b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE2ZmQ1ZmQ4YWZlNmY5NWM4YWU0NGU3NTk5NzFlNjA1YzMxZjk3Yg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-04-27T14:21:25Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-04-30T14:56:44Z"}, "message": "coroutines: Fix cases where proxy variables are used [PR94879]\n\nThere are several places where the handling of a variable\ndeclaration depends on whether it corresponds to a compiler\ntemporary, or to some other entity.  We were testing that var\ndecls were artificial in determining this.  However, proxy vars\nare also artificial so that this is not sufficient.  The solution\nis to exclude variables with a DECL_VALUE_EXPR as well, since\nthe value variable will not be a temporary.\n\ngcc/cp/ChangeLog:\n\n2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR c++/94879\n\t* coroutines.cc (build_co_await): Account for variables\n\twith DECL_VALUE_EXPRs.\n\t(captures_temporary): Likewise.\n\t(register_awaits): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR c++/94879\n\t* g++.dg/coroutines/pr94879-folly-1.C: New test.", "tree": {"sha": "8abba6dba3e6e635536ea971ca7cb13a06f93a67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8abba6dba3e6e635536ea971ca7cb13a06f93a67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b16fd5fd8afe6f95c8ae44e759971e605c31f97b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16fd5fd8afe6f95c8ae44e759971e605c31f97b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b16fd5fd8afe6f95c8ae44e759971e605c31f97b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16fd5fd8afe6f95c8ae44e759971e605c31f97b/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04e88369a7d95492efccf8f527d27cca74664ea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e88369a7d95492efccf8f527d27cca74664ea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04e88369a7d95492efccf8f527d27cca74664ea7"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "3172f949ee9b3204e50334d10cc1230c74447c9a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16fd5fd8afe6f95c8ae44e759971e605c31f97b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16fd5fd8afe6f95c8ae44e759971e605c31f97b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b16fd5fd8afe6f95c8ae44e759971e605c31f97b", "patch": "@@ -1,3 +1,11 @@\n+2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/94879\n+\t* coroutines.cc (build_co_await): Account for variables\n+\twith DECL_VALUE_EXPRs.\n+\t(captures_temporary): Likewise.\n+\t(register_awaits): Likewise.\n+\n 2020-04-29  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94830"}, {"sha": "e2dbeabf48b0f2a32a5669d7154da81f7ab8b18e", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16fd5fd8afe6f95c8ae44e759971e605c31f97b/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16fd5fd8afe6f95c8ae44e759971e605c31f97b/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=b16fd5fd8afe6f95c8ae44e759971e605c31f97b", "patch": "@@ -748,7 +748,8 @@ build_co_await (location_t loc, tree a, suspend_point_kind suspend_kind)\n   if (INDIRECT_REF_P (e_proxy))\n     e_proxy = TREE_OPERAND (e_proxy, 0);\n   if (TREE_CODE (e_proxy) == PARM_DECL\n-      || (TREE_CODE (e_proxy) == VAR_DECL && !DECL_ARTIFICIAL (e_proxy)))\n+      || (VAR_P (e_proxy) && (!DECL_ARTIFICIAL (e_proxy)\n+\t\t\t      || DECL_HAS_VALUE_EXPR_P (e_proxy))))\n     e_proxy = o;\n   else\n     {\n@@ -2659,7 +2660,8 @@ captures_temporary (tree *stmt, int *do_subtree, void *d)\n \t}\n \n       /* This isn't a temporary.  */\n-      if ((TREE_CODE (parm) == VAR_DECL && !DECL_ARTIFICIAL (parm))\n+      if ((VAR_P (parm)\n+\t   && (!DECL_ARTIFICIAL (parm) || DECL_HAS_VALUE_EXPR_P (parm)))\n \t  || TREE_CODE (parm) == PARM_DECL\n \t  || TREE_CODE (parm) == NON_LVALUE_EXPR)\n \tcontinue;\n@@ -2742,7 +2744,8 @@ register_awaits (tree *stmt, int *do_subtree ATTRIBUTE_UNUSED, void *d)\n   if (INDIRECT_REF_P (aw))\n     aw = TREE_OPERAND (aw, 0);\n   if (TREE_CODE (aw) == PARM_DECL\n-      || (TREE_CODE (aw) == VAR_DECL && !DECL_ARTIFICIAL (aw)))\n+      || (VAR_P (aw) && (!DECL_ARTIFICIAL (aw)\n+\t\t\t || DECL_HAS_VALUE_EXPR_P (aw))))\n     ; /* Don't make an additional copy.  */\n   else\n     {"}, {"sha": "7f39eda02779ddc316c9d5d31e67e8463095d20a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16fd5fd8afe6f95c8ae44e759971e605c31f97b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16fd5fd8afe6f95c8ae44e759971e605c31f97b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b16fd5fd8afe6f95c8ae44e759971e605c31f97b", "patch": "@@ -1,3 +1,8 @@\n+2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/94879\n+\t* g++.dg/coroutines/pr94xxx-folly-1.C: New test.\n+\n 2020-04-30  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94775"}, {"sha": "7d66ce004f772e6d96a8ec4a6c333f731abf89cb", "filename": "gcc/testsuite/g++.dg/coroutines/pr94879-folly-1.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16fd5fd8afe6f95c8ae44e759971e605c31f97b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94879-folly-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16fd5fd8afe6f95c8ae44e759971e605c31f97b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94879-folly-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94879-folly-1.C?ref=b16fd5fd8afe6f95c8ae44e759971e605c31f97b", "patch": "@@ -0,0 +1,49 @@\n+//  { dg-additional-options  \"-fpreprocessed -w\" }\n+\n+namespace std {\n+template <typename a> a b(a &&);\n+template <typename c> struct d { c e; };\n+template <typename f, typename> struct coroutine_traits : f {};\n+template <typename = void> struct coroutine_handle;\n+template <> struct coroutine_handle<> {};\n+template <typename> struct coroutine_handle : coroutine_handle<> {};\n+struct g {};\n+} // namespace std\n+\n+class h {};\n+class i {\n+  i(i &&);\n+};\n+\n+namespace ac {\n+template <typename> class ad {\n+public:\n+  bool await_ready();\n+  void await_resume();\n+  void await_suspend(std::coroutine_handle<>);\n+  i ae;\n+};\n+} // namespace ac\n+\n+template <typename ab> ac::ad<ab> operator co_await(ab);\n+class j {\n+  class l {};\n+\n+public:\n+  std::g initial_suspend();\n+  l final_suspend();\n+};\n+class m : public j {\n+public:\n+  void get_return_object();\n+  void unhandled_exception();\n+};\n+class n {\n+public:\n+  using promise_type = m;\n+};\n+std::d<h> k;\n+void a() {\n+  auto am = k;\n+  [&]() -> n { co_await std::b(am.e); };\n+}"}]}