{"sha": "2fbf9cb25e930e2df86d05e0f7f707e69bae2b1f", "node_id": "C_kwDOANBUbNoAKDJmYmY5Y2IyNWU5MzBlMmRmODZkMDVlMGY3ZjcwN2U2OWJhZTJiMWY", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-01-29T14:55:51Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-01-29T14:56:27Z"}, "message": "Track the cratenum for the respective canonical path\n\nThis means we can get the crate name to squash the warning in the V0 symbol\nmangling scheme.", "tree": {"sha": "f5fc89773ab1941593f3f2230908919063679c68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5fc89773ab1941593f3f2230908919063679c68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fbf9cb25e930e2df86d05e0f7f707e69bae2b1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fbf9cb25e930e2df86d05e0f7f707e69bae2b1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fbf9cb25e930e2df86d05e0f7f707e69bae2b1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fbf9cb25e930e2df86d05e0f7f707e69bae2b1f/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a065f205c3171e63b4efee0b9d890782e95a691b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a065f205c3171e63b4efee0b9d890782e95a691b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a065f205c3171e63b4efee0b9d890782e95a691b"}], "stats": {"total": 52, "additions": 33, "deletions": 19}, "files": [{"sha": "eaf781464648e17c18df4d4fb5be1eb36885bbaa", "filename": "gcc/rust/backend/rust-mangle.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbf9cb25e930e2df86d05e0f7f707e69bae2b1f/gcc%2Frust%2Fbackend%2Frust-mangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbf9cb25e930e2df86d05e0f7f707e69bae2b1f/gcc%2Frust%2Fbackend%2Frust-mangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-mangle.cc?ref=2fbf9cb25e930e2df86d05e0f7f707e69bae2b1f", "patch": "@@ -252,12 +252,16 @@ legacy_mangle_item (const TyTy::BaseType *ty,\n static std::string\n v0_mangle_item (const TyTy::BaseType *ty, const Resolver::CanonicalPath &path)\n {\n-  std::string mangled;\n+  // we can get this from the canonical_path\n+  auto mappings = Analysis::Mappings::get ();\n+  std::string crate_name;\n+  bool ok = mappings->get_crate_name (path.get_crate_num (), crate_name);\n+  rust_assert (ok);\n \n+  std::string mangled;\n   // FIXME: Add real algorithm once all pieces are implemented\n   auto ty_prefix = v0_type_prefix (ty);\n-  // crate name must be assumed to be part of the canonical path\n-  // v0_add_identifier (mangled, crate_name);\n+  v0_add_identifier (mangled, crate_name);\n   v0_add_disambiguator (mangled, 62);\n \n   gcc_unreachable ();"}, {"sha": "96524d254ff074fd1c23425bee8f637bcee7508c", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbf9cb25e930e2df86d05e0f7f707e69bae2b1f/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbf9cb25e930e2df86d05e0f7f707e69bae2b1f/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=2fbf9cb25e930e2df86d05e0f7f707e69bae2b1f", "patch": "@@ -314,9 +314,9 @@ void\n NameResolution::go (AST::Crate &crate)\n {\n   // lookup current crate name\n+  CrateNum cnum = mappings->get_current_crate ();\n   std::string crate_name;\n-  bool ok\n-    = mappings->get_crate_name (mappings->get_current_crate (), crate_name);\n+  bool ok = mappings->get_crate_name (cnum, crate_name);\n   rust_assert (ok);\n \n   // setup the ribs\n@@ -331,10 +331,11 @@ NameResolution::go (AST::Crate &crate)\n   // get the root segment\n   CanonicalPath crate_prefix\n     = CanonicalPath::new_seg (scope_node_id, crate_name);\n+  crate_prefix.set_crate_num (cnum);\n \n   // first gather the top-level namespace names then we drill down so this\n-  // allows for resolving forward declarations since an impl block might have a\n-  // Self type Foo which is defined after the impl block for example.\n+  // allows for resolving forward declarations since an impl block might have\n+  // a Self type Foo which is defined after the impl block for example.\n   for (auto it = crate.items.begin (); it != crate.items.end (); it++)\n     ResolveTopLevel::go (it->get (), CanonicalPath::create_empty (),\n \t\t\t crate_prefix);"}, {"sha": "9b340750bbaf67a4b97ade7a69072cf7356db396", "filename": "gcc/rust/util/rust-canonical-path.h", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbf9cb25e930e2df86d05e0f7f707e69bae2b1f/gcc%2Frust%2Futil%2Frust-canonical-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbf9cb25e930e2df86d05e0f7f707e69bae2b1f/gcc%2Frust%2Futil%2Frust-canonical-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-canonical-path.h?ref=2fbf9cb25e930e2df86d05e0f7f707e69bae2b1f", "patch": "@@ -57,7 +57,8 @@ class CanonicalPath\n   static CanonicalPath new_seg (NodeId id, const std::string &path)\n   {\n     rust_assert (!path.empty ());\n-    return CanonicalPath ({std::pair<NodeId, std::string> (id, path)});\n+    return CanonicalPath ({std::pair<NodeId, std::string> (id, path)},\n+\t\t\t  UNKNOWN_CREATENUM);\n   }\n \n   std::string get () const\n@@ -77,21 +78,24 @@ class CanonicalPath\n     return CanonicalPath::new_seg (id, \"Self\");\n   }\n \n-  static CanonicalPath create_empty () { return CanonicalPath ({}); }\n+  static CanonicalPath create_empty ()\n+  {\n+    return CanonicalPath ({}, UNKNOWN_CREATENUM);\n+  }\n \n   bool is_empty () const { return segs.size () == 0; }\n \n   CanonicalPath append (const CanonicalPath &other) const\n   {\n     rust_assert (!other.is_empty ());\n     if (is_empty ())\n-      return CanonicalPath (other.segs);\n+      return CanonicalPath (other.segs, crate_num);\n \n     std::vector<std::pair<NodeId, std::string>> copy (segs);\n     for (auto &s : other.segs)\n       copy.push_back (s);\n \n-    return CanonicalPath (copy);\n+    return CanonicalPath (copy, crate_num);\n   }\n \n   // if we have the path A::B::C this will give a callback for each segment\n@@ -110,7 +114,7 @@ class CanonicalPath\n     for (auto &seg : segs)\n       {\n \tbuf.push_back (seg);\n-\tif (!cb (CanonicalPath (buf)))\n+\tif (!cb (CanonicalPath (buf, crate_num)))\n \t  return;\n       }\n   }\n@@ -131,7 +135,7 @@ class CanonicalPath\n       {\n \tstd::vector<std::pair<NodeId, std::string>> buf;\n \tbuf.push_back ({seg.first, seg.second});\n-\tif (!cb (CanonicalPath (buf)))\n+\tif (!cb (CanonicalPath (buf, crate_num)))\n \t  return;\n       }\n   }\n@@ -150,26 +154,31 @@ class CanonicalPath\n     return segs.at (index);\n   }\n \n-  static bool segment_is_qualified_path (const std::string &seg)\n+  bool is_equal (const CanonicalPath &b) const\n   {\n-    return seg.find (\" as \") != std::string::npos;\n+    return get ().compare (b.get ()) == 0;\n   }\n \n-  bool is_equal (const CanonicalPath &b) const\n+  void set_crate_num (CrateNum n) { crate_num = n; }\n+\n+  CrateNum get_crate_num () const\n   {\n-    return get ().compare (b.get ()) == 0;\n+    rust_assert (crate_num != UNKNOWN_CREATENUM);\n+    return crate_num;\n   }\n \n   bool operator== (const CanonicalPath &b) const { return is_equal (b); }\n \n   bool operator< (const CanonicalPath &b) const { return get () < b.get (); }\n \n private:\n-  explicit CanonicalPath (std::vector<std::pair<NodeId, std::string>> path)\n-    : segs (path)\n+  explicit CanonicalPath (std::vector<std::pair<NodeId, std::string>> path,\n+\t\t\t  CrateNum crate_num)\n+    : segs (path), crate_num (crate_num)\n   {}\n \n   std::vector<std::pair<NodeId, std::string>> segs;\n+  CrateNum crate_num;\n };\n \n } // namespace Resolver"}]}