{"sha": "ac17ed5f5ed5351571382c3ae7f82a42951e0dc5", "node_id": "C_kwDOANBUbNoAKGFjMTdlZDVmNWVkNTM1MTU3MTM4MmMzYWU3ZjgyYTQyOTUxZTBkYzU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-23T16:26:09Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-24T11:19:23Z"}, "message": "Add HIR lowering for range expressions", "tree": {"sha": "136772a6f0d569c72d7055ec4a49e56457f19952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/136772a6f0d569c72d7055ec4a49e56457f19952"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac17ed5f5ed5351571382c3ae7f82a42951e0dc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac17ed5f5ed5351571382c3ae7f82a42951e0dc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac17ed5f5ed5351571382c3ae7f82a42951e0dc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac17ed5f5ed5351571382c3ae7f82a42951e0dc5/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf92a1012264f2544e73a7a8dd0ac1e473c7f658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf92a1012264f2544e73a7a8dd0ac1e473c7f658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf92a1012264f2544e73a7a8dd0ac1e473c7f658"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "df836fc5a5745c0e0f09bda893e8849d624695b8", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac17ed5f5ed5351571382c3ae7f82a42951e0dc5/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac17ed5f5ed5351571382c3ae7f82a42951e0dc5/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=ac17ed5f5ed5351571382c3ae7f82a42951e0dc5", "patch": "@@ -728,6 +728,85 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t    expr.get_outer_attrs (), expr.get_locus ());\n   }\n \n+  void visit (AST::RangeFromToExpr &expr) override\n+  {\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    HIR::Expr *range_from\n+      = ASTLoweringExpr::translate (expr.get_from_expr ().get ());\n+    HIR::Expr *range_to\n+      = ASTLoweringExpr::translate (expr.get_to_expr ().get ());\n+\n+    translated\n+      = new HIR::RangeFromToExpr (mapping,\n+\t\t\t\t  std::unique_ptr<HIR::Expr> (range_from),\n+\t\t\t\t  std::unique_ptr<HIR::Expr> (range_to),\n+\t\t\t\t  expr.get_locus ());\n+  }\n+\n+  void visit (AST::RangeFromExpr &expr) override\n+  {\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    HIR::Expr *range_from\n+      = ASTLoweringExpr::translate (expr.get_from_expr ().get ());\n+\n+    translated\n+      = new HIR::RangeFromExpr (mapping,\n+\t\t\t\tstd::unique_ptr<HIR::Expr> (range_from),\n+\t\t\t\texpr.get_locus ());\n+  }\n+\n+  void visit (AST::RangeToExpr &expr) override\n+  {\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    HIR::Expr *range_to\n+      = ASTLoweringExpr::translate (expr.get_to_expr ().get ());\n+\n+    translated\n+      = new HIR::RangeToExpr (mapping, std::unique_ptr<HIR::Expr> (range_to),\n+\t\t\t      expr.get_locus ());\n+  }\n+\n+  void visit (AST::RangeFullExpr &expr) override\n+  {\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated = new HIR::RangeFullExpr (mapping, expr.get_locus ());\n+  }\n+\n+  void visit (AST::RangeFromToInclExpr &expr) override\n+  {\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    HIR::Expr *range_from\n+      = ASTLoweringExpr::translate (expr.get_from_expr ().get ());\n+    HIR::Expr *range_to\n+      = ASTLoweringExpr::translate (expr.get_to_expr ().get ());\n+\n+    translated\n+      = new HIR::RangeFromToInclExpr (mapping,\n+\t\t\t\t      std::unique_ptr<HIR::Expr> (range_from),\n+\t\t\t\t      std::unique_ptr<HIR::Expr> (range_to),\n+\t\t\t\t      expr.get_locus ());\n+  }\n+\n private:\n   ASTLoweringExpr ()\n     : ASTLoweringBase (), translated (nullptr),"}, {"sha": "d1f34e212b36464eb23a50ddeeccaa90723c3248", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac17ed5f5ed5351571382c3ae7f82a42951e0dc5/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac17ed5f5ed5351571382c3ae7f82a42951e0dc5/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=ac17ed5f5ed5351571382c3ae7f82a42951e0dc5", "patch": "@@ -2480,6 +2480,8 @@ class RangeFromExpr : public RangeExpr\n \n   void accept_vis (HIRFullVisitor &vis) override;\n \n+  std::unique_ptr<Expr> &get_from_expr () { return from; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -2531,6 +2533,8 @@ class RangeToExpr : public RangeExpr\n \n   void accept_vis (HIRFullVisitor &vis) override;\n \n+  std::unique_ptr<Expr> &get_to_expr () { return to; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -2617,6 +2621,9 @@ class RangeFromToInclExpr : public RangeExpr\n \n   void accept_vis (HIRFullVisitor &vis) override;\n \n+  std::unique_ptr<Expr> &get_from_expr () { return from; }\n+  std::unique_ptr<Expr> &get_to_expr () { return to; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}]}