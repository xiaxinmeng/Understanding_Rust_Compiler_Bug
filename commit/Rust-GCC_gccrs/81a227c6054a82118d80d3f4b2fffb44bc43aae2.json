{"sha": "81a227c6054a82118d80d3f4b2fffb44bc43aae2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFhMjI3YzYwNTRhODIxMThkODBkM2Y0YjJmZmZiNDRiYzQzYWFlMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-11-09T20:22:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-11-09T20:22:48Z"}, "message": "c-parser.c (c_parser_omp_clause_final): Use c_parser_expr_no_commas...\n\nc/\n\t* c-parser.c (c_parser_omp_clause_final): Use\n\tc_parser_expr_no_commas, convert_lvalue_to_rvalue,\n\tc_objc_common_truthvalue_conversion, c_fully_fold and parentheses\n\tparsing instead of c_parser_paren_condition.\n\t(c_parser_omp_clause_if): Use c_parser_expr_no_commas,\n\tconvert_lvalue_to_rvalue, c_objc_common_truthvalue_conversion and\n\tc_fully_fold instead of c_parser_condition.\n\t(c_parser_omp_clause_num_threads, c_parser_omp_clause_num_tasks,\n\tc_parser_omp_clause_grainsize, c_parser_omp_clause_priority,\n\tc_parser_omp_clause_hint, c_parser_omp_clause_num_teams,\n\tc_parser_omp_clause_thread_limit, c_parser_omp_clause_linear): Use\n\tc_parser_expr_no_commas instead of c_parser_expression.\ncp/\n\t* parser.c (cp_parser_omp_clause_final, cp_parser_omp_clause_if): Use\n\tcp_parser_assignment_expression instead of cp_parser_condition.\n\t(cp_parser_omp_clause_num_threads, cp_parser_omp_clause_num_tasks,\n\tcp_parser_omp_clause_grainsize, cp_parser_omp_clause_priority,\n\tcp_parser_omp_clause_num_teams, cp_parser_omp_clause_thread_limit,\n\tcp_parser_omp_clause_linear, cp_parser_omp_clause_device): Use\n\tcp_parser_assignment_expression instead of cp_parser_expression.\n\t(cp_parser_omp_clause_hint): Likewise.  Formatting fix.\ntestsuite/\n\t* c-c++-common/gomp/clauses-5.c: New test.\n\nFrom-SVN: r265990", "tree": {"sha": "30c7e65f2d000b57efa94b635ccf00982a12d453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30c7e65f2d000b57efa94b635ccf00982a12d453"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81a227c6054a82118d80d3f4b2fffb44bc43aae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a227c6054a82118d80d3f4b2fffb44bc43aae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a227c6054a82118d80d3f4b2fffb44bc43aae2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a227c6054a82118d80d3f4b2fffb44bc43aae2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98c91c56bbe8a46ea46f6ca7c85a87c49c258372", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c91c56bbe8a46ea46f6ca7c85a87c49c258372", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98c91c56bbe8a46ea46f6ca7c85a87c49c258372"}], "stats": {"total": 138, "additions": 114, "deletions": 24}, "files": [{"sha": "df041a7a8c0fe42df7d8bcdba26fe92ee9bc0965", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a227c6054a82118d80d3f4b2fffb44bc43aae2/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a227c6054a82118d80d3f4b2fffb44bc43aae2/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=81a227c6054a82118d80d3f4b2fffb44bc43aae2", "patch": "@@ -1,5 +1,18 @@\n 2018-11-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* c-parser.c (c_parser_omp_clause_final): Use\n+\tc_parser_expr_no_commas, convert_lvalue_to_rvalue,\n+\tc_objc_common_truthvalue_conversion, c_fully_fold and parentheses\n+\tparsing instead of c_parser_paren_condition.\n+\t(c_parser_omp_clause_if): Use c_parser_expr_no_commas,\n+\tconvert_lvalue_to_rvalue, c_objc_common_truthvalue_conversion and\n+\tc_fully_fold instead of c_parser_condition.\n+\t(c_parser_omp_clause_num_threads, c_parser_omp_clause_num_tasks,\n+\tc_parser_omp_clause_grainsize, c_parser_omp_clause_priority,\n+\tc_parser_omp_clause_hint, c_parser_omp_clause_num_teams,\n+\tc_parser_omp_clause_thread_limit, c_parser_omp_clause_linear): Use\n+\tc_parser_expr_no_commas instead of c_parser_expression.\n+\n \t* c-parser.c (c_parser_omp_clause_reduction): Call sorry_at on\n \treduction clause with inscan modifier.\n "}, {"sha": "5f69e9d52fd4e34feff73aabc79c369c51e9ee4b", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a227c6054a82118d80d3f4b2fffb44bc43aae2/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a227c6054a82118d80d3f4b2fffb44bc43aae2/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=81a227c6054a82118d80d3f4b2fffb44bc43aae2", "patch": "@@ -12184,8 +12184,19 @@ c_parser_omp_clause_final (c_parser *parser, tree list)\n   location_t loc = c_parser_peek_token (parser)->location;\n   if (c_parser_next_token_is (parser, CPP_OPEN_PAREN))\n     {\n-      tree t = c_parser_paren_condition (parser);\n-      tree c;\n+      matching_parens parens;\n+      tree t, c;\n+      if (!parens.require_open (parser))\n+\tt = error_mark_node;\n+      else\n+\t{\n+\t  location_t eloc = c_parser_peek_token (parser)->location;\n+\t  c_expr expr = c_parser_expr_no_commas (parser, NULL);\n+\t  t = convert_lvalue_to_rvalue (eloc, expr, true, true).value;\n+\t  t = c_objc_common_truthvalue_conversion (eloc, t);\n+\t  t = c_fully_fold (t, false, NULL);\n+\t  parens.skip_until_found_close (parser);\n+\t}\n \n       check_no_duplicate_clause (list, OMP_CLAUSE_FINAL, \"final\");\n \n@@ -12305,7 +12316,11 @@ c_parser_omp_clause_if (c_parser *parser, tree list, bool is_omp)\n \t}\n     }\n \n-  tree t = c_parser_condition (parser), c;\n+  location_t loc = c_parser_peek_token (parser)->location;\n+  c_expr expr = c_parser_expr_no_commas (parser, NULL);\n+  expr = convert_lvalue_to_rvalue (loc, expr, true, true);\n+  tree t = c_objc_common_truthvalue_conversion (loc, expr.value), c;\n+  t = c_fully_fold (t, false, NULL);\n   parens.skip_until_found_close (parser);\n \n   for (c = list; c ; c = OMP_CLAUSE_CHAIN (c))\n@@ -12440,7 +12455,7 @@ c_parser_omp_clause_num_threads (c_parser *parser, tree list)\n   if (parens.require_open (parser))\n     {\n       location_t expr_loc = c_parser_peek_token (parser)->location;\n-      c_expr expr = c_parser_expression (parser);\n+      c_expr expr = c_parser_expr_no_commas (parser, NULL);\n       expr = convert_lvalue_to_rvalue (expr_loc, expr, false, true);\n       tree c, t = expr.value;\n       t = c_fully_fold (t, false, NULL);\n@@ -12486,7 +12501,7 @@ c_parser_omp_clause_num_tasks (c_parser *parser, tree list)\n   if (parens.require_open (parser))\n     {\n       location_t expr_loc = c_parser_peek_token (parser)->location;\n-      c_expr expr = c_parser_expression (parser);\n+      c_expr expr = c_parser_expr_no_commas (parser, NULL);\n       expr = convert_lvalue_to_rvalue (expr_loc, expr, false, true);\n       tree c, t = expr.value;\n       t = c_fully_fold (t, false, NULL);\n@@ -12532,7 +12547,7 @@ c_parser_omp_clause_grainsize (c_parser *parser, tree list)\n   if (parens.require_open (parser))\n     {\n       location_t expr_loc = c_parser_peek_token (parser)->location;\n-      c_expr expr = c_parser_expression (parser);\n+      c_expr expr = c_parser_expr_no_commas (parser, NULL);\n       expr = convert_lvalue_to_rvalue (expr_loc, expr, false, true);\n       tree c, t = expr.value;\n       t = c_fully_fold (t, false, NULL);\n@@ -12578,7 +12593,7 @@ c_parser_omp_clause_priority (c_parser *parser, tree list)\n   if (parens.require_open (parser))\n     {\n       location_t expr_loc = c_parser_peek_token (parser)->location;\n-      c_expr expr = c_parser_expression (parser);\n+      c_expr expr = c_parser_expr_no_commas (parser, NULL);\n       expr = convert_lvalue_to_rvalue (expr_loc, expr, false, true);\n       tree c, t = expr.value;\n       t = c_fully_fold (t, false, NULL);\n@@ -12625,7 +12640,7 @@ c_parser_omp_clause_hint (c_parser *parser, tree list)\n   if (parens.require_open (parser))\n     {\n       location_t expr_loc = c_parser_peek_token (parser)->location;\n-      c_expr expr = c_parser_expression (parser);\n+      c_expr expr = c_parser_expr_no_commas (parser, NULL);\n       expr = convert_lvalue_to_rvalue (expr_loc, expr, false, true);\n       tree c, t = expr.value;\n       t = c_fully_fold (t, false, NULL);\n@@ -13646,7 +13661,7 @@ c_parser_omp_clause_num_teams (c_parser *parser, tree list)\n   if (parens.require_open (parser))\n     {\n       location_t expr_loc = c_parser_peek_token (parser)->location;\n-      c_expr expr = c_parser_expression (parser);\n+      c_expr expr = c_parser_expr_no_commas (parser, NULL);\n       expr = convert_lvalue_to_rvalue (expr_loc, expr, false, true);\n       tree c, t = expr.value;\n       t = c_fully_fold (t, false, NULL);\n@@ -13691,7 +13706,7 @@ c_parser_omp_clause_thread_limit (c_parser *parser, tree list)\n   if (parens.require_open (parser))\n     {\n       location_t expr_loc = c_parser_peek_token (parser)->location;\n-      c_expr expr = c_parser_expression (parser);\n+      c_expr expr = c_parser_expr_no_commas (parser, NULL);\n       expr = convert_lvalue_to_rvalue (expr_loc, expr, false, true);\n       tree c, t = expr.value;\n       t = c_fully_fold (t, false, NULL);\n@@ -13812,7 +13827,7 @@ c_parser_omp_clause_linear (c_parser *parser, tree list)\n     {\n       c_parser_consume_token (parser);\n       location_t expr_loc = c_parser_peek_token (parser)->location;\n-      c_expr expr = c_parser_expression (parser);\n+      c_expr expr = c_parser_expr_no_commas (parser, NULL);\n       expr = convert_lvalue_to_rvalue (expr_loc, expr, false, true);\n       step = expr.value;\n       step = c_fully_fold (step, false, NULL);"}, {"sha": "cf738cbf0dac565b91728781537c532ec96c2872", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a227c6054a82118d80d3f4b2fffb44bc43aae2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a227c6054a82118d80d3f4b2fffb44bc43aae2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=81a227c6054a82118d80d3f4b2fffb44bc43aae2", "patch": "@@ -1,5 +1,14 @@\n 2018-11-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* parser.c (cp_parser_omp_clause_final, cp_parser_omp_clause_if): Use\n+\tcp_parser_assignment_expression instead of cp_parser_condition.\n+\t(cp_parser_omp_clause_num_threads, cp_parser_omp_clause_num_tasks,\n+\tcp_parser_omp_clause_grainsize, cp_parser_omp_clause_priority,\n+\tcp_parser_omp_clause_num_teams, cp_parser_omp_clause_thread_limit,\n+\tcp_parser_omp_clause_linear, cp_parser_omp_clause_device): Use\n+\tcp_parser_assignment_expression instead of cp_parser_expression.\n+\t(cp_parser_omp_clause_hint): Likewise.  Formatting fix.\n+\n \t* parser.c (cp_parser_omp_clause_reduction): Call sorry_at on\n \treduction clause with inscan modifier.\n "}, {"sha": "1766ef418a2204ccc87a70fea7bee9cb7aa4419d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a227c6054a82118d80d3f4b2fffb44bc43aae2/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a227c6054a82118d80d3f4b2fffb44bc43aae2/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=81a227c6054a82118d80d3f4b2fffb44bc43aae2", "patch": "@@ -32469,7 +32469,7 @@ cp_parser_omp_clause_final (cp_parser *parser, tree list, location_t location)\n   if (!parens.require_open (parser))\n     return list;\n \n-  t = cp_parser_condition (parser);\n+  t = cp_parser_assignment_expression (parser);\n \n   if (t == error_mark_node\n       || !parens.require_close (parser))\n@@ -32592,7 +32592,7 @@ cp_parser_omp_clause_if (cp_parser *parser, tree list, location_t location,\n \t}\n     }\n \n-  t = cp_parser_condition (parser);\n+  t = cp_parser_assignment_expression (parser);\n \n   if (t == error_mark_node\n       || !parens.require_close (parser))\n@@ -32696,7 +32696,7 @@ cp_parser_omp_clause_num_threads (cp_parser *parser, tree list,\n   if (!parens.require_open (parser))\n     return list;\n \n-  t = cp_parser_expression (parser);\n+  t = cp_parser_assignment_expression (parser);\n \n   if (t == error_mark_node\n       || !parens.require_close (parser))\n@@ -32727,7 +32727,7 @@ cp_parser_omp_clause_num_tasks (cp_parser *parser, tree list,\n   if (!parens.require_open (parser))\n     return list;\n \n-  t = cp_parser_expression (parser);\n+  t = cp_parser_assignment_expression (parser);\n \n   if (t == error_mark_node\n       || !parens.require_close (parser))\n@@ -32758,7 +32758,7 @@ cp_parser_omp_clause_grainsize (cp_parser *parser, tree list,\n   if (!parens.require_open (parser))\n     return list;\n \n-  t = cp_parser_expression (parser);\n+  t = cp_parser_assignment_expression (parser);\n \n   if (t == error_mark_node\n       || !parens.require_close (parser))\n@@ -32789,7 +32789,7 @@ cp_parser_omp_clause_priority (cp_parser *parser, tree list,\n   if (!parens.require_open (parser))\n     return list;\n \n-  t = cp_parser_expression (parser);\n+  t = cp_parser_assignment_expression (parser);\n \n   if (t == error_mark_node\n       || !parens.require_close (parser))\n@@ -32811,16 +32811,15 @@ cp_parser_omp_clause_priority (cp_parser *parser, tree list,\n    hint ( expression ) */\n \n static tree\n-cp_parser_omp_clause_hint (cp_parser *parser, tree list,\n-\t\t\t   location_t location)\n+cp_parser_omp_clause_hint (cp_parser *parser, tree list, location_t location)\n {\n   tree t, c;\n \n   matching_parens parens;\n   if (!parens.require_open (parser))\n     return list;\n \n-  t = cp_parser_expression (parser);\n+  t = cp_parser_assignment_expression (parser);\n \n   if (t == error_mark_node\n       || !parens.require_close (parser))\n@@ -33442,7 +33441,7 @@ cp_parser_omp_clause_num_teams (cp_parser *parser, tree list,\n   if (!parens.require_open (parser))\n     return list;\n \n-  t = cp_parser_expression (parser);\n+  t = cp_parser_assignment_expression (parser);\n \n   if (t == error_mark_node\n       || !parens.require_close (parser))\n@@ -33473,7 +33472,7 @@ cp_parser_omp_clause_thread_limit (cp_parser *parser, tree list,\n   if (!parens.require_open (parser))\n     return list;\n \n-  t = cp_parser_expression (parser);\n+  t = cp_parser_assignment_expression (parser);\n \n   if (t == error_mark_node\n       || !parens.require_close (parser))\n@@ -33641,7 +33640,7 @@ cp_parser_omp_clause_linear (cp_parser *parser, tree list,\n \t    step = NULL_TREE;\n \t}\n       if (!step)\n-\tstep = cp_parser_expression (parser);\n+\tstep = cp_parser_assignment_expression (parser);\n \n       if (!parens.require_close (parser))\n \tcp_parser_skip_to_closing_parenthesis (parser, /*recovering=*/true,\n@@ -34151,7 +34150,7 @@ cp_parser_omp_clause_device (cp_parser *parser, tree list,\n   if (!parens.require_open (parser))\n     return list;\n \n-  t = cp_parser_expression (parser);\n+  t = cp_parser_assignment_expression (parser);\n \n   if (t == error_mark_node\n       || !parens.require_close (parser))"}, {"sha": "c1b8d6b2cc1d8d1877f8ce3f9269192e59b935f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a227c6054a82118d80d3f4b2fffb44bc43aae2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a227c6054a82118d80d3f4b2fffb44bc43aae2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81a227c6054a82118d80d3f4b2fffb44bc43aae2", "patch": "@@ -1,5 +1,7 @@\n 2018-11-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* c-c++-common/gomp/clauses-5.c: New test.\n+\n \t* c-c++-common/gomp/requires-1.c: Prune not supported yet messages.\n \t* c-c++-common/gomp/requires-2.c: Likewise.\n \t* c-c++-common/gomp/requires-4.c: Likewise."}, {"sha": "35e16f095b3205a08e1b70332b309c5c0e6aee5c", "filename": "gcc/testsuite/c-c++-common/gomp/clauses-5.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a227c6054a82118d80d3f4b2fffb44bc43aae2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a227c6054a82118d80d3f4b2fffb44bc43aae2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-5.c?ref=81a227c6054a82118d80d3f4b2fffb44bc43aae2", "patch": "@@ -0,0 +1,52 @@\n+void\n+foo (int *p)\n+{\n+  int i, j = 0;\n+  #pragma omp parallel if (2, 1)\t\t/* { dg-error \"expected\" } */\n+  ;\n+  #pragma omp parallel num_threads (3, 4)\t/* { dg-error \"expected\" } */\n+  ;\n+  #pragma omp teams num_teams (4, 5)\t\t/* { dg-error \"expected\" } */\n+  ;\n+  #pragma omp teams thread_limit (6, 7)\t\t/* { dg-error \"expected\" } */\n+  ;\n+  #pragma omp for linear (j : 8, 9)\t\t/* { dg-error \"expected\" } */\n+  for (i = 0; i < 30; i++)\n+    j += (8, 9);\n+  #pragma omp for schedule (static, 3, 4)\t/* { dg-error \"expected\" } */\n+  for (i = 0; i < 30; i++)\n+    ;\n+  #pragma omp for collapse (1, 1)\t\t/* { dg-error \"expected\" } */\n+  for (i = 0; i < 30; i++)\n+    ;\n+  #pragma omp for ordered (1, 1)\t\t/* { dg-error \"expected\" } */\n+  for (i = 0; i < 30; i++)\n+    ;\n+  #pragma omp simd safelen (3, 4)\t\t/* { dg-error \"expected\" } */\n+  for (i = 0; i < 30; i++)\n+    ;\n+  #pragma omp simd simdlen (4, 8)\t\t/* { dg-error \"expected\" } */\n+  for (i = 0; i < 30; i++)\n+    ;\n+  #pragma omp simd aligned (p: 4, 8)\t\t/* { dg-error \"expected\" } */\n+  for (i = 0; i < 30; i++)\n+    ;\n+  #pragma omp teams\n+  #pragma omp distribute dist_schedule (static, 6, 7) /* { dg-error \"expected\" } */\n+  for (i = 0; i < 30; i++)\n+    ;\n+  #pragma omp task final (8, 1)\t\t\t/* { dg-error \"expected\" } */\n+  ;\n+  #pragma omp task priority (2, 3)\t\t/* { dg-error \"expected\" } */\n+  ;\n+  #pragma omp taskloop grainsize (4, 5)\t\t/* { dg-error \"expected\" } */\n+  for (i = 0; i < 30; i++)\n+    ;\n+  #pragma omp taskloop num_tasks (5, 6)\t\t/* { dg-error \"expected\" } */\n+  for (i = 0; i < 30; i++)\n+    ;\n+  #pragma omp target device (5, 1)\t\t/* { dg-error \"expected\" } */\n+  ;\n+  #pragma omp critical (baz) hint (2, 3)\t/* { dg-error \"expected\" } */\n+  ;\n+}"}]}