{"sha": "aa90b11170630993a99b1e18190e9f0a8e7b2265", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE5MGIxMTE3MDYzMDk5M2E5OWIxZTE4MTkwZTlmMGE4ZTdiMjI2NQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@rabi.phys.columbia.edu", "date": "1998-09-30T19:27:28Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-30T19:27:28Z"}, "message": "cpplib.c (macroexpand): If arg->raw_before or arg->raw_after...\n\n        * cpplib.c (macroexpand): If arg->raw_before or\n        arg->raw_after, remove any no-reexpansion escape at the\n        beginning of the pasted token.  Correct handling of whitespace\n        markers and no-reexpand markers at the end if arg->raw_after.\n\nFrom-SVN: r22695", "tree": {"sha": "a41dcb5cea7aab2ae8fb687f3d5c09e230857796", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a41dcb5cea7aab2ae8fb687f3d5c09e230857796"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa90b11170630993a99b1e18190e9f0a8e7b2265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa90b11170630993a99b1e18190e9f0a8e7b2265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa90b11170630993a99b1e18190e9f0a8e7b2265", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa90b11170630993a99b1e18190e9f0a8e7b2265/comments", "author": null, "committer": null, "parents": [{"sha": "f0c76b51b4075e1bcbdf0aa427cfed3b6311e237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c76b51b4075e1bcbdf0aa427cfed3b6311e237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0c76b51b4075e1bcbdf0aa427cfed3b6311e237"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "4e5ea59e08f3b63be600cdad979dbd4261108d99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa90b11170630993a99b1e18190e9f0a8e7b2265/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa90b11170630993a99b1e18190e9f0a8e7b2265/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa90b11170630993a99b1e18190e9f0a8e7b2265", "patch": "@@ -6,6 +6,11 @@ Wed Sep 30 19:33:07 1998  Jeffrey A Law  (law@cygnus.com)\n \n Wed Sep 30 19:13:20 1998 Zack Weinberg  <zack@rabi.phys.columbia.edu>  \n \n+\t* cpplib.c (macroexpand): If arg->raw_before or\n+\targ->raw_after, remove any no-reexpansion escape at the\n+\tbeginning of the pasted token.  Correct handling of whitespace\n+\tmarkers and no-reexpand markers at the end if arg->raw_after.\n+\n \t* toplev.c (documented_lang_options): Recognize -include,\n \t-imacros, -iwithprefix, -iwithprefixbefore.\n \t* cpplib.c (cpp_start_read): Process -imacros and -include"}, {"sha": "b37a779819cc1a0b3d613bde7185f5cc6d9abbd6", "filename": "gcc/cpplib.c", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa90b11170630993a99b1e18190e9f0a8e7b2265/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa90b11170630993a99b1e18190e9f0a8e7b2265/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=aa90b11170630993a99b1e18190e9f0a8e7b2265", "patch": "@@ -2874,11 +2874,6 @@ macroexpand (pfile, hp)\n \t\t  while (p1 != l1 && is_space[*p1]) p1++;\n \t\t  while (p1 != l1 && is_idchar[*p1])\n \t\t    xbuf[totlen++] = *p1++;\n-\t\t  /* Delete any no-reexpansion marker that follows\n-\t\t     an identifier at the beginning of the argument\n-\t\t     if the argument is concatenated with what precedes it.  */\n-\t\t  if (p1[0] == '@' && p1[1] == '-')\n-\t\t    p1 += 2;\n \t\t}\n \t      if (ap->raw_after)\n \t\t{\n@@ -2887,21 +2882,38 @@ macroexpand (pfile, hp)\n \t\t  while (p1 != l1)\n \t\t    {\n \t\t      if (is_space[l1[-1]]) l1--;\n+\t\t      else if (l1[-1] == '@')\n+\t\t        {\n+\t\t\t  U_CHAR *p2 = l1 - 1;\n+\t\t\t  /* If whitespace is preceded by an odd number\n+\t\t\t     of `@' signs, the last `@' was a whitespace\n+\t\t\t     marker; drop it too. */\n+\t\t\t  while (p2 != p1 && p2[-1] == '@') p2--;\n+\t\t\t  if ((l1 - 1 - p2) & 1)\n+\t\t\t    l1--;\n+\t\t\t  break;\n+\t\t\t}\n \t\t      else if (l1[-1] == '-')\n \t\t\t{\n \t\t\t  U_CHAR *p2 = l1 - 1;\n-\t\t\t  /* If a `-' is preceded by an odd number of newlines then it\n-\t\t\t     and the last newline are a no-reexpansion marker.  */\n-\t\t\t  while (p2 != p1 && p2[-1] == '\\n') p2--;\n-\t\t\t  if ((l1 - 1 - p2) & 1) {\n+\t\t\t  /* If a `-' is preceded by an odd number of\n+\t\t\t     `@' signs then it and the last `@' are\n+\t\t\t     a no-reexpansion marker.  */\n+\t\t\t  while (p2 != p1 && p2[-1] == '@') p2--;\n+\t\t\t  if ((l1 - 1 - p2) & 1)\n \t\t\t    l1 -= 2;\n-\t\t\t  }\n-\t\t\t  else break;\n+\t\t\t  else\n+\t\t\t    break;\n \t\t\t}\n \t\t      else break;\n \t\t    }\n \t\t}\n \n+\t      /* Delete any no-reexpansion marker that precedes\n+\t\t an identifier at the beginning of the argument. */\n+\t      if (p1[0] == '@' && p1[1] == '-')\n+\t\tp1 += 2;\n+\n \t      bcopy (p1, xbuf + totlen, l1 - p1);\n \t      totlen += l1 - p1;\n \t    }"}]}