{"sha": "f2d040abea60db10675e0a5c2f91b7991541df90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJkMDQwYWJlYTYwZGIxMDY3NWUwYTVjMmY5MWI3OTkxNTQxZGY5MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-03-01T13:05:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-03-01T13:05:40Z"}, "message": "Fix mask type choice in vectorizable_call (PR 89535)\n\nThis is another case in which we were failing to pass the expected\nmask vector type to vect_get_vec_def_for_operand.\n\n2019-02-28  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/89535\n\t* tree-vect-stmts.c (vectorizable_call): Record the vector types\n\tfor each operand.  Calculate the fallback choice for mask operands\n\tand pass it to vect_get_vec_def_for_operand.\n\ngcc/testsuite/\n\tPR tree-optimization/89535\n\t* gfortran.dg/vect/pr89535.f90: New test.\n\nFrom-SVN: r269308", "tree": {"sha": "1eed7a55e632776e08f89a84c693a4194a3ff426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eed7a55e632776e08f89a84c693a4194a3ff426"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2d040abea60db10675e0a5c2f91b7991541df90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d040abea60db10675e0a5c2f91b7991541df90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d040abea60db10675e0a5c2f91b7991541df90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d040abea60db10675e0a5c2f91b7991541df90/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22fe0312b3782144a26aa1ca3769e0af883069a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22fe0312b3782144a26aa1ca3769e0af883069a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22fe0312b3782144a26aa1ca3769e0af883069a0"}], "stats": {"total": 53, "additions": 45, "deletions": 8}, "files": [{"sha": "4516510751df27ed7824059b6aacd6166e13609d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d040abea60db10675e0a5c2f91b7991541df90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d040abea60db10675e0a5c2f91b7991541df90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2d040abea60db10675e0a5c2f91b7991541df90", "patch": "@@ -1,3 +1,10 @@\n+2019-03-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/89535\n+\t* tree-vect-stmts.c (vectorizable_call): Record the vector types\n+\tfor each operand.  Calculate the fallback choice for mask operands\n+\tand pass it to vect_get_vec_def_for_operand.\n+\n 2019-03-01  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/89541"}, {"sha": "2ad0d80f04a64c44cec972b8414225f05b039052", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d040abea60db10675e0a5c2f91b7991541df90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d040abea60db10675e0a5c2f91b7991541df90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f2d040abea60db10675e0a5c2f91b7991541df90", "patch": "@@ -1,3 +1,8 @@\n+2019-03-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/89535\n+\t* gfortran.dg/vect/pr89535.f90: New test.\n+\n 2019-03-01  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/89541"}, {"sha": "3e2e9976fdc82a5b62d435eabc3bac146518816f", "filename": "gcc/testsuite/gfortran.dg/vect/pr89535.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d040abea60db10675e0a5c2f91b7991541df90/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr89535.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d040abea60db10675e0a5c2f91b7991541df90/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr89535.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr89535.f90?ref=f2d040abea60db10675e0a5c2f91b7991541df90", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+\n+subroutine foo(tmp1, tmp2, tmp3)\n+  integer, parameter :: n = 100\n+  real :: tmp1(n,2), tmp2(n), tmp3(n)\n+  integer :: i, c1, c2, c3\n+  logical :: cond\n+  common c1, c2, c3\n+\n+  c2 = c3\n+  cond = c1 .eq. 1 .and. c3 .eq. 1\n+  do i = 1,100\n+     if (cond) tmp2(i) = tmp1(i,1) / tmp1(i,2)\n+  end do\n+  do i = 1,100\n+     if (cond) tmp3(i) = tmp2(i)\n+  end do\n+end subroutine foo"}, {"sha": "6c631db90399264945bb4d2cabb269976becc45e", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d040abea60db10675e0a5c2f91b7991541df90/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d040abea60db10675e0a5c2f91b7991541df90/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=f2d040abea60db10675e0a5c2f91b7991541df90", "patch": "@@ -3123,6 +3123,7 @@ vectorizable_call (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   enum vect_def_type dt[4]\n     = { vect_unknown_def_type, vect_unknown_def_type, vect_unknown_def_type,\n \tvect_unknown_def_type };\n+  tree vectypes[ARRAY_SIZE (dt)] = {};\n   int ndts = ARRAY_SIZE (dt);\n   int ncopies, j;\n   auto_vec<tree, 8> vargs;\n@@ -3182,10 +3183,8 @@ vectorizable_call (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \n   for (i = 0; i < nargs; i++)\n     {\n-      tree opvectype;\n-\n       op = gimple_call_arg (stmt, i);\n-      if (!vect_is_simple_use (op, vinfo, &dt[i], &opvectype))\n+      if (!vect_is_simple_use (op, vinfo, &dt[i], &vectypes[i]))\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -3211,9 +3210,9 @@ vectorizable_call (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \trhs_type = TREE_TYPE (op);\n \n       if (!vectype_in)\n-\tvectype_in = opvectype;\n-      else if (opvectype\n-\t       && opvectype != vectype_in)\n+\tvectype_in = vectypes[i];\n+      else if (vectypes[i]\n+\t       && vectypes[i] != vectype_in)\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -3446,12 +3445,19 @@ vectorizable_call (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t      continue;\n \t    }\n \n+\t  if (mask_opno >= 0 && !vectypes[mask_opno])\n+\t    {\n+\t      gcc_assert (modifier != WIDEN);\n+\t      vectypes[mask_opno]\n+\t\t= build_same_sized_truth_vector_type (vectype_in);\n+\t    }\n+\n \t  for (i = 0; i < nargs; i++)\n \t    {\n \t      op = gimple_call_arg (stmt, i);\n \t      if (j == 0)\n \t\tvec_oprnd0\n-\t\t  = vect_get_vec_def_for_operand (op, stmt_info);\n+\t\t  = vect_get_vec_def_for_operand (op, stmt_info, vectypes[i]);\n \t      else\n \t\tvec_oprnd0\n \t\t  = vect_get_vec_def_for_stmt_copy (vinfo, orig_vargs[i]);\n@@ -3584,7 +3590,8 @@ vectorizable_call (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t      if (j == 0)\n \t\t{\n \t\t  vec_oprnd0\n-\t\t    = vect_get_vec_def_for_operand (op, stmt_info);\n+\t\t    = vect_get_vec_def_for_operand (op, stmt_info,\n+\t\t\t\t\t\t    vectypes[i]);\n \t\t  vec_oprnd1\n \t\t    = vect_get_vec_def_for_stmt_copy (vinfo, vec_oprnd0);\n \t\t}"}]}