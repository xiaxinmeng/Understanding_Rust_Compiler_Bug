{"sha": "c1c9fcb6ac7f22c0ac8c34a4643b04f2a54c1629", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFjOWZjYjZhYzdmMjJjMGFjOGMzNGE0NjQzYjA0ZjJhNTRjMTYyOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-01-09T14:47:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-01-09T14:47:32Z"}, "message": "sparc.md (*tablejump_sp32): Merge into...\n\n\t* config/sparc/sparc.md (*tablejump_sp32): Merge into...\n\t(*tablejump_sp64): Likewise.\n\t(*tablejump<P:mode>): ...this.\n\t(*call_address_sp32): Merge into...\n\t(*call_address_sp64): Likewise.\n\t(*call_address<P:mode>): ...this.\n\t(*call_symbolic_sp32): Merge into...\n\t(*call_symbolic_sp64): Likewise.\n\t(*call_symbolic<P:mode>): ...this.\n\t(call_value): Remove constraint and add predicate.\n\t(*call_value_address_sp32): Merge into...\n\t(*call_value_address_sp64): Likewise.\n\t(*call_value_address<P:mode>): ...this.\n\t(*call_value_symbolic_sp32): Merge into...\n\t(*call_value_symbolic_sp64): Likewise.\n\t(*call_value_symbolic<P:mode>): ...this.\n\t(*sibcall_symbolic_sp32): Merge into...\n\t(*sibcall_symbolic_sp64): Likewise.\n\t(*sibcall_symbolic<P:mode>): ...this.\n\t(sibcall_value): Remove constraint and add predicate.\n\t(*sibcall_value_symbolic_sp32): Merge into...\n\t(*sibcall_value_symbolic_sp64): Likewise.\n\t(*sibcall_value_symbolic<P:mode>): ...this.\n\t(window_save): Minor tweak.\n\t(*branch_sp32): Merge into...\n\t(*branch_sp64): Likewise.\n\t(*branch<P:mode>): ...this.\n\nFrom-SVN: r267774", "tree": {"sha": "942d969c6021c28d81bfd9847718732346c17f8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/942d969c6021c28d81bfd9847718732346c17f8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1c9fcb6ac7f22c0ac8c34a4643b04f2a54c1629", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c9fcb6ac7f22c0ac8c34a4643b04f2a54c1629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1c9fcb6ac7f22c0ac8c34a4643b04f2a54c1629", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c9fcb6ac7f22c0ac8c34a4643b04f2a54c1629/comments", "author": null, "committer": null, "parents": [{"sha": "4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb"}], "stats": {"total": 174, "additions": 65, "deletions": 109}, "files": [{"sha": "09e176a9418e90c6bcce4fb694733fb1ce85eeba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1c9fcb6ac7f22c0ac8c34a4643b04f2a54c1629/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1c9fcb6ac7f22c0ac8c34a4643b04f2a54c1629/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1c9fcb6ac7f22c0ac8c34a4643b04f2a54c1629", "patch": "@@ -1,3 +1,33 @@\n+2019-01-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.md (*tablejump_sp32): Merge into...\n+\t(*tablejump_sp64): Likewise.\n+\t(*tablejump<P:mode>): ...this.\n+\t(*call_address_sp32): Merge into...\n+\t(*call_address_sp64): Likewise.\n+\t(*call_address<P:mode>): ...this.\n+\t(*call_symbolic_sp32): Merge into...\n+\t(*call_symbolic_sp64): Likewise.\n+\t(*call_symbolic<P:mode>): ...this.\n+\t(call_value): Remove constraint and add predicate.\n+\t(*call_value_address_sp32): Merge into...\n+\t(*call_value_address_sp64): Likewise.\n+\t(*call_value_address<P:mode>): ...this.\n+\t(*call_value_symbolic_sp32): Merge into...\n+\t(*call_value_symbolic_sp64): Likewise.\n+\t(*call_value_symbolic<P:mode>): ...this.\n+\t(*sibcall_symbolic_sp32): Merge into...\n+\t(*sibcall_symbolic_sp64): Likewise.\n+\t(*sibcall_symbolic<P:mode>): ...this.\n+\t(sibcall_value): Remove constraint and add predicate.\n+\t(*sibcall_value_symbolic_sp32): Merge into...\n+\t(*sibcall_value_symbolic_sp64): Likewise.\n+\t(*sibcall_value_symbolic<P:mode>): ...this.\n+\t(window_save): Minor tweak.\n+\t(*branch_sp32): Merge into...\n+\t(*branch_sp64): Likewise.\n+\t(*branch<P:mode>): ...this.\n+\n 2019-01-09  Eric Botcazou  <ebotcazou@adacore.com>\n             James Clarke  <jrtc27@jrtc27.com>\n "}, {"sha": "271eaf9c92163b4f8086c42d991ae69255576853", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 35, "deletions": 109, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1c9fcb6ac7f22c0ac8c34a4643b04f2a54c1629/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1c9fcb6ac7f22c0ac8c34a4643b04f2a54c1629/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=c1c9fcb6ac7f22c0ac8c34a4643b04f2a54c1629", "patch": "@@ -6842,17 +6842,10 @@ visl\")\n     }\n })\n \n-(define_insn \"*tablejump_sp32\"\n-  [(set (pc) (match_operand:SI 0 \"address_operand\" \"p\"))\n+(define_insn \"*tablejump<P:mode>\"\n+  [(set (pc) (match_operand:P 0 \"address_operand\" \"p\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n-  \"TARGET_ARCH32\"\n-  \"jmp\\t%a0%#\"\n-  [(set_attr \"type\" \"uncond_branch\")])\n-\n-(define_insn \"*tablejump_sp64\"\n-  [(set (pc) (match_operand:DI 0 \"address_operand\" \"p\"))\n-   (use (label_ref (match_operand 1 \"\" \"\")))]\n-  \"TARGET_ARCH64\"\n+  \"\"\n   \"jmp\\t%a0%#\"\n   [(set_attr \"type\" \"uncond_branch\")])\n \n@@ -6929,39 +6922,21 @@ visl\")\n ;; We can't use the same pattern for these two insns, because then registers\n ;; in the address may not be properly reloaded.\n \n-(define_insn \"*call_address_sp32\"\n-  [(call (mem:SI (match_operand:SI 0 \"address_operand\" \"p\"))\n-\t (match_operand 1 \"\" \"\"))\n-   (clobber (reg:SI O7_REG))]\n-  ;;- Do not use operand 1 for most machines.\n-  \"TARGET_ARCH32\"\n-  \"call\\t%a0, %1%#\"\n-  [(set_attr \"type\" \"call\")])\n-\n-(define_insn \"*call_symbolic_sp32\"\n-  [(call (mem:SI (match_operand:SI 0 \"symbolic_operand\" \"s\"))\n-\t (match_operand 1 \"\" \"\"))\n-   (clobber (reg:SI O7_REG))]\n-  ;;- Do not use operand 1 for most machines.\n-  \"TARGET_ARCH32\"\n-  \"call\\t%a0, %1%#\"\n-  [(set_attr \"type\" \"call\")])\n-\n-(define_insn \"*call_address_sp64\"\n-  [(call (mem:DI (match_operand:DI 0 \"address_operand\" \"p\"))\n+(define_insn \"*call_address<P:mode>\"\n+  [(call (mem:P (match_operand:P 0 \"address_operand\" \"p\"))\n \t (match_operand 1 \"\" \"\"))\n-   (clobber (reg:DI O7_REG))]\n+   (clobber (reg:P O7_REG))]\n   ;;- Do not use operand 1 for most machines.\n-  \"TARGET_ARCH64\"\n+  \"\"\n   \"call\\t%a0, %1%#\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_insn \"*call_symbolic_sp64\"\n-  [(call (mem:DI (match_operand:DI 0 \"symbolic_operand\" \"s\"))\n+(define_insn \"*call_symbolic<P:mode>\"\n+  [(call (mem:P (match_operand:P 0 \"symbolic_operand\" \"s\"))\n \t (match_operand 1 \"\" \"\"))\n-   (clobber (reg:DI O7_REG))]\n+   (clobber (reg:P O7_REG))]\n   ;;- Do not use operand 1 for most machines.\n-  \"TARGET_ARCH64\"\n+  \"\"\n   \"call\\t%a0, %1%#\"\n   [(set_attr \"type\" \"call\")])\n \n@@ -7026,8 +7001,8 @@ visl\")\n (define_expand \"call_value\"\n   ;; Note that this expression is not used for generating RTL.\n   ;; All the RTL is generated explicitly below.\n-  [(set (match_operand 0 \"register_operand\" \"=rf\")\n-\t(call (match_operand 1 \"\" \"\")\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(call (match_operand 1 \"call_operand\" \"\")\n \t      (match_operand 4 \"\" \"\")))]\n   ;; operand 2 is stack_size_rtx\n   ;; operand 3 is next_arg_register\n@@ -7050,43 +7025,23 @@ visl\")\n   DONE;\n })\n \n-(define_insn \"*call_value_address_sp32\"\n-  [(set (match_operand 0 \"\" \"=rf\")\n-\t(call (mem:SI (match_operand:SI 1 \"address_operand\" \"p\"))\n-\t      (match_operand 2 \"\" \"\")))\n-   (clobber (reg:SI O7_REG))]\n-  ;;- Do not use operand 2 for most machines.\n-  \"TARGET_ARCH32\"\n-  \"call\\t%a1, %2%#\"\n-  [(set_attr \"type\" \"call\")])\n-\n-(define_insn \"*call_value_symbolic_sp32\"\n-  [(set (match_operand 0 \"\" \"=rf\")\n-\t(call (mem:SI (match_operand:SI 1 \"symbolic_operand\" \"s\"))\n-\t      (match_operand 2 \"\" \"\")))\n-   (clobber (reg:SI O7_REG))]\n-  ;;- Do not use operand 2 for most machines.\n-  \"TARGET_ARCH32\"\n-  \"call\\t%a1, %2%#\"\n-  [(set_attr \"type\" \"call\")])\n-\n-(define_insn \"*call_value_address_sp64\"\n+(define_insn \"*call_value_address<P:mode>\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:DI (match_operand:DI 1 \"address_operand\" \"p\"))\n+\t(call (mem:P (match_operand:P 1 \"address_operand\" \"p\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (clobber (reg:DI O7_REG))]\n+   (clobber (reg:P O7_REG))]\n   ;;- Do not use operand 2 for most machines.\n-  \"TARGET_ARCH64\"\n+  \"\"\n   \"call\\t%a1, %2%#\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_insn \"*call_value_symbolic_sp64\"\n+(define_insn \"*call_value_symbolic<P:mode>\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:DI (match_operand:DI 1 \"symbolic_operand\" \"s\"))\n+\t(call (mem:P (match_operand:P 1 \"symbolic_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (clobber (reg:DI O7_REG))]\n+   (clobber (reg:P O7_REG))]\n   ;;- Do not use operand 2 for most machines.\n-  \"TARGET_ARCH64\"\n+  \"\"\n   \"call\\t%a1, %2%#\"\n   [(set_attr \"type\" \"call\")])\n \n@@ -7131,52 +7086,31 @@ visl\")\n   \"\"\n   \"\")\n \n-(define_insn \"*sibcall_symbolic_sp32\"\n-  [(call (mem:SI (match_operand:SI 0 \"symbolic_operand\" \"s\"))\n+(define_insn \"*sibcall_symbolic<P:mode>\"\n+  [(call (mem:P (match_operand:P 0 \"symbolic_operand\" \"s\"))\n \t (match_operand 1 \"\" \"\"))\n    (return)]\n-  \"TARGET_ARCH32\"\n-{\n-  return output_sibcall(insn, operands[0]);\n-}\n-  [(set_attr \"type\" \"sibcall\")])\n-\n-(define_insn \"*sibcall_symbolic_sp64\"\n-  [(call (mem:DI (match_operand:DI 0 \"symbolic_operand\" \"s\"))\n-\t (match_operand 1 \"\" \"\"))\n-   (return)]\n-  \"TARGET_ARCH64\"\n+  \"\"\n {\n-  return output_sibcall(insn, operands[0]);\n+  return output_sibcall (insn, operands[0]);\n }\n   [(set_attr \"type\" \"sibcall\")])\n \n (define_expand \"sibcall_value\"\n-  [(parallel [(set (match_operand 0 \"register_operand\" \"=rf\")\n-\t\t(call (match_operand 1 \"\" \"\") (const_int 0)))\n+  [(parallel [(set (match_operand 0 \"register_operand\")\n+\t\t   (call (match_operand 1 \"call_operand\" \"\") (const_int 0)))\n \t      (return)])]\n   \"\"\n   \"\")\n \n-(define_insn \"*sibcall_value_symbolic_sp32\"\n-  [(set (match_operand 0 \"\" \"=rf\")\n-\t(call (mem:SI (match_operand:SI 1 \"symbolic_operand\" \"s\"))\n-\t      (match_operand 2 \"\" \"\")))\n-   (return)]\n-  \"TARGET_ARCH32\"\n-{\n-  return output_sibcall(insn, operands[1]);\n-}\n-  [(set_attr \"type\" \"sibcall\")])\n-\n-(define_insn \"*sibcall_value_symbolic_sp64\"\n+(define_insn \"*sibcall_value_symbolic<P:mode>\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:DI (match_operand:DI 1 \"symbolic_operand\" \"s\"))\n+\t(call (mem:P (match_operand:P 1 \"symbolic_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"\")))\n    (return)]\n-  \"TARGET_ARCH64\"\n+  \"\"\n {\n-  return output_sibcall(insn, operands[1]);\n+  return output_sibcall (insn, operands[1]);\n }\n   [(set_attr \"type\" \"sibcall\")])\n \n@@ -7198,9 +7132,7 @@ visl\")\n ;; information is manually added in emit_window_save.\n \n (define_insn \"window_save\"\n-  [(unspec_volatile\n-\t[(match_operand 0 \"arith_operand\" \"rI\")]\n-\tUNSPECV_SAVEW)]\n+  [(unspec_volatile [(match_operand 0 \"arith_operand\" \"rI\")] UNSPECV_SAVEW)]\n   \"!TARGET_FLAT\"\n   \"save\\t%%sp, %0, %%sp\"\n   [(set_attr \"type\" \"savew\")])\n@@ -7416,18 +7348,12 @@ visl\")\n   \"\"\n   \"\")\n \n-(define_insn \"*branch_sp32\"\n-  [(set (pc) (match_operand:SI 0 \"address_operand\" \"p\"))]\n-  \"TARGET_ARCH32\"\n+(define_insn \"*branch<P:mode>\"\n+  [(set (pc) (match_operand:P 0 \"address_operand\" \"p\"))]\n+  \"\"\n  \"jmp\\t%a0%#\"\n  [(set_attr \"type\" \"uncond_branch\")])\n  \n-(define_insn \"*branch_sp64\"\n-  [(set (pc) (match_operand:DI 0 \"address_operand\" \"p\"))]\n-  \"TARGET_ARCH64\"\n-  \"jmp\\t%a0%#\"\n-  [(set_attr \"type\" \"uncond_branch\")])\n-\n (define_expand \"save_stack_nonlocal\"\n   [(set (match_operand 0 \"memory_operand\" \"\")\n \t(match_operand 1 \"register_operand\" \"\"))"}]}