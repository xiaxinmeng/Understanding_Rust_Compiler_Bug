{"sha": "1966af04b7dd0d550d4672e9007874110c5eac23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk2NmFmMDRiN2RkMGQ1NTBkNDY3MmU5MDA3ODc0MTEwYzVlYWMyMw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2005-07-03T06:50:51Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2005-07-03T06:50:51Z"}, "message": "tree-dump.h (dump_string_field): Declare.\n\n        * tree-dump.h (dump_string_field): Declare.\n        * tree-dump.c: Use it instead of dump_string.\n        (dump_string_field): Make non-static.\n\ncp/\n        * dump.c: Use dump_string_field.\n\nFrom-SVN: r101547", "tree": {"sha": "211037cba9c5f424653fb03ddd859f97f6a5e6f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/211037cba9c5f424653fb03ddd859f97f6a5e6f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1966af04b7dd0d550d4672e9007874110c5eac23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1966af04b7dd0d550d4672e9007874110c5eac23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1966af04b7dd0d550d4672e9007874110c5eac23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1966af04b7dd0d550d4672e9007874110c5eac23/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "384a87604e25dc3f2874a3e1db97cf8e8303aafb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/384a87604e25dc3f2874a3e1db97cf8e8303aafb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/384a87604e25dc3f2874a3e1db97cf8e8303aafb"}], "stats": {"total": 83, "additions": 46, "deletions": 37}, "files": [{"sha": "ac9afebcbdb7b7b68b920ae9308e6d5fdc9db765", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1966af04b7dd0d550d4672e9007874110c5eac23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1966af04b7dd0d550d4672e9007874110c5eac23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1966af04b7dd0d550d4672e9007874110c5eac23", "patch": "@@ -1,3 +1,9 @@\n+2005-07-02  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* tree-dump.h (dump_string_field): Declare.\n+\t* tree-dump.c: Use it instead of dump_string.\n+\t(dump_string_field): Make non-static.\n+\n 2005-07-03  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.c (sh_output_mi_thunk): Initialize and clean"}, {"sha": "359559481ddbc28e366a17a6b2c5c89760285690", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1966af04b7dd0d550d4672e9007874110c5eac23/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1966af04b7dd0d550d4672e9007874110c5eac23/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1966af04b7dd0d550d4672e9007874110c5eac23", "patch": "@@ -1,3 +1,7 @@\n+2005-07-02  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* dump.c: Use dump_string_field.\n+\n 2005-07-03  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* cp-tree.h (GCC_DIAG_STYLE): #undef before defining.  Change"}, {"sha": "c63cfe2bd898beea107ac6d553fa0e37c52bd4f3", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1966af04b7dd0d550d4672e9007874110c5eac23/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1966af04b7dd0d550d4672e9007874110c5eac23/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=1966af04b7dd0d550d4672e9007874110c5eac23", "patch": "@@ -39,11 +39,11 @@ static void\n dump_access (dump_info_p di, tree t)\n {\n   if (TREE_PROTECTED(t))\n-    dump_string (di, \"protected\");\n+    dump_string_field (di, \"accs\", \"prot\");\n   else if (TREE_PRIVATE(t))\n-    dump_string (di, \"private\");\n+    dump_string_field (di, \"accs\", \"priv\");\n   else\n-    dump_string (di, \"public\");\n+    dump_string_field (di, \"accs\", \"pub\");\n }\n \n /* Dump a representation of the specific operator for an overloaded\n@@ -215,15 +215,15 @@ cp_dump_tree (void* dump_info, tree t)\n   if (DECL_P (t))\n     {\n       if (DECL_LANG_SPECIFIC (t) && DECL_LANGUAGE (t) != lang_cplusplus)\n-\tdump_string (di, language_to_string (DECL_LANGUAGE (t)));\n+\tdump_string_field (di, \"lang\", language_to_string (DECL_LANGUAGE (t)));\n     }\n \n   switch (code)\n     {\n     case IDENTIFIER_NODE:\n       if (IDENTIFIER_OPNAME_P (t))\n \t{\n-\t  dump_string (di, \"operator\");\n+\t  dump_string_field (di, \"note\", \"operator\");\n \t  return true;\n \t}\n       else if (IDENTIFIER_TYPENAME_P (t))\n@@ -234,15 +234,15 @@ cp_dump_tree (void* dump_info, tree t)\n       break;\n \n     case OFFSET_TYPE:\n-      dump_string (di, \"ptrmem\");\n+      dump_string_field (di, \"note\", \"ptrmem\");\n       dump_child (\"ptd\", TYPE_PTRMEM_POINTED_TO_TYPE (t));\n       dump_child (\"cls\", TYPE_PTRMEM_CLASS_TYPE (t));\n       return true;\n \n     case RECORD_TYPE:\n       if (TYPE_PTRMEMFUNC_P (t))\n \t{\n-\t  dump_string (di, \"ptrmem\");\n+\t  dump_string_field (di, \"note\", \"ptrmem\");\n \t  dump_child (\"ptd\", TYPE_PTRMEM_POINTED_TO_TYPE (t));\n \t  dump_child (\"cls\", TYPE_PTRMEM_CLASS_TYPE (t));\n \t  return true;\n@@ -276,7 +276,7 @@ cp_dump_tree (void* dump_info, tree t)\n \t    {\n \t      dump_child (\"base\", BINFO_TYPE (base_binfo));\n \t      if (BINFO_VIRTUAL_P (base_binfo))\n-\t\tdump_string (di, \"virtual\");\n+\t\tdump_string_field (di, \"spec\", \"virt\");\n \t      dump_access (di, base_binfo);\n \t    }\n \t}\n@@ -285,55 +285,55 @@ cp_dump_tree (void* dump_info, tree t)\n     case FIELD_DECL:\n       dump_access (di, t);\n       if (DECL_MUTABLE_P (t))\n-\tdump_string(di, \"mutable\");\n+\tdump_string_field (di, \"spec\", \"mutable\");\n       break;\n \n     case VAR_DECL:\n       if (TREE_CODE (CP_DECL_CONTEXT (t)) == RECORD_TYPE)\n \tdump_access (di, t);\n       if (TREE_STATIC (t) && !TREE_PUBLIC (t))\n-\tdump_string (di, \"static\");\n+\tdump_string_field (di, \"link\", \"static\");\n       break;\n \n     case FUNCTION_DECL:\n       if (!DECL_THUNK_P (t))\n \t{\n \t  if (DECL_OVERLOADED_OPERATOR_P (t)) {\n-\t    dump_string (di, \"operator\");\n+\t    dump_string_field (di, \"note\", \"operator\");\n \t    dump_op (di, t);\n \t  }\n \t  if (DECL_FUNCTION_MEMBER_P (t))\n \t    {\n-\t      dump_string (di, \"member\");\n+\t      dump_string_field (di, \"note\", \"member\");\n \t      dump_access (di, t);\n \t    }\n \t  if (DECL_PURE_VIRTUAL_P (t))\n-\t    dump_string (di, \"pure\");\n+\t    dump_string_field (di, \"spec\", \"pure\");\n \t  if (DECL_VIRTUAL_P (t))\n-\t    dump_string (di, \"virtual\");\n+\t    dump_string_field (di, \"spec\", \"virt\");\n \t  if (DECL_CONSTRUCTOR_P (t))\n-\t    dump_string (di, \"constructor\");\n+\t    dump_string_field (di, \"note\", \"constructor\");\n \t  if (DECL_DESTRUCTOR_P (t))\n-\t    dump_string (di, \"destructor\");\n+\t    dump_string_field (di, \"note\", \"destructor\");\n \t  if (DECL_CONV_FN_P (t))\n-\t    dump_string (di, \"conversion\");\n+\t    dump_string_field (di, \"note\", \"conversion\");\n \t  if (DECL_GLOBAL_CTOR_P (t))\n-\t    dump_string (di, \"global init\");\n+\t    dump_string_field (di, \"note\", \"global init\");\n \t  if (DECL_GLOBAL_DTOR_P (t))\n-\t    dump_string (di, \"global fini\");\n+\t    dump_string_field (di, \"note\", \"global fini\");\n \t  if (DECL_FRIEND_PSEUDO_TEMPLATE_INSTANTIATION (t))\n-\t    dump_string (di, \"pseudo tmpl\");\n+\t    dump_string_field (di, \"note\", \"pseudo tmpl\");\n \t}\n       else\n \t{\n \t  tree virt = THUNK_VIRTUAL_OFFSET (t);\n \n-\t  dump_string (di, \"thunk\");\n+\t  dump_string_field (di, \"note\", \"thunk\");\n \t  if (DECL_THIS_THUNK_P (t))\n-\t    dump_string (di, \"this adjusting\");\n+\t    dump_string_field (di, \"note\", \"this adjusting\");\n \t  else\n \t    {\n-\t      dump_string (di, \"result adjusting\");\n+\t      dump_string_field (di, \"note\", \"result adjusting\");\n \t      if (virt)\n \t\tvirt = BINFO_VPTR_FIELD (virt);\n \t    }\n@@ -366,7 +366,7 @@ cp_dump_tree (void* dump_info, tree t)\n     case TRY_BLOCK:\n       dump_stmt (di, t);\n       if (CLEANUP_P (t))\n-\tdump_string (di, \"cleanup\");\n+\tdump_string_field (di, \"note\", \"cleanup\");\n       dump_child (\"body\", TRY_STMTS (t));\n       dump_child (\"hdlr\", TRY_HANDLERS (t));\n       break;"}, {"sha": "a69970ece93687473d212a25991defd3c8764eb3", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1966af04b7dd0d550d4672e9007874110c5eac23/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1966af04b7dd0d550d4672e9007874110c5eac23/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=1966af04b7dd0d550d4672e9007874110c5eac23", "patch": "@@ -38,7 +38,6 @@ static void dump_index (dump_info_p, unsigned int);\n static void dequeue_and_dump (dump_info_p);\n static void dump_new_line (dump_info_p);\n static void dump_maybe_newline (dump_info_p);\n-static void dump_string_field (dump_info_p, const char *, const char *);\n static int dump_enable_all (int, int);\n \n /* Add T to the end of the queue of nodes to dump.  Returns the index\n@@ -195,7 +194,7 @@ dump_string (dump_info_p di, const char *string)\n \n /* Dump the string field S.  */\n \n-static void\n+void\n dump_string_field (dump_info_p di, const char *field, const char *string)\n {\n   dump_maybe_newline (di);\n@@ -259,7 +258,7 @@ dequeue_and_dump (dump_info_p di)\n       dump_child (\"type\", BINFO_TYPE (t));\n \n       if (BINFO_VIRTUAL_P (t))\n-\tdump_string (di, \"virt\");\n+\tdump_string_field (di, \"spec\", \"virt\");\n \n       dump_int (di, \"bases\", BINFO_N_BASE_BINFOS (t));\n       for (ix = 0; BINFO_BASE_ITERATE (t, ix, base); ix++)\n@@ -277,7 +276,7 @@ dequeue_and_dump (dump_info_p di)\n \t  else\n \t    gcc_unreachable ();\n \n-\t  dump_string (di, string);\n+\t  dump_string_field (di, \"accs\", string);\n \t  queue_and_dump_index (di, \"binf\", base, DUMP_BINFO);\n \t}\n \n@@ -345,7 +344,7 @@ dequeue_and_dump (dump_info_p di)\n \t}\n       /* And any declaration can be compiler-generated.  */\n       if (DECL_ARTIFICIAL (t))\n-\tdump_string (di, \"artificial\");\n+\tdump_string_field (di, \"note\", \"artificial\");\n       if (TREE_CHAIN (t) && !dump_flag (di, TDF_SLIM, NULL))\n \tdump_child (\"chan\", TREE_CHAIN (t));\n     }\n@@ -427,8 +426,7 @@ dequeue_and_dump (dump_info_p di)\n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:\n       dump_int (di, \"prec\", TYPE_PRECISION (t));\n-      if (TYPE_UNSIGNED (t))\n-\tdump_string (di, \"unsigned\");\n+      dump_string_field (di, \"sign\", TYPE_UNSIGNED (t) ? \"unsigned\": \"signed\");\n       dump_child (\"min\", TYPE_MIN_VALUE (t));\n       dump_child (\"max\", TYPE_MAX_VALUE (t));\n \n@@ -465,9 +463,9 @@ dequeue_and_dump (dump_info_p di)\n     case RECORD_TYPE:\n     case UNION_TYPE:\n       if (TREE_CODE (t) == RECORD_TYPE)\n-\tdump_string (di, \"struct\");\n+\tdump_string_field (di, \"tag\", \"struct\");\n       else\n-\tdump_string (di, \"union\");\n+\tdump_string_field (di, \"tag\", \"union\");\n \n       dump_child (\"flds\", TYPE_FIELDS (t));\n       dump_child (\"fncs\", TYPE_METHODS (t));\n@@ -500,18 +498,18 @@ dequeue_and_dump (dump_info_p di)\n \t{\n \t  dump_int (di, \"used\", TREE_USED (t));\n \t  if (DECL_REGISTER (t))\n-\t    dump_string (di, \"register\");\n+\t    dump_string_field (di, \"spec\", \"register\");\n \t}\n       break;\n \n     case FUNCTION_DECL:\n       dump_child (\"args\", DECL_ARGUMENTS (t));\n       if (DECL_EXTERNAL (t))\n-\tdump_string (di, \"undefined\");\n+\tdump_string_field (di, \"body\", \"undefined\");\n       if (TREE_PUBLIC (t))\n-\tdump_string (di, \"extern\");\n+\tdump_string_field (di, \"link\", \"extern\");\n       else\n-\tdump_string (di, \"static\");\n+\tdump_string_field (di, \"link\", \"static\");\n       if (DECL_LANG_SPECIFIC (t) && !dump_flag (di, TDF_SLIM, t))\n \tdump_child (\"body\", DECL_SAVED_TREE (t));\n       break;"}, {"sha": "c4a102acce38d0185851289ec2c6e3b81aceaf90", "filename": "gcc/tree-dump.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1966af04b7dd0d550d4672e9007874110c5eac23/gcc%2Ftree-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1966af04b7dd0d550d4672e9007874110c5eac23/gcc%2Ftree-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.h?ref=1966af04b7dd0d550d4672e9007874110c5eac23", "patch": "@@ -82,6 +82,7 @@ struct dump_info\n extern void dump_pointer (dump_info_p, const char *, void *);\n extern void dump_int (dump_info_p, const char *, int);\n extern void dump_string (dump_info_p, const char *);\n+extern void dump_string_field (dump_info_p, const char *, const char *);\n extern void dump_stmt (dump_info_p, tree);\n extern void queue_and_dump_index (dump_info_p, const char *, tree, int);\n extern void queue_and_dump_type (dump_info_p, tree);"}]}