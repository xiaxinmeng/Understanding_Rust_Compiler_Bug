{"sha": "37bc3aa0474f21b7a678b09951634de3205d014e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdiYzNhYTA0NzRmMjFiN2E2NzhiMDk5NTE2MzRkZTMyMDVkMDE0ZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-09-19T13:13:21Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-09-19T13:13:21Z"}, "message": "Speed up qsort in IPA ICF.\n\n2019-09-19  Martin Liska  <mliska@suse.cz>\n\n\t* ipa-icf.c (sort_sem_items_by_decl_uid): Simplify comparator.\n\t(sort_congruence_classes_by_decl_uid): Likewise.\n\t(sort_congruence_class_groups_by_decl_uid): Use std::pair for\n\teasier sorting.\n\t(sem_item_optimizer::merge_classes): Likewise.\n\nFrom-SVN: r275961", "tree": {"sha": "3f3a62dfc37024ffa5b6ab2333427a62151fbe4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f3a62dfc37024ffa5b6ab2333427a62151fbe4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37bc3aa0474f21b7a678b09951634de3205d014e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37bc3aa0474f21b7a678b09951634de3205d014e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37bc3aa0474f21b7a678b09951634de3205d014e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37bc3aa0474f21b7a678b09951634de3205d014e/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9e736e7194b524c3624172b896d5ace9cb459aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9e736e7194b524c3624172b896d5ace9cb459aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9e736e7194b524c3624172b896d5ace9cb459aa"}], "stats": {"total": 57, "additions": 24, "deletions": 33}, "files": [{"sha": "cbddb904bfff6c0818e48b65ecfe948a5d7387d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37bc3aa0474f21b7a678b09951634de3205d014e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37bc3aa0474f21b7a678b09951634de3205d014e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37bc3aa0474f21b7a678b09951634de3205d014e", "patch": "@@ -1,3 +1,11 @@\n+2019-09-19  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-icf.c (sort_sem_items_by_decl_uid): Simplify comparator.\n+\t(sort_congruence_classes_by_decl_uid): Likewise.\n+\t(sort_congruence_class_groups_by_decl_uid): Use std::pair for\n+\teasier sorting.\n+\t(sem_item_optimizer::merge_classes): Likewise.\n+\n 2019-09-19  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91812"}, {"sha": "59b7f8b1b9d7829b131fc95de35e5065c8627ee3", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 16, "deletions": 33, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37bc3aa0474f21b7a678b09951634de3205d014e/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37bc3aa0474f21b7a678b09951634de3205d014e/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=37bc3aa0474f21b7a678b09951634de3205d014e", "patch": "@@ -3350,13 +3350,7 @@ sort_sem_items_by_decl_uid (const void *a, const void *b)\n \n   int uid1 = DECL_UID (i1->decl);\n   int uid2 = DECL_UID (i2->decl);\n-\n-  if (uid1 < uid2)\n-    return -1;\n-  else if (uid1 > uid2)\n-    return 1;\n-  else\n-    return 0;\n+  return uid1 - uid2;\n }\n \n /* Sort pair of congruence_classes A and B by DECL_UID of the first member.  */\n@@ -3369,13 +3363,7 @@ sort_congruence_classes_by_decl_uid (const void *a, const void *b)\n \n   int uid1 = DECL_UID (c1->members[0]->decl);\n   int uid2 = DECL_UID (c2->members[0]->decl);\n-\n-  if (uid1 < uid2)\n-    return -1;\n-  else if (uid1 > uid2)\n-    return 1;\n-  else\n-    return 0;\n+  return uid1 - uid2;\n }\n \n /* Sort pair of congruence_class_groups A and B by\n@@ -3384,20 +3372,11 @@ sort_congruence_classes_by_decl_uid (const void *a, const void *b)\n static int\n sort_congruence_class_groups_by_decl_uid (const void *a, const void *b)\n {\n-  const congruence_class_group *g1\n-    = *(const congruence_class_group * const *)a;\n-  const congruence_class_group *g2\n-    = *(const congruence_class_group * const *)b;\n-\n-  int uid1 = DECL_UID (g1->classes[0]->members[0]->decl);\n-  int uid2 = DECL_UID (g2->classes[0]->members[0]->decl);\n-\n-  if (uid1 < uid2)\n-    return -1;\n-  else if (uid1 > uid2)\n-    return 1;\n-  else\n-    return 0;\n+  const std::pair<congruence_class_group *, int> *g1\n+    = *(const std::pair<congruence_class_group *, int> *const *) a;\n+  const std::pair<congruence_class_group *, int> *g2\n+    = *(const std::pair<congruence_class_group *, int> *const *) b;\n+  return g1->second - g2->second;\n }\n \n /* After reduction is done, we can declare all items in a group\n@@ -3445,10 +3424,14 @@ sem_item_optimizer::merge_classes (unsigned int prev_class_count)\n \t  }\n       }\n \n-  auto_vec <congruence_class_group *> classes (m_classes.elements ());\n+  auto_vec<std::pair<congruence_class_group *, int> > classes (\n+    m_classes.elements ());\n   for (hash_table<congruence_class_hash>::iterator it = m_classes.begin ();\n        it != m_classes.end (); ++it)\n-    classes.quick_push (*it);\n+    {\n+      int uid = DECL_UID ((*it)->classes[0]->members[0]->decl);\n+      classes.quick_push (std::pair<congruence_class_group *, int> (*it, uid));\n+    }\n \n   classes.qsort (sort_congruence_class_groups_by_decl_uid);\n \n@@ -3470,11 +3453,11 @@ sem_item_optimizer::merge_classes (unsigned int prev_class_count)\n     }\n \n   unsigned int l;\n-  congruence_class_group *it;\n+  std::pair<congruence_class_group *, int> *it;\n   FOR_EACH_VEC_ELT (classes, l, it)\n-    for (unsigned int i = 0; i < it->classes.length (); i++)\n+    for (unsigned int i = 0; i < it->first->classes.length (); i++)\n       {\n-\tcongruence_class *c = it->classes[i];\n+\tcongruence_class *c = it->first->classes[i];\n \n \tif (c->members.length () == 1)\n \t  continue;"}]}