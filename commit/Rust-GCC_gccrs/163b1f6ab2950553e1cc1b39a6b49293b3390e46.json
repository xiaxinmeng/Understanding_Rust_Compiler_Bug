{"sha": "163b1f6ab2950553e1cc1b39a6b49293b3390e46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYzYjFmNmFiMjk1MDU1M2UxY2MxYjM5YTZiNDkyOTNiMzM5MGU0Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-13T09:49:36Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-13T09:49:36Z"}, "message": "[AArch64] Add a \"y\" constraint for V0-V7\n\nSome indexed SVE FCMLA operations have a 3-bit register field that\nrequires one of Z0-Z7.  This patch adds a public \"y\" constraint for that.\n\nThe patch also documents \"x\", which is again intended to be a public\nconstraint.\n\n2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* doc/md.texi: Document the x and y constraints for AArch64.\n\t* config/aarch64/aarch64.h (FP_LO8_REGNUM_P): New macro.\n\t(FP_LO8_REGS): New reg_class.\n\t(REG_CLASS_NAMES, REG_CLASS_CONTENTS): Add an entry for FP_LO8_REGS.\n\t* config/aarch64/aarch64.c (aarch64_hard_regno_nregs)\n\t(aarch64_regno_regclass, aarch64_class_max_nregs): Handle FP_LO8_REGS.\n\t* config/aarch64/predicates.md (aarch64_simd_register): Use\n\tFP_REGNUM_P instead of checking the classes manually.\n\t* config/aarch64/constraints.md (y): New constraint.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/asm-x-constraint-1.c: New test.\n\t* gcc.target/aarch64/asm-y-constraint-1.c: Likewise.\n\nFrom-SVN: r274367", "tree": {"sha": "ccad3fb1c6f81d456a008c3a5f1234025aa95a3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccad3fb1c6f81d456a008c3a5f1234025aa95a3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/163b1f6ab2950553e1cc1b39a6b49293b3390e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/163b1f6ab2950553e1cc1b39a6b49293b3390e46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/163b1f6ab2950553e1cc1b39a6b49293b3390e46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/163b1f6ab2950553e1cc1b39a6b49293b3390e46/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e2751ce5591dc8f3b5f4ffd3dacf0fb8f789395"}], "stats": {"total": 110, "additions": 107, "deletions": 3}, "files": [{"sha": "b3a69bc79c26b36571cf39ff1f2de3b77a791c43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=163b1f6ab2950553e1cc1b39a6b49293b3390e46", "patch": "@@ -1,3 +1,15 @@\n+2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* doc/md.texi: Document the x and y constraints for AArch64.\n+\t* config/aarch64/aarch64.h (FP_LO8_REGNUM_P): New macro.\n+\t(FP_LO8_REGS): New reg_class.\n+\t(REG_CLASS_NAMES, REG_CLASS_CONTENTS): Add an entry for FP_LO8_REGS.\n+\t* config/aarch64/aarch64.c (aarch64_hard_regno_nregs)\n+\t(aarch64_regno_regclass, aarch64_class_max_nregs): Handle FP_LO8_REGS.\n+\t* config/aarch64/predicates.md (aarch64_simd_register): Use\n+\tFP_REGNUM_P instead of checking the classes manually.\n+\t* config/aarch64/constraints.md (y): New constraint.\n+\n 2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/iterators.md (perm_insn): Include the \"1\"/\"2\" suffix."}, {"sha": "6a674a3ff09cc2c6d8e866fde73b6f694ee04077", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=163b1f6ab2950553e1cc1b39a6b49293b3390e46", "patch": "@@ -1610,6 +1610,7 @@ aarch64_hard_regno_nregs (unsigned regno, machine_mode mode)\n     {\n     case FP_REGS:\n     case FP_LO_REGS:\n+    case FP_LO8_REGS:\n       if (aarch64_sve_data_mode_p (mode))\n \treturn exact_div (GET_MODE_SIZE (mode),\n \t\t\t  BYTES_PER_SVE_VECTOR).to_constant ();\n@@ -8279,7 +8280,8 @@ aarch64_regno_regclass (unsigned regno)\n     return POINTER_REGS;\n \n   if (FP_REGNUM_P (regno))\n-    return FP_LO_REGNUM_P (regno) ?  FP_LO_REGS : FP_REGS;\n+    return (FP_LO8_REGNUM_P (regno) ? FP_LO8_REGS\n+\t    : FP_LO_REGNUM_P (regno) ? FP_LO_REGS : FP_REGS);\n \n   if (PR_REGNUM_P (regno))\n     return PR_LO_REGNUM_P (regno) ? PR_LO_REGS : PR_HI_REGS;\n@@ -8569,6 +8571,7 @@ aarch64_class_max_nregs (reg_class_t regclass, machine_mode mode)\n     case POINTER_AND_FP_REGS:\n     case FP_REGS:\n     case FP_LO_REGS:\n+    case FP_LO8_REGS:\n       if (aarch64_sve_data_mode_p (mode)\n \t  && constant_multiple_p (GET_MODE_SIZE (mode),\n \t\t\t\t  BYTES_PER_SVE_VECTOR, &nregs))"}, {"sha": "0c27d90beab0577b199d862ff4c140ec64288e77", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=163b1f6ab2950553e1cc1b39a6b49293b3390e46", "patch": "@@ -563,6 +563,9 @@ extern unsigned aarch64_architecture_version;\n #define FP_LO_REGNUM_P(REGNO)            \\\n   (((unsigned) (REGNO - V0_REGNUM)) <= (V15_REGNUM - V0_REGNUM))\n \n+#define FP_LO8_REGNUM_P(REGNO)            \\\n+  (((unsigned) (REGNO - V0_REGNUM)) <= (V7_REGNUM - V0_REGNUM))\n+\n #define PR_REGNUM_P(REGNO)\\\n   (((unsigned) (REGNO - P0_REGNUM)) <= (P15_REGNUM - P0_REGNUM))\n \n@@ -581,6 +584,7 @@ enum reg_class\n   GENERAL_REGS,\n   STACK_REG,\n   POINTER_REGS,\n+  FP_LO8_REGS,\n   FP_LO_REGS,\n   FP_REGS,\n   POINTER_AND_FP_REGS,\n@@ -600,6 +604,7 @@ enum reg_class\n   \"GENERAL_REGS\",\t\t\t\t\\\n   \"STACK_REG\",\t\t\t\t\t\\\n   \"POINTER_REGS\",\t\t\t\t\\\n+  \"FP_LO8_REGS\",\t\t\t\t\\\n   \"FP_LO_REGS\",\t\t\t\t\t\\\n   \"FP_REGS\",\t\t\t\t\t\\\n   \"POINTER_AND_FP_REGS\",\t\t\t\\\n@@ -616,6 +621,7 @@ enum reg_class\n   { 0x7fffffff, 0x00000000, 0x00000003 },\t/* GENERAL_REGS */\t\\\n   { 0x80000000, 0x00000000, 0x00000000 },\t/* STACK_REG */\t\t\\\n   { 0xffffffff, 0x00000000, 0x00000003 },\t/* POINTER_REGS */\t\\\n+  { 0x00000000, 0x000000ff, 0x00000000 },       /* FP_LO8_REGS  */\t\\\n   { 0x00000000, 0x0000ffff, 0x00000000 },       /* FP_LO_REGS  */\t\\\n   { 0x00000000, 0xffffffff, 0x00000000 },       /* FP_REGS  */\t\t\\\n   { 0xffffffff, 0xffffffff, 0x00000003 },\t/* POINTER_AND_FP_REGS */\\"}, {"sha": "6763d3db129add13227c4fcd9bc4e70020b30cb8", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=163b1f6ab2950553e1cc1b39a6b49293b3390e46", "patch": "@@ -36,6 +36,9 @@\n (define_register_constraint \"x\" \"FP_LO_REGS\"\n   \"Floating point and SIMD vector registers V0 - V15.\")\n \n+(define_register_constraint \"y\" \"FP_LO8_REGS\"\n+  \"Floating point and SIMD vector registers V0 - V7.\")\n+\n (define_constraint \"I\"\n  \"A constant that can be used with an ADD operation.\"\n  (and (match_code \"const_int\")"}, {"sha": "3a8b507cbc75a73e9118a162da4c54249399c177", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=163b1f6ab2950553e1cc1b39a6b49293b3390e46", "patch": "@@ -53,8 +53,7 @@\n \n (define_predicate \"aarch64_simd_register\"\n   (and (match_code \"reg\")\n-       (ior (match_test \"REGNO_REG_CLASS (REGNO (op)) == FP_LO_REGS\")\n-            (match_test \"REGNO_REG_CLASS (REGNO (op)) == FP_REGS\"))))\n+       (match_test \"FP_REGNUM_P (REGNO (op))\")))\n \n (define_predicate \"aarch64_reg_or_zero\"\n   (and (match_code \"reg,subreg,const_int,const_double\")"}, {"sha": "7751984bf5f44559edc451f53546b45a0aadef5f", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=163b1f6ab2950553e1cc1b39a6b49293b3390e46", "patch": "@@ -1748,6 +1748,12 @@ The stack pointer register (@code{SP})\n @item w\n Floating point register, Advanced SIMD vector register or SVE vector register\n \n+@item x\n+Like @code{w}, but restricted to registers 0 to 15 inclusive.\n+\n+@item y\n+Like @code{w}, but restricted to registers 0 to 7 inclusive.\n+\n @item Upl\n One of the low eight SVE predicate registers (@code{P0} to @code{P7})\n "}, {"sha": "e16b2b6b80d5e1ca2e4655ca7aeb05498d98010d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=163b1f6ab2950553e1cc1b39a6b49293b3390e46", "patch": "@@ -1,3 +1,8 @@\n+2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/asm-x-constraint-1.c: New test.\n+\t* gcc.target/aarch64/asm-y-constraint-1.c: Likewise.\n+\n 2019-08-13  Janne Blomqvist  <jb@gcc.gnu.org>\n \n         PR fortran/91414"}, {"sha": "a71043be504eb203d62580de1ac05359160d63ac", "filename": "gcc/testsuite/gcc.target/aarch64/asm-x-constraint-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-x-constraint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-x-constraint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-x-constraint-1.c?ref=163b1f6ab2950553e1cc1b39a6b49293b3390e46", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+void\n+f (void)\n+{\n+  register float s0 asm (\"s0\");\n+  register float s7 asm (\"s7\");\n+  register float s8 asm (\"s8\");\n+  register float s15 asm (\"s15\");\n+  register float s16 asm (\"s16\");\n+  register float s31 asm (\"s31\");\n+  asm volatile (\"// s0 out: %s0\" : \"=w\" (s0));\n+  asm volatile (\"// s0 in: %s0\" :: \"x\" (s0));\n+  asm volatile (\"// s7 out: %s0\" : \"=w\" (s7));\n+  asm volatile (\"// s7 in: %s0\" :: \"x\" (s7));\n+  asm volatile (\"// s8 out: %s0\" : \"=w\" (s8));\n+  asm volatile (\"// s8 in: %s0\" :: \"x\" (s8));\n+  asm volatile (\"// s15 out: %s0\" : \"=w\" (s15));\n+  asm volatile (\"// s15 in: %s0\" :: \"x\" (s15));\n+  asm volatile (\"// s16 out: %s0\" : \"=w\" (s16));\n+  asm volatile (\"// s16 in: %s0\" :: \"x\" (s16));\n+  asm volatile (\"// s31 out: %s0\" : \"=w\" (s31));\n+  asm volatile (\"// s31 in: %s0\" :: \"x\" (s31));\n+}\n+\n+/* { dg-final { scan-assembler {\\t// s0 out: s0\\n.*[/]/ s0 in: s0\\n} } } */\n+/* { dg-final { scan-assembler {\\t// s7 out: s7\\n.*[/]/ s7 in: s7\\n} } } */\n+/* { dg-final { scan-assembler {\\t// s8 out: s8\\n.*[/]/ s8 in: s8\\n} } } */\n+/* { dg-final { scan-assembler {\\t// s15 out: s15\\n.*[/]/ s15 in: s15\\n} } } */\n+/* { dg-final { scan-assembler {\\t// s16 out: s16\\n.*\\tfmov\\t(s[0-7]), s16\\n.*[/]/ s16 in: \\1\\n} } } */\n+/* { dg-final { scan-assembler {\\t// s31 out: s31\\n.*\\tfmov\\t(s[0-7]), s31\\n.*[/]/ s31 in: \\1\\n} } } */\n+/* { dg-final { scan-assembler-not {\\t// s16 in: s16\\n} } } */\n+/* { dg-final { scan-assembler-not {\\t// s31 in: s31\\n} } } */"}, {"sha": "4a3fcac56b33314018e4d0a92195c05027bb4f22", "filename": "gcc/testsuite/gcc.target/aarch64/asm-y-constraint-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-y-constraint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163b1f6ab2950553e1cc1b39a6b49293b3390e46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-y-constraint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-y-constraint-1.c?ref=163b1f6ab2950553e1cc1b39a6b49293b3390e46", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+void\n+f (void)\n+{\n+  register float s0 asm (\"s0\");\n+  register float s7 asm (\"s7\");\n+  register float s8 asm (\"s8\");\n+  register float s15 asm (\"s15\");\n+  register float s16 asm (\"s16\");\n+  register float s31 asm (\"s31\");\n+  asm volatile (\"// s0 out: %s0\" : \"=w\" (s0));\n+  asm volatile (\"// s0 in: %s0\" :: \"y\" (s0));\n+  asm volatile (\"// s7 out: %s0\" : \"=w\" (s7));\n+  asm volatile (\"// s7 in: %s0\" :: \"y\" (s7));\n+  asm volatile (\"// s8 out: %s0\" : \"=w\" (s8));\n+  asm volatile (\"// s8 in: %s0\" :: \"y\" (s8));\n+  asm volatile (\"// s15 out: %s0\" : \"=w\" (s15));\n+  asm volatile (\"// s15 in: %s0\" :: \"y\" (s15));\n+  asm volatile (\"// s16 out: %s0\" : \"=w\" (s16));\n+  asm volatile (\"// s16 in: %s0\" :: \"y\" (s16));\n+  asm volatile (\"// s31 out: %s0\" : \"=w\" (s31));\n+  asm volatile (\"// s31 in: %s0\" :: \"y\" (s31));\n+}\n+\n+/* { dg-final { scan-assembler {\\t// s0 out: s0\\n.*[/]/ s0 in: s0\\n} } } */\n+/* { dg-final { scan-assembler {\\t// s7 out: s7\\n.*[/]/ s7 in: s7\\n} } } */\n+/* { dg-final { scan-assembler {\\t// s8 out: s8\\n.*\\tfmov\\t(s[0-7]), s8\\n.*[/]/ s8 in: \\1\\n} } } */\n+/* { dg-final { scan-assembler {\\t// s15 out: s15\\n.*\\tfmov\\t(s[0-7]), s15\\n.*[/]/ s15 in: \\1\\n} } } */\n+/* { dg-final { scan-assembler {\\t// s16 out: s16\\n.*\\tfmov\\t(s[0-7]), s16\\n.*[/]/ s16 in: \\1\\n} } } */\n+/* { dg-final { scan-assembler {\\t// s31 out: s31\\n.*\\tfmov\\t(s[0-7]), s31\\n.*[/]/ s31 in: \\1\\n} } } */\n+/* { dg-final { scan-assembler-not {\\t// s8 in: s8\\n} } } */\n+/* { dg-final { scan-assembler-not {\\t// s15 in: s15\\n} } } */\n+/* { dg-final { scan-assembler-not {\\t// s16 in: s16\\n} } } */\n+/* { dg-final { scan-assembler-not {\\t// s31 in: s31\\n} } } */"}]}