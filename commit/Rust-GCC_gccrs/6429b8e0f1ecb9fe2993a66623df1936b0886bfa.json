{"sha": "6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQyOWI4ZTBmMWVjYjlmZTI5OTNhNjY2MjNkZjE5MzZiMDg4NmJmYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-08-07T16:40:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-08-07T16:40:18Z"}, "message": "PR c++/59480, DR 136\n\n/cp\n2018-08-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/59480, DR 136\n\t* decl.c (check_no_redeclaration_friend_default_args): New.\n\t(duplicate_decls): Use the latter; also check that a friend\n\tdeclaration specifying default arguments is a definition.\n\n/testsuite\n2018-08-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/59480, DR 136\n\t* g++.dg/other/friend8.C: New.\n\t* g++.dg/other/friend9.C: Likewise.\n\t* g++.dg/other/friend10.C: Likewise.\n\t* g++.dg/other/friend11.C: Likewise.\n\t* g++.dg/other/friend12.C: Likewise.\n\t* g++.dg/other/friend13.C: Likewise.\n\t* g++.dg/other/friend14.C: Likewise.\n\t* g++.dg/other/friend15.C: Likewise.\n\t* g++.dg/parse/defarg4.C: Compile with -fpermissive -w.\n\t* g++.dg/parse/defarg8.C: Likewise.\n\nFrom-SVN: r263361", "tree": {"sha": "5c9ad3b129b647e5d47ffff789bad9149febb9d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c9ad3b129b647e5d47ffff789bad9149febb9d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/comments", "author": null, "committer": null, "parents": [{"sha": "1d1b732865a2dd3a97b8a8e605d7c5906ab0df0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d1b732865a2dd3a97b8a8e605d7c5906ab0df0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d1b732865a2dd3a97b8a8e605d7c5906ab0df0e"}], "stats": {"total": 178, "additions": 170, "deletions": 8}, "files": [{"sha": "0d4377c2d6aeb1f4d8054ea33ae16bcaadac26ce", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "patch": "@@ -1,3 +1,10 @@\n+2018-08-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/59480, DR 136\n+\t* decl.c (check_no_redeclaration_friend_default_args): New.\n+\t(duplicate_decls): Use the latter; also check that a friend\n+\tdeclaration specifying default arguments is a definition.\n+\n 2018-08-07  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR c++/79133"}, {"sha": "0efb42e0f20b008ce4b9ca78265708767f9c8a0e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 69, "deletions": 7, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "patch": "@@ -1280,6 +1280,38 @@ check_redeclaration_no_default_args (tree decl)\n       }\n }\n \n+/* NEWDECL is a redeclaration of a function or function template OLDDECL,\n+   in any case represented as FUNCTION_DECLs (the DECL_TEMPLATE_RESULTs of\n+   the TEMPLATE_DECLs in case of function templates).  This function is used\n+   to enforce the final part of C++17 11.3.6/4, about a single declaration:\n+   \"If a friend declaration specifies a default argument expression, that\n+   declaration shall be a definition and shall be the only declaration of\n+   the function or function template in the translation unit.\"  */\n+\n+static void\n+check_no_redeclaration_friend_default_args (tree olddecl, tree newdecl,\n+\t\t\t\t\t    bool olddecl_hidden_friend_p)\n+{\n+  if (!olddecl_hidden_friend_p && !DECL_FRIEND_P (newdecl))\n+    return;\n+\n+  tree t1 = FUNCTION_FIRST_USER_PARMTYPE (olddecl);\n+  tree t2 = FUNCTION_FIRST_USER_PARMTYPE (newdecl);\n+\n+  for (; t1 && t1 != void_list_node;\n+       t1 = TREE_CHAIN (t1), t2 = TREE_CHAIN (t2))\n+    if ((olddecl_hidden_friend_p && TREE_PURPOSE (t1))\n+\t|| (DECL_FRIEND_P (newdecl) && TREE_PURPOSE (t2)))\n+      {\n+\tif (permerror (DECL_SOURCE_LOCATION (newdecl),\n+\t\t       \"friend declaration of %q#D specifies default \"\n+\t\t       \"arguments and isn't the only declaration\", newdecl))\n+\t  inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t  \"previous declaration of %q#D\", olddecl);\n+\treturn;\n+      }\n+}\n+\n /* Merge tree bits that correspond to attributes noreturn, nothrow,\n    const,  malloc, and pure from NEWDECL with those of OLDDECL.  */\n \n@@ -1318,6 +1350,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n {\n   unsigned olddecl_uid = DECL_UID (olddecl);\n   int olddecl_friend = 0, types_match = 0, hidden_friend = 0;\n+  int olddecl_hidden_friend = 0;\n   int new_defines_function = 0;\n   tree new_template_info;\n   location_t olddecl_loc = DECL_SOURCE_LOCATION (olddecl);\n@@ -1876,6 +1909,13 @@ next_arg:;\n \t\t\t\tolddecl);\n \t\t      }\n \t\t  }\n+\n+\t      /* C++17 11.3.6/4: \"If a friend declaration specifies a default\n+\t\t argument expression, that declaration... shall be the only\n+\t\t declaration of the function or function template in the\n+\t\t translation unit.\"  */\n+\t      check_no_redeclaration_friend_default_args\n+\t\t(olddecl, newdecl, DECL_HIDDEN_FRIEND_P (olddecl));\n \t    }\n \t}\n     }\n@@ -1982,6 +2022,7 @@ next_arg:;\n   if (DECL_DECLARES_FUNCTION_P (olddecl) && DECL_DECLARES_FUNCTION_P (newdecl))\n     {\n       olddecl_friend = DECL_FRIEND_P (olddecl);\n+      olddecl_hidden_friend = DECL_HIDDEN_FRIEND_P (olddecl);\n       hidden_friend = (DECL_ANTICIPATED (olddecl)\n \t\t       && DECL_HIDDEN_FRIEND_P (olddecl)\n \t\t       && newdecl_is_friend);\n@@ -1994,10 +2035,8 @@ next_arg:;\n \n   if (TREE_CODE (newdecl) == TEMPLATE_DECL)\n     {\n-      tree old_result;\n-      tree new_result;\n-      old_result = DECL_TEMPLATE_RESULT (olddecl);\n-      new_result = DECL_TEMPLATE_RESULT (newdecl);\n+      tree old_result = DECL_TEMPLATE_RESULT (olddecl);\n+      tree new_result = DECL_TEMPLATE_RESULT (newdecl);\n       TREE_TYPE (olddecl) = TREE_TYPE (old_result);\n       DECL_TEMPLATE_SPECIALIZATIONS (olddecl)\n \t= chainon (DECL_TEMPLATE_SPECIALIZATIONS (olddecl),\n@@ -2008,11 +2047,19 @@ next_arg:;\n \n       if (DECL_FUNCTION_TEMPLATE_P (newdecl))\n \t{\n-\t  /* Per C++11 8.3.6/4, default arguments cannot be added in later\n-\t     declarations of a function template.  */\n \t  if (DECL_SOURCE_LOCATION (newdecl)\n \t      != DECL_SOURCE_LOCATION (olddecl))\n-\t    check_redeclaration_no_default_args (newdecl);\n+\t    {\n+\t      /* Per C++11 8.3.6/4, default arguments cannot be added in\n+\t\t later declarations of a function template.  */\n+\t      check_redeclaration_no_default_args (newdecl);\n+\t      /* C++17 11.3.6/4: \"If a friend declaration specifies a default\n+\t\t argument expression, that declaration... shall be the only\n+\t\t declaration of the function or function template in the\n+\t\t translation unit.\"  */\n+\t      check_no_redeclaration_friend_default_args\n+\t\t(old_result, new_result, olddecl_hidden_friend);\n+\t    }\n \n \t  check_default_args (newdecl);\n \n@@ -8780,6 +8827,21 @@ grokfndecl (tree ctype,\n \t}\n     }\n \n+  /* C++17 11.3.6/4: \"If a friend declaration specifies a default argument\n+     expression, that declaration shall be a definition...\"  */\n+  if (friendp && !funcdef_flag)\n+    {\n+      for (tree t = FUNCTION_FIRST_USER_PARMTYPE (decl);\n+\t   t && t != void_list_node; t = TREE_CHAIN (t))\n+\tif (TREE_PURPOSE (t))\n+\t  {\n+\t    permerror (DECL_SOURCE_LOCATION (decl),\n+\t\t       \"friend declaration of %qD specifies default \"\n+\t\t       \"arguments and isn't a definition\", decl);\n+\t    break;\n+\t  }\n+    }\n+\n   /* If this decl has namespace scope, set that up.  */\n   if (in_namespace)\n     set_decl_namespace (decl, in_namespace, friendp);"}, {"sha": "a607ed60e30d3283cbaf41d11f961c8e2e73e5e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "patch": "@@ -1,3 +1,17 @@\n+2018-08-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/59480, DR 136\n+\t* g++.dg/other/friend8.C: New.\n+\t* g++.dg/other/friend9.C: Likewise.\n+\t* g++.dg/other/friend10.C: Likewise.\n+\t* g++.dg/other/friend11.C: Likewise.\n+\t* g++.dg/other/friend12.C: Likewise.\n+\t* g++.dg/other/friend13.C: Likewise.\n+\t* g++.dg/other/friend14.C: Likewise.\n+\t* g++.dg/other/friend15.C: Likewise.\n+\t* g++.dg/parse/defarg4.C: Compile with -fpermissive -w.\n+\t* g++.dg/parse/defarg8.C: Likewise.\n+\n 2018-08-07  Martin Liska  <mliska@suse.cz>\n \n         PR middle-end/83023"}, {"sha": "c162395210b8f192f65a60d53b972e7bde4dbfde", "filename": "gcc/testsuite/g++.dg/other/friend10.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend10.C?ref=6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/59480\n+\n+class test {\n+  friend int foo(bool = true) { return 1; }  // { dg-message \"14:previous\" }\n+  template<typename> friend int bar(bool = true) { return 1; }  // { dg-message \"33:previous\" }\n+};\n+\n+int foo(bool);  // { dg-error \"5:friend declaration\" }\n+template<typename> int bar(bool);  // { dg-error \"24:friend declaration\" }"}, {"sha": "b82b39ddbe371f2b17dceac09da031878dedbf58", "filename": "gcc/testsuite/g++.dg/other/friend11.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend11.C?ref=6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/59480\n+\n+class test {\n+  friend int foo(bool = true) { return 1; }  // { dg-message \"14:previous\" }\n+  friend int foo(bool);  // { dg-error \"14:friend declaration\" }\n+  template<typename> friend int bar(bool = true) { return 1; }  // { dg-message \"33:previous\" }\n+  template<typename> friend int bar(bool);  // { dg-error \"33:friend declaration\" }\n+};"}, {"sha": "b78ce4b078c4e87e8b40cbda93c463dea208cbc4", "filename": "gcc/testsuite/g++.dg/other/friend12.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend12.C?ref=6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/59480\n+\n+template<typename>\n+class test {\n+  friend int foo(bool = true) { return 1; }  // { dg-message \"14:previous\" }\n+  friend int foo(bool);  // { dg-error \"14:friend declaration\" }\n+  template<typename> friend int bar(bool = true) { return 1; }  // { dg-message \"33:previous\" }\n+  template<typename> friend int bar(bool);  // { dg-error \"33:friend declaration\" }\n+};\n+\n+template class test<bool>;"}, {"sha": "6cdb322f1dfc84efe318c1a52f4cf3d276439c99", "filename": "gcc/testsuite/g++.dg/other/friend13.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend13.C?ref=6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/59480\n+\n+void f(int, int, int=0);  // { dg-message \"6:previous\" }\n+class C {\n+  friend void f(int, int=0, int) {}  // { dg-error \"15:friend declaration\" }\n+};"}, {"sha": "0f955a09b5fe6fee3a5016d4af2259d20b4a622d", "filename": "gcc/testsuite/g++.dg/other/friend14.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend14.C?ref=6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/59480\n+\n+class Matrix;\n+\n+Matrix rot90 (const Matrix& a, int k = 1);\n+template<typename> Matrix rot90_ (const Matrix& a, int k = 1);\n+\n+class Matrix {\n+  friend Matrix rot90 (const Matrix&, int);\n+  template<typename> friend Matrix rot90_ (const Matrix&, int);\n+};\n+\n+Matrix rot90 (const Matrix& a, int k) { return Matrix(); }\n+template<typename> Matrix rot90_ (const Matrix& a, int k) { return Matrix(); }"}, {"sha": "7f3181122e473682a124859a201d8331dd8aa68c", "filename": "gcc/testsuite/g++.dg/other/friend15.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend15.C?ref=6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/59480\n+\n+class Matrix;\n+\n+void rot90 (const Matrix& a, int k = 1) { }\n+template<typename> void rot90_ (const Matrix& a, int k = 1) { }\n+\n+class Matrix {\n+  friend void rot90 (const Matrix&, int);\n+  template<typename> friend void rot90_ (const Matrix&, int);\n+};\n+\n+void rot90 (const Matrix& a, int k);\n+template<typename> void rot90_ (const Matrix& a, int k);"}, {"sha": "6b5df88d6a48c673a72370b4231c7331b0e3e4c8", "filename": "gcc/testsuite/g++.dg/other/friend8.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend8.C?ref=6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/59480\n+\n+class test {\n+  friend int foo(bool = true);  // { dg-error \"14:friend declaration\" }\n+  template<typename> friend int bar(bool = true);  // { dg-error \"33:friend declaration\" }\n+};"}, {"sha": "16b4f57335d3aad28621935e5ccc99e94d13841e", "filename": "gcc/testsuite/g++.dg/other/friend9.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffriend9.C?ref=6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/59480\n+\n+template<typename>\n+class test {\n+  friend int foo(bool = true);  // { dg-error \"14:friend declaration\" }\n+  template<typename> friend int bar(bool = true);  // { dg-error \"33:friend declaration\" }\n+};\n+\n+template class test<bool>;"}, {"sha": "ad8a1ed6c65c65a5b87f3e06a5dba5eea05f2e95", "filename": "gcc/testsuite/g++.dg/parse/defarg4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg4.C?ref=6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile }\n+// { dg-options \"-fpermissive -w\" }\n \n // Copyright (C) 2003 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 3 Jul 2003 <nathan@codesourcery.com>"}, {"sha": "33100069eadf94c30455a714413a81f71b40790c", "filename": "gcc/testsuite/g++.dg/parse/defarg8.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6429b8e0f1ecb9fe2993a66623df1936b0886bfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg8.C?ref=6429b8e0f1ecb9fe2993a66623df1936b0886bfa", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options \"-fpermissive -w\" }\n+\n struct A {\n   static void g(int);\n };"}]}