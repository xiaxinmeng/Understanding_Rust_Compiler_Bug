{"sha": "386ebf75f4c0342b1f823f4e4aba07abda3288d1", "node_id": "C_kwDOANBUbNoAKDM4NmViZjc1ZjRjMDM0MmIxZjgyM2Y0ZTRhYmEwN2FiZGEzMjg4ZDE", "commit": {"author": {"name": "Thomas Neumann", "email": "tneumann@users.sourceforge.net", "date": "2022-09-23T13:57:13Z"}, "committer": {"name": "Thomas Neumann", "email": "tneumann@users.sourceforge.net", "date": "2022-09-26T13:12:02Z"}, "message": "fix assert in __deregister_frame_info_bases\n\nWhen using the atomic fast path deregistering can fail during\nprogram shutdown if the lookup structures are already destroyed.\nThe assert in __deregister_frame_info_bases takes that into\naccount. In the non-fast-path case however is not aware of\nprogram shutdown, which caused a compiler error on such platforms.\nWe fix that by introducing a constant for in_shutdown in\nnon-fast-path builds.\nWe also drop the destructor priority, as it is not supported on\nall platforms and we no longer rely upon the priority anyway.\n\nlibgcc/ChangeLog:\n\t* unwind-dw2-fde.c: Introduce a constant for in_shutdown\n\tfor the non-fast-path case. Drop destructor priority.", "tree": {"sha": "8e744f5f80f8a145d540982a56096761d43c7171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e744f5f80f8a145d540982a56096761d43c7171"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/386ebf75f4c0342b1f823f4e4aba07abda3288d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386ebf75f4c0342b1f823f4e4aba07abda3288d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/386ebf75f4c0342b1f823f4e4aba07abda3288d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386ebf75f4c0342b1f823f4e4aba07abda3288d1/comments", "author": {"login": "neumannt", "id": 25097991, "node_id": "MDQ6VXNlcjI1MDk3OTkx", "avatar_url": "https://avatars.githubusercontent.com/u/25097991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neumannt", "html_url": "https://github.com/neumannt", "followers_url": "https://api.github.com/users/neumannt/followers", "following_url": "https://api.github.com/users/neumannt/following{/other_user}", "gists_url": "https://api.github.com/users/neumannt/gists{/gist_id}", "starred_url": "https://api.github.com/users/neumannt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neumannt/subscriptions", "organizations_url": "https://api.github.com/users/neumannt/orgs", "repos_url": "https://api.github.com/users/neumannt/repos", "events_url": "https://api.github.com/users/neumannt/events{/privacy}", "received_events_url": "https://api.github.com/users/neumannt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "neumannt", "id": 25097991, "node_id": "MDQ6VXNlcjI1MDk3OTkx", "avatar_url": "https://avatars.githubusercontent.com/u/25097991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neumannt", "html_url": "https://github.com/neumannt", "followers_url": "https://api.github.com/users/neumannt/followers", "following_url": "https://api.github.com/users/neumannt/following{/other_user}", "gists_url": "https://api.github.com/users/neumannt/gists{/gist_id}", "starred_url": "https://api.github.com/users/neumannt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neumannt/subscriptions", "organizations_url": "https://api.github.com/users/neumannt/orgs", "repos_url": "https://api.github.com/users/neumannt/repos", "events_url": "https://api.github.com/users/neumannt/events{/privacy}", "received_events_url": "https://api.github.com/users/neumannt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6904ed80a26f5216aa3b9ce8377fb50307c8e886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6904ed80a26f5216aa3b9ce8377fb50307c8e886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6904ed80a26f5216aa3b9ce8377fb50307c8e886"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "3c0cc654ec0e23c26d00e9f3a644f304647185af", "filename": "libgcc/unwind-dw2-fde.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386ebf75f4c0342b1f823f4e4aba07abda3288d1/libgcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386ebf75f4c0342b1f823f4e4aba07abda3288d1/libgcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-fde.c?ref=386ebf75f4c0342b1f823f4e4aba07abda3288d1", "patch": "@@ -51,7 +51,7 @@ static struct btree registered_frames;\n static bool in_shutdown;\n \n static void\n-release_registered_frames (void) __attribute__ ((destructor (110)));\n+release_registered_frames (void) __attribute__ ((destructor));\n static void\n release_registered_frames (void)\n {\n@@ -67,6 +67,8 @@ static void\n init_object (struct object *ob);\n \n #else\n+/* Without fast path frame deregistration must always succeed.  */\n+static const int in_shutdown = 0;\n \n /* The unseen_objects list contains objects that have been registered\n    but not yet categorized in any way.  The seen_objects list has had"}]}