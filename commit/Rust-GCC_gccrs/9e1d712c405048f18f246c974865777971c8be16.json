{"sha": "9e1d712c405048f18f246c974865777971c8be16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUxZDcxMmM0MDUwNDhmMThmMjQ2Yzk3NDg2NTc3Nzk3MWM4YmUxNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-08-18T14:57:21Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-08-18T14:57:21Z"}, "message": "[multiple changes]\n\n2007-08-18  Paul Thomas  <pault@gcc.gnu.org>\n\t    Janus Weil  <jaydub66@gmail.com>\n\n\t* interface.c (gfc_match_interface,gfc_match_abstract_interface,\n\tgfc_match_end_interface,gfc_add_interface): Add abstract interface.\n\t* dump-parse-tree.c (gfc_show_attr): Ditto.\n\t* gfortran.h (interface_type,symbol_attribute): Ditto.\n\t* module.c (gfc_match_use,ab_attribute,attr_bits,\n\tmio_symbol_attribute): Ditto.\n\t* resolve.c (resolve_function): Ditto.\n\t* match.h: Ditto.\n\t* parse.c (decode_statement): Ditto.\n\t(parse_interface): Ditto, check for C1203 (name of abstract interface\n\tcannot be the same as an intrinsic type).\n\t* decl.c (gfc_match_bind_c): Check for NAME= with abstract interfaces.\n\t(access_attr_decl): Handle Abstract interfaces.\n\n\n2007-08-17  Tobias Burnus  <burnus@net-b.de>\n\n\t* gfortran.dg/interface_abstract_1.f90: New.\n\nFrom-SVN: r127612", "tree": {"sha": "266c365803dbf632341bf1d130d28ed8df05998c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/266c365803dbf632341bf1d130d28ed8df05998c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e1d712c405048f18f246c974865777971c8be16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1d712c405048f18f246c974865777971c8be16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e1d712c405048f18f246c974865777971c8be16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1d712c405048f18f246c974865777971c8be16/comments", "author": null, "committer": null, "parents": [{"sha": "a595913e95d59f64670364c3dea31a4774c960f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a595913e95d59f64670364c3dea31a4774c960f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a595913e95d59f64670364c3dea31a4774c960f3"}], "stats": {"total": 115, "additions": 109, "deletions": 6}, "files": [{"sha": "f7baaa80aba639dd9549a80f525db91b42c74a42", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9e1d712c405048f18f246c974865777971c8be16", "patch": "@@ -1,3 +1,20 @@\n+2007-08-18  Paul Thomas  <pault@gcc.gnu.org>\n+\t    Janus Weil  <jaydub66@gmail.com>\n+\n+\t* interface.c (gfc_match_interface,gfc_match_abstract_interface,\n+\tgfc_match_end_interface,gfc_add_interface): Add abstract interface.\n+\t* dump-parse-tree.c (gfc_show_attr): Ditto.\n+\t* gfortran.h (interface_type,symbol_attribute): Ditto.\n+\t* module.c (gfc_match_use,ab_attribute,attr_bits,\n+\tmio_symbol_attribute): Ditto.\n+\t* resolve.c (resolve_function): Ditto.\n+\t* match.h: Ditto.\n+\t* parse.c (decode_statement): Ditto.\n+\t(parse_interface): Ditto, check for C1203 (name of abstract interface\n+\tcannot be the same as an intrinsic type).\n+\t* decl.c (gfc_match_bind_c): Check for NAME= with abstract interfaces.\n+\t(access_attr_decl): Handle Abstract interfaces.\n+\n 2007-08-18  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/32881"}, {"sha": "ed0defd9782f1d56edf38eb9b92dbad66fdea45d", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=9e1d712c405048f18f246c974865777971c8be16", "patch": "@@ -4182,7 +4182,13 @@ gfc_match_bind_c (gfc_symbol *sym)\n       if (sym != NULL && sym->name != NULL && has_name_equals == 0)\n \tstrncpy (sym->binding_label, sym->name, strlen (sym->name) + 1);\n     }\n-\t      \n+\n+  if (has_name_equals && current_interface.type == INTERFACE_ABSTRACT)\n+    {\n+      gfc_error (\"NAME not allowed on BIND(C) for ABSTRACT INTERFACE at %C\");\n+      return MATCH_ERROR;\n+    }\n+\n   return MATCH_YES;\n }\n \n@@ -4842,6 +4848,7 @@ access_attr_decl (gfc_statement st)\n       switch (type)\n \t{\n \tcase INTERFACE_NAMELESS:\n+\tcase INTERFACE_ABSTRACT:\n \t  goto syntax;\n \n \tcase INTERFACE_GENERIC:"}, {"sha": "d9fbbfab3ed0a29dc98045bb33a5dc4bdfd67b47", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=9e1d712c405048f18f246c974865777971c8be16", "patch": "@@ -591,6 +591,8 @@ gfc_show_attr (symbol_attribute *attr)\n   if (attr->in_common)\n     gfc_status (\" IN-COMMON\");\n \n+  if (attr->abstract)\n+    gfc_status (\" ABSTRACT INTERFACE\");\n   if (attr->function)\n     gfc_status (\" FUNCTION\");\n   if (attr->subroutine)"}, {"sha": "ef7811d05b7c02378aeb1cdbaeae2c08df137c20", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=9e1d712c405048f18f246c974865777971c8be16", "patch": "@@ -260,7 +260,7 @@ gfc_statement;\n typedef enum\n {\n   INTERFACE_NAMELESS = 1, INTERFACE_GENERIC,\n-  INTERFACE_INTRINSIC_OP, INTERFACE_USER_OP\n+  INTERFACE_INTRINSIC_OP, INTERFACE_USER_OP, INTERFACE_ABSTRACT\n }\n interface_type;\n \n@@ -658,7 +658,7 @@ typedef struct\n \n   /* Function/subroutine attributes */\n   unsigned sequence:1, elemental:1, pure:1, recursive:1;\n-  unsigned unmaskable:1, masked:1, contained:1, mod_proc:1;\n+  unsigned unmaskable:1, masked:1, contained:1, mod_proc:1, abstract:1;\n \n   /* This is set if the subroutine doesn't return.  Currently, this\n      is only possible for intrinsic subroutines.  */"}, {"sha": "55cc641cf8872107fa745f9e2fed84b363e62244", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=9e1d712c405048f18f246c974865777971c8be16", "patch": "@@ -175,7 +175,8 @@ gfc_match_generic_spec (interface_type *type,\n }\n \n \n-/* Match one of the five forms of an interface statement.  */\n+/* Match one of the five F95 forms of an interface statement.  The\n+   matcher for the abstract interface follows.  */\n \n match\n gfc_match_interface (void)\n@@ -232,13 +233,40 @@ gfc_match_interface (void)\n       break;\n \n     case INTERFACE_NAMELESS:\n+    case INTERFACE_ABSTRACT:\n       break;\n     }\n \n   return MATCH_YES;\n }\n \n \n+\n+/* Match a F2003 abstract interface.  */\n+\n+match\n+gfc_match_abstract_interface (void)\n+{\n+  match m;\n+\n+  if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: ABSTRACT INTERFACE at %C\")\n+\t\t      == FAILURE)\n+    return MATCH_ERROR;\n+\n+  m = gfc_match_eos ();\n+\n+  if (m != MATCH_YES)\n+    {\n+      gfc_error (\"Syntax error in ABSTRACT INTERFACE statement at %C\");\n+      return MATCH_ERROR;\n+    }\n+\n+  current_interface.type = INTERFACE_ABSTRACT;\n+\n+  return m;\n+}\n+\n+\n /* Match the different sort of generic-specs that can be present after\n    the END INTERFACE itself.  */\n \n@@ -270,7 +298,8 @@ gfc_match_end_interface (void)\n   switch (current_interface.type)\n     {\n     case INTERFACE_NAMELESS:\n-      if (type != current_interface.type)\n+    case INTERFACE_ABSTRACT:\n+      if (type != INTERFACE_NAMELESS)\n \t{\n \t  gfc_error (\"Expected a nameless interface at %C\");\n \t  m = MATCH_ERROR;\n@@ -2449,6 +2478,7 @@ gfc_add_interface (gfc_symbol *new)\n   switch (current_interface.type)\n     {\n     case INTERFACE_NAMELESS:\n+    case INTERFACE_ABSTRACT:\n       return SUCCESS;\n \n     case INTERFACE_INTRINSIC_OP:"}, {"sha": "abd6ab1bf3627baf49a4a543534587a5aaac37d0", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=9e1d712c405048f18f246c974865777971c8be16", "patch": "@@ -195,6 +195,7 @@ match gfc_match_array_ref (gfc_array_ref *, gfc_array_spec *, int);\n match gfc_match_array_constructor (gfc_expr **);\n \n /* interface.c.  */\n+match gfc_match_abstract_interface (void);\n match gfc_match_generic_spec (interface_type *, char *, gfc_intrinsic_op *);\n match gfc_match_interface (void);\n match gfc_match_end_interface (void);"}, {"sha": "2839386a3621bafcb4648523bc9abbb6ddc42dce", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=9e1d712c405048f18f246c974865777971c8be16", "patch": "@@ -599,6 +599,7 @@ gfc_match_use (void)\n       switch (type)\n \t{\n \tcase INTERFACE_NAMELESS:\n+\tcase INTERFACE_ABSTRACT:\n \t  gfc_error (\"Missing generic specification in USE statement at %C\");\n \t  goto cleanup;\n \n@@ -1519,7 +1520,7 @@ typedef enum\n   AB_ELEMENTAL, AB_PURE, AB_RECURSIVE, AB_GENERIC, AB_ALWAYS_EXPLICIT,\n   AB_CRAY_POINTER, AB_CRAY_POINTEE, AB_THREADPRIVATE, AB_ALLOC_COMP,\n   AB_POINTER_COMP, AB_PRIVATE_COMP, AB_VALUE, AB_VOLATILE, AB_PROTECTED,\n-  AB_IS_BIND_C, AB_IS_C_INTEROP, AB_IS_ISO_C\n+  AB_IS_BIND_C, AB_IS_C_INTEROP, AB_IS_ISO_C, AB_ABSTRACT\n }\n ab_attribute;\n \n@@ -1557,6 +1558,7 @@ static const mstring attr_bits[] =\n     minit (\"POINTER_COMP\", AB_POINTER_COMP),\n     minit (\"PRIVATE_COMP\", AB_PRIVATE_COMP),\n     minit (\"PROTECTED\", AB_PROTECTED),\n+    minit (\"ABSTRACT\", AB_ABSTRACT),\n     minit (NULL, -1)\n };\n \n@@ -1639,6 +1641,8 @@ mio_symbol_attribute (symbol_attribute *attr)\n \tMIO_NAME (ab_attribute) (AB_SUBROUTINE, attr_bits);\n       if (attr->generic)\n \tMIO_NAME (ab_attribute) (AB_GENERIC, attr_bits);\n+      if (attr->abstract)\n+\tMIO_NAME (ab_attribute) (AB_ABSTRACT, attr_bits);\n \n       if (attr->sequence)\n \tMIO_NAME (ab_attribute) (AB_SEQUENCE, attr_bits);\n@@ -1739,6 +1743,9 @@ mio_symbol_attribute (symbol_attribute *attr)\n \t    case AB_GENERIC:\n \t      attr->generic = 1;\n \t      break;\n+\t    case AB_ABSTRACT:\n+\t      attr->abstract = 1;\n+\t      break;\n \t    case AB_SEQUENCE:\n \t      attr->sequence = 1;\n \t      break;"}, {"sha": "40b2816c62df02151ef461ff91a96f8f115157da", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=9e1d712c405048f18f246c974865777971c8be16", "patch": "@@ -172,6 +172,7 @@ decode_statement (void)\n   switch (c)\n     {\n     case 'a':\n+      match (\"abstract interface\", gfc_match_abstract_interface, ST_INTERFACE);\n       match (\"allocate\", gfc_match_allocate, ST_ALLOCATE);\n       match (\"allocatable\", gfc_match_allocatable, ST_ATTR_DECL);\n       match (\"assign\", gfc_match_assign, ST_LABEL_ASSIGNMENT);\n@@ -1795,6 +1796,18 @@ parse_interface (void)\n \t}\n     }\n \n+  if (current_interface.type == INTERFACE_ABSTRACT)\n+    {\n+      gfc_new_block->attr.abstract = 1;\n+      if (!strcmp(gfc_new_block->name,\"integer\")\n+\t  || !strcmp(gfc_new_block->name,\"real\")\n+\t  || !strcmp(gfc_new_block->name,\"complex\")\n+\t  || !strcmp(gfc_new_block->name,\"character\")\n+\t  || !strcmp(gfc_new_block->name,\"logical\"))\n+\tgfc_error (\"Name of ABSTRACT INTERFACE at %C cannot be the same as \"\n+\t\t   \"an intrinsic type: %s\",gfc_new_block->name);\n+    }\n+\n   push_state (&s2, new_state, gfc_new_block);\n   accept_statement (st);\n   prog_unit = gfc_new_block;"}, {"sha": "ae15d16c188e3a505d33ed3a85e0de4c0fa4a6a8", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=9e1d712c405048f18f246c974865777971c8be16", "patch": "@@ -1968,6 +1968,13 @@ resolve_function (gfc_expr *expr)\n       return FAILURE;\n     }\n \n+  if (sym && sym->attr.abstract)\n+    {\n+      gfc_error (\"ABSTRACT INTERFACE '%s' must not be referenced at %L\",\n+\t\t sym->name, &expr->where);\n+      return FAILURE;\n+    }\n+\n   /* If the procedure is external, check for usage.  */\n   if (sym && is_external_proc (sym))\n     resolve_global_procedure (sym, &expr->where, 0);"}, {"sha": "4f1b7335dc099f37d4fd0d634e02b14c395b7638", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e1d712c405048f18f246c974865777971c8be16", "patch": "@@ -1,3 +1,7 @@\n+2007-08-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/interface_abstract_1.f90: New.\n+\n 2007-08-18  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/32881"}, {"sha": "7bb583af825a09024cd11c2b5a2cb292fdc0981c", "filename": "gcc/testsuite/gfortran.dg/interface_abstract_1.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_abstract_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1d712c405048f18f246c974865777971c8be16/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_abstract_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_abstract_1.f90?ref=9e1d712c405048f18f246c974865777971c8be16", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+!\n+implicit none\n+abstract interface :: one ! { dg-error \"Syntax error in ABSTRACT INTERFACE statement\" }\n+end interface ! { dg-error \"Expecting END PROGRAM statement\" }\n+\n+abstract interface\n+  subroutine two() bind(C)\n+  end subroutine two\n+  subroutine three() bind(C,name=\"three\") ! { dg-error \"NAME not allowed on BIND.C. for ABSTRACT INTERFACE\" }\n+  end subroutine three ! { dg-error \"Expecting END INTERFACE statement\" }\n+  subroutine real() ! { dg-error \"cannot be be the same as an intrinsic type\" }\n+  end subroutine real\n+end interface\n+end"}]}