{"sha": "861e48cbd1a99e2730e66b31ff7404475a2506cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYxZTQ4Y2JkMWE5OWUyNzMwZTY2YjMxZmY3NDA0NDc1YTI1MDZjYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-04-27T23:42:49Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-04-27T23:42:49Z"}, "message": "user.cfg.in: Update to doxygen-1.4.2.\n\n\n2005-04-27  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* docs/doxygen/user.cfg.in: Update to doxygen-1.4.2.\n\t* docs/doxygen/doxygroups.cc: Update namespace comments.\n\nFrom-SVN: r98893", "tree": {"sha": "fc8bb2734222dc66038bd7739a8a06338c81decc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc8bb2734222dc66038bd7739a8a06338c81decc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/861e48cbd1a99e2730e66b31ff7404475a2506cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861e48cbd1a99e2730e66b31ff7404475a2506cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/861e48cbd1a99e2730e66b31ff7404475a2506cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861e48cbd1a99e2730e66b31ff7404475a2506cc/comments", "author": null, "committer": null, "parents": [{"sha": "ef614e8a8f8f3d72b99feac6135f5f3c88ce283c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef614e8a8f8f3d72b99feac6135f5f3c88ce283c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef614e8a8f8f3d72b99feac6135f5f3c88ce283c"}], "stats": {"total": 1071, "additions": 1044, "deletions": 27}, "files": [{"sha": "19c3bc8ce3eb702e8e434807fd874bb2c817c20d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861e48cbd1a99e2730e66b31ff7404475a2506cc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861e48cbd1a99e2730e66b31ff7404475a2506cc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=861e48cbd1a99e2730e66b31ff7404475a2506cc", "patch": "@@ -1,3 +1,8 @@\n+2005-04-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* docs/doxygen/user.cfg.in: Update to doxygen-1.4.2.\n+\t* docs/doxygen/doxygroups.cc: Update namespace comments.\n+\n 2005-04-27  Dominik Strasser  <dominik.strasser@infineon.com>\n \t    Paolo Carlini  <pcarlini@suse.de>\n \n@@ -77,7 +82,7 @@\n \t__int_to_char(_CharT*, long long, const _CharT*, ios_base::fmtflags)):\n \tSimplify, don't pass the sign.\n \t(_M_insert_float(_OutIter, ios_base&, _CharT, char, _ValueT)):\n-\tDeal with a sign at the beginning of __cs; robustify the grouping\t\n+\tDeal with a sign at the beginning of __cs; robustify the grouping\n \tcheck.\n \t* testsuite/22_locale/num_put/put/char/20914.cc: New.\n \t* testsuite/22_locale/num_put/put/wchar_t/20914.cc: Likewise."}, {"sha": "e661d888cb08026eb1df8bf3ce93c0871f71807a", "filename": "libstdc++-v3/docs/doxygen/doxygroups.cc", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861e48cbd1a99e2730e66b31ff7404475a2506cc/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861e48cbd1a99e2730e66b31ff7404475a2506cc/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc?ref=861e48cbd1a99e2730e66b31ff7404475a2506cc", "patch": "@@ -1,5 +1,5 @@\n /*\n-   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2005 Free Software Foundation, Inc.\n    See license.html for license.\n \n    This just provides documentation for stuff that doesn't need to be in the\n@@ -23,19 +23,17 @@\n  *  @brief Everything defined by the TR1 is within namespace std::tr1.\n */\n /** @namespace __gnu_cxx\n- *  @brief This namespace serves two purposes.\n- *\n- *  This namespace is used for two things:\n- *  -  sequestering internal (implementation-only) names away from the\n- *     global namespace; these are details of the implementation and should\n- *     not be touched by users\n- *  -  GNU extensions for public use\n- *\n- *  This is still fluid and changing rapidly.  Currently the rule is:  if an\n- *  entitity is found in the user-level documentation, it falls into the\n- *  second category.\n+ *  @brief GNU extensions for public use.\n+*/\n+/** @namespace __gnu_cxx::balloc\n+ *  @brief Related to __gnu_cxx::bitmap_allocator.\n+*/\n+/** @namespace __gnu_internal\n+ *  @brief GNU implemenation details, not for public use.\n+*/\n+/** @namespace __gnu_debug\n+ *  @brief GNU debug mode implemenation details.\n */\n-\n // // // // // // // // // // // // // // // // // // // // // // // //\n /** @addtogroup SGIextensions STL extensions from SGI\n Because libstdc++-v3 based its implementation of the STL subsections of\n@@ -131,10 +129,11 @@ All associative containers must meet certain requirements, summarized in\n  *  platform.  It is summarized at http://www.codesourcery.com/cxx-abi/\n  *  along with the current specification.\n  *\n- *  For users of GCC 3.x, entry points are available in <cxxabi.h>, which notes,\n- *  <em>\"It is not normally necessary for user programs to include this header,\n- *  or use the entry points directly.  However, this header is available\n- *  should that be needed.\"</em>\n+ *  For users of GCC greater than or equal to 3.x, entry points are\n+ *  available in <cxxabi.h>, which notes, <em>\"It is not normally\n+ *  necessary for user programs to include this header, or use the\n+ *  entry points directly.  However, this header is available should\n+ *  that be needed.\"</em>\n */\n \n namespace abi {"}, {"sha": "4048290b7cedf14644a2a57b404ebc00fe015884", "filename": "libstdc++-v3/docs/doxygen/user.cfg.in", "status": "modified", "additions": 1022, "deletions": 9, "changes": 1031, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861e48cbd1a99e2730e66b31ff7404475a2506cc/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861e48cbd1a99e2730e66b31ff7404475a2506cc/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in?ref=861e48cbd1a99e2730e66b31ff7404475a2506cc", "patch": "@@ -1,76 +1,462 @@\n-# Doxyfile 1.3.9.1\n+# Doxyfile 1.4.2\n+\n+# This file describes the settings to be used by the documentation system\n+# doxygen (www.doxygen.org) for a project\n+#\n+# All text after a hash (#) is considered a comment and will be ignored\n+# The format is:\n+#       TAG = value [value, ...]\n+# For lists items can also be appended using:\n+#       TAG += value [value, ...]\n+# Values that contain spaces should be placed between quotes (\" \")\n \n #---------------------------------------------------------------------------\n # Project related configuration options\n #---------------------------------------------------------------------------\n+\n+# The PROJECT_NAME tag is a single word (or a sequence of words surrounded \n+# by quotes) that should identify the project.\n+\n PROJECT_NAME           = \"libstdc++ source\"\n+\n+# The PROJECT_NUMBER tag can be used to enter a project or revision number. \n+# This could be handy for archiving the generated documentation or \n+# if some version control system is used.\n+\n PROJECT_NUMBER         = \n+\n+# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) \n+# base path where the generated documentation will be put. \n+# If a relative path is entered, it will be relative to the location \n+# where doxygen was started. If left blank the current directory will be used.\n+\n OUTPUT_DIRECTORY       = @outdir@\n+\n+# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create \n+# 4096 sub-directories (in 2 levels) under the output directory of each output \n+# format and will distribute the generated files over these directories. \n+# Enabling this option can be useful when feeding doxygen a huge amount of \n+# source files, where putting all generated files in the same directory would \n+# otherwise cause performance problems for the file system.\n+\n CREATE_SUBDIRS         = NO\n+\n+# The OUTPUT_LANGUAGE tag is used to specify the language in which all \n+# documentation generated by doxygen is written. Doxygen will use this \n+# information to generate all constant output in the proper language. \n+# The default language is English, other supported languages are: \n+# Brazilian, Catalan, Chinese, Chinese-Traditional, Croatian, Czech, Danish, \n+# Dutch, Finnish, French, German, Greek, Hungarian, Italian, Japanese, \n+# Japanese-en (Japanese with English messages), Korean, Korean-en, Norwegian, \n+# Polish, Portuguese, Romanian, Russian, Serbian, Slovak, Slovene, Spanish, \n+# Swedish, and Ukrainian.\n+\n OUTPUT_LANGUAGE        = English\n+\n+# This tag can be used to specify the encoding used in the generated\n+# output.  The encoding is not always determined by the language that\n+# is chosen, but also whether or not the output is meant for Windows\n+# or non-Windows users.  In case there is a difference, setting the\n+# USE_WINDOWS_ENCODING tag to YES forces the Windows encoding (this is\n+# the default for the Windows binary), whereas setting the tag to NO\n+# uses a Unix-style encoding (the default for all platforms other than\n+# Windows).\n+\n USE_WINDOWS_ENCODING   = NO\n+\n+# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will \n+# include brief member descriptions after the members that are listed in \n+# the file and class documentation (similar to JavaDoc). \n+# Set to NO to disable this.\n+\n BRIEF_MEMBER_DESC      = NO\n+\n+# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will\n+# prepend the brief description of a member or function before the\n+# detailed description.  Note: if both HIDE_UNDOC_MEMBERS and\n+# BRIEF_MEMBER_DESC are set to NO, the brief descriptions will be\n+# completely suppressed.\n+\n REPEAT_BRIEF           = NO\n+\n+# This tag implements a quasi-intelligent brief description abbreviator \n+# that is used to form the text in various listings. Each string \n+# in this list, if found as the leading text of the brief description, will be \n+# stripped from the text and the result after processing the whole list, is \n+# used as the annotated text. Otherwise, the brief description is used as-is. \n+# If left blank, the following values are used (\"$name\" is automatically \n+# replaced with the name of the entity): \"The $name class\" \"The $name widget\" \n+# \"The $name file\" \"is\" \"provides\" \"specifies\" \"contains\" \n+# \"represents\" \"a\" \"an\" \"the\"\n+\n ABBREVIATE_BRIEF       = \n+\n+# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then \n+# Doxygen will generate a detailed section even if there is only a brief \n+# description.\n+\n ALWAYS_DETAILED_SEC    = YES\n+\n+# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show\n+# all inherited members of a class in the documentation of that class\n+# as if those members were ordinary class members. Constructors,\n+# destructors and assignment operators of the base classes will not be\n+# shown.\n+\n INLINE_INHERITED_MEMB  = YES\n+\n+# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full \n+# path before files name in the file list and in the header files. If set \n+# to NO the shortest path that makes the file name unique will be used.\n+\n FULL_PATH_NAMES        = NO\n+\n+# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag \n+# can be used to strip a user-defined part of the path. Stripping is \n+# only done if one of the specified strings matches the left-hand part of \n+# the path. The tag can be used to show relative paths in the file list. \n+# If left blank the directory from which doxygen is run is used as the \n+# path to strip.\n+\n STRIP_FROM_PATH        = \n+\n+# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of \n+# the path mentioned in the documentation of a class, which tells \n+# the reader which header file to include in order to use a class. \n+# If left blank only the name of the header file containing the class \n+# definition is used. Otherwise one should specify the include paths that \n+# are normally passed to the compiler using the -I flag.\n+\n STRIP_FROM_INC_PATH    = \n+\n+# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter \n+# (but less readable) file names. This can be useful is your file systems \n+# doesn't support long names like on DOS, Mac, or CD-ROM.\n+\n SHORT_NAMES            = NO\n+\n+# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen \n+# will interpret the first line (until the first dot) of a JavaDoc-style \n+# comment as the brief description. If set to NO, the JavaDoc \n+# comments will behave just like the Qt-style comments (thus requiring an \n+# explicit @brief command for a brief description.\n+\n JAVADOC_AUTOBRIEF      = NO\n+\n+# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen \n+# treat a multi-line C++ special comment block (i.e. a block of //! or /// \n+# comments) as a brief description. This used to be the default behaviour. \n+# The new default is to treat a multi-line C++ comment block as a detailed \n+# description. Set this tag to YES if you prefer the old behaviour instead.\n+\n MULTILINE_CPP_IS_BRIEF = YES\n+\n+# If the DETAILS_AT_TOP tag is set to YES then Doxygen \n+# will output the detailed description near the top, like JavaDoc.\n+# If set to NO, the detailed description appears after the member \n+# documentation.\n+\n DETAILS_AT_TOP         = YES\n+\n+# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented \n+# member inherits the documentation from any documented member that it \n+# re-implements.\n+\n INHERIT_DOCS           = YES\n+\n+# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC \n+# tag is set to YES, then doxygen will reuse the documentation of the first \n+# member in the group (if any) for the other members of the group. By default \n+# all members of a group must be documented explicitly.\n+\n DISTRIBUTE_GROUP_DOC   = YES\n+\n+# If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce \n+# a new page for each member. If set to NO, the documentation of a member will \n+# be part of the file/class/namespace that contains it.\n+\n+SEPARATE_MEMBER_PAGES  = NO\n+\n+# The TAB_SIZE tag can be used to set the number of spaces in a tab. \n+# Doxygen uses this value to replace tabs by spaces in code fragments.\n+\n TAB_SIZE               = 4\n+\n+# This tag can be used to specify a number of aliases that acts \n+# as commands in the documentation. An alias has the form \"name=value\". \n+# For example adding \"sideeffect=\\par Side Effects:\\n\" will allow you to \n+# put the command \\sideeffect (or @sideeffect) in the documentation, which \n+# will result in a user-defined paragraph with heading \"Side Effects:\". \n+# You can put \\n's in the value part of an alias to insert newlines.\n+\n ALIASES                = \"doctodo=@todo\\nDoc me!  See docs/doxygen/TODO and http://gcc.gnu.org/ml/libstdc++/2002-02/msg00003.html for more.\" \\\n                          \"isiosfwd=One of the @link s27_2_iosfwd I/O forward declarations @endlink\"\n+\n+# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C \n+# sources only. Doxygen will then generate output that is more tailored for C. \n+# For instance, some of the names that are used will be different. The list \n+# of all members will be omitted, etc.\n+\n OPTIMIZE_OUTPUT_FOR_C  = NO\n+\n+# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of\n+# Java sources only. Doxygen will then generate output that is more\n+# tailored for Java.  For instance, namespaces will be presented as\n+# packages, qualified scopes will look different, etc.\n+\n OPTIMIZE_OUTPUT_JAVA   = NO\n+\n+# Set the SUBGROUPING tag to YES (the default) to allow class member groups of \n+# the same type (for instance a group of public functions) to be put as a \n+# subgroup of that type (e.g. under the Public Functions section). Set it to \n+# NO to prevent subgrouping. Alternatively, this can be done per class using \n+# the \\nosubgrouping command.\n+\n SUBGROUPING            = YES\n+\n #---------------------------------------------------------------------------\n # Build related configuration options\n #---------------------------------------------------------------------------\n+\n+# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in \n+# documentation are documented, even if no documentation was available. \n+# Private class members and static file members will be hidden unless \n+# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES\n+\n EXTRACT_ALL            = NO\n+\n+# If the EXTRACT_PRIVATE tag is set to YES all private members of a class \n+# will be included in the documentation.\n+\n EXTRACT_PRIVATE        = NO\n+\n+# If the EXTRACT_STATIC tag is set to YES all static members of a file \n+# will be included in the documentation.\n+\n EXTRACT_STATIC         = YES\n+\n+# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs) \n+# defined locally in source files will be included in the documentation. \n+# If set to NO only classes defined in header files are included.\n+\n EXTRACT_LOCAL_CLASSES  = YES\n+\n+# This flag is only useful for Objective-C code. When set to YES local \n+# methods, which are defined in the implementation section but not in \n+# the interface are included in the documentation. \n+# If set to NO (the default) only methods in the interface are included.\n+\n EXTRACT_LOCAL_METHODS  = YES\n+\n+# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all \n+# undocumented members of documented classes, files or namespaces. \n+# If set to NO (the default) these members will be included in the \n+# various overviews, but no documentation section is generated. \n+# This option has no effect if EXTRACT_ALL is enabled.\n+\n HIDE_UNDOC_MEMBERS     = NO\n+\n+# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all \n+# undocumented classes that are normally visible in the class hierarchy. \n+# If set to NO (the default) these classes will be included in the various \n+# overviews. This option has no effect if EXTRACT_ALL is enabled.\n+\n HIDE_UNDOC_CLASSES     = YES\n+\n+# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all \n+# friend (class|struct|union) declarations. \n+# If set to NO (the default) these declarations will be included in the \n+# documentation.\n+\n HIDE_FRIEND_COMPOUNDS  = NO\n+\n+# If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any \n+# documentation blocks found inside the body of a function. \n+# If set to NO (the default) these blocks will be appended to the \n+# function's detailed documentation block.\n+\n HIDE_IN_BODY_DOCS      = NO\n+\n+# The INTERNAL_DOCS tag determines if documentation \n+# that is typed after a \\internal command is included. If the tag is set \n+# to NO (the default) then the documentation will be excluded. \n+# Set it to YES to include the internal documentation.\n+\n INTERNAL_DOCS          = NO\n+\n+# If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate \n+# file names in lower-case letters. If set to YES upper-case letters are also \n+# allowed. This is useful if you have classes or files whose names only differ \n+# in case and if your file system supports case sensitive file names. Windows \n+# and Mac users are advised to set this option to NO.\n+\n CASE_SENSE_NAMES       = NO\n+\n+# If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen \n+# will show members with their full class and namespace scopes in the \n+# documentation. If set to YES the scope will be hidden.\n+\n HIDE_SCOPE_NAMES       = YES\n+\n+# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then\n+# Doxygen will put a list of the files that are included by a file in\n+# the documentation of that file.\n+\n SHOW_INCLUDE_FILES     = NO\n+\n+# If the INLINE_INFO tag is set to YES (the default) then a tag [inline] \n+# is inserted in the documentation for inline members.\n+\n INLINE_INFO            = YES\n+\n+# If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen \n+# will sort the (detailed) documentation of file and class members \n+# alphabetically by member name. If set to NO the members will appear in \n+# declaration order.\n+\n SORT_MEMBER_DOCS       = YES\n+\n+# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the \n+# brief documentation of file, namespace and class members alphabetically \n+# by member name. If set to NO (the default) the members will appear in \n+# declaration order.\n+\n SORT_BRIEF_DOCS        = YES\n+\n+# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be \n+# sorted by fully-qualified names, including namespaces. If set to \n+# NO (the default), the class list will be sorted only by class name, \n+# not including the namespace part. \n+# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES.\n+# Note: This option applies only to the class list, not to the \n+# alphabetical list.\n+\n SORT_BY_SCOPE_NAME     = YES\n+\n+# The GENERATE_TODOLIST tag can be used to enable (YES) or \n+# disable (NO) the todo list. This list is created by putting \\todo \n+# commands in the documentation.\n+\n GENERATE_TODOLIST      = YES\n+\n+# The GENERATE_TESTLIST tag can be used to enable (YES) or \n+# disable (NO) the test list. This list is created by putting \\test \n+# commands in the documentation.\n+\n GENERATE_TESTLIST      = NO\n+\n+# The GENERATE_BUGLIST tag can be used to enable (YES) or \n+# disable (NO) the bug list. This list is created by putting \\bug \n+# commands in the documentation.\n+\n GENERATE_BUGLIST       = YES\n+\n+# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or \n+# disable (NO) the deprecated list. This list is created by putting \n+# \\deprecated commands in the documentation.\n+\n GENERATE_DEPRECATEDLIST= YES\n+\n+# The ENABLED_SECTIONS tag can be used to enable conditional \n+# documentation sections, marked by \\if sectionname ... \\endif.\n+\n ENABLED_SECTIONS       = @enabled_sections@\n+\n+# The MAX_INITIALIZER_LINES tag determines the maximum number of lines \n+# the initial value of a variable or define consists of for it to appear in \n+# the documentation. If the initializer consists of more lines than specified \n+# here it will be hidden. Use a value of 0 to hide initializers completely. \n+# The appearance of the initializer of individual variables and defines in the \n+# documentation can be controlled using \\showinitializer or \\hideinitializer \n+# command in the documentation regardless of this setting.\n+\n MAX_INITIALIZER_LINES  = 0\n+\n+# Set the SHOW_USED_FILES tag to NO to disable the list of files generated \n+# at the bottom of the documentation of classes and structs. If set to YES the \n+# list will mention the files that were used to generate the documentation.\n+\n SHOW_USED_FILES        = YES\n+\n+# If the sources in your project are distributed over multiple\n+# directories then setting the SHOW_DIRECTORIES tag to YES will show\n+# the directory hierarchy in the documentation.\n+\n SHOW_DIRECTORIES       = YES\n+\n+# The FILE_VERSION_FILTER tag can be used to specify a program or\n+# script that doxygen should invoke to get the current version for\n+# each file (typically from the version control system). Doxygen will\n+# invoke the program by executing (via popen()) the command <command>\n+# <input-file>, where <command> is the value of the\n+# FILE_VERSION_FILTER tag, and <input-file> is the name of an input\n+# file provided by doxygen. Whatever the progam writes to standard\n+# output is used as the file version. See the manual for examples.\n+\n+FILE_VERSION_FILTER    = \n+\n #---------------------------------------------------------------------------\n # configuration options related to warning and progress messages\n #---------------------------------------------------------------------------\n+\n+# The QUIET tag can be used to turn on/off the messages that are generated \n+# by doxygen. Possible values are YES and NO. If left blank NO is used.\n+\n QUIET                  = NO\n+\n+# The WARNINGS tag can be used to turn on/off the warning messages that are \n+# generated by doxygen. Possible values are YES and NO. If left blank \n+# NO is used.\n+\n WARNINGS               = YES\n+\n+# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings \n+# for undocumented members. If EXTRACT_ALL is set to YES then this flag will \n+# automatically be disabled.\n+\n WARN_IF_UNDOCUMENTED   = NO\n+\n+# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for \n+# potential errors in the documentation, such as not documenting some \n+# parameters in a documented function, or documenting parameters that \n+# don't exist or using markup commands wrongly.\n+\n WARN_IF_DOC_ERROR      = NO\n+\n+# This WARN_NO_PARAMDOC option can be abled to get warnings for\n+# functions that are documented, but have no documentation for their\n+# parameters or return value. If set to NO (the default) doxygen will\n+# only warn about wrong or incomplete parameter documentation, but not\n+# about the absence of documentation.\n+\n+WARN_NO_PARAMDOC       = NO\n+\n+# The WARN_FORMAT tag determines the format of the warning messages that \n+# doxygen can produce. The string should contain the $file, $line, and $text \n+# tags, which will be replaced by the file and line number from which the \n+# warning originated and the warning text. Optionally the format may contain \n+# $version, which will be replaced by the version of the file (if it could \n+# be obtained via FILE_VERSION_FILTER)\n+\n WARN_FORMAT            = \"$file:$line: $text\"\n+\n+# The WARN_LOGFILE tag can be used to specify a file to which warning \n+# and error messages should be written. If left blank the output is written \n+# to stderr.\n+\n WARN_LOGFILE           = \n+\n #---------------------------------------------------------------------------\n # configuration options related to the input files\n #---------------------------------------------------------------------------\n+\n+# The INPUT tag can be used to specify the files and/or directories\n+# that contain documented source files. You may enter file names like\n+# \"myfile.cpp\" or directories like \"/usr/src/myproject\". Separate the\n+# files or directories with spaces.\n+\n INPUT                  = @srcdir@/docs/doxygen/doxygroups.cc \\\n-\t\t\t include/@host_alias@/bits \\\n+                         include/@host_alias@/bits \\\n                          include/bits \\\n                          include/ext \\\n                          include/tr1 \\\n@@ -121,166 +507,793 @@ INPUT                  = @srcdir@/docs/doxygen/doxygroups.cc \\\n                          include/tr1/type_traits \\\n                          include/tr1/unordered_map \\\n                          include/tr1/unordered_set \\\n-                         include/tr1/utility \n+                         include/tr1/utility\n+\n+# If the value of the INPUT tag contains directories, you can use the\n+# FILE_PATTERNS tag to specify one or more wildcard pattern (like\n+# *.cpp and *.h) to filter out the source-files in the directories. If\n+# left blank the following patterns are tested: *.c *.cc *.cxx *.cpp\n+# *.c++ *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh *.hxx *.hpp *.h++\n+# *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm\n+\n FILE_PATTERNS          = *.h \\\n                          *.tcc\n+\n+# The RECURSIVE tag can be used to turn specify whether or not subdirectories \n+# should be searched for input files as well. Possible values are YES and NO. \n+# If left blank NO is used.\n+\n RECURSIVE              = NO\n+\n+# The EXCLUDE tag can be used to specify files and/or directories that\n+# should excluded from the INPUT source files. This way you can easily\n+# exclude a subdirectory from a directory tree whose root is specified\n+# with the INPUT tag.\n+\n EXCLUDE                = Makefile \\\n                          CVS \\\n                          include/bits/demangle.h \\\n                          stdc++.h.gch\n+\n+# The EXCLUDE_SYMLINKS tag can be used select whether or not files or\n+# directories that are symbolic links (a Unix filesystem feature) are\n+# excluded from the input.\n+\n EXCLUDE_SYMLINKS       = NO\n+\n+# If the value of the INPUT tag contains directories, you can use the \n+# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude \n+# certain files from those directories.\n+\n EXCLUDE_PATTERNS       = CVS \\\n                          stamp-* \\\n                          Makefile \\\n                          *gch*\n+\n+# The EXAMPLE_PATH tag can be used to specify one or more files or \n+# directories that contain example code fragments that are included (see \n+# the \\include command).\n+\n EXAMPLE_PATH           = \n+\n+# If the value of the EXAMPLE_PATH tag contains directories, you can use the \n+# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp \n+# and *.h) to filter out the source-files in the directories. If left \n+# blank all files are included.\n+\n EXAMPLE_PATTERNS       = \n+\n+# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be \n+# searched for input files to be used with the \\include or \\dontinclude \n+# commands irrespective of the value of the RECURSIVE tag. \n+# Possible values are YES and NO. If left blank NO is used.\n+\n EXAMPLE_RECURSIVE      = NO\n+\n+# The IMAGE_PATH tag can be used to specify one or more files or \n+# directories that contain image that are included in the documentation (see \n+# the \\image command).\n+\n IMAGE_PATH             = \n+\n+# The INPUT_FILTER tag can be used to specify a program that doxygen should \n+# invoke to filter for each input file. Doxygen will invoke the filter program \n+# by executing (via popen()) the command <filter> <input-file>, where <filter> \n+# is the value of the INPUT_FILTER tag, and <input-file> is the name of an \n+# input file. Doxygen will then use the output that the filter program writes \n+# to standard output.  If FILTER_PATTERNS is specified, this tag will be \n+# ignored.\n+\n INPUT_FILTER           = \n+\n+# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern \n+# basis.  Doxygen will compare the file name with each pattern and apply the \n+# filter if there is a match.  The filters are a list of the form: \n+# pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further \n+# info on how filters are used. If FILTER_PATTERNS is empty, INPUT_FILTER \n+# is applied to all files.\n+\n FILTER_PATTERNS        = \n+\n+# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using \n+# INPUT_FILTER) will be used to filter the input files when producing source \n+# files to browse (i.e. when SOURCE_BROWSER is set to YES).\n+\n FILTER_SOURCE_FILES    = NO\n+\n #---------------------------------------------------------------------------\n # configuration options related to source browsing\n #---------------------------------------------------------------------------\n+\n+# If the SOURCE_BROWSER tag is set to YES then a list of source files\n+# will be generated. Documented entities will be cross-referenced with\n+# these sources.  Note: To get rid of all source code in the generated\n+# output, make sure also VERBATIM_HEADERS is set to NO.\n+\n SOURCE_BROWSER         = YES\n+\n+# Setting the INLINE_SOURCES tag to YES will include the body \n+# of functions and classes directly in the documentation.\n+\n INLINE_SOURCES         = NO\n+\n+# Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct \n+# doxygen to hide any special comment blocks from generated source code \n+# fragments. Normal C and C++ comments will always remain visible.\n+\n STRIP_CODE_COMMENTS    = NO\n+\n+# If the REFERENCED_BY_RELATION tag is set to YES (the default) \n+# then for each documented function all documented \n+# functions referencing it will be listed.\n+\n REFERENCED_BY_RELATION = YES\n+\n+# If the REFERENCES_RELATION tag is set to YES (the default) \n+# then for each documented function all documented entities \n+# called/used by that function will be listed.\n+\n REFERENCES_RELATION    = YES\n+\n+# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen \n+# will generate a verbatim copy of the header file for each class for \n+# which an include is specified. Set to NO to disable this.\n+\n VERBATIM_HEADERS       = NO\n+\n #---------------------------------------------------------------------------\n # configuration options related to the alphabetical class index\n #---------------------------------------------------------------------------\n+\n+# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index \n+# of all compounds will be generated. Enable this if the project \n+# contains a lot of classes, structs, unions or interfaces.\n+\n ALPHABETICAL_INDEX     = YES\n+\n+# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then \n+# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns \n+# in which this list will be split (can be a number in the range [1..20])\n+\n COLS_IN_ALPHA_INDEX    = 2\n+\n+# In case all classes in a project start with a common prefix, all \n+# classes will be put under the same header in the alphabetical index. \n+# The IGNORE_PREFIX tag can be used to specify one or more prefixes that \n+# should be ignored while generating the index headers.\n+\n IGNORE_PREFIX          = std \\\n+                         std::tr1 \\\n                          __gnu_cxx \\\n-                         __gnu_debug \\\n-\t          \t std::tr1\n+                         __gnu_debug \n+\n+\n #---------------------------------------------------------------------------\n # configuration options related to the HTML output\n #---------------------------------------------------------------------------\n+\n+# If the GENERATE_HTML tag is set to YES (the default) Doxygen will \n+# generate HTML output.\n+\n GENERATE_HTML          = @do_html@\n+\n+# The HTML_OUTPUT tag is used to specify where the HTML docs will be put. \n+# If a relative path is entered the value of OUTPUT_DIRECTORY will be \n+# put in front of it. If left blank `html' will be used as the default path.\n+\n HTML_OUTPUT            = @html_output_dir@\n+\n+# The HTML_FILE_EXTENSION tag can be used to specify the file extension for \n+# each generated HTML page (for example: .htm,.php,.asp). If it is left blank \n+# doxygen will generate files with .html extension.\n+\n HTML_FILE_EXTENSION    = .html\n+\n+# The HTML_HEADER tag can be used to specify a personal HTML header for \n+# each generated HTML page. If it is left blank doxygen will generate a \n+# standard header.\n+\n HTML_HEADER            = \n+\n+# The HTML_FOOTER tag can be used to specify a personal HTML footer for \n+# each generated HTML page. If it is left blank doxygen will generate a \n+# standard footer.\n+\n HTML_FOOTER            = \n+\n+# The HTML_STYLESHEET tag can be used to specify a user-defined cascading \n+# style sheet that is used by each HTML page. It can be used to \n+# fine-tune the look of the HTML output. If the tag is left blank doxygen \n+# will generate a default style sheet. Note that doxygen will try to copy \n+# the style sheet file to the HTML output directory, so don't put your own \n+# stylesheet in the HTML output directory as well, or it will be erased!\n+\n HTML_STYLESHEET        = @srcdir@/docs/doxygen/style.css\n+\n+# If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes, \n+# files or namespaces will be aligned in HTML using tables. If set to \n+# NO a bullet list will be used.\n+\n HTML_ALIGN_MEMBERS     = NO\n+\n+# If the GENERATE_HTMLHELP tag is set to YES, additional index files \n+# will be generated that can be used as input for tools like the \n+# Microsoft HTML help workshop to generate a compressed HTML help file (.chm) \n+# of the generated HTML documentation.\n+\n GENERATE_HTMLHELP      = NO\n+\n+# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can \n+# be used to specify the file name of the resulting .chm file. You \n+# can add a path in front of the file if the result should not be \n+# written to the html output directory.\n+\n CHM_FILE               = \n+\n+# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can \n+# be used to specify the location (absolute path including file name) of \n+# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run \n+# the HTML help compiler on the generated index.hhp.\n+\n HHC_LOCATION           = \n+\n+# If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag \n+# controls if a separate .chi index file is generated (YES) or that \n+# it should be included in the master .chm file (NO).\n+\n GENERATE_CHI           = NO\n+\n+# If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag \n+# controls whether a binary table of contents is generated (YES) or a \n+# normal table of contents (NO) in the .chm file.\n+\n BINARY_TOC             = NO\n+\n+# The TOC_EXPAND flag can be set to YES to add extra items for group members \n+# to the contents of the HTML help documentation and to the tree view.\n+\n TOC_EXPAND             = NO\n+\n+# The DISABLE_INDEX tag can be used to turn on/off the condensed index at \n+# top of each HTML page. The value NO (the default) enables the index and \n+# the value YES disables it.\n+\n DISABLE_INDEX          = YES\n+\n+# This tag can be used to set the number of enum values (range [1..20]) \n+# that doxygen will group on one line in the generated HTML documentation.\n+\n ENUM_VALUES_PER_LINE   = 4\n+\n+# If the GENERATE_TREEVIEW tag is set to YES, a side panel will be\n+# generated containing a tree-like index structure (just like the one that \n+# is generated for HTML Help). For this to work a browser that supports \n+# JavaScript, DHTML, CSS and frames is required (for instance Mozilla 1.0+, \n+# Netscape 6.0+, Internet explorer 5.0+, or Konqueror). Windows users are \n+# probably better off using the HTML help feature.\n+\n GENERATE_TREEVIEW      = YES\n+\n+# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be \n+# used to set the initial width (in pixels) of the frame in which the tree \n+# is shown.\n+\n TREEVIEW_WIDTH         = 250\n+\n #---------------------------------------------------------------------------\n # configuration options related to the LaTeX output\n #---------------------------------------------------------------------------\n+\n+# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will \n+# generate Latex output.\n+\n GENERATE_LATEX         = NO\n+\n+# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. \n+# If a relative path is entered the value of OUTPUT_DIRECTORY will be \n+# put in front of it. If left blank `latex' will be used as the default path.\n+\n LATEX_OUTPUT           = latex\n+\n+# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be \n+# invoked. If left blank `latex' will be used as the default command name.\n+\n LATEX_CMD_NAME         = latex\n+\n+# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to \n+# generate index for LaTeX. If left blank `makeindex' will be used as the \n+# default command name.\n+\n MAKEINDEX_CMD_NAME     = makeindex\n+\n+# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact \n+# LaTeX documents. This may be useful for small projects and may help to \n+# save some trees in general.\n+\n COMPACT_LATEX          = NO\n+\n+# The PAPER_TYPE tag can be used to set the paper type that is used \n+# by the printer. Possible values are: a4, a4wide, letter, legal and \n+# executive. If left blank a4wide will be used.\n+\n PAPER_TYPE             = letter\n+\n+# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX \n+# packages that should be included in the LaTeX output.\n+\n EXTRA_PACKAGES         = \n+\n+# The LATEX_HEADER tag can be used to specify a personal LaTeX header for \n+# the generated latex document. The header should contain everything until \n+# the first chapter. If it is left blank doxygen will generate a \n+# standard header. Notice: only use this tag if you know what you are doing!\n+\n LATEX_HEADER           = \n+\n+# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated \n+# is prepared for conversion to pdf (using ps2pdf). The pdf file will \n+# contain links (just like the HTML output) instead of page references \n+# This makes the output suitable for online browsing using a pdf viewer.\n+\n PDF_HYPERLINKS         = NO\n+\n+# If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of \n+# plain latex in the generated Makefile. Set this option to YES to get a \n+# higher quality PDF documentation.\n+\n USE_PDFLATEX           = NO\n+\n+# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\\\batchmode. \n+# command to the generated LaTeX files. This will instruct LaTeX to keep \n+# running if errors occur, instead of asking the user for help. \n+# This option is also used when generating formulas in HTML.\n+\n LATEX_BATCHMODE        = NO\n+\n+# If LATEX_HIDE_INDICES is set to YES then doxygen will not \n+# include the index chapters (such as File Index, Compound Index, etc.) \n+# in the output.\n+\n LATEX_HIDE_INDICES     = NO\n+\n #---------------------------------------------------------------------------\n # configuration options related to the RTF output\n #---------------------------------------------------------------------------\n+\n+# If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output \n+# The RTF output is optimized for Word 97 and may not look very pretty with \n+# other RTF readers or editors.\n+\n GENERATE_RTF           = NO\n+\n+# The RTF_OUTPUT tag is used to specify where the RTF docs will be put. \n+# If a relative path is entered the value of OUTPUT_DIRECTORY will be \n+# put in front of it. If left blank `rtf' will be used as the default path.\n+\n RTF_OUTPUT             = rtf\n+\n+# If the COMPACT_RTF tag is set to YES Doxygen generates more compact \n+# RTF documents. This may be useful for small projects and may help to \n+# save some trees in general.\n+\n COMPACT_RTF            = NO\n+\n+# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated \n+# will contain hyperlink fields. The RTF file will \n+# contain links (just like the HTML output) instead of page references. \n+# This makes the output suitable for online browsing using WORD or other \n+# programs which support those fields. \n+# Note: wordpad (write) and others do not support links.\n+\n RTF_HYPERLINKS         = NO\n+\n+# Load stylesheet definitions from file. Syntax is similar to doxygen's \n+# config file, i.e. a series of assignments. You only have to provide \n+# replacements, missing definitions are set to their default value.\n+\n RTF_STYLESHEET_FILE    = \n+\n+# Set optional variables used in the generation of an rtf document. \n+# Syntax is similar to doxygen's config file.\n+\n RTF_EXTENSIONS_FILE    = \n+\n #---------------------------------------------------------------------------\n # configuration options related to the man page output\n #---------------------------------------------------------------------------\n+\n+# If the GENERATE_MAN tag is set to YES (the default) Doxygen will \n+# generate man pages\n+\n GENERATE_MAN           = @do_man@\n+\n+# The MAN_OUTPUT tag is used to specify where the man pages will be put. \n+# If a relative path is entered the value of OUTPUT_DIRECTORY will be \n+# put in front of it. If left blank `man' will be used as the default path.\n+\n MAN_OUTPUT             = man\n+\n+# The MAN_EXTENSION tag determines the extension that is added to \n+# the generated man pages (default is the subroutine's section .3)\n+\n MAN_EXTENSION          = .3\n+\n+# If the MAN_LINKS tag is set to YES and Doxygen generates man output, \n+# then it will generate one additional man file for each entity \n+# documented in the real man page(s). These additional files \n+# only source the real man page, but without them the man command \n+# would be unable to find the correct page. The default is NO.\n+\n MAN_LINKS              = NO\n+\n #---------------------------------------------------------------------------\n # configuration options related to the XML output\n #---------------------------------------------------------------------------\n+\n+# If the GENERATE_XML tag is set to YES Doxygen will \n+# generate an XML file that captures the structure of \n+# the code including all documentation.\n+\n GENERATE_XML           = NO\n+\n+# The XML_OUTPUT tag is used to specify where the XML pages will be put. \n+# If a relative path is entered the value of OUTPUT_DIRECTORY will be \n+# put in front of it. If left blank `xml' will be used as the default path.\n+\n XML_OUTPUT             = xml\n+\n+# The XML_SCHEMA tag can be used to specify an XML schema, \n+# which can be used by a validating XML parser to check the \n+# syntax of the XML files.\n+\n XML_SCHEMA             = \n+\n+# The XML_DTD tag can be used to specify an XML DTD, \n+# which can be used by a validating XML parser to check the \n+# syntax of the XML files.\n+\n XML_DTD                = \n+\n+# If the XML_PROGRAMLISTING tag is set to YES Doxygen will \n+# dump the program listings (including syntax highlighting \n+# and cross-referencing information) to the XML output. Note that \n+# enabling this will significantly increase the size of the XML output.\n+\n XML_PROGRAMLISTING     = YES\n+\n #---------------------------------------------------------------------------\n # configuration options for the AutoGen Definitions output\n #---------------------------------------------------------------------------\n+\n+# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will \n+# generate an AutoGen Definitions (see autogen.sf.net) file \n+# that captures the structure of the code including all \n+# documentation. Note that this feature is still experimental \n+# and incomplete at the moment.\n+\n GENERATE_AUTOGEN_DEF   = NO\n+\n #---------------------------------------------------------------------------\n # configuration options related to the Perl module output\n #---------------------------------------------------------------------------\n+\n+# If the GENERATE_PERLMOD tag is set to YES Doxygen will \n+# generate a Perl module file that captures the structure of \n+# the code including all documentation. Note that this \n+# feature is still experimental and incomplete at the \n+# moment.\n+\n GENERATE_PERLMOD       = NO\n+\n+# If the PERLMOD_LATEX tag is set to YES Doxygen will generate \n+# the necessary Makefile rules, Perl scripts and LaTeX code to be able \n+# to generate PDF and DVI output from the Perl module output.\n+\n PERLMOD_LATEX          = NO\n+\n+# If the PERLMOD_PRETTY tag is set to YES the Perl module output will be \n+# nicely formatted so it can be parsed by a human reader.  This is useful \n+# if you want to understand what is going on.  On the other hand, if this \n+# tag is set to NO the size of the Perl module output will be much smaller \n+# and Perl will parse it just the same.\n+\n PERLMOD_PRETTY         = YES\n+\n+# The names of the make variables in the generated doxyrules.make file \n+# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. \n+# This is useful so different doxyrules.make files included by the same \n+# Makefile don't overwrite each other's variables.\n+\n PERLMOD_MAKEVAR_PREFIX = \n+\n #---------------------------------------------------------------------------\n # Configuration options related to the preprocessor   \n #---------------------------------------------------------------------------\n+\n+# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will \n+# evaluate all C-preprocessor directives found in the sources and include \n+# files.\n+\n ENABLE_PREPROCESSING   = YES\n+\n+# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro \n+# names in the source code. If set to NO (the default) only conditional \n+# compilation will be performed. Macro expansion can be done in a controlled \n+# way by setting EXPAND_ONLY_PREDEF to YES.\n+\n MACRO_EXPANSION        = YES\n+\n+# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES \n+# then the macro expansion is limited to the macros specified with the \n+# PREDEFINED and EXPAND_AS_PREDEFINED tags.\n+\n EXPAND_ONLY_PREDEF     = YES\n+\n+# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files \n+# in the INCLUDE_PATH (see below) will be search if a #include is found.\n+\n SEARCH_INCLUDES        = YES\n+\n+# The INCLUDE_PATH tag can be used to specify one or more directories that \n+# contain include files that are not input files but should be processed by \n+# the preprocessor.\n+\n INCLUDE_PATH           = \n+\n+# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard \n+# patterns (like *.h and *.hpp) to filter out the header-files in the \n+# directories. If left blank, the patterns specified with FILE_PATTERNS will \n+# be used.\n+\n INCLUDE_FILE_PATTERNS  = \n-PREDEFINED             = \\\n-\t\t\t __GTHREADS \\\n-\t\t\t \"_GLIBCXX_STD=std\" \\\n-\t                 _GLIBCXX_DEPRECATED \\\n+\n+# The PREDEFINED tag can be used to specify one or more macro names that \n+# are defined before the preprocessor is started (similar to the -D option of \n+# gcc). The argument of the tag is a list of macros of the form: name \n+# or name=definition (no spaces). If the definition and the = are \n+# omitted =1 is assumed. To prevent a macro definition from being \n+# undefined via #undef or recursively expanded use the := operator \n+# instead of the = operator.\n+\n+PREDEFINED             = __GTHREADS \\\n+                         _GLIBCXX_STD=std \\\n+                         _GLIBCXX_DEPRECATED \\\n                          _GLIBCXX_USE_WCHAR_T \\\n                          _GLIBCXX_USE_LONG_LONG \\\n                          __glibcxx_class_requires=// \\\n                          __glibcxx_class_requires2=// \\\n                          __glibcxx_class_requires3=// \\\n                          __glibcxx_class_requires4=//\n+\n+# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES\n+# then this tag can be used to specify a list of macro names that\n+# should be expanded.  The macro definition that is found in the\n+# sources will be used.  Use the PREDEFINED tag if you want to use a\n+# different macro definition.\n+\n EXPAND_AS_DEFINED      = \n+\n+# If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then \n+# doxygen's preprocessor will remove all function-like macros that are alone \n+# on a line, have an all uppercase name, and do not end with a semicolon. Such \n+# function macros are typically used for boiler-plate code, and will confuse \n+# the parser if not removed.\n+\n SKIP_FUNCTION_MACROS   = YES\n+\n #---------------------------------------------------------------------------\n # Configuration::additions related to external references   \n #---------------------------------------------------------------------------\n+\n+# The TAGFILES option can be used to specify one or more tagfiles. \n+# Optionally an initial location of the external documentation \n+# can be added for each tagfile. The format of a tag file without \n+# this location is as follows: \n+#   TAGFILES = file1 file2 ... \n+# Adding location for the tag files is done as follows: \n+#   TAGFILES = file1=loc1 \"file2 = loc2\" ... \n+# where \"loc1\" and \"loc2\" can be relative or absolute paths or \n+# URLs. If a location is present for each tag, the installdox tool \n+# does not have to be run to correct the links.\n+# Note that each tag file must have a unique name\n+# (where the name does NOT include the path)\n+# If a tag file is not located in the directory in which doxygen \n+# is run, you must also specify the path to the tagfile here.\n+\n TAGFILES               = \n+\n+# When a file name is specified after GENERATE_TAGFILE, doxygen will create \n+# a tag file that is based on the input files it reads.\n+\n GENERATE_TAGFILE       = @generate_tagfile@\n+\n+# If the ALLEXTERNALS tag is set to YES all external classes will be listed \n+# in the class index. If set to NO only the inherited external classes \n+# will be listed.\n+\n ALLEXTERNALS           = YES\n+\n+# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed \n+# in the modules index. If set to NO, only the current project's groups will \n+# be listed.\n+\n EXTERNAL_GROUPS        = YES\n+\n+# The PERL_PATH should be the absolute path and name of the perl script \n+# interpreter (i.e. the result of `which perl').\n+\n PERL_PATH              = /usr/bin/perl\n+\n #---------------------------------------------------------------------------\n # Configuration options related to the dot tool   \n #---------------------------------------------------------------------------\n+\n+# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will\n+# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes\n+# with base or super classes. Setting the tag to NO turns the diagrams\n+# off. Note that this option is superseded by the HAVE_DOT option\n+# below. This is only a fallback. It is recommended to install and use\n+# dot, since it yields more powerful graphs.\n+\n CLASS_DIAGRAMS         = YES\n+\n+# If set to YES, the inheritance and collaboration graphs will hide \n+# inheritance and usage relations if the target is undocumented \n+# or is not a class.\n+\n HIDE_UNDOC_RELATIONS   = NO\n+\n+# If you set the HAVE_DOT tag to YES then doxygen will assume the dot\n+# tool is available from the path. This tool is part of Graphviz, a\n+# graph visualization toolkit from AT&T and Lucent Bell Labs. The\n+# other options in this section have no effect if this option is set\n+# to NO (the default)\n+\n HAVE_DOT               = YES\n+\n+# If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen \n+# will generate a graph for each documented class showing the direct and \n+# indirect inheritance relations. Setting this tag to YES will force the \n+# the CLASS_DIAGRAMS tag to NO.\n+\n CLASS_GRAPH            = YES\n+\n+# If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen \n+# will generate a graph for each documented class showing the direct and \n+# indirect implementation dependencies (inheritance, containment, and \n+# class references variables) of the class with other documented classes.\n+\n COLLABORATION_GRAPH    = NO\n+\n+# If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen \n+# will generate a graph for groups, showing the direct groups dependencies\n+\n+GROUP_GRAPHS           = YES\n+\n+# If the UML_LOOK tag is set to YES doxygen will generate inheritance and \n+# collaboration diagrams in a style similar to the OMG's Unified Modeling \n+# Language.\n+\n UML_LOOK               = NO\n+\n+# If set to YES, the inheritance and collaboration graphs will show the \n+# relations between templates and their instances.\n+\n TEMPLATE_RELATIONS     = YES\n+\n+# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT \n+# tags are set to YES then doxygen will generate a graph for each documented \n+# file showing the direct and indirect include dependencies of the file with \n+# other documented files.\n+\n INCLUDE_GRAPH          = NO\n+\n+# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and \n+# HAVE_DOT tags are set to YES then doxygen will generate a graph for each \n+# documented header file showing the documented files that directly or \n+# indirectly include this file.\n+\n INCLUDED_BY_GRAPH      = NO\n+\n+# If the CALL_GRAPH and HAVE_DOT tags are set to YES then doxygen will\n+# generate a call dependency graph for every global function or class\n+# method.  Note that enabling this option will significantly increase\n+# the time of a run.  So in most cases it will be better to enable\n+# call graphs for selected functions only using the \\callgraph\n+# command.\n+\n CALL_GRAPH             = NO\n+\n+# If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen \n+# will graphical hierarchy of all classes instead of a textual one.\n+\n GRAPHICAL_HIERARCHY    = YES\n+\n+# If the DIRECTORY_GRAPH, SHOW_DIRECTORIES and HAVE_DOT tags are set to YES \n+# then doxygen will show the dependencies a directory has on other directories \n+# in a graphical way. The dependency relations are determined by the #include\n+# relations between the files in the directories.\n+\n+DIRECTORY_GRAPH        = YES\n+\n+# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images \n+# generated by dot. Possible values are png, jpg, or gif\n+# If left blank png will be used.\n+\n DOT_IMAGE_FORMAT       = png\n+\n+# The tag DOT_PATH can be used to specify the path where the dot tool can be \n+# found. If left blank, it is assumed the dot tool can be found in the path.\n+\n DOT_PATH               = \n+\n+# The DOTFILE_DIRS tag can be used to specify one or more directories that \n+# contain dot files that are included in the documentation (see the \n+# \\dotfile command).\n+\n DOTFILE_DIRS           = \n+\n+# The MAX_DOT_GRAPH_WIDTH tag can be used to set the maximum allowed width \n+# (in pixels) of the graphs generated by dot. If a graph becomes larger than \n+# this value, doxygen will try to truncate the graph, so that it fits within \n+# the specified constraint. Beware that most browsers cannot cope with very \n+# large images.\n+\n MAX_DOT_GRAPH_WIDTH    = 1024\n+\n+# The MAX_DOT_GRAPH_HEIGHT tag can be used to set the maximum allows height \n+# (in pixels) of the graphs generated by dot. If a graph becomes larger than \n+# this value, doxygen will try to truncate the graph, so that it fits within \n+# the specified constraint. Beware that most browsers cannot cope with very \n+# large images.\n+\n MAX_DOT_GRAPH_HEIGHT   = 1024\n+\n+# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of\n+# the graphs generated by dot. A depth value of 3 means that only\n+# nodes reachable from the root by following a path via at most 3\n+# edges will be shown. Nodes that lay further from the root node will\n+# be omitted. Note that setting this option to 1 or 2 may greatly\n+# reduce the computation time needed for large code bases. Also note\n+# that a graph may be further truncated if the graph's image\n+# dimensions are not sufficient to fit the graph (see\n+# MAX_DOT_GRAPH_WIDTH and MAX_DOT_GRAPH_HEIGHT). If 0 is used for the\n+# depth value (the default), the graph is not depth-constrained.\n+\n MAX_DOT_GRAPH_DEPTH    = 0\n+\n+# Set the DOT_TRANSPARENT tag to YES to generate images with a\n+# transparent background. This is disabled by default, which results\n+# in a white background.  Warning: Depending on the platform used,\n+# enabling this option may lead to badly anti-aliased labels on the\n+# edges of a graph (i.e. they become hard to read).\n+\n+DOT_TRANSPARENT        = NO\n+\n+# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output \n+# files in one run (i.e. multiple -o and -T options on the command line). This \n+# makes dot run faster, but since only newer versions of dot (>1.8.10) \n+# support this, this feature is disabled by default.\n+\n+DOT_MULTI_TARGETS      = NO\n+\n+# If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will \n+# generate a legend page explaining the meaning of the various boxes and \n+# arrows in the dot generated graphs.\n+\n GENERATE_LEGEND        = NO\n+\n+# If the DOT_CLEANUP tag is set to YES (the default) Doxygen will \n+# remove the intermediate dot files that are used to generate \n+# the various graphs.\n+\n DOT_CLEANUP            = YES\n+\n #---------------------------------------------------------------------------\n # Configuration::additions related to the search engine   \n #---------------------------------------------------------------------------\n+\n+# The SEARCHENGINE tag specifies whether or not a search engine should be \n+# used. If set to NO the values of all tags below this one will be ignored.\n+\n SEARCHENGINE           = NO"}]}