{"sha": "3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IzZjMxOGE0N2I0YTQ1YjMwZDlkMjM5ZjAzMWVjZmNmODVhYjBkMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-01-17T17:00:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-01-17T17:00:47Z"}, "message": "re PR middle-end/42248 (compat test struct-by-value-17 fails execution with -O1 -fschedule-insns)\n\n2010-01-17  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/42248\n\t* function.c (split_complex_args): Take a VEC to modify.\n\t(assign_parms_augmented_arg_list): Build a VEC instead of\n\ta chain of PARM_DECLs.\n\t(assign_parms_unsplit_complex): Take a VEC of arguments.\n\tDo not fixup unmodified parms.\n\t(assign_parms): Deal with the VEC.\n\t(gimplify_parameters): Likewise.\n\n\t* gcc.c-torture/execute/pr42248.c: New testcase.\n\nFrom-SVN: r155984", "tree": {"sha": "477137746dbd5d42ffd5c3297e597dd501ed2d46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/477137746dbd5d42ffd5c3297e597dd501ed2d46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8eacd0162e5d13cd77de8c85aa2759519a1cd5ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eacd0162e5d13cd77de8c85aa2759519a1cd5ec"}], "stats": {"total": 139, "additions": 85, "deletions": 54}, "files": [{"sha": "66b9b0f800afc60ecd75da8bf732bea75b18d3dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3", "patch": "@@ -1,3 +1,14 @@\n+2010-01-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/42248\n+\t* function.c (split_complex_args): Take a VEC to modify.\n+\t(assign_parms_augmented_arg_list): Build a VEC instead of\n+\ta chain of PARM_DECLs.\n+\t(assign_parms_unsplit_complex): Take a VEC of arguments.\n+\tDo not fixup unmodified parms.\n+\t(assign_parms): Deal with the VEC.\n+\t(gimplify_parameters): Likewise.\n+\n 2010-01-17  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-uncprop.c (uncprop_into_successor_phis): Fix PHI"}, {"sha": "6314ae01a6c7fec235a737e02278803ab4f3a1f5", "filename": "gcc/function.c", "status": "modified", "additions": 42, "deletions": 54, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3", "patch": "@@ -2082,25 +2082,13 @@ assign_parms_initialize_all (struct assign_parm_data_all *all)\n    entries of the component type.  Return a new list of substitutions are\n    needed, else the old list.  */\n \n-static tree\n-split_complex_args (tree args)\n+static void\n+split_complex_args (VEC(tree, heap) **args)\n {\n+  unsigned i;\n   tree p;\n \n-  /* Before allocating memory, check for the common case of no complex.  */\n-  for (p = args; p; p = TREE_CHAIN (p))\n-    {\n-      tree type = TREE_TYPE (p);\n-      if (TREE_CODE (type) == COMPLEX_TYPE\n-\t  && targetm.calls.split_complex_arg (type))\n-        goto found;\n-    }\n-  return args;\n-\n- found:\n-  args = copy_list (args);\n-\n-  for (p = args; p; p = TREE_CHAIN (p))\n+  for (i = 0; VEC_iterate (tree, *args, i, p); ++i)\n     {\n       tree type = TREE_TYPE (p);\n       if (TREE_CODE (type) == COMPLEX_TYPE\n@@ -2111,6 +2099,7 @@ split_complex_args (tree args)\n \t  bool addressable = TREE_ADDRESSABLE (p);\n \n \t  /* Rewrite the PARM_DECL's type with its component.  */\n+\t  p = copy_node (p);\n \t  TREE_TYPE (p) = subtype;\n \t  DECL_ARG_TYPE (p) = TREE_TYPE (DECL_ARG_TYPE (p));\n \t  DECL_MODE (p) = VOIDmode;\n@@ -2124,6 +2113,7 @@ split_complex_args (tree args)\n \t  DECL_IGNORED_P (p) = addressable;\n \t  TREE_ADDRESSABLE (p) = 0;\n \t  layout_decl (p, 0);\n+\t  VEC_replace (tree, *args, i, p);\n \n \t  /* Build a second synthetic decl.  */\n \t  decl = build_decl (EXPR_LOCATION (p),\n@@ -2132,27 +2122,27 @@ split_complex_args (tree args)\n \t  DECL_ARTIFICIAL (decl) = addressable;\n \t  DECL_IGNORED_P (decl) = addressable;\n \t  layout_decl (decl, 0);\n-\n-\t  /* Splice it in; skip the new decl.  */\n-\t  TREE_CHAIN (decl) = TREE_CHAIN (p);\n-\t  TREE_CHAIN (p) = decl;\n-\t  p = decl;\n+\t  VEC_safe_insert (tree, heap, *args, ++i, decl);\n \t}\n     }\n-\n-  return args;\n }\n \n /* A subroutine of assign_parms.  Adjust the parameter list to incorporate\n    the hidden struct return argument, and (abi willing) complex args.\n    Return the new parameter list.  */\n \n-static tree\n+static VEC(tree, heap) *\n assign_parms_augmented_arg_list (struct assign_parm_data_all *all)\n {\n   tree fndecl = current_function_decl;\n   tree fntype = TREE_TYPE (fndecl);\n-  tree fnargs = DECL_ARGUMENTS (fndecl);\n+  VEC(tree, heap) *fnargs = NULL;\n+  tree arg;\n+\n+  for (arg = DECL_ARGUMENTS (fndecl); arg; arg = TREE_CHAIN (arg))\n+    VEC_safe_push (tree, heap, fnargs, arg);\n+\n+  all->orig_fnargs = DECL_ARGUMENTS (fndecl);\n \n   /* If struct value address is treated as the first argument, make it so.  */\n   if (aggregate_value_p (DECL_RESULT (fndecl), fndecl)\n@@ -2168,16 +2158,16 @@ assign_parms_augmented_arg_list (struct assign_parm_data_all *all)\n       DECL_ARTIFICIAL (decl) = 1;\n       DECL_IGNORED_P (decl) = 1;\n \n-      TREE_CHAIN (decl) = fnargs;\n-      fnargs = decl;\n+      TREE_CHAIN (decl) = all->orig_fnargs;\n+      all->orig_fnargs = decl;\n+      VEC_safe_insert (tree, heap, fnargs, 0, decl);\n+\n       all->function_result_decl = decl;\n     }\n \n-  all->orig_fnargs = fnargs;\n-\n   /* If the target wants to split complex arguments into scalars, do so.  */\n   if (targetm.calls.split_complex_arg)\n-    fnargs = split_complex_args (fnargs);\n+    split_complex_args (&fnargs);\n \n   return fnargs;\n }\n@@ -3065,21 +3055,23 @@ assign_parm_setup_stack (struct assign_parm_data_all *all, tree parm,\n    undo the frobbing that we did in assign_parms_augmented_arg_list.  */\n \n static void\n-assign_parms_unsplit_complex (struct assign_parm_data_all *all, tree fnargs)\n+assign_parms_unsplit_complex (struct assign_parm_data_all *all,\n+\t\t\t      VEC(tree, heap) *fnargs)\n {\n   tree parm;\n   tree orig_fnargs = all->orig_fnargs;\n+  unsigned i = 0;\n \n-  for (parm = orig_fnargs; parm; parm = TREE_CHAIN (parm))\n+  for (parm = orig_fnargs; parm; parm = TREE_CHAIN (parm), ++i)\n     {\n       if (TREE_CODE (TREE_TYPE (parm)) == COMPLEX_TYPE\n \t  && targetm.calls.split_complex_arg (TREE_TYPE (parm)))\n \t{\n \t  rtx tmp, real, imag;\n \t  enum machine_mode inner = GET_MODE_INNER (DECL_MODE (parm));\n \n-\t  real = DECL_RTL (fnargs);\n-\t  imag = DECL_RTL (TREE_CHAIN (fnargs));\n+\t  real = DECL_RTL (VEC_index (tree, fnargs, i));\n+\t  imag = DECL_RTL (VEC_index (tree, fnargs, i + 1));\n \t  if (inner != GET_MODE (real))\n \t    {\n \t      real = gen_lowpart_SUBREG (inner, real);\n@@ -3112,29 +3104,17 @@ assign_parms_unsplit_complex (struct assign_parm_data_all *all, tree fnargs)\n \t    tmp = gen_rtx_CONCAT (DECL_MODE (parm), real, imag);\n \t  SET_DECL_RTL (parm, tmp);\n \n-\t  real = DECL_INCOMING_RTL (fnargs);\n-\t  imag = DECL_INCOMING_RTL (TREE_CHAIN (fnargs));\n+\t  real = DECL_INCOMING_RTL (VEC_index (tree, fnargs, i));\n+\t  imag = DECL_INCOMING_RTL (VEC_index (tree, fnargs, i + 1));\n \t  if (inner != GET_MODE (real))\n \t    {\n \t      real = gen_lowpart_SUBREG (inner, real);\n \t      imag = gen_lowpart_SUBREG (inner, imag);\n \t    }\n \t  tmp = gen_rtx_CONCAT (DECL_MODE (parm), real, imag);\n \t  set_decl_incoming_rtl (parm, tmp, false);\n-\t  fnargs = TREE_CHAIN (fnargs);\n-\t}\n-      else\n-\t{\n-\t  SET_DECL_RTL (parm, DECL_RTL (fnargs));\n-\t  set_decl_incoming_rtl (parm, DECL_INCOMING_RTL (fnargs), false);\n-\n-\t  /* Set MEM_EXPR to the original decl, i.e. to PARM,\n-\t     instead of the copy of decl, i.e. FNARGS.  */\n-\t  if (DECL_INCOMING_RTL (parm) && MEM_P (DECL_INCOMING_RTL (parm)))\n-\t    set_mem_expr (DECL_INCOMING_RTL (parm), parm);\n+\t  i++;\n \t}\n-\n-      fnargs = TREE_CHAIN (fnargs);\n     }\n }\n \n@@ -3145,15 +3125,17 @@ static void\n assign_parms (tree fndecl)\n {\n   struct assign_parm_data_all all;\n-  tree fnargs, parm;\n+  tree parm;\n+  VEC(tree, heap) *fnargs;\n+  unsigned i;\n \n   crtl->args.internal_arg_pointer\n     = targetm.calls.internal_arg_pointer ();\n \n   assign_parms_initialize_all (&all);\n   fnargs = assign_parms_augmented_arg_list (&all);\n \n-  for (parm = fnargs; parm; parm = TREE_CHAIN (parm))\n+  for (i = 0; VEC_iterate (tree, fnargs, i, parm); ++i)\n     {\n       struct assign_parm_data_one data;\n \n@@ -3216,9 +3198,11 @@ assign_parms (tree fndecl)\n \tassign_parm_setup_stack (&all, parm, &data);\n     }\n \n-  if (targetm.calls.split_complex_arg && fnargs != all.orig_fnargs)\n+  if (targetm.calls.split_complex_arg)\n     assign_parms_unsplit_complex (&all, fnargs);\n \n+  VEC_free (tree, heap, fnargs);\n+\n   /* Output all parameter conversion instructions (possibly including calls)\n      now that all parameters have been copied out of hard registers.  */\n   emit_insn (all.first_conversion_insn);\n@@ -3370,13 +3354,15 @@ gimple_seq\n gimplify_parameters (void)\n {\n   struct assign_parm_data_all all;\n-  tree fnargs, parm;\n+  tree parm;\n   gimple_seq stmts = NULL;\n+  VEC(tree, heap) *fnargs;\n+  unsigned i;\n \n   assign_parms_initialize_all (&all);\n   fnargs = assign_parms_augmented_arg_list (&all);\n \n-  for (parm = fnargs; parm; parm = TREE_CHAIN (parm))\n+  for (i = 0; VEC_iterate (tree, fnargs, i, parm); ++i)\n     {\n       struct assign_parm_data_one data;\n \n@@ -3454,6 +3440,8 @@ gimplify_parameters (void)\n \t}\n     }\n \n+  VEC_free (tree, heap, fnargs);\n+\n   return stmts;\n }\n \f"}, {"sha": "f494a09d62b873089ee05097a92779d51a8137ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3", "patch": "@@ -1,3 +1,8 @@\n+2010-01-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/42248\n+\t* gcc.c-torture/execute/pr42248.c: New testcase.\n+\n 2010-01-17  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/42773"}, {"sha": "bbb91b343b123628a9474227e06c9d200cd01074", "filename": "gcc/testsuite/gcc.c-torture/execute/pr42248.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr42248.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr42248.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr42248.c?ref=3b3f318a47b4a45b30d9d239f031ecfcf85ab0d3", "patch": "@@ -0,0 +1,27 @@\n+typedef struct {\n+  _Complex double a;\n+  _Complex double b;\n+} Scf10;\n+\n+Scf10 g1s;\n+\n+void\n+check (Scf10 x, _Complex double y)\n+{\n+  if (x.a != y) __builtin_abort ();\n+}\n+\n+void\n+init (Scf10 *p, _Complex double y)\n+{\n+  p->a = y;\n+}\n+\n+int\n+main ()\n+{\n+  init (&g1s, (_Complex double)1);\n+  check (g1s, (_Complex double)1);\n+\n+  return 0;\n+}"}]}