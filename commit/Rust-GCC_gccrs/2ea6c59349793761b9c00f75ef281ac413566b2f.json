{"sha": "2ea6c59349793761b9c00f75ef281ac413566b2f", "node_id": "C_kwDOANBUbNoAKDJlYTZjNTkzNDk3OTM3NjFiOWMwMGY3NWVmMjgxYWM0MTM1NjZiMmY", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-06-28T22:59:19Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-07-01T15:09:38Z"}, "message": "c++: warn about using keywords as identifiers [PR106111]\n\nIn C++03, -Wc++11-compat should warn about\n\n  int constexpr;\n\nsince 'constexpr' is a keyword in C++11.  Jonathan reports that\nwe don't emit a similar warning for 'alignas' or 'alignof', and,\nas I found out, 'thread_local'.\n\nSimilarly, we don't warn for most C++20 keywords.  That happens\nbecause RID_LAST_CXX20 hasn't been updated in a while.\n\n\tPR c++/106111\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.h (enum rid): Update RID_LAST_CXX20.\n\ngcc/cp/ChangeLog:\n\n\t* parser.cc (cp_lexer_get_preprocessor_token): Also warn about\n\tRID_ALIGNOF, RID_ALIGNAS, RID_THREAD.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/keywords1.C: New test.\n\t* g++.dg/cpp2a/keywords1.C: New test.", "tree": {"sha": "670742470e7c107fe1eb53eb3d520ca06cd1a389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/670742470e7c107fe1eb53eb3d520ca06cd1a389"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ea6c59349793761b9c00f75ef281ac413566b2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea6c59349793761b9c00f75ef281ac413566b2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ea6c59349793761b9c00f75ef281ac413566b2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea6c59349793761b9c00f75ef281ac413566b2f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9234cdca6ee88badfc00297e72f13dac4e540c79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9234cdca6ee88badfc00297e72f13dac4e540c79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9234cdca6ee88badfc00297e72f13dac4e540c79"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "a1e6a55158d8660072efdae715e4c6a507bb3972", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea6c59349793761b9c00f75ef281ac413566b2f/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea6c59349793761b9c00f75ef281ac413566b2f/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=2ea6c59349793761b9c00f75ef281ac413566b2f", "patch": "@@ -271,7 +271,7 @@ enum rid\n   RID_FIRST_CXX11 = RID_CONSTEXPR,\n   RID_LAST_CXX11 = RID_STATIC_ASSERT,\n   RID_FIRST_CXX20 = RID_CONSTINIT,\n-  RID_LAST_CXX20 = RID_CONSTINIT,\n+  RID_LAST_CXX20 = RID_CO_RETURN,\n   RID_FIRST_AT = RID_AT_ENCODE,\n   RID_LAST_AT = RID_AT_IMPLEMENTATION,\n   RID_FIRST_PQ = RID_IN,"}, {"sha": "c5d1f9d112dc197ded0c8e27c5f83dde7b1393e8", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea6c59349793761b9c00f75ef281ac413566b2f/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea6c59349793761b9c00f75ef281ac413566b2f/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=2ea6c59349793761b9c00f75ef281ac413566b2f", "patch": "@@ -890,10 +890,14 @@ cp_lexer_get_preprocessor_token (unsigned flags, cp_token *token)\n       else\n \t{\n           if (warn_cxx11_compat\n-              && C_RID_CODE (token->u.value) >= RID_FIRST_CXX11\n-              && C_RID_CODE (token->u.value) <= RID_LAST_CXX11)\n+\t      && ((C_RID_CODE (token->u.value) >= RID_FIRST_CXX11\n+\t\t   && C_RID_CODE (token->u.value) <= RID_LAST_CXX11)\n+\t\t  /* These are outside the CXX11 range.  */\n+\t\t  || C_RID_CODE (token->u.value) == RID_ALIGNOF\n+\t\t  || C_RID_CODE (token->u.value) == RID_ALIGNAS\n+\t\t  || C_RID_CODE (token->u.value)== RID_THREAD))\n             {\n-              /* Warn about the C++0x keyword (but still treat it as\n+\t      /* Warn about the C++11 keyword (but still treat it as\n                  an identifier).  */\n \t      warning_at (token->location, OPT_Wc__11_compat,\n \t\t\t  \"identifier %qE is a keyword in C++11\","}, {"sha": "2b2ab6404eabb1002520b52ec6d2488c948962c4", "filename": "gcc/testsuite/g++.dg/cpp0x/keywords1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea6c59349793761b9c00f75ef281ac413566b2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fkeywords1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea6c59349793761b9c00f75ef281ac413566b2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fkeywords1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fkeywords1.C?ref=2ea6c59349793761b9c00f75ef281ac413566b2f", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/106111\n+// { dg-do compile { target c++98_only } }\n+// { dg-options \"-Wc++11-compat\" }\n+\n+int alignof; // { dg-warning \"is a keyword in C\\\\\\+\\\\\\+11\" }\n+int alignas; // { dg-warning \"is a keyword in C\\\\\\+\\\\\\+11\" }\n+int constexpr; // { dg-warning \"is a keyword in C\\\\\\+\\\\\\+11\" }\n+int decltype; // { dg-warning \"is a keyword in C\\\\\\+\\\\\\+11\" }\n+int noexcept; // { dg-warning \"is a keyword in C\\\\\\+\\\\\\+11\" }\n+int nullptr; // { dg-warning \"is a keyword in C\\\\\\+\\\\\\+11\" }\n+int static_assert; // { dg-warning \"is a keyword in C\\\\\\+\\\\\\+11\" }\n+int thread_local; // { dg-warning \"is a keyword in C\\\\\\+\\\\\\+11\" }\n+int _Alignas;\n+int _Alignof;\n+int _Thread_local;"}, {"sha": "7f4dba2d3b7f72545cd17556a41ff4678d9a313c", "filename": "gcc/testsuite/g++.dg/cpp2a/keywords1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea6c59349793761b9c00f75ef281ac413566b2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fkeywords1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea6c59349793761b9c00f75ef281ac413566b2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fkeywords1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fkeywords1.C?ref=2ea6c59349793761b9c00f75ef281ac413566b2f", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/106111\n+// { dg-do compile { target c++17_down } }\n+// { dg-options \"-Wc++20-compat -Wc++11-compat -Wc++14-compat -Wc++17-compat\" }\n+\n+int constinit; // { dg-warning \"is a keyword in C\\\\\\+\\\\\\+20\" }\n+int consteval; // { dg-warning \"is a keyword in C\\\\\\+\\\\\\+20\" }\n+int requires; // { dg-warning \"is a keyword in C\\\\\\+\\\\\\+20\" }\n+int concept; // { dg-warning \"is a keyword in C\\\\\\+\\\\\\+20\" }\n+int co_await; // { dg-warning \"is a keyword in C\\\\\\+\\\\\\+20\" }\n+int co_yield; // { dg-warning \"is a keyword in C\\\\\\+\\\\\\+20\" }\n+int co_return; // { dg-warning \"is a keyword in C\\\\\\+\\\\\\+20\" }\n+int char8_t; // { dg-warning \"is a keyword in C\\\\\\+\\\\\\+20\" }"}]}