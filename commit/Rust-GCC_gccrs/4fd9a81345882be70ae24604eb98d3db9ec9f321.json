{"sha": "4fd9a81345882be70ae24604eb98d3db9ec9f321", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZkOWE4MTM0NTg4MmJlNzBhZTI0NjA0ZWI5OGQzZGI5ZWM5ZjMyMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2005-09-13T08:07:15Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-09-13T08:07:15Z"}, "message": "re PR fortran/18899 ([gfortran] ubound wrongly calculated for passed array)\n\n\tPR fortran/18899\n\t* trans-intrinsic.c (gfc_conv_intrinsic_bound): Move initialization\n\tof argse.  Remove now-redundant want_pointer assignment.\n\t* trans-array.c (gfc_conv_expr_descriptor): When not assigning to\n\ta pointer, keep the original bounds of a full array reference.\n\nFrom-SVN: r104219", "tree": {"sha": "4ffb56101370a9ad4a80a7d08f8ff17f9bffa6b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ffb56101370a9ad4a80a7d08f8ff17f9bffa6b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fd9a81345882be70ae24604eb98d3db9ec9f321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd9a81345882be70ae24604eb98d3db9ec9f321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fd9a81345882be70ae24604eb98d3db9ec9f321", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd9a81345882be70ae24604eb98d3db9ec9f321/comments", "author": null, "committer": null, "parents": [{"sha": "d7f0e25cd0e994e9f95e7709e0d6c6df587463a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f0e25cd0e994e9f95e7709e0d6c6df587463a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f0e25cd0e994e9f95e7709e0d6c6df587463a6"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "9ccd866fdfd7d8e86acd08dcbc641752ffaa86c1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd9a81345882be70ae24604eb98d3db9ec9f321/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd9a81345882be70ae24604eb98d3db9ec9f321/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4fd9a81345882be70ae24604eb98d3db9ec9f321", "patch": "@@ -1,3 +1,11 @@\n+2005-09-13  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR fortran/18899\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_bound): Move initialization\n+\tof argse.  Remove now-redundant want_pointer assignment.\n+\t* trans-array.c (gfc_conv_expr_descriptor): When not assigning to\n+\ta pointer, keep the original bounds of a full array reference.\n+\n 2005-09-13  Richard Sandiford  <richard@codesourcery.com>\n \n \tPR target/19269"}, {"sha": "a72a19dcdcec1329bae1596d04bdb49a350de154", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd9a81345882be70ae24604eb98d3db9ec9f321/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd9a81345882be70ae24604eb98d3db9ec9f321/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=4fd9a81345882be70ae24604eb98d3db9ec9f321", "patch": "@@ -3981,9 +3981,13 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \t  /* Set the new lower bound.  */\n \t  from = loop.from[dim];\n \t  to = loop.to[dim];\n-          if (!integer_onep (from))\n+\n+\t  /* If we have an array section or are assigning to a pointer,\n+\t     make sure that the lower bound is 1.  References to the full\n+\t     array should otherwise keep the original bounds.  */\n+\t  if ((info->ref->u.ar.type != AR_FULL || se->direct_byref)\n+\t      && !integer_onep (from))\n \t    {\n-\t      /* Make sure the new section starts at 1.  */\n \t      tmp = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n \t\t\t\t gfc_index_one_node, from);\n \t      to = fold_build2 (PLUS_EXPR, gfc_array_index_type, to, tmp);"}, {"sha": "d498717d795f1e3e76b678194a6302d31d44f73f", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd9a81345882be70ae24604eb98d3db9ec9f321/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd9a81345882be70ae24604eb98d3db9ec9f321/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=4fd9a81345882be70ae24604eb98d3db9ec9f321", "patch": "@@ -639,7 +639,6 @@ gfc_conv_intrinsic_bound (gfc_se * se, gfc_expr * expr, int upper)\n   gfc_ss *ss;\n   int i;\n \n-  gfc_init_se (&argse, NULL);\n   arg = expr->value.function.actual;\n   arg2 = arg->next;\n \n@@ -671,7 +670,7 @@ gfc_conv_intrinsic_bound (gfc_se * se, gfc_expr * expr, int upper)\n   /* Get a descriptor for the first parameter.  */\n   ss = gfc_walk_expr (arg->expr);\n   gcc_assert (ss != gfc_ss_terminator);\n-  argse.want_pointer = 0;\n+  gfc_init_se (&argse, NULL);\n   gfc_conv_expr_descriptor (&argse, arg->expr, ss);\n   gfc_add_block_to_block (&se->pre, &argse.pre);\n   gfc_add_block_to_block (&se->post, &argse.post);"}, {"sha": "641f1f2790e910d904555642954616747a8444f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd9a81345882be70ae24604eb98d3db9ec9f321/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd9a81345882be70ae24604eb98d3db9ec9f321/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4fd9a81345882be70ae24604eb98d3db9ec9f321", "patch": "@@ -1,3 +1,8 @@\n+2005-09-13  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR fortran/18899\n+\t* fortran.dg/shape_2.f90: New test.\n+\n 2005-09-13  Richard Sandiford  <richard@codesourcery.com>\n \n \tPR target/19269"}, {"sha": "a4bde98ba5f7fc331fae86d1647df4242dceeee6", "filename": "gcc/testsuite/gfortran.dg/shape_2.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd9a81345882be70ae24604eb98d3db9ec9f321/gcc%2Ftestsuite%2Fgfortran.dg%2Fshape_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd9a81345882be70ae24604eb98d3db9ec9f321/gcc%2Ftestsuite%2Fgfortran.dg%2Fshape_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fshape_2.f90?ref=4fd9a81345882be70ae24604eb98d3db9ec9f321", "patch": "@@ -0,0 +1,30 @@\n+! Check that lbound() and ubound() work correctly for assumed shapes.\n+! { dg-do run }\n+program main\n+  integer, dimension (40, 80) :: a = 1\n+  call test (a)\n+contains\n+  subroutine test (b)\n+    integer, dimension (11:, -8:), target :: b\n+    integer, dimension (:, :), pointer :: ptr\n+\n+    if (lbound (b, 1) .ne. 11) call abort\n+    if (ubound (b, 1) .ne. 50) call abort\n+    if (lbound (b, 2) .ne. -8) call abort\n+    if (ubound (b, 2) .ne. 71) call abort\n+\n+    if (lbound (b (:, :), 1) .ne. 1) call abort\n+    if (ubound (b (:, :), 1) .ne. 40) call abort\n+    if (lbound (b (:, :), 2) .ne. 1) call abort\n+    if (ubound (b (:, :), 2) .ne. 80) call abort\n+\n+    if (lbound (b (20:30:3, 40), 1) .ne. 1) call abort\n+    if (ubound (b (20:30:3, 40), 1) .ne. 4) call abort\n+\n+    ptr => b\n+    if (lbound (ptr, 1) .ne. 1) call abort\n+    if (ubound (ptr, 1) .ne. 40) call abort\n+    if (lbound (ptr, 2) .ne. 1) call abort\n+    if (ubound (ptr, 2) .ne. 80) call abort\n+  end subroutine test\n+end program main"}]}