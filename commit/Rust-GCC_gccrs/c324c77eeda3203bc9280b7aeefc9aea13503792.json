{"sha": "c324c77eeda3203bc9280b7aeefc9aea13503792", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMyNGM3N2VlZGEzMjAzYmM5MjgwYjdhZWVmYzlhZWExMzUwMzc5Mg==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-03-19T22:17:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-12T08:29:12Z"}, "message": "[Ada] Put_Image attribute\n\n2020-06-12  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* debug.adb: Remove usage of -gnatd_z.\n\t* exp_attr.adb, exp_put_image.ads, exp_put_image.adb: Clean up\n\tthe enable/disable code. If Put_Image is disabled for a type,\n\tsystematically call the \"unknown\" version.  Improve comments.\n\tConsolidate workarounds.  Remove usage of -gnatd_z.", "tree": {"sha": "c52d8c5919562e6e980eaa42091b4a288d5d737a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c52d8c5919562e6e980eaa42091b4a288d5d737a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c324c77eeda3203bc9280b7aeefc9aea13503792", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c324c77eeda3203bc9280b7aeefc9aea13503792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c324c77eeda3203bc9280b7aeefc9aea13503792", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c324c77eeda3203bc9280b7aeefc9aea13503792/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53c5cd3393356b4541d5ebb958a412ec56d56328", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c5cd3393356b4541d5ebb958a412ec56d56328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c5cd3393356b4541d5ebb958a412ec56d56328"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "1d614eb70c5bb3d0609cc377f75f72d8db5ac919", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c324c77eeda3203bc9280b7aeefc9aea13503792/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c324c77eeda3203bc9280b7aeefc9aea13503792/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=c324c77eeda3203bc9280b7aeefc9aea13503792", "patch": "@@ -170,7 +170,7 @@ package body Debug is\n    --  d_w\n    --  d_x\n    --  d_y\n-   --  d_z  Enable Put_Image\n+   --  d_z\n \n    --  d_A  Stop generation of ALI file\n    --  d_B\n@@ -993,9 +993,6 @@ package body Debug is\n    --       a call to routine Ada.Synchronous_Task_Control.Suspend_Until_True\n    --       or Ada.Synchronous_Barriers.Wait_For_Release.\n \n-   --  d_z  The Put_Image attribute is a work in progress, and is disabled by\n-   --       default. This enables it.\n-\n    --  d_A  Do not generate ALI files by setting Opt.Disable_ALI_File.\n \n    --  d_F  The compiler encodes the full path from an invocation construct to"}, {"sha": "fc7aefadf28801fa08e952a087622896379ca673", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c324c77eeda3203bc9280b7aeefc9aea13503792/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c324c77eeda3203bc9280b7aeefc9aea13503792/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=c324c77eeda3203bc9280b7aeefc9aea13503792", "patch": "@@ -5463,7 +5463,9 @@ package body Exp_Attr is\n             return;\n          end if;\n \n-         --  If there is a TSS for Put_Image, just call it\n+         --  If there is a TSS for Put_Image, just call it. This is true for\n+         --  tagged types (if enabled) and if there is a user-specified\n+         --  Put_Image.\n \n          Pname := TSS (U_Type, TSS_Put_Image);\n          if No (Pname) then\n@@ -5478,10 +5480,17 @@ package body Exp_Attr is\n          end if;\n \n          if No (Pname) then\n+            --  If Put_Image is disabled, call the \"unknown\" version\n+\n+            if not Enable_Put_Image (U_Type) then\n+               Rewrite (N, Build_Unknown_Put_Image_Call (N));\n+               Analyze (N);\n+               return;\n+\n             --  For elementary types, we call the routine in System.Put_Images\n             --  directly.\n \n-            if Is_Elementary_Type (U_Type) then\n+            elsif Is_Elementary_Type (U_Type) then\n                Rewrite (N, Build_Elementary_Put_Image_Call (N));\n                Analyze (N);\n                return;\n@@ -5535,7 +5544,7 @@ package body Exp_Attr is\n                Analyze (N);\n                return;\n \n-            --  All other record type cases, including protected records\n+            --  All other record type cases\n \n             else\n                pragma Assert (Is_Record_Type (U_Type));"}, {"sha": "c8119c73d422c97867b5424a109f330d0030c0ca", "filename": "gcc/ada/exp_put_image.adb", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c324c77eeda3203bc9280b7aeefc9aea13503792/gcc%2Fada%2Fexp_put_image.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c324c77eeda3203bc9280b7aeefc9aea13503792/gcc%2Fada%2Fexp_put_image.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.adb?ref=c324c77eeda3203bc9280b7aeefc9aea13503792", "patch": "@@ -24,7 +24,6 @@\n ------------------------------------------------------------------------------\n \n with Atree;    use Atree;\n-with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util;\n@@ -341,9 +340,6 @@ package body Exp_Put_Image is\n          --\n          --  Note that this is putting a leading space for reals.\n \n-         --  ???Work around the fact that Put_Image doesn't work for private\n-         --  types whose full type is real.\n-\n          if Is_Real_Type (U_Type) then\n             return Build_Unknown_Put_Image_Call (N);\n          end if;\n@@ -620,9 +616,7 @@ package body Exp_Put_Image is\n       procedure Append_Component_Attr (Clist : List_Id; C : Entity_Id) is\n          Component_Typ : constant Entity_Id := Put_Image_Base_Type (Etype (C));\n       begin\n-         if Ekind (C) /= E_Void\n-           and then Enable_Put_Image (Component_Typ)\n-         then\n+         if Ekind (C) /= E_Void then\n             Append_To (Clist,\n               Make_Attribute_Reference (Loc,\n                 Prefix         => New_Occurrence_Of (Component_Typ, Loc),\n@@ -819,12 +813,8 @@ package body Exp_Put_Image is\n    -- Enable_Put_Image --\n    ----------------------\n \n-   function Enable_Put_Image (T : Entity_Id) return Boolean is\n+   function Enable_Put_Image (Typ : Entity_Id) return Boolean is\n    begin\n-      if not Debug_Flag_Underscore_Z then -- ????True to disable for all types\n-         return False;\n-      end if;\n-\n       --  There's a bit of a chicken&egg problem. The compiler is likely to\n       --  have trouble if we refer to the Put_Image of Sink itself, because\n       --  Sink is part of the parameter profile:\n@@ -840,12 +830,20 @@ package body Exp_Put_Image is\n       --  scalar types are expanded inline. We certainly want to be able to use\n       --  Integer'Put_Image, for example.\n \n-      --  ???Work around a bug: Put_Image does not work for Remote_Types.\n-      --  We check the containing package, rather than the type itself, because\n-      --  we want to include types in the private part of a Remote_Types\n-      --  package.\n+      --  ???Temporarily disable to work around bugs:\n+      --\n+      --  Put_Image does not work for Remote_Types. We check the containing\n+      --  package, rather than the type itself, because we want to include\n+      --  types in the private part of a Remote_Types package.\n+      --\n+      --  Put_Image on tagged types triggers some bugs.\n+      --\n+      --  Put_Image doesn't work for private types whose full type is real.\n \n-      if Is_Remote_Types (Scope (T)) then\n+      if Is_Remote_Types (Scope (Typ))\n+        or else Is_Tagged_Type (Typ)\n+        or else Is_Real_Type (Typ)\n+      then\n          return False;\n       end if;\n \n@@ -856,17 +854,17 @@ package body Exp_Put_Image is\n       --  predefined types.\n \n       declare\n-         Parent_Scope : constant Entity_Id := Scope (Scope (T));\n+         Parent_Scope : constant Entity_Id := Scope (Scope (Typ));\n       begin\n          if Present (Parent_Scope)\n            and then Is_RTU (Parent_Scope, Ada_Strings)\n-           and then Chars (Scope (T)) = Name_Find (\"text_output\")\n+           and then Chars (Scope (Typ)) = Name_Find (\"text_output\")\n          then\n             return False;\n          end if;\n       end;\n \n-      return Is_Scalar_Type (T) or else not In_Predefined_Unit (T);\n+      return Is_Scalar_Type (Typ) or else not In_Predefined_Unit (Typ);\n    end Enable_Put_Image;\n \n    ---------------------------------"}, {"sha": "82c1c59a78205a8d8f717a28c832c3ed3614af16", "filename": "gcc/ada/exp_put_image.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c324c77eeda3203bc9280b7aeefc9aea13503792/gcc%2Fada%2Fexp_put_image.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c324c77eeda3203bc9280b7aeefc9aea13503792/gcc%2Fada%2Fexp_put_image.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.ads?ref=c324c77eeda3203bc9280b7aeefc9aea13503792", "patch": "@@ -38,8 +38,9 @@ package Exp_Put_Image is\n    --  are calls to T'Put_Image in different units, there will be duplicates;\n    --  each unit will get a copy of the T'Put_Image procedure.\n \n-   function Enable_Put_Image (T : Entity_Id) return Boolean;\n-   --  True if Put_Image should be enabled for type T\n+   function Enable_Put_Image (Typ : Entity_Id) return Boolean;\n+   --  True if the predefined Put_Image should be enabled for type T. Put_Image\n+   --  is always enabled if there is a user-specified one.\n \n    function Build_Put_Image_Profile\n      (Loc : Source_Ptr; Typ : Entity_Id) return List_Id;"}]}