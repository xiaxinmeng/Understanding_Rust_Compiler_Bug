{"sha": "d5d5fa1824bb3ea4a27be6436521fdb10262ce07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVkNWZhMTgyNGJiM2VhNGEyN2JlNjQzNjUyMWZkYjEwMjYyY2UwNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-28T22:50:43Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-28T22:50:43Z"}, "message": "(objc_thread_id): Use pthread_getunique_np to obtain a thread ID value.\n\n(objc_mutex_allocate): Cast mutex->owner to _objc_thread_t.\n(objc_mutex_deallocate): Likewise.\n(objc_mutex_unlock): Likewise.\n(objc_mutex_trylock):  Declare thread_id as _objc_thread_t.\n(objc_mutex_lock): Likewise.\n(objc_mutex_unlock): Likewise.\n\nFrom-SVN: r12375", "tree": {"sha": "d544fa5185c2cdcf3608189e50b11013ed61b553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d544fa5185c2cdcf3608189e50b11013ed61b553"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5d5fa1824bb3ea4a27be6436521fdb10262ce07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d5fa1824bb3ea4a27be6436521fdb10262ce07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d5fa1824bb3ea4a27be6436521fdb10262ce07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d5fa1824bb3ea4a27be6436521fdb10262ce07/comments", "author": null, "committer": null, "parents": [{"sha": "b05a8d8a6bdcd94a8c151792f2e8fecb4aa83ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b05a8d8a6bdcd94a8c151792f2e8fecb4aa83ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b05a8d8a6bdcd94a8c151792f2e8fecb4aa83ccf"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "88fcba71ba1dcd28c938db32c7a659cc9bfeff3d", "filename": "gcc/objc/thr-decosf1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d5fa1824bb3ea4a27be6436521fdb10262ce07/gcc%2Fobjc%2Fthr-decosf1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d5fa1824bb3ea4a27be6436521fdb10262ce07/gcc%2Fobjc%2Fthr-decosf1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr-decosf1.c?ref=d5d5fa1824bb3ea4a27be6436521fdb10262ce07", "patch": "@@ -171,7 +171,7 @@ objc_thread_id(void)\n {\n   pthread_t self = pthread_self();\n \n-  return (_objc_thread_t) self;\t/* Return thread handle.    */\n+  return (_objc_thread_t) pthread_getuniqe_np (&self);\n }\n \n /********\n@@ -219,7 +219,7 @@ objc_mutex_allocate(void)\n         free(mutex);                            /* Yes, free local memory.  */\n         return NULL;                            /* Abort.                   */\n     }\n-    mutex->owner = -1;                          /* No owner.                */\n+    mutex->owner = (_objc_thread_t) -1;         /* No owner.                */\n     mutex->depth = 0;                           /* No locks.                */\n     return mutex;                               /* Return mutex handle.     */\n }\n@@ -256,7 +256,7 @@ objc_mutex_deallocate(_objc_mutex_t mutex)\n int\n objc_mutex_lock(_objc_mutex_t mutex)\n {\n-    int         thread_id;                      /* Cache our thread id.     */\n+    _objc_thread_t thread_id;                   /* Cache our thread id.     */\n \n     if (!mutex)                                 /* Is argument bad?         */\n         return -1;                              /* Yes, abort.              */\n@@ -279,7 +279,7 @@ objc_mutex_lock(_objc_mutex_t mutex)\n int\n objc_mutex_trylock(_objc_mutex_t mutex)\n {\n-    int         thread_id;                      /* Cache our thread id.     */\n+    _objc_thread_t thread_id;                   /* Cache our thread id.     */\n \n     if (!mutex)                                 /* Is argument bad?         */\n         return -1;                              /* Yes, abort.              */\n@@ -304,7 +304,7 @@ objc_mutex_trylock(_objc_mutex_t mutex)\n int\n objc_mutex_unlock(_objc_mutex_t mutex)\n {\n-    int         thread_id;                      /* Cache our thread id.     */\n+    _objc_thread_t thread_id;                   /* Cache our thread id.     */\n     \n     if (!mutex)                                 /* Is argument bad?         */\n         return -1;                              /* Yes, abort.              */\n@@ -314,7 +314,7 @@ objc_mutex_unlock(_objc_mutex_t mutex)\n     if (mutex->depth > 1)                       /* Released last lock?      */\n         return --mutex->depth;                  /* No, Decrement depth, end.*/\n     mutex->depth = 0;                           /* Yes, reset depth to 0.   */\n-    mutex->owner = -1;                          /* Set owner to \"no thread\".*/\n+    mutex->owner = (_objc_thread_t) -1;         /* Set owner to \"no thread\".*/\n     \n     if (pthread_mutex_unlock(&mutex->lock) != 0)  /* Unlock system mutex.   */\n         return -1;                              /* Failed, abort.           */"}]}