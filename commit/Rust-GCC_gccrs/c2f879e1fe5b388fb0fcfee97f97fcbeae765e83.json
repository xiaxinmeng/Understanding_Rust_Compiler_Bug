{"sha": "c2f879e1fe5b388fb0fcfee97f97fcbeae765e83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJmODc5ZTFmZTViMzg4ZmIwZmNmZWU5N2Y5N2ZjYmVhZTc2NWU4Mw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-10T19:30:21Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-10T19:30:21Z"}, "message": "compiler: make escape analysis work with imported inlineable functions\n    \n    The escape analysis was written before we import inlineable\n    function bodies, and in some places it skipped functions that are\n    not in the local package. Now that there are imported function\n    bodies, make the escape analysis work with them.\n    \n    Note that it is necessary for the escape analysis to run on\n    imported function bodies, even if they are already tagged. The\n    tags only have the information of the parameters (receiver,\n    results), but not the internal nodes, e.g. local variables. We\n    still need to do the analysis to get all the information. (In the\n    future maybe we could export/import escape info for internal\n    nodes also, then we don't need to redo the analysis.)\n    \n    Also add assertions to ensure that if we analyze the same\n    function in multiple places, they'd better agree with each other.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/181537\n\nFrom-SVN: r272124", "tree": {"sha": "b0d0979b7a397c489b1c465432ff8e85c11e67f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0d0979b7a397c489b1c465432ff8e85c11e67f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2f879e1fe5b388fb0fcfee97f97fcbeae765e83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2f879e1fe5b388fb0fcfee97f97fcbeae765e83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2f879e1fe5b388fb0fcfee97f97fcbeae765e83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2f879e1fe5b388fb0fcfee97f97fcbeae765e83/comments", "author": null, "committer": null, "parents": [{"sha": "f359611b363490b48a7ce0fd021f7e47d8816eb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f359611b363490b48a7ce0fd021f7e47d8816eb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f359611b363490b48a7ce0fd021f7e47d8816eb0"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "eae27560ffcbf389ca8311e1b4c0ebec9800db99", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f879e1fe5b388fb0fcfee97f97fcbeae765e83/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f879e1fe5b388fb0fcfee97f97fcbeae765e83/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=c2f879e1fe5b388fb0fcfee97f97fcbeae765e83", "patch": "@@ -1,4 +1,4 @@\n-b79e9e79fddc9040ab58c7c518eb08454f308def\n+a32739aadf0c7a65fcd5d5b6d0a0d206bff24a4f\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a1558340da4d0cfa60cb98d9aa4db4a235ad6707", "filename": "gcc/go/gofrontend/escape.cc", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f879e1fe5b388fb0fcfee97f97fcbeae765e83/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f879e1fe5b388fb0fcfee97f97fcbeae765e83/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.cc?ref=c2f879e1fe5b388fb0fcfee97f97fcbeae765e83", "patch": "@@ -2773,15 +2773,8 @@ Gogo::assign_connectivity(Escape_context* context, Named_object* fn)\n       if (!p->type()->has_pointer())\n         continue;\n \n-      // External function?  Parameters must escape unless //go:noescape is set.\n-      // TODO(cmang): Implement //go:noescape directive.\n-      if (fn->package() != NULL)\n-\tparam_node->set_encoding(Node::ESCAPE_HEAP);\n-      else\n-        {\n-          param_node->set_encoding(Node::ESCAPE_NONE);\n-          context->track(param_node);\n-        }\n+      param_node->set_encoding(Node::ESCAPE_NONE);\n+      context->track(param_node);\n     }\n \n   Escape_analysis_loop el;\n@@ -3319,9 +3312,6 @@ Escape_analysis_tag::tag(Named_object* fn)\n {\n   // External functions are assumed unsafe\n   // unless //go:noescape is given before the declaration.\n-  if (fn->package() != NULL)\n-    return;\n-\n   if (fn->is_function_declaration())\n     {\n       Function_declaration* fdcl = fn->func_declaration_value();"}, {"sha": "2b51df5812be00d2c398e9e7166a8b00c5e97957", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f879e1fe5b388fb0fcfee97f97fcbeae765e83/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f879e1fe5b388fb0fcfee97f97fcbeae765e83/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=c2f879e1fe5b388fb0fcfee97f97fcbeae765e83", "patch": "@@ -1494,7 +1494,12 @@ class Typed_identifier\n   // Set the escape note.\n   void\n   set_note(const std::string& note)\n-  { this->note_ = new std::string(note); }\n+  {\n+    if (this->note_ != NULL)\n+      go_assert(*this->note_ == note);\n+    else\n+      this->note_ = new std::string(note);\n+  }\n \n  private:\n   // Identifier name."}]}