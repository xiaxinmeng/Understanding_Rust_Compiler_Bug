{"sha": "5357ab75dedef403b0eebf9277d61d1cbeb5898f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM1N2FiNzVkZWRlZjQwM2IwZWViZjkyNzdkNjFkMWNiZWI1ODk4Zg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-04T17:46:53Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-04T17:46:53Z"}, "message": "c++: tsubst_function_decl and excess arg levels [PR100102]\n\nHere, when instantiating the dependent alias template\nduration::__is_harmonic with args={{T,U},{int}}, we find ourselves\nsubstituting the function decl _S_gcd.  Since we have more arg levels\nthan _S_gcd has parm levels, an old special case in tsubst_function_decl\ncauses us to unwantedly reduce args to its innermost level, yielding\nargs={int}, which leads to a nonsensical substitution into the decl\ncontext and eventually a crash.\n\nThe comment for this special case refers to three examples for which we\nought to see more arg levels than parm levels here, but none of the\nexamples actually demonstrate this.  In the first example, when\ndefining S<int>::f(U) parms_depth is 2 and args_depth is 1, and\nlater when instantiating say S<int>::f<char> both depths are 2.  In the\nsecond example, when substituting the template friend declaration\nparms_depth is 2 and args_depth is 1, and later when instantiating f\nboth depths are 1.  Finally, the third example is invalid since we can't\nspecialize a member template of an unspecialized class template like\nthat.\n\nGiven that this reduction code seems no longer relevant for its\ndocumented purpose and that it causes problems as in the PR, this patch\njust removes it.  Note that as far as bootstrap/regtest is concerned,\nthis code is dead; the below two tests would be the first to reach it.\n\n\tPR c++/100102\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (tsubst_function_decl): Remove old code for reducing\n\targs when it has excess levels.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/alias-decl-72.C: New test.\n\t* g++.dg/cpp0x/alias-decl-72a.C: New test.", "tree": {"sha": "7e1596484feadf2d30015ee53f6fd2bc71ce0087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e1596484feadf2d30015ee53f6fd2bc71ce0087"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5357ab75dedef403b0eebf9277d61d1cbeb5898f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5357ab75dedef403b0eebf9277d61d1cbeb5898f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5357ab75dedef403b0eebf9277d61d1cbeb5898f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5357ab75dedef403b0eebf9277d61d1cbeb5898f/comments", "author": null, "committer": null, "parents": [{"sha": "bee8619ad0ac3bd27b7c8dc5819b83a5e8e147a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee8619ad0ac3bd27b7c8dc5819b83a5e8e147a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bee8619ad0ac3bd27b7c8dc5819b83a5e8e147a0"}], "stats": {"total": 57, "additions": 18, "deletions": 39}, "files": [{"sha": "744461ed8cb6e0a672ac1852a43f1952c6213952", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5357ab75dedef403b0eebf9277d61d1cbeb5898f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5357ab75dedef403b0eebf9277d61d1cbeb5898f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5357ab75dedef403b0eebf9277d61d1cbeb5898f", "patch": "@@ -13905,45 +13905,6 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n \t  if (tree spec = retrieve_specialization (gen_tmpl, argvec, hash))\n \t    return spec;\n \t}\n-\n-      /* We can see more levels of arguments than parameters if\n-\t there was a specialization of a member template, like\n-\t this:\n-\n-\t template <class T> struct S { template <class U> void f(); }\n-\t template <> template <class U> void S<int>::f(U);\n-\n-\t Here, we'll be substituting into the specialization,\n-\t because that's where we can find the code we actually\n-\t want to generate, but we'll have enough arguments for\n-\t the most general template.\n-\n-\t We also deal with the peculiar case:\n-\n-\t template <class T> struct S {\n-\t   template <class U> friend void f();\n-\t };\n-\t template <class U> void f() {}\n-\t template S<int>;\n-\t template void f<double>();\n-\n-\t Here, the ARGS for the instantiation of will be {int,\n-\t double}.  But, we only need as many ARGS as there are\n-\t levels of template parameters in CODE_PATTERN.  We are\n-\t careful not to get fooled into reducing the ARGS in\n-\t situations like:\n-\n-\t template <class T> struct S { template <class U> void f(U); }\n-\t template <class T> template <> void S<T>::f(int) {}\n-\n-\t which we can spot because the pattern will be a\n-\t specialization in this case.  */\n-      int args_depth = TMPL_ARGS_DEPTH (args);\n-      int parms_depth =\n-\tTMPL_PARMS_DEPTH (DECL_TEMPLATE_PARMS (DECL_TI_TEMPLATE (t)));\n-\n-      if (args_depth > parms_depth && !DECL_TEMPLATE_SPECIALIZATION (t))\n-\targs = get_innermost_template_args (args, parms_depth);\n     }\n   else\n     {"}, {"sha": "8009756dcba5985674ca0ff787047405383f1d8f", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-72.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5357ab75dedef403b0eebf9277d61d1cbeb5898f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-72.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5357ab75dedef403b0eebf9277d61d1cbeb5898f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-72.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-72.C?ref=5357ab75dedef403b0eebf9277d61d1cbeb5898f", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/100102\n+// { dg-do compile { target c++11 } }\n+\n+template<int()> struct ratio;\n+template<class T, class U> struct duration {\n+  static constexpr int _S_gcd();\n+  template<class> using __is_harmonic = ratio<_S_gcd>;\n+  using type = __is_harmonic<int>;\n+};"}, {"sha": "a4443e18f9d5876a805e4132f759f5784893c195", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-72a.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5357ab75dedef403b0eebf9277d61d1cbeb5898f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-72a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5357ab75dedef403b0eebf9277d61d1cbeb5898f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-72a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-72a.C?ref=5357ab75dedef403b0eebf9277d61d1cbeb5898f", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/100102\n+// { dg-do compile { target c++11 } }\n+\n+template<int> struct ratio;\n+template<class T> struct duration {\n+  static constexpr int _S_gcd();\n+  template<class> using __is_harmonic = ratio<(duration::_S_gcd)()>;\n+  using type = __is_harmonic<int>;\n+};"}]}