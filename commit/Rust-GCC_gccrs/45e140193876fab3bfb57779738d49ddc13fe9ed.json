{"sha": "45e140193876fab3bfb57779738d49ddc13fe9ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVlMTQwMTkzODc2ZmFiM2JmYjU3Nzc5NzM4ZDQ5ZGRjMTNmZTllZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-01-14T14:37:39Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-01-14T14:37:39Z"}, "message": "x86: Add -mfunction-return=\n\nAdd -mfunction-return= option to convert function return to call and\nreturn thunks.  The default is 'keep', which keeps function return\nunmodified.  'thunk' converts function return to call and return thunk.\n'thunk-inline' converts function return to inlined call and return thunk.\n'thunk-extern' converts function return to external call and return\nthunk provided in a separate object file.  You can control this behavior\nfor a specific function by using the function attribute function_return.\n\nFunction return thunk is the same as memory thunk for -mindirect-branch=\nwhere the return address is at the top of the stack:\n\n__x86_return_thunk:\n\tcall L2\nL1:\n\tpause\n\tlfence\n\tjmp L1\nL2:\n\tlea 8(%rsp), %rsp|lea 4(%esp), %esp\n\tret\n\nand function return becomes\n\n\tjmp __x86_return_thunk\n\n-mindirect-branch= tests are updated with -mfunction-return=keep to\navoid false test failures when -mfunction-return=thunk is added to\nRUNTESTFLAGS for \"make check\".\n\ngcc/\n\n\t* config/i386/i386-protos.h (ix86_output_function_return): New.\n\t* config/i386/i386.c (ix86_set_indirect_branch_type): Also\n\tset function_return_type.\n\t(indirect_thunk_name): Add ret_p to indicate thunk for function\n\treturn.\n\t(output_indirect_thunk_function): Pass false to\n\tindirect_thunk_name.\n\t(ix86_output_indirect_branch): Likewise.\n\t(output_indirect_thunk_function): Create alias for function\n\treturn thunk if regno < 0.\n\t(ix86_output_function_return): New function.\n\t(ix86_handle_fndecl_attribute): Handle function_return.\n\t(ix86_attribute_table): Add function_return.\n\t* config/i386/i386.h (machine_function): Add\n\tfunction_return_type.\n\t* config/i386/i386.md (simple_return_internal): Use\n\tix86_output_function_return.\n\t(simple_return_internal_long): Likewise.\n\t* config/i386/i386.opt (mfunction-return=): New option.\n\t(indirect_branch): Mention -mfunction-return=.\n\t* doc/extend.texi: Document function_return function attribute.\n\t* doc/invoke.texi: Document -mfunction-return= option.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/indirect-thunk-1.c (dg-options): Add\n\t-mfunction-return=keep.\n\t* gcc.target/i386/indirect-thunk-2.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-3.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-4.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-5.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-6.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-7.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-1.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-2.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-3.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-4.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-5.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-6.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-7.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-8.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-bnd-1.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-bnd-2.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-bnd-3.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-bnd-4.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-1.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-2.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-3.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-4.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-5.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-6.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-7.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-1.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-2.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-3.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-4.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-5.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-6.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-7.c: Likewise.\n\t* gcc.target/i386/ret-thunk-1.c: New test.\n\t* gcc.target/i386/ret-thunk-10.c: Likewise.\n\t* gcc.target/i386/ret-thunk-11.c: Likewise.\n\t* gcc.target/i386/ret-thunk-12.c: Likewise.\n\t* gcc.target/i386/ret-thunk-13.c: Likewise.\n\t* gcc.target/i386/ret-thunk-14.c: Likewise.\n\t* gcc.target/i386/ret-thunk-15.c: Likewise.\n\t* gcc.target/i386/ret-thunk-16.c: Likewise.\n\t* gcc.target/i386/ret-thunk-2.c: Likewise.\n\t* gcc.target/i386/ret-thunk-3.c: Likewise.\n\t* gcc.target/i386/ret-thunk-4.c: Likewise.\n\t* gcc.target/i386/ret-thunk-5.c: Likewise.\n\t* gcc.target/i386/ret-thunk-6.c: Likewise.\n\t* gcc.target/i386/ret-thunk-7.c: Likewise.\n\t* gcc.target/i386/ret-thunk-8.c: Likewise.\n\t* gcc.target/i386/ret-thunk-9.c: Likewise.\n\nFrom-SVN: r256661", "tree": {"sha": "c98de618c6ad4055cadb4b975da22ba170fc7b0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c98de618c6ad4055cadb4b975da22ba170fc7b0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45e140193876fab3bfb57779738d49ddc13fe9ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e140193876fab3bfb57779738d49ddc13fe9ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45e140193876fab3bfb57779738d49ddc13fe9ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e140193876fab3bfb57779738d49ddc13fe9ed/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7"}], "stats": {"total": 619, "additions": 569, "deletions": 50}, "files": [{"sha": "bd26df0b457b748cf5a4ccade0c01c086b7da18d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,3 +1,28 @@\n+2018-01-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386-protos.h (ix86_output_function_return): New.\n+\t* config/i386/i386.c (ix86_set_indirect_branch_type): Also\n+\tset function_return_type.\n+\t(indirect_thunk_name): Add ret_p to indicate thunk for function\n+\treturn.\n+\t(output_indirect_thunk_function): Pass false to\n+\tindirect_thunk_name.\n+\t(ix86_output_indirect_branch): Likewise.\n+\t(output_indirect_thunk_function): Create alias for function\n+\treturn thunk if regno < 0.\n+\t(ix86_output_function_return): New function.\n+\t(ix86_handle_fndecl_attribute): Handle function_return.\n+\t(ix86_attribute_table): Add function_return.\n+\t* config/i386/i386.h (machine_function): Add\n+\tfunction_return_type.\n+\t* config/i386/i386.md (simple_return_internal): Use\n+\tix86_output_function_return.\n+\t(simple_return_internal_long): Likewise.\n+\t* config/i386/i386.opt (mfunction-return=): New option.\n+\t(indirect_branch): Mention -mfunction-return=.\n+\t* doc/extend.texi: Document function_return function attribute.\n+\t* doc/invoke.texi: Document -mfunction-return= option.\n+\n 2018-01-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386-opts.h (indirect_branch): New."}, {"sha": "fb86f00b3a6253c5dfc887967f564b61af2a5f2a", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -306,6 +306,7 @@ extern enum attr_cpu ix86_schedule;\n \n extern const char * ix86_output_call_insn (rtx_insn *insn, rtx call_op);\n extern const char * ix86_output_indirect_jmp (rtx call_op, bool ret_p);\n+extern const char * ix86_output_function_return (bool long_p);\n extern bool ix86_operands_ok_for_move_multiple (rtx *operands, bool load,\n \t\t\t\t\t\tmachine_mode mode);\n extern int ix86_min_insn_size (rtx_insn *);"}, {"sha": "c6ffdd9ede5ab09e62b18ebef9b07f14a007d02d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 143, "deletions": 8, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -5842,6 +5842,31 @@ ix86_set_indirect_branch_type (tree fndecl)\n       else\n \tcfun->machine->indirect_branch_type = ix86_indirect_branch;\n     }\n+\n+  if (cfun->machine->function_return_type == indirect_branch_unset)\n+    {\n+      tree attr = lookup_attribute (\"function_return\",\n+\t\t\t\t    DECL_ATTRIBUTES (fndecl));\n+      if (attr != NULL)\n+\t{\n+\t  tree args = TREE_VALUE (attr);\n+\t  if (args == NULL)\n+\t    gcc_unreachable ();\n+\t  tree cst = TREE_VALUE (args);\n+\t  if (strcmp (TREE_STRING_POINTER (cst), \"keep\") == 0)\n+\t    cfun->machine->function_return_type = indirect_branch_keep;\n+\t  else if (strcmp (TREE_STRING_POINTER (cst), \"thunk\") == 0)\n+\t    cfun->machine->function_return_type = indirect_branch_thunk;\n+\t  else if (strcmp (TREE_STRING_POINTER (cst), \"thunk-inline\") == 0)\n+\t    cfun->machine->function_return_type = indirect_branch_thunk_inline;\n+\t  else if (strcmp (TREE_STRING_POINTER (cst), \"thunk-extern\") == 0)\n+\t    cfun->machine->function_return_type = indirect_branch_thunk_extern;\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n+      else\n+\tcfun->machine->function_return_type = ix86_function_return;\n+    }\n }\n \n /* Establish appropriate back-end context for processing the function\n@@ -10714,8 +10739,12 @@ static int indirect_thunks_bnd_used;\n /* Fills in the label name that should be used for the indirect thunk.  */\n \n static void\n-indirect_thunk_name (char name[32], int regno, bool need_bnd_p)\n+indirect_thunk_name (char name[32], int regno, bool need_bnd_p,\n+\t\t     bool ret_p)\n {\n+  if (regno >= 0 && ret_p)\n+    gcc_unreachable ();\n+\n   if (USE_HIDDEN_LINKONCE)\n     {\n       const char *bnd = need_bnd_p ? \"_bnd\" : \"\";\n@@ -10730,7 +10759,10 @@ indirect_thunk_name (char name[32], int regno, bool need_bnd_p)\n \t\t   bnd, reg_prefix, reg_names[regno]);\n \t}\n       else\n-\tsprintf (name, \"__x86_indirect_thunk%s\", bnd);\n+\t{\n+\t  const char *ret = ret_p ? \"return\" : \"indirect\";\n+\t  sprintf (name, \"__x86_%s_thunk%s\", ret, bnd);\n+\t}\n     }\n   else\n     {\n@@ -10743,10 +10775,20 @@ indirect_thunk_name (char name[32], int regno, bool need_bnd_p)\n \t}\n       else\n \t{\n-\t  if (need_bnd_p)\n-\t    ASM_GENERATE_INTERNAL_LABEL (name, \"LITB\", 0);\n+\t  if (ret_p)\n+\t    {\n+\t      if (need_bnd_p)\n+\t\tASM_GENERATE_INTERNAL_LABEL (name, \"LRTB\", 0);\n+\t      else\n+\t\tASM_GENERATE_INTERNAL_LABEL (name, \"LRT\", 0);\n+\t    }\n \t  else\n-\t    ASM_GENERATE_INTERNAL_LABEL (name, \"LIT\", 0);\n+\t    {\n+\t      if (need_bnd_p)\n+\t\tASM_GENERATE_INTERNAL_LABEL (name, \"LITB\", 0);\n+\t      else\n+\t\tASM_GENERATE_INTERNAL_LABEL (name, \"LIT\", 0);\n+\t    }\n \t}\n     }\n }\n@@ -10841,7 +10883,7 @@ output_indirect_thunk_function (bool need_bnd_p, int regno)\n   tree decl;\n \n   /* Create __x86_indirect_thunk/__x86_indirect_thunk_bnd.  */\n-  indirect_thunk_name (name, regno, need_bnd_p);\n+  indirect_thunk_name (name, regno, need_bnd_p, false);\n   decl = build_decl (BUILTINS_LOCATION, FUNCTION_DECL,\n \t\t     get_identifier (name),\n \t\t     build_function_type_list (void_type_node, NULL_TREE));\n@@ -10884,6 +10926,35 @@ output_indirect_thunk_function (bool need_bnd_p, int regno)\n \tASM_OUTPUT_LABEL (asm_out_file, name);\n       }\n \n+  if (regno < 0)\n+    {\n+      /* Create alias for __x86.return_thunk/__x86.return_thunk_bnd.  */\n+      char alias[32];\n+\n+      indirect_thunk_name (alias, regno, need_bnd_p, true);\n+      ASM_OUTPUT_DEF (asm_out_file, alias, name);\n+#if TARGET_MACHO\n+      if (TARGET_MACHO)\n+\t{\n+\t  fputs (\"\\t.weak_definition\\t\", asm_out_file);\n+\t  assemble_name (asm_out_file, alias);\n+\t  fputs (\"\\n\\t.private_extern\\t\", asm_out_file);\n+\t  assemble_name (asm_out_file, alias);\n+\t  putc ('\\n', asm_out_file);\n+\t}\n+#else\n+      if (USE_HIDDEN_LINKONCE)\n+\t{\n+\t  fputs (\"\\t.globl\\t\", asm_out_file);\n+\t  assemble_name (asm_out_file, alias);\n+\t  putc ('\\n', asm_out_file);\n+\t  fputs (\"\\t.hidden\\t\", asm_out_file);\n+\t  assemble_name (asm_out_file, alias);\n+\t  putc ('\\n', asm_out_file);\n+\t}\n+#endif\n+    }\n+\n   DECL_INITIAL (decl) = make_node (BLOCK);\n   current_function_decl = decl;\n   allocate_struct_function (decl, false);\n@@ -28469,7 +28540,7 @@ ix86_output_indirect_branch_via_reg (rtx call_op, bool sibcall_p)\n \t  else\n \t    indirect_thunks_used |= 1 << i;\n \t}\n-      indirect_thunk_name (thunk_name_buf, regno, need_bnd_p);\n+      indirect_thunk_name (thunk_name_buf, regno, need_bnd_p, false);\n       thunk_name = thunk_name_buf;\n     }\n   else\n@@ -28578,7 +28649,7 @@ ix86_output_indirect_branch_via_push (rtx call_op, const char *xasm,\n \t  else\n \t    indirect_thunk_needed = true;\n \t}\n-      indirect_thunk_name (thunk_name_buf, regno, need_bnd_p);\n+      indirect_thunk_name (thunk_name_buf, regno, need_bnd_p, false);\n       thunk_name = thunk_name_buf;\n     }\n   else\n@@ -28713,6 +28784,46 @@ ix86_output_indirect_jmp (rtx call_op, bool ret_p)\n     return \"%!jmp\\t%A0\";\n }\n \n+/* Output function return.  CALL_OP is the jump target.  Add a REP\n+   prefix to RET if LONG_P is true and function return is kept.  */\n+\n+const char *\n+ix86_output_function_return (bool long_p)\n+{\n+  if (cfun->machine->function_return_type != indirect_branch_keep)\n+    {\n+      char thunk_name[32];\n+      bool need_bnd_p = ix86_bnd_prefixed_insn_p (current_output_insn);\n+\n+      if (cfun->machine->function_return_type\n+\t  != indirect_branch_thunk_inline)\n+\t{\n+\t  bool need_thunk = (cfun->machine->function_return_type\n+\t\t\t     == indirect_branch_thunk);\n+\t  indirect_thunk_name (thunk_name, -1, need_bnd_p, true);\n+\t  if (need_bnd_p)\n+\t    {\n+\t      indirect_thunk_bnd_needed |= need_thunk;\n+\t      fprintf (asm_out_file, \"\\tbnd jmp\\t%s\\n\", thunk_name);\n+\t    }\n+\t  else\n+\t    {\n+\t      indirect_thunk_needed |= need_thunk;\n+\t      fprintf (asm_out_file, \"\\tjmp\\t%s\\n\", thunk_name);\n+\t    }\n+\t}\n+      else\n+\toutput_indirect_thunk (need_bnd_p, -1);\n+\n+      return \"\";\n+    }\n+\n+  if (!long_p || ix86_bnd_prefixed_insn_p (current_output_insn))\n+    return \"%!ret\";\n+\n+  return \"rep%; ret\";\n+}\n+\n /* Output the assembly for a call instruction.  */\n \n const char *\n@@ -41023,6 +41134,28 @@ ix86_handle_fndecl_attribute (tree *node, tree name, tree args, int,\n \t}\n     }\n \n+  if (is_attribute_p (\"function_return\", name))\n+    {\n+      tree cst = TREE_VALUE (args);\n+      if (TREE_CODE (cst) != STRING_CST)\n+\t{\n+\t  warning (OPT_Wattributes,\n+\t\t   \"%qE attribute requires a string constant argument\",\n+\t\t   name);\n+\t  *no_add_attrs = true;\n+\t}\n+      else if (strcmp (TREE_STRING_POINTER (cst), \"keep\") != 0\n+\t       && strcmp (TREE_STRING_POINTER (cst), \"thunk\") != 0\n+\t       && strcmp (TREE_STRING_POINTER (cst), \"thunk-inline\") != 0\n+\t       && strcmp (TREE_STRING_POINTER (cst), \"thunk-extern\") != 0)\n+\t{\n+\t  warning (OPT_Wattributes,\n+\t\t   \"argument to %qE attribute is not \"\n+\t\t   \"(keep|thunk|thunk-inline|thunk-extern)\", name);\n+\t  *no_add_attrs = true;\n+\t}\n+    }\n+\n   return NULL_TREE;\n }\n \n@@ -45471,6 +45604,8 @@ static const struct attribute_spec ix86_attribute_table[] =\n     ix86_handle_fndecl_attribute, NULL },\n   { \"indirect_branch\", 1, 1, true, false, false, false,\n     ix86_handle_fndecl_attribute, NULL },\n+  { \"function_return\", 1, 1, true, false, false, false,\n+    ix86_handle_fndecl_attribute, NULL },\n \n   /* End element.  */\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }"}, {"sha": "bc4bc9a7a481025abfe5215bfef8981f76dc67ce", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -2577,6 +2577,9 @@ struct GTY(()) machine_function {\n      \"indirect_jump\" or \"tablejump\".  */\n   BOOL_BITFIELD has_local_indirect_jump : 1;\n \n+  /* How to generate function return.  */\n+  ENUM_BITFIELD(indirect_branch) function_return_type : 3;\n+\n   /* If true, the current function is a function specified with\n      the \"interrupt\" or \"no_caller_saved_registers\" attribute.  */\n   BOOL_BITFIELD no_caller_saved_registers : 1;"}, {"sha": "7e21c486d1951561c9723c187be8d7acafa74f93", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -13058,7 +13058,7 @@\n (define_insn \"simple_return_internal\"\n   [(simple_return)]\n   \"reload_completed\"\n-  \"%!ret\"\n+  \"* return ix86_output_function_return (false);\"\n   [(set_attr \"length\" \"1\")\n    (set_attr \"atom_unit\" \"jeu\")\n    (set_attr \"length_immediate\" \"0\")\n@@ -13080,12 +13080,7 @@\n   [(simple_return)\n    (unspec [(const_int 0)] UNSPEC_REP)]\n   \"reload_completed\"\n-{\n-  if (ix86_bnd_prefixed_insn_p (insn))\n-    return \"%!ret\";\n-\n-  return \"rep%; ret\";\n-}\n+  \"* return ix86_output_function_return (true);\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"atom_unit\" \"jeu\")\n    (set_attr \"length_immediate\" \"0\")"}, {"sha": "7b17773592b5a7a998a94d80074acd4a295cfd9e", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1026,9 +1026,13 @@ mindirect-branch=\n Target Report RejectNegative Joined Enum(indirect_branch) Var(ix86_indirect_branch) Init(indirect_branch_keep)\n Convert indirect call and jump to call and return thunks.\n \n+mfunction-return=\n+Target Report RejectNegative Joined Enum(indirect_branch) Var(ix86_function_return) Init(indirect_branch_keep)\n+Convert function return to call and return thunk.\n+\n Enum\n Name(indirect_branch) Type(enum indirect_branch)\n-Known indirect branch choices (for use with the -mindirect-branch= option):\n+Known indirect branch choices (for use with the -mindirect-branch=/-mfunction-return= options):\n \n EnumValue\n Enum(indirect_branch) String(keep) Value(indirect_branch_keep)"}, {"sha": "f120b2a142923ffe50b633a94bd5e54faea730c7", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -5764,6 +5764,15 @@ indirect call and jump to inlined call and return thunk.\n @samp{thunk-extern} converts indirect call and jump to external call\n and return thunk provided in a separate object file.\n \n+@item function_return(\"@var{choice}\")\n+@cindex @code{function_return} function attribute, x86\n+On x86 targets, the @code{function_return} attribute causes the compiler\n+to convert function return with @var{choice}.  @samp{keep} keeps function\n+return unmodified.  @samp{thunk} converts function return to call and\n+return thunk.  @samp{thunk-inline} converts function return to inlined\n+call and return thunk.  @samp{thunk-extern} converts function return to\n+external call and return thunk provided in a separate object file.\n+\n @item nocf_check\n @cindex @code{nocf_check} function attribute\n The @code{nocf_check} attribute on a function is used to inform the"}, {"sha": "128a5620dc590d46867538f9d5ef8c55dbdc9a4d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1230,7 +1230,7 @@ See RS/6000 and PowerPC Options.\n -mstack-protector-guard-offset=@var{offset} @gol\n -mstack-protector-guard-symbol=@var{symbol} -mmitigate-rop @gol\n -mgeneral-regs-only -mcall-ms2sysv-xlogues @gol\n--mindirect-branch=@var{choice}}\n+-mindirect-branch=@var{choice} -mfunction-return==@var{choice}}\n \n @emph{x86 Windows Options}\n @gccoptlist{-mconsole  -mcygwin  -mno-cygwin  -mdll @gol\n@@ -26857,6 +26857,17 @@ to external call and return thunk provided in a separate object file.\n You can control this behavior for a specific function by using the\n function attribute @code{indirect_branch}.  @xref{Function Attributes}.\n \n+@item -mfunction-return=@var{choice}\n+@opindex -mfunction-return\n+Convert function return with @var{choice}.  The default is @samp{keep},\n+which keeps function return unmodified.  @samp{thunk} converts function\n+return to call and return thunk.  @samp{thunk-inline} converts function\n+return to inlined call and return thunk.  @samp{thunk-extern} converts\n+function return to external call and return thunk provided in a separate\n+object file.  You can control this behavior for a specific function by\n+using the function attribute @code{function_return}.\n+@xref{Function Attributes}.\n+\n @end table\n \n These @samp{-m} switches are supported in addition to the above"}, {"sha": "720c198c4eaa330231309608cebe422108e12644", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,3 +1,56 @@\n+2018-01-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/indirect-thunk-1.c (dg-options): Add\n+\t-mfunction-return=keep.\n+\t* gcc.target/i386/indirect-thunk-2.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-3.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-4.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-5.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-6.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-7.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-1.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-2.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-3.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-4.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-5.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-6.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-7.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-8.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-bnd-1.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-bnd-2.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-bnd-3.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-bnd-4.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-1.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-2.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-3.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-4.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-5.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-6.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-7.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-1.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-2.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-3.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-4.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-5.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-6.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-7.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-1.c: New test.\n+\t* gcc.target/i386/ret-thunk-10.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-11.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-12.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-13.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-14.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-15.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-16.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-2.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-3.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-4.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-5.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-6.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-7.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-8.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-9.c: Likewise.\n+\n 2018-01-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/indirect-thunk-1.c: New test."}, {"sha": "f076155c91aa2d36ee45875cb3cff012e41502e9", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-1.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "d7984f592fee4998802e51b5ea8b586759873658", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-2.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "3257d0a2e16203d22ffebe5a1465d83b96d2d80a", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-3.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "7cab2df6474cf2a4f07e85e678a0ff19f407ca90", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-4.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "b4836c38d6c9e471dfd77ae9132febf9012ab80e", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-5.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fpic -fno-plt -mindirect-branch=thunk\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -fpic -fno-plt -mindirect-branch=thunk\" } */\n \n extern void bar (void);\n "}, {"sha": "1f06bd1af7412ef1ae16d08ada9d33e2dbb28fbf", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-6.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fpic -fno-plt -mindirect-branch=thunk\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -fpic -fno-plt -mindirect-branch=thunk\" } */\n \n extern void bar (void);\n "}, {"sha": "0b3fef86a20b40b0e43ee3ec618f9826a2e5b0ff", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-7.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk -fno-pic\" } */\n \n void func0 (void);\n void func1 (void);"}, {"sha": "5f6cfc17b56221939e09d15d5c4d8c3eef6e94e8", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-1.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "b256160ec80f1ae2a8861aff015a371b18183f8d", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-2.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "567c95051d6a4280262a1d232040cf387fd377c6", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-3.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "3b662af7d5dff9ccb7def8ca4495fd24fecccb3e", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-4.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "98785a382481e8de3188a27f76ccd7e79498b75d", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-5.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "a498a39e404714e38a2b3b6cf1662d6a04514674", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-6.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "66f295d1eb6d6c2037a68fa6cd4a46f52af7113d", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-7.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -fno-pic\" } */\n \n void func0 (void);\n void func1 (void);"}, {"sha": "d730d31bda1ef53cada63e190a209c49df00f40a", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-8.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk -fno-pic\" } */\n \n void func0 (void);\n void func1 (void);"}, {"sha": "aacb814d737feb5dd5fd6e8fc137f6e63944f99f", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-bnd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-1.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk -fcheck-pointer-bounds -mmpx -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk -fcheck-pointer-bounds -mmpx -fno-pic\" } */\n \n void (*dispatch) (char *);\n char buf[10];"}, {"sha": "7b44dda23df286d45b7593da6caeda0d061c7358", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-bnd-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-2.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk -fcheck-pointer-bounds -mmpx -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk -fcheck-pointer-bounds -mmpx -fno-pic\" } */\n \n void (*dispatch) (char *);\n char buf[10];"}, {"sha": "70b4fb36eeace1a238f26c566eddd1a077f3a25b", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-bnd-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-3.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { *-*-linux* && { ! x32 } } } } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk -fcheck-pointer-bounds -mmpx -fpic -fno-plt\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk -fcheck-pointer-bounds -mmpx -fpic -fno-plt\" } */\n \n void bar (char *);\n char buf[10];"}, {"sha": "3baf03ee77cb1ef8530175571fdb7dafe5e655a0", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-bnd-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-4.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { *-*-linux* && { ! x32 } } } } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk -fcheck-pointer-bounds -mmpx -fpic -fno-plt\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk -fcheck-pointer-bounds -mmpx -fpic -fno-plt\" } */\n \n void bar (char *);\n char buf[10];"}, {"sha": "637fc3d3f4e356d27090d3a1986be163f0cf2bf8", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-1.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk-extern -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk-extern -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "ff9efe03fe67a1c4a9a7632463023929dffce6ff", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-2.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk-extern -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk-extern -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "2686a5f2db404a4ce2210e7db1d0a6e2a2b02c03", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-3.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk-extern -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk-extern -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "f07f6b214ad0b417d1ea9908c06c4444634f16a6", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-4.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk-extern -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk-extern -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "21740ac5b7f4ec5b22508c61b1e0d2671f9d8002", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-5.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fpic -fno-plt -mindirect-branch=thunk-extern\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -fpic -fno-plt -mindirect-branch=thunk-extern\" } */\n \n extern void bar (void);\n "}, {"sha": "a77c1f470b80cc0827bb7db711a7536e4a9728d8", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-6.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fpic -fno-plt -mindirect-branch=thunk-extern\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -fpic -fno-plt -mindirect-branch=thunk-extern\" } */\n \n extern void bar (void);\n "}, {"sha": "e64910fd4aaf20ed7672ebfa267e6a5b02a40eca", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-7.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk-extern -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk-extern -fno-pic\" } */\n \n void func0 (void);\n void func1 (void);"}, {"sha": "365cf2ee22637f1906c42947828096812924244d", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-1.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk-inline -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk-inline -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "72646a4960b463a6bec11db3901c73ac21ae89d0", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-2.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk-inline -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk-inline -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "f48945e3dfcea5b283713ae6d68e38a81c4718e9", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-3.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk-inline -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk-inline -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "4b1d558fc4e71e47a64865f2e43da0f5ef9c1405", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-4.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk-inline -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk-inline -fno-pic\" } */\n \n typedef void (*dispatch_t)(long offset);\n "}, {"sha": "0f687c3b02762b5e2683f419f45b4f26412002da", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-5.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fpic -fno-plt -mindirect-branch=thunk-inline\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -fpic -fno-plt -mindirect-branch=thunk-inline\" } */\n \n extern void bar (void);\n "}, {"sha": "b27c6fc96a2a8f1bd2561b083db5668bf3abbe82", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-6.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fpic -fno-plt -mindirect-branch=thunk-inline\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -fpic -fno-plt -mindirect-branch=thunk-inline\" } */\n \n extern void bar (void);\n "}, {"sha": "2c496492eaaf7ab158ae85fe23310566c45365e9", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-7.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk-inline -fno-pic\" } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk-inline -fno-pic\" } */\n \n void func0 (void);\n void func1 (void);"}, {"sha": "7223f67ba5ecfd7499acf2ce6977876dae00dfc2", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-1.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfunction-return=thunk\" } */\n+\n+void\n+foo (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_return_thunk\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "1630e2fa2b5bd18a26eea6b366bc2b450889b4c2", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-10.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-10.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfunction-return=thunk-inline -mindirect-branch=thunk -fno-pic\" } */\n+\n+extern void (*bar) (void);\n+\n+int\n+foo (void)\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*__x86_return_thunk\" } } */\n+/* { dg-final { scan-assembler-times {\\tpause} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlfence} 2 } } */\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?bar\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } }  } } */\n+/* { dg-final { scan-assembler \"__x86_indirect_thunk:\" { target { ! x32 } }  } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target { x32 } }  } } */\n+/* { dg-final { scan-assembler \"__x86_indirect_thunk_(r|e)ax:\" { target { x32 } }  } } */\n+/* { dg-final { scan-assembler-not \"pushq\\[ \\t\\]%rax\" { target x32 } } } */"}, {"sha": "876159cf7837022d779c88d6d3f753a2550872c3", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-11.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-11.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfunction-return=thunk-extern -mindirect-branch=thunk -fno-pic\" } */\n+\n+extern void (*bar) (void);\n+\n+int\n+foo (void)\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_return_thunk\" } } */\n+/* { dg-final { scan-assembler-times {\\tpause} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlfence} 1 } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?bar\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"__x86_indirect_thunk:\" { target { ! x32 } }  } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target { x32 } }  } } */\n+/* { dg-final { scan-assembler \"__x86_indirect_thunk_(r|e)ax:\" { target { x32 } }  } } */\n+/* { dg-final { scan-assembler-not \"pushq\\[ \\t\\]%rax\" { target x32 } } } */"}, {"sha": "01b0a02f80b018d6d230d2b1fe6f9b23105603f2", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-12.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-12.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk -fno-pic\" } */\n+\n+extern void (*bar) (void);\n+\n+int\n+foo (void)\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*__x86_return_thunk\" } } */\n+/* { dg-final { scan-assembler-times {\\tpause} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlfence} 1 } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"__x86_indirect_thunk:\" { target { ! x32 } }  } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target { x32 } }  } } */\n+/* { dg-final { scan-assembler \"__x86_indirect_thunk_(r|e)ax:\" { target { x32 } }  } } */\n+/* { dg-final { scan-assembler-not \"pushq\\[ \\t\\]%rax\" { target x32 } } } */"}, {"sha": "e028c2b6a9939cf3ce1e4efab617939c6f55358a", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-13.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-13.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk-inline -fno-pic\" } */\n+\n+extern void (*bar) (void);\n+extern int foo (void) __attribute__ ((function_return(\"thunk\")));\n+\n+int\n+foo (void)\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_return_thunk\" } } */\n+/* { dg-final { scan-assembler-times {\\tpause} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlfence} 2 } } */\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?bar\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler-times \"jmp\\[ \\t\\]*\\.LIND\" 3 } } */\n+/* { dg-final { scan-assembler-times \"call\\[ \\t\\]*\\.LIND\" 3 } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target { x32 } }  } } */\n+/* { dg-final { scan-assembler-not \"pushq\\[ \\t\\]%rax\" { target x32 } } } */"}, {"sha": "c14ee3ae4c08bae643a082fab2ee37858e726263", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-14.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-14.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=thunk-extern -fno-pic\" } */\n+\n+extern void (*bar) (void);\n+\n+__attribute__ ((function_return(\"thunk-inline\")))\n+int\n+foo (void)\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tpause} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlfence} 1 } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*__x86_return_thunk\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?bar\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target { x32 } }  } } */\n+/* { dg-final { scan-assembler-not \"pushq\\[ \\t\\]%rax\" { target x32 } } } */"}, {"sha": "2f21e138ec290970cd62cdb817e08918325799ff", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-15.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-15.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfunction-return=keep -mindirect-branch=keep -fno-pic\" } */\n+\n+extern void (*bar) (void);\n+\n+__attribute__ ((function_return(\"thunk-extern\"), indirect_branch(\"thunk\")))\n+int\n+foo (void)\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_return_thunk\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler-times {\\tpause} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlfence} 1 } } */\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?bar\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target x32 } } } */\n+/* { dg-final { scan-assembler-not \"pushq\\[ \\t\\]%rax\" { target x32 } } } */"}, {"sha": "a16cad16aaa14f2701c9f3956f4fed6556ad0e75", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-16.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-16.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfunction-return=thunk-inline -mindirect-branch=thunk-extern -fno-pic\" } */\n+\n+extern void (*bar) (void);\n+\n+__attribute__ ((function_return(\"keep\"), indirect_branch(\"keep\")))\n+int\n+foo (void)\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-not \"__x86_return_thunk\" } } */\n+/* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]*\\.LIND\" } } */"}, {"sha": "c6659e3ad09329f39c75913bba7e651261231f7f", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-2.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfunction-return=thunk-inline\" } */\n+\n+void\n+foo (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*__x86_return_thunk\" } } */"}, {"sha": "0f7f388f4590dd6276e291019494f5fc807b3f43", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-3.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfunction-return=thunk-extern\" } */\n+\n+void\n+foo (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_return_thunk\" } } */\n+/* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]*\\.LIND\" } } */"}, {"sha": "9ae37e835a02b24d01aff4ceae9fb638a997a0e4", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-4.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfunction-return=keep\" } */\n+\n+void\n+foo (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*__x86_return_thunk\" } } */\n+/* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]*\\.LIND\" } } */"}, {"sha": "4bd0d2a27bc096ca357d2f0aa9c770aeb4705735", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-5.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-5.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfunction-return=keep\" } */\n+\n+extern void foo (void) __attribute__ ((function_return(\"thunk\")));\n+\n+void\n+foo (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_return_thunk\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "053841f6f7d9fd11ca7e790d33460341de1d7240", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-6.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-6.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfunction-return=keep\" } */\n+\n+__attribute__ ((function_return(\"thunk-inline\")))\n+void\n+foo (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*__x86_return_thunk\" } } */"}, {"sha": "262e6780112f923b305631fb810003a8bf880a93", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-7.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-7.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfunction-return=keep\" } */\n+\n+__attribute__ ((function_return(\"thunk-extern\")))\n+void\n+foo (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_return_thunk\" } } */\n+/* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]*\\.LIND\" } } */"}, {"sha": "c1658e9667358aecca07163123682a501c16ff96", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-8.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfunction-return=thunk-inline\" } */\n+\n+extern void foo (void) __attribute__ ((function_return(\"keep\")));\n+\n+void\n+foo (void)\n+{\n+}\n+\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*__x86_return_thunk\" } } */\n+/* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]*\\.LIND\" } } */"}, {"sha": "f6ccad98da7a286919cb8d6f9406b1b68557e5aa", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-9.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e140193876fab3bfb57779738d49ddc13fe9ed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-9.c?ref=45e140193876fab3bfb57779738d49ddc13fe9ed", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfunction-return=thunk -mindirect-branch=thunk -fno-pic\" } */\n+\n+extern void (*bar) (void);\n+\n+int\n+foo (void)\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_return_thunk\" } } */\n+/* { dg-final { scan-assembler-not \"__x86_return_thunk:\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"__x86_indirect_thunk:\" } } */\n+/* { dg-final { scan-assembler-times {\\tpause} 1 { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler-times {\\tlfence} 1 { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?bar\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler-times {\\tpause} 2 { target { x32 } } } } */\n+/* { dg-final { scan-assembler-times {\\tlfence} 2 { target { x32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target { x32 } } } } */\n+/* { dg-final { scan-assembler-not \"pushq\\[ \\t\\]%rax\" { target x32 } } } */"}]}