{"sha": "262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYyZmE4YTRiNWYwZTU4NTlhNGYwNTllMGJiMTZhOTRlN2JiZTc4MQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2007-01-22T23:04:16Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-01-22T23:04:16Z"}, "message": "re PR java/29812 (env->klass value is not updated during the native calls)\n\n\tPR java/29812:\n\t* testsuite/libjava.jni/pr29812.java: New file.\n\t* testsuite/libjava.jni/pr29812_injar.java: New file.\n\t* testsuite/libjava.jni/pr29812_injar.jar: New file.\n\t* testsuite/libjava.jni/pr29812.out: New file.\n\t* testsuite/libjava.jni/pr29812_injar.c: New file.\n\t* testsuite/libjava.jni/pr29812_injar.h: New file.\n\t* testsuite/libjava.jni/pr29812.jar: New file.\n\t* testsuite/libjava.jni/pr29812.c: New file.\n\t* testsuite/libjava.jni/pr29812.h: New file.\n\t* testsuite/libjava.jni/jni.exp (gcj_jni_get_cxxflags_invocation):\n\tNew proc.\n\t(gcj_jni_invocation_test_one): Use it.\n\t(gcj_jni_pr29812): New proc.\n\t(gcj_jni_run): Use it.\n\t* java/lang/natRuntime.cc (_load): Push a new system frame before\n\tcalling JNI_OnLoad.\n\t* include/jvm.h (_Jv_JNI_PopSystemFrame): Declare.\n\t(_Jv_GetJNIEnvNewFrameWithLoader): Likewise.\n\t* jni.cc (struct _Jv_JNI_LocalFrame) <marker>: Now unsigned char.\n\t<allocated_p>: Now bool.\n\t<loader>: New field.\n\t(_Jv_JNI_EnsureLocalCapacity): Updated.\n\t(_Jv_JNI_NewLocalRef): Likewise.\n\t(_Jv_JNI_NewLocalRef): Likewise.\n\t(_Jv_JNI_PopLocalFrame): Likewise.\n\t(_Jv_JNI_FindClass): Likewise.\n\t(_Jv_GetJNIEnvNewFrame): Likewise.\n\t(_Jv_JNI_AttachCurrentThread): Likewise.\n\t(_Jv_GetJNIEnvNewFrameWithLoader): New function.\n\t(_Jv_GetJNIEnvNewFrame): Use it.\n\t* include/jni_md.h (_CLASSPATH_JNIENV_CONTENTS): Removed 'klass'.\n\nFrom-SVN: r121064", "tree": {"sha": "5a65b021fa1dfa6c969e6de00c7e6ecfad3b93d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a65b021fa1dfa6c969e6de00c7e6ecfad3b93d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/comments", "author": null, "committer": null, "parents": [{"sha": "c8832aae41666f2632fb54adc2ca04c1a991cce4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8832aae41666f2632fb54adc2ca04c1a991cce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8832aae41666f2632fb54adc2ca04c1a991cce4"}], "stats": {"total": 309, "additions": 255, "deletions": 54}, "files": [{"sha": "e31a214d4624e192dcebd7fc3db86a9f23e68d1d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781", "patch": "@@ -1,3 +1,38 @@\n+2007-01-22  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR java/29812:\n+\t* testsuite/libjava.jni/pr29812.java: New file.\n+\t* testsuite/libjava.jni/pr29812_injar.java: New file.\n+\t* testsuite/libjava.jni/pr29812_injar.jar: New file.\n+\t* testsuite/libjava.jni/pr29812.out: New file.\n+\t* testsuite/libjava.jni/pr29812_injar.c: New file.\n+\t* testsuite/libjava.jni/pr29812_injar.h: New file.\n+\t* testsuite/libjava.jni/pr29812.jar: New file.\n+\t* testsuite/libjava.jni/pr29812.c: New file.\n+\t* testsuite/libjava.jni/pr29812.h: New file.\n+\t* testsuite/libjava.jni/jni.exp (gcj_jni_get_cxxflags_invocation):\n+\tNew proc.\n+\t(gcj_jni_invocation_test_one): Use it.\n+\t(gcj_jni_pr29812): New proc.\n+\t(gcj_jni_run): Use it.\n+\t* java/lang/natRuntime.cc (_load): Push a new system frame before\n+\tcalling JNI_OnLoad.\n+\t* include/jvm.h (_Jv_JNI_PopSystemFrame): Declare.\n+\t(_Jv_GetJNIEnvNewFrameWithLoader): Likewise.\n+\t* jni.cc (struct _Jv_JNI_LocalFrame) <marker>: Now unsigned char.\n+\t<allocated_p>: Now bool.\n+\t<loader>: New field.\n+\t(_Jv_JNI_EnsureLocalCapacity): Updated.\n+\t(_Jv_JNI_NewLocalRef): Likewise.\n+\t(_Jv_JNI_NewLocalRef): Likewise.\n+\t(_Jv_JNI_PopLocalFrame): Likewise.\n+\t(_Jv_JNI_FindClass): Likewise.\n+\t(_Jv_GetJNIEnvNewFrame): Likewise.\n+\t(_Jv_JNI_AttachCurrentThread): Likewise.\n+\t(_Jv_GetJNIEnvNewFrameWithLoader): New function.\n+\t(_Jv_GetJNIEnvNewFrame): Use it.\n+\t* include/jni_md.h (_CLASSPATH_JNIENV_CONTENTS): Removed 'klass'.\n+\n 2007-01-22  Tom Tromey  <tromey@redhat.com>\n \n \t* libtool-version: Bump current to 9."}, {"sha": "6ea90ab4c36d6e2af43d83967680d9c5faf18e11", "filename": "libjava/include/jni_md.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Finclude%2Fjni_md.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Finclude%2Fjni_md.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjni_md.h?ref=262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781", "patch": "@@ -1,5 +1,5 @@\n /* jni_md.h\n-   Copyright (C) 2001, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2005, 2007 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -58,9 +58,6 @@ typedef struct _Jv_JavaVM JavaVM;\n   /* The current exception.  */\t\t\t\t\t\t\\\n   jthrowable ex;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  /* The class of the current native method.  */\t\t\t\\\n-  jclass klass;\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n   /* The chain of local frames.  */\t\t\t\t\t\\\n   struct _Jv_JNI_LocalFrame *locals;\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\"}, {"sha": "9a99a954b28dafea2486f1ec6c584c33dddae831", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781", "patch": "@@ -592,8 +592,8 @@ void _Jv_SetCurrentJNIEnv (_Jv_JNIEnv *);\n /* Free a JNIEnv. */\n void _Jv_FreeJNIEnv (_Jv_JNIEnv *);\n \n-/* Free a JNIEnv. */\n-void _Jv_FreeJNIEnv (_Jv_JNIEnv *);\n+extern \"C\" void _Jv_JNI_PopSystemFrame (_Jv_JNIEnv *);\n+_Jv_JNIEnv *_Jv_GetJNIEnvNewFrameWithLoader (::java::lang::ClassLoader *);\n \n struct _Jv_JavaVM;\n _Jv_JavaVM *_Jv_GetJavaVM (); "}, {"sha": "64c8fbb3f90945bacda1e3b6ca851dfa7718f63c", "filename": "libjava/java/lang/natRuntime.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Fjava%2Flang%2FnatRuntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Fjava%2Flang%2FnatRuntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatRuntime.cc?ref=262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781", "patch": "@@ -207,7 +207,14 @@ java::lang::Runtime::_load (jstring path, jboolean do_search)\n \t  // FIXME: what?\n \t  return;\n \t}\n+\n+      // Push a new frame so that JNI_OnLoad will get the right class\n+      // loader if it calls FindClass.\n+      ::java::lang::ClassLoader *loader\n+\t  = _Jv_StackTrace::GetFirstNonSystemClassLoader();\n+      JNIEnv *env = _Jv_GetJNIEnvNewFrameWithLoader (loader);\n       jint vers = ((jint (JNICALL *) (JavaVM *, void *)) onload) (vm, NULL);\n+      _Jv_JNI_PopSystemFrame (env);\n       if (vers != JNI_VERSION_1_1 && vers != JNI_VERSION_1_2\n \t  && vers != JNI_VERSION_1_4)\n \t{"}, {"sha": "59c1e5fd03e880f17183d5eeba5917edf9f2a25e", "filename": "libjava/jni.cc", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781", "patch": "@@ -85,16 +85,18 @@ extern struct JNIInvokeInterface _Jv_JNI_InvokeFunctions;\n // This structure is used to keep track of local references.\n struct _Jv_JNI_LocalFrame\n {\n-  // This is true if this frame object represents a pushed frame (eg\n-  // from PushLocalFrame).\n-  int marker;\n+  // This is one of the MARK_ constants.\n+  unsigned char marker;\n \n   // Flag to indicate some locals were allocated.\n-  int allocated_p;\n+  bool allocated_p;\n \n   // Number of elements in frame.\n   int size;\n \n+  // The class loader of the JNI method that allocated this frame.\n+  ::java::lang::ClassLoader *loader;\n+\n   // Next frame in chain.\n   _Jv_JNI_LocalFrame *next;\n \n@@ -311,8 +313,9 @@ _Jv_JNI_EnsureLocalCapacity (JNIEnv *env, jint size)\n \n   frame->marker = MARK_NONE;\n   frame->size = size;\n-  frame->allocated_p = 0;\n+  frame->allocated_p = false;\n   memset (&frame->vec[0], 0, size * sizeof (jobject));\n+  frame->loader = env->locals->loader;\n   frame->next = env->locals;\n   env->locals = frame;\n \n@@ -350,7 +353,7 @@ _Jv_JNI_NewLocalRef (JNIEnv *env, jobject obj)\n \t      set = true;\n \t      done = true;\n \t      frame->vec[i] = obj;\n-\t      frame->allocated_p = 1;\n+\t      frame->allocated_p = true;\n \t      break;\n \t    }\n \t}\n@@ -368,7 +371,7 @@ _Jv_JNI_NewLocalRef (JNIEnv *env, jobject obj)\n       _Jv_JNI_EnsureLocalCapacity (env, 16);\n       // We know the first element of the new frame will be ok.\n       env->locals->vec[0] = obj;\n-      env->locals->allocated_p = 1;\n+      env->locals->allocated_p = true;\n     }\n \n   mark_for_gc (obj, local_ref_table);\n@@ -397,7 +400,7 @@ _Jv_JNI_PopLocalFrame (JNIEnv *env, jobject result, int stop)\n \t{\n \t  if (rf->allocated_p)\n \t    memset (&rf->vec[0], 0, rf->size * sizeof (jobject));\n-\t  rf->allocated_p = 0;\n+\t  rf->allocated_p = false;\n \t  rf = NULL;\n \t  break;\n \t}\n@@ -541,8 +544,8 @@ _Jv_JNI_FindClass (JNIEnv *env, const char *name)\n       jstring n = JvNewStringUTF (s);\n \n       java::lang::ClassLoader *loader = NULL;\n-      if (env->klass != NULL)\n-\tloader = env->klass->getClassLoaderInternal ();\n+      if (env->locals->loader != NULL)\n+\tloader = env->locals->loader;\n \n       if (loader == NULL)\n \t{\n@@ -2087,18 +2090,14 @@ mangled_name (jclass klass, _Jv_Utf8Const *func_name,\n   buf[here] = '\\0';\n }\n \n-// Return the current thread's JNIEnv; if one does not exist, create\n-// it.  Also create a new system frame for use.  This is `extern \"C\"'\n-// because the compiler calls it.\n-extern \"C\" JNIEnv *\n-_Jv_GetJNIEnvNewFrame (jclass klass)\n+JNIEnv *\n+_Jv_GetJNIEnvNewFrameWithLoader (::java::lang::ClassLoader *loader)\n {\n   JNIEnv *env = _Jv_GetCurrentJNIEnv ();\n   if (__builtin_expect (env == NULL, false))\n     {\n       env = (JNIEnv *) _Jv_MallocUnchecked (sizeof (JNIEnv));\n       env->p = &_Jv_JNIFunctions;\n-      env->klass = klass;\n       env->locals = NULL;\n       // We set env->ex below.\n \n@@ -2107,11 +2106,12 @@ _Jv_GetJNIEnvNewFrame (jclass klass)\n \t_Jv_MallocUnchecked (sizeof (_Jv_JNI_LocalFrame)\n \t\t\t     + (FRAME_SIZE\n \t\t\t\t* sizeof (jobject)));\n-      \n+\n       env->bottom_locals->marker = MARK_SYSTEM;\n       env->bottom_locals->size = FRAME_SIZE;\n       env->bottom_locals->next = NULL;\n-      env->bottom_locals->allocated_p = 0;\n+      env->bottom_locals->allocated_p = false;\n+      // We set the klass field below.\n       memset (&env->bottom_locals->vec[0], 0, \n \t      env->bottom_locals->size * sizeof (jobject));\n \n@@ -2123,23 +2123,25 @@ _Jv_GetJNIEnvNewFrame (jclass klass)\n   // built, above.\n \n   if (__builtin_expect (env->locals == NULL, true))\n-    env->locals = env->bottom_locals;\n-\n+    {\n+      env->locals = env->bottom_locals;\n+      env->locals->loader = loader;\n+    }\n   else\n     {\n       // Alternatively, we might be re-entering JNI, in which case we can't\n       // reuse the bottom_locals frame, because it is already underneath\n       // us. So we need to make a new one.\n-\n       _Jv_JNI_LocalFrame *frame\n \t= (_Jv_JNI_LocalFrame *) _Jv_MallocUnchecked (sizeof (_Jv_JNI_LocalFrame)\n \t\t\t\t\t\t      + (FRAME_SIZE\n \t\t\t\t\t\t\t * sizeof (jobject)));\n-      \n+\n       frame->marker = MARK_SYSTEM;\n       frame->size = FRAME_SIZE;\n-      frame->allocated_p = 0;\n+      frame->allocated_p = false;\n       frame->next = env->locals;\n+      frame->loader = loader;\n \n       memset (&frame->vec[0], 0, \n \t      frame->size * sizeof (jobject));\n@@ -2152,6 +2154,15 @@ _Jv_GetJNIEnvNewFrame (jclass klass)\n   return env;\n }\n \n+// Return the current thread's JNIEnv; if one does not exist, create\n+// it.  Also create a new system frame for use.  This is `extern \"C\"'\n+// because the compiler calls it.\n+extern \"C\" JNIEnv *\n+_Jv_GetJNIEnvNewFrame (jclass klass)\n+{\n+  return _Jv_GetJNIEnvNewFrameWithLoader (klass->getClassLoaderInternal());\n+}\n+\n // Destroy the env's reusable resources. This is called from the thread\n // destructor \"finalize_native\" in natThread.cc\n void \n@@ -2392,7 +2403,6 @@ _Jv_JNI_AttachCurrentThread (JavaVM *, jstring name, void **penv,\n     return JNI_ERR;\n   env->p = &_Jv_JNIFunctions;\n   env->ex = NULL;\n-  env->klass = NULL;\n   env->bottom_locals\n     = (_Jv_JNI_LocalFrame *) _Jv_MallocUnchecked (sizeof (_Jv_JNI_LocalFrame)\n \t\t\t\t\t\t  + (FRAME_SIZE\n@@ -2404,9 +2414,10 @@ _Jv_JNI_AttachCurrentThread (JavaVM *, jstring name, void **penv,\n       return JNI_ERR;\n     }\n \n-  env->locals->allocated_p = 0;\n+  env->locals->allocated_p = false;\n   env->locals->marker = MARK_SYSTEM;\n   env->locals->size = FRAME_SIZE;\n+  env->locals->loader = NULL;\n   env->locals->next = NULL;\n \n   for (int i = 0; i < env->locals->size; ++i)"}, {"sha": "1fff2b2f0194874c4a7dd12ca5f5f919112e6247", "filename": "libjava/testsuite/libjava.jni/jni.exp", "status": "modified", "additions": 66, "deletions": 23, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp?ref=262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781", "patch": "@@ -101,7 +101,8 @@ proc gcj_jni_test_one {file} {\n \n   # The base name.  We use it for several purposes.\n   set main [file rootname [file tail $file]]\n-  if {! [runtest_file_p $runtests $main]} {\n+  if {! [runtest_file_p $runtests $main]\n+      || $main == \"pr29812\" || $main == \"pr29812_injar\"} {\n     # Simply skip it.\n     return 1\n   }\n@@ -235,6 +236,33 @@ proc gcj_jni_invocation_compile_c_to_binary {file {options {}}} {\n   return 1\n }\n \n+proc gcj_jni_get_cxxflags_invocation {} {\n+  # Darwin needs -liconv linked, otherwise we get some unresolved.\n+  # If you're building the compiler with --prefix set to a place\n+  # where it's not yet installed, then the linker won't be able to\n+  # find the libgcc used by libffi.dylib.  We could pass the\n+  # -dylib_file option, but that's complicated, and it's much easier\n+  # to just make the linker find libgcc using -L options.\n+  # Similar logic applies to libgcj.\n+  if { [istarget \"*-*-darwin*\"] } {\n+      set cxxflags \"-L../.libs -shared-libgcc -ljvm -lgcj -liconv\"\n+  } else {\n+      global LIBJAVA\n+      if [info exists LIBJAVA] {\n+\t  set libjava $LIBJAVA;\n+      } else {\n+\t  set libjava [libjava_find_lib libjava gcj]\n+      }\n+      set cxxflags \"$libjava -ljvm\"\n+  }\n+\n+  if { [istarget \"*-*-solaris*\"] } {\n+    lappend cxxflags \"-lsocket\"\n+  }\n+\n+  return $cxxflags\n+}\n+\n # Do all the work for a single invocation API test.  Return 0 on\n # failure.\n proc gcj_jni_invocation_test_one {file} {\n@@ -259,29 +287,8 @@ proc gcj_jni_invocation_test_one {file} {\n #   pass \"bytecompile $file\"\n \n   set cfile [file rootname $file].c\n-  # Darwin needs -liconv linked, otherwise we get some unresolved.\n-  # If you're building the compiler with --prefix set to a place\n-  # where it's not yet installed, then the linker won't be able to\n-  # find the libgcc used by libffi.dylib.  We could pass the\n-  # -dylib_file option, but that's complicated, and it's much easier\n-  # to just make the linker find libgcc using -L options.\n-  # Similar logic applies to libgcj.\n-  if { [istarget \"*-*-darwin*\"] } {\n-      set cxxflags \"-L../.libs -shared-libgcc -ljvm -lgcj -liconv\"\n-  } else {\n-      global LIBJAVA\n-      if [info exists LIBJAVA] {\n-\t  set libjava $LIBJAVA;\n-      } else {\n-\t  set libjava [libjava_find_lib libjava gcj]\n-      }\n-      set cxxflags \"$libjava -ljvm\"\n-  }\n-\n-  if { [istarget \"*-*-solaris*\"] } {\n-    lappend cxxflags \"-lsocket\"\n-  }\n \n+  set cxxflags [gcj_jni_get_cxxflags_invocation]\n   if {! [gcj_jni_invocation_compile_c_to_binary $cfile $cxxflags]} {\n     # FIXME\n     return 0\n@@ -309,6 +316,40 @@ proc gcj_jni_invocation_test_one {file} {\n   return 1\n }\n \n+proc gcj_jni_pr29812 {} {\n+  global srcdir subdir\n+  global INTERPRETER runtests\n+\n+  # Set up a global we need.\n+  libjava_arguments\n+\n+  set b ${srcdir}/${subdir}\n+\n+  if {! [runtest_file_p $runtests pr29812]} {\n+    # Simply skip it.\n+    return 1\n+  }\n+\n+  if {! [gcj_jni_compile_c_to_so $b/pr29812.c \"\"]} {\n+    return 0\n+  }\n+  if {! [gcj_jni_compile_c_to_so $b/pr29812_injar.c \"\"]} {\n+    return 0\n+  }\n+\n+  set gij [libjava_find_gij]\n+  if {$INTERPRETER == \"yes\" && $gij != \"\"} {\n+    if {! [libjava_invoke pr29812 \"gij test\" opts $gij \\\n+\t     \"\" $b/pr29812.out \"\" \\\n+\t     -classpath $b/pr29812.jar pr29812 $b/pr29812_injar.jar]} {\n+      return 0\n+    }\n+  }\n+\n+  # When we succeed we remove all our clutter.\n+  eval gcj_cleanup [glob -nocomplain -- *pr29812*]\n+}\n+\n # Run the JNI tests.\n proc gcj_jni_run {} {\n   global srcdir subdir\n@@ -328,6 +369,8 @@ proc gcj_jni_run {} {\n     foreach x $srcfiles {\n       gcj_jni_invocation_test_one $x\n     }\n+\n+    gcj_jni_pr29812\n   } else {\n     verbose \"JNI tests not run in cross-compilation environment\"\n   }"}, {"sha": "809d5ed2e80197cc9262fd39038fd1411465186e", "filename": "libjava/testsuite/libjava.jni/pr29812.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812.c?ref=262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781", "patch": "@@ -0,0 +1,7 @@\n+#include <pr29812.h>\n+\n+void\n+Java_pr29812_baseN (JNIEnv *env, jclass barf)\n+{\n+  /* nothing */\n+}"}, {"sha": "70d19993831172ee7f34c8e657f5277247fdea7a", "filename": "libjava/testsuite/libjava.jni/pr29812.h", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812.h?ref=262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781", "patch": "@@ -0,0 +1,19 @@\n+/* DO NOT EDIT THIS FILE - it is machine generated */\n+\n+#include <jni.h>\n+\n+#ifndef __pr29812__\n+#define __pr29812__\n+\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+\n+JNIEXPORT void JNICALL Java_pr29812_baseN (JNIEnv *env, jclass);\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* __pr29812__ */"}, {"sha": "c3cf6aba0b52d97a54d8e86d5487c08a1620f57a", "filename": "libjava/testsuite/libjava.jni/pr29812.jar", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812.jar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812.jar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812.jar?ref=262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781"}, {"sha": "4dde744bee37b549b91b063abde18615bd8cd8af", "filename": "libjava/testsuite/libjava.jni/pr29812.java", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812.java?ref=262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781", "patch": "@@ -0,0 +1,25 @@\n+import java.io.File;\n+import java.net.*;\n+import java.lang.reflect.Method;\n+\n+public class pr29812\n+{\n+  static {\n+    System.loadLibrary(\"pr29812\");\n+  }\n+\n+  public static native void baseN();\n+\n+  public static void main(String[] args) throws Throwable\n+  {\n+    // Make sure JNI environment is initialized.\n+    baseN();\n+\n+    File jar = new File(args[0]);\n+    URL u = jar.toURL();\n+    URLClassLoader uc = new URLClassLoader(new URL[] { u });\n+    Class k = uc.loadClass(\"pr29812_injar\");\n+    Method m = k.getMethod(\"doit\", (Class[]) null);\n+    m.invoke(null, (Object[]) null);\n+  }\n+}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libjava/testsuite/libjava.jni/pr29812.out", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812.out?ref=262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781"}, {"sha": "5b045ce72a8eb983cf795e27cc2d435a00bf9dbf", "filename": "libjava/testsuite/libjava.jni/pr29812_injar.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812_injar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812_injar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812_injar.c?ref=262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781", "patch": "@@ -0,0 +1,26 @@\n+\n+#include <stdlib.h>\n+#include <assert.h>\n+#include <pr29812_injar.h>\n+\n+JNIEXPORT jint JNICALL\n+JNI_OnLoad (JavaVM *vm, void *nothing)\n+{\n+  JNIEnv *env;\n+  jint r;\n+  jclass k;\n+\n+  r = (*vm)->GetEnv (vm, (void **) &env, JNI_VERSION_1_2);\n+  assert (r == JNI_OK);\n+  k = (*env)->FindClass (env, \"pr29812_injar$inner\");\n+  assert (k != NULL);\n+\n+  return JNI_VERSION_1_2;\n+}\n+\n+void\n+Java_pr29812_1injar_doit (JNIEnv *env, jclass b)\n+{\n+  jclass k = (*env)->FindClass(env, \"pr29812_injar$inner\");\n+  assert (k != NULL);\n+}"}, {"sha": "40f74ff393fa71b499713381a47494d32cf73da0", "filename": "libjava/testsuite/libjava.jni/pr29812_injar.h", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812_injar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812_injar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812_injar.h?ref=262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781", "patch": "@@ -0,0 +1,19 @@\n+/* DO NOT EDIT THIS FILE - it is machine generated */\n+\n+#include <jni.h>\n+\n+#ifndef __pr29812_1injar__\n+#define __pr29812_1injar__\n+\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+\n+JNIEXPORT void JNICALL Java_pr29812_1injar_doit (JNIEnv *env, jclass);\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* __pr29812_1injar__ */"}, {"sha": "438dc0063b594f56d95bb44bd6b3b3edbe37e0d0", "filename": "libjava/testsuite/libjava.jni/pr29812_injar.jar", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812_injar.jar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812_injar.jar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812_injar.jar?ref=262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781"}, {"sha": "9dc32a3cdcd20572f02cf553822e52967031e377", "filename": "libjava/testsuite/libjava.jni/pr29812_injar.java", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812_injar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812_injar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fpr29812_injar.java?ref=262fa8a4b5f0e5859a4f059e0bb16a94e7bbe781", "patch": "@@ -0,0 +1,12 @@\n+public class pr29812_injar\n+{\n+  public class inner\n+  {\n+  }\n+\n+  static {\n+    System.loadLibrary(\"pr29812_injar\");\n+  }\n+\n+  public static native void doit();\n+}"}]}