{"sha": "4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRlZDZhZGM1MWJiY2YzZDRiNmY0M2E5MWM3NmIwNjI4ODE1YThjZA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2019-07-10T19:34:03Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2019-07-10T19:34:03Z"}, "message": "predicates.md (cint34_operand): Update SIGNED_34BIT_OFFSET_P call.\n\n2019-07-10  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/predicates.md (cint34_operand): Update\n\tSIGNED_34BIT_OFFSET_P call.\n\t(pcrel_address): Update SIGNED_34BIT_OFFSET_P call.\n\t(pcrel_external_address): Update SIGNED_34BIT_OFFSET_P call.\n\t* config/rs6000/rs6000.c (rs6000_prefixed_address): Update\n\tSIGNED_16BIT_OFFSET_P and SIGNED_34BIT_OFFSET_P calls.\n\t* config/rs6000/rs6000.h (SIGNED_16BIT_OFFSET_P): Remove EXTRA\n\targument.\n\t(SIGNED_34BIT_OFFSET_P): Remove EXTRA argument.\n\t(SIGNED_16BIT_OFFSET_EXTRA_P): New macro, like\n\tSIGNED_16BIT_OFFSET_P with an EXTRA argument.\n\t(SIGNED_34BIT_OFFSET_EXTRA_P): New macro, like\n\tSIGNED_34BIT_OFFSET_P with an EXTRA argument.\n\nFrom-SVN: r273370", "tree": {"sha": "0b5fb3c324493f21cff4532e5fdea8deb0ec9ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b5fb3c324493f21cff4532e5fdea8deb0ec9ac7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd/comments", "author": null, "committer": null, "parents": [{"sha": "4b5c5391849dd58f8cf3764b642da95e7e1aaaca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b5c5391849dd58f8cf3764b642da95e7e1aaaca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b5c5391849dd58f8cf3764b642da95e7e1aaaca"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "e5c05e5e88d0210ace5c3c4f24146548b390aadf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd", "patch": "@@ -1,3 +1,19 @@\n+2019-07-10  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/predicates.md (cint34_operand): Update\n+\tSIGNED_34BIT_OFFSET_P call.\n+\t(pcrel_address): Update SIGNED_34BIT_OFFSET_P call.\n+\t(pcrel_external_address): Update SIGNED_34BIT_OFFSET_P call.\n+\t* config/rs6000/rs6000.c (rs6000_prefixed_address): Update\n+\tSIGNED_16BIT_OFFSET_P and SIGNED_34BIT_OFFSET_P calls.\n+\t* config/rs6000/rs6000.h (SIGNED_16BIT_OFFSET_P): Remove EXTRA\n+\targument.\n+\t(SIGNED_34BIT_OFFSET_P): Remove EXTRA argument.\n+\t(SIGNED_16BIT_OFFSET_EXTRA_P): New macro, like\n+\tSIGNED_16BIT_OFFSET_P with an EXTRA argument.\n+\t(SIGNED_34BIT_OFFSET_EXTRA_P): New macro, like\n+\tSIGNED_34BIT_OFFSET_P with an EXTRA argument.\n+\n 2019-07-10  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/rs6000/darwin.h (LIB_SPEC): Collate this spec here."}, {"sha": "e64f772de02fc1cab8694c5bc305b9f4fd6ec720", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd", "patch": "@@ -309,7 +309,7 @@\n   if (!TARGET_PREFIXED_ADDR)\n     return 0;\n \n-  return SIGNED_34BIT_OFFSET_P (INTVAL (op), 0);\n+  return SIGNED_34BIT_OFFSET_P (INTVAL (op));\n })\n \n ;; Return 1 if op is a register that is not special.\n@@ -1638,7 +1638,7 @@\n       rtx op0 = XEXP (op, 0);\n       rtx op1 = XEXP (op, 1);\n \n-      if (!CONST_INT_P (op1) || !SIGNED_34BIT_OFFSET_P (INTVAL (op1), 0))\n+      if (!CONST_INT_P (op1) || !SIGNED_34BIT_OFFSET_P (INTVAL (op1)))\n \treturn false;\n \n       op = op0;\n@@ -1673,7 +1673,7 @@\n       rtx op0 = XEXP (op, 0);\n       rtx op1 = XEXP (op, 1);\n \n-      if (!CONST_INT_P (op1) || !SIGNED_34BIT_OFFSET_P (INTVAL (op1), 0))\n+      if (!CONST_INT_P (op1) || !SIGNED_34BIT_OFFSET_P (INTVAL (op1)))\n \treturn false;\n \n       op = op0;"}, {"sha": "39fa6ec382bd7332357cddce1832019f5016fb67", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd", "patch": "@@ -21523,11 +21523,11 @@ rs6000_prefixed_address (rtx addr, machine_mode mode)\n \treturn false;\n \n       HOST_WIDE_INT value = INTVAL (op1);\n-      if (!SIGNED_34BIT_OFFSET_P (value, 0))\n+      if (!SIGNED_34BIT_OFFSET_P (value))\n \treturn false;\n \n       /* Offset larger than 16-bits?  */\n-      if (!SIGNED_16BIT_OFFSET_P (value, 0))\n+      if (!SIGNED_16BIT_OFFSET_P (value))\n \treturn true;\n \n       /* DQ instruction (bottom 4 bits must be 0) for vectors.  */"}, {"sha": "5f3b9edd388071e0477dc290990f53c4a057a76a", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=4ded6adc51bbcf3d4b6f43a91c76b0628815a8cd", "patch": "@@ -2526,16 +2526,27 @@ typedef struct GTY(()) machine_function\n #pragma GCC poison TARGET_FLOAT128 OPTION_MASK_FLOAT128 MASK_FLOAT128\n #endif\n \n-/* Whether a given VALUE is a valid 16- or 34-bit signed offset.  EXTRA is the\n-   amount that we can't touch at the high end of the range (typically if the\n-   address is split into smaller addresses, the extra covers the addresses\n-   which might be generated when the insn is split).  */\n-#define SIGNED_16BIT_OFFSET_P(VALUE, EXTRA)\t\t\t\t\\\n-  IN_RANGE (VALUE,\t\t\t\t\t\t\t\\\n+/* Whether a given VALUE is a valid 16 or 34-bit signed offset.  */\n+#define SIGNED_16BIT_OFFSET_P(VALUE)\t\t\t\t\t\\\n+  IN_RANGE ((VALUE),\t\t\t\t\t\t\t\\\n+\t    -(HOST_WIDE_INT_1 << 15),\t\t\t\t\t\\\n+\t    (HOST_WIDE_INT_1 << 15) - 1)\n+\n+#define SIGNED_34BIT_OFFSET_P(VALUE)\t\t\t\t\t\\\n+  IN_RANGE ((VALUE),\t\t\t\t\t\t\t\\\n+\t    -(HOST_WIDE_INT_1 << 33),\t\t\t\t\t\\\n+\t    (HOST_WIDE_INT_1 << 33) - 1)\n+\n+/* Like SIGNED_16BIT_OFFSET_P and SIGNED_34BIT_OFFSET_P, but with an extra\n+   argument that gives a length to validate a range of addresses, to allow for\n+   splitting insns into several insns, each of which has an offsettable\n+   address.  */\n+#define SIGNED_16BIT_OFFSET_EXTRA_P(VALUE, EXTRA)\t\t\t\\\n+  IN_RANGE ((VALUE),\t\t\t\t\t\t\t\\\n \t    -(HOST_WIDE_INT_1 << 15),\t\t\t\t\t\\\n \t    (HOST_WIDE_INT_1 << 15) - 1 - (EXTRA))\n \n-#define SIGNED_34BIT_OFFSET_P(VALUE, EXTRA)\t\t\t\t\\\n-  IN_RANGE (VALUE,\t\t\t\t\t\t\t\\\n+#define SIGNED_34BIT_OFFSET_EXTRA_P(VALUE, EXTRA)\t\t\t\\\n+  IN_RANGE ((VALUE),\t\t\t\t\t\t\t\\\n \t    -(HOST_WIDE_INT_1 << 33),\t\t\t\t\t\\\n \t    (HOST_WIDE_INT_1 << 33) - 1 - (EXTRA))"}]}