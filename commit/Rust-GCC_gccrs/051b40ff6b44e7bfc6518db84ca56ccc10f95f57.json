{"sha": "051b40ff6b44e7bfc6518db84ca56ccc10f95f57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUxYjQwZmY2YjQ0ZTdiZmM2NTE4ZGI4NGNhNTZjY2MxMGY5NWY1Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-04-16T15:32:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-04-16T15:32:22Z"}, "message": "re PR c++/49152 (pretty printer cannot handle iterators and other complex expressions)\n\n/cp\n2012-04-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/49152\n\t* call.c (op_error): Print types; when flag_diagnostics_show_caret\n\tis false print expressions too.\n\t(op_error_string): Add.\n\n/testsuite\n2012-04-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/49152\n\t* g++.dg/diagnostic/operator1.C: New.\n\t* g++.dg/ext/label5.C: Adjust.\n\t* g++.dg/ext/va-arg1.C: Likewise.\n\t* g++.dg/other/error20.C: Likewise.\n\t* g++.dg/other/error20.C: Likewise.\n\t* g++.dg/other/error16.C: Likewise.\n\t* g++.dg/other/error10.C: Likewise.\n\t* g++.dg/parse/error30.C: Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-err1.C: Likewise.\n\nFrom-SVN: r186499", "tree": {"sha": "9a90c6960138f9284e38133c15d99290699783b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a90c6960138f9284e38133c15d99290699783b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/051b40ff6b44e7bfc6518db84ca56ccc10f95f57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/051b40ff6b44e7bfc6518db84ca56ccc10f95f57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/051b40ff6b44e7bfc6518db84ca56ccc10f95f57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/comments", "author": null, "committer": null, "parents": [{"sha": "d6cb05db2ecffff53e2b9f5c291e7aed3bbf59ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6cb05db2ecffff53e2b9f5c291e7aed3bbf59ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6cb05db2ecffff53e2b9f5c291e7aed3bbf59ac"}], "stats": {"total": 128, "additions": 87, "deletions": 41}, "files": [{"sha": "71cf71c060611f9223cba0a678a9ebafae7b97fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=051b40ff6b44e7bfc6518db84ca56ccc10f95f57", "patch": "@@ -1,3 +1,10 @@\n+2012-04-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/49152\n+\t* call.c (op_error): Print types; when flag_diagnostics_show_caret\n+\tis false print expressions too.\n+\t(op_error_string): Add.\n+\n 2012-04-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51148"}, {"sha": "06a12250e2c7c018caa2aa940b5486f3758f2794", "filename": "gcc/cp/call.c", "status": "modified", "additions": 59, "deletions": 32, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=051b40ff6b44e7bfc6518db84ca56ccc10f95f57", "patch": "@@ -4149,6 +4149,28 @@ build_op_call (tree obj, VEC(tree,gc) **args, tsubst_flags_t complain)\n   return ret;\n }\n \n+/* Called by op_error to prepare format strings suitable for the error\n+   function.  It concatenates a prefix (controlled by MATCH), ERRMSG,\n+   and a suffix (controlled by NTYPES).  */\n+\n+static const char *\n+op_error_string (const char *errmsg, int ntypes, bool match)\n+{\n+  const char *msg;\n+\n+  const char *msgp = concat (match ? G_(\"ambiguous overload for \")\n+\t\t\t           : G_(\"no match for \"), errmsg, NULL);\n+\n+  if (ntypes == 3)\n+    msg = concat (msgp, G_(\" (operand types are %qT, %qT, and %qT)\"), NULL);\n+  else if (ntypes == 2)\n+    msg = concat (msgp, G_(\" (operand types are %qT and %qT)\"), NULL);\n+  else\n+    msg = concat (msgp, G_(\" (operand type is %qT)\"), NULL);\n+\n+  return msg;\n+}\n+\n static void\n op_error (enum tree_code code, enum tree_code code2,\n \t  tree arg1, tree arg2, tree arg3, bool match)\n@@ -4163,58 +4185,63 @@ op_error (enum tree_code code, enum tree_code code2,\n   switch (code)\n     {\n     case COND_EXPR:\n-      if (match)\n-        error (\"ambiguous overload for ternary %<operator?:%> \"\n-               \"in %<%E ? %E : %E%>\", arg1, arg2, arg3);\n+      if (flag_diagnostics_show_caret)\n+\terror (op_error_string (G_(\"ternary %<operator?:%>\"), 3, match),\n+\t       TREE_TYPE (arg1), TREE_TYPE (arg2), TREE_TYPE (arg3));\n       else\n-        error (\"no match for ternary %<operator?:%> \"\n-               \"in %<%E ? %E : %E%>\", arg1, arg2, arg3);\n+\terror (op_error_string (G_(\"ternary %<operator?:%> \"\n+\t\t\t\t   \"in %<%E ? %E : %E%>\"), 3, match),\n+\t       arg1, arg2, arg3,\n+\t       TREE_TYPE (arg1), TREE_TYPE (arg2), TREE_TYPE (arg3));\n       break;\n \n     case POSTINCREMENT_EXPR:\n     case POSTDECREMENT_EXPR:\n-      if (match)\n-        error (\"ambiguous overload for %<operator%s%> in %<%E%s%>\",\n-               opname, arg1, opname);\n+      if (flag_diagnostics_show_caret)\n+\terror (op_error_string (G_(\"%<operator%s%>\"), 1, match),\n+\t       opname, TREE_TYPE (arg1));\n       else\n-        error (\"no match for %<operator%s%> in %<%E%s%>\", \n-               opname, arg1, opname);\n+\terror (op_error_string (G_(\"%<operator%s%> in %<%E%s%>\"), 1, match),\n+\t       opname, arg1, opname, TREE_TYPE (arg1));\n       break;\n \n     case ARRAY_REF:\n-      if (match)\n-        error (\"ambiguous overload for %<operator[]%> in %<%E[%E]%>\", \n-               arg1, arg2);\n+      if (flag_diagnostics_show_caret)\n+\terror (op_error_string (G_(\"%<operator[]%>\"), 2, match),\n+\t       TREE_TYPE (arg1), TREE_TYPE (arg2));\n       else\n-        error (\"no match for %<operator[]%> in %<%E[%E]%>\", \n-               arg1, arg2);\n+\terror (op_error_string (G_(\"%<operator[]%> in %<%E[%E]%>\"), 2, match),\n+\t       arg1, arg2, TREE_TYPE (arg1), TREE_TYPE (arg2));\n       break;\n \n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n-      if (match)\n-        error (\"ambiguous overload for %qs in %<%s %E%>\", \n-               opname, opname, arg1);\n+      if (flag_diagnostics_show_caret)\n+\terror (op_error_string (G_(\"%qs\"), 1, match),\n+\t       opname, TREE_TYPE (arg1));\n       else\n-        error (\"no match for %qs in %<%s %E%>\",\n-               opname, opname, arg1);\n+\terror (op_error_string (G_(\"%qs in %<%s %E%>\"), 1, match),\n+\t       opname, opname, arg1, TREE_TYPE (arg1));\n       break;\n \n     default:\n       if (arg2)\n-        if (match)\n-          error (\"ambiguous overload for %<operator%s%> in %<%E %s %E%>\",\n-                  opname, arg1, opname, arg2);\n-        else\n-          error (\"no match for %<operator%s%> in %<%E %s %E%>\",\n-                 opname, arg1, opname, arg2);\n+\tif (flag_diagnostics_show_caret)\n+\t  error (op_error_string (G_(\"%<operator%s%>\"), 2, match),\n+\t\t opname, TREE_TYPE (arg1), TREE_TYPE (arg2));\n+\telse\n+\t  error (op_error_string (G_(\"%<operator%s%> in %<%E %s %E%>\"),\n+\t\t\t\t  2, match),\n+\t\t opname, arg1, opname, arg2,\n+\t\t TREE_TYPE (arg1), TREE_TYPE (arg2));\n       else\n-        if (match)\n-          error (\"ambiguous overload for %<operator%s%> in %<%s%E%>\",\n-                 opname, opname, arg1);\n-        else\n-          error (\"no match for %<operator%s%> in %<%s%E%>\",\n-                 opname, opname, arg1);\n+\tif (flag_diagnostics_show_caret)\n+\t  error (op_error_string (G_(\"%<operator%s%>\"), 1, match),\n+\t\t opname, TREE_TYPE (arg1));\n+\telse\n+\t  error (op_error_string (G_(\"%<operator%s%> in %<%s%E%>\"),\n+\t\t\t\t  1, match),\n+\t\t opname, opname, arg1, TREE_TYPE (arg1));\n       break;\n     }\n }"}, {"sha": "1f706767e27f20335c6c4d60b598c45fb5315042", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=051b40ff6b44e7bfc6518db84ca56ccc10f95f57", "patch": "@@ -1,3 +1,16 @@\n+2012-04-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/49152\n+\t* g++.dg/diagnostic/operator1.C: New.\n+\t* g++.dg/ext/label5.C: Adjust.\n+\t* g++.dg/ext/va-arg1.C: Likewise.\n+\t* g++.dg/other/error20.C: Likewise.\n+\t* g++.dg/other/error20.C: Likewise.\n+\t* g++.dg/other/error16.C: Likewise.\n+\t* g++.dg/other/error10.C: Likewise.\n+\t* g++.dg/parse/error30.C: Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-err1.C: Likewise.\n+\n 2012-04-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51148"}, {"sha": "932ff1bee9265d4f425928d1799cfa5826c8f50d", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-err1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-err1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-err1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-err1.C?ref=051b40ff6b44e7bfc6518db84ca56ccc10f95f57", "patch": "@@ -4,5 +4,5 @@\n void foo()\n {\n   int x[1];\n-  [x]{} = 0;\t\t\t// { dg-error \"lambda closure\" }\n+  [x]{} = 0;\t\t\t// { dg-error \"lambda\" }\n }"}, {"sha": "34ca90d87b37be25c5d35b1355661dae4fc3e6fd", "filename": "gcc/testsuite/g++.dg/ext/label5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Flabel5.C?ref=051b40ff6b44e7bfc6518db84ca56ccc10f95f57", "patch": "@@ -2,5 +2,5 @@\n // PR c++/24052\n \n struct A { };\n-int main() { b: A() && && b; } // { dg-error \"A\\\\(\\\\) && && *b\" }\n+int main() { b: A() && && b; } // { dg-error \"operand types are 'A' and 'void\\\\*'\" }\n // { dg-message \"candidate|operator&&|no known conversion\" \"additional\" { target *-*-* } 5 }"}, {"sha": "5606128e5f777d715b61d719b0fac0d36773d25b", "filename": "gcc/testsuite/g++.dg/ext/va-arg1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fva-arg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fva-arg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fva-arg1.C?ref=051b40ff6b44e7bfc6518db84ca56ccc10f95f57", "patch": "@@ -4,5 +4,5 @@ struct A {};\n \n void foo()\n {\n-  ++__builtin_va_arg(0, A); // { dg-error \"'\\\\+\\\\+va_arg\\\\(0, A\\\\)'\" }\n+  ++__builtin_va_arg(0, A); // { dg-error \"operand type is 'A'\" }\n }"}, {"sha": "546a4d65c4a74777c7a0979c57484e36deff7b95", "filename": "gcc/testsuite/g++.dg/other/error10.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror10.C?ref=051b40ff6b44e7bfc6518db84ca56ccc10f95f57", "patch": "@@ -6,10 +6,9 @@ template<int> struct A {};\n \n template<int N>\n void foo(const A<N> &a)\n-{ -A<N>(a); } // { dg-error \"\\\\(\\\\* & a\\\\)\" \"\" }\n+{ -A<N>(a); } // { dg-error \"operand type is 'A<0>'\" }\n \n void bar()\n {\n     foo(A<0>()); // { dg-message \"required from here\" \"\" }\n }\n-"}, {"sha": "38c0fd63fd122579a6772356aeb01201fad64ccb", "filename": "gcc/testsuite/g++.dg/other/error16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror16.C?ref=051b40ff6b44e7bfc6518db84ca56ccc10f95f57", "patch": "@@ -10,5 +10,5 @@ typedef Outer<X> XOuter;\n \n int main() {\n   Outer<int>  ab;\n-  ab.foo() == 1; // { dg-error \"ab.Outer\" }\n+  ab.foo() == 1; // { dg-error \"operand types are 'Outer<int>::Inner' and 'int'\" }\n }"}, {"sha": "bb7d7b3b078e08c4cb4cc4b3b69255cc3011aa52", "filename": "gcc/testsuite/g++.dg/other/error20.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror20.C?ref=051b40ff6b44e7bfc6518db84ca56ccc10f95f57", "patch": "@@ -8,6 +8,6 @@ struct A\t\t\t// { dg-message \"operator=|no known conversion\" }\n \n void bar (A& a)\n {\n-  a.foo () = 0; // { dg-error \"A::foo\\\\(\\\\) = 0\" }\n+  a.foo () = 0; // { dg-error \"operand types are 'A' and 'int'\" }\n   // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 11 }\n }   "}, {"sha": "aabdcc701c53fd1f9aee531502f34763c3176c3f", "filename": "gcc/testsuite/g++.dg/parse/error30.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051b40ff6b44e7bfc6518db84ca56ccc10f95f57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror30.C?ref=051b40ff6b44e7bfc6518db84ca56ccc10f95f57", "patch": "@@ -8,5 +8,5 @@ struct A\n   A(int);\n };\n \n-A a = -A();\t// { dg-error \"10:no match for.*operator-.*in.*-A\\\\(\\\\)\" }\n-A b = -A(5);\t// { dg-error \"11:no match for.*operator-.*in.*-A\\\\(5\\\\)\" }\n+A a = -A();\t// { dg-error \"operand type is 'A'\" }\n+A b = -A(5);\t// { dg-error \"operand type is 'A'\" }"}]}