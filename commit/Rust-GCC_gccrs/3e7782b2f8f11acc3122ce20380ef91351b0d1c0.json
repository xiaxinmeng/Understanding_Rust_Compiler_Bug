{"sha": "3e7782b2f8f11acc3122ce20380ef91351b0d1c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U3NzgyYjJmOGYxMWFjYzMxMjJjZTIwMzgwZWY5MTM1MWIwZDFjMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-21T15:43:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-21T15:43:45Z"}, "message": "basic_string.tcc (append(const basic_string&)): Revert previous change.\n\n2004-01-21  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.tcc (append(const basic_string&)):\n\tRevert previous change.\n\t(append(const basic_string&, size_type, size_type)): Revert\n\tprevious change, use _M_check and _M_limit.\n\nFrom-SVN: r76282", "tree": {"sha": "568a85c377605b689708a73745aaf8f7b7c46140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/568a85c377605b689708a73745aaf8f7b7c46140"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e7782b2f8f11acc3122ce20380ef91351b0d1c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7782b2f8f11acc3122ce20380ef91351b0d1c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e7782b2f8f11acc3122ce20380ef91351b0d1c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7782b2f8f11acc3122ce20380ef91351b0d1c0/comments", "author": null, "committer": null, "parents": [{"sha": "3f07b288984a59621d6b7a9d9db129284eac158d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f07b288984a59621d6b7a9d9db129284eac158d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f07b288984a59621d6b7a9d9db129284eac158d"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "a8c0074b0a0392a3d09d8fc46e262da763cbdce6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7782b2f8f11acc3122ce20380ef91351b0d1c0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7782b2f8f11acc3122ce20380ef91351b0d1c0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3e7782b2f8f11acc3122ce20380ef91351b0d1c0", "patch": "@@ -1,3 +1,10 @@\n+2004-01-21  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.tcc (append(const basic_string&)):\n+\tRevert previous change.\n+\t(append(const basic_string&, size_type, size_type)): Revert\n+\tprevious change, use _M_check and _M_limit.\n+\n 2004-01-21  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.h (_M_check): Change to return"}, {"sha": "ac886774536dc2bae26f4fbf0b5d481c39b5f6f5", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7782b2f8f11acc3122ce20380ef91351b0d1c0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7782b2f8f11acc3122ce20380ef91351b0d1c0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=3e7782b2f8f11acc3122ce20380ef91351b0d1c0", "patch": "@@ -676,26 +676,40 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>&\n     basic_string<_CharT, _Traits, _Alloc>::\n     append(const basic_string& __str)\n-    { return this->append(__str._M_data(), __str.size()); }\n+    {\n+      // Iff appending itself, string needs to pre-reserve the\n+      // correct size so that _M_mutate does not clobber the\n+      // iterators formed here.\n+      const size_type __size = __str.size();\n+      const size_type __len = __size + this->size();\n+      if (__len > this->capacity())\n+\tthis->reserve(__len);\n+      return _M_replace_safe(_M_iend(), _M_iend(), __str._M_ibegin(),\n+\t\t\t     __str._M_iend());\n+    }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>&\n     basic_string<_CharT, _Traits, _Alloc>::\n     append(const basic_string& __str, size_type __pos, size_type __n)\n     {\n-      return this->append(__str._M_data()\n-\t\t\t  + __str._M_check(__pos, \"basic_string::append\"),\n-\t\t\t  __str._M_limit(__pos, __n));\n+      // Iff appending itself, string needs to pre-reserve the\n+      // correct size so that _M_mutate does not clobber the\n+      // iterators formed here.\n+      __pos = __str._M_check(__pos, \"basic_string::append\");\n+      __n = __str._M_limit(__pos, __n);\n+      const size_type __len = __n + this->size();\n+      if (__len > this->capacity())\n+\tthis->reserve(__len);\n+      return _M_replace_safe(_M_iend(), _M_iend(), __str._M_ibegin()\n+\t\t\t     + __pos, __str._M_ibegin() + __pos + __n);\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>&\n     basic_string<_CharT, _Traits, _Alloc>::\n     append(const _CharT* __s, size_type __n)\n     {\n-      // Iff appending itself, string needs to pre-reserve the\n-      // correct size so that _M_mutate does not clobber the\n-      // iterators formed here.\n       __glibcxx_requires_string_len(__s, __n);\n       const size_type __len = __n + this->size();\n       if (__len > this->capacity())"}]}