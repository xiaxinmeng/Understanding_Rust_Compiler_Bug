{"sha": "b2262f4a2cd06d70e9516e38da9712799fed0dbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIyNjJmNGEyY2QwNmQ3MGU5NTE2ZTM4ZGE5NzEyNzk5ZmVkMGRiZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-08-08T19:46:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-08-08T19:46:51Z"}, "message": "flow.c (life_analysis): Only turn off PROP_LOG_LINKS and PROP_AUTOINC at -O0.\n\n        * flow.c (life_analysis): Only turn off PROP_LOG_LINKS and\n        PROP_AUTOINC at -O0.  Don't collect alias info at -O0.\n        (init_propagate_block_info): Don't kill memory stores at -O0.\n        (mark_set_1, mark_used_regs): Likewise.\n\nFrom-SVN: r35571", "tree": {"sha": "d4a86505ea86daa94870b77b80d2cab06ac2636f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4a86505ea86daa94870b77b80d2cab06ac2636f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2262f4a2cd06d70e9516e38da9712799fed0dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2262f4a2cd06d70e9516e38da9712799fed0dbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2262f4a2cd06d70e9516e38da9712799fed0dbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2262f4a2cd06d70e9516e38da9712799fed0dbf/comments", "author": null, "committer": null, "parents": [{"sha": "e2c953b6dd7cba1fa8c848efc53842dacab24a46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2c953b6dd7cba1fa8c848efc53842dacab24a46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2c953b6dd7cba1fa8c848efc53842dacab24a46"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "5e8a1cacdaca269078ce36d971133cefb9dfbd69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2262f4a2cd06d70e9516e38da9712799fed0dbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2262f4a2cd06d70e9516e38da9712799fed0dbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2262f4a2cd06d70e9516e38da9712799fed0dbf", "patch": "@@ -1,3 +1,10 @@\n+2000-08-08  Richard Henderson  <rth@cygnus.com>\n+\n+\t* flow.c (life_analysis): Only turn off PROP_LOG_LINKS and\n+\tPROP_AUTOINC at -O0.  Don't collect alias info at -O0.\n+\t(init_propagate_block_info): Don't kill memory stores at -O0.\n+\t(mark_set_1, mark_used_regs): Likewise.\n+\n 2000-08-08  David Edelsohn  <edelsohn@gnu.org>\n \n \t* rs6000.c (optimization_options): Decorate 'level' as"}, {"sha": "483592f527873341274eed8f5430cd14fd6d93f8", "filename": "gcc/flow.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2262f4a2cd06d70e9516e38da9712799fed0dbf/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2262f4a2cd06d70e9516e38da9712799fed0dbf/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=b2262f4a2cd06d70e9516e38da9712799fed0dbf", "patch": "@@ -2630,7 +2630,7 @@ life_analysis (f, file, flags)\n #endif\n \n   if (! optimize)\n-    flags &= PROP_DEATH_NOTES | PROP_REG_INFO;\n+    flags &= ~(PROP_LOG_LINKS | PROP_AUTOINC);\n \n   /* The post-reload life analysis have (on a global basis) the same\n      registers live as was computed by reload itself.  elimination\n@@ -2646,7 +2646,7 @@ life_analysis (f, file, flags)\n     flags &= ~(PROP_REG_INFO | PROP_AUTOINC);\n \n   /* We want alias analysis information for local dead store elimination.  */\n-  if (flags & PROP_SCAN_DEAD_CODE)\n+  if (optimize && (flags & PROP_SCAN_DEAD_CODE))\n     init_alias_analysis ();\n \n   /* Always remove no-op moves.  Do this before other processing so\n@@ -2676,7 +2676,7 @@ life_analysis (f, file, flags)\n   update_life_info (NULL, UPDATE_LIFE_GLOBAL, flags);\n \n   /* Clean up.  */\n-  if (flags & PROP_SCAN_DEAD_CODE)\n+  if (optimize && (flags & PROP_SCAN_DEAD_CODE))\n     end_alias_analysis ();\n \n   if (file)\n@@ -3756,7 +3756,8 @@ init_propagate_block_info (bb, live, local_set, flags)\n      used later in the block are dead.  So make a pass over the block\n      recording any such that are made and show them dead at the end.  We do\n      a very conservative and simple job here.  */\n-  if ((flags & PROP_SCAN_DEAD_CODE)\n+  if (optimize\n+      && (flags & PROP_SCAN_DEAD_CODE)\n       && (bb->succ == NULL\n           || (bb->succ->succ_next == NULL\n \t      && bb->succ->dest == EXIT_BLOCK_PTR)))\n@@ -4346,7 +4347,7 @@ mark_set_1 (pbi, code, reg, cond, insn, flags)\n \n   /* If this set is a MEM, then it kills any aliased writes. \n      If this set is a REG, then it kills any MEMs which use the reg.  */\n-  if (flags & PROP_SCAN_DEAD_CODE)\n+  if (optimize && (flags & PROP_SCAN_DEAD_CODE))\n     {\n       if (GET_CODE (reg) == MEM || GET_CODE (reg) == REG)\n \t{\n@@ -5321,7 +5322,7 @@ mark_used_regs (pbi, x, cond, insn)\n     case MEM:\n       /* Don't bother watching stores to mems if this is not the \n \t final pass.  We'll not be deleting dead stores this round.  */\n-      if (flags & PROP_SCAN_DEAD_CODE)\n+      if (optimize && (flags & PROP_SCAN_DEAD_CODE))\n \t{\n           /* Invalidate the data for the last MEM stored, but only if MEM is\n \t     something that can be stored into.  */"}]}