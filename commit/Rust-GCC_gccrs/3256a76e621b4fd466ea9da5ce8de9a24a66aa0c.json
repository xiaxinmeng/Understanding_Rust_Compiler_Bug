{"sha": "3256a76e621b4fd466ea9da5ce8de9a24a66aa0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI1NmE3NmU2MjFiNGZkNDY2ZWE5ZGE1Y2U4ZGU5YTI0YTY2YWEwYw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-08-13T18:47:08Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-08-13T18:47:08Z"}, "message": "rs6000.h (EXTRA_CONSTRAINT): Add 'a' for indexed or indirect address operand.\n\n        * config/rs6000/rs6000.h (EXTRA_CONSTRAINT): Add 'a' for indexed\n        or indirect address operand.\n        (EXTRA_ADDRESS_CONSTRAINT): New.\n        * config/rs6000/rs6000.md (prefetch): Change constraint \"p\" to \"a\".\n\nFrom-SVN: r103056", "tree": {"sha": "a8cf9cd6d7c86ffe2d57a6a6c7c45005101c77f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8cf9cd6d7c86ffe2d57a6a6c7c45005101c77f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3256a76e621b4fd466ea9da5ce8de9a24a66aa0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3256a76e621b4fd466ea9da5ce8de9a24a66aa0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3256a76e621b4fd466ea9da5ce8de9a24a66aa0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3256a76e621b4fd466ea9da5ce8de9a24a66aa0c/comments", "author": null, "committer": null, "parents": [{"sha": "d77704579c02c48223abfe8db569941dfe0e4f46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d77704579c02c48223abfe8db569941dfe0e4f46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d77704579c02c48223abfe8db569941dfe0e4f46"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "1058d983437e047768825397f67a905124297668", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3256a76e621b4fd466ea9da5ce8de9a24a66aa0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3256a76e621b4fd466ea9da5ce8de9a24a66aa0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3256a76e621b4fd466ea9da5ce8de9a24a66aa0c", "patch": "@@ -1,3 +1,10 @@\n+2005-08-13  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.h (EXTRA_CONSTRAINT): Add 'a' for indexed\n+\tor indirect address operand.\n+\t(EXTRA_ADDRESS_CONSTRAINT): New.\n+\t* config/rs6000/rs6000.md (prefetch): Change constraint \"p\" to \"a\".\n+\n 2005-08-13  Sebastian Pop  <pop@cri.ensmp.fr>\n \n \tPR tree-optimization/22236"}, {"sha": "bab54a90309cb79d2ac2468f8b43f875d603d4c8", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3256a76e621b4fd466ea9da5ce8de9a24a66aa0c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3256a76e621b4fd466ea9da5ce8de9a24a66aa0c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=3256a76e621b4fd466ea9da5ce8de9a24a66aa0c", "patch": "@@ -1111,6 +1111,7 @@ enum reg_class\n    'W' is a vector constant that can be easily generated (no mem refs).\n    'Y' is an indexed or word-aligned displacement memory operand.\n    'Z' is an indexed or indirect memory operand.\n+   'a'  is an indexed or indirect address operand.\n    't' is for AND masks that can be performed by two rldic{l,r} insns.  */\n \n #define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\t\t\\\n@@ -1127,6 +1128,7 @@ enum reg_class\n    : (C) == 'W' ? (easy_vector_constant (OP, GET_MODE (OP)))\t\t\\\n    : (C) == 'Y' ? (word_offset_memref_operand (OP, GET_MODE (OP)))      \\\n    : (C) == 'Z' ? (indexed_or_indirect_operand (OP, GET_MODE (OP)))\t\\\n+   : (C) == 'a' ? (indexed_or_indirect_address (OP, GET_MODE (OP)))\t\\\n    : 0)\n \n /* Define which constraints are memory constraints.  Tell reload\n@@ -1136,6 +1138,12 @@ enum reg_class\n #define EXTRA_MEMORY_CONSTRAINT(C, STR)\t\t\t\t\\\n   ((C) == 'Q' || (C) == 'Y' || (C) == 'Z')\n \n+/* Define which constraints should be treated like address constraints\n+   by the reload pass.  */\n+\n+#define EXTRA_ADDRESS_CONSTRAINT(C, STR)\t\t\t\\\n+  ((C) == 'a')\n+\n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n    In general this is just CLASS; but on some machines"}, {"sha": "c873c8f6513a6f28c8218396af64fa2118d7985e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3256a76e621b4fd466ea9da5ce8de9a24a66aa0c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3256a76e621b4fd466ea9da5ce8de9a24a66aa0c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=3256a76e621b4fd466ea9da5ce8de9a24a66aa0c", "patch": "@@ -14016,7 +14016,7 @@\n }\")\n \n (define_insn \"prefetch\"\n-  [(prefetch (match_operand 0 \"indexed_or_indirect_address\" \"p\")\n+  [(prefetch (match_operand 0 \"indexed_or_indirect_address\" \"a\")\n \t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n \t     (match_operand:SI 2 \"const_int_operand\" \"n\"))]\n   \"TARGET_POWERPC\""}]}