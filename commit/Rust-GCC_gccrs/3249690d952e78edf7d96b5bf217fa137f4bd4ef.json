{"sha": "3249690d952e78edf7d96b5bf217fa137f4bd4ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI0OTY5MGQ5NTJlNzhlZGY3ZDk2YjViZjIxN2ZhMTM3ZjRiZDRlZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T09:08:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T09:08:27Z"}, "message": "[multiple changes]\n\n2009-05-06  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-nmsc.adb (Locate_Directory): Remove unused parameters, and add\n\tsupport for returning the directory even if it doesn't exist. This is\n\tused for the object directory, since we are always setting it to a\n\tnon-null value, and we should set it to an absolute name rather than a\n\trelative name for the sake of external tools that might depend on it.\n\t(Check_Library_Attributes): When Project.Library_Dir is known, check\n\tthat the directory exists.\n\n2009-05-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Check_Dereference): If the prefix of an attribute\n\treference is an implicit dereference, do not freeze the designated type\n\tif within a default expression or when preanalyzing a pre/postcondtion.\n\nFrom-SVN: r147157", "tree": {"sha": "eeacd2423d3d5b61a7590d18c11d448624ba69b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eeacd2423d3d5b61a7590d18c11d448624ba69b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3249690d952e78edf7d96b5bf217fa137f4bd4ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3249690d952e78edf7d96b5bf217fa137f4bd4ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3249690d952e78edf7d96b5bf217fa137f4bd4ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3249690d952e78edf7d96b5bf217fa137f4bd4ef/comments", "author": null, "committer": null, "parents": [{"sha": "fd366a46fa987290ccae80e3fde5b5dc4a04bbed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd366a46fa987290ccae80e3fde5b5dc4a04bbed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd366a46fa987290ccae80e3fde5b5dc4a04bbed"}], "stats": {"total": 327, "additions": 133, "deletions": 194}, "files": [{"sha": "ce1ae879fdb739ecfbc35c43704e195290a4f44b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3249690d952e78edf7d96b5bf217fa137f4bd4ef/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3249690d952e78edf7d96b5bf217fa137f4bd4ef/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3249690d952e78edf7d96b5bf217fa137f4bd4ef", "patch": "@@ -1,3 +1,19 @@\n+2009-05-06  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj-nmsc.adb (Locate_Directory): Remove unused parameters, and add\n+\tsupport for returning the directory even if it doesn't exist. This is\n+\tused for the object directory, since we are always setting it to a\n+\tnon-null value, and we should set it to an absolute name rather than a\n+\trelative name for the sake of external tools that might depend on it.\n+\t(Check_Library_Attributes): When Project.Library_Dir is known, check\n+\tthat the directory exists.\n+\n+2009-05-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Check_Dereference): If the prefix of an attribute\n+\treference is an implicit dereference, do not freeze the designated type\n+\tif within a default expression or when preanalyzing a pre/postcondtion.\n+\n 2009-05-06  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch8.adb (Analyze_Object_Renaming): If the object is a function"}, {"sha": "f1f5550dc8cf15dda85e972e6b131d048df519c1", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 111, "deletions": 193, "changes": 304, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3249690d952e78edf7d96b5bf217fa137f4bd4ef/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3249690d952e78edf7d96b5bf217fa137f4bd4ef/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=3249690d952e78edf7d96b5bf217fa137f4bd4ef", "patch": "@@ -298,8 +298,7 @@ package body Prj.Nmsc is\n \n    procedure Check_Library_Attributes\n      (Project     : Project_Id;\n-      In_Tree     : Project_Tree_Ref;\n-      Current_Dir : String);\n+      In_Tree     : Project_Tree_Ref);\n    --  Check the library attributes of project Project in project tree In_Tree\n    --  and modify its data Data accordingly.\n    --  Current_Dir should represent the current directory, and is passed for\n@@ -496,23 +495,25 @@ package body Prj.Nmsc is\n      (Project          : Project_Id;\n       In_Tree          : Project_Tree_Ref;\n       Name             : File_Name_Type;\n-      Parent           : Path_Name_Type;\n-      Dir              : out Path_Name_Type;\n-      Display          : out Path_Name_Type;\n+      Path             : out Path_Information;\n+      Dir_Exists       : out Boolean;\n       Create           : String := \"\";\n-      Current_Dir      : String;\n       Location         : Source_Ptr := No_Location;\n+      Must_Exist       : Boolean := True;\n       Externally_Built : Boolean := False);\n-   --  Locate a directory. Name is the directory name. Parent is the root\n-   --  directory, if Name a relative path name. Dir is set to the canonical\n-   --  case path name of the directory, and Display is the directory path name\n-   --  for display purposes. If the directory does not exist and Setup_Projects\n+   --  Locate a directory. Name is the directory name.\n+   --  Relative paths are resolved relative to the project's directory.\n+   --  If the directory does not exist and Setup_Projects\n    --  is True and Create is a non null string, an attempt is made to create\n-   --  the directory. If the directory does not exist and Setup_Projects is\n-   --  false, then Dir and Display are set to No_Name.\n+   --  the directory.\n+   --  If the directory does not exist, it is either created if Setup_Projects\n+   --  is False (and then returned), or simply returned without checking for\n+   --  its existence (if Must_Exist is False) or No_Path_Information is\n+   --  returned. In all cases, Dir_Exists indicates whether the directory now\n+   --  exists.\n    --\n-   --  Current_Dir should represent the current directory, and is passed for\n-   --  efficiency to avoid system calls to recompute it.\n+   --  Create is also used for debugging traces to show which path we are\n+   --  computing\n \n    procedure Look_For_Sources\n      (Project     : Project_Id;\n@@ -828,7 +829,7 @@ package body Prj.Nmsc is\n \n       --  Library attributes\n \n-      Check_Library_Attributes (Project, In_Tree, Current_Dir);\n+      Check_Library_Attributes (Project, In_Tree);\n \n       if Current_Verbosity = High then\n          Show_Source_Dirs (Project, In_Tree);\n@@ -1423,10 +1424,8 @@ package body Prj.Nmsc is\n \n                            --  Attribute Driver (<language>)\n \n-                           Get_Name_String (Element.Value.Value);\n-\n                            Lang_Index.Config.Compiler_Driver :=\n-                               File_Name_Type (Element.Value.Value);\n+                             File_Name_Type (Element.Value.Value);\n \n                         when Name_Required_Switches =>\n                            Put (Into_List =>\n@@ -3341,8 +3340,7 @@ package body Prj.Nmsc is\n \n    procedure Check_Library_Attributes\n      (Project     : Project_Id;\n-      In_Tree     : Project_Tree_Ref;\n-      Current_Dir : String)\n+      In_Tree     : Project_Tree_Ref)\n    is\n       Attributes   : constant Prj.Variable_Id := Project.Decl.Attributes;\n \n@@ -3463,6 +3461,8 @@ package body Prj.Nmsc is\n          end if;\n       end Check_Library;\n \n+      Dir_Exists : Boolean;\n+\n    --  Start of processing for Check_Library_Attributes\n \n    begin\n@@ -3544,51 +3544,30 @@ package body Prj.Nmsc is\n                  (Project,\n                   In_Tree,\n                   File_Name_Type (Lib_Dir.Value),\n-                  Project.Directory.Display_Name,\n-                  Project.Library_Dir.Name,\n-                  Project.Library_Dir.Display_Name,\n+                  Path             => Project.Library_Dir,\n+                  Dir_Exists       => Dir_Exists,\n                   Create           => \"library\",\n-                  Current_Dir      => Current_Dir,\n+                  Must_Exist       => False,\n                   Location         => Lib_Dir.Location,\n                   Externally_Built => Project.Externally_Built);\n-            end if;\n \n-            if Project.Library_Dir = No_Path_Information then\n+            else\n+               Dir_Exists :=\n+                 Is_Directory\n+                   (Get_Name_String\n+                        (Project.Library_Dir.Display_Name));\n+            end if;\n \n+            if not Dir_Exists then\n                --  Get the absolute name of the library directory that\n                --  does not exist, to report an error.\n \n-               declare\n-                  Dir_Name : constant String :=\n-                               Get_Name_String (Lib_Dir.Value);\n-\n-               begin\n-                  if Is_Absolute_Path (Dir_Name) then\n-                     Err_Vars.Error_Msg_File_1 :=\n-                       File_Name_Type (Lib_Dir.Value);\n-\n-                  else\n-                     Get_Name_String (Project.Directory.Display_Name);\n-\n-                     if Name_Buffer (Name_Len) /= Directory_Separator then\n-                        Name_Len := Name_Len + 1;\n-                        Name_Buffer (Name_Len) := Directory_Separator;\n-                     end if;\n-\n-                     Name_Buffer\n-                       (Name_Len + 1 .. Name_Len + Dir_Name'Length) :=\n-                       Dir_Name;\n-                     Name_Len := Name_Len + Dir_Name'Length;\n-                     Err_Vars.Error_Msg_File_1 := Name_Find;\n-                  end if;\n-\n-                  --  Report the error\n-\n-                  Error_Msg\n-                    (Project, In_Tree,\n-                     \"library directory { does not exist\",\n-                     Lib_Dir.Location);\n-               end;\n+               Err_Vars.Error_Msg_File_1 :=\n+                 File_Name_Type (Project.Library_Dir.Display_Name);\n+               Error_Msg\n+                 (Project, In_Tree,\n+                  \"library directory { does not exist\",\n+                  Lib_Dir.Location);\n \n                --  The library directory cannot be the same as the Object\n                --  directory.\n@@ -3755,50 +3734,23 @@ package body Prj.Nmsc is\n                  (Project,\n                   In_Tree,\n                   File_Name_Type (Lib_ALI_Dir.Value),\n-                  Project.Directory.Display_Name,\n-                  Project.Library_ALI_Dir.Name,\n-                  Project.Library_ALI_Dir.Display_Name,\n+                  Path             => Project.Library_ALI_Dir,\n                   Create           => \"library ALI\",\n-                  Current_Dir      => Current_Dir,\n+                  Dir_Exists       => Dir_Exists,\n+                  Must_Exist       => False,\n                   Location         => Lib_ALI_Dir.Location,\n                   Externally_Built => Project.Externally_Built);\n \n-               if Project.Library_ALI_Dir = No_Path_Information then\n-\n+               if not Dir_Exists then\n                   --  Get the absolute name of the library ALI directory that\n                   --  does not exist, to report an error.\n \n-                  declare\n-                     Dir_Name : constant String :=\n-                                  Get_Name_String (Lib_ALI_Dir.Value);\n-\n-                  begin\n-                     if Is_Absolute_Path (Dir_Name) then\n-                        Err_Vars.Error_Msg_File_1 :=\n-                          File_Name_Type (Lib_Dir.Value);\n-\n-                     else\n-                        Get_Name_String (Project.Directory.Display_Name);\n-\n-                        if Name_Buffer (Name_Len) /= Directory_Separator then\n-                           Name_Len := Name_Len + 1;\n-                           Name_Buffer (Name_Len) := Directory_Separator;\n-                        end if;\n-\n-                        Name_Buffer\n-                          (Name_Len + 1 .. Name_Len + Dir_Name'Length) :=\n-                          Dir_Name;\n-                        Name_Len := Name_Len + Dir_Name'Length;\n-                        Err_Vars.Error_Msg_File_1 := Name_Find;\n-                     end if;\n-\n-                     --  Report the error\n-\n-                     Error_Msg\n-                       (Project, In_Tree,\n-                        \"library 'A'L'I directory { does not exist\",\n-                        Lib_ALI_Dir.Location);\n-                  end;\n+                  Err_Vars.Error_Msg_File_1 :=\n+                    File_Name_Type (Project.Library_ALI_Dir.Display_Name);\n+                  Error_Msg\n+                    (Project, In_Tree,\n+                     \"library 'A'L'I directory { does not exist\",\n+                     Lib_ALI_Dir.Location);\n                end if;\n \n                if Project.Library_ALI_Dir /= Project.Library_Dir then\n@@ -4821,62 +4773,32 @@ package body Prj.Nmsc is\n             declare\n                Dir_Id : constant File_Name_Type :=\n                           File_Name_Type (Lib_Src_Dir.Value);\n+               Dir_Exists : Boolean;\n \n             begin\n                Locate_Directory\n                  (Project,\n                   In_Tree,\n                   Dir_Id,\n-                  Project.Directory.Display_Name,\n-                  Project.Library_Src_Dir.Name,\n-                  Project.Library_Src_Dir.Display_Name,\n+                  Path             => Project.Library_Src_Dir,\n+                  Dir_Exists       => Dir_Exists,\n+                  Must_Exist       => False,\n                   Create           => \"library source copy\",\n-                  Current_Dir      => Current_Dir,\n                   Location         => Lib_Src_Dir.Location,\n                   Externally_Built => Project.Externally_Built);\n \n                --  If directory does not exist, report an error\n \n-               if Project.Library_Src_Dir = No_Path_Information then\n-\n+               if not Dir_Exists then\n                   --  Get the absolute name of the library directory that does\n                   --  not exist, to report an error.\n \n-                  declare\n-                     Dir_Name : constant String :=\n-                                  Get_Name_String (Dir_Id);\n-\n-                  begin\n-                     if Is_Absolute_Path (Dir_Name) then\n-                        Err_Vars.Error_Msg_File_1 := Dir_Id;\n-\n-                     else\n-                        Get_Name_String (Project.Directory.Name);\n-\n-                        if Name_Buffer (Name_Len) /=\n-                          Directory_Separator\n-                        then\n-                           Name_Len := Name_Len + 1;\n-                           Name_Buffer (Name_Len) :=\n-                             Directory_Separator;\n-                        end if;\n-\n-                        Name_Buffer\n-                          (Name_Len + 1 ..\n-                             Name_Len + Dir_Name'Length) :=\n-                            Dir_Name;\n-                        Name_Len := Name_Len + Dir_Name'Length;\n-                        Err_Vars.Error_Msg_Name_1 := Name_Find;\n-                     end if;\n-\n-                     --  Report the error\n-\n-                     Error_Msg_File_1 := Dir_Id;\n-                     Error_Msg\n-                       (Project, In_Tree,\n-                        \"Directory { does not exist\",\n-                        Lib_Src_Dir.Location);\n-                  end;\n+                  Err_Vars.Error_Msg_File_1 :=\n+                    File_Name_Type (Project.Library_Src_Dir.Display_Name);\n+                  Error_Msg\n+                    (Project, In_Tree,\n+                     \"Directory { does not exist\",\n+                     Lib_Src_Dir.Location);\n \n                   --  Report error if it is the same as the object directory\n \n@@ -5669,22 +5591,21 @@ package body Prj.Nmsc is\n \n          else\n             declare\n-               Path_Name         : Path_Name_Type;\n-               Display_Path_Name : Path_Name_Type;\n+               Path_Name         : Path_Information;\n                List              : String_List_Id;\n                Prev              : String_List_Id;\n+               Dir_Exists        : Boolean;\n \n             begin\n                Locate_Directory\n                  (Project     => Project,\n                   In_Tree     => In_Tree,\n                   Name        => From,\n-                  Parent      => Project.Directory.Display_Name,\n-                  Dir         => Path_Name,\n-                  Display     => Display_Path_Name,\n-                  Current_Dir => Current_Dir);\n+                  Path        => Path_Name,\n+                  Dir_Exists  => Dir_Exists,\n+                  Must_Exist  => False);\n \n-               if Path_Name = No_Path then\n+               if not Dir_Exists then\n                   Err_Vars.Error_Msg_File_1 := From;\n \n                   if Location = No_Location then\n@@ -5702,14 +5623,14 @@ package body Prj.Nmsc is\n                else\n                   declare\n                      Path              : constant String :=\n-                                           Get_Name_String (Path_Name) &\n+                                           Get_Name_String (Path_Name.Name) &\n                                            Directory_Separator;\n                      Last_Path         : constant Natural :=\n                                            Compute_Directory_Last (Path);\n                      Path_Id           : Name_Id;\n                      Display_Path      : constant String :=\n                                            Get_Name_String\n-                                             (Display_Path_Name) &\n+                                             (Path_Name.Display_Name) &\n                                            Directory_Separator;\n                      Last_Display_Path : constant Natural :=\n                                            Compute_Directory_Last\n@@ -5801,6 +5722,8 @@ package body Prj.Nmsc is\n \n    --  Start of processing for Get_Directories\n \n+      Dir_Exists : Boolean;\n+\n    begin\n       if Current_Verbosity = High then\n          Write_Line (\"Starting to look for directories\");\n@@ -5834,61 +5757,52 @@ package body Prj.Nmsc is\n                Object_Dir.Location);\n \n          else\n-            --  We check that the specified object directory does exist\n+            --  We check that the specified object directory does exist.\n+            --  However, even when it doesn't exist, we set it to a default\n+            --  value. This is for the benefit of tools that recover from\n+            --  errors; for example, these tools could create the non existent\n+            --  directory.\n+            --  We always return an absolute directory name though\n \n             Locate_Directory\n               (Project,\n                In_Tree,\n                File_Name_Type (Object_Dir.Value),\n-               Project.Directory.Display_Name,\n-               Project.Object_Directory.Name,\n-               Project.Object_Directory.Display_Name,\n+               Path             => Project.Object_Directory,\n                Create           => \"object\",\n+               Dir_Exists       => Dir_Exists,\n                Location         => Object_Dir.Location,\n-               Current_Dir      => Current_Dir,\n+               Must_Exist       => False,\n                Externally_Built => Project.Externally_Built);\n \n-            if Project.Object_Directory = No_Path_Information then\n-\n-               --  The object directory does not exist, report an error if the\n-               --  project is not externally built.\n-\n-               if not Project.Externally_Built then\n-                  Err_Vars.Error_Msg_File_1 :=\n-                    File_Name_Type (Object_Dir.Value);\n-                  Error_Msg\n-                    (Project, In_Tree,\n-                     \"object directory { not found\",\n-                     Project.Location);\n-               end if;\n-\n-               --  Do not keep a nil Object_Directory. Set it to the specified\n-               --  (relative or absolute) path. This is for the benefit of\n-               --  tools that recover from errors; for example, these tools\n-               --  could create the non existent directory.\n+            if not Dir_Exists\n+              and then not Project.Externally_Built\n+            then\n+               --  The object directory does not exist, report an error if\n+               --  the project is not externally built.\n \n-               Project.Object_Directory.Display_Name :=\n-                 Path_Name_Type (Object_Dir.Value);\n-               Project.Object_Directory.Name :=\n-                 Path_Name_Type (Canonical_Case_File_Name (Object_Dir.Value));\n+               Err_Vars.Error_Msg_File_1 :=\n+                 File_Name_Type (Object_Dir.Value);\n+               Error_Msg\n+                 (Project, In_Tree,\n+                  \"object directory { not found\",\n+                  Project.Location);\n             end if;\n          end if;\n \n-      elsif Project.Object_Directory /= No_Path_Information and then\n-        Subdirs /= null\n+      elsif Project.Object_Directory /= No_Path_Information\n+        and then Subdirs /= null\n       then\n          Name_Len := 1;\n          Name_Buffer (1) := '.';\n          Locate_Directory\n            (Project,\n             In_Tree,\n             Name_Find,\n-            Project.Directory.Display_Name,\n-            Project.Object_Directory.Name,\n-            Project.Object_Directory.Display_Name,\n+            Path             => Project.Object_Directory,\n             Create           => \"object\",\n+            Dir_Exists       => Dir_Exists,\n             Location         => Object_Dir.Location,\n-            Current_Dir      => Current_Dir,\n             Externally_Built => Project.Externally_Built);\n       end if;\n \n@@ -5924,15 +5838,13 @@ package body Prj.Nmsc is\n               (Project,\n                In_Tree,\n                File_Name_Type (Exec_Dir.Value),\n-               Project.Directory.Display_Name,\n-               Project.Exec_Directory.Name,\n-               Project.Exec_Directory.Display_Name,\n+               Path             => Project.Exec_Directory,\n+               Dir_Exists       => Dir_Exists,\n                Create           => \"exec\",\n                Location         => Exec_Dir.Location,\n-               Current_Dir      => Current_Dir,\n                Externally_Built => Project.Externally_Built);\n \n-            if Project.Exec_Directory = No_Path_Information then\n+            if not Dir_Exists then\n                Err_Vars.Error_Msg_File_1 := File_Name_Type (Exec_Dir.Value);\n                Error_Msg\n                  (Project, In_Tree,\n@@ -6543,14 +6455,15 @@ package body Prj.Nmsc is\n      (Project          : Project_Id;\n       In_Tree          : Project_Tree_Ref;\n       Name             : File_Name_Type;\n-      Parent           : Path_Name_Type;\n-      Dir              : out Path_Name_Type;\n-      Display          : out Path_Name_Type;\n+      Path             : out Path_Information;\n+      Dir_Exists       : out Boolean;\n       Create           : String := \"\";\n-      Current_Dir      : String;\n       Location         : Source_Ptr := No_Location;\n+      Must_Exist       : Boolean := True;\n       Externally_Built : Boolean := False)\n    is\n+      Parent          : constant Path_Name_Type :=\n+                          Project.Directory.Display_Name;\n       The_Parent      : constant String :=\n                           Get_Name_String (Parent) & Directory_Separator;\n       The_Parent_Last : constant Natural :=\n@@ -6590,8 +6503,8 @@ package body Prj.Nmsc is\n          Write_Line (\"\"\")\");\n       end if;\n \n-      Dir     := No_Path;\n-      Display := No_Path;\n+      Path := No_Path_Information;\n+      Dir_Exists := False;\n \n       if Is_Absolute_Path (Get_Name_String (The_Name)) then\n          Full_Name := The_Name;\n@@ -6653,31 +6566,36 @@ package body Prj.Nmsc is\n             end if;\n          end if;\n \n-         if Is_Directory (Full_Path_Name.all) then\n+         Dir_Exists := Is_Directory (Full_Path_Name.all);\n+\n+         if not Must_Exist or else Dir_Exists then\n             declare\n                Normed : constant String :=\n                           Normalize_Pathname\n                             (Full_Path_Name.all,\n-                             Directory      => Current_Dir,\n+                             Directory      =>\n+                              The_Parent (The_Parent'First .. The_Parent_Last),\n                              Resolve_Links  => False,\n                              Case_Sensitive => True);\n \n                Canonical_Path : constant String :=\n                                   Normalize_Pathname\n                                     (Normed,\n-                                     Directory      => Current_Dir,\n+                                     Directory      =>\n+                                       The_Parent\n+                                         (The_Parent'First .. The_Parent_Last),\n                                      Resolve_Links  =>\n                                         Opt.Follow_Links_For_Dirs,\n                                      Case_Sensitive => False);\n \n             begin\n                Name_Len := Normed'Length;\n                Name_Buffer (1 .. Name_Len) := Normed;\n-               Display := Name_Find;\n+               Path.Display_Name := Name_Find;\n \n                Name_Len := Canonical_Path'Length;\n                Name_Buffer (1 .. Name_Len) := Canonical_Path;\n-               Dir := Name_Find;\n+               Path.Name := Name_Find;\n             end;\n          end if;\n "}, {"sha": "6059401fd5336197d5b5e42cb95b13970e6150b4", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3249690d952e78edf7d96b5bf217fa137f4bd4ef/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3249690d952e78edf7d96b5bf217fa137f4bd4ef/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=3249690d952e78edf7d96b5bf217fa137f4bd4ef", "patch": "@@ -1067,8 +1067,13 @@ package body Sem_Attr is\n             --  If there is an implicit dereference, then we must freeze\n             --  the designated type of the access type, since the type of\n             --  the referenced array is this type (see AI95-00106).\n+            --  As done elsewhere, freezing must not happen when pre-analyzing\n+            --  a pre- or postcondition or a default value for an object or\n+            --  for a formal parameter.\n \n-            Freeze_Before (N, Designated_Type (P_Type));\n+            if not In_Spec_Expression then\n+               Freeze_Before (N, Designated_Type (P_Type));\n+            end if;\n \n             Rewrite (P,\n               Make_Explicit_Dereference (Sloc (P),"}]}