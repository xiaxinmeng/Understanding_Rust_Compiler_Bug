{"sha": "bdc7b765f8728cbb769fe1eeef773eda15578aee", "node_id": "C_kwDOANBUbNoAKGJkYzdiNzY1Zjg3MjhjYmI3NjlmZTFlZWVmNzczZWRhMTU1NzhhZWU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-16T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-16T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "88e39b7de1b9d3803edca19f861f04a94f18dae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88e39b7de1b9d3803edca19f861f04a94f18dae1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdc7b765f8728cbb769fe1eeef773eda15578aee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc7b765f8728cbb769fe1eeef773eda15578aee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdc7b765f8728cbb769fe1eeef773eda15578aee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc7b765f8728cbb769fe1eeef773eda15578aee/comments", "author": null, "committer": null, "parents": [{"sha": "2582080f19e8fe9c1204dfb6fecf744311f00777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2582080f19e8fe9c1204dfb6fecf744311f00777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2582080f19e8fe9c1204dfb6fecf744311f00777"}], "stats": {"total": 274, "additions": 273, "deletions": 1}, "files": [{"sha": "171f490344590bb85281052940a33cf1e9610648", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc7b765f8728cbb769fe1eeef773eda15578aee/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc7b765f8728cbb769fe1eeef773eda15578aee/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=bdc7b765f8728cbb769fe1eeef773eda15578aee", "patch": "@@ -1,3 +1,7 @@\n+2022-07-15  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* MAINTAINERS: Add myself to Write After Approval.\n+\n 2022-07-04  Martin Liska  <mliska@suse.cz>\n \n \t* MAINTAINERS: fix sorting of names"}, {"sha": "dc8d2e74c34e8d19a509a692538aecfbd6fbe1f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc7b765f8728cbb769fe1eeef773eda15578aee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc7b765f8728cbb769fe1eeef773eda15578aee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdc7b765f8728cbb769fe1eeef773eda15578aee", "patch": "@@ -1,3 +1,114 @@\n+2022-07-15  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/85620\n+\t* config/i386/i386.cc (ix86_function_ok_for_sibcall): Return\n+\tfalse if callee has indirect_return attribute and caller\n+\tdoesn't.\n+\n+2022-07-15  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/106273\n+\t* config/i386/i386.md (*andn<dwi>3_doubleword_bmi): Update the\n+\tconstraints to reflect the output is earlyclobber, unless it is\n+\tthe same register (pair) as one of the operands.\n+\n+2022-07-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/invoke.texi (Static Analyzer Options): Add the new fd\n+\twarnings to the initial gccoptlist, and to the list of those\n+\tdisabled by -fanalyzer-checker=taint.\n+\n+2022-07-15  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.cc\n+\t(enum aarch64_type_qualifiers): Remove qualifier_internal.\n+\t(aarch64_init_simd_builtin_functions): Remove qualifier_internal check.\n+\n+2022-07-15  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.cc\n+\t(v1di_UP): Add V1DI mode to _UP macros.\n+\t* config/aarch64/aarch64-modes.def (VECTOR_MODE): Add V1DI mode.\n+\t* config/aarch64/aarch64-simd-builtin-types.def: Use V1DI mode.\n+\t* config/aarch64/aarch64-simd.md\n+\t(vec_extractv2dfv1df): Replace with...\n+\t(vec_extract<mode><V1half>): ...this.\n+\t* config/aarch64/aarch64.cc\n+\t(aarch64_classify_vector_mode): Add V1DI mode.\n+\t* config/aarch64/iterators.md\n+\t(VQ_2E, V1HALF, V1half): New.\n+\t(nunits): Add V1DI mode.\n+\n+2022-07-15  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/106278\n+\t* config/i386/i386-features.cc (general_scalar_chain::convert_insn):\n+\tFix indentation whitespace.\n+\t(timode_scalar_chain::fix_debug_reg_uses): Likewise.\n+\t(timode_scalar_chain::convert_insn): Delete dead code.\n+\tUpdate TImode REG_EQUAL_NOTE even if the SET_DEST is already V1TI.\n+\tFix indentation whitespace.\n+\t(convertible_comparison_p): Likewise.\n+\t(timode_scalar_to_vector_candidate_p): Likewise.\n+\n+2022-07-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-pretty-print.cc (dump_ssaname_info): Use pp_vrange.\n+\n+2022-07-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add value-range-pretty-print.o.\n+\t* pretty-print.h (pp_vrange): New.\n+\t* value-range.cc (vrange::dump): Call pp version.\n+\t(unsupported_range::dump): Move to its own file.\n+\t(dump_bound_with_infinite_markers): Same.\n+\t(irange::dump): Same.\n+\t(irange::dump_bitmasks): Same.\n+\t(vrange::debug): Remove.\n+\t* value-range.h: Remove virtual designation for dump methods.\n+\tRemove dump_bitmasks method.\n+\t* value-range-pretty-print.cc: New file.\n+\t* value-range-pretty-print.h: New file.\n+\n+2022-07-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (irange::accept): New.\n+\t(unsupported_range::accept): New.\n+\t* value-range.h (class vrange_visitor): New.\n+\t(class vrange): Add accept method.\n+\t(class unsupported_range): Same.\n+\t(class Value_Range): Same.\n+\n+2022-07-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* diagnostic-format-json.cc (json_from_location_range): Adjust\n+\tto new label_text API.\n+\t* diagnostic-format-sarif.cc (sarif_builder::make_location_object):\n+\tLikewise.\n+\t* diagnostic-show-locus.cc (struct pod_label_text): Likewise.\n+\t(layout::print_any_labels): Likewise.\n+\t* tree-diagnostic-path.cc (class path_label): Likewise.\n+\t(struct event_range): Likewise.\n+\t(default_tree_diagnostic_path_printer): Likewise.\n+\t(default_tree_make_json_for_path): Likewise.\n+\n+2022-07-15  konglin1  <lingling.kong@intel.com>\n+\n+\tPR target/106113\n+\t* config/i386/i386-builtin.def (BDESC): Fix [u]comi{ss,sd}\n+\tcomparison due to intrinsics changed over time.\n+\t* config/i386/i386-expand.cc (ix86_ssecom_setcc):\n+\tAdd unordered check and mode for sse comi codegen.\n+\t(ix86_expand_sse_comi): Add unordered check and check a different\n+\tCCmode.\n+\t(ix86_expand_sse_comi_round):Extract unordered check and mode part\n+\tin ix86_ssecom_setcc.\n+\n+2022-07-15  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* config/aarch64/aarch64.cc (aarch64_vectorize_vec_perm_const): Use\n+\top_mode instead of vmode in calls to force_reg for op0 and op1.\n+\n 2022-07-14  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR tree-optimization/103798"}, {"sha": "cedfb434cc21fdee9b549eb7eeab05223da1f158", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc7b765f8728cbb769fe1eeef773eda15578aee/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc7b765f8728cbb769fe1eeef773eda15578aee/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=bdc7b765f8728cbb769fe1eeef773eda15578aee", "patch": "@@ -1 +1 @@\n-20220715\n+20220716"}, {"sha": "4f010eb75d7bf622ecef71bec03ea735535167e4", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc7b765f8728cbb769fe1eeef773eda15578aee/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc7b765f8728cbb769fe1eeef773eda15578aee/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=bdc7b765f8728cbb769fe1eeef773eda15578aee", "patch": "@@ -1,3 +1,37 @@\n+2022-07-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106284\n+\t* sm-taint.cc (taint_state_machine::on_condition): Handle range\n+\tchecks optimized by build_range_check.\n+\n+2022-07-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* call-info.cc (call_info::print): Adjust to new label_text API.\n+\t* checker-path.cc (checker_event::dump): Likewise.\n+\t(region_creation_event::get_desc): Likewise.\n+\t(state_change_event::get_desc): Likewise.\n+\t(superedge_event::should_filter_p): Likewise.\n+\t(start_cfg_edge_event::get_desc): Likewise.\n+\t(call_event::get_desc): Likewise.\n+\t(return_event::get_desc): Likewise.\n+\t(warning_event::get_desc): Likewise.\n+\t(checker_path::dump): Likewise.\n+\t(checker_path::debug): Likewise.\n+\t* diagnostic-manager.cc (diagnostic_manager::prune_for_sm_diagnostic):\n+\tLikewise.\n+\t(diagnostic_manager::prune_interproc_events): Likewise.\n+\t* engine.cc (feasibility_state::maybe_update_for_edge):\n+\tLikewise.\n+\t* program-state.cc (sm_state_map::to_json): Likewise.\n+\t* region-model-impl-calls.cc (region_model::impl_call_analyzer_describe): Likewise.\n+\t(region_model::impl_call_analyzer_dump_capacity): Likewise.\n+\t* region.cc (region::to_json): Likewise.\n+\t* sm-malloc.cc (inform_nonnull_attribute): Likewise.\n+\t* store.cc (binding_map::to_json): Likewise.\n+\t(store::to_json): Likewise.\n+\t* supergraph.cc (superedge::dump): Likewise.\n+\t* svalue.cc (svalue::to_json): Likewise.\n+\n 2022-07-07  David Malcolm  <dmalcolm@redhat.com>\n \n \t* checker-path.cc (start_cfg_edge_event::get_desc): Update for"}, {"sha": "ade553f42faa18aedf65c9385c9584e1510c0f77", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc7b765f8728cbb769fe1eeef773eda15578aee/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc7b765f8728cbb769fe1eeef773eda15578aee/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bdc7b765f8728cbb769fe1eeef773eda15578aee", "patch": "@@ -1,3 +1,17 @@\n+2022-07-15  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/104477\n+\t* c-common.cc (c_common_reswords): Add\n+\t__reference_constructs_from_temporary and\n+\t__reference_converts_from_temporary.\n+\t* c-common.h (enum rid): Add RID_REF_CONSTRUCTS_FROM_TEMPORARY and\n+\tRID_REF_CONVERTS_FROM_TEMPORARY.\n+\n+2022-07-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* c-format.cc (class range_label_for_format_type_mismatch):\n+\tAdjust to new label_text API.\n+\n 2022-07-11  Lewis Hyatt  <lhyatt@gmail.com>\n \n \tPR preprocessor/106252"}, {"sha": "ce6f8ea0f21e8291e3de40425fa984e0f2ea91e6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc7b765f8728cbb769fe1eeef773eda15578aee/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc7b765f8728cbb769fe1eeef773eda15578aee/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bdc7b765f8728cbb769fe1eeef773eda15578aee", "patch": "@@ -1,3 +1,28 @@\n+2022-07-15  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/104477\n+\t* call.cc (ref_conv_binds_directly_p): Rename to ...\n+\t(ref_conv_binds_directly): ... this.  Add a new bool parameter.  Change\n+\tthe return type to tristate.\n+\t* constraint.cc (diagnose_trait_expr): Handle\n+\tCPTK_REF_CONSTRUCTS_FROM_TEMPORARY and CPTK_REF_CONVERTS_FROM_TEMPORARY.\n+\t* cp-tree.h: Include \"tristate.h\".\n+\t(enum cp_trait_kind): Add CPTK_REF_CONSTRUCTS_FROM_TEMPORARY\n+\tand CPTK_REF_CONVERTS_FROM_TEMPORARY.\n+\t(ref_conv_binds_directly_p): Rename to ...\n+\t(ref_conv_binds_directly): ... this.\n+\t(ref_xes_from_temporary): Declare.\n+\t* cxx-pretty-print.cc (pp_cxx_trait_expression): Handle\n+\tCPTK_REF_CONSTRUCTS_FROM_TEMPORARY and CPTK_REF_CONVERTS_FROM_TEMPORARY.\n+\t* method.cc (ref_xes_from_temporary): New.\n+\t* parser.cc (cp_parser_primary_expression): Handle\n+\tRID_REF_CONSTRUCTS_FROM_TEMPORARY and RID_REF_CONVERTS_FROM_TEMPORARY.\n+\t(cp_parser_trait_expr): Likewise.\n+\t(warn_for_range_copy): Adjust to call ref_conv_binds_directly.\n+\t* semantics.cc (trait_expr_value): Handle\n+\tCPTK_REF_CONSTRUCTS_FROM_TEMPORARY and CPTK_REF_CONVERTS_FROM_TEMPORARY.\n+\t(finish_trait_expr): Likewise.\n+\n 2022-07-13  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/105912"}, {"sha": "cfe1e6df7f04a3a8507fa85dabe524f5ec01dec1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc7b765f8728cbb769fe1eeef773eda15578aee/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc7b765f8728cbb769fe1eeef773eda15578aee/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bdc7b765f8728cbb769fe1eeef773eda15578aee", "patch": "@@ -1,3 +1,9 @@\n+2022-07-15  Steve Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/104313\n+\t* trans-decl.cc (gfc_generate_return): Do not generate conflicting\n+\tfake results for functions with no result variable under -ff2c.\n+\n 2022-07-14  Harald Anlauf  <anlauf@gmx.de>\n \t    Steven G. Kargl  <kargl@gcc.gnu.org>\n "}, {"sha": "6ad883f8b2e2a365521e481fcfbb77612a50e909", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc7b765f8728cbb769fe1eeef773eda15578aee/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc7b765f8728cbb769fe1eeef773eda15578aee/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=bdc7b765f8728cbb769fe1eeef773eda15578aee", "patch": "@@ -1,3 +1,8 @@\n+2022-07-15  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* go-gcc.cc (Gcc_backend::call_expression): Handle a void\n+\targument, as for f(g()) where g returns a zero-sized type.\n+\n 2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* go-lang.cc (go_get_sarif_source_language): New."}, {"sha": "cc8ea71642a4cdda67bfb215dd48a8599f0103ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc7b765f8728cbb769fe1eeef773eda15578aee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc7b765f8728cbb769fe1eeef773eda15578aee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bdc7b765f8728cbb769fe1eeef773eda15578aee", "patch": "@@ -1,3 +1,52 @@\n+2022-07-15  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/85620\n+\t* gcc.target/i386/pr85620-2.c: Updated.\n+\t* gcc.target/i386/pr85620-5.c: New test.\n+\t* gcc.target/i386/pr85620-6.c: Likewise.\n+\t* gcc.target/i386/pr85620-7.c: Likewise.\n+\n+2022-07-15  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/106273\n+\t* gcc.target/i386/pr106273.c: New test case.\n+\n+2022-07-15  Steve Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/104313\n+\t* gfortran.dg/pr104313.f: New test.\n+\n+2022-07-15  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/104477\n+\t* g++.dg/ext/reference_constructs_from_temporary1.C: New test.\n+\t* g++.dg/ext/reference_converts_from_temporary1.C: New test.\n+\n+2022-07-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106284\n+\t* gcc.dg/analyzer/torture/taint-read-index-2.c: New test.\n+\n+2022-07-15  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.dg/pr106278.c: New test case.\n+\n+2022-07-15  konglin1  <lingling.kong@intel.com>\n+\n+\tPR target/106113\n+\t* gcc.target/i386/avx-vcomisd-pr106113-2.c: New test.\n+\t* gcc.target/i386/avx-vcomiss-pr106113-2.c: Ditto.\n+\t* gcc.target/i386/avx-vucomisd-pr106113-2.c: Ditto.\n+\t* gcc.target/i386/avx-vucomiss-pr106113-2.c: Ditto.\n+\t* gcc.target/i386/sse-comiss-pr106113-1.c: Ditto.\n+\t* gcc.target/i386/sse-comiss-pr106113-2.c: Ditto.\n+\t* gcc.target/i386/sse-ucomiss-pr106113-1.c: Ditto.\n+\t* gcc.target/i386/sse-ucomiss-pr106113-2.c: Ditto.\n+\t* gcc.target/i386/sse2-comisd-pr106113-1.c: Ditto.\n+\t* gcc.target/i386/sse2-comisd-pr106113-2.c: Ditto.\n+\t* gcc.target/i386/sse2-ucomisd-pr106113-1.c: Ditto.\n+\t* gcc.target/i386/sse2-ucomisd-pr106113-2.c: Ditto.\n+\n 2022-07-14  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR tree-optimization/103798"}, {"sha": "4905bd57e1b16d5038c19fb8038ed21166a0f022", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc7b765f8728cbb769fe1eeef773eda15578aee/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc7b765f8728cbb769fe1eeef773eda15578aee/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=bdc7b765f8728cbb769fe1eeef773eda15578aee", "patch": "@@ -1,3 +1,10 @@\n+2022-07-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/line-map.h (label_text::take_or_copy): Remove.\n+\t(label_text::moved_from): Rename to release.\n+\t(label_text::m_buffer, label_text::m_owned): Make private.\n+\t(label_text::get, label_text::is_owned): New accessors.\n+\n 2022-07-13  Marek Polacek  <polacek@redhat.com>\n \n \tPR preprocessor/106272"}, {"sha": "1980646dd803cbb8e99c28c284a04f23657bc2bf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc7b765f8728cbb769fe1eeef773eda15578aee/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc7b765f8728cbb769fe1eeef773eda15578aee/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bdc7b765f8728cbb769fe1eeef773eda15578aee", "patch": "@@ -1,3 +1,20 @@\n+2022-07-15  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/104477\n+\t* include/std/type_traits (reference_constructs_from_temporary,\n+\treference_converts_from_temporary): New class templates.\n+\t(reference_constructs_from_temporary_v,\n+\treference_converts_from_temporary_v): New variable templates.\n+\t(__cpp_lib_reference_from_temporary): Define for C++23.\n+\t* include/std/version (__cpp_lib_reference_from_temporary): Define for\n+\tC++23.\n+\t* testsuite/20_util/variable_templates_for_traits.cc: Test\n+\treference_constructs_from_temporary_v and\n+\treference_converts_from_temporary_v.\n+\t* testsuite/20_util/reference_from_temporary/value.cc: New test.\n+\t* testsuite/20_util/reference_from_temporary/value2.cc: New test.\n+\t* testsuite/20_util/reference_from_temporary/version.cc: New test.\n+\n 2022-07-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/106248"}]}