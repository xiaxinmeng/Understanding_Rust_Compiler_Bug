{"sha": "c37f1d4081f5a19e39192d13e2a3acea13662e5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM3ZjFkNDA4MWY1YTE5ZTM5MTkyZDEzZTJhM2FjZWExMzY2MmU1YQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-08T20:48:41Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-19T20:38:12Z"}, "message": "c++: ICE when late parsing noexcept/NSDMI [PR98333]\n\nSince certain members of a class are a complete-class context\n[class.mem.general]p7, we delay their parsing untile the whole class has\nbeen parsed.  For instance, NSDMIs and noexcept-specifiers.  The order\nin which we perform this delayed parsing matters; we were first parsing\nNSDMIs and only they did we parse noexcept-specifiers.   That turns out\nto be wrong: since NSDMIs may use noexcept-specifiers, we must process\nnoexcept-specifiers first.  Otherwise we'll ICE in code that doesn't\nexpect to see DEFERRED_PARSE.\n\nThis doesn't just shift the problem, noexcept-specifiers can use members\nwith a NSDMI just fine, and I've also tested a similar test with this\nmember function:\n\n  bool f() { return __has_nothrow_constructor (S<true>); }\n\nand that compiled fine too.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98333\n\t* parser.c (cp_parser_class_specifier_1): Perform late-parsing\n\tof NSDMIs before late-parsing of noexcept-specifiers.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98333\n\t* g++.dg/cpp0x/noexcept62.C: New test.", "tree": {"sha": "2b54eeb11741ed9b45176013a08267250ec546b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b54eeb11741ed9b45176013a08267250ec546b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c37f1d4081f5a19e39192d13e2a3acea13662e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37f1d4081f5a19e39192d13e2a3acea13662e5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c37f1d4081f5a19e39192d13e2a3acea13662e5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37f1d4081f5a19e39192d13e2a3acea13662e5a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7266ff2a243715e20882850b2fc4211ac7db4d34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7266ff2a243715e20882850b2fc4211ac7db4d34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7266ff2a243715e20882850b2fc4211ac7db4d34"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "5651cfacd3c727cc68852bd122a0ac3643341e1e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37f1d4081f5a19e39192d13e2a3acea13662e5a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37f1d4081f5a19e39192d13e2a3acea13662e5a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c37f1d4081f5a19e39192d13e2a3acea13662e5a", "patch": "@@ -25008,31 +25008,10 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n \t  maybe_end_member_template_processing ();\n \t}\n       vec_safe_truncate (unparsed_funs_with_default_args, 0);\n-      /* Now parse any NSDMIs.  */\n-      save_ccp = current_class_ptr;\n-      save_ccr = current_class_ref;\n-      FOR_EACH_VEC_SAFE_ELT (unparsed_nsdmis, ix, decl)\n-\t{\n-\t  if (class_type != DECL_CONTEXT (decl))\n-\t    {\n-\t      if (pushed_scope)\n-\t\tpop_scope (pushed_scope);\n-\t      class_type = DECL_CONTEXT (decl);\n-\t      pushed_scope = push_scope (class_type);\n-\t    }\n-\t  inject_this_parameter (class_type, TYPE_UNQUALIFIED);\n-\t  cp_parser_late_parsing_nsdmi (parser, decl);\n-\t}\n-      vec_safe_truncate (unparsed_nsdmis, 0);\n-      current_class_ptr = save_ccp;\n-      current_class_ref = save_ccr;\n-      if (pushed_scope)\n-\tpop_scope (pushed_scope);\n \n       /* If there are noexcept-specifiers that have not yet been processed,\n-\t take care of them now.  */\n-      class_type = NULL_TREE;\n-      pushed_scope = NULL_TREE;\n+\t take care of them now.  Do this before processing NSDMIs as they\n+\t may depend on noexcept-specifiers already having been processed.  */\n       FOR_EACH_VEC_SAFE_ELT (unparsed_noexcepts, ix, decl)\n \t{\n \t  tree ctx = DECL_CONTEXT (decl);\n@@ -25084,6 +25063,25 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n \t  maybe_end_member_template_processing ();\n \t}\n       vec_safe_truncate (unparsed_noexcepts, 0);\n+\n+      /* Now parse any NSDMIs.  */\n+      save_ccp = current_class_ptr;\n+      save_ccr = current_class_ref;\n+      FOR_EACH_VEC_SAFE_ELT (unparsed_nsdmis, ix, decl)\n+\t{\n+\t  if (class_type != DECL_CONTEXT (decl))\n+\t    {\n+\t      if (pushed_scope)\n+\t\tpop_scope (pushed_scope);\n+\t      class_type = DECL_CONTEXT (decl);\n+\t      pushed_scope = push_scope (class_type);\n+\t    }\n+\t  inject_this_parameter (class_type, TYPE_UNQUALIFIED);\n+\t  cp_parser_late_parsing_nsdmi (parser, decl);\n+\t}\n+      vec_safe_truncate (unparsed_nsdmis, 0);\n+      current_class_ptr = save_ccp;\n+      current_class_ref = save_ccr;\n       if (pushed_scope)\n \tpop_scope (pushed_scope);\n "}, {"sha": "53606c7914250ec9766e6d53072c9f11d43ffdc0", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept62.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37f1d4081f5a19e39192d13e2a3acea13662e5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept62.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37f1d4081f5a19e39192d13e2a3acea13662e5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept62.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept62.C?ref=c37f1d4081f5a19e39192d13e2a3acea13662e5a", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/98333\n+// { dg-do compile { target c++11 } }\n+\n+struct T {\n+  template <bool N>\n+  struct S {\n+    S () noexcept (N) {}\n+  };\n+  int a = __has_nothrow_constructor (S<true>);\n+};"}]}