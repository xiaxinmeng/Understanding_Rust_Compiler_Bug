{"sha": "56d4428505c7dd85bf6a49dd9b22497331b39341", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZkNDQyODUwNWM3ZGQ4NWJmNmE0OWRkOWIyMjQ5NzMzMWIzOTM0MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-02-12T21:39:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-02-12T21:39:42Z"}, "message": "jump.c (never_reached_warning): Add finish argument.\n\n\t* jump.c (never_reached_warning): Add finish argument.\n\tIf finish is NULL, stop on CODE_LABEL, otherwise stop before first\n\treal insn after end.\n\t* rtl.h (never_reached_warning): Adjust prototype.\n\t* cse.c (cse_insn): Pass NULL as finish to never_reached_warning.\n\t* cfgrtl.c (flow_delete_block): Pass b->end as finish to\n\tnever_reached_warning.\n\n\t* gcc.dg/Wunreachable-1.c: New test.\n\t* gcc.dg/Wunreachable-2.c: New test.\n\nFrom-SVN: r49713", "tree": {"sha": "c47e31ee211f6ebb4c3412768ea592590252152c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c47e31ee211f6ebb4c3412768ea592590252152c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56d4428505c7dd85bf6a49dd9b22497331b39341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56d4428505c7dd85bf6a49dd9b22497331b39341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56d4428505c7dd85bf6a49dd9b22497331b39341", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56d4428505c7dd85bf6a49dd9b22497331b39341/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "34e68c86fb3567f1046c4136bfec656387029613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e68c86fb3567f1046c4136bfec656387029613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34e68c86fb3567f1046c4136bfec656387029613"}], "stats": {"total": 87, "additions": 76, "deletions": 11}, "files": [{"sha": "b9940e880467810ba6c3337e10a5c2c7030830cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56d4428505c7dd85bf6a49dd9b22497331b39341/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56d4428505c7dd85bf6a49dd9b22497331b39341/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56d4428505c7dd85bf6a49dd9b22497331b39341", "patch": "@@ -1,3 +1,13 @@\n+2002-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* jump.c (never_reached_warning): Add finish argument.\n+\tIf finish is NULL, stop on CODE_LABEL, otherwise stop before first\n+\treal insn after end.\n+\t* rtl.h (never_reached_warning): Adjust prototype.\n+\t* cse.c (cse_insn): Pass NULL as finish to never_reached_warning.\n+\t* cfgrtl.c (flow_delete_block): Pass b->end as finish to\n+\tnever_reached_warning.\n+\n 2002-02-12  Graham Stott  <grahams@redhat.com>\n \n \t* config/hp/pa.h (GO_IF_LEGITIMATE_ADDRESS): Fix typos."}, {"sha": "5b99ab237e258e8587b12de0059f1f5525bbf7f5", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56d4428505c7dd85bf6a49dd9b22497331b39341/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56d4428505c7dd85bf6a49dd9b22497331b39341/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=56d4428505c7dd85bf6a49dd9b22497331b39341", "patch": "@@ -338,7 +338,7 @@ flow_delete_block (b)\n \n   insn = b->head;\n \n-  never_reached_warning (insn);\n+  never_reached_warning (insn, b->end);\n \n   if (GET_CODE (insn) == CODE_LABEL)\n     maybe_remove_eh_handler (insn);"}, {"sha": "b88a84c2cea390669b4d63afb3d9e8f5de7d6004", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56d4428505c7dd85bf6a49dd9b22497331b39341/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56d4428505c7dd85bf6a49dd9b22497331b39341/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=56d4428505c7dd85bf6a49dd9b22497331b39341", "patch": "@@ -5795,7 +5795,7 @@ cse_insn (insn, libcall_insn)\n \t  else\n \t    INSN_CODE (insn) = -1;\n \n-\t  never_reached_warning (insn);\n+\t  never_reached_warning (insn, NULL);\n \n \t  /* Do not bother deleting any unreachable code,\n \t     let jump/flow do that.  */"}, {"sha": "fc6bef07e4898e37c58d135e783b2d13202dcd47", "filename": "gcc/jump.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56d4428505c7dd85bf6a49dd9b22497331b39341/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56d4428505c7dd85bf6a49dd9b22497331b39341/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=56d4428505c7dd85bf6a49dd9b22497331b39341", "patch": "@@ -1913,13 +1913,12 @@ delete_for_peephole (from, to)\n    so it's possible to get spurious warnings from this.  */\n \n void\n-never_reached_warning (avoided_insn)\n-     rtx avoided_insn;\n+never_reached_warning (avoided_insn, finish)\n+     rtx avoided_insn, finish;\n {\n   rtx insn;\n   rtx a_line_note = NULL;\n-  int two_avoided_lines = 0;\n-  int contains_insn = 0;\n+  int two_avoided_lines = 0, contains_insn = 0, reached_end = 0;\n \n   if (! warn_notreached)\n     return;\n@@ -1929,10 +1928,11 @@ never_reached_warning (avoided_insn)\n \n   for (insn = avoided_insn; insn != NULL; insn = NEXT_INSN (insn))\n     {\n-      if (GET_CODE (insn) == CODE_LABEL)\n+      if (finish == NULL && GET_CODE (insn) == CODE_LABEL)\n \tbreak;\n-      else if (GET_CODE (insn) == NOTE\t\t/* A line number note?  */\n-\t       && NOTE_LINE_NUMBER (insn) >= 0)\n+\n+      if (GET_CODE (insn) == NOTE\t\t/* A line number note?  */\n+\t  && NOTE_LINE_NUMBER (insn) >= 0)\n \t{\n \t  if (a_line_note == NULL)\n \t    a_line_note = insn;\n@@ -1941,7 +1941,14 @@ never_reached_warning (avoided_insn)\n \t\t\t\t  != NOTE_LINE_NUMBER (insn));\n \t}\n       else if (INSN_P (insn))\n-\tcontains_insn = 1;\n+\t{\n+\t  if (reached_end)\n+\t    break;\n+\t  contains_insn = 1;\n+\t}\n+\n+      if (insn == finish)\n+\treached_end = 1;\n     }\n   if (two_avoided_lines && contains_insn)\n     warning_with_file_and_line (NOTE_SOURCE_FILE (a_line_note),"}, {"sha": "99fabfcb3ff9728aeed8ffb0a010dfb1613fd8d4", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56d4428505c7dd85bf6a49dd9b22497331b39341/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56d4428505c7dd85bf6a49dd9b22497331b39341/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=56d4428505c7dd85bf6a49dd9b22497331b39341", "patch": "@@ -1808,7 +1808,7 @@ extern enum rtx_code reversed_comparison_code_parts PARAMS ((enum rtx_code,\n \t\t\t\t\t\t\t     rtx, rtx, rtx));\n extern void delete_for_peephole\t\tPARAMS ((rtx, rtx));\n extern int condjump_in_parallel_p\tPARAMS ((rtx));\n-extern void never_reached_warning\tPARAMS ((rtx));\n+extern void never_reached_warning\tPARAMS ((rtx, rtx));\n extern void purge_line_number_notes\tPARAMS ((rtx));\n extern void copy_loop_headers\t\tPARAMS ((rtx));\n "}, {"sha": "d9766b063954027b8d97bc7e61054ee5dfa90c1a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56d4428505c7dd85bf6a49dd9b22497331b39341/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56d4428505c7dd85bf6a49dd9b22497331b39341/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56d4428505c7dd85bf6a49dd9b22497331b39341", "patch": "@@ -1,3 +1,8 @@\n+2002-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/Wunreachable-1.c: New test.\n+\t* gcc.dg/Wunreachable-2.c: New test.\n+\n 2002-02-12  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.dg/c90-const-expr-3.c, gcc.dg/c99-const-expr-3.c: New tests."}, {"sha": "d6d59b481aaca261f5b17da179c6878b894a2ccf", "filename": "gcc/testsuite/gcc.dg/Wunreachable-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56d4428505c7dd85bf6a49dd9b22497331b39341/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56d4428505c7dd85bf6a49dd9b22497331b39341/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-1.c?ref=56d4428505c7dd85bf6a49dd9b22497331b39341", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wunreachable-code\" } */\n+\n+extern void foo (void);\n+extern void baz (void);\n+\n+void bar (int i)\n+{\n+  if (i < 2)\n+    {\n+      baz ();\n+      return;\n+    }\n+  else\n+    {\n+      if (i >= 4 && i <= 5)\n+        foo ();\n+      return;\n+    }\n+\n+  baz ();\t/* { dg-warning \"will never be executed\" \"\" } */\n+  baz ();\n+  baz ();\n+}"}, {"sha": "8242441b0be6f193ef84dccf3f3d41cecbc4b724", "filename": "gcc/testsuite/gcc.dg/Wunreachable-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56d4428505c7dd85bf6a49dd9b22497331b39341/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56d4428505c7dd85bf6a49dd9b22497331b39341/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-2.c?ref=56d4428505c7dd85bf6a49dd9b22497331b39341", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wunreachable-code\" } */\n+\n+extern int foo (const char *);\n+extern void baz (void);\n+const char *a[] = { \"one\", \"two\" };\n+\n+void bar (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    if (! foo (a[i]))\n+      return;\n+\n+  baz ();\t/* { dg-bogus \"will never be executed\" } */\n+  baz ();\n+  baz ();\n+}"}]}