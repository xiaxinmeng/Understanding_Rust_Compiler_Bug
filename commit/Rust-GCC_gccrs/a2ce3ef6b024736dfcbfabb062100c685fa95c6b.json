{"sha": "a2ce3ef6b024736dfcbfabb062100c685fa95c6b", "node_id": "C_kwDOANBUbNoAKGEyY2UzZWY2YjAyNDczNmRmY2JmYWJiMDYyMTAwYzY4NWZhOTVjNmI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-28T10:13:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-28T10:13:12Z"}, "message": "Merge #775\n\n775: Support const within block-expr's r=philberty a=philberty\n\nThis adds support for constant folding within block expr's and constant\r\nArrayIndexExpression.\r\n\r\nFixes #711 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "41e1e2c804b45cf8d841456e3176b128b218362d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41e1e2c804b45cf8d841456e3176b128b218362d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2ce3ef6b024736dfcbfabb062100c685fa95c6b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhene4CRBK7hj4Ov3rIwAABwwIAGpyyOF0NzcpshCDwT86Neyg\nkWkz73pNZyKoTswFTnf5AkEZgl0e4JdeArhGgDc2DrTNh1cy0GcAPFgLpQ0ScyK8\n1LxUxwE/R/ejkbXMNjJ/qqMug5fIFnDP87sYpifroyaa5ZkjlDchfJFRVhhIkPXr\nkNHXlJCm7Qi31GXZCgMJnZOLNB3LSRH655lJuE1oL/xKswUi0lcg4jjt5Ob5A5Or\n1eg3u+IOOVb0iDrPBg4ufo11ir+q6NoUvlzUGUSbAbSq5r7ROr7/sKQ8qzgp7E6J\ntEJgHj9Wtn2YHMc0kL/CtPbcMoxF6UA7PiJo9c9ZiTzoToNnyI/rmHHr2iSQOIE=\n=NdDv\n-----END PGP SIGNATURE-----\n", "payload": "tree 41e1e2c804b45cf8d841456e3176b128b218362d\nparent e28c43f2f40cf405e89b3892aa65f6a06fa1c802\nparent 0114e3e5b3b222c190a640bdeda8e781042389c4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1635415992 +0000\ncommitter GitHub <noreply@github.com> 1635415992 +0000\n\nMerge #775\n\n775: Support const within block-expr's r=philberty a=philberty\n\nThis adds support for constant folding within block expr's and constant\r\nArrayIndexExpression.\r\n\r\nFixes #711 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ce3ef6b024736dfcbfabb062100c685fa95c6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ce3ef6b024736dfcbfabb062100c685fa95c6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ce3ef6b024736dfcbfabb062100c685fa95c6b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e28c43f2f40cf405e89b3892aa65f6a06fa1c802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e28c43f2f40cf405e89b3892aa65f6a06fa1c802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e28c43f2f40cf405e89b3892aa65f6a06fa1c802"}, {"sha": "0114e3e5b3b222c190a640bdeda8e781042389c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0114e3e5b3b222c190a640bdeda8e781042389c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0114e3e5b3b222c190a640bdeda8e781042389c4"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "21e581478a030d1130cca87441086f37c72247d9", "filename": "gcc/rust/backend/rust-compile-stmt.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ce3ef6b024736dfcbfabb062100c685fa95c6b/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ce3ef6b024736dfcbfabb062100c685fa95c6b/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h?ref=a2ce3ef6b024736dfcbfabb062100c685fa95c6b", "patch": "@@ -48,6 +48,33 @@ class CompileStmt : public HIRCompileBase\n     translated = CompileExpr::Compile (stmt.get_expr (), ctx);\n   }\n \n+  void visit (HIR::ConstantItem &constant) override\n+  {\n+    TyTy::BaseType *resolved_type = nullptr;\n+    bool ok\n+      = ctx->get_tyctx ()->lookup_type (constant.get_mappings ().get_hirid (),\n+\t\t\t\t\t&resolved_type);\n+    rust_assert (ok);\n+\n+    ::Btype *type = TyTyResolveCompile::compile (ctx, resolved_type);\n+    Bexpression *value = CompileExpr::Compile (constant.get_expr (), ctx);\n+\n+    const Resolver::CanonicalPath *canonical_path = nullptr;\n+    rust_assert (ctx->get_mappings ()->lookup_canonical_path (\n+      constant.get_mappings ().get_crate_num (),\n+      constant.get_mappings ().get_nodeid (), &canonical_path));\n+\n+    std::string ident = canonical_path->get ();\n+    Bexpression *const_expr\n+      = ctx->get_backend ()->named_constant_expression (type, ident, value,\n+\t\t\t\t\t\t\tconstant.get_locus ());\n+\n+    ctx->push_const (const_expr);\n+    ctx->insert_const_decl (constant.get_mappings ().get_hirid (), const_expr);\n+\n+    translated = const_expr;\n+  }\n+\n   void visit (HIR::LetStmt &stmt) override\n   {\n     // nothing to do"}, {"sha": "eab0922ca7d3cae3b5b4845189ff6806f581aa63", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ce3ef6b024736dfcbfabb062100c685fa95c6b/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ce3ef6b024736dfcbfabb062100c685fa95c6b/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=a2ce3ef6b024736dfcbfabb062100c685fa95c6b", "patch": "@@ -83,6 +83,34 @@ class ASTLoweringStmt : public ASTLoweringBase\n     mappings->insert_hir_stmt (crate_num, mapping.get_hirid (), translated);\n   }\n \n+  void visit (AST::ConstantItem &constant) override\n+  {\n+    HIR::Visibility vis = HIR::Visibility::create_public ();\n+\n+    HIR::Type *type = ASTLoweringType::translate (constant.get_type ().get ());\n+    HIR::Expr *expr = ASTLoweringExpr::translate (constant.get_expr ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, constant.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    HIR::ConstantItem *constant_item\n+      = new HIR::ConstantItem (mapping, constant.get_identifier (), vis,\n+\t\t\t       std::unique_ptr<HIR::Type> (type),\n+\t\t\t       std::unique_ptr<HIR::Expr> (expr),\n+\t\t\t       constant.get_outer_attrs (),\n+\t\t\t       constant.get_locus ());\n+    translated = constant_item;\n+\n+    mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       constant_item);\n+    mappings->insert_hir_stmt (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       constant_item);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       constant.get_locus ());\n+  }\n+\n   void visit (AST::LetStmt &stmt) override\n   {\n     HIR::Pattern *variables"}, {"sha": "98fcaf2eda5baa2e400946bdcc20a174fe2a6676", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ce3ef6b024736dfcbfabb062100c685fa95c6b/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ce3ef6b024736dfcbfabb062100c685fa95c6b/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=a2ce3ef6b024736dfcbfabb062100c685fa95c6b", "patch": "@@ -51,6 +51,30 @@ class ResolveStmt : public ResolverBase\n     ResolveExpr::go (stmt.get_expr ().get (), stmt.get_node_id ());\n   }\n \n+  void visit (AST::ConstantItem &constant) override\n+  {\n+    auto path = ResolveConstantItemToCanonicalPath::resolve (constant);\n+    resolver->get_name_scope ().insert (\n+      path, constant.get_node_id (), constant.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (constant.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+    resolver->insert_new_definition (constant.get_node_id (),\n+\t\t\t\t     Definition{constant.get_node_id (),\n+\t\t\t\t\t\tconstant.get_node_id ()});\n+\n+    ResolveType::go (constant.get_type ().get (), constant.get_node_id ());\n+    ResolveExpr::go (constant.get_expr ().get (), constant.get_node_id ());\n+\n+    // the mutability checker needs to verify for immutable decls the number\n+    // of assignments are <1. This marks an implicit assignment\n+    resolver->mark_decl_mutability (constant.get_node_id (), false);\n+    resolver->mark_assignment_to_decl (constant.get_node_id (),\n+\t\t\t\t       constant.get_node_id ());\n+  }\n+\n   void visit (AST::LetStmt &stmt) override\n   {\n     if (stmt.has_init_expr ())"}, {"sha": "2bf0f2cb59b7924318840838d6a61e1843b16270", "filename": "gcc/rust/typecheck/rust-hir-const-fold.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ce3ef6b024736dfcbfabb062100c685fa95c6b/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ce3ef6b024736dfcbfabb062100c685fa95c6b/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h?ref=a2ce3ef6b024736dfcbfabb062100c685fa95c6b", "patch": "@@ -427,6 +427,15 @@ class ConstFoldExpr : public ConstFoldBase\n       = ctx->get_backend ()->negation_expression (op, negated_expr, location);\n   }\n \n+  void visit (HIR::ArrayIndexExpr &expr) override\n+  {\n+    Bexpression *array = ConstFoldExpr::fold (expr.get_array_expr ());\n+    Bexpression *index = ConstFoldExpr::fold (expr.get_index_expr ());\n+\n+    folded = ctx->get_backend ()->array_index_expression (array, index,\n+\t\t\t\t\t\t\t  expr.get_locus ());\n+  }\n+\n private:\n   ConstFoldExpr ()\n     : ConstFoldBase (), folded (ctx->get_backend ()->error_expression ())"}, {"sha": "74bc0374cd8b6a2aaf87f4b4e3a80c070d297549", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ce3ef6b024736dfcbfabb062100c685fa95c6b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ce3ef6b024736dfcbfabb062100c685fa95c6b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=a2ce3ef6b024736dfcbfabb062100c685fa95c6b", "patch": "@@ -55,6 +55,19 @@ class TypeCheckStmt : public TypeCheckBase\n       = TyTy::TupleType::get_unit_type (stmt.get_mappings ().get_hirid ());\n   }\n \n+  void visit (HIR::ConstantItem &constant) override\n+  {\n+    TyTy::BaseType *type = TypeCheckType::Resolve (constant.get_type ());\n+    TyTy::BaseType *expr_type\n+      = TypeCheckExpr::Resolve (constant.get_expr (), false);\n+\n+    infered = type->unify (expr_type);\n+    context->insert_type (constant.get_mappings (), infered);\n+\n+    // notify the constant folder of this\n+    ConstFold::ConstFoldItem::fold (constant);\n+  }\n+\n   void visit (HIR::LetStmt &stmt) override\n   {\n     infered = new TyTy::TupleType (stmt.get_mappings ().get_hirid ());"}, {"sha": "d06324e8e65445e542693483311c2ba5bf864184", "filename": "gcc/testsuite/rust/compile/torture/constant2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ce3ef6b024736dfcbfabb062100c685fa95c6b/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ce3ef6b024736dfcbfabb062100c685fa95c6b/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant2.rs?ref=a2ce3ef6b024736dfcbfabb062100c685fa95c6b", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    const C: usize = 42;\n+\n+    let _a = C;\n+    let _b: [i32; C] = [0; C];\n+}"}, {"sha": "d2f1dd5b6db6471ee24ff074d7b2934d56a0fae9", "filename": "gcc/testsuite/rust/compile/torture/constant3.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ce3ef6b024736dfcbfabb062100c685fa95c6b/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ce3ef6b024736dfcbfabb062100c685fa95c6b/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant3.rs?ref=a2ce3ef6b024736dfcbfabb062100c685fa95c6b", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    const A: [i32; 3] = [1, 2, 3];\n+    const B: i32 = A[1];\n+    const C: usize = 42;\n+    const D: i32 = 7;\n+\n+    let _a = C;\n+    let _b: [i32; C] = [0; C];\n+    let _c = B + D;\n+}"}]}