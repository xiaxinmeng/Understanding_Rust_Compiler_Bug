{"sha": "99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTllOGRmN2E0Y2MwYmIxYmZhNDllNjljY2IwZjdlMDJjOTc1NWUzYw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-05T00:16:54Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-05T00:16:54Z"}, "message": "Daily bump.", "tree": {"sha": "833270e522e3fd933ea138050b27574b4c7e196a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/833270e522e3fd933ea138050b27574b4c7e196a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/comments", "author": null, "committer": null, "parents": [{"sha": "058d6acefe8bac4a66c8e7fb4951276db188e2d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058d6acefe8bac4a66c8e7fb4951276db188e2d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/058d6acefe8bac4a66c8e7fb4951276db188e2d8"}], "stats": {"total": 588, "additions": 587, "deletions": 1}, "files": [{"sha": "2174ab1ea902b819223af5e1f136680c489de0ba", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "patch": "@@ -1,3 +1,8 @@\n+2021-05-04  Nick Clifton  <nickc@redhat.com>\n+\n+\t* configure.ac (AC_PROG_CC): Replace with AC_PROG_CC_C99.\n+\t* configure: Regenerate.\n+\n 2021-04-28  Jakub Jelinek  <jakub@redhat.com>\n \t    Tobias Burnus  <tobias@codesourcery.com>\n "}, {"sha": "7b69f9dca4f2329251f6d4776773a3e6879c9271", "filename": "gcc/ChangeLog", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "patch": "@@ -1,3 +1,155 @@\n+2021-05-04  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/rs6000-call.c (rs6000_output_mi_thunk): Use\n+\tget_fnname_from_decl for name of thunk.\n+\t* config/rs6000/rs6000.c (rs6000_declare_alias): Use assemble_name\n+\tand ASM_OUTPUT_LABEL.\n+\t(rs6000_xcoff_declare_function_name): Use assemble_name and\n+\tASM_OUTPUT_LABEL.\n+\t(rs6000_xcoff_declare_object_name): Use ASM_OUTPUT_LABEL.\n+\t(rs6000_xcoff_encode_section_info): Don't add mapping class\n+\tfor aliases.  Always add [DS] mapping class to primary\n+\tFUNCTION_DECL.\n+\t(rs6000_asm_weaken_decl): Don't explicitly add [DS].\n+\n+2021-05-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/100307\n+\t* builtins.c (compute_objsize_r): Clear base0 for pointers.\n+\n+2021-05-04  Jeff Law  <jlaw@tachyum.com>\n+\n+\t* config/bfin/bfin.h (NOTICE_UPDATE_CC): Remove.\n+\n+2021-05-04  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* caller-save.c: Remove CC0.\n+\t* cfgcleanup.c: Remove CC0.\n+\t* cfgrtl.c: Remove CC0.\n+\t* combine.c: Remove CC0.\n+\t* compare-elim.c: Remove CC0.\n+\t* conditions.h: Remove CC0.\n+\t* config/h8300/h8300.h: Remove CC0.\n+\t* config/h8300/h8300-protos.h: Remove CC0.\n+\t* config/h8300/peepholes.md: Remove CC0.\n+\t* config/i386/x86-tune-sched.c: Remove CC0.\n+\t* config/m68k/m68k.c: Remove CC0.\n+\t* config/rl78/rl78.c: Remove CC0.\n+\t* config/sparc/sparc.c: Remove CC0.\n+\t* config/xtensa/xtensa.c: Remove CC0.\n+\t(gen_conditional_move):  Use pc_rtx instead of cc0_rtx in a piece of\n+\tRTL where that is used as a placeholder only.\n+\t* cprop.c: Remove CC0.\n+\t* cse.c: Remove CC0.\n+\t* cselib.c: Remove CC0.\n+\t* df-problems.c: Remove CC0.\n+\t* df-scan.c: Remove CC0.\n+\t* doc/md.texi: Remove CC0.  Adjust an example.\n+\t* doc/rtl.texi: Remove CC0.  Adjust an example.\n+\t* doc/tm.texi: Regenerate.\n+\t* doc/tm.texi.in: Remove CC0.\n+\t* emit-rtl.c: Remove CC0.\n+\t* final.c: Remove CC0.\n+\t* fwprop.c: Remove CC0.\n+\t* gcse-common.c: Remove CC0.\n+\t* gcse.c: Remove CC0.\n+\t* genattrtab.c: Remove CC0.\n+\t* genconfig.c: Remove CC0.\n+\t* genemit.c: Remove CC0.\n+\t* genextract.c: Remove CC0.\n+\t* gengenrtl.c: Remove CC0.\n+\t* genrecog.c: Remove CC0.\n+\t* haifa-sched.c: Remove CC0.\n+\t* ifcvt.c: Remove CC0.\n+\t* ira-costs.c: Remove CC0.\n+\t* ira.c: Remove CC0.\n+\t* jump.c: Remove CC0.\n+\t* loop-invariant.c: Remove CC0.\n+\t* lra-constraints.c: Remove CC0.\n+\t* lra-eliminations.c: Remove CC0.\n+\t* optabs.c: Remove CC0.\n+\t* postreload-gcse.c: Remove CC0.\n+\t* postreload.c: Remove CC0.\n+\t* print-rtl.c: Remove CC0.\n+\t* read-rtl-function.c: Remove CC0.\n+\t* reg-notes.def: Remove CC0.\n+\t* reg-stack.c: Remove CC0.\n+\t* reginfo.c: Remove CC0.\n+\t* regrename.c: Remove CC0.\n+\t* reload.c: Remove CC0.\n+\t* reload1.c: Remove CC0.\n+\t* reorg.c: Remove CC0.\n+\t* resource.c: Remove CC0.\n+\t* rtl.c: Remove CC0.\n+\t* rtl.def: Remove CC0.\n+\t* rtl.h: Remove CC0.\n+\t* rtlanal.c: Remove CC0.\n+\t* sched-deps.c: Remove CC0.\n+\t* sched-rgn.c: Remove CC0.\n+\t* shrink-wrap.c: Remove CC0.\n+\t* simplify-rtx.c: Remove CC0.\n+\t* system.h: Remove CC0.  Poison NOTICE_UPDATE_CC, CC_STATUS_MDEP_INIT,\n+\tCC_STATUS_MDEP, and CC_STATUS.\n+\t* target.def: Remove CC0.\n+\t* valtrack.c: Remove CC0.\n+\t* var-tracking.c: Remove CC0.\n+\n+2021-05-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100414\n+\t* tree-ssa-phiopt.c (get_non_trapping): Do not compute dominance\n+\tinfo here.\n+\t(tree_ssa_phiopt_worker): But unconditionally here.\n+\n+2021-05-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* omp-low.c (lower_rec_input_clauses, lower_reduction_clauses): Handle\n+\t&& and || with floating-point and complex arguments.\n+\n+2021-05-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-inline.c (insert_debug_decl_map): Delete.\n+\t(copy_debug_stmt): Minor tweak.\n+\t(setup_one_parameter): Do not use a variable if the value is either\n+\ta read-only DECL or a non-addressable local variable in the caller.\n+\tIn this case, insert the debug-only variable in the map manually.\n+\t(expand_call_inline): Do not generate a CLOBBER for these values.\n+\t* tree-inline.h (debug_map): Minor tweak.\n+\n+2021-05-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* builtins.c (builtin_with_linkage_p): Return true for stp[n]cpy.\n+\t* symtab.c (symtab_node::output_to_lto_symbol_table_p): Tidy up.\n+\n+2021-05-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100329\n+\t* tree-ssa-reassoc.c (can_reassociate_p): Do not reassociate\n+\tasm goto defs.\n+\t(insert_stmt_after): Assert we're not running into asm goto.\n+\n+2021-05-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100398\n+\t* tree-ssa-dse.c (pass_dse::execute): Preserve control\n+\taltering stmts.\n+\n+2021-05-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* builtins.c (try_store_by_multiple_pieces): Fix constfun's prototype.\n+\n+2021-05-04  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* builtins.c (try_store_by_multiple_pieces): New.\n+\t(expand_builtin_memset_args): Use it.  If target_char_cast\n+\tfails, proceed as for non-constant val.  Pass len's ctz to...\n+\t* expr.c (clear_storage_hints): ... this.  Try store by\n+\tmultiple pieces after setmem.\n+\t(clear_storage): Adjust.\n+\t* expr.h (clear_storage_hints): Likewise.\n+\t(try_store_by_multiple_pieces): Declare.\n+\t* passes.def: Replace the last copy_prop with ccp.\n+\n 2021-05-03  Tom de Vries  <tdevries@suse.de>\n \n \tPR target/100321"}, {"sha": "eb085aa83ab239cd32a50a98598cd3f39f167b60", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "patch": "@@ -1 +1 @@\n-20210504\n+20210505"}, {"sha": "adcf2f5adb43dca6f672660b900f6feb95141f89", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 284, "deletions": 0, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "patch": "@@ -1,3 +1,287 @@\n+2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* pprint.adb: Remove qualification of arbitrary calls to\n+\tSinfo.Expressions and Sinfo.Parameter_Associations.\n+\n+2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* pprint.adb (Expr_Name): Simplify with functional variant of\n+\tUI_Image.\n+\n+2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* pprint.adb (To_Mixed): Removed.\n+\n+2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* pprint.adb (List_Name_Count): Change type from Integer to\n+\tNatural.\n+\n+2021-05-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* pprint.adb (Expression_Image): Special case for\n+\texpression-with-actions.\n+\n+2021-05-04  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Concatenate): Remove the non-optimization.\n+\n+2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* lib-xref.adb (Generate_Reference_To_Formals): Remove dedicated\n+\tbranch for generic subprograms (they are now handled together\n+\twith non-generic subprograms in the ELSE branch); replace a\n+\tlow-level Ekind membership test with a high-level call to\n+\tIs_Access_Subprogram_Type.\n+\n+2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch12.adb (Check_Abstract_Primitives): Match First_Formal\n+\twith Next_Formal.\n+\t* sem_ch6.adb (Is_Non_Overriding_Operation): Likewise.\n+\n+2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Collect_Global_Item): Iterate directly over\n+\tformals.\n+\n+2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.ads (Collect_Subprogram_Inputs_Outputs): Update\n+\tcomment; this routine is no longer used by GNATprove.\n+\t* sem_prag.adb (Find_Role): The IN parameter is on output only\n+\twhen it belongs to non-function; also, the otherwise constant\n+\tobject can only be written by a non-function.\n+\t(Collect_Global_Item): The IN parameter can only be written when\n+\tit belongs to non-function; also, unnest this check to make it\n+\teasier to read.\n+\n+2021-05-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-assert.ads (Assert_Failure): Now a renaming of\n+\tAssertion_Error.\n+\t* libgnat/a-assert.ads (Assertion_Error): Now a first class\n+\tcitizen.  Remove dependency on System.Assertions.\n+\t* gcc-interface/a-assert.ads, gcc-interface/a-assert.adb: New.\n+\t* gcc-interface/Make-lang.in (GNAT_ADA_OBJS, GNATBIND_OBJS): Add\n+\ta-assert.o from gcc-interface.\n+\n+2021-05-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* erroutc.adb (Matches): Move spec...\n+\t* erroutc.ads (Matches): ...here.\n+\n+2021-05-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Force error marker in\n+\tGNATprove mode.\n+\n+2021-05-04  Bob Duff  <duff@adacore.com>\n+\n+\t* binde.adb: No need for ??? marks in Binde, because it is\n+\tsuperseded by Bindo.\n+\t* bindo-writers.adb (Write_Unit_Closure): Verified that -Ra\n+\tworks.\n+\t* exp_ch4.adb, sinfo.ads (Expand_N_Type_Conversion): Rules for\n+\tconversions passed to gigi are documented in sinfo.ads.\n+\t(Expand_N_Unchecked_Type_Conversion): Comment is a duplicate of\n+\tone in sinfo.ads.\n+\t(Expand_N_In): Robert already added sufficient comments years\n+\tafter the ??? comment was inserted.\n+\t(Expand_Membership_Minimize_Eliminate_Overflow): I don't see any\n+\treason why Stand should export Long_Long_Integer'Base -- it\n+\tdoesn't export any other base types.\n+\t(Size_In_Storage_Elements): We are doing an allocator, so we\n+\tdon't care about sizes in bits.\n+\t(Expand_N_Allocator): PolyORB isn't going to be significantly\n+\timproved, so we're not going to mess with remote access to\n+\tclass-wide types.\n+\t(Optimize_Return_Stmt): It's not important to optimize return\n+\tstatements in predicate functions -- there are many\n+\tmore-important optimizations we could do. Keep part of the\n+\tcomment without \"???\", to clarify why the \"and then ...\".\n+\t(User_Defined_Primitive_Equality_Op): The optimization doesn't\n+\tseem important enough.\n+\t(Expand_N_Unchecked_Type_Conversion): Refactor to use\n+\tExpand_N_Unchecked_Expression.\n+\t(Make_Array_Comparison_Op): This seems like a case of \"it it's\n+\tnot broken, don't fix it\". Too much risk of causing bugs.\n+\t* debug_a.adb: Remove ??? comments asking why Current_Error_Node\n+\tis maintained unconditionally, and add a comment explaining why.\n+\t* errout.adb: These kinds of minor bugs do indeed exist, but\n+\twe're never going to get around to fixing them \"properly\", so we\n+\tneed this code for robustness.\n+\t* gnatchop.adb (Read_File): Document when read can fail.\n+\t* gnatdll.adb (Parse_Command_Line): Nobody is complaining about\n+\tthese arbitrary limits, so no need to use Table. Increase the\n+\tlimits just in case.  It is clear from the names what they are\n+\tlimits on.\n+\t* gnatlink.adb: Add needed comments.\n+\t(Delete): An existing comment makes clear it's intentional, and\n+\tit's been like that since 1996.\n+\t(Process_Args): Improve comments.\n+\t(Search_Library_Path): Refactoring to avoid deep nesting.\n+\t* inline.adb (Build_Body_To_Inline): Probably won't get around\n+\tto doing that optimization.\n+\t(Is_Unit_Subprogram): No, this should not be moved to Sem_Aux,\n+\tbecause it is too specialized to this context.\n+\t(Do_Reset): No comment is needed here; it's clear from the\n+\tcomment on Reset_Dispatching_Calls. Do_Reset is an artificial\n+\tsubprogram; if we had proper iterators, it would just be an if\n+\tstatement in the loop.\n+\t(Rewrite_Function_Call): Probably won't get around to doing that\n+\toptimization.\n+\t* layout.adb (Layout_Type): The gigi comment doesn't need to be\n+\ta ??? comment, and it's been that way since 2000.  The\n+\tlimitation to scalars will likely never be investigated, and\n+\tit's been that way since 2009.\n+\t* lib.adb (Check_Same_Extended_Unit): This doesn't look like\n+\tsomething that needs fixing; it looks like a permanent\n+\tworkaround.\n+\t* lib-load.adb (Change_Main_Unit_To_Spec): It is good enough in\n+\tpractice.\n+\t(Load_Unit): Nobody will ever get around to investigating the\n+\tobscure PMES oddity, and the optimization is not worth the\n+\ttrouble.\n+\t* live.adb: It's not worth documenting this. It is used only\n+\twith a debug switch. Nobody who has done significant work on it\n+\tis still around, so it would require substantial investigation.\n+\t* mdll.ads: I see no reason for USE.\n+\t* namet.ads: Routines are obsolete, but they're not going\n+\tanywhere anytime soon (too much work, and surprisingly delicate\n+\tbecause of dependences on global variables).\n+\t* osint.ads: Minor.\n+\t* osint.adb: Improve comments.\n+\t(Full_Lib_File_Name): Use Smart_Find_File.\n+\n+2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_prag.adb, sem_prag.adb: Replace low-level Ekind membership\n+\ttests with a high-level call to Is_Formal_Object.\n+\n+2021-05-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* cstand.adb, sprint.adb, switch-c.adb, xr_tabls.ads,\n+\txr_tabls.adb, xref_lib.adb: Address ??? comments.\n+\n+2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Global_Item): Take subprogram kind into\n+\taccount when accepting or rejecting a constant of an\n+\taccess-to-variable type as a global Output/In_Out; do this check\n+\tinside an ELSIF branch to avoid unnecessary evaluation of the\n+\tsubsequent condition.\n+\n+2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Role_Error, Usage_Error): Replace calls to\n+\tName_Find and Get_Name_String with a call to To_String.\n+\n+2021-05-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Build_Siz_Exp): new function, subsidiary of\n+\tExpand_Container_Aggregate, to create an expression to be used\n+\tin the dynamic allocation of a container with a single container\n+\telement association.\n+\t(Add_Range): Handle static bounds of ranges over enumerations.\n+\t(Expand_Container_Aggregate): Add declaration for size\n+\texpression when needed, and use it in container object\n+\tdeclaration for container.\n+\n+2021-05-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch7.adb (Build_Finalizer_Helper.New_Finalizer_Name):\n+\tUnnest so that it can be reused.\n+\t(Build_Finalizer_Helper.Process_Declarations): Call the\n+\txxx__finalize_body procedure of a package instantiation in case\n+\tit contains finalization statements.  Code clean ups.\n+\t(Build_Finalizer_Helper.Create_Finalizer): Export and set an\n+\tInterface_Name for library level finalizers since these may be\n+\timported now.\n+\t(Build_Finalizer_Helper): Need to process library level package\n+\tbody instantiations which may contain objects requiring\n+\tfinalization.\n+\t* libgnat/s-finmas.ads: Fix typo.\n+\n+2021-05-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* checks.adb (Append_Range_Checks, Apply_Selected_Length_Checks,\n+\tDetermine_Range, Insert_Range_Checks,\n+\tInstall_Null_Excluding_Check, Selected_Length_Checks,\n+\tSelected_Range_Checks): Address ??? comments and code cleanups.\n+\n+2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Check_Mode_Restriction_In_Enclosing_Context):\n+\tApply the rule even with no explicit Global contract (and remove\n+\ta dead condition for Refined_Global).\n+\n+2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Check_Mode_Restriction_In_Enclosing_Context):\n+\tExtend check to protected entries.\n+\n+2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Check_Mode_Restriction_In_Enclosing_Context):\n+\tFix reference to SPARK RM rule number.\n+\n+2021-05-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_intr.adb: Remove with/use clauses for Urealp.\n+\t(Expand_Is_Negative): Delete.\n+\t(Expand_Intrinsic_Call): Do not call it.\n+\t* rtsfind.ads (RE_Id): Remove RE_Float_Unsigned.\n+\t(RE_Unit_Table): Remove entry for RE_Float_Unsigned.\n+\t* snames.ads-tmpl (Name_Is_Negative): Delete.\n+\t* libgnat/s-imgrea.ads (Set_Image_Real): Fix mode of S parameter.\n+\t* libgnat/s-imgrea.adb: Add with/use clauses for System.Img_Util.\n+\t(LLU): New subtype.\n+\t(Maxdigs): Use it.\n+\t(Is_Negative): Reimplement.\n+\t(Image_Floating_Point): Simplify.\n+\t(Set_Image_Real): Fix mode of S parameter.  Remove the low-level\n+\tprocessing on characters.  Flip the sign of the Scale variable.\n+\tCompute the maximum number of digits for the straight notation.\n+\tCall Set_Decimal_Digits at the end to do the final formatting.\n+\t* libgnat/s-imguti.ads (Floating_Invalid_Value): New type.\n+\t(Set_Floating_Invalid_Value): New procedure.\n+\t* libgnat/s-imguti.adb (Set_Floating_Invalid_Value): Implement it\n+\tbased on existing code from Set_Image_Real.\n+\t* libgnat/s-unstyp.ads (Float_Unsigned): Delete.\n+\n+2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* csets.adb (Initialize): Refactor into CASE statement; raise\n+\texception on unsupported code of character set (it will be\n+\tgently rejected earlier when scanning command line switches).\n+\t* switch-b.adb (Scan_Binder_Switches): Refactor into a\n+\tmembership expression; add missing '9' choice; reorder as\n+\tdescribed by GNAT UG, section 4.3.11.\n+\t* switch-c.adb (Scan_Front_End_Switches): Refactor into a\n+\tmembership expression and reorder as above.\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst\n+\t(gnatic): Mention '5' as an allowed value for \"c\".\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2021-05-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* errout.adb (Error_Msg_Internal): Add assertion to prevent\n+\tstyle mistakes reappearing in the future.\n+\n+2021-05-04  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch4.adb (Tagged_Membership): Remove wrong condition that\n+\tis not consistent with the documentation of this subprogram.\n+\n+2021-05-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_res.adb (Valid_Conversion): Make message a continuation.\n+\n+2021-05-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* styleg.adb: Address ??? comments.\n+\n 2021-05-03  Arnaud Charlet  <charlet@adacore.com>\n \n \t* libgnat/a-stunau.ads, libgnat/a-stunau.adb,"}, {"sha": "29499d79b191fffd852bdb95189b0921adfd3cda", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "patch": "@@ -1,3 +1,8 @@\n+2021-05-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* c-typeck.c (c_finish_omp_clauses): Accept float + complex\n+\tfor || and && reductions.\n+\n 2021-04-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-typeck.c (function_types_compatible_p): For C2X, treat"}, {"sha": "fcb2075efd7e7c7da420c810d889c5085af72a43", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "patch": "@@ -1,3 +1,8 @@\n+2021-05-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* semantics.c (finish_omp_reduction_clause): Accept float + complex\n+\tfor || and && reductions.\n+\n 2021-05-03  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/100362"}, {"sha": "9d2d4fa20ae44f41817f9e52d673811934c65b50", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "patch": "@@ -1,3 +1,8 @@\n+2021-05-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR testsuite/100397\n+\t* trans-openmp.c (gfc_trans_omp_depobj): Fix pasto in enum values.\n+\n 2021-04-28  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* openmp.c (gfc_match_omp_variable_list): Gobble whitespace before"}, {"sha": "9efe850e0d896a38e99b39c25ac0e55c97ce2e73", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "patch": "@@ -1,3 +1,52 @@\n+2021-05-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/100307\n+\t* g++.dg/warn/Wplacement-new-size-9.C: New test.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-26.c: New test.\n+\n+2021-05-04  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/Wvla-parameter-3.c: Use unique strings in directive names.\n+\n+2021-05-04  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/Wvla-parameter-2.c: Use unique strings in directive names.\n+\n+2021-05-04  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* gcc.target/s390/oscbreak-1.c: Compile with -O1\n+\t-fschedule-insns\n+\n+2021-05-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100414\n+\t* gcc.dg/pr100414.c: New testcase.\n+\n+2021-05-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gcc.dg/gomp/clause-1.c: Use 'reduction(&:..)' instead of '...(&&:..)'.\n+\n+2021-05-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt94.adb: New file.\n+\t* gnat.dg/opt94_pkg.adb: New file.\n+\t* gnat.dg/opt94_pkg.ads: New file.\n+\n+2021-05-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-dse-26.c: Skip on !lp64 targets,\n+\tsimplify dump scanning down to one case.\n+\n+2021-05-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100329\n+\t* gcc.dg/torture/pr100329.c: New testcase.\n+\n+2021-05-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100398\n+\t* gcc.dg/torture/pr100398.c: New testcase.\n+\n 2021-05-03  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vmla_float_not_fused.c:"}, {"sha": "b62f175dd688624803c4734dcf948fe4a28b3549", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "patch": "@@ -1,3 +1,16 @@\n+2021-05-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.c-c++-common/reduction-1.c: New test.\n+\t* testsuite/libgomp.c-c++-common/reduction-2.c: New test.\n+\t* testsuite/libgomp.c-c++-common/reduction-3.c: New test.\n+\t* testsuite/libgomp.c-c++-common/reduction-4.c: New file.\n+\n+2021-05-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR testsuite/100397\n+\t* testsuite/libgomp.fortran/depobj-1.f90 (dep2, dep3): Move var\n+\tdeclaration to scope of non-'depend'-guarded assignment to avoid races.\n+\n 2021-05-03  Tom de Vries  <tdevries@suse.de>\n \n \tPR target/100321"}, {"sha": "fa64ab3b8dde78b04883905011162fb3cdb76d5d", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "patch": "@@ -1,3 +1,8 @@\n+2021-05-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* configure.ac: Make test for variables more robust.\n+\t* configure: Regenerate.\n+\n 2021-05-03  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR bootstrap/99703"}, {"sha": "f9ef08af343bc766750e8e35252d44efafb17f7c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=99e8df7a4cc0bb1bfa49e69ccb0f7e02c9755e3c", "patch": "@@ -1,3 +1,66 @@\n+2021-05-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/future (promise::set_value): Check for existence\n+\tof shared state before dereferncing it.\n+\t(promise::set_exception, promise::set_value_at_thread_exit)\n+\t(promise::set_exception_at_thread_exit): Likewise.\n+\t(promise<R&>::set_value, promise<R&>::set_exception)\n+\t(promise<R&>::set_value_at_thread_exit)\n+\t(promise<R&>::set_exception_at_thread_exit): Likewise.\n+\t(promise<void>::set_value, promise<void>::set_exception)\n+\t(promise<void>::set_value_at_thread_exit)\n+\t(promise<void>::set_exception_at_thread_exit): Likewise.\n+\t* testsuite/30_threads/promise/members/at_thread_exit2.cc:\n+\tRemove unused variable.\n+\n+2021-05-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h (basic_string(const CharT*, const A&)):\n+\tDo not do arithmetic on null pointer.\n+\n+2021-05-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp\n+\t(find_key_pointer(key_const_reference, false_type))\n+\t(find_key_pointer(key_const_reference, true_type)): Do not\n+\tdereference null pointer.\n+\n+2021-05-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/from_chars/3.cc: Use unsigned type to avoid\n+\toverflow.\n+\t* testsuite/24_iterators/reverse_iterator/2.cc: Do not add\n+\tnon-zero value to null pointer.\n+\t* testsuite/25_algorithms/copy_backward/move_iterators/69478.cc:\n+\tUse past-the-end iterator for result.\n+\t* testsuite/25_algorithms/move_backward/69478.cc: Likewise.\n+\t* testsuite/25_algorithms/move_backward/93872.cc: Likewise.\n+\n+2021-05-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100384\n+\t* include/std/variant (__get_t): New alias template yielding the\n+\treturn type of std::get<N> on a variant.\n+\t(__visit_result_t): New alias template yielding the result of\n+\tstd::visit.\n+\t(__same_types): Move into namespace __detail::__variant.\n+\t(__check_visitor_results): Likewise. Use __invoke_result_t and\n+\t__get_t.\n+\t(__check_visitor_result): Remove.\n+\t(visit): Use __visit_result_t for return type.\n+\t* testsuite/20_util/variant/100384.cc: New test.\n+\n+2021-05-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE_INT128_FLOAT128): Remove\n+\tchecks for __int128 and rename to GLIBCXX_ENABLE_FLOAT128.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Adjust to use GLIBCXX_ENABLE_FLOAT128.\n+\t* include/bits/random.h (_Select_uint_least_t<s, 1>):\n+\tUse __SIZEOF_INT128__ to decide whether to use __int128.\n+\t* include/std/charconv (__to_chars_unsigned_type): Likewise.\n+\n 2021-05-03  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/ctype.xml: Move unix.org reference to https."}]}