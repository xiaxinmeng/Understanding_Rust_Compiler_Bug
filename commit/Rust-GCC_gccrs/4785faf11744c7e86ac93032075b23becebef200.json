{"sha": "4785faf11744c7e86ac93032075b23becebef200", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc4NWZhZjExNzQ0YzdlODZhYzkzMDMyMDc1YjIzYmVjZWJlZjIwMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchell@usa.net", "date": "1998-05-10T23:46:36Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-05-10T23:46:36Z"}, "message": "typeck.c (build_c_cast): Don't decay arrays and functions to pointer type when converting to a class type.\n\n\t* typeck.c (build_c_cast): Don't decay arrays and functions to\n\tpointer type when converting to a class type.\n\nFrom-SVN: r19659", "tree": {"sha": "8af3e025a91323607b63011f8ad4ad4dbfef73b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8af3e025a91323607b63011f8ad4ad4dbfef73b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4785faf11744c7e86ac93032075b23becebef200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4785faf11744c7e86ac93032075b23becebef200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4785faf11744c7e86ac93032075b23becebef200", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4785faf11744c7e86ac93032075b23becebef200/comments", "author": null, "committer": null, "parents": [{"sha": "e1b1668d45ab0993390510ac0c042746eefa0f8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b1668d45ab0993390510ac0c042746eefa0f8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1b1668d45ab0993390510ac0c042746eefa0f8f"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "315feea3bd5dc14fe566d4115db9b5619349a486", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4785faf11744c7e86ac93032075b23becebef200/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4785faf11744c7e86ac93032075b23becebef200/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4785faf11744c7e86ac93032075b23becebef200", "patch": "@@ -1,3 +1,8 @@\n+Sun May 10 23:43:13 1998  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* typeck.c (build_c_cast): Don't decay arrays and functions to\n+\tpointer type when converting to a class type.\n+\n Sun May 10 22:53:56 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cp-tree.h (DECL_NAMESPACE_SCOPE): New macro."}, {"sha": "fe66a3b815ecb26022b06da2edca5e0b7f2963aa", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4785faf11744c7e86ac93032075b23becebef200/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4785faf11744c7e86ac93032075b23becebef200/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4785faf11744c7e86ac93032075b23becebef200", "patch": "@@ -5633,16 +5633,36 @@ build_c_cast (type, expr)\n \n       /* Convert functions and arrays to pointers and\n \t convert references to their expanded types,\n-\t but don't convert any other types.  */\n-      if (TREE_CODE (TREE_TYPE (value)) == FUNCTION_TYPE\n-\t  || (TREE_CODE (TREE_TYPE (value)) == METHOD_TYPE\n-\t      /* Don't do the default conversion if we want a\n-\t\t pointer to a function.  */\n-\t      && ! (TREE_CODE (type) == POINTER_TYPE\n-\t\t    && TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE))\n-\t  || TREE_CODE (TREE_TYPE (value)) == ARRAY_TYPE\n-\t  || TREE_CODE (TREE_TYPE (value)) == REFERENCE_TYPE)\n-\tvalue = default_conversion (value);\n+\t but don't convert any other types.  If, however, we are\n+\t casting to a class type, there's no reason to do this: the\n+\t cast will only succeed if there is a converting constructor,\n+\t and the default conversions will be done at that point.  In\n+\t fact, doing the default conversion here is actually harmful\n+\t in cases like this:\n+\n+\t     typedef int A[2];\n+             struct S { S(const A&); };\n+\n+         since we don't want the array-to-pointer conversion done.  */\n+      if (!IS_AGGR_TYPE (type))\n+\t{\n+\t  if (TREE_CODE (TREE_TYPE (value)) == FUNCTION_TYPE\n+\t      || (TREE_CODE (TREE_TYPE (value)) == METHOD_TYPE\n+\t\t  /* Don't do the default conversion if we want a\n+\t\t     pointer to a function.  */\n+\t\t  && ! (TREE_CODE (type) == POINTER_TYPE\n+\t\t\t&& TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE))\n+\t      || TREE_CODE (TREE_TYPE (value)) == ARRAY_TYPE\n+\t      || TREE_CODE (TREE_TYPE (value)) == REFERENCE_TYPE)\n+\t  value = default_conversion (value);\n+\t}\n+      else if (TREE_CODE (TREE_TYPE (value)) == REFERENCE_TYPE)\n+\t/* However, even for class types, we still need to strip away\n+\t   the reference type, since the call to convert_force below\n+\t   does not expect the input expression to be of reference\n+\t   type.  */\n+\tvalue = convert_from_reference (value);\n+\t\n       otype = TREE_TYPE (value);\n \n       /* Optionally warn about potentially worrisome casts.  */"}, {"sha": "f448cc1a31befbed2915c796724a97d46bc4fcda", "filename": "gcc/testsuite/g++.old-deja/g++.other/cvt1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4785faf11744c7e86ac93032075b23becebef200/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcvt1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4785faf11744c7e86ac93032075b23becebef200/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcvt1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcvt1.C?ref=4785faf11744c7e86ac93032075b23becebef200", "patch": "@@ -0,0 +1,23 @@\n+// Build don't link:\n+\n+typedef int Array_T[2];\n+\n+struct S1 {\n+  S1(const Array_T&);\n+};\n+\n+struct S2 {\n+  S1 g();\n+  Array_T a;\n+};\n+\n+S1 S2::g()\n+{\n+  return S1(a);\n+}\n+\n+void h()\n+{\n+  S2 s2;\n+  s2.g();\n+}"}]}