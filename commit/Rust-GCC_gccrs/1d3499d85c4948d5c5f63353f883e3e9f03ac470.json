{"sha": "1d3499d85c4948d5c5f63353f883e3e9f03ac470", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQzNDk5ZDg1YzQ5NDhkNWM1ZjYzMzUzZjg4M2UzZTlmMDNhYzQ3MA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2009-08-11T05:14:48Z"}, "committer": {"name": "Douglas Rupp", "email": "rupp@gcc.gnu.org", "date": "2009-08-11T05:14:48Z"}, "message": "alpha.c (alpha_sa_size): Force procedure type to PT_STACK when frame_pointer_needed on OpenVMS.\n\n\n\t* config/alpha/alpha.c (alpha_sa_size): Force procedure type to\n\tPT_STACK when frame_pointer_needed on OpenVMS.\n\t(alpha_pv_save_size, alpha_using_fp): Remove.\n\t(alpha_vms_can_eliminate): New function. Support for CAN_ELIMINATE\n\twith proper processing for PT_NULL.\n\t(alpha_vms_initial_elimination_offset): New function. Support for\n\tINITIAL_ELIMINATION_OFFSET with proper processing for PT_NULL.\n\t(alpha_sa_size): Force procedure type to PT_STACK when\n\tframe_pointer_needed on OpenVMS.\n\t* config/alpha/alpha-protos.h (alpha_pv_save_size): Remove prototype.\n\t(alpha_using_fp): Likewise.\n\t(alpha_vms_can_eliminate): Add prototype.\n\t(alpha_vms_initial_elimination_offset): Likewise.\n\t* config/alpha/vms.h (CAN_ELIMINATE, INITIAL_ELIMINATION_OFFSET):\n\tCall alpha_vms_can_eliminate and alpha_vms_initial_elimination_offset.\n\n\nCo-Authored-By: Douglas B Rupp <rupp@gnat.com>\n\nFrom-SVN: r150646", "tree": {"sha": "726a4e25c2f63f6e9ee47f0a4f11896fc99b25fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/726a4e25c2f63f6e9ee47f0a4f11896fc99b25fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d3499d85c4948d5c5f63353f883e3e9f03ac470", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3499d85c4948d5c5f63353f883e3e9f03ac470", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d3499d85c4948d5c5f63353f883e3e9f03ac470", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3499d85c4948d5c5f63353f883e3e9f03ac470/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18fd56217002bffa01650080d60271b4d0d3ef27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18fd56217002bffa01650080d60271b4d0d3ef27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18fd56217002bffa01650080d60271b4d0d3ef27"}], "stats": {"total": 145, "additions": 112, "deletions": 33}, "files": [{"sha": "d15941a38bc3680935821239463dc4b7dd3988d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3499d85c4948d5c5f63353f883e3e9f03ac470/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3499d85c4948d5c5f63353f883e3e9f03ac470/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d3499d85c4948d5c5f63353f883e3e9f03ac470", "patch": "@@ -1,3 +1,22 @@\n+2009-08-10  Olivier Hainque  <hainqueu@adacore.com>\n+            Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* config/alpha/alpha.c (alpha_sa_size): Force procedure type to\n+\tPT_STACK when frame_pointer_needed on OpenVMS.\n+\t(alpha_pv_save_size, alpha_using_fp): Remove.\n+\t(alpha_vms_can_eliminate): New function. Support for CAN_ELIMINATE\n+\twith proper processing for PT_NULL.\n+\t(alpha_vms_initial_elimination_offset): New function. Support for\n+\tINITIAL_ELIMINATION_OFFSET with proper processing for PT_NULL.\n+\t(alpha_sa_size): Force procedure type to PT_STACK when\n+\tframe_pointer_needed on OpenVMS.\n+\t* config/alpha/alpha-protos.h (alpha_pv_save_size): Remove prototype.\n+\t(alpha_using_fp): Likewise.\n+\t(alpha_vms_can_eliminate): Add prototype.\n+\t(alpha_vms_initial_elimination_offset): Likewise.\n+\t* config/alpha/vms.h (CAN_ELIMINATE, INITIAL_ELIMINATION_OFFSET):\n+\tCall alpha_vms_can_eliminate and alpha_vms_initial_elimination_offset.\n+\n 2009-08-10  Eric Botcazou  <botcazou@adacore.com>\n             Douglas B Rupp  <rupp@gnat.com>\n "}, {"sha": "43665d3af20f0aa75aaf9b44846f9fafa5643162", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3499d85c4948d5c5f63353f883e3e9f03ac470/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3499d85c4948d5c5f63353f883e3e9f03ac470/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=1d3499d85c4948d5c5f63353f883e3e9f03ac470", "patch": "@@ -28,8 +28,6 @@ extern int direct_return (void);\n extern int alpha_sa_size (void);\n extern HOST_WIDE_INT alpha_initial_elimination_offset (unsigned int,\n \t\t\t\t\t\t       unsigned int);\n-extern int alpha_pv_save_size (void);\n-extern int alpha_using_fp (void);\n extern void alpha_expand_prologue (void);\n extern void alpha_expand_epilogue (void);\n extern void alpha_output_filename (FILE *, const char *);\n@@ -116,7 +114,9 @@ extern void avms_asm_output_external (FILE *, tree, const char *);\n extern void vms_output_aligned_decl_common (FILE *, tree, const char *,\n \t\t\t\t\t    unsigned HOST_WIDE_INT,\n \t\t\t\t\t    unsigned int);\n-\n+extern int alpha_vms_can_eliminate (unsigned int, unsigned int);\n+extern HOST_WIDE_INT alpha_vms_initial_elimination_offset (unsigned int,\n+\t\t\t\t\t\t\t   unsigned int);\n #endif\n \n extern rtx unicosmk_add_call_info_word (rtx);"}, {"sha": "a1ec73630bf7bf05150d08b9ee7beb7dfecb2c0f", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 87, "deletions": 12, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3499d85c4948d5c5f63353f883e3e9f03ac470/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3499d85c4948d5c5f63353f883e3e9f03ac470/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=1d3499d85c4948d5c5f63353f883e3e9f03ac470", "patch": "@@ -7353,10 +7353,10 @@ alpha_sa_size (void)\n     }\n   else if (TARGET_ABI_OPEN_VMS)\n     {\n-      /* Start by assuming we can use a register procedure if we don't\n-\t make any calls (REG_RA not used) or need to save any\n-\t registers and a stack procedure if we do.  */\n-      if ((mask[0] >> REG_RA) & 1)\n+      /* Start with a stack procedure if we make any calls (REG_RA used), or\n+\t need a frame pointer, with a register procedure if we otherwise need\n+\t at least a slot, and with a null procedure in other cases.  */\n+      if ((mask[0] >> REG_RA) & 1 || frame_pointer_needed)\n \talpha_procedure_type = PT_STACK;\n       else if (get_frame_size() != 0)\n \talpha_procedure_type = PT_REGISTER;\n@@ -7446,21 +7446,96 @@ alpha_initial_elimination_offset (unsigned int from,\n   return ret;\n }\n \n+#if TARGET_ABI_OPEN_VMS\n+\n int\n-alpha_pv_save_size (void)\n+alpha_vms_can_eliminate (unsigned int from ATTRIBUTE_UNUSED, unsigned int to)\n {\n+  /* We need the alpha_procedure_type to decide. Evaluate it now.  */\n   alpha_sa_size ();\n-  return alpha_procedure_type == PT_STACK ? 8 : 0;\n+\n+  switch (alpha_procedure_type)\n+    {\n+    case PT_NULL:\n+      /* NULL procedures have no frame of their own and we only\n+\t know how to resolve from the current stack pointer.  */\n+      return to == STACK_POINTER_REGNUM;\n+\n+    case PT_REGISTER:\n+    case PT_STACK:\n+      /* We always eliminate except to the stack pointer if there is no\n+\t usable frame pointer at hand.  */\n+      return (to != STACK_POINTER_REGNUM\n+\t      || vms_unwind_regno != HARD_FRAME_POINTER_REGNUM);\n+    }\n+\n+  gcc_unreachable ();\n }\n \n-int\n-alpha_using_fp (void)\n-{\n-  alpha_sa_size ();\n-  return vms_unwind_regno == HARD_FRAME_POINTER_REGNUM;\n+/* FROM is to be eliminated for TO. Return the offset so that TO+offset\n+   designates the same location as FROM.  */\n+\n+HOST_WIDE_INT\n+alpha_vms_initial_elimination_offset (unsigned int from, unsigned int to)\n+{ \n+  /* The only possible attempts we ever expect are ARG or FRAME_PTR to\n+     HARD_FRAME or STACK_PTR.  We need the alpha_procedure_type to decide\n+     on the proper computations and will need the register save area size\n+     in most cases.  */\n+\n+  HOST_WIDE_INT sa_size = alpha_sa_size ();\n+\n+  /* PT_NULL procedures have no frame of their own and we only allow\n+     elimination to the stack pointer. This is the argument pointer and we\n+     resolve the soft frame pointer to that as well.  */\n+     \n+  if (alpha_procedure_type == PT_NULL)\n+    return 0;\n+\n+  /* For a PT_STACK procedure the frame layout looks as follows\n+\n+                      -----> decreasing addresses\n+\n+\t\t   <             size rounded up to 16       |   likewise   >\n+     --------------#------------------------------+++--------------+++-------#\n+     incoming args # pretended args | \"frame\" | regs sa | PV | outgoing args #\n+     --------------#---------------------------------------------------------#\n+                                   ^         ^              ^               ^\n+\t\t\t      ARG_PTR FRAME_PTR HARD_FRAME_PTR       STACK_PTR\n+\n+\t\t\t      \n+     PT_REGISTER procedures are similar in that they may have a frame of their\n+     own. They have no regs-sa/pv/outgoing-args area.\n+\n+     We first compute offset to HARD_FRAME_PTR, then add what we need to get\n+     to STACK_PTR if need be.  */\n+  \n+  {\n+    HOST_WIDE_INT offset;\n+    HOST_WIDE_INT pv_save_size = alpha_procedure_type == PT_STACK ? 8 : 0;\n+\n+    switch (from)\n+      {\n+      case FRAME_POINTER_REGNUM:\n+\toffset = ALPHA_ROUND (sa_size + pv_save_size);\n+\tbreak;\n+      case ARG_POINTER_REGNUM:\n+\toffset = (ALPHA_ROUND (sa_size + pv_save_size\n+\t\t\t       + get_frame_size ()\n+\t\t\t       + crtl->args.pretend_args_size)\n+\t\t  - crtl->args.pretend_args_size);\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+      }\n+    \n+    if (to == STACK_POINTER_REGNUM)\n+      offset += ALPHA_ROUND (crtl->outgoing_args_size);\n+    \n+    return offset;\n+  }\n }\n \n-#if TARGET_ABI_OPEN_VMS\n #define COMMON_OBJECT \"common_object\"\n \n static tree"}, {"sha": "d8d513e07c8473cf5f8ec5b054d3537072c5c6fd", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3499d85c4948d5c5f63353f883e3e9f03ac470/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3499d85c4948d5c5f63353f883e3e9f03ac470/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=1d3499d85c4948d5c5f63353f883e3e9f03ac470", "patch": "@@ -144,27 +144,12 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef CAN_ELIMINATE\n #define CAN_ELIMINATE(FROM, TO)  \\\n-((TO) != STACK_POINTER_REGNUM || ! alpha_using_fp ())\n+  (alpha_vms_can_eliminate ((FROM), (TO)))\n \n #undef INITIAL_ELIMINATION_OFFSET\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n-{ switch (FROM)\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-    case FRAME_POINTER_REGNUM:\t\t\t\t\t\t\\\n-      (OFFSET) = alpha_sa_size () + alpha_pv_save_size ();\t\t\\\n-      break;\t\t\t\t\t\t\t\t\\\n-    case ARG_POINTER_REGNUM:\t\t\t\t\t\t\\\n-      (OFFSET) = (ALPHA_ROUND (alpha_sa_size () + alpha_pv_save_size ()\t\\\n-\t\t\t       + get_frame_size ()\t\t\t\\\n-\t\t\t       + crtl->args.pretend_args_size)\t\\\n-\t\t  - crtl->args.pretend_args_size);\t\t\\\n-      break;\t\t\t\t\t\t\t\t\\\n-    default:\t\t\t\t\t\t\t\t\\\n-      gcc_unreachable ();\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  if ((TO) == STACK_POINTER_REGNUM)\t\t\t\t\t\\\n-    (OFFSET) += ALPHA_ROUND (crtl->outgoing_args_size);\t\\\n-}\n+  ((OFFSET) = alpha_vms_initial_elimination_offset(FROM, TO))\n+\n \f\n /* Define a data type for recording info about an argument list\n    during the scan of that argument list.  This data type should"}]}