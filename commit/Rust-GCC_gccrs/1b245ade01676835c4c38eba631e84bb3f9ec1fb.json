{"sha": "1b245ade01676835c4c38eba631e84bb3f9ec1fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIyNDVhZGUwMTY3NjgzNWM0YzM4ZWJhNjMxZTg0YmIzZjllYzFmYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-11-16T01:09:19Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-11-16T01:09:19Z"}, "message": "athlon.md, [...]: Handle shift1, rotate1\n\n\t* athlon.md, k6.md, pentium.md, ppro.md: Handle shift1, rotate1\n\t* i386.md (attribute type): Add type shift1 and rotate1.\n\t(*_slp): Rewrite to have just two operands to avoid reload problems.\n\nFrom-SVN: r59147", "tree": {"sha": "4255977b61e1f633bee93846df4e0540bb7ff245", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4255977b61e1f633bee93846df4e0540bb7ff245"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b245ade01676835c4c38eba631e84bb3f9ec1fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b245ade01676835c4c38eba631e84bb3f9ec1fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b245ade01676835c4c38eba631e84bb3f9ec1fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b245ade01676835c4c38eba631e84bb3f9ec1fb/comments", "author": null, "committer": null, "parents": [{"sha": "401d536248fc3802c619902fc9877faae173047a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/401d536248fc3802c619902fc9877faae173047a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/401d536248fc3802c619902fc9877faae173047a"}], "stats": {"total": 139, "additions": 77, "deletions": 62}, "files": [{"sha": "7490076ee590b26bc015e0882ce3ea1360b9d390", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b245ade01676835c4c38eba631e84bb3f9ec1fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b245ade01676835c4c38eba631e84bb3f9ec1fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b245ade01676835c4c38eba631e84bb3f9ec1fb", "patch": "@@ -1,3 +1,9 @@\n+Sat Nov 16 02:06:02 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* athlon.md, k6.md, pentium.md, ppro.md: Handle shift1, rotate1\n+\t* i386.md (attribute type): Add type shift1 and rotate1.\n+\t(*_slp): Rewrite to have just two operands to avoid reload problems.\n+\n 2002-11-15  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.md (4 anonymous patterns): New."}, {"sha": "548f2adf4221d3906b370514104a9035315b0d79", "filename": "gcc/config/i386/athlon.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b245ade01676835c4c38eba631e84bb3f9ec1fb/gcc%2Fconfig%2Fi386%2Fathlon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b245ade01676835c4c38eba631e84bb3f9ec1fb/gcc%2Fconfig%2Fi386%2Fathlon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fathlon.md?ref=1b245ade01676835c4c38eba631e84bb3f9ec1fb", "patch": "@@ -63,7 +63,7 @@\n \n (define_function_unit \"athlon_ieu\" 3 0\n   (and (eq_attr \"cpu\" \"athlon\")\n-       (eq_attr \"type\" \"alu1,negnot,alu,icmp,test,imov,imovx,lea,incdec,ishift,rotate,ibr,call,callv,icmov,cld,pop,setcc,push,pop\"))\n+       (eq_attr \"type\" \"alu1,negnot,alu,icmp,test,imov,imovx,lea,incdec,ishift,ishift1,rotate,rotate1,ibr,call,callv,icmov,cld,pop,setcc,push,pop\"))\n   1 1)\n \n (define_function_unit \"athlon_ieu\" 3 0"}, {"sha": "7f9de528371f17d95cfa8239a61983ca980a8b36", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 61, "deletions": 58, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b245ade01676835c4c38eba631e84bb3f9ec1fb/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b245ade01676835c4c38eba631e84bb3f9ec1fb/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1b245ade01676835c4c38eba631e84bb3f9ec1fb", "patch": "@@ -140,7 +140,7 @@\n (define_attr \"type\"\n   \"other,multi,\n    alu,alu1,negnot,imov,imovx,lea,\n-   incdec,ishift,rotate,imul,idiv,\n+   incdec,ishift,ishift1,rotate,rotate1,imul,idiv,\n    icmp,test,ibr,setcc,icmov,\n    push,pop,call,callv,\n    str,cld,\n@@ -174,8 +174,8 @@\n \t   (const_int 0)\n \t (eq_attr \"unit\" \"i387,sse,mmx\")\n \t   (const_int 0)\n-\t (eq_attr \"type\" \"alu,alu1,negnot,imovx,ishift,rotate,imul,\n-\t\t\t  icmp,push,pop\")\n+\t (eq_attr \"type\" \"alu,alu1,negnot,imovx,ishift,rotate,ishift1,rotate1,\n+\t\t\t  imul,icmp,push,pop\")\n \t   (symbol_ref \"ix86_attr_length_immediate_default(insn,1)\")\n \t (eq_attr \"type\" \"imov,test\")\n \t   (symbol_ref \"ix86_attr_length_immediate_default(insn,0)\")\n@@ -347,7 +347,7 @@\n (define_attr \"imm_disp\" \"false,true,unknown\"\n   (cond [(eq_attr \"type\" \"other,multi\")\n \t   (const_string \"unknown\")\n-\t (and (eq_attr \"type\" \"icmp,test,imov\")\n+\t (and (eq_attr \"type\" \"icmp,test,imov,alu1,ishift1,rotate1\")\n \t      (and (match_operand 0 \"memory_displacement_operand\" \"\")\n \t\t   (match_operand 1 \"immediate_operand\" \"\")))\n \t   (const_string \"true\")\n@@ -6040,11 +6040,11 @@\n \n (define_insn \"*addqi_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\"))\n-\t(plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t (match_operand:QI 2 \"general_operand\" \"qn,qnm\")))\n+\t(plus:QI (match_dup 0)\n+\t\t (match_operand:QI 1 \"general_operand\" \"qn,qnm\")))\n    (clobber (reg:CC 17))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && ix86_binary_operator_ok (PLUS, QImode, operands)\"\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -6061,9 +6061,9 @@\n \t  && INTVAL (operands[2]) < 0)\n \t{\n \t  operands[2] = GEN_INT (-INTVAL (operands[2]));\n-\t  return \"sub{b}\\t{%2, %0|%0, %2}\";\n+\t  return \"sub{b}\\t{%1, %0|%0, %1}\";\n \t}\n-      return \"add{b}\\t{%2, %0|%0, %2}\";\n+      return \"add{b}\\t{%1, %0|%0, %1}\";\n     }\n }\n   [(set (attr \"type\")\n@@ -6605,12 +6605,12 @@\n \n (define_insn \"*subqi_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\"))\n-\t(minus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t  (match_operand:QI 2 \"general_operand\" \"qn,qmn\")))\n+\t(minus:QI (match_dup 0)\n+\t\t  (match_operand:QI 1 \"general_operand\" \"qn,qmn\")))\n    (clobber (reg:CC 17))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && ix86_binary_operator_ok (MINUS, QImode, operands)\"\n-  \"sub{b}\\t{%2, %0|%0, %2}\"\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"sub{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n \n@@ -8067,7 +8067,8 @@\n \t(and:QI (match_dup 0)\n \t\t(match_operand:QI 1 \"general_operand\" \"qi,qmi\")))\n    (clobber (reg:CC 17))]\n-  \"! TARGET_PARTIAL_REG_STALL || optimize_size\"\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"and{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"QI\")])\n@@ -8104,7 +8105,8 @@\n    (set (strict_low_part (match_dup 0))\n \t(and:QI (match_dup 0) (match_dup 1)))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && ix86_match_ccmode (insn, CCNOmode)\"\n+   && ix86_match_ccmode (insn, CCNOmode)\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"and{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"QI\")])\n@@ -8474,7 +8476,8 @@\n \t(ior:QI (match_dup 0)\n \t\t(match_operand:QI 1 \"general_operand\" \"qmi,qi\")))\n    (clobber (reg:CC 17))]\n-  \"! TARGET_PARTIAL_REG_STALL || optimize_size\"\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"or{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"QI\")])\n@@ -8500,7 +8503,8 @@\n    (set (strict_low_part (match_dup 0))\n \t(ior:QI (match_dup 0) (match_dup 1)))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && ix86_match_ccmode (insn, CCNOmode)\"\n+   && ix86_match_ccmode (insn, CCNOmode)\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"or{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"QI\")])\n@@ -8849,7 +8853,8 @@\n \t(xor:QI (match_dup 0)\n \t\t(match_operand:QI 1 \"general_operand\" \"qi,qmi\")))\n    (clobber (reg:CC 17))]\n-  \"! TARGET_PARTIAL_REG_STALL || optimize_size\"\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"xor{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"QI\")])\n@@ -8949,7 +8954,8 @@\n    (set (strict_low_part (match_dup 0))\n \t(xor:QI (match_dup 0) (match_dup 1)))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && ix86_match_ccmode (insn, CCNOmode)\"\n+   && ix86_match_ccmode (insn, CCNOmode)\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"xor{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"QI\")])\n@@ -11511,14 +11517,14 @@\n \n (define_insn \"*ashrqi3_1_one_bit_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n-\t(ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t(ashiftrt:QI (match_dup 0)\n+\t\t     (match_operand:QI 1 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\n    && (! TARGET_PARTIAL_REG_STALL || optimize_size)\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"sar{b}\\t%0\"\n-  [(set_attr \"type\" \"ishift\")\n+  [(set_attr \"type\" \"ishift1\")\n    (set (attr \"length\") \n      (if_then_else (match_operand 0 \"register_operand\" \"\") \n \t(const_string \"2\")\n@@ -11538,15 +11544,15 @@\n \n (define_insn \"*ashrqi3_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,qm\"))\n-\t(ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"I,c\")))\n+\t(ashiftrt:QI (match_dup 0)\n+\t\t     (match_operand:QI 1 \"nonmemory_operand\" \"I,c\")))\n    (clobber (reg:CC 17))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"@\n-   sar{b}\\t{%2, %0|%0, %2}\n-   sar{b}\\t{%b2, %0|%0, %b2}\"\n-  [(set_attr \"type\" \"ishift\")\n+   sar{b}\\t{%1, %0|%0, %1}\n+   sar{b}\\t{%b1, %0|%0, %b1}\"\n+  [(set_attr \"type\" \"ishift1\")\n    (set_attr \"mode\" \"QI\")])\n \n ;; This pattern can't accept a variable shift count, since shifts by\n@@ -11930,14 +11936,13 @@\n \n (define_insn \"*lshrqi3_1_one_bit_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n-\t(lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t(lshiftrt:QI (match_dup 0)\n+\t\t     (match_operand:QI 1 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"shr{b}\\t%0\"\n-  [(set_attr \"type\" \"ishift\")\n+  [(set_attr \"type\" \"ishift1\")\n    (set (attr \"length\") \n      (if_then_else (match_operand 0 \"register_operand\" \"\") \n \t(const_string \"2\")\n@@ -11957,15 +11962,15 @@\n \n (define_insn \"*lshrqi3_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,qm\"))\n-\t(lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"I,c\")))\n+\t(lshiftrt:QI (match_dup 0)\n+\t\t     (match_operand:QI 1 \"nonmemory_operand\" \"I,c\")))\n    (clobber (reg:CC 17))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"@\n-   shr{b}\\t{%2, %0|%0, %2}\n-   shr{b}\\t{%b2, %0|%0, %b2}\"\n-  [(set_attr \"type\" \"ishift\")\n+   shr{b}\\t{%1, %0|%0, %1}\n+   shr{b}\\t{%b1, %0|%0, %b1}\"\n+  [(set_attr \"type\" \"ishift1\")\n    (set_attr \"mode\" \"QI\")])\n \n ;; This pattern can't accept a variable shift count, since shifts by\n@@ -12145,14 +12150,13 @@\n \n (define_insn \"*rotlqi3_1_one_bit_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n-\t(rotate:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n-\t\t   (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t(rotate:QI (match_dup 0)\n+\t\t   (match_operand:QI 1 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && ix86_binary_operator_ok (ROTATE, QImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"rol{b}\\t%0\"\n-  [(set_attr \"type\" \"rotate\")\n+  [(set_attr \"type\" \"rotate1\")\n    (set (attr \"length\") \n      (if_then_else (match_operand 0 \"register_operand\" \"\") \n \t(const_string \"2\")\n@@ -12174,15 +12178,15 @@\n \n (define_insn \"*rotlqi3_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,qm\"))\n-\t(rotate:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"I,c\")))\n+\t(rotate:QI (match_dup 0)\n+\t\t   (match_operand:QI 1 \"nonmemory_operand\" \"I,c\")))\n    (clobber (reg:CC 17))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && ix86_binary_operator_ok (ROTATE, QImode, operands)\"\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"@\n-   rol{b}\\t{%2, %0|%0, %2}\n-   rol{b}\\t{%b2, %0|%0, %b2}\"\n-  [(set_attr \"type\" \"rotate\")\n+   rol{b}\\t{%1, %0|%0, %1}\n+   rol{b}\\t{%b1, %0|%0, %b1}\"\n+  [(set_attr \"type\" \"rotate1\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*rotlqi3_1\"\n@@ -12351,14 +12355,13 @@\n \n (define_insn \"*rotrqi3_1_one_bit_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n-\t(rotatert:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+\t(rotatert:QI (match_dup 0)\n+\t\t     (match_operand:QI 1 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && ix86_binary_operator_ok (ROTATERT, QImode, operands)\n    && (TARGET_SHIFT1 || optimize_size)\"\n   \"ror{b}\\t%0\"\n-  [(set_attr \"type\" \"rotate\")\n+  [(set_attr \"type\" \"rotate1\")\n    (set (attr \"length\") \n      (if_then_else (match_operand 0 \"register_operand\" \"\") \n \t(const_string \"2\")\n@@ -12378,15 +12381,15 @@\n \n (define_insn \"*rotrqi3_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,qm\"))\n-\t(rotatert:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"I,c\")))\n+\t(rotatert:QI (match_dup 0)\n+\t\t     (match_operand:QI 1 \"nonmemory_operand\" \"I,c\")))\n    (clobber (reg:CC 17))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && ix86_binary_operator_ok (ROTATERT, QImode, operands)\"\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"@\n-   ror{b}\\t{%2, %0|%0, %2}\n-   ror{b}\\t{%b2, %0|%0, %b2}\"\n-  [(set_attr \"type\" \"rotate\")\n+   ror{b}\\t{%1, %0|%0, %1}\n+   ror{b}\\t{%b1, %0|%0, %b1}\"\n+  [(set_attr \"type\" \"rotate1\")\n    (set_attr \"mode\" \"QI\")])\n \f\n ;; Bit set / bit test instructions"}, {"sha": "af128bfe037696a857350029e0304d5f373d46c8", "filename": "gcc/config/i386/k6.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b245ade01676835c4c38eba631e84bb3f9ec1fb/gcc%2Fconfig%2Fi386%2Fk6.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b245ade01676835c4c38eba631e84bb3f9ec1fb/gcc%2Fconfig%2Fi386%2Fk6.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fk6.md?ref=1b245ade01676835c4c38eba631e84bb3f9ec1fb", "patch": "@@ -42,7 +42,7 @@\n ;; Shift instructions and certain arithmetic are issued only to X pipe.\n (define_function_unit \"k6_alux\" 1 0\n   (and (eq_attr \"cpu\" \"k6\")\n-       (eq_attr \"type\" \"ishift,rotate,alu1,negnot,cld\"))\n+       (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1,alu1,negnot,cld\"))\n   1 1)\n \n ;; The QI mode arithmetic is issued to X pipe only.\n@@ -54,7 +54,7 @@\n \n (define_function_unit \"k6_alu\" 2 0\n   (and (eq_attr \"cpu\" \"k6\")\n-       (eq_attr \"type\" \"ishift,rotate,alu1,negnot,alu,icmp,test,imovx,incdec,setcc,lea\"))\n+       (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1,alu1,negnot,alu,icmp,test,imovx,incdec,setcc,lea\"))\n   1 1)\n \n (define_function_unit \"k6_alu\" 2 0"}, {"sha": "b4c5ece3678acf03e454da7f2c077f9702f0f5bf", "filename": "gcc/config/i386/pentium.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b245ade01676835c4c38eba631e84bb3f9ec1fb/gcc%2Fconfig%2Fi386%2Fpentium.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b245ade01676835c4c38eba631e84bb3f9ec1fb/gcc%2Fconfig%2Fi386%2Fpentium.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpentium.md?ref=1b245ade01676835c4c38eba631e84bb3f9ec1fb", "patch": "@@ -53,6 +53,12 @@\n \t (and (eq_attr \"type\" \"rotate\")\n \t      (match_operand 2 \"const_int_1_operand\" \"\"))\n \t   (const_string \"pu\")\n+\t (and (eq_attr \"type\" \"ishift1\")\n+\t      (match_operand 1 \"const_int_operand\" \"\"))\n+\t   (const_string \"pu\")\n+\t (and (eq_attr \"type\" \"rotate1\")\n+\t      (match_operand 1 \"const_int_1_operand\" \"\"))\n+\t   (const_string \"pu\")\n \t (and (eq_attr \"type\" \"call\")\n \t      (match_operand 0 \"constant_call_address_operand\" \"\"))\n \t   (const_string \"pv\")"}, {"sha": "86906856469188e8346a1cd3df04112c88c8cfc9", "filename": "gcc/config/i386/ppro.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b245ade01676835c4c38eba631e84bb3f9ec1fb/gcc%2Fconfig%2Fi386%2Fppro.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b245ade01676835c4c38eba631e84bb3f9ec1fb/gcc%2Fconfig%2Fi386%2Fppro.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fppro.md?ref=1b245ade01676835c4c38eba631e84bb3f9ec1fb", "patch": "@@ -60,7 +60,7 @@\n \n (define_function_unit \"ppro_p0\" 1 0\n   (and (eq_attr \"cpu\" \"pentiumpro\")\n-       (eq_attr \"type\" \"ishift,rotate,lea,ibr,cld\"))\n+       (eq_attr \"type\" \"ishift,rotate,ishift1,rotate1,lea,ibr,cld\"))\n   1 1)\n \n (define_function_unit \"ppro_p0\" 1 0"}]}