{"sha": "6209a13e202b97e040f91e57281a2c23e0022bea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIwOWExM2UyMDJiOTdlMDQwZjkxZTU3MjgxYTJjMjNlMDAyMmJlYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-01-06T17:52:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-01-06T17:52:09Z"}, "message": "ipa-inline.c (cgraph_decide_inlining_incrementally): Do not inline regular functions into always-inline functions.\n\n2010-01-06  Richard Guenther  <rguenther@suse.de>\n\n\t* ipa-inline.c (cgraph_decide_inlining_incrementally): Do\n\tnot inline regular functions into always-inline functions.\n\n\t* gcc.c-torture/compile/pr42632.c: New testcase.\n\nFrom-SVN: r155679", "tree": {"sha": "a8b06b3154791c3e071f213dc00b7a6578ee3a4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8b06b3154791c3e071f213dc00b7a6578ee3a4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6209a13e202b97e040f91e57281a2c23e0022bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6209a13e202b97e040f91e57281a2c23e0022bea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6209a13e202b97e040f91e57281a2c23e0022bea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6209a13e202b97e040f91e57281a2c23e0022bea/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f05f79fffc5297858f27eaf122aabc8cec2c930b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f05f79fffc5297858f27eaf122aabc8cec2c930b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f05f79fffc5297858f27eaf122aabc8cec2c930b"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "6435d2a5533d1b55fe2e6a02790b5f45e4447255", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6209a13e202b97e040f91e57281a2c23e0022bea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6209a13e202b97e040f91e57281a2c23e0022bea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6209a13e202b97e040f91e57281a2c23e0022bea", "patch": "@@ -1,3 +1,8 @@\n+2010-01-06  Richard Guenther  <rguenther@suse.de>\n+\n+\t* ipa-inline.c (cgraph_decide_inlining_incrementally): Do\n+\tnot inline regular functions into always-inline functions.\n+\n 2010-01-06  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rx/rx.h (enum rx_cpu_type): Add RX200."}, {"sha": "c6c84f99572fff17117d71c03093d32e165e39c0", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6209a13e202b97e040f91e57281a2c23e0022bea/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6209a13e202b97e040f91e57281a2c23e0022bea/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=6209a13e202b97e040f91e57281a2c23e0022bea", "patch": "@@ -1506,7 +1506,10 @@ cgraph_decide_inlining_incrementally (struct cgraph_node *node,\n       }\n \n   /* Now do the automatic inlining.  */\n-  if (mode != INLINE_ALL && mode != INLINE_ALWAYS_INLINE)\n+  if (mode != INLINE_ALL && mode != INLINE_ALWAYS_INLINE\n+      /* Never inline regular functions into always-inline functions\n+\t during incremental inlining.  */\n+      && !node->local.disregard_inline_limits)\n     for (e = node->callees; e; e = e->next_callee)\n       {\n         int allowed_growth = 0;"}, {"sha": "ef879dedc299bfe602f50aa9ef90b523374260d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6209a13e202b97e040f91e57281a2c23e0022bea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6209a13e202b97e040f91e57281a2c23e0022bea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6209a13e202b97e040f91e57281a2c23e0022bea", "patch": "@@ -1,3 +1,7 @@\n+2010-01-06  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.c-torture/compile/pr42632.c: New testcase.\n+\n 2010-01-05  H.J. Lu  <hongjiu.lu@intel.com>\n  \n \tPR target/42542"}, {"sha": "a6778537ae23a8c5ca86021539e6d30d71db547a", "filename": "gcc/testsuite/gcc.c-torture/compile/pr42632.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6209a13e202b97e040f91e57281a2c23e0022bea/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42632.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6209a13e202b97e040f91e57281a2c23e0022bea/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42632.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42632.c?ref=6209a13e202b97e040f91e57281a2c23e0022bea", "patch": "@@ -0,0 +1,16 @@\n+static inline __attribute__((always_inline)) int\n+__pskb_trim(void)\n+{\n+  return ___pskb_trim();\n+}\n+static inline __attribute__((always_inline))\n+int pskb_trim(void)\n+{\n+  return __pskb_trim();\n+}\n+int ___pskb_trim(void)\n+{\n+  pskb_trim();\n+  return 0;\n+}\n+"}]}