{"sha": "8c5c99dc2241ea323cee1b07ec5466387dfb983f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM1Yzk5ZGMyMjQxZWEzMjNjZWUxYjA3ZWM1NDY2Mzg3ZGZiOTgzZg==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2007-09-18T11:40:04Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-09-18T11:40:04Z"}, "message": "m68k-devices.def (51qe): New device.\n\n\t* config/m68k/m68k-devices.def (51qe): New device.\n\t* config/m68k/m68k.c (FL_FOR_isa_c): Remove division unit.  Add it\n\tto all uses of FL_FOR_isa_c for compatibility.\n\t(all_microarchs): Add cfv1 microarchitecture.\n\t(m68k_handle_option): Handle m51qe option.\n\t* config/m68k/m68k.h (TARGET_CPU_CPP_BUILTINS): Handle 51QE.\n\t(TUNE_CFV1): New macro.\n\t(enum uarch_type): Add ucfv1.\n\t* doc/invoke.texi: Document 51qe device and cfv1 microarchitecture.\n\nFrom-SVN: r128574", "tree": {"sha": "7079bd594b1bebef3c93725f934564d684eb3878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7079bd594b1bebef3c93725f934564d684eb3878"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c5c99dc2241ea323cee1b07ec5466387dfb983f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5c99dc2241ea323cee1b07ec5466387dfb983f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c5c99dc2241ea323cee1b07ec5466387dfb983f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c5c99dc2241ea323cee1b07ec5466387dfb983f/comments", "author": null, "committer": null, "parents": [{"sha": "efe9e8292626d3607873629c14b1404459649769", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe9e8292626d3607873629c14b1404459649769", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efe9e8292626d3607873629c14b1404459649769"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "94e2501047d4453440024101f14b1ddd97a7ec5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5c99dc2241ea323cee1b07ec5466387dfb983f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5c99dc2241ea323cee1b07ec5466387dfb983f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c5c99dc2241ea323cee1b07ec5466387dfb983f", "patch": "@@ -1,3 +1,15 @@\n+2007-09-18  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* config/m68k/m68k-devices.def (51qe): New device.\n+\t* config/m68k/m68k.c (FL_FOR_isa_c): Remove division unit.  Add it\n+\tto all uses of FL_FOR_isa_c for compatibility.\n+\t(all_microarchs): Add cfv1 microarchitecture.\n+\t(m68k_handle_option): Handle m51qe option.\n+\t* config/m68k/m68k.h (TARGET_CPU_CPP_BUILTINS): Handle 51QE.\n+\t(TUNE_CFV1): New macro.\n+\t(enum uarch_type): Add ucfv1.\n+\t* doc/invoke.texi: Document 51qe device and cfv1 microarchitecture.\n+\t\n 2007-09-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/31863"}, {"sha": "7b06e35b737c76090909ea7e3ec334308d75f492", "filename": "gcc/config/m68k/m68k-devices.def", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5c99dc2241ea323cee1b07ec5466387dfb983f/gcc%2Fconfig%2Fm68k%2Fm68k-devices.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5c99dc2241ea323cee1b07ec5466387dfb983f/gcc%2Fconfig%2Fm68k%2Fm68k-devices.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-devices.def?ref=8c5c99dc2241ea323cee1b07ec5466387dfb983f", "patch": "@@ -76,6 +76,9 @@ M68K_DEVICE (\"68302\", m68302,   \"68302\", \"68000\", 68000,    isa_00,    FL_MMU)\n M68K_DEVICE (\"68332\", m68332,   \"68332\", \"cpu32\", cpu32,    isa_cpu32, FL_MMU)\n M68K_DEVICE (\"cpu32\", cpu32,    \"cpu32\", \"cpu32\", cpu32,    isa_cpu32, FL_MMU)\n \n+/* ColdFire CFV1 processor.  */\n+M68K_DEVICE (\"51qe\",  mcf51qe,  \"51qe\",  \"51qe\",  cfv1,     isa_c,     FL_CF_USP)\n+\n /* ColdFire CFV2 processors.  */\n M68K_DEVICE (\"5202\",  mcf5202,  \"5206\",  \"5206\",  cfv2,     isa_a,     0)\n M68K_DEVICE (\"5204\",  mcf5204,  \"5206\",  \"5206\",  cfv2,     isa_a,     0)\n@@ -130,12 +133,12 @@ M68K_DEVICE (\"537x\",  mcf537x,  \"5373\",  \"5329\",  cfv3,     isa_aplus, FL_CF_HWD\n \n /* CFV4/CFV4e processors.  */\n M68K_DEVICE (\"5407\",  mcf5407,  \"5407\",  \"5407\",  cfv4,     isa_b,     FL_CF_MAC)\n-M68K_DEVICE (\"54450\", mcf54450, \"54455\", \"54455\", cfv4,     isa_c,     FL_CF_USP | FL_CF_EMAC | FL_MMU)\n-M68K_DEVICE (\"54451\", mcf54451, \"54455\", \"54455\", cfv4,     isa_c,     FL_CF_USP | FL_CF_EMAC | FL_MMU)\n-M68K_DEVICE (\"54452\", mcf54452, \"54455\", \"54455\", cfv4,     isa_c,     FL_CF_USP | FL_CF_EMAC | FL_MMU)\n-M68K_DEVICE (\"54453\", mcf54453, \"54455\", \"54455\", cfv4,     isa_c,     FL_CF_USP | FL_CF_EMAC | FL_MMU)\n-M68K_DEVICE (\"54454\", mcf54454, \"54455\", \"54455\", cfv4,     isa_c,     FL_CF_USP | FL_CF_EMAC | FL_MMU)\n-M68K_DEVICE (\"54455\", mcf54455, \"54455\", \"54455\", cfv4,     isa_c,     FL_CF_USP | FL_CF_EMAC | FL_MMU)\n+M68K_DEVICE (\"54450\", mcf54450, \"54455\", \"54455\", cfv4,     isa_c,     FL_CF_HWDIV | FL_CF_USP | FL_CF_EMAC | FL_MMU)\n+M68K_DEVICE (\"54451\", mcf54451, \"54455\", \"54455\", cfv4,     isa_c,     FL_CF_HWDIV | FL_CF_USP | FL_CF_EMAC | FL_MMU)\n+M68K_DEVICE (\"54452\", mcf54452, \"54455\", \"54455\", cfv4,     isa_c,     FL_CF_HWDIV | FL_CF_USP | FL_CF_EMAC | FL_MMU)\n+M68K_DEVICE (\"54453\", mcf54453, \"54455\", \"54455\", cfv4,     isa_c,     FL_CF_HWDIV | FL_CF_USP | FL_CF_EMAC | FL_MMU)\n+M68K_DEVICE (\"54454\", mcf54454, \"54455\", \"54455\", cfv4,     isa_c,     FL_CF_HWDIV | FL_CF_USP | FL_CF_EMAC | FL_MMU)\n+M68K_DEVICE (\"54455\", mcf54455, \"54455\", \"54455\", cfv4,     isa_c,     FL_CF_HWDIV | FL_CF_USP | FL_CF_EMAC | FL_MMU)\n M68K_DEVICE (\"5470\",  mcf5470,  \"5475\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)\n M68K_DEVICE (\"5471\",  mcf5471,  \"5475\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)\n M68K_DEVICE (\"5472\",  mcf5472,  \"5475\",  \"5475\",  cfv4e,    isa_b,     FL_CF_USP | FL_CF_EMAC | FL_CF_FPU | FL_MMU)"}, {"sha": "69501ea670455534c384bb5adcfc6e55fe8184aa", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5c99dc2241ea323cee1b07ec5466387dfb983f/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5c99dc2241ea323cee1b07ec5466387dfb983f/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=8c5c99dc2241ea323cee1b07ec5466387dfb983f", "patch": "@@ -239,7 +239,7 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n /* Note ISA_B doesn't necessarily include USP (user stack pointer) support.  */\n #define FL_FOR_isa_b     (FL_FOR_isa_a | FL_ISA_B | FL_CF_HWDIV)\n /* ISA_C is not upwardly compatible with ISA_B.  */\n-#define FL_FOR_isa_c     (FL_FOR_isa_a | FL_ISA_C | FL_CF_HWDIV | FL_CF_USP)\n+#define FL_FOR_isa_c     (FL_FOR_isa_a | FL_ISA_C | FL_CF_USP)\n \n enum m68k_isa\n {\n@@ -302,7 +302,8 @@ static const struct m68k_target_selection all_isas[] =\n   { \"isaaplus\", mcf5271,    NULL,  ucfv2,    isa_aplus, (FL_FOR_isa_aplus\n \t\t\t\t\t\t\t | FL_CF_HWDIV) },\n   { \"isab\",     mcf5407,    NULL,  ucfv4,    isa_b,     FL_FOR_isa_b },\n-  { \"isac\",     unk_device, NULL,  ucfv4,    isa_c,     FL_FOR_isa_c },\n+  { \"isac\",     unk_device, NULL,  ucfv4,    isa_c,     (FL_FOR_isa_c\n+\t\t\t\t\t\t\t | FL_CF_HWDIV) },\n   { NULL,       unk_device, NULL,  unk_arch, isa_max,   0 }\n };\n \n@@ -319,6 +320,7 @@ static const struct m68k_target_selection all_microarchs[] =\n   { \"68040\",    m68040,     NULL,  u68040,    isa_40,  FL_FOR_isa_40 },\n   { \"68060\",    m68060,     NULL,  u68060,    isa_40,  FL_FOR_isa_40 },\n   { \"cpu32\",    cpu32,      NULL,  ucpu32,    isa_20,  FL_FOR_isa_cpu32 },\n+  { \"cfv1\",     mcf51qe,    NULL,  ucfv1,     isa_c,   FL_FOR_isa_c },\n   { \"cfv2\",     mcf5206,    NULL,  ucfv2,     isa_a,   FL_FOR_isa_a },\n   { \"cfv3\",     mcf5307,    NULL,  ucfv3,     isa_a,   (FL_FOR_isa_a\n \t\t\t\t\t\t\t| FL_CF_HWDIV) },"}, {"sha": "93b962a9fef7db3a2a8359d262586cb7bcae5bae", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5c99dc2241ea323cee1b07ec5466387dfb983f/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5c99dc2241ea323cee1b07ec5466387dfb983f/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=8c5c99dc2241ea323cee1b07ec5466387dfb983f", "patch": "@@ -108,6 +108,10 @@ along with GCC; see the file COPYING3.  If not see\n \t  builtin_define_std (\"mc68020\");\t\t\t\t\\\n \t  break;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+\tcase ucfv1:\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mcfv1__\");\t\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \tcase ucfv2:\t\t\t\t\t\t\t\\\n \t  builtin_define (\"__mcfv2__\");\t\t\t\t\t\\\n \t  break;\t\t\t\t\t\t\t\\\n@@ -260,6 +264,7 @@ along with GCC; see the file COPYING3.  If not see\n #define TUNE_68060\t(m68k_tune == u68060 || m68k_tune == u68020_60)\n #define TUNE_68040_60\t(TUNE_68040 || TUNE_68060)\n #define TUNE_CPU32\t(m68k_tune == ucpu32)\n+#define TUNE_CFV1       (m68k_tune == ucfv1)\n #define TUNE_CFV2\t(m68k_tune == ucfv2)\n \n #define OVERRIDE_OPTIONS   override_options()\n@@ -1084,6 +1089,7 @@ enum uarch_type\n   u68040,\n   u68060,\n   ucpu32,\n+  ucfv1,\n   ucfv2,\n   ucfv3,\n   ucfv4,"}, {"sha": "de09d5b4aa16ac372ca9d5b6cef9a6e4a6ce1b0b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c5c99dc2241ea323cee1b07ec5466387dfb983f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c5c99dc2241ea323cee1b07ec5466387dfb983f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8c5c99dc2241ea323cee1b07ec5466387dfb983f", "patch": "@@ -11096,6 +11096,7 @@ below, which also classifies the CPUs into families:\n \n @multitable @columnfractions 0.20 0.80\n @item @strong{Family} @tab @strong{@samp{-mcpu} arguments}\n+@item @samp{51qe} @tab @samp{51qe}\n @item @samp{5206} @tab @samp{5202} @samp{5204} @samp{5206}\n @item @samp{5206e} @tab @samp{5206e}\n @item @samp{5208} @tab @samp{5207} @samp{5208}\n@@ -11133,7 +11134,7 @@ constraints set by @option{-march} and @option{-mcpu}.\n The M680x0 microarchitectures are: @samp{68000}, @samp{68010},\n @samp{68020}, @samp{68030}, @samp{68040}, @samp{68060}\n and @samp{cpu32}.  The ColdFire microarchitectures\n-are: @samp{cfv2}, @samp{cfv3}, @samp{cfv4} and @samp{cfv4e}.\n+are: @samp{cfv1}, @samp{cfv2}, @samp{cfv3}, @samp{cfv4} and @samp{cfv4e}.\n \n You can also use @option{-mtune=68020-40} for code that needs\n to run relatively well on 68020, 68030 and 68040 targets."}]}