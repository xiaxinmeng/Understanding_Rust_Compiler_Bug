{"sha": "2ed4b0ce33a6cecfb4f00c3be25f526f8438feee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVkNGIwY2UzM2E2Y2VjZmI0ZjAwYzNiZTI1ZjUyNmY4NDM4ZmVlZQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2006-05-17T01:16:08Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2006-05-17T01:16:08Z"}, "message": "re PR tree-optimization/27373 (ICE: add_virtual_operand with pointers to arrays)\n\n2006-05-16  Daniel Berlin <dberlin@dberlin.org>\n\t\n\tFix PR tree-optimization/27373\n\t* tree-ssa-forwprop.c: (forward_propagate_addr_expr_1): Add argument.\n\t (forward_propagate_addr_expr): Update call.\n\nFrom-SVN: r113840", "tree": {"sha": "ec9df2ff2fe8bd0ca8b34836a411421352949f2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec9df2ff2fe8bd0ca8b34836a411421352949f2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ed4b0ce33a6cecfb4f00c3be25f526f8438feee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ed4b0ce33a6cecfb4f00c3be25f526f8438feee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ed4b0ce33a6cecfb4f00c3be25f526f8438feee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ed4b0ce33a6cecfb4f00c3be25f526f8438feee/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ada22a829973fbe063882e60863f7a28bfe76d1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ada22a829973fbe063882e60863f7a28bfe76d1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ada22a829973fbe063882e60863f7a28bfe76d1b"}], "stats": {"total": 85, "additions": 76, "deletions": 9}, "files": [{"sha": "f72e1eef0a1cb377b6184510861bdfb7ae030105", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ed4b0ce33a6cecfb4f00c3be25f526f8438feee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ed4b0ce33a6cecfb4f00c3be25f526f8438feee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ed4b0ce33a6cecfb4f00c3be25f526f8438feee", "patch": "@@ -1,3 +1,9 @@\n+2006-05-16  Daniel Berlin <dberlin@dberlin.org>\n+\t\n+\tFix PR tree-optimization/27373\n+\t* tree-ssa-forwprop.c: (forward_propagate_addr_expr_1): Add argument.\n+\t (forward_propagate_addr_expr): Update call.\n+\n 2006-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* doc/options.texi: Move the Negative option."}, {"sha": "bf62174719b2f777ef530363c128c9917b177991", "filename": "gcc/testsuite/gcc.c-torture/compile/pr27373.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ed4b0ce33a6cecfb4f00c3be25f526f8438feee/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr27373.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ed4b0ce33a6cecfb4f00c3be25f526f8438feee/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr27373.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr27373.c?ref=2ed4b0ce33a6cecfb4f00c3be25f526f8438feee", "patch": "@@ -0,0 +1,40 @@\n+typedef struct atype\n+{\n+    float bg[1], cg[1];\n+    _Bool ant;\n+}atype;\n+\n+\n+void cp_assert(_Bool*, float*, int*, _Bool*);\n+\n+void f(atype **rng_stream, int *error, float u)\n+{\n+    _Bool t = *rng_stream != 0;\n+    float routinep;\n+    _Bool failure;\n+    cp_assert ( &t, &routinep, error, &failure);\n+    if (failure == 0)\n+    {\n+        typedef float ty[1];\n+        ty *tt = &((*rng_stream)->bg);\n+        int i = 1;\n+\n+        do \n+        {\n+            (*tt)[i - 1] = u;\n+            i ++;\n+        }while (i > 1);\n+        {\n+            ty *tt = &(*rng_stream)->cg;\n+            int i = 1;\n+\n+            do \n+            {\n+                (*tt)[i - 1] = u;\n+                i ++;\n+            }while (i > 1);\n+        }\n+    }    \n+}\n+\n+"}, {"sha": "e2c5ed48e709f392e1f0b17000c5f4440363e0b7", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ed4b0ce33a6cecfb4f00c3be25f526f8438feee/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ed4b0ce33a6cecfb4f00c3be25f526f8438feee/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=2ed4b0ce33a6cecfb4f00c3be25f526f8438feee", "patch": "@@ -663,10 +663,15 @@ forward_propagate_addr_into_variable_array_index (tree offset, tree lhs,\n    Try to forward propagate the ADDR_EXPR into the use USE_STMT.\n    Often this will allow for removal of an ADDR_EXPR and INDIRECT_REF\n    node or for recovery of array indexing from pointer arithmetic.\n-   Return true, if the propagation was successful.  */\n+   \n+   CHANGED is an optional pointer to a boolean variable set to true if\n+   either the LHS or RHS was changed in the USE_STMT.  \n+\n+   Return true if the propagation was successful (the propagation can\n+   be not totally successful, yet things may have been changed).  */\n \n static bool\n-forward_propagate_addr_expr_1 (tree stmt, tree use_stmt)\n+forward_propagate_addr_expr_1 (tree stmt, tree use_stmt, bool *changed)\n {\n   tree name = TREE_OPERAND (stmt, 0);\n   tree lhs, rhs, array_ref;\n@@ -686,6 +691,8 @@ forward_propagate_addr_expr_1 (tree stmt, tree use_stmt)\n       TREE_OPERAND (lhs, 0) = unshare_expr (TREE_OPERAND (stmt, 1));\n       fold_stmt_inplace (use_stmt);\n       tidy_after_forward_propagate_addr (use_stmt);\n+      if (changed)\n+\t*changed = true;\n     }\n \n   /* Trivial case.  The use statement could be a trivial copy.  We\n@@ -699,6 +706,8 @@ forward_propagate_addr_expr_1 (tree stmt, tree use_stmt)\n     {\n       TREE_OPERAND (use_stmt, 1) = unshare_expr (TREE_OPERAND (stmt, 1));\n       tidy_after_forward_propagate_addr (use_stmt);\n+      if (changed)\n+\t*changed = true;\n       return true;\n     }\n \n@@ -719,6 +728,8 @@ forward_propagate_addr_expr_1 (tree stmt, tree use_stmt)\n       TREE_OPERAND (rhs, 0) = unshare_expr (TREE_OPERAND (stmt, 1));\n       fold_stmt_inplace (use_stmt);\n       tidy_after_forward_propagate_addr (use_stmt);\n+      if (changed)\n+\t*changed = true;\n       return true;\n     }\n \n@@ -751,6 +762,8 @@ forward_propagate_addr_expr_1 (tree stmt, tree use_stmt)\n       if (fold_stmt_inplace (use_stmt))\n \t{\n \t  tidy_after_forward_propagate_addr (use_stmt);\n+\t  if (changed)\n+\t    *changed = true;\n \t  return true;\n \t}\n       else\n@@ -771,9 +784,14 @@ forward_propagate_addr_expr_1 (tree stmt, tree use_stmt)\n \t different type than their operands.  */\n       && lang_hooks.types_compatible_p (TREE_TYPE (name), TREE_TYPE (rhs)))\n     {\n+      bool res;\n       tree offset_stmt = SSA_NAME_DEF_STMT (TREE_OPERAND (rhs, 1));\n-      return forward_propagate_addr_into_variable_array_index (offset_stmt, lhs,\n-\t\t\t\t\t\t\t       stmt, use_stmt);\n+      \n+      res = forward_propagate_addr_into_variable_array_index (offset_stmt, lhs,\n+\t\t\t\t\t\t\t      stmt, use_stmt);\n+      if (res && changed)\n+\t*changed = true;\n+      return res;\n     }\n \t      \n   /* Same as the previous case, except the operands of the PLUS_EXPR\n@@ -784,9 +802,13 @@ forward_propagate_addr_expr_1 (tree stmt, tree use_stmt)\n \t different type than their operands.  */\n       && lang_hooks.types_compatible_p (TREE_TYPE (name), TREE_TYPE (rhs)))\n     {\n+      bool res;\n       tree offset_stmt = SSA_NAME_DEF_STMT (TREE_OPERAND (rhs, 0));\n-      return forward_propagate_addr_into_variable_array_index (offset_stmt, lhs,\n-\t\t\t\t\t\t\t       stmt, use_stmt);\n+      res = forward_propagate_addr_into_variable_array_index (offset_stmt, lhs,\n+\t\t\t\t\t\t\t      stmt, use_stmt);\n+      if (res && changed)\n+\t*changed = true;\n+      return res;\n     }\n   return false;\n }\n@@ -830,9 +852,8 @@ forward_propagate_addr_expr (tree stmt, bool *some)\n \t  continue;\n \t}\n       \n-      result = forward_propagate_addr_expr_1 (stmt, use_stmt);\n-      if (some)\n-\t*some |= result;\n+      result = forward_propagate_addr_expr_1 (stmt, use_stmt, some);\n+      *some |= result;\n       all &= result;\n     }\n "}]}