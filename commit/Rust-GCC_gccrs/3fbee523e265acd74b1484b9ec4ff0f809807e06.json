{"sha": "3fbee523e265acd74b1484b9ec4ff0f809807e06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZiZWU1MjNlMjY1YWNkNzRiMTQ4NGI5ZWM0ZmYwZjgwOTgwN2UwNg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2007-04-12T13:39:35Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2007-04-12T13:39:35Z"}, "message": "lib1funcs.asm (___umulsi3_highpart, [...]): Use a more efficient implementation.\n\n\t* config/bfin/lib1funcs.asm (___umulsi3_highpart, __smulsi3_highpart):\n\tUse a more efficient implementation.\n\t* config/bfin/bfin.md (umulsi3_highpart, smulsi3_highpart): Emit\n\tinline sequences when not optimizing for size.\n\nFrom-SVN: r123748", "tree": {"sha": "b13beefca85f131d4dfe6524d6ccf3324a44b684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b13beefca85f131d4dfe6524d6ccf3324a44b684"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fbee523e265acd74b1484b9ec4ff0f809807e06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fbee523e265acd74b1484b9ec4ff0f809807e06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fbee523e265acd74b1484b9ec4ff0f809807e06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fbee523e265acd74b1484b9ec4ff0f809807e06/comments", "author": null, "committer": null, "parents": [{"sha": "9d3f9aa3a56dcce4ce7f84ec34ef3d7178c917e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d3f9aa3a56dcce4ce7f84ec34ef3d7178c917e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d3f9aa3a56dcce4ce7f84ec34ef3d7178c917e1"}], "stats": {"total": 167, "additions": 107, "deletions": 60}, "files": [{"sha": "ef344f0786f5a3559c9c0de8237c342f3fc1180d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbee523e265acd74b1484b9ec4ff0f809807e06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbee523e265acd74b1484b9ec4ff0f809807e06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fbee523e265acd74b1484b9ec4ff0f809807e06", "patch": "@@ -17,6 +17,11 @@\n \t(flag_macinit1hi): Tighten constraints.\n \t(flag_mul_macv2hi_parts_acconly): New pattern.\n \n+\t* config/bfin/lib1funcs.asm (___umulsi3_highpart, __smulsi3_highpart):\n+\tUse a more efficient implementation.\n+\t* config/bfin/bfin.md (umulsi3_highpart, smulsi3_highpart): Emit\n+\tinline sequences when not optimizing for size.\n+\n \t2007-02-11  Jie Zhang  <jie.zhang@analog.com>\n \t* config/bfin/bfin.opt (msim): New option.\n \t(mcpu=): New option."}, {"sha": "ed0da5a373248d177eb6fa96638f84c09e5459e8", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 90, "deletions": 30, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbee523e265acd74b1484b9ec4ff0f809807e06/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbee523e265acd74b1484b9ec4ff0f809807e06/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=3fbee523e265acd74b1484b9ec4ff0f809807e06", "patch": "@@ -1451,42 +1451,102 @@\n   [(set_attr \"type\" \"mult\")])\n \n (define_expand \"umulsi3_highpart\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-       (truncate:SI\n-        (lshiftrt:DI\n-         (mult:DI (zero_extend:DI\n-                   (match_operand:SI 1 \"nonimmediate_operand\" \"\"))\n-                  (zero_extend:DI\n-                   (match_operand:SI 2 \"register_operand\" \"\")))\n-         (const_int 32))))]\n-  \"\"\n-{\n-  rtx umulsi3_highpart_libfunc\n-    = init_one_libfunc (\"__umulsi3_highpart\");\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t  (truncate:SI\n+\t   (lshiftrt:DI\n+\t    (mult:DI (zero_extend:DI\n+\t\t      (match_operand:SI 1 \"nonimmediate_operand\" \"\"))\n+\t\t     (zero_extend:DI\n+\t\t      (match_operand:SI 2 \"register_operand\" \"\")))\n+\t    (const_int 32))))\n+     (clobber (reg:PDI REG_A0))\n+     (clobber (reg:PDI REG_A1))])]\n+  \"\"\n+{\n+  if (!optimize_size)\n+    {\n+      rtx a1reg = gen_rtx_REG (PDImode, REG_A1);\n+      rtx a0reg = gen_rtx_REG (PDImode, REG_A0);\n+      emit_insn (gen_flag_macinit1hi (a1reg,\n+\t\t\t\t      gen_lowpart (HImode, operands[1]),\n+\t\t\t\t      gen_lowpart (HImode, operands[2]),\n+\t\t\t\t      GEN_INT (MACFLAG_FU)));\n+      emit_insn (gen_lshrpdi3 (a1reg, a1reg, GEN_INT (16)));\n+      emit_insn (gen_flag_mul_macv2hi_parts_acconly (a0reg, a1reg,\n+\t\t\t\t\t\t     gen_lowpart (V2HImode, operands[1]),\n+\t\t\t\t\t\t     gen_lowpart (V2HImode, operands[2]),\n+\t\t\t\t\t\t     const1_rtx, const1_rtx,\n+\t\t\t\t\t\t     const1_rtx, const0_rtx, a1reg,\n+\t\t\t\t\t\t     const0_rtx, GEN_INT (MACFLAG_FU),\n+\t\t\t\t\t\t     GEN_INT (MACFLAG_FU)));\n+      emit_insn (gen_flag_machi_parts_acconly (a1reg,\n+\t\t\t\t\t       gen_lowpart (V2HImode, operands[2]),\n+\t\t\t\t\t       gen_lowpart (V2HImode, operands[1]),\n+\t\t\t\t\t       const1_rtx, const0_rtx,\n+\t\t\t\t\t       a1reg, const0_rtx, GEN_INT (MACFLAG_FU)));\n+      emit_insn (gen_lshrpdi3 (a1reg, a1reg, GEN_INT (16)));\n+      emit_insn (gen_sum_of_accumulators (operands[0], a0reg, a0reg, a1reg));\n+    }\n+  else\n+    {\n+      rtx umulsi3_highpart_libfunc\n+\t= init_one_libfunc (\"__umulsi3_highpart\");\n \n-  emit_library_call_value (umulsi3_highpart_libfunc,\n-\t\t\t   operands[0], LCT_NORMAL, SImode,\n-\t\t\t   2, operands[1], SImode, operands[2], SImode);\n+      emit_library_call_value (umulsi3_highpart_libfunc,\n+\t\t\t       operands[0], LCT_NORMAL, SImode,\n+\t\t\t       2, operands[1], SImode, operands[2], SImode);\n+    }\n   DONE;\n })\n \n (define_expand \"smulsi3_highpart\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-       (truncate:SI\n-        (lshiftrt:DI\n-         (mult:DI (sign_extend:DI\n-                   (match_operand:SI 1 \"nonimmediate_operand\" \"\"))\n-                  (sign_extend:DI\n-                   (match_operand:SI 2 \"register_operand\" \"\")))\n-         (const_int 32))))]\n-  \"\"\n-{\n-  rtx smulsi3_highpart_libfunc\n-    = init_one_libfunc (\"__smulsi3_highpart\");\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t  (truncate:SI\n+\t   (lshiftrt:DI\n+\t    (mult:DI (sign_extend:DI\n+\t\t      (match_operand:SI 1 \"nonimmediate_operand\" \"\"))\n+\t\t     (sign_extend:DI\n+\t\t      (match_operand:SI 2 \"register_operand\" \"\")))\n+\t    (const_int 32))))\n+     (clobber (reg:PDI REG_A0))\n+     (clobber (reg:PDI REG_A1))])]\n+  \"\"\n+{\n+  if (!optimize_size)\n+    {\n+      rtx a1reg = gen_rtx_REG (PDImode, REG_A1);\n+      rtx a0reg = gen_rtx_REG (PDImode, REG_A0);\n+      emit_insn (gen_flag_macinit1hi (a1reg,\n+\t\t\t\t      gen_lowpart (HImode, operands[1]),\n+\t\t\t\t      gen_lowpart (HImode, operands[2]),\n+\t\t\t\t      GEN_INT (MACFLAG_FU)));\n+      emit_insn (gen_lshrpdi3 (a1reg, a1reg, GEN_INT (16)));\n+      emit_insn (gen_flag_mul_macv2hi_parts_acconly (a0reg, a1reg,\n+\t\t\t\t\t\t     gen_lowpart (V2HImode, operands[1]),\n+\t\t\t\t\t\t     gen_lowpart (V2HImode, operands[2]),\n+\t\t\t\t\t\t     const1_rtx, const1_rtx,\n+\t\t\t\t\t\t     const1_rtx, const0_rtx, a1reg,\n+\t\t\t\t\t\t     const0_rtx, GEN_INT (MACFLAG_IS),\n+\t\t\t\t\t\t     GEN_INT (MACFLAG_IS_M)));\n+      emit_insn (gen_flag_machi_parts_acconly (a1reg,\n+\t\t\t\t\t       gen_lowpart (V2HImode, operands[2]),\n+\t\t\t\t\t       gen_lowpart (V2HImode, operands[1]),\n+\t\t\t\t\t       const1_rtx, const0_rtx,\n+\t\t\t\t\t       a1reg, const0_rtx, GEN_INT (MACFLAG_IS_M)));\n+      emit_insn (gen_ashrpdi3 (a1reg, a1reg, GEN_INT (16)));\n+      emit_insn (gen_sum_of_accumulators (operands[0], a0reg, a0reg, a1reg));\n+    }\n+  else\n+    {\n+      rtx smulsi3_highpart_libfunc\n+\t= init_one_libfunc (\"__smulsi3_highpart\");\n \n-  emit_library_call_value (smulsi3_highpart_libfunc,\n-\t\t\t   operands[0], LCT_NORMAL, SImode,\n-\t\t\t   2, operands[1], SImode, operands[2], SImode);\n+      emit_library_call_value (smulsi3_highpart_libfunc,\n+\t\t\t       operands[0], LCT_NORMAL, SImode,\n+\t\t\t       2, operands[1], SImode, operands[2], SImode);\n+    }\n   DONE;\n })\n "}, {"sha": "fe4c3d53eb5bb558523ffc2620b6485eaf02307b", "filename": "gcc/config/bfin/lib1funcs.asm", "status": "modified", "additions": 12, "deletions": 30, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbee523e265acd74b1484b9ec4ff0f809807e06/gcc%2Fconfig%2Fbfin%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbee523e265acd74b1484b9ec4ff0f809807e06/gcc%2Fconfig%2Fbfin%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Flib1funcs.asm?ref=3fbee523e265acd74b1484b9ec4ff0f809807e06", "patch": "@@ -123,17 +123,12 @@ ___umodsi3:\n .type ___umulsi3_highpart, STT_FUNC;\n \n ___umulsi3_highpart:\n-\tR2 = R1.H * R0.H, R3 = R1.L * R0.H (FU);\n-\tR0 = R1.L * R0.L, R1 = R1.H * R0.L (FU);\n-\tR0 >>= 16;\n-\t/* Unsigned multiplication has the nice property that we can\n-\t   ignore carry on this first addition.  */\n-\tR0 = R0 + R3;\n-\tR0 = R0 + R1;\n-\tcc = ac0;\n-\tR1 = cc;\n-\tR1 = PACK(R1.l,R0.h);\n-\tR0 = R1 + R2;\n+\tA1 = R1.L * R0.L (FU);\n+\tA1 = A1 >> 16;\n+\tA0 = R1.H * R0.H, A1 += R1.L * R0.H (FU);\n+\tA1 += R0.L * R1.H (FU);\n+\tA1 = A1 >> 16;\n+\tR0 = (A0 += A1);\n \tRTS;\n #endif\n \n@@ -143,24 +138,11 @@ ___umulsi3_highpart:\n .type ___smulsi3_highpart, STT_FUNC;\n \n ___smulsi3_highpart:\n-\tR2 = R1.L * R0.L (FU);\n-\tR3 = R1.H * R0.L (IS,M);\n-\tR0 = R0.H * R1.H, R1 = R0.H * R1.L (IS,M);\n-\n-\tR1.L = R2.H + R1.L;\n-\tcc = ac0;\n-\tR2 = cc;\n-\n-\tR1.L = R1.L + R3.L;\n-\tcc = ac0;\n-\tR1 >>>= 16;\n-\tR3 >>>= 16;\n-\tR1 = R1 + R3;\n-\tR1 = R1 + R2;\n-\tR2 = cc;\n-\tR1 = R1 + R2;\n-\n-\tR0 = R0 + R1;\n+\tA1 = R1.L * R0.L (FU);\n+\tA1 = A1 >> 16;\n+\tA0 = R0.H * R1.H, A1 += R0.H * R1.L (IS,M);\n+\tA1 += R1.H * R0.L (IS,M);\n+\tA1 = A1 >>> 16;\n+\tR0 = (A0 += A1);\n \tRTS;\n #endif\n-"}]}