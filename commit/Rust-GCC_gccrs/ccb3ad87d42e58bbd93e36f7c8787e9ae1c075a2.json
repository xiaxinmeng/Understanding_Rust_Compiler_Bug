{"sha": "ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NiM2FkODdkNDJlNThiYmQ5M2UzNmY3Yzg3ODdlOWFlMWMwNzVhMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-05-15T11:13:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-05-15T11:13:46Z"}, "message": "tree-vect-loop.c (vect_transform_loop): Use MSG_NOTE instead of MSG_OPTIMIZED_LOCATIONS.\n\n2013-05-15  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-loop.c (vect_transform_loop): Use MSG_NOTE instead\n\tof MSG_OPTIMIZED_LOCATIONS.\n\t* tree-vect-slp.c (vect_make_slp_decision): Likewise.\n\t(vect_slp_transform_bb): Indicate location in MSG_OPTIMIZED_LOCATIONS\n\tmessage.\n\t* tree-vectorizer.c (vectorize_loops): Use MSG_NOTE instead\n\tof MSG_OPTIMIZED_LOCATIONS.\n\t(execute_vect_slp): Likewise.\n\t* tree-vect-loop-manip.c (vect_do_peeling_for_loop_bound): Likewise.\n\t(vect_create_cond_for_alias_checks): Likewise.\n\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Likewise.\n\t(vect_recog_widen_mult_pattern): Likewise.\n\t(vect_recog_widen_sum_pattern): Likewise.\n\t(vect_recog_over_widening_pattern): Likewise.\n\t(vect_recog_widen_shift_pattern): Likewise.\n\t(vect_recog_vector_vector_shift_pattern): Likewise.\n\t(vect_recog_divmod_pattern): Likewise.\n\t(vect_recog_mixed_size_cond_pattern): Likewise.\n\t(vect_recog_bool_pattern): Likewise.\n\t(vect_pattern_recog_1): Likewise.\n\nFrom-SVN: r198927", "tree": {"sha": "d431e8f0b553697cfb5021a7aa3390f85cbe87f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d431e8f0b553697cfb5021a7aa3390f85cbe87f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48b1474efb32b90b45e4d824f5c670e24e059f0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b1474efb32b90b45e4d824f5c670e24e059f0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b1474efb32b90b45e4d824f5c670e24e059f0c"}], "stats": {"total": 115, "additions": 71, "deletions": 44}, "files": [{"sha": "e0c5c322b72522e3b2f0f214cee0b1d3cc6507d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2", "patch": "@@ -1,3 +1,26 @@\n+2013-05-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vect_transform_loop): Use MSG_NOTE instead\n+\tof MSG_OPTIMIZED_LOCATIONS.\n+\t* tree-vect-slp.c (vect_make_slp_decision): Likewise.\n+\t(vect_slp_transform_bb): Indicate location in MSG_OPTIMIZED_LOCATIONS\n+\tmessage.\n+\t* tree-vectorizer.c (vectorize_loops): Use MSG_NOTE instead\n+\tof MSG_OPTIMIZED_LOCATIONS.\n+\t(execute_vect_slp): Likewise.\n+\t* tree-vect-loop-manip.c (vect_do_peeling_for_loop_bound): Likewise.\n+\t(vect_create_cond_for_alias_checks): Likewise.\n+\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Likewise.\n+\t(vect_recog_widen_mult_pattern): Likewise.\n+\t(vect_recog_widen_sum_pattern): Likewise.\n+\t(vect_recog_over_widening_pattern): Likewise.\n+\t(vect_recog_widen_shift_pattern): Likewise.\n+\t(vect_recog_vector_vector_shift_pattern): Likewise.\n+\t(vect_recog_divmod_pattern): Likewise.\n+\t(vect_recog_mixed_size_cond_pattern): Likewise.\n+\t(vect_recog_bool_pattern): Likewise.\n+\t(vect_pattern_recog_1): Likewise.\n+\n 2013-05-15  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-prop.c (ipa_make_edge_direct_to_target): Redirect calls to"}, {"sha": "a0d676971261d0219e25fc6651219f93ee91944f", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2", "patch": "@@ -1761,7 +1761,7 @@ vect_do_peeling_for_loop_bound (loop_vec_info loop_vinfo, tree *ratio,\n   gimple_seq cond_expr_stmt_list = NULL;\n \n   if (dump_enabled_p ())\n-    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+    dump_printf_loc (MSG_NOTE, vect_location,\n                      \"=== vect_do_peeling_for_loop_bound ===\");\n \n   initialize_original_copy_tables ();\n@@ -1815,7 +1815,7 @@ vect_do_peeling_for_loop_bound (loop_vec_info loop_vinfo, tree *ratio,\n   if (check_profitability)\n     max_iter = MAX (max_iter, (int) th - 1);\n   record_niter_bound (new_loop, double_int::from_shwi (max_iter), false, true);\n-  dump_printf (MSG_OPTIMIZED_LOCATIONS,\n+  dump_printf (MSG_NOTE,\n                \"Setting upper bound of nb iterations for epilogue \"\n                \"loop to %d\\n\", max_iter);\n \n@@ -1880,7 +1880,7 @@ vect_gen_niters_for_prolog_loop (loop_vec_info loop_vinfo, tree loop_niters, int\n       int npeel = LOOP_PEELING_FOR_ALIGNMENT (loop_vinfo);\n \n       if (dump_enabled_p ())\n-        dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+        dump_printf_loc (MSG_NOTE, vect_location,\n                          \"known peeling = %d.\", npeel);\n \n       iters = build_int_cst (niters_type, npeel);\n@@ -1935,9 +1935,9 @@ vect_gen_niters_for_prolog_loop (loop_vec_info loop_vinfo, tree loop_niters, int\n \n   if (dump_enabled_p ())\n     {\n-      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+      dump_printf_loc (MSG_NOTE, vect_location,\n                        \"niters for prolog loop: \");\n-      dump_generic_expr (MSG_OPTIMIZED_LOCATIONS, TDF_SLIM, iters);\n+      dump_generic_expr (MSG_NOTE, TDF_SLIM, iters);\n     }\n \n   var = create_tmp_var (niters_type, \"prolog_loop_niters\");\n@@ -1992,7 +1992,7 @@ vect_update_inits_of_drs (loop_vec_info loop_vinfo, tree niters)\n   struct data_reference *dr;\n  \n  if (dump_enabled_p ())\n-    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+    dump_printf_loc (MSG_NOTE, vect_location,\n                      \"=== vect_update_inits_of_dr ===\");\n \n   FOR_EACH_VEC_ELT (datarefs, i, dr)\n@@ -2021,7 +2021,7 @@ vect_do_peeling_for_alignment (loop_vec_info loop_vinfo,\n   int bound = 0;\n \n   if (dump_enabled_p ())\n-    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+    dump_printf_loc (MSG_NOTE, vect_location,\n                      \"=== vect_do_peeling_for_alignment ===\");\n \n   initialize_original_copy_tables ();\n@@ -2049,7 +2049,7 @@ vect_do_peeling_for_alignment (loop_vec_info loop_vinfo,\n   if (check_profitability)\n     max_iter = MAX (max_iter, (int) th - 1);\n   record_niter_bound (new_loop, double_int::from_shwi (max_iter), false, true);\n-  dump_printf (MSG_OPTIMIZED_LOCATIONS,\n+  dump_printf (MSG_NOTE,\n                \"Setting upper bound of nb iterations for prologue \"\n                \"loop to %d\\n\", max_iter);\n \n@@ -2332,11 +2332,11 @@ vect_create_cond_for_alias_checks (loop_vec_info loop_vinfo, tree * cond_expr)\n \n       if (dump_enabled_p ())\n \t{\n-\t  dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location, \n+\t  dump_printf_loc (MSG_NOTE, vect_location,\n                            \"create runtime check for data references \");\n-\t  dump_generic_expr (MSG_OPTIMIZED_LOCATIONS, TDF_SLIM, DR_REF (dr_a));\n-\t  dump_printf (MSG_OPTIMIZED_LOCATIONS, \" and \");\n-\t  dump_generic_expr (MSG_OPTIMIZED_LOCATIONS, TDF_SLIM, DR_REF (dr_b));\n+\t  dump_generic_expr (MSG_NOTE, TDF_SLIM, DR_REF (dr_a));\n+\t  dump_printf (MSG_NOTE, \" and \");\n+\t  dump_generic_expr (MSG_NOTE, TDF_SLIM, DR_REF (dr_b));\n \t}\n \n       seg_a_min = addr_base_a;\n@@ -2362,7 +2362,7 @@ vect_create_cond_for_alias_checks (loop_vec_info loop_vinfo, tree * cond_expr)\n     }\n \n   if (dump_enabled_p ())\n-    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+    dump_printf_loc (MSG_NOTE, vect_location,\n \t\t     \"created %u versioning for alias checks.\\n\",\n \t\t     may_alias_ddrs.length ());\n }"}, {"sha": "058e4a4ec547e8b3b1ff2504add1f7bfef51c397", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2", "patch": "@@ -5788,8 +5788,11 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n     }\n \n   if (dump_enabled_p ())\n-    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location, \"LOOP VECTORIZED.\");\n-  if (loop->inner && dump_enabled_p ())\n-    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n-\t\t     \"OUTER LOOP VECTORIZED.\");\n+    {\n+      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+\t\t       \"LOOP VECTORIZED\\n\");\n+      if (loop->inner)\n+\tdump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t \"OUTER LOOP VECTORIZED\\n\");\n+    }\n }"}, {"sha": "e389dec37712e7017c854cd43777b25a0b325ff6", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2", "patch": "@@ -417,9 +417,9 @@ vect_recog_dot_prod_pattern (vec<gimple> *stmts, tree *type_in,\n \n   if (dump_enabled_p ())\n     {\n-      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location, \n+      dump_printf_loc (MSG_NOTE, vect_location,\n                        \"vect_recog_dot_prod_pattern: detected: \");\n-      dump_gimple_stmt (MSG_OPTIMIZED_LOCATIONS, TDF_SLIM, pattern_stmt, 0);\n+      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n     }\n \n   /* We don't allow changing the order of the computation in the inner-loop\n@@ -676,7 +676,7 @@ vect_recog_widen_mult_pattern (vec<gimple> *stmts,\n \n   /* Pattern detected.  */\n   if (dump_enabled_p ())\n-    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location, \n+    dump_printf_loc (MSG_NOTE, vect_location,\n                      \"vect_recog_widen_mult_pattern: detected: \");\n \n   /* Check target support  */\n@@ -913,9 +913,9 @@ vect_recog_widen_sum_pattern (vec<gimple> *stmts, tree *type_in,\n \n   if (dump_enabled_p ())\n     {\n-      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location, \n+      dump_printf_loc (MSG_NOTE, vect_location,\n                        \"vect_recog_widen_sum_pattern: detected: \");\n-      dump_gimple_stmt (MSG_OPTIMIZED_LOCATIONS, TDF_SLIM, pattern_stmt, 0);\n+      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n     }\n \n   /* We don't allow changing the order of the computation in the inner-loop\n@@ -1218,9 +1218,9 @@ vect_recog_over_widening_pattern (vec<gimple> *stmts,\n \n       if (dump_enabled_p ())\n         {\n-          dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+          dump_printf_loc (MSG_NOTE, vect_location,\n                            \"created pattern stmt: \");\n-          dump_gimple_stmt (MSG_OPTIMIZED_LOCATIONS, TDF_SLIM, pattern_stmt, 0);\n+          dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n         }\n \n       type = gimple_expr_type (stmt);\n@@ -1286,9 +1286,9 @@ vect_recog_over_widening_pattern (vec<gimple> *stmts,\n   /* Pattern detected.  */\n   if (dump_enabled_p ())\n     {\n-      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location, \n+      dump_printf_loc (MSG_NOTE, vect_location,\n                        \"vect_recog_over_widening_pattern: detected: \");\n-      dump_gimple_stmt (MSG_OPTIMIZED_LOCATIONS, TDF_SLIM, pattern_stmt, 0);\n+      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n     }\n \n   return pattern_stmt;\n@@ -1421,7 +1421,7 @@ vect_recog_widen_shift_pattern (vec<gimple> *stmts,\n \n   /* Pattern detected.  */\n   if (dump_enabled_p ())\n-    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+    dump_printf_loc (MSG_NOTE, vect_location,\n                      \"vect_recog_widen_shift_pattern: detected: \");\n \n   /* Check target support.  */\n@@ -1567,7 +1567,7 @@ vect_recog_vector_vector_shift_pattern (vec<gimple> *stmts,\n \n   /* Pattern detected.  */\n   if (dump_enabled_p ())\n-    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location, \n+    dump_printf_loc (MSG_NOTE, vect_location,\n                      \"vect_recog_vector_vector_shift_pattern: detected: \");\n \n   /* Pattern supported.  Create a stmt to be used to replace the pattern.  */\n@@ -1685,7 +1685,7 @@ vect_recog_divmod_pattern (vec<gimple> *stmts,\n \n       /* Pattern detected.  */\n       if (dump_enabled_p ())\n-        dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+        dump_printf_loc (MSG_NOTE, vect_location,\n                          \"vect_recog_divmod_pattern: detected: \");\n \n       cond = build2 (LT_EXPR, boolean_type_node, oprnd0,\n@@ -2032,9 +2032,9 @@ vect_recog_divmod_pattern (vec<gimple> *stmts,\n   /* Pattern detected.  */\n   if (dump_enabled_p ())\n     {\n-      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location, \n+      dump_printf_loc (MSG_NOTE, vect_location,\n                        \"vect_recog_divmod_pattern: detected: \");\n-      dump_gimple_stmt (MSG_OPTIMIZED_LOCATIONS, TDF_SLIM, pattern_stmt, 0);\n+      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n     }\n \n   stmts->safe_push (last_stmt);\n@@ -2199,7 +2199,7 @@ vect_recog_mixed_size_cond_pattern (vec<gimple> *stmts, tree *type_in,\n   *type_out = vectype;\n \n   if (dump_enabled_p ())\n-    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location, \n+    dump_printf_loc (MSG_NOTE, vect_location,\n                      \"vect_recog_mixed_size_cond_pattern: detected: \");\n \n   return pattern_stmt;\n@@ -2592,7 +2592,7 @@ vect_recog_bool_pattern (vec<gimple> *stmts, tree *type_in,\n       *type_in = vectype;\n       stmts->safe_push (last_stmt);\n       if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location, \n+\tdump_printf_loc (MSG_NOTE, vect_location,\n                          \"vect_recog_bool_pattern: detected: \");\n \n       return pattern_stmt;\n@@ -2638,7 +2638,7 @@ vect_recog_bool_pattern (vec<gimple> *stmts, tree *type_in,\n       *type_in = vectype;\n       stmts->safe_push (last_stmt);\n       if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+\tdump_printf_loc (MSG_NOTE, vect_location,\n                          \"vect_recog_bool_pattern: detected: \");\n       return pattern_stmt;\n     }\n@@ -2789,9 +2789,9 @@ vect_pattern_recog_1 (vect_recog_func_ptr vect_recog_func,\n   /* Found a vectorizable pattern.  */\n   if (dump_enabled_p ())\n     {\n-      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+      dump_printf_loc (MSG_NOTE, vect_location,\n                        \"pattern recognized: \");\n-      dump_gimple_stmt (MSG_OPTIMIZED_LOCATIONS, TDF_SLIM, pattern_stmt, 0);\n+      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n     }\n \n   /* Mark the stmts that are involved in the pattern. */\n@@ -2815,9 +2815,9 @@ vect_pattern_recog_1 (vect_recog_func_ptr vect_recog_func,\n       pattern_stmt = STMT_VINFO_RELATED_STMT (stmt_info);\n       if (dump_enabled_p ())\n         {\n-          dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+          dump_printf_loc (MSG_NOTE, vect_location,\n                            \"additional pattern stmt: \");\n-          dump_gimple_stmt (MSG_OPTIMIZED_LOCATIONS, TDF_SLIM, pattern_stmt, 0);\n+          dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n         }\n \n       vect_mark_pattern_stmts (stmt, pattern_stmt, NULL_TREE);"}, {"sha": "e3b38ff2d527c9943bd232a89d50147398622f1b", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2", "patch": "@@ -1698,7 +1698,7 @@ vect_make_slp_decision (loop_vec_info loop_vinfo)\n   LOOP_VINFO_SLP_UNROLLING_FACTOR (loop_vinfo) = unrolling_factor;\n \n   if (decided_to_slp && dump_enabled_p ())\n-    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+    dump_printf_loc (MSG_NOTE, vect_location,\n \t\t     \"Decided to SLP %d instances. Unrolling factor %d\",\n \t\t     decided_to_slp, unrolling_factor);\n \n@@ -3132,7 +3132,8 @@ vect_slp_transform_bb (basic_block bb)\n     }\n \n   if (dump_enabled_p ())\n-    dump_printf (MSG_OPTIMIZED_LOCATIONS, \"BASIC BLOCK VECTORIZED\\n\");\n+    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+\t\t     \"BASIC BLOCK VECTORIZED\\n\");\n \n   destroy_bb_vec_info (bb_vinfo);\n }"}, {"sha": "814f96c30171e5c81131cf5284d514e36e52efcf", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2", "patch": "@@ -107,7 +107,7 @@ vectorize_loops (void)\n \tvect_location = find_loop_location (loop);\n         if (LOCATION_LOCUS (vect_location) != UNKNOWN_LOC\n \t    && dump_enabled_p ())\n-\t  dump_printf (MSG_ALL, \"\\nAnalyzing loop at %s:%d\\n\",\n+\t  dump_printf (MSG_NOTE, \"\\nAnalyzing loop at %s:%d\\n\",\n                        LOC_FILE (vect_location), LOC_LINE (vect_location));\n \n \tloop_vinfo = vect_analyze_loop (loop);\n@@ -118,7 +118,7 @@ vectorize_loops (void)\n \n         if (LOCATION_LOCUS (vect_location) != UNKNOWN_LOC\n \t    && dump_enabled_p ())\n-          dump_printf (MSG_ALL, \"\\n\\nVectorizing loop at %s:%d\\n\",\n+          dump_printf (MSG_NOTE, \"\\n\\nVectorizing loop at %s:%d\\n\",\n                        LOC_FILE (vect_location), LOC_LINE (vect_location));\n \tvect_transform_loop (loop_vinfo);\n \tnum_vectorized_loops++;\n@@ -129,7 +129,7 @@ vectorize_loops (void)\n   statistics_counter_event (cfun, \"Vectorized loops\", num_vectorized_loops);\n   if (dump_enabled_p ()\n       || (num_vectorized_loops > 0 && dump_enabled_p ()))\n-    dump_printf_loc (MSG_ALL, vect_location,\n+    dump_printf_loc (MSG_NOTE, vect_location,\n                      \"vectorized %u loops in function.\\n\",\n                      num_vectorized_loops);\n \n@@ -179,7 +179,7 @@ execute_vect_slp (void)\n         {\n           vect_slp_transform_bb (bb);\n           if (dump_enabled_p ())\n-            dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+            dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t     \"basic block vectorized using SLP\\n\");\n         }\n     }"}]}