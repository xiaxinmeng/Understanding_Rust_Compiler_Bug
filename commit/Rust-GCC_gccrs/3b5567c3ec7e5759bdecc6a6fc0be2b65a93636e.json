{"sha": "3b5567c3ec7e5759bdecc6a6fc0be2b65a93636e", "node_id": "C_kwDOANBUbNoAKDNiNTU2N2MzZWM3ZTU3NTliZGVjYzZhNmZjMGJlMmI2NWE5MzYzNmU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-07-20T11:49:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-07-20T22:34:20Z"}, "message": "libstdc++: Fix minor bugs in std::common_iterator\n\nThe noexcept-specifier for some std::common_iterator constructors was\nincorrectly using an rvalue as the first argument of\nstd::is_nothrow_assignable_v. This gave the wrong answer for some types,\ne.g. std::common_iterator<int*, S>, because an rvalue of scalar type\ncannot be assigned to.\n\nAlso fix the friend declaration to use the same constraints as on the\ndefinition of the class template. G++ fails to diagnose this error, due\nto PR c++/96830.\n\nFinally, the copy constructor was using std::move for its argument\nin some cases, which should be removed.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_iterator.h (common_iterator): Fix incorrect\n\tuses of is_nothrow_assignable_v. Fix inconsistent constraints on\n\tfriend declaration. Do not move argument in copy constructor.\n\t* testsuite/24_iterators/common_iterator/1.cc: Check for\n\tnoexcept constructibnle/assignable.", "tree": {"sha": "c8133dca1c61c878ed8f7850dde3a670cc604f6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8133dca1c61c878ed8f7850dde3a670cc604f6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b5567c3ec7e5759bdecc6a6fc0be2b65a93636e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5567c3ec7e5759bdecc6a6fc0be2b65a93636e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b5567c3ec7e5759bdecc6a6fc0be2b65a93636e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5567c3ec7e5759bdecc6a6fc0be2b65a93636e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e830693dd335621940368b6d39b23afc2c98545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e830693dd335621940368b6d39b23afc2c98545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e830693dd335621940368b6d39b23afc2c98545"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "fd0ae3aa771c4b168523770ef6566e1dc51037ea", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5567c3ec7e5759bdecc6a6fc0be2b65a93636e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5567c3ec7e5759bdecc6a6fc0be2b65a93636e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=3b5567c3ec7e5759bdecc6a6fc0be2b65a93636e", "patch": "@@ -1838,7 +1838,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_noexcept1()\n       {\n \tif constexpr (is_trivially_default_constructible_v<_Tp>)\n-\t  return is_nothrow_assignable_v<_Tp, _Up>;\n+\t  return is_nothrow_assignable_v<_Tp&, _Up>;\n \telse\n \t  return is_nothrow_constructible_v<_Tp, _Up>;\n       }\n@@ -1932,14 +1932,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (_M_index == 0)\n \t{\n \t  if constexpr (is_trivially_default_constructible_v<_It>)\n-\t    _M_it = std::move(__x._M_it);\n+\t    _M_it = __x._M_it;\n \t  else\n \t    std::construct_at(std::__addressof(_M_it), __x._M_it);\n \t}\n       else if (_M_index == 1)\n \t{\n \t  if constexpr (is_trivially_default_constructible_v<_Sent>)\n-\t    _M_sent = std::move(__x._M_sent);\n+\t    _M_sent = __x._M_sent;\n \t  else\n \t    std::construct_at(std::__addressof(_M_sent), __x._M_sent);\n \t}\n@@ -1964,8 +1964,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator=(const common_iterator<_It2, _Sent2>& __x)\n       noexcept(is_nothrow_constructible_v<_It, const _It2&>\n \t       && is_nothrow_constructible_v<_Sent, const _Sent2&>\n-\t       && is_nothrow_assignable_v<_It, const _It2&>\n-\t       && is_nothrow_assignable_v<_Sent, const _Sent2&>)\n+\t       && is_nothrow_assignable_v<_It&, const _It2&>\n+\t       && is_nothrow_assignable_v<_Sent&, const _Sent2&>)\n       {\n \tswitch(_M_index << 2 | __x._M_index)\n \t  {\n@@ -2164,6 +2164,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   private:\n     template<input_or_output_iterator _It2, sentinel_for<_It2> _Sent2>\n+      requires (!same_as<_It2, _Sent2>) && copyable<_It2>\n       friend class common_iterator;\n \n     constexpr bool _M_has_value() const noexcept { return _M_index < 2; }"}, {"sha": "ec4a86c862a102531ffbf741c38f6f92f3672b68", "filename": "libstdc++-v3/testsuite/24_iterators/common_iterator/1.cc", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5567c3ec7e5759bdecc6a6fc0be2b65a93636e/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5567c3ec7e5759bdecc6a6fc0be2b65a93636e/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F1.cc?ref=3b5567c3ec7e5759bdecc6a6fc0be2b65a93636e", "patch": "@@ -27,15 +27,30 @@ test01()\n   using I = std::common_iterator<int*, const int*>;\n   static_assert( std::is_default_constructible_v<I> );\n   static_assert( std::is_copy_constructible_v<I> );\n+  static_assert( std::is_move_constructible_v<I> );\n   static_assert( std::is_copy_assignable_v<I> );\n+  static_assert( std::is_move_assignable_v<I> );\n   static_assert( std::is_constructible_v<I, int*> );\n   static_assert( std::is_constructible_v<I, const int*> );\n \n-  struct sentinel { operator int*() const { return nullptr; } };\n+  static_assert( std::is_nothrow_copy_constructible_v<I> ); // GCC extension\n+  static_assert( std::is_nothrow_move_constructible_v<I> ); // GCC extension\n+  static_assert( std::is_nothrow_copy_assignable_v<I> ); // GCC extension\n+  static_assert( std::is_nothrow_move_assignable_v<I> ); // GCC extension\n+\n+  struct sentinel { operator int*() const noexcept { return nullptr; } };\n   using K = std::common_iterator<int*, sentinel>;\n   static_assert( std::is_constructible_v<I, const K&> );\n   static_assert( std::is_assignable_v<I, const K&> );\n \n+  static_assert( std::is_nothrow_assignable_v<I&, const K&> ); // GCC extension\n+\n+  struct sentinel_throwing { operator int*() const { return nullptr; } };\n+  using K_throwing = std::common_iterator<int*, sentinel_throwing>;\n+  // Conversion is noexcept(false)\n+  static_assert( ! std::is_nothrow_assignable_v<I&, const K_throwing&> );\n+\n+\n   struct sentinel2\n   {\n     const int* p;\n@@ -46,6 +61,12 @@ test01()\n   using J = std::common_iterator<const int*, sentinel2>;\n   static_assert( std::is_constructible_v<J, const I&> );\n   static_assert( std::is_convertible_v<const I&, J> );\n+\n+  static_assert( std::is_constructible_v<J, I> );\n+  static_assert( std::is_convertible_v<I, J> );\n+\n+  // Constructor is noexcept(false)\n+  static_assert( ! std::is_nothrow_constructible_v<J, I> );\n }\n \n void"}]}