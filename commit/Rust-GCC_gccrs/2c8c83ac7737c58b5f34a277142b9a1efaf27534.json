{"sha": "2c8c83ac7737c58b5f34a277142b9a1efaf27534", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM4YzgzYWM3NzM3YzU4YjVmMzRhMjc3MTQyYjlhMWVmYWYyNzUzNA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-12-15T04:35:31Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-12-15T04:35:31Z"}, "message": "PR middle-end/78519 - missing warning for sprintf %s with null pointer\n\ngcc/ChangeLog:\n\n\tPR middle-end/78519\n\t* gimple-ssa-sprintf.c (format_string): Handle null pointers.\n\t(format_directive): Diagnose null pointer arguments.\n\t(pass_sprintf_length::handle_gimple_call): Diagnose null destination\n\tpointers.  Correct location of null format string in diagnostics.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/78519\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-7.c: New test.\n\nFrom-SVN: r243684", "tree": {"sha": "027946fe285d26835aee90e1372257c41e6f4748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/027946fe285d26835aee90e1372257c41e6f4748"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c8c83ac7737c58b5f34a277142b9a1efaf27534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c8c83ac7737c58b5f34a277142b9a1efaf27534", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c8c83ac7737c58b5f34a277142b9a1efaf27534", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c8c83ac7737c58b5f34a277142b9a1efaf27534/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1750f2a55a7f17c557fa591691a15c363181fa80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1750f2a55a7f17c557fa591691a15c363181fa80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1750f2a55a7f17c557fa591691a15c363181fa80"}], "stats": {"total": 161, "additions": 156, "deletions": 5}, "files": [{"sha": "35123f0f77c3d978fd077020839966960d0e9782", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8c83ac7737c58b5f34a277142b9a1efaf27534/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8c83ac7737c58b5f34a277142b9a1efaf27534/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c8c83ac7737c58b5f34a277142b9a1efaf27534", "patch": "@@ -1,3 +1,11 @@\n+2016-12-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/78519\n+\t* gimple-ssa-sprintf.c (format_string): Handle null pointers.\n+\t(format_directive): Diagnose null pointer arguments.\n+\t(pass_sprintf_length::handle_gimple_call): Diagnose null destination\n+\tpointers.  Correct location of null format string in diagnostics.\n+\n 2016-12-14  David Malcolm  <dmalcolm@redhat.com>\n \n \t* Makefile.in (SELFTEST_FLAGS): Add path argument to -fself-test."}, {"sha": "a91dcb8fc0b1668d744a09dfde74dc52bc1c9806", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8c83ac7737c58b5f34a277142b9a1efaf27534/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8c83ac7737c58b5f34a277142b9a1efaf27534/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=2c8c83ac7737c58b5f34a277142b9a1efaf27534", "patch": "@@ -439,7 +439,7 @@ struct result_range\n struct fmtresult\n {\n   fmtresult ()\n-  : argmin (), argmax (), knownrange (), bounded (), constant ()\n+  : argmin (), argmax (), knownrange (), bounded (), constant (), nullp ()\n   {\n     range.min = range.max = HOST_WIDE_INT_MAX;\n   }\n@@ -467,6 +467,9 @@ struct fmtresult\n      are also constant (such as determined by constant propagation,\n      though not value range propagation).  */\n   bool constant;\n+\n+  /* True when the argument is a null pointer.  */\n+  bool nullp;\n };\n \n /* Description of a conversion specification.  */\n@@ -1765,6 +1768,16 @@ format_string (const conversion_spec &spec, tree arg)\n \t      res.range.min = 0;\n \t    }\n \t}\n+      else if (arg && integer_zerop (arg))\n+\t{\n+\t  /* Handle null pointer argument.  */\n+\n+\t  fmtresult res;\n+\t  res.range.min = 0;\n+\t  res.range.max = HOST_WIDE_INT_MAX;\n+\t  res.nullp = true;\n+\t  return res;\n+\t}\n       else\n \t{\n \t  /* For a '%s' and '%ls' directive with a non-constant string,\n@@ -1910,13 +1923,27 @@ format_directive (const pass_sprintf_length::call_info &info,\n \t}\n     }\n \n+  if (fmtres.nullp)\n+    {\n+      fmtwarn (dirloc, pargrange, NULL,\n+\t       OPT_Wformat_length_,\n+\t       \"%<%.*s%> directive argument is null\",\n+\t       (int)cvtlen, cvtbeg);\n+\n+      /* Don't bother processing the rest of the format string.  */\n+      res->warned = true;\n+      res->number_chars = HOST_WIDE_INT_M1U;\n+      res->number_chars_min = res->number_chars_max = res->number_chars;\n+      return;\n+    }\n+\n+  bool warned = res->warned;\n+\n   /* Compute the number of available bytes in the destination.  There\n      must always be at least one byte of space for the terminating\n      NUL that's appended after the format string has been processed.  */\n   unsigned HOST_WIDE_INT navail = min_bytes_remaining (info.objsize, *res);\n \n-  bool warned = res->warned;\n-\n   if (fmtres.range.min < fmtres.range.max)\n     {\n       /* The result is a range (i.e., it's inexact).  */\n@@ -2871,14 +2898,17 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator *gsi)\n       return;\n     }\n \n+  /* The first argument is a pointer to the destination.  */\n+  tree dstptr = gimple_call_arg (info.callstmt, 0);\n+\n   info.format = gimple_call_arg (info.callstmt, idx_format);\n \n   if (idx_dstsize == HOST_WIDE_INT_M1U)\n     {\n       /* For non-bounded functions like sprintf, determine the size\n \t of the destination from the object or pointer passed to it\n \t as the first argument.  */\n-      dstsize = get_destination_size (gimple_call_arg (info.callstmt, 0));\n+      dstsize = get_destination_size (dstptr);\n     }\n   else if (tree size = gimple_call_arg (info.callstmt, idx_dstsize))\n     {\n@@ -2948,6 +2978,20 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator *gsi)\n     }\n   else\n     {\n+      /* For calls to non-bounded functions or to those of bounded\n+\t functions with a non-zero size, warn if the destination\n+\t pointer is null.  */\n+      if (integer_zerop (dstptr))\n+\t{\n+\t  /* This is diagnosed with -Wformat only when the null is a constant\n+\t     pointer.  The warning here diagnoses instances where the pointer\n+\t     is not constant.  */\n+\t  location_t loc = gimple_location (info.callstmt);\n+\t  warning_at (EXPR_LOC_OR_LOC (dstptr, loc),\n+\t\t      OPT_Wformat_length_, \"null destination pointer\");\n+\t  return;\n+\t}\n+\n       /* Set the object size to the smaller of the two arguments\n \t of both have been specified and they're not equal.  */\n       info.objsize = dstsize < objsize ? dstsize : objsize;\n@@ -2971,7 +3015,8 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator *gsi)\n       /* This is diagnosed with -Wformat only when the null is a constant\n \t pointer.  The warning here diagnoses instances where the pointer\n \t is not constant.  */\n-      warning_at (EXPR_LOC_OR_LOC (info.format, input_location),\n+      location_t loc = gimple_location (info.callstmt);\n+      warning_at (EXPR_LOC_OR_LOC (info.format, loc),\n \t\t  OPT_Wformat_length_, \"null format string\");\n       return;\n     }"}, {"sha": "f23ccd6ba24b4dc10af2f5bd8a66df4020b32ba2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8c83ac7737c58b5f34a277142b9a1efaf27534/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8c83ac7737c58b5f34a277142b9a1efaf27534/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c8c83ac7737c58b5f34a277142b9a1efaf27534", "patch": "@@ -1,3 +1,8 @@\n+2016-12-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/78519\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-7.c: New test.\n+\n 2016-12-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/78774"}, {"sha": "2550065549d919771bed1564e2da41106b15fd69", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-8.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c8c83ac7737c58b5f34a277142b9a1efaf27534/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c8c83ac7737c58b5f34a277142b9a1efaf27534/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-8.c?ref=2c8c83ac7737c58b5f34a277142b9a1efaf27534", "patch": "@@ -0,0 +1,93 @@\n+/* PR middle-end/78519 - missing warning for sprintf %s with null pointer\n+   Also exercises null destination pointer and null format string.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wformat -Wformat-length -Wno-nonnull -ftrack-macro-expansion=0\" } */\n+\n+typedef __builtin_va_list va_list;\n+\n+#define sprintf   __builtin_sprintf\n+#define snprintf  __builtin_snprintf\n+#define vsprintf  __builtin_vsprintf\n+#define vsnprintf __builtin_vsnprintf\n+\n+\n+static char* null (void)\n+{\n+  return 0;\n+}\n+\n+\n+void sink (int);\n+#define T sink\n+\n+\n+/* Verify that calls with a null destination pointer are diagnosed.  */\n+\n+void test_null_dest (va_list va)\n+{\n+  char *p = null ();\n+  T (sprintf (null (), \"%i\", 0));   /* { dg-warning \"null destination pointer\" } */\n+  T (sprintf (p, \"%i\", 0));         /* { dg-warning \"null destination pointer\" } */\n+  T (sprintf (p, \"%i abc\", 0));     /* { dg-warning \"null destination pointer\" } */\n+\n+  T (snprintf (null (), 1, \"%i\", 0));   /* { dg-warning \"null destination pointer\" } */\n+  T (snprintf (p, 2, \"%i\", 0));         /* { dg-warning \"null destination pointer\" } */\n+  T (snprintf (p, 3, \"%i abc\", 0));     /* { dg-warning \"null destination pointer\" } */\n+\n+  /* Snprintf with a null pointer and a zero size is a special request\n+     to determine the size of output without writing any.  Such calls\n+     are valid must not be diagnosed.  */\n+  T (snprintf (p, 0, \"%i\", 0));\n+\n+  T (vsprintf (null (), \"%i\", va)); /* { dg-warning \"null destination pointer\" } */\n+  T (vsprintf (p,       \"%i\", va)); /* { dg-warning \"null destination pointer\" } */\n+\n+  T (vsnprintf (null (), 1, \"%i\", va)); /* { dg-warning \"null destination pointer\" } */\n+  T (vsnprintf (p,       2, \"%i\", va));       /* { dg-warning \"null destination pointer\" } */\n+  T (vsnprintf (p,       0, \"%i\", va));\n+}\n+\n+void test_null_format (char *d, va_list va)\n+{\n+  char *fmt = null ();\n+\n+  T (sprintf (d, null ()));    /* { dg-warning \"null format string\" } */\n+  T (sprintf (d, fmt));        /* { dg-warning \"null format string\" } */\n+\n+  T (snprintf (d, 0, null ()));    /* { dg-warning \"null format string\" } */\n+  T (snprintf (d, 1, fmt));        /* { dg-warning \"null format string\" } */\n+\n+  T (vsprintf (d, null (), va));   /* { dg-warning \"null format string\" } */\n+  T (vsprintf (d, fmt, va));       /* { dg-warning \"null format string\" } */\n+\n+  T (vsnprintf (d, 0, null (), va));  /* { dg-warning \"null format string\" } */\n+  T (vsnprintf (d, 1, fmt, va));      /* { dg-warning \"null format string\" } */\n+}\n+\n+void test_null_arg (char *d, const char *s)\n+{\n+  char *p = null ();\n+\n+  T (sprintf (d, \"%-s\", null ()));  /* { dg-warning \"directive argument is null\" } */\n+  T (sprintf (d, \"%-s\", p));        /* { dg-warning \"directive argument is null\" } */\n+  T (sprintf (d, \"%s %s\", p, s));   /* { dg-warning \"directive argument is null\" } */\n+  T (sprintf (d, \"%s %s\", s, p));   /* { dg-warning \"directive argument is null\" } */\n+  T (sprintf (d, \"%s %i\", p, 1));   /* { dg-warning \"directive argument is null\" } */\n+  T (sprintf (d, \"%i %s\", 1, p));   /* { dg-warning \"directive argument is null\" } */\n+  T (sprintf (d, \"%.0s\", p));       /* { dg-warning \"directive argument is null\" } */\n+  T (sprintf (d, \"%1.0s\", p));      /* { dg-warning \"directive argument is null\" } */\n+\n+  T (snprintf (d, 0, \"%-s\", null ()));  /* { dg-warning \"directive argument is null\" } */\n+  T (snprintf (d, 1, \"%-s\", p));        /* { dg-warning \"directive argument is null\" } */\n+\n+  T (sprintf (d, \"%i %s\", 1, null ()));  /* { dg-warning \"directive argument is null\" } */\n+  T (sprintf (d, \"%i %s\", 2, p));        /* { dg-warning \"directive argument is null\" } */\n+\n+  T (snprintf (d, 0, \"%i %s\", 1, null ()));  /* { dg-warning \"directive argument is null\" } */\n+  T (snprintf (d, 9, \"%i %s\", 2, p));        /* { dg-warning \"directive argument is null\" } */\n+\n+  /* A sanity check that the %p directive doesn't emit a warning\n+     with a null pointer.  */\n+  T (sprintf (d, \"%p\", null ()));\n+  T (sprintf (d, \"%p\", p));\n+}"}]}