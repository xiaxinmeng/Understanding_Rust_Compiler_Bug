{"sha": "2cdece442dfe6cb678193e67b395ad4e7b2942c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNkZWNlNDQyZGZlNmNiNjc4MTkzZTY3YjM5NWFkNGU3YjI5NDJjNQ==", "commit": {"author": {"name": "Wolfgang Gellerich", "email": "gellerich@de.ibm.com", "date": "2009-09-04T10:11:00Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2009-09-04T10:11:00Z"}, "message": "2097.md: Removed two incorrect bypasses.\n\n2009-09-04  Wolfgang Gellerich  <gellerich@de.ibm.com>\n\n\t* config/s390/2097.md: Removed two incorrect bypasses.\n\t(z10_fsimpdf): Fixed latency.\n\t(z10_fhex): New insn_reservation.\n\t(z10_floaddf): Fixed latency.\n\t(z10_floadsf): Fixed latency.\n\t(z10_ftrunctf): Fixed latency.\n\t(z10_ftruncdf): Fixed latency.\n\t* config/s390/s390.c (z10_cost): Fixed values.\n\t(s390_adjust_priority): Added z10 path.\n\t* config/s390/s390.md (type): Added fhex.\n\t(*mov<mode>_64dfp): Updated type attribute.\n\t(*mov<mode>_64): Updated type attribute.\n\t(*mov<mode>_31): Updated type attribute.\n\t(*mov<mode>\"): Likewise.\n\t* config/s390/2084.md (x_fsimpdf): Updated condition.\n\nFrom-SVN: r151419", "tree": {"sha": "f851dad1a91307218e0f509b6f5a80d5dba3d757", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f851dad1a91307218e0f509b6f5a80d5dba3d757"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cdece442dfe6cb678193e67b395ad4e7b2942c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cdece442dfe6cb678193e67b395ad4e7b2942c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cdece442dfe6cb678193e67b395ad4e7b2942c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cdece442dfe6cb678193e67b395ad4e7b2942c5/comments", "author": null, "committer": null, "parents": [{"sha": "aa4042b15e41234db89dd6e158d83773cf4be3bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4042b15e41234db89dd6e158d83773cf4be3bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4042b15e41234db89dd6e158d83773cf4be3bc"}], "stats": {"total": 78, "additions": 52, "deletions": 26}, "files": [{"sha": "994c36a284d2bd502d3245427798fcf159d48cdd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cdece442dfe6cb678193e67b395ad4e7b2942c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cdece442dfe6cb678193e67b395ad4e7b2942c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2cdece442dfe6cb678193e67b395ad4e7b2942c5", "patch": "@@ -1,3 +1,21 @@\n+2009-09-04  Wolfgang Gellerich  <gellerich@de.ibm.com>\n+\n+\t* config/s390/2097.md: Removed two incorrect bypasses.\n+\t(z10_fsimpdf): Fixed latency.\n+\t(z10_fhex): New insn_reservation.\n+\t(z10_floaddf): Fixed latency.\n+\t(z10_floadsf): Fixed latency.\n+\t(z10_ftrunctf): Fixed latency.\n+\t(z10_ftruncdf): Fixed latency.\n+\t* config/s390/s390.c (z10_cost): Fixed values.\n+\t(s390_adjust_priority): Added z10 path.\n+\t* config/s390/s390.md (type): Added fhex.\n+\t(*mov<mode>_64dfp): Updated type attribute.\n+\t(*mov<mode>_64): Updated type attribute.\n+\t(*mov<mode>_31): Updated type attribute.\n+\t(*mov<mode>\"): Likewise.\n+\t* config/s390/2084.md (x_fsimpdf): Updated condition.\n+\n 2009-09-04  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.md (\"*fmadd<mode>\", \"*fmsub<mode>\"): Enable mem"}, {"sha": "bedc5c322ba48a0b7ac05a49d2ed44262dc7b274", "filename": "gcc/config/s390/2084.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cdece442dfe6cb678193e67b395ad4e7b2942c5/gcc%2Fconfig%2Fs390%2F2084.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cdece442dfe6cb678193e67b395ad4e7b2942c5/gcc%2Fconfig%2Fs390%2F2084.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2084.md?ref=2cdece442dfe6cb678193e67b395ad4e7b2942c5", "patch": "@@ -163,17 +163,17 @@\n \n (define_insn_reservation \"x_fsimptf\" 7\n   (and (eq_attr \"cpu\" \"z990,z9_109\")\n-       (eq_attr \"type\" \"fsimptf\"))\n+       (eq_attr \"type\" \"fsimptf,fhex\"))\n   \"x_e1_t*2,x-wr-fp\")\n \n (define_insn_reservation \"x_fsimpdf\" 6\n   (and (eq_attr \"cpu\" \"z990,z9_109\")\n-       (eq_attr \"type\" \"fsimpdf,fmuldf\"))\n+       (eq_attr \"type\" \"fsimpdf,fmuldf,fhex\"))\n   \"x_e1_t,x-wr-fp\")\n \n (define_insn_reservation \"x_fsimpsf\" 6\n   (and (eq_attr \"cpu\" \"z990,z9_109\")\n-       (eq_attr \"type\" \"fsimpsf,fmulsf\"))\n+       (eq_attr \"type\" \"fsimpsf,fmulsf,fhex\"))\n   \"x_e1_t,x-wr-fp\")\n \n "}, {"sha": "eb7240effd4f5cb5bb263a329d0c887308917903", "filename": "gcc/config/s390/2097.md", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cdece442dfe6cb678193e67b395ad4e7b2942c5/gcc%2Fconfig%2Fs390%2F2097.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cdece442dfe6cb678193e67b395ad4e7b2942c5/gcc%2Fconfig%2Fs390%2F2097.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2097.md?ref=2cdece442dfe6cb678193e67b395ad4e7b2942c5", "patch": "@@ -463,29 +463,34 @@\n \n ; BFP multiplication and general instructions\n \n-(define_insn_reservation \"z10_fsimpdf\" 12\n+(define_insn_reservation \"z10_fsimpdf\" 6\n   (and (eq_attr \"cpu\" \"z10\")\n        (eq_attr \"type\" \"fsimpdf,fmuldf\"))\n   \"z10_e1_BOTH, z10_Gate_FP\")\n-; Wg \"z10_e1_T, z10_Gate_FP\")\n \n-(define_insn_reservation \"z10_fsimpsf\" 12\n+; LOAD ZERO produces a hex value but we need bin. Using the stage 7\n+; bypass causes an exception for format conversion which is very\n+; expensive. So, make sure subsequent instructions only get the zero\n+; in the normal way.\n+(define_insn_reservation \"z10_fhex\" 12\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fhex\"))\n+  \"z10_e1_BOTH, z10_Gate_FP\")\n+\n+(define_insn_reservation \"z10_fsimpsf\" 6\n   (and (eq_attr \"cpu\" \"z10\")\n        (eq_attr \"type\" \"fsimpsf,fmulsf\"))\n   \"z10_e1_BOTH, z10_Gate_FP\")\n-; Wg \"z10_e1_T, z10_Gate_FP\")\n \n (define_insn_reservation \"z10_fmultf\" 52\n   (and (eq_attr \"cpu\" \"z10\")\n        (eq_attr \"type\" \"fmultf\"))\n   \"z10_e1_BOTH*4, z10_Gate_FP\")\n-; Wg  \"z10_e1_T*4, z10_Gate_FP\")\n \n (define_insn_reservation \"z10_fsimptf\" 14\n   (and (eq_attr \"cpu\" \"z10\")\n        (eq_attr \"type\" \"fsimptf\"))\n   \"z10_e1_BOTH*2, z10_Gate_FP\")\n-; Wg  \"z10_e1_T*2, z10_Gate_FP\")\n \n \n ; BFP division\n@@ -531,12 +536,12 @@\n        (eq_attr \"type\" \"floadtf\"))\n   \"z10_e1_T, z10_Gate_FP\")\n \n-(define_insn_reservation \"z10_floaddf\" 12\n+(define_insn_reservation \"z10_floaddf\" 1\n   (and (eq_attr \"cpu\" \"z10\")\n        (eq_attr \"type\" \"floaddf\"))\n   \"z10_e1_T, z10_Gate_FP\")\n \n-(define_insn_reservation \"z10_floadsf\" 12\n+(define_insn_reservation \"z10_floadsf\" 1\n   (and (eq_attr \"cpu\" \"z10\")\n        (eq_attr \"type\" \"floadsf\"))\n   \"z10_e1_T, z10_Gate_FP\")\n@@ -553,12 +558,12 @@\n \n \n ; BFP truncate\n-(define_insn_reservation \"z10_ftrunctf\" 12\n+(define_insn_reservation \"z10_ftrunctf\" 16\n   (and (eq_attr \"cpu\" \"z10\")\n        (eq_attr \"type\" \"ftrunctf\"))\n   \"z10_e1_T, z10_Gate_FP\")\n \n-(define_insn_reservation \"z10_ftruncdf\" 16\n+(define_insn_reservation \"z10_ftruncdf\" 12\n   (and (eq_attr \"cpu\" \"z10\")\n        (eq_attr \"type\" \"ftruncdf\"))\n   \"z10_e1_T, z10_Gate_FP\")\n@@ -585,8 +590,8 @@\n ; BFP-related bypasses.  There is no bypass for extended mode.\n (define_bypass 1 \"z10_fsimpdf\" \"z10_fstoredf\")\n (define_bypass 1 \"z10_fsimpsf\" \"z10_fstoresf\")\n-(define_bypass 1 \"z10_floaddf\" \"z10_fsimpdf, z10_fstoredf, z10_floaddf\")\n-(define_bypass 1 \"z10_floadsf\" \"z10_fsimpsf, z10_fstoresf, z10_floadsf\")\n+(define_bypass 1 \"z10_floaddf\" \"z10_fsimpdf, z10_fstoredf\")\n+(define_bypass 1 \"z10_floadsf\" \"z10_fsimpsf, z10_fstoresf\")\n \n \n ;"}, {"sha": "a4ac3a38b6b2dc27f6ee68cab1bfc7a9b6b2a76b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cdece442dfe6cb678193e67b395ad4e7b2942c5/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cdece442dfe6cb678193e67b395ad4e7b2942c5/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=2cdece442dfe6cb678193e67b395ad4e7b2942c5", "patch": "@@ -205,13 +205,13 @@ struct processor_costs z10_cost =\n   COSTS_N_INSNS (10),    /* MSGFR */\n   COSTS_N_INSNS (10),    /* MSGR  */\n   COSTS_N_INSNS (10),    /* MSR   */\n-  COSTS_N_INSNS (10),    /* multiplication in DFmode */\n+  COSTS_N_INSNS (1) ,    /* multiplication in DFmode */\n   COSTS_N_INSNS (50),    /* MXBR */\n   COSTS_N_INSNS (120),   /* SQXBR */\n   COSTS_N_INSNS (52),    /* SQDBR */\n   COSTS_N_INSNS (38),    /* SQEBR */\n-  COSTS_N_INSNS (10),    /* MADBR */\n-  COSTS_N_INSNS (10),    /* MAEBR */\n+  COSTS_N_INSNS (1),     /* MADBR */\n+  COSTS_N_INSNS (1),     /* MAEBR */\n   COSTS_N_INSNS (111),   /* DXBR */\n   COSTS_N_INSNS (39),    /* DDBR */\n   COSTS_N_INSNS (32),    /* DEBR */\n@@ -5297,14 +5297,16 @@ s390_agen_dep_p (rtx dep_insn, rtx insn)\n    A STD instruction should be scheduled earlier,\n    in order to use the bypass.  */\n \n+\n static int\n s390_adjust_priority (rtx insn ATTRIBUTE_UNUSED, int priority)\n {\n   if (! INSN_P (insn))\n     return priority;\n \n   if (s390_tune != PROCESSOR_2084_Z990\n-      && s390_tune != PROCESSOR_2094_Z9_109)\n+      && s390_tune != PROCESSOR_2094_Z9_109\n+      && s390_tune != PROCESSOR_2097_Z10)\n     return priority;\n \n   switch (s390_safe_attr_type (insn))\n@@ -5323,6 +5325,7 @@ s390_adjust_priority (rtx insn ATTRIBUTE_UNUSED, int priority)\n   return priority;\n }\n \n+\n /* The number of instructions that can be issued per cycle.  */\n \n static int"}, {"sha": "db326ee766c075a54144938c30ab573f2d1aeaac", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cdece442dfe6cb678193e67b395ad4e7b2942c5/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cdece442dfe6cb678193e67b395ad4e7b2942c5/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=2cdece442dfe6cb678193e67b395ad4e7b2942c5", "patch": "@@ -202,7 +202,7 @@\n (define_attr \"type\" \"none,integer,load,lr,la,larl,lm,stm,\n \t             cs,vs,store,sem,idiv,\n                      imulhi,imulsi,imuldi,\n-\t\t     branch,jsr,fsimptf,fsimpdf,fsimpsf,\n+\t\t     branch,jsr,fsimptf,fsimpdf,fsimpsf,fhex,\n \t\t     floadtf,floaddf,floadsf,fstoredf,fstoresf,\n \t\t     fmultf,fmuldf,fmulsf,fdivtf,fdivdf,fdivsf,\n \t\t     ftoi,fsqrttf,fsqrtdf,fsqrtsf,\n@@ -1937,7 +1937,7 @@\n    #\n    #\"\n   [(set_attr \"op_type\" \"RRE,RRE,*,*,RSY,RSY,*,*\")\n-   (set_attr \"type\"    \"fsimptf,fsimptf,*,*,lm,stm,*,*\")])\n+   (set_attr \"type\"    \"fhex,fsimptf,*,*,lm,stm,*,*\")])\n \n (define_insn \"*mov<mode>_31\"\n   [(set (match_operand:TD_TF 0 \"nonimmediate_operand\" \"=f,f,f,o\")\n@@ -1949,7 +1949,7 @@\n    #\n    #\"\n   [(set_attr \"op_type\" \"RRE,RRE,*,*\")\n-   (set_attr \"type\"    \"fsimptf,fsimptf,*,*\")])\n+   (set_attr \"type\"    \"fhex,fsimptf,*,*\")])\n \n ; TFmode in GPRs splitters\n \n@@ -2057,7 +2057,7 @@\n    lg\\t%0,%1\n    stg\\t%1,%0\"\n   [(set_attr \"op_type\" \"RRE,RR,RRE,RRE,RX,RXY,RX,RXY,RRE,RXY,RXY\")\n-   (set_attr \"type\" \"fsimpdf,floaddf,floaddf,floaddf,floaddf,floaddf,\n+   (set_attr \"type\" \"fhex,floaddf,floaddf,floaddf,floaddf,floaddf,\n                      fstoredf,fstoredf,lr,load,store\")\n    (set_attr \"z10prop\" \"*,\n                         *,\n@@ -2087,7 +2087,7 @@\n    lg\\t%0,%1\n    stg\\t%1,%0\"\n   [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RRE,RXY,RXY\")\n-   (set_attr \"type\" \"fsimp<mode>,fload<mode>,fload<mode>,fload<mode>,\n+   (set_attr \"type\" \"fhex,fload<mode>,fload<mode>,fload<mode>,\n                      fstore<mode>,fstore<mode>,lr,load,store\")\n    (set_attr \"z10prop\" \"*,\n                         *,\n@@ -2119,7 +2119,7 @@\n    #\n    #\"\n   [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RS,RSY,RS,RSY,*,*\")\n-   (set_attr \"type\" \"fsimp<mode>,fload<mode>,fload<mode>,fload<mode>,\n+   (set_attr \"type\" \"fhex,fload<mode>,fload<mode>,fload<mode>,\n                      fstore<mode>,fstore<mode>,lm,lm,stm,stm,*,*\")])\n \n (define_split\n@@ -2186,7 +2186,7 @@\n    st\\t%1,%0\n    sty\\t%1,%0\"\n   [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RR,RX,RXY,RX,RXY\")\n-   (set_attr \"type\" \"fsimp<mode>,fload<mode>,fload<mode>,fload<mode>,\n+   (set_attr \"type\" \"fhex,fload<mode>,fload<mode>,fload<mode>,\n                      fstore<mode>,fstore<mode>,lr,load,load,store,store\")\n    (set_attr \"z10prop\" \"*,\n                         *,"}]}