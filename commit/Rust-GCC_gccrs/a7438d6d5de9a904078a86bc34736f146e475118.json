{"sha": "a7438d6d5de9a904078a86bc34736f146e475118", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc0MzhkNmQ1ZGU5YTkwNDA3OGE4NmJjMzQ3MzZmMTQ2ZTQ3NTExOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-03-12T21:30:21Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-03-12T21:30:21Z"}, "message": "i386.md (int_cond): New code iterator.\n\n        * config/i386/i386.md (int_cond): New code iterator.\n        (fp_cond): Ditto.\n        (\"s<code>\"): Macroize expander from seq, sne, sgt, sgtu, slt, sltu,\n        sge, sgeu, sle and sleu expanders usign int_cond code iterator.\n        (\"s<code>\"): Macroize expander from sunordered, sordered, suneq, sunge,\n        sungt, sunle, sunlt and sltgt expanders usign fp_cond code iterator.\n        (\"b<code>\"): Macroize expander from beq, bne, bgt, bgtu, blt, bltu,\n        bge, bgeu, ble and bleu expanders usign int_cond code iterator.\n        (\"b<code>\"): Macroize expander from bunordered, bordered, buneq, bunge,\n        bungt, bunle, bunlt and bltgt expanders usign fp_cond code iterator.\n\nFrom-SVN: r133150", "tree": {"sha": "3e9fcc00687525ed388f8e844ed98dfc89bfbeb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e9fcc00687525ed388f8e844ed98dfc89bfbeb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7438d6d5de9a904078a86bc34736f146e475118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7438d6d5de9a904078a86bc34736f146e475118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7438d6d5de9a904078a86bc34736f146e475118", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7438d6d5de9a904078a86bc34736f146e475118/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "954954d139a52ed7a9a305d5ac09bb3323b67a95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/954954d139a52ed7a9a305d5ac09bb3323b67a95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/954954d139a52ed7a9a305d5ac09bb3323b67a95"}], "stats": {"total": 274, "additions": 36, "deletions": 238}, "files": [{"sha": "618cb8ed3bcdee793cb3a4a431ab04846763df63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7438d6d5de9a904078a86bc34736f146e475118/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7438d6d5de9a904078a86bc34736f146e475118/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7438d6d5de9a904078a86bc34736f146e475118", "patch": "@@ -1,3 +1,16 @@\n+2008-03-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (int_cond): New code iterator.\n+\t(fp_cond): Ditto.\n+\t(\"s<code>\"): Macroize expander from seq, sne, sgt, sgtu, slt, sltu,\n+\tsge, sgeu, sle and sleu expanders usign int_cond code iterator.\n+\t(\"s<code>\"): Macroize expander from sunordered, sordered, suneq, sunge,\n+\tsungt, sunle, sunlt and sltgt expanders usign fp_cond code iterator.\n+\t(\"b<code>\"): Macroize expander from beq, bne, bgt, bgtu, blt, bltu,\n+\tbge, bgeu, ble and bleu expanders usign int_cond code iterator.\n+\t(\"b<code>\"): Macroize expander from bunordered, bordered, buneq, bunge,\n+\tbungt, bunle, bunlt and bltgt expanders usign fp_cond code iterator.\n+\n 2008-03-12  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.c (use_return_insn): Use offsets->saved_regs_mask"}, {"sha": "4d4978d778b0f0d842810a472c608fd13ba75d3e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 23, "deletions": 238, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7438d6d5de9a904078a86bc34736f146e475118/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7438d6d5de9a904078a86bc34736f146e475118/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a7438d6d5de9a904078a86bc34736f146e475118", "patch": "@@ -515,6 +515,13 @@\n   [(set_attr \"length\" \"128\")\n    (set_attr \"type\" \"multi\")])\n \n+;; All integer comparison codes.\n+(define_code_iterator int_cond [ne eq ge gt le lt geu gtu leu ltu ])\n+\n+;; All floating-point comparison codes.\n+(define_code_iterator fp_cond [unordered ordered\n+\t\t\t       uneq unge ungt unle unlt ltgt ])\n+\n (define_code_iterator plusminus [plus minus])\n \n ;; Base name for define_insn and insn mnemonic.\n@@ -13762,113 +13769,17 @@\n ;; to avoid partial register stalls.  Otherwise do things the setcc+movzx\n ;; way, which can later delete the movzx if only QImode is needed.\n \n-(define_expand \"seq\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (eq:QI (reg:CC FLAGS_REG) (const_int 0)))]\n-  \"\"\n-  \"if (ix86_expand_setcc (EQ, operands[0])) DONE; else FAIL;\")\n-\n-(define_expand \"sne\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (ne:QI (reg:CC FLAGS_REG) (const_int 0)))]\n-  \"\"\n-  \"if (ix86_expand_setcc (NE, operands[0])) DONE; else FAIL;\")\n-\n-(define_expand \"sgt\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (gt:QI (reg:CC FLAGS_REG) (const_int 0)))]\n-  \"\"\n-  \"if (ix86_expand_setcc (GT, operands[0])) DONE; else FAIL;\")\n-\n-(define_expand \"sgtu\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (gtu:QI (reg:CC FLAGS_REG) (const_int 0)))]\n-  \"\"\n-  \"if (ix86_expand_setcc (GTU, operands[0])) DONE; else FAIL;\")\n-\n-(define_expand \"slt\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (lt:QI (reg:CC FLAGS_REG) (const_int 0)))]\n-  \"\"\n-  \"if (ix86_expand_setcc (LT, operands[0])) DONE; else FAIL;\")\n-\n-(define_expand \"sltu\"\n+(define_expand \"s<code>\"\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (ltu:QI (reg:CC FLAGS_REG) (const_int 0)))]\n+        (int_cond:QI (reg:CC FLAGS_REG) (const_int 0)))]\n   \"\"\n-  \"if (ix86_expand_setcc (LTU, operands[0])) DONE; else FAIL;\")\n-\n-(define_expand \"sge\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (ge:QI (reg:CC FLAGS_REG) (const_int 0)))]\n-  \"\"\n-  \"if (ix86_expand_setcc (GE, operands[0])) DONE; else FAIL;\")\n-\n-(define_expand \"sgeu\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (geu:QI (reg:CC FLAGS_REG) (const_int 0)))]\n-  \"\"\n-  \"if (ix86_expand_setcc (GEU, operands[0])) DONE; else FAIL;\")\n-\n-(define_expand \"sle\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (le:QI (reg:CC FLAGS_REG) (const_int 0)))]\n-  \"\"\n-  \"if (ix86_expand_setcc (LE, operands[0])) DONE; else FAIL;\")\n-\n-(define_expand \"sleu\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (leu:QI (reg:CC FLAGS_REG) (const_int 0)))]\n-  \"\"\n-  \"if (ix86_expand_setcc (LEU, operands[0])) DONE; else FAIL;\")\n-\n-(define_expand \"sunordered\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (unordered:QI (reg:CC FLAGS_REG) (const_int 0)))]\n-  \"TARGET_80387 || TARGET_SSE\"\n-  \"if (ix86_expand_setcc (UNORDERED, operands[0])) DONE; else FAIL;\")\n-\n-(define_expand \"sordered\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (ordered:QI (reg:CC FLAGS_REG) (const_int 0)))]\n-  \"TARGET_80387\"\n-  \"if (ix86_expand_setcc (ORDERED, operands[0])) DONE; else FAIL;\")\n-\n-(define_expand \"suneq\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (uneq:QI (reg:CC FLAGS_REG) (const_int 0)))]\n-  \"TARGET_80387 || TARGET_SSE\"\n-  \"if (ix86_expand_setcc (UNEQ, operands[0])) DONE; else FAIL;\")\n-\n-(define_expand \"sunge\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (unge:QI (reg:CC FLAGS_REG) (const_int 0)))]\n-  \"TARGET_80387 || TARGET_SSE\"\n-  \"if (ix86_expand_setcc (UNGE, operands[0])) DONE; else FAIL;\")\n-\n-(define_expand \"sungt\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (ungt:QI (reg:CC FLAGS_REG) (const_int 0)))]\n-  \"TARGET_80387 || TARGET_SSE\"\n-  \"if (ix86_expand_setcc (UNGT, operands[0])) DONE; else FAIL;\")\n-\n-(define_expand \"sunle\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (unle:QI (reg:CC FLAGS_REG) (const_int 0)))]\n-  \"TARGET_80387 || TARGET_SSE\"\n-  \"if (ix86_expand_setcc (UNLE, operands[0])) DONE; else FAIL;\")\n-\n-(define_expand \"sunlt\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (unlt:QI (reg:CC FLAGS_REG) (const_int 0)))]\n-  \"TARGET_80387 || TARGET_SSE\"\n-  \"if (ix86_expand_setcc (UNLT, operands[0])) DONE; else FAIL;\")\n+  \"if (ix86_expand_setcc (<CODE>, operands[0])) DONE; else FAIL;\")\n \n-(define_expand \"sltgt\"\n+(define_expand \"s<code>\"\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n-        (ltgt:QI (reg:CC FLAGS_REG) (const_int 0)))]\n+        (fp_cond:QI (reg:CC FLAGS_REG) (const_int 0)))]\n   \"TARGET_80387 || TARGET_SSE\"\n-  \"if (ix86_expand_setcc (LTGT, operands[0])) DONE; else FAIL;\")\n+  \"if (ix86_expand_setcc (<CODE>, operands[0])) DONE; else FAIL;\")\n \n (define_insn \"*setcc_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n@@ -13990,149 +13901,23 @@\n ;; For all bCOND expanders, also expand the compare or test insn that\n ;; generates reg FLAGS_REG.  Generate an equality comparison if `beq' or `bne'.\n \n-(define_expand \"beq\"\n-  [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-  \"ix86_expand_branch (EQ, operands[0]); DONE;\")\n-\n-(define_expand \"bne\"\n-  [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-  \"ix86_expand_branch (NE, operands[0]); DONE;\")\n-\n-(define_expand \"bgt\"\n-  [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-  \"ix86_expand_branch (GT, operands[0]); DONE;\")\n-\n-(define_expand \"bgtu\"\n-  [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-  \"ix86_expand_branch (GTU, operands[0]); DONE;\")\n-\n-(define_expand \"blt\"\n+(define_expand \"b<code>\"\n   [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t(if_then_else (int_cond:CC (reg:CC FLAGS_REG)\n+\t\t\t\t   (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"ix86_expand_branch (LT, operands[0]); DONE;\")\n-\n-(define_expand \"bltu\"\n-  [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-  \"ix86_expand_branch (LTU, operands[0]); DONE;\")\n-\n-(define_expand \"bge\"\n-  [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-  \"ix86_expand_branch (GE, operands[0]); DONE;\")\n-\n-(define_expand \"bgeu\"\n-  [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-  \"ix86_expand_branch (GEU, operands[0]); DONE;\")\n-\n-(define_expand \"ble\"\n-  [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-  \"ix86_expand_branch (LE, operands[0]); DONE;\")\n-\n-(define_expand \"bleu\"\n-  [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-  \"ix86_expand_branch (LEU, operands[0]); DONE;\")\n-\n-(define_expand \"bunordered\"\n-  [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"TARGET_80387 || TARGET_SSE_MATH\"\n-  \"ix86_expand_branch (UNORDERED, operands[0]); DONE;\")\n-\n-(define_expand \"bordered\"\n-  [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"TARGET_80387 || TARGET_SSE_MATH\"\n-  \"ix86_expand_branch (ORDERED, operands[0]); DONE;\")\n-\n-(define_expand \"buneq\"\n-  [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"TARGET_80387 || TARGET_SSE_MATH\"\n-  \"ix86_expand_branch (UNEQ, operands[0]); DONE;\")\n-\n-(define_expand \"bunge\"\n-  [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"TARGET_80387 || TARGET_SSE_MATH\"\n-  \"ix86_expand_branch (UNGE, operands[0]); DONE;\")\n+  \"ix86_expand_branch (<CODE>, operands[0]); DONE;\")\n \n-(define_expand \"bungt\"\n+(define_expand \"b<code>\"\n   [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"TARGET_80387 || TARGET_SSE_MATH\"\n-  \"ix86_expand_branch (UNGT, operands[0]); DONE;\")\n-\n-(define_expand \"bunle\"\n-  [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"TARGET_80387 || TARGET_SSE_MATH\"\n-  \"ix86_expand_branch (UNLE, operands[0]); DONE;\")\n-\n-(define_expand \"bunlt\"\n-  [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"TARGET_80387 || TARGET_SSE_MATH\"\n-  \"ix86_expand_branch (UNLT, operands[0]); DONE;\")\n-\n-(define_expand \"bltgt\"\n-  [(set (pc)\n-\t(if_then_else (match_dup 1)\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t(if_then_else (fp_cond:CC (reg:CC FLAGS_REG)\n+\t\t\t\t  (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\"))\n \t\t      (pc)))]\n   \"TARGET_80387 || TARGET_SSE_MATH\"\n-  \"ix86_expand_branch (LTGT, operands[0]); DONE;\")\n+  \"ix86_expand_branch (<CODE>, operands[0]); DONE;\")\n \n (define_insn \"*jcc_1\"\n   [(set (pc)"}]}