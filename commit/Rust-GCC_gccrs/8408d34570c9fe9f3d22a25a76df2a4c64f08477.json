{"sha": "8408d34570c9fe9f3d22a25a76df2a4c64f08477", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQwOGQzNDU3MGM5ZmU5ZjNkMjJhMjVhNzZkZjJhNGM2NGYwODQ3Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-23T17:55:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-23T17:55:16Z"}, "message": "expmed: Fix store_integral_bit_field [PR101562]\n\nOur documentation says that paradoxical subregs shouldn't appear\nin strict_low_part:\n'(strict_low_part (subreg:M (reg:N R) 0))'\n     This expression code is used in only one context: as the\n     destination operand of a 'set' expression.  In addition, the\n     operand of this expression must be a non-paradoxical 'subreg'\n     expression.\nbut on the testcase below that triggers UB at runtime\nstore_integral_bit_field emits exactly that.\n\nThe following patch fixes it by ensuring the requirement is satisfied.\n\n2021-07-23  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/101562\n\t* expmed.c (store_integral_bit_field): Only use movstrict_optab\n\tif the operand isn't paradoxical.\n\n\t* gcc.c-torture/compile/pr101562.c: New test.", "tree": {"sha": "56c44ee871ca7bc2356294cde1beea3f503b0c86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56c44ee871ca7bc2356294cde1beea3f503b0c86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8408d34570c9fe9f3d22a25a76df2a4c64f08477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8408d34570c9fe9f3d22a25a76df2a4c64f08477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8408d34570c9fe9f3d22a25a76df2a4c64f08477", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8408d34570c9fe9f3d22a25a76df2a4c64f08477/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "435f90187eb4b6ddd66df692320057f303841ed6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435f90187eb4b6ddd66df692320057f303841ed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/435f90187eb4b6ddd66df692320057f303841ed6"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "3143f38e0570eabe56cf82c49fb84752d8e170f0", "filename": "gcc/expmed.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8408d34570c9fe9f3d22a25a76df2a4c64f08477/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8408d34570c9fe9f3d22a25a76df2a4c64f08477/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=8408d34570c9fe9f3d22a25a76df2a4c64f08477", "patch": "@@ -921,7 +921,10 @@ store_integral_bit_field (rtx op0, opt_scalar_int_mode op0_mode,\n \t}\n \n       subreg_off = bitnum / BITS_PER_UNIT;\n-      if (validate_subreg (fieldmode, GET_MODE (arg0), arg0, subreg_off))\n+      if (validate_subreg (fieldmode, GET_MODE (arg0), arg0, subreg_off)\n+\t  /* STRICT_LOW_PART must have a non-paradoxical subreg as\n+\t     operand.  */\n+\t  && !paradoxical_subreg_p (fieldmode, GET_MODE (arg0)))\n \t{\n \t  arg0 = gen_rtx_SUBREG (fieldmode, arg0, subreg_off);\n "}, {"sha": "ea4a5f7103a2938fe66d03aeebeed5cc9b6f0f06", "filename": "gcc/testsuite/gcc.c-torture/compile/pr101562.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8408d34570c9fe9f3d22a25a76df2a4c64f08477/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr101562.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8408d34570c9fe9f3d22a25a76df2a4c64f08477/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr101562.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr101562.c?ref=8408d34570c9fe9f3d22a25a76df2a4c64f08477", "patch": "@@ -0,0 +1,21 @@\n+/* PR rtl-optimization/101562 */\n+\n+struct S { char c; };\n+void baz (struct S a, struct S b);\n+\n+void\n+foo (void)\n+{\n+  struct S x[1];\n+  *(short *)&x[0] = 256;\n+  baz (x[0], x[1]);\n+}\n+\n+void\n+bar (void)\n+{\n+  struct S x[1];\n+  x[0].c = 0;\n+  x[1].c = 1;\n+  baz (x[0], x[1]);\n+}"}]}