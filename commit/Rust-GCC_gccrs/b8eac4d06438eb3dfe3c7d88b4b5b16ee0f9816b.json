{"sha": "b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhlYWM0ZDA2NDM4ZWIzZGZlM2M3ZDg4YjRiNWIxNmVlMGY5ODE2Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-08-15T19:46:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-08-15T19:46:25Z"}, "message": "Fix experimental::pmr typedefs and add tests\n\nThe typedefs in <experimental/regex> and <experimental/string> don't\nneed to be in the __cxx11 namespace, because they are only aliases and\nso will have the same mangled name as the underlying types.\n\n\t* include/experimental/regex: Remove begin/end macros for namespace.\n\t* include/experimental/string: Likewise.\n\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_deque.cc:\n\tNew test.\n\t* testsuite/experimental/polymorphic_allocator/\n\tpmr_typedefs_forward_list.cc: New test.\n\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_list.cc:\n\tNew test.\n\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_map.cc:\n\tNew test.\n\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_match.cc:\n\tNew test.\n\t* testsuite/experimental/polymorphic_allocator/\n\tpmr_typedefs_multimap.cc: New test.\n\t* testsuite/experimental/polymorphic_allocator/\n\tpmr_typedefs_multiset.cc: New test.\n\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_set.cc:\n\tNew test.\n\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_string.cc:\n\tNew test.\n\t* testsuite/experimental/polymorphic_allocator/\n\tpmr_typedefs_unordered_map.cc: New test.\n\t* testsuite/experimental/polymorphic_allocator/\n\tpmr_typedefs_unordered_multimap.cc: New test.\n\t* testsuite/experimental/polymorphic_allocator/\n\tpmr_typedefs_unordered_multiset.cc: New test.\n\t* testsuite/experimental/polymorphic_allocator/\n\tpmr_typedefs_unordered_set.cc: New test.\n\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_vector.cc:\n\tNew test.\n\nFrom-SVN: r263568", "tree": {"sha": "3ece792807a2d08e735ceead97c76aa4eaf19104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ece792807a2d08e735ceead97c76aa4eaf19104"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c8956e09adb63362e8596548f8631a26ac7ff9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8956e09adb63362e8596548f8631a26ac7ff9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c8956e09adb63362e8596548f8631a26ac7ff9b"}], "stats": {"total": 553, "additions": 546, "deletions": 7}, "files": [{"sha": "ce8ccaf621fbf0fcab98a1483697499e0d42fe25", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -1,5 +1,36 @@\n 2018-08-15  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/experimental/regex: Remove begin/end macros for namespace.\n+\t* include/experimental/string: Likewise.\n+\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_deque.cc:\n+\tNew test.\n+\t* testsuite/experimental/polymorphic_allocator/\n+\tpmr_typedefs_forward_list.cc: New test.\n+\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_list.cc:\n+\tNew test.\n+\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_map.cc:\n+\tNew test.\n+\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_match.cc:\n+\tNew test.\n+\t* testsuite/experimental/polymorphic_allocator/\n+\tpmr_typedefs_multimap.cc: New test.\n+\t* testsuite/experimental/polymorphic_allocator/\n+\tpmr_typedefs_multiset.cc: New test.\n+\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_set.cc:\n+\tNew test.\n+\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_string.cc:\n+\tNew test.\n+\t* testsuite/experimental/polymorphic_allocator/\n+\tpmr_typedefs_unordered_map.cc: New test.\n+\t* testsuite/experimental/polymorphic_allocator/\n+\tpmr_typedefs_unordered_multimap.cc: New test.\n+\t* testsuite/experimental/polymorphic_allocator/\n+\tpmr_typedefs_unordered_multiset.cc: New test.\n+\t* testsuite/experimental/polymorphic_allocator/\n+\tpmr_typedefs_unordered_set.cc: New test.\n+\t* testsuite/experimental/polymorphic_allocator/pmr_typedefs_vector.cc:\n+\tNew test.\n+\n \t* include/bits/uses_allocator.h (__uses_allocator_construct): Qualify\n \tcalls to __uses_allocator_construct_impl and __use_alloc.\n \t* include/experimental/memory_resource"}, {"sha": "eb2af151245f2e27ca235c501d7823d215445e03", "filename": "libstdc++-v3/include/experimental/regex", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fregex?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -46,8 +46,6 @@ inline namespace fundamentals_v2\n {\n namespace pmr\n {\n-_GLIBCXX_BEGIN_NAMESPACE_CXX11\n-\n   template<typename _BidirectionalIterator>\n     using match_results\n       = std::match_results<_BidirectionalIterator, polymorphic_allocator<\n@@ -58,7 +56,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   typedef match_results<string::const_iterator> smatch;\n   typedef match_results<wstring::const_iterator> wsmatch;\n \n-_GLIBCXX_END_NAMESPACE_CXX11\n } // namespace pmr\n \n } // namespace fundamentals_v2"}, {"sha": "f101255d6417a422046d1c849b78a06d7a9653b4", "filename": "libstdc++-v3/include/experimental/string", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -62,9 +62,8 @@ inline namespace fundamentals_v2\n \t\t   __cont.end());\n     }\n \n-  namespace pmr {\n-  _GLIBCXX_BEGIN_NAMESPACE_CXX11\n-\n+  namespace pmr\n+  {\n     // basic_string using polymorphic allocator in namespace pmr\n     template<typename _CharT, typename _Traits = char_traits<_CharT>>\n       using basic_string =\n@@ -77,7 +76,6 @@ inline namespace fundamentals_v2\n     typedef basic_string<char32_t> u32string;\n     typedef basic_string<wchar_t> wstring;\n \n-    _GLIBCXX_END_NAMESPACE_CXX11\n   } // namespace pmr\n } // namespace fundamentals_v2\n } // namespace experimental"}, {"sha": "2b475791bfad6a7fcec9f426a5798ecec036320b", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/pmr_typedefs_deque.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_deque.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_deque.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_deque.cc?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/deque>\n+\n+namespace xpmr = std::experimental::pmr;\n+\n+struct X { };\n+\n+static_assert(std::is_same<xpmr::deque<X>,\n+    std::deque<X, xpmr::polymorphic_allocator<X>>>::value,\n+    \"pmr::deque\");"}, {"sha": "ac2dd52dff609523b38a9f60a05e6f6ba0c8ab54", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/pmr_typedefs_forward_list.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_forward_list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_forward_list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_forward_list.cc?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/forward_list>\n+\n+namespace xpmr = std::experimental::pmr;\n+\n+struct X { };\n+\n+static_assert(std::is_same<xpmr::forward_list<X>,\n+    std::forward_list<X, xpmr::polymorphic_allocator<X>>>::value,\n+    \"pmr::forward_list\");"}, {"sha": "aea5c8061bd882f07b90e05b6f78bc257f80af40", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/pmr_typedefs_list.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_list.cc?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/list>\n+\n+namespace xpmr = std::experimental::pmr;\n+\n+struct X { };\n+\n+static_assert(std::is_same<xpmr::list<X>,\n+    std::list<X, xpmr::polymorphic_allocator<X>>>::value,\n+    \"pmr::list\");"}, {"sha": "2074022dc2b7690722dc287df797cb0ef4b73efd", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/pmr_typedefs_map.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_map.cc?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/map>\n+\n+namespace xpmr = std::experimental::pmr;\n+\n+struct X { };\n+struct Y { };\n+struct Cmp { bool operator()(X, X) const { return false; } };\n+\n+static_assert(std::is_same<xpmr::map<X, Y>,\n+    std::map<X, Y, std::less<X>,\n+\t     xpmr::polymorphic_allocator<std::pair<const X, Y>>>>::value,\n+    \"pmr::map\");\n+static_assert(std::is_same<xpmr::map<X, Y, Cmp>,\n+    std::map<X, Y, Cmp,\n+\t     xpmr::polymorphic_allocator<std::pair<const X, Y>>>>::value,\n+    \"pmr::map\");"}, {"sha": "c237f1e9de9979a8192177bb866b2ed45e6bf9b1", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/pmr_typedefs_match.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_match.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_match.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_match.cc?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/regex>\n+\n+namespace xpmr = std::experimental::pmr;\n+\n+struct X;\n+static_assert(std::is_same<xpmr::match_results<X*>,\n+    std::match_results<X*,\n+      xpmr::polymorphic_allocator<std::sub_match<X*>>>>::value,\n+    \"pmr::match_results\");\n+\n+static_assert(std::is_same<xpmr::cmatch,\n+    std::match_results<const char*,\n+      xpmr::polymorphic_allocator<std::sub_match<const char*>>>>::value,\n+    \"pmr::cmatch\");\n+static_assert(std::is_same<xpmr::smatch,\n+    std::match_results<xpmr::string::const_iterator,\n+      xpmr::polymorphic_allocator<\n+\tstd::sub_match<xpmr::string::const_iterator>>>>::value,\n+    \"pmr::smatch\");\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+static_assert(std::is_same<xpmr::wcmatch,\n+    std::match_results<const wchar_t*,\n+      xpmr::polymorphic_allocator<std::sub_match<const wchar_t*>>>>::value,\n+    \"pmr::wcmatch\");\n+static_assert(std::is_same<xpmr::wsmatch,\n+    std::match_results<xpmr::wstring::const_iterator,\n+      xpmr::polymorphic_allocator<\n+\tstd::sub_match<xpmr::wstring::const_iterator>>>>::value,\n+    \"pmr::wsmatch\");\n+#endif"}, {"sha": "e6acaf411223643cb0ff21bcf01e8d323fdf6c59", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/pmr_typedefs_multimap.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_multimap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_multimap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_multimap.cc?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/map>\n+\n+namespace xpmr = std::experimental::pmr;\n+\n+struct X { };\n+struct Y { };\n+struct Cmp { bool operator()(X, X) const { return false; } };\n+\n+static_assert(std::is_same<xpmr::multimap<X, Y>,\n+    std::multimap<X, Y, std::less<X>,\n+\t\t  xpmr::polymorphic_allocator<std::pair<const X, Y>>>>::value,\n+    \"pmr::multimap\");\n+static_assert(std::is_same<xpmr::multimap<X, Y, Cmp>,\n+    std::multimap<X, Y, Cmp,\n+\t\t  xpmr::polymorphic_allocator<std::pair<const X, Y>>>>::value,\n+    \"pmr::multimap\");"}, {"sha": "e98c556c489c3705e237d359b4defca4c28e6f26", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/pmr_typedefs_multiset.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_multiset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_multiset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_multiset.cc?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/set>\n+\n+namespace xpmr = std::experimental::pmr;\n+\n+struct X { };\n+struct Cmp { bool operator()(X, X) const { return false; } };\n+\n+static_assert(std::is_same<xpmr::multiset<X>,\n+    std::multiset<X, std::less<X>, xpmr::polymorphic_allocator<X>>>::value,\n+    \"pmr::multiset\");\n+static_assert(std::is_same<xpmr::multiset<X, Cmp>,\n+    std::multiset<X, Cmp, xpmr::polymorphic_allocator<X>>>::value,\n+    \"pmr::multiset\");"}, {"sha": "182a11e9701b2853ef82852bda031673b6123560", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/pmr_typedefs_set.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_set.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_set.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_set.cc?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/set>\n+\n+namespace xpmr = std::experimental::pmr;\n+\n+struct X { };\n+struct Cmp { bool operator()(X, X) const { return false; } };\n+\n+static_assert(std::is_same<xpmr::set<X>,\n+    std::set<X, std::less<X>, xpmr::polymorphic_allocator<X>>>::value,\n+    \"pmr::set\");\n+static_assert(std::is_same<xpmr::set<X, Cmp>,\n+    std::set<X, Cmp, xpmr::polymorphic_allocator<X>>>::value,\n+    \"pmr::set\");"}, {"sha": "3cf8c94cfb11bda47a433f9611145cf3535305e1", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/pmr_typedefs_string.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_string.cc?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -0,0 +1,60 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/string>\n+\n+namespace xpmr = std::experimental::pmr;\n+\n+struct T : std::char_traits<char> { };\n+\n+static_assert(std::is_same<xpmr::basic_string<char>,\n+    std::basic_string<char, std::char_traits<char>,\n+\t\t      xpmr::polymorphic_allocator<char>>>::value,\n+    \"pmr::basic_string\");\n+static_assert(std::is_same<xpmr::basic_string<char, T>,\n+    std::basic_string<char, T, xpmr::polymorphic_allocator<char>>>::value,\n+    \"pmr::basic_string\");\n+\n+static_assert(std::is_same<xpmr::string,\n+    std::basic_string<char, std::char_traits<char>,\n+\t\t      xpmr::polymorphic_allocator<char>>>::value,\n+    \"pmr::string\");\n+static_assert(std::is_same<xpmr::u16string,\n+    std::basic_string<char16_t, std::char_traits<char16_t>,\n+\t\t      xpmr::polymorphic_allocator<char16_t>>>::value,\n+    \"pmr::u16string\");\n+static_assert(std::is_same<xpmr::u32string,\n+    std::basic_string<char32_t, std::char_traits<char32_t>,\n+\t\t      xpmr::polymorphic_allocator<char32_t>>>::value,\n+    \"pmr::u32string\");\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+static_assert(std::is_same<xpmr::basic_string<wchar_t>,\n+    std::basic_string<wchar_t, std::char_traits<wchar_t>,\n+\t\t      xpmr::polymorphic_allocator<wchar_t>>>::value,\n+    \"pmr::basic_string<wchar_t>\");\n+static_assert(std::is_same<xpmr::basic_string<wchar_t, T>,\n+    std::basic_string<wchar_t, T, xpmr::polymorphic_allocator<wchar_t>>>::value,\n+    \"pmr::basic_string<wchar_t>\");\n+\n+static_assert(std::is_same<xpmr::wstring,\n+    std::basic_string<wchar_t, std::char_traits<wchar_t>,\n+\t\t      xpmr::polymorphic_allocator<wchar_t>>>::value,\n+    \"pmr::wstring\");\n+#endif"}, {"sha": "15e00e7e720cef11fe36dddc389825f6355b3acd", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/pmr_typedefs_unordered_map.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_unordered_map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_unordered_map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_unordered_map.cc?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/unordered_map>\n+\n+namespace xpmr = std::experimental::pmr;\n+\n+struct X { };\n+struct Y { };\n+struct Hash { std::size_t operator()(X) const { return 0; } };\n+struct Eq { bool operator()(X, X) const { return true; } };\n+\n+static_assert(std::is_same<xpmr::unordered_map<X, Y>,\n+    std::unordered_map<X, Y, std::hash<X>, std::equal_to<X>,\n+      xpmr::polymorphic_allocator<std::pair<const X, Y>>>>::value,\n+    \"pmr::unordered_map\");\n+static_assert(std::is_same<xpmr::unordered_map<X, Y, Hash>,\n+    std::unordered_map<X, Y, Hash, std::equal_to<X>,\n+      xpmr::polymorphic_allocator<std::pair<const X, Y>>>>::value,\n+    \"pmr::unordered_map\");\n+static_assert(std::is_same<xpmr::unordered_map<X, Y, Hash, Eq>,\n+    std::unordered_map<X, Y, Hash, Eq,\n+      xpmr::polymorphic_allocator<std::pair<const X, Y>>>>::value,\n+    \"pmr::unordered_map\");"}, {"sha": "67054ffb4c9cd5d6b0014bb0f0f068ac71812df7", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/pmr_typedefs_unordered_multimap.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_unordered_multimap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_unordered_multimap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_unordered_multimap.cc?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/unordered_map>\n+\n+namespace xpmr = std::experimental::pmr;\n+\n+struct X { };\n+struct Y { };\n+struct Hash { std::size_t operator()(X) const { return 0; } };\n+struct Eq { bool operator()(X, X) const { return true; } };\n+\n+static_assert(std::is_same<xpmr::unordered_multimap<X, Y>,\n+    std::unordered_multimap<X, Y, std::hash<X>, std::equal_to<X>,\n+      xpmr::polymorphic_allocator<std::pair<const X, Y>>>>::value,\n+    \"pmr::unordered_multimap\");\n+static_assert(std::is_same<xpmr::unordered_multimap<X, Y, Hash>,\n+    std::unordered_multimap<X, Y, Hash, std::equal_to<X>,\n+      xpmr::polymorphic_allocator<std::pair<const X, Y>>>>::value,\n+    \"pmr::unordered_multimap\");\n+static_assert(std::is_same<xpmr::unordered_multimap<X, Y, Hash, Eq>,\n+    std::unordered_multimap<X, Y, Hash, Eq,\n+      xpmr::polymorphic_allocator<std::pair<const X, Y>>>>::value,\n+    \"pmr::unordered_multimap\");"}, {"sha": "aaba4d3ec473a699000a01676283d87a5809bfa4", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/pmr_typedefs_unordered_multiset.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_unordered_multiset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_unordered_multiset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_unordered_multiset.cc?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/unordered_set>\n+\n+namespace xpmr = std::experimental::pmr;\n+\n+struct X { };\n+struct Hash { std::size_t operator()(X) const { return 0; } };\n+struct Eq { bool operator()(X, X) const { return true; } };\n+\n+static_assert(std::is_same<xpmr::unordered_multiset<X>,\n+    std::unordered_multiset<X, std::hash<X>, std::equal_to<X>,\n+      xpmr::polymorphic_allocator<X>>>::value,\n+    \"pmr::unordered_multiset\");\n+static_assert(std::is_same<xpmr::unordered_multiset<X, Hash>,\n+    std::unordered_multiset<X, Hash, std::equal_to<X>,\n+      xpmr::polymorphic_allocator<X>>>::value,\n+    \"pmr::unordered_multiset\");\n+static_assert(std::is_same<xpmr::unordered_multiset<X, Hash, Eq>,\n+    std::unordered_multiset<X, Hash, Eq,\n+      xpmr::polymorphic_allocator<X>>>::value,\n+    \"pmr::unordered_multiset\");"}, {"sha": "b90051ec074767956abd05191380975bc79a3152", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/pmr_typedefs_unordered_set.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_unordered_set.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_unordered_set.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_unordered_set.cc?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/unordered_set>\n+\n+namespace xpmr = std::experimental::pmr;\n+\n+struct X { };\n+struct Hash { std::size_t operator()(X) const { return 0; } };\n+struct Eq { bool operator()(X, X) const { return true; } };\n+\n+static_assert(std::is_same<xpmr::unordered_set<X>,\n+    std::unordered_set<X, std::hash<X>, std::equal_to<X>,\n+      xpmr::polymorphic_allocator<X>>>::value,\n+    \"pmr::unordered_set\");\n+static_assert(std::is_same<xpmr::unordered_set<X, Hash>,\n+    std::unordered_set<X, Hash, std::equal_to<X>,\n+      xpmr::polymorphic_allocator<X>>>::value,\n+    \"pmr::unordered_set\");\n+static_assert(std::is_same<xpmr::unordered_set<X, Hash, Eq>,\n+    std::unordered_set<X, Hash, Eq,\n+      xpmr::polymorphic_allocator<X>>>::value,\n+    \"pmr::unordered_set\");"}, {"sha": "f780aa5666b02c32f4ec920113a1bae96dc8d879", "filename": "libstdc++-v3/testsuite/experimental/polymorphic_allocator/pmr_typedefs_vector.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_vector.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_vector.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fpolymorphic_allocator%2Fpmr_typedefs_vector.cc?ref=b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/vector>\n+\n+namespace xpmr = std::experimental::pmr;\n+\n+struct X { };\n+\n+static_assert(std::is_same<xpmr::vector<X>,\n+    std::vector<X, xpmr::polymorphic_allocator<X>>>::value,\n+    \"pmr::vector\");"}]}