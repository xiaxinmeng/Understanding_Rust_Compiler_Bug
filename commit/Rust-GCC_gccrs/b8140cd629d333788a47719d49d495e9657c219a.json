{"sha": "b8140cd629d333788a47719d49d495e9657c219a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgxNDBjZDYyOWQzMzM3ODhhNDc3MTlkNDlkNDk1ZTk2NTdjMjE5YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-05-26T17:33:09Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-05-26T17:33:09Z"}, "message": "re PR c/61271 (10 * possible coding error with logical not (!))\n\n\tPR target/61271\n\t* config/i386/i386.c (ix86_rtx_costs)\n\t<case CONST_INT, case CONST, case LABEL_REF, case SYMBOL_REF>:\n\tFix condition.\n\nFrom-SVN: r210937", "tree": {"sha": "86de70fb83c88a390b9cbdf4e46c56281531159d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86de70fb83c88a390b9cbdf4e46c56281531159d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8140cd629d333788a47719d49d495e9657c219a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8140cd629d333788a47719d49d495e9657c219a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8140cd629d333788a47719d49d495e9657c219a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8140cd629d333788a47719d49d495e9657c219a/comments", "author": null, "committer": null, "parents": [{"sha": "acea91c9012e211283130eb486d83243bcbbb327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acea91c9012e211283130eb486d83243bcbbb327", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acea91c9012e211283130eb486d83243bcbbb327"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "7764890355c08628e5130c990f71e937c401af3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8140cd629d333788a47719d49d495e9657c219a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8140cd629d333788a47719d49d495e9657c219a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8140cd629d333788a47719d49d495e9657c219a", "patch": "@@ -1,3 +1,10 @@\n+2014-05-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/61271\n+\t* config/i386/i386.c (ix86_rtx_costs)\n+\t<case CONST_INT, case CONST, case LABEL_REF, case SYMBOL_REF>:\n+\tFix condition.\n+\n 2014-05-26  Martin Jambor  <mjambor@suse.cz>\n \n \t* ira.c (split_live_ranges_for_shrink_wrap): Remove bailout on\n@@ -105,16 +112,14 @@\n \tmmix_shiftable_wyde_value, mmix_output_shiftvalue_op_from_str,\n \tmmix_output_octa, mmix_output_shifted_value): Adjust.\n \t(mmix_intval): Adjust.  Remove unreachable case.\n-\t* config/mmix/mmix.md (*nonlocal_goto_receiver_expanded): Use\n-\tint64_t.\n+\t* config/mmix/mmix.md (*nonlocal_goto_receiver_expanded): Use int64_t.\n \n 2014-05-26  Richard Biener  <rguenther@suse.de>\n \n \t* configure.ac: Drop __int64 type check.  Insist that we\n \tfound uint64_t and int64_t.\n \t* hwint.h (HOST_BITS_PER___INT64): Remove.\n-\t(HOST_BITS_PER_WIDE_INT): Define to 64 and remove\n-\t__int64 case.\n+\t(HOST_BITS_PER_WIDE_INT): Define to 64 and remove __int64 case.\n \t(HOST_WIDE_INT_PRINT_*): Remove 32bit case.\n \t(HOST_WIDEST_INT*): Define to HOST_WIDE_INT*.\n \t(HOST_WIDEST_FAST_INT): Remove __int64 case."}, {"sha": "88272567c5661fc32c3b64e0fa5aba50db155c4e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8140cd629d333788a47719d49d495e9657c219a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8140cd629d333788a47719d49d495e9657c219a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b8140cd629d333788a47719d49d495e9657c219a", "patch": "@@ -37903,10 +37903,10 @@ ix86_rtx_costs (rtx x, int code_i, int outer_code_i, int opno, int *total,\n       else if (TARGET_64BIT && !x86_64_zext_immediate_operand (x, VOIDmode))\n \t*total = 2;\n       else if (flag_pic && SYMBOLIC_CONST (x)\n-\t       && (!TARGET_64BIT\n-\t\t   || (!GET_CODE (x) != LABEL_REF\n-\t\t       && (GET_CODE (x) != SYMBOL_REF\n-\t\t           || !SYMBOL_REF_LOCAL_P (x)))))\n+\t       && !(TARGET_64BIT\n+\t\t    && (GET_CODE (x) == LABEL_REF\n+\t\t\t|| (GET_CODE (x) == SYMBOL_REF\n+\t\t\t    && SYMBOL_REF_LOCAL_P (x)))))\n \t*total = 1;\n       else\n \t*total = 0;"}]}