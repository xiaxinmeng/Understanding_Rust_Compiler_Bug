{"sha": "6b37bdaff18303bdc1042d9b99f11f83ac836c13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIzN2JkYWZmMTgzMDNiZGMxMDQyZDliOTlmMTFmODNhYzgzNmMxMw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-04-06T23:07:21Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-04-06T23:07:21Z"}, "message": "Fix new -Wparentheses warnings encountered during bootstrap\n\ngcc/ChangeLog:\n\n\tPR c/70436\n\t* gimplify.c (gimplify_omp_ordered): Add explicit braces to\n\tresolve a future -Wparentheses warning.\n\t* omp-low.c (scan_sharing_clauses): Likewise.\n\t* tree-parloops.c (eliminate_local_variables): Likewise.\n\ngcc/cp/ChangeLog:\n\n\tPR c/70436\n\t* cp-tree.h (FOR_EACH_CLONE): Restructure macro to avoid\n\tpotentially generating a future -Wparentheses warning in its\n\tcallers.\n\ngcc/fortran/ChangeLog:\n\n\tPR c/70436\n\t* openmp.c (gfc_find_omp_udr): Add explicit braces to resolve a\n\tfuture -Wparentheses warning.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/70436\n\t* g++.dg/plugin/pragma_plugin.c (handle_pragma_sayhello): Add\n\texplicit braces to resolve a future -Wparentheses warning.\n\nFrom-SVN: r234801", "tree": {"sha": "66367b6fb70f7e3bce2174c4c92500acc9eafd3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66367b6fb70f7e3bce2174c4c92500acc9eafd3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b37bdaff18303bdc1042d9b99f11f83ac836c13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b37bdaff18303bdc1042d9b99f11f83ac836c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b37bdaff18303bdc1042d9b99f11f83ac836c13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b37bdaff18303bdc1042d9b99f11f83ac836c13/comments", "author": null, "committer": null, "parents": [{"sha": "64824205cc9312e4e7798cda86a8e4c1f23e5d2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64824205cc9312e4e7798cda86a8e4c1f23e5d2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64824205cc9312e4e7798cda86a8e4c1f23e5d2b"}], "stats": {"total": 247, "additions": 143, "deletions": 104}, "files": [{"sha": "e51a523563776d6fa59c0468b786c6e0dd0d10b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b37bdaff18303bdc1042d9b99f11f83ac836c13", "patch": "@@ -1,3 +1,11 @@\n+2016-04-06  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c/70436\n+\t* gimplify.c (gimplify_omp_ordered): Add explicit braces to\n+\tresolve a future -Wparentheses warning.\n+\t* omp-low.c (scan_sharing_clauses): Likewise.\n+\t* tree-parloops.c (eliminate_local_variables): Likewise.\n+\n 2016-04-06  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/70398"}, {"sha": "db7cb9bd9b09280d55efc44084616590e2e1a32d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6b37bdaff18303bdc1042d9b99f11f83ac836c13", "patch": "@@ -1,3 +1,10 @@\n+2016-04-06  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c/70436\n+\t* cp-tree.h (FOR_EACH_CLONE): Restructure macro to avoid\n+\tpotentially generating a future -Wparentheses warning in its\n+\tcallers.\n+\n 2016-04-06  Jason Merrill  <jason@redhat.com>\n \n \t* class.c (check_abi_tags): Fix function template handling."}, {"sha": "0f7e08ffe73c174f13d6294b8dcf26a2fb155290", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6b37bdaff18303bdc1042d9b99f11f83ac836c13", "patch": "@@ -2526,12 +2526,14 @@ struct GTY(()) lang_decl {\n \n   */\n #define FOR_EACH_CLONE(CLONE, FN)\t\t\t\\\n-  if (TREE_CODE (FN) == FUNCTION_DECL\t\t\t\\\n-      && (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (FN)\t\\\n-\t  || DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (FN)))\t\\\n-     for (CLONE = DECL_CHAIN (FN);\t\t\t\\\n-\t  CLONE && DECL_CLONED_FUNCTION_P (CLONE);\t\\\n-\t  CLONE = DECL_CHAIN (CLONE))\n+  if (!(TREE_CODE (FN) == FUNCTION_DECL\t\t\t\\\n+\t&& (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (FN)\t\\\n+\t    || DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (FN))))\\\n+    ;\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\\\n+    for (CLONE = DECL_CHAIN (FN);\t\t\t\\\n+\t CLONE && DECL_CLONED_FUNCTION_P (CLONE);\t\\\n+\t CLONE = DECL_CHAIN (CLONE))\n \n /* Nonzero if NODE has DECL_DISCRIMINATOR and not DECL_ACCESS.  */\n #define DECL_DISCRIMINATOR_P(NODE)\t\\"}, {"sha": "c300145af478100703f2a560b629ce34b6641403", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6b37bdaff18303bdc1042d9b99f11f83ac836c13", "patch": "@@ -1,3 +1,9 @@\n+2016-04-06  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c/70436\n+\t* openmp.c (gfc_find_omp_udr): Add explicit braces to resolve a\n+\tfuture -Wparentheses warning.\n+\n 2016-04-04  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/67538"}, {"sha": "0dd1a9213705d6c3b3381d3d924f9c8dcb905de6", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=6b37bdaff18303bdc1042d9b99f11f83ac836c13", "patch": "@@ -175,24 +175,26 @@ gfc_find_omp_udr (gfc_namespace *ns, const char *name, gfc_typespec *ts)\n \n       st = gfc_find_symtree (ns->omp_udr_root, name);\n       if (st != NULL)\n-\tfor (omp_udr = st->n.omp_udr; omp_udr; omp_udr = omp_udr->next)\n-\t  if (ts == NULL)\n-\t    return omp_udr;\n-\t  else if (gfc_compare_types (&omp_udr->ts, ts))\n-\t    {\n-\t      if (ts->type == BT_CHARACTER)\n-\t\t{\n-\t\t  if (omp_udr->ts.u.cl->length == NULL)\n-\t\t    return omp_udr;\n-\t\t  if (ts->u.cl->length == NULL)\n-\t\t    continue;\n-\t\t  if (gfc_compare_expr (omp_udr->ts.u.cl->length,\n-\t\t\t\t\tts->u.cl->length,\n-\t\t\t\t\tINTRINSIC_EQ) != 0)\n-\t\t    continue;\n-\t\t}\n+\t{\n+\t  for (omp_udr = st->n.omp_udr; omp_udr; omp_udr = omp_udr->next)\n+\t    if (ts == NULL)\n \t      return omp_udr;\n-\t    }\n+\t    else if (gfc_compare_types (&omp_udr->ts, ts))\n+\t      {\n+\t\tif (ts->type == BT_CHARACTER)\n+\t\t  {\n+\t\t    if (omp_udr->ts.u.cl->length == NULL)\n+\t\t      return omp_udr;\n+\t\t    if (ts->u.cl->length == NULL)\n+\t\t      continue;\n+\t\t    if (gfc_compare_expr (omp_udr->ts.u.cl->length,\n+\t\t\t\t\t  ts->u.cl->length,\n+\t\t\t\t\t  INTRINSIC_EQ) != 0)\n+\t\t      continue;\n+\t\t  }\n+\t\treturn omp_udr;\n+\t      }\n+\t}\n \n       /* Don't escape an interface block.  */\n       if (ns && !ns->has_import_set"}, {"sha": "9c0119e0794a52b1a73944fae841e05886f7d725", "filename": "gcc/gimplify.c", "status": "modified", "additions": 55, "deletions": 53, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=6b37bdaff18303bdc1042d9b99f11f83ac836c13", "patch": "@@ -9878,64 +9878,66 @@ gimplify_omp_ordered (tree expr, gimple_seq body)\n   tree sink_c = NULL_TREE;\n \n   if (gimplify_omp_ctxp)\n-    for (c = OMP_ORDERED_CLAUSES (expr); c; c = OMP_CLAUSE_CHAIN (c))\n-      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEPEND\n-\t  && gimplify_omp_ctxp->loop_iter_var.is_empty ()\n-\t  && (OMP_CLAUSE_DEPEND_KIND (c) == OMP_CLAUSE_DEPEND_SINK\n-\t      || OMP_CLAUSE_DEPEND_KIND (c) == OMP_CLAUSE_DEPEND_SOURCE))\n-\t{\n-\t  error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t    \"%<ordered%> construct with %<depend%> clause must be \"\n-\t\t    \"closely nested inside a loop with %<ordered%> clause \"\n-\t\t    \"with a parameter\");\n-\t  failures++;\n-\t}\n-      else if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEPEND\n-\t       && OMP_CLAUSE_DEPEND_KIND (c) == OMP_CLAUSE_DEPEND_SINK)\n-\t{\n-\t  bool fail = false;\n-\t  for (decls = OMP_CLAUSE_DECL (c), i = 0;\n-\t       decls && TREE_CODE (decls) == TREE_LIST;\n-\t       decls = TREE_CHAIN (decls), ++i)\n-\t    if (i >= gimplify_omp_ctxp->loop_iter_var.length () / 2)\n-\t      continue;\n-\t    else if (TREE_VALUE (decls)\n-\t\t     != gimplify_omp_ctxp->loop_iter_var[2 * i])\n+    {\n+      for (c = OMP_ORDERED_CLAUSES (expr); c; c = OMP_CLAUSE_CHAIN (c))\n+\tif (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEPEND\n+\t    && gimplify_omp_ctxp->loop_iter_var.is_empty ()\n+\t    && (OMP_CLAUSE_DEPEND_KIND (c) == OMP_CLAUSE_DEPEND_SINK\n+\t\t|| OMP_CLAUSE_DEPEND_KIND (c) == OMP_CLAUSE_DEPEND_SOURCE))\n+\t  {\n+\t    error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t      \"%<ordered%> construct with %<depend%> clause must be \"\n+\t\t      \"closely nested inside a loop with %<ordered%> clause \"\n+\t\t      \"with a parameter\");\n+\t    failures++;\n+\t  }\n+\telse if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEPEND\n+\t\t && OMP_CLAUSE_DEPEND_KIND (c) == OMP_CLAUSE_DEPEND_SINK)\n+\t  {\n+\t    bool fail = false;\n+\t    for (decls = OMP_CLAUSE_DECL (c), i = 0;\n+\t\t decls && TREE_CODE (decls) == TREE_LIST;\n+\t\t decls = TREE_CHAIN (decls), ++i)\n+\t      if (i >= gimplify_omp_ctxp->loop_iter_var.length () / 2)\n+\t\tcontinue;\n+\t      else if (TREE_VALUE (decls)\n+\t\t       != gimplify_omp_ctxp->loop_iter_var[2 * i])\n+\t\t{\n+\t\t  error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t    \"variable %qE is not an iteration \"\n+\t\t\t    \"of outermost loop %d, expected %qE\",\n+\t\t\t    TREE_VALUE (decls), i + 1,\n+\t\t\t    gimplify_omp_ctxp->loop_iter_var[2 * i]);\n+\t\t  fail = true;\n+\t\t  failures++;\n+\t\t}\n+\t      else\n+\t\tTREE_VALUE (decls)\n+\t\t  = gimplify_omp_ctxp->loop_iter_var[2 * i + 1];\n+\t    if (!fail && i != gimplify_omp_ctxp->loop_iter_var.length () / 2)\n+\t      {\n+\t\terror_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t  \"number of variables in %<depend(sink)%> \"\n+\t\t\t  \"clause does not match number of \"\n+\t\t\t  \"iteration variables\");\n+\t\tfailures++;\n+\t      }\n+\t    sink_c = c;\n+\t  }\n+\telse if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEPEND\n+\t\t && OMP_CLAUSE_DEPEND_KIND (c) == OMP_CLAUSE_DEPEND_SOURCE)\n+\t  {\n+\t    if (source_c)\n \t      {\n \t\terror_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t  \"variable %qE is not an iteration \"\n-\t\t\t  \"of outermost loop %d, expected %qE\",\n-\t\t\t  TREE_VALUE (decls), i + 1,\n-\t\t\t  gimplify_omp_ctxp->loop_iter_var[2 * i]);\n-\t\tfail = true;\n+\t\t\t  \"more than one %<depend(source)%> clause on an \"\n+\t\t\t  \"%<ordered%> construct\");\n \t\tfailures++;\n \t      }\n \t    else\n-\t      TREE_VALUE (decls)\n-\t\t= gimplify_omp_ctxp->loop_iter_var[2 * i + 1];\n-\t  if (!fail && i != gimplify_omp_ctxp->loop_iter_var.length () / 2)\n-\t    {\n-\t      error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\"number of variables in %<depend(sink)%> \"\n-\t\t\t\"clause does not match number of \"\n-\t\t\t\"iteration variables\");\n-\t      failures++;\n-\t    }\n-\t  sink_c = c;\n-\t}\n-      else if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEPEND\n-\t       && OMP_CLAUSE_DEPEND_KIND (c) == OMP_CLAUSE_DEPEND_SOURCE)\n-\t{\n-\t  if (source_c)\n-\t    {\n-\t      error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\"more than one %<depend(source)%> clause on an \"\n-\t\t\t\"%<ordered%> construct\");\n-\t      failures++;\n-\t    }\n-\t  else\n-\t    source_c = c;\n-\t}\n+\t      source_c = c;\n+\t  }\n+    }\n   if (source_c && sink_c)\n     {\n       error_at (OMP_CLAUSE_LOCATION (source_c),"}, {"sha": "6b7941d0ef414b454d0227015296ca18fec37187", "filename": "gcc/omp-low.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=6b37bdaff18303bdc1042d9b99f11f83ac836c13", "patch": "@@ -2379,19 +2379,21 @@ scan_sharing_clauses (tree clauses, omp_context *ctx,\n   gcc_checking_assert (!scan_array_reductions\n \t\t       || !is_gimple_omp_oacc (ctx->stmt));\n   if (scan_array_reductions)\n-    for (c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n-      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION\n-\t  && OMP_CLAUSE_REDUCTION_PLACEHOLDER (c))\n-\t{\n-\t  scan_omp (&OMP_CLAUSE_REDUCTION_GIMPLE_INIT (c), ctx);\n-\t  scan_omp (&OMP_CLAUSE_REDUCTION_GIMPLE_MERGE (c), ctx);\n-\t}\n-      else if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LASTPRIVATE\n-\t       && OMP_CLAUSE_LASTPRIVATE_GIMPLE_SEQ (c))\n-\tscan_omp (&OMP_CLAUSE_LASTPRIVATE_GIMPLE_SEQ (c), ctx);\n-      else if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LINEAR\n-\t       && OMP_CLAUSE_LINEAR_GIMPLE_SEQ (c))\n-\tscan_omp (&OMP_CLAUSE_LINEAR_GIMPLE_SEQ (c), ctx);\n+    {\n+      for (c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n+\tif (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION\n+\t    && OMP_CLAUSE_REDUCTION_PLACEHOLDER (c))\n+\t  {\n+\t    scan_omp (&OMP_CLAUSE_REDUCTION_GIMPLE_INIT (c), ctx);\n+\t    scan_omp (&OMP_CLAUSE_REDUCTION_GIMPLE_MERGE (c), ctx);\n+\t  }\n+\telse if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LASTPRIVATE\n+\t\t && OMP_CLAUSE_LASTPRIVATE_GIMPLE_SEQ (c))\n+\t  scan_omp (&OMP_CLAUSE_LASTPRIVATE_GIMPLE_SEQ (c), ctx);\n+\telse if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LINEAR\n+\t\t && OMP_CLAUSE_LINEAR_GIMPLE_SEQ (c))\n+\t  scan_omp (&OMP_CLAUSE_LINEAR_GIMPLE_SEQ (c), ctx);\n+    }\n }\n \n /* Create a new name for omp child function.  Returns an identifier.  If"}, {"sha": "2a785506710d54e1bbea058096f99d5232bd3772", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b37bdaff18303bdc1042d9b99f11f83ac836c13", "patch": "@@ -1,3 +1,9 @@\n+2016-04-06  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c/70436\n+\t* g++.dg/plugin/pragma_plugin.c (handle_pragma_sayhello): Add\n+\texplicit braces to resolve a future -Wparentheses warning.\n+\n 2016-04-06  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/pr61817-1.c: New test."}, {"sha": "6f4739868d3fff4fb63641366c92861b0d6e9a8b", "filename": "gcc/testsuite/g++.dg/plugin/pragma_plugin.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fpragma_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fpragma_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fpragma_plugin.c?ref=6b37bdaff18303bdc1042d9b99f11f83ac836c13", "patch": "@@ -32,14 +32,16 @@ handle_pragma_sayhello (cpp_reader *dummy)\n       return;\n     }\n   if (TREE_STRING_LENGTH (message) > 1)\n-    if (cfun)\n-      warning (OPT_Wpragmas, \n-\t      \"%<pragma GCCPLUGIN sayhello%> from function %qE: %s\",\n-\t      cfun->decl, TREE_STRING_POINTER (message));\n+    {\n+      if (cfun)\n+        warning (OPT_Wpragmas, \n+\t\t\"%<pragma GCCPLUGIN sayhello%> from function %qE: %s\",\n+\t\tcfun->decl, TREE_STRING_POINTER (message));\n       else\n-\twarning (OPT_Wpragmas, \n-\t    \"%<pragma GCCPLUGIN sayhello%> outside of function: %s\",\n-\t    TREE_STRING_POINTER (message));\n+        warning (OPT_Wpragmas, \n+\t\t \"%<pragma GCCPLUGIN sayhello%> outside of function: %s\",\n+\t\t TREE_STRING_POINTER (message));\n+    }\n }\n \n /* Plugin callback called during pragma registration */"}, {"sha": "2e55b7961d845f630d4fb3e242b4308bd00235da", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b37bdaff18303bdc1042d9b99f11f83ac836c13/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=6b37bdaff18303bdc1042d9b99f11f83ac836c13", "patch": "@@ -767,14 +767,16 @@ eliminate_local_variables (edge entry, edge exit)\n \n   FOR_EACH_VEC_ELT (body, i, bb)\n     if (bb != entry_bb && bb != exit_bb)\n-      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-\tif (is_gimple_debug (gsi_stmt (gsi)))\n-\t  {\n-\t    if (gimple_debug_bind_p (gsi_stmt (gsi)))\n-\t      has_debug_stmt = true;\n-\t  }\n-\telse\n-\t  eliminate_local_variables_stmt (entry, &gsi, &decl_address);\n+      {\n+        for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t  if (is_gimple_debug (gsi_stmt (gsi)))\n+\t    {\n+\t      if (gimple_debug_bind_p (gsi_stmt (gsi)))\n+\t        has_debug_stmt = true;\n+\t    }\n+\t  else\n+\t    eliminate_local_variables_stmt (entry, &gsi, &decl_address);\n+      }\n \n   if (has_debug_stmt)\n     FOR_EACH_VEC_ELT (body, i, bb)"}]}