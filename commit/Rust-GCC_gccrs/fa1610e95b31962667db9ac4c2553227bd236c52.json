{"sha": "fa1610e95b31962667db9ac4c2553227bd236c52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmExNjEwZTk1YjMxOTYyNjY3ZGI5YWM0YzI1NTMyMjdiZDIzNmM1Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-03-15T12:17:02Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-03-15T12:17:02Z"}, "message": "Change all calls to eliminate_regs.\n\nFrom-SVN: r13705", "tree": {"sha": "bca95f11a70f228c00ae62abce352bd4df9bda27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bca95f11a70f228c00ae62abce352bd4df9bda27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa1610e95b31962667db9ac4c2553227bd236c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa1610e95b31962667db9ac4c2553227bd236c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa1610e95b31962667db9ac4c2553227bd236c52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa1610e95b31962667db9ac4c2553227bd236c52/comments", "author": null, "committer": null, "parents": [{"sha": "29ae50126345055d032f8725be11c02441892542", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ae50126345055d032f8725be11c02441892542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ae50126345055d032f8725be11c02441892542"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "ea5923d370d06094a1cbc827768319c1428efe93", "filename": "gcc/caller-save.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1610e95b31962667db9ac4c2553227bd236c52/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1610e95b31962667db9ac4c2553227bd236c52/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=fa1610e95b31962667db9ac4c2553227bd236c52", "patch": "@@ -1,5 +1,5 @@\n /* Save and restore call-clobbered registers which are live across a call.\n-   Copyright (C) 1989, 1992, 1994, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1992, 1994, 1995, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -335,7 +335,7 @@ setup_save_areas (pchanged)\n     for (j = 1; j <= MOVE_MAX / UNITS_PER_WORD; j++)\n       if (regno_save_mem[i][j] != 0)\n \tok &= strict_memory_address_p (GET_MODE (regno_save_mem[i][j]),\n-\t\t\t\t       XEXP (eliminate_regs (regno_save_mem[i][j], 0, NULL_RTX), 0));\n+\t\t\t\t       XEXP (eliminate_regs (regno_save_mem[i][j], 0, NULL_RTX, 1), 0));\n \n   return ok;\n }"}, {"sha": "51058dbe49171a7311bedef1f65e82839368a10b", "filename": "gcc/dbxout.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1610e95b31962667db9ac4c2553227bd236c52/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1610e95b31962667db9ac4c2553227bd236c52/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=fa1610e95b31962667db9ac4c2553227bd236c52", "patch": "@@ -1,5 +1,5 @@\n /* Output dbx-format symbol table information from GNU compiler.\n-   Copyright (C) 1987, 88, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 92-96, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1859,7 +1859,7 @@ dbxout_symbol (decl, local)\n \t  /* else it is something we handle like a normal variable.  */\n \t}\n \n-      DECL_RTL (decl) = eliminate_regs (DECL_RTL (decl), 0, NULL_RTX);\n+      DECL_RTL (decl) = eliminate_regs (DECL_RTL (decl), 0, NULL_RTX, 0);\n #ifdef LEAF_REG_REMAP\n       if (leaf_function)\n \tleaf_renumber_regs_insn (DECL_RTL (decl));\n@@ -2171,8 +2171,8 @@ dbxout_parms (parms)\n \t/* Perform any necessary register eliminations on the parameter's rtl,\n \t   so that the debugging output will be accurate.  */\n \tDECL_INCOMING_RTL (parms)\n-\t  = eliminate_regs (DECL_INCOMING_RTL (parms), 0, NULL_RTX);\n-\tDECL_RTL (parms) = eliminate_regs (DECL_RTL (parms), 0, NULL_RTX);\n+\t  = eliminate_regs (DECL_INCOMING_RTL (parms), 0, NULL_RTX, 0);\n+\tDECL_RTL (parms) = eliminate_regs (DECL_RTL (parms), 0, NULL_RTX, 0);\n #ifdef LEAF_REG_REMAP\n \tif (leaf_function)\n \t  {"}, {"sha": "89df539ec0b8a7bf89b30a19c182fa1f030c7b23", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1610e95b31962667db9ac4c2553227bd236c52/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1610e95b31962667db9ac4c2553227bd236c52/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=fa1610e95b31962667db9ac4c2553227bd236c52", "patch": "@@ -1,5 +1,5 @@\n /* Output Dwarf2 format symbol table information from the GNU C compiler.\n-   Copyright (C) 1992, 1993, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993, 1995, 1996, 1997 Free Software Foundation, Inc.\n    Contributed by Gary Funck (gary@intrepid.com).  Derived from the\n    DWARF 1 implementation written by Ron Guilmette (rfg@monkeys.com).\n    Extensively modified by Jason Merrill (jason@cygnus.com).\n@@ -5708,7 +5708,7 @@ add_location_attribute (die, rtl)\n       && (GET_CODE (rtl) != MEM\n \t  || !is_pseudo_reg (XEXP (rtl, 0))))\n     {\n-      loc_descr = loc_descriptor (eliminate_regs (rtl, 0, NULL_RTX));\n+      loc_descr = loc_descriptor (eliminate_regs (rtl, 0, NULL_RTX, 0));\n     }\n \n #ifdef MIPS_DEBUGGING_INFO\n@@ -6115,7 +6115,7 @@ add_bound_info (subrange_die, bound_attr, bound)\n       if (!optimize)\n \t{\n \t  bound_loc = mem_loc_descriptor\n-\t    (eliminate_regs (SAVE_EXPR_RTL (bound), 0, NULL_RTX));\n+\t    (eliminate_regs (SAVE_EXPR_RTL (bound), 0, NULL_RTX, 0));\n \t  add_AT_loc (subrange_die, bound_attr, bound_loc);\n \t}\n       /* else leave out the attribute.  */"}, {"sha": "f91cccb3420788b8a32448fe23e84e064bb03fa6", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1610e95b31962667db9ac4c2553227bd236c52/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1610e95b31962667db9ac4c2553227bd236c52/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=fa1610e95b31962667db9ac4c2553227bd236c52", "patch": "@@ -1860,7 +1860,7 @@ output_bound_representation (bound, dim_num, u_or_l)\n \n \t    if (TREE_CODE (bound) == SAVE_EXPR)\n \t      output_loc_descriptor\n-\t\t(eliminate_regs (SAVE_EXPR_RTL (bound), 0, NULL_RTX));\n+\t\t(eliminate_regs (SAVE_EXPR_RTL (bound), 0, NULL_RTX, 0));\n \t  }\n \n \tASM_OUTPUT_LABEL (asm_out_file, end_label);\n@@ -2130,7 +2130,7 @@ location_attribute (rtl)\n \n   if (! is_pseudo_reg (rtl)\n       && (GET_CODE (rtl) != MEM || ! is_pseudo_reg (XEXP (rtl, 0))))\n-    output_loc_descriptor (eliminate_regs (rtl, 0, NULL_RTX));\n+    output_loc_descriptor (eliminate_regs (rtl, 0, NULL_RTX, 0));\n \n   ASM_OUTPUT_LABEL (asm_out_file, end_label);\n }"}, {"sha": "40ab5882b6dd638b8e829cd16e2603f0db966070", "filename": "gcc/reload.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1610e95b31962667db9ac4c2553227bd236c52/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1610e95b31962667db9ac4c2553227bd236c52/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=fa1610e95b31962667db9ac4c2553227bd236c52", "patch": "@@ -673,7 +673,7 @@ get_secondary_mem (x, mode, opnum, type)\n   /* Get a version of the address doing any eliminations needed.  If that\n      didn't give us a new MEM, make a new one if it isn't valid.  */\n \n-  loc = eliminate_regs (secondary_memlocs[(int) mode], VOIDmode, NULL_RTX);\n+  loc = eliminate_regs (secondary_memlocs[(int) mode], VOIDmode, NULL_RTX, 0);\n   mem_valid = strict_memory_address_p (mode, XEXP (loc, 0));\n \n   if (! mem_valid && loc == secondary_memlocs[(int) mode])\n@@ -2604,7 +2604,7 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t      /* We must rerun eliminate_regs, in case the elimination\n \t\t offsets have changed.  */\n \t      rtx address = XEXP (eliminate_regs (reg_equiv_memory_loc[regno],\n-\t\t\t\t\t\t  0, NULL_RTX),\n+\t\t\t\t\t\t  0, NULL_RTX, 0),\n \t\t\t\t  0);\n \n \t      if (rtx_varies_p (address))\n@@ -4057,7 +4057,7 @@ find_reloads_toplev (x, opnum, type, ind_levels, is_set_dest)\n \t  /* We must rerun eliminate_regs, in case the elimination\n \t     offsets have changed.  */\n \t  rtx addr = XEXP (eliminate_regs (reg_equiv_memory_loc[regno], 0,\n-\t\t\t\t\t   NULL_RTX),\n+\t\t\t\t\t   NULL_RTX, 0),\n \t\t\t   0);\n \n \t  if (rtx_varies_p (addr))\n@@ -4141,7 +4141,7 @@ find_reloads_toplev (x, opnum, type, ind_levels, is_set_dest)\n \t  /* We must rerun eliminate_regs, in case the elimination\n \t     offsets have changed.  */\n \t  rtx addr = XEXP (eliminate_regs (reg_equiv_memory_loc[regno], 0,\n-\t\t\t\t\t   NULL_RTX),\n+\t\t\t\t\t   NULL_RTX, 0),\n \t\t\t   0);\n \t  if (BYTES_BIG_ENDIAN)\n \t    {\n@@ -4181,7 +4181,7 @@ make_memloc (ad, regno)\n   register int i;\n   /* We must rerun eliminate_regs, in case the elimination\n      offsets have changed.  */\n-  rtx tem = XEXP (eliminate_regs (reg_equiv_memory_loc[regno], 0, NULL_RTX),\n+  rtx tem = XEXP (eliminate_regs (reg_equiv_memory_loc[regno], 0, NULL_RTX, 0),\n \t\t  0);\n \n #if 0 /* We cannot safely reuse a memloc made here;"}, {"sha": "12924c02862f60d6cfb3c381927b2fef1ee38b44", "filename": "gcc/sdbout.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1610e95b31962667db9ac4c2553227bd236c52/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1610e95b31962667db9ac4c2553227bd236c52/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=fa1610e95b31962667db9ac4c2553227bd236c52", "patch": "@@ -1,5 +1,5 @@\n /* Output sdb-format symbol table information from GNU compiler.\n-   Copyright (C) 1988, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 92, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -787,7 +787,7 @@ sdbout_symbol (decl, local)\n       if (DECL_RTL (decl) == 0)\n \treturn;\n \n-      DECL_RTL (decl) = eliminate_regs (DECL_RTL (decl), 0, NULL_RTX);\n+      DECL_RTL (decl) = eliminate_regs (DECL_RTL (decl), 0, NULL_RTX, 0);\n #ifdef LEAF_REG_REMAP\n       if (leaf_function)\n \tleaf_renumber_regs_insn (DECL_RTL (decl));\n@@ -1287,8 +1287,8 @@ sdbout_parms (parms)\n \t/* Perform any necessary register eliminations on the parameter's rtl,\n \t   so that the debugging output will be accurate.  */\n \tDECL_INCOMING_RTL (parms) =\n-\t  eliminate_regs (DECL_INCOMING_RTL (parms), 0, NULL_RTX);\n-\tDECL_RTL (parms) = eliminate_regs (DECL_RTL (parms), 0, NULL_RTX);\n+\t  eliminate_regs (DECL_INCOMING_RTL (parms), 0, NULL_RTX, 0);\n+\tDECL_RTL (parms) = eliminate_regs (DECL_RTL (parms), 0, NULL_RTX, 0);\n \n \tif (PARM_PASSED_IN_MEMORY (parms))\n \t  {"}]}