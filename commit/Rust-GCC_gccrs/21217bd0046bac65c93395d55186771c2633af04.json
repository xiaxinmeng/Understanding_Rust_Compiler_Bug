{"sha": "21217bd0046bac65c93395d55186771c2633af04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEyMTdiZDAwNDZiYWM2NWM5MzM5NWQ1NTE4Njc3MWMyNjMzYWYwNA==", "commit": {"author": {"name": "James E. Wilson", "email": "wilson@cygnus.com", "date": "2000-06-08T17:25:22Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-06-08T17:25:22Z"}, "message": "Fix DWARF2 64-bit enum debugging support, for debugging IA-64 emacs bugs.\n\n\t* dwarf2out.c (ASM_OUTPUT_DWARF_DATA8): Add new macro that uses\n\tUNALIGNED_DOUBLE_INT_ASM_OP.  Rename old macro to\n\tASM_OUTPUT_DWARF_CONST_DOUBLE.\n\t(output_die, case dw_val_class_unsigned_const): Correct call to\n\tASM_OUTPUT_DWARF_DATA8.\n\t(output_die, case dw_val_class_long_long): Use\n\tASM_OUTPUT_DWARF_CONST_DOUBLE.\n\t* tree.c (host_integerp): Accept unsigned HOST_WIDE_INT values when\n\tpos is zero.\n\nFrom-SVN: r34457", "tree": {"sha": "208cff8687732c1b4aaaa4845fc350e7fd3874e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/208cff8687732c1b4aaaa4845fc350e7fd3874e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21217bd0046bac65c93395d55186771c2633af04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21217bd0046bac65c93395d55186771c2633af04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21217bd0046bac65c93395d55186771c2633af04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21217bd0046bac65c93395d55186771c2633af04/comments", "author": null, "committer": null, "parents": [{"sha": "0186257f7898165091cde0d6e6f307862966fa2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0186257f7898165091cde0d6e6f307862966fa2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0186257f7898165091cde0d6e6f307862966fa2a"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "ecbc215307887e82942fbcdce7b7edb32d3b57c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21217bd0046bac65c93395d55186771c2633af04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21217bd0046bac65c93395d55186771c2633af04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21217bd0046bac65c93395d55186771c2633af04", "patch": "@@ -1,5 +1,15 @@\n 2000-06-08  James E. Wilson  <wilson@cygnus.com>\n \n+\t* dwarf2out.c (ASM_OUTPUT_DWARF_DATA8): Add new macro that uses\n+\tUNALIGNED_DOUBLE_INT_ASM_OP.  Rename old macro to\n+\tASM_OUTPUT_DWARF_CONST_DOUBLE.\n+\t(output_die, case dw_val_class_unsigned_const): Correct call to\n+\tASM_OUTPUT_DWARF_DATA8.\n+\t(output_die, case dw_val_class_long_long): Use\n+\tASM_OUTPUT_DWARF_CONST_DOUBLE.\n+\t* tree.c (host_integerp): Accept unsigned HOST_WIDE_INT values when\n+\tpos is zero.\n+\t\n \t* config/ia64/ia64-protos.h (ia64_output_end_prologue): Add.\n \t(output_function_prologue): Fix mispelling.\n \t(output_function_prologue, output_function_epilogue): Reorder to"}, {"sha": "81230d0cac246ccecdfe91d9e589cefff4c53389", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21217bd0046bac65c93395d55186771c2633af04/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21217bd0046bac65c93395d55186771c2633af04/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=21217bd0046bac65c93395d55186771c2633af04", "patch": "@@ -405,6 +405,12 @@ static void dwarf2out_frame_debug_expr\tPARAMS ((rtx, const char *));\n   fprintf ((FILE), \"\\t%s\\t0x%x\", UNALIGNED_INT_ASM_OP, (unsigned) (VALUE))\n #endif\n \n+#ifndef ASM_OUTPUT_DWARF_DATA8\n+#define ASM_OUTPUT_DWARF_DATA8(FILE,VALUE) \\\n+  fprintf ((FILE), \"\\t%s\\t0x%lx\", UNALIGNED_DOUBLE_INT_ASM_OP, \\\n+\t   (unsigned long) (VALUE))\n+#endif\n+\n #ifndef ASM_OUTPUT_DWARF_DATA\n #define ASM_OUTPUT_DWARF_DATA(FILE,VALUE) \\\n   fprintf ((FILE), \"\\t%s\\t0x%lx\", UNALIGNED_OFFSET_ASM_OP, \\\n@@ -417,8 +423,8 @@ static void dwarf2out_frame_debug_expr\tPARAMS ((rtx, const char *));\n \t   (unsigned long) (VALUE))\n #endif\n \n-#ifndef ASM_OUTPUT_DWARF_DATA8\n-#define ASM_OUTPUT_DWARF_DATA8(FILE,HIGH_VALUE,LOW_VALUE)\t\t\\\n+#ifndef ASM_OUTPUT_DWARF_CONST_DOUBLE\n+#define ASM_OUTPUT_DWARF_CONST_DOUBLE(FILE,HIGH_VALUE,LOW_VALUE)\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (WORDS_BIG_ENDIAN)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n@@ -2011,6 +2017,7 @@ typedef struct pubname_struct *pubname_ref;\n typedef dw_die_ref *arange_ref;\n \n /* Describe a double word constant value.  */\n+/* ??? Every instance of long_long in the code really means CONST_DOUBLE.  */\n \n typedef struct dw_long_long_struct\n {\n@@ -5098,9 +5105,7 @@ output_die (die)\n \t      ASM_OUTPUT_DWARF_DATA4 (asm_out_file, AT_unsigned (a));\n \t      break;\n \t    case 8:\n-\t      ASM_OUTPUT_DWARF_DATA8 (asm_out_file,\n-\t\t\t\t      a->dw_attr_val.v.val_long_long.hi,\n-\t\t\t\t      a->dw_attr_val.v.val_long_long.low);\n+\t      ASM_OUTPUT_DWARF_DATA8 (asm_out_file, AT_unsigned (a));\n \t      break;\n \t    default:\n \t      abort ();\n@@ -5114,9 +5119,9 @@ output_die (die)\n \t\t   ASM_COMMENT_START, dwarf_attr_name (a->dw_attr));\n \n \t  fputc ('\\n', asm_out_file);\n-\t  ASM_OUTPUT_DWARF_DATA8 (asm_out_file,\n-\t\t\t\t  a->dw_attr_val.v.val_long_long.hi,\n-\t\t\t\t  a->dw_attr_val.v.val_long_long.low);\n+\t  ASM_OUTPUT_DWARF_CONST_DOUBLE (asm_out_file,\n+\t\t\t\t\t a->dw_attr_val.v.val_long_long.hi,\n+\t\t\t\t\t a->dw_attr_val.v.val_long_long.low);\n \n \t  if (flag_debug_asm)\n \t    fprintf (asm_out_file,"}, {"sha": "9eee62b0c2f31d88ac7b3242581ccb3ddb25f2df", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21217bd0046bac65c93395d55186771c2633af04/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21217bd0046bac65c93395d55186771c2633af04/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=21217bd0046bac65c93395d55186771c2633af04", "patch": "@@ -4306,7 +4306,9 @@ host_integerp (t, pos)\n \t  && ((TREE_INT_CST_HIGH (t) == 0\n \t       && (HOST_WIDE_INT) TREE_INT_CST_LOW (t) >= 0)\n \t      || (! pos && TREE_INT_CST_HIGH (t) == -1\n-\t\t  && (HOST_WIDE_INT) TREE_INT_CST_LOW (t) < 0)));\n+\t\t  && (HOST_WIDE_INT) TREE_INT_CST_LOW (t) < 0)\n+\t      || (! pos && TREE_INT_CST_HIGH (t) == 0\n+\t\t  && TREE_UNSIGNED (TREE_TYPE (t)))));\n }\n \n /* Return the HOST_WIDE_INT least significant bits of T if it is an"}]}