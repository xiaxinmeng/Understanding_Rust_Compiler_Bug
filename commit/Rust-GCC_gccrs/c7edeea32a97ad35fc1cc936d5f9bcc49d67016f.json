{"sha": "c7edeea32a97ad35fc1cc936d5f9bcc49d67016f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdlZGVlYTMyYTk3YWQzNWZjMWNjOTM2ZDVmOWJjYzQ5ZDY3MDE2Zg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@lsd.ic.unicamp.br", "date": "1999-11-21T17:44:34Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gcc.gnu.org", "date": "1999-11-21T17:44:34Z"}, "message": "cp-tree.h (build_vec_delete): Remove `auto_delete' argument.\n\n* cp-tree.h (build_vec_delete): Remove `auto_delete' argument.\n* init.c (build_vec_delete, build_vec_delete_1): Likewise.\nAlways destruct virtual bases of array components, but never\ndelete them.\n(build_vec_init): Adjust invocations.\n(build_delete): Likewise.\n* decl2.c (delete_sanity): Likewise.\n\nFrom-SVN: r30606", "tree": {"sha": "630bef24fba9667dbd2edfe48655c39a3ca023d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/630bef24fba9667dbd2edfe48655c39a3ca023d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7edeea32a97ad35fc1cc936d5f9bcc49d67016f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7edeea32a97ad35fc1cc936d5f9bcc49d67016f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7edeea32a97ad35fc1cc936d5f9bcc49d67016f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7edeea32a97ad35fc1cc936d5f9bcc49d67016f/comments", "author": null, "committer": null, "parents": [{"sha": "5f1e6755ec622dd3ccb169980977fa2682c907c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1e6755ec622dd3ccb169980977fa2682c907c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f1e6755ec622dd3ccb169980977fa2682c907c0"}], "stats": {"total": 58, "additions": 21, "deletions": 37}, "files": [{"sha": "298bab77772343d772565a52dd074dc2a1b20b36", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7edeea32a97ad35fc1cc936d5f9bcc49d67016f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7edeea32a97ad35fc1cc936d5f9bcc49d67016f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c7edeea32a97ad35fc1cc936d5f9bcc49d67016f", "patch": "@@ -1,3 +1,13 @@\n+1999-11-21  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n+\n+\t* cp-tree.h (build_vec_delete): Remove `auto_delete' argument.\n+\t* init.c (build_vec_delete, build_vec_delete_1): Likewise.\n+\tAlways destruct virtual bases of array components, but never\n+\tdelete them.\n+\t(build_vec_init): Adjust invocations.\n+\t(build_delete): Likewise.\n+\t* decl2.c (delete_sanity): Likewise.\n+\n 1999-11-19  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (grok_method_quals): Return this pointer qualifiers."}, {"sha": "61a76868473e205ea81187e9400f74fb6e8cf655", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7edeea32a97ad35fc1cc936d5f9bcc49d67016f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7edeea32a97ad35fc1cc936d5f9bcc49d67016f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c7edeea32a97ad35fc1cc936d5f9bcc49d67016f", "patch": "@@ -3659,7 +3659,7 @@ extern tree build_vec_init\t\t\tPROTO((tree, tree, tree, tree, int));\n extern tree build_x_delete\t\t\tPROTO((tree, int, tree));\n extern tree build_delete\t\t\tPROTO((tree, tree, tree, int, int));\n extern tree build_vbase_delete\t\t\tPROTO((tree, tree));\n-extern tree build_vec_delete\t\t\tPROTO((tree, tree, tree, tree, int));\n+extern tree build_vec_delete\t\t\tPROTO((tree, tree, tree, int));\n extern tree create_temporary_var                PROTO((tree));\n extern void begin_init_stmts                    PROTO((tree *, tree *));\n extern tree finish_init_stmts                   PROTO((tree, tree));"}, {"sha": "21b2d446cf99830f0a495cab2ed881a3ad404759", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7edeea32a97ad35fc1cc936d5f9bcc49d67016f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7edeea32a97ad35fc1cc936d5f9bcc49d67016f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=c7edeea32a97ad35fc1cc936d5f9bcc49d67016f", "patch": "@@ -1194,8 +1194,7 @@ delete_sanity (exp, size, doing_vec, use_global_delete)\n     return build1 (NOP_EXPR, void_type_node, t);\n \n   if (doing_vec)\n-    return build_vec_delete (t, maxindex, integer_one_node,\n-\t\t\t     integer_zero_node, use_global_delete);\n+    return build_vec_delete (t, maxindex, integer_one_node, use_global_delete);\n   else\n     {\n       if (IS_AGGR_TYPE (TREE_TYPE (type))"}, {"sha": "da586e9bc604487873f6e3ef4c44e5d0d6d67a5b", "filename": "gcc/cp/init.c", "status": "modified", "additions": 9, "deletions": 34, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7edeea32a97ad35fc1cc936d5f9bcc49d67016f/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7edeea32a97ad35fc1cc936d5f9bcc49d67016f/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=c7edeea32a97ad35fc1cc936d5f9bcc49d67016f", "patch": "@@ -37,8 +37,7 @@ static void expand_aggr_vbase_init_1 PROTO((tree, tree, tree, tree));\n static void construct_virtual_bases PROTO((tree, tree, tree, tree, tree));\n static void expand_aggr_init_1 PROTO((tree, tree, tree, tree, int));\n static void expand_default_init PROTO((tree, tree, tree, tree, int));\n-static tree build_vec_delete_1 PROTO((tree, tree, tree, tree, tree,\n-\t\t\t\t      int));\n+static tree build_vec_delete_1 PROTO((tree, tree, tree, tree, int));\n static void perform_member_init PROTO((tree, tree, tree, int));\n static void sort_base_init PROTO((tree, tree *, tree *));\n static tree build_builtin_delete_call PROTO((tree));\n@@ -2434,10 +2433,9 @@ build_new_1 (exp)\n }\n \f\n static tree\n-build_vec_delete_1 (base, maxindex, type, auto_delete_vec, auto_delete,\n-\t\t    use_global_delete)\n+build_vec_delete_1 (base, maxindex, type, auto_delete_vec, use_global_delete)\n      tree base, maxindex, type;\n-     tree auto_delete_vec, auto_delete;\n+     tree auto_delete_vec;\n      int use_global_delete;\n {\n   tree virtual_size;\n@@ -2481,29 +2479,10 @@ build_vec_delete_1 (base, maxindex, type, auto_delete_vec, auto_delete,\n   controller = build (BIND_EXPR, void_type_node, tbase, NULL_TREE, NULL_TREE);\n   TREE_SIDE_EFFECTS (controller) = 1;\n \n-  if (auto_delete != integer_zero_node\n-      && auto_delete != integer_two_node)\n-    {\n-      tree base_tbd = cp_convert (ptype,\n-\t\t\t\t  build_binary_op (MINUS_EXPR,\n-\t\t\t\t\t\t   cp_convert (ptr_type_node, base),\n-\t\t\t\t\t\t   BI_header_size));\n-      /* This is the real size */\n-      virtual_size = size_binop (PLUS_EXPR, virtual_size, BI_header_size);\n-      body = build_expr_list (NULL_TREE,\n-\t\t\t      build_x_delete (base_tbd,\n-\t\t\t\t\t      2 | use_global_delete,\n-\t\t\t\t\t      virtual_size));\n-      body = fold (build (COND_EXPR, void_type_node,\n-\t\t\t  fold (build (BIT_AND_EXPR, integer_type_node,\n-\t\t\t\t       auto_delete, integer_one_node)),\n-\t\t\t  body, integer_zero_node));\n-    }\n-  else\n-    body = NULL_TREE;\n+  body = NULL_TREE;\n \n   body = tree_cons (NULL_TREE,\n-\t\t    build_delete (ptype, tbase, auto_delete,\n+\t\t    build_delete (ptype, tbase, integer_two_node,\n \t\t\t\t  LOOKUP_NORMAL|LOOKUP_DESTRUCTOR, 1),\n \t\t    body);\n \n@@ -2909,7 +2888,6 @@ build_vec_init (decl, base, maxindex, init, from_array)\n \t\t\t\t\t       iterator),\n \t\t\t      type,\n \t\t\t      /*auto_delete_vec=*/integer_zero_node,\n-\t\t\t      /*auto_delete=*/integer_zero_node,\n \t\t\t      /*use_global_delete=*/0);\n       finish_cleanup (e, try_block);\n     }\n@@ -3014,8 +2992,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n \t  return error_mark_node;\n \t}\n       return build_vec_delete (addr, array_type_nelts (type),\n-\t\t\t       auto_delete, integer_zero_node,\n-\t\t\t       use_global_delete);\n+\t\t\t       auto_delete, use_global_delete);\n     }\n   else\n     {\n@@ -3209,7 +3186,6 @@ build_vbase_delete (type, decl)\n    BASE is the expression that should yield the store to be deleted.\n    This function expands (or synthesizes) these calls itself.\n    AUTO_DELETE_VEC says whether the container (vector) should be deallocated.\n-   AUTO_DELETE say whether each item in the container should be deallocated.\n \n    This also calls delete for virtual baseclasses of elements of the vector.\n \n@@ -3221,10 +3197,9 @@ build_vbase_delete (type, decl)\n    be worth bothering.)  */\n \n tree\n-build_vec_delete (base, maxindex, auto_delete_vec, auto_delete,\n-\t\t  use_global_delete)\n+build_vec_delete (base, maxindex, auto_delete_vec, use_global_delete)\n      tree base, maxindex;\n-     tree auto_delete_vec, auto_delete;\n+     tree auto_delete_vec;\n      int use_global_delete;\n {\n   tree type;\n@@ -3266,6 +3241,6 @@ build_vec_delete (base, maxindex, auto_delete_vec, auto_delete,\n       return error_mark_node;\n     }\n \n-  return build_vec_delete_1 (base, maxindex, type, auto_delete_vec, auto_delete,\n+  return build_vec_delete_1 (base, maxindex, type, auto_delete_vec,\n \t\t\t     use_global_delete);\n }"}]}