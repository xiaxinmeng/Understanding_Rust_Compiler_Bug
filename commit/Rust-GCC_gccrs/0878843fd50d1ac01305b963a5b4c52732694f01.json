{"sha": "0878843fd50d1ac01305b963a5b4c52732694f01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg3ODg0M2ZkNTBkMWFjMDEzMDViOTYzYTViNGM1MjczMjY5NGYwMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-10T11:56:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-10T11:56:05Z"}, "message": "toplev.h (tree_rest_of_compilation): Remove.\n\n2012-04-10  Richard Guenther  <rguenther@suse.de>\n\n\t* toplev.h (tree_rest_of_compilation): Remove.\n\t* tree-optimize.c (tree_rest_of_compilation): Likewise.\n\t* cgraph.h (tree_rest_of_compilation): Declare.\n\t* tree-optimize.c (tree_rest_of_compilation): Move ...\n\t* cgraphunit.c (tree_rest_of_compilation): ... here.\n\t* cgraph.c (cgraph_add_new_function): Adjust.\n\t* Makefile.in (tree-optimize.o): Adjust.\n\t(cgraphunit.o): Likewise.\n\nFrom-SVN: r186274", "tree": {"sha": "42226e862a782231da6620d3afb31c4d4f6bec51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42226e862a782231da6620d3afb31c4d4f6bec51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0878843fd50d1ac01305b963a5b4c52732694f01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0878843fd50d1ac01305b963a5b4c52732694f01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0878843fd50d1ac01305b963a5b4c52732694f01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0878843fd50d1ac01305b963a5b4c52732694f01/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0d942d2117b785d768c5f2ab2813e4781e29e43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d942d2117b785d768c5f2ab2813e4781e29e43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0d942d2117b785d768c5f2ab2813e4781e29e43"}], "stats": {"total": 199, "additions": 106, "deletions": 93}, "files": [{"sha": "9628b8f3bbd812bc85edbeb558a16b742c0a104f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0878843fd50d1ac01305b963a5b4c52732694f01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0878843fd50d1ac01305b963a5b4c52732694f01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0878843fd50d1ac01305b963a5b4c52732694f01", "patch": "@@ -1,3 +1,14 @@\n+2012-04-10  Richard Guenther  <rguenther@suse.de>\n+\n+\t* toplev.h (tree_rest_of_compilation): Remove.\n+\t* tree-optimize.c (tree_rest_of_compilation): Likewise.\n+\t* cgraph.h (tree_rest_of_compilation): Declare.\n+\t* tree-optimize.c (tree_rest_of_compilation): Move ...\n+\t* cgraphunit.c (tree_rest_of_compilation): ... here.\n+\t* cgraph.c (cgraph_add_new_function): Adjust.\n+\t* Makefile.in (tree-optimize.o): Adjust.\n+\t(cgraphunit.o): Likewise.\n+\n 2012-04-10  Ulrich Weigand  <ulrich.weigand@linaro.org>\n \n \tPR tree-optimization/52870"}, {"sha": "726b9d34e99c3e56634777fd09679b39ee54c6b8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0878843fd50d1ac01305b963a5b4c52732694f01/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0878843fd50d1ac01305b963a5b4c52732694f01/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0878843fd50d1ac01305b963a5b4c52732694f01", "patch": "@@ -2556,7 +2556,7 @@ tree-optimize.o : tree-optimize.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_DUMP_H) toplev.h $(DIAGNOSTIC_CORE_H) $(FUNCTION_H) langhooks.h \\\n    $(FLAGS_H) $(CGRAPH_H) $(PLUGIN_H) \\\n    $(TREE_INLINE_H) $(GGC_H) graph.h $(CGRAPH_H) \\\n-   $(TREE_PASS_H) $(CFGLOOP_H) $(EXCEPT_H) $(REGSET_H)\n+   $(TREE_PASS_H) $(CFGLOOP_H) $(EXCEPT_H)\n \n gimplify.o : gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(GIMPLE_H) \\\n    $(DIAGNOSTIC_H) $(GIMPLE_H) $(TREE_INLINE_H) langhooks.h \\\n@@ -2922,7 +2922,7 @@ cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(FIBHEAP_H) output.h $(PARAMS_H) $(RTL_H) $(TIMEVAR_H) $(IPA_PROP_H) \\\n    gt-cgraphunit.h tree-iterator.h $(COVERAGE_H) $(TREE_DUMP_H) \\\n    tree-pretty-print.h gimple-pretty-print.h ipa-inline.h $(IPA_UTILS_H) \\\n-   $(LTO_STREAMER_H)\n+   $(LTO_STREAMER_H) output.h $(REGSET_H)\n cgraphbuild.o : cgraphbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(CGRAPH_H) intl.h pointer-set.h $(GIMPLE_H) \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) $(IPA_UTILS_H) $(EXCEPT_H) \\"}, {"sha": "6c315072d9f35fbcfc3549f2977831203ab0e23b", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0878843fd50d1ac01305b963a5b4c52732694f01/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0878843fd50d1ac01305b963a5b4c52732694f01/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=0878843fd50d1ac01305b963a5b4c52732694f01", "patch": "@@ -2466,7 +2466,7 @@ cgraph_add_new_function (tree fndecl, bool lowered)\n \tif (!gimple_in_ssa_p (DECL_STRUCT_FUNCTION (fndecl)))\n \t  execute_pass_list (pass_early_local_passes.pass.sub);\n \tbitmap_obstack_release (NULL);\n-\ttree_rest_of_compilation (fndecl);\n+\ttree_rest_of_compilation (node);\n \tpop_cfun ();\n \tcurrent_function_decl = NULL;\n \tbreak;"}, {"sha": "dc085e181d0084d39af616a515ed0a092672c2b0", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0878843fd50d1ac01305b963a5b4c52732694f01/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0878843fd50d1ac01305b963a5b4c52732694f01/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=0878843fd50d1ac01305b963a5b4c52732694f01", "patch": "@@ -565,6 +565,7 @@ void cgraph_mark_if_needed (tree);\n void cgraph_analyze_function (struct cgraph_node *);\n void cgraph_finalize_compilation_unit (void);\n void cgraph_optimize (void);\n+void tree_rest_of_compilation (struct cgraph_node *);\n void cgraph_mark_needed_node (struct cgraph_node *);\n void cgraph_mark_address_taken_node (struct cgraph_node *);\n void cgraph_mark_reachable_node (struct cgraph_node *);"}, {"sha": "9d2c46c374ef8b7c0fbadd72afb221ad537669b7", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0878843fd50d1ac01305b963a5b4c52732694f01/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0878843fd50d1ac01305b963a5b4c52732694f01/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=0878843fd50d1ac01305b963a5b4c52732694f01", "patch": "@@ -111,6 +111,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n+#include \"output.h\"\n #include \"rtl.h\"\n #include \"tree-flow.h\"\n #include \"tree-inline.h\"\n@@ -141,6 +142,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-inline.h\"\n #include \"ipa-utils.h\"\n #include \"lto-streamer.h\"\n+#include \"regset.h\"     /* FIXME: For reg_obstack.  */\n \n static void cgraph_expand_all_functions (void);\n static void cgraph_mark_functions_to_output (void);\n@@ -1768,6 +1770,94 @@ assemble_thunks_and_aliases (struct cgraph_node *node)\n       }\n }\n \n+/* For functions-as-trees languages, this performs all optimization and\n+   compilation for FNDECL.  */\n+\n+void\n+tree_rest_of_compilation (struct cgraph_node *node)\n+{\n+  tree fndecl = node->decl;\n+  location_t saved_loc;\n+\n+  timevar_push (TV_REST_OF_COMPILATION);\n+\n+  gcc_assert (cgraph_global_info_ready);\n+\n+  /* Initialize the default bitmap obstack.  */\n+  bitmap_obstack_initialize (NULL);\n+\n+  /* Initialize the RTL code for the function.  */\n+  current_function_decl = fndecl;\n+  saved_loc = input_location;\n+  input_location = DECL_SOURCE_LOCATION (fndecl);\n+  init_function_start (fndecl);\n+\n+  gimple_register_cfg_hooks ();\n+\n+  bitmap_obstack_initialize (&reg_obstack); /* FIXME, only at RTL generation*/\n+\n+  execute_all_ipa_transforms ();\n+\n+  /* Perform all tree transforms and optimizations.  */\n+\n+  /* Signal the start of passes.  */\n+  invoke_plugin_callbacks (PLUGIN_ALL_PASSES_START, NULL);\n+\n+  execute_pass_list (all_passes);\n+\n+  /* Signal the end of passes.  */\n+  invoke_plugin_callbacks (PLUGIN_ALL_PASSES_END, NULL);\n+\n+  bitmap_obstack_release (&reg_obstack);\n+\n+  /* Release the default bitmap obstack.  */\n+  bitmap_obstack_release (NULL);\n+\n+  set_cfun (NULL);\n+\n+  /* If requested, warn about function definitions where the function will\n+     return a value (usually of some struct or union type) which itself will\n+     take up a lot of stack space.  */\n+  if (warn_larger_than && !DECL_EXTERNAL (fndecl) && TREE_TYPE (fndecl))\n+    {\n+      tree ret_type = TREE_TYPE (TREE_TYPE (fndecl));\n+\n+      if (ret_type && TYPE_SIZE_UNIT (ret_type)\n+\t  && TREE_CODE (TYPE_SIZE_UNIT (ret_type)) == INTEGER_CST\n+\t  && 0 < compare_tree_int (TYPE_SIZE_UNIT (ret_type),\n+\t\t\t\t   larger_than_size))\n+\t{\n+\t  unsigned int size_as_int\n+\t    = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (ret_type));\n+\n+\t  if (compare_tree_int (TYPE_SIZE_UNIT (ret_type), size_as_int) == 0)\n+\t    warning (OPT_Wlarger_than_, \"size of return value of %q+D is %u bytes\",\n+                     fndecl, size_as_int);\n+\t  else\n+\t    warning (OPT_Wlarger_than_, \"size of return value of %q+D is larger than %wd bytes\",\n+                     fndecl, larger_than_size);\n+\t}\n+    }\n+\n+  gimple_set_body (fndecl, NULL);\n+  if (DECL_STRUCT_FUNCTION (fndecl) == 0\n+      && !cgraph_get_node (fndecl)->origin)\n+    {\n+      /* Stop pointing to the local nodes about to be freed.\n+\t But DECL_INITIAL must remain nonzero so we know this\n+\t was an actual function definition.\n+\t For a nested function, this is done in c_pop_function_context.\n+\t If rest_of_compilation set this to 0, leave it 0.  */\n+      if (DECL_INITIAL (fndecl) != 0)\n+\tDECL_INITIAL (fndecl) = error_mark_node;\n+    }\n+\n+  input_location = saved_loc;\n+\n+  ggc_collect ();\n+  timevar_pop (TV_REST_OF_COMPILATION);\n+}\n+\n /* Expand function specified by NODE.  */\n \n static void\n@@ -1783,7 +1873,7 @@ cgraph_expand_function (struct cgraph_node *node)\n   gcc_assert (node->lowered);\n \n   /* Generate RTL for the body of DECL.  */\n-  tree_rest_of_compilation (decl);\n+  tree_rest_of_compilation (node);\n \n   /* Make sure that BE didn't give up on compiling.  */\n   gcc_assert (TREE_ASM_WRITTEN (decl));"}, {"sha": "307fb64ad5792e746657cd1ca37bd992b65d3b3c", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0878843fd50d1ac01305b963a5b4c52732694f01/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0878843fd50d1ac01305b963a5b4c52732694f01/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=0878843fd50d1ac01305b963a5b4c52732694f01", "patch": "@@ -29,7 +29,6 @@ extern unsigned int save_decoded_options_count;\n extern int toplev_main (int, char **);\n extern void rest_of_decl_compilation (tree, int, int);\n extern void rest_of_type_compilation (tree, int);\n-extern void tree_rest_of_compilation (tree);\n extern void init_optimization_passes (void);\n extern void finish_optimization_passes (void);\n extern bool enable_rtl_dump_file (void);"}, {"sha": "7cd3ef35c971fb2233ce016f59e51086df23a910", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0878843fd50d1ac01305b963a5b4c52732694f01/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0878843fd50d1ac01305b963a5b4c52732694f01/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=0878843fd50d1ac01305b963a5b4c52732694f01", "patch": "@@ -45,7 +45,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"except.h\"\n #include \"plugin.h\"\n-#include \"regset.h\"\t/* FIXME: For reg_obstack.  */\n \n /* Gate: execute, or not, all of the non-trivial optimizations.  */\n \n@@ -366,90 +365,3 @@ struct gimple_opt_pass pass_init_datastructures =\n   0\t\t\t\t\t/* todo_flags_finish */\n  }\n };\n-\f\n-/* For functions-as-trees languages, this performs all optimization and\n-   compilation for FNDECL.  */\n-\n-void\n-tree_rest_of_compilation (tree fndecl)\n-{\n-  location_t saved_loc;\n-\n-  timevar_push (TV_REST_OF_COMPILATION);\n-\n-  gcc_assert (cgraph_global_info_ready);\n-\n-  /* Initialize the default bitmap obstack.  */\n-  bitmap_obstack_initialize (NULL);\n-\n-  /* Initialize the RTL code for the function.  */\n-  current_function_decl = fndecl;\n-  saved_loc = input_location;\n-  input_location = DECL_SOURCE_LOCATION (fndecl);\n-  init_function_start (fndecl);\n-\n-  gimple_register_cfg_hooks ();\n-\n-  bitmap_obstack_initialize (&reg_obstack); /* FIXME, only at RTL generation*/\n-\n-  execute_all_ipa_transforms ();\n-\n-  /* Perform all tree transforms and optimizations.  */\n-\n-  /* Signal the start of passes.  */\n-  invoke_plugin_callbacks (PLUGIN_ALL_PASSES_START, NULL);\n-\n-  execute_pass_list (all_passes);\n-\n-  /* Signal the end of passes.  */\n-  invoke_plugin_callbacks (PLUGIN_ALL_PASSES_END, NULL);\n-\n-  bitmap_obstack_release (&reg_obstack);\n-\n-  /* Release the default bitmap obstack.  */\n-  bitmap_obstack_release (NULL);\n-\n-  set_cfun (NULL);\n-\n-  /* If requested, warn about function definitions where the function will\n-     return a value (usually of some struct or union type) which itself will\n-     take up a lot of stack space.  */\n-  if (warn_larger_than && !DECL_EXTERNAL (fndecl) && TREE_TYPE (fndecl))\n-    {\n-      tree ret_type = TREE_TYPE (TREE_TYPE (fndecl));\n-\n-      if (ret_type && TYPE_SIZE_UNIT (ret_type)\n-\t  && TREE_CODE (TYPE_SIZE_UNIT (ret_type)) == INTEGER_CST\n-\t  && 0 < compare_tree_int (TYPE_SIZE_UNIT (ret_type),\n-\t\t\t\t   larger_than_size))\n-\t{\n-\t  unsigned int size_as_int\n-\t    = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (ret_type));\n-\n-\t  if (compare_tree_int (TYPE_SIZE_UNIT (ret_type), size_as_int) == 0)\n-\t    warning (OPT_Wlarger_than_, \"size of return value of %q+D is %u bytes\",\n-                     fndecl, size_as_int);\n-\t  else\n-\t    warning (OPT_Wlarger_than_, \"size of return value of %q+D is larger than %wd bytes\",\n-                     fndecl, larger_than_size);\n-\t}\n-    }\n-\n-  gimple_set_body (fndecl, NULL);\n-  if (DECL_STRUCT_FUNCTION (fndecl) == 0\n-      && !cgraph_get_node (fndecl)->origin)\n-    {\n-      /* Stop pointing to the local nodes about to be freed.\n-\t But DECL_INITIAL must remain nonzero so we know this\n-\t was an actual function definition.\n-\t For a nested function, this is done in c_pop_function_context.\n-\t If rest_of_compilation set this to 0, leave it 0.  */\n-      if (DECL_INITIAL (fndecl) != 0)\n-\tDECL_INITIAL (fndecl) = error_mark_node;\n-    }\n-\n-  input_location = saved_loc;\n-\n-  ggc_collect ();\n-  timevar_pop (TV_REST_OF_COMPILATION);\n-}"}]}