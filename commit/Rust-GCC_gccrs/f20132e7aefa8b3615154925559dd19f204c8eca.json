{"sha": "f20132e7aefa8b3615154925559dd19f204c8eca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIwMTMyZTdhZWZhOGIzNjE1MTU0OTI1NTU5ZGQxOWYyMDRjOGVjYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-09-19T08:59:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-09-19T08:59:06Z"}, "message": "re PR tree-optimization/54132 (Incorrect loop transformation with -ftree-loop-distribute-patterns)\n\n2012-09-19  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/54132\n\t* tree-loop-distribution.c (classify_partition): Properly\n\tcheck dependences for memmove.\n\t* tree-data-ref.h (compute_affine_dependence): Declare.\n\t* tree-data-ref.c (compute_affine_dependence): Export.\n\n\t* gcc.dg/tree-ssa/ldist-21.c: New testcase.\n\t* gcc.dg/torture/pr54132.c: Likewise.\n\nFrom-SVN: r191463", "tree": {"sha": "7f44b8ca0eade367dc7e06f3690a419c4745c5d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f44b8ca0eade367dc7e06f3690a419c4745c5d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f20132e7aefa8b3615154925559dd19f204c8eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20132e7aefa8b3615154925559dd19f204c8eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f20132e7aefa8b3615154925559dd19f204c8eca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20132e7aefa8b3615154925559dd19f204c8eca/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f7d0c571f76a47e432cecdc04d2d89dc734cd36a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d0c571f76a47e432cecdc04d2d89dc734cd36a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7d0c571f76a47e432cecdc04d2d89dc734cd36a"}], "stats": {"total": 80, "additions": 79, "deletions": 1}, "files": [{"sha": "fc19389247104badb3572eb49a6329ef3701d1c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20132e7aefa8b3615154925559dd19f204c8eca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20132e7aefa8b3615154925559dd19f204c8eca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f20132e7aefa8b3615154925559dd19f204c8eca", "patch": "@@ -1,3 +1,11 @@\n+2012-09-19  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54132\n+\t* tree-loop-distribution.c (classify_partition): Properly\n+\tcheck dependences for memmove.\n+\t* tree-data-ref.h (compute_affine_dependence): Declare.\n+\t* tree-data-ref.c (compute_affine_dependence): Export.\n+\n 2012-09-19  Zhenqiang Chen <zhenqiang.chen@arm.com>\n \n \tPR middle-end/54364"}, {"sha": "bf497ee1169c5c11054835e5ab19dd68c9295a14", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20132e7aefa8b3615154925559dd19f204c8eca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20132e7aefa8b3615154925559dd19f204c8eca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f20132e7aefa8b3615154925559dd19f204c8eca", "patch": "@@ -1,3 +1,9 @@\n+2012-09-19  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54132\n+\t* gcc.dg/tree-ssa/ldist-21.c: New testcase.\n+\t* gcc.dg/torture/pr54132.c: Likewise.\n+\n 2012-09-19  Terry Guo  <terry.guo@arm.com>\n \n \t* lib/gcc-dg.exp (dg_runtest_extra_prunes): New variable to define"}, {"sha": "97bc01caf8de79010ed12613afb7be91915b0f8c", "filename": "gcc/testsuite/gcc.dg/torture/pr54132.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20132e7aefa8b3615154925559dd19f204c8eca/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr54132.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20132e7aefa8b3615154925559dd19f204c8eca/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr54132.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr54132.c?ref=f20132e7aefa8b3615154925559dd19f204c8eca", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+void foo(char *p, int n)\n+{\n+  int i;\n+  for (i = 1; i < n; i++)\n+    p[i] = p[i - 1];\n+}\n+int main()\n+{\n+  char a[1024];\n+  a[0] = 1;\n+  foo (a, 1024);\n+  if (a[1023] != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "35f01aba2a6a458efcdaa16b46c63bfb549b7773", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ldist-21.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20132e7aefa8b3615154925559dd19f204c8eca/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20132e7aefa8b3615154925559dd19f204c8eca/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-21.c?ref=f20132e7aefa8b3615154925559dd19f204c8eca", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-ldist-details\" } */\n+\n+void bar(char *p, int n)\n+{\n+  int i;\n+  for (i = 1; i < n; i++)\n+    p[i-1] = p[i];\n+}\n+\n+/* { dg-final { scan-tree-dump \"generated memmove\" \"ldist\" } } */"}, {"sha": "4f6df91ec28776207d14ef784e948e398f2ce845", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20132e7aefa8b3615154925559dd19f204c8eca/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20132e7aefa8b3615154925559dd19f204c8eca/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=f20132e7aefa8b3615154925559dd19f204c8eca", "patch": "@@ -4130,7 +4130,7 @@ ddr_consistent_p (FILE *file,\n    relation the first time we detect a CHREC_KNOWN element for a given\n    subscript.  */\n \n-static void\n+void\n compute_affine_dependence (struct data_dependence_relation *ddr,\n \t\t\t   struct loop *loop_nest)\n {"}, {"sha": "b00a4f752b053747be52a17c317eda9f8b3334de", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20132e7aefa8b3615154925559dd19f204c8eca/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20132e7aefa8b3615154925559dd19f204c8eca/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=f20132e7aefa8b3615154925559dd19f204c8eca", "patch": "@@ -396,6 +396,8 @@ struct data_reference *create_data_ref (loop_p, loop_p, tree, gimple, bool);\n extern bool find_loop_nest (struct loop *, VEC (loop_p, heap) **);\n extern struct data_dependence_relation *initialize_data_dependence_relation\n      (struct data_reference *, struct data_reference *, VEC (loop_p, heap) *); \n+extern void compute_affine_dependence (struct data_dependence_relation *,\n+\t\t\t\t       loop_p);\n extern void compute_self_dependence (struct data_dependence_relation *);\n extern bool compute_all_dependences (VEC (data_reference_p, heap) *,\n \t\t\t\t     VEC (ddr_p, heap) **, VEC (loop_p, heap) *,"}, {"sha": "b24af33d7abc11e51708072d8016374a6c2ce9d5", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20132e7aefa8b3615154925559dd19f204c8eca/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20132e7aefa8b3615154925559dd19f204c8eca/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=f20132e7aefa8b3615154925559dd19f204c8eca", "patch": "@@ -1011,6 +1011,39 @@ classify_partition (loop_p loop, struct graph *rdg, partition_t partition)\n \t  || !operand_equal_p (DR_STEP (single_store),\n \t\t\t       DR_STEP (single_load), 0))\n \treturn;\n+      /* Now check that if there is a dependence this dependence is\n+         of a suitable form for memmove.  */\n+      VEC(loop_p, heap) *loops = NULL;\n+      ddr_p ddr;\n+      VEC_safe_push (loop_p, heap, loops, loop);\n+      ddr = initialize_data_dependence_relation (single_load, single_store,\n+\t\t\t\t\t\t loops);\n+      compute_affine_dependence (ddr, loop);\n+      VEC_free (loop_p, heap, loops);\n+      if (DDR_ARE_DEPENDENT (ddr) == chrec_dont_know)\n+\t{\n+\t  free_dependence_relation (ddr);\n+\t  return;\n+\t}\n+      if (DDR_ARE_DEPENDENT (ddr) != chrec_known)\n+\t{\n+\t  if (DDR_NUM_DIST_VECTS (ddr) == 0)\n+\t    {\n+\t      free_dependence_relation (ddr);\n+\t      return;\n+\t    }\n+\t  lambda_vector dist_v;\n+\t  FOR_EACH_VEC_ELT (lambda_vector, DDR_DIST_VECTS (ddr), i, dist_v)\n+\t    {\n+\t      int dist = dist_v[index_in_loop_nest (loop->num,\n+\t\t\t\t\t\t    DDR_LOOP_NEST (ddr))];\n+\t      if (dist > 0 && !DDR_REVERSED_P (ddr))\n+\t\t{\n+\t\t  free_dependence_relation (ddr);\n+\t\t  return;\n+\t\t}\n+\t    }\n+\t}\n       partition->kind = PKIND_MEMCPY;\n       partition->main_dr = single_store;\n       partition->secondary_dr = single_load;"}]}