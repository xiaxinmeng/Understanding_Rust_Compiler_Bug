{"sha": "6934615b9736d0a777ce7f6933129ea1cdd2dd23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkzNDYxNWI5NzM2ZDBhNzc3Y2U3ZjY5MzMxMjllYTFjZGQyZGQyMw==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@cygnus.com", "date": "2000-12-01T01:48:34Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "2000-12-01T01:48:34Z"}, "message": "Array.java: New file from classpath.\n\n\t* Array.java: New file from classpath.\n\t* BatchUpdateException.java: Ditto.\n\t* Blob.java: Ditto.\n\t* Clob.java: Ditto.\n\t* Ref.java: Ditto.\n\t* SQLData.java: Ditto.\n\t* SQLInput.java: Ditto.\n\t* SQLOutput.java: Ditto.\n\t* Struct.java: Ditto.\n\t* CallableStatement.java: Merged file from claspath.\n\t* Connection.java: Ditto.\n\t* DataTruncation.java: Ditto.\n\t* DatabaseMetaData.java: Ditto.\n\t* DriverManager.java: Ditto.\n\t* PreparedStatement.java: Ditto.\n\t* ResultSet.java: Ditto.\n\t* ResultSetMetaData.java: Ditto.\n\t* SQLException.java: Ditto.\n\t* SQLWarning.java: Ditto.\n\t* Statement.java: Ditto.\n\t* Types.java: Ditto.\n\nFrom-SVN: r37906", "tree": {"sha": "7c67e6325a21b9cf53bbdc5648f2e7523a514436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c67e6325a21b9cf53bbdc5648f2e7523a514436"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6934615b9736d0a777ce7f6933129ea1cdd2dd23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6934615b9736d0a777ce7f6933129ea1cdd2dd23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6934615b9736d0a777ce7f6933129ea1cdd2dd23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6934615b9736d0a777ce7f6933129ea1cdd2dd23/comments", "author": null, "committer": null, "parents": [{"sha": "95ac07b0f4d9916c7a850e3b427cbc768819d742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ac07b0f4d9916c7a850e3b427cbc768819d742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95ac07b0f4d9916c7a850e3b427cbc768819d742"}], "stats": {"total": 3830, "additions": 3810, "deletions": 20}, "files": [{"sha": "85dcf04fb9a2533403390da5aef6f59195568a2f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -1,3 +1,27 @@\n+2000-11-30  Warren Levy  <warrenl@cygnus.com>\n+\n+\t* Array.java: New file from classpath.\n+\t* BatchUpdateException.java: Ditto.\n+\t* Blob.java: Ditto.\n+\t* Clob.java: Ditto.\n+\t* Ref.java: Ditto.\n+\t* SQLData.java: Ditto.\n+\t* SQLInput.java: Ditto.\n+\t* SQLOutput.java: Ditto.\n+\t* Struct.java: Ditto.\n+\t* CallableStatement.java: Merged file from claspath.\n+\t* Connection.java: Ditto.\n+\t* DataTruncation.java: Ditto.\n+\t* DatabaseMetaData.java: Ditto.\n+\t* DriverManager.java: Ditto.\n+\t* PreparedStatement.java: Ditto.\n+\t* ResultSet.java: Ditto.\n+\t* ResultSetMetaData.java: Ditto.\n+\t* SQLException.java: Ditto.\n+\t* SQLWarning.java: Ditto.\n+\t* Statement.java: Ditto.\n+\t* Types.java: Ditto.\n+\n 2000-11-29  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* java/lang/natSystem.cc (init_properties): Set user.language and"}, {"sha": "0043f934aaab0b13ef8b31c18b4cf941d7f3dc92", "filename": "libjava/java/sql/Array.java", "status": "added", "additions": 226, "deletions": 0, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FArray.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FArray.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FArray.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -0,0 +1,226 @@\n+/* Array.java -- Interface for accessing SQL array object\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+import java.util.Map;\n+\n+/**\n+  * This interface provides methods for accessing SQL array types\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface Array\n+{\n+\n+/**\n+  * This method returns the name of the SQL type of the elements in this\n+  * array.  This name is database specific.\n+  *\n+  * @param The name of the SQL type of the elements in this array.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getBaseTypeName() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the JDBC type identifier of the elements in this\n+  * array.  This will be one of the values defined in the <code>Types</code>\n+  * class.\n+  *\n+  * @return The JDBC type of the elements in this array.\n+  *\n+  * @exception SQLException If an error occurs.\n+  * \n+  * @see Types\n+  */\n+public abstract int\n+getBaseType() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the contents of this array.  This object returned\n+  * will be an array of Java objects of the appropriate types.\n+  *\n+  * @return The contents of the array as an array of Java objects.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Object\n+getArray() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the contents of this array.  The specified\n+  * <code>Map</code> will be used to override selected mappings between\n+  * SQL types and Java classes.\n+  * \n+  * @param map A mapping of SQL types to Java classes.\n+  *\n+  * @return The contents of the array as an array of Java objects.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Object\n+getArray(Map map) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a portion of this array starting at index\n+  * <code>offset</code> into the array and continuing for <code>length</code>\n+  * elements.  Fewer than the requested number of elements will be\n+  * returned if the array does not contain the requested number of elements.\n+  * The object returned will be an array of Java objects of\n+  * the appropriate types.\n+  *\n+  * @param offset The offset into this array to start returning elements from.\n+  * @param count The requested number of elements to return.\n+  *\n+  * @return The requested portion of the array.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Object\n+getArray(long offset, int count) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a portion of this array starting at index\n+  * <code>offset</code> into the array and continuing for <code>length</code>\n+  * elements.  Fewer than the requested number of elements will be\n+  * returned if the array does not contain the requested number of elements.\n+  * The object returned will be an array of Java objects.  The specified\n+  * <code>Map</code> will be used for overriding selected SQL type to\n+  * Java class mappings.\n+  *\n+  * @param offset The offset into this array to start returning elements from.\n+  * @param count The requested number of elements to return.\n+  * @param map A mapping of SQL types to Java classes.\n+  *\n+  * @return The requested portion of the array.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Object\n+getArray(long index, int count, Map map) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the elements in the array as a <code>ResultSet</code>.\n+  * Each row of the result set will have two columns.  The first will be\n+  * the index into the array of that row's contents.  The second will be\n+  * the actual value of that array element.\n+  *\n+  * @return The elements of this array as a <code>ResultSet</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract ResultSet\n+getResultSet() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the elements in the array as a <code>ResultSet</code>.\n+  * Each row of the result set will have two columns.  The first will be\n+  * the index into the array of that row's contents.  The second will be\n+  * the actual value of that array element.  The specified <code>Map</code>\n+  * will be used to override selected default mappings of SQL types to\n+  * Java classes.\n+  *\n+  * @param map A mapping of SQL types to Java classes.\n+  *\n+  * @return The elements of this array as a <code>ResultSet</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract ResultSet\n+getResultSet(Map map) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a portion of the array as a <code>ResultSet</code>.\n+  * The returned portion will start at index <code>offset</code> into the\n+  * array and up to <code>length</code> elements will be returned.\n+  * <p>\n+  * Each row of the result set will have two columns.  The first will be\n+  * the index into the array of that row's contents.  The second will be\n+  * the actual value of that array element.\n+  *\n+  * @param offset The index into the array to start returning elements from.\n+  * @param length The requested number of elements to return.\n+  *\n+  * @return The requested elements of this array as a <code>ResultSet</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract ResultSet\n+getResultSet(long index, int count) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a portion of the array as a <code>ResultSet</code>.\n+  * The returned portion will start at index <code>offset</code> into the\n+  * array and up to <code>length</code> elements will be returned.\n+  * <p>\n+  * Each row of the result set will have two columns.  The first will be\n+  * the index into the array of that row's contents.  The second will be\n+  * the actual value of that array element.  The specified <code>Map</code>\n+  * will be used to override selected default mappings of SQL types to\n+  * Java classes.\n+  *\n+  * @param offset The index into the array to start returning elements from.\n+  * @param length The requested number of elements to return.\n+  * @param map A mapping of SQL types to Java classes.\n+  *\n+  * @return The requested elements of this array as a <code>ResultSet</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract ResultSet\n+getResultSet(long index, int count, Map map) throws SQLException;\n+\n+} // interface Array\n+"}, {"sha": "ff325b48aa989558632191239135250498553e2b", "filename": "libjava/java/sql/BatchUpdateException.java", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FBatchUpdateException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FBatchUpdateException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FBatchUpdateException.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -0,0 +1,169 @@\n+/* BatchUpdateException.java -- Exception for batch oriented SQL errors\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+/**\n+  * This class extends <code>SQLException</code> to count the successful\n+  * updates in each statement in a batch that was successfully updated prior \n+  * to the error.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class BatchUpdateException extends SQLException \n+{\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * This is the array of update counts for the commands which completed\n+  * successfully prior to the error.\n+  * @serialized\n+  */\n+private int[] updateCounts;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * This method initializes a new instance of <code>BatchUpdateException</code>\n+  * with no descriptive error message.  The SQL state and update count will\n+  * be initialized to <code>null</code> and the vendor specific error code will \n+  * initialized to 0.\n+  */\n+public\n+BatchUpdateException()\n+{\n+  super();\n+} \n+\n+/*************************************************************************/\n+\n+/**\n+  * This method initializes a new instance of <code>BatchUpdateException</code>\n+  * with the specified update count information and no descriptive error\n+  * message.  This SQL state will be initialized to <code>null</code> and\n+  * the vendor specific error code will be initialized to 0.\n+  *\n+  * @param updateCounts The update count array.\n+  */\n+public\n+BatchUpdateException(int[] updateCounts)\n+{\n+  super();\n+  \n+  this.updateCounts = updateCounts;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method initializes a new instance of <code>BatchUpdateException</code>\n+  * with the specified descriptive error message and update count information.\n+  * The SQL state will be initialized to <code>null</code> and the vendor\n+  * specific error code will be initialized to 0.\n+  *\n+  * @param message The descriptive error message.\n+  * @param updateCounts The update count information for this error.\n+  */\n+public\n+BatchUpdateException(String message, int[] updateCounts)\n+{\n+  super(message);\n+\n+  this.updateCounts = updateCounts;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method initializes a new instance of <code>BatchUpdateException</code>\n+  * with the specified descriptive error message, SQL state, and update count\n+  * information.  The vendor specific error code will be initialized to 0.\n+  *\n+  * @param message The descriptive error message.\n+  * @param SQLState The SQL state information for this error.\n+  * @param updateCounts The update count information for this error.\n+  */\n+public\n+BatchUpdateException(String message, String SQLState, int[] updateCounts)\n+{\n+  super(message, SQLState);\n+\n+  this.updateCounts = updateCounts;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method initializes a new instance of <code>BatchUpdateException</code>\n+  * with the specified descriptive error message, SQL state, vendor\n+  * specific error code and update count information.\n+  *\n+  * @param message The descriptive error message.\n+  * @param SQLState The SQL state information for this error.\n+  * @param vendorCode The vendor specific error code for this error.\n+  * @param updateCounts The update count information for this error.\n+  */\n+public\n+BatchUpdateException(String message, String SQLState, int vendorCode,\n+                     int[] updateCounts)\n+{\n+  super(message, SQLState, vendorCode);\n+\n+  this.updateCounts = updateCounts;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * This method returns the update count information for this error.  If\n+  * not <code>null</code> this is an array of <code>int</code>'s that are\n+  * the update accounts for each command that was successfully executed.\n+  * The array elements are in the order that the commands were executed.\n+  *\n+  * @return The update count information, which may be <code>null</code>.\n+  */\n+public int[]\n+getUpdateCounts()\n+{\n+  return(updateCounts);\n+}\n+\n+} // class BatchUpdateException\n+"}, {"sha": "79a4504d8f222845bb50be5a64828c02f8a92b43", "filename": "libjava/java/sql/Blob.java", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FBlob.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FBlob.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FBlob.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -0,0 +1,120 @@\n+/* Blob.java -- Access a SQL Binary Large OBject.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+import java.io.InputStream;\n+\n+/**\n+  * This interface specified methods for accessing a SQL BLOB (Binary\n+  * Large OBject) type.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface Blob\n+{\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the number of bytes in the BLOB.\n+  *\n+  * @return The number of bytes in the BLOB.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract long\n+length() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns up to the requested bytes of this BLOB as a \n+  * <code>byte</code> array.\n+  *\n+  * @param offset The index into the BLOB to start returning bytes from.\n+  * @param length The requested number of bytes to return.\n+  *\n+  * @return The requested bytes from the BLOB.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract byte[]\n+getBytes(long offset, int length) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a stream that will read the bytes of the BLOB.\n+  *\n+  * @return A stream that will read the bytes of the BLOB.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract InputStream\n+getBinaryStream() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the index into the BLOB at which the first instance\n+  * of the specified bytes occur.  The searching starts at the specified\n+  * index into the BLOB.\n+  *\n+  * @param pattern The byte pattern to search for.\n+  * @param offset The index into the BLOB to starting searching for the pattern.\n+  *\n+  * @return The offset at which the pattern is first found, or -1 if the\n+  * pattern is not found.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract long\n+position(byte[] pattern, long offset) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the index into the BLOB at which the first instance\n+  * of the specified pattern occurs.  The searching starts at the specified\n+  * index into this BLOB.  The bytes in the specified <code>Blob</code> are\n+  * used as the search pattern.\n+  *\n+  * @param pattern The <code>Blob</code> containing the byte pattern to\n+  * search for.\n+  * @param offset The index into the BLOB to starting searching for the pattern.\n+  *\n+  * @return The offset at which the pattern is first found, or -1 if the\n+  * pattern is not found.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract long\n+position(Blob pattern, long offset) throws SQLException;\n+\n+} // interface Blob\n+"}, {"sha": "9a1547e94da22db8d56001125c8ea97d4e3e4380", "filename": "libjava/java/sql/CallableStatement.java", "status": "modified", "additions": 156, "deletions": 1, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FCallableStatement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FCallableStatement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FCallableStatement.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -1,5 +1,5 @@\n /* CallableStatement.java -- A statement for calling stored procedures.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -31,6 +31,7 @@\n import java.io.Reader;\n import java.math.BigDecimal;\n import java.util.Calendar;\n+import java.util.Map;\n \n /**\n   * This interface provides a mechanism for calling stored procedures.\n@@ -86,6 +87,22 @@ public interface CallableStatement extends PreparedStatement\n \n /*************************************************************************/\n \n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>Object</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  * @param map The mapping to use for conversion from SQL to Java types.\n+  *\n+  * @return The parameter value as an <code>Object</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Object\n+getObject(int index, Map map) throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method returns the value of the specified parameter as a Java\n   * <code>boolean</code>.\n@@ -191,6 +208,21 @@ public interface CallableStatement extends PreparedStatement\n \n /*************************************************************************/\n \n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>BigDecimal</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a <code>BigDecimal</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract BigDecimal\n+getBigDecimal(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method returns the value of the specified parameter as a Java\n   * <code>BigDecimal</code>.\n@@ -237,6 +269,22 @@ public interface CallableStatement extends PreparedStatement\n \n /*************************************************************************/\n \n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>java.sql.Date</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  * @param calendar The <code>Calendar</code> to use for timezone and locale.\n+  *\n+  * @return The parameter value as a <code>java.sql.Date</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Date\n+getDate(int index, Calendar calendar) throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method returns the value of the specified parameter as a Java\n   * <code>java.sql.Time</code>.\n@@ -252,6 +300,22 @@ public interface CallableStatement extends PreparedStatement\n \n /*************************************************************************/\n \n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>java.sql.Time</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  * @param calendar The <code>Calendar</code> to use for timezone and locale.\n+  *\n+  * @return The parameter value as a <code>java.sql.Time</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Time\n+getTime(int index, Calendar calendar) throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method returns the value of the specified parameter as a Java\n   * <code>java.sql.Timestamp</code>.\n@@ -267,6 +331,82 @@ public interface CallableStatement extends PreparedStatement\n \n /*************************************************************************/\n \n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>java.sql.Timestamp</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  * @param calendar The <code>Calendar</code> to use for timezone and locale.\n+  *\n+  * @return The parameter value as a <code>java.sql.Timestamp</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Timestamp\n+getTimestamp(int index, Calendar calendar) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>Ref</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a <code>Ref</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Ref\n+getRef(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>Blob</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a <code>Blob</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Blob\n+getBlob(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>Clob</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a <code>Clob</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Clob\n+getClob(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified parameter as a Java\n+  * <code>Array</code>.\n+  *\n+  * @param index The index of the parameter to return.\n+  *\n+  * @return The parameter value as a <code>Array</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Array\n+getArray(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method registers the specified parameter as an output parameter\n   * of the specified SQL type.\n@@ -281,6 +421,21 @@ public interface CallableStatement extends PreparedStatement\n \n /*************************************************************************/\n \n+/**\n+  * This method registers the specified parameter as an output parameter\n+  * of the specified SQL type.\n+  *\n+  * @param index The index of the parameter to register as output.\n+  * @param type The SQL type value from <code>Types</code>.\n+  * @param name The user defined data type name.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+registerOutParameter(int index, int type, String name) throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method registers the specified parameter as an output parameter\n   * of the specified SQL type and scale."}, {"sha": "a3298febbfa412adbc6e4e087de838b9248d751a", "filename": "libjava/java/sql/Clob.java", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FClob.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FClob.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FClob.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -0,0 +1,136 @@\n+/* Clob.java -- Access Character Large OBjects\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+\n+/**\n+  * This interface contains methods for accessing a SQL CLOB (Character\n+  * Large OBject) type.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface Clob\n+{\n+\n+/**\n+  * This method returns the number of characters in the CLOB.\n+  *\n+  * @return The number of characters in the CLOB.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract long\n+length() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the specified portion of the CLOB as a \n+  * <code>String</code>. \n+  *\n+  * @param offset The index into the CLOB (index values start at 1) to \n+  * start returning characters from.\n+  * @param length The requested number of characters to return.\n+  *\n+  * @return The requested CLOB section, as a <code>String</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getSubString(long offset, int length) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a byte stream that reads the contents of the\n+  * CLOB as a series of ASCII bytes.\n+  *\n+  * @return A stream to read the CLOB's contents.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract InputStream\n+getAsciiStream() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a character stream that reads the contents of the\n+  * CLOB.\n+  *\n+  * @return A character stream to read the CLOB's contents.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Reader\n+getCharacterStream() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the index into the CLOB of the first occurrence of\n+  * the specified character pattern (supplied by the caller as a\n+  * <code>String</code>).  The search begins at the specified index.\n+  *\n+  * @param pattern The character pattern to search for, passed as a\n+  * <code>String</code>.\n+  * @param offset.  The index into the CLOB to start search (indexes start\n+  * at 1).\n+  *\n+  * @return The index at which the pattern was found (indexes start at 1),\n+  * or -1 if the pattern was not found.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract long\n+position(String pattern, long offset) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the index into the CLOB of the first occurrence of\n+  * the specified character pattern (supplied by the caller as a\n+  * <code>Clob</code>).  The search begins at the specified index.\n+  *\n+  * @param pattern The character pattern to search for, passed as a\n+  * <code>Clob</code>.\n+  * @param offset.  The index into the CLOB to start search (indexes start\n+  * at 1).\n+  *\n+  * @return The index at which the pattern was found (indexes start at 1),\n+  * or -1 if the pattern was not found.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract long\n+position(Clob pattern, long offset) throws SQLException;\n+\n+} // interface Clob\n+"}, {"sha": "8d986aa1b9dc76de81045ab5b5ae3a88a5b20c73", "filename": "libjava/java/sql/Connection.java", "status": "modified", "additions": 106, "deletions": 5, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FConnection.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -27,6 +27,8 @@\n \n package java.sql;\n \n+import java.util.Map;\n+\n /**\n   * This interface provides methods for managing a connection to a database.\n   *\n@@ -91,6 +93,28 @@\n \n /*************************************************************************/\n \n+/**\n+  * This method creates a new SQL statement with the specified type and\n+  * concurrency.  Valid values for these parameters are specified in the\n+  * <code>ResultSet</code> class.\n+  *\n+  * @param resultSetType The type of result set to use for this statement.\n+  * @param resultSetConcurrency.  The type of concurrency to be used in\n+  * the result set for this statement.\n+  *\n+  * @return A new <code>Statement</code> object.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see Statement\n+  * @see ResultSet\n+  */\n+public abstract Statement\n+createStatement(int resultSetType, int resultSetConcurrency) \n+                throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method creates a new <code>PreparedStatement</code> for the specified\n   * SQL string.  This method is designed for use with parameterized\n@@ -110,6 +134,32 @@\n \n /*************************************************************************/\n \n+/**\n+  * This method creates a new <code>PreparedStatement</code> for the specified\n+  * SQL string.  This method is designed for use with parameterized\n+  * statements.  The specified result set type and concurrency will be used.\n+  * Valid values for these parameters are specified in the\n+  * <code>ResultSet</code> class.\n+  *\n+  * @param The SQL statement to use in creating this \n+  * <code>PreparedStatement</code>.\n+  * @param resultSetType The type of result set to use for this statement.\n+  * @param resultSetConcurrency.  The type of concurrency to be used in\n+  * the result set for this statement.\n+  *\n+  * @return A new <code>PreparedStatement</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see PreparedStatement\n+  * @see ResultSet\n+  */\n+public abstract PreparedStatement\n+prepareStatement(String sql, int resultSetType, int resultSetConcurrency) \n+                 throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method creates a new <code>CallableStatement</code> for the \n   * specified SQL string.  Thie method is designed to be used with\n@@ -130,6 +180,32 @@\n \n /*************************************************************************/\n \n+/**\n+  * This method creates a new <code>CallableStatement</code> for the \n+  * specified SQL string.  Thie method is designed to be used with\n+  * stored procedures.  The specified result set type and concurrency\n+  * will be used.  Valid values for these parameters are specified in the\n+  * <code>ResultSet</code> class.\n+  *\n+  * @param The SQL statement to use in creating this \n+  * <code>PreparedStatement</code>.\n+  * @param resultSetType The type of result set to use for this statement.\n+  * @param resultSetConcurrency.  The type of concurrency to be used in\n+  * the result set for this statement.\n+  *\n+  * @return A new <code>CallableStatement</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see CallableStatement\n+  * @see ResultSet\n+  */\n+public abstract CallableStatement\n+prepareCall(String sql, int resultSetType, int resultSetConcurrency) \n+            throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method converts the specified generic SQL statement into the\n   * native grammer of the database this object is connected to.\n@@ -309,12 +385,10 @@\n /*************************************************************************/\n \n /**\n-  * This method sets the transaction isolation level using one of the\n-  * constants defined in this interface.\n+  * This method sets the current transaction isolation mode.  This must\n+  * be one of the constants defined in this interface.\n   *\n-  * @param level The transaction isolation level to change to; must be\n-  * one of the TRANSACTION_* isolation values with the exception of\n-  * TRANSACTION_NONE; some databases may not support other values.\n+  * @param level The transaction isolation level.\n   *\n   * @exception SQLException If an error occurs.\n   */\n@@ -346,5 +420,32 @@\n public abstract void\n clearWarnings() throws SQLException;\n \n+/*************************************************************************/\n+\n+/**\n+  * This method returns the mapping of SQL types to Java classes\n+  * currently in use by this connection.  This mapping will have no\n+  * entries unless they have been manually added.\n+  *\n+  * @return The SQL type to Java class mapping.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Map\n+getTypeMap() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the mapping table for SQL types to Java classes.\n+  * Any entries in this map override the defaults.\n+  *\n+  * @param map The new SQL mapping table.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setTypeMap(Map map) throws SQLException;\n+\n } // interface Connection\n "}, {"sha": "34499138778091637739d3fab995c129b9ef7faf", "filename": "libjava/java/sql/DataTruncation.java", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FDataTruncation.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FDataTruncation.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDataTruncation.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -33,7 +33,7 @@\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   */\n-public class DataTruncation extends SQLWarning implements java.io.Serializable\n+public class DataTruncation extends SQLWarning\n {\n \n /*************************************************************************/\n@@ -72,6 +72,15 @@ public class DataTruncation extends SQLWarning implements java.io.Serializable\n   */\n private int transferSize;\n \n+/*************************************************************************/\n+\n+/**\n+  * Static Variables\n+  */\n+\n+/**\n+  * This is the serialization UID for this class\n+  */\n private static final long serialVersionUID = 6464298989504059473L;\n \n /*************************************************************************/"}, {"sha": "a643c81e9f3754345d743a8b33efea0f591357e7", "filename": "libjava/java/sql/DatabaseMetaData.java", "status": "modified", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -2456,5 +2456,276 @@\n getIndexInfo(String catalog, String schema, String table, boolean unique,\n              boolean approx) throws SQLException; \n \n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the datbase supports the specified\n+  * result type.\n+  *\n+  * @param type The desired result type, which is one of the constants\n+  * defined in <code>ResultSet</code>.\n+  *\n+  * @return <code>true</code> if the result set type is supported,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract boolean\n+supportsResultSetType(int type) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether the specified result set type and result set\n+  * concurrency type are supported by the database.\n+  *\n+  * @param type The desired result type, which is one of the constants\n+  * defined in <code>ResultSet</code>.\n+  * @param concur The desired concurrency type, which is one of the constants\n+  * defined in <code>ResultSet</code>.\n+  *\n+  * @return <code>true</code> if the result set type is supported,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract boolean\n+supportsResultSetConcurrency(int type, int concur) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the specified result set type sees its\n+  * own updates.\n+  *\n+  * @param type The desired result type, which is one of the constants\n+  * defined in <code>ResultSet</code>.\n+  *\n+  * @return <code>true</code> if the result set type sees its own updates,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract boolean\n+ownUpdatesAreVisible(int type) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the specified result set type sees its\n+  * own deletes.\n+  *\n+  * @param type The desired result type, which is one of the constants\n+  * defined in <code>ResultSet</code>.\n+  *\n+  * @return <code>true</code> if the result set type sees its own deletes,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract boolean\n+ownDeletesAreVisible(int type) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the specified result set type sees its\n+  * own inserts.\n+  *\n+  * @param type The desired result type, which is one of the constants\n+  * defined in <code>ResultSet</code>.\n+  *\n+  * @return <code>true</code> if the result set type sees its own inserts,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract boolean\n+ownInsertsAreVisible(int type) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the specified result set type sees \n+  * updates committed by others.\n+  *\n+  * @param type The desired result type, which is one of the constants\n+  * defined in <code>ResultSet</code>.\n+  *\n+  * @return <code>true</code> if the result set type sees other updates,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract boolean\n+othersUpdatesAreVisible(int type) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the specified result set type sees \n+  * deletes committed by others.\n+  *\n+  * @param type The desired result type, which is one of the constants\n+  * defined in <code>ResultSet</code>.\n+  *\n+  * @return <code>true</code> if the result set type sees other deletes,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract boolean\n+othersDeletesAreVisible(int type) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the specified result set type sees \n+  * inserts committed by others.\n+  *\n+  * @param type The desired result type, which is one of the constants\n+  * defined in <code>ResultSet</code>.\n+  *\n+  * @return <code>true</code> if the result set type sees other inserts,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract boolean\n+othersInsertsAreVisible(int type) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the specified result set type can detect\n+  * a visible update by calling the <code>rowUpdated</code> method.\n+  *\n+  * @param type The desired result type, which is one of the constants\n+  * defined in <code>ResultSet</code>.\n+  *\n+  * @return <code>true</code> if the result set type can detect visible updates\n+  * using <code>rowUpdated</code>, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract boolean\n+updatesAreDetected(int type) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the specified result set type can detect\n+  * a visible delete by calling the <code>rowUpdated</code> method.\n+  *\n+  * @param type The desired result type, which is one of the constants\n+  * defined in <code>ResultSet</code>.\n+  *\n+  * @return <code>true</code> if the result set type can detect visible deletes\n+  * using <code>rowUpdated</code>, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract boolean\n+deletesAreDetected(int type) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the specified result set type can detect\n+  * a visible insert by calling the <code>rowUpdated</code> method.\n+  *\n+  * @param type The desired result type, which is one of the constants\n+  * defined in <code>ResultSet</code>.\n+  *\n+  * @return <code>true</code> if the result set type can detect visible inserts\n+  * using <code>rowUpdated</code>, <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract boolean\n+insertsAreDetected(int type) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the database supports batch updates.\n+  *\n+  * @return <code>true</code> if batch updates are supported,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+supportsBatchUpdates() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the list of user defined data types in use.  These\n+  * are returned as a <code>ResultSet</code> with the following columns:\n+  * <p>\n+  * <ol>\n+  * <li>TYPE_CAT - The catalog name, which may be <code>null</code>.\n+  * <li>TYPE_SCEHM - The schema name, which may be <code>null</code>.\n+  * <li>TYPE_NAME - The user defined data type name.\n+  * <li>CLASS_NAME - The Java class name this type maps to.\n+  * <li>DATA_TYPE - A type identifer from <code>Types</code> for this type.\n+  * This will be one of <code>JAVA_OBJECT</code>, <code>STRUCT</code>, or\n+  * <code>DISTINCT</code>.\n+  * <li>REMARKS - Comments about this data type.\n+  * </ol>\n+  *\n+  * @param catalog The catalog to retrieve information from, or the empty string\n+  * to return entities not associated with a catalog, or <code>null</code>\n+  * to return information from all catalogs.\n+  * @param schema The schema to retrieve information from, or the empty string\n+  * to return entities not associated with a schema.\n+  * @param typePattern The type name pattern to match.\n+  * @param types The type identifer patterns (from <code>Types</code>) to\n+  * match.\n+  *\n+  * @return A <code>ResultSet</code> with the requested type information\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSet\n+getUDTs(String catalog, String schema, String typePattern, int[] types)\n+        throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the <code>Connection</code> object that was used\n+  * to generate the metadata in this object.\n+  *\n+  * @return The connection for this object.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Connection\n+getConnection() throws SQLException;\n+\n } // interface DatabaseMetaData\n "}, {"sha": "19d4e9ded4de692004c96ac72c3673aa95cf8311", "filename": "libjava/java/sql/DriverManager.java", "status": "modified", "additions": 57, "deletions": 6, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FDriverManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FDriverManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDriverManager.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -1,5 +1,5 @@\n /* DriverManager.java -- Manage JDBC drivers\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -137,6 +137,38 @@ public class DriverManager\n \n /*************************************************************************/\n \n+/**\n+  * This method returns the log writer being used by all JDBC drivers.\n+  * This method should be used in place of the deprecated\n+  * <code>getLogStream</code> method.\n+  *\n+  * @return The log writer in use by JDBC drivers.\n+  */\n+public static PrintWriter\n+getLogWriter()\n+{\n+  return(log_writer);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the log writer being used by JDBC drivers.  This is a\n+  * system-wide parameter that affects all drivers.  Note that since there\n+  * is no way to retrieve a <code>PrintStream</code> from a \n+  * <code>PrintWriter</code>, this method cannot set the log stream in\n+  * use by JDBC.  Thus any older drivers may not see this setting.\n+  *\n+  * @param log_writer The new log writer for JDBC.\n+  */\n+public static void\n+setLogWriter(PrintWriter log_writer)\n+{\n+  DriverManager.log_writer = log_writer;\n+}\n+\n+/*************************************************************************/\n+\n /**\n   * This method returns the log stream in use by JDBC.\n   *\n@@ -186,9 +218,11 @@ public class DriverManager\n   * called by the driver itself in a static initializer.\n   *\n   * @param driver The new <code>Driver</code> to add.\n+  *\n+  * @exception SQLException If an error occurs.\n   */\n public static void\n-registerDriver(Driver driver)\n+registerDriver(Driver driver) throws SQLException\n {\n   if (!drivers.contains(driver))\n     drivers.addElement(driver);\n@@ -200,9 +234,11 @@ public class DriverManager\n   * This method de-registers a driver from the manager.\n   *\n   * @param driver The <code>Driver</code> to unregister.\n+  *\n+  * @exception SQLException If an error occurs.\n   */\n public static void\n-deregisterDriver(Driver driver)\n+deregisterDriver(Driver driver) throws SQLException\n {\n   if (drivers.contains(driver))\n     drivers.removeElement(driver);\n@@ -211,15 +247,30 @@ public class DriverManager\n /*************************************************************************/\n \n /**\n-  * This method returns a list of all the currently loaded JDBC drivers which\n-  * the current caller has access to.\n+  * This method returns a list of all the currently registered JDBC drivers\n+  * that were loaded by the current <code>ClassLoader</code>.\n   *\n   * @return An <code>Enumeration</code> of all currently loaded JDBC drivers.\n   */\n public static Enumeration\n getDrivers()\n {\n-  return(drivers.elements());\n+  Vector v = new Vector();\n+  Enumeration e = drivers.elements();\n+\n+  // Is this right?\n+  ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+\n+  while(e.hasMoreElements())\n+    {\n+      Object obj = e.nextElement();\n+      if (!obj.getClass().getClassLoader().equals(cl))\n+        continue;\n+\n+      v.addElement(obj);\n+    } \n+\n+  return(v.elements());\n }\n \n /*************************************************************************/"}, {"sha": "dc8b1c4dea5fe96db633e46c7d6d0bce7b998a68", "filename": "libjava/java/sql/PreparedStatement.java", "status": "modified", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FPreparedStatement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FPreparedStatement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FPreparedStatement.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -30,6 +30,7 @@\n import java.io.InputStream;\n import java.io.Reader;\n import java.math.BigDecimal;\n+import java.util.Calendar;\n \n /**\n   * This interface provides a mechanism for executing pre-compiled\n@@ -56,6 +57,21 @@ public interface PreparedStatement extends Statement\n   \n /*************************************************************************/\n \n+/**\n+  * This method populates the specified parameter with a SQL NULL value\n+  * for the specified type.\n+  *\n+  * @param index The index of the parameter to set.\n+  * @param type The SQL type identifier of the parameter from <code>Types</code>\n+  * @param name The name of the data type, for user defined types.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setNull(int index, int type, String name) throws SQLException;\n+  \n+/*************************************************************************/\n+\n /**\n   * This method sets the specified parameter from the given Java\n   * <code>boolean</code> value.\n@@ -210,6 +226,21 @@ public interface PreparedStatement extends Statement\n \n /*************************************************************************/\n \n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>java.sql.Date</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  * @param calendar The <code>Calendar</code> to use for timezone and locale.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setDate(int index, java.sql.Date value, Calendar calendar) throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method sets the specified parameter from the given Java\n   * <code>java.sql.Time</code> value.\n@@ -224,6 +255,21 @@ public interface PreparedStatement extends Statement\n \n /*************************************************************************/\n \n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>java.sql.Time</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  * @param calendar The <code>Calendar</code> to use for timezone and locale.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setTime(int index, java.sql.Time value, Calendar calendar) throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method sets the specified parameter from the given Java\n   * <code>java.sql.Timestamp</code> value.\n@@ -238,6 +284,22 @@ public interface PreparedStatement extends Statement\n \n /*************************************************************************/\n \n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>java.sql.Timestamp</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  * @param calendar The <code>Calendar</code> to use for timezone and locale.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setTimestamp(int index, java.sql.Timestamp value, Calendar calendar) \n+             throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method sets the specified parameter from the given Java\n   * ASCII <code>InputStream</code> value.\n@@ -283,6 +345,81 @@ public interface PreparedStatement extends Statement\n \n /*************************************************************************/\n \n+/**\n+  * This method sets the specified parameter from the given Java\n+  * character <code>Reader</code> value.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  * @param length The number of bytes in the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setCharacterStream(int index, Reader value, int length) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>Ref</code> value.  The default object type to SQL type mapping\n+  * will be used.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setRef(int index, Ref value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>Blob</code> value.  The default object type to SQL type mapping\n+  * will be used.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setBlob(int index, Blob value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>Clob</code> value.  The default object type to SQL type mapping\n+  * will be used.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setClob(int index, Clob value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified parameter from the given Java\n+  * <code>Array</code> value.  The default object type to SQL type mapping\n+  * will be used.\n+  *\n+  * @param index The index of the parameter value to set.\n+  * @param value The value of the parameter.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setArray(int index, Array value) throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method sets the specified parameter from the given Java\n   * <code>Object</code> value.  The default object type to SQL type mapping\n@@ -333,6 +470,16 @@ public interface PreparedStatement extends Statement\n \n /*************************************************************************/\n \n+/**\n+  * This method adds a set of parameters to the batch for JDBC 2.0.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+addBatch() throws SQLException;\n+  \n+/*************************************************************************/\n+\n /**\n   * This method clears all of the input parameter that have been\n   * set on this statement.\n@@ -344,6 +491,18 @@ public interface PreparedStatement extends Statement\n \n /*************************************************************************/\n \n+/**\n+  * This method returns meta data for the result set from this statement.\n+  *\n+  * @return Meta data for the result set from this statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract ResultSetMetaData\n+getMetaData() throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method executes a prepared SQL query.\n   * Some prepared statements return multiple results; the execute method"}, {"sha": "2aaecfc8cf909eaa731ede00d651960d06281ab0", "filename": "libjava/java/sql/Ref.java", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FRef.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FRef.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FRef.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -0,0 +1,51 @@\n+/* Ref.java -- Reference to a SQL structured type.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+/**\n+  * This interface provides a mechanism for obtaining information about\n+  * a SQL structured type\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface Ref\n+{\n+\n+/**\n+  * This method returns the fully qualified name of the SQL structured\n+  * type of the referenced item.\n+  *\n+  * @return The fully qualified name of the SQL structured type.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getBaseTypeName() throws SQLException;\n+\n+} // interface Ref\n+"}, {"sha": "536254fb80d4aef2d959d61f480d3b5bf0c41eb0", "filename": "libjava/java/sql/ResultSet.java", "status": "modified", "additions": 1325, "deletions": 1, "changes": 1326, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FResultSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FResultSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FResultSet.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -1,5 +1,5 @@\n /* ResultSet.java -- A SQL statement result set.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -30,6 +30,8 @@\n import java.io.InputStream;\n import java.io.Reader;\n import java.math.BigDecimal;\n+import java.util.Calendar;\n+import java.util.Map;\n \n /**\n   * This interface provides access to the data set returned by a SQL\n@@ -48,6 +50,50 @@\n public interface ResultSet\n {\n \n+/**\n+  * The rows will be processed in order from first to last.\n+  */\n+public static final int FETCH_FORWARD = 0;\n+\n+/**\n+  * The rows will be processed in order from last to first.\n+  */\n+public static final int FETCH_REVERSE = 1;\n+\n+/**\n+  * The rows will be processed in an unknown order\n+  */\n+public static final int FETCH_UNKNOWN = 2;\n+\n+/**\n+  * This type of result set may only step forward through the rows returned.\n+  */\n+public static final int TYPE_FORWARD_ONLY = 0;\n+\n+/**\n+  * This type of result set is scrollable and is not sensitive to changes\n+  * made by other statements.\n+  */\n+public static final int TYPE_SCROLL_INSENSITIVE = 1;\n+\n+/**\n+  * This type of result set is scrollable and is also sensitive to changes\n+  * made by other statements.\n+  */\n+public static final int TYPE_SCROLL_SENSITIVE = 1;\n+\n+/**\n+  * The concurrency mode of for the result set may not be modified.\n+  */\n+public static final int CONCUR_READ_ONLY = 0;\n+\n+/**\n+  * The concurrency mode of for the result set may be modified.\n+  */\n+public static final int CONCUR_UPDATABLE = 1;\n+\n+/*************************************************************************/\n+\n /**\n   * This method advances to the next row in the result set.  Any streams\n   * open on the current row are closed automatically.\n@@ -62,6 +108,20 @@\n \n /*************************************************************************/\n \n+/**\n+  * This method moves the current position to the previous row in the\n+  * result set.\n+  *\n+  * @return <code>true</code> if the previous row exists, <code>false</code>\n+  * otherwise.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+previous() throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method closes the result set and frees any associated resources.\n   * \n@@ -221,6 +281,21 @@\n \n /*************************************************************************/\n \n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>BigDecimal</code>.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as a <code>BigDecimal</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract BigDecimal\n+getBigDecimal(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method returns the value of the specified column as a Java\n   * <code>BigDecimal</code>.\n@@ -351,6 +426,24 @@\n \n /*************************************************************************/\n \n+/**\n+  * This method returns the value of the specified column as a character\n+  * stream.  Note that all the data from this stream must be read before\n+  * fetching the value of any other column.  Please also be aware that \n+  * calling <code>next()</code> or <code>close()</code> on this result set\n+  * will close this stream as well.\n+  *\n+  * @param index The index of the column to return.\n+  *\n+  * @return The column value as an character <code>Reader</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Reader\n+getCharacterStream(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method returns the value of the specified column as a Java\n   * <code>String</code>.\n@@ -486,6 +579,21 @@\n \n /*************************************************************************/\n \n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>BigDecimal</code>.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as a <code>BigDecimal</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract BigDecimal\n+getBigDecimal(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method returns the value of the specified column as a Java\n   * <code>BigDecimal</code>.\n@@ -616,6 +724,24 @@\n \n /*************************************************************************/\n \n+/**\n+  * This method returns the value of the specified column as a character\n+  * stream.  Note that all the data from this stream must be read before\n+  * fetching the value of any other column.  Please also be aware that \n+  * calling <code>next()</code> or <code>close()</code> on this result set\n+  * will close this stream as well.\n+  *\n+  * @param column The name of the column to return.\n+  *\n+  * @return The column value as an character <code>Reader</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Reader\n+getCharacterStream(String column) throws SQLException;\n+\n+/*************************************************************************/\n+\n /**\n   * This method returns the first SQL warning associated with this result\n   * set.  Any additional warnings will be chained to this one.\n@@ -678,5 +804,1203 @@\n public abstract int\n findColumn(String column) throws SQLException;\n \n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the cursor is before the first row\n+  * in the result set.\n+  *\n+  * @return <code>true</code> if the cursor is positioned before the first\n+  * row, <code>false</code> otherwise.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+isBeforeFirst() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the cursor is after the last row\n+  * in the result set.\n+  *\n+  * @return <code>true</code> if the cursor is positioned after the last\n+  * row, <code>false</code> otherwise.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+isAfterLast() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the cursor is positioned on the first\n+  * row in the result set.\n+  *\n+  * @return <code>true</code> if the cursor is positioned on the first\n+  * row, <code>false</code> otherwise.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+isFirst() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the cursor is on the last row\n+  * in the result set.\n+  *\n+  * @return <code>true</code> if the cursor is positioned on the last\n+  * row, <code>false</code> otherwise.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+isLast() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method repositions the cursor to before the first row in the\n+  * result set.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+beforeFirst() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method repositions the cursor to after the last row in the result\n+  * set.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+afterLast() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method repositions the cursor on the first row in the\n+  * result set.\n+  *\n+  * @return <code>true</code> if the cursor is on a valid row;\n+  * <code>false</code> if there are no rows in the result set.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+first() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method repositions the cursor on the last row in the result\n+  * set.\n+  * \n+  * @return <code>true</code> if the cursor is on a valid row;\n+  * <code>false</code> if there are no rows in the result set.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+last() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the current row number in the cursor.  Numbering\n+  * begins at index 1.\n+  *\n+  * @return The current row number, or 0 if there is not current row.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getRow() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method positions the result set to the specified absolute row.\n+  * Positive numbers are row offsets from the beginning of the result\n+  * set (numbering starts from row 1) and negative numbers are row offsets\n+  * from the end of the result set (numbering starts from -1).\n+  *\n+  * @param row The row to position the result set to.\n+  *\n+  * @return <code>true</code> if the current position was changed,\n+  * <code>false</code> otherwise.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+absolute(int row) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method moves the result set position relative to the current row.\n+  * The offset can be positive or negative.\n+  *\n+  * @param row The relative row position to move to.\n+  *\n+  * @return <code>true</code> if the current position was changed,\n+  * <code>false</code> otherwise.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+relative(int row) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method provides a hint to the driver about which direction the\n+  * result set will be processed in. \n+  *\n+  * @param direction The direction in which rows will be processed. (Values?)\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setFetchDirection(int direction) throws SQLException;\n+ \n+/*************************************************************************/\n+\n+/**\n+  * This method returns the current fetch direction for this result set.\n+  *\n+  * @return The fetch direction for this result set.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getFetchDirection() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method provides a hint to the driver about how many rows at a\n+  * time it should fetch from the database.\n+  *\n+  * @param rows The number of rows the driver should fetch per call.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setFetchSize(int rows) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the current number of rows that will be fetched \n+  * from the database at a time.\n+  *\n+  * @return The current fetch size for this result set.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getFetchSize() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the result set type of this result set.  This will\n+  * be one of the TYPE_* constants defined in this interface.\n+  *\n+  * @return The result set type.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getType() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the concurrency type of this result set.  This will\n+  * be one of the CONCUR_* constants defined in this interface.\n+  *\n+  * @return The result set concurrency type.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getConcurrency() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the current row in the result set\n+  * has been updated.  Updates must be visible in order of this method to\n+  * detect the update.\n+  *\n+  * @return <code>true</code> if the row has been updated, <code>false</code>\n+  * otherwise.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+rowUpdated() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the current row in the result set\n+  * has been inserted.  Inserts must be visible in order of this method to\n+  * detect the insert.\n+  *\n+  * @return <code>true</code> if the row has been inserted, <code>false</code>\n+  * otherwise.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+rowInserted() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the current row in the result set\n+  * has been deleted.  Deletes must be visible in order of this method to\n+  * detect the deletion.\n+  *\n+  * @return <code>true</code> if the row has been deleted, <code>false</code>\n+  * otherwise.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+rowDeleted() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a NULL value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @return index The index of the column to update.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateNull(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a boolean value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateBoolean(int index, boolean value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a byte value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateByte(int index, byte value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a short value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateShort(int index, short value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have an int value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateInt(int index, int value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a long value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateLong(int index, long value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a float value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateFloat(int index, float value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a double value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateDouble(int index, double value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a BigDecimal value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateBigDecimal(int index, BigDecimal value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a String value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateString(int index, String value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a byte array value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateBytes(int index, byte[] value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a java.sql.Date value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateDate(int index, java.sql.Date value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a java.sql.Time value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateTime(int index, java.sql.Time value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a java.sql.Timestamp value.  \n+  * This does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateTimestamp(int index, java.sql.Timestamp value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column from an ASCII text stream.\n+  * This does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  * @param length The length of the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateAsciiStream(int index, InputStream value, int length) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column from a binary stream.\n+  * This does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  * @param length The length of the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateBinaryStream(int index, InputStream value, int length) \n+                   throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column from a character stream.\n+  * This does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  * @param length The length of the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateCharacterStream(int index, Reader value, int length) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have an Object value.  \n+  * This does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateObject(int index, Object value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have an Object value.  \n+  * This does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param index The index of the column to update.\n+  * @param value The new value of the column.\n+  * @param scale The scale of the object in question, which is used only\n+  * for numeric type objects.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateObject(int index, Object value, int scale) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a NULL value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @return name The name of the column to update.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateNull(String name) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a boolean value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateBoolean(String name, boolean value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a byte value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateByte(String name, byte value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a short value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateShort(String name, short value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have an int value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateInt(String name, int value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a long value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateLong(String name, long value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a float value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateFloat(String name, float value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a double value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateDouble(String name, double value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a BigDecimal value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateBigDecimal(String name, BigDecimal value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a String value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateString(String name, String value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a byte array value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateBytes(String name, byte[] value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a java.sql.Date value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateDate(String name, java.sql.Date value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a java.sql.Time value.  This\n+  * does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateTime(String name, java.sql.Time value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have a java.sql.Timestamp value.  \n+  * This does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateTimestamp(String name, java.sql.Timestamp value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column from an ASCII text stream.\n+  * This does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  * @param length The length of the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateAsciiStream(String name, InputStream value, int length) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column from a binary stream.\n+  * This does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  * @param length The length of the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateBinaryStream(String name, InputStream value, int length) \n+                   throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column from a character stream.\n+  * This does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  * @param length The length of the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateCharacterStream(String name, Reader value, int length) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have an Object value.  \n+  * This does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateObject(String name, Object value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the specified column to have an Object value.  \n+  * This does not update the actual database.  <code>updateRow</code> must be\n+  * called in order to do that.\n+  *\n+  * @param name The name of the column to update.\n+  * @param value The new value of the column.\n+  * @param scale The scale of the object in question, which is used only\n+  * for numeric type objects.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateObject(String name, Object value, int scale) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method inserts the current row into the database.  The result set\n+  * must be positioned on the insert row in order to call this method\n+  * successfully.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+insertRow() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method updates the current row in the database.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+updateRow() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method deletes the current row in the database.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+deleteRow() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method refreshes the contents of the current row from the database.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+refreshRow() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method cancels any changes that have been made to a row.  If \n+  * the <code>rowUpdate</code> method has been called, then the changes\n+  * cannot be undone.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+cancelRowUpdates() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method positions the result set to the \"insert row\", which allows\n+  * a new row to be inserted into the database from the result set.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+moveToInsertRow() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method moves the result set position from the insert row back to\n+  * the current row that was selected prior to moving to the insert row.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+moveToCurrentRow() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a the <code>Statement</code> that was used to\n+  * produce this result set.\n+  *\n+  * @return The <code>Statement</code> used to produce this result set.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Statement\n+getStatement() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>Object</code> using the specified SQL type to Java type map.\n+  *\n+  * @param index The index of the column to return.\n+  * @param map The SQL type to Java type map to use.\n+  *\n+  * @return The value of the column as an <code>Object</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Object\n+getObject(int index, Map map) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a <code>Ref</code> for the specified column which\n+  * represents the structured type for the column.\n+  *\n+  * @param index  The index of the column to return.\n+  *\n+  * @return A <code>Ref</code> object for the column\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public Ref\n+getRef(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the specified column value as a BLOB.\n+  *\n+  * @param index The index of the column value to return.\n+  *\n+  * @return The value of the column as a BLOB.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Blob\n+getBlob(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the specified column value as a CLOB.\n+  *\n+  * @param index The index of the column value to return.\n+  *\n+  * @return The value of the column as a CLOB.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Clob\n+getClob(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the specified column value as an <code>Array</code>.\n+  *\n+  * @param index The index of the column value to return.\n+  *\n+  * @return The value of the column as an <code>Array</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Array\n+getArray(int index) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the value of the specified column as a Java\n+  * <code>Object</code> using the specified SQL type to Java type map.\n+  *\n+  * @param name The name of the column to return.\n+  * @param map The SQL type to Java type map to use.\n+  *\n+  * @return The value of the column as an <code>Object</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Object\n+getObject(String name, Map map) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a <code>Ref</code> for the specified column which\n+  * represents the structured type for the column.\n+  *\n+  * @param index  The index of the column to return.\n+  *\n+  * @return A <code>Ref</code> object for the column\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public Ref\n+getRef(String name) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the specified column value as a BLOB.\n+  *\n+  * @param name The name of the column value to return.\n+  *\n+  * @return The value of the column as a BLOB.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Blob\n+getBlob(String name) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the specified column value as a CLOB.\n+  *\n+  * @param name The name of the column value to return.\n+  *\n+  * @return The value of the column as a CLOB.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Clob\n+getClob(String name) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the specified column value as an <code>Array</code>.\n+  *\n+  * @param name The name of the column value to return.\n+  *\n+  * @return The value of the column as an <code>Array</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Array\n+getArray(String name) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the specified column value as a \n+  * <code>java.sql.Date</code>.  The specified <code>Calendar</code> is used\n+  * to generate a value for the date if the database does not support\n+  * timezones.\n+  *\n+  * @param index The index of the column value to return.\n+  * @param cal The <code>Calendar</code> to use for calculating timezones.\n+  *\n+  * @return The value of the column as a <code>java.sql.Date</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Date\n+getDate(int index, Calendar cal) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the specified column value as a \n+  * <code>java.sql.Time</code>.  The specified <code>Calendar</code> is used\n+  * to generate a value for the time if the database does not support\n+  * timezones.\n+  *\n+  * @param index The index of the column value to return.\n+  * @param cal The <code>Calendar</code> to use for calculating timezones.\n+  *\n+  * @return The value of the column as a <code>java.sql.Time</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Time\n+getTime(int index, Calendar cal) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the specified column value as a \n+  * <code>java.sql.Timestamp</code>.  The specified <code>Calendar</code> is used\n+  * to generate a value for the timestamp if the database does not support\n+  * timezones.\n+  *\n+  * @param index The index of the column value to return.\n+  * @param cal The <code>Calendar</code> to use for calculating timezones.\n+  *\n+  * @return The value of the column as a <code>java.sql.Timestamp</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Timestamp\n+getTimestamp(int index, Calendar cal) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the specified column value as a \n+  * <code>java.sql.Date</code>.  The specified <code>Calendar</code> is used\n+  * to generate a value for the date if the database does not support\n+  * timezones.\n+  *\n+  * @param name The name of the column value to return.\n+  * @param cal The <code>Calendar</code> to use for calculating timezones.\n+  *\n+  * @return The value of the column as a <code>java.sql.Date</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Date\n+getDate(String name, Calendar cal) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the specified column value as a \n+  * <code>java.sql.Time</code>.  The specified <code>Calendar</code> is used\n+  * to generate a value for the time if the database does not support\n+  * timezones.\n+  *\n+  * @param name The name of the column value to return.\n+  * @param cal The <code>Calendar</code> to use for calculating timezones.\n+  *\n+  * @return The value of the column as a <code>java.sql.Time</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Time\n+getTime(String name, Calendar cal) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the specified column value as a \n+  * <code>java.sql.Timestamp</code>.  The specified <code>Calendar</code> is used\n+  * to generate a value for the timestamp if the database does not support\n+  * timezones.\n+  *\n+  * @param name The name of the column value to return.\n+  * @param cal The <code>Calendar</code> to use for calculating timezones.\n+  *\n+  * @return The value of the column as a <code>java.sql.Timestamp</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Timestamp\n+getTimestamp(String name, Calendar cal) throws SQLException;\n+\n } // interface ResultSet\n "}, {"sha": "edb89dad83c8e88bf43b1e9844df8a2416cdaeb1", "filename": "libjava/java/sql/ResultSetMetaData.java", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FResultSetMetaData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FResultSetMetaData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FResultSetMetaData.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -1,5 +1,5 @@\n /* ResultSetMetaData.java -- Returns information about the ResultSet\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -358,5 +358,21 @@\n public abstract boolean\n isDefinitelyWritable(int index) throws SQLException;\n \n+/*************************************************************************/\n+\n+/**\n+  * This method returns the name of the Java class which will be used to\n+  * create objects representing the data in this column.\n+  *\n+  * @param index The index of the column to check.\n+  *\n+  * @return The name of the Java class that will be used for values in\n+  * this column.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getColumnClassName(int index) throws SQLException;\n+\n } // interface ResultSetMetaData\n "}, {"sha": "8340069a16245e833a502bd09fff5be8beaf88af", "filename": "libjava/java/sql/SQLData.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FSQLData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FSQLData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLData.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -0,0 +1,74 @@\n+/* SQLData.java -- Custom mapping for a user defined datatype\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+/**\n+  * This interface is used for mapping SQL data to user defined datatypes.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface SQLData\n+{\n+\n+/**\n+  * This method returns the user defined datatype name for this object.\n+  *\n+  * @return The user defined data type name for this object.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getSQLTypeName() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method populates the data in the object from the specified stream.\n+  *\n+  * @param stream The stream to read the data from.\n+  * @param name The data type name of the data on the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+readSQL(SQLInput stream, String name) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the data in this object to the specified stream.\n+  *\n+  * @param stream The stream to write the data to.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeSQL(SQLOutput stream) throws SQLException;\n+\n+} // interface SQLData\n+"}, {"sha": "a65d947409cfad9dab1cb670979958c6939a8f01", "filename": "libjava/java/sql/SQLException.java", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FSQLException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FSQLException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLException.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -32,7 +32,7 @@\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   */\n-public class SQLException extends Exception implements java.io.Serializable\n+public class SQLException extends Exception\n {\n \n /*************************************************************************/\n@@ -59,6 +59,15 @@ public class SQLException extends Exception implements java.io.Serializable\n   */\n private int vendorCode;\n \n+/*************************************************************************/\n+\n+/**\n+  * Static Variables\n+  */\n+\n+/**\n+  * This is the serialization UID for this class\n+  */\n private static final long serialVersionUID = 2135244094396331484L;\n \n /*************************************************************************/"}, {"sha": "2f9fd07e33b6ca1172b8ffa36d05b259df9902a8", "filename": "libjava/java/sql/SQLInput.java", "status": "added", "additions": 332, "deletions": 0, "changes": 332, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FSQLInput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FSQLInput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLInput.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -0,0 +1,332 @@\n+/* SQLInput.java -- Read SQL values from a stream\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+\n+/**\n+  * This interface provides methods for reading values from a stream\n+  * that is connected to a SQL structured or distinct type.  It is used\n+  * for custom mapping of user defined data types.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface SQLInput\n+{\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java\n+  * <code>String</code>.\n+  *\n+  * @return The value read from the stream as a <code>String</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+readString() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java\n+  * <code>boolean</code>.\n+  *\n+  * @return The value read from the stream as a <code>boolean</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+readBoolean() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java\n+  * <code>byte</code>.\n+  *\n+  * @return The value read from the stream as a <code>byte</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract byte\n+readByte() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java\n+  * <code>short</code>.\n+  *\n+  * @return The value read from the stream as a <code>short</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract short\n+readShort() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java\n+  * <code>int</code>.\n+  *\n+  * @return The value read from the stream as an <code>int</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+readInt() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java\n+  * <code>long</code>.\n+  *\n+  * @return The value read from the stream as a <code>long</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract long\n+readLong() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java\n+  * <code>float</code>.\n+  *\n+  * @return The value read from the stream as a <code>float</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract float\n+readFloat() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java\n+  * <code>double</code>.\n+  *\n+  * @return The value read from the stream as a <code>double</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract double\n+readDouble() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java\n+  * <code>BigDecimal</code>.\n+  *\n+  * @return The value read from the stream as a <code>BigDecimal</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract BigDecimal\n+readBigDecimal() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java\n+  * byte array\n+  *\n+  * @return The value read from the stream as a byte array. \n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract byte[]\n+readBytes() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java\n+  * <code>java.sql.Date</code>.\n+  *\n+  * @return The value read from the stream as a <code>java.sql.Date</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Date\n+readDate() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java\n+  * <code>java.sql.Time</code>.\n+  *\n+  * @return The value read from the stream as a <code>java.sql.Time</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Time\n+readTime() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java\n+  * <code>java.sql.Timestamp</code>.\n+  *\n+  * @return The value read from the stream as a <code>java.sql.Timestamp</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract java.sql.Timestamp\n+readTimestamp() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a ASCII text\n+  * <code>InputStream</code>.\n+  *\n+  * @return The value read from the stream as an <code>InputStream</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract InputStream\n+readAsciiStream() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a binary\n+  * <code>InputStream</code>.\n+  *\n+  * @return The value read from the stream as an <code>InputStream</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract InputStream\n+readBinaryStream() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a character\n+  * <code>Reader</code>.\n+  *\n+  * @return The value read from the stream as a <code>Reader</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Reader\n+readCharacterStream() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java\n+  * <code>Object</code>.\n+  *\n+  * @return The value read from the stream as an <code>Object</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Object\n+readObject() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java SQL\n+  * <code>Ref</code>.\n+  *\n+  * @return The value read from the stream as an <code>Ref</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Ref\n+readRef() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java SQL\n+  * <code>Blob</code>.\n+  *\n+  * @return The value read from the stream as a <code>Blob</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Blob\n+readBlob() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java SQL\n+  * <code>Clob</code>.\n+  *\n+  * @return The value read from the stream as a <code>Clob</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Clob\n+readClob() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next item from the stream a Java SQL\n+  * <code>Array</code>.\n+  *\n+  * @return The value read from the stream as an <code>Array</code>.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Array\n+readArray() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method tests whether or not the last value read was a SQL\n+  * NULL value.\n+  *\n+  * @return <code>true</code> if the last value read was a NULL,\n+  * <code>false</code> otherwise.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract boolean\n+wasNull() throws SQLException;\n+\n+} // interface SQLInput\n+"}, {"sha": "c73e19455a40c4d67a7046e43966456d39f39434", "filename": "libjava/java/sql/SQLOutput.java", "status": "added", "additions": 331, "deletions": 0, "changes": 331, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FSQLOutput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FSQLOutput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLOutput.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -0,0 +1,331 @@\n+/* SQLOutput.java -- Write SQL values to a stream\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+\n+/**\n+  * This interface provides methods for writing Java types to a SQL stream.\n+  * It is used for implemented custom type mappings for user defined data\n+  * types.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface SQLOutput\n+{\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java <code>String</code>\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeString(String value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java <code>boolean</code>\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeBoolean(boolean value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java <code>byte</code>\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeByte(byte value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java <code>short</code>\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeShort(short value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java <code>int</code>\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeInt(int value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java <code>long</code>\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeLong(long value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java <code>float</code>\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeFloat(float value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java <code>double</code>\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeDouble(double value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java <code>BigDecimal</code>\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeBigDecimal(BigDecimal value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java <code>byte</code> array\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeBytes(byte[] value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java <code>java.sql.Date</code> \n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeDate(java.sql.Date value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java <code>java.sql.Time</code> \n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeTime(java.sql.Time value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java <code>java.sql.Timestamp</code> \n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeTimestamp(java.sql.Timestamp value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java character stream\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeCharacterStream(Reader value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified uninterpreted binary byte stream\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeBinaryStream(InputStream value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified ASCII text stream\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  * \n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeAsciiStream(InputStream value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java <code>SQLData</code> object\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeObject(SQLData value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java SQL <code>Ref</code> object\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeRef(Ref value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java SQL <code>Blob</code> object\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeBlob(Blob value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java SQL <code>Clob</code> object\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeClob(Clob value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java SQL <code>Struct</code> object\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeStruct(Struct value) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the specified Java SQL <code>Array</code> object\n+  * to the SQL stream.\n+  *\n+  * @param value The value to write to the stream.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+writeArray(Array value) throws SQLException;\n+\n+} // interface SQLOutput\n+"}, {"sha": "4f9c736ef171d32771fee2afc546919c57a21284", "filename": "libjava/java/sql/SQLWarning.java", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FSQLWarning.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FSQLWarning.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLWarning.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -32,11 +32,22 @@\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   */\n-public class SQLWarning extends SQLException implements java.io.Serializable\n+public class SQLWarning extends SQLException\n {\n \n /*************************************************************************/\n \n+/**\n+  * Static Variables\n+  */\n+\n+/**\n+  * This is the serialization UID for this class\n+  */\n+private static final long serialVersionUID = 3917336774604784856L;\n+\n+/*************************************************************************/\n+\n /*\n  * Constructors\n  */\n@@ -132,7 +143,5 @@ public class SQLWarning extends SQLException implements java.io.Serializable\n   super.setNextException(e);\n }\n \n-private static final long serialVersionUID = 3917336774604784856L;\n-\n } // class SQLWarning\n "}, {"sha": "30eeeebaa4d150dd7cfca92b7a45f837250eb4dc", "filename": "libjava/java/sql/Statement.java", "status": "modified", "additions": 137, "deletions": 1, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FStatement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FStatement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FStatement.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -1,5 +1,5 @@\n /* Statement.java -- Interface for executing SQL statements.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -273,5 +273,141 @@\n public abstract boolean\n getMoreResults() throws SQLException;\n \n+/*************************************************************************/\n+\n+/**\n+  * This method returns the current direction that the driver thinks the\n+  * result set will be accessed int.\n+  *\n+  * @return The direction the result set will be accessed in (????)\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getFetchDirection() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method informs the driver which direction the result set will\n+  * be accessed in.\n+  *\n+  * @param direction The direction the result set will be accessed in (?????)\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setFetchDirection(int direction) throws SQLException;\n+  \n+/*************************************************************************/\n+\n+/**\n+  * This method returns the number of rows the driver believes should be\n+  * fetched from the database at a time.\n+  *\n+  * @return The number of rows that will be fetched from the database at a time.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int\n+getFetchSize() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method informs the driver how many rows it should fetch from the\n+  * database at a time.\n+  *\n+  * @param numrows The number of rows the driver should fetch at a time\n+  * to populate the result set.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+setFetchSize(int numrows) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the concurrency type of the result set for this\n+  * statement. This will be one of the concurrency types defined in\n+  * <code>ResultSet</code>.\n+  *\n+  * @return The concurrency type of the result set for this statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract int\n+getResultSetConcurrency() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the result set type for this statement.  This will\n+  * be one of the result set types defined in <code>ResultSet</code>.\n+  *\n+  * @return The result set type for this statement.\n+  *\n+  * @exception SQLException If an error occurs.\n+  *\n+  * @see ResultSet\n+  */\n+public abstract int\n+getResultSetType() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method adds a SQL statement to a SQL batch.  A driver is not\n+  * required to implement this method.\n+  *\n+  * @param sql The sql statement to add to the batch.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+addBatch(String sql) throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method clears out any SQL statements that have been populated in\n+  * the current batch.  A driver is not required to implement this method.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract void\n+clearBatch() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method executes the SQL batch and returns an array of update\n+  * counts - one for each SQL statement in the batch - ordered in the same\n+  * order the statements were added to the batch.  A driver is not required\n+  * to implement this method.\n+  *\n+  * @return An array of update counts for this batch.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract int[]\n+executeBatch() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the <code>Connection</code> instance that was\n+  * used to create this object.\n+  *\n+  * @return The connection used to create this object.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Connection\n+getConnection() throws SQLException;\n+\n } // interface Statement\n "}, {"sha": "779b5bcb35c783e82fd6089453efccdbfb7cdde3", "filename": "libjava/java/sql/Struct.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FStruct.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FStruct.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FStruct.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -0,0 +1,80 @@\n+/* Struct.java -- Mapping for a SQL structured type.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.sql;\n+\n+import java.util.Map;\n+\n+/**\n+  * This interface implements the standard type mapping for a SQL \n+  * structured type.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface Struct\n+{\n+\n+/**\n+  * This method returns the name of the SQL structured type for this\n+  * object.\n+  *\n+  * @return The SQL structured type name.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract String\n+getSQLTypeName() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the attributes of this SQL structured type.\n+  *\n+  * @return The attributes of this structure type.\n+  *\n+  * @exception SQLException If an error occurs.\n+  */\n+public abstract Object[]\n+getAttributes() throws SQLException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the attributes of this SQL structured type.\n+  * The specified map of type mappings overrides the default mappings.\n+  *\n+  * @param map The map of SQL type mappings.\n+  *\n+  * @return The attributes of this structure type.\n+  *\n+  * @exception SQLException If a error occurs.\n+  */\n+public abstract Object[]\n+getAttributes(Map map) throws SQLException;\n+\n+} // interface Struct\n+"}, {"sha": "5e734d0fce899a1514872420a5213754166a89eb", "filename": "libjava/java/sql/Types.java", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FTypes.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6934615b9736d0a777ce7f6933129ea1cdd2dd23/libjava%2Fjava%2Fsql%2FTypes.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FTypes.java?ref=6934615b9736d0a777ce7f6933129ea1cdd2dd23", "patch": "@@ -59,6 +59,13 @@ public class Types\n public static final int LONGVARBINARY = -4;\n public static final int NULL = 0;\n public static final int OTHER = 1111;\n+public static final int JAVA_OBJECT = 2000;\n+public static final int DISTINCT = 2001;\n+public static final int STRUCT = 2002;\n+public static final int ARRAY = 2003;\n+public static final int BLOB = 2004;\n+public static final int CLOB = 2005;\n+public static final int REF = 2006;\n \n } // class Types \n "}]}