{"sha": "2f3980d41667cfed6ee6560c16e90efa91cd24c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYzOTgwZDQxNjY3Y2ZlZDZlZTY1NjBjMTZlOTBlZmE5MWNkMjRjNg==", "commit": {"author": {"name": "Philip Herron", "email": "phil@nebuloninc.com", "date": "2020-05-16T19:41:30Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T19:12:31Z"}, "message": "make ArithmeticOrLogicalExpr visitable", "tree": {"sha": "1a8a0394a2f9a0113e991d126bc6dfe1e777faba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a8a0394a2f9a0113e991d126bc6dfe1e777faba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f3980d41667cfed6ee6560c16e90efa91cd24c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f3980d41667cfed6ee6560c16e90efa91cd24c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f3980d41667cfed6ee6560c16e90efa91cd24c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f3980d41667cfed6ee6560c16e90efa91cd24c6/comments", "author": null, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0a1fcccb5ddba4bff8acb6a219e1f7b2e96cec1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a1fcccb5ddba4bff8acb6a219e1f7b2e96cec1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0a1fcccb5ddba4bff8acb6a219e1f7b2e96cec1"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "24e19899cfefb010a6b54f2d741ddfbfc5e7729a", "filename": "gcc/rust/analysis/rust-resolution.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3980d41667cfed6ee6560c16e90efa91cd24c6/gcc%2Frust%2Fanalysis%2Frust-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3980d41667cfed6ee6560c16e90efa91cd24c6/gcc%2Frust%2Fanalysis%2Frust-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-resolution.cc?ref=2f3980d41667cfed6ee6560c16e90efa91cd24c6", "patch": "@@ -217,6 +217,8 @@ void\n TypeResolution::visit (AST::ArithmeticOrLogicalExpr &expr)\n {\n   printf (\"ArithmeticOrLogicalExpr: %s\\n\", expr.as_string ().c_str ());\n+  expr.visit_lhs (*this);\n+  expr.visit_rhs (*this);\n }\n \n void"}, {"sha": "7e5d43e51e6bf4c4fb2d4c60e5f54fc667153cf5", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f3980d41667cfed6ee6560c16e90efa91cd24c6/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f3980d41667cfed6ee6560c16e90efa91cd24c6/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=2f3980d41667cfed6ee6560c16e90efa91cd24c6", "patch": "@@ -620,6 +620,10 @@ class ArithmeticOrLogicalExpr : public OperatorExpr\n \n   virtual void accept_vis (ASTVisitor &vis) OVERRIDE;\n \n+  void visit_lhs (ASTVisitor &vis) { main_or_left_expr->accept_vis (vis); }\n+\n+  void visit_rhs (ASTVisitor &vis) { right_expr->accept_vis (vis); }\n+\n protected:\n   // Use covariance to implement clone function as returning this object rather\n   // than base"}]}