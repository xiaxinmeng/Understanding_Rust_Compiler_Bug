{"sha": "c3fd7b4dbf30278f2842842291ab56a6bfd625f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNmZDdiNGRiZjMwMjc4ZjI4NDI4NDIyOTFhYjU2YTZiZmQ2MjVmOQ==", "commit": {"author": {"name": "Hariharan Sandanagobalane", "email": "hariharan@picochip.com", "date": "2010-04-09T19:25:03Z"}, "committer": {"name": "Hariharan Sandanagobalane", "email": "hariharans@gcc.gnu.org", "date": "2010-04-09T19:25:03Z"}, "message": "picochip.c (picochip_rtx_costs): Use correct function template.\n\n\n        * config/picochip/picochip.c (picochip_rtx_costs): Use correct function\n          template.\n          (picochip_override_options): Enable section anchors only above O1.\n          (picochip_reorg): Fixed a couple of build warnings.\n\nFrom-SVN: r158174", "tree": {"sha": "8707fac3d0fbf6eca59c1fba48381de5019d6a99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8707fac3d0fbf6eca59c1fba48381de5019d6a99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3fd7b4dbf30278f2842842291ab56a6bfd625f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3fd7b4dbf30278f2842842291ab56a6bfd625f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3fd7b4dbf30278f2842842291ab56a6bfd625f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3fd7b4dbf30278f2842842291ab56a6bfd625f9/comments", "author": null, "committer": null, "parents": [{"sha": "fcf5268611723649b897c91271caf967f3fd7520", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcf5268611723649b897c91271caf967f3fd7520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcf5268611723649b897c91271caf967f3fd7520"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "a489883ef98de5d118a152fe56d2ef0c5ca5d260", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3fd7b4dbf30278f2842842291ab56a6bfd625f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3fd7b4dbf30278f2842842291ab56a6bfd625f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3fd7b4dbf30278f2842842291ab56a6bfd625f9", "patch": "@@ -1,3 +1,10 @@\n+2010-04-09  Hariharan Sandanagobalane <hariharan@picochip.com>\n+\n+\t* config/picochip/picochip.c (picochip_rtx_costs): Use correct function\n+\ttemplate.\n+\t(picochip_override_options): Enable section anchors only above O1.\n+\t(picochip_reorg): Fixed a couple of build warnings.\n+\n 2010-04-09  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac (plugin -rdynamic test): Log result."}, {"sha": "03df3fbc2cee3327a201a049df1f011468eb58fd", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3fd7b4dbf30278f2842842291ab56a6bfd625f9/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3fd7b4dbf30278f2842842291ab56a6bfd625f9/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=c3fd7b4dbf30278f2842842291ab56a6bfd625f9", "patch": "@@ -92,7 +92,7 @@ int picochip_sched_reorder (FILE * file, int verbose, rtx * ready,\n void picochip_init_builtins (void);\n rtx picochip_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n \n-bool picochip_rtx_costs (rtx x, int code, int outer_code, int* total);\n+bool picochip_rtx_costs (rtx x, int code, int outer_code, int* total, bool speed);\n bool picochip_return_in_memory(const_tree type,\n                               const_tree fntype ATTRIBUTE_UNUSED);\n bool picochip_legitimate_address_p (enum machine_mode, rtx, bool);\n@@ -335,9 +335,9 @@ picochip_override_options (void)\n \n   /* Turning on anchored addresses by default. This is an optimization\n      that could decrease the code size by placing anchors in data and\n-     accessing offsets from the anchor for file local data variables.\n-     This isnt the default at O2 as yet. */\n-  flag_section_anchors = 1;\n+     accessing offsets from the anchor for file local data variables.*/\n+  if (optimize >= 1)\n+    flag_section_anchors = 1;\n \n   /* Turn off the second scheduling pass, and move it to\n      picochip_reorg, to avoid having the second jump optimisation\n@@ -2957,7 +2957,7 @@ reorder_var_tracking_notes (void)\n void\n picochip_reorg (void)\n {\n-  rtx insn, insn1, vliw_start;\n+  rtx insn, insn1, vliw_start = NULL_RTX;\n   int vliw_insn_location = 0;\n \n   /* We are freeing block_for_insn in the toplev to keep compatibility\n@@ -3004,7 +3004,7 @@ picochip_reorg (void)\n \t     strange behaviour is certain to occur anyway. */\n           /* Slight bit of change. If the vliw set contains a branch\n              or call instruction, we pick its location.*/\n-\t  for (insn = get_insns (); insn; insn = next_insn (insn))\n+\t  for (insn = get_insns (); insn; insn = next_real_insn (insn))\n \t    {\n \n \t      /* If this is the first instruction in the VLIW packet,\n@@ -3017,12 +3017,11 @@ picochip_reorg (void)\n               if (JUMP_P (insn) || CALL_P(insn))\n               {\n                 vliw_insn_location = INSN_LOCATOR (insn);\n-                for (insn1 = vliw_start; insn1 != insn ; insn1 = next_insn (insn1))\n+                for (insn1 = vliw_start; insn1 != insn ; insn1 = next_real_insn (insn1))\n                   INSN_LOCATOR (insn1) = vliw_insn_location;\n               }\n               /* Tag subsequent instructions with the same location. */\n-              if (NONDEBUG_INSN_P (insn))\n-                INSN_LOCATOR (insn) = vliw_insn_location;\n+              INSN_LOCATOR (insn) = vliw_insn_location;\n \t    }\n \t}\n \n@@ -3450,12 +3449,12 @@ gen_SImode_mem(rtx opnd1,rtx opnd2)\n }\n \n bool\n-picochip_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int* total)\n+picochip_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int* total, bool speed)\n {\n \n   int localTotal = 0;\n \n-  if (optimize_size)\n+  if (!speed)\n   {\n     /* Need to penalize immediates that need to be encoded as long constants.*/\n     if (code == CONST_INT && !(INTVAL (x) >= 0 && INTVAL (x) < 16))"}]}