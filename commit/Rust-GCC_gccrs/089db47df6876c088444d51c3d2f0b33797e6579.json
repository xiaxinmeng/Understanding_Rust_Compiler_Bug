{"sha": "089db47df6876c088444d51c3d2f0b33797e6579", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg5ZGI0N2RmNjg3NmMwODg0NDRkNTFjM2QyZjBiMzM3OTdlNjU3OQ==", "commit": {"author": {"name": "Christopher D. Rickett", "email": "crickett@lanl.gov", "date": "2007-07-23T06:03:33Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-07-23T06:03:33Z"}, "message": "re PR fortran/32600 ([ISO Bind C] C_F_POINTER w/o SHAPE should not be a library function)\n\n2007-07-23  Christopher D. Rickett  <crickett@lanl.gov>\n\t    Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/32600\n\t* trans-expr.c (gfc_conv_function_call): Handle c_funloc.\n\t* trans-types.c: Add pfunc_type_node.\n\t(gfc_init_types,gfc_typenode_for_spec): Use it.\n\t* resolve.c (gfc_iso_c_func_interface): Fix whitespace and\n\timprove error message.\n\n2007-07-23  Christopher D. Rickett  <crickett@lanl.gov>\n\n\tPR fortran/32600\n\t* intrinsics/iso_c_binding.c (c_funloc): Remove.\n\t* intrinsics/iso_c_binding.h: Remove c_funloc.\n\t* gfortran.map: Ditto.\n\n2007-07-23  Christopher D. Rickett  <crickett@lanl.gov>\n\n\tPR fortran/32600\n\t* gfortran.dg/c_funloc_tests_5.f03: New.\n\t* gfortran.dg/c_funloc_tests_5.f04: New.\n\t* gfortran.dg/c_funloc_tests_4_driver.c: New.\n\n\nCo-Authored-By: Tobias Burnus <burnus@net-b.de>\n\nFrom-SVN: r126835", "tree": {"sha": "28b50eccc46d25b2454b71bb9460732f43780c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28b50eccc46d25b2454b71bb9460732f43780c54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/089db47df6876c088444d51c3d2f0b33797e6579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/089db47df6876c088444d51c3d2f0b33797e6579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/089db47df6876c088444d51c3d2f0b33797e6579", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/089db47df6876c088444d51c3d2f0b33797e6579/comments", "author": null, "committer": null, "parents": [{"sha": "db75c37a3a7aca7e7f4c634662d9cd9fab11518e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db75c37a3a7aca7e7f4c634662d9cd9fab11518e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db75c37a3a7aca7e7f4c634662d9cd9fab11518e"}], "stats": {"total": 246, "additions": 191, "deletions": 55}, "files": [{"sha": "8db51b8bb41e157137c9294a9fe7c6ca5ab8ae5a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089db47df6876c088444d51c3d2f0b33797e6579/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089db47df6876c088444d51c3d2f0b33797e6579/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=089db47df6876c088444d51c3d2f0b33797e6579", "patch": "@@ -1,3 +1,13 @@\n+2007-07-23  Christopher D. Rickett  <crickett@lanl.gov>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32600\n+\t* trans-expr.c (gfc_conv_function_call): Handle c_funloc.\n+\t* trans-types.c: Add pfunc_type_node.\n+\t(gfc_init_types,gfc_typenode_for_spec): Use it.\n+\t* resolve.c (gfc_iso_c_func_interface): Fix whitespace and\n+\timprove error message.\n+\n 2007-07-22  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/32710"}, {"sha": "891f9cfd7b7332a377a181b27d69f6c02ff5d5b5", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089db47df6876c088444d51c3d2f0b33797e6579/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089db47df6876c088444d51c3d2f0b33797e6579/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=089db47df6876c088444d51c3d2f0b33797e6579", "patch": "@@ -1904,14 +1904,14 @@ gfc_iso_c_func_interface (gfc_symbol *sym, gfc_actual_arglist *args,\n                              &(args->expr->where));\n               retval = FAILURE;\n             }\n-          else if (args->expr->symtree->n.sym->attr.is_c_interop != 1)\n-            {\n-              gfc_error_now (\"Parameter '%s' to '%s' at %L must be C \"\n-                             \"interoperable\",\n-                             args->expr->symtree->n.sym->name, sym->name,\n-                             &(args->expr->where));\n-              retval = FAILURE;\n-            }\n+\t  else if (args->expr->symtree->n.sym->attr.is_bind_c != 1)\n+\t    {\n+\t      gfc_error_now (\"Parameter '%s' to '%s' at %L must be \"\n+\t\t\t     \"BIND(C)\",\n+\t\t\t     args->expr->symtree->n.sym->name, sym->name,\n+\t\t\t     &(args->expr->where));\n+\t      retval = FAILURE;\n+\t    }\n         }\n       \n       /* for c_loc/c_funloc, the new symbol is the same as the old one */"}, {"sha": "1446d2b28f7ca3bc6237f6d92422d7281e2aa14d", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089db47df6876c088444d51c3d2f0b33797e6579/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089db47df6876c088444d51c3d2f0b33797e6579/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=089db47df6876c088444d51c3d2f0b33797e6579", "patch": "@@ -2060,31 +2060,40 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n   var = NULL_TREE;\n   len = NULL_TREE;\n \n-  if (sym->from_intmod == INTMOD_ISO_C_BINDING\n-      && sym->intmod_sym_id == ISOCBINDING_LOC)\n+  if (sym->from_intmod == INTMOD_ISO_C_BINDING)\n     {\n-      if (arg->expr->rank == 0)\n+      if (sym->intmod_sym_id == ISOCBINDING_LOC)\n \t{\n-\t  gfc_conv_expr_reference (se, arg->expr);\n+\t  if (arg->expr->rank == 0)\n+\t    gfc_conv_expr_reference (se, arg->expr);\n+\t  else\n+\t    {\n+\t      int f;\n+\t      /* This is really the actual arg because no formal arglist is\n+\t\t created for C_LOC.\t */\n+\t      fsym = arg->expr->symtree->n.sym;\n+\n+\t      /* We should want it to do g77 calling convention.  */\n+\t      f = (fsym != NULL)\n+\t\t&& !(fsym->attr.pointer || fsym->attr.allocatable)\n+\t\t&& fsym->as->type != AS_ASSUMED_SHAPE;\n+\t      f = f || !sym->attr.always_explicit;\n+\t  \n+\t      argss = gfc_walk_expr (arg->expr);\n+\t      gfc_conv_array_parameter (se, arg->expr, argss, f);\n+\t    }\n+\n+\t  return 0;\n \t}\n-      else\n+      else if (sym->intmod_sym_id == ISOCBINDING_FUNLOC)\n \t{\n-\t  int f;\n-\t  /* This is really the actual arg because no formal arglist is\n-\t     created for C_LOC.\t */\n-\t  fsym = arg->expr->symtree->n.sym;\n-\n-\t  /* We should want it to do g77 calling convention.  */\n-\t  f = (fsym != NULL)\n-\t    && !(fsym->attr.pointer || fsym->attr.allocatable)\n-\t    && fsym->as->type != AS_ASSUMED_SHAPE;\n-\t  f = f || !sym->attr.always_explicit;\n-\t  \n-\t  argss = gfc_walk_expr (arg->expr);\n-\t  gfc_conv_array_parameter (se, arg->expr, argss, f);\n+\t  arg->expr->ts.type = sym->ts.derived->ts.type;\n+\t  arg->expr->ts.f90_type = sym->ts.derived->ts.f90_type;\n+\t  arg->expr->ts.kind = sym->ts.derived->ts.kind;\n+\t  gfc_conv_expr_reference (se, arg->expr);\n+      \n+\t  return 0;\n \t}\n-\n-      return 0;\n     }\n   \n   if (se->ss != NULL)"}, {"sha": "2edb65a4ac459f75f4aa5915a168005720af5a84", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089db47df6876c088444d51c3d2f0b33797e6579/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089db47df6876c088444d51c3d2f0b33797e6579/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=089db47df6876c088444d51c3d2f0b33797e6579", "patch": "@@ -60,6 +60,7 @@ tree gfc_character1_type_node;\n tree pvoid_type_node;\n tree ppvoid_type_node;\n tree pchar_type_node;\n+tree pfunc_type_node;\n \n tree gfc_charlen_type_node;\n \n@@ -733,6 +734,8 @@ gfc_init_types (void)\n   pvoid_type_node = build_pointer_type (void_type_node);\n   ppvoid_type_node = build_pointer_type (pvoid_type_node);\n   pchar_type_node = build_pointer_type (gfc_character1_type_node);\n+  pfunc_type_node\n+    = build_pointer_type (build_function_type (void_type_node, NULL_TREE));\n \n   gfc_array_index_type = gfc_get_int_type (gfc_index_integer_kind);\n   /* We cannot use gfc_index_zero_node in definition of gfc_array_range_type,\n@@ -842,7 +845,13 @@ gfc_typenode_for_spec (gfc_typespec * spec)\n          has been resolved.  This is done so we can convert C_PTR and\n          C_FUNPTR to simple variables that get translated to (void *).  */\n       if (spec->f90_type == BT_VOID)\n-        basetype = ptr_type_node;\n+\t{\n+\t  if (spec->derived\n+\t      && spec->derived->intmod_sym_id == ISOCBINDING_PTR)\n+\t    basetype = ptr_type_node;\n+\t  else\n+\t    basetype = pfunc_type_node;\n+\t}\n       else\n         basetype = gfc_get_int_type (spec->kind);\n       break;\n@@ -878,9 +887,17 @@ gfc_typenode_for_spec (gfc_typespec * spec)\n         }\n       break;\n     case BT_VOID:\n-       /* This is for the second arg to c_f_pointer and c_f_procpointer\n-          of the iso_c_binding module, to accept any ptr type.  */\n-       basetype = ptr_type_node;\n+      /* This is for the second arg to c_f_pointer and c_f_procpointer\n+         of the iso_c_binding module, to accept any ptr type.  */\n+      basetype = ptr_type_node;\n+      if (spec->f90_type == BT_VOID)\n+\t{\n+\t  if (spec->derived\n+\t      && spec->derived->intmod_sym_id == ISOCBINDING_PTR)\n+\t    basetype = ptr_type_node;\n+\t  else\n+\t    basetype = pfunc_type_node;\n+\t}\n        break;\n     default:\n       gcc_unreachable ();\n@@ -1653,7 +1670,10 @@ gfc_get_derived_type (gfc_symbol * derived)\n   /* See if it's one of the iso_c_binding derived types.  */\n   if (derived->attr.is_iso_c == 1)\n     {\n-      derived->backend_decl = ptr_type_node;\n+      if (derived->intmod_sym_id == ISOCBINDING_PTR)\n+\tderived->backend_decl = ptr_type_node;\n+      else\n+\tderived->backend_decl = pfunc_type_node;\n       derived->ts.kind = gfc_index_integer_kind;\n       derived->ts.type = BT_INTEGER;\n       /* Set the f90_type to BT_VOID as a way to recognize something of type"}, {"sha": "54cc7acbeffab98c8623483fa5c347f6bc829e2f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089db47df6876c088444d51c3d2f0b33797e6579/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089db47df6876c088444d51c3d2f0b33797e6579/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=089db47df6876c088444d51c3d2f0b33797e6579", "patch": "@@ -1,3 +1,10 @@\n+2007-07-23  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/32600\n+\t* gfortran.dg/c_funloc_tests_5.f03: New.\n+\t* gfortran.dg/c_funloc_tests_5.f04: New.\n+\t* gfortran.dg/c_funloc_tests_4_driver.c: New.\n+\n 2007-07-22  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/32839"}, {"sha": "0733c5e20b1f7edf70caa983f7a5d7d831d08b00", "filename": "gcc/testsuite/gfortran.dg/c_funloc_tests_4.f03", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089db47df6876c088444d51c3d2f0b33797e6579/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089db47df6876c088444d51c3d2f0b33797e6579/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_4.f03?ref=089db47df6876c088444d51c3d2f0b33797e6579", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do run }\n+! { dg-additional-sources c_funloc_tests_4_driver.c }\n+! Test that the inlined c_funloc works.\n+module c_funloc_tests_4\n+  use, intrinsic :: iso_c_binding, only: c_funloc, c_funptr\n+  interface\n+     subroutine c_sub0(fsub_ptr) bind(c)\n+       use, intrinsic :: iso_c_binding, only: c_funptr\n+       type(c_funptr), value :: fsub_ptr\n+     end subroutine c_sub0\n+     subroutine c_sub1(ffunc_ptr) bind(c)\n+       use, intrinsic :: iso_c_binding, only: c_funptr\n+       type(c_funptr), value :: ffunc_ptr\n+     end subroutine c_sub1\n+  end interface\n+contains\n+  subroutine sub0() bind(c)\n+    type(c_funptr) :: my_c_funptr\n+\n+    my_c_funptr = c_funloc(sub1)\n+    call c_sub0(my_c_funptr)\n+\n+    my_c_funptr = c_funloc(func0)\n+    call c_sub1(my_c_funptr)\n+  end subroutine sub0\n+\n+  subroutine sub1() bind(c)\n+    print *, 'hello from sub1'\n+  end subroutine sub1\n+\n+  function func0(desired_retval) bind(c)\n+    use, intrinsic :: iso_c_binding, only: c_int\n+    integer(c_int), value :: desired_retval\n+    integer(c_int) :: func0\n+    print *, 'hello from func0'\n+    func0 = desired_retval\n+  end function func0\n+end module c_funloc_tests_4\n+! { dg-final { cleanup-modules \"c_funloc_tests_4\" } }\n+"}, {"sha": "17e4e6501b9fe1450ef9de6c94fe89ccb61f1a69", "filename": "gcc/testsuite/gfortran.dg/c_funloc_tests_4_driver.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089db47df6876c088444d51c3d2f0b33797e6579/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_4_driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089db47df6876c088444d51c3d2f0b33797e6579/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_4_driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_4_driver.c?ref=089db47df6876c088444d51c3d2f0b33797e6579", "patch": "@@ -0,0 +1,39 @@\n+#include <stdio.h>\n+\n+void sub0(void);\n+void c_sub0(void (*sub)(void));\n+void c_sub1(int (*func)(int));\n+\n+extern void abort(void);\n+\n+int main(int argc, char **argv)\n+{\n+  printf(\"hello from C main\\n\");\n+  \n+  sub0();\n+  return 0;\n+}\n+\n+void c_sub0(void (*sub)(void))\n+{\n+  printf(\"hello from c_sub0\\n\");\n+  sub();\n+  \n+  return;\n+}\n+\n+void c_sub1(int (*func)(int))\n+{\n+  int retval;\n+  \n+  printf(\"hello from c_sub1\\n\");\n+\n+  retval = func(10);\n+  if(retval != 10)\n+  {\n+    fprintf(stderr, \"Fortran function did not return expected value!\\n\");\n+    abort();\n+  }\n+\n+  return;\n+}"}, {"sha": "bbb418de62975a6cc9f41560641e1dc0d6a6a296", "filename": "gcc/testsuite/gfortran.dg/c_funloc_tests_5.f03", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089db47df6876c088444d51c3d2f0b33797e6579/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089db47df6876c088444d51c3d2f0b33797e6579/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_5.f03?ref=089db47df6876c088444d51c3d2f0b33797e6579", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+! Test that the arg checking for c_funloc verifies the procedures are \n+! C interoperable.\n+module c_funloc_tests_5\n+  use, intrinsic :: iso_c_binding, only: c_funloc, c_funptr\n+contains\n+  subroutine sub0() bind(c)\n+    type(c_funptr) :: my_c_funptr\n+\n+    my_c_funptr = c_funloc(sub1) ! { dg-error \"must be BIND.C.\" }\n+\n+    my_c_funptr = c_funloc(func0) ! { dg-error \"must be BIND.C.\" }\n+  end subroutine sub0\n+\n+  subroutine sub1() \n+  end subroutine sub1\n+\n+  function func0(desired_retval) \n+    use, intrinsic :: iso_c_binding, only: c_int\n+    integer(c_int), value :: desired_retval\n+    integer(c_int) :: func0\n+    func0 = desired_retval\n+  end function func0\n+end module c_funloc_tests_5\n+\n+"}, {"sha": "ae9d6b0aa8807665eee565498af2fc0013e91925", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089db47df6876c088444d51c3d2f0b33797e6579/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089db47df6876c088444d51c3d2f0b33797e6579/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=089db47df6876c088444d51c3d2f0b33797e6579", "patch": "@@ -1,3 +1,10 @@\n+2007-07-23  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/32600\n+\t* intrinsics/iso_c_binding.c (c_funloc): Remove.\n+\t* intrinsics/iso_c_binding.h: Remove c_funloc.\n+\t* gfortran.map: Ditto.\n+\n 2007-07-22  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \t* io/read.c (convert_real): Generate error only on EINVAL."}, {"sha": "c16dd1eee33ff59e681f4cbdf7f68ddc705d2f5e", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089db47df6876c088444d51c3d2f0b33797e6579/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089db47df6876c088444d51c3d2f0b33797e6579/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=089db47df6876c088444d51c3d2f0b33797e6579", "patch": "@@ -1027,7 +1027,6 @@ GFORTRAN_1.0 {\n     __iso_c_binding_c_f_pointer_l8;\n     __iso_c_binding_c_f_pointer_u0;\n     __iso_c_binding_c_f_procpointer;\n-    __iso_c_binding_c_funloc;\n   local:\n     *;\n };"}, {"sha": "29fb5181706e6089700c4eb245939b5dc9aa0e45", "filename": "libgfortran/intrinsics/iso_c_binding.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089db47df6876c088444d51c3d2f0b33797e6579/libgfortran%2Fintrinsics%2Fiso_c_binding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089db47df6876c088444d51c3d2f0b33797e6579/libgfortran%2Fintrinsics%2Fiso_c_binding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fiso_c_binding.c?ref=089db47df6876c088444d51c3d2f0b33797e6579", "patch": "@@ -232,22 +232,3 @@ ISO_C_BINDING_PREFIX (c_associated_2) (void *c_ptr_in_1, void *c_ptr_in_2)\n   else\n     return 1;\n }\n-\n-\n-/*  Return the C address of the given Fortran procedure.  This\n-    routine is expected to return a derived type of type C_FUNPTR,\n-    which represents the C address of the given Fortran object.  */\n-\n-void *\n-ISO_C_BINDING_PREFIX (c_funloc) (void *f90_obj)\n-{\n-  if (f90_obj == NULL)\n-    {\n-      runtime_error (\"C_LOC: Attempt to get C address for Fortran object\"\n-                     \" that has not been allocated or associated\");\n-      abort ();\n-    }\n-\n-  /* The \"C\" address should be the address of the object in Fortran.  */\n-  return f90_obj;\n-}"}, {"sha": "206359ad8c9a9427efbe08a9085b8c66c5456034", "filename": "libgfortran/intrinsics/iso_c_binding.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/089db47df6876c088444d51c3d2f0b33797e6579/libgfortran%2Fintrinsics%2Fiso_c_binding.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/089db47df6876c088444d51c3d2f0b33797e6579/libgfortran%2Fintrinsics%2Fiso_c_binding.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fiso_c_binding.h?ref=089db47df6876c088444d51c3d2f0b33797e6579", "patch": "@@ -64,6 +64,4 @@ void ISO_C_BINDING_PREFIX(c_f_pointer_u0) (void *, gfc_array_void *,\n void ISO_C_BINDING_PREFIX(c_f_pointer_d0) (void *, gfc_array_void *,\n \t\t\t\t\t   const array_t *);\n \n-void *ISO_C_BINDING_PREFIX(c_funloc) (void *);\n-\n #endif"}]}