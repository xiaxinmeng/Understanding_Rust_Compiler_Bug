{"sha": "e315eea9d086ffef705ae96a04ef1b15cfec7745", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMxNWVlYTlkMDg2ZmZlZjcwNWFlOTZhMDRlZjFiMTVjZmVjNzc0NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-12-04T08:25:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-12-04T08:25:24Z"}, "message": "re PR target/68655 (SSE2 cannot vec_perm of low and high part)\n\n\tPR target/68655\n\t* config/i386/i386.c (canonicalize_vector_int_perm): New function.\n\t(expand_vec_perm_1): Use it and recurse if everything else\n\tfailed.  Use nd.perm instead of perm2.\n\t(expand_vec_perm_even_odd_1): If testing_p, use gen_raw_REG\n\tinstead of gen_lowpart for the target.\n\t(ix86_expand_vec_perm_const_1): Use canonicalize_vector_int_perm\n\tand recurse if everything else failed.\n\n\t* gcc.dg/torture/vshuf-4.inc (TESTS): Add one extra test.\n\t* gcc.dg/torture/vshuf-4.inc (TESTS): Add two extra tests.\n\nFrom-SVN: r231247", "tree": {"sha": "66a206f2410fa1fee6325a6afb029b5952cbd15a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66a206f2410fa1fee6325a6afb029b5952cbd15a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e315eea9d086ffef705ae96a04ef1b15cfec7745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e315eea9d086ffef705ae96a04ef1b15cfec7745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e315eea9d086ffef705ae96a04ef1b15cfec7745", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e315eea9d086ffef705ae96a04ef1b15cfec7745/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5505978ab31300aa02f321f97af9512916ed8595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5505978ab31300aa02f321f97af9512916ed8595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5505978ab31300aa02f321f97af9512916ed8595"}], "stats": {"total": 127, "additions": 108, "deletions": 19}, "files": [{"sha": "7394e28444cacc16b2096b367bee611f0de640c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e315eea9d086ffef705ae96a04ef1b15cfec7745/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e315eea9d086ffef705ae96a04ef1b15cfec7745/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e315eea9d086ffef705ae96a04ef1b15cfec7745", "patch": "@@ -1,3 +1,14 @@\n+2015-12-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/68655\n+\t* config/i386/i386.c (canonicalize_vector_int_perm): New function.\n+\t(expand_vec_perm_1): Use it and recurse if everything else\n+\tfailed.  Use nd.perm instead of perm2.\n+\t(expand_vec_perm_even_odd_1): If testing_p, use gen_raw_REG\n+\tinstead of gen_lowpart for the target.\n+\t(ix86_expand_vec_perm_const_1): Use canonicalize_vector_int_perm\n+\tand recurse if everything else failed.\n+\n 2015-12-04  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/68636"}, {"sha": "4247af353acc94ecdef177f360321b4247b9c898", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 86, "deletions": 17, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e315eea9d086ffef705ae96a04ef1b15cfec7745/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e315eea9d086ffef705ae96a04ef1b15cfec7745/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e315eea9d086ffef705ae96a04ef1b15cfec7745", "patch": "@@ -49336,14 +49336,65 @@ expand_vec_perm_pshufb (struct expand_vec_perm_d *d)\n   return true;\n }\n \n+/* For V*[QHS]Imode permutations, check if the same permutation\n+   can't be performed in a 2x, 4x or 8x wider inner mode.  */\n+\n+static bool\n+canonicalize_vector_int_perm (const struct expand_vec_perm_d *d,\n+\t\t\t      struct expand_vec_perm_d *nd)\n+{\n+  int i;\n+  enum machine_mode mode = VOIDmode;\n+\n+  switch (d->vmode)\n+    {\n+    case V16QImode: mode = V8HImode; break;\n+    case V32QImode: mode = V16HImode; break;\n+    case V64QImode: mode = V32HImode; break;\n+    case V8HImode: mode = V4SImode; break;\n+    case V16HImode: mode = V8SImode; break;\n+    case V32HImode: mode = V16SImode; break;\n+    case V4SImode: mode = V2DImode; break;\n+    case V8SImode: mode = V4DImode; break;\n+    case V16SImode: mode = V8DImode; break;\n+    default: return false;\n+    }\n+  for (i = 0; i < d->nelt; i += 2)\n+    if ((d->perm[i] & 1) || d->perm[i + 1] != d->perm[i] + 1)\n+      return false;\n+  nd->vmode = mode;\n+  nd->nelt = d->nelt / 2;\n+  for (i = 0; i < nd->nelt; i++)\n+    nd->perm[i] = d->perm[2 * i] / 2;\n+  if (GET_MODE_INNER (mode) != DImode)\n+    canonicalize_vector_int_perm (nd, nd);\n+  if (nd != d)\n+    {\n+      nd->one_operand_p = d->one_operand_p;\n+      nd->testing_p = d->testing_p;\n+      if (d->op0 == d->op1)\n+\tnd->op0 = nd->op1 = gen_lowpart (nd->vmode, d->op0);\n+      else\n+\t{\n+\t  nd->op0 = gen_lowpart (nd->vmode, d->op0);\n+\t  nd->op1 = gen_lowpart (nd->vmode, d->op1);\n+\t}\n+      if (d->testing_p)\n+\tnd->target = gen_raw_REG (nd->vmode, LAST_VIRTUAL_REGISTER + 1);\n+      else\n+\tnd->target = gen_reg_rtx (nd->vmode);\n+    }\n+  return true;\n+}\n+\n /* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to instantiate D\n    in a single instruction.  */\n \n static bool\n expand_vec_perm_1 (struct expand_vec_perm_d *d)\n {\n   unsigned i, nelt = d->nelt;\n-  unsigned char perm2[MAX_VECT_LEN];\n+  struct expand_vec_perm_d nd;\n \n   /* Check plain VEC_SELECT first, because AVX has instructions that could\n      match both SEL and SEL+CONCAT, but the plain SEL will allow a memory\n@@ -49356,10 +49407,10 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n \n       for (i = 0; i < nelt; i++)\n \t{\n-\t  perm2[i] = d->perm[i] & mask;\n-\t  if (perm2[i] != i)\n+\t  nd.perm[i] = d->perm[i] & mask;\n+\t  if (nd.perm[i] != i)\n \t    identity_perm = false;\n-\t  if (perm2[i])\n+\t  if (nd.perm[i])\n \t    broadcast_perm = false;\n \t}\n \n@@ -49428,7 +49479,7 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n \t    }\n \t}\n \n-      if (expand_vselect (d->target, d->op0, perm2, nelt, d->testing_p))\n+      if (expand_vselect (d->target, d->op0, nd.perm, nelt, d->testing_p))\n \treturn true;\n \n       /* There are plenty of patterns in sse.md that are written for\n@@ -49439,10 +49490,10 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n \t every other permutation operand.  */\n       for (i = 0; i < nelt; i += 2)\n \t{\n-\t  perm2[i] = d->perm[i] & mask;\n-\t  perm2[i + 1] = (d->perm[i + 1] & mask) + nelt;\n+\t  nd.perm[i] = d->perm[i] & mask;\n+\t  nd.perm[i + 1] = (d->perm[i + 1] & mask) + nelt;\n \t}\n-      if (expand_vselect_vconcat (d->target, d->op0, d->op0, perm2, nelt,\n+      if (expand_vselect_vconcat (d->target, d->op0, d->op0, nd.perm, nelt,\n \t\t\t\t  d->testing_p))\n \treturn true;\n \n@@ -49451,13 +49502,13 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n \t{\n \t  for (i = 0; i < nelt; i += 4)\n \t    {\n-\t      perm2[i + 0] = d->perm[i + 0] & mask;\n-\t      perm2[i + 1] = d->perm[i + 1] & mask;\n-\t      perm2[i + 2] = (d->perm[i + 2] & mask) + nelt;\n-\t      perm2[i + 3] = (d->perm[i + 3] & mask) + nelt;\n+\t      nd.perm[i + 0] = d->perm[i + 0] & mask;\n+\t      nd.perm[i + 1] = d->perm[i + 1] & mask;\n+\t      nd.perm[i + 2] = (d->perm[i + 2] & mask) + nelt;\n+\t      nd.perm[i + 3] = (d->perm[i + 3] & mask) + nelt;\n \t    }\n \n-\t  if (expand_vselect_vconcat (d->target, d->op0, d->op0, perm2, nelt,\n+\t  if (expand_vselect_vconcat (d->target, d->op0, d->op0, nd.perm, nelt,\n \t\t\t\t      d->testing_p))\n \t    return true;\n \t}\n@@ -49478,10 +49529,10 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n \t    e -= nelt;\n \t  else\n \t    e += nelt;\n-\t  perm2[i] = e;\n+\t  nd.perm[i] = e;\n \t}\n \n-      if (expand_vselect_vconcat (d->target, d->op1, d->op0, perm2, nelt,\n+      if (expand_vselect_vconcat (d->target, d->op1, d->op0, nd.perm, nelt,\n \t\t\t\t  d->testing_p))\n \treturn true;\n     }\n@@ -49507,6 +49558,14 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n   if (ix86_expand_vec_perm_vpermi2 (NULL_RTX, NULL_RTX, NULL_RTX, NULL_RTX, d))\n     return true;\n \n+  /* See if we can get the same permutation in different vector integer\n+     mode.  */\n+  if (canonicalize_vector_int_perm (d, &nd) && expand_vec_perm_1 (&nd))\n+    {\n+      if (!d->testing_p)\n+\temit_move_insn (d->target, gen_lowpart (d->vmode, nd.target));\n+      return true;\n+    }\n   return false;\n }\n \n@@ -50939,7 +50998,7 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n \t  struct expand_vec_perm_d d_copy = *d;\n \t  d_copy.vmode = V4DFmode;\n \t  if (d->testing_p)\n-\t    d_copy.target = gen_lowpart (V4DFmode, d->target);\n+\t    d_copy.target = gen_raw_REG (V4DFmode, LAST_VIRTUAL_REGISTER + 1);\n \t  else\n \t    d_copy.target = gen_reg_rtx (V4DFmode);\n \t  d_copy.op0 = gen_lowpart (V4DFmode, d->op0);\n@@ -50978,7 +51037,7 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n \t  struct expand_vec_perm_d d_copy = *d;\n \t  d_copy.vmode = V8SFmode;\n \t  if (d->testing_p)\n-\t    d_copy.target = gen_lowpart (V8SFmode, d->target);\n+\t    d_copy.target = gen_raw_REG (V8SFmode, LAST_VIRTUAL_REGISTER + 1);\n \t  else\n \t    d_copy.target = gen_reg_rtx (V8SFmode);\n \t  d_copy.op0 = gen_lowpart (V8SFmode, d->op0);\n@@ -51422,6 +51481,16 @@ ix86_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n   if (expand_vec_perm_vpshufb4_vpermq2 (d))\n     return true;\n \n+  /* See if we can get the same permutation in different vector integer\n+     mode.  */\n+  struct expand_vec_perm_d nd;\n+  if (canonicalize_vector_int_perm (d, &nd) && expand_vec_perm_1 (&nd))\n+    {\n+      if (!d->testing_p)\n+\temit_move_insn (d->target, gen_lowpart (d->vmode, nd.target));\n+      return true;\n+    }\n+\n   return false;\n }\n "}, {"sha": "2e93d1ade2b36906808c3bd5f8484a7b35e05138", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e315eea9d086ffef705ae96a04ef1b15cfec7745/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e315eea9d086ffef705ae96a04ef1b15cfec7745/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e315eea9d086ffef705ae96a04ef1b15cfec7745", "patch": "@@ -1,3 +1,9 @@\n+2015-12-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/68655\n+\t* gcc.dg/torture/vshuf-4.inc (TESTS): Add one extra test.\n+\t* gcc.dg/torture/vshuf-4.inc (TESTS): Add two extra tests.\n+\n 2015-12-03  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR target/68472"}, {"sha": "d041b33871b4c135497543723e50688d3f2862fc", "filename": "gcc/testsuite/gcc.dg/torture/vshuf-4.inc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e315eea9d086ffef705ae96a04ef1b15cfec7745/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-4.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e315eea9d086ffef705ae96a04ef1b15cfec7745/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-4.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-4.inc?ref=e315eea9d086ffef705ae96a04ef1b15cfec7745", "patch": "@@ -24,7 +24,8 @@ T (20,\t0, 4, 1, 5) \\\n T (21,\t2, 6, 3, 7) \\\n T (22,\t1, 2, 3, 0) \\\n T (23,\t2, 1, 0, 3) \\\n-T (24,\t2, 5, 6, 3)\n+T (24,\t2, 5, 6, 3) \\\n+T (25,\t0, 1, 4, 5)\n #define EXPTESTS \\\n T (116,\t1, 2, 4, 3) \\\n T (117,\t7, 3, 3, 0) \\"}, {"sha": "d7a76108d8a4b32b920a4c60e08df40fb7bdb0fa", "filename": "gcc/testsuite/gcc.dg/torture/vshuf-8.inc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e315eea9d086ffef705ae96a04ef1b15cfec7745/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-8.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e315eea9d086ffef705ae96a04ef1b15cfec7745/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-8.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-8.inc?ref=e315eea9d086ffef705ae96a04ef1b15cfec7745", "patch": "@@ -23,7 +23,9 @@ T (19,\t7, 6, 5, 4, 3, 2, 1, 0) \\\n T (20,\t0, 8, 1, 9, 2, 10, 3, 11) \\\n T (21,\t4, 12, 5, 13, 6, 14, 7, 15) \\\n T (22,\t1, 2, 3, 4, 5, 6, 7, 0) \\\n-T (23,\t6, 5, 4, 3, 2, 1, 0, 7)\n+T (23,\t6, 5, 4, 3, 2, 1, 0, 7) \\\n+T (24,\t0, 1, 2, 3, 8, 9, 10, 11) \\\n+T (25,\t0, 1, 2, 3, 12, 13, 14, 15)\n #define EXPTESTS \\\n T (116,\t9, 3, 9, 4, 7, 0, 0, 6) \\\n T (117,\t4, 14, 12, 8, 9, 6, 0, 10) \\"}]}