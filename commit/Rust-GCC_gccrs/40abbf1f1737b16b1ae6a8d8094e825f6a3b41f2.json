{"sha": "40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBhYmJmMWYxNzM3YjE2YjFhZTZhOGQ4MDk0ZTgyNWY2YTNiNDFmMg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-10-29T21:13:23Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-10-29T21:13:23Z"}, "message": "c++config (_GLIBCXX_DEPRECATED, [...]): New.\n\n2007-10-29  Benjamin Kosnik  <bkoz@redhat.com>\n \n\t* include/bits/c++config (_GLIBCXX_DEPRECATED,\n\t_GLIBCXX_USE_DEPRECATED): New. Adjust comments.\n\t* include/bits/stl_auto_ptr.h: Move...\n\t* includse/backward/auto_ptr.h: ...here.\n\t* include/bits/stl_function.h (binder1st, binder2nd, bind1st,\n\tbind2nd): Move...\n\t* include/backward/binders.h: ...here. Deprecate in C++0x.\n\n\t* include/tr1_impl/boost_shared_ptr.h: Guard auto_ptr usage.\n\t* include/std/memory: Same.\n\t* include/std/streambuf: Consistent use of _GLIBCXX_USE_DEPRECATED.\n\n\t* include/backward/strstream: Fix guard macros.\n\t* include/backward/backward_warning.h: Adjust for all new items.\n\n\t* config/abi/pre/gnu.ver: Export basic_streambuf::stossc.\n\t\n\t* include/Makefile.am (backward_headers): Adjust.\n\t* include/Makefile.in: Regenerate.\n\t* configure: Regenerate.\n\nFrom-SVN: r129733", "tree": {"sha": "dcc685cb8e3b6dcb9a78711d43471fd482c26f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcc685cb8e3b6dcb9a78711d43471fd482c26f3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/comments", "author": null, "committer": null, "parents": [{"sha": "0ba227b5a438a9122241085bc79dbdd1fcbfe13e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba227b5a438a9122241085bc79dbdd1fcbfe13e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ba227b5a438a9122241085bc79dbdd1fcbfe13e"}], "stats": {"total": 421, "additions": 283, "deletions": 138}, "files": [{"sha": "cbaf73ddcd81c138ce49e86499dee6e17a6048e6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "patch": "@@ -1,3 +1,26 @@\n+2007-10-29  Benjamin Kosnik  <bkoz@redhat.com>\n+ \n+\t* include/bits/c++config (_GLIBCXX_DEPRECATED,\n+\t_GLIBCXX_USE_DEPRECATED): New. Adjust comments.\n+\t* include/bits/stl_auto_ptr.h: Move...\n+\t* includse/backward/auto_ptr.h: ...here.\n+\t* include/bits/stl_function.h (binder1st, binder2nd, bind1st,\n+\tbind2nd): Move...\n+\t* include/backward/binders.h: ...here. Deprecate in C++0x.\n+\n+\t* include/tr1_impl/boost_shared_ptr.h: Guard auto_ptr usage.\n+\t* include/std/memory: Same.\n+\t* include/std/streambuf: Consistent use of _GLIBCXX_USE_DEPRECATED.\n+\n+\t* include/backward/strstream: Fix guard macros.\n+\t* include/backward/backward_warning.h: Adjust for all new items.\n+\n+\t* config/abi/pre/gnu.ver: Export basic_streambuf::stossc.\n+\t\n+\t* include/Makefile.am (backward_headers): Adjust.\n+\t* include/Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\n 2007-10-29  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/Makefile.am (ext_compat_headers): New."}, {"sha": "87cc92ec5ad73400c52a33bd3a82a870aaaa59e1", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "patch": "@@ -48,7 +48,7 @@ GLIBCXX_3.4 {\n       std::basic_ostr[a-d]*;\n       std::basic_ostr[f-z]*;\n       std::basic_[p-r]*;\n-      std::basic_streambuf*;\n+#     std::basic_streambuf\n #     std::basic_string\n #     std::basic_stringbuf\n       std::basic_stringstream*;\n@@ -233,6 +233,13 @@ GLIBCXX_3.4 {\n     _ZNKSbIwSt11char_traitsIwESaIwEE9_M_ibeginEv;\n     _ZStplIwSt11char_traitsIwESaIwEESbIT_T0_T1_E*;\n \n+    # std::basic_streambuf\n+    _ZNSt15basic_streambufI[cw]St11char_traitsI[cw]EE[CD]*;\n+    _ZNKSt15basic_streambufI[cw]St11char_traitsI[cw]EE[0-9]*;\n+    _ZNSt15basic_streambufI[cw]St11char_traitsI[cw]EE[0-9][a-z][^t]*;\n+    _ZNSt15basic_streambufI[cw]St11char_traitsI[cw]EE[0-9][0-9][a-z][^t]*;\n+    _ZNSt15basic_streambufI[cw]St11char_traitsI[cw]EEaSERKS2_;\n+\n     # std::basic_stringbuf\n     _ZNSt15basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE[CD]*;\n     _ZNSt15basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE[0-9][a-r]*;\n@@ -777,6 +784,8 @@ GLIBCXX_3.4.10 {\n     _ZNSt9__cxx199815_List_node_base7reverseEv;\n     _ZNSt9__cxx199815_List_node_base8transfer*;\n \n+    _ZNSt15basic_streambufI[cw]St11char_traitsI[cw]EE6stosscEv;\n+\n } GLIBCXX_3.4.9;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "b3d12571097deb101ca1a2869d87745d6de9b364", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "patch": "@@ -119,7 +119,6 @@ bits_headers = \\\n \t${bits_srcdir}/stl_iterator_base_types.h \\\n \t${bits_srcdir}/stl_list.h \\\n \t${bits_srcdir}/stl_map.h \\\n-\t${bits_srcdir}/stl_auto_ptr.h \\\n \t${bits_srcdir}/stl_move.h \\\n \t${bits_srcdir}/stl_multimap.h \\\n \t${bits_srcdir}/stl_multiset.h \\\n@@ -145,12 +144,14 @@ bits_headers = \\\n backward_srcdir = ${glibcxx_srcdir}/include/backward\n backward_builddir = ./backward\n backward_headers = \\\n-\t${backward_srcdir}/strstream \\\n+\t${backward_srcdir}/auto_ptr.h \\\n+\t${backward_srcdir}/backward_warning.h \\\n+\t${backward_srcdir}/binders.h \\\n \t${backward_srcdir}/hash_map \\\n \t${backward_srcdir}/hash_set \\\n \t${backward_srcdir}/hash_fun.h \\\n \t${backward_srcdir}/hashtable.h \\\n-\t${backward_srcdir}/backward_warning.h\n+\t${backward_srcdir}/strstream \n \n pb_srcdir = ${glibcxx_srcdir}/include/ext/pb_ds\n pb_builddir = ./ext/pb_ds"}, {"sha": "5a70ed136e8cdd994754e2a77ca57636ebe95d30", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "patch": "@@ -368,7 +368,6 @@ bits_headers = \\\n \t${bits_srcdir}/stl_iterator_base_types.h \\\n \t${bits_srcdir}/stl_list.h \\\n \t${bits_srcdir}/stl_map.h \\\n-\t${bits_srcdir}/stl_auto_ptr.h \\\n \t${bits_srcdir}/stl_move.h \\\n \t${bits_srcdir}/stl_multimap.h \\\n \t${bits_srcdir}/stl_multiset.h \\\n@@ -394,12 +393,14 @@ bits_headers = \\\n backward_srcdir = ${glibcxx_srcdir}/include/backward\n backward_builddir = ./backward\n backward_headers = \\\n-\t${backward_srcdir}/strstream \\\n+\t${backward_srcdir}/auto_ptr.h \\\n+\t${backward_srcdir}/backward_warning.h \\\n+\t${backward_srcdir}/binders.h \\\n \t${backward_srcdir}/hash_map \\\n \t${backward_srcdir}/hash_set \\\n \t${backward_srcdir}/hash_fun.h \\\n \t${backward_srcdir}/hashtable.h \\\n-\t${backward_srcdir}/backward_warning.h\n+\t${backward_srcdir}/strstream \n \n pb_srcdir = ${glibcxx_srcdir}/include/ext/pb_ds\n pb_builddir = ./ext/pb_ds"}, {"sha": "3be41d10ab8e33ca2a07354d2fb3908a4ebacd45", "filename": "libstdc++-v3/include/backward/auto_ptr.h", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h?ref=40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "patch": "@@ -27,7 +27,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file stl_auto_ptr.h\n+/** @file backward/auto_ptr.h\n  *  This is an internal header file, included by other library headers.\n  *  You should not attempt to use it directly.\n  */\n@@ -54,7 +54,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       \n       explicit\n       auto_ptr_ref(_Tp1* __p): _M_ptr(__p) { }\n-    };\n+    } _GLIBCXX_DEPRECATED;\n \n \n   /**\n@@ -285,7 +285,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       template<typename _Tp1>\n         operator auto_ptr<_Tp1>() throw()\n         { return auto_ptr<_Tp1>(this->release()); }\n-    };\n+    } _GLIBCXX_DEPRECATED;\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 541. shared_ptr template assignment and void\n@@ -294,7 +294,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n     public:\n       typedef void element_type;\n-    };\n+    } _GLIBCXX_DEPRECATED;\n \n _GLIBCXX_END_NAMESPACE\n ", "previous_filename": "libstdc++-v3/include/bits/stl_auto_ptr.h"}, {"sha": "01371a7db0da6a79386ba2a73d6755e0c6450877", "filename": "libstdc++-v3/include/backward/backward_warning.h", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbackward_warning.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbackward_warning.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbackward_warning.h?ref=40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "patch": "@@ -30,15 +30,24 @@\n \n #ifdef __DEPRECATED\n #warning This file includes at least one deprecated or antiquated header. \\\n-  Please consider the use of alternate interfaces as follows: \\\n-  <sstream> \t\tbasic_stringbuf\t   \t<strstream>\tstrstreambuf \\\n-  <sstream> \t\tbasic_istringstream\t<strstream>\tistrstream \\\n-  <sstream> \t\tbasic_ostringstream\t<strstream> \tostrstream \\\n-  <sstream> \t\tbasic_stringstream\t<strstream> \tstrstream \\\n-  <unordered_set> \tunordered_set\t\t<ext/hash_set> \thash_set \\\n-  <unordered_set> \tunordered_multiset\t<ext/hash_set> \thash_multiset \\\n-  <unordered_map> \tunordered_map\t\t<ext/hash_set> \thash_map \\\n-  <unordered_map> \tunordered_multimap\t<ext/hash_set> \thash_multimap \\\n+  Please consider use of an equivalent, non-deprecated interface for the  \\\n+  requested functionality. A list of valid replacements is as follows:\t  \\\n+                                                                          \\\n+  Use:\t\t\t\t\tInstead of:                       \\\n+  <sstream>, basic_stringbuf\t   \t<strstream>, strstreambuf\t  \\\n+  <sstream>, basic_istringstream\t<strstream>, istrstream\t\t  \\\n+  <sstream>, basic_ostringstream\t<strstream>, ostrstream\t\t  \\\n+  <sstream>, basic_stringstream\t\t<strstream>, strstream\t\t  \\\n+  <unordered_set>, unordered_set       \t<ext/hash_set>, hash_set\t  \\\n+  <unordered_set>, unordered_multiset\t<ext/hash_set>, hash_multiset\t  \\\n+  <unordered_map>, unordered_map\t<ext/hash_set>, hash_map\t  \\\n+  <unordered_map>, unordered_multimap\t<ext/hash_set>, hash_multimap\t  \\\n+  <functional>, bind\t\t\t<functional>, binder1st\t  \t  \\\n+  <functional>, bind\t\t\t<functional>, binder2nd\t  \t  \\\n+  <functional>, bind\t\t\t<functional>, bind1st\t  \t  \\\n+  <functional>, bind\t\t\t<functional>, bind2nd\t  \t  \\\n+  <memory>, unique_ptr       \t\t<memory>, auto_ptr\t  \t  \\\n+                                                                          \\\n   To disable this warning use -Wno-deprecated.\n #endif\n "}, {"sha": "313bffcd8242c38c5b67cbe901ec0705cf0edc6d", "filename": "libstdc++-v3/include/backward/binders.h", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbinders.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbinders.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbinders.h?ref=40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "patch": "@@ -0,0 +1,171 @@\n+// Functor implementations -*- C++ -*-\n+\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1996-1998\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+/** @file backward/binders.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _GLIBCXX_BINDERS_H\n+#define _GLIBCXX_BINDERS_H 1\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  // 20.3.6 binders\n+  /** @defgroup s20_3_6_binder Binder Classes\n+   *  Binders turn functions/functors with two arguments into functors with\n+   *  a single argument, storing an argument to be applied later.  For\n+   *  example, a variable @c B of type @c binder1st is constructed from a\n+   *  functor @c f and an argument @c x.  Later, B's @c operator() is called\n+   *  with a single argument @c y.  The return value is the value of @c f(x,y).\n+   *  @c B can be \"called\" with various arguments (y1, y2, ...) and will in\n+   *  turn call @c f(x,y1), @c f(x,y2), ...\n+   *\n+   *  The function @c bind1st is provided to save some typing.  It takes the\n+   *  function and an argument as parameters, and returns an instance of\n+   *  @c binder1st.\n+   *\n+   *  The type @c binder2nd and its creator function @c bind2nd do the same\n+   *  thing, but the stored argument is passed as the second parameter instead\n+   *  of the first, e.g., @c bind2nd(std::minus<float>,1.3) will create a\n+   *  functor whose @c operator() accepts a floating-point number, subtracts\n+   *  1.3 from it, and returns the result.  (If @c bind1st had been used,\n+   *  the functor would perform \"1.3 - x\" instead.\n+   *\n+   *  Creator-wrapper functions like @c bind1st are intended to be used in\n+   *  calling algorithms.  Their return values will be temporary objects.\n+   *  (The goal is to not require you to type names like\n+   *  @c std::binder1st<std::plus<int>> for declaring a variable to hold the\n+   *  return value from @c bind1st(std::plus<int>,5).\n+   *\n+   *  These become more useful when combined with the composition functions.\n+   *\n+   *  @{\n+   */\n+  /// One of the @link s20_3_6_binder binder functors@endlink.\n+  template<typename _Operation>\n+    class binder1st\n+    : public unary_function<typename _Operation::second_argument_type,\n+\t\t\t    typename _Operation::result_type>\n+    {\n+    protected:\n+      _Operation op;\n+      typename _Operation::first_argument_type value;\n+\n+    public:\n+      binder1st(const _Operation& __x,\n+\t\tconst typename _Operation::first_argument_type& __y)\n+      : op(__x), value(__y) { }\n+\n+      typename _Operation::result_type\n+      operator()(const typename _Operation::second_argument_type& __x) const\n+      { return op(value, __x); }\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 109.  Missing binders for non-const sequence elements\n+      typename _Operation::result_type\n+      operator()(typename _Operation::second_argument_type& __x) const\n+      { return op(value, __x); }\n+    } _GLIBCXX_DEPRECATED;\n+\n+  /// One of the @link s20_3_6_binder binder functors@endlink.\n+  template<typename _Operation, typename _Tp>\n+    inline binder1st<_Operation>\n+    bind1st(const _Operation& __fn, const _Tp& __x)\n+    {\n+      typedef typename _Operation::first_argument_type _Arg1_type;\n+      return binder1st<_Operation>(__fn, _Arg1_type(__x));\n+    }\n+\n+  /// One of the @link s20_3_6_binder binder functors@endlink.\n+  template<typename _Operation>\n+    class binder2nd\n+    : public unary_function<typename _Operation::first_argument_type,\n+\t\t\t    typename _Operation::result_type>\n+    {\n+    protected:\n+      _Operation op;\n+      typename _Operation::second_argument_type value;\n+\n+    public:\n+      binder2nd(const _Operation& __x,\n+\t\tconst typename _Operation::second_argument_type& __y)\n+      : op(__x), value(__y) { }\n+\n+      typename _Operation::result_type\n+      operator()(const typename _Operation::first_argument_type& __x) const\n+      { return op(__x, value); }\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 109.  Missing binders for non-const sequence elements\n+      typename _Operation::result_type\n+      operator()(typename _Operation::first_argument_type& __x) const\n+      { return op(__x, value); }\n+    } _GLIBCXX_DEPRECATED;\n+\n+  /// One of the @link s20_3_6_binder binder functors@endlink.\n+  template<typename _Operation, typename _Tp>\n+    inline binder2nd<_Operation>\n+    bind2nd(const _Operation& __fn, const _Tp& __x)\n+    {\n+      typedef typename _Operation::second_argument_type _Arg2_type;\n+      return binder2nd<_Operation>(__fn, _Arg2_type(__x));\n+    } \n+  /** @}  */\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif /* _GLIBCXX_BINDERS_H */"}, {"sha": "18617419c35e95add5606be50b704f2e46bad67b", "filename": "libstdc++-v3/include/backward/strstream", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream?ref=40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "patch": "@@ -42,11 +42,11 @@\n \n // WARNING: The classes defined in this header are DEPRECATED.  This\n // header is defined in section D.7.1 of the C++ standard, and it\n-// MAY BE REMOVED in a future standard revision.  You should use the\n+// MAY BE REMOVED in a future standard revision.  One should use the\n // header <sstream> instead.\n \n-#ifndef __SGI_STL_STRSTREAM\n-#define __SGI_STL_STRSTREAM\n+#ifndef _GLIBCXX_STRSTREAM\n+#define _GLIBCXX_STRSTREAM\n \n #include \"backward_warning.h\"\n #include <iosfwd>"}, {"sha": "58c34733ec8560ee8e68f2614286b55579320764", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "patch": "@@ -45,7 +45,9 @@\n // The current version of the C++ library in compressed ISO date format.\n #define __GLIBCXX__ \n \n-// Macros for visibility support.\n+// Macros for visibility.\n+// _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY\n+// _GLIBCXX_VISIBILITY\n #define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY\n \n #if _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY\n@@ -54,6 +56,24 @@\n # define _GLIBCXX_VISIBILITY(V) \n #endif\n \n+// Macros for deprecated.\n+// _GLIBCXX_USE_DEPRECATED\n+// _GLIBCXX_DEPRECATED\n+#ifndef _GLIBCXX_USE_DEPRECATED\n+# define _GLIBCXX_USE_DEPRECATED 1\n+#endif\n+\n+#if defined(__DEPRECATED) && defined(__GXX_EXPERIMENTAL_CXX0X__)\n+# define _GLIBCXX_DEPRECATED __attribute__ ((__deprecated__))\n+#else\n+# define _GLIBCXX_DEPRECATED\n+#endif\n+\n+// Macros for activating various namespace association modes.\n+// _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG\n+// _GLIBCXX_NAMESPACE_ASSOCIATION_PARALLEL\n+// _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION\n+\n // Guide to libstdc++ namespaces.\n /*\n   namespace std\n@@ -67,11 +87,6 @@\n   }\n */\n \n-// Macros for activating various namespace association modes.\n-// _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG\n-// _GLIBCXX_NAMESPACE_ASSOCIATION_PARALLEL\n-// _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION\n-\n #ifdef _GLIBCXX_DEBUG\n # define _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG 1\n #endif\n@@ -89,8 +104,8 @@\n # define _GLIBCXX_USE_NAMESPACE_ASSOCIATION 1\n #endif\n \n-// Macros for namespace scope. Either namespace std:: or __gnu_cxx::,\n-// or the name of some nested namespace within it.\n+// Macros for namespace scope. Either namespace std:: or the name\n+// of some nested namespace within it.\n // _GLIBCXX_STD\n // _GLIBCXX_STD_D\n // _GLIBCXX_STD_P"}, {"sha": "7b392fc104dd01fd1a0322762fcb61cde2703c1b", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 4, "deletions": 102, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "patch": "@@ -386,108 +386,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { return binary_negate<_Predicate>(__pred); }\n   /** @}  */\n \n-  // 20.3.6 binders\n-  /** @defgroup s20_3_6_binder Binder Classes\n-   *  Binders turn functions/functors with two arguments into functors with\n-   *  a single argument, storing an argument to be applied later.  For\n-   *  example, a variable @c B of type @c binder1st is constructed from a\n-   *  functor @c f and an argument @c x.  Later, B's @c operator() is called\n-   *  with a single argument @c y.  The return value is the value of @c f(x,y).\n-   *  @c B can be \"called\" with various arguments (y1, y2, ...) and will in\n-   *  turn call @c f(x,y1), @c f(x,y2), ...\n-   *\n-   *  The function @c bind1st is provided to save some typing.  It takes the\n-   *  function and an argument as parameters, and returns an instance of\n-   *  @c binder1st.\n-   *\n-   *  The type @c binder2nd and its creator function @c bind2nd do the same\n-   *  thing, but the stored argument is passed as the second parameter instead\n-   *  of the first, e.g., @c bind2nd(std::minus<float>,1.3) will create a\n-   *  functor whose @c operator() accepts a floating-point number, subtracts\n-   *  1.3 from it, and returns the result.  (If @c bind1st had been used,\n-   *  the functor would perform \"1.3 - x\" instead.\n-   *\n-   *  Creator-wrapper functions like @c bind1st are intended to be used in\n-   *  calling algorithms.  Their return values will be temporary objects.\n-   *  (The goal is to not require you to type names like\n-   *  @c std::binder1st<std::plus<int>> for declaring a variable to hold the\n-   *  return value from @c bind1st(std::plus<int>,5).\n-   *\n-   *  These become more useful when combined with the composition functions.\n-   *\n-   *  @{\n-   */\n-  /// One of the @link s20_3_6_binder binder functors@endlink.\n-  template<typename _Operation>\n-    class binder1st\n-    : public unary_function<typename _Operation::second_argument_type,\n-\t\t\t    typename _Operation::result_type>\n-    {\n-    protected:\n-      _Operation op;\n-      typename _Operation::first_argument_type value;\n-\n-    public:\n-      binder1st(const _Operation& __x,\n-\t\tconst typename _Operation::first_argument_type& __y)\n-      : op(__x), value(__y) { }\n-\n-      typename _Operation::result_type\n-      operator()(const typename _Operation::second_argument_type& __x) const\n-      { return op(value, __x); }\n-\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 109.  Missing binders for non-const sequence elements\n-      typename _Operation::result_type\n-      operator()(typename _Operation::second_argument_type& __x) const\n-      { return op(value, __x); }\n-    };\n-\n-  /// One of the @link s20_3_6_binder binder functors@endlink.\n-  template<typename _Operation, typename _Tp>\n-    inline binder1st<_Operation>\n-    bind1st(const _Operation& __fn, const _Tp& __x)\n-    {\n-      typedef typename _Operation::first_argument_type _Arg1_type;\n-      return binder1st<_Operation>(__fn, _Arg1_type(__x));\n-    }\n-\n-  /// One of the @link s20_3_6_binder binder functors@endlink.\n-  template<typename _Operation>\n-    class binder2nd\n-    : public unary_function<typename _Operation::first_argument_type,\n-\t\t\t    typename _Operation::result_type>\n-    {\n-    protected:\n-      _Operation op;\n-      typename _Operation::second_argument_type value;\n-\n-    public:\n-      binder2nd(const _Operation& __x,\n-\t\tconst typename _Operation::second_argument_type& __y)\n-      : op(__x), value(__y) { }\n-\n-      typename _Operation::result_type\n-      operator()(const typename _Operation::first_argument_type& __x) const\n-      { return op(__x, value); }\n-\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 109.  Missing binders for non-const sequence elements\n-      typename _Operation::result_type\n-      operator()(typename _Operation::first_argument_type& __x) const\n-      { return op(__x, value); }\n-    };\n-\n-  /// One of the @link s20_3_6_binder binder functors@endlink.\n-  template<typename _Operation, typename _Tp>\n-    inline binder2nd<_Operation>\n-    bind2nd(const _Operation& __fn, const _Tp& __x)\n-    {\n-      typedef typename _Operation::second_argument_type _Arg2_type;\n-      return binder2nd<_Operation>(__fn, _Arg2_type(__x));\n-    }\n-  /** @}  */\n-\n   // 20.3.7 adaptors pointers functions\n   /** @defgroup s20_3_7_adaptors Adaptors for pointers to functions\n    *  The advantage of function objects over pointers to functions is that\n@@ -802,4 +700,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n _GLIBCXX_END_NAMESPACE\n \n+#if !defined(__GXX_EXPERIMENTAL_CXX0X__) || _GLIBCXX_USE_DEPRECATED\n+# include <backward/binders.h>\n+#endif\n+\n #endif /* _STL_FUNCTION_H */"}, {"sha": "39f72563d17f551b9acd3640a3a5e830eaa56494", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "patch": "@@ -56,7 +56,6 @@\n #include <bits/stl_construct.h>\n #include <bits/stl_uninitialized.h>\n #include <bits/stl_tempbuf.h>\n-#include <bits/stl_auto_ptr.h>\n #include <bits/stl_raw_storage_iter.h>\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -73,6 +72,9 @@\n #  include <bits/stl_function.h>  // std::less\n #  include <debug/debug.h>\n #  include <type_traits>\n+#  if _GLIBCXX_USE_DEPRECATED\n+#    include <backward/auto_ptr.h>\n+#  endif\n #  if defined(_GLIBCXX_INCLUDE_AS_CXX0X)\n #    include <tr1_impl/boost_shared_ptr.h>\n #  else\n@@ -86,6 +88,8 @@\n #    undef _GLIBCXX_BEGIN_NAMESPACE_TR1\n #    undef _GLIBCXX_INCLUDE_AS_CXX0X\n #  endif\n+#else\n+#  include <backward/auto_ptr.h>\n #endif\n \n #endif /* _GLIBCXX_MEMORY */"}, {"sha": "d5842fa2bc1f0f35e59a60dab1707b545e3c8d40", "filename": "libstdc++-v3/include/std/streambuf", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf?ref=40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "patch": "@@ -1,7 +1,7 @@\n // Stream buffer classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n-// Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+// 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -763,7 +763,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       overflow(int_type /* __c */ = traits_type::eof())\n       { return traits_type::eof(); }\n \n-#ifdef _GLIBCXX_DEPRECATED\n+#if _GLIBCXX_USE_DEPRECATED\n     // Annex D.6\n     public:\n       /**"}, {"sha": "55c60bc0e17d460289ed6e59d2a243bcb5860d8d", "filename": "libstdc++-v3/include/tr1_impl/boost_shared_ptr.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fboost_shared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fboost_shared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fboost_shared_ptr.h?ref=40abbf1f1737b16b1ae6a8d8094e825f6a3b41f2", "patch": "@@ -277,14 +277,16 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t    }\n \t}\n \n+#if !defined(__GXX_EXPERIMENTAL_CXX0X__) || _GLIBCXX_USE_DEPRECATED\n       // Special case for auto_ptr<_Tp> to provide the strong guarantee.\n       template<typename _Tp>\n         explicit\n         __shared_count(std::auto_ptr<_Tp>& __r)\n \t: _M_pi(new _Sp_counted_base_impl<_Tp*,\n \t\t_Sp_deleter<_Tp>, _Lp >(__r.get(), _Sp_deleter<_Tp>()))\n         { __r.release(); }\n-  \n+#endif\n+\n       // Throw bad_weak_ptr when __r._M_get_use_count() == 0.\n       explicit\n       __shared_count(const __weak_count<_Lp>& __r);\n@@ -578,6 +580,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       /**\n        * @post use_count() == 1 and __r.get() == 0\n        */\n+#if !defined(__GXX_EXPERIMENTAL_CXX0X__) || _GLIBCXX_USE_DEPRECATED\n       template<typename _Tp1>\n         explicit\n         __shared_ptr(std::auto_ptr<_Tp1>& __r)\n@@ -589,6 +592,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t  _M_refcount = __shared_count<_Lp>(__r);\n \t  __enable_shared_from_this_helper(_M_refcount, __tmp, __tmp);\n \t}\n+#endif\n \n       template<typename _Tp1>\n         __shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, __static_cast_tag)\n@@ -620,13 +624,15 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t  return *this;\n \t}\n \n+#if !defined(__GXX_EXPERIMENTAL_CXX0X__) || _GLIBCXX_USE_DEPRECATED\n       template<typename _Tp1>\n         __shared_ptr&\n         operator=(std::auto_ptr<_Tp1>& __r)\n         {\n \t  __shared_ptr(__r).swap(*this);\n \t  return *this;\n \t}\n+#endif\n \n       void\n       reset() // never throws\n@@ -993,10 +999,12 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n         shared_ptr(const weak_ptr<_Tp1>& __r)\n \t: __shared_ptr<_Tp>(__r) { }\n \n+#if !defined(__GXX_EXPERIMENTAL_CXX0X__) || _GLIBCXX_USE_DEPRECATED\n       template<typename _Tp1>\n         explicit\n         shared_ptr(std::auto_ptr<_Tp1>& __r)\n \t: __shared_ptr<_Tp>(__r) { }\n+#endif\n \n       template<typename _Tp1>\n         shared_ptr(const shared_ptr<_Tp1>& __r, __static_cast_tag)\n@@ -1018,13 +1026,15 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t  return *this;\n \t}\n \n+#if !defined(__GXX_EXPERIMENTAL_CXX0X__) || _GLIBCXX_USE_DEPRECATED\n       template<typename _Tp1>\n         shared_ptr&\n         operator=(std::auto_ptr<_Tp1>& __r)\n         {\n \t  this->__shared_ptr<_Tp>::operator=(__r);\n \t  return *this;\n \t}\n+#endif\n     };\n \n   template<typename _Tp, typename _Tp1>"}]}